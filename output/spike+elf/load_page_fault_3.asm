
build/spike/rvh_test.elf:     file format elf64-littleriscv


Disassembly of section .boot:

0000000080000000 <_boot>:

.section .boot, "ax" 
.globl _boot
_boot:
    bnez a0, .
    80000000:	e101                	bnez	a0,80000000 <_boot>
    csrwi    sscratch, 0xf
    80000002:	1407d073          	csrw	sscratch,15
    /* Initialize stack pointer */
    la sp, __stack_top
    80000006:	002ff117          	auipc	sp,0x2ff
    8000000a:	ffa10113          	add	sp,sp,-6 # 802ff000 <__stack_top>

    /* Clear bss */ 
    la a0, __bss_start
    8000000e:	00027517          	auipc	a0,0x27
    80000012:	ff250513          	add	a0,a0,-14 # 80027000 <__bss_start>
    la a1, __bss_end
    80000016:	0003d597          	auipc	a1,0x3d
    8000001a:	0c258593          	add	a1,a1,194 # 8003d0d8 <__bss_end>
    bgeu a0, a1, 2f
    8000001e:	00b57763          	bgeu	a0,a1,8000002c <_boot+0x2c>
1:
    sw zero, (a0)
    80000022:	00052023          	sw	zero,0(a0)
    addi a0, a0, 4
    80000026:	0511                	add	a0,a0,4
    bltu a0, a1, 1b
    80000028:	feb56de3          	bltu	a0,a1,80000022 <_boot+0x22>
2:
    call _init
    8000002c:	17a1b0ef          	jal	8001b1a6 <_init>
    call main
    80000030:	2de1b0ef          	jal	8001b30e <main>
    li a0, 0
    80000034:	4501                	li	a0,0
    call exit
    80000036:	3cb1a0ef          	jal	8001ac00 <exit>
    j .
    8000003a:	a001                	j	8000003a <_boot+0x3a>

Disassembly of section .text:

000000008000003c <check_csr_field_spec>:
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <rvh_test.h>

bool check_csr_field_spec(){
    8000003c:	7179                	add	sp,sp,-48

    TEST_START();
    8000003e:	0001b597          	auipc	a1,0x1b
    80000042:	36a58593          	add	a1,a1,874 # 8001b3a8 <__func__.1>
    80000046:	0001d517          	auipc	a0,0x1d
    8000004a:	a9a50513          	add	a0,a0,-1382 # 8001cae0 <__func__.1+0x2e8>
bool check_csr_field_spec(){
    8000004e:	f406                	sd	ra,40(sp)
    80000050:	f022                	sd	s0,32(sp)
    80000052:	ec26                	sd	s1,24(sp)
    80000054:	e84a                	sd	s2,16(sp)
    80000056:	e44e                	sd	s3,8(sp)
    TEST_START();
    80000058:	70b1a0ef          	jal	8001af62 <printf>
    8000005c:	4529                	li	a0,10
    8000005e:	5d7190ef          	jal	80019e34 <putchar>

    /* this assumes machine mode */
    //check_csr_wrrd("mstatus", mstatus, (uint64_t) -1, 0x800000ca007e79aaULL);
    //check_csr_wrrd("mideleg", mideleg, (uint64_t) -1, 0x1666);
    //check_csr_wrrd("medeleg", medeleg, (uint64_t) -1, 0xb15d);
    check_csr_wrrd("mideleg", mideleg, (uint64_t)0, 0x444);
    80000062:	303024f3          	csrr	s1,mideleg
    80000066:	30305073          	csrw	mideleg,0
    8000006a:	30302473          	csrr	s0,mideleg
    8000006e:	0001d617          	auipc	a2,0x1d
    80000072:	a8260613          	add	a2,a2,-1406 # 8001caf0 <__func__.1+0x2f8>
    80000076:	08200593          	li	a1,130
    8000007a:	0001d517          	auipc	a0,0x1d
    8000007e:	a7e50513          	add	a0,a0,-1410 # 8001caf8 <__func__.1+0x300>
    80000082:	6e11a0ef          	jal	8001af62 <printf>
    80000086:	44400793          	li	a5,1092
    8000008a:	46f40263          	beq	s0,a5,800004ee <check_csr_field_spec+0x4b2>
    8000008e:	0001d597          	auipc	a1,0x1d
    80000092:	a4258593          	add	a1,a1,-1470 # 8001cad0 <__func__.1+0x2d8>
    80000096:	0001d517          	auipc	a0,0x1d
    8000009a:	a7a50513          	add	a0,a0,-1414 # 8001cb10 <__func__.1+0x318>
    8000009e:	6c51a0ef          	jal	8001af62 <printf>
    800000a2:	0001d517          	auipc	a0,0x1d
    800000a6:	a7650513          	add	a0,a0,-1418 # 8001cb18 <__func__.1+0x320>
    800000aa:	6b91a0ef          	jal	8001af62 <printf>
    800000ae:	8622                	mv	a2,s0
    800000b0:	44400693          	li	a3,1092
    800000b4:	4581                	li	a1,0
    800000b6:	0001d517          	auipc	a0,0x1d
    800000ba:	a6a50513          	add	a0,a0,-1430 # 8001cb20 <__func__.1+0x328>
    800000be:	6a51a0ef          	jal	8001af62 <printf>
    800000c2:	02900513          	li	a0,41
    800000c6:	56f190ef          	jal	80019e34 <putchar>
    800000ca:	4529                	li	a0,10
    800000cc:	569190ef          	jal	80019e34 <putchar>
    800000d0:	4401                	li	s0,0
    800000d2:	30349073          	csrw	mideleg,s1
    //check_csr_wrrd("mip", mip, (uint64_t) -1, 0x6e6);
    //check_csr_wrrd("mie", mie, (uint64_t) -1, 0x1eee);
    check_csr_wrrd("mtinst", CSR_MTINST, (uint64_t) -1, (uint64_t) -1);
    800000d6:	34a029f3          	csrr	s3,0x34a
    800000da:	54fd                	li	s1,-1
    800000dc:	34a49073          	csrw	0x34a,s1
    800000e0:	34a02973          	csrr	s2,0x34a
    800000e4:	0001d617          	auipc	a2,0x1d
    800000e8:	a5460613          	add	a2,a2,-1452 # 8001cb38 <__func__.1+0x340>
    800000ec:	08200593          	li	a1,130
    800000f0:	0001d517          	auipc	a0,0x1d
    800000f4:	a0850513          	add	a0,a0,-1528 # 8001caf8 <__func__.1+0x300>
    800000f8:	66b1a0ef          	jal	8001af62 <printf>
    800000fc:	30990f63          	beq	s2,s1,8000041a <check_csr_field_spec+0x3de>
    80000100:	0001d597          	auipc	a1,0x1d
    80000104:	9d058593          	add	a1,a1,-1584 # 8001cad0 <__func__.1+0x2d8>
    80000108:	0001d517          	auipc	a0,0x1d
    8000010c:	a0850513          	add	a0,a0,-1528 # 8001cb10 <__func__.1+0x318>
    80000110:	6531a0ef          	jal	8001af62 <printf>
    80000114:	0001d517          	auipc	a0,0x1d
    80000118:	a0450513          	add	a0,a0,-1532 # 8001cb18 <__func__.1+0x320>
    8000011c:	6471a0ef          	jal	8001af62 <printf>
    80000120:	56fd                	li	a3,-1
    80000122:	864a                	mv	a2,s2
    80000124:	55fd                	li	a1,-1
    80000126:	0001d517          	auipc	a0,0x1d
    8000012a:	9fa50513          	add	a0,a0,-1542 # 8001cb20 <__func__.1+0x328>
    8000012e:	6351a0ef          	jal	8001af62 <printf>
    80000132:	02900513          	li	a0,41
    80000136:	4ff190ef          	jal	80019e34 <putchar>
    8000013a:	4529                	li	a0,10
    8000013c:	4f9190ef          	jal	80019e34 <putchar>
    80000140:	4401                	li	s0,0
    80000142:	34a99073          	csrw	0x34a,s3
    check_csr_wrrd("mtval2", CSR_MTVAL2, (uint64_t) -1, (uint64_t) -1);
    80000146:	34b029f3          	csrr	s3,0x34b
    8000014a:	54fd                	li	s1,-1
    8000014c:	34b49073          	csrw	0x34b,s1
    80000150:	34b02973          	csrr	s2,0x34b
    80000154:	0001d617          	auipc	a2,0x1d
    80000158:	9ec60613          	add	a2,a2,-1556 # 8001cb40 <__func__.1+0x348>
    8000015c:	08200593          	li	a1,130
    80000160:	0001d517          	auipc	a0,0x1d
    80000164:	99850513          	add	a0,a0,-1640 # 8001caf8 <__func__.1+0x300>
    80000168:	5fb1a0ef          	jal	8001af62 <printf>
    8000016c:	36990363          	beq	s2,s1,800004d2 <check_csr_field_spec+0x496>
    80000170:	0001d597          	auipc	a1,0x1d
    80000174:	96058593          	add	a1,a1,-1696 # 8001cad0 <__func__.1+0x2d8>
    80000178:	0001d517          	auipc	a0,0x1d
    8000017c:	99850513          	add	a0,a0,-1640 # 8001cb10 <__func__.1+0x318>
    80000180:	5e31a0ef          	jal	8001af62 <printf>
    80000184:	0001d517          	auipc	a0,0x1d
    80000188:	99450513          	add	a0,a0,-1644 # 8001cb18 <__func__.1+0x320>
    8000018c:	5d71a0ef          	jal	8001af62 <printf>
    80000190:	56fd                	li	a3,-1
    80000192:	864a                	mv	a2,s2
    80000194:	55fd                	li	a1,-1
    80000196:	0001d517          	auipc	a0,0x1d
    8000019a:	98a50513          	add	a0,a0,-1654 # 8001cb20 <__func__.1+0x328>
    8000019e:	5c51a0ef          	jal	8001af62 <printf>
    800001a2:	02900513          	li	a0,41
    800001a6:	48f190ef          	jal	80019e34 <putchar>
    800001aa:	4529                	li	a0,10
    800001ac:	489190ef          	jal	80019e34 <putchar>
    800001b0:	4401                	li	s0,0
    800001b2:	34b99073          	csrw	0x34b,s3
    //check_csr_wrrd("hstatus", CSR_HSTATUS, (uint64_t) -1, 0x30053f3e0);
    //check_csr_wrrd("hideleg", CSR_HIDELEG, (uint64_t) -1, 0x444);
    //check_csr_wrrd("hedeleg", CSR_HEDELEG, (uint64_t) -1, 0xb1ff);
    //check_csr_wrrd("hvip", CSR_HVIP, (uint64_t) -1, 0x444);
    //check_csr_wrrd("hip", CSR_HIP, (uint64_t) -1, 0x4);
    check_csr_wrrd("hie", CSR_HIE, (uint64_t) -1, 0x444);
    800001b6:	60402973          	csrr	s2,hie
    800001ba:	57fd                	li	a5,-1
    800001bc:	60479073          	csrw	hie,a5
    800001c0:	604024f3          	csrr	s1,hie
    800001c4:	0001d617          	auipc	a2,0x1d
    800001c8:	98460613          	add	a2,a2,-1660 # 8001cb48 <__func__.1+0x350>
    800001cc:	08200593          	li	a1,130
    800001d0:	0001d517          	auipc	a0,0x1d
    800001d4:	92850513          	add	a0,a0,-1752 # 8001caf8 <__func__.1+0x300>
    800001d8:	58b1a0ef          	jal	8001af62 <printf>
    800001dc:	44400793          	li	a5,1092
    800001e0:	2cf48b63          	beq	s1,a5,800004b6 <check_csr_field_spec+0x47a>
    800001e4:	0001d597          	auipc	a1,0x1d
    800001e8:	8ec58593          	add	a1,a1,-1812 # 8001cad0 <__func__.1+0x2d8>
    800001ec:	0001d517          	auipc	a0,0x1d
    800001f0:	92450513          	add	a0,a0,-1756 # 8001cb10 <__func__.1+0x318>
    800001f4:	56f1a0ef          	jal	8001af62 <printf>
    800001f8:	0001d517          	auipc	a0,0x1d
    800001fc:	92050513          	add	a0,a0,-1760 # 8001cb18 <__func__.1+0x320>
    80000200:	5631a0ef          	jal	8001af62 <printf>
    80000204:	44400693          	li	a3,1092
    80000208:	8626                	mv	a2,s1
    8000020a:	55fd                	li	a1,-1
    8000020c:	0001d517          	auipc	a0,0x1d
    80000210:	91450513          	add	a0,a0,-1772 # 8001cb20 <__func__.1+0x328>
    80000214:	54f1a0ef          	jal	8001af62 <printf>
    80000218:	02900513          	li	a0,41
    8000021c:	419190ef          	jal	80019e34 <putchar>
    80000220:	4529                	li	a0,10
    80000222:	413190ef          	jal	80019e34 <putchar>
    80000226:	4401                	li	s0,0
    80000228:	60491073          	csrw	hie,s2
    check_csr_wrrd("htval", CSR_HTVAL, (uint64_t) -1, (uint64_t) -1);
    8000022c:	643029f3          	csrr	s3,htval
    80000230:	54fd                	li	s1,-1
    80000232:	64349073          	csrw	htval,s1
    80000236:	64302973          	csrr	s2,htval
    8000023a:	0001d617          	auipc	a2,0x1d
    8000023e:	91660613          	add	a2,a2,-1770 # 8001cb50 <__func__.1+0x358>
    80000242:	08200593          	li	a1,130
    80000246:	0001d517          	auipc	a0,0x1d
    8000024a:	8b250513          	add	a0,a0,-1870 # 8001caf8 <__func__.1+0x300>
    8000024e:	5151a0ef          	jal	8001af62 <printf>
    80000252:	24990463          	beq	s2,s1,8000049a <check_csr_field_spec+0x45e>
    80000256:	0001d597          	auipc	a1,0x1d
    8000025a:	87a58593          	add	a1,a1,-1926 # 8001cad0 <__func__.1+0x2d8>
    8000025e:	0001d517          	auipc	a0,0x1d
    80000262:	8b250513          	add	a0,a0,-1870 # 8001cb10 <__func__.1+0x318>
    80000266:	4fd1a0ef          	jal	8001af62 <printf>
    8000026a:	0001d517          	auipc	a0,0x1d
    8000026e:	8ae50513          	add	a0,a0,-1874 # 8001cb18 <__func__.1+0x320>
    80000272:	4f11a0ef          	jal	8001af62 <printf>
    80000276:	56fd                	li	a3,-1
    80000278:	864a                	mv	a2,s2
    8000027a:	55fd                	li	a1,-1
    8000027c:	0001d517          	auipc	a0,0x1d
    80000280:	8a450513          	add	a0,a0,-1884 # 8001cb20 <__func__.1+0x328>
    80000284:	4df1a0ef          	jal	8001af62 <printf>
    80000288:	02900513          	li	a0,41
    8000028c:	3a9190ef          	jal	80019e34 <putchar>
    80000290:	4529                	li	a0,10
    80000292:	3a3190ef          	jal	80019e34 <putchar>
    80000296:	4401                	li	s0,0
    80000298:	64399073          	csrw	htval,s3
    check_csr_wrrd("htinst", CSR_HTINST, (uint64_t) -1, (uint64_t) -1);
    8000029c:	64a029f3          	csrr	s3,htinst
    800002a0:	54fd                	li	s1,-1
    800002a2:	64a49073          	csrw	htinst,s1
    800002a6:	64a02973          	csrr	s2,htinst
    800002aa:	0001d617          	auipc	a2,0x1d
    800002ae:	8ae60613          	add	a2,a2,-1874 # 8001cb58 <__func__.1+0x360>
    800002b2:	08200593          	li	a1,130
    800002b6:	0001d517          	auipc	a0,0x1d
    800002ba:	84250513          	add	a0,a0,-1982 # 8001caf8 <__func__.1+0x300>
    800002be:	4a51a0ef          	jal	8001af62 <printf>
    800002c2:	1a990e63          	beq	s2,s1,8000047e <check_csr_field_spec+0x442>
    800002c6:	0001d597          	auipc	a1,0x1d
    800002ca:	80a58593          	add	a1,a1,-2038 # 8001cad0 <__func__.1+0x2d8>
    800002ce:	0001d517          	auipc	a0,0x1d
    800002d2:	84250513          	add	a0,a0,-1982 # 8001cb10 <__func__.1+0x318>
    800002d6:	48d1a0ef          	jal	8001af62 <printf>
    800002da:	0001d517          	auipc	a0,0x1d
    800002de:	83e50513          	add	a0,a0,-1986 # 8001cb18 <__func__.1+0x320>
    800002e2:	4811a0ef          	jal	8001af62 <printf>
    800002e6:	56fd                	li	a3,-1
    800002e8:	864a                	mv	a2,s2
    800002ea:	55fd                	li	a1,-1
    800002ec:	0001d517          	auipc	a0,0x1d
    800002f0:	83450513          	add	a0,a0,-1996 # 8001cb20 <__func__.1+0x328>
    800002f4:	46f1a0ef          	jal	8001af62 <printf>
    800002f8:	02900513          	li	a0,41
    800002fc:	339190ef          	jal	80019e34 <putchar>
    80000300:	4529                	li	a0,10
    80000302:	333190ef          	jal	80019e34 <putchar>
    80000306:	4401                	li	s0,0
    80000308:	64a99073          	csrw	htinst,s3
    //check_csr_wrrd("hgatp", CSR_HGATP, (8ULL << 60) | (1ULL << 60)-1, 0x80000000000fffffULL);
    //check_csr_wrrd("vsstatus", CSR_VSSTATUS, (uint64_t) -1, 0x80000000000c6122ULL);
    //check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vstvec", CSR_VSTVEC, (uint64_t) -1, 0xffffffffffffff01ULL);
    check_csr_wrrd("vsscratch", CSR_VSSCRATCH, (uint64_t) -1, (uint64_t) -1);
    8000030c:	240029f3          	csrr	s3,vsscratch
    80000310:	54fd                	li	s1,-1
    80000312:	24049073          	csrw	vsscratch,s1
    80000316:	24002973          	csrr	s2,vsscratch
    8000031a:	0001d617          	auipc	a2,0x1d
    8000031e:	84660613          	add	a2,a2,-1978 # 8001cb60 <__func__.1+0x368>
    80000322:	08200593          	li	a1,130
    80000326:	0001c517          	auipc	a0,0x1c
    8000032a:	7d250513          	add	a0,a0,2002 # 8001caf8 <__func__.1+0x300>
    8000032e:	4351a0ef          	jal	8001af62 <printf>
    80000332:	12990863          	beq	s2,s1,80000462 <check_csr_field_spec+0x426>
    80000336:	0001c597          	auipc	a1,0x1c
    8000033a:	79a58593          	add	a1,a1,1946 # 8001cad0 <__func__.1+0x2d8>
    8000033e:	0001c517          	auipc	a0,0x1c
    80000342:	7d250513          	add	a0,a0,2002 # 8001cb10 <__func__.1+0x318>
    80000346:	41d1a0ef          	jal	8001af62 <printf>
    8000034a:	0001c517          	auipc	a0,0x1c
    8000034e:	7ce50513          	add	a0,a0,1998 # 8001cb18 <__func__.1+0x320>
    80000352:	4111a0ef          	jal	8001af62 <printf>
    80000356:	56fd                	li	a3,-1
    80000358:	864a                	mv	a2,s2
    8000035a:	55fd                	li	a1,-1
    8000035c:	0001c517          	auipc	a0,0x1c
    80000360:	7c450513          	add	a0,a0,1988 # 8001cb20 <__func__.1+0x328>
    80000364:	3ff1a0ef          	jal	8001af62 <printf>
    80000368:	02900513          	li	a0,41
    8000036c:	2c9190ef          	jal	80019e34 <putchar>
    80000370:	4529                	li	a0,10
    80000372:	2c3190ef          	jal	80019e34 <putchar>
    80000376:	4401                	li	s0,0
    80000378:	24099073          	csrw	vsscratch,s3
    //check_csr_wrrd("vsepc", CSR_VSEPC, (uint64_t) -1, 0xfffffffffffffffeULL);
    //check_csr_wrrd("vscause", CSR_VSCAUSE, (uint64_t) -1, 0x800000000000001fULL);
    check_csr_wrrd("vstval", CSR_VSTVAL, (uint64_t) -1, 0xffffffffffffffffULL);
    8000037c:	243029f3          	csrr	s3,vstval
    80000380:	54fd                	li	s1,-1
    80000382:	24349073          	csrw	vstval,s1
    80000386:	24302973          	csrr	s2,vstval
    8000038a:	0001c617          	auipc	a2,0x1c
    8000038e:	7e660613          	add	a2,a2,2022 # 8001cb70 <__func__.1+0x378>
    80000392:	08200593          	li	a1,130
    80000396:	0001c517          	auipc	a0,0x1c
    8000039a:	76250513          	add	a0,a0,1890 # 8001caf8 <__func__.1+0x300>
    8000039e:	3c51a0ef          	jal	8001af62 <printf>
    800003a2:	08990a63          	beq	s2,s1,80000436 <check_csr_field_spec+0x3fa>
    800003a6:	0001c597          	auipc	a1,0x1c
    800003aa:	72a58593          	add	a1,a1,1834 # 8001cad0 <__func__.1+0x2d8>
    800003ae:	0001c517          	auipc	a0,0x1c
    800003b2:	76250513          	add	a0,a0,1890 # 8001cb10 <__func__.1+0x318>
    800003b6:	3ad1a0ef          	jal	8001af62 <printf>
    800003ba:	0001c517          	auipc	a0,0x1c
    800003be:	75e50513          	add	a0,a0,1886 # 8001cb18 <__func__.1+0x320>
    800003c2:	3a11a0ef          	jal	8001af62 <printf>
    800003c6:	56fd                	li	a3,-1
    800003c8:	864a                	mv	a2,s2
    800003ca:	55fd                	li	a1,-1
    800003cc:	0001c517          	auipc	a0,0x1c
    800003d0:	75450513          	add	a0,a0,1876 # 8001cb20 <__func__.1+0x328>
    800003d4:	38f1a0ef          	jal	8001af62 <printf>
    800003d8:	02900513          	li	a0,41
    800003dc:	259190ef          	jal	80019e34 <putchar>
    800003e0:	4529                	li	a0,10
    800003e2:	253190ef          	jal	80019e34 <putchar>
    800003e6:	24399073          	csrw	vstval,s3
    800003ea:	4401                	li	s0,0
    //check_csr_wrrd("vsatp", CSR_VSATP, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vsatp", CSR_VSATP, (8ULL << 60) | (1ULL << 60)-1, 0x80000000000fffffULL);

    TEST_END();
    800003ec:	0001c597          	auipc	a1,0x1c
    800003f0:	6e458593          	add	a1,a1,1764 # 8001cad0 <__func__.1+0x2d8>
    800003f4:	0001c517          	auipc	a0,0x1c
    800003f8:	78450513          	add	a0,a0,1924 # 8001cb78 <__func__.1+0x380>
    800003fc:	3671a0ef          	jal	8001af62 <printf>
    80000400:	4511                	li	a0,4
    80000402:	6dc000ef          	jal	80000ade <goto_priv>
    80000406:	721000ef          	jal	80001326 <reset_state>
}
    8000040a:	70a2                	ld	ra,40(sp)
    8000040c:	8522                	mv	a0,s0
    8000040e:	7402                	ld	s0,32(sp)
    80000410:	64e2                	ld	s1,24(sp)
    80000412:	6942                	ld	s2,16(sp)
    80000414:	69a2                	ld	s3,8(sp)
    80000416:	6145                	add	sp,sp,48
    80000418:	8082                	ret
    check_csr_wrrd("mtinst", CSR_MTINST, (uint64_t) -1, (uint64_t) -1);
    8000041a:	0001c597          	auipc	a1,0x1c
    8000041e:	6a658593          	add	a1,a1,1702 # 8001cac0 <__func__.1+0x2c8>
    80000422:	0001c517          	auipc	a0,0x1c
    80000426:	6ee50513          	add	a0,a0,1774 # 8001cb10 <__func__.1+0x318>
    8000042a:	3391a0ef          	jal	8001af62 <printf>
    8000042e:	4529                	li	a0,10
    80000430:	205190ef          	jal	80019e34 <putchar>
    80000434:	b339                	j	80000142 <check_csr_field_spec+0x106>
    check_csr_wrrd("vstval", CSR_VSTVAL, (uint64_t) -1, 0xffffffffffffffffULL);
    80000436:	0001c597          	auipc	a1,0x1c
    8000043a:	68a58593          	add	a1,a1,1674 # 8001cac0 <__func__.1+0x2c8>
    8000043e:	0001c517          	auipc	a0,0x1c
    80000442:	6d250513          	add	a0,a0,1746 # 8001cb10 <__func__.1+0x318>
    80000446:	31d1a0ef          	jal	8001af62 <printf>
    8000044a:	4529                	li	a0,10
    8000044c:	1e9190ef          	jal	80019e34 <putchar>
    80000450:	d859                	beqz	s0,800003e6 <check_csr_field_spec+0x3aa>
    80000452:	24399073          	csrw	vstval,s3
    80000456:	4405                	li	s0,1
    TEST_END();
    80000458:	0001c597          	auipc	a1,0x1c
    8000045c:	66858593          	add	a1,a1,1640 # 8001cac0 <__func__.1+0x2c8>
    80000460:	bf51                	j	800003f4 <check_csr_field_spec+0x3b8>
    check_csr_wrrd("vsscratch", CSR_VSSCRATCH, (uint64_t) -1, (uint64_t) -1);
    80000462:	0001c597          	auipc	a1,0x1c
    80000466:	65e58593          	add	a1,a1,1630 # 8001cac0 <__func__.1+0x2c8>
    8000046a:	0001c517          	auipc	a0,0x1c
    8000046e:	6a650513          	add	a0,a0,1702 # 8001cb10 <__func__.1+0x318>
    80000472:	2f11a0ef          	jal	8001af62 <printf>
    80000476:	4529                	li	a0,10
    80000478:	1bd190ef          	jal	80019e34 <putchar>
    8000047c:	bdf5                	j	80000378 <check_csr_field_spec+0x33c>
    check_csr_wrrd("htinst", CSR_HTINST, (uint64_t) -1, (uint64_t) -1);
    8000047e:	0001c597          	auipc	a1,0x1c
    80000482:	64258593          	add	a1,a1,1602 # 8001cac0 <__func__.1+0x2c8>
    80000486:	0001c517          	auipc	a0,0x1c
    8000048a:	68a50513          	add	a0,a0,1674 # 8001cb10 <__func__.1+0x318>
    8000048e:	2d51a0ef          	jal	8001af62 <printf>
    80000492:	4529                	li	a0,10
    80000494:	1a1190ef          	jal	80019e34 <putchar>
    80000498:	bd85                	j	80000308 <check_csr_field_spec+0x2cc>
    check_csr_wrrd("htval", CSR_HTVAL, (uint64_t) -1, (uint64_t) -1);
    8000049a:	0001c597          	auipc	a1,0x1c
    8000049e:	62658593          	add	a1,a1,1574 # 8001cac0 <__func__.1+0x2c8>
    800004a2:	0001c517          	auipc	a0,0x1c
    800004a6:	66e50513          	add	a0,a0,1646 # 8001cb10 <__func__.1+0x318>
    800004aa:	2b91a0ef          	jal	8001af62 <printf>
    800004ae:	4529                	li	a0,10
    800004b0:	185190ef          	jal	80019e34 <putchar>
    800004b4:	b3d5                	j	80000298 <check_csr_field_spec+0x25c>
    check_csr_wrrd("hie", CSR_HIE, (uint64_t) -1, 0x444);
    800004b6:	0001c597          	auipc	a1,0x1c
    800004ba:	60a58593          	add	a1,a1,1546 # 8001cac0 <__func__.1+0x2c8>
    800004be:	0001c517          	auipc	a0,0x1c
    800004c2:	65250513          	add	a0,a0,1618 # 8001cb10 <__func__.1+0x318>
    800004c6:	29d1a0ef          	jal	8001af62 <printf>
    800004ca:	4529                	li	a0,10
    800004cc:	169190ef          	jal	80019e34 <putchar>
    800004d0:	bba1                	j	80000228 <check_csr_field_spec+0x1ec>
    check_csr_wrrd("mtval2", CSR_MTVAL2, (uint64_t) -1, (uint64_t) -1);
    800004d2:	0001c597          	auipc	a1,0x1c
    800004d6:	5ee58593          	add	a1,a1,1518 # 8001cac0 <__func__.1+0x2c8>
    800004da:	0001c517          	auipc	a0,0x1c
    800004de:	63650513          	add	a0,a0,1590 # 8001cb10 <__func__.1+0x318>
    800004e2:	2811a0ef          	jal	8001af62 <printf>
    800004e6:	4529                	li	a0,10
    800004e8:	14d190ef          	jal	80019e34 <putchar>
    800004ec:	b1d9                	j	800001b2 <check_csr_field_spec+0x176>
    check_csr_wrrd("mideleg", mideleg, (uint64_t)0, 0x444);
    800004ee:	0001c597          	auipc	a1,0x1c
    800004f2:	5d258593          	add	a1,a1,1490 # 8001cac0 <__func__.1+0x2c8>
    800004f6:	0001c517          	auipc	a0,0x1c
    800004fa:	61a50513          	add	a0,a0,1562 # 8001cb10 <__func__.1+0x318>
    800004fe:	2651a0ef          	jal	8001af62 <printf>
    80000502:	4529                	li	a0,10
    80000504:	131190ef          	jal	80019e34 <putchar>
    80000508:	4405                	li	s0,1
    8000050a:	b6e1                	j	800000d2 <check_csr_field_spec+0x96>

000000008000050c <check_misa_h>:

bool check_misa_h(){
    8000050c:	1141                	add	sp,sp,-16

    TEST_START();
    8000050e:	0001b597          	auipc	a1,0x1b
    80000512:	eb258593          	add	a1,a1,-334 # 8001b3c0 <__func__.0>
    80000516:	0001c517          	auipc	a0,0x1c
    8000051a:	5ca50513          	add	a0,a0,1482 # 8001cae0 <__func__.1+0x2e8>
bool check_misa_h(){
    8000051e:	e406                	sd	ra,8(sp)
    80000520:	e022                	sd	s0,0(sp)
    TEST_START();
    80000522:	2411a0ef          	jal	8001af62 <printf>
    80000526:	4529                	li	a0,10
    80000528:	10d190ef          	jal	80019e34 <putchar>

    uint64_t misa = CSRR(misa);
    8000052c:	301027f3          	csrr	a5,misa
    CSRS(misa, (1ULL << 7));
    80000530:	08000793          	li	a5,128
    80000534:	3017a073          	csrs	misa,a5

    bool hyp_ext_present = CSRR(misa) & (1ULL << 7);
    80000538:	30102473          	csrr	s0,misa
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    8000053c:	0001c617          	auipc	a2,0x1c
    80000540:	64460613          	add	a2,a2,1604 # 8001cb80 <__func__.1+0x388>
    80000544:	08200593          	li	a1,130
    80000548:	0001c517          	auipc	a0,0x1c
    8000054c:	5b050513          	add	a0,a0,1456 # 8001caf8 <__func__.1+0x300>
    bool hyp_ext_present = CSRR(misa) & (1ULL << 7);
    80000550:	08047413          	and	s0,s0,128
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    80000554:	20f1a0ef          	jal	8001af62 <printf>
    80000558:	c031                	beqz	s0,8000059c <check_misa_h+0x90>
    8000055a:	0001c597          	auipc	a1,0x1c
    8000055e:	56658593          	add	a1,a1,1382 # 8001cac0 <__func__.1+0x2c8>
    80000562:	0001c517          	auipc	a0,0x1c
    80000566:	5ae50513          	add	a0,a0,1454 # 8001cb10 <__func__.1+0x318>
    8000056a:	1f91a0ef          	jal	8001af62 <printf>
    8000056e:	4529                	li	a0,10
    80000570:	0c5190ef          	jal	80019e34 <putchar>
    //     VERBOSE("misa h bit is hardwired");
    // }

    // CSRW(misa, misa);

    TEST_END();
    80000574:	0001c597          	auipc	a1,0x1c
    80000578:	54c58593          	add	a1,a1,1356 # 8001cac0 <__func__.1+0x2c8>
    8000057c:	0001c517          	auipc	a0,0x1c
    80000580:	5fc50513          	add	a0,a0,1532 # 8001cb78 <__func__.1+0x380>
    80000584:	1df1a0ef          	jal	8001af62 <printf>
    80000588:	4511                	li	a0,4
    8000058a:	554000ef          	jal	80000ade <goto_priv>
    8000058e:	599000ef          	jal	80001326 <reset_state>
}
    80000592:	60a2                	ld	ra,8(sp)
    80000594:	6402                	ld	s0,0(sp)
    TEST_END();
    80000596:	4505                	li	a0,1
}
    80000598:	0141                	add	sp,sp,16
    8000059a:	8082                	ret
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    8000059c:	0001c597          	auipc	a1,0x1c
    800005a0:	53458593          	add	a1,a1,1332 # 8001cad0 <__func__.1+0x2d8>
    800005a4:	0001c517          	auipc	a0,0x1c
    800005a8:	56c50513          	add	a0,a0,1388 # 8001cb10 <__func__.1+0x318>
    800005ac:	1b71a0ef          	jal	8001af62 <printf>
    800005b0:	0001c517          	auipc	a0,0x1c
    800005b4:	56850513          	add	a0,a0,1384 # 8001cb18 <__func__.1+0x320>
    800005b8:	1ab1a0ef          	jal	8001af62 <printf>
    800005bc:	0001c517          	auipc	a0,0x1c
    800005c0:	5e450513          	add	a0,a0,1508 # 8001cba0 <__func__.1+0x3a8>
    800005c4:	19f1a0ef          	jal	8001af62 <printf>
    800005c8:	02900513          	li	a0,41
    800005cc:	069190ef          	jal	80019e34 <putchar>
    800005d0:	4529                	li	a0,10
    800005d2:	063190ef          	jal	80019e34 <putchar>
}
    800005d6:	60a2                	ld	ra,8(sp)
    800005d8:	6402                	ld	s0,0(sp)
        return false;
    800005da:	4501                	li	a0,0
}
    800005dc:	0141                	add	sp,sp,16
    800005de:	8082                	ret

00000000800005e0 <hspt_init>:
    //     for(int i = 0; i < 512; i++)
    //         hspt[j][i] = 0;

    addr = 0x00000000;
    for(int i = 0; i < 4; i++){
        hspt[0][i] = 
    800005e0:	0003a897          	auipc	a7,0x3a
    800005e4:	a2088893          	add	a7,a7,-1504 # 8003a000 <hspt>
    800005e8:	0cf00613          	li	a2,207
    800005ec:	00c8b023          	sd	a2,0(a7)
    800005f0:	10000637          	lui	a2,0x10000
    800005f4:	0cf60613          	add	a2,a2,207 # 100000cf <STACK_SIZE+0xff000cf>
            PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(0);
    }

    hspt[0][4] =
        PTE_V | (((uintptr_t)&hspt[1][0]) >> 2);
    800005f8:	0003b597          	auipc	a1,0x3b
    800005fc:	a0858593          	add	a1,a1,-1528 # 8003b000 <hspt+0x1000>
        hspt[0][i] = 
    80000600:	00c8b423          	sd	a2,8(a7)
    80000604:	20000637          	lui	a2,0x20000
    80000608:	0cf60613          	add	a2,a2,207 # 200000cf <STACK_SIZE+0x1ff000cf>
    hspt[1][0] = 
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    8000060c:	0003c697          	auipc	a3,0x3c
    80000610:	9f468693          	add	a3,a3,-1548 # 8003c000 <hspt+0x2000>
        PTE_V | (((uintptr_t)&hspt[1][0]) >> 2);
    80000614:	0025d713          	srl	a4,a1,0x2
    80000618:	00176713          	or	a4,a4,1
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    8000061c:	0026d793          	srl	a5,a3,0x2
        hspt[0][i] = 
    80000620:	00c8b823          	sd	a2,16(a7)
    80000624:	30000637          	lui	a2,0x30000
    80000628:	0cf60613          	add	a2,a2,207 # 300000cf <STACK_SIZE+0x2ff000cf>
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    8000062c:	0017e793          	or	a5,a5,1
    hspt[0][4] =
    80000630:	02e8b023          	sd	a4,32(a7)


    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000634:	44100513          	li	a0,1089
    addr = TEST_PPAGE_BASE;
    80000638:	4745                	li	a4,17
        hspt[0][i] = 
    8000063a:	00c8bc23          	sd	a2,24(a7)
    hspt[1][0] = 
    8000063e:	e19c                	sd	a5,0(a1)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000640:	00023617          	auipc	a2,0x23
    80000644:	a5060613          	add	a2,a2,-1456 # 80023090 <test_page_perm_table>
    addr = TEST_PPAGE_BASE;
    80000648:	076e                	sll	a4,a4,0x1b
        hspt[2][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].vs;  
        addr += PAGE_SIZE;
    8000064a:	6805                	lui	a6,0x1
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    8000064c:	0556                	sll	a0,a0,0x15
        hspt[2][i] = (addr >> 2) | PTE_AD |
    8000064e:	620c                	ld	a1,0(a2)
    80000650:	00275793          	srl	a5,a4,0x2
        addr += PAGE_SIZE;
    80000654:	9742                	add	a4,a4,a6
        hspt[2][i] = (addr >> 2) | PTE_AD |
    80000656:	8fcd                	or	a5,a5,a1
    80000658:	0c07e793          	or	a5,a5,192
    8000065c:	e29c                	sd	a5,0(a3)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    8000065e:	0641                	add	a2,a2,16
    80000660:	06a1                	add	a3,a3,8
    80000662:	fea716e3          	bne	a4,a0,8000064e <hspt_init+0x6e>
    //     hspt[2][i] = 
    //         PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
    //     addr +=  PAGE_SIZE;
    // }

    if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    80000666:	00025797          	auipc	a5,0x25
    8000066a:	a2e7a783          	lw	a5,-1490(a5) # 80025094 <curr_priv>
    8000066e:	37f5                	addw	a5,a5,-3
    80000670:	4705                	li	a4,1
    80000672:	00f76a63          	bltu	a4,a5,80000686 <hspt_init+0xa6>
        uintptr_t satp = (((uintptr_t)hspt) >> 12) | (0x8ULL << 60);
    80000676:	577d                	li	a4,-1
    80000678:	00c8d793          	srl	a5,a7,0xc
    8000067c:	177e                	sll	a4,a4,0x3f
    8000067e:	8fd9                	or	a5,a5,a4
        CSRW(satp, satp);
    80000680:	18079073          	csrw	satp,a5
    } else {
        ERROR("trying to set hs level satp from lower privilege");
    80000684:	8082                	ret
void hspt_init(){
    80000686:	1141                	add	sp,sp,-16
        ERROR("trying to set hs level satp from lower privilege");
    80000688:	0001c517          	auipc	a0,0x1c
    8000068c:	59850513          	add	a0,a0,1432 # 8001cc20 <__func__.1+0x428>
void hspt_init(){
    80000690:	e406                	sd	ra,8(sp)
        ERROR("trying to set hs level satp from lower privilege");
    80000692:	0d11a0ef          	jal	8001af62 <printf>
    80000696:	0c000613          	li	a2,192
    8000069a:	0001b597          	auipc	a1,0x1b
    8000069e:	d3658593          	add	a1,a1,-714 # 8001b3d0 <__func__.2>
    800006a2:	0001c517          	auipc	a0,0x1c
    800006a6:	5c650513          	add	a0,a0,1478 # 8001cc68 <__func__.1+0x470>
    800006aa:	0b91a0ef          	jal	8001af62 <printf>
    800006ae:	4501                	li	a0,0
    800006b0:	5501a0ef          	jal	8001ac00 <exit>

00000000800006b4 <vspt_init>:
    }
}

pte_t vspt[6][PAGE_SIZE/sizeof(pte_t)] __attribute__((aligned(PAGE_SIZE)));

void vspt_init(){
    800006b4:	1141                	add	sp,sp,-16
    800006b6:	e022                	sd	s0,0(sp)
    800006b8:	e406                	sd	ra,8(sp)

    uintptr_t addr;

    addr = 0x00000000;
    for(int i = 0; i < 4; i++){
        vspt[0][i] = 
    800006ba:	00034417          	auipc	s0,0x34
    800006be:	94640413          	add	s0,s0,-1722 # 80034000 <vspt>
    800006c2:	0cf00693          	li	a3,207
    800006c6:	e014                	sd	a3,0(s0)
    800006c8:	100006b7          	lui	a3,0x10000
            PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(0);
    }

    vspt[0][MEM_BASE/SUPERPAGE_SIZE(0)] = 
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    800006cc:	00035797          	auipc	a5,0x35
    800006d0:	93478793          	add	a5,a5,-1740 # 80035000 <vspt+0x1000>
        vspt[0][i] = 
    800006d4:	0cf68693          	add	a3,a3,207 # 100000cf <STACK_SIZE+0xff000cf>
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    800006d8:	0027d713          	srl	a4,a5,0x2
        vspt[0][i] = 
    800006dc:	e414                	sd	a3,8(s0)
    800006de:	300006b7          	lui	a3,0x30000
    800006e2:	0cf68693          	add	a3,a3,207 # 300000cf <STACK_SIZE+0x2ff000cf>
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    800006e6:	00176713          	or	a4,a4,1

    addr = MEM_BASE;
    for(int i = 0; i < 512; i++) vspt[1][i] = 0;
    800006ea:	6605                	lui	a2,0x1
    800006ec:	853e                	mv	a0,a5
    800006ee:	4581                	li	a1,0
        vspt[0][i] = 
    800006f0:	ec14                	sd	a3,24(s0)
    vspt[0][MEM_BASE/SUPERPAGE_SIZE(0)] = 
    800006f2:	e818                	sd	a4,16(s0)
    for(int i = 0; i < 512; i++) vspt[1][i] = 0;
    800006f4:	1c51a0ef          	jal	8001b0b8 <memset>
    addr = MEM_BASE;
    800006f8:	4785                	li	a5,1
    for(int i = 0; i <  MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    800006fa:	46c5                	li	a3,17
    addr = MEM_BASE;
    800006fc:	07fe                	sll	a5,a5,0x1f
        vspt[1][i] = 
           PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(1);
    800006fe:	00200637          	lui	a2,0x200
    for(int i = 0; i <  MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    80000702:	06ee                	sll	a3,a3,0x1b
           PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
    80000704:	0027d713          	srl	a4,a5,0x2
    80000708:	0cf76713          	or	a4,a4,207
        vspt[1][i] = 
    8000070c:	e118                	sd	a4,0(a0)
        addr +=  SUPERPAGE_SIZE(1);
    8000070e:	97b2                	add	a5,a5,a2
    for(int i = 0; i <  MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    80000710:	0521                	add	a0,a0,8
    80000712:	fed799e3          	bne	a5,a3,80000704 <vspt_init+0x50>

    // vspt[0][5] =
    //     PTE_V | PTE_U | PTE_AD | (((uintptr_t)&vspt[2][0]) >> 2);

    vspt[2][0] = 
        PTE_V | (((uintptr_t)&vspt[3][0]) >> 2);
    80000716:	00037697          	auipc	a3,0x37
    8000071a:	8ea68693          	add	a3,a3,-1814 # 80037000 <vspt+0x3000>
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    8000071e:	00036897          	auipc	a7,0x36
    80000722:	8e288893          	add	a7,a7,-1822 # 80036000 <vspt+0x2000>
        PTE_V | (((uintptr_t)&vspt[3][0]) >> 2);
    80000726:	0026d793          	srl	a5,a3,0x2
    8000072a:	0017e793          	or	a5,a5,1
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    8000072e:	0028d713          	srl	a4,a7,0x2
    80000732:	00176713          	or	a4,a4,1
    vspt[2][0] = 
    80000736:	00f8b023          	sd	a5,0(a7)

    addr = TEST_VPAGE_BASE;
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    8000073a:	00801537          	lui	a0,0x801
    addr = TEST_VPAGE_BASE;
    8000073e:	4785                	li	a5,1
    vspt[0][4] =
    80000740:	f018                	sd	a4,32(s0)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000742:	00023617          	auipc	a2,0x23
    80000746:	94e60613          	add	a2,a2,-1714 # 80023090 <test_page_perm_table>
    addr = TEST_VPAGE_BASE;
    8000074a:	1782                	sll	a5,a5,0x20
        vspt[3][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].vs;  
        addr +=  PAGE_SIZE;
    8000074c:	6805                	lui	a6,0x1
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    8000074e:	0526                	sll	a0,a0,0x9
        vspt[3][i] = (addr >> 2) | PTE_AD |
    80000750:	620c                	ld	a1,0(a2)
    80000752:	0027d713          	srl	a4,a5,0x2
        addr +=  PAGE_SIZE;
    80000756:	97c2                	add	a5,a5,a6
        vspt[3][i] = (addr >> 2) | PTE_AD |
    80000758:	8f4d                	or	a4,a4,a1
    8000075a:	0c076713          	or	a4,a4,192
    8000075e:	e298                	sd	a4,0(a3)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000760:	0641                	add	a2,a2,16
    80000762:	06a1                	add	a3,a3,8
    80000764:	fea796e3          	bne	a5,a0,80000750 <vspt_init+0x9c>
    }

    vspt[2][1] = 
        PTE_V | (((uintptr_t)&vspt[4][0]) >> 2);
    80000768:	00038697          	auipc	a3,0x38
    8000076c:	89868693          	add	a3,a3,-1896 # 80038000 <vspt+0x4000>
    80000770:	0026d713          	srl	a4,a3,0x2
    80000774:	00176713          	or	a4,a4,1

    addr = 4 * SUPERPAGE_SIZE(0) + SUPERPAGE_SIZE(1);
    for(int i = 0; i < 512; i++){
    80000778:	40100613          	li	a2,1025
    vspt[2][1] = 
    8000077c:	00e8b423          	sd	a4,8(a7)
        vspt[4][i] = (addr >> 2) | 
            PTE_V | PTE_AD | PTE_RWX; 
        addr +=  PAGE_SIZE;
    80000780:	6585                	lui	a1,0x1
    for(int i = 0; i < 512; i++){
    80000782:	065a                	sll	a2,a2,0x16
        vspt[4][i] = (addr >> 2) | 
    80000784:	0027d713          	srl	a4,a5,0x2
            PTE_V | PTE_AD | PTE_RWX; 
    80000788:	0cf76713          	or	a4,a4,207
        vspt[4][i] = (addr >> 2) | 
    8000078c:	e298                	sd	a4,0(a3)
        addr +=  PAGE_SIZE;
    8000078e:	97ae                	add	a5,a5,a1
    for(int i = 0; i < 512; i++){
    80000790:	06a1                	add	a3,a3,8
    80000792:	fec799e3          	bne	a5,a2,80000784 <vspt_init+0xd0>
    }  

    vspt[0][5] = 
        PTE_V | (((uintptr_t)&vspt[5][0]) >> 2);
    80000796:	00039697          	auipc	a3,0x39
    8000079a:	86a68693          	add	a3,a3,-1942 # 80039000 <vspt+0x5000>
    8000079e:	0026d793          	srl	a5,a3,0x2
    800007a2:	0017e793          	or	a5,a5,1
    vspt[0][5] = 
    800007a6:	f41c                	sd	a5,40(s0)
    
    addr = 5 * SUPERPAGE_SIZE(0);
    for(int i = 0; i < 512; i++){
    800007a8:	460d                	li	a2,3
    addr = 5 * SUPERPAGE_SIZE(0);
    800007aa:	4795                	li	a5,5
    800007ac:	07fa                	sll	a5,a5,0x1e
        vspt[5][i] = (addr >> 2) |
             PTE_V | PTE_AD | PTE_RWX;  
        addr +=  SUPERPAGE_SIZE(1);
    800007ae:	002005b7          	lui	a1,0x200
    for(int i = 0; i < 512; i++){
    800007b2:	067e                	sll	a2,a2,0x1f
        vspt[5][i] = (addr >> 2) |
    800007b4:	0027d713          	srl	a4,a5,0x2
             PTE_V | PTE_AD | PTE_RWX;  
    800007b8:	0cf76713          	or	a4,a4,207
        vspt[5][i] = (addr >> 2) |
    800007bc:	e298                	sd	a4,0(a3)
        addr +=  SUPERPAGE_SIZE(1);
    800007be:	97ae                	add	a5,a5,a1
    for(int i = 0; i < 512; i++){
    800007c0:	06a1                	add	a3,a3,8
    800007c2:	fec799e3          	bne	a5,a2,800007b4 <vspt_init+0x100>
    }  

    uintptr_t satp = (((uintptr_t)vspt) >> 12) | (0x8ULL << 60);
    800007c6:	57fd                	li	a5,-1
    800007c8:	8031                	srl	s0,s0,0xc
    800007ca:	17fe                	sll	a5,a5,0x3f
    if(curr_priv == PRIV_VS){
    800007cc:	00025717          	auipc	a4,0x25
    800007d0:	8c872703          	lw	a4,-1848(a4) # 80025094 <curr_priv>
    800007d4:	4689                	li	a3,2
    uintptr_t satp = (((uintptr_t)vspt) >> 12) | (0x8ULL << 60);
    800007d6:	8c5d                	or	s0,s0,a5
    if(curr_priv == PRIV_VS){
    800007d8:	04d70163          	beq	a4,a3,8000081a <vspt_init+0x166>
        CSRW(satp, satp);
    } else if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    800007dc:	3775                	addw	a4,a4,-3
    800007de:	4785                	li	a5,1
    800007e0:	00e7e863          	bltu	a5,a4,800007f0 <vspt_init+0x13c>
        CSRW(CSR_VSATP, satp);
    800007e4:	28041073          	csrw	vsatp,s0
    } else {
        ERROR("");
    }
}
    800007e8:	60a2                	ld	ra,8(sp)
    800007ea:	6402                	ld	s0,0(sp)
    800007ec:	0141                	add	sp,sp,16
    800007ee:	8082                	ret
        ERROR("");
    800007f0:	0001c517          	auipc	a0,0x1c
    800007f4:	48850513          	add	a0,a0,1160 # 8001cc78 <__func__.1+0x480>
    800007f8:	76a1a0ef          	jal	8001af62 <printf>
    800007fc:	10600613          	li	a2,262
    80000800:	0001b597          	auipc	a1,0x1b
    80000804:	be058593          	add	a1,a1,-1056 # 8001b3e0 <__func__.1>
    80000808:	0001c517          	auipc	a0,0x1c
    8000080c:	46050513          	add	a0,a0,1120 # 8001cc68 <__func__.1+0x470>
    80000810:	7521a0ef          	jal	8001af62 <printf>
    80000814:	4501                	li	a0,0
    80000816:	3ea1a0ef          	jal	8001ac00 <exit>
        CSRW(satp, satp);
    8000081a:	18041073          	csrw	satp,s0
}
    8000081e:	60a2                	ld	ra,8(sp)
    80000820:	6402                	ld	s0,0(sp)
    80000822:	0141                	add	sp,sp,16
    80000824:	8082                	ret

0000000080000826 <hpt_init>:

pte_t hpt_root[PAGE_SIZE*4/sizeof(pte_t)] __attribute__((aligned(PAGE_SIZE*4)));
pte_t hpt[5][PAGE_SIZE/sizeof(pte_t)] __attribute__((aligned(PAGE_SIZE)));

void hpt_init(){
    80000826:	1101                	add	sp,sp,-32
    80000828:	e426                	sd	s1,8(sp)

    for(int i = 0; i < 2048; i++){
        hpt_root[i] = 0;
    8000082a:	0002f497          	auipc	s1,0x2f
    8000082e:	7d648493          	add	s1,s1,2006 # 80030000 <hpt_root>
    80000832:	6611                	lui	a2,0x4
    80000834:	4581                	li	a1,0
    80000836:	8526                	mv	a0,s1
void hpt_init(){
    80000838:	ec06                	sd	ra,24(sp)
    8000083a:	e822                	sd	s0,16(sp)
        hpt_root[i] = 0;
    8000083c:	07d1a0ef          	jal	8001b0b8 <memset>
    }

    uintptr_t addr = 0x0;
    for(int i = 0; i < 4; i++){
        hpt_root[i] = 
    80000840:	0df00713          	li	a4,223
    80000844:	e098                	sd	a4,0(s1)
    80000846:	10000737          	lui	a4,0x10000
            PTE_V | PTE_U | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(0);
    }

    hpt_root[MEM_BASE/SUPERPAGE_SIZE(0)] =
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    8000084a:	00027417          	auipc	s0,0x27
    8000084e:	7b640413          	add	s0,s0,1974 # 80028000 <hpt>
        hpt_root[i] = 
    80000852:	0df70713          	add	a4,a4,223 # 100000df <STACK_SIZE+0xff000df>
    80000856:	e498                	sd	a4,8(s1)
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    80000858:	00245793          	srl	a5,s0,0x2
        hpt_root[i] = 
    8000085c:	30000737          	lui	a4,0x30000
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    80000860:	0017e793          	or	a5,a5,1

    addr = MEM_BASE;
    for(int i = 0; i < 512; i++) hpt[0][i] = 0;
    80000864:	6605                	lui	a2,0x1
        hpt_root[i] = 
    80000866:	0df70713          	add	a4,a4,223 # 300000df <STACK_SIZE+0x2ff000df>
    for(int i = 0; i < 512; i++) hpt[0][i] = 0;
    8000086a:	4581                	li	a1,0
    8000086c:	8522                	mv	a0,s0
    hpt_root[MEM_BASE/SUPERPAGE_SIZE(0)] =
    8000086e:	e89c                	sd	a5,16(s1)
        hpt_root[i] = 
    80000870:	ec98                	sd	a4,24(s1)
    for(int i = 0; i < 512; i++) hpt[0][i] = 0;
    80000872:	0471a0ef          	jal	8001b0b8 <memset>
    addr = MEM_BASE;
    80000876:	4785                	li	a5,1
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    80000878:	46c5                	li	a3,17
    8000087a:	8522                	mv	a0,s0
    addr = MEM_BASE;
    8000087c:	07fe                	sll	a5,a5,0x1f
        hpt[0][i] = 
            PTE_V | PTE_U | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(1);
    8000087e:	00200637          	lui	a2,0x200
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    80000882:	06ee                	sll	a3,a3,0x1b
            PTE_V | PTE_U | PTE_AD | PTE_RWX | (addr >> 2);  
    80000884:	0027d713          	srl	a4,a5,0x2
    80000888:	0df76713          	or	a4,a4,223
        hpt[0][i] = 
    8000088c:	e118                	sd	a4,0(a0)
        addr +=  SUPERPAGE_SIZE(1);
    8000088e:	97b2                	add	a5,a5,a2
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    80000890:	0521                	add	a0,a0,8
    80000892:	fed799e3          	bne	a5,a3,80000884 <hpt_init+0x5e>
    }    

    hpt_root[4] =
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);
    80000896:	00028317          	auipc	t1,0x28
    8000089a:	76a30313          	add	t1,t1,1898 # 80029000 <hpt+0x1000>

    hpt_root[2047] =
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);

    hpt[1][0] = 
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);
    8000089e:	00029617          	auipc	a2,0x29
    800008a2:	76260613          	add	a2,a2,1890 # 8002a000 <hpt+0x2000>
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);
    800008a6:	00235693          	srl	a3,t1,0x2
    800008aa:	0016e693          	or	a3,a3,1
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);
    800008ae:	00265713          	srl	a4,a2,0x2
    800008b2:	00176713          	or	a4,a4,1
    hpt_root[2047] =
    800008b6:	00033597          	auipc	a1,0x33
    800008ba:	74d5b123          	sd	a3,1858(a1) # 80033ff8 <hpt_root+0x3ff8>

    hpt[1][511] = 
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);

    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800008be:	44100813          	li	a6,1089
    hpt_root[4] =
    800008c2:	f094                	sd	a3,32(s1)
    hpt[1][0] = 
    800008c4:	00e33023          	sd	a4,0(t1)
    hpt[1][511] = 
    800008c8:	fee63c23          	sd	a4,-8(a2)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800008cc:	00022597          	auipc	a1,0x22
    800008d0:	7cc58593          	add	a1,a1,1996 # 80023098 <test_page_perm_table+0x8>
    addr = TEST_PPAGE_BASE;
    800008d4:	86be                	mv	a3,a5
        hpt[2][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].h;  
        addr +=  PAGE_SIZE;
    800008d6:	6885                	lui	a7,0x1
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800008d8:	0856                	sll	a6,a6,0x15
        hpt[2][i] = (addr >> 2) | PTE_AD |
    800008da:	6188                	ld	a0,0(a1)
    800008dc:	0026d713          	srl	a4,a3,0x2
        addr +=  PAGE_SIZE;
    800008e0:	96c6                	add	a3,a3,a7
        hpt[2][i] = (addr >> 2) | PTE_AD |
    800008e2:	8f49                	or	a4,a4,a0
    800008e4:	0c076713          	or	a4,a4,192
    800008e8:	e218                	sd	a4,0(a2)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800008ea:	05c1                	add	a1,a1,16
    800008ec:	0621                	add	a2,a2,8
    800008ee:	ff0696e3          	bne	a3,a6,800008da <hpt_init+0xb4>
    }

    hpt[1][1] = 
        PTE_V | (((uintptr_t)&hpt[3][0]) >> 2);
    800008f2:	0002a617          	auipc	a2,0x2a
    800008f6:	70e60613          	add	a2,a2,1806 # 8002b000 <hpt+0x3000>
    800008fa:	00265713          	srl	a4,a2,0x2
    800008fe:	00176713          	or	a4,a4,1
    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < 512; i++){
    80000902:	44100593          	li	a1,1089
    hpt[1][1] = 
    80000906:	00e33423          	sd	a4,8(t1)
        hpt[3][i] = (addr >> 2) | 
            PTE_V | PTE_U | PTE_AD | PTE_RWX; 
        addr +=  PAGE_SIZE;
    8000090a:	6505                	lui	a0,0x1
    addr = TEST_PPAGE_BASE;
    8000090c:	873e                	mv	a4,a5
    for(int i = 0; i < 512; i++){
    8000090e:	05d6                	sll	a1,a1,0x15
        hpt[3][i] = (addr >> 2) | 
    80000910:	00275693          	srl	a3,a4,0x2
            PTE_V | PTE_U | PTE_AD | PTE_RWX; 
    80000914:	0df6e693          	or	a3,a3,223
        hpt[3][i] = (addr >> 2) | 
    80000918:	e214                	sd	a3,0(a2)
        addr +=  PAGE_SIZE;
    8000091a:	972a                	add	a4,a4,a0
    for(int i = 0; i < 512; i++){
    8000091c:	0621                	add	a2,a2,8
    8000091e:	feb719e3          	bne	a4,a1,80000910 <hpt_init+0xea>
    }  

    hpt_root[5] =
        PTE_V | (((uintptr_t)&hpt[4][0]) >> 2);
    80000922:	0002b697          	auipc	a3,0x2b
    80000926:	6de68693          	add	a3,a3,1758 # 8002c000 <hpt+0x4000>
    8000092a:	0026d713          	srl	a4,a3,0x2
    8000092e:	00176713          	or	a4,a4,1
    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < 512; i++){
    80000932:	4665                	li	a2,25
    hpt_root[5] =
    80000934:	f498                	sd	a4,40(s1)
        hpt[4][i] = (addr >> 2) |
             PTE_V | PTE_U | PTE_AD | PTE_RWX;  
        addr +=  SUPERPAGE_SIZE(1);
    80000936:	002005b7          	lui	a1,0x200
    for(int i = 0; i < 512; i++){
    8000093a:	066e                	sll	a2,a2,0x1b
        hpt[4][i] = (addr >> 2) |
    8000093c:	0027d713          	srl	a4,a5,0x2
             PTE_V | PTE_U | PTE_AD | PTE_RWX;  
    80000940:	0df76713          	or	a4,a4,223
        hpt[4][i] = (addr >> 2) |
    80000944:	e298                	sd	a4,0(a3)
        addr +=  SUPERPAGE_SIZE(1);
    80000946:	97ae                	add	a5,a5,a1
    for(int i = 0; i < 512; i++){
    80000948:	06a1                	add	a3,a3,8
    8000094a:	fec799e3          	bne	a5,a2,8000093c <hpt_init+0x116>
    }  

    if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    8000094e:	00024797          	auipc	a5,0x24
    80000952:	7467a783          	lw	a5,1862(a5) # 80025094 <curr_priv>
    80000956:	37f5                	addw	a5,a5,-3
    80000958:	4705                	li	a4,1
    8000095a:	00f76e63          	bltu	a4,a5,80000976 <hpt_init+0x150>
        uintptr_t hsatp = (((uintptr_t)hpt_root) >> 12) | (0x8ULL << 60);
    8000095e:	577d                	li	a4,-1
    80000960:	00c4d793          	srl	a5,s1,0xc
    80000964:	177e                	sll	a4,a4,0x3f
    80000966:	8fd9                	or	a5,a5,a4
        CSRW(CSR_HGATP, hsatp);
    80000968:	68079073          	csrw	hgatp,a5
    } else {
        ERROR("trying to set hs hgatp from lower privilege");
    }
}
    8000096c:	60e2                	ld	ra,24(sp)
    8000096e:	6442                	ld	s0,16(sp)
    80000970:	64a2                	ld	s1,8(sp)
    80000972:	6105                	add	sp,sp,32
    80000974:	8082                	ret
        ERROR("trying to set hs hgatp from lower privilege");
    80000976:	0001c517          	auipc	a0,0x1c
    8000097a:	31a50513          	add	a0,a0,794 # 8001cc90 <__func__.1+0x498>
    8000097e:	5e41a0ef          	jal	8001af62 <printf>
    80000982:	14e00613          	li	a2,334
    80000986:	0001b597          	auipc	a1,0x1b
    8000098a:	a6a58593          	add	a1,a1,-1430 # 8001b3f0 <__func__.0>
    8000098e:	0001c517          	auipc	a0,0x1c
    80000992:	2da50513          	add	a0,a0,730 # 8001cc68 <__func__.1+0x470>
    80000996:	5cc1a0ef          	jal	8001af62 <printf>
    8000099a:	4501                	li	a0,0
    8000099c:	2641a0ef          	jal	8001ac00 <exit>

00000000800009a0 <hspt_switch>:

void hspt_switch(){
    pte_t temp = hspt[2][SWITCH1];
    hspt[2][SWITCH1] = hspt[2][SWITCH2];
    800009a0:	0003b797          	auipc	a5,0x3b
    800009a4:	66078793          	add	a5,a5,1632 # 8003c000 <hspt+0x2000>
    800009a8:	3607b683          	ld	a3,864(a5)
    800009ac:	3687b703          	ld	a4,872(a5)
    800009b0:	36d7b423          	sd	a3,872(a5)
    800009b4:	36e7b023          	sd	a4,864(a5)
    hspt[2][SWITCH2] = temp;
}
    800009b8:	8082                	ret

00000000800009ba <vspt_switch>:

void vspt_switch(){
    pte_t temp = vspt[3][SWITCH1];
    vspt[3][SWITCH1] = vspt[3][SWITCH2];
    800009ba:	00036797          	auipc	a5,0x36
    800009be:	64678793          	add	a5,a5,1606 # 80037000 <vspt+0x3000>
    800009c2:	3607b683          	ld	a3,864(a5)
    800009c6:	3687b703          	ld	a4,872(a5)
    800009ca:	36d7b423          	sd	a3,872(a5)
    800009ce:	36e7b023          	sd	a4,864(a5)
    vspt[3][SWITCH2] = temp;
}
    800009d2:	8082                	ret

00000000800009d4 <hpt_switch>:

void hpt_switch(){
    pte_t temp = hpt[2][SWITCH1];
    hpt[2][SWITCH1] = hpt[2][SWITCH2];
    800009d4:	00029797          	auipc	a5,0x29
    800009d8:	62c78793          	add	a5,a5,1580 # 8002a000 <hpt+0x2000>
    800009dc:	3607b683          	ld	a3,864(a5)
    800009e0:	3687b703          	ld	a4,872(a5)
    800009e4:	36d7b423          	sd	a3,872(a5)
    800009e8:	36e7b023          	sd	a4,864(a5)
    hpt[2][SWITCH2] = temp;
}
    800009ec:	8082                	ret

00000000800009ee <ecall>:

uint64_t ecall_args[2];

uint64_t ecall(uint64_t a0, uint64_t a1)
{
    ecall_args[0] = a0;
    800009ee:	0003c797          	auipc	a5,0x3c
    800009f2:	61278793          	add	a5,a5,1554 # 8003d000 <ecall_args>
    800009f6:	e388                	sd	a0,0(a5)
    ecall_args[1] = a1;
    800009f8:	e78c                	sd	a1,8(a5)

    asm volatile("ecall" ::: "memory");
    800009fa:	00000073          	ecall
    return ecall_args[0];

}
    800009fe:	6388                	ld	a0,0(a5)
    80000a00:	8082                	ret

0000000080000a02 <set_prev_priv>:
    return priv == PRIV_VU || priv == PRIV_HU;
}

void set_prev_priv(int priv){

    switch(curr_priv){
    80000a02:	00024797          	auipc	a5,0x24
    80000a06:	6927a783          	lw	a5,1682(a5) # 80025094 <curr_priv>
    80000a0a:	470d                	li	a4,3
    80000a0c:	04e78463          	beq	a5,a4,80000a54 <set_prev_priv+0x52>
    80000a10:	4711                	li	a4,4
    80000a12:	06e78d63          	beq	a5,a4,80000a8c <set_prev_priv+0x8a>
    80000a16:	4709                	li	a4,2
    80000a18:	06e78363          	beq	a5,a4,80000a7e <set_prev_priv+0x7c>
void set_prev_priv(int priv){
    80000a1c:	1141                	add	sp,sp,-16
        case PRIV_VS: {
            uint64_t temp = CSRR(sstatus);
            CSRC(sstatus, 0x1ULL << 8);
        }
        break;
        default: ERROR("unknown current priv %d (%s)\n", priv, __func__);
    80000a1e:	85aa                	mv	a1,a0
    80000a20:	0001b617          	auipc	a2,0x1b
    80000a24:	9e060613          	add	a2,a2,-1568 # 8001b400 <__func__.6>
    80000a28:	0001c517          	auipc	a0,0x1c
    80000a2c:	2a850513          	add	a0,a0,680 # 8001ccd0 <__func__.1+0x4d8>
void set_prev_priv(int priv){
    80000a30:	e406                	sd	ra,8(sp)
        default: ERROR("unknown current priv %d (%s)\n", priv, __func__);
    80000a32:	5301a0ef          	jal	8001af62 <printf>
    80000a36:	03c00613          	li	a2,60
    80000a3a:	0001b597          	auipc	a1,0x1b
    80000a3e:	9c658593          	add	a1,a1,-1594 # 8001b400 <__func__.6>
    80000a42:	0001c517          	auipc	a0,0x1c
    80000a46:	22650513          	add	a0,a0,550 # 8001cc68 <__func__.1+0x470>
    80000a4a:	5181a0ef          	jal	8001af62 <printf>
    80000a4e:	4501                	li	a0,0
    80000a50:	1b01a0ef          	jal	8001ac00 <exit>
            uint64_t temp = CSRR(sstatus);
    80000a54:	100027f3          	csrr	a5,sstatus
            if(priv == PRIV_HS || priv == PRIV_VS) temp |= (0x1ULL << 8);   //spp
    80000a58:	4685                	li	a3,1
    80000a5a:	ffe5071b          	addw	a4,a0,-2
            temp &= ~(0x1ULL << 8);
    80000a5e:	eff7f793          	and	a5,a5,-257
            if(priv == PRIV_HS || priv == PRIV_VS) temp |= (0x1ULL << 8);   //spp
    80000a62:	06e6f063          	bgeu	a3,a4,80000ac2 <set_prev_priv+0xc0>
            CSRW(sstatus, temp);
    80000a66:	10079073          	csrw	sstatus,a5
            temp = CSRR(CSR_HSTATUS);   //p101
    80000a6a:	600027f3          	csrr	a5,hstatus
            temp &= ~(0x3ULL << 7);
    80000a6e:	e7f7f793          	and	a5,a5,-385
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (0x1ULL << 7);       //spv
    80000a72:	e119                	bnez	a0,80000a78 <set_prev_priv+0x76>
    80000a74:	0807e793          	or	a5,a5,128
            CSRW(CSR_HSTATUS, temp);
    80000a78:	60079073          	csrw	hstatus,a5
        break;
    80000a7c:	8082                	ret
            uint64_t temp = CSRR(sstatus);
    80000a7e:	100027f3          	csrr	a5,sstatus
            CSRC(sstatus, 0x1ULL << 8);
    80000a82:	10000793          	li	a5,256
    80000a86:	1007b073          	csrc	sstatus,a5
        break;
    80000a8a:	8082                	ret
            uint64_t temp = CSRR(mstatus);
    80000a8c:	300027f3          	csrr	a5,mstatus
            temp &= ~((3ULL << 11) | (1ULL << 39));
    80000a90:	00022617          	auipc	a2,0x22
    80000a94:	5b863603          	ld	a2,1464(a2) # 80023048 <__func__.1+0x6850>
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000a98:	ffe5071b          	addw	a4,a0,-2
    80000a9c:	4685                	li	a3,1
            temp &= ~((3ULL << 11) | (1ULL << 39));
    80000a9e:	8ff1                	and	a5,a5,a2
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000aa0:	00e6f963          	bgeu	a3,a4,80000ab2 <set_prev_priv+0xb0>
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000aa4:	e501                	bnez	a0,80000aac <set_prev_priv+0xaa>
    80000aa6:	4705                	li	a4,1
    80000aa8:	171e                	sll	a4,a4,0x27
    80000aaa:	8fd9                	or	a5,a5,a4
            CSRW(mstatus, temp);
    80000aac:	30079073          	csrw	mstatus,a5
        break;
    80000ab0:	8082                	ret
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000ab2:	6705                	lui	a4,0x1
    80000ab4:	80070713          	add	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000ab8:	4689                	li	a3,2
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000aba:	8fd9                	or	a5,a5,a4
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000abc:	fed518e3          	bne	a0,a3,80000aac <set_prev_priv+0xaa>
    80000ac0:	b7dd                	j	80000aa6 <set_prev_priv+0xa4>
            if(priv == PRIV_HS || priv == PRIV_VS) temp |= (0x1ULL << 8);   //spp
    80000ac2:	1007e793          	or	a5,a5,256
            CSRW(sstatus, temp);
    80000ac6:	10079073          	csrw	sstatus,a5
            temp = CSRR(CSR_HSTATUS);   //p101
    80000aca:	600027f3          	csrr	a5,hstatus
            if(priv == PRIV_VS) temp |= (1ULL << 8);        //spvp
    80000ace:	4709                	li	a4,2
            temp &= ~(0x3ULL << 7);
    80000ad0:	e7f7f793          	and	a5,a5,-385
            if(priv == PRIV_VS) temp |= (1ULL << 8);        //spvp
    80000ad4:	fae512e3          	bne	a0,a4,80000a78 <set_prev_priv+0x76>
    80000ad8:	1007e793          	or	a5,a5,256
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (0x1ULL << 7);       //spv
    80000adc:	bf61                	j	80000a74 <set_prev_priv+0x72>

0000000080000ade <goto_priv>:
    curr_priv = priv;

}


void goto_priv(int target_priv){
    80000ade:	7179                	add	sp,sp,-48
    80000ae0:	f022                	sd	s0,32(sp)
    80000ae2:	ec26                	sd	s1,24(sp)
    80000ae4:	f406                	sd	ra,40(sp)
    80000ae6:	e84a                	sd	s2,16(sp)
    80000ae8:	e44e                	sd	s3,8(sp)

    static bool on_going = false;

    DEBUG("goto_priv: real = %s, target = %s, curr = %s",  priv_strs[real_priv], priv_strs[target_priv], priv_strs[curr_priv]);

    if(is_user(target_priv) && is_user(curr_priv)) {
    80000aea:	4785                	li	a5,1
void goto_priv(int target_priv){
    80000aec:	842a                	mv	s0,a0
    return priv == PRIV_VU || priv == PRIV_HU;
    80000aee:	0005049b          	sext.w	s1,a0
    if(is_user(target_priv) && is_user(curr_priv)) {
    80000af2:	06a7fd63          	bgeu	a5,a0,80000b6c <goto_priv+0x8e>
        goto_priv(PRIV_M);
    }

    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    80000af6:	00024997          	auipc	s3,0x24
    80000afa:	59a98993          	add	s3,s3,1434 # 80025090 <real_priv>
    80000afe:	0009a783          	lw	a5,0(s3)
    80000b02:	00024917          	auipc	s2,0x24
    80000b06:	59290913          	add	s2,s2,1426 # 80025094 <curr_priv>
    80000b0a:	00978963          	beq	a5,s1,80000b1c <goto_priv+0x3e>
    80000b0e:	4791                	li	a5,4
    80000b10:	00024917          	auipc	s2,0x24
    80000b14:	58490913          	add	s2,s2,1412 # 80025094 <curr_priv>
    80000b18:	02a7d663          	bge	a5,a0,80000b44 <goto_priv+0x66>
    curr_priv = priv;
    80000b1c:	00992023          	sw	s1,0(s2)
        VERBOSE("...entered %s mode", priv_strs[target_priv]);
        on_going = false;
        lower_priv(target_priv);
    }

}
    80000b20:	70a2                	ld	ra,40(sp)
    80000b22:	7402                	ld	s0,32(sp)
    80000b24:	64e2                	ld	s1,24(sp)
    80000b26:	6942                	ld	s2,16(sp)
    80000b28:	69a2                	ld	s3,8(sp)
    80000b2a:	6145                	add	sp,sp,48
    80000b2c:	8082                	ret
        goto_priv(PRIV_M);
    80000b2e:	4511                	li	a0,4
    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    80000b30:	00024997          	auipc	s3,0x24
    80000b34:	56098993          	add	s3,s3,1376 # 80025090 <real_priv>
        goto_priv(PRIV_M);
    80000b38:	fa7ff0ef          	jal	80000ade <goto_priv>
    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    80000b3c:	0009a783          	lw	a5,0(s3)
    80000b40:	fc978ee3          	beq	a5,s1,80000b1c <goto_priv+0x3e>
    if(target_priv > curr_priv){
    80000b44:	00092703          	lw	a4,0(s2)
    80000b48:	0a977d63          	bgeu	a4,s1,80000c02 <goto_priv+0x124>
    ecall_args[0] = a0;
    80000b4c:	0003c797          	auipc	a5,0x3c
    80000b50:	4b478793          	add	a5,a5,1204 # 8003d000 <ecall_args>
    80000b54:	4705                	li	a4,1
    80000b56:	e398                	sd	a4,0(a5)
        ecall(ECALL_GOTO_PRIV, target_priv);
    80000b58:	e780                	sd	s0,8(a5)
    asm volatile("ecall" ::: "memory");
    80000b5a:	00000073          	ecall
}
    80000b5e:	70a2                	ld	ra,40(sp)
    80000b60:	7402                	ld	s0,32(sp)
    80000b62:	64e2                	ld	s1,24(sp)
    80000b64:	6942                	ld	s2,16(sp)
    80000b66:	69a2                	ld	s3,8(sp)
    80000b68:	6145                	add	sp,sp,48
    80000b6a:	8082                	ret
    if(is_user(target_priv) && is_user(curr_priv)) {
    80000b6c:	00024917          	auipc	s2,0x24
    80000b70:	52890913          	add	s2,s2,1320 # 80025094 <curr_priv>
    80000b74:	00092703          	lw	a4,0(s2)
    80000b78:	fae7fbe3          	bgeu	a5,a4,80000b2e <goto_priv+0x50>
    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    80000b7c:	00024997          	auipc	s3,0x24
    80000b80:	51498993          	add	s3,s3,1300 # 80025090 <real_priv>
    80000b84:	0009a783          	lw	a5,0(s3)
    80000b88:	f8978ae3          	beq	a5,s1,80000b1c <goto_priv+0x3e>
    if(curr_priv == PRIV_VS && priv == PRIV_HU){
    80000b8c:	4789                	li	a5,2
    80000b8e:	02f71a63          	bne	a4,a5,80000bc2 <goto_priv+0xe4>
    80000b92:	4785                	li	a5,1
    80000b94:	02f49763          	bne	s1,a5,80000bc2 <goto_priv+0xe4>
        ERROR("trying to go from vs to hu");
    80000b98:	0001c517          	auipc	a0,0x1c
    80000b9c:	16850513          	add	a0,a0,360 # 8001cd00 <__func__.1+0x508>
    80000ba0:	3c21a0ef          	jal	8001af62 <printf>
    80000ba4:	04b00613          	li	a2,75
        ERROR("cant lower priv from u");
    80000ba8:	0001b597          	auipc	a1,0x1b
    80000bac:	86858593          	add	a1,a1,-1944 # 8001b410 <__func__.4>
    80000bb0:	0001c517          	auipc	a0,0x1c
    80000bb4:	0b850513          	add	a0,a0,184 # 8001cc68 <__func__.1+0x470>
    80000bb8:	3aa1a0ef          	jal	8001af62 <printf>
    80000bbc:	4501                	li	a0,0
    80000bbe:	0421a0ef          	jal	8001ac00 <exit>
    set_prev_priv(priv);
    80000bc2:	8522                	mv	a0,s0
    80000bc4:	e3fff0ef          	jal	80000a02 <set_prev_priv>
    if(curr_priv == PRIV_M) {
    80000bc8:	00092783          	lw	a5,0(s2)
    real_priv = priv;
    80000bcc:	0099a023          	sw	s1,0(s3)
    if(curr_priv == PRIV_M) {
    80000bd0:	4711                	li	a4,4
    80000bd2:	02e78b63          	beq	a5,a4,80000c08 <goto_priv+0x12a>
    } else if(curr_priv == PRIV_VS || curr_priv == PRIV_HS){
    80000bd6:	37f9                	addw	a5,a5,-2
    80000bd8:	4705                	li	a4,1
    80000bda:	00f76b63          	bltu	a4,a5,80000bf0 <goto_priv+0x112>
        asm volatile(
    80000bde:	00000297          	auipc	t0,0x0
    80000be2:	01028293          	add	t0,t0,16 # 80000bee <goto_priv+0x110>
    80000be6:	14129073          	csrw	sepc,t0
    80000bea:	10200073          	sret
    80000bee:	b73d                	j	80000b1c <goto_priv+0x3e>
        ERROR("cant lower priv from u");
    80000bf0:	0001c517          	auipc	a0,0x1c
    80000bf4:	14050513          	add	a0,a0,320 # 8001cd30 <__func__.1+0x538>
    80000bf8:	36a1a0ef          	jal	8001af62 <printf>
    80000bfc:	06300613          	li	a2,99
    80000c00:	b765                	j	80000ba8 <goto_priv+0xca>
    if(priv == curr_priv) 
    80000c02:	f0970fe3          	beq	a4,s1,80000b20 <goto_priv+0x42>
    80000c06:	b759                	j	80000b8c <goto_priv+0xae>
        asm volatile(
    80000c08:	00000297          	auipc	t0,0x0
    80000c0c:	01028293          	add	t0,t0,16 # 80000c18 <goto_priv+0x13a>
    80000c10:	34129073          	csrw	mepc,t0
    80000c14:	30200073          	mret
    80000c18:	b711                	j	80000b1c <goto_priv+0x3e>

0000000080000c1a <mhandler>:
        break;\
    }\
    return from_priv;\
}

uint64_t mhandler(){
    80000c1a:	715d                	add	sp,sp,-80
    80000c1c:	f84a                	sd	s2,48(sp)
    80000c1e:	e486                	sd	ra,72(sp)
    80000c20:	e0a2                	sd	s0,64(sp)
    80000c22:	fc26                	sd	s1,56(sp)
    80000c24:	f44e                	sd	s3,40(sp)
    80000c26:	f052                	sd	s4,32(sp)
    80000c28:	ec56                	sd	s5,24(sp)
    80000c2a:	e85a                	sd	s6,16(sp)
    80000c2c:	e45e                	sd	s7,8(sp)

    real_priv = PRIV_M;
    80000c2e:	00024917          	auipc	s2,0x24
    80000c32:	46290913          	add	s2,s2,1122 # 80025090 <real_priv>
    80000c36:	4791                	li	a5,4
    80000c38:	00f92023          	sw	a5,0(s2)

    uint64_t cause = CSRR(mcause);
    80000c3c:	342024f3          	csrr	s1,mcause
    uint64_t epc = CSRR(mepc);
    80000c40:	341029f3          	csrr	s3,mepc
    80000c44:	8a4e                	mv	s4,s3
    uint64_t tval = CSRR(mtval);
    80000c46:	34302bf3          	csrr	s7,mtval
    uint64_t tval2 = CSRR(CSR_MTVAL2);
    80000c4a:	34b02af3          	csrr	s5,0x34b
    uint64_t tinst= CSRR(CSR_MTINST);
    80000c4e:	34a02b73          	csrr	s6,0x34a
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    80000c52:	478d                	li	a5,3
    80000c54:	ff848713          	add	a4,s1,-8
    DEBUG("mpv = 0x%lx", (CSRR(mstatus) >> 39) & 0x1);
    DEBUG("gva = 0x%lx", (CSRR(mstatus) >> MSTATUS_GVA_OFF) & 0x1);
    
    if(is_ecall(cause) && ecall_args[0] == ECALL_GOTO_PRIV){
        goto_priv(ecall_args[1]); 
    } else if(!excpt.testing){
    80000c58:	0003c417          	auipc	s0,0x3c
    80000c5c:	3a840413          	add	s0,s0,936 # 8003d000 <ecall_args>
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    80000c60:	12e7ec63          	bltu	a5,a4,80000d98 <mhandler+0x17e>
    if(is_ecall(cause) && ecall_args[0] == ECALL_GOTO_PRIV){
    80000c64:	6018                	ld	a4,0(s0)
    80000c66:	4785                	li	a5,1
    80000c68:	1af70463          	beq	a4,a5,80000e10 <mhandler+0x1f6>
    } else if(!excpt.testing){
    80000c6c:	01044783          	lbu	a5,16(s0)
    80000c70:	c3f5                	beqz	a5,80000d54 <mhandler+0x13a>

    if(cause & (1ULL << 63)){
        CSRC(mip, 1ULL << (cause &  ~(1ULL << 63)));
    }

    excpt.triggered = true;
    80000c72:	4785                	li	a5,1
    80000c74:	00f408a3          	sb	a5,17(s0)
    excpt.priv = PRIV_M;
    80000c78:	4791                	li	a5,4
    80000c7a:	c85c                	sw	a5,20(s0)
    excpt.cause = cause;
    80000c7c:	ec04                	sd	s1,24(s0)
    excpt.epc = epc;
    80000c7e:	03343023          	sd	s3,32(s0)
    excpt.tval = tval;
    80000c82:	03743423          	sd	s7,40(s0)
    excpt.tinst = tinst;
    80000c86:	03643823          	sd	s6,48(s0)
    excpt.tval2 = tval2;
    80000c8a:	03543c23          	sd	s5,56(s0)
    excpt.gva = !!((CSRR(mstatus) >> MSTATUS_GVA_OFF) & 0x1);
    80000c8e:	300027f3          	csrr	a5,mstatus
    80000c92:	9399                	srl	a5,a5,0x26
    80000c94:	8b85                	and	a5,a5,1
    80000c96:	04f40023          	sb	a5,64(s0)
    excpt.xpv = !!((CSRR(mstatus) >> 39) & 0x1);
    80000c9a:	300027f3          	csrr	a5,mstatus
    80000c9e:	939d                	srl	a5,a5,0x27
    80000ca0:	8b85                	and	a5,a5,1
    80000ca2:	04f400a3          	sb	a5,65(s0)
    excpt.testing = false;
    80000ca6:	0003c797          	auipc	a5,0x3c
    80000caa:	36078523          	sb	zero,874(a5) # 8003d010 <excpt>
    if(is_inst_fault(cause)){
    80000cae:	47d1                	li	a5,20
    80000cb0:	0097e963          	bltu	a5,s1,80000cc2 <mhandler+0xa8>
    80000cb4:	001017b7          	lui	a5,0x101
    80000cb8:	078d                	add	a5,a5,3 # 101003 <STACK_SIZE+0x1003>
    80000cba:	0097d7b3          	srl	a5,a5,s1
    80000cbe:	8b85                	and	a5,a5,1
    80000cc0:	efdd                	bnez	a5,80000d7e <mhandler+0x164>
            ERROR("instruction fault without return address");
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    real_priv = curr_priv;
    80000cc2:	00024797          	auipc	a5,0x24
    80000cc6:	3d278793          	add	a5,a5,978 # 80025094 <curr_priv>
    80000cca:	4398                	lw	a4,0(a5)
    unsigned temp_priv = real_priv;
    80000ccc:	00092503          	lw	a0,0(s2)
    excpt.fault_inst = 0;
    80000cd0:	0003c697          	auipc	a3,0x3c
    80000cd4:	3606bc23          	sd	zero,888(a3) # 8003d048 <excpt+0x38>
    real_priv = curr_priv;
    80000cd8:	00e92023          	sw	a4,0(s2)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000cdc:	470d                	li	a4,3
    80000cde:	02e50563          	beq	a0,a4,80000d08 <mhandler+0xee>
    80000ce2:	4711                	li	a4,4
    80000ce4:	0ce50563          	beq	a0,a4,80000dae <mhandler+0x194>
    80000ce8:	4709                	li	a4,2
    80000cea:	02e50a63          	beq	a0,a4,80000d1e <mhandler+0x104>
}
    80000cee:	60a6                	ld	ra,72(sp)
    80000cf0:	6406                	ld	s0,64(sp)
    80000cf2:	1502                	sll	a0,a0,0x20
    80000cf4:	74e2                	ld	s1,56(sp)
    80000cf6:	7942                	ld	s2,48(sp)
    80000cf8:	79a2                	ld	s3,40(sp)
    80000cfa:	7a02                	ld	s4,32(sp)
    80000cfc:	6ae2                	ld	s5,24(sp)
    80000cfe:	6b42                	ld	s6,16(sp)
    80000d00:	6ba2                	ld	s7,8(sp)
    80000d02:	9101                	srl	a0,a0,0x20
    80000d04:	6161                	add	sp,sp,80
    80000d06:	8082                	ret
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000d08:	60002773          	csrr	a4,hstatus
    80000d0c:	4394                	lw	a3,0(a5)
    80000d0e:	f7f77713          	and	a4,a4,-129
    80000d12:	9af5                	and	a3,a3,-3
    80000d14:	e299                	bnez	a3,80000d1a <mhandler+0x100>
    80000d16:	08076713          	or	a4,a4,128
    80000d1a:	60071073          	csrw	hstatus,a4
    80000d1e:	10002773          	csrr	a4,sstatus
    80000d22:	4394                	lw	a3,0(a5)
    80000d24:	4605                	li	a2,1
    80000d26:	edf77793          	and	a5,a4,-289
    80000d2a:	ffe6871b          	addw	a4,a3,-2
    80000d2e:	0ce67a63          	bgeu	a2,a4,80000e02 <mhandler+0x1e8>
    80000d32:	10079073          	csrw	sstatus,a5
    80000d36:	fa04cce3          	bltz	s1,80000cee <mhandler+0xd4>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80000d3a:	000a5783          	lhu	a5,0(s4)
    80000d3e:	468d                	li	a3,3
    else return epc + 2;
    80000d40:	002a0713          	add	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80000d44:	8b8d                	and	a5,a5,3
    80000d46:	00d79463          	bne	a5,a3,80000d4e <mhandler+0x134>
    80000d4a:	004a0713          	add	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000d4e:	14171073          	csrw	sepc,a4
    80000d52:	bf71                	j	80000cee <mhandler+0xd4>
        ERROR("untested exception!");
    80000d54:	0001c517          	auipc	a0,0x1c
    80000d58:	00450513          	add	a0,a0,4 # 8001cd58 <__func__.1+0x560>
    80000d5c:	2061a0ef          	jal	8001af62 <printf>
    80000d60:	0d700613          	li	a2,215
            ERROR("instruction fault without return address");
    80000d64:	0001a597          	auipc	a1,0x1a
    80000d68:	6bc58593          	add	a1,a1,1724 # 8001b420 <__func__.3>
    80000d6c:	0001c517          	auipc	a0,0x1c
    80000d70:	efc50513          	add	a0,a0,-260 # 8001cc68 <__func__.1+0x470>
    80000d74:	1ee1a0ef          	jal	8001af62 <printf>
    80000d78:	4501                	li	a0,0
    80000d7a:	687190ef          	jal	8001ac00 <exit>
        if(excpt.fault_inst != 0){ 
    80000d7e:	04843a03          	ld	s4,72(s0)
    80000d82:	f40a10e3          	bnez	s4,80000cc2 <mhandler+0xa8>
            ERROR("instruction fault without return address");
    80000d86:	0001c517          	auipc	a0,0x1c
    80000d8a:	ffa50513          	add	a0,a0,-6 # 8001cd80 <__func__.1+0x588>
    80000d8e:	1d41a0ef          	jal	8001af62 <printf>
    80000d92:	0ed00613          	li	a2,237
    80000d96:	b7f9                	j	80000d64 <mhandler+0x14a>
    } else if(!excpt.testing){
    80000d98:	01044783          	lbu	a5,16(s0)
    80000d9c:	dfc5                	beqz	a5,80000d54 <mhandler+0x13a>
    if(cause & (1ULL << 63)){
    80000d9e:	ec04dae3          	bgez	s1,80000c72 <mhandler+0x58>
        CSRC(mip, 1ULL << (cause &  ~(1ULL << 63)));
    80000da2:	4785                	li	a5,1
    80000da4:	009797b3          	sll	a5,a5,s1
    80000da8:	3447b073          	csrc	mip,a5
    80000dac:	b5d9                	j	80000c72 <mhandler+0x58>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000dae:	30002773          	csrr	a4,mstatus
    80000db2:	4394                	lw	a3,0(a5)
    80000db4:	00022797          	auipc	a5,0x22
    80000db8:	29c7b783          	ld	a5,668(a5) # 80023050 <__func__.1+0x6858>
    80000dbc:	8ff9                	and	a5,a5,a4
    80000dbe:	04a68d63          	beq	a3,a0,80000e18 <mhandler+0x1fe>
    80000dc2:	ffe6871b          	addw	a4,a3,-2
    80000dc6:	4605                	li	a2,1
    80000dc8:	04e66d63          	bltu	a2,a4,80000e22 <mhandler+0x208>
    80000dcc:	6705                	lui	a4,0x1
    80000dce:	80070713          	add	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
    80000dd2:	4609                	li	a2,2
    80000dd4:	8fd9                	or	a5,a5,a4
    80000dd6:	00c69563          	bne	a3,a2,80000de0 <mhandler+0x1c6>
    80000dda:	4705                	li	a4,1
    80000ddc:	171e                	sll	a4,a4,0x27
    80000dde:	8fd9                	or	a5,a5,a4
    80000de0:	30079073          	csrw	mstatus,a5
    80000de4:	f004c5e3          	bltz	s1,80000cee <mhandler+0xd4>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80000de8:	000a5783          	lhu	a5,0(s4)
    80000dec:	468d                	li	a3,3
    else return epc + 2;
    80000dee:	002a0713          	add	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80000df2:	8b8d                	and	a5,a5,3
    80000df4:	00d79463          	bne	a5,a3,80000dfc <mhandler+0x1e2>
    80000df8:	004a0713          	add	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000dfc:	34171073          	csrw	mepc,a4
    80000e00:	b5fd                	j	80000cee <mhandler+0xd4>
    80000e02:	1007e793          	or	a5,a5,256
    80000e06:	10079073          	csrw	sstatus,a5
    80000e0a:	f204d8e3          	bgez	s1,80000d3a <mhandler+0x120>
    80000e0e:	b5c5                	j	80000cee <mhandler+0xd4>
        goto_priv(ecall_args[1]); 
    80000e10:	4408                	lw	a0,8(s0)
    80000e12:	ccdff0ef          	jal	80000ade <goto_priv>
    if(cause & (1ULL << 63)){
    80000e16:	bdb1                	j	80000c72 <mhandler+0x58>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000e18:	6709                	lui	a4,0x2
    80000e1a:	80070713          	add	a4,a4,-2048 # 1800 <_test_table_size+0x17ff>
    80000e1e:	8fd9                	or	a5,a5,a4
    80000e20:	b7c1                	j	80000de0 <mhandler+0x1c6>
    80000e22:	dec5                	beqz	a3,80000dda <mhandler+0x1c0>
    80000e24:	bf75                	j	80000de0 <mhandler+0x1c6>

0000000080000e26 <hshandler>:

uint64_t hshandler(){
    80000e26:	715d                	add	sp,sp,-80
    80000e28:	f84a                	sd	s2,48(sp)
    80000e2a:	e486                	sd	ra,72(sp)
    80000e2c:	e0a2                	sd	s0,64(sp)
    80000e2e:	fc26                	sd	s1,56(sp)
    80000e30:	f44e                	sd	s3,40(sp)
    80000e32:	f052                	sd	s4,32(sp)
    80000e34:	ec56                	sd	s5,24(sp)
    80000e36:	e85a                	sd	s6,16(sp)
    80000e38:	e45e                	sd	s7,8(sp)

    real_priv = PRIV_HS;
    80000e3a:	00024917          	auipc	s2,0x24
    80000e3e:	25690913          	add	s2,s2,598 # 80025090 <real_priv>
    80000e42:	478d                	li	a5,3
    80000e44:	00f92023          	sw	a5,0(s2)

    uint64_t cause = CSRR(scause);
    80000e48:	142024f3          	csrr	s1,scause
    uint64_t epc = CSRR(sepc);
    80000e4c:	141029f3          	csrr	s3,sepc
    80000e50:	8a4e                	mv	s4,s3
    uint64_t tval = CSRR(stval);
    80000e52:	14302bf3          	csrr	s7,stval
    uint64_t htval = CSRR(CSR_HTVAL);
    80000e56:	64302af3          	csrr	s5,htval
    uint64_t htinst = CSRR(CSR_HTINST);
    80000e5a:	64a02b73          	csrr	s6,htinst
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    80000e5e:	ff848713          	add	a4,s1,-8
    if(is_ecall(cause) && ecall_args[0] == ECALL_GOTO_PRIV){
        goto_priv(ecall_args[1]); 
    } else if(is_ecall(cause)) {
        printf("\n270\n%d\n\n",ecall_args[0]);
        ERROR("unknown ecall"); 
    } else if(!excpt.testing){
    80000e62:	0003c417          	auipc	s0,0x3c
    80000e66:	19e40413          	add	s0,s0,414 # 8003d000 <ecall_args>
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    80000e6a:	04e7e163          	bltu	a5,a4,80000eac <hshandler+0x86>
    if(is_ecall(cause) && ecall_args[0] == ECALL_GOTO_PRIV){
    80000e6e:	600c                	ld	a1,0(s0)
    80000e70:	4785                	li	a5,1
    80000e72:	10f58a63          	beq	a1,a5,80000f86 <hshandler+0x160>
        printf("\n270\n%d\n\n",ecall_args[0]);
    80000e76:	0001c517          	auipc	a0,0x1c
    80000e7a:	f4a50513          	add	a0,a0,-182 # 8001cdc0 <__func__.1+0x5c8>
    80000e7e:	0e41a0ef          	jal	8001af62 <printf>
        ERROR("unknown ecall"); 
    80000e82:	0001c517          	auipc	a0,0x1c
    80000e86:	f4e50513          	add	a0,a0,-178 # 8001cdd0 <__func__.1+0x5d8>
    80000e8a:	0d81a0ef          	jal	8001af62 <printf>
    80000e8e:	10f00613          	li	a2,271
        ERROR("untested exception!");
    80000e92:	0001a597          	auipc	a1,0x1a
    80000e96:	59e58593          	add	a1,a1,1438 # 8001b430 <__func__.2>
    80000e9a:	0001c517          	auipc	a0,0x1c
    80000e9e:	dce50513          	add	a0,a0,-562 # 8001cc68 <__func__.1+0x470>
    80000ea2:	0c01a0ef          	jal	8001af62 <printf>
    80000ea6:	4501                	li	a0,0
    80000ea8:	559190ef          	jal	8001ac00 <exit>
    } else if(!excpt.testing){
    80000eac:	01044783          	lbu	a5,16(s0)
    80000eb0:	c7cd                	beqz	a5,80000f5a <hshandler+0x134>
    }
    
    if(cause & (1ULL << 63)){
    80000eb2:	0004d963          	bgez	s1,80000ec4 <hshandler+0x9e>
        CSRC(sip, 1ULL << (cause &  ~(1ULL << 63)));
    80000eb6:	4785                	li	a5,1
    80000eb8:	009797b3          	sll	a5,a5,s1
    80000ebc:	1447b073          	csrc	sip,a5
        //CSRC(CSR_HVIP, 1ULL << (cause &  ~(1ULL << 63)));
        CSRC(CSR_HIP, 1ULL << (cause &  ~(1ULL << 63)));
    80000ec0:	6447b073          	csrc	hip,a5
    }

    excpt.triggered = true;
    80000ec4:	4785                	li	a5,1
    80000ec6:	00f408a3          	sb	a5,17(s0)
    excpt.priv = PRIV_HS;
    80000eca:	478d                	li	a5,3
    80000ecc:	c85c                	sw	a5,20(s0)
    excpt.cause = cause;
    80000ece:	ec04                	sd	s1,24(s0)
    excpt.epc = epc;
    80000ed0:	03343023          	sd	s3,32(s0)
    excpt.tval = tval;
    80000ed4:	03743423          	sd	s7,40(s0)
    excpt.tinst = htinst;
    80000ed8:	03643823          	sd	s6,48(s0)
    excpt.tval2 = htval;
    80000edc:	03543c23          	sd	s5,56(s0)
    excpt.gva = !!((CSRR(CSR_HSTATUS) >> HSTATUS_GVA_OFF) & 0x1);
    80000ee0:	600027f3          	csrr	a5,hstatus
    80000ee4:	8399                	srl	a5,a5,0x6
    80000ee6:	8b85                	and	a5,a5,1
    80000ee8:	04f40023          	sb	a5,64(s0)
    excpt.xpv = !!((CSRR(CSR_HSTATUS) >> 7) & 0x1);
    80000eec:	600027f3          	csrr	a5,hstatus
    80000ef0:	839d                	srl	a5,a5,0x7
    80000ef2:	8b85                	and	a5,a5,1
    80000ef4:	04f400a3          	sb	a5,65(s0)
    excpt.testing = false;
    80000ef8:	0003c797          	auipc	a5,0x3c
    80000efc:	10078c23          	sb	zero,280(a5) # 8003d010 <excpt>
    if(is_inst_fault(cause)){
    80000f00:	47d1                	li	a5,20
    80000f02:	0097e963          	bltu	a5,s1,80000f14 <hshandler+0xee>
    80000f06:	001017b7          	lui	a5,0x101
    80000f0a:	078d                	add	a5,a5,3 # 101003 <STACK_SIZE+0x1003>
    80000f0c:	0097d7b3          	srl	a5,a5,s1
    80000f10:	8b85                	and	a5,a5,1
    80000f12:	efa9                	bnez	a5,80000f6c <hshandler+0x146>
            ERROR("instruction fault without return address");
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    real_priv = curr_priv;
    80000f14:	00024797          	auipc	a5,0x24
    80000f18:	18078793          	add	a5,a5,384 # 80025094 <curr_priv>
    80000f1c:	4398                	lw	a4,0(a5)
    unsigned temp_priv = real_priv;
    80000f1e:	00092503          	lw	a0,0(s2)
    excpt.fault_inst = 0;
    80000f22:	0003c697          	auipc	a3,0x3c
    80000f26:	1206b323          	sd	zero,294(a3) # 8003d048 <excpt+0x38>
    real_priv = curr_priv;
    80000f2a:	00e92023          	sw	a4,0(s2)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000f2e:	470d                	li	a4,3
    80000f30:	04e50f63          	beq	a0,a4,80000f8e <hshandler+0x168>
    80000f34:	4711                	li	a4,4
    80000f36:	0ae50463          	beq	a0,a4,80000fde <hshandler+0x1b8>
    80000f3a:	4709                	li	a4,2
    80000f3c:	06e50463          	beq	a0,a4,80000fa4 <hshandler+0x17e>
}
    80000f40:	60a6                	ld	ra,72(sp)
    80000f42:	6406                	ld	s0,64(sp)
    80000f44:	1502                	sll	a0,a0,0x20
    80000f46:	74e2                	ld	s1,56(sp)
    80000f48:	7942                	ld	s2,48(sp)
    80000f4a:	79a2                	ld	s3,40(sp)
    80000f4c:	7a02                	ld	s4,32(sp)
    80000f4e:	6ae2                	ld	s5,24(sp)
    80000f50:	6b42                	ld	s6,16(sp)
    80000f52:	6ba2                	ld	s7,8(sp)
    80000f54:	9101                	srl	a0,a0,0x20
    80000f56:	6161                	add	sp,sp,80
    80000f58:	8082                	ret
        ERROR("untested exception!");
    80000f5a:	0001c517          	auipc	a0,0x1c
    80000f5e:	dfe50513          	add	a0,a0,-514 # 8001cd58 <__func__.1+0x560>
    80000f62:	0001a0ef          	jal	8001af62 <printf>
    80000f66:	11100613          	li	a2,273
    80000f6a:	b725                	j	80000e92 <hshandler+0x6c>
        if(excpt.fault_inst != 0){ 
    80000f6c:	04843a03          	ld	s4,72(s0)
    80000f70:	fa0a12e3          	bnez	s4,80000f14 <hshandler+0xee>
            ERROR("instruction fault without return address");
    80000f74:	0001c517          	auipc	a0,0x1c
    80000f78:	e0c50513          	add	a0,a0,-500 # 8001cd80 <__func__.1+0x588>
    80000f7c:	7e7190ef          	jal	8001af62 <printf>
    80000f80:	12900613          	li	a2,297
    80000f84:	b739                	j	80000e92 <hshandler+0x6c>
        goto_priv(ecall_args[1]); 
    80000f86:	4408                	lw	a0,8(s0)
    80000f88:	b57ff0ef          	jal	80000ade <goto_priv>
    if(cause & (1ULL << 63)){
    80000f8c:	bf25                	j	80000ec4 <hshandler+0x9e>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000f8e:	60002773          	csrr	a4,hstatus
    80000f92:	4394                	lw	a3,0(a5)
    80000f94:	f7f77713          	and	a4,a4,-129
    80000f98:	9af5                	and	a3,a3,-3
    80000f9a:	e299                	bnez	a3,80000fa0 <hshandler+0x17a>
    80000f9c:	08076713          	or	a4,a4,128
    80000fa0:	60071073          	csrw	hstatus,a4
    80000fa4:	10002773          	csrr	a4,sstatus
    80000fa8:	4394                	lw	a3,0(a5)
    80000faa:	4605                	li	a2,1
    80000fac:	edf77793          	and	a5,a4,-289
    80000fb0:	ffe6871b          	addw	a4,a3,-2
    80000fb4:	00e66463          	bltu	a2,a4,80000fbc <hshandler+0x196>
    80000fb8:	1007e793          	or	a5,a5,256
    80000fbc:	10079073          	csrw	sstatus,a5
    80000fc0:	f804c0e3          	bltz	s1,80000f40 <hshandler+0x11a>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80000fc4:	000a5783          	lhu	a5,0(s4)
    80000fc8:	468d                	li	a3,3
    else return epc + 2;
    80000fca:	002a0713          	add	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80000fce:	8b8d                	and	a5,a5,3
    80000fd0:	00d79463          	bne	a5,a3,80000fd8 <hshandler+0x1b2>
    80000fd4:	004a0713          	add	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000fd8:	14171073          	csrw	sepc,a4
    80000fdc:	b795                	j	80000f40 <hshandler+0x11a>
    80000fde:	30002773          	csrr	a4,mstatus
    80000fe2:	4394                	lw	a3,0(a5)
    80000fe4:	00022797          	auipc	a5,0x22
    80000fe8:	06c7b783          	ld	a5,108(a5) # 80023050 <__func__.1+0x6858>
    80000fec:	8ff9                	and	a5,a5,a4
    80000fee:	04a68263          	beq	a3,a0,80001032 <hshandler+0x20c>
    80000ff2:	ffe6871b          	addw	a4,a3,-2
    80000ff6:	4605                	li	a2,1
    80000ff8:	04e66263          	bltu	a2,a4,8000103c <hshandler+0x216>
    80000ffc:	6705                	lui	a4,0x1
    80000ffe:	80070713          	add	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
    80001002:	4609                	li	a2,2
    80001004:	8fd9                	or	a5,a5,a4
    80001006:	00c69563          	bne	a3,a2,80001010 <hshandler+0x1ea>
    8000100a:	4705                	li	a4,1
    8000100c:	171e                	sll	a4,a4,0x27
    8000100e:	8fd9                	or	a5,a5,a4
    80001010:	30079073          	csrw	mstatus,a5
    80001014:	f204c6e3          	bltz	s1,80000f40 <hshandler+0x11a>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001018:	000a5783          	lhu	a5,0(s4)
    8000101c:	468d                	li	a3,3
    else return epc + 2;
    8000101e:	002a0713          	add	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001022:	8b8d                	and	a5,a5,3
    80001024:	00d79463          	bne	a5,a3,8000102c <hshandler+0x206>
    80001028:	004a0713          	add	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    8000102c:	34171073          	csrw	mepc,a4
    80001030:	bf01                	j	80000f40 <hshandler+0x11a>
    80001032:	6709                	lui	a4,0x2
    80001034:	80070713          	add	a4,a4,-2048 # 1800 <_test_table_size+0x17ff>
    80001038:	8fd9                	or	a5,a5,a4
    8000103a:	bfd9                	j	80001010 <hshandler+0x1ea>
    8000103c:	d6f9                	beqz	a3,8000100a <hshandler+0x1e4>
    8000103e:	bfc9                	j	80001010 <hshandler+0x1ea>

0000000080001040 <vshandler>:

uint64_t vshandler(){
    80001040:	7139                	add	sp,sp,-64
    80001042:	f426                	sd	s1,40(sp)
    80001044:	fc06                	sd	ra,56(sp)
    80001046:	f822                	sd	s0,48(sp)
    80001048:	f04a                	sd	s2,32(sp)
    8000104a:	ec4e                	sd	s3,24(sp)
    8000104c:	e852                	sd	s4,16(sp)
    8000104e:	e456                	sd	s5,8(sp)

    real_priv = PRIV_VS;
    80001050:	00024497          	auipc	s1,0x24
    80001054:	04048493          	add	s1,s1,64 # 80025090 <real_priv>
    80001058:	4709                	li	a4,2
    8000105a:	c098                	sw	a4,0(s1)

    uint64_t cause = CSRR(scause);
    8000105c:	14202473          	csrr	s0,scause
    uint64_t epc = CSRR(sepc);
    80001060:	141029f3          	csrr	s3,sepc
    80001064:	894e                	mv	s2,s3
    uint64_t tval = CSRR(stval);
    80001066:	14302af3          	csrr	s5,stval
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    8000106a:	478d                	li	a5,3
    8000106c:	ff840693          	add	a3,s0,-8
    80001070:	04d7e463          	bltu	a5,a3,800010b8 <vshandler+0x78>
    VERBOSE("virtual supervisor handler (scause = 0x%llx)", cause);
    DEBUG("scause = 0x%llx", cause);
    DEBUG("sepc = 0x%lx", epc);
    DEBUG("stval = 0x%lx", tval);
    
    if(is_ecall(cause) && ecall_args[0] ==ECALL_GOTO_PRIV ){
    80001074:	0003ca17          	auipc	s4,0x3c
    80001078:	f8ca0a13          	add	s4,s4,-116 # 8003d000 <ecall_args>
    8000107c:	000a3703          	ld	a4,0(s4)
    80001080:	4785                	li	a5,1
    80001082:	18f70a63          	beq	a4,a5,80001216 <vshandler+0x1d6>
        goto_priv(ecall_args[1]); 
    } else if(!excpt.testing){
    80001086:	010a4783          	lbu	a5,16(s4)
    8000108a:	18079a63          	bnez	a5,8000121e <vshandler+0x1de>
        ERROR("untested exception!");
    8000108e:	0001c517          	auipc	a0,0x1c
    80001092:	cca50513          	add	a0,a0,-822 # 8001cd58 <__func__.1+0x560>
    80001096:	6cd190ef          	jal	8001af62 <printf>
    8000109a:	14200613          	li	a2,322
    excpt.epc = epc;
    excpt.tval = tval;
    excpt.testing = false;
    if(is_inst_fault(cause)){
        if(excpt.fault_inst != 0) epc = excpt.fault_inst;
        else ERROR("instruction fault without return address");
    8000109e:	0001a597          	auipc	a1,0x1a
    800010a2:	3a258593          	add	a1,a1,930 # 8001b440 <__func__.1>
    800010a6:	0001c517          	auipc	a0,0x1c
    800010aa:	bc250513          	add	a0,a0,-1086 # 8001cc68 <__func__.1+0x470>
    800010ae:	6b5190ef          	jal	8001af62 <printf>
    800010b2:	4501                	li	a0,0
    800010b4:	34d190ef          	jal	8001ac00 <exit>
    } else if(!excpt.testing){
    800010b8:	0003c797          	auipc	a5,0x3c
    800010bc:	f4878793          	add	a5,a5,-184 # 8003d000 <ecall_args>
    800010c0:	0107c683          	lbu	a3,16(a5)
    800010c4:	d6e9                	beqz	a3,8000108e <vshandler+0x4e>
    if(cause & (1ULL << 63)){
    800010c6:	06045063          	bgez	s0,80001126 <vshandler+0xe6>
        CSRC(sip, 1ULL << (cause &  ~(1ULL << 63)));
    800010ca:	4685                	li	a3,1
    800010cc:	008696b3          	sll	a3,a3,s0
    800010d0:	1446b073          	csrc	sip,a3
    excpt.priv = PRIV_VS;
    800010d4:	cbd8                	sw	a4,20(a5)
    excpt.testing = false;
    800010d6:	10000713          	li	a4,256
    excpt.cause = cause;
    800010da:	ef80                	sd	s0,24(a5)
    excpt.epc = epc;
    800010dc:	0337b023          	sd	s3,32(a5)
    excpt.tval = tval;
    800010e0:	0357b423          	sd	s5,40(a5)
    excpt.testing = false;
    800010e4:	00e79823          	sh	a4,16(a5)
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    real_priv = curr_priv;
    800010e8:	00024797          	auipc	a5,0x24
    800010ec:	fac78793          	add	a5,a5,-84 # 80025094 <curr_priv>
    800010f0:	4398                	lw	a4,0(a5)
    unsigned temp_priv = real_priv;
    800010f2:	4088                	lw	a0,0(s1)
    excpt.fault_inst = 0;
    800010f4:	0003c697          	auipc	a3,0x3c
    800010f8:	f406ba23          	sd	zero,-172(a3) # 8003d048 <excpt+0x38>
    real_priv = curr_priv;
    800010fc:	c098                	sw	a4,0(s1)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800010fe:	470d                	li	a4,3
    80001100:	06e50463          	beq	a0,a4,80001168 <vshandler+0x128>
    80001104:	4711                	li	a4,4
    80001106:	0ae50e63          	beq	a0,a4,800011c2 <vshandler+0x182>
    8000110a:	4709                	li	a4,2
    8000110c:	06e50963          	beq	a0,a4,8000117e <vshandler+0x13e>
}
    80001110:	70e2                	ld	ra,56(sp)
    80001112:	7442                	ld	s0,48(sp)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001114:	1502                	sll	a0,a0,0x20
}
    80001116:	74a2                	ld	s1,40(sp)
    80001118:	7902                	ld	s2,32(sp)
    8000111a:	69e2                	ld	s3,24(sp)
    8000111c:	6a42                	ld	s4,16(sp)
    8000111e:	6aa2                	ld	s5,8(sp)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001120:	9101                	srl	a0,a0,0x20
}
    80001122:	6121                	add	sp,sp,64
    80001124:	8082                	ret
    excpt.priv = PRIV_VS;
    80001126:	cbd8                	sw	a4,20(a5)
    excpt.testing = false;
    80001128:	10000713          	li	a4,256
    8000112c:	00e79823          	sh	a4,16(a5)
    excpt.cause = cause;
    80001130:	ef80                	sd	s0,24(a5)
    excpt.epc = epc;
    80001132:	0337b023          	sd	s3,32(a5)
    excpt.tval = tval;
    80001136:	0357b423          	sd	s5,40(a5)
    if(is_inst_fault(cause)){
    8000113a:	4751                	li	a4,20
    8000113c:	fa8766e3          	bltu	a4,s0,800010e8 <vshandler+0xa8>
    80001140:	00101737          	lui	a4,0x101
    80001144:	070d                	add	a4,a4,3 # 101003 <STACK_SIZE+0x1003>
    80001146:	00875733          	srl	a4,a4,s0
    8000114a:	8b05                	and	a4,a4,1
    8000114c:	df51                	beqz	a4,800010e8 <vshandler+0xa8>
        if(excpt.fault_inst != 0) epc = excpt.fault_inst;
    8000114e:	0487b903          	ld	s2,72(a5)
    80001152:	f8091be3          	bnez	s2,800010e8 <vshandler+0xa8>
        else ERROR("instruction fault without return address");
    80001156:	0001c517          	auipc	a0,0x1c
    8000115a:	c2a50513          	add	a0,a0,-982 # 8001cd80 <__func__.1+0x588>
    8000115e:	605190ef          	jal	8001af62 <printf>
    80001162:	15100613          	li	a2,337
    80001166:	bf25                	j	8000109e <vshandler+0x5e>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001168:	60002773          	csrr	a4,hstatus
    8000116c:	4394                	lw	a3,0(a5)
    8000116e:	f7f77713          	and	a4,a4,-129
    80001172:	9af5                	and	a3,a3,-3
    80001174:	e299                	bnez	a3,8000117a <vshandler+0x13a>
    80001176:	08076713          	or	a4,a4,128
    8000117a:	60071073          	csrw	hstatus,a4
    8000117e:	10002773          	csrr	a4,sstatus
    80001182:	4394                	lw	a3,0(a5)
    80001184:	4605                	li	a2,1
    80001186:	edf77793          	and	a5,a4,-289
    8000118a:	ffe6871b          	addw	a4,a3,-2
    8000118e:	02e67363          	bgeu	a2,a4,800011b4 <vshandler+0x174>
    80001192:	10079073          	csrw	sstatus,a5
    80001196:	f6044de3          	bltz	s0,80001110 <vshandler+0xd0>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    8000119a:	00095783          	lhu	a5,0(s2)
    8000119e:	468d                	li	a3,3
    else return epc + 2;
    800011a0:	00290713          	add	a4,s2,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800011a4:	8b8d                	and	a5,a5,3
    800011a6:	00d79463          	bne	a5,a3,800011ae <vshandler+0x16e>
    800011aa:	00490713          	add	a4,s2,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800011ae:	14171073          	csrw	sepc,a4
    800011b2:	bfb9                	j	80001110 <vshandler+0xd0>
    800011b4:	1007e793          	or	a5,a5,256
    800011b8:	10079073          	csrw	sstatus,a5
    800011bc:	fc045fe3          	bgez	s0,8000119a <vshandler+0x15a>
    800011c0:	bf81                	j	80001110 <vshandler+0xd0>
    800011c2:	30002773          	csrr	a4,mstatus
    800011c6:	4394                	lw	a3,0(a5)
    800011c8:	00022797          	auipc	a5,0x22
    800011cc:	e887b783          	ld	a5,-376(a5) # 80023050 <__func__.1+0x6858>
    800011d0:	8ff9                	and	a5,a5,a4
    800011d2:	06a68463          	beq	a3,a0,8000123a <vshandler+0x1fa>
    800011d6:	ffe6871b          	addw	a4,a3,-2
    800011da:	4605                	li	a2,1
    800011dc:	06e66463          	bltu	a2,a4,80001244 <vshandler+0x204>
    800011e0:	6705                	lui	a4,0x1
    800011e2:	80070713          	add	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
    800011e6:	4609                	li	a2,2
    800011e8:	8fd9                	or	a5,a5,a4
    800011ea:	00c69563          	bne	a3,a2,800011f4 <vshandler+0x1b4>
    800011ee:	4705                	li	a4,1
    800011f0:	171e                	sll	a4,a4,0x27
    800011f2:	8fd9                	or	a5,a5,a4
    800011f4:	30079073          	csrw	mstatus,a5
    800011f8:	f0044ce3          	bltz	s0,80001110 <vshandler+0xd0>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800011fc:	00095783          	lhu	a5,0(s2)
    80001200:	468d                	li	a3,3
    else return epc + 2;
    80001202:	00290713          	add	a4,s2,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001206:	8b8d                	and	a5,a5,3
    80001208:	00d79463          	bne	a5,a3,80001210 <vshandler+0x1d0>
    8000120c:	00490713          	add	a4,s2,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001210:	34171073          	csrw	mepc,a4
    80001214:	bdf5                	j	80001110 <vshandler+0xd0>
        goto_priv(ecall_args[1]); 
    80001216:	008a2503          	lw	a0,8(s4)
    8000121a:	8c5ff0ef          	jal	80000ade <goto_priv>
    excpt.priv = PRIV_VS;
    8000121e:	4789                	li	a5,2
    80001220:	00fa2a23          	sw	a5,20(s4)
    excpt.testing = false;
    80001224:	10000793          	li	a5,256
    excpt.cause = cause;
    80001228:	008a3c23          	sd	s0,24(s4)
    excpt.epc = epc;
    8000122c:	033a3023          	sd	s3,32(s4)
    excpt.tval = tval;
    80001230:	035a3423          	sd	s5,40(s4)
    excpt.testing = false;
    80001234:	00fa1823          	sh	a5,16(s4)
    if(is_inst_fault(cause)){
    80001238:	bd45                	j	800010e8 <vshandler+0xa8>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    8000123a:	6709                	lui	a4,0x2
    8000123c:	80070713          	add	a4,a4,-2048 # 1800 <_test_table_size+0x17ff>
    80001240:	8fd9                	or	a5,a5,a4
    80001242:	bf4d                	j	800011f4 <vshandler+0x1b4>
    80001244:	d6cd                	beqz	a3,800011ee <vshandler+0x1ae>
    80001246:	b77d                	j	800011f4 <vshandler+0x1b4>

0000000080001248 <expand_compressed_instruction>:

uint32_t expand_compressed_instruction(uint16_t ins) {
    80001248:	1141                	add	sp,sp,-16
    8000124a:	e406                	sd	ra,8(sp)

    if(!INS_COMPRESSED(ins)) {
    8000124c:	00357713          	and	a4,a0,3
    80001250:	478d                	li	a5,3
    80001252:	04f70763          	beq	a4,a5,800012a0 <expand_compressed_instruction+0x58>
        ERROR("trying to expand non-compressed instruction");
    }

    if(INS_MATCH_C_LW(ins) || INS_MATCH_C_LD(ins) || INS_MATCH_C_SW(ins) || INS_MATCH_C_SD(ins)){
    80001256:	77f9                	lui	a5,0xffffe
    80001258:	078d                	add	a5,a5,3 # ffffffffffffe003 <__stack_top+0xffffffff7fcff003>
    8000125a:	8fe9                	and	a5,a5,a0
    8000125c:	6711                	lui	a4,0x4
    8000125e:	85aa                	mv	a1,a0
    80001260:	08e78863          	beq	a5,a4,800012f0 <expand_compressed_instruction+0xa8>
    80001264:	6719                	lui	a4,0x6
    80001266:	04e78663          	beq	a5,a4,800012b2 <expand_compressed_instruction+0x6a>
    8000126a:	6731                	lui	a4,0xc
    8000126c:	0ae78863          	beq	a5,a4,8000131c <expand_compressed_instruction+0xd4>
    80001270:	6739                	lui	a4,0xe
    80001272:	0ae78063          	beq	a5,a4,80001312 <expand_compressed_instruction+0xca>
            ((ins & INS_C_IMM0_MASK)  >> INS_C_IMM0_OFF) & 0x1 << 6 |
            ((ins & INS_C_IMM0_MASK)  >> INS_C_IMM0_OFF) >> 1 & 0x1 << 2;
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    } else {
        ERROR("expansion not implemented for target compressed instruction: 0x%x", ins);
    80001276:	0001c517          	auipc	a0,0x1c
    8000127a:	bba50513          	add	a0,a0,-1094 # 8001ce30 <__func__.1+0x638>
    8000127e:	4e5190ef          	jal	8001af62 <printf>
    80001282:	17000613          	li	a2,368
    80001286:	0001a597          	auipc	a1,0x1a
    8000128a:	1ca58593          	add	a1,a1,458 # 8001b450 <__func__.0>
    8000128e:	0001c517          	auipc	a0,0x1c
    80001292:	9da50513          	add	a0,a0,-1574 # 8001cc68 <__func__.1+0x470>
    80001296:	4cd190ef          	jal	8001af62 <printf>
    8000129a:	4501                	li	a0,0
    8000129c:	165190ef          	jal	8001ac00 <exit>
        ERROR("trying to expand non-compressed instruction");
    800012a0:	0001c517          	auipc	a0,0x1c
    800012a4:	b5050513          	add	a0,a0,-1200 # 8001cdf0 <__func__.1+0x5f8>
    800012a8:	4bb190ef          	jal	8001af62 <printf>
    800012ac:	15d00613          	li	a2,349
    800012b0:	bfd9                	j	80001286 <expand_compressed_instruction+0x3e>
            (is_load ? MATCH_LD : MATCH_SD):
    800012b2:	650d                	lui	a0,0x3
        bool is_load = INS_MATCH_C_LW(ins) || INS_MATCH_C_LD(ins); 
    800012b4:	4805                	li	a6,1
            (is_load ? MATCH_LD : MATCH_SD):
    800012b6:	050d                	add	a0,a0,3 # 3003 <_test_table_size+0x3002>
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    800012b8:	0025d713          	srl	a4,a1,0x2
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    800012bc:	0075d793          	srl	a5,a1,0x7
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    800012c0:	8b1d                	and	a4,a4,7
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    800012c2:	8b9d                	and	a5,a5,7
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    800012c4:	0721                	add	a4,a4,8 # e008 <_test_table_size+0xe007>
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    800012c6:	07a1                	add	a5,a5,8
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    800012c8:	01559613          	sll	a2,a1,0x15
    800012cc:	0c0006b7          	lui	a3,0xc000
    800012d0:	8e75                	and	a2,a2,a3
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
    800012d2:	46d1                	li	a3,20
    800012d4:	00080363          	beqz	a6,800012da <expand_compressed_instruction+0x92>
    800012d8:	469d                	li	a3,7
    }

}
    800012da:	60a2                	ld	ra,8(sp)
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    800012dc:	00f7979b          	sllw	a5,a5,0xf
    800012e0:	8d51                	or	a0,a0,a2
    800012e2:	8d5d                	or	a0,a0,a5
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
    800012e4:	00d7173b          	sllw	a4,a4,a3
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    800012e8:	8d59                	or	a0,a0,a4
    800012ea:	2501                	sext.w	a0,a0
}
    800012ec:	0141                	add	sp,sp,16
    800012ee:	8082                	ret
            (is_load ? MATCH_LD : MATCH_SD):
    800012f0:	6509                	lui	a0,0x2
        bool is_load = INS_MATCH_C_LW(ins) || INS_MATCH_C_LD(ins); 
    800012f2:	4805                	li	a6,1
            (is_load ? MATCH_LD : MATCH_SD):
    800012f4:	050d                	add	a0,a0,3 # 2003 <_test_table_size+0x2002>
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    800012f6:	0075d793          	srl	a5,a1,0x7
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    800012fa:	86be                	mv	a3,a5
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    800012fc:	0025d713          	srl	a4,a1,0x2
    80001300:	8b1d                	and	a4,a4,7
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    80001302:	8b9d                	and	a5,a5,7
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    80001304:	0386f693          	and	a3,a3,56
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    80001308:	0721                	add	a4,a4,8
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    8000130a:	07a1                	add	a5,a5,8
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    8000130c:	4601                	li	a2,0
    8000130e:	d2f1                	beqz	a3,800012d2 <expand_compressed_instruction+0x8a>
    80001310:	bf65                	j	800012c8 <expand_compressed_instruction+0x80>
            (is_load ? MATCH_LD : MATCH_SD):
    80001312:	650d                	lui	a0,0x3
    80001314:	4801                	li	a6,0
    80001316:	02350513          	add	a0,a0,35 # 3023 <_test_table_size+0x3022>
    8000131a:	bf79                	j	800012b8 <expand_compressed_instruction+0x70>
    8000131c:	6509                	lui	a0,0x2
    8000131e:	4801                	li	a6,0
    80001320:	02350513          	add	a0,a0,35 # 2023 <_test_table_size+0x2022>
    80001324:	bfc9                	j	800012f6 <expand_compressed_instruction+0xae>

0000000080001326 <reset_state>:

extern void hshandler_entry();
extern void mhandler_entry();
extern void vshandler_entry();
    
void reset_state(){
    80001326:	1141                	add	sp,sp,-16

    goto_priv(PRIV_M);
    80001328:	4511                	li	a0,4
void reset_state(){
    8000132a:	e406                	sd	ra,8(sp)
    goto_priv(PRIV_M);
    8000132c:	fb2ff0ef          	jal	80000ade <goto_priv>
    CSRW(mstatus, 0ULL);
    80001330:	30005073          	csrw	mstatus,0
    //CSRW(mtvec, 0ULL);
    CSRW(medeleg, 0ULL);
    80001334:	30205073          	csrw	medeleg,0
    CSRW(mideleg, 0ULL);
    80001338:	30305073          	csrw	mideleg,0
    CSRW(mip, 0ULL);
    8000133c:	34405073          	csrw	mip,0
    CSRW(mie, 0ULL);
    80001340:	30405073          	csrw	mie,0
    //CSRW(mtime, 0ULL); 
    //CSRW(mtimecmp, 0ULL); 
    CSRW(mscratch, 0ULL);
    80001344:	34005073          	csrw	mscratch,0
    CSRW(mepc, 0ULL);
    80001348:	34105073          	csrw	mepc,0
    CSRW(mtval, 0ULL);
    8000134c:	34305073          	csrw	mtval,0
    CSRW(CSR_MTINST, 0ULL);
    80001350:	34a05073          	csrw	0x34a,0
    CSRW(CSR_MTVAL2, 0ULL);
    80001354:	34b05073          	csrw	0x34b,0
    //what about pmp register?
    CSRW(sstatus, 0ULL);
    80001358:	10005073          	csrw	sstatus,0
    //CSRW(stvec, 0ULL);
    CSRW(sip, 0ULL);
    8000135c:	14405073          	csrw	sip,0
    CSRW(sie, 0ULL);
    80001360:	10405073          	csrw	sie,0
    CSRW(sscratch, 0ULL);
    80001364:	14005073          	csrw	sscratch,0
    CSRW(sepc, 0ULL);
    80001368:	14105073          	csrw	sepc,0
    CSRW(scause, 0ULL);
    8000136c:	14205073          	csrw	scause,0
    CSRW(stval, 0ULL);
    80001370:	14305073          	csrw	stval,0
    CSRW(satp, 0ULL);
    80001374:	18005073          	csrw	satp,0
    CSRW(CSR_HSTATUS, 0ULL);
    80001378:	60005073          	csrw	hstatus,0
    CSRW(CSR_HIDELEG, 0ULL);
    8000137c:	60305073          	csrw	hideleg,0
    CSRW(CSR_HEDELEG, 0ULL);
    80001380:	60205073          	csrw	hedeleg,0
    CSRW(CSR_HVIP, 0ULL);
    80001384:	64505073          	csrw	hvip,0
    CSRW(CSR_HIP, 0ULL);
    80001388:	64405073          	csrw	hip,0
    CSRW(CSR_HIE, 0ULL);  
    8000138c:	60405073          	csrw	hie,0
    CSRW(CSR_HTVAL, 0ULL);
    80001390:	64305073          	csrw	htval,0
    CSRW(CSR_HTINST, 0ULL);
    80001394:	64a05073          	csrw	htinst,0
    CSRW(CSR_HGATP, 0ULL);
    80001398:	68005073          	csrw	hgatp,0
    CSRW(CSR_VSSTATUS, 0ULL);
    8000139c:	20005073          	csrw	vsstatus,0
    CSRW(CSR_VSIP, 0ULL);
    800013a0:	24405073          	csrw	vsip,0
    CSRW(CSR_VSIE, 0ULL);
    800013a4:	20405073          	csrw	vsie,0
    //CSRW(CSR_VSTVEC, 0ULL);
    CSRW(CSR_VSSCRATCH, 0ULL);
    800013a8:	24005073          	csrw	vsscratch,0
    CSRW(CSR_VSEPC, 0ULL);
    800013ac:	24105073          	csrw	vsepc,0
    CSRW(CSR_VSCAUSE, 0ULL);
    800013b0:	24205073          	csrw	vscause,0
    CSRW(CSR_VSTVAL, 0ULL);
    800013b4:	24305073          	csrw	vstval,0
    CSRW(CSR_VSATP, 0ULL);  
    800013b8:	28005073          	csrw	vsatp,0

    CSRW(mtvec, mhandler_entry);
    800013bc:	0001a797          	auipc	a5,0x1a
    800013c0:	dec78793          	add	a5,a5,-532 # 8001b1a8 <mhandler_entry>
    800013c4:	30579073          	csrw	mtvec,a5
    CSRS(medeleg, (1ULL << 8) | (1ULL << 10));
    800013c8:	50000793          	li	a5,1280
    800013cc:	3027a073          	csrs	medeleg,a5
    // full access to physical memory to other modes
    CSRW(pmpcfg0, 0xf);
    800013d0:	3a07d073          	csrw	pmpcfg0,15
    CSRW(pmpaddr0, (uint64_t) -1);
    800013d4:	57fd                	li	a5,-1
    800013d6:	3b079073          	csrw	pmpaddr0,a5

    CSRW(stvec, hshandler_entry);
    800013da:	0001a797          	auipc	a5,0x1a
    800013de:	e1678793          	add	a5,a5,-490 # 8001b1f0 <hshandler_entry>
    800013e2:	10579073          	csrw	stvec,a5
    CSRS(CSR_HEDELEG, (1ULL << 8));
    800013e6:	10000793          	li	a5,256
    800013ea:	6027a073          	csrs	hedeleg,a5

    CSRW(CSR_VSTVEC, vshandler_entry);
    800013ee:	0001a797          	auipc	a5,0x1a
    800013f2:	e4a78793          	add	a5,a5,-438 # 8001b238 <vshandler_entry>
    800013f6:	20579073          	csrw	vstvec,a5
// }



static inline void sfence(){
    asm volatile ("sfence.vma \n\t");
    800013fa:	12000073          	sfence.vma
        ".insn r 0x73, 0x0, 0x31, x0, x0, x0\n\t"
        ::: "memory");
}

static inline void hfence_vvma() {
    asm volatile(
    800013fe:	22000073          	.4byte	0x22000073
    asm volatile(
    80001402:	62000073          	.4byte	0x62000073

    sfence();
    hfence();
}
    80001406:	60a2                	ld	ra,8(sp)
    80001408:	0141                	add	sp,sp,16
    8000140a:	8082                	ret

000000008000140c <check_xip_regs_1>:
#include <rvh_test.h>

bool check_xip_regs_1(){
    8000140c:	1101                	add	sp,sp,-32

    TEST_START();
    8000140e:	0001a597          	auipc	a1,0x1a
    80001412:	06258593          	add	a1,a1,98 # 8001b470 <__func__.3>
    80001416:	0001b517          	auipc	a0,0x1b
    8000141a:	6ca50513          	add	a0,a0,1738 # 8001cae0 <__func__.1+0x2e8>
bool check_xip_regs_1(){
    8000141e:	ec06                	sd	ra,24(sp)
    80001420:	e822                	sd	s0,16(sp)
    80001422:	e426                	sd	s1,8(sp)
    80001424:	e04a                	sd	s2,0(sp)
    TEST_START();
    80001426:	33d190ef          	jal	8001af62 <printf>
    8000142a:	4529                	li	a0,10
    8000142c:	209180ef          	jal	80019e34 <putchar>

    CSRW(mideleg, 0);
    80001430:	30305073          	csrw	mideleg,0

    int64_t mtime_mask = ~((int64_t)0x80);

    CSRW(mideleg, (uint64_t)-1);
    80001434:	57fd                	li	a5,-1
    80001436:	30379073          	csrw	mideleg,a5
    VERBOSE("setting mideleg and hideleg\n");
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    8000143a:	60379073          	csrw	hideleg,a5
    check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x2);
    8000143e:	244024f3          	csrr	s1,vsip
    80001442:	24479073          	csrw	vsip,a5
    80001446:	24402473          	csrr	s0,vsip
    8000144a:	0001c617          	auipc	a2,0x1c
    8000144e:	a3e60613          	add	a2,a2,-1474 # 8001ce88 <__func__.1+0x690>
    80001452:	08200593          	li	a1,130
    80001456:	0001b517          	auipc	a0,0x1b
    8000145a:	6a250513          	add	a0,a0,1698 # 8001caf8 <__func__.1+0x300>
    8000145e:	305190ef          	jal	8001af62 <printf>
    80001462:	4789                	li	a5,2
    80001464:	10f40d63          	beq	s0,a5,8000157e <check_xip_regs_1+0x172>
    80001468:	0001b597          	auipc	a1,0x1b
    8000146c:	66858593          	add	a1,a1,1640 # 8001cad0 <__func__.1+0x2d8>
    80001470:	0001b517          	auipc	a0,0x1b
    80001474:	6a050513          	add	a0,a0,1696 # 8001cb10 <__func__.1+0x318>
    80001478:	2eb190ef          	jal	8001af62 <printf>
    8000147c:	0001b517          	auipc	a0,0x1b
    80001480:	69c50513          	add	a0,a0,1692 # 8001cb18 <__func__.1+0x320>
    80001484:	2df190ef          	jal	8001af62 <printf>
    80001488:	4689                	li	a3,2
    8000148a:	8622                	mv	a2,s0
    8000148c:	55fd                	li	a1,-1
    8000148e:	0001b517          	auipc	a0,0x1b
    80001492:	69250513          	add	a0,a0,1682 # 8001cb20 <__func__.1+0x328>
    80001496:	2cd190ef          	jal	8001af62 <printf>
    8000149a:	02900513          	li	a0,41
    8000149e:	197180ef          	jal	80019e34 <putchar>
    800014a2:	4529                	li	a0,10
    800014a4:	191180ef          	jal	80019e34 <putchar>
    800014a8:	4901                	li	s2,0
    800014aa:	24449073          	csrw	vsip,s1
    check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x222);
    800014ae:	204024f3          	csrr	s1,vsie
    800014b2:	57fd                	li	a5,-1
    800014b4:	20479073          	csrw	vsie,a5
    800014b8:	20402473          	csrr	s0,vsie
    800014bc:	0001c617          	auipc	a2,0x1c
    800014c0:	9d460613          	add	a2,a2,-1580 # 8001ce90 <__func__.1+0x698>
    800014c4:	08200593          	li	a1,130
    800014c8:	0001b517          	auipc	a0,0x1b
    800014cc:	63050513          	add	a0,a0,1584 # 8001caf8 <__func__.1+0x300>
    800014d0:	293190ef          	jal	8001af62 <printf>
    800014d4:	22200793          	li	a5,546
    800014d8:	06f40c63          	beq	s0,a5,80001550 <check_xip_regs_1+0x144>
    800014dc:	0001b597          	auipc	a1,0x1b
    800014e0:	5f458593          	add	a1,a1,1524 # 8001cad0 <__func__.1+0x2d8>
    800014e4:	0001b517          	auipc	a0,0x1b
    800014e8:	62c50513          	add	a0,a0,1580 # 8001cb10 <__func__.1+0x318>
    800014ec:	277190ef          	jal	8001af62 <printf>
    800014f0:	0001b517          	auipc	a0,0x1b
    800014f4:	62850513          	add	a0,a0,1576 # 8001cb18 <__func__.1+0x320>
    800014f8:	26b190ef          	jal	8001af62 <printf>
    800014fc:	22200693          	li	a3,546
    80001500:	8622                	mv	a2,s0
    80001502:	55fd                	li	a1,-1
    80001504:	0001b517          	auipc	a0,0x1b
    80001508:	61c50513          	add	a0,a0,1564 # 8001cb20 <__func__.1+0x328>
    8000150c:	257190ef          	jal	8001af62 <printf>
    80001510:	02900513          	li	a0,41
    80001514:	121180ef          	jal	80019e34 <putchar>
    80001518:	4529                	li	a0,10
    8000151a:	11b180ef          	jal	80019e34 <putchar>
    8000151e:	20449073          	csrw	vsie,s1
    80001522:	4401                	li	s0,0
    
    TEST_END();
    80001524:	0001b597          	auipc	a1,0x1b
    80001528:	5ac58593          	add	a1,a1,1452 # 8001cad0 <__func__.1+0x2d8>
    8000152c:	0001b517          	auipc	a0,0x1b
    80001530:	64c50513          	add	a0,a0,1612 # 8001cb78 <__func__.1+0x380>
    80001534:	22f190ef          	jal	8001af62 <printf>
    80001538:	4511                	li	a0,4
    8000153a:	da4ff0ef          	jal	80000ade <goto_priv>
    8000153e:	de9ff0ef          	jal	80001326 <reset_state>
}
    80001542:	60e2                	ld	ra,24(sp)
    80001544:	8522                	mv	a0,s0
    80001546:	6442                	ld	s0,16(sp)
    80001548:	64a2                	ld	s1,8(sp)
    8000154a:	6902                	ld	s2,0(sp)
    8000154c:	6105                	add	sp,sp,32
    8000154e:	8082                	ret
    check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x222);
    80001550:	0001b597          	auipc	a1,0x1b
    80001554:	57058593          	add	a1,a1,1392 # 8001cac0 <__func__.1+0x2c8>
    80001558:	0001b517          	auipc	a0,0x1b
    8000155c:	5b850513          	add	a0,a0,1464 # 8001cb10 <__func__.1+0x318>
    80001560:	203190ef          	jal	8001af62 <printf>
    80001564:	4529                	li	a0,10
    80001566:	0cf180ef          	jal	80019e34 <putchar>
    8000156a:	fa090ae3          	beqz	s2,8000151e <check_xip_regs_1+0x112>
    8000156e:	20449073          	csrw	vsie,s1
    80001572:	4405                	li	s0,1
    TEST_END();
    80001574:	0001b597          	auipc	a1,0x1b
    80001578:	54c58593          	add	a1,a1,1356 # 8001cac0 <__func__.1+0x2c8>
    8000157c:	bf45                	j	8000152c <check_xip_regs_1+0x120>
    check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x2);
    8000157e:	0001b597          	auipc	a1,0x1b
    80001582:	54258593          	add	a1,a1,1346 # 8001cac0 <__func__.1+0x2c8>
    80001586:	0001b517          	auipc	a0,0x1b
    8000158a:	58a50513          	add	a0,a0,1418 # 8001cb10 <__func__.1+0x318>
    8000158e:	1d5190ef          	jal	8001af62 <printf>
    80001592:	4529                	li	a0,10
    80001594:	0a1180ef          	jal	80019e34 <putchar>
    80001598:	4905                	li	s2,1
    8000159a:	bf01                	j	800014aa <check_xip_regs_1+0x9e>

000000008000159c <check_xip_regs_2>:

bool check_xip_regs_2(){
    8000159c:	1101                	add	sp,sp,-32

    TEST_START();
    8000159e:	0001a597          	auipc	a1,0x1a
    800015a2:	eea58593          	add	a1,a1,-278 # 8001b488 <__func__.2>
    800015a6:	0001b517          	auipc	a0,0x1b
    800015aa:	53a50513          	add	a0,a0,1338 # 8001cae0 <__func__.1+0x2e8>
bool check_xip_regs_2(){
    800015ae:	ec06                	sd	ra,24(sp)
    800015b0:	e822                	sd	s0,16(sp)
    800015b2:	e426                	sd	s1,8(sp)
    TEST_START();
    800015b4:	1af190ef          	jal	8001af62 <printf>
    800015b8:	4529                	li	a0,10
    800015ba:	07b180ef          	jal	80019e34 <putchar>

    CSRW(mideleg, (uint64_t)-1);
    800015be:	547d                	li	s0,-1
    800015c0:	30341073          	csrw	mideleg,s0
    VERBOSE("setting mideleg and hideleg\n");
    
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    800015c4:	60341073          	csrw	hideleg,s0
    printf("%llx\n",CSRR(CSR_MIDELEG));
    800015c8:	303025f3          	csrr	a1,mideleg
    800015cc:	0001c517          	auipc	a0,0x1c
    800015d0:	8cc50513          	add	a0,a0,-1844 # 8001ce98 <__func__.1+0x6a0>
    800015d4:	18f190ef          	jal	8001af62 <printf>
    printf("%llx\n",CSRR(CSR_HIDELEG));
    800015d8:	603025f3          	csrr	a1,hideleg
    800015dc:	0001c517          	auipc	a0,0x1c
    800015e0:	8bc50513          	add	a0,a0,-1860 # 8001ce98 <__func__.1+0x6a0>
    800015e4:	17f190ef          	jal	8001af62 <printf>

    VERBOSE("setting all in mip\n");
    CSRW(mip, (uint64_t)-1);
    800015e8:	34441073          	csrw	mip,s0
    check_csr_rd("hip", CSR_HIP, 0x4);
    800015ec:	64402473          	csrr	s0,hip
    800015f0:	0001c617          	auipc	a2,0x1c
    800015f4:	8b060613          	add	a2,a2,-1872 # 8001cea0 <__func__.1+0x6a8>
    800015f8:	08200593          	li	a1,130
    800015fc:	0001b517          	auipc	a0,0x1b
    80001600:	4fc50513          	add	a0,a0,1276 # 8001caf8 <__func__.1+0x300>
    80001604:	15f190ef          	jal	8001af62 <printf>
    80001608:	4791                	li	a5,4
    8000160a:	46f40463          	beq	s0,a5,80001a72 <check_xip_regs_2+0x4d6>
    8000160e:	0001b597          	auipc	a1,0x1b
    80001612:	4c258593          	add	a1,a1,1218 # 8001cad0 <__func__.1+0x2d8>
    80001616:	0001b517          	auipc	a0,0x1b
    8000161a:	4fa50513          	add	a0,a0,1274 # 8001cb10 <__func__.1+0x318>
    8000161e:	145190ef          	jal	8001af62 <printf>
    80001622:	0001b517          	auipc	a0,0x1b
    80001626:	4f650513          	add	a0,a0,1270 # 8001cb18 <__func__.1+0x320>
    8000162a:	139190ef          	jal	8001af62 <printf>
    8000162e:	8622                	mv	a2,s0
    80001630:	4691                	li	a3,4
    80001632:	02d00593          	li	a1,45
    80001636:	0001c517          	auipc	a0,0x1c
    8000163a:	87250513          	add	a0,a0,-1934 # 8001cea8 <__func__.1+0x6b0>
    8000163e:	125190ef          	jal	8001af62 <printf>
    80001642:	02900513          	li	a0,41
    80001646:	7ee180ef          	jal	80019e34 <putchar>
    8000164a:	4529                	li	a0,10
    8000164c:	7e8180ef          	jal	80019e34 <putchar>
    80001650:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x222);
    80001652:	144024f3          	csrr	s1,sip
    80001656:	0001c617          	auipc	a2,0x1c
    8000165a:	86a60613          	add	a2,a2,-1942 # 8001cec0 <__func__.1+0x6c8>
    8000165e:	08200593          	li	a1,130
    80001662:	0001b517          	auipc	a0,0x1b
    80001666:	49650513          	add	a0,a0,1174 # 8001caf8 <__func__.1+0x300>
    8000166a:	0f9190ef          	jal	8001af62 <printf>
    8000166e:	22200793          	li	a5,546
    80001672:	3af48663          	beq	s1,a5,80001a1e <check_xip_regs_2+0x482>
    80001676:	0001b597          	auipc	a1,0x1b
    8000167a:	45a58593          	add	a1,a1,1114 # 8001cad0 <__func__.1+0x2d8>
    8000167e:	0001b517          	auipc	a0,0x1b
    80001682:	49250513          	add	a0,a0,1170 # 8001cb10 <__func__.1+0x318>
    80001686:	0dd190ef          	jal	8001af62 <printf>
    8000168a:	0001b517          	auipc	a0,0x1b
    8000168e:	48e50513          	add	a0,a0,1166 # 8001cb18 <__func__.1+0x320>
    80001692:	0d1190ef          	jal	8001af62 <printf>
    80001696:	22200693          	li	a3,546
    8000169a:	8626                	mv	a2,s1
    8000169c:	02d00593          	li	a1,45
    800016a0:	0001c517          	auipc	a0,0x1c
    800016a4:	80850513          	add	a0,a0,-2040 # 8001cea8 <__func__.1+0x6b0>
    800016a8:	0bb190ef          	jal	8001af62 <printf>
    800016ac:	02900513          	li	a0,41
    800016b0:	784180ef          	jal	80019e34 <putchar>
    800016b4:	4529                	li	a0,10
    800016b6:	77e180ef          	jal	80019e34 <putchar>
    800016ba:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x226, mtime_mask); // only test when nemu don't use difftest because spike, as ref, shut up time interrupt
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    800016bc:	244024f3          	csrr	s1,vsip
    800016c0:	0001b617          	auipc	a2,0x1b
    800016c4:	7c860613          	add	a2,a2,1992 # 8001ce88 <__func__.1+0x690>
    800016c8:	08200593          	li	a1,130
    800016cc:	0001b517          	auipc	a0,0x1b
    800016d0:	42c50513          	add	a0,a0,1068 # 8001caf8 <__func__.1+0x300>
    800016d4:	08f190ef          	jal	8001af62 <printf>
    800016d8:	4789                	li	a5,2
    800016da:	36f48e63          	beq	s1,a5,80001a56 <check_xip_regs_2+0x4ba>
    800016de:	0001b597          	auipc	a1,0x1b
    800016e2:	3f258593          	add	a1,a1,1010 # 8001cad0 <__func__.1+0x2d8>
    800016e6:	0001b517          	auipc	a0,0x1b
    800016ea:	42a50513          	add	a0,a0,1066 # 8001cb10 <__func__.1+0x318>
    800016ee:	075190ef          	jal	8001af62 <printf>
    800016f2:	0001b517          	auipc	a0,0x1b
    800016f6:	42650513          	add	a0,a0,1062 # 8001cb18 <__func__.1+0x320>
    800016fa:	069190ef          	jal	8001af62 <printf>
    800016fe:	4689                	li	a3,2
    80001700:	8626                	mv	a2,s1
    80001702:	02d00593          	li	a1,45
    80001706:	0001b517          	auipc	a0,0x1b
    8000170a:	7a250513          	add	a0,a0,1954 # 8001cea8 <__func__.1+0x6b0>
    8000170e:	055190ef          	jal	8001af62 <printf>
    80001712:	02900513          	li	a0,41
    80001716:	71e180ef          	jal	80019e34 <putchar>
    8000171a:	4529                	li	a0,10
    8000171c:	718180ef          	jal	80019e34 <putchar>
    80001720:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80001722:	4509                	li	a0,2
    80001724:	bbaff0ef          	jal	80000ade <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    80001728:	144024f3          	csrr	s1,sip
    8000172c:	0001b617          	auipc	a2,0x1b
    80001730:	79c60613          	add	a2,a2,1948 # 8001cec8 <__func__.1+0x6d0>
    80001734:	08200593          	li	a1,130
    80001738:	0001b517          	auipc	a0,0x1b
    8000173c:	3c050513          	add	a0,a0,960 # 8001caf8 <__func__.1+0x300>
    80001740:	023190ef          	jal	8001af62 <printf>
    80001744:	4789                	li	a5,2
    80001746:	2ef48a63          	beq	s1,a5,80001a3a <check_xip_regs_2+0x49e>
    8000174a:	0001b597          	auipc	a1,0x1b
    8000174e:	38658593          	add	a1,a1,902 # 8001cad0 <__func__.1+0x2d8>
    80001752:	0001b517          	auipc	a0,0x1b
    80001756:	3be50513          	add	a0,a0,958 # 8001cb10 <__func__.1+0x318>
    8000175a:	009190ef          	jal	8001af62 <printf>
    8000175e:	0001b517          	auipc	a0,0x1b
    80001762:	3ba50513          	add	a0,a0,954 # 8001cb18 <__func__.1+0x320>
    80001766:	7fc190ef          	jal	8001af62 <printf>
    8000176a:	4689                	li	a3,2
    8000176c:	8626                	mv	a2,s1
    8000176e:	02d00593          	li	a1,45
    80001772:	0001b517          	auipc	a0,0x1b
    80001776:	73650513          	add	a0,a0,1846 # 8001cea8 <__func__.1+0x6b0>
    8000177a:	7e8190ef          	jal	8001af62 <printf>
    8000177e:	02900513          	li	a0,41
    80001782:	6b2180ef          	jal	80019e34 <putchar>
    80001786:	4529                	li	a0,10
    80001788:	6ac180ef          	jal	80019e34 <putchar>
    8000178c:	4401                	li	s0,0
    goto_priv(PRIV_M);
    8000178e:	4511                	li	a0,4
    80001790:	b4eff0ef          	jal	80000ade <goto_priv>

    VERBOSE("clearing all in mip\n");
    CSRW(mip, (uint64_t)0);
    80001794:	34405073          	csrw	mip,0
    check_csr_rd("hip", CSR_HIP, 0x0);
    80001798:	644024f3          	csrr	s1,hip
    8000179c:	0001b617          	auipc	a2,0x1b
    800017a0:	70460613          	add	a2,a2,1796 # 8001cea0 <__func__.1+0x6a8>
    800017a4:	08200593          	li	a1,130
    800017a8:	0001b517          	auipc	a0,0x1b
    800017ac:	35050513          	add	a0,a0,848 # 8001caf8 <__func__.1+0x300>
    800017b0:	7b2190ef          	jal	8001af62 <printf>
    800017b4:	1a048563          	beqz	s1,8000195e <check_xip_regs_2+0x3c2>
    800017b8:	0001b597          	auipc	a1,0x1b
    800017bc:	31858593          	add	a1,a1,792 # 8001cad0 <__func__.1+0x2d8>
    800017c0:	0001b517          	auipc	a0,0x1b
    800017c4:	35050513          	add	a0,a0,848 # 8001cb10 <__func__.1+0x318>
    800017c8:	79a190ef          	jal	8001af62 <printf>
    800017cc:	0001b517          	auipc	a0,0x1b
    800017d0:	34c50513          	add	a0,a0,844 # 8001cb18 <__func__.1+0x320>
    800017d4:	78e190ef          	jal	8001af62 <printf>
    800017d8:	4681                	li	a3,0
    800017da:	8626                	mv	a2,s1
    800017dc:	02d00593          	li	a1,45
    800017e0:	0001b517          	auipc	a0,0x1b
    800017e4:	6c850513          	add	a0,a0,1736 # 8001cea8 <__func__.1+0x6b0>
    800017e8:	77a190ef          	jal	8001af62 <printf>
    800017ec:	02900513          	li	a0,41
    800017f0:	644180ef          	jal	80019e34 <putchar>
    800017f4:	4529                	li	a0,10
    800017f6:	63e180ef          	jal	80019e34 <putchar>
    800017fa:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    800017fc:	144024f3          	csrr	s1,sip
    80001800:	0001b617          	auipc	a2,0x1b
    80001804:	6c060613          	add	a2,a2,1728 # 8001cec0 <__func__.1+0x6c8>
    80001808:	08200593          	li	a1,130
    8000180c:	0001b517          	auipc	a0,0x1b
    80001810:	2ec50513          	add	a0,a0,748 # 8001caf8 <__func__.1+0x300>
    80001814:	74e190ef          	jal	8001af62 <printf>
    80001818:	18048063          	beqz	s1,80001998 <check_xip_regs_2+0x3fc>
    8000181c:	0001b597          	auipc	a1,0x1b
    80001820:	2b458593          	add	a1,a1,692 # 8001cad0 <__func__.1+0x2d8>
    80001824:	0001b517          	auipc	a0,0x1b
    80001828:	2ec50513          	add	a0,a0,748 # 8001cb10 <__func__.1+0x318>
    8000182c:	736190ef          	jal	8001af62 <printf>
    80001830:	0001b517          	auipc	a0,0x1b
    80001834:	2e850513          	add	a0,a0,744 # 8001cb18 <__func__.1+0x320>
    80001838:	72a190ef          	jal	8001af62 <printf>
    8000183c:	4681                	li	a3,0
    8000183e:	8626                	mv	a2,s1
    80001840:	02d00593          	li	a1,45
    80001844:	0001b517          	auipc	a0,0x1b
    80001848:	66450513          	add	a0,a0,1636 # 8001cea8 <__func__.1+0x6b0>
    8000184c:	716190ef          	jal	8001af62 <printf>
    80001850:	02900513          	li	a0,41
    80001854:	5e0180ef          	jal	80019e34 <putchar>
    80001858:	4529                	li	a0,10
    8000185a:	5da180ef          	jal	80019e34 <putchar>
    8000185e:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x000, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80001860:	244024f3          	csrr	s1,vsip
    80001864:	0001b617          	auipc	a2,0x1b
    80001868:	62460613          	add	a2,a2,1572 # 8001ce88 <__func__.1+0x690>
    8000186c:	08200593          	li	a1,130
    80001870:	0001b517          	auipc	a0,0x1b
    80001874:	28850513          	add	a0,a0,648 # 8001caf8 <__func__.1+0x300>
    80001878:	6ea190ef          	jal	8001af62 <printf>
    8000187c:	14048b63          	beqz	s1,800019d2 <check_xip_regs_2+0x436>
    80001880:	0001b597          	auipc	a1,0x1b
    80001884:	25058593          	add	a1,a1,592 # 8001cad0 <__func__.1+0x2d8>
    80001888:	0001b517          	auipc	a0,0x1b
    8000188c:	28850513          	add	a0,a0,648 # 8001cb10 <__func__.1+0x318>
    80001890:	6d2190ef          	jal	8001af62 <printf>
    80001894:	0001b517          	auipc	a0,0x1b
    80001898:	28450513          	add	a0,a0,644 # 8001cb18 <__func__.1+0x320>
    8000189c:	6c6190ef          	jal	8001af62 <printf>
    800018a0:	4681                	li	a3,0
    800018a2:	8626                	mv	a2,s1
    800018a4:	02d00593          	li	a1,45
    800018a8:	0001b517          	auipc	a0,0x1b
    800018ac:	60050513          	add	a0,a0,1536 # 8001cea8 <__func__.1+0x6b0>
    800018b0:	6b2190ef          	jal	8001af62 <printf>
    800018b4:	02900513          	li	a0,41
    800018b8:	57c180ef          	jal	80019e34 <putchar>
    800018bc:	4529                	li	a0,10
    800018be:	576180ef          	jal	80019e34 <putchar>
    800018c2:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    800018c4:	4509                	li	a0,2
    800018c6:	a18ff0ef          	jal	80000ade <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    800018ca:	144024f3          	csrr	s1,sip
    800018ce:	0001b617          	auipc	a2,0x1b
    800018d2:	5fa60613          	add	a2,a2,1530 # 8001cec8 <__func__.1+0x6d0>
    800018d6:	08200593          	li	a1,130
    800018da:	0001b517          	auipc	a0,0x1b
    800018de:	21e50513          	add	a0,a0,542 # 8001caf8 <__func__.1+0x300>
    800018e2:	680190ef          	jal	8001af62 <printf>
    800018e6:	10048463          	beqz	s1,800019ee <check_xip_regs_2+0x452>
    800018ea:	0001b597          	auipc	a1,0x1b
    800018ee:	1e658593          	add	a1,a1,486 # 8001cad0 <__func__.1+0x2d8>
    800018f2:	0001b517          	auipc	a0,0x1b
    800018f6:	21e50513          	add	a0,a0,542 # 8001cb10 <__func__.1+0x318>
    800018fa:	668190ef          	jal	8001af62 <printf>
    800018fe:	0001b517          	auipc	a0,0x1b
    80001902:	21a50513          	add	a0,a0,538 # 8001cb18 <__func__.1+0x320>
    80001906:	65c190ef          	jal	8001af62 <printf>
    8000190a:	4681                	li	a3,0
    8000190c:	8626                	mv	a2,s1
    8000190e:	02d00593          	li	a1,45
    80001912:	0001b517          	auipc	a0,0x1b
    80001916:	59650513          	add	a0,a0,1430 # 8001cea8 <__func__.1+0x6b0>
    8000191a:	648190ef          	jal	8001af62 <printf>
    8000191e:	02900513          	li	a0,41
    80001922:	512180ef          	jal	80019e34 <putchar>
    80001926:	4529                	li	a0,10
    80001928:	50c180ef          	jal	80019e34 <putchar>
    goto_priv(PRIV_M);   
    8000192c:	4511                	li	a0,4
    8000192e:	9b0ff0ef          	jal	80000ade <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001932:	4401                	li	s0,0

    TEST_END();
    80001934:	0001b597          	auipc	a1,0x1b
    80001938:	19c58593          	add	a1,a1,412 # 8001cad0 <__func__.1+0x2d8>
    8000193c:	0001b517          	auipc	a0,0x1b
    80001940:	23c50513          	add	a0,a0,572 # 8001cb78 <__func__.1+0x380>
    80001944:	61e190ef          	jal	8001af62 <printf>
    80001948:	4511                	li	a0,4
    8000194a:	994ff0ef          	jal	80000ade <goto_priv>
    8000194e:	9d9ff0ef          	jal	80001326 <reset_state>
}
    80001952:	60e2                	ld	ra,24(sp)
    80001954:	8522                	mv	a0,s0
    80001956:	6442                	ld	s0,16(sp)
    80001958:	64a2                	ld	s1,8(sp)
    8000195a:	6105                	add	sp,sp,32
    8000195c:	8082                	ret
    check_csr_rd("hip", CSR_HIP, 0x0);
    8000195e:	0001b597          	auipc	a1,0x1b
    80001962:	16258593          	add	a1,a1,354 # 8001cac0 <__func__.1+0x2c8>
    80001966:	0001b517          	auipc	a0,0x1b
    8000196a:	1aa50513          	add	a0,a0,426 # 8001cb10 <__func__.1+0x318>
    8000196e:	5f4190ef          	jal	8001af62 <printf>
    80001972:	4529                	li	a0,10
    80001974:	4c0180ef          	jal	80019e34 <putchar>
    check_csr_rd("sip", sip, 0x0);
    80001978:	144024f3          	csrr	s1,sip
    8000197c:	0001b617          	auipc	a2,0x1b
    80001980:	54460613          	add	a2,a2,1348 # 8001cec0 <__func__.1+0x6c8>
    80001984:	08200593          	li	a1,130
    80001988:	0001b517          	auipc	a0,0x1b
    8000198c:	17050513          	add	a0,a0,368 # 8001caf8 <__func__.1+0x300>
    80001990:	5d2190ef          	jal	8001af62 <printf>
    80001994:	e80494e3          	bnez	s1,8000181c <check_xip_regs_2+0x280>
    80001998:	0001b597          	auipc	a1,0x1b
    8000199c:	12858593          	add	a1,a1,296 # 8001cac0 <__func__.1+0x2c8>
    800019a0:	0001b517          	auipc	a0,0x1b
    800019a4:	17050513          	add	a0,a0,368 # 8001cb10 <__func__.1+0x318>
    800019a8:	5ba190ef          	jal	8001af62 <printf>
    800019ac:	4529                	li	a0,10
    800019ae:	486180ef          	jal	80019e34 <putchar>
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    800019b2:	244024f3          	csrr	s1,vsip
    800019b6:	0001b617          	auipc	a2,0x1b
    800019ba:	4d260613          	add	a2,a2,1234 # 8001ce88 <__func__.1+0x690>
    800019be:	08200593          	li	a1,130
    800019c2:	0001b517          	auipc	a0,0x1b
    800019c6:	13650513          	add	a0,a0,310 # 8001caf8 <__func__.1+0x300>
    800019ca:	598190ef          	jal	8001af62 <printf>
    800019ce:	ea0499e3          	bnez	s1,80001880 <check_xip_regs_2+0x2e4>
    800019d2:	0001b597          	auipc	a1,0x1b
    800019d6:	0ee58593          	add	a1,a1,238 # 8001cac0 <__func__.1+0x2c8>
    800019da:	0001b517          	auipc	a0,0x1b
    800019de:	13650513          	add	a0,a0,310 # 8001cb10 <__func__.1+0x318>
    800019e2:	580190ef          	jal	8001af62 <printf>
    800019e6:	4529                	li	a0,10
    800019e8:	44c180ef          	jal	80019e34 <putchar>
    800019ec:	bde1                	j	800018c4 <check_xip_regs_2+0x328>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    800019ee:	0001b597          	auipc	a1,0x1b
    800019f2:	0d258593          	add	a1,a1,210 # 8001cac0 <__func__.1+0x2c8>
    800019f6:	0001b517          	auipc	a0,0x1b
    800019fa:	11a50513          	add	a0,a0,282 # 8001cb10 <__func__.1+0x318>
    800019fe:	564190ef          	jal	8001af62 <printf>
    80001a02:	4529                	li	a0,10
    80001a04:	430180ef          	jal	80019e34 <putchar>
    80001a08:	f20402e3          	beqz	s0,8000192c <check_xip_regs_2+0x390>
    goto_priv(PRIV_M);   
    80001a0c:	4511                	li	a0,4
    80001a0e:	8d0ff0ef          	jal	80000ade <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001a12:	4405                	li	s0,1
    TEST_END();
    80001a14:	0001b597          	auipc	a1,0x1b
    80001a18:	0ac58593          	add	a1,a1,172 # 8001cac0 <__func__.1+0x2c8>
    80001a1c:	b705                	j	8000193c <check_xip_regs_2+0x3a0>
    check_csr_rd("sip", sip, 0x222);
    80001a1e:	0001b597          	auipc	a1,0x1b
    80001a22:	0a258593          	add	a1,a1,162 # 8001cac0 <__func__.1+0x2c8>
    80001a26:	0001b517          	auipc	a0,0x1b
    80001a2a:	0ea50513          	add	a0,a0,234 # 8001cb10 <__func__.1+0x318>
    80001a2e:	534190ef          	jal	8001af62 <printf>
    80001a32:	4529                	li	a0,10
    80001a34:	400180ef          	jal	80019e34 <putchar>
    80001a38:	b151                	j	800016bc <check_xip_regs_2+0x120>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    80001a3a:	0001b597          	auipc	a1,0x1b
    80001a3e:	08658593          	add	a1,a1,134 # 8001cac0 <__func__.1+0x2c8>
    80001a42:	0001b517          	auipc	a0,0x1b
    80001a46:	0ce50513          	add	a0,a0,206 # 8001cb10 <__func__.1+0x318>
    80001a4a:	518190ef          	jal	8001af62 <printf>
    80001a4e:	4529                	li	a0,10
    80001a50:	3e4180ef          	jal	80019e34 <putchar>
    80001a54:	bb2d                	j	8000178e <check_xip_regs_2+0x1f2>
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    80001a56:	0001b597          	auipc	a1,0x1b
    80001a5a:	06a58593          	add	a1,a1,106 # 8001cac0 <__func__.1+0x2c8>
    80001a5e:	0001b517          	auipc	a0,0x1b
    80001a62:	0b250513          	add	a0,a0,178 # 8001cb10 <__func__.1+0x318>
    80001a66:	4fc190ef          	jal	8001af62 <printf>
    80001a6a:	4529                	li	a0,10
    80001a6c:	3c8180ef          	jal	80019e34 <putchar>
    80001a70:	b94d                	j	80001722 <check_xip_regs_2+0x186>
    check_csr_rd("hip", CSR_HIP, 0x4);
    80001a72:	0001b597          	auipc	a1,0x1b
    80001a76:	04e58593          	add	a1,a1,78 # 8001cac0 <__func__.1+0x2c8>
    80001a7a:	0001b517          	auipc	a0,0x1b
    80001a7e:	09650513          	add	a0,a0,150 # 8001cb10 <__func__.1+0x318>
    80001a82:	4e0190ef          	jal	8001af62 <printf>
    80001a86:	4529                	li	a0,10
    80001a88:	3ac180ef          	jal	80019e34 <putchar>
    80001a8c:	4405                	li	s0,1
    80001a8e:	b6d1                	j	80001652 <check_xip_regs_2+0xb6>

0000000080001a90 <check_xip_regs_3>:

bool check_xip_regs_3(){
    80001a90:	1101                	add	sp,sp,-32

    TEST_START();
    80001a92:	0001a597          	auipc	a1,0x1a
    80001a96:	a0e58593          	add	a1,a1,-1522 # 8001b4a0 <__func__.1>
    80001a9a:	0001b517          	auipc	a0,0x1b
    80001a9e:	04650513          	add	a0,a0,70 # 8001cae0 <__func__.1+0x2e8>
bool check_xip_regs_3(){
    80001aa2:	ec06                	sd	ra,24(sp)
    80001aa4:	e822                	sd	s0,16(sp)
    80001aa6:	e426                	sd	s1,8(sp)
    TEST_START();
    80001aa8:	4ba190ef          	jal	8001af62 <printf>
    80001aac:	4529                	li	a0,10
    80001aae:	386180ef          	jal	80019e34 <putchar>

    CSRW(mideleg, (uint64_t)-1);
    80001ab2:	57fd                	li	a5,-1
    80001ab4:	30379073          	csrw	mideleg,a5
    VERBOSE("setting mideleg and hideleg\n");
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    80001ab8:	60379073          	csrw	hideleg,a5

    VERBOSE("setting all in hvip\n");
    CSRW(CSR_HVIP, (uint64_t)-1);
    80001abc:	64579073          	csrw	hvip,a5
    check_csr_rd("hvip", CSR_HVIP, 0x444);
    80001ac0:	64502473          	csrr	s0,hvip
    80001ac4:	0001b617          	auipc	a2,0x1b
    80001ac8:	41c60613          	add	a2,a2,1052 # 8001cee0 <__func__.1+0x6e8>
    80001acc:	08200593          	li	a1,130
    80001ad0:	0001b517          	auipc	a0,0x1b
    80001ad4:	02850513          	add	a0,a0,40 # 8001caf8 <__func__.1+0x300>
    80001ad8:	48a190ef          	jal	8001af62 <printf>
    80001adc:	44400793          	li	a5,1092
    80001ae0:	4af40963          	beq	s0,a5,80001f92 <check_xip_regs_3+0x502>
    80001ae4:	0001b597          	auipc	a1,0x1b
    80001ae8:	fec58593          	add	a1,a1,-20 # 8001cad0 <__func__.1+0x2d8>
    80001aec:	0001b517          	auipc	a0,0x1b
    80001af0:	02450513          	add	a0,a0,36 # 8001cb10 <__func__.1+0x318>
    80001af4:	46e190ef          	jal	8001af62 <printf>
    80001af8:	0001b517          	auipc	a0,0x1b
    80001afc:	02050513          	add	a0,a0,32 # 8001cb18 <__func__.1+0x320>
    80001b00:	462190ef          	jal	8001af62 <printf>
    80001b04:	8622                	mv	a2,s0
    80001b06:	44400693          	li	a3,1092
    80001b0a:	02d00593          	li	a1,45
    80001b0e:	0001b517          	auipc	a0,0x1b
    80001b12:	39a50513          	add	a0,a0,922 # 8001cea8 <__func__.1+0x6b0>
    80001b16:	44c190ef          	jal	8001af62 <printf>
    80001b1a:	02900513          	li	a0,41
    80001b1e:	316180ef          	jal	80019e34 <putchar>
    80001b22:	4529                	li	a0,10
    80001b24:	310180ef          	jal	80019e34 <putchar>
    80001b28:	4401                	li	s0,0
    check_csr_rd("hip", CSR_HIP, 0x444);
    80001b2a:	644024f3          	csrr	s1,hip
    80001b2e:	0001b617          	auipc	a2,0x1b
    80001b32:	37260613          	add	a2,a2,882 # 8001cea0 <__func__.1+0x6a8>
    80001b36:	08200593          	li	a1,130
    80001b3a:	0001b517          	auipc	a0,0x1b
    80001b3e:	fbe50513          	add	a0,a0,-66 # 8001caf8 <__func__.1+0x300>
    80001b42:	420190ef          	jal	8001af62 <printf>
    80001b46:	44400793          	li	a5,1092
    80001b4a:	3ef48a63          	beq	s1,a5,80001f3e <check_xip_regs_3+0x4ae>
    80001b4e:	0001b597          	auipc	a1,0x1b
    80001b52:	f8258593          	add	a1,a1,-126 # 8001cad0 <__func__.1+0x2d8>
    80001b56:	0001b517          	auipc	a0,0x1b
    80001b5a:	fba50513          	add	a0,a0,-70 # 8001cb10 <__func__.1+0x318>
    80001b5e:	404190ef          	jal	8001af62 <printf>
    80001b62:	0001b517          	auipc	a0,0x1b
    80001b66:	fb650513          	add	a0,a0,-74 # 8001cb18 <__func__.1+0x320>
    80001b6a:	3f8190ef          	jal	8001af62 <printf>
    80001b6e:	44400693          	li	a3,1092
    80001b72:	8626                	mv	a2,s1
    80001b74:	02d00593          	li	a1,45
    80001b78:	0001b517          	auipc	a0,0x1b
    80001b7c:	33050513          	add	a0,a0,816 # 8001cea8 <__func__.1+0x6b0>
    80001b80:	3e2190ef          	jal	8001af62 <printf>
    80001b84:	02900513          	li	a0,41
    80001b88:	2ac180ef          	jal	80019e34 <putchar>
    80001b8c:	4529                	li	a0,10
    80001b8e:	2a6180ef          	jal	80019e34 <putchar>
    80001b92:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    80001b94:	144024f3          	csrr	s1,sip
    80001b98:	0001b617          	auipc	a2,0x1b
    80001b9c:	32860613          	add	a2,a2,808 # 8001cec0 <__func__.1+0x6c8>
    80001ba0:	08200593          	li	a1,130
    80001ba4:	0001b517          	auipc	a0,0x1b
    80001ba8:	f5450513          	add	a0,a0,-172 # 8001caf8 <__func__.1+0x300>
    80001bac:	3b6190ef          	jal	8001af62 <printf>
    80001bb0:	2e048863          	beqz	s1,80001ea0 <check_xip_regs_3+0x410>
    80001bb4:	0001b597          	auipc	a1,0x1b
    80001bb8:	f1c58593          	add	a1,a1,-228 # 8001cad0 <__func__.1+0x2d8>
    80001bbc:	0001b517          	auipc	a0,0x1b
    80001bc0:	f5450513          	add	a0,a0,-172 # 8001cb10 <__func__.1+0x318>
    80001bc4:	39e190ef          	jal	8001af62 <printf>
    80001bc8:	0001b517          	auipc	a0,0x1b
    80001bcc:	f5050513          	add	a0,a0,-176 # 8001cb18 <__func__.1+0x320>
    80001bd0:	392190ef          	jal	8001af62 <printf>
    80001bd4:	4681                	li	a3,0
    80001bd6:	8626                	mv	a2,s1
    80001bd8:	02d00593          	li	a1,45
    80001bdc:	0001b517          	auipc	a0,0x1b
    80001be0:	2cc50513          	add	a0,a0,716 # 8001cea8 <__func__.1+0x6b0>
    80001be4:	37e190ef          	jal	8001af62 <printf>
    80001be8:	02900513          	li	a0,41
    80001bec:	248180ef          	jal	80019e34 <putchar>
    80001bf0:	4529                	li	a0,10
    80001bf2:	242180ef          	jal	80019e34 <putchar>
    80001bf6:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x444, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x222);
    80001bf8:	244024f3          	csrr	s1,vsip
    80001bfc:	0001b617          	auipc	a2,0x1b
    80001c00:	28c60613          	add	a2,a2,652 # 8001ce88 <__func__.1+0x690>
    80001c04:	08200593          	li	a1,130
    80001c08:	0001b517          	auipc	a0,0x1b
    80001c0c:	ef050513          	add	a0,a0,-272 # 8001caf8 <__func__.1+0x300>
    80001c10:	352190ef          	jal	8001af62 <printf>
    80001c14:	22200793          	li	a5,546
    80001c18:	34f48f63          	beq	s1,a5,80001f76 <check_xip_regs_3+0x4e6>
    80001c1c:	0001b597          	auipc	a1,0x1b
    80001c20:	eb458593          	add	a1,a1,-332 # 8001cad0 <__func__.1+0x2d8>
    80001c24:	0001b517          	auipc	a0,0x1b
    80001c28:	eec50513          	add	a0,a0,-276 # 8001cb10 <__func__.1+0x318>
    80001c2c:	336190ef          	jal	8001af62 <printf>
    80001c30:	0001b517          	auipc	a0,0x1b
    80001c34:	ee850513          	add	a0,a0,-280 # 8001cb18 <__func__.1+0x320>
    80001c38:	32a190ef          	jal	8001af62 <printf>
    80001c3c:	22200693          	li	a3,546
    80001c40:	8626                	mv	a2,s1
    80001c42:	02d00593          	li	a1,45
    80001c46:	0001b517          	auipc	a0,0x1b
    80001c4a:	26250513          	add	a0,a0,610 # 8001cea8 <__func__.1+0x6b0>
    80001c4e:	314190ef          	jal	8001af62 <printf>
    80001c52:	02900513          	li	a0,41
    80001c56:	1de180ef          	jal	80019e34 <putchar>
    80001c5a:	4529                	li	a0,10
    80001c5c:	1d8180ef          	jal	80019e34 <putchar>
    80001c60:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80001c62:	4509                	li	a0,2
    80001c64:	e7bfe0ef          	jal	80000ade <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x222);
    80001c68:	144024f3          	csrr	s1,sip
    80001c6c:	0001b617          	auipc	a2,0x1b
    80001c70:	25c60613          	add	a2,a2,604 # 8001cec8 <__func__.1+0x6d0>
    80001c74:	08200593          	li	a1,130
    80001c78:	0001b517          	auipc	a0,0x1b
    80001c7c:	e8050513          	add	a0,a0,-384 # 8001caf8 <__func__.1+0x300>
    80001c80:	2e2190ef          	jal	8001af62 <printf>
    80001c84:	22200793          	li	a5,546
    80001c88:	2cf48963          	beq	s1,a5,80001f5a <check_xip_regs_3+0x4ca>
    80001c8c:	0001b597          	auipc	a1,0x1b
    80001c90:	e4458593          	add	a1,a1,-444 # 8001cad0 <__func__.1+0x2d8>
    80001c94:	0001b517          	auipc	a0,0x1b
    80001c98:	e7c50513          	add	a0,a0,-388 # 8001cb10 <__func__.1+0x318>
    80001c9c:	2c6190ef          	jal	8001af62 <printf>
    80001ca0:	0001b517          	auipc	a0,0x1b
    80001ca4:	e7850513          	add	a0,a0,-392 # 8001cb18 <__func__.1+0x320>
    80001ca8:	2ba190ef          	jal	8001af62 <printf>
    80001cac:	22200693          	li	a3,546
    80001cb0:	8626                	mv	a2,s1
    80001cb2:	02d00593          	li	a1,45
    80001cb6:	0001b517          	auipc	a0,0x1b
    80001cba:	1f250513          	add	a0,a0,498 # 8001cea8 <__func__.1+0x6b0>
    80001cbe:	2a4190ef          	jal	8001af62 <printf>
    80001cc2:	02900513          	li	a0,41
    80001cc6:	16e180ef          	jal	80019e34 <putchar>
    80001cca:	4529                	li	a0,10
    80001ccc:	168180ef          	jal	80019e34 <putchar>
    80001cd0:	4401                	li	s0,0
    goto_priv(PRIV_M);
    80001cd2:	4511                	li	a0,4
    80001cd4:	e0bfe0ef          	jal	80000ade <goto_priv>

    VERBOSE("clearing all in hvip\n");
    CSRW(CSR_HVIP, (uint64_t)0);
    80001cd8:	64505073          	csrw	hvip,0
    check_csr_rd("hip", CSR_HIP, 0x0);
    80001cdc:	644024f3          	csrr	s1,hip
    80001ce0:	0001b617          	auipc	a2,0x1b
    80001ce4:	1c060613          	add	a2,a2,448 # 8001cea0 <__func__.1+0x6a8>
    80001ce8:	08200593          	li	a1,130
    80001cec:	0001b517          	auipc	a0,0x1b
    80001cf0:	e0c50513          	add	a0,a0,-500 # 8001caf8 <__func__.1+0x300>
    80001cf4:	26e190ef          	jal	8001af62 <printf>
    80001cf8:	22048563          	beqz	s1,80001f22 <check_xip_regs_3+0x492>
    80001cfc:	0001b597          	auipc	a1,0x1b
    80001d00:	dd458593          	add	a1,a1,-556 # 8001cad0 <__func__.1+0x2d8>
    80001d04:	0001b517          	auipc	a0,0x1b
    80001d08:	e0c50513          	add	a0,a0,-500 # 8001cb10 <__func__.1+0x318>
    80001d0c:	256190ef          	jal	8001af62 <printf>
    80001d10:	0001b517          	auipc	a0,0x1b
    80001d14:	e0850513          	add	a0,a0,-504 # 8001cb18 <__func__.1+0x320>
    80001d18:	24a190ef          	jal	8001af62 <printf>
    80001d1c:	4681                	li	a3,0
    80001d1e:	8626                	mv	a2,s1
    80001d20:	02d00593          	li	a1,45
    80001d24:	0001b517          	auipc	a0,0x1b
    80001d28:	18450513          	add	a0,a0,388 # 8001cea8 <__func__.1+0x6b0>
    80001d2c:	236190ef          	jal	8001af62 <printf>
    80001d30:	02900513          	li	a0,41
    80001d34:	100180ef          	jal	80019e34 <putchar>
    80001d38:	4529                	li	a0,10
    80001d3a:	0fa180ef          	jal	80019e34 <putchar>
    80001d3e:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    80001d40:	144024f3          	csrr	s1,sip
    80001d44:	0001b617          	auipc	a2,0x1b
    80001d48:	17c60613          	add	a2,a2,380 # 8001cec0 <__func__.1+0x6c8>
    80001d4c:	08200593          	li	a1,130
    80001d50:	0001b517          	auipc	a0,0x1b
    80001d54:	da850513          	add	a0,a0,-600 # 8001caf8 <__func__.1+0x300>
    80001d58:	20a190ef          	jal	8001af62 <printf>
    80001d5c:	1a048563          	beqz	s1,80001f06 <check_xip_regs_3+0x476>
    80001d60:	0001b597          	auipc	a1,0x1b
    80001d64:	d7058593          	add	a1,a1,-656 # 8001cad0 <__func__.1+0x2d8>
    80001d68:	0001b517          	auipc	a0,0x1b
    80001d6c:	da850513          	add	a0,a0,-600 # 8001cb10 <__func__.1+0x318>
    80001d70:	1f2190ef          	jal	8001af62 <printf>
    80001d74:	0001b517          	auipc	a0,0x1b
    80001d78:	da450513          	add	a0,a0,-604 # 8001cb18 <__func__.1+0x320>
    80001d7c:	1e6190ef          	jal	8001af62 <printf>
    80001d80:	4681                	li	a3,0
    80001d82:	8626                	mv	a2,s1
    80001d84:	02d00593          	li	a1,45
    80001d88:	0001b517          	auipc	a0,0x1b
    80001d8c:	12050513          	add	a0,a0,288 # 8001cea8 <__func__.1+0x6b0>
    80001d90:	1d2190ef          	jal	8001af62 <printf>
    80001d94:	02900513          	li	a0,41
    80001d98:	09c180ef          	jal	80019e34 <putchar>
    80001d9c:	4529                	li	a0,10
    80001d9e:	096180ef          	jal	80019e34 <putchar>
    80001da2:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x000, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80001da4:	244024f3          	csrr	s1,vsip
    80001da8:	0001b617          	auipc	a2,0x1b
    80001dac:	0e060613          	add	a2,a2,224 # 8001ce88 <__func__.1+0x690>
    80001db0:	08200593          	li	a1,130
    80001db4:	0001b517          	auipc	a0,0x1b
    80001db8:	d4450513          	add	a0,a0,-700 # 8001caf8 <__func__.1+0x300>
    80001dbc:	1a6190ef          	jal	8001af62 <printf>
    80001dc0:	12048563          	beqz	s1,80001eea <check_xip_regs_3+0x45a>
    80001dc4:	0001b597          	auipc	a1,0x1b
    80001dc8:	d0c58593          	add	a1,a1,-756 # 8001cad0 <__func__.1+0x2d8>
    80001dcc:	0001b517          	auipc	a0,0x1b
    80001dd0:	d4450513          	add	a0,a0,-700 # 8001cb10 <__func__.1+0x318>
    80001dd4:	18e190ef          	jal	8001af62 <printf>
    80001dd8:	0001b517          	auipc	a0,0x1b
    80001ddc:	d4050513          	add	a0,a0,-704 # 8001cb18 <__func__.1+0x320>
    80001de0:	182190ef          	jal	8001af62 <printf>
    80001de4:	4681                	li	a3,0
    80001de6:	8626                	mv	a2,s1
    80001de8:	02d00593          	li	a1,45
    80001dec:	0001b517          	auipc	a0,0x1b
    80001df0:	0bc50513          	add	a0,a0,188 # 8001cea8 <__func__.1+0x6b0>
    80001df4:	16e190ef          	jal	8001af62 <printf>
    80001df8:	02900513          	li	a0,41
    80001dfc:	038180ef          	jal	80019e34 <putchar>
    80001e00:	4529                	li	a0,10
    80001e02:	032180ef          	jal	80019e34 <putchar>
    80001e06:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80001e08:	4509                	li	a0,2
    80001e0a:	cd5fe0ef          	jal	80000ade <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001e0e:	144024f3          	csrr	s1,sip
    80001e12:	0001b617          	auipc	a2,0x1b
    80001e16:	0b660613          	add	a2,a2,182 # 8001cec8 <__func__.1+0x6d0>
    80001e1a:	08200593          	li	a1,130
    80001e1e:	0001b517          	auipc	a0,0x1b
    80001e22:	cda50513          	add	a0,a0,-806 # 8001caf8 <__func__.1+0x300>
    80001e26:	13c190ef          	jal	8001af62 <printf>
    80001e2a:	c8c9                	beqz	s1,80001ebc <check_xip_regs_3+0x42c>
    80001e2c:	0001b597          	auipc	a1,0x1b
    80001e30:	ca458593          	add	a1,a1,-860 # 8001cad0 <__func__.1+0x2d8>
    80001e34:	0001b517          	auipc	a0,0x1b
    80001e38:	cdc50513          	add	a0,a0,-804 # 8001cb10 <__func__.1+0x318>
    80001e3c:	126190ef          	jal	8001af62 <printf>
    80001e40:	0001b517          	auipc	a0,0x1b
    80001e44:	cd850513          	add	a0,a0,-808 # 8001cb18 <__func__.1+0x320>
    80001e48:	11a190ef          	jal	8001af62 <printf>
    80001e4c:	4681                	li	a3,0
    80001e4e:	8626                	mv	a2,s1
    80001e50:	02d00593          	li	a1,45
    80001e54:	0001b517          	auipc	a0,0x1b
    80001e58:	05450513          	add	a0,a0,84 # 8001cea8 <__func__.1+0x6b0>
    80001e5c:	106190ef          	jal	8001af62 <printf>
    80001e60:	02900513          	li	a0,41
    80001e64:	7d1170ef          	jal	80019e34 <putchar>
    80001e68:	4529                	li	a0,10
    80001e6a:	7cb170ef          	jal	80019e34 <putchar>
    goto_priv(PRIV_M);
    80001e6e:	4511                	li	a0,4
    80001e70:	c6ffe0ef          	jal	80000ade <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001e74:	4401                	li	s0,0

    TEST_END();
    80001e76:	0001b597          	auipc	a1,0x1b
    80001e7a:	c5a58593          	add	a1,a1,-934 # 8001cad0 <__func__.1+0x2d8>
    80001e7e:	0001b517          	auipc	a0,0x1b
    80001e82:	cfa50513          	add	a0,a0,-774 # 8001cb78 <__func__.1+0x380>
    80001e86:	0dc190ef          	jal	8001af62 <printf>
    80001e8a:	4511                	li	a0,4
    80001e8c:	c53fe0ef          	jal	80000ade <goto_priv>
    80001e90:	c96ff0ef          	jal	80001326 <reset_state>
}
    80001e94:	60e2                	ld	ra,24(sp)
    80001e96:	8522                	mv	a0,s0
    80001e98:	6442                	ld	s0,16(sp)
    80001e9a:	64a2                	ld	s1,8(sp)
    80001e9c:	6105                	add	sp,sp,32
    80001e9e:	8082                	ret
    check_csr_rd("sip", sip, 0x0);
    80001ea0:	0001b597          	auipc	a1,0x1b
    80001ea4:	c2058593          	add	a1,a1,-992 # 8001cac0 <__func__.1+0x2c8>
    80001ea8:	0001b517          	auipc	a0,0x1b
    80001eac:	c6850513          	add	a0,a0,-920 # 8001cb10 <__func__.1+0x318>
    80001eb0:	0b2190ef          	jal	8001af62 <printf>
    80001eb4:	4529                	li	a0,10
    80001eb6:	77f170ef          	jal	80019e34 <putchar>
    80001eba:	bb3d                	j	80001bf8 <check_xip_regs_3+0x168>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001ebc:	0001b597          	auipc	a1,0x1b
    80001ec0:	c0458593          	add	a1,a1,-1020 # 8001cac0 <__func__.1+0x2c8>
    80001ec4:	0001b517          	auipc	a0,0x1b
    80001ec8:	c4c50513          	add	a0,a0,-948 # 8001cb10 <__func__.1+0x318>
    80001ecc:	096190ef          	jal	8001af62 <printf>
    80001ed0:	4529                	li	a0,10
    80001ed2:	763170ef          	jal	80019e34 <putchar>
    80001ed6:	dc41                	beqz	s0,80001e6e <check_xip_regs_3+0x3de>
    goto_priv(PRIV_M);
    80001ed8:	4511                	li	a0,4
    80001eda:	c05fe0ef          	jal	80000ade <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001ede:	4405                	li	s0,1
    TEST_END();
    80001ee0:	0001b597          	auipc	a1,0x1b
    80001ee4:	be058593          	add	a1,a1,-1056 # 8001cac0 <__func__.1+0x2c8>
    80001ee8:	bf59                	j	80001e7e <check_xip_regs_3+0x3ee>
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80001eea:	0001b597          	auipc	a1,0x1b
    80001eee:	bd658593          	add	a1,a1,-1066 # 8001cac0 <__func__.1+0x2c8>
    80001ef2:	0001b517          	auipc	a0,0x1b
    80001ef6:	c1e50513          	add	a0,a0,-994 # 8001cb10 <__func__.1+0x318>
    80001efa:	068190ef          	jal	8001af62 <printf>
    80001efe:	4529                	li	a0,10
    80001f00:	735170ef          	jal	80019e34 <putchar>
    80001f04:	b711                	j	80001e08 <check_xip_regs_3+0x378>
    check_csr_rd("sip", sip, 0x0);
    80001f06:	0001b597          	auipc	a1,0x1b
    80001f0a:	bba58593          	add	a1,a1,-1094 # 8001cac0 <__func__.1+0x2c8>
    80001f0e:	0001b517          	auipc	a0,0x1b
    80001f12:	c0250513          	add	a0,a0,-1022 # 8001cb10 <__func__.1+0x318>
    80001f16:	04c190ef          	jal	8001af62 <printf>
    80001f1a:	4529                	li	a0,10
    80001f1c:	719170ef          	jal	80019e34 <putchar>
    80001f20:	b551                	j	80001da4 <check_xip_regs_3+0x314>
    check_csr_rd("hip", CSR_HIP, 0x0);
    80001f22:	0001b597          	auipc	a1,0x1b
    80001f26:	b9e58593          	add	a1,a1,-1122 # 8001cac0 <__func__.1+0x2c8>
    80001f2a:	0001b517          	auipc	a0,0x1b
    80001f2e:	be650513          	add	a0,a0,-1050 # 8001cb10 <__func__.1+0x318>
    80001f32:	030190ef          	jal	8001af62 <printf>
    80001f36:	4529                	li	a0,10
    80001f38:	6fd170ef          	jal	80019e34 <putchar>
    80001f3c:	b511                	j	80001d40 <check_xip_regs_3+0x2b0>
    check_csr_rd("hip", CSR_HIP, 0x444);
    80001f3e:	0001b597          	auipc	a1,0x1b
    80001f42:	b8258593          	add	a1,a1,-1150 # 8001cac0 <__func__.1+0x2c8>
    80001f46:	0001b517          	auipc	a0,0x1b
    80001f4a:	bca50513          	add	a0,a0,-1078 # 8001cb10 <__func__.1+0x318>
    80001f4e:	014190ef          	jal	8001af62 <printf>
    80001f52:	4529                	li	a0,10
    80001f54:	6e1170ef          	jal	80019e34 <putchar>
    80001f58:	b935                	j	80001b94 <check_xip_regs_3+0x104>
    check_csr_rd("sip (vs perspective)", sip, 0x222);
    80001f5a:	0001b597          	auipc	a1,0x1b
    80001f5e:	b6658593          	add	a1,a1,-1178 # 8001cac0 <__func__.1+0x2c8>
    80001f62:	0001b517          	auipc	a0,0x1b
    80001f66:	bae50513          	add	a0,a0,-1106 # 8001cb10 <__func__.1+0x318>
    80001f6a:	7f9180ef          	jal	8001af62 <printf>
    80001f6e:	4529                	li	a0,10
    80001f70:	6c5170ef          	jal	80019e34 <putchar>
    80001f74:	bbb9                	j	80001cd2 <check_xip_regs_3+0x242>
    check_csr_rd("vsip", CSR_VSIP, 0x222);
    80001f76:	0001b597          	auipc	a1,0x1b
    80001f7a:	b4a58593          	add	a1,a1,-1206 # 8001cac0 <__func__.1+0x2c8>
    80001f7e:	0001b517          	auipc	a0,0x1b
    80001f82:	b9250513          	add	a0,a0,-1134 # 8001cb10 <__func__.1+0x318>
    80001f86:	7dd180ef          	jal	8001af62 <printf>
    80001f8a:	4529                	li	a0,10
    80001f8c:	6a9170ef          	jal	80019e34 <putchar>
    80001f90:	b9c9                	j	80001c62 <check_xip_regs_3+0x1d2>
    check_csr_rd("hvip", CSR_HVIP, 0x444);
    80001f92:	0001b597          	auipc	a1,0x1b
    80001f96:	b2e58593          	add	a1,a1,-1234 # 8001cac0 <__func__.1+0x2c8>
    80001f9a:	0001b517          	auipc	a0,0x1b
    80001f9e:	b7650513          	add	a0,a0,-1162 # 8001cb10 <__func__.1+0x318>
    80001fa2:	7c1180ef          	jal	8001af62 <printf>
    80001fa6:	4529                	li	a0,10
    80001fa8:	68d170ef          	jal	80019e34 <putchar>
    80001fac:	4405                	li	s0,1
    80001fae:	beb5                	j	80001b2a <check_xip_regs_3+0x9a>

0000000080001fb0 <interrupt_tests>:

bool interrupt_tests(){
    80001fb0:	1101                	add	sp,sp,-32

    TEST_START();
    80001fb2:	00019597          	auipc	a1,0x19
    80001fb6:	50658593          	add	a1,a1,1286 # 8001b4b8 <__func__.0>
    80001fba:	0001b517          	auipc	a0,0x1b
    80001fbe:	b2650513          	add	a0,a0,-1242 # 8001cae0 <__func__.1+0x2e8>
bool interrupt_tests(){
    80001fc2:	ec06                	sd	ra,24(sp)
    80001fc4:	e822                	sd	s0,16(sp)
    80001fc6:	e426                	sd	s1,8(sp)
    TEST_START();
    80001fc8:	79b180ef          	jal	8001af62 <printf>
    80001fcc:	4529                	li	a0,10
    80001fce:	667170ef          	jal	80019e34 <putchar>
    /**
     * Test trigerring VSSI without delegating it. 
     * It assumes it is already delegated in miedeleg (it should be hardwired)
     */
    
    goto_priv(PRIV_HS);
    80001fd2:	450d                	li	a0,3
    80001fd4:	b0bfe0ef          	jal	80000ade <goto_priv>
    CSRC(sstatus, SSTATUS_SPIE_BIT | SSTATUS_SIE_BIT); 
    80001fd8:	02200793          	li	a5,34
    80001fdc:	1007b073          	csrc	sstatus,a5
    CSRS(CSR_HIE, 0x4);
    80001fe0:	60426073          	csrs	hie,4
    CSRS(CSR_HIP, 0x4);
    80001fe4:	64426073          	csrs	hip,4
    TEST_SETUP_EXCEPT();
    80001fe8:	0ff0000f          	fence
    80001fec:	4785                	li	a5,1
    80001fee:	0003b417          	auipc	s0,0x3b
    80001ff2:	02240413          	add	s0,s0,34 # 8003d010 <excpt>
    80001ff6:	00f41023          	sh	a5,0(s0)
    80001ffa:	0003b797          	auipc	a5,0x3b
    80001ffe:	0407b723          	sd	zero,78(a5) # 8003d048 <excpt+0x38>
    80002002:	0ff0000f          	fence
    goto_priv(PRIV_VS);
    80002006:	4509                	li	a0,2
    80002008:	ad7fe0ef          	jal	80000ade <goto_priv>
    //CSRS(sstatus, SSTATUS_SIE_BIT);
    TEST_ASSERT("vs sw irq with no delegation", 
    8000200c:	08200593          	li	a1,130
    80002010:	0001b617          	auipc	a2,0x1b
    80002014:	ed860613          	add	a2,a2,-296 # 8001cee8 <__func__.1+0x6f0>
    80002018:	0001b517          	auipc	a0,0x1b
    8000201c:	ae050513          	add	a0,a0,-1312 # 8001caf8 <__func__.1+0x300>
    80002020:	743180ef          	jal	8001af62 <printf>
    80002024:	00144783          	lbu	a5,1(s0)
    80002028:	0001b597          	auipc	a1,0x1b
    8000202c:	aa858593          	add	a1,a1,-1368 # 8001cad0 <__func__.1+0x2d8>
    80002030:	c799                	beqz	a5,8000203e <interrupt_tests+0x8e>
    80002032:	57fd                	li	a5,-1
    80002034:	6418                	ld	a4,8(s0)
    80002036:	17fe                	sll	a5,a5,0x3f
    80002038:	0789                	add	a5,a5,2
    8000203a:	14f70663          	beq	a4,a5,80002186 <interrupt_tests+0x1d6>
    8000203e:	0001b517          	auipc	a0,0x1b
    80002042:	ad250513          	add	a0,a0,-1326 # 8001cb10 <__func__.1+0x318>
    80002046:	71d180ef          	jal	8001af62 <printf>
    8000204a:	00144783          	lbu	a5,1(s0)
    8000204e:	c799                	beqz	a5,8000205c <interrupt_tests+0xac>
    80002050:	57fd                	li	a5,-1
    80002052:	6418                	ld	a4,8(s0)
    80002054:	17fe                	sll	a5,a5,0x3f
    80002056:	0789                	add	a5,a5,2
    80002058:	12f70263          	beq	a4,a5,8000217c <interrupt_tests+0x1cc>
    8000205c:	0001b517          	auipc	a0,0x1b
    80002060:	abc50513          	add	a0,a0,-1348 # 8001cb18 <__func__.1+0x320>
    80002064:	6ff180ef          	jal	8001af62 <printf>
    80002068:	02900513          	li	a0,41
    8000206c:	5c9170ef          	jal	80019e34 <putchar>
    80002070:	4529                	li	a0,10
    80002072:	5c3170ef          	jal	80019e34 <putchar>
    80002076:	00144783          	lbu	a5,1(s0)
    8000207a:	4481                	li	s1,0
    8000207c:	c799                	beqz	a5,8000208a <interrupt_tests+0xda>
    8000207e:	57fd                	li	a5,-1
    80002080:	6418                	ld	a4,8(s0)
    80002082:	17fe                	sll	a5,a5,0x3f
    80002084:	0789                	add	a5,a5,2
    80002086:	10f70963          	beq	a4,a5,80002198 <interrupt_tests+0x1e8>
   
    /**
     * Test trigerring VSSI and delegating it. Should trap to VS with cause SSI.
     * It assumes it is already delegated in miedeleg (it should be hardwired)
     */
    goto_priv(PRIV_HS);
    8000208a:	450d                	li	a0,3
    8000208c:	a53fe0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HIDELEG, 0x4);
    80002090:	60326073          	csrs	hideleg,4
    CSRS(CSR_HIP, 0x4);
    80002094:	64426073          	csrs	hip,4
    TEST_SETUP_EXCEPT();
    80002098:	0ff0000f          	fence
    8000209c:	4785                	li	a5,1
    8000209e:	00f41023          	sh	a5,0(s0)
    800020a2:	0003b797          	auipc	a5,0x3b
    800020a6:	fa07b323          	sd	zero,-90(a5) # 8003d048 <excpt+0x38>
    800020aa:	0ff0000f          	fence
    goto_priv(PRIV_VS);
    800020ae:	4509                	li	a0,2
    800020b0:	a2ffe0ef          	jal	80000ade <goto_priv>
    CSRS(sie, 0x2);
    800020b4:	10416073          	csrs	sie,2
    CSRS(sstatus, 0x2);
    800020b8:	10016073          	csrs	sstatus,2
    TEST_ASSERT("vs sw irq with delegation", 
    800020bc:	08200593          	li	a1,130
    800020c0:	0001b617          	auipc	a2,0x1b
    800020c4:	e4860613          	add	a2,a2,-440 # 8001cf08 <__func__.1+0x710>
    800020c8:	0001b517          	auipc	a0,0x1b
    800020cc:	a3050513          	add	a0,a0,-1488 # 8001caf8 <__func__.1+0x300>
    800020d0:	693180ef          	jal	8001af62 <printf>
    800020d4:	00144783          	lbu	a5,1(s0)
    800020d8:	0001b597          	auipc	a1,0x1b
    800020dc:	9f858593          	add	a1,a1,-1544 # 8001cad0 <__func__.1+0x2d8>
    800020e0:	c799                	beqz	a5,800020ee <interrupt_tests+0x13e>
    800020e2:	57fd                	li	a5,-1
    800020e4:	6418                	ld	a4,8(s0)
    800020e6:	17fe                	sll	a5,a5,0x3f
    800020e8:	0785                	add	a5,a5,1
    800020ea:	0af70c63          	beq	a4,a5,800021a2 <interrupt_tests+0x1f2>
    800020ee:	0001b517          	auipc	a0,0x1b
    800020f2:	a2250513          	add	a0,a0,-1502 # 8001cb10 <__func__.1+0x318>
    800020f6:	66d180ef          	jal	8001af62 <printf>
    800020fa:	00144783          	lbu	a5,1(s0)
    800020fe:	c799                	beqz	a5,8000210c <interrupt_tests+0x15c>
    80002100:	57fd                	li	a5,-1
    80002102:	6418                	ld	a4,8(s0)
    80002104:	17fe                	sll	a5,a5,0x3f
    80002106:	0785                	add	a5,a5,1
    80002108:	06f70563          	beq	a4,a5,80002172 <interrupt_tests+0x1c2>
    8000210c:	0001b517          	auipc	a0,0x1b
    80002110:	a0c50513          	add	a0,a0,-1524 # 8001cb18 <__func__.1+0x320>
    80002114:	64f180ef          	jal	8001af62 <printf>
    80002118:	02900513          	li	a0,41
    8000211c:	519170ef          	jal	80019e34 <putchar>
    80002120:	4529                	li	a0,10
    80002122:	513170ef          	jal	80019e34 <putchar>
    80002126:	c0a1                	beqz	s1,80002166 <interrupt_tests+0x1b6>
    80002128:	00144483          	lbu	s1,1(s0)


    //M模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    

    TEST_END();
    8000212c:	0001b597          	auipc	a1,0x1b
    80002130:	9a458593          	add	a1,a1,-1628 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vs sw irq with delegation", 
    80002134:	c881                	beqz	s1,80002144 <interrupt_tests+0x194>
    80002136:	57fd                	li	a5,-1
    80002138:	6418                	ld	a4,8(s0)
    8000213a:	17fe                	sll	a5,a5,0x3f
    8000213c:	0785                	add	a5,a5,1
    8000213e:	06f70b63          	beq	a4,a5,800021b4 <interrupt_tests+0x204>
    80002142:	4481                	li	s1,0
    TEST_END();
    80002144:	0001b517          	auipc	a0,0x1b
    80002148:	a3450513          	add	a0,a0,-1484 # 8001cb78 <__func__.1+0x380>
    8000214c:	617180ef          	jal	8001af62 <printf>
    80002150:	4511                	li	a0,4
    80002152:	98dfe0ef          	jal	80000ade <goto_priv>
    80002156:	9d0ff0ef          	jal	80001326 <reset_state>
}
    8000215a:	60e2                	ld	ra,24(sp)
    8000215c:	6442                	ld	s0,16(sp)
    8000215e:	8526                	mv	a0,s1
    80002160:	64a2                	ld	s1,8(sp)
    80002162:	6105                	add	sp,sp,32
    80002164:	8082                	ret
    TEST_ASSERT("vs sw irq with delegation", 
    80002166:	4481                	li	s1,0
    TEST_END();
    80002168:	0001b597          	auipc	a1,0x1b
    8000216c:	96858593          	add	a1,a1,-1688 # 8001cad0 <__func__.1+0x2d8>
    80002170:	bfd1                	j	80002144 <interrupt_tests+0x194>
    TEST_ASSERT("vs sw irq with delegation", 
    80002172:	4058                	lw	a4,4(s0)
    80002174:	4789                	li	a5,2
    80002176:	f8f71be3          	bne	a4,a5,8000210c <interrupt_tests+0x15c>
    8000217a:	b75d                	j	80002120 <interrupt_tests+0x170>
    TEST_ASSERT("vs sw irq with no delegation", 
    8000217c:	4058                	lw	a4,4(s0)
    8000217e:	478d                	li	a5,3
    80002180:	ecf71ee3          	bne	a4,a5,8000205c <interrupt_tests+0xac>
    80002184:	b5f5                	j	80002070 <interrupt_tests+0xc0>
    80002186:	4058                	lw	a4,4(s0)
    80002188:	478d                	li	a5,3
    8000218a:	eaf71ae3          	bne	a4,a5,8000203e <interrupt_tests+0x8e>
    8000218e:	0001b597          	auipc	a1,0x1b
    80002192:	93258593          	add	a1,a1,-1742 # 8001cac0 <__func__.1+0x2c8>
    80002196:	b565                	j	8000203e <interrupt_tests+0x8e>
    80002198:	4044                	lw	s1,4(s0)
    8000219a:	14f5                	add	s1,s1,-3
    8000219c:	0014b493          	seqz	s1,s1
    800021a0:	b5ed                	j	8000208a <interrupt_tests+0xda>
    TEST_ASSERT("vs sw irq with delegation", 
    800021a2:	4058                	lw	a4,4(s0)
    800021a4:	4789                	li	a5,2
    800021a6:	f4f714e3          	bne	a4,a5,800020ee <interrupt_tests+0x13e>
    800021aa:	0001b597          	auipc	a1,0x1b
    800021ae:	91658593          	add	a1,a1,-1770 # 8001cac0 <__func__.1+0x2c8>
    800021b2:	bf35                	j	800020ee <interrupt_tests+0x13e>
    800021b4:	4058                	lw	a4,4(s0)
    800021b6:	4789                	li	a5,2
    800021b8:	f8f715e3          	bne	a4,a5,80002142 <interrupt_tests+0x192>
    TEST_END();
    800021bc:	0001b597          	auipc	a1,0x1b
    800021c0:	90458593          	add	a1,a1,-1788 # 8001cac0 <__func__.1+0x2c8>
    800021c4:	b741                	j	80002144 <interrupt_tests+0x194>

00000000800021c6 <two_stage_translation>:

static inline void touch(uintptr_t addr){
    touchwrite(addr);
}

bool two_stage_translation(){
    800021c6:	7139                	add	sp,sp,-64
    
    TEST_START();
    800021c8:	00019597          	auipc	a1,0x19
    800021cc:	30058593          	add	a1,a1,768 # 8001b4c8 <__func__.18>
    800021d0:	0001b517          	auipc	a0,0x1b
    800021d4:	91050513          	add	a0,a0,-1776 # 8001cae0 <__func__.1+0x2e8>
bool two_stage_translation(){
    800021d8:	fc06                	sd	ra,56(sp)
    800021da:	f822                	sd	s0,48(sp)
    800021dc:	f426                	sd	s1,40(sp)
    800021de:	f04a                	sd	s2,32(sp)
    800021e0:	ec4e                	sd	s3,24(sp)
    TEST_START();
    800021e2:	581180ef          	jal	8001af62 <printf>
    800021e6:	4529                	li	a0,10
    800021e8:	44d170ef          	jal	80019e34 <putchar>
static inline uint8_t read8(uintptr_t addr){
    return *((volatile uint8_t*) addr);    
}

static inline void write64(uintptr_t addr, uint64_t val){
    *((volatile uint64_t*) addr) = val;
    800021ec:	000887b7          	lui	a5,0x88
    800021f0:	2201b737          	lui	a4,0x2201b
    800021f4:	070a                	sll	a4,a4,0x2
    800021f6:	44c5                	li	s1,17
    800021f8:	06d78793          	add	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    800021fc:	07b2                	sll	a5,a5,0xc
    800021fe:	e304                	sd	s1,0(a4)
    80002200:	02200913          	li	s2,34
    80002204:	0127b023          	sd	s2,0(a5)
    write64(addr2, 0x22);

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    80002208:	450d                	li	a0,3
    8000220a:	8d5fe0ef          	jal	80000ade <goto_priv>
    hspt_init();
    8000220e:	bd2fe0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80002212:	e14fe0ef          	jal	80000826 <hpt_init>

    /**
     * Setup guest page tables.
     */
    goto_priv(PRIV_VS);
    80002216:	4509                	li	a0,2
    80002218:	8c7fe0ef          	jal	80000ade <goto_priv>
    vspt_init();
    8000221c:	c98fe0ef          	jal	800006b4 <vspt_init>
    return *((volatile uint64_t*) addr);
    80002220:	4001b7b7          	lui	a5,0x4001b
    80002224:	078a                	sll	a5,a5,0x2
    80002226:	0007b983          	ld	s3,0(a5) # 4001b000 <STACK_SIZE+0x3ff1b000>
    8000222a:	001007b7          	lui	a5,0x100
    8000222e:	06d78793          	add	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002232:	07b2                	sll	a5,a5,0xc

    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002234:	0001b617          	auipc	a2,0x1b
    80002238:	cf460613          	add	a2,a2,-780 # 8001cf28 <__func__.1+0x730>
    8000223c:	08200593          	li	a1,130
    80002240:	0001b517          	auipc	a0,0x1b
    80002244:	8b850513          	add	a0,a0,-1864 # 8001caf8 <__func__.1+0x300>
    80002248:	6380                	ld	s0,0(a5)
    8000224a:	519180ef          	jal	8001af62 <printf>
    8000224e:	3a998263          	beq	s3,s1,800025f2 <two_stage_translation+0x42c>
    80002252:	0001b597          	auipc	a1,0x1b
    80002256:	87e58593          	add	a1,a1,-1922 # 8001cad0 <__func__.1+0x2d8>
    8000225a:	0001b517          	auipc	a0,0x1b
    8000225e:	8b650513          	add	a0,a0,-1866 # 8001cb10 <__func__.1+0x318>
    80002262:	501180ef          	jal	8001af62 <printf>
    80002266:	0001b517          	auipc	a0,0x1b
    8000226a:	8b250513          	add	a0,a0,-1870 # 8001cb18 <__func__.1+0x320>
    8000226e:	4f5180ef          	jal	8001af62 <printf>
    80002272:	02900513          	li	a0,41
    80002276:	3bf170ef          	jal	80019e34 <putchar>
    8000227a:	4529                	li	a0,10
    8000227c:	3b9170ef          	jal	80019e34 <putchar>
    80002280:	4401                	li	s0,0
    
    goto_priv(PRIV_HS);
    80002282:	450d                	li	a0,3
    80002284:	85bfe0ef          	jal	80000ade <goto_priv>
    hpt_switch();
    80002288:	f4cfe0ef          	jal	800009d4 <hpt_switch>
    asm volatile(
    8000228c:	22000073          	.4byte	0x22000073
    asm volatile(
    80002290:	62000073          	.4byte	0x62000073
    hfence();
    goto_priv(PRIV_VS);
    80002294:	4509                	li	a0,2
    80002296:	849fe0ef          	jal	80000ade <goto_priv>
    8000229a:	4001b7b7          	lui	a5,0x4001b
    8000229e:	078a                	sll	a5,a5,0x2
    800022a0:	0007b903          	ld	s2,0(a5) # 4001b000 <STACK_SIZE+0x3ff1b000>
    800022a4:	001007b7          	lui	a5,0x100
    800022a8:	06d78793          	add	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    800022ac:	07b2                	sll	a5,a5,0xc
    check1 = read64(vaddr1) == 0x22;
    check2 = read64(vaddr2) == 0x11;   
    // INFO("0%lx 0x%lx", read64(vaddr1), read64(vaddr2));
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    800022ae:	0001b617          	auipc	a2,0x1b
    800022b2:	c9260613          	add	a2,a2,-878 # 8001cf40 <__func__.1+0x748>
    800022b6:	08200593          	li	a1,130
    800022ba:	0001b517          	auipc	a0,0x1b
    800022be:	83e50513          	add	a0,a0,-1986 # 8001caf8 <__func__.1+0x300>
    800022c2:	6384                	ld	s1,0(a5)
    800022c4:	49f180ef          	jal	8001af62 <printf>
    800022c8:	02200793          	li	a5,34
    800022cc:	2ef90363          	beq	s2,a5,800025b2 <two_stage_translation+0x3ec>
    800022d0:	0001b597          	auipc	a1,0x1b
    800022d4:	80058593          	add	a1,a1,-2048 # 8001cad0 <__func__.1+0x2d8>
    800022d8:	0001b517          	auipc	a0,0x1b
    800022dc:	83850513          	add	a0,a0,-1992 # 8001cb10 <__func__.1+0x318>
    800022e0:	483180ef          	jal	8001af62 <printf>
    800022e4:	0001b517          	auipc	a0,0x1b
    800022e8:	83450513          	add	a0,a0,-1996 # 8001cb18 <__func__.1+0x320>
    800022ec:	477180ef          	jal	8001af62 <printf>
    800022f0:	02900513          	li	a0,41
    800022f4:	341170ef          	jal	80019e34 <putchar>
    800022f8:	4529                	li	a0,10
    800022fa:	33b170ef          	jal	80019e34 <putchar>
    800022fe:	4401                	li	s0,0

    vspt_switch();
    80002300:	ebafe0ef          	jal	800009ba <vspt_switch>
    asm volatile ("sfence.vma \n\t");
    80002304:	12000073          	sfence.vma
    80002308:	4001b7b7          	lui	a5,0x4001b
    8000230c:	078a                	sll	a5,a5,0x2
    8000230e:	0007b903          	ld	s2,0(a5) # 4001b000 <STACK_SIZE+0x3ff1b000>
    80002312:	001007b7          	lui	a5,0x100
    80002316:	06d78793          	add	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    8000231a:	07b2                	sll	a5,a5,0xc
    sfence();
    check1 = read64(vaddr1) == 0x11;
    check2 = read64(vaddr2) == 0x22;   
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    8000231c:	0001b617          	auipc	a2,0x1b
    80002320:	c5c60613          	add	a2,a2,-932 # 8001cf78 <__func__.1+0x780>
    80002324:	08200593          	li	a1,130
    80002328:	0001a517          	auipc	a0,0x1a
    8000232c:	7d050513          	add	a0,a0,2000 # 8001caf8 <__func__.1+0x300>
    80002330:	6384                	ld	s1,0(a5)
    80002332:	431180ef          	jal	8001af62 <printf>
    80002336:	47c5                	li	a5,17
    80002338:	30f90963          	beq	s2,a5,8000264a <two_stage_translation+0x484>
    8000233c:	0001a597          	auipc	a1,0x1a
    80002340:	79458593          	add	a1,a1,1940 # 8001cad0 <__func__.1+0x2d8>
    80002344:	0001a517          	auipc	a0,0x1a
    80002348:	7cc50513          	add	a0,a0,1996 # 8001cb10 <__func__.1+0x318>
    8000234c:	417180ef          	jal	8001af62 <printf>
    80002350:	0001a517          	auipc	a0,0x1a
    80002354:	7c850513          	add	a0,a0,1992 # 8001cb18 <__func__.1+0x320>
    80002358:	40b180ef          	jal	8001af62 <printf>
    8000235c:	02900513          	li	a0,41
    80002360:	2d5170ef          	jal	80019e34 <putchar>
    80002364:	4529                	li	a0,10
    80002366:	2cf170ef          	jal	80019e34 <putchar>
    8000236a:	4481                	li	s1,0

    goto_priv(PRIV_M); 
    8000236c:	4511                	li	a0,4
    8000236e:	f70fe0ef          	jal	80000ade <goto_priv>
    CSRS(medeleg, 1ull << CAUSE_LGPF);
    80002372:	002007b7          	lui	a5,0x200
    80002376:	3027a073          	csrs	medeleg,a5
    goto_priv(PRIV_VS);
    8000237a:	4509                	li	a0,2
    8000237c:	f62fe0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80002380:	0ff0000f          	fence
    80002384:	4785                	li	a5,1
    80002386:	0003b417          	auipc	s0,0x3b
    8000238a:	c8a40413          	add	s0,s0,-886 # 8003d010 <excpt>
    8000238e:	00f41023          	sh	a5,0(s0)
    80002392:	0003b797          	auipc	a5,0x3b
    80002396:	ca07bb23          	sd	zero,-842(a5) # 8003d048 <excpt+0x38>
    8000239a:	0ff0000f          	fence
    8000239e:	001007b7          	lui	a5,0x100
    800023a2:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800023a6:	07b2                	sll	a5,a5,0xc
    800023a8:	639c                	ld	a5,0(a5)
    read64(vs_page_base(VSRWX_GI));    
    TEST_ASSERT(
    800023aa:	08200593          	li	a1,130
    800023ae:	0001b617          	auipc	a2,0x1b
    800023b2:	c0260613          	add	a2,a2,-1022 # 8001cfb0 <__func__.1+0x7b8>
    800023b6:	0001a517          	auipc	a0,0x1a
    800023ba:	74250513          	add	a0,a0,1858 # 8001caf8 <__func__.1+0x300>
    800023be:	3a5180ef          	jal	8001af62 <printf>
    800023c2:	00144783          	lbu	a5,1(s0)
    800023c6:	0001a597          	auipc	a1,0x1a
    800023ca:	70a58593          	add	a1,a1,1802 # 8001cad0 <__func__.1+0x2d8>
    800023ce:	c789                	beqz	a5,800023d8 <two_stage_translation+0x212>
    800023d0:	6418                	ld	a4,8(s0)
    800023d2:	47d5                	li	a5,21
    800023d4:	3af70f63          	beq	a4,a5,80002792 <two_stage_translation+0x5cc>
    800023d8:	0001a517          	auipc	a0,0x1a
    800023dc:	73850513          	add	a0,a0,1848 # 8001cb10 <__func__.1+0x318>
    800023e0:	383180ef          	jal	8001af62 <printf>
    800023e4:	00144783          	lbu	a5,1(s0)
    800023e8:	c789                	beqz	a5,800023f2 <two_stage_translation+0x22c>
    800023ea:	6418                	ld	a4,8(s0)
    800023ec:	47d5                	li	a5,21
    800023ee:	2af70063          	beq	a4,a5,8000268e <two_stage_translation+0x4c8>
    800023f2:	0001a517          	auipc	a0,0x1a
    800023f6:	72650513          	add	a0,a0,1830 # 8001cb18 <__func__.1+0x320>
    800023fa:	369180ef          	jal	8001af62 <printf>
    800023fe:	02900513          	li	a0,41
    80002402:	233170ef          	jal	80019e34 <putchar>
    80002406:	4529                	li	a0,10
    80002408:	22d170ef          	jal	80019e34 <putchar>
    8000240c:	c889                	beqz	s1,8000241e <two_stage_translation+0x258>
    8000240e:	00144783          	lbu	a5,1(s0)
    80002412:	4481                	li	s1,0
    80002414:	c789                	beqz	a5,8000241e <two_stage_translation+0x258>
    80002416:	6418                	ld	a4,8(s0)
    80002418:	47d5                	li	a5,21
    8000241a:	30f70a63          	beq	a4,a5,8000272e <two_stage_translation+0x568>
        excpt.priv == PRIV_HS &&
        excpt.gva == true &&
        excpt.xpv == true
    );

    TEST_SETUP_EXCEPT();
    8000241e:	0ff0000f          	fence
    80002422:	4785                	li	a5,1
    80002424:	00f41023          	sh	a5,0(s0)
    80002428:	0003b797          	auipc	a5,0x3b
    8000242c:	c207b023          	sd	zero,-992(a5) # 8003d048 <excpt+0x38>
    80002430:	0ff0000f          	fence
    TEST_EXEC_EXCEPT(vs_page_base(VSRWX_GI)); 
    80002434:	001007b7          	lui	a5,0x100
    80002438:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000243c:	07b2                	sll	a5,a5,0xc
    8000243e:	00000297          	auipc	t0,0x0
    80002442:	00c28293          	add	t0,t0,12 # 8000244a <two_stage_translation+0x284>
    80002446:	02543c23          	sd	t0,56(s0)
    8000244a:	8782                	jr	a5
    TEST_ASSERT(
    8000244c:	08200593          	li	a1,130
    80002450:	0001b617          	auipc	a2,0x1b
    80002454:	b9060613          	add	a2,a2,-1136 # 8001cfe0 <__func__.1+0x7e8>
    80002458:	0001a517          	auipc	a0,0x1a
    8000245c:	6a050513          	add	a0,a0,1696 # 8001caf8 <__func__.1+0x300>
    80002460:	303180ef          	jal	8001af62 <printf>
    80002464:	00144783          	lbu	a5,1(s0)
    80002468:	0001a597          	auipc	a1,0x1a
    8000246c:	66858593          	add	a1,a1,1640 # 8001cad0 <__func__.1+0x2d8>
    80002470:	c789                	beqz	a5,8000247a <two_stage_translation+0x2b4>
    80002472:	6418                	ld	a4,8(s0)
    80002474:	47d1                	li	a5,20
    80002476:	36f70163          	beq	a4,a5,800027d8 <two_stage_translation+0x612>
    8000247a:	0001a517          	auipc	a0,0x1a
    8000247e:	69650513          	add	a0,a0,1686 # 8001cb10 <__func__.1+0x318>
    80002482:	2e1180ef          	jal	8001af62 <printf>
    80002486:	00144783          	lbu	a5,1(s0)
    8000248a:	c789                	beqz	a5,80002494 <two_stage_translation+0x2ce>
    8000248c:	6418                	ld	a4,8(s0)
    8000248e:	47d1                	li	a5,20
    80002490:	22f70363          	beq	a4,a5,800026b6 <two_stage_translation+0x4f0>
    80002494:	0001a517          	auipc	a0,0x1a
    80002498:	68450513          	add	a0,a0,1668 # 8001cb18 <__func__.1+0x320>
    8000249c:	2c7180ef          	jal	8001af62 <printf>
    800024a0:	02900513          	li	a0,41
    800024a4:	191170ef          	jal	80019e34 <putchar>
    800024a8:	4529                	li	a0,10
    800024aa:	18b170ef          	jal	80019e34 <putchar>
    800024ae:	c889                	beqz	s1,800024c0 <two_stage_translation+0x2fa>
    800024b0:	00144783          	lbu	a5,1(s0)
    800024b4:	4481                	li	s1,0
    800024b6:	c789                	beqz	a5,800024c0 <two_stage_translation+0x2fa>
    800024b8:	6418                	ld	a4,8(s0)
    800024ba:	47d1                	li	a5,20
    800024bc:	24f70763          	beq	a4,a5,8000270a <two_stage_translation+0x544>
        excpt.priv == PRIV_M  &&
        excpt.gva == true &&
        excpt.xpv == true
    );

    goto_priv(PRIV_M);
    800024c0:	4511                	li	a0,4
    800024c2:	e1cfe0ef          	jal	80000ade <goto_priv>
    CSRS(medeleg, 1 << CAUSE_LPF | 1 << CAUSE_LGPF);
    800024c6:	002027b7          	lui	a5,0x202
    800024ca:	3027a073          	csrs	medeleg,a5
    goto_priv(PRIV_HS); 
    800024ce:	450d                	li	a0,3
    800024d0:	e0efe0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HEDELEG, 1 << CAUSE_LPF);
    800024d4:	6789                	lui	a5,0x2
    800024d6:	6027a073          	csrs	hedeleg,a5
    goto_priv(PRIV_VS);
    800024da:	4509                	li	a0,2
    800024dc:	e02fe0ef          	jal	80000ade <goto_priv>
    800024e0:	12000073          	sfence.vma
    sfence();
    TEST_SETUP_EXCEPT();
    800024e4:	0ff0000f          	fence
    800024e8:	4785                	li	a5,1
    800024ea:	00f41023          	sh	a5,0(s0)
    800024ee:	0003b797          	auipc	a5,0x3b
    800024f2:	b407bd23          	sd	zero,-1190(a5) # 8003d048 <excpt+0x38>
    800024f6:	0ff0000f          	fence
    volatile uint64_t x = *(volatile uint64_t *)addr;
    800024fa:	400197b7          	lui	a5,0x40019
    800024fe:	078a                	sll	a5,a5,0x2
    80002500:	639c                	ld	a5,0(a5)
    touchread(vs_page_base(VSI_GI));    
    TEST_ASSERT(
    80002502:	08200593          	li	a1,130
    80002506:	0001b617          	auipc	a2,0x1b
    8000250a:	b1a60613          	add	a2,a2,-1254 # 8001d020 <__func__.1+0x828>
    8000250e:	0001a517          	auipc	a0,0x1a
    80002512:	5ea50513          	add	a0,a0,1514 # 8001caf8 <__func__.1+0x300>
    volatile uint64_t x = *(volatile uint64_t *)addr;
    80002516:	e43e                	sd	a5,8(sp)
    TEST_ASSERT(
    80002518:	24b180ef          	jal	8001af62 <printf>
    8000251c:	00144783          	lbu	a5,1(s0)
    80002520:	0001a597          	auipc	a1,0x1a
    80002524:	5b058593          	add	a1,a1,1456 # 8001cad0 <__func__.1+0x2d8>
    80002528:	c789                	beqz	a5,80002532 <two_stage_translation+0x36c>
    8000252a:	6418                	ld	a4,8(s0)
    8000252c:	47b5                	li	a5,13
    8000252e:	28f70863          	beq	a4,a5,800027be <two_stage_translation+0x5f8>
    80002532:	0001a517          	auipc	a0,0x1a
    80002536:	5de50513          	add	a0,a0,1502 # 8001cb10 <__func__.1+0x318>
    8000253a:	229180ef          	jal	8001af62 <printf>
    8000253e:	00144783          	lbu	a5,1(s0)
    80002542:	c789                	beqz	a5,8000254c <two_stage_translation+0x386>
    80002544:	6418                	ld	a4,8(s0)
    80002546:	47b5                	li	a5,13
    80002548:	18f70b63          	beq	a4,a5,800026de <two_stage_translation+0x518>
    8000254c:	0001a517          	auipc	a0,0x1a
    80002550:	5cc50513          	add	a0,a0,1484 # 8001cb18 <__func__.1+0x320>
    80002554:	20f180ef          	jal	8001af62 <printf>
    80002558:	02900513          	li	a0,41
    8000255c:	0d9170ef          	jal	80019e34 <putchar>
    80002560:	4529                	li	a0,10
    80002562:	0d3170ef          	jal	80019e34 <putchar>
    80002566:	c0a1                	beqz	s1,800025a6 <two_stage_translation+0x3e0>
    80002568:	00144483          	lbu	s1,1(s0)
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_VS && 
        excpt.gva == false
    );

    TEST_END();
    8000256c:	0001a597          	auipc	a1,0x1a
    80002570:	56458593          	add	a1,a1,1380 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT(
    80002574:	c491                	beqz	s1,80002580 <two_stage_translation+0x3ba>
    80002576:	6418                	ld	a4,8(s0)
    80002578:	47b5                	li	a5,13
    8000257a:	16f70b63          	beq	a4,a5,800026f0 <two_stage_translation+0x52a>
    8000257e:	4481                	li	s1,0
    TEST_END();
    80002580:	0001a517          	auipc	a0,0x1a
    80002584:	5f850513          	add	a0,a0,1528 # 8001cb78 <__func__.1+0x380>
    80002588:	1db180ef          	jal	8001af62 <printf>
    8000258c:	4511                	li	a0,4
    8000258e:	d50fe0ef          	jal	80000ade <goto_priv>
    80002592:	d95fe0ef          	jal	80001326 <reset_state>
}
    80002596:	70e2                	ld	ra,56(sp)
    80002598:	7442                	ld	s0,48(sp)
    8000259a:	7902                	ld	s2,32(sp)
    8000259c:	69e2                	ld	s3,24(sp)
    8000259e:	8526                	mv	a0,s1
    800025a0:	74a2                	ld	s1,40(sp)
    800025a2:	6121                	add	sp,sp,64
    800025a4:	8082                	ret
    TEST_ASSERT(
    800025a6:	4481                	li	s1,0
    TEST_END();
    800025a8:	0001a597          	auipc	a1,0x1a
    800025ac:	52858593          	add	a1,a1,1320 # 8001cad0 <__func__.1+0x2d8>
    800025b0:	bfc1                	j	80002580 <two_stage_translation+0x3ba>
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    800025b2:	47c5                	li	a5,17
    800025b4:	1af48f63          	beq	s1,a5,80002772 <two_stage_translation+0x5ac>
    800025b8:	0001a597          	auipc	a1,0x1a
    800025bc:	51858593          	add	a1,a1,1304 # 8001cad0 <__func__.1+0x2d8>
    800025c0:	0001a517          	auipc	a0,0x1a
    800025c4:	55050513          	add	a0,a0,1360 # 8001cb10 <__func__.1+0x318>
    800025c8:	19b180ef          	jal	8001af62 <printf>
    800025cc:	0001a517          	auipc	a0,0x1a
    800025d0:	54c50513          	add	a0,a0,1356 # 8001cb18 <__func__.1+0x320>
    800025d4:	18f180ef          	jal	8001af62 <printf>
    800025d8:	02900513          	li	a0,41
    800025dc:	059170ef          	jal	80019e34 <putchar>
    800025e0:	4529                	li	a0,10
    800025e2:	053170ef          	jal	80019e34 <putchar>
    800025e6:	d0040ce3          	beqz	s0,800022fe <two_stage_translation+0x138>
    800025ea:	14bd                	add	s1,s1,-17
    800025ec:	0014b413          	seqz	s0,s1
    800025f0:	bb01                	j	80002300 <two_stage_translation+0x13a>
    TEST_ASSERT("vs gets right values", check1 && check2);
    800025f2:	03240e63          	beq	s0,s2,8000262e <two_stage_translation+0x468>
    800025f6:	0001a597          	auipc	a1,0x1a
    800025fa:	4da58593          	add	a1,a1,1242 # 8001cad0 <__func__.1+0x2d8>
    800025fe:	0001a517          	auipc	a0,0x1a
    80002602:	51250513          	add	a0,a0,1298 # 8001cb10 <__func__.1+0x318>
    80002606:	15d180ef          	jal	8001af62 <printf>
    8000260a:	0001a517          	auipc	a0,0x1a
    8000260e:	50e50513          	add	a0,a0,1294 # 8001cb18 <__func__.1+0x320>
    80002612:	151180ef          	jal	8001af62 <printf>
    80002616:	02900513          	li	a0,41
    8000261a:	01b170ef          	jal	80019e34 <putchar>
    8000261e:	4529                	li	a0,10
    80002620:	015170ef          	jal	80019e34 <putchar>
    80002624:	fde40413          	add	s0,s0,-34
    80002628:	00143413          	seqz	s0,s0
    8000262c:	b999                	j	80002282 <two_stage_translation+0xbc>
    8000262e:	0001a597          	auipc	a1,0x1a
    80002632:	49258593          	add	a1,a1,1170 # 8001cac0 <__func__.1+0x2c8>
    80002636:	0001a517          	auipc	a0,0x1a
    8000263a:	4da50513          	add	a0,a0,1242 # 8001cb10 <__func__.1+0x318>
    8000263e:	125180ef          	jal	8001af62 <printf>
    80002642:	4529                	li	a0,10
    80002644:	7f0170ef          	jal	80019e34 <putchar>
    80002648:	bff1                	j	80002624 <two_stage_translation+0x45e>
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    8000264a:	02200793          	li	a5,34
    8000264e:	10f48263          	beq	s1,a5,80002752 <two_stage_translation+0x58c>
    80002652:	0001a597          	auipc	a1,0x1a
    80002656:	47e58593          	add	a1,a1,1150 # 8001cad0 <__func__.1+0x2d8>
    8000265a:	0001a517          	auipc	a0,0x1a
    8000265e:	4b650513          	add	a0,a0,1206 # 8001cb10 <__func__.1+0x318>
    80002662:	101180ef          	jal	8001af62 <printf>
    80002666:	0001a517          	auipc	a0,0x1a
    8000266a:	4b250513          	add	a0,a0,1202 # 8001cb18 <__func__.1+0x320>
    8000266e:	0f5180ef          	jal	8001af62 <printf>
    80002672:	02900513          	li	a0,41
    80002676:	7be170ef          	jal	80019e34 <putchar>
    8000267a:	4529                	li	a0,10
    8000267c:	7b8170ef          	jal	80019e34 <putchar>
    80002680:	ce0405e3          	beqz	s0,8000236a <two_stage_translation+0x1a4>
    80002684:	fde48493          	add	s1,s1,-34
    80002688:	0014b493          	seqz	s1,s1
    8000268c:	b1c5                	j	8000236c <two_stage_translation+0x1a6>
    TEST_ASSERT(
    8000268e:	7418                	ld	a4,40(s0)
    80002690:	400197b7          	lui	a5,0x40019
    80002694:	40078793          	add	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002698:	d4f71de3          	bne	a4,a5,800023f2 <two_stage_translation+0x22c>
    8000269c:	4058                	lw	a4,4(s0)
    8000269e:	478d                	li	a5,3
    800026a0:	d4f719e3          	bne	a4,a5,800023f2 <two_stage_translation+0x22c>
    800026a4:	03044783          	lbu	a5,48(s0)
    800026a8:	d40785e3          	beqz	a5,800023f2 <two_stage_translation+0x22c>
    800026ac:	03144783          	lbu	a5,49(s0)
    800026b0:	d4079be3          	bnez	a5,80002406 <two_stage_translation+0x240>
    800026b4:	bb3d                	j	800023f2 <two_stage_translation+0x22c>
    TEST_ASSERT(
    800026b6:	7418                	ld	a4,40(s0)
    800026b8:	400197b7          	lui	a5,0x40019
    800026bc:	40078793          	add	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    800026c0:	dcf71ae3          	bne	a4,a5,80002494 <two_stage_translation+0x2ce>
    800026c4:	4058                	lw	a4,4(s0)
    800026c6:	4791                	li	a5,4
    800026c8:	dcf716e3          	bne	a4,a5,80002494 <two_stage_translation+0x2ce>
    800026cc:	03044783          	lbu	a5,48(s0)
    800026d0:	dc0782e3          	beqz	a5,80002494 <two_stage_translation+0x2ce>
    800026d4:	03144783          	lbu	a5,49(s0)
    800026d8:	dc0798e3          	bnez	a5,800024a8 <two_stage_translation+0x2e2>
    800026dc:	bb65                	j	80002494 <two_stage_translation+0x2ce>
    TEST_ASSERT(
    800026de:	4058                	lw	a4,4(s0)
    800026e0:	4789                	li	a5,2
    800026e2:	e6f715e3          	bne	a4,a5,8000254c <two_stage_translation+0x386>
    800026e6:	03044783          	lbu	a5,48(s0)
    800026ea:	e6078be3          	beqz	a5,80002560 <two_stage_translation+0x39a>
    800026ee:	bdb9                	j	8000254c <two_stage_translation+0x386>
    800026f0:	4058                	lw	a4,4(s0)
    800026f2:	4789                	li	a5,2
    800026f4:	e8f715e3          	bne	a4,a5,8000257e <two_stage_translation+0x3b8>
    800026f8:	03044783          	lbu	a5,48(s0)
    800026fc:	e80791e3          	bnez	a5,8000257e <two_stage_translation+0x3b8>
    TEST_END();
    80002700:	0001a597          	auipc	a1,0x1a
    80002704:	3c058593          	add	a1,a1,960 # 8001cac0 <__func__.1+0x2c8>
    80002708:	bda5                	j	80002580 <two_stage_translation+0x3ba>
    TEST_ASSERT(
    8000270a:	7418                	ld	a4,40(s0)
    8000270c:	400197b7          	lui	a5,0x40019
    80002710:	40078793          	add	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002714:	daf716e3          	bne	a4,a5,800024c0 <two_stage_translation+0x2fa>
    80002718:	4058                	lw	a4,4(s0)
    8000271a:	4791                	li	a5,4
    8000271c:	daf712e3          	bne	a4,a5,800024c0 <two_stage_translation+0x2fa>
    80002720:	03045483          	lhu	s1,48(s0)
    80002724:	eff48493          	add	s1,s1,-257
    80002728:	0014b493          	seqz	s1,s1
    8000272c:	bb51                	j	800024c0 <two_stage_translation+0x2fa>
    TEST_ASSERT(
    8000272e:	7418                	ld	a4,40(s0)
    80002730:	400197b7          	lui	a5,0x40019
    80002734:	40078793          	add	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002738:	cef713e3          	bne	a4,a5,8000241e <two_stage_translation+0x258>
    8000273c:	4058                	lw	a4,4(s0)
    8000273e:	478d                	li	a5,3
    80002740:	ccf71fe3          	bne	a4,a5,8000241e <two_stage_translation+0x258>
    80002744:	03045483          	lhu	s1,48(s0)
    80002748:	eff48493          	add	s1,s1,-257
    8000274c:	0014b493          	seqz	s1,s1
    80002750:	b1f9                	j	8000241e <two_stage_translation+0x258>
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    80002752:	0001a597          	auipc	a1,0x1a
    80002756:	36e58593          	add	a1,a1,878 # 8001cac0 <__func__.1+0x2c8>
    8000275a:	0001a517          	auipc	a0,0x1a
    8000275e:	3b650513          	add	a0,a0,950 # 8001cb10 <__func__.1+0x318>
    80002762:	001180ef          	jal	8001af62 <printf>
    80002766:	4529                	li	a0,10
    80002768:	6cc170ef          	jal	80019e34 <putchar>
    8000276c:	be040fe3          	beqz	s0,8000236a <two_stage_translation+0x1a4>
    80002770:	bf11                	j	80002684 <two_stage_translation+0x4be>
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    80002772:	0001a597          	auipc	a1,0x1a
    80002776:	34e58593          	add	a1,a1,846 # 8001cac0 <__func__.1+0x2c8>
    8000277a:	0001a517          	auipc	a0,0x1a
    8000277e:	39650513          	add	a0,a0,918 # 8001cb10 <__func__.1+0x318>
    80002782:	7e0180ef          	jal	8001af62 <printf>
    80002786:	4529                	li	a0,10
    80002788:	6ac170ef          	jal	80019e34 <putchar>
    8000278c:	b60409e3          	beqz	s0,800022fe <two_stage_translation+0x138>
    80002790:	bda9                	j	800025ea <two_stage_translation+0x424>
    TEST_ASSERT(
    80002792:	7418                	ld	a4,40(s0)
    80002794:	400197b7          	lui	a5,0x40019
    80002798:	40078793          	add	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    8000279c:	c2f71ee3          	bne	a4,a5,800023d8 <two_stage_translation+0x212>
    800027a0:	4058                	lw	a4,4(s0)
    800027a2:	478d                	li	a5,3
    800027a4:	c2f71ae3          	bne	a4,a5,800023d8 <two_stage_translation+0x212>
    800027a8:	03045703          	lhu	a4,48(s0)
    800027ac:	10100793          	li	a5,257
    800027b0:	c2f714e3          	bne	a4,a5,800023d8 <two_stage_translation+0x212>
    800027b4:	0001a597          	auipc	a1,0x1a
    800027b8:	30c58593          	add	a1,a1,780 # 8001cac0 <__func__.1+0x2c8>
    800027bc:	b931                	j	800023d8 <two_stage_translation+0x212>
    TEST_ASSERT(
    800027be:	4058                	lw	a4,4(s0)
    800027c0:	4789                	li	a5,2
    800027c2:	d6f718e3          	bne	a4,a5,80002532 <two_stage_translation+0x36c>
    800027c6:	03044783          	lbu	a5,48(s0)
    800027ca:	d60794e3          	bnez	a5,80002532 <two_stage_translation+0x36c>
    800027ce:	0001a597          	auipc	a1,0x1a
    800027d2:	2f258593          	add	a1,a1,754 # 8001cac0 <__func__.1+0x2c8>
    800027d6:	bbb1                	j	80002532 <two_stage_translation+0x36c>
    TEST_ASSERT(
    800027d8:	7418                	ld	a4,40(s0)
    800027da:	400197b7          	lui	a5,0x40019
    800027de:	40078793          	add	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    800027e2:	c8f71ce3          	bne	a4,a5,8000247a <two_stage_translation+0x2b4>
    800027e6:	4058                	lw	a4,4(s0)
    800027e8:	4791                	li	a5,4
    800027ea:	c8f718e3          	bne	a4,a5,8000247a <two_stage_translation+0x2b4>
    800027ee:	03045703          	lhu	a4,48(s0)
    800027f2:	10100793          	li	a5,257
    800027f6:	c8f712e3          	bne	a4,a5,8000247a <two_stage_translation+0x2b4>
    800027fa:	0001a597          	auipc	a1,0x1a
    800027fe:	2c658593          	add	a1,a1,710 # 8001cac0 <__func__.1+0x2c8>
    80002802:	b9a5                	j	8000247a <two_stage_translation+0x2b4>

0000000080002804 <second_stage_only_translation>:

bool second_stage_only_translation(){
    80002804:	7179                	add	sp,sp,-48

    /**
     * Test only 2nd stage translation.
     */
    TEST_START();
    80002806:	00019597          	auipc	a1,0x19
    8000280a:	cda58593          	add	a1,a1,-806 # 8001b4e0 <__func__.15>
    8000280e:	0001a517          	auipc	a0,0x1a
    80002812:	2d250513          	add	a0,a0,722 # 8001cae0 <__func__.1+0x2e8>
bool second_stage_only_translation(){
    80002816:	f406                	sd	ra,40(sp)
    80002818:	ec26                	sd	s1,24(sp)
    8000281a:	e84a                	sd	s2,16(sp)
    8000281c:	f022                	sd	s0,32(sp)
    8000281e:	e44e                	sd	s3,8(sp)
    80002820:	e052                	sd	s4,0(sp)
    TEST_START();
    80002822:	740180ef          	jal	8001af62 <printf>
    80002826:	4529                	li	a0,10
    80002828:	60c170ef          	jal	80019e34 <putchar>
    *((volatile uint64_t*) addr) = val;
    8000282c:	000887b7          	lui	a5,0x88
    80002830:	2201b737          	lui	a4,0x2201b
    80002834:	44c5                	li	s1,17
    80002836:	070a                	sll	a4,a4,0x2
    80002838:	06d78793          	add	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    8000283c:	e304                	sd	s1,0(a4)
    8000283e:	02200913          	li	s2,34
    80002842:	07b2                	sll	a5,a5,0xc
    80002844:	0127b023          	sd	s2,0(a5)
    uintptr_t vaddr2 = vs_page_base(SWITCH2);
    write64(addr1, 0x11);
    write64(addr2, 0x22);   


    CSRS(medeleg, (1 << CAUSE_LGPF) | (1 << CAUSE_SGPF));
    80002848:	00a007b7          	lui	a5,0xa00
    8000284c:	3027a073          	csrs	medeleg,a5

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    80002850:	450d                	li	a0,3
    80002852:	a8cfe0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80002856:	d8bfd0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000285a:	fcdfd0ef          	jal	80000826 <hpt_init>
    
    goto_priv(PRIV_VS);
    8000285e:	4509                	li	a0,2
    80002860:	a7efe0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80002864:	0ff0000f          	fence
    80002868:	4785                	li	a5,1
    8000286a:	0003a417          	auipc	s0,0x3a
    8000286e:	7a640413          	add	s0,s0,1958 # 8003d010 <excpt>
    80002872:	00f41023          	sh	a5,0(s0)
    80002876:	0003a797          	auipc	a5,0x3a
    8000287a:	7c07b923          	sd	zero,2002(a5) # 8003d048 <excpt+0x38>
    8000287e:	0ff0000f          	fence
    return *((volatile uint64_t*) addr);
    80002882:	001007b7          	lui	a5,0x100
    80002886:	4001b737          	lui	a4,0x4001b
    8000288a:	06d78793          	add	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    8000288e:	07b2                	sll	a5,a5,0xc
    80002890:	070a                	sll	a4,a4,0x2
    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    80002892:	0001a617          	auipc	a2,0x1a
    80002896:	69660613          	add	a2,a2,1686 # 8001cf28 <__func__.1+0x730>
    8000289a:	08200593          	li	a1,130
    8000289e:	0001a517          	auipc	a0,0x1a
    800028a2:	25a50513          	add	a0,a0,602 # 8001caf8 <__func__.1+0x300>
    800028a6:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    800028aa:	0007ba03          	ld	s4,0(a5)
    800028ae:	6b4180ef          	jal	8001af62 <printf>
    800028b2:	00144783          	lbu	a5,1(s0)
    800028b6:	22079163          	bnez	a5,80002ad8 <second_stage_only_translation+0x2d4>
    800028ba:	2e998863          	beq	s3,s1,80002baa <second_stage_only_translation+0x3a6>
    800028be:	0001a597          	auipc	a1,0x1a
    800028c2:	21258593          	add	a1,a1,530 # 8001cad0 <__func__.1+0x2d8>
    800028c6:	0001a517          	auipc	a0,0x1a
    800028ca:	24a50513          	add	a0,a0,586 # 8001cb10 <__func__.1+0x318>
    800028ce:	694180ef          	jal	8001af62 <printf>
    800028d2:	0001a517          	auipc	a0,0x1a
    800028d6:	24650513          	add	a0,a0,582 # 8001cb18 <__func__.1+0x320>
    800028da:	688180ef          	jal	8001af62 <printf>
    800028de:	02900513          	li	a0,41
    800028e2:	552170ef          	jal	80019e34 <putchar>
    800028e6:	4529                	li	a0,10
    800028e8:	54c170ef          	jal	80019e34 <putchar>
    800028ec:	4481                	li	s1,0

    goto_priv(PRIV_HS);
    800028ee:	450d                	li	a0,3
    800028f0:	9eefe0ef          	jal	80000ade <goto_priv>
    hpt_switch();       //在nemu中，执行read64没有变，执行hlvd变化了
    800028f4:	8e0fe0ef          	jal	800009d4 <hpt_switch>
    asm volatile(
    800028f8:	22000073          	.4byte	0x22000073
    asm volatile(
    800028fc:	62000073          	.4byte	0x62000073
    hfence(); //l2tlb
    goto_priv(PRIV_VS);
    80002900:	4509                	li	a0,2
    80002902:	9dcfe0ef          	jal	80000ade <goto_priv>
    asm volatile ("sfence.vma \n\t");
    80002906:	12000073          	sfence.vma
    sfence(); //l1tlb
    TEST_SETUP_EXCEPT();
    8000290a:	0ff0000f          	fence
    8000290e:	4785                	li	a5,1
    80002910:	00f41023          	sh	a5,0(s0)
    80002914:	0003a797          	auipc	a5,0x3a
    80002918:	7207ba23          	sd	zero,1844(a5) # 8003d048 <excpt+0x38>
    8000291c:	0ff0000f          	fence
    80002920:	001007b7          	lui	a5,0x100
    80002924:	4001b737          	lui	a4,0x4001b
    80002928:	06d78793          	add	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    8000292c:	07b2                	sll	a5,a5,0xc
    8000292e:	070a                	sll	a4,a4,0x2
    check1 = read64(vaddr1) == 0x22;
    check2 = read64(vaddr2) == 0x11;   
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    80002930:	0001a617          	auipc	a2,0x1a
    80002934:	72860613          	add	a2,a2,1832 # 8001d058 <__func__.1+0x860>
    80002938:	08200593          	li	a1,130
    8000293c:	0001a517          	auipc	a0,0x1a
    80002940:	1bc50513          	add	a0,a0,444 # 8001caf8 <__func__.1+0x300>
    80002944:	00073903          	ld	s2,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    80002948:	0007b983          	ld	s3,0(a5)
    8000294c:	616180ef          	jal	8001af62 <printf>
    80002950:	00144783          	lbu	a5,1(s0)
    80002954:	1e079863          	bnez	a5,80002b44 <second_stage_only_translation+0x340>
    80002958:	02200793          	li	a5,34
    8000295c:	28f90e63          	beq	s2,a5,80002bf8 <second_stage_only_translation+0x3f4>
    80002960:	0001a597          	auipc	a1,0x1a
    80002964:	17058593          	add	a1,a1,368 # 8001cad0 <__func__.1+0x2d8>
    80002968:	0001a517          	auipc	a0,0x1a
    8000296c:	1a850513          	add	a0,a0,424 # 8001cb10 <__func__.1+0x318>
    80002970:	5f2180ef          	jal	8001af62 <printf>
    80002974:	0001a517          	auipc	a0,0x1a
    80002978:	1a450513          	add	a0,a0,420 # 8001cb18 <__func__.1+0x320>
    8000297c:	5e6180ef          	jal	8001af62 <printf>
    80002980:	02900513          	li	a0,41
    80002984:	4b0170ef          	jal	80019e34 <putchar>
    80002988:	4529                	li	a0,10
    8000298a:	4aa170ef          	jal	80019e34 <putchar>
    8000298e:	c881                	beqz	s1,8000299e <second_stage_only_translation+0x19a>
    80002990:	00144783          	lbu	a5,1(s0)
    80002994:	e789                	bnez	a5,8000299e <second_stage_only_translation+0x19a>
    80002996:	02200793          	li	a5,34
    8000299a:	1ef90363          	beq	s2,a5,80002b80 <second_stage_only_translation+0x37c>
    8000299e:	4481                	li	s1,0

    TEST_SETUP_EXCEPT();
    800029a0:	0ff0000f          	fence
    800029a4:	4785                	li	a5,1
    800029a6:	00f41023          	sh	a5,0(s0)
    800029aa:	0003a797          	auipc	a5,0x3a
    800029ae:	6807bf23          	sd	zero,1694(a5) # 8003d048 <excpt+0x38>
    800029b2:	0ff0000f          	fence
    800029b6:	001007b7          	lui	a5,0x100
    800029ba:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800029be:	07b2                	sll	a5,a5,0xc
    800029c0:	639c                	ld	a5,0(a5)
    (void) read64(vs_page_base(VSRWX_GI));  
    TEST_ASSERT(
    800029c2:	08200593          	li	a1,130
    800029c6:	0001a617          	auipc	a2,0x1a
    800029ca:	6ba60613          	add	a2,a2,1722 # 8001d080 <__func__.1+0x888>
    800029ce:	0001a517          	auipc	a0,0x1a
    800029d2:	12a50513          	add	a0,a0,298 # 8001caf8 <__func__.1+0x300>
    800029d6:	58c180ef          	jal	8001af62 <printf>
    800029da:	00144783          	lbu	a5,1(s0)
    800029de:	0001a597          	auipc	a1,0x1a
    800029e2:	0f258593          	add	a1,a1,242 # 8001cad0 <__func__.1+0x2d8>
    800029e6:	c789                	beqz	a5,800029f0 <second_stage_only_translation+0x1ec>
    800029e8:	6418                	ld	a4,8(s0)
    800029ea:	47d5                	li	a5,21
    800029ec:	22f70763          	beq	a4,a5,80002c1a <second_stage_only_translation+0x416>
    800029f0:	0001a517          	auipc	a0,0x1a
    800029f4:	12050513          	add	a0,a0,288 # 8001cb10 <__func__.1+0x318>
    800029f8:	56a180ef          	jal	8001af62 <printf>
    800029fc:	00144783          	lbu	a5,1(s0)
    80002a00:	c789                	beqz	a5,80002a0a <second_stage_only_translation+0x206>
    80002a02:	6418                	ld	a4,8(s0)
    80002a04:	47d5                	li	a5,21
    80002a06:	18f70d63          	beq	a4,a5,80002ba0 <second_stage_only_translation+0x39c>
    80002a0a:	0001a517          	auipc	a0,0x1a
    80002a0e:	10e50513          	add	a0,a0,270 # 8001cb18 <__func__.1+0x320>
    80002a12:	550180ef          	jal	8001af62 <printf>
    80002a16:	02900513          	li	a0,41
    80002a1a:	41a170ef          	jal	80019e34 <putchar>
    80002a1e:	4529                	li	a0,10
    80002a20:	414170ef          	jal	80019e34 <putchar>
    80002a24:	c889                	beqz	s1,80002a36 <second_stage_only_translation+0x232>
    80002a26:	00144783          	lbu	a5,1(s0)
    80002a2a:	4481                	li	s1,0
    80002a2c:	c789                	beqz	a5,80002a36 <second_stage_only_translation+0x232>
    80002a2e:	6418                	ld	a4,8(s0)
    80002a30:	47d5                	li	a5,21
    80002a32:	1af70e63          	beq	a4,a5,80002bee <second_stage_only_translation+0x3ea>
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        excpt.priv == PRIV_HS
    );

    TEST_SETUP_EXCEPT();
    80002a36:	0ff0000f          	fence
    80002a3a:	4785                	li	a5,1
    80002a3c:	00f41023          	sh	a5,0(s0)
    80002a40:	0003a797          	auipc	a5,0x3a
    80002a44:	6007b423          	sd	zero,1544(a5) # 8003d048 <excpt+0x38>
    80002a48:	0ff0000f          	fence
    80002a4c:	200007b7          	lui	a5,0x20000
    80002a50:	17fd                	add	a5,a5,-1 # 1fffffff <STACK_SIZE+0x1fefffff>
    80002a52:	07b2                	sll	a5,a5,0xc
    80002a54:	639c                	ld	a5,0(a5)
    read64(vs_page_base_limit(TOP));
    TEST_ASSERT(
    80002a56:	08200593          	li	a1,130
    80002a5a:	0001a617          	auipc	a2,0x1a
    80002a5e:	64e60613          	add	a2,a2,1614 # 8001d0a8 <__func__.1+0x8b0>
    80002a62:	0001a517          	auipc	a0,0x1a
    80002a66:	09650513          	add	a0,a0,150 # 8001caf8 <__func__.1+0x300>
    80002a6a:	4f8180ef          	jal	8001af62 <printf>
    80002a6e:	00144783          	lbu	a5,1(s0)
    80002a72:	0001a597          	auipc	a1,0x1a
    80002a76:	05e58593          	add	a1,a1,94 # 8001cad0 <__func__.1+0x2d8>
    80002a7a:	e789                	bnez	a5,80002a84 <second_stage_only_translation+0x280>
    80002a7c:	0001a597          	auipc	a1,0x1a
    80002a80:	04458593          	add	a1,a1,68 # 8001cac0 <__func__.1+0x2c8>
    80002a84:	0001a517          	auipc	a0,0x1a
    80002a88:	08c50513          	add	a0,a0,140 # 8001cb10 <__func__.1+0x318>
    80002a8c:	4d6180ef          	jal	8001af62 <printf>
    80002a90:	00144783          	lbu	a5,1(s0)
    80002a94:	0e079b63          	bnez	a5,80002b8a <second_stage_only_translation+0x386>
    80002a98:	4529                	li	a0,10
    80002a9a:	39a170ef          	jal	80019e34 <putchar>
    80002a9e:	ccc9                	beqz	s1,80002b38 <second_stage_only_translation+0x334>
    80002aa0:	00144783          	lbu	a5,1(s0)
    80002aa4:	ebd1                	bnez	a5,80002b38 <second_stage_only_translation+0x334>
    80002aa6:	4405                	li	s0,1
    //     "access top of guest pa space with high bits =/= 0", 
    //     excpt.triggered == true &&
    //     excpt.cause == CAUSE_LGPF
    // ); 

    TEST_END();
    80002aa8:	0001a597          	auipc	a1,0x1a
    80002aac:	01858593          	add	a1,a1,24 # 8001cac0 <__func__.1+0x2c8>
    80002ab0:	0001a517          	auipc	a0,0x1a
    80002ab4:	0c850513          	add	a0,a0,200 # 8001cb78 <__func__.1+0x380>
    80002ab8:	4aa180ef          	jal	8001af62 <printf>
    80002abc:	4511                	li	a0,4
    80002abe:	820fe0ef          	jal	80000ade <goto_priv>
    80002ac2:	865fe0ef          	jal	80001326 <reset_state>
}
    80002ac6:	70a2                	ld	ra,40(sp)
    80002ac8:	8522                	mv	a0,s0
    80002aca:	7402                	ld	s0,32(sp)
    80002acc:	64e2                	ld	s1,24(sp)
    80002ace:	6942                	ld	s2,16(sp)
    80002ad0:	69a2                	ld	s3,8(sp)
    80002ad2:	6a02                	ld	s4,0(sp)
    80002ad4:	6145                	add	sp,sp,48
    80002ad6:	8082                	ret
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    80002ad8:	0001a597          	auipc	a1,0x1a
    80002adc:	ff858593          	add	a1,a1,-8 # 8001cad0 <__func__.1+0x2d8>
    80002ae0:	0001a517          	auipc	a0,0x1a
    80002ae4:	03050513          	add	a0,a0,48 # 8001cb10 <__func__.1+0x318>
    80002ae8:	47a180ef          	jal	8001af62 <printf>
    80002aec:	00144783          	lbu	a5,1(s0)
    80002af0:	e385                	bnez	a5,80002b10 <second_stage_only_translation+0x30c>
    80002af2:	de9990e3          	bne	s3,s1,800028d2 <second_stage_only_translation+0xce>
    80002af6:	0d2a1663          	bne	s4,s2,80002bc2 <second_stage_only_translation+0x3be>
    80002afa:	4529                	li	a0,10
    80002afc:	338170ef          	jal	80019e34 <putchar>
    80002b00:	00144783          	lbu	a5,1(s0)
    80002b04:	de0794e3          	bnez	a5,800028ec <second_stage_only_translation+0xe8>
    80002b08:	19bd                	add	s3,s3,-17
    80002b0a:	0019b493          	seqz	s1,s3
    80002b0e:	b3c5                	j	800028ee <second_stage_only_translation+0xea>
    80002b10:	0001a517          	auipc	a0,0x1a
    80002b14:	00850513          	add	a0,a0,8 # 8001cb18 <__func__.1+0x320>
    80002b18:	44a180ef          	jal	8001af62 <printf>
    80002b1c:	02900513          	li	a0,41
    80002b20:	314170ef          	jal	80019e34 <putchar>
    80002b24:	4529                	li	a0,10
    80002b26:	30e170ef          	jal	80019e34 <putchar>
    80002b2a:	00144783          	lbu	a5,1(s0)
    80002b2e:	da079fe3          	bnez	a5,800028ec <second_stage_only_translation+0xe8>
    80002b32:	da999de3          	bne	s3,s1,800028ec <second_stage_only_translation+0xe8>
    80002b36:	a07d                	j	80002be4 <second_stage_only_translation+0x3e0>
    TEST_ASSERT(
    80002b38:	4401                	li	s0,0
    TEST_END();
    80002b3a:	0001a597          	auipc	a1,0x1a
    80002b3e:	f9658593          	add	a1,a1,-106 # 8001cad0 <__func__.1+0x2d8>
    80002b42:	b7bd                	j	80002ab0 <second_stage_only_translation+0x2ac>
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    80002b44:	0001a597          	auipc	a1,0x1a
    80002b48:	f8c58593          	add	a1,a1,-116 # 8001cad0 <__func__.1+0x2d8>
    80002b4c:	0001a517          	auipc	a0,0x1a
    80002b50:	fc450513          	add	a0,a0,-60 # 8001cb10 <__func__.1+0x318>
    80002b54:	40e180ef          	jal	8001af62 <printf>
    80002b58:	00144783          	lbu	a5,1(s0)
    80002b5c:	e0079ce3          	bnez	a5,80002974 <second_stage_only_translation+0x170>
    80002b60:	02200793          	li	a5,34
    80002b64:	e0f918e3          	bne	s2,a5,80002974 <second_stage_only_translation+0x170>
    80002b68:	47c5                	li	a5,17
    80002b6a:	e0f995e3          	bne	s3,a5,80002974 <second_stage_only_translation+0x170>
    80002b6e:	4529                	li	a0,10
    80002b70:	2c4170ef          	jal	80019e34 <putchar>
    80002b74:	e20485e3          	beqz	s1,8000299e <second_stage_only_translation+0x19a>
    80002b78:	00144783          	lbu	a5,1(s0)
    80002b7c:	e20791e3          	bnez	a5,8000299e <second_stage_only_translation+0x19a>
    80002b80:	fef98493          	add	s1,s3,-17
    80002b84:	0014b493          	seqz	s1,s1
    80002b88:	bd21                	j	800029a0 <second_stage_only_translation+0x19c>
    TEST_ASSERT(
    80002b8a:	0001a517          	auipc	a0,0x1a
    80002b8e:	f8e50513          	add	a0,a0,-114 # 8001cb18 <__func__.1+0x320>
    80002b92:	3d0180ef          	jal	8001af62 <printf>
    80002b96:	02900513          	li	a0,41
    80002b9a:	29a170ef          	jal	80019e34 <putchar>
    80002b9e:	bded                	j	80002a98 <second_stage_only_translation+0x294>
    TEST_ASSERT(
    80002ba0:	4058                	lw	a4,4(s0)
    80002ba2:	478d                	li	a5,3
    80002ba4:	e6f713e3          	bne	a4,a5,80002a0a <second_stage_only_translation+0x206>
    80002ba8:	bd9d                	j	80002a1e <second_stage_only_translation+0x21a>
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    80002baa:	092a0163          	beq	s4,s2,80002c2c <second_stage_only_translation+0x428>
    80002bae:	0001a597          	auipc	a1,0x1a
    80002bb2:	f2258593          	add	a1,a1,-222 # 8001cad0 <__func__.1+0x2d8>
    80002bb6:	0001a517          	auipc	a0,0x1a
    80002bba:	f5a50513          	add	a0,a0,-166 # 8001cb10 <__func__.1+0x318>
    80002bbe:	3a4180ef          	jal	8001af62 <printf>
    80002bc2:	0001a517          	auipc	a0,0x1a
    80002bc6:	f5650513          	add	a0,a0,-170 # 8001cb18 <__func__.1+0x320>
    80002bca:	398180ef          	jal	8001af62 <printf>
    80002bce:	02900513          	li	a0,41
    80002bd2:	262170ef          	jal	80019e34 <putchar>
    80002bd6:	4529                	li	a0,10
    80002bd8:	25c170ef          	jal	80019e34 <putchar>
    80002bdc:	00144783          	lbu	a5,1(s0)
    80002be0:	d00796e3          	bnez	a5,800028ec <second_stage_only_translation+0xe8>
    80002be4:	fdea0493          	add	s1,s4,-34
    80002be8:	0014b493          	seqz	s1,s1
    80002bec:	b309                	j	800028ee <second_stage_only_translation+0xea>
    TEST_ASSERT(
    80002bee:	4044                	lw	s1,4(s0)
    80002bf0:	14f5                	add	s1,s1,-3
    80002bf2:	0014b493          	seqz	s1,s1
    80002bf6:	b581                	j	80002a36 <second_stage_only_translation+0x232>
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    80002bf8:	47c5                	li	a5,17
    80002bfa:	d6f993e3          	bne	s3,a5,80002960 <second_stage_only_translation+0x15c>
    80002bfe:	0001a597          	auipc	a1,0x1a
    80002c02:	ec258593          	add	a1,a1,-318 # 8001cac0 <__func__.1+0x2c8>
    80002c06:	0001a517          	auipc	a0,0x1a
    80002c0a:	f0a50513          	add	a0,a0,-246 # 8001cb10 <__func__.1+0x318>
    80002c0e:	354180ef          	jal	8001af62 <printf>
    80002c12:	00144783          	lbu	a5,1(s0)
    80002c16:	dfa1                	beqz	a5,80002b6e <second_stage_only_translation+0x36a>
    80002c18:	bbb1                	j	80002974 <second_stage_only_translation+0x170>
    TEST_ASSERT(
    80002c1a:	4058                	lw	a4,4(s0)
    80002c1c:	478d                	li	a5,3
    80002c1e:	dcf719e3          	bne	a4,a5,800029f0 <second_stage_only_translation+0x1ec>
    80002c22:	0001a597          	auipc	a1,0x1a
    80002c26:	e9e58593          	add	a1,a1,-354 # 8001cac0 <__func__.1+0x2c8>
    80002c2a:	b3d9                	j	800029f0 <second_stage_only_translation+0x1ec>
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    80002c2c:	0001a597          	auipc	a1,0x1a
    80002c30:	e9458593          	add	a1,a1,-364 # 8001cac0 <__func__.1+0x2c8>
    80002c34:	0001a517          	auipc	a0,0x1a
    80002c38:	edc50513          	add	a0,a0,-292 # 8001cb10 <__func__.1+0x318>
    80002c3c:	326180ef          	jal	8001af62 <printf>
    80002c40:	00144783          	lbu	a5,1(s0)
    80002c44:	ea078be3          	beqz	a5,80002afa <second_stage_only_translation+0x2f6>
    80002c48:	bfad                	j	80002bc2 <second_stage_only_translation+0x3be>

0000000080002c4a <m_and_hs_using_vs_access_1>:
    );

}


bool m_and_hs_using_vs_access_1(){
    80002c4a:	7139                	add	sp,sp,-64

    uint64_t val, valu;
    uintptr_t vaddr = vs_page_base(SCRATCHPAD);
    uintptr_t addr;

    TEST_START();
    80002c4c:	00019597          	auipc	a1,0x19
    80002c50:	8b458593          	add	a1,a1,-1868 # 8001b500 <__func__.13>
    80002c54:	0001a517          	auipc	a0,0x1a
    80002c58:	e8c50513          	add	a0,a0,-372 # 8001cae0 <__func__.1+0x2e8>
bool m_and_hs_using_vs_access_1(){
    80002c5c:	fc06                	sd	ra,56(sp)
    80002c5e:	f822                	sd	s0,48(sp)
    80002c60:	f426                	sd	s1,40(sp)
    80002c62:	f04a                	sd	s2,32(sp)
    80002c64:	ec4e                	sd	s3,24(sp)
    80002c66:	e852                	sd	s4,16(sp)
    80002c68:	e456                	sd	s5,8(sp)
    TEST_START();
    80002c6a:	2f8180ef          	jal	8001af62 <printf>
    80002c6e:	4529                	li	a0,10
    80002c70:	1c4170ef          	jal	80019e34 <putchar>
    
    hspt_init();
    80002c74:	96dfd0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80002c78:	baffd0ef          	jal	80000826 <hpt_init>
    vspt_init();
    80002c7c:	a39fd0ef          	jal	800006b4 <vspt_init>

    TEST_SETUP_EXCEPT();
    80002c80:	0ff0000f          	fence
    80002c84:	4785                	li	a5,1
    80002c86:	0003a417          	auipc	s0,0x3a
    80002c8a:	38a40413          	add	s0,s0,906 # 8003d010 <excpt>
    80002c8e:	00f41023          	sh	a5,0(s0)
    80002c92:	0003a797          	auipc	a5,0x3a
    80002c96:	3a07bb23          	sd	zero,950(a5) # 8003d048 <excpt+0x38>
    80002c9a:	0ff0000f          	fence
    if(curr_priv != PRIV_M){
    80002c9e:	00022917          	auipc	s2,0x22
    80002ca2:	3f690913          	add	s2,s2,1014 # 80025094 <curr_priv>
    80002ca6:	00092483          	lw	s1,0(s2)
    80002caa:	4791                	li	a5,4
    80002cac:	02f48763          	beq	s1,a5,80002cda <m_and_hs_using_vs_access_1+0x90>
        ERROR("trying to write as mprv from low privilege");
    80002cb0:	0001a517          	auipc	a0,0x1a
    80002cb4:	43050513          	add	a0,a0,1072 # 8001d0e0 <__func__.1+0x8e8>
    80002cb8:	2aa180ef          	jal	8001af62 <printf>
    80002cbc:	0c300613          	li	a2,195
    80002cc0:	00019597          	auipc	a1,0x19
    80002cc4:	86058593          	add	a1,a1,-1952 # 8001b520 <__func__.12>
    80002cc8:	0001a517          	auipc	a0,0x1a
    80002ccc:	fa050513          	add	a0,a0,-96 # 8001cc68 <__func__.1+0x470>
    80002cd0:	292180ef          	jal	8001af62 <printf>
    80002cd4:	4501                	li	a0,0
    80002cd6:	72b170ef          	jal	8001ac00 <exit>
    asm volatile(
    80002cda:	001009b7          	lui	s3,0x100
    set_prev_priv(priv);
    80002cde:	4509                	li	a0,2
    asm volatile(
    80002ce0:	06b98993          	add	s3,s3,107 # 10006b <STACK_SIZE+0x6b>
    set_prev_priv(priv);
    80002ce4:	d1ffd0ef          	jal	80000a02 <set_prev_priv>
    asm volatile(
    80002ce8:	09b2                	sll	s3,s3,0xc
    80002cea:	00020a17          	auipc	s4,0x20
    80002cee:	36ea3a03          	ld	s4,878(s4) # 80023058 <__func__.1+0x6860>
    80002cf2:	00020ab7          	lui	s5,0x20
    80002cf6:	300aa073          	csrs	mstatus,s5
    80002cfa:	0149b023          	sd	s4,0(s3)
    80002cfe:	300ab073          	csrc	mstatus,s5
    if(curr_priv != PRIV_M){
    80002d02:	00092783          	lw	a5,0(s2)
    80002d06:	02978763          	beq	a5,s1,80002d34 <m_and_hs_using_vs_access_1+0xea>
        ERROR("trying to read as mprv from low privilege");
    80002d0a:	0001a517          	auipc	a0,0x1a
    80002d0e:	41650513          	add	a0,a0,1046 # 8001d120 <__func__.1+0x928>
    80002d12:	250180ef          	jal	8001af62 <printf>
    80002d16:	0b000613          	li	a2,176
    80002d1a:	00019597          	auipc	a1,0x19
    80002d1e:	81658593          	add	a1,a1,-2026 # 8001b530 <__func__.11>
    80002d22:	0001a517          	auipc	a0,0x1a
    80002d26:	f4650513          	add	a0,a0,-186 # 8001cc68 <__func__.1+0x470>
    80002d2a:	238180ef          	jal	8001af62 <printf>
    80002d2e:	4501                	li	a0,0
    80002d30:	6d1170ef          	jal	8001ac00 <exit>
    set_prev_priv(priv);
    80002d34:	4509                	li	a0,2
    80002d36:	ccdfd0ef          	jal	80000a02 <set_prev_priv>
    asm volatile(
    80002d3a:	300aa073          	csrs	mstatus,s5
    80002d3e:	0009b483          	ld	s1,0(s3)
    80002d42:	300ab073          	csrc	mstatus,s5
    write64_mprv(PRIV_VS, vaddr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine sets mprv to access vs space",
    80002d46:	0001a617          	auipc	a2,0x1a
    80002d4a:	41a60613          	add	a2,a2,1050 # 8001d160 <__func__.1+0x968>
    80002d4e:	08200593          	li	a1,130
    80002d52:	0001a517          	auipc	a0,0x1a
    80002d56:	da650513          	add	a0,a0,-602 # 8001caf8 <__func__.1+0x300>
    80002d5a:	208180ef          	jal	8001af62 <printf>
    80002d5e:	00144783          	lbu	a5,1(s0)
    80002d62:	2c079663          	bnez	a5,8000302e <m_and_hs_using_vs_access_1+0x3e4>
    80002d66:	43448e63          	beq	s1,s4,800031a2 <m_and_hs_using_vs_access_1+0x558>
    80002d6a:	0001a597          	auipc	a1,0x1a
    80002d6e:	d6658593          	add	a1,a1,-666 # 8001cad0 <__func__.1+0x2d8>
    80002d72:	0001a517          	auipc	a0,0x1a
    80002d76:	d9e50513          	add	a0,a0,-610 # 8001cb10 <__func__.1+0x318>
    80002d7a:	1e8180ef          	jal	8001af62 <printf>
    80002d7e:	0001a517          	auipc	a0,0x1a
    80002d82:	d9a50513          	add	a0,a0,-614 # 8001cb18 <__func__.1+0x320>
    80002d86:	1dc180ef          	jal	8001af62 <printf>
    80002d8a:	02900513          	li	a0,41
    80002d8e:	0a6170ef          	jal	80019e34 <putchar>
    80002d92:	4529                	li	a0,10
    80002d94:	0a0170ef          	jal	80019e34 <putchar>
    80002d98:	00144783          	lbu	a5,1(s0)
    80002d9c:	4981                	li	s3,0
    80002d9e:	e789                	bnez	a5,80002da8 <m_and_hs_using_vs_access_1+0x15e>
    80002da0:	414484b3          	sub	s1,s1,s4
    80002da4:	0014b993          	seqz	s3,s1
        excpt.triggered == false && val == 0x1107ec0ffee
    );

    //TODO: test mprv to access hs space

    goto_priv(PRIV_HS);
    80002da8:	450d                	li	a0,3
    80002daa:	d35fd0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80002dae:	4509                	li	a0,2
    80002db0:	c53fd0ef          	jal	80000a02 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    80002db4:	0ff0000f          	fence
    80002db8:	4785                	li	a5,1
    80002dba:	00f41023          	sh	a5,0(s0)
    80002dbe:	0003a797          	auipc	a5,0x3a
    80002dc2:	2807b523          	sd	zero,650(a5) # 8003d048 <excpt+0x38>
    80002dc6:	0ff0000f          	fence
        :: "r"(value), "r"(addr): "memory");
    return value;
}

static inline uint64_t hsvd(uintptr_t addr, uint64_t value){
    asm volatile(
    80002dca:	37ab7937          	lui	s2,0x37ab7
    80002dce:	001007b7          	lui	a5,0x100
    80002dd2:	090a                	sll	s2,s2,0x2
    80002dd4:	06b78793          	add	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    80002dd8:	eef90913          	add	s2,s2,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80002ddc:	07b2                	sll	a5,a5,0xc
    80002dde:	6f27c073          	.4byte	0x6f27c073
    asm volatile(
    80002de2:	6c07c4f3          	.4byte	0x6c07c4f3
    hsvd(vaddr, 0xdeadbeef);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd",
    80002de6:	0001a617          	auipc	a2,0x1a
    80002dea:	3a260613          	add	a2,a2,930 # 8001d188 <__func__.1+0x990>
    80002dee:	08200593          	li	a1,130
    80002df2:	0001a517          	auipc	a0,0x1a
    80002df6:	d0650513          	add	a0,a0,-762 # 8001caf8 <__func__.1+0x300>
    80002dfa:	168180ef          	jal	8001af62 <printf>
    80002dfe:	00144783          	lbu	a5,1(s0)
    80002e02:	24079e63          	bnez	a5,8000305e <m_and_hs_using_vs_access_1+0x414>
    80002e06:	3b248d63          	beq	s1,s2,800031c0 <m_and_hs_using_vs_access_1+0x576>
    80002e0a:	0001a597          	auipc	a1,0x1a
    80002e0e:	cc658593          	add	a1,a1,-826 # 8001cad0 <__func__.1+0x2d8>
    80002e12:	0001a517          	auipc	a0,0x1a
    80002e16:	cfe50513          	add	a0,a0,-770 # 8001cb10 <__func__.1+0x318>
    80002e1a:	148180ef          	jal	8001af62 <printf>
    80002e1e:	0001a517          	auipc	a0,0x1a
    80002e22:	cfa50513          	add	a0,a0,-774 # 8001cb18 <__func__.1+0x320>
    80002e26:	13c180ef          	jal	8001af62 <printf>
    80002e2a:	02900513          	li	a0,41
    80002e2e:	006170ef          	jal	80019e34 <putchar>
    80002e32:	4529                	li	a0,10
    80002e34:	000170ef          	jal	80019e34 <putchar>
    80002e38:	32099063          	bnez	s3,80003158 <m_and_hs_using_vs_access_1+0x50e>
    80002e3c:	4481                	li	s1,0
        excpt.triggered == false && val == 0xdeadbeef
    );

    TEST_SETUP_EXCEPT();
    80002e3e:	0ff0000f          	fence
    80002e42:	4785                	li	a5,1
    80002e44:	00f41023          	sh	a5,0(s0)
    80002e48:	0003a797          	auipc	a5,0x3a
    80002e4c:	2007b023          	sd	zero,512(a5) # 8003d048 <excpt+0x38>
    80002e50:	0ff0000f          	fence
    asm volatile(
    80002e54:	001007b7          	lui	a5,0x100
    80002e58:	06b78793          	add	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    80002e5c:	07b2                	sll	a5,a5,0xc
    80002e5e:	0ff00993          	li	s3,255
    80002e62:	6337c073          	.4byte	0x6337c073
    asm volatile(
    80002e66:	6007ca73          	.4byte	0x6007ca73
    asm volatile(
    80002e6a:	6017c973          	.4byte	0x6017c973
    hsvb(vaddr, ((uint8_t)-1));
    val = hlvb(vaddr);
    valu = hlvbu(vaddr);
    TEST_ASSERT("hs hlvb vs hlvbu",
    80002e6e:	0001a617          	auipc	a2,0x1a
    80002e72:	32260613          	add	a2,a2,802 # 8001d190 <__func__.1+0x998>
    80002e76:	08200593          	li	a1,130
    80002e7a:	0001a517          	auipc	a0,0x1a
    80002e7e:	c7e50513          	add	a0,a0,-898 # 8001caf8 <__func__.1+0x300>
    80002e82:	0e0180ef          	jal	8001af62 <printf>
    80002e86:	00144783          	lbu	a5,1(s0)
    80002e8a:	28079663          	bnez	a5,80003116 <m_and_hs_using_vs_access_1+0x4cc>
    80002e8e:	57fd                	li	a5,-1
    80002e90:	2efa0963          	beq	s4,a5,80003182 <m_and_hs_using_vs_access_1+0x538>
    80002e94:	0001a597          	auipc	a1,0x1a
    80002e98:	c3c58593          	add	a1,a1,-964 # 8001cad0 <__func__.1+0x2d8>
    80002e9c:	0001a517          	auipc	a0,0x1a
    80002ea0:	c7450513          	add	a0,a0,-908 # 8001cb10 <__func__.1+0x318>
    80002ea4:	0be180ef          	jal	8001af62 <printf>
    80002ea8:	0001a517          	auipc	a0,0x1a
    80002eac:	c7050513          	add	a0,a0,-912 # 8001cb18 <__func__.1+0x320>
    80002eb0:	0b2180ef          	jal	8001af62 <printf>
    80002eb4:	02900513          	li	a0,41
    80002eb8:	77d160ef          	jal	80019e34 <putchar>
    80002ebc:	4529                	li	a0,10
    80002ebe:	777160ef          	jal	80019e34 <putchar>
    80002ec2:	c489                	beqz	s1,80002ecc <m_and_hs_using_vs_access_1+0x282>
    80002ec4:	00144783          	lbu	a5,1(s0)
    80002ec8:	2a078963          	beqz	a5,8000317a <m_and_hs_using_vs_access_1+0x530>
    80002ecc:	4481                	li	s1,0
        excpt.triggered == false && val == (-1) && valu == ((uint8_t)-1)
    );

    TEST_SETUP_EXCEPT();
    80002ece:	0ff0000f          	fence
    80002ed2:	4785                	li	a5,1
    80002ed4:	00f41023          	sh	a5,0(s0)
    80002ed8:	0003a797          	auipc	a5,0x3a
    80002edc:	1607b823          	sd	zero,368(a5) # 8003d048 <excpt+0x38>
    80002ee0:	0ff0000f          	fence
    asm volatile(
    80002ee4:	001007b7          	lui	a5,0x100
    80002ee8:	6941                	lui	s2,0x10
    80002eea:	06b78793          	add	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    80002eee:	197d                	add	s2,s2,-1 # ffff <_test_table_size+0xfffe>
    80002ef0:	07b2                	sll	a5,a5,0xc
    80002ef2:	6727c073          	.4byte	0x6727c073
    asm volatile(
    80002ef6:	6407c9f3          	.4byte	0x6407c9f3
    asm volatile(
    80002efa:	6417ca73          	.4byte	0x6417ca73
    hsvh(vaddr, ((uint16_t)-1));
    val = hlvh(vaddr);
    valu = hlvhu(vaddr);
    TEST_ASSERT("hs hlvh vs hlvhu",
    80002efe:	0001a617          	auipc	a2,0x1a
    80002f02:	2aa60613          	add	a2,a2,682 # 8001d1a8 <__func__.1+0x9b0>
    80002f06:	08200593          	li	a1,130
    80002f0a:	0001a517          	auipc	a0,0x1a
    80002f0e:	bee50513          	add	a0,a0,-1042 # 8001caf8 <__func__.1+0x300>
    80002f12:	050180ef          	jal	8001af62 <printf>
    80002f16:	00144783          	lbu	a5,1(s0)
    80002f1a:	1a079c63          	bnez	a5,800030d2 <m_and_hs_using_vs_access_1+0x488>
    80002f1e:	57fd                	li	a5,-1
    80002f20:	2ef98063          	beq	s3,a5,80003200 <m_and_hs_using_vs_access_1+0x5b6>
    80002f24:	0001a597          	auipc	a1,0x1a
    80002f28:	bac58593          	add	a1,a1,-1108 # 8001cad0 <__func__.1+0x2d8>
    80002f2c:	0001a517          	auipc	a0,0x1a
    80002f30:	be450513          	add	a0,a0,-1052 # 8001cb10 <__func__.1+0x318>
    80002f34:	02e180ef          	jal	8001af62 <printf>
    80002f38:	0001a517          	auipc	a0,0x1a
    80002f3c:	be050513          	add	a0,a0,-1056 # 8001cb18 <__func__.1+0x320>
    80002f40:	022180ef          	jal	8001af62 <printf>
    80002f44:	02900513          	li	a0,41
    80002f48:	6ed160ef          	jal	80019e34 <putchar>
    80002f4c:	4529                	li	a0,10
    80002f4e:	6e7160ef          	jal	80019e34 <putchar>
    80002f52:	c489                	beqz	s1,80002f5c <m_and_hs_using_vs_access_1+0x312>
    80002f54:	00144783          	lbu	a5,1(s0)
    80002f58:	20078d63          	beqz	a5,80003172 <m_and_hs_using_vs_access_1+0x528>
    80002f5c:	4981                	li	s3,0
        excpt.triggered == false && val == (-1) && valu == ((uint16_t)-1)
    );

    TEST_SETUP_EXCEPT();
    80002f5e:	0ff0000f          	fence
    80002f62:	4785                	li	a5,1
    80002f64:	00f41023          	sh	a5,0(s0)
    80002f68:	0003a797          	auipc	a5,0x3a
    80002f6c:	0e07b023          	sd	zero,224(a5) # 8003d048 <excpt+0x38>
    80002f70:	0ff0000f          	fence
    asm volatile(
    80002f74:	001007b7          	lui	a5,0x100
    80002f78:	597d                	li	s2,-1
    80002f7a:	06b78793          	add	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    80002f7e:	07b2                	sll	a5,a5,0xc
    80002f80:	02095a13          	srl	s4,s2,0x20
    80002f84:	6b47c073          	.4byte	0x6b47c073
    asm volatile(
    80002f88:	6807caf3          	.4byte	0x6807caf3
    asm volatile(
    80002f8c:	6817c4f3          	.4byte	0x6817c4f3
    hsvw(vaddr, ((uint32_t)-1));
    val = hlvw(vaddr);
    valu = hlvwu(vaddr);
    TEST_ASSERT("hs hlvw vs hlvwu",
    80002f90:	0001a617          	auipc	a2,0x1a
    80002f94:	23060613          	add	a2,a2,560 # 8001d1c0 <__func__.1+0x9c8>
    80002f98:	08200593          	li	a1,130
    80002f9c:	0001a517          	auipc	a0,0x1a
    80002fa0:	b5c50513          	add	a0,a0,-1188 # 8001caf8 <__func__.1+0x300>
    80002fa4:	7bf170ef          	jal	8001af62 <printf>
    80002fa8:	00144783          	lbu	a5,1(s0)
    80002fac:	0e079363          	bnez	a5,80003092 <m_and_hs_using_vs_access_1+0x448>
    80002fb0:	232a8763          	beq	s5,s2,800031de <m_and_hs_using_vs_access_1+0x594>
    80002fb4:	0001a597          	auipc	a1,0x1a
    80002fb8:	b1c58593          	add	a1,a1,-1252 # 8001cad0 <__func__.1+0x2d8>
    80002fbc:	0001a517          	auipc	a0,0x1a
    80002fc0:	b5450513          	add	a0,a0,-1196 # 8001cb10 <__func__.1+0x318>
    80002fc4:	79f170ef          	jal	8001af62 <printf>
    80002fc8:	0001a517          	auipc	a0,0x1a
    80002fcc:	b5050513          	add	a0,a0,-1200 # 8001cb18 <__func__.1+0x320>
    80002fd0:	793170ef          	jal	8001af62 <printf>
    80002fd4:	02900513          	li	a0,41
    80002fd8:	65d160ef          	jal	80019e34 <putchar>
    80002fdc:	4529                	li	a0,10
    80002fde:	657160ef          	jal	80019e34 <putchar>
    80002fe2:	00098c63          	beqz	s3,80002ffa <m_and_hs_using_vs_access_1+0x3b0>
    80002fe6:	00144783          	lbu	a5,1(s0)
    80002fea:	eb81                	bnez	a5,80002ffa <m_and_hs_using_vs_access_1+0x3b0>
    80002fec:	57fd                	li	a5,-1
    80002fee:	00fa9663          	bne	s5,a5,80002ffa <m_and_hs_using_vs_access_1+0x3b0>
    80002ff2:	020ada93          	srl	s5,s5,0x20
    80002ff6:	0d548863          	beq	s1,s5,800030c6 <m_and_hs_using_vs_access_1+0x47c>
    80002ffa:	4401                	li	s0,0
        excpt.triggered == false && val == (-1) && valu == ((uint32_t)-1)
    );

    TEST_END();
    80002ffc:	0001a597          	auipc	a1,0x1a
    80003000:	ad458593          	add	a1,a1,-1324 # 8001cad0 <__func__.1+0x2d8>
    80003004:	0001a517          	auipc	a0,0x1a
    80003008:	b7450513          	add	a0,a0,-1164 # 8001cb78 <__func__.1+0x380>
    8000300c:	757170ef          	jal	8001af62 <printf>
    80003010:	4511                	li	a0,4
    80003012:	acdfd0ef          	jal	80000ade <goto_priv>
    80003016:	b10fe0ef          	jal	80001326 <reset_state>
}
    8000301a:	70e2                	ld	ra,56(sp)
    8000301c:	8522                	mv	a0,s0
    8000301e:	7442                	ld	s0,48(sp)
    80003020:	74a2                	ld	s1,40(sp)
    80003022:	7902                	ld	s2,32(sp)
    80003024:	69e2                	ld	s3,24(sp)
    80003026:	6a42                	ld	s4,16(sp)
    80003028:	6aa2                	ld	s5,8(sp)
    8000302a:	6121                	add	sp,sp,64
    8000302c:	8082                	ret
    TEST_ASSERT("machine sets mprv to access vs space",
    8000302e:	0001a597          	auipc	a1,0x1a
    80003032:	aa258593          	add	a1,a1,-1374 # 8001cad0 <__func__.1+0x2d8>
    80003036:	0001a517          	auipc	a0,0x1a
    8000303a:	ada50513          	add	a0,a0,-1318 # 8001cb10 <__func__.1+0x318>
    8000303e:	725170ef          	jal	8001af62 <printf>
    80003042:	00144783          	lbu	a5,1(s0)
    80003046:	d2079ce3          	bnez	a5,80002d7e <m_and_hs_using_vs_access_1+0x134>
    8000304a:	d3449ae3          	bne	s1,s4,80002d7e <m_and_hs_using_vs_access_1+0x134>
    8000304e:	4529                	li	a0,10
    80003050:	5e5160ef          	jal	80019e34 <putchar>
    80003054:	00144983          	lbu	s3,1(s0)
    80003058:	0019c993          	xor	s3,s3,1
    8000305c:	b3b1                	j	80002da8 <m_and_hs_using_vs_access_1+0x15e>
    TEST_ASSERT("hs hlvd",
    8000305e:	0001a597          	auipc	a1,0x1a
    80003062:	a7258593          	add	a1,a1,-1422 # 8001cad0 <__func__.1+0x2d8>
    80003066:	0001a517          	auipc	a0,0x1a
    8000306a:	aaa50513          	add	a0,a0,-1366 # 8001cb10 <__func__.1+0x318>
    8000306e:	6f5170ef          	jal	8001af62 <printf>
    80003072:	00144783          	lbu	a5,1(s0)
    80003076:	da0794e3          	bnez	a5,80002e1e <m_and_hs_using_vs_access_1+0x1d4>
    8000307a:	db2492e3          	bne	s1,s2,80002e1e <m_and_hs_using_vs_access_1+0x1d4>
    8000307e:	4529                	li	a0,10
    80003080:	5b5160ef          	jal	80019e34 <putchar>
    80003084:	da098ce3          	beqz	s3,80002e3c <m_and_hs_using_vs_access_1+0x1f2>
    80003088:	00144483          	lbu	s1,1(s0)
    8000308c:	0014c493          	xor	s1,s1,1
    80003090:	b37d                	j	80002e3e <m_and_hs_using_vs_access_1+0x1f4>
    TEST_ASSERT("hs hlvw vs hlvwu",
    80003092:	0001a597          	auipc	a1,0x1a
    80003096:	a3e58593          	add	a1,a1,-1474 # 8001cad0 <__func__.1+0x2d8>
    8000309a:	0001a517          	auipc	a0,0x1a
    8000309e:	a7650513          	add	a0,a0,-1418 # 8001cb10 <__func__.1+0x318>
    800030a2:	6c1170ef          	jal	8001af62 <printf>
    800030a6:	00144783          	lbu	a5,1(s0)
    800030aa:	f0079fe3          	bnez	a5,80002fc8 <m_and_hs_using_vs_access_1+0x37e>
    800030ae:	f12a9de3          	bne	s5,s2,80002fc8 <m_and_hs_using_vs_access_1+0x37e>
    800030b2:	f1449be3          	bne	s1,s4,80002fc8 <m_and_hs_using_vs_access_1+0x37e>
    800030b6:	4529                	li	a0,10
    800030b8:	57d160ef          	jal	80019e34 <putchar>
    800030bc:	f2098fe3          	beqz	s3,80002ffa <m_and_hs_using_vs_access_1+0x3b0>
    800030c0:	00144783          	lbu	a5,1(s0)
    800030c4:	fb9d                	bnez	a5,80002ffa <m_and_hs_using_vs_access_1+0x3b0>
    800030c6:	4405                	li	s0,1
    TEST_END();
    800030c8:	0001a597          	auipc	a1,0x1a
    800030cc:	9f858593          	add	a1,a1,-1544 # 8001cac0 <__func__.1+0x2c8>
    800030d0:	bf15                	j	80003004 <m_and_hs_using_vs_access_1+0x3ba>
    TEST_ASSERT("hs hlvh vs hlvhu",
    800030d2:	0001a597          	auipc	a1,0x1a
    800030d6:	9fe58593          	add	a1,a1,-1538 # 8001cad0 <__func__.1+0x2d8>
    800030da:	0001a517          	auipc	a0,0x1a
    800030de:	a3650513          	add	a0,a0,-1482 # 8001cb10 <__func__.1+0x318>
    800030e2:	681170ef          	jal	8001af62 <printf>
    800030e6:	00144783          	lbu	a5,1(s0)
    800030ea:	e40797e3          	bnez	a5,80002f38 <m_and_hs_using_vs_access_1+0x2ee>
    800030ee:	57fd                	li	a5,-1
    800030f0:	e4f994e3          	bne	s3,a5,80002f38 <m_and_hs_using_vs_access_1+0x2ee>
    800030f4:	e52a12e3          	bne	s4,s2,80002f38 <m_and_hs_using_vs_access_1+0x2ee>
    800030f8:	4529                	li	a0,10
    800030fa:	53b160ef          	jal	80019e34 <putchar>
    800030fe:	e4048fe3          	beqz	s1,80002f5c <m_and_hs_using_vs_access_1+0x312>
    80003102:	00144783          	lbu	a5,1(s0)
    80003106:	e4079be3          	bnez	a5,80002f5c <m_and_hs_using_vs_access_1+0x312>
    8000310a:	79c1                	lui	s3,0xffff0
    8000310c:	0985                	add	s3,s3,1 # ffffffffffff0001 <__stack_top+0xffffffff7fcf1001>
    8000310e:	99d2                	add	s3,s3,s4
    80003110:	0019b993          	seqz	s3,s3
    80003114:	b5a9                	j	80002f5e <m_and_hs_using_vs_access_1+0x314>
    TEST_ASSERT("hs hlvb vs hlvbu",
    80003116:	0001a597          	auipc	a1,0x1a
    8000311a:	9ba58593          	add	a1,a1,-1606 # 8001cad0 <__func__.1+0x2d8>
    8000311e:	0001a517          	auipc	a0,0x1a
    80003122:	9f250513          	add	a0,a0,-1550 # 8001cb10 <__func__.1+0x318>
    80003126:	63d170ef          	jal	8001af62 <printf>
    8000312a:	00144783          	lbu	a5,1(s0)
    8000312e:	d6079de3          	bnez	a5,80002ea8 <m_and_hs_using_vs_access_1+0x25e>
    80003132:	57fd                	li	a5,-1
    80003134:	d6fa1ae3          	bne	s4,a5,80002ea8 <m_and_hs_using_vs_access_1+0x25e>
    80003138:	d73918e3          	bne	s2,s3,80002ea8 <m_and_hs_using_vs_access_1+0x25e>
    8000313c:	4529                	li	a0,10
    8000313e:	4f7160ef          	jal	80019e34 <putchar>
    80003142:	d80485e3          	beqz	s1,80002ecc <m_and_hs_using_vs_access_1+0x282>
    80003146:	00144783          	lbu	a5,1(s0)
    8000314a:	d80791e3          	bnez	a5,80002ecc <m_and_hs_using_vs_access_1+0x282>
    8000314e:	f0190793          	add	a5,s2,-255
    80003152:	0017b493          	seqz	s1,a5
    80003156:	bba5                	j	80002ece <m_and_hs_using_vs_access_1+0x284>
    TEST_ASSERT("hs hlvd",
    80003158:	00144783          	lbu	a5,1(s0)
    8000315c:	ce0790e3          	bnez	a5,80002e3c <m_and_hs_using_vs_access_1+0x1f2>
    80003160:	c85497b7          	lui	a5,0xc8549
    80003164:	078a                	sll	a5,a5,0x2
    80003166:	11178793          	add	a5,a5,273 # ffffffffc8549111 <__stack_top+0xffffffff4824a111>
    8000316a:	94be                	add	s1,s1,a5
    8000316c:	0014b493          	seqz	s1,s1
    80003170:	b1f9                	j	80002e3e <m_and_hs_using_vs_access_1+0x1f4>
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003172:	57fd                	li	a5,-1
    80003174:	def994e3          	bne	s3,a5,80002f5c <m_and_hs_using_vs_access_1+0x312>
    80003178:	bf49                	j	8000310a <m_and_hs_using_vs_access_1+0x4c0>
    TEST_ASSERT("hs hlvb vs hlvbu",
    8000317a:	57fd                	li	a5,-1
    8000317c:	d4fa18e3          	bne	s4,a5,80002ecc <m_and_hs_using_vs_access_1+0x282>
    80003180:	b7f9                	j	8000314e <m_and_hs_using_vs_access_1+0x504>
    80003182:	d13919e3          	bne	s2,s3,80002e94 <m_and_hs_using_vs_access_1+0x24a>
    80003186:	0001a597          	auipc	a1,0x1a
    8000318a:	93a58593          	add	a1,a1,-1734 # 8001cac0 <__func__.1+0x2c8>
    8000318e:	0001a517          	auipc	a0,0x1a
    80003192:	98250513          	add	a0,a0,-1662 # 8001cb10 <__func__.1+0x318>
    80003196:	5cd170ef          	jal	8001af62 <printf>
    8000319a:	00144783          	lbu	a5,1(s0)
    8000319e:	dfd9                	beqz	a5,8000313c <m_and_hs_using_vs_access_1+0x4f2>
    800031a0:	b321                	j	80002ea8 <m_and_hs_using_vs_access_1+0x25e>
    TEST_ASSERT("machine sets mprv to access vs space",
    800031a2:	0001a597          	auipc	a1,0x1a
    800031a6:	91e58593          	add	a1,a1,-1762 # 8001cac0 <__func__.1+0x2c8>
    800031aa:	0001a517          	auipc	a0,0x1a
    800031ae:	96650513          	add	a0,a0,-1690 # 8001cb10 <__func__.1+0x318>
    800031b2:	5b1170ef          	jal	8001af62 <printf>
    800031b6:	00144783          	lbu	a5,1(s0)
    800031ba:	bc078ce3          	beqz	a5,80002d92 <m_and_hs_using_vs_access_1+0x148>
    800031be:	b6c1                	j	80002d7e <m_and_hs_using_vs_access_1+0x134>
    TEST_ASSERT("hs hlvd",
    800031c0:	0001a597          	auipc	a1,0x1a
    800031c4:	90058593          	add	a1,a1,-1792 # 8001cac0 <__func__.1+0x2c8>
    800031c8:	0001a517          	auipc	a0,0x1a
    800031cc:	94850513          	add	a0,a0,-1720 # 8001cb10 <__func__.1+0x318>
    800031d0:	593170ef          	jal	8001af62 <printf>
    800031d4:	00144783          	lbu	a5,1(s0)
    800031d8:	ea0783e3          	beqz	a5,8000307e <m_and_hs_using_vs_access_1+0x434>
    800031dc:	b189                	j	80002e1e <m_and_hs_using_vs_access_1+0x1d4>
    TEST_ASSERT("hs hlvw vs hlvwu",
    800031de:	dd449be3          	bne	s1,s4,80002fb4 <m_and_hs_using_vs_access_1+0x36a>
    800031e2:	0001a597          	auipc	a1,0x1a
    800031e6:	8de58593          	add	a1,a1,-1826 # 8001cac0 <__func__.1+0x2c8>
    800031ea:	0001a517          	auipc	a0,0x1a
    800031ee:	92650513          	add	a0,a0,-1754 # 8001cb10 <__func__.1+0x318>
    800031f2:	571170ef          	jal	8001af62 <printf>
    800031f6:	00144783          	lbu	a5,1(s0)
    800031fa:	ea078ee3          	beqz	a5,800030b6 <m_and_hs_using_vs_access_1+0x46c>
    800031fe:	b3e9                	j	80002fc8 <m_and_hs_using_vs_access_1+0x37e>
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003200:	d32a12e3          	bne	s4,s2,80002f24 <m_and_hs_using_vs_access_1+0x2da>
    80003204:	0001a597          	auipc	a1,0x1a
    80003208:	8bc58593          	add	a1,a1,-1860 # 8001cac0 <__func__.1+0x2c8>
    8000320c:	0001a517          	auipc	a0,0x1a
    80003210:	90450513          	add	a0,a0,-1788 # 8001cb10 <__func__.1+0x318>
    80003214:	54f170ef          	jal	8001af62 <printf>
    80003218:	00144783          	lbu	a5,1(s0)
    8000321c:	ec078ee3          	beqz	a5,800030f8 <m_and_hs_using_vs_access_1+0x4ae>
    80003220:	bb21                	j	80002f38 <m_and_hs_using_vs_access_1+0x2ee>

0000000080003222 <m_and_hs_using_vs_access_2>:
     * hlvx instruction but on a previous lui instruction. 
     * TODO: find out why
     */


bool m_and_hs_using_vs_access_2(){
    80003222:	1101                	add	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80003224:	00018597          	auipc	a1,0x18
    80003228:	31c58593          	add	a1,a1,796 # 8001b540 <__func__.10>
    8000322c:	0001a517          	auipc	a0,0x1a
    80003230:	8b450513          	add	a0,a0,-1868 # 8001cae0 <__func__.1+0x2e8>
bool m_and_hs_using_vs_access_2(){
    80003234:	ec06                	sd	ra,24(sp)
    80003236:	e822                	sd	s0,16(sp)
    80003238:	e426                	sd	s1,8(sp)
    8000323a:	e04a                	sd	s2,0(sp)
    TEST_START();
    8000323c:	527170ef          	jal	8001af62 <printf>
    80003240:	4529                	li	a0,10
    80003242:	3f3160ef          	jal	80019e34 <putchar>
    
    hspt_init();
    80003246:	b9afd0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    8000324a:	ddcfd0ef          	jal	80000826 <hpt_init>
    vspt_init();
    8000324e:	c66fd0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_HS);
    80003252:	450d                	li	a0,3
    80003254:	88bfd0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80003258:	4509                	li	a0,2
    8000325a:	fa8fd0ef          	jal	80000a02 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    8000325e:	0ff0000f          	fence
    80003262:	4785                	li	a5,1
    80003264:	0003a417          	auipc	s0,0x3a
    80003268:	dac40413          	add	s0,s0,-596 # 8003d010 <excpt>
    8000326c:	00f41023          	sh	a5,0(s0)
    80003270:	0003a797          	auipc	a5,0x3a
    80003274:	dc07bc23          	sd	zero,-552(a5) # 8003d048 <excpt+0x38>
    80003278:	0ff0000f          	fence
    asm volatile(
    8000327c:	200037b7          	lui	a5,0x20003
    80003280:	078e                	sll	a5,a5,0x3
    80003282:	6837c7f3          	.4byte	0x6837c7f3
    val = hlvxwu(vs_page_base(VSX_GUX));
    TEST_ASSERT("hs hlvxwu accesses on only execute page",
    80003286:	08200593          	li	a1,130
    8000328a:	0001a617          	auipc	a2,0x1a
    8000328e:	f4e60613          	add	a2,a2,-178 # 8001d1d8 <__func__.1+0x9e0>
    80003292:	0001a517          	auipc	a0,0x1a
    80003296:	86650513          	add	a0,a0,-1946 # 8001caf8 <__func__.1+0x300>
    8000329a:	4c9170ef          	jal	8001af62 <printf>
    8000329e:	00144783          	lbu	a5,1(s0)
    800032a2:	0001a597          	auipc	a1,0x1a
    800032a6:	81e58593          	add	a1,a1,-2018 # 8001cac0 <__func__.1+0x2c8>
    800032aa:	c789                	beqz	a5,800032b4 <m_and_hs_using_vs_access_2+0x92>
    800032ac:	0001a597          	auipc	a1,0x1a
    800032b0:	82458593          	add	a1,a1,-2012 # 8001cad0 <__func__.1+0x2d8>
    800032b4:	0001a517          	auipc	a0,0x1a
    800032b8:	85c50513          	add	a0,a0,-1956 # 8001cb10 <__func__.1+0x318>
    800032bc:	4a7170ef          	jal	8001af62 <printf>
    800032c0:	00144783          	lbu	a5,1(s0)
    800032c4:	22079563          	bnez	a5,800034ee <m_and_hs_using_vs_access_2+0x2cc>
    800032c8:	4529                	li	a0,10
    800032ca:	36b160ef          	jal	80019e34 <putchar>
    800032ce:	00144903          	lbu	s2,1(s0)
        excpt.triggered == false
    );

    TEST_SETUP_EXCEPT();
    800032d2:	0ff0000f          	fence
    800032d6:	4785                	li	a5,1
    800032d8:	00f41023          	sh	a5,0(s0)
    800032dc:	0003a717          	auipc	a4,0x3a
    800032e0:	d6073623          	sd	zero,-660(a4) # 8003d048 <excpt+0x38>
    800032e4:	0ff0000f          	fence
    800032e8:	1782                	sll	a5,a5,0x20
    800032ea:	6837c7f3          	.4byte	0x6837c7f3
    val = hlvxwu(vs_page_base(VSRWX_GURWX));
    TEST_ASSERT("hs hlvxwu accesses page with all permissions",
    800032ee:	08200593          	li	a1,130
    800032f2:	0001a617          	auipc	a2,0x1a
    800032f6:	f0e60613          	add	a2,a2,-242 # 8001d200 <__func__.1+0xa08>
    800032fa:	00019517          	auipc	a0,0x19
    800032fe:	7fe50513          	add	a0,a0,2046 # 8001caf8 <__func__.1+0x300>
    80003302:	461170ef          	jal	8001af62 <printf>
    80003306:	00144783          	lbu	a5,1(s0)
    8000330a:	00019597          	auipc	a1,0x19
    8000330e:	7c658593          	add	a1,a1,1990 # 8001cad0 <__func__.1+0x2d8>
    80003312:	e789                	bnez	a5,8000331c <m_and_hs_using_vs_access_2+0xfa>
    80003314:	00019597          	auipc	a1,0x19
    80003318:	7ac58593          	add	a1,a1,1964 # 8001cac0 <__func__.1+0x2c8>
    8000331c:	00019517          	auipc	a0,0x19
    80003320:	7f450513          	add	a0,a0,2036 # 8001cb10 <__func__.1+0x318>
    80003324:	43f170ef          	jal	8001af62 <printf>
    80003328:	00144783          	lbu	a5,1(s0)
    8000332c:	1a079663          	bnez	a5,800034d8 <m_and_hs_using_vs_access_2+0x2b6>
    80003330:	4529                	li	a0,10
    80003332:	303160ef          	jal	80019e34 <putchar>
    80003336:	4481                	li	s1,0
    80003338:	00091663          	bnez	s2,80003344 <m_and_hs_using_vs_access_2+0x122>
    8000333c:	00144483          	lbu	s1,1(s0)
    80003340:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    );

    TEST_SETUP_EXCEPT();
    80003344:	0ff0000f          	fence
    80003348:	4785                	li	a5,1
    8000334a:	00f41023          	sh	a5,0(s0)
    8000334e:	0003a797          	auipc	a5,0x3a
    80003352:	ce07bd23          	sd	zero,-774(a5) # 8003d048 <excpt+0x38>
    80003356:	0ff0000f          	fence
    8000335a:	001007b7          	lui	a5,0x100
    8000335e:	0785                	add	a5,a5,1 # 100001 <STACK_SIZE+0x1>
    80003360:	07b2                	sll	a5,a5,0xc
    80003362:	6837c7f3          	.4byte	0x6837c7f3
    val = hlvxwu(vs_page_base(VSRWX_GURW));
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003366:	08200593          	li	a1,130
    8000336a:	0001a617          	auipc	a2,0x1a
    8000336e:	ec660613          	add	a2,a2,-314 # 8001d230 <__func__.1+0xa38>
    80003372:	00019517          	auipc	a0,0x19
    80003376:	78650513          	add	a0,a0,1926 # 8001caf8 <__func__.1+0x300>
    8000337a:	3e9170ef          	jal	8001af62 <printf>
    8000337e:	00144783          	lbu	a5,1(s0)
    80003382:	00019597          	auipc	a1,0x19
    80003386:	74e58593          	add	a1,a1,1870 # 8001cad0 <__func__.1+0x2d8>
    8000338a:	c789                	beqz	a5,80003394 <m_and_hs_using_vs_access_2+0x172>
    8000338c:	6418                	ld	a4,8(s0)
    8000338e:	47d5                	li	a5,21
    80003390:	18f70763          	beq	a4,a5,8000351e <m_and_hs_using_vs_access_2+0x2fc>
    80003394:	00019517          	auipc	a0,0x19
    80003398:	77c50513          	add	a0,a0,1916 # 8001cb10 <__func__.1+0x318>
    8000339c:	3c7170ef          	jal	8001af62 <printf>
    800033a0:	00144783          	lbu	a5,1(s0)
    800033a4:	c789                	beqz	a5,800033ae <m_and_hs_using_vs_access_2+0x18c>
    800033a6:	6418                	ld	a4,8(s0)
    800033a8:	47d5                	li	a5,21
    800033aa:	10f70e63          	beq	a4,a5,800034c6 <m_and_hs_using_vs_access_2+0x2a4>
    800033ae:	00019517          	auipc	a0,0x19
    800033b2:	76a50513          	add	a0,a0,1898 # 8001cb18 <__func__.1+0x320>
    800033b6:	3ad170ef          	jal	8001af62 <printf>
    800033ba:	02900513          	li	a0,41
    800033be:	277160ef          	jal	80019e34 <putchar>
    800033c2:	4529                	li	a0,10
    800033c4:	271160ef          	jal	80019e34 <putchar>
    800033c8:	c489                	beqz	s1,800033d2 <m_and_hs_using_vs_access_2+0x1b0>
    800033ca:	00144783          	lbu	a5,1(s0)
    800033ce:	4481                	li	s1,0
    800033d0:	ebe1                	bnez	a5,800034a0 <m_and_hs_using_vs_access_2+0x27e>
        excpt.cause == CAUSE_LGPF && 
        excpt.gva == true &&
        excpt.xpv == false
    );

    TEST_SETUP_EXCEPT();
    800033d2:	0ff0000f          	fence
    800033d6:	4785                	li	a5,1
    800033d8:	00f41023          	sh	a5,0(s0)
    800033dc:	0003a797          	auipc	a5,0x3a
    800033e0:	c607b623          	sd	zero,-916(a5) # 8003d048 <excpt+0x38>
    800033e4:	0ff0000f          	fence
    800033e8:	001007b7          	lui	a5,0x100
    800033ec:	0795                	add	a5,a5,5 # 100005 <STACK_SIZE+0x5>
    800033ee:	07b2                	sll	a5,a5,0xc
    800033f0:	6837c7f3          	.4byte	0x6837c7f3
    val = hlvxwu(vs_page_base(VSRW_GURWX));
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    800033f4:	08200593          	li	a1,130
    800033f8:	0001a617          	auipc	a2,0x1a
    800033fc:	e7060613          	add	a2,a2,-400 # 8001d268 <__func__.1+0xa70>
    80003400:	00019517          	auipc	a0,0x19
    80003404:	6f850513          	add	a0,a0,1784 # 8001caf8 <__func__.1+0x300>
    80003408:	35b170ef          	jal	8001af62 <printf>
    8000340c:	00144783          	lbu	a5,1(s0)
    80003410:	00019597          	auipc	a1,0x19
    80003414:	6c058593          	add	a1,a1,1728 # 8001cad0 <__func__.1+0x2d8>
    80003418:	c789                	beqz	a5,80003422 <m_and_hs_using_vs_access_2+0x200>
    8000341a:	6418                	ld	a4,8(s0)
    8000341c:	47b5                	li	a5,13
    8000341e:	0ef70363          	beq	a4,a5,80003504 <m_and_hs_using_vs_access_2+0x2e2>
    80003422:	00019517          	auipc	a0,0x19
    80003426:	6ee50513          	add	a0,a0,1774 # 8001cb10 <__func__.1+0x318>
    8000342a:	339170ef          	jal	8001af62 <printf>
    8000342e:	00144783          	lbu	a5,1(s0)
    80003432:	c789                	beqz	a5,8000343c <m_and_hs_using_vs_access_2+0x21a>
    80003434:	6418                	ld	a4,8(s0)
    80003436:	47b5                	li	a5,13
    80003438:	08f70063          	beq	a4,a5,800034b8 <m_and_hs_using_vs_access_2+0x296>
    8000343c:	00019517          	auipc	a0,0x19
    80003440:	6dc50513          	add	a0,a0,1756 # 8001cb18 <__func__.1+0x320>
    80003444:	31f170ef          	jal	8001af62 <printf>
    80003448:	02900513          	li	a0,41
    8000344c:	1e9160ef          	jal	80019e34 <putchar>
    80003450:	4529                	li	a0,10
    80003452:	1e3160ef          	jal	80019e34 <putchar>
    80003456:	cc9d                	beqz	s1,80003494 <m_and_hs_using_vs_access_2+0x272>
    80003458:	00144483          	lbu	s1,1(s0)
        excpt.gva == true &&
        excpt.xpv == false
    );

    
    TEST_END();
    8000345c:	00019597          	auipc	a1,0x19
    80003460:	67458593          	add	a1,a1,1652 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003464:	c491                	beqz	s1,80003470 <m_and_hs_using_vs_access_2+0x24e>
    80003466:	6418                	ld	a4,8(s0)
    80003468:	47b5                	li	a5,13
    8000346a:	4481                	li	s1,0
    8000346c:	0cf70663          	beq	a4,a5,80003538 <m_and_hs_using_vs_access_2+0x316>
    TEST_END();
    80003470:	00019517          	auipc	a0,0x19
    80003474:	70850513          	add	a0,a0,1800 # 8001cb78 <__func__.1+0x380>
    80003478:	2eb170ef          	jal	8001af62 <printf>
    8000347c:	4511                	li	a0,4
    8000347e:	e60fd0ef          	jal	80000ade <goto_priv>
    80003482:	ea5fd0ef          	jal	80001326 <reset_state>
}
    80003486:	60e2                	ld	ra,24(sp)
    80003488:	6442                	ld	s0,16(sp)
    8000348a:	6902                	ld	s2,0(sp)
    8000348c:	8526                	mv	a0,s1
    8000348e:	64a2                	ld	s1,8(sp)
    80003490:	6105                	add	sp,sp,32
    80003492:	8082                	ret
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003494:	4481                	li	s1,0
    TEST_END();
    80003496:	00019597          	auipc	a1,0x19
    8000349a:	63a58593          	add	a1,a1,1594 # 8001cad0 <__func__.1+0x2d8>
    8000349e:	bfc9                	j	80003470 <m_and_hs_using_vs_access_2+0x24e>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    800034a0:	6418                	ld	a4,8(s0)
    800034a2:	47d5                	li	a5,21
    800034a4:	f2f717e3          	bne	a4,a5,800033d2 <m_and_hs_using_vs_access_2+0x1b0>
    800034a8:	03044783          	lbu	a5,48(s0)
    800034ac:	d39d                	beqz	a5,800033d2 <m_and_hs_using_vs_access_2+0x1b0>
    800034ae:	03144483          	lbu	s1,49(s0)
    800034b2:	0014c493          	xor	s1,s1,1
    800034b6:	bf31                	j	800033d2 <m_and_hs_using_vs_access_2+0x1b0>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    800034b8:	03044783          	lbu	a5,48(s0)
    800034bc:	d3c1                	beqz	a5,8000343c <m_and_hs_using_vs_access_2+0x21a>
    800034be:	03144783          	lbu	a5,49(s0)
    800034c2:	d7d9                	beqz	a5,80003450 <m_and_hs_using_vs_access_2+0x22e>
    800034c4:	bfa5                	j	8000343c <m_and_hs_using_vs_access_2+0x21a>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    800034c6:	03044783          	lbu	a5,48(s0)
    800034ca:	ee0782e3          	beqz	a5,800033ae <m_and_hs_using_vs_access_2+0x18c>
    800034ce:	03144783          	lbu	a5,49(s0)
    800034d2:	ee0788e3          	beqz	a5,800033c2 <m_and_hs_using_vs_access_2+0x1a0>
    800034d6:	bde1                	j	800033ae <m_and_hs_using_vs_access_2+0x18c>
    TEST_ASSERT("hs hlvxwu accesses page with all permissions",
    800034d8:	00019517          	auipc	a0,0x19
    800034dc:	64050513          	add	a0,a0,1600 # 8001cb18 <__func__.1+0x320>
    800034e0:	283170ef          	jal	8001af62 <printf>
    800034e4:	02900513          	li	a0,41
    800034e8:	14d160ef          	jal	80019e34 <putchar>
    800034ec:	b591                	j	80003330 <m_and_hs_using_vs_access_2+0x10e>
    TEST_ASSERT("hs hlvxwu accesses on only execute page",
    800034ee:	00019517          	auipc	a0,0x19
    800034f2:	62a50513          	add	a0,a0,1578 # 8001cb18 <__func__.1+0x320>
    800034f6:	26d170ef          	jal	8001af62 <printf>
    800034fa:	02900513          	li	a0,41
    800034fe:	137160ef          	jal	80019e34 <putchar>
    80003502:	b3d9                	j	800032c8 <m_and_hs_using_vs_access_2+0xa6>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003504:	03044783          	lbu	a5,48(s0)
    80003508:	f0078de3          	beqz	a5,80003422 <m_and_hs_using_vs_access_2+0x200>
    8000350c:	03144783          	lbu	a5,49(s0)
    80003510:	f00799e3          	bnez	a5,80003422 <m_and_hs_using_vs_access_2+0x200>
    80003514:	00019597          	auipc	a1,0x19
    80003518:	5ac58593          	add	a1,a1,1452 # 8001cac0 <__func__.1+0x2c8>
    8000351c:	b719                	j	80003422 <m_and_hs_using_vs_access_2+0x200>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    8000351e:	03044783          	lbu	a5,48(s0)
    80003522:	e60789e3          	beqz	a5,80003394 <m_and_hs_using_vs_access_2+0x172>
    80003526:	03144783          	lbu	a5,49(s0)
    8000352a:	e60795e3          	bnez	a5,80003394 <m_and_hs_using_vs_access_2+0x172>
    8000352e:	00019597          	auipc	a1,0x19
    80003532:	59258593          	add	a1,a1,1426 # 8001cac0 <__func__.1+0x2c8>
    80003536:	bdb9                	j	80003394 <m_and_hs_using_vs_access_2+0x172>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003538:	03044483          	lbu	s1,48(s0)
    8000353c:	d895                	beqz	s1,80003470 <m_and_hs_using_vs_access_2+0x24e>
    8000353e:	03144783          	lbu	a5,49(s0)
    80003542:	e791                	bnez	a5,8000354e <m_and_hs_using_vs_access_2+0x32c>
    TEST_END();
    80003544:	00019597          	auipc	a1,0x19
    80003548:	57c58593          	add	a1,a1,1404 # 8001cac0 <__func__.1+0x2c8>
    8000354c:	b715                	j	80003470 <m_and_hs_using_vs_access_2+0x24e>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    8000354e:	4481                	li	s1,0
    80003550:	b705                	j	80003470 <m_and_hs_using_vs_access_2+0x24e>

0000000080003552 <m_and_hs_using_vs_access_3>:

bool m_and_hs_using_vs_access_3(){
    80003552:	7179                	add	sp,sp,-48

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80003554:	00018597          	auipc	a1,0x18
    80003558:	00c58593          	add	a1,a1,12 # 8001b560 <__func__.9>
    8000355c:	00019517          	auipc	a0,0x19
    80003560:	58450513          	add	a0,a0,1412 # 8001cae0 <__func__.1+0x2e8>
bool m_and_hs_using_vs_access_3(){
    80003564:	f406                	sd	ra,40(sp)
    80003566:	f022                	sd	s0,32(sp)
    80003568:	ec26                	sd	s1,24(sp)
    8000356a:	e84a                	sd	s2,16(sp)
    8000356c:	e44e                	sd	s3,8(sp)
    TEST_START();
    8000356e:	1f5170ef          	jal	8001af62 <printf>
    80003572:	4529                	li	a0,10
    80003574:	0c1160ef          	jal	80019e34 <putchar>
    
    hspt_init();
    80003578:	868fd0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    8000357c:	aaafd0ef          	jal	80000826 <hpt_init>
    vspt_init();
    80003580:	934fd0ef          	jal	800006b4 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    goto_priv(PRIV_M);
    80003584:	4511                	li	a0,4
    80003586:	d58fd0ef          	jal	80000ade <goto_priv>

    TEST_SETUP_EXCEPT();
    8000358a:	0ff0000f          	fence
    8000358e:	4785                	li	a5,1
    80003590:	0003a417          	auipc	s0,0x3a
    80003594:	a8040413          	add	s0,s0,-1408 # 8003d010 <excpt>
    80003598:	00f41023          	sh	a5,0(s0)
    8000359c:	0003a797          	auipc	a5,0x3a
    800035a0:	aa07b623          	sd	zero,-1364(a5) # 8003d048 <excpt+0x38>
    800035a4:	0ff0000f          	fence
    *((volatile uint64_t*) addr) = val;
    800035a8:	00020917          	auipc	s2,0x20
    800035ac:	ab090913          	add	s2,s2,-1360 # 80023058 <__func__.1+0x6860>
    800035b0:	00093703          	ld	a4,0(s2)
    800035b4:	440197b7          	lui	a5,0x44019
    800035b8:	0786                	sll	a5,a5,0x1
    if(curr_priv != PRIV_M){
    800035ba:	00022497          	auipc	s1,0x22
    800035be:	ada48493          	add	s1,s1,-1318 # 80025094 <curr_priv>
    800035c2:	e398                	sd	a4,0(a5)
    800035c4:	4098                	lw	a4,0(s1)
    800035c6:	4791                	li	a5,4
    800035c8:	02f70763          	beq	a4,a5,800035f6 <m_and_hs_using_vs_access_3+0xa4>
        ERROR("trying to read as mprv from low privilege");
    800035cc:	0001a517          	auipc	a0,0x1a
    800035d0:	b5450513          	add	a0,a0,-1196 # 8001d120 <__func__.1+0x928>
    800035d4:	18f170ef          	jal	8001af62 <printf>
    800035d8:	0b000613          	li	a2,176
    800035dc:	00018597          	auipc	a1,0x18
    800035e0:	f5458593          	add	a1,a1,-172 # 8001b530 <__func__.11>
    800035e4:	00019517          	auipc	a0,0x19
    800035e8:	68450513          	add	a0,a0,1668 # 8001cc68 <__func__.1+0x470>
    800035ec:	177170ef          	jal	8001af62 <printf>
    800035f0:	4501                	li	a0,0
    800035f2:	60e170ef          	jal	8001ac00 <exit>
    set_prev_priv(priv);
    800035f6:	4509                	li	a0,2
    800035f8:	c0afd0ef          	jal	80000a02 <set_prev_priv>
    asm volatile(
    800035fc:	000807b7          	lui	a5,0x80
    80003600:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80003602:	07b6                	sll	a5,a5,0xd
    80003604:	00020737          	lui	a4,0x20
    80003608:	30072073          	csrs	mstatus,a4
    8000360c:	6394                	ld	a3,0(a5)
    8000360e:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine mprv vs access to vu leads to exception",
    80003612:	08200593          	li	a1,130
    80003616:	0001a617          	auipc	a2,0x1a
    8000361a:	c8a60613          	add	a2,a2,-886 # 8001d2a0 <__func__.1+0xaa8>
    8000361e:	00019517          	auipc	a0,0x19
    80003622:	4da50513          	add	a0,a0,1242 # 8001caf8 <__func__.1+0x300>
    80003626:	13d170ef          	jal	8001af62 <printf>
    8000362a:	00144783          	lbu	a5,1(s0)
    8000362e:	00019597          	auipc	a1,0x19
    80003632:	4a258593          	add	a1,a1,1186 # 8001cad0 <__func__.1+0x2d8>
    80003636:	cb89                	beqz	a5,80003648 <m_and_hs_using_vs_access_3+0xf6>
    80003638:	6418                	ld	a4,8(s0)
    8000363a:	47b5                	li	a5,13
    8000363c:	00f71663          	bne	a4,a5,80003648 <m_and_hs_using_vs_access_3+0xf6>
    80003640:	00019597          	auipc	a1,0x19
    80003644:	48058593          	add	a1,a1,1152 # 8001cac0 <__func__.1+0x2c8>
    80003648:	00019517          	auipc	a0,0x19
    8000364c:	4c850513          	add	a0,a0,1224 # 8001cb10 <__func__.1+0x318>
    80003650:	113170ef          	jal	8001af62 <printf>
    80003654:	00144783          	lbu	a5,1(s0)
    80003658:	c789                	beqz	a5,80003662 <m_and_hs_using_vs_access_3+0x110>
    8000365a:	6418                	ld	a4,8(s0)
    8000365c:	47b5                	li	a5,13
    8000365e:	00f70c63          	beq	a4,a5,80003676 <m_and_hs_using_vs_access_3+0x124>
    80003662:	00019517          	auipc	a0,0x19
    80003666:	4b650513          	add	a0,a0,1206 # 8001cb18 <__func__.1+0x320>
    8000366a:	0f9170ef          	jal	8001af62 <printf>
    8000366e:	02900513          	li	a0,41
    80003672:	7c2160ef          	jal	80019e34 <putchar>
    80003676:	4529                	li	a0,10
    80003678:	7bc160ef          	jal	80019e34 <putchar>
    8000367c:	00144783          	lbu	a5,1(s0)
    80003680:	4981                	li	s3,0
    80003682:	c791                	beqz	a5,8000368e <m_and_hs_using_vs_access_3+0x13c>
    80003684:	00843983          	ld	s3,8(s0)
    80003688:	19cd                	add	s3,s3,-13
    8000368a:	0019b993          	seqz	s3,s3
        excpt.triggered == true&& 
        excpt.cause == CAUSE_LPF 
    );

    TEST_SETUP_EXCEPT();
    8000368e:	0ff0000f          	fence
    80003692:	4785                	li	a5,1
    80003694:	00f41023          	sh	a5,0(s0)
    80003698:	0003a797          	auipc	a5,0x3a
    8000369c:	9a07b823          	sd	zero,-1616(a5) # 8003d048 <excpt+0x38>
    800036a0:	0ff0000f          	fence
    800036a4:	00093703          	ld	a4,0(s2)
    800036a8:	440197b7          	lui	a5,0x44019
    800036ac:	0786                	sll	a5,a5,0x1
    800036ae:	e398                	sd	a4,0(a5)
    if(curr_priv != PRIV_M){
    800036b0:	4098                	lw	a4,0(s1)
    800036b2:	4791                	li	a5,4
    800036b4:	f0f71ce3          	bne	a4,a5,800035cc <m_and_hs_using_vs_access_3+0x7a>
    set_prev_priv(priv);
    800036b8:	4501                	li	a0,0
    800036ba:	b48fd0ef          	jal	80000a02 <set_prev_priv>
    asm volatile(
    800036be:	000807b7          	lui	a5,0x80
    800036c2:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800036c4:	07b6                	sll	a5,a5,0xd
    800036c6:	00020737          	lui	a4,0x20
    800036ca:	30072073          	csrs	mstatus,a4
    800036ce:	6394                	ld	a3,0(a5)
    800036d0:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VU, vaddr);
    TEST_ASSERT("machine mprv vu access to vu successful",
    800036d4:	08200593          	li	a1,130
    800036d8:	0001a617          	auipc	a2,0x1a
    800036dc:	bf860613          	add	a2,a2,-1032 # 8001d2d0 <__func__.1+0xad8>
    800036e0:	00019517          	auipc	a0,0x19
    800036e4:	41850513          	add	a0,a0,1048 # 8001caf8 <__func__.1+0x300>
    800036e8:	07b170ef          	jal	8001af62 <printf>
    800036ec:	00144783          	lbu	a5,1(s0)
    800036f0:	00019597          	auipc	a1,0x19
    800036f4:	3e058593          	add	a1,a1,992 # 8001cad0 <__func__.1+0x2d8>
    800036f8:	e789                	bnez	a5,80003702 <m_and_hs_using_vs_access_3+0x1b0>
    800036fa:	00019597          	auipc	a1,0x19
    800036fe:	3c658593          	add	a1,a1,966 # 8001cac0 <__func__.1+0x2c8>
    80003702:	00019517          	auipc	a0,0x19
    80003706:	40e50513          	add	a0,a0,1038 # 8001cb10 <__func__.1+0x318>
    8000370a:	059170ef          	jal	8001af62 <printf>
    8000370e:	00144783          	lbu	a5,1(s0)
    80003712:	e7b9                	bnez	a5,80003760 <m_and_hs_using_vs_access_3+0x20e>
    80003714:	4529                	li	a0,10
    80003716:	71e160ef          	jal	80019e34 <putchar>
    8000371a:	00098563          	beqz	s3,80003724 <m_and_hs_using_vs_access_3+0x1d2>
    8000371e:	00144783          	lbu	a5,1(s0)
    80003722:	cb8d                	beqz	a5,80003754 <m_and_hs_using_vs_access_3+0x202>
    80003724:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80003726:	00019597          	auipc	a1,0x19
    8000372a:	3aa58593          	add	a1,a1,938 # 8001cad0 <__func__.1+0x2d8>
    8000372e:	00019517          	auipc	a0,0x19
    80003732:	44a50513          	add	a0,a0,1098 # 8001cb78 <__func__.1+0x380>
    80003736:	02d170ef          	jal	8001af62 <printf>
    8000373a:	4511                	li	a0,4
    8000373c:	ba2fd0ef          	jal	80000ade <goto_priv>
    80003740:	be7fd0ef          	jal	80001326 <reset_state>
}
    80003744:	70a2                	ld	ra,40(sp)
    80003746:	8522                	mv	a0,s0
    80003748:	7402                	ld	s0,32(sp)
    8000374a:	64e2                	ld	s1,24(sp)
    8000374c:	6942                	ld	s2,16(sp)
    8000374e:	69a2                	ld	s3,8(sp)
    80003750:	6145                	add	sp,sp,48
    80003752:	8082                	ret
    TEST_ASSERT("machine mprv vu access to vu successful",
    80003754:	4405                	li	s0,1
    TEST_END();
    80003756:	00019597          	auipc	a1,0x19
    8000375a:	36a58593          	add	a1,a1,874 # 8001cac0 <__func__.1+0x2c8>
    8000375e:	bfc1                	j	8000372e <m_and_hs_using_vs_access_3+0x1dc>
    TEST_ASSERT("machine mprv vu access to vu successful",
    80003760:	00019517          	auipc	a0,0x19
    80003764:	3b850513          	add	a0,a0,952 # 8001cb18 <__func__.1+0x320>
    80003768:	7fa170ef          	jal	8001af62 <printf>
    8000376c:	02900513          	li	a0,41
    80003770:	6c4160ef          	jal	80019e34 <putchar>
    80003774:	b745                	j	80003714 <m_and_hs_using_vs_access_3+0x1c2>

0000000080003776 <m_and_hs_using_vs_access_4>:

bool m_and_hs_using_vs_access_4(){
    80003776:	1101                	add	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80003778:	00018597          	auipc	a1,0x18
    8000377c:	e0858593          	add	a1,a1,-504 # 8001b580 <__func__.8>
    80003780:	00019517          	auipc	a0,0x19
    80003784:	36050513          	add	a0,a0,864 # 8001cae0 <__func__.1+0x2e8>
bool m_and_hs_using_vs_access_4(){
    80003788:	ec06                	sd	ra,24(sp)
    8000378a:	e822                	sd	s0,16(sp)
    8000378c:	e426                	sd	s1,8(sp)
    8000378e:	e04a                	sd	s2,0(sp)
    TEST_START();
    80003790:	7d2170ef          	jal	8001af62 <printf>
    80003794:	4529                	li	a0,10
    80003796:	69e160ef          	jal	80019e34 <putchar>
    
    hspt_init();
    8000379a:	e47fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    8000379e:	888fd0ef          	jal	80000826 <hpt_init>
    vspt_init();
    800037a2:	f13fc0ef          	jal	800006b4 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    goto_priv(PRIV_HS);
    800037a6:	450d                	li	a0,3
    800037a8:	b36fd0ef          	jal	80000ade <goto_priv>

    set_prev_priv(PRIV_VU);
    800037ac:	4501                	li	a0,0
    800037ae:	a54fd0ef          	jal	80000a02 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    800037b2:	0ff0000f          	fence
    800037b6:	4785                	li	a5,1
    800037b8:	0003a417          	auipc	s0,0x3a
    800037bc:	85840413          	add	s0,s0,-1960 # 8003d010 <excpt>
    800037c0:	00f41023          	sh	a5,0(s0)
    800037c4:	0003a797          	auipc	a5,0x3a
    800037c8:	8807b223          	sd	zero,-1916(a5) # 8003d048 <excpt+0x38>
    800037cc:	0ff0000f          	fence
    800037d0:	00020497          	auipc	s1,0x20
    800037d4:	88848493          	add	s1,s1,-1912 # 80023058 <__func__.1+0x6860>
    800037d8:	6094                	ld	a3,0(s1)
    asm volatile(
    800037da:	000807b7          	lui	a5,0x80
    800037de:	44019737          	lui	a4,0x44019
    800037e2:	0706                	sll	a4,a4,0x1
    800037e4:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800037e6:	e314                	sd	a3,0(a4)
    800037e8:	07b6                	sll	a5,a5,0xd
    800037ea:	6c07c7f3          	.4byte	0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    800037ee:	08200593          	li	a1,130
    800037f2:	0001a617          	auipc	a2,0x1a
    800037f6:	b0660613          	add	a2,a2,-1274 # 8001d2f8 <__func__.1+0xb00>
    800037fa:	00019517          	auipc	a0,0x19
    800037fe:	2fe50513          	add	a0,a0,766 # 8001caf8 <__func__.1+0x300>
    80003802:	760170ef          	jal	8001af62 <printf>
    80003806:	00144783          	lbu	a5,1(s0)
    8000380a:	00019597          	auipc	a1,0x19
    8000380e:	2b658593          	add	a1,a1,694 # 8001cac0 <__func__.1+0x2c8>
    80003812:	c789                	beqz	a5,8000381c <m_and_hs_using_vs_access_4+0xa6>
    80003814:	00019597          	auipc	a1,0x19
    80003818:	2bc58593          	add	a1,a1,700 # 8001cad0 <__func__.1+0x2d8>
    8000381c:	00019517          	auipc	a0,0x19
    80003820:	2f450513          	add	a0,a0,756 # 8001cb10 <__func__.1+0x318>
    80003824:	73e170ef          	jal	8001af62 <printf>
    80003828:	00144783          	lbu	a5,1(s0)
    8000382c:	0e079763          	bnez	a5,8000391a <m_and_hs_using_vs_access_4+0x1a4>
    80003830:	4529                	li	a0,10
    80003832:	602160ef          	jal	80019e34 <putchar>
        excpt.triggered == false
    );

    set_prev_priv(PRIV_VS);
    80003836:	4509                	li	a0,2
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    80003838:	00144903          	lbu	s2,1(s0)
    set_prev_priv(PRIV_VS);
    8000383c:	9c6fd0ef          	jal	80000a02 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    80003840:	0ff0000f          	fence
    80003844:	4785                	li	a5,1
    80003846:	00f41023          	sh	a5,0(s0)
    8000384a:	00039797          	auipc	a5,0x39
    8000384e:	7e07bf23          	sd	zero,2046(a5) # 8003d048 <excpt+0x38>
    80003852:	0ff0000f          	fence
    80003856:	6094                	ld	a3,0(s1)
    80003858:	000807b7          	lui	a5,0x80
    8000385c:	44019737          	lui	a4,0x44019
    80003860:	0706                	sll	a4,a4,0x1
    80003862:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80003864:	e314                	sd	a3,0(a4)
    80003866:	07b6                	sll	a5,a5,0xd
    80003868:	6c07c7f3          	.4byte	0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    8000386c:	08200593          	li	a1,130
    80003870:	0001a617          	auipc	a2,0x1a
    80003874:	ab860613          	add	a2,a2,-1352 # 8001d328 <__func__.1+0xb30>
    80003878:	00019517          	auipc	a0,0x19
    8000387c:	28050513          	add	a0,a0,640 # 8001caf8 <__func__.1+0x300>
    80003880:	6e2170ef          	jal	8001af62 <printf>
    80003884:	00144783          	lbu	a5,1(s0)
    80003888:	00019597          	auipc	a1,0x19
    8000388c:	24858593          	add	a1,a1,584 # 8001cad0 <__func__.1+0x2d8>
    80003890:	c789                	beqz	a5,8000389a <m_and_hs_using_vs_access_4+0x124>
    80003892:	6418                	ld	a4,8(s0)
    80003894:	47b5                	li	a5,13
    80003896:	08f70d63          	beq	a4,a5,80003930 <m_and_hs_using_vs_access_4+0x1ba>
    8000389a:	00019517          	auipc	a0,0x19
    8000389e:	27650513          	add	a0,a0,630 # 8001cb10 <__func__.1+0x318>
    800038a2:	6c0170ef          	jal	8001af62 <printf>
    800038a6:	00144783          	lbu	a5,1(s0)
    800038aa:	c789                	beqz	a5,800038b4 <m_and_hs_using_vs_access_4+0x13e>
    800038ac:	6418                	ld	a4,8(s0)
    800038ae:	47b5                	li	a5,13
    800038b0:	00f70c63          	beq	a4,a5,800038c8 <m_and_hs_using_vs_access_4+0x152>
    800038b4:	00019517          	auipc	a0,0x19
    800038b8:	26450513          	add	a0,a0,612 # 8001cb18 <__func__.1+0x320>
    800038bc:	6a6170ef          	jal	8001af62 <printf>
    800038c0:	02900513          	li	a0,41
    800038c4:	570160ef          	jal	80019e34 <putchar>
    800038c8:	4529                	li	a0,10
    800038ca:	56a160ef          	jal	80019e34 <putchar>
    800038ce:	04091063          	bnez	s2,8000390e <m_and_hs_using_vs_access_4+0x198>
    800038d2:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true&& 
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    800038d6:	00019597          	auipc	a1,0x19
    800038da:	1fa58593          	add	a1,a1,506 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    800038de:	c491                	beqz	s1,800038ea <m_and_hs_using_vs_access_4+0x174>
    800038e0:	6418                	ld	a4,8(s0)
    800038e2:	47b5                	li	a5,13
    800038e4:	04f70b63          	beq	a4,a5,8000393a <m_and_hs_using_vs_access_4+0x1c4>
    800038e8:	4481                	li	s1,0
    TEST_END();
    800038ea:	00019517          	auipc	a0,0x19
    800038ee:	28e50513          	add	a0,a0,654 # 8001cb78 <__func__.1+0x380>
    800038f2:	670170ef          	jal	8001af62 <printf>
    800038f6:	4511                	li	a0,4
    800038f8:	9e6fd0ef          	jal	80000ade <goto_priv>
    800038fc:	a2bfd0ef          	jal	80001326 <reset_state>
}
    80003900:	60e2                	ld	ra,24(sp)
    80003902:	6442                	ld	s0,16(sp)
    80003904:	6902                	ld	s2,0(sp)
    80003906:	8526                	mv	a0,s1
    80003908:	64a2                	ld	s1,8(sp)
    8000390a:	6105                	add	sp,sp,32
    8000390c:	8082                	ret
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    8000390e:	4481                	li	s1,0
    TEST_END();
    80003910:	00019597          	auipc	a1,0x19
    80003914:	1c058593          	add	a1,a1,448 # 8001cad0 <__func__.1+0x2d8>
    80003918:	bfc9                	j	800038ea <m_and_hs_using_vs_access_4+0x174>
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    8000391a:	00019517          	auipc	a0,0x19
    8000391e:	1fe50513          	add	a0,a0,510 # 8001cb18 <__func__.1+0x320>
    80003922:	640170ef          	jal	8001af62 <printf>
    80003926:	02900513          	li	a0,41
    8000392a:	50a160ef          	jal	80019e34 <putchar>
    8000392e:	b709                	j	80003830 <m_and_hs_using_vs_access_4+0xba>
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    80003930:	00019597          	auipc	a1,0x19
    80003934:	19058593          	add	a1,a1,400 # 8001cac0 <__func__.1+0x2c8>
    80003938:	b78d                	j	8000389a <m_and_hs_using_vs_access_4+0x124>
    TEST_END();
    8000393a:	00019597          	auipc	a1,0x19
    8000393e:	18658593          	add	a1,a1,390 # 8001cac0 <__func__.1+0x2c8>
    80003942:	b765                	j	800038ea <m_and_hs_using_vs_access_4+0x174>

0000000080003944 <m_and_hs_using_vs_access_5>:

bool m_and_hs_using_vs_access_5(){
    80003944:	1101                	add	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80003946:	00018597          	auipc	a1,0x18
    8000394a:	c5a58593          	add	a1,a1,-934 # 8001b5a0 <__func__.7>
    8000394e:	00019517          	auipc	a0,0x19
    80003952:	19250513          	add	a0,a0,402 # 8001cae0 <__func__.1+0x2e8>
bool m_and_hs_using_vs_access_5(){
    80003956:	ec06                	sd	ra,24(sp)
    80003958:	e822                	sd	s0,16(sp)
    8000395a:	e426                	sd	s1,8(sp)
    8000395c:	e04a                	sd	s2,0(sp)
    TEST_START();
    8000395e:	604170ef          	jal	8001af62 <printf>
    80003962:	4529                	li	a0,10
    80003964:	4d0160ef          	jal	80019e34 <putchar>
    
    hspt_init();
    80003968:	c79fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    8000396c:	ebbfc0ef          	jal	80000826 <hpt_init>
    vspt_init();
    80003970:	d45fc0ef          	jal	800006b4 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);


    goto_priv(PRIV_M);
    80003974:	4511                	li	a0,4
    80003976:	968fd0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    8000397a:	000407b7          	lui	a5,0x40
    8000397e:	2007a073          	csrs	vsstatus,a5

    TEST_SETUP_EXCEPT();
    80003982:	0ff0000f          	fence
    80003986:	4785                	li	a5,1
    80003988:	00039417          	auipc	s0,0x39
    8000398c:	68840413          	add	s0,s0,1672 # 8003d010 <excpt>
    80003990:	00f41023          	sh	a5,0(s0)
    80003994:	00039797          	auipc	a5,0x39
    80003998:	6a07ba23          	sd	zero,1716(a5) # 8003d048 <excpt+0x38>
    8000399c:	0ff0000f          	fence
    800039a0:	440197b7          	lui	a5,0x44019
    800039a4:	0786                	sll	a5,a5,0x1
    800039a6:	0001f497          	auipc	s1,0x1f
    800039aa:	6b24b483          	ld	s1,1714(s1) # 80023058 <__func__.1+0x6860>
    800039ae:	e384                	sd	s1,0(a5)
    if(curr_priv != PRIV_M){
    800039b0:	00021717          	auipc	a4,0x21
    800039b4:	6e472703          	lw	a4,1764(a4) # 80025094 <curr_priv>
    800039b8:	4791                	li	a5,4
    800039ba:	02f70763          	beq	a4,a5,800039e8 <m_and_hs_using_vs_access_5+0xa4>
        ERROR("trying to read as mprv from low privilege");
    800039be:	00019517          	auipc	a0,0x19
    800039c2:	76250513          	add	a0,a0,1890 # 8001d120 <__func__.1+0x928>
    800039c6:	59c170ef          	jal	8001af62 <printf>
    800039ca:	0b000613          	li	a2,176
    800039ce:	00018597          	auipc	a1,0x18
    800039d2:	b6258593          	add	a1,a1,-1182 # 8001b530 <__func__.11>
    800039d6:	00019517          	auipc	a0,0x19
    800039da:	29250513          	add	a0,a0,658 # 8001cc68 <__func__.1+0x470>
    800039de:	584170ef          	jal	8001af62 <printf>
    800039e2:	4501                	li	a0,0
    800039e4:	21c170ef          	jal	8001ac00 <exit>
    set_prev_priv(priv);
    800039e8:	4509                	li	a0,2
    800039ea:	818fd0ef          	jal	80000a02 <set_prev_priv>
    asm volatile(
    800039ee:	000807b7          	lui	a5,0x80
    800039f2:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800039f4:	07b6                	sll	a5,a5,0xd
    800039f6:	00020737          	lui	a4,0x20
    800039fa:	30072073          	csrs	mstatus,a4
    800039fe:	0007b903          	ld	s2,0(a5)
    80003a02:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine mprv access vs user page successful when vsstatus.sum set",
    80003a06:	0001a617          	auipc	a2,0x1a
    80003a0a:	95a60613          	add	a2,a2,-1702 # 8001d360 <__func__.1+0xb68>
    80003a0e:	08200593          	li	a1,130
    80003a12:	00019517          	auipc	a0,0x19
    80003a16:	0e650513          	add	a0,a0,230 # 8001caf8 <__func__.1+0x300>
    80003a1a:	548170ef          	jal	8001af62 <printf>
    80003a1e:	00144783          	lbu	a5,1(s0)
    80003a22:	ebb5                	bnez	a5,80003a96 <m_and_hs_using_vs_access_5+0x152>
    80003a24:	0a990463          	beq	s2,s1,80003acc <m_and_hs_using_vs_access_5+0x188>
    80003a28:	00019597          	auipc	a1,0x19
    80003a2c:	0a858593          	add	a1,a1,168 # 8001cad0 <__func__.1+0x2d8>
    80003a30:	00019517          	auipc	a0,0x19
    80003a34:	0e050513          	add	a0,a0,224 # 8001cb10 <__func__.1+0x318>
    80003a38:	52a170ef          	jal	8001af62 <printf>
    80003a3c:	00019517          	auipc	a0,0x19
    80003a40:	0dc50513          	add	a0,a0,220 # 8001cb18 <__func__.1+0x320>
    80003a44:	51e170ef          	jal	8001af62 <printf>
    80003a48:	02900513          	li	a0,41
    80003a4c:	3e8160ef          	jal	80019e34 <putchar>
    80003a50:	4529                	li	a0,10
    80003a52:	3e2160ef          	jal	80019e34 <putchar>
    80003a56:	00144783          	lbu	a5,1(s0)
    80003a5a:	e799                	bnez	a5,80003a68 <m_and_hs_using_vs_access_5+0x124>
    80003a5c:	0001f797          	auipc	a5,0x1f
    80003a60:	5fc7b783          	ld	a5,1532(a5) # 80023058 <__func__.1+0x6860>
    80003a64:	04f90e63          	beq	s2,a5,80003ac0 <m_and_hs_using_vs_access_5+0x17c>
    80003a68:	4401                	li	s0,0
        excpt.triggered == false && val == 0x1107ec0ffee
    );
    TEST_END();
    80003a6a:	00019597          	auipc	a1,0x19
    80003a6e:	06658593          	add	a1,a1,102 # 8001cad0 <__func__.1+0x2d8>
    80003a72:	00019517          	auipc	a0,0x19
    80003a76:	10650513          	add	a0,a0,262 # 8001cb78 <__func__.1+0x380>
    80003a7a:	4e8170ef          	jal	8001af62 <printf>
    80003a7e:	4511                	li	a0,4
    80003a80:	85efd0ef          	jal	80000ade <goto_priv>
    80003a84:	8a3fd0ef          	jal	80001326 <reset_state>
}
    80003a88:	60e2                	ld	ra,24(sp)
    80003a8a:	8522                	mv	a0,s0
    80003a8c:	6442                	ld	s0,16(sp)
    80003a8e:	64a2                	ld	s1,8(sp)
    80003a90:	6902                	ld	s2,0(sp)
    80003a92:	6105                	add	sp,sp,32
    80003a94:	8082                	ret
    TEST_ASSERT("machine mprv access vs user page successful when vsstatus.sum set",
    80003a96:	00019597          	auipc	a1,0x19
    80003a9a:	03a58593          	add	a1,a1,58 # 8001cad0 <__func__.1+0x2d8>
    80003a9e:	00019517          	auipc	a0,0x19
    80003aa2:	07250513          	add	a0,a0,114 # 8001cb10 <__func__.1+0x318>
    80003aa6:	4bc170ef          	jal	8001af62 <printf>
    80003aaa:	00144783          	lbu	a5,1(s0)
    80003aae:	f7d9                	bnez	a5,80003a3c <m_and_hs_using_vs_access_5+0xf8>
    80003ab0:	f89916e3          	bne	s2,s1,80003a3c <m_and_hs_using_vs_access_5+0xf8>
    80003ab4:	4529                	li	a0,10
    80003ab6:	37e160ef          	jal	80019e34 <putchar>
    80003aba:	00144783          	lbu	a5,1(s0)
    80003abe:	f7cd                	bnez	a5,80003a68 <m_and_hs_using_vs_access_5+0x124>
    80003ac0:	4405                	li	s0,1
    TEST_END();
    80003ac2:	00019597          	auipc	a1,0x19
    80003ac6:	ffe58593          	add	a1,a1,-2 # 8001cac0 <__func__.1+0x2c8>
    80003aca:	b765                	j	80003a72 <m_and_hs_using_vs_access_5+0x12e>
    TEST_ASSERT("machine mprv access vs user page successful when vsstatus.sum set",
    80003acc:	00019597          	auipc	a1,0x19
    80003ad0:	ff458593          	add	a1,a1,-12 # 8001cac0 <__func__.1+0x2c8>
    80003ad4:	00019517          	auipc	a0,0x19
    80003ad8:	03c50513          	add	a0,a0,60 # 8001cb10 <__func__.1+0x318>
    80003adc:	486170ef          	jal	8001af62 <printf>
    80003ae0:	00144783          	lbu	a5,1(s0)
    80003ae4:	dbe1                	beqz	a5,80003ab4 <m_and_hs_using_vs_access_5+0x170>
    80003ae6:	bf99                	j	80003a3c <m_and_hs_using_vs_access_5+0xf8>

0000000080003ae8 <m_and_hs_using_vs_access_6>:

bool m_and_hs_using_vs_access_6(){
    80003ae8:	1101                	add	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80003aea:	00018597          	auipc	a1,0x18
    80003aee:	ad658593          	add	a1,a1,-1322 # 8001b5c0 <__func__.6>
    80003af2:	00019517          	auipc	a0,0x19
    80003af6:	fee50513          	add	a0,a0,-18 # 8001cae0 <__func__.1+0x2e8>
bool m_and_hs_using_vs_access_6(){
    80003afa:	ec06                	sd	ra,24(sp)
    80003afc:	e822                	sd	s0,16(sp)
    80003afe:	e426                	sd	s1,8(sp)
    80003b00:	e04a                	sd	s2,0(sp)
    TEST_START();
    80003b02:	460170ef          	jal	8001af62 <printf>
    80003b06:	4529                	li	a0,10
    80003b08:	32c160ef          	jal	80019e34 <putchar>
    
    hspt_init();
    80003b0c:	ad5fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80003b10:	d17fc0ef          	jal	80000826 <hpt_init>
    vspt_init();
    80003b14:	ba1fc0ef          	jal	800006b4 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80003b18:	000407b7          	lui	a5,0x40
    80003b1c:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    80003b20:	450d                	li	a0,3
    80003b22:	fbdfc0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80003b26:	4509                	li	a0,2
    80003b28:	edbfc0ef          	jal	80000a02 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    80003b2c:	0ff0000f          	fence
    80003b30:	4785                	li	a5,1
    80003b32:	00039497          	auipc	s1,0x39
    80003b36:	4de48493          	add	s1,s1,1246 # 8003d010 <excpt>
    80003b3a:	00f49023          	sh	a5,0(s1)
    80003b3e:	00039797          	auipc	a5,0x39
    80003b42:	5007b523          	sd	zero,1290(a5) # 8003d048 <excpt+0x38>
    80003b46:	0ff0000f          	fence
    80003b4a:	00080437          	lui	s0,0x80
    80003b4e:	440197b7          	lui	a5,0x44019
    80003b52:	0001f917          	auipc	s2,0x1f
    80003b56:	50693903          	ld	s2,1286(s2) # 80023058 <__func__.1+0x6860>
    80003b5a:	0786                	sll	a5,a5,0x1
    80003b5c:	0465                	add	s0,s0,25 # 80019 <_test_table_size+0x80018>
    80003b5e:	0127b023          	sd	s2,0(a5) # 44019000 <STACK_SIZE+0x43f19000>
    80003b62:	0436                	sll	s0,s0,0xd
    80003b64:	6c044473          	.4byte	0x6c044473
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    80003b68:	0001a617          	auipc	a2,0x1a
    80003b6c:	84060613          	add	a2,a2,-1984 # 8001d3a8 <__func__.1+0xbb0>
    80003b70:	08200593          	li	a1,130
    80003b74:	00019517          	auipc	a0,0x19
    80003b78:	f8450513          	add	a0,a0,-124 # 8001caf8 <__func__.1+0x300>
    80003b7c:	3e6170ef          	jal	8001af62 <printf>
    80003b80:	0014c783          	lbu	a5,1(s1)
    80003b84:	e7ad                	bnez	a5,80003bee <m_and_hs_using_vs_access_6+0x106>
    80003b86:	0d240363          	beq	s0,s2,80003c4c <m_and_hs_using_vs_access_6+0x164>
    80003b8a:	00019597          	auipc	a1,0x19
    80003b8e:	f4658593          	add	a1,a1,-186 # 8001cad0 <__func__.1+0x2d8>
    80003b92:	00019517          	auipc	a0,0x19
    80003b96:	f7e50513          	add	a0,a0,-130 # 8001cb10 <__func__.1+0x318>
    80003b9a:	3c8170ef          	jal	8001af62 <printf>
    80003b9e:	00019517          	auipc	a0,0x19
    80003ba2:	f7a50513          	add	a0,a0,-134 # 8001cb18 <__func__.1+0x320>
    80003ba6:	3bc170ef          	jal	8001af62 <printf>
    80003baa:	02900513          	li	a0,41
    80003bae:	286160ef          	jal	80019e34 <putchar>
    80003bb2:	4529                	li	a0,10
    80003bb4:	280160ef          	jal	80019e34 <putchar>
        excpt.triggered == false && val == 0x1107ec0ffee
    );
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80003bb8:	000407b7          	lui	a5,0x40
    80003bbc:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    80003bc0:	4401                	li	s0,0

    TEST_END();
    80003bc2:	00019597          	auipc	a1,0x19
    80003bc6:	f0e58593          	add	a1,a1,-242 # 8001cad0 <__func__.1+0x2d8>
    80003bca:	00019517          	auipc	a0,0x19
    80003bce:	fae50513          	add	a0,a0,-82 # 8001cb78 <__func__.1+0x380>
    80003bd2:	390170ef          	jal	8001af62 <printf>
    80003bd6:	4511                	li	a0,4
    80003bd8:	f07fc0ef          	jal	80000ade <goto_priv>
    80003bdc:	f4afd0ef          	jal	80001326 <reset_state>
}
    80003be0:	60e2                	ld	ra,24(sp)
    80003be2:	8522                	mv	a0,s0
    80003be4:	6442                	ld	s0,16(sp)
    80003be6:	64a2                	ld	s1,8(sp)
    80003be8:	6902                	ld	s2,0(sp)
    80003bea:	6105                	add	sp,sp,32
    80003bec:	8082                	ret
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    80003bee:	00019597          	auipc	a1,0x19
    80003bf2:	ee258593          	add	a1,a1,-286 # 8001cad0 <__func__.1+0x2d8>
    80003bf6:	00019517          	auipc	a0,0x19
    80003bfa:	f1a50513          	add	a0,a0,-230 # 8001cb10 <__func__.1+0x318>
    80003bfe:	364170ef          	jal	8001af62 <printf>
    80003c02:	0014c783          	lbu	a5,1(s1)
    80003c06:	e399                	bnez	a5,80003c0c <m_and_hs_using_vs_access_6+0x124>
    80003c08:	05240f63          	beq	s0,s2,80003c66 <m_and_hs_using_vs_access_6+0x17e>
    80003c0c:	00019517          	auipc	a0,0x19
    80003c10:	f0c50513          	add	a0,a0,-244 # 8001cb18 <__func__.1+0x320>
    80003c14:	34e170ef          	jal	8001af62 <printf>
    80003c18:	02900513          	li	a0,41
    80003c1c:	218160ef          	jal	80019e34 <putchar>
    80003c20:	4529                	li	a0,10
    80003c22:	212160ef          	jal	80019e34 <putchar>
    80003c26:	0014c783          	lbu	a5,1(s1)
    80003c2a:	f7d9                	bnez	a5,80003bb8 <m_and_hs_using_vs_access_6+0xd0>
    80003c2c:	0001f797          	auipc	a5,0x1f
    80003c30:	42c7b783          	ld	a5,1068(a5) # 80023058 <__func__.1+0x6860>
    80003c34:	f8f412e3          	bne	s0,a5,80003bb8 <m_and_hs_using_vs_access_6+0xd0>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80003c38:	000407b7          	lui	a5,0x40
    80003c3c:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    80003c40:	4405                	li	s0,1
    TEST_END();
    80003c42:	00019597          	auipc	a1,0x19
    80003c46:	e7e58593          	add	a1,a1,-386 # 8001cac0 <__func__.1+0x2c8>
    80003c4a:	b741                	j	80003bca <m_and_hs_using_vs_access_6+0xe2>
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    80003c4c:	00019597          	auipc	a1,0x19
    80003c50:	e7458593          	add	a1,a1,-396 # 8001cac0 <__func__.1+0x2c8>
    80003c54:	00019517          	auipc	a0,0x19
    80003c58:	ebc50513          	add	a0,a0,-324 # 8001cb10 <__func__.1+0x318>
    80003c5c:	306170ef          	jal	8001af62 <printf>
    80003c60:	0014c783          	lbu	a5,1(s1)
    80003c64:	f7c5                	bnez	a5,80003c0c <m_and_hs_using_vs_access_6+0x124>
    80003c66:	4529                	li	a0,10
    80003c68:	1cc160ef          	jal	80019e34 <putchar>
    80003c6c:	0014c783          	lbu	a5,1(s1)
    80003c70:	f7a1                	bnez	a5,80003bb8 <m_and_hs_using_vs_access_6+0xd0>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80003c72:	000407b7          	lui	a5,0x40
    80003c76:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    80003c7a:	4405                	li	s0,1
    TEST_END();
    80003c7c:	00019597          	auipc	a1,0x19
    80003c80:	e4458593          	add	a1,a1,-444 # 8001cac0 <__func__.1+0x2c8>
    80003c84:	b799                	j	80003bca <m_and_hs_using_vs_access_6+0xe2>

0000000080003c86 <m_and_hs_using_vs_access_7>:

bool m_and_hs_using_vs_access_7(){
    80003c86:	1101                	add	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80003c88:	00018597          	auipc	a1,0x18
    80003c8c:	95858593          	add	a1,a1,-1704 # 8001b5e0 <__func__.5>
    80003c90:	00019517          	auipc	a0,0x19
    80003c94:	e5050513          	add	a0,a0,-432 # 8001cae0 <__func__.1+0x2e8>
bool m_and_hs_using_vs_access_7(){
    80003c98:	ec06                	sd	ra,24(sp)
    80003c9a:	e822                	sd	s0,16(sp)
    80003c9c:	e426                	sd	s1,8(sp)
    TEST_START();
    80003c9e:	2c4170ef          	jal	8001af62 <printf>
    80003ca2:	4529                	li	a0,10
    80003ca4:	190160ef          	jal	80019e34 <putchar>
    
    hspt_init();
    80003ca8:	939fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80003cac:	b7bfc0ef          	jal	80000826 <hpt_init>
    vspt_init();
    80003cb0:	a05fc0ef          	jal	800006b4 <vspt_init>

    vaddr = vs_page_base(VSX_GUX);
    addr = phys_page_base(VSX_GUX);

    goto_priv(PRIV_HS);
    80003cb4:	450d                	li	a0,3
    80003cb6:	e29fc0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80003cba:	4509                	li	a0,2
    80003cbc:	d47fc0ef          	jal	80000a02 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    80003cc0:	0ff0000f          	fence
    80003cc4:	4785                	li	a5,1
    80003cc6:	00039417          	auipc	s0,0x39
    80003cca:	34a40413          	add	s0,s0,842 # 8003d010 <excpt>
    80003cce:	00f41023          	sh	a5,0(s0)
    80003cd2:	00039797          	auipc	a5,0x39
    80003cd6:	3607bb23          	sd	zero,886(a5) # 8003d048 <excpt+0x38>
    80003cda:	0ff0000f          	fence
    80003cde:	200037b7          	lui	a5,0x20003
    80003ce2:	078e                	sll	a5,a5,0x3
    80003ce4:	6c07c7f3          	.4byte	0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page leads to exception",
    80003ce8:	08200593          	li	a1,130
    80003cec:	00019617          	auipc	a2,0x19
    80003cf0:	6f460613          	add	a2,a2,1780 # 8001d3e0 <__func__.1+0xbe8>
    80003cf4:	00019517          	auipc	a0,0x19
    80003cf8:	e0450513          	add	a0,a0,-508 # 8001caf8 <__func__.1+0x300>
    80003cfc:	266170ef          	jal	8001af62 <printf>
    80003d00:	00144783          	lbu	a5,1(s0)
    80003d04:	00019597          	auipc	a1,0x19
    80003d08:	dbc58593          	add	a1,a1,-580 # 8001cac0 <__func__.1+0x2c8>
    80003d0c:	e789                	bnez	a5,80003d16 <m_and_hs_using_vs_access_7+0x90>
    80003d0e:	00019597          	auipc	a1,0x19
    80003d12:	dc258593          	add	a1,a1,-574 # 8001cad0 <__func__.1+0x2d8>
    80003d16:	00019517          	auipc	a0,0x19
    80003d1a:	dfa50513          	add	a0,a0,-518 # 8001cb10 <__func__.1+0x318>
    80003d1e:	244170ef          	jal	8001af62 <printf>
    80003d22:	00144783          	lbu	a5,1(s0)
    80003d26:	0e078063          	beqz	a5,80003e06 <m_and_hs_using_vs_access_7+0x180>
    80003d2a:	4529                	li	a0,10
    80003d2c:	108160ef          	jal	80019e34 <putchar>
    80003d30:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true
    );
    TEST_SETUP_EXCEPT();
    80003d34:	0ff0000f          	fence
    80003d38:	4785                	li	a5,1
    80003d3a:	00f41023          	sh	a5,0(s0)
    80003d3e:	00039797          	auipc	a5,0x39
    80003d42:	3007b523          	sd	zero,778(a5) # 8003d048 <excpt+0x38>
    80003d46:	0ff0000f          	fence
    CSRS(sstatus, SSTATUS_MXR);
    80003d4a:	000807b7          	lui	a5,0x80
    80003d4e:	1007a073          	csrs	sstatus,a5
    80003d52:	200037b7          	lui	a5,0x20003
    80003d56:	078e                	sll	a5,a5,0x3
    80003d58:	6c07c7f3          	.4byte	0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    80003d5c:	08200593          	li	a1,130
    80003d60:	00019617          	auipc	a2,0x19
    80003d64:	6b060613          	add	a2,a2,1712 # 8001d410 <__func__.1+0xc18>
    80003d68:	00019517          	auipc	a0,0x19
    80003d6c:	d9050513          	add	a0,a0,-624 # 8001caf8 <__func__.1+0x300>
    80003d70:	1f2170ef          	jal	8001af62 <printf>
    80003d74:	00144783          	lbu	a5,1(s0)
    80003d78:	00019597          	auipc	a1,0x19
    80003d7c:	d5858593          	add	a1,a1,-680 # 8001cad0 <__func__.1+0x2d8>
    80003d80:	e789                	bnez	a5,80003d8a <m_and_hs_using_vs_access_7+0x104>
    80003d82:	00019597          	auipc	a1,0x19
    80003d86:	d3e58593          	add	a1,a1,-706 # 8001cac0 <__func__.1+0x2c8>
    80003d8a:	00019517          	auipc	a0,0x19
    80003d8e:	d8650513          	add	a0,a0,-634 # 8001cb10 <__func__.1+0x318>
    80003d92:	1d0170ef          	jal	8001af62 <printf>
    80003d96:	00144783          	lbu	a5,1(s0)
    80003d9a:	ebb9                	bnez	a5,80003df0 <m_and_hs_using_vs_access_7+0x16a>
    80003d9c:	4529                	li	a0,10
    80003d9e:	096160ef          	jal	80019e34 <putchar>
    80003da2:	c481                	beqz	s1,80003daa <m_and_hs_using_vs_access_7+0x124>
    80003da4:	00144783          	lbu	a5,1(s0)
    80003da8:	cb9d                	beqz	a5,80003dde <m_and_hs_using_vs_access_7+0x158>
        excpt.triggered == false
    );
    CSRC(sstatus, SSTATUS_MXR);
    80003daa:	000807b7          	lui	a5,0x80
    80003dae:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    80003db2:	4481                	li	s1,0

        TEST_END();
    80003db4:	00019597          	auipc	a1,0x19
    80003db8:	d1c58593          	add	a1,a1,-740 # 8001cad0 <__func__.1+0x2d8>
    80003dbc:	00019517          	auipc	a0,0x19
    80003dc0:	dbc50513          	add	a0,a0,-580 # 8001cb78 <__func__.1+0x380>
    80003dc4:	19e170ef          	jal	8001af62 <printf>
    80003dc8:	4511                	li	a0,4
    80003dca:	d15fc0ef          	jal	80000ade <goto_priv>
    80003dce:	d58fd0ef          	jal	80001326 <reset_state>
}
    80003dd2:	60e2                	ld	ra,24(sp)
    80003dd4:	6442                	ld	s0,16(sp)
    80003dd6:	8526                	mv	a0,s1
    80003dd8:	64a2                	ld	s1,8(sp)
    80003dda:	6105                	add	sp,sp,32
    80003ddc:	8082                	ret
    CSRC(sstatus, SSTATUS_MXR);
    80003dde:	000807b7          	lui	a5,0x80
    80003de2:	1007b073          	csrc	sstatus,a5
        TEST_END();
    80003de6:	00019597          	auipc	a1,0x19
    80003dea:	cda58593          	add	a1,a1,-806 # 8001cac0 <__func__.1+0x2c8>
    80003dee:	b7f9                	j	80003dbc <m_and_hs_using_vs_access_7+0x136>
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    80003df0:	00019517          	auipc	a0,0x19
    80003df4:	d2850513          	add	a0,a0,-728 # 8001cb18 <__func__.1+0x320>
    80003df8:	16a170ef          	jal	8001af62 <printf>
    80003dfc:	02900513          	li	a0,41
    80003e00:	034160ef          	jal	80019e34 <putchar>
    80003e04:	bf61                	j	80003d9c <m_and_hs_using_vs_access_7+0x116>
    TEST_ASSERT("hs hlvd of xo vs page leads to exception",
    80003e06:	00019517          	auipc	a0,0x19
    80003e0a:	d1250513          	add	a0,a0,-750 # 8001cb18 <__func__.1+0x320>
    80003e0e:	154170ef          	jal	8001af62 <printf>
    80003e12:	02900513          	li	a0,41
    80003e16:	01e160ef          	jal	80019e34 <putchar>
    80003e1a:	bf01                	j	80003d2a <m_and_hs_using_vs_access_7+0xa4>

0000000080003e1c <m_and_hs_using_vs_access_8>:

bool m_and_hs_using_vs_access_8(){
    80003e1c:	1101                	add	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80003e1e:	00017597          	auipc	a1,0x17
    80003e22:	7e258593          	add	a1,a1,2018 # 8001b600 <__func__.4>
    80003e26:	00019517          	auipc	a0,0x19
    80003e2a:	cba50513          	add	a0,a0,-838 # 8001cae0 <__func__.1+0x2e8>
bool m_and_hs_using_vs_access_8(){
    80003e2e:	ec06                	sd	ra,24(sp)
    80003e30:	e822                	sd	s0,16(sp)
    80003e32:	e426                	sd	s1,8(sp)
    TEST_START();
    80003e34:	12e170ef          	jal	8001af62 <printf>
    80003e38:	4529                	li	a0,10
    80003e3a:	7fb150ef          	jal	80019e34 <putchar>
    
    hspt_init();
    80003e3e:	fa2fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80003e42:	9e5fc0ef          	jal	80000826 <hpt_init>
    vspt_init();
    80003e46:	86ffc0ef          	jal	800006b4 <vspt_init>

    vaddr = vs_page_base(VSX_GUR);
    addr = phys_page_base(VSX_GUR);
    goto_priv(PRIV_HS);
    80003e4a:	450d                	li	a0,3
    80003e4c:	c93fc0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80003e50:	4509                	li	a0,2
    80003e52:	bb1fc0ef          	jal	80000a02 <set_prev_priv>
    CSRW(sscratch, 0x1111111);
    80003e56:	011117b7          	lui	a5,0x1111
    80003e5a:	1117879b          	addw	a5,a5,273 # 1111111 <STACK_SIZE+0x1011111>
    80003e5e:	14079073          	csrw	sscratch,a5
    TEST_SETUP_EXCEPT();
    80003e62:	0ff0000f          	fence
    80003e66:	4785                	li	a5,1
    80003e68:	00039417          	auipc	s0,0x39
    80003e6c:	1a840413          	add	s0,s0,424 # 8003d010 <excpt>
    80003e70:	00f41023          	sh	a5,0(s0)
    80003e74:	00039797          	auipc	a5,0x39
    80003e78:	1c07ba23          	sd	zero,468(a5) # 8003d048 <excpt+0x38>
    80003e7c:	0ff0000f          	fence
    80003e80:	001007b7          	lui	a5,0x100
    80003e84:	07dd                	add	a5,a5,23 # 100017 <STACK_SIZE+0x17>
    80003e86:	07b2                	sll	a5,a5,0xc
    80003e88:	6c07c7f3          	.4byte	0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page leads to load page fault",
    80003e8c:	08200593          	li	a1,130
    80003e90:	00019617          	auipc	a2,0x19
    80003e94:	5a860613          	add	a2,a2,1448 # 8001d438 <__func__.1+0xc40>
    80003e98:	00019517          	auipc	a0,0x19
    80003e9c:	c6050513          	add	a0,a0,-928 # 8001caf8 <__func__.1+0x300>
    80003ea0:	0c2170ef          	jal	8001af62 <printf>
    80003ea4:	00144783          	lbu	a5,1(s0)
    80003ea8:	00019597          	auipc	a1,0x19
    80003eac:	c2858593          	add	a1,a1,-984 # 8001cad0 <__func__.1+0x2d8>
    80003eb0:	c789                	beqz	a5,80003eba <m_and_hs_using_vs_access_8+0x9e>
    80003eb2:	6418                	ld	a4,8(s0)
    80003eb4:	47b5                	li	a5,13
    80003eb6:	10f70763          	beq	a4,a5,80003fc4 <m_and_hs_using_vs_access_8+0x1a8>
    80003eba:	00019517          	auipc	a0,0x19
    80003ebe:	c5650513          	add	a0,a0,-938 # 8001cb10 <__func__.1+0x318>
    80003ec2:	0a0170ef          	jal	8001af62 <printf>
    80003ec6:	00144783          	lbu	a5,1(s0)
    80003eca:	c789                	beqz	a5,80003ed4 <m_and_hs_using_vs_access_8+0xb8>
    80003ecc:	6418                	ld	a4,8(s0)
    80003ece:	47b5                	li	a5,13
    80003ed0:	00f70c63          	beq	a4,a5,80003ee8 <m_and_hs_using_vs_access_8+0xcc>
    80003ed4:	00019517          	auipc	a0,0x19
    80003ed8:	c4450513          	add	a0,a0,-956 # 8001cb18 <__func__.1+0x320>
    80003edc:	086170ef          	jal	8001af62 <printf>
    80003ee0:	02900513          	li	a0,41
    80003ee4:	751150ef          	jal	80019e34 <putchar>
    80003ee8:	4529                	li	a0,10
    80003eea:	74b150ef          	jal	80019e34 <putchar>
    80003eee:	00144783          	lbu	a5,1(s0)
    80003ef2:	4481                	li	s1,0
    80003ef4:	c789                	beqz	a5,80003efe <m_and_hs_using_vs_access_8+0xe2>
    80003ef6:	6404                	ld	s1,8(s0)
    80003ef8:	14cd                	add	s1,s1,-13
    80003efa:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    TEST_SETUP_EXCEPT();
    80003efe:	0ff0000f          	fence
    80003f02:	4785                	li	a5,1
    80003f04:	00f41023          	sh	a5,0(s0)
    80003f08:	00039797          	auipc	a5,0x39
    80003f0c:	1407b023          	sd	zero,320(a5) # 8003d048 <excpt+0x38>
    80003f10:	0ff0000f          	fence
    CSRS(CSR_VSSTATUS, SSTATUS_MXR);
    80003f14:	000807b7          	lui	a5,0x80
    80003f18:	2007a073          	csrs	vsstatus,a5
    80003f1c:	001007b7          	lui	a5,0x100
    80003f20:	07dd                	add	a5,a5,23 # 100017 <STACK_SIZE+0x17>
    80003f22:	07b2                	sll	a5,a5,0xc
    80003f24:	6c07c7f3          	.4byte	0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    80003f28:	08200593          	li	a1,130
    80003f2c:	00019617          	auipc	a2,0x19
    80003f30:	53c60613          	add	a2,a2,1340 # 8001d468 <__func__.1+0xc70>
    80003f34:	00019517          	auipc	a0,0x19
    80003f38:	bc450513          	add	a0,a0,-1084 # 8001caf8 <__func__.1+0x300>
    80003f3c:	026170ef          	jal	8001af62 <printf>
    80003f40:	00144783          	lbu	a5,1(s0)
    80003f44:	00019597          	auipc	a1,0x19
    80003f48:	b8c58593          	add	a1,a1,-1140 # 8001cad0 <__func__.1+0x2d8>
    80003f4c:	e789                	bnez	a5,80003f56 <m_and_hs_using_vs_access_8+0x13a>
    80003f4e:	00019597          	auipc	a1,0x19
    80003f52:	b7258593          	add	a1,a1,-1166 # 8001cac0 <__func__.1+0x2c8>
    80003f56:	00019517          	auipc	a0,0x19
    80003f5a:	bba50513          	add	a0,a0,-1094 # 8001cb10 <__func__.1+0x318>
    80003f5e:	004170ef          	jal	8001af62 <printf>
    80003f62:	00144783          	lbu	a5,1(s0)
    80003f66:	e7a1                	bnez	a5,80003fae <m_and_hs_using_vs_access_8+0x192>
    80003f68:	4529                	li	a0,10
    80003f6a:	6cb150ef          	jal	80019e34 <putchar>
    80003f6e:	c481                	beqz	s1,80003f76 <m_and_hs_using_vs_access_8+0x15a>
    80003f70:	00144783          	lbu	a5,1(s0)
    80003f74:	c79d                	beqz	a5,80003fa2 <m_and_hs_using_vs_access_8+0x186>
    80003f76:	4401                	li	s0,0
        excpt.triggered == false
    );


    TEST_END();
    80003f78:	00019597          	auipc	a1,0x19
    80003f7c:	b5858593          	add	a1,a1,-1192 # 8001cad0 <__func__.1+0x2d8>
    80003f80:	00019517          	auipc	a0,0x19
    80003f84:	bf850513          	add	a0,a0,-1032 # 8001cb78 <__func__.1+0x380>
    80003f88:	7db160ef          	jal	8001af62 <printf>
    80003f8c:	4511                	li	a0,4
    80003f8e:	b51fc0ef          	jal	80000ade <goto_priv>
    80003f92:	b94fd0ef          	jal	80001326 <reset_state>
}
    80003f96:	60e2                	ld	ra,24(sp)
    80003f98:	8522                	mv	a0,s0
    80003f9a:	6442                	ld	s0,16(sp)
    80003f9c:	64a2                	ld	s1,8(sp)
    80003f9e:	6105                	add	sp,sp,32
    80003fa0:	8082                	ret
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    80003fa2:	4405                	li	s0,1
    TEST_END();
    80003fa4:	00019597          	auipc	a1,0x19
    80003fa8:	b1c58593          	add	a1,a1,-1252 # 8001cac0 <__func__.1+0x2c8>
    80003fac:	bfd1                	j	80003f80 <m_and_hs_using_vs_access_8+0x164>
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    80003fae:	00019517          	auipc	a0,0x19
    80003fb2:	b6a50513          	add	a0,a0,-1174 # 8001cb18 <__func__.1+0x320>
    80003fb6:	7ad160ef          	jal	8001af62 <printf>
    80003fba:	02900513          	li	a0,41
    80003fbe:	677150ef          	jal	80019e34 <putchar>
    80003fc2:	b75d                	j	80003f68 <m_and_hs_using_vs_access_8+0x14c>
    TEST_ASSERT("hs hlvd of xo vs page leads to load page fault",
    80003fc4:	00019597          	auipc	a1,0x19
    80003fc8:	afc58593          	add	a1,a1,-1284 # 8001cac0 <__func__.1+0x2c8>
    80003fcc:	b5fd                	j	80003eba <m_and_hs_using_vs_access_8+0x9e>

0000000080003fce <m_and_hs_using_vs_access_9>:

bool m_and_hs_using_vs_access_9(){
    80003fce:	1101                	add	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80003fd0:	00017597          	auipc	a1,0x17
    80003fd4:	65058593          	add	a1,a1,1616 # 8001b620 <__func__.3>
    80003fd8:	00019517          	auipc	a0,0x19
    80003fdc:	b0850513          	add	a0,a0,-1272 # 8001cae0 <__func__.1+0x2e8>
bool m_and_hs_using_vs_access_9(){
    80003fe0:	ec06                	sd	ra,24(sp)
    80003fe2:	e822                	sd	s0,16(sp)
    80003fe4:	e426                	sd	s1,8(sp)
    TEST_START();
    80003fe6:	77d160ef          	jal	8001af62 <printf>
    80003fea:	4529                	li	a0,10
    80003fec:	649150ef          	jal	80019e34 <putchar>
    
    hspt_init();
    80003ff0:	df0fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80003ff4:	833fc0ef          	jal	80000826 <hpt_init>
    vspt_init();
    80003ff8:	ebcfc0ef          	jal	800006b4 <vspt_init>
    
    reset_state();
    80003ffc:	b2afd0ef          	jal	80001326 <reset_state>
    goto_priv(PRIV_HS);
    80004000:	450d                	li	a0,3
    80004002:	addfc0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80004006:	4509                	li	a0,2
    80004008:	9fbfc0ef          	jal	80000a02 <set_prev_priv>
    hpt_init();
    8000400c:	81bfc0ef          	jal	80000826 <hpt_init>
    
    vaddr = vs_page_base(VSI_GUR) ;
    TEST_SETUP_EXCEPT();
    80004010:	0ff0000f          	fence
    80004014:	4785                	li	a5,1
    80004016:	00039417          	auipc	s0,0x39
    8000401a:	ffa40413          	add	s0,s0,-6 # 8003d010 <excpt>
    8000401e:	00f41023          	sh	a5,0(s0)
    80004022:	00039797          	auipc	a5,0x39
    80004026:	0207b323          	sd	zero,38(a5) # 8003d048 <excpt+0x38>
    8000402a:	0ff0000f          	fence
    asm volatile(
    8000402e:	37ab77b7          	lui	a5,0x37ab7
    80004032:	00100737          	lui	a4,0x100
    80004036:	078a                	sll	a5,a5,0x2
    80004038:	06970713          	add	a4,a4,105 # 100069 <STACK_SIZE+0x69>
    8000403c:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80004040:	0732                	sll	a4,a4,0xc
    80004042:	62f74073          	.4byte	0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80004046:	640c                	ld	a1,8(s0)
    80004048:	00019517          	auipc	a0,0x19
    8000404c:	45850513          	add	a0,a0,1112 # 8001d4a0 <__func__.1+0xca8>
    80004050:	713160ef          	jal	8001af62 <printf>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    80004054:	08200593          	li	a1,130
    80004058:	00019617          	auipc	a2,0x19
    8000405c:	45060613          	add	a2,a2,1104 # 8001d4a8 <__func__.1+0xcb0>
    80004060:	00019517          	auipc	a0,0x19
    80004064:	a9850513          	add	a0,a0,-1384 # 8001caf8 <__func__.1+0x300>
    80004068:	6fb160ef          	jal	8001af62 <printf>
    8000406c:	00144783          	lbu	a5,1(s0)
    80004070:	00019597          	auipc	a1,0x19
    80004074:	a6058593          	add	a1,a1,-1440 # 8001cad0 <__func__.1+0x2d8>
    80004078:	c789                	beqz	a5,80004082 <m_and_hs_using_vs_access_9+0xb4>
    8000407a:	6418                	ld	a4,8(s0)
    8000407c:	47dd                	li	a5,23
    8000407e:	12f70363          	beq	a4,a5,800041a4 <m_and_hs_using_vs_access_9+0x1d6>
    80004082:	00019517          	auipc	a0,0x19
    80004086:	a8e50513          	add	a0,a0,-1394 # 8001cb10 <__func__.1+0x318>
    8000408a:	6d9160ef          	jal	8001af62 <printf>
    8000408e:	00144783          	lbu	a5,1(s0)
    80004092:	c789                	beqz	a5,8000409c <m_and_hs_using_vs_access_9+0xce>
    80004094:	6418                	ld	a4,8(s0)
    80004096:	47dd                	li	a5,23
    80004098:	0ef70363          	beq	a4,a5,8000417e <m_and_hs_using_vs_access_9+0x1b0>
    8000409c:	00019517          	auipc	a0,0x19
    800040a0:	a7c50513          	add	a0,a0,-1412 # 8001cb18 <__func__.1+0x320>
    800040a4:	6bf160ef          	jal	8001af62 <printf>
    800040a8:	02900513          	li	a0,41
    800040ac:	589150ef          	jal	80019e34 <putchar>
    800040b0:	4529                	li	a0,10
    800040b2:	583150ef          	jal	80019e34 <putchar>
    800040b6:	00144783          	lbu	a5,1(s0)
    800040ba:	4481                	li	s1,0
    800040bc:	c789                	beqz	a5,800040c6 <m_and_hs_using_vs_access_9+0xf8>
    800040be:	6418                	ld	a4,8(s0)
    800040c0:	47dd                	li	a5,23
    800040c2:	0ef70d63          	beq	a4,a5,800041bc <m_and_hs_using_vs_access_9+0x1ee>
        excpt.cause == CAUSE_SGPF &&
        excpt.tval2 == vaddr >> 2
    );

    vaddr = vs_page_base(VSI_GUR);
    TEST_SETUP_EXCEPT();
    800040c6:	0ff0000f          	fence
    800040ca:	4785                	li	a5,1
    800040cc:	00f41023          	sh	a5,0(s0)
    800040d0:	00039797          	auipc	a5,0x39
    800040d4:	f607bc23          	sd	zero,-136(a5) # 8003d048 <excpt+0x38>
    800040d8:	0ff0000f          	fence
    asm volatile(
    800040dc:	001007b7          	lui	a5,0x100
    800040e0:	06978793          	add	a5,a5,105 # 100069 <STACK_SIZE+0x69>
    800040e4:	07b2                	sll	a5,a5,0xc
    800040e6:	6007c7f3          	.4byte	0x6007c7f3
    val = hlvb(vaddr);
    printf("%d\n",excpt.cause);
    800040ea:	640c                	ld	a1,8(s0)
    800040ec:	00019517          	auipc	a0,0x19
    800040f0:	3b450513          	add	a0,a0,948 # 8001d4a0 <__func__.1+0xca8>
    800040f4:	66f160ef          	jal	8001af62 <printf>
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    800040f8:	08200593          	li	a1,130
    800040fc:	00019617          	auipc	a2,0x19
    80004100:	3ec60613          	add	a2,a2,1004 # 8001d4e8 <__func__.1+0xcf0>
    80004104:	00019517          	auipc	a0,0x19
    80004108:	9f450513          	add	a0,a0,-1548 # 8001caf8 <__func__.1+0x300>
    8000410c:	657160ef          	jal	8001af62 <printf>
    80004110:	00144783          	lbu	a5,1(s0)
    80004114:	00019597          	auipc	a1,0x19
    80004118:	9bc58593          	add	a1,a1,-1604 # 8001cad0 <__func__.1+0x2d8>
    8000411c:	e789                	bnez	a5,80004126 <m_and_hs_using_vs_access_9+0x158>
    8000411e:	00019597          	auipc	a1,0x19
    80004122:	9a258593          	add	a1,a1,-1630 # 8001cac0 <__func__.1+0x2c8>
    80004126:	00019517          	auipc	a0,0x19
    8000412a:	9ea50513          	add	a0,a0,-1558 # 8001cb10 <__func__.1+0x318>
    8000412e:	635160ef          	jal	8001af62 <printf>
    80004132:	00144783          	lbu	a5,1(s0)
    80004136:	efa1                	bnez	a5,8000418e <m_and_hs_using_vs_access_9+0x1c0>
    80004138:	4529                	li	a0,10
    8000413a:	4fb150ef          	jal	80019e34 <putchar>
    8000413e:	c481                	beqz	s1,80004146 <m_and_hs_using_vs_access_9+0x178>
    80004140:	00144783          	lbu	a5,1(s0)
    80004144:	c79d                	beqz	a5,80004172 <m_and_hs_using_vs_access_9+0x1a4>
    80004146:	4401                	li	s0,0
        excpt.triggered == false
    );
    
    TEST_END();
    80004148:	00019597          	auipc	a1,0x19
    8000414c:	98858593          	add	a1,a1,-1656 # 8001cad0 <__func__.1+0x2d8>
    80004150:	00019517          	auipc	a0,0x19
    80004154:	a2850513          	add	a0,a0,-1496 # 8001cb78 <__func__.1+0x380>
    80004158:	60b160ef          	jal	8001af62 <printf>
    8000415c:	4511                	li	a0,4
    8000415e:	981fc0ef          	jal	80000ade <goto_priv>
    80004162:	9c4fd0ef          	jal	80001326 <reset_state>
}
    80004166:	60e2                	ld	ra,24(sp)
    80004168:	8522                	mv	a0,s0
    8000416a:	6442                	ld	s0,16(sp)
    8000416c:	64a2                	ld	s1,8(sp)
    8000416e:	6105                	add	sp,sp,32
    80004170:	8082                	ret
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    80004172:	4405                	li	s0,1
    TEST_END();
    80004174:	00019597          	auipc	a1,0x19
    80004178:	94c58593          	add	a1,a1,-1716 # 8001cac0 <__func__.1+0x2c8>
    8000417c:	bfd1                	j	80004150 <m_and_hs_using_vs_access_9+0x182>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    8000417e:	7418                	ld	a4,40(s0)
    80004180:	4001a7b7          	lui	a5,0x4001a
    80004184:	40078793          	add	a5,a5,1024 # 4001a400 <STACK_SIZE+0x3ff1a400>
    80004188:	f0f71ae3          	bne	a4,a5,8000409c <m_and_hs_using_vs_access_9+0xce>
    8000418c:	b715                	j	800040b0 <m_and_hs_using_vs_access_9+0xe2>
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    8000418e:	00019517          	auipc	a0,0x19
    80004192:	98a50513          	add	a0,a0,-1654 # 8001cb18 <__func__.1+0x320>
    80004196:	5cd160ef          	jal	8001af62 <printf>
    8000419a:	02900513          	li	a0,41
    8000419e:	497150ef          	jal	80019e34 <putchar>
    800041a2:	bf59                	j	80004138 <m_and_hs_using_vs_access_9+0x16a>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    800041a4:	7418                	ld	a4,40(s0)
    800041a6:	4001a7b7          	lui	a5,0x4001a
    800041aa:	40078793          	add	a5,a5,1024 # 4001a400 <STACK_SIZE+0x3ff1a400>
    800041ae:	ecf71ae3          	bne	a4,a5,80004082 <m_and_hs_using_vs_access_9+0xb4>
    800041b2:	00019597          	auipc	a1,0x19
    800041b6:	90e58593          	add	a1,a1,-1778 # 8001cac0 <__func__.1+0x2c8>
    800041ba:	b5e1                	j	80004082 <m_and_hs_using_vs_access_9+0xb4>
    800041bc:	7404                	ld	s1,40(s0)
    800041be:	bffe67b7          	lui	a5,0xbffe6
    800041c2:	c0078793          	add	a5,a5,-1024 # ffffffffbffe5c00 <__stack_top+0xffffffff3fce6c00>
    800041c6:	94be                	add	s1,s1,a5
    800041c8:	0014b493          	seqz	s1,s1
    800041cc:	bded                	j	800040c6 <m_and_hs_using_vs_access_9+0xf8>

00000000800041ce <m_and_hs_using_vs_access_10>:

bool m_and_hs_using_vs_access_10(){
    800041ce:	1101                	add	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    800041d0:	00017597          	auipc	a1,0x17
    800041d4:	47058593          	add	a1,a1,1136 # 8001b640 <__func__.2>
    800041d8:	00019517          	auipc	a0,0x19
    800041dc:	90850513          	add	a0,a0,-1784 # 8001cae0 <__func__.1+0x2e8>
bool m_and_hs_using_vs_access_10(){
    800041e0:	ec06                	sd	ra,24(sp)
    800041e2:	e822                	sd	s0,16(sp)
    800041e4:	e426                	sd	s1,8(sp)
    TEST_START();
    800041e6:	57d160ef          	jal	8001af62 <printf>
    800041ea:	4529                	li	a0,10
    800041ec:	449150ef          	jal	80019e34 <putchar>
    
    hspt_init();
    800041f0:	bf0fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    800041f4:	e32fc0ef          	jal	80000826 <hpt_init>
    vspt_init();
    800041f8:	cbcfc0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_HS);
    800041fc:	450d                	li	a0,3
    800041fe:	8e1fc0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80004202:	4509                	li	a0,2
    80004204:	ffefc0ef          	jal	80000a02 <set_prev_priv>

    vaddr = vs_page_base(VSR_GUR);
    TEST_SETUP_EXCEPT();
    80004208:	0ff0000f          	fence
    8000420c:	4785                	li	a5,1
    8000420e:	00039417          	auipc	s0,0x39
    80004212:	e0240413          	add	s0,s0,-510 # 8003d010 <excpt>
    80004216:	00f41023          	sh	a5,0(s0)
    8000421a:	00039797          	auipc	a5,0x39
    8000421e:	e207b723          	sd	zero,-466(a5) # 8003d048 <excpt+0x38>
    80004222:	0ff0000f          	fence
    CSRW(sscratch, 0x911);
    80004226:	6785                	lui	a5,0x1
    80004228:	9117879b          	addw	a5,a5,-1775 # 911 <_test_table_size+0x910>
    8000422c:	14079073          	csrw	sscratch,a5
    80004230:	000807b7          	lui	a5,0x80
    80004234:	07a5                	add	a5,a5,9 # 80009 <_test_table_size+0x80008>
    80004236:	07b6                	sll	a5,a5,0xd
    80004238:	6007c7f3          	.4byte	0x6007c7f3
    hlvb(vaddr);
    TEST_ASSERT("hs hlvb on ro both stage page successfull",
    8000423c:	08200593          	li	a1,130
    80004240:	00019617          	auipc	a2,0x19
    80004244:	2d060613          	add	a2,a2,720 # 8001d510 <__func__.1+0xd18>
    80004248:	00019517          	auipc	a0,0x19
    8000424c:	8b050513          	add	a0,a0,-1872 # 8001caf8 <__func__.1+0x300>
    80004250:	513160ef          	jal	8001af62 <printf>
    80004254:	00144783          	lbu	a5,1(s0)
    80004258:	00019597          	auipc	a1,0x19
    8000425c:	86858593          	add	a1,a1,-1944 # 8001cac0 <__func__.1+0x2c8>
    80004260:	c789                	beqz	a5,8000426a <m_and_hs_using_vs_access_10+0x9c>
    80004262:	00019597          	auipc	a1,0x19
    80004266:	86e58593          	add	a1,a1,-1938 # 8001cad0 <__func__.1+0x2d8>
    8000426a:	00019517          	auipc	a0,0x19
    8000426e:	8a650513          	add	a0,a0,-1882 # 8001cb10 <__func__.1+0x318>
    80004272:	4f1160ef          	jal	8001af62 <printf>
    80004276:	00144783          	lbu	a5,1(s0)
    8000427a:	0e079963          	bnez	a5,8000436c <m_and_hs_using_vs_access_10+0x19e>
    8000427e:	4529                	li	a0,10
    80004280:	3b5150ef          	jal	80019e34 <putchar>
    80004284:	00144483          	lbu	s1,1(s0)
        excpt.triggered == false
    );
    
    vspt_init();
    80004288:	c2cfc0ef          	jal	800006b4 <vspt_init>
    vaddr = vs_page_base(VSR_GUR);
    TEST_SETUP_EXCEPT();
    8000428c:	0ff0000f          	fence
    80004290:	4785                	li	a5,1
    80004292:	00f41023          	sh	a5,0(s0)
    80004296:	00039797          	auipc	a5,0x39
    8000429a:	da07b923          	sd	zero,-590(a5) # 8003d048 <excpt+0x38>
    8000429e:	0ff0000f          	fence
    CSRW(sscratch, 0x911);      
    800042a2:	6785                	lui	a5,0x1
    800042a4:	9117879b          	addw	a5,a5,-1775 # 911 <_test_table_size+0x910>
    800042a8:	14079073          	csrw	sscratch,a5
    asm volatile(
    800042ac:	37ab77b7          	lui	a5,0x37ab7
    800042b0:	00080737          	lui	a4,0x80
    800042b4:	078a                	sll	a5,a5,0x2
    800042b6:	0725                	add	a4,a4,9 # 80009 <_test_table_size+0x80008>
    800042b8:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800042bc:	0736                	sll	a4,a4,0xd
    800042be:	62f74073          	.4byte	0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    800042c2:	08200593          	li	a1,130
    800042c6:	00019617          	auipc	a2,0x19
    800042ca:	27a60613          	add	a2,a2,634 # 8001d540 <__func__.1+0xd48>
    800042ce:	00019517          	auipc	a0,0x19
    800042d2:	82a50513          	add	a0,a0,-2006 # 8001caf8 <__func__.1+0x300>
    800042d6:	48d160ef          	jal	8001af62 <printf>
    800042da:	00144783          	lbu	a5,1(s0)
    800042de:	00018597          	auipc	a1,0x18
    800042e2:	7f258593          	add	a1,a1,2034 # 8001cad0 <__func__.1+0x2d8>
    800042e6:	c789                	beqz	a5,800042f0 <m_and_hs_using_vs_access_10+0x122>
    800042e8:	6418                	ld	a4,8(s0)
    800042ea:	47bd                	li	a5,15
    800042ec:	08f70b63          	beq	a4,a5,80004382 <m_and_hs_using_vs_access_10+0x1b4>
    800042f0:	00019517          	auipc	a0,0x19
    800042f4:	82050513          	add	a0,a0,-2016 # 8001cb10 <__func__.1+0x318>
    800042f8:	46b160ef          	jal	8001af62 <printf>
    800042fc:	00144783          	lbu	a5,1(s0)
    80004300:	c789                	beqz	a5,8000430a <m_and_hs_using_vs_access_10+0x13c>
    80004302:	6418                	ld	a4,8(s0)
    80004304:	47bd                	li	a5,15
    80004306:	00f70c63          	beq	a4,a5,8000431e <m_and_hs_using_vs_access_10+0x150>
    8000430a:	00019517          	auipc	a0,0x19
    8000430e:	80e50513          	add	a0,a0,-2034 # 8001cb18 <__func__.1+0x320>
    80004312:	451160ef          	jal	8001af62 <printf>
    80004316:	02900513          	li	a0,41
    8000431a:	31b150ef          	jal	80019e34 <putchar>
    8000431e:	4529                	li	a0,10
    80004320:	315150ef          	jal	80019e34 <putchar>
    80004324:	ec95                	bnez	s1,80004360 <m_and_hs_using_vs_access_10+0x192>
    80004326:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&  
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    8000432a:	00018597          	auipc	a1,0x18
    8000432e:	7a658593          	add	a1,a1,1958 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    80004332:	c491                	beqz	s1,8000433e <m_and_hs_using_vs_access_10+0x170>
    80004334:	6418                	ld	a4,8(s0)
    80004336:	47bd                	li	a5,15
    80004338:	04f70a63          	beq	a4,a5,8000438c <m_and_hs_using_vs_access_10+0x1be>
    8000433c:	4481                	li	s1,0
    TEST_END();
    8000433e:	00019517          	auipc	a0,0x19
    80004342:	83a50513          	add	a0,a0,-1990 # 8001cb78 <__func__.1+0x380>
    80004346:	41d160ef          	jal	8001af62 <printf>
    8000434a:	4511                	li	a0,4
    8000434c:	f92fc0ef          	jal	80000ade <goto_priv>
    80004350:	fd7fc0ef          	jal	80001326 <reset_state>
}
    80004354:	60e2                	ld	ra,24(sp)
    80004356:	6442                	ld	s0,16(sp)
    80004358:	8526                	mv	a0,s1
    8000435a:	64a2                	ld	s1,8(sp)
    8000435c:	6105                	add	sp,sp,32
    8000435e:	8082                	ret
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    80004360:	4481                	li	s1,0
    TEST_END();
    80004362:	00018597          	auipc	a1,0x18
    80004366:	76e58593          	add	a1,a1,1902 # 8001cad0 <__func__.1+0x2d8>
    8000436a:	bfd1                	j	8000433e <m_and_hs_using_vs_access_10+0x170>
    TEST_ASSERT("hs hlvb on ro both stage page successfull",
    8000436c:	00018517          	auipc	a0,0x18
    80004370:	7ac50513          	add	a0,a0,1964 # 8001cb18 <__func__.1+0x320>
    80004374:	3ef160ef          	jal	8001af62 <printf>
    80004378:	02900513          	li	a0,41
    8000437c:	2b9150ef          	jal	80019e34 <putchar>
    80004380:	bdfd                	j	8000427e <m_and_hs_using_vs_access_10+0xb0>
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    80004382:	00018597          	auipc	a1,0x18
    80004386:	73e58593          	add	a1,a1,1854 # 8001cac0 <__func__.1+0x2c8>
    8000438a:	b79d                	j	800042f0 <m_and_hs_using_vs_access_10+0x122>
    TEST_END();
    8000438c:	00018597          	auipc	a1,0x18
    80004390:	73458593          	add	a1,a1,1844 # 8001cac0 <__func__.1+0x2c8>
    80004394:	b76d                	j	8000433e <m_and_hs_using_vs_access_10+0x170>

0000000080004396 <m_and_hs_using_vs_access_11>:

bool m_and_hs_using_vs_access_11(){
    80004396:	1101                	add	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004398:	00017597          	auipc	a1,0x17
    8000439c:	2c858593          	add	a1,a1,712 # 8001b660 <__func__.1>
    800043a0:	00018517          	auipc	a0,0x18
    800043a4:	74050513          	add	a0,a0,1856 # 8001cae0 <__func__.1+0x2e8>
bool m_and_hs_using_vs_access_11(){
    800043a8:	ec06                	sd	ra,24(sp)
    800043aa:	e822                	sd	s0,16(sp)
    800043ac:	e426                	sd	s1,8(sp)
    TEST_START();
    800043ae:	3b5160ef          	jal	8001af62 <printf>
    800043b2:	4529                	li	a0,10
    800043b4:	281150ef          	jal	80019e34 <putchar>
    
    hspt_init();
    800043b8:	a28fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    800043bc:	c6afc0ef          	jal	80000826 <hpt_init>
    vspt_init();
    800043c0:	af4fc0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_HS);
    800043c4:	450d                	li	a0,3
    800043c6:	f18fc0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    800043ca:	4509                	li	a0,2
    800043cc:	e36fc0ef          	jal	80000a02 <set_prev_priv>


    vaddr = vs_page_base(VSRW_GI);
    TEST_SETUP_EXCEPT();
    800043d0:	0ff0000f          	fence
    800043d4:	4785                	li	a5,1
    800043d6:	00039417          	auipc	s0,0x39
    800043da:	c3a40413          	add	s0,s0,-966 # 8003d010 <excpt>
    800043de:	00f41023          	sh	a5,0(s0)
    800043e2:	00039797          	auipc	a5,0x39
    800043e6:	c607b323          	sd	zero,-922(a5) # 8003d048 <excpt+0x38>
    800043ea:	0ff0000f          	fence
    CSRW(sscratch, 0x112);
    800043ee:	11200793          	li	a5,274
    800043f2:	14079073          	csrw	sscratch,a5
    800043f6:	37ab77b7          	lui	a5,0x37ab7
    800043fa:	00080737          	lui	a4,0x80
    800043fe:	078a                	sll	a5,a5,0x2
    80004400:	03370713          	add	a4,a4,51 # 80033 <_test_table_size+0x80032>
    80004404:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80004408:	0736                	sll	a4,a4,0xd
    8000440a:	62f74073          	.4byte	0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    8000440e:	08200593          	li	a1,130
    80004412:	00019617          	auipc	a2,0x19
    80004416:	16660613          	add	a2,a2,358 # 8001d578 <__func__.1+0xd80>
    8000441a:	00018517          	auipc	a0,0x18
    8000441e:	6de50513          	add	a0,a0,1758 # 8001caf8 <__func__.1+0x300>
    80004422:	341160ef          	jal	8001af62 <printf>
    80004426:	00144783          	lbu	a5,1(s0)
    8000442a:	00018597          	auipc	a1,0x18
    8000442e:	6a658593          	add	a1,a1,1702 # 8001cad0 <__func__.1+0x2d8>
    80004432:	c789                	beqz	a5,8000443c <m_and_hs_using_vs_access_11+0xa6>
    80004434:	6418                	ld	a4,8(s0)
    80004436:	47dd                	li	a5,23
    80004438:	06f70e63          	beq	a4,a5,800044b4 <m_and_hs_using_vs_access_11+0x11e>
    8000443c:	00018517          	auipc	a0,0x18
    80004440:	6d450513          	add	a0,a0,1748 # 8001cb10 <__func__.1+0x318>
    80004444:	31f160ef          	jal	8001af62 <printf>
    80004448:	00144783          	lbu	a5,1(s0)
    8000444c:	c789                	beqz	a5,80004456 <m_and_hs_using_vs_access_11+0xc0>
    8000444e:	6418                	ld	a4,8(s0)
    80004450:	47dd                	li	a5,23
    80004452:	00f70c63          	beq	a4,a5,8000446a <m_and_hs_using_vs_access_11+0xd4>
    80004456:	00018517          	auipc	a0,0x18
    8000445a:	6c250513          	add	a0,a0,1730 # 8001cb18 <__func__.1+0x320>
    8000445e:	305160ef          	jal	8001af62 <printf>
    80004462:	02900513          	li	a0,41
    80004466:	1cf150ef          	jal	80019e34 <putchar>
    8000446a:	4529                	li	a0,10
    8000446c:	1c9150ef          	jal	80019e34 <putchar>
    80004470:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&  
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80004474:	00018597          	auipc	a1,0x18
    80004478:	65c58593          	add	a1,a1,1628 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    8000447c:	c491                	beqz	s1,80004488 <m_and_hs_using_vs_access_11+0xf2>
    8000447e:	6418                	ld	a4,8(s0)
    80004480:	47dd                	li	a5,23
    80004482:	02f70463          	beq	a4,a5,800044aa <m_and_hs_using_vs_access_11+0x114>
    80004486:	4481                	li	s1,0
    TEST_END();
    80004488:	00018517          	auipc	a0,0x18
    8000448c:	6f050513          	add	a0,a0,1776 # 8001cb78 <__func__.1+0x380>
    80004490:	2d3160ef          	jal	8001af62 <printf>
    80004494:	4511                	li	a0,4
    80004496:	e48fc0ef          	jal	80000ade <goto_priv>
    8000449a:	e8dfc0ef          	jal	80001326 <reset_state>
}
    8000449e:	60e2                	ld	ra,24(sp)
    800044a0:	6442                	ld	s0,16(sp)
    800044a2:	8526                	mv	a0,s1
    800044a4:	64a2                	ld	s1,8(sp)
    800044a6:	6105                	add	sp,sp,32
    800044a8:	8082                	ret
    TEST_END();
    800044aa:	00018597          	auipc	a1,0x18
    800044ae:	61658593          	add	a1,a1,1558 # 8001cac0 <__func__.1+0x2c8>
    800044b2:	bfd9                	j	80004488 <m_and_hs_using_vs_access_11+0xf2>
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    800044b4:	00018597          	auipc	a1,0x18
    800044b8:	60c58593          	add	a1,a1,1548 # 8001cac0 <__func__.1+0x2c8>
    800044bc:	b741                	j	8000443c <m_and_hs_using_vs_access_11+0xa6>

00000000800044be <m_and_hs_using_vs_access_12>:

bool m_and_hs_using_vs_access_12(){
    800044be:	1141                	add	sp,sp,-16

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    800044c0:	00017597          	auipc	a1,0x17
    800044c4:	1c058593          	add	a1,a1,448 # 8001b680 <__func__.0>
    800044c8:	00018517          	auipc	a0,0x18
    800044cc:	61850513          	add	a0,a0,1560 # 8001cae0 <__func__.1+0x2e8>
bool m_and_hs_using_vs_access_12(){
    800044d0:	e406                	sd	ra,8(sp)
    800044d2:	e022                	sd	s0,0(sp)
    TEST_START();
    800044d4:	28f160ef          	jal	8001af62 <printf>
    800044d8:	4529                	li	a0,10
    800044da:	15b150ef          	jal	80019e34 <putchar>
    
    hspt_init();
    800044de:	902fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    800044e2:	b44fc0ef          	jal	80000826 <hpt_init>
    vspt_init();
    800044e6:	9cefc0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_HS);
    800044ea:	450d                	li	a0,3
    800044ec:	df2fc0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    800044f0:	4509                	li	a0,2
    800044f2:	d10fc0ef          	jal	80000a02 <set_prev_priv>

    vaddr = vs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    800044f6:	0ff0000f          	fence
    800044fa:	4785                	li	a5,1
    800044fc:	00039417          	auipc	s0,0x39
    80004500:	b1440413          	add	s0,s0,-1260 # 8003d010 <excpt>
    80004504:	00f41023          	sh	a5,0(s0)
    80004508:	00039797          	auipc	a5,0x39
    8000450c:	b407b023          	sd	zero,-1216(a5) # 8003d048 <excpt+0x38>
    80004510:	0ff0000f          	fence
    CSRW(sscratch, 0x112);
    80004514:	11200793          	li	a5,274
    80004518:	14079073          	csrw	sscratch,a5
    TEST_ASSERT("CSRW successfull int any condition",
    8000451c:	08200593          	li	a1,130
    80004520:	00019617          	auipc	a2,0x19
    80004524:	09860613          	add	a2,a2,152 # 8001d5b8 <__func__.1+0xdc0>
    80004528:	00018517          	auipc	a0,0x18
    8000452c:	5d050513          	add	a0,a0,1488 # 8001caf8 <__func__.1+0x300>
    80004530:	233160ef          	jal	8001af62 <printf>
    80004534:	00144783          	lbu	a5,1(s0)
    80004538:	00018597          	auipc	a1,0x18
    8000453c:	58858593          	add	a1,a1,1416 # 8001cac0 <__func__.1+0x2c8>
    80004540:	c789                	beqz	a5,8000454a <m_and_hs_using_vs_access_12+0x8c>
    80004542:	00018597          	auipc	a1,0x18
    80004546:	58e58593          	add	a1,a1,1422 # 8001cad0 <__func__.1+0x2d8>
    8000454a:	00018517          	auipc	a0,0x18
    8000454e:	5c650513          	add	a0,a0,1478 # 8001cb10 <__func__.1+0x318>
    80004552:	211160ef          	jal	8001af62 <printf>
    80004556:	00144783          	lbu	a5,1(s0)
    8000455a:	e3b1                	bnez	a5,8000459e <m_and_hs_using_vs_access_12+0xe0>
    8000455c:	4529                	li	a0,10
    8000455e:	0d7150ef          	jal	80019e34 <putchar>
    80004562:	00144783          	lbu	a5,1(s0)
    80004566:	e795                	bnez	a5,80004592 <m_and_hs_using_vs_access_12+0xd4>
    80004568:	4405                	li	s0,1
        excpt.triggered == false
    );
    


    TEST_END();
    8000456a:	00018597          	auipc	a1,0x18
    8000456e:	55658593          	add	a1,a1,1366 # 8001cac0 <__func__.1+0x2c8>
    80004572:	00018517          	auipc	a0,0x18
    80004576:	60650513          	add	a0,a0,1542 # 8001cb78 <__func__.1+0x380>
    8000457a:	1e9160ef          	jal	8001af62 <printf>
    8000457e:	4511                	li	a0,4
    80004580:	d5efc0ef          	jal	80000ade <goto_priv>
    80004584:	da3fc0ef          	jal	80001326 <reset_state>

}
    80004588:	60a2                	ld	ra,8(sp)
    8000458a:	8522                	mv	a0,s0
    8000458c:	6402                	ld	s0,0(sp)
    8000458e:	0141                	add	sp,sp,16
    80004590:	8082                	ret
    TEST_ASSERT("CSRW successfull int any condition",
    80004592:	4401                	li	s0,0
    TEST_END();
    80004594:	00018597          	auipc	a1,0x18
    80004598:	53c58593          	add	a1,a1,1340 # 8001cad0 <__func__.1+0x2d8>
    8000459c:	bfd9                	j	80004572 <m_and_hs_using_vs_access_12+0xb4>
    TEST_ASSERT("CSRW successfull int any condition",
    8000459e:	00018517          	auipc	a0,0x18
    800045a2:	57a50513          	add	a0,a0,1402 # 8001cb18 <__func__.1+0x320>
    800045a6:	1bd160ef          	jal	8001af62 <printf>
    800045aa:	02900513          	li	a0,41
    800045ae:	087150ef          	jal	80019e34 <putchar>
    800045b2:	b76d                	j	8000455c <m_and_hs_using_vs_access_12+0x9e>

00000000800045b4 <virtual_instruction_1>:
#include <rvh_test.h>
#include <page_tables.h> 


bool virtual_instruction_1() {
    800045b4:	1101                	add	sp,sp,-32

    TEST_START();
    800045b6:	00017597          	auipc	a1,0x17
    800045ba:	0ea58593          	add	a1,a1,234 # 8001b6a0 <__func__.10>
    800045be:	00018517          	auipc	a0,0x18
    800045c2:	52250513          	add	a0,a0,1314 # 8001cae0 <__func__.1+0x2e8>
bool virtual_instruction_1() {
    800045c6:	ec06                	sd	ra,24(sp)
    800045c8:	e822                	sd	s0,16(sp)
    800045ca:	e426                	sd	s1,8(sp)
    TEST_START();
    800045cc:	197160ef          	jal	8001af62 <printf>
    800045d0:	4529                	li	a0,10
    800045d2:	063150ef          	jal	80019e34 <putchar>


    goto_priv(PRIV_VS);
    800045d6:	4509                	li	a0,2
    800045d8:	d06fc0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    800045dc:	0ff0000f          	fence
    800045e0:	4785                	li	a5,1
    800045e2:	00039417          	auipc	s0,0x39
    800045e6:	a2e40413          	add	s0,s0,-1490 # 8003d010 <excpt>
    800045ea:	00f41023          	sh	a5,0(s0)
    800045ee:	00039797          	auipc	a5,0x39
    800045f2:	a407bd23          	sd	zero,-1446(a5) # 8003d048 <excpt+0x38>
    800045f6:	0ff0000f          	fence
    asm volatile(
    800045fa:	22000073          	.4byte	0x22000073
    hfence_vvma();
    TEST_ASSERT("vs executing hfence.vvma leads to virtual instruction exception",
    800045fe:	08200593          	li	a1,130
    80004602:	00019617          	auipc	a2,0x19
    80004606:	fde60613          	add	a2,a2,-34 # 8001d5e0 <__func__.1+0xde8>
    8000460a:	00018517          	auipc	a0,0x18
    8000460e:	4ee50513          	add	a0,a0,1262 # 8001caf8 <__func__.1+0x300>
    80004612:	151160ef          	jal	8001af62 <printf>
    80004616:	00144783          	lbu	a5,1(s0)
    8000461a:	00018597          	auipc	a1,0x18
    8000461e:	4b658593          	add	a1,a1,1206 # 8001cad0 <__func__.1+0x2d8>
    80004622:	c789                	beqz	a5,8000462c <virtual_instruction_1+0x78>
    80004624:	6418                	ld	a4,8(s0)
    80004626:	47d9                	li	a5,22
    80004628:	24f70c63          	beq	a4,a5,80004880 <virtual_instruction_1+0x2cc>
    8000462c:	00018517          	auipc	a0,0x18
    80004630:	4e450513          	add	a0,a0,1252 # 8001cb10 <__func__.1+0x318>
    80004634:	12f160ef          	jal	8001af62 <printf>
    80004638:	00144783          	lbu	a5,1(s0)
    8000463c:	c789                	beqz	a5,80004646 <virtual_instruction_1+0x92>
    8000463e:	6418                	ld	a4,8(s0)
    80004640:	47d9                	li	a5,22
    80004642:	00f70c63          	beq	a4,a5,8000465a <virtual_instruction_1+0xa6>
    80004646:	00018517          	auipc	a0,0x18
    8000464a:	4d250513          	add	a0,a0,1234 # 8001cb18 <__func__.1+0x320>
    8000464e:	115160ef          	jal	8001af62 <printf>
    80004652:	02900513          	li	a0,41
    80004656:	7de150ef          	jal	80019e34 <putchar>
    8000465a:	4529                	li	a0,10
    8000465c:	7d8150ef          	jal	80019e34 <putchar>
    80004660:	00144783          	lbu	a5,1(s0)
    80004664:	4481                	li	s1,0
    80004666:	c789                	beqz	a5,80004670 <virtual_instruction_1+0xbc>
    80004668:	6404                	ld	s1,8(s0)
    8000466a:	14a9                	add	s1,s1,-22
    8000466c:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    
    goto_priv(PRIV_VS);
    80004670:	4509                	li	a0,2
    80004672:	c6cfc0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80004676:	0ff0000f          	fence
    8000467a:	4785                	li	a5,1
    8000467c:	00f41023          	sh	a5,0(s0)
    80004680:	00039797          	auipc	a5,0x39
    80004684:	9c07b423          	sd	zero,-1592(a5) # 8003d048 <excpt+0x38>
    80004688:	0ff0000f          	fence
    asm volatile(
    8000468c:	62000073          	.4byte	0x62000073
    hfence_gvma();
    TEST_ASSERT("vs executing hfence.gvma leads to virtual instruction exception",
    80004690:	08200593          	li	a1,130
    80004694:	00019617          	auipc	a2,0x19
    80004698:	f8c60613          	add	a2,a2,-116 # 8001d620 <__func__.1+0xe28>
    8000469c:	00018517          	auipc	a0,0x18
    800046a0:	45c50513          	add	a0,a0,1116 # 8001caf8 <__func__.1+0x300>
    800046a4:	0bf160ef          	jal	8001af62 <printf>
    800046a8:	00144783          	lbu	a5,1(s0)
    800046ac:	00018597          	auipc	a1,0x18
    800046b0:	42458593          	add	a1,a1,1060 # 8001cad0 <__func__.1+0x2d8>
    800046b4:	c789                	beqz	a5,800046be <virtual_instruction_1+0x10a>
    800046b6:	6418                	ld	a4,8(s0)
    800046b8:	47d9                	li	a5,22
    800046ba:	1cf70863          	beq	a4,a5,8000488a <virtual_instruction_1+0x2d6>
    800046be:	00018517          	auipc	a0,0x18
    800046c2:	45250513          	add	a0,a0,1106 # 8001cb10 <__func__.1+0x318>
    800046c6:	09d160ef          	jal	8001af62 <printf>
    800046ca:	00144783          	lbu	a5,1(s0)
    800046ce:	c789                	beqz	a5,800046d8 <virtual_instruction_1+0x124>
    800046d0:	6418                	ld	a4,8(s0)
    800046d2:	47d9                	li	a5,22
    800046d4:	00f70c63          	beq	a4,a5,800046ec <virtual_instruction_1+0x138>
    800046d8:	00018517          	auipc	a0,0x18
    800046dc:	44050513          	add	a0,a0,1088 # 8001cb18 <__func__.1+0x320>
    800046e0:	083160ef          	jal	8001af62 <printf>
    800046e4:	02900513          	li	a0,41
    800046e8:	74c150ef          	jal	80019e34 <putchar>
    800046ec:	4529                	li	a0,10
    800046ee:	746150ef          	jal	80019e34 <putchar>
    800046f2:	c491                	beqz	s1,800046fe <virtual_instruction_1+0x14a>
    800046f4:	00144783          	lbu	a5,1(s0)
    800046f8:	4481                	li	s1,0
    800046fa:	16079963          	bnez	a5,8000486c <virtual_instruction_1+0x2b8>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_M);  
    800046fe:	4511                	li	a0,4
    80004700:	bdefc0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTVM);
    80004704:	001007b7          	lui	a5,0x100
    80004708:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    8000470c:	4509                	li	a0,2
    8000470e:	bd0fc0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80004712:	0ff0000f          	fence
    80004716:	4785                	li	a5,1
    80004718:	00f41023          	sh	a5,0(s0)
    8000471c:	00039797          	auipc	a5,0x39
    80004720:	9207b623          	sd	zero,-1748(a5) # 8003d048 <excpt+0x38>
    80004724:	0ff0000f          	fence
    asm volatile(
    80004728:	12000073          	sfence.vma
    sfence_vma();
    TEST_ASSERT("vs executing sfence.vma leads to virtual instruction exception when vtvm=1",
    8000472c:	08200593          	li	a1,130
    80004730:	00019617          	auipc	a2,0x19
    80004734:	f3060613          	add	a2,a2,-208 # 8001d660 <__func__.1+0xe68>
    80004738:	00018517          	auipc	a0,0x18
    8000473c:	3c050513          	add	a0,a0,960 # 8001caf8 <__func__.1+0x300>
    80004740:	023160ef          	jal	8001af62 <printf>
    80004744:	00144783          	lbu	a5,1(s0)
    80004748:	00018597          	auipc	a1,0x18
    8000474c:	38858593          	add	a1,a1,904 # 8001cad0 <__func__.1+0x2d8>
    80004750:	c789                	beqz	a5,8000475a <virtual_instruction_1+0x1a6>
    80004752:	6418                	ld	a4,8(s0)
    80004754:	47d9                	li	a5,22
    80004756:	12f70f63          	beq	a4,a5,80004894 <virtual_instruction_1+0x2e0>
    8000475a:	00018517          	auipc	a0,0x18
    8000475e:	3b650513          	add	a0,a0,950 # 8001cb10 <__func__.1+0x318>
    80004762:	001160ef          	jal	8001af62 <printf>
    80004766:	00144783          	lbu	a5,1(s0)
    8000476a:	c789                	beqz	a5,80004774 <virtual_instruction_1+0x1c0>
    8000476c:	6418                	ld	a4,8(s0)
    8000476e:	47d9                	li	a5,22
    80004770:	00f70c63          	beq	a4,a5,80004788 <virtual_instruction_1+0x1d4>
    80004774:	00018517          	auipc	a0,0x18
    80004778:	3a450513          	add	a0,a0,932 # 8001cb18 <__func__.1+0x320>
    8000477c:	7e6160ef          	jal	8001af62 <printf>
    80004780:	02900513          	li	a0,41
    80004784:	6b0150ef          	jal	80019e34 <putchar>
    80004788:	4529                	li	a0,10
    8000478a:	6aa150ef          	jal	80019e34 <putchar>
    8000478e:	c489                	beqz	s1,80004798 <virtual_instruction_1+0x1e4>
    80004790:	00144783          	lbu	a5,1(s0)
    80004794:	4481                	li	s1,0
    80004796:	e7f1                	bnez	a5,80004862 <virtual_instruction_1+0x2ae>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    80004798:	4509                	li	a0,2
    8000479a:	b44fc0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000479e:	0ff0000f          	fence
    800047a2:	4785                	li	a5,1
    800047a4:	00f41023          	sh	a5,0(s0)
    800047a8:	00039797          	auipc	a5,0x39
    800047ac:	8a07b023          	sd	zero,-1888(a5) # 8003d048 <excpt+0x38>
    800047b0:	0ff0000f          	fence
    asm volatile(
    800047b4:	16000073          	.4byte	0x16000073
    Sinval_vma();
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    800047b8:	08200593          	li	a1,130
    800047bc:	00019617          	auipc	a2,0x19
    800047c0:	ef460613          	add	a2,a2,-268 # 8001d6b0 <__func__.1+0xeb8>
    800047c4:	00018517          	auipc	a0,0x18
    800047c8:	33450513          	add	a0,a0,820 # 8001caf8 <__func__.1+0x300>
    800047cc:	796160ef          	jal	8001af62 <printf>
    800047d0:	00144783          	lbu	a5,1(s0)
    800047d4:	00018597          	auipc	a1,0x18
    800047d8:	2fc58593          	add	a1,a1,764 # 8001cad0 <__func__.1+0x2d8>
    800047dc:	c789                	beqz	a5,800047e6 <virtual_instruction_1+0x232>
    800047de:	6418                	ld	a4,8(s0)
    800047e0:	47d9                	li	a5,22
    800047e2:	08f70a63          	beq	a4,a5,80004876 <virtual_instruction_1+0x2c2>
    800047e6:	00018517          	auipc	a0,0x18
    800047ea:	32a50513          	add	a0,a0,810 # 8001cb10 <__func__.1+0x318>
    800047ee:	774160ef          	jal	8001af62 <printf>
    800047f2:	00144783          	lbu	a5,1(s0)
    800047f6:	c789                	beqz	a5,80004800 <virtual_instruction_1+0x24c>
    800047f8:	6418                	ld	a4,8(s0)
    800047fa:	47d9                	li	a5,22
    800047fc:	00f70c63          	beq	a4,a5,80004814 <virtual_instruction_1+0x260>
    80004800:	00018517          	auipc	a0,0x18
    80004804:	31850513          	add	a0,a0,792 # 8001cb18 <__func__.1+0x320>
    80004808:	75a160ef          	jal	8001af62 <printf>
    8000480c:	02900513          	li	a0,41
    80004810:	624150ef          	jal	80019e34 <putchar>
    80004814:	4529                	li	a0,10
    80004816:	61e150ef          	jal	80019e34 <putchar>
    8000481a:	cc95                	beqz	s1,80004856 <virtual_instruction_1+0x2a2>
    8000481c:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80004820:	00018597          	auipc	a1,0x18
    80004824:	2b058593          	add	a1,a1,688 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80004828:	c491                	beqz	s1,80004834 <virtual_instruction_1+0x280>
    8000482a:	6418                	ld	a4,8(s0)
    8000482c:	47d9                	li	a5,22
    8000482e:	06f70863          	beq	a4,a5,8000489e <virtual_instruction_1+0x2ea>
    80004832:	4481                	li	s1,0
    TEST_END();
    80004834:	00018517          	auipc	a0,0x18
    80004838:	34450513          	add	a0,a0,836 # 8001cb78 <__func__.1+0x380>
    8000483c:	726160ef          	jal	8001af62 <printf>
    80004840:	4511                	li	a0,4
    80004842:	a9cfc0ef          	jal	80000ade <goto_priv>
    80004846:	ae1fc0ef          	jal	80001326 <reset_state>
}
    8000484a:	60e2                	ld	ra,24(sp)
    8000484c:	6442                	ld	s0,16(sp)
    8000484e:	8526                	mv	a0,s1
    80004850:	64a2                	ld	s1,8(sp)
    80004852:	6105                	add	sp,sp,32
    80004854:	8082                	ret
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80004856:	4481                	li	s1,0
    TEST_END();
    80004858:	00018597          	auipc	a1,0x18
    8000485c:	27858593          	add	a1,a1,632 # 8001cad0 <__func__.1+0x2d8>
    80004860:	bfd1                	j	80004834 <virtual_instruction_1+0x280>
    TEST_ASSERT("vs executing sfence.vma leads to virtual instruction exception when vtvm=1",
    80004862:	6404                	ld	s1,8(s0)
    80004864:	14a9                	add	s1,s1,-22
    80004866:	0014b493          	seqz	s1,s1
    8000486a:	b73d                	j	80004798 <virtual_instruction_1+0x1e4>
    TEST_ASSERT("vs executing hfence.gvma leads to virtual instruction exception",
    8000486c:	6404                	ld	s1,8(s0)
    8000486e:	14a9                	add	s1,s1,-22
    80004870:	0014b493          	seqz	s1,s1
    80004874:	b569                	j	800046fe <virtual_instruction_1+0x14a>
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80004876:	00018597          	auipc	a1,0x18
    8000487a:	24a58593          	add	a1,a1,586 # 8001cac0 <__func__.1+0x2c8>
    8000487e:	b7a5                	j	800047e6 <virtual_instruction_1+0x232>
    TEST_ASSERT("vs executing hfence.vvma leads to virtual instruction exception",
    80004880:	00018597          	auipc	a1,0x18
    80004884:	24058593          	add	a1,a1,576 # 8001cac0 <__func__.1+0x2c8>
    80004888:	b355                	j	8000462c <virtual_instruction_1+0x78>
    TEST_ASSERT("vs executing hfence.gvma leads to virtual instruction exception",
    8000488a:	00018597          	auipc	a1,0x18
    8000488e:	23658593          	add	a1,a1,566 # 8001cac0 <__func__.1+0x2c8>
    80004892:	b535                	j	800046be <virtual_instruction_1+0x10a>
    TEST_ASSERT("vs executing sfence.vma leads to virtual instruction exception when vtvm=1",
    80004894:	00018597          	auipc	a1,0x18
    80004898:	22c58593          	add	a1,a1,556 # 8001cac0 <__func__.1+0x2c8>
    8000489c:	bd7d                	j	8000475a <virtual_instruction_1+0x1a6>
    TEST_END();
    8000489e:	00018597          	auipc	a1,0x18
    800048a2:	22258593          	add	a1,a1,546 # 8001cac0 <__func__.1+0x2c8>
    800048a6:	b779                	j	80004834 <virtual_instruction_1+0x280>

00000000800048a8 <virtual_instruction_2>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_2() {
    800048a8:	7179                	add	sp,sp,-48

    TEST_START();
    800048aa:	00017597          	auipc	a1,0x17
    800048ae:	e0e58593          	add	a1,a1,-498 # 8001b6b8 <__func__.9>
    800048b2:	00018517          	auipc	a0,0x18
    800048b6:	22e50513          	add	a0,a0,558 # 8001cae0 <__func__.1+0x2e8>
bool virtual_instruction_2() {
    800048ba:	f406                	sd	ra,40(sp)
    800048bc:	f022                	sd	s0,32(sp)
    800048be:	ec26                	sd	s1,24(sp)
    TEST_START();
    800048c0:	6a2160ef          	jal	8001af62 <printf>
    800048c4:	4529                	li	a0,10
    800048c6:	56e150ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_VS);
    800048ca:	4509                	li	a0,2
    800048cc:	a12fc0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    800048d0:	0ff0000f          	fence
    800048d4:	4785                	li	a5,1
    800048d6:	00038417          	auipc	s0,0x38
    800048da:	73a40413          	add	s0,s0,1850 # 8003d010 <excpt>
    800048de:	00f41023          	sh	a5,0(s0)
    800048e2:	00038797          	auipc	a5,0x38
    800048e6:	7607b323          	sd	zero,1894(a5) # 8003d048 <excpt+0x38>
    800048ea:	0ff0000f          	fence
    asm volatile(
    800048ee:	4781                	li	a5,0
    800048f0:	6c07c7f3          	.4byte	0x6c07c7f3
    volatile uint64_t tmp = hlvd(0);
    TEST_ASSERT("vs hlvd leads to virtual instruction exception",
    800048f4:	08200593          	li	a1,130
    800048f8:	00019617          	auipc	a2,0x19
    800048fc:	e0860613          	add	a2,a2,-504 # 8001d700 <__func__.1+0xf08>
    80004900:	00018517          	auipc	a0,0x18
    80004904:	1f850513          	add	a0,a0,504 # 8001caf8 <__func__.1+0x300>
    volatile uint64_t tmp = hlvd(0);
    80004908:	e43e                	sd	a5,8(sp)
    TEST_ASSERT("vs hlvd leads to virtual instruction exception",
    8000490a:	658160ef          	jal	8001af62 <printf>
    8000490e:	00144783          	lbu	a5,1(s0)
    80004912:	00018597          	auipc	a1,0x18
    80004916:	1be58593          	add	a1,a1,446 # 8001cad0 <__func__.1+0x2d8>
    8000491a:	c789                	beqz	a5,80004924 <virtual_instruction_2+0x7c>
    8000491c:	6418                	ld	a4,8(s0)
    8000491e:	47d9                	li	a5,22
    80004920:	12f70463          	beq	a4,a5,80004a48 <virtual_instruction_2+0x1a0>
    80004924:	00018517          	auipc	a0,0x18
    80004928:	1ec50513          	add	a0,a0,492 # 8001cb10 <__func__.1+0x318>
    8000492c:	636160ef          	jal	8001af62 <printf>
    80004930:	00144783          	lbu	a5,1(s0)
    80004934:	c789                	beqz	a5,8000493e <virtual_instruction_2+0x96>
    80004936:	6418                	ld	a4,8(s0)
    80004938:	47d9                	li	a5,22
    8000493a:	00f70c63          	beq	a4,a5,80004952 <virtual_instruction_2+0xaa>
    8000493e:	00018517          	auipc	a0,0x18
    80004942:	1da50513          	add	a0,a0,474 # 8001cb18 <__func__.1+0x320>
    80004946:	61c160ef          	jal	8001af62 <printf>
    8000494a:	02900513          	li	a0,41
    8000494e:	4e6150ef          	jal	80019e34 <putchar>
    80004952:	4529                	li	a0,10
    80004954:	4e0150ef          	jal	80019e34 <putchar>
    80004958:	00144783          	lbu	a5,1(s0)
    8000495c:	4481                	li	s1,0
    8000495e:	c789                	beqz	a5,80004968 <virtual_instruction_2+0xc0>
    80004960:	6404                	ld	s1,8(s0)
    80004962:	14a9                	add	s1,s1,-22
    80004964:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    80004968:	4509                	li	a0,2
    8000496a:	974fc0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000496e:	0ff0000f          	fence
    80004972:	4785                	li	a5,1
    80004974:	00f41023          	sh	a5,0(s0)
    80004978:	00038797          	auipc	a5,0x38
    8000497c:	6c07b823          	sd	zero,1744(a5) # 8003d048 <excpt+0x38>
    80004980:	0ff0000f          	fence
    asm volatile(
    80004984:	37ab77b7          	lui	a5,0x37ab7
    80004988:	078a                	sll	a5,a5,0x2
    8000498a:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8000498e:	4701                	li	a4,0
    80004990:	62f74073          	.4byte	0x62f74073
    hsvb(0, 0xdeadbeef);
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    80004994:	08200593          	li	a1,130
    80004998:	00019617          	auipc	a2,0x19
    8000499c:	d9860613          	add	a2,a2,-616 # 8001d730 <__func__.1+0xf38>
    800049a0:	00018517          	auipc	a0,0x18
    800049a4:	15850513          	add	a0,a0,344 # 8001caf8 <__func__.1+0x300>
    800049a8:	5ba160ef          	jal	8001af62 <printf>
    800049ac:	00144783          	lbu	a5,1(s0)
    800049b0:	00018597          	auipc	a1,0x18
    800049b4:	12058593          	add	a1,a1,288 # 8001cad0 <__func__.1+0x2d8>
    800049b8:	c789                	beqz	a5,800049c2 <virtual_instruction_2+0x11a>
    800049ba:	6418                	ld	a4,8(s0)
    800049bc:	47d9                	li	a5,22
    800049be:	08f70063          	beq	a4,a5,80004a3e <virtual_instruction_2+0x196>
    800049c2:	00018517          	auipc	a0,0x18
    800049c6:	14e50513          	add	a0,a0,334 # 8001cb10 <__func__.1+0x318>
    800049ca:	598160ef          	jal	8001af62 <printf>
    800049ce:	00144783          	lbu	a5,1(s0)
    800049d2:	c789                	beqz	a5,800049dc <virtual_instruction_2+0x134>
    800049d4:	6418                	ld	a4,8(s0)
    800049d6:	47d9                	li	a5,22
    800049d8:	00f70c63          	beq	a4,a5,800049f0 <virtual_instruction_2+0x148>
    800049dc:	00018517          	auipc	a0,0x18
    800049e0:	13c50513          	add	a0,a0,316 # 8001cb18 <__func__.1+0x320>
    800049e4:	57e160ef          	jal	8001af62 <printf>
    800049e8:	02900513          	li	a0,41
    800049ec:	448150ef          	jal	80019e34 <putchar>
    800049f0:	4529                	li	a0,10
    800049f2:	442150ef          	jal	80019e34 <putchar>
    800049f6:	cc95                	beqz	s1,80004a32 <virtual_instruction_2+0x18a>
    800049f8:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    TEST_END();
    800049fc:	00018597          	auipc	a1,0x18
    80004a00:	0d458593          	add	a1,a1,212 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    80004a04:	c491                	beqz	s1,80004a10 <virtual_instruction_2+0x168>
    80004a06:	6418                	ld	a4,8(s0)
    80004a08:	47d9                	li	a5,22
    80004a0a:	04f70463          	beq	a4,a5,80004a52 <virtual_instruction_2+0x1aa>
    80004a0e:	4481                	li	s1,0
    TEST_END();
    80004a10:	00018517          	auipc	a0,0x18
    80004a14:	16850513          	add	a0,a0,360 # 8001cb78 <__func__.1+0x380>
    80004a18:	54a160ef          	jal	8001af62 <printf>
    80004a1c:	4511                	li	a0,4
    80004a1e:	8c0fc0ef          	jal	80000ade <goto_priv>
    80004a22:	905fc0ef          	jal	80001326 <reset_state>

}
    80004a26:	70a2                	ld	ra,40(sp)
    80004a28:	7402                	ld	s0,32(sp)
    80004a2a:	8526                	mv	a0,s1
    80004a2c:	64e2                	ld	s1,24(sp)
    80004a2e:	6145                	add	sp,sp,48
    80004a30:	8082                	ret
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    80004a32:	4481                	li	s1,0
    TEST_END();
    80004a34:	00018597          	auipc	a1,0x18
    80004a38:	09c58593          	add	a1,a1,156 # 8001cad0 <__func__.1+0x2d8>
    80004a3c:	bfd1                	j	80004a10 <virtual_instruction_2+0x168>
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    80004a3e:	00018597          	auipc	a1,0x18
    80004a42:	08258593          	add	a1,a1,130 # 8001cac0 <__func__.1+0x2c8>
    80004a46:	bfb5                	j	800049c2 <virtual_instruction_2+0x11a>
    TEST_ASSERT("vs hlvd leads to virtual instruction exception",
    80004a48:	00018597          	auipc	a1,0x18
    80004a4c:	07858593          	add	a1,a1,120 # 8001cac0 <__func__.1+0x2c8>
    80004a50:	bdd1                	j	80004924 <virtual_instruction_2+0x7c>
    TEST_END();
    80004a52:	00018597          	auipc	a1,0x18
    80004a56:	06e58593          	add	a1,a1,110 # 8001cac0 <__func__.1+0x2c8>
    80004a5a:	bf5d                	j	80004a10 <virtual_instruction_2+0x168>

0000000080004a5c <virtual_instruction_3>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_3() {
    80004a5c:	1101                	add	sp,sp,-32

    TEST_START();
    80004a5e:	00017597          	auipc	a1,0x17
    80004a62:	c7258593          	add	a1,a1,-910 # 8001b6d0 <__func__.8>
    80004a66:	00018517          	auipc	a0,0x18
    80004a6a:	07a50513          	add	a0,a0,122 # 8001cae0 <__func__.1+0x2e8>
bool virtual_instruction_3() {
    80004a6e:	ec06                	sd	ra,24(sp)
    80004a70:	e822                	sd	s0,16(sp)
    80004a72:	e426                	sd	s1,8(sp)
    TEST_START();
    80004a74:	4ee160ef          	jal	8001af62 <printf>
    80004a78:	4529                	li	a0,10
    80004a7a:	3ba150ef          	jal	80019e34 <putchar>
    goto_priv(PRIV_M);
    80004a7e:	4511                	li	a0,4
    80004a80:	85efc0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTSR);
    80004a84:	004007b7          	lui	a5,0x400
    80004a88:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    80004a8c:	4509                	li	a0,2
    80004a8e:	850fc0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80004a92:	0ff0000f          	fence
    80004a96:	4785                	li	a5,1
    80004a98:	00038417          	auipc	s0,0x38
    80004a9c:	57840413          	add	s0,s0,1400 # 8003d010 <excpt>
    80004aa0:	00f41023          	sh	a5,0(s0)
    80004aa4:	00038797          	auipc	a5,0x38
    80004aa8:	5a07b223          	sd	zero,1444(a5) # 8003d048 <excpt+0x38>
    80004aac:	0ff0000f          	fence
    TEST_EXEC_SRET();
    80004ab0:	00000297          	auipc	t0,0x0
    80004ab4:	01028293          	add	t0,t0,16 # 80004ac0 <virtual_instruction_3+0x64>
    80004ab8:	14129073          	csrw	sepc,t0
    80004abc:	10200073          	sret
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    80004ac0:	08200593          	li	a1,130
    80004ac4:	00019617          	auipc	a2,0x19
    80004ac8:	c9c60613          	add	a2,a2,-868 # 8001d760 <__func__.1+0xf68>
    80004acc:	00018517          	auipc	a0,0x18
    80004ad0:	02c50513          	add	a0,a0,44 # 8001caf8 <__func__.1+0x300>
    80004ad4:	48e160ef          	jal	8001af62 <printf>
    80004ad8:	00144783          	lbu	a5,1(s0)
    80004adc:	00018597          	auipc	a1,0x18
    80004ae0:	ff458593          	add	a1,a1,-12 # 8001cad0 <__func__.1+0x2d8>
    80004ae4:	c789                	beqz	a5,80004aee <virtual_instruction_3+0x92>
    80004ae6:	6418                	ld	a4,8(s0)
    80004ae8:	47d9                	li	a5,22
    80004aea:	08f70b63          	beq	a4,a5,80004b80 <virtual_instruction_3+0x124>
    80004aee:	00018517          	auipc	a0,0x18
    80004af2:	02250513          	add	a0,a0,34 # 8001cb10 <__func__.1+0x318>
    80004af6:	46c160ef          	jal	8001af62 <printf>
    80004afa:	00144783          	lbu	a5,1(s0)
    80004afe:	c789                	beqz	a5,80004b08 <virtual_instruction_3+0xac>
    80004b00:	6418                	ld	a4,8(s0)
    80004b02:	47d9                	li	a5,22
    80004b04:	00f70c63          	beq	a4,a5,80004b1c <virtual_instruction_3+0xc0>
    80004b08:	00018517          	auipc	a0,0x18
    80004b0c:	01050513          	add	a0,a0,16 # 8001cb18 <__func__.1+0x320>
    80004b10:	452160ef          	jal	8001af62 <printf>
    80004b14:	02900513          	li	a0,41
    80004b18:	31c150ef          	jal	80019e34 <putchar>
    80004b1c:	4529                	li	a0,10
    80004b1e:	316150ef          	jal	80019e34 <putchar>
    80004b22:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  
    goto_priv(PRIV_M);
    80004b26:	4511                	li	a0,4
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    80004b28:	c489                	beqz	s1,80004b32 <virtual_instruction_3+0xd6>
    80004b2a:	6418                	ld	a4,8(s0)
    80004b2c:	47d9                	li	a5,22
    80004b2e:	02f70e63          	beq	a4,a5,80004b6a <virtual_instruction_3+0x10e>
    goto_priv(PRIV_M);
    80004b32:	fadfb0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTSR);
    80004b36:	004007b7          	lui	a5,0x400
    80004b3a:	6007b073          	csrc	hstatus,a5
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    80004b3e:	4481                	li	s1,0

    TEST_END();
    80004b40:	00018597          	auipc	a1,0x18
    80004b44:	f9058593          	add	a1,a1,-112 # 8001cad0 <__func__.1+0x2d8>
    80004b48:	00018517          	auipc	a0,0x18
    80004b4c:	03050513          	add	a0,a0,48 # 8001cb78 <__func__.1+0x380>
    80004b50:	412160ef          	jal	8001af62 <printf>
    80004b54:	4511                	li	a0,4
    80004b56:	f89fb0ef          	jal	80000ade <goto_priv>
    80004b5a:	fccfc0ef          	jal	80001326 <reset_state>
}
    80004b5e:	60e2                	ld	ra,24(sp)
    80004b60:	6442                	ld	s0,16(sp)
    80004b62:	8526                	mv	a0,s1
    80004b64:	64a2                	ld	s1,8(sp)
    80004b66:	6105                	add	sp,sp,32
    80004b68:	8082                	ret
    goto_priv(PRIV_M);
    80004b6a:	f75fb0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTSR);
    80004b6e:	004007b7          	lui	a5,0x400
    80004b72:	6007b073          	csrc	hstatus,a5
    TEST_END();
    80004b76:	00018597          	auipc	a1,0x18
    80004b7a:	f4a58593          	add	a1,a1,-182 # 8001cac0 <__func__.1+0x2c8>
    80004b7e:	b7e9                	j	80004b48 <virtual_instruction_3+0xec>
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    80004b80:	00018597          	auipc	a1,0x18
    80004b84:	f4058593          	add	a1,a1,-192 # 8001cac0 <__func__.1+0x2c8>
    80004b88:	b79d                	j	80004aee <virtual_instruction_3+0x92>

0000000080004b8a <virtual_instruction_4>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_4() {
    80004b8a:	1101                	add	sp,sp,-32

    TEST_START();
    80004b8c:	00017597          	auipc	a1,0x17
    80004b90:	b5c58593          	add	a1,a1,-1188 # 8001b6e8 <__func__.7>
    80004b94:	00018517          	auipc	a0,0x18
    80004b98:	f4c50513          	add	a0,a0,-180 # 8001cae0 <__func__.1+0x2e8>
bool virtual_instruction_4() {
    80004b9c:	ec06                	sd	ra,24(sp)
    80004b9e:	e822                	sd	s0,16(sp)
    80004ba0:	e426                	sd	s1,8(sp)
    TEST_START();
    80004ba2:	3c0160ef          	jal	8001af62 <printf>
    80004ba6:	4529                	li	a0,10
    80004ba8:	28c150ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    80004bac:	4511                	li	a0,4
    80004bae:	f31fb0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTVM);
    80004bb2:	001007b7          	lui	a5,0x100
    80004bb6:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    80004bba:	4509                	li	a0,2
    80004bbc:	f23fb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80004bc0:	0ff0000f          	fence
    80004bc4:	4785                	li	a5,1
    80004bc6:	00038417          	auipc	s0,0x38
    80004bca:	44a40413          	add	s0,s0,1098 # 8003d010 <excpt>
    80004bce:	00f41023          	sh	a5,0(s0)
    80004bd2:	00038797          	auipc	a5,0x38
    80004bd6:	4607bb23          	sd	zero,1142(a5) # 8003d048 <excpt+0x38>
    80004bda:	0ff0000f          	fence
    asm volatile ("sfence.vma \n\t");
    80004bde:	12000073          	sfence.vma
    sfence();
    TEST_ASSERT("vs sfence leads to virtual instruction exception when vtvm set",
    80004be2:	08200593          	li	a1,130
    80004be6:	00019617          	auipc	a2,0x19
    80004bea:	bba60613          	add	a2,a2,-1094 # 8001d7a0 <__func__.1+0xfa8>
    80004bee:	00018517          	auipc	a0,0x18
    80004bf2:	f0a50513          	add	a0,a0,-246 # 8001caf8 <__func__.1+0x300>
    80004bf6:	36c160ef          	jal	8001af62 <printf>
    80004bfa:	00144783          	lbu	a5,1(s0)
    80004bfe:	00018597          	auipc	a1,0x18
    80004c02:	ed258593          	add	a1,a1,-302 # 8001cad0 <__func__.1+0x2d8>
    80004c06:	c789                	beqz	a5,80004c10 <virtual_instruction_4+0x86>
    80004c08:	6418                	ld	a4,8(s0)
    80004c0a:	47d9                	li	a5,22
    80004c0c:	10f70b63          	beq	a4,a5,80004d22 <virtual_instruction_4+0x198>
    80004c10:	00018517          	auipc	a0,0x18
    80004c14:	f0050513          	add	a0,a0,-256 # 8001cb10 <__func__.1+0x318>
    80004c18:	34a160ef          	jal	8001af62 <printf>
    80004c1c:	00144783          	lbu	a5,1(s0)
    80004c20:	c789                	beqz	a5,80004c2a <virtual_instruction_4+0xa0>
    80004c22:	6418                	ld	a4,8(s0)
    80004c24:	47d9                	li	a5,22
    80004c26:	00f70c63          	beq	a4,a5,80004c3e <virtual_instruction_4+0xb4>
    80004c2a:	00018517          	auipc	a0,0x18
    80004c2e:	eee50513          	add	a0,a0,-274 # 8001cb18 <__func__.1+0x320>
    80004c32:	330160ef          	jal	8001af62 <printf>
    80004c36:	02900513          	li	a0,41
    80004c3a:	1fa150ef          	jal	80019e34 <putchar>
    80004c3e:	4529                	li	a0,10
    80004c40:	1f4150ef          	jal	80019e34 <putchar>
    80004c44:	00144783          	lbu	a5,1(s0)
    80004c48:	4481                	li	s1,0
    80004c4a:	c789                	beqz	a5,80004c54 <virtual_instruction_4+0xca>
    80004c4c:	6404                	ld	s1,8(s0)
    80004c4e:	14a9                	add	s1,s1,-22
    80004c50:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_SETUP_EXCEPT();
    80004c54:	0ff0000f          	fence
    80004c58:	4785                	li	a5,1
    80004c5a:	00f41023          	sh	a5,0(s0)
    80004c5e:	00038797          	auipc	a5,0x38
    80004c62:	3e07b523          	sd	zero,1002(a5) # 8003d048 <excpt+0x38>
    80004c66:	0ff0000f          	fence
    CSRW(satp, 0x0);
    80004c6a:	18005073          	csrw	satp,0
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    80004c6e:	08200593          	li	a1,130
    80004c72:	00019617          	auipc	a2,0x19
    80004c76:	b6e60613          	add	a2,a2,-1170 # 8001d7e0 <__func__.1+0xfe8>
    80004c7a:	00018517          	auipc	a0,0x18
    80004c7e:	e7e50513          	add	a0,a0,-386 # 8001caf8 <__func__.1+0x300>
    80004c82:	2e0160ef          	jal	8001af62 <printf>
    80004c86:	00144783          	lbu	a5,1(s0)
    80004c8a:	00018597          	auipc	a1,0x18
    80004c8e:	e4658593          	add	a1,a1,-442 # 8001cad0 <__func__.1+0x2d8>
    80004c92:	c789                	beqz	a5,80004c9c <virtual_instruction_4+0x112>
    80004c94:	6418                	ld	a4,8(s0)
    80004c96:	47d9                	li	a5,22
    80004c98:	08f70063          	beq	a4,a5,80004d18 <virtual_instruction_4+0x18e>
    80004c9c:	00018517          	auipc	a0,0x18
    80004ca0:	e7450513          	add	a0,a0,-396 # 8001cb10 <__func__.1+0x318>
    80004ca4:	2be160ef          	jal	8001af62 <printf>
    80004ca8:	00144783          	lbu	a5,1(s0)
    80004cac:	c789                	beqz	a5,80004cb6 <virtual_instruction_4+0x12c>
    80004cae:	6418                	ld	a4,8(s0)
    80004cb0:	47d9                	li	a5,22
    80004cb2:	00f70c63          	beq	a4,a5,80004cca <virtual_instruction_4+0x140>
    80004cb6:	00018517          	auipc	a0,0x18
    80004cba:	e6250513          	add	a0,a0,-414 # 8001cb18 <__func__.1+0x320>
    80004cbe:	2a4160ef          	jal	8001af62 <printf>
    80004cc2:	02900513          	li	a0,41
    80004cc6:	16e150ef          	jal	80019e34 <putchar>
    80004cca:	4529                	li	a0,10
    80004ccc:	168150ef          	jal	80019e34 <putchar>
    80004cd0:	cc95                	beqz	s1,80004d0c <virtual_instruction_4+0x182>
    80004cd2:	00144483          	lbu	s1,1(s0)
    // TEST_ASSERT("vs mode access h level low part leads to virtual instruction exception when mstatus_TVM=0",
    //     excpt.triggered == true &&
    //     excpt.cause == CAUSE_VRTI
    // );      
    
    TEST_END();
    80004cd6:	00018597          	auipc	a1,0x18
    80004cda:	dfa58593          	add	a1,a1,-518 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    80004cde:	c491                	beqz	s1,80004cea <virtual_instruction_4+0x160>
    80004ce0:	6418                	ld	a4,8(s0)
    80004ce2:	47d9                	li	a5,22
    80004ce4:	04f70463          	beq	a4,a5,80004d2c <virtual_instruction_4+0x1a2>
    80004ce8:	4481                	li	s1,0
    TEST_END();
    80004cea:	00018517          	auipc	a0,0x18
    80004cee:	e8e50513          	add	a0,a0,-370 # 8001cb78 <__func__.1+0x380>
    80004cf2:	270160ef          	jal	8001af62 <printf>
    80004cf6:	4511                	li	a0,4
    80004cf8:	de7fb0ef          	jal	80000ade <goto_priv>
    80004cfc:	e2afc0ef          	jal	80001326 <reset_state>
}
    80004d00:	60e2                	ld	ra,24(sp)
    80004d02:	6442                	ld	s0,16(sp)
    80004d04:	8526                	mv	a0,s1
    80004d06:	64a2                	ld	s1,8(sp)
    80004d08:	6105                	add	sp,sp,32
    80004d0a:	8082                	ret
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    80004d0c:	4481                	li	s1,0
    TEST_END();
    80004d0e:	00018597          	auipc	a1,0x18
    80004d12:	dc258593          	add	a1,a1,-574 # 8001cad0 <__func__.1+0x2d8>
    80004d16:	bfd1                	j	80004cea <virtual_instruction_4+0x160>
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    80004d18:	00018597          	auipc	a1,0x18
    80004d1c:	da858593          	add	a1,a1,-600 # 8001cac0 <__func__.1+0x2c8>
    80004d20:	bfb5                	j	80004c9c <virtual_instruction_4+0x112>
    TEST_ASSERT("vs sfence leads to virtual instruction exception when vtvm set",
    80004d22:	00018597          	auipc	a1,0x18
    80004d26:	d9e58593          	add	a1,a1,-610 # 8001cac0 <__func__.1+0x2c8>
    80004d2a:	b5dd                	j	80004c10 <virtual_instruction_4+0x86>
    TEST_END();
    80004d2c:	00018597          	auipc	a1,0x18
    80004d30:	d9458593          	add	a1,a1,-620 # 8001cac0 <__func__.1+0x2c8>
    80004d34:	bf5d                	j	80004cea <virtual_instruction_4+0x160>

0000000080004d36 <virtual_instruction_5>:
    ////////////////////////////////////////////////////////////////////////

bool virtual_instruction_5() {
    80004d36:	1101                	add	sp,sp,-32

    TEST_START();
    80004d38:	00017597          	auipc	a1,0x17
    80004d3c:	9c858593          	add	a1,a1,-1592 # 8001b700 <__func__.6>
    80004d40:	00018517          	auipc	a0,0x18
    80004d44:	da050513          	add	a0,a0,-608 # 8001cae0 <__func__.1+0x2e8>
bool virtual_instruction_5() {
    80004d48:	ec06                	sd	ra,24(sp)
    80004d4a:	e822                	sd	s0,16(sp)
    80004d4c:	e426                	sd	s1,8(sp)
    TEST_START();
    80004d4e:	214160ef          	jal	8001af62 <printf>
    80004d52:	4529                	li	a0,10
    80004d54:	0e0150ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    80004d58:	4511                	li	a0,4
    80004d5a:	d85fb0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);
    80004d5e:	002007b7          	lui	a5,0x200
    80004d62:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    80004d66:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_VS);
    80004d6a:	4509                	li	a0,2
    80004d6c:	d73fb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80004d70:	0ff0000f          	fence
    80004d74:	4785                	li	a5,1
    80004d76:	00038417          	auipc	s0,0x38
    80004d7a:	29a40413          	add	s0,s0,666 # 8003d010 <excpt>
    80004d7e:	00f41023          	sh	a5,0(s0)
    80004d82:	00038797          	auipc	a5,0x38
    80004d86:	2c07b323          	sd	zero,710(a5) # 8003d048 <excpt+0x38>
    80004d8a:	0ff0000f          	fence
    asm("wfi");
    80004d8e:	10500073          	wfi
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    80004d92:	08200593          	li	a1,130
    80004d96:	00019617          	auipc	a2,0x19
    80004d9a:	a9260613          	add	a2,a2,-1390 # 8001d828 <__func__.1+0x1030>
    80004d9e:	00018517          	auipc	a0,0x18
    80004da2:	d5a50513          	add	a0,a0,-678 # 8001caf8 <__func__.1+0x300>
    80004da6:	1bc160ef          	jal	8001af62 <printf>
    80004daa:	00144783          	lbu	a5,1(s0)
    80004dae:	00018597          	auipc	a1,0x18
    80004db2:	d2258593          	add	a1,a1,-734 # 8001cad0 <__func__.1+0x2d8>
    80004db6:	c789                	beqz	a5,80004dc0 <virtual_instruction_5+0x8a>
    80004db8:	6418                	ld	a4,8(s0)
    80004dba:	47d9                	li	a5,22
    80004dbc:	06f70e63          	beq	a4,a5,80004e38 <virtual_instruction_5+0x102>
    80004dc0:	00018517          	auipc	a0,0x18
    80004dc4:	d5050513          	add	a0,a0,-688 # 8001cb10 <__func__.1+0x318>
    80004dc8:	19a160ef          	jal	8001af62 <printf>
    80004dcc:	00144783          	lbu	a5,1(s0)
    80004dd0:	c789                	beqz	a5,80004dda <virtual_instruction_5+0xa4>
    80004dd2:	6418                	ld	a4,8(s0)
    80004dd4:	47d9                	li	a5,22
    80004dd6:	00f70c63          	beq	a4,a5,80004dee <virtual_instruction_5+0xb8>
    80004dda:	00018517          	auipc	a0,0x18
    80004dde:	d3e50513          	add	a0,a0,-706 # 8001cb18 <__func__.1+0x320>
    80004de2:	180160ef          	jal	8001af62 <printf>
    80004de6:	02900513          	li	a0,41
    80004dea:	04a150ef          	jal	80019e34 <putchar>
    80004dee:	4529                	li	a0,10
    80004df0:	044150ef          	jal	80019e34 <putchar>
    80004df4:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_END();
    80004df8:	00018597          	auipc	a1,0x18
    80004dfc:	cd858593          	add	a1,a1,-808 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    80004e00:	c491                	beqz	s1,80004e0c <virtual_instruction_5+0xd6>
    80004e02:	6418                	ld	a4,8(s0)
    80004e04:	47d9                	li	a5,22
    80004e06:	02f70463          	beq	a4,a5,80004e2e <virtual_instruction_5+0xf8>
    80004e0a:	4481                	li	s1,0
    TEST_END();
    80004e0c:	00018517          	auipc	a0,0x18
    80004e10:	d6c50513          	add	a0,a0,-660 # 8001cb78 <__func__.1+0x380>
    80004e14:	14e160ef          	jal	8001af62 <printf>
    80004e18:	4511                	li	a0,4
    80004e1a:	cc5fb0ef          	jal	80000ade <goto_priv>
    80004e1e:	d08fc0ef          	jal	80001326 <reset_state>
}
    80004e22:	60e2                	ld	ra,24(sp)
    80004e24:	6442                	ld	s0,16(sp)
    80004e26:	8526                	mv	a0,s1
    80004e28:	64a2                	ld	s1,8(sp)
    80004e2a:	6105                	add	sp,sp,32
    80004e2c:	8082                	ret
    TEST_END();
    80004e2e:	00018597          	auipc	a1,0x18
    80004e32:	c9258593          	add	a1,a1,-878 # 8001cac0 <__func__.1+0x2c8>
    80004e36:	bfd9                	j	80004e0c <virtual_instruction_5+0xd6>
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    80004e38:	00018597          	auipc	a1,0x18
    80004e3c:	c8858593          	add	a1,a1,-888 # 8001cac0 <__func__.1+0x2c8>
    80004e40:	b741                	j	80004dc0 <virtual_instruction_5+0x8a>

0000000080004e42 <virtual_instruction_6>:
    TEST_ASSERT("vs access to cycle casuses succsseful when mcounteren.cy and hcounteren.cy set",
        excpt.triggered == false
    );
#endif

bool virtual_instruction_6() {
    80004e42:	1101                	add	sp,sp,-32

    TEST_START();
    80004e44:	00017597          	auipc	a1,0x17
    80004e48:	8d458593          	add	a1,a1,-1836 # 8001b718 <__func__.5>
    80004e4c:	00018517          	auipc	a0,0x18
    80004e50:	c9450513          	add	a0,a0,-876 # 8001cae0 <__func__.1+0x2e8>
bool virtual_instruction_6() {
    80004e54:	ec06                	sd	ra,24(sp)
    80004e56:	e822                	sd	s0,16(sp)
    80004e58:	e426                	sd	s1,8(sp)
    TEST_START();
    80004e5a:	108160ef          	jal	8001af62 <printf>
    80004e5e:	4529                	li	a0,10
    80004e60:	7d5140ef          	jal	80019e34 <putchar>

//vu-mode
    goto_priv(PRIV_VU);
    80004e64:	4501                	li	a0,0
    80004e66:	c79fb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80004e6a:	0ff0000f          	fence
    80004e6e:	4785                	li	a5,1
    80004e70:	00038417          	auipc	s0,0x38
    80004e74:	1a040413          	add	s0,s0,416 # 8003d010 <excpt>
    80004e78:	00f41023          	sh	a5,0(s0)
    80004e7c:	00038797          	auipc	a5,0x38
    80004e80:	1c07b623          	sd	zero,460(a5) # 8003d048 <excpt+0x38>
    80004e84:	0ff0000f          	fence
    asm volatile(
    80004e88:	22000073          	.4byte	0x22000073
    hfence_vvma();
    TEST_ASSERT("vu executing hfence.vvma leads to virtual instruction exception",
    80004e8c:	08200593          	li	a1,130
    80004e90:	00019617          	auipc	a2,0x19
    80004e94:	9e060613          	add	a2,a2,-1568 # 8001d870 <__func__.1+0x1078>
    80004e98:	00018517          	auipc	a0,0x18
    80004e9c:	c6050513          	add	a0,a0,-928 # 8001caf8 <__func__.1+0x300>
    80004ea0:	0c2160ef          	jal	8001af62 <printf>
    80004ea4:	00144783          	lbu	a5,1(s0)
    80004ea8:	00018597          	auipc	a1,0x18
    80004eac:	c2858593          	add	a1,a1,-984 # 8001cad0 <__func__.1+0x2d8>
    80004eb0:	c789                	beqz	a5,80004eba <virtual_instruction_6+0x78>
    80004eb2:	6418                	ld	a4,8(s0)
    80004eb4:	47d9                	li	a5,22
    80004eb6:	1af70963          	beq	a4,a5,80005068 <virtual_instruction_6+0x226>
    80004eba:	00018517          	auipc	a0,0x18
    80004ebe:	c5650513          	add	a0,a0,-938 # 8001cb10 <__func__.1+0x318>
    80004ec2:	0a0160ef          	jal	8001af62 <printf>
    80004ec6:	00144783          	lbu	a5,1(s0)
    80004eca:	c789                	beqz	a5,80004ed4 <virtual_instruction_6+0x92>
    80004ecc:	6418                	ld	a4,8(s0)
    80004ece:	47d9                	li	a5,22
    80004ed0:	00f70c63          	beq	a4,a5,80004ee8 <virtual_instruction_6+0xa6>
    80004ed4:	00018517          	auipc	a0,0x18
    80004ed8:	c4450513          	add	a0,a0,-956 # 8001cb18 <__func__.1+0x320>
    80004edc:	086160ef          	jal	8001af62 <printf>
    80004ee0:	02900513          	li	a0,41
    80004ee4:	751140ef          	jal	80019e34 <putchar>
    80004ee8:	4529                	li	a0,10
    80004eea:	74b140ef          	jal	80019e34 <putchar>
    80004eee:	00144783          	lbu	a5,1(s0)
    80004ef2:	4481                	li	s1,0
    80004ef4:	c789                	beqz	a5,80004efe <virtual_instruction_6+0xbc>
    80004ef6:	6404                	ld	s1,8(s0)
    80004ef8:	14a9                	add	s1,s1,-22
    80004efa:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    
    goto_priv(PRIV_VU);
    80004efe:	4501                	li	a0,0
    80004f00:	bdffb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80004f04:	0ff0000f          	fence
    80004f08:	4785                	li	a5,1
    80004f0a:	00f41023          	sh	a5,0(s0)
    80004f0e:	00038797          	auipc	a5,0x38
    80004f12:	1207bd23          	sd	zero,314(a5) # 8003d048 <excpt+0x38>
    80004f16:	0ff0000f          	fence
    asm volatile(
    80004f1a:	62000073          	.4byte	0x62000073
    hfence_gvma();
    TEST_ASSERT("vu executing hfence.gvma leads to virtual instruction exception",
    80004f1e:	08200593          	li	a1,130
    80004f22:	00019617          	auipc	a2,0x19
    80004f26:	98e60613          	add	a2,a2,-1650 # 8001d8b0 <__func__.1+0x10b8>
    80004f2a:	00018517          	auipc	a0,0x18
    80004f2e:	bce50513          	add	a0,a0,-1074 # 8001caf8 <__func__.1+0x300>
    80004f32:	030160ef          	jal	8001af62 <printf>
    80004f36:	00144783          	lbu	a5,1(s0)
    80004f3a:	00018597          	auipc	a1,0x18
    80004f3e:	b9658593          	add	a1,a1,-1130 # 8001cad0 <__func__.1+0x2d8>
    80004f42:	c789                	beqz	a5,80004f4c <virtual_instruction_6+0x10a>
    80004f44:	6418                	ld	a4,8(s0)
    80004f46:	47d9                	li	a5,22
    80004f48:	12f70563          	beq	a4,a5,80005072 <virtual_instruction_6+0x230>
    80004f4c:	00018517          	auipc	a0,0x18
    80004f50:	bc450513          	add	a0,a0,-1084 # 8001cb10 <__func__.1+0x318>
    80004f54:	00e160ef          	jal	8001af62 <printf>
    80004f58:	00144783          	lbu	a5,1(s0)
    80004f5c:	c789                	beqz	a5,80004f66 <virtual_instruction_6+0x124>
    80004f5e:	6418                	ld	a4,8(s0)
    80004f60:	47d9                	li	a5,22
    80004f62:	00f70c63          	beq	a4,a5,80004f7a <virtual_instruction_6+0x138>
    80004f66:	00018517          	auipc	a0,0x18
    80004f6a:	bb250513          	add	a0,a0,-1102 # 8001cb18 <__func__.1+0x320>
    80004f6e:	7f5150ef          	jal	8001af62 <printf>
    80004f72:	02900513          	li	a0,41
    80004f76:	6bf140ef          	jal	80019e34 <putchar>
    80004f7a:	4529                	li	a0,10
    80004f7c:	6b9140ef          	jal	80019e34 <putchar>
    80004f80:	c489                	beqz	s1,80004f8a <virtual_instruction_6+0x148>
    80004f82:	00144783          	lbu	a5,1(s0)
    80004f86:	4481                	li	s1,0
    80004f88:	e7f1                	bnez	a5,80005054 <virtual_instruction_6+0x212>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    goto_priv(PRIV_VU);
    80004f8a:	4501                	li	a0,0
    80004f8c:	b53fb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80004f90:	0ff0000f          	fence
    80004f94:	4785                	li	a5,1
    80004f96:	00f41023          	sh	a5,0(s0)
    80004f9a:	00038797          	auipc	a5,0x38
    80004f9e:	0a07b723          	sd	zero,174(a5) # 8003d048 <excpt+0x38>
    80004fa2:	0ff0000f          	fence
    asm volatile(
    80004fa6:	16000073          	.4byte	0x16000073
    Sinval_vma();
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80004faa:	08200593          	li	a1,130
    80004fae:	00019617          	auipc	a2,0x19
    80004fb2:	94260613          	add	a2,a2,-1726 # 8001d8f0 <__func__.1+0x10f8>
    80004fb6:	00018517          	auipc	a0,0x18
    80004fba:	b4250513          	add	a0,a0,-1214 # 8001caf8 <__func__.1+0x300>
    80004fbe:	7a5150ef          	jal	8001af62 <printf>
    80004fc2:	00144783          	lbu	a5,1(s0)
    80004fc6:	00018597          	auipc	a1,0x18
    80004fca:	b0a58593          	add	a1,a1,-1270 # 8001cad0 <__func__.1+0x2d8>
    80004fce:	c789                	beqz	a5,80004fd8 <virtual_instruction_6+0x196>
    80004fd0:	6418                	ld	a4,8(s0)
    80004fd2:	47d9                	li	a5,22
    80004fd4:	08f70563          	beq	a4,a5,8000505e <virtual_instruction_6+0x21c>
    80004fd8:	00018517          	auipc	a0,0x18
    80004fdc:	b3850513          	add	a0,a0,-1224 # 8001cb10 <__func__.1+0x318>
    80004fe0:	783150ef          	jal	8001af62 <printf>
    80004fe4:	00144783          	lbu	a5,1(s0)
    80004fe8:	c789                	beqz	a5,80004ff2 <virtual_instruction_6+0x1b0>
    80004fea:	6418                	ld	a4,8(s0)
    80004fec:	47d9                	li	a5,22
    80004fee:	00f70c63          	beq	a4,a5,80005006 <virtual_instruction_6+0x1c4>
    80004ff2:	00018517          	auipc	a0,0x18
    80004ff6:	b2650513          	add	a0,a0,-1242 # 8001cb18 <__func__.1+0x320>
    80004ffa:	769150ef          	jal	8001af62 <printf>
    80004ffe:	02900513          	li	a0,41
    80005002:	633140ef          	jal	80019e34 <putchar>
    80005006:	4529                	li	a0,10
    80005008:	62d140ef          	jal	80019e34 <putchar>
    8000500c:	cc95                	beqz	s1,80005048 <virtual_instruction_6+0x206>
    8000500e:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80005012:	00018597          	auipc	a1,0x18
    80005016:	abe58593          	add	a1,a1,-1346 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    8000501a:	c491                	beqz	s1,80005026 <virtual_instruction_6+0x1e4>
    8000501c:	6418                	ld	a4,8(s0)
    8000501e:	47d9                	li	a5,22
    80005020:	04f70e63          	beq	a4,a5,8000507c <virtual_instruction_6+0x23a>
    80005024:	4481                	li	s1,0
    TEST_END();
    80005026:	00018517          	auipc	a0,0x18
    8000502a:	b5250513          	add	a0,a0,-1198 # 8001cb78 <__func__.1+0x380>
    8000502e:	735150ef          	jal	8001af62 <printf>
    80005032:	4511                	li	a0,4
    80005034:	aabfb0ef          	jal	80000ade <goto_priv>
    80005038:	aeefc0ef          	jal	80001326 <reset_state>
}
    8000503c:	60e2                	ld	ra,24(sp)
    8000503e:	6442                	ld	s0,16(sp)
    80005040:	8526                	mv	a0,s1
    80005042:	64a2                	ld	s1,8(sp)
    80005044:	6105                	add	sp,sp,32
    80005046:	8082                	ret
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80005048:	4481                	li	s1,0
    TEST_END();
    8000504a:	00018597          	auipc	a1,0x18
    8000504e:	a8658593          	add	a1,a1,-1402 # 8001cad0 <__func__.1+0x2d8>
    80005052:	bfd1                	j	80005026 <virtual_instruction_6+0x1e4>
    TEST_ASSERT("vu executing hfence.gvma leads to virtual instruction exception",
    80005054:	6404                	ld	s1,8(s0)
    80005056:	14a9                	add	s1,s1,-22
    80005058:	0014b493          	seqz	s1,s1
    8000505c:	b73d                	j	80004f8a <virtual_instruction_6+0x148>
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    8000505e:	00018597          	auipc	a1,0x18
    80005062:	a6258593          	add	a1,a1,-1438 # 8001cac0 <__func__.1+0x2c8>
    80005066:	bf8d                	j	80004fd8 <virtual_instruction_6+0x196>
    TEST_ASSERT("vu executing hfence.vvma leads to virtual instruction exception",
    80005068:	00018597          	auipc	a1,0x18
    8000506c:	a5858593          	add	a1,a1,-1448 # 8001cac0 <__func__.1+0x2c8>
    80005070:	b5a9                	j	80004eba <virtual_instruction_6+0x78>
    TEST_ASSERT("vu executing hfence.gvma leads to virtual instruction exception",
    80005072:	00018597          	auipc	a1,0x18
    80005076:	a4e58593          	add	a1,a1,-1458 # 8001cac0 <__func__.1+0x2c8>
    8000507a:	bdc9                	j	80004f4c <virtual_instruction_6+0x10a>
    TEST_END();
    8000507c:	00018597          	auipc	a1,0x18
    80005080:	a4458593          	add	a1,a1,-1468 # 8001cac0 <__func__.1+0x2c8>
    80005084:	b74d                	j	80005026 <virtual_instruction_6+0x1e4>

0000000080005086 <virtual_instruction_7>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_7() {
    80005086:	1101                	add	sp,sp,-32

    TEST_START();
    80005088:	00016597          	auipc	a1,0x16
    8000508c:	6a858593          	add	a1,a1,1704 # 8001b730 <__func__.4>
    80005090:	00018517          	auipc	a0,0x18
    80005094:	a5050513          	add	a0,a0,-1456 # 8001cae0 <__func__.1+0x2e8>
bool virtual_instruction_7() {
    80005098:	ec06                	sd	ra,24(sp)
    8000509a:	e822                	sd	s0,16(sp)
    8000509c:	e426                	sd	s1,8(sp)
    TEST_START();
    8000509e:	6c5150ef          	jal	8001af62 <printf>
    800050a2:	4529                	li	a0,10
    800050a4:	591140ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_VU);
    800050a8:	4501                	li	a0,0
    800050aa:	a35fb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    800050ae:	0ff0000f          	fence
    800050b2:	4785                	li	a5,1
    800050b4:	00038417          	auipc	s0,0x38
    800050b8:	f5c40413          	add	s0,s0,-164 # 8003d010 <excpt>
    800050bc:	00f41023          	sh	a5,0(s0)
    800050c0:	00038797          	auipc	a5,0x38
    800050c4:	f807b423          	sd	zero,-120(a5) # 8003d048 <excpt+0x38>
    800050c8:	0ff0000f          	fence
    asm volatile(
    800050cc:	4781                	li	a5,0
    800050ce:	6007c7f3          	.4byte	0x6007c7f3
    uint64_t tmp = hlvb(0);

    TEST_ASSERT("vu hlvb leads to virtual instruction exception",
    800050d2:	08200593          	li	a1,130
    800050d6:	00019617          	auipc	a2,0x19
    800050da:	86a60613          	add	a2,a2,-1942 # 8001d940 <__func__.1+0x1148>
    800050de:	00018517          	auipc	a0,0x18
    800050e2:	a1a50513          	add	a0,a0,-1510 # 8001caf8 <__func__.1+0x300>
    800050e6:	67d150ef          	jal	8001af62 <printf>
    800050ea:	00144783          	lbu	a5,1(s0)
    800050ee:	00018597          	auipc	a1,0x18
    800050f2:	9e258593          	add	a1,a1,-1566 # 8001cad0 <__func__.1+0x2d8>
    800050f6:	c789                	beqz	a5,80005100 <virtual_instruction_7+0x7a>
    800050f8:	6418                	ld	a4,8(s0)
    800050fa:	47d9                	li	a5,22
    800050fc:	5cf70e63          	beq	a4,a5,800056d8 <virtual_instruction_7+0x652>
    80005100:	00018517          	auipc	a0,0x18
    80005104:	a1050513          	add	a0,a0,-1520 # 8001cb10 <__func__.1+0x318>
    80005108:	65b150ef          	jal	8001af62 <printf>
    8000510c:	00144783          	lbu	a5,1(s0)
    80005110:	c789                	beqz	a5,8000511a <virtual_instruction_7+0x94>
    80005112:	6418                	ld	a4,8(s0)
    80005114:	47d9                	li	a5,22
    80005116:	00f70c63          	beq	a4,a5,8000512e <virtual_instruction_7+0xa8>
    8000511a:	00018517          	auipc	a0,0x18
    8000511e:	9fe50513          	add	a0,a0,-1538 # 8001cb18 <__func__.1+0x320>
    80005122:	641150ef          	jal	8001af62 <printf>
    80005126:	02900513          	li	a0,41
    8000512a:	50b140ef          	jal	80019e34 <putchar>
    8000512e:	4529                	li	a0,10
    80005130:	505140ef          	jal	80019e34 <putchar>
    80005134:	00144783          	lbu	a5,1(s0)
    80005138:	4481                	li	s1,0
    8000513a:	c789                	beqz	a5,80005144 <virtual_instruction_7+0xbe>
    8000513c:	6404                	ld	s1,8(s0)
    8000513e:	14a9                	add	s1,s1,-22
    80005140:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005144:	4501                	li	a0,0
    80005146:	999fb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000514a:	0ff0000f          	fence
    8000514e:	4785                	li	a5,1
    80005150:	00f41023          	sh	a5,0(s0)
    80005154:	00038797          	auipc	a5,0x38
    80005158:	ee07ba23          	sd	zero,-268(a5) # 8003d048 <excpt+0x38>
    8000515c:	0ff0000f          	fence
    asm volatile(
    80005160:	4781                	li	a5,0
    80005162:	6017c7f3          	.4byte	0x6017c7f3
     tmp = hlvbu(0);

    TEST_ASSERT("vu hlvbu leads to virtual instruction exception",
    80005166:	08200593          	li	a1,130
    8000516a:	00019617          	auipc	a2,0x19
    8000516e:	80660613          	add	a2,a2,-2042 # 8001d970 <__func__.1+0x1178>
    80005172:	00018517          	auipc	a0,0x18
    80005176:	98650513          	add	a0,a0,-1658 # 8001caf8 <__func__.1+0x300>
    8000517a:	5e9150ef          	jal	8001af62 <printf>
    8000517e:	00144783          	lbu	a5,1(s0)
    80005182:	00018597          	auipc	a1,0x18
    80005186:	94e58593          	add	a1,a1,-1714 # 8001cad0 <__func__.1+0x2d8>
    8000518a:	c789                	beqz	a5,80005194 <virtual_instruction_7+0x10e>
    8000518c:	6418                	ld	a4,8(s0)
    8000518e:	47d9                	li	a5,22
    80005190:	54f70963          	beq	a4,a5,800056e2 <virtual_instruction_7+0x65c>
    80005194:	00018517          	auipc	a0,0x18
    80005198:	97c50513          	add	a0,a0,-1668 # 8001cb10 <__func__.1+0x318>
    8000519c:	5c7150ef          	jal	8001af62 <printf>
    800051a0:	00144783          	lbu	a5,1(s0)
    800051a4:	c789                	beqz	a5,800051ae <virtual_instruction_7+0x128>
    800051a6:	6418                	ld	a4,8(s0)
    800051a8:	47d9                	li	a5,22
    800051aa:	00f70c63          	beq	a4,a5,800051c2 <virtual_instruction_7+0x13c>
    800051ae:	00018517          	auipc	a0,0x18
    800051b2:	96a50513          	add	a0,a0,-1686 # 8001cb18 <__func__.1+0x320>
    800051b6:	5ad150ef          	jal	8001af62 <printf>
    800051ba:	02900513          	li	a0,41
    800051be:	477140ef          	jal	80019e34 <putchar>
    800051c2:	4529                	li	a0,10
    800051c4:	471140ef          	jal	80019e34 <putchar>
    800051c8:	c491                	beqz	s1,800051d4 <virtual_instruction_7+0x14e>
    800051ca:	00144783          	lbu	a5,1(s0)
    800051ce:	4481                	li	s1,0
    800051d0:	4c079663          	bnez	a5,8000569c <virtual_instruction_7+0x616>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    800051d4:	4501                	li	a0,0
    800051d6:	909fb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    800051da:	0ff0000f          	fence
    800051de:	4785                	li	a5,1
    800051e0:	00f41023          	sh	a5,0(s0)
    800051e4:	00038797          	auipc	a5,0x38
    800051e8:	e607b223          	sd	zero,-412(a5) # 8003d048 <excpt+0x38>
    800051ec:	0ff0000f          	fence
    asm volatile(
    800051f0:	4781                	li	a5,0
    800051f2:	6407c7f3          	.4byte	0x6407c7f3
     tmp = hlvh(0);

    TEST_ASSERT("vu hlvh leads to virtual instruction exception",
    800051f6:	08200593          	li	a1,130
    800051fa:	00018617          	auipc	a2,0x18
    800051fe:	7a660613          	add	a2,a2,1958 # 8001d9a0 <__func__.1+0x11a8>
    80005202:	00018517          	auipc	a0,0x18
    80005206:	8f650513          	add	a0,a0,-1802 # 8001caf8 <__func__.1+0x300>
    8000520a:	559150ef          	jal	8001af62 <printf>
    8000520e:	00144783          	lbu	a5,1(s0)
    80005212:	00018597          	auipc	a1,0x18
    80005216:	8be58593          	add	a1,a1,-1858 # 8001cad0 <__func__.1+0x2d8>
    8000521a:	c789                	beqz	a5,80005224 <virtual_instruction_7+0x19e>
    8000521c:	6418                	ld	a4,8(s0)
    8000521e:	47d9                	li	a5,22
    80005220:	48f70363          	beq	a4,a5,800056a6 <virtual_instruction_7+0x620>
    80005224:	00018517          	auipc	a0,0x18
    80005228:	8ec50513          	add	a0,a0,-1812 # 8001cb10 <__func__.1+0x318>
    8000522c:	537150ef          	jal	8001af62 <printf>
    80005230:	00144783          	lbu	a5,1(s0)
    80005234:	c789                	beqz	a5,8000523e <virtual_instruction_7+0x1b8>
    80005236:	6418                	ld	a4,8(s0)
    80005238:	47d9                	li	a5,22
    8000523a:	00f70c63          	beq	a4,a5,80005252 <virtual_instruction_7+0x1cc>
    8000523e:	00018517          	auipc	a0,0x18
    80005242:	8da50513          	add	a0,a0,-1830 # 8001cb18 <__func__.1+0x320>
    80005246:	51d150ef          	jal	8001af62 <printf>
    8000524a:	02900513          	li	a0,41
    8000524e:	3e7140ef          	jal	80019e34 <putchar>
    80005252:	4529                	li	a0,10
    80005254:	3e1140ef          	jal	80019e34 <putchar>
    80005258:	c491                	beqz	s1,80005264 <virtual_instruction_7+0x1de>
    8000525a:	00144783          	lbu	a5,1(s0)
    8000525e:	4481                	li	s1,0
    80005260:	42079963          	bnez	a5,80005692 <virtual_instruction_7+0x60c>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005264:	4501                	li	a0,0
    80005266:	879fb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000526a:	0ff0000f          	fence
    8000526e:	4785                	li	a5,1
    80005270:	00f41023          	sh	a5,0(s0)
    80005274:	00038797          	auipc	a5,0x38
    80005278:	dc07ba23          	sd	zero,-556(a5) # 8003d048 <excpt+0x38>
    8000527c:	0ff0000f          	fence
    asm volatile(
    80005280:	4781                	li	a5,0
    80005282:	6807c7f3          	.4byte	0x6807c7f3
     tmp = hlvw(0);

    TEST_ASSERT("vu hlvw leads to virtual instruction exception",
    80005286:	08200593          	li	a1,130
    8000528a:	00018617          	auipc	a2,0x18
    8000528e:	74660613          	add	a2,a2,1862 # 8001d9d0 <__func__.1+0x11d8>
    80005292:	00018517          	auipc	a0,0x18
    80005296:	86650513          	add	a0,a0,-1946 # 8001caf8 <__func__.1+0x300>
    8000529a:	4c9150ef          	jal	8001af62 <printf>
    8000529e:	00144783          	lbu	a5,1(s0)
    800052a2:	00018597          	auipc	a1,0x18
    800052a6:	82e58593          	add	a1,a1,-2002 # 8001cad0 <__func__.1+0x2d8>
    800052aa:	c789                	beqz	a5,800052b4 <virtual_instruction_7+0x22e>
    800052ac:	6418                	ld	a4,8(s0)
    800052ae:	47d9                	li	a5,22
    800052b0:	42f70e63          	beq	a4,a5,800056ec <virtual_instruction_7+0x666>
    800052b4:	00018517          	auipc	a0,0x18
    800052b8:	85c50513          	add	a0,a0,-1956 # 8001cb10 <__func__.1+0x318>
    800052bc:	4a7150ef          	jal	8001af62 <printf>
    800052c0:	00144783          	lbu	a5,1(s0)
    800052c4:	c789                	beqz	a5,800052ce <virtual_instruction_7+0x248>
    800052c6:	6418                	ld	a4,8(s0)
    800052c8:	47d9                	li	a5,22
    800052ca:	00f70c63          	beq	a4,a5,800052e2 <virtual_instruction_7+0x25c>
    800052ce:	00018517          	auipc	a0,0x18
    800052d2:	84a50513          	add	a0,a0,-1974 # 8001cb18 <__func__.1+0x320>
    800052d6:	48d150ef          	jal	8001af62 <printf>
    800052da:	02900513          	li	a0,41
    800052de:	357140ef          	jal	80019e34 <putchar>
    800052e2:	4529                	li	a0,10
    800052e4:	351140ef          	jal	80019e34 <putchar>
    800052e8:	c491                	beqz	s1,800052f4 <virtual_instruction_7+0x26e>
    800052ea:	00144783          	lbu	a5,1(s0)
    800052ee:	4481                	li	s1,0
    800052f0:	38079c63          	bnez	a5,80005688 <virtual_instruction_7+0x602>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    800052f4:	4501                	li	a0,0
    800052f6:	fe8fb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    800052fa:	0ff0000f          	fence
    800052fe:	4785                	li	a5,1
    80005300:	00f41023          	sh	a5,0(s0)
    80005304:	00038797          	auipc	a5,0x38
    80005308:	d407b223          	sd	zero,-700(a5) # 8003d048 <excpt+0x38>
    8000530c:	0ff0000f          	fence
    asm volatile(
    80005310:	4781                	li	a5,0
    80005312:	6c07c7f3          	.4byte	0x6c07c7f3
     tmp = hlvd(0);

    TEST_ASSERT("vu hlvd leads to virtual instruction exception",
    80005316:	08200593          	li	a1,130
    8000531a:	00018617          	auipc	a2,0x18
    8000531e:	6e660613          	add	a2,a2,1766 # 8001da00 <__func__.1+0x1208>
    80005322:	00017517          	auipc	a0,0x17
    80005326:	7d650513          	add	a0,a0,2006 # 8001caf8 <__func__.1+0x300>
    8000532a:	439150ef          	jal	8001af62 <printf>
    8000532e:	00144783          	lbu	a5,1(s0)
    80005332:	00017597          	auipc	a1,0x17
    80005336:	79e58593          	add	a1,a1,1950 # 8001cad0 <__func__.1+0x2d8>
    8000533a:	c789                	beqz	a5,80005344 <virtual_instruction_7+0x2be>
    8000533c:	6418                	ld	a4,8(s0)
    8000533e:	47d9                	li	a5,22
    80005340:	3af70b63          	beq	a4,a5,800056f6 <virtual_instruction_7+0x670>
    80005344:	00017517          	auipc	a0,0x17
    80005348:	7cc50513          	add	a0,a0,1996 # 8001cb10 <__func__.1+0x318>
    8000534c:	417150ef          	jal	8001af62 <printf>
    80005350:	00144783          	lbu	a5,1(s0)
    80005354:	c789                	beqz	a5,8000535e <virtual_instruction_7+0x2d8>
    80005356:	6418                	ld	a4,8(s0)
    80005358:	47d9                	li	a5,22
    8000535a:	00f70c63          	beq	a4,a5,80005372 <virtual_instruction_7+0x2ec>
    8000535e:	00017517          	auipc	a0,0x17
    80005362:	7ba50513          	add	a0,a0,1978 # 8001cb18 <__func__.1+0x320>
    80005366:	3fd150ef          	jal	8001af62 <printf>
    8000536a:	02900513          	li	a0,41
    8000536e:	2c7140ef          	jal	80019e34 <putchar>
    80005372:	4529                	li	a0,10
    80005374:	2c1140ef          	jal	80019e34 <putchar>
    80005378:	c491                	beqz	s1,80005384 <virtual_instruction_7+0x2fe>
    8000537a:	00144783          	lbu	a5,1(s0)
    8000537e:	4481                	li	s1,0
    80005380:	2e079f63          	bnez	a5,8000567e <virtual_instruction_7+0x5f8>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005384:	4501                	li	a0,0
    80005386:	f58fb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000538a:	0ff0000f          	fence
    8000538e:	4785                	li	a5,1
    80005390:	00f41023          	sh	a5,0(s0)
    80005394:	00038797          	auipc	a5,0x38
    80005398:	ca07ba23          	sd	zero,-844(a5) # 8003d048 <excpt+0x38>
    8000539c:	0ff0000f          	fence
    asm volatile(
    800053a0:	37ab77b7          	lui	a5,0x37ab7
    800053a4:	078a                	sll	a5,a5,0x2
    800053a6:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800053aa:	4701                	li	a4,0
    800053ac:	62f74073          	.4byte	0x62f74073
    hsvb(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    800053b0:	640c                	ld	a1,8(s0)
    800053b2:	00018517          	auipc	a0,0x18
    800053b6:	0ee50513          	add	a0,a0,238 # 8001d4a0 <__func__.1+0xca8>
    800053ba:	3a9150ef          	jal	8001af62 <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    800053be:	08200593          	li	a1,130
    800053c2:	00018617          	auipc	a2,0x18
    800053c6:	66e60613          	add	a2,a2,1646 # 8001da30 <__func__.1+0x1238>
    800053ca:	00017517          	auipc	a0,0x17
    800053ce:	72e50513          	add	a0,a0,1838 # 8001caf8 <__func__.1+0x300>
    800053d2:	391150ef          	jal	8001af62 <printf>
    800053d6:	00144783          	lbu	a5,1(s0)
    800053da:	00017597          	auipc	a1,0x17
    800053de:	6f658593          	add	a1,a1,1782 # 8001cad0 <__func__.1+0x2d8>
    800053e2:	c789                	beqz	a5,800053ec <virtual_instruction_7+0x366>
    800053e4:	6418                	ld	a4,8(s0)
    800053e6:	47d9                	li	a5,22
    800053e8:	2cf70e63          	beq	a4,a5,800056c4 <virtual_instruction_7+0x63e>
    800053ec:	00017517          	auipc	a0,0x17
    800053f0:	72450513          	add	a0,a0,1828 # 8001cb10 <__func__.1+0x318>
    800053f4:	36f150ef          	jal	8001af62 <printf>
    800053f8:	00144783          	lbu	a5,1(s0)
    800053fc:	c789                	beqz	a5,80005406 <virtual_instruction_7+0x380>
    800053fe:	6418                	ld	a4,8(s0)
    80005400:	47d9                	li	a5,22
    80005402:	00f70c63          	beq	a4,a5,8000541a <virtual_instruction_7+0x394>
    80005406:	00017517          	auipc	a0,0x17
    8000540a:	71250513          	add	a0,a0,1810 # 8001cb18 <__func__.1+0x320>
    8000540e:	355150ef          	jal	8001af62 <printf>
    80005412:	02900513          	li	a0,41
    80005416:	21f140ef          	jal	80019e34 <putchar>
    8000541a:	4529                	li	a0,10
    8000541c:	219140ef          	jal	80019e34 <putchar>
    80005420:	c491                	beqz	s1,8000542c <virtual_instruction_7+0x3a6>
    80005422:	00144783          	lbu	a5,1(s0)
    80005426:	4481                	li	s1,0
    80005428:	24079663          	bnez	a5,80005674 <virtual_instruction_7+0x5ee>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    8000542c:	4501                	li	a0,0
    8000542e:	eb0fb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80005432:	0ff0000f          	fence
    80005436:	4785                	li	a5,1
    80005438:	00f41023          	sh	a5,0(s0)
    8000543c:	00038797          	auipc	a5,0x38
    80005440:	c007b623          	sd	zero,-1012(a5) # 8003d048 <excpt+0x38>
    80005444:	0ff0000f          	fence
    asm volatile(
    80005448:	37ab77b7          	lui	a5,0x37ab7
    8000544c:	078a                	sll	a5,a5,0x2
    8000544e:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005452:	4701                	li	a4,0
    80005454:	6ef74073          	.4byte	0x6ef74073
    hsvd(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005458:	640c                	ld	a1,8(s0)
    8000545a:	00018517          	auipc	a0,0x18
    8000545e:	04650513          	add	a0,a0,70 # 8001d4a0 <__func__.1+0xca8>
    80005462:	301150ef          	jal	8001af62 <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005466:	08200593          	li	a1,130
    8000546a:	00018617          	auipc	a2,0x18
    8000546e:	5c660613          	add	a2,a2,1478 # 8001da30 <__func__.1+0x1238>
    80005472:	00017517          	auipc	a0,0x17
    80005476:	68650513          	add	a0,a0,1670 # 8001caf8 <__func__.1+0x300>
    8000547a:	2e9150ef          	jal	8001af62 <printf>
    8000547e:	00144783          	lbu	a5,1(s0)
    80005482:	00017597          	auipc	a1,0x17
    80005486:	64e58593          	add	a1,a1,1614 # 8001cad0 <__func__.1+0x2d8>
    8000548a:	c789                	beqz	a5,80005494 <virtual_instruction_7+0x40e>
    8000548c:	6418                	ld	a4,8(s0)
    8000548e:	47d9                	li	a5,22
    80005490:	22f70f63          	beq	a4,a5,800056ce <virtual_instruction_7+0x648>
    80005494:	00017517          	auipc	a0,0x17
    80005498:	67c50513          	add	a0,a0,1660 # 8001cb10 <__func__.1+0x318>
    8000549c:	2c7150ef          	jal	8001af62 <printf>
    800054a0:	00144783          	lbu	a5,1(s0)
    800054a4:	c789                	beqz	a5,800054ae <virtual_instruction_7+0x428>
    800054a6:	6418                	ld	a4,8(s0)
    800054a8:	47d9                	li	a5,22
    800054aa:	00f70c63          	beq	a4,a5,800054c2 <virtual_instruction_7+0x43c>
    800054ae:	00017517          	auipc	a0,0x17
    800054b2:	66a50513          	add	a0,a0,1642 # 8001cb18 <__func__.1+0x320>
    800054b6:	2ad150ef          	jal	8001af62 <printf>
    800054ba:	02900513          	li	a0,41
    800054be:	177140ef          	jal	80019e34 <putchar>
    800054c2:	4529                	li	a0,10
    800054c4:	171140ef          	jal	80019e34 <putchar>
    800054c8:	c491                	beqz	s1,800054d4 <virtual_instruction_7+0x44e>
    800054ca:	00144783          	lbu	a5,1(s0)
    800054ce:	4481                	li	s1,0
    800054d0:	18079d63          	bnez	a5,8000566a <virtual_instruction_7+0x5e4>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    800054d4:	4501                	li	a0,0
    800054d6:	e08fb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    800054da:	0ff0000f          	fence
    800054de:	4785                	li	a5,1
    800054e0:	00f41023          	sh	a5,0(s0)
    800054e4:	00038797          	auipc	a5,0x38
    800054e8:	b607b223          	sd	zero,-1180(a5) # 8003d048 <excpt+0x38>
    800054ec:	0ff0000f          	fence
    asm volatile(
    800054f0:	37ab77b7          	lui	a5,0x37ab7
    800054f4:	078a                	sll	a5,a5,0x2
    800054f6:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800054fa:	4701                	li	a4,0
    800054fc:	6af74073          	.4byte	0x6af74073
    hsvw(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005500:	640c                	ld	a1,8(s0)
    80005502:	00018517          	auipc	a0,0x18
    80005506:	f9e50513          	add	a0,a0,-98 # 8001d4a0 <__func__.1+0xca8>
    8000550a:	259150ef          	jal	8001af62 <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    8000550e:	08200593          	li	a1,130
    80005512:	00018617          	auipc	a2,0x18
    80005516:	51e60613          	add	a2,a2,1310 # 8001da30 <__func__.1+0x1238>
    8000551a:	00017517          	auipc	a0,0x17
    8000551e:	5de50513          	add	a0,a0,1502 # 8001caf8 <__func__.1+0x300>
    80005522:	241150ef          	jal	8001af62 <printf>
    80005526:	00144783          	lbu	a5,1(s0)
    8000552a:	00017597          	auipc	a1,0x17
    8000552e:	5a658593          	add	a1,a1,1446 # 8001cad0 <__func__.1+0x2d8>
    80005532:	c789                	beqz	a5,8000553c <virtual_instruction_7+0x4b6>
    80005534:	6418                	ld	a4,8(s0)
    80005536:	47d9                	li	a5,22
    80005538:	16f70c63          	beq	a4,a5,800056b0 <virtual_instruction_7+0x62a>
    8000553c:	00017517          	auipc	a0,0x17
    80005540:	5d450513          	add	a0,a0,1492 # 8001cb10 <__func__.1+0x318>
    80005544:	21f150ef          	jal	8001af62 <printf>
    80005548:	00144783          	lbu	a5,1(s0)
    8000554c:	c789                	beqz	a5,80005556 <virtual_instruction_7+0x4d0>
    8000554e:	6418                	ld	a4,8(s0)
    80005550:	47d9                	li	a5,22
    80005552:	00f70c63          	beq	a4,a5,8000556a <virtual_instruction_7+0x4e4>
    80005556:	00017517          	auipc	a0,0x17
    8000555a:	5c250513          	add	a0,a0,1474 # 8001cb18 <__func__.1+0x320>
    8000555e:	205150ef          	jal	8001af62 <printf>
    80005562:	02900513          	li	a0,41
    80005566:	0cf140ef          	jal	80019e34 <putchar>
    8000556a:	4529                	li	a0,10
    8000556c:	0c9140ef          	jal	80019e34 <putchar>
    80005570:	c491                	beqz	s1,8000557c <virtual_instruction_7+0x4f6>
    80005572:	00144783          	lbu	a5,1(s0)
    80005576:	4481                	li	s1,0
    80005578:	0e079463          	bnez	a5,80005660 <virtual_instruction_7+0x5da>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    8000557c:	4501                	li	a0,0
    8000557e:	d60fb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80005582:	0ff0000f          	fence
    80005586:	4785                	li	a5,1
    80005588:	00f41023          	sh	a5,0(s0)
    8000558c:	00038797          	auipc	a5,0x38
    80005590:	aa07be23          	sd	zero,-1348(a5) # 8003d048 <excpt+0x38>
    80005594:	0ff0000f          	fence
    asm volatile(
    80005598:	37ab77b7          	lui	a5,0x37ab7
    8000559c:	078a                	sll	a5,a5,0x2
    8000559e:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800055a2:	4701                	li	a4,0
    800055a4:	66f74073          	.4byte	0x66f74073
    hsvh(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    800055a8:	640c                	ld	a1,8(s0)
    800055aa:	00018517          	auipc	a0,0x18
    800055ae:	ef650513          	add	a0,a0,-266 # 8001d4a0 <__func__.1+0xca8>
    800055b2:	1b1150ef          	jal	8001af62 <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    800055b6:	08200593          	li	a1,130
    800055ba:	00018617          	auipc	a2,0x18
    800055be:	47660613          	add	a2,a2,1142 # 8001da30 <__func__.1+0x1238>
    800055c2:	00017517          	auipc	a0,0x17
    800055c6:	53650513          	add	a0,a0,1334 # 8001caf8 <__func__.1+0x300>
    800055ca:	199150ef          	jal	8001af62 <printf>
    800055ce:	00144783          	lbu	a5,1(s0)
    800055d2:	00017597          	auipc	a1,0x17
    800055d6:	4fe58593          	add	a1,a1,1278 # 8001cad0 <__func__.1+0x2d8>
    800055da:	c789                	beqz	a5,800055e4 <virtual_instruction_7+0x55e>
    800055dc:	6418                	ld	a4,8(s0)
    800055de:	47d9                	li	a5,22
    800055e0:	0cf70d63          	beq	a4,a5,800056ba <virtual_instruction_7+0x634>
    800055e4:	00017517          	auipc	a0,0x17
    800055e8:	52c50513          	add	a0,a0,1324 # 8001cb10 <__func__.1+0x318>
    800055ec:	177150ef          	jal	8001af62 <printf>
    800055f0:	00144783          	lbu	a5,1(s0)
    800055f4:	c789                	beqz	a5,800055fe <virtual_instruction_7+0x578>
    800055f6:	6418                	ld	a4,8(s0)
    800055f8:	47d9                	li	a5,22
    800055fa:	00f70c63          	beq	a4,a5,80005612 <virtual_instruction_7+0x58c>
    800055fe:	00017517          	auipc	a0,0x17
    80005602:	51a50513          	add	a0,a0,1306 # 8001cb18 <__func__.1+0x320>
    80005606:	15d150ef          	jal	8001af62 <printf>
    8000560a:	02900513          	li	a0,41
    8000560e:	027140ef          	jal	80019e34 <putchar>
    80005612:	4529                	li	a0,10
    80005614:	021140ef          	jal	80019e34 <putchar>
    80005618:	cc95                	beqz	s1,80005654 <virtual_instruction_7+0x5ce>
    8000561a:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    TEST_END();
    8000561e:	00017597          	auipc	a1,0x17
    80005622:	4b258593          	add	a1,a1,1202 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005626:	c491                	beqz	s1,80005632 <virtual_instruction_7+0x5ac>
    80005628:	6418                	ld	a4,8(s0)
    8000562a:	47d9                	li	a5,22
    8000562c:	0cf70a63          	beq	a4,a5,80005700 <virtual_instruction_7+0x67a>
    80005630:	4481                	li	s1,0
    TEST_END();
    80005632:	00017517          	auipc	a0,0x17
    80005636:	54650513          	add	a0,a0,1350 # 8001cb78 <__func__.1+0x380>
    8000563a:	129150ef          	jal	8001af62 <printf>
    8000563e:	4511                	li	a0,4
    80005640:	c9efb0ef          	jal	80000ade <goto_priv>
    80005644:	ce3fb0ef          	jal	80001326 <reset_state>
}
    80005648:	60e2                	ld	ra,24(sp)
    8000564a:	6442                	ld	s0,16(sp)
    8000564c:	8526                	mv	a0,s1
    8000564e:	64a2                	ld	s1,8(sp)
    80005650:	6105                	add	sp,sp,32
    80005652:	8082                	ret
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005654:	4481                	li	s1,0
    TEST_END();
    80005656:	00017597          	auipc	a1,0x17
    8000565a:	47a58593          	add	a1,a1,1146 # 8001cad0 <__func__.1+0x2d8>
    8000565e:	bfd1                	j	80005632 <virtual_instruction_7+0x5ac>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005660:	6404                	ld	s1,8(s0)
    80005662:	14a9                	add	s1,s1,-22
    80005664:	0014b493          	seqz	s1,s1
    80005668:	bf11                	j	8000557c <virtual_instruction_7+0x4f6>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    8000566a:	6404                	ld	s1,8(s0)
    8000566c:	14a9                	add	s1,s1,-22
    8000566e:	0014b493          	seqz	s1,s1
    80005672:	b58d                	j	800054d4 <virtual_instruction_7+0x44e>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005674:	6404                	ld	s1,8(s0)
    80005676:	14a9                	add	s1,s1,-22
    80005678:	0014b493          	seqz	s1,s1
    8000567c:	bb45                	j	8000542c <virtual_instruction_7+0x3a6>
    TEST_ASSERT("vu hlvd leads to virtual instruction exception",
    8000567e:	6404                	ld	s1,8(s0)
    80005680:	14a9                	add	s1,s1,-22
    80005682:	0014b493          	seqz	s1,s1
    80005686:	b9fd                	j	80005384 <virtual_instruction_7+0x2fe>
    TEST_ASSERT("vu hlvw leads to virtual instruction exception",
    80005688:	6404                	ld	s1,8(s0)
    8000568a:	14a9                	add	s1,s1,-22
    8000568c:	0014b493          	seqz	s1,s1
    80005690:	b195                	j	800052f4 <virtual_instruction_7+0x26e>
    TEST_ASSERT("vu hlvh leads to virtual instruction exception",
    80005692:	6404                	ld	s1,8(s0)
    80005694:	14a9                	add	s1,s1,-22
    80005696:	0014b493          	seqz	s1,s1
    8000569a:	b6e9                	j	80005264 <virtual_instruction_7+0x1de>
    TEST_ASSERT("vu hlvbu leads to virtual instruction exception",
    8000569c:	6404                	ld	s1,8(s0)
    8000569e:	14a9                	add	s1,s1,-22
    800056a0:	0014b493          	seqz	s1,s1
    800056a4:	be05                	j	800051d4 <virtual_instruction_7+0x14e>
    TEST_ASSERT("vu hlvh leads to virtual instruction exception",
    800056a6:	00017597          	auipc	a1,0x17
    800056aa:	41a58593          	add	a1,a1,1050 # 8001cac0 <__func__.1+0x2c8>
    800056ae:	be9d                	j	80005224 <virtual_instruction_7+0x19e>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    800056b0:	00017597          	auipc	a1,0x17
    800056b4:	41058593          	add	a1,a1,1040 # 8001cac0 <__func__.1+0x2c8>
    800056b8:	b551                	j	8000553c <virtual_instruction_7+0x4b6>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    800056ba:	00017597          	auipc	a1,0x17
    800056be:	40658593          	add	a1,a1,1030 # 8001cac0 <__func__.1+0x2c8>
    800056c2:	b70d                	j	800055e4 <virtual_instruction_7+0x55e>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    800056c4:	00017597          	auipc	a1,0x17
    800056c8:	3fc58593          	add	a1,a1,1020 # 8001cac0 <__func__.1+0x2c8>
    800056cc:	b305                	j	800053ec <virtual_instruction_7+0x366>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    800056ce:	00017597          	auipc	a1,0x17
    800056d2:	3f258593          	add	a1,a1,1010 # 8001cac0 <__func__.1+0x2c8>
    800056d6:	bb7d                	j	80005494 <virtual_instruction_7+0x40e>
    TEST_ASSERT("vu hlvb leads to virtual instruction exception",
    800056d8:	00017597          	auipc	a1,0x17
    800056dc:	3e858593          	add	a1,a1,1000 # 8001cac0 <__func__.1+0x2c8>
    800056e0:	b405                	j	80005100 <virtual_instruction_7+0x7a>
    TEST_ASSERT("vu hlvbu leads to virtual instruction exception",
    800056e2:	00017597          	auipc	a1,0x17
    800056e6:	3de58593          	add	a1,a1,990 # 8001cac0 <__func__.1+0x2c8>
    800056ea:	b46d                	j	80005194 <virtual_instruction_7+0x10e>
    TEST_ASSERT("vu hlvw leads to virtual instruction exception",
    800056ec:	00017597          	auipc	a1,0x17
    800056f0:	3d458593          	add	a1,a1,980 # 8001cac0 <__func__.1+0x2c8>
    800056f4:	b6c1                	j	800052b4 <virtual_instruction_7+0x22e>
    TEST_ASSERT("vu hlvd leads to virtual instruction exception",
    800056f6:	00017597          	auipc	a1,0x17
    800056fa:	3ca58593          	add	a1,a1,970 # 8001cac0 <__func__.1+0x2c8>
    800056fe:	b199                	j	80005344 <virtual_instruction_7+0x2be>
    TEST_END();
    80005700:	00017597          	auipc	a1,0x17
    80005704:	3c058593          	add	a1,a1,960 # 8001cac0 <__func__.1+0x2c8>
    80005708:	b72d                	j	80005632 <virtual_instruction_7+0x5ac>

000000008000570a <virtual_instruction_8>:

    ////////////////////////////////////////////////////////////////////////
//在mstatus.TW=0  时执行WFI   (即使允许执行WFI指令),或者执行S级监管级指令 (SRET或者SFENCE)   , 引发虚拟异常(在虚拟用户模式下，软件不应该 由执行这些监管模式指令的权限)
bool virtual_instruction_8() {
    8000570a:	1101                	add	sp,sp,-32

    TEST_START();
    8000570c:	00016597          	auipc	a1,0x16
    80005710:	03c58593          	add	a1,a1,60 # 8001b748 <__func__.3>
    80005714:	00017517          	auipc	a0,0x17
    80005718:	3cc50513          	add	a0,a0,972 # 8001cae0 <__func__.1+0x2e8>
bool virtual_instruction_8() {
    8000571c:	ec06                	sd	ra,24(sp)
    8000571e:	e822                	sd	s0,16(sp)
    80005720:	e426                	sd	s1,8(sp)
    TEST_START();
    80005722:	041150ef          	jal	8001af62 <printf>
    80005726:	4529                	li	a0,10
    80005728:	70c140ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    8000572c:	4511                	li	a0,4
    8000572e:	bb0fb0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTSR);
    80005732:	004007b7          	lui	a5,0x400
    80005736:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    8000573a:	002007b7          	lui	a5,0x200
    8000573e:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_VU);
    80005742:	4501                	li	a0,0
    80005744:	b9afb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80005748:	0ff0000f          	fence
    8000574c:	4785                	li	a5,1
    8000574e:	00038417          	auipc	s0,0x38
    80005752:	8c240413          	add	s0,s0,-1854 # 8003d010 <excpt>
    80005756:	00f41023          	sh	a5,0(s0)
    8000575a:	00038797          	auipc	a5,0x38
    8000575e:	8e07b723          	sd	zero,-1810(a5) # 8003d048 <excpt+0x38>
    80005762:	0ff0000f          	fence
    asm volatile(
    80005766:	10200073          	sret
    sret();
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    8000576a:	08200593          	li	a1,130
    8000576e:	00018617          	auipc	a2,0x18
    80005772:	2f260613          	add	a2,a2,754 # 8001da60 <__func__.1+0x1268>
    80005776:	00017517          	auipc	a0,0x17
    8000577a:	38250513          	add	a0,a0,898 # 8001caf8 <__func__.1+0x300>
    8000577e:	7e4150ef          	jal	8001af62 <printf>
    80005782:	00144783          	lbu	a5,1(s0)
    80005786:	00017597          	auipc	a1,0x17
    8000578a:	34a58593          	add	a1,a1,842 # 8001cad0 <__func__.1+0x2d8>
    8000578e:	c789                	beqz	a5,80005798 <virtual_instruction_8+0x8e>
    80005790:	6418                	ld	a4,8(s0)
    80005792:	47d9                	li	a5,22
    80005794:	06f70e63          	beq	a4,a5,80005810 <virtual_instruction_8+0x106>
    80005798:	00017517          	auipc	a0,0x17
    8000579c:	37850513          	add	a0,a0,888 # 8001cb10 <__func__.1+0x318>
    800057a0:	7c2150ef          	jal	8001af62 <printf>
    800057a4:	00144783          	lbu	a5,1(s0)
    800057a8:	c789                	beqz	a5,800057b2 <virtual_instruction_8+0xa8>
    800057aa:	6418                	ld	a4,8(s0)
    800057ac:	47d9                	li	a5,22
    800057ae:	00f70c63          	beq	a4,a5,800057c6 <virtual_instruction_8+0xbc>
    800057b2:	00017517          	auipc	a0,0x17
    800057b6:	36650513          	add	a0,a0,870 # 8001cb18 <__func__.1+0x320>
    800057ba:	7a8150ef          	jal	8001af62 <printf>
    800057be:	02900513          	li	a0,41
    800057c2:	672140ef          	jal	80019e34 <putchar>
    800057c6:	4529                	li	a0,10
    800057c8:	66c140ef          	jal	80019e34 <putchar>
    800057cc:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  
 
    TEST_END();
    800057d0:	00017597          	auipc	a1,0x17
    800057d4:	30058593          	add	a1,a1,768 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    800057d8:	c491                	beqz	s1,800057e4 <virtual_instruction_8+0xda>
    800057da:	6418                	ld	a4,8(s0)
    800057dc:	47d9                	li	a5,22
    800057de:	02f70463          	beq	a4,a5,80005806 <virtual_instruction_8+0xfc>
    800057e2:	4481                	li	s1,0
    TEST_END();
    800057e4:	00017517          	auipc	a0,0x17
    800057e8:	39450513          	add	a0,a0,916 # 8001cb78 <__func__.1+0x380>
    800057ec:	776150ef          	jal	8001af62 <printf>
    800057f0:	4511                	li	a0,4
    800057f2:	aecfb0ef          	jal	80000ade <goto_priv>
    800057f6:	b31fb0ef          	jal	80001326 <reset_state>
}
    800057fa:	60e2                	ld	ra,24(sp)
    800057fc:	6442                	ld	s0,16(sp)
    800057fe:	8526                	mv	a0,s1
    80005800:	64a2                	ld	s1,8(sp)
    80005802:	6105                	add	sp,sp,32
    80005804:	8082                	ret
    TEST_END();
    80005806:	00017597          	auipc	a1,0x17
    8000580a:	2ba58593          	add	a1,a1,698 # 8001cac0 <__func__.1+0x2c8>
    8000580e:	bfd9                	j	800057e4 <virtual_instruction_8+0xda>
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    80005810:	00017597          	auipc	a1,0x17
    80005814:	2b058593          	add	a1,a1,688 # 8001cac0 <__func__.1+0x2c8>
    80005818:	b741                	j	80005798 <virtual_instruction_8+0x8e>

000000008000581a <virtual_instruction_9>:
bool virtual_instruction_9() {
    8000581a:	1101                	add	sp,sp,-32

    TEST_START();
    8000581c:	00016597          	auipc	a1,0x16
    80005820:	f4458593          	add	a1,a1,-188 # 8001b760 <__func__.2>
    80005824:	00017517          	auipc	a0,0x17
    80005828:	2bc50513          	add	a0,a0,700 # 8001cae0 <__func__.1+0x2e8>
bool virtual_instruction_9() {
    8000582c:	ec06                	sd	ra,24(sp)
    8000582e:	e822                	sd	s0,16(sp)
    80005830:	e426                	sd	s1,8(sp)
    TEST_START();
    80005832:	730150ef          	jal	8001af62 <printf>
    80005836:	4529                	li	a0,10
    80005838:	5fc140ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    8000583c:	4511                	li	a0,4
    8000583e:	aa0fb0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80005842:	002007b7          	lui	a5,0x200
    80005846:	3007b073          	csrc	mstatus,a5
    
    goto_priv(PRIV_VU);
    8000584a:	4501                	li	a0,0
    8000584c:	a92fb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80005850:	0ff0000f          	fence
    80005854:	4785                	li	a5,1
    80005856:	00037417          	auipc	s0,0x37
    8000585a:	7ba40413          	add	s0,s0,1978 # 8003d010 <excpt>
    8000585e:	00f41023          	sh	a5,0(s0)
    80005862:	00037797          	auipc	a5,0x37
    80005866:	7e07b323          	sd	zero,2022(a5) # 8003d048 <excpt+0x38>
    8000586a:	0ff0000f          	fence
    asm volatile ("sfence.vma \n\t");
    8000586e:	12000073          	sfence.vma
    sfence();
    
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    80005872:	08200593          	li	a1,130
    80005876:	00018617          	auipc	a2,0x18
    8000587a:	23260613          	add	a2,a2,562 # 8001daa8 <__func__.1+0x12b0>
    8000587e:	00017517          	auipc	a0,0x17
    80005882:	27a50513          	add	a0,a0,634 # 8001caf8 <__func__.1+0x300>
    80005886:	6dc150ef          	jal	8001af62 <printf>
    8000588a:	00144783          	lbu	a5,1(s0)
    8000588e:	00017597          	auipc	a1,0x17
    80005892:	24258593          	add	a1,a1,578 # 8001cad0 <__func__.1+0x2d8>
    80005896:	c789                	beqz	a5,800058a0 <virtual_instruction_9+0x86>
    80005898:	6418                	ld	a4,8(s0)
    8000589a:	47d9                	li	a5,22
    8000589c:	06f70e63          	beq	a4,a5,80005918 <virtual_instruction_9+0xfe>
    800058a0:	00017517          	auipc	a0,0x17
    800058a4:	27050513          	add	a0,a0,624 # 8001cb10 <__func__.1+0x318>
    800058a8:	6ba150ef          	jal	8001af62 <printf>
    800058ac:	00144783          	lbu	a5,1(s0)
    800058b0:	c789                	beqz	a5,800058ba <virtual_instruction_9+0xa0>
    800058b2:	6418                	ld	a4,8(s0)
    800058b4:	47d9                	li	a5,22
    800058b6:	00f70c63          	beq	a4,a5,800058ce <virtual_instruction_9+0xb4>
    800058ba:	00017517          	auipc	a0,0x17
    800058be:	25e50513          	add	a0,a0,606 # 8001cb18 <__func__.1+0x320>
    800058c2:	6a0150ef          	jal	8001af62 <printf>
    800058c6:	02900513          	li	a0,41
    800058ca:	56a140ef          	jal	80019e34 <putchar>
    800058ce:	4529                	li	a0,10
    800058d0:	564140ef          	jal	80019e34 <putchar>
    800058d4:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_END();
    800058d8:	00017597          	auipc	a1,0x17
    800058dc:	1f858593          	add	a1,a1,504 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    800058e0:	c491                	beqz	s1,800058ec <virtual_instruction_9+0xd2>
    800058e2:	6418                	ld	a4,8(s0)
    800058e4:	47d9                	li	a5,22
    800058e6:	02f70463          	beq	a4,a5,8000590e <virtual_instruction_9+0xf4>
    800058ea:	4481                	li	s1,0
    TEST_END();
    800058ec:	00017517          	auipc	a0,0x17
    800058f0:	28c50513          	add	a0,a0,652 # 8001cb78 <__func__.1+0x380>
    800058f4:	66e150ef          	jal	8001af62 <printf>
    800058f8:	4511                	li	a0,4
    800058fa:	9e4fb0ef          	jal	80000ade <goto_priv>
    800058fe:	a29fb0ef          	jal	80001326 <reset_state>
}
    80005902:	60e2                	ld	ra,24(sp)
    80005904:	6442                	ld	s0,16(sp)
    80005906:	8526                	mv	a0,s1
    80005908:	64a2                	ld	s1,8(sp)
    8000590a:	6105                	add	sp,sp,32
    8000590c:	8082                	ret
    TEST_END();
    8000590e:	00017597          	auipc	a1,0x17
    80005912:	1b258593          	add	a1,a1,434 # 8001cac0 <__func__.1+0x2c8>
    80005916:	bfd9                	j	800058ec <virtual_instruction_9+0xd2>
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    80005918:	00017597          	auipc	a1,0x17
    8000591c:	1a858593          	add	a1,a1,424 # 8001cac0 <__func__.1+0x2c8>
    80005920:	b741                	j	800058a0 <virtual_instruction_9+0x86>

0000000080005922 <virtual_instruction_10>:
bool virtual_instruction_10() {
    80005922:	1101                	add	sp,sp,-32

    TEST_START();
    80005924:	00016597          	auipc	a1,0x16
    80005928:	e5458593          	add	a1,a1,-428 # 8001b778 <__func__.1>
    8000592c:	00017517          	auipc	a0,0x17
    80005930:	1b450513          	add	a0,a0,436 # 8001cae0 <__func__.1+0x2e8>
bool virtual_instruction_10() {
    80005934:	ec06                	sd	ra,24(sp)
    80005936:	e822                	sd	s0,16(sp)
    80005938:	e426                	sd	s1,8(sp)
    TEST_START();
    8000593a:	628150ef          	jal	8001af62 <printf>
    8000593e:	4529                	li	a0,10
    80005940:	4f4140ef          	jal	80019e34 <putchar>


    goto_priv(PRIV_M);
    80005944:	4511                	li	a0,4
    80005946:	998fb0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);
    8000594a:	002007b7          	lui	a5,0x200
    8000594e:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    80005952:	3007b073          	csrc	mstatus,a5
    
    goto_priv(PRIV_VU);
    80005956:	4501                	li	a0,0
    80005958:	986fb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000595c:	0ff0000f          	fence
    80005960:	4785                	li	a5,1
    80005962:	00037417          	auipc	s0,0x37
    80005966:	6ae40413          	add	s0,s0,1710 # 8003d010 <excpt>
    8000596a:	00f41023          	sh	a5,0(s0)
    8000596e:	00037797          	auipc	a5,0x37
    80005972:	6c07bd23          	sd	zero,1754(a5) # 8003d048 <excpt+0x38>
    80005976:	0ff0000f          	fence
        :: "r"(value), "r"(addr) : "memory");
    return value;
}

static inline void wfi() {
    asm ("wfi" ::: "memory");
    8000597a:	10500073          	wfi
    wfi();
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    8000597e:	08200593          	li	a1,130
    80005982:	00018617          	auipc	a2,0x18
    80005986:	16e60613          	add	a2,a2,366 # 8001daf0 <__func__.1+0x12f8>
    8000598a:	00017517          	auipc	a0,0x17
    8000598e:	16e50513          	add	a0,a0,366 # 8001caf8 <__func__.1+0x300>
    80005992:	5d0150ef          	jal	8001af62 <printf>
    80005996:	00144783          	lbu	a5,1(s0)
    8000599a:	00017597          	auipc	a1,0x17
    8000599e:	13658593          	add	a1,a1,310 # 8001cad0 <__func__.1+0x2d8>
    800059a2:	c789                	beqz	a5,800059ac <virtual_instruction_10+0x8a>
    800059a4:	6418                	ld	a4,8(s0)
    800059a6:	47d9                	li	a5,22
    800059a8:	06f70e63          	beq	a4,a5,80005a24 <virtual_instruction_10+0x102>
    800059ac:	00017517          	auipc	a0,0x17
    800059b0:	16450513          	add	a0,a0,356 # 8001cb10 <__func__.1+0x318>
    800059b4:	5ae150ef          	jal	8001af62 <printf>
    800059b8:	00144783          	lbu	a5,1(s0)
    800059bc:	c789                	beqz	a5,800059c6 <virtual_instruction_10+0xa4>
    800059be:	6418                	ld	a4,8(s0)
    800059c0:	47d9                	li	a5,22
    800059c2:	00f70c63          	beq	a4,a5,800059da <virtual_instruction_10+0xb8>
    800059c6:	00017517          	auipc	a0,0x17
    800059ca:	15250513          	add	a0,a0,338 # 8001cb18 <__func__.1+0x320>
    800059ce:	594150ef          	jal	8001af62 <printf>
    800059d2:	02900513          	li	a0,41
    800059d6:	45e140ef          	jal	80019e34 <putchar>
    800059da:	4529                	li	a0,10
    800059dc:	458140ef          	jal	80019e34 <putchar>
    800059e0:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_END();
    800059e4:	00017597          	auipc	a1,0x17
    800059e8:	0ec58593          	add	a1,a1,236 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    800059ec:	c491                	beqz	s1,800059f8 <virtual_instruction_10+0xd6>
    800059ee:	6418                	ld	a4,8(s0)
    800059f0:	47d9                	li	a5,22
    800059f2:	02f70463          	beq	a4,a5,80005a1a <virtual_instruction_10+0xf8>
    800059f6:	4481                	li	s1,0
    TEST_END();
    800059f8:	00017517          	auipc	a0,0x17
    800059fc:	18050513          	add	a0,a0,384 # 8001cb78 <__func__.1+0x380>
    80005a00:	562150ef          	jal	8001af62 <printf>
    80005a04:	4511                	li	a0,4
    80005a06:	8d8fb0ef          	jal	80000ade <goto_priv>
    80005a0a:	91dfb0ef          	jal	80001326 <reset_state>
}
    80005a0e:	60e2                	ld	ra,24(sp)
    80005a10:	6442                	ld	s0,16(sp)
    80005a12:	8526                	mv	a0,s1
    80005a14:	64a2                	ld	s1,8(sp)
    80005a16:	6105                	add	sp,sp,32
    80005a18:	8082                	ret
    TEST_END();
    80005a1a:	00017597          	auipc	a1,0x17
    80005a1e:	0a658593          	add	a1,a1,166 # 8001cac0 <__func__.1+0x2c8>
    80005a22:	bfd9                	j	800059f8 <virtual_instruction_10+0xd6>
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    80005a24:	00017597          	auipc	a1,0x17
    80005a28:	09c58593          	add	a1,a1,156 # 8001cac0 <__func__.1+0x2c8>
    80005a2c:	b741                	j	800059ac <virtual_instruction_10+0x8a>

0000000080005a2e <virtual_instruction_11>:
    ////////////////////////////////////////////////////////////////////////

bool virtual_instruction_11() {
    80005a2e:	1101                	add	sp,sp,-32

    TEST_START();    
    80005a30:	00016597          	auipc	a1,0x16
    80005a34:	d6058593          	add	a1,a1,-672 # 8001b790 <__func__.0>
    80005a38:	00017517          	auipc	a0,0x17
    80005a3c:	0a850513          	add	a0,a0,168 # 8001cae0 <__func__.1+0x2e8>
bool virtual_instruction_11() {
    80005a40:	ec06                	sd	ra,24(sp)
    80005a42:	e822                	sd	s0,16(sp)
    80005a44:	e426                	sd	s1,8(sp)
    TEST_START();    
    80005a46:	51c150ef          	jal	8001af62 <printf>
    80005a4a:	4529                	li	a0,10
    80005a4c:	3e8140ef          	jal	80019e34 <putchar>
    goto_priv(PRIV_M);
    80005a50:	4511                	li	a0,4
    80005a52:	88cfb0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTVM);
    80005a56:	001007b7          	lui	a5,0x100
    80005a5a:	6007b073          	csrc	hstatus,a5
    CSRC(CSR_HSTATUS, MSTATUS_TVM);
    80005a5e:	6007b073          	csrc	hstatus,a5
    goto_priv(PRIV_VU);
    80005a62:	4501                	li	a0,0
    80005a64:	87afb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80005a68:	0ff0000f          	fence
    80005a6c:	4785                	li	a5,1
    80005a6e:	00037417          	auipc	s0,0x37
    80005a72:	5a240413          	add	s0,s0,1442 # 8003d010 <excpt>
    80005a76:	00f41023          	sh	a5,0(s0)
    80005a7a:	00037797          	auipc	a5,0x37
    80005a7e:	5c07b723          	sd	zero,1486(a5) # 8003d048 <excpt+0x38>
    80005a82:	0ff0000f          	fence
    CSRS(CSR_VSIE,1ULL << 1);
    80005a86:	20416073          	csrs	vsie,2
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    80005a8a:	08200593          	li	a1,130
    80005a8e:	00018617          	auipc	a2,0x18
    80005a92:	0aa60613          	add	a2,a2,170 # 8001db38 <__func__.1+0x1340>
    80005a96:	00017517          	auipc	a0,0x17
    80005a9a:	06250513          	add	a0,a0,98 # 8001caf8 <__func__.1+0x300>
    80005a9e:	4c4150ef          	jal	8001af62 <printf>
    80005aa2:	00144783          	lbu	a5,1(s0)
    80005aa6:	00017597          	auipc	a1,0x17
    80005aaa:	02a58593          	add	a1,a1,42 # 8001cad0 <__func__.1+0x2d8>
    80005aae:	c789                	beqz	a5,80005ab8 <virtual_instruction_11+0x8a>
    80005ab0:	6418                	ld	a4,8(s0)
    80005ab2:	47d9                	li	a5,22
    80005ab4:	06f70e63          	beq	a4,a5,80005b30 <virtual_instruction_11+0x102>
    80005ab8:	00017517          	auipc	a0,0x17
    80005abc:	05850513          	add	a0,a0,88 # 8001cb10 <__func__.1+0x318>
    80005ac0:	4a2150ef          	jal	8001af62 <printf>
    80005ac4:	00144783          	lbu	a5,1(s0)
    80005ac8:	c789                	beqz	a5,80005ad2 <virtual_instruction_11+0xa4>
    80005aca:	6418                	ld	a4,8(s0)
    80005acc:	47d9                	li	a5,22
    80005ace:	00f70c63          	beq	a4,a5,80005ae6 <virtual_instruction_11+0xb8>
    80005ad2:	00017517          	auipc	a0,0x17
    80005ad6:	04650513          	add	a0,a0,70 # 8001cb18 <__func__.1+0x320>
    80005ada:	488150ef          	jal	8001af62 <printf>
    80005ade:	02900513          	li	a0,41
    80005ae2:	352140ef          	jal	80019e34 <putchar>
    80005ae6:	4529                	li	a0,10
    80005ae8:	34c140ef          	jal	80019e34 <putchar>
    80005aec:	00144483          	lbu	s1,1(s0)





    TEST_END(); 
    80005af0:	00017597          	auipc	a1,0x17
    80005af4:	fe058593          	add	a1,a1,-32 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    80005af8:	c491                	beqz	s1,80005b04 <virtual_instruction_11+0xd6>
    80005afa:	6418                	ld	a4,8(s0)
    80005afc:	47d9                	li	a5,22
    80005afe:	02f70463          	beq	a4,a5,80005b26 <virtual_instruction_11+0xf8>
    80005b02:	4481                	li	s1,0
    TEST_END(); 
    80005b04:	00017517          	auipc	a0,0x17
    80005b08:	07450513          	add	a0,a0,116 # 8001cb78 <__func__.1+0x380>
    80005b0c:	456150ef          	jal	8001af62 <printf>
    80005b10:	4511                	li	a0,4
    80005b12:	fcdfa0ef          	jal	80000ade <goto_priv>
    80005b16:	811fb0ef          	jal	80001326 <reset_state>
    80005b1a:	60e2                	ld	ra,24(sp)
    80005b1c:	6442                	ld	s0,16(sp)
    80005b1e:	8526                	mv	a0,s1
    80005b20:	64a2                	ld	s1,8(sp)
    80005b22:	6105                	add	sp,sp,32
    80005b24:	8082                	ret
    TEST_END(); 
    80005b26:	00017597          	auipc	a1,0x17
    80005b2a:	f9a58593          	add	a1,a1,-102 # 8001cac0 <__func__.1+0x2c8>
    80005b2e:	bfd9                	j	80005b04 <virtual_instruction_11+0xd6>
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    80005b30:	00017597          	auipc	a1,0x17
    80005b34:	f9058593          	add	a1,a1,-112 # 8001cac0 <__func__.1+0x2c8>
    80005b38:	b741                	j	80005ab8 <virtual_instruction_11+0x8a>

0000000080005b3a <hfence_test>:
#include <rvh_test.h>
#include <page_tables.h> 

bool hfence_test() {
    80005b3a:	7179                	add	sp,sp,-48

    TEST_START();
    80005b3c:	00016597          	auipc	a1,0x16
    80005b40:	c6c58593          	add	a1,a1,-916 # 8001b7a8 <__func__.2>
    80005b44:	00017517          	auipc	a0,0x17
    80005b48:	f9c50513          	add	a0,a0,-100 # 8001cae0 <__func__.1+0x2e8>
bool hfence_test() {
    80005b4c:	f406                	sd	ra,40(sp)
    80005b4e:	ec26                	sd	s1,24(sp)
    80005b50:	f022                	sd	s0,32(sp)
    80005b52:	e84a                	sd	s2,16(sp)
    80005b54:	e44e                	sd	s3,8(sp)
    TEST_START();
    80005b56:	40c150ef          	jal	8001af62 <printf>
    80005b5a:	4529                	li	a0,10
    80005b5c:	2d8140ef          	jal	80019e34 <putchar>
    80005b60:	000887b7          	lui	a5,0x88
    80005b64:	2201b737          	lui	a4,0x2201b
    80005b68:	0001d697          	auipc	a3,0x1d
    80005b6c:	4f86b683          	ld	a3,1272(a3) # 80023060 <__func__.1+0x6868>
    80005b70:	070a                	sll	a4,a4,0x2
    80005b72:	06d78793          	add	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    80005b76:	e314                	sd	a3,0(a4)
    80005b78:	07b2                	sll	a5,a5,0xc
    80005b7a:	0001d717          	auipc	a4,0x1d
    80005b7e:	4ee73703          	ld	a4,1262(a4) # 80023068 <__func__.1+0x6870>
    80005b82:	e398                	sd	a4,0(a5)
    write64(phys_page_base(SWITCH1), 0x111111111);
    write64(phys_page_base(SWITCH2), 0x222222222);

    //////////////////////////////////////////////////////////////////////

    goto_priv(PRIV_HS);
    80005b84:	450d                	li	a0,3
    80005b86:	f59fa0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80005b8a:	4509                	li	a0,2
    asm volatile(
    80005b8c:	4001b4b7          	lui	s1,0x4001b
    80005b90:	e73fa0ef          	jal	80000a02 <set_prev_priv>
    80005b94:	048a                	sll	s1,s1,0x2
    hpt_init();
    80005b96:	c91fa0ef          	jal	80000826 <hpt_init>
    vspt_init();
    80005b9a:	b1bfa0ef          	jal	800006b4 <vspt_init>
    80005b9e:	6c04c9f3          	.4byte	0x6c04c9f3
    vaddr = vs_page_base(SWITCH1);

    val = hlvd(vaddr);
    cond = true;
    vspt_switch();
    80005ba2:	e19fa0ef          	jal	800009ba <vspt_switch>
    80005ba6:	6c04c473          	.4byte	0x6c04c473
    asm volatile(
    80005baa:	22000073          	.4byte	0x22000073
    asm volatile(
    80005bae:	6c04c7f3          	.4byte	0x6c04c7f3
    cond &= hlvd(vaddr) == val;
    80005bb2:	41340433          	sub	s0,s0,s3
    hfence_vvma();
    cond &= hlvd(vaddr) != val;
    80005bb6:	413787b3          	sub	a5,a5,s3
    80005bba:	00f037b3          	snez	a5,a5
    80005bbe:	00143413          	seqz	s0,s0
    80005bc2:	8c7d                	and	s0,s0,a5
    hpt_switch();
    80005bc4:	e11fa0ef          	jal	800009d4 <hpt_switch>
    80005bc8:	6c04c973          	.4byte	0x6c04c973
    asm volatile(
    80005bcc:	62000073          	.4byte	0x62000073
    asm volatile(
    80005bd0:	6c04c4f3          	.4byte	0x6c04c4f3
    cond &= hlvd(vaddr) != val;
    80005bd4:	41390933          	sub	s2,s2,s3
    80005bd8:	01203933          	snez	s2,s2
    hfence_gvma();
    cond &= hlvd(vaddr) == val;
    TEST_ASSERT("hfences correctly invalidate guest tlb entries", cond);
    80005bdc:	00018617          	auipc	a2,0x18
    80005be0:	fbc60613          	add	a2,a2,-68 # 8001db98 <__func__.1+0x13a0>
    80005be4:	08200593          	li	a1,130
    80005be8:	00017517          	auipc	a0,0x17
    80005bec:	f1050513          	add	a0,a0,-240 # 8001caf8 <__func__.1+0x300>
    80005bf0:	01247433          	and	s0,s0,s2
    80005bf4:	36e150ef          	jal	8001af62 <printf>
    80005bf8:	12040863          	beqz	s0,80005d28 <hfence_test+0x1ee>
    80005bfc:	13349663          	bne	s1,s3,80005d28 <hfence_test+0x1ee>
    80005c00:	00017597          	auipc	a1,0x17
    80005c04:	ec058593          	add	a1,a1,-320 # 8001cac0 <__func__.1+0x2c8>
    80005c08:	00017517          	auipc	a0,0x17
    80005c0c:	f0850513          	add	a0,a0,-248 # 8001cb10 <__func__.1+0x318>
    80005c10:	352150ef          	jal	8001af62 <printf>
    80005c14:	4529                	li	a0,10
    80005c16:	21e140ef          	jal	80019e34 <putchar>
    80005c1a:	4485                	li	s1,1

    //////////////////////////////////////////////////////////////////////

    goto_priv(PRIV_HS);
    80005c1c:	450d                	li	a0,3
    80005c1e:	4001b437          	lui	s0,0x4001b
    80005c22:	ebdfa0ef          	jal	80000ade <goto_priv>
    80005c26:	040a                	sll	s0,s0,0x2
    80005c28:	6c044973          	.4byte	0x6c044973
    val = hlvd(vaddr);
    cond = true;
    hpt_switch();
    80005c2c:	da9fa0ef          	jal	800009d4 <hpt_switch>
    asm volatile ("sfence.vma \n\t");
    80005c30:	12000073          	sfence.vma
    asm volatile(
    80005c34:	6c044473          	.4byte	0x6c044473
    sfence();
    cond &= hlvd(vaddr) == val;
    TEST_ASSERT("hs sfence doest not affect guest level tlb entries", cond);
    80005c38:	00018617          	auipc	a2,0x18
    80005c3c:	f9060613          	add	a2,a2,-112 # 8001dbc8 <__func__.1+0x13d0>
    80005c40:	08200593          	li	a1,130
    80005c44:	00017517          	auipc	a0,0x17
    80005c48:	eb450513          	add	a0,a0,-332 # 8001caf8 <__func__.1+0x300>
    80005c4c:	316150ef          	jal	8001af62 <printf>
    80005c50:	13240963          	beq	s0,s2,80005d82 <hfence_test+0x248>
    80005c54:	00017597          	auipc	a1,0x17
    80005c58:	e7c58593          	add	a1,a1,-388 # 8001cad0 <__func__.1+0x2d8>
    80005c5c:	00017517          	auipc	a0,0x17
    80005c60:	eb450513          	add	a0,a0,-332 # 8001cb10 <__func__.1+0x318>
    80005c64:	2fe150ef          	jal	8001af62 <printf>
    80005c68:	00017517          	auipc	a0,0x17
    80005c6c:	eb050513          	add	a0,a0,-336 # 8001cb18 <__func__.1+0x320>
    80005c70:	2f2150ef          	jal	8001af62 <printf>
    80005c74:	02900513          	li	a0,41
    80005c78:	1bc140ef          	jal	80019e34 <putchar>
    80005c7c:	4529                	li	a0,10
    80005c7e:	1b6140ef          	jal	80019e34 <putchar>
    80005c82:	4481                	li	s1,0
    return *((volatile uint64_t*) addr);
    80005c84:	4001b437          	lui	s0,0x4001b

    //////////////////////////////////////////////////////////////////////  

    goto_priv(PRIV_HS);
    80005c88:	450d                	li	a0,3
    80005c8a:	040a                	sll	s0,s0,0x2
    80005c8c:	e53fa0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80005c90:	951fa0ef          	jal	800005e0 <hspt_init>
    80005c94:	00043903          	ld	s2,0(s0) # 4001b000 <STACK_SIZE+0x3ff1b000>
    vaddr = hs_page_base(SWITCH1);
    val = read64(vaddr);
    cond = true;

    hspt_switch();
    80005c98:	d09fa0ef          	jal	800009a0 <hspt_switch>
    goto_priv(PRIV_VS);
    80005c9c:	4509                	li	a0,2
    80005c9e:	e41fa0ef          	jal	80000ade <goto_priv>
    asm volatile ("sfence.vma \n\t");
    80005ca2:	12000073          	sfence.vma
    sfence();
    goto_priv(PRIV_HS);
    80005ca6:	450d                	li	a0,3
    80005ca8:	e37fa0ef          	jal	80000ade <goto_priv>
    80005cac:	6000                	ld	s0,0(s0)
    cond &= read64(vaddr) == val;
    TEST_ASSERT("vs sfence doest not affect hypervisor level tlb entries", cond);
    80005cae:	00018617          	auipc	a2,0x18
    80005cb2:	f5260613          	add	a2,a2,-174 # 8001dc00 <__func__.1+0x1408>
    80005cb6:	08200593          	li	a1,130
    80005cba:	00017517          	auipc	a0,0x17
    80005cbe:	e3e50513          	add	a0,a0,-450 # 8001caf8 <__func__.1+0x300>
    80005cc2:	2a0150ef          	jal	8001af62 <printf>
    80005cc6:	09240a63          	beq	s0,s2,80005d5a <hfence_test+0x220>
    80005cca:	00017597          	auipc	a1,0x17
    80005cce:	e0658593          	add	a1,a1,-506 # 8001cad0 <__func__.1+0x2d8>
    80005cd2:	00017517          	auipc	a0,0x17
    80005cd6:	e3e50513          	add	a0,a0,-450 # 8001cb10 <__func__.1+0x318>
    80005cda:	288150ef          	jal	8001af62 <printf>
    80005cde:	00017517          	auipc	a0,0x17
    80005ce2:	e3a50513          	add	a0,a0,-454 # 8001cb18 <__func__.1+0x320>
    80005ce6:	27c150ef          	jal	8001af62 <printf>
    80005cea:	02900513          	li	a0,41
    80005cee:	146140ef          	jal	80019e34 <putchar>
    80005cf2:	4529                	li	a0,10
    80005cf4:	140140ef          	jal	80019e34 <putchar>
    80005cf8:	4401                	li	s0,0

    //////////////////////////////////////////////////////////////////////


    
    TEST_END();
    80005cfa:	00017597          	auipc	a1,0x17
    80005cfe:	dd658593          	add	a1,a1,-554 # 8001cad0 <__func__.1+0x2d8>
    80005d02:	00017517          	auipc	a0,0x17
    80005d06:	e7650513          	add	a0,a0,-394 # 8001cb78 <__func__.1+0x380>
    80005d0a:	258150ef          	jal	8001af62 <printf>
    80005d0e:	4511                	li	a0,4
    80005d10:	dcffa0ef          	jal	80000ade <goto_priv>
    80005d14:	e12fb0ef          	jal	80001326 <reset_state>
    80005d18:	70a2                	ld	ra,40(sp)
    80005d1a:	8522                	mv	a0,s0
    80005d1c:	7402                	ld	s0,32(sp)
    80005d1e:	64e2                	ld	s1,24(sp)
    80005d20:	6942                	ld	s2,16(sp)
    80005d22:	69a2                	ld	s3,8(sp)
    80005d24:	6145                	add	sp,sp,48
    80005d26:	8082                	ret
    TEST_ASSERT("hfences correctly invalidate guest tlb entries", cond);
    80005d28:	00017597          	auipc	a1,0x17
    80005d2c:	da858593          	add	a1,a1,-600 # 8001cad0 <__func__.1+0x2d8>
    80005d30:	00017517          	auipc	a0,0x17
    80005d34:	de050513          	add	a0,a0,-544 # 8001cb10 <__func__.1+0x318>
    80005d38:	22a150ef          	jal	8001af62 <printf>
    80005d3c:	00017517          	auipc	a0,0x17
    80005d40:	ddc50513          	add	a0,a0,-548 # 8001cb18 <__func__.1+0x320>
    80005d44:	21e150ef          	jal	8001af62 <printf>
    80005d48:	02900513          	li	a0,41
    80005d4c:	0e8140ef          	jal	80019e34 <putchar>
    80005d50:	4529                	li	a0,10
    80005d52:	0e2140ef          	jal	80019e34 <putchar>
    80005d56:	4481                	li	s1,0
    80005d58:	b5d1                	j	80005c1c <hfence_test+0xe2>
    TEST_ASSERT("vs sfence doest not affect hypervisor level tlb entries", cond);
    80005d5a:	00017597          	auipc	a1,0x17
    80005d5e:	d6658593          	add	a1,a1,-666 # 8001cac0 <__func__.1+0x2c8>
    80005d62:	00017517          	auipc	a0,0x17
    80005d66:	dae50513          	add	a0,a0,-594 # 8001cb10 <__func__.1+0x318>
    80005d6a:	1f8150ef          	jal	8001af62 <printf>
    80005d6e:	4529                	li	a0,10
    80005d70:	0c4140ef          	jal	80019e34 <putchar>
    80005d74:	d0d1                	beqz	s1,80005cf8 <hfence_test+0x1be>
    80005d76:	4405                	li	s0,1
    TEST_END();
    80005d78:	00017597          	auipc	a1,0x17
    80005d7c:	d4858593          	add	a1,a1,-696 # 8001cac0 <__func__.1+0x2c8>
    80005d80:	b749                	j	80005d02 <hfence_test+0x1c8>
    TEST_ASSERT("hs sfence doest not affect guest level tlb entries", cond);
    80005d82:	00017597          	auipc	a1,0x17
    80005d86:	d3e58593          	add	a1,a1,-706 # 8001cac0 <__func__.1+0x2c8>
    80005d8a:	00017517          	auipc	a0,0x17
    80005d8e:	d8650513          	add	a0,a0,-634 # 8001cb10 <__func__.1+0x318>
    80005d92:	1d0150ef          	jal	8001af62 <printf>
    80005d96:	4529                	li	a0,10
    80005d98:	09c140ef          	jal	80019e34 <putchar>
    80005d9c:	b5e5                	j	80005c84 <hfence_test+0x14a>

0000000080005d9e <wfi_exception_tests_1>:
#include <rvh_test.h>
#include <csrs.h> 
#include <stdio.h>

bool wfi_exception_tests_1() {
    80005d9e:	1101                	add	sp,sp,-32

    TEST_START();
    80005da0:	00016597          	auipc	a1,0x16
    80005da4:	a1858593          	add	a1,a1,-1512 # 8001b7b8 <__func__.21>
    80005da8:	00017517          	auipc	a0,0x17
    80005dac:	d3850513          	add	a0,a0,-712 # 8001cae0 <__func__.1+0x2e8>
bool wfi_exception_tests_1() {
    80005db0:	ec06                	sd	ra,24(sp)
    80005db2:	e822                	sd	s0,16(sp)
    80005db4:	e426                	sd	s1,8(sp)
    TEST_START();
    80005db6:	1ac150ef          	jal	8001af62 <printf>
    80005dba:	4529                	li	a0,10
    80005dbc:	078140ef          	jal	80019e34 <putchar>

    TEST_SETUP_EXCEPT();
    80005dc0:	0ff0000f          	fence
    80005dc4:	4785                	li	a5,1
    80005dc6:	00037417          	auipc	s0,0x37
    80005dca:	24a40413          	add	s0,s0,586 # 8003d010 <excpt>
    80005dce:	00f41023          	sh	a5,0(s0)
    80005dd2:	00037797          	auipc	a5,0x37
    80005dd6:	2607bb23          	sd	zero,630(a5) # 8003d048 <excpt+0x38>
    80005dda:	0ff0000f          	fence

    //mstatus.TW=0时，在u模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    80005dde:	4511                	li	a0,4
    80005de0:	cfffa0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80005de4:	002007b7          	lui	a5,0x200
    80005de8:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80005dec:	30205073          	csrw	medeleg,0
    CSRW(mideleg,0);     
    80005df0:	30305073          	csrw	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80005df4:	60305073          	csrw	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    80005df8:	60205073          	csrw	hedeleg,0
    CSRS(CSR_UIE, 0b0100);
    80005dfc:	00426073          	csrs	uie,4
    asm ("wfi" ::: "memory");
    80005e00:	10500073          	wfi
    wfi();

    goto_priv(PRIV_HU);
    80005e04:	4505                	li	a0,1
    80005e06:	cd9fa0ef          	jal	80000ade <goto_priv>

    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80005e0a:	08200593          	li	a1,130
    80005e0e:	00018617          	auipc	a2,0x18
    80005e12:	e2a60613          	add	a2,a2,-470 # 8001dc38 <__func__.1+0x1440>
    80005e16:	00017517          	auipc	a0,0x17
    80005e1a:	ce250513          	add	a0,a0,-798 # 8001caf8 <__func__.1+0x300>
    80005e1e:	144150ef          	jal	8001af62 <printf>
    80005e22:	00144783          	lbu	a5,1(s0)
    80005e26:	00017597          	auipc	a1,0x17
    80005e2a:	caa58593          	add	a1,a1,-854 # 8001cad0 <__func__.1+0x2d8>
    80005e2e:	c789                	beqz	a5,80005e38 <wfi_exception_tests_1+0x9a>
    80005e30:	6418                	ld	a4,8(s0)
    80005e32:	4789                	li	a5,2
    80005e34:	06f70e63          	beq	a4,a5,80005eb0 <wfi_exception_tests_1+0x112>
    80005e38:	00017517          	auipc	a0,0x17
    80005e3c:	cd850513          	add	a0,a0,-808 # 8001cb10 <__func__.1+0x318>
    80005e40:	122150ef          	jal	8001af62 <printf>
    80005e44:	00144783          	lbu	a5,1(s0)
    80005e48:	c789                	beqz	a5,80005e52 <wfi_exception_tests_1+0xb4>
    80005e4a:	6418                	ld	a4,8(s0)
    80005e4c:	4789                	li	a5,2
    80005e4e:	00f70c63          	beq	a4,a5,80005e66 <wfi_exception_tests_1+0xc8>
    80005e52:	00017517          	auipc	a0,0x17
    80005e56:	cc650513          	add	a0,a0,-826 # 8001cb18 <__func__.1+0x320>
    80005e5a:	108150ef          	jal	8001af62 <printf>
    80005e5e:	02900513          	li	a0,41
    80005e62:	7d3130ef          	jal	80019e34 <putchar>
    80005e66:	4529                	li	a0,10
    80005e68:	7cd130ef          	jal	80019e34 <putchar>
    80005e6c:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80005e70:	00017597          	auipc	a1,0x17
    80005e74:	c6058593          	add	a1,a1,-928 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80005e78:	c491                	beqz	s1,80005e84 <wfi_exception_tests_1+0xe6>
    80005e7a:	6418                	ld	a4,8(s0)
    80005e7c:	4789                	li	a5,2
    80005e7e:	02f70463          	beq	a4,a5,80005ea6 <wfi_exception_tests_1+0x108>
    80005e82:	4481                	li	s1,0
    TEST_END();
    80005e84:	00017517          	auipc	a0,0x17
    80005e88:	cf450513          	add	a0,a0,-780 # 8001cb78 <__func__.1+0x380>
    80005e8c:	0d6150ef          	jal	8001af62 <printf>
    80005e90:	4511                	li	a0,4
    80005e92:	c4dfa0ef          	jal	80000ade <goto_priv>
    80005e96:	c90fb0ef          	jal	80001326 <reset_state>
}
    80005e9a:	60e2                	ld	ra,24(sp)
    80005e9c:	6442                	ld	s0,16(sp)
    80005e9e:	8526                	mv	a0,s1
    80005ea0:	64a2                	ld	s1,8(sp)
    80005ea2:	6105                	add	sp,sp,32
    80005ea4:	8082                	ret
    TEST_END();
    80005ea6:	00017597          	auipc	a1,0x17
    80005eaa:	c1a58593          	add	a1,a1,-998 # 8001cac0 <__func__.1+0x2c8>
    80005eae:	bfd9                	j	80005e84 <wfi_exception_tests_1+0xe6>
    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80005eb0:	00017597          	auipc	a1,0x17
    80005eb4:	c1058593          	add	a1,a1,-1008 # 8001cac0 <__func__.1+0x2c8>
    80005eb8:	b741                	j	80005e38 <wfi_exception_tests_1+0x9a>

0000000080005eba <wfi_exception_tests_2>:

bool wfi_exception_tests_2() {
    80005eba:	1101                	add	sp,sp,-32

    TEST_START();
    80005ebc:	00016597          	auipc	a1,0x16
    80005ec0:	91458593          	add	a1,a1,-1772 # 8001b7d0 <__func__.20>
    80005ec4:	00017517          	auipc	a0,0x17
    80005ec8:	c1c50513          	add	a0,a0,-996 # 8001cae0 <__func__.1+0x2e8>
bool wfi_exception_tests_2() {
    80005ecc:	ec06                	sd	ra,24(sp)
    80005ece:	e822                	sd	s0,16(sp)
    80005ed0:	e426                	sd	s1,8(sp)
    TEST_START();
    80005ed2:	090150ef          	jal	8001af62 <printf>
    80005ed6:	4529                	li	a0,10
    80005ed8:	75d130ef          	jal	80019e34 <putchar>

    TEST_SETUP_EXCEPT();
    80005edc:	0ff0000f          	fence
    80005ee0:	00037417          	auipc	s0,0x37
    80005ee4:	13040413          	add	s0,s0,304 # 8003d010 <excpt>
    80005ee8:	4485                	li	s1,1
    80005eea:	00941023          	sh	s1,0(s0)
    80005eee:	00037797          	auipc	a5,0x37
    80005ef2:	1407bd23          	sd	zero,346(a5) # 8003d048 <excpt+0x38>
    80005ef6:	0ff0000f          	fence
    //mstatus.TW=0时，在VU模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    80005efa:	4511                	li	a0,4
    80005efc:	be3fa0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80005f00:	002007b7          	lui	a5,0x200
    80005f04:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80005f08:	30205073          	csrw	medeleg,0
    CSRW(mideleg,0);     
    80005f0c:	30305073          	csrw	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80005f10:	60305073          	csrw	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    80005f14:	60205073          	csrw	hedeleg,0
    TEST_SETUP_EXCEPT();
    80005f18:	0ff0000f          	fence
    80005f1c:	00037797          	auipc	a5,0x37
    80005f20:	1207b623          	sd	zero,300(a5) # 8003d048 <excpt+0x38>
    80005f24:	00941023          	sh	s1,0(s0)
    80005f28:	0ff0000f          	fence
    CSRS(CSR_UIE, 0b0100);
    80005f2c:	00426073          	csrs	uie,4
    80005f30:	10500073          	wfi
    wfi();

    goto_priv(PRIV_VU);
    80005f34:	4501                	li	a0,0
    80005f36:	ba9fa0ef          	jal	80000ade <goto_priv>
    
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80005f3a:	08200593          	li	a1,130
    80005f3e:	00018617          	auipc	a2,0x18
    80005f42:	d6a60613          	add	a2,a2,-662 # 8001dca8 <__func__.1+0x14b0>
    80005f46:	00017517          	auipc	a0,0x17
    80005f4a:	bb250513          	add	a0,a0,-1102 # 8001caf8 <__func__.1+0x300>
    80005f4e:	014150ef          	jal	8001af62 <printf>
    80005f52:	00144783          	lbu	a5,1(s0)
    80005f56:	00017597          	auipc	a1,0x17
    80005f5a:	b7a58593          	add	a1,a1,-1158 # 8001cad0 <__func__.1+0x2d8>
    80005f5e:	c789                	beqz	a5,80005f68 <wfi_exception_tests_2+0xae>
    80005f60:	6418                	ld	a4,8(s0)
    80005f62:	4789                	li	a5,2
    80005f64:	06f70e63          	beq	a4,a5,80005fe0 <wfi_exception_tests_2+0x126>
    80005f68:	00017517          	auipc	a0,0x17
    80005f6c:	ba850513          	add	a0,a0,-1112 # 8001cb10 <__func__.1+0x318>
    80005f70:	7f3140ef          	jal	8001af62 <printf>
    80005f74:	00144783          	lbu	a5,1(s0)
    80005f78:	c789                	beqz	a5,80005f82 <wfi_exception_tests_2+0xc8>
    80005f7a:	6418                	ld	a4,8(s0)
    80005f7c:	4789                	li	a5,2
    80005f7e:	00f70c63          	beq	a4,a5,80005f96 <wfi_exception_tests_2+0xdc>
    80005f82:	00017517          	auipc	a0,0x17
    80005f86:	b9650513          	add	a0,a0,-1130 # 8001cb18 <__func__.1+0x320>
    80005f8a:	7d9140ef          	jal	8001af62 <printf>
    80005f8e:	02900513          	li	a0,41
    80005f92:	6a3130ef          	jal	80019e34 <putchar>
    80005f96:	4529                	li	a0,10
    80005f98:	69d130ef          	jal	80019e34 <putchar>
    80005f9c:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    TEST_END();
    80005fa0:	00017597          	auipc	a1,0x17
    80005fa4:	b3058593          	add	a1,a1,-1232 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80005fa8:	c491                	beqz	s1,80005fb4 <wfi_exception_tests_2+0xfa>
    80005faa:	6418                	ld	a4,8(s0)
    80005fac:	4789                	li	a5,2
    80005fae:	02f70463          	beq	a4,a5,80005fd6 <wfi_exception_tests_2+0x11c>
    80005fb2:	4481                	li	s1,0
    TEST_END();
    80005fb4:	00017517          	auipc	a0,0x17
    80005fb8:	bc450513          	add	a0,a0,-1084 # 8001cb78 <__func__.1+0x380>
    80005fbc:	7a7140ef          	jal	8001af62 <printf>
    80005fc0:	4511                	li	a0,4
    80005fc2:	b1dfa0ef          	jal	80000ade <goto_priv>
    80005fc6:	b60fb0ef          	jal	80001326 <reset_state>
}
    80005fca:	60e2                	ld	ra,24(sp)
    80005fcc:	6442                	ld	s0,16(sp)
    80005fce:	8526                	mv	a0,s1
    80005fd0:	64a2                	ld	s1,8(sp)
    80005fd2:	6105                	add	sp,sp,32
    80005fd4:	8082                	ret
    TEST_END();
    80005fd6:	00017597          	auipc	a1,0x17
    80005fda:	aea58593          	add	a1,a1,-1302 # 8001cac0 <__func__.1+0x2c8>
    80005fde:	bfd9                	j	80005fb4 <wfi_exception_tests_2+0xfa>
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80005fe0:	00017597          	auipc	a1,0x17
    80005fe4:	ae058593          	add	a1,a1,-1312 # 8001cac0 <__func__.1+0x2c8>
    80005fe8:	b741                	j	80005f68 <wfi_exception_tests_2+0xae>

0000000080005fea <wfi_exception_tests_3>:

bool wfi_exception_tests_3() {
    80005fea:	1101                	add	sp,sp,-32

    TEST_START();
    80005fec:	00015597          	auipc	a1,0x15
    80005ff0:	7fc58593          	add	a1,a1,2044 # 8001b7e8 <__func__.19>
    80005ff4:	00017517          	auipc	a0,0x17
    80005ff8:	aec50513          	add	a0,a0,-1300 # 8001cae0 <__func__.1+0x2e8>
bool wfi_exception_tests_3() {
    80005ffc:	ec06                	sd	ra,24(sp)
    80005ffe:	e822                	sd	s0,16(sp)
    80006000:	e426                	sd	s1,8(sp)
    TEST_START();
    80006002:	761140ef          	jal	8001af62 <printf>
    80006006:	4529                	li	a0,10
    80006008:	62d130ef          	jal	80019e34 <putchar>

    TEST_SETUP_EXCEPT();
    8000600c:	0ff0000f          	fence
    80006010:	00037417          	auipc	s0,0x37
    80006014:	00040413          	mv	s0,s0
    80006018:	4485                	li	s1,1
    8000601a:	00941023          	sh	s1,0(s0) # 8003d010 <excpt>
    8000601e:	00037797          	auipc	a5,0x37
    80006022:	0207b523          	sd	zero,42(a5) # 8003d048 <excpt+0x38>
    80006026:	0ff0000f          	fence
    /* Keep an interrupt pending so we don't get stuck when wfi succeeds */
    //mstatus.TW=0时，在m模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    8000602a:	4511                	li	a0,4
    8000602c:	ab3fa0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006030:	002007b7          	lui	a5,0x200
    80006034:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006038:	30205073          	csrw	medeleg,0
    CSRW(mideleg,0);     
    8000603c:	30305073          	csrw	mideleg,0
    CSRS(mie, 0b0100);
    80006040:	30426073          	csrs	mie,4
    CSRS(mip, 0b0100);
    80006044:	34426073          	csrs	mip,4

    goto_priv(PRIV_M);
    80006048:	4511                	li	a0,4
    8000604a:	a95fa0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000604e:	0ff0000f          	fence
    80006052:	00037797          	auipc	a5,0x37
    80006056:	fe07bb23          	sd	zero,-10(a5) # 8003d048 <excpt+0x38>
    8000605a:	00941023          	sh	s1,0(s0)
    8000605e:	0ff0000f          	fence
    80006062:	10500073          	wfi
    wfi();
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006066:	08200593          	li	a1,130
    8000606a:	00018617          	auipc	a2,0x18
    8000606e:	cae60613          	add	a2,a2,-850 # 8001dd18 <__func__.1+0x1520>
    80006072:	00017517          	auipc	a0,0x17
    80006076:	a8650513          	add	a0,a0,-1402 # 8001caf8 <__func__.1+0x300>
    8000607a:	6e9140ef          	jal	8001af62 <printf>
    8000607e:	00144783          	lbu	a5,1(s0)
    80006082:	00017597          	auipc	a1,0x17
    80006086:	a3e58593          	add	a1,a1,-1474 # 8001cac0 <__func__.1+0x2c8>
    8000608a:	c789                	beqz	a5,80006094 <wfi_exception_tests_3+0xaa>
    8000608c:	00017597          	auipc	a1,0x17
    80006090:	a4458593          	add	a1,a1,-1468 # 8001cad0 <__func__.1+0x2d8>
    80006094:	00017517          	auipc	a0,0x17
    80006098:	a7c50513          	add	a0,a0,-1412 # 8001cb10 <__func__.1+0x318>
    8000609c:	6c7140ef          	jal	8001af62 <printf>
    800060a0:	00144783          	lbu	a5,1(s0)
    800060a4:	e3b9                	bnez	a5,800060ea <wfi_exception_tests_3+0x100>
    800060a6:	4529                	li	a0,10
    800060a8:	58d130ef          	jal	80019e34 <putchar>
    800060ac:	00144783          	lbu	a5,1(s0)
    800060b0:	e79d                	bnez	a5,800060de <wfi_exception_tests_3+0xf4>
    800060b2:	4405                	li	s0,1

    /** 
     * Delegate the pending interrupt to hs mode so it doesnt immediately 
     * trigger a trap to machine when we jump to hs.
     */
    TEST_END();
    800060b4:	00017597          	auipc	a1,0x17
    800060b8:	a0c58593          	add	a1,a1,-1524 # 8001cac0 <__func__.1+0x2c8>
    800060bc:	00017517          	auipc	a0,0x17
    800060c0:	abc50513          	add	a0,a0,-1348 # 8001cb78 <__func__.1+0x380>
    800060c4:	69f140ef          	jal	8001af62 <printf>
    800060c8:	4511                	li	a0,4
    800060ca:	a15fa0ef          	jal	80000ade <goto_priv>
    800060ce:	a58fb0ef          	jal	80001326 <reset_state>
}
    800060d2:	60e2                	ld	ra,24(sp)
    800060d4:	8522                	mv	a0,s0
    800060d6:	6442                	ld	s0,16(sp)
    800060d8:	64a2                	ld	s1,8(sp)
    800060da:	6105                	add	sp,sp,32
    800060dc:	8082                	ret
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    800060de:	4401                	li	s0,0
    TEST_END();
    800060e0:	00017597          	auipc	a1,0x17
    800060e4:	9f058593          	add	a1,a1,-1552 # 8001cad0 <__func__.1+0x2d8>
    800060e8:	bfd1                	j	800060bc <wfi_exception_tests_3+0xd2>
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    800060ea:	00017517          	auipc	a0,0x17
    800060ee:	a2e50513          	add	a0,a0,-1490 # 8001cb18 <__func__.1+0x320>
    800060f2:	671140ef          	jal	8001af62 <printf>
    800060f6:	02900513          	li	a0,41
    800060fa:	53b130ef          	jal	80019e34 <putchar>
    800060fe:	b765                	j	800060a6 <wfi_exception_tests_3+0xbc>

0000000080006100 <wfi_exception_tests_4>:

bool wfi_exception_tests_4() {
    80006100:	1101                	add	sp,sp,-32

    TEST_START();
    80006102:	00015597          	auipc	a1,0x15
    80006106:	6fe58593          	add	a1,a1,1790 # 8001b800 <__func__.18>
    8000610a:	00017517          	auipc	a0,0x17
    8000610e:	9d650513          	add	a0,a0,-1578 # 8001cae0 <__func__.1+0x2e8>
bool wfi_exception_tests_4() {
    80006112:	ec06                	sd	ra,24(sp)
    80006114:	e822                	sd	s0,16(sp)
    80006116:	e426                	sd	s1,8(sp)
    TEST_START();
    80006118:	64b140ef          	jal	8001af62 <printf>
    8000611c:	4529                	li	a0,10
    8000611e:	517130ef          	jal	80019e34 <putchar>
    
    TEST_SETUP_EXCEPT();
    80006122:	0ff0000f          	fence
    80006126:	00037417          	auipc	s0,0x37
    8000612a:	eea40413          	add	s0,s0,-278 # 8003d010 <excpt>
    8000612e:	4485                	li	s1,1
    80006130:	00941023          	sh	s1,0(s0)
    80006134:	00037797          	auipc	a5,0x37
    80006138:	f007ba23          	sd	zero,-236(a5) # 8003d048 <excpt+0x38>
    8000613c:	0ff0000f          	fence

    //mstatus.TW=0时，在HS模式下，中断未被禁用，且代理没打开，执行wfi指令
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006140:	002007b7          	lui	a5,0x200
    80006144:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006148:	30205073          	csrw	medeleg,0
    CSRW(mideleg,0);   
    8000614c:	30305073          	csrw	mideleg,0
    CSRS(CSR_HIE, 0b0100);
    80006150:	60426073          	csrs	hie,4
    CSRS(CSR_HIP, 0b0100);
    80006154:	64426073          	csrs	hip,4

    goto_priv(PRIV_HS);
    80006158:	450d                	li	a0,3
    8000615a:	985fa0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000615e:	0ff0000f          	fence
    80006162:	00037797          	auipc	a5,0x37
    80006166:	ee07b323          	sd	zero,-282(a5) # 8003d048 <excpt+0x38>
    8000616a:	00941023          	sh	s1,0(s0)
    8000616e:	0ff0000f          	fence
    80006172:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006176:	08200593          	li	a1,130
    8000617a:	00018617          	auipc	a2,0x18
    8000617e:	c0e60613          	add	a2,a2,-1010 # 8001dd88 <__func__.1+0x1590>
    80006182:	00017517          	auipc	a0,0x17
    80006186:	97650513          	add	a0,a0,-1674 # 8001caf8 <__func__.1+0x300>
    8000618a:	5d9140ef          	jal	8001af62 <printf>
    8000618e:	00144783          	lbu	a5,1(s0)
    80006192:	00017597          	auipc	a1,0x17
    80006196:	92e58593          	add	a1,a1,-1746 # 8001cac0 <__func__.1+0x2c8>
    8000619a:	c789                	beqz	a5,800061a4 <wfi_exception_tests_4+0xa4>
    8000619c:	00017597          	auipc	a1,0x17
    800061a0:	93458593          	add	a1,a1,-1740 # 8001cad0 <__func__.1+0x2d8>
    800061a4:	00017517          	auipc	a0,0x17
    800061a8:	96c50513          	add	a0,a0,-1684 # 8001cb10 <__func__.1+0x318>
    800061ac:	5b7140ef          	jal	8001af62 <printf>
    800061b0:	00144783          	lbu	a5,1(s0)
    800061b4:	e3b9                	bnez	a5,800061fa <wfi_exception_tests_4+0xfa>
    800061b6:	4529                	li	a0,10
    800061b8:	47d130ef          	jal	80019e34 <putchar>
    800061bc:	00144783          	lbu	a5,1(s0)
    800061c0:	e79d                	bnez	a5,800061ee <wfi_exception_tests_4+0xee>
    800061c2:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    800061c4:	00017597          	auipc	a1,0x17
    800061c8:	8fc58593          	add	a1,a1,-1796 # 8001cac0 <__func__.1+0x2c8>
    800061cc:	00017517          	auipc	a0,0x17
    800061d0:	9ac50513          	add	a0,a0,-1620 # 8001cb78 <__func__.1+0x380>
    800061d4:	58f140ef          	jal	8001af62 <printf>
    800061d8:	4511                	li	a0,4
    800061da:	905fa0ef          	jal	80000ade <goto_priv>
    800061de:	948fb0ef          	jal	80001326 <reset_state>
}
    800061e2:	60e2                	ld	ra,24(sp)
    800061e4:	8522                	mv	a0,s0
    800061e6:	6442                	ld	s0,16(sp)
    800061e8:	64a2                	ld	s1,8(sp)
    800061ea:	6105                	add	sp,sp,32
    800061ec:	8082                	ret
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    800061ee:	4401                	li	s0,0
    TEST_END();
    800061f0:	00017597          	auipc	a1,0x17
    800061f4:	8e058593          	add	a1,a1,-1824 # 8001cad0 <__func__.1+0x2d8>
    800061f8:	bfd1                	j	800061cc <wfi_exception_tests_4+0xcc>
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    800061fa:	00017517          	auipc	a0,0x17
    800061fe:	91e50513          	add	a0,a0,-1762 # 8001cb18 <__func__.1+0x320>
    80006202:	561140ef          	jal	8001af62 <printf>
    80006206:	02900513          	li	a0,41
    8000620a:	42b130ef          	jal	80019e34 <putchar>
    8000620e:	b765                	j	800061b6 <wfi_exception_tests_4+0xb6>

0000000080006210 <wfi_exception_tests_5>:

bool wfi_exception_tests_5() {
    80006210:	1101                	add	sp,sp,-32

    TEST_START();
    80006212:	00015597          	auipc	a1,0x15
    80006216:	60658593          	add	a1,a1,1542 # 8001b818 <__func__.17>
    8000621a:	00017517          	auipc	a0,0x17
    8000621e:	8c650513          	add	a0,a0,-1850 # 8001cae0 <__func__.1+0x2e8>
bool wfi_exception_tests_5() {
    80006222:	ec06                	sd	ra,24(sp)
    80006224:	e822                	sd	s0,16(sp)
    80006226:	e426                	sd	s1,8(sp)
    TEST_START();
    80006228:	53b140ef          	jal	8001af62 <printf>
    8000622c:	4529                	li	a0,10
    8000622e:	407130ef          	jal	80019e34 <putchar>
    
    TEST_SETUP_EXCEPT();
    80006232:	0ff0000f          	fence
    80006236:	00037417          	auipc	s0,0x37
    8000623a:	dda40413          	add	s0,s0,-550 # 8003d010 <excpt>
    8000623e:	4485                	li	s1,1
    80006240:	00941023          	sh	s1,0(s0)
    80006244:	00037797          	auipc	a5,0x37
    80006248:	e007b223          	sd	zero,-508(a5) # 8003d048 <excpt+0x38>
    8000624c:	0ff0000f          	fence

    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006250:	002007b7          	lui	a5,0x200
    80006254:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006258:	30205073          	csrw	medeleg,0
    CSRW(mideleg,0);   
    8000625c:	30305073          	csrw	mideleg,0
    //mstatus.TW=0时，在VS模式下，中断未被禁用，且代理没打开，执行wfi指令

    goto_priv(PRIV_VS); //防止进入hs异常后不能直接进入m模式
    80006260:	4509                	li	a0,2
    80006262:	87dfa0ef          	jal	80000ade <goto_priv>
    goto_priv(PRIV_M); 
    80006266:	4511                	li	a0,4
    80006268:	877fa0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_VSIE, 0b0100);
    8000626c:	20426073          	csrs	vsie,4
    CSRS(CSR_VSIP, 0b0100);
    80006270:	24426073          	csrs	vsip,4

    goto_priv(PRIV_VS);
    80006274:	4509                	li	a0,2
    80006276:	869fa0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000627a:	0ff0000f          	fence
    8000627e:	00037797          	auipc	a5,0x37
    80006282:	dc07b523          	sd	zero,-566(a5) # 8003d048 <excpt+0x38>
    80006286:	00941023          	sh	s1,0(s0)
    8000628a:	0ff0000f          	fence
    8000628e:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006292:	08200593          	li	a1,130
    80006296:	00018617          	auipc	a2,0x18
    8000629a:	b5a60613          	add	a2,a2,-1190 # 8001ddf0 <__func__.1+0x15f8>
    8000629e:	00017517          	auipc	a0,0x17
    800062a2:	85a50513          	add	a0,a0,-1958 # 8001caf8 <__func__.1+0x300>
    800062a6:	4bd140ef          	jal	8001af62 <printf>
    800062aa:	00144783          	lbu	a5,1(s0)
    800062ae:	00017597          	auipc	a1,0x17
    800062b2:	81258593          	add	a1,a1,-2030 # 8001cac0 <__func__.1+0x2c8>
    800062b6:	c789                	beqz	a5,800062c0 <wfi_exception_tests_5+0xb0>
    800062b8:	00017597          	auipc	a1,0x17
    800062bc:	81858593          	add	a1,a1,-2024 # 8001cad0 <__func__.1+0x2d8>
    800062c0:	00017517          	auipc	a0,0x17
    800062c4:	85050513          	add	a0,a0,-1968 # 8001cb10 <__func__.1+0x318>
    800062c8:	49b140ef          	jal	8001af62 <printf>
    800062cc:	00144783          	lbu	a5,1(s0)
    800062d0:	e3b9                	bnez	a5,80006316 <wfi_exception_tests_5+0x106>
    800062d2:	4529                	li	a0,10
    800062d4:	361130ef          	jal	80019e34 <putchar>
    800062d8:	00144783          	lbu	a5,1(s0)
    800062dc:	e79d                	bnez	a5,8000630a <wfi_exception_tests_5+0xfa>
    800062de:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    800062e0:	00016597          	auipc	a1,0x16
    800062e4:	7e058593          	add	a1,a1,2016 # 8001cac0 <__func__.1+0x2c8>
    800062e8:	00017517          	auipc	a0,0x17
    800062ec:	89050513          	add	a0,a0,-1904 # 8001cb78 <__func__.1+0x380>
    800062f0:	473140ef          	jal	8001af62 <printf>
    800062f4:	4511                	li	a0,4
    800062f6:	fe8fa0ef          	jal	80000ade <goto_priv>
    800062fa:	82cfb0ef          	jal	80001326 <reset_state>
}
    800062fe:	60e2                	ld	ra,24(sp)
    80006300:	8522                	mv	a0,s0
    80006302:	6442                	ld	s0,16(sp)
    80006304:	64a2                	ld	s1,8(sp)
    80006306:	6105                	add	sp,sp,32
    80006308:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    8000630a:	4401                	li	s0,0
    TEST_END();
    8000630c:	00016597          	auipc	a1,0x16
    80006310:	7c458593          	add	a1,a1,1988 # 8001cad0 <__func__.1+0x2d8>
    80006314:	bfd1                	j	800062e8 <wfi_exception_tests_5+0xd8>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006316:	00017517          	auipc	a0,0x17
    8000631a:	80250513          	add	a0,a0,-2046 # 8001cb18 <__func__.1+0x320>
    8000631e:	445140ef          	jal	8001af62 <printf>
    80006322:	02900513          	li	a0,41
    80006326:	30f130ef          	jal	80019e34 <putchar>
    8000632a:	b765                	j	800062d2 <wfi_exception_tests_5+0xc2>

000000008000632c <wfi_exception_tests_6>:

bool wfi_exception_tests_6() {
    8000632c:	1101                	add	sp,sp,-32

    TEST_START();
    8000632e:	00015597          	auipc	a1,0x15
    80006332:	50258593          	add	a1,a1,1282 # 8001b830 <__func__.16>
    80006336:	00016517          	auipc	a0,0x16
    8000633a:	7aa50513          	add	a0,a0,1962 # 8001cae0 <__func__.1+0x2e8>
bool wfi_exception_tests_6() {
    8000633e:	ec06                	sd	ra,24(sp)
    80006340:	e822                	sd	s0,16(sp)
    80006342:	e426                	sd	s1,8(sp)
    TEST_START();
    80006344:	41f140ef          	jal	8001af62 <printf>
    80006348:	4529                	li	a0,10
    8000634a:	2eb130ef          	jal	80019e34 <putchar>
    
    TEST_SETUP_EXCEPT();
    8000634e:	0ff0000f          	fence
    80006352:	00037417          	auipc	s0,0x37
    80006356:	cbe40413          	add	s0,s0,-834 # 8003d010 <excpt>
    8000635a:	4485                	li	s1,1
    8000635c:	00941023          	sh	s1,0(s0)
    80006360:	00037797          	auipc	a5,0x37
    80006364:	ce07b423          	sd	zero,-792(a5) # 8003d048 <excpt+0x38>
    80006368:	0ff0000f          	fence
    
    goto_priv(PRIV_M);
    8000636c:	4511                	li	a0,4
    8000636e:	f70fa0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006372:	002007b7          	lui	a5,0x200
    80006376:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    8000637a:	30205073          	csrw	medeleg,0
    CSRW(mideleg,0);   
    8000637e:	30305073          	csrw	mideleg,0
    CSRS(mie, 0b0100);
    80006382:	30426073          	csrs	mie,4
    CSRS(mip, 0b0100);
    80006386:	34426073          	csrs	mip,4
    CSRS(mideleg, 0b0100);
    8000638a:	30326073          	csrs	mideleg,4

    goto_priv(PRIV_M);
    8000638e:	4511                	li	a0,4
    80006390:	f4efa0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80006394:	0ff0000f          	fence
    80006398:	00037797          	auipc	a5,0x37
    8000639c:	ca07b823          	sd	zero,-848(a5) # 8003d048 <excpt+0x38>
    800063a0:	00941023          	sh	s1,0(s0)
    800063a4:	0ff0000f          	fence
    800063a8:	10500073          	wfi
    wfi();
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    800063ac:	08200593          	li	a1,130
    800063b0:	00018617          	auipc	a2,0x18
    800063b4:	aa860613          	add	a2,a2,-1368 # 8001de58 <__func__.1+0x1660>
    800063b8:	00016517          	auipc	a0,0x16
    800063bc:	74050513          	add	a0,a0,1856 # 8001caf8 <__func__.1+0x300>
    800063c0:	3a3140ef          	jal	8001af62 <printf>
    800063c4:	00144783          	lbu	a5,1(s0)
    800063c8:	00016597          	auipc	a1,0x16
    800063cc:	6f858593          	add	a1,a1,1784 # 8001cac0 <__func__.1+0x2c8>
    800063d0:	c789                	beqz	a5,800063da <wfi_exception_tests_6+0xae>
    800063d2:	00016597          	auipc	a1,0x16
    800063d6:	6fe58593          	add	a1,a1,1790 # 8001cad0 <__func__.1+0x2d8>
    800063da:	00016517          	auipc	a0,0x16
    800063de:	73650513          	add	a0,a0,1846 # 8001cb10 <__func__.1+0x318>
    800063e2:	381140ef          	jal	8001af62 <printf>
    800063e6:	00144783          	lbu	a5,1(s0)
    800063ea:	e3b9                	bnez	a5,80006430 <wfi_exception_tests_6+0x104>
    800063ec:	4529                	li	a0,10
    800063ee:	247130ef          	jal	80019e34 <putchar>
    800063f2:	00144783          	lbu	a5,1(s0)
    800063f6:	e79d                	bnez	a5,80006424 <wfi_exception_tests_6+0xf8>
    800063f8:	4405                	li	s0,1

    /** 
     * Delegate the pending interrupt to hs mode so it doesnt immediately 
     * trigger a trap to machine when we jump to hs.
     */
    TEST_END();
    800063fa:	00016597          	auipc	a1,0x16
    800063fe:	6c658593          	add	a1,a1,1734 # 8001cac0 <__func__.1+0x2c8>
    80006402:	00016517          	auipc	a0,0x16
    80006406:	77650513          	add	a0,a0,1910 # 8001cb78 <__func__.1+0x380>
    8000640a:	359140ef          	jal	8001af62 <printf>
    8000640e:	4511                	li	a0,4
    80006410:	ecefa0ef          	jal	80000ade <goto_priv>
    80006414:	f13fa0ef          	jal	80001326 <reset_state>
}
    80006418:	60e2                	ld	ra,24(sp)
    8000641a:	8522                	mv	a0,s0
    8000641c:	6442                	ld	s0,16(sp)
    8000641e:	64a2                	ld	s1,8(sp)
    80006420:	6105                	add	sp,sp,32
    80006422:	8082                	ret
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006424:	4401                	li	s0,0
    TEST_END();
    80006426:	00016597          	auipc	a1,0x16
    8000642a:	6aa58593          	add	a1,a1,1706 # 8001cad0 <__func__.1+0x2d8>
    8000642e:	bfd1                	j	80006402 <wfi_exception_tests_6+0xd6>
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006430:	00016517          	auipc	a0,0x16
    80006434:	6e850513          	add	a0,a0,1768 # 8001cb18 <__func__.1+0x320>
    80006438:	32b140ef          	jal	8001af62 <printf>
    8000643c:	02900513          	li	a0,41
    80006440:	1f5130ef          	jal	80019e34 <putchar>
    80006444:	b765                	j	800063ec <wfi_exception_tests_6+0xc0>

0000000080006446 <wfi_exception_tests_7>:



bool wfi_exception_tests_7() {
    80006446:	1101                	add	sp,sp,-32

    TEST_START();
    80006448:	00015597          	auipc	a1,0x15
    8000644c:	40058593          	add	a1,a1,1024 # 8001b848 <__func__.15>
    80006450:	00016517          	auipc	a0,0x16
    80006454:	69050513          	add	a0,a0,1680 # 8001cae0 <__func__.1+0x2e8>
bool wfi_exception_tests_7() {
    80006458:	ec06                	sd	ra,24(sp)
    8000645a:	e822                	sd	s0,16(sp)
    8000645c:	e426                	sd	s1,8(sp)
    TEST_START();
    8000645e:	305140ef          	jal	8001af62 <printf>
    80006462:	4529                	li	a0,10
    80006464:	1d1130ef          	jal	80019e34 <putchar>
    
    TEST_SETUP_EXCEPT();
    80006468:	0ff0000f          	fence
    8000646c:	00037417          	auipc	s0,0x37
    80006470:	ba440413          	add	s0,s0,-1116 # 8003d010 <excpt>
    80006474:	4485                	li	s1,1
    80006476:	00941023          	sh	s1,0(s0)
    8000647a:	00037797          	auipc	a5,0x37
    8000647e:	bc07b723          	sd	zero,-1074(a5) # 8003d048 <excpt+0x38>
    80006482:	0ff0000f          	fence

    //mstatus.TW=0时，在VS模式下，中断未被禁用，且代理打开，执行wfi指令
    goto_priv(PRIV_M); 
    80006486:	4511                	li	a0,4
    80006488:	e56fa0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    8000648c:	002007b7          	lui	a5,0x200
    80006490:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_VSIE, 0b0100);
    80006494:	20426073          	csrs	vsie,4
    CSRS(CSR_VSIP, 0b0100);
    80006498:	24426073          	csrs	vsip,4
    CSRS(mideleg, 0b0100);
    8000649c:	30326073          	csrs	mideleg,4

    goto_priv(PRIV_VS);
    800064a0:	4509                	li	a0,2
    800064a2:	e3cfa0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    800064a6:	0ff0000f          	fence
    800064aa:	00037797          	auipc	a5,0x37
    800064ae:	b807bf23          	sd	zero,-1122(a5) # 8003d048 <excpt+0x38>
    800064b2:	00941023          	sh	s1,0(s0)
    800064b6:	0ff0000f          	fence
    800064ba:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    800064be:	08200593          	li	a1,130
    800064c2:	00018617          	auipc	a2,0x18
    800064c6:	a0660613          	add	a2,a2,-1530 # 8001dec8 <__func__.1+0x16d0>
    800064ca:	00016517          	auipc	a0,0x16
    800064ce:	62e50513          	add	a0,a0,1582 # 8001caf8 <__func__.1+0x300>
    800064d2:	291140ef          	jal	8001af62 <printf>
    800064d6:	00144783          	lbu	a5,1(s0)
    800064da:	00016597          	auipc	a1,0x16
    800064de:	5e658593          	add	a1,a1,1510 # 8001cac0 <__func__.1+0x2c8>
    800064e2:	c789                	beqz	a5,800064ec <wfi_exception_tests_7+0xa6>
    800064e4:	00016597          	auipc	a1,0x16
    800064e8:	5ec58593          	add	a1,a1,1516 # 8001cad0 <__func__.1+0x2d8>
    800064ec:	00016517          	auipc	a0,0x16
    800064f0:	62450513          	add	a0,a0,1572 # 8001cb10 <__func__.1+0x318>
    800064f4:	26f140ef          	jal	8001af62 <printf>
    800064f8:	00144783          	lbu	a5,1(s0)
    800064fc:	e3b9                	bnez	a5,80006542 <wfi_exception_tests_7+0xfc>
    800064fe:	4529                	li	a0,10
    80006500:	135130ef          	jal	80019e34 <putchar>
    80006504:	00144783          	lbu	a5,1(s0)
    80006508:	e79d                	bnez	a5,80006536 <wfi_exception_tests_7+0xf0>
    8000650a:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    8000650c:	00016597          	auipc	a1,0x16
    80006510:	5b458593          	add	a1,a1,1460 # 8001cac0 <__func__.1+0x2c8>
    80006514:	00016517          	auipc	a0,0x16
    80006518:	66450513          	add	a0,a0,1636 # 8001cb78 <__func__.1+0x380>
    8000651c:	247140ef          	jal	8001af62 <printf>
    80006520:	4511                	li	a0,4
    80006522:	dbcfa0ef          	jal	80000ade <goto_priv>
    80006526:	e01fa0ef          	jal	80001326 <reset_state>
}
    8000652a:	60e2                	ld	ra,24(sp)
    8000652c:	8522                	mv	a0,s0
    8000652e:	6442                	ld	s0,16(sp)
    80006530:	64a2                	ld	s1,8(sp)
    80006532:	6105                	add	sp,sp,32
    80006534:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006536:	4401                	li	s0,0
    TEST_END();
    80006538:	00016597          	auipc	a1,0x16
    8000653c:	59858593          	add	a1,a1,1432 # 8001cad0 <__func__.1+0x2d8>
    80006540:	bfd1                	j	80006514 <wfi_exception_tests_7+0xce>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006542:	00016517          	auipc	a0,0x16
    80006546:	5d650513          	add	a0,a0,1494 # 8001cb18 <__func__.1+0x320>
    8000654a:	219140ef          	jal	8001af62 <printf>
    8000654e:	02900513          	li	a0,41
    80006552:	0e3130ef          	jal	80019e34 <putchar>
    80006556:	b765                	j	800064fe <wfi_exception_tests_7+0xb8>

0000000080006558 <wfi_exception_tests_8>:

bool wfi_exception_tests_8() {
    80006558:	1141                	add	sp,sp,-16

    TEST_START();
    8000655a:	00015597          	auipc	a1,0x15
    8000655e:	30658593          	add	a1,a1,774 # 8001b860 <__func__.14>
    80006562:	00016517          	auipc	a0,0x16
    80006566:	57e50513          	add	a0,a0,1406 # 8001cae0 <__func__.1+0x2e8>
bool wfi_exception_tests_8() {
    8000656a:	e406                	sd	ra,8(sp)
    8000656c:	e022                	sd	s0,0(sp)
    TEST_START();
    8000656e:	1f5140ef          	jal	8001af62 <printf>
    80006572:	4529                	li	a0,10
    80006574:	0c1130ef          	jal	80019e34 <putchar>

    //mstatus.TW=0时，在VS，中断等待拉高，但中断使能未拉高，中断未被代理到低特权模式
    goto_priv(PRIV_M); 
    80006578:	4511                	li	a0,4
    8000657a:	d64fa0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    8000657e:	002007b7          	lui	a5,0x200
    80006582:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_SIE, 0x0);
    80006586:	10406073          	csrs	sie,0
    CSRS(mideleg, 0x0);
    8000658a:	30306073          	csrs	mideleg,0

    goto_priv(PRIV_VS);
    8000658e:	4509                	li	a0,2
    80006590:	d4efa0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80006594:	0ff0000f          	fence
    80006598:	4785                	li	a5,1
    8000659a:	00037417          	auipc	s0,0x37
    8000659e:	a7640413          	add	s0,s0,-1418 # 8003d010 <excpt>
    800065a2:	00f41023          	sh	a5,0(s0)
    800065a6:	00037797          	auipc	a5,0x37
    800065aa:	aa07b123          	sd	zero,-1374(a5) # 8003d048 <excpt+0x38>
    800065ae:	0ff0000f          	fence
    800065b2:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800065b6:	08200593          	li	a1,130
    800065ba:	00018617          	auipc	a2,0x18
    800065be:	97660613          	add	a2,a2,-1674 # 8001df30 <__func__.1+0x1738>
    800065c2:	00016517          	auipc	a0,0x16
    800065c6:	53650513          	add	a0,a0,1334 # 8001caf8 <__func__.1+0x300>
    800065ca:	199140ef          	jal	8001af62 <printf>
    800065ce:	00144783          	lbu	a5,1(s0)
    800065d2:	00016597          	auipc	a1,0x16
    800065d6:	4ee58593          	add	a1,a1,1262 # 8001cac0 <__func__.1+0x2c8>
    800065da:	c789                	beqz	a5,800065e4 <wfi_exception_tests_8+0x8c>
    800065dc:	00016597          	auipc	a1,0x16
    800065e0:	4f458593          	add	a1,a1,1268 # 8001cad0 <__func__.1+0x2d8>
    800065e4:	00016517          	auipc	a0,0x16
    800065e8:	52c50513          	add	a0,a0,1324 # 8001cb10 <__func__.1+0x318>
    800065ec:	177140ef          	jal	8001af62 <printf>
    800065f0:	00144783          	lbu	a5,1(s0)
    800065f4:	e3b1                	bnez	a5,80006638 <wfi_exception_tests_8+0xe0>
    800065f6:	4529                	li	a0,10
    800065f8:	03d130ef          	jal	80019e34 <putchar>
    800065fc:	00144783          	lbu	a5,1(s0)
    80006600:	e795                	bnez	a5,8000662c <wfi_exception_tests_8+0xd4>
    80006602:	4405                	li	s0,1
        excpt.triggered == false
    );  

    TEST_END();
    80006604:	00016597          	auipc	a1,0x16
    80006608:	4bc58593          	add	a1,a1,1212 # 8001cac0 <__func__.1+0x2c8>
    8000660c:	00016517          	auipc	a0,0x16
    80006610:	56c50513          	add	a0,a0,1388 # 8001cb78 <__func__.1+0x380>
    80006614:	14f140ef          	jal	8001af62 <printf>
    80006618:	4511                	li	a0,4
    8000661a:	cc4fa0ef          	jal	80000ade <goto_priv>
    8000661e:	d09fa0ef          	jal	80001326 <reset_state>
}
    80006622:	60a2                	ld	ra,8(sp)
    80006624:	8522                	mv	a0,s0
    80006626:	6402                	ld	s0,0(sp)
    80006628:	0141                	add	sp,sp,16
    8000662a:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    8000662c:	4401                	li	s0,0
    TEST_END();
    8000662e:	00016597          	auipc	a1,0x16
    80006632:	4a258593          	add	a1,a1,1186 # 8001cad0 <__func__.1+0x2d8>
    80006636:	bfd9                	j	8000660c <wfi_exception_tests_8+0xb4>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80006638:	00016517          	auipc	a0,0x16
    8000663c:	4e050513          	add	a0,a0,1248 # 8001cb18 <__func__.1+0x320>
    80006640:	123140ef          	jal	8001af62 <printf>
    80006644:	02900513          	li	a0,41
    80006648:	7ec130ef          	jal	80019e34 <putchar>
    8000664c:	b76d                	j	800065f6 <wfi_exception_tests_8+0x9e>

000000008000664e <wfi_exception_tests_9>:

bool wfi_exception_tests_9() {
    8000664e:	1141                	add	sp,sp,-16

    TEST_START();
    80006650:	00015597          	auipc	a1,0x15
    80006654:	22858593          	add	a1,a1,552 # 8001b878 <__func__.13>
    80006658:	00016517          	auipc	a0,0x16
    8000665c:	48850513          	add	a0,a0,1160 # 8001cae0 <__func__.1+0x2e8>
bool wfi_exception_tests_9() {
    80006660:	e406                	sd	ra,8(sp)
    80006662:	e022                	sd	s0,0(sp)
    TEST_START();
    80006664:	0ff140ef          	jal	8001af62 <printf>
    80006668:	4529                	li	a0,10
    8000666a:	7ca130ef          	jal	80019e34 <putchar>
    //mstatus.TW=0时，在HS模式下，发生中断，中断使能未拉高，中断未被代理到低特权模式
    
    goto_priv(PRIV_M); 
    8000666e:	4511                	li	a0,4
    80006670:	c6efa0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006674:	002007b7          	lui	a5,0x200
    80006678:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_SIE, 0x0);
    8000667c:	10406073          	csrs	sie,0
    CSRS(mideleg, 0x0);
    80006680:	30306073          	csrs	mideleg,0

    goto_priv(PRIV_HS);
    80006684:	450d                	li	a0,3
    80006686:	c58fa0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000668a:	0ff0000f          	fence
    8000668e:	4785                	li	a5,1
    80006690:	00037417          	auipc	s0,0x37
    80006694:	98040413          	add	s0,s0,-1664 # 8003d010 <excpt>
    80006698:	00f41023          	sh	a5,0(s0)
    8000669c:	00037797          	auipc	a5,0x37
    800066a0:	9a07b623          	sd	zero,-1620(a5) # 8003d048 <excpt+0x38>
    800066a4:	0ff0000f          	fence
    800066a8:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800066ac:	08200593          	li	a1,130
    800066b0:	00018617          	auipc	a2,0x18
    800066b4:	88060613          	add	a2,a2,-1920 # 8001df30 <__func__.1+0x1738>
    800066b8:	00016517          	auipc	a0,0x16
    800066bc:	44050513          	add	a0,a0,1088 # 8001caf8 <__func__.1+0x300>
    800066c0:	0a3140ef          	jal	8001af62 <printf>
    800066c4:	00144783          	lbu	a5,1(s0)
    800066c8:	00016597          	auipc	a1,0x16
    800066cc:	3f858593          	add	a1,a1,1016 # 8001cac0 <__func__.1+0x2c8>
    800066d0:	c789                	beqz	a5,800066da <wfi_exception_tests_9+0x8c>
    800066d2:	00016597          	auipc	a1,0x16
    800066d6:	3fe58593          	add	a1,a1,1022 # 8001cad0 <__func__.1+0x2d8>
    800066da:	00016517          	auipc	a0,0x16
    800066de:	43650513          	add	a0,a0,1078 # 8001cb10 <__func__.1+0x318>
    800066e2:	081140ef          	jal	8001af62 <printf>
    800066e6:	00144783          	lbu	a5,1(s0)
    800066ea:	e3b1                	bnez	a5,8000672e <wfi_exception_tests_9+0xe0>
    800066ec:	4529                	li	a0,10
    800066ee:	746130ef          	jal	80019e34 <putchar>
    800066f2:	00144783          	lbu	a5,1(s0)
    800066f6:	e795                	bnez	a5,80006722 <wfi_exception_tests_9+0xd4>
    800066f8:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    800066fa:	00016597          	auipc	a1,0x16
    800066fe:	3c658593          	add	a1,a1,966 # 8001cac0 <__func__.1+0x2c8>
    80006702:	00016517          	auipc	a0,0x16
    80006706:	47650513          	add	a0,a0,1142 # 8001cb78 <__func__.1+0x380>
    8000670a:	059140ef          	jal	8001af62 <printf>
    8000670e:	4511                	li	a0,4
    80006710:	bcefa0ef          	jal	80000ade <goto_priv>
    80006714:	c13fa0ef          	jal	80001326 <reset_state>
}
    80006718:	60a2                	ld	ra,8(sp)
    8000671a:	8522                	mv	a0,s0
    8000671c:	6402                	ld	s0,0(sp)
    8000671e:	0141                	add	sp,sp,16
    80006720:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80006722:	4401                	li	s0,0
    TEST_END();
    80006724:	00016597          	auipc	a1,0x16
    80006728:	3ac58593          	add	a1,a1,940 # 8001cad0 <__func__.1+0x2d8>
    8000672c:	bfd9                	j	80006702 <wfi_exception_tests_9+0xb4>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    8000672e:	00016517          	auipc	a0,0x16
    80006732:	3ea50513          	add	a0,a0,1002 # 8001cb18 <__func__.1+0x320>
    80006736:	02d140ef          	jal	8001af62 <printf>
    8000673a:	02900513          	li	a0,41
    8000673e:	6f6130ef          	jal	80019e34 <putchar>
    80006742:	b76d                	j	800066ec <wfi_exception_tests_9+0x9e>

0000000080006744 <wfi_exception_tests_10>:

bool wfi_exception_tests_10() {
    80006744:	1141                	add	sp,sp,-16

    TEST_START();
    80006746:	00015597          	auipc	a1,0x15
    8000674a:	14a58593          	add	a1,a1,330 # 8001b890 <__func__.12>
    8000674e:	00016517          	auipc	a0,0x16
    80006752:	39250513          	add	a0,a0,914 # 8001cae0 <__func__.1+0x2e8>
bool wfi_exception_tests_10() {
    80006756:	e406                	sd	ra,8(sp)
    80006758:	e022                	sd	s0,0(sp)
    TEST_START();
    8000675a:	009140ef          	jal	8001af62 <printf>
    8000675e:	4529                	li	a0,10
    80006760:	6d4130ef          	jal	80019e34 <putchar>
    //mstatus.TW=0时，在M模式下，发生中断，中断使能未拉高，中断未被代理到低特权模式
    
    goto_priv(PRIV_M); 
    80006764:	4511                	li	a0,4
    80006766:	b78fa0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    8000676a:	002007b7          	lui	a5,0x200
    8000676e:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_MIE, 0x0);
    80006772:	30406073          	csrs	mie,0
    CSRS(mideleg, 0x0);
    80006776:	30306073          	csrs	mideleg,0

    goto_priv(PRIV_M);
    8000677a:	4511                	li	a0,4
    8000677c:	b62fa0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80006780:	0ff0000f          	fence
    80006784:	4785                	li	a5,1
    80006786:	00037417          	auipc	s0,0x37
    8000678a:	88a40413          	add	s0,s0,-1910 # 8003d010 <excpt>
    8000678e:	00f41023          	sh	a5,0(s0)
    80006792:	00037797          	auipc	a5,0x37
    80006796:	8a07bb23          	sd	zero,-1866(a5) # 8003d048 <excpt+0x38>
    8000679a:	0ff0000f          	fence
    8000679e:	10500073          	wfi
    wfi();

    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800067a2:	08200593          	li	a1,130
    800067a6:	00017617          	auipc	a2,0x17
    800067aa:	7d260613          	add	a2,a2,2002 # 8001df78 <__func__.1+0x1780>
    800067ae:	00016517          	auipc	a0,0x16
    800067b2:	34a50513          	add	a0,a0,842 # 8001caf8 <__func__.1+0x300>
    800067b6:	7ac140ef          	jal	8001af62 <printf>
    800067ba:	00144783          	lbu	a5,1(s0)
    800067be:	00016597          	auipc	a1,0x16
    800067c2:	30258593          	add	a1,a1,770 # 8001cac0 <__func__.1+0x2c8>
    800067c6:	c789                	beqz	a5,800067d0 <wfi_exception_tests_10+0x8c>
    800067c8:	00016597          	auipc	a1,0x16
    800067cc:	30858593          	add	a1,a1,776 # 8001cad0 <__func__.1+0x2d8>
    800067d0:	00016517          	auipc	a0,0x16
    800067d4:	34050513          	add	a0,a0,832 # 8001cb10 <__func__.1+0x318>
    800067d8:	78a140ef          	jal	8001af62 <printf>
    800067dc:	00144783          	lbu	a5,1(s0)
    800067e0:	e3b1                	bnez	a5,80006824 <wfi_exception_tests_10+0xe0>
    800067e2:	4529                	li	a0,10
    800067e4:	650130ef          	jal	80019e34 <putchar>
    800067e8:	00144783          	lbu	a5,1(s0)
    800067ec:	e795                	bnez	a5,80006818 <wfi_exception_tests_10+0xd4>
    800067ee:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    800067f0:	00016597          	auipc	a1,0x16
    800067f4:	2d058593          	add	a1,a1,720 # 8001cac0 <__func__.1+0x2c8>
    800067f8:	00016517          	auipc	a0,0x16
    800067fc:	38050513          	add	a0,a0,896 # 8001cb78 <__func__.1+0x380>
    80006800:	762140ef          	jal	8001af62 <printf>
    80006804:	4511                	li	a0,4
    80006806:	ad8fa0ef          	jal	80000ade <goto_priv>
    8000680a:	b1dfa0ef          	jal	80001326 <reset_state>
}
    8000680e:	60a2                	ld	ra,8(sp)
    80006810:	8522                	mv	a0,s0
    80006812:	6402                	ld	s0,0(sp)
    80006814:	0141                	add	sp,sp,16
    80006816:	8082                	ret
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80006818:	4401                	li	s0,0
    TEST_END();
    8000681a:	00016597          	auipc	a1,0x16
    8000681e:	2b658593          	add	a1,a1,694 # 8001cad0 <__func__.1+0x2d8>
    80006822:	bfd9                	j	800067f8 <wfi_exception_tests_10+0xb4>
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80006824:	00016517          	auipc	a0,0x16
    80006828:	2f450513          	add	a0,a0,756 # 8001cb18 <__func__.1+0x320>
    8000682c:	736140ef          	jal	8001af62 <printf>
    80006830:	02900513          	li	a0,41
    80006834:	600130ef          	jal	80019e34 <putchar>
    80006838:	b76d                	j	800067e2 <wfi_exception_tests_10+0x9e>

000000008000683a <wfi_exception_tests_11>:

bool wfi_exception_tests_11() {
    8000683a:	1141                	add	sp,sp,-16

    TEST_START();
    8000683c:	00015597          	auipc	a1,0x15
    80006840:	06c58593          	add	a1,a1,108 # 8001b8a8 <__func__.11>
    80006844:	00016517          	auipc	a0,0x16
    80006848:	29c50513          	add	a0,a0,668 # 8001cae0 <__func__.1+0x2e8>
bool wfi_exception_tests_11() {
    8000684c:	e406                	sd	ra,8(sp)
    8000684e:	e022                	sd	s0,0(sp)
    TEST_START();
    80006850:	712140ef          	jal	8001af62 <printf>
    80006854:	4529                	li	a0,10
    80006856:	5de130ef          	jal	80019e34 <putchar>

    //mstatus.TW=0时，在VS，中断等待拉高，但中断使能未拉高，中断被代理到低特权模式
    goto_priv(PRIV_M); 
    8000685a:	4511                	li	a0,4
    8000685c:	a82fa0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006860:	002007b7          	lui	a5,0x200
    80006864:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_SIE, 0x0);
    80006868:	10405073          	csrw	sie,0

    CSRW(mideleg, (uint64_t)-1);
    8000686c:	57fd                	li	a5,-1
    8000686e:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_VS);
    80006872:	4509                	li	a0,2
    80006874:	a6afa0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80006878:	0ff0000f          	fence
    8000687c:	4785                	li	a5,1
    8000687e:	00036417          	auipc	s0,0x36
    80006882:	79240413          	add	s0,s0,1938 # 8003d010 <excpt>
    80006886:	00f41023          	sh	a5,0(s0)
    8000688a:	00036797          	auipc	a5,0x36
    8000688e:	7a07bf23          	sd	zero,1982(a5) # 8003d048 <excpt+0x38>
    80006892:	0ff0000f          	fence
    80006896:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    8000689a:	08200593          	li	a1,130
    8000689e:	00017617          	auipc	a2,0x17
    800068a2:	72260613          	add	a2,a2,1826 # 8001dfc0 <__func__.1+0x17c8>
    800068a6:	00016517          	auipc	a0,0x16
    800068aa:	25250513          	add	a0,a0,594 # 8001caf8 <__func__.1+0x300>
    800068ae:	6b4140ef          	jal	8001af62 <printf>
    800068b2:	00144783          	lbu	a5,1(s0)
    800068b6:	00016597          	auipc	a1,0x16
    800068ba:	20a58593          	add	a1,a1,522 # 8001cac0 <__func__.1+0x2c8>
    800068be:	c789                	beqz	a5,800068c8 <wfi_exception_tests_11+0x8e>
    800068c0:	00016597          	auipc	a1,0x16
    800068c4:	21058593          	add	a1,a1,528 # 8001cad0 <__func__.1+0x2d8>
    800068c8:	00016517          	auipc	a0,0x16
    800068cc:	24850513          	add	a0,a0,584 # 8001cb10 <__func__.1+0x318>
    800068d0:	692140ef          	jal	8001af62 <printf>
    800068d4:	00144783          	lbu	a5,1(s0)
    800068d8:	e3b1                	bnez	a5,8000691c <wfi_exception_tests_11+0xe2>
    800068da:	4529                	li	a0,10
    800068dc:	558130ef          	jal	80019e34 <putchar>
    800068e0:	00144783          	lbu	a5,1(s0)
    800068e4:	e795                	bnez	a5,80006910 <wfi_exception_tests_11+0xd6>
    800068e6:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    800068e8:	00016597          	auipc	a1,0x16
    800068ec:	1d858593          	add	a1,a1,472 # 8001cac0 <__func__.1+0x2c8>
    800068f0:	00016517          	auipc	a0,0x16
    800068f4:	28850513          	add	a0,a0,648 # 8001cb78 <__func__.1+0x380>
    800068f8:	66a140ef          	jal	8001af62 <printf>
    800068fc:	4511                	li	a0,4
    800068fe:	9e0fa0ef          	jal	80000ade <goto_priv>
    80006902:	a25fa0ef          	jal	80001326 <reset_state>
}
    80006906:	60a2                	ld	ra,8(sp)
    80006908:	8522                	mv	a0,s0
    8000690a:	6402                	ld	s0,0(sp)
    8000690c:	0141                	add	sp,sp,16
    8000690e:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80006910:	4401                	li	s0,0
    TEST_END();
    80006912:	00016597          	auipc	a1,0x16
    80006916:	1be58593          	add	a1,a1,446 # 8001cad0 <__func__.1+0x2d8>
    8000691a:	bfd9                	j	800068f0 <wfi_exception_tests_11+0xb6>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    8000691c:	00016517          	auipc	a0,0x16
    80006920:	1fc50513          	add	a0,a0,508 # 8001cb18 <__func__.1+0x320>
    80006924:	63e140ef          	jal	8001af62 <printf>
    80006928:	02900513          	li	a0,41
    8000692c:	508130ef          	jal	80019e34 <putchar>
    80006930:	b76d                	j	800068da <wfi_exception_tests_11+0xa0>

0000000080006932 <wfi_exception_tests_12>:

bool wfi_exception_tests_12() {
    80006932:	1141                	add	sp,sp,-16

    TEST_START();
    80006934:	00015597          	auipc	a1,0x15
    80006938:	f8c58593          	add	a1,a1,-116 # 8001b8c0 <__func__.10>
    8000693c:	00016517          	auipc	a0,0x16
    80006940:	1a450513          	add	a0,a0,420 # 8001cae0 <__func__.1+0x2e8>
bool wfi_exception_tests_12() {
    80006944:	e406                	sd	ra,8(sp)
    80006946:	e022                	sd	s0,0(sp)
    TEST_START();
    80006948:	61a140ef          	jal	8001af62 <printf>
    8000694c:	4529                	li	a0,10
    8000694e:	4e6130ef          	jal	80019e34 <putchar>
    //mstatus.TW=0时，在HS模式下，发生中断，中断使能未拉高，中断被代理到低特权模式
    
    goto_priv(PRIV_M); 
    80006952:	4511                	li	a0,4
    80006954:	98afa0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006958:	002007b7          	lui	a5,0x200
    8000695c:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_SIE, 0x0);
    80006960:	10405073          	csrw	sie,0
    CSRW(mideleg, (uint64_t)-1);
    80006964:	57fd                	li	a5,-1
    80006966:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_HS);
    8000696a:	450d                	li	a0,3
    8000696c:	972fa0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80006970:	0ff0000f          	fence
    80006974:	4785                	li	a5,1
    80006976:	00036417          	auipc	s0,0x36
    8000697a:	69a40413          	add	s0,s0,1690 # 8003d010 <excpt>
    8000697e:	00f41023          	sh	a5,0(s0)
    80006982:	00036797          	auipc	a5,0x36
    80006986:	6c07b323          	sd	zero,1734(a5) # 8003d048 <excpt+0x38>
    8000698a:	0ff0000f          	fence
    8000698e:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80006992:	08200593          	li	a1,130
    80006996:	00017617          	auipc	a2,0x17
    8000699a:	62a60613          	add	a2,a2,1578 # 8001dfc0 <__func__.1+0x17c8>
    8000699e:	00016517          	auipc	a0,0x16
    800069a2:	15a50513          	add	a0,a0,346 # 8001caf8 <__func__.1+0x300>
    800069a6:	5bc140ef          	jal	8001af62 <printf>
    800069aa:	00144783          	lbu	a5,1(s0)
    800069ae:	00016597          	auipc	a1,0x16
    800069b2:	11258593          	add	a1,a1,274 # 8001cac0 <__func__.1+0x2c8>
    800069b6:	c789                	beqz	a5,800069c0 <wfi_exception_tests_12+0x8e>
    800069b8:	00016597          	auipc	a1,0x16
    800069bc:	11858593          	add	a1,a1,280 # 8001cad0 <__func__.1+0x2d8>
    800069c0:	00016517          	auipc	a0,0x16
    800069c4:	15050513          	add	a0,a0,336 # 8001cb10 <__func__.1+0x318>
    800069c8:	59a140ef          	jal	8001af62 <printf>
    800069cc:	00144783          	lbu	a5,1(s0)
    800069d0:	e3b1                	bnez	a5,80006a14 <wfi_exception_tests_12+0xe2>
    800069d2:	4529                	li	a0,10
    800069d4:	460130ef          	jal	80019e34 <putchar>
    800069d8:	00144783          	lbu	a5,1(s0)
    800069dc:	e795                	bnez	a5,80006a08 <wfi_exception_tests_12+0xd6>
    800069de:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    800069e0:	00016597          	auipc	a1,0x16
    800069e4:	0e058593          	add	a1,a1,224 # 8001cac0 <__func__.1+0x2c8>
    800069e8:	00016517          	auipc	a0,0x16
    800069ec:	19050513          	add	a0,a0,400 # 8001cb78 <__func__.1+0x380>
    800069f0:	572140ef          	jal	8001af62 <printf>
    800069f4:	4511                	li	a0,4
    800069f6:	8e8fa0ef          	jal	80000ade <goto_priv>
    800069fa:	92dfa0ef          	jal	80001326 <reset_state>
}
    800069fe:	60a2                	ld	ra,8(sp)
    80006a00:	8522                	mv	a0,s0
    80006a02:	6402                	ld	s0,0(sp)
    80006a04:	0141                	add	sp,sp,16
    80006a06:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80006a08:	4401                	li	s0,0
    TEST_END();
    80006a0a:	00016597          	auipc	a1,0x16
    80006a0e:	0c658593          	add	a1,a1,198 # 8001cad0 <__func__.1+0x2d8>
    80006a12:	bfd9                	j	800069e8 <wfi_exception_tests_12+0xb6>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80006a14:	00016517          	auipc	a0,0x16
    80006a18:	10450513          	add	a0,a0,260 # 8001cb18 <__func__.1+0x320>
    80006a1c:	546140ef          	jal	8001af62 <printf>
    80006a20:	02900513          	li	a0,41
    80006a24:	410130ef          	jal	80019e34 <putchar>
    80006a28:	b76d                	j	800069d2 <wfi_exception_tests_12+0xa0>

0000000080006a2a <wfi_exception_tests_13>:

bool wfi_exception_tests_13() {
    80006a2a:	1141                	add	sp,sp,-16

    TEST_START();
    80006a2c:	00015597          	auipc	a1,0x15
    80006a30:	eac58593          	add	a1,a1,-340 # 8001b8d8 <__func__.9>
    80006a34:	00016517          	auipc	a0,0x16
    80006a38:	0ac50513          	add	a0,a0,172 # 8001cae0 <__func__.1+0x2e8>
bool wfi_exception_tests_13() {
    80006a3c:	e406                	sd	ra,8(sp)
    80006a3e:	e022                	sd	s0,0(sp)
    TEST_START();
    80006a40:	522140ef          	jal	8001af62 <printf>
    80006a44:	4529                	li	a0,10
    80006a46:	3ee130ef          	jal	80019e34 <putchar>
    //mstatus.TW=0时，在M模式下，发生中断，中断使能未拉高，中断被代理到低特权模式
    
    goto_priv(PRIV_M); 
    80006a4a:	4511                	li	a0,4
    80006a4c:	892fa0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006a50:	002007b7          	lui	a5,0x200
    80006a54:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_MIE, 0x0);
    80006a58:	30405073          	csrw	mie,0
    CSRW(mideleg, (uint64_t)-1);
    80006a5c:	57fd                	li	a5,-1
    80006a5e:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_M);
    80006a62:	4511                	li	a0,4
    80006a64:	87afa0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80006a68:	0ff0000f          	fence
    80006a6c:	4785                	li	a5,1
    80006a6e:	00036417          	auipc	s0,0x36
    80006a72:	5a240413          	add	s0,s0,1442 # 8003d010 <excpt>
    80006a76:	00f41023          	sh	a5,0(s0)
    80006a7a:	00036797          	auipc	a5,0x36
    80006a7e:	5c07b723          	sd	zero,1486(a5) # 8003d048 <excpt+0x38>
    80006a82:	0ff0000f          	fence
    80006a86:	10500073          	wfi
    wfi();

    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80006a8a:	08200593          	li	a1,130
    80006a8e:	00017617          	auipc	a2,0x17
    80006a92:	57a60613          	add	a2,a2,1402 # 8001e008 <__func__.1+0x1810>
    80006a96:	00016517          	auipc	a0,0x16
    80006a9a:	06250513          	add	a0,a0,98 # 8001caf8 <__func__.1+0x300>
    80006a9e:	4c4140ef          	jal	8001af62 <printf>
    80006aa2:	00144783          	lbu	a5,1(s0)
    80006aa6:	00016597          	auipc	a1,0x16
    80006aaa:	01a58593          	add	a1,a1,26 # 8001cac0 <__func__.1+0x2c8>
    80006aae:	c789                	beqz	a5,80006ab8 <wfi_exception_tests_13+0x8e>
    80006ab0:	00016597          	auipc	a1,0x16
    80006ab4:	02058593          	add	a1,a1,32 # 8001cad0 <__func__.1+0x2d8>
    80006ab8:	00016517          	auipc	a0,0x16
    80006abc:	05850513          	add	a0,a0,88 # 8001cb10 <__func__.1+0x318>
    80006ac0:	4a2140ef          	jal	8001af62 <printf>
    80006ac4:	00144783          	lbu	a5,1(s0)
    80006ac8:	e3b1                	bnez	a5,80006b0c <wfi_exception_tests_13+0xe2>
    80006aca:	4529                	li	a0,10
    80006acc:	368130ef          	jal	80019e34 <putchar>
    80006ad0:	00144783          	lbu	a5,1(s0)
    80006ad4:	e795                	bnez	a5,80006b00 <wfi_exception_tests_13+0xd6>
    80006ad6:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80006ad8:	00016597          	auipc	a1,0x16
    80006adc:	fe858593          	add	a1,a1,-24 # 8001cac0 <__func__.1+0x2c8>
    80006ae0:	00016517          	auipc	a0,0x16
    80006ae4:	09850513          	add	a0,a0,152 # 8001cb78 <__func__.1+0x380>
    80006ae8:	47a140ef          	jal	8001af62 <printf>
    80006aec:	4511                	li	a0,4
    80006aee:	ff1f90ef          	jal	80000ade <goto_priv>
    80006af2:	835fa0ef          	jal	80001326 <reset_state>
}
    80006af6:	60a2                	ld	ra,8(sp)
    80006af8:	8522                	mv	a0,s0
    80006afa:	6402                	ld	s0,0(sp)
    80006afc:	0141                	add	sp,sp,16
    80006afe:	8082                	ret
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80006b00:	4401                	li	s0,0
    TEST_END();
    80006b02:	00016597          	auipc	a1,0x16
    80006b06:	fce58593          	add	a1,a1,-50 # 8001cad0 <__func__.1+0x2d8>
    80006b0a:	bfd9                	j	80006ae0 <wfi_exception_tests_13+0xb6>
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80006b0c:	00016517          	auipc	a0,0x16
    80006b10:	00c50513          	add	a0,a0,12 # 8001cb18 <__func__.1+0x320>
    80006b14:	44e140ef          	jal	8001af62 <printf>
    80006b18:	02900513          	li	a0,41
    80006b1c:	318130ef          	jal	80019e34 <putchar>
    80006b20:	b76d                	j	80006aca <wfi_exception_tests_13+0xa0>

0000000080006b22 <wfi_exception_tests_14>:

bool wfi_exception_tests_14() {
    80006b22:	1141                	add	sp,sp,-16

    TEST_START();
    80006b24:	00015597          	auipc	a1,0x15
    80006b28:	dcc58593          	add	a1,a1,-564 # 8001b8f0 <__func__.8>
    80006b2c:	00016517          	auipc	a0,0x16
    80006b30:	fb450513          	add	a0,a0,-76 # 8001cae0 <__func__.1+0x2e8>
bool wfi_exception_tests_14() {
    80006b34:	e406                	sd	ra,8(sp)
    80006b36:	e022                	sd	s0,0(sp)
    TEST_START();
    80006b38:	42a140ef          	jal	8001af62 <printf>
    80006b3c:	4529                	li	a0,10
    80006b3e:	2f6130ef          	jal	80019e34 <putchar>
    goto_priv(PRIV_M);
    80006b42:	4511                	li	a0,4
    80006b44:	f9bf90ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006b48:	002007b7          	lui	a5,0x200
    80006b4c:	3007b073          	csrc	mstatus,a5
    CSRS(mideleg, 0b0100); 
    80006b50:	30326073          	csrs	mideleg,4
    CSRS(CSR_HIE, 0b0100);
    80006b54:	60426073          	csrs	hie,4

    goto_priv(PRIV_VS);
    80006b58:	4509                	li	a0,2
    80006b5a:	f85f90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80006b5e:	0ff0000f          	fence
    80006b62:	4785                	li	a5,1
    80006b64:	00036417          	auipc	s0,0x36
    80006b68:	4ac40413          	add	s0,s0,1196 # 8003d010 <excpt>
    80006b6c:	00f41023          	sh	a5,0(s0)
    80006b70:	00036797          	auipc	a5,0x36
    80006b74:	4c07bc23          	sd	zero,1240(a5) # 8003d048 <excpt+0x38>
    80006b78:	0ff0000f          	fence
    80006b7c:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006b80:	08200593          	li	a1,130
    80006b84:	00017617          	auipc	a2,0x17
    80006b88:	34460613          	add	a2,a2,836 # 8001dec8 <__func__.1+0x16d0>
    80006b8c:	00016517          	auipc	a0,0x16
    80006b90:	f6c50513          	add	a0,a0,-148 # 8001caf8 <__func__.1+0x300>
    80006b94:	3ce140ef          	jal	8001af62 <printf>
    80006b98:	00144783          	lbu	a5,1(s0)
    80006b9c:	00016597          	auipc	a1,0x16
    80006ba0:	f2458593          	add	a1,a1,-220 # 8001cac0 <__func__.1+0x2c8>
    80006ba4:	c789                	beqz	a5,80006bae <wfi_exception_tests_14+0x8c>
    80006ba6:	00016597          	auipc	a1,0x16
    80006baa:	f2a58593          	add	a1,a1,-214 # 8001cad0 <__func__.1+0x2d8>
    80006bae:	00016517          	auipc	a0,0x16
    80006bb2:	f6250513          	add	a0,a0,-158 # 8001cb10 <__func__.1+0x318>
    80006bb6:	3ac140ef          	jal	8001af62 <printf>
    80006bba:	00144783          	lbu	a5,1(s0)
    80006bbe:	e3b1                	bnez	a5,80006c02 <wfi_exception_tests_14+0xe0>
    80006bc0:	4529                	li	a0,10
    80006bc2:	272130ef          	jal	80019e34 <putchar>
    80006bc6:	00144783          	lbu	a5,1(s0)
    80006bca:	e795                	bnez	a5,80006bf6 <wfi_exception_tests_14+0xd4>
    80006bcc:	4405                	li	s0,1
        excpt.triggered == false
    ); 
    
    TEST_END();
    80006bce:	00016597          	auipc	a1,0x16
    80006bd2:	ef258593          	add	a1,a1,-270 # 8001cac0 <__func__.1+0x2c8>
    80006bd6:	00016517          	auipc	a0,0x16
    80006bda:	fa250513          	add	a0,a0,-94 # 8001cb78 <__func__.1+0x380>
    80006bde:	384140ef          	jal	8001af62 <printf>
    80006be2:	4511                	li	a0,4
    80006be4:	efbf90ef          	jal	80000ade <goto_priv>
    80006be8:	f3efa0ef          	jal	80001326 <reset_state>
}
    80006bec:	60a2                	ld	ra,8(sp)
    80006bee:	8522                	mv	a0,s0
    80006bf0:	6402                	ld	s0,0(sp)
    80006bf2:	0141                	add	sp,sp,16
    80006bf4:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006bf6:	4401                	li	s0,0
    TEST_END();
    80006bf8:	00016597          	auipc	a1,0x16
    80006bfc:	ed858593          	add	a1,a1,-296 # 8001cad0 <__func__.1+0x2d8>
    80006c00:	bfd9                	j	80006bd6 <wfi_exception_tests_14+0xb4>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006c02:	00016517          	auipc	a0,0x16
    80006c06:	f1650513          	add	a0,a0,-234 # 8001cb18 <__func__.1+0x320>
    80006c0a:	358140ef          	jal	8001af62 <printf>
    80006c0e:	02900513          	li	a0,41
    80006c12:	222130ef          	jal	80019e34 <putchar>
    80006c16:	b76d                	j	80006bc0 <wfi_exception_tests_14+0x9e>

0000000080006c18 <wfi_exception_tests_15>:



bool wfi_exception_tests_15() {
    80006c18:	1101                	add	sp,sp,-32

    TEST_START();
    80006c1a:	00015597          	auipc	a1,0x15
    80006c1e:	cee58593          	add	a1,a1,-786 # 8001b908 <__func__.7>
    80006c22:	00016517          	auipc	a0,0x16
    80006c26:	ebe50513          	add	a0,a0,-322 # 8001cae0 <__func__.1+0x2e8>
bool wfi_exception_tests_15() {
    80006c2a:	ec06                	sd	ra,24(sp)
    80006c2c:	e822                	sd	s0,16(sp)
    80006c2e:	e426                	sd	s1,8(sp)
    TEST_START();
    80006c30:	332140ef          	jal	8001af62 <printf>
    80006c34:	4529                	li	a0,10
    80006c36:	1fe130ef          	jal	80019e34 <putchar>
    goto_priv(PRIV_M);
    80006c3a:	4511                	li	a0,4
    80006c3c:	ea3f90ef          	jal	80000ade <goto_priv>
    CSRS(mstatus, MSTATUS_TW);
    80006c40:	002007b7          	lui	a5,0x200
    80006c44:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    80006c48:	450d                	li	a0,3
    80006c4a:	e95f90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80006c4e:	0ff0000f          	fence
    80006c52:	4785                	li	a5,1
    80006c54:	00036417          	auipc	s0,0x36
    80006c58:	3bc40413          	add	s0,s0,956 # 8003d010 <excpt>
    80006c5c:	00f41023          	sh	a5,0(s0)
    80006c60:	00036797          	auipc	a5,0x36
    80006c64:	3e07b423          	sd	zero,1000(a5) # 8003d048 <excpt+0x38>
    80006c68:	0ff0000f          	fence
    80006c6c:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    80006c70:	08200593          	li	a1,130
    80006c74:	00017617          	auipc	a2,0x17
    80006c78:	3dc60613          	add	a2,a2,988 # 8001e050 <__func__.1+0x1858>
    80006c7c:	00016517          	auipc	a0,0x16
    80006c80:	e7c50513          	add	a0,a0,-388 # 8001caf8 <__func__.1+0x300>
    80006c84:	2de140ef          	jal	8001af62 <printf>
    80006c88:	00144783          	lbu	a5,1(s0)
    80006c8c:	00016597          	auipc	a1,0x16
    80006c90:	e4458593          	add	a1,a1,-444 # 8001cad0 <__func__.1+0x2d8>
    80006c94:	c789                	beqz	a5,80006c9e <wfi_exception_tests_15+0x86>
    80006c96:	6418                	ld	a4,8(s0)
    80006c98:	4789                	li	a5,2
    80006c9a:	06f70e63          	beq	a4,a5,80006d16 <wfi_exception_tests_15+0xfe>
    80006c9e:	00016517          	auipc	a0,0x16
    80006ca2:	e7250513          	add	a0,a0,-398 # 8001cb10 <__func__.1+0x318>
    80006ca6:	2bc140ef          	jal	8001af62 <printf>
    80006caa:	00144783          	lbu	a5,1(s0)
    80006cae:	c789                	beqz	a5,80006cb8 <wfi_exception_tests_15+0xa0>
    80006cb0:	6418                	ld	a4,8(s0)
    80006cb2:	4789                	li	a5,2
    80006cb4:	00f70c63          	beq	a4,a5,80006ccc <wfi_exception_tests_15+0xb4>
    80006cb8:	00016517          	auipc	a0,0x16
    80006cbc:	e6050513          	add	a0,a0,-416 # 8001cb18 <__func__.1+0x320>
    80006cc0:	2a2140ef          	jal	8001af62 <printf>
    80006cc4:	02900513          	li	a0,41
    80006cc8:	16c130ef          	jal	80019e34 <putchar>
    80006ccc:	4529                	li	a0,10
    80006cce:	166130ef          	jal	80019e34 <putchar>
    80006cd2:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80006cd6:	00016597          	auipc	a1,0x16
    80006cda:	dfa58593          	add	a1,a1,-518 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    80006cde:	c491                	beqz	s1,80006cea <wfi_exception_tests_15+0xd2>
    80006ce0:	6418                	ld	a4,8(s0)
    80006ce2:	4789                	li	a5,2
    80006ce4:	02f70463          	beq	a4,a5,80006d0c <wfi_exception_tests_15+0xf4>
    80006ce8:	4481                	li	s1,0
    TEST_END();
    80006cea:	00016517          	auipc	a0,0x16
    80006cee:	e8e50513          	add	a0,a0,-370 # 8001cb78 <__func__.1+0x380>
    80006cf2:	270140ef          	jal	8001af62 <printf>
    80006cf6:	4511                	li	a0,4
    80006cf8:	de7f90ef          	jal	80000ade <goto_priv>
    80006cfc:	e2afa0ef          	jal	80001326 <reset_state>
}
    80006d00:	60e2                	ld	ra,24(sp)
    80006d02:	6442                	ld	s0,16(sp)
    80006d04:	8526                	mv	a0,s1
    80006d06:	64a2                	ld	s1,8(sp)
    80006d08:	6105                	add	sp,sp,32
    80006d0a:	8082                	ret
    TEST_END();
    80006d0c:	00016597          	auipc	a1,0x16
    80006d10:	db458593          	add	a1,a1,-588 # 8001cac0 <__func__.1+0x2c8>
    80006d14:	bfd9                	j	80006cea <wfi_exception_tests_15+0xd2>
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    80006d16:	00016597          	auipc	a1,0x16
    80006d1a:	daa58593          	add	a1,a1,-598 # 8001cac0 <__func__.1+0x2c8>
    80006d1e:	b741                	j	80006c9e <wfi_exception_tests_15+0x86>

0000000080006d20 <wfi_exception_tests_16>:
     * Delegate the pending interrupt to hs mode so it doesnt immediately 
     * trigger a trap to machine when we jump to vs.
     */


bool wfi_exception_tests_16() {
    80006d20:	1101                	add	sp,sp,-32

    TEST_START();
    80006d22:	00015597          	auipc	a1,0x15
    80006d26:	bfe58593          	add	a1,a1,-1026 # 8001b920 <__func__.6>
    80006d2a:	00016517          	auipc	a0,0x16
    80006d2e:	db650513          	add	a0,a0,-586 # 8001cae0 <__func__.1+0x2e8>
bool wfi_exception_tests_16() {
    80006d32:	ec06                	sd	ra,24(sp)
    80006d34:	e822                	sd	s0,16(sp)
    80006d36:	e426                	sd	s1,8(sp)
    TEST_START();
    80006d38:	22a140ef          	jal	8001af62 <printf>
    80006d3c:	4529                	li	a0,10
    80006d3e:	0f6130ef          	jal	80019e34 <putchar>
    CSRS(mstatus, MSTATUS_TW);
    80006d42:	002007b7          	lui	a5,0x200
    80006d46:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_HIDELEG, 0b0100);      
    80006d4a:	60326073          	csrs	hideleg,4
    CSRS(CSR_VSIE, 0b0010);           
    80006d4e:	20416073          	csrs	vsie,2
    
    goto_priv(PRIV_VS);
    80006d52:	4509                	li	a0,2
    80006d54:	d8bf90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80006d58:	0ff0000f          	fence
    80006d5c:	4785                	li	a5,1
    80006d5e:	00036417          	auipc	s0,0x36
    80006d62:	2b240413          	add	s0,s0,690 # 8003d010 <excpt>
    80006d66:	00f41023          	sh	a5,0(s0)
    80006d6a:	00036797          	auipc	a5,0x36
    80006d6e:	2c07bf23          	sd	zero,734(a5) # 8003d048 <excpt+0x38>
    80006d72:	0ff0000f          	fence
    80006d76:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    80006d7a:	08200593          	li	a1,130
    80006d7e:	00017617          	auipc	a2,0x17
    80006d82:	31a60613          	add	a2,a2,794 # 8001e098 <__func__.1+0x18a0>
    80006d86:	00016517          	auipc	a0,0x16
    80006d8a:	d7250513          	add	a0,a0,-654 # 8001caf8 <__func__.1+0x300>
    80006d8e:	1d4140ef          	jal	8001af62 <printf>
    80006d92:	00144783          	lbu	a5,1(s0)
    80006d96:	00016597          	auipc	a1,0x16
    80006d9a:	d3a58593          	add	a1,a1,-710 # 8001cad0 <__func__.1+0x2d8>
    80006d9e:	c789                	beqz	a5,80006da8 <wfi_exception_tests_16+0x88>
    80006da0:	6418                	ld	a4,8(s0)
    80006da2:	4789                	li	a5,2
    80006da4:	08f70b63          	beq	a4,a5,80006e3a <wfi_exception_tests_16+0x11a>
    80006da8:	00016517          	auipc	a0,0x16
    80006dac:	d6850513          	add	a0,a0,-664 # 8001cb10 <__func__.1+0x318>
    80006db0:	1b2140ef          	jal	8001af62 <printf>
    80006db4:	00144783          	lbu	a5,1(s0)
    80006db8:	c789                	beqz	a5,80006dc2 <wfi_exception_tests_16+0xa2>
    80006dba:	6418                	ld	a4,8(s0)
    80006dbc:	4789                	li	a5,2
    80006dbe:	00f70c63          	beq	a4,a5,80006dd6 <wfi_exception_tests_16+0xb6>
    80006dc2:	00016517          	auipc	a0,0x16
    80006dc6:	d5650513          	add	a0,a0,-682 # 8001cb18 <__func__.1+0x320>
    80006dca:	198140ef          	jal	8001af62 <printf>
    80006dce:	02900513          	li	a0,41
    80006dd2:	062130ef          	jal	80019e34 <putchar>
    80006dd6:	4529                	li	a0,10
    80006dd8:	05c130ef          	jal	80019e34 <putchar>
    80006ddc:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    goto_priv(PRIV_M);
    80006de0:	4511                	li	a0,4
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    80006de2:	c489                	beqz	s1,80006dec <wfi_exception_tests_16+0xcc>
    80006de4:	6418                	ld	a4,8(s0)
    80006de6:	4789                	li	a5,2
    80006de8:	02f70e63          	beq	a4,a5,80006e24 <wfi_exception_tests_16+0x104>
    goto_priv(PRIV_M);
    80006dec:	cf3f90ef          	jal	80000ade <goto_priv>
    CSRC(mstatus, MSTATUS_TW);
    80006df0:	002007b7          	lui	a5,0x200
    80006df4:	3007b073          	csrc	mstatus,a5
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    80006df8:	4481                	li	s1,0
    TEST_END();
    80006dfa:	00016597          	auipc	a1,0x16
    80006dfe:	cd658593          	add	a1,a1,-810 # 8001cad0 <__func__.1+0x2d8>
    80006e02:	00016517          	auipc	a0,0x16
    80006e06:	d7650513          	add	a0,a0,-650 # 8001cb78 <__func__.1+0x380>
    80006e0a:	158140ef          	jal	8001af62 <printf>
    80006e0e:	4511                	li	a0,4
    80006e10:	ccff90ef          	jal	80000ade <goto_priv>
    80006e14:	d12fa0ef          	jal	80001326 <reset_state>
}
    80006e18:	60e2                	ld	ra,24(sp)
    80006e1a:	6442                	ld	s0,16(sp)
    80006e1c:	8526                	mv	a0,s1
    80006e1e:	64a2                	ld	s1,8(sp)
    80006e20:	6105                	add	sp,sp,32
    80006e22:	8082                	ret
    goto_priv(PRIV_M);
    80006e24:	cbbf90ef          	jal	80000ade <goto_priv>
    CSRC(mstatus, MSTATUS_TW);
    80006e28:	002007b7          	lui	a5,0x200
    80006e2c:	3007b073          	csrc	mstatus,a5
    TEST_END();
    80006e30:	00016597          	auipc	a1,0x16
    80006e34:	c9058593          	add	a1,a1,-880 # 8001cac0 <__func__.1+0x2c8>
    80006e38:	b7e9                	j	80006e02 <wfi_exception_tests_16+0xe2>
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    80006e3a:	00016597          	auipc	a1,0x16
    80006e3e:	c8658593          	add	a1,a1,-890 # 8001cac0 <__func__.1+0x2c8>
    80006e42:	b79d                	j	80006da8 <wfi_exception_tests_16+0x88>

0000000080006e44 <wfi_exception_tests_17>:

bool wfi_exception_tests_17() {
    80006e44:	1141                	add	sp,sp,-16

    TEST_START();
    80006e46:	00015597          	auipc	a1,0x15
    80006e4a:	af258593          	add	a1,a1,-1294 # 8001b938 <__func__.5>
    80006e4e:	00016517          	auipc	a0,0x16
    80006e52:	c9250513          	add	a0,a0,-878 # 8001cae0 <__func__.1+0x2e8>
bool wfi_exception_tests_17() {
    80006e56:	e406                	sd	ra,8(sp)
    80006e58:	e022                	sd	s0,0(sp)
    TEST_START();
    80006e5a:	108140ef          	jal	8001af62 <printf>
    80006e5e:	4529                	li	a0,10
    80006e60:	7d5120ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    80006e64:	4511                	li	a0,4
    80006e66:	c79f90ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006e6a:	002007b7          	lui	a5,0x200
    80006e6e:	3007b073          	csrc	mstatus,a5
    CSRC(CSR_HSTATUS,HSTATUS_VTW);
    80006e72:	6007b073          	csrc	hstatus,a5

    goto_priv(PRIV_VS);
    80006e76:	4509                	li	a0,2
    80006e78:	c67f90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80006e7c:	0ff0000f          	fence
    80006e80:	4785                	li	a5,1
    80006e82:	00036417          	auipc	s0,0x36
    80006e86:	18e40413          	add	s0,s0,398 # 8003d010 <excpt>
    80006e8a:	00f41023          	sh	a5,0(s0)
    80006e8e:	00036797          	auipc	a5,0x36
    80006e92:	1a07bd23          	sd	zero,442(a5) # 8003d048 <excpt+0x38>
    80006e96:	0ff0000f          	fence
    80006e9a:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    80006e9e:	08200593          	li	a1,130
    80006ea2:	00017617          	auipc	a2,0x17
    80006ea6:	23e60613          	add	a2,a2,574 # 8001e0e0 <__func__.1+0x18e8>
    80006eaa:	00016517          	auipc	a0,0x16
    80006eae:	c4e50513          	add	a0,a0,-946 # 8001caf8 <__func__.1+0x300>
    80006eb2:	0b0140ef          	jal	8001af62 <printf>
    80006eb6:	00144783          	lbu	a5,1(s0)
    80006eba:	00016597          	auipc	a1,0x16
    80006ebe:	c0658593          	add	a1,a1,-1018 # 8001cac0 <__func__.1+0x2c8>
    80006ec2:	c789                	beqz	a5,80006ecc <wfi_exception_tests_17+0x88>
    80006ec4:	00016597          	auipc	a1,0x16
    80006ec8:	c0c58593          	add	a1,a1,-1012 # 8001cad0 <__func__.1+0x2d8>
    80006ecc:	00016517          	auipc	a0,0x16
    80006ed0:	c4450513          	add	a0,a0,-956 # 8001cb10 <__func__.1+0x318>
    80006ed4:	08e140ef          	jal	8001af62 <printf>
    80006ed8:	00144783          	lbu	a5,1(s0)
    80006edc:	e3b1                	bnez	a5,80006f20 <wfi_exception_tests_17+0xdc>
    80006ede:	4529                	li	a0,10
    80006ee0:	755120ef          	jal	80019e34 <putchar>
    80006ee4:	00144783          	lbu	a5,1(s0)
    80006ee8:	e795                	bnez	a5,80006f14 <wfi_exception_tests_17+0xd0>
    80006eea:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80006eec:	00016597          	auipc	a1,0x16
    80006ef0:	bd458593          	add	a1,a1,-1068 # 8001cac0 <__func__.1+0x2c8>
    80006ef4:	00016517          	auipc	a0,0x16
    80006ef8:	c8450513          	add	a0,a0,-892 # 8001cb78 <__func__.1+0x380>
    80006efc:	066140ef          	jal	8001af62 <printf>
    80006f00:	4511                	li	a0,4
    80006f02:	bddf90ef          	jal	80000ade <goto_priv>
    80006f06:	c20fa0ef          	jal	80001326 <reset_state>
}
    80006f0a:	60a2                	ld	ra,8(sp)
    80006f0c:	8522                	mv	a0,s0
    80006f0e:	6402                	ld	s0,0(sp)
    80006f10:	0141                	add	sp,sp,16
    80006f12:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    80006f14:	4401                	li	s0,0
    TEST_END();
    80006f16:	00016597          	auipc	a1,0x16
    80006f1a:	bba58593          	add	a1,a1,-1094 # 8001cad0 <__func__.1+0x2d8>
    80006f1e:	bfd9                	j	80006ef4 <wfi_exception_tests_17+0xb0>
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    80006f20:	00016517          	auipc	a0,0x16
    80006f24:	bf850513          	add	a0,a0,-1032 # 8001cb18 <__func__.1+0x320>
    80006f28:	03a140ef          	jal	8001af62 <printf>
    80006f2c:	02900513          	li	a0,41
    80006f30:	705120ef          	jal	80019e34 <putchar>
    80006f34:	b76d                	j	80006ede <wfi_exception_tests_17+0x9a>

0000000080006f36 <wfi_exception_tests_18>:


bool wfi_exception_tests_18() {
    80006f36:	1101                	add	sp,sp,-32

    TEST_START();
    80006f38:	00015597          	auipc	a1,0x15
    80006f3c:	a1858593          	add	a1,a1,-1512 # 8001b950 <__func__.4>
    80006f40:	00016517          	auipc	a0,0x16
    80006f44:	ba050513          	add	a0,a0,-1120 # 8001cae0 <__func__.1+0x2e8>
bool wfi_exception_tests_18() {
    80006f48:	ec06                	sd	ra,24(sp)
    80006f4a:	e822                	sd	s0,16(sp)
    80006f4c:	e426                	sd	s1,8(sp)
    TEST_START();
    80006f4e:	014140ef          	jal	8001af62 <printf>
    80006f52:	4529                	li	a0,10
    80006f54:	6e1120ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    80006f58:	4511                	li	a0,4
    80006f5a:	b85f90ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);  
    80006f5e:	002007b7          	lui	a5,0x200
    80006f62:	6007a073          	csrs	hstatus,a5

    goto_priv(PRIV_VS);
    80006f66:	4509                	li	a0,2
    80006f68:	b77f90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80006f6c:	0ff0000f          	fence
    80006f70:	4785                	li	a5,1
    80006f72:	00036417          	auipc	s0,0x36
    80006f76:	09e40413          	add	s0,s0,158 # 8003d010 <excpt>
    80006f7a:	00f41023          	sh	a5,0(s0)
    80006f7e:	00036797          	auipc	a5,0x36
    80006f82:	0c07b523          	sd	zero,202(a5) # 8003d048 <excpt+0x38>
    80006f86:	0ff0000f          	fence
    80006f8a:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    80006f8e:	08200593          	li	a1,130
    80006f92:	00017617          	auipc	a2,0x17
    80006f96:	19660613          	add	a2,a2,406 # 8001e128 <__func__.1+0x1930>
    80006f9a:	00016517          	auipc	a0,0x16
    80006f9e:	b5e50513          	add	a0,a0,-1186 # 8001caf8 <__func__.1+0x300>
    80006fa2:	7c1130ef          	jal	8001af62 <printf>
    80006fa6:	00144783          	lbu	a5,1(s0)
    80006faa:	00016597          	auipc	a1,0x16
    80006fae:	b2658593          	add	a1,a1,-1242 # 8001cad0 <__func__.1+0x2d8>
    80006fb2:	c789                	beqz	a5,80006fbc <wfi_exception_tests_18+0x86>
    80006fb4:	6418                	ld	a4,8(s0)
    80006fb6:	47d9                	li	a5,22
    80006fb8:	06f70e63          	beq	a4,a5,80007034 <wfi_exception_tests_18+0xfe>
    80006fbc:	00016517          	auipc	a0,0x16
    80006fc0:	b5450513          	add	a0,a0,-1196 # 8001cb10 <__func__.1+0x318>
    80006fc4:	79f130ef          	jal	8001af62 <printf>
    80006fc8:	00144783          	lbu	a5,1(s0)
    80006fcc:	c789                	beqz	a5,80006fd6 <wfi_exception_tests_18+0xa0>
    80006fce:	6418                	ld	a4,8(s0)
    80006fd0:	47d9                	li	a5,22
    80006fd2:	00f70c63          	beq	a4,a5,80006fea <wfi_exception_tests_18+0xb4>
    80006fd6:	00016517          	auipc	a0,0x16
    80006fda:	b4250513          	add	a0,a0,-1214 # 8001cb18 <__func__.1+0x320>
    80006fde:	785130ef          	jal	8001af62 <printf>
    80006fe2:	02900513          	li	a0,41
    80006fe6:	64f120ef          	jal	80019e34 <putchar>
    80006fea:	4529                	li	a0,10
    80006fec:	649120ef          	jal	80019e34 <putchar>
    80006ff0:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80006ff4:	00016597          	auipc	a1,0x16
    80006ff8:	adc58593          	add	a1,a1,-1316 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    80006ffc:	c491                	beqz	s1,80007008 <wfi_exception_tests_18+0xd2>
    80006ffe:	6418                	ld	a4,8(s0)
    80007000:	47d9                	li	a5,22
    80007002:	02f70463          	beq	a4,a5,8000702a <wfi_exception_tests_18+0xf4>
    80007006:	4481                	li	s1,0
    TEST_END();
    80007008:	00016517          	auipc	a0,0x16
    8000700c:	b7050513          	add	a0,a0,-1168 # 8001cb78 <__func__.1+0x380>
    80007010:	753130ef          	jal	8001af62 <printf>
    80007014:	4511                	li	a0,4
    80007016:	ac9f90ef          	jal	80000ade <goto_priv>
    8000701a:	b0cfa0ef          	jal	80001326 <reset_state>
}
    8000701e:	60e2                	ld	ra,24(sp)
    80007020:	6442                	ld	s0,16(sp)
    80007022:	8526                	mv	a0,s1
    80007024:	64a2                	ld	s1,8(sp)
    80007026:	6105                	add	sp,sp,32
    80007028:	8082                	ret
    TEST_END();
    8000702a:	00016597          	auipc	a1,0x16
    8000702e:	a9658593          	add	a1,a1,-1386 # 8001cac0 <__func__.1+0x2c8>
    80007032:	bfd9                	j	80007008 <wfi_exception_tests_18+0xd2>
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    80007034:	00016597          	auipc	a1,0x16
    80007038:	a8c58593          	add	a1,a1,-1396 # 8001cac0 <__func__.1+0x2c8>
    8000703c:	b741                	j	80006fbc <wfi_exception_tests_18+0x86>

000000008000703e <wfi_exception_tests_19>:

bool wfi_exception_tests_19() {
    8000703e:	1101                	add	sp,sp,-32

    TEST_START();
    80007040:	00015597          	auipc	a1,0x15
    80007044:	92858593          	add	a1,a1,-1752 # 8001b968 <__func__.3>
    80007048:	00016517          	auipc	a0,0x16
    8000704c:	a9850513          	add	a0,a0,-1384 # 8001cae0 <__func__.1+0x2e8>
bool wfi_exception_tests_19() {
    80007050:	ec06                	sd	ra,24(sp)
    80007052:	e822                	sd	s0,16(sp)
    80007054:	e426                	sd	s1,8(sp)
    TEST_START();
    80007056:	70d130ef          	jal	8001af62 <printf>
    8000705a:	4529                	li	a0,10
    8000705c:	5d9120ef          	jal	80019e34 <putchar>
    //V=1&mstatus.TW=0 , hstatus.vtw=1时，在VS模式下执行WFI指令，并未在一个约定时间内产生中断
    goto_priv(PRIV_M);
    80007060:	4511                	li	a0,4
    80007062:	a7df90ef          	jal	80000ade <goto_priv>

    CSRW(CSR_SIE, 0x0);
    80007066:	10405073          	csrw	sie,0
    CSRS(CSR_HSTATUS,HSTATUS_VTW);
    8000706a:	002007b7          	lui	a5,0x200
    8000706e:	6007a073          	csrs	hstatus,a5
    CSRC(mstatus, MSTATUS_TW);
    80007072:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_VS);
    80007076:	4509                	li	a0,2
    80007078:	a67f90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000707c:	0ff0000f          	fence
    80007080:	4785                	li	a5,1
    80007082:	00036417          	auipc	s0,0x36
    80007086:	f8e40413          	add	s0,s0,-114 # 8003d010 <excpt>
    8000708a:	00f41023          	sh	a5,0(s0)
    8000708e:	00036797          	auipc	a5,0x36
    80007092:	fa07bd23          	sd	zero,-70(a5) # 8003d048 <excpt+0x38>
    80007096:	0ff0000f          	fence
    8000709a:	10500073          	wfi
    wfi();
        printf("%d\n",excpt.cause);
    8000709e:	640c                	ld	a1,8(s0)
    800070a0:	00016517          	auipc	a0,0x16
    800070a4:	40050513          	add	a0,a0,1024 # 8001d4a0 <__func__.1+0xca8>
    800070a8:	6bb130ef          	jal	8001af62 <printf>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    800070ac:	08200593          	li	a1,130
    800070b0:	00017617          	auipc	a2,0x17
    800070b4:	0c060613          	add	a2,a2,192 # 8001e170 <__func__.1+0x1978>
    800070b8:	00016517          	auipc	a0,0x16
    800070bc:	a4050513          	add	a0,a0,-1472 # 8001caf8 <__func__.1+0x300>
    800070c0:	6a3130ef          	jal	8001af62 <printf>
    800070c4:	00144783          	lbu	a5,1(s0)
    800070c8:	00016597          	auipc	a1,0x16
    800070cc:	a0858593          	add	a1,a1,-1528 # 8001cad0 <__func__.1+0x2d8>
    800070d0:	c789                	beqz	a5,800070da <wfi_exception_tests_19+0x9c>
    800070d2:	6418                	ld	a4,8(s0)
    800070d4:	47d9                	li	a5,22
    800070d6:	06f70e63          	beq	a4,a5,80007152 <wfi_exception_tests_19+0x114>
    800070da:	00016517          	auipc	a0,0x16
    800070de:	a3650513          	add	a0,a0,-1482 # 8001cb10 <__func__.1+0x318>
    800070e2:	681130ef          	jal	8001af62 <printf>
    800070e6:	00144783          	lbu	a5,1(s0)
    800070ea:	c789                	beqz	a5,800070f4 <wfi_exception_tests_19+0xb6>
    800070ec:	6418                	ld	a4,8(s0)
    800070ee:	47d9                	li	a5,22
    800070f0:	00f70c63          	beq	a4,a5,80007108 <wfi_exception_tests_19+0xca>
    800070f4:	00016517          	auipc	a0,0x16
    800070f8:	a2450513          	add	a0,a0,-1500 # 8001cb18 <__func__.1+0x320>
    800070fc:	667130ef          	jal	8001af62 <printf>
    80007100:	02900513          	li	a0,41
    80007104:	531120ef          	jal	80019e34 <putchar>
    80007108:	4529                	li	a0,10
    8000710a:	52b120ef          	jal	80019e34 <putchar>
    8000710e:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&  
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80007112:	00016597          	auipc	a1,0x16
    80007116:	9be58593          	add	a1,a1,-1602 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    8000711a:	c491                	beqz	s1,80007126 <wfi_exception_tests_19+0xe8>
    8000711c:	6418                	ld	a4,8(s0)
    8000711e:	47d9                	li	a5,22
    80007120:	02f70463          	beq	a4,a5,80007148 <wfi_exception_tests_19+0x10a>
    80007124:	4481                	li	s1,0
    TEST_END();
    80007126:	00016517          	auipc	a0,0x16
    8000712a:	a5250513          	add	a0,a0,-1454 # 8001cb78 <__func__.1+0x380>
    8000712e:	635130ef          	jal	8001af62 <printf>
    80007132:	4511                	li	a0,4
    80007134:	9abf90ef          	jal	80000ade <goto_priv>
    80007138:	9eefa0ef          	jal	80001326 <reset_state>
}
    8000713c:	60e2                	ld	ra,24(sp)
    8000713e:	6442                	ld	s0,16(sp)
    80007140:	8526                	mv	a0,s1
    80007142:	64a2                	ld	s1,8(sp)
    80007144:	6105                	add	sp,sp,32
    80007146:	8082                	ret
    TEST_END();
    80007148:	00016597          	auipc	a1,0x16
    8000714c:	97858593          	add	a1,a1,-1672 # 8001cac0 <__func__.1+0x2c8>
    80007150:	bfd9                	j	80007126 <wfi_exception_tests_19+0xe8>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    80007152:	00016597          	auipc	a1,0x16
    80007156:	96e58593          	add	a1,a1,-1682 # 8001cac0 <__func__.1+0x2c8>
    8000715a:	b741                	j	800070da <wfi_exception_tests_19+0x9c>

000000008000715c <wfi_exception_tests_20>:





bool wfi_exception_tests_20() {
    8000715c:	1101                	add	sp,sp,-32

    TEST_START();
    8000715e:	00015597          	auipc	a1,0x15
    80007162:	82258593          	add	a1,a1,-2014 # 8001b980 <__func__.2>
    80007166:	00016517          	auipc	a0,0x16
    8000716a:	97a50513          	add	a0,a0,-1670 # 8001cae0 <__func__.1+0x2e8>
bool wfi_exception_tests_20() {
    8000716e:	ec06                	sd	ra,24(sp)
    80007170:	e822                	sd	s0,16(sp)
    80007172:	e426                	sd	s1,8(sp)
    TEST_START();
    80007174:	5ef130ef          	jal	8001af62 <printf>
    80007178:	4529                	li	a0,10
    8000717a:	4bb120ef          	jal	80019e34 <putchar>
    
    TEST_SETUP_EXCEPT();
    8000717e:	0ff0000f          	fence
    80007182:	00036417          	auipc	s0,0x36
    80007186:	e8e40413          	add	s0,s0,-370 # 8003d010 <excpt>
    8000718a:	4485                	li	s1,1
    8000718c:	00941023          	sh	s1,0(s0)
    80007190:	00036797          	auipc	a5,0x36
    80007194:	ea07bc23          	sd	zero,-328(a5) # 8003d048 <excpt+0x38>
    80007198:	0ff0000f          	fence
    //mstatus.TW=0时，在HS模式下，中断未被禁用，且代理打开，执行wfi指令
    goto_priv(PRIV_M);
    8000719c:	4511                	li	a0,4
    8000719e:	941f90ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800071a2:	002007b7          	lui	a5,0x200
    800071a6:	3007b073          	csrc	mstatus,a5

    CSRS(CSR_HIE, 0b0100);
    800071aa:	60426073          	csrs	hie,4
    CSRS(CSR_HIP, 0b0100);
    800071ae:	64426073          	csrs	hip,4
    CSRS(mideleg, 0b0100);
    800071b2:	30326073          	csrs	mideleg,4

    goto_priv(PRIV_HS);
    800071b6:	450d                	li	a0,3
    800071b8:	927f90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    800071bc:	0ff0000f          	fence
    800071c0:	00036797          	auipc	a5,0x36
    800071c4:	e807b423          	sd	zero,-376(a5) # 8003d048 <excpt+0x38>
    800071c8:	00941023          	sh	s1,0(s0)
    800071cc:	0ff0000f          	fence
    800071d0:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    800071d4:	08200593          	li	a1,130
    800071d8:	00017617          	auipc	a2,0x17
    800071dc:	fe060613          	add	a2,a2,-32 # 8001e1b8 <__func__.1+0x19c0>
    800071e0:	00016517          	auipc	a0,0x16
    800071e4:	91850513          	add	a0,a0,-1768 # 8001caf8 <__func__.1+0x300>
    800071e8:	57b130ef          	jal	8001af62 <printf>
    800071ec:	00144783          	lbu	a5,1(s0)
    800071f0:	00016597          	auipc	a1,0x16
    800071f4:	8d058593          	add	a1,a1,-1840 # 8001cac0 <__func__.1+0x2c8>
    800071f8:	c789                	beqz	a5,80007202 <wfi_exception_tests_20+0xa6>
    800071fa:	00016597          	auipc	a1,0x16
    800071fe:	8d658593          	add	a1,a1,-1834 # 8001cad0 <__func__.1+0x2d8>
    80007202:	00016517          	auipc	a0,0x16
    80007206:	90e50513          	add	a0,a0,-1778 # 8001cb10 <__func__.1+0x318>
    8000720a:	559130ef          	jal	8001af62 <printf>
    8000720e:	00144783          	lbu	a5,1(s0)
    80007212:	e3b9                	bnez	a5,80007258 <wfi_exception_tests_20+0xfc>
    80007214:	4529                	li	a0,10
    80007216:	41f120ef          	jal	80019e34 <putchar>
    8000721a:	00144783          	lbu	a5,1(s0)
    8000721e:	e79d                	bnez	a5,8000724c <wfi_exception_tests_20+0xf0>
    80007220:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007222:	00016597          	auipc	a1,0x16
    80007226:	89e58593          	add	a1,a1,-1890 # 8001cac0 <__func__.1+0x2c8>
    8000722a:	00016517          	auipc	a0,0x16
    8000722e:	94e50513          	add	a0,a0,-1714 # 8001cb78 <__func__.1+0x380>
    80007232:	531130ef          	jal	8001af62 <printf>
    80007236:	4511                	li	a0,4
    80007238:	8a7f90ef          	jal	80000ade <goto_priv>
    8000723c:	8eafa0ef          	jal	80001326 <reset_state>
}
    80007240:	60e2                	ld	ra,24(sp)
    80007242:	8522                	mv	a0,s0
    80007244:	6442                	ld	s0,16(sp)
    80007246:	64a2                	ld	s1,8(sp)
    80007248:	6105                	add	sp,sp,32
    8000724a:	8082                	ret
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    8000724c:	4401                	li	s0,0
    TEST_END();
    8000724e:	00016597          	auipc	a1,0x16
    80007252:	88258593          	add	a1,a1,-1918 # 8001cad0 <__func__.1+0x2d8>
    80007256:	bfd1                	j	8000722a <wfi_exception_tests_20+0xce>
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007258:	00016517          	auipc	a0,0x16
    8000725c:	8c050513          	add	a0,a0,-1856 # 8001cb18 <__func__.1+0x320>
    80007260:	503130ef          	jal	8001af62 <printf>
    80007264:	02900513          	li	a0,41
    80007268:	3cd120ef          	jal	80019e34 <putchar>
    8000726c:	b765                	j	80007214 <wfi_exception_tests_20+0xb8>

000000008000726e <wfi_exception_tests_21>:



bool wfi_exception_tests_21() {
    8000726e:	1101                	add	sp,sp,-32

    TEST_START();
    80007270:	00014597          	auipc	a1,0x14
    80007274:	72858593          	add	a1,a1,1832 # 8001b998 <__func__.1>
    80007278:	00016517          	auipc	a0,0x16
    8000727c:	86850513          	add	a0,a0,-1944 # 8001cae0 <__func__.1+0x2e8>
bool wfi_exception_tests_21() {
    80007280:	ec06                	sd	ra,24(sp)
    80007282:	e822                	sd	s0,16(sp)
    80007284:	e426                	sd	s1,8(sp)
    TEST_START();
    80007286:	4dd130ef          	jal	8001af62 <printf>
    8000728a:	4529                	li	a0,10
    8000728c:	3a9120ef          	jal	80019e34 <putchar>

    //V=0&mstatus.TW=1时，且实现了S/HS模式，在U模式下执行WFI指令，并在一个约定时间内产生中断,wfi指令被唤醒，且中断会发生在下一条指令上，xepc=pc+4
    TEST_SETUP_EXCEPT();
    80007290:	0ff0000f          	fence
    80007294:	4785                	li	a5,1
    80007296:	00036417          	auipc	s0,0x36
    8000729a:	d7a40413          	add	s0,s0,-646 # 8003d010 <excpt>
    8000729e:	00f41023          	sh	a5,0(s0)
    800072a2:	00036797          	auipc	a5,0x36
    800072a6:	da07b323          	sd	zero,-602(a5) # 8003d048 <excpt+0x38>
    800072aa:	0ff0000f          	fence
    goto_priv(PRIV_M);
    800072ae:	4511                	li	a0,4
    800072b0:	82ff90ef          	jal	80000ade <goto_priv>
    CSRW(CSR_HIE, 0x2);
    800072b4:	60415073          	csrw	hie,2
    
    CSRS(mstatus, MSTATUS_TW);
    800072b8:	002007b7          	lui	a5,0x200
    800072bc:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HU);
    800072c0:	4505                	li	a0,1
    800072c2:	81df90ef          	jal	80000ade <goto_priv>
    800072c6:	10500073          	wfi
    wfi();
    // CSRW(CSR_HIP,0x2);

    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    800072ca:	08200593          	li	a1,130
    800072ce:	00017617          	auipc	a2,0x17
    800072d2:	f5260613          	add	a2,a2,-174 # 8001e220 <__func__.1+0x1a28>
    800072d6:	00016517          	auipc	a0,0x16
    800072da:	82250513          	add	a0,a0,-2014 # 8001caf8 <__func__.1+0x300>
    800072de:	485130ef          	jal	8001af62 <printf>
    800072e2:	00144783          	lbu	a5,1(s0)
    800072e6:	00015597          	auipc	a1,0x15
    800072ea:	7ea58593          	add	a1,a1,2026 # 8001cad0 <__func__.1+0x2d8>
    800072ee:	c789                	beqz	a5,800072f8 <wfi_exception_tests_21+0x8a>
    800072f0:	6418                	ld	a4,8(s0)
    800072f2:	4789                	li	a5,2
    800072f4:	06f70e63          	beq	a4,a5,80007370 <wfi_exception_tests_21+0x102>
    800072f8:	00016517          	auipc	a0,0x16
    800072fc:	81850513          	add	a0,a0,-2024 # 8001cb10 <__func__.1+0x318>
    80007300:	463130ef          	jal	8001af62 <printf>
    80007304:	00144783          	lbu	a5,1(s0)
    80007308:	c789                	beqz	a5,80007312 <wfi_exception_tests_21+0xa4>
    8000730a:	6418                	ld	a4,8(s0)
    8000730c:	4789                	li	a5,2
    8000730e:	00f70c63          	beq	a4,a5,80007326 <wfi_exception_tests_21+0xb8>
    80007312:	00016517          	auipc	a0,0x16
    80007316:	80650513          	add	a0,a0,-2042 # 8001cb18 <__func__.1+0x320>
    8000731a:	449130ef          	jal	8001af62 <printf>
    8000731e:	02900513          	li	a0,41
    80007322:	313120ef          	jal	80019e34 <putchar>
    80007326:	4529                	li	a0,10
    80007328:	30d120ef          	jal	80019e34 <putchar>
    8000732c:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    

    TEST_END();
    80007330:	00015597          	auipc	a1,0x15
    80007334:	7a058593          	add	a1,a1,1952 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007338:	c491                	beqz	s1,80007344 <wfi_exception_tests_21+0xd6>
    8000733a:	6418                	ld	a4,8(s0)
    8000733c:	4789                	li	a5,2
    8000733e:	02f70463          	beq	a4,a5,80007366 <wfi_exception_tests_21+0xf8>
    80007342:	4481                	li	s1,0
    TEST_END();
    80007344:	00016517          	auipc	a0,0x16
    80007348:	83450513          	add	a0,a0,-1996 # 8001cb78 <__func__.1+0x380>
    8000734c:	417130ef          	jal	8001af62 <printf>
    80007350:	4511                	li	a0,4
    80007352:	f8cf90ef          	jal	80000ade <goto_priv>
    80007356:	fd1f90ef          	jal	80001326 <reset_state>
}
    8000735a:	60e2                	ld	ra,24(sp)
    8000735c:	6442                	ld	s0,16(sp)
    8000735e:	8526                	mv	a0,s1
    80007360:	64a2                	ld	s1,8(sp)
    80007362:	6105                	add	sp,sp,32
    80007364:	8082                	ret
    TEST_END();
    80007366:	00015597          	auipc	a1,0x15
    8000736a:	75a58593          	add	a1,a1,1882 # 8001cac0 <__func__.1+0x2c8>
    8000736e:	bfd9                	j	80007344 <wfi_exception_tests_21+0xd6>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007370:	00015597          	auipc	a1,0x15
    80007374:	75058593          	add	a1,a1,1872 # 8001cac0 <__func__.1+0x2c8>
    80007378:	b741                	j	800072f8 <wfi_exception_tests_21+0x8a>

000000008000737a <wfi_exception_tests_22>:


bool wfi_exception_tests_22() {
    8000737a:	1101                	add	sp,sp,-32

    TEST_START();
    8000737c:	00014597          	auipc	a1,0x14
    80007380:	63458593          	add	a1,a1,1588 # 8001b9b0 <__func__.0>
    80007384:	00015517          	auipc	a0,0x15
    80007388:	75c50513          	add	a0,a0,1884 # 8001cae0 <__func__.1+0x2e8>
bool wfi_exception_tests_22() {
    8000738c:	ec06                	sd	ra,24(sp)
    8000738e:	e822                	sd	s0,16(sp)
    80007390:	e426                	sd	s1,8(sp)
    TEST_START();
    80007392:	3d1130ef          	jal	8001af62 <printf>
    80007396:	4529                	li	a0,10
    80007398:	29d120ef          	jal	80019e34 <putchar>

    //V=0&mstatus.TW=1时，如果实现了S/HS模式，在U模式下执行WFI指令，没有在一个约定时间内产生中断
    TEST_SETUP_EXCEPT();
    8000739c:	0ff0000f          	fence
    800073a0:	4785                	li	a5,1
    800073a2:	00036417          	auipc	s0,0x36
    800073a6:	c6e40413          	add	s0,s0,-914 # 8003d010 <excpt>
    800073aa:	00f41023          	sh	a5,0(s0)
    800073ae:	00036797          	auipc	a5,0x36
    800073b2:	c807bd23          	sd	zero,-870(a5) # 8003d048 <excpt+0x38>
    800073b6:	0ff0000f          	fence
    goto_priv(PRIV_M);
    800073ba:	4511                	li	a0,4
    800073bc:	f22f90ef          	jal	80000ade <goto_priv>
    CSRW(CSR_HIE, 0);
    800073c0:	60405073          	csrw	hie,0
    CSRW(CSR_HIP,0);
    800073c4:	64405073          	csrw	hip,0
    CSRS(mstatus, MSTATUS_TW);
    800073c8:	002007b7          	lui	a5,0x200
    800073cc:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HU);
    800073d0:	4505                	li	a0,1
    800073d2:	f0cf90ef          	jal	80000ade <goto_priv>
    800073d6:	10500073          	wfi
    wfi();
    
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    800073da:	08200593          	li	a1,130
    800073de:	00017617          	auipc	a2,0x17
    800073e2:	e4260613          	add	a2,a2,-446 # 8001e220 <__func__.1+0x1a28>
    800073e6:	00015517          	auipc	a0,0x15
    800073ea:	71250513          	add	a0,a0,1810 # 8001caf8 <__func__.1+0x300>
    800073ee:	375130ef          	jal	8001af62 <printf>
    800073f2:	00144783          	lbu	a5,1(s0)
    800073f6:	00015597          	auipc	a1,0x15
    800073fa:	6da58593          	add	a1,a1,1754 # 8001cad0 <__func__.1+0x2d8>
    800073fe:	c789                	beqz	a5,80007408 <wfi_exception_tests_22+0x8e>
    80007400:	6418                	ld	a4,8(s0)
    80007402:	4789                	li	a5,2
    80007404:	06f70e63          	beq	a4,a5,80007480 <wfi_exception_tests_22+0x106>
    80007408:	00015517          	auipc	a0,0x15
    8000740c:	70850513          	add	a0,a0,1800 # 8001cb10 <__func__.1+0x318>
    80007410:	353130ef          	jal	8001af62 <printf>
    80007414:	00144783          	lbu	a5,1(s0)
    80007418:	c789                	beqz	a5,80007422 <wfi_exception_tests_22+0xa8>
    8000741a:	6418                	ld	a4,8(s0)
    8000741c:	4789                	li	a5,2
    8000741e:	00f70c63          	beq	a4,a5,80007436 <wfi_exception_tests_22+0xbc>
    80007422:	00015517          	auipc	a0,0x15
    80007426:	6f650513          	add	a0,a0,1782 # 8001cb18 <__func__.1+0x320>
    8000742a:	339130ef          	jal	8001af62 <printf>
    8000742e:	02900513          	li	a0,41
    80007432:	203120ef          	jal	80019e34 <putchar>
    80007436:	4529                	li	a0,10
    80007438:	1fd120ef          	jal	80019e34 <putchar>
    8000743c:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    

    TEST_END();
    80007440:	00015597          	auipc	a1,0x15
    80007444:	69058593          	add	a1,a1,1680 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007448:	c491                	beqz	s1,80007454 <wfi_exception_tests_22+0xda>
    8000744a:	6418                	ld	a4,8(s0)
    8000744c:	4789                	li	a5,2
    8000744e:	02f70463          	beq	a4,a5,80007476 <wfi_exception_tests_22+0xfc>
    80007452:	4481                	li	s1,0
    TEST_END();
    80007454:	00015517          	auipc	a0,0x15
    80007458:	72450513          	add	a0,a0,1828 # 8001cb78 <__func__.1+0x380>
    8000745c:	307130ef          	jal	8001af62 <printf>
    80007460:	4511                	li	a0,4
    80007462:	e7cf90ef          	jal	80000ade <goto_priv>
    80007466:	ec1f90ef          	jal	80001326 <reset_state>
}
    8000746a:	60e2                	ld	ra,24(sp)
    8000746c:	6442                	ld	s0,16(sp)
    8000746e:	8526                	mv	a0,s1
    80007470:	64a2                	ld	s1,8(sp)
    80007472:	6105                	add	sp,sp,32
    80007474:	8082                	ret
    TEST_END();
    80007476:	00015597          	auipc	a1,0x15
    8000747a:	64a58593          	add	a1,a1,1610 # 8001cac0 <__func__.1+0x2c8>
    8000747e:	bfd9                	j	80007454 <wfi_exception_tests_22+0xda>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007480:	00015597          	auipc	a1,0x15
    80007484:	64058593          	add	a1,a1,1600 # 8001cac0 <__func__.1+0x2c8>
    80007488:	b741                	j	80007408 <wfi_exception_tests_22+0x8e>

000000008000748a <tinst_tests>:
#define TINST_CHECK_COMPRESSED(CHECK) (excpt.tinst == 0 ||\
    excpt.tinst == CHECK(expand_compressed_instruction(read_instruction(excpt.epc)) & ~0b10ULL))



bool tinst_tests(){
    8000748a:	7179                	add	sp,sp,-48
    
    TEST_START();
    8000748c:	00014597          	auipc	a1,0x14
    80007490:	53c58593          	add	a1,a1,1340 # 8001b9c8 <__func__.2>
    80007494:	00015517          	auipc	a0,0x15
    80007498:	64c50513          	add	a0,a0,1612 # 8001cae0 <__func__.1+0x2e8>
bool tinst_tests(){
    8000749c:	f406                	sd	ra,40(sp)
    8000749e:	f022                	sd	s0,32(sp)
    800074a0:	ec26                	sd	s1,24(sp)
    800074a2:	e84a                	sd	s2,16(sp)
    800074a4:	e44e                	sd	s3,8(sp)
    TEST_START();
    800074a6:	2bd130ef          	jal	8001af62 <printf>
    800074aa:	4529                	li	a0,10
    800074ac:	189120ef          	jal	80019e34 <putchar>

    hspt_init();        
    800074b0:	930f90ef          	jal	800005e0 <hspt_init>
    goto_priv(PRIV_HS);     
    800074b4:	450d                	li	a0,3
    800074b6:	e28f90ef          	jal	80000ade <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    800074ba:	0ff0000f          	fence
    800074be:	4785                	li	a5,1
    800074c0:	00036417          	auipc	s0,0x36
    800074c4:	b5040413          	add	s0,s0,-1200 # 8003d010 <excpt>
    800074c8:	00f41023          	sh	a5,0(s0)
    800074cc:	00036797          	auipc	a5,0x36
    800074d0:	b607be23          	sd	zero,-1156(a5) # 8003d048 <excpt+0x38>
    800074d4:	0ff0000f          	fence
            ".option pop\n\t" \
            : "=r"(value) : "r"(addr) : "memory"); \
        return value; \
    }

LOAD_INSTRUCTION(lb, "lb", uint8_t);
    800074d8:	400197b7          	lui	a5,0x40019
    800074dc:	078a                	sll	a5,a5,0x2
    800074de:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    // uint8_t dest8[4];
    // vle8_v(dest8, (uintptr_t)src8);


    value = lb(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lb which results in a lpf",         
    800074e2:	00017617          	auipc	a2,0x17
    800074e6:	d8660613          	add	a2,a2,-634 # 8001e268 <__func__.1+0x1a70>
    800074ea:	08200593          	li	a1,130
    800074ee:	00015517          	auipc	a0,0x15
    800074f2:	60a50513          	add	a0,a0,1546 # 8001caf8 <__func__.1+0x300>
    800074f6:	26d130ef          	jal	8001af62 <printf>
    800074fa:	00144783          	lbu	a5,1(s0)
    800074fe:	e399                	bnez	a5,80007504 <tinst_tests+0x7a>
    80007500:	6720106f          	j	80008b72 <tinst_tests+0x16e8>
    80007504:	6418                	ld	a4,8(s0)
    80007506:	47b5                	li	a5,13
    80007508:	00015597          	auipc	a1,0x15
    8000750c:	5c858593          	add	a1,a1,1480 # 8001cad0 <__func__.1+0x2d8>
    80007510:	00f71463          	bne	a4,a5,80007518 <tinst_tests+0x8e>
    80007514:	1210106f          	j	80008e34 <tinst_tests+0x19aa>
    80007518:	00015517          	auipc	a0,0x15
    8000751c:	5f850513          	add	a0,a0,1528 # 8001cb10 <__func__.1+0x318>
    80007520:	243130ef          	jal	8001af62 <printf>
    80007524:	00144783          	lbu	a5,1(s0)
    80007528:	c799                	beqz	a5,80007536 <tinst_tests+0xac>
    8000752a:	6418                	ld	a4,8(s0)
    8000752c:	47b5                	li	a5,13
    8000752e:	00f71463          	bne	a4,a5,80007536 <tinst_tests+0xac>
    80007532:	69e0106f          	j	80008bd0 <tinst_tests+0x1746>
    80007536:	00015517          	auipc	a0,0x15
    8000753a:	5e250513          	add	a0,a0,1506 # 8001cb18 <__func__.1+0x320>
    8000753e:	225130ef          	jal	8001af62 <printf>
    80007542:	02900513          	li	a0,41
    80007546:	0ef120ef          	jal	80019e34 <putchar>
    8000754a:	4529                	li	a0,10
    8000754c:	0e9120ef          	jal	80019e34 <putchar>
    80007550:	00144783          	lbu	a5,1(s0)
    80007554:	c399                	beqz	a5,8000755a <tinst_tests+0xd0>
    80007556:	6280106f          	j	80008b7e <tinst_tests+0x16f4>
    8000755a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000755c:	0ff0000f          	fence
    80007560:	4785                	li	a5,1
    80007562:	00f41023          	sh	a5,0(s0)
    80007566:	00036797          	auipc	a5,0x36
    8000756a:	ae07b123          	sd	zero,-1310(a5) # 8003d048 <excpt+0x38>
    8000756e:	0ff0000f          	fence
LOAD_INSTRUCTION(lbu, "lbu", uint8_t);
    80007572:	400197b7          	lui	a5,0x40019
    80007576:	078a                	sll	a5,a5,0x2
    80007578:	0007c783          	lbu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lbu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    8000757c:	00017617          	auipc	a2,0x17
    80007580:	d6c60613          	add	a2,a2,-660 # 8001e2e8 <__func__.1+0x1af0>
    80007584:	08200593          	li	a1,130
    80007588:	00015517          	auipc	a0,0x15
    8000758c:	57050513          	add	a0,a0,1392 # 8001caf8 <__func__.1+0x300>
    80007590:	1d3130ef          	jal	8001af62 <printf>
    80007594:	00144783          	lbu	a5,1(s0)
    80007598:	e399                	bnez	a5,8000759e <tinst_tests+0x114>
    8000759a:	6740106f          	j	80008c0e <tinst_tests+0x1784>
    8000759e:	6418                	ld	a4,8(s0)
    800075a0:	47b5                	li	a5,13
    800075a2:	00015597          	auipc	a1,0x15
    800075a6:	52e58593          	add	a1,a1,1326 # 8001cad0 <__func__.1+0x2d8>
    800075aa:	00f71463          	bne	a4,a5,800075b2 <tinst_tests+0x128>
    800075ae:	75d0106f          	j	8000950a <tinst_tests+0x2080>
    800075b2:	00015517          	auipc	a0,0x15
    800075b6:	55e50513          	add	a0,a0,1374 # 8001cb10 <__func__.1+0x318>
    800075ba:	1a9130ef          	jal	8001af62 <printf>
    800075be:	00144783          	lbu	a5,1(s0)
    800075c2:	c799                	beqz	a5,800075d0 <tinst_tests+0x146>
    800075c4:	6418                	ld	a4,8(s0)
    800075c6:	47b5                	li	a5,13
    800075c8:	00f71463          	bne	a4,a5,800075d0 <tinst_tests+0x146>
    800075cc:	6d20106f          	j	80008c9e <tinst_tests+0x1814>
    800075d0:	00015517          	auipc	a0,0x15
    800075d4:	54850513          	add	a0,a0,1352 # 8001cb18 <__func__.1+0x320>
    800075d8:	18b130ef          	jal	8001af62 <printf>
    800075dc:	02900513          	li	a0,41
    800075e0:	055120ef          	jal	80019e34 <putchar>
    800075e4:	4529                	li	a0,10
    800075e6:	04f120ef          	jal	80019e34 <putchar>
    800075ea:	00090c63          	beqz	s2,80007602 <tinst_tests+0x178>
    800075ee:	00144783          	lbu	a5,1(s0)
    800075f2:	c799                	beqz	a5,80007600 <tinst_tests+0x176>
    800075f4:	6418                	ld	a4,8(s0)
    800075f6:	47b5                	li	a5,13
    800075f8:	00f71463          	bne	a4,a5,80007600 <tinst_tests+0x176>
    800075fc:	3d90106f          	j	800091d4 <tinst_tests+0x1d4a>
    80007600:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80007602:	0ff0000f          	fence
    80007606:	4785                	li	a5,1
    80007608:	00f41023          	sh	a5,0(s0)
    8000760c:	00036797          	auipc	a5,0x36
    80007610:	a207be23          	sd	zero,-1476(a5) # 8003d048 <excpt+0x38>
    80007614:	0ff0000f          	fence
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    80007618:	400197b7          	lui	a5,0x40019
    8000761c:	078a                	sll	a5,a5,0x2
    8000761e:	00079783          	lh	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lh(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    80007622:	00017617          	auipc	a2,0x17
    80007626:	d0660613          	add	a2,a2,-762 # 8001e328 <__func__.1+0x1b30>
    8000762a:	08200593          	li	a1,130
    8000762e:	00015517          	auipc	a0,0x15
    80007632:	4ca50513          	add	a0,a0,1226 # 8001caf8 <__func__.1+0x300>
    80007636:	12d130ef          	jal	8001af62 <printf>
    8000763a:	00144783          	lbu	a5,1(s0)
    8000763e:	e399                	bnez	a5,80007644 <tinst_tests+0x1ba>
    80007640:	5da0106f          	j	80008c1a <tinst_tests+0x1790>
    80007644:	6418                	ld	a4,8(s0)
    80007646:	47b5                	li	a5,13
    80007648:	00015597          	auipc	a1,0x15
    8000764c:	48858593          	add	a1,a1,1160 # 8001cad0 <__func__.1+0x2d8>
    80007650:	00f71463          	bne	a4,a5,80007658 <tinst_tests+0x1ce>
    80007654:	75d0106f          	j	800095b0 <tinst_tests+0x2126>
    80007658:	00015517          	auipc	a0,0x15
    8000765c:	4b850513          	add	a0,a0,1208 # 8001cb10 <__func__.1+0x318>
    80007660:	103130ef          	jal	8001af62 <printf>
    80007664:	00144783          	lbu	a5,1(s0)
    80007668:	c799                	beqz	a5,80007676 <tinst_tests+0x1ec>
    8000766a:	6418                	ld	a4,8(s0)
    8000766c:	47b5                	li	a5,13
    8000766e:	00f71463          	bne	a4,a5,80007676 <tinst_tests+0x1ec>
    80007672:	53b0106f          	j	800093ac <tinst_tests+0x1f22>
    80007676:	00015517          	auipc	a0,0x15
    8000767a:	4a250513          	add	a0,a0,1186 # 8001cb18 <__func__.1+0x320>
    8000767e:	0e5130ef          	jal	8001af62 <printf>
    80007682:	02900513          	li	a0,41
    80007686:	7ae120ef          	jal	80019e34 <putchar>
    8000768a:	4529                	li	a0,10
    8000768c:	7a8120ef          	jal	80019e34 <putchar>
    80007690:	00090c63          	beqz	s2,800076a8 <tinst_tests+0x21e>
    80007694:	00144783          	lbu	a5,1(s0)
    80007698:	c799                	beqz	a5,800076a6 <tinst_tests+0x21c>
    8000769a:	6418                	ld	a4,8(s0)
    8000769c:	47b5                	li	a5,13
    8000769e:	00f71463          	bne	a4,a5,800076a6 <tinst_tests+0x21c>
    800076a2:	3d30106f          	j	80009274 <tinst_tests+0x1dea>
    800076a6:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    800076a8:	0ff0000f          	fence
    800076ac:	4785                	li	a5,1
    800076ae:	00f41023          	sh	a5,0(s0)
    800076b2:	00036797          	auipc	a5,0x36
    800076b6:	9807bb23          	sd	zero,-1642(a5) # 8003d048 <excpt+0x38>
    800076ba:	0ff0000f          	fence
LOAD_INSTRUCTION(lhu, "lhu", uint16_t); 
    800076be:	400197b7          	lui	a5,0x40019
    800076c2:	078a                	sll	a5,a5,0x2
    800076c4:	0007d783          	lhu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lhu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    800076c8:	00017617          	auipc	a2,0x17
    800076cc:	ca060613          	add	a2,a2,-864 # 8001e368 <__func__.1+0x1b70>
    800076d0:	08200593          	li	a1,130
    800076d4:	00015517          	auipc	a0,0x15
    800076d8:	42450513          	add	a0,a0,1060 # 8001caf8 <__func__.1+0x300>
    800076dc:	087130ef          	jal	8001af62 <printf>
    800076e0:	00144783          	lbu	a5,1(s0)
    800076e4:	e399                	bnez	a5,800076ea <tinst_tests+0x260>
    800076e6:	5400106f          	j	80008c26 <tinst_tests+0x179c>
    800076ea:	6418                	ld	a4,8(s0)
    800076ec:	47b5                	li	a5,13
    800076ee:	00015597          	auipc	a1,0x15
    800076f2:	3e258593          	add	a1,a1,994 # 8001cad0 <__func__.1+0x2d8>
    800076f6:	00f71463          	bne	a4,a5,800076fe <tinst_tests+0x274>
    800076fa:	75d0106f          	j	80009656 <tinst_tests+0x21cc>
    800076fe:	00015517          	auipc	a0,0x15
    80007702:	41250513          	add	a0,a0,1042 # 8001cb10 <__func__.1+0x318>
    80007706:	05d130ef          	jal	8001af62 <printf>
    8000770a:	00144783          	lbu	a5,1(s0)
    8000770e:	c799                	beqz	a5,8000771c <tinst_tests+0x292>
    80007710:	6418                	ld	a4,8(s0)
    80007712:	47b5                	li	a5,13
    80007714:	00f71463          	bne	a4,a5,8000771c <tinst_tests+0x292>
    80007718:	4dd0106f          	j	800093f4 <tinst_tests+0x1f6a>
    8000771c:	00015517          	auipc	a0,0x15
    80007720:	3fc50513          	add	a0,a0,1020 # 8001cb18 <__func__.1+0x320>
    80007724:	03f130ef          	jal	8001af62 <printf>
    80007728:	02900513          	li	a0,41
    8000772c:	708120ef          	jal	80019e34 <putchar>
    80007730:	4529                	li	a0,10
    80007732:	702120ef          	jal	80019e34 <putchar>
    80007736:	00090c63          	beqz	s2,8000774e <tinst_tests+0x2c4>
    8000773a:	00144783          	lbu	a5,1(s0)
    8000773e:	c799                	beqz	a5,8000774c <tinst_tests+0x2c2>
    80007740:	6418                	ld	a4,8(s0)
    80007742:	47b5                	li	a5,13
    80007744:	00f71463          	bne	a4,a5,8000774c <tinst_tests+0x2c2>
    80007748:	3cb0106f          	j	80009312 <tinst_tests+0x1e88>
    8000774c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000774e:	0ff0000f          	fence
    80007752:	4785                	li	a5,1
    80007754:	00f41023          	sh	a5,0(s0)
    80007758:	00036797          	auipc	a5,0x36
    8000775c:	8e07b823          	sd	zero,-1808(a5) # 8003d048 <excpt+0x38>
    80007760:	0ff0000f          	fence
LOAD_INSTRUCTION(lw, "lw", uint32_t); 
    80007764:	400197b7          	lui	a5,0x40019
    80007768:	078a                	sll	a5,a5,0x2
    8000776a:	0007a783          	lw	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    8000776e:	00017617          	auipc	a2,0x17
    80007772:	c3a60613          	add	a2,a2,-966 # 8001e3a8 <__func__.1+0x1bb0>
    80007776:	08200593          	li	a1,130
    8000777a:	00015517          	auipc	a0,0x15
    8000777e:	37e50513          	add	a0,a0,894 # 8001caf8 <__func__.1+0x300>
    80007782:	7e0130ef          	jal	8001af62 <printf>
    80007786:	00144783          	lbu	a5,1(s0)
    8000778a:	e399                	bnez	a5,80007790 <tinst_tests+0x306>
    8000778c:	4a60106f          	j	80008c32 <tinst_tests+0x17a8>
    80007790:	6418                	ld	a4,8(s0)
    80007792:	47b5                	li	a5,13
    80007794:	00015597          	auipc	a1,0x15
    80007798:	33c58593          	add	a1,a1,828 # 8001cad0 <__func__.1+0x2d8>
    8000779c:	00f71463          	bne	a4,a5,800077a4 <tinst_tests+0x31a>
    800077a0:	75d0106f          	j	800096fc <tinst_tests+0x2272>
    800077a4:	00015517          	auipc	a0,0x15
    800077a8:	36c50513          	add	a0,a0,876 # 8001cb10 <__func__.1+0x318>
    800077ac:	7b6130ef          	jal	8001af62 <printf>
    800077b0:	00144783          	lbu	a5,1(s0)
    800077b4:	c799                	beqz	a5,800077c2 <tinst_tests+0x338>
    800077b6:	6418                	ld	a4,8(s0)
    800077b8:	47b5                	li	a5,13
    800077ba:	00f71463          	bne	a4,a5,800077c2 <tinst_tests+0x338>
    800077be:	47f0106f          	j	8000943c <tinst_tests+0x1fb2>
    800077c2:	00015517          	auipc	a0,0x15
    800077c6:	35650513          	add	a0,a0,854 # 8001cb18 <__func__.1+0x320>
    800077ca:	798130ef          	jal	8001af62 <printf>
    800077ce:	02900513          	li	a0,41
    800077d2:	662120ef          	jal	80019e34 <putchar>
    800077d6:	4529                	li	a0,10
    800077d8:	65c120ef          	jal	80019e34 <putchar>
    800077dc:	00090863          	beqz	s2,800077ec <tinst_tests+0x362>
    800077e0:	00144783          	lbu	a5,1(s0)
    800077e4:	c399                	beqz	a5,800077ea <tinst_tests+0x360>
    800077e6:	5020106f          	j	80008ce8 <tinst_tests+0x185e>
    800077ea:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    800077ec:	0ff0000f          	fence
    800077f0:	4785                	li	a5,1
    800077f2:	00f41023          	sh	a5,0(s0)
    800077f6:	00036797          	auipc	a5,0x36
    800077fa:	8407b923          	sd	zero,-1966(a5) # 8003d048 <excpt+0x38>
    800077fe:	0ff0000f          	fence
LOAD_INSTRUCTION(lwu, "lwu", uint32_t);
    80007802:	400197b7          	lui	a5,0x40019
    80007806:	078a                	sll	a5,a5,0x2
    80007808:	0007e783          	lwu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lwu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    8000780c:	00017617          	auipc	a2,0x17
    80007810:	bdc60613          	add	a2,a2,-1060 # 8001e3e8 <__func__.1+0x1bf0>
    80007814:	08200593          	li	a1,130
    80007818:	00015517          	auipc	a0,0x15
    8000781c:	2e050513          	add	a0,a0,736 # 8001caf8 <__func__.1+0x300>
    80007820:	742130ef          	jal	8001af62 <printf>
    80007824:	00144783          	lbu	a5,1(s0)
    80007828:	e399                	bnez	a5,8000782e <tinst_tests+0x3a4>
    8000782a:	4140106f          	j	80008c3e <tinst_tests+0x17b4>
    8000782e:	6418                	ld	a4,8(s0)
    80007830:	47b5                	li	a5,13
    80007832:	00015597          	auipc	a1,0x15
    80007836:	29e58593          	add	a1,a1,670 # 8001cad0 <__func__.1+0x2d8>
    8000783a:	00f71463          	bne	a4,a5,80007842 <tinst_tests+0x3b8>
    8000783e:	7650106f          	j	800097a2 <tinst_tests+0x2318>
    80007842:	00015517          	auipc	a0,0x15
    80007846:	2ce50513          	add	a0,a0,718 # 8001cb10 <__func__.1+0x318>
    8000784a:	718130ef          	jal	8001af62 <printf>
    8000784e:	00144783          	lbu	a5,1(s0)
    80007852:	c799                	beqz	a5,80007860 <tinst_tests+0x3d6>
    80007854:	6418                	ld	a4,8(s0)
    80007856:	47b5                	li	a5,13
    80007858:	00f71463          	bne	a4,a5,80007860 <tinst_tests+0x3d6>
    8000785c:	4290106f          	j	80009484 <tinst_tests+0x1ffa>
    80007860:	00015517          	auipc	a0,0x15
    80007864:	2b850513          	add	a0,a0,696 # 8001cb18 <__func__.1+0x320>
    80007868:	6fa130ef          	jal	8001af62 <printf>
    8000786c:	02900513          	li	a0,41
    80007870:	5c4120ef          	jal	80019e34 <putchar>
    80007874:	4529                	li	a0,10
    80007876:	5be120ef          	jal	80019e34 <putchar>
    8000787a:	00090863          	beqz	s2,8000788a <tinst_tests+0x400>
    8000787e:	00144783          	lbu	a5,1(s0)
    80007882:	c399                	beqz	a5,80007888 <tinst_tests+0x3fe>
    80007884:	5180106f          	j	80008d9c <tinst_tests+0x1912>
    80007888:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000788a:	0ff0000f          	fence
    8000788e:	4785                	li	a5,1
    80007890:	00f41023          	sh	a5,0(s0)
    80007894:	00035797          	auipc	a5,0x35
    80007898:	7a07ba23          	sd	zero,1972(a5) # 8003d048 <excpt+0x38>
    8000789c:	0ff0000f          	fence
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    800078a0:	400197b7          	lui	a5,0x40019
    800078a4:	078a                	sll	a5,a5,0x2
    800078a6:	0007b783          	ld	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    800078aa:	00017617          	auipc	a2,0x17
    800078ae:	b7e60613          	add	a2,a2,-1154 # 8001e428 <__func__.1+0x1c30>
    800078b2:	08200593          	li	a1,130
    800078b6:	00015517          	auipc	a0,0x15
    800078ba:	24250513          	add	a0,a0,578 # 8001caf8 <__func__.1+0x300>
    800078be:	6a4130ef          	jal	8001af62 <printf>
    800078c2:	00144783          	lbu	a5,1(s0)
    800078c6:	e399                	bnez	a5,800078cc <tinst_tests+0x442>
    800078c8:	3820106f          	j	80008c4a <tinst_tests+0x17c0>
    800078cc:	6418                	ld	a4,8(s0)
    800078ce:	47b5                	li	a5,13
    800078d0:	00015597          	auipc	a1,0x15
    800078d4:	20058593          	add	a1,a1,512 # 8001cad0 <__func__.1+0x2d8>
    800078d8:	00f71463          	bne	a4,a5,800078e0 <tinst_tests+0x456>
    800078dc:	7590106f          	j	80009834 <tinst_tests+0x23aa>
    800078e0:	00015517          	auipc	a0,0x15
    800078e4:	23050513          	add	a0,a0,560 # 8001cb10 <__func__.1+0x318>
    800078e8:	67a130ef          	jal	8001af62 <printf>
    800078ec:	00144783          	lbu	a5,1(s0)
    800078f0:	c799                	beqz	a5,800078fe <tinst_tests+0x474>
    800078f2:	6418                	ld	a4,8(s0)
    800078f4:	47b5                	li	a5,13
    800078f6:	00f71463          	bne	a4,a5,800078fe <tinst_tests+0x474>
    800078fa:	3d30106f          	j	800094cc <tinst_tests+0x2042>
    800078fe:	00015517          	auipc	a0,0x15
    80007902:	21a50513          	add	a0,a0,538 # 8001cb18 <__func__.1+0x320>
    80007906:	65c130ef          	jal	8001af62 <printf>
    8000790a:	02900513          	li	a0,41
    8000790e:	526120ef          	jal	80019e34 <putchar>
    80007912:	4529                	li	a0,10
    80007914:	520120ef          	jal	80019e34 <putchar>
    80007918:	00090863          	beqz	s2,80007928 <tinst_tests+0x49e>
    8000791c:	00144783          	lbu	a5,1(s0)
    80007920:	c399                	beqz	a5,80007926 <tinst_tests+0x49c>
    80007922:	4c60106f          	j	80008de8 <tinst_tests+0x195e>
    80007926:	4901                	li	s2,0
        TINST_CHECK(TINST_LOAD)
    );

    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();
    80007928:	0ff0000f          	fence
    8000792c:	4785                	li	a5,1
    8000792e:	00f41023          	sh	a5,0(s0)
    80007932:	00035797          	auipc	a5,0x35
    80007936:	7007bb23          	sd	zero,1814(a5) # 8003d048 <excpt+0x38>
    8000793a:	0ff0000f          	fence
            ".option pop\n\t" \
            :: "r"(value), "r"(addr):  "memory" \
        ); \
    }

STORE_INSTRUCTION(sb, "sb", uint8_t);
    8000793e:	400197b7          	lui	a5,0x40019
    80007942:	573d                	li	a4,-17
    80007944:	078a                	sll	a5,a5,0x2
    80007946:	00e78023          	sb	a4,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    sb(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    8000794a:	00017617          	auipc	a2,0x17
    8000794e:	b1e60613          	add	a2,a2,-1250 # 8001e468 <__func__.1+0x1c70>
    80007952:	08200593          	li	a1,130
    80007956:	00015517          	auipc	a0,0x15
    8000795a:	1a250513          	add	a0,a0,418 # 8001caf8 <__func__.1+0x300>
    8000795e:	604130ef          	jal	8001af62 <printf>
    80007962:	00144783          	lbu	a5,1(s0)
    80007966:	e399                	bnez	a5,8000796c <tinst_tests+0x4e2>
    80007968:	2ee0106f          	j	80008c56 <tinst_tests+0x17cc>
    8000796c:	6418                	ld	a4,8(s0)
    8000796e:	47bd                	li	a5,15
    80007970:	00015597          	auipc	a1,0x15
    80007974:	16058593          	add	a1,a1,352 # 8001cad0 <__func__.1+0x2d8>
    80007978:	00f71463          	bne	a4,a5,80007980 <tinst_tests+0x4f6>
    8000797c:	74f0106f          	j	800098ca <tinst_tests+0x2440>
    80007980:	00015517          	auipc	a0,0x15
    80007984:	19050513          	add	a0,a0,400 # 8001cb10 <__func__.1+0x318>
    80007988:	5da130ef          	jal	8001af62 <printf>
    8000798c:	00144783          	lbu	a5,1(s0)
    80007990:	c799                	beqz	a5,8000799e <tinst_tests+0x514>
    80007992:	6418                	ld	a4,8(s0)
    80007994:	47bd                	li	a5,15
    80007996:	00f71463          	bne	a4,a5,8000799e <tinst_tests+0x514>
    8000799a:	3d30106f          	j	8000956c <tinst_tests+0x20e2>
    8000799e:	00015517          	auipc	a0,0x15
    800079a2:	17a50513          	add	a0,a0,378 # 8001cb18 <__func__.1+0x320>
    800079a6:	5bc130ef          	jal	8001af62 <printf>
    800079aa:	02900513          	li	a0,41
    800079ae:	486120ef          	jal	80019e34 <putchar>
    800079b2:	4529                	li	a0,10
    800079b4:	480120ef          	jal	80019e34 <putchar>
    800079b8:	00090863          	beqz	s2,800079c8 <tinst_tests+0x53e>
    800079bc:	00144783          	lbu	a5,1(s0)
    800079c0:	c399                	beqz	a5,800079c6 <tinst_tests+0x53c>
    800079c2:	4c80106f          	j	80008e8a <tinst_tests+0x1a00>
    800079c6:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    800079c8:	0ff0000f          	fence
    800079cc:	4785                	li	a5,1
    800079ce:	00f41023          	sh	a5,0(s0)
    800079d2:	00035797          	auipc	a5,0x35
    800079d6:	6607bb23          	sd	zero,1654(a5) # 8003d048 <excpt+0x38>
    800079da:	0ff0000f          	fence
STORE_INSTRUCTION(sh, "sh", uint16_t);
    800079de:	77f1                	lui	a5,0xffffc
    800079e0:	40019737          	lui	a4,0x40019
    800079e4:	eef7879b          	addw	a5,a5,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    800079e8:	070a                	sll	a4,a4,0x2
    800079ea:	00f71023          	sh	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sh(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    800079ee:	00017617          	auipc	a2,0x17
    800079f2:	aba60613          	add	a2,a2,-1350 # 8001e4a8 <__func__.1+0x1cb0>
    800079f6:	08200593          	li	a1,130
    800079fa:	00015517          	auipc	a0,0x15
    800079fe:	0fe50513          	add	a0,a0,254 # 8001caf8 <__func__.1+0x300>
    80007a02:	560130ef          	jal	8001af62 <printf>
    80007a06:	00144783          	lbu	a5,1(s0)
    80007a0a:	e399                	bnez	a5,80007a10 <tinst_tests+0x586>
    80007a0c:	2560106f          	j	80008c62 <tinst_tests+0x17d8>
    80007a10:	6418                	ld	a4,8(s0)
    80007a12:	47bd                	li	a5,15
    80007a14:	00015597          	auipc	a1,0x15
    80007a18:	0bc58593          	add	a1,a1,188 # 8001cad0 <__func__.1+0x2d8>
    80007a1c:	00f71463          	bne	a4,a5,80007a24 <tinst_tests+0x59a>
    80007a20:	74b0106f          	j	8000996a <tinst_tests+0x24e0>
    80007a24:	00015517          	auipc	a0,0x15
    80007a28:	0ec50513          	add	a0,a0,236 # 8001cb10 <__func__.1+0x318>
    80007a2c:	536130ef          	jal	8001af62 <printf>
    80007a30:	00144783          	lbu	a5,1(s0)
    80007a34:	c799                	beqz	a5,80007a42 <tinst_tests+0x5b8>
    80007a36:	6418                	ld	a4,8(s0)
    80007a38:	47bd                	li	a5,15
    80007a3a:	00f71463          	bne	a4,a5,80007a42 <tinst_tests+0x5b8>
    80007a3e:	3d50106f          	j	80009612 <tinst_tests+0x2188>
    80007a42:	00015517          	auipc	a0,0x15
    80007a46:	0d650513          	add	a0,a0,214 # 8001cb18 <__func__.1+0x320>
    80007a4a:	518130ef          	jal	8001af62 <printf>
    80007a4e:	02900513          	li	a0,41
    80007a52:	3e2120ef          	jal	80019e34 <putchar>
    80007a56:	4529                	li	a0,10
    80007a58:	3dc120ef          	jal	80019e34 <putchar>
    80007a5c:	00090863          	beqz	s2,80007a6c <tinst_tests+0x5e2>
    80007a60:	00144783          	lbu	a5,1(s0)
    80007a64:	c399                	beqz	a5,80007a6a <tinst_tests+0x5e0>
    80007a66:	4740106f          	j	80008eda <tinst_tests+0x1a50>
    80007a6a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    80007a6c:	0ff0000f          	fence
    80007a70:	4785                	li	a5,1
    80007a72:	00f41023          	sh	a5,0(s0)
    80007a76:	00035797          	auipc	a5,0x35
    80007a7a:	5c07b923          	sd	zero,1490(a5) # 8003d048 <excpt+0x38>
    80007a7e:	0ff0000f          	fence
STORE_INSTRUCTION(sw, "sw", uint32_t);
    80007a82:	deadc7b7          	lui	a5,0xdeadc
    80007a86:	40019737          	lui	a4,0x40019
    80007a8a:	eef7879b          	addw	a5,a5,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    80007a8e:	070a                	sll	a4,a4,0x2
    80007a90:	00f72023          	sw	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sw(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    80007a94:	00017617          	auipc	a2,0x17
    80007a98:	a5460613          	add	a2,a2,-1452 # 8001e4e8 <__func__.1+0x1cf0>
    80007a9c:	08200593          	li	a1,130
    80007aa0:	00015517          	auipc	a0,0x15
    80007aa4:	05850513          	add	a0,a0,88 # 8001caf8 <__func__.1+0x300>
    80007aa8:	4ba130ef          	jal	8001af62 <printf>
    80007aac:	00144783          	lbu	a5,1(s0)
    80007ab0:	e399                	bnez	a5,80007ab6 <tinst_tests+0x62c>
    80007ab2:	1bc0106f          	j	80008c6e <tinst_tests+0x17e4>
    80007ab6:	6418                	ld	a4,8(s0)
    80007ab8:	47bd                	li	a5,15
    80007aba:	00015597          	auipc	a1,0x15
    80007abe:	01658593          	add	a1,a1,22 # 8001cad0 <__func__.1+0x2d8>
    80007ac2:	00f71463          	bne	a4,a5,80007aca <tinst_tests+0x640>
    80007ac6:	7410106f          	j	80009a06 <tinst_tests+0x257c>
    80007aca:	00015517          	auipc	a0,0x15
    80007ace:	04650513          	add	a0,a0,70 # 8001cb10 <__func__.1+0x318>
    80007ad2:	490130ef          	jal	8001af62 <printf>
    80007ad6:	00144783          	lbu	a5,1(s0)
    80007ada:	c799                	beqz	a5,80007ae8 <tinst_tests+0x65e>
    80007adc:	6418                	ld	a4,8(s0)
    80007ade:	47bd                	li	a5,15
    80007ae0:	00f71463          	bne	a4,a5,80007ae8 <tinst_tests+0x65e>
    80007ae4:	3d50106f          	j	800096b8 <tinst_tests+0x222e>
    80007ae8:	00015517          	auipc	a0,0x15
    80007aec:	03050513          	add	a0,a0,48 # 8001cb18 <__func__.1+0x320>
    80007af0:	472130ef          	jal	8001af62 <printf>
    80007af4:	02900513          	li	a0,41
    80007af8:	33c120ef          	jal	80019e34 <putchar>
    80007afc:	4529                	li	a0,10
    80007afe:	336120ef          	jal	80019e34 <putchar>
    80007b02:	00090863          	beqz	s2,80007b12 <tinst_tests+0x688>
    80007b06:	00144783          	lbu	a5,1(s0)
    80007b0a:	c399                	beqz	a5,80007b10 <tinst_tests+0x686>
    80007b0c:	41e0106f          	j	80008f2a <tinst_tests+0x1aa0>
    80007b10:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    80007b12:	0ff0000f          	fence
    80007b16:	4785                	li	a5,1
    80007b18:	00f41023          	sh	a5,0(s0)
    80007b1c:	00035797          	auipc	a5,0x35
    80007b20:	5207b623          	sd	zero,1324(a5) # 8003d048 <excpt+0x38>
    80007b24:	0ff0000f          	fence
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80007b28:	37ab77b7          	lui	a5,0x37ab7
    80007b2c:	078a                	sll	a5,a5,0x2
    80007b2e:	40019737          	lui	a4,0x40019
    80007b32:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80007b36:	070a                	sll	a4,a4,0x2
    80007b38:	00f73023          	sd	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sd(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    80007b3c:	00017617          	auipc	a2,0x17
    80007b40:	9ec60613          	add	a2,a2,-1556 # 8001e528 <__func__.1+0x1d30>
    80007b44:	08200593          	li	a1,130
    80007b48:	00015517          	auipc	a0,0x15
    80007b4c:	fb050513          	add	a0,a0,-80 # 8001caf8 <__func__.1+0x300>
    80007b50:	412130ef          	jal	8001af62 <printf>
    80007b54:	00144783          	lbu	a5,1(s0)
    80007b58:	e399                	bnez	a5,80007b5e <tinst_tests+0x6d4>
    80007b5a:	1200106f          	j	80008c7a <tinst_tests+0x17f0>
    80007b5e:	6418                	ld	a4,8(s0)
    80007b60:	47bd                	li	a5,15
    80007b62:	00015597          	auipc	a1,0x15
    80007b66:	f6e58593          	add	a1,a1,-146 # 8001cad0 <__func__.1+0x2d8>
    80007b6a:	00f71463          	bne	a4,a5,80007b72 <tinst_tests+0x6e8>
    80007b6e:	5260106f          	j	80009094 <tinst_tests+0x1c0a>
    80007b72:	00015517          	auipc	a0,0x15
    80007b76:	f9e50513          	add	a0,a0,-98 # 8001cb10 <__func__.1+0x318>
    80007b7a:	3e8130ef          	jal	8001af62 <printf>
    80007b7e:	00144783          	lbu	a5,1(s0)
    80007b82:	c799                	beqz	a5,80007b90 <tinst_tests+0x706>
    80007b84:	6418                	ld	a4,8(s0)
    80007b86:	47bd                	li	a5,15
    80007b88:	00f71463          	bne	a4,a5,80007b90 <tinst_tests+0x706>
    80007b8c:	3d30106f          	j	8000975e <tinst_tests+0x22d4>
    80007b90:	00015517          	auipc	a0,0x15
    80007b94:	f8850513          	add	a0,a0,-120 # 8001cb18 <__func__.1+0x320>
    80007b98:	3ca130ef          	jal	8001af62 <printf>
    80007b9c:	02900513          	li	a0,41
    80007ba0:	294120ef          	jal	80019e34 <putchar>
    80007ba4:	4529                	li	a0,10
    80007ba6:	28e120ef          	jal	80019e34 <putchar>
    80007baa:	00090863          	beqz	s2,80007bba <tinst_tests+0x730>
    80007bae:	00144783          	lbu	a5,1(s0)
    80007bb2:	c399                	beqz	a5,80007bb8 <tinst_tests+0x72e>
    80007bb4:	3c60106f          	j	80008f7a <tinst_tests+0x1af0>
    80007bb8:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    80007bba:	0ff0000f          	fence
    80007bbe:	4785                	li	a5,1
    80007bc0:	00f41023          	sh	a5,0(s0)
    80007bc4:	00035797          	auipc	a5,0x35
    80007bc8:	4807b223          	sd	zero,1156(a5) # 8003d048 <excpt+0x38>
    80007bcc:	0ff0000f          	fence
 * the asm extended chosen registers are part of the subset allowed
 * so we have to make sure.
 */

static inline uint64_t c_lw(uintptr_t addr){
    register uint64_t _addr asm("a0") = addr;
    80007bd0:	40019537          	lui	a0,0x40019
    80007bd4:	050a                	sll	a0,a0,0x2
    register uint64_t value asm("a1");
    asm volatile(
    80007bd6:	410c                	lw	a1,0(a0)
    value = c_lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80007bd8:	00017617          	auipc	a2,0x17
    80007bdc:	99060613          	add	a2,a2,-1648 # 8001e568 <__func__.1+0x1d70>
    80007be0:	08200593          	li	a1,130
    80007be4:	00015517          	auipc	a0,0x15
    80007be8:	f1450513          	add	a0,a0,-236 # 8001caf8 <__func__.1+0x300>
    80007bec:	376130ef          	jal	8001af62 <printf>
    80007bf0:	00144783          	lbu	a5,1(s0)
    80007bf4:	c799                	beqz	a5,80007c02 <tinst_tests+0x778>
    80007bf6:	6418                	ld	a4,8(s0)
    80007bf8:	47b5                	li	a5,13
    80007bfa:	00f71463          	bne	a4,a5,80007c02 <tinst_tests+0x778>
    80007bfe:	5380106f          	j	80009136 <tinst_tests+0x1cac>
    80007c02:	00015597          	auipc	a1,0x15
    80007c06:	ece58593          	add	a1,a1,-306 # 8001cad0 <__func__.1+0x2d8>
    80007c0a:	00015517          	auipc	a0,0x15
    80007c0e:	f0650513          	add	a0,a0,-250 # 8001cb10 <__func__.1+0x318>
    80007c12:	350130ef          	jal	8001af62 <printf>
    80007c16:	00144783          	lbu	a5,1(s0)
    80007c1a:	c799                	beqz	a5,80007c28 <tinst_tests+0x79e>
    80007c1c:	6418                	ld	a4,8(s0)
    80007c1e:	47b5                	li	a5,13
    80007c20:	00f71463          	bne	a4,a5,80007c28 <tinst_tests+0x79e>
    80007c24:	3e10106f          	j	80009804 <tinst_tests+0x237a>
    80007c28:	00015517          	auipc	a0,0x15
    80007c2c:	ef050513          	add	a0,a0,-272 # 8001cb18 <__func__.1+0x320>
    80007c30:	332130ef          	jal	8001af62 <printf>
    80007c34:	02900513          	li	a0,41
    80007c38:	1fc120ef          	jal	80019e34 <putchar>
    80007c3c:	4529                	li	a0,10
    80007c3e:	1f6120ef          	jal	80019e34 <putchar>
    80007c42:	00090863          	beqz	s2,80007c52 <tinst_tests+0x7c8>
    80007c46:	00144783          	lbu	a5,1(s0)
    80007c4a:	c399                	beqz	a5,80007c50 <tinst_tests+0x7c6>
    80007c4c:	37e0106f          	j	80008fca <tinst_tests+0x1b40>
    80007c50:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80007c52:	0ff0000f          	fence
    80007c56:	4785                	li	a5,1
    80007c58:	00f41023          	sh	a5,0(s0)
    80007c5c:	00035797          	auipc	a5,0x35
    80007c60:	3e07b623          	sd	zero,1004(a5) # 8003d048 <excpt+0x38>
    80007c64:	0ff0000f          	fence
    );
    return value;
}

static inline uint64_t c_ld(uintptr_t addr){
    register uint64_t _addr asm("a0") = addr;
    80007c68:	40019537          	lui	a0,0x40019
    80007c6c:	050a                	sll	a0,a0,0x2
    register uint64_t value asm("a1");
    asm volatile(
    80007c6e:	610c                	ld	a1,0(a0)
    value = c_ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    80007c70:	00017617          	auipc	a2,0x17
    80007c74:	93860613          	add	a2,a2,-1736 # 8001e5a8 <__func__.1+0x1db0>
        "c.ld    %0, 0(%1)\n\t"
        :"=r"(value): "r"(_addr) : "memory"
    );
    return value;
    80007c78:	84ae                	mv	s1,a1
    80007c7a:	00015517          	auipc	a0,0x15
    80007c7e:	e7e50513          	add	a0,a0,-386 # 8001caf8 <__func__.1+0x300>
    80007c82:	08200593          	li	a1,130
    80007c86:	2dc130ef          	jal	8001af62 <printf>
    80007c8a:	00144783          	lbu	a5,1(s0)
    80007c8e:	c799                	beqz	a5,80007c9c <tinst_tests+0x812>
    80007c90:	6418                	ld	a4,8(s0)
    80007c92:	47b5                	li	a5,13
    80007c94:	00f71463          	bne	a4,a5,80007c9c <tinst_tests+0x812>
    80007c98:	4f80106f          	j	80009190 <tinst_tests+0x1d06>
    80007c9c:	00015597          	auipc	a1,0x15
    80007ca0:	e3458593          	add	a1,a1,-460 # 8001cad0 <__func__.1+0x2d8>
    80007ca4:	00015517          	auipc	a0,0x15
    80007ca8:	e6c50513          	add	a0,a0,-404 # 8001cb10 <__func__.1+0x318>
    80007cac:	2b6130ef          	jal	8001af62 <printf>
    80007cb0:	00144783          	lbu	a5,1(s0)
    80007cb4:	c799                	beqz	a5,80007cc2 <tinst_tests+0x838>
    80007cb6:	6418                	ld	a4,8(s0)
    80007cb8:	47b5                	li	a5,13
    80007cba:	00f71463          	bne	a4,a5,80007cc2 <tinst_tests+0x838>
    80007cbe:	3d90106f          	j	80009896 <tinst_tests+0x240c>
    80007cc2:	00015517          	auipc	a0,0x15
    80007cc6:	e5650513          	add	a0,a0,-426 # 8001cb18 <__func__.1+0x320>
    80007cca:	298130ef          	jal	8001af62 <printf>
    80007cce:	02900513          	li	a0,41
    80007cd2:	162120ef          	jal	80019e34 <putchar>
    80007cd6:	4529                	li	a0,10
    80007cd8:	15c120ef          	jal	80019e34 <putchar>
    80007cdc:	00090863          	beqz	s2,80007cec <tinst_tests+0x862>
    80007ce0:	00144783          	lbu	a5,1(s0)
    80007ce4:	c399                	beqz	a5,80007cea <tinst_tests+0x860>
    80007ce6:	3240106f          	j	8000900a <tinst_tests+0x1b80>
    80007cea:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80007cec:	0ff0000f          	fence
    80007cf0:	4785                	li	a5,1
    80007cf2:	00f41023          	sh	a5,0(s0)
    80007cf6:	00035797          	auipc	a5,0x35
    80007cfa:	3407b923          	sd	zero,850(a5) # 8003d048 <excpt+0x38>
    80007cfe:	0ff0000f          	fence
}

static inline void c_sw(uintptr_t addr, uint64_t value){
    register uint64_t _addr asm("a0") = addr;
    80007d02:	40019537          	lui	a0,0x40019
    80007d06:	050a                	sll	a0,a0,0x2
    register uint64_t _value asm("a1") = value;
    80007d08:	85a6                	mv	a1,s1
    asm volatile(
    80007d0a:	c10c                	sw	a1,0(a0)
    c_sw(vaddr_f, value);       
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80007d0c:	00017617          	auipc	a2,0x17
    80007d10:	85c60613          	add	a2,a2,-1956 # 8001e568 <__func__.1+0x1d70>
    80007d14:	08200593          	li	a1,130
    80007d18:	00015517          	auipc	a0,0x15
    80007d1c:	de050513          	add	a0,a0,-544 # 8001caf8 <__func__.1+0x300>
    80007d20:	242130ef          	jal	8001af62 <printf>
    80007d24:	00144783          	lbu	a5,1(s0)
    80007d28:	c799                	beqz	a5,80007d36 <tinst_tests+0x8ac>
    80007d2a:	6418                	ld	a4,8(s0)
    80007d2c:	47bd                	li	a5,15
    80007d2e:	00f71463          	bne	a4,a5,80007d36 <tinst_tests+0x8ac>
    80007d32:	4760106f          	j	800091a8 <tinst_tests+0x1d1e>
    80007d36:	00015597          	auipc	a1,0x15
    80007d3a:	d9a58593          	add	a1,a1,-614 # 8001cad0 <__func__.1+0x2d8>
    80007d3e:	00015517          	auipc	a0,0x15
    80007d42:	dd250513          	add	a0,a0,-558 # 8001cb10 <__func__.1+0x318>
    80007d46:	21c130ef          	jal	8001af62 <printf>
    80007d4a:	00144783          	lbu	a5,1(s0)
    80007d4e:	c799                	beqz	a5,80007d5c <tinst_tests+0x8d2>
    80007d50:	6418                	ld	a4,8(s0)
    80007d52:	47bd                	li	a5,15
    80007d54:	00f71463          	bne	a4,a5,80007d5c <tinst_tests+0x8d2>
    80007d58:	3db0106f          	j	80009932 <tinst_tests+0x24a8>
    80007d5c:	00015517          	auipc	a0,0x15
    80007d60:	dbc50513          	add	a0,a0,-580 # 8001cb18 <__func__.1+0x320>
    80007d64:	1fe130ef          	jal	8001af62 <printf>
    80007d68:	02900513          	li	a0,41
    80007d6c:	0c8120ef          	jal	80019e34 <putchar>
    80007d70:	4529                	li	a0,10
    80007d72:	0c2120ef          	jal	80019e34 <putchar>
    80007d76:	00090c63          	beqz	s2,80007d8e <tinst_tests+0x904>
    80007d7a:	00144783          	lbu	a5,1(s0)
    80007d7e:	c799                	beqz	a5,80007d8c <tinst_tests+0x902>
    80007d80:	6418                	ld	a4,8(s0)
    80007d82:	47bd                	li	a5,15
    80007d84:	00f71463          	bne	a4,a5,80007d8c <tinst_tests+0x902>
    80007d88:	30c0206f          	j	8000a094 <tinst_tests+0x2c0a>
    80007d8c:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    80007d8e:	0ff0000f          	fence
    80007d92:	4785                	li	a5,1
    80007d94:	00f41023          	sh	a5,0(s0)
    80007d98:	00035797          	auipc	a5,0x35
    80007d9c:	2a07b823          	sd	zero,688(a5) # 8003d048 <excpt+0x38>
    80007da0:	0ff0000f          	fence
        :: "r"(_value), "r"(_addr): "memory"
    );
}

static inline void c_sd(uintptr_t addr, uint64_t value){
    register uint64_t _addr asm("a0") = addr;
    80007da4:	40019537          	lui	a0,0x40019
    80007da8:	050a                	sll	a0,a0,0x2
    register uint64_t _value asm("a1") = value;
    80007daa:	85a6                	mv	a1,s1
    asm volatile(
    80007dac:	e10c                	sd	a1,0(a0)
    c_sd(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    80007dae:	00017617          	auipc	a2,0x17
    80007db2:	83a60613          	add	a2,a2,-1990 # 8001e5e8 <__func__.1+0x1df0>
    80007db6:	08200593          	li	a1,130
    80007dba:	00015517          	auipc	a0,0x15
    80007dbe:	d3e50513          	add	a0,a0,-706 # 8001caf8 <__func__.1+0x300>
    80007dc2:	1a0130ef          	jal	8001af62 <printf>
    80007dc6:	00144783          	lbu	a5,1(s0)
    80007dca:	c799                	beqz	a5,80007dd8 <tinst_tests+0x94e>
    80007dcc:	6418                	ld	a4,8(s0)
    80007dce:	47bd                	li	a5,15
    80007dd0:	00f71463          	bne	a4,a5,80007dd8 <tinst_tests+0x94e>
    80007dd4:	3ec0106f          	j	800091c0 <tinst_tests+0x1d36>
    80007dd8:	00015597          	auipc	a1,0x15
    80007ddc:	cf858593          	add	a1,a1,-776 # 8001cad0 <__func__.1+0x2d8>
    80007de0:	00015517          	auipc	a0,0x15
    80007de4:	d3050513          	add	a0,a0,-720 # 8001cb10 <__func__.1+0x318>
    80007de8:	17a130ef          	jal	8001af62 <printf>
    80007dec:	00144783          	lbu	a5,1(s0)
    80007df0:	c799                	beqz	a5,80007dfe <tinst_tests+0x974>
    80007df2:	6418                	ld	a4,8(s0)
    80007df4:	47bd                	li	a5,15
    80007df6:	00f71463          	bne	a4,a5,80007dfe <tinst_tests+0x974>
    80007dfa:	3d90106f          	j	800099d2 <tinst_tests+0x2548>
    80007dfe:	00015517          	auipc	a0,0x15
    80007e02:	d1a50513          	add	a0,a0,-742 # 8001cb18 <__func__.1+0x320>
    80007e06:	15c130ef          	jal	8001af62 <printf>
    80007e0a:	02900513          	li	a0,41
    80007e0e:	026120ef          	jal	80019e34 <putchar>
    80007e12:	4529                	li	a0,10
    80007e14:	020120ef          	jal	80019e34 <putchar>
    80007e18:	00090c63          	beqz	s2,80007e30 <tinst_tests+0x9a6>
    80007e1c:	00144783          	lbu	a5,1(s0)
    80007e20:	c799                	beqz	a5,80007e2e <tinst_tests+0x9a4>
    80007e22:	6418                	ld	a4,8(s0)
    80007e24:	47bd                	li	a5,15
    80007e26:	00f71463          	bne	a4,a5,80007e2e <tinst_tests+0x9a4>
    80007e2a:	2a40206f          	j	8000a0ce <tinst_tests+0x2c44>
    80007e2e:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    80007e30:	0ff0000f          	fence
    80007e34:	4785                	li	a5,1
    80007e36:	00f41023          	sh	a5,0(s0)
    80007e3a:	00035797          	auipc	a5,0x35
    80007e3e:	2007b723          	sd	zero,526(a5) # 8003d048 <excpt+0x38>
    80007e42:	0ff0000f          	fence
    );
}

static inline uint32_t lr_w(uintptr_t addr){
    uint32_t value;
    asm volatile(
    80007e46:	400194b7          	lui	s1,0x40019
    80007e4a:	048a                	sll	s1,s1,0x2
    80007e4c:	1004a4af          	lr.w	s1,(s1)
    value = lr_w(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    80007e50:	00016617          	auipc	a2,0x16
    80007e54:	7d860613          	add	a2,a2,2008 # 8001e628 <__func__.1+0x1e30>
    80007e58:	08200593          	li	a1,130
    80007e5c:	00015517          	auipc	a0,0x15
    80007e60:	c9c50513          	add	a0,a0,-868 # 8001caf8 <__func__.1+0x300>
    80007e64:	0fe130ef          	jal	8001af62 <printf>
    80007e68:	00144783          	lbu	a5,1(s0)
    value = lr_w(vaddr_f);
    80007e6c:	1482                	sll	s1,s1,0x20
    80007e6e:	9081                	srl	s1,s1,0x20
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    80007e70:	60078be3          	beqz	a5,80008c86 <tinst_tests+0x17fc>
    80007e74:	6418                	ld	a4,8(s0)
    80007e76:	47b5                	li	a5,13
    80007e78:	00015597          	auipc	a1,0x15
    80007e7c:	c5858593          	add	a1,a1,-936 # 8001cad0 <__func__.1+0x2d8>
    80007e80:	00f71463          	bne	a4,a5,80007e88 <tinst_tests+0x9fe>
    80007e84:	3920106f          	j	80009216 <tinst_tests+0x1d8c>
    80007e88:	00015517          	auipc	a0,0x15
    80007e8c:	c8850513          	add	a0,a0,-888 # 8001cb10 <__func__.1+0x318>
    80007e90:	0d2130ef          	jal	8001af62 <printf>
    80007e94:	00144783          	lbu	a5,1(s0)
    80007e98:	c799                	beqz	a5,80007ea6 <tinst_tests+0xa1c>
    80007e9a:	6418                	ld	a4,8(s0)
    80007e9c:	47b5                	li	a5,13
    80007e9e:	00f71463          	bne	a4,a5,80007ea6 <tinst_tests+0xa1c>
    80007ea2:	1ac0106f          	j	8000904e <tinst_tests+0x1bc4>
    80007ea6:	00015517          	auipc	a0,0x15
    80007eaa:	c7250513          	add	a0,a0,-910 # 8001cb18 <__func__.1+0x320>
    80007eae:	0b4130ef          	jal	8001af62 <printf>
    80007eb2:	02900513          	li	a0,41
    80007eb6:	77f110ef          	jal	80019e34 <putchar>
    80007eba:	4529                	li	a0,10
    80007ebc:	779110ef          	jal	80019e34 <putchar>
    80007ec0:	00090c63          	beqz	s2,80007ed8 <tinst_tests+0xa4e>
    80007ec4:	00144783          	lbu	a5,1(s0)
    80007ec8:	c799                	beqz	a5,80007ed6 <tinst_tests+0xa4c>
    80007eca:	6418                	ld	a4,8(s0)
    80007ecc:	47b5                	li	a5,13
    80007ece:	00f71463          	bne	a4,a5,80007ed6 <tinst_tests+0xa4c>
    80007ed2:	2320206f          	j	8000a104 <tinst_tests+0x2c7a>
    80007ed6:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80007ed8:	0ff0000f          	fence
    80007edc:	4785                	li	a5,1
    80007ede:	00f41023          	sh	a5,0(s0)
    80007ee2:	00035797          	auipc	a5,0x35
    80007ee6:	1607b323          	sd	zero,358(a5) # 8003d048 <excpt+0x38>
    80007eea:	0ff0000f          	fence
    );
    return value;
}

static inline uint32_t sc_w(uintptr_t addr, uint64_t value){
    asm volatile(
    80007eee:	400197b7          	lui	a5,0x40019
    80007ef2:	078a                	sll	a5,a5,0x2
    80007ef4:	1897a4af          	sc.w	s1,s1,(a5)
    value = sc_w(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    80007ef8:	00016617          	auipc	a2,0x16
    80007efc:	77060613          	add	a2,a2,1904 # 8001e668 <__func__.1+0x1e70>
    80007f00:	08200593          	li	a1,130
    80007f04:	00015517          	auipc	a0,0x15
    80007f08:	bf450513          	add	a0,a0,-1036 # 8001caf8 <__func__.1+0x300>
    80007f0c:	056130ef          	jal	8001af62 <printf>
    80007f10:	00144783          	lbu	a5,1(s0)
        "sc.w    %0, %0, 0(%1)\n\t"
        : "+r"(value) : "r"(addr): "memory"
    );
    return value;
    80007f14:	2481                	sext.w	s1,s1
    80007f16:	56078ee3          	beqz	a5,80008c92 <tinst_tests+0x1808>
    80007f1a:	6418                	ld	a4,8(s0)
    80007f1c:	47bd                	li	a5,15
    80007f1e:	00015597          	auipc	a1,0x15
    80007f22:	bb258593          	add	a1,a1,-1102 # 8001cad0 <__func__.1+0x2d8>
    80007f26:	00f71463          	bne	a4,a5,80007f2e <tinst_tests+0xaa4>
    80007f2a:	38c0106f          	j	800092b6 <tinst_tests+0x1e2c>
    80007f2e:	00015517          	auipc	a0,0x15
    80007f32:	be250513          	add	a0,a0,-1054 # 8001cb10 <__func__.1+0x318>
    80007f36:	02c130ef          	jal	8001af62 <printf>
    80007f3a:	00144783          	lbu	a5,1(s0)
    80007f3e:	c799                	beqz	a5,80007f4c <tinst_tests+0xac2>
    80007f40:	6418                	ld	a4,8(s0)
    80007f42:	47bd                	li	a5,15
    80007f44:	00f71463          	bne	a4,a5,80007f4c <tinst_tests+0xac2>
    80007f48:	1a80106f          	j	800090f0 <tinst_tests+0x1c66>
    80007f4c:	00015517          	auipc	a0,0x15
    80007f50:	bcc50513          	add	a0,a0,-1076 # 8001cb18 <__func__.1+0x320>
    80007f54:	00e130ef          	jal	8001af62 <printf>
    80007f58:	02900513          	li	a0,41
    80007f5c:	6d9110ef          	jal	80019e34 <putchar>
    80007f60:	4529                	li	a0,10
    80007f62:	6d3110ef          	jal	80019e34 <putchar>
    80007f66:	00090c63          	beqz	s2,80007f7e <tinst_tests+0xaf4>
    80007f6a:	00144783          	lbu	a5,1(s0)
    80007f6e:	c799                	beqz	a5,80007f7c <tinst_tests+0xaf2>
    80007f70:	6418                	ld	a4,8(s0)
    80007f72:	47bd                	li	a5,15
    80007f74:	00f71463          	bne	a4,a5,80007f7c <tinst_tests+0xaf2>
    80007f78:	1d40206f          	j	8000a14c <tinst_tests+0x2cc2>
    80007f7c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80007f7e:	0ff0000f          	fence
    80007f82:	4785                	li	a5,1
    80007f84:	00f41023          	sh	a5,0(s0)
    80007f88:	00035797          	auipc	a5,0x35
    80007f8c:	0c07b023          	sd	zero,192(a5) # 8003d048 <excpt+0x38>
    80007f90:	0ff0000f          	fence
            : "+r"(value) : "r"(addr): "memory" \
        ); \
        return value; \
    }

AMO_INSTRUCTION(amoswap_w, "amoswap.w", uint32_t);
    80007f94:	400197b7          	lui	a5,0x40019
    80007f98:	078a                	sll	a5,a5,0x2
    80007f9a:	0897a4af          	amoswap.w	s1,s1,(a5)
    value = amoswap_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    80007f9e:	00016617          	auipc	a2,0x16
    80007fa2:	70a60613          	add	a2,a2,1802 # 8001e6a8 <__func__.1+0x1eb0>
    80007fa6:	08200593          	li	a1,130
    80007faa:	00015517          	auipc	a0,0x15
    80007fae:	b4e50513          	add	a0,a0,-1202 # 8001caf8 <__func__.1+0x300>
    80007fb2:	7b1120ef          	jal	8001af62 <printf>
    80007fb6:	00144783          	lbu	a5,1(s0)
    80007fba:	520781e3          	beqz	a5,80008cdc <tinst_tests+0x1852>
    80007fbe:	6418                	ld	a4,8(s0)
    80007fc0:	47bd                	li	a5,15
    80007fc2:	00015597          	auipc	a1,0x15
    80007fc6:	b0e58593          	add	a1,a1,-1266 # 8001cad0 <__func__.1+0x2d8>
    80007fca:	00f71463          	bne	a4,a5,80007fd2 <tinst_tests+0xb48>
    80007fce:	3820106f          	j	80009350 <tinst_tests+0x1ec6>
    80007fd2:	00015517          	auipc	a0,0x15
    80007fd6:	b3e50513          	add	a0,a0,-1218 # 8001cb10 <__func__.1+0x318>
    80007fda:	789120ef          	jal	8001af62 <printf>
    80007fde:	00144783          	lbu	a5,1(s0)
    80007fe2:	c799                	beqz	a5,80007ff0 <tinst_tests+0xb66>
    80007fe4:	6418                	ld	a4,8(s0)
    80007fe6:	47bd                	li	a5,15
    80007fe8:	00f71463          	bne	a4,a5,80007ff0 <tinst_tests+0xb66>
    80007fec:	15e0106f          	j	8000914a <tinst_tests+0x1cc0>
    80007ff0:	00015517          	auipc	a0,0x15
    80007ff4:	b2850513          	add	a0,a0,-1240 # 8001cb18 <__func__.1+0x320>
    80007ff8:	76b120ef          	jal	8001af62 <printf>
    80007ffc:	02900513          	li	a0,41
    80008000:	635110ef          	jal	80019e34 <putchar>
    80008004:	4529                	li	a0,10
    80008006:	62f110ef          	jal	80019e34 <putchar>
    8000800a:	00090c63          	beqz	s2,80008022 <tinst_tests+0xb98>
    8000800e:	00144783          	lbu	a5,1(s0)
    80008012:	c799                	beqz	a5,80008020 <tinst_tests+0xb96>
    80008014:	6418                	ld	a4,8(s0)
    80008016:	47bd                	li	a5,15
    80008018:	00f71463          	bne	a4,a5,80008020 <tinst_tests+0xb96>
    8000801c:	1780206f          	j	8000a194 <tinst_tests+0x2d0a>
    80008020:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008022:	0ff0000f          	fence
    80008026:	4785                	li	a5,1
    80008028:	00f41023          	sh	a5,0(s0)
    8000802c:	00035797          	auipc	a5,0x35
    80008030:	0007be23          	sd	zero,28(a5) # 8003d048 <excpt+0x38>
    80008034:	0ff0000f          	fence
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80008038:	400197b7          	lui	a5,0x40019
    8000803c:	078a                	sll	a5,a5,0x2
    8000803e:	0097a4af          	amoadd.w	s1,s1,(a5)
    value = amoadd_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    80008042:	00016617          	auipc	a2,0x16
    80008046:	6a660613          	add	a2,a2,1702 # 8001e6e8 <__func__.1+0x1ef0>
    8000804a:	08200593          	li	a1,130
    8000804e:	00015517          	auipc	a0,0x15
    80008052:	aaa50513          	add	a0,a0,-1366 # 8001caf8 <__func__.1+0x300>
    80008056:	70d120ef          	jal	8001af62 <printf>
    8000805a:	00144783          	lbu	a5,1(s0)
    8000805e:	4c079be3          	bnez	a5,80008d34 <tinst_tests+0x18aa>
    80008062:	00015597          	auipc	a1,0x15
    80008066:	a6e58593          	add	a1,a1,-1426 # 8001cad0 <__func__.1+0x2d8>
    8000806a:	00015517          	auipc	a0,0x15
    8000806e:	aa650513          	add	a0,a0,-1370 # 8001cb10 <__func__.1+0x318>
    80008072:	6f1120ef          	jal	8001af62 <printf>
    80008076:	00144783          	lbu	a5,1(s0)
    8000807a:	c799                	beqz	a5,80008088 <tinst_tests+0xbfe>
    8000807c:	6418                	ld	a4,8(s0)
    8000807e:	47bd                	li	a5,15
    80008080:	00f71463          	bne	a4,a5,80008088 <tinst_tests+0xbfe>
    80008084:	20f0106f          	j	80009a92 <tinst_tests+0x2608>
    80008088:	00015517          	auipc	a0,0x15
    8000808c:	a9050513          	add	a0,a0,-1392 # 8001cb18 <__func__.1+0x320>
    80008090:	6d3120ef          	jal	8001af62 <printf>
    80008094:	02900513          	li	a0,41
    80008098:	59d110ef          	jal	80019e34 <putchar>
    8000809c:	4529                	li	a0,10
    8000809e:	597110ef          	jal	80019e34 <putchar>
    800080a2:	00090c63          	beqz	s2,800080ba <tinst_tests+0xc30>
    800080a6:	00144783          	lbu	a5,1(s0)
    800080aa:	c799                	beqz	a5,800080b8 <tinst_tests+0xc2e>
    800080ac:	6418                	ld	a4,8(s0)
    800080ae:	47bd                	li	a5,15
    800080b0:	00f71463          	bne	a4,a5,800080b8 <tinst_tests+0xc2e>
    800080b4:	1280206f          	j	8000a1dc <tinst_tests+0x2d52>
    800080b8:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800080ba:	0ff0000f          	fence
    800080be:	4785                	li	a5,1
    800080c0:	00f41023          	sh	a5,0(s0)
    800080c4:	00035797          	auipc	a5,0x35
    800080c8:	f807b223          	sd	zero,-124(a5) # 8003d048 <excpt+0x38>
    800080cc:	0ff0000f          	fence
AMO_INSTRUCTION(amoxor_w, "amoxor.w", uint32_t);
    800080d0:	400197b7          	lui	a5,0x40019
    800080d4:	078a                	sll	a5,a5,0x2
    800080d6:	2097a4af          	amoxor.w	s1,s1,(a5)
    value = amoxor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    800080da:	00016617          	auipc	a2,0x16
    800080de:	64e60613          	add	a2,a2,1614 # 8001e728 <__func__.1+0x1f30>
    800080e2:	08200593          	li	a1,130
    800080e6:	00015517          	auipc	a0,0x15
    800080ea:	a1250513          	add	a0,a0,-1518 # 8001caf8 <__func__.1+0x300>
    800080ee:	675120ef          	jal	8001af62 <printf>
    800080f2:	00144783          	lbu	a5,1(s0)
    800080f6:	e399                	bnez	a5,800080fc <tinst_tests+0xc72>
    800080f8:	3380106f          	j	80009430 <tinst_tests+0x1fa6>
    800080fc:	6418                	ld	a4,8(s0)
    800080fe:	47bd                	li	a5,15
    80008100:	00015597          	auipc	a1,0x15
    80008104:	9d058593          	add	a1,a1,-1584 # 8001cad0 <__func__.1+0x2d8>
    80008108:	00f71463          	bne	a4,a5,80008110 <tinst_tests+0xc86>
    8000810c:	37d0106f          	j	80009c88 <tinst_tests+0x27fe>
    80008110:	00015517          	auipc	a0,0x15
    80008114:	a0050513          	add	a0,a0,-1536 # 8001cb10 <__func__.1+0x318>
    80008118:	64b120ef          	jal	8001af62 <printf>
    8000811c:	00144783          	lbu	a5,1(s0)
    80008120:	c799                	beqz	a5,8000812e <tinst_tests+0xca4>
    80008122:	6418                	ld	a4,8(s0)
    80008124:	47bd                	li	a5,15
    80008126:	00f71463          	bne	a4,a5,8000812e <tinst_tests+0xca4>
    8000812a:	1bb0106f          	j	80009ae4 <tinst_tests+0x265a>
    8000812e:	00015517          	auipc	a0,0x15
    80008132:	9ea50513          	add	a0,a0,-1558 # 8001cb18 <__func__.1+0x320>
    80008136:	62d120ef          	jal	8001af62 <printf>
    8000813a:	02900513          	li	a0,41
    8000813e:	4f7110ef          	jal	80019e34 <putchar>
    80008142:	4529                	li	a0,10
    80008144:	4f1110ef          	jal	80019e34 <putchar>
    80008148:	00090c63          	beqz	s2,80008160 <tinst_tests+0xcd6>
    8000814c:	00144783          	lbu	a5,1(s0)
    80008150:	c799                	beqz	a5,8000815e <tinst_tests+0xcd4>
    80008152:	6418                	ld	a4,8(s0)
    80008154:	47bd                	li	a5,15
    80008156:	00f71463          	bne	a4,a5,8000815e <tinst_tests+0xcd4>
    8000815a:	12a0206f          	j	8000a284 <tinst_tests+0x2dfa>
    8000815e:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
       TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008160:	0ff0000f          	fence
    80008164:	4785                	li	a5,1
    80008166:	00f41023          	sh	a5,0(s0)
    8000816a:	00035797          	auipc	a5,0x35
    8000816e:	ec07bf23          	sd	zero,-290(a5) # 8003d048 <excpt+0x38>
    80008172:	0ff0000f          	fence
AMO_INSTRUCTION(amoand_w, "amoand.w", uint32_t);
    80008176:	400197b7          	lui	a5,0x40019
    8000817a:	078a                	sll	a5,a5,0x2
    8000817c:	6097a4af          	amoand.w	s1,s1,(a5)
    value = amoand_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    80008180:	00016617          	auipc	a2,0x16
    80008184:	5e860613          	add	a2,a2,1512 # 8001e768 <__func__.1+0x1f70>
    80008188:	08200593          	li	a1,130
    8000818c:	00015517          	auipc	a0,0x15
    80008190:	96c50513          	add	a0,a0,-1684 # 8001caf8 <__func__.1+0x300>
    80008194:	5cf120ef          	jal	8001af62 <printf>
    80008198:	00144783          	lbu	a5,1(s0)
    8000819c:	e399                	bnez	a5,800081a2 <tinst_tests+0xd18>
    8000819e:	2da0106f          	j	80009478 <tinst_tests+0x1fee>
    800081a2:	6418                	ld	a4,8(s0)
    800081a4:	47bd                	li	a5,15
    800081a6:	00015597          	auipc	a1,0x15
    800081aa:	92a58593          	add	a1,a1,-1750 # 8001cad0 <__func__.1+0x2d8>
    800081ae:	00f71463          	bne	a4,a5,800081b6 <tinst_tests+0xd2c>
    800081b2:	37b0106f          	j	80009d2c <tinst_tests+0x28a2>
    800081b6:	00015517          	auipc	a0,0x15
    800081ba:	95a50513          	add	a0,a0,-1702 # 8001cb10 <__func__.1+0x318>
    800081be:	5a5120ef          	jal	8001af62 <printf>
    800081c2:	00144783          	lbu	a5,1(s0)
    800081c6:	c799                	beqz	a5,800081d4 <tinst_tests+0xd4a>
    800081c8:	6418                	ld	a4,8(s0)
    800081ca:	47bd                	li	a5,15
    800081cc:	00f71463          	bne	a4,a5,800081d4 <tinst_tests+0xd4a>
    800081d0:	15b0106f          	j	80009b2a <tinst_tests+0x26a0>
    800081d4:	00015517          	auipc	a0,0x15
    800081d8:	94450513          	add	a0,a0,-1724 # 8001cb18 <__func__.1+0x320>
    800081dc:	587120ef          	jal	8001af62 <printf>
    800081e0:	02900513          	li	a0,41
    800081e4:	451110ef          	jal	80019e34 <putchar>
    800081e8:	4529                	li	a0,10
    800081ea:	44b110ef          	jal	80019e34 <putchar>
    800081ee:	00090c63          	beqz	s2,80008206 <tinst_tests+0xd7c>
    800081f2:	00144783          	lbu	a5,1(s0)
    800081f6:	c799                	beqz	a5,80008204 <tinst_tests+0xd7a>
    800081f8:	6418                	ld	a4,8(s0)
    800081fa:	47bd                	li	a5,15
    800081fc:	00f71463          	bne	a4,a5,80008204 <tinst_tests+0xd7a>
    80008200:	1000206f          	j	8000a300 <tinst_tests+0x2e76>
    80008204:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008206:	0ff0000f          	fence
    8000820a:	4785                	li	a5,1
    8000820c:	00f41023          	sh	a5,0(s0)
    80008210:	00035797          	auipc	a5,0x35
    80008214:	e207bc23          	sd	zero,-456(a5) # 8003d048 <excpt+0x38>
    80008218:	0ff0000f          	fence
AMO_INSTRUCTION(amoor_w, "amoor.w", uint32_t);
    8000821c:	400197b7          	lui	a5,0x40019
    80008220:	078a                	sll	a5,a5,0x2
    80008222:	4097a4af          	amoor.w	s1,s1,(a5)
    value = amoor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    80008226:	00016617          	auipc	a2,0x16
    8000822a:	58260613          	add	a2,a2,1410 # 8001e7a8 <__func__.1+0x1fb0>
    8000822e:	08200593          	li	a1,130
    80008232:	00015517          	auipc	a0,0x15
    80008236:	8c650513          	add	a0,a0,-1850 # 8001caf8 <__func__.1+0x300>
    8000823a:	529120ef          	jal	8001af62 <printf>
    8000823e:	00144783          	lbu	a5,1(s0)
    80008242:	e399                	bnez	a5,80008248 <tinst_tests+0xdbe>
    80008244:	27c0106f          	j	800094c0 <tinst_tests+0x2036>
    80008248:	6418                	ld	a4,8(s0)
    8000824a:	47bd                	li	a5,15
    8000824c:	00015597          	auipc	a1,0x15
    80008250:	88458593          	add	a1,a1,-1916 # 8001cad0 <__func__.1+0x2d8>
    80008254:	00f71463          	bne	a4,a5,8000825c <tinst_tests+0xdd2>
    80008258:	3790106f          	j	80009dd0 <tinst_tests+0x2946>
    8000825c:	00015517          	auipc	a0,0x15
    80008260:	8b450513          	add	a0,a0,-1868 # 8001cb10 <__func__.1+0x318>
    80008264:	4ff120ef          	jal	8001af62 <printf>
    80008268:	00144783          	lbu	a5,1(s0)
    8000826c:	c799                	beqz	a5,8000827a <tinst_tests+0xdf0>
    8000826e:	6418                	ld	a4,8(s0)
    80008270:	47bd                	li	a5,15
    80008272:	00f71463          	bne	a4,a5,8000827a <tinst_tests+0xdf0>
    80008276:	0fb0106f          	j	80009b70 <tinst_tests+0x26e6>
    8000827a:	00015517          	auipc	a0,0x15
    8000827e:	89e50513          	add	a0,a0,-1890 # 8001cb18 <__func__.1+0x320>
    80008282:	4e1120ef          	jal	8001af62 <printf>
    80008286:	02900513          	li	a0,41
    8000828a:	3ab110ef          	jal	80019e34 <putchar>
    8000828e:	4529                	li	a0,10
    80008290:	3a5110ef          	jal	80019e34 <putchar>
    80008294:	00090c63          	beqz	s2,800082ac <tinst_tests+0xe22>
    80008298:	00144783          	lbu	a5,1(s0)
    8000829c:	c799                	beqz	a5,800082aa <tinst_tests+0xe20>
    8000829e:	6418                	ld	a4,8(s0)
    800082a0:	47bd                	li	a5,15
    800082a2:	00f71463          	bne	a4,a5,800082aa <tinst_tests+0xe20>
    800082a6:	0d60206f          	j	8000a37c <tinst_tests+0x2ef2>
    800082aa:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800082ac:	0ff0000f          	fence
    800082b0:	4785                	li	a5,1
    800082b2:	00f41023          	sh	a5,0(s0)
    800082b6:	00035797          	auipc	a5,0x35
    800082ba:	d807b923          	sd	zero,-622(a5) # 8003d048 <excpt+0x38>
    800082be:	0ff0000f          	fence
AMO_INSTRUCTION(amomin_w, "amomin.w", uint32_t);
    800082c2:	400197b7          	lui	a5,0x40019
    800082c6:	078a                	sll	a5,a5,0x2
    800082c8:	8097a4af          	amomin.w	s1,s1,(a5)
    value = amomin_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    800082cc:	00016617          	auipc	a2,0x16
    800082d0:	51c60613          	add	a2,a2,1308 # 8001e7e8 <__func__.1+0x1ff0>
    800082d4:	08200593          	li	a1,130
    800082d8:	00015517          	auipc	a0,0x15
    800082dc:	82050513          	add	a0,a0,-2016 # 8001caf8 <__func__.1+0x300>
    800082e0:	483120ef          	jal	8001af62 <printf>
    800082e4:	00144783          	lbu	a5,1(s0)
    800082e8:	e399                	bnez	a5,800082ee <tinst_tests+0xe64>
    800082ea:	2760106f          	j	80009560 <tinst_tests+0x20d6>
    800082ee:	6418                	ld	a4,8(s0)
    800082f0:	47bd                	li	a5,15
    800082f2:	00014597          	auipc	a1,0x14
    800082f6:	7de58593          	add	a1,a1,2014 # 8001cad0 <__func__.1+0x2d8>
    800082fa:	00f71463          	bne	a4,a5,80008302 <tinst_tests+0xe78>
    800082fe:	3770106f          	j	80009e74 <tinst_tests+0x29ea>
    80008302:	00015517          	auipc	a0,0x15
    80008306:	80e50513          	add	a0,a0,-2034 # 8001cb10 <__func__.1+0x318>
    8000830a:	459120ef          	jal	8001af62 <printf>
    8000830e:	00144783          	lbu	a5,1(s0)
    80008312:	c799                	beqz	a5,80008320 <tinst_tests+0xe96>
    80008314:	6418                	ld	a4,8(s0)
    80008316:	47bd                	li	a5,15
    80008318:	00f71463          	bne	a4,a5,80008320 <tinst_tests+0xe96>
    8000831c:	09b0106f          	j	80009bb6 <tinst_tests+0x272c>
    80008320:	00014517          	auipc	a0,0x14
    80008324:	7f850513          	add	a0,a0,2040 # 8001cb18 <__func__.1+0x320>
    80008328:	43b120ef          	jal	8001af62 <printf>
    8000832c:	02900513          	li	a0,41
    80008330:	305110ef          	jal	80019e34 <putchar>
    80008334:	4529                	li	a0,10
    80008336:	2ff110ef          	jal	80019e34 <putchar>
    8000833a:	00090c63          	beqz	s2,80008352 <tinst_tests+0xec8>
    8000833e:	00144783          	lbu	a5,1(s0)
    80008342:	c799                	beqz	a5,80008350 <tinst_tests+0xec6>
    80008344:	6418                	ld	a4,8(s0)
    80008346:	47bd                	li	a5,15
    80008348:	00f71463          	bne	a4,a5,80008350 <tinst_tests+0xec6>
    8000834c:	0780206f          	j	8000a3c4 <tinst_tests+0x2f3a>
    80008350:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008352:	0ff0000f          	fence
    80008356:	4785                	li	a5,1
    80008358:	00f41023          	sh	a5,0(s0)
    8000835c:	00035797          	auipc	a5,0x35
    80008360:	ce07b623          	sd	zero,-788(a5) # 8003d048 <excpt+0x38>
    80008364:	0ff0000f          	fence
AMO_INSTRUCTION(amomax_w, "amomax.w", uint32_t);
    80008368:	400197b7          	lui	a5,0x40019
    8000836c:	078a                	sll	a5,a5,0x2
    8000836e:	a097a4af          	amomax.w	s1,s1,(a5)
    value = amomax_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    80008372:	00016617          	auipc	a2,0x16
    80008376:	4b660613          	add	a2,a2,1206 # 8001e828 <__func__.1+0x2030>
    8000837a:	08200593          	li	a1,130
    8000837e:	00014517          	auipc	a0,0x14
    80008382:	77a50513          	add	a0,a0,1914 # 8001caf8 <__func__.1+0x300>
    80008386:	3dd120ef          	jal	8001af62 <printf>
    8000838a:	00144783          	lbu	a5,1(s0)
    8000838e:	e399                	bnez	a5,80008394 <tinst_tests+0xf0a>
    80008390:	2760106f          	j	80009606 <tinst_tests+0x217c>
    80008394:	6418                	ld	a4,8(s0)
    80008396:	47bd                	li	a5,15
    80008398:	00014597          	auipc	a1,0x14
    8000839c:	73858593          	add	a1,a1,1848 # 8001cad0 <__func__.1+0x2d8>
    800083a0:	00f71463          	bne	a4,a5,800083a8 <tinst_tests+0xf1e>
    800083a4:	2700206f          	j	8000a614 <tinst_tests+0x318a>
    800083a8:	00014517          	auipc	a0,0x14
    800083ac:	76850513          	add	a0,a0,1896 # 8001cb10 <__func__.1+0x318>
    800083b0:	3b3120ef          	jal	8001af62 <printf>
    800083b4:	00144783          	lbu	a5,1(s0)
    800083b8:	c799                	beqz	a5,800083c6 <tinst_tests+0xf3c>
    800083ba:	6418                	ld	a4,8(s0)
    800083bc:	47bd                	li	a5,15
    800083be:	00f71463          	bne	a4,a5,800083c6 <tinst_tests+0xf3c>
    800083c2:	03b0106f          	j	80009bfc <tinst_tests+0x2772>
    800083c6:	00014517          	auipc	a0,0x14
    800083ca:	75250513          	add	a0,a0,1874 # 8001cb18 <__func__.1+0x320>
    800083ce:	395120ef          	jal	8001af62 <printf>
    800083d2:	02900513          	li	a0,41
    800083d6:	25f110ef          	jal	80019e34 <putchar>
    800083da:	4529                	li	a0,10
    800083dc:	259110ef          	jal	80019e34 <putchar>
    800083e0:	00090c63          	beqz	s2,800083f8 <tinst_tests+0xf6e>
    800083e4:	00144783          	lbu	a5,1(s0)
    800083e8:	c799                	beqz	a5,800083f6 <tinst_tests+0xf6c>
    800083ea:	6418                	ld	a4,8(s0)
    800083ec:	47bd                	li	a5,15
    800083ee:	00f71463          	bne	a4,a5,800083f6 <tinst_tests+0xf6c>
    800083f2:	01c0206f          	j	8000a40e <tinst_tests+0x2f84>
    800083f6:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800083f8:	0ff0000f          	fence
    800083fc:	4785                	li	a5,1
    800083fe:	00f41023          	sh	a5,0(s0)
    80008402:	00035797          	auipc	a5,0x35
    80008406:	c407b323          	sd	zero,-954(a5) # 8003d048 <excpt+0x38>
    8000840a:	0ff0000f          	fence
AMO_INSTRUCTION(amominu_w, "amominu.w", uint32_t);
    8000840e:	400197b7          	lui	a5,0x40019
    80008412:	078a                	sll	a5,a5,0x2
    80008414:	c097a4af          	amominu.w	s1,s1,(a5)
    value = amominu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    80008418:	00016617          	auipc	a2,0x16
    8000841c:	45060613          	add	a2,a2,1104 # 8001e868 <__func__.1+0x2070>
    80008420:	08200593          	li	a1,130
    80008424:	00014517          	auipc	a0,0x14
    80008428:	6d450513          	add	a0,a0,1748 # 8001caf8 <__func__.1+0x300>
    8000842c:	337120ef          	jal	8001af62 <printf>
    80008430:	00144783          	lbu	a5,1(s0)
    80008434:	e399                	bnez	a5,8000843a <tinst_tests+0xfb0>
    80008436:	2760106f          	j	800096ac <tinst_tests+0x2222>
    8000843a:	6418                	ld	a4,8(s0)
    8000843c:	47bd                	li	a5,15
    8000843e:	00014597          	auipc	a1,0x14
    80008442:	69258593          	add	a1,a1,1682 # 8001cad0 <__func__.1+0x2d8>
    80008446:	00f71463          	bne	a4,a5,8000844e <tinst_tests+0xfc4>
    8000844a:	2720206f          	j	8000a6bc <tinst_tests+0x3232>
    8000844e:	00014517          	auipc	a0,0x14
    80008452:	6c250513          	add	a0,a0,1730 # 8001cb10 <__func__.1+0x318>
    80008456:	30d120ef          	jal	8001af62 <printf>
    8000845a:	00144783          	lbu	a5,1(s0)
    8000845e:	c799                	beqz	a5,8000846c <tinst_tests+0xfe2>
    80008460:	6418                	ld	a4,8(s0)
    80008462:	47bd                	li	a5,15
    80008464:	00f71463          	bne	a4,a5,8000846c <tinst_tests+0xfe2>
    80008468:	7da0106f          	j	80009c42 <tinst_tests+0x27b8>
    8000846c:	00014517          	auipc	a0,0x14
    80008470:	6ac50513          	add	a0,a0,1708 # 8001cb18 <__func__.1+0x320>
    80008474:	2ef120ef          	jal	8001af62 <printf>
    80008478:	02900513          	li	a0,41
    8000847c:	1b9110ef          	jal	80019e34 <putchar>
    80008480:	4529                	li	a0,10
    80008482:	1b3110ef          	jal	80019e34 <putchar>
    80008486:	00090c63          	beqz	s2,8000849e <tinst_tests+0x1014>
    8000848a:	00144783          	lbu	a5,1(s0)
    8000848e:	c799                	beqz	a5,8000849c <tinst_tests+0x1012>
    80008490:	6418                	ld	a4,8(s0)
    80008492:	47bd                	li	a5,15
    80008494:	00f71463          	bne	a4,a5,8000849c <tinst_tests+0x1012>
    80008498:	7c10106f          	j	8000a458 <tinst_tests+0x2fce>
    8000849c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000849e:	0ff0000f          	fence
    800084a2:	4785                	li	a5,1
    800084a4:	00f41023          	sh	a5,0(s0)
    800084a8:	00035797          	auipc	a5,0x35
    800084ac:	ba07b023          	sd	zero,-1120(a5) # 8003d048 <excpt+0x38>
    800084b0:	0ff0000f          	fence
AMO_INSTRUCTION(amomaxu_w, "amomaxu.w", uint32_t);
    800084b4:	400197b7          	lui	a5,0x40019
    800084b8:	078a                	sll	a5,a5,0x2
    800084ba:	e097a4af          	amomaxu.w	s1,s1,(a5)
    value = amomaxu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    800084be:	00016617          	auipc	a2,0x16
    800084c2:	3ea60613          	add	a2,a2,1002 # 8001e8a8 <__func__.1+0x20b0>
    800084c6:	08200593          	li	a1,130
    800084ca:	00014517          	auipc	a0,0x14
    800084ce:	62e50513          	add	a0,a0,1582 # 8001caf8 <__func__.1+0x300>
    800084d2:	291120ef          	jal	8001af62 <printf>
    800084d6:	00144783          	lbu	a5,1(s0)
    value = amomaxu_w(vaddr_f,value);
    800084da:	1482                	sll	s1,s1,0x20
    800084dc:	9081                	srl	s1,s1,0x20
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    800084de:	e399                	bnez	a5,800084e4 <tinst_tests+0x105a>
    800084e0:	2720106f          	j	80009752 <tinst_tests+0x22c8>
    800084e4:	6418                	ld	a4,8(s0)
    800084e6:	47bd                	li	a5,15
    800084e8:	00014597          	auipc	a1,0x14
    800084ec:	5e858593          	add	a1,a1,1512 # 8001cad0 <__func__.1+0x2d8>
    800084f0:	00f71463          	bne	a4,a5,800084f8 <tinst_tests+0x106e>
    800084f4:	2700206f          	j	8000a764 <tinst_tests+0x32da>
    800084f8:	00014517          	auipc	a0,0x14
    800084fc:	61850513          	add	a0,a0,1560 # 8001cb10 <__func__.1+0x318>
    80008500:	263120ef          	jal	8001af62 <printf>
    80008504:	00144783          	lbu	a5,1(s0)
    80008508:	c799                	beqz	a5,80008516 <tinst_tests+0x108c>
    8000850a:	6418                	ld	a4,8(s0)
    8000850c:	47bd                	li	a5,15
    8000850e:	00f71463          	bne	a4,a5,80008516 <tinst_tests+0x108c>
    80008512:	7d40106f          	j	80009ce6 <tinst_tests+0x285c>
    80008516:	00014517          	auipc	a0,0x14
    8000851a:	60250513          	add	a0,a0,1538 # 8001cb18 <__func__.1+0x320>
    8000851e:	245120ef          	jal	8001af62 <printf>
    80008522:	02900513          	li	a0,41
    80008526:	10f110ef          	jal	80019e34 <putchar>
    8000852a:	4529                	li	a0,10
    8000852c:	109110ef          	jal	80019e34 <putchar>
    80008530:	00090c63          	beqz	s2,80008548 <tinst_tests+0x10be>
    80008534:	00144783          	lbu	a5,1(s0)
    80008538:	c799                	beqz	a5,80008546 <tinst_tests+0x10bc>
    8000853a:	6418                	ld	a4,8(s0)
    8000853c:	47bd                	li	a5,15
    8000853e:	00f71463          	bne	a4,a5,80008546 <tinst_tests+0x10bc>
    80008542:	7610106f          	j	8000a4a2 <tinst_tests+0x3018>
    80008546:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008548:	0ff0000f          	fence
    8000854c:	4785                	li	a5,1
    8000854e:	00f41023          	sh	a5,0(s0)
    80008552:	00035797          	auipc	a5,0x35
    80008556:	ae07bb23          	sd	zero,-1290(a5) # 8003d048 <excpt+0x38>
    8000855a:	0ff0000f          	fence
AMO_INSTRUCTION(amoswap_d, "amoswap.d", uint64_t);
    8000855e:	400197b7          	lui	a5,0x40019
    80008562:	078a                	sll	a5,a5,0x2
    80008564:	0897b4af          	amoswap.d	s1,s1,(a5)
    value = amoswap_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    80008568:	00016617          	auipc	a2,0x16
    8000856c:	38060613          	add	a2,a2,896 # 8001e8e8 <__func__.1+0x20f0>
    80008570:	08200593          	li	a1,130
    80008574:	00014517          	auipc	a0,0x14
    80008578:	58450513          	add	a0,a0,1412 # 8001caf8 <__func__.1+0x300>
    8000857c:	1e7120ef          	jal	8001af62 <printf>
    80008580:	00144783          	lbu	a5,1(s0)
    80008584:	e399                	bnez	a5,8000858a <tinst_tests+0x1100>
    80008586:	2720106f          	j	800097f8 <tinst_tests+0x236e>
    8000858a:	6418                	ld	a4,8(s0)
    8000858c:	47bd                	li	a5,15
    8000858e:	00014597          	auipc	a1,0x14
    80008592:	54258593          	add	a1,a1,1346 # 8001cad0 <__func__.1+0x2d8>
    80008596:	00f71463          	bne	a4,a5,8000859e <tinst_tests+0x1114>
    8000859a:	2720206f          	j	8000a80c <tinst_tests+0x3382>
    8000859e:	00014517          	auipc	a0,0x14
    800085a2:	57250513          	add	a0,a0,1394 # 8001cb10 <__func__.1+0x318>
    800085a6:	1bd120ef          	jal	8001af62 <printf>
    800085aa:	00144783          	lbu	a5,1(s0)
    800085ae:	c799                	beqz	a5,800085bc <tinst_tests+0x1132>
    800085b0:	6418                	ld	a4,8(s0)
    800085b2:	47bd                	li	a5,15
    800085b4:	00f71463          	bne	a4,a5,800085bc <tinst_tests+0x1132>
    800085b8:	7d20106f          	j	80009d8a <tinst_tests+0x2900>
    800085bc:	00014517          	auipc	a0,0x14
    800085c0:	55c50513          	add	a0,a0,1372 # 8001cb18 <__func__.1+0x320>
    800085c4:	19f120ef          	jal	8001af62 <printf>
    800085c8:	02900513          	li	a0,41
    800085cc:	069110ef          	jal	80019e34 <putchar>
    800085d0:	4529                	li	a0,10
    800085d2:	063110ef          	jal	80019e34 <putchar>
    800085d6:	00090c63          	beqz	s2,800085ee <tinst_tests+0x1164>
    800085da:	00144783          	lbu	a5,1(s0)
    800085de:	c799                	beqz	a5,800085ec <tinst_tests+0x1162>
    800085e0:	6418                	ld	a4,8(s0)
    800085e2:	47bd                	li	a5,15
    800085e4:	00f71463          	bne	a4,a5,800085ec <tinst_tests+0x1162>
    800085e8:	7050106f          	j	8000a4ec <tinst_tests+0x3062>
    800085ec:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800085ee:	0ff0000f          	fence
    800085f2:	4785                	li	a5,1
    800085f4:	00f41023          	sh	a5,0(s0)
    800085f8:	00035797          	auipc	a5,0x35
    800085fc:	a407b823          	sd	zero,-1456(a5) # 8003d048 <excpt+0x38>
    80008600:	0ff0000f          	fence
AMO_INSTRUCTION(amoadd_d, "amoadd.d", uint64_t);
    80008604:	400197b7          	lui	a5,0x40019
    80008608:	078a                	sll	a5,a5,0x2
    8000860a:	0097b4af          	amoadd.d	s1,s1,(a5)
    value = amoadd_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000860e:	00016617          	auipc	a2,0x16
    80008612:	31a60613          	add	a2,a2,794 # 8001e928 <__func__.1+0x2130>
    80008616:	08200593          	li	a1,130
    8000861a:	00014517          	auipc	a0,0x14
    8000861e:	4de50513          	add	a0,a0,1246 # 8001caf8 <__func__.1+0x300>
    80008622:	141120ef          	jal	8001af62 <printf>
    80008626:	00144783          	lbu	a5,1(s0)
    8000862a:	e399                	bnez	a5,80008630 <tinst_tests+0x11a6>
    8000862c:	25e0106f          	j	8000988a <tinst_tests+0x2400>
    80008630:	6418                	ld	a4,8(s0)
    80008632:	47bd                	li	a5,15
    80008634:	00014597          	auipc	a1,0x14
    80008638:	49c58593          	add	a1,a1,1180 # 8001cad0 <__func__.1+0x2d8>
    8000863c:	00f71463          	bne	a4,a5,80008644 <tinst_tests+0x11ba>
    80008640:	2740206f          	j	8000a8b4 <tinst_tests+0x342a>
    80008644:	00014517          	auipc	a0,0x14
    80008648:	4cc50513          	add	a0,a0,1228 # 8001cb10 <__func__.1+0x318>
    8000864c:	117120ef          	jal	8001af62 <printf>
    80008650:	00144783          	lbu	a5,1(s0)
    80008654:	c799                	beqz	a5,80008662 <tinst_tests+0x11d8>
    80008656:	6418                	ld	a4,8(s0)
    80008658:	47bd                	li	a5,15
    8000865a:	00f71463          	bne	a4,a5,80008662 <tinst_tests+0x11d8>
    8000865e:	7d00106f          	j	80009e2e <tinst_tests+0x29a4>
    80008662:	00014517          	auipc	a0,0x14
    80008666:	4b650513          	add	a0,a0,1206 # 8001cb18 <__func__.1+0x320>
    8000866a:	0f9120ef          	jal	8001af62 <printf>
    8000866e:	02900513          	li	a0,41
    80008672:	7c2110ef          	jal	80019e34 <putchar>
    80008676:	4529                	li	a0,10
    80008678:	7bc110ef          	jal	80019e34 <putchar>
    8000867c:	00090c63          	beqz	s2,80008694 <tinst_tests+0x120a>
    80008680:	00144783          	lbu	a5,1(s0)
    80008684:	c799                	beqz	a5,80008692 <tinst_tests+0x1208>
    80008686:	6418                	ld	a4,8(s0)
    80008688:	47bd                	li	a5,15
    8000868a:	00f71463          	bne	a4,a5,80008692 <tinst_tests+0x1208>
    8000868e:	6a90106f          	j	8000a536 <tinst_tests+0x30ac>
    80008692:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008694:	0ff0000f          	fence
    80008698:	4785                	li	a5,1
    8000869a:	00f41023          	sh	a5,0(s0)
    8000869e:	00035797          	auipc	a5,0x35
    800086a2:	9a07b523          	sd	zero,-1622(a5) # 8003d048 <excpt+0x38>
    800086a6:	0ff0000f          	fence
AMO_INSTRUCTION(amoxor_d, "amoxor.d", uint64_t);
    800086aa:	400197b7          	lui	a5,0x40019
    800086ae:	078a                	sll	a5,a5,0x2
    800086b0:	2097b4af          	amoxor.d	s1,s1,(a5)
    value = amoxor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    800086b4:	00016617          	auipc	a2,0x16
    800086b8:	2b460613          	add	a2,a2,692 # 8001e968 <__func__.1+0x2170>
    800086bc:	08200593          	li	a1,130
    800086c0:	00014517          	auipc	a0,0x14
    800086c4:	43850513          	add	a0,a0,1080 # 8001caf8 <__func__.1+0x300>
    800086c8:	09b120ef          	jal	8001af62 <printf>
    800086cc:	00144783          	lbu	a5,1(s0)
    800086d0:	e399                	bnez	a5,800086d6 <tinst_tests+0x124c>
    800086d2:	2540106f          	j	80009926 <tinst_tests+0x249c>
    800086d6:	6418                	ld	a4,8(s0)
    800086d8:	47bd                	li	a5,15
    800086da:	00014597          	auipc	a1,0x14
    800086de:	3f658593          	add	a1,a1,1014 # 8001cad0 <__func__.1+0x2d8>
    800086e2:	00f71463          	bne	a4,a5,800086ea <tinst_tests+0x1260>
    800086e6:	2760206f          	j	8000a95c <tinst_tests+0x34d2>
    800086ea:	00014517          	auipc	a0,0x14
    800086ee:	42650513          	add	a0,a0,1062 # 8001cb10 <__func__.1+0x318>
    800086f2:	071120ef          	jal	8001af62 <printf>
    800086f6:	00144783          	lbu	a5,1(s0)
    800086fa:	c799                	beqz	a5,80008708 <tinst_tests+0x127e>
    800086fc:	6418                	ld	a4,8(s0)
    800086fe:	47bd                	li	a5,15
    80008700:	00f71463          	bne	a4,a5,80008708 <tinst_tests+0x127e>
    80008704:	7ce0106f          	j	80009ed2 <tinst_tests+0x2a48>
    80008708:	00014517          	auipc	a0,0x14
    8000870c:	41050513          	add	a0,a0,1040 # 8001cb18 <__func__.1+0x320>
    80008710:	053120ef          	jal	8001af62 <printf>
    80008714:	02900513          	li	a0,41
    80008718:	71c110ef          	jal	80019e34 <putchar>
    8000871c:	4529                	li	a0,10
    8000871e:	716110ef          	jal	80019e34 <putchar>
    80008722:	00090c63          	beqz	s2,8000873a <tinst_tests+0x12b0>
    80008726:	00144783          	lbu	a5,1(s0)
    8000872a:	c799                	beqz	a5,80008738 <tinst_tests+0x12ae>
    8000872c:	6418                	ld	a4,8(s0)
    8000872e:	47bd                	li	a5,15
    80008730:	00f71463          	bne	a4,a5,80008738 <tinst_tests+0x12ae>
    80008734:	64d0106f          	j	8000a580 <tinst_tests+0x30f6>
    80008738:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000873a:	0ff0000f          	fence
    8000873e:	4785                	li	a5,1
    80008740:	00f41023          	sh	a5,0(s0)
    80008744:	00035797          	auipc	a5,0x35
    80008748:	9007b223          	sd	zero,-1788(a5) # 8003d048 <excpt+0x38>
    8000874c:	0ff0000f          	fence
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    80008750:	400197b7          	lui	a5,0x40019
    80008754:	078a                	sll	a5,a5,0x2
    80008756:	6097b4af          	amoand.d	s1,s1,(a5)
    value = amoand_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    8000875a:	00016617          	auipc	a2,0x16
    8000875e:	24e60613          	add	a2,a2,590 # 8001e9a8 <__func__.1+0x21b0>
    80008762:	08200593          	li	a1,130
    80008766:	00014517          	auipc	a0,0x14
    8000876a:	39250513          	add	a0,a0,914 # 8001caf8 <__func__.1+0x300>
    8000876e:	7f4120ef          	jal	8001af62 <printf>
    80008772:	00144783          	lbu	a5,1(s0)
    80008776:	e399                	bnez	a5,8000877c <tinst_tests+0x12f2>
    80008778:	24e0106f          	j	800099c6 <tinst_tests+0x253c>
    8000877c:	6418                	ld	a4,8(s0)
    8000877e:	47bd                	li	a5,15
    80008780:	00014597          	auipc	a1,0x14
    80008784:	35058593          	add	a1,a1,848 # 8001cad0 <__func__.1+0x2d8>
    80008788:	00f71463          	bne	a4,a5,80008790 <tinst_tests+0x1306>
    8000878c:	2780206f          	j	8000aa04 <tinst_tests+0x357a>
    80008790:	00014517          	auipc	a0,0x14
    80008794:	38050513          	add	a0,a0,896 # 8001cb10 <__func__.1+0x318>
    80008798:	7ca120ef          	jal	8001af62 <printf>
    8000879c:	00144783          	lbu	a5,1(s0)
    800087a0:	c799                	beqz	a5,800087ae <tinst_tests+0x1324>
    800087a2:	6418                	ld	a4,8(s0)
    800087a4:	47bd                	li	a5,15
    800087a6:	00f71463          	bne	a4,a5,800087ae <tinst_tests+0x1324>
    800087aa:	6cb0106f          	j	8000a674 <tinst_tests+0x31ea>
    800087ae:	00014517          	auipc	a0,0x14
    800087b2:	36a50513          	add	a0,a0,874 # 8001cb18 <__func__.1+0x320>
    800087b6:	7ac120ef          	jal	8001af62 <printf>
    800087ba:	02900513          	li	a0,41
    800087be:	676110ef          	jal	80019e34 <putchar>
    800087c2:	4529                	li	a0,10
    800087c4:	670110ef          	jal	80019e34 <putchar>
    800087c8:	00090c63          	beqz	s2,800087e0 <tinst_tests+0x1356>
    800087cc:	00144783          	lbu	a5,1(s0)
    800087d0:	c799                	beqz	a5,800087de <tinst_tests+0x1354>
    800087d2:	6418                	ld	a4,8(s0)
    800087d4:	47bd                	li	a5,15
    800087d6:	00f71463          	bne	a4,a5,800087de <tinst_tests+0x1354>
    800087da:	5f10106f          	j	8000a5ca <tinst_tests+0x3140>
    800087de:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800087e0:	0ff0000f          	fence
    800087e4:	4785                	li	a5,1
    800087e6:	00f41023          	sh	a5,0(s0)
    800087ea:	00035797          	auipc	a5,0x35
    800087ee:	8407bf23          	sd	zero,-1954(a5) # 8003d048 <excpt+0x38>
    800087f2:	0ff0000f          	fence
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    800087f6:	400197b7          	lui	a5,0x40019
    800087fa:	078a                	sll	a5,a5,0x2
    800087fc:	4097b4af          	amoor.d	s1,s1,(a5)
    value = amoor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    80008800:	00016617          	auipc	a2,0x16
    80008804:	1e860613          	add	a2,a2,488 # 8001e9e8 <__func__.1+0x21f0>
    80008808:	08200593          	li	a1,130
    8000880c:	00014517          	auipc	a0,0x14
    80008810:	2ec50513          	add	a0,a0,748 # 8001caf8 <__func__.1+0x300>
    80008814:	74e120ef          	jal	8001af62 <printf>
    80008818:	00144783          	lbu	a5,1(s0)
    8000881c:	e399                	bnez	a5,80008822 <tinst_tests+0x1398>
    8000881e:	2440106f          	j	80009a62 <tinst_tests+0x25d8>
    80008822:	6418                	ld	a4,8(s0)
    80008824:	47bd                	li	a5,15
    80008826:	00014597          	auipc	a1,0x14
    8000882a:	2aa58593          	add	a1,a1,682 # 8001cad0 <__func__.1+0x2d8>
    8000882e:	00f71463          	bne	a4,a5,80008836 <tinst_tests+0x13ac>
    80008832:	2320206f          	j	8000aa64 <tinst_tests+0x35da>
    80008836:	00014517          	auipc	a0,0x14
    8000883a:	2da50513          	add	a0,a0,730 # 8001cb10 <__func__.1+0x318>
    8000883e:	724120ef          	jal	8001af62 <printf>
    80008842:	00144783          	lbu	a5,1(s0)
    80008846:	c799                	beqz	a5,80008854 <tinst_tests+0x13ca>
    80008848:	6418                	ld	a4,8(s0)
    8000884a:	47bd                	li	a5,15
    8000884c:	00f71463          	bne	a4,a5,80008854 <tinst_tests+0x13ca>
    80008850:	6cd0106f          	j	8000a71c <tinst_tests+0x3292>
    80008854:	00014517          	auipc	a0,0x14
    80008858:	2c450513          	add	a0,a0,708 # 8001cb18 <__func__.1+0x320>
    8000885c:	706120ef          	jal	8001af62 <printf>
    80008860:	02900513          	li	a0,41
    80008864:	5d0110ef          	jal	80019e34 <putchar>
    80008868:	4529                	li	a0,10
    8000886a:	5ca110ef          	jal	80019e34 <putchar>
    8000886e:	00090863          	beqz	s2,8000887e <tinst_tests+0x13f4>
    80008872:	00144783          	lbu	a5,1(s0)
    80008876:	c399                	beqz	a5,8000887c <tinst_tests+0x13f2>
    80008878:	6a00106f          	j	80009f18 <tinst_tests+0x2a8e>
    8000887c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000887e:	0ff0000f          	fence
    80008882:	4785                	li	a5,1
    80008884:	00f41023          	sh	a5,0(s0)
    80008888:	00034797          	auipc	a5,0x34
    8000888c:	7c07b023          	sd	zero,1984(a5) # 8003d048 <excpt+0x38>
    80008890:	0ff0000f          	fence
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    80008894:	400197b7          	lui	a5,0x40019
    80008898:	078a                	sll	a5,a5,0x2
    8000889a:	8097b4af          	amomin.d	s1,s1,(a5)
    value = amomin_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000889e:	00016617          	auipc	a2,0x16
    800088a2:	18a60613          	add	a2,a2,394 # 8001ea28 <__func__.1+0x2230>
    800088a6:	08200593          	li	a1,130
    800088aa:	00014517          	auipc	a0,0x14
    800088ae:	24e50513          	add	a0,a0,590 # 8001caf8 <__func__.1+0x300>
    800088b2:	6b0120ef          	jal	8001af62 <printf>
    800088b6:	00144783          	lbu	a5,1(s0)
    800088ba:	e399                	bnez	a5,800088c0 <tinst_tests+0x1436>
    800088bc:	1b20106f          	j	80009a6e <tinst_tests+0x25e4>
    800088c0:	6418                	ld	a4,8(s0)
    800088c2:	47bd                	li	a5,15
    800088c4:	00014597          	auipc	a1,0x14
    800088c8:	20c58593          	add	a1,a1,524 # 8001cad0 <__func__.1+0x2d8>
    800088cc:	00f71463          	bne	a4,a5,800088d4 <tinst_tests+0x144a>
    800088d0:	1f40206f          	j	8000aac4 <tinst_tests+0x363a>
    800088d4:	00014517          	auipc	a0,0x14
    800088d8:	23c50513          	add	a0,a0,572 # 8001cb10 <__func__.1+0x318>
    800088dc:	686120ef          	jal	8001af62 <printf>
    800088e0:	00144783          	lbu	a5,1(s0)
    800088e4:	c799                	beqz	a5,800088f2 <tinst_tests+0x1468>
    800088e6:	6418                	ld	a4,8(s0)
    800088e8:	47bd                	li	a5,15
    800088ea:	00f71463          	bne	a4,a5,800088f2 <tinst_tests+0x1468>
    800088ee:	6d70106f          	j	8000a7c4 <tinst_tests+0x333a>
    800088f2:	00014517          	auipc	a0,0x14
    800088f6:	22650513          	add	a0,a0,550 # 8001cb18 <__func__.1+0x320>
    800088fa:	668120ef          	jal	8001af62 <printf>
    800088fe:	02900513          	li	a0,41
    80008902:	532110ef          	jal	80019e34 <putchar>
    80008906:	4529                	li	a0,10
    80008908:	52c110ef          	jal	80019e34 <putchar>
    8000890c:	00090863          	beqz	s2,8000891c <tinst_tests+0x1492>
    80008910:	00144783          	lbu	a5,1(s0)
    80008914:	c399                	beqz	a5,8000891a <tinst_tests+0x1490>
    80008916:	6560106f          	j	80009f6c <tinst_tests+0x2ae2>
    8000891a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000891c:	0ff0000f          	fence
    80008920:	4785                	li	a5,1
    80008922:	00f41023          	sh	a5,0(s0)
    80008926:	00034797          	auipc	a5,0x34
    8000892a:	7207b123          	sd	zero,1826(a5) # 8003d048 <excpt+0x38>
    8000892e:	0ff0000f          	fence
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    80008932:	400197b7          	lui	a5,0x40019
    80008936:	078a                	sll	a5,a5,0x2
    80008938:	a097b4af          	amomax.d	s1,s1,(a5)
    value = amomax_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000893c:	00016617          	auipc	a2,0x16
    80008940:	12c60613          	add	a2,a2,300 # 8001ea68 <__func__.1+0x2270>
    80008944:	08200593          	li	a1,130
    80008948:	00014517          	auipc	a0,0x14
    8000894c:	1b050513          	add	a0,a0,432 # 8001caf8 <__func__.1+0x300>
    80008950:	612120ef          	jal	8001af62 <printf>
    80008954:	00144783          	lbu	a5,1(s0)
    80008958:	e399                	bnez	a5,8000895e <tinst_tests+0x14d4>
    8000895a:	1200106f          	j	80009a7a <tinst_tests+0x25f0>
    8000895e:	6418                	ld	a4,8(s0)
    80008960:	47bd                	li	a5,15
    80008962:	00014597          	auipc	a1,0x14
    80008966:	16e58593          	add	a1,a1,366 # 8001cad0 <__func__.1+0x2d8>
    8000896a:	00f71463          	bne	a4,a5,80008972 <tinst_tests+0x14e8>
    8000896e:	1b60206f          	j	8000ab24 <tinst_tests+0x369a>
    80008972:	00014517          	auipc	a0,0x14
    80008976:	19e50513          	add	a0,a0,414 # 8001cb10 <__func__.1+0x318>
    8000897a:	5e8120ef          	jal	8001af62 <printf>
    8000897e:	00144783          	lbu	a5,1(s0)
    80008982:	c799                	beqz	a5,80008990 <tinst_tests+0x1506>
    80008984:	6418                	ld	a4,8(s0)
    80008986:	47bd                	li	a5,15
    80008988:	00f71463          	bne	a4,a5,80008990 <tinst_tests+0x1506>
    8000898c:	6e10106f          	j	8000a86c <tinst_tests+0x33e2>
    80008990:	00014517          	auipc	a0,0x14
    80008994:	18850513          	add	a0,a0,392 # 8001cb18 <__func__.1+0x320>
    80008998:	5ca120ef          	jal	8001af62 <printf>
    8000899c:	02900513          	li	a0,41
    800089a0:	494110ef          	jal	80019e34 <putchar>
    800089a4:	4529                	li	a0,10
    800089a6:	48e110ef          	jal	80019e34 <putchar>
    800089aa:	00090863          	beqz	s2,800089ba <tinst_tests+0x1530>
    800089ae:	00144783          	lbu	a5,1(s0)
    800089b2:	c399                	beqz	a5,800089b8 <tinst_tests+0x152e>
    800089b4:	6380106f          	j	80009fec <tinst_tests+0x2b62>
    800089b8:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800089ba:	0ff0000f          	fence
    800089be:	4785                	li	a5,1
    800089c0:	00f41023          	sh	a5,0(s0)
    800089c4:	00034797          	auipc	a5,0x34
    800089c8:	6807b223          	sd	zero,1668(a5) # 8003d048 <excpt+0x38>
    800089cc:	0ff0000f          	fence
AMO_INSTRUCTION(amominu_d, "amominu.d", uint64_t);
    800089d0:	400197b7          	lui	a5,0x40019
    800089d4:	078a                	sll	a5,a5,0x2
    800089d6:	c097b4af          	amominu.d	s1,s1,(a5)
    value = amominu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    800089da:	00016617          	auipc	a2,0x16
    800089de:	0ce60613          	add	a2,a2,206 # 8001eaa8 <__func__.1+0x22b0>
    800089e2:	08200593          	li	a1,130
    800089e6:	00014517          	auipc	a0,0x14
    800089ea:	11250513          	add	a0,a0,274 # 8001caf8 <__func__.1+0x300>
    800089ee:	574120ef          	jal	8001af62 <printf>
    800089f2:	00144783          	lbu	a5,1(s0)
    800089f6:	e399                	bnez	a5,800089fc <tinst_tests+0x1572>
    800089f8:	08e0106f          	j	80009a86 <tinst_tests+0x25fc>
    800089fc:	6418                	ld	a4,8(s0)
    800089fe:	47bd                	li	a5,15
    80008a00:	00014597          	auipc	a1,0x14
    80008a04:	0d058593          	add	a1,a1,208 # 8001cad0 <__func__.1+0x2d8>
    80008a08:	00f71463          	bne	a4,a5,80008a10 <tinst_tests+0x1586>
    80008a0c:	1780206f          	j	8000ab84 <tinst_tests+0x36fa>
    80008a10:	00014517          	auipc	a0,0x14
    80008a14:	10050513          	add	a0,a0,256 # 8001cb10 <__func__.1+0x318>
    80008a18:	54a120ef          	jal	8001af62 <printf>
    80008a1c:	00144783          	lbu	a5,1(s0)
    80008a20:	c799                	beqz	a5,80008a2e <tinst_tests+0x15a4>
    80008a22:	6418                	ld	a4,8(s0)
    80008a24:	47bd                	li	a5,15
    80008a26:	00f71463          	bne	a4,a5,80008a2e <tinst_tests+0x15a4>
    80008a2a:	6eb0106f          	j	8000a914 <tinst_tests+0x348a>
    80008a2e:	00014517          	auipc	a0,0x14
    80008a32:	0ea50513          	add	a0,a0,234 # 8001cb18 <__func__.1+0x320>
    80008a36:	52c120ef          	jal	8001af62 <printf>
    80008a3a:	02900513          	li	a0,41
    80008a3e:	3f6110ef          	jal	80019e34 <putchar>
    80008a42:	4529                	li	a0,10
    80008a44:	3f0110ef          	jal	80019e34 <putchar>
    80008a48:	00090863          	beqz	s2,80008a58 <tinst_tests+0x15ce>
    80008a4c:	00144783          	lbu	a5,1(s0)
    80008a50:	c399                	beqz	a5,80008a56 <tinst_tests+0x15cc>
    80008a52:	5ee0106f          	j	8000a040 <tinst_tests+0x2bb6>
    80008a56:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008a58:	0ff0000f          	fence
    80008a5c:	4785                	li	a5,1
    80008a5e:	00f41023          	sh	a5,0(s0)
    80008a62:	00034797          	auipc	a5,0x34
    80008a66:	5e07b323          	sd	zero,1510(a5) # 8003d048 <excpt+0x38>
    80008a6a:	0ff0000f          	fence
AMO_INSTRUCTION(amomaxu_d, "amomaxu.d", uint64_t);
    80008a6e:	400197b7          	lui	a5,0x40019
    80008a72:	078a                	sll	a5,a5,0x2
    80008a74:	e097b4af          	amomaxu.d	s1,s1,(a5)
    value = amomaxu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    80008a78:	00016617          	auipc	a2,0x16
    80008a7c:	07060613          	add	a2,a2,112 # 8001eae8 <__func__.1+0x22f0>
    80008a80:	08200593          	li	a1,130
    80008a84:	00014517          	auipc	a0,0x14
    80008a88:	07450513          	add	a0,a0,116 # 8001caf8 <__func__.1+0x300>
    80008a8c:	4d6120ef          	jal	8001af62 <printf>
    80008a90:	00144783          	lbu	a5,1(s0)
    80008a94:	e399                	bnez	a5,80008a9a <tinst_tests+0x1610>
    80008a96:	0420106f          	j	80009ad8 <tinst_tests+0x264e>
    80008a9a:	6418                	ld	a4,8(s0)
    80008a9c:	47bd                	li	a5,15
    80008a9e:	00014597          	auipc	a1,0x14
    80008aa2:	03258593          	add	a1,a1,50 # 8001cad0 <__func__.1+0x2d8>
    80008aa6:	00f71463          	bne	a4,a5,80008aae <tinst_tests+0x1624>
    80008aaa:	13a0206f          	j	8000abe4 <tinst_tests+0x375a>
    80008aae:	00014517          	auipc	a0,0x14
    80008ab2:	06250513          	add	a0,a0,98 # 8001cb10 <__func__.1+0x318>
    80008ab6:	4ac120ef          	jal	8001af62 <printf>
    80008aba:	00144783          	lbu	a5,1(s0)
    80008abe:	c799                	beqz	a5,80008acc <tinst_tests+0x1642>
    80008ac0:	6418                	ld	a4,8(s0)
    80008ac2:	47bd                	li	a5,15
    80008ac4:	00f71463          	bne	a4,a5,80008acc <tinst_tests+0x1642>
    80008ac8:	6f50106f          	j	8000a9bc <tinst_tests+0x3532>
    80008acc:	00014517          	auipc	a0,0x14
    80008ad0:	04c50513          	add	a0,a0,76 # 8001cb18 <__func__.1+0x320>
    80008ad4:	48e120ef          	jal	8001af62 <printf>
    80008ad8:	02900513          	li	a0,41
    80008adc:	358110ef          	jal	80019e34 <putchar>
    80008ae0:	4529                	li	a0,10
    80008ae2:	352110ef          	jal	80019e34 <putchar>
    80008ae6:	04090e63          	beqz	s2,80008b42 <tinst_tests+0x16b8>
    80008aea:	00144483          	lbu	s1,1(s0)
    80008aee:	c8b9                	beqz	s1,80008b44 <tinst_tests+0x16ba>
    80008af0:	6418                	ld	a4,8(s0)
    80008af2:	47bd                	li	a5,15
    80008af4:	04f71763          	bne	a4,a5,80008b42 <tinst_tests+0x16b8>
    80008af8:	701c                	ld	a5,32(s0)
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_END();
    80008afa:	00014597          	auipc	a1,0x14
    80008afe:	fc658593          	add	a1,a1,-58 # 8001cac0 <__func__.1+0x2c8>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    80008b02:	c7a9                	beqz	a5,80008b4c <tinst_tests+0x16c2>
    80008b04:	6814                	ld	a3,16(s0)

static inline uint32_t read_instruction(uintptr_t addr) {

    uint32_t instruction = 0;

    if((addr & 0b1) != 0) {
    80008b06:	0016f713          	and	a4,a3,1
    80008b0a:	0a071ae3          	bnez	a4,800093be <tinst_tests+0x1f34>
        ERROR("trying to read unaligned instruction (%s, %d)", __func__, __LINE__);
    }

    instruction = *((uint16_t*)addr);
    80008b0e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80008b12:	460d                	li	a2,3
    80008b14:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    80008b18:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80008b1a:	00c59863          	bne	a1,a2,80008b2a <tinst_tests+0x16a0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80008b1e:	0026d683          	lhu	a3,2(a3)
    80008b22:	0106969b          	sllw	a3,a3,0x10
    80008b26:	8f55                	or	a4,a4,a3
    80008b28:	2701                	sext.w	a4,a4
    80008b2a:	1702                	sll	a4,a4,0x20
    80008b2c:	fff086b7          	lui	a3,0xfff08
    80008b30:	9301                	srl	a4,a4,0x20
    80008b32:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80008b34:	8f75                	and	a4,a4,a3
    TEST_END();
    80008b36:	00014597          	auipc	a1,0x14
    80008b3a:	f8a58593          	add	a1,a1,-118 # 8001cac0 <__func__.1+0x2c8>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    80008b3e:	00e78763          	beq	a5,a4,80008b4c <tinst_tests+0x16c2>
    80008b42:	4481                	li	s1,0
    TEST_END();
    80008b44:	00014597          	auipc	a1,0x14
    80008b48:	f8c58593          	add	a1,a1,-116 # 8001cad0 <__func__.1+0x2d8>
    80008b4c:	00014517          	auipc	a0,0x14
    80008b50:	02c50513          	add	a0,a0,44 # 8001cb78 <__func__.1+0x380>
    80008b54:	40e120ef          	jal	8001af62 <printf>
    80008b58:	4511                	li	a0,4
    80008b5a:	f85f70ef          	jal	80000ade <goto_priv>
    80008b5e:	fc8f80ef          	jal	80001326 <reset_state>
}
    80008b62:	70a2                	ld	ra,40(sp)
    80008b64:	7402                	ld	s0,32(sp)
    80008b66:	6942                	ld	s2,16(sp)
    80008b68:	69a2                	ld	s3,8(sp)
    80008b6a:	8526                	mv	a0,s1
    80008b6c:	64e2                	ld	s1,24(sp)
    80008b6e:	6145                	add	sp,sp,48
    80008b70:	8082                	ret
    TEST_ASSERT("correct tinst when executing a lb which results in a lpf",         
    80008b72:	00014597          	auipc	a1,0x14
    80008b76:	f5e58593          	add	a1,a1,-162 # 8001cad0 <__func__.1+0x2d8>
    80008b7a:	99ffe06f          	j	80007518 <tinst_tests+0x8e>
    80008b7e:	6418                	ld	a4,8(s0)
    80008b80:	47b5                	li	a5,13
    80008b82:	4901                	li	s2,0
    80008b84:	00f70463          	beq	a4,a5,80008b8c <tinst_tests+0x1702>
    80008b88:	9d5fe06f          	j	8000755c <tinst_tests+0xd2>
    80008b8c:	7018                	ld	a4,32(s0)
    80008b8e:	4905                	li	s2,1
    80008b90:	e319                	bnez	a4,80008b96 <tinst_tests+0x170c>
    80008b92:	9cbfe06f          	j	8000755c <tinst_tests+0xd2>
    80008b96:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80008b98:	0016f793          	and	a5,a3,1
    80008b9c:	020791e3          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80008ba0:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80008ba4:	460d                	li	a2,3
    80008ba6:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80008baa:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80008bac:	00c59863          	bne	a1,a2,80008bbc <tinst_tests+0x1732>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80008bb0:	0026d683          	lhu	a3,2(a3)
    80008bb4:	0106969b          	sllw	a3,a3,0x10
    80008bb8:	8fd5                	or	a5,a5,a3
    80008bba:	2781                	sext.w	a5,a5
    80008bbc:	03179913          	sll	s2,a5,0x31
    80008bc0:	03195913          	srl	s2,s2,0x31
    80008bc4:	40e90933          	sub	s2,s2,a4
    80008bc8:	00193913          	seqz	s2,s2
    80008bcc:	991fe06f          	j	8000755c <tinst_tests+0xd2>
    80008bd0:	7018                	ld	a4,32(s0)
    80008bd2:	e319                	bnez	a4,80008bd8 <tinst_tests+0x174e>
    80008bd4:	977fe06f          	j	8000754a <tinst_tests+0xc0>
    80008bd8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80008bda:	0016f793          	and	a5,a3,1
    80008bde:	7e079063          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80008be2:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80008be6:	460d                	li	a2,3
    80008be8:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80008bec:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80008bee:	00c59863          	bne	a1,a2,80008bfe <tinst_tests+0x1774>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80008bf2:	0026d683          	lhu	a3,2(a3)
    80008bf6:	0106969b          	sllw	a3,a3,0x10
    80008bfa:	8fd5                	or	a5,a5,a3
    80008bfc:	2781                	sext.w	a5,a5
    80008bfe:	17c6                	sll	a5,a5,0x31
    80008c00:	93c5                	srl	a5,a5,0x31
    80008c02:	00f70463          	beq	a4,a5,80008c0a <tinst_tests+0x1780>
    80008c06:	931fe06f          	j	80007536 <tinst_tests+0xac>
    80008c0a:	941fe06f          	j	8000754a <tinst_tests+0xc0>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    80008c0e:	00014597          	auipc	a1,0x14
    80008c12:	ec258593          	add	a1,a1,-318 # 8001cad0 <__func__.1+0x2d8>
    80008c16:	99dfe06f          	j	800075b2 <tinst_tests+0x128>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    80008c1a:	00014597          	auipc	a1,0x14
    80008c1e:	eb658593          	add	a1,a1,-330 # 8001cad0 <__func__.1+0x2d8>
    80008c22:	a37fe06f          	j	80007658 <tinst_tests+0x1ce>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    80008c26:	00014597          	auipc	a1,0x14
    80008c2a:	eaa58593          	add	a1,a1,-342 # 8001cad0 <__func__.1+0x2d8>
    80008c2e:	ad1fe06f          	j	800076fe <tinst_tests+0x274>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    80008c32:	00014597          	auipc	a1,0x14
    80008c36:	e9e58593          	add	a1,a1,-354 # 8001cad0 <__func__.1+0x2d8>
    80008c3a:	b6bfe06f          	j	800077a4 <tinst_tests+0x31a>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    80008c3e:	00014597          	auipc	a1,0x14
    80008c42:	e9258593          	add	a1,a1,-366 # 8001cad0 <__func__.1+0x2d8>
    80008c46:	bfdfe06f          	j	80007842 <tinst_tests+0x3b8>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    80008c4a:	00014597          	auipc	a1,0x14
    80008c4e:	e8658593          	add	a1,a1,-378 # 8001cad0 <__func__.1+0x2d8>
    80008c52:	c8ffe06f          	j	800078e0 <tinst_tests+0x456>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    80008c56:	00014597          	auipc	a1,0x14
    80008c5a:	e7a58593          	add	a1,a1,-390 # 8001cad0 <__func__.1+0x2d8>
    80008c5e:	d23fe06f          	j	80007980 <tinst_tests+0x4f6>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    80008c62:	00014597          	auipc	a1,0x14
    80008c66:	e6e58593          	add	a1,a1,-402 # 8001cad0 <__func__.1+0x2d8>
    80008c6a:	dbbfe06f          	j	80007a24 <tinst_tests+0x59a>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    80008c6e:	00014597          	auipc	a1,0x14
    80008c72:	e6258593          	add	a1,a1,-414 # 8001cad0 <__func__.1+0x2d8>
    80008c76:	e55fe06f          	j	80007aca <tinst_tests+0x640>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    80008c7a:	00014597          	auipc	a1,0x14
    80008c7e:	e5658593          	add	a1,a1,-426 # 8001cad0 <__func__.1+0x2d8>
    80008c82:	ef1fe06f          	j	80007b72 <tinst_tests+0x6e8>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    80008c86:	00014597          	auipc	a1,0x14
    80008c8a:	e4a58593          	add	a1,a1,-438 # 8001cad0 <__func__.1+0x2d8>
    80008c8e:	9faff06f          	j	80007e88 <tinst_tests+0x9fe>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    80008c92:	00014597          	auipc	a1,0x14
    80008c96:	e3e58593          	add	a1,a1,-450 # 8001cad0 <__func__.1+0x2d8>
    80008c9a:	a94ff06f          	j	80007f2e <tinst_tests+0xaa4>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    80008c9e:	7018                	ld	a4,32(s0)
    80008ca0:	e319                	bnez	a4,80008ca6 <tinst_tests+0x181c>
    80008ca2:	943fe06f          	j	800075e4 <tinst_tests+0x15a>
    80008ca6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80008ca8:	0016f793          	and	a5,a3,1
    80008cac:	70079963          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80008cb0:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80008cb4:	460d                	li	a2,3
    80008cb6:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80008cba:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80008cbc:	00c59863          	bne	a1,a2,80008ccc <tinst_tests+0x1842>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80008cc0:	0026d683          	lhu	a3,2(a3)
    80008cc4:	0106969b          	sllw	a3,a3,0x10
    80008cc8:	8fd5                	or	a5,a5,a3
    80008cca:	2781                	sext.w	a5,a5
    80008ccc:	17c6                	sll	a5,a5,0x31
    80008cce:	93c5                	srl	a5,a5,0x31
    80008cd0:	00f70463          	beq	a4,a5,80008cd8 <tinst_tests+0x184e>
    80008cd4:	8fdfe06f          	j	800075d0 <tinst_tests+0x146>
    80008cd8:	90dfe06f          	j	800075e4 <tinst_tests+0x15a>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    80008cdc:	00014597          	auipc	a1,0x14
    80008ce0:	df458593          	add	a1,a1,-524 # 8001cad0 <__func__.1+0x2d8>
    80008ce4:	aeeff06f          	j	80007fd2 <tinst_tests+0xb48>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    80008ce8:	6418                	ld	a4,8(s0)
    80008cea:	47b5                	li	a5,13
    80008cec:	00f70463          	beq	a4,a5,80008cf4 <tinst_tests+0x186a>
    80008cf0:	afbfe06f          	j	800077ea <tinst_tests+0x360>
    80008cf4:	7018                	ld	a4,32(s0)
    80008cf6:	e319                	bnez	a4,80008cfc <tinst_tests+0x1872>
    80008cf8:	af5fe06f          	j	800077ec <tinst_tests+0x362>
    80008cfc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80008cfe:	0016f793          	and	a5,a3,1
    80008d02:	6a079e63          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80008d06:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80008d0a:	460d                	li	a2,3
    80008d0c:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80008d10:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80008d12:	00c59863          	bne	a1,a2,80008d22 <tinst_tests+0x1898>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80008d16:	0026d683          	lhu	a3,2(a3)
    80008d1a:	0106969b          	sllw	a3,a3,0x10
    80008d1e:	8fd5                	or	a5,a5,a3
    80008d20:	2781                	sext.w	a5,a5
    80008d22:	17c6                	sll	a5,a5,0x31
    80008d24:	0317d913          	srl	s2,a5,0x31
    80008d28:	40e90933          	sub	s2,s2,a4
    80008d2c:	00193913          	seqz	s2,s2
    80008d30:	abdfe06f          	j	800077ec <tinst_tests+0x362>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    80008d34:	6418                	ld	a4,8(s0)
    80008d36:	47bd                	li	a5,15
    80008d38:	00014597          	auipc	a1,0x14
    80008d3c:	d9858593          	add	a1,a1,-616 # 8001cad0 <__func__.1+0x2d8>
    80008d40:	b2f71563          	bne	a4,a5,8000806a <tinst_tests+0xbe0>
    80008d44:	7018                	ld	a4,32(s0)
    80008d46:	00014597          	auipc	a1,0x14
    80008d4a:	d7a58593          	add	a1,a1,-646 # 8001cac0 <__func__.1+0x2c8>
    80008d4e:	b0070e63          	beqz	a4,8000806a <tinst_tests+0xbe0>
    80008d52:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80008d54:	0016f793          	and	a5,a3,1
    80008d58:	66079363          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80008d5c:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80008d60:	460d                	li	a2,3
    80008d62:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80008d66:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80008d68:	00c59863          	bne	a1,a2,80008d78 <tinst_tests+0x18ee>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80008d6c:	0026d683          	lhu	a3,2(a3)
    80008d70:	0106969b          	sllw	a3,a3,0x10
    80008d74:	8fd5                	or	a5,a5,a3
    80008d76:	2781                	sext.w	a5,a5
    80008d78:	1782                	sll	a5,a5,0x20
    80008d7a:	fff086b7          	lui	a3,0xfff08
    80008d7e:	9381                	srl	a5,a5,0x20
    80008d80:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80008d82:	8ff5                	and	a5,a5,a3
    80008d84:	00014597          	auipc	a1,0x14
    80008d88:	d4c58593          	add	a1,a1,-692 # 8001cad0 <__func__.1+0x2d8>
    80008d8c:	acf71f63          	bne	a4,a5,8000806a <tinst_tests+0xbe0>
    80008d90:	00014597          	auipc	a1,0x14
    80008d94:	d3058593          	add	a1,a1,-720 # 8001cac0 <__func__.1+0x2c8>
    80008d98:	ad2ff06f          	j	8000806a <tinst_tests+0xbe0>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    80008d9c:	6418                	ld	a4,8(s0)
    80008d9e:	47b5                	li	a5,13
    80008da0:	00f70463          	beq	a4,a5,80008da8 <tinst_tests+0x191e>
    80008da4:	ae5fe06f          	j	80007888 <tinst_tests+0x3fe>
    80008da8:	7018                	ld	a4,32(s0)
    80008daa:	e319                	bnez	a4,80008db0 <tinst_tests+0x1926>
    80008dac:	adffe06f          	j	8000788a <tinst_tests+0x400>
    80008db0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80008db2:	0016f793          	and	a5,a3,1
    80008db6:	60079463          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80008dba:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80008dbe:	460d                	li	a2,3
    80008dc0:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80008dc4:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80008dc6:	00c59863          	bne	a1,a2,80008dd6 <tinst_tests+0x194c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80008dca:	0026d683          	lhu	a3,2(a3)
    80008dce:	0106969b          	sllw	a3,a3,0x10
    80008dd2:	8fd5                	or	a5,a5,a3
    80008dd4:	2781                	sext.w	a5,a5
    80008dd6:	17c6                	sll	a5,a5,0x31
    80008dd8:	0317d913          	srl	s2,a5,0x31
    80008ddc:	40e90933          	sub	s2,s2,a4
    80008de0:	00193913          	seqz	s2,s2
    80008de4:	aa7fe06f          	j	8000788a <tinst_tests+0x400>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    80008de8:	6418                	ld	a4,8(s0)
    80008dea:	47b5                	li	a5,13
    80008dec:	00f70463          	beq	a4,a5,80008df4 <tinst_tests+0x196a>
    80008df0:	b37fe06f          	j	80007926 <tinst_tests+0x49c>
    80008df4:	7018                	ld	a4,32(s0)
    80008df6:	e319                	bnez	a4,80008dfc <tinst_tests+0x1972>
    80008df8:	b31fe06f          	j	80007928 <tinst_tests+0x49e>
    80008dfc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80008dfe:	0016f793          	and	a5,a3,1
    80008e02:	5a079e63          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80008e06:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80008e0a:	460d                	li	a2,3
    80008e0c:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80008e10:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80008e12:	00c59863          	bne	a1,a2,80008e22 <tinst_tests+0x1998>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80008e16:	0026d683          	lhu	a3,2(a3)
    80008e1a:	0106969b          	sllw	a3,a3,0x10
    80008e1e:	8fd5                	or	a5,a5,a3
    80008e20:	2781                	sext.w	a5,a5
    80008e22:	17c6                	sll	a5,a5,0x31
    80008e24:	0317d913          	srl	s2,a5,0x31
    80008e28:	40e90933          	sub	s2,s2,a4
    80008e2c:	00193913          	seqz	s2,s2
    80008e30:	af9fe06f          	j	80007928 <tinst_tests+0x49e>
    TEST_ASSERT("correct tinst when executing a lb which results in a lpf",         
    80008e34:	7018                	ld	a4,32(s0)
    80008e36:	00014597          	auipc	a1,0x14
    80008e3a:	c8a58593          	add	a1,a1,-886 # 8001cac0 <__func__.1+0x2c8>
    80008e3e:	e319                	bnez	a4,80008e44 <tinst_tests+0x19ba>
    80008e40:	ed8fe06f          	j	80007518 <tinst_tests+0x8e>
    80008e44:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80008e46:	0016f793          	and	a5,a3,1
    80008e4a:	56079a63          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80008e4e:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80008e52:	460d                	li	a2,3
    80008e54:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80008e58:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80008e5a:	00c59863          	bne	a1,a2,80008e6a <tinst_tests+0x19e0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80008e5e:	0026d683          	lhu	a3,2(a3)
    80008e62:	0106969b          	sllw	a3,a3,0x10
    80008e66:	8fd5                	or	a5,a5,a3
    80008e68:	2781                	sext.w	a5,a5
    80008e6a:	17c6                	sll	a5,a5,0x31
    80008e6c:	93c5                	srl	a5,a5,0x31
    80008e6e:	00014597          	auipc	a1,0x14
    80008e72:	c6258593          	add	a1,a1,-926 # 8001cad0 <__func__.1+0x2d8>
    80008e76:	00f70463          	beq	a4,a5,80008e7e <tinst_tests+0x19f4>
    80008e7a:	e9efe06f          	j	80007518 <tinst_tests+0x8e>
    80008e7e:	00014597          	auipc	a1,0x14
    80008e82:	c4258593          	add	a1,a1,-958 # 8001cac0 <__func__.1+0x2c8>
    80008e86:	e92fe06f          	j	80007518 <tinst_tests+0x8e>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    80008e8a:	6418                	ld	a4,8(s0)
    80008e8c:	47bd                	li	a5,15
    80008e8e:	00f70463          	beq	a4,a5,80008e96 <tinst_tests+0x1a0c>
    80008e92:	b35fe06f          	j	800079c6 <tinst_tests+0x53c>
    80008e96:	7018                	ld	a4,32(s0)
    80008e98:	e319                	bnez	a4,80008e9e <tinst_tests+0x1a14>
    80008e9a:	b2ffe06f          	j	800079c8 <tinst_tests+0x53e>
    80008e9e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80008ea0:	0016f793          	and	a5,a3,1
    80008ea4:	50079d63          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80008ea8:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80008eac:	460d                	li	a2,3
    80008eae:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80008eb2:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80008eb4:	00c59863          	bne	a1,a2,80008ec4 <tinst_tests+0x1a3a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80008eb8:	0026d683          	lhu	a3,2(a3)
    80008ebc:	0106969b          	sllw	a3,a3,0x10
    80008ec0:	8fd5                	or	a5,a5,a3
    80008ec2:	2781                	sext.w	a5,a5
    80008ec4:	01f076b7          	lui	a3,0x1f07
    80008ec8:	07f68693          	add	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80008ecc:	8ff5                	and	a5,a5,a3
    80008ece:	40e78933          	sub	s2,a5,a4
    80008ed2:	00193913          	seqz	s2,s2
    80008ed6:	af3fe06f          	j	800079c8 <tinst_tests+0x53e>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    80008eda:	6418                	ld	a4,8(s0)
    80008edc:	47bd                	li	a5,15
    80008ede:	00f70463          	beq	a4,a5,80008ee6 <tinst_tests+0x1a5c>
    80008ee2:	b89fe06f          	j	80007a6a <tinst_tests+0x5e0>
    80008ee6:	7018                	ld	a4,32(s0)
    80008ee8:	e319                	bnez	a4,80008eee <tinst_tests+0x1a64>
    80008eea:	b83fe06f          	j	80007a6c <tinst_tests+0x5e2>
    80008eee:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80008ef0:	0016f793          	and	a5,a3,1
    80008ef4:	4c079563          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80008ef8:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80008efc:	460d                	li	a2,3
    80008efe:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80008f02:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80008f04:	00c59863          	bne	a1,a2,80008f14 <tinst_tests+0x1a8a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80008f08:	0026d683          	lhu	a3,2(a3)
    80008f0c:	0106969b          	sllw	a3,a3,0x10
    80008f10:	8fd5                	or	a5,a5,a3
    80008f12:	2781                	sext.w	a5,a5
    80008f14:	01f076b7          	lui	a3,0x1f07
    80008f18:	07f68693          	add	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80008f1c:	8ff5                	and	a5,a5,a3
    80008f1e:	40e78933          	sub	s2,a5,a4
    80008f22:	00193913          	seqz	s2,s2
    80008f26:	b47fe06f          	j	80007a6c <tinst_tests+0x5e2>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    80008f2a:	6418                	ld	a4,8(s0)
    80008f2c:	47bd                	li	a5,15
    80008f2e:	00f70463          	beq	a4,a5,80008f36 <tinst_tests+0x1aac>
    80008f32:	bdffe06f          	j	80007b10 <tinst_tests+0x686>
    80008f36:	7018                	ld	a4,32(s0)
    80008f38:	e319                	bnez	a4,80008f3e <tinst_tests+0x1ab4>
    80008f3a:	bd9fe06f          	j	80007b12 <tinst_tests+0x688>
    80008f3e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80008f40:	0016f793          	and	a5,a3,1
    80008f44:	46079d63          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80008f48:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80008f4c:	460d                	li	a2,3
    80008f4e:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80008f52:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80008f54:	00c59863          	bne	a1,a2,80008f64 <tinst_tests+0x1ada>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80008f58:	0026d683          	lhu	a3,2(a3)
    80008f5c:	0106969b          	sllw	a3,a3,0x10
    80008f60:	8fd5                	or	a5,a5,a3
    80008f62:	2781                	sext.w	a5,a5
    80008f64:	01f076b7          	lui	a3,0x1f07
    80008f68:	07f68693          	add	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80008f6c:	8ff5                	and	a5,a5,a3
    80008f6e:	40e78933          	sub	s2,a5,a4
    80008f72:	00193913          	seqz	s2,s2
    80008f76:	b9dfe06f          	j	80007b12 <tinst_tests+0x688>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    80008f7a:	6418                	ld	a4,8(s0)
    80008f7c:	47bd                	li	a5,15
    80008f7e:	00f70463          	beq	a4,a5,80008f86 <tinst_tests+0x1afc>
    80008f82:	c37fe06f          	j	80007bb8 <tinst_tests+0x72e>
    80008f86:	701c                	ld	a5,32(s0)
    80008f88:	e399                	bnez	a5,80008f8e <tinst_tests+0x1b04>
    80008f8a:	c31fe06f          	j	80007bba <tinst_tests+0x730>
    80008f8e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80008f90:	0016f713          	and	a4,a3,1
    80008f94:	42071563          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80008f98:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80008f9c:	460d                	li	a2,3
    80008f9e:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    80008fa2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80008fa4:	00c59863          	bne	a1,a2,80008fb4 <tinst_tests+0x1b2a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80008fa8:	0026d683          	lhu	a3,2(a3)
    80008fac:	0106969b          	sllw	a3,a3,0x10
    80008fb0:	8f55                	or	a4,a4,a3
    80008fb2:	2701                	sext.w	a4,a4
    80008fb4:	01f076b7          	lui	a3,0x1f07
    80008fb8:	07f68693          	add	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80008fbc:	8f75                	and	a4,a4,a3
    80008fbe:	40f70933          	sub	s2,a4,a5
    80008fc2:	00193913          	seqz	s2,s2
    80008fc6:	bf5fe06f          	j	80007bba <tinst_tests+0x730>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80008fca:	6418                	ld	a4,8(s0)
    80008fcc:	47b5                	li	a5,13
    80008fce:	00f70463          	beq	a4,a5,80008fd6 <tinst_tests+0x1b4c>
    80008fd2:	c7ffe06f          	j	80007c50 <tinst_tests+0x7c6>
    80008fd6:	7004                	ld	s1,32(s0)
    80008fd8:	e099                	bnez	s1,80008fde <tinst_tests+0x1b54>
    80008fda:	c79fe06f          	j	80007c52 <tinst_tests+0x7c8>
    80008fde:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    80008fe0:	0017f713          	and	a4,a5,1
    80008fe4:	3c071d63          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80008fe8:	0007d503          	lhu	a0,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    80008fec:	a5cf80ef          	jal	80001248 <expand_compressed_instruction>
    80008ff0:	67a1                	lui	a5,0x8
    80008ff2:	17f5                	add	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    80008ff4:	00f57933          	and	s2,a0,a5
    80008ff8:	1902                	sll	s2,s2,0x20
    80008ffa:	02095913          	srl	s2,s2,0x20
    80008ffe:	40990933          	sub	s2,s2,s1
    80009002:	00193913          	seqz	s2,s2
    80009006:	c4dfe06f          	j	80007c52 <tinst_tests+0x7c8>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    8000900a:	6418                	ld	a4,8(s0)
    8000900c:	47b5                	li	a5,13
    8000900e:	00f70463          	beq	a4,a5,80009016 <tinst_tests+0x1b8c>
    80009012:	cd9fe06f          	j	80007cea <tinst_tests+0x860>
    80009016:	02043983          	ld	s3,32(s0)
    8000901a:	00099463          	bnez	s3,80009022 <tinst_tests+0x1b98>
    8000901e:	ccffe06f          	j	80007cec <tinst_tests+0x862>
    80009022:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    80009024:	0017f713          	and	a4,a5,1
    80009028:	38071b63          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000902c:	0007d503          	lhu	a0,0(a5)
    80009030:	a18f80ef          	jal	80001248 <expand_compressed_instruction>
    80009034:	67a1                	lui	a5,0x8
    80009036:	17f5                	add	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    80009038:	00f57933          	and	s2,a0,a5
    8000903c:	1902                	sll	s2,s2,0x20
    8000903e:	02095913          	srl	s2,s2,0x20
    80009042:	41390933          	sub	s2,s2,s3
    80009046:	00193913          	seqz	s2,s2
    8000904a:	ca3fe06f          	j	80007cec <tinst_tests+0x862>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    8000904e:	7018                	ld	a4,32(s0)
    80009050:	e319                	bnez	a4,80009056 <tinst_tests+0x1bcc>
    80009052:	e69fe06f          	j	80007eba <tinst_tests+0xa30>
    80009056:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009058:	0016f793          	and	a5,a3,1
    8000905c:	36079163          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009060:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009064:	460d                	li	a2,3
    80009066:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000906a:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000906c:	00c59863          	bne	a1,a2,8000907c <tinst_tests+0x1bf2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009070:	0026d683          	lhu	a3,2(a3)
    80009074:	0106969b          	sllw	a3,a3,0x10
    80009078:	8fd5                	or	a5,a5,a3
    8000907a:	2781                	sext.w	a5,a5
    8000907c:	1782                	sll	a5,a5,0x20
    8000907e:	fff086b7          	lui	a3,0xfff08
    80009082:	9381                	srl	a5,a5,0x20
    80009084:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009086:	8ff5                	and	a5,a5,a3
    80009088:	00f70463          	beq	a4,a5,80009090 <tinst_tests+0x1c06>
    8000908c:	e1bfe06f          	j	80007ea6 <tinst_tests+0xa1c>
    80009090:	e2bfe06f          	j	80007eba <tinst_tests+0xa30>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    80009094:	701c                	ld	a5,32(s0)
    80009096:	00014597          	auipc	a1,0x14
    8000909a:	a2a58593          	add	a1,a1,-1494 # 8001cac0 <__func__.1+0x2c8>
    8000909e:	e399                	bnez	a5,800090a4 <tinst_tests+0x1c1a>
    800090a0:	ad3fe06f          	j	80007b72 <tinst_tests+0x6e8>
    800090a4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800090a6:	0016f713          	and	a4,a3,1
    800090aa:	30071a63          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    800090ae:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800090b2:	460d                	li	a2,3
    800090b4:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    800090b8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800090ba:	00c59863          	bne	a1,a2,800090ca <tinst_tests+0x1c40>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800090be:	0026d683          	lhu	a3,2(a3)
    800090c2:	0106969b          	sllw	a3,a3,0x10
    800090c6:	8f55                	or	a4,a4,a3
    800090c8:	2701                	sext.w	a4,a4
    800090ca:	01f076b7          	lui	a3,0x1f07
    800090ce:	07f68693          	add	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    800090d2:	8f75                	and	a4,a4,a3
    800090d4:	00014597          	auipc	a1,0x14
    800090d8:	9fc58593          	add	a1,a1,-1540 # 8001cad0 <__func__.1+0x2d8>
    800090dc:	00e78463          	beq	a5,a4,800090e4 <tinst_tests+0x1c5a>
    800090e0:	a93fe06f          	j	80007b72 <tinst_tests+0x6e8>
    800090e4:	00014597          	auipc	a1,0x14
    800090e8:	9dc58593          	add	a1,a1,-1572 # 8001cac0 <__func__.1+0x2c8>
    800090ec:	a87fe06f          	j	80007b72 <tinst_tests+0x6e8>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    800090f0:	7018                	ld	a4,32(s0)
    800090f2:	e319                	bnez	a4,800090f8 <tinst_tests+0x1c6e>
    800090f4:	e6dfe06f          	j	80007f60 <tinst_tests+0xad6>
    800090f8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800090fa:	0016f793          	and	a5,a3,1
    800090fe:	2c079063          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009102:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009106:	460d                	li	a2,3
    80009108:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000910c:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000910e:	00c59863          	bne	a1,a2,8000911e <tinst_tests+0x1c94>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009112:	0026d683          	lhu	a3,2(a3)
    80009116:	0106969b          	sllw	a3,a3,0x10
    8000911a:	8fd5                	or	a5,a5,a3
    8000911c:	2781                	sext.w	a5,a5
    8000911e:	1782                	sll	a5,a5,0x20
    80009120:	fff086b7          	lui	a3,0xfff08
    80009124:	9381                	srl	a5,a5,0x20
    80009126:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009128:	8ff5                	and	a5,a5,a3
    8000912a:	00f70463          	beq	a4,a5,80009132 <tinst_tests+0x1ca8>
    8000912e:	e1ffe06f          	j	80007f4c <tinst_tests+0xac2>
    80009132:	e2ffe06f          	j	80007f60 <tinst_tests+0xad6>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80009136:	7004                	ld	s1,32(s0)
    80009138:	c099                	beqz	s1,8000913e <tinst_tests+0x1cb4>
    8000913a:	0ea0106f          	j	8000a224 <tinst_tests+0x2d9a>
    8000913e:	00014597          	auipc	a1,0x14
    80009142:	98258593          	add	a1,a1,-1662 # 8001cac0 <__func__.1+0x2c8>
    80009146:	ac5fe06f          	j	80007c0a <tinst_tests+0x780>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    8000914a:	701c                	ld	a5,32(s0)
    8000914c:	e399                	bnez	a5,80009152 <tinst_tests+0x1cc8>
    8000914e:	eb7fe06f          	j	80008004 <tinst_tests+0xb7a>
    80009152:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009154:	0016f713          	and	a4,a3,1
    80009158:	26071363          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000915c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009160:	460d                	li	a2,3
    80009162:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    80009166:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009168:	00c59863          	bne	a1,a2,80009178 <tinst_tests+0x1cee>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000916c:	0026d683          	lhu	a3,2(a3)
    80009170:	0106969b          	sllw	a3,a3,0x10
    80009174:	8f55                	or	a4,a4,a3
    80009176:	2701                	sext.w	a4,a4
    80009178:	1702                	sll	a4,a4,0x20
    8000917a:	fff086b7          	lui	a3,0xfff08
    8000917e:	9301                	srl	a4,a4,0x20
    80009180:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009182:	8f75                	and	a4,a4,a3
    80009184:	00e78463          	beq	a5,a4,8000918c <tinst_tests+0x1d02>
    80009188:	e69fe06f          	j	80007ff0 <tinst_tests+0xb66>
    8000918c:	e79fe06f          	j	80008004 <tinst_tests+0xb7a>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    80009190:	02043983          	ld	s3,32(s0)
    80009194:	00098463          	beqz	s3,8000919c <tinst_tests+0x1d12>
    80009198:	0bc0106f          	j	8000a254 <tinst_tests+0x2dca>
    8000919c:	00014597          	auipc	a1,0x14
    800091a0:	92458593          	add	a1,a1,-1756 # 8001cac0 <__func__.1+0x2c8>
    800091a4:	b01fe06f          	j	80007ca4 <tinst_tests+0x81a>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    800091a8:	02043983          	ld	s3,32(s0)
    800091ac:	00098463          	beqz	s3,800091b4 <tinst_tests+0x1d2a>
    800091b0:	11c0106f          	j	8000a2cc <tinst_tests+0x2e42>
    800091b4:	00014597          	auipc	a1,0x14
    800091b8:	90c58593          	add	a1,a1,-1780 # 8001cac0 <__func__.1+0x2c8>
    800091bc:	b83fe06f          	j	80007d3e <tinst_tests+0x8b4>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    800091c0:	7004                	ld	s1,32(s0)
    800091c2:	c099                	beqz	s1,800091c8 <tinst_tests+0x1d3e>
    800091c4:	1840106f          	j	8000a348 <tinst_tests+0x2ebe>
    800091c8:	00014597          	auipc	a1,0x14
    800091cc:	8f858593          	add	a1,a1,-1800 # 8001cac0 <__func__.1+0x2c8>
    800091d0:	c11fe06f          	j	80007de0 <tinst_tests+0x956>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    800091d4:	7018                	ld	a4,32(s0)
    800091d6:	e319                	bnez	a4,800091dc <tinst_tests+0x1d52>
    800091d8:	c2afe06f          	j	80007602 <tinst_tests+0x178>
    800091dc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800091de:	0016f793          	and	a5,a3,1
    800091e2:	1c079e63          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    800091e6:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800091ea:	460d                	li	a2,3
    800091ec:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    800091f0:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    800091f2:	00c59863          	bne	a1,a2,80009202 <tinst_tests+0x1d78>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800091f6:	0026d683          	lhu	a3,2(a3)
    800091fa:	0106969b          	sllw	a3,a3,0x10
    800091fe:	8fd5                	or	a5,a5,a3
    80009200:	2781                	sext.w	a5,a5
    80009202:	03179913          	sll	s2,a5,0x31
    80009206:	03195913          	srl	s2,s2,0x31
    8000920a:	40e90933          	sub	s2,s2,a4
    8000920e:	00193913          	seqz	s2,s2
    80009212:	bf0fe06f          	j	80007602 <tinst_tests+0x178>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    80009216:	701c                	ld	a5,32(s0)
    80009218:	00014597          	auipc	a1,0x14
    8000921c:	8a858593          	add	a1,a1,-1880 # 8001cac0 <__func__.1+0x2c8>
    80009220:	e399                	bnez	a5,80009226 <tinst_tests+0x1d9c>
    80009222:	c67fe06f          	j	80007e88 <tinst_tests+0x9fe>
    80009226:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009228:	0016f713          	and	a4,a3,1
    8000922c:	18071963          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009230:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009234:	460d                	li	a2,3
    80009236:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    8000923a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000923c:	00c59863          	bne	a1,a2,8000924c <tinst_tests+0x1dc2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009240:	0026d683          	lhu	a3,2(a3)
    80009244:	0106969b          	sllw	a3,a3,0x10
    80009248:	8f55                	or	a4,a4,a3
    8000924a:	2701                	sext.w	a4,a4
    8000924c:	1702                	sll	a4,a4,0x20
    8000924e:	fff086b7          	lui	a3,0xfff08
    80009252:	9301                	srl	a4,a4,0x20
    80009254:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009256:	8f75                	and	a4,a4,a3
    80009258:	00014597          	auipc	a1,0x14
    8000925c:	87858593          	add	a1,a1,-1928 # 8001cad0 <__func__.1+0x2d8>
    80009260:	00e78463          	beq	a5,a4,80009268 <tinst_tests+0x1dde>
    80009264:	c25fe06f          	j	80007e88 <tinst_tests+0x9fe>
    80009268:	00014597          	auipc	a1,0x14
    8000926c:	85858593          	add	a1,a1,-1960 # 8001cac0 <__func__.1+0x2c8>
    80009270:	c19fe06f          	j	80007e88 <tinst_tests+0x9fe>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    80009274:	7018                	ld	a4,32(s0)
    80009276:	e319                	bnez	a4,8000927c <tinst_tests+0x1df2>
    80009278:	c30fe06f          	j	800076a8 <tinst_tests+0x21e>
    8000927c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000927e:	0016f793          	and	a5,a3,1
    80009282:	12079e63          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009286:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000928a:	460d                	li	a2,3
    8000928c:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009290:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009292:	00c59863          	bne	a1,a2,800092a2 <tinst_tests+0x1e18>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009296:	0026d683          	lhu	a3,2(a3)
    8000929a:	0106969b          	sllw	a3,a3,0x10
    8000929e:	8fd5                	or	a5,a5,a3
    800092a0:	2781                	sext.w	a5,a5
    800092a2:	03179913          	sll	s2,a5,0x31
    800092a6:	03195913          	srl	s2,s2,0x31
    800092aa:	40e90933          	sub	s2,s2,a4
    800092ae:	00193913          	seqz	s2,s2
    800092b2:	bf6fe06f          	j	800076a8 <tinst_tests+0x21e>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    800092b6:	701c                	ld	a5,32(s0)
    800092b8:	00014597          	auipc	a1,0x14
    800092bc:	80858593          	add	a1,a1,-2040 # 8001cac0 <__func__.1+0x2c8>
    800092c0:	e399                	bnez	a5,800092c6 <tinst_tests+0x1e3c>
    800092c2:	c6dfe06f          	j	80007f2e <tinst_tests+0xaa4>
    800092c6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800092c8:	0016f713          	and	a4,a3,1
    800092cc:	eb6d                	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    800092ce:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800092d2:	460d                	li	a2,3
    800092d4:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    800092d8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800092da:	00c59863          	bne	a1,a2,800092ea <tinst_tests+0x1e60>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800092de:	0026d683          	lhu	a3,2(a3)
    800092e2:	0106969b          	sllw	a3,a3,0x10
    800092e6:	8f55                	or	a4,a4,a3
    800092e8:	2701                	sext.w	a4,a4
    800092ea:	1702                	sll	a4,a4,0x20
    800092ec:	fff086b7          	lui	a3,0xfff08
    800092f0:	9301                	srl	a4,a4,0x20
    800092f2:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    800092f4:	8f75                	and	a4,a4,a3
    800092f6:	00013597          	auipc	a1,0x13
    800092fa:	7da58593          	add	a1,a1,2010 # 8001cad0 <__func__.1+0x2d8>
    800092fe:	00e78463          	beq	a5,a4,80009306 <tinst_tests+0x1e7c>
    80009302:	c2dfe06f          	j	80007f2e <tinst_tests+0xaa4>
    80009306:	00013597          	auipc	a1,0x13
    8000930a:	7ba58593          	add	a1,a1,1978 # 8001cac0 <__func__.1+0x2c8>
    8000930e:	c21fe06f          	j	80007f2e <tinst_tests+0xaa4>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    80009312:	7018                	ld	a4,32(s0)
    80009314:	e319                	bnez	a4,8000931a <tinst_tests+0x1e90>
    80009316:	c38fe06f          	j	8000774e <tinst_tests+0x2c4>
    8000931a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000931c:	0016f793          	and	a5,a3,1
    80009320:	efd9                	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009322:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009326:	460d                	li	a2,3
    80009328:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000932c:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000932e:	00c59863          	bne	a1,a2,8000933e <tinst_tests+0x1eb4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009332:	0026d683          	lhu	a3,2(a3)
    80009336:	0106969b          	sllw	a3,a3,0x10
    8000933a:	8fd5                	or	a5,a5,a3
    8000933c:	2781                	sext.w	a5,a5
    8000933e:	17c6                	sll	a5,a5,0x31
    80009340:	0317d913          	srl	s2,a5,0x31
    80009344:	40e90933          	sub	s2,s2,a4
    80009348:	00193913          	seqz	s2,s2
    8000934c:	c02fe06f          	j	8000774e <tinst_tests+0x2c4>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    80009350:	7018                	ld	a4,32(s0)
    80009352:	00013597          	auipc	a1,0x13
    80009356:	76e58593          	add	a1,a1,1902 # 8001cac0 <__func__.1+0x2c8>
    8000935a:	e319                	bnez	a4,80009360 <tinst_tests+0x1ed6>
    8000935c:	c77fe06f          	j	80007fd2 <tinst_tests+0xb48>
    80009360:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009362:	0016f793          	and	a5,a3,1
    80009366:	efa1                	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009368:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000936c:	460d                	li	a2,3
    8000936e:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009372:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009374:	00c59863          	bne	a1,a2,80009384 <tinst_tests+0x1efa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009378:	0026d683          	lhu	a3,2(a3)
    8000937c:	0106969b          	sllw	a3,a3,0x10
    80009380:	8fd5                	or	a5,a5,a3
    80009382:	2781                	sext.w	a5,a5
    80009384:	1782                	sll	a5,a5,0x20
    80009386:	fff086b7          	lui	a3,0xfff08
    8000938a:	9381                	srl	a5,a5,0x20
    8000938c:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000938e:	8ff5                	and	a5,a5,a3
    80009390:	00013597          	auipc	a1,0x13
    80009394:	74058593          	add	a1,a1,1856 # 8001cad0 <__func__.1+0x2d8>
    80009398:	00f70463          	beq	a4,a5,800093a0 <tinst_tests+0x1f16>
    8000939c:	c37fe06f          	j	80007fd2 <tinst_tests+0xb48>
    800093a0:	00013597          	auipc	a1,0x13
    800093a4:	72058593          	add	a1,a1,1824 # 8001cac0 <__func__.1+0x2c8>
    800093a8:	c2bfe06f          	j	80007fd2 <tinst_tests+0xb48>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    800093ac:	7018                	ld	a4,32(s0)
    800093ae:	e319                	bnez	a4,800093b4 <tinst_tests+0x1f2a>
    800093b0:	adafe06f          	j	8000768a <tinst_tests+0x200>
    800093b4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800093b6:	0016f793          	and	a5,a3,1
    800093ba:	400783e3          	beqz	a5,80009fc0 <tinst_tests+0x2b36>
        ERROR("trying to read unaligned instruction (%s, %d)", __func__, __LINE__);
    800093be:	11400613          	li	a2,276
    800093c2:	00012597          	auipc	a1,0x12
    800093c6:	61658593          	add	a1,a1,1558 # 8001b9d8 <__func__.0>
    800093ca:	00015517          	auipc	a0,0x15
    800093ce:	ede50513          	add	a0,a0,-290 # 8001e2a8 <__func__.1+0x1ab0>
    800093d2:	391110ef          	jal	8001af62 <printf>
    800093d6:	11400613          	li	a2,276
    800093da:	00012597          	auipc	a1,0x12
    800093de:	5fe58593          	add	a1,a1,1534 # 8001b9d8 <__func__.0>
    800093e2:	00014517          	auipc	a0,0x14
    800093e6:	88650513          	add	a0,a0,-1914 # 8001cc68 <__func__.1+0x470>
    800093ea:	379110ef          	jal	8001af62 <printf>
    800093ee:	4501                	li	a0,0
    800093f0:	011110ef          	jal	8001ac00 <exit>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    800093f4:	7018                	ld	a4,32(s0)
    800093f6:	e319                	bnez	a4,800093fc <tinst_tests+0x1f72>
    800093f8:	b38fe06f          	j	80007730 <tinst_tests+0x2a6>
    800093fc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800093fe:	0016f793          	and	a5,a3,1
    80009402:	ffd5                	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009404:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009408:	460d                	li	a2,3
    8000940a:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000940e:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009410:	00c59863          	bne	a1,a2,80009420 <tinst_tests+0x1f96>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009414:	0026d683          	lhu	a3,2(a3)
    80009418:	0106969b          	sllw	a3,a3,0x10
    8000941c:	8fd5                	or	a5,a5,a3
    8000941e:	2781                	sext.w	a5,a5
    80009420:	17c6                	sll	a5,a5,0x31
    80009422:	93c5                	srl	a5,a5,0x31
    80009424:	00f70463          	beq	a4,a5,8000942c <tinst_tests+0x1fa2>
    80009428:	af4fe06f          	j	8000771c <tinst_tests+0x292>
    8000942c:	b04fe06f          	j	80007730 <tinst_tests+0x2a6>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    80009430:	00013597          	auipc	a1,0x13
    80009434:	6a058593          	add	a1,a1,1696 # 8001cad0 <__func__.1+0x2d8>
    80009438:	cd9fe06f          	j	80008110 <tinst_tests+0xc86>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    8000943c:	7018                	ld	a4,32(s0)
    8000943e:	e319                	bnez	a4,80009444 <tinst_tests+0x1fba>
    80009440:	b96fe06f          	j	800077d6 <tinst_tests+0x34c>
    80009444:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009446:	0016f793          	and	a5,a3,1
    8000944a:	fbb5                	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000944c:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009450:	460d                	li	a2,3
    80009452:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009456:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009458:	00c59863          	bne	a1,a2,80009468 <tinst_tests+0x1fde>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000945c:	0026d683          	lhu	a3,2(a3)
    80009460:	0106969b          	sllw	a3,a3,0x10
    80009464:	8fd5                	or	a5,a5,a3
    80009466:	2781                	sext.w	a5,a5
    80009468:	17c6                	sll	a5,a5,0x31
    8000946a:	93c5                	srl	a5,a5,0x31
    8000946c:	00f70463          	beq	a4,a5,80009474 <tinst_tests+0x1fea>
    80009470:	b52fe06f          	j	800077c2 <tinst_tests+0x338>
    80009474:	b62fe06f          	j	800077d6 <tinst_tests+0x34c>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    80009478:	00013597          	auipc	a1,0x13
    8000947c:	65858593          	add	a1,a1,1624 # 8001cad0 <__func__.1+0x2d8>
    80009480:	d37fe06f          	j	800081b6 <tinst_tests+0xd2c>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    80009484:	7018                	ld	a4,32(s0)
    80009486:	e319                	bnez	a4,8000948c <tinst_tests+0x2002>
    80009488:	becfe06f          	j	80007874 <tinst_tests+0x3ea>
    8000948c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000948e:	0016f793          	and	a5,a3,1
    80009492:	f795                	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009494:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009498:	460d                	li	a2,3
    8000949a:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000949e:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    800094a0:	00c59863          	bne	a1,a2,800094b0 <tinst_tests+0x2026>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800094a4:	0026d683          	lhu	a3,2(a3)
    800094a8:	0106969b          	sllw	a3,a3,0x10
    800094ac:	8fd5                	or	a5,a5,a3
    800094ae:	2781                	sext.w	a5,a5
    800094b0:	17c6                	sll	a5,a5,0x31
    800094b2:	93c5                	srl	a5,a5,0x31
    800094b4:	00f70463          	beq	a4,a5,800094bc <tinst_tests+0x2032>
    800094b8:	ba8fe06f          	j	80007860 <tinst_tests+0x3d6>
    800094bc:	bb8fe06f          	j	80007874 <tinst_tests+0x3ea>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    800094c0:	00013597          	auipc	a1,0x13
    800094c4:	61058593          	add	a1,a1,1552 # 8001cad0 <__func__.1+0x2d8>
    800094c8:	d95fe06f          	j	8000825c <tinst_tests+0xdd2>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    800094cc:	7018                	ld	a4,32(s0)
    800094ce:	e319                	bnez	a4,800094d4 <tinst_tests+0x204a>
    800094d0:	c42fe06f          	j	80007912 <tinst_tests+0x488>
    800094d4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800094d6:	0016f793          	and	a5,a3,1
    800094da:	ee0792e3          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    800094de:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800094e2:	460d                	li	a2,3
    800094e4:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    800094e8:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    800094ea:	00c59863          	bne	a1,a2,800094fa <tinst_tests+0x2070>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800094ee:	0026d683          	lhu	a3,2(a3)
    800094f2:	0106969b          	sllw	a3,a3,0x10
    800094f6:	8fd5                	or	a5,a5,a3
    800094f8:	2781                	sext.w	a5,a5
    800094fa:	17c6                	sll	a5,a5,0x31
    800094fc:	93c5                	srl	a5,a5,0x31
    800094fe:	00f70463          	beq	a4,a5,80009506 <tinst_tests+0x207c>
    80009502:	bfcfe06f          	j	800078fe <tinst_tests+0x474>
    80009506:	c0cfe06f          	j	80007912 <tinst_tests+0x488>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    8000950a:	7018                	ld	a4,32(s0)
    8000950c:	00013597          	auipc	a1,0x13
    80009510:	5b458593          	add	a1,a1,1460 # 8001cac0 <__func__.1+0x2c8>
    80009514:	e319                	bnez	a4,8000951a <tinst_tests+0x2090>
    80009516:	89cfe06f          	j	800075b2 <tinst_tests+0x128>
    8000951a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000951c:	0016f793          	and	a5,a3,1
    80009520:	e8079fe3          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009524:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009528:	460d                	li	a2,3
    8000952a:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000952e:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009530:	00c59863          	bne	a1,a2,80009540 <tinst_tests+0x20b6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009534:	0026d683          	lhu	a3,2(a3)
    80009538:	0106969b          	sllw	a3,a3,0x10
    8000953c:	8fd5                	or	a5,a5,a3
    8000953e:	2781                	sext.w	a5,a5
    80009540:	17c6                	sll	a5,a5,0x31
    80009542:	93c5                	srl	a5,a5,0x31
    80009544:	00013597          	auipc	a1,0x13
    80009548:	58c58593          	add	a1,a1,1420 # 8001cad0 <__func__.1+0x2d8>
    8000954c:	00f70463          	beq	a4,a5,80009554 <tinst_tests+0x20ca>
    80009550:	862fe06f          	j	800075b2 <tinst_tests+0x128>
    80009554:	00013597          	auipc	a1,0x13
    80009558:	56c58593          	add	a1,a1,1388 # 8001cac0 <__func__.1+0x2c8>
    8000955c:	856fe06f          	j	800075b2 <tinst_tests+0x128>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    80009560:	00013597          	auipc	a1,0x13
    80009564:	57058593          	add	a1,a1,1392 # 8001cad0 <__func__.1+0x2d8>
    80009568:	d9bfe06f          	j	80008302 <tinst_tests+0xe78>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    8000956c:	701c                	ld	a5,32(s0)
    8000956e:	e399                	bnez	a5,80009574 <tinst_tests+0x20ea>
    80009570:	c42fe06f          	j	800079b2 <tinst_tests+0x528>
    80009574:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009576:	0016f713          	and	a4,a3,1
    8000957a:	e40712e3          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000957e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009582:	460d                	li	a2,3
    80009584:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    80009588:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000958a:	00c59863          	bne	a1,a2,8000959a <tinst_tests+0x2110>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000958e:	0026d683          	lhu	a3,2(a3)
    80009592:	0106969b          	sllw	a3,a3,0x10
    80009596:	8f55                	or	a4,a4,a3
    80009598:	2701                	sext.w	a4,a4
    8000959a:	01f076b7          	lui	a3,0x1f07
    8000959e:	07f68693          	add	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    800095a2:	8f75                	and	a4,a4,a3
    800095a4:	00e78463          	beq	a5,a4,800095ac <tinst_tests+0x2122>
    800095a8:	bf6fe06f          	j	8000799e <tinst_tests+0x514>
    800095ac:	c06fe06f          	j	800079b2 <tinst_tests+0x528>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    800095b0:	7018                	ld	a4,32(s0)
    800095b2:	00013597          	auipc	a1,0x13
    800095b6:	50e58593          	add	a1,a1,1294 # 8001cac0 <__func__.1+0x2c8>
    800095ba:	e319                	bnez	a4,800095c0 <tinst_tests+0x2136>
    800095bc:	89cfe06f          	j	80007658 <tinst_tests+0x1ce>
    800095c0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800095c2:	0016f793          	and	a5,a3,1
    800095c6:	de079ce3          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    800095ca:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800095ce:	460d                	li	a2,3
    800095d0:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    800095d4:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    800095d6:	00c59863          	bne	a1,a2,800095e6 <tinst_tests+0x215c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800095da:	0026d683          	lhu	a3,2(a3)
    800095de:	0106969b          	sllw	a3,a3,0x10
    800095e2:	8fd5                	or	a5,a5,a3
    800095e4:	2781                	sext.w	a5,a5
    800095e6:	17c6                	sll	a5,a5,0x31
    800095e8:	93c5                	srl	a5,a5,0x31
    800095ea:	00013597          	auipc	a1,0x13
    800095ee:	4e658593          	add	a1,a1,1254 # 8001cad0 <__func__.1+0x2d8>
    800095f2:	00f70463          	beq	a4,a5,800095fa <tinst_tests+0x2170>
    800095f6:	862fe06f          	j	80007658 <tinst_tests+0x1ce>
    800095fa:	00013597          	auipc	a1,0x13
    800095fe:	4c658593          	add	a1,a1,1222 # 8001cac0 <__func__.1+0x2c8>
    80009602:	856fe06f          	j	80007658 <tinst_tests+0x1ce>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    80009606:	00013597          	auipc	a1,0x13
    8000960a:	4ca58593          	add	a1,a1,1226 # 8001cad0 <__func__.1+0x2d8>
    8000960e:	d9bfe06f          	j	800083a8 <tinst_tests+0xf1e>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    80009612:	701c                	ld	a5,32(s0)
    80009614:	e399                	bnez	a5,8000961a <tinst_tests+0x2190>
    80009616:	c40fe06f          	j	80007a56 <tinst_tests+0x5cc>
    8000961a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000961c:	0016f713          	and	a4,a3,1
    80009620:	d8071fe3          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009624:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009628:	460d                	li	a2,3
    8000962a:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    8000962e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009630:	00c59863          	bne	a1,a2,80009640 <tinst_tests+0x21b6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009634:	0026d683          	lhu	a3,2(a3)
    80009638:	0106969b          	sllw	a3,a3,0x10
    8000963c:	8f55                	or	a4,a4,a3
    8000963e:	2701                	sext.w	a4,a4
    80009640:	01f076b7          	lui	a3,0x1f07
    80009644:	07f68693          	add	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009648:	8f75                	and	a4,a4,a3
    8000964a:	00e78463          	beq	a5,a4,80009652 <tinst_tests+0x21c8>
    8000964e:	bf4fe06f          	j	80007a42 <tinst_tests+0x5b8>
    80009652:	c04fe06f          	j	80007a56 <tinst_tests+0x5cc>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    80009656:	7018                	ld	a4,32(s0)
    80009658:	00013597          	auipc	a1,0x13
    8000965c:	46858593          	add	a1,a1,1128 # 8001cac0 <__func__.1+0x2c8>
    80009660:	e319                	bnez	a4,80009666 <tinst_tests+0x21dc>
    80009662:	89cfe06f          	j	800076fe <tinst_tests+0x274>
    80009666:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009668:	0016f793          	and	a5,a3,1
    8000966c:	d40799e3          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009670:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009674:	460d                	li	a2,3
    80009676:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000967a:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000967c:	00c59863          	bne	a1,a2,8000968c <tinst_tests+0x2202>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009680:	0026d683          	lhu	a3,2(a3)
    80009684:	0106969b          	sllw	a3,a3,0x10
    80009688:	8fd5                	or	a5,a5,a3
    8000968a:	2781                	sext.w	a5,a5
    8000968c:	17c6                	sll	a5,a5,0x31
    8000968e:	93c5                	srl	a5,a5,0x31
    80009690:	00013597          	auipc	a1,0x13
    80009694:	44058593          	add	a1,a1,1088 # 8001cad0 <__func__.1+0x2d8>
    80009698:	00f70463          	beq	a4,a5,800096a0 <tinst_tests+0x2216>
    8000969c:	862fe06f          	j	800076fe <tinst_tests+0x274>
    800096a0:	00013597          	auipc	a1,0x13
    800096a4:	42058593          	add	a1,a1,1056 # 8001cac0 <__func__.1+0x2c8>
    800096a8:	856fe06f          	j	800076fe <tinst_tests+0x274>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    800096ac:	00013597          	auipc	a1,0x13
    800096b0:	42458593          	add	a1,a1,1060 # 8001cad0 <__func__.1+0x2d8>
    800096b4:	d9bfe06f          	j	8000844e <tinst_tests+0xfc4>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    800096b8:	701c                	ld	a5,32(s0)
    800096ba:	e399                	bnez	a5,800096c0 <tinst_tests+0x2236>
    800096bc:	c40fe06f          	j	80007afc <tinst_tests+0x672>
    800096c0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800096c2:	0016f713          	and	a4,a3,1
    800096c6:	ce071ce3          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    800096ca:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800096ce:	460d                	li	a2,3
    800096d0:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    800096d4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800096d6:	00c59863          	bne	a1,a2,800096e6 <tinst_tests+0x225c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800096da:	0026d683          	lhu	a3,2(a3)
    800096de:	0106969b          	sllw	a3,a3,0x10
    800096e2:	8f55                	or	a4,a4,a3
    800096e4:	2701                	sext.w	a4,a4
    800096e6:	01f076b7          	lui	a3,0x1f07
    800096ea:	07f68693          	add	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    800096ee:	8f75                	and	a4,a4,a3
    800096f0:	00e78463          	beq	a5,a4,800096f8 <tinst_tests+0x226e>
    800096f4:	bf4fe06f          	j	80007ae8 <tinst_tests+0x65e>
    800096f8:	c04fe06f          	j	80007afc <tinst_tests+0x672>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    800096fc:	7018                	ld	a4,32(s0)
    800096fe:	00013597          	auipc	a1,0x13
    80009702:	3c258593          	add	a1,a1,962 # 8001cac0 <__func__.1+0x2c8>
    80009706:	e319                	bnez	a4,8000970c <tinst_tests+0x2282>
    80009708:	89cfe06f          	j	800077a4 <tinst_tests+0x31a>
    8000970c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000970e:	0016f793          	and	a5,a3,1
    80009712:	ca0796e3          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009716:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000971a:	460d                	li	a2,3
    8000971c:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009720:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009722:	00c59863          	bne	a1,a2,80009732 <tinst_tests+0x22a8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009726:	0026d683          	lhu	a3,2(a3)
    8000972a:	0106969b          	sllw	a3,a3,0x10
    8000972e:	8fd5                	or	a5,a5,a3
    80009730:	2781                	sext.w	a5,a5
    80009732:	17c6                	sll	a5,a5,0x31
    80009734:	93c5                	srl	a5,a5,0x31
    80009736:	00013597          	auipc	a1,0x13
    8000973a:	39a58593          	add	a1,a1,922 # 8001cad0 <__func__.1+0x2d8>
    8000973e:	00f70463          	beq	a4,a5,80009746 <tinst_tests+0x22bc>
    80009742:	862fe06f          	j	800077a4 <tinst_tests+0x31a>
    80009746:	00013597          	auipc	a1,0x13
    8000974a:	37a58593          	add	a1,a1,890 # 8001cac0 <__func__.1+0x2c8>
    8000974e:	856fe06f          	j	800077a4 <tinst_tests+0x31a>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    80009752:	00013597          	auipc	a1,0x13
    80009756:	37e58593          	add	a1,a1,894 # 8001cad0 <__func__.1+0x2d8>
    8000975a:	d9ffe06f          	j	800084f8 <tinst_tests+0x106e>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    8000975e:	701c                	ld	a5,32(s0)
    80009760:	e399                	bnez	a5,80009766 <tinst_tests+0x22dc>
    80009762:	c42fe06f          	j	80007ba4 <tinst_tests+0x71a>
    80009766:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009768:	0016f713          	and	a4,a3,1
    8000976c:	c40719e3          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009770:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009774:	460d                	li	a2,3
    80009776:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    8000977a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000977c:	00c59863          	bne	a1,a2,8000978c <tinst_tests+0x2302>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009780:	0026d683          	lhu	a3,2(a3)
    80009784:	0106969b          	sllw	a3,a3,0x10
    80009788:	8f55                	or	a4,a4,a3
    8000978a:	2701                	sext.w	a4,a4
    8000978c:	01f076b7          	lui	a3,0x1f07
    80009790:	07f68693          	add	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009794:	8f75                	and	a4,a4,a3
    80009796:	00e78463          	beq	a5,a4,8000979e <tinst_tests+0x2314>
    8000979a:	bf6fe06f          	j	80007b90 <tinst_tests+0x706>
    8000979e:	c06fe06f          	j	80007ba4 <tinst_tests+0x71a>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    800097a2:	7018                	ld	a4,32(s0)
    800097a4:	00013597          	auipc	a1,0x13
    800097a8:	31c58593          	add	a1,a1,796 # 8001cac0 <__func__.1+0x2c8>
    800097ac:	e319                	bnez	a4,800097b2 <tinst_tests+0x2328>
    800097ae:	894fe06f          	j	80007842 <tinst_tests+0x3b8>
    800097b2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800097b4:	0016f793          	and	a5,a3,1
    800097b8:	c00793e3          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    800097bc:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800097c0:	460d                	li	a2,3
    800097c2:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    800097c6:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    800097c8:	00c59863          	bne	a1,a2,800097d8 <tinst_tests+0x234e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800097cc:	0026d683          	lhu	a3,2(a3)
    800097d0:	0106969b          	sllw	a3,a3,0x10
    800097d4:	8fd5                	or	a5,a5,a3
    800097d6:	2781                	sext.w	a5,a5
    800097d8:	17c6                	sll	a5,a5,0x31
    800097da:	93c5                	srl	a5,a5,0x31
    800097dc:	00013597          	auipc	a1,0x13
    800097e0:	2f458593          	add	a1,a1,756 # 8001cad0 <__func__.1+0x2d8>
    800097e4:	00f70463          	beq	a4,a5,800097ec <tinst_tests+0x2362>
    800097e8:	85afe06f          	j	80007842 <tinst_tests+0x3b8>
    800097ec:	00013597          	auipc	a1,0x13
    800097f0:	2d458593          	add	a1,a1,724 # 8001cac0 <__func__.1+0x2c8>
    800097f4:	84efe06f          	j	80007842 <tinst_tests+0x3b8>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    800097f8:	00013597          	auipc	a1,0x13
    800097fc:	2d858593          	add	a1,a1,728 # 8001cad0 <__func__.1+0x2d8>
    80009800:	d9ffe06f          	j	8000859e <tinst_tests+0x1114>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80009804:	7004                	ld	s1,32(s0)
    80009806:	e099                	bnez	s1,8000980c <tinst_tests+0x2382>
    80009808:	c34fe06f          	j	80007c3c <tinst_tests+0x7b2>
    8000980c:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000980e:	0017f713          	and	a4,a5,1
    80009812:	ba0716e3          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009816:	0007d503          	lhu	a0,0(a5)
    8000981a:	a2ff70ef          	jal	80001248 <expand_compressed_instruction>
    8000981e:	67a1                	lui	a5,0x8
    80009820:	17f5                	add	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    80009822:	8fe9                	and	a5,a5,a0
    80009824:	1782                	sll	a5,a5,0x20
    80009826:	9381                	srl	a5,a5,0x20
    80009828:	00f48463          	beq	s1,a5,80009830 <tinst_tests+0x23a6>
    8000982c:	bfcfe06f          	j	80007c28 <tinst_tests+0x79e>
    80009830:	c0cfe06f          	j	80007c3c <tinst_tests+0x7b2>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    80009834:	7018                	ld	a4,32(s0)
    80009836:	00013597          	auipc	a1,0x13
    8000983a:	28a58593          	add	a1,a1,650 # 8001cac0 <__func__.1+0x2c8>
    8000983e:	e319                	bnez	a4,80009844 <tinst_tests+0x23ba>
    80009840:	8a0fe06f          	j	800078e0 <tinst_tests+0x456>
    80009844:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009846:	0016f793          	and	a5,a3,1
    8000984a:	b6079ae3          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000984e:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009852:	460d                	li	a2,3
    80009854:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009858:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000985a:	00c59863          	bne	a1,a2,8000986a <tinst_tests+0x23e0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000985e:	0026d683          	lhu	a3,2(a3)
    80009862:	0106969b          	sllw	a3,a3,0x10
    80009866:	8fd5                	or	a5,a5,a3
    80009868:	2781                	sext.w	a5,a5
    8000986a:	17c6                	sll	a5,a5,0x31
    8000986c:	93c5                	srl	a5,a5,0x31
    8000986e:	00013597          	auipc	a1,0x13
    80009872:	26258593          	add	a1,a1,610 # 8001cad0 <__func__.1+0x2d8>
    80009876:	00f70463          	beq	a4,a5,8000987e <tinst_tests+0x23f4>
    8000987a:	866fe06f          	j	800078e0 <tinst_tests+0x456>
    8000987e:	00013597          	auipc	a1,0x13
    80009882:	24258593          	add	a1,a1,578 # 8001cac0 <__func__.1+0x2c8>
    80009886:	85afe06f          	j	800078e0 <tinst_tests+0x456>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000988a:	00013597          	auipc	a1,0x13
    8000988e:	24658593          	add	a1,a1,582 # 8001cad0 <__func__.1+0x2d8>
    80009892:	db3fe06f          	j	80008644 <tinst_tests+0x11ba>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    80009896:	02043983          	ld	s3,32(s0)
    8000989a:	00099463          	bnez	s3,800098a2 <tinst_tests+0x2418>
    8000989e:	c38fe06f          	j	80007cd6 <tinst_tests+0x84c>
    800098a2:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    800098a4:	0017f713          	and	a4,a5,1
    800098a8:	b0071be3          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    800098ac:	0007d503          	lhu	a0,0(a5)
    800098b0:	999f70ef          	jal	80001248 <expand_compressed_instruction>
    800098b4:	67a1                	lui	a5,0x8
    800098b6:	17f5                	add	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    800098b8:	8fe9                	and	a5,a5,a0
    800098ba:	1782                	sll	a5,a5,0x20
    800098bc:	9381                	srl	a5,a5,0x20
    800098be:	00f98463          	beq	s3,a5,800098c6 <tinst_tests+0x243c>
    800098c2:	c00fe06f          	j	80007cc2 <tinst_tests+0x838>
    800098c6:	c10fe06f          	j	80007cd6 <tinst_tests+0x84c>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    800098ca:	701c                	ld	a5,32(s0)
    800098cc:	00013597          	auipc	a1,0x13
    800098d0:	1f458593          	add	a1,a1,500 # 8001cac0 <__func__.1+0x2c8>
    800098d4:	e399                	bnez	a5,800098da <tinst_tests+0x2450>
    800098d6:	8aafe06f          	j	80007980 <tinst_tests+0x4f6>
    800098da:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800098dc:	0016f713          	and	a4,a3,1
    800098e0:	ac071fe3          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    800098e4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800098e8:	460d                	li	a2,3
    800098ea:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    800098ee:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800098f0:	00c59863          	bne	a1,a2,80009900 <tinst_tests+0x2476>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800098f4:	0026d683          	lhu	a3,2(a3)
    800098f8:	0106969b          	sllw	a3,a3,0x10
    800098fc:	8f55                	or	a4,a4,a3
    800098fe:	2701                	sext.w	a4,a4
    80009900:	01f076b7          	lui	a3,0x1f07
    80009904:	07f68693          	add	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009908:	8f75                	and	a4,a4,a3
    8000990a:	00013597          	auipc	a1,0x13
    8000990e:	1c658593          	add	a1,a1,454 # 8001cad0 <__func__.1+0x2d8>
    80009912:	00e78463          	beq	a5,a4,8000991a <tinst_tests+0x2490>
    80009916:	86afe06f          	j	80007980 <tinst_tests+0x4f6>
    8000991a:	00013597          	auipc	a1,0x13
    8000991e:	1a658593          	add	a1,a1,422 # 8001cac0 <__func__.1+0x2c8>
    80009922:	85efe06f          	j	80007980 <tinst_tests+0x4f6>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    80009926:	00013597          	auipc	a1,0x13
    8000992a:	1aa58593          	add	a1,a1,426 # 8001cad0 <__func__.1+0x2d8>
    8000992e:	dbdfe06f          	j	800086ea <tinst_tests+0x1260>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80009932:	02043983          	ld	s3,32(s0)
    80009936:	00099463          	bnez	s3,8000993e <tinst_tests+0x24b4>
    8000993a:	c36fe06f          	j	80007d70 <tinst_tests+0x8e6>
    8000993e:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    80009940:	0017f713          	and	a4,a5,1
    80009944:	a6071de3          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009948:	0007d503          	lhu	a0,0(a5)
    8000994c:	8fdf70ef          	jal	80001248 <expand_compressed_instruction>
    80009950:	01f07737          	lui	a4,0x1f07
    80009954:	0005079b          	sext.w	a5,a0
    80009958:	07d70713          	add	a4,a4,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000995c:	8ff9                	and	a5,a5,a4
    8000995e:	00f98463          	beq	s3,a5,80009966 <tinst_tests+0x24dc>
    80009962:	bfafe06f          	j	80007d5c <tinst_tests+0x8d2>
    80009966:	c0afe06f          	j	80007d70 <tinst_tests+0x8e6>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    8000996a:	701c                	ld	a5,32(s0)
    8000996c:	00013597          	auipc	a1,0x13
    80009970:	15458593          	add	a1,a1,340 # 8001cac0 <__func__.1+0x2c8>
    80009974:	e399                	bnez	a5,8000997a <tinst_tests+0x24f0>
    80009976:	8aefe06f          	j	80007a24 <tinst_tests+0x59a>
    8000997a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000997c:	0016f713          	and	a4,a3,1
    80009980:	a2071fe3          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009984:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009988:	460d                	li	a2,3
    8000998a:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    8000998e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009990:	00c59863          	bne	a1,a2,800099a0 <tinst_tests+0x2516>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009994:	0026d683          	lhu	a3,2(a3)
    80009998:	0106969b          	sllw	a3,a3,0x10
    8000999c:	8f55                	or	a4,a4,a3
    8000999e:	2701                	sext.w	a4,a4
    800099a0:	01f076b7          	lui	a3,0x1f07
    800099a4:	07f68693          	add	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    800099a8:	8f75                	and	a4,a4,a3
    800099aa:	00013597          	auipc	a1,0x13
    800099ae:	12658593          	add	a1,a1,294 # 8001cad0 <__func__.1+0x2d8>
    800099b2:	00e78463          	beq	a5,a4,800099ba <tinst_tests+0x2530>
    800099b6:	86efe06f          	j	80007a24 <tinst_tests+0x59a>
    800099ba:	00013597          	auipc	a1,0x13
    800099be:	10658593          	add	a1,a1,262 # 8001cac0 <__func__.1+0x2c8>
    800099c2:	862fe06f          	j	80007a24 <tinst_tests+0x59a>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    800099c6:	00013597          	auipc	a1,0x13
    800099ca:	10a58593          	add	a1,a1,266 # 8001cad0 <__func__.1+0x2d8>
    800099ce:	dc3fe06f          	j	80008790 <tinst_tests+0x1306>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    800099d2:	7004                	ld	s1,32(s0)
    800099d4:	e099                	bnez	s1,800099da <tinst_tests+0x2550>
    800099d6:	c3cfe06f          	j	80007e12 <tinst_tests+0x988>
    800099da:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    800099dc:	0017f713          	and	a4,a5,1
    800099e0:	9c071fe3          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    800099e4:	0007d503          	lhu	a0,0(a5)
    800099e8:	861f70ef          	jal	80001248 <expand_compressed_instruction>
    800099ec:	01f07737          	lui	a4,0x1f07
    800099f0:	0005079b          	sext.w	a5,a0
    800099f4:	07d70713          	add	a4,a4,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    800099f8:	8ff9                	and	a5,a5,a4
    800099fa:	00f48463          	beq	s1,a5,80009a02 <tinst_tests+0x2578>
    800099fe:	c00fe06f          	j	80007dfe <tinst_tests+0x974>
    80009a02:	c10fe06f          	j	80007e12 <tinst_tests+0x988>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    80009a06:	701c                	ld	a5,32(s0)
    80009a08:	00013597          	auipc	a1,0x13
    80009a0c:	0b858593          	add	a1,a1,184 # 8001cac0 <__func__.1+0x2c8>
    80009a10:	e399                	bnez	a5,80009a16 <tinst_tests+0x258c>
    80009a12:	8b8fe06f          	j	80007aca <tinst_tests+0x640>
    80009a16:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009a18:	0016f713          	and	a4,a3,1
    80009a1c:	9a0711e3          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009a20:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009a24:	460d                	li	a2,3
    80009a26:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    80009a2a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009a2c:	00c59863          	bne	a1,a2,80009a3c <tinst_tests+0x25b2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009a30:	0026d683          	lhu	a3,2(a3)
    80009a34:	0106969b          	sllw	a3,a3,0x10
    80009a38:	8f55                	or	a4,a4,a3
    80009a3a:	2701                	sext.w	a4,a4
    80009a3c:	01f076b7          	lui	a3,0x1f07
    80009a40:	07f68693          	add	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009a44:	8f75                	and	a4,a4,a3
    80009a46:	00013597          	auipc	a1,0x13
    80009a4a:	08a58593          	add	a1,a1,138 # 8001cad0 <__func__.1+0x2d8>
    80009a4e:	00e78463          	beq	a5,a4,80009a56 <tinst_tests+0x25cc>
    80009a52:	878fe06f          	j	80007aca <tinst_tests+0x640>
    80009a56:	00013597          	auipc	a1,0x13
    80009a5a:	06a58593          	add	a1,a1,106 # 8001cac0 <__func__.1+0x2c8>
    80009a5e:	86cfe06f          	j	80007aca <tinst_tests+0x640>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    80009a62:	00013597          	auipc	a1,0x13
    80009a66:	06e58593          	add	a1,a1,110 # 8001cad0 <__func__.1+0x2d8>
    80009a6a:	dcdfe06f          	j	80008836 <tinst_tests+0x13ac>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    80009a6e:	00013597          	auipc	a1,0x13
    80009a72:	06258593          	add	a1,a1,98 # 8001cad0 <__func__.1+0x2d8>
    80009a76:	e5ffe06f          	j	800088d4 <tinst_tests+0x144a>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    80009a7a:	00013597          	auipc	a1,0x13
    80009a7e:	05658593          	add	a1,a1,86 # 8001cad0 <__func__.1+0x2d8>
    80009a82:	ef1fe06f          	j	80008972 <tinst_tests+0x14e8>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    80009a86:	00013597          	auipc	a1,0x13
    80009a8a:	04a58593          	add	a1,a1,74 # 8001cad0 <__func__.1+0x2d8>
    80009a8e:	f83fe06f          	j	80008a10 <tinst_tests+0x1586>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    80009a92:	701c                	ld	a5,32(s0)
    80009a94:	e399                	bnez	a5,80009a9a <tinst_tests+0x2610>
    80009a96:	e06fe06f          	j	8000809c <tinst_tests+0xc12>
    80009a9a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009a9c:	0016f713          	and	a4,a3,1
    80009aa0:	90071fe3          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009aa4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009aa8:	460d                	li	a2,3
    80009aaa:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    80009aae:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009ab0:	00c59863          	bne	a1,a2,80009ac0 <tinst_tests+0x2636>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009ab4:	0026d683          	lhu	a3,2(a3)
    80009ab8:	0106969b          	sllw	a3,a3,0x10
    80009abc:	8f55                	or	a4,a4,a3
    80009abe:	2701                	sext.w	a4,a4
    80009ac0:	1702                	sll	a4,a4,0x20
    80009ac2:	fff086b7          	lui	a3,0xfff08
    80009ac6:	9301                	srl	a4,a4,0x20
    80009ac8:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009aca:	8f75                	and	a4,a4,a3
    80009acc:	00e78463          	beq	a5,a4,80009ad4 <tinst_tests+0x264a>
    80009ad0:	db8fe06f          	j	80008088 <tinst_tests+0xbfe>
    80009ad4:	dc8fe06f          	j	8000809c <tinst_tests+0xc12>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    80009ad8:	00013597          	auipc	a1,0x13
    80009adc:	ff858593          	add	a1,a1,-8 # 8001cad0 <__func__.1+0x2d8>
    80009ae0:	fcffe06f          	j	80008aae <tinst_tests+0x1624>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    80009ae4:	7018                	ld	a4,32(s0)
    80009ae6:	e319                	bnez	a4,80009aec <tinst_tests+0x2662>
    80009ae8:	e5afe06f          	j	80008142 <tinst_tests+0xcb8>
    80009aec:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009aee:	0016f793          	and	a5,a3,1
    80009af2:	8c0796e3          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009af6:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009afa:	460d                	li	a2,3
    80009afc:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009b00:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009b02:	00c59863          	bne	a1,a2,80009b12 <tinst_tests+0x2688>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009b06:	0026d683          	lhu	a3,2(a3)
    80009b0a:	0106969b          	sllw	a3,a3,0x10
    80009b0e:	8fd5                	or	a5,a5,a3
    80009b10:	2781                	sext.w	a5,a5
    80009b12:	1782                	sll	a5,a5,0x20
    80009b14:	fff086b7          	lui	a3,0xfff08
    80009b18:	9381                	srl	a5,a5,0x20
    80009b1a:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009b1c:	8ff5                	and	a5,a5,a3
    80009b1e:	00f70463          	beq	a4,a5,80009b26 <tinst_tests+0x269c>
    80009b22:	e0cfe06f          	j	8000812e <tinst_tests+0xca4>
    80009b26:	e1cfe06f          	j	80008142 <tinst_tests+0xcb8>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    80009b2a:	701c                	ld	a5,32(s0)
    80009b2c:	e399                	bnez	a5,80009b32 <tinst_tests+0x26a8>
    80009b2e:	ebafe06f          	j	800081e8 <tinst_tests+0xd5e>
    80009b32:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009b34:	0016f713          	and	a4,a3,1
    80009b38:	880713e3          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009b3c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009b40:	460d                	li	a2,3
    80009b42:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    80009b46:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009b48:	00c59863          	bne	a1,a2,80009b58 <tinst_tests+0x26ce>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009b4c:	0026d683          	lhu	a3,2(a3)
    80009b50:	0106969b          	sllw	a3,a3,0x10
    80009b54:	8f55                	or	a4,a4,a3
    80009b56:	2701                	sext.w	a4,a4
    80009b58:	1702                	sll	a4,a4,0x20
    80009b5a:	fff086b7          	lui	a3,0xfff08
    80009b5e:	9301                	srl	a4,a4,0x20
    80009b60:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009b62:	8f75                	and	a4,a4,a3
    80009b64:	00e78463          	beq	a5,a4,80009b6c <tinst_tests+0x26e2>
    80009b68:	e6cfe06f          	j	800081d4 <tinst_tests+0xd4a>
    80009b6c:	e7cfe06f          	j	800081e8 <tinst_tests+0xd5e>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    80009b70:	7018                	ld	a4,32(s0)
    80009b72:	e319                	bnez	a4,80009b78 <tinst_tests+0x26ee>
    80009b74:	f1afe06f          	j	8000828e <tinst_tests+0xe04>
    80009b78:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009b7a:	0016f793          	and	a5,a3,1
    80009b7e:	840790e3          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009b82:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009b86:	460d                	li	a2,3
    80009b88:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009b8c:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009b8e:	00c59863          	bne	a1,a2,80009b9e <tinst_tests+0x2714>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009b92:	0026d683          	lhu	a3,2(a3)
    80009b96:	0106969b          	sllw	a3,a3,0x10
    80009b9a:	8fd5                	or	a5,a5,a3
    80009b9c:	2781                	sext.w	a5,a5
    80009b9e:	1782                	sll	a5,a5,0x20
    80009ba0:	fff086b7          	lui	a3,0xfff08
    80009ba4:	9381                	srl	a5,a5,0x20
    80009ba6:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009ba8:	8ff5                	and	a5,a5,a3
    80009baa:	00f70463          	beq	a4,a5,80009bb2 <tinst_tests+0x2728>
    80009bae:	eccfe06f          	j	8000827a <tinst_tests+0xdf0>
    80009bb2:	edcfe06f          	j	8000828e <tinst_tests+0xe04>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    80009bb6:	7018                	ld	a4,32(s0)
    80009bb8:	e319                	bnez	a4,80009bbe <tinst_tests+0x2734>
    80009bba:	f7afe06f          	j	80008334 <tinst_tests+0xeaa>
    80009bbe:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009bc0:	0016f793          	and	a5,a3,1
    80009bc4:	fe079d63          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009bc8:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009bcc:	460d                	li	a2,3
    80009bce:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009bd2:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009bd4:	00c59863          	bne	a1,a2,80009be4 <tinst_tests+0x275a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009bd8:	0026d683          	lhu	a3,2(a3)
    80009bdc:	0106969b          	sllw	a3,a3,0x10
    80009be0:	8fd5                	or	a5,a5,a3
    80009be2:	2781                	sext.w	a5,a5
    80009be4:	1782                	sll	a5,a5,0x20
    80009be6:	fff086b7          	lui	a3,0xfff08
    80009bea:	9381                	srl	a5,a5,0x20
    80009bec:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009bee:	8ff5                	and	a5,a5,a3
    80009bf0:	00f70463          	beq	a4,a5,80009bf8 <tinst_tests+0x276e>
    80009bf4:	f2cfe06f          	j	80008320 <tinst_tests+0xe96>
    80009bf8:	f3cfe06f          	j	80008334 <tinst_tests+0xeaa>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    80009bfc:	701c                	ld	a5,32(s0)
    80009bfe:	e399                	bnez	a5,80009c04 <tinst_tests+0x277a>
    80009c00:	fdafe06f          	j	800083da <tinst_tests+0xf50>
    80009c04:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009c06:	0016f713          	and	a4,a3,1
    80009c0a:	fa071a63          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009c0e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009c12:	460d                	li	a2,3
    80009c14:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    80009c18:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009c1a:	00c59863          	bne	a1,a2,80009c2a <tinst_tests+0x27a0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009c1e:	0026d683          	lhu	a3,2(a3)
    80009c22:	0106969b          	sllw	a3,a3,0x10
    80009c26:	8f55                	or	a4,a4,a3
    80009c28:	2701                	sext.w	a4,a4
    80009c2a:	1702                	sll	a4,a4,0x20
    80009c2c:	fff086b7          	lui	a3,0xfff08
    80009c30:	9301                	srl	a4,a4,0x20
    80009c32:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009c34:	8f75                	and	a4,a4,a3
    80009c36:	00e78463          	beq	a5,a4,80009c3e <tinst_tests+0x27b4>
    80009c3a:	f8cfe06f          	j	800083c6 <tinst_tests+0xf3c>
    80009c3e:	f9cfe06f          	j	800083da <tinst_tests+0xf50>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    80009c42:	701c                	ld	a5,32(s0)
    80009c44:	e399                	bnez	a5,80009c4a <tinst_tests+0x27c0>
    80009c46:	83bfe06f          	j	80008480 <tinst_tests+0xff6>
    80009c4a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009c4c:	0016f713          	and	a4,a3,1
    80009c50:	f6071763          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009c54:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009c58:	460d                	li	a2,3
    80009c5a:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    80009c5e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009c60:	00c59863          	bne	a1,a2,80009c70 <tinst_tests+0x27e6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009c64:	0026d683          	lhu	a3,2(a3)
    80009c68:	0106969b          	sllw	a3,a3,0x10
    80009c6c:	8f55                	or	a4,a4,a3
    80009c6e:	2701                	sext.w	a4,a4
    80009c70:	1702                	sll	a4,a4,0x20
    80009c72:	fff086b7          	lui	a3,0xfff08
    80009c76:	9301                	srl	a4,a4,0x20
    80009c78:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009c7a:	8f75                	and	a4,a4,a3
    80009c7c:	00e78463          	beq	a5,a4,80009c84 <tinst_tests+0x27fa>
    80009c80:	fecfe06f          	j	8000846c <tinst_tests+0xfe2>
    80009c84:	ffcfe06f          	j	80008480 <tinst_tests+0xff6>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    80009c88:	701c                	ld	a5,32(s0)
    80009c8a:	00013597          	auipc	a1,0x13
    80009c8e:	e3658593          	add	a1,a1,-458 # 8001cac0 <__func__.1+0x2c8>
    80009c92:	e399                	bnez	a5,80009c98 <tinst_tests+0x280e>
    80009c94:	c7cfe06f          	j	80008110 <tinst_tests+0xc86>
    80009c98:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009c9a:	0016f713          	and	a4,a3,1
    80009c9e:	f2071063          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009ca2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009ca6:	460d                	li	a2,3
    80009ca8:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    80009cac:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009cae:	00c59863          	bne	a1,a2,80009cbe <tinst_tests+0x2834>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009cb2:	0026d683          	lhu	a3,2(a3)
    80009cb6:	0106969b          	sllw	a3,a3,0x10
    80009cba:	8f55                	or	a4,a4,a3
    80009cbc:	2701                	sext.w	a4,a4
    80009cbe:	1702                	sll	a4,a4,0x20
    80009cc0:	fff086b7          	lui	a3,0xfff08
    80009cc4:	9301                	srl	a4,a4,0x20
    80009cc6:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009cc8:	8f75                	and	a4,a4,a3
    80009cca:	00013597          	auipc	a1,0x13
    80009cce:	e0658593          	add	a1,a1,-506 # 8001cad0 <__func__.1+0x2d8>
    80009cd2:	00e78463          	beq	a5,a4,80009cda <tinst_tests+0x2850>
    80009cd6:	c3afe06f          	j	80008110 <tinst_tests+0xc86>
    80009cda:	00013597          	auipc	a1,0x13
    80009cde:	de658593          	add	a1,a1,-538 # 8001cac0 <__func__.1+0x2c8>
    80009ce2:	c2efe06f          	j	80008110 <tinst_tests+0xc86>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    80009ce6:	7018                	ld	a4,32(s0)
    80009ce8:	e319                	bnez	a4,80009cee <tinst_tests+0x2864>
    80009cea:	841fe06f          	j	8000852a <tinst_tests+0x10a0>
    80009cee:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009cf0:	0016f793          	and	a5,a3,1
    80009cf4:	ec079563          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009cf8:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009cfc:	460d                	li	a2,3
    80009cfe:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009d02:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009d04:	00c59863          	bne	a1,a2,80009d14 <tinst_tests+0x288a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009d08:	0026d683          	lhu	a3,2(a3)
    80009d0c:	0106969b          	sllw	a3,a3,0x10
    80009d10:	8fd5                	or	a5,a5,a3
    80009d12:	2781                	sext.w	a5,a5
    80009d14:	1782                	sll	a5,a5,0x20
    80009d16:	fff086b7          	lui	a3,0xfff08
    80009d1a:	9381                	srl	a5,a5,0x20
    80009d1c:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009d1e:	8ff5                	and	a5,a5,a3
    80009d20:	00f70463          	beq	a4,a5,80009d28 <tinst_tests+0x289e>
    80009d24:	ff2fe06f          	j	80008516 <tinst_tests+0x108c>
    80009d28:	803fe06f          	j	8000852a <tinst_tests+0x10a0>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    80009d2c:	701c                	ld	a5,32(s0)
    80009d2e:	00013597          	auipc	a1,0x13
    80009d32:	d9258593          	add	a1,a1,-622 # 8001cac0 <__func__.1+0x2c8>
    80009d36:	e399                	bnez	a5,80009d3c <tinst_tests+0x28b2>
    80009d38:	c7efe06f          	j	800081b6 <tinst_tests+0xd2c>
    80009d3c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009d3e:	0016f713          	and	a4,a3,1
    80009d42:	e6071e63          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009d46:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009d4a:	460d                	li	a2,3
    80009d4c:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    80009d50:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009d52:	00c59863          	bne	a1,a2,80009d62 <tinst_tests+0x28d8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009d56:	0026d683          	lhu	a3,2(a3)
    80009d5a:	0106969b          	sllw	a3,a3,0x10
    80009d5e:	8f55                	or	a4,a4,a3
    80009d60:	2701                	sext.w	a4,a4
    80009d62:	1702                	sll	a4,a4,0x20
    80009d64:	fff086b7          	lui	a3,0xfff08
    80009d68:	9301                	srl	a4,a4,0x20
    80009d6a:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009d6c:	8f75                	and	a4,a4,a3
    80009d6e:	00013597          	auipc	a1,0x13
    80009d72:	d6258593          	add	a1,a1,-670 # 8001cad0 <__func__.1+0x2d8>
    80009d76:	00e78463          	beq	a5,a4,80009d7e <tinst_tests+0x28f4>
    80009d7a:	c3cfe06f          	j	800081b6 <tinst_tests+0xd2c>
    80009d7e:	00013597          	auipc	a1,0x13
    80009d82:	d4258593          	add	a1,a1,-702 # 8001cac0 <__func__.1+0x2c8>
    80009d86:	c30fe06f          	j	800081b6 <tinst_tests+0xd2c>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    80009d8a:	7018                	ld	a4,32(s0)
    80009d8c:	e319                	bnez	a4,80009d92 <tinst_tests+0x2908>
    80009d8e:	843fe06f          	j	800085d0 <tinst_tests+0x1146>
    80009d92:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009d94:	0016f793          	and	a5,a3,1
    80009d98:	e2079363          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009d9c:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009da0:	460d                	li	a2,3
    80009da2:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009da6:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009da8:	00c59863          	bne	a1,a2,80009db8 <tinst_tests+0x292e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009dac:	0026d683          	lhu	a3,2(a3)
    80009db0:	0106969b          	sllw	a3,a3,0x10
    80009db4:	8fd5                	or	a5,a5,a3
    80009db6:	2781                	sext.w	a5,a5
    80009db8:	1782                	sll	a5,a5,0x20
    80009dba:	fff086b7          	lui	a3,0xfff08
    80009dbe:	9381                	srl	a5,a5,0x20
    80009dc0:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009dc2:	8ff5                	and	a5,a5,a3
    80009dc4:	00f70463          	beq	a4,a5,80009dcc <tinst_tests+0x2942>
    80009dc8:	ff4fe06f          	j	800085bc <tinst_tests+0x1132>
    80009dcc:	805fe06f          	j	800085d0 <tinst_tests+0x1146>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    80009dd0:	7018                	ld	a4,32(s0)
    80009dd2:	00013597          	auipc	a1,0x13
    80009dd6:	cee58593          	add	a1,a1,-786 # 8001cac0 <__func__.1+0x2c8>
    80009dda:	e319                	bnez	a4,80009de0 <tinst_tests+0x2956>
    80009ddc:	c80fe06f          	j	8000825c <tinst_tests+0xdd2>
    80009de0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009de2:	0016f793          	and	a5,a3,1
    80009de6:	dc079c63          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009dea:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009dee:	460d                	li	a2,3
    80009df0:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009df4:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009df6:	00c59863          	bne	a1,a2,80009e06 <tinst_tests+0x297c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009dfa:	0026d683          	lhu	a3,2(a3)
    80009dfe:	0106969b          	sllw	a3,a3,0x10
    80009e02:	8fd5                	or	a5,a5,a3
    80009e04:	2781                	sext.w	a5,a5
    80009e06:	1782                	sll	a5,a5,0x20
    80009e08:	fff086b7          	lui	a3,0xfff08
    80009e0c:	9381                	srl	a5,a5,0x20
    80009e0e:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009e10:	8ff5                	and	a5,a5,a3
    80009e12:	00013597          	auipc	a1,0x13
    80009e16:	cbe58593          	add	a1,a1,-834 # 8001cad0 <__func__.1+0x2d8>
    80009e1a:	00f70463          	beq	a4,a5,80009e22 <tinst_tests+0x2998>
    80009e1e:	c3efe06f          	j	8000825c <tinst_tests+0xdd2>
    80009e22:	00013597          	auipc	a1,0x13
    80009e26:	c9e58593          	add	a1,a1,-866 # 8001cac0 <__func__.1+0x2c8>
    80009e2a:	c32fe06f          	j	8000825c <tinst_tests+0xdd2>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    80009e2e:	7018                	ld	a4,32(s0)
    80009e30:	e319                	bnez	a4,80009e36 <tinst_tests+0x29ac>
    80009e32:	845fe06f          	j	80008676 <tinst_tests+0x11ec>
    80009e36:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009e38:	0016f793          	and	a5,a3,1
    80009e3c:	d8079163          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009e40:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009e44:	460d                	li	a2,3
    80009e46:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009e4a:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009e4c:	00c59863          	bne	a1,a2,80009e5c <tinst_tests+0x29d2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009e50:	0026d683          	lhu	a3,2(a3)
    80009e54:	0106969b          	sllw	a3,a3,0x10
    80009e58:	8fd5                	or	a5,a5,a3
    80009e5a:	2781                	sext.w	a5,a5
    80009e5c:	1782                	sll	a5,a5,0x20
    80009e5e:	fff086b7          	lui	a3,0xfff08
    80009e62:	9381                	srl	a5,a5,0x20
    80009e64:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009e66:	8ff5                	and	a5,a5,a3
    80009e68:	00f70463          	beq	a4,a5,80009e70 <tinst_tests+0x29e6>
    80009e6c:	ff6fe06f          	j	80008662 <tinst_tests+0x11d8>
    80009e70:	807fe06f          	j	80008676 <tinst_tests+0x11ec>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    80009e74:	701c                	ld	a5,32(s0)
    80009e76:	00013597          	auipc	a1,0x13
    80009e7a:	c4a58593          	add	a1,a1,-950 # 8001cac0 <__func__.1+0x2c8>
    80009e7e:	e399                	bnez	a5,80009e84 <tinst_tests+0x29fa>
    80009e80:	c82fe06f          	j	80008302 <tinst_tests+0xe78>
    80009e84:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009e86:	0016f713          	and	a4,a3,1
    80009e8a:	d2071a63          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009e8e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009e92:	460d                	li	a2,3
    80009e94:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    80009e98:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009e9a:	00c59863          	bne	a1,a2,80009eaa <tinst_tests+0x2a20>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009e9e:	0026d683          	lhu	a3,2(a3)
    80009ea2:	0106969b          	sllw	a3,a3,0x10
    80009ea6:	8f55                	or	a4,a4,a3
    80009ea8:	2701                	sext.w	a4,a4
    80009eaa:	1702                	sll	a4,a4,0x20
    80009eac:	fff086b7          	lui	a3,0xfff08
    80009eb0:	9301                	srl	a4,a4,0x20
    80009eb2:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009eb4:	8f75                	and	a4,a4,a3
    80009eb6:	00013597          	auipc	a1,0x13
    80009eba:	c1a58593          	add	a1,a1,-998 # 8001cad0 <__func__.1+0x2d8>
    80009ebe:	00e78463          	beq	a5,a4,80009ec6 <tinst_tests+0x2a3c>
    80009ec2:	c40fe06f          	j	80008302 <tinst_tests+0xe78>
    80009ec6:	00013597          	auipc	a1,0x13
    80009eca:	bfa58593          	add	a1,a1,-1030 # 8001cac0 <__func__.1+0x2c8>
    80009ece:	c34fe06f          	j	80008302 <tinst_tests+0xe78>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    80009ed2:	7018                	ld	a4,32(s0)
    80009ed4:	e319                	bnez	a4,80009eda <tinst_tests+0x2a50>
    80009ed6:	847fe06f          	j	8000871c <tinst_tests+0x1292>
    80009eda:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009edc:	0016f793          	and	a5,a3,1
    80009ee0:	cc079f63          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009ee4:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009ee8:	460d                	li	a2,3
    80009eea:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009eee:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009ef0:	00c59863          	bne	a1,a2,80009f00 <tinst_tests+0x2a76>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009ef4:	0026d683          	lhu	a3,2(a3)
    80009ef8:	0106969b          	sllw	a3,a3,0x10
    80009efc:	8fd5                	or	a5,a5,a3
    80009efe:	2781                	sext.w	a5,a5
    80009f00:	1782                	sll	a5,a5,0x20
    80009f02:	fff086b7          	lui	a3,0xfff08
    80009f06:	9381                	srl	a5,a5,0x20
    80009f08:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009f0a:	8ff5                	and	a5,a5,a3
    80009f0c:	00f70463          	beq	a4,a5,80009f14 <tinst_tests+0x2a8a>
    80009f10:	ff8fe06f          	j	80008708 <tinst_tests+0x127e>
    80009f14:	809fe06f          	j	8000871c <tinst_tests+0x1292>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    80009f18:	6418                	ld	a4,8(s0)
    80009f1a:	47bd                	li	a5,15
    80009f1c:	00f70463          	beq	a4,a5,80009f24 <tinst_tests+0x2a9a>
    80009f20:	95dfe06f          	j	8000887c <tinst_tests+0x13f2>
    80009f24:	7018                	ld	a4,32(s0)
    80009f26:	e319                	bnez	a4,80009f2c <tinst_tests+0x2aa2>
    80009f28:	957fe06f          	j	8000887e <tinst_tests+0x13f4>
    80009f2c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009f2e:	0016f793          	and	a5,a3,1
    80009f32:	c8079663          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009f36:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009f3a:	460d                	li	a2,3
    80009f3c:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009f40:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009f42:	00c59863          	bne	a1,a2,80009f52 <tinst_tests+0x2ac8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009f46:	0026d683          	lhu	a3,2(a3)
    80009f4a:	0106969b          	sllw	a3,a3,0x10
    80009f4e:	8fd5                	or	a5,a5,a3
    80009f50:	2781                	sext.w	a5,a5
    80009f52:	1782                	sll	a5,a5,0x20
    80009f54:	fff086b7          	lui	a3,0xfff08
    80009f58:	9381                	srl	a5,a5,0x20
    80009f5a:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009f5c:	00d7f933          	and	s2,a5,a3
    80009f60:	40e90933          	sub	s2,s2,a4
    80009f64:	00193913          	seqz	s2,s2
    80009f68:	917fe06f          	j	8000887e <tinst_tests+0x13f4>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    80009f6c:	6418                	ld	a4,8(s0)
    80009f6e:	47bd                	li	a5,15
    80009f70:	00f70463          	beq	a4,a5,80009f78 <tinst_tests+0x2aee>
    80009f74:	9a7fe06f          	j	8000891a <tinst_tests+0x1490>
    80009f78:	7018                	ld	a4,32(s0)
    80009f7a:	e319                	bnez	a4,80009f80 <tinst_tests+0x2af6>
    80009f7c:	9a1fe06f          	j	8000891c <tinst_tests+0x1492>
    80009f80:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009f82:	0016f793          	and	a5,a3,1
    80009f86:	c2079c63          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009f8a:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009f8e:	460d                	li	a2,3
    80009f90:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009f94:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009f96:	00c59863          	bne	a1,a2,80009fa6 <tinst_tests+0x2b1c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009f9a:	0026d683          	lhu	a3,2(a3)
    80009f9e:	0106969b          	sllw	a3,a3,0x10
    80009fa2:	8fd5                	or	a5,a5,a3
    80009fa4:	2781                	sext.w	a5,a5
    80009fa6:	1782                	sll	a5,a5,0x20
    80009fa8:	fff086b7          	lui	a3,0xfff08
    80009fac:	9381                	srl	a5,a5,0x20
    80009fae:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009fb0:	00d7f933          	and	s2,a5,a3
    80009fb4:	40e90933          	sub	s2,s2,a4
    80009fb8:	00193913          	seqz	s2,s2
    80009fbc:	961fe06f          	j	8000891c <tinst_tests+0x1492>
    instruction = *((uint16_t*)addr);
    80009fc0:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009fc4:	460d                	li	a2,3
    80009fc6:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009fca:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009fcc:	00c59863          	bne	a1,a2,80009fdc <tinst_tests+0x2b52>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009fd0:	0026d683          	lhu	a3,2(a3)
    80009fd4:	0106969b          	sllw	a3,a3,0x10
    80009fd8:	8fd5                	or	a5,a5,a3
    80009fda:	2781                	sext.w	a5,a5
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    80009fdc:	17c6                	sll	a5,a5,0x31
    80009fde:	93c5                	srl	a5,a5,0x31
    80009fe0:	00f70463          	beq	a4,a5,80009fe8 <tinst_tests+0x2b5e>
    80009fe4:	e92fd06f          	j	80007676 <tinst_tests+0x1ec>
    80009fe8:	ea2fd06f          	j	8000768a <tinst_tests+0x200>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    80009fec:	6418                	ld	a4,8(s0)
    80009fee:	47bd                	li	a5,15
    80009ff0:	00f70463          	beq	a4,a5,80009ff8 <tinst_tests+0x2b6e>
    80009ff4:	9c5fe06f          	j	800089b8 <tinst_tests+0x152e>
    80009ff8:	7018                	ld	a4,32(s0)
    80009ffa:	e319                	bnez	a4,8000a000 <tinst_tests+0x2b76>
    80009ffc:	9bffe06f          	j	800089ba <tinst_tests+0x1530>
    8000a000:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a002:	0016f793          	and	a5,a3,1
    8000a006:	ba079c63          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a00a:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a00e:	460d                	li	a2,3
    8000a010:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a014:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a016:	00c59863          	bne	a1,a2,8000a026 <tinst_tests+0x2b9c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a01a:	0026d683          	lhu	a3,2(a3)
    8000a01e:	0106969b          	sllw	a3,a3,0x10
    8000a022:	8fd5                	or	a5,a5,a3
    8000a024:	2781                	sext.w	a5,a5
    8000a026:	1782                	sll	a5,a5,0x20
    8000a028:	fff086b7          	lui	a3,0xfff08
    8000a02c:	9381                	srl	a5,a5,0x20
    8000a02e:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a030:	00d7f933          	and	s2,a5,a3
    8000a034:	40e90933          	sub	s2,s2,a4
    8000a038:	00193913          	seqz	s2,s2
    8000a03c:	97ffe06f          	j	800089ba <tinst_tests+0x1530>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000a040:	6418                	ld	a4,8(s0)
    8000a042:	47bd                	li	a5,15
    8000a044:	00f70463          	beq	a4,a5,8000a04c <tinst_tests+0x2bc2>
    8000a048:	a0ffe06f          	j	80008a56 <tinst_tests+0x15cc>
    8000a04c:	7018                	ld	a4,32(s0)
    8000a04e:	e319                	bnez	a4,8000a054 <tinst_tests+0x2bca>
    8000a050:	a09fe06f          	j	80008a58 <tinst_tests+0x15ce>
    8000a054:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a056:	0016f793          	and	a5,a3,1
    8000a05a:	b6079263          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a05e:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a062:	460d                	li	a2,3
    8000a064:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a068:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a06a:	00c59863          	bne	a1,a2,8000a07a <tinst_tests+0x2bf0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a06e:	0026d683          	lhu	a3,2(a3)
    8000a072:	0106969b          	sllw	a3,a3,0x10
    8000a076:	8fd5                	or	a5,a5,a3
    8000a078:	2781                	sext.w	a5,a5
    8000a07a:	1782                	sll	a5,a5,0x20
    8000a07c:	fff086b7          	lui	a3,0xfff08
    8000a080:	9381                	srl	a5,a5,0x20
    8000a082:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a084:	00d7f933          	and	s2,a5,a3
    8000a088:	40e90933          	sub	s2,s2,a4
    8000a08c:	00193913          	seqz	s2,s2
    8000a090:	9c9fe06f          	j	80008a58 <tinst_tests+0x15ce>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000a094:	02043983          	ld	s3,32(s0)
    8000a098:	00099463          	bnez	s3,8000a0a0 <tinst_tests+0x2c16>
    8000a09c:	cf3fd06f          	j	80007d8e <tinst_tests+0x904>
    8000a0a0:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a0a2:	0017f713          	and	a4,a5,1
    8000a0a6:	b0071c63          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a0aa:	0007d503          	lhu	a0,0(a5)
    8000a0ae:	99af70ef          	jal	80001248 <expand_compressed_instruction>
    8000a0b2:	01f077b7          	lui	a5,0x1f07
    8000a0b6:	0005091b          	sext.w	s2,a0
    8000a0ba:	07d78793          	add	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000a0be:	00f97933          	and	s2,s2,a5
    8000a0c2:	41390933          	sub	s2,s2,s3
    8000a0c6:	00193913          	seqz	s2,s2
    8000a0ca:	cc5fd06f          	j	80007d8e <tinst_tests+0x904>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000a0ce:	7004                	ld	s1,32(s0)
    8000a0d0:	e099                	bnez	s1,8000a0d6 <tinst_tests+0x2c4c>
    8000a0d2:	d5ffd06f          	j	80007e30 <tinst_tests+0x9a6>
    8000a0d6:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a0d8:	0017f713          	and	a4,a5,1
    8000a0dc:	ae071163          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a0e0:	0007d503          	lhu	a0,0(a5)
    8000a0e4:	964f70ef          	jal	80001248 <expand_compressed_instruction>
    8000a0e8:	01f077b7          	lui	a5,0x1f07
    8000a0ec:	0005091b          	sext.w	s2,a0
    8000a0f0:	07d78793          	add	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000a0f4:	00f97933          	and	s2,s2,a5
    8000a0f8:	40990933          	sub	s2,s2,s1
    8000a0fc:	00193913          	seqz	s2,s2
    8000a100:	d31fd06f          	j	80007e30 <tinst_tests+0x9a6>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    8000a104:	7018                	ld	a4,32(s0)
    8000a106:	e319                	bnez	a4,8000a10c <tinst_tests+0x2c82>
    8000a108:	dd1fd06f          	j	80007ed8 <tinst_tests+0xa4e>
    8000a10c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a10e:	0016f793          	and	a5,a3,1
    8000a112:	aa079663          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a116:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a11a:	460d                	li	a2,3
    8000a11c:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a120:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a122:	00c59863          	bne	a1,a2,8000a132 <tinst_tests+0x2ca8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a126:	0026d683          	lhu	a3,2(a3)
    8000a12a:	0106969b          	sllw	a3,a3,0x10
    8000a12e:	8fd5                	or	a5,a5,a3
    8000a130:	2781                	sext.w	a5,a5
    8000a132:	1782                	sll	a5,a5,0x20
    8000a134:	fff086b7          	lui	a3,0xfff08
    8000a138:	9381                	srl	a5,a5,0x20
    8000a13a:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a13c:	00d7f933          	and	s2,a5,a3
    8000a140:	40e90933          	sub	s2,s2,a4
    8000a144:	00193913          	seqz	s2,s2
    8000a148:	d91fd06f          	j	80007ed8 <tinst_tests+0xa4e>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    8000a14c:	7018                	ld	a4,32(s0)
    8000a14e:	e319                	bnez	a4,8000a154 <tinst_tests+0x2cca>
    8000a150:	e2ffd06f          	j	80007f7e <tinst_tests+0xaf4>
    8000a154:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a156:	0016f793          	and	a5,a3,1
    8000a15a:	a6079263          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a15e:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a162:	460d                	li	a2,3
    8000a164:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a168:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a16a:	00c59863          	bne	a1,a2,8000a17a <tinst_tests+0x2cf0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a16e:	0026d683          	lhu	a3,2(a3)
    8000a172:	0106969b          	sllw	a3,a3,0x10
    8000a176:	8fd5                	or	a5,a5,a3
    8000a178:	2781                	sext.w	a5,a5
    8000a17a:	1782                	sll	a5,a5,0x20
    8000a17c:	fff086b7          	lui	a3,0xfff08
    8000a180:	9381                	srl	a5,a5,0x20
    8000a182:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a184:	00d7f933          	and	s2,a5,a3
    8000a188:	40e90933          	sub	s2,s2,a4
    8000a18c:	00193913          	seqz	s2,s2
    8000a190:	deffd06f          	j	80007f7e <tinst_tests+0xaf4>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    8000a194:	7018                	ld	a4,32(s0)
    8000a196:	e319                	bnez	a4,8000a19c <tinst_tests+0x2d12>
    8000a198:	e8bfd06f          	j	80008022 <tinst_tests+0xb98>
    8000a19c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a19e:	0016f793          	and	a5,a3,1
    8000a1a2:	a0079e63          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a1a6:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a1aa:	460d                	li	a2,3
    8000a1ac:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a1b0:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a1b2:	00c59863          	bne	a1,a2,8000a1c2 <tinst_tests+0x2d38>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a1b6:	0026d683          	lhu	a3,2(a3)
    8000a1ba:	0106969b          	sllw	a3,a3,0x10
    8000a1be:	8fd5                	or	a5,a5,a3
    8000a1c0:	2781                	sext.w	a5,a5
    8000a1c2:	1782                	sll	a5,a5,0x20
    8000a1c4:	fff086b7          	lui	a3,0xfff08
    8000a1c8:	9381                	srl	a5,a5,0x20
    8000a1ca:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a1cc:	00d7f933          	and	s2,a5,a3
    8000a1d0:	40e90933          	sub	s2,s2,a4
    8000a1d4:	00193913          	seqz	s2,s2
    8000a1d8:	e4bfd06f          	j	80008022 <tinst_tests+0xb98>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    8000a1dc:	7018                	ld	a4,32(s0)
    8000a1de:	e319                	bnez	a4,8000a1e4 <tinst_tests+0x2d5a>
    8000a1e0:	edbfd06f          	j	800080ba <tinst_tests+0xc30>
    8000a1e4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a1e6:	0016f793          	and	a5,a3,1
    8000a1ea:	9c079a63          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a1ee:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a1f2:	460d                	li	a2,3
    8000a1f4:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a1f8:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a1fa:	00c59863          	bne	a1,a2,8000a20a <tinst_tests+0x2d80>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a1fe:	0026d683          	lhu	a3,2(a3)
    8000a202:	0106969b          	sllw	a3,a3,0x10
    8000a206:	8fd5                	or	a5,a5,a3
    8000a208:	2781                	sext.w	a5,a5
    8000a20a:	1782                	sll	a5,a5,0x20
    8000a20c:	fff086b7          	lui	a3,0xfff08
    8000a210:	9381                	srl	a5,a5,0x20
    8000a212:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a214:	00d7f933          	and	s2,a5,a3
    8000a218:	40e90933          	sub	s2,s2,a4
    8000a21c:	00193913          	seqz	s2,s2
    8000a220:	e9bfd06f          	j	800080ba <tinst_tests+0xc30>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000a224:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a226:	0017f713          	and	a4,a5,1
    8000a22a:	98071a63          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a22e:	0007d503          	lhu	a0,0(a5)
    8000a232:	816f70ef          	jal	80001248 <expand_compressed_instruction>
    8000a236:	67a1                	lui	a5,0x8
    8000a238:	17f5                	add	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000a23a:	8fe9                	and	a5,a5,a0
    8000a23c:	1782                	sll	a5,a5,0x20
    8000a23e:	9381                	srl	a5,a5,0x20
    8000a240:	00f48463          	beq	s1,a5,8000a248 <tinst_tests+0x2dbe>
    8000a244:	9bffd06f          	j	80007c02 <tinst_tests+0x778>
    8000a248:	00013597          	auipc	a1,0x13
    8000a24c:	87858593          	add	a1,a1,-1928 # 8001cac0 <__func__.1+0x2c8>
    8000a250:	9bbfd06f          	j	80007c0a <tinst_tests+0x780>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    8000a254:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a256:	0017f713          	and	a4,a5,1
    8000a25a:	96071263          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a25e:	0007d503          	lhu	a0,0(a5)
    8000a262:	fe7f60ef          	jal	80001248 <expand_compressed_instruction>
    8000a266:	67a1                	lui	a5,0x8
    8000a268:	17f5                	add	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000a26a:	8fe9                	and	a5,a5,a0
    8000a26c:	1782                	sll	a5,a5,0x20
    8000a26e:	9381                	srl	a5,a5,0x20
    8000a270:	00f98463          	beq	s3,a5,8000a278 <tinst_tests+0x2dee>
    8000a274:	a29fd06f          	j	80007c9c <tinst_tests+0x812>
    8000a278:	00013597          	auipc	a1,0x13
    8000a27c:	84858593          	add	a1,a1,-1976 # 8001cac0 <__func__.1+0x2c8>
    8000a280:	a25fd06f          	j	80007ca4 <tinst_tests+0x81a>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    8000a284:	7018                	ld	a4,32(s0)
    8000a286:	e319                	bnez	a4,8000a28c <tinst_tests+0x2e02>
    8000a288:	ed9fd06f          	j	80008160 <tinst_tests+0xcd6>
    8000a28c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a28e:	0016f793          	and	a5,a3,1
    8000a292:	92079663          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a296:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a29a:	460d                	li	a2,3
    8000a29c:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a2a0:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a2a2:	00c59863          	bne	a1,a2,8000a2b2 <tinst_tests+0x2e28>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a2a6:	0026d683          	lhu	a3,2(a3)
    8000a2aa:	0106969b          	sllw	a3,a3,0x10
    8000a2ae:	8fd5                	or	a5,a5,a3
    8000a2b0:	2781                	sext.w	a5,a5
    8000a2b2:	1782                	sll	a5,a5,0x20
    8000a2b4:	fff086b7          	lui	a3,0xfff08
    8000a2b8:	9381                	srl	a5,a5,0x20
    8000a2ba:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a2bc:	00d7f933          	and	s2,a5,a3
    8000a2c0:	40e90933          	sub	s2,s2,a4
    8000a2c4:	00193913          	seqz	s2,s2
    8000a2c8:	e99fd06f          	j	80008160 <tinst_tests+0xcd6>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000a2cc:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a2ce:	0017f713          	and	a4,a5,1
    8000a2d2:	8e071663          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a2d6:	0007d503          	lhu	a0,0(a5)
    8000a2da:	f6ff60ef          	jal	80001248 <expand_compressed_instruction>
    8000a2de:	01f07737          	lui	a4,0x1f07
    8000a2e2:	0005079b          	sext.w	a5,a0
    8000a2e6:	07d70713          	add	a4,a4,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000a2ea:	8ff9                	and	a5,a5,a4
    8000a2ec:	00f98463          	beq	s3,a5,8000a2f4 <tinst_tests+0x2e6a>
    8000a2f0:	a47fd06f          	j	80007d36 <tinst_tests+0x8ac>
    8000a2f4:	00012597          	auipc	a1,0x12
    8000a2f8:	7cc58593          	add	a1,a1,1996 # 8001cac0 <__func__.1+0x2c8>
    8000a2fc:	a43fd06f          	j	80007d3e <tinst_tests+0x8b4>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    8000a300:	7018                	ld	a4,32(s0)
    8000a302:	e319                	bnez	a4,8000a308 <tinst_tests+0x2e7e>
    8000a304:	f03fd06f          	j	80008206 <tinst_tests+0xd7c>
    8000a308:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a30a:	0016f793          	and	a5,a3,1
    8000a30e:	8a079863          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a312:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a316:	460d                	li	a2,3
    8000a318:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a31c:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a31e:	00c59863          	bne	a1,a2,8000a32e <tinst_tests+0x2ea4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a322:	0026d683          	lhu	a3,2(a3)
    8000a326:	0106969b          	sllw	a3,a3,0x10
    8000a32a:	8fd5                	or	a5,a5,a3
    8000a32c:	2781                	sext.w	a5,a5
    8000a32e:	1782                	sll	a5,a5,0x20
    8000a330:	fff086b7          	lui	a3,0xfff08
    8000a334:	9381                	srl	a5,a5,0x20
    8000a336:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a338:	00d7f933          	and	s2,a5,a3
    8000a33c:	40e90933          	sub	s2,s2,a4
    8000a340:	00193913          	seqz	s2,s2
    8000a344:	ec3fd06f          	j	80008206 <tinst_tests+0xd7c>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000a348:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a34a:	0017f713          	and	a4,a5,1
    8000a34e:	86071863          	bnez	a4,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a352:	0007d503          	lhu	a0,0(a5)
    8000a356:	ef3f60ef          	jal	80001248 <expand_compressed_instruction>
    8000a35a:	01f07737          	lui	a4,0x1f07
    8000a35e:	0005079b          	sext.w	a5,a0
    8000a362:	07d70713          	add	a4,a4,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000a366:	8ff9                	and	a5,a5,a4
    8000a368:	00f48463          	beq	s1,a5,8000a370 <tinst_tests+0x2ee6>
    8000a36c:	a6dfd06f          	j	80007dd8 <tinst_tests+0x94e>
    8000a370:	00012597          	auipc	a1,0x12
    8000a374:	75058593          	add	a1,a1,1872 # 8001cac0 <__func__.1+0x2c8>
    8000a378:	a69fd06f          	j	80007de0 <tinst_tests+0x956>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    8000a37c:	7018                	ld	a4,32(s0)
    8000a37e:	e319                	bnez	a4,8000a384 <tinst_tests+0x2efa>
    8000a380:	f2dfd06f          	j	800082ac <tinst_tests+0xe22>
    8000a384:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a386:	0016f793          	and	a5,a3,1
    8000a38a:	82079a63          	bnez	a5,800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a38e:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a392:	460d                	li	a2,3
    8000a394:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a398:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a39a:	00c59863          	bne	a1,a2,8000a3aa <tinst_tests+0x2f20>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a39e:	0026d683          	lhu	a3,2(a3)
    8000a3a2:	0106969b          	sllw	a3,a3,0x10
    8000a3a6:	8fd5                	or	a5,a5,a3
    8000a3a8:	2781                	sext.w	a5,a5
    8000a3aa:	1782                	sll	a5,a5,0x20
    8000a3ac:	fff086b7          	lui	a3,0xfff08
    8000a3b0:	9381                	srl	a5,a5,0x20
    8000a3b2:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a3b4:	00d7f933          	and	s2,a5,a3
    8000a3b8:	40e90933          	sub	s2,s2,a4
    8000a3bc:	00193913          	seqz	s2,s2
    8000a3c0:	eedfd06f          	j	800082ac <tinst_tests+0xe22>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    8000a3c4:	7018                	ld	a4,32(s0)
    8000a3c6:	e319                	bnez	a4,8000a3cc <tinst_tests+0x2f42>
    8000a3c8:	f8bfd06f          	j	80008352 <tinst_tests+0xec8>
    8000a3cc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a3ce:	0016f793          	and	a5,a3,1
    8000a3d2:	c399                	beqz	a5,8000a3d8 <tinst_tests+0x2f4e>
    8000a3d4:	febfe06f          	j	800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a3d8:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a3dc:	460d                	li	a2,3
    8000a3de:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a3e2:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a3e4:	00c59863          	bne	a1,a2,8000a3f4 <tinst_tests+0x2f6a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a3e8:	0026d683          	lhu	a3,2(a3)
    8000a3ec:	0106969b          	sllw	a3,a3,0x10
    8000a3f0:	8fd5                	or	a5,a5,a3
    8000a3f2:	2781                	sext.w	a5,a5
    8000a3f4:	1782                	sll	a5,a5,0x20
    8000a3f6:	fff086b7          	lui	a3,0xfff08
    8000a3fa:	9381                	srl	a5,a5,0x20
    8000a3fc:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a3fe:	00d7f933          	and	s2,a5,a3
    8000a402:	40e90933          	sub	s2,s2,a4
    8000a406:	00193913          	seqz	s2,s2
    8000a40a:	f49fd06f          	j	80008352 <tinst_tests+0xec8>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    8000a40e:	7018                	ld	a4,32(s0)
    8000a410:	e319                	bnez	a4,8000a416 <tinst_tests+0x2f8c>
    8000a412:	fe7fd06f          	j	800083f8 <tinst_tests+0xf6e>
    8000a416:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a418:	0016f793          	and	a5,a3,1
    8000a41c:	c399                	beqz	a5,8000a422 <tinst_tests+0x2f98>
    8000a41e:	fa1fe06f          	j	800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a422:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a426:	460d                	li	a2,3
    8000a428:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a42c:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a42e:	00c59863          	bne	a1,a2,8000a43e <tinst_tests+0x2fb4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a432:	0026d683          	lhu	a3,2(a3)
    8000a436:	0106969b          	sllw	a3,a3,0x10
    8000a43a:	8fd5                	or	a5,a5,a3
    8000a43c:	2781                	sext.w	a5,a5
    8000a43e:	1782                	sll	a5,a5,0x20
    8000a440:	fff086b7          	lui	a3,0xfff08
    8000a444:	9381                	srl	a5,a5,0x20
    8000a446:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a448:	00d7f933          	and	s2,a5,a3
    8000a44c:	40e90933          	sub	s2,s2,a4
    8000a450:	00193913          	seqz	s2,s2
    8000a454:	fa5fd06f          	j	800083f8 <tinst_tests+0xf6e>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    8000a458:	7018                	ld	a4,32(s0)
    8000a45a:	e319                	bnez	a4,8000a460 <tinst_tests+0x2fd6>
    8000a45c:	842fe06f          	j	8000849e <tinst_tests+0x1014>
    8000a460:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a462:	0016f793          	and	a5,a3,1
    8000a466:	c399                	beqz	a5,8000a46c <tinst_tests+0x2fe2>
    8000a468:	f57fe06f          	j	800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a46c:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a470:	460d                	li	a2,3
    8000a472:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a476:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a478:	00c59863          	bne	a1,a2,8000a488 <tinst_tests+0x2ffe>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a47c:	0026d683          	lhu	a3,2(a3)
    8000a480:	0106969b          	sllw	a3,a3,0x10
    8000a484:	8fd5                	or	a5,a5,a3
    8000a486:	2781                	sext.w	a5,a5
    8000a488:	1782                	sll	a5,a5,0x20
    8000a48a:	fff086b7          	lui	a3,0xfff08
    8000a48e:	9381                	srl	a5,a5,0x20
    8000a490:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a492:	00d7f933          	and	s2,a5,a3
    8000a496:	40e90933          	sub	s2,s2,a4
    8000a49a:	00193913          	seqz	s2,s2
    8000a49e:	800fe06f          	j	8000849e <tinst_tests+0x1014>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000a4a2:	7018                	ld	a4,32(s0)
    8000a4a4:	e319                	bnez	a4,8000a4aa <tinst_tests+0x3020>
    8000a4a6:	8a2fe06f          	j	80008548 <tinst_tests+0x10be>
    8000a4aa:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a4ac:	0016f793          	and	a5,a3,1
    8000a4b0:	c399                	beqz	a5,8000a4b6 <tinst_tests+0x302c>
    8000a4b2:	f0dfe06f          	j	800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a4b6:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a4ba:	460d                	li	a2,3
    8000a4bc:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a4c0:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a4c2:	00c59863          	bne	a1,a2,8000a4d2 <tinst_tests+0x3048>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a4c6:	0026d683          	lhu	a3,2(a3)
    8000a4ca:	0106969b          	sllw	a3,a3,0x10
    8000a4ce:	8fd5                	or	a5,a5,a3
    8000a4d0:	2781                	sext.w	a5,a5
    8000a4d2:	1782                	sll	a5,a5,0x20
    8000a4d4:	fff086b7          	lui	a3,0xfff08
    8000a4d8:	9381                	srl	a5,a5,0x20
    8000a4da:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a4dc:	00d7f933          	and	s2,a5,a3
    8000a4e0:	40e90933          	sub	s2,s2,a4
    8000a4e4:	00193913          	seqz	s2,s2
    8000a4e8:	860fe06f          	j	80008548 <tinst_tests+0x10be>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000a4ec:	7018                	ld	a4,32(s0)
    8000a4ee:	e319                	bnez	a4,8000a4f4 <tinst_tests+0x306a>
    8000a4f0:	8fefe06f          	j	800085ee <tinst_tests+0x1164>
    8000a4f4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a4f6:	0016f793          	and	a5,a3,1
    8000a4fa:	c399                	beqz	a5,8000a500 <tinst_tests+0x3076>
    8000a4fc:	ec3fe06f          	j	800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a500:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a504:	460d                	li	a2,3
    8000a506:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a50a:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a50c:	00c59863          	bne	a1,a2,8000a51c <tinst_tests+0x3092>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a510:	0026d683          	lhu	a3,2(a3)
    8000a514:	0106969b          	sllw	a3,a3,0x10
    8000a518:	8fd5                	or	a5,a5,a3
    8000a51a:	2781                	sext.w	a5,a5
    8000a51c:	1782                	sll	a5,a5,0x20
    8000a51e:	fff086b7          	lui	a3,0xfff08
    8000a522:	9381                	srl	a5,a5,0x20
    8000a524:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a526:	00d7f933          	and	s2,a5,a3
    8000a52a:	40e90933          	sub	s2,s2,a4
    8000a52e:	00193913          	seqz	s2,s2
    8000a532:	8bcfe06f          	j	800085ee <tinst_tests+0x1164>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000a536:	7018                	ld	a4,32(s0)
    8000a538:	e319                	bnez	a4,8000a53e <tinst_tests+0x30b4>
    8000a53a:	95afe06f          	j	80008694 <tinst_tests+0x120a>
    8000a53e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a540:	0016f793          	and	a5,a3,1
    8000a544:	c399                	beqz	a5,8000a54a <tinst_tests+0x30c0>
    8000a546:	e79fe06f          	j	800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a54a:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a54e:	460d                	li	a2,3
    8000a550:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a554:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a556:	00c59863          	bne	a1,a2,8000a566 <tinst_tests+0x30dc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a55a:	0026d683          	lhu	a3,2(a3)
    8000a55e:	0106969b          	sllw	a3,a3,0x10
    8000a562:	8fd5                	or	a5,a5,a3
    8000a564:	2781                	sext.w	a5,a5
    8000a566:	1782                	sll	a5,a5,0x20
    8000a568:	fff086b7          	lui	a3,0xfff08
    8000a56c:	9381                	srl	a5,a5,0x20
    8000a56e:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a570:	00d7f933          	and	s2,a5,a3
    8000a574:	40e90933          	sub	s2,s2,a4
    8000a578:	00193913          	seqz	s2,s2
    8000a57c:	918fe06f          	j	80008694 <tinst_tests+0x120a>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000a580:	7018                	ld	a4,32(s0)
    8000a582:	e319                	bnez	a4,8000a588 <tinst_tests+0x30fe>
    8000a584:	9b6fe06f          	j	8000873a <tinst_tests+0x12b0>
    8000a588:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a58a:	0016f793          	and	a5,a3,1
    8000a58e:	c399                	beqz	a5,8000a594 <tinst_tests+0x310a>
    8000a590:	e2ffe06f          	j	800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a594:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a598:	460d                	li	a2,3
    8000a59a:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a59e:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a5a0:	00c59863          	bne	a1,a2,8000a5b0 <tinst_tests+0x3126>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a5a4:	0026d683          	lhu	a3,2(a3)
    8000a5a8:	0106969b          	sllw	a3,a3,0x10
    8000a5ac:	8fd5                	or	a5,a5,a3
    8000a5ae:	2781                	sext.w	a5,a5
    8000a5b0:	1782                	sll	a5,a5,0x20
    8000a5b2:	fff086b7          	lui	a3,0xfff08
    8000a5b6:	9381                	srl	a5,a5,0x20
    8000a5b8:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a5ba:	00d7f933          	and	s2,a5,a3
    8000a5be:	40e90933          	sub	s2,s2,a4
    8000a5c2:	00193913          	seqz	s2,s2
    8000a5c6:	974fe06f          	j	8000873a <tinst_tests+0x12b0>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    8000a5ca:	7018                	ld	a4,32(s0)
    8000a5cc:	e319                	bnez	a4,8000a5d2 <tinst_tests+0x3148>
    8000a5ce:	a12fe06f          	j	800087e0 <tinst_tests+0x1356>
    8000a5d2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a5d4:	0016f793          	and	a5,a3,1
    8000a5d8:	c399                	beqz	a5,8000a5de <tinst_tests+0x3154>
    8000a5da:	de5fe06f          	j	800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a5de:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a5e2:	460d                	li	a2,3
    8000a5e4:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a5e8:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a5ea:	00c59863          	bne	a1,a2,8000a5fa <tinst_tests+0x3170>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a5ee:	0026d683          	lhu	a3,2(a3)
    8000a5f2:	0106969b          	sllw	a3,a3,0x10
    8000a5f6:	8fd5                	or	a5,a5,a3
    8000a5f8:	2781                	sext.w	a5,a5
    8000a5fa:	1782                	sll	a5,a5,0x20
    8000a5fc:	fff086b7          	lui	a3,0xfff08
    8000a600:	9381                	srl	a5,a5,0x20
    8000a602:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a604:	00d7f933          	and	s2,a5,a3
    8000a608:	40e90933          	sub	s2,s2,a4
    8000a60c:	00193913          	seqz	s2,s2
    8000a610:	9d0fe06f          	j	800087e0 <tinst_tests+0x1356>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    8000a614:	7018                	ld	a4,32(s0)
    8000a616:	00012597          	auipc	a1,0x12
    8000a61a:	4aa58593          	add	a1,a1,1194 # 8001cac0 <__func__.1+0x2c8>
    8000a61e:	e319                	bnez	a4,8000a624 <tinst_tests+0x319a>
    8000a620:	d89fd06f          	j	800083a8 <tinst_tests+0xf1e>
    8000a624:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a626:	0016f793          	and	a5,a3,1
    8000a62a:	c399                	beqz	a5,8000a630 <tinst_tests+0x31a6>
    8000a62c:	d93fe06f          	j	800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a630:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a634:	460d                	li	a2,3
    8000a636:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a63a:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a63c:	00c59863          	bne	a1,a2,8000a64c <tinst_tests+0x31c2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a640:	0026d683          	lhu	a3,2(a3)
    8000a644:	0106969b          	sllw	a3,a3,0x10
    8000a648:	8fd5                	or	a5,a5,a3
    8000a64a:	2781                	sext.w	a5,a5
    8000a64c:	1782                	sll	a5,a5,0x20
    8000a64e:	fff086b7          	lui	a3,0xfff08
    8000a652:	9381                	srl	a5,a5,0x20
    8000a654:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a656:	8ff5                	and	a5,a5,a3
    8000a658:	00012597          	auipc	a1,0x12
    8000a65c:	47858593          	add	a1,a1,1144 # 8001cad0 <__func__.1+0x2d8>
    8000a660:	00f70463          	beq	a4,a5,8000a668 <tinst_tests+0x31de>
    8000a664:	d45fd06f          	j	800083a8 <tinst_tests+0xf1e>
    8000a668:	00012597          	auipc	a1,0x12
    8000a66c:	45858593          	add	a1,a1,1112 # 8001cac0 <__func__.1+0x2c8>
    8000a670:	d39fd06f          	j	800083a8 <tinst_tests+0xf1e>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    8000a674:	701c                	ld	a5,32(s0)
    8000a676:	e399                	bnez	a5,8000a67c <tinst_tests+0x31f2>
    8000a678:	94afe06f          	j	800087c2 <tinst_tests+0x1338>
    8000a67c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a67e:	0016f713          	and	a4,a3,1
    8000a682:	c319                	beqz	a4,8000a688 <tinst_tests+0x31fe>
    8000a684:	d3bfe06f          	j	800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a688:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a68c:	460d                	li	a2,3
    8000a68e:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    8000a692:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a694:	00c59863          	bne	a1,a2,8000a6a4 <tinst_tests+0x321a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a698:	0026d683          	lhu	a3,2(a3)
    8000a69c:	0106969b          	sllw	a3,a3,0x10
    8000a6a0:	8f55                	or	a4,a4,a3
    8000a6a2:	2701                	sext.w	a4,a4
    8000a6a4:	1702                	sll	a4,a4,0x20
    8000a6a6:	fff086b7          	lui	a3,0xfff08
    8000a6aa:	9301                	srl	a4,a4,0x20
    8000a6ac:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a6ae:	8f75                	and	a4,a4,a3
    8000a6b0:	00e78463          	beq	a5,a4,8000a6b8 <tinst_tests+0x322e>
    8000a6b4:	8fafe06f          	j	800087ae <tinst_tests+0x1324>
    8000a6b8:	90afe06f          	j	800087c2 <tinst_tests+0x1338>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    8000a6bc:	701c                	ld	a5,32(s0)
    8000a6be:	00012597          	auipc	a1,0x12
    8000a6c2:	40258593          	add	a1,a1,1026 # 8001cac0 <__func__.1+0x2c8>
    8000a6c6:	e399                	bnez	a5,8000a6cc <tinst_tests+0x3242>
    8000a6c8:	d87fd06f          	j	8000844e <tinst_tests+0xfc4>
    8000a6cc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a6ce:	0016f713          	and	a4,a3,1
    8000a6d2:	c319                	beqz	a4,8000a6d8 <tinst_tests+0x324e>
    8000a6d4:	cebfe06f          	j	800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a6d8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a6dc:	460d                	li	a2,3
    8000a6de:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    8000a6e2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a6e4:	00c59863          	bne	a1,a2,8000a6f4 <tinst_tests+0x326a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a6e8:	0026d683          	lhu	a3,2(a3)
    8000a6ec:	0106969b          	sllw	a3,a3,0x10
    8000a6f0:	8f55                	or	a4,a4,a3
    8000a6f2:	2701                	sext.w	a4,a4
    8000a6f4:	1702                	sll	a4,a4,0x20
    8000a6f6:	fff086b7          	lui	a3,0xfff08
    8000a6fa:	9301                	srl	a4,a4,0x20
    8000a6fc:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a6fe:	8f75                	and	a4,a4,a3
    8000a700:	00012597          	auipc	a1,0x12
    8000a704:	3d058593          	add	a1,a1,976 # 8001cad0 <__func__.1+0x2d8>
    8000a708:	00e78463          	beq	a5,a4,8000a710 <tinst_tests+0x3286>
    8000a70c:	d43fd06f          	j	8000844e <tinst_tests+0xfc4>
    8000a710:	00012597          	auipc	a1,0x12
    8000a714:	3b058593          	add	a1,a1,944 # 8001cac0 <__func__.1+0x2c8>
    8000a718:	d37fd06f          	j	8000844e <tinst_tests+0xfc4>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000a71c:	7018                	ld	a4,32(s0)
    8000a71e:	e319                	bnez	a4,8000a724 <tinst_tests+0x329a>
    8000a720:	948fe06f          	j	80008868 <tinst_tests+0x13de>
    8000a724:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a726:	0016f793          	and	a5,a3,1
    8000a72a:	c399                	beqz	a5,8000a730 <tinst_tests+0x32a6>
    8000a72c:	c93fe06f          	j	800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a730:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a734:	460d                	li	a2,3
    8000a736:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a73a:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a73c:	00c59863          	bne	a1,a2,8000a74c <tinst_tests+0x32c2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a740:	0026d683          	lhu	a3,2(a3)
    8000a744:	0106969b          	sllw	a3,a3,0x10
    8000a748:	8fd5                	or	a5,a5,a3
    8000a74a:	2781                	sext.w	a5,a5
    8000a74c:	1782                	sll	a5,a5,0x20
    8000a74e:	fff086b7          	lui	a3,0xfff08
    8000a752:	9381                	srl	a5,a5,0x20
    8000a754:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a756:	8ff5                	and	a5,a5,a3
    8000a758:	00f70463          	beq	a4,a5,8000a760 <tinst_tests+0x32d6>
    8000a75c:	8f8fe06f          	j	80008854 <tinst_tests+0x13ca>
    8000a760:	908fe06f          	j	80008868 <tinst_tests+0x13de>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000a764:	701c                	ld	a5,32(s0)
    8000a766:	00012597          	auipc	a1,0x12
    8000a76a:	35a58593          	add	a1,a1,858 # 8001cac0 <__func__.1+0x2c8>
    8000a76e:	e399                	bnez	a5,8000a774 <tinst_tests+0x32ea>
    8000a770:	d89fd06f          	j	800084f8 <tinst_tests+0x106e>
    8000a774:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a776:	0016f713          	and	a4,a3,1
    8000a77a:	c319                	beqz	a4,8000a780 <tinst_tests+0x32f6>
    8000a77c:	c43fe06f          	j	800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a780:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a784:	460d                	li	a2,3
    8000a786:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    8000a78a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a78c:	00c59863          	bne	a1,a2,8000a79c <tinst_tests+0x3312>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a790:	0026d683          	lhu	a3,2(a3)
    8000a794:	0106969b          	sllw	a3,a3,0x10
    8000a798:	8f55                	or	a4,a4,a3
    8000a79a:	2701                	sext.w	a4,a4
    8000a79c:	1702                	sll	a4,a4,0x20
    8000a79e:	fff086b7          	lui	a3,0xfff08
    8000a7a2:	9301                	srl	a4,a4,0x20
    8000a7a4:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a7a6:	8f75                	and	a4,a4,a3
    8000a7a8:	00012597          	auipc	a1,0x12
    8000a7ac:	32858593          	add	a1,a1,808 # 8001cad0 <__func__.1+0x2d8>
    8000a7b0:	00e78463          	beq	a5,a4,8000a7b8 <tinst_tests+0x332e>
    8000a7b4:	d45fd06f          	j	800084f8 <tinst_tests+0x106e>
    8000a7b8:	00012597          	auipc	a1,0x12
    8000a7bc:	30858593          	add	a1,a1,776 # 8001cac0 <__func__.1+0x2c8>
    8000a7c0:	d39fd06f          	j	800084f8 <tinst_tests+0x106e>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000a7c4:	7018                	ld	a4,32(s0)
    8000a7c6:	e319                	bnez	a4,8000a7cc <tinst_tests+0x3342>
    8000a7c8:	93efe06f          	j	80008906 <tinst_tests+0x147c>
    8000a7cc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a7ce:	0016f793          	and	a5,a3,1
    8000a7d2:	c399                	beqz	a5,8000a7d8 <tinst_tests+0x334e>
    8000a7d4:	bebfe06f          	j	800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a7d8:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a7dc:	460d                	li	a2,3
    8000a7de:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a7e2:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a7e4:	00c59863          	bne	a1,a2,8000a7f4 <tinst_tests+0x336a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a7e8:	0026d683          	lhu	a3,2(a3)
    8000a7ec:	0106969b          	sllw	a3,a3,0x10
    8000a7f0:	8fd5                	or	a5,a5,a3
    8000a7f2:	2781                	sext.w	a5,a5
    8000a7f4:	1782                	sll	a5,a5,0x20
    8000a7f6:	fff086b7          	lui	a3,0xfff08
    8000a7fa:	9381                	srl	a5,a5,0x20
    8000a7fc:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a7fe:	8ff5                	and	a5,a5,a3
    8000a800:	00f70463          	beq	a4,a5,8000a808 <tinst_tests+0x337e>
    8000a804:	8eefe06f          	j	800088f2 <tinst_tests+0x1468>
    8000a808:	8fefe06f          	j	80008906 <tinst_tests+0x147c>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000a80c:	7018                	ld	a4,32(s0)
    8000a80e:	00012597          	auipc	a1,0x12
    8000a812:	2b258593          	add	a1,a1,690 # 8001cac0 <__func__.1+0x2c8>
    8000a816:	e319                	bnez	a4,8000a81c <tinst_tests+0x3392>
    8000a818:	d87fd06f          	j	8000859e <tinst_tests+0x1114>
    8000a81c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a81e:	0016f793          	and	a5,a3,1
    8000a822:	c399                	beqz	a5,8000a828 <tinst_tests+0x339e>
    8000a824:	b9bfe06f          	j	800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a828:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a82c:	460d                	li	a2,3
    8000a82e:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a832:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a834:	00c59863          	bne	a1,a2,8000a844 <tinst_tests+0x33ba>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a838:	0026d683          	lhu	a3,2(a3)
    8000a83c:	0106969b          	sllw	a3,a3,0x10
    8000a840:	8fd5                	or	a5,a5,a3
    8000a842:	2781                	sext.w	a5,a5
    8000a844:	1782                	sll	a5,a5,0x20
    8000a846:	fff086b7          	lui	a3,0xfff08
    8000a84a:	9381                	srl	a5,a5,0x20
    8000a84c:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a84e:	8ff5                	and	a5,a5,a3
    8000a850:	00012597          	auipc	a1,0x12
    8000a854:	28058593          	add	a1,a1,640 # 8001cad0 <__func__.1+0x2d8>
    8000a858:	00f70463          	beq	a4,a5,8000a860 <tinst_tests+0x33d6>
    8000a85c:	d43fd06f          	j	8000859e <tinst_tests+0x1114>
    8000a860:	00012597          	auipc	a1,0x12
    8000a864:	26058593          	add	a1,a1,608 # 8001cac0 <__func__.1+0x2c8>
    8000a868:	d37fd06f          	j	8000859e <tinst_tests+0x1114>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000a86c:	7018                	ld	a4,32(s0)
    8000a86e:	e319                	bnez	a4,8000a874 <tinst_tests+0x33ea>
    8000a870:	934fe06f          	j	800089a4 <tinst_tests+0x151a>
    8000a874:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a876:	0016f793          	and	a5,a3,1
    8000a87a:	c399                	beqz	a5,8000a880 <tinst_tests+0x33f6>
    8000a87c:	b43fe06f          	j	800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a880:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a884:	460d                	li	a2,3
    8000a886:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a88a:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a88c:	00c59863          	bne	a1,a2,8000a89c <tinst_tests+0x3412>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a890:	0026d683          	lhu	a3,2(a3)
    8000a894:	0106969b          	sllw	a3,a3,0x10
    8000a898:	8fd5                	or	a5,a5,a3
    8000a89a:	2781                	sext.w	a5,a5
    8000a89c:	1782                	sll	a5,a5,0x20
    8000a89e:	fff086b7          	lui	a3,0xfff08
    8000a8a2:	9381                	srl	a5,a5,0x20
    8000a8a4:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a8a6:	8ff5                	and	a5,a5,a3
    8000a8a8:	00f70463          	beq	a4,a5,8000a8b0 <tinst_tests+0x3426>
    8000a8ac:	8e4fe06f          	j	80008990 <tinst_tests+0x1506>
    8000a8b0:	8f4fe06f          	j	800089a4 <tinst_tests+0x151a>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000a8b4:	701c                	ld	a5,32(s0)
    8000a8b6:	00012597          	auipc	a1,0x12
    8000a8ba:	20a58593          	add	a1,a1,522 # 8001cac0 <__func__.1+0x2c8>
    8000a8be:	e399                	bnez	a5,8000a8c4 <tinst_tests+0x343a>
    8000a8c0:	d85fd06f          	j	80008644 <tinst_tests+0x11ba>
    8000a8c4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a8c6:	0016f713          	and	a4,a3,1
    8000a8ca:	c319                	beqz	a4,8000a8d0 <tinst_tests+0x3446>
    8000a8cc:	af3fe06f          	j	800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a8d0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a8d4:	460d                	li	a2,3
    8000a8d6:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    8000a8da:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a8dc:	00c59863          	bne	a1,a2,8000a8ec <tinst_tests+0x3462>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a8e0:	0026d683          	lhu	a3,2(a3)
    8000a8e4:	0106969b          	sllw	a3,a3,0x10
    8000a8e8:	8f55                	or	a4,a4,a3
    8000a8ea:	2701                	sext.w	a4,a4
    8000a8ec:	1702                	sll	a4,a4,0x20
    8000a8ee:	fff086b7          	lui	a3,0xfff08
    8000a8f2:	9301                	srl	a4,a4,0x20
    8000a8f4:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a8f6:	8f75                	and	a4,a4,a3
    8000a8f8:	00012597          	auipc	a1,0x12
    8000a8fc:	1d858593          	add	a1,a1,472 # 8001cad0 <__func__.1+0x2d8>
    8000a900:	00e78463          	beq	a5,a4,8000a908 <tinst_tests+0x347e>
    8000a904:	d41fd06f          	j	80008644 <tinst_tests+0x11ba>
    8000a908:	00012597          	auipc	a1,0x12
    8000a90c:	1b858593          	add	a1,a1,440 # 8001cac0 <__func__.1+0x2c8>
    8000a910:	d35fd06f          	j	80008644 <tinst_tests+0x11ba>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000a914:	701c                	ld	a5,32(s0)
    8000a916:	e399                	bnez	a5,8000a91c <tinst_tests+0x3492>
    8000a918:	92afe06f          	j	80008a42 <tinst_tests+0x15b8>
    8000a91c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a91e:	0016f713          	and	a4,a3,1
    8000a922:	c319                	beqz	a4,8000a928 <tinst_tests+0x349e>
    8000a924:	a9bfe06f          	j	800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a928:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a92c:	460d                	li	a2,3
    8000a92e:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    8000a932:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a934:	00c59863          	bne	a1,a2,8000a944 <tinst_tests+0x34ba>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a938:	0026d683          	lhu	a3,2(a3)
    8000a93c:	0106969b          	sllw	a3,a3,0x10
    8000a940:	8f55                	or	a4,a4,a3
    8000a942:	2701                	sext.w	a4,a4
    8000a944:	1702                	sll	a4,a4,0x20
    8000a946:	fff086b7          	lui	a3,0xfff08
    8000a94a:	9301                	srl	a4,a4,0x20
    8000a94c:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a94e:	8f75                	and	a4,a4,a3
    8000a950:	00e78463          	beq	a5,a4,8000a958 <tinst_tests+0x34ce>
    8000a954:	8dafe06f          	j	80008a2e <tinst_tests+0x15a4>
    8000a958:	8eafe06f          	j	80008a42 <tinst_tests+0x15b8>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000a95c:	701c                	ld	a5,32(s0)
    8000a95e:	00012597          	auipc	a1,0x12
    8000a962:	16258593          	add	a1,a1,354 # 8001cac0 <__func__.1+0x2c8>
    8000a966:	e399                	bnez	a5,8000a96c <tinst_tests+0x34e2>
    8000a968:	d83fd06f          	j	800086ea <tinst_tests+0x1260>
    8000a96c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a96e:	0016f713          	and	a4,a3,1
    8000a972:	c319                	beqz	a4,8000a978 <tinst_tests+0x34ee>
    8000a974:	a4bfe06f          	j	800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a978:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a97c:	460d                	li	a2,3
    8000a97e:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    8000a982:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a984:	00c59863          	bne	a1,a2,8000a994 <tinst_tests+0x350a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a988:	0026d683          	lhu	a3,2(a3)
    8000a98c:	0106969b          	sllw	a3,a3,0x10
    8000a990:	8f55                	or	a4,a4,a3
    8000a992:	2701                	sext.w	a4,a4
    8000a994:	1702                	sll	a4,a4,0x20
    8000a996:	fff086b7          	lui	a3,0xfff08
    8000a99a:	9301                	srl	a4,a4,0x20
    8000a99c:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a99e:	8f75                	and	a4,a4,a3
    8000a9a0:	00012597          	auipc	a1,0x12
    8000a9a4:	13058593          	add	a1,a1,304 # 8001cad0 <__func__.1+0x2d8>
    8000a9a8:	00e78463          	beq	a5,a4,8000a9b0 <tinst_tests+0x3526>
    8000a9ac:	d3ffd06f          	j	800086ea <tinst_tests+0x1260>
    8000a9b0:	00012597          	auipc	a1,0x12
    8000a9b4:	11058593          	add	a1,a1,272 # 8001cac0 <__func__.1+0x2c8>
    8000a9b8:	d33fd06f          	j	800086ea <tinst_tests+0x1260>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    8000a9bc:	7018                	ld	a4,32(s0)
    8000a9be:	e319                	bnez	a4,8000a9c4 <tinst_tests+0x353a>
    8000a9c0:	920fe06f          	j	80008ae0 <tinst_tests+0x1656>
    8000a9c4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a9c6:	0016f793          	and	a5,a3,1
    8000a9ca:	c399                	beqz	a5,8000a9d0 <tinst_tests+0x3546>
    8000a9cc:	9f3fe06f          	j	800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a9d0:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a9d4:	460d                	li	a2,3
    8000a9d6:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a9da:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a9dc:	00c59863          	bne	a1,a2,8000a9ec <tinst_tests+0x3562>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a9e0:	0026d683          	lhu	a3,2(a3)
    8000a9e4:	0106969b          	sllw	a3,a3,0x10
    8000a9e8:	8fd5                	or	a5,a5,a3
    8000a9ea:	2781                	sext.w	a5,a5
    8000a9ec:	1782                	sll	a5,a5,0x20
    8000a9ee:	fff086b7          	lui	a3,0xfff08
    8000a9f2:	9381                	srl	a5,a5,0x20
    8000a9f4:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a9f6:	8ff5                	and	a5,a5,a3
    8000a9f8:	00f70463          	beq	a4,a5,8000aa00 <tinst_tests+0x3576>
    8000a9fc:	8d0fe06f          	j	80008acc <tinst_tests+0x1642>
    8000aa00:	8e0fe06f          	j	80008ae0 <tinst_tests+0x1656>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    8000aa04:	7018                	ld	a4,32(s0)
    8000aa06:	00012597          	auipc	a1,0x12
    8000aa0a:	0ba58593          	add	a1,a1,186 # 8001cac0 <__func__.1+0x2c8>
    8000aa0e:	e319                	bnez	a4,8000aa14 <tinst_tests+0x358a>
    8000aa10:	d81fd06f          	j	80008790 <tinst_tests+0x1306>
    8000aa14:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aa16:	0016f793          	and	a5,a3,1
    8000aa1a:	c399                	beqz	a5,8000aa20 <tinst_tests+0x3596>
    8000aa1c:	9a3fe06f          	j	800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000aa20:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aa24:	460d                	li	a2,3
    8000aa26:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000aa2a:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000aa2c:	00c59863          	bne	a1,a2,8000aa3c <tinst_tests+0x35b2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aa30:	0026d683          	lhu	a3,2(a3)
    8000aa34:	0106969b          	sllw	a3,a3,0x10
    8000aa38:	8fd5                	or	a5,a5,a3
    8000aa3a:	2781                	sext.w	a5,a5
    8000aa3c:	1782                	sll	a5,a5,0x20
    8000aa3e:	fff086b7          	lui	a3,0xfff08
    8000aa42:	9381                	srl	a5,a5,0x20
    8000aa44:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000aa46:	8ff5                	and	a5,a5,a3
    8000aa48:	00012597          	auipc	a1,0x12
    8000aa4c:	08858593          	add	a1,a1,136 # 8001cad0 <__func__.1+0x2d8>
    8000aa50:	00f70463          	beq	a4,a5,8000aa58 <tinst_tests+0x35ce>
    8000aa54:	d3dfd06f          	j	80008790 <tinst_tests+0x1306>
    8000aa58:	00012597          	auipc	a1,0x12
    8000aa5c:	06858593          	add	a1,a1,104 # 8001cac0 <__func__.1+0x2c8>
    8000aa60:	d31fd06f          	j	80008790 <tinst_tests+0x1306>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000aa64:	701c                	ld	a5,32(s0)
    8000aa66:	00012597          	auipc	a1,0x12
    8000aa6a:	05a58593          	add	a1,a1,90 # 8001cac0 <__func__.1+0x2c8>
    8000aa6e:	e399                	bnez	a5,8000aa74 <tinst_tests+0x35ea>
    8000aa70:	dc7fd06f          	j	80008836 <tinst_tests+0x13ac>
    8000aa74:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aa76:	0016f713          	and	a4,a3,1
    8000aa7a:	c319                	beqz	a4,8000aa80 <tinst_tests+0x35f6>
    8000aa7c:	943fe06f          	j	800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000aa80:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aa84:	460d                	li	a2,3
    8000aa86:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    8000aa8a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aa8c:	00c59863          	bne	a1,a2,8000aa9c <tinst_tests+0x3612>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aa90:	0026d683          	lhu	a3,2(a3)
    8000aa94:	0106969b          	sllw	a3,a3,0x10
    8000aa98:	8f55                	or	a4,a4,a3
    8000aa9a:	2701                	sext.w	a4,a4
    8000aa9c:	1702                	sll	a4,a4,0x20
    8000aa9e:	fff086b7          	lui	a3,0xfff08
    8000aaa2:	9301                	srl	a4,a4,0x20
    8000aaa4:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000aaa6:	8f75                	and	a4,a4,a3
    8000aaa8:	00012597          	auipc	a1,0x12
    8000aaac:	02858593          	add	a1,a1,40 # 8001cad0 <__func__.1+0x2d8>
    8000aab0:	00e78463          	beq	a5,a4,8000aab8 <tinst_tests+0x362e>
    8000aab4:	d83fd06f          	j	80008836 <tinst_tests+0x13ac>
    8000aab8:	00012597          	auipc	a1,0x12
    8000aabc:	00858593          	add	a1,a1,8 # 8001cac0 <__func__.1+0x2c8>
    8000aac0:	d77fd06f          	j	80008836 <tinst_tests+0x13ac>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000aac4:	7018                	ld	a4,32(s0)
    8000aac6:	00012597          	auipc	a1,0x12
    8000aaca:	ffa58593          	add	a1,a1,-6 # 8001cac0 <__func__.1+0x2c8>
    8000aace:	e319                	bnez	a4,8000aad4 <tinst_tests+0x364a>
    8000aad0:	e05fd06f          	j	800088d4 <tinst_tests+0x144a>
    8000aad4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aad6:	0016f793          	and	a5,a3,1
    8000aada:	c399                	beqz	a5,8000aae0 <tinst_tests+0x3656>
    8000aadc:	8e3fe06f          	j	800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000aae0:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aae4:	460d                	li	a2,3
    8000aae6:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000aaea:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000aaec:	00c59863          	bne	a1,a2,8000aafc <tinst_tests+0x3672>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aaf0:	0026d683          	lhu	a3,2(a3)
    8000aaf4:	0106969b          	sllw	a3,a3,0x10
    8000aaf8:	8fd5                	or	a5,a5,a3
    8000aafa:	2781                	sext.w	a5,a5
    8000aafc:	1782                	sll	a5,a5,0x20
    8000aafe:	fff086b7          	lui	a3,0xfff08
    8000ab02:	9381                	srl	a5,a5,0x20
    8000ab04:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000ab06:	8ff5                	and	a5,a5,a3
    8000ab08:	00012597          	auipc	a1,0x12
    8000ab0c:	fc858593          	add	a1,a1,-56 # 8001cad0 <__func__.1+0x2d8>
    8000ab10:	00f70463          	beq	a4,a5,8000ab18 <tinst_tests+0x368e>
    8000ab14:	dc1fd06f          	j	800088d4 <tinst_tests+0x144a>
    8000ab18:	00012597          	auipc	a1,0x12
    8000ab1c:	fa858593          	add	a1,a1,-88 # 8001cac0 <__func__.1+0x2c8>
    8000ab20:	db5fd06f          	j	800088d4 <tinst_tests+0x144a>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000ab24:	701c                	ld	a5,32(s0)
    8000ab26:	00012597          	auipc	a1,0x12
    8000ab2a:	f9a58593          	add	a1,a1,-102 # 8001cac0 <__func__.1+0x2c8>
    8000ab2e:	e399                	bnez	a5,8000ab34 <tinst_tests+0x36aa>
    8000ab30:	e43fd06f          	j	80008972 <tinst_tests+0x14e8>
    8000ab34:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ab36:	0016f713          	and	a4,a3,1
    8000ab3a:	c319                	beqz	a4,8000ab40 <tinst_tests+0x36b6>
    8000ab3c:	883fe06f          	j	800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000ab40:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ab44:	460d                	li	a2,3
    8000ab46:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    8000ab4a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ab4c:	00c59863          	bne	a1,a2,8000ab5c <tinst_tests+0x36d2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ab50:	0026d683          	lhu	a3,2(a3)
    8000ab54:	0106969b          	sllw	a3,a3,0x10
    8000ab58:	8f55                	or	a4,a4,a3
    8000ab5a:	2701                	sext.w	a4,a4
    8000ab5c:	1702                	sll	a4,a4,0x20
    8000ab5e:	fff086b7          	lui	a3,0xfff08
    8000ab62:	9301                	srl	a4,a4,0x20
    8000ab64:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000ab66:	8f75                	and	a4,a4,a3
    8000ab68:	00012597          	auipc	a1,0x12
    8000ab6c:	f6858593          	add	a1,a1,-152 # 8001cad0 <__func__.1+0x2d8>
    8000ab70:	00e78463          	beq	a5,a4,8000ab78 <tinst_tests+0x36ee>
    8000ab74:	dfffd06f          	j	80008972 <tinst_tests+0x14e8>
    8000ab78:	00012597          	auipc	a1,0x12
    8000ab7c:	f4858593          	add	a1,a1,-184 # 8001cac0 <__func__.1+0x2c8>
    8000ab80:	df3fd06f          	j	80008972 <tinst_tests+0x14e8>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000ab84:	701c                	ld	a5,32(s0)
    8000ab86:	00012597          	auipc	a1,0x12
    8000ab8a:	f3a58593          	add	a1,a1,-198 # 8001cac0 <__func__.1+0x2c8>
    8000ab8e:	e399                	bnez	a5,8000ab94 <tinst_tests+0x370a>
    8000ab90:	e81fd06f          	j	80008a10 <tinst_tests+0x1586>
    8000ab94:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ab96:	0016f713          	and	a4,a3,1
    8000ab9a:	c319                	beqz	a4,8000aba0 <tinst_tests+0x3716>
    8000ab9c:	823fe06f          	j	800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000aba0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aba4:	460d                	li	a2,3
    8000aba6:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    8000abaa:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000abac:	00c59863          	bne	a1,a2,8000abbc <tinst_tests+0x3732>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000abb0:	0026d683          	lhu	a3,2(a3)
    8000abb4:	0106969b          	sllw	a3,a3,0x10
    8000abb8:	8f55                	or	a4,a4,a3
    8000abba:	2701                	sext.w	a4,a4
    8000abbc:	1702                	sll	a4,a4,0x20
    8000abbe:	fff086b7          	lui	a3,0xfff08
    8000abc2:	9301                	srl	a4,a4,0x20
    8000abc4:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000abc6:	8f75                	and	a4,a4,a3
    8000abc8:	00012597          	auipc	a1,0x12
    8000abcc:	f0858593          	add	a1,a1,-248 # 8001cad0 <__func__.1+0x2d8>
    8000abd0:	00e78463          	beq	a5,a4,8000abd8 <tinst_tests+0x374e>
    8000abd4:	e3dfd06f          	j	80008a10 <tinst_tests+0x1586>
    8000abd8:	00012597          	auipc	a1,0x12
    8000abdc:	ee858593          	add	a1,a1,-280 # 8001cac0 <__func__.1+0x2c8>
    8000abe0:	e31fd06f          	j	80008a10 <tinst_tests+0x1586>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    8000abe4:	7018                	ld	a4,32(s0)
    8000abe6:	00012597          	auipc	a1,0x12
    8000abea:	eda58593          	add	a1,a1,-294 # 8001cac0 <__func__.1+0x2c8>
    8000abee:	e319                	bnez	a4,8000abf4 <tinst_tests+0x376a>
    8000abf0:	ebffd06f          	j	80008aae <tinst_tests+0x1624>
    8000abf4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000abf6:	0016f793          	and	a5,a3,1
    8000abfa:	c399                	beqz	a5,8000ac00 <tinst_tests+0x3776>
    8000abfc:	fc2fe06f          	j	800093be <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000ac00:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ac04:	460d                	li	a2,3
    8000ac06:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000ac0a:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000ac0c:	00c59863          	bne	a1,a2,8000ac1c <tinst_tests+0x3792>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ac10:	0026d683          	lhu	a3,2(a3)
    8000ac14:	0106969b          	sllw	a3,a3,0x10
    8000ac18:	8fd5                	or	a5,a5,a3
    8000ac1a:	2781                	sext.w	a5,a5
    8000ac1c:	1782                	sll	a5,a5,0x20
    8000ac1e:	fff086b7          	lui	a3,0xfff08
    8000ac22:	9381                	srl	a5,a5,0x20
    8000ac24:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000ac26:	8ff5                	and	a5,a5,a3
    8000ac28:	00012597          	auipc	a1,0x12
    8000ac2c:	ea858593          	add	a1,a1,-344 # 8001cad0 <__func__.1+0x2d8>
    8000ac30:	00f70463          	beq	a4,a5,8000ac38 <tinst_tests+0x37ae>
    8000ac34:	e7bfd06f          	j	80008aae <tinst_tests+0x1624>
    8000ac38:	00012597          	auipc	a1,0x12
    8000ac3c:	e8858593          	add	a1,a1,-376 # 8001cac0 <__func__.1+0x2c8>
    8000ac40:	e6ffd06f          	j	80008aae <tinst_tests+0x1624>

000000008000ac44 <priv_change_1>:
#include <rvh_test.h>
#include <csrs.h> 
#include <page_tables.h> 
bool priv_change_1(){
    8000ac44:	1101                	add	sp,sp,-32
    
    TEST_START();
    8000ac46:	00011597          	auipc	a1,0x11
    8000ac4a:	daa58593          	add	a1,a1,-598 # 8001b9f0 <__func__.15>
    8000ac4e:	00012517          	auipc	a0,0x12
    8000ac52:	e9250513          	add	a0,a0,-366 # 8001cae0 <__func__.1+0x2e8>
bool priv_change_1(){
    8000ac56:	ec06                	sd	ra,24(sp)
    8000ac58:	e822                	sd	s0,16(sp)
    8000ac5a:	e426                	sd	s1,8(sp)
    TEST_START();
    8000ac5c:	306100ef          	jal	8001af62 <printf>
    8000ac60:	4529                	li	a0,10
    8000ac62:	1d20f0ef          	jal	80019e34 <putchar>


    goto_priv(PRIV_HS);
    8000ac66:	450d                	li	a0,3
    8000ac68:	e77f50ef          	jal	80000ade <goto_priv>
    hspt_init();
    8000ac6c:	975f50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000ac70:	bb7f50ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    8000ac74:	4509                	li	a0,2
    8000ac76:	e69f50ef          	jal	80000ade <goto_priv>
    vspt_init(); 
    8000ac7a:	a3bf50ef          	jal	800006b4 <vspt_init>

    //V=1，VS模式下发生异常，关闭代理，切换到M态处理异常，异常结束恢复到VS态
    goto_priv(PRIV_M);
    8000ac7e:	4511                	li	a0,4
    8000ac80:	e5ff50ef          	jal	80000ade <goto_priv>
    CSRW(medeleg,0);
    8000ac84:	30205073          	csrw	medeleg,0
    CSRW(mideleg,0);     
    8000ac88:	30305073          	csrw	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000ac8c:	60305073          	csrw	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000ac90:	60205073          	csrw	hedeleg,0

    goto_priv(PRIV_VS);     
    8000ac94:	4509                	li	a0,2
    8000ac96:	e49f50ef          	jal	80000ade <goto_priv>
    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000ac9a:	0ff0000f          	fence
    8000ac9e:	4785                	li	a5,1
    8000aca0:	00032417          	auipc	s0,0x32
    8000aca4:	37040413          	add	s0,s0,880 # 8003d010 <excpt>
    8000aca8:	00f41023          	sh	a5,0(s0)
    8000acac:	00032797          	auipc	a5,0x32
    8000acb0:	3807be23          	sd	zero,924(a5) # 8003d048 <excpt+0x38>
    8000acb4:	0ff0000f          	fence
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8000acb8:	400197b7          	lui	a5,0x40019
    8000acbc:	078a                	sll	a5,a5,0x2
    8000acbe:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000acc2:	08200593          	li	a1,130
    8000acc6:	00014617          	auipc	a2,0x14
    8000acca:	e6260613          	add	a2,a2,-414 # 8001eb28 <__func__.1+0x2330>
    8000acce:	00012517          	auipc	a0,0x12
    8000acd2:	e2a50513          	add	a0,a0,-470 # 8001caf8 <__func__.1+0x300>
    8000acd6:	28c100ef          	jal	8001af62 <printf>
    8000acda:	00144783          	lbu	a5,1(s0)
    8000acde:	00012597          	auipc	a1,0x12
    8000ace2:	df258593          	add	a1,a1,-526 # 8001cad0 <__func__.1+0x2d8>
    8000ace6:	c789                	beqz	a5,8000acf0 <priv_change_1+0xac>
    8000ace8:	6418                	ld	a4,8(s0)
    8000acea:	47b5                	li	a5,13
    8000acec:	0af70563          	beq	a4,a5,8000ad96 <priv_change_1+0x152>
    8000acf0:	00012517          	auipc	a0,0x12
    8000acf4:	e2050513          	add	a0,a0,-480 # 8001cb10 <__func__.1+0x318>
    8000acf8:	26a100ef          	jal	8001af62 <printf>
    8000acfc:	00144783          	lbu	a5,1(s0)
    8000ad00:	c789                	beqz	a5,8000ad0a <priv_change_1+0xc6>
    8000ad02:	6418                	ld	a4,8(s0)
    8000ad04:	47b5                	li	a5,13
    8000ad06:	04f70c63          	beq	a4,a5,8000ad5e <priv_change_1+0x11a>
    8000ad0a:	00012517          	auipc	a0,0x12
    8000ad0e:	e0e50513          	add	a0,a0,-498 # 8001cb18 <__func__.1+0x320>
    8000ad12:	250100ef          	jal	8001af62 <printf>
    8000ad16:	02900513          	li	a0,41
    8000ad1a:	11a0f0ef          	jal	80019e34 <putchar>
    8000ad1e:	4529                	li	a0,10
    8000ad20:	1140f0ef          	jal	80019e34 <putchar>
    8000ad24:	00144483          	lbu	s1,1(s0)
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_M &&
        curr_priv == PRIV_VS
    );

    TEST_END();
    8000ad28:	00012597          	auipc	a1,0x12
    8000ad2c:	da858593          	add	a1,a1,-600 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000ad30:	c491                	beqz	s1,8000ad3c <priv_change_1+0xf8>
    8000ad32:	6418                	ld	a4,8(s0)
    8000ad34:	47b5                	li	a5,13
    8000ad36:	04f70063          	beq	a4,a5,8000ad76 <priv_change_1+0x132>
    8000ad3a:	4481                	li	s1,0
    TEST_END();
    8000ad3c:	00012517          	auipc	a0,0x12
    8000ad40:	e3c50513          	add	a0,a0,-452 # 8001cb78 <__func__.1+0x380>
    8000ad44:	21e100ef          	jal	8001af62 <printf>
    8000ad48:	4511                	li	a0,4
    8000ad4a:	d95f50ef          	jal	80000ade <goto_priv>
    8000ad4e:	dd8f60ef          	jal	80001326 <reset_state>
}
    8000ad52:	60e2                	ld	ra,24(sp)
    8000ad54:	6442                	ld	s0,16(sp)
    8000ad56:	8526                	mv	a0,s1
    8000ad58:	64a2                	ld	s1,8(sp)
    8000ad5a:	6105                	add	sp,sp,32
    8000ad5c:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000ad5e:	4058                	lw	a4,4(s0)
    8000ad60:	4791                	li	a5,4
    8000ad62:	faf714e3          	bne	a4,a5,8000ad0a <priv_change_1+0xc6>
    8000ad66:	0001a717          	auipc	a4,0x1a
    8000ad6a:	32e72703          	lw	a4,814(a4) # 80025094 <curr_priv>
    8000ad6e:	4789                	li	a5,2
    8000ad70:	f8f71de3          	bne	a4,a5,8000ad0a <priv_change_1+0xc6>
    8000ad74:	b76d                	j	8000ad1e <priv_change_1+0xda>
    8000ad76:	4058                	lw	a4,4(s0)
    8000ad78:	4791                	li	a5,4
    8000ad7a:	fcf710e3          	bne	a4,a5,8000ad3a <priv_change_1+0xf6>
    8000ad7e:	0001a717          	auipc	a4,0x1a
    8000ad82:	31672703          	lw	a4,790(a4) # 80025094 <curr_priv>
    8000ad86:	4789                	li	a5,2
    8000ad88:	faf719e3          	bne	a4,a5,8000ad3a <priv_change_1+0xf6>
    TEST_END();
    8000ad8c:	00012597          	auipc	a1,0x12
    8000ad90:	d3458593          	add	a1,a1,-716 # 8001cac0 <__func__.1+0x2c8>
    8000ad94:	b765                	j	8000ad3c <priv_change_1+0xf8>
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000ad96:	4058                	lw	a4,4(s0)
    8000ad98:	4791                	li	a5,4
    8000ad9a:	f4f71be3          	bne	a4,a5,8000acf0 <priv_change_1+0xac>
    8000ad9e:	0001a717          	auipc	a4,0x1a
    8000ada2:	2f672703          	lw	a4,758(a4) # 80025094 <curr_priv>
    8000ada6:	4789                	li	a5,2
    8000ada8:	f4f714e3          	bne	a4,a5,8000acf0 <priv_change_1+0xac>
    8000adac:	00012597          	auipc	a1,0x12
    8000adb0:	d1458593          	add	a1,a1,-748 # 8001cac0 <__func__.1+0x2c8>
    8000adb4:	bf35                	j	8000acf0 <priv_change_1+0xac>

000000008000adb6 <priv_change_2>:

bool priv_change_2(){
    8000adb6:	1101                	add	sp,sp,-32
    
    TEST_START();
    8000adb8:	00011597          	auipc	a1,0x11
    8000adbc:	c4858593          	add	a1,a1,-952 # 8001ba00 <__func__.13>
    8000adc0:	00012517          	auipc	a0,0x12
    8000adc4:	d2050513          	add	a0,a0,-736 # 8001cae0 <__func__.1+0x2e8>
bool priv_change_2(){
    8000adc8:	ec06                	sd	ra,24(sp)
    8000adca:	e822                	sd	s0,16(sp)
    8000adcc:	e426                	sd	s1,8(sp)
    TEST_START();
    8000adce:	194100ef          	jal	8001af62 <printf>
    8000add2:	4529                	li	a0,10
    8000add4:	0600f0ef          	jal	80019e34 <putchar>


    goto_priv(PRIV_HS);
    8000add8:	450d                	li	a0,3
    8000adda:	d05f50ef          	jal	80000ade <goto_priv>
    hspt_init();
    8000adde:	803f50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000ade2:	a45f50ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    8000ade6:	4509                	li	a0,2
    8000ade8:	cf7f50ef          	jal	80000ade <goto_priv>
    vspt_init(); 
    8000adec:	8c9f50ef          	jal	800006b4 <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;
    //V=1，VS模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000adf0:	4511                	li	a0,4
    8000adf2:	cedf50ef          	jal	80000ade <goto_priv>
    CSRC(medeleg, 1 << CAUSE_LPF);         
    8000adf6:	6789                	lui	a5,0x2
    8000adf8:	3027b073          	csrc	medeleg,a5
    goto_priv(PRIV_VS);     
    8000adfc:	4509                	li	a0,2
    8000adfe:	ce1f50ef          	jal	80000ade <goto_priv>

    vaddr_f = vs_page_base(VSI_GI);      
    value = 0xdeadbeef;
    
    TEST_SETUP_EXCEPT();        
    8000ae02:	0ff0000f          	fence
    8000ae06:	4785                	li	a5,1
    8000ae08:	00032417          	auipc	s0,0x32
    8000ae0c:	20840413          	add	s0,s0,520 # 8003d010 <excpt>
    8000ae10:	00f41023          	sh	a5,0(s0)
    8000ae14:	00032797          	auipc	a5,0x32
    8000ae18:	2207ba23          	sd	zero,564(a5) # 8003d048 <excpt+0x38>
    8000ae1c:	0ff0000f          	fence
    8000ae20:	400197b7          	lui	a5,0x40019
    8000ae24:	078a                	sll	a5,a5,0x2
    8000ae26:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000ae2a:	08200593          	li	a1,130
    8000ae2e:	00014617          	auipc	a2,0x14
    8000ae32:	d6a60613          	add	a2,a2,-662 # 8001eb98 <__func__.1+0x23a0>
    8000ae36:	00012517          	auipc	a0,0x12
    8000ae3a:	cc250513          	add	a0,a0,-830 # 8001caf8 <__func__.1+0x300>
    8000ae3e:	124100ef          	jal	8001af62 <printf>
    8000ae42:	00144783          	lbu	a5,1(s0)
    8000ae46:	00012597          	auipc	a1,0x12
    8000ae4a:	c8a58593          	add	a1,a1,-886 # 8001cad0 <__func__.1+0x2d8>
    8000ae4e:	c789                	beqz	a5,8000ae58 <priv_change_2+0xa2>
    8000ae50:	6418                	ld	a4,8(s0)
    8000ae52:	47b5                	li	a5,13
    8000ae54:	0af70563          	beq	a4,a5,8000aefe <priv_change_2+0x148>
    8000ae58:	00012517          	auipc	a0,0x12
    8000ae5c:	cb850513          	add	a0,a0,-840 # 8001cb10 <__func__.1+0x318>
    8000ae60:	102100ef          	jal	8001af62 <printf>
    8000ae64:	00144783          	lbu	a5,1(s0)
    8000ae68:	c789                	beqz	a5,8000ae72 <priv_change_2+0xbc>
    8000ae6a:	6418                	ld	a4,8(s0)
    8000ae6c:	47b5                	li	a5,13
    8000ae6e:	04f70c63          	beq	a4,a5,8000aec6 <priv_change_2+0x110>
    8000ae72:	00012517          	auipc	a0,0x12
    8000ae76:	ca650513          	add	a0,a0,-858 # 8001cb18 <__func__.1+0x320>
    8000ae7a:	0e8100ef          	jal	8001af62 <printf>
    8000ae7e:	02900513          	li	a0,41
    8000ae82:	7b30e0ef          	jal	80019e34 <putchar>
    8000ae86:	4529                	li	a0,10
    8000ae88:	7ad0e0ef          	jal	80019e34 <putchar>
    8000ae8c:	00144483          	lbu	s1,1(s0)
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_M &&
        curr_priv == PRIV_VS
    );    

    TEST_END();
    8000ae90:	00012597          	auipc	a1,0x12
    8000ae94:	c4058593          	add	a1,a1,-960 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000ae98:	c491                	beqz	s1,8000aea4 <priv_change_2+0xee>
    8000ae9a:	6418                	ld	a4,8(s0)
    8000ae9c:	47b5                	li	a5,13
    8000ae9e:	04f70063          	beq	a4,a5,8000aede <priv_change_2+0x128>
    8000aea2:	4481                	li	s1,0
    TEST_END();
    8000aea4:	00012517          	auipc	a0,0x12
    8000aea8:	cd450513          	add	a0,a0,-812 # 8001cb78 <__func__.1+0x380>
    8000aeac:	0b6100ef          	jal	8001af62 <printf>
    8000aeb0:	4511                	li	a0,4
    8000aeb2:	c2df50ef          	jal	80000ade <goto_priv>
    8000aeb6:	c70f60ef          	jal	80001326 <reset_state>
}
    8000aeba:	60e2                	ld	ra,24(sp)
    8000aebc:	6442                	ld	s0,16(sp)
    8000aebe:	8526                	mv	a0,s1
    8000aec0:	64a2                	ld	s1,8(sp)
    8000aec2:	6105                	add	sp,sp,32
    8000aec4:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000aec6:	4058                	lw	a4,4(s0)
    8000aec8:	4791                	li	a5,4
    8000aeca:	faf714e3          	bne	a4,a5,8000ae72 <priv_change_2+0xbc>
    8000aece:	0001a717          	auipc	a4,0x1a
    8000aed2:	1c672703          	lw	a4,454(a4) # 80025094 <curr_priv>
    8000aed6:	4789                	li	a5,2
    8000aed8:	f8f71de3          	bne	a4,a5,8000ae72 <priv_change_2+0xbc>
    8000aedc:	b76d                	j	8000ae86 <priv_change_2+0xd0>
    8000aede:	4058                	lw	a4,4(s0)
    8000aee0:	4791                	li	a5,4
    8000aee2:	fcf710e3          	bne	a4,a5,8000aea2 <priv_change_2+0xec>
    8000aee6:	0001a717          	auipc	a4,0x1a
    8000aeea:	1ae72703          	lw	a4,430(a4) # 80025094 <curr_priv>
    8000aeee:	4789                	li	a5,2
    8000aef0:	faf719e3          	bne	a4,a5,8000aea2 <priv_change_2+0xec>
    TEST_END();
    8000aef4:	00012597          	auipc	a1,0x12
    8000aef8:	bcc58593          	add	a1,a1,-1076 # 8001cac0 <__func__.1+0x2c8>
    8000aefc:	b765                	j	8000aea4 <priv_change_2+0xee>
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000aefe:	4058                	lw	a4,4(s0)
    8000af00:	4791                	li	a5,4
    8000af02:	f4f71be3          	bne	a4,a5,8000ae58 <priv_change_2+0xa2>
    8000af06:	0001a717          	auipc	a4,0x1a
    8000af0a:	18e72703          	lw	a4,398(a4) # 80025094 <curr_priv>
    8000af0e:	4789                	li	a5,2
    8000af10:	f4f714e3          	bne	a4,a5,8000ae58 <priv_change_2+0xa2>
    8000af14:	00012597          	auipc	a1,0x12
    8000af18:	bac58593          	add	a1,a1,-1108 # 8001cac0 <__func__.1+0x2c8>
    8000af1c:	bf35                	j	8000ae58 <priv_change_2+0xa2>

000000008000af1e <priv_change_3>:


bool priv_change_3(){
    8000af1e:	1101                	add	sp,sp,-32
    
    TEST_START();
    8000af20:	00011597          	auipc	a1,0x11
    8000af24:	af058593          	add	a1,a1,-1296 # 8001ba10 <__func__.12>
    8000af28:	00012517          	auipc	a0,0x12
    8000af2c:	bb850513          	add	a0,a0,-1096 # 8001cae0 <__func__.1+0x2e8>
bool priv_change_3(){
    8000af30:	ec06                	sd	ra,24(sp)
    8000af32:	e822                	sd	s0,16(sp)
    8000af34:	e426                	sd	s1,8(sp)
    TEST_START();
    8000af36:	02c100ef          	jal	8001af62 <printf>
    8000af3a:	4529                	li	a0,10
    8000af3c:	6f90e0ef          	jal	80019e34 <putchar>


    goto_priv(PRIV_HS);
    8000af40:	450d                	li	a0,3
    8000af42:	b9df50ef          	jal	80000ade <goto_priv>
    hspt_init();
    8000af46:	e9af50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000af4a:	8ddf50ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    8000af4e:	4509                	li	a0,2
    8000af50:	b8ff50ef          	jal	80000ade <goto_priv>
    vspt_init(); 
    8000af54:	f60f50ef          	jal	800006b4 <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    //V=0，HS模式下发生异常，关闭代理，切换到M态处理异常，处理结束执行mret返回HS态
    TEST_SETUP_EXCEPT();  
    8000af58:	0ff0000f          	fence
    8000af5c:	00032417          	auipc	s0,0x32
    8000af60:	0b440413          	add	s0,s0,180 # 8003d010 <excpt>
    8000af64:	4485                	li	s1,1
    8000af66:	00941023          	sh	s1,0(s0)
    8000af6a:	00032797          	auipc	a5,0x32
    8000af6e:	0c07bf23          	sd	zero,222(a5) # 8003d048 <excpt+0x38>
    8000af72:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000af76:	4511                	li	a0,4
    8000af78:	b67f50ef          	jal	80000ade <goto_priv>
    CSRW(medeleg,0);
    8000af7c:	30205073          	csrw	medeleg,0
    CSRW(mideleg,0);
    8000af80:	30305073          	csrw	mideleg,0
    goto_priv(PRIV_HS);     
    8000af84:	450d                	li	a0,3
    8000af86:	b59f50ef          	jal	80000ade <goto_priv>
    vaddr_f = hs_page_base(VSI_GI);      
    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000af8a:	0ff0000f          	fence
    8000af8e:	00032797          	auipc	a5,0x32
    8000af92:	0a07bd23          	sd	zero,186(a5) # 8003d048 <excpt+0x38>
    8000af96:	00941023          	sh	s1,0(s0)
    8000af9a:	0ff0000f          	fence
    8000af9e:	400197b7          	lui	a5,0x40019
    8000afa2:	078a                	sll	a5,a5,0x2
    8000afa4:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    //mret();
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000afa8:	08200593          	li	a1,130
    8000afac:	00014617          	auipc	a2,0x14
    8000afb0:	c2c60613          	add	a2,a2,-980 # 8001ebd8 <__func__.1+0x23e0>
    8000afb4:	00012517          	auipc	a0,0x12
    8000afb8:	b4450513          	add	a0,a0,-1212 # 8001caf8 <__func__.1+0x300>
    8000afbc:	7a70f0ef          	jal	8001af62 <printf>
    8000afc0:	00144783          	lbu	a5,1(s0)
    8000afc4:	00012597          	auipc	a1,0x12
    8000afc8:	b0c58593          	add	a1,a1,-1268 # 8001cad0 <__func__.1+0x2d8>
    8000afcc:	cb81                	beqz	a5,8000afdc <priv_change_3+0xbe>
    8000afce:	0001a717          	auipc	a4,0x1a
    8000afd2:	0c672703          	lw	a4,198(a4) # 80025094 <curr_priv>
    8000afd6:	478d                	li	a5,3
    8000afd8:	08f70d63          	beq	a4,a5,8000b072 <priv_change_3+0x154>
    8000afdc:	00012517          	auipc	a0,0x12
    8000afe0:	b3450513          	add	a0,a0,-1228 # 8001cb10 <__func__.1+0x318>
    8000afe4:	77f0f0ef          	jal	8001af62 <printf>
    8000afe8:	00144783          	lbu	a5,1(s0)
    8000afec:	cb81                	beqz	a5,8000affc <priv_change_3+0xde>
    8000afee:	0001a717          	auipc	a4,0x1a
    8000aff2:	0a672703          	lw	a4,166(a4) # 80025094 <curr_priv>
    8000aff6:	478d                	li	a5,3
    8000aff8:	04f70f63          	beq	a4,a5,8000b056 <priv_change_3+0x138>
    8000affc:	00012517          	auipc	a0,0x12
    8000b000:	b1c50513          	add	a0,a0,-1252 # 8001cb18 <__func__.1+0x320>
    8000b004:	75f0f0ef          	jal	8001af62 <printf>
    8000b008:	02900513          	li	a0,41
    8000b00c:	6290e0ef          	jal	80019e34 <putchar>
    8000b010:	4529                	li	a0,10
    8000b012:	6230e0ef          	jal	80019e34 <putchar>
    8000b016:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        curr_priv == PRIV_HS &&
        excpt.priv == PRIV_M
    ); 

    TEST_END();
    8000b01a:	00012597          	auipc	a1,0x12
    8000b01e:	ab658593          	add	a1,a1,-1354 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000b022:	c889                	beqz	s1,8000b034 <priv_change_3+0x116>
    8000b024:	0001a717          	auipc	a4,0x1a
    8000b028:	07072703          	lw	a4,112(a4) # 80025094 <curr_priv>
    8000b02c:	478d                	li	a5,3
    8000b02e:	02f70963          	beq	a4,a5,8000b060 <priv_change_3+0x142>
    8000b032:	4481                	li	s1,0
    TEST_END();
    8000b034:	00012517          	auipc	a0,0x12
    8000b038:	b4450513          	add	a0,a0,-1212 # 8001cb78 <__func__.1+0x380>
    8000b03c:	7270f0ef          	jal	8001af62 <printf>
    8000b040:	4511                	li	a0,4
    8000b042:	a9df50ef          	jal	80000ade <goto_priv>
    8000b046:	ae0f60ef          	jal	80001326 <reset_state>
}
    8000b04a:	60e2                	ld	ra,24(sp)
    8000b04c:	6442                	ld	s0,16(sp)
    8000b04e:	8526                	mv	a0,s1
    8000b050:	64a2                	ld	s1,8(sp)
    8000b052:	6105                	add	sp,sp,32
    8000b054:	8082                	ret
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000b056:	4058                	lw	a4,4(s0)
    8000b058:	4791                	li	a5,4
    8000b05a:	faf711e3          	bne	a4,a5,8000affc <priv_change_3+0xde>
    8000b05e:	bf4d                	j	8000b010 <priv_change_3+0xf2>
    8000b060:	4058                	lw	a4,4(s0)
    8000b062:	4791                	li	a5,4
    8000b064:	fcf717e3          	bne	a4,a5,8000b032 <priv_change_3+0x114>
    TEST_END();
    8000b068:	00012597          	auipc	a1,0x12
    8000b06c:	a5858593          	add	a1,a1,-1448 # 8001cac0 <__func__.1+0x2c8>
    8000b070:	b7d1                	j	8000b034 <priv_change_3+0x116>
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000b072:	4058                	lw	a4,4(s0)
    8000b074:	4791                	li	a5,4
    8000b076:	f6f713e3          	bne	a4,a5,8000afdc <priv_change_3+0xbe>
    8000b07a:	00012597          	auipc	a1,0x12
    8000b07e:	a4658593          	add	a1,a1,-1466 # 8001cac0 <__func__.1+0x2c8>
    8000b082:	bfa9                	j	8000afdc <priv_change_3+0xbe>

000000008000b084 <priv_change_4>:

bool priv_change_4(){
    8000b084:	1101                	add	sp,sp,-32
    
    TEST_START();
    8000b086:	00011597          	auipc	a1,0x11
    8000b08a:	99a58593          	add	a1,a1,-1638 # 8001ba20 <__func__.11>
    8000b08e:	00012517          	auipc	a0,0x12
    8000b092:	a5250513          	add	a0,a0,-1454 # 8001cae0 <__func__.1+0x2e8>
bool priv_change_4(){
    8000b096:	ec06                	sd	ra,24(sp)
    8000b098:	e822                	sd	s0,16(sp)
    8000b09a:	e426                	sd	s1,8(sp)
    TEST_START();
    8000b09c:	6c70f0ef          	jal	8001af62 <printf>
    8000b0a0:	4529                	li	a0,10
    8000b0a2:	5930e0ef          	jal	80019e34 <putchar>


    goto_priv(PRIV_HS);
    8000b0a6:	450d                	li	a0,3
    8000b0a8:	a37f50ef          	jal	80000ade <goto_priv>
    hspt_init();
    8000b0ac:	d34f50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000b0b0:	f76f50ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    8000b0b4:	4509                	li	a0,2
    8000b0b6:	a29f50ef          	jal	80000ade <goto_priv>
    vspt_init(); 
    8000b0ba:	dfaf50ef          	jal	800006b4 <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    //V=0，HS模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000b0be:	4511                	li	a0,4
    8000b0c0:	a1ff50ef          	jal	80000ade <goto_priv>
    CSRC(medeleg, 1 << CAUSE_LPF);         
    8000b0c4:	6789                	lui	a5,0x2
    8000b0c6:	3027b073          	csrc	medeleg,a5
    goto_priv(PRIV_HS);     
    8000b0ca:	450d                	li	a0,3
    8000b0cc:	a13f50ef          	jal	80000ade <goto_priv>
    vaddr_f = hs_page_base(VSI_GI);      
    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000b0d0:	0ff0000f          	fence
    8000b0d4:	4785                	li	a5,1
    8000b0d6:	00032417          	auipc	s0,0x32
    8000b0da:	f3a40413          	add	s0,s0,-198 # 8003d010 <excpt>
    8000b0de:	00f41023          	sh	a5,0(s0)
    8000b0e2:	00032797          	auipc	a5,0x32
    8000b0e6:	f607b323          	sd	zero,-154(a5) # 8003d048 <excpt+0x38>
    8000b0ea:	0ff0000f          	fence
    8000b0ee:	400197b7          	lui	a5,0x40019
    8000b0f2:	078a                	sll	a5,a5,0x2
    8000b0f4:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000b0f8:	08200593          	li	a1,130
    8000b0fc:	00014617          	auipc	a2,0x14
    8000b100:	b4c60613          	add	a2,a2,-1204 # 8001ec48 <__func__.1+0x2450>
    8000b104:	00012517          	auipc	a0,0x12
    8000b108:	9f450513          	add	a0,a0,-1548 # 8001caf8 <__func__.1+0x300>
    8000b10c:	6570f0ef          	jal	8001af62 <printf>
    8000b110:	00144783          	lbu	a5,1(s0)
    8000b114:	00012597          	auipc	a1,0x12
    8000b118:	9bc58593          	add	a1,a1,-1604 # 8001cad0 <__func__.1+0x2d8>
    8000b11c:	c789                	beqz	a5,8000b126 <priv_change_4+0xa2>
    8000b11e:	6418                	ld	a4,8(s0)
    8000b120:	47b5                	li	a5,13
    8000b122:	08f70763          	beq	a4,a5,8000b1b0 <priv_change_4+0x12c>
    8000b126:	00012517          	auipc	a0,0x12
    8000b12a:	9ea50513          	add	a0,a0,-1558 # 8001cb10 <__func__.1+0x318>
    8000b12e:	6350f0ef          	jal	8001af62 <printf>
    8000b132:	00144783          	lbu	a5,1(s0)
    8000b136:	c789                	beqz	a5,8000b140 <priv_change_4+0xbc>
    8000b138:	6418                	ld	a4,8(s0)
    8000b13a:	47b5                	li	a5,13
    8000b13c:	04f70c63          	beq	a4,a5,8000b194 <priv_change_4+0x110>
    8000b140:	00012517          	auipc	a0,0x12
    8000b144:	9d850513          	add	a0,a0,-1576 # 8001cb18 <__func__.1+0x320>
    8000b148:	61b0f0ef          	jal	8001af62 <printf>
    8000b14c:	02900513          	li	a0,41
    8000b150:	4e50e0ef          	jal	80019e34 <putchar>
    8000b154:	4529                	li	a0,10
    8000b156:	4df0e0ef          	jal	80019e34 <putchar>
    8000b15a:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        excpt.priv==PRIV_M
    );  
    
    TEST_END();
    8000b15e:	00012597          	auipc	a1,0x12
    8000b162:	97258593          	add	a1,a1,-1678 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000b166:	c491                	beqz	s1,8000b172 <priv_change_4+0xee>
    8000b168:	6418                	ld	a4,8(s0)
    8000b16a:	47b5                	li	a5,13
    8000b16c:	02f70963          	beq	a4,a5,8000b19e <priv_change_4+0x11a>
    8000b170:	4481                	li	s1,0
    TEST_END();
    8000b172:	00012517          	auipc	a0,0x12
    8000b176:	a0650513          	add	a0,a0,-1530 # 8001cb78 <__func__.1+0x380>
    8000b17a:	5e90f0ef          	jal	8001af62 <printf>
    8000b17e:	4511                	li	a0,4
    8000b180:	95ff50ef          	jal	80000ade <goto_priv>
    8000b184:	9a2f60ef          	jal	80001326 <reset_state>
}
    8000b188:	60e2                	ld	ra,24(sp)
    8000b18a:	6442                	ld	s0,16(sp)
    8000b18c:	8526                	mv	a0,s1
    8000b18e:	64a2                	ld	s1,8(sp)
    8000b190:	6105                	add	sp,sp,32
    8000b192:	8082                	ret
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000b194:	4058                	lw	a4,4(s0)
    8000b196:	4791                	li	a5,4
    8000b198:	faf714e3          	bne	a4,a5,8000b140 <priv_change_4+0xbc>
    8000b19c:	bf65                	j	8000b154 <priv_change_4+0xd0>
    8000b19e:	4058                	lw	a4,4(s0)
    8000b1a0:	4791                	li	a5,4
    8000b1a2:	fcf717e3          	bne	a4,a5,8000b170 <priv_change_4+0xec>
    TEST_END();
    8000b1a6:	00012597          	auipc	a1,0x12
    8000b1aa:	91a58593          	add	a1,a1,-1766 # 8001cac0 <__func__.1+0x2c8>
    8000b1ae:	b7d1                	j	8000b172 <priv_change_4+0xee>
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000b1b0:	4058                	lw	a4,4(s0)
    8000b1b2:	4791                	li	a5,4
    8000b1b4:	f6f719e3          	bne	a4,a5,8000b126 <priv_change_4+0xa2>
    8000b1b8:	00012597          	auipc	a1,0x12
    8000b1bc:	90858593          	add	a1,a1,-1784 # 8001cac0 <__func__.1+0x2c8>
    8000b1c0:	b79d                	j	8000b126 <priv_change_4+0xa2>

000000008000b1c2 <priv_change_5>:

bool priv_change_5(){
    8000b1c2:	1101                	add	sp,sp,-32
    
    TEST_START();
    8000b1c4:	00011597          	auipc	a1,0x11
    8000b1c8:	86c58593          	add	a1,a1,-1940 # 8001ba30 <__func__.10>
    8000b1cc:	00012517          	auipc	a0,0x12
    8000b1d0:	91450513          	add	a0,a0,-1772 # 8001cae0 <__func__.1+0x2e8>
bool priv_change_5(){
    8000b1d4:	ec06                	sd	ra,24(sp)
    8000b1d6:	e822                	sd	s0,16(sp)
    8000b1d8:	e426                	sd	s1,8(sp)
    TEST_START();
    8000b1da:	5890f0ef          	jal	8001af62 <printf>
    8000b1de:	4529                	li	a0,10
    8000b1e0:	4550e0ef          	jal	80019e34 <putchar>


    //V=0，M模式下发生异常，M态处理异常
    goto_priv(PRIV_M);
    8000b1e4:	4511                	li	a0,4
    8000b1e6:	8f9f50ef          	jal	80000ade <goto_priv>
    reset_state();
    8000b1ea:	93cf60ef          	jal	80001326 <reset_state>
    CSRW(medeleg, 0); 
    8000b1ee:	30205073          	csrw	medeleg,0

    TEST_SETUP_EXCEPT();       
    8000b1f2:	0ff0000f          	fence
    8000b1f6:	00032497          	auipc	s1,0x32
    8000b1fa:	e1a48493          	add	s1,s1,-486 # 8003d010 <excpt>
    8000b1fe:	4405                	li	s0,1
    8000b200:	00849023          	sh	s0,0(s1)
    8000b204:	00032797          	auipc	a5,0x32
    8000b208:	e407b223          	sd	zero,-444(a5) # 8003d048 <excpt+0x38>
    8000b20c:	0ff0000f          	fence
    ecall(); 
    8000b210:	fdef50ef          	jal	800009ee <ecall>
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000b214:	08200593          	li	a1,130
    8000b218:	00014617          	auipc	a2,0x14
    8000b21c:	a7060613          	add	a2,a2,-1424 # 8001ec88 <__func__.1+0x2490>
    8000b220:	00012517          	auipc	a0,0x12
    8000b224:	8d850513          	add	a0,a0,-1832 # 8001caf8 <__func__.1+0x300>
    8000b228:	53b0f0ef          	jal	8001af62 <printf>
    8000b22c:	6098                	ld	a4,0(s1)
    8000b22e:	f00017b7          	lui	a5,0xf0001
    8000b232:	0792                	sll	a5,a5,0x4
    8000b234:	140a                	sll	s0,s0,0x22
    8000b236:	f0078793          	add	a5,a5,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000b23a:	8ff9                	and	a5,a5,a4
    8000b23c:	10040413          	add	s0,s0,256
    8000b240:	00012597          	auipc	a1,0x12
    8000b244:	88058593          	add	a1,a1,-1920 # 8001cac0 <__func__.1+0x2c8>
    8000b248:	00878663          	beq	a5,s0,8000b254 <priv_change_5+0x92>
    8000b24c:	00012597          	auipc	a1,0x12
    8000b250:	88458593          	add	a1,a1,-1916 # 8001cad0 <__func__.1+0x2d8>
    8000b254:	00012517          	auipc	a0,0x12
    8000b258:	8bc50513          	add	a0,a0,-1860 # 8001cb10 <__func__.1+0x318>
    8000b25c:	5070f0ef          	jal	8001af62 <printf>
    8000b260:	0014c783          	lbu	a5,1(s1)
    8000b264:	c789                	beqz	a5,8000b26e <priv_change_5+0xac>
    8000b266:	40d8                	lw	a4,4(s1)
    8000b268:	4791                	li	a5,4
    8000b26a:	00f70c63          	beq	a4,a5,8000b282 <priv_change_5+0xc0>
    8000b26e:	00012517          	auipc	a0,0x12
    8000b272:	8aa50513          	add	a0,a0,-1878 # 8001cb18 <__func__.1+0x320>
    8000b276:	4ed0f0ef          	jal	8001af62 <printf>
    8000b27a:	02900513          	li	a0,41
    8000b27e:	3b70e0ef          	jal	80019e34 <putchar>
    8000b282:	4529                	li	a0,10
    8000b284:	3b10e0ef          	jal	80019e34 <putchar>
    8000b288:	6094                	ld	a3,0(s1)
    8000b28a:	f0001737          	lui	a4,0xf0001
    8000b28e:	4785                	li	a5,1
    8000b290:	0712                	sll	a4,a4,0x4
    8000b292:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000b296:	178a                	sll	a5,a5,0x22
    8000b298:	8f75                	and	a4,a4,a3
    8000b29a:	10078793          	add	a5,a5,256
    8000b29e:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    ); 

    TEST_END();
    8000b2a0:	00012597          	auipc	a1,0x12
    8000b2a4:	83058593          	add	a1,a1,-2000 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000b2a8:	00f71763          	bne	a4,a5,8000b2b6 <priv_change_5+0xf4>
    8000b2ac:	4405                	li	s0,1
    TEST_END();
    8000b2ae:	00012597          	auipc	a1,0x12
    8000b2b2:	81258593          	add	a1,a1,-2030 # 8001cac0 <__func__.1+0x2c8>
    8000b2b6:	00012517          	auipc	a0,0x12
    8000b2ba:	8c250513          	add	a0,a0,-1854 # 8001cb78 <__func__.1+0x380>
    8000b2be:	4a50f0ef          	jal	8001af62 <printf>
    8000b2c2:	4511                	li	a0,4
    8000b2c4:	81bf50ef          	jal	80000ade <goto_priv>
    8000b2c8:	85ef60ef          	jal	80001326 <reset_state>
}
    8000b2cc:	60e2                	ld	ra,24(sp)
    8000b2ce:	8522                	mv	a0,s0
    8000b2d0:	6442                	ld	s0,16(sp)
    8000b2d2:	64a2                	ld	s1,8(sp)
    8000b2d4:	6105                	add	sp,sp,32
    8000b2d6:	8082                	ret

000000008000b2d8 <priv_change_6>:

bool priv_change_6(){
    8000b2d8:	1101                	add	sp,sp,-32
    
    TEST_START();
    8000b2da:	00010597          	auipc	a1,0x10
    8000b2de:	76658593          	add	a1,a1,1894 # 8001ba40 <__func__.9>
    8000b2e2:	00011517          	auipc	a0,0x11
    8000b2e6:	7fe50513          	add	a0,a0,2046 # 8001cae0 <__func__.1+0x2e8>
bool priv_change_6(){
    8000b2ea:	ec06                	sd	ra,24(sp)
    8000b2ec:	e822                	sd	s0,16(sp)
    8000b2ee:	e426                	sd	s1,8(sp)
    TEST_START();
    8000b2f0:	4730f0ef          	jal	8001af62 <printf>
    8000b2f4:	4529                	li	a0,10
    8000b2f6:	33f0e0ef          	jal	80019e34 <putchar>


    //V=0，U模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000b2fa:	4511                	li	a0,4
    8000b2fc:	fe2f50ef          	jal	80000ade <goto_priv>
    CSRW(medeleg,0);         
    8000b300:	30205073          	csrw	medeleg,0

    goto_priv(PRIV_HU); 
    8000b304:	4505                	li	a0,1
    8000b306:	fd8f50ef          	jal	80000ade <goto_priv>
    
    TEST_SETUP_EXCEPT();      
    8000b30a:	0ff0000f          	fence
    8000b30e:	00032497          	auipc	s1,0x32
    8000b312:	d0248493          	add	s1,s1,-766 # 8003d010 <excpt>
    8000b316:	4405                	li	s0,1
    8000b318:	00849023          	sh	s0,0(s1)
    8000b31c:	00032797          	auipc	a5,0x32
    8000b320:	d207b623          	sd	zero,-724(a5) # 8003d048 <excpt+0x38>
    8000b324:	0ff0000f          	fence
    CSRR(CSR_MSTATUS);
    8000b328:	300027f3          	csrr	a5,mstatus
    TEST_ASSERT("hu trigger except that priv change to m mode when medeleg=0",         
    8000b32c:	08200593          	li	a1,130
    8000b330:	00014617          	auipc	a2,0x14
    8000b334:	99060613          	add	a2,a2,-1648 # 8001ecc0 <__func__.1+0x24c8>
    8000b338:	00011517          	auipc	a0,0x11
    8000b33c:	7c050513          	add	a0,a0,1984 # 8001caf8 <__func__.1+0x300>
    8000b340:	4230f0ef          	jal	8001af62 <printf>
    8000b344:	6098                	ld	a4,0(s1)
    8000b346:	f00017b7          	lui	a5,0xf0001
    8000b34a:	0792                	sll	a5,a5,0x4
    8000b34c:	140a                	sll	s0,s0,0x22
    8000b34e:	f0078793          	add	a5,a5,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000b352:	8ff9                	and	a5,a5,a4
    8000b354:	10040413          	add	s0,s0,256
    8000b358:	00011597          	auipc	a1,0x11
    8000b35c:	76858593          	add	a1,a1,1896 # 8001cac0 <__func__.1+0x2c8>
    8000b360:	00878663          	beq	a5,s0,8000b36c <priv_change_6+0x94>
    8000b364:	00011597          	auipc	a1,0x11
    8000b368:	76c58593          	add	a1,a1,1900 # 8001cad0 <__func__.1+0x2d8>
    8000b36c:	00011517          	auipc	a0,0x11
    8000b370:	7a450513          	add	a0,a0,1956 # 8001cb10 <__func__.1+0x318>
    8000b374:	3ef0f0ef          	jal	8001af62 <printf>
    8000b378:	0014c783          	lbu	a5,1(s1)
    8000b37c:	c789                	beqz	a5,8000b386 <priv_change_6+0xae>
    8000b37e:	40d8                	lw	a4,4(s1)
    8000b380:	4791                	li	a5,4
    8000b382:	00f70c63          	beq	a4,a5,8000b39a <priv_change_6+0xc2>
    8000b386:	00011517          	auipc	a0,0x11
    8000b38a:	79250513          	add	a0,a0,1938 # 8001cb18 <__func__.1+0x320>
    8000b38e:	3d50f0ef          	jal	8001af62 <printf>
    8000b392:	02900513          	li	a0,41
    8000b396:	29f0e0ef          	jal	80019e34 <putchar>
    8000b39a:	4529                	li	a0,10
    8000b39c:	2990e0ef          	jal	80019e34 <putchar>
    8000b3a0:	6094                	ld	a3,0(s1)
    8000b3a2:	f0001737          	lui	a4,0xf0001
    8000b3a6:	4785                	li	a5,1
    8000b3a8:	0712                	sll	a4,a4,0x4
    8000b3aa:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000b3ae:	178a                	sll	a5,a5,0x22
    8000b3b0:	8f75                	and	a4,a4,a3
    8000b3b2:	10078793          	add	a5,a5,256
    8000b3b6:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    );

    TEST_END();
    8000b3b8:	00011597          	auipc	a1,0x11
    8000b3bc:	71858593          	add	a1,a1,1816 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hu trigger except that priv change to m mode when medeleg=0",         
    8000b3c0:	00f71763          	bne	a4,a5,8000b3ce <priv_change_6+0xf6>
    8000b3c4:	4405                	li	s0,1
    TEST_END();
    8000b3c6:	00011597          	auipc	a1,0x11
    8000b3ca:	6fa58593          	add	a1,a1,1786 # 8001cac0 <__func__.1+0x2c8>
    8000b3ce:	00011517          	auipc	a0,0x11
    8000b3d2:	7aa50513          	add	a0,a0,1962 # 8001cb78 <__func__.1+0x380>
    8000b3d6:	38d0f0ef          	jal	8001af62 <printf>
    8000b3da:	4511                	li	a0,4
    8000b3dc:	f02f50ef          	jal	80000ade <goto_priv>
    8000b3e0:	f47f50ef          	jal	80001326 <reset_state>
}
    8000b3e4:	60e2                	ld	ra,24(sp)
    8000b3e6:	8522                	mv	a0,s0
    8000b3e8:	6442                	ld	s0,16(sp)
    8000b3ea:	64a2                	ld	s1,8(sp)
    8000b3ec:	6105                	add	sp,sp,32
    8000b3ee:	8082                	ret

000000008000b3f0 <priv_change_7>:

bool priv_change_7(){
    8000b3f0:	1101                	add	sp,sp,-32
    
    TEST_START();
    8000b3f2:	00010597          	auipc	a1,0x10
    8000b3f6:	65e58593          	add	a1,a1,1630 # 8001ba50 <__func__.8>
    8000b3fa:	00011517          	auipc	a0,0x11
    8000b3fe:	6e650513          	add	a0,a0,1766 # 8001cae0 <__func__.1+0x2e8>
bool priv_change_7(){
    8000b402:	ec06                	sd	ra,24(sp)
    8000b404:	e822                	sd	s0,16(sp)
    8000b406:	e426                	sd	s1,8(sp)
    TEST_START();
    8000b408:	35b0f0ef          	jal	8001af62 <printf>
    8000b40c:	4529                	li	a0,10
    8000b40e:	2270e0ef          	jal	80019e34 <putchar>


    //V=1，VU模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000b412:	4511                	li	a0,4
    8000b414:	ecaf50ef          	jal	80000ade <goto_priv>
    CSRW(medeleg,0);      
    8000b418:	30205073          	csrw	medeleg,0

    goto_priv(PRIV_VU);     
    8000b41c:	4501                	li	a0,0
    8000b41e:	ec0f50ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();        
    8000b422:	0ff0000f          	fence
    8000b426:	00032497          	auipc	s1,0x32
    8000b42a:	bea48493          	add	s1,s1,-1046 # 8003d010 <excpt>
    8000b42e:	4405                	li	s0,1
    8000b430:	00849023          	sh	s0,0(s1)
    8000b434:	00032797          	auipc	a5,0x32
    8000b438:	c007ba23          	sd	zero,-1004(a5) # 8003d048 <excpt+0x38>
    8000b43c:	0ff0000f          	fence
    CSRR(CSR_MSTATUS);
    8000b440:	300027f3          	csrr	a5,mstatus

    TEST_ASSERT("vu trigger except that priv change to m mode when medeleg=0",         
    8000b444:	08200593          	li	a1,130
    8000b448:	00014617          	auipc	a2,0x14
    8000b44c:	8b860613          	add	a2,a2,-1864 # 8001ed00 <__func__.1+0x2508>
    8000b450:	00011517          	auipc	a0,0x11
    8000b454:	6a850513          	add	a0,a0,1704 # 8001caf8 <__func__.1+0x300>
    8000b458:	30b0f0ef          	jal	8001af62 <printf>
    8000b45c:	6098                	ld	a4,0(s1)
    8000b45e:	f00017b7          	lui	a5,0xf0001
    8000b462:	0792                	sll	a5,a5,0x4
    8000b464:	140a                	sll	s0,s0,0x22
    8000b466:	f0078793          	add	a5,a5,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000b46a:	8ff9                	and	a5,a5,a4
    8000b46c:	10040413          	add	s0,s0,256
    8000b470:	00011597          	auipc	a1,0x11
    8000b474:	65058593          	add	a1,a1,1616 # 8001cac0 <__func__.1+0x2c8>
    8000b478:	00878663          	beq	a5,s0,8000b484 <priv_change_7+0x94>
    8000b47c:	00011597          	auipc	a1,0x11
    8000b480:	65458593          	add	a1,a1,1620 # 8001cad0 <__func__.1+0x2d8>
    8000b484:	00011517          	auipc	a0,0x11
    8000b488:	68c50513          	add	a0,a0,1676 # 8001cb10 <__func__.1+0x318>
    8000b48c:	2d70f0ef          	jal	8001af62 <printf>
    8000b490:	0014c783          	lbu	a5,1(s1)
    8000b494:	c789                	beqz	a5,8000b49e <priv_change_7+0xae>
    8000b496:	40d8                	lw	a4,4(s1)
    8000b498:	4791                	li	a5,4
    8000b49a:	00f70c63          	beq	a4,a5,8000b4b2 <priv_change_7+0xc2>
    8000b49e:	00011517          	auipc	a0,0x11
    8000b4a2:	67a50513          	add	a0,a0,1658 # 8001cb18 <__func__.1+0x320>
    8000b4a6:	2bd0f0ef          	jal	8001af62 <printf>
    8000b4aa:	02900513          	li	a0,41
    8000b4ae:	1870e0ef          	jal	80019e34 <putchar>
    8000b4b2:	4529                	li	a0,10
    8000b4b4:	1810e0ef          	jal	80019e34 <putchar>
    8000b4b8:	6094                	ld	a3,0(s1)
    8000b4ba:	f0001737          	lui	a4,0xf0001
    8000b4be:	4785                	li	a5,1
    8000b4c0:	0712                	sll	a4,a4,0x4
    8000b4c2:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000b4c6:	178a                	sll	a5,a5,0x22
    8000b4c8:	8f75                	and	a4,a4,a3
    8000b4ca:	10078793          	add	a5,a5,256
    8000b4ce:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    );   


    TEST_END();
    8000b4d0:	00011597          	auipc	a1,0x11
    8000b4d4:	60058593          	add	a1,a1,1536 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vu trigger except that priv change to m mode when medeleg=0",         
    8000b4d8:	00f71763          	bne	a4,a5,8000b4e6 <priv_change_7+0xf6>
    8000b4dc:	4405                	li	s0,1
    TEST_END();
    8000b4de:	00011597          	auipc	a1,0x11
    8000b4e2:	5e258593          	add	a1,a1,1506 # 8001cac0 <__func__.1+0x2c8>
    8000b4e6:	00011517          	auipc	a0,0x11
    8000b4ea:	69250513          	add	a0,a0,1682 # 8001cb78 <__func__.1+0x380>
    8000b4ee:	2750f0ef          	jal	8001af62 <printf>
    8000b4f2:	4511                	li	a0,4
    8000b4f4:	deaf50ef          	jal	80000ade <goto_priv>
    8000b4f8:	e2ff50ef          	jal	80001326 <reset_state>
}
    8000b4fc:	60e2                	ld	ra,24(sp)
    8000b4fe:	8522                	mv	a0,s0
    8000b500:	6442                	ld	s0,16(sp)
    8000b502:	64a2                	ld	s1,8(sp)
    8000b504:	6105                	add	sp,sp,32
    8000b506:	8082                	ret

000000008000b508 <priv_change_8>:

bool priv_change_8(){
    8000b508:	1101                	add	sp,sp,-32
    
    TEST_START();
    8000b50a:	00010597          	auipc	a1,0x10
    8000b50e:	55658593          	add	a1,a1,1366 # 8001ba60 <__func__.7>
    8000b512:	00011517          	auipc	a0,0x11
    8000b516:	5ce50513          	add	a0,a0,1486 # 8001cae0 <__func__.1+0x2e8>
bool priv_change_8(){
    8000b51a:	ec06                	sd	ra,24(sp)
    8000b51c:	e822                	sd	s0,16(sp)
    8000b51e:	e426                	sd	s1,8(sp)
    TEST_START();
    8000b520:	2430f0ef          	jal	8001af62 <printf>
    8000b524:	4529                	li	a0,10
    8000b526:	10f0e0ef          	jal	80019e34 <putchar>


    //V=1，VU模式下发生异常，关闭代理，切换到M态处理异常，异常结束执行mret恢复到VU态
    goto_priv(PRIV_M);
    8000b52a:	4511                	li	a0,4
    8000b52c:	db2f50ef          	jal	80000ade <goto_priv>
    reset_state();
    8000b530:	df7f50ef          	jal	80001326 <reset_state>
    CSRW(medeleg,0);
    8000b534:	30205073          	csrw	medeleg,0
    CSRW(mideleg,0);     
    8000b538:	30305073          	csrw	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000b53c:	60305073          	csrw	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000b540:	60205073          	csrw	hedeleg,0

    goto_priv(PRIV_VU);     
    8000b544:	4501                	li	a0,0
    8000b546:	d98f50ef          	jal	80000ade <goto_priv>
    
    TEST_SETUP_EXCEPT();        
    8000b54a:	0ff0000f          	fence
    8000b54e:	00032497          	auipc	s1,0x32
    8000b552:	ac248493          	add	s1,s1,-1342 # 8003d010 <excpt>
    8000b556:	4405                	li	s0,1
    8000b558:	00849023          	sh	s0,0(s1)
    8000b55c:	00032797          	auipc	a5,0x32
    8000b560:	ae07b623          	sd	zero,-1300(a5) # 8003d048 <excpt+0x38>
    8000b564:	0ff0000f          	fence
    CSRW(medeleg, 0); 
    8000b568:	30205073          	csrw	medeleg,0
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000b56c:	08200593          	li	a1,130
    8000b570:	00013617          	auipc	a2,0x13
    8000b574:	7d060613          	add	a2,a2,2000 # 8001ed40 <__func__.1+0x2548>
    8000b578:	00011517          	auipc	a0,0x11
    8000b57c:	58050513          	add	a0,a0,1408 # 8001caf8 <__func__.1+0x300>
    8000b580:	1e30f0ef          	jal	8001af62 <printf>
    8000b584:	6098                	ld	a4,0(s1)
    8000b586:	f00017b7          	lui	a5,0xf0001
    8000b58a:	0792                	sll	a5,a5,0x4
    8000b58c:	140a                	sll	s0,s0,0x22
    8000b58e:	f0078793          	add	a5,a5,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000b592:	8ff9                	and	a5,a5,a4
    8000b594:	10040413          	add	s0,s0,256
    8000b598:	00011597          	auipc	a1,0x11
    8000b59c:	53858593          	add	a1,a1,1336 # 8001cad0 <__func__.1+0x2d8>
    8000b5a0:	08878563          	beq	a5,s0,8000b62a <priv_change_8+0x122>
    8000b5a4:	00011517          	auipc	a0,0x11
    8000b5a8:	56c50513          	add	a0,a0,1388 # 8001cb10 <__func__.1+0x318>
    8000b5ac:	1b70f0ef          	jal	8001af62 <printf>
    8000b5b0:	0014c783          	lbu	a5,1(s1)
    8000b5b4:	c789                	beqz	a5,8000b5be <priv_change_8+0xb6>
    8000b5b6:	40d8                	lw	a4,4(s1)
    8000b5b8:	4791                	li	a5,4
    8000b5ba:	06f70263          	beq	a4,a5,8000b61e <priv_change_8+0x116>
    8000b5be:	00011517          	auipc	a0,0x11
    8000b5c2:	55a50513          	add	a0,a0,1370 # 8001cb18 <__func__.1+0x320>
    8000b5c6:	19d0f0ef          	jal	8001af62 <printf>
    8000b5ca:	02900513          	li	a0,41
    8000b5ce:	0670e0ef          	jal	80019e34 <putchar>
    8000b5d2:	4529                	li	a0,10
    8000b5d4:	0610e0ef          	jal	80019e34 <putchar>
    8000b5d8:	6094                	ld	a3,0(s1)
    8000b5da:	f0001737          	lui	a4,0xf0001
    8000b5de:	4785                	li	a5,1
    8000b5e0:	0712                	sll	a4,a4,0x4
    8000b5e2:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000b5e6:	178a                	sll	a5,a5,0x22
    8000b5e8:	8f75                	and	a4,a4,a3
    8000b5ea:	10078793          	add	a5,a5,256
    8000b5ee:	4401                	li	s0,0
        curr_priv == PRIV_VU
    );



    TEST_END();
    8000b5f0:	00011597          	auipc	a1,0x11
    8000b5f4:	4e058593          	add	a1,a1,1248 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000b5f8:	04f70363          	beq	a4,a5,8000b63e <priv_change_8+0x136>
    TEST_END();
    8000b5fc:	00011517          	auipc	a0,0x11
    8000b600:	57c50513          	add	a0,a0,1404 # 8001cb78 <__func__.1+0x380>
    8000b604:	15f0f0ef          	jal	8001af62 <printf>
    8000b608:	4511                	li	a0,4
    8000b60a:	cd4f50ef          	jal	80000ade <goto_priv>
    8000b60e:	d19f50ef          	jal	80001326 <reset_state>
}
    8000b612:	60e2                	ld	ra,24(sp)
    8000b614:	8522                	mv	a0,s0
    8000b616:	6442                	ld	s0,16(sp)
    8000b618:	64a2                	ld	s1,8(sp)
    8000b61a:	6105                	add	sp,sp,32
    8000b61c:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000b61e:	0001a797          	auipc	a5,0x1a
    8000b622:	a767a783          	lw	a5,-1418(a5) # 80025094 <curr_priv>
    8000b626:	d7d5                	beqz	a5,8000b5d2 <priv_change_8+0xca>
    8000b628:	bf59                	j	8000b5be <priv_change_8+0xb6>
    8000b62a:	0001a797          	auipc	a5,0x1a
    8000b62e:	a6a7a783          	lw	a5,-1430(a5) # 80025094 <curr_priv>
    8000b632:	fbad                	bnez	a5,8000b5a4 <priv_change_8+0x9c>
    8000b634:	00011597          	auipc	a1,0x11
    8000b638:	48c58593          	add	a1,a1,1164 # 8001cac0 <__func__.1+0x2c8>
    8000b63c:	b7a5                	j	8000b5a4 <priv_change_8+0x9c>
    8000b63e:	0001a797          	auipc	a5,0x1a
    8000b642:	a567a783          	lw	a5,-1450(a5) # 80025094 <curr_priv>
    8000b646:	fbdd                	bnez	a5,8000b5fc <priv_change_8+0xf4>
    8000b648:	4405                	li	s0,1
    TEST_END();
    8000b64a:	00011597          	auipc	a1,0x11
    8000b64e:	47658593          	add	a1,a1,1142 # 8001cac0 <__func__.1+0x2c8>
    8000b652:	b76d                	j	8000b5fc <priv_change_8+0xf4>

000000008000b654 <priv_change_9>:



bool priv_change_9(){
    8000b654:	1101                	add	sp,sp,-32
    TEST_START();
    8000b656:	00010597          	auipc	a1,0x10
    8000b65a:	41a58593          	add	a1,a1,1050 # 8001ba70 <__func__.6>
    8000b65e:	00011517          	auipc	a0,0x11
    8000b662:	48250513          	add	a0,a0,1154 # 8001cae0 <__func__.1+0x2e8>
bool priv_change_9(){
    8000b666:	ec06                	sd	ra,24(sp)
    8000b668:	e822                	sd	s0,16(sp)
    8000b66a:	e426                	sd	s1,8(sp)
    TEST_START();
    8000b66c:	0f70f0ef          	jal	8001af62 <printf>
    8000b670:	4529                	li	a0,10
    8000b672:	7c20e0ef          	jal	80019e34 <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，打开代理hedeleg/hideleg，切换到VS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000b676:	4511                	li	a0,4
    8000b678:	c66f50ef          	jal	80000ade <goto_priv>
    CSRW(medeleg,(uint64_t)-1);
    8000b67c:	57fd                	li	a5,-1
    8000b67e:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000b682:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000b686:	60305073          	csrw	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000b68a:	60205073          	csrw	hedeleg,0

    goto_priv(PRIV_VU);     
    8000b68e:	4501                	li	a0,0
    8000b690:	c4ef50ef          	jal	80000ade <goto_priv>
    

    TEST_SETUP_EXCEPT();        
    8000b694:	0ff0000f          	fence
    8000b698:	00032497          	auipc	s1,0x32
    8000b69c:	97848493          	add	s1,s1,-1672 # 8003d010 <excpt>
    8000b6a0:	4405                	li	s0,1
    8000b6a2:	00849023          	sh	s0,0(s1)
    8000b6a6:	00032797          	auipc	a5,0x32
    8000b6aa:	9a07b123          	sd	zero,-1630(a5) # 8003d048 <excpt+0x38>
    8000b6ae:	0ff0000f          	fence
    CSRR(CSR_MSTATUS);
    8000b6b2:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000b6b6:	08200593          	li	a1,130
    8000b6ba:	00013617          	auipc	a2,0x13
    8000b6be:	6f660613          	add	a2,a2,1782 # 8001edb0 <__func__.1+0x25b8>
    8000b6c2:	00011517          	auipc	a0,0x11
    8000b6c6:	43650513          	add	a0,a0,1078 # 8001caf8 <__func__.1+0x300>
    8000b6ca:	0990f0ef          	jal	8001af62 <printf>
    8000b6ce:	6098                	ld	a4,0(s1)
    8000b6d0:	f00017b7          	lui	a5,0xf0001
    8000b6d4:	0792                	sll	a5,a5,0x4
    8000b6d6:	1406                	sll	s0,s0,0x21
    8000b6d8:	f0078793          	add	a5,a5,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000b6dc:	8ff9                	and	a5,a5,a4
    8000b6de:	10040413          	add	s0,s0,256
    8000b6e2:	00011597          	auipc	a1,0x11
    8000b6e6:	3ee58593          	add	a1,a1,1006 # 8001cad0 <__func__.1+0x2d8>
    8000b6ea:	08878563          	beq	a5,s0,8000b774 <priv_change_9+0x120>
    8000b6ee:	00011517          	auipc	a0,0x11
    8000b6f2:	42250513          	add	a0,a0,1058 # 8001cb10 <__func__.1+0x318>
    8000b6f6:	06d0f0ef          	jal	8001af62 <printf>
    8000b6fa:	0014c783          	lbu	a5,1(s1)
    8000b6fe:	c789                	beqz	a5,8000b708 <priv_change_9+0xb4>
    8000b700:	40d8                	lw	a4,4(s1)
    8000b702:	4789                	li	a5,2
    8000b704:	06f70263          	beq	a4,a5,8000b768 <priv_change_9+0x114>
    8000b708:	00011517          	auipc	a0,0x11
    8000b70c:	41050513          	add	a0,a0,1040 # 8001cb18 <__func__.1+0x320>
    8000b710:	0530f0ef          	jal	8001af62 <printf>
    8000b714:	02900513          	li	a0,41
    8000b718:	71c0e0ef          	jal	80019e34 <putchar>
    8000b71c:	4529                	li	a0,10
    8000b71e:	7160e0ef          	jal	80019e34 <putchar>
    8000b722:	6094                	ld	a3,0(s1)
    8000b724:	f0001737          	lui	a4,0xf0001
    8000b728:	4785                	li	a5,1
    8000b72a:	0712                	sll	a4,a4,0x4
    8000b72c:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000b730:	1786                	sll	a5,a5,0x21
    8000b732:	8f75                	and	a4,a4,a3
    8000b734:	10078793          	add	a5,a5,256
    8000b738:	4401                	li	s0,0
        excpt.priv == PRIV_VS &&
        curr_priv == PRIV_VU
    );


    TEST_END();
    8000b73a:	00011597          	auipc	a1,0x11
    8000b73e:	39658593          	add	a1,a1,918 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000b742:	04f70363          	beq	a4,a5,8000b788 <priv_change_9+0x134>
    TEST_END();
    8000b746:	00011517          	auipc	a0,0x11
    8000b74a:	43250513          	add	a0,a0,1074 # 8001cb78 <__func__.1+0x380>
    8000b74e:	0150f0ef          	jal	8001af62 <printf>
    8000b752:	4511                	li	a0,4
    8000b754:	b8af50ef          	jal	80000ade <goto_priv>
    8000b758:	bcff50ef          	jal	80001326 <reset_state>
}
    8000b75c:	60e2                	ld	ra,24(sp)
    8000b75e:	8522                	mv	a0,s0
    8000b760:	6442                	ld	s0,16(sp)
    8000b762:	64a2                	ld	s1,8(sp)
    8000b764:	6105                	add	sp,sp,32
    8000b766:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000b768:	0001a797          	auipc	a5,0x1a
    8000b76c:	92c7a783          	lw	a5,-1748(a5) # 80025094 <curr_priv>
    8000b770:	d7d5                	beqz	a5,8000b71c <priv_change_9+0xc8>
    8000b772:	bf59                	j	8000b708 <priv_change_9+0xb4>
    8000b774:	0001a797          	auipc	a5,0x1a
    8000b778:	9207a783          	lw	a5,-1760(a5) # 80025094 <curr_priv>
    8000b77c:	fbad                	bnez	a5,8000b6ee <priv_change_9+0x9a>
    8000b77e:	00011597          	auipc	a1,0x11
    8000b782:	34258593          	add	a1,a1,834 # 8001cac0 <__func__.1+0x2c8>
    8000b786:	b7a5                	j	8000b6ee <priv_change_9+0x9a>
    8000b788:	0001a797          	auipc	a5,0x1a
    8000b78c:	90c7a783          	lw	a5,-1780(a5) # 80025094 <curr_priv>
    8000b790:	fbdd                	bnez	a5,8000b746 <priv_change_9+0xf2>
    8000b792:	4405                	li	s0,1
    TEST_END();
    8000b794:	00011597          	auipc	a1,0x11
    8000b798:	32c58593          	add	a1,a1,812 # 8001cac0 <__func__.1+0x2c8>
    8000b79c:	b76d                	j	8000b746 <priv_change_9+0xf2>

000000008000b79e <priv_change_10>:


bool priv_change_10(){
    8000b79e:	1101                	add	sp,sp,-32
    TEST_START();
    8000b7a0:	00010597          	auipc	a1,0x10
    8000b7a4:	2e058593          	add	a1,a1,736 # 8001ba80 <__func__.5>
    8000b7a8:	00011517          	auipc	a0,0x11
    8000b7ac:	33850513          	add	a0,a0,824 # 8001cae0 <__func__.1+0x2e8>
bool priv_change_10(){
    8000b7b0:	ec06                	sd	ra,24(sp)
    8000b7b2:	e822                	sd	s0,16(sp)
    8000b7b4:	e426                	sd	s1,8(sp)
    TEST_START();
    8000b7b6:	7ac0f0ef          	jal	8001af62 <printf>
    8000b7ba:	4529                	li	a0,10
    8000b7bc:	6780e0ef          	jal	80019e34 <putchar>


    //V=0，U模式下发生异常，打开代理medeleg/mideleg，切换到HS态处理异常，异常处理结束执行sret恢复到U态
    goto_priv(PRIV_M);
    8000b7c0:	4511                	li	a0,4
    8000b7c2:	b1cf50ef          	jal	80000ade <goto_priv>
    reset_state();
    8000b7c6:	b61f50ef          	jal	80001326 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000b7ca:	57fd                	li	a5,-1
    8000b7cc:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000b7d0:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000b7d4:	60305073          	csrw	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000b7d8:	60205073          	csrw	hedeleg,0

    goto_priv(PRIV_HU);     
    8000b7dc:	4505                	li	a0,1
    8000b7de:	b00f50ef          	jal	80000ade <goto_priv>
    
    TEST_SETUP_EXCEPT();        
    8000b7e2:	0ff0000f          	fence
    8000b7e6:	00032417          	auipc	s0,0x32
    8000b7ea:	82a40413          	add	s0,s0,-2006 # 8003d010 <excpt>
    8000b7ee:	4485                	li	s1,1
    8000b7f0:	00941023          	sh	s1,0(s0)
    8000b7f4:	00032797          	auipc	a5,0x32
    8000b7f8:	8407ba23          	sd	zero,-1964(a5) # 8003d048 <excpt+0x38>
    8000b7fc:	0ff0000f          	fence
    CSRR(CSR_MSTATUS);
    8000b800:	300027f3          	csrr	a5,mstatus

    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000b804:	08200593          	li	a1,130
    8000b808:	00013617          	auipc	a2,0x13
    8000b80c:	61860613          	add	a2,a2,1560 # 8001ee20 <__func__.1+0x2628>
    8000b810:	00011517          	auipc	a0,0x11
    8000b814:	2e850513          	add	a0,a0,744 # 8001caf8 <__func__.1+0x300>
    8000b818:	74a0f0ef          	jal	8001af62 <printf>
    8000b81c:	6014                	ld	a3,0(s0)
    8000b81e:	f0001737          	lui	a4,0xf0001
    8000b822:	478d                	li	a5,3
    8000b824:	0712                	sll	a4,a4,0x4
    8000b826:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000b82a:	1782                	sll	a5,a5,0x20
    8000b82c:	8f75                	and	a4,a4,a3
    8000b82e:	10078793          	add	a5,a5,256
    8000b832:	00011597          	auipc	a1,0x11
    8000b836:	29e58593          	add	a1,a1,670 # 8001cad0 <__func__.1+0x2d8>
    8000b83a:	08f70763          	beq	a4,a5,8000b8c8 <priv_change_10+0x12a>
    8000b83e:	00011517          	auipc	a0,0x11
    8000b842:	2d250513          	add	a0,a0,722 # 8001cb10 <__func__.1+0x318>
    8000b846:	71c0f0ef          	jal	8001af62 <printf>
    8000b84a:	00144783          	lbu	a5,1(s0)
    8000b84e:	c789                	beqz	a5,8000b858 <priv_change_10+0xba>
    8000b850:	4058                	lw	a4,4(s0)
    8000b852:	478d                	li	a5,3
    8000b854:	06f70263          	beq	a4,a5,8000b8b8 <priv_change_10+0x11a>
    8000b858:	00011517          	auipc	a0,0x11
    8000b85c:	2c050513          	add	a0,a0,704 # 8001cb18 <__func__.1+0x320>
    8000b860:	7020f0ef          	jal	8001af62 <printf>
    8000b864:	02900513          	li	a0,41
    8000b868:	5cc0e0ef          	jal	80019e34 <putchar>
    8000b86c:	4529                	li	a0,10
    8000b86e:	5c60e0ef          	jal	80019e34 <putchar>
    8000b872:	6014                	ld	a3,0(s0)
    8000b874:	f0001737          	lui	a4,0xf0001
    8000b878:	478d                	li	a5,3
    8000b87a:	0712                	sll	a4,a4,0x4
    8000b87c:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000b880:	1782                	sll	a5,a5,0x20
    8000b882:	8f75                	and	a4,a4,a3
    8000b884:	10078793          	add	a5,a5,256
    8000b888:	4401                	li	s0,0
        excpt.triggered == true &&
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_HU
    );

    TEST_END();
    8000b88a:	00011597          	auipc	a1,0x11
    8000b88e:	24658593          	add	a1,a1,582 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000b892:	04f70663          	beq	a4,a5,8000b8de <priv_change_10+0x140>
    TEST_END();
    8000b896:	00011517          	auipc	a0,0x11
    8000b89a:	2e250513          	add	a0,a0,738 # 8001cb78 <__func__.1+0x380>
    8000b89e:	6c40f0ef          	jal	8001af62 <printf>
    8000b8a2:	4511                	li	a0,4
    8000b8a4:	a3af50ef          	jal	80000ade <goto_priv>
    8000b8a8:	a7ff50ef          	jal	80001326 <reset_state>
}
    8000b8ac:	60e2                	ld	ra,24(sp)
    8000b8ae:	8522                	mv	a0,s0
    8000b8b0:	6442                	ld	s0,16(sp)
    8000b8b2:	64a2                	ld	s1,8(sp)
    8000b8b4:	6105                	add	sp,sp,32
    8000b8b6:	8082                	ret
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000b8b8:	00019717          	auipc	a4,0x19
    8000b8bc:	7dc72703          	lw	a4,2012(a4) # 80025094 <curr_priv>
    8000b8c0:	4785                	li	a5,1
    8000b8c2:	f8f71be3          	bne	a4,a5,8000b858 <priv_change_10+0xba>
    8000b8c6:	b75d                	j	8000b86c <priv_change_10+0xce>
    8000b8c8:	00019797          	auipc	a5,0x19
    8000b8cc:	7cc7a783          	lw	a5,1996(a5) # 80025094 <curr_priv>
    8000b8d0:	f69797e3          	bne	a5,s1,8000b83e <priv_change_10+0xa0>
    8000b8d4:	00011597          	auipc	a1,0x11
    8000b8d8:	1ec58593          	add	a1,a1,492 # 8001cac0 <__func__.1+0x2c8>
    8000b8dc:	b78d                	j	8000b83e <priv_change_10+0xa0>
    8000b8de:	00019717          	auipc	a4,0x19
    8000b8e2:	7b672703          	lw	a4,1974(a4) # 80025094 <curr_priv>
    8000b8e6:	4785                	li	a5,1
    8000b8e8:	faf717e3          	bne	a4,a5,8000b896 <priv_change_10+0xf8>
    8000b8ec:	4405                	li	s0,1
    TEST_END();
    8000b8ee:	00011597          	auipc	a1,0x11
    8000b8f2:	1d258593          	add	a1,a1,466 # 8001cac0 <__func__.1+0x2c8>
    8000b8f6:	b745                	j	8000b896 <priv_change_10+0xf8>

000000008000b8f8 <priv_change_11>:


bool priv_change_11(){
    8000b8f8:	1101                	add	sp,sp,-32
    TEST_START();
    8000b8fa:	00010597          	auipc	a1,0x10
    8000b8fe:	19658593          	add	a1,a1,406 # 8001ba90 <__func__.4>
    8000b902:	00011517          	auipc	a0,0x11
    8000b906:	1de50513          	add	a0,a0,478 # 8001cae0 <__func__.1+0x2e8>
bool priv_change_11(){
    8000b90a:	ec06                	sd	ra,24(sp)
    8000b90c:	e822                	sd	s0,16(sp)
    8000b90e:	e426                	sd	s1,8(sp)
    TEST_START();
    8000b910:	6520f0ef          	jal	8001af62 <printf>
    8000b914:	4529                	li	a0,10
    8000b916:	51e0e0ef          	jal	80019e34 <putchar>

    //V=1，VS模式下发生异常，打开代理medeleg/mideleg，打开代理hedeleg/hideleg，切换到VS态处理异常
    goto_priv(PRIV_M);
    8000b91a:	4511                	li	a0,4
    8000b91c:	9c2f50ef          	jal	80000ade <goto_priv>
    reset_state();
    8000b920:	a07f50ef          	jal	80001326 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000b924:	57fd                	li	a5,-1
    8000b926:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000b92a:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000b92e:	60379073          	csrw	hideleg,a5
    CSRW(CSR_HEDELEG,(uint64_t)-1);   
    8000b932:	60279073          	csrw	hedeleg,a5

    goto_priv(PRIV_VS);    
    8000b936:	4509                	li	a0,2
    8000b938:	9a6f50ef          	jal	80000ade <goto_priv>
    

    TEST_SETUP_EXCEPT();        
    8000b93c:	0ff0000f          	fence
    8000b940:	00031497          	auipc	s1,0x31
    8000b944:	6d048493          	add	s1,s1,1744 # 8003d010 <excpt>
    8000b948:	4405                	li	s0,1
    8000b94a:	00849023          	sh	s0,0(s1)
    8000b94e:	00031797          	auipc	a5,0x31
    8000b952:	6e07bd23          	sd	zero,1786(a5) # 8003d048 <excpt+0x38>
    8000b956:	0ff0000f          	fence
    CSRW(medeleg, 0); 
    8000b95a:	30205073          	csrw	medeleg,0
    TEST_ASSERT("vs trigger except that priv no change  when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000b95e:	08200593          	li	a1,130
    8000b962:	00013617          	auipc	a2,0x13
    8000b966:	52e60613          	add	a2,a2,1326 # 8001ee90 <__func__.1+0x2698>
    8000b96a:	00011517          	auipc	a0,0x11
    8000b96e:	18e50513          	add	a0,a0,398 # 8001caf8 <__func__.1+0x300>
    8000b972:	5f00f0ef          	jal	8001af62 <printf>
    8000b976:	6098                	ld	a4,0(s1)
    8000b978:	f00017b7          	lui	a5,0xf0001
    8000b97c:	0792                	sll	a5,a5,0x4
    8000b97e:	1406                	sll	s0,s0,0x21
    8000b980:	f0078793          	add	a5,a5,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000b984:	8ff9                	and	a5,a5,a4
    8000b986:	10040413          	add	s0,s0,256
    8000b98a:	00011597          	auipc	a1,0x11
    8000b98e:	13658593          	add	a1,a1,310 # 8001cac0 <__func__.1+0x2c8>
    8000b992:	00878663          	beq	a5,s0,8000b99e <priv_change_11+0xa6>
    8000b996:	00011597          	auipc	a1,0x11
    8000b99a:	13a58593          	add	a1,a1,314 # 8001cad0 <__func__.1+0x2d8>
    8000b99e:	00011517          	auipc	a0,0x11
    8000b9a2:	17250513          	add	a0,a0,370 # 8001cb10 <__func__.1+0x318>
    8000b9a6:	5bc0f0ef          	jal	8001af62 <printf>
    8000b9aa:	0014c783          	lbu	a5,1(s1)
    8000b9ae:	c789                	beqz	a5,8000b9b8 <priv_change_11+0xc0>
    8000b9b0:	40d8                	lw	a4,4(s1)
    8000b9b2:	4789                	li	a5,2
    8000b9b4:	00f70c63          	beq	a4,a5,8000b9cc <priv_change_11+0xd4>
    8000b9b8:	00011517          	auipc	a0,0x11
    8000b9bc:	16050513          	add	a0,a0,352 # 8001cb18 <__func__.1+0x320>
    8000b9c0:	5a20f0ef          	jal	8001af62 <printf>
    8000b9c4:	02900513          	li	a0,41
    8000b9c8:	46c0e0ef          	jal	80019e34 <putchar>
    8000b9cc:	4529                	li	a0,10
    8000b9ce:	4660e0ef          	jal	80019e34 <putchar>
    8000b9d2:	6094                	ld	a3,0(s1)
    8000b9d4:	f0001737          	lui	a4,0xf0001
    8000b9d8:	4785                	li	a5,1
    8000b9da:	0712                	sll	a4,a4,0x4
    8000b9dc:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000b9e0:	1786                	sll	a5,a5,0x21
    8000b9e2:	8f75                	and	a4,a4,a3
    8000b9e4:	10078793          	add	a5,a5,256
    8000b9e8:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv==PRIV_VS
    ); 


    TEST_END();
    8000b9ea:	00011597          	auipc	a1,0x11
    8000b9ee:	0e658593          	add	a1,a1,230 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vs trigger except that priv no change  when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000b9f2:	00f71763          	bne	a4,a5,8000ba00 <priv_change_11+0x108>
    8000b9f6:	4405                	li	s0,1
    TEST_END();
    8000b9f8:	00011597          	auipc	a1,0x11
    8000b9fc:	0c858593          	add	a1,a1,200 # 8001cac0 <__func__.1+0x2c8>
    8000ba00:	00011517          	auipc	a0,0x11
    8000ba04:	17850513          	add	a0,a0,376 # 8001cb78 <__func__.1+0x380>
    8000ba08:	55a0f0ef          	jal	8001af62 <printf>
    8000ba0c:	4511                	li	a0,4
    8000ba0e:	8d0f50ef          	jal	80000ade <goto_priv>
    8000ba12:	915f50ef          	jal	80001326 <reset_state>
}
    8000ba16:	60e2                	ld	ra,24(sp)
    8000ba18:	8522                	mv	a0,s0
    8000ba1a:	6442                	ld	s0,16(sp)
    8000ba1c:	64a2                	ld	s1,8(sp)
    8000ba1e:	6105                	add	sp,sp,32
    8000ba20:	8082                	ret

000000008000ba22 <priv_change_12>:



bool priv_change_12(){
    8000ba22:	1141                	add	sp,sp,-16
    TEST_START();
    8000ba24:	00010597          	auipc	a1,0x10
    8000ba28:	07c58593          	add	a1,a1,124 # 8001baa0 <__func__.3>
    8000ba2c:	00011517          	auipc	a0,0x11
    8000ba30:	0b450513          	add	a0,a0,180 # 8001cae0 <__func__.1+0x2e8>
bool priv_change_12(){
    8000ba34:	e406                	sd	ra,8(sp)
    8000ba36:	e022                	sd	s0,0(sp)
    TEST_START();
    8000ba38:	52a0f0ef          	jal	8001af62 <printf>
    8000ba3c:	4529                	li	a0,10
    8000ba3e:	3f60e0ef          	jal	80019e34 <putchar>



    //V=0，HS模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常

    goto_priv(PRIV_M);     
    8000ba42:	4511                	li	a0,4
    8000ba44:	89af50ef          	jal	80000ade <goto_priv>
    CSRW(medeleg,(uint64_t)-1);
    8000ba48:	57fd                	li	a5,-1
    8000ba4a:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000ba4e:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000ba52:	60305073          	csrw	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000ba56:	60205073          	csrw	hedeleg,0

    goto_priv(PRIV_HS);
    8000ba5a:	450d                	li	a0,3
    8000ba5c:	882f50ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();        
    8000ba60:	0ff0000f          	fence
    8000ba64:	4785                	li	a5,1
    8000ba66:	00031417          	auipc	s0,0x31
    8000ba6a:	5aa40413          	add	s0,s0,1450 # 8003d010 <excpt>
    8000ba6e:	00f41023          	sh	a5,0(s0)
    8000ba72:	00031797          	auipc	a5,0x31
    8000ba76:	5c07bb23          	sd	zero,1494(a5) # 8003d048 <excpt+0x38>
    8000ba7a:	0ff0000f          	fence
    CSRR(CSR_MSTATUS);
    8000ba7e:	300027f3          	csrr	a5,mstatus
    TEST_ASSERT("hs trigger except that priv no change when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000ba82:	08200593          	li	a1,130
    8000ba86:	00013617          	auipc	a2,0x13
    8000ba8a:	46260613          	add	a2,a2,1122 # 8001eee8 <__func__.1+0x26f0>
    8000ba8e:	00011517          	auipc	a0,0x11
    8000ba92:	06a50513          	add	a0,a0,106 # 8001caf8 <__func__.1+0x300>
    8000ba96:	4cc0f0ef          	jal	8001af62 <printf>
    8000ba9a:	6014                	ld	a3,0(s0)
    8000ba9c:	f0001737          	lui	a4,0xf0001
    8000baa0:	478d                	li	a5,3
    8000baa2:	0712                	sll	a4,a4,0x4
    8000baa4:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000baa8:	1782                	sll	a5,a5,0x20
    8000baaa:	8f75                	and	a4,a4,a3
    8000baac:	10078793          	add	a5,a5,256
    8000bab0:	00011597          	auipc	a1,0x11
    8000bab4:	01058593          	add	a1,a1,16 # 8001cac0 <__func__.1+0x2c8>
    8000bab8:	00f70663          	beq	a4,a5,8000bac4 <priv_change_12+0xa2>
    8000babc:	00011597          	auipc	a1,0x11
    8000bac0:	01458593          	add	a1,a1,20 # 8001cad0 <__func__.1+0x2d8>
    8000bac4:	00011517          	auipc	a0,0x11
    8000bac8:	04c50513          	add	a0,a0,76 # 8001cb10 <__func__.1+0x318>
    8000bacc:	4960f0ef          	jal	8001af62 <printf>
    8000bad0:	00144783          	lbu	a5,1(s0)
    8000bad4:	c789                	beqz	a5,8000bade <priv_change_12+0xbc>
    8000bad6:	4058                	lw	a4,4(s0)
    8000bad8:	478d                	li	a5,3
    8000bada:	00f70c63          	beq	a4,a5,8000baf2 <priv_change_12+0xd0>
    8000bade:	00011517          	auipc	a0,0x11
    8000bae2:	03a50513          	add	a0,a0,58 # 8001cb18 <__func__.1+0x320>
    8000bae6:	47c0f0ef          	jal	8001af62 <printf>
    8000baea:	02900513          	li	a0,41
    8000baee:	3460e0ef          	jal	80019e34 <putchar>
    8000baf2:	4529                	li	a0,10
    8000baf4:	3400e0ef          	jal	80019e34 <putchar>
    8000baf8:	6014                	ld	a3,0(s0)
    8000bafa:	f0001737          	lui	a4,0xf0001
    8000bafe:	478d                	li	a5,3
    8000bb00:	0712                	sll	a4,a4,0x4
    8000bb02:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000bb06:	1782                	sll	a5,a5,0x20
    8000bb08:	8f75                	and	a4,a4,a3
    8000bb0a:	10078793          	add	a5,a5,256
    8000bb0e:	4401                	li	s0,0
        excpt.triggered == true &&
        excpt.priv == PRIV_HS
    ); 


    TEST_END();
    8000bb10:	00011597          	auipc	a1,0x11
    8000bb14:	fc058593          	add	a1,a1,-64 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs trigger except that priv no change when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000bb18:	00f71763          	bne	a4,a5,8000bb26 <priv_change_12+0x104>
    8000bb1c:	4405                	li	s0,1
    TEST_END();
    8000bb1e:	00011597          	auipc	a1,0x11
    8000bb22:	fa258593          	add	a1,a1,-94 # 8001cac0 <__func__.1+0x2c8>
    8000bb26:	00011517          	auipc	a0,0x11
    8000bb2a:	05250513          	add	a0,a0,82 # 8001cb78 <__func__.1+0x380>
    8000bb2e:	4340f0ef          	jal	8001af62 <printf>
    8000bb32:	4511                	li	a0,4
    8000bb34:	fabf40ef          	jal	80000ade <goto_priv>
    8000bb38:	feef50ef          	jal	80001326 <reset_state>

}
    8000bb3c:	60a2                	ld	ra,8(sp)
    8000bb3e:	8522                	mv	a0,s0
    8000bb40:	6402                	ld	s0,0(sp)
    8000bb42:	0141                	add	sp,sp,16
    8000bb44:	8082                	ret

000000008000bb46 <priv_change_13>:

bool priv_change_13(){
    8000bb46:	1141                	add	sp,sp,-16
    TEST_START();
    8000bb48:	00010597          	auipc	a1,0x10
    8000bb4c:	f6858593          	add	a1,a1,-152 # 8001bab0 <__func__.2>
    8000bb50:	00011517          	auipc	a0,0x11
    8000bb54:	f9050513          	add	a0,a0,-112 # 8001cae0 <__func__.1+0x2e8>
bool priv_change_13(){
    8000bb58:	e406                	sd	ra,8(sp)
    8000bb5a:	e022                	sd	s0,0(sp)
    TEST_START();
    8000bb5c:	4060f0ef          	jal	8001af62 <printf>
    8000bb60:	4529                	li	a0,10
    8000bb62:	2d20e0ef          	jal	80019e34 <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000bb66:	4511                	li	a0,4
    8000bb68:	f77f40ef          	jal	80000ade <goto_priv>
    reset_state();
    8000bb6c:	fbaf50ef          	jal	80001326 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000bb70:	57fd                	li	a5,-1
    8000bb72:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000bb76:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000bb7a:	60305073          	csrw	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000bb7e:	60205073          	csrw	hedeleg,0

    TEST_SETUP_EXCEPT();  
    8000bb82:	0ff0000f          	fence
    8000bb86:	4785                	li	a5,1
    8000bb88:	00031417          	auipc	s0,0x31
    8000bb8c:	48840413          	add	s0,s0,1160 # 8003d010 <excpt>
    8000bb90:	00f41023          	sh	a5,0(s0)
    8000bb94:	00031797          	auipc	a5,0x31
    8000bb98:	4a07ba23          	sd	zero,1204(a5) # 8003d048 <excpt+0x38>
    8000bb9c:	0ff0000f          	fence
    goto_priv(PRIV_VU);      
    8000bba0:	4501                	li	a0,0
    8000bba2:	f3df40ef          	jal	80000ade <goto_priv>
    CSRR(CSR_MSTATUS);
    8000bba6:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000bbaa:	08200593          	li	a1,130
    8000bbae:	00013617          	auipc	a2,0x13
    8000bbb2:	39260613          	add	a2,a2,914 # 8001ef40 <__func__.1+0x2748>
    8000bbb6:	00011517          	auipc	a0,0x11
    8000bbba:	f4250513          	add	a0,a0,-190 # 8001caf8 <__func__.1+0x300>
    8000bbbe:	3a40f0ef          	jal	8001af62 <printf>
    8000bbc2:	6014                	ld	a3,0(s0)
    8000bbc4:	f0001737          	lui	a4,0xf0001
    8000bbc8:	478d                	li	a5,3
    8000bbca:	0712                	sll	a4,a4,0x4
    8000bbcc:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000bbd0:	1782                	sll	a5,a5,0x20
    8000bbd2:	8f75                	and	a4,a4,a3
    8000bbd4:	10078793          	add	a5,a5,256
    8000bbd8:	00011597          	auipc	a1,0x11
    8000bbdc:	ef858593          	add	a1,a1,-264 # 8001cad0 <__func__.1+0x2d8>
    8000bbe0:	08f70463          	beq	a4,a5,8000bc68 <priv_change_13+0x122>
    8000bbe4:	00011517          	auipc	a0,0x11
    8000bbe8:	f2c50513          	add	a0,a0,-212 # 8001cb10 <__func__.1+0x318>
    8000bbec:	3760f0ef          	jal	8001af62 <printf>
    8000bbf0:	00144783          	lbu	a5,1(s0)
    8000bbf4:	c789                	beqz	a5,8000bbfe <priv_change_13+0xb8>
    8000bbf6:	4058                	lw	a4,4(s0)
    8000bbf8:	478d                	li	a5,3
    8000bbfa:	06f70163          	beq	a4,a5,8000bc5c <priv_change_13+0x116>
    8000bbfe:	00011517          	auipc	a0,0x11
    8000bc02:	f1a50513          	add	a0,a0,-230 # 8001cb18 <__func__.1+0x320>
    8000bc06:	35c0f0ef          	jal	8001af62 <printf>
    8000bc0a:	02900513          	li	a0,41
    8000bc0e:	2260e0ef          	jal	80019e34 <putchar>
    8000bc12:	4529                	li	a0,10
    8000bc14:	2200e0ef          	jal	80019e34 <putchar>
    8000bc18:	6014                	ld	a3,0(s0)
    8000bc1a:	f0001737          	lui	a4,0xf0001
    8000bc1e:	478d                	li	a5,3
    8000bc20:	0712                	sll	a4,a4,0x4
    8000bc22:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000bc26:	1782                	sll	a5,a5,0x20
    8000bc28:	8f75                	and	a4,a4,a3
    8000bc2a:	10078793          	add	a5,a5,256
    8000bc2e:	4401                	li	s0,0
        excpt.triggered == true &&
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VU
    );

    TEST_END();
    8000bc30:	00011597          	auipc	a1,0x11
    8000bc34:	ea058593          	add	a1,a1,-352 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000bc38:	04f70263          	beq	a4,a5,8000bc7c <priv_change_13+0x136>
    TEST_END();
    8000bc3c:	00011517          	auipc	a0,0x11
    8000bc40:	f3c50513          	add	a0,a0,-196 # 8001cb78 <__func__.1+0x380>
    8000bc44:	31e0f0ef          	jal	8001af62 <printf>
    8000bc48:	4511                	li	a0,4
    8000bc4a:	e95f40ef          	jal	80000ade <goto_priv>
    8000bc4e:	ed8f50ef          	jal	80001326 <reset_state>
}
    8000bc52:	60a2                	ld	ra,8(sp)
    8000bc54:	8522                	mv	a0,s0
    8000bc56:	6402                	ld	s0,0(sp)
    8000bc58:	0141                	add	sp,sp,16
    8000bc5a:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000bc5c:	00019797          	auipc	a5,0x19
    8000bc60:	4387a783          	lw	a5,1080(a5) # 80025094 <curr_priv>
    8000bc64:	d7dd                	beqz	a5,8000bc12 <priv_change_13+0xcc>
    8000bc66:	bf61                	j	8000bbfe <priv_change_13+0xb8>
    8000bc68:	00019797          	auipc	a5,0x19
    8000bc6c:	42c7a783          	lw	a5,1068(a5) # 80025094 <curr_priv>
    8000bc70:	fbb5                	bnez	a5,8000bbe4 <priv_change_13+0x9e>
    8000bc72:	00011597          	auipc	a1,0x11
    8000bc76:	e4e58593          	add	a1,a1,-434 # 8001cac0 <__func__.1+0x2c8>
    8000bc7a:	b7ad                	j	8000bbe4 <priv_change_13+0x9e>
    8000bc7c:	00019797          	auipc	a5,0x19
    8000bc80:	4187a783          	lw	a5,1048(a5) # 80025094 <curr_priv>
    8000bc84:	ffc5                	bnez	a5,8000bc3c <priv_change_13+0xf6>
    8000bc86:	4405                	li	s0,1
    TEST_END();
    8000bc88:	00011597          	auipc	a1,0x11
    8000bc8c:	e3858593          	add	a1,a1,-456 # 8001cac0 <__func__.1+0x2c8>
    8000bc90:	b775                	j	8000bc3c <priv_change_13+0xf6>

000000008000bc92 <priv_change_14>:

bool priv_change_14(){
    8000bc92:	1141                	add	sp,sp,-16
    TEST_START();
    8000bc94:	00010597          	auipc	a1,0x10
    8000bc98:	e2c58593          	add	a1,a1,-468 # 8001bac0 <__func__.1>
    8000bc9c:	00011517          	auipc	a0,0x11
    8000bca0:	e4450513          	add	a0,a0,-444 # 8001cae0 <__func__.1+0x2e8>
bool priv_change_14(){
    8000bca4:	e406                	sd	ra,8(sp)
    8000bca6:	e022                	sd	s0,0(sp)
    TEST_START();
    8000bca8:	2ba0f0ef          	jal	8001af62 <printf>
    8000bcac:	4529                	li	a0,10
    8000bcae:	1860e0ef          	jal	80019e34 <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，关闭理hedeleg/hideleg，切换到HS态处理异常，异常处理结束恢复执行sret到VU态
    goto_priv(PRIV_M);
    8000bcb2:	4511                	li	a0,4
    8000bcb4:	e2bf40ef          	jal	80000ade <goto_priv>
    reset_state();
    8000bcb8:	e6ef50ef          	jal	80001326 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000bcbc:	57fd                	li	a5,-1
    8000bcbe:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000bcc2:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000bcc6:	60305073          	csrw	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000bcca:	60205073          	csrw	hedeleg,0
    
    goto_priv(PRIV_VU);     
    8000bcce:	4501                	li	a0,0
    8000bcd0:	e0ff40ef          	jal	80000ade <goto_priv>

    TEST_SETUP_EXCEPT();        
    8000bcd4:	0ff0000f          	fence
    8000bcd8:	4785                	li	a5,1
    8000bcda:	00031417          	auipc	s0,0x31
    8000bcde:	33640413          	add	s0,s0,822 # 8003d010 <excpt>
    8000bce2:	00f41023          	sh	a5,0(s0)
    8000bce6:	00031797          	auipc	a5,0x31
    8000bcea:	3607b123          	sd	zero,866(a5) # 8003d048 <excpt+0x38>
    8000bcee:	0ff0000f          	fence
    CSRW(medeleg, 0); 
    8000bcf2:	30205073          	csrw	medeleg,0

    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000bcf6:	08200593          	li	a1,130
    8000bcfa:	00013617          	auipc	a2,0x13
    8000bcfe:	2b660613          	add	a2,a2,694 # 8001efb0 <__func__.1+0x27b8>
    8000bd02:	00011517          	auipc	a0,0x11
    8000bd06:	df650513          	add	a0,a0,-522 # 8001caf8 <__func__.1+0x300>
    8000bd0a:	2580f0ef          	jal	8001af62 <printf>
    8000bd0e:	6014                	ld	a3,0(s0)
    8000bd10:	f0001737          	lui	a4,0xf0001
    8000bd14:	478d                	li	a5,3
    8000bd16:	0712                	sll	a4,a4,0x4
    8000bd18:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000bd1c:	1782                	sll	a5,a5,0x20
    8000bd1e:	8f75                	and	a4,a4,a3
    8000bd20:	10078793          	add	a5,a5,256
    8000bd24:	00011597          	auipc	a1,0x11
    8000bd28:	dac58593          	add	a1,a1,-596 # 8001cad0 <__func__.1+0x2d8>
    8000bd2c:	08f70463          	beq	a4,a5,8000bdb4 <priv_change_14+0x122>
    8000bd30:	00011517          	auipc	a0,0x11
    8000bd34:	de050513          	add	a0,a0,-544 # 8001cb10 <__func__.1+0x318>
    8000bd38:	22a0f0ef          	jal	8001af62 <printf>
    8000bd3c:	00144783          	lbu	a5,1(s0)
    8000bd40:	c789                	beqz	a5,8000bd4a <priv_change_14+0xb8>
    8000bd42:	4058                	lw	a4,4(s0)
    8000bd44:	478d                	li	a5,3
    8000bd46:	06f70163          	beq	a4,a5,8000bda8 <priv_change_14+0x116>
    8000bd4a:	00011517          	auipc	a0,0x11
    8000bd4e:	dce50513          	add	a0,a0,-562 # 8001cb18 <__func__.1+0x320>
    8000bd52:	2100f0ef          	jal	8001af62 <printf>
    8000bd56:	02900513          	li	a0,41
    8000bd5a:	0da0e0ef          	jal	80019e34 <putchar>
    8000bd5e:	4529                	li	a0,10
    8000bd60:	0d40e0ef          	jal	80019e34 <putchar>
    8000bd64:	6014                	ld	a3,0(s0)
    8000bd66:	f0001737          	lui	a4,0xf0001
    8000bd6a:	478d                	li	a5,3
    8000bd6c:	0712                	sll	a4,a4,0x4
    8000bd6e:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000bd72:	1782                	sll	a5,a5,0x20
    8000bd74:	8f75                	and	a4,a4,a3
    8000bd76:	10078793          	add	a5,a5,256
    8000bd7a:	4401                	li	s0,0
        excpt.triggered == true &&
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VU
    );

    TEST_END();
    8000bd7c:	00011597          	auipc	a1,0x11
    8000bd80:	d5458593          	add	a1,a1,-684 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000bd84:	04f70263          	beq	a4,a5,8000bdc8 <priv_change_14+0x136>
    TEST_END();
    8000bd88:	00011517          	auipc	a0,0x11
    8000bd8c:	df050513          	add	a0,a0,-528 # 8001cb78 <__func__.1+0x380>
    8000bd90:	1d20f0ef          	jal	8001af62 <printf>
    8000bd94:	4511                	li	a0,4
    8000bd96:	d49f40ef          	jal	80000ade <goto_priv>
    8000bd9a:	d8cf50ef          	jal	80001326 <reset_state>

}
    8000bd9e:	60a2                	ld	ra,8(sp)
    8000bda0:	8522                	mv	a0,s0
    8000bda2:	6402                	ld	s0,0(sp)
    8000bda4:	0141                	add	sp,sp,16
    8000bda6:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000bda8:	00019797          	auipc	a5,0x19
    8000bdac:	2ec7a783          	lw	a5,748(a5) # 80025094 <curr_priv>
    8000bdb0:	d7dd                	beqz	a5,8000bd5e <priv_change_14+0xcc>
    8000bdb2:	bf61                	j	8000bd4a <priv_change_14+0xb8>
    8000bdb4:	00019797          	auipc	a5,0x19
    8000bdb8:	2e07a783          	lw	a5,736(a5) # 80025094 <curr_priv>
    8000bdbc:	fbb5                	bnez	a5,8000bd30 <priv_change_14+0x9e>
    8000bdbe:	00011597          	auipc	a1,0x11
    8000bdc2:	d0258593          	add	a1,a1,-766 # 8001cac0 <__func__.1+0x2c8>
    8000bdc6:	b7ad                	j	8000bd30 <priv_change_14+0x9e>
    8000bdc8:	00019797          	auipc	a5,0x19
    8000bdcc:	2cc7a783          	lw	a5,716(a5) # 80025094 <curr_priv>
    8000bdd0:	ffc5                	bnez	a5,8000bd88 <priv_change_14+0xf6>
    8000bdd2:	4405                	li	s0,1
    TEST_END();
    8000bdd4:	00011597          	auipc	a1,0x11
    8000bdd8:	cec58593          	add	a1,a1,-788 # 8001cac0 <__func__.1+0x2c8>
    8000bddc:	b775                	j	8000bd88 <priv_change_14+0xf6>

000000008000bdde <priv_change_15>:

bool priv_change_15(){
    8000bdde:	1141                	add	sp,sp,-16
    TEST_START();
    8000bde0:	00010597          	auipc	a1,0x10
    8000bde4:	cf058593          	add	a1,a1,-784 # 8001bad0 <__func__.0>
    8000bde8:	00011517          	auipc	a0,0x11
    8000bdec:	cf850513          	add	a0,a0,-776 # 8001cae0 <__func__.1+0x2e8>
bool priv_change_15(){
    8000bdf0:	e406                	sd	ra,8(sp)
    8000bdf2:	e022                	sd	s0,0(sp)
    TEST_START();
    8000bdf4:	16e0f0ef          	jal	8001af62 <printf>
    8000bdf8:	4529                	li	a0,10
    8000bdfa:	03a0e0ef          	jal	80019e34 <putchar>

    //V=1，VS模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000bdfe:	4511                	li	a0,4
    8000be00:	cdff40ef          	jal	80000ade <goto_priv>
    reset_state();
    8000be04:	d22f50ef          	jal	80001326 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000be08:	57fd                	li	a5,-1
    8000be0a:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000be0e:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000be12:	60305073          	csrw	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000be16:	60205073          	csrw	hedeleg,0

    TEST_SETUP_EXCEPT();    
    8000be1a:	0ff0000f          	fence
    8000be1e:	4785                	li	a5,1
    8000be20:	00031417          	auipc	s0,0x31
    8000be24:	1f040413          	add	s0,s0,496 # 8003d010 <excpt>
    8000be28:	00f41023          	sh	a5,0(s0)
    8000be2c:	00031797          	auipc	a5,0x31
    8000be30:	2007be23          	sd	zero,540(a5) # 8003d048 <excpt+0x38>
    8000be34:	0ff0000f          	fence
    goto_priv(PRIV_VS);     
    8000be38:	4509                	li	a0,2
    8000be3a:	ca5f40ef          	jal	80000ade <goto_priv>
    CSRR(CSR_MSTATUS);
    8000be3e:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000be42:	08200593          	li	a1,130
    8000be46:	00013617          	auipc	a2,0x13
    8000be4a:	1da60613          	add	a2,a2,474 # 8001f020 <__func__.1+0x2828>
    8000be4e:	00011517          	auipc	a0,0x11
    8000be52:	caa50513          	add	a0,a0,-854 # 8001caf8 <__func__.1+0x300>
    8000be56:	10c0f0ef          	jal	8001af62 <printf>
    8000be5a:	6014                	ld	a3,0(s0)
    8000be5c:	f0001737          	lui	a4,0xf0001
    8000be60:	478d                	li	a5,3
    8000be62:	0712                	sll	a4,a4,0x4
    8000be64:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000be68:	1782                	sll	a5,a5,0x20
    8000be6a:	8f75                	and	a4,a4,a3
    8000be6c:	10078793          	add	a5,a5,256
    8000be70:	00011597          	auipc	a1,0x11
    8000be74:	c6058593          	add	a1,a1,-928 # 8001cad0 <__func__.1+0x2d8>
    8000be78:	08f70663          	beq	a4,a5,8000bf04 <priv_change_15+0x126>
    8000be7c:	00011517          	auipc	a0,0x11
    8000be80:	c9450513          	add	a0,a0,-876 # 8001cb10 <__func__.1+0x318>
    8000be84:	0de0f0ef          	jal	8001af62 <printf>
    8000be88:	00144783          	lbu	a5,1(s0)
    8000be8c:	c789                	beqz	a5,8000be96 <priv_change_15+0xb8>
    8000be8e:	4058                	lw	a4,4(s0)
    8000be90:	478d                	li	a5,3
    8000be92:	06f70163          	beq	a4,a5,8000bef4 <priv_change_15+0x116>
    8000be96:	00011517          	auipc	a0,0x11
    8000be9a:	c8250513          	add	a0,a0,-894 # 8001cb18 <__func__.1+0x320>
    8000be9e:	0c40f0ef          	jal	8001af62 <printf>
    8000bea2:	02900513          	li	a0,41
    8000bea6:	78f0d0ef          	jal	80019e34 <putchar>
    8000beaa:	4529                	li	a0,10
    8000beac:	7890d0ef          	jal	80019e34 <putchar>
    8000beb0:	6014                	ld	a3,0(s0)
    8000beb2:	f0001737          	lui	a4,0xf0001
    8000beb6:	478d                	li	a5,3
    8000beb8:	0712                	sll	a4,a4,0x4
    8000beba:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000bebe:	1782                	sll	a5,a5,0x20
    8000bec0:	8f75                	and	a4,a4,a3
    8000bec2:	10078793          	add	a5,a5,256
    8000bec6:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VS
    );

    TEST_END();
    8000bec8:	00011597          	auipc	a1,0x11
    8000becc:	c0858593          	add	a1,a1,-1016 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000bed0:	04f70663          	beq	a4,a5,8000bf1c <priv_change_15+0x13e>
    TEST_END();
    8000bed4:	00011517          	auipc	a0,0x11
    8000bed8:	ca450513          	add	a0,a0,-860 # 8001cb78 <__func__.1+0x380>
    8000bedc:	0860f0ef          	jal	8001af62 <printf>
    8000bee0:	4511                	li	a0,4
    8000bee2:	bfdf40ef          	jal	80000ade <goto_priv>
    8000bee6:	c40f50ef          	jal	80001326 <reset_state>

}
    8000beea:	60a2                	ld	ra,8(sp)
    8000beec:	8522                	mv	a0,s0
    8000beee:	6402                	ld	s0,0(sp)
    8000bef0:	0141                	add	sp,sp,16
    8000bef2:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000bef4:	00019717          	auipc	a4,0x19
    8000bef8:	1a072703          	lw	a4,416(a4) # 80025094 <curr_priv>
    8000befc:	4789                	li	a5,2
    8000befe:	f8f71ce3          	bne	a4,a5,8000be96 <priv_change_15+0xb8>
    8000bf02:	b765                	j	8000beaa <priv_change_15+0xcc>
    8000bf04:	00019717          	auipc	a4,0x19
    8000bf08:	19072703          	lw	a4,400(a4) # 80025094 <curr_priv>
    8000bf0c:	4789                	li	a5,2
    8000bf0e:	f6f717e3          	bne	a4,a5,8000be7c <priv_change_15+0x9e>
    8000bf12:	00011597          	auipc	a1,0x11
    8000bf16:	bae58593          	add	a1,a1,-1106 # 8001cac0 <__func__.1+0x2c8>
    8000bf1a:	b78d                	j	8000be7c <priv_change_15+0x9e>
    8000bf1c:	00019717          	auipc	a4,0x19
    8000bf20:	17872703          	lw	a4,376(a4) # 80025094 <curr_priv>
    8000bf24:	4789                	li	a5,2
    8000bf26:	faf717e3          	bne	a4,a5,8000bed4 <priv_change_15+0xf6>
    8000bf2a:	4405                	li	s0,1
    TEST_END();
    8000bf2c:	00011597          	auipc	a1,0x11
    8000bf30:	b9458593          	add	a1,a1,-1132 # 8001cac0 <__func__.1+0x2c8>
    8000bf34:	b745                	j	8000bed4 <priv_change_15+0xf6>

000000008000bf36 <priv_instruction>:
#include <rvh_test.h>
#include <page_tables.h> 
bool priv_instruction(){
    8000bf36:	1141                	add	sp,sp,-16
    
    TEST_START();
    8000bf38:	00010597          	auipc	a1,0x10
    8000bf3c:	ba858593          	add	a1,a1,-1112 # 8001bae0 <__func__.0>
    8000bf40:	00011517          	auipc	a0,0x11
    8000bf44:	ba050513          	add	a0,a0,-1120 # 8001cae0 <__func__.1+0x2e8>
bool priv_instruction(){
    8000bf48:	e406                	sd	ra,8(sp)
    TEST_START();
    8000bf4a:	0180f0ef          	jal	8001af62 <printf>
    8000bf4e:	4529                	li	a0,10
    8000bf50:	6e50d0ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    8000bf54:	450d                	li	a0,3
    8000bf56:	b89f40ef          	jal	80000ade <goto_priv>
    hspt_init();
    8000bf5a:	e86f40ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000bf5e:	8c9f40ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    8000bf62:	4509                	li	a0,2
    8000bf64:	b7bf40ef          	jal	80000ade <goto_priv>
    vspt_init();
    8000bf68:	f4cf40ef          	jal	800006b4 <vspt_init>

    //在VS_mode下执行sret，可以正确的返回相应的模式，且相关寄存器配置正确



    TEST_END();
    8000bf6c:	00011597          	auipc	a1,0x11
    8000bf70:	b5458593          	add	a1,a1,-1196 # 8001cac0 <__func__.1+0x2c8>
    8000bf74:	00011517          	auipc	a0,0x11
    8000bf78:	c0450513          	add	a0,a0,-1020 # 8001cb78 <__func__.1+0x380>
    8000bf7c:	7e70e0ef          	jal	8001af62 <printf>
    8000bf80:	4511                	li	a0,4
    8000bf82:	b5df40ef          	jal	80000ade <goto_priv>
    8000bf86:	ba0f50ef          	jal	80001326 <reset_state>
    8000bf8a:	60a2                	ld	ra,8(sp)
    8000bf8c:	4505                	li	a0,1
    8000bf8e:	0141                	add	sp,sp,16
    8000bf90:	8082                	ret

000000008000bf92 <addr_unaligned>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool addr_unaligned() {
    8000bf92:	7179                	add	sp,sp,-48

    TEST_START();
    8000bf94:	00010597          	auipc	a1,0x10
    8000bf98:	b6458593          	add	a1,a1,-1180 # 8001baf8 <__func__.1>
    8000bf9c:	00011517          	auipc	a0,0x11
    8000bfa0:	b4450513          	add	a0,a0,-1212 # 8001cae0 <__func__.1+0x2e8>
bool addr_unaligned() {
    8000bfa4:	f406                	sd	ra,40(sp)
    8000bfa6:	f022                	sd	s0,32(sp)
    8000bfa8:	ec26                	sd	s1,24(sp)
    8000bfaa:	e84a                	sd	s2,16(sp)
    8000bfac:	e44e                	sd	s3,8(sp)
    TEST_START();
    8000bfae:	7b50e0ef          	jal	8001af62 <printf>
    8000bfb2:	4529                	li	a0,10
    8000bfb4:	6810d0ef          	jal	80019e34 <putchar>

    TEST_SETUP_EXCEPT();
    8000bfb8:	0ff0000f          	fence
    8000bfbc:	00031417          	auipc	s0,0x31
    8000bfc0:	05440413          	add	s0,s0,84 # 8003d010 <excpt>
    8000bfc4:	4485                	li	s1,1
    8000bfc6:	00941023          	sh	s1,0(s0)
    8000bfca:	00031797          	auipc	a5,0x31
    8000bfce:	0607bf23          	sd	zero,126(a5) # 8003d048 <excpt+0x38>
    8000bfd2:	0ff0000f          	fence
    
    
    hspt_init();        
    8000bfd6:	e0af40ef          	jal	800005e0 <hspt_init>
    goto_priv(PRIV_HS);     
    8000bfda:	450d                	li	a0,3
    8000bfdc:	b03f40ef          	jal	80000ade <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSRWX_GRWX) + 1;      
    uint64_t value = 0xdeadbeef;

    //load byte地址不会发生未对齐
    TEST_SETUP_EXCEPT();        
    8000bfe0:	0ff0000f          	fence
    8000bfe4:	00031797          	auipc	a5,0x31
    8000bfe8:	0607b223          	sd	zero,100(a5) # 8003d048 <excpt+0x38>
    8000bfec:	00941023          	sh	s1,0(s0)
    8000bff0:	0ff0000f          	fence
    8000bff4:	00017917          	auipc	s2,0x17
    8000bff8:	07c93903          	ld	s2,124(s2) # 80023070 <__func__.1+0x6878>
    8000bffc:	00090783          	lb	a5,0(s2)
    value = lb(vaddr_f);
    TEST_ASSERT("load byte address is not aligned successful",         
    8000c000:	08200593          	li	a1,130
    8000c004:	00013617          	auipc	a2,0x13
    8000c008:	08c60613          	add	a2,a2,140 # 8001f090 <__func__.1+0x2898>
    8000c00c:	00011517          	auipc	a0,0x11
    8000c010:	aec50513          	add	a0,a0,-1300 # 8001caf8 <__func__.1+0x300>
    8000c014:	74f0e0ef          	jal	8001af62 <printf>
    8000c018:	00144783          	lbu	a5,1(s0)
    8000c01c:	00011597          	auipc	a1,0x11
    8000c020:	aa458593          	add	a1,a1,-1372 # 8001cac0 <__func__.1+0x2c8>
    8000c024:	c789                	beqz	a5,8000c02e <addr_unaligned+0x9c>
    8000c026:	00011597          	auipc	a1,0x11
    8000c02a:	aaa58593          	add	a1,a1,-1366 # 8001cad0 <__func__.1+0x2d8>
    8000c02e:	00011517          	auipc	a0,0x11
    8000c032:	ae250513          	add	a0,a0,-1310 # 8001cb10 <__func__.1+0x318>
    8000c036:	72d0e0ef          	jal	8001af62 <printf>
    8000c03a:	00144783          	lbu	a5,1(s0)
    8000c03e:	40079e63          	bnez	a5,8000c45a <addr_unaligned+0x4c8>
    8000c042:	4529                	li	a0,10
    8000c044:	5f10d0ef          	jal	80019e34 <putchar>
    8000c048:	00144983          	lbu	s3,1(s0)
        excpt.triggered == false
    );

    //load half地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    8000c04c:	0ff0000f          	fence
    8000c050:	4785                	li	a5,1
    8000c052:	00f41023          	sh	a5,0(s0)
    8000c056:	00031797          	auipc	a5,0x31
    8000c05a:	fe07b923          	sd	zero,-14(a5) # 8003d048 <excpt+0x38>
    8000c05e:	0ff0000f          	fence
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    8000c062:	00091783          	lh	a5,0(s2)
    value = lh(vaddr_f);
    TEST_ASSERT(" load half address is not aligned result in a lam",         
    8000c066:	08200593          	li	a1,130
    8000c06a:	00013617          	auipc	a2,0x13
    8000c06e:	05660613          	add	a2,a2,86 # 8001f0c0 <__func__.1+0x28c8>
    8000c072:	00011517          	auipc	a0,0x11
    8000c076:	a8650513          	add	a0,a0,-1402 # 8001caf8 <__func__.1+0x300>
    8000c07a:	6e90e0ef          	jal	8001af62 <printf>
    8000c07e:	00144783          	lbu	a5,1(s0)
    8000c082:	00011597          	auipc	a1,0x11
    8000c086:	a4e58593          	add	a1,a1,-1458 # 8001cad0 <__func__.1+0x2d8>
    8000c08a:	c789                	beqz	a5,8000c094 <addr_unaligned+0x102>
    8000c08c:	6418                	ld	a4,8(s0)
    8000c08e:	4791                	li	a5,4
    8000c090:	40f70f63          	beq	a4,a5,8000c4ae <addr_unaligned+0x51c>
    8000c094:	00011517          	auipc	a0,0x11
    8000c098:	a7c50513          	add	a0,a0,-1412 # 8001cb10 <__func__.1+0x318>
    8000c09c:	6c70e0ef          	jal	8001af62 <printf>
    8000c0a0:	00144783          	lbu	a5,1(s0)
    8000c0a4:	c789                	beqz	a5,8000c0ae <addr_unaligned+0x11c>
    8000c0a6:	6418                	ld	a4,8(s0)
    8000c0a8:	4791                	li	a5,4
    8000c0aa:	00f70c63          	beq	a4,a5,8000c0c2 <addr_unaligned+0x130>
    8000c0ae:	00011517          	auipc	a0,0x11
    8000c0b2:	a6a50513          	add	a0,a0,-1430 # 8001cb18 <__func__.1+0x320>
    8000c0b6:	6ad0e0ef          	jal	8001af62 <printf>
    8000c0ba:	02900513          	li	a0,41
    8000c0be:	5770d0ef          	jal	80019e34 <putchar>
    8000c0c2:	4529                	li	a0,10
    8000c0c4:	5710d0ef          	jal	80019e34 <putchar>
    8000c0c8:	4481                	li	s1,0
    8000c0ca:	00099663          	bnez	s3,8000c0d6 <addr_unaligned+0x144>
    8000c0ce:	00144783          	lbu	a5,1(s0)
    8000c0d2:	36079f63          	bnez	a5,8000c450 <addr_unaligned+0x4be>
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );
    
    //load word地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    8000c0d6:	0ff0000f          	fence
    8000c0da:	4785                	li	a5,1
    8000c0dc:	00f41023          	sh	a5,0(s0)
    8000c0e0:	00031797          	auipc	a5,0x31
    8000c0e4:	f607b423          	sd	zero,-152(a5) # 8003d048 <excpt+0x38>
    8000c0e8:	0ff0000f          	fence
LOAD_INSTRUCTION(lw, "lw", uint32_t); 
    8000c0ec:	00092783          	lw	a5,0(s2)
    value = lw(vaddr_f);
    TEST_ASSERT("load word address is not aligned result in a lam",         
    8000c0f0:	08200593          	li	a1,130
    8000c0f4:	00013617          	auipc	a2,0x13
    8000c0f8:	00460613          	add	a2,a2,4 # 8001f0f8 <__func__.1+0x2900>
    8000c0fc:	00011517          	auipc	a0,0x11
    8000c100:	9fc50513          	add	a0,a0,-1540 # 8001caf8 <__func__.1+0x300>
    8000c104:	65f0e0ef          	jal	8001af62 <printf>
    8000c108:	00144783          	lbu	a5,1(s0)
    8000c10c:	00011597          	auipc	a1,0x11
    8000c110:	9c458593          	add	a1,a1,-1596 # 8001cad0 <__func__.1+0x2d8>
    8000c114:	c789                	beqz	a5,8000c11e <addr_unaligned+0x18c>
    8000c116:	6418                	ld	a4,8(s0)
    8000c118:	4791                	li	a5,4
    8000c11a:	38f70f63          	beq	a4,a5,8000c4b8 <addr_unaligned+0x526>
    8000c11e:	00011517          	auipc	a0,0x11
    8000c122:	9f250513          	add	a0,a0,-1550 # 8001cb10 <__func__.1+0x318>
    8000c126:	63d0e0ef          	jal	8001af62 <printf>
    8000c12a:	00144783          	lbu	a5,1(s0)
    8000c12e:	c789                	beqz	a5,8000c138 <addr_unaligned+0x1a6>
    8000c130:	6418                	ld	a4,8(s0)
    8000c132:	4791                	li	a5,4
    8000c134:	00f70c63          	beq	a4,a5,8000c14c <addr_unaligned+0x1ba>
    8000c138:	00011517          	auipc	a0,0x11
    8000c13c:	9e050513          	add	a0,a0,-1568 # 8001cb18 <__func__.1+0x320>
    8000c140:	6230e0ef          	jal	8001af62 <printf>
    8000c144:	02900513          	li	a0,41
    8000c148:	4ed0d0ef          	jal	80019e34 <putchar>
    8000c14c:	4529                	li	a0,10
    8000c14e:	4e70d0ef          	jal	80019e34 <putchar>
    8000c152:	c491                	beqz	s1,8000c15e <addr_unaligned+0x1cc>
    8000c154:	00144783          	lbu	a5,1(s0)
    8000c158:	4481                	li	s1,0
    8000c15a:	2e079663          	bnez	a5,8000c446 <addr_unaligned+0x4b4>
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );

    //load double word地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    8000c15e:	0ff0000f          	fence
    8000c162:	4785                	li	a5,1
    8000c164:	00f41023          	sh	a5,0(s0)
    8000c168:	00031797          	auipc	a5,0x31
    8000c16c:	ee07b023          	sd	zero,-288(a5) # 8003d048 <excpt+0x38>
    8000c170:	0ff0000f          	fence
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8000c174:	00093983          	ld	s3,0(s2)
    value = ld(vaddr_f);
    TEST_ASSERT("load double word address is not aligned result in a lam",         
    8000c178:	08200593          	li	a1,130
    8000c17c:	00013617          	auipc	a2,0x13
    8000c180:	fb460613          	add	a2,a2,-76 # 8001f130 <__func__.1+0x2938>
    8000c184:	00011517          	auipc	a0,0x11
    8000c188:	97450513          	add	a0,a0,-1676 # 8001caf8 <__func__.1+0x300>
    8000c18c:	5d70e0ef          	jal	8001af62 <printf>
    8000c190:	00144783          	lbu	a5,1(s0)
    8000c194:	00011597          	auipc	a1,0x11
    8000c198:	93c58593          	add	a1,a1,-1732 # 8001cad0 <__func__.1+0x2d8>
    8000c19c:	c789                	beqz	a5,8000c1a6 <addr_unaligned+0x214>
    8000c19e:	6418                	ld	a4,8(s0)
    8000c1a0:	4791                	li	a5,4
    8000c1a2:	2ef70263          	beq	a4,a5,8000c486 <addr_unaligned+0x4f4>
    8000c1a6:	00011517          	auipc	a0,0x11
    8000c1aa:	96a50513          	add	a0,a0,-1686 # 8001cb10 <__func__.1+0x318>
    8000c1ae:	5b50e0ef          	jal	8001af62 <printf>
    8000c1b2:	00144783          	lbu	a5,1(s0)
    8000c1b6:	c789                	beqz	a5,8000c1c0 <addr_unaligned+0x22e>
    8000c1b8:	6418                	ld	a4,8(s0)
    8000c1ba:	4791                	li	a5,4
    8000c1bc:	00f70c63          	beq	a4,a5,8000c1d4 <addr_unaligned+0x242>
    8000c1c0:	00011517          	auipc	a0,0x11
    8000c1c4:	95850513          	add	a0,a0,-1704 # 8001cb18 <__func__.1+0x320>
    8000c1c8:	59b0e0ef          	jal	8001af62 <printf>
    8000c1cc:	02900513          	li	a0,41
    8000c1d0:	4650d0ef          	jal	80019e34 <putchar>
    8000c1d4:	4529                	li	a0,10
    8000c1d6:	45f0d0ef          	jal	80019e34 <putchar>
    8000c1da:	c491                	beqz	s1,8000c1e6 <addr_unaligned+0x254>
    8000c1dc:	00144783          	lbu	a5,1(s0)
    8000c1e0:	4481                	li	s1,0
    8000c1e2:	24079d63          	bnez	a5,8000c43c <addr_unaligned+0x4aa>
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );

    //store byte地址不会发生未对齐
    TEST_SETUP_EXCEPT();        
    8000c1e6:	0ff0000f          	fence
    8000c1ea:	4785                	li	a5,1
    8000c1ec:	00f41023          	sh	a5,0(s0)
    8000c1f0:	00031797          	auipc	a5,0x31
    8000c1f4:	e407bc23          	sd	zero,-424(a5) # 8003d048 <excpt+0x38>
    8000c1f8:	0ff0000f          	fence
STORE_INSTRUCTION(sb, "sb", uint8_t);
    8000c1fc:	01390023          	sb	s3,0(s2)
    sb(vaddr_f,value);
    TEST_ASSERT("store byte address is not aligned successful",         
    8000c200:	08200593          	li	a1,130
    8000c204:	00013617          	auipc	a2,0x13
    8000c208:	f6460613          	add	a2,a2,-156 # 8001f168 <__func__.1+0x2970>
    8000c20c:	00011517          	auipc	a0,0x11
    8000c210:	8ec50513          	add	a0,a0,-1812 # 8001caf8 <__func__.1+0x300>
    8000c214:	54f0e0ef          	jal	8001af62 <printf>
    8000c218:	00144783          	lbu	a5,1(s0)
    8000c21c:	00011597          	auipc	a1,0x11
    8000c220:	8b458593          	add	a1,a1,-1868 # 8001cad0 <__func__.1+0x2d8>
    8000c224:	e789                	bnez	a5,8000c22e <addr_unaligned+0x29c>
    8000c226:	00011597          	auipc	a1,0x11
    8000c22a:	89a58593          	add	a1,a1,-1894 # 8001cac0 <__func__.1+0x2c8>
    8000c22e:	00011517          	auipc	a0,0x11
    8000c232:	8e250513          	add	a0,a0,-1822 # 8001cb10 <__func__.1+0x318>
    8000c236:	52d0e0ef          	jal	8001af62 <printf>
    8000c23a:	00144783          	lbu	a5,1(s0)
    8000c23e:	22079963          	bnez	a5,8000c470 <addr_unaligned+0x4de>
    8000c242:	4529                	li	a0,10
    8000c244:	3f10d0ef          	jal	80019e34 <putchar>
    8000c248:	c489                	beqz	s1,8000c252 <addr_unaligned+0x2c0>
    8000c24a:	00144483          	lbu	s1,1(s0)
    8000c24e:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    );

    //store half地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    8000c252:	0ff0000f          	fence
    8000c256:	4785                	li	a5,1
    8000c258:	00f41023          	sh	a5,0(s0)
    8000c25c:	00031797          	auipc	a5,0x31
    8000c260:	de07b623          	sd	zero,-532(a5) # 8003d048 <excpt+0x38>
    8000c264:	0ff0000f          	fence
STORE_INSTRUCTION(sh, "sh", uint16_t);
    8000c268:	01391023          	sh	s3,0(s2)
    sh(vaddr_f,value);
    TEST_ASSERT("store half address is not aligned result in a sam",         
    8000c26c:	08200593          	li	a1,130
    8000c270:	00013617          	auipc	a2,0x13
    8000c274:	f2860613          	add	a2,a2,-216 # 8001f198 <__func__.1+0x29a0>
    8000c278:	00011517          	auipc	a0,0x11
    8000c27c:	88050513          	add	a0,a0,-1920 # 8001caf8 <__func__.1+0x300>
    8000c280:	4e30e0ef          	jal	8001af62 <printf>
    8000c284:	00144783          	lbu	a5,1(s0)
    8000c288:	00011597          	auipc	a1,0x11
    8000c28c:	84858593          	add	a1,a1,-1976 # 8001cad0 <__func__.1+0x2d8>
    8000c290:	c789                	beqz	a5,8000c29a <addr_unaligned+0x308>
    8000c292:	6418                	ld	a4,8(s0)
    8000c294:	4799                	li	a5,6
    8000c296:	1ef70d63          	beq	a4,a5,8000c490 <addr_unaligned+0x4fe>
    8000c29a:	00011517          	auipc	a0,0x11
    8000c29e:	87650513          	add	a0,a0,-1930 # 8001cb10 <__func__.1+0x318>
    8000c2a2:	4c10e0ef          	jal	8001af62 <printf>
    8000c2a6:	00144783          	lbu	a5,1(s0)
    8000c2aa:	c789                	beqz	a5,8000c2b4 <addr_unaligned+0x322>
    8000c2ac:	6418                	ld	a4,8(s0)
    8000c2ae:	4799                	li	a5,6
    8000c2b0:	00f70c63          	beq	a4,a5,8000c2c8 <addr_unaligned+0x336>
    8000c2b4:	00011517          	auipc	a0,0x11
    8000c2b8:	86450513          	add	a0,a0,-1948 # 8001cb18 <__func__.1+0x320>
    8000c2bc:	4a70e0ef          	jal	8001af62 <printf>
    8000c2c0:	02900513          	li	a0,41
    8000c2c4:	3710d0ef          	jal	80019e34 <putchar>
    8000c2c8:	4529                	li	a0,10
    8000c2ca:	36b0d0ef          	jal	80019e34 <putchar>
    8000c2ce:	c491                	beqz	s1,8000c2da <addr_unaligned+0x348>
    8000c2d0:	00144783          	lbu	a5,1(s0)
    8000c2d4:	4481                	li	s1,0
    8000c2d6:	14079e63          	bnez	a5,8000c432 <addr_unaligned+0x4a0>
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );
    
    //store word地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    8000c2da:	0ff0000f          	fence
    8000c2de:	4785                	li	a5,1
    8000c2e0:	00f41023          	sh	a5,0(s0)
    8000c2e4:	00031797          	auipc	a5,0x31
    8000c2e8:	d607b223          	sd	zero,-668(a5) # 8003d048 <excpt+0x38>
    8000c2ec:	0ff0000f          	fence
STORE_INSTRUCTION(sw, "sw", uint32_t);
    8000c2f0:	01392023          	sw	s3,0(s2)
    sw(vaddr_f,value);
    TEST_ASSERT("store word address is not aligned result in a sam",         
    8000c2f4:	08200593          	li	a1,130
    8000c2f8:	00013617          	auipc	a2,0x13
    8000c2fc:	ed860613          	add	a2,a2,-296 # 8001f1d0 <__func__.1+0x29d8>
    8000c300:	00010517          	auipc	a0,0x10
    8000c304:	7f850513          	add	a0,a0,2040 # 8001caf8 <__func__.1+0x300>
    8000c308:	45b0e0ef          	jal	8001af62 <printf>
    8000c30c:	00144783          	lbu	a5,1(s0)
    8000c310:	00010597          	auipc	a1,0x10
    8000c314:	7c058593          	add	a1,a1,1984 # 8001cad0 <__func__.1+0x2d8>
    8000c318:	c789                	beqz	a5,8000c322 <addr_unaligned+0x390>
    8000c31a:	6418                	ld	a4,8(s0)
    8000c31c:	4799                	li	a5,6
    8000c31e:	16f70e63          	beq	a4,a5,8000c49a <addr_unaligned+0x508>
    8000c322:	00010517          	auipc	a0,0x10
    8000c326:	7ee50513          	add	a0,a0,2030 # 8001cb10 <__func__.1+0x318>
    8000c32a:	4390e0ef          	jal	8001af62 <printf>
    8000c32e:	00144783          	lbu	a5,1(s0)
    8000c332:	c789                	beqz	a5,8000c33c <addr_unaligned+0x3aa>
    8000c334:	6418                	ld	a4,8(s0)
    8000c336:	4799                	li	a5,6
    8000c338:	00f70c63          	beq	a4,a5,8000c350 <addr_unaligned+0x3be>
    8000c33c:	00010517          	auipc	a0,0x10
    8000c340:	7dc50513          	add	a0,a0,2012 # 8001cb18 <__func__.1+0x320>
    8000c344:	41f0e0ef          	jal	8001af62 <printf>
    8000c348:	02900513          	li	a0,41
    8000c34c:	2e90d0ef          	jal	80019e34 <putchar>
    8000c350:	4529                	li	a0,10
    8000c352:	2e30d0ef          	jal	80019e34 <putchar>
    8000c356:	c489                	beqz	s1,8000c360 <addr_unaligned+0x3ce>
    8000c358:	00144783          	lbu	a5,1(s0)
    8000c35c:	4481                	li	s1,0
    8000c35e:	e7e9                	bnez	a5,8000c428 <addr_unaligned+0x496>
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );

    //store double word地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    8000c360:	0ff0000f          	fence
    8000c364:	4785                	li	a5,1
    8000c366:	00f41023          	sh	a5,0(s0)
    8000c36a:	00031797          	auipc	a5,0x31
    8000c36e:	cc07bf23          	sd	zero,-802(a5) # 8003d048 <excpt+0x38>
    8000c372:	0ff0000f          	fence
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8000c376:	01393023          	sd	s3,0(s2)
    sd(vaddr_f,value);
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    8000c37a:	08200593          	li	a1,130
    8000c37e:	00013617          	auipc	a2,0x13
    8000c382:	e8a60613          	add	a2,a2,-374 # 8001f208 <__func__.1+0x2a10>
    8000c386:	00010517          	auipc	a0,0x10
    8000c38a:	77250513          	add	a0,a0,1906 # 8001caf8 <__func__.1+0x300>
    8000c38e:	3d50e0ef          	jal	8001af62 <printf>
    8000c392:	00144783          	lbu	a5,1(s0)
    8000c396:	00010597          	auipc	a1,0x10
    8000c39a:	73a58593          	add	a1,a1,1850 # 8001cad0 <__func__.1+0x2d8>
    8000c39e:	c789                	beqz	a5,8000c3a8 <addr_unaligned+0x416>
    8000c3a0:	6418                	ld	a4,8(s0)
    8000c3a2:	4799                	li	a5,6
    8000c3a4:	10f70063          	beq	a4,a5,8000c4a4 <addr_unaligned+0x512>
    8000c3a8:	00010517          	auipc	a0,0x10
    8000c3ac:	76850513          	add	a0,a0,1896 # 8001cb10 <__func__.1+0x318>
    8000c3b0:	3b30e0ef          	jal	8001af62 <printf>
    8000c3b4:	00144783          	lbu	a5,1(s0)
    8000c3b8:	c789                	beqz	a5,8000c3c2 <addr_unaligned+0x430>
    8000c3ba:	6418                	ld	a4,8(s0)
    8000c3bc:	4799                	li	a5,6
    8000c3be:	00f70c63          	beq	a4,a5,8000c3d6 <addr_unaligned+0x444>
    8000c3c2:	00010517          	auipc	a0,0x10
    8000c3c6:	75650513          	add	a0,a0,1878 # 8001cb18 <__func__.1+0x320>
    8000c3ca:	3990e0ef          	jal	8001af62 <printf>
    8000c3ce:	02900513          	li	a0,41
    8000c3d2:	2630d0ef          	jal	80019e34 <putchar>
    8000c3d6:	4529                	li	a0,10
    8000c3d8:	25d0d0ef          	jal	80019e34 <putchar>
    8000c3dc:	c0a1                	beqz	s1,8000c41c <addr_unaligned+0x48a>
    8000c3de:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );

    TEST_END();
    8000c3e2:	00010597          	auipc	a1,0x10
    8000c3e6:	6ee58593          	add	a1,a1,1774 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    8000c3ea:	c491                	beqz	s1,8000c3f6 <addr_unaligned+0x464>
    8000c3ec:	6418                	ld	a4,8(s0)
    8000c3ee:	4799                	li	a5,6
    8000c3f0:	0cf70963          	beq	a4,a5,8000c4c2 <addr_unaligned+0x530>
    8000c3f4:	4481                	li	s1,0
    TEST_END();
    8000c3f6:	00010517          	auipc	a0,0x10
    8000c3fa:	78250513          	add	a0,a0,1922 # 8001cb78 <__func__.1+0x380>
    8000c3fe:	3650e0ef          	jal	8001af62 <printf>
    8000c402:	4511                	li	a0,4
    8000c404:	edaf40ef          	jal	80000ade <goto_priv>
    8000c408:	f1ff40ef          	jal	80001326 <reset_state>

    8000c40c:	70a2                	ld	ra,40(sp)
    8000c40e:	7402                	ld	s0,32(sp)
    8000c410:	6942                	ld	s2,16(sp)
    8000c412:	69a2                	ld	s3,8(sp)
    8000c414:	8526                	mv	a0,s1
    8000c416:	64e2                	ld	s1,24(sp)
    8000c418:	6145                	add	sp,sp,48
    8000c41a:	8082                	ret
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    8000c41c:	4481                	li	s1,0
    TEST_END();
    8000c41e:	00010597          	auipc	a1,0x10
    8000c422:	6b258593          	add	a1,a1,1714 # 8001cad0 <__func__.1+0x2d8>
    8000c426:	bfc1                	j	8000c3f6 <addr_unaligned+0x464>
    TEST_ASSERT("store word address is not aligned result in a sam",         
    8000c428:	6404                	ld	s1,8(s0)
    8000c42a:	14e9                	add	s1,s1,-6
    8000c42c:	0014b493          	seqz	s1,s1
    8000c430:	bf05                	j	8000c360 <addr_unaligned+0x3ce>
    TEST_ASSERT("store half address is not aligned result in a sam",         
    8000c432:	6404                	ld	s1,8(s0)
    8000c434:	14e9                	add	s1,s1,-6
    8000c436:	0014b493          	seqz	s1,s1
    8000c43a:	b545                	j	8000c2da <addr_unaligned+0x348>
    TEST_ASSERT("load double word address is not aligned result in a lam",         
    8000c43c:	6404                	ld	s1,8(s0)
    8000c43e:	14f1                	add	s1,s1,-4
    8000c440:	0014b493          	seqz	s1,s1
    8000c444:	b34d                	j	8000c1e6 <addr_unaligned+0x254>
    TEST_ASSERT("load word address is not aligned result in a lam",         
    8000c446:	6404                	ld	s1,8(s0)
    8000c448:	14f1                	add	s1,s1,-4
    8000c44a:	0014b493          	seqz	s1,s1
    8000c44e:	bb01                	j	8000c15e <addr_unaligned+0x1cc>
    TEST_ASSERT(" load half address is not aligned result in a lam",         
    8000c450:	6404                	ld	s1,8(s0)
    8000c452:	14f1                	add	s1,s1,-4
    8000c454:	0014b493          	seqz	s1,s1
    8000c458:	b9bd                	j	8000c0d6 <addr_unaligned+0x144>
    TEST_ASSERT("load byte address is not aligned successful",         
    8000c45a:	00010517          	auipc	a0,0x10
    8000c45e:	6be50513          	add	a0,a0,1726 # 8001cb18 <__func__.1+0x320>
    8000c462:	3010e0ef          	jal	8001af62 <printf>
    8000c466:	02900513          	li	a0,41
    8000c46a:	1cb0d0ef          	jal	80019e34 <putchar>
    8000c46e:	bed1                	j	8000c042 <addr_unaligned+0xb0>
    TEST_ASSERT("store byte address is not aligned successful",         
    8000c470:	00010517          	auipc	a0,0x10
    8000c474:	6a850513          	add	a0,a0,1704 # 8001cb18 <__func__.1+0x320>
    8000c478:	2eb0e0ef          	jal	8001af62 <printf>
    8000c47c:	02900513          	li	a0,41
    8000c480:	1b50d0ef          	jal	80019e34 <putchar>
    8000c484:	bb7d                	j	8000c242 <addr_unaligned+0x2b0>
    TEST_ASSERT("load double word address is not aligned result in a lam",         
    8000c486:	00010597          	auipc	a1,0x10
    8000c48a:	63a58593          	add	a1,a1,1594 # 8001cac0 <__func__.1+0x2c8>
    8000c48e:	bb21                	j	8000c1a6 <addr_unaligned+0x214>
    TEST_ASSERT("store half address is not aligned result in a sam",         
    8000c490:	00010597          	auipc	a1,0x10
    8000c494:	63058593          	add	a1,a1,1584 # 8001cac0 <__func__.1+0x2c8>
    8000c498:	b509                	j	8000c29a <addr_unaligned+0x308>
    TEST_ASSERT("store word address is not aligned result in a sam",         
    8000c49a:	00010597          	auipc	a1,0x10
    8000c49e:	62658593          	add	a1,a1,1574 # 8001cac0 <__func__.1+0x2c8>
    8000c4a2:	b541                	j	8000c322 <addr_unaligned+0x390>
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    8000c4a4:	00010597          	auipc	a1,0x10
    8000c4a8:	61c58593          	add	a1,a1,1564 # 8001cac0 <__func__.1+0x2c8>
    8000c4ac:	bdf5                	j	8000c3a8 <addr_unaligned+0x416>
    TEST_ASSERT(" load half address is not aligned result in a lam",         
    8000c4ae:	00010597          	auipc	a1,0x10
    8000c4b2:	61258593          	add	a1,a1,1554 # 8001cac0 <__func__.1+0x2c8>
    8000c4b6:	bef9                	j	8000c094 <addr_unaligned+0x102>
    TEST_ASSERT("load word address is not aligned result in a lam",         
    8000c4b8:	00010597          	auipc	a1,0x10
    8000c4bc:	60858593          	add	a1,a1,1544 # 8001cac0 <__func__.1+0x2c8>
    8000c4c0:	b9b9                	j	8000c11e <addr_unaligned+0x18c>
    TEST_END();
    8000c4c2:	00010597          	auipc	a1,0x10
    8000c4c6:	5fe58593          	add	a1,a1,1534 # 8001cac0 <__func__.1+0x2c8>
    8000c4ca:	b735                	j	8000c3f6 <addr_unaligned+0x464>

000000008000c4cc <illegal_except_1>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool illegal_except_1() {
    8000c4cc:	1101                	add	sp,sp,-32

    TEST_START();
    8000c4ce:	0000f597          	auipc	a1,0xf
    8000c4d2:	63a58593          	add	a1,a1,1594 # 8001bb08 <__func__.13>
    8000c4d6:	00010517          	auipc	a0,0x10
    8000c4da:	60a50513          	add	a0,a0,1546 # 8001cae0 <__func__.1+0x2e8>
bool illegal_except_1() {
    8000c4de:	ec06                	sd	ra,24(sp)
    8000c4e0:	e822                	sd	s0,16(sp)
    8000c4e2:	e426                	sd	s1,8(sp)
    TEST_START();
    8000c4e4:	27f0e0ef          	jal	8001af62 <printf>
    8000c4e8:	4529                	li	a0,10
    8000c4ea:	14b0d0ef          	jal	80019e34 <putchar>

    TEST_SETUP_EXCEPT();
    8000c4ee:	0ff0000f          	fence
    8000c4f2:	4785                	li	a5,1
    8000c4f4:	00031417          	auipc	s0,0x31
    8000c4f8:	b1c40413          	add	s0,s0,-1252 # 8003d010 <excpt>
    8000c4fc:	00f41023          	sh	a5,0(s0)
    8000c500:	00031797          	auipc	a5,0x31
    8000c504:	b407b423          	sd	zero,-1208(a5) # 8003d048 <excpt+0x38>
    8000c508:	0ff0000f          	fence
    //     excpt.triggered == true &&
    //     excpt.cause == CAUSE_ILI
    // ); 

    //当前权限满足最低CSR访问权限，CSR写行为，但访问的CSR只读
    goto_priv(PRIV_M);
    8000c50c:	4511                	li	a0,4
    8000c50e:	dd0f40ef          	jal	80000ade <goto_priv>
    CSRW(CSR_MCONFIGPTR,0xfff);
    8000c512:	6785                	lui	a5,0x1
    8000c514:	37fd                	addw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8000c516:	f1579073          	csrw	0xf15,a5
    TEST_ASSERT("write csr which is read-only leads to illegal instruction interrupt",
    8000c51a:	08200593          	li	a1,130
    8000c51e:	00013617          	auipc	a2,0x13
    8000c522:	d2a60613          	add	a2,a2,-726 # 8001f248 <__func__.1+0x2a50>
    8000c526:	00010517          	auipc	a0,0x10
    8000c52a:	5d250513          	add	a0,a0,1490 # 8001caf8 <__func__.1+0x300>
    8000c52e:	2350e0ef          	jal	8001af62 <printf>
    8000c532:	00144783          	lbu	a5,1(s0)
    8000c536:	00010597          	auipc	a1,0x10
    8000c53a:	59a58593          	add	a1,a1,1434 # 8001cad0 <__func__.1+0x2d8>
    8000c53e:	c789                	beqz	a5,8000c548 <illegal_except_1+0x7c>
    8000c540:	6418                	ld	a4,8(s0)
    8000c542:	4789                	li	a5,2
    8000c544:	10f70e63          	beq	a4,a5,8000c660 <illegal_except_1+0x194>
    8000c548:	00010517          	auipc	a0,0x10
    8000c54c:	5c850513          	add	a0,a0,1480 # 8001cb10 <__func__.1+0x318>
    8000c550:	2130e0ef          	jal	8001af62 <printf>
    8000c554:	00144783          	lbu	a5,1(s0)
    8000c558:	c789                	beqz	a5,8000c562 <illegal_except_1+0x96>
    8000c55a:	6418                	ld	a4,8(s0)
    8000c55c:	4789                	li	a5,2
    8000c55e:	00f70c63          	beq	a4,a5,8000c576 <illegal_except_1+0xaa>
    8000c562:	00010517          	auipc	a0,0x10
    8000c566:	5b650513          	add	a0,a0,1462 # 8001cb18 <__func__.1+0x320>
    8000c56a:	1f90e0ef          	jal	8001af62 <printf>
    8000c56e:	02900513          	li	a0,41
    8000c572:	0c30d0ef          	jal	80019e34 <putchar>
    8000c576:	4529                	li	a0,10
    8000c578:	0bd0d0ef          	jal	80019e34 <putchar>
    8000c57c:	00144783          	lbu	a5,1(s0)
    8000c580:	4481                	li	s1,0
    8000c582:	c789                	beqz	a5,8000c58c <illegal_except_1+0xc0>
    8000c584:	6404                	ld	s1,8(s0)
    8000c586:	14f9                	add	s1,s1,-2
    8000c588:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_ILI 
    ); 


    //当前权限不满足最低CSR访问权限
    goto_priv(PRIV_HS);
    8000c58c:	450d                	li	a0,3
    8000c58e:	d50f40ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000c592:	0ff0000f          	fence
    8000c596:	4785                	li	a5,1
    8000c598:	00f41023          	sh	a5,0(s0)
    8000c59c:	00031797          	auipc	a5,0x31
    8000c5a0:	aa07b623          	sd	zero,-1364(a5) # 8003d048 <excpt+0x38>
    8000c5a4:	0ff0000f          	fence
    CSRR(CSR_MIE);
    8000c5a8:	304027f3          	csrr	a5,mie
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    8000c5ac:	08200593          	li	a1,130
    8000c5b0:	00013617          	auipc	a2,0x13
    8000c5b4:	ce060613          	add	a2,a2,-800 # 8001f290 <__func__.1+0x2a98>
    8000c5b8:	00010517          	auipc	a0,0x10
    8000c5bc:	54050513          	add	a0,a0,1344 # 8001caf8 <__func__.1+0x300>
    8000c5c0:	1a30e0ef          	jal	8001af62 <printf>
    8000c5c4:	00144783          	lbu	a5,1(s0)
    8000c5c8:	00010597          	auipc	a1,0x10
    8000c5cc:	50858593          	add	a1,a1,1288 # 8001cad0 <__func__.1+0x2d8>
    8000c5d0:	c789                	beqz	a5,8000c5da <illegal_except_1+0x10e>
    8000c5d2:	6418                	ld	a4,8(s0)
    8000c5d4:	4789                	li	a5,2
    8000c5d6:	08f70063          	beq	a4,a5,8000c656 <illegal_except_1+0x18a>
    8000c5da:	00010517          	auipc	a0,0x10
    8000c5de:	53650513          	add	a0,a0,1334 # 8001cb10 <__func__.1+0x318>
    8000c5e2:	1810e0ef          	jal	8001af62 <printf>
    8000c5e6:	00144783          	lbu	a5,1(s0)
    8000c5ea:	c789                	beqz	a5,8000c5f4 <illegal_except_1+0x128>
    8000c5ec:	6418                	ld	a4,8(s0)
    8000c5ee:	4789                	li	a5,2
    8000c5f0:	00f70c63          	beq	a4,a5,8000c608 <illegal_except_1+0x13c>
    8000c5f4:	00010517          	auipc	a0,0x10
    8000c5f8:	52450513          	add	a0,a0,1316 # 8001cb18 <__func__.1+0x320>
    8000c5fc:	1670e0ef          	jal	8001af62 <printf>
    8000c600:	02900513          	li	a0,41
    8000c604:	0310d0ef          	jal	80019e34 <putchar>
    8000c608:	4529                	li	a0,10
    8000c60a:	02b0d0ef          	jal	80019e34 <putchar>
    8000c60e:	cc95                	beqz	s1,8000c64a <illegal_except_1+0x17e>
    8000c610:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000c614:	00010597          	auipc	a1,0x10
    8000c618:	4bc58593          	add	a1,a1,1212 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    8000c61c:	c491                	beqz	s1,8000c628 <illegal_except_1+0x15c>
    8000c61e:	6418                	ld	a4,8(s0)
    8000c620:	4789                	li	a5,2
    8000c622:	04f70463          	beq	a4,a5,8000c66a <illegal_except_1+0x19e>
    8000c626:	4481                	li	s1,0
    TEST_END();
    8000c628:	00010517          	auipc	a0,0x10
    8000c62c:	55050513          	add	a0,a0,1360 # 8001cb78 <__func__.1+0x380>
    8000c630:	1330e0ef          	jal	8001af62 <printf>
    8000c634:	4511                	li	a0,4
    8000c636:	ca8f40ef          	jal	80000ade <goto_priv>
    8000c63a:	cedf40ef          	jal	80001326 <reset_state>

}
    8000c63e:	60e2                	ld	ra,24(sp)
    8000c640:	6442                	ld	s0,16(sp)
    8000c642:	8526                	mv	a0,s1
    8000c644:	64a2                	ld	s1,8(sp)
    8000c646:	6105                	add	sp,sp,32
    8000c648:	8082                	ret
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    8000c64a:	4481                	li	s1,0
    TEST_END();
    8000c64c:	00010597          	auipc	a1,0x10
    8000c650:	48458593          	add	a1,a1,1156 # 8001cad0 <__func__.1+0x2d8>
    8000c654:	bfd1                	j	8000c628 <illegal_except_1+0x15c>
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    8000c656:	00010597          	auipc	a1,0x10
    8000c65a:	46a58593          	add	a1,a1,1130 # 8001cac0 <__func__.1+0x2c8>
    8000c65e:	bfb5                	j	8000c5da <illegal_except_1+0x10e>
    TEST_ASSERT("write csr which is read-only leads to illegal instruction interrupt",
    8000c660:	00010597          	auipc	a1,0x10
    8000c664:	46058593          	add	a1,a1,1120 # 8001cac0 <__func__.1+0x2c8>
    8000c668:	b5c5                	j	8000c548 <illegal_except_1+0x7c>
    TEST_END();
    8000c66a:	00010597          	auipc	a1,0x10
    8000c66e:	45658593          	add	a1,a1,1110 # 8001cac0 <__func__.1+0x2c8>
    8000c672:	bf5d                	j	8000c628 <illegal_except_1+0x15c>

000000008000c674 <illegal_except_2>:

bool illegal_except_2() {
    8000c674:	1101                	add	sp,sp,-32

    TEST_START();
    8000c676:	0000f597          	auipc	a1,0xf
    8000c67a:	4aa58593          	add	a1,a1,1194 # 8001bb20 <__func__.12>
    8000c67e:	00010517          	auipc	a0,0x10
    8000c682:	46250513          	add	a0,a0,1122 # 8001cae0 <__func__.1+0x2e8>
bool illegal_except_2() {
    8000c686:	ec06                	sd	ra,24(sp)
    8000c688:	e822                	sd	s0,16(sp)
    8000c68a:	e426                	sd	s1,8(sp)
    TEST_START();
    8000c68c:	0d70e0ef          	jal	8001af62 <printf>
    8000c690:	4529                	li	a0,10
    8000c692:	7a20d0ef          	jal	80019e34 <putchar>


    //特殊情况，没有开启虚存，在S模式下访问Satp寄存器，但被sstatus.TVM拦截
    goto_priv(PRIV_M);
    8000c696:	4511                	li	a0,4
    8000c698:	c46f40ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    8000c69c:	001007b7          	lui	a5,0x100
    8000c6a0:	3007a073          	csrs	mstatus,a5
    CSRW(satp, 0x0);    //关闭虚存
    8000c6a4:	18005073          	csrw	satp,0
    goto_priv(PRIV_HS);
    8000c6a8:	450d                	li	a0,3
    8000c6aa:	c34f40ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000c6ae:	0ff0000f          	fence
    8000c6b2:	4785                	li	a5,1
    8000c6b4:	00031417          	auipc	s0,0x31
    8000c6b8:	95c40413          	add	s0,s0,-1700 # 8003d010 <excpt>
    8000c6bc:	00f41023          	sh	a5,0(s0)
    8000c6c0:	00031797          	auipc	a5,0x31
    8000c6c4:	9807b423          	sd	zero,-1656(a5) # 8003d048 <excpt+0x38>
    8000c6c8:	0ff0000f          	fence
    CSRR(satp);
    8000c6cc:	180027f3          	csrr	a5,satp
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    8000c6d0:	08200593          	li	a1,130
    8000c6d4:	00013617          	auipc	a2,0x13
    8000c6d8:	c1460613          	add	a2,a2,-1004 # 8001f2e8 <__func__.1+0x2af0>
    8000c6dc:	00010517          	auipc	a0,0x10
    8000c6e0:	41c50513          	add	a0,a0,1052 # 8001caf8 <__func__.1+0x300>
    8000c6e4:	07f0e0ef          	jal	8001af62 <printf>
    8000c6e8:	00144783          	lbu	a5,1(s0)
    8000c6ec:	00010597          	auipc	a1,0x10
    8000c6f0:	3e458593          	add	a1,a1,996 # 8001cad0 <__func__.1+0x2d8>
    8000c6f4:	c789                	beqz	a5,8000c6fe <illegal_except_2+0x8a>
    8000c6f6:	6418                	ld	a4,8(s0)
    8000c6f8:	4789                	li	a5,2
    8000c6fa:	06f70e63          	beq	a4,a5,8000c776 <illegal_except_2+0x102>
    8000c6fe:	00010517          	auipc	a0,0x10
    8000c702:	41250513          	add	a0,a0,1042 # 8001cb10 <__func__.1+0x318>
    8000c706:	05d0e0ef          	jal	8001af62 <printf>
    8000c70a:	00144783          	lbu	a5,1(s0)
    8000c70e:	c789                	beqz	a5,8000c718 <illegal_except_2+0xa4>
    8000c710:	6418                	ld	a4,8(s0)
    8000c712:	4789                	li	a5,2
    8000c714:	00f70c63          	beq	a4,a5,8000c72c <illegal_except_2+0xb8>
    8000c718:	00010517          	auipc	a0,0x10
    8000c71c:	40050513          	add	a0,a0,1024 # 8001cb18 <__func__.1+0x320>
    8000c720:	0430e0ef          	jal	8001af62 <printf>
    8000c724:	02900513          	li	a0,41
    8000c728:	70c0d0ef          	jal	80019e34 <putchar>
    8000c72c:	4529                	li	a0,10
    8000c72e:	7060d0ef          	jal	80019e34 <putchar>
    8000c732:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000c736:	00010597          	auipc	a1,0x10
    8000c73a:	39a58593          	add	a1,a1,922 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    8000c73e:	c491                	beqz	s1,8000c74a <illegal_except_2+0xd6>
    8000c740:	6418                	ld	a4,8(s0)
    8000c742:	4789                	li	a5,2
    8000c744:	02f70463          	beq	a4,a5,8000c76c <illegal_except_2+0xf8>
    8000c748:	4481                	li	s1,0
    TEST_END();
    8000c74a:	00010517          	auipc	a0,0x10
    8000c74e:	42e50513          	add	a0,a0,1070 # 8001cb78 <__func__.1+0x380>
    8000c752:	0110e0ef          	jal	8001af62 <printf>
    8000c756:	4511                	li	a0,4
    8000c758:	b86f40ef          	jal	80000ade <goto_priv>
    8000c75c:	bcbf40ef          	jal	80001326 <reset_state>

}
    8000c760:	60e2                	ld	ra,24(sp)
    8000c762:	6442                	ld	s0,16(sp)
    8000c764:	8526                	mv	a0,s1
    8000c766:	64a2                	ld	s1,8(sp)
    8000c768:	6105                	add	sp,sp,32
    8000c76a:	8082                	ret
    TEST_END();
    8000c76c:	00010597          	auipc	a1,0x10
    8000c770:	35458593          	add	a1,a1,852 # 8001cac0 <__func__.1+0x2c8>
    8000c774:	bfd9                	j	8000c74a <illegal_except_2+0xd6>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    8000c776:	00010597          	auipc	a1,0x10
    8000c77a:	34a58593          	add	a1,a1,842 # 8001cac0 <__func__.1+0x2c8>
    8000c77e:	b741                	j	8000c6fe <illegal_except_2+0x8a>

000000008000c780 <illegal_except_3>:

bool illegal_except_3() {
    8000c780:	1101                	add	sp,sp,-32

    TEST_START();
    8000c782:	0000f597          	auipc	a1,0xf
    8000c786:	3b658593          	add	a1,a1,950 # 8001bb38 <__func__.11>
    8000c78a:	00010517          	auipc	a0,0x10
    8000c78e:	35650513          	add	a0,a0,854 # 8001cae0 <__func__.1+0x2e8>
bool illegal_except_3() {
    8000c792:	ec06                	sd	ra,24(sp)
    8000c794:	e822                	sd	s0,16(sp)
    8000c796:	e426                	sd	s1,8(sp)
    TEST_START();
    8000c798:	7ca0e0ef          	jal	8001af62 <printf>
    8000c79c:	4529                	li	a0,10
    8000c79e:	6960d0ef          	jal	80019e34 <putchar>

    TEST_SETUP_EXCEPT();
    8000c7a2:	0ff0000f          	fence
    8000c7a6:	00031417          	auipc	s0,0x31
    8000c7aa:	86a40413          	add	s0,s0,-1942 # 8003d010 <excpt>
    8000c7ae:	4485                	li	s1,1
    8000c7b0:	00941023          	sh	s1,0(s0)
    8000c7b4:	00031797          	auipc	a5,0x31
    8000c7b8:	8807ba23          	sd	zero,-1900(a5) # 8003d048 <excpt+0x38>
    8000c7bc:	0ff0000f          	fence

    //执行CSR写指令尝试将非支持值写入WLRL字段时
    goto_priv(PRIV_HS);
    8000c7c0:	450d                	li	a0,3
    8000c7c2:	b1cf40ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000c7c6:	0ff0000f          	fence
    8000c7ca:	00031797          	auipc	a5,0x31
    8000c7ce:	8607bf23          	sd	zero,-1922(a5) # 8003d048 <excpt+0x38>
    8000c7d2:	00941023          	sh	s1,0(s0)
    8000c7d6:	0ff0000f          	fence
    CSRW(CSR_SCAUSE,0xfff);     //不支持的值写入将不会写入，没报错
    8000c7da:	6785                	lui	a5,0x1
    8000c7dc:	37fd                	addw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8000c7de:	14279073          	csrw	scause,a5
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    8000c7e2:	08200593          	li	a1,130
    8000c7e6:	00013617          	auipc	a2,0x13
    8000c7ea:	b6260613          	add	a2,a2,-1182 # 8001f348 <__func__.1+0x2b50>
    8000c7ee:	00010517          	auipc	a0,0x10
    8000c7f2:	30a50513          	add	a0,a0,778 # 8001caf8 <__func__.1+0x300>
    8000c7f6:	76c0e0ef          	jal	8001af62 <printf>
    8000c7fa:	00144783          	lbu	a5,1(s0)
    8000c7fe:	00010597          	auipc	a1,0x10
    8000c802:	2d258593          	add	a1,a1,722 # 8001cad0 <__func__.1+0x2d8>
    8000c806:	c789                	beqz	a5,8000c810 <illegal_except_3+0x90>
    8000c808:	6418                	ld	a4,8(s0)
    8000c80a:	4789                	li	a5,2
    8000c80c:	06f70e63          	beq	a4,a5,8000c888 <illegal_except_3+0x108>
    8000c810:	00010517          	auipc	a0,0x10
    8000c814:	30050513          	add	a0,a0,768 # 8001cb10 <__func__.1+0x318>
    8000c818:	74a0e0ef          	jal	8001af62 <printf>
    8000c81c:	00144783          	lbu	a5,1(s0)
    8000c820:	c789                	beqz	a5,8000c82a <illegal_except_3+0xaa>
    8000c822:	6418                	ld	a4,8(s0)
    8000c824:	4789                	li	a5,2
    8000c826:	00f70c63          	beq	a4,a5,8000c83e <illegal_except_3+0xbe>
    8000c82a:	00010517          	auipc	a0,0x10
    8000c82e:	2ee50513          	add	a0,a0,750 # 8001cb18 <__func__.1+0x320>
    8000c832:	7300e0ef          	jal	8001af62 <printf>
    8000c836:	02900513          	li	a0,41
    8000c83a:	5fa0d0ef          	jal	80019e34 <putchar>
    8000c83e:	4529                	li	a0,10
    8000c840:	5f40d0ef          	jal	80019e34 <putchar>
    8000c844:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 


    TEST_END();
    8000c848:	00010597          	auipc	a1,0x10
    8000c84c:	28858593          	add	a1,a1,648 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    8000c850:	c491                	beqz	s1,8000c85c <illegal_except_3+0xdc>
    8000c852:	6418                	ld	a4,8(s0)
    8000c854:	4789                	li	a5,2
    8000c856:	02f70463          	beq	a4,a5,8000c87e <illegal_except_3+0xfe>
    8000c85a:	4481                	li	s1,0
    TEST_END();
    8000c85c:	00010517          	auipc	a0,0x10
    8000c860:	31c50513          	add	a0,a0,796 # 8001cb78 <__func__.1+0x380>
    8000c864:	6fe0e0ef          	jal	8001af62 <printf>
    8000c868:	4511                	li	a0,4
    8000c86a:	a74f40ef          	jal	80000ade <goto_priv>
    8000c86e:	ab9f40ef          	jal	80001326 <reset_state>
}
    8000c872:	60e2                	ld	ra,24(sp)
    8000c874:	6442                	ld	s0,16(sp)
    8000c876:	8526                	mv	a0,s1
    8000c878:	64a2                	ld	s1,8(sp)
    8000c87a:	6105                	add	sp,sp,32
    8000c87c:	8082                	ret
    TEST_END();
    8000c87e:	00010597          	auipc	a1,0x10
    8000c882:	24258593          	add	a1,a1,578 # 8001cac0 <__func__.1+0x2c8>
    8000c886:	bfd9                	j	8000c85c <illegal_except_3+0xdc>
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    8000c888:	00010597          	auipc	a1,0x10
    8000c88c:	23858593          	add	a1,a1,568 # 8001cac0 <__func__.1+0x2c8>
    8000c890:	b741                	j	8000c810 <illegal_except_3+0x90>

000000008000c892 <illegal_except_4>:



bool illegal_except_4() {
    8000c892:	1101                	add	sp,sp,-32

    TEST_START();
    8000c894:	0000f597          	auipc	a1,0xf
    8000c898:	2bc58593          	add	a1,a1,700 # 8001bb50 <__func__.10>
    8000c89c:	00010517          	auipc	a0,0x10
    8000c8a0:	24450513          	add	a0,a0,580 # 8001cae0 <__func__.1+0x2e8>
bool illegal_except_4() {
    8000c8a4:	ec06                	sd	ra,24(sp)
    8000c8a6:	e822                	sd	s0,16(sp)
    8000c8a8:	e426                	sd	s1,8(sp)
    8000c8aa:	e04a                	sd	s2,0(sp)
    TEST_START();
    8000c8ac:	6b60e0ef          	jal	8001af62 <printf>
    8000c8b0:	4529                	li	a0,10
    8000c8b2:	5820d0ef          	jal	80019e34 <putchar>

    //M模式下可以访问任何CSR
    goto_priv(PRIV_M);
    8000c8b6:	4511                	li	a0,4
    8000c8b8:	a26f40ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000c8bc:	0ff0000f          	fence
    8000c8c0:	4785                	li	a5,1
    8000c8c2:	00030417          	auipc	s0,0x30
    8000c8c6:	74e40413          	add	s0,s0,1870 # 8003d010 <excpt>
    8000c8ca:	00f41023          	sh	a5,0(s0)
    8000c8ce:	00030797          	auipc	a5,0x30
    8000c8d2:	7607bd23          	sd	zero,1914(a5) # 8003d048 <excpt+0x38>
    8000c8d6:	0ff0000f          	fence
    CSRR(CSR_MCAUSE);
    8000c8da:	342027f3          	csrr	a5,mcause
    CSRR(CSR_SCAUSE);
    8000c8de:	142027f3          	csrr	a5,scause
    CSRR(CSR_VSCAUSE);
    8000c8e2:	242027f3          	csrr	a5,vscause
    TEST_ASSERT("m mode access any csr successful",
    8000c8e6:	08200593          	li	a1,130
    8000c8ea:	00013617          	auipc	a2,0x13
    8000c8ee:	a9e60613          	add	a2,a2,-1378 # 8001f388 <__func__.1+0x2b90>
    8000c8f2:	00010517          	auipc	a0,0x10
    8000c8f6:	20650513          	add	a0,a0,518 # 8001caf8 <__func__.1+0x300>
    8000c8fa:	6680e0ef          	jal	8001af62 <printf>
    8000c8fe:	00144783          	lbu	a5,1(s0)
    8000c902:	00010597          	auipc	a1,0x10
    8000c906:	1be58593          	add	a1,a1,446 # 8001cac0 <__func__.1+0x2c8>
    8000c90a:	c789                	beqz	a5,8000c914 <illegal_except_4+0x82>
    8000c90c:	00010597          	auipc	a1,0x10
    8000c910:	1c458593          	add	a1,a1,452 # 8001cad0 <__func__.1+0x2d8>
    8000c914:	00010517          	auipc	a0,0x10
    8000c918:	1fc50513          	add	a0,a0,508 # 8001cb10 <__func__.1+0x318>
    8000c91c:	6460e0ef          	jal	8001af62 <printf>
    8000c920:	00144783          	lbu	a5,1(s0)
    8000c924:	16079b63          	bnez	a5,8000ca9a <illegal_except_4+0x208>
    8000c928:	4529                	li	a0,10
    8000c92a:	50a0d0ef          	jal	80019e34 <putchar>
    8000c92e:	00144903          	lbu	s2,1(s0)
        excpt.triggered == false
    ); 

    reset_state();
    8000c932:	9f5f40ef          	jal	80001326 <reset_state>

    //尝试访问高特权级别的任何CSR
    goto_priv(PRIV_HS);
    8000c936:	450d                	li	a0,3
    8000c938:	9a6f40ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000c93c:	0ff0000f          	fence
    8000c940:	4785                	li	a5,1
    8000c942:	00f41023          	sh	a5,0(s0)
    8000c946:	00030797          	auipc	a5,0x30
    8000c94a:	7007b123          	sd	zero,1794(a5) # 8003d048 <excpt+0x38>
    8000c94e:	0ff0000f          	fence
    CSRR(CSR_MCAUSE);
    8000c952:	342027f3          	csrr	a5,mcause
    TEST_ASSERT("hs mode access higher privilege csr leads to ili",
    8000c956:	08200593          	li	a1,130
    8000c95a:	00013617          	auipc	a2,0x13
    8000c95e:	a5660613          	add	a2,a2,-1450 # 8001f3b0 <__func__.1+0x2bb8>
    8000c962:	00010517          	auipc	a0,0x10
    8000c966:	19650513          	add	a0,a0,406 # 8001caf8 <__func__.1+0x300>
    8000c96a:	5f80e0ef          	jal	8001af62 <printf>
    8000c96e:	00144783          	lbu	a5,1(s0)
    8000c972:	00010597          	auipc	a1,0x10
    8000c976:	15e58593          	add	a1,a1,350 # 8001cad0 <__func__.1+0x2d8>
    8000c97a:	c789                	beqz	a5,8000c984 <illegal_except_4+0xf2>
    8000c97c:	6418                	ld	a4,8(s0)
    8000c97e:	4789                	li	a5,2
    8000c980:	12f70d63          	beq	a4,a5,8000caba <illegal_except_4+0x228>
    8000c984:	00010517          	auipc	a0,0x10
    8000c988:	18c50513          	add	a0,a0,396 # 8001cb10 <__func__.1+0x318>
    8000c98c:	5d60e0ef          	jal	8001af62 <printf>
    8000c990:	00144783          	lbu	a5,1(s0)
    8000c994:	c789                	beqz	a5,8000c99e <illegal_except_4+0x10c>
    8000c996:	6418                	ld	a4,8(s0)
    8000c998:	4789                	li	a5,2
    8000c99a:	00f70c63          	beq	a4,a5,8000c9b2 <illegal_except_4+0x120>
    8000c99e:	00010517          	auipc	a0,0x10
    8000c9a2:	17a50513          	add	a0,a0,378 # 8001cb18 <__func__.1+0x320>
    8000c9a6:	5bc0e0ef          	jal	8001af62 <printf>
    8000c9aa:	02900513          	li	a0,41
    8000c9ae:	4860d0ef          	jal	80019e34 <putchar>
    8000c9b2:	4529                	li	a0,10
    8000c9b4:	4800d0ef          	jal	80019e34 <putchar>
    8000c9b8:	4481                	li	s1,0
    8000c9ba:	00091563          	bnez	s2,8000c9c4 <illegal_except_4+0x132>
    8000c9be:	00144783          	lbu	a5,1(s0)
    8000c9c2:	e7f9                	bnez	a5,8000ca90 <illegal_except_4+0x1fe>
        excpt.triggered == true &&
        excpt.cause==CAUSE_ILI
    ); 

    goto_priv(PRIV_VS);
    8000c9c4:	4509                	li	a0,2
    8000c9c6:	918f40ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000c9ca:	0ff0000f          	fence
    8000c9ce:	4785                	li	a5,1
    8000c9d0:	00f41023          	sh	a5,0(s0)
    8000c9d4:	00030797          	auipc	a5,0x30
    8000c9d8:	6607ba23          	sd	zero,1652(a5) # 8003d048 <excpt+0x38>
    8000c9dc:	0ff0000f          	fence
    CSRR(CSR_MIDELEG);
    8000c9e0:	303027f3          	csrr	a5,mideleg
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    8000c9e4:	08200593          	li	a1,130
    8000c9e8:	00013617          	auipc	a2,0x13
    8000c9ec:	a0060613          	add	a2,a2,-1536 # 8001f3e8 <__func__.1+0x2bf0>
    8000c9f0:	00010517          	auipc	a0,0x10
    8000c9f4:	10850513          	add	a0,a0,264 # 8001caf8 <__func__.1+0x300>
    8000c9f8:	56a0e0ef          	jal	8001af62 <printf>
    8000c9fc:	00144783          	lbu	a5,1(s0)
    8000ca00:	00010597          	auipc	a1,0x10
    8000ca04:	0d058593          	add	a1,a1,208 # 8001cad0 <__func__.1+0x2d8>
    8000ca08:	c789                	beqz	a5,8000ca12 <illegal_except_4+0x180>
    8000ca0a:	6418                	ld	a4,8(s0)
    8000ca0c:	4789                	li	a5,2
    8000ca0e:	0af70163          	beq	a4,a5,8000cab0 <illegal_except_4+0x21e>
    8000ca12:	00010517          	auipc	a0,0x10
    8000ca16:	0fe50513          	add	a0,a0,254 # 8001cb10 <__func__.1+0x318>
    8000ca1a:	5480e0ef          	jal	8001af62 <printf>
    8000ca1e:	00144783          	lbu	a5,1(s0)
    8000ca22:	c789                	beqz	a5,8000ca2c <illegal_except_4+0x19a>
    8000ca24:	6418                	ld	a4,8(s0)
    8000ca26:	4789                	li	a5,2
    8000ca28:	00f70c63          	beq	a4,a5,8000ca40 <illegal_except_4+0x1ae>
    8000ca2c:	00010517          	auipc	a0,0x10
    8000ca30:	0ec50513          	add	a0,a0,236 # 8001cb18 <__func__.1+0x320>
    8000ca34:	52e0e0ef          	jal	8001af62 <printf>
    8000ca38:	02900513          	li	a0,41
    8000ca3c:	3f80d0ef          	jal	80019e34 <putchar>
    8000ca40:	4529                	li	a0,10
    8000ca42:	3f20d0ef          	jal	80019e34 <putchar>
    8000ca46:	cc9d                	beqz	s1,8000ca84 <illegal_except_4+0x1f2>
    8000ca48:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause==CAUSE_ILI
    );

    TEST_END();
    8000ca4c:	00010597          	auipc	a1,0x10
    8000ca50:	08458593          	add	a1,a1,132 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    8000ca54:	c491                	beqz	s1,8000ca60 <illegal_except_4+0x1ce>
    8000ca56:	6418                	ld	a4,8(s0)
    8000ca58:	4789                	li	a5,2
    8000ca5a:	06f70563          	beq	a4,a5,8000cac4 <illegal_except_4+0x232>
    8000ca5e:	4481                	li	s1,0
    TEST_END();
    8000ca60:	00010517          	auipc	a0,0x10
    8000ca64:	11850513          	add	a0,a0,280 # 8001cb78 <__func__.1+0x380>
    8000ca68:	4fa0e0ef          	jal	8001af62 <printf>
    8000ca6c:	4511                	li	a0,4
    8000ca6e:	870f40ef          	jal	80000ade <goto_priv>
    8000ca72:	8b5f40ef          	jal	80001326 <reset_state>
}
    8000ca76:	60e2                	ld	ra,24(sp)
    8000ca78:	6442                	ld	s0,16(sp)
    8000ca7a:	6902                	ld	s2,0(sp)
    8000ca7c:	8526                	mv	a0,s1
    8000ca7e:	64a2                	ld	s1,8(sp)
    8000ca80:	6105                	add	sp,sp,32
    8000ca82:	8082                	ret
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    8000ca84:	4481                	li	s1,0
    TEST_END();
    8000ca86:	00010597          	auipc	a1,0x10
    8000ca8a:	04a58593          	add	a1,a1,74 # 8001cad0 <__func__.1+0x2d8>
    8000ca8e:	bfc9                	j	8000ca60 <illegal_except_4+0x1ce>
    TEST_ASSERT("hs mode access higher privilege csr leads to ili",
    8000ca90:	6404                	ld	s1,8(s0)
    8000ca92:	14f9                	add	s1,s1,-2
    8000ca94:	0014b493          	seqz	s1,s1
    8000ca98:	b735                	j	8000c9c4 <illegal_except_4+0x132>
    TEST_ASSERT("m mode access any csr successful",
    8000ca9a:	00010517          	auipc	a0,0x10
    8000ca9e:	07e50513          	add	a0,a0,126 # 8001cb18 <__func__.1+0x320>
    8000caa2:	4c00e0ef          	jal	8001af62 <printf>
    8000caa6:	02900513          	li	a0,41
    8000caaa:	38a0d0ef          	jal	80019e34 <putchar>
    8000caae:	bdad                	j	8000c928 <illegal_except_4+0x96>
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    8000cab0:	00010597          	auipc	a1,0x10
    8000cab4:	01058593          	add	a1,a1,16 # 8001cac0 <__func__.1+0x2c8>
    8000cab8:	bfa9                	j	8000ca12 <illegal_except_4+0x180>
    TEST_ASSERT("hs mode access higher privilege csr leads to ili",
    8000caba:	00010597          	auipc	a1,0x10
    8000cabe:	00658593          	add	a1,a1,6 # 8001cac0 <__func__.1+0x2c8>
    8000cac2:	b5c9                	j	8000c984 <illegal_except_4+0xf2>
    TEST_END();
    8000cac4:	00010597          	auipc	a1,0x10
    8000cac8:	ffc58593          	add	a1,a1,-4 # 8001cac0 <__func__.1+0x2c8>
    8000cacc:	bf51                	j	8000ca60 <illegal_except_4+0x1ce>

000000008000cace <illegal_except_5>:
        excpt.cause==CAUSE_ILI
    );
*/


bool illegal_except_5() {
    8000cace:	1101                	add	sp,sp,-32

    TEST_START();
    8000cad0:	0000f597          	auipc	a1,0xf
    8000cad4:	09858593          	add	a1,a1,152 # 8001bb68 <__func__.9>
    8000cad8:	00010517          	auipc	a0,0x10
    8000cadc:	00850513          	add	a0,a0,8 # 8001cae0 <__func__.1+0x2e8>
bool illegal_except_5() {
    8000cae0:	ec06                	sd	ra,24(sp)
    8000cae2:	e822                	sd	s0,16(sp)
    8000cae4:	e426                	sd	s1,8(sp)
    TEST_START();
    8000cae6:	47c0e0ef          	jal	8001af62 <printf>
    8000caea:	4529                	li	a0,10
    8000caec:	3480d0ef          	jal	80019e34 <putchar>
    //TVM=1，在S模式下，读写satp 寄存器
    goto_priv(PRIV_M);
    8000caf0:	4511                	li	a0,4
    8000caf2:	fedf30ef          	jal	80000ade <goto_priv>
    CSRW(satp, 0x0);
    8000caf6:	18005073          	csrw	satp,0
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    8000cafa:	001007b7          	lui	a5,0x100
    8000cafe:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    8000cb02:	450d                	li	a0,3
    8000cb04:	fdbf30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000cb08:	0ff0000f          	fence
    8000cb0c:	4785                	li	a5,1
    8000cb0e:	00030417          	auipc	s0,0x30
    8000cb12:	50240413          	add	s0,s0,1282 # 8003d010 <excpt>
    8000cb16:	00f41023          	sh	a5,0(s0)
    8000cb1a:	00030797          	auipc	a5,0x30
    8000cb1e:	5207b723          	sd	zero,1326(a5) # 8003d048 <excpt+0x38>
    8000cb22:	0ff0000f          	fence
    CSRR(satp);
    8000cb26:	180027f3          	csrr	a5,satp
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    8000cb2a:	08200593          	li	a1,130
    8000cb2e:	00012617          	auipc	a2,0x12
    8000cb32:	7ba60613          	add	a2,a2,1978 # 8001f2e8 <__func__.1+0x2af0>
    8000cb36:	00010517          	auipc	a0,0x10
    8000cb3a:	fc250513          	add	a0,a0,-62 # 8001caf8 <__func__.1+0x300>
    8000cb3e:	4240e0ef          	jal	8001af62 <printf>
    8000cb42:	00144783          	lbu	a5,1(s0)
    8000cb46:	00010597          	auipc	a1,0x10
    8000cb4a:	f8a58593          	add	a1,a1,-118 # 8001cad0 <__func__.1+0x2d8>
    8000cb4e:	c789                	beqz	a5,8000cb58 <illegal_except_5+0x8a>
    8000cb50:	6418                	ld	a4,8(s0)
    8000cb52:	4789                	li	a5,2
    8000cb54:	06f70e63          	beq	a4,a5,8000cbd0 <illegal_except_5+0x102>
    8000cb58:	00010517          	auipc	a0,0x10
    8000cb5c:	fb850513          	add	a0,a0,-72 # 8001cb10 <__func__.1+0x318>
    8000cb60:	4020e0ef          	jal	8001af62 <printf>
    8000cb64:	00144783          	lbu	a5,1(s0)
    8000cb68:	c789                	beqz	a5,8000cb72 <illegal_except_5+0xa4>
    8000cb6a:	6418                	ld	a4,8(s0)
    8000cb6c:	4789                	li	a5,2
    8000cb6e:	00f70c63          	beq	a4,a5,8000cb86 <illegal_except_5+0xb8>
    8000cb72:	00010517          	auipc	a0,0x10
    8000cb76:	fa650513          	add	a0,a0,-90 # 8001cb18 <__func__.1+0x320>
    8000cb7a:	3e80e0ef          	jal	8001af62 <printf>
    8000cb7e:	02900513          	li	a0,41
    8000cb82:	2b20d0ef          	jal	80019e34 <putchar>
    8000cb86:	4529                	li	a0,10
    8000cb88:	2ac0d0ef          	jal	80019e34 <putchar>
    8000cb8c:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000cb90:	00010597          	auipc	a1,0x10
    8000cb94:	f4058593          	add	a1,a1,-192 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    8000cb98:	c491                	beqz	s1,8000cba4 <illegal_except_5+0xd6>
    8000cb9a:	6418                	ld	a4,8(s0)
    8000cb9c:	4789                	li	a5,2
    8000cb9e:	02f70463          	beq	a4,a5,8000cbc6 <illegal_except_5+0xf8>
    8000cba2:	4481                	li	s1,0
    TEST_END();
    8000cba4:	00010517          	auipc	a0,0x10
    8000cba8:	fd450513          	add	a0,a0,-44 # 8001cb78 <__func__.1+0x380>
    8000cbac:	3b60e0ef          	jal	8001af62 <printf>
    8000cbb0:	4511                	li	a0,4
    8000cbb2:	f2df30ef          	jal	80000ade <goto_priv>
    8000cbb6:	f70f40ef          	jal	80001326 <reset_state>
}
    8000cbba:	60e2                	ld	ra,24(sp)
    8000cbbc:	6442                	ld	s0,16(sp)
    8000cbbe:	8526                	mv	a0,s1
    8000cbc0:	64a2                	ld	s1,8(sp)
    8000cbc2:	6105                	add	sp,sp,32
    8000cbc4:	8082                	ret
    TEST_END();
    8000cbc6:	00010597          	auipc	a1,0x10
    8000cbca:	efa58593          	add	a1,a1,-262 # 8001cac0 <__func__.1+0x2c8>
    8000cbce:	bfd9                	j	8000cba4 <illegal_except_5+0xd6>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    8000cbd0:	00010597          	auipc	a1,0x10
    8000cbd4:	ef058593          	add	a1,a1,-272 # 8001cac0 <__func__.1+0x2c8>
    8000cbd8:	b741                	j	8000cb58 <illegal_except_5+0x8a>

000000008000cbda <illegal_except_6>:

bool illegal_except_6() {
    8000cbda:	1101                	add	sp,sp,-32

    TEST_START();
    8000cbdc:	0000f597          	auipc	a1,0xf
    8000cbe0:	fa458593          	add	a1,a1,-92 # 8001bb80 <__func__.8>
    8000cbe4:	00010517          	auipc	a0,0x10
    8000cbe8:	efc50513          	add	a0,a0,-260 # 8001cae0 <__func__.1+0x2e8>
bool illegal_except_6() {
    8000cbec:	ec06                	sd	ra,24(sp)
    8000cbee:	e822                	sd	s0,16(sp)
    8000cbf0:	e426                	sd	s1,8(sp)
    TEST_START();
    8000cbf2:	3700e0ef          	jal	8001af62 <printf>
    8000cbf6:	4529                	li	a0,10
    8000cbf8:	23c0d0ef          	jal	80019e34 <putchar>
    //当mstatus.TVM=1时，在HS模式下执行时尝试读取或写入hgatp
    goto_priv(PRIV_M);
    8000cbfc:	4511                	li	a0,4
    8000cbfe:	ee1f30ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    8000cc02:	001007b7          	lui	a5,0x100
    8000cc06:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    8000cc0a:	450d                	li	a0,3
    8000cc0c:	ed3f30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000cc10:	0ff0000f          	fence
    8000cc14:	4785                	li	a5,1
    8000cc16:	00030417          	auipc	s0,0x30
    8000cc1a:	3fa40413          	add	s0,s0,1018 # 8003d010 <excpt>
    8000cc1e:	00f41023          	sh	a5,0(s0)
    8000cc22:	00030797          	auipc	a5,0x30
    8000cc26:	4207b323          	sd	zero,1062(a5) # 8003d048 <excpt+0x38>
    8000cc2a:	0ff0000f          	fence
    CSRW(CSR_HGATP,(uint64_t)-1);         //没报错
    8000cc2e:	57fd                	li	a5,-1
    8000cc30:	68079073          	csrw	hgatp,a5
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    8000cc34:	08200593          	li	a1,130
    8000cc38:	00012617          	auipc	a2,0x12
    8000cc3c:	7e860613          	add	a2,a2,2024 # 8001f420 <__func__.1+0x2c28>
    8000cc40:	00010517          	auipc	a0,0x10
    8000cc44:	eb850513          	add	a0,a0,-328 # 8001caf8 <__func__.1+0x300>
    8000cc48:	31a0e0ef          	jal	8001af62 <printf>
    8000cc4c:	00144783          	lbu	a5,1(s0)
    8000cc50:	00010597          	auipc	a1,0x10
    8000cc54:	e8058593          	add	a1,a1,-384 # 8001cad0 <__func__.1+0x2d8>
    8000cc58:	c789                	beqz	a5,8000cc62 <illegal_except_6+0x88>
    8000cc5a:	6418                	ld	a4,8(s0)
    8000cc5c:	4789                	li	a5,2
    8000cc5e:	06f70e63          	beq	a4,a5,8000ccda <illegal_except_6+0x100>
    8000cc62:	00010517          	auipc	a0,0x10
    8000cc66:	eae50513          	add	a0,a0,-338 # 8001cb10 <__func__.1+0x318>
    8000cc6a:	2f80e0ef          	jal	8001af62 <printf>
    8000cc6e:	00144783          	lbu	a5,1(s0)
    8000cc72:	c789                	beqz	a5,8000cc7c <illegal_except_6+0xa2>
    8000cc74:	6418                	ld	a4,8(s0)
    8000cc76:	4789                	li	a5,2
    8000cc78:	00f70c63          	beq	a4,a5,8000cc90 <illegal_except_6+0xb6>
    8000cc7c:	00010517          	auipc	a0,0x10
    8000cc80:	e9c50513          	add	a0,a0,-356 # 8001cb18 <__func__.1+0x320>
    8000cc84:	2de0e0ef          	jal	8001af62 <printf>
    8000cc88:	02900513          	li	a0,41
    8000cc8c:	1a80d0ef          	jal	80019e34 <putchar>
    8000cc90:	4529                	li	a0,10
    8000cc92:	1a20d0ef          	jal	80019e34 <putchar>
    8000cc96:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000cc9a:	00010597          	auipc	a1,0x10
    8000cc9e:	e3658593          	add	a1,a1,-458 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    8000cca2:	c491                	beqz	s1,8000ccae <illegal_except_6+0xd4>
    8000cca4:	6418                	ld	a4,8(s0)
    8000cca6:	4789                	li	a5,2
    8000cca8:	02f70463          	beq	a4,a5,8000ccd0 <illegal_except_6+0xf6>
    8000ccac:	4481                	li	s1,0
    TEST_END();
    8000ccae:	00010517          	auipc	a0,0x10
    8000ccb2:	eca50513          	add	a0,a0,-310 # 8001cb78 <__func__.1+0x380>
    8000ccb6:	2ac0e0ef          	jal	8001af62 <printf>
    8000ccba:	4511                	li	a0,4
    8000ccbc:	e23f30ef          	jal	80000ade <goto_priv>
    8000ccc0:	e66f40ef          	jal	80001326 <reset_state>
}
    8000ccc4:	60e2                	ld	ra,24(sp)
    8000ccc6:	6442                	ld	s0,16(sp)
    8000ccc8:	8526                	mv	a0,s1
    8000ccca:	64a2                	ld	s1,8(sp)
    8000cccc:	6105                	add	sp,sp,32
    8000ccce:	8082                	ret
    TEST_END();
    8000ccd0:	00010597          	auipc	a1,0x10
    8000ccd4:	df058593          	add	a1,a1,-528 # 8001cac0 <__func__.1+0x2c8>
    8000ccd8:	bfd9                	j	8000ccae <illegal_except_6+0xd4>
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    8000ccda:	00010597          	auipc	a1,0x10
    8000ccde:	de658593          	add	a1,a1,-538 # 8001cac0 <__func__.1+0x2c8>
    8000cce2:	b741                	j	8000cc62 <illegal_except_6+0x88>

000000008000cce4 <illegal_except_7>:

bool illegal_except_7() {
    8000cce4:	1101                	add	sp,sp,-32

    TEST_START();
    8000cce6:	0000f597          	auipc	a1,0xf
    8000ccea:	eb258593          	add	a1,a1,-334 # 8001bb98 <__func__.7>
    8000ccee:	00010517          	auipc	a0,0x10
    8000ccf2:	df250513          	add	a0,a0,-526 # 8001cae0 <__func__.1+0x2e8>
bool illegal_except_7() {
    8000ccf6:	ec06                	sd	ra,24(sp)
    8000ccf8:	e822                	sd	s0,16(sp)
    8000ccfa:	e426                	sd	s1,8(sp)
    TEST_START();
    8000ccfc:	2660e0ef          	jal	8001af62 <printf>
    8000cd00:	4529                	li	a0,10
    8000cd02:	1320d0ef          	jal	80019e34 <putchar>

    //TVM=1，在S模式下，执行SFENCE.VMA或SINVAL.VMA指令
    goto_priv(PRIV_M);
    8000cd06:	4511                	li	a0,4
    8000cd08:	dd7f30ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    8000cd0c:	001007b7          	lui	a5,0x100
    8000cd10:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_HSTATUS,HSTATUS_VTVM);
    8000cd14:	6007a073          	csrs	hstatus,a5

    goto_priv(PRIV_HS); 
    8000cd18:	450d                	li	a0,3
    8000cd1a:	dc5f30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000cd1e:	0ff0000f          	fence
    8000cd22:	4785                	li	a5,1
    8000cd24:	00030417          	auipc	s0,0x30
    8000cd28:	2ec40413          	add	s0,s0,748 # 8003d010 <excpt>
    8000cd2c:	00f41023          	sh	a5,0(s0)
    8000cd30:	00030797          	auipc	a5,0x30
    8000cd34:	3007bc23          	sd	zero,792(a5) # 8003d048 <excpt+0x38>
    8000cd38:	0ff0000f          	fence
    asm volatile(
    8000cd3c:	12000073          	sfence.vma
    sfence_vma();
    TEST_ASSERT("s mode sfence.vma leads to ili when tvm=1",
    8000cd40:	08200593          	li	a1,130
    8000cd44:	00012617          	auipc	a2,0x12
    8000cd48:	74460613          	add	a2,a2,1860 # 8001f488 <__func__.1+0x2c90>
    8000cd4c:	00010517          	auipc	a0,0x10
    8000cd50:	dac50513          	add	a0,a0,-596 # 8001caf8 <__func__.1+0x300>
    8000cd54:	20e0e0ef          	jal	8001af62 <printf>
    8000cd58:	00144783          	lbu	a5,1(s0)
    8000cd5c:	00010597          	auipc	a1,0x10
    8000cd60:	d7458593          	add	a1,a1,-652 # 8001cad0 <__func__.1+0x2d8>
    8000cd64:	c789                	beqz	a5,8000cd6e <illegal_except_7+0x8a>
    8000cd66:	6418                	ld	a4,8(s0)
    8000cd68:	4789                	li	a5,2
    8000cd6a:	10f70e63          	beq	a4,a5,8000ce86 <illegal_except_7+0x1a2>
    8000cd6e:	00010517          	auipc	a0,0x10
    8000cd72:	da250513          	add	a0,a0,-606 # 8001cb10 <__func__.1+0x318>
    8000cd76:	1ec0e0ef          	jal	8001af62 <printf>
    8000cd7a:	00144783          	lbu	a5,1(s0)
    8000cd7e:	c789                	beqz	a5,8000cd88 <illegal_except_7+0xa4>
    8000cd80:	6418                	ld	a4,8(s0)
    8000cd82:	4789                	li	a5,2
    8000cd84:	00f70c63          	beq	a4,a5,8000cd9c <illegal_except_7+0xb8>
    8000cd88:	00010517          	auipc	a0,0x10
    8000cd8c:	d9050513          	add	a0,a0,-624 # 8001cb18 <__func__.1+0x320>
    8000cd90:	1d20e0ef          	jal	8001af62 <printf>
    8000cd94:	02900513          	li	a0,41
    8000cd98:	09c0d0ef          	jal	80019e34 <putchar>
    8000cd9c:	4529                	li	a0,10
    8000cd9e:	0960d0ef          	jal	80019e34 <putchar>
    8000cda2:	00144783          	lbu	a5,1(s0)
    8000cda6:	4481                	li	s1,0
    8000cda8:	c789                	beqz	a5,8000cdb2 <illegal_except_7+0xce>
    8000cdaa:	6404                	ld	s1,8(s0)
    8000cdac:	14f9                	add	s1,s1,-2
    8000cdae:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    8000cdb2:	450d                	li	a0,3
    8000cdb4:	d2bf30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000cdb8:	0ff0000f          	fence
    8000cdbc:	4785                	li	a5,1
    8000cdbe:	00f41023          	sh	a5,0(s0)
    8000cdc2:	00030797          	auipc	a5,0x30
    8000cdc6:	2807b323          	sd	zero,646(a5) # 8003d048 <excpt+0x38>
    8000cdca:	0ff0000f          	fence
    asm volatile(
    8000cdce:	16000073          	.4byte	0x16000073
    Sinval_vma();
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    8000cdd2:	08200593          	li	a1,130
    8000cdd6:	00012617          	auipc	a2,0x12
    8000cdda:	6e260613          	add	a2,a2,1762 # 8001f4b8 <__func__.1+0x2cc0>
    8000cdde:	00010517          	auipc	a0,0x10
    8000cde2:	d1a50513          	add	a0,a0,-742 # 8001caf8 <__func__.1+0x300>
    8000cde6:	17c0e0ef          	jal	8001af62 <printf>
    8000cdea:	00144783          	lbu	a5,1(s0)
    8000cdee:	00010597          	auipc	a1,0x10
    8000cdf2:	ce258593          	add	a1,a1,-798 # 8001cad0 <__func__.1+0x2d8>
    8000cdf6:	c789                	beqz	a5,8000ce00 <illegal_except_7+0x11c>
    8000cdf8:	6418                	ld	a4,8(s0)
    8000cdfa:	4789                	li	a5,2
    8000cdfc:	08f70063          	beq	a4,a5,8000ce7c <illegal_except_7+0x198>
    8000ce00:	00010517          	auipc	a0,0x10
    8000ce04:	d1050513          	add	a0,a0,-752 # 8001cb10 <__func__.1+0x318>
    8000ce08:	15a0e0ef          	jal	8001af62 <printf>
    8000ce0c:	00144783          	lbu	a5,1(s0)
    8000ce10:	c789                	beqz	a5,8000ce1a <illegal_except_7+0x136>
    8000ce12:	6418                	ld	a4,8(s0)
    8000ce14:	4789                	li	a5,2
    8000ce16:	00f70c63          	beq	a4,a5,8000ce2e <illegal_except_7+0x14a>
    8000ce1a:	00010517          	auipc	a0,0x10
    8000ce1e:	cfe50513          	add	a0,a0,-770 # 8001cb18 <__func__.1+0x320>
    8000ce22:	1400e0ef          	jal	8001af62 <printf>
    8000ce26:	02900513          	li	a0,41
    8000ce2a:	00a0d0ef          	jal	80019e34 <putchar>
    8000ce2e:	4529                	li	a0,10
    8000ce30:	0040d0ef          	jal	80019e34 <putchar>
    8000ce34:	cc95                	beqz	s1,8000ce70 <illegal_except_7+0x18c>
    8000ce36:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000ce3a:	00010597          	auipc	a1,0x10
    8000ce3e:	c9658593          	add	a1,a1,-874 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    8000ce42:	c491                	beqz	s1,8000ce4e <illegal_except_7+0x16a>
    8000ce44:	6418                	ld	a4,8(s0)
    8000ce46:	4789                	li	a5,2
    8000ce48:	04f70463          	beq	a4,a5,8000ce90 <illegal_except_7+0x1ac>
    8000ce4c:	4481                	li	s1,0
    TEST_END();
    8000ce4e:	00010517          	auipc	a0,0x10
    8000ce52:	d2a50513          	add	a0,a0,-726 # 8001cb78 <__func__.1+0x380>
    8000ce56:	10c0e0ef          	jal	8001af62 <printf>
    8000ce5a:	4511                	li	a0,4
    8000ce5c:	c83f30ef          	jal	80000ade <goto_priv>
    8000ce60:	cc6f40ef          	jal	80001326 <reset_state>
}
    8000ce64:	60e2                	ld	ra,24(sp)
    8000ce66:	6442                	ld	s0,16(sp)
    8000ce68:	8526                	mv	a0,s1
    8000ce6a:	64a2                	ld	s1,8(sp)
    8000ce6c:	6105                	add	sp,sp,32
    8000ce6e:	8082                	ret
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    8000ce70:	4481                	li	s1,0
    TEST_END();
    8000ce72:	00010597          	auipc	a1,0x10
    8000ce76:	c5e58593          	add	a1,a1,-930 # 8001cad0 <__func__.1+0x2d8>
    8000ce7a:	bfd1                	j	8000ce4e <illegal_except_7+0x16a>
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    8000ce7c:	00010597          	auipc	a1,0x10
    8000ce80:	c4458593          	add	a1,a1,-956 # 8001cac0 <__func__.1+0x2c8>
    8000ce84:	bfb5                	j	8000ce00 <illegal_except_7+0x11c>
    TEST_ASSERT("s mode sfence.vma leads to ili when tvm=1",
    8000ce86:	00010597          	auipc	a1,0x10
    8000ce8a:	c3a58593          	add	a1,a1,-966 # 8001cac0 <__func__.1+0x2c8>
    8000ce8e:	b5c5                	j	8000cd6e <illegal_except_7+0x8a>
    TEST_END();
    8000ce90:	00010597          	auipc	a1,0x10
    8000ce94:	c3058593          	add	a1,a1,-976 # 8001cac0 <__func__.1+0x2c8>
    8000ce98:	bf5d                	j	8000ce4e <illegal_except_7+0x16a>

000000008000ce9a <illegal_except_8>:


bool illegal_except_8() {
    8000ce9a:	1141                	add	sp,sp,-16

    TEST_START();
    8000ce9c:	0000f597          	auipc	a1,0xf
    8000cea0:	d1458593          	add	a1,a1,-748 # 8001bbb0 <__func__.6>
    8000cea4:	00010517          	auipc	a0,0x10
    8000cea8:	c3c50513          	add	a0,a0,-964 # 8001cae0 <__func__.1+0x2e8>
bool illegal_except_8() {
    8000ceac:	e406                	sd	ra,8(sp)
    8000ceae:	e022                	sd	s0,0(sp)
    TEST_START();
    8000ceb0:	0b20e0ef          	jal	8001af62 <printf>
    8000ceb4:	4529                	li	a0,10
    8000ceb6:	77f0c0ef          	jal	80019e34 <putchar>
    //M模式下（无论mstatus.TVM的值如何）执行HFENCE.GVMA
    goto_priv(PRIV_M);
    8000ceba:	4511                	li	a0,4
    8000cebc:	c23f30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000cec0:	0ff0000f          	fence
    8000cec4:	4785                	li	a5,1
    8000cec6:	00030417          	auipc	s0,0x30
    8000ceca:	14a40413          	add	s0,s0,330 # 8003d010 <excpt>
    8000cece:	00f41023          	sh	a5,0(s0)
    8000ced2:	00030797          	auipc	a5,0x30
    8000ced6:	1607bb23          	sd	zero,374(a5) # 8003d048 <excpt+0x38>
    8000ceda:	0ff0000f          	fence
    asm volatile(
    8000cede:	62000073          	.4byte	0x62000073
    hfence_gvma();
    TEST_ASSERT("m mode hfence.gvma successful",
    8000cee2:	08200593          	li	a1,130
    8000cee6:	00012617          	auipc	a2,0x12
    8000ceea:	60260613          	add	a2,a2,1538 # 8001f4e8 <__func__.1+0x2cf0>
    8000ceee:	00010517          	auipc	a0,0x10
    8000cef2:	c0a50513          	add	a0,a0,-1014 # 8001caf8 <__func__.1+0x300>
    8000cef6:	06c0e0ef          	jal	8001af62 <printf>
    8000cefa:	00144783          	lbu	a5,1(s0)
    8000cefe:	00010597          	auipc	a1,0x10
    8000cf02:	bc258593          	add	a1,a1,-1086 # 8001cac0 <__func__.1+0x2c8>
    8000cf06:	c789                	beqz	a5,8000cf10 <illegal_except_8+0x76>
    8000cf08:	00010597          	auipc	a1,0x10
    8000cf0c:	bc858593          	add	a1,a1,-1080 # 8001cad0 <__func__.1+0x2d8>
    8000cf10:	00010517          	auipc	a0,0x10
    8000cf14:	c0050513          	add	a0,a0,-1024 # 8001cb10 <__func__.1+0x318>
    8000cf18:	04a0e0ef          	jal	8001af62 <printf>
    8000cf1c:	00144783          	lbu	a5,1(s0)
    8000cf20:	e3b1                	bnez	a5,8000cf64 <illegal_except_8+0xca>
    8000cf22:	4529                	li	a0,10
    8000cf24:	7110c0ef          	jal	80019e34 <putchar>
    8000cf28:	00144783          	lbu	a5,1(s0)
    8000cf2c:	e795                	bnez	a5,8000cf58 <illegal_except_8+0xbe>
    8000cf2e:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    8000cf30:	00010597          	auipc	a1,0x10
    8000cf34:	b9058593          	add	a1,a1,-1136 # 8001cac0 <__func__.1+0x2c8>
    8000cf38:	00010517          	auipc	a0,0x10
    8000cf3c:	c4050513          	add	a0,a0,-960 # 8001cb78 <__func__.1+0x380>
    8000cf40:	0220e0ef          	jal	8001af62 <printf>
    8000cf44:	4511                	li	a0,4
    8000cf46:	b99f30ef          	jal	80000ade <goto_priv>
    8000cf4a:	bdcf40ef          	jal	80001326 <reset_state>
}
    8000cf4e:	60a2                	ld	ra,8(sp)
    8000cf50:	8522                	mv	a0,s0
    8000cf52:	6402                	ld	s0,0(sp)
    8000cf54:	0141                	add	sp,sp,16
    8000cf56:	8082                	ret
    TEST_ASSERT("m mode hfence.gvma successful",
    8000cf58:	4401                	li	s0,0
    TEST_END();
    8000cf5a:	00010597          	auipc	a1,0x10
    8000cf5e:	b7658593          	add	a1,a1,-1162 # 8001cad0 <__func__.1+0x2d8>
    8000cf62:	bfd9                	j	8000cf38 <illegal_except_8+0x9e>
    TEST_ASSERT("m mode hfence.gvma successful",
    8000cf64:	00010517          	auipc	a0,0x10
    8000cf68:	bb450513          	add	a0,a0,-1100 # 8001cb18 <__func__.1+0x320>
    8000cf6c:	7f70d0ef          	jal	8001af62 <printf>
    8000cf70:	02900513          	li	a0,41
    8000cf74:	6c10c0ef          	jal	80019e34 <putchar>
    8000cf78:	b76d                	j	8000cf22 <illegal_except_8+0x88>

000000008000cf7a <illegal_except_9>:

bool illegal_except_9() {
    8000cf7a:	1101                	add	sp,sp,-32

    TEST_START();
    8000cf7c:	0000f597          	auipc	a1,0xf
    8000cf80:	c4c58593          	add	a1,a1,-948 # 8001bbc8 <__func__.5>
    8000cf84:	00010517          	auipc	a0,0x10
    8000cf88:	b5c50513          	add	a0,a0,-1188 # 8001cae0 <__func__.1+0x2e8>
bool illegal_except_9() {
    8000cf8c:	ec06                	sd	ra,24(sp)
    8000cf8e:	e822                	sd	s0,16(sp)
    8000cf90:	e426                	sd	s1,8(sp)
    TEST_START();
    8000cf92:	7d10d0ef          	jal	8001af62 <printf>
    8000cf96:	4529                	li	a0,10
    8000cf98:	69d0c0ef          	jal	80019e34 <putchar>
    //HS模式下mstatus.TVM=0时执行HFENCE.GVMA
    goto_priv(PRIV_M);
    8000cf9c:	4511                	li	a0,4
    8000cf9e:	b41f30ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TVM);
    8000cfa2:	001007b7          	lui	a5,0x100
    8000cfa6:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_HS);
    8000cfaa:	450d                	li	a0,3
    8000cfac:	b33f30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000cfb0:	0ff0000f          	fence
    8000cfb4:	4785                	li	a5,1
    8000cfb6:	00030417          	auipc	s0,0x30
    8000cfba:	05a40413          	add	s0,s0,90 # 8003d010 <excpt>
    8000cfbe:	00f41023          	sh	a5,0(s0)
    8000cfc2:	00030797          	auipc	a5,0x30
    8000cfc6:	0807b323          	sd	zero,134(a5) # 8003d048 <excpt+0x38>
    8000cfca:	0ff0000f          	fence
    8000cfce:	62000073          	.4byte	0x62000073
    hfence_gvma();
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    8000cfd2:	08200593          	li	a1,130
    8000cfd6:	00012617          	auipc	a2,0x12
    8000cfda:	53260613          	add	a2,a2,1330 # 8001f508 <__func__.1+0x2d10>
    8000cfde:	00010517          	auipc	a0,0x10
    8000cfe2:	b1a50513          	add	a0,a0,-1254 # 8001caf8 <__func__.1+0x300>
    8000cfe6:	77d0d0ef          	jal	8001af62 <printf>
    8000cfea:	00144783          	lbu	a5,1(s0)
    8000cfee:	00010597          	auipc	a1,0x10
    8000cff2:	ad258593          	add	a1,a1,-1326 # 8001cac0 <__func__.1+0x2c8>
    8000cff6:	c789                	beqz	a5,8000d000 <illegal_except_9+0x86>
    8000cff8:	00010597          	auipc	a1,0x10
    8000cffc:	ad858593          	add	a1,a1,-1320 # 8001cad0 <__func__.1+0x2d8>
    8000d000:	00010517          	auipc	a0,0x10
    8000d004:	b1050513          	add	a0,a0,-1264 # 8001cb10 <__func__.1+0x318>
    8000d008:	75b0d0ef          	jal	8001af62 <printf>
    8000d00c:	00144783          	lbu	a5,1(s0)
    8000d010:	0e079363          	bnez	a5,8000d0f6 <illegal_except_9+0x17c>
    8000d014:	4529                	li	a0,10
    8000d016:	61f0c0ef          	jal	80019e34 <putchar>
        excpt.triggered == false
    ); 

    //mstatus.TVM=1时，在HS模式下执行HFENCE.GVMA
    goto_priv(PRIV_M);
    8000d01a:	4511                	li	a0,4
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    8000d01c:	00144483          	lbu	s1,1(s0)
    goto_priv(PRIV_M);
    8000d020:	abff30ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    8000d024:	001007b7          	lui	a5,0x100
    8000d028:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    8000d02c:	450d                	li	a0,3
    8000d02e:	ab1f30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000d032:	0ff0000f          	fence
    8000d036:	4785                	li	a5,1
    8000d038:	00f41023          	sh	a5,0(s0)
    8000d03c:	00030797          	auipc	a5,0x30
    8000d040:	0007b623          	sd	zero,12(a5) # 8003d048 <excpt+0x38>
    8000d044:	0ff0000f          	fence
    8000d048:	62000073          	.4byte	0x62000073
    hfence_gvma();
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    8000d04c:	08200593          	li	a1,130
    8000d050:	00012617          	auipc	a2,0x12
    8000d054:	4f060613          	add	a2,a2,1264 # 8001f540 <__func__.1+0x2d48>
    8000d058:	00010517          	auipc	a0,0x10
    8000d05c:	aa050513          	add	a0,a0,-1376 # 8001caf8 <__func__.1+0x300>
    8000d060:	7030d0ef          	jal	8001af62 <printf>
    8000d064:	00144783          	lbu	a5,1(s0)
    8000d068:	00010597          	auipc	a1,0x10
    8000d06c:	a6858593          	add	a1,a1,-1432 # 8001cad0 <__func__.1+0x2d8>
    8000d070:	c789                	beqz	a5,8000d07a <illegal_except_9+0x100>
    8000d072:	6418                	ld	a4,8(s0)
    8000d074:	4789                	li	a5,2
    8000d076:	08f70b63          	beq	a4,a5,8000d10c <illegal_except_9+0x192>
    8000d07a:	00010517          	auipc	a0,0x10
    8000d07e:	a9650513          	add	a0,a0,-1386 # 8001cb10 <__func__.1+0x318>
    8000d082:	6e10d0ef          	jal	8001af62 <printf>
    8000d086:	00144783          	lbu	a5,1(s0)
    8000d08a:	c789                	beqz	a5,8000d094 <illegal_except_9+0x11a>
    8000d08c:	6418                	ld	a4,8(s0)
    8000d08e:	4789                	li	a5,2
    8000d090:	00f70c63          	beq	a4,a5,8000d0a8 <illegal_except_9+0x12e>
    8000d094:	00010517          	auipc	a0,0x10
    8000d098:	a8450513          	add	a0,a0,-1404 # 8001cb18 <__func__.1+0x320>
    8000d09c:	6c70d0ef          	jal	8001af62 <printf>
    8000d0a0:	02900513          	li	a0,41
    8000d0a4:	5910c0ef          	jal	80019e34 <putchar>
    8000d0a8:	4529                	li	a0,10
    8000d0aa:	58b0c0ef          	jal	80019e34 <putchar>
    8000d0ae:	ec95                	bnez	s1,8000d0ea <illegal_except_9+0x170>
    8000d0b0:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000d0b4:	00010597          	auipc	a1,0x10
    8000d0b8:	a1c58593          	add	a1,a1,-1508 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    8000d0bc:	c491                	beqz	s1,8000d0c8 <illegal_except_9+0x14e>
    8000d0be:	6418                	ld	a4,8(s0)
    8000d0c0:	4789                	li	a5,2
    8000d0c2:	04f70a63          	beq	a4,a5,8000d116 <illegal_except_9+0x19c>
    8000d0c6:	4481                	li	s1,0
    TEST_END();
    8000d0c8:	00010517          	auipc	a0,0x10
    8000d0cc:	ab050513          	add	a0,a0,-1360 # 8001cb78 <__func__.1+0x380>
    8000d0d0:	6930d0ef          	jal	8001af62 <printf>
    8000d0d4:	4511                	li	a0,4
    8000d0d6:	a09f30ef          	jal	80000ade <goto_priv>
    8000d0da:	a4cf40ef          	jal	80001326 <reset_state>
}
    8000d0de:	60e2                	ld	ra,24(sp)
    8000d0e0:	6442                	ld	s0,16(sp)
    8000d0e2:	8526                	mv	a0,s1
    8000d0e4:	64a2                	ld	s1,8(sp)
    8000d0e6:	6105                	add	sp,sp,32
    8000d0e8:	8082                	ret
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    8000d0ea:	4481                	li	s1,0
    TEST_END();
    8000d0ec:	00010597          	auipc	a1,0x10
    8000d0f0:	9e458593          	add	a1,a1,-1564 # 8001cad0 <__func__.1+0x2d8>
    8000d0f4:	bfd1                	j	8000d0c8 <illegal_except_9+0x14e>
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    8000d0f6:	00010517          	auipc	a0,0x10
    8000d0fa:	a2250513          	add	a0,a0,-1502 # 8001cb18 <__func__.1+0x320>
    8000d0fe:	6650d0ef          	jal	8001af62 <printf>
    8000d102:	02900513          	li	a0,41
    8000d106:	52f0c0ef          	jal	80019e34 <putchar>
    8000d10a:	b729                	j	8000d014 <illegal_except_9+0x9a>
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    8000d10c:	00010597          	auipc	a1,0x10
    8000d110:	9b458593          	add	a1,a1,-1612 # 8001cac0 <__func__.1+0x2c8>
    8000d114:	b79d                	j	8000d07a <illegal_except_9+0x100>
    TEST_END();
    8000d116:	00010597          	auipc	a1,0x10
    8000d11a:	9aa58593          	add	a1,a1,-1622 # 8001cac0 <__func__.1+0x2c8>
    8000d11e:	b76d                	j	8000d0c8 <illegal_except_9+0x14e>

000000008000d120 <illegal_except_10>:

bool illegal_except_10() {
    8000d120:	1101                	add	sp,sp,-32

    TEST_START();
    8000d122:	0000f597          	auipc	a1,0xf
    8000d126:	abe58593          	add	a1,a1,-1346 # 8001bbe0 <__func__.4>
    8000d12a:	00010517          	auipc	a0,0x10
    8000d12e:	9b650513          	add	a0,a0,-1610 # 8001cae0 <__func__.1+0x2e8>
bool illegal_except_10() {
    8000d132:	ec06                	sd	ra,24(sp)
    8000d134:	e822                	sd	s0,16(sp)
    8000d136:	e426                	sd	s1,8(sp)
    TEST_START();
    8000d138:	62b0d0ef          	jal	8001af62 <printf>
    8000d13c:	4529                	li	a0,10
    8000d13e:	4f70c0ef          	jal	80019e34 <putchar>
    
    //mstatus.TVM=1，尝试在S模式或HS模式下执行SINVAL.VMA或HINVAL.GVMA
    goto_priv(PRIV_M);
    8000d142:	4511                	li	a0,4
    8000d144:	99bf30ef          	jal	80000ade <goto_priv>
    reset_state();
    8000d148:	9def40ef          	jal	80001326 <reset_state>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    8000d14c:	001007b7          	lui	a5,0x100
    8000d150:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    8000d154:	450d                	li	a0,3
    8000d156:	989f30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000d15a:	0ff0000f          	fence
    8000d15e:	4785                	li	a5,1
    8000d160:	00030417          	auipc	s0,0x30
    8000d164:	eb040413          	add	s0,s0,-336 # 8003d010 <excpt>
    8000d168:	00f41023          	sh	a5,0(s0)
    8000d16c:	00030797          	auipc	a5,0x30
    8000d170:	ec07be23          	sd	zero,-292(a5) # 8003d048 <excpt+0x38>
    8000d174:	0ff0000f          	fence
    asm volatile(
    8000d178:	16000073          	.4byte	0x16000073
    Sinval_vma();
    TEST_ASSERT("hs mode sinval.vma successful when mstatus.tvm=1",
    8000d17c:	08200593          	li	a1,130
    8000d180:	00012617          	auipc	a2,0x12
    8000d184:	3f860613          	add	a2,a2,1016 # 8001f578 <__func__.1+0x2d80>
    8000d188:	00010517          	auipc	a0,0x10
    8000d18c:	97050513          	add	a0,a0,-1680 # 8001caf8 <__func__.1+0x300>
    8000d190:	5d30d0ef          	jal	8001af62 <printf>
    8000d194:	00144783          	lbu	a5,1(s0)
    8000d198:	00010597          	auipc	a1,0x10
    8000d19c:	93858593          	add	a1,a1,-1736 # 8001cad0 <__func__.1+0x2d8>
    8000d1a0:	c789                	beqz	a5,8000d1aa <illegal_except_10+0x8a>
    8000d1a2:	6418                	ld	a4,8(s0)
    8000d1a4:	4789                	li	a5,2
    8000d1a6:	12f70563          	beq	a4,a5,8000d2d0 <illegal_except_10+0x1b0>
    8000d1aa:	00010517          	auipc	a0,0x10
    8000d1ae:	96650513          	add	a0,a0,-1690 # 8001cb10 <__func__.1+0x318>
    8000d1b2:	5b10d0ef          	jal	8001af62 <printf>
    8000d1b6:	00144783          	lbu	a5,1(s0)
    8000d1ba:	c789                	beqz	a5,8000d1c4 <illegal_except_10+0xa4>
    8000d1bc:	6418                	ld	a4,8(s0)
    8000d1be:	4789                	li	a5,2
    8000d1c0:	00f70c63          	beq	a4,a5,8000d1d8 <illegal_except_10+0xb8>
    8000d1c4:	00010517          	auipc	a0,0x10
    8000d1c8:	95450513          	add	a0,a0,-1708 # 8001cb18 <__func__.1+0x320>
    8000d1cc:	5970d0ef          	jal	8001af62 <printf>
    8000d1d0:	02900513          	li	a0,41
    8000d1d4:	4610c0ef          	jal	80019e34 <putchar>
    8000d1d8:	4529                	li	a0,10
    8000d1da:	45b0c0ef          	jal	80019e34 <putchar>
    8000d1de:	00144783          	lbu	a5,1(s0)
    8000d1e2:	4481                	li	s1,0
    8000d1e4:	c789                	beqz	a5,8000d1ee <illegal_except_10+0xce>
    8000d1e6:	6404                	ld	s1,8(s0)
    8000d1e8:	14f9                	add	s1,s1,-2
    8000d1ea:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_M);
    8000d1ee:	4511                	li	a0,4
    8000d1f0:	8eff30ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    8000d1f4:	001007b7          	lui	a5,0x100
    8000d1f8:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    8000d1fc:	450d                	li	a0,3
    8000d1fe:	8e1f30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000d202:	0ff0000f          	fence
    8000d206:	4785                	li	a5,1
    8000d208:	00f41023          	sh	a5,0(s0)
    8000d20c:	00030797          	auipc	a5,0x30
    8000d210:	e207be23          	sd	zero,-452(a5) # 8003d048 <excpt+0x38>
    8000d214:	0ff0000f          	fence
    asm volatile(
    8000d218:	66000073          	.4byte	0x66000073
    hinval_gvma();
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    8000d21c:	08200593          	li	a1,130
    8000d220:	00012617          	auipc	a2,0x12
    8000d224:	39060613          	add	a2,a2,912 # 8001f5b0 <__func__.1+0x2db8>
    8000d228:	00010517          	auipc	a0,0x10
    8000d22c:	8d050513          	add	a0,a0,-1840 # 8001caf8 <__func__.1+0x300>
    8000d230:	5330d0ef          	jal	8001af62 <printf>
    8000d234:	00144783          	lbu	a5,1(s0)
    8000d238:	00010597          	auipc	a1,0x10
    8000d23c:	89858593          	add	a1,a1,-1896 # 8001cad0 <__func__.1+0x2d8>
    8000d240:	c789                	beqz	a5,8000d24a <illegal_except_10+0x12a>
    8000d242:	6418                	ld	a4,8(s0)
    8000d244:	4789                	li	a5,2
    8000d246:	08f70063          	beq	a4,a5,8000d2c6 <illegal_except_10+0x1a6>
    8000d24a:	00010517          	auipc	a0,0x10
    8000d24e:	8c650513          	add	a0,a0,-1850 # 8001cb10 <__func__.1+0x318>
    8000d252:	5110d0ef          	jal	8001af62 <printf>
    8000d256:	00144783          	lbu	a5,1(s0)
    8000d25a:	c789                	beqz	a5,8000d264 <illegal_except_10+0x144>
    8000d25c:	6418                	ld	a4,8(s0)
    8000d25e:	4789                	li	a5,2
    8000d260:	00f70c63          	beq	a4,a5,8000d278 <illegal_except_10+0x158>
    8000d264:	00010517          	auipc	a0,0x10
    8000d268:	8b450513          	add	a0,a0,-1868 # 8001cb18 <__func__.1+0x320>
    8000d26c:	4f70d0ef          	jal	8001af62 <printf>
    8000d270:	02900513          	li	a0,41
    8000d274:	3c10c0ef          	jal	80019e34 <putchar>
    8000d278:	4529                	li	a0,10
    8000d27a:	3bb0c0ef          	jal	80019e34 <putchar>
    8000d27e:	cc95                	beqz	s1,8000d2ba <illegal_except_10+0x19a>
    8000d280:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000d284:	00010597          	auipc	a1,0x10
    8000d288:	84c58593          	add	a1,a1,-1972 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    8000d28c:	c491                	beqz	s1,8000d298 <illegal_except_10+0x178>
    8000d28e:	6418                	ld	a4,8(s0)
    8000d290:	4789                	li	a5,2
    8000d292:	04f70463          	beq	a4,a5,8000d2da <illegal_except_10+0x1ba>
    8000d296:	4481                	li	s1,0
    TEST_END();
    8000d298:	00010517          	auipc	a0,0x10
    8000d29c:	8e050513          	add	a0,a0,-1824 # 8001cb78 <__func__.1+0x380>
    8000d2a0:	4c30d0ef          	jal	8001af62 <printf>
    8000d2a4:	4511                	li	a0,4
    8000d2a6:	839f30ef          	jal	80000ade <goto_priv>
    8000d2aa:	87cf40ef          	jal	80001326 <reset_state>
}
    8000d2ae:	60e2                	ld	ra,24(sp)
    8000d2b0:	6442                	ld	s0,16(sp)
    8000d2b2:	8526                	mv	a0,s1
    8000d2b4:	64a2                	ld	s1,8(sp)
    8000d2b6:	6105                	add	sp,sp,32
    8000d2b8:	8082                	ret
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    8000d2ba:	4481                	li	s1,0
    TEST_END();
    8000d2bc:	00010597          	auipc	a1,0x10
    8000d2c0:	81458593          	add	a1,a1,-2028 # 8001cad0 <__func__.1+0x2d8>
    8000d2c4:	bfd1                	j	8000d298 <illegal_except_10+0x178>
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    8000d2c6:	0000f597          	auipc	a1,0xf
    8000d2ca:	7fa58593          	add	a1,a1,2042 # 8001cac0 <__func__.1+0x2c8>
    8000d2ce:	bfb5                	j	8000d24a <illegal_except_10+0x12a>
    TEST_ASSERT("hs mode sinval.vma successful when mstatus.tvm=1",
    8000d2d0:	0000f597          	auipc	a1,0xf
    8000d2d4:	7f058593          	add	a1,a1,2032 # 8001cac0 <__func__.1+0x2c8>
    8000d2d8:	bdc9                	j	8000d1aa <illegal_except_10+0x8a>
    TEST_END();
    8000d2da:	0000f597          	auipc	a1,0xf
    8000d2de:	7e658593          	add	a1,a1,2022 # 8001cac0 <__func__.1+0x2c8>
    8000d2e2:	bf5d                	j	8000d298 <illegal_except_10+0x178>

000000008000d2e4 <illegal_except_11>:

bool illegal_except_11() {
    8000d2e4:	1101                	add	sp,sp,-32

    TEST_START();
    8000d2e6:	0000f597          	auipc	a1,0xf
    8000d2ea:	91258593          	add	a1,a1,-1774 # 8001bbf8 <__func__.3>
    8000d2ee:	0000f517          	auipc	a0,0xf
    8000d2f2:	7f250513          	add	a0,a0,2034 # 8001cae0 <__func__.1+0x2e8>
bool illegal_except_11() {
    8000d2f6:	ec06                	sd	ra,24(sp)
    8000d2f8:	e822                	sd	s0,16(sp)
    8000d2fa:	e426                	sd	s1,8(sp)
    8000d2fc:	e04a                	sd	s2,0(sp)
    TEST_START();
    8000d2fe:	4650d0ef          	jal	8001af62 <printf>
    8000d302:	4529                	li	a0,10
    8000d304:	3310c0ef          	jal	80019e34 <putchar>

    //U模式下，执行HFENCE.VVMA或HFENCE.GVMA
    TEST_SETUP_EXCEPT();
    8000d308:	0ff0000f          	fence
    8000d30c:	00030417          	auipc	s0,0x30
    8000d310:	d0440413          	add	s0,s0,-764 # 8003d010 <excpt>
    8000d314:	4485                	li	s1,1
    8000d316:	00941023          	sh	s1,0(s0)
    8000d31a:	00030797          	auipc	a5,0x30
    8000d31e:	d207b723          	sd	zero,-722(a5) # 8003d048 <excpt+0x38>
    8000d322:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000d326:	4511                	li	a0,4
    8000d328:	fb6f30ef          	jal	80000ade <goto_priv>
    reset_state();
    8000d32c:	ffbf30ef          	jal	80001326 <reset_state>
    goto_priv(PRIV_HU);
    8000d330:	4505                	li	a0,1
    8000d332:	facf30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000d336:	0ff0000f          	fence
    8000d33a:	00030797          	auipc	a5,0x30
    8000d33e:	d007b723          	sd	zero,-754(a5) # 8003d048 <excpt+0x38>
    8000d342:	00941023          	sh	s1,0(s0)
    8000d346:	0ff0000f          	fence
    asm volatile(
    8000d34a:	22000073          	.4byte	0x22000073
    hfence_vvma();
    TEST_ASSERT("hu mode hfence.vvma cause to illegal instruction interrupt",
    8000d34e:	08200593          	li	a1,130
    8000d352:	00012617          	auipc	a2,0x12
    8000d356:	29660613          	add	a2,a2,662 # 8001f5e8 <__func__.1+0x2df0>
    8000d35a:	0000f517          	auipc	a0,0xf
    8000d35e:	79e50513          	add	a0,a0,1950 # 8001caf8 <__func__.1+0x300>
    8000d362:	4010d0ef          	jal	8001af62 <printf>
    8000d366:	00144783          	lbu	a5,1(s0)
    8000d36a:	0000f597          	auipc	a1,0xf
    8000d36e:	76658593          	add	a1,a1,1894 # 8001cad0 <__func__.1+0x2d8>
    8000d372:	c789                	beqz	a5,8000d37c <illegal_except_11+0x98>
    8000d374:	6418                	ld	a4,8(s0)
    8000d376:	4789                	li	a5,2
    8000d378:	12f70e63          	beq	a4,a5,8000d4b4 <illegal_except_11+0x1d0>
    8000d37c:	0000f517          	auipc	a0,0xf
    8000d380:	79450513          	add	a0,a0,1940 # 8001cb10 <__func__.1+0x318>
    8000d384:	3df0d0ef          	jal	8001af62 <printf>
    8000d388:	00144783          	lbu	a5,1(s0)
    8000d38c:	c789                	beqz	a5,8000d396 <illegal_except_11+0xb2>
    8000d38e:	6418                	ld	a4,8(s0)
    8000d390:	4789                	li	a5,2
    8000d392:	00f70c63          	beq	a4,a5,8000d3aa <illegal_except_11+0xc6>
    8000d396:	0000f517          	auipc	a0,0xf
    8000d39a:	78250513          	add	a0,a0,1922 # 8001cb18 <__func__.1+0x320>
    8000d39e:	3c50d0ef          	jal	8001af62 <printf>
    8000d3a2:	02900513          	li	a0,41
    8000d3a6:	28f0c0ef          	jal	80019e34 <putchar>
    8000d3aa:	4529                	li	a0,10
    8000d3ac:	2890c0ef          	jal	80019e34 <putchar>
    8000d3b0:	00144783          	lbu	a5,1(s0)
    8000d3b4:	4481                	li	s1,0
    8000d3b6:	c789                	beqz	a5,8000d3c0 <illegal_except_11+0xdc>
    8000d3b8:	6404                	ld	s1,8(s0)
    8000d3ba:	14f9                	add	s1,s1,-2
    8000d3bc:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    8000d3c0:	0ff0000f          	fence
    8000d3c4:	4905                	li	s2,1
    8000d3c6:	01241023          	sh	s2,0(s0)
    8000d3ca:	00030797          	auipc	a5,0x30
    8000d3ce:	c607bf23          	sd	zero,-898(a5) # 8003d048 <excpt+0x38>
    8000d3d2:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000d3d6:	4511                	li	a0,4
    8000d3d8:	f06f30ef          	jal	80000ade <goto_priv>
    reset_state();
    8000d3dc:	f4bf30ef          	jal	80001326 <reset_state>
    goto_priv(PRIV_HU);
    8000d3e0:	4505                	li	a0,1
    8000d3e2:	efcf30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000d3e6:	0ff0000f          	fence
    8000d3ea:	00030797          	auipc	a5,0x30
    8000d3ee:	c407bf23          	sd	zero,-930(a5) # 8003d048 <excpt+0x38>
    8000d3f2:	01241023          	sh	s2,0(s0)
    8000d3f6:	0ff0000f          	fence
    asm volatile(
    8000d3fa:	62000073          	.4byte	0x62000073
    hfence_gvma();
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    8000d3fe:	08200593          	li	a1,130
    8000d402:	00012617          	auipc	a2,0x12
    8000d406:	22660613          	add	a2,a2,550 # 8001f628 <__func__.1+0x2e30>
    8000d40a:	0000f517          	auipc	a0,0xf
    8000d40e:	6ee50513          	add	a0,a0,1774 # 8001caf8 <__func__.1+0x300>
    8000d412:	3510d0ef          	jal	8001af62 <printf>
    8000d416:	00144783          	lbu	a5,1(s0)
    8000d41a:	0000f597          	auipc	a1,0xf
    8000d41e:	6b658593          	add	a1,a1,1718 # 8001cad0 <__func__.1+0x2d8>
    8000d422:	c789                	beqz	a5,8000d42c <illegal_except_11+0x148>
    8000d424:	6418                	ld	a4,8(s0)
    8000d426:	4789                	li	a5,2
    8000d428:	08f70163          	beq	a4,a5,8000d4aa <illegal_except_11+0x1c6>
    8000d42c:	0000f517          	auipc	a0,0xf
    8000d430:	6e450513          	add	a0,a0,1764 # 8001cb10 <__func__.1+0x318>
    8000d434:	32f0d0ef          	jal	8001af62 <printf>
    8000d438:	00144783          	lbu	a5,1(s0)
    8000d43c:	c789                	beqz	a5,8000d446 <illegal_except_11+0x162>
    8000d43e:	6418                	ld	a4,8(s0)
    8000d440:	4789                	li	a5,2
    8000d442:	00f70c63          	beq	a4,a5,8000d45a <illegal_except_11+0x176>
    8000d446:	0000f517          	auipc	a0,0xf
    8000d44a:	6d250513          	add	a0,a0,1746 # 8001cb18 <__func__.1+0x320>
    8000d44e:	3150d0ef          	jal	8001af62 <printf>
    8000d452:	02900513          	li	a0,41
    8000d456:	1df0c0ef          	jal	80019e34 <putchar>
    8000d45a:	4529                	li	a0,10
    8000d45c:	1d90c0ef          	jal	80019e34 <putchar>
    8000d460:	cc9d                	beqz	s1,8000d49e <illegal_except_11+0x1ba>
    8000d462:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000d466:	0000f597          	auipc	a1,0xf
    8000d46a:	66a58593          	add	a1,a1,1642 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    8000d46e:	c491                	beqz	s1,8000d47a <illegal_except_11+0x196>
    8000d470:	6418                	ld	a4,8(s0)
    8000d472:	4789                	li	a5,2
    8000d474:	04f70563          	beq	a4,a5,8000d4be <illegal_except_11+0x1da>
    8000d478:	4481                	li	s1,0
    TEST_END();
    8000d47a:	0000f517          	auipc	a0,0xf
    8000d47e:	6fe50513          	add	a0,a0,1790 # 8001cb78 <__func__.1+0x380>
    8000d482:	2e10d0ef          	jal	8001af62 <printf>
    8000d486:	4511                	li	a0,4
    8000d488:	e56f30ef          	jal	80000ade <goto_priv>
    8000d48c:	e9bf30ef          	jal	80001326 <reset_state>
}
    8000d490:	60e2                	ld	ra,24(sp)
    8000d492:	6442                	ld	s0,16(sp)
    8000d494:	6902                	ld	s2,0(sp)
    8000d496:	8526                	mv	a0,s1
    8000d498:	64a2                	ld	s1,8(sp)
    8000d49a:	6105                	add	sp,sp,32
    8000d49c:	8082                	ret
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    8000d49e:	4481                	li	s1,0
    TEST_END();
    8000d4a0:	0000f597          	auipc	a1,0xf
    8000d4a4:	63058593          	add	a1,a1,1584 # 8001cad0 <__func__.1+0x2d8>
    8000d4a8:	bfc9                	j	8000d47a <illegal_except_11+0x196>
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    8000d4aa:	0000f597          	auipc	a1,0xf
    8000d4ae:	61658593          	add	a1,a1,1558 # 8001cac0 <__func__.1+0x2c8>
    8000d4b2:	bfad                	j	8000d42c <illegal_except_11+0x148>
    TEST_ASSERT("hu mode hfence.vvma cause to illegal instruction interrupt",
    8000d4b4:	0000f597          	auipc	a1,0xf
    8000d4b8:	60c58593          	add	a1,a1,1548 # 8001cac0 <__func__.1+0x2c8>
    8000d4bc:	b5c1                	j	8000d37c <illegal_except_11+0x98>
    TEST_END();
    8000d4be:	0000f597          	auipc	a1,0xf
    8000d4c2:	60258593          	add	a1,a1,1538 # 8001cac0 <__func__.1+0x2c8>
    8000d4c6:	bf55                	j	8000d47a <illegal_except_11+0x196>

000000008000d4c8 <illegal_except_12>:

bool illegal_except_12() {
    8000d4c8:	1101                	add	sp,sp,-32

    TEST_START();
    8000d4ca:	0000e597          	auipc	a1,0xe
    8000d4ce:	74658593          	add	a1,a1,1862 # 8001bc10 <__func__.2>
    8000d4d2:	0000f517          	auipc	a0,0xf
    8000d4d6:	60e50513          	add	a0,a0,1550 # 8001cae0 <__func__.1+0x2e8>
bool illegal_except_12() {
    8000d4da:	ec06                	sd	ra,24(sp)
    8000d4dc:	e822                	sd	s0,16(sp)
    8000d4de:	e426                	sd	s1,8(sp)
    8000d4e0:	e04a                	sd	s2,0(sp)
    TEST_START();
    8000d4e2:	2810d0ef          	jal	8001af62 <printf>
    8000d4e6:	4529                	li	a0,10
    8000d4e8:	14d0c0ef          	jal	80019e34 <putchar>

    //在U模式下执行SINVAL.VMA、HINVAL.VVMA和HINVAL.GVMA中的任何一条
    TEST_SETUP_EXCEPT();
    8000d4ec:	0ff0000f          	fence
    8000d4f0:	00030417          	auipc	s0,0x30
    8000d4f4:	b2040413          	add	s0,s0,-1248 # 8003d010 <excpt>
    8000d4f8:	4485                	li	s1,1
    8000d4fa:	00941023          	sh	s1,0(s0)
    8000d4fe:	00030797          	auipc	a5,0x30
    8000d502:	b407b523          	sd	zero,-1206(a5) # 8003d048 <excpt+0x38>
    8000d506:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000d50a:	4511                	li	a0,4
    8000d50c:	dd2f30ef          	jal	80000ade <goto_priv>
    reset_state();
    8000d510:	e17f30ef          	jal	80001326 <reset_state>
    goto_priv(PRIV_HU);
    8000d514:	4505                	li	a0,1
    8000d516:	dc8f30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000d51a:	0ff0000f          	fence
    8000d51e:	00030797          	auipc	a5,0x30
    8000d522:	b207b523          	sd	zero,-1238(a5) # 8003d048 <excpt+0x38>
    8000d526:	00941023          	sh	s1,0(s0)
    8000d52a:	0ff0000f          	fence
    asm volatile(
    8000d52e:	16000073          	.4byte	0x16000073
    Sinval_vma();
    TEST_ASSERT("hu mode sinval.vma cause to illegal instruction interrupt",
    8000d532:	08200593          	li	a1,130
    8000d536:	00012617          	auipc	a2,0x12
    8000d53a:	13260613          	add	a2,a2,306 # 8001f668 <__func__.1+0x2e70>
    8000d53e:	0000f517          	auipc	a0,0xf
    8000d542:	5ba50513          	add	a0,a0,1466 # 8001caf8 <__func__.1+0x300>
    8000d546:	21d0d0ef          	jal	8001af62 <printf>
    8000d54a:	00144783          	lbu	a5,1(s0)
    8000d54e:	0000f597          	auipc	a1,0xf
    8000d552:	58258593          	add	a1,a1,1410 # 8001cad0 <__func__.1+0x2d8>
    8000d556:	c789                	beqz	a5,8000d560 <illegal_except_12+0x98>
    8000d558:	6418                	ld	a4,8(s0)
    8000d55a:	4789                	li	a5,2
    8000d55c:	1ef70963          	beq	a4,a5,8000d74e <illegal_except_12+0x286>
    8000d560:	0000f517          	auipc	a0,0xf
    8000d564:	5b050513          	add	a0,a0,1456 # 8001cb10 <__func__.1+0x318>
    8000d568:	1fb0d0ef          	jal	8001af62 <printf>
    8000d56c:	00144783          	lbu	a5,1(s0)
    8000d570:	c789                	beqz	a5,8000d57a <illegal_except_12+0xb2>
    8000d572:	6418                	ld	a4,8(s0)
    8000d574:	4789                	li	a5,2
    8000d576:	00f70c63          	beq	a4,a5,8000d58e <illegal_except_12+0xc6>
    8000d57a:	0000f517          	auipc	a0,0xf
    8000d57e:	59e50513          	add	a0,a0,1438 # 8001cb18 <__func__.1+0x320>
    8000d582:	1e10d0ef          	jal	8001af62 <printf>
    8000d586:	02900513          	li	a0,41
    8000d58a:	0ab0c0ef          	jal	80019e34 <putchar>
    8000d58e:	4529                	li	a0,10
    8000d590:	0a50c0ef          	jal	80019e34 <putchar>
    8000d594:	00144783          	lbu	a5,1(s0)
    8000d598:	4481                	li	s1,0
    8000d59a:	c789                	beqz	a5,8000d5a4 <illegal_except_12+0xdc>
    8000d59c:	6404                	ld	s1,8(s0)
    8000d59e:	14f9                	add	s1,s1,-2
    8000d5a0:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    8000d5a4:	0ff0000f          	fence
    8000d5a8:	4905                	li	s2,1
    8000d5aa:	01241023          	sh	s2,0(s0)
    8000d5ae:	00030797          	auipc	a5,0x30
    8000d5b2:	a807bd23          	sd	zero,-1382(a5) # 8003d048 <excpt+0x38>
    8000d5b6:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000d5ba:	4511                	li	a0,4
    8000d5bc:	d22f30ef          	jal	80000ade <goto_priv>
    reset_state();
    8000d5c0:	d67f30ef          	jal	80001326 <reset_state>
    goto_priv(PRIV_HU);
    8000d5c4:	4505                	li	a0,1
    8000d5c6:	d18f30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000d5ca:	0ff0000f          	fence
    8000d5ce:	00030797          	auipc	a5,0x30
    8000d5d2:	a607bd23          	sd	zero,-1414(a5) # 8003d048 <excpt+0x38>
    8000d5d6:	01241023          	sh	s2,0(s0)
    8000d5da:	0ff0000f          	fence
    asm volatile(
    8000d5de:	66000073          	.4byte	0x66000073
    hinval_gvma();
    TEST_ASSERT("hu mode hinval.gvma cause to illegal instruction interrupt",
    8000d5e2:	08200593          	li	a1,130
    8000d5e6:	00012617          	auipc	a2,0x12
    8000d5ea:	0c260613          	add	a2,a2,194 # 8001f6a8 <__func__.1+0x2eb0>
    8000d5ee:	0000f517          	auipc	a0,0xf
    8000d5f2:	50a50513          	add	a0,a0,1290 # 8001caf8 <__func__.1+0x300>
    8000d5f6:	16d0d0ef          	jal	8001af62 <printf>
    8000d5fa:	00144783          	lbu	a5,1(s0)
    8000d5fe:	0000f597          	auipc	a1,0xf
    8000d602:	4d258593          	add	a1,a1,1234 # 8001cad0 <__func__.1+0x2d8>
    8000d606:	c789                	beqz	a5,8000d610 <illegal_except_12+0x148>
    8000d608:	6418                	ld	a4,8(s0)
    8000d60a:	4789                	li	a5,2
    8000d60c:	14f70663          	beq	a4,a5,8000d758 <illegal_except_12+0x290>
    8000d610:	0000f517          	auipc	a0,0xf
    8000d614:	50050513          	add	a0,a0,1280 # 8001cb10 <__func__.1+0x318>
    8000d618:	14b0d0ef          	jal	8001af62 <printf>
    8000d61c:	00144783          	lbu	a5,1(s0)
    8000d620:	c789                	beqz	a5,8000d62a <illegal_except_12+0x162>
    8000d622:	6418                	ld	a4,8(s0)
    8000d624:	4789                	li	a5,2
    8000d626:	00f70c63          	beq	a4,a5,8000d63e <illegal_except_12+0x176>
    8000d62a:	0000f517          	auipc	a0,0xf
    8000d62e:	4ee50513          	add	a0,a0,1262 # 8001cb18 <__func__.1+0x320>
    8000d632:	1310d0ef          	jal	8001af62 <printf>
    8000d636:	02900513          	li	a0,41
    8000d63a:	7fa0c0ef          	jal	80019e34 <putchar>
    8000d63e:	4529                	li	a0,10
    8000d640:	7f40c0ef          	jal	80019e34 <putchar>
    8000d644:	c491                	beqz	s1,8000d650 <illegal_except_12+0x188>
    8000d646:	00144783          	lbu	a5,1(s0)
    8000d64a:	4481                	li	s1,0
    8000d64c:	0e079763          	bnez	a5,8000d73a <illegal_except_12+0x272>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    8000d650:	0ff0000f          	fence
    8000d654:	4905                	li	s2,1
    8000d656:	01241023          	sh	s2,0(s0)
    8000d65a:	00030797          	auipc	a5,0x30
    8000d65e:	9e07b723          	sd	zero,-1554(a5) # 8003d048 <excpt+0x38>
    8000d662:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000d666:	4511                	li	a0,4
    8000d668:	c76f30ef          	jal	80000ade <goto_priv>
    reset_state();
    8000d66c:	cbbf30ef          	jal	80001326 <reset_state>
    goto_priv(PRIV_HU);
    8000d670:	4505                	li	a0,1
    8000d672:	c6cf30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000d676:	0ff0000f          	fence
    8000d67a:	00030797          	auipc	a5,0x30
    8000d67e:	9c07b723          	sd	zero,-1586(a5) # 8003d048 <excpt+0x38>
    8000d682:	01241023          	sh	s2,0(s0)
    8000d686:	0ff0000f          	fence
    asm volatile(
    8000d68a:	26000073          	.4byte	0x26000073
    hinval_vvma();
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    8000d68e:	08200593          	li	a1,130
    8000d692:	00012617          	auipc	a2,0x12
    8000d696:	05660613          	add	a2,a2,86 # 8001f6e8 <__func__.1+0x2ef0>
    8000d69a:	0000f517          	auipc	a0,0xf
    8000d69e:	45e50513          	add	a0,a0,1118 # 8001caf8 <__func__.1+0x300>
    8000d6a2:	0c10d0ef          	jal	8001af62 <printf>
    8000d6a6:	00144783          	lbu	a5,1(s0)
    8000d6aa:	0000f597          	auipc	a1,0xf
    8000d6ae:	42658593          	add	a1,a1,1062 # 8001cad0 <__func__.1+0x2d8>
    8000d6b2:	c789                	beqz	a5,8000d6bc <illegal_except_12+0x1f4>
    8000d6b4:	6418                	ld	a4,8(s0)
    8000d6b6:	4789                	li	a5,2
    8000d6b8:	08f70663          	beq	a4,a5,8000d744 <illegal_except_12+0x27c>
    8000d6bc:	0000f517          	auipc	a0,0xf
    8000d6c0:	45450513          	add	a0,a0,1108 # 8001cb10 <__func__.1+0x318>
    8000d6c4:	09f0d0ef          	jal	8001af62 <printf>
    8000d6c8:	00144783          	lbu	a5,1(s0)
    8000d6cc:	c789                	beqz	a5,8000d6d6 <illegal_except_12+0x20e>
    8000d6ce:	6418                	ld	a4,8(s0)
    8000d6d0:	4789                	li	a5,2
    8000d6d2:	00f70c63          	beq	a4,a5,8000d6ea <illegal_except_12+0x222>
    8000d6d6:	0000f517          	auipc	a0,0xf
    8000d6da:	44250513          	add	a0,a0,1090 # 8001cb18 <__func__.1+0x320>
    8000d6de:	0850d0ef          	jal	8001af62 <printf>
    8000d6e2:	02900513          	li	a0,41
    8000d6e6:	74e0c0ef          	jal	80019e34 <putchar>
    8000d6ea:	4529                	li	a0,10
    8000d6ec:	7480c0ef          	jal	80019e34 <putchar>
    8000d6f0:	cc9d                	beqz	s1,8000d72e <illegal_except_12+0x266>
    8000d6f2:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000d6f6:	0000f597          	auipc	a1,0xf
    8000d6fa:	3da58593          	add	a1,a1,986 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    8000d6fe:	c491                	beqz	s1,8000d70a <illegal_except_12+0x242>
    8000d700:	6418                	ld	a4,8(s0)
    8000d702:	4789                	li	a5,2
    8000d704:	04f70f63          	beq	a4,a5,8000d762 <illegal_except_12+0x29a>
    8000d708:	4481                	li	s1,0
    TEST_END();
    8000d70a:	0000f517          	auipc	a0,0xf
    8000d70e:	46e50513          	add	a0,a0,1134 # 8001cb78 <__func__.1+0x380>
    8000d712:	0510d0ef          	jal	8001af62 <printf>
    8000d716:	4511                	li	a0,4
    8000d718:	bc6f30ef          	jal	80000ade <goto_priv>
    8000d71c:	c0bf30ef          	jal	80001326 <reset_state>
}
    8000d720:	60e2                	ld	ra,24(sp)
    8000d722:	6442                	ld	s0,16(sp)
    8000d724:	6902                	ld	s2,0(sp)
    8000d726:	8526                	mv	a0,s1
    8000d728:	64a2                	ld	s1,8(sp)
    8000d72a:	6105                	add	sp,sp,32
    8000d72c:	8082                	ret
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    8000d72e:	4481                	li	s1,0
    TEST_END();
    8000d730:	0000f597          	auipc	a1,0xf
    8000d734:	3a058593          	add	a1,a1,928 # 8001cad0 <__func__.1+0x2d8>
    8000d738:	bfc9                	j	8000d70a <illegal_except_12+0x242>
    TEST_ASSERT("hu mode hinval.gvma cause to illegal instruction interrupt",
    8000d73a:	6404                	ld	s1,8(s0)
    8000d73c:	14f9                	add	s1,s1,-2
    8000d73e:	0014b493          	seqz	s1,s1
    8000d742:	b739                	j	8000d650 <illegal_except_12+0x188>
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    8000d744:	0000f597          	auipc	a1,0xf
    8000d748:	37c58593          	add	a1,a1,892 # 8001cac0 <__func__.1+0x2c8>
    8000d74c:	bf85                	j	8000d6bc <illegal_except_12+0x1f4>
    TEST_ASSERT("hu mode sinval.vma cause to illegal instruction interrupt",
    8000d74e:	0000f597          	auipc	a1,0xf
    8000d752:	37258593          	add	a1,a1,882 # 8001cac0 <__func__.1+0x2c8>
    8000d756:	b529                	j	8000d560 <illegal_except_12+0x98>
    TEST_ASSERT("hu mode hinval.gvma cause to illegal instruction interrupt",
    8000d758:	0000f597          	auipc	a1,0xf
    8000d75c:	36858593          	add	a1,a1,872 # 8001cac0 <__func__.1+0x2c8>
    8000d760:	bd45                	j	8000d610 <illegal_except_12+0x148>
    TEST_END();
    8000d762:	0000f597          	auipc	a1,0xf
    8000d766:	35e58593          	add	a1,a1,862 # 8001cac0 <__func__.1+0x2c8>
    8000d76a:	b745                	j	8000d70a <illegal_except_12+0x242>

000000008000d76c <illegal_except_13>:


bool illegal_except_13() {
    8000d76c:	1101                	add	sp,sp,-32

    TEST_START();
    8000d76e:	0000e597          	auipc	a1,0xe
    8000d772:	4ba58593          	add	a1,a1,1210 # 8001bc28 <__func__.1>
    8000d776:	0000f517          	auipc	a0,0xf
    8000d77a:	36a50513          	add	a0,a0,874 # 8001cae0 <__func__.1+0x2e8>
bool illegal_except_13() {
    8000d77e:	ec06                	sd	ra,24(sp)
    8000d780:	e822                	sd	s0,16(sp)
    8000d782:	e426                	sd	s1,8(sp)
    TEST_START();
    8000d784:	7de0d0ef          	jal	8001af62 <printf>
    8000d788:	4529                	li	a0,10
    8000d78a:	6aa0c0ef          	jal	80019e34 <putchar>
    //satp.MODE只读0，执行sfence.vma
    TEST_SETUP_EXCEPT();
    8000d78e:	0ff0000f          	fence
    8000d792:	4785                	li	a5,1
    8000d794:	00030417          	auipc	s0,0x30
    8000d798:	87c40413          	add	s0,s0,-1924 # 8003d010 <excpt>
    8000d79c:	00f41023          	sh	a5,0(s0)
    8000d7a0:	00030797          	auipc	a5,0x30
    8000d7a4:	8a07b423          	sd	zero,-1880(a5) # 8003d048 <excpt+0x38>
    8000d7a8:	0ff0000f          	fence

    goto_priv(PRIV_HS);
    8000d7ac:	450d                	li	a0,3
    8000d7ae:	b30f30ef          	jal	80000ade <goto_priv>
    CSRW(CSR_SATP,0ULL);
    8000d7b2:	18005073          	csrw	satp,0
    asm volatile(
    8000d7b6:	12000073          	sfence.vma
    sfence_vma();
    printf("%d",excpt.triggered);
    8000d7ba:	00144583          	lbu	a1,1(s0)
    8000d7be:	00012517          	auipc	a0,0x12
    8000d7c2:	f6a50513          	add	a0,a0,-150 # 8001f728 <__func__.1+0x2f30>
    8000d7c6:	79c0d0ef          	jal	8001af62 <printf>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    8000d7ca:	08200593          	li	a1,130
    8000d7ce:	00012617          	auipc	a2,0x12
    8000d7d2:	f6260613          	add	a2,a2,-158 # 8001f730 <__func__.1+0x2f38>
    8000d7d6:	0000f517          	auipc	a0,0xf
    8000d7da:	32250513          	add	a0,a0,802 # 8001caf8 <__func__.1+0x300>
    8000d7de:	7840d0ef          	jal	8001af62 <printf>
    8000d7e2:	00144783          	lbu	a5,1(s0)
    8000d7e6:	0000f597          	auipc	a1,0xf
    8000d7ea:	2ea58593          	add	a1,a1,746 # 8001cad0 <__func__.1+0x2d8>
    8000d7ee:	c789                	beqz	a5,8000d7f8 <illegal_except_13+0x8c>
    8000d7f0:	6418                	ld	a4,8(s0)
    8000d7f2:	4789                	li	a5,2
    8000d7f4:	06f70e63          	beq	a4,a5,8000d870 <illegal_except_13+0x104>
    8000d7f8:	0000f517          	auipc	a0,0xf
    8000d7fc:	31850513          	add	a0,a0,792 # 8001cb10 <__func__.1+0x318>
    8000d800:	7620d0ef          	jal	8001af62 <printf>
    8000d804:	00144783          	lbu	a5,1(s0)
    8000d808:	c789                	beqz	a5,8000d812 <illegal_except_13+0xa6>
    8000d80a:	6418                	ld	a4,8(s0)
    8000d80c:	4789                	li	a5,2
    8000d80e:	00f70c63          	beq	a4,a5,8000d826 <illegal_except_13+0xba>
    8000d812:	0000f517          	auipc	a0,0xf
    8000d816:	30650513          	add	a0,a0,774 # 8001cb18 <__func__.1+0x320>
    8000d81a:	7480d0ef          	jal	8001af62 <printf>
    8000d81e:	02900513          	li	a0,41
    8000d822:	6120c0ef          	jal	80019e34 <putchar>
    8000d826:	4529                	li	a0,10
    8000d828:	60c0c0ef          	jal	80019e34 <putchar>
    8000d82c:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000d830:	0000f597          	auipc	a1,0xf
    8000d834:	2a058593          	add	a1,a1,672 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    8000d838:	c491                	beqz	s1,8000d844 <illegal_except_13+0xd8>
    8000d83a:	6418                	ld	a4,8(s0)
    8000d83c:	4789                	li	a5,2
    8000d83e:	02f70463          	beq	a4,a5,8000d866 <illegal_except_13+0xfa>
    8000d842:	4481                	li	s1,0
    TEST_END();
    8000d844:	0000f517          	auipc	a0,0xf
    8000d848:	33450513          	add	a0,a0,820 # 8001cb78 <__func__.1+0x380>
    8000d84c:	7160d0ef          	jal	8001af62 <printf>
    8000d850:	4511                	li	a0,4
    8000d852:	a8cf30ef          	jal	80000ade <goto_priv>
    8000d856:	ad1f30ef          	jal	80001326 <reset_state>
}
    8000d85a:	60e2                	ld	ra,24(sp)
    8000d85c:	6442                	ld	s0,16(sp)
    8000d85e:	8526                	mv	a0,s1
    8000d860:	64a2                	ld	s1,8(sp)
    8000d862:	6105                	add	sp,sp,32
    8000d864:	8082                	ret
    TEST_END();
    8000d866:	0000f597          	auipc	a1,0xf
    8000d86a:	25a58593          	add	a1,a1,602 # 8001cac0 <__func__.1+0x2c8>
    8000d86e:	bfd9                	j	8000d844 <illegal_except_13+0xd8>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    8000d870:	0000f597          	auipc	a1,0xf
    8000d874:	25058593          	add	a1,a1,592 # 8001cac0 <__func__.1+0x2c8>
    8000d878:	b741                	j	8000d7f8 <illegal_except_13+0x8c>

000000008000d87a <illegal_except_14>:
    //扩展FS的状态设置为0时，尝试读取或者写入浮点对应的状态指令
    //扩展VS的状态设置为0时，尝试读取或者写入向量对应的状态指令
    //扩展XS的状态设置为0时，尝试读取或者写入其他扩展对应的状态指令
    //设置HU=0时，在U模式执行超级虚拟机指令

bool illegal_except_14() {
    8000d87a:	1101                	add	sp,sp,-32

    TEST_START();
    8000d87c:	0000e597          	auipc	a1,0xe
    8000d880:	3c458593          	add	a1,a1,964 # 8001bc40 <__func__.0>
    8000d884:	0000f517          	auipc	a0,0xf
    8000d888:	25c50513          	add	a0,a0,604 # 8001cae0 <__func__.1+0x2e8>
bool illegal_except_14() {
    8000d88c:	ec06                	sd	ra,24(sp)
    8000d88e:	e822                	sd	s0,16(sp)
    8000d890:	e426                	sd	s1,8(sp)
    TEST_START();
    8000d892:	6d00d0ef          	jal	8001af62 <printf>
    8000d896:	4529                	li	a0,10
    8000d898:	59c0c0ef          	jal	80019e34 <putchar>
    //mstatus.TSR=1时，执行sret指令
    TEST_SETUP_EXCEPT();
    8000d89c:	0ff0000f          	fence
    8000d8a0:	4785                	li	a5,1
    8000d8a2:	0002f417          	auipc	s0,0x2f
    8000d8a6:	76e40413          	add	s0,s0,1902 # 8003d010 <excpt>
    8000d8aa:	00f41023          	sh	a5,0(s0)
    8000d8ae:	0002f797          	auipc	a5,0x2f
    8000d8b2:	7807bd23          	sd	zero,1946(a5) # 8003d048 <excpt+0x38>
    8000d8b6:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000d8ba:	4511                	li	a0,4
    8000d8bc:	a22f30ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 22);    //TSR位
    8000d8c0:	004007b7          	lui	a5,0x400
    8000d8c4:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    8000d8c8:	450d                	li	a0,3
    8000d8ca:	a14f30ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VU);
    8000d8ce:	4501                	li	a0,0
    8000d8d0:	932f30ef          	jal	80000a02 <set_prev_priv>
    asm volatile(
    8000d8d4:	10200073          	sret

    //TEST_EXEC_SRET();
    sret();

    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8000d8d8:	08200593          	li	a1,130
    8000d8dc:	00012617          	auipc	a2,0x12
    8000d8e0:	ea460613          	add	a2,a2,-348 # 8001f780 <__func__.1+0x2f88>
    8000d8e4:	0000f517          	auipc	a0,0xf
    8000d8e8:	21450513          	add	a0,a0,532 # 8001caf8 <__func__.1+0x300>
    8000d8ec:	6760d0ef          	jal	8001af62 <printf>
    8000d8f0:	00144783          	lbu	a5,1(s0)
    8000d8f4:	0000f597          	auipc	a1,0xf
    8000d8f8:	1dc58593          	add	a1,a1,476 # 8001cad0 <__func__.1+0x2d8>
    8000d8fc:	c789                	beqz	a5,8000d906 <illegal_except_14+0x8c>
    8000d8fe:	6418                	ld	a4,8(s0)
    8000d900:	4789                	li	a5,2
    8000d902:	06f70e63          	beq	a4,a5,8000d97e <illegal_except_14+0x104>
    8000d906:	0000f517          	auipc	a0,0xf
    8000d90a:	20a50513          	add	a0,a0,522 # 8001cb10 <__func__.1+0x318>
    8000d90e:	6540d0ef          	jal	8001af62 <printf>
    8000d912:	00144783          	lbu	a5,1(s0)
    8000d916:	c789                	beqz	a5,8000d920 <illegal_except_14+0xa6>
    8000d918:	6418                	ld	a4,8(s0)
    8000d91a:	4789                	li	a5,2
    8000d91c:	00f70c63          	beq	a4,a5,8000d934 <illegal_except_14+0xba>
    8000d920:	0000f517          	auipc	a0,0xf
    8000d924:	1f850513          	add	a0,a0,504 # 8001cb18 <__func__.1+0x320>
    8000d928:	63a0d0ef          	jal	8001af62 <printf>
    8000d92c:	02900513          	li	a0,41
    8000d930:	5040c0ef          	jal	80019e34 <putchar>
    8000d934:	4529                	li	a0,10
    8000d936:	4fe0c0ef          	jal	80019e34 <putchar>
    8000d93a:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000d93e:	0000f597          	auipc	a1,0xf
    8000d942:	19258593          	add	a1,a1,402 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8000d946:	c491                	beqz	s1,8000d952 <illegal_except_14+0xd8>
    8000d948:	6418                	ld	a4,8(s0)
    8000d94a:	4789                	li	a5,2
    8000d94c:	02f70463          	beq	a4,a5,8000d974 <illegal_except_14+0xfa>
    8000d950:	4481                	li	s1,0
    TEST_END();
    8000d952:	0000f517          	auipc	a0,0xf
    8000d956:	22650513          	add	a0,a0,550 # 8001cb78 <__func__.1+0x380>
    8000d95a:	6080d0ef          	jal	8001af62 <printf>
    8000d95e:	4511                	li	a0,4
    8000d960:	97ef30ef          	jal	80000ade <goto_priv>
    8000d964:	9c3f30ef          	jal	80001326 <reset_state>

}
    8000d968:	60e2                	ld	ra,24(sp)
    8000d96a:	6442                	ld	s0,16(sp)
    8000d96c:	8526                	mv	a0,s1
    8000d96e:	64a2                	ld	s1,8(sp)
    8000d970:	6105                	add	sp,sp,32
    8000d972:	8082                	ret
    TEST_END();
    8000d974:	0000f597          	auipc	a1,0xf
    8000d978:	14c58593          	add	a1,a1,332 # 8001cac0 <__func__.1+0x2c8>
    8000d97c:	bfd9                	j	8000d952 <illegal_except_14+0xd8>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8000d97e:	0000f597          	auipc	a1,0xf
    8000d982:	14258593          	add	a1,a1,322 # 8001cac0 <__func__.1+0x2c8>
    8000d986:	b741                	j	8000d906 <illegal_except_14+0x8c>

000000008000d988 <external_interrupt_MEI>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool external_interrupt_MEI() {
    8000d988:	1101                	add	sp,sp,-32

    TEST_START();
    8000d98a:	0000e597          	auipc	a1,0xe
    8000d98e:	2ce58593          	add	a1,a1,718 # 8001bc58 <__func__.2>
    8000d992:	0000f517          	auipc	a0,0xf
    8000d996:	14e50513          	add	a0,a0,334 # 8001cae0 <__func__.1+0x2e8>
bool external_interrupt_MEI() {
    8000d99a:	ec06                	sd	ra,24(sp)
    8000d99c:	e822                	sd	s0,16(sp)
    8000d99e:	e426                	sd	s1,8(sp)
    8000d9a0:	e04a                	sd	s2,0(sp)
    TEST_START();
    8000d9a2:	5c00d0ef          	jal	8001af62 <printf>
    8000d9a6:	4529                	li	a0,10
    8000d9a8:	48c0c0ef          	jal	80019e34 <putchar>

    TEST_SETUP_EXCEPT();
    8000d9ac:	0ff0000f          	fence
    8000d9b0:	4785                	li	a5,1
    8000d9b2:	0002f417          	auipc	s0,0x2f
    8000d9b6:	65e40413          	add	s0,s0,1630 # 8003d010 <excpt>
    8000d9ba:	00f41023          	sh	a5,0(s0)
    8000d9be:	0002f797          	auipc	a5,0x2f
    8000d9c2:	6807b523          	sd	zero,1674(a5) # 8003d048 <excpt+0x38>
    8000d9c6:	0ff0000f          	fence

   
    //M模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    goto_priv(PRIV_M);
    8000d9ca:	4511                	li	a0,4
    8000d9cc:	912f30ef          	jal	80000ade <goto_priv>
    CSRW(CSR_MIDELEG,0);
    8000d9d0:	30305073          	csrw	mideleg,0
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    8000d9d4:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);         
    8000d9d8:	6785                	lui	a5,0x1
    8000d9da:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000d9de:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);     //p33 read-only  is set and cleared by a platform-specific interrupt controller
    8000d9e2:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    8000d9e6:	4511                	li	a0,4
    8000d9e8:	8f6f30ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    8000d9ec:	08200593          	li	a1,130
    8000d9f0:	00012617          	auipc	a2,0x12
    8000d9f4:	dc060613          	add	a2,a2,-576 # 8001f7b0 <__func__.1+0x2fb8>
    8000d9f8:	0000f517          	auipc	a0,0xf
    8000d9fc:	10050513          	add	a0,a0,256 # 8001caf8 <__func__.1+0x300>
    8000da00:	5620d0ef          	jal	8001af62 <printf>
    8000da04:	00144783          	lbu	a5,1(s0)
    8000da08:	0000f597          	auipc	a1,0xf
    8000da0c:	0c858593          	add	a1,a1,200 # 8001cad0 <__func__.1+0x2d8>
    8000da10:	c799                	beqz	a5,8000da1e <external_interrupt_MEI+0x96>
    8000da12:	57fd                	li	a5,-1
    8000da14:	6418                	ld	a4,8(s0)
    8000da16:	17fe                	sll	a5,a5,0x3f
    8000da18:	07ad                	add	a5,a5,11
    8000da1a:	30f70be3          	beq	a4,a5,8000e530 <external_interrupt_MEI+0xba8>
    8000da1e:	0000f517          	auipc	a0,0xf
    8000da22:	0f250513          	add	a0,a0,242 # 8001cb10 <__func__.1+0x318>
    8000da26:	53c0d0ef          	jal	8001af62 <printf>
    8000da2a:	00144783          	lbu	a5,1(s0)
    8000da2e:	c799                	beqz	a5,8000da3c <external_interrupt_MEI+0xb4>
    8000da30:	57fd                	li	a5,-1
    8000da32:	6418                	ld	a4,8(s0)
    8000da34:	17fe                	sll	a5,a5,0x3f
    8000da36:	07ad                	add	a5,a5,11
    8000da38:	00f70c63          	beq	a4,a5,8000da50 <external_interrupt_MEI+0xc8>
    8000da3c:	0000f517          	auipc	a0,0xf
    8000da40:	0dc50513          	add	a0,a0,220 # 8001cb18 <__func__.1+0x320>
    8000da44:	51e0d0ef          	jal	8001af62 <printf>
    8000da48:	02900513          	li	a0,41
    8000da4c:	3e80c0ef          	jal	80019e34 <putchar>
    8000da50:	4529                	li	a0,10
    8000da52:	3e20c0ef          	jal	80019e34 <putchar>
    8000da56:	00144783          	lbu	a5,1(s0)
    8000da5a:	4481                	li	s1,0
    8000da5c:	c799                	beqz	a5,8000da6a <external_interrupt_MEI+0xe2>
    8000da5e:	6404                	ld	s1,8(s0)
    8000da60:	57ad                	li	a5,-21
    8000da62:	8385                	srl	a5,a5,0x1
    8000da64:	94be                	add	s1,s1,a5
    8000da66:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_MEI
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0
    TEST_SETUP_EXCEPT();
    8000da6a:	0ff0000f          	fence
    8000da6e:	4785                	li	a5,1
    8000da70:	00f41023          	sh	a5,0(s0)
    8000da74:	0002f797          	auipc	a5,0x2f
    8000da78:	5c07ba23          	sd	zero,1492(a5) # 8003d048 <excpt+0x38>
    8000da7c:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000da80:	4511                	li	a0,4
    8000da82:	85cf30ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000da86:	30046073          	csrs	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    8000da8a:	6785                	lui	a5,0x1
    8000da8c:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000da90:	3047b073          	csrc	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    8000da94:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    8000da98:	4511                	li	a0,4
    8000da9a:	844f30ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt pending when mstatus.mie=1 and mip.meip=1 and mie.meie=0",
    8000da9e:	08200593          	li	a1,130
    8000daa2:	00012617          	auipc	a2,0x12
    8000daa6:	d6e60613          	add	a2,a2,-658 # 8001f810 <__func__.1+0x3018>
    8000daaa:	0000f517          	auipc	a0,0xf
    8000daae:	04e50513          	add	a0,a0,78 # 8001caf8 <__func__.1+0x300>
    8000dab2:	4b00d0ef          	jal	8001af62 <printf>
    8000dab6:	00144783          	lbu	a5,1(s0)
    8000daba:	0000f597          	auipc	a1,0xf
    8000dabe:	01658593          	add	a1,a1,22 # 8001cad0 <__func__.1+0x2d8>
    8000dac2:	e789                	bnez	a5,8000dacc <external_interrupt_MEI+0x144>
    8000dac4:	0000f597          	auipc	a1,0xf
    8000dac8:	ffc58593          	add	a1,a1,-4 # 8001cac0 <__func__.1+0x2c8>
    8000dacc:	0000f517          	auipc	a0,0xf
    8000dad0:	04450513          	add	a0,a0,68 # 8001cb10 <__func__.1+0x318>
    8000dad4:	48e0d0ef          	jal	8001af62 <printf>
    8000dad8:	00144783          	lbu	a5,1(s0)
    8000dadc:	1a0790e3          	bnez	a5,8000e47c <external_interrupt_MEI+0xaf4>
    8000dae0:	4529                	li	a0,10
    8000dae2:	3520c0ef          	jal	80019e34 <putchar>
    8000dae6:	c489                	beqz	s1,8000daf0 <external_interrupt_MEI+0x168>
    8000dae8:	00144483          	lbu	s1,1(s0)
    8000daec:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1
    TEST_SETUP_EXCEPT();
    8000daf0:	0ff0000f          	fence
    8000daf4:	4785                	li	a5,1
    8000daf6:	00f41023          	sh	a5,0(s0)
    8000dafa:	0002f797          	auipc	a5,0x2f
    8000dafe:	5407b723          	sd	zero,1358(a5) # 8003d048 <excpt+0x38>
    8000db02:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000db06:	4511                	li	a0,4
    8000db08:	fd7f20ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000db0c:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000db10:	6785                	lui	a5,0x1
    8000db12:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000db16:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    8000db1a:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    8000db1e:	4511                	li	a0,4
    8000db20:	fbff20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1",
    8000db24:	08200593          	li	a1,130
    8000db28:	00012617          	auipc	a2,0x12
    8000db2c:	d4060613          	add	a2,a2,-704 # 8001f868 <__func__.1+0x3070>
    8000db30:	0000f517          	auipc	a0,0xf
    8000db34:	fc850513          	add	a0,a0,-56 # 8001caf8 <__func__.1+0x300>
    8000db38:	42a0d0ef          	jal	8001af62 <printf>
    8000db3c:	00144783          	lbu	a5,1(s0)
    8000db40:	0000f597          	auipc	a1,0xf
    8000db44:	f9058593          	add	a1,a1,-112 # 8001cad0 <__func__.1+0x2d8>
    8000db48:	c799                	beqz	a5,8000db56 <external_interrupt_MEI+0x1ce>
    8000db4a:	57fd                	li	a5,-1
    8000db4c:	6418                	ld	a4,8(s0)
    8000db4e:	17fe                	sll	a5,a5,0x3f
    8000db50:	07ad                	add	a5,a5,11
    8000db52:	1ef705e3          	beq	a4,a5,8000e53c <external_interrupt_MEI+0xbb4>
    8000db56:	0000f517          	auipc	a0,0xf
    8000db5a:	fba50513          	add	a0,a0,-70 # 8001cb10 <__func__.1+0x318>
    8000db5e:	4040d0ef          	jal	8001af62 <printf>
    8000db62:	00144783          	lbu	a5,1(s0)
    8000db66:	c799                	beqz	a5,8000db74 <external_interrupt_MEI+0x1ec>
    8000db68:	57fd                	li	a5,-1
    8000db6a:	6418                	ld	a4,8(s0)
    8000db6c:	17fe                	sll	a5,a5,0x3f
    8000db6e:	07ad                	add	a5,a5,11
    8000db70:	00f70c63          	beq	a4,a5,8000db88 <external_interrupt_MEI+0x200>
    8000db74:	0000f517          	auipc	a0,0xf
    8000db78:	fa450513          	add	a0,a0,-92 # 8001cb18 <__func__.1+0x320>
    8000db7c:	3e60d0ef          	jal	8001af62 <printf>
    8000db80:	02900513          	li	a0,41
    8000db84:	2b00c0ef          	jal	80019e34 <putchar>
    8000db88:	4529                	li	a0,10
    8000db8a:	2aa0c0ef          	jal	80019e34 <putchar>
    8000db8e:	c491                	beqz	s1,8000db9a <external_interrupt_MEI+0x212>
    8000db90:	00144783          	lbu	a5,1(s0)
    8000db94:	4481                	li	s1,0
    8000db96:	0a0796e3          	bnez	a5,8000e442 <external_interrupt_MEI+0xaba>
        excpt.triggered == true &&
        excpt.cause == CAUSE_MEI
    ); 
    
    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=1，mie.MIE=1
    TEST_SETUP_EXCEPT();
    8000db9a:	0ff0000f          	fence
    8000db9e:	4785                	li	a5,1
    8000dba0:	00f41023          	sh	a5,0(s0)
    8000dba4:	0002f797          	auipc	a5,0x2f
    8000dba8:	4a07b223          	sd	zero,1188(a5) # 8003d048 <excpt+0x38>
    8000dbac:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000dbb0:	4511                	li	a0,4
    8000dbb2:	f2df20ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    8000dbb6:	30047073          	csrc	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000dbba:	6785                	lui	a5,0x1
    8000dbbc:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000dbc0:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    8000dbc4:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    8000dbc8:	4511                	li	a0,4
    8000dbca:	f15f20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=1",
    8000dbce:	08200593          	li	a1,130
    8000dbd2:	00012617          	auipc	a2,0x12
    8000dbd6:	cf660613          	add	a2,a2,-778 # 8001f8c8 <__func__.1+0x30d0>
    8000dbda:	0000f517          	auipc	a0,0xf
    8000dbde:	f1e50513          	add	a0,a0,-226 # 8001caf8 <__func__.1+0x300>
    8000dbe2:	3800d0ef          	jal	8001af62 <printf>
    8000dbe6:	00144783          	lbu	a5,1(s0)
    8000dbea:	0000f597          	auipc	a1,0xf
    8000dbee:	ee658593          	add	a1,a1,-282 # 8001cad0 <__func__.1+0x2d8>
    8000dbf2:	e789                	bnez	a5,8000dbfc <external_interrupt_MEI+0x274>
    8000dbf4:	0000f597          	auipc	a1,0xf
    8000dbf8:	ecc58593          	add	a1,a1,-308 # 8001cac0 <__func__.1+0x2c8>
    8000dbfc:	0000f517          	auipc	a0,0xf
    8000dc00:	f1450513          	add	a0,a0,-236 # 8001cb10 <__func__.1+0x318>
    8000dc04:	35e0d0ef          	jal	8001af62 <printf>
    8000dc08:	00144783          	lbu	a5,1(s0)
    8000dc0c:	0e079de3          	bnez	a5,8000e506 <external_interrupt_MEI+0xb7e>
    8000dc10:	4529                	li	a0,10
    8000dc12:	2220c0ef          	jal	80019e34 <putchar>
    8000dc16:	c489                	beqz	s1,8000dc20 <external_interrupt_MEI+0x298>
    8000dc18:	00144483          	lbu	s1,1(s0)
    8000dc1c:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=1，mie.MIE=0
    TEST_SETUP_EXCEPT();
    8000dc20:	0ff0000f          	fence
    8000dc24:	4785                	li	a5,1
    8000dc26:	00f41023          	sh	a5,0(s0)
    8000dc2a:	0002f797          	auipc	a5,0x2f
    8000dc2e:	4007bf23          	sd	zero,1054(a5) # 8003d048 <excpt+0x38>
    8000dc32:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000dc36:	4511                	li	a0,4
    8000dc38:	ea7f20ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3)     
    8000dc3c:	30047073          	csrc	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000dc40:	6785                	lui	a5,0x1
    8000dc42:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000dc46:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    8000dc4a:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    8000dc4e:	4511                	li	a0,4
    8000dc50:	e8ff20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=0",
    8000dc54:	08200593          	li	a1,130
    8000dc58:	00012617          	auipc	a2,0x12
    8000dc5c:	cc860613          	add	a2,a2,-824 # 8001f920 <__func__.1+0x3128>
    8000dc60:	0000f517          	auipc	a0,0xf
    8000dc64:	e9850513          	add	a0,a0,-360 # 8001caf8 <__func__.1+0x300>
    8000dc68:	2fa0d0ef          	jal	8001af62 <printf>
    8000dc6c:	00144783          	lbu	a5,1(s0)
    8000dc70:	0000f597          	auipc	a1,0xf
    8000dc74:	e6058593          	add	a1,a1,-416 # 8001cad0 <__func__.1+0x2d8>
    8000dc78:	e789                	bnez	a5,8000dc82 <external_interrupt_MEI+0x2fa>
    8000dc7a:	0000f597          	auipc	a1,0xf
    8000dc7e:	e4658593          	add	a1,a1,-442 # 8001cac0 <__func__.1+0x2c8>
    8000dc82:	0000f517          	auipc	a0,0xf
    8000dc86:	e8e50513          	add	a0,a0,-370 # 8001cb10 <__func__.1+0x318>
    8000dc8a:	2d80d0ef          	jal	8001af62 <printf>
    8000dc8e:	00144783          	lbu	a5,1(s0)
    8000dc92:	04079ee3          	bnez	a5,8000e4ee <external_interrupt_MEI+0xb66>
    8000dc96:	4529                	li	a0,10
    8000dc98:	19c0c0ef          	jal	80019e34 <putchar>
    8000dc9c:	c489                	beqz	s1,8000dca6 <external_interrupt_MEI+0x31e>
    8000dc9e:	00144483          	lbu	s1,1(s0)
    8000dca2:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 
    
    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=0，mie.MIE=0
    TEST_SETUP_EXCEPT();
    8000dca6:	0ff0000f          	fence
    8000dcaa:	4785                	li	a5,1
    8000dcac:	00f41023          	sh	a5,0(s0)
    8000dcb0:	0002f797          	auipc	a5,0x2f
    8000dcb4:	3807bc23          	sd	zero,920(a5) # 8003d048 <excpt+0x38>
    8000dcb8:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000dcbc:	4511                	li	a0,4
    8000dcbe:	e21f20ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3)     
    8000dcc2:	30047073          	csrc	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    8000dcc6:	6785                	lui	a5,0x1
    8000dcc8:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000dccc:	3047b073          	csrc	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    8000dcd0:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    8000dcd4:	4511                	li	a0,4
    8000dcd6:	e09f20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=0",
    8000dcda:	08200593          	li	a1,130
    8000dcde:	00012617          	auipc	a2,0x12
    8000dce2:	c9a60613          	add	a2,a2,-870 # 8001f978 <__func__.1+0x3180>
    8000dce6:	0000f517          	auipc	a0,0xf
    8000dcea:	e1250513          	add	a0,a0,-494 # 8001caf8 <__func__.1+0x300>
    8000dcee:	2740d0ef          	jal	8001af62 <printf>
    8000dcf2:	00144783          	lbu	a5,1(s0)
    8000dcf6:	0000f597          	auipc	a1,0xf
    8000dcfa:	dda58593          	add	a1,a1,-550 # 8001cad0 <__func__.1+0x2d8>
    8000dcfe:	e789                	bnez	a5,8000dd08 <external_interrupt_MEI+0x380>
    8000dd00:	0000f597          	auipc	a1,0xf
    8000dd04:	dc058593          	add	a1,a1,-576 # 8001cac0 <__func__.1+0x2c8>
    8000dd08:	0000f517          	auipc	a0,0xf
    8000dd0c:	e0850513          	add	a0,a0,-504 # 8001cb10 <__func__.1+0x318>
    8000dd10:	2520d0ef          	jal	8001af62 <printf>
    8000dd14:	00144783          	lbu	a5,1(s0)
    8000dd18:	7a079f63          	bnez	a5,8000e4d6 <external_interrupt_MEI+0xb4e>
    8000dd1c:	4529                	li	a0,10
    8000dd1e:	1160c0ef          	jal	80019e34 <putchar>
    8000dd22:	c489                	beqz	s1,8000dd2c <external_interrupt_MEI+0x3a4>
    8000dd24:	00144483          	lbu	s1,1(s0)
    8000dd28:	0014c493          	xor	s1,s1,1

//---------------------------------------------------------
    

    //HS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    TEST_SETUP_EXCEPT();
    8000dd2c:	0ff0000f          	fence
    8000dd30:	4905                	li	s2,1
    8000dd32:	01241023          	sh	s2,0(s0)
    8000dd36:	0002f797          	auipc	a5,0x2f
    8000dd3a:	3007b923          	sd	zero,786(a5) # 8003d048 <excpt+0x38>
    8000dd3e:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000dd42:	4511                	li	a0,4
    8000dd44:	d9bf20ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000dd48:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000dd4c:	6785                	lui	a5,0x1
    8000dd4e:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000dd52:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    8000dd56:	3447a073          	csrs	mip,a5

    
    goto_priv(PRIV_HS);
    8000dd5a:	450d                	li	a0,3
    8000dd5c:	d83f20ef          	jal	80000ade <goto_priv>

    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    8000dd60:	08200593          	li	a1,130
    8000dd64:	00012617          	auipc	a2,0x12
    8000dd68:	c6c60613          	add	a2,a2,-916 # 8001f9d0 <__func__.1+0x31d8>
    8000dd6c:	0000f517          	auipc	a0,0xf
    8000dd70:	d8c50513          	add	a0,a0,-628 # 8001caf8 <__func__.1+0x300>
    8000dd74:	1ee0d0ef          	jal	8001af62 <printf>
    8000dd78:	6018                	ld	a4,0(s0)
    8000dd7a:	f00017b7          	lui	a5,0xf0001
    8000dd7e:	0792                	sll	a5,a5,0x4
    8000dd80:	190a                	sll	s2,s2,0x22
    8000dd82:	f0078793          	add	a5,a5,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000dd86:	8ff9                	and	a5,a5,a4
    8000dd88:	10090913          	add	s2,s2,256
    8000dd8c:	0000f597          	auipc	a1,0xf
    8000dd90:	d4458593          	add	a1,a1,-700 # 8001cad0 <__func__.1+0x2d8>
    8000dd94:	01279663          	bne	a5,s2,8000dda0 <external_interrupt_MEI+0x418>
    8000dd98:	0000f597          	auipc	a1,0xf
    8000dd9c:	d2858593          	add	a1,a1,-728 # 8001cac0 <__func__.1+0x2c8>
    8000dda0:	0000f517          	auipc	a0,0xf
    8000dda4:	d7050513          	add	a0,a0,-656 # 8001cb10 <__func__.1+0x318>
    8000dda8:	1ba0d0ef          	jal	8001af62 <printf>
    8000ddac:	00144783          	lbu	a5,1(s0)
    8000ddb0:	c789                	beqz	a5,8000ddba <external_interrupt_MEI+0x432>
    8000ddb2:	4058                	lw	a4,4(s0)
    8000ddb4:	4791                	li	a5,4
    8000ddb6:	00f70c63          	beq	a4,a5,8000ddce <external_interrupt_MEI+0x446>
    8000ddba:	0000f517          	auipc	a0,0xf
    8000ddbe:	d5e50513          	add	a0,a0,-674 # 8001cb18 <__func__.1+0x320>
    8000ddc2:	1a00d0ef          	jal	8001af62 <printf>
    8000ddc6:	02900513          	li	a0,41
    8000ddca:	06a0c0ef          	jal	80019e34 <putchar>
    8000ddce:	4529                	li	a0,10
    8000ddd0:	0640c0ef          	jal	80019e34 <putchar>
    8000ddd4:	cc99                	beqz	s1,8000ddf2 <external_interrupt_MEI+0x46a>
    8000ddd6:	6004                	ld	s1,0(s0)
    8000ddd8:	f0001737          	lui	a4,0xf0001
    8000dddc:	57fd                	li	a5,-1
    8000ddde:	0712                	sll	a4,a4,0x4
    8000dde0:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000dde4:	178a                	sll	a5,a5,0x22
    8000dde6:	8cf9                	and	s1,s1,a4
    8000dde8:	f0078793          	add	a5,a5,-256
    8000ddec:	94be                	add	s1,s1,a5
    8000ddee:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高,有hideleg代理
    TEST_SETUP_EXCEPT();
    8000ddf2:	0ff0000f          	fence
    8000ddf6:	4785                	li	a5,1
    8000ddf8:	00f41023          	sh	a5,0(s0)
    8000ddfc:	0002f797          	auipc	a5,0x2f
    8000de00:	2407b623          	sd	zero,588(a5) # 8003d048 <excpt+0x38>
    8000de04:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000de08:	4511                	li	a0,4
    8000de0a:	cd5f20ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000de0e:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000de12:	6785                	lui	a5,0x1
    8000de14:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000de18:	3047a073          	csrs	mie,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000de1c:	577d                	li	a4,-1
    8000de1e:	60371073          	csrw	hideleg,a4
    CSRS(CSR_MIP,MIP_MEIP);
    8000de22:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_HS);
    8000de26:	450d                	li	a0,3
    8000de28:	cb7f20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1 ",
    8000de2c:	08200593          	li	a1,130
    8000de30:	00012617          	auipc	a2,0x12
    8000de34:	bf860613          	add	a2,a2,-1032 # 8001fa28 <__func__.1+0x3230>
    8000de38:	0000f517          	auipc	a0,0xf
    8000de3c:	cc050513          	add	a0,a0,-832 # 8001caf8 <__func__.1+0x300>
    8000de40:	1220d0ef          	jal	8001af62 <printf>
    8000de44:	6014                	ld	a3,0(s0)
    8000de46:	f0001737          	lui	a4,0xf0001
    8000de4a:	478d                	li	a5,3
    8000de4c:	0712                	sll	a4,a4,0x4
    8000de4e:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000de52:	1782                	sll	a5,a5,0x20
    8000de54:	8f75                	and	a4,a4,a3
    8000de56:	10078793          	add	a5,a5,256
    8000de5a:	0000f597          	auipc	a1,0xf
    8000de5e:	c7658593          	add	a1,a1,-906 # 8001cad0 <__func__.1+0x2d8>
    8000de62:	00f71663          	bne	a4,a5,8000de6e <external_interrupt_MEI+0x4e6>
    8000de66:	0000f597          	auipc	a1,0xf
    8000de6a:	c5a58593          	add	a1,a1,-934 # 8001cac0 <__func__.1+0x2c8>
    8000de6e:	0000f517          	auipc	a0,0xf
    8000de72:	ca250513          	add	a0,a0,-862 # 8001cb10 <__func__.1+0x318>
    8000de76:	0ec0d0ef          	jal	8001af62 <printf>
    8000de7a:	00144783          	lbu	a5,1(s0)
    8000de7e:	c789                	beqz	a5,8000de88 <external_interrupt_MEI+0x500>
    8000de80:	4058                	lw	a4,4(s0)
    8000de82:	478d                	li	a5,3
    8000de84:	00f70c63          	beq	a4,a5,8000de9c <external_interrupt_MEI+0x514>
    8000de88:	0000f517          	auipc	a0,0xf
    8000de8c:	c9050513          	add	a0,a0,-880 # 8001cb18 <__func__.1+0x320>
    8000de90:	0d20d0ef          	jal	8001af62 <printf>
    8000de94:	02900513          	li	a0,41
    8000de98:	79d0b0ef          	jal	80019e34 <putchar>
    8000de9c:	4529                	li	a0,10
    8000de9e:	7970b0ef          	jal	80019e34 <putchar>
    8000dea2:	cc99                	beqz	s1,8000dec0 <external_interrupt_MEI+0x538>
    8000dea4:	6004                	ld	s1,0(s0)
    8000dea6:	f0001737          	lui	a4,0xf0001
    8000deaa:	57f5                	li	a5,-3
    8000deac:	0712                	sll	a4,a4,0x4
    8000deae:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000deb2:	1782                	sll	a5,a5,0x20
    8000deb4:	8cf9                	and	s1,s1,a4
    8000deb6:	f0078793          	add	a5,a5,-256
    8000deba:	94be                	add	s1,s1,a5
    8000debc:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0，无代理
    TEST_SETUP_EXCEPT();
    8000dec0:	0ff0000f          	fence
    8000dec4:	4785                	li	a5,1
    8000dec6:	00f41023          	sh	a5,0(s0)
    8000deca:	0002f797          	auipc	a5,0x2f
    8000dece:	1607bf23          	sd	zero,382(a5) # 8003d048 <excpt+0x38>
    8000ded2:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000ded6:	4511                	li	a0,4
    8000ded8:	c07f20ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000dedc:	30046073          	csrs	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    8000dee0:	6785                	lui	a5,0x1
    8000dee2:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000dee6:	3047b073          	csrc	mie,a5
    CSRW(CSR_MIDELEG,0);
    8000deea:	30305073          	csrw	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000deee:	60305073          	csrw	hideleg,0
    CSRS(CSR_MIP,MIP_MEIP);
    8000def2:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_HS);
    8000def6:	450d                	li	a0,3
    8000def8:	be7f20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    8000defc:	08200593          	li	a1,130
    8000df00:	00012617          	auipc	a2,0x12
    8000df04:	b8060613          	add	a2,a2,-1152 # 8001fa80 <__func__.1+0x3288>
    8000df08:	0000f517          	auipc	a0,0xf
    8000df0c:	bf050513          	add	a0,a0,-1040 # 8001caf8 <__func__.1+0x300>
    8000df10:	0520d0ef          	jal	8001af62 <printf>
    8000df14:	00144783          	lbu	a5,1(s0)
    8000df18:	0000f597          	auipc	a1,0xf
    8000df1c:	bb858593          	add	a1,a1,-1096 # 8001cad0 <__func__.1+0x2d8>
    8000df20:	e789                	bnez	a5,8000df2a <external_interrupt_MEI+0x5a2>
    8000df22:	0000f597          	auipc	a1,0xf
    8000df26:	b9e58593          	add	a1,a1,-1122 # 8001cac0 <__func__.1+0x2c8>
    8000df2a:	0000f517          	auipc	a0,0xf
    8000df2e:	be650513          	add	a0,a0,-1050 # 8001cb10 <__func__.1+0x318>
    8000df32:	0300d0ef          	jal	8001af62 <printf>
    8000df36:	00144783          	lbu	a5,1(s0)
    8000df3a:	58079363          	bnez	a5,8000e4c0 <external_interrupt_MEI+0xb38>
    8000df3e:	4529                	li	a0,10
    8000df40:	6f50b0ef          	jal	80019e34 <putchar>
    8000df44:	c489                	beqz	s1,8000df4e <external_interrupt_MEI+0x5c6>
    8000df46:	00144483          	lbu	s1,1(s0)
    8000df4a:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 


    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1，无代理
    TEST_SETUP_EXCEPT();
    8000df4e:	0ff0000f          	fence
    8000df52:	4785                	li	a5,1
    8000df54:	00f41023          	sh	a5,0(s0)
    8000df58:	0002f797          	auipc	a5,0x2f
    8000df5c:	0e07b823          	sd	zero,240(a5) # 8003d048 <excpt+0x38>
    8000df60:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000df64:	4511                	li	a0,4
    8000df66:	b79f20ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000df6a:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000df6e:	6785                	lui	a5,0x1
    8000df70:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000df74:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    8000df78:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_HS);
    8000df7c:	450d                	li	a0,3
    8000df7e:	b61f20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8000df82:	08200593          	li	a1,130
    8000df86:	00012617          	auipc	a2,0x12
    8000df8a:	b5260613          	add	a2,a2,-1198 # 8001fad8 <__func__.1+0x32e0>
    8000df8e:	0000f517          	auipc	a0,0xf
    8000df92:	b6a50513          	add	a0,a0,-1174 # 8001caf8 <__func__.1+0x300>
    8000df96:	7cd0c0ef          	jal	8001af62 <printf>
    8000df9a:	00144783          	lbu	a5,1(s0)
    8000df9e:	0000f597          	auipc	a1,0xf
    8000dfa2:	b3258593          	add	a1,a1,-1230 # 8001cad0 <__func__.1+0x2d8>
    8000dfa6:	c799                	beqz	a5,8000dfb4 <external_interrupt_MEI+0x62c>
    8000dfa8:	57fd                	li	a5,-1
    8000dfaa:	6418                	ld	a4,8(s0)
    8000dfac:	17fe                	sll	a5,a5,0x3f
    8000dfae:	07ad                	add	a5,a5,11
    8000dfb0:	56f70763          	beq	a4,a5,8000e51e <external_interrupt_MEI+0xb96>
    8000dfb4:	0000f517          	auipc	a0,0xf
    8000dfb8:	b5c50513          	add	a0,a0,-1188 # 8001cb10 <__func__.1+0x318>
    8000dfbc:	7a70c0ef          	jal	8001af62 <printf>
    8000dfc0:	00144783          	lbu	a5,1(s0)
    8000dfc4:	c799                	beqz	a5,8000dfd2 <external_interrupt_MEI+0x64a>
    8000dfc6:	57fd                	li	a5,-1
    8000dfc8:	6418                	ld	a4,8(s0)
    8000dfca:	17fe                	sll	a5,a5,0x3f
    8000dfcc:	07ad                	add	a5,a5,11
    8000dfce:	48f70263          	beq	a4,a5,8000e452 <external_interrupt_MEI+0xaca>
    8000dfd2:	0000f517          	auipc	a0,0xf
    8000dfd6:	b4650513          	add	a0,a0,-1210 # 8001cb18 <__func__.1+0x320>
    8000dfda:	7890c0ef          	jal	8001af62 <printf>
    8000dfde:	02900513          	li	a0,41
    8000dfe2:	6530b0ef          	jal	80019e34 <putchar>
    8000dfe6:	4529                	li	a0,10
    8000dfe8:	64d0b0ef          	jal	80019e34 <putchar>
    8000dfec:	c491                	beqz	s1,8000dff8 <external_interrupt_MEI+0x670>
    8000dfee:	00144783          	lbu	a5,1(s0)
    8000dff2:	4481                	li	s1,0
    8000dff4:	42079c63          	bnez	a5,8000e42c <external_interrupt_MEI+0xaa4>
        excpt.priv == PRIV_HS
    ); 


    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=0，且mip.MEIP，mie.MIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    8000dff8:	0ff0000f          	fence
    8000dffc:	4785                	li	a5,1
    8000dffe:	00f41023          	sh	a5,0(s0)
    8000e002:	0002f797          	auipc	a5,0x2f
    8000e006:	0407b323          	sd	zero,70(a5) # 8003d048 <excpt+0x38>
    8000e00a:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000e00e:	4511                	li	a0,4
    8000e010:	acff20ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    8000e014:	30047073          	csrc	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000e018:	6785                	lui	a5,0x1
    8000e01a:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000e01e:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    8000e022:	577d                	li	a4,-1
    8000e024:	30373073          	csrc	mideleg,a4
    CSRC(CSR_MEDELEG,(uint64_t)-1
    8000e028:	30273073          	csrc	medeleg,a4
    );
    CSRC(CSR_MIP,MIP_MEIP);
    8000e02c:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_HS);
    8000e030:	450d                	li	a0,3
    8000e032:	aadf20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("HS mode leads to no interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    8000e036:	08200593          	li	a1,130
    8000e03a:	00012617          	auipc	a2,0x12
    8000e03e:	af660613          	add	a2,a2,-1290 # 8001fb30 <__func__.1+0x3338>
    8000e042:	0000f517          	auipc	a0,0xf
    8000e046:	ab650513          	add	a0,a0,-1354 # 8001caf8 <__func__.1+0x300>
    8000e04a:	7190c0ef          	jal	8001af62 <printf>
    8000e04e:	00144783          	lbu	a5,1(s0)
    8000e052:	0000f597          	auipc	a1,0xf
    8000e056:	a7e58593          	add	a1,a1,-1410 # 8001cad0 <__func__.1+0x2d8>
    8000e05a:	e789                	bnez	a5,8000e064 <external_interrupt_MEI+0x6dc>
    8000e05c:	0000f597          	auipc	a1,0xf
    8000e060:	a6458593          	add	a1,a1,-1436 # 8001cac0 <__func__.1+0x2c8>
    8000e064:	0000f517          	auipc	a0,0xf
    8000e068:	aac50513          	add	a0,a0,-1364 # 8001cb10 <__func__.1+0x318>
    8000e06c:	6f70c0ef          	jal	8001af62 <printf>
    8000e070:	00144783          	lbu	a5,1(s0)
    8000e074:	3e079963          	bnez	a5,8000e466 <external_interrupt_MEI+0xade>
    8000e078:	4529                	li	a0,10
    8000e07a:	5bb0b0ef          	jal	80019e34 <putchar>
    8000e07e:	c489                	beqz	s1,8000e088 <external_interrupt_MEI+0x700>
    8000e080:	00144483          	lbu	s1,1(s0)
    8000e084:	0014c493          	xor	s1,s1,1



//vs-mode下
    //VS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    TEST_SETUP_EXCEPT();
    8000e088:	0ff0000f          	fence
    8000e08c:	4905                	li	s2,1
    8000e08e:	01241023          	sh	s2,0(s0)
    8000e092:	0002f797          	auipc	a5,0x2f
    8000e096:	fa07bb23          	sd	zero,-74(a5) # 8003d048 <excpt+0x38>
    8000e09a:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000e09e:	4511                	li	a0,4
    8000e0a0:	a3ff20ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000e0a4:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000e0a8:	6785                	lui	a5,0x1
    8000e0aa:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000e0ae:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    8000e0b2:	3447a073          	csrs	mip,a5

    
    goto_priv(PRIV_VS);
    8000e0b6:	4509                	li	a0,2
    8000e0b8:	a27f20ef          	jal	80000ade <goto_priv>

    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    8000e0bc:	08200593          	li	a1,130
    8000e0c0:	00012617          	auipc	a2,0x12
    8000e0c4:	ac060613          	add	a2,a2,-1344 # 8001fb80 <__func__.1+0x3388>
    8000e0c8:	0000f517          	auipc	a0,0xf
    8000e0cc:	a3050513          	add	a0,a0,-1488 # 8001caf8 <__func__.1+0x300>
    8000e0d0:	6930c0ef          	jal	8001af62 <printf>
    8000e0d4:	6018                	ld	a4,0(s0)
    8000e0d6:	f00017b7          	lui	a5,0xf0001
    8000e0da:	0792                	sll	a5,a5,0x4
    8000e0dc:	190a                	sll	s2,s2,0x22
    8000e0de:	f0078793          	add	a5,a5,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000e0e2:	8ff9                	and	a5,a5,a4
    8000e0e4:	10090913          	add	s2,s2,256
    8000e0e8:	0000f597          	auipc	a1,0xf
    8000e0ec:	9e858593          	add	a1,a1,-1560 # 8001cad0 <__func__.1+0x2d8>
    8000e0f0:	01279663          	bne	a5,s2,8000e0fc <external_interrupt_MEI+0x774>
    8000e0f4:	0000f597          	auipc	a1,0xf
    8000e0f8:	9cc58593          	add	a1,a1,-1588 # 8001cac0 <__func__.1+0x2c8>
    8000e0fc:	0000f517          	auipc	a0,0xf
    8000e100:	a1450513          	add	a0,a0,-1516 # 8001cb10 <__func__.1+0x318>
    8000e104:	65f0c0ef          	jal	8001af62 <printf>
    8000e108:	00144783          	lbu	a5,1(s0)
    8000e10c:	c789                	beqz	a5,8000e116 <external_interrupt_MEI+0x78e>
    8000e10e:	4058                	lw	a4,4(s0)
    8000e110:	4791                	li	a5,4
    8000e112:	00f70c63          	beq	a4,a5,8000e12a <external_interrupt_MEI+0x7a2>
    8000e116:	0000f517          	auipc	a0,0xf
    8000e11a:	a0250513          	add	a0,a0,-1534 # 8001cb18 <__func__.1+0x320>
    8000e11e:	6450c0ef          	jal	8001af62 <printf>
    8000e122:	02900513          	li	a0,41
    8000e126:	50f0b0ef          	jal	80019e34 <putchar>
    8000e12a:	4529                	li	a0,10
    8000e12c:	5090b0ef          	jal	80019e34 <putchar>
    8000e130:	cc99                	beqz	s1,8000e14e <external_interrupt_MEI+0x7c6>
    8000e132:	6004                	ld	s1,0(s0)
    8000e134:	f0001737          	lui	a4,0xf0001
    8000e138:	57fd                	li	a5,-1
    8000e13a:	0712                	sll	a4,a4,0x4
    8000e13c:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000e140:	178a                	sll	a5,a5,0x22
    8000e142:	8cf9                	and	s1,s1,a4
    8000e144:	f0078793          	add	a5,a5,-256
    8000e148:	94be                	add	s1,s1,a5
    8000e14a:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高,有hideleg代理
    TEST_SETUP_EXCEPT();
    8000e14e:	0ff0000f          	fence
    8000e152:	4905                	li	s2,1
    8000e154:	01241023          	sh	s2,0(s0)
    8000e158:	0002f797          	auipc	a5,0x2f
    8000e15c:	ee07b823          	sd	zero,-272(a5) # 8003d048 <excpt+0x38>
    8000e160:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000e164:	4511                	li	a0,4
    8000e166:	979f20ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000e16a:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000e16e:	6785                	lui	a5,0x1
    8000e170:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000e174:	3047a073          	csrs	mie,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000e178:	577d                	li	a4,-1
    8000e17a:	60371073          	csrw	hideleg,a4
    CSRS(CSR_MIP,MIP_MEIP);
    8000e17e:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_VS);
    8000e182:	4509                	li	a0,2
    8000e184:	95bf20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1 ",
    8000e188:	08200593          	li	a1,130
    8000e18c:	00012617          	auipc	a2,0x12
    8000e190:	a5460613          	add	a2,a2,-1452 # 8001fbe0 <__func__.1+0x33e8>
    8000e194:	0000f517          	auipc	a0,0xf
    8000e198:	96450513          	add	a0,a0,-1692 # 8001caf8 <__func__.1+0x300>
    8000e19c:	5c70c0ef          	jal	8001af62 <printf>
    8000e1a0:	6018                	ld	a4,0(s0)
    8000e1a2:	f00017b7          	lui	a5,0xf0001
    8000e1a6:	0792                	sll	a5,a5,0x4
    8000e1a8:	1906                	sll	s2,s2,0x21
    8000e1aa:	f0078793          	add	a5,a5,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000e1ae:	8ff9                	and	a5,a5,a4
    8000e1b0:	10090913          	add	s2,s2,256
    8000e1b4:	0000f597          	auipc	a1,0xf
    8000e1b8:	91c58593          	add	a1,a1,-1764 # 8001cad0 <__func__.1+0x2d8>
    8000e1bc:	01279663          	bne	a5,s2,8000e1c8 <external_interrupt_MEI+0x840>
    8000e1c0:	0000f597          	auipc	a1,0xf
    8000e1c4:	90058593          	add	a1,a1,-1792 # 8001cac0 <__func__.1+0x2c8>
    8000e1c8:	0000f517          	auipc	a0,0xf
    8000e1cc:	94850513          	add	a0,a0,-1720 # 8001cb10 <__func__.1+0x318>
    8000e1d0:	5930c0ef          	jal	8001af62 <printf>
    8000e1d4:	00144783          	lbu	a5,1(s0)
    8000e1d8:	c789                	beqz	a5,8000e1e2 <external_interrupt_MEI+0x85a>
    8000e1da:	4058                	lw	a4,4(s0)
    8000e1dc:	4789                	li	a5,2
    8000e1de:	00f70c63          	beq	a4,a5,8000e1f6 <external_interrupt_MEI+0x86e>
    8000e1e2:	0000f517          	auipc	a0,0xf
    8000e1e6:	93650513          	add	a0,a0,-1738 # 8001cb18 <__func__.1+0x320>
    8000e1ea:	5790c0ef          	jal	8001af62 <printf>
    8000e1ee:	02900513          	li	a0,41
    8000e1f2:	4430b0ef          	jal	80019e34 <putchar>
    8000e1f6:	4529                	li	a0,10
    8000e1f8:	43d0b0ef          	jal	80019e34 <putchar>
    8000e1fc:	cc99                	beqz	s1,8000e21a <external_interrupt_MEI+0x892>
    8000e1fe:	6004                	ld	s1,0(s0)
    8000e200:	f0001737          	lui	a4,0xf0001
    8000e204:	57fd                	li	a5,-1
    8000e206:	0712                	sll	a4,a4,0x4
    8000e208:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000e20c:	1786                	sll	a5,a5,0x21
    8000e20e:	8cf9                	and	s1,s1,a4
    8000e210:	f0078793          	add	a5,a5,-256
    8000e214:	94be                	add	s1,s1,a5
    8000e216:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0，无代理
    TEST_SETUP_EXCEPT();
    8000e21a:	0ff0000f          	fence
    8000e21e:	4785                	li	a5,1
    8000e220:	00f41023          	sh	a5,0(s0)
    8000e224:	0002f797          	auipc	a5,0x2f
    8000e228:	e207b223          	sd	zero,-476(a5) # 8003d048 <excpt+0x38>
    8000e22c:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000e230:	4511                	li	a0,4
    8000e232:	8adf20ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000e236:	30046073          	csrs	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    8000e23a:	6785                	lui	a5,0x1
    8000e23c:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000e240:	3047b073          	csrc	mie,a5
    CSRW(CSR_MIDELEG,0);
    8000e244:	30305073          	csrw	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000e248:	60305073          	csrw	hideleg,0
    CSRS(CSR_MIP,MIP_MEIP);
    8000e24c:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_VS);
    8000e250:	4509                	li	a0,2
    8000e252:	88df20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    8000e256:	08200593          	li	a1,130
    8000e25a:	00012617          	auipc	a2,0x12
    8000e25e:	9e660613          	add	a2,a2,-1562 # 8001fc40 <__func__.1+0x3448>
    8000e262:	0000f517          	auipc	a0,0xf
    8000e266:	89650513          	add	a0,a0,-1898 # 8001caf8 <__func__.1+0x300>
    8000e26a:	4f90c0ef          	jal	8001af62 <printf>
    8000e26e:	00144783          	lbu	a5,1(s0)
    8000e272:	0000f597          	auipc	a1,0xf
    8000e276:	85e58593          	add	a1,a1,-1954 # 8001cad0 <__func__.1+0x2d8>
    8000e27a:	e789                	bnez	a5,8000e284 <external_interrupt_MEI+0x8fc>
    8000e27c:	0000f597          	auipc	a1,0xf
    8000e280:	84458593          	add	a1,a1,-1980 # 8001cac0 <__func__.1+0x2c8>
    8000e284:	0000f517          	auipc	a0,0xf
    8000e288:	88c50513          	add	a0,a0,-1908 # 8001cb10 <__func__.1+0x318>
    8000e28c:	4d70c0ef          	jal	8001af62 <printf>
    8000e290:	00144783          	lbu	a5,1(s0)
    8000e294:	20079b63          	bnez	a5,8000e4aa <external_interrupt_MEI+0xb22>
    8000e298:	4529                	li	a0,10
    8000e29a:	39b0b0ef          	jal	80019e34 <putchar>
    8000e29e:	c489                	beqz	s1,8000e2a8 <external_interrupt_MEI+0x920>
    8000e2a0:	00144483          	lbu	s1,1(s0)
    8000e2a4:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 


    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1，无代理
    TEST_SETUP_EXCEPT();
    8000e2a8:	0ff0000f          	fence
    8000e2ac:	4785                	li	a5,1
    8000e2ae:	00f41023          	sh	a5,0(s0)
    8000e2b2:	0002f797          	auipc	a5,0x2f
    8000e2b6:	d807bb23          	sd	zero,-618(a5) # 8003d048 <excpt+0x38>
    8000e2ba:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000e2be:	4511                	li	a0,4
    8000e2c0:	81ff20ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000e2c4:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000e2c8:	6785                	lui	a5,0x1
    8000e2ca:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000e2ce:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    8000e2d2:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_VS);
    8000e2d6:	4509                	li	a0,2
    8000e2d8:	807f20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8000e2dc:	08200593          	li	a1,130
    8000e2e0:	00012617          	auipc	a2,0x12
    8000e2e4:	9c060613          	add	a2,a2,-1600 # 8001fca0 <__func__.1+0x34a8>
    8000e2e8:	0000f517          	auipc	a0,0xf
    8000e2ec:	81050513          	add	a0,a0,-2032 # 8001caf8 <__func__.1+0x300>
    8000e2f0:	4730c0ef          	jal	8001af62 <printf>
    8000e2f4:	00144783          	lbu	a5,1(s0)
    8000e2f8:	0000e597          	auipc	a1,0xe
    8000e2fc:	7d858593          	add	a1,a1,2008 # 8001cad0 <__func__.1+0x2d8>
    8000e300:	c799                	beqz	a5,8000e30e <external_interrupt_MEI+0x986>
    8000e302:	57fd                	li	a5,-1
    8000e304:	6418                	ld	a4,8(s0)
    8000e306:	17fe                	sll	a5,a5,0x3f
    8000e308:	07ad                	add	a5,a5,11
    8000e30a:	22f70f63          	beq	a4,a5,8000e548 <external_interrupt_MEI+0xbc0>
    8000e30e:	0000f517          	auipc	a0,0xf
    8000e312:	80250513          	add	a0,a0,-2046 # 8001cb10 <__func__.1+0x318>
    8000e316:	44d0c0ef          	jal	8001af62 <printf>
    8000e31a:	00144783          	lbu	a5,1(s0)
    8000e31e:	c799                	beqz	a5,8000e32c <external_interrupt_MEI+0x9a4>
    8000e320:	57fd                	li	a5,-1
    8000e322:	6418                	ld	a4,8(s0)
    8000e324:	17fe                	sll	a5,a5,0x3f
    8000e326:	07ad                	add	a5,a5,11
    8000e328:	12f70a63          	beq	a4,a5,8000e45c <external_interrupt_MEI+0xad4>
    8000e32c:	0000e517          	auipc	a0,0xe
    8000e330:	7ec50513          	add	a0,a0,2028 # 8001cb18 <__func__.1+0x320>
    8000e334:	42f0c0ef          	jal	8001af62 <printf>
    8000e338:	02900513          	li	a0,41
    8000e33c:	2f90b0ef          	jal	80019e34 <putchar>
    8000e340:	4529                	li	a0,10
    8000e342:	2f30b0ef          	jal	80019e34 <putchar>
    8000e346:	c489                	beqz	s1,8000e350 <external_interrupt_MEI+0x9c8>
    8000e348:	00144783          	lbu	a5,1(s0)
    8000e34c:	4481                	li	s1,0
    8000e34e:	e7e1                	bnez	a5,8000e416 <external_interrupt_MEI+0xa8e>
        excpt.cause == CAUSE_MEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=0，且mip.MEIP，mie.MIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    8000e350:	0ff0000f          	fence
    8000e354:	4785                	li	a5,1
    8000e356:	00f41023          	sh	a5,0(s0)
    8000e35a:	0002f797          	auipc	a5,0x2f
    8000e35e:	ce07b723          	sd	zero,-786(a5) # 8003d048 <excpt+0x38>
    8000e362:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000e366:	4511                	li	a0,4
    8000e368:	f76f20ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    8000e36c:	30047073          	csrc	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000e370:	6785                	lui	a5,0x1
    8000e372:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000e376:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    8000e37a:	577d                	li	a4,-1
    8000e37c:	30373073          	csrc	mideleg,a4
    CSRC(CSR_MEDELEG,(uint64_t)-1);
    8000e380:	30273073          	csrc	medeleg,a4
    CSRC(CSR_MIP,MIP_MEIP);
    8000e384:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_VS);
    8000e388:	4509                	li	a0,2
    8000e38a:	f54f20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    8000e38e:	08200593          	li	a1,130
    8000e392:	00012617          	auipc	a2,0x12
    8000e396:	96e60613          	add	a2,a2,-1682 # 8001fd00 <__func__.1+0x3508>
    8000e39a:	0000e517          	auipc	a0,0xe
    8000e39e:	75e50513          	add	a0,a0,1886 # 8001caf8 <__func__.1+0x300>
    8000e3a2:	3c10c0ef          	jal	8001af62 <printf>
    8000e3a6:	00144783          	lbu	a5,1(s0)
    8000e3aa:	0000e597          	auipc	a1,0xe
    8000e3ae:	72658593          	add	a1,a1,1830 # 8001cad0 <__func__.1+0x2d8>
    8000e3b2:	e789                	bnez	a5,8000e3bc <external_interrupt_MEI+0xa34>
    8000e3b4:	0000e597          	auipc	a1,0xe
    8000e3b8:	70c58593          	add	a1,a1,1804 # 8001cac0 <__func__.1+0x2c8>
    8000e3bc:	0000e517          	auipc	a0,0xe
    8000e3c0:	75450513          	add	a0,a0,1876 # 8001cb10 <__func__.1+0x318>
    8000e3c4:	39f0c0ef          	jal	8001af62 <printf>
    8000e3c8:	00144783          	lbu	a5,1(s0)
    8000e3cc:	e7e1                	bnez	a5,8000e494 <external_interrupt_MEI+0xb0c>
    8000e3ce:	4529                	li	a0,10
    8000e3d0:	2650b0ef          	jal	80019e34 <putchar>
    8000e3d4:	c481                	beqz	s1,8000e3dc <external_interrupt_MEI+0xa54>
    8000e3d6:	00144783          	lbu	a5,1(s0)
    8000e3da:	cb85                	beqz	a5,8000e40a <external_interrupt_MEI+0xa82>
    8000e3dc:	4401                	li	s0,0
    //     excpt.cause == CAUSE_MEI &&
    //     excpt.priv == PRIV_HS
    // ); 


    TEST_END();
    8000e3de:	0000e597          	auipc	a1,0xe
    8000e3e2:	6f258593          	add	a1,a1,1778 # 8001cad0 <__func__.1+0x2d8>
    8000e3e6:	0000e517          	auipc	a0,0xe
    8000e3ea:	79250513          	add	a0,a0,1938 # 8001cb78 <__func__.1+0x380>
    8000e3ee:	3750c0ef          	jal	8001af62 <printf>
    8000e3f2:	4511                	li	a0,4
    8000e3f4:	eeaf20ef          	jal	80000ade <goto_priv>
    8000e3f8:	f2ff20ef          	jal	80001326 <reset_state>
}
    8000e3fc:	60e2                	ld	ra,24(sp)
    8000e3fe:	8522                	mv	a0,s0
    8000e400:	6442                	ld	s0,16(sp)
    8000e402:	64a2                	ld	s1,8(sp)
    8000e404:	6902                	ld	s2,0(sp)
    8000e406:	6105                	add	sp,sp,32
    8000e408:	8082                	ret
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    8000e40a:	4405                	li	s0,1
    TEST_END();
    8000e40c:	0000e597          	auipc	a1,0xe
    8000e410:	6b458593          	add	a1,a1,1716 # 8001cac0 <__func__.1+0x2c8>
    8000e414:	bfc9                	j	8000e3e6 <external_interrupt_MEI+0xa5e>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8000e416:	57fd                	li	a5,-1
    8000e418:	6418                	ld	a4,8(s0)
    8000e41a:	17fe                	sll	a5,a5,0x3f
    8000e41c:	07ad                	add	a5,a5,11
    8000e41e:	f2f719e3          	bne	a4,a5,8000e350 <external_interrupt_MEI+0x9c8>
    8000e422:	4044                	lw	s1,4(s0)
    8000e424:	14f9                	add	s1,s1,-2
    8000e426:	0014b493          	seqz	s1,s1
    8000e42a:	b71d                	j	8000e350 <external_interrupt_MEI+0x9c8>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8000e42c:	57fd                	li	a5,-1
    8000e42e:	6418                	ld	a4,8(s0)
    8000e430:	17fe                	sll	a5,a5,0x3f
    8000e432:	07ad                	add	a5,a5,11
    8000e434:	bcf712e3          	bne	a4,a5,8000dff8 <external_interrupt_MEI+0x670>
    8000e438:	4044                	lw	s1,4(s0)
    8000e43a:	14f5                	add	s1,s1,-3
    8000e43c:	0014b493          	seqz	s1,s1
    8000e440:	be65                	j	8000dff8 <external_interrupt_MEI+0x670>
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1",
    8000e442:	6404                	ld	s1,8(s0)
    8000e444:	57ad                	li	a5,-21
    8000e446:	8385                	srl	a5,a5,0x1
    8000e448:	94be                	add	s1,s1,a5
    8000e44a:	0014b493          	seqz	s1,s1
    8000e44e:	f4cff06f          	j	8000db9a <external_interrupt_MEI+0x212>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8000e452:	4058                	lw	a4,4(s0)
    8000e454:	478d                	li	a5,3
    8000e456:	b6f71ee3          	bne	a4,a5,8000dfd2 <external_interrupt_MEI+0x64a>
    8000e45a:	b671                	j	8000dfe6 <external_interrupt_MEI+0x65e>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8000e45c:	4058                	lw	a4,4(s0)
    8000e45e:	4789                	li	a5,2
    8000e460:	ecf716e3          	bne	a4,a5,8000e32c <external_interrupt_MEI+0x9a4>
    8000e464:	bdf1                	j	8000e340 <external_interrupt_MEI+0x9b8>
    TEST_ASSERT("HS mode leads to no interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    8000e466:	0000e517          	auipc	a0,0xe
    8000e46a:	6b250513          	add	a0,a0,1714 # 8001cb18 <__func__.1+0x320>
    8000e46e:	2f50c0ef          	jal	8001af62 <printf>
    8000e472:	02900513          	li	a0,41
    8000e476:	1bf0b0ef          	jal	80019e34 <putchar>
    8000e47a:	befd                	j	8000e078 <external_interrupt_MEI+0x6f0>
    TEST_ASSERT("m mode leads to no interrupt pending when mstatus.mie=1 and mip.meip=1 and mie.meie=0",
    8000e47c:	0000e517          	auipc	a0,0xe
    8000e480:	69c50513          	add	a0,a0,1692 # 8001cb18 <__func__.1+0x320>
    8000e484:	2df0c0ef          	jal	8001af62 <printf>
    8000e488:	02900513          	li	a0,41
    8000e48c:	1a90b0ef          	jal	80019e34 <putchar>
    8000e490:	e50ff06f          	j	8000dae0 <external_interrupt_MEI+0x158>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    8000e494:	0000e517          	auipc	a0,0xe
    8000e498:	68450513          	add	a0,a0,1668 # 8001cb18 <__func__.1+0x320>
    8000e49c:	2c70c0ef          	jal	8001af62 <printf>
    8000e4a0:	02900513          	li	a0,41
    8000e4a4:	1910b0ef          	jal	80019e34 <putchar>
    8000e4a8:	b71d                	j	8000e3ce <external_interrupt_MEI+0xa46>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    8000e4aa:	0000e517          	auipc	a0,0xe
    8000e4ae:	66e50513          	add	a0,a0,1646 # 8001cb18 <__func__.1+0x320>
    8000e4b2:	2b10c0ef          	jal	8001af62 <printf>
    8000e4b6:	02900513          	li	a0,41
    8000e4ba:	17b0b0ef          	jal	80019e34 <putchar>
    8000e4be:	bbe9                	j	8000e298 <external_interrupt_MEI+0x910>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    8000e4c0:	0000e517          	auipc	a0,0xe
    8000e4c4:	65850513          	add	a0,a0,1624 # 8001cb18 <__func__.1+0x320>
    8000e4c8:	29b0c0ef          	jal	8001af62 <printf>
    8000e4cc:	02900513          	li	a0,41
    8000e4d0:	1650b0ef          	jal	80019e34 <putchar>
    8000e4d4:	b4ad                	j	8000df3e <external_interrupt_MEI+0x5b6>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=0",
    8000e4d6:	0000e517          	auipc	a0,0xe
    8000e4da:	64250513          	add	a0,a0,1602 # 8001cb18 <__func__.1+0x320>
    8000e4de:	2850c0ef          	jal	8001af62 <printf>
    8000e4e2:	02900513          	li	a0,41
    8000e4e6:	14f0b0ef          	jal	80019e34 <putchar>
    8000e4ea:	833ff06f          	j	8000dd1c <external_interrupt_MEI+0x394>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=0",
    8000e4ee:	0000e517          	auipc	a0,0xe
    8000e4f2:	62a50513          	add	a0,a0,1578 # 8001cb18 <__func__.1+0x320>
    8000e4f6:	26d0c0ef          	jal	8001af62 <printf>
    8000e4fa:	02900513          	li	a0,41
    8000e4fe:	1370b0ef          	jal	80019e34 <putchar>
    8000e502:	f94ff06f          	j	8000dc96 <external_interrupt_MEI+0x30e>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=1",
    8000e506:	0000e517          	auipc	a0,0xe
    8000e50a:	61250513          	add	a0,a0,1554 # 8001cb18 <__func__.1+0x320>
    8000e50e:	2550c0ef          	jal	8001af62 <printf>
    8000e512:	02900513          	li	a0,41
    8000e516:	11f0b0ef          	jal	80019e34 <putchar>
    8000e51a:	ef6ff06f          	j	8000dc10 <external_interrupt_MEI+0x288>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8000e51e:	4058                	lw	a4,4(s0)
    8000e520:	478d                	li	a5,3
    8000e522:	a8f719e3          	bne	a4,a5,8000dfb4 <external_interrupt_MEI+0x62c>
    8000e526:	0000e597          	auipc	a1,0xe
    8000e52a:	59a58593          	add	a1,a1,1434 # 8001cac0 <__func__.1+0x2c8>
    8000e52e:	b459                	j	8000dfb4 <external_interrupt_MEI+0x62c>
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    8000e530:	0000e597          	auipc	a1,0xe
    8000e534:	59058593          	add	a1,a1,1424 # 8001cac0 <__func__.1+0x2c8>
    8000e538:	ce6ff06f          	j	8000da1e <external_interrupt_MEI+0x96>
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1",
    8000e53c:	0000e597          	auipc	a1,0xe
    8000e540:	58458593          	add	a1,a1,1412 # 8001cac0 <__func__.1+0x2c8>
    8000e544:	e12ff06f          	j	8000db56 <external_interrupt_MEI+0x1ce>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8000e548:	4058                	lw	a4,4(s0)
    8000e54a:	4789                	li	a5,2
    8000e54c:	dcf711e3          	bne	a4,a5,8000e30e <external_interrupt_MEI+0x986>
    8000e550:	0000e597          	auipc	a1,0xe
    8000e554:	57058593          	add	a1,a1,1392 # 8001cac0 <__func__.1+0x2c8>
    8000e558:	bb5d                	j	8000e30e <external_interrupt_MEI+0x986>

000000008000e55a <external_interrupt_SEI>:


bool external_interrupt_SEI() {
    8000e55a:	1101                	add	sp,sp,-32

    TEST_START();
    8000e55c:	0000d597          	auipc	a1,0xd
    8000e560:	71458593          	add	a1,a1,1812 # 8001bc70 <__func__.1>
    8000e564:	0000e517          	auipc	a0,0xe
    8000e568:	57c50513          	add	a0,a0,1404 # 8001cae0 <__func__.1+0x2e8>
bool external_interrupt_SEI() {
    8000e56c:	ec06                	sd	ra,24(sp)
    8000e56e:	e822                	sd	s0,16(sp)
    8000e570:	e426                	sd	s1,8(sp)
    TEST_START();
    8000e572:	1f10c0ef          	jal	8001af62 <printf>
    8000e576:	4529                	li	a0,10
    8000e578:	0bd0b0ef          	jal	80019e34 <putchar>

    TEST_SETUP_EXCEPT();
    8000e57c:	0ff0000f          	fence
    8000e580:	4785                	li	a5,1
    8000e582:	0002f417          	auipc	s0,0x2f
    8000e586:	a8e40413          	add	s0,s0,-1394 # 8003d010 <excpt>
    8000e58a:	00f41023          	sh	a5,0(s0)
    8000e58e:	0002f797          	auipc	a5,0x2f
    8000e592:	aa07bd23          	sd	zero,-1350(a5) # 8003d048 <excpt+0x38>
    8000e596:	0ff0000f          	fence

   
    //HS模式下产生单bit外部中断，sstatus.sie=1，且mip，sie对应的SEIP、SEIE拉高
    goto_priv(PRIV_HS);
    8000e59a:	450d                	li	a0,3
    8000e59c:	d42f20ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     //sie位
    8000e5a0:	10016073          	csrs	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    8000e5a4:	20000793          	li	a5,512
    8000e5a8:	1047a073          	csrs	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    8000e5ac:	1447a073          	csrs	sip,a5

    goto_priv(PRIV_HS);
    8000e5b0:	450d                	li	a0,3
    8000e5b2:	d2cf20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8000e5b6:	08200593          	li	a1,130
    8000e5ba:	00011617          	auipc	a2,0x11
    8000e5be:	7a660613          	add	a2,a2,1958 # 8001fd60 <__func__.1+0x3568>
    8000e5c2:	0000e517          	auipc	a0,0xe
    8000e5c6:	53650513          	add	a0,a0,1334 # 8001caf8 <__func__.1+0x300>
    8000e5ca:	1990c0ef          	jal	8001af62 <printf>
    8000e5ce:	00144783          	lbu	a5,1(s0)
    8000e5d2:	0000e597          	auipc	a1,0xe
    8000e5d6:	4fe58593          	add	a1,a1,1278 # 8001cad0 <__func__.1+0x2d8>
    8000e5da:	c799                	beqz	a5,8000e5e8 <external_interrupt_SEI+0x8e>
    8000e5dc:	57fd                	li	a5,-1
    8000e5de:	6418                	ld	a4,8(s0)
    8000e5e0:	17fe                	sll	a5,a5,0x3f
    8000e5e2:	07a5                	add	a5,a5,9
    8000e5e4:	70f70463          	beq	a4,a5,8000ecec <external_interrupt_SEI+0x792>
    8000e5e8:	0000e517          	auipc	a0,0xe
    8000e5ec:	52850513          	add	a0,a0,1320 # 8001cb10 <__func__.1+0x318>
    8000e5f0:	1730c0ef          	jal	8001af62 <printf>
    8000e5f4:	00144783          	lbu	a5,1(s0)
    8000e5f8:	c799                	beqz	a5,8000e606 <external_interrupt_SEI+0xac>
    8000e5fa:	57fd                	li	a5,-1
    8000e5fc:	6418                	ld	a4,8(s0)
    8000e5fe:	17fe                	sll	a5,a5,0x3f
    8000e600:	07a5                	add	a5,a5,9
    8000e602:	60f70663          	beq	a4,a5,8000ec0e <external_interrupt_SEI+0x6b4>
    8000e606:	0000e517          	auipc	a0,0xe
    8000e60a:	51250513          	add	a0,a0,1298 # 8001cb18 <__func__.1+0x320>
    8000e60e:	1550c0ef          	jal	8001af62 <printf>
    8000e612:	02900513          	li	a0,41
    8000e616:	01f0b0ef          	jal	80019e34 <putchar>
    8000e61a:	4529                	li	a0,10
    8000e61c:	0190b0ef          	jal	80019e34 <putchar>
    8000e620:	00144783          	lbu	a5,1(s0)
    8000e624:	4481                	li	s1,0
    8000e626:	c799                	beqz	a5,8000e634 <external_interrupt_SEI+0xda>
    8000e628:	57fd                	li	a5,-1
    8000e62a:	6418                	ld	a4,8(s0)
    8000e62c:	17fe                	sll	a5,a5,0x3f
    8000e62e:	07a5                	add	a5,a5,9
    8000e630:	68f70763          	beq	a4,a5,8000ecbe <external_interrupt_SEI+0x764>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //HS模式下产生单bit外部中断，sstatus.sie=1，且sip.SEIP=1，sie.SEIE=0
    TEST_SETUP_EXCEPT();
    8000e634:	0ff0000f          	fence
    8000e638:	4785                	li	a5,1
    8000e63a:	00f41023          	sh	a5,0(s0)
    8000e63e:	0002f797          	auipc	a5,0x2f
    8000e642:	a007b523          	sd	zero,-1526(a5) # 8003d048 <excpt+0x38>
    8000e646:	0ff0000f          	fence
    goto_priv(PRIV_HS);
    8000e64a:	450d                	li	a0,3
    8000e64c:	c92f20ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    8000e650:	10016073          	csrs	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    8000e654:	20000793          	li	a5,512
    8000e658:	1047b073          	csrc	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    8000e65c:	1447a073          	csrs	sip,a5

    goto_priv(PRIV_HS);
    8000e660:	450d                	li	a0,3
    8000e662:	c7cf20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt  when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    8000e666:	08200593          	li	a1,130
    8000e66a:	00011617          	auipc	a2,0x11
    8000e66e:	75660613          	add	a2,a2,1878 # 8001fdc0 <__func__.1+0x35c8>
    8000e672:	0000e517          	auipc	a0,0xe
    8000e676:	48650513          	add	a0,a0,1158 # 8001caf8 <__func__.1+0x300>
    8000e67a:	0e90c0ef          	jal	8001af62 <printf>
    8000e67e:	00144783          	lbu	a5,1(s0)
    8000e682:	0000e597          	auipc	a1,0xe
    8000e686:	44e58593          	add	a1,a1,1102 # 8001cad0 <__func__.1+0x2d8>
    8000e68a:	e789                	bnez	a5,8000e694 <external_interrupt_SEI+0x13a>
    8000e68c:	0000e597          	auipc	a1,0xe
    8000e690:	43458593          	add	a1,a1,1076 # 8001cac0 <__func__.1+0x2c8>
    8000e694:	0000e517          	auipc	a0,0xe
    8000e698:	47c50513          	add	a0,a0,1148 # 8001cb10 <__func__.1+0x318>
    8000e69c:	0c70c0ef          	jal	8001af62 <printf>
    8000e6a0:	00144783          	lbu	a5,1(s0)
    8000e6a4:	5a079a63          	bnez	a5,8000ec58 <external_interrupt_SEI+0x6fe>
    8000e6a8:	4529                	li	a0,10
    8000e6aa:	78a0b0ef          	jal	80019e34 <putchar>
    8000e6ae:	c489                	beqz	s1,8000e6b8 <external_interrupt_SEI+0x15e>
    8000e6b0:	00144483          	lbu	s1,1(s0)
    8000e6b4:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 

    //HS模式下产生单bit外部中断，sstatus.sie=1，且sip.SEIP=0，sie.SEIE=1
    TEST_SETUP_EXCEPT();
    8000e6b8:	0ff0000f          	fence
    8000e6bc:	4785                	li	a5,1
    8000e6be:	00f41023          	sh	a5,0(s0)
    8000e6c2:	0002f797          	auipc	a5,0x2f
    8000e6c6:	9807b323          	sd	zero,-1658(a5) # 8003d048 <excpt+0x38>
    8000e6ca:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000e6ce:	4511                	li	a0,4
    8000e6d0:	c0ef20ef          	jal	80000ade <goto_priv>
    CSRW(CSR_MIDELEG,0);
    8000e6d4:	30305073          	csrw	mideleg,0
    CSRS(CSR_SSTATUS,1ULL << 1);     
    8000e6d8:	10016073          	csrs	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    8000e6dc:	20000793          	li	a5,512
    8000e6e0:	1047a073          	csrs	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    8000e6e4:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    8000e6e8:	450d                	li	a0,3
    8000e6ea:	bf4f20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8000e6ee:	08200593          	li	a1,130
    8000e6f2:	00011617          	auipc	a2,0x11
    8000e6f6:	71e60613          	add	a2,a2,1822 # 8001fe10 <__func__.1+0x3618>
    8000e6fa:	0000e517          	auipc	a0,0xe
    8000e6fe:	3fe50513          	add	a0,a0,1022 # 8001caf8 <__func__.1+0x300>
    8000e702:	0610c0ef          	jal	8001af62 <printf>
    8000e706:	00144783          	lbu	a5,1(s0)
    8000e70a:	0000e597          	auipc	a1,0xe
    8000e70e:	3c658593          	add	a1,a1,966 # 8001cad0 <__func__.1+0x2d8>
    8000e712:	c799                	beqz	a5,8000e720 <external_interrupt_SEI+0x1c6>
    8000e714:	57fd                	li	a5,-1
    8000e716:	6418                	ld	a4,8(s0)
    8000e718:	17fe                	sll	a5,a5,0x3f
    8000e71a:	07a5                	add	a5,a5,9
    8000e71c:	5af70663          	beq	a4,a5,8000ecc8 <external_interrupt_SEI+0x76e>
    8000e720:	0000e517          	auipc	a0,0xe
    8000e724:	3f050513          	add	a0,a0,1008 # 8001cb10 <__func__.1+0x318>
    8000e728:	03b0c0ef          	jal	8001af62 <printf>
    8000e72c:	00144783          	lbu	a5,1(s0)
    8000e730:	c799                	beqz	a5,8000e73e <external_interrupt_SEI+0x1e4>
    8000e732:	57fd                	li	a5,-1
    8000e734:	6418                	ld	a4,8(s0)
    8000e736:	17fe                	sll	a5,a5,0x3f
    8000e738:	07a5                	add	a5,a5,9
    8000e73a:	4cf70563          	beq	a4,a5,8000ec04 <external_interrupt_SEI+0x6aa>
    8000e73e:	0000e517          	auipc	a0,0xe
    8000e742:	3da50513          	add	a0,a0,986 # 8001cb18 <__func__.1+0x320>
    8000e746:	01d0c0ef          	jal	8001af62 <printf>
    8000e74a:	02900513          	li	a0,41
    8000e74e:	6e60b0ef          	jal	80019e34 <putchar>
    8000e752:	4529                	li	a0,10
    8000e754:	6e00b0ef          	jal	80019e34 <putchar>
    8000e758:	c491                	beqz	s1,8000e764 <external_interrupt_SEI+0x20a>
    8000e75a:	00144783          	lbu	a5,1(s0)
    8000e75e:	4481                	li	s1,0
    8000e760:	48079263          	bnez	a5,8000ebe4 <external_interrupt_SEI+0x68a>
    //     excpt.priv == PRIV_HS
    // ); 
    

    //HS模式下产生单bit外部中断，sstatus.mie=1，且sip.SEIP=0，sie.SIE=0
    TEST_SETUP_EXCEPT();
    8000e764:	0ff0000f          	fence
    8000e768:	4785                	li	a5,1
    8000e76a:	00f41023          	sh	a5,0(s0)
    8000e76e:	0002f797          	auipc	a5,0x2f
    8000e772:	8c07bd23          	sd	zero,-1830(a5) # 8003d048 <excpt+0x38>
    8000e776:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000e77a:	4511                	li	a0,4
    8000e77c:	b62f20ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1)     
    8000e780:	10016073          	csrs	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    8000e784:	20000793          	li	a5,512
    8000e788:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    8000e78c:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    8000e790:	450d                	li	a0,3
    8000e792:	b4cf20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=1 and sie.seie=0",
    8000e796:	08200593          	li	a1,130
    8000e79a:	00011617          	auipc	a2,0x11
    8000e79e:	6d660613          	add	a2,a2,1750 # 8001fe70 <__func__.1+0x3678>
    8000e7a2:	0000e517          	auipc	a0,0xe
    8000e7a6:	35650513          	add	a0,a0,854 # 8001caf8 <__func__.1+0x300>
    8000e7aa:	7b80c0ef          	jal	8001af62 <printf>
    8000e7ae:	00144783          	lbu	a5,1(s0)
    8000e7b2:	0000e597          	auipc	a1,0xe
    8000e7b6:	31e58593          	add	a1,a1,798 # 8001cad0 <__func__.1+0x2d8>
    8000e7ba:	e789                	bnez	a5,8000e7c4 <external_interrupt_SEI+0x26a>
    8000e7bc:	0000e597          	auipc	a1,0xe
    8000e7c0:	30458593          	add	a1,a1,772 # 8001cac0 <__func__.1+0x2c8>
    8000e7c4:	0000e517          	auipc	a0,0xe
    8000e7c8:	34c50513          	add	a0,a0,844 # 8001cb10 <__func__.1+0x318>
    8000e7cc:	7960c0ef          	jal	8001af62 <printf>
    8000e7d0:	00144783          	lbu	a5,1(s0)
    8000e7d4:	46079763          	bnez	a5,8000ec42 <external_interrupt_SEI+0x6e8>
    8000e7d8:	4529                	li	a0,10
    8000e7da:	65a0b0ef          	jal	80019e34 <putchar>
    8000e7de:	c489                	beqz	s1,8000e7e8 <external_interrupt_SEI+0x28e>
    8000e7e0:	00144483          	lbu	s1,1(s0)
    8000e7e4:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 
    
    //HS模式下产生单bit外部中断，sstatus.sie=0，且sip.SEIP=0，sie.SIE=0
    TEST_SETUP_EXCEPT();
    8000e7e8:	0ff0000f          	fence
    8000e7ec:	4785                	li	a5,1
    8000e7ee:	00f41023          	sh	a5,0(s0)
    8000e7f2:	0002f797          	auipc	a5,0x2f
    8000e7f6:	8407bb23          	sd	zero,-1962(a5) # 8003d048 <excpt+0x38>
    8000e7fa:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000e7fe:	4511                	li	a0,4
    8000e800:	adef20ef          	jal	80000ade <goto_priv>
    CSRC(CSR_SSTATUS,1ULL << 1)     
    8000e804:	10017073          	csrc	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    8000e808:	20000793          	li	a5,512
    8000e80c:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    8000e810:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    8000e814:	450d                	li	a0,3
    8000e816:	ac8f20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=0 and sie.seie=0",
    8000e81a:	08200593          	li	a1,130
    8000e81e:	00011617          	auipc	a2,0x11
    8000e822:	6a260613          	add	a2,a2,1698 # 8001fec0 <__func__.1+0x36c8>
    8000e826:	0000e517          	auipc	a0,0xe
    8000e82a:	2d250513          	add	a0,a0,722 # 8001caf8 <__func__.1+0x300>
    8000e82e:	7340c0ef          	jal	8001af62 <printf>
    8000e832:	00144783          	lbu	a5,1(s0)
    8000e836:	0000e597          	auipc	a1,0xe
    8000e83a:	29a58593          	add	a1,a1,666 # 8001cad0 <__func__.1+0x2d8>
    8000e83e:	e789                	bnez	a5,8000e848 <external_interrupt_SEI+0x2ee>
    8000e840:	0000e597          	auipc	a1,0xe
    8000e844:	28058593          	add	a1,a1,640 # 8001cac0 <__func__.1+0x2c8>
    8000e848:	0000e517          	auipc	a0,0xe
    8000e84c:	2c850513          	add	a0,a0,712 # 8001cb10 <__func__.1+0x318>
    8000e850:	7120c0ef          	jal	8001af62 <printf>
    8000e854:	00144783          	lbu	a5,1(s0)
    8000e858:	3c079a63          	bnez	a5,8000ec2c <external_interrupt_SEI+0x6d2>
    8000e85c:	4529                	li	a0,10
    8000e85e:	5d60b0ef          	jal	80019e34 <putchar>
    8000e862:	c489                	beqz	s1,8000e86c <external_interrupt_SEI+0x312>
    8000e864:	00144483          	lbu	s1,1(s0)
    8000e868:	0014c493          	xor	s1,s1,1

//---------------------------------------------------------
    

    //VS模式下产生单bit外部中断，sstatus.sie=1，且sip，sie对应的SEIP、SEIE拉高
    TEST_SETUP_EXCEPT();
    8000e86c:	0ff0000f          	fence
    8000e870:	4785                	li	a5,1
    8000e872:	00f41023          	sh	a5,0(s0)
    8000e876:	0002e797          	auipc	a5,0x2e
    8000e87a:	7c07b923          	sd	zero,2002(a5) # 8003d048 <excpt+0x38>
    8000e87e:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000e882:	4511                	li	a0,4
    8000e884:	a5af20ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    8000e888:	10016073          	csrs	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    8000e88c:	20000793          	li	a5,512
    8000e890:	1047a073          	csrs	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    8000e894:	1447a073          	csrs	sip,a5

    
    goto_priv(PRIV_VS);
    8000e898:	4509                	li	a0,2
    8000e89a:	a44f20ef          	jal	80000ade <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8000e89e:	08200593          	li	a1,130
    8000e8a2:	00011617          	auipc	a2,0x11
    8000e8a6:	66e60613          	add	a2,a2,1646 # 8001ff10 <__func__.1+0x3718>
    8000e8aa:	0000e517          	auipc	a0,0xe
    8000e8ae:	24e50513          	add	a0,a0,590 # 8001caf8 <__func__.1+0x300>
    8000e8b2:	6b00c0ef          	jal	8001af62 <printf>
    8000e8b6:	00144783          	lbu	a5,1(s0)
    8000e8ba:	0000e597          	auipc	a1,0xe
    8000e8be:	21658593          	add	a1,a1,534 # 8001cad0 <__func__.1+0x2d8>
    8000e8c2:	c799                	beqz	a5,8000e8d0 <external_interrupt_SEI+0x376>
    8000e8c4:	57fd                	li	a5,-1
    8000e8c6:	6418                	ld	a4,8(s0)
    8000e8c8:	17fe                	sll	a5,a5,0x3f
    8000e8ca:	07a5                	add	a5,a5,9
    8000e8cc:	3ef70063          	beq	a4,a5,8000ecac <external_interrupt_SEI+0x752>
    8000e8d0:	0000e517          	auipc	a0,0xe
    8000e8d4:	24050513          	add	a0,a0,576 # 8001cb10 <__func__.1+0x318>
    8000e8d8:	68a0c0ef          	jal	8001af62 <printf>
    8000e8dc:	00144783          	lbu	a5,1(s0)
    8000e8e0:	c799                	beqz	a5,8000e8ee <external_interrupt_SEI+0x394>
    8000e8e2:	57fd                	li	a5,-1
    8000e8e4:	6418                	ld	a4,8(s0)
    8000e8e6:	17fe                	sll	a5,a5,0x3f
    8000e8e8:	07a5                	add	a5,a5,9
    8000e8ea:	30f70863          	beq	a4,a5,8000ebfa <external_interrupt_SEI+0x6a0>
    8000e8ee:	0000e517          	auipc	a0,0xe
    8000e8f2:	22a50513          	add	a0,a0,554 # 8001cb18 <__func__.1+0x320>
    8000e8f6:	66c0c0ef          	jal	8001af62 <printf>
    8000e8fa:	02900513          	li	a0,41
    8000e8fe:	5360b0ef          	jal	80019e34 <putchar>
    8000e902:	4529                	li	a0,10
    8000e904:	5300b0ef          	jal	80019e34 <putchar>
    8000e908:	c491                	beqz	s1,8000e914 <external_interrupt_SEI+0x3ba>
    8000e90a:	00144783          	lbu	a5,1(s0)
    8000e90e:	4481                	li	s1,0
    8000e910:	2a079f63          	bnez	a5,8000ebce <external_interrupt_SEI+0x674>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //vs模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=1，sie=0
    TEST_SETUP_EXCEPT();
    8000e914:	0ff0000f          	fence
    8000e918:	4785                	li	a5,1
    8000e91a:	00f41023          	sh	a5,0(s0)
    8000e91e:	0002e797          	auipc	a5,0x2e
    8000e922:	7207b523          	sd	zero,1834(a5) # 8003d048 <excpt+0x38>
    8000e926:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000e92a:	4511                	li	a0,4
    8000e92c:	9b2f20ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    8000e930:	10016073          	csrs	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    8000e934:	20000793          	li	a5,512
    8000e938:	1047b073          	csrc	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    8000e93c:	1447a073          	csrs	sip,a5

    
    goto_priv(PRIV_VS);
    8000e940:	4509                	li	a0,2
    8000e942:	99cf20ef          	jal	80000ade <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    8000e946:	08200593          	li	a1,130
    8000e94a:	00011617          	auipc	a2,0x11
    8000e94e:	61e60613          	add	a2,a2,1566 # 8001ff68 <__func__.1+0x3770>
    8000e952:	0000e517          	auipc	a0,0xe
    8000e956:	1a650513          	add	a0,a0,422 # 8001caf8 <__func__.1+0x300>
    8000e95a:	6080c0ef          	jal	8001af62 <printf>
    8000e95e:	00144783          	lbu	a5,1(s0)
    8000e962:	0000e597          	auipc	a1,0xe
    8000e966:	16e58593          	add	a1,a1,366 # 8001cad0 <__func__.1+0x2d8>
    8000e96a:	c799                	beqz	a5,8000e978 <external_interrupt_SEI+0x41e>
    8000e96c:	57fd                	li	a5,-1
    8000e96e:	6418                	ld	a4,8(s0)
    8000e970:	17fe                	sll	a5,a5,0x3f
    8000e972:	07a5                	add	a5,a5,9
    8000e974:	32f70363          	beq	a4,a5,8000ec9a <external_interrupt_SEI+0x740>
    8000e978:	0000e517          	auipc	a0,0xe
    8000e97c:	19850513          	add	a0,a0,408 # 8001cb10 <__func__.1+0x318>
    8000e980:	5e20c0ef          	jal	8001af62 <printf>
    8000e984:	00144783          	lbu	a5,1(s0)
    8000e988:	c799                	beqz	a5,8000e996 <external_interrupt_SEI+0x43c>
    8000e98a:	57fd                	li	a5,-1
    8000e98c:	6418                	ld	a4,8(s0)
    8000e98e:	17fe                	sll	a5,a5,0x3f
    8000e990:	07a5                	add	a5,a5,9
    8000e992:	28f70863          	beq	a4,a5,8000ec22 <external_interrupt_SEI+0x6c8>
    8000e996:	0000e517          	auipc	a0,0xe
    8000e99a:	18250513          	add	a0,a0,386 # 8001cb18 <__func__.1+0x320>
    8000e99e:	5c40c0ef          	jal	8001af62 <printf>
    8000e9a2:	02900513          	li	a0,41
    8000e9a6:	48e0b0ef          	jal	80019e34 <putchar>
    8000e9aa:	4529                	li	a0,10
    8000e9ac:	4880b0ef          	jal	80019e34 <putchar>
    8000e9b0:	c491                	beqz	s1,8000e9bc <external_interrupt_SEI+0x462>
    8000e9b2:	00144783          	lbu	a5,1(s0)
    8000e9b6:	4481                	li	s1,0
    8000e9b8:	20079063          	bnez	a5,8000ebb8 <external_interrupt_SEI+0x65e>
        excpt.cause == CAUSE_SEI &&
        excpt.priv == PRIV_M
    ); 

    //vs模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=0，sie=1
    TEST_SETUP_EXCEPT();
    8000e9bc:	0ff0000f          	fence
    8000e9c0:	4785                	li	a5,1
    8000e9c2:	00f41023          	sh	a5,0(s0)
    8000e9c6:	0002e797          	auipc	a5,0x2e
    8000e9ca:	6807b123          	sd	zero,1666(a5) # 8003d048 <excpt+0x38>
    8000e9ce:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000e9d2:	4511                	li	a0,4
    8000e9d4:	90af20ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    8000e9d8:	10016073          	csrs	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    8000e9dc:	20000793          	li	a5,512
    8000e9e0:	1047a073          	csrs	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    8000e9e4:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    8000e9e8:	4509                	li	a0,2
    8000e9ea:	8f4f20ef          	jal	80000ade <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8000e9ee:	08200593          	li	a1,130
    8000e9f2:	00011617          	auipc	a2,0x11
    8000e9f6:	5ce60613          	add	a2,a2,1486 # 8001ffc0 <__func__.1+0x37c8>
    8000e9fa:	0000e517          	auipc	a0,0xe
    8000e9fe:	0fe50513          	add	a0,a0,254 # 8001caf8 <__func__.1+0x300>
    8000ea02:	5600c0ef          	jal	8001af62 <printf>
    8000ea06:	00144783          	lbu	a5,1(s0)
    8000ea0a:	0000e597          	auipc	a1,0xe
    8000ea0e:	0c658593          	add	a1,a1,198 # 8001cad0 <__func__.1+0x2d8>
    8000ea12:	c799                	beqz	a5,8000ea20 <external_interrupt_SEI+0x4c6>
    8000ea14:	57fd                	li	a5,-1
    8000ea16:	6418                	ld	a4,8(s0)
    8000ea18:	17fe                	sll	a5,a5,0x3f
    8000ea1a:	07a5                	add	a5,a5,9
    8000ea1c:	2af70f63          	beq	a4,a5,8000ecda <external_interrupt_SEI+0x780>
    8000ea20:	0000e517          	auipc	a0,0xe
    8000ea24:	0f050513          	add	a0,a0,240 # 8001cb10 <__func__.1+0x318>
    8000ea28:	53a0c0ef          	jal	8001af62 <printf>
    8000ea2c:	00144783          	lbu	a5,1(s0)
    8000ea30:	c799                	beqz	a5,8000ea3e <external_interrupt_SEI+0x4e4>
    8000ea32:	57fd                	li	a5,-1
    8000ea34:	6418                	ld	a4,8(s0)
    8000ea36:	17fe                	sll	a5,a5,0x3f
    8000ea38:	07a5                	add	a5,a5,9
    8000ea3a:	1cf70f63          	beq	a4,a5,8000ec18 <external_interrupt_SEI+0x6be>
    8000ea3e:	0000e517          	auipc	a0,0xe
    8000ea42:	0da50513          	add	a0,a0,218 # 8001cb18 <__func__.1+0x320>
    8000ea46:	51c0c0ef          	jal	8001af62 <printf>
    8000ea4a:	02900513          	li	a0,41
    8000ea4e:	3e60b0ef          	jal	80019e34 <putchar>
    8000ea52:	4529                	li	a0,10
    8000ea54:	3e00b0ef          	jal	80019e34 <putchar>
    8000ea58:	c491                	beqz	s1,8000ea64 <external_interrupt_SEI+0x50a>
    8000ea5a:	00144783          	lbu	a5,1(s0)
    8000ea5e:	4481                	li	s1,0
    8000ea60:	14079163          	bnez	a5,8000eba2 <external_interrupt_SEI+0x648>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //低特权模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=0，sie=0
    TEST_SETUP_EXCEPT();
    8000ea64:	0ff0000f          	fence
    8000ea68:	4785                	li	a5,1
    8000ea6a:	00f41023          	sh	a5,0(s0)
    8000ea6e:	0002e797          	auipc	a5,0x2e
    8000ea72:	5c07bd23          	sd	zero,1498(a5) # 8003d048 <excpt+0x38>
    8000ea76:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000ea7a:	4511                	li	a0,4
    8000ea7c:	862f20ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    8000ea80:	10016073          	csrs	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    8000ea84:	20000793          	li	a5,512
    8000ea88:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    8000ea8c:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    8000ea90:	4509                	li	a0,2
    8000ea92:	84cf20ef          	jal	80000ade <goto_priv>

    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    8000ea96:	08200593          	li	a1,130
    8000ea9a:	00011617          	auipc	a2,0x11
    8000ea9e:	57e60613          	add	a2,a2,1406 # 80020018 <__func__.1+0x3820>
    8000eaa2:	0000e517          	auipc	a0,0xe
    8000eaa6:	05650513          	add	a0,a0,86 # 8001caf8 <__func__.1+0x300>
    8000eaaa:	4b80c0ef          	jal	8001af62 <printf>
    8000eaae:	00144783          	lbu	a5,1(s0)
    8000eab2:	0000e597          	auipc	a1,0xe
    8000eab6:	01e58593          	add	a1,a1,30 # 8001cad0 <__func__.1+0x2d8>
    8000eaba:	e789                	bnez	a5,8000eac4 <external_interrupt_SEI+0x56a>
    8000eabc:	0000e597          	auipc	a1,0xe
    8000eac0:	00458593          	add	a1,a1,4 # 8001cac0 <__func__.1+0x2c8>
    8000eac4:	0000e517          	auipc	a0,0xe
    8000eac8:	04c50513          	add	a0,a0,76 # 8001cb10 <__func__.1+0x318>
    8000eacc:	4960c0ef          	jal	8001af62 <printf>
    8000ead0:	00144783          	lbu	a5,1(s0)
    8000ead4:	1a079863          	bnez	a5,8000ec84 <external_interrupt_SEI+0x72a>
    8000ead8:	4529                	li	a0,10
    8000eada:	35a0b0ef          	jal	80019e34 <putchar>
    8000eade:	c489                	beqz	s1,8000eae8 <external_interrupt_SEI+0x58e>
    8000eae0:	00144483          	lbu	s1,1(s0)
    8000eae4:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 

    //低特权模式下产生HS级单bit外部中断，sstatus.sie=0，且sip=0，sie=0
    TEST_SETUP_EXCEPT();
    8000eae8:	0ff0000f          	fence
    8000eaec:	4785                	li	a5,1
    8000eaee:	00f41023          	sh	a5,0(s0)
    8000eaf2:	0002e797          	auipc	a5,0x2e
    8000eaf6:	5407bb23          	sd	zero,1366(a5) # 8003d048 <excpt+0x38>
    8000eafa:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000eafe:	4511                	li	a0,4
    8000eb00:	fdff10ef          	jal	80000ade <goto_priv>
    CSRC(CSR_SSTATUS,1ULL << 1);     
    8000eb04:	10017073          	csrc	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    8000eb08:	20000793          	li	a5,512
    8000eb0c:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    8000eb10:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    8000eb14:	4509                	li	a0,2
    8000eb16:	fc9f10ef          	jal	80000ade <goto_priv>

    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    8000eb1a:	08200593          	li	a1,130
    8000eb1e:	00011617          	auipc	a2,0x11
    8000eb22:	4fa60613          	add	a2,a2,1274 # 80020018 <__func__.1+0x3820>
    8000eb26:	0000e517          	auipc	a0,0xe
    8000eb2a:	fd250513          	add	a0,a0,-46 # 8001caf8 <__func__.1+0x300>
    8000eb2e:	4340c0ef          	jal	8001af62 <printf>
    8000eb32:	00144783          	lbu	a5,1(s0)
    8000eb36:	0000e597          	auipc	a1,0xe
    8000eb3a:	f9a58593          	add	a1,a1,-102 # 8001cad0 <__func__.1+0x2d8>
    8000eb3e:	e789                	bnez	a5,8000eb48 <external_interrupt_SEI+0x5ee>
    8000eb40:	0000e597          	auipc	a1,0xe
    8000eb44:	f8058593          	add	a1,a1,-128 # 8001cac0 <__func__.1+0x2c8>
    8000eb48:	0000e517          	auipc	a0,0xe
    8000eb4c:	fc850513          	add	a0,a0,-56 # 8001cb10 <__func__.1+0x318>
    8000eb50:	4120c0ef          	jal	8001af62 <printf>
    8000eb54:	00144783          	lbu	a5,1(s0)
    8000eb58:	10079b63          	bnez	a5,8000ec6e <external_interrupt_SEI+0x714>
    8000eb5c:	4529                	li	a0,10
    8000eb5e:	2d60b0ef          	jal	80019e34 <putchar>
    8000eb62:	c481                	beqz	s1,8000eb6a <external_interrupt_SEI+0x610>
    8000eb64:	00144783          	lbu	a5,1(s0)
    8000eb68:	c79d                	beqz	a5,8000eb96 <external_interrupt_SEI+0x63c>
    8000eb6a:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    8000eb6c:	0000e597          	auipc	a1,0xe
    8000eb70:	f6458593          	add	a1,a1,-156 # 8001cad0 <__func__.1+0x2d8>
    8000eb74:	0000e517          	auipc	a0,0xe
    8000eb78:	00450513          	add	a0,a0,4 # 8001cb78 <__func__.1+0x380>
    8000eb7c:	3e60c0ef          	jal	8001af62 <printf>
    8000eb80:	4511                	li	a0,4
    8000eb82:	f5df10ef          	jal	80000ade <goto_priv>
    8000eb86:	fa0f20ef          	jal	80001326 <reset_state>
}
    8000eb8a:	60e2                	ld	ra,24(sp)
    8000eb8c:	8522                	mv	a0,s0
    8000eb8e:	6442                	ld	s0,16(sp)
    8000eb90:	64a2                	ld	s1,8(sp)
    8000eb92:	6105                	add	sp,sp,32
    8000eb94:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    8000eb96:	4405                	li	s0,1
    TEST_END();
    8000eb98:	0000e597          	auipc	a1,0xe
    8000eb9c:	f2858593          	add	a1,a1,-216 # 8001cac0 <__func__.1+0x2c8>
    8000eba0:	bfd1                	j	8000eb74 <external_interrupt_SEI+0x61a>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8000eba2:	57fd                	li	a5,-1
    8000eba4:	6418                	ld	a4,8(s0)
    8000eba6:	17fe                	sll	a5,a5,0x3f
    8000eba8:	07a5                	add	a5,a5,9
    8000ebaa:	eaf71de3          	bne	a4,a5,8000ea64 <external_interrupt_SEI+0x50a>
    8000ebae:	4044                	lw	s1,4(s0)
    8000ebb0:	14f1                	add	s1,s1,-4
    8000ebb2:	0014b493          	seqz	s1,s1
    8000ebb6:	b57d                	j	8000ea64 <external_interrupt_SEI+0x50a>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    8000ebb8:	57fd                	li	a5,-1
    8000ebba:	6418                	ld	a4,8(s0)
    8000ebbc:	17fe                	sll	a5,a5,0x3f
    8000ebbe:	07a5                	add	a5,a5,9
    8000ebc0:	def71ee3          	bne	a4,a5,8000e9bc <external_interrupt_SEI+0x462>
    8000ebc4:	4044                	lw	s1,4(s0)
    8000ebc6:	14f1                	add	s1,s1,-4
    8000ebc8:	0014b493          	seqz	s1,s1
    8000ebcc:	bbc5                	j	8000e9bc <external_interrupt_SEI+0x462>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8000ebce:	57fd                	li	a5,-1
    8000ebd0:	6418                	ld	a4,8(s0)
    8000ebd2:	17fe                	sll	a5,a5,0x3f
    8000ebd4:	07a5                	add	a5,a5,9
    8000ebd6:	d2f71fe3          	bne	a4,a5,8000e914 <external_interrupt_SEI+0x3ba>
    8000ebda:	4044                	lw	s1,4(s0)
    8000ebdc:	14f1                	add	s1,s1,-4
    8000ebde:	0014b493          	seqz	s1,s1
    8000ebe2:	bb0d                	j	8000e914 <external_interrupt_SEI+0x3ba>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8000ebe4:	57fd                	li	a5,-1
    8000ebe6:	6418                	ld	a4,8(s0)
    8000ebe8:	17fe                	sll	a5,a5,0x3f
    8000ebea:	07a5                	add	a5,a5,9
    8000ebec:	b6f71ce3          	bne	a4,a5,8000e764 <external_interrupt_SEI+0x20a>
    8000ebf0:	4044                	lw	s1,4(s0)
    8000ebf2:	14f1                	add	s1,s1,-4
    8000ebf4:	0014b493          	seqz	s1,s1
    8000ebf8:	b6b5                	j	8000e764 <external_interrupt_SEI+0x20a>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8000ebfa:	4058                	lw	a4,4(s0)
    8000ebfc:	4791                	li	a5,4
    8000ebfe:	cef718e3          	bne	a4,a5,8000e8ee <external_interrupt_SEI+0x394>
    8000ec02:	b301                	j	8000e902 <external_interrupt_SEI+0x3a8>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8000ec04:	4058                	lw	a4,4(s0)
    8000ec06:	4791                	li	a5,4
    8000ec08:	b2f71be3          	bne	a4,a5,8000e73e <external_interrupt_SEI+0x1e4>
    8000ec0c:	b699                	j	8000e752 <external_interrupt_SEI+0x1f8>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8000ec0e:	4058                	lw	a4,4(s0)
    8000ec10:	4791                	li	a5,4
    8000ec12:	9ef71ae3          	bne	a4,a5,8000e606 <external_interrupt_SEI+0xac>
    8000ec16:	b411                	j	8000e61a <external_interrupt_SEI+0xc0>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8000ec18:	4058                	lw	a4,4(s0)
    8000ec1a:	4791                	li	a5,4
    8000ec1c:	e2f711e3          	bne	a4,a5,8000ea3e <external_interrupt_SEI+0x4e4>
    8000ec20:	bd0d                	j	8000ea52 <external_interrupt_SEI+0x4f8>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    8000ec22:	4058                	lw	a4,4(s0)
    8000ec24:	4791                	li	a5,4
    8000ec26:	d6f718e3          	bne	a4,a5,8000e996 <external_interrupt_SEI+0x43c>
    8000ec2a:	b341                	j	8000e9aa <external_interrupt_SEI+0x450>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=0 and sie.seie=0",
    8000ec2c:	0000e517          	auipc	a0,0xe
    8000ec30:	eec50513          	add	a0,a0,-276 # 8001cb18 <__func__.1+0x320>
    8000ec34:	32e0c0ef          	jal	8001af62 <printf>
    8000ec38:	02900513          	li	a0,41
    8000ec3c:	1f80b0ef          	jal	80019e34 <putchar>
    8000ec40:	b931                	j	8000e85c <external_interrupt_SEI+0x302>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=1 and sie.seie=0",
    8000ec42:	0000e517          	auipc	a0,0xe
    8000ec46:	ed650513          	add	a0,a0,-298 # 8001cb18 <__func__.1+0x320>
    8000ec4a:	3180c0ef          	jal	8001af62 <printf>
    8000ec4e:	02900513          	li	a0,41
    8000ec52:	1e20b0ef          	jal	80019e34 <putchar>
    8000ec56:	b649                	j	8000e7d8 <external_interrupt_SEI+0x27e>
    TEST_ASSERT("hs mode leads to no interrupt  when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    8000ec58:	0000e517          	auipc	a0,0xe
    8000ec5c:	ec050513          	add	a0,a0,-320 # 8001cb18 <__func__.1+0x320>
    8000ec60:	3020c0ef          	jal	8001af62 <printf>
    8000ec64:	02900513          	li	a0,41
    8000ec68:	1cc0b0ef          	jal	80019e34 <putchar>
    8000ec6c:	bc35                	j	8000e6a8 <external_interrupt_SEI+0x14e>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    8000ec6e:	0000e517          	auipc	a0,0xe
    8000ec72:	eaa50513          	add	a0,a0,-342 # 8001cb18 <__func__.1+0x320>
    8000ec76:	2ec0c0ef          	jal	8001af62 <printf>
    8000ec7a:	02900513          	li	a0,41
    8000ec7e:	1b60b0ef          	jal	80019e34 <putchar>
    8000ec82:	bde9                	j	8000eb5c <external_interrupt_SEI+0x602>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    8000ec84:	0000e517          	auipc	a0,0xe
    8000ec88:	e9450513          	add	a0,a0,-364 # 8001cb18 <__func__.1+0x320>
    8000ec8c:	2d60c0ef          	jal	8001af62 <printf>
    8000ec90:	02900513          	li	a0,41
    8000ec94:	1a00b0ef          	jal	80019e34 <putchar>
    8000ec98:	b581                	j	8000ead8 <external_interrupt_SEI+0x57e>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    8000ec9a:	4058                	lw	a4,4(s0)
    8000ec9c:	4791                	li	a5,4
    8000ec9e:	ccf71de3          	bne	a4,a5,8000e978 <external_interrupt_SEI+0x41e>
    8000eca2:	0000e597          	auipc	a1,0xe
    8000eca6:	e1e58593          	add	a1,a1,-482 # 8001cac0 <__func__.1+0x2c8>
    8000ecaa:	b1f9                	j	8000e978 <external_interrupt_SEI+0x41e>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8000ecac:	4058                	lw	a4,4(s0)
    8000ecae:	4791                	li	a5,4
    8000ecb0:	c2f710e3          	bne	a4,a5,8000e8d0 <external_interrupt_SEI+0x376>
    8000ecb4:	0000e597          	auipc	a1,0xe
    8000ecb8:	e0c58593          	add	a1,a1,-500 # 8001cac0 <__func__.1+0x2c8>
    8000ecbc:	b911                	j	8000e8d0 <external_interrupt_SEI+0x376>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8000ecbe:	4044                	lw	s1,4(s0)
    8000ecc0:	14f1                	add	s1,s1,-4
    8000ecc2:	0014b493          	seqz	s1,s1
    8000ecc6:	b2bd                	j	8000e634 <external_interrupt_SEI+0xda>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8000ecc8:	4058                	lw	a4,4(s0)
    8000ecca:	4791                	li	a5,4
    8000eccc:	a4f71ae3          	bne	a4,a5,8000e720 <external_interrupt_SEI+0x1c6>
    8000ecd0:	0000e597          	auipc	a1,0xe
    8000ecd4:	df058593          	add	a1,a1,-528 # 8001cac0 <__func__.1+0x2c8>
    8000ecd8:	b4a1                	j	8000e720 <external_interrupt_SEI+0x1c6>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8000ecda:	4058                	lw	a4,4(s0)
    8000ecdc:	4791                	li	a5,4
    8000ecde:	d4f711e3          	bne	a4,a5,8000ea20 <external_interrupt_SEI+0x4c6>
    8000ece2:	0000e597          	auipc	a1,0xe
    8000ece6:	dde58593          	add	a1,a1,-546 # 8001cac0 <__func__.1+0x2c8>
    8000ecea:	bb1d                	j	8000ea20 <external_interrupt_SEI+0x4c6>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8000ecec:	4058                	lw	a4,4(s0)
    8000ecee:	4791                	li	a5,4
    8000ecf0:	8ef71ce3          	bne	a4,a5,8000e5e8 <external_interrupt_SEI+0x8e>
    8000ecf4:	0000e597          	auipc	a1,0xe
    8000ecf8:	dcc58593          	add	a1,a1,-564 # 8001cac0 <__func__.1+0x2c8>
    8000ecfc:	8edff06f          	j	8000e5e8 <external_interrupt_SEI+0x8e>

000000008000ed00 <external_interrupt_VSEI>:

bool external_interrupt_VSEI() {
    8000ed00:	1101                	add	sp,sp,-32

    TEST_START();
    8000ed02:	0000d597          	auipc	a1,0xd
    8000ed06:	f8658593          	add	a1,a1,-122 # 8001bc88 <__func__.0>
    8000ed0a:	0000e517          	auipc	a0,0xe
    8000ed0e:	dd650513          	add	a0,a0,-554 # 8001cae0 <__func__.1+0x2e8>
bool external_interrupt_VSEI() {
    8000ed12:	ec06                	sd	ra,24(sp)
    8000ed14:	e822                	sd	s0,16(sp)
    8000ed16:	e426                	sd	s1,8(sp)
    8000ed18:	e04a                	sd	s2,0(sp)
    TEST_START();
    8000ed1a:	2480c0ef          	jal	8001af62 <printf>
    8000ed1e:	4529                	li	a0,10
    8000ed20:	1140b0ef          	jal	80019e34 <putchar>

    TEST_SETUP_EXCEPT();
    8000ed24:	0ff0000f          	fence
    8000ed28:	4785                	li	a5,1
    8000ed2a:	0002e417          	auipc	s0,0x2e
    8000ed2e:	2e640413          	add	s0,s0,742 # 8003d010 <excpt>
    8000ed32:	00f41023          	sh	a5,0(s0)
    8000ed36:	0002e797          	auipc	a5,0x2e
    8000ed3a:	3007b923          	sd	zero,786(a5) # 8003d048 <excpt+0x38>
    8000ed3e:	0ff0000f          	fence

   
    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高
    goto_priv(PRIV_M);
    8000ed42:	4511                	li	a0,4
    8000ed44:	d9bf10ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    8000ed48:	40000793          	li	a5,1024
    8000ed4c:	6047a073          	csrs	hie,a5
    CSRS(CSR_HIP,HIP_VSEIP);
    8000ed50:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    8000ed54:	4509                	li	a0,2
    8000ed56:	d89f10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    8000ed5a:	08200593          	li	a1,130
    8000ed5e:	00011617          	auipc	a2,0x11
    8000ed62:	30a60613          	add	a2,a2,778 # 80020068 <__func__.1+0x3870>
    8000ed66:	0000e517          	auipc	a0,0xe
    8000ed6a:	d9250513          	add	a0,a0,-622 # 8001caf8 <__func__.1+0x300>
    8000ed6e:	1f40c0ef          	jal	8001af62 <printf>
    8000ed72:	00144783          	lbu	a5,1(s0)
    8000ed76:	0000e597          	auipc	a1,0xe
    8000ed7a:	d5a58593          	add	a1,a1,-678 # 8001cad0 <__func__.1+0x2d8>
    8000ed7e:	c799                	beqz	a5,8000ed8c <external_interrupt_VSEI+0x8c>
    8000ed80:	57fd                	li	a5,-1
    8000ed82:	6418                	ld	a4,8(s0)
    8000ed84:	17fe                	sll	a5,a5,0x3f
    8000ed86:	07a9                	add	a5,a5,10
    8000ed88:	5ef70063          	beq	a4,a5,8000f368 <external_interrupt_VSEI+0x668>
    8000ed8c:	0000e517          	auipc	a0,0xe
    8000ed90:	d8450513          	add	a0,a0,-636 # 8001cb10 <__func__.1+0x318>
    8000ed94:	1ce0c0ef          	jal	8001af62 <printf>
    8000ed98:	00144783          	lbu	a5,1(s0)
    8000ed9c:	c799                	beqz	a5,8000edaa <external_interrupt_VSEI+0xaa>
    8000ed9e:	57fd                	li	a5,-1
    8000eda0:	6418                	ld	a4,8(s0)
    8000eda2:	17fe                	sll	a5,a5,0x3f
    8000eda4:	07a9                	add	a5,a5,10
    8000eda6:	54f70063          	beq	a4,a5,8000f2e6 <external_interrupt_VSEI+0x5e6>
    8000edaa:	0000e517          	auipc	a0,0xe
    8000edae:	d6e50513          	add	a0,a0,-658 # 8001cb18 <__func__.1+0x320>
    8000edb2:	1b00c0ef          	jal	8001af62 <printf>
    8000edb6:	02900513          	li	a0,41
    8000edba:	07a0b0ef          	jal	80019e34 <putchar>
    8000edbe:	4529                	li	a0,10
    8000edc0:	0740b0ef          	jal	80019e34 <putchar>
    8000edc4:	00144783          	lbu	a5,1(s0)
    8000edc8:	4481                	li	s1,0
    8000edca:	c799                	beqz	a5,8000edd8 <external_interrupt_VSEI+0xd8>
    8000edcc:	57fd                	li	a5,-1
    8000edce:	6418                	ld	a4,8(s0)
    8000edd0:	17fe                	sll	a5,a5,0x3f
    8000edd2:	07a9                	add	a5,a5,10
    8000edd4:	56f70c63          	beq	a4,a5,8000f34c <external_interrupt_VSEI+0x64c>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高 ,开mideleg
    TEST_SETUP_EXCEPT();
    8000edd8:	0ff0000f          	fence
    8000eddc:	4785                	li	a5,1
    8000edde:	00f41023          	sh	a5,0(s0)
    8000ede2:	0002e797          	auipc	a5,0x2e
    8000ede6:	2607b323          	sd	zero,614(a5) # 8003d048 <excpt+0x38>
    8000edea:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000edee:	4511                	li	a0,4
    8000edf0:	ceff10ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    8000edf4:	40000793          	li	a5,1024
    8000edf8:	6047a073          	csrs	hie,a5
    CSRS(CSR_MIDELEG,(uint64_t)-1);
    8000edfc:	597d                	li	s2,-1
    8000edfe:	30392073          	csrs	mideleg,s2
    CSRS(CSR_HIP,HIP_VSEIP);
    8000ee02:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    8000ee06:	4509                	li	a0,2
    8000ee08:	cd7f10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    8000ee0c:	08200593          	li	a1,130
    8000ee10:	00011617          	auipc	a2,0x11
    8000ee14:	2a860613          	add	a2,a2,680 # 800200b8 <__func__.1+0x38c0>
    8000ee18:	0000e517          	auipc	a0,0xe
    8000ee1c:	ce050513          	add	a0,a0,-800 # 8001caf8 <__func__.1+0x300>
    8000ee20:	1420c0ef          	jal	8001af62 <printf>
    8000ee24:	00144783          	lbu	a5,1(s0)
    8000ee28:	0000e597          	auipc	a1,0xe
    8000ee2c:	ca858593          	add	a1,a1,-856 # 8001cad0 <__func__.1+0x2d8>
    8000ee30:	c791                	beqz	a5,8000ee3c <external_interrupt_VSEI+0x13c>
    8000ee32:	641c                	ld	a5,8(s0)
    8000ee34:	197e                	sll	s2,s2,0x3f
    8000ee36:	0929                	add	s2,s2,10
    8000ee38:	51278f63          	beq	a5,s2,8000f356 <external_interrupt_VSEI+0x656>
    8000ee3c:	0000e517          	auipc	a0,0xe
    8000ee40:	cd450513          	add	a0,a0,-812 # 8001cb10 <__func__.1+0x318>
    8000ee44:	11e0c0ef          	jal	8001af62 <printf>
    8000ee48:	00144783          	lbu	a5,1(s0)
    8000ee4c:	c799                	beqz	a5,8000ee5a <external_interrupt_VSEI+0x15a>
    8000ee4e:	57fd                	li	a5,-1
    8000ee50:	6418                	ld	a4,8(s0)
    8000ee52:	17fe                	sll	a5,a5,0x3f
    8000ee54:	07a9                	add	a5,a5,10
    8000ee56:	46f70e63          	beq	a4,a5,8000f2d2 <external_interrupt_VSEI+0x5d2>
    8000ee5a:	0000e517          	auipc	a0,0xe
    8000ee5e:	cbe50513          	add	a0,a0,-834 # 8001cb18 <__func__.1+0x320>
    8000ee62:	1000c0ef          	jal	8001af62 <printf>
    8000ee66:	02900513          	li	a0,41
    8000ee6a:	7cb0a0ef          	jal	80019e34 <putchar>
    8000ee6e:	4529                	li	a0,10
    8000ee70:	7c50a0ef          	jal	80019e34 <putchar>
    8000ee74:	c491                	beqz	s1,8000ee80 <external_interrupt_VSEI+0x180>
    8000ee76:	00144783          	lbu	a5,1(s0)
    8000ee7a:	4481                	li	s1,0
    8000ee7c:	44079063          	bnez	a5,8000f2bc <external_interrupt_VSEI+0x5bc>
        excpt.priv == PRIV_HS
    ); 


    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高 ,开mideleg,hideleg
    TEST_SETUP_EXCEPT();
    8000ee80:	0ff0000f          	fence
    8000ee84:	4785                	li	a5,1
    8000ee86:	00f41023          	sh	a5,0(s0)
    8000ee8a:	0002e797          	auipc	a5,0x2e
    8000ee8e:	1a07bf23          	sd	zero,446(a5) # 8003d048 <excpt+0x38>
    8000ee92:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000ee96:	4511                	li	a0,4
    8000ee98:	c47f10ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    8000ee9c:	40000793          	li	a5,1024
    8000eea0:	6047a073          	csrs	hie,a5
    CSRS(CSR_MIDELEG,(uint64_t)-1);
    8000eea4:	597d                	li	s2,-1
    8000eea6:	30392073          	csrs	mideleg,s2
    CSRS(CSR_HIDELEG,(uint64_t)-1);
    8000eeaa:	60392073          	csrs	hideleg,s2
    CSRS(CSR_HIP,HIP_VSEIP);
    8000eeae:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    8000eeb2:	4509                	li	a0,2
    8000eeb4:	c2bf10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    8000eeb8:	08200593          	li	a1,130
    8000eebc:	00011617          	auipc	a2,0x11
    8000eec0:	25c60613          	add	a2,a2,604 # 80020118 <__func__.1+0x3920>
    8000eec4:	0000e517          	auipc	a0,0xe
    8000eec8:	c3450513          	add	a0,a0,-972 # 8001caf8 <__func__.1+0x300>
    8000eecc:	0960c0ef          	jal	8001af62 <printf>
    8000eed0:	00144783          	lbu	a5,1(s0)
    8000eed4:	0000e597          	auipc	a1,0xe
    8000eed8:	bfc58593          	add	a1,a1,-1028 # 8001cad0 <__func__.1+0x2d8>
    8000eedc:	c791                	beqz	a5,8000eee8 <external_interrupt_VSEI+0x1e8>
    8000eede:	641c                	ld	a5,8(s0)
    8000eee0:	197e                	sll	s2,s2,0x3f
    8000eee2:	0929                	add	s2,s2,10
    8000eee4:	49278b63          	beq	a5,s2,8000f37a <external_interrupt_VSEI+0x67a>
    8000eee8:	0000e517          	auipc	a0,0xe
    8000eeec:	c2850513          	add	a0,a0,-984 # 8001cb10 <__func__.1+0x318>
    8000eef0:	0720c0ef          	jal	8001af62 <printf>
    8000eef4:	00144783          	lbu	a5,1(s0)
    8000eef8:	c799                	beqz	a5,8000ef06 <external_interrupt_VSEI+0x206>
    8000eefa:	57fd                	li	a5,-1
    8000eefc:	6418                	ld	a4,8(s0)
    8000eefe:	17fe                	sll	a5,a5,0x3f
    8000ef00:	07a9                	add	a5,a5,10
    8000ef02:	3cf70d63          	beq	a4,a5,8000f2dc <external_interrupt_VSEI+0x5dc>
    8000ef06:	0000e517          	auipc	a0,0xe
    8000ef0a:	c1250513          	add	a0,a0,-1006 # 8001cb18 <__func__.1+0x320>
    8000ef0e:	0540c0ef          	jal	8001af62 <printf>
    8000ef12:	02900513          	li	a0,41
    8000ef16:	71f0a0ef          	jal	80019e34 <putchar>
    8000ef1a:	4529                	li	a0,10
    8000ef1c:	7190a0ef          	jal	80019e34 <putchar>
    8000ef20:	c491                	beqz	s1,8000ef2c <external_interrupt_VSEI+0x22c>
    8000ef22:	00144783          	lbu	a5,1(s0)
    8000ef26:	4481                	li	s1,0
    8000ef28:	36079f63          	bnez	a5,8000f2a6 <external_interrupt_VSEI+0x5a6>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=1，hie.SSEIE=0
    TEST_SETUP_EXCEPT();
    8000ef2c:	0ff0000f          	fence
    8000ef30:	4785                	li	a5,1
    8000ef32:	00f41023          	sh	a5,0(s0)
    8000ef36:	0002e797          	auipc	a5,0x2e
    8000ef3a:	1007b923          	sd	zero,274(a5) # 8003d048 <excpt+0x38>
    8000ef3e:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000ef42:	4511                	li	a0,4
    8000ef44:	b9bf10ef          	jal	80000ade <goto_priv>
    CSRC(CSR_HIE,HIE_VSEIE);
    8000ef48:	40000793          	li	a5,1024
    8000ef4c:	6047b073          	csrc	hie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    8000ef50:	577d                	li	a4,-1
    8000ef52:	30373073          	csrc	mideleg,a4
    CSRC(CSR_HIDELEG,(uint64_t)-1);
    8000ef56:	60373073          	csrc	hideleg,a4
    CSRS(CSR_HIP,HIP_VSEIP);
    8000ef5a:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    8000ef5e:	4509                	li	a0,2
    8000ef60:	b7ff10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("vs mode leads to no interrupt when hip.vseip=1 and hie.vseie=0",
    8000ef64:	08200593          	li	a1,130
    8000ef68:	00011617          	auipc	a2,0x11
    8000ef6c:	22060613          	add	a2,a2,544 # 80020188 <__func__.1+0x3990>
    8000ef70:	0000e517          	auipc	a0,0xe
    8000ef74:	b8850513          	add	a0,a0,-1144 # 8001caf8 <__func__.1+0x300>
    8000ef78:	7eb0b0ef          	jal	8001af62 <printf>
    8000ef7c:	00144783          	lbu	a5,1(s0)
    8000ef80:	0000e597          	auipc	a1,0xe
    8000ef84:	b5058593          	add	a1,a1,-1200 # 8001cad0 <__func__.1+0x2d8>
    8000ef88:	e789                	bnez	a5,8000ef92 <external_interrupt_VSEI+0x292>
    8000ef8a:	0000e597          	auipc	a1,0xe
    8000ef8e:	b3658593          	add	a1,a1,-1226 # 8001cac0 <__func__.1+0x2c8>
    8000ef92:	0000e517          	auipc	a0,0xe
    8000ef96:	b7e50513          	add	a0,a0,-1154 # 8001cb10 <__func__.1+0x318>
    8000ef9a:	7c90b0ef          	jal	8001af62 <printf>
    8000ef9e:	00144783          	lbu	a5,1(s0)
    8000efa2:	38079163          	bnez	a5,8000f324 <external_interrupt_VSEI+0x624>
    8000efa6:	4529                	li	a0,10
    8000efa8:	68d0a0ef          	jal	80019e34 <putchar>
    8000efac:	c489                	beqz	s1,8000efb6 <external_interrupt_VSEI+0x2b6>
    8000efae:	00144483          	lbu	s1,1(s0)
    8000efb2:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1
    TEST_SETUP_EXCEPT();
    8000efb6:	0ff0000f          	fence
    8000efba:	4785                	li	a5,1
    8000efbc:	00f41023          	sh	a5,0(s0)
    8000efc0:	0002e797          	auipc	a5,0x2e
    8000efc4:	0807b423          	sd	zero,136(a5) # 8003d048 <excpt+0x38>
    8000efc8:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000efcc:	4511                	li	a0,4
    8000efce:	b11f10ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    8000efd2:	40000793          	li	a5,1024
    8000efd6:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    8000efda:	6447b073          	csrc	hip,a5

    goto_priv(PRIV_VS);
    8000efde:	4509                	li	a0,2
    8000efe0:	afff10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    8000efe4:	08200593          	li	a1,130
    8000efe8:	00011617          	auipc	a2,0x11
    8000efec:	1e060613          	add	a2,a2,480 # 800201c8 <__func__.1+0x39d0>
    8000eff0:	0000e517          	auipc	a0,0xe
    8000eff4:	b0850513          	add	a0,a0,-1272 # 8001caf8 <__func__.1+0x300>
    8000eff8:	76b0b0ef          	jal	8001af62 <printf>
    8000effc:	00144783          	lbu	a5,1(s0)
    8000f000:	0000e597          	auipc	a1,0xe
    8000f004:	ad058593          	add	a1,a1,-1328 # 8001cad0 <__func__.1+0x2d8>
    8000f008:	e799                	bnez	a5,8000f016 <external_interrupt_VSEI+0x316>
    8000f00a:	57fd                	li	a5,-1
    8000f00c:	6418                	ld	a4,8(s0)
    8000f00e:	17fe                	sll	a5,a5,0x3f
    8000f010:	07a9                	add	a5,a5,10
    8000f012:	38f70663          	beq	a4,a5,8000f39e <external_interrupt_VSEI+0x69e>
    8000f016:	0000e517          	auipc	a0,0xe
    8000f01a:	afa50513          	add	a0,a0,-1286 # 8001cb10 <__func__.1+0x318>
    8000f01e:	7450b0ef          	jal	8001af62 <printf>
    8000f022:	00144783          	lbu	a5,1(s0)
    8000f026:	e799                	bnez	a5,8000f034 <external_interrupt_VSEI+0x334>
    8000f028:	57fd                	li	a5,-1
    8000f02a:	6418                	ld	a4,8(s0)
    8000f02c:	17fe                	sll	a5,a5,0x3f
    8000f02e:	07a9                	add	a5,a5,10
    8000f030:	2cf70063          	beq	a4,a5,8000f2f0 <external_interrupt_VSEI+0x5f0>
    8000f034:	0000e517          	auipc	a0,0xe
    8000f038:	ae450513          	add	a0,a0,-1308 # 8001cb18 <__func__.1+0x320>
    8000f03c:	7270b0ef          	jal	8001af62 <printf>
    8000f040:	02900513          	li	a0,41
    8000f044:	5f10a0ef          	jal	80019e34 <putchar>
    8000f048:	4529                	li	a0,10
    8000f04a:	5eb0a0ef          	jal	80019e34 <putchar>
    8000f04e:	c491                	beqz	s1,8000f05a <external_interrupt_VSEI+0x35a>
    8000f050:	00144783          	lbu	a5,1(s0)
    8000f054:	4481                	li	s1,0
    8000f056:	22078d63          	beqz	a5,8000f290 <external_interrupt_VSEI+0x590>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1，开mideleg
    TEST_SETUP_EXCEPT();
    8000f05a:	0ff0000f          	fence
    8000f05e:	4785                	li	a5,1
    8000f060:	00f41023          	sh	a5,0(s0)
    8000f064:	0002e797          	auipc	a5,0x2e
    8000f068:	fe07b223          	sd	zero,-28(a5) # 8003d048 <excpt+0x38>
    8000f06c:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000f070:	4511                	li	a0,4
    8000f072:	a6df10ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    8000f076:	40000793          	li	a5,1024
    8000f07a:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    8000f07e:	6447b073          	csrc	hip,a5
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    8000f082:	597d                	li	s2,-1
    8000f084:	30391073          	csrw	mideleg,s2

    goto_priv(PRIV_VS);
    8000f088:	4509                	li	a0,2
    8000f08a:	a55f10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    8000f08e:	08200593          	li	a1,130
    8000f092:	00011617          	auipc	a2,0x11
    8000f096:	18660613          	add	a2,a2,390 # 80020218 <__func__.1+0x3a20>
    8000f09a:	0000e517          	auipc	a0,0xe
    8000f09e:	a5e50513          	add	a0,a0,-1442 # 8001caf8 <__func__.1+0x300>
    8000f0a2:	6c10b0ef          	jal	8001af62 <printf>
    8000f0a6:	00144783          	lbu	a5,1(s0)
    8000f0aa:	0000e597          	auipc	a1,0xe
    8000f0ae:	a2658593          	add	a1,a1,-1498 # 8001cad0 <__func__.1+0x2d8>
    8000f0b2:	e791                	bnez	a5,8000f0be <external_interrupt_VSEI+0x3be>
    8000f0b4:	641c                	ld	a5,8(s0)
    8000f0b6:	197e                	sll	s2,s2,0x3f
    8000f0b8:	0929                	add	s2,s2,10
    8000f0ba:	29278063          	beq	a5,s2,8000f33a <external_interrupt_VSEI+0x63a>
    8000f0be:	0000e517          	auipc	a0,0xe
    8000f0c2:	a5250513          	add	a0,a0,-1454 # 8001cb10 <__func__.1+0x318>
    8000f0c6:	69d0b0ef          	jal	8001af62 <printf>
    8000f0ca:	00144783          	lbu	a5,1(s0)
    8000f0ce:	e799                	bnez	a5,8000f0dc <external_interrupt_VSEI+0x3dc>
    8000f0d0:	57fd                	li	a5,-1
    8000f0d2:	6418                	ld	a4,8(s0)
    8000f0d4:	17fe                	sll	a5,a5,0x3f
    8000f0d6:	07a9                	add	a5,a5,10
    8000f0d8:	22f70663          	beq	a4,a5,8000f304 <external_interrupt_VSEI+0x604>
    8000f0dc:	0000e517          	auipc	a0,0xe
    8000f0e0:	a3c50513          	add	a0,a0,-1476 # 8001cb18 <__func__.1+0x320>
    8000f0e4:	67f0b0ef          	jal	8001af62 <printf>
    8000f0e8:	02900513          	li	a0,41
    8000f0ec:	5490a0ef          	jal	80019e34 <putchar>
    8000f0f0:	4529                	li	a0,10
    8000f0f2:	5430a0ef          	jal	80019e34 <putchar>
    8000f0f6:	c491                	beqz	s1,8000f102 <external_interrupt_VSEI+0x402>
    8000f0f8:	00144783          	lbu	a5,1(s0)
    8000f0fc:	4481                	li	s1,0
    8000f0fe:	16078e63          	beqz	a5,8000f27a <external_interrupt_VSEI+0x57a>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1，开mideleg,hideleg
    TEST_SETUP_EXCEPT();
    8000f102:	0ff0000f          	fence
    8000f106:	4785                	li	a5,1
    8000f108:	00f41023          	sh	a5,0(s0)
    8000f10c:	0002e797          	auipc	a5,0x2e
    8000f110:	f207be23          	sd	zero,-196(a5) # 8003d048 <excpt+0x38>
    8000f114:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000f118:	4511                	li	a0,4
    8000f11a:	9c5f10ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    8000f11e:	40000793          	li	a5,1024
    8000f122:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    8000f126:	6447b073          	csrc	hip,a5
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    8000f12a:	597d                	li	s2,-1
    8000f12c:	30391073          	csrw	mideleg,s2
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000f130:	60391073          	csrw	hideleg,s2

    goto_priv(PRIV_VS);
    8000f134:	4509                	li	a0,2
    8000f136:	9a9f10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    8000f13a:	08200593          	li	a1,130
    8000f13e:	00011617          	auipc	a2,0x11
    8000f142:	13a60613          	add	a2,a2,314 # 80020278 <__func__.1+0x3a80>
    8000f146:	0000e517          	auipc	a0,0xe
    8000f14a:	9b250513          	add	a0,a0,-1614 # 8001caf8 <__func__.1+0x300>
    8000f14e:	6150b0ef          	jal	8001af62 <printf>
    8000f152:	00144783          	lbu	a5,1(s0)
    8000f156:	0000e597          	auipc	a1,0xe
    8000f15a:	97a58593          	add	a1,a1,-1670 # 8001cad0 <__func__.1+0x2d8>
    8000f15e:	e791                	bnez	a5,8000f16a <external_interrupt_VSEI+0x46a>
    8000f160:	641c                	ld	a5,8(s0)
    8000f162:	197e                	sll	s2,s2,0x3f
    8000f164:	0929                	add	s2,s2,10
    8000f166:	23278363          	beq	a5,s2,8000f38c <external_interrupt_VSEI+0x68c>
    8000f16a:	0000e517          	auipc	a0,0xe
    8000f16e:	9a650513          	add	a0,a0,-1626 # 8001cb10 <__func__.1+0x318>
    8000f172:	5f10b0ef          	jal	8001af62 <printf>
    8000f176:	00144783          	lbu	a5,1(s0)
    8000f17a:	e799                	bnez	a5,8000f188 <external_interrupt_VSEI+0x488>
    8000f17c:	57fd                	li	a5,-1
    8000f17e:	6418                	ld	a4,8(s0)
    8000f180:	17fe                	sll	a5,a5,0x3f
    8000f182:	07a9                	add	a5,a5,10
    8000f184:	16f70b63          	beq	a4,a5,8000f2fa <external_interrupt_VSEI+0x5fa>
    8000f188:	0000e517          	auipc	a0,0xe
    8000f18c:	99050513          	add	a0,a0,-1648 # 8001cb18 <__func__.1+0x320>
    8000f190:	5d30b0ef          	jal	8001af62 <printf>
    8000f194:	02900513          	li	a0,41
    8000f198:	49d0a0ef          	jal	80019e34 <putchar>
    8000f19c:	4529                	li	a0,10
    8000f19e:	4970a0ef          	jal	80019e34 <putchar>
    8000f1a2:	c489                	beqz	s1,8000f1ac <external_interrupt_VSEI+0x4ac>
    8000f1a4:	00144783          	lbu	a5,1(s0)
    8000f1a8:	4481                	li	s1,0
    8000f1aa:	cfcd                	beqz	a5,8000f264 <external_interrupt_VSEI+0x564>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=0
    TEST_SETUP_EXCEPT();
    8000f1ac:	0ff0000f          	fence
    8000f1b0:	4785                	li	a5,1
    8000f1b2:	00f41023          	sh	a5,0(s0)
    8000f1b6:	0002e797          	auipc	a5,0x2e
    8000f1ba:	e807b923          	sd	zero,-366(a5) # 8003d048 <excpt+0x38>
    8000f1be:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000f1c2:	4511                	li	a0,4
    8000f1c4:	91bf10ef          	jal	80000ade <goto_priv>
    CSRC(CSR_HIE,HIE_VSEIE);
    8000f1c8:	40000793          	li	a5,1024
    8000f1cc:	6047b073          	csrc	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    8000f1d0:	6447b073          	csrc	hip,a5

    goto_priv(PRIV_VS);
    8000f1d4:	4509                	li	a0,2
    8000f1d6:	909f10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    8000f1da:	08200593          	li	a1,130
    8000f1de:	00011617          	auipc	a2,0x11
    8000f1e2:	10a60613          	add	a2,a2,266 # 800202e8 <__func__.1+0x3af0>
    8000f1e6:	0000e517          	auipc	a0,0xe
    8000f1ea:	91250513          	add	a0,a0,-1774 # 8001caf8 <__func__.1+0x300>
    8000f1ee:	5750b0ef          	jal	8001af62 <printf>
    8000f1f2:	00144783          	lbu	a5,1(s0)
    8000f1f6:	0000e597          	auipc	a1,0xe
    8000f1fa:	8da58593          	add	a1,a1,-1830 # 8001cad0 <__func__.1+0x2d8>
    8000f1fe:	e789                	bnez	a5,8000f208 <external_interrupt_VSEI+0x508>
    8000f200:	0000e597          	auipc	a1,0xe
    8000f204:	8c058593          	add	a1,a1,-1856 # 8001cac0 <__func__.1+0x2c8>
    8000f208:	0000e517          	auipc	a0,0xe
    8000f20c:	90850513          	add	a0,a0,-1784 # 8001cb10 <__func__.1+0x318>
    8000f210:	5530b0ef          	jal	8001af62 <printf>
    8000f214:	00144783          	lbu	a5,1(s0)
    8000f218:	0e079b63          	bnez	a5,8000f30e <external_interrupt_VSEI+0x60e>
    8000f21c:	4529                	li	a0,10
    8000f21e:	4170a0ef          	jal	80019e34 <putchar>
    8000f222:	c481                	beqz	s1,8000f22a <external_interrupt_VSEI+0x52a>
    8000f224:	00144783          	lbu	a5,1(s0)
    8000f228:	cb85                	beqz	a5,8000f258 <external_interrupt_VSEI+0x558>
    8000f22a:	4401                	li	s0,0





    TEST_END();
    8000f22c:	0000e597          	auipc	a1,0xe
    8000f230:	8a458593          	add	a1,a1,-1884 # 8001cad0 <__func__.1+0x2d8>
    8000f234:	0000e517          	auipc	a0,0xe
    8000f238:	94450513          	add	a0,a0,-1724 # 8001cb78 <__func__.1+0x380>
    8000f23c:	5270b0ef          	jal	8001af62 <printf>
    8000f240:	4511                	li	a0,4
    8000f242:	89df10ef          	jal	80000ade <goto_priv>
    8000f246:	8e0f20ef          	jal	80001326 <reset_state>
}
    8000f24a:	60e2                	ld	ra,24(sp)
    8000f24c:	8522                	mv	a0,s0
    8000f24e:	6442                	ld	s0,16(sp)
    8000f250:	64a2                	ld	s1,8(sp)
    8000f252:	6902                	ld	s2,0(sp)
    8000f254:	6105                	add	sp,sp,32
    8000f256:	8082                	ret
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    8000f258:	4405                	li	s0,1
    TEST_END();
    8000f25a:	0000e597          	auipc	a1,0xe
    8000f25e:	86658593          	add	a1,a1,-1946 # 8001cac0 <__func__.1+0x2c8>
    8000f262:	bfc9                	j	8000f234 <external_interrupt_VSEI+0x534>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    8000f264:	57fd                	li	a5,-1
    8000f266:	6418                	ld	a4,8(s0)
    8000f268:	17fe                	sll	a5,a5,0x3f
    8000f26a:	07a9                	add	a5,a5,10
    8000f26c:	f4f710e3          	bne	a4,a5,8000f1ac <external_interrupt_VSEI+0x4ac>
    8000f270:	4044                	lw	s1,4(s0)
    8000f272:	14f9                	add	s1,s1,-2
    8000f274:	0014b493          	seqz	s1,s1
    8000f278:	bf15                	j	8000f1ac <external_interrupt_VSEI+0x4ac>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    8000f27a:	57fd                	li	a5,-1
    8000f27c:	6418                	ld	a4,8(s0)
    8000f27e:	17fe                	sll	a5,a5,0x3f
    8000f280:	07a9                	add	a5,a5,10
    8000f282:	e8f710e3          	bne	a4,a5,8000f102 <external_interrupt_VSEI+0x402>
    8000f286:	4044                	lw	s1,4(s0)
    8000f288:	14f5                	add	s1,s1,-3
    8000f28a:	0014b493          	seqz	s1,s1
    8000f28e:	bd95                	j	8000f102 <external_interrupt_VSEI+0x402>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    8000f290:	57fd                	li	a5,-1
    8000f292:	6418                	ld	a4,8(s0)
    8000f294:	17fe                	sll	a5,a5,0x3f
    8000f296:	07a9                	add	a5,a5,10
    8000f298:	dcf711e3          	bne	a4,a5,8000f05a <external_interrupt_VSEI+0x35a>
    8000f29c:	4044                	lw	s1,4(s0)
    8000f29e:	14f1                	add	s1,s1,-4
    8000f2a0:	0014b493          	seqz	s1,s1
    8000f2a4:	bb5d                	j	8000f05a <external_interrupt_VSEI+0x35a>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    8000f2a6:	57fd                	li	a5,-1
    8000f2a8:	6418                	ld	a4,8(s0)
    8000f2aa:	17fe                	sll	a5,a5,0x3f
    8000f2ac:	07a9                	add	a5,a5,10
    8000f2ae:	c6f71fe3          	bne	a4,a5,8000ef2c <external_interrupt_VSEI+0x22c>
    8000f2b2:	4044                	lw	s1,4(s0)
    8000f2b4:	14f9                	add	s1,s1,-2
    8000f2b6:	0014b493          	seqz	s1,s1
    8000f2ba:	b98d                	j	8000ef2c <external_interrupt_VSEI+0x22c>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    8000f2bc:	57fd                	li	a5,-1
    8000f2be:	6418                	ld	a4,8(s0)
    8000f2c0:	17fe                	sll	a5,a5,0x3f
    8000f2c2:	07a9                	add	a5,a5,10
    8000f2c4:	baf71ee3          	bne	a4,a5,8000ee80 <external_interrupt_VSEI+0x180>
    8000f2c8:	4044                	lw	s1,4(s0)
    8000f2ca:	14f5                	add	s1,s1,-3
    8000f2cc:	0014b493          	seqz	s1,s1
    8000f2d0:	be45                	j	8000ee80 <external_interrupt_VSEI+0x180>
    8000f2d2:	4058                	lw	a4,4(s0)
    8000f2d4:	478d                	li	a5,3
    8000f2d6:	b8f712e3          	bne	a4,a5,8000ee5a <external_interrupt_VSEI+0x15a>
    8000f2da:	be51                	j	8000ee6e <external_interrupt_VSEI+0x16e>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    8000f2dc:	4058                	lw	a4,4(s0)
    8000f2de:	4789                	li	a5,2
    8000f2e0:	c2f713e3          	bne	a4,a5,8000ef06 <external_interrupt_VSEI+0x206>
    8000f2e4:	b91d                	j	8000ef1a <external_interrupt_VSEI+0x21a>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    8000f2e6:	4058                	lw	a4,4(s0)
    8000f2e8:	4791                	li	a5,4
    8000f2ea:	acf710e3          	bne	a4,a5,8000edaa <external_interrupt_VSEI+0xaa>
    8000f2ee:	bcc1                	j	8000edbe <external_interrupt_VSEI+0xbe>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    8000f2f0:	4058                	lw	a4,4(s0)
    8000f2f2:	4791                	li	a5,4
    8000f2f4:	d4f710e3          	bne	a4,a5,8000f034 <external_interrupt_VSEI+0x334>
    8000f2f8:	bb81                	j	8000f048 <external_interrupt_VSEI+0x348>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    8000f2fa:	4058                	lw	a4,4(s0)
    8000f2fc:	4789                	li	a5,2
    8000f2fe:	e8f715e3          	bne	a4,a5,8000f188 <external_interrupt_VSEI+0x488>
    8000f302:	bd69                	j	8000f19c <external_interrupt_VSEI+0x49c>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    8000f304:	4058                	lw	a4,4(s0)
    8000f306:	478d                	li	a5,3
    8000f308:	dcf71ae3          	bne	a4,a5,8000f0dc <external_interrupt_VSEI+0x3dc>
    8000f30c:	b3d5                	j	8000f0f0 <external_interrupt_VSEI+0x3f0>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    8000f30e:	0000e517          	auipc	a0,0xe
    8000f312:	80a50513          	add	a0,a0,-2038 # 8001cb18 <__func__.1+0x320>
    8000f316:	44d0b0ef          	jal	8001af62 <printf>
    8000f31a:	02900513          	li	a0,41
    8000f31e:	3170a0ef          	jal	80019e34 <putchar>
    8000f322:	bded                	j	8000f21c <external_interrupt_VSEI+0x51c>
    TEST_ASSERT("vs mode leads to no interrupt when hip.vseip=1 and hie.vseie=0",
    8000f324:	0000d517          	auipc	a0,0xd
    8000f328:	7f450513          	add	a0,a0,2036 # 8001cb18 <__func__.1+0x320>
    8000f32c:	4370b0ef          	jal	8001af62 <printf>
    8000f330:	02900513          	li	a0,41
    8000f334:	3010a0ef          	jal	80019e34 <putchar>
    8000f338:	b1bd                	j	8000efa6 <external_interrupt_VSEI+0x2a6>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    8000f33a:	4058                	lw	a4,4(s0)
    8000f33c:	478d                	li	a5,3
    8000f33e:	d8f710e3          	bne	a4,a5,8000f0be <external_interrupt_VSEI+0x3be>
    8000f342:	0000d597          	auipc	a1,0xd
    8000f346:	77e58593          	add	a1,a1,1918 # 8001cac0 <__func__.1+0x2c8>
    8000f34a:	bb95                	j	8000f0be <external_interrupt_VSEI+0x3be>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    8000f34c:	4044                	lw	s1,4(s0)
    8000f34e:	14f1                	add	s1,s1,-4
    8000f350:	0014b493          	seqz	s1,s1
    8000f354:	b451                	j	8000edd8 <external_interrupt_VSEI+0xd8>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    8000f356:	4058                	lw	a4,4(s0)
    8000f358:	478d                	li	a5,3
    8000f35a:	aef711e3          	bne	a4,a5,8000ee3c <external_interrupt_VSEI+0x13c>
    8000f35e:	0000d597          	auipc	a1,0xd
    8000f362:	76258593          	add	a1,a1,1890 # 8001cac0 <__func__.1+0x2c8>
    8000f366:	bcd9                	j	8000ee3c <external_interrupt_VSEI+0x13c>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    8000f368:	4058                	lw	a4,4(s0)
    8000f36a:	4791                	li	a5,4
    8000f36c:	a2f710e3          	bne	a4,a5,8000ed8c <external_interrupt_VSEI+0x8c>
    8000f370:	0000d597          	auipc	a1,0xd
    8000f374:	75058593          	add	a1,a1,1872 # 8001cac0 <__func__.1+0x2c8>
    8000f378:	bc11                	j	8000ed8c <external_interrupt_VSEI+0x8c>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    8000f37a:	4058                	lw	a4,4(s0)
    8000f37c:	4789                	li	a5,2
    8000f37e:	b6f715e3          	bne	a4,a5,8000eee8 <external_interrupt_VSEI+0x1e8>
    8000f382:	0000d597          	auipc	a1,0xd
    8000f386:	73e58593          	add	a1,a1,1854 # 8001cac0 <__func__.1+0x2c8>
    8000f38a:	beb9                	j	8000eee8 <external_interrupt_VSEI+0x1e8>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    8000f38c:	4058                	lw	a4,4(s0)
    8000f38e:	4789                	li	a5,2
    8000f390:	dcf71de3          	bne	a4,a5,8000f16a <external_interrupt_VSEI+0x46a>
    8000f394:	0000d597          	auipc	a1,0xd
    8000f398:	72c58593          	add	a1,a1,1836 # 8001cac0 <__func__.1+0x2c8>
    8000f39c:	b3f9                	j	8000f16a <external_interrupt_VSEI+0x46a>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    8000f39e:	4058                	lw	a4,4(s0)
    8000f3a0:	4791                	li	a5,4
    8000f3a2:	c6f71ae3          	bne	a4,a5,8000f016 <external_interrupt_VSEI+0x316>
    8000f3a6:	0000d597          	auipc	a1,0xd
    8000f3aa:	71a58593          	add	a1,a1,1818 # 8001cac0 <__func__.1+0x2c8>
    8000f3ae:	b1a5                	j	8000f016 <external_interrupt_VSEI+0x316>

000000008000f3b0 <software_interrupt_msi>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool software_interrupt_msi() {
    8000f3b0:	1101                	add	sp,sp,-32

    TEST_START();
    8000f3b2:	0000d597          	auipc	a1,0xd
    8000f3b6:	8ee58593          	add	a1,a1,-1810 # 8001bca0 <__func__.2>
    8000f3ba:	0000d517          	auipc	a0,0xd
    8000f3be:	72650513          	add	a0,a0,1830 # 8001cae0 <__func__.1+0x2e8>
bool software_interrupt_msi() {
    8000f3c2:	ec06                	sd	ra,24(sp)
    8000f3c4:	e822                	sd	s0,16(sp)
    8000f3c6:	e426                	sd	s1,8(sp)
    8000f3c8:	e04a                	sd	s2,0(sp)
    TEST_START();
    8000f3ca:	3990b0ef          	jal	8001af62 <printf>
    8000f3ce:	4529                	li	a0,10
    8000f3d0:	2650a0ef          	jal	80019e34 <putchar>

    TEST_SETUP_EXCEPT();
    8000f3d4:	0ff0000f          	fence
    8000f3d8:	4785                	li	a5,1
    8000f3da:	0002e417          	auipc	s0,0x2e
    8000f3de:	c3640413          	add	s0,s0,-970 # 8003d010 <excpt>
    8000f3e2:	00f41023          	sh	a5,0(s0)
    8000f3e6:	0002e797          	auipc	a5,0x2e
    8000f3ea:	c607b123          	sd	zero,-926(a5) # 8003d048 <excpt+0x38>
    8000f3ee:	0ff0000f          	fence

   
    //M模式下产生软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高
    goto_priv(PRIV_M);
    8000f3f2:	4511                	li	a0,4
    8000f3f4:	eeaf10ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    8000f3f8:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8000f3fc:	30446073          	csrs	mie,8
    CSRW(CSR_MIDELEG,0);
    8000f400:	30305073          	csrw	mideleg,0
    CSRS(CSR_MIP,MIP_MSIP);     //read-only
    8000f404:	34446073          	csrs	mip,8

    goto_priv(PRIV_M);
    8000f408:	4511                	li	a0,4
    8000f40a:	ed4f10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    8000f40e:	08200593          	li	a1,130
    8000f412:	00011617          	auipc	a2,0x11
    8000f416:	f2660613          	add	a2,a2,-218 # 80020338 <__func__.1+0x3b40>
    8000f41a:	0000d517          	auipc	a0,0xd
    8000f41e:	6de50513          	add	a0,a0,1758 # 8001caf8 <__func__.1+0x300>
    8000f422:	3410b0ef          	jal	8001af62 <printf>
    8000f426:	00144783          	lbu	a5,1(s0)
    8000f42a:	0000d597          	auipc	a1,0xd
    8000f42e:	6a658593          	add	a1,a1,1702 # 8001cad0 <__func__.1+0x2d8>
    8000f432:	c799                	beqz	a5,8000f440 <software_interrupt_msi+0x90>
    8000f434:	57fd                	li	a5,-1
    8000f436:	6418                	ld	a4,8(s0)
    8000f438:	17fe                	sll	a5,a5,0x3f
    8000f43a:	0789                	add	a5,a5,2
    8000f43c:	4ef70fe3          	beq	a4,a5,8001013a <software_interrupt_msi+0xd8a>
    8000f440:	0000d517          	auipc	a0,0xd
    8000f444:	6d050513          	add	a0,a0,1744 # 8001cb10 <__func__.1+0x318>
    8000f448:	31b0b0ef          	jal	8001af62 <printf>
    8000f44c:	00144783          	lbu	a5,1(s0)
    8000f450:	c799                	beqz	a5,8000f45e <software_interrupt_msi+0xae>
    8000f452:	57fd                	li	a5,-1
    8000f454:	6418                	ld	a4,8(s0)
    8000f456:	17fe                	sll	a5,a5,0x3f
    8000f458:	0789                	add	a5,a5,2
    8000f45a:	38f706e3          	beq	a4,a5,8000ffe6 <software_interrupt_msi+0xc36>
    8000f45e:	0000d517          	auipc	a0,0xd
    8000f462:	6ba50513          	add	a0,a0,1722 # 8001cb18 <__func__.1+0x320>
    8000f466:	2fd0b0ef          	jal	8001af62 <printf>
    8000f46a:	02900513          	li	a0,41
    8000f46e:	1c70a0ef          	jal	80019e34 <putchar>
    8000f472:	4529                	li	a0,10
    8000f474:	1c10a0ef          	jal	80019e34 <putchar>
    8000f478:	00144783          	lbu	a5,1(s0)
    8000f47c:	4481                	li	s1,0
    8000f47e:	c799                	beqz	a5,8000f48c <software_interrupt_msi+0xdc>
    8000f480:	57fd                	li	a5,-1
    8000f482:	6418                	ld	a4,8(s0)
    8000f484:	17fe                	sll	a5,a5,0x3f
    8000f486:	0789                	add	a5,a5,2
    8000f488:	46f706e3          	beq	a4,a5,800100f4 <software_interrupt_msi+0xd44>
        excpt.priv == PRIV_M
    ); 


    //M模式下产生软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    8000f48c:	0ff0000f          	fence
    8000f490:	4785                	li	a5,1
    8000f492:	00f41023          	sh	a5,0(s0)
    8000f496:	0002e797          	auipc	a5,0x2e
    8000f49a:	ba07b923          	sd	zero,-1102(a5) # 8003d048 <excpt+0x38>
    8000f49e:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000f4a2:	4511                	li	a0,4
    8000f4a4:	e3af10ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000f4a8:	30046073          	csrs	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    8000f4ac:	30447073          	csrc	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8000f4b0:	34446073          	csrs	mip,8

    goto_priv(PRIV_M);
    8000f4b4:	4511                	li	a0,4
    8000f4b6:	e28f10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("m mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0",
    8000f4ba:	08200593          	li	a1,130
    8000f4be:	00011617          	auipc	a2,0x11
    8000f4c2:	eda60613          	add	a2,a2,-294 # 80020398 <__func__.1+0x3ba0>
    8000f4c6:	0000d517          	auipc	a0,0xd
    8000f4ca:	63250513          	add	a0,a0,1586 # 8001caf8 <__func__.1+0x300>
    8000f4ce:	2950b0ef          	jal	8001af62 <printf>
    8000f4d2:	00144783          	lbu	a5,1(s0)
    8000f4d6:	0000d597          	auipc	a1,0xd
    8000f4da:	5fa58593          	add	a1,a1,1530 # 8001cad0 <__func__.1+0x2d8>
    8000f4de:	e789                	bnez	a5,8000f4e8 <software_interrupt_msi+0x138>
    8000f4e0:	0000d597          	auipc	a1,0xd
    8000f4e4:	5e058593          	add	a1,a1,1504 # 8001cac0 <__func__.1+0x2c8>
    8000f4e8:	0000d517          	auipc	a0,0xd
    8000f4ec:	62850513          	add	a0,a0,1576 # 8001cb10 <__func__.1+0x318>
    8000f4f0:	2730b0ef          	jal	8001af62 <printf>
    8000f4f4:	00144783          	lbu	a5,1(s0)
    8000f4f8:	320793e3          	bnez	a5,8001001e <software_interrupt_msi+0xc6e>
    8000f4fc:	4529                	li	a0,10
    8000f4fe:	1370a0ef          	jal	80019e34 <putchar>
    8000f502:	c489                	beqz	s1,8000f50c <software_interrupt_msi+0x15c>
    8000f504:	00144483          	lbu	s1,1(s0)
    8000f508:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 


    //M模式下产生软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1
    TEST_SETUP_EXCEPT();
    8000f50c:	0ff0000f          	fence
    8000f510:	4785                	li	a5,1
    8000f512:	00f41023          	sh	a5,0(s0)
    8000f516:	0002e797          	auipc	a5,0x2e
    8000f51a:	b207b923          	sd	zero,-1230(a5) # 8003d048 <excpt+0x38>
    8000f51e:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000f522:	4511                	li	a0,4
    8000f524:	dbaf10ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    8000f528:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8000f52c:	30446073          	csrs	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    8000f530:	34447073          	csrc	mip,8

    goto_priv(PRIV_M);
    8000f534:	4511                	li	a0,4
    8000f536:	da8f10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1",
    8000f53a:	08200593          	li	a1,130
    8000f53e:	00011617          	auipc	a2,0x11
    8000f542:	eb260613          	add	a2,a2,-334 # 800203f0 <__func__.1+0x3bf8>
    8000f546:	0000d517          	auipc	a0,0xd
    8000f54a:	5b250513          	add	a0,a0,1458 # 8001caf8 <__func__.1+0x300>
    8000f54e:	2150b0ef          	jal	8001af62 <printf>
    8000f552:	00144783          	lbu	a5,1(s0)
    8000f556:	0000d597          	auipc	a1,0xd
    8000f55a:	57a58593          	add	a1,a1,1402 # 8001cad0 <__func__.1+0x2d8>
    8000f55e:	c799                	beqz	a5,8000f56c <software_interrupt_msi+0x1bc>
    8000f560:	57fd                	li	a5,-1
    8000f562:	6418                	ld	a4,8(s0)
    8000f564:	17fe                	sll	a5,a5,0x3f
    8000f566:	0789                	add	a5,a5,2
    8000f568:	36f707e3          	beq	a4,a5,800100d6 <software_interrupt_msi+0xd26>
    8000f56c:	0000d517          	auipc	a0,0xd
    8000f570:	5a450513          	add	a0,a0,1444 # 8001cb10 <__func__.1+0x318>
    8000f574:	1ef0b0ef          	jal	8001af62 <printf>
    8000f578:	00144783          	lbu	a5,1(s0)
    8000f57c:	c799                	beqz	a5,8000f58a <software_interrupt_msi+0x1da>
    8000f57e:	57fd                	li	a5,-1
    8000f580:	6418                	ld	a4,8(s0)
    8000f582:	17fe                	sll	a5,a5,0x3f
    8000f584:	0789                	add	a5,a5,2
    8000f586:	00f70c63          	beq	a4,a5,8000f59e <software_interrupt_msi+0x1ee>
    8000f58a:	0000d517          	auipc	a0,0xd
    8000f58e:	58e50513          	add	a0,a0,1422 # 8001cb18 <__func__.1+0x320>
    8000f592:	1d10b0ef          	jal	8001af62 <printf>
    8000f596:	02900513          	li	a0,41
    8000f59a:	09b0a0ef          	jal	80019e34 <putchar>
    8000f59e:	4529                	li	a0,10
    8000f5a0:	0950a0ef          	jal	80019e34 <putchar>
    8000f5a4:	c491                	beqz	s1,8000f5b0 <software_interrupt_msi+0x200>
    8000f5a6:	00144783          	lbu	a5,1(s0)
    8000f5aa:	4481                	li	s1,0
    8000f5ac:	1e0796e3          	bnez	a5,8000ff98 <software_interrupt_msi+0xbe8>
        excpt.triggered == true &&
        excpt.cause == CAUSE_MSI
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=1，mie.MSIE=1
    TEST_SETUP_EXCEPT();
    8000f5b0:	0ff0000f          	fence
    8000f5b4:	4785                	li	a5,1
    8000f5b6:	00f41023          	sh	a5,0(s0)
    8000f5ba:	0002e797          	auipc	a5,0x2e
    8000f5be:	a807b723          	sd	zero,-1394(a5) # 8003d048 <excpt+0x38>
    8000f5c2:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000f5c6:	4511                	li	a0,4
    8000f5c8:	d16f10ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    8000f5cc:	30047073          	csrc	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8000f5d0:	30446073          	csrs	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8000f5d4:	34446073          	csrs	mip,8

    goto_priv(PRIV_M);
    8000f5d8:	4511                	li	a0,4
    8000f5da:	d04f10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=1",
    8000f5de:	08200593          	li	a1,130
    8000f5e2:	00011617          	auipc	a2,0x11
    8000f5e6:	e6e60613          	add	a2,a2,-402 # 80020450 <__func__.1+0x3c58>
    8000f5ea:	0000d517          	auipc	a0,0xd
    8000f5ee:	50e50513          	add	a0,a0,1294 # 8001caf8 <__func__.1+0x300>
    8000f5f2:	1710b0ef          	jal	8001af62 <printf>
    8000f5f6:	00144783          	lbu	a5,1(s0)
    8000f5fa:	0000d597          	auipc	a1,0xd
    8000f5fe:	4d658593          	add	a1,a1,1238 # 8001cad0 <__func__.1+0x2d8>
    8000f602:	e789                	bnez	a5,8000f60c <software_interrupt_msi+0x25c>
    8000f604:	0000d597          	auipc	a1,0xd
    8000f608:	4bc58593          	add	a1,a1,1212 # 8001cac0 <__func__.1+0x2c8>
    8000f60c:	0000d517          	auipc	a0,0xd
    8000f610:	50450513          	add	a0,a0,1284 # 8001cb10 <__func__.1+0x318>
    8000f614:	14f0b0ef          	jal	8001af62 <printf>
    8000f618:	00144783          	lbu	a5,1(s0)
    8000f61c:	220799e3          	bnez	a5,8001004e <software_interrupt_msi+0xc9e>
    8000f620:	4529                	li	a0,10
    8000f622:	0130a0ef          	jal	80019e34 <putchar>
    8000f626:	c489                	beqz	s1,8000f630 <software_interrupt_msi+0x280>
    8000f628:	00144483          	lbu	s1,1(s0)
    8000f62c:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=1，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    8000f630:	0ff0000f          	fence
    8000f634:	4785                	li	a5,1
    8000f636:	00f41023          	sh	a5,0(s0)
    8000f63a:	0002e797          	auipc	a5,0x2e
    8000f63e:	a007b723          	sd	zero,-1522(a5) # 8003d048 <excpt+0x38>
    8000f642:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000f646:	4511                	li	a0,4
    8000f648:	c96f10ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    8000f64c:	30047073          	csrc	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    8000f650:	30447073          	csrc	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8000f654:	34446073          	csrs	mip,8

    goto_priv(PRIV_M);
    8000f658:	4511                	li	a0,4
    8000f65a:	c84f10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=0",
    8000f65e:	08200593          	li	a1,130
    8000f662:	00011617          	auipc	a2,0x11
    8000f666:	e3e60613          	add	a2,a2,-450 # 800204a0 <__func__.1+0x3ca8>
    8000f66a:	0000d517          	auipc	a0,0xd
    8000f66e:	48e50513          	add	a0,a0,1166 # 8001caf8 <__func__.1+0x300>
    8000f672:	0f10b0ef          	jal	8001af62 <printf>
    8000f676:	00144783          	lbu	a5,1(s0)
    8000f67a:	0000d597          	auipc	a1,0xd
    8000f67e:	45658593          	add	a1,a1,1110 # 8001cad0 <__func__.1+0x2d8>
    8000f682:	e789                	bnez	a5,8000f68c <software_interrupt_msi+0x2dc>
    8000f684:	0000d597          	auipc	a1,0xd
    8000f688:	43c58593          	add	a1,a1,1084 # 8001cac0 <__func__.1+0x2c8>
    8000f68c:	0000d517          	auipc	a0,0xd
    8000f690:	48450513          	add	a0,a0,1156 # 8001cb10 <__func__.1+0x318>
    8000f694:	0cf0b0ef          	jal	8001af62 <printf>
    8000f698:	00144783          	lbu	a5,1(s0)
    8000f69c:	18079de3          	bnez	a5,80010036 <software_interrupt_msi+0xc86>
    8000f6a0:	4529                	li	a0,10
    8000f6a2:	7920a0ef          	jal	80019e34 <putchar>
    8000f6a6:	c489                	beqz	s1,8000f6b0 <software_interrupt_msi+0x300>
    8000f6a8:	00144483          	lbu	s1,1(s0)
    8000f6ac:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=0，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    8000f6b0:	0ff0000f          	fence
    8000f6b4:	4785                	li	a5,1
    8000f6b6:	00f41023          	sh	a5,0(s0)
    8000f6ba:	0002e797          	auipc	a5,0x2e
    8000f6be:	9807b723          	sd	zero,-1650(a5) # 8003d048 <excpt+0x38>
    8000f6c2:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000f6c6:	4511                	li	a0,4
    8000f6c8:	c16f10ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    8000f6cc:	30047073          	csrc	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    8000f6d0:	30447073          	csrc	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    8000f6d4:	34447073          	csrc	mip,8

    goto_priv(PRIV_M);
    8000f6d8:	4511                	li	a0,4
    8000f6da:	c04f10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0",
    8000f6de:	08200593          	li	a1,130
    8000f6e2:	00011617          	auipc	a2,0x11
    8000f6e6:	e0e60613          	add	a2,a2,-498 # 800204f0 <__func__.1+0x3cf8>
    8000f6ea:	0000d517          	auipc	a0,0xd
    8000f6ee:	40e50513          	add	a0,a0,1038 # 8001caf8 <__func__.1+0x300>
    8000f6f2:	0710b0ef          	jal	8001af62 <printf>
    8000f6f6:	00144783          	lbu	a5,1(s0)
    8000f6fa:	0000d597          	auipc	a1,0xd
    8000f6fe:	3d658593          	add	a1,a1,982 # 8001cad0 <__func__.1+0x2d8>
    8000f702:	e789                	bnez	a5,8000f70c <software_interrupt_msi+0x35c>
    8000f704:	0000d597          	auipc	a1,0xd
    8000f708:	3bc58593          	add	a1,a1,956 # 8001cac0 <__func__.1+0x2c8>
    8000f70c:	0000d517          	auipc	a0,0xd
    8000f710:	40450513          	add	a0,a0,1028 # 8001cb10 <__func__.1+0x318>
    8000f714:	04f0b0ef          	jal	8001af62 <printf>
    8000f718:	00144783          	lbu	a5,1(s0)
    8000f71c:	160790e3          	bnez	a5,8001007c <software_interrupt_msi+0xccc>
    8000f720:	4529                	li	a0,10
    8000f722:	7120a0ef          	jal	80019e34 <putchar>
    8000f726:	c489                	beqz	s1,8000f730 <software_interrupt_msi+0x380>
    8000f728:	00144483          	lbu	s1,1(s0)
    8000f72c:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 

//HS mode 下

    TEST_SETUP_EXCEPT();
    8000f730:	0ff0000f          	fence
    8000f734:	4785                	li	a5,1
    8000f736:	00f41023          	sh	a5,0(s0)
    8000f73a:	0002e797          	auipc	a5,0x2e
    8000f73e:	9007b723          	sd	zero,-1778(a5) # 8003d048 <excpt+0x38>
    8000f742:	0ff0000f          	fence
    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，无代理
    goto_priv(PRIV_M);
    8000f746:	4511                	li	a0,4
    8000f748:	b96f10ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    8000f74c:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8000f750:	30446073          	csrs	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8000f754:	34446073          	csrs	mip,8
    CSRW(CSR_MIDELEG,0);
    8000f758:	30305073          	csrw	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000f75c:	60305073          	csrw	hideleg,0

    goto_priv(PRIV_HS);
    8000f760:	450d                	li	a0,3
    8000f762:	b7cf10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    8000f766:	08200593          	li	a1,130
    8000f76a:	00011617          	auipc	a2,0x11
    8000f76e:	dd660613          	add	a2,a2,-554 # 80020540 <__func__.1+0x3d48>
    8000f772:	0000d517          	auipc	a0,0xd
    8000f776:	38650513          	add	a0,a0,902 # 8001caf8 <__func__.1+0x300>
    8000f77a:	7e80b0ef          	jal	8001af62 <printf>
    8000f77e:	00144783          	lbu	a5,1(s0)
    8000f782:	0000d597          	auipc	a1,0xd
    8000f786:	34e58593          	add	a1,a1,846 # 8001cad0 <__func__.1+0x2d8>
    8000f78a:	c799                	beqz	a5,8000f798 <software_interrupt_msi+0x3e8>
    8000f78c:	57fd                	li	a5,-1
    8000f78e:	6418                	ld	a4,8(s0)
    8000f790:	17fe                	sll	a5,a5,0x3f
    8000f792:	0789                	add	a5,a5,2
    8000f794:	16f70fe3          	beq	a4,a5,80010112 <software_interrupt_msi+0xd62>
    8000f798:	0000d517          	auipc	a0,0xd
    8000f79c:	37850513          	add	a0,a0,888 # 8001cb10 <__func__.1+0x318>
    8000f7a0:	7c20b0ef          	jal	8001af62 <printf>
    8000f7a4:	00144783          	lbu	a5,1(s0)
    8000f7a8:	c799                	beqz	a5,8000f7b6 <software_interrupt_msi+0x406>
    8000f7aa:	57fd                	li	a5,-1
    8000f7ac:	6418                	ld	a4,8(s0)
    8000f7ae:	17fe                	sll	a5,a5,0x3f
    8000f7b0:	0789                	add	a5,a5,2
    8000f7b2:	02f704e3          	beq	a4,a5,8000ffda <software_interrupt_msi+0xc2a>
    8000f7b6:	0000d517          	auipc	a0,0xd
    8000f7ba:	36250513          	add	a0,a0,866 # 8001cb18 <__func__.1+0x320>
    8000f7be:	7a40b0ef          	jal	8001af62 <printf>
    8000f7c2:	02900513          	li	a0,41
    8000f7c6:	66e0a0ef          	jal	80019e34 <putchar>
    8000f7ca:	4529                	li	a0,10
    8000f7cc:	6680a0ef          	jal	80019e34 <putchar>
    8000f7d0:	c491                	beqz	s1,8000f7dc <software_interrupt_msi+0x42c>
    8000f7d2:	00144783          	lbu	a5,1(s0)
    8000f7d6:	4481                	li	s1,0
    8000f7d8:	7a079463          	bnez	a5,8000ff80 <software_interrupt_msi+0xbd0>
        excpt.priv == PRIV_M
    ); 

    
    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，有mideleg代理
    TEST_SETUP_EXCEPT();
    8000f7dc:	0ff0000f          	fence
    8000f7e0:	4785                	li	a5,1
    8000f7e2:	00f41023          	sh	a5,0(s0)
    8000f7e6:	0002e797          	auipc	a5,0x2e
    8000f7ea:	8607b123          	sd	zero,-1950(a5) # 8003d048 <excpt+0x38>
    8000f7ee:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000f7f2:	4511                	li	a0,4
    8000f7f4:	aeaf10ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    8000f7f8:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8000f7fc:	30446073          	csrs	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8000f800:	34446073          	csrs	mip,8
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    8000f804:	597d                	li	s2,-1
    8000f806:	30391073          	csrw	mideleg,s2
    CSRW(CSR_HIDELEG,0);
    8000f80a:	60305073          	csrw	hideleg,0

    goto_priv(PRIV_HS);
    8000f80e:	450d                	li	a0,3
    8000f810:	acef10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    8000f814:	08200593          	li	a1,130
    8000f818:	00011617          	auipc	a2,0x11
    8000f81c:	d8860613          	add	a2,a2,-632 # 800205a0 <__func__.1+0x3da8>
    8000f820:	0000d517          	auipc	a0,0xd
    8000f824:	2d850513          	add	a0,a0,728 # 8001caf8 <__func__.1+0x300>
    8000f828:	73a0b0ef          	jal	8001af62 <printf>
    8000f82c:	00144783          	lbu	a5,1(s0)
    8000f830:	0000d597          	auipc	a1,0xd
    8000f834:	2a058593          	add	a1,a1,672 # 8001cad0 <__func__.1+0x2d8>
    8000f838:	c791                	beqz	a5,8000f844 <software_interrupt_msi+0x494>
    8000f83a:	641c                	ld	a5,8(s0)
    8000f83c:	197e                	sll	s2,s2,0x3f
    8000f83e:	0909                	add	s2,s2,2
    8000f840:	092781e3          	beq	a5,s2,800100c2 <software_interrupt_msi+0xd12>
    8000f844:	0000d517          	auipc	a0,0xd
    8000f848:	2cc50513          	add	a0,a0,716 # 8001cb10 <__func__.1+0x318>
    8000f84c:	7160b0ef          	jal	8001af62 <printf>
    8000f850:	00144783          	lbu	a5,1(s0)
    8000f854:	c799                	beqz	a5,8000f862 <software_interrupt_msi+0x4b2>
    8000f856:	57fd                	li	a5,-1
    8000f858:	6418                	ld	a4,8(s0)
    8000f85a:	17fe                	sll	a5,a5,0x3f
    8000f85c:	0789                	add	a5,a5,2
    8000f85e:	78f70f63          	beq	a4,a5,8000fffc <software_interrupt_msi+0xc4c>
    8000f862:	0000d517          	auipc	a0,0xd
    8000f866:	2b650513          	add	a0,a0,694 # 8001cb18 <__func__.1+0x320>
    8000f86a:	6f80b0ef          	jal	8001af62 <printf>
    8000f86e:	02900513          	li	a0,41
    8000f872:	5c20a0ef          	jal	80019e34 <putchar>
    8000f876:	4529                	li	a0,10
    8000f878:	5bc0a0ef          	jal	80019e34 <putchar>
    8000f87c:	c491                	beqz	s1,8000f888 <software_interrupt_msi+0x4d8>
    8000f87e:	00144783          	lbu	a5,1(s0)
    8000f882:	4481                	li	s1,0
    8000f884:	6e079363          	bnez	a5,8000ff6a <software_interrupt_msi+0xbba>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0，无代理
    TEST_SETUP_EXCEPT();
    8000f888:	0ff0000f          	fence
    8000f88c:	4785                	li	a5,1
    8000f88e:	00f41023          	sh	a5,0(s0)
    8000f892:	0002d797          	auipc	a5,0x2d
    8000f896:	7a07bb23          	sd	zero,1974(a5) # 8003d048 <excpt+0x38>
    8000f89a:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000f89e:	4511                	li	a0,4
    8000f8a0:	a3ef10ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    8000f8a4:	30046073          	csrs	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    8000f8a8:	30447073          	csrc	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8000f8ac:	34446073          	csrs	mip,8
    CSRW(CSR_MIDELEG,0);
    8000f8b0:	30305073          	csrw	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000f8b4:	60305073          	csrw	hideleg,0

    goto_priv(PRIV_HS);
    8000f8b8:	450d                	li	a0,3
    8000f8ba:	a24f10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    8000f8be:	08200593          	li	a1,130
    8000f8c2:	00011617          	auipc	a2,0x11
    8000f8c6:	d4e60613          	add	a2,a2,-690 # 80020610 <__func__.1+0x3e18>
    8000f8ca:	0000d517          	auipc	a0,0xd
    8000f8ce:	22e50513          	add	a0,a0,558 # 8001caf8 <__func__.1+0x300>
    8000f8d2:	6900b0ef          	jal	8001af62 <printf>
    8000f8d6:	00144783          	lbu	a5,1(s0)
    8000f8da:	0000d597          	auipc	a1,0xd
    8000f8de:	1f658593          	add	a1,a1,502 # 8001cad0 <__func__.1+0x2d8>
    8000f8e2:	e789                	bnez	a5,8000f8ec <software_interrupt_msi+0x53c>
    8000f8e4:	0000d597          	auipc	a1,0xd
    8000f8e8:	1dc58593          	add	a1,a1,476 # 8001cac0 <__func__.1+0x2c8>
    8000f8ec:	0000d517          	auipc	a0,0xd
    8000f8f0:	22450513          	add	a0,a0,548 # 8001cb10 <__func__.1+0x318>
    8000f8f4:	66e0b0ef          	jal	8001af62 <printf>
    8000f8f8:	00144783          	lbu	a5,1(s0)
    8000f8fc:	78079c63          	bnez	a5,80010094 <software_interrupt_msi+0xce4>
    8000f900:	4529                	li	a0,10
    8000f902:	5320a0ef          	jal	80019e34 <putchar>
    8000f906:	c489                	beqz	s1,8000f910 <software_interrupt_msi+0x560>
    8000f908:	00144483          	lbu	s1,1(s0)
    8000f90c:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MESIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    8000f910:	0ff0000f          	fence
    8000f914:	4785                	li	a5,1
    8000f916:	00f41023          	sh	a5,0(s0)
    8000f91a:	0002d797          	auipc	a5,0x2d
    8000f91e:	7207b723          	sd	zero,1838(a5) # 8003d048 <excpt+0x38>
    8000f922:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000f926:	4511                	li	a0,4
    8000f928:	9b6f10ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    8000f92c:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8000f930:	30446073          	csrs	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    8000f934:	34447073          	csrc	mip,8
    CSRW(CSR_MIDELEG,0);
    8000f938:	30305073          	csrw	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000f93c:	60305073          	csrw	hideleg,0

    goto_priv(PRIV_HS);
    8000f940:	450d                	li	a0,3
    8000f942:	99cf10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    8000f946:	08200593          	li	a1,130
    8000f94a:	00011617          	auipc	a2,0x11
    8000f94e:	d2e60613          	add	a2,a2,-722 # 80020678 <__func__.1+0x3e80>
    8000f952:	0000d517          	auipc	a0,0xd
    8000f956:	1a650513          	add	a0,a0,422 # 8001caf8 <__func__.1+0x300>
    8000f95a:	6080b0ef          	jal	8001af62 <printf>
    8000f95e:	00144783          	lbu	a5,1(s0)
    8000f962:	0000d597          	auipc	a1,0xd
    8000f966:	16e58593          	add	a1,a1,366 # 8001cad0 <__func__.1+0x2d8>
    8000f96a:	c799                	beqz	a5,8000f978 <software_interrupt_msi+0x5c8>
    8000f96c:	57fd                	li	a5,-1
    8000f96e:	6418                	ld	a4,8(s0)
    8000f970:	17fe                	sll	a5,a5,0x3f
    8000f972:	0789                	add	a5,a5,2
    8000f974:	7af70963          	beq	a4,a5,80010126 <software_interrupt_msi+0xd76>
    8000f978:	0000d517          	auipc	a0,0xd
    8000f97c:	19850513          	add	a0,a0,408 # 8001cb10 <__func__.1+0x318>
    8000f980:	5e20b0ef          	jal	8001af62 <printf>
    8000f984:	00144783          	lbu	a5,1(s0)
    8000f988:	c799                	beqz	a5,8000f996 <software_interrupt_msi+0x5e6>
    8000f98a:	57fd                	li	a5,-1
    8000f98c:	6418                	ld	a4,8(s0)
    8000f98e:	17fe                	sll	a5,a5,0x3f
    8000f990:	0789                	add	a5,a5,2
    8000f992:	66f70063          	beq	a4,a5,8000fff2 <software_interrupt_msi+0xc42>
    8000f996:	0000d517          	auipc	a0,0xd
    8000f99a:	18250513          	add	a0,a0,386 # 8001cb18 <__func__.1+0x320>
    8000f99e:	5c40b0ef          	jal	8001af62 <printf>
    8000f9a2:	02900513          	li	a0,41
    8000f9a6:	48e0a0ef          	jal	80019e34 <putchar>
    8000f9aa:	4529                	li	a0,10
    8000f9ac:	4880a0ef          	jal	80019e34 <putchar>
    8000f9b0:	c491                	beqz	s1,8000f9bc <software_interrupt_msi+0x60c>
    8000f9b2:	00144783          	lbu	a5,1(s0)
    8000f9b6:	4481                	li	s1,0
    8000f9b8:	58079e63          	bnez	a5,8000ff54 <software_interrupt_msi+0xba4>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    8000f9bc:	0ff0000f          	fence
    8000f9c0:	4785                	li	a5,1
    8000f9c2:	00f41023          	sh	a5,0(s0)
    8000f9c6:	0002d797          	auipc	a5,0x2d
    8000f9ca:	6807b123          	sd	zero,1666(a5) # 8003d048 <excpt+0x38>
    8000f9ce:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000f9d2:	4511                	li	a0,4
    8000f9d4:	90af10ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    8000f9d8:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8000f9dc:	30446073          	csrs	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    8000f9e0:	34447073          	csrc	mip,8
    CSRW(CSR_MIDELEG,1);
    8000f9e4:	3030d073          	csrw	mideleg,1
    CSRW(CSR_HIDELEG,0);
    8000f9e8:	60305073          	csrw	hideleg,0

    goto_priv(PRIV_HS);
    8000f9ec:	450d                	li	a0,3
    8000f9ee:	8f0f10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    8000f9f2:	08200593          	li	a1,130
    8000f9f6:	00011617          	auipc	a2,0x11
    8000f9fa:	cf260613          	add	a2,a2,-782 # 800206e8 <__func__.1+0x3ef0>
    8000f9fe:	0000d517          	auipc	a0,0xd
    8000fa02:	0fa50513          	add	a0,a0,250 # 8001caf8 <__func__.1+0x300>
    8000fa06:	55c0b0ef          	jal	8001af62 <printf>
    8000fa0a:	00144783          	lbu	a5,1(s0)
    8000fa0e:	0000d597          	auipc	a1,0xd
    8000fa12:	0c258593          	add	a1,a1,194 # 8001cad0 <__func__.1+0x2d8>
    8000fa16:	c799                	beqz	a5,8000fa24 <software_interrupt_msi+0x674>
    8000fa18:	57fd                	li	a5,-1
    8000fa1a:	6418                	ld	a4,8(s0)
    8000fa1c:	17fe                	sll	a5,a5,0x3f
    8000fa1e:	0789                	add	a5,a5,2
    8000fa20:	74f70963          	beq	a4,a5,80010172 <software_interrupt_msi+0xdc2>
    8000fa24:	0000d517          	auipc	a0,0xd
    8000fa28:	0ec50513          	add	a0,a0,236 # 8001cb10 <__func__.1+0x318>
    8000fa2c:	5360b0ef          	jal	8001af62 <printf>
    8000fa30:	00144783          	lbu	a5,1(s0)
    8000fa34:	c799                	beqz	a5,8000fa42 <software_interrupt_msi+0x692>
    8000fa36:	57fd                	li	a5,-1
    8000fa38:	6418                	ld	a4,8(s0)
    8000fa3a:	17fe                	sll	a5,a5,0x3f
    8000fa3c:	0789                	add	a5,a5,2
    8000fa3e:	56f70a63          	beq	a4,a5,8000ffb2 <software_interrupt_msi+0xc02>
    8000fa42:	0000d517          	auipc	a0,0xd
    8000fa46:	0d650513          	add	a0,a0,214 # 8001cb18 <__func__.1+0x320>
    8000fa4a:	5180b0ef          	jal	8001af62 <printf>
    8000fa4e:	02900513          	li	a0,41
    8000fa52:	3e20a0ef          	jal	80019e34 <putchar>
    8000fa56:	4529                	li	a0,10
    8000fa58:	3dc0a0ef          	jal	80019e34 <putchar>
    8000fa5c:	c491                	beqz	s1,8000fa68 <software_interrupt_msi+0x6b8>
    8000fa5e:	00144783          	lbu	a5,1(s0)
    8000fa62:	4481                	li	s1,0
    8000fa64:	4c079d63          	bnez	a5,8000ff3e <software_interrupt_msi+0xb8e>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=0，且mip.MSIP，mie.MSIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    8000fa68:	0ff0000f          	fence
    8000fa6c:	4785                	li	a5,1
    8000fa6e:	00f41023          	sh	a5,0(s0)
    8000fa72:	0002d797          	auipc	a5,0x2d
    8000fa76:	5c07bb23          	sd	zero,1494(a5) # 8003d048 <excpt+0x38>
    8000fa7a:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000fa7e:	4511                	li	a0,4
    8000fa80:	85ef10ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);   
    8000fa84:	30047073          	csrc	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    8000fa88:	30447073          	csrc	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    8000fa8c:	34447073          	csrc	mip,8
    CSRW(CSR_MIDELEG,0);
    8000fa90:	30305073          	csrw	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000fa94:	60305073          	csrw	hideleg,0

    goto_priv(PRIV_HS);
    8000fa98:	450d                	li	a0,3
    8000fa9a:	844f10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    8000fa9e:	08200593          	li	a1,130
    8000faa2:	00011617          	auipc	a2,0x11
    8000faa6:	cb660613          	add	a2,a2,-842 # 80020758 <__func__.1+0x3f60>
    8000faaa:	0000d517          	auipc	a0,0xd
    8000faae:	04e50513          	add	a0,a0,78 # 8001caf8 <__func__.1+0x300>
    8000fab2:	4b00b0ef          	jal	8001af62 <printf>
    8000fab6:	00144783          	lbu	a5,1(s0)
    8000faba:	0000d597          	auipc	a1,0xd
    8000fabe:	01658593          	add	a1,a1,22 # 8001cad0 <__func__.1+0x2d8>
    8000fac2:	e789                	bnez	a5,8000facc <software_interrupt_msi+0x71c>
    8000fac4:	0000d597          	auipc	a1,0xd
    8000fac8:	ffc58593          	add	a1,a1,-4 # 8001cac0 <__func__.1+0x2c8>
    8000facc:	0000d517          	auipc	a0,0xd
    8000fad0:	04450513          	add	a0,a0,68 # 8001cb10 <__func__.1+0x318>
    8000fad4:	48e0b0ef          	jal	8001af62 <printf>
    8000fad8:	00144783          	lbu	a5,1(s0)
    8000fadc:	58079563          	bnez	a5,80010066 <software_interrupt_msi+0xcb6>
    8000fae0:	4529                	li	a0,10
    8000fae2:	3520a0ef          	jal	80019e34 <putchar>
    8000fae6:	c489                	beqz	s1,8000faf0 <software_interrupt_msi+0x740>
    8000fae8:	00144483          	lbu	s1,1(s0)
    8000faec:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 

//vs mode 下

    TEST_SETUP_EXCEPT();
    8000faf0:	0ff0000f          	fence
    8000faf4:	4785                	li	a5,1
    8000faf6:	00f41023          	sh	a5,0(s0)
    8000fafa:	0002d797          	auipc	a5,0x2d
    8000fafe:	5407b723          	sd	zero,1358(a5) # 8003d048 <excpt+0x38>
    8000fb02:	0ff0000f          	fence
    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，无代理
    goto_priv(PRIV_M);
    8000fb06:	4511                	li	a0,4
    8000fb08:	fd7f00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    8000fb0c:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8000fb10:	30446073          	csrs	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8000fb14:	34446073          	csrs	mip,8
    CSRW(CSR_MIDELEG,0);
    8000fb18:	30305073          	csrw	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000fb1c:	60305073          	csrw	hideleg,0

    goto_priv(PRIV_VS);
    8000fb20:	4509                	li	a0,2
    8000fb22:	fbdf00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    8000fb26:	08200593          	li	a1,130
    8000fb2a:	00011617          	auipc	a2,0x11
    8000fb2e:	c8e60613          	add	a2,a2,-882 # 800207b8 <__func__.1+0x3fc0>
    8000fb32:	0000d517          	auipc	a0,0xd
    8000fb36:	fc650513          	add	a0,a0,-58 # 8001caf8 <__func__.1+0x300>
    8000fb3a:	4280b0ef          	jal	8001af62 <printf>
    8000fb3e:	00144783          	lbu	a5,1(s0)
    8000fb42:	0000d597          	auipc	a1,0xd
    8000fb46:	f8e58593          	add	a1,a1,-114 # 8001cad0 <__func__.1+0x2d8>
    8000fb4a:	c799                	beqz	a5,8000fb58 <software_interrupt_msi+0x7a8>
    8000fb4c:	57fd                	li	a5,-1
    8000fb4e:	6418                	ld	a4,8(s0)
    8000fb50:	17fe                	sll	a5,a5,0x3f
    8000fb52:	0789                	add	a5,a5,2
    8000fb54:	5ef70d63          	beq	a4,a5,8001014e <software_interrupt_msi+0xd9e>
    8000fb58:	0000d517          	auipc	a0,0xd
    8000fb5c:	fb850513          	add	a0,a0,-72 # 8001cb10 <__func__.1+0x318>
    8000fb60:	4020b0ef          	jal	8001af62 <printf>
    8000fb64:	00144783          	lbu	a5,1(s0)
    8000fb68:	c799                	beqz	a5,8000fb76 <software_interrupt_msi+0x7c6>
    8000fb6a:	57fd                	li	a5,-1
    8000fb6c:	6418                	ld	a4,8(s0)
    8000fb6e:	17fe                	sll	a5,a5,0x3f
    8000fb70:	0789                	add	a5,a5,2
    8000fb72:	42f70b63          	beq	a4,a5,8000ffa8 <software_interrupt_msi+0xbf8>
    8000fb76:	0000d517          	auipc	a0,0xd
    8000fb7a:	fa250513          	add	a0,a0,-94 # 8001cb18 <__func__.1+0x320>
    8000fb7e:	3e40b0ef          	jal	8001af62 <printf>
    8000fb82:	02900513          	li	a0,41
    8000fb86:	2ae0a0ef          	jal	80019e34 <putchar>
    8000fb8a:	4529                	li	a0,10
    8000fb8c:	2a80a0ef          	jal	80019e34 <putchar>
    8000fb90:	c491                	beqz	s1,8000fb9c <software_interrupt_msi+0x7ec>
    8000fb92:	00144783          	lbu	a5,1(s0)
    8000fb96:	4481                	li	s1,0
    8000fb98:	38079863          	bnez	a5,8000ff28 <software_interrupt_msi+0xb78>
        excpt.priv == PRIV_M
    ); 


    //vs模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，有mideleg代理
    TEST_SETUP_EXCEPT();
    8000fb9c:	0ff0000f          	fence
    8000fba0:	4785                	li	a5,1
    8000fba2:	00f41023          	sh	a5,0(s0)
    8000fba6:	0002d797          	auipc	a5,0x2d
    8000fbaa:	4a07b123          	sd	zero,1186(a5) # 8003d048 <excpt+0x38>
    8000fbae:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000fbb2:	4511                	li	a0,4
    8000fbb4:	f2bf00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    8000fbb8:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8000fbbc:	30446073          	csrs	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8000fbc0:	34446073          	csrs	mip,8
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    8000fbc4:	597d                	li	s2,-1
    8000fbc6:	30391073          	csrw	mideleg,s2
    CSRW(CSR_HIDELEG,0);
    8000fbca:	60305073          	csrw	hideleg,0

    goto_priv(PRIV_VS);
    8000fbce:	4509                	li	a0,2
    8000fbd0:	f0ff00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    8000fbd4:	08200593          	li	a1,130
    8000fbd8:	00011617          	auipc	a2,0x11
    8000fbdc:	c4060613          	add	a2,a2,-960 # 80020818 <__func__.1+0x4020>
    8000fbe0:	0000d517          	auipc	a0,0xd
    8000fbe4:	f1850513          	add	a0,a0,-232 # 8001caf8 <__func__.1+0x300>
    8000fbe8:	37a0b0ef          	jal	8001af62 <printf>
    8000fbec:	00144783          	lbu	a5,1(s0)
    8000fbf0:	0000d597          	auipc	a1,0xd
    8000fbf4:	ee058593          	add	a1,a1,-288 # 8001cad0 <__func__.1+0x2d8>
    8000fbf8:	c791                	beqz	a5,8000fc04 <software_interrupt_msi+0x854>
    8000fbfa:	641c                	ld	a5,8(s0)
    8000fbfc:	197e                	sll	s2,s2,0x3f
    8000fbfe:	0909                	add	s2,s2,2
    8000fc00:	57278063          	beq	a5,s2,80010160 <software_interrupt_msi+0xdb0>
    8000fc04:	0000d517          	auipc	a0,0xd
    8000fc08:	f0c50513          	add	a0,a0,-244 # 8001cb10 <__func__.1+0x318>
    8000fc0c:	3560b0ef          	jal	8001af62 <printf>
    8000fc10:	00144783          	lbu	a5,1(s0)
    8000fc14:	c799                	beqz	a5,8000fc22 <software_interrupt_msi+0x872>
    8000fc16:	57fd                	li	a5,-1
    8000fc18:	6418                	ld	a4,8(s0)
    8000fc1a:	17fe                	sll	a5,a5,0x3f
    8000fc1c:	0789                	add	a5,a5,2
    8000fc1e:	3af70463          	beq	a4,a5,8000ffc6 <software_interrupt_msi+0xc16>
    8000fc22:	0000d517          	auipc	a0,0xd
    8000fc26:	ef650513          	add	a0,a0,-266 # 8001cb18 <__func__.1+0x320>
    8000fc2a:	3380b0ef          	jal	8001af62 <printf>
    8000fc2e:	02900513          	li	a0,41
    8000fc32:	2020a0ef          	jal	80019e34 <putchar>
    8000fc36:	4529                	li	a0,10
    8000fc38:	1fc0a0ef          	jal	80019e34 <putchar>
    8000fc3c:	c491                	beqz	s1,8000fc48 <software_interrupt_msi+0x898>
    8000fc3e:	00144783          	lbu	a5,1(s0)
    8000fc42:	4481                	li	s1,0
    8000fc44:	2c079763          	bnez	a5,8000ff12 <software_interrupt_msi+0xb62>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0，无代理
    TEST_SETUP_EXCEPT();
    8000fc48:	0ff0000f          	fence
    8000fc4c:	4785                	li	a5,1
    8000fc4e:	00f41023          	sh	a5,0(s0)
    8000fc52:	0002d797          	auipc	a5,0x2d
    8000fc56:	3e07bb23          	sd	zero,1014(a5) # 8003d048 <excpt+0x38>
    8000fc5a:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000fc5e:	4511                	li	a0,4
    8000fc60:	e7ff00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    8000fc64:	30046073          	csrs	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    8000fc68:	30447073          	csrc	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8000fc6c:	34446073          	csrs	mip,8
    CSRW(CSR_MIDELEG,0);
    8000fc70:	30305073          	csrw	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000fc74:	60305073          	csrw	hideleg,0

    goto_priv(PRIV_VS);
    8000fc78:	4509                	li	a0,2
    8000fc7a:	e65f00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to  interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    8000fc7e:	08200593          	li	a1,130
    8000fc82:	00011617          	auipc	a2,0x11
    8000fc86:	c0660613          	add	a2,a2,-1018 # 80020888 <__func__.1+0x4090>
    8000fc8a:	0000d517          	auipc	a0,0xd
    8000fc8e:	e6e50513          	add	a0,a0,-402 # 8001caf8 <__func__.1+0x300>
    8000fc92:	2d00b0ef          	jal	8001af62 <printf>
    8000fc96:	00144783          	lbu	a5,1(s0)
    8000fc9a:	0000d597          	auipc	a1,0xd
    8000fc9e:	e3658593          	add	a1,a1,-458 # 8001cad0 <__func__.1+0x2d8>
    8000fca2:	e789                	bnez	a5,8000fcac <software_interrupt_msi+0x8fc>
    8000fca4:	0000d597          	auipc	a1,0xd
    8000fca8:	e1c58593          	add	a1,a1,-484 # 8001cac0 <__func__.1+0x2c8>
    8000fcac:	0000d517          	auipc	a0,0xd
    8000fcb0:	e6450513          	add	a0,a0,-412 # 8001cb10 <__func__.1+0x318>
    8000fcb4:	2ae0b0ef          	jal	8001af62 <printf>
    8000fcb8:	00144783          	lbu	a5,1(s0)
    8000fcbc:	34079663          	bnez	a5,80010008 <software_interrupt_msi+0xc58>
    8000fcc0:	4529                	li	a0,10
    8000fcc2:	1720a0ef          	jal	80019e34 <putchar>
    8000fcc6:	c489                	beqz	s1,8000fcd0 <software_interrupt_msi+0x920>
    8000fcc8:	00144483          	lbu	s1,1(s0)
    8000fccc:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MESIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    8000fcd0:	0ff0000f          	fence
    8000fcd4:	4785                	li	a5,1
    8000fcd6:	00f41023          	sh	a5,0(s0)
    8000fcda:	0002d797          	auipc	a5,0x2d
    8000fcde:	3607b723          	sd	zero,878(a5) # 8003d048 <excpt+0x38>
    8000fce2:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000fce6:	4511                	li	a0,4
    8000fce8:	df7f00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    8000fcec:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8000fcf0:	30446073          	csrs	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    8000fcf4:	34447073          	csrc	mip,8
    CSRW(CSR_MIDELEG,0);
    8000fcf8:	30305073          	csrw	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000fcfc:	60305073          	csrw	hideleg,0

    goto_priv(PRIV_VS);
    8000fd00:	4509                	li	a0,2
    8000fd02:	dddf00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    8000fd06:	08200593          	li	a1,130
    8000fd0a:	00011617          	auipc	a2,0x11
    8000fd0e:	be660613          	add	a2,a2,-1050 # 800208f0 <__func__.1+0x40f8>
    8000fd12:	0000d517          	auipc	a0,0xd
    8000fd16:	de650513          	add	a0,a0,-538 # 8001caf8 <__func__.1+0x300>
    8000fd1a:	2480b0ef          	jal	8001af62 <printf>
    8000fd1e:	00144783          	lbu	a5,1(s0)
    8000fd22:	0000d597          	auipc	a1,0xd
    8000fd26:	dae58593          	add	a1,a1,-594 # 8001cad0 <__func__.1+0x2d8>
    8000fd2a:	c799                	beqz	a5,8000fd38 <software_interrupt_msi+0x988>
    8000fd2c:	57fd                	li	a5,-1
    8000fd2e:	6418                	ld	a4,8(s0)
    8000fd30:	17fe                	sll	a5,a5,0x3f
    8000fd32:	0789                	add	a5,a5,2
    8000fd34:	3af70763          	beq	a4,a5,800100e2 <software_interrupt_msi+0xd32>
    8000fd38:	0000d517          	auipc	a0,0xd
    8000fd3c:	dd850513          	add	a0,a0,-552 # 8001cb10 <__func__.1+0x318>
    8000fd40:	2220b0ef          	jal	8001af62 <printf>
    8000fd44:	00144783          	lbu	a5,1(s0)
    8000fd48:	c799                	beqz	a5,8000fd56 <software_interrupt_msi+0x9a6>
    8000fd4a:	57fd                	li	a5,-1
    8000fd4c:	6418                	ld	a4,8(s0)
    8000fd4e:	17fe                	sll	a5,a5,0x3f
    8000fd50:	0789                	add	a5,a5,2
    8000fd52:	26f70f63          	beq	a4,a5,8000ffd0 <software_interrupt_msi+0xc20>
    8000fd56:	0000d517          	auipc	a0,0xd
    8000fd5a:	dc250513          	add	a0,a0,-574 # 8001cb18 <__func__.1+0x320>
    8000fd5e:	2040b0ef          	jal	8001af62 <printf>
    8000fd62:	02900513          	li	a0,41
    8000fd66:	0ce0a0ef          	jal	80019e34 <putchar>
    8000fd6a:	4529                	li	a0,10
    8000fd6c:	0c80a0ef          	jal	80019e34 <putchar>
    8000fd70:	c491                	beqz	s1,8000fd7c <software_interrupt_msi+0x9cc>
    8000fd72:	00144783          	lbu	a5,1(s0)
    8000fd76:	4481                	li	s1,0
    8000fd78:	18079263          	bnez	a5,8000fefc <software_interrupt_msi+0xb4c>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    8000fd7c:	0ff0000f          	fence
    8000fd80:	4785                	li	a5,1
    8000fd82:	00f41023          	sh	a5,0(s0)
    8000fd86:	0002d797          	auipc	a5,0x2d
    8000fd8a:	2c07b123          	sd	zero,706(a5) # 8003d048 <excpt+0x38>
    8000fd8e:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000fd92:	4511                	li	a0,4
    8000fd94:	d4bf00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    8000fd98:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8000fd9c:	30446073          	csrs	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    8000fda0:	34447073          	csrc	mip,8
    CSRW(CSR_MIDELEG,1);
    8000fda4:	3030d073          	csrw	mideleg,1
    CSRW(CSR_HIDELEG,0);
    8000fda8:	60305073          	csrw	hideleg,0

    goto_priv(PRIV_VS);
    8000fdac:	4509                	li	a0,2
    8000fdae:	d31f00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    8000fdb2:	08200593          	li	a1,130
    8000fdb6:	00011617          	auipc	a2,0x11
    8000fdba:	baa60613          	add	a2,a2,-1110 # 80020960 <__func__.1+0x4168>
    8000fdbe:	0000d517          	auipc	a0,0xd
    8000fdc2:	d3a50513          	add	a0,a0,-710 # 8001caf8 <__func__.1+0x300>
    8000fdc6:	19c0b0ef          	jal	8001af62 <printf>
    8000fdca:	00144783          	lbu	a5,1(s0)
    8000fdce:	0000d597          	auipc	a1,0xd
    8000fdd2:	d0258593          	add	a1,a1,-766 # 8001cad0 <__func__.1+0x2d8>
    8000fdd6:	c799                	beqz	a5,8000fde4 <software_interrupt_msi+0xa34>
    8000fdd8:	57fd                	li	a5,-1
    8000fdda:	6418                	ld	a4,8(s0)
    8000fddc:	17fe                	sll	a5,a5,0x3f
    8000fdde:	0789                	add	a5,a5,2
    8000fde0:	32f70063          	beq	a4,a5,80010100 <software_interrupt_msi+0xd50>
    8000fde4:	0000d517          	auipc	a0,0xd
    8000fde8:	d2c50513          	add	a0,a0,-724 # 8001cb10 <__func__.1+0x318>
    8000fdec:	1760b0ef          	jal	8001af62 <printf>
    8000fdf0:	00144783          	lbu	a5,1(s0)
    8000fdf4:	c799                	beqz	a5,8000fe02 <software_interrupt_msi+0xa52>
    8000fdf6:	57fd                	li	a5,-1
    8000fdf8:	6418                	ld	a4,8(s0)
    8000fdfa:	17fe                	sll	a5,a5,0x3f
    8000fdfc:	0789                	add	a5,a5,2
    8000fdfe:	1af70f63          	beq	a4,a5,8000ffbc <software_interrupt_msi+0xc0c>
    8000fe02:	0000d517          	auipc	a0,0xd
    8000fe06:	d1650513          	add	a0,a0,-746 # 8001cb18 <__func__.1+0x320>
    8000fe0a:	1580b0ef          	jal	8001af62 <printf>
    8000fe0e:	02900513          	li	a0,41
    8000fe12:	0220a0ef          	jal	80019e34 <putchar>
    8000fe16:	4529                	li	a0,10
    8000fe18:	01c0a0ef          	jal	80019e34 <putchar>
    8000fe1c:	c489                	beqz	s1,8000fe26 <software_interrupt_msi+0xa76>
    8000fe1e:	00144783          	lbu	a5,1(s0)
    8000fe22:	4481                	li	s1,0
    8000fe24:	e3e9                	bnez	a5,8000fee6 <software_interrupt_msi+0xb36>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=0，且mip.MSIP，mie.MSIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    8000fe26:	0ff0000f          	fence
    8000fe2a:	4785                	li	a5,1
    8000fe2c:	00f41023          	sh	a5,0(s0)
    8000fe30:	0002d797          	auipc	a5,0x2d
    8000fe34:	2007bc23          	sd	zero,536(a5) # 8003d048 <excpt+0x38>
    8000fe38:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000fe3c:	4511                	li	a0,4
    8000fe3e:	ca1f00ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);   
    8000fe42:	30047073          	csrc	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    8000fe46:	30447073          	csrc	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    8000fe4a:	34447073          	csrc	mip,8
    CSRW(CSR_MIDELEG,0);
    8000fe4e:	30305073          	csrw	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000fe52:	60305073          	csrw	hideleg,0

    goto_priv(PRIV_VS);
    8000fe56:	4509                	li	a0,2
    8000fe58:	c87f00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    8000fe5c:	08200593          	li	a1,130
    8000fe60:	00011617          	auipc	a2,0x11
    8000fe64:	b7060613          	add	a2,a2,-1168 # 800209d0 <__func__.1+0x41d8>
    8000fe68:	0000d517          	auipc	a0,0xd
    8000fe6c:	c9050513          	add	a0,a0,-880 # 8001caf8 <__func__.1+0x300>
    8000fe70:	0f20b0ef          	jal	8001af62 <printf>
    8000fe74:	00144783          	lbu	a5,1(s0)
    8000fe78:	0000d597          	auipc	a1,0xd
    8000fe7c:	c5858593          	add	a1,a1,-936 # 8001cad0 <__func__.1+0x2d8>
    8000fe80:	e789                	bnez	a5,8000fe8a <software_interrupt_msi+0xada>
    8000fe82:	0000d597          	auipc	a1,0xd
    8000fe86:	c3e58593          	add	a1,a1,-962 # 8001cac0 <__func__.1+0x2c8>
    8000fe8a:	0000d517          	auipc	a0,0xd
    8000fe8e:	c8650513          	add	a0,a0,-890 # 8001cb10 <__func__.1+0x318>
    8000fe92:	0d00b0ef          	jal	8001af62 <printf>
    8000fe96:	00144783          	lbu	a5,1(s0)
    8000fe9a:	20079963          	bnez	a5,800100ac <software_interrupt_msi+0xcfc>
    8000fe9e:	4529                	li	a0,10
    8000fea0:	795090ef          	jal	80019e34 <putchar>
    8000fea4:	c481                	beqz	s1,8000feac <software_interrupt_msi+0xafc>
    8000fea6:	00144783          	lbu	a5,1(s0)
    8000feaa:	cb85                	beqz	a5,8000feda <software_interrupt_msi+0xb2a>
    8000feac:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    8000feae:	0000d597          	auipc	a1,0xd
    8000feb2:	c2258593          	add	a1,a1,-990 # 8001cad0 <__func__.1+0x2d8>
    8000feb6:	0000d517          	auipc	a0,0xd
    8000feba:	cc250513          	add	a0,a0,-830 # 8001cb78 <__func__.1+0x380>
    8000febe:	0a40b0ef          	jal	8001af62 <printf>
    8000fec2:	4511                	li	a0,4
    8000fec4:	c1bf00ef          	jal	80000ade <goto_priv>
    8000fec8:	c5ef10ef          	jal	80001326 <reset_state>
}
    8000fecc:	60e2                	ld	ra,24(sp)
    8000fece:	8522                	mv	a0,s0
    8000fed0:	6442                	ld	s0,16(sp)
    8000fed2:	64a2                	ld	s1,8(sp)
    8000fed4:	6902                	ld	s2,0(sp)
    8000fed6:	6105                	add	sp,sp,32
    8000fed8:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    8000feda:	4405                	li	s0,1
    TEST_END();
    8000fedc:	0000d597          	auipc	a1,0xd
    8000fee0:	be458593          	add	a1,a1,-1052 # 8001cac0 <__func__.1+0x2c8>
    8000fee4:	bfc9                	j	8000feb6 <software_interrupt_msi+0xb06>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    8000fee6:	57fd                	li	a5,-1
    8000fee8:	6418                	ld	a4,8(s0)
    8000feea:	17fe                	sll	a5,a5,0x3f
    8000feec:	0789                	add	a5,a5,2
    8000feee:	f2f71ce3          	bne	a4,a5,8000fe26 <software_interrupt_msi+0xa76>
    8000fef2:	4044                	lw	s1,4(s0)
    8000fef4:	14f5                	add	s1,s1,-3
    8000fef6:	0014b493          	seqz	s1,s1
    8000fefa:	b735                	j	8000fe26 <software_interrupt_msi+0xa76>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    8000fefc:	57fd                	li	a5,-1
    8000fefe:	6418                	ld	a4,8(s0)
    8000ff00:	17fe                	sll	a5,a5,0x3f
    8000ff02:	0789                	add	a5,a5,2
    8000ff04:	e6f71ce3          	bne	a4,a5,8000fd7c <software_interrupt_msi+0x9cc>
    8000ff08:	4044                	lw	s1,4(s0)
    8000ff0a:	14f1                	add	s1,s1,-4
    8000ff0c:	0014b493          	seqz	s1,s1
    8000ff10:	b5b5                	j	8000fd7c <software_interrupt_msi+0x9cc>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    8000ff12:	57fd                	li	a5,-1
    8000ff14:	6418                	ld	a4,8(s0)
    8000ff16:	17fe                	sll	a5,a5,0x3f
    8000ff18:	0789                	add	a5,a5,2
    8000ff1a:	d2f717e3          	bne	a4,a5,8000fc48 <software_interrupt_msi+0x898>
    8000ff1e:	4044                	lw	s1,4(s0)
    8000ff20:	14f5                	add	s1,s1,-3
    8000ff22:	0014b493          	seqz	s1,s1
    8000ff26:	b30d                	j	8000fc48 <software_interrupt_msi+0x898>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    8000ff28:	57fd                	li	a5,-1
    8000ff2a:	6418                	ld	a4,8(s0)
    8000ff2c:	17fe                	sll	a5,a5,0x3f
    8000ff2e:	0789                	add	a5,a5,2
    8000ff30:	c6f716e3          	bne	a4,a5,8000fb9c <software_interrupt_msi+0x7ec>
    8000ff34:	4044                	lw	s1,4(s0)
    8000ff36:	14f1                	add	s1,s1,-4
    8000ff38:	0014b493          	seqz	s1,s1
    8000ff3c:	b185                	j	8000fb9c <software_interrupt_msi+0x7ec>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    8000ff3e:	57fd                	li	a5,-1
    8000ff40:	6418                	ld	a4,8(s0)
    8000ff42:	17fe                	sll	a5,a5,0x3f
    8000ff44:	0789                	add	a5,a5,2
    8000ff46:	b2f711e3          	bne	a4,a5,8000fa68 <software_interrupt_msi+0x6b8>
    8000ff4a:	4044                	lw	s1,4(s0)
    8000ff4c:	14f5                	add	s1,s1,-3
    8000ff4e:	0014b493          	seqz	s1,s1
    8000ff52:	be19                	j	8000fa68 <software_interrupt_msi+0x6b8>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    8000ff54:	57fd                	li	a5,-1
    8000ff56:	6418                	ld	a4,8(s0)
    8000ff58:	17fe                	sll	a5,a5,0x3f
    8000ff5a:	0789                	add	a5,a5,2
    8000ff5c:	a6f710e3          	bne	a4,a5,8000f9bc <software_interrupt_msi+0x60c>
    8000ff60:	4044                	lw	s1,4(s0)
    8000ff62:	14f1                	add	s1,s1,-4
    8000ff64:	0014b493          	seqz	s1,s1
    8000ff68:	bc91                	j	8000f9bc <software_interrupt_msi+0x60c>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    8000ff6a:	57fd                	li	a5,-1
    8000ff6c:	6418                	ld	a4,8(s0)
    8000ff6e:	17fe                	sll	a5,a5,0x3f
    8000ff70:	0789                	add	a5,a5,2
    8000ff72:	90f71be3          	bne	a4,a5,8000f888 <software_interrupt_msi+0x4d8>
    8000ff76:	4044                	lw	s1,4(s0)
    8000ff78:	14f5                	add	s1,s1,-3
    8000ff7a:	0014b493          	seqz	s1,s1
    8000ff7e:	b229                	j	8000f888 <software_interrupt_msi+0x4d8>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    8000ff80:	57fd                	li	a5,-1
    8000ff82:	6418                	ld	a4,8(s0)
    8000ff84:	17fe                	sll	a5,a5,0x3f
    8000ff86:	0789                	add	a5,a5,2
    8000ff88:	84f71ae3          	bne	a4,a5,8000f7dc <software_interrupt_msi+0x42c>
    8000ff8c:	4044                	lw	s1,4(s0)
    8000ff8e:	14f1                	add	s1,s1,-4
    8000ff90:	0014b493          	seqz	s1,s1
    8000ff94:	849ff06f          	j	8000f7dc <software_interrupt_msi+0x42c>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1",
    8000ff98:	6404                	ld	s1,8(s0)
    8000ff9a:	57f5                	li	a5,-3
    8000ff9c:	8385                	srl	a5,a5,0x1
    8000ff9e:	94be                	add	s1,s1,a5
    8000ffa0:	0014b493          	seqz	s1,s1
    8000ffa4:	e0cff06f          	j	8000f5b0 <software_interrupt_msi+0x200>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    8000ffa8:	4058                	lw	a4,4(s0)
    8000ffaa:	4791                	li	a5,4
    8000ffac:	bcf715e3          	bne	a4,a5,8000fb76 <software_interrupt_msi+0x7c6>
    8000ffb0:	bee9                	j	8000fb8a <software_interrupt_msi+0x7da>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    8000ffb2:	4058                	lw	a4,4(s0)
    8000ffb4:	478d                	li	a5,3
    8000ffb6:	a8f716e3          	bne	a4,a5,8000fa42 <software_interrupt_msi+0x692>
    8000ffba:	bc71                	j	8000fa56 <software_interrupt_msi+0x6a6>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    8000ffbc:	4058                	lw	a4,4(s0)
    8000ffbe:	478d                	li	a5,3
    8000ffc0:	e4f711e3          	bne	a4,a5,8000fe02 <software_interrupt_msi+0xa52>
    8000ffc4:	bd89                	j	8000fe16 <software_interrupt_msi+0xa66>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    8000ffc6:	4058                	lw	a4,4(s0)
    8000ffc8:	478d                	li	a5,3
    8000ffca:	c4f71ce3          	bne	a4,a5,8000fc22 <software_interrupt_msi+0x872>
    8000ffce:	b1a5                	j	8000fc36 <software_interrupt_msi+0x886>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    8000ffd0:	4058                	lw	a4,4(s0)
    8000ffd2:	4791                	li	a5,4
    8000ffd4:	d8f711e3          	bne	a4,a5,8000fd56 <software_interrupt_msi+0x9a6>
    8000ffd8:	bb49                	j	8000fd6a <software_interrupt_msi+0x9ba>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    8000ffda:	4058                	lw	a4,4(s0)
    8000ffdc:	4791                	li	a5,4
    8000ffde:	fcf71c63          	bne	a4,a5,8000f7b6 <software_interrupt_msi+0x406>
    8000ffe2:	fe8ff06f          	j	8000f7ca <software_interrupt_msi+0x41a>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    8000ffe6:	4058                	lw	a4,4(s0)
    8000ffe8:	4791                	li	a5,4
    8000ffea:	c6f71a63          	bne	a4,a5,8000f45e <software_interrupt_msi+0xae>
    8000ffee:	c84ff06f          	j	8000f472 <software_interrupt_msi+0xc2>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    8000fff2:	4058                	lw	a4,4(s0)
    8000fff4:	4791                	li	a5,4
    8000fff6:	9af710e3          	bne	a4,a5,8000f996 <software_interrupt_msi+0x5e6>
    8000fffa:	ba45                	j	8000f9aa <software_interrupt_msi+0x5fa>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    8000fffc:	4058                	lw	a4,4(s0)
    8000fffe:	478d                	li	a5,3
    80010000:	86f711e3          	bne	a4,a5,8000f862 <software_interrupt_msi+0x4b2>
    80010004:	873ff06f          	j	8000f876 <software_interrupt_msi+0x4c6>
    TEST_ASSERT("VS mode leads to  interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    80010008:	0000d517          	auipc	a0,0xd
    8001000c:	b1050513          	add	a0,a0,-1264 # 8001cb18 <__func__.1+0x320>
    80010010:	7530a0ef          	jal	8001af62 <printf>
    80010014:	02900513          	li	a0,41
    80010018:	61d090ef          	jal	80019e34 <putchar>
    8001001c:	b155                	j	8000fcc0 <software_interrupt_msi+0x910>
    TEST_ASSERT("m mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0",
    8001001e:	0000d517          	auipc	a0,0xd
    80010022:	afa50513          	add	a0,a0,-1286 # 8001cb18 <__func__.1+0x320>
    80010026:	73d0a0ef          	jal	8001af62 <printf>
    8001002a:	02900513          	li	a0,41
    8001002e:	607090ef          	jal	80019e34 <putchar>
    80010032:	ccaff06f          	j	8000f4fc <software_interrupt_msi+0x14c>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=0",
    80010036:	0000d517          	auipc	a0,0xd
    8001003a:	ae250513          	add	a0,a0,-1310 # 8001cb18 <__func__.1+0x320>
    8001003e:	7250a0ef          	jal	8001af62 <printf>
    80010042:	02900513          	li	a0,41
    80010046:	5ef090ef          	jal	80019e34 <putchar>
    8001004a:	e56ff06f          	j	8000f6a0 <software_interrupt_msi+0x2f0>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=1",
    8001004e:	0000d517          	auipc	a0,0xd
    80010052:	aca50513          	add	a0,a0,-1334 # 8001cb18 <__func__.1+0x320>
    80010056:	70d0a0ef          	jal	8001af62 <printf>
    8001005a:	02900513          	li	a0,41
    8001005e:	5d7090ef          	jal	80019e34 <putchar>
    80010062:	dbeff06f          	j	8000f620 <software_interrupt_msi+0x270>
    TEST_ASSERT("hs mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80010066:	0000d517          	auipc	a0,0xd
    8001006a:	ab250513          	add	a0,a0,-1358 # 8001cb18 <__func__.1+0x320>
    8001006e:	6f50a0ef          	jal	8001af62 <printf>
    80010072:	02900513          	li	a0,41
    80010076:	5bf090ef          	jal	80019e34 <putchar>
    8001007a:	b49d                	j	8000fae0 <software_interrupt_msi+0x730>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0",
    8001007c:	0000d517          	auipc	a0,0xd
    80010080:	a9c50513          	add	a0,a0,-1380 # 8001cb18 <__func__.1+0x320>
    80010084:	6df0a0ef          	jal	8001af62 <printf>
    80010088:	02900513          	li	a0,41
    8001008c:	5a9090ef          	jal	80019e34 <putchar>
    80010090:	e90ff06f          	j	8000f720 <software_interrupt_msi+0x370>
    TEST_ASSERT("hs mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    80010094:	0000d517          	auipc	a0,0xd
    80010098:	a8450513          	add	a0,a0,-1404 # 8001cb18 <__func__.1+0x320>
    8001009c:	6c70a0ef          	jal	8001af62 <printf>
    800100a0:	02900513          	li	a0,41
    800100a4:	591090ef          	jal	80019e34 <putchar>
    800100a8:	859ff06f          	j	8000f900 <software_interrupt_msi+0x550>
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    800100ac:	0000d517          	auipc	a0,0xd
    800100b0:	a6c50513          	add	a0,a0,-1428 # 8001cb18 <__func__.1+0x320>
    800100b4:	6af0a0ef          	jal	8001af62 <printf>
    800100b8:	02900513          	li	a0,41
    800100bc:	579090ef          	jal	80019e34 <putchar>
    800100c0:	bbf9                	j	8000fe9e <software_interrupt_msi+0xaee>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    800100c2:	4058                	lw	a4,4(s0)
    800100c4:	478d                	li	a5,3
    800100c6:	f6f71f63          	bne	a4,a5,8000f844 <software_interrupt_msi+0x494>
    800100ca:	0000d597          	auipc	a1,0xd
    800100ce:	9f658593          	add	a1,a1,-1546 # 8001cac0 <__func__.1+0x2c8>
    800100d2:	f72ff06f          	j	8000f844 <software_interrupt_msi+0x494>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1",
    800100d6:	0000d597          	auipc	a1,0xd
    800100da:	9ea58593          	add	a1,a1,-1558 # 8001cac0 <__func__.1+0x2c8>
    800100de:	c8eff06f          	j	8000f56c <software_interrupt_msi+0x1bc>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    800100e2:	4058                	lw	a4,4(s0)
    800100e4:	4791                	li	a5,4
    800100e6:	c4f719e3          	bne	a4,a5,8000fd38 <software_interrupt_msi+0x988>
    800100ea:	0000d597          	auipc	a1,0xd
    800100ee:	9d658593          	add	a1,a1,-1578 # 8001cac0 <__func__.1+0x2c8>
    800100f2:	b199                	j	8000fd38 <software_interrupt_msi+0x988>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    800100f4:	4044                	lw	s1,4(s0)
    800100f6:	14f1                	add	s1,s1,-4
    800100f8:	0014b493          	seqz	s1,s1
    800100fc:	b90ff06f          	j	8000f48c <software_interrupt_msi+0xdc>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80010100:	4058                	lw	a4,4(s0)
    80010102:	478d                	li	a5,3
    80010104:	cef710e3          	bne	a4,a5,8000fde4 <software_interrupt_msi+0xa34>
    80010108:	0000d597          	auipc	a1,0xd
    8001010c:	9b858593          	add	a1,a1,-1608 # 8001cac0 <__func__.1+0x2c8>
    80010110:	b9d1                	j	8000fde4 <software_interrupt_msi+0xa34>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80010112:	4058                	lw	a4,4(s0)
    80010114:	4791                	li	a5,4
    80010116:	e8f71163          	bne	a4,a5,8000f798 <software_interrupt_msi+0x3e8>
    8001011a:	0000d597          	auipc	a1,0xd
    8001011e:	9a658593          	add	a1,a1,-1626 # 8001cac0 <__func__.1+0x2c8>
    80010122:	e76ff06f          	j	8000f798 <software_interrupt_msi+0x3e8>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80010126:	4058                	lw	a4,4(s0)
    80010128:	4791                	li	a5,4
    8001012a:	84f717e3          	bne	a4,a5,8000f978 <software_interrupt_msi+0x5c8>
    8001012e:	0000d597          	auipc	a1,0xd
    80010132:	99258593          	add	a1,a1,-1646 # 8001cac0 <__func__.1+0x2c8>
    80010136:	843ff06f          	j	8000f978 <software_interrupt_msi+0x5c8>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    8001013a:	4058                	lw	a4,4(s0)
    8001013c:	4791                	li	a5,4
    8001013e:	b0f71163          	bne	a4,a5,8000f440 <software_interrupt_msi+0x90>
    80010142:	0000d597          	auipc	a1,0xd
    80010146:	97e58593          	add	a1,a1,-1666 # 8001cac0 <__func__.1+0x2c8>
    8001014a:	af6ff06f          	j	8000f440 <software_interrupt_msi+0x90>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    8001014e:	4058                	lw	a4,4(s0)
    80010150:	4791                	li	a5,4
    80010152:	a0f713e3          	bne	a4,a5,8000fb58 <software_interrupt_msi+0x7a8>
    80010156:	0000d597          	auipc	a1,0xd
    8001015a:	96a58593          	add	a1,a1,-1686 # 8001cac0 <__func__.1+0x2c8>
    8001015e:	baed                	j	8000fb58 <software_interrupt_msi+0x7a8>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80010160:	4058                	lw	a4,4(s0)
    80010162:	478d                	li	a5,3
    80010164:	aaf710e3          	bne	a4,a5,8000fc04 <software_interrupt_msi+0x854>
    80010168:	0000d597          	auipc	a1,0xd
    8001016c:	95858593          	add	a1,a1,-1704 # 8001cac0 <__func__.1+0x2c8>
    80010170:	bc51                	j	8000fc04 <software_interrupt_msi+0x854>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    80010172:	4058                	lw	a4,4(s0)
    80010174:	478d                	li	a5,3
    80010176:	8af717e3          	bne	a4,a5,8000fa24 <software_interrupt_msi+0x674>
    8001017a:	0000d597          	auipc	a1,0xd
    8001017e:	94658593          	add	a1,a1,-1722 # 8001cac0 <__func__.1+0x2c8>
    80010182:	8a3ff06f          	j	8000fa24 <software_interrupt_msi+0x674>

0000000080010186 <software_interrupt_ssi>:



bool software_interrupt_ssi() {
    80010186:	1101                	add	sp,sp,-32

    TEST_START();
    80010188:	0000c597          	auipc	a1,0xc
    8001018c:	b3058593          	add	a1,a1,-1232 # 8001bcb8 <__func__.1>
    80010190:	0000d517          	auipc	a0,0xd
    80010194:	95050513          	add	a0,a0,-1712 # 8001cae0 <__func__.1+0x2e8>
bool software_interrupt_ssi() {
    80010198:	ec06                	sd	ra,24(sp)
    8001019a:	e822                	sd	s0,16(sp)
    8001019c:	e426                	sd	s1,8(sp)
    8001019e:	e04a                	sd	s2,0(sp)
    TEST_START();
    800101a0:	5c30a0ef          	jal	8001af62 <printf>
    800101a4:	4529                	li	a0,10
    800101a6:	48f090ef          	jal	80019e34 <putchar>

    TEST_SETUP_EXCEPT();
    800101aa:	0ff0000f          	fence
    800101ae:	4785                	li	a5,1
    800101b0:	0002d417          	auipc	s0,0x2d
    800101b4:	e6040413          	add	s0,s0,-416 # 8003d010 <excpt>
    800101b8:	00f41023          	sh	a5,0(s0)
    800101bc:	0002d797          	auipc	a5,0x2d
    800101c0:	e807b623          	sd	zero,-372(a5) # 8003d048 <excpt+0x38>
    800101c4:	0ff0000f          	fence

    //HS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSIE拉高
    goto_priv(PRIV_M);
    800101c8:	4511                	li	a0,4
    800101ca:	915f00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);    
    800101ce:	10016073          	csrs	sstatus,2
    CSRS(CSR_SIE,SIE_SSIE);
    800101d2:	10416073          	csrs	sie,2
    CSRW(CSR_MIDELEG,0);
    800101d6:	30305073          	csrw	mideleg,0
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    800101da:	14416073          	csrs	sip,2

    goto_priv(PRIV_HS);
    800101de:	450d                	li	a0,3
    800101e0:	8fff00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    800101e4:	08200593          	li	a1,130
    800101e8:	00011617          	auipc	a2,0x11
    800101ec:	84860613          	add	a2,a2,-1976 # 80020a30 <__func__.1+0x4238>
    800101f0:	0000d517          	auipc	a0,0xd
    800101f4:	90850513          	add	a0,a0,-1784 # 8001caf8 <__func__.1+0x300>
    800101f8:	56b0a0ef          	jal	8001af62 <printf>
    800101fc:	00144783          	lbu	a5,1(s0)
    80010200:	0000d597          	auipc	a1,0xd
    80010204:	8d058593          	add	a1,a1,-1840 # 8001cad0 <__func__.1+0x2d8>
    80010208:	c799                	beqz	a5,80010216 <software_interrupt_ssi+0x90>
    8001020a:	57fd                	li	a5,-1
    8001020c:	6418                	ld	a4,8(s0)
    8001020e:	17fe                	sll	a5,a5,0x3f
    80010210:	0785                	add	a5,a5,1
    80010212:	20f70ae3          	beq	a4,a5,80010c26 <software_interrupt_ssi+0xaa0>
    80010216:	0000d517          	auipc	a0,0xd
    8001021a:	8fa50513          	add	a0,a0,-1798 # 8001cb10 <__func__.1+0x318>
    8001021e:	5450a0ef          	jal	8001af62 <printf>
    80010222:	00144783          	lbu	a5,1(s0)
    80010226:	c799                	beqz	a5,80010234 <software_interrupt_ssi+0xae>
    80010228:	57fd                	li	a5,-1
    8001022a:	6418                	ld	a4,8(s0)
    8001022c:	17fe                	sll	a5,a5,0x3f
    8001022e:	0785                	add	a5,a5,1
    80010230:	0af70fe3          	beq	a4,a5,80010aee <software_interrupt_ssi+0x968>
    80010234:	0000d517          	auipc	a0,0xd
    80010238:	8e450513          	add	a0,a0,-1820 # 8001cb18 <__func__.1+0x320>
    8001023c:	5270a0ef          	jal	8001af62 <printf>
    80010240:	02900513          	li	a0,41
    80010244:	3f1090ef          	jal	80019e34 <putchar>
    80010248:	4529                	li	a0,10
    8001024a:	3eb090ef          	jal	80019e34 <putchar>
    8001024e:	00144783          	lbu	a5,1(s0)
    80010252:	4481                	li	s1,0
    80010254:	c799                	beqz	a5,80010262 <software_interrupt_ssi+0xdc>
    80010256:	57fd                	li	a5,-1
    80010258:	6418                	ld	a4,8(s0)
    8001025a:	17fe                	sll	a5,a5,0x3f
    8001025c:	0785                	add	a5,a5,1
    8001025e:	16f708e3          	beq	a4,a5,80010bce <software_interrupt_ssi+0xa48>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSE拉高，有代理
    TEST_SETUP_EXCEPT();
    80010262:	0ff0000f          	fence
    80010266:	4785                	li	a5,1
    80010268:	00f41023          	sh	a5,0(s0)
    8001026c:	0002d797          	auipc	a5,0x2d
    80010270:	dc07be23          	sd	zero,-548(a5) # 8003d048 <excpt+0x38>
    80010274:	0ff0000f          	fence
    goto_priv(PRIV_M);
    80010278:	4511                	li	a0,4
    8001027a:	865f00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    8001027e:	10016073          	csrs	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    80010282:	597d                	li	s2,-1
    80010284:	30391073          	csrw	mideleg,s2
    CSRS(CSR_SIE,SIE_SSIE);
    80010288:	10416073          	csrs	sie,2
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    8001028c:	14416073          	csrs	sip,2

    goto_priv(PRIV_HS);
    80010290:	450d                	li	a0,3
    80010292:	84df00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80010296:	08200593          	li	a1,130
    8001029a:	00011617          	auipc	a2,0x11
    8001029e:	80660613          	add	a2,a2,-2042 # 80020aa0 <__func__.1+0x42a8>
    800102a2:	0000d517          	auipc	a0,0xd
    800102a6:	85650513          	add	a0,a0,-1962 # 8001caf8 <__func__.1+0x300>
    800102aa:	4b90a0ef          	jal	8001af62 <printf>
    800102ae:	00144783          	lbu	a5,1(s0)
    800102b2:	0000d597          	auipc	a1,0xd
    800102b6:	81e58593          	add	a1,a1,-2018 # 8001cad0 <__func__.1+0x2d8>
    800102ba:	c791                	beqz	a5,800102c6 <software_interrupt_ssi+0x140>
    800102bc:	641c                	ld	a5,8(s0)
    800102be:	197e                	sll	s2,s2,0x3f
    800102c0:	0905                	add	s2,s2,1
    800102c2:	11278ce3          	beq	a5,s2,80010bda <software_interrupt_ssi+0xa54>
    800102c6:	0000d517          	auipc	a0,0xd
    800102ca:	84a50513          	add	a0,a0,-1974 # 8001cb10 <__func__.1+0x318>
    800102ce:	4950a0ef          	jal	8001af62 <printf>
    800102d2:	00144783          	lbu	a5,1(s0)
    800102d6:	c799                	beqz	a5,800102e4 <software_interrupt_ssi+0x15e>
    800102d8:	57fd                	li	a5,-1
    800102da:	6418                	ld	a4,8(s0)
    800102dc:	17fe                	sll	a5,a5,0x3f
    800102de:	0785                	add	a5,a5,1
    800102e0:	00f701e3          	beq	a4,a5,80010ae2 <software_interrupt_ssi+0x95c>
    800102e4:	0000d517          	auipc	a0,0xd
    800102e8:	83450513          	add	a0,a0,-1996 # 8001cb18 <__func__.1+0x320>
    800102ec:	4770a0ef          	jal	8001af62 <printf>
    800102f0:	02900513          	li	a0,41
    800102f4:	341090ef          	jal	80019e34 <putchar>
    800102f8:	4529                	li	a0,10
    800102fa:	33b090ef          	jal	80019e34 <putchar>
    800102fe:	c491                	beqz	s1,8001030a <software_interrupt_ssi+0x184>
    80010300:	00144783          	lbu	a5,1(s0)
    80010304:	4481                	li	s1,0
    80010306:	7c079263          	bnez	a5,80010aca <software_interrupt_ssi+0x944>
        excpt.priv == PRIV_HS
    ); 


    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=1，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    8001030a:	0ff0000f          	fence
    8001030e:	4785                	li	a5,1
    80010310:	00f41023          	sh	a5,0(s0)
    80010314:	0002d797          	auipc	a5,0x2d
    80010318:	d207ba23          	sd	zero,-716(a5) # 8003d048 <excpt+0x38>
    8001031c:	0ff0000f          	fence
    goto_priv(PRIV_M);
    80010320:	4511                	li	a0,4
    80010322:	fbcf00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80010326:	10016073          	csrs	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    8001032a:	10417073          	csrc	sie,2
    CSRS(CSR_SIP,SIP_SSIP);    
    8001032e:	14416073          	csrs	sip,2

    goto_priv(PRIV_HS);
    80010332:	450d                	li	a0,3
    80010334:	faaf00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    80010338:	08200593          	li	a1,130
    8001033c:	00010617          	auipc	a2,0x10
    80010340:	7d460613          	add	a2,a2,2004 # 80020b10 <__func__.1+0x4318>
    80010344:	0000c517          	auipc	a0,0xc
    80010348:	7b450513          	add	a0,a0,1972 # 8001caf8 <__func__.1+0x300>
    8001034c:	4170a0ef          	jal	8001af62 <printf>
    80010350:	00144783          	lbu	a5,1(s0)
    80010354:	0000c597          	auipc	a1,0xc
    80010358:	77c58593          	add	a1,a1,1916 # 8001cad0 <__func__.1+0x2d8>
    8001035c:	e789                	bnez	a5,80010366 <software_interrupt_ssi+0x1e0>
    8001035e:	0000c597          	auipc	a1,0xc
    80010362:	76258593          	add	a1,a1,1890 # 8001cac0 <__func__.1+0x2c8>
    80010366:	0000c517          	auipc	a0,0xc
    8001036a:	7aa50513          	add	a0,a0,1962 # 8001cb10 <__func__.1+0x318>
    8001036e:	3f50a0ef          	jal	8001af62 <printf>
    80010372:	00144783          	lbu	a5,1(s0)
    80010376:	7c079b63          	bnez	a5,80010b4c <software_interrupt_ssi+0x9c6>
    8001037a:	4529                	li	a0,10
    8001037c:	2b9090ef          	jal	80019e34 <putchar>
    80010380:	c489                	beqz	s1,8001038a <software_interrupt_ssi+0x204>
    80010382:	00144483          	lbu	s1,1(s0)
    80010386:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    );

    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1
    TEST_SETUP_EXCEPT();
    8001038a:	0ff0000f          	fence
    8001038e:	4785                	li	a5,1
    80010390:	00f41023          	sh	a5,0(s0)
    80010394:	0002d797          	auipc	a5,0x2d
    80010398:	ca07ba23          	sd	zero,-844(a5) # 8003d048 <excpt+0x38>
    8001039c:	0ff0000f          	fence
    goto_priv(PRIV_M);
    800103a0:	4511                	li	a0,4
    800103a2:	f3cf00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800103a6:	10016073          	csrs	sstatus,2
    CSRW(CSR_MIDELEG,0);  
    800103aa:	30305073          	csrw	mideleg,0
    CSRS(CSR_SIE,SIE_SSIE);
    800103ae:	10416073          	csrs	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    800103b2:	14417073          	csrc	sip,2

    goto_priv(PRIV_HS);
    800103b6:	450d                	li	a0,3
    800103b8:	f26f00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    800103bc:	08200593          	li	a1,130
    800103c0:	00010617          	auipc	a2,0x10
    800103c4:	7a860613          	add	a2,a2,1960 # 80020b68 <__func__.1+0x4370>
    800103c8:	0000c517          	auipc	a0,0xc
    800103cc:	73050513          	add	a0,a0,1840 # 8001caf8 <__func__.1+0x300>
    800103d0:	3930a0ef          	jal	8001af62 <printf>
    800103d4:	00144783          	lbu	a5,1(s0)
    800103d8:	0000c597          	auipc	a1,0xc
    800103dc:	6f858593          	add	a1,a1,1784 # 8001cad0 <__func__.1+0x2d8>
    800103e0:	c799                	beqz	a5,800103ee <software_interrupt_ssi+0x268>
    800103e2:	57fd                	li	a5,-1
    800103e4:	6418                	ld	a4,8(s0)
    800103e6:	17fe                	sll	a5,a5,0x3f
    800103e8:	0785                	add	a5,a5,1
    800103ea:	00f702e3          	beq	a4,a5,80010bee <software_interrupt_ssi+0xa68>
    800103ee:	0000c517          	auipc	a0,0xc
    800103f2:	72250513          	add	a0,a0,1826 # 8001cb10 <__func__.1+0x318>
    800103f6:	36d0a0ef          	jal	8001af62 <printf>
    800103fa:	00144783          	lbu	a5,1(s0)
    800103fe:	c799                	beqz	a5,8001040c <software_interrupt_ssi+0x286>
    80010400:	57fd                	li	a5,-1
    80010402:	6418                	ld	a4,8(s0)
    80010404:	17fe                	sll	a5,a5,0x3f
    80010406:	0785                	add	a5,a5,1
    80010408:	70f70863          	beq	a4,a5,80010b18 <software_interrupt_ssi+0x992>
    8001040c:	0000c517          	auipc	a0,0xc
    80010410:	70c50513          	add	a0,a0,1804 # 8001cb18 <__func__.1+0x320>
    80010414:	34f0a0ef          	jal	8001af62 <printf>
    80010418:	02900513          	li	a0,41
    8001041c:	219090ef          	jal	80019e34 <putchar>
    80010420:	4529                	li	a0,10
    80010422:	213090ef          	jal	80019e34 <putchar>
    80010426:	c491                	beqz	s1,80010432 <software_interrupt_ssi+0x2ac>
    80010428:	00144783          	lbu	a5,1(s0)
    8001042c:	4481                	li	s1,0
    8001042e:	68079363          	bnez	a5,80010ab4 <software_interrupt_ssi+0x92e>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    );

    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1，有代理
    TEST_SETUP_EXCEPT();
    80010432:	0ff0000f          	fence
    80010436:	4785                	li	a5,1
    80010438:	00f41023          	sh	a5,0(s0)
    8001043c:	0002d797          	auipc	a5,0x2d
    80010440:	c007b623          	sd	zero,-1012(a5) # 8003d048 <excpt+0x38>
    80010444:	0ff0000f          	fence
    goto_priv(PRIV_M);
    80010448:	4511                	li	a0,4
    8001044a:	e94f00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    8001044e:	10016073          	csrs	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    80010452:	597d                	li	s2,-1
    80010454:	30391073          	csrw	mideleg,s2
    CSRS(CSR_SIE,SIE_SSIE);
    80010458:	10416073          	csrs	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    8001045c:	14417073          	csrc	sip,2

    goto_priv(PRIV_HS);
    80010460:	450d                	li	a0,3
    80010462:	e7cf00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80010466:	08200593          	li	a1,130
    8001046a:	00010617          	auipc	a2,0x10
    8001046e:	76e60613          	add	a2,a2,1902 # 80020bd8 <__func__.1+0x43e0>
    80010472:	0000c517          	auipc	a0,0xc
    80010476:	68650513          	add	a0,a0,1670 # 8001caf8 <__func__.1+0x300>
    8001047a:	2e90a0ef          	jal	8001af62 <printf>
    8001047e:	00144783          	lbu	a5,1(s0)
    80010482:	0000c597          	auipc	a1,0xc
    80010486:	64e58593          	add	a1,a1,1614 # 8001cad0 <__func__.1+0x2d8>
    8001048a:	c791                	beqz	a5,80010496 <software_interrupt_ssi+0x310>
    8001048c:	641c                	ld	a5,8(s0)
    8001048e:	197e                	sll	s2,s2,0x3f
    80010490:	0905                	add	s2,s2,1
    80010492:	7b278463          	beq	a5,s2,80010c3a <software_interrupt_ssi+0xab4>
    80010496:	0000c517          	auipc	a0,0xc
    8001049a:	67a50513          	add	a0,a0,1658 # 8001cb10 <__func__.1+0x318>
    8001049e:	2c50a0ef          	jal	8001af62 <printf>
    800104a2:	00144783          	lbu	a5,1(s0)
    800104a6:	c799                	beqz	a5,800104b4 <software_interrupt_ssi+0x32e>
    800104a8:	57fd                	li	a5,-1
    800104aa:	6418                	ld	a4,8(s0)
    800104ac:	17fe                	sll	a5,a5,0x3f
    800104ae:	0785                	add	a5,a5,1
    800104b0:	66f70963          	beq	a4,a5,80010b22 <software_interrupt_ssi+0x99c>
    800104b4:	0000c517          	auipc	a0,0xc
    800104b8:	66450513          	add	a0,a0,1636 # 8001cb18 <__func__.1+0x320>
    800104bc:	2a70a0ef          	jal	8001af62 <printf>
    800104c0:	02900513          	li	a0,41
    800104c4:	171090ef          	jal	80019e34 <putchar>
    800104c8:	4529                	li	a0,10
    800104ca:	16b090ef          	jal	80019e34 <putchar>
    800104ce:	c491                	beqz	s1,800104da <software_interrupt_ssi+0x354>
    800104d0:	00144783          	lbu	a5,1(s0)
    800104d4:	4481                	li	s1,0
    800104d6:	5c079463          	bnez	a5,80010a9e <software_interrupt_ssi+0x918>
        excpt.priv == PRIV_HS
    );


    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    800104da:	0ff0000f          	fence
    800104de:	4785                	li	a5,1
    800104e0:	00f41023          	sh	a5,0(s0)
    800104e4:	0002d797          	auipc	a5,0x2d
    800104e8:	b607b223          	sd	zero,-1180(a5) # 8003d048 <excpt+0x38>
    800104ec:	0ff0000f          	fence
    goto_priv(PRIV_M);
    800104f0:	4511                	li	a0,4
    800104f2:	decf00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800104f6:	10016073          	csrs	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    800104fa:	10417073          	csrc	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    800104fe:	14417073          	csrc	sip,2

    goto_priv(PRIV_HS);
    80010502:	450d                	li	a0,3
    80010504:	ddaf00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    80010508:	08200593          	li	a1,130
    8001050c:	00010617          	auipc	a2,0x10
    80010510:	72c60613          	add	a2,a2,1836 # 80020c38 <__func__.1+0x4440>
    80010514:	0000c517          	auipc	a0,0xc
    80010518:	5e450513          	add	a0,a0,1508 # 8001caf8 <__func__.1+0x300>
    8001051c:	2470a0ef          	jal	8001af62 <printf>
    80010520:	00144783          	lbu	a5,1(s0)
    80010524:	0000c597          	auipc	a1,0xc
    80010528:	5ac58593          	add	a1,a1,1452 # 8001cad0 <__func__.1+0x2d8>
    8001052c:	e789                	bnez	a5,80010536 <software_interrupt_ssi+0x3b0>
    8001052e:	0000c597          	auipc	a1,0xc
    80010532:	59258593          	add	a1,a1,1426 # 8001cac0 <__func__.1+0x2c8>
    80010536:	0000c517          	auipc	a0,0xc
    8001053a:	5da50513          	add	a0,a0,1498 # 8001cb10 <__func__.1+0x318>
    8001053e:	2250a0ef          	jal	8001af62 <printf>
    80010542:	00144783          	lbu	a5,1(s0)
    80010546:	62079a63          	bnez	a5,80010b7a <software_interrupt_ssi+0x9f4>
    8001054a:	4529                	li	a0,10
    8001054c:	0e9090ef          	jal	80019e34 <putchar>
    80010550:	c489                	beqz	s1,8001055a <software_interrupt_ssi+0x3d4>
    80010552:	00144483          	lbu	s1,1(s0)
    80010556:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    );

    //HS模式下产生软件中断，sstatus.sie=0，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    8001055a:	0ff0000f          	fence
    8001055e:	4785                	li	a5,1
    80010560:	00f41023          	sh	a5,0(s0)
    80010564:	0002d797          	auipc	a5,0x2d
    80010568:	ae07b223          	sd	zero,-1308(a5) # 8003d048 <excpt+0x38>
    8001056c:	0ff0000f          	fence
    goto_priv(PRIV_M);
    80010570:	4511                	li	a0,4
    80010572:	d6cf00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80010576:	10016073          	csrs	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    8001057a:	10417073          	csrc	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    8001057e:	14417073          	csrc	sip,2

    goto_priv(PRIV_HS);
    80010582:	450d                	li	a0,3
    80010584:	d5af00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    80010588:	08200593          	li	a1,130
    8001058c:	00010617          	auipc	a2,0x10
    80010590:	6fc60613          	add	a2,a2,1788 # 80020c88 <__func__.1+0x4490>
    80010594:	0000c517          	auipc	a0,0xc
    80010598:	56450513          	add	a0,a0,1380 # 8001caf8 <__func__.1+0x300>
    8001059c:	1c70a0ef          	jal	8001af62 <printf>
    800105a0:	00144783          	lbu	a5,1(s0)
    800105a4:	0000c597          	auipc	a1,0xc
    800105a8:	52c58593          	add	a1,a1,1324 # 8001cad0 <__func__.1+0x2d8>
    800105ac:	e789                	bnez	a5,800105b6 <software_interrupt_ssi+0x430>
    800105ae:	0000c597          	auipc	a1,0xc
    800105b2:	51258593          	add	a1,a1,1298 # 8001cac0 <__func__.1+0x2c8>
    800105b6:	0000c517          	auipc	a0,0xc
    800105ba:	55a50513          	add	a0,a0,1370 # 8001cb10 <__func__.1+0x318>
    800105be:	1a50a0ef          	jal	8001af62 <printf>
    800105c2:	00144783          	lbu	a5,1(s0)
    800105c6:	58079f63          	bnez	a5,80010b64 <software_interrupt_ssi+0x9de>
    800105ca:	4529                	li	a0,10
    800105cc:	069090ef          	jal	80019e34 <putchar>
    800105d0:	c489                	beqz	s1,800105da <software_interrupt_ssi+0x454>
    800105d2:	00144483          	lbu	s1,1(s0)
    800105d6:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    );

//VS-mode下

    TEST_SETUP_EXCEPT();
    800105da:	0ff0000f          	fence
    800105de:	4785                	li	a5,1
    800105e0:	00f41023          	sh	a5,0(s0)
    800105e4:	0002d717          	auipc	a4,0x2d
    800105e8:	a6073223          	sd	zero,-1436(a4) # 8003d048 <excpt+0x38>
    800105ec:	0ff0000f          	fence
    //VS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSIE拉高
    TEST_SETUP_EXCEPT();
    800105f0:	0ff0000f          	fence
    800105f4:	0002d717          	auipc	a4,0x2d
    800105f8:	a4073a23          	sd	zero,-1452(a4) # 8003d048 <excpt+0x38>
    800105fc:	00f41023          	sh	a5,0(s0)
    80010600:	0ff0000f          	fence
    goto_priv(PRIV_M);
    80010604:	4511                	li	a0,4
    80010606:	cd8f00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);    
    8001060a:	10016073          	csrs	sstatus,2
    CSRS(CSR_SIE,SIE_SSIE);
    8001060e:	10416073          	csrs	sie,2
    CSRW(CSR_MIDELEG,0);
    80010612:	30305073          	csrw	mideleg,0
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    80010616:	14416073          	csrs	sip,2

    goto_priv(PRIV_VS);
    8001061a:	4509                	li	a0,2
    8001061c:	cc2f00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80010620:	08200593          	li	a1,130
    80010624:	00010617          	auipc	a2,0x10
    80010628:	6b460613          	add	a2,a2,1716 # 80020cd8 <__func__.1+0x44e0>
    8001062c:	0000c517          	auipc	a0,0xc
    80010630:	4cc50513          	add	a0,a0,1228 # 8001caf8 <__func__.1+0x300>
    80010634:	12f0a0ef          	jal	8001af62 <printf>
    80010638:	00144783          	lbu	a5,1(s0)
    8001063c:	0000c597          	auipc	a1,0xc
    80010640:	49458593          	add	a1,a1,1172 # 8001cad0 <__func__.1+0x2d8>
    80010644:	c799                	beqz	a5,80010652 <software_interrupt_ssi+0x4cc>
    80010646:	57fd                	li	a5,-1
    80010648:	6418                	ld	a4,8(s0)
    8001064a:	17fe                	sll	a5,a5,0x3f
    8001064c:	0785                	add	a5,a5,1
    8001064e:	60f70063          	beq	a4,a5,80010c4e <software_interrupt_ssi+0xac8>
    80010652:	0000c517          	auipc	a0,0xc
    80010656:	4be50513          	add	a0,a0,1214 # 8001cb10 <__func__.1+0x318>
    8001065a:	1090a0ef          	jal	8001af62 <printf>
    8001065e:	00144783          	lbu	a5,1(s0)
    80010662:	c799                	beqz	a5,80010670 <software_interrupt_ssi+0x4ea>
    80010664:	57fd                	li	a5,-1
    80010666:	6418                	ld	a4,8(s0)
    80010668:	17fe                	sll	a5,a5,0x3f
    8001066a:	0785                	add	a5,a5,1
    8001066c:	48f70763          	beq	a4,a5,80010afa <software_interrupt_ssi+0x974>
    80010670:	0000c517          	auipc	a0,0xc
    80010674:	4a850513          	add	a0,a0,1192 # 8001cb18 <__func__.1+0x320>
    80010678:	0eb0a0ef          	jal	8001af62 <printf>
    8001067c:	02900513          	li	a0,41
    80010680:	7b4090ef          	jal	80019e34 <putchar>
    80010684:	4529                	li	a0,10
    80010686:	7ae090ef          	jal	80019e34 <putchar>
    8001068a:	c491                	beqz	s1,80010696 <software_interrupt_ssi+0x510>
    8001068c:	00144783          	lbu	a5,1(s0)
    80010690:	4481                	li	s1,0
    80010692:	3e079b63          	bnez	a5,80010a88 <software_interrupt_ssi+0x902>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSE拉高，有代理
    TEST_SETUP_EXCEPT();
    80010696:	0ff0000f          	fence
    8001069a:	4785                	li	a5,1
    8001069c:	00f41023          	sh	a5,0(s0)
    800106a0:	0002d797          	auipc	a5,0x2d
    800106a4:	9a07b423          	sd	zero,-1624(a5) # 8003d048 <excpt+0x38>
    800106a8:	0ff0000f          	fence
    goto_priv(PRIV_M);
    800106ac:	4511                	li	a0,4
    800106ae:	c30f00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800106b2:	10016073          	csrs	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    800106b6:	597d                	li	s2,-1
    800106b8:	30391073          	csrw	mideleg,s2
    CSRS(CSR_SIE,SIE_SSIE);
    800106bc:	10416073          	csrs	sie,2
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    800106c0:	14416073          	csrs	sip,2

    goto_priv(PRIV_VS);
    800106c4:	4509                	li	a0,2
    800106c6:	c18f00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    800106ca:	08200593          	li	a1,130
    800106ce:	00010617          	auipc	a2,0x10
    800106d2:	67a60613          	add	a2,a2,1658 # 80020d48 <__func__.1+0x4550>
    800106d6:	0000c517          	auipc	a0,0xc
    800106da:	42250513          	add	a0,a0,1058 # 8001caf8 <__func__.1+0x300>
    800106de:	0850a0ef          	jal	8001af62 <printf>
    800106e2:	00144783          	lbu	a5,1(s0)
    800106e6:	0000c597          	auipc	a1,0xc
    800106ea:	3ea58593          	add	a1,a1,1002 # 8001cad0 <__func__.1+0x2d8>
    800106ee:	c791                	beqz	a5,800106fa <software_interrupt_ssi+0x574>
    800106f0:	641c                	ld	a5,8(s0)
    800106f2:	197e                	sll	s2,s2,0x3f
    800106f4:	0905                	add	s2,s2,1
    800106f6:	51278f63          	beq	a5,s2,80010c14 <software_interrupt_ssi+0xa8e>
    800106fa:	0000c517          	auipc	a0,0xc
    800106fe:	41650513          	add	a0,a0,1046 # 8001cb10 <__func__.1+0x318>
    80010702:	0610a0ef          	jal	8001af62 <printf>
    80010706:	00144783          	lbu	a5,1(s0)
    8001070a:	c799                	beqz	a5,80010718 <software_interrupt_ssi+0x592>
    8001070c:	57fd                	li	a5,-1
    8001070e:	6418                	ld	a4,8(s0)
    80010710:	17fe                	sll	a5,a5,0x3f
    80010712:	0785                	add	a5,a5,1
    80010714:	3ef70863          	beq	a4,a5,80010b04 <software_interrupt_ssi+0x97e>
    80010718:	0000c517          	auipc	a0,0xc
    8001071c:	40050513          	add	a0,a0,1024 # 8001cb18 <__func__.1+0x320>
    80010720:	0430a0ef          	jal	8001af62 <printf>
    80010724:	02900513          	li	a0,41
    80010728:	70c090ef          	jal	80019e34 <putchar>
    8001072c:	4529                	li	a0,10
    8001072e:	706090ef          	jal	80019e34 <putchar>
    80010732:	c491                	beqz	s1,8001073e <software_interrupt_ssi+0x5b8>
    80010734:	00144783          	lbu	a5,1(s0)
    80010738:	4481                	li	s1,0
    8001073a:	32079c63          	bnez	a5,80010a72 <software_interrupt_ssi+0x8ec>
        excpt.priv == PRIV_HS
    ); 


    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=1，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    8001073e:	0ff0000f          	fence
    80010742:	4785                	li	a5,1
    80010744:	00f41023          	sh	a5,0(s0)
    80010748:	0002d797          	auipc	a5,0x2d
    8001074c:	9007b023          	sd	zero,-1792(a5) # 8003d048 <excpt+0x38>
    80010750:	0ff0000f          	fence
    goto_priv(PRIV_M);
    80010754:	4511                	li	a0,4
    80010756:	b88f00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    8001075a:	10016073          	csrs	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    8001075e:	10417073          	csrc	sie,2
    CSRS(CSR_SIP,SIP_SSIP);    
    80010762:	14416073          	csrs	sip,2

    goto_priv(PRIV_VS);
    80010766:	4509                	li	a0,2
    80010768:	b76f00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    8001076c:	08200593          	li	a1,130
    80010770:	00010617          	auipc	a2,0x10
    80010774:	64860613          	add	a2,a2,1608 # 80020db8 <__func__.1+0x45c0>
    80010778:	0000c517          	auipc	a0,0xc
    8001077c:	38050513          	add	a0,a0,896 # 8001caf8 <__func__.1+0x300>
    80010780:	7e20a0ef          	jal	8001af62 <printf>
    80010784:	00144783          	lbu	a5,1(s0)
    80010788:	0000c597          	auipc	a1,0xc
    8001078c:	34858593          	add	a1,a1,840 # 8001cad0 <__func__.1+0x2d8>
    80010790:	e789                	bnez	a5,8001079a <software_interrupt_ssi+0x614>
    80010792:	0000c597          	auipc	a1,0xc
    80010796:	32e58593          	add	a1,a1,814 # 8001cac0 <__func__.1+0x2c8>
    8001079a:	0000c517          	auipc	a0,0xc
    8001079e:	37650513          	add	a0,a0,886 # 8001cb10 <__func__.1+0x318>
    800107a2:	7c00a0ef          	jal	8001af62 <printf>
    800107a6:	00144783          	lbu	a5,1(s0)
    800107aa:	38079663          	bnez	a5,80010b36 <software_interrupt_ssi+0x9b0>
    800107ae:	4529                	li	a0,10
    800107b0:	684090ef          	jal	80019e34 <putchar>
    800107b4:	c489                	beqz	s1,800107be <software_interrupt_ssi+0x638>
    800107b6:	00144483          	lbu	s1,1(s0)
    800107ba:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    );

    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1
    TEST_SETUP_EXCEPT();
    800107be:	0ff0000f          	fence
    800107c2:	4785                	li	a5,1
    800107c4:	00f41023          	sh	a5,0(s0)
    800107c8:	0002d797          	auipc	a5,0x2d
    800107cc:	8807b023          	sd	zero,-1920(a5) # 8003d048 <excpt+0x38>
    800107d0:	0ff0000f          	fence
    goto_priv(PRIV_M);
    800107d4:	4511                	li	a0,4
    800107d6:	b08f00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800107da:	10016073          	csrs	sstatus,2
    CSRW(CSR_MIDELEG,0);  
    800107de:	30305073          	csrw	mideleg,0
    CSRS(CSR_SIE,SIE_SSIE);
    800107e2:	10416073          	csrs	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    800107e6:	14417073          	csrc	sip,2

    goto_priv(PRIV_VS);
    800107ea:	4509                	li	a0,2
    800107ec:	af2f00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    800107f0:	08200593          	li	a1,130
    800107f4:	00010617          	auipc	a2,0x10
    800107f8:	61c60613          	add	a2,a2,1564 # 80020e10 <__func__.1+0x4618>
    800107fc:	0000c517          	auipc	a0,0xc
    80010800:	2fc50513          	add	a0,a0,764 # 8001caf8 <__func__.1+0x300>
    80010804:	75e0a0ef          	jal	8001af62 <printf>
    80010808:	00144783          	lbu	a5,1(s0)
    8001080c:	0000c597          	auipc	a1,0xc
    80010810:	2c458593          	add	a1,a1,708 # 8001cad0 <__func__.1+0x2d8>
    80010814:	c799                	beqz	a5,80010822 <software_interrupt_ssi+0x69c>
    80010816:	57fd                	li	a5,-1
    80010818:	6418                	ld	a4,8(s0)
    8001081a:	17fe                	sll	a5,a5,0x3f
    8001081c:	0785                	add	a5,a5,1
    8001081e:	38f70f63          	beq	a4,a5,80010bbc <software_interrupt_ssi+0xa36>
    80010822:	0000c517          	auipc	a0,0xc
    80010826:	2ee50513          	add	a0,a0,750 # 8001cb10 <__func__.1+0x318>
    8001082a:	7380a0ef          	jal	8001af62 <printf>
    8001082e:	00144783          	lbu	a5,1(s0)
    80010832:	c799                	beqz	a5,80010840 <software_interrupt_ssi+0x6ba>
    80010834:	57fd                	li	a5,-1
    80010836:	6418                	ld	a4,8(s0)
    80010838:	17fe                	sll	a5,a5,0x3f
    8001083a:	0785                	add	a5,a5,1
    8001083c:	2ef70863          	beq	a4,a5,80010b2c <software_interrupt_ssi+0x9a6>
    80010840:	0000c517          	auipc	a0,0xc
    80010844:	2d850513          	add	a0,a0,728 # 8001cb18 <__func__.1+0x320>
    80010848:	71a0a0ef          	jal	8001af62 <printf>
    8001084c:	02900513          	li	a0,41
    80010850:	5e4090ef          	jal	80019e34 <putchar>
    80010854:	4529                	li	a0,10
    80010856:	5de090ef          	jal	80019e34 <putchar>
    8001085a:	c491                	beqz	s1,80010866 <software_interrupt_ssi+0x6e0>
    8001085c:	00144783          	lbu	a5,1(s0)
    80010860:	4481                	li	s1,0
    80010862:	1e079d63          	bnez	a5,80010a5c <software_interrupt_ssi+0x8d6>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    );

    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1，有代理
    TEST_SETUP_EXCEPT();
    80010866:	0ff0000f          	fence
    8001086a:	4785                	li	a5,1
    8001086c:	00f41023          	sh	a5,0(s0)
    80010870:	0002c797          	auipc	a5,0x2c
    80010874:	7c07bc23          	sd	zero,2008(a5) # 8003d048 <excpt+0x38>
    80010878:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8001087c:	4511                	li	a0,4
    8001087e:	a60f00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80010882:	10016073          	csrs	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    80010886:	597d                	li	s2,-1
    80010888:	30391073          	csrw	mideleg,s2
    CSRS(CSR_SIE,SIE_SSIE);
    8001088c:	10416073          	csrs	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80010890:	14417073          	csrc	sip,2

    goto_priv(PRIV_VS);
    80010894:	4509                	li	a0,2
    80010896:	a48f00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    8001089a:	08200593          	li	a1,130
    8001089e:	00010617          	auipc	a2,0x10
    800108a2:	5e260613          	add	a2,a2,1506 # 80020e80 <__func__.1+0x4688>
    800108a6:	0000c517          	auipc	a0,0xc
    800108aa:	25250513          	add	a0,a0,594 # 8001caf8 <__func__.1+0x300>
    800108ae:	6b40a0ef          	jal	8001af62 <printf>
    800108b2:	00144783          	lbu	a5,1(s0)
    800108b6:	0000c597          	auipc	a1,0xc
    800108ba:	21a58593          	add	a1,a1,538 # 8001cad0 <__func__.1+0x2d8>
    800108be:	c791                	beqz	a5,800108ca <software_interrupt_ssi+0x744>
    800108c0:	641c                	ld	a5,8(s0)
    800108c2:	197e                	sll	s2,s2,0x3f
    800108c4:	0905                	add	s2,s2,1
    800108c6:	33278e63          	beq	a5,s2,80010c02 <software_interrupt_ssi+0xa7c>
    800108ca:	0000c517          	auipc	a0,0xc
    800108ce:	24650513          	add	a0,a0,582 # 8001cb10 <__func__.1+0x318>
    800108d2:	6900a0ef          	jal	8001af62 <printf>
    800108d6:	00144783          	lbu	a5,1(s0)
    800108da:	c799                	beqz	a5,800108e8 <software_interrupt_ssi+0x762>
    800108dc:	57fd                	li	a5,-1
    800108de:	6418                	ld	a4,8(s0)
    800108e0:	17fe                	sll	a5,a5,0x3f
    800108e2:	0785                	add	a5,a5,1
    800108e4:	22f70563          	beq	a4,a5,80010b0e <software_interrupt_ssi+0x988>
    800108e8:	0000c517          	auipc	a0,0xc
    800108ec:	23050513          	add	a0,a0,560 # 8001cb18 <__func__.1+0x320>
    800108f0:	6720a0ef          	jal	8001af62 <printf>
    800108f4:	02900513          	li	a0,41
    800108f8:	53c090ef          	jal	80019e34 <putchar>
    800108fc:	4529                	li	a0,10
    800108fe:	536090ef          	jal	80019e34 <putchar>
    80010902:	c491                	beqz	s1,8001090e <software_interrupt_ssi+0x788>
    80010904:	00144783          	lbu	a5,1(s0)
    80010908:	4481                	li	s1,0
    8001090a:	12079e63          	bnez	a5,80010a46 <software_interrupt_ssi+0x8c0>
        excpt.priv == PRIV_HS
    );


    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    8001090e:	0ff0000f          	fence
    80010912:	4785                	li	a5,1
    80010914:	00f41023          	sh	a5,0(s0)
    80010918:	0002c797          	auipc	a5,0x2c
    8001091c:	7207b823          	sd	zero,1840(a5) # 8003d048 <excpt+0x38>
    80010920:	0ff0000f          	fence
    goto_priv(PRIV_M);
    80010924:	4511                	li	a0,4
    80010926:	9b8f00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    8001092a:	10016073          	csrs	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    8001092e:	10417073          	csrc	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80010932:	14417073          	csrc	sip,2

    goto_priv(PRIV_VS);
    80010936:	4509                	li	a0,2
    80010938:	9a6f00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    8001093c:	08200593          	li	a1,130
    80010940:	00010617          	auipc	a2,0x10
    80010944:	5a060613          	add	a2,a2,1440 # 80020ee0 <__func__.1+0x46e8>
    80010948:	0000c517          	auipc	a0,0xc
    8001094c:	1b050513          	add	a0,a0,432 # 8001caf8 <__func__.1+0x300>
    80010950:	6120a0ef          	jal	8001af62 <printf>
    80010954:	00144783          	lbu	a5,1(s0)
    80010958:	0000c597          	auipc	a1,0xc
    8001095c:	17858593          	add	a1,a1,376 # 8001cad0 <__func__.1+0x2d8>
    80010960:	e789                	bnez	a5,8001096a <software_interrupt_ssi+0x7e4>
    80010962:	0000c597          	auipc	a1,0xc
    80010966:	15e58593          	add	a1,a1,350 # 8001cac0 <__func__.1+0x2c8>
    8001096a:	0000c517          	auipc	a0,0xc
    8001096e:	1a650513          	add	a0,a0,422 # 8001cb10 <__func__.1+0x318>
    80010972:	5f00a0ef          	jal	8001af62 <printf>
    80010976:	00144783          	lbu	a5,1(s0)
    8001097a:	22079663          	bnez	a5,80010ba6 <software_interrupt_ssi+0xa20>
    8001097e:	4529                	li	a0,10
    80010980:	4b4090ef          	jal	80019e34 <putchar>
    80010984:	c489                	beqz	s1,8001098e <software_interrupt_ssi+0x808>
    80010986:	00144483          	lbu	s1,1(s0)
    8001098a:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    );

    //VS模式下产生软件中断，sstatus.sie=0，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    8001098e:	0ff0000f          	fence
    80010992:	4785                	li	a5,1
    80010994:	00f41023          	sh	a5,0(s0)
    80010998:	0002c797          	auipc	a5,0x2c
    8001099c:	6a07b823          	sd	zero,1712(a5) # 8003d048 <excpt+0x38>
    800109a0:	0ff0000f          	fence
    goto_priv(PRIV_M);
    800109a4:	4511                	li	a0,4
    800109a6:	938f00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800109aa:	10016073          	csrs	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    800109ae:	10417073          	csrc	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    800109b2:	14417073          	csrc	sip,2

    goto_priv(PRIV_VS);
    800109b6:	4509                	li	a0,2
    800109b8:	926f00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    800109bc:	08200593          	li	a1,130
    800109c0:	00010617          	auipc	a2,0x10
    800109c4:	57060613          	add	a2,a2,1392 # 80020f30 <__func__.1+0x4738>
    800109c8:	0000c517          	auipc	a0,0xc
    800109cc:	13050513          	add	a0,a0,304 # 8001caf8 <__func__.1+0x300>
    800109d0:	5920a0ef          	jal	8001af62 <printf>
    800109d4:	00144783          	lbu	a5,1(s0)
    800109d8:	0000c597          	auipc	a1,0xc
    800109dc:	0f858593          	add	a1,a1,248 # 8001cad0 <__func__.1+0x2d8>
    800109e0:	e789                	bnez	a5,800109ea <software_interrupt_ssi+0x864>
    800109e2:	0000c597          	auipc	a1,0xc
    800109e6:	0de58593          	add	a1,a1,222 # 8001cac0 <__func__.1+0x2c8>
    800109ea:	0000c517          	auipc	a0,0xc
    800109ee:	12650513          	add	a0,a0,294 # 8001cb10 <__func__.1+0x318>
    800109f2:	5700a0ef          	jal	8001af62 <printf>
    800109f6:	00144783          	lbu	a5,1(s0)
    800109fa:	18079b63          	bnez	a5,80010b90 <software_interrupt_ssi+0xa0a>
    800109fe:	4529                	li	a0,10
    80010a00:	434090ef          	jal	80019e34 <putchar>
    80010a04:	c481                	beqz	s1,80010a0c <software_interrupt_ssi+0x886>
    80010a06:	00144783          	lbu	a5,1(s0)
    80010a0a:	cb85                	beqz	a5,80010a3a <software_interrupt_ssi+0x8b4>
    80010a0c:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80010a0e:	0000c597          	auipc	a1,0xc
    80010a12:	0c258593          	add	a1,a1,194 # 8001cad0 <__func__.1+0x2d8>
    80010a16:	0000c517          	auipc	a0,0xc
    80010a1a:	16250513          	add	a0,a0,354 # 8001cb78 <__func__.1+0x380>
    80010a1e:	5440a0ef          	jal	8001af62 <printf>
    80010a22:	4511                	li	a0,4
    80010a24:	8baf00ef          	jal	80000ade <goto_priv>
    80010a28:	8fff00ef          	jal	80001326 <reset_state>
}
    80010a2c:	60e2                	ld	ra,24(sp)
    80010a2e:	8522                	mv	a0,s0
    80010a30:	6442                	ld	s0,16(sp)
    80010a32:	64a2                	ld	s1,8(sp)
    80010a34:	6902                	ld	s2,0(sp)
    80010a36:	6105                	add	sp,sp,32
    80010a38:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    80010a3a:	4405                	li	s0,1
    TEST_END();
    80010a3c:	0000c597          	auipc	a1,0xc
    80010a40:	08458593          	add	a1,a1,132 # 8001cac0 <__func__.1+0x2c8>
    80010a44:	bfc9                	j	80010a16 <software_interrupt_ssi+0x890>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80010a46:	57fd                	li	a5,-1
    80010a48:	6418                	ld	a4,8(s0)
    80010a4a:	17fe                	sll	a5,a5,0x3f
    80010a4c:	0785                	add	a5,a5,1
    80010a4e:	ecf710e3          	bne	a4,a5,8001090e <software_interrupt_ssi+0x788>
    80010a52:	4044                	lw	s1,4(s0)
    80010a54:	14f5                	add	s1,s1,-3
    80010a56:	0014b493          	seqz	s1,s1
    80010a5a:	bd55                	j	8001090e <software_interrupt_ssi+0x788>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80010a5c:	57fd                	li	a5,-1
    80010a5e:	6418                	ld	a4,8(s0)
    80010a60:	17fe                	sll	a5,a5,0x3f
    80010a62:	0785                	add	a5,a5,1
    80010a64:	e0f711e3          	bne	a4,a5,80010866 <software_interrupt_ssi+0x6e0>
    80010a68:	4044                	lw	s1,4(s0)
    80010a6a:	14f1                	add	s1,s1,-4
    80010a6c:	0014b493          	seqz	s1,s1
    80010a70:	bbdd                	j	80010866 <software_interrupt_ssi+0x6e0>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80010a72:	57fd                	li	a5,-1
    80010a74:	6418                	ld	a4,8(s0)
    80010a76:	17fe                	sll	a5,a5,0x3f
    80010a78:	0785                	add	a5,a5,1
    80010a7a:	ccf712e3          	bne	a4,a5,8001073e <software_interrupt_ssi+0x5b8>
    80010a7e:	4044                	lw	s1,4(s0)
    80010a80:	14f5                	add	s1,s1,-3
    80010a82:	0014b493          	seqz	s1,s1
    80010a86:	b965                	j	8001073e <software_interrupt_ssi+0x5b8>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80010a88:	57fd                	li	a5,-1
    80010a8a:	6418                	ld	a4,8(s0)
    80010a8c:	17fe                	sll	a5,a5,0x3f
    80010a8e:	0785                	add	a5,a5,1
    80010a90:	c0f713e3          	bne	a4,a5,80010696 <software_interrupt_ssi+0x510>
    80010a94:	4044                	lw	s1,4(s0)
    80010a96:	14f1                	add	s1,s1,-4
    80010a98:	0014b493          	seqz	s1,s1
    80010a9c:	beed                	j	80010696 <software_interrupt_ssi+0x510>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80010a9e:	57fd                	li	a5,-1
    80010aa0:	6418                	ld	a4,8(s0)
    80010aa2:	17fe                	sll	a5,a5,0x3f
    80010aa4:	0785                	add	a5,a5,1
    80010aa6:	a2f71ae3          	bne	a4,a5,800104da <software_interrupt_ssi+0x354>
    80010aaa:	4044                	lw	s1,4(s0)
    80010aac:	14f5                	add	s1,s1,-3
    80010aae:	0014b493          	seqz	s1,s1
    80010ab2:	b425                	j	800104da <software_interrupt_ssi+0x354>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80010ab4:	57fd                	li	a5,-1
    80010ab6:	6418                	ld	a4,8(s0)
    80010ab8:	17fe                	sll	a5,a5,0x3f
    80010aba:	0785                	add	a5,a5,1
    80010abc:	96f71be3          	bne	a4,a5,80010432 <software_interrupt_ssi+0x2ac>
    80010ac0:	4044                	lw	s1,4(s0)
    80010ac2:	14f1                	add	s1,s1,-4
    80010ac4:	0014b493          	seqz	s1,s1
    80010ac8:	b2ad                	j	80010432 <software_interrupt_ssi+0x2ac>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80010aca:	57fd                	li	a5,-1
    80010acc:	6418                	ld	a4,8(s0)
    80010ace:	17fe                	sll	a5,a5,0x3f
    80010ad0:	0785                	add	a5,a5,1
    80010ad2:	82f71ce3          	bne	a4,a5,8001030a <software_interrupt_ssi+0x184>
    80010ad6:	4044                	lw	s1,4(s0)
    80010ad8:	14f5                	add	s1,s1,-3
    80010ada:	0014b493          	seqz	s1,s1
    80010ade:	82dff06f          	j	8001030a <software_interrupt_ssi+0x184>
    80010ae2:	4058                	lw	a4,4(s0)
    80010ae4:	478d                	li	a5,3
    80010ae6:	fef71f63          	bne	a4,a5,800102e4 <software_interrupt_ssi+0x15e>
    80010aea:	80fff06f          	j	800102f8 <software_interrupt_ssi+0x172>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80010aee:	4058                	lw	a4,4(s0)
    80010af0:	4791                	li	a5,4
    80010af2:	f4f71163          	bne	a4,a5,80010234 <software_interrupt_ssi+0xae>
    80010af6:	f52ff06f          	j	80010248 <software_interrupt_ssi+0xc2>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80010afa:	4058                	lw	a4,4(s0)
    80010afc:	4791                	li	a5,4
    80010afe:	b6f719e3          	bne	a4,a5,80010670 <software_interrupt_ssi+0x4ea>
    80010b02:	b649                	j	80010684 <software_interrupt_ssi+0x4fe>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80010b04:	4058                	lw	a4,4(s0)
    80010b06:	478d                	li	a5,3
    80010b08:	c0f718e3          	bne	a4,a5,80010718 <software_interrupt_ssi+0x592>
    80010b0c:	b105                	j	8001072c <software_interrupt_ssi+0x5a6>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80010b0e:	4058                	lw	a4,4(s0)
    80010b10:	478d                	li	a5,3
    80010b12:	dcf71be3          	bne	a4,a5,800108e8 <software_interrupt_ssi+0x762>
    80010b16:	b3dd                	j	800108fc <software_interrupt_ssi+0x776>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80010b18:	4058                	lw	a4,4(s0)
    80010b1a:	4791                	li	a5,4
    80010b1c:	8ef718e3          	bne	a4,a5,8001040c <software_interrupt_ssi+0x286>
    80010b20:	b201                	j	80010420 <software_interrupt_ssi+0x29a>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80010b22:	4058                	lw	a4,4(s0)
    80010b24:	478d                	li	a5,3
    80010b26:	98f717e3          	bne	a4,a5,800104b4 <software_interrupt_ssi+0x32e>
    80010b2a:	ba79                	j	800104c8 <software_interrupt_ssi+0x342>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80010b2c:	4058                	lw	a4,4(s0)
    80010b2e:	4791                	li	a5,4
    80010b30:	d0f718e3          	bne	a4,a5,80010840 <software_interrupt_ssi+0x6ba>
    80010b34:	b305                	j	80010854 <software_interrupt_ssi+0x6ce>
    TEST_ASSERT("VS mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    80010b36:	0000c517          	auipc	a0,0xc
    80010b3a:	fe250513          	add	a0,a0,-30 # 8001cb18 <__func__.1+0x320>
    80010b3e:	4240a0ef          	jal	8001af62 <printf>
    80010b42:	02900513          	li	a0,41
    80010b46:	2ee090ef          	jal	80019e34 <putchar>
    80010b4a:	b195                	j	800107ae <software_interrupt_ssi+0x628>
    TEST_ASSERT("hs mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    80010b4c:	0000c517          	auipc	a0,0xc
    80010b50:	fcc50513          	add	a0,a0,-52 # 8001cb18 <__func__.1+0x320>
    80010b54:	40e0a0ef          	jal	8001af62 <printf>
    80010b58:	02900513          	li	a0,41
    80010b5c:	2d8090ef          	jal	80019e34 <putchar>
    80010b60:	81bff06f          	j	8001037a <software_interrupt_ssi+0x1f4>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    80010b64:	0000c517          	auipc	a0,0xc
    80010b68:	fb450513          	add	a0,a0,-76 # 8001cb18 <__func__.1+0x320>
    80010b6c:	3f60a0ef          	jal	8001af62 <printf>
    80010b70:	02900513          	li	a0,41
    80010b74:	2c0090ef          	jal	80019e34 <putchar>
    80010b78:	bc89                	j	800105ca <software_interrupt_ssi+0x444>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    80010b7a:	0000c517          	auipc	a0,0xc
    80010b7e:	f9e50513          	add	a0,a0,-98 # 8001cb18 <__func__.1+0x320>
    80010b82:	3e00a0ef          	jal	8001af62 <printf>
    80010b86:	02900513          	li	a0,41
    80010b8a:	2aa090ef          	jal	80019e34 <putchar>
    80010b8e:	ba75                	j	8001054a <software_interrupt_ssi+0x3c4>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    80010b90:	0000c517          	auipc	a0,0xc
    80010b94:	f8850513          	add	a0,a0,-120 # 8001cb18 <__func__.1+0x320>
    80010b98:	3ca0a0ef          	jal	8001af62 <printf>
    80010b9c:	02900513          	li	a0,41
    80010ba0:	294090ef          	jal	80019e34 <putchar>
    80010ba4:	bda9                	j	800109fe <software_interrupt_ssi+0x878>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    80010ba6:	0000c517          	auipc	a0,0xc
    80010baa:	f7250513          	add	a0,a0,-142 # 8001cb18 <__func__.1+0x320>
    80010bae:	3b40a0ef          	jal	8001af62 <printf>
    80010bb2:	02900513          	li	a0,41
    80010bb6:	27e090ef          	jal	80019e34 <putchar>
    80010bba:	b3d1                	j	8001097e <software_interrupt_ssi+0x7f8>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80010bbc:	4058                	lw	a4,4(s0)
    80010bbe:	4791                	li	a5,4
    80010bc0:	c6f711e3          	bne	a4,a5,80010822 <software_interrupt_ssi+0x69c>
    80010bc4:	0000c597          	auipc	a1,0xc
    80010bc8:	efc58593          	add	a1,a1,-260 # 8001cac0 <__func__.1+0x2c8>
    80010bcc:	b999                	j	80010822 <software_interrupt_ssi+0x69c>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80010bce:	4044                	lw	s1,4(s0)
    80010bd0:	14f1                	add	s1,s1,-4
    80010bd2:	0014b493          	seqz	s1,s1
    80010bd6:	e8cff06f          	j	80010262 <software_interrupt_ssi+0xdc>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80010bda:	4058                	lw	a4,4(s0)
    80010bdc:	478d                	li	a5,3
    80010bde:	eef71463          	bne	a4,a5,800102c6 <software_interrupt_ssi+0x140>
    80010be2:	0000c597          	auipc	a1,0xc
    80010be6:	ede58593          	add	a1,a1,-290 # 8001cac0 <__func__.1+0x2c8>
    80010bea:	edcff06f          	j	800102c6 <software_interrupt_ssi+0x140>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80010bee:	4058                	lw	a4,4(s0)
    80010bf0:	4791                	li	a5,4
    80010bf2:	fef71e63          	bne	a4,a5,800103ee <software_interrupt_ssi+0x268>
    80010bf6:	0000c597          	auipc	a1,0xc
    80010bfa:	eca58593          	add	a1,a1,-310 # 8001cac0 <__func__.1+0x2c8>
    80010bfe:	ff0ff06f          	j	800103ee <software_interrupt_ssi+0x268>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80010c02:	4058                	lw	a4,4(s0)
    80010c04:	478d                	li	a5,3
    80010c06:	ccf712e3          	bne	a4,a5,800108ca <software_interrupt_ssi+0x744>
    80010c0a:	0000c597          	auipc	a1,0xc
    80010c0e:	eb658593          	add	a1,a1,-330 # 8001cac0 <__func__.1+0x2c8>
    80010c12:	b965                	j	800108ca <software_interrupt_ssi+0x744>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80010c14:	4058                	lw	a4,4(s0)
    80010c16:	478d                	li	a5,3
    80010c18:	aef711e3          	bne	a4,a5,800106fa <software_interrupt_ssi+0x574>
    80010c1c:	0000c597          	auipc	a1,0xc
    80010c20:	ea458593          	add	a1,a1,-348 # 8001cac0 <__func__.1+0x2c8>
    80010c24:	bcd9                	j	800106fa <software_interrupt_ssi+0x574>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80010c26:	4058                	lw	a4,4(s0)
    80010c28:	4791                	li	a5,4
    80010c2a:	def71663          	bne	a4,a5,80010216 <software_interrupt_ssi+0x90>
    80010c2e:	0000c597          	auipc	a1,0xc
    80010c32:	e9258593          	add	a1,a1,-366 # 8001cac0 <__func__.1+0x2c8>
    80010c36:	de0ff06f          	j	80010216 <software_interrupt_ssi+0x90>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80010c3a:	4058                	lw	a4,4(s0)
    80010c3c:	478d                	li	a5,3
    80010c3e:	84f71ce3          	bne	a4,a5,80010496 <software_interrupt_ssi+0x310>
    80010c42:	0000c597          	auipc	a1,0xc
    80010c46:	e7e58593          	add	a1,a1,-386 # 8001cac0 <__func__.1+0x2c8>
    80010c4a:	84dff06f          	j	80010496 <software_interrupt_ssi+0x310>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80010c4e:	4058                	lw	a4,4(s0)
    80010c50:	4791                	li	a5,4
    80010c52:	a0f710e3          	bne	a4,a5,80010652 <software_interrupt_ssi+0x4cc>
    80010c56:	0000c597          	auipc	a1,0xc
    80010c5a:	e6a58593          	add	a1,a1,-406 # 8001cac0 <__func__.1+0x2c8>
    80010c5e:	bad5                	j	80010652 <software_interrupt_ssi+0x4cc>

0000000080010c60 <software_interrupt_vssi>:


bool software_interrupt_vssi() {
    80010c60:	1141                	add	sp,sp,-16

    TEST_START();
    80010c62:	0000b597          	auipc	a1,0xb
    80010c66:	06e58593          	add	a1,a1,110 # 8001bcd0 <__func__.0>
    80010c6a:	0000c517          	auipc	a0,0xc
    80010c6e:	e7650513          	add	a0,a0,-394 # 8001cae0 <__func__.1+0x2e8>
bool software_interrupt_vssi() {
    80010c72:	e406                	sd	ra,8(sp)
    TEST_START();
    80010c74:	2ee0a0ef          	jal	8001af62 <printf>
    80010c78:	4529                	li	a0,10
    80010c7a:	1ba090ef          	jal	80019e34 <putchar>

    TEST_SETUP_EXCEPT();
    80010c7e:	0ff0000f          	fence
    80010c82:	0002c797          	auipc	a5,0x2c
    80010c86:	38e78793          	add	a5,a5,910 # 8003d010 <excpt>
    80010c8a:	4705                	li	a4,1
    80010c8c:	00e79023          	sh	a4,0(a5)
    80010c90:	0207bc23          	sd	zero,56(a5)
    80010c94:	0ff0000f          	fence

    TEST_END();
    80010c98:	0000c597          	auipc	a1,0xc
    80010c9c:	e2858593          	add	a1,a1,-472 # 8001cac0 <__func__.1+0x2c8>
    80010ca0:	0000c517          	auipc	a0,0xc
    80010ca4:	ed850513          	add	a0,a0,-296 # 8001cb78 <__func__.1+0x380>
    80010ca8:	2ba0a0ef          	jal	8001af62 <printf>
    80010cac:	4511                	li	a0,4
    80010cae:	e31ef0ef          	jal	80000ade <goto_priv>
    80010cb2:	e74f00ef          	jal	80001326 <reset_state>


    80010cb6:	60a2                	ld	ra,8(sp)
    80010cb8:	4505                	li	a0,1
    80010cba:	0141                	add	sp,sp,16
    80010cbc:	8082                	ret

0000000080010cbe <instruction_page_fault_1>:
#include <rvh_test.h>
#include <page_tables.h>

bool instruction_page_fault_1(){
    80010cbe:	1101                	add	sp,sp,-32

    TEST_START();
    80010cc0:	0000b597          	auipc	a1,0xb
    80010cc4:	02858593          	add	a1,a1,40 # 8001bce8 <__func__.26>
    80010cc8:	0000c517          	auipc	a0,0xc
    80010ccc:	e1850513          	add	a0,a0,-488 # 8001cae0 <__func__.1+0x2e8>
bool instruction_page_fault_1(){
    80010cd0:	ec06                	sd	ra,24(sp)
    80010cd2:	e822                	sd	s0,16(sp)
    80010cd4:	e426                	sd	s1,8(sp)
    TEST_START();
    80010cd6:	28c0a0ef          	jal	8001af62 <printf>
    80010cda:	4529                	li	a0,10
    80010cdc:	158090ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80010ce0:	450d                	li	a0,3
    80010ce2:	dfdef0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80010ce6:	8fbef0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80010cea:	b3def0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80010cee:	4509                	li	a0,2
    80010cf0:	defef0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80010cf4:	9c1ef0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_HS);
    80010cf8:	450d                	li	a0,3
    80010cfa:	de5ef0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80010cfe:	4509                	li	a0,2
    80010d00:	d03ef0ef          	jal	80000a02 <set_prev_priv>

    //执行取指指令时，pte.v=0
    vaddr = hs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    80010d04:	0ff0000f          	fence
    80010d08:	4785                	li	a5,1
    80010d0a:	0002c417          	auipc	s0,0x2c
    80010d0e:	30640413          	add	s0,s0,774 # 8003d010 <excpt>
    80010d12:	00f41023          	sh	a5,0(s0)
    80010d16:	0002c797          	auipc	a5,0x2c
    80010d1a:	3207b923          	sd	zero,818(a5) # 8003d048 <excpt+0x38>
    80010d1e:	0ff0000f          	fence
    TEST_EXEC_EXCEPT(vaddr); 
    80010d22:	400197b7          	lui	a5,0x40019
    80010d26:	078a                	sll	a5,a5,0x2
    80010d28:	00000297          	auipc	t0,0x0
    80010d2c:	00c28293          	add	t0,t0,12 # 80010d34 <instruction_page_fault_1+0x76>
    80010d30:	02543c23          	sd	t0,56(s0)
    80010d34:	8782                	jr	a5

    TEST_ASSERT("hs mode fetche instruction when pte.v=0 leads to IPF",
    80010d36:	08200593          	li	a1,130
    80010d3a:	00010617          	auipc	a2,0x10
    80010d3e:	24660613          	add	a2,a2,582 # 80020f80 <__func__.1+0x4788>
    80010d42:	0000c517          	auipc	a0,0xc
    80010d46:	db650513          	add	a0,a0,-586 # 8001caf8 <__func__.1+0x300>
    80010d4a:	2180a0ef          	jal	8001af62 <printf>
    80010d4e:	00144783          	lbu	a5,1(s0)
    80010d52:	0000c597          	auipc	a1,0xc
    80010d56:	d7e58593          	add	a1,a1,-642 # 8001cad0 <__func__.1+0x2d8>
    80010d5a:	c789                	beqz	a5,80010d64 <instruction_page_fault_1+0xa6>
    80010d5c:	6418                	ld	a4,8(s0)
    80010d5e:	47b1                	li	a5,12
    80010d60:	12f70563          	beq	a4,a5,80010e8a <instruction_page_fault_1+0x1cc>
    80010d64:	0000c517          	auipc	a0,0xc
    80010d68:	dac50513          	add	a0,a0,-596 # 8001cb10 <__func__.1+0x318>
    80010d6c:	1f60a0ef          	jal	8001af62 <printf>
    80010d70:	00144783          	lbu	a5,1(s0)
    80010d74:	c789                	beqz	a5,80010d7e <instruction_page_fault_1+0xc0>
    80010d76:	6418                	ld	a4,8(s0)
    80010d78:	47b1                	li	a5,12
    80010d7a:	00f70c63          	beq	a4,a5,80010d92 <instruction_page_fault_1+0xd4>
    80010d7e:	0000c517          	auipc	a0,0xc
    80010d82:	d9a50513          	add	a0,a0,-614 # 8001cb18 <__func__.1+0x320>
    80010d86:	1dc0a0ef          	jal	8001af62 <printf>
    80010d8a:	02900513          	li	a0,41
    80010d8e:	0a6090ef          	jal	80019e34 <putchar>
    80010d92:	4529                	li	a0,10
    80010d94:	0a0090ef          	jal	80019e34 <putchar>
    80010d98:	00144783          	lbu	a5,1(s0)
    80010d9c:	4481                	li	s1,0
    80010d9e:	c789                	beqz	a5,80010da8 <instruction_page_fault_1+0xea>
    80010da0:	6404                	ld	s1,8(s0)
    80010da2:	14d1                	add	s1,s1,-12
    80010da4:	0014b493          	seqz	s1,s1
    );


    //执行取指指令时，pte.x=0
    vaddr = vs_page_base(VSRW_GRW);
    TEST_SETUP_EXCEPT();
    80010da8:	0ff0000f          	fence
    80010dac:	4785                	li	a5,1
    80010dae:	00f41023          	sh	a5,0(s0)
    80010db2:	0002c797          	auipc	a5,0x2c
    80010db6:	2807bb23          	sd	zero,662(a5) # 8003d048 <excpt+0x38>
    80010dba:	0ff0000f          	fence
    TEST_EXEC_EXCEPT(vaddr); 
    80010dbe:	001007b7          	lui	a5,0x100
    80010dc2:	05178793          	add	a5,a5,81 # 100051 <STACK_SIZE+0x51>
    80010dc6:	07b2                	sll	a5,a5,0xc
    80010dc8:	00000297          	auipc	t0,0x0
    80010dcc:	00c28293          	add	t0,t0,12 # 80010dd4 <instruction_page_fault_1+0x116>
    80010dd0:	02543c23          	sd	t0,56(s0)
    80010dd4:	8782                	jr	a5

    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    80010dd6:	08200593          	li	a1,130
    80010dda:	00010617          	auipc	a2,0x10
    80010dde:	1de60613          	add	a2,a2,478 # 80020fb8 <__func__.1+0x47c0>
    80010de2:	0000c517          	auipc	a0,0xc
    80010de6:	d1650513          	add	a0,a0,-746 # 8001caf8 <__func__.1+0x300>
    80010dea:	1780a0ef          	jal	8001af62 <printf>
    80010dee:	00144783          	lbu	a5,1(s0)
    80010df2:	0000c597          	auipc	a1,0xc
    80010df6:	cde58593          	add	a1,a1,-802 # 8001cad0 <__func__.1+0x2d8>
    80010dfa:	c789                	beqz	a5,80010e04 <instruction_page_fault_1+0x146>
    80010dfc:	6418                	ld	a4,8(s0)
    80010dfe:	47b1                	li	a5,12
    80010e00:	08f70063          	beq	a4,a5,80010e80 <instruction_page_fault_1+0x1c2>
    80010e04:	0000c517          	auipc	a0,0xc
    80010e08:	d0c50513          	add	a0,a0,-756 # 8001cb10 <__func__.1+0x318>
    80010e0c:	1560a0ef          	jal	8001af62 <printf>
    80010e10:	00144783          	lbu	a5,1(s0)
    80010e14:	c789                	beqz	a5,80010e1e <instruction_page_fault_1+0x160>
    80010e16:	6418                	ld	a4,8(s0)
    80010e18:	47b1                	li	a5,12
    80010e1a:	00f70c63          	beq	a4,a5,80010e32 <instruction_page_fault_1+0x174>
    80010e1e:	0000c517          	auipc	a0,0xc
    80010e22:	cfa50513          	add	a0,a0,-774 # 8001cb18 <__func__.1+0x320>
    80010e26:	13c0a0ef          	jal	8001af62 <printf>
    80010e2a:	02900513          	li	a0,41
    80010e2e:	006090ef          	jal	80019e34 <putchar>
    80010e32:	4529                	li	a0,10
    80010e34:	000090ef          	jal	80019e34 <putchar>
    80010e38:	cc95                	beqz	s1,80010e74 <instruction_page_fault_1+0x1b6>
    80010e3a:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80010e3e:	0000c597          	auipc	a1,0xc
    80010e42:	c9258593          	add	a1,a1,-878 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    80010e46:	c491                	beqz	s1,80010e52 <instruction_page_fault_1+0x194>
    80010e48:	6418                	ld	a4,8(s0)
    80010e4a:	47b1                	li	a5,12
    80010e4c:	04f70463          	beq	a4,a5,80010e94 <instruction_page_fault_1+0x1d6>
    80010e50:	4481                	li	s1,0
    TEST_END();
    80010e52:	0000c517          	auipc	a0,0xc
    80010e56:	d2650513          	add	a0,a0,-730 # 8001cb78 <__func__.1+0x380>
    80010e5a:	1080a0ef          	jal	8001af62 <printf>
    80010e5e:	4511                	li	a0,4
    80010e60:	c7fef0ef          	jal	80000ade <goto_priv>
    80010e64:	cc2f00ef          	jal	80001326 <reset_state>
}
    80010e68:	60e2                	ld	ra,24(sp)
    80010e6a:	6442                	ld	s0,16(sp)
    80010e6c:	8526                	mv	a0,s1
    80010e6e:	64a2                	ld	s1,8(sp)
    80010e70:	6105                	add	sp,sp,32
    80010e72:	8082                	ret
    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    80010e74:	4481                	li	s1,0
    TEST_END();
    80010e76:	0000c597          	auipc	a1,0xc
    80010e7a:	c5a58593          	add	a1,a1,-934 # 8001cad0 <__func__.1+0x2d8>
    80010e7e:	bfd1                	j	80010e52 <instruction_page_fault_1+0x194>
    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    80010e80:	0000c597          	auipc	a1,0xc
    80010e84:	c4058593          	add	a1,a1,-960 # 8001cac0 <__func__.1+0x2c8>
    80010e88:	bfb5                	j	80010e04 <instruction_page_fault_1+0x146>
    TEST_ASSERT("hs mode fetche instruction when pte.v=0 leads to IPF",
    80010e8a:	0000c597          	auipc	a1,0xc
    80010e8e:	c3658593          	add	a1,a1,-970 # 8001cac0 <__func__.1+0x2c8>
    80010e92:	bdc9                	j	80010d64 <instruction_page_fault_1+0xa6>
    TEST_END();
    80010e94:	0000c597          	auipc	a1,0xc
    80010e98:	c2c58593          	add	a1,a1,-980 # 8001cac0 <__func__.1+0x2c8>
    80010e9c:	bf5d                	j	80010e52 <instruction_page_fault_1+0x194>

0000000080010e9e <instruction_page_fault_2>:

bool instruction_page_fault_2(){
    80010e9e:	1101                	add	sp,sp,-32

    TEST_START();
    80010ea0:	0000b597          	auipc	a1,0xb
    80010ea4:	e6858593          	add	a1,a1,-408 # 8001bd08 <__func__.24>
    80010ea8:	0000c517          	auipc	a0,0xc
    80010eac:	c3850513          	add	a0,a0,-968 # 8001cae0 <__func__.1+0x2e8>
bool instruction_page_fault_2(){
    80010eb0:	ec06                	sd	ra,24(sp)
    80010eb2:	e822                	sd	s0,16(sp)
    80010eb4:	e426                	sd	s1,8(sp)
    TEST_START();
    80010eb6:	0ac0a0ef          	jal	8001af62 <printf>
    80010eba:	4529                	li	a0,10
    80010ebc:	779080ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80010ec0:	450d                	li	a0,3
    80010ec2:	c1def0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80010ec6:	f1aef0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80010eca:	95def0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80010ece:	4509                	li	a0,2
    80010ed0:	c0fef0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80010ed4:	fe0ef0ef          	jal	800006b4 <vspt_init>


    goto_priv(PRIV_HS);
    80010ed8:	450d                	li	a0,3
    80010eda:	c05ef0ef          	jal	80000ade <goto_priv>

    //执行取指指令时，在HS模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80010ede:	0ff0000f          	fence
    80010ee2:	4785                	li	a5,1
    80010ee4:	0002c417          	auipc	s0,0x2c
    80010ee8:	12c40413          	add	s0,s0,300 # 8003d010 <excpt>
    80010eec:	00f41023          	sh	a5,0(s0)
    80010ef0:	0002c797          	auipc	a5,0x2c
    80010ef4:	1407bc23          	sd	zero,344(a5) # 8003d048 <excpt+0x38>
    80010ef8:	0ff0000f          	fence
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    TEST_EXEC_EXCEPT(vaddr); 
    80010efc:	000807b7          	lui	a5,0x80
    80010f00:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80010f02:	07b6                	sll	a5,a5,0xd
    80010f04:	00000297          	auipc	t0,0x0
    80010f08:	00c28293          	add	t0,t0,12 # 80010f10 <instruction_page_fault_2+0x72>
    80010f0c:	02543c23          	sd	t0,56(s0)
    80010f10:	8782                	jr	a5
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    80010f12:	08200593          	li	a1,130
    80010f16:	00010617          	auipc	a2,0x10
    80010f1a:	0da60613          	add	a2,a2,218 # 80020ff0 <__func__.1+0x47f8>
    80010f1e:	0000c517          	auipc	a0,0xc
    80010f22:	bda50513          	add	a0,a0,-1062 # 8001caf8 <__func__.1+0x300>
    80010f26:	03c0a0ef          	jal	8001af62 <printf>
    80010f2a:	00144783          	lbu	a5,1(s0)
    80010f2e:	0000c597          	auipc	a1,0xc
    80010f32:	ba258593          	add	a1,a1,-1118 # 8001cad0 <__func__.1+0x2d8>
    80010f36:	c789                	beqz	a5,80010f40 <instruction_page_fault_2+0xa2>
    80010f38:	6418                	ld	a4,8(s0)
    80010f3a:	47b1                	li	a5,12
    80010f3c:	06f70e63          	beq	a4,a5,80010fb8 <instruction_page_fault_2+0x11a>
    80010f40:	0000c517          	auipc	a0,0xc
    80010f44:	bd050513          	add	a0,a0,-1072 # 8001cb10 <__func__.1+0x318>
    80010f48:	01a0a0ef          	jal	8001af62 <printf>
    80010f4c:	00144783          	lbu	a5,1(s0)
    80010f50:	c789                	beqz	a5,80010f5a <instruction_page_fault_2+0xbc>
    80010f52:	6418                	ld	a4,8(s0)
    80010f54:	47b1                	li	a5,12
    80010f56:	00f70c63          	beq	a4,a5,80010f6e <instruction_page_fault_2+0xd0>
    80010f5a:	0000c517          	auipc	a0,0xc
    80010f5e:	bbe50513          	add	a0,a0,-1090 # 8001cb18 <__func__.1+0x320>
    80010f62:	0000a0ef          	jal	8001af62 <printf>
    80010f66:	02900513          	li	a0,41
    80010f6a:	6cb080ef          	jal	80019e34 <putchar>
    80010f6e:	4529                	li	a0,10
    80010f70:	6c5080ef          	jal	80019e34 <putchar>
    80010f74:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80010f78:	0000c597          	auipc	a1,0xc
    80010f7c:	b5858593          	add	a1,a1,-1192 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    80010f80:	c491                	beqz	s1,80010f8c <instruction_page_fault_2+0xee>
    80010f82:	6418                	ld	a4,8(s0)
    80010f84:	47b1                	li	a5,12
    80010f86:	02f70463          	beq	a4,a5,80010fae <instruction_page_fault_2+0x110>
    80010f8a:	4481                	li	s1,0
    TEST_END();
    80010f8c:	0000c517          	auipc	a0,0xc
    80010f90:	bec50513          	add	a0,a0,-1044 # 8001cb78 <__func__.1+0x380>
    80010f94:	7cf090ef          	jal	8001af62 <printf>
    80010f98:	4511                	li	a0,4
    80010f9a:	b45ef0ef          	jal	80000ade <goto_priv>
    80010f9e:	b88f00ef          	jal	80001326 <reset_state>
}
    80010fa2:	60e2                	ld	ra,24(sp)
    80010fa4:	6442                	ld	s0,16(sp)
    80010fa6:	8526                	mv	a0,s1
    80010fa8:	64a2                	ld	s1,8(sp)
    80010faa:	6105                	add	sp,sp,32
    80010fac:	8082                	ret
    TEST_END();
    80010fae:	0000c597          	auipc	a1,0xc
    80010fb2:	b1258593          	add	a1,a1,-1262 # 8001cac0 <__func__.1+0x2c8>
    80010fb6:	bfd9                	j	80010f8c <instruction_page_fault_2+0xee>
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    80010fb8:	0000c597          	auipc	a1,0xc
    80010fbc:	b0858593          	add	a1,a1,-1272 # 8001cac0 <__func__.1+0x2c8>
    80010fc0:	b741                	j	80010f40 <instruction_page_fault_2+0xa2>

0000000080010fc2 <instruction_page_fault_3>:



bool instruction_page_fault_3(){
    80010fc2:	1101                	add	sp,sp,-32

    TEST_START();
    80010fc4:	0000b597          	auipc	a1,0xb
    80010fc8:	d6458593          	add	a1,a1,-668 # 8001bd28 <__func__.23>
    80010fcc:	0000c517          	auipc	a0,0xc
    80010fd0:	b1450513          	add	a0,a0,-1260 # 8001cae0 <__func__.1+0x2e8>
bool instruction_page_fault_3(){
    80010fd4:	ec06                	sd	ra,24(sp)
    80010fd6:	e822                	sd	s0,16(sp)
    80010fd8:	e426                	sd	s1,8(sp)
    TEST_START();
    80010fda:	789090ef          	jal	8001af62 <printf>
    80010fde:	4529                	li	a0,10
    80010fe0:	655080ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80010fe4:	450d                	li	a0,3
    80010fe6:	af9ef0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80010fea:	df6ef0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80010fee:	839ef0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80010ff2:	4509                	li	a0,2
    80010ff4:	aebef0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80010ff8:	ebcef0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80010ffc:	4509                	li	a0,2
    80010ffe:	ae1ef0ef          	jal	80000ade <goto_priv>


    //执行取指指令时，pte.v=0
    vaddr = hs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    80011002:	0ff0000f          	fence
    80011006:	4785                	li	a5,1
    80011008:	0002c417          	auipc	s0,0x2c
    8001100c:	00840413          	add	s0,s0,8 # 8003d010 <excpt>
    80011010:	00f41023          	sh	a5,0(s0)
    80011014:	0002c797          	auipc	a5,0x2c
    80011018:	0207ba23          	sd	zero,52(a5) # 8003d048 <excpt+0x38>
    8001101c:	0ff0000f          	fence
    TEST_EXEC_EXCEPT(vaddr); 
    80011020:	400197b7          	lui	a5,0x40019
    80011024:	078a                	sll	a5,a5,0x2
    80011026:	00000297          	auipc	t0,0x0
    8001102a:	00c28293          	add	t0,t0,12 # 80011032 <instruction_page_fault_3+0x70>
    8001102e:	02543c23          	sd	t0,56(s0)
    80011032:	8782                	jr	a5

    TEST_ASSERT("vs mode fetch instruction when pte.v=0 leads to IPF",
    80011034:	08200593          	li	a1,130
    80011038:	00010617          	auipc	a2,0x10
    8001103c:	ff060613          	add	a2,a2,-16 # 80021028 <__func__.1+0x4830>
    80011040:	0000c517          	auipc	a0,0xc
    80011044:	ab850513          	add	a0,a0,-1352 # 8001caf8 <__func__.1+0x300>
    80011048:	71b090ef          	jal	8001af62 <printf>
    8001104c:	00144783          	lbu	a5,1(s0)
    80011050:	0000c597          	auipc	a1,0xc
    80011054:	a8058593          	add	a1,a1,-1408 # 8001cad0 <__func__.1+0x2d8>
    80011058:	c789                	beqz	a5,80011062 <instruction_page_fault_3+0xa0>
    8001105a:	6418                	ld	a4,8(s0)
    8001105c:	47b1                	li	a5,12
    8001105e:	12f70563          	beq	a4,a5,80011188 <instruction_page_fault_3+0x1c6>
    80011062:	0000c517          	auipc	a0,0xc
    80011066:	aae50513          	add	a0,a0,-1362 # 8001cb10 <__func__.1+0x318>
    8001106a:	6f9090ef          	jal	8001af62 <printf>
    8001106e:	00144783          	lbu	a5,1(s0)
    80011072:	c789                	beqz	a5,8001107c <instruction_page_fault_3+0xba>
    80011074:	6418                	ld	a4,8(s0)
    80011076:	47b1                	li	a5,12
    80011078:	00f70c63          	beq	a4,a5,80011090 <instruction_page_fault_3+0xce>
    8001107c:	0000c517          	auipc	a0,0xc
    80011080:	a9c50513          	add	a0,a0,-1380 # 8001cb18 <__func__.1+0x320>
    80011084:	6df090ef          	jal	8001af62 <printf>
    80011088:	02900513          	li	a0,41
    8001108c:	5a9080ef          	jal	80019e34 <putchar>
    80011090:	4529                	li	a0,10
    80011092:	5a3080ef          	jal	80019e34 <putchar>
    80011096:	00144783          	lbu	a5,1(s0)
    8001109a:	4481                	li	s1,0
    8001109c:	c789                	beqz	a5,800110a6 <instruction_page_fault_3+0xe4>
    8001109e:	6404                	ld	s1,8(s0)
    800110a0:	14d1                	add	s1,s1,-12
    800110a2:	0014b493          	seqz	s1,s1
    );


    //执行取指指令时，pte.x=0
    vaddr = vs_page_base(VSRW_GRW);
    TEST_SETUP_EXCEPT();
    800110a6:	0ff0000f          	fence
    800110aa:	4785                	li	a5,1
    800110ac:	00f41023          	sh	a5,0(s0)
    800110b0:	0002c797          	auipc	a5,0x2c
    800110b4:	f807bc23          	sd	zero,-104(a5) # 8003d048 <excpt+0x38>
    800110b8:	0ff0000f          	fence
    TEST_EXEC_EXCEPT(vaddr); 
    800110bc:	001007b7          	lui	a5,0x100
    800110c0:	05178793          	add	a5,a5,81 # 100051 <STACK_SIZE+0x51>
    800110c4:	07b2                	sll	a5,a5,0xc
    800110c6:	00000297          	auipc	t0,0x0
    800110ca:	00c28293          	add	t0,t0,12 # 800110d2 <instruction_page_fault_3+0x110>
    800110ce:	02543c23          	sd	t0,56(s0)
    800110d2:	8782                	jr	a5

    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    800110d4:	08200593          	li	a1,130
    800110d8:	00010617          	auipc	a2,0x10
    800110dc:	f8860613          	add	a2,a2,-120 # 80021060 <__func__.1+0x4868>
    800110e0:	0000c517          	auipc	a0,0xc
    800110e4:	a1850513          	add	a0,a0,-1512 # 8001caf8 <__func__.1+0x300>
    800110e8:	67b090ef          	jal	8001af62 <printf>
    800110ec:	00144783          	lbu	a5,1(s0)
    800110f0:	0000c597          	auipc	a1,0xc
    800110f4:	9e058593          	add	a1,a1,-1568 # 8001cad0 <__func__.1+0x2d8>
    800110f8:	c789                	beqz	a5,80011102 <instruction_page_fault_3+0x140>
    800110fa:	6418                	ld	a4,8(s0)
    800110fc:	47b1                	li	a5,12
    800110fe:	08f70063          	beq	a4,a5,8001117e <instruction_page_fault_3+0x1bc>
    80011102:	0000c517          	auipc	a0,0xc
    80011106:	a0e50513          	add	a0,a0,-1522 # 8001cb10 <__func__.1+0x318>
    8001110a:	659090ef          	jal	8001af62 <printf>
    8001110e:	00144783          	lbu	a5,1(s0)
    80011112:	c789                	beqz	a5,8001111c <instruction_page_fault_3+0x15a>
    80011114:	6418                	ld	a4,8(s0)
    80011116:	47b1                	li	a5,12
    80011118:	00f70c63          	beq	a4,a5,80011130 <instruction_page_fault_3+0x16e>
    8001111c:	0000c517          	auipc	a0,0xc
    80011120:	9fc50513          	add	a0,a0,-1540 # 8001cb18 <__func__.1+0x320>
    80011124:	63f090ef          	jal	8001af62 <printf>
    80011128:	02900513          	li	a0,41
    8001112c:	509080ef          	jal	80019e34 <putchar>
    80011130:	4529                	li	a0,10
    80011132:	503080ef          	jal	80019e34 <putchar>
    80011136:	cc95                	beqz	s1,80011172 <instruction_page_fault_3+0x1b0>
    80011138:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    8001113c:	0000c597          	auipc	a1,0xc
    80011140:	99458593          	add	a1,a1,-1644 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    80011144:	c491                	beqz	s1,80011150 <instruction_page_fault_3+0x18e>
    80011146:	6418                	ld	a4,8(s0)
    80011148:	47b1                	li	a5,12
    8001114a:	04f70463          	beq	a4,a5,80011192 <instruction_page_fault_3+0x1d0>
    8001114e:	4481                	li	s1,0
    TEST_END();
    80011150:	0000c517          	auipc	a0,0xc
    80011154:	a2850513          	add	a0,a0,-1496 # 8001cb78 <__func__.1+0x380>
    80011158:	60b090ef          	jal	8001af62 <printf>
    8001115c:	4511                	li	a0,4
    8001115e:	981ef0ef          	jal	80000ade <goto_priv>
    80011162:	9c4f00ef          	jal	80001326 <reset_state>
}
    80011166:	60e2                	ld	ra,24(sp)
    80011168:	6442                	ld	s0,16(sp)
    8001116a:	8526                	mv	a0,s1
    8001116c:	64a2                	ld	s1,8(sp)
    8001116e:	6105                	add	sp,sp,32
    80011170:	8082                	ret
    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    80011172:	4481                	li	s1,0
    TEST_END();
    80011174:	0000c597          	auipc	a1,0xc
    80011178:	95c58593          	add	a1,a1,-1700 # 8001cad0 <__func__.1+0x2d8>
    8001117c:	bfd1                	j	80011150 <instruction_page_fault_3+0x18e>
    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    8001117e:	0000c597          	auipc	a1,0xc
    80011182:	94258593          	add	a1,a1,-1726 # 8001cac0 <__func__.1+0x2c8>
    80011186:	bfb5                	j	80011102 <instruction_page_fault_3+0x140>
    TEST_ASSERT("vs mode fetch instruction when pte.v=0 leads to IPF",
    80011188:	0000c597          	auipc	a1,0xc
    8001118c:	93858593          	add	a1,a1,-1736 # 8001cac0 <__func__.1+0x2c8>
    80011190:	bdc9                	j	80011062 <instruction_page_fault_3+0xa0>
    TEST_END();
    80011192:	0000c597          	auipc	a1,0xc
    80011196:	92e58593          	add	a1,a1,-1746 # 8001cac0 <__func__.1+0x2c8>
    8001119a:	bf5d                	j	80011150 <instruction_page_fault_3+0x18e>

000000008001119c <instruction_page_fault_4>:

bool instruction_page_fault_4(){
    8001119c:	1101                	add	sp,sp,-32

    TEST_START();
    8001119e:	0000b597          	auipc	a1,0xb
    800111a2:	baa58593          	add	a1,a1,-1110 # 8001bd48 <__func__.22>
    800111a6:	0000c517          	auipc	a0,0xc
    800111aa:	93a50513          	add	a0,a0,-1734 # 8001cae0 <__func__.1+0x2e8>
bool instruction_page_fault_4(){
    800111ae:	ec06                	sd	ra,24(sp)
    800111b0:	e822                	sd	s0,16(sp)
    800111b2:	e426                	sd	s1,8(sp)
    TEST_START();
    800111b4:	5af090ef          	jal	8001af62 <printf>
    800111b8:	4529                	li	a0,10
    800111ba:	47b080ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    800111be:	450d                	li	a0,3
    800111c0:	91fef0ef          	jal	80000ade <goto_priv>
    hspt_init();
    800111c4:	c1cef0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800111c8:	e5eef0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    800111cc:	4509                	li	a0,2
    800111ce:	911ef0ef          	jal	80000ade <goto_priv>
    vspt_init();
    800111d2:	ce2ef0ef          	jal	800006b4 <vspt_init>


    goto_priv(PRIV_VS);
    800111d6:	4509                	li	a0,2
    800111d8:	907ef0ef          	jal	80000ade <goto_priv>

    //执行取指指令时，在VS模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800111dc:	0ff0000f          	fence
    800111e0:	4785                	li	a5,1
    800111e2:	0002c417          	auipc	s0,0x2c
    800111e6:	e2e40413          	add	s0,s0,-466 # 8003d010 <excpt>
    800111ea:	00f41023          	sh	a5,0(s0)
    800111ee:	0002c797          	auipc	a5,0x2c
    800111f2:	e407bd23          	sd	zero,-422(a5) # 8003d048 <excpt+0x38>
    800111f6:	0ff0000f          	fence
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    TEST_EXEC_EXCEPT(vaddr); 
    800111fa:	000807b7          	lui	a5,0x80
    800111fe:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80011200:	07b6                	sll	a5,a5,0xd
    80011202:	00000297          	auipc	t0,0x0
    80011206:	00c28293          	add	t0,t0,12 # 8001120e <instruction_page_fault_4+0x72>
    8001120a:	02543c23          	sd	t0,56(s0)
    8001120e:	8782                	jr	a5
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    80011210:	08200593          	li	a1,130
    80011214:	00010617          	auipc	a2,0x10
    80011218:	e8460613          	add	a2,a2,-380 # 80021098 <__func__.1+0x48a0>
    8001121c:	0000c517          	auipc	a0,0xc
    80011220:	8dc50513          	add	a0,a0,-1828 # 8001caf8 <__func__.1+0x300>
    80011224:	53f090ef          	jal	8001af62 <printf>
    80011228:	00144783          	lbu	a5,1(s0)
    8001122c:	0000c597          	auipc	a1,0xc
    80011230:	8a458593          	add	a1,a1,-1884 # 8001cad0 <__func__.1+0x2d8>
    80011234:	c789                	beqz	a5,8001123e <instruction_page_fault_4+0xa2>
    80011236:	6418                	ld	a4,8(s0)
    80011238:	47b1                	li	a5,12
    8001123a:	06f70e63          	beq	a4,a5,800112b6 <instruction_page_fault_4+0x11a>
    8001123e:	0000c517          	auipc	a0,0xc
    80011242:	8d250513          	add	a0,a0,-1838 # 8001cb10 <__func__.1+0x318>
    80011246:	51d090ef          	jal	8001af62 <printf>
    8001124a:	00144783          	lbu	a5,1(s0)
    8001124e:	c789                	beqz	a5,80011258 <instruction_page_fault_4+0xbc>
    80011250:	6418                	ld	a4,8(s0)
    80011252:	47b1                	li	a5,12
    80011254:	00f70c63          	beq	a4,a5,8001126c <instruction_page_fault_4+0xd0>
    80011258:	0000c517          	auipc	a0,0xc
    8001125c:	8c050513          	add	a0,a0,-1856 # 8001cb18 <__func__.1+0x320>
    80011260:	503090ef          	jal	8001af62 <printf>
    80011264:	02900513          	li	a0,41
    80011268:	3cd080ef          	jal	80019e34 <putchar>
    8001126c:	4529                	li	a0,10
    8001126e:	3c7080ef          	jal	80019e34 <putchar>
    80011272:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80011276:	0000c597          	auipc	a1,0xc
    8001127a:	85a58593          	add	a1,a1,-1958 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    8001127e:	c491                	beqz	s1,8001128a <instruction_page_fault_4+0xee>
    80011280:	6418                	ld	a4,8(s0)
    80011282:	47b1                	li	a5,12
    80011284:	02f70463          	beq	a4,a5,800112ac <instruction_page_fault_4+0x110>
    80011288:	4481                	li	s1,0
    TEST_END();
    8001128a:	0000c517          	auipc	a0,0xc
    8001128e:	8ee50513          	add	a0,a0,-1810 # 8001cb78 <__func__.1+0x380>
    80011292:	4d1090ef          	jal	8001af62 <printf>
    80011296:	4511                	li	a0,4
    80011298:	847ef0ef          	jal	80000ade <goto_priv>
    8001129c:	88af00ef          	jal	80001326 <reset_state>
}
    800112a0:	60e2                	ld	ra,24(sp)
    800112a2:	6442                	ld	s0,16(sp)
    800112a4:	8526                	mv	a0,s1
    800112a6:	64a2                	ld	s1,8(sp)
    800112a8:	6105                	add	sp,sp,32
    800112aa:	8082                	ret
    TEST_END();
    800112ac:	0000c597          	auipc	a1,0xc
    800112b0:	81458593          	add	a1,a1,-2028 # 8001cac0 <__func__.1+0x2c8>
    800112b4:	bfd9                	j	8001128a <instruction_page_fault_4+0xee>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    800112b6:	0000c597          	auipc	a1,0xc
    800112ba:	80a58593          	add	a1,a1,-2038 # 8001cac0 <__func__.1+0x2c8>
    800112be:	b741                	j	8001123e <instruction_page_fault_4+0xa2>

00000000800112c0 <load_page_fault_1>:

bool load_page_fault_1(){
    800112c0:	1101                	add	sp,sp,-32

    TEST_START();
    800112c2:	0000b597          	auipc	a1,0xb
    800112c6:	aa658593          	add	a1,a1,-1370 # 8001bd68 <__func__.21>
    800112ca:	0000c517          	auipc	a0,0xc
    800112ce:	81650513          	add	a0,a0,-2026 # 8001cae0 <__func__.1+0x2e8>
bool load_page_fault_1(){
    800112d2:	ec06                	sd	ra,24(sp)
    800112d4:	e822                	sd	s0,16(sp)
    800112d6:	e426                	sd	s1,8(sp)
    TEST_START();
    800112d8:	48b090ef          	jal	8001af62 <printf>
    800112dc:	4529                	li	a0,10
    800112de:	357080ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS); 
    800112e2:	450d                	li	a0,3
    800112e4:	ffaef0ef          	jal	80000ade <goto_priv>
    hspt_init();
    800112e8:	af8ef0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800112ec:	d3aef0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    800112f0:	4509                	li	a0,2
    800112f2:	fecef0ef          	jal	80000ade <goto_priv>
    vspt_init();
    800112f6:	bbeef0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    800112fa:	450d                	li	a0,3
    800112fc:	fe2ef0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80011300:	4509                	li	a0,2
    80011302:	f00ef0ef          	jal	80000a02 <set_prev_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80011306:	0ff0000f          	fence
    8001130a:	4785                	li	a5,1
    8001130c:	0002c417          	auipc	s0,0x2c
    80011310:	d0440413          	add	s0,s0,-764 # 8003d010 <excpt>
    80011314:	00f41023          	sh	a5,0(s0)
    80011318:	0002c797          	auipc	a5,0x2c
    8001131c:	d207b823          	sd	zero,-720(a5) # 8003d048 <excpt+0x38>
    80011320:	0ff0000f          	fence
    asm volatile(
    80011324:	400197b7          	lui	a5,0x40019
    80011328:	078a                	sll	a5,a5,0x2
    8001132a:	6007c7f3          	.4byte	0x6007c7f3

    addr = hs_page_base(VSI_GI);
    hlvb(addr);
    TEST_ASSERT("hs mode load when pte.v=0 leads to LPF",
    8001132e:	08200593          	li	a1,130
    80011332:	00010617          	auipc	a2,0x10
    80011336:	d9e60613          	add	a2,a2,-610 # 800210d0 <__func__.1+0x48d8>
    8001133a:	0000b517          	auipc	a0,0xb
    8001133e:	7be50513          	add	a0,a0,1982 # 8001caf8 <__func__.1+0x300>
    80011342:	421090ef          	jal	8001af62 <printf>
    80011346:	00144783          	lbu	a5,1(s0)
    8001134a:	0000b597          	auipc	a1,0xb
    8001134e:	78658593          	add	a1,a1,1926 # 8001cad0 <__func__.1+0x2d8>
    80011352:	c789                	beqz	a5,8001135c <load_page_fault_1+0x9c>
    80011354:	6418                	ld	a4,8(s0)
    80011356:	47b5                	li	a5,13
    80011358:	1cf70f63          	beq	a4,a5,80011536 <load_page_fault_1+0x276>
    8001135c:	0000b517          	auipc	a0,0xb
    80011360:	7b450513          	add	a0,a0,1972 # 8001cb10 <__func__.1+0x318>
    80011364:	3ff090ef          	jal	8001af62 <printf>
    80011368:	00144783          	lbu	a5,1(s0)
    8001136c:	c789                	beqz	a5,80011376 <load_page_fault_1+0xb6>
    8001136e:	6418                	ld	a4,8(s0)
    80011370:	47b5                	li	a5,13
    80011372:	00f70c63          	beq	a4,a5,8001138a <load_page_fault_1+0xca>
    80011376:	0000b517          	auipc	a0,0xb
    8001137a:	7a250513          	add	a0,a0,1954 # 8001cb18 <__func__.1+0x320>
    8001137e:	3e5090ef          	jal	8001af62 <printf>
    80011382:	02900513          	li	a0,41
    80011386:	2af080ef          	jal	80019e34 <putchar>
    8001138a:	4529                	li	a0,10
    8001138c:	2a9080ef          	jal	80019e34 <putchar>
    80011390:	00144783          	lbu	a5,1(s0)
    80011394:	4481                	li	s1,0
    80011396:	c789                	beqz	a5,800113a0 <load_page_fault_1+0xe0>
    80011398:	6404                	ld	s1,8(s0)
    8001139a:	14cd                	add	s1,s1,-13
    8001139c:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_LPF
    );


    //执行hlvd指令时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    TEST_SETUP_EXCEPT();
    800113a0:	0ff0000f          	fence
    800113a4:	4785                	li	a5,1
    800113a6:	00f41023          	sh	a5,0(s0)
    800113aa:	0002c797          	auipc	a5,0x2c
    800113ae:	c807bf23          	sd	zero,-866(a5) # 8003d048 <excpt+0x38>
    800113b2:	0ff0000f          	fence
    addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800113b6:	000807b7          	lui	a5,0x80
    800113ba:	1007b073          	csrc	sstatus,a5
    asm volatile(
    800113be:	001007b7          	lui	a5,0x100
    800113c2:	05f78793          	add	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    800113c6:	07b2                	sll	a5,a5,0xc
    800113c8:	6c07c7f3          	.4byte	0x6c07c7f3
    hlvd(addr);   
    TEST_ASSERT("hs mode load when sstatus.mxr=0 and pte.r=0 leads to LPF",
    800113cc:	08200593          	li	a1,130
    800113d0:	00010617          	auipc	a2,0x10
    800113d4:	d2860613          	add	a2,a2,-728 # 800210f8 <__func__.1+0x4900>
    800113d8:	0000b517          	auipc	a0,0xb
    800113dc:	72050513          	add	a0,a0,1824 # 8001caf8 <__func__.1+0x300>
    800113e0:	383090ef          	jal	8001af62 <printf>
    800113e4:	00144783          	lbu	a5,1(s0)
    800113e8:	0000b597          	auipc	a1,0xb
    800113ec:	6e858593          	add	a1,a1,1768 # 8001cad0 <__func__.1+0x2d8>
    800113f0:	c789                	beqz	a5,800113fa <load_page_fault_1+0x13a>
    800113f2:	6418                	ld	a4,8(s0)
    800113f4:	47b5                	li	a5,13
    800113f6:	14f70563          	beq	a4,a5,80011540 <load_page_fault_1+0x280>
    800113fa:	0000b517          	auipc	a0,0xb
    800113fe:	71650513          	add	a0,a0,1814 # 8001cb10 <__func__.1+0x318>
    80011402:	361090ef          	jal	8001af62 <printf>
    80011406:	00144783          	lbu	a5,1(s0)
    8001140a:	c789                	beqz	a5,80011414 <load_page_fault_1+0x154>
    8001140c:	6418                	ld	a4,8(s0)
    8001140e:	47b5                	li	a5,13
    80011410:	00f70c63          	beq	a4,a5,80011428 <load_page_fault_1+0x168>
    80011414:	0000b517          	auipc	a0,0xb
    80011418:	70450513          	add	a0,a0,1796 # 8001cb18 <__func__.1+0x320>
    8001141c:	347090ef          	jal	8001af62 <printf>
    80011420:	02900513          	li	a0,41
    80011424:	211080ef          	jal	80019e34 <putchar>
    80011428:	4529                	li	a0,10
    8001142a:	20b080ef          	jal	80019e34 <putchar>
    8001142e:	c491                	beqz	s1,8001143a <load_page_fault_1+0x17a>
    80011430:	00144783          	lbu	a5,1(s0)
    80011434:	4481                	li	s1,0
    80011436:	0e079663          	bnez	a5,80011522 <load_page_fault_1+0x262>
        excpt.cause == CAUSE_LPF
    );

    //执行hlvd指令时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    goto_priv(PRIV_HS);
    8001143a:	450d                	li	a0,3
    8001143c:	ea2ef0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80011440:	0ff0000f          	fence
    80011444:	4785                	li	a5,1
    80011446:	00f41023          	sh	a5,0(s0)
    8001144a:	0002c797          	auipc	a5,0x2c
    8001144e:	be07bf23          	sd	zero,-1026(a5) # 8003d048 <excpt+0x38>
    80011452:	0ff0000f          	fence
    addr = hs_page_base(VSV_GV);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80011456:	000807b7          	lui	a5,0x80
    8001145a:	1007a073          	csrs	sstatus,a5
    8001145e:	001007b7          	lui	a5,0x100
    80011462:	07f5                	add	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    80011464:	07b2                	sll	a5,a5,0xc
    80011466:	6c07c7f3          	.4byte	0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001146a:	08200593          	li	a1,130
    8001146e:	00010617          	auipc	a2,0x10
    80011472:	cca60613          	add	a2,a2,-822 # 80021138 <__func__.1+0x4940>
    80011476:	0000b517          	auipc	a0,0xb
    8001147a:	68250513          	add	a0,a0,1666 # 8001caf8 <__func__.1+0x300>
    8001147e:	2e5090ef          	jal	8001af62 <printf>
    80011482:	00144783          	lbu	a5,1(s0)
    80011486:	0000b597          	auipc	a1,0xb
    8001148a:	64a58593          	add	a1,a1,1610 # 8001cad0 <__func__.1+0x2d8>
    8001148e:	c789                	beqz	a5,80011498 <load_page_fault_1+0x1d8>
    80011490:	6418                	ld	a4,8(s0)
    80011492:	47b5                	li	a5,13
    80011494:	08f70c63          	beq	a4,a5,8001152c <load_page_fault_1+0x26c>
    80011498:	0000b517          	auipc	a0,0xb
    8001149c:	67850513          	add	a0,a0,1656 # 8001cb10 <__func__.1+0x318>
    800114a0:	2c3090ef          	jal	8001af62 <printf>
    800114a4:	00144783          	lbu	a5,1(s0)
    800114a8:	c789                	beqz	a5,800114b2 <load_page_fault_1+0x1f2>
    800114aa:	6418                	ld	a4,8(s0)
    800114ac:	47b5                	li	a5,13
    800114ae:	00f70c63          	beq	a4,a5,800114c6 <load_page_fault_1+0x206>
    800114b2:	0000b517          	auipc	a0,0xb
    800114b6:	66650513          	add	a0,a0,1638 # 8001cb18 <__func__.1+0x320>
    800114ba:	2a9090ef          	jal	8001af62 <printf>
    800114be:	02900513          	li	a0,41
    800114c2:	173080ef          	jal	80019e34 <putchar>
    800114c6:	4529                	li	a0,10
    800114c8:	16d080ef          	jal	80019e34 <putchar>
    800114cc:	c481                	beqz	s1,800114d4 <load_page_fault_1+0x214>
    800114ce:	00144483          	lbu	s1,1(s0)
    800114d2:	e89d                	bnez	s1,80011508 <load_page_fault_1+0x248>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800114d4:	000807b7          	lui	a5,0x80
    800114d8:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800114dc:	4481                	li	s1,0

    TEST_END();
    800114de:	0000b597          	auipc	a1,0xb
    800114e2:	5f258593          	add	a1,a1,1522 # 8001cad0 <__func__.1+0x2d8>
    800114e6:	0000b517          	auipc	a0,0xb
    800114ea:	69250513          	add	a0,a0,1682 # 8001cb78 <__func__.1+0x380>
    800114ee:	275090ef          	jal	8001af62 <printf>
    800114f2:	4511                	li	a0,4
    800114f4:	deaef0ef          	jal	80000ade <goto_priv>
    800114f8:	e2fef0ef          	jal	80001326 <reset_state>

}
    800114fc:	60e2                	ld	ra,24(sp)
    800114fe:	6442                	ld	s0,16(sp)
    80011500:	8526                	mv	a0,s1
    80011502:	64a2                	ld	s1,8(sp)
    80011504:	6105                	add	sp,sp,32
    80011506:	8082                	ret
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80011508:	6418                	ld	a4,8(s0)
    8001150a:	47b5                	li	a5,13
    8001150c:	fcf714e3          	bne	a4,a5,800114d4 <load_page_fault_1+0x214>
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80011510:	000807b7          	lui	a5,0x80
    80011514:	1007b073          	csrc	sstatus,a5
    TEST_END();
    80011518:	0000b597          	auipc	a1,0xb
    8001151c:	5a858593          	add	a1,a1,1448 # 8001cac0 <__func__.1+0x2c8>
    80011520:	b7d9                	j	800114e6 <load_page_fault_1+0x226>
    TEST_ASSERT("hs mode load when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80011522:	6404                	ld	s1,8(s0)
    80011524:	14cd                	add	s1,s1,-13
    80011526:	0014b493          	seqz	s1,s1
    8001152a:	bf01                	j	8001143a <load_page_fault_1+0x17a>
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001152c:	0000b597          	auipc	a1,0xb
    80011530:	59458593          	add	a1,a1,1428 # 8001cac0 <__func__.1+0x2c8>
    80011534:	b795                	j	80011498 <load_page_fault_1+0x1d8>
    TEST_ASSERT("hs mode load when pte.v=0 leads to LPF",
    80011536:	0000b597          	auipc	a1,0xb
    8001153a:	58a58593          	add	a1,a1,1418 # 8001cac0 <__func__.1+0x2c8>
    8001153e:	bd39                	j	8001135c <load_page_fault_1+0x9c>
    TEST_ASSERT("hs mode load when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80011540:	0000b597          	auipc	a1,0xb
    80011544:	58058593          	add	a1,a1,1408 # 8001cac0 <__func__.1+0x2c8>
    80011548:	bd4d                	j	800113fa <load_page_fault_1+0x13a>

000000008001154a <load_page_fault_2>:

bool load_page_fault_2(){
    8001154a:	1101                	add	sp,sp,-32

    TEST_START();
    8001154c:	0000b597          	auipc	a1,0xb
    80011550:	83458593          	add	a1,a1,-1996 # 8001bd80 <__func__.20>
    80011554:	0000b517          	auipc	a0,0xb
    80011558:	58c50513          	add	a0,a0,1420 # 8001cae0 <__func__.1+0x2e8>
bool load_page_fault_2(){
    8001155c:	ec06                	sd	ra,24(sp)
    8001155e:	e822                	sd	s0,16(sp)
    80011560:	e426                	sd	s1,8(sp)
    TEST_START();
    80011562:	201090ef          	jal	8001af62 <printf>
    80011566:	4529                	li	a0,10
    80011568:	0cd080ef          	jal	80019e34 <putchar>


    goto_priv(PRIV_HS);
    8001156c:	450d                	li	a0,3
    8001156e:	d70ef0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80011572:	86eef0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80011576:	ab0ef0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    8001157a:	4509                	li	a0,2
    8001157c:	d62ef0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80011580:	934ef0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_M);
    80011584:	4511                	li	a0,4
    80011586:	d58ef0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    8001158a:	000407b7          	lui	a5,0x40
    8001158e:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    80011592:	450d                	li	a0,3
    80011594:	d4aef0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80011598:	4509                	li	a0,2
    8001159a:	c68ef0ef          	jal	80000a02 <set_prev_priv>

    //执行hlvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    8001159e:	0ff0000f          	fence
    800115a2:	4785                	li	a5,1
    800115a4:	0002c417          	auipc	s0,0x2c
    800115a8:	a6c40413          	add	s0,s0,-1428 # 8003d010 <excpt>
    800115ac:	00f41023          	sh	a5,0(s0)
    800115b0:	0002c797          	auipc	a5,0x2c
    800115b4:	a807bc23          	sd	zero,-1384(a5) # 8003d048 <excpt+0x38>
    800115b8:	0ff0000f          	fence
    800115bc:	000807b7          	lui	a5,0x80
    800115c0:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800115c2:	07b6                	sll	a5,a5,0xd
    800115c4:	6c07c7f3          	.4byte	0x6c07c7f3
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    hlvd(addr);
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    800115c8:	08200593          	li	a1,130
    800115cc:	00010617          	auipc	a2,0x10
    800115d0:	bb460613          	add	a2,a2,-1100 # 80021180 <__func__.1+0x4988>
    800115d4:	0000b517          	auipc	a0,0xb
    800115d8:	52450513          	add	a0,a0,1316 # 8001caf8 <__func__.1+0x300>
    800115dc:	187090ef          	jal	8001af62 <printf>
    800115e0:	00144783          	lbu	a5,1(s0)
    800115e4:	0000b597          	auipc	a1,0xb
    800115e8:	4ec58593          	add	a1,a1,1260 # 8001cad0 <__func__.1+0x2d8>
    800115ec:	c789                	beqz	a5,800115f6 <load_page_fault_2+0xac>
    800115ee:	6418                	ld	a4,8(s0)
    800115f0:	47b5                	li	a5,13
    800115f2:	06f70e63          	beq	a4,a5,8001166e <load_page_fault_2+0x124>
    800115f6:	0000b517          	auipc	a0,0xb
    800115fa:	51a50513          	add	a0,a0,1306 # 8001cb10 <__func__.1+0x318>
    800115fe:	165090ef          	jal	8001af62 <printf>
    80011602:	00144783          	lbu	a5,1(s0)
    80011606:	c789                	beqz	a5,80011610 <load_page_fault_2+0xc6>
    80011608:	6418                	ld	a4,8(s0)
    8001160a:	47b5                	li	a5,13
    8001160c:	00f70c63          	beq	a4,a5,80011624 <load_page_fault_2+0xda>
    80011610:	0000b517          	auipc	a0,0xb
    80011614:	50850513          	add	a0,a0,1288 # 8001cb18 <__func__.1+0x320>
    80011618:	14b090ef          	jal	8001af62 <printf>
    8001161c:	02900513          	li	a0,41
    80011620:	015080ef          	jal	80019e34 <putchar>
    80011624:	4529                	li	a0,10
    80011626:	00f080ef          	jal	80019e34 <putchar>
    8001162a:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    8001162e:	0000b597          	auipc	a1,0xb
    80011632:	4a258593          	add	a1,a1,1186 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    80011636:	c491                	beqz	s1,80011642 <load_page_fault_2+0xf8>
    80011638:	6418                	ld	a4,8(s0)
    8001163a:	47b5                	li	a5,13
    8001163c:	02f70463          	beq	a4,a5,80011664 <load_page_fault_2+0x11a>
    80011640:	4481                	li	s1,0
    TEST_END();
    80011642:	0000b517          	auipc	a0,0xb
    80011646:	53650513          	add	a0,a0,1334 # 8001cb78 <__func__.1+0x380>
    8001164a:	119090ef          	jal	8001af62 <printf>
    8001164e:	4511                	li	a0,4
    80011650:	c8eef0ef          	jal	80000ade <goto_priv>
    80011654:	cd3ef0ef          	jal	80001326 <reset_state>
}
    80011658:	60e2                	ld	ra,24(sp)
    8001165a:	6442                	ld	s0,16(sp)
    8001165c:	8526                	mv	a0,s1
    8001165e:	64a2                	ld	s1,8(sp)
    80011660:	6105                	add	sp,sp,32
    80011662:	8082                	ret
    TEST_END();
    80011664:	0000b597          	auipc	a1,0xb
    80011668:	45c58593          	add	a1,a1,1116 # 8001cac0 <__func__.1+0x2c8>
    8001166c:	bfd9                	j	80011642 <load_page_fault_2+0xf8>
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    8001166e:	0000b597          	auipc	a1,0xb
    80011672:	45258593          	add	a1,a1,1106 # 8001cac0 <__func__.1+0x2c8>
    80011676:	b741                	j	800115f6 <load_page_fault_2+0xac>

0000000080011678 <load_page_fault_3>:

bool load_page_fault_3(){
    80011678:	1141                	add	sp,sp,-16

    TEST_START();
    8001167a:	0000a597          	auipc	a1,0xa
    8001167e:	71e58593          	add	a1,a1,1822 # 8001bd98 <__func__.19>
    80011682:	0000b517          	auipc	a0,0xb
    80011686:	45e50513          	add	a0,a0,1118 # 8001cae0 <__func__.1+0x2e8>
bool load_page_fault_3(){
    8001168a:	e406                	sd	ra,8(sp)
    8001168c:	e022                	sd	s0,0(sp)
    TEST_START();
    8001168e:	0d5090ef          	jal	8001af62 <printf>
    80011692:	4529                	li	a0,10
    80011694:	7a0080ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80011698:	450d                	li	a0,3
    8001169a:	c44ef0ef          	jal	80000ade <goto_priv>
    hspt_init();
    8001169e:	f43ee0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800116a2:	984ef0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    800116a6:	4509                	li	a0,2
    800116a8:	c36ef0ef          	jal	80000ade <goto_priv>
    vspt_init();
    800116ac:	808ef0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_M);
    800116b0:	4511                	li	a0,4
    800116b2:	c2cef0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    800116b6:	000407b7          	lui	a5,0x40
    800116ba:	2007a073          	csrs	vsstatus,a5

    //执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_HS);
    800116be:	450d                	li	a0,3
    800116c0:	c1eef0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    800116c4:	4509                	li	a0,2
    800116c6:	b3cef0ef          	jal	80000a02 <set_prev_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    800116ca:	0ff0000f          	fence
    800116ce:	4785                	li	a5,1
    800116d0:	0002c417          	auipc	s0,0x2c
    800116d4:	94040413          	add	s0,s0,-1728 # 8003d010 <excpt>
    800116d8:	00f41023          	sh	a5,0(s0)
    800116dc:	0002c797          	auipc	a5,0x2c
    800116e0:	9607b623          	sd	zero,-1684(a5) # 8003d048 <excpt+0x38>
    800116e4:	0ff0000f          	fence
    asm volatile(
    800116e8:	000807b7          	lui	a5,0x80
    800116ec:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800116ee:	07b6                	sll	a5,a5,0xd
    800116f0:	6007c7f3          	.4byte	0x6007c7f3
    hlvb(addr);

    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    800116f4:	08200593          	li	a1,130
    800116f8:	00010617          	auipc	a2,0x10
    800116fc:	ac860613          	add	a2,a2,-1336 # 800211c0 <__func__.1+0x49c8>
    80011700:	0000b517          	auipc	a0,0xb
    80011704:	3f850513          	add	a0,a0,1016 # 8001caf8 <__func__.1+0x300>
    80011708:	05b090ef          	jal	8001af62 <printf>
    8001170c:	00144783          	lbu	a5,1(s0)
    80011710:	0000b597          	auipc	a1,0xb
    80011714:	3b058593          	add	a1,a1,944 # 8001cac0 <__func__.1+0x2c8>
    80011718:	c789                	beqz	a5,80011722 <load_page_fault_3+0xaa>
    8001171a:	0000b597          	auipc	a1,0xb
    8001171e:	3b658593          	add	a1,a1,950 # 8001cad0 <__func__.1+0x2d8>
    80011722:	0000b517          	auipc	a0,0xb
    80011726:	3ee50513          	add	a0,a0,1006 # 8001cb10 <__func__.1+0x318>
    8001172a:	039090ef          	jal	8001af62 <printf>
    8001172e:	00144783          	lbu	a5,1(s0)
    80011732:	e3b1                	bnez	a5,80011776 <load_page_fault_3+0xfe>
    80011734:	4529                	li	a0,10
    80011736:	6fe080ef          	jal	80019e34 <putchar>
    8001173a:	00144783          	lbu	a5,1(s0)
    8001173e:	e795                	bnez	a5,8001176a <load_page_fault_3+0xf2>
    80011740:	4405                	li	s0,1



    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80011742:	0000b597          	auipc	a1,0xb
    80011746:	37e58593          	add	a1,a1,894 # 8001cac0 <__func__.1+0x2c8>
    8001174a:	0000b517          	auipc	a0,0xb
    8001174e:	42e50513          	add	a0,a0,1070 # 8001cb78 <__func__.1+0x380>
    80011752:	011090ef          	jal	8001af62 <printf>
    80011756:	4511                	li	a0,4
    80011758:	b86ef0ef          	jal	80000ade <goto_priv>
    8001175c:	bcbef0ef          	jal	80001326 <reset_state>
}
    80011760:	60a2                	ld	ra,8(sp)
    80011762:	8522                	mv	a0,s0
    80011764:	6402                	ld	s0,0(sp)
    80011766:	0141                	add	sp,sp,16
    80011768:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    8001176a:	4401                	li	s0,0
    TEST_END();
    8001176c:	0000b597          	auipc	a1,0xb
    80011770:	36458593          	add	a1,a1,868 # 8001cad0 <__func__.1+0x2d8>
    80011774:	bfd9                	j	8001174a <load_page_fault_3+0xd2>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80011776:	0000b517          	auipc	a0,0xb
    8001177a:	3a250513          	add	a0,a0,930 # 8001cb18 <__func__.1+0x320>
    8001177e:	7e4090ef          	jal	8001af62 <printf>
    80011782:	02900513          	li	a0,41
    80011786:	6ae080ef          	jal	80019e34 <putchar>
    8001178a:	b76d                	j	80011734 <load_page_fault_3+0xbc>

000000008001178c <load_page_fault_4>:


bool load_page_fault_4(){
    8001178c:	1101                	add	sp,sp,-32

    TEST_START();
    8001178e:	0000a597          	auipc	a1,0xa
    80011792:	62258593          	add	a1,a1,1570 # 8001bdb0 <__func__.18>
    80011796:	0000b517          	auipc	a0,0xb
    8001179a:	34a50513          	add	a0,a0,842 # 8001cae0 <__func__.1+0x2e8>
bool load_page_fault_4(){
    8001179e:	ec06                	sd	ra,24(sp)
    800117a0:	e822                	sd	s0,16(sp)
    800117a2:	e426                	sd	s1,8(sp)
    TEST_START();
    800117a4:	7be090ef          	jal	8001af62 <printf>
    800117a8:	4529                	li	a0,10
    800117aa:	68a080ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS); 
    800117ae:	450d                	li	a0,3
    800117b0:	b2eef0ef          	jal	80000ade <goto_priv>
    hspt_init();
    800117b4:	e2dee0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800117b8:	86eef0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    800117bc:	4509                	li	a0,2
    800117be:	b20ef0ef          	jal	80000ade <goto_priv>
    vspt_init();
    800117c2:	ef3ee0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    800117c6:	4509                	li	a0,2
    800117c8:	b16ef0ef          	jal	80000ade <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    800117cc:	0ff0000f          	fence
    800117d0:	4785                	li	a5,1
    800117d2:	0002c417          	auipc	s0,0x2c
    800117d6:	83e40413          	add	s0,s0,-1986 # 8003d010 <excpt>
    800117da:	00f41023          	sh	a5,0(s0)
    800117de:	0002c797          	auipc	a5,0x2c
    800117e2:	8607b523          	sd	zero,-1942(a5) # 8003d048 <excpt+0x38>
    800117e6:	0ff0000f          	fence
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    800117ea:	400197b7          	lui	a5,0x40019
    800117ee:	078a                	sll	a5,a5,0x2
    800117f0:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>

    addr = hs_page_base(VSI_GI);
    lb(addr);
    TEST_ASSERT("vs mode lb when pte.v=0 leads to LPF",
    800117f4:	08200593          	li	a1,130
    800117f8:	00010617          	auipc	a2,0x10
    800117fc:	a0060613          	add	a2,a2,-1536 # 800211f8 <__func__.1+0x4a00>
    80011800:	0000b517          	auipc	a0,0xb
    80011804:	2f850513          	add	a0,a0,760 # 8001caf8 <__func__.1+0x300>
    80011808:	75a090ef          	jal	8001af62 <printf>
    8001180c:	00144783          	lbu	a5,1(s0)
    80011810:	0000b597          	auipc	a1,0xb
    80011814:	2c058593          	add	a1,a1,704 # 8001cad0 <__func__.1+0x2d8>
    80011818:	c789                	beqz	a5,80011822 <load_page_fault_4+0x96>
    8001181a:	6418                	ld	a4,8(s0)
    8001181c:	47b5                	li	a5,13
    8001181e:	1cf70f63          	beq	a4,a5,800119fc <load_page_fault_4+0x270>
    80011822:	0000b517          	auipc	a0,0xb
    80011826:	2ee50513          	add	a0,a0,750 # 8001cb10 <__func__.1+0x318>
    8001182a:	738090ef          	jal	8001af62 <printf>
    8001182e:	00144783          	lbu	a5,1(s0)
    80011832:	c789                	beqz	a5,8001183c <load_page_fault_4+0xb0>
    80011834:	6418                	ld	a4,8(s0)
    80011836:	47b5                	li	a5,13
    80011838:	00f70c63          	beq	a4,a5,80011850 <load_page_fault_4+0xc4>
    8001183c:	0000b517          	auipc	a0,0xb
    80011840:	2dc50513          	add	a0,a0,732 # 8001cb18 <__func__.1+0x320>
    80011844:	71e090ef          	jal	8001af62 <printf>
    80011848:	02900513          	li	a0,41
    8001184c:	5e8080ef          	jal	80019e34 <putchar>
    80011850:	4529                	li	a0,10
    80011852:	5e2080ef          	jal	80019e34 <putchar>
    80011856:	00144783          	lbu	a5,1(s0)
    8001185a:	4481                	li	s1,0
    8001185c:	c789                	beqz	a5,80011866 <load_page_fault_4+0xda>
    8001185e:	6404                	ld	s1,8(s0)
    80011860:	14cd                	add	s1,s1,-13
    80011862:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_LPF
    );


    //执行ld令时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    TEST_SETUP_EXCEPT();
    80011866:	0ff0000f          	fence
    8001186a:	4785                	li	a5,1
    8001186c:	00f41023          	sh	a5,0(s0)
    80011870:	0002b797          	auipc	a5,0x2b
    80011874:	7c07bc23          	sd	zero,2008(a5) # 8003d048 <excpt+0x38>
    80011878:	0ff0000f          	fence
    addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001187c:	000807b7          	lui	a5,0x80
    80011880:	1007b073          	csrc	sstatus,a5
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    80011884:	001007b7          	lui	a5,0x100
    80011888:	05f78793          	add	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    8001188c:	07b2                	sll	a5,a5,0xc
    8001188e:	0007b783          	ld	a5,0(a5)
    ld(addr);   
    TEST_ASSERT("vs mode ld when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80011892:	08200593          	li	a1,130
    80011896:	00010617          	auipc	a2,0x10
    8001189a:	98a60613          	add	a2,a2,-1654 # 80021220 <__func__.1+0x4a28>
    8001189e:	0000b517          	auipc	a0,0xb
    800118a2:	25a50513          	add	a0,a0,602 # 8001caf8 <__func__.1+0x300>
    800118a6:	6bc090ef          	jal	8001af62 <printf>
    800118aa:	00144783          	lbu	a5,1(s0)
    800118ae:	0000b597          	auipc	a1,0xb
    800118b2:	22258593          	add	a1,a1,546 # 8001cad0 <__func__.1+0x2d8>
    800118b6:	c789                	beqz	a5,800118c0 <load_page_fault_4+0x134>
    800118b8:	6418                	ld	a4,8(s0)
    800118ba:	47b5                	li	a5,13
    800118bc:	14f70563          	beq	a4,a5,80011a06 <load_page_fault_4+0x27a>
    800118c0:	0000b517          	auipc	a0,0xb
    800118c4:	25050513          	add	a0,a0,592 # 8001cb10 <__func__.1+0x318>
    800118c8:	69a090ef          	jal	8001af62 <printf>
    800118cc:	00144783          	lbu	a5,1(s0)
    800118d0:	c789                	beqz	a5,800118da <load_page_fault_4+0x14e>
    800118d2:	6418                	ld	a4,8(s0)
    800118d4:	47b5                	li	a5,13
    800118d6:	00f70c63          	beq	a4,a5,800118ee <load_page_fault_4+0x162>
    800118da:	0000b517          	auipc	a0,0xb
    800118de:	23e50513          	add	a0,a0,574 # 8001cb18 <__func__.1+0x320>
    800118e2:	680090ef          	jal	8001af62 <printf>
    800118e6:	02900513          	li	a0,41
    800118ea:	54a080ef          	jal	80019e34 <putchar>
    800118ee:	4529                	li	a0,10
    800118f0:	544080ef          	jal	80019e34 <putchar>
    800118f4:	c491                	beqz	s1,80011900 <load_page_fault_4+0x174>
    800118f6:	00144783          	lbu	a5,1(s0)
    800118fa:	4481                	li	s1,0
    800118fc:	0e079663          	bnez	a5,800119e8 <load_page_fault_4+0x25c>
        excpt.cause == CAUSE_LPF
    );

    //执行lh指令时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    goto_priv(PRIV_VS);
    80011900:	4509                	li	a0,2
    80011902:	9dcef0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80011906:	0ff0000f          	fence
    8001190a:	4785                	li	a5,1
    8001190c:	00f41023          	sh	a5,0(s0)
    80011910:	0002b797          	auipc	a5,0x2b
    80011914:	7207bc23          	sd	zero,1848(a5) # 8003d048 <excpt+0x38>
    80011918:	0ff0000f          	fence
    addr = hs_page_base(VSV_GV);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    8001191c:	000807b7          	lui	a5,0x80
    80011920:	1007a073          	csrs	sstatus,a5
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    80011924:	001007b7          	lui	a5,0x100
    80011928:	07f5                	add	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    8001192a:	07b2                	sll	a5,a5,0xc
    8001192c:	00079783          	lh	a5,0(a5)
    lh(addr);
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80011930:	08200593          	li	a1,130
    80011934:	00010617          	auipc	a2,0x10
    80011938:	92460613          	add	a2,a2,-1756 # 80021258 <__func__.1+0x4a60>
    8001193c:	0000b517          	auipc	a0,0xb
    80011940:	1bc50513          	add	a0,a0,444 # 8001caf8 <__func__.1+0x300>
    80011944:	61e090ef          	jal	8001af62 <printf>
    80011948:	00144783          	lbu	a5,1(s0)
    8001194c:	0000b597          	auipc	a1,0xb
    80011950:	18458593          	add	a1,a1,388 # 8001cad0 <__func__.1+0x2d8>
    80011954:	c789                	beqz	a5,8001195e <load_page_fault_4+0x1d2>
    80011956:	6418                	ld	a4,8(s0)
    80011958:	47b5                	li	a5,13
    8001195a:	08f70c63          	beq	a4,a5,800119f2 <load_page_fault_4+0x266>
    8001195e:	0000b517          	auipc	a0,0xb
    80011962:	1b250513          	add	a0,a0,434 # 8001cb10 <__func__.1+0x318>
    80011966:	5fc090ef          	jal	8001af62 <printf>
    8001196a:	00144783          	lbu	a5,1(s0)
    8001196e:	c789                	beqz	a5,80011978 <load_page_fault_4+0x1ec>
    80011970:	6418                	ld	a4,8(s0)
    80011972:	47b5                	li	a5,13
    80011974:	00f70c63          	beq	a4,a5,8001198c <load_page_fault_4+0x200>
    80011978:	0000b517          	auipc	a0,0xb
    8001197c:	1a050513          	add	a0,a0,416 # 8001cb18 <__func__.1+0x320>
    80011980:	5e2090ef          	jal	8001af62 <printf>
    80011984:	02900513          	li	a0,41
    80011988:	4ac080ef          	jal	80019e34 <putchar>
    8001198c:	4529                	li	a0,10
    8001198e:	4a6080ef          	jal	80019e34 <putchar>
    80011992:	c481                	beqz	s1,8001199a <load_page_fault_4+0x20e>
    80011994:	00144483          	lbu	s1,1(s0)
    80011998:	e89d                	bnez	s1,800119ce <load_page_fault_4+0x242>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001199a:	000807b7          	lui	a5,0x80
    8001199e:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800119a2:	4481                	li	s1,0

    TEST_END();
    800119a4:	0000b597          	auipc	a1,0xb
    800119a8:	12c58593          	add	a1,a1,300 # 8001cad0 <__func__.1+0x2d8>
    800119ac:	0000b517          	auipc	a0,0xb
    800119b0:	1cc50513          	add	a0,a0,460 # 8001cb78 <__func__.1+0x380>
    800119b4:	5ae090ef          	jal	8001af62 <printf>
    800119b8:	4511                	li	a0,4
    800119ba:	924ef0ef          	jal	80000ade <goto_priv>
    800119be:	969ef0ef          	jal	80001326 <reset_state>

}
    800119c2:	60e2                	ld	ra,24(sp)
    800119c4:	6442                	ld	s0,16(sp)
    800119c6:	8526                	mv	a0,s1
    800119c8:	64a2                	ld	s1,8(sp)
    800119ca:	6105                	add	sp,sp,32
    800119cc:	8082                	ret
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800119ce:	6418                	ld	a4,8(s0)
    800119d0:	47b5                	li	a5,13
    800119d2:	fcf714e3          	bne	a4,a5,8001199a <load_page_fault_4+0x20e>
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800119d6:	000807b7          	lui	a5,0x80
    800119da:	1007b073          	csrc	sstatus,a5
    TEST_END();
    800119de:	0000b597          	auipc	a1,0xb
    800119e2:	0e258593          	add	a1,a1,226 # 8001cac0 <__func__.1+0x2c8>
    800119e6:	b7d9                	j	800119ac <load_page_fault_4+0x220>
    TEST_ASSERT("vs mode ld when sstatus.mxr=0 and pte.r=0 leads to LPF",
    800119e8:	6404                	ld	s1,8(s0)
    800119ea:	14cd                	add	s1,s1,-13
    800119ec:	0014b493          	seqz	s1,s1
    800119f0:	bf01                	j	80011900 <load_page_fault_4+0x174>
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800119f2:	0000b597          	auipc	a1,0xb
    800119f6:	0ce58593          	add	a1,a1,206 # 8001cac0 <__func__.1+0x2c8>
    800119fa:	b795                	j	8001195e <load_page_fault_4+0x1d2>
    TEST_ASSERT("vs mode lb when pte.v=0 leads to LPF",
    800119fc:	0000b597          	auipc	a1,0xb
    80011a00:	0c458593          	add	a1,a1,196 # 8001cac0 <__func__.1+0x2c8>
    80011a04:	bd39                	j	80011822 <load_page_fault_4+0x96>
    TEST_ASSERT("vs mode ld when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80011a06:	0000b597          	auipc	a1,0xb
    80011a0a:	0ba58593          	add	a1,a1,186 # 8001cac0 <__func__.1+0x2c8>
    80011a0e:	bd4d                	j	800118c0 <load_page_fault_4+0x134>

0000000080011a10 <load_page_fault_5>:

bool load_page_fault_5(){
    80011a10:	1101                	add	sp,sp,-32

    TEST_START();
    80011a12:	0000a597          	auipc	a1,0xa
    80011a16:	3b658593          	add	a1,a1,950 # 8001bdc8 <__func__.17>
    80011a1a:	0000b517          	auipc	a0,0xb
    80011a1e:	0c650513          	add	a0,a0,198 # 8001cae0 <__func__.1+0x2e8>
bool load_page_fault_5(){
    80011a22:	ec06                	sd	ra,24(sp)
    80011a24:	e822                	sd	s0,16(sp)
    80011a26:	e426                	sd	s1,8(sp)
    TEST_START();
    80011a28:	53a090ef          	jal	8001af62 <printf>
    80011a2c:	4529                	li	a0,10
    80011a2e:	406080ef          	jal	80019e34 <putchar>


    goto_priv(PRIV_HS);
    80011a32:	450d                	li	a0,3
    80011a34:	8aaef0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80011a38:	ba9ee0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80011a3c:	debee0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80011a40:	4509                	li	a0,2
    80011a42:	89cef0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80011a46:	c6fee0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_M);
    80011a4a:	4511                	li	a0,4
    80011a4c:	892ef0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80011a50:	000407b7          	lui	a5,0x40
    80011a54:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80011a58:	4509                	li	a0,2
    80011a5a:	884ef0ef          	jal	80000ade <goto_priv>

    //执行lbu指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80011a5e:	0ff0000f          	fence
    80011a62:	4785                	li	a5,1
    80011a64:	0002b417          	auipc	s0,0x2b
    80011a68:	5ac40413          	add	s0,s0,1452 # 8003d010 <excpt>
    80011a6c:	00f41023          	sh	a5,0(s0)
    80011a70:	0002b797          	auipc	a5,0x2b
    80011a74:	5c07bc23          	sd	zero,1496(a5) # 8003d048 <excpt+0x38>
    80011a78:	0ff0000f          	fence
LOAD_INSTRUCTION(lbu, "lbu", uint8_t);
    80011a7c:	000807b7          	lui	a5,0x80
    80011a80:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80011a82:	07b6                	sll	a5,a5,0xd
    80011a84:	0007c783          	lbu	a5,0(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    lbu(addr);
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    80011a88:	08200593          	li	a1,130
    80011a8c:	00010617          	auipc	a2,0x10
    80011a90:	81460613          	add	a2,a2,-2028 # 800212a0 <__func__.1+0x4aa8>
    80011a94:	0000b517          	auipc	a0,0xb
    80011a98:	06450513          	add	a0,a0,100 # 8001caf8 <__func__.1+0x300>
    80011a9c:	4c6090ef          	jal	8001af62 <printf>
    80011aa0:	00144783          	lbu	a5,1(s0)
    80011aa4:	0000b597          	auipc	a1,0xb
    80011aa8:	02c58593          	add	a1,a1,44 # 8001cad0 <__func__.1+0x2d8>
    80011aac:	c789                	beqz	a5,80011ab6 <load_page_fault_5+0xa6>
    80011aae:	6418                	ld	a4,8(s0)
    80011ab0:	47b5                	li	a5,13
    80011ab2:	06f70e63          	beq	a4,a5,80011b2e <load_page_fault_5+0x11e>
    80011ab6:	0000b517          	auipc	a0,0xb
    80011aba:	05a50513          	add	a0,a0,90 # 8001cb10 <__func__.1+0x318>
    80011abe:	4a4090ef          	jal	8001af62 <printf>
    80011ac2:	00144783          	lbu	a5,1(s0)
    80011ac6:	c789                	beqz	a5,80011ad0 <load_page_fault_5+0xc0>
    80011ac8:	6418                	ld	a4,8(s0)
    80011aca:	47b5                	li	a5,13
    80011acc:	00f70c63          	beq	a4,a5,80011ae4 <load_page_fault_5+0xd4>
    80011ad0:	0000b517          	auipc	a0,0xb
    80011ad4:	04850513          	add	a0,a0,72 # 8001cb18 <__func__.1+0x320>
    80011ad8:	48a090ef          	jal	8001af62 <printf>
    80011adc:	02900513          	li	a0,41
    80011ae0:	354080ef          	jal	80019e34 <putchar>
    80011ae4:	4529                	li	a0,10
    80011ae6:	34e080ef          	jal	80019e34 <putchar>
    80011aea:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80011aee:	0000b597          	auipc	a1,0xb
    80011af2:	fe258593          	add	a1,a1,-30 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    80011af6:	c491                	beqz	s1,80011b02 <load_page_fault_5+0xf2>
    80011af8:	6418                	ld	a4,8(s0)
    80011afa:	47b5                	li	a5,13
    80011afc:	02f70463          	beq	a4,a5,80011b24 <load_page_fault_5+0x114>
    80011b00:	4481                	li	s1,0
    TEST_END();
    80011b02:	0000b517          	auipc	a0,0xb
    80011b06:	07650513          	add	a0,a0,118 # 8001cb78 <__func__.1+0x380>
    80011b0a:	458090ef          	jal	8001af62 <printf>
    80011b0e:	4511                	li	a0,4
    80011b10:	fcfee0ef          	jal	80000ade <goto_priv>
    80011b14:	813ef0ef          	jal	80001326 <reset_state>
}
    80011b18:	60e2                	ld	ra,24(sp)
    80011b1a:	6442                	ld	s0,16(sp)
    80011b1c:	8526                	mv	a0,s1
    80011b1e:	64a2                	ld	s1,8(sp)
    80011b20:	6105                	add	sp,sp,32
    80011b22:	8082                	ret
    TEST_END();
    80011b24:	0000b597          	auipc	a1,0xb
    80011b28:	f9c58593          	add	a1,a1,-100 # 8001cac0 <__func__.1+0x2c8>
    80011b2c:	bfd9                	j	80011b02 <load_page_fault_5+0xf2>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    80011b2e:	0000b597          	auipc	a1,0xb
    80011b32:	f9258593          	add	a1,a1,-110 # 8001cac0 <__func__.1+0x2c8>
    80011b36:	b741                	j	80011ab6 <load_page_fault_5+0xa6>

0000000080011b38 <load_page_fault_6>:

bool load_page_fault_6(){
    80011b38:	1141                	add	sp,sp,-16

    TEST_START();
    80011b3a:	0000a597          	auipc	a1,0xa
    80011b3e:	2a658593          	add	a1,a1,678 # 8001bde0 <__func__.16>
    80011b42:	0000b517          	auipc	a0,0xb
    80011b46:	f9e50513          	add	a0,a0,-98 # 8001cae0 <__func__.1+0x2e8>
bool load_page_fault_6(){
    80011b4a:	e406                	sd	ra,8(sp)
    80011b4c:	e022                	sd	s0,0(sp)
    TEST_START();
    80011b4e:	414090ef          	jal	8001af62 <printf>
    80011b52:	4529                	li	a0,10
    80011b54:	2e0080ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80011b58:	450d                	li	a0,3
    80011b5a:	f85ee0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80011b5e:	a83ee0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80011b62:	cc5ee0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80011b66:	4509                	li	a0,2
    80011b68:	f77ee0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80011b6c:	b49ee0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_M);
    80011b70:	4511                	li	a0,4
    80011b72:	f6dee0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80011b76:	000407b7          	lui	a5,0x40
    80011b7a:	2007a073          	csrs	vsstatus,a5

    //执行lbu指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_VS);
    80011b7e:	4509                	li	a0,2
    80011b80:	f5fee0ef          	jal	80000ade <goto_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    80011b84:	0ff0000f          	fence
    80011b88:	4785                	li	a5,1
    80011b8a:	0002b417          	auipc	s0,0x2b
    80011b8e:	48640413          	add	s0,s0,1158 # 8003d010 <excpt>
    80011b92:	00f41023          	sh	a5,0(s0)
    80011b96:	0002b797          	auipc	a5,0x2b
    80011b9a:	4a07b923          	sd	zero,1202(a5) # 8003d048 <excpt+0x38>
    80011b9e:	0ff0000f          	fence
    80011ba2:	000807b7          	lui	a5,0x80
    80011ba6:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80011ba8:	07b6                	sll	a5,a5,0xd
    80011baa:	0007c783          	lbu	a5,0(a5)
    lbu(addr);

    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    80011bae:	08200593          	li	a1,130
    80011bb2:	0000f617          	auipc	a2,0xf
    80011bb6:	72e60613          	add	a2,a2,1838 # 800212e0 <__func__.1+0x4ae8>
    80011bba:	0000b517          	auipc	a0,0xb
    80011bbe:	f3e50513          	add	a0,a0,-194 # 8001caf8 <__func__.1+0x300>
    80011bc2:	3a0090ef          	jal	8001af62 <printf>
    80011bc6:	00144783          	lbu	a5,1(s0)
    80011bca:	0000b597          	auipc	a1,0xb
    80011bce:	ef658593          	add	a1,a1,-266 # 8001cac0 <__func__.1+0x2c8>
    80011bd2:	c789                	beqz	a5,80011bdc <load_page_fault_6+0xa4>
    80011bd4:	0000b597          	auipc	a1,0xb
    80011bd8:	efc58593          	add	a1,a1,-260 # 8001cad0 <__func__.1+0x2d8>
    80011bdc:	0000b517          	auipc	a0,0xb
    80011be0:	f3450513          	add	a0,a0,-204 # 8001cb10 <__func__.1+0x318>
    80011be4:	37e090ef          	jal	8001af62 <printf>
    80011be8:	00144783          	lbu	a5,1(s0)
    80011bec:	e3b1                	bnez	a5,80011c30 <load_page_fault_6+0xf8>
    80011bee:	4529                	li	a0,10
    80011bf0:	244080ef          	jal	80019e34 <putchar>
    80011bf4:	00144783          	lbu	a5,1(s0)
    80011bf8:	e795                	bnez	a5,80011c24 <load_page_fault_6+0xec>
    80011bfa:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    80011bfc:	0000b597          	auipc	a1,0xb
    80011c00:	ec458593          	add	a1,a1,-316 # 8001cac0 <__func__.1+0x2c8>
    80011c04:	0000b517          	auipc	a0,0xb
    80011c08:	f7450513          	add	a0,a0,-140 # 8001cb78 <__func__.1+0x380>
    80011c0c:	356090ef          	jal	8001af62 <printf>
    80011c10:	4511                	li	a0,4
    80011c12:	ecdee0ef          	jal	80000ade <goto_priv>
    80011c16:	f10ef0ef          	jal	80001326 <reset_state>
}
    80011c1a:	60a2                	ld	ra,8(sp)
    80011c1c:	8522                	mv	a0,s0
    80011c1e:	6402                	ld	s0,0(sp)
    80011c20:	0141                	add	sp,sp,16
    80011c22:	8082                	ret
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    80011c24:	4401                	li	s0,0
    TEST_END();
    80011c26:	0000b597          	auipc	a1,0xb
    80011c2a:	eaa58593          	add	a1,a1,-342 # 8001cad0 <__func__.1+0x2d8>
    80011c2e:	bfd9                	j	80011c04 <load_page_fault_6+0xcc>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    80011c30:	0000b517          	auipc	a0,0xb
    80011c34:	ee850513          	add	a0,a0,-280 # 8001cb18 <__func__.1+0x320>
    80011c38:	32a090ef          	jal	8001af62 <printf>
    80011c3c:	02900513          	li	a0,41
    80011c40:	1f4080ef          	jal	80019e34 <putchar>
    80011c44:	b76d                	j	80011bee <load_page_fault_6+0xb6>

0000000080011c46 <load_page_fault_7>:


bool load_page_fault_7(){
    80011c46:	1101                	add	sp,sp,-32

    TEST_START();
    80011c48:	0000a597          	auipc	a1,0xa
    80011c4c:	1b058593          	add	a1,a1,432 # 8001bdf8 <__func__.15>
    80011c50:	0000b517          	auipc	a0,0xb
    80011c54:	e9050513          	add	a0,a0,-368 # 8001cae0 <__func__.1+0x2e8>
bool load_page_fault_7(){
    80011c58:	ec06                	sd	ra,24(sp)
    80011c5a:	e822                	sd	s0,16(sp)
    80011c5c:	e426                	sd	s1,8(sp)
    TEST_START();
    80011c5e:	304090ef          	jal	8001af62 <printf>
    80011c62:	4529                	li	a0,10
    80011c64:	1d0080ef          	jal	80019e34 <putchar>


    goto_priv(PRIV_HS);
    80011c68:	450d                	li	a0,3
    80011c6a:	e75ee0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80011c6e:	973ee0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80011c72:	bb5ee0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80011c76:	4509                	li	a0,2
    80011c78:	e67ee0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80011c7c:	a39ee0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_M);
    80011c80:	4511                	li	a0,4
    80011c82:	e5dee0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80011c86:	000407b7          	lui	a5,0x40
    80011c8a:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    80011c8e:	450d                	li	a0,3
    80011c90:	e4fee0ef          	jal	80000ade <goto_priv>

    //执行hlvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80011c94:	0ff0000f          	fence
    80011c98:	4785                	li	a5,1
    80011c9a:	0002b417          	auipc	s0,0x2b
    80011c9e:	37640413          	add	s0,s0,886 # 8003d010 <excpt>
    80011ca2:	00f41023          	sh	a5,0(s0)
    80011ca6:	0002b797          	auipc	a5,0x2b
    80011caa:	3a07b123          	sd	zero,930(a5) # 8003d048 <excpt+0x38>
    80011cae:	0ff0000f          	fence
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    80011cb2:	000807b7          	lui	a5,0x80
    80011cb6:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80011cb8:	07b6                	sll	a5,a5,0xd
    80011cba:	0007b783          	ld	a5,0(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    ld(addr);
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    80011cbe:	08200593          	li	a1,130
    80011cc2:	0000f617          	auipc	a2,0xf
    80011cc6:	65660613          	add	a2,a2,1622 # 80021318 <__func__.1+0x4b20>
    80011cca:	0000b517          	auipc	a0,0xb
    80011cce:	e2e50513          	add	a0,a0,-466 # 8001caf8 <__func__.1+0x300>
    80011cd2:	290090ef          	jal	8001af62 <printf>
    80011cd6:	00144783          	lbu	a5,1(s0)
    80011cda:	0000b597          	auipc	a1,0xb
    80011cde:	df658593          	add	a1,a1,-522 # 8001cad0 <__func__.1+0x2d8>
    80011ce2:	c789                	beqz	a5,80011cec <load_page_fault_7+0xa6>
    80011ce4:	6418                	ld	a4,8(s0)
    80011ce6:	47b5                	li	a5,13
    80011ce8:	06f70e63          	beq	a4,a5,80011d64 <load_page_fault_7+0x11e>
    80011cec:	0000b517          	auipc	a0,0xb
    80011cf0:	e2450513          	add	a0,a0,-476 # 8001cb10 <__func__.1+0x318>
    80011cf4:	26e090ef          	jal	8001af62 <printf>
    80011cf8:	00144783          	lbu	a5,1(s0)
    80011cfc:	c789                	beqz	a5,80011d06 <load_page_fault_7+0xc0>
    80011cfe:	6418                	ld	a4,8(s0)
    80011d00:	47b5                	li	a5,13
    80011d02:	00f70c63          	beq	a4,a5,80011d1a <load_page_fault_7+0xd4>
    80011d06:	0000b517          	auipc	a0,0xb
    80011d0a:	e1250513          	add	a0,a0,-494 # 8001cb18 <__func__.1+0x320>
    80011d0e:	254090ef          	jal	8001af62 <printf>
    80011d12:	02900513          	li	a0,41
    80011d16:	11e080ef          	jal	80019e34 <putchar>
    80011d1a:	4529                	li	a0,10
    80011d1c:	118080ef          	jal	80019e34 <putchar>
    80011d20:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80011d24:	0000b597          	auipc	a1,0xb
    80011d28:	dac58593          	add	a1,a1,-596 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    80011d2c:	c491                	beqz	s1,80011d38 <load_page_fault_7+0xf2>
    80011d2e:	6418                	ld	a4,8(s0)
    80011d30:	47b5                	li	a5,13
    80011d32:	02f70463          	beq	a4,a5,80011d5a <load_page_fault_7+0x114>
    80011d36:	4481                	li	s1,0
    TEST_END();
    80011d38:	0000b517          	auipc	a0,0xb
    80011d3c:	e4050513          	add	a0,a0,-448 # 8001cb78 <__func__.1+0x380>
    80011d40:	222090ef          	jal	8001af62 <printf>
    80011d44:	4511                	li	a0,4
    80011d46:	d99ee0ef          	jal	80000ade <goto_priv>
    80011d4a:	ddcef0ef          	jal	80001326 <reset_state>
}
    80011d4e:	60e2                	ld	ra,24(sp)
    80011d50:	6442                	ld	s0,16(sp)
    80011d52:	8526                	mv	a0,s1
    80011d54:	64a2                	ld	s1,8(sp)
    80011d56:	6105                	add	sp,sp,32
    80011d58:	8082                	ret
    TEST_END();
    80011d5a:	0000b597          	auipc	a1,0xb
    80011d5e:	d6658593          	add	a1,a1,-666 # 8001cac0 <__func__.1+0x2c8>
    80011d62:	bfd9                	j	80011d38 <load_page_fault_7+0xf2>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    80011d64:	0000b597          	auipc	a1,0xb
    80011d68:	d5c58593          	add	a1,a1,-676 # 8001cac0 <__func__.1+0x2c8>
    80011d6c:	b741                	j	80011cec <load_page_fault_7+0xa6>

0000000080011d6e <load_page_fault_8>:

bool load_page_fault_8(){
    80011d6e:	1141                	add	sp,sp,-16

    TEST_START();
    80011d70:	0000a597          	auipc	a1,0xa
    80011d74:	0a058593          	add	a1,a1,160 # 8001be10 <__func__.14>
    80011d78:	0000b517          	auipc	a0,0xb
    80011d7c:	d6850513          	add	a0,a0,-664 # 8001cae0 <__func__.1+0x2e8>
bool load_page_fault_8(){
    80011d80:	e406                	sd	ra,8(sp)
    80011d82:	e022                	sd	s0,0(sp)
    TEST_START();
    80011d84:	1de090ef          	jal	8001af62 <printf>
    80011d88:	4529                	li	a0,10
    80011d8a:	0aa080ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80011d8e:	450d                	li	a0,3
    80011d90:	d4fee0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80011d94:	84dee0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80011d98:	a8fee0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80011d9c:	4509                	li	a0,2
    80011d9e:	d41ee0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80011da2:	913ee0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_M);
    80011da6:	4511                	li	a0,4
    80011da8:	d37ee0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    80011dac:	000407b7          	lui	a5,0x40
    80011db0:	3007a073          	csrs	mstatus,a5

    //执行ld指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_HS);
    80011db4:	450d                	li	a0,3
    80011db6:	d29ee0ef          	jal	80000ade <goto_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    80011dba:	0ff0000f          	fence
    80011dbe:	4785                	li	a5,1
    80011dc0:	0002b417          	auipc	s0,0x2b
    80011dc4:	25040413          	add	s0,s0,592 # 8003d010 <excpt>
    80011dc8:	00f41023          	sh	a5,0(s0)
    80011dcc:	0002b797          	auipc	a5,0x2b
    80011dd0:	2607be23          	sd	zero,636(a5) # 8003d048 <excpt+0x38>
    80011dd4:	0ff0000f          	fence
    80011dd8:	000807b7          	lui	a5,0x80
    80011ddc:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80011dde:	07b6                	sll	a5,a5,0xd
    80011de0:	0007b783          	ld	a5,0(a5)
    ld(addr);

    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    80011de4:	08200593          	li	a1,130
    80011de8:	0000f617          	auipc	a2,0xf
    80011dec:	56860613          	add	a2,a2,1384 # 80021350 <__func__.1+0x4b58>
    80011df0:	0000b517          	auipc	a0,0xb
    80011df4:	d0850513          	add	a0,a0,-760 # 8001caf8 <__func__.1+0x300>
    80011df8:	16a090ef          	jal	8001af62 <printf>
    80011dfc:	00144783          	lbu	a5,1(s0)
    80011e00:	0000b597          	auipc	a1,0xb
    80011e04:	cc058593          	add	a1,a1,-832 # 8001cac0 <__func__.1+0x2c8>
    80011e08:	c789                	beqz	a5,80011e12 <load_page_fault_8+0xa4>
    80011e0a:	0000b597          	auipc	a1,0xb
    80011e0e:	cc658593          	add	a1,a1,-826 # 8001cad0 <__func__.1+0x2d8>
    80011e12:	0000b517          	auipc	a0,0xb
    80011e16:	cfe50513          	add	a0,a0,-770 # 8001cb10 <__func__.1+0x318>
    80011e1a:	148090ef          	jal	8001af62 <printf>
    80011e1e:	00144783          	lbu	a5,1(s0)
    80011e22:	e3b1                	bnez	a5,80011e66 <load_page_fault_8+0xf8>
    80011e24:	4529                	li	a0,10
    80011e26:	00e080ef          	jal	80019e34 <putchar>
    80011e2a:	00144783          	lbu	a5,1(s0)
    80011e2e:	e795                	bnez	a5,80011e5a <load_page_fault_8+0xec>
    80011e30:	4405                	li	s0,1



    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80011e32:	0000b597          	auipc	a1,0xb
    80011e36:	c8e58593          	add	a1,a1,-882 # 8001cac0 <__func__.1+0x2c8>
    80011e3a:	0000b517          	auipc	a0,0xb
    80011e3e:	d3e50513          	add	a0,a0,-706 # 8001cb78 <__func__.1+0x380>
    80011e42:	120090ef          	jal	8001af62 <printf>
    80011e46:	4511                	li	a0,4
    80011e48:	c97ee0ef          	jal	80000ade <goto_priv>
    80011e4c:	cdaef0ef          	jal	80001326 <reset_state>
}
    80011e50:	60a2                	ld	ra,8(sp)
    80011e52:	8522                	mv	a0,s0
    80011e54:	6402                	ld	s0,0(sp)
    80011e56:	0141                	add	sp,sp,16
    80011e58:	8082                	ret
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    80011e5a:	4401                	li	s0,0
    TEST_END();
    80011e5c:	0000b597          	auipc	a1,0xb
    80011e60:	c7458593          	add	a1,a1,-908 # 8001cad0 <__func__.1+0x2d8>
    80011e64:	bfd9                	j	80011e3a <load_page_fault_8+0xcc>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    80011e66:	0000b517          	auipc	a0,0xb
    80011e6a:	cb250513          	add	a0,a0,-846 # 8001cb18 <__func__.1+0x320>
    80011e6e:	0f4090ef          	jal	8001af62 <printf>
    80011e72:	02900513          	li	a0,41
    80011e76:	7bf070ef          	jal	80019e34 <putchar>
    80011e7a:	b76d                	j	80011e24 <load_page_fault_8+0xb6>

0000000080011e7c <store_page_fault_1>:





bool store_page_fault_1(){
    80011e7c:	1101                	add	sp,sp,-32

    TEST_START();
    80011e7e:	0000a597          	auipc	a1,0xa
    80011e82:	faa58593          	add	a1,a1,-86 # 8001be28 <__func__.13>
    80011e86:	0000b517          	auipc	a0,0xb
    80011e8a:	c5a50513          	add	a0,a0,-934 # 8001cae0 <__func__.1+0x2e8>
bool store_page_fault_1(){
    80011e8e:	ec06                	sd	ra,24(sp)
    80011e90:	e822                	sd	s0,16(sp)
    80011e92:	e426                	sd	s1,8(sp)
    TEST_START();
    80011e94:	0ce090ef          	jal	8001af62 <printf>
    80011e98:	4529                	li	a0,10
    80011e9a:	79b070ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80011e9e:	450d                	li	a0,3
    80011ea0:	c3fee0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80011ea4:	f3cee0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80011ea8:	97fee0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80011eac:	4509                	li	a0,2
    80011eae:	c31ee0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80011eb2:	803ee0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80011eb6:	450d                	li	a0,3
    80011eb8:	c27ee0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80011ebc:	4509                	li	a0,2
    80011ebe:	b45ee0ef          	jal	80000a02 <set_prev_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80011ec2:	0ff0000f          	fence
    80011ec6:	4785                	li	a5,1
    80011ec8:	0002b417          	auipc	s0,0x2b
    80011ecc:	14840413          	add	s0,s0,328 # 8003d010 <excpt>
    80011ed0:	00f41023          	sh	a5,0(s0)
    80011ed4:	0002b797          	auipc	a5,0x2b
    80011ed8:	1607ba23          	sd	zero,372(a5) # 8003d048 <excpt+0x38>
    80011edc:	0ff0000f          	fence
    asm volatile(
    80011ee0:	37ab77b7          	lui	a5,0x37ab7
    80011ee4:	078a                	sll	a5,a5,0x2
    80011ee6:	40019737          	lui	a4,0x40019
    80011eea:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80011eee:	070a                	sll	a4,a4,0x2
    80011ef0:	6ef74073          	.4byte	0x6ef74073

    addr = hs_page_base(VSI_GI);
    hsvd(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when pte.v=0 leads to LPF",
    80011ef4:	08200593          	li	a1,130
    80011ef8:	0000f617          	auipc	a2,0xf
    80011efc:	49060613          	add	a2,a2,1168 # 80021388 <__func__.1+0x4b90>
    80011f00:	0000b517          	auipc	a0,0xb
    80011f04:	bf850513          	add	a0,a0,-1032 # 8001caf8 <__func__.1+0x300>
    80011f08:	05a090ef          	jal	8001af62 <printf>
    80011f0c:	00144783          	lbu	a5,1(s0)
    80011f10:	0000b597          	auipc	a1,0xb
    80011f14:	bc058593          	add	a1,a1,-1088 # 8001cad0 <__func__.1+0x2d8>
    80011f18:	c789                	beqz	a5,80011f22 <store_page_fault_1+0xa6>
    80011f1a:	6418                	ld	a4,8(s0)
    80011f1c:	47bd                	li	a5,15
    80011f1e:	1ef70663          	beq	a4,a5,8001210a <store_page_fault_1+0x28e>
    80011f22:	0000b517          	auipc	a0,0xb
    80011f26:	bee50513          	add	a0,a0,-1042 # 8001cb10 <__func__.1+0x318>
    80011f2a:	038090ef          	jal	8001af62 <printf>
    80011f2e:	00144783          	lbu	a5,1(s0)
    80011f32:	c789                	beqz	a5,80011f3c <store_page_fault_1+0xc0>
    80011f34:	6418                	ld	a4,8(s0)
    80011f36:	47bd                	li	a5,15
    80011f38:	00f70c63          	beq	a4,a5,80011f50 <store_page_fault_1+0xd4>
    80011f3c:	0000b517          	auipc	a0,0xb
    80011f40:	bdc50513          	add	a0,a0,-1060 # 8001cb18 <__func__.1+0x320>
    80011f44:	01e090ef          	jal	8001af62 <printf>
    80011f48:	02900513          	li	a0,41
    80011f4c:	6e9070ef          	jal	80019e34 <putchar>
    80011f50:	4529                	li	a0,10
    80011f52:	6e3070ef          	jal	80019e34 <putchar>
    80011f56:	00144783          	lbu	a5,1(s0)
    80011f5a:	4481                	li	s1,0
    80011f5c:	c789                	beqz	a5,80011f66 <store_page_fault_1+0xea>
    80011f5e:	6404                	ld	s1,8(s0)
    80011f60:	14c5                	add	s1,s1,-15
    80011f62:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SPF
    );


    //执行store指令时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    TEST_SETUP_EXCEPT();
    80011f66:	0ff0000f          	fence
    80011f6a:	4785                	li	a5,1
    80011f6c:	00f41023          	sh	a5,0(s0)
    80011f70:	0002b797          	auipc	a5,0x2b
    80011f74:	0c07bc23          	sd	zero,216(a5) # 8003d048 <excpt+0x38>
    80011f78:	0ff0000f          	fence
    addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80011f7c:	000807b7          	lui	a5,0x80
    80011f80:	1007b073          	csrc	sstatus,a5
    asm volatile(
    80011f84:	37ab77b7          	lui	a5,0x37ab7
    80011f88:	00100737          	lui	a4,0x100
    80011f8c:	078a                	sll	a5,a5,0x2
    80011f8e:	05f70713          	add	a4,a4,95 # 10005f <STACK_SIZE+0x5f>
    80011f92:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80011f96:	0732                	sll	a4,a4,0xc
    80011f98:	62f74073          	.4byte	0x62f74073
    hsvb(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvb when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80011f9c:	08200593          	li	a1,130
    80011fa0:	0000f617          	auipc	a2,0xf
    80011fa4:	41060613          	add	a2,a2,1040 # 800213b0 <__func__.1+0x4bb8>
    80011fa8:	0000b517          	auipc	a0,0xb
    80011fac:	b5050513          	add	a0,a0,-1200 # 8001caf8 <__func__.1+0x300>
    80011fb0:	7b3080ef          	jal	8001af62 <printf>
    80011fb4:	00144783          	lbu	a5,1(s0)
    80011fb8:	0000b597          	auipc	a1,0xb
    80011fbc:	b1858593          	add	a1,a1,-1256 # 8001cad0 <__func__.1+0x2d8>
    80011fc0:	c789                	beqz	a5,80011fca <store_page_fault_1+0x14e>
    80011fc2:	6418                	ld	a4,8(s0)
    80011fc4:	47bd                	li	a5,15
    80011fc6:	14f70763          	beq	a4,a5,80012114 <store_page_fault_1+0x298>
    80011fca:	0000b517          	auipc	a0,0xb
    80011fce:	b4650513          	add	a0,a0,-1210 # 8001cb10 <__func__.1+0x318>
    80011fd2:	791080ef          	jal	8001af62 <printf>
    80011fd6:	00144783          	lbu	a5,1(s0)
    80011fda:	c789                	beqz	a5,80011fe4 <store_page_fault_1+0x168>
    80011fdc:	6418                	ld	a4,8(s0)
    80011fde:	47bd                	li	a5,15
    80011fe0:	00f70c63          	beq	a4,a5,80011ff8 <store_page_fault_1+0x17c>
    80011fe4:	0000b517          	auipc	a0,0xb
    80011fe8:	b3450513          	add	a0,a0,-1228 # 8001cb18 <__func__.1+0x320>
    80011fec:	777080ef          	jal	8001af62 <printf>
    80011ff0:	02900513          	li	a0,41
    80011ff4:	641070ef          	jal	80019e34 <putchar>
    80011ff8:	4529                	li	a0,10
    80011ffa:	63b070ef          	jal	80019e34 <putchar>
    80011ffe:	c491                	beqz	s1,8001200a <store_page_fault_1+0x18e>
    80012000:	00144783          	lbu	a5,1(s0)
    80012004:	4481                	li	s1,0
    80012006:	0e079863          	bnez	a5,800120f6 <store_page_fault_1+0x27a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行store指令时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    8001200a:	0ff0000f          	fence
    8001200e:	4785                	li	a5,1
    80012010:	00f41023          	sh	a5,0(s0)
    80012014:	0002b797          	auipc	a5,0x2b
    80012018:	0207ba23          	sd	zero,52(a5) # 8003d048 <excpt+0x38>
    8001201c:	0ff0000f          	fence
    addr = hs_page_base(VSV_GV);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80012020:	000807b7          	lui	a5,0x80
    80012024:	1007a073          	csrs	sstatus,a5
    asm volatile(
    80012028:	37ab77b7          	lui	a5,0x37ab7
    8001202c:	00100737          	lui	a4,0x100
    80012030:	078a                	sll	a5,a5,0x2
    80012032:	0775                	add	a4,a4,29 # 10001d <STACK_SIZE+0x1d>
    80012034:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80012038:	0732                	sll	a4,a4,0xc
    8001203a:	66f74073          	.4byte	0x66f74073
    hsvh(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001203e:	08200593          	li	a1,130
    80012042:	0000f617          	auipc	a2,0xf
    80012046:	3ae60613          	add	a2,a2,942 # 800213f0 <__func__.1+0x4bf8>
    8001204a:	0000b517          	auipc	a0,0xb
    8001204e:	aae50513          	add	a0,a0,-1362 # 8001caf8 <__func__.1+0x300>
    80012052:	711080ef          	jal	8001af62 <printf>
    80012056:	00144783          	lbu	a5,1(s0)
    8001205a:	0000b597          	auipc	a1,0xb
    8001205e:	a7658593          	add	a1,a1,-1418 # 8001cad0 <__func__.1+0x2d8>
    80012062:	c789                	beqz	a5,8001206c <store_page_fault_1+0x1f0>
    80012064:	6418                	ld	a4,8(s0)
    80012066:	47bd                	li	a5,15
    80012068:	08f70c63          	beq	a4,a5,80012100 <store_page_fault_1+0x284>
    8001206c:	0000b517          	auipc	a0,0xb
    80012070:	aa450513          	add	a0,a0,-1372 # 8001cb10 <__func__.1+0x318>
    80012074:	6ef080ef          	jal	8001af62 <printf>
    80012078:	00144783          	lbu	a5,1(s0)
    8001207c:	c789                	beqz	a5,80012086 <store_page_fault_1+0x20a>
    8001207e:	6418                	ld	a4,8(s0)
    80012080:	47bd                	li	a5,15
    80012082:	00f70c63          	beq	a4,a5,8001209a <store_page_fault_1+0x21e>
    80012086:	0000b517          	auipc	a0,0xb
    8001208a:	a9250513          	add	a0,a0,-1390 # 8001cb18 <__func__.1+0x320>
    8001208e:	6d5080ef          	jal	8001af62 <printf>
    80012092:	02900513          	li	a0,41
    80012096:	59f070ef          	jal	80019e34 <putchar>
    8001209a:	4529                	li	a0,10
    8001209c:	599070ef          	jal	80019e34 <putchar>
    800120a0:	c481                	beqz	s1,800120a8 <store_page_fault_1+0x22c>
    800120a2:	00144483          	lbu	s1,1(s0)
    800120a6:	e89d                	bnez	s1,800120dc <store_page_fault_1+0x260>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800120a8:	000807b7          	lui	a5,0x80
    800120ac:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs mode hsvh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800120b0:	4481                	li	s1,0

    TEST_END();
    800120b2:	0000b597          	auipc	a1,0xb
    800120b6:	a1e58593          	add	a1,a1,-1506 # 8001cad0 <__func__.1+0x2d8>
    800120ba:	0000b517          	auipc	a0,0xb
    800120be:	abe50513          	add	a0,a0,-1346 # 8001cb78 <__func__.1+0x380>
    800120c2:	6a1080ef          	jal	8001af62 <printf>
    800120c6:	4511                	li	a0,4
    800120c8:	a17ee0ef          	jal	80000ade <goto_priv>
    800120cc:	a5aef0ef          	jal	80001326 <reset_state>
}
    800120d0:	60e2                	ld	ra,24(sp)
    800120d2:	6442                	ld	s0,16(sp)
    800120d4:	8526                	mv	a0,s1
    800120d6:	64a2                	ld	s1,8(sp)
    800120d8:	6105                	add	sp,sp,32
    800120da:	8082                	ret
    TEST_ASSERT("hs mode hsvh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800120dc:	6418                	ld	a4,8(s0)
    800120de:	47bd                	li	a5,15
    800120e0:	fcf714e3          	bne	a4,a5,800120a8 <store_page_fault_1+0x22c>
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800120e4:	000807b7          	lui	a5,0x80
    800120e8:	1007b073          	csrc	sstatus,a5
    TEST_END();
    800120ec:	0000b597          	auipc	a1,0xb
    800120f0:	9d458593          	add	a1,a1,-1580 # 8001cac0 <__func__.1+0x2c8>
    800120f4:	b7d9                	j	800120ba <store_page_fault_1+0x23e>
    TEST_ASSERT("hs mode hsvb when sstatus.mxr=0 and pte.r=0 leads to LPF",
    800120f6:	6404                	ld	s1,8(s0)
    800120f8:	14c5                	add	s1,s1,-15
    800120fa:	0014b493          	seqz	s1,s1
    800120fe:	b731                	j	8001200a <store_page_fault_1+0x18e>
    TEST_ASSERT("hs mode hsvh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80012100:	0000b597          	auipc	a1,0xb
    80012104:	9c058593          	add	a1,a1,-1600 # 8001cac0 <__func__.1+0x2c8>
    80012108:	b795                	j	8001206c <store_page_fault_1+0x1f0>
    TEST_ASSERT("hs mode hsvd when pte.v=0 leads to LPF",
    8001210a:	0000b597          	auipc	a1,0xb
    8001210e:	9b658593          	add	a1,a1,-1610 # 8001cac0 <__func__.1+0x2c8>
    80012112:	bd01                	j	80011f22 <store_page_fault_1+0xa6>
    TEST_ASSERT("hs mode hsvb when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80012114:	0000b597          	auipc	a1,0xb
    80012118:	9ac58593          	add	a1,a1,-1620 # 8001cac0 <__func__.1+0x2c8>
    8001211c:	b57d                	j	80011fca <store_page_fault_1+0x14e>

000000008001211e <store_page_fault_2>:

bool store_page_fault_2(){
    8001211e:	1101                	add	sp,sp,-32

    TEST_START();
    80012120:	0000a597          	auipc	a1,0xa
    80012124:	d2058593          	add	a1,a1,-736 # 8001be40 <__func__.12>
    80012128:	0000b517          	auipc	a0,0xb
    8001212c:	9b850513          	add	a0,a0,-1608 # 8001cae0 <__func__.1+0x2e8>
bool store_page_fault_2(){
    80012130:	ec06                	sd	ra,24(sp)
    80012132:	e822                	sd	s0,16(sp)
    80012134:	e426                	sd	s1,8(sp)
    TEST_START();
    80012136:	62d080ef          	jal	8001af62 <printf>
    8001213a:	4529                	li	a0,10
    8001213c:	4f9070ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80012140:	450d                	li	a0,3
    80012142:	99dee0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80012146:	c9aee0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001214a:	edcee0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    8001214e:	4509                	li	a0,2
    80012150:	98fee0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80012154:	d60ee0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_M);
    80012158:	4511                	li	a0,4
    8001215a:	985ee0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    8001215e:	000407b7          	lui	a5,0x40
    80012162:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    80012166:	450d                	li	a0,3
    80012168:	977ee0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    8001216c:	4509                	li	a0,2
    8001216e:	895ee0ef          	jal	80000a02 <set_prev_priv>
    //执行hsvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80012172:	0ff0000f          	fence
    80012176:	4785                	li	a5,1
    80012178:	0002b417          	auipc	s0,0x2b
    8001217c:	e9840413          	add	s0,s0,-360 # 8003d010 <excpt>
    80012180:	00f41023          	sh	a5,0(s0)
    80012184:	0002b797          	auipc	a5,0x2b
    80012188:	ec07b223          	sd	zero,-316(a5) # 8003d048 <excpt+0x38>
    8001218c:	0ff0000f          	fence
    asm volatile(
    80012190:	37ab77b7          	lui	a5,0x37ab7
    80012194:	00080737          	lui	a4,0x80
    80012198:	078a                	sll	a5,a5,0x2
    8001219a:	0765                	add	a4,a4,25 # 80019 <_test_table_size+0x80018>
    8001219c:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800121a0:	0736                	sll	a4,a4,0xd
    800121a2:	6ef74073          	.4byte	0x6ef74073
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    hsvd(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    800121a6:	08200593          	li	a1,130
    800121aa:	0000f617          	auipc	a2,0xf
    800121ae:	28e60613          	add	a2,a2,654 # 80021438 <__func__.1+0x4c40>
    800121b2:	0000b517          	auipc	a0,0xb
    800121b6:	94650513          	add	a0,a0,-1722 # 8001caf8 <__func__.1+0x300>
    800121ba:	5a9080ef          	jal	8001af62 <printf>
    800121be:	00144783          	lbu	a5,1(s0)
    800121c2:	0000b597          	auipc	a1,0xb
    800121c6:	90e58593          	add	a1,a1,-1778 # 8001cad0 <__func__.1+0x2d8>
    800121ca:	c789                	beqz	a5,800121d4 <store_page_fault_2+0xb6>
    800121cc:	6418                	ld	a4,8(s0)
    800121ce:	47bd                	li	a5,15
    800121d0:	06f70e63          	beq	a4,a5,8001224c <store_page_fault_2+0x12e>
    800121d4:	0000b517          	auipc	a0,0xb
    800121d8:	93c50513          	add	a0,a0,-1732 # 8001cb10 <__func__.1+0x318>
    800121dc:	587080ef          	jal	8001af62 <printf>
    800121e0:	00144783          	lbu	a5,1(s0)
    800121e4:	c789                	beqz	a5,800121ee <store_page_fault_2+0xd0>
    800121e6:	6418                	ld	a4,8(s0)
    800121e8:	47bd                	li	a5,15
    800121ea:	00f70c63          	beq	a4,a5,80012202 <store_page_fault_2+0xe4>
    800121ee:	0000b517          	auipc	a0,0xb
    800121f2:	92a50513          	add	a0,a0,-1750 # 8001cb18 <__func__.1+0x320>
    800121f6:	56d080ef          	jal	8001af62 <printf>
    800121fa:	02900513          	li	a0,41
    800121fe:	437070ef          	jal	80019e34 <putchar>
    80012202:	4529                	li	a0,10
    80012204:	431070ef          	jal	80019e34 <putchar>
    80012208:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    8001220c:	0000b597          	auipc	a1,0xb
    80012210:	8c458593          	add	a1,a1,-1852 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    80012214:	c491                	beqz	s1,80012220 <store_page_fault_2+0x102>
    80012216:	6418                	ld	a4,8(s0)
    80012218:	47bd                	li	a5,15
    8001221a:	02f70463          	beq	a4,a5,80012242 <store_page_fault_2+0x124>
    8001221e:	4481                	li	s1,0
    TEST_END();
    80012220:	0000b517          	auipc	a0,0xb
    80012224:	95850513          	add	a0,a0,-1704 # 8001cb78 <__func__.1+0x380>
    80012228:	53b080ef          	jal	8001af62 <printf>
    8001222c:	4511                	li	a0,4
    8001222e:	8b1ee0ef          	jal	80000ade <goto_priv>
    80012232:	8f4ef0ef          	jal	80001326 <reset_state>
}
    80012236:	60e2                	ld	ra,24(sp)
    80012238:	6442                	ld	s0,16(sp)
    8001223a:	8526                	mv	a0,s1
    8001223c:	64a2                	ld	s1,8(sp)
    8001223e:	6105                	add	sp,sp,32
    80012240:	8082                	ret
    TEST_END();
    80012242:	0000b597          	auipc	a1,0xb
    80012246:	87e58593          	add	a1,a1,-1922 # 8001cac0 <__func__.1+0x2c8>
    8001224a:	bfd9                	j	80012220 <store_page_fault_2+0x102>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    8001224c:	0000b597          	auipc	a1,0xb
    80012250:	87458593          	add	a1,a1,-1932 # 8001cac0 <__func__.1+0x2c8>
    80012254:	b741                	j	800121d4 <store_page_fault_2+0xb6>

0000000080012256 <store_page_fault_3>:

bool store_page_fault_3(){
    80012256:	1141                	add	sp,sp,-16

    TEST_START();
    80012258:	0000a597          	auipc	a1,0xa
    8001225c:	c0058593          	add	a1,a1,-1024 # 8001be58 <__func__.11>
    80012260:	0000b517          	auipc	a0,0xb
    80012264:	88050513          	add	a0,a0,-1920 # 8001cae0 <__func__.1+0x2e8>
bool store_page_fault_3(){
    80012268:	e406                	sd	ra,8(sp)
    8001226a:	e022                	sd	s0,0(sp)
    TEST_START();
    8001226c:	4f7080ef          	jal	8001af62 <printf>
    80012270:	4529                	li	a0,10
    80012272:	3c3070ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80012276:	450d                	li	a0,3
    80012278:	867ee0ef          	jal	80000ade <goto_priv>
    hspt_init();
    8001227c:	b64ee0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80012280:	da6ee0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80012284:	4509                	li	a0,2
    80012286:	859ee0ef          	jal	80000ade <goto_priv>
    vspt_init();
    8001228a:	c2aee0ef          	jal	800006b4 <vspt_init>


    //执行hsvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    8001228e:	4511                	li	a0,4
    80012290:	84fee0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80012294:	000407b7          	lui	a5,0x40
    80012298:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    8001229c:	450d                	li	a0,3
    8001229e:	841ee0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    800122a2:	4509                	li	a0,2
    800122a4:	f5eee0ef          	jal	80000a02 <set_prev_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    800122a8:	0ff0000f          	fence
    800122ac:	4785                	li	a5,1
    800122ae:	0002b417          	auipc	s0,0x2b
    800122b2:	d6240413          	add	s0,s0,-670 # 8003d010 <excpt>
    800122b6:	00f41023          	sh	a5,0(s0)
    800122ba:	0002b797          	auipc	a5,0x2b
    800122be:	d807b723          	sd	zero,-626(a5) # 8003d048 <excpt+0x38>
    800122c2:	0ff0000f          	fence
    asm volatile(
    800122c6:	37ab77b7          	lui	a5,0x37ab7
    800122ca:	00080737          	lui	a4,0x80
    800122ce:	078a                	sll	a5,a5,0x2
    800122d0:	0765                	add	a4,a4,25 # 80019 <_test_table_size+0x80018>
    800122d2:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800122d6:	0736                	sll	a4,a4,0xd
    800122d8:	62f74073          	.4byte	0x62f74073
    hsvb(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    800122dc:	08200593          	li	a1,130
    800122e0:	0000f617          	auipc	a2,0xf
    800122e4:	19860613          	add	a2,a2,408 # 80021478 <__func__.1+0x4c80>
    800122e8:	0000b517          	auipc	a0,0xb
    800122ec:	81050513          	add	a0,a0,-2032 # 8001caf8 <__func__.1+0x300>
    800122f0:	473080ef          	jal	8001af62 <printf>
    800122f4:	00144783          	lbu	a5,1(s0)
    800122f8:	0000a597          	auipc	a1,0xa
    800122fc:	7c858593          	add	a1,a1,1992 # 8001cac0 <__func__.1+0x2c8>
    80012300:	c789                	beqz	a5,8001230a <store_page_fault_3+0xb4>
    80012302:	0000a597          	auipc	a1,0xa
    80012306:	7ce58593          	add	a1,a1,1998 # 8001cad0 <__func__.1+0x2d8>
    8001230a:	0000b517          	auipc	a0,0xb
    8001230e:	80650513          	add	a0,a0,-2042 # 8001cb10 <__func__.1+0x318>
    80012312:	451080ef          	jal	8001af62 <printf>
    80012316:	00144783          	lbu	a5,1(s0)
    8001231a:	e3b1                	bnez	a5,8001235e <store_page_fault_3+0x108>
    8001231c:	4529                	li	a0,10
    8001231e:	317070ef          	jal	80019e34 <putchar>
    80012322:	00144783          	lbu	a5,1(s0)
    80012326:	e795                	bnez	a5,80012352 <store_page_fault_3+0xfc>
    80012328:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    8001232a:	0000a597          	auipc	a1,0xa
    8001232e:	79658593          	add	a1,a1,1942 # 8001cac0 <__func__.1+0x2c8>
    80012332:	0000b517          	auipc	a0,0xb
    80012336:	84650513          	add	a0,a0,-1978 # 8001cb78 <__func__.1+0x380>
    8001233a:	429080ef          	jal	8001af62 <printf>
    8001233e:	4511                	li	a0,4
    80012340:	f9eee0ef          	jal	80000ade <goto_priv>
    80012344:	fe3ee0ef          	jal	80001326 <reset_state>
}
    80012348:	60a2                	ld	ra,8(sp)
    8001234a:	8522                	mv	a0,s0
    8001234c:	6402                	ld	s0,0(sp)
    8001234e:	0141                	add	sp,sp,16
    80012350:	8082                	ret
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    80012352:	4401                	li	s0,0
    TEST_END();
    80012354:	0000a597          	auipc	a1,0xa
    80012358:	77c58593          	add	a1,a1,1916 # 8001cad0 <__func__.1+0x2d8>
    8001235c:	bfd9                	j	80012332 <store_page_fault_3+0xdc>
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    8001235e:	0000a517          	auipc	a0,0xa
    80012362:	7ba50513          	add	a0,a0,1978 # 8001cb18 <__func__.1+0x320>
    80012366:	3fd080ef          	jal	8001af62 <printf>
    8001236a:	02900513          	li	a0,41
    8001236e:	2c7070ef          	jal	80019e34 <putchar>
    80012372:	b76d                	j	8001231c <store_page_fault_3+0xc6>

0000000080012374 <store_page_fault_4>:


bool store_page_fault_4(){
    80012374:	1101                	add	sp,sp,-32

    TEST_START();
    80012376:	0000a597          	auipc	a1,0xa
    8001237a:	afa58593          	add	a1,a1,-1286 # 8001be70 <__func__.10>
    8001237e:	0000a517          	auipc	a0,0xa
    80012382:	76250513          	add	a0,a0,1890 # 8001cae0 <__func__.1+0x2e8>
bool store_page_fault_4(){
    80012386:	ec06                	sd	ra,24(sp)
    80012388:	e822                	sd	s0,16(sp)
    8001238a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001238c:	3d7080ef          	jal	8001af62 <printf>
    80012390:	4529                	li	a0,10
    80012392:	2a3070ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80012396:	450d                	li	a0,3
    80012398:	f46ee0ef          	jal	80000ade <goto_priv>
    hspt_init();
    8001239c:	a44ee0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800123a0:	c86ee0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    800123a4:	4509                	li	a0,2
    800123a6:	f38ee0ef          	jal	80000ade <goto_priv>
    vspt_init();
    800123aa:	b0aee0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    800123ae:	4509                	li	a0,2
    800123b0:	f2eee0ef          	jal	80000ade <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    800123b4:	0ff0000f          	fence
    800123b8:	4785                	li	a5,1
    800123ba:	0002b417          	auipc	s0,0x2b
    800123be:	c5640413          	add	s0,s0,-938 # 8003d010 <excpt>
    800123c2:	00f41023          	sh	a5,0(s0)
    800123c6:	0002b797          	auipc	a5,0x2b
    800123ca:	c807b123          	sd	zero,-894(a5) # 8003d048 <excpt+0x38>
    800123ce:	0ff0000f          	fence
STORE_INSTRUCTION(sd, "sd", uint64_t);
    800123d2:	37ab77b7          	lui	a5,0x37ab7
    800123d6:	078a                	sll	a5,a5,0x2
    800123d8:	40019737          	lui	a4,0x40019
    800123dc:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800123e0:	070a                	sll	a4,a4,0x2
    800123e2:	00f73023          	sd	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>

    addr = hs_page_base(VSI_GI);
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd when pte.v=0 leads to LPF",
    800123e6:	08200593          	li	a1,130
    800123ea:	0000f617          	auipc	a2,0xf
    800123ee:	0c660613          	add	a2,a2,198 # 800214b0 <__func__.1+0x4cb8>
    800123f2:	0000a517          	auipc	a0,0xa
    800123f6:	70650513          	add	a0,a0,1798 # 8001caf8 <__func__.1+0x300>
    800123fa:	369080ef          	jal	8001af62 <printf>
    800123fe:	00144783          	lbu	a5,1(s0)
    80012402:	0000a597          	auipc	a1,0xa
    80012406:	6ce58593          	add	a1,a1,1742 # 8001cad0 <__func__.1+0x2d8>
    8001240a:	c789                	beqz	a5,80012414 <store_page_fault_4+0xa0>
    8001240c:	6418                	ld	a4,8(s0)
    8001240e:	47bd                	li	a5,15
    80012410:	1ef70663          	beq	a4,a5,800125fc <store_page_fault_4+0x288>
    80012414:	0000a517          	auipc	a0,0xa
    80012418:	6fc50513          	add	a0,a0,1788 # 8001cb10 <__func__.1+0x318>
    8001241c:	347080ef          	jal	8001af62 <printf>
    80012420:	00144783          	lbu	a5,1(s0)
    80012424:	c789                	beqz	a5,8001242e <store_page_fault_4+0xba>
    80012426:	6418                	ld	a4,8(s0)
    80012428:	47bd                	li	a5,15
    8001242a:	00f70c63          	beq	a4,a5,80012442 <store_page_fault_4+0xce>
    8001242e:	0000a517          	auipc	a0,0xa
    80012432:	6ea50513          	add	a0,a0,1770 # 8001cb18 <__func__.1+0x320>
    80012436:	32d080ef          	jal	8001af62 <printf>
    8001243a:	02900513          	li	a0,41
    8001243e:	1f7070ef          	jal	80019e34 <putchar>
    80012442:	4529                	li	a0,10
    80012444:	1f1070ef          	jal	80019e34 <putchar>
    80012448:	00144783          	lbu	a5,1(s0)
    8001244c:	4481                	li	s1,0
    8001244e:	c789                	beqz	a5,80012458 <store_page_fault_4+0xe4>
    80012450:	6404                	ld	s1,8(s0)
    80012452:	14c5                	add	s1,s1,-15
    80012454:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SPF
    );


    //执行sd指令时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    TEST_SETUP_EXCEPT();
    80012458:	0ff0000f          	fence
    8001245c:	4785                	li	a5,1
    8001245e:	00f41023          	sh	a5,0(s0)
    80012462:	0002b797          	auipc	a5,0x2b
    80012466:	be07b323          	sd	zero,-1050(a5) # 8003d048 <excpt+0x38>
    8001246a:	0ff0000f          	fence
    addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001246e:	000807b7          	lui	a5,0x80
    80012472:	1007b073          	csrc	sstatus,a5
    80012476:	37ab77b7          	lui	a5,0x37ab7
    8001247a:	00100737          	lui	a4,0x100
    8001247e:	078a                	sll	a5,a5,0x2
    80012480:	05f70713          	add	a4,a4,95 # 10005f <STACK_SIZE+0x5f>
    80012484:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80012488:	0732                	sll	a4,a4,0xc
    8001248a:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd when sstatus.mxr=0 and pte.r=0 leads to LPF",
    8001248e:	08200593          	li	a1,130
    80012492:	0000f617          	auipc	a2,0xf
    80012496:	04660613          	add	a2,a2,70 # 800214d8 <__func__.1+0x4ce0>
    8001249a:	0000a517          	auipc	a0,0xa
    8001249e:	65e50513          	add	a0,a0,1630 # 8001caf8 <__func__.1+0x300>
    800124a2:	2c1080ef          	jal	8001af62 <printf>
    800124a6:	00144783          	lbu	a5,1(s0)
    800124aa:	0000a597          	auipc	a1,0xa
    800124ae:	62658593          	add	a1,a1,1574 # 8001cad0 <__func__.1+0x2d8>
    800124b2:	c789                	beqz	a5,800124bc <store_page_fault_4+0x148>
    800124b4:	6418                	ld	a4,8(s0)
    800124b6:	47bd                	li	a5,15
    800124b8:	14f70763          	beq	a4,a5,80012606 <store_page_fault_4+0x292>
    800124bc:	0000a517          	auipc	a0,0xa
    800124c0:	65450513          	add	a0,a0,1620 # 8001cb10 <__func__.1+0x318>
    800124c4:	29f080ef          	jal	8001af62 <printf>
    800124c8:	00144783          	lbu	a5,1(s0)
    800124cc:	c789                	beqz	a5,800124d6 <store_page_fault_4+0x162>
    800124ce:	6418                	ld	a4,8(s0)
    800124d0:	47bd                	li	a5,15
    800124d2:	00f70c63          	beq	a4,a5,800124ea <store_page_fault_4+0x176>
    800124d6:	0000a517          	auipc	a0,0xa
    800124da:	64250513          	add	a0,a0,1602 # 8001cb18 <__func__.1+0x320>
    800124de:	285080ef          	jal	8001af62 <printf>
    800124e2:	02900513          	li	a0,41
    800124e6:	14f070ef          	jal	80019e34 <putchar>
    800124ea:	4529                	li	a0,10
    800124ec:	149070ef          	jal	80019e34 <putchar>
    800124f0:	c491                	beqz	s1,800124fc <store_page_fault_4+0x188>
    800124f2:	00144783          	lbu	a5,1(s0)
    800124f6:	4481                	li	s1,0
    800124f8:	0e079863          	bnez	a5,800125e8 <store_page_fault_4+0x274>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行sd指令时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    800124fc:	0ff0000f          	fence
    80012500:	4785                	li	a5,1
    80012502:	00f41023          	sh	a5,0(s0)
    80012506:	0002b797          	auipc	a5,0x2b
    8001250a:	b407b123          	sd	zero,-1214(a5) # 8003d048 <excpt+0x38>
    8001250e:	0ff0000f          	fence
    addr = hs_page_base(VSV_GV);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80012512:	000807b7          	lui	a5,0x80
    80012516:	1007a073          	csrs	sstatus,a5
    8001251a:	37ab77b7          	lui	a5,0x37ab7
    8001251e:	00100737          	lui	a4,0x100
    80012522:	078a                	sll	a5,a5,0x2
    80012524:	0775                	add	a4,a4,29 # 10001d <STACK_SIZE+0x1d>
    80012526:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001252a:	0732                	sll	a4,a4,0xc
    8001252c:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80012530:	08200593          	li	a1,130
    80012534:	0000f617          	auipc	a2,0xf
    80012538:	fdc60613          	add	a2,a2,-36 # 80021510 <__func__.1+0x4d18>
    8001253c:	0000a517          	auipc	a0,0xa
    80012540:	5bc50513          	add	a0,a0,1468 # 8001caf8 <__func__.1+0x300>
    80012544:	21f080ef          	jal	8001af62 <printf>
    80012548:	00144783          	lbu	a5,1(s0)
    8001254c:	0000a597          	auipc	a1,0xa
    80012550:	58458593          	add	a1,a1,1412 # 8001cad0 <__func__.1+0x2d8>
    80012554:	c789                	beqz	a5,8001255e <store_page_fault_4+0x1ea>
    80012556:	6418                	ld	a4,8(s0)
    80012558:	47bd                	li	a5,15
    8001255a:	08f70c63          	beq	a4,a5,800125f2 <store_page_fault_4+0x27e>
    8001255e:	0000a517          	auipc	a0,0xa
    80012562:	5b250513          	add	a0,a0,1458 # 8001cb10 <__func__.1+0x318>
    80012566:	1fd080ef          	jal	8001af62 <printf>
    8001256a:	00144783          	lbu	a5,1(s0)
    8001256e:	c789                	beqz	a5,80012578 <store_page_fault_4+0x204>
    80012570:	6418                	ld	a4,8(s0)
    80012572:	47bd                	li	a5,15
    80012574:	00f70c63          	beq	a4,a5,8001258c <store_page_fault_4+0x218>
    80012578:	0000a517          	auipc	a0,0xa
    8001257c:	5a050513          	add	a0,a0,1440 # 8001cb18 <__func__.1+0x320>
    80012580:	1e3080ef          	jal	8001af62 <printf>
    80012584:	02900513          	li	a0,41
    80012588:	0ad070ef          	jal	80019e34 <putchar>
    8001258c:	4529                	li	a0,10
    8001258e:	0a7070ef          	jal	80019e34 <putchar>
    80012592:	c481                	beqz	s1,8001259a <store_page_fault_4+0x226>
    80012594:	00144483          	lbu	s1,1(s0)
    80012598:	e89d                	bnez	s1,800125ce <store_page_fault_4+0x25a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001259a:	000807b7          	lui	a5,0x80
    8001259e:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("vs mode sd when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800125a2:	4481                	li	s1,0

    TEST_END();
    800125a4:	0000a597          	auipc	a1,0xa
    800125a8:	52c58593          	add	a1,a1,1324 # 8001cad0 <__func__.1+0x2d8>
    800125ac:	0000a517          	auipc	a0,0xa
    800125b0:	5cc50513          	add	a0,a0,1484 # 8001cb78 <__func__.1+0x380>
    800125b4:	1af080ef          	jal	8001af62 <printf>
    800125b8:	4511                	li	a0,4
    800125ba:	d24ee0ef          	jal	80000ade <goto_priv>
    800125be:	d69ee0ef          	jal	80001326 <reset_state>
}
    800125c2:	60e2                	ld	ra,24(sp)
    800125c4:	6442                	ld	s0,16(sp)
    800125c6:	8526                	mv	a0,s1
    800125c8:	64a2                	ld	s1,8(sp)
    800125ca:	6105                	add	sp,sp,32
    800125cc:	8082                	ret
    TEST_ASSERT("vs mode sd when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800125ce:	6418                	ld	a4,8(s0)
    800125d0:	47bd                	li	a5,15
    800125d2:	fcf714e3          	bne	a4,a5,8001259a <store_page_fault_4+0x226>
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800125d6:	000807b7          	lui	a5,0x80
    800125da:	1007b073          	csrc	sstatus,a5
    TEST_END();
    800125de:	0000a597          	auipc	a1,0xa
    800125e2:	4e258593          	add	a1,a1,1250 # 8001cac0 <__func__.1+0x2c8>
    800125e6:	b7d9                	j	800125ac <store_page_fault_4+0x238>
    TEST_ASSERT("vs mode sd when sstatus.mxr=0 and pte.r=0 leads to LPF",
    800125e8:	6404                	ld	s1,8(s0)
    800125ea:	14c5                	add	s1,s1,-15
    800125ec:	0014b493          	seqz	s1,s1
    800125f0:	b731                	j	800124fc <store_page_fault_4+0x188>
    TEST_ASSERT("vs mode sd when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800125f2:	0000a597          	auipc	a1,0xa
    800125f6:	4ce58593          	add	a1,a1,1230 # 8001cac0 <__func__.1+0x2c8>
    800125fa:	b795                	j	8001255e <store_page_fault_4+0x1ea>
    TEST_ASSERT("vs mode sd when pte.v=0 leads to LPF",
    800125fc:	0000a597          	auipc	a1,0xa
    80012600:	4c458593          	add	a1,a1,1220 # 8001cac0 <__func__.1+0x2c8>
    80012604:	bd01                	j	80012414 <store_page_fault_4+0xa0>
    TEST_ASSERT("vs mode sd when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80012606:	0000a597          	auipc	a1,0xa
    8001260a:	4ba58593          	add	a1,a1,1210 # 8001cac0 <__func__.1+0x2c8>
    8001260e:	b57d                	j	800124bc <store_page_fault_4+0x148>

0000000080012610 <store_page_fault_5>:

bool store_page_fault_5(){
    80012610:	1101                	add	sp,sp,-32

    TEST_START();
    80012612:	0000a597          	auipc	a1,0xa
    80012616:	87658593          	add	a1,a1,-1930 # 8001be88 <__func__.9>
    8001261a:	0000a517          	auipc	a0,0xa
    8001261e:	4c650513          	add	a0,a0,1222 # 8001cae0 <__func__.1+0x2e8>
bool store_page_fault_5(){
    80012622:	ec06                	sd	ra,24(sp)
    80012624:	e822                	sd	s0,16(sp)
    80012626:	e426                	sd	s1,8(sp)
    TEST_START();
    80012628:	13b080ef          	jal	8001af62 <printf>
    8001262c:	4529                	li	a0,10
    8001262e:	007070ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80012632:	450d                	li	a0,3
    80012634:	caaee0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80012638:	fa9ed0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001263c:	9eaee0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80012640:	4509                	li	a0,2
    80012642:	c9cee0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80012646:	86eee0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_M);
    8001264a:	4511                	li	a0,4
    8001264c:	c92ee0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80012650:	000407b7          	lui	a5,0x40
    80012654:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80012658:	4509                	li	a0,2
    8001265a:	c84ee0ef          	jal	80000ade <goto_priv>
    //执行sd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    8001265e:	0ff0000f          	fence
    80012662:	4785                	li	a5,1
    80012664:	0002b417          	auipc	s0,0x2b
    80012668:	9ac40413          	add	s0,s0,-1620 # 8003d010 <excpt>
    8001266c:	00f41023          	sh	a5,0(s0)
    80012670:	0002b797          	auipc	a5,0x2b
    80012674:	9c07bc23          	sd	zero,-1576(a5) # 8003d048 <excpt+0x38>
    80012678:	0ff0000f          	fence
    8001267c:	37ab77b7          	lui	a5,0x37ab7
    80012680:	00080737          	lui	a4,0x80
    80012684:	078a                	sll	a5,a5,0x2
    80012686:	0765                	add	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80012688:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001268c:	0736                	sll	a4,a4,0xd
    8001268e:	00f73023          	sd	a5,0(a4)
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    sd(vaddr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    80012692:	08200593          	li	a1,130
    80012696:	0000f617          	auipc	a2,0xf
    8001269a:	ec260613          	add	a2,a2,-318 # 80021558 <__func__.1+0x4d60>
    8001269e:	0000a517          	auipc	a0,0xa
    800126a2:	45a50513          	add	a0,a0,1114 # 8001caf8 <__func__.1+0x300>
    800126a6:	0bd080ef          	jal	8001af62 <printf>
    800126aa:	00144783          	lbu	a5,1(s0)
    800126ae:	0000a597          	auipc	a1,0xa
    800126b2:	42258593          	add	a1,a1,1058 # 8001cad0 <__func__.1+0x2d8>
    800126b6:	c789                	beqz	a5,800126c0 <store_page_fault_5+0xb0>
    800126b8:	6418                	ld	a4,8(s0)
    800126ba:	47bd                	li	a5,15
    800126bc:	06f70e63          	beq	a4,a5,80012738 <store_page_fault_5+0x128>
    800126c0:	0000a517          	auipc	a0,0xa
    800126c4:	45050513          	add	a0,a0,1104 # 8001cb10 <__func__.1+0x318>
    800126c8:	09b080ef          	jal	8001af62 <printf>
    800126cc:	00144783          	lbu	a5,1(s0)
    800126d0:	c789                	beqz	a5,800126da <store_page_fault_5+0xca>
    800126d2:	6418                	ld	a4,8(s0)
    800126d4:	47bd                	li	a5,15
    800126d6:	00f70c63          	beq	a4,a5,800126ee <store_page_fault_5+0xde>
    800126da:	0000a517          	auipc	a0,0xa
    800126de:	43e50513          	add	a0,a0,1086 # 8001cb18 <__func__.1+0x320>
    800126e2:	081080ef          	jal	8001af62 <printf>
    800126e6:	02900513          	li	a0,41
    800126ea:	74a070ef          	jal	80019e34 <putchar>
    800126ee:	4529                	li	a0,10
    800126f0:	744070ef          	jal	80019e34 <putchar>
    800126f4:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    800126f8:	0000a597          	auipc	a1,0xa
    800126fc:	3d858593          	add	a1,a1,984 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    80012700:	c491                	beqz	s1,8001270c <store_page_fault_5+0xfc>
    80012702:	6418                	ld	a4,8(s0)
    80012704:	47bd                	li	a5,15
    80012706:	02f70463          	beq	a4,a5,8001272e <store_page_fault_5+0x11e>
    8001270a:	4481                	li	s1,0
    TEST_END();
    8001270c:	0000a517          	auipc	a0,0xa
    80012710:	46c50513          	add	a0,a0,1132 # 8001cb78 <__func__.1+0x380>
    80012714:	04f080ef          	jal	8001af62 <printf>
    80012718:	4511                	li	a0,4
    8001271a:	bc4ee0ef          	jal	80000ade <goto_priv>
    8001271e:	c09ee0ef          	jal	80001326 <reset_state>
}
    80012722:	60e2                	ld	ra,24(sp)
    80012724:	6442                	ld	s0,16(sp)
    80012726:	8526                	mv	a0,s1
    80012728:	64a2                	ld	s1,8(sp)
    8001272a:	6105                	add	sp,sp,32
    8001272c:	8082                	ret
    TEST_END();
    8001272e:	0000a597          	auipc	a1,0xa
    80012732:	39258593          	add	a1,a1,914 # 8001cac0 <__func__.1+0x2c8>
    80012736:	bfd9                	j	8001270c <store_page_fault_5+0xfc>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    80012738:	0000a597          	auipc	a1,0xa
    8001273c:	38858593          	add	a1,a1,904 # 8001cac0 <__func__.1+0x2c8>
    80012740:	b741                	j	800126c0 <store_page_fault_5+0xb0>

0000000080012742 <store_page_fault_6>:

bool store_page_fault_6(){
    80012742:	1141                	add	sp,sp,-16

    TEST_START();
    80012744:	00009597          	auipc	a1,0x9
    80012748:	75c58593          	add	a1,a1,1884 # 8001bea0 <__func__.8>
    8001274c:	0000a517          	auipc	a0,0xa
    80012750:	39450513          	add	a0,a0,916 # 8001cae0 <__func__.1+0x2e8>
bool store_page_fault_6(){
    80012754:	e406                	sd	ra,8(sp)
    80012756:	e022                	sd	s0,0(sp)
    TEST_START();
    80012758:	00b080ef          	jal	8001af62 <printf>
    8001275c:	4529                	li	a0,10
    8001275e:	6d6070ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80012762:	450d                	li	a0,3
    80012764:	b7aee0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80012768:	e79ed0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001276c:	8baee0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80012770:	4509                	li	a0,2
    80012772:	b6cee0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80012776:	f3fed0ef          	jal	800006b4 <vspt_init>


    //执行hsvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    8001277a:	4511                	li	a0,4
    8001277c:	b62ee0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80012780:	000407b7          	lui	a5,0x40
    80012784:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_VS);
    80012788:	4509                	li	a0,2
    8001278a:	b54ee0ef          	jal	80000ade <goto_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    8001278e:	0ff0000f          	fence
    80012792:	4785                	li	a5,1
    80012794:	0002b417          	auipc	s0,0x2b
    80012798:	87c40413          	add	s0,s0,-1924 # 8003d010 <excpt>
    8001279c:	00f41023          	sh	a5,0(s0)
    800127a0:	0002b797          	auipc	a5,0x2b
    800127a4:	8a07b423          	sd	zero,-1880(a5) # 8003d048 <excpt+0x38>
    800127a8:	0ff0000f          	fence
    800127ac:	37ab77b7          	lui	a5,0x37ab7
    800127b0:	00080737          	lui	a4,0x80
    800127b4:	078a                	sll	a5,a5,0x2
    800127b6:	0765                	add	a4,a4,25 # 80019 <_test_table_size+0x80018>
    800127b8:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800127bc:	0736                	sll	a4,a4,0xd
    800127be:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    800127c2:	08200593          	li	a1,130
    800127c6:	0000f617          	auipc	a2,0xf
    800127ca:	dca60613          	add	a2,a2,-566 # 80021590 <__func__.1+0x4d98>
    800127ce:	0000a517          	auipc	a0,0xa
    800127d2:	32a50513          	add	a0,a0,810 # 8001caf8 <__func__.1+0x300>
    800127d6:	78c080ef          	jal	8001af62 <printf>
    800127da:	00144783          	lbu	a5,1(s0)
    800127de:	0000a597          	auipc	a1,0xa
    800127e2:	2e258593          	add	a1,a1,738 # 8001cac0 <__func__.1+0x2c8>
    800127e6:	c789                	beqz	a5,800127f0 <store_page_fault_6+0xae>
    800127e8:	0000a597          	auipc	a1,0xa
    800127ec:	2e858593          	add	a1,a1,744 # 8001cad0 <__func__.1+0x2d8>
    800127f0:	0000a517          	auipc	a0,0xa
    800127f4:	32050513          	add	a0,a0,800 # 8001cb10 <__func__.1+0x318>
    800127f8:	76a080ef          	jal	8001af62 <printf>
    800127fc:	00144783          	lbu	a5,1(s0)
    80012800:	e3b1                	bnez	a5,80012844 <store_page_fault_6+0x102>
    80012802:	4529                	li	a0,10
    80012804:	630070ef          	jal	80019e34 <putchar>
    80012808:	00144783          	lbu	a5,1(s0)
    8001280c:	e795                	bnez	a5,80012838 <store_page_fault_6+0xf6>
    8001280e:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80012810:	0000a597          	auipc	a1,0xa
    80012814:	2b058593          	add	a1,a1,688 # 8001cac0 <__func__.1+0x2c8>
    80012818:	0000a517          	auipc	a0,0xa
    8001281c:	36050513          	add	a0,a0,864 # 8001cb78 <__func__.1+0x380>
    80012820:	742080ef          	jal	8001af62 <printf>
    80012824:	4511                	li	a0,4
    80012826:	ab8ee0ef          	jal	80000ade <goto_priv>
    8001282a:	afdee0ef          	jal	80001326 <reset_state>
}
    8001282e:	60a2                	ld	ra,8(sp)
    80012830:	8522                	mv	a0,s0
    80012832:	6402                	ld	s0,0(sp)
    80012834:	0141                	add	sp,sp,16
    80012836:	8082                	ret
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80012838:	4401                	li	s0,0
    TEST_END();
    8001283a:	0000a597          	auipc	a1,0xa
    8001283e:	29658593          	add	a1,a1,662 # 8001cad0 <__func__.1+0x2d8>
    80012842:	bfd9                	j	80012818 <store_page_fault_6+0xd6>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80012844:	0000a517          	auipc	a0,0xa
    80012848:	2d450513          	add	a0,a0,724 # 8001cb18 <__func__.1+0x320>
    8001284c:	716080ef          	jal	8001af62 <printf>
    80012850:	02900513          	li	a0,41
    80012854:	5e0070ef          	jal	80019e34 <putchar>
    80012858:	b76d                	j	80012802 <store_page_fault_6+0xc0>

000000008001285a <store_page_fault_7>:

bool store_page_fault_7(){
    8001285a:	1101                	add	sp,sp,-32

    TEST_START();
    8001285c:	00009597          	auipc	a1,0x9
    80012860:	65c58593          	add	a1,a1,1628 # 8001beb8 <__func__.7>
    80012864:	0000a517          	auipc	a0,0xa
    80012868:	27c50513          	add	a0,a0,636 # 8001cae0 <__func__.1+0x2e8>
bool store_page_fault_7(){
    8001286c:	ec06                	sd	ra,24(sp)
    8001286e:	e822                	sd	s0,16(sp)
    80012870:	e426                	sd	s1,8(sp)
    TEST_START();
    80012872:	6f0080ef          	jal	8001af62 <printf>
    80012876:	4529                	li	a0,10
    80012878:	5bc070ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    8001287c:	450d                	li	a0,3
    8001287e:	a60ee0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80012882:	d5fed0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80012886:	fa1ed0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    8001288a:	4509                	li	a0,2
    8001288c:	a52ee0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80012890:	e25ed0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_M);
    80012894:	4511                	li	a0,4
    80012896:	a48ee0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    8001289a:	000407b7          	lui	a5,0x40
    8001289e:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    800128a2:	450d                	li	a0,3
    800128a4:	a3aee0ef          	jal	80000ade <goto_priv>
    //执行sd指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800128a8:	0ff0000f          	fence
    800128ac:	4785                	li	a5,1
    800128ae:	0002a417          	auipc	s0,0x2a
    800128b2:	76240413          	add	s0,s0,1890 # 8003d010 <excpt>
    800128b6:	00f41023          	sh	a5,0(s0)
    800128ba:	0002a797          	auipc	a5,0x2a
    800128be:	7807b723          	sd	zero,1934(a5) # 8003d048 <excpt+0x38>
    800128c2:	0ff0000f          	fence
    800128c6:	37ab77b7          	lui	a5,0x37ab7
    800128ca:	00080737          	lui	a4,0x80
    800128ce:	078a                	sll	a5,a5,0x2
    800128d0:	0765                	add	a4,a4,25 # 80019 <_test_table_size+0x80018>
    800128d2:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800128d6:	0736                	sll	a4,a4,0xd
    800128d8:	00f73023          	sd	a5,0(a4)
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    sd(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    800128dc:	08200593          	li	a1,130
    800128e0:	0000f617          	auipc	a2,0xf
    800128e4:	ce860613          	add	a2,a2,-792 # 800215c8 <__func__.1+0x4dd0>
    800128e8:	0000a517          	auipc	a0,0xa
    800128ec:	21050513          	add	a0,a0,528 # 8001caf8 <__func__.1+0x300>
    800128f0:	672080ef          	jal	8001af62 <printf>
    800128f4:	00144783          	lbu	a5,1(s0)
    800128f8:	0000a597          	auipc	a1,0xa
    800128fc:	1d858593          	add	a1,a1,472 # 8001cad0 <__func__.1+0x2d8>
    80012900:	c789                	beqz	a5,8001290a <store_page_fault_7+0xb0>
    80012902:	6418                	ld	a4,8(s0)
    80012904:	47bd                	li	a5,15
    80012906:	06f70e63          	beq	a4,a5,80012982 <store_page_fault_7+0x128>
    8001290a:	0000a517          	auipc	a0,0xa
    8001290e:	20650513          	add	a0,a0,518 # 8001cb10 <__func__.1+0x318>
    80012912:	650080ef          	jal	8001af62 <printf>
    80012916:	00144783          	lbu	a5,1(s0)
    8001291a:	c789                	beqz	a5,80012924 <store_page_fault_7+0xca>
    8001291c:	6418                	ld	a4,8(s0)
    8001291e:	47bd                	li	a5,15
    80012920:	00f70c63          	beq	a4,a5,80012938 <store_page_fault_7+0xde>
    80012924:	0000a517          	auipc	a0,0xa
    80012928:	1f450513          	add	a0,a0,500 # 8001cb18 <__func__.1+0x320>
    8001292c:	636080ef          	jal	8001af62 <printf>
    80012930:	02900513          	li	a0,41
    80012934:	500070ef          	jal	80019e34 <putchar>
    80012938:	4529                	li	a0,10
    8001293a:	4fa070ef          	jal	80019e34 <putchar>
    8001293e:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    80012942:	0000a597          	auipc	a1,0xa
    80012946:	18e58593          	add	a1,a1,398 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    8001294a:	c491                	beqz	s1,80012956 <store_page_fault_7+0xfc>
    8001294c:	6418                	ld	a4,8(s0)
    8001294e:	47bd                	li	a5,15
    80012950:	02f70463          	beq	a4,a5,80012978 <store_page_fault_7+0x11e>
    80012954:	4481                	li	s1,0
    TEST_END();
    80012956:	0000a517          	auipc	a0,0xa
    8001295a:	22250513          	add	a0,a0,546 # 8001cb78 <__func__.1+0x380>
    8001295e:	604080ef          	jal	8001af62 <printf>
    80012962:	4511                	li	a0,4
    80012964:	97aee0ef          	jal	80000ade <goto_priv>
    80012968:	9bfee0ef          	jal	80001326 <reset_state>
}
    8001296c:	60e2                	ld	ra,24(sp)
    8001296e:	6442                	ld	s0,16(sp)
    80012970:	8526                	mv	a0,s1
    80012972:	64a2                	ld	s1,8(sp)
    80012974:	6105                	add	sp,sp,32
    80012976:	8082                	ret
    TEST_END();
    80012978:	0000a597          	auipc	a1,0xa
    8001297c:	14858593          	add	a1,a1,328 # 8001cac0 <__func__.1+0x2c8>
    80012980:	bfd9                	j	80012956 <store_page_fault_7+0xfc>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    80012982:	0000a597          	auipc	a1,0xa
    80012986:	13e58593          	add	a1,a1,318 # 8001cac0 <__func__.1+0x2c8>
    8001298a:	b741                	j	8001290a <store_page_fault_7+0xb0>

000000008001298c <store_page_fault_8>:

bool store_page_fault_8(){
    8001298c:	1141                	add	sp,sp,-16

    TEST_START();
    8001298e:	00009597          	auipc	a1,0x9
    80012992:	54258593          	add	a1,a1,1346 # 8001bed0 <__func__.6>
    80012996:	0000a517          	auipc	a0,0xa
    8001299a:	14a50513          	add	a0,a0,330 # 8001cae0 <__func__.1+0x2e8>
bool store_page_fault_8(){
    8001299e:	e406                	sd	ra,8(sp)
    800129a0:	e022                	sd	s0,0(sp)
    TEST_START();
    800129a2:	5c0080ef          	jal	8001af62 <printf>
    800129a6:	4529                	li	a0,10
    800129a8:	48c070ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    800129ac:	450d                	li	a0,3
    800129ae:	930ee0ef          	jal	80000ade <goto_priv>
    hspt_init();
    800129b2:	c2fed0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800129b6:	e71ed0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    800129ba:	4509                	li	a0,2
    800129bc:	922ee0ef          	jal	80000ade <goto_priv>
    vspt_init();
    800129c0:	cf5ed0ef          	jal	800006b4 <vspt_init>


    //执行sd指令时，设置了bsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    800129c4:	4511                	li	a0,4
    800129c6:	918ee0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    800129ca:	000407b7          	lui	a5,0x40
    800129ce:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    800129d2:	450d                	li	a0,3
    800129d4:	90aee0ef          	jal	80000ade <goto_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    800129d8:	0ff0000f          	fence
    800129dc:	4785                	li	a5,1
    800129de:	0002a417          	auipc	s0,0x2a
    800129e2:	63240413          	add	s0,s0,1586 # 8003d010 <excpt>
    800129e6:	00f41023          	sh	a5,0(s0)
    800129ea:	0002a797          	auipc	a5,0x2a
    800129ee:	6407bf23          	sd	zero,1630(a5) # 8003d048 <excpt+0x38>
    800129f2:	0ff0000f          	fence
    800129f6:	37ab77b7          	lui	a5,0x37ab7
    800129fa:	00080737          	lui	a4,0x80
    800129fe:	078a                	sll	a5,a5,0x2
    80012a00:	0765                	add	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80012a02:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80012a06:	0736                	sll	a4,a4,0xd
    80012a08:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    80012a0c:	08200593          	li	a1,130
    80012a10:	0000f617          	auipc	a2,0xf
    80012a14:	bf060613          	add	a2,a2,-1040 # 80021600 <__func__.1+0x4e08>
    80012a18:	0000a517          	auipc	a0,0xa
    80012a1c:	0e050513          	add	a0,a0,224 # 8001caf8 <__func__.1+0x300>
    80012a20:	542080ef          	jal	8001af62 <printf>
    80012a24:	00144783          	lbu	a5,1(s0)
    80012a28:	0000a597          	auipc	a1,0xa
    80012a2c:	09858593          	add	a1,a1,152 # 8001cac0 <__func__.1+0x2c8>
    80012a30:	c789                	beqz	a5,80012a3a <store_page_fault_8+0xae>
    80012a32:	0000a597          	auipc	a1,0xa
    80012a36:	09e58593          	add	a1,a1,158 # 8001cad0 <__func__.1+0x2d8>
    80012a3a:	0000a517          	auipc	a0,0xa
    80012a3e:	0d650513          	add	a0,a0,214 # 8001cb10 <__func__.1+0x318>
    80012a42:	520080ef          	jal	8001af62 <printf>
    80012a46:	00144783          	lbu	a5,1(s0)
    80012a4a:	e3b1                	bnez	a5,80012a8e <store_page_fault_8+0x102>
    80012a4c:	4529                	li	a0,10
    80012a4e:	3e6070ef          	jal	80019e34 <putchar>
    80012a52:	00144783          	lbu	a5,1(s0)
    80012a56:	e795                	bnez	a5,80012a82 <store_page_fault_8+0xf6>
    80012a58:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80012a5a:	0000a597          	auipc	a1,0xa
    80012a5e:	06658593          	add	a1,a1,102 # 8001cac0 <__func__.1+0x2c8>
    80012a62:	0000a517          	auipc	a0,0xa
    80012a66:	11650513          	add	a0,a0,278 # 8001cb78 <__func__.1+0x380>
    80012a6a:	4f8080ef          	jal	8001af62 <printf>
    80012a6e:	4511                	li	a0,4
    80012a70:	86eee0ef          	jal	80000ade <goto_priv>
    80012a74:	8b3ee0ef          	jal	80001326 <reset_state>
}
    80012a78:	60a2                	ld	ra,8(sp)
    80012a7a:	8522                	mv	a0,s0
    80012a7c:	6402                	ld	s0,0(sp)
    80012a7e:	0141                	add	sp,sp,16
    80012a80:	8082                	ret
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    80012a82:	4401                	li	s0,0
    TEST_END();
    80012a84:	0000a597          	auipc	a1,0xa
    80012a88:	04c58593          	add	a1,a1,76 # 8001cad0 <__func__.1+0x2d8>
    80012a8c:	bfd9                	j	80012a62 <store_page_fault_8+0xd6>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    80012a8e:	0000a517          	auipc	a0,0xa
    80012a92:	08a50513          	add	a0,a0,138 # 8001cb18 <__func__.1+0x320>
    80012a96:	4cc080ef          	jal	8001af62 <printf>
    80012a9a:	02900513          	li	a0,41
    80012a9e:	396070ef          	jal	80019e34 <putchar>
    80012aa2:	b76d                	j	80012a4c <store_page_fault_8+0xc0>

0000000080012aa4 <amo_page_fault_1>:





bool amo_page_fault_1(){
    80012aa4:	1101                	add	sp,sp,-32

    TEST_START();
    80012aa6:	00009597          	auipc	a1,0x9
    80012aaa:	44258593          	add	a1,a1,1090 # 8001bee8 <__func__.5>
    80012aae:	0000a517          	auipc	a0,0xa
    80012ab2:	03250513          	add	a0,a0,50 # 8001cae0 <__func__.1+0x2e8>
bool amo_page_fault_1(){
    80012ab6:	ec06                	sd	ra,24(sp)
    80012ab8:	e822                	sd	s0,16(sp)
    80012aba:	e426                	sd	s1,8(sp)
    80012abc:	e04a                	sd	s2,0(sp)
    TEST_START();
    80012abe:	4a4080ef          	jal	8001af62 <printf>
    80012ac2:	4529                	li	a0,10
    80012ac4:	370070ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80012ac8:	450d                	li	a0,3
    80012aca:	814ee0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80012ace:	b13ed0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80012ad2:	d55ed0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80012ad6:	4509                	li	a0,2
    80012ad8:	806ee0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80012adc:	bd9ed0ef          	jal	800006b4 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_HS);
    80012ae0:	450d                	li	a0,3
    80012ae2:	ffded0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80012ae6:	4509                	li	a0,2
    80012ae8:	f1bed0ef          	jal	80000a02 <set_prev_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80012aec:	0ff0000f          	fence
    80012af0:	4785                	li	a5,1
    80012af2:	0002a417          	auipc	s0,0x2a
    80012af6:	51e40413          	add	s0,s0,1310 # 8003d010 <excpt>
    80012afa:	00f41023          	sh	a5,0(s0)
    80012afe:	0002a797          	auipc	a5,0x2a
    80012b02:	5407b523          	sd	zero,1354(a5) # 8003d048 <excpt+0x38>
    80012b06:	0ff0000f          	fence
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80012b0a:	deadc4b7          	lui	s1,0xdeadc
    80012b0e:	400197b7          	lui	a5,0x40019
    80012b12:	eef4849b          	addw	s1,s1,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    80012b16:	078a                	sll	a5,a5,0x2
    80012b18:	0097a4af          	amoadd.w	s1,s1,(a5)

    addr = hs_page_base(VSI_GI);
    value = amoadd_w(addr,value);
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    80012b1c:	08200593          	li	a1,130
    80012b20:	0000f617          	auipc	a2,0xf
    80012b24:	b1860613          	add	a2,a2,-1256 # 80021638 <__func__.1+0x4e40>
    80012b28:	0000a517          	auipc	a0,0xa
    80012b2c:	fd050513          	add	a0,a0,-48 # 8001caf8 <__func__.1+0x300>
    80012b30:	432080ef          	jal	8001af62 <printf>
    80012b34:	00144783          	lbu	a5,1(s0)
    value = amoadd_w(addr,value);
    80012b38:	1482                	sll	s1,s1,0x20
    80012b3a:	9081                	srl	s1,s1,0x20
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    80012b3c:	0000a597          	auipc	a1,0xa
    80012b40:	f9458593          	add	a1,a1,-108 # 8001cad0 <__func__.1+0x2d8>
    80012b44:	c789                	beqz	a5,80012b4e <amo_page_fault_1+0xaa>
    80012b46:	6418                	ld	a4,8(s0)
    80012b48:	47bd                	li	a5,15
    80012b4a:	1ef70163          	beq	a4,a5,80012d2c <amo_page_fault_1+0x288>
    80012b4e:	0000a517          	auipc	a0,0xa
    80012b52:	fc250513          	add	a0,a0,-62 # 8001cb10 <__func__.1+0x318>
    80012b56:	40c080ef          	jal	8001af62 <printf>
    80012b5a:	00144783          	lbu	a5,1(s0)
    80012b5e:	c789                	beqz	a5,80012b68 <amo_page_fault_1+0xc4>
    80012b60:	6418                	ld	a4,8(s0)
    80012b62:	47bd                	li	a5,15
    80012b64:	00f70c63          	beq	a4,a5,80012b7c <amo_page_fault_1+0xd8>
    80012b68:	0000a517          	auipc	a0,0xa
    80012b6c:	fb050513          	add	a0,a0,-80 # 8001cb18 <__func__.1+0x320>
    80012b70:	3f2080ef          	jal	8001af62 <printf>
    80012b74:	02900513          	li	a0,41
    80012b78:	2bc070ef          	jal	80019e34 <putchar>
    80012b7c:	4529                	li	a0,10
    80012b7e:	2b6070ef          	jal	80019e34 <putchar>
    80012b82:	00144783          	lbu	a5,1(s0)
    80012b86:	4901                	li	s2,0
    80012b88:	c791                	beqz	a5,80012b94 <amo_page_fault_1+0xf0>
    80012b8a:	00843903          	ld	s2,8(s0)
    80012b8e:	1945                	add	s2,s2,-15
    80012b90:	00193913          	seqz	s2,s2
        excpt.cause == CAUSE_SPF
    );


    //执行amoand_d指令时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    TEST_SETUP_EXCEPT();
    80012b94:	0ff0000f          	fence
    80012b98:	4785                	li	a5,1
    80012b9a:	00f41023          	sh	a5,0(s0)
    80012b9e:	0002a797          	auipc	a5,0x2a
    80012ba2:	4a07b523          	sd	zero,1194(a5) # 8003d048 <excpt+0x38>
    80012ba6:	0ff0000f          	fence
    addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80012baa:	000807b7          	lui	a5,0x80
    80012bae:	1007b073          	csrc	sstatus,a5
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    80012bb2:	001007b7          	lui	a5,0x100
    80012bb6:	05f78793          	add	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    80012bba:	07b2                	sll	a5,a5,0xc
    80012bbc:	6097b4af          	amoand.d	s1,s1,(a5)
    value = amoand_d(addr,value);
    TEST_ASSERT("hs mode execute amoand_d when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80012bc0:	08200593          	li	a1,130
    80012bc4:	0000f617          	auipc	a2,0xf
    80012bc8:	aac60613          	add	a2,a2,-1364 # 80021670 <__func__.1+0x4e78>
    80012bcc:	0000a517          	auipc	a0,0xa
    80012bd0:	f2c50513          	add	a0,a0,-212 # 8001caf8 <__func__.1+0x300>
    80012bd4:	38e080ef          	jal	8001af62 <printf>
    80012bd8:	00144783          	lbu	a5,1(s0)
    80012bdc:	0000a597          	auipc	a1,0xa
    80012be0:	ef458593          	add	a1,a1,-268 # 8001cad0 <__func__.1+0x2d8>
    80012be4:	c789                	beqz	a5,80012bee <amo_page_fault_1+0x14a>
    80012be6:	6418                	ld	a4,8(s0)
    80012be8:	47bd                	li	a5,15
    80012bea:	14f70663          	beq	a4,a5,80012d36 <amo_page_fault_1+0x292>
    80012bee:	0000a517          	auipc	a0,0xa
    80012bf2:	f2250513          	add	a0,a0,-222 # 8001cb10 <__func__.1+0x318>
    80012bf6:	36c080ef          	jal	8001af62 <printf>
    80012bfa:	00144783          	lbu	a5,1(s0)
    80012bfe:	c789                	beqz	a5,80012c08 <amo_page_fault_1+0x164>
    80012c00:	6418                	ld	a4,8(s0)
    80012c02:	47bd                	li	a5,15
    80012c04:	00f70c63          	beq	a4,a5,80012c1c <amo_page_fault_1+0x178>
    80012c08:	0000a517          	auipc	a0,0xa
    80012c0c:	f1050513          	add	a0,a0,-240 # 8001cb18 <__func__.1+0x320>
    80012c10:	352080ef          	jal	8001af62 <printf>
    80012c14:	02900513          	li	a0,41
    80012c18:	21c070ef          	jal	80019e34 <putchar>
    80012c1c:	4529                	li	a0,10
    80012c1e:	216070ef          	jal	80019e34 <putchar>
    80012c22:	00090763          	beqz	s2,80012c30 <amo_page_fault_1+0x18c>
    80012c26:	00144783          	lbu	a5,1(s0)
    80012c2a:	4901                	li	s2,0
    80012c2c:	0e079563          	bnez	a5,80012d16 <amo_page_fault_1+0x272>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行amomax_d指令时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80012c30:	0ff0000f          	fence
    80012c34:	4785                	li	a5,1
    80012c36:	00f41023          	sh	a5,0(s0)
    80012c3a:	0002a797          	auipc	a5,0x2a
    80012c3e:	4007b723          	sd	zero,1038(a5) # 8003d048 <excpt+0x38>
    80012c42:	0ff0000f          	fence
    addr = hs_page_base(VSV_GV);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80012c46:	000807b7          	lui	a5,0x80
    80012c4a:	1007a073          	csrs	sstatus,a5
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    80012c4e:	001007b7          	lui	a5,0x100
    80012c52:	07f5                	add	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    80012c54:	07b2                	sll	a5,a5,0xc
    80012c56:	a097b4af          	amomax.d	s1,s1,(a5)
    value = amomax_d(addr,value);
    TEST_ASSERT("hs mode execute amomax_d when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80012c5a:	08200593          	li	a1,130
    80012c5e:	0000f617          	auipc	a2,0xf
    80012c62:	a5a60613          	add	a2,a2,-1446 # 800216b8 <__func__.1+0x4ec0>
    80012c66:	0000a517          	auipc	a0,0xa
    80012c6a:	e9250513          	add	a0,a0,-366 # 8001caf8 <__func__.1+0x300>
    80012c6e:	2f4080ef          	jal	8001af62 <printf>
    80012c72:	00144783          	lbu	a5,1(s0)
    80012c76:	0000a597          	auipc	a1,0xa
    80012c7a:	e5a58593          	add	a1,a1,-422 # 8001cad0 <__func__.1+0x2d8>
    80012c7e:	c789                	beqz	a5,80012c88 <amo_page_fault_1+0x1e4>
    80012c80:	6418                	ld	a4,8(s0)
    80012c82:	47bd                	li	a5,15
    80012c84:	08f70f63          	beq	a4,a5,80012d22 <amo_page_fault_1+0x27e>
    80012c88:	0000a517          	auipc	a0,0xa
    80012c8c:	e8850513          	add	a0,a0,-376 # 8001cb10 <__func__.1+0x318>
    80012c90:	2d2080ef          	jal	8001af62 <printf>
    80012c94:	00144783          	lbu	a5,1(s0)
    80012c98:	c789                	beqz	a5,80012ca2 <amo_page_fault_1+0x1fe>
    80012c9a:	6418                	ld	a4,8(s0)
    80012c9c:	47bd                	li	a5,15
    80012c9e:	00f70c63          	beq	a4,a5,80012cb6 <amo_page_fault_1+0x212>
    80012ca2:	0000a517          	auipc	a0,0xa
    80012ca6:	e7650513          	add	a0,a0,-394 # 8001cb18 <__func__.1+0x320>
    80012caa:	2b8080ef          	jal	8001af62 <printf>
    80012cae:	02900513          	li	a0,41
    80012cb2:	182070ef          	jal	80019e34 <putchar>
    80012cb6:	4529                	li	a0,10
    80012cb8:	17c070ef          	jal	80019e34 <putchar>
    80012cbc:	00090563          	beqz	s2,80012cc6 <amo_page_fault_1+0x222>
    80012cc0:	00144483          	lbu	s1,1(s0)
    80012cc4:	ec85                	bnez	s1,80012cfc <amo_page_fault_1+0x258>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80012cc6:	000807b7          	lui	a5,0x80
    80012cca:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs mode execute amomax_d when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80012cce:	4481                	li	s1,0

    TEST_END();
    80012cd0:	0000a597          	auipc	a1,0xa
    80012cd4:	e0058593          	add	a1,a1,-512 # 8001cad0 <__func__.1+0x2d8>
    80012cd8:	0000a517          	auipc	a0,0xa
    80012cdc:	ea050513          	add	a0,a0,-352 # 8001cb78 <__func__.1+0x380>
    80012ce0:	282080ef          	jal	8001af62 <printf>
    80012ce4:	4511                	li	a0,4
    80012ce6:	df9ed0ef          	jal	80000ade <goto_priv>
    80012cea:	e3cee0ef          	jal	80001326 <reset_state>
}
    80012cee:	60e2                	ld	ra,24(sp)
    80012cf0:	6442                	ld	s0,16(sp)
    80012cf2:	6902                	ld	s2,0(sp)
    80012cf4:	8526                	mv	a0,s1
    80012cf6:	64a2                	ld	s1,8(sp)
    80012cf8:	6105                	add	sp,sp,32
    80012cfa:	8082                	ret
    TEST_ASSERT("hs mode execute amomax_d when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80012cfc:	6418                	ld	a4,8(s0)
    80012cfe:	47bd                	li	a5,15
    80012d00:	fcf713e3          	bne	a4,a5,80012cc6 <amo_page_fault_1+0x222>
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80012d04:	000807b7          	lui	a5,0x80
    80012d08:	1007b073          	csrc	sstatus,a5
    TEST_END();
    80012d0c:	0000a597          	auipc	a1,0xa
    80012d10:	db458593          	add	a1,a1,-588 # 8001cac0 <__func__.1+0x2c8>
    80012d14:	b7d1                	j	80012cd8 <amo_page_fault_1+0x234>
    TEST_ASSERT("hs mode execute amoand_d when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80012d16:	00843903          	ld	s2,8(s0)
    80012d1a:	1945                	add	s2,s2,-15
    80012d1c:	00193913          	seqz	s2,s2
    80012d20:	bf01                	j	80012c30 <amo_page_fault_1+0x18c>
    TEST_ASSERT("hs mode execute amomax_d when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80012d22:	0000a597          	auipc	a1,0xa
    80012d26:	d9e58593          	add	a1,a1,-610 # 8001cac0 <__func__.1+0x2c8>
    80012d2a:	bfb9                	j	80012c88 <amo_page_fault_1+0x1e4>
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    80012d2c:	0000a597          	auipc	a1,0xa
    80012d30:	d9458593          	add	a1,a1,-620 # 8001cac0 <__func__.1+0x2c8>
    80012d34:	bd29                	j	80012b4e <amo_page_fault_1+0xaa>
    TEST_ASSERT("hs mode execute amoand_d when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80012d36:	0000a597          	auipc	a1,0xa
    80012d3a:	d8a58593          	add	a1,a1,-630 # 8001cac0 <__func__.1+0x2c8>
    80012d3e:	bd45                	j	80012bee <amo_page_fault_1+0x14a>

0000000080012d40 <amo_page_fault_2>:

bool amo_page_fault_2(){
    80012d40:	1101                	add	sp,sp,-32

    TEST_START();
    80012d42:	00009597          	auipc	a1,0x9
    80012d46:	1be58593          	add	a1,a1,446 # 8001bf00 <__func__.4>
    80012d4a:	0000a517          	auipc	a0,0xa
    80012d4e:	d9650513          	add	a0,a0,-618 # 8001cae0 <__func__.1+0x2e8>
bool amo_page_fault_2(){
    80012d52:	ec06                	sd	ra,24(sp)
    80012d54:	e822                	sd	s0,16(sp)
    80012d56:	e426                	sd	s1,8(sp)
    TEST_START();
    80012d58:	20a080ef          	jal	8001af62 <printf>
    80012d5c:	4529                	li	a0,10
    80012d5e:	0d6070ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80012d62:	450d                	li	a0,3
    80012d64:	d7bed0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80012d68:	879ed0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80012d6c:	abbed0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80012d70:	4509                	li	a0,2
    80012d72:	d6ded0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80012d76:	93fed0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_M);
    80012d7a:	4511                	li	a0,4
    80012d7c:	d63ed0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80012d80:	000407b7          	lui	a5,0x40
    80012d84:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    80012d88:	450d                	li	a0,3
    80012d8a:	d55ed0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);    
    80012d8e:	4509                	li	a0,2
    80012d90:	c73ed0ef          	jal	80000a02 <set_prev_priv>
    //执行amomin_d指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项(sstatus配置不进去，需要配置mstatus)
    TEST_SETUP_EXCEPT();
    80012d94:	0ff0000f          	fence
    80012d98:	4785                	li	a5,1
    80012d9a:	0002a417          	auipc	s0,0x2a
    80012d9e:	27640413          	add	s0,s0,630 # 8003d010 <excpt>
    80012da2:	00f41023          	sh	a5,0(s0)
    80012da6:	0002a797          	auipc	a5,0x2a
    80012daa:	2a07b123          	sd	zero,674(a5) # 8003d048 <excpt+0x38>
    80012dae:	0ff0000f          	fence
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    80012db2:	000807b7          	lui	a5,0x80
    80012db6:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80012db8:	4701                	li	a4,0
    80012dba:	07b6                	sll	a5,a5,0xd
    80012dbc:	80e7b72f          	amomin.d	a4,a4,(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);


    uint64_t value = amomin_d(addr,value);
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    80012dc0:	08200593          	li	a1,130
    80012dc4:	0000f617          	auipc	a2,0xf
    80012dc8:	94c60613          	add	a2,a2,-1716 # 80021710 <__func__.1+0x4f18>
    80012dcc:	0000a517          	auipc	a0,0xa
    80012dd0:	d2c50513          	add	a0,a0,-724 # 8001caf8 <__func__.1+0x300>
    80012dd4:	18e080ef          	jal	8001af62 <printf>
    80012dd8:	00144783          	lbu	a5,1(s0)
    80012ddc:	0000a597          	auipc	a1,0xa
    80012de0:	cf458593          	add	a1,a1,-780 # 8001cad0 <__func__.1+0x2d8>
    80012de4:	c789                	beqz	a5,80012dee <amo_page_fault_2+0xae>
    80012de6:	6418                	ld	a4,8(s0)
    80012de8:	47bd                	li	a5,15
    80012dea:	06f70e63          	beq	a4,a5,80012e66 <amo_page_fault_2+0x126>
    80012dee:	0000a517          	auipc	a0,0xa
    80012df2:	d2250513          	add	a0,a0,-734 # 8001cb10 <__func__.1+0x318>
    80012df6:	16c080ef          	jal	8001af62 <printf>
    80012dfa:	00144783          	lbu	a5,1(s0)
    80012dfe:	c789                	beqz	a5,80012e08 <amo_page_fault_2+0xc8>
    80012e00:	6418                	ld	a4,8(s0)
    80012e02:	47bd                	li	a5,15
    80012e04:	00f70c63          	beq	a4,a5,80012e1c <amo_page_fault_2+0xdc>
    80012e08:	0000a517          	auipc	a0,0xa
    80012e0c:	d1050513          	add	a0,a0,-752 # 8001cb18 <__func__.1+0x320>
    80012e10:	152080ef          	jal	8001af62 <printf>
    80012e14:	02900513          	li	a0,41
    80012e18:	01c070ef          	jal	80019e34 <putchar>
    80012e1c:	4529                	li	a0,10
    80012e1e:	016070ef          	jal	80019e34 <putchar>
    80012e22:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80012e26:	0000a597          	auipc	a1,0xa
    80012e2a:	caa58593          	add	a1,a1,-854 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    80012e2e:	c491                	beqz	s1,80012e3a <amo_page_fault_2+0xfa>
    80012e30:	6418                	ld	a4,8(s0)
    80012e32:	47bd                	li	a5,15
    80012e34:	02f70463          	beq	a4,a5,80012e5c <amo_page_fault_2+0x11c>
    80012e38:	4481                	li	s1,0
    TEST_END();
    80012e3a:	0000a517          	auipc	a0,0xa
    80012e3e:	d3e50513          	add	a0,a0,-706 # 8001cb78 <__func__.1+0x380>
    80012e42:	120080ef          	jal	8001af62 <printf>
    80012e46:	4511                	li	a0,4
    80012e48:	c97ed0ef          	jal	80000ade <goto_priv>
    80012e4c:	cdaee0ef          	jal	80001326 <reset_state>
}
    80012e50:	60e2                	ld	ra,24(sp)
    80012e52:	6442                	ld	s0,16(sp)
    80012e54:	8526                	mv	a0,s1
    80012e56:	64a2                	ld	s1,8(sp)
    80012e58:	6105                	add	sp,sp,32
    80012e5a:	8082                	ret
    TEST_END();
    80012e5c:	0000a597          	auipc	a1,0xa
    80012e60:	c6458593          	add	a1,a1,-924 # 8001cac0 <__func__.1+0x2c8>
    80012e64:	bfd9                	j	80012e3a <amo_page_fault_2+0xfa>
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    80012e66:	0000a597          	auipc	a1,0xa
    80012e6a:	c5a58593          	add	a1,a1,-934 # 8001cac0 <__func__.1+0x2c8>
    80012e6e:	b741                	j	80012dee <amo_page_fault_2+0xae>

0000000080012e70 <amo_page_fault_3>:

bool amo_page_fault_3(){
    80012e70:	1141                	add	sp,sp,-16

    TEST_START();
    80012e72:	00009597          	auipc	a1,0x9
    80012e76:	0a658593          	add	a1,a1,166 # 8001bf18 <__func__.3>
    80012e7a:	0000a517          	auipc	a0,0xa
    80012e7e:	c6650513          	add	a0,a0,-922 # 8001cae0 <__func__.1+0x2e8>
bool amo_page_fault_3(){
    80012e82:	e406                	sd	ra,8(sp)
    80012e84:	e022                	sd	s0,0(sp)
    TEST_START();
    80012e86:	0dc080ef          	jal	8001af62 <printf>
    80012e8a:	4529                	li	a0,10
    80012e8c:	7a9060ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80012e90:	450d                	li	a0,3
    80012e92:	c4ded0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80012e96:	f4aed0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80012e9a:	98ded0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80012e9e:	4509                	li	a0,2
    80012ea0:	c3fed0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80012ea4:	811ed0ef          	jal	800006b4 <vspt_init>

 

    //执行amoadd_w指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80012ea8:	4511                	li	a0,4
    80012eaa:	c35ed0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    80012eae:	000407b7          	lui	a5,0x40
    80012eb2:	3007a073          	csrs	mstatus,a5

    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    goto_priv(PRIV_HS);
    80012eb6:	450d                	li	a0,3
    80012eb8:	c27ed0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);   
    80012ebc:	4509                	li	a0,2
    80012ebe:	b45ed0ef          	jal	80000a02 <set_prev_priv>
    
    TEST_SETUP_EXCEPT();
    80012ec2:	0ff0000f          	fence
    80012ec6:	4785                	li	a5,1
    80012ec8:	0002a417          	auipc	s0,0x2a
    80012ecc:	14840413          	add	s0,s0,328 # 8003d010 <excpt>
    80012ed0:	00f41023          	sh	a5,0(s0)
    80012ed4:	0002a797          	auipc	a5,0x2a
    80012ed8:	1607ba23          	sd	zero,372(a5) # 8003d048 <excpt+0x38>
    80012edc:	0ff0000f          	fence
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80012ee0:	000807b7          	lui	a5,0x80
    80012ee4:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80012ee6:	4701                	li	a4,0
    80012ee8:	07b6                	sll	a5,a5,0xd
    80012eea:	00e7a72f          	amoadd.w	a4,a4,(a5)
    uint64_t value = amoadd_w(addr,value);
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    80012eee:	08200593          	li	a1,130
    80012ef2:	0000f617          	auipc	a2,0xf
    80012ef6:	86660613          	add	a2,a2,-1946 # 80021758 <__func__.1+0x4f60>
    80012efa:	0000a517          	auipc	a0,0xa
    80012efe:	bfe50513          	add	a0,a0,-1026 # 8001caf8 <__func__.1+0x300>
    80012f02:	060080ef          	jal	8001af62 <printf>
    80012f06:	00144783          	lbu	a5,1(s0)
    80012f0a:	0000a597          	auipc	a1,0xa
    80012f0e:	bb658593          	add	a1,a1,-1098 # 8001cac0 <__func__.1+0x2c8>
    80012f12:	c789                	beqz	a5,80012f1c <amo_page_fault_3+0xac>
    80012f14:	0000a597          	auipc	a1,0xa
    80012f18:	bbc58593          	add	a1,a1,-1092 # 8001cad0 <__func__.1+0x2d8>
    80012f1c:	0000a517          	auipc	a0,0xa
    80012f20:	bf450513          	add	a0,a0,-1036 # 8001cb10 <__func__.1+0x318>
    80012f24:	03e080ef          	jal	8001af62 <printf>
    80012f28:	00144783          	lbu	a5,1(s0)
    80012f2c:	e3b1                	bnez	a5,80012f70 <amo_page_fault_3+0x100>
    80012f2e:	4529                	li	a0,10
    80012f30:	705060ef          	jal	80019e34 <putchar>
    80012f34:	00144783          	lbu	a5,1(s0)
    80012f38:	e795                	bnez	a5,80012f64 <amo_page_fault_3+0xf4>
    80012f3a:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80012f3c:	0000a597          	auipc	a1,0xa
    80012f40:	b8458593          	add	a1,a1,-1148 # 8001cac0 <__func__.1+0x2c8>
    80012f44:	0000a517          	auipc	a0,0xa
    80012f48:	c3450513          	add	a0,a0,-972 # 8001cb78 <__func__.1+0x380>
    80012f4c:	016080ef          	jal	8001af62 <printf>
    80012f50:	4511                	li	a0,4
    80012f52:	b8ded0ef          	jal	80000ade <goto_priv>
    80012f56:	bd0ee0ef          	jal	80001326 <reset_state>
}
    80012f5a:	60a2                	ld	ra,8(sp)
    80012f5c:	8522                	mv	a0,s0
    80012f5e:	6402                	ld	s0,0(sp)
    80012f60:	0141                	add	sp,sp,16
    80012f62:	8082                	ret
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    80012f64:	4401                	li	s0,0
    TEST_END();
    80012f66:	0000a597          	auipc	a1,0xa
    80012f6a:	b6a58593          	add	a1,a1,-1174 # 8001cad0 <__func__.1+0x2d8>
    80012f6e:	bfd9                	j	80012f44 <amo_page_fault_3+0xd4>
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    80012f70:	0000a517          	auipc	a0,0xa
    80012f74:	ba850513          	add	a0,a0,-1112 # 8001cb18 <__func__.1+0x320>
    80012f78:	7eb070ef          	jal	8001af62 <printf>
    80012f7c:	02900513          	li	a0,41
    80012f80:	6b5060ef          	jal	80019e34 <putchar>
    80012f84:	b76d                	j	80012f2e <amo_page_fault_3+0xbe>

0000000080012f86 <amo_page_fault_4>:

bool amo_page_fault_4(){
    80012f86:	1101                	add	sp,sp,-32

    TEST_START();
    80012f88:	00009597          	auipc	a1,0x9
    80012f8c:	fa858593          	add	a1,a1,-88 # 8001bf30 <__func__.2>
    80012f90:	0000a517          	auipc	a0,0xa
    80012f94:	b5050513          	add	a0,a0,-1200 # 8001cae0 <__func__.1+0x2e8>
bool amo_page_fault_4(){
    80012f98:	ec06                	sd	ra,24(sp)
    80012f9a:	e822                	sd	s0,16(sp)
    80012f9c:	e426                	sd	s1,8(sp)
    80012f9e:	e04a                	sd	s2,0(sp)
    TEST_START();
    80012fa0:	7c3070ef          	jal	8001af62 <printf>
    80012fa4:	4529                	li	a0,10
    80012fa6:	68f060ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80012faa:	450d                	li	a0,3
    80012fac:	b33ed0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80012fb0:	e30ed0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80012fb4:	873ed0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80012fb8:	4509                	li	a0,2
    80012fba:	b25ed0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80012fbe:	ef6ed0ef          	jal	800006b4 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    80012fc2:	4509                	li	a0,2
    80012fc4:	b1bed0ef          	jal	80000ade <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80012fc8:	0ff0000f          	fence
    80012fcc:	4785                	li	a5,1
    80012fce:	0002a417          	auipc	s0,0x2a
    80012fd2:	04240413          	add	s0,s0,66 # 8003d010 <excpt>
    80012fd6:	00f41023          	sh	a5,0(s0)
    80012fda:	0002a797          	auipc	a5,0x2a
    80012fde:	0607b723          	sd	zero,110(a5) # 8003d048 <excpt+0x38>
    80012fe2:	0ff0000f          	fence
    80012fe6:	deadc4b7          	lui	s1,0xdeadc
    80012fea:	400197b7          	lui	a5,0x40019
    80012fee:	eef4849b          	addw	s1,s1,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    80012ff2:	078a                	sll	a5,a5,0x2
    80012ff4:	0097a4af          	amoadd.w	s1,s1,(a5)

    addr = hs_page_base(VSI_GI);
    value = amoadd_w(addr,value);
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    80012ff8:	08200593          	li	a1,130
    80012ffc:	0000e617          	auipc	a2,0xe
    80013000:	7a460613          	add	a2,a2,1956 # 800217a0 <__func__.1+0x4fa8>
    80013004:	0000a517          	auipc	a0,0xa
    80013008:	af450513          	add	a0,a0,-1292 # 8001caf8 <__func__.1+0x300>
    8001300c:	757070ef          	jal	8001af62 <printf>
    80013010:	00144783          	lbu	a5,1(s0)
    value = amoadd_w(addr,value);
    80013014:	1482                	sll	s1,s1,0x20
    80013016:	9081                	srl	s1,s1,0x20
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    80013018:	0000a597          	auipc	a1,0xa
    8001301c:	ab858593          	add	a1,a1,-1352 # 8001cad0 <__func__.1+0x2d8>
    80013020:	c789                	beqz	a5,8001302a <amo_page_fault_4+0xa4>
    80013022:	6418                	ld	a4,8(s0)
    80013024:	47bd                	li	a5,15
    80013026:	1ef70163          	beq	a4,a5,80013208 <amo_page_fault_4+0x282>
    8001302a:	0000a517          	auipc	a0,0xa
    8001302e:	ae650513          	add	a0,a0,-1306 # 8001cb10 <__func__.1+0x318>
    80013032:	731070ef          	jal	8001af62 <printf>
    80013036:	00144783          	lbu	a5,1(s0)
    8001303a:	c789                	beqz	a5,80013044 <amo_page_fault_4+0xbe>
    8001303c:	6418                	ld	a4,8(s0)
    8001303e:	47bd                	li	a5,15
    80013040:	00f70c63          	beq	a4,a5,80013058 <amo_page_fault_4+0xd2>
    80013044:	0000a517          	auipc	a0,0xa
    80013048:	ad450513          	add	a0,a0,-1324 # 8001cb18 <__func__.1+0x320>
    8001304c:	717070ef          	jal	8001af62 <printf>
    80013050:	02900513          	li	a0,41
    80013054:	5e1060ef          	jal	80019e34 <putchar>
    80013058:	4529                	li	a0,10
    8001305a:	5db060ef          	jal	80019e34 <putchar>
    8001305e:	00144783          	lbu	a5,1(s0)
    80013062:	4901                	li	s2,0
    80013064:	c791                	beqz	a5,80013070 <amo_page_fault_4+0xea>
    80013066:	00843903          	ld	s2,8(s0)
    8001306a:	1945                	add	s2,s2,-15
    8001306c:	00193913          	seqz	s2,s2
        excpt.cause == CAUSE_SPF
    );


    //执行amoand_d指令时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    TEST_SETUP_EXCEPT();
    80013070:	0ff0000f          	fence
    80013074:	4785                	li	a5,1
    80013076:	00f41023          	sh	a5,0(s0)
    8001307a:	0002a797          	auipc	a5,0x2a
    8001307e:	fc07b723          	sd	zero,-50(a5) # 8003d048 <excpt+0x38>
    80013082:	0ff0000f          	fence
    addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80013086:	000807b7          	lui	a5,0x80
    8001308a:	1007b073          	csrc	sstatus,a5
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    8001308e:	001007b7          	lui	a5,0x100
    80013092:	05f78793          	add	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    80013096:	07b2                	sll	a5,a5,0xc
    80013098:	6097b4af          	amoand.d	s1,s1,(a5)
    value = amoand_d(addr,value);
    TEST_ASSERT("vs mode execute amoand_d when sstatus.mxr=0 and pte.r=0 leads to LPF",
    8001309c:	08200593          	li	a1,130
    800130a0:	0000e617          	auipc	a2,0xe
    800130a4:	73860613          	add	a2,a2,1848 # 800217d8 <__func__.1+0x4fe0>
    800130a8:	0000a517          	auipc	a0,0xa
    800130ac:	a5050513          	add	a0,a0,-1456 # 8001caf8 <__func__.1+0x300>
    800130b0:	6b3070ef          	jal	8001af62 <printf>
    800130b4:	00144783          	lbu	a5,1(s0)
    800130b8:	0000a597          	auipc	a1,0xa
    800130bc:	a1858593          	add	a1,a1,-1512 # 8001cad0 <__func__.1+0x2d8>
    800130c0:	c789                	beqz	a5,800130ca <amo_page_fault_4+0x144>
    800130c2:	6418                	ld	a4,8(s0)
    800130c4:	47bd                	li	a5,15
    800130c6:	14f70663          	beq	a4,a5,80013212 <amo_page_fault_4+0x28c>
    800130ca:	0000a517          	auipc	a0,0xa
    800130ce:	a4650513          	add	a0,a0,-1466 # 8001cb10 <__func__.1+0x318>
    800130d2:	691070ef          	jal	8001af62 <printf>
    800130d6:	00144783          	lbu	a5,1(s0)
    800130da:	c789                	beqz	a5,800130e4 <amo_page_fault_4+0x15e>
    800130dc:	6418                	ld	a4,8(s0)
    800130de:	47bd                	li	a5,15
    800130e0:	00f70c63          	beq	a4,a5,800130f8 <amo_page_fault_4+0x172>
    800130e4:	0000a517          	auipc	a0,0xa
    800130e8:	a3450513          	add	a0,a0,-1484 # 8001cb18 <__func__.1+0x320>
    800130ec:	677070ef          	jal	8001af62 <printf>
    800130f0:	02900513          	li	a0,41
    800130f4:	541060ef          	jal	80019e34 <putchar>
    800130f8:	4529                	li	a0,10
    800130fa:	53b060ef          	jal	80019e34 <putchar>
    800130fe:	00090763          	beqz	s2,8001310c <amo_page_fault_4+0x186>
    80013102:	00144783          	lbu	a5,1(s0)
    80013106:	4901                	li	s2,0
    80013108:	0e079563          	bnez	a5,800131f2 <amo_page_fault_4+0x26c>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行amomax_d指令时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    8001310c:	0ff0000f          	fence
    80013110:	4785                	li	a5,1
    80013112:	00f41023          	sh	a5,0(s0)
    80013116:	0002a797          	auipc	a5,0x2a
    8001311a:	f207b923          	sd	zero,-206(a5) # 8003d048 <excpt+0x38>
    8001311e:	0ff0000f          	fence
    addr = hs_page_base(VSV_GV);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80013122:	000807b7          	lui	a5,0x80
    80013126:	1007a073          	csrs	sstatus,a5
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    8001312a:	001007b7          	lui	a5,0x100
    8001312e:	07f5                	add	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    80013130:	07b2                	sll	a5,a5,0xc
    80013132:	a097b4af          	amomax.d	s1,s1,(a5)
    value = amomax_d(addr,value);
    TEST_ASSERT("vs mode execute amomax_d when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80013136:	08200593          	li	a1,130
    8001313a:	0000e617          	auipc	a2,0xe
    8001313e:	6e660613          	add	a2,a2,1766 # 80021820 <__func__.1+0x5028>
    80013142:	0000a517          	auipc	a0,0xa
    80013146:	9b650513          	add	a0,a0,-1610 # 8001caf8 <__func__.1+0x300>
    8001314a:	619070ef          	jal	8001af62 <printf>
    8001314e:	00144783          	lbu	a5,1(s0)
    80013152:	0000a597          	auipc	a1,0xa
    80013156:	97e58593          	add	a1,a1,-1666 # 8001cad0 <__func__.1+0x2d8>
    8001315a:	c789                	beqz	a5,80013164 <amo_page_fault_4+0x1de>
    8001315c:	6418                	ld	a4,8(s0)
    8001315e:	47bd                	li	a5,15
    80013160:	08f70f63          	beq	a4,a5,800131fe <amo_page_fault_4+0x278>
    80013164:	0000a517          	auipc	a0,0xa
    80013168:	9ac50513          	add	a0,a0,-1620 # 8001cb10 <__func__.1+0x318>
    8001316c:	5f7070ef          	jal	8001af62 <printf>
    80013170:	00144783          	lbu	a5,1(s0)
    80013174:	c789                	beqz	a5,8001317e <amo_page_fault_4+0x1f8>
    80013176:	6418                	ld	a4,8(s0)
    80013178:	47bd                	li	a5,15
    8001317a:	00f70c63          	beq	a4,a5,80013192 <amo_page_fault_4+0x20c>
    8001317e:	0000a517          	auipc	a0,0xa
    80013182:	99a50513          	add	a0,a0,-1638 # 8001cb18 <__func__.1+0x320>
    80013186:	5dd070ef          	jal	8001af62 <printf>
    8001318a:	02900513          	li	a0,41
    8001318e:	4a7060ef          	jal	80019e34 <putchar>
    80013192:	4529                	li	a0,10
    80013194:	4a1060ef          	jal	80019e34 <putchar>
    80013198:	00090563          	beqz	s2,800131a2 <amo_page_fault_4+0x21c>
    8001319c:	00144483          	lbu	s1,1(s0)
    800131a0:	ec85                	bnez	s1,800131d8 <amo_page_fault_4+0x252>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800131a2:	000807b7          	lui	a5,0x80
    800131a6:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("vs mode execute amomax_d when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800131aa:	4481                	li	s1,0

    TEST_END();
    800131ac:	0000a597          	auipc	a1,0xa
    800131b0:	92458593          	add	a1,a1,-1756 # 8001cad0 <__func__.1+0x2d8>
    800131b4:	0000a517          	auipc	a0,0xa
    800131b8:	9c450513          	add	a0,a0,-1596 # 8001cb78 <__func__.1+0x380>
    800131bc:	5a7070ef          	jal	8001af62 <printf>
    800131c0:	4511                	li	a0,4
    800131c2:	91ded0ef          	jal	80000ade <goto_priv>
    800131c6:	960ee0ef          	jal	80001326 <reset_state>
}
    800131ca:	60e2                	ld	ra,24(sp)
    800131cc:	6442                	ld	s0,16(sp)
    800131ce:	6902                	ld	s2,0(sp)
    800131d0:	8526                	mv	a0,s1
    800131d2:	64a2                	ld	s1,8(sp)
    800131d4:	6105                	add	sp,sp,32
    800131d6:	8082                	ret
    TEST_ASSERT("vs mode execute amomax_d when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800131d8:	6418                	ld	a4,8(s0)
    800131da:	47bd                	li	a5,15
    800131dc:	fcf713e3          	bne	a4,a5,800131a2 <amo_page_fault_4+0x21c>
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800131e0:	000807b7          	lui	a5,0x80
    800131e4:	1007b073          	csrc	sstatus,a5
    TEST_END();
    800131e8:	0000a597          	auipc	a1,0xa
    800131ec:	8d858593          	add	a1,a1,-1832 # 8001cac0 <__func__.1+0x2c8>
    800131f0:	b7d1                	j	800131b4 <amo_page_fault_4+0x22e>
    TEST_ASSERT("vs mode execute amoand_d when sstatus.mxr=0 and pte.r=0 leads to LPF",
    800131f2:	00843903          	ld	s2,8(s0)
    800131f6:	1945                	add	s2,s2,-15
    800131f8:	00193913          	seqz	s2,s2
    800131fc:	bf01                	j	8001310c <amo_page_fault_4+0x186>
    TEST_ASSERT("vs mode execute amomax_d when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800131fe:	0000a597          	auipc	a1,0xa
    80013202:	8c258593          	add	a1,a1,-1854 # 8001cac0 <__func__.1+0x2c8>
    80013206:	bfb9                	j	80013164 <amo_page_fault_4+0x1de>
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    80013208:	0000a597          	auipc	a1,0xa
    8001320c:	8b858593          	add	a1,a1,-1864 # 8001cac0 <__func__.1+0x2c8>
    80013210:	bd29                	j	8001302a <amo_page_fault_4+0xa4>
    TEST_ASSERT("vs mode execute amoand_d when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80013212:	0000a597          	auipc	a1,0xa
    80013216:	8ae58593          	add	a1,a1,-1874 # 8001cac0 <__func__.1+0x2c8>
    8001321a:	bd45                	j	800130ca <amo_page_fault_4+0x144>

000000008001321c <amo_page_fault_5>:

bool amo_page_fault_5(){
    8001321c:	1101                	add	sp,sp,-32

    TEST_START();
    8001321e:	00009597          	auipc	a1,0x9
    80013222:	d2a58593          	add	a1,a1,-726 # 8001bf48 <__func__.1>
    80013226:	0000a517          	auipc	a0,0xa
    8001322a:	8ba50513          	add	a0,a0,-1862 # 8001cae0 <__func__.1+0x2e8>
bool amo_page_fault_5(){
    8001322e:	ec06                	sd	ra,24(sp)
    80013230:	e822                	sd	s0,16(sp)
    80013232:	e426                	sd	s1,8(sp)
    TEST_START();
    80013234:	52f070ef          	jal	8001af62 <printf>
    80013238:	4529                	li	a0,10
    8001323a:	3fb060ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    8001323e:	450d                	li	a0,3
    80013240:	89fed0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80013244:	b9ced0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80013248:	ddeed0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    8001324c:	4509                	li	a0,2
    8001324e:	891ed0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80013252:	c62ed0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_M);
    80013256:	4511                	li	a0,4
    80013258:	887ed0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    8001325c:	000407b7          	lui	a5,0x40
    80013260:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80013264:	4509                	li	a0,2
    80013266:	879ed0ef          	jal	80000ade <goto_priv>
   
    //执行amomin_d指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项(sstatus配置不进去，需要配置mstatus)
    TEST_SETUP_EXCEPT();
    8001326a:	0ff0000f          	fence
    8001326e:	4785                	li	a5,1
    80013270:	0002a417          	auipc	s0,0x2a
    80013274:	da040413          	add	s0,s0,-608 # 8003d010 <excpt>
    80013278:	00f41023          	sh	a5,0(s0)
    8001327c:	0002a797          	auipc	a5,0x2a
    80013280:	dc07b623          	sd	zero,-564(a5) # 8003d048 <excpt+0x38>
    80013284:	0ff0000f          	fence
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    80013288:	000807b7          	lui	a5,0x80
    8001328c:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001328e:	4701                	li	a4,0
    80013290:	07b6                	sll	a5,a5,0xd
    80013292:	80e7b72f          	amomin.d	a4,a4,(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);


    uint64_t value = amomin_d(addr,value);
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    80013296:	08200593          	li	a1,130
    8001329a:	0000e617          	auipc	a2,0xe
    8001329e:	5de60613          	add	a2,a2,1502 # 80021878 <__func__.1+0x5080>
    800132a2:	0000a517          	auipc	a0,0xa
    800132a6:	85650513          	add	a0,a0,-1962 # 8001caf8 <__func__.1+0x300>
    800132aa:	4b9070ef          	jal	8001af62 <printf>
    800132ae:	00144783          	lbu	a5,1(s0)
    800132b2:	0000a597          	auipc	a1,0xa
    800132b6:	81e58593          	add	a1,a1,-2018 # 8001cad0 <__func__.1+0x2d8>
    800132ba:	c789                	beqz	a5,800132c4 <amo_page_fault_5+0xa8>
    800132bc:	6418                	ld	a4,8(s0)
    800132be:	47bd                	li	a5,15
    800132c0:	06f70e63          	beq	a4,a5,8001333c <amo_page_fault_5+0x120>
    800132c4:	0000a517          	auipc	a0,0xa
    800132c8:	84c50513          	add	a0,a0,-1972 # 8001cb10 <__func__.1+0x318>
    800132cc:	497070ef          	jal	8001af62 <printf>
    800132d0:	00144783          	lbu	a5,1(s0)
    800132d4:	c789                	beqz	a5,800132de <amo_page_fault_5+0xc2>
    800132d6:	6418                	ld	a4,8(s0)
    800132d8:	47bd                	li	a5,15
    800132da:	00f70c63          	beq	a4,a5,800132f2 <amo_page_fault_5+0xd6>
    800132de:	0000a517          	auipc	a0,0xa
    800132e2:	83a50513          	add	a0,a0,-1990 # 8001cb18 <__func__.1+0x320>
    800132e6:	47d070ef          	jal	8001af62 <printf>
    800132ea:	02900513          	li	a0,41
    800132ee:	347060ef          	jal	80019e34 <putchar>
    800132f2:	4529                	li	a0,10
    800132f4:	341060ef          	jal	80019e34 <putchar>
    800132f8:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    800132fc:	00009597          	auipc	a1,0x9
    80013300:	7d458593          	add	a1,a1,2004 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    80013304:	c491                	beqz	s1,80013310 <amo_page_fault_5+0xf4>
    80013306:	6418                	ld	a4,8(s0)
    80013308:	47bd                	li	a5,15
    8001330a:	02f70463          	beq	a4,a5,80013332 <amo_page_fault_5+0x116>
    8001330e:	4481                	li	s1,0
    TEST_END();
    80013310:	0000a517          	auipc	a0,0xa
    80013314:	86850513          	add	a0,a0,-1944 # 8001cb78 <__func__.1+0x380>
    80013318:	44b070ef          	jal	8001af62 <printf>
    8001331c:	4511                	li	a0,4
    8001331e:	fc0ed0ef          	jal	80000ade <goto_priv>
    80013322:	804ee0ef          	jal	80001326 <reset_state>
}
    80013326:	60e2                	ld	ra,24(sp)
    80013328:	6442                	ld	s0,16(sp)
    8001332a:	8526                	mv	a0,s1
    8001332c:	64a2                	ld	s1,8(sp)
    8001332e:	6105                	add	sp,sp,32
    80013330:	8082                	ret
    TEST_END();
    80013332:	00009597          	auipc	a1,0x9
    80013336:	78e58593          	add	a1,a1,1934 # 8001cac0 <__func__.1+0x2c8>
    8001333a:	bfd9                	j	80013310 <amo_page_fault_5+0xf4>
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    8001333c:	00009597          	auipc	a1,0x9
    80013340:	78458593          	add	a1,a1,1924 # 8001cac0 <__func__.1+0x2c8>
    80013344:	b741                	j	800132c4 <amo_page_fault_5+0xa8>

0000000080013346 <amo_page_fault_6>:

bool amo_page_fault_6(){
    80013346:	1141                	add	sp,sp,-16

    TEST_START();
    80013348:	00009597          	auipc	a1,0x9
    8001334c:	c1858593          	add	a1,a1,-1000 # 8001bf60 <__func__.0>
    80013350:	00009517          	auipc	a0,0x9
    80013354:	79050513          	add	a0,a0,1936 # 8001cae0 <__func__.1+0x2e8>
bool amo_page_fault_6(){
    80013358:	e406                	sd	ra,8(sp)
    8001335a:	e022                	sd	s0,0(sp)
    TEST_START();
    8001335c:	407070ef          	jal	8001af62 <printf>
    80013360:	4529                	li	a0,10
    80013362:	2d3060ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80013366:	450d                	li	a0,3
    80013368:	f76ed0ef          	jal	80000ade <goto_priv>
    hspt_init();
    8001336c:	a74ed0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80013370:	cb6ed0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80013374:	4509                	li	a0,2
    80013376:	f68ed0ef          	jal	80000ade <goto_priv>
    vspt_init();
    8001337a:	b3aed0ef          	jal	800006b4 <vspt_init>

 

    //执行amoadd_w指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    8001337e:	4511                	li	a0,4
    80013380:	f5eed0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80013384:	000407b7          	lui	a5,0x40
    80013388:	2007a073          	csrs	vsstatus,a5

    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    goto_priv(PRIV_VS);   
    8001338c:	4509                	li	a0,2
    8001338e:	f50ed0ef          	jal	80000ade <goto_priv>
    
    TEST_SETUP_EXCEPT();
    80013392:	0ff0000f          	fence
    80013396:	4785                	li	a5,1
    80013398:	0002a417          	auipc	s0,0x2a
    8001339c:	c7840413          	add	s0,s0,-904 # 8003d010 <excpt>
    800133a0:	00f41023          	sh	a5,0(s0)
    800133a4:	0002a797          	auipc	a5,0x2a
    800133a8:	ca07b223          	sd	zero,-860(a5) # 8003d048 <excpt+0x38>
    800133ac:	0ff0000f          	fence
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    800133b0:	000807b7          	lui	a5,0x80
    800133b4:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800133b6:	4701                	li	a4,0
    800133b8:	07b6                	sll	a5,a5,0xd
    800133ba:	00e7a72f          	amoadd.w	a4,a4,(a5)
    uint64_t value = amoadd_w(addr,value);
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    800133be:	08200593          	li	a1,130
    800133c2:	0000e617          	auipc	a2,0xe
    800133c6:	50660613          	add	a2,a2,1286 # 800218c8 <__func__.1+0x50d0>
    800133ca:	00009517          	auipc	a0,0x9
    800133ce:	72e50513          	add	a0,a0,1838 # 8001caf8 <__func__.1+0x300>
    800133d2:	391070ef          	jal	8001af62 <printf>
    800133d6:	00144783          	lbu	a5,1(s0)
    800133da:	00009597          	auipc	a1,0x9
    800133de:	6e658593          	add	a1,a1,1766 # 8001cac0 <__func__.1+0x2c8>
    800133e2:	c789                	beqz	a5,800133ec <amo_page_fault_6+0xa6>
    800133e4:	00009597          	auipc	a1,0x9
    800133e8:	6ec58593          	add	a1,a1,1772 # 8001cad0 <__func__.1+0x2d8>
    800133ec:	00009517          	auipc	a0,0x9
    800133f0:	72450513          	add	a0,a0,1828 # 8001cb10 <__func__.1+0x318>
    800133f4:	36f070ef          	jal	8001af62 <printf>
    800133f8:	00144783          	lbu	a5,1(s0)
    800133fc:	e3b1                	bnez	a5,80013440 <amo_page_fault_6+0xfa>
    800133fe:	4529                	li	a0,10
    80013400:	235060ef          	jal	80019e34 <putchar>
    80013404:	00144783          	lbu	a5,1(s0)
    80013408:	e795                	bnez	a5,80013434 <amo_page_fault_6+0xee>
    8001340a:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    8001340c:	00009597          	auipc	a1,0x9
    80013410:	6b458593          	add	a1,a1,1716 # 8001cac0 <__func__.1+0x2c8>
    80013414:	00009517          	auipc	a0,0x9
    80013418:	76450513          	add	a0,a0,1892 # 8001cb78 <__func__.1+0x380>
    8001341c:	347070ef          	jal	8001af62 <printf>
    80013420:	4511                	li	a0,4
    80013422:	ebced0ef          	jal	80000ade <goto_priv>
    80013426:	f01ed0ef          	jal	80001326 <reset_state>
}
    8001342a:	60a2                	ld	ra,8(sp)
    8001342c:	8522                	mv	a0,s0
    8001342e:	6402                	ld	s0,0(sp)
    80013430:	0141                	add	sp,sp,16
    80013432:	8082                	ret
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    80013434:	4401                	li	s0,0
    TEST_END();
    80013436:	00009597          	auipc	a1,0x9
    8001343a:	69a58593          	add	a1,a1,1690 # 8001cad0 <__func__.1+0x2d8>
    8001343e:	bfd9                	j	80013414 <amo_page_fault_6+0xce>
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    80013440:	00009517          	auipc	a0,0x9
    80013444:	6d850513          	add	a0,a0,1752 # 8001cb18 <__func__.1+0x320>
    80013448:	31b070ef          	jal	8001af62 <printf>
    8001344c:	02900513          	li	a0,41
    80013450:	1e5060ef          	jal	80019e34 <putchar>
    80013454:	b76d                	j	800133fe <amo_page_fault_6+0xb8>

0000000080013456 <load_guest_page_fault_1>:
 #include <rvh_test.h>
#include <page_tables.h>

bool load_guest_page_fault_1(){
    80013456:	1101                	add	sp,sp,-32

    TEST_START();
    80013458:	00009597          	auipc	a1,0x9
    8001345c:	b2058593          	add	a1,a1,-1248 # 8001bf78 <__func__.36>
    80013460:	00009517          	auipc	a0,0x9
    80013464:	68050513          	add	a0,a0,1664 # 8001cae0 <__func__.1+0x2e8>
bool load_guest_page_fault_1(){
    80013468:	ec06                	sd	ra,24(sp)
    8001346a:	e822                	sd	s0,16(sp)
    8001346c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001346e:	2f5070ef          	jal	8001af62 <printf>
    80013472:	4529                	li	a0,10
    80013474:	1c1060ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80013478:	450d                	li	a0,3
    8001347a:	e64ed0ef          	jal	80000ade <goto_priv>
    hspt_init();
    8001347e:	962ed0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80013482:	ba4ed0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80013486:	4509                	li	a0,2
    80013488:	e56ed0ef          	jal	80000ade <goto_priv>
    vspt_init();
    8001348c:	a28ed0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80013490:	450d                	li	a0,3
    80013492:	e4ced0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80013496:	4509                	li	a0,2
    80013498:	d6aed0ef          	jal	80000a02 <set_prev_priv>

    //执行取指相关指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    8001349c:	0ff0000f          	fence
    800134a0:	4785                	li	a5,1
    800134a2:	0002a417          	auipc	s0,0x2a
    800134a6:	b6e40413          	add	s0,s0,-1170 # 8003d010 <excpt>
    800134aa:	00f41023          	sh	a5,0(s0)
    800134ae:	0002a797          	auipc	a5,0x2a
    800134b2:	b807bd23          	sd	zero,-1126(a5) # 8003d048 <excpt+0x38>
    800134b6:	0ff0000f          	fence
    asm volatile(
    800134ba:	001007b7          	lui	a5,0x100
    800134be:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800134c2:	07b2                	sll	a5,a5,0xc
    800134c4:	6c07c7f3          	.4byte	0x6c07c7f3

    vaddr = hs_page_base(VSRWX_GI);
    hlvd(vaddr);
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    800134c8:	08200593          	li	a1,130
    800134cc:	0000e617          	auipc	a2,0xe
    800134d0:	44460613          	add	a2,a2,1092 # 80021910 <__func__.1+0x5118>
    800134d4:	00009517          	auipc	a0,0x9
    800134d8:	62450513          	add	a0,a0,1572 # 8001caf8 <__func__.1+0x300>
    800134dc:	287070ef          	jal	8001af62 <printf>
    800134e0:	00144783          	lbu	a5,1(s0)
    800134e4:	00009597          	auipc	a1,0x9
    800134e8:	5ec58593          	add	a1,a1,1516 # 8001cad0 <__func__.1+0x2d8>
    800134ec:	c789                	beqz	a5,800134f6 <load_guest_page_fault_1+0xa0>
    800134ee:	6418                	ld	a4,8(s0)
    800134f0:	47d5                	li	a5,21
    800134f2:	12f70063          	beq	a4,a5,80013612 <load_guest_page_fault_1+0x1bc>
    800134f6:	00009517          	auipc	a0,0x9
    800134fa:	61a50513          	add	a0,a0,1562 # 8001cb10 <__func__.1+0x318>
    800134fe:	265070ef          	jal	8001af62 <printf>
    80013502:	00144783          	lbu	a5,1(s0)
    80013506:	c789                	beqz	a5,80013510 <load_guest_page_fault_1+0xba>
    80013508:	6418                	ld	a4,8(s0)
    8001350a:	47d5                	li	a5,21
    8001350c:	00f70c63          	beq	a4,a5,80013524 <load_guest_page_fault_1+0xce>
    80013510:	00009517          	auipc	a0,0x9
    80013514:	60850513          	add	a0,a0,1544 # 8001cb18 <__func__.1+0x320>
    80013518:	24b070ef          	jal	8001af62 <printf>
    8001351c:	02900513          	li	a0,41
    80013520:	115060ef          	jal	80019e34 <putchar>
    80013524:	4529                	li	a0,10
    80013526:	10f060ef          	jal	80019e34 <putchar>
    8001352a:	00144783          	lbu	a5,1(s0)
    8001352e:	4481                	li	s1,0
    80013530:	c789                	beqz	a5,8001353a <load_guest_page_fault_1+0xe4>
    80013532:	6404                	ld	s1,8(s0)
    80013534:	14ad                	add	s1,s1,-21
    80013536:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_LGPF
    );


    //执行hlvb指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    8001353a:	0ff0000f          	fence
    8001353e:	4785                	li	a5,1
    80013540:	00f41023          	sh	a5,0(s0)
    80013544:	0002a797          	auipc	a5,0x2a
    80013548:	b007b223          	sd	zero,-1276(a5) # 8003d048 <excpt+0x38>
    8001354c:	0ff0000f          	fence
    asm volatile(
    80013550:	001007b7          	lui	a5,0x100
    80013554:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80013558:	07b2                	sll	a5,a5,0xc
    8001355a:	6007c7f3          	.4byte	0x6007c7f3
    vaddr = hs_page_base(VSRWX_GI);

    hlvb(vaddr);   
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    8001355e:	08200593          	li	a1,130
    80013562:	0000e617          	auipc	a2,0xe
    80013566:	3fe60613          	add	a2,a2,1022 # 80021960 <__func__.1+0x5168>
    8001356a:	00009517          	auipc	a0,0x9
    8001356e:	58e50513          	add	a0,a0,1422 # 8001caf8 <__func__.1+0x300>
    80013572:	1f1070ef          	jal	8001af62 <printf>
    80013576:	00144783          	lbu	a5,1(s0)
    8001357a:	00009597          	auipc	a1,0x9
    8001357e:	55658593          	add	a1,a1,1366 # 8001cad0 <__func__.1+0x2d8>
    80013582:	c789                	beqz	a5,8001358c <load_guest_page_fault_1+0x136>
    80013584:	6418                	ld	a4,8(s0)
    80013586:	47d5                	li	a5,21
    80013588:	08f70063          	beq	a4,a5,80013608 <load_guest_page_fault_1+0x1b2>
    8001358c:	00009517          	auipc	a0,0x9
    80013590:	58450513          	add	a0,a0,1412 # 8001cb10 <__func__.1+0x318>
    80013594:	1cf070ef          	jal	8001af62 <printf>
    80013598:	00144783          	lbu	a5,1(s0)
    8001359c:	c789                	beqz	a5,800135a6 <load_guest_page_fault_1+0x150>
    8001359e:	6418                	ld	a4,8(s0)
    800135a0:	47d5                	li	a5,21
    800135a2:	00f70c63          	beq	a4,a5,800135ba <load_guest_page_fault_1+0x164>
    800135a6:	00009517          	auipc	a0,0x9
    800135aa:	57250513          	add	a0,a0,1394 # 8001cb18 <__func__.1+0x320>
    800135ae:	1b5070ef          	jal	8001af62 <printf>
    800135b2:	02900513          	li	a0,41
    800135b6:	07f060ef          	jal	80019e34 <putchar>
    800135ba:	4529                	li	a0,10
    800135bc:	079060ef          	jal	80019e34 <putchar>
    800135c0:	cc95                	beqz	s1,800135fc <load_guest_page_fault_1+0x1a6>
    800135c2:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    800135c6:	00009597          	auipc	a1,0x9
    800135ca:	50a58593          	add	a1,a1,1290 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    800135ce:	c491                	beqz	s1,800135da <load_guest_page_fault_1+0x184>
    800135d0:	6418                	ld	a4,8(s0)
    800135d2:	47d5                	li	a5,21
    800135d4:	04f70463          	beq	a4,a5,8001361c <load_guest_page_fault_1+0x1c6>
    800135d8:	4481                	li	s1,0
    TEST_END();
    800135da:	00009517          	auipc	a0,0x9
    800135de:	59e50513          	add	a0,a0,1438 # 8001cb78 <__func__.1+0x380>
    800135e2:	181070ef          	jal	8001af62 <printf>
    800135e6:	4511                	li	a0,4
    800135e8:	cf6ed0ef          	jal	80000ade <goto_priv>
    800135ec:	d3bed0ef          	jal	80001326 <reset_state>
}
    800135f0:	60e2                	ld	ra,24(sp)
    800135f2:	6442                	ld	s0,16(sp)
    800135f4:	8526                	mv	a0,s1
    800135f6:	64a2                	ld	s1,8(sp)
    800135f8:	6105                	add	sp,sp,32
    800135fa:	8082                	ret
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    800135fc:	4481                	li	s1,0
    TEST_END();
    800135fe:	00009597          	auipc	a1,0x9
    80013602:	4d258593          	add	a1,a1,1234 # 8001cad0 <__func__.1+0x2d8>
    80013606:	bfd1                	j	800135da <load_guest_page_fault_1+0x184>
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    80013608:	00009597          	auipc	a1,0x9
    8001360c:	4b858593          	add	a1,a1,1208 # 8001cac0 <__func__.1+0x2c8>
    80013610:	bfb5                	j	8001358c <load_guest_page_fault_1+0x136>
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    80013612:	00009597          	auipc	a1,0x9
    80013616:	4ae58593          	add	a1,a1,1198 # 8001cac0 <__func__.1+0x2c8>
    8001361a:	bdf1                	j	800134f6 <load_guest_page_fault_1+0xa0>
    TEST_END();
    8001361c:	00009597          	auipc	a1,0x9
    80013620:	4a458593          	add	a1,a1,1188 # 8001cac0 <__func__.1+0x2c8>
    80013624:	bf5d                	j	800135da <load_guest_page_fault_1+0x184>

0000000080013626 <load_guest_page_fault_2>:

bool load_guest_page_fault_2(){
    80013626:	1101                	add	sp,sp,-32

    TEST_START();
    80013628:	00009597          	auipc	a1,0x9
    8001362c:	96858593          	add	a1,a1,-1688 # 8001bf90 <__func__.34>
    80013630:	00009517          	auipc	a0,0x9
    80013634:	4b050513          	add	a0,a0,1200 # 8001cae0 <__func__.1+0x2e8>
bool load_guest_page_fault_2(){
    80013638:	ec06                	sd	ra,24(sp)
    8001363a:	e822                	sd	s0,16(sp)
    8001363c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001363e:	125070ef          	jal	8001af62 <printf>
    80013642:	4529                	li	a0,10
    80013644:	7f0060ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80013648:	450d                	li	a0,3
    8001364a:	c94ed0ef          	jal	80000ade <goto_priv>
    hspt_init();
    8001364e:	f93ec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80013652:	9d4ed0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80013656:	4509                	li	a0,2
    80013658:	c86ed0ef          	jal	80000ade <goto_priv>
    vspt_init();
    8001365c:	858ed0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80013660:	450d                	li	a0,3
    80013662:	c7ced0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80013666:	4509                	li	a0,2
    80013668:	b9aed0ef          	jal	80000a02 <set_prev_priv>

    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    8001366c:	0ff0000f          	fence
    80013670:	4785                	li	a5,1
    80013672:	0002a417          	auipc	s0,0x2a
    80013676:	99e40413          	add	s0,s0,-1634 # 8003d010 <excpt>
    8001367a:	00f41023          	sh	a5,0(s0)
    8001367e:	0002a797          	auipc	a5,0x2a
    80013682:	9c07b523          	sd	zero,-1590(a5) # 8003d048 <excpt+0x38>
    80013686:	0ff0000f          	fence
    vaddr = hs_page_base(VSRWX_GI);


    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001368a:	000807b7          	lui	a5,0x80
    8001368e:	1007b073          	csrc	sstatus,a5
    asm volatile(
    80013692:	001007b7          	lui	a5,0x100
    80013696:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8001369a:	07b2                	sll	a5,a5,0xc
    8001369c:	6407c7f3          	.4byte	0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    800136a0:	08200593          	li	a1,130
    800136a4:	0000e617          	auipc	a2,0xe
    800136a8:	31c60613          	add	a2,a2,796 # 800219c0 <__func__.1+0x51c8>
    800136ac:	00009517          	auipc	a0,0x9
    800136b0:	44c50513          	add	a0,a0,1100 # 8001caf8 <__func__.1+0x300>
    800136b4:	0af070ef          	jal	8001af62 <printf>
    800136b8:	00144783          	lbu	a5,1(s0)
    800136bc:	00009597          	auipc	a1,0x9
    800136c0:	41458593          	add	a1,a1,1044 # 8001cad0 <__func__.1+0x2d8>
    800136c4:	c789                	beqz	a5,800136ce <load_guest_page_fault_2+0xa8>
    800136c6:	6418                	ld	a4,8(s0)
    800136c8:	47d5                	li	a5,21
    800136ca:	06f70e63          	beq	a4,a5,80013746 <load_guest_page_fault_2+0x120>
    800136ce:	00009517          	auipc	a0,0x9
    800136d2:	44250513          	add	a0,a0,1090 # 8001cb10 <__func__.1+0x318>
    800136d6:	08d070ef          	jal	8001af62 <printf>
    800136da:	00144783          	lbu	a5,1(s0)
    800136de:	c789                	beqz	a5,800136e8 <load_guest_page_fault_2+0xc2>
    800136e0:	6418                	ld	a4,8(s0)
    800136e2:	47d5                	li	a5,21
    800136e4:	00f70c63          	beq	a4,a5,800136fc <load_guest_page_fault_2+0xd6>
    800136e8:	00009517          	auipc	a0,0x9
    800136ec:	43050513          	add	a0,a0,1072 # 8001cb18 <__func__.1+0x320>
    800136f0:	073070ef          	jal	8001af62 <printf>
    800136f4:	02900513          	li	a0,41
    800136f8:	73c060ef          	jal	80019e34 <putchar>
    800136fc:	4529                	li	a0,10
    800136fe:	736060ef          	jal	80019e34 <putchar>
    80013702:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80013706:	00009597          	auipc	a1,0x9
    8001370a:	3ca58593          	add	a1,a1,970 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    8001370e:	c491                	beqz	s1,8001371a <load_guest_page_fault_2+0xf4>
    80013710:	6418                	ld	a4,8(s0)
    80013712:	47d5                	li	a5,21
    80013714:	02f70463          	beq	a4,a5,8001373c <load_guest_page_fault_2+0x116>
    80013718:	4481                	li	s1,0
    TEST_END();
    8001371a:	00009517          	auipc	a0,0x9
    8001371e:	45e50513          	add	a0,a0,1118 # 8001cb78 <__func__.1+0x380>
    80013722:	041070ef          	jal	8001af62 <printf>
    80013726:	4511                	li	a0,4
    80013728:	bb6ed0ef          	jal	80000ade <goto_priv>
    8001372c:	bfbed0ef          	jal	80001326 <reset_state>
}
    80013730:	60e2                	ld	ra,24(sp)
    80013732:	6442                	ld	s0,16(sp)
    80013734:	8526                	mv	a0,s1
    80013736:	64a2                	ld	s1,8(sp)
    80013738:	6105                	add	sp,sp,32
    8001373a:	8082                	ret
    TEST_END();
    8001373c:	00009597          	auipc	a1,0x9
    80013740:	38458593          	add	a1,a1,900 # 8001cac0 <__func__.1+0x2c8>
    80013744:	bfd9                	j	8001371a <load_guest_page_fault_2+0xf4>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80013746:	00009597          	auipc	a1,0x9
    8001374a:	37a58593          	add	a1,a1,890 # 8001cac0 <__func__.1+0x2c8>
    8001374e:	b741                	j	800136ce <load_guest_page_fault_2+0xa8>

0000000080013750 <load_guest_page_fault_3>:

bool load_guest_page_fault_3(){
    80013750:	1101                	add	sp,sp,-32

    TEST_START();
    80013752:	00009597          	auipc	a1,0x9
    80013756:	85658593          	add	a1,a1,-1962 # 8001bfa8 <__func__.33>
    8001375a:	00009517          	auipc	a0,0x9
    8001375e:	38650513          	add	a0,a0,902 # 8001cae0 <__func__.1+0x2e8>
bool load_guest_page_fault_3(){
    80013762:	ec06                	sd	ra,24(sp)
    80013764:	e822                	sd	s0,16(sp)
    80013766:	e426                	sd	s1,8(sp)
    TEST_START();
    80013768:	7fa070ef          	jal	8001af62 <printf>
    8001376c:	4529                	li	a0,10
    8001376e:	6c6060ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80013772:	450d                	li	a0,3
    80013774:	b6aed0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80013778:	e69ec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001377c:	8aaed0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80013780:	4509                	li	a0,2
    80013782:	b5ced0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80013786:	f2fec0ef          	jal	800006b4 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    8001378a:	450d                	li	a0,3
    8001378c:	b52ed0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80013790:	4509                	li	a0,2
    80013792:	a70ed0ef          	jal	80000a02 <set_prev_priv>
    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80013796:	0ff0000f          	fence
    8001379a:	4785                	li	a5,1
    8001379c:	0002a417          	auipc	s0,0x2a
    800137a0:	87440413          	add	s0,s0,-1932 # 8003d010 <excpt>
    800137a4:	00f41023          	sh	a5,0(s0)
    800137a8:	0002a797          	auipc	a5,0x2a
    800137ac:	8a07b023          	sd	zero,-1888(a5) # 8003d048 <excpt+0x38>
    800137b0:	0ff0000f          	fence
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    800137b4:	000807b7          	lui	a5,0x80
    800137b8:	1007a073          	csrs	sstatus,a5
    800137bc:	001007b7          	lui	a5,0x100
    800137c0:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800137c4:	07b2                	sll	a5,a5,0xc
    800137c6:	6407c7f3          	.4byte	0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    800137ca:	08200593          	li	a1,130
    800137ce:	0000e617          	auipc	a2,0xe
    800137d2:	25260613          	add	a2,a2,594 # 80021a20 <__func__.1+0x5228>
    800137d6:	00009517          	auipc	a0,0x9
    800137da:	32250513          	add	a0,a0,802 # 8001caf8 <__func__.1+0x300>
    800137de:	784070ef          	jal	8001af62 <printf>
    800137e2:	00144783          	lbu	a5,1(s0)
    800137e6:	00009597          	auipc	a1,0x9
    800137ea:	2ea58593          	add	a1,a1,746 # 8001cad0 <__func__.1+0x2d8>
    800137ee:	c789                	beqz	a5,800137f8 <load_guest_page_fault_3+0xa8>
    800137f0:	6418                	ld	a4,8(s0)
    800137f2:	47d5                	li	a5,21
    800137f4:	06f70e63          	beq	a4,a5,80013870 <load_guest_page_fault_3+0x120>
    800137f8:	00009517          	auipc	a0,0x9
    800137fc:	31850513          	add	a0,a0,792 # 8001cb10 <__func__.1+0x318>
    80013800:	762070ef          	jal	8001af62 <printf>
    80013804:	00144783          	lbu	a5,1(s0)
    80013808:	c789                	beqz	a5,80013812 <load_guest_page_fault_3+0xc2>
    8001380a:	6418                	ld	a4,8(s0)
    8001380c:	47d5                	li	a5,21
    8001380e:	00f70c63          	beq	a4,a5,80013826 <load_guest_page_fault_3+0xd6>
    80013812:	00009517          	auipc	a0,0x9
    80013816:	30650513          	add	a0,a0,774 # 8001cb18 <__func__.1+0x320>
    8001381a:	748070ef          	jal	8001af62 <printf>
    8001381e:	02900513          	li	a0,41
    80013822:	612060ef          	jal	80019e34 <putchar>
    80013826:	4529                	li	a0,10
    80013828:	60c060ef          	jal	80019e34 <putchar>
    8001382c:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    80013830:	00009597          	auipc	a1,0x9
    80013834:	2a058593          	add	a1,a1,672 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80013838:	c491                	beqz	s1,80013844 <load_guest_page_fault_3+0xf4>
    8001383a:	6418                	ld	a4,8(s0)
    8001383c:	47d5                	li	a5,21
    8001383e:	02f70463          	beq	a4,a5,80013866 <load_guest_page_fault_3+0x116>
    80013842:	4481                	li	s1,0
    TEST_END();
    80013844:	00009517          	auipc	a0,0x9
    80013848:	33450513          	add	a0,a0,820 # 8001cb78 <__func__.1+0x380>
    8001384c:	716070ef          	jal	8001af62 <printf>
    80013850:	4511                	li	a0,4
    80013852:	a8ced0ef          	jal	80000ade <goto_priv>
    80013856:	ad1ed0ef          	jal	80001326 <reset_state>
}
    8001385a:	60e2                	ld	ra,24(sp)
    8001385c:	6442                	ld	s0,16(sp)
    8001385e:	8526                	mv	a0,s1
    80013860:	64a2                	ld	s1,8(sp)
    80013862:	6105                	add	sp,sp,32
    80013864:	8082                	ret
    TEST_END();
    80013866:	00009597          	auipc	a1,0x9
    8001386a:	25a58593          	add	a1,a1,602 # 8001cac0 <__func__.1+0x2c8>
    8001386e:	bfd9                	j	80013844 <load_guest_page_fault_3+0xf4>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80013870:	00009597          	auipc	a1,0x9
    80013874:	25058593          	add	a1,a1,592 # 8001cac0 <__func__.1+0x2c8>
    80013878:	b741                	j	800137f8 <load_guest_page_fault_3+0xa8>

000000008001387a <load_guest_page_fault_4>:

bool load_guest_page_fault_4(){
    8001387a:	1101                	add	sp,sp,-32

    TEST_START();
    8001387c:	00008597          	auipc	a1,0x8
    80013880:	74458593          	add	a1,a1,1860 # 8001bfc0 <__func__.32>
    80013884:	00009517          	auipc	a0,0x9
    80013888:	25c50513          	add	a0,a0,604 # 8001cae0 <__func__.1+0x2e8>
bool load_guest_page_fault_4(){
    8001388c:	ec06                	sd	ra,24(sp)
    8001388e:	e822                	sd	s0,16(sp)
    80013890:	e426                	sd	s1,8(sp)
    TEST_START();
    80013892:	6d0070ef          	jal	8001af62 <printf>
    80013896:	4529                	li	a0,10
    80013898:	59c060ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    8001389c:	450d                	li	a0,3
    8001389e:	a40ed0ef          	jal	80000ade <goto_priv>
    hspt_init();
    800138a2:	d3fec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800138a6:	f81ec0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    800138aa:	4509                	li	a0,2
    800138ac:	a32ed0ef          	jal	80000ade <goto_priv>
    vspt_init();
    800138b0:	e05ec0ef          	jal	800006b4 <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    800138b4:	4511                	li	a0,4
    800138b6:	a28ed0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800138ba:	000407b7          	lui	a5,0x40
    800138be:	2007b073          	csrc	vsstatus,a5
    

    goto_priv(PRIV_HS);
    800138c2:	450d                	li	a0,3
    800138c4:	a1aed0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    800138c8:	4509                	li	a0,2
    800138ca:	938ed0ef          	jal	80000a02 <set_prev_priv>
    //执行hlvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800138ce:	0ff0000f          	fence
    800138d2:	4785                	li	a5,1
    800138d4:	00029417          	auipc	s0,0x29
    800138d8:	73c40413          	add	s0,s0,1852 # 8003d010 <excpt>
    800138dc:	00f41023          	sh	a5,0(s0)
    800138e0:	00029797          	auipc	a5,0x29
    800138e4:	7607b423          	sd	zero,1896(a5) # 8003d048 <excpt+0x38>
    800138e8:	0ff0000f          	fence
    asm volatile(
    800138ec:	000807b7          	lui	a5,0x80
    800138f0:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800138f2:	07b6                	sll	a5,a5,0xd
    800138f4:	6007c7f3          	.4byte	0x6007c7f3
    vaddr = hs_page_base(VSURWX_GURWX);


    hlvb(vaddr);
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    800138f8:	08200593          	li	a1,130
    800138fc:	0000e617          	auipc	a2,0xe
    80013900:	19460613          	add	a2,a2,404 # 80021a90 <__func__.1+0x5298>
    80013904:	00009517          	auipc	a0,0x9
    80013908:	1f450513          	add	a0,a0,500 # 8001caf8 <__func__.1+0x300>
    8001390c:	656070ef          	jal	8001af62 <printf>
    80013910:	00144783          	lbu	a5,1(s0)
    80013914:	00009597          	auipc	a1,0x9
    80013918:	1bc58593          	add	a1,a1,444 # 8001cad0 <__func__.1+0x2d8>
    8001391c:	c789                	beqz	a5,80013926 <load_guest_page_fault_4+0xac>
    8001391e:	6418                	ld	a4,8(s0)
    80013920:	47b5                	li	a5,13
    80013922:	06f70e63          	beq	a4,a5,8001399e <load_guest_page_fault_4+0x124>
    80013926:	00009517          	auipc	a0,0x9
    8001392a:	1ea50513          	add	a0,a0,490 # 8001cb10 <__func__.1+0x318>
    8001392e:	634070ef          	jal	8001af62 <printf>
    80013932:	00144783          	lbu	a5,1(s0)
    80013936:	c789                	beqz	a5,80013940 <load_guest_page_fault_4+0xc6>
    80013938:	6418                	ld	a4,8(s0)
    8001393a:	47b5                	li	a5,13
    8001393c:	00f70c63          	beq	a4,a5,80013954 <load_guest_page_fault_4+0xda>
    80013940:	00009517          	auipc	a0,0x9
    80013944:	1d850513          	add	a0,a0,472 # 8001cb18 <__func__.1+0x320>
    80013948:	61a070ef          	jal	8001af62 <printf>
    8001394c:	02900513          	li	a0,41
    80013950:	4e4060ef          	jal	80019e34 <putchar>
    80013954:	4529                	li	a0,10
    80013956:	4de060ef          	jal	80019e34 <putchar>
    8001395a:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    8001395e:	00009597          	auipc	a1,0x9
    80013962:	17258593          	add	a1,a1,370 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    80013966:	c491                	beqz	s1,80013972 <load_guest_page_fault_4+0xf8>
    80013968:	6418                	ld	a4,8(s0)
    8001396a:	47b5                	li	a5,13
    8001396c:	02f70463          	beq	a4,a5,80013994 <load_guest_page_fault_4+0x11a>
    80013970:	4481                	li	s1,0
    TEST_END();
    80013972:	00009517          	auipc	a0,0x9
    80013976:	20650513          	add	a0,a0,518 # 8001cb78 <__func__.1+0x380>
    8001397a:	5e8070ef          	jal	8001af62 <printf>
    8001397e:	4511                	li	a0,4
    80013980:	95eed0ef          	jal	80000ade <goto_priv>
    80013984:	9a3ed0ef          	jal	80001326 <reset_state>
}
    80013988:	60e2                	ld	ra,24(sp)
    8001398a:	6442                	ld	s0,16(sp)
    8001398c:	8526                	mv	a0,s1
    8001398e:	64a2                	ld	s1,8(sp)
    80013990:	6105                	add	sp,sp,32
    80013992:	8082                	ret
    TEST_END();
    80013994:	00009597          	auipc	a1,0x9
    80013998:	12c58593          	add	a1,a1,300 # 8001cac0 <__func__.1+0x2c8>
    8001399c:	bfd9                	j	80013972 <load_guest_page_fault_4+0xf8>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    8001399e:	00009597          	auipc	a1,0x9
    800139a2:	12258593          	add	a1,a1,290 # 8001cac0 <__func__.1+0x2c8>
    800139a6:	b741                	j	80013926 <load_guest_page_fault_4+0xac>

00000000800139a8 <load_guest_page_fault_5>:

bool load_guest_page_fault_5(){
    800139a8:	1141                	add	sp,sp,-16

    TEST_START();
    800139aa:	00008597          	auipc	a1,0x8
    800139ae:	62e58593          	add	a1,a1,1582 # 8001bfd8 <__func__.31>
    800139b2:	00009517          	auipc	a0,0x9
    800139b6:	12e50513          	add	a0,a0,302 # 8001cae0 <__func__.1+0x2e8>
bool load_guest_page_fault_5(){
    800139ba:	e406                	sd	ra,8(sp)
    800139bc:	e022                	sd	s0,0(sp)
    TEST_START();
    800139be:	5a4070ef          	jal	8001af62 <printf>
    800139c2:	4529                	li	a0,10
    800139c4:	470060ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    800139c8:	450d                	li	a0,3
    800139ca:	914ed0ef          	jal	80000ade <goto_priv>
    hspt_init();
    800139ce:	c13ec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800139d2:	e55ec0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    800139d6:	4509                	li	a0,2
    800139d8:	906ed0ef          	jal	80000ade <goto_priv>
    vspt_init();
    800139dc:	cd9ec0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    800139e0:	4511                	li	a0,4
    800139e2:	8fced0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    800139e6:	000407b7          	lui	a5,0x40
    800139ea:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    800139ee:	450d                	li	a0,3
    800139f0:	8eeed0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    800139f4:	4509                	li	a0,2
    800139f6:	80ced0ef          	jal	80000a02 <set_prev_priv>

    //执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    800139fa:	0ff0000f          	fence
    800139fe:	4785                	li	a5,1
    80013a00:	00029417          	auipc	s0,0x29
    80013a04:	61040413          	add	s0,s0,1552 # 8003d010 <excpt>
    80013a08:	00f41023          	sh	a5,0(s0)
    80013a0c:	00029797          	auipc	a5,0x29
    80013a10:	6207be23          	sd	zero,1596(a5) # 8003d048 <excpt+0x38>
    80013a14:	0ff0000f          	fence
    80013a18:	000807b7          	lui	a5,0x80
    80013a1c:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80013a1e:	07b6                	sll	a5,a5,0xd
    80013a20:	6007c7f3          	.4byte	0x6007c7f3
    hlvb(vaddr);
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80013a24:	08200593          	li	a1,130
    80013a28:	0000d617          	auipc	a2,0xd
    80013a2c:	79860613          	add	a2,a2,1944 # 800211c0 <__func__.1+0x49c8>
    80013a30:	00009517          	auipc	a0,0x9
    80013a34:	0c850513          	add	a0,a0,200 # 8001caf8 <__func__.1+0x300>
    80013a38:	52a070ef          	jal	8001af62 <printf>
    80013a3c:	00144783          	lbu	a5,1(s0)
    80013a40:	00009597          	auipc	a1,0x9
    80013a44:	08058593          	add	a1,a1,128 # 8001cac0 <__func__.1+0x2c8>
    80013a48:	c789                	beqz	a5,80013a52 <load_guest_page_fault_5+0xaa>
    80013a4a:	00009597          	auipc	a1,0x9
    80013a4e:	08658593          	add	a1,a1,134 # 8001cad0 <__func__.1+0x2d8>
    80013a52:	00009517          	auipc	a0,0x9
    80013a56:	0be50513          	add	a0,a0,190 # 8001cb10 <__func__.1+0x318>
    80013a5a:	508070ef          	jal	8001af62 <printf>
    80013a5e:	00144783          	lbu	a5,1(s0)
    80013a62:	e3b1                	bnez	a5,80013aa6 <load_guest_page_fault_5+0xfe>
    80013a64:	4529                	li	a0,10
    80013a66:	3ce060ef          	jal	80019e34 <putchar>
    80013a6a:	00144783          	lbu	a5,1(s0)
    80013a6e:	e795                	bnez	a5,80013a9a <load_guest_page_fault_5+0xf2>
    80013a70:	4405                	li	s0,1
    );

    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80013a72:	00009597          	auipc	a1,0x9
    80013a76:	04e58593          	add	a1,a1,78 # 8001cac0 <__func__.1+0x2c8>
    80013a7a:	00009517          	auipc	a0,0x9
    80013a7e:	0fe50513          	add	a0,a0,254 # 8001cb78 <__func__.1+0x380>
    80013a82:	4e0070ef          	jal	8001af62 <printf>
    80013a86:	4511                	li	a0,4
    80013a88:	856ed0ef          	jal	80000ade <goto_priv>
    80013a8c:	89bed0ef          	jal	80001326 <reset_state>
}
    80013a90:	60a2                	ld	ra,8(sp)
    80013a92:	8522                	mv	a0,s0
    80013a94:	6402                	ld	s0,0(sp)
    80013a96:	0141                	add	sp,sp,16
    80013a98:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80013a9a:	4401                	li	s0,0
    TEST_END();
    80013a9c:	00009597          	auipc	a1,0x9
    80013aa0:	03458593          	add	a1,a1,52 # 8001cad0 <__func__.1+0x2d8>
    80013aa4:	bfd9                	j	80013a7a <load_guest_page_fault_5+0xd2>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80013aa6:	00009517          	auipc	a0,0x9
    80013aaa:	07250513          	add	a0,a0,114 # 8001cb18 <__func__.1+0x320>
    80013aae:	4b4070ef          	jal	8001af62 <printf>
    80013ab2:	02900513          	li	a0,41
    80013ab6:	37e060ef          	jal	80019e34 <putchar>
    80013aba:	b76d                	j	80013a64 <load_guest_page_fault_5+0xbc>

0000000080013abc <load_guest_page_fault_6>:

bool load_guest_page_fault_6(){
    80013abc:	1101                	add	sp,sp,-32

    TEST_START();
    80013abe:	00008597          	auipc	a1,0x8
    80013ac2:	53258593          	add	a1,a1,1330 # 8001bff0 <__func__.30>
    80013ac6:	00009517          	auipc	a0,0x9
    80013aca:	01a50513          	add	a0,a0,26 # 8001cae0 <__func__.1+0x2e8>
bool load_guest_page_fault_6(){
    80013ace:	ec06                	sd	ra,24(sp)
    80013ad0:	e822                	sd	s0,16(sp)
    80013ad2:	e426                	sd	s1,8(sp)
    TEST_START();
    80013ad4:	48e070ef          	jal	8001af62 <printf>
    80013ad8:	4529                	li	a0,10
    80013ada:	35a060ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80013ade:	450d                	li	a0,3
    80013ae0:	fffec0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80013ae4:	afdec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80013ae8:	d3fec0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80013aec:	4509                	li	a0,2
    80013aee:	ff1ec0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80013af2:	bc3ec0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80013af6:	4509                	li	a0,2
    80013af8:	fe7ec0ef          	jal	80000ade <goto_priv>

    //执行lb指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80013afc:	0ff0000f          	fence
    80013b00:	4785                	li	a5,1
    80013b02:	00029417          	auipc	s0,0x29
    80013b06:	50e40413          	add	s0,s0,1294 # 8003d010 <excpt>
    80013b0a:	00f41023          	sh	a5,0(s0)
    80013b0e:	00029797          	auipc	a5,0x29
    80013b12:	5207bd23          	sd	zero,1338(a5) # 8003d048 <excpt+0x38>
    80013b16:	0ff0000f          	fence
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80013b1a:	001007b7          	lui	a5,0x100
    80013b1e:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80013b22:	07b2                	sll	a5,a5,0xc
    80013b24:	00078783          	lb	a5,0(a5)

    vaddr = hs_page_base(VSRWX_GI);
    lb(vaddr);
    TEST_ASSERT("vs mode lb when the second-stage address translation pte.v=0 leads to LGPF",
    80013b28:	08200593          	li	a1,130
    80013b2c:	0000e617          	auipc	a2,0xe
    80013b30:	fa460613          	add	a2,a2,-92 # 80021ad0 <__func__.1+0x52d8>
    80013b34:	00009517          	auipc	a0,0x9
    80013b38:	fc450513          	add	a0,a0,-60 # 8001caf8 <__func__.1+0x300>
    80013b3c:	426070ef          	jal	8001af62 <printf>
    80013b40:	00144783          	lbu	a5,1(s0)
    80013b44:	00009597          	auipc	a1,0x9
    80013b48:	f8c58593          	add	a1,a1,-116 # 8001cad0 <__func__.1+0x2d8>
    80013b4c:	c789                	beqz	a5,80013b56 <load_guest_page_fault_6+0x9a>
    80013b4e:	6418                	ld	a4,8(s0)
    80013b50:	47d5                	li	a5,21
    80013b52:	12f70063          	beq	a4,a5,80013c72 <load_guest_page_fault_6+0x1b6>
    80013b56:	00009517          	auipc	a0,0x9
    80013b5a:	fba50513          	add	a0,a0,-70 # 8001cb10 <__func__.1+0x318>
    80013b5e:	404070ef          	jal	8001af62 <printf>
    80013b62:	00144783          	lbu	a5,1(s0)
    80013b66:	c789                	beqz	a5,80013b70 <load_guest_page_fault_6+0xb4>
    80013b68:	6418                	ld	a4,8(s0)
    80013b6a:	47d5                	li	a5,21
    80013b6c:	00f70c63          	beq	a4,a5,80013b84 <load_guest_page_fault_6+0xc8>
    80013b70:	00009517          	auipc	a0,0x9
    80013b74:	fa850513          	add	a0,a0,-88 # 8001cb18 <__func__.1+0x320>
    80013b78:	3ea070ef          	jal	8001af62 <printf>
    80013b7c:	02900513          	li	a0,41
    80013b80:	2b4060ef          	jal	80019e34 <putchar>
    80013b84:	4529                	li	a0,10
    80013b86:	2ae060ef          	jal	80019e34 <putchar>
    80013b8a:	00144783          	lbu	a5,1(s0)
    80013b8e:	4481                	li	s1,0
    80013b90:	c789                	beqz	a5,80013b9a <load_guest_page_fault_6+0xde>
    80013b92:	6404                	ld	s1,8(s0)
    80013b94:	14ad                	add	s1,s1,-21
    80013b96:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_LGPF
    );


    //执行ld指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    80013b9a:	0ff0000f          	fence
    80013b9e:	4785                	li	a5,1
    80013ba0:	00f41023          	sh	a5,0(s0)
    80013ba4:	00029797          	auipc	a5,0x29
    80013ba8:	4a07b223          	sd	zero,1188(a5) # 8003d048 <excpt+0x38>
    80013bac:	0ff0000f          	fence
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    80013bb0:	001007b7          	lui	a5,0x100
    80013bb4:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80013bb8:	07b2                	sll	a5,a5,0xc
    80013bba:	0007b783          	ld	a5,0(a5)
    vaddr = hs_page_base(VSRWX_GI);

    ld(vaddr);   
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    80013bbe:	08200593          	li	a1,130
    80013bc2:	0000e617          	auipc	a2,0xe
    80013bc6:	f5e60613          	add	a2,a2,-162 # 80021b20 <__func__.1+0x5328>
    80013bca:	00009517          	auipc	a0,0x9
    80013bce:	f2e50513          	add	a0,a0,-210 # 8001caf8 <__func__.1+0x300>
    80013bd2:	390070ef          	jal	8001af62 <printf>
    80013bd6:	00144783          	lbu	a5,1(s0)
    80013bda:	00009597          	auipc	a1,0x9
    80013bde:	ef658593          	add	a1,a1,-266 # 8001cad0 <__func__.1+0x2d8>
    80013be2:	c789                	beqz	a5,80013bec <load_guest_page_fault_6+0x130>
    80013be4:	6418                	ld	a4,8(s0)
    80013be6:	47d5                	li	a5,21
    80013be8:	08f70063          	beq	a4,a5,80013c68 <load_guest_page_fault_6+0x1ac>
    80013bec:	00009517          	auipc	a0,0x9
    80013bf0:	f2450513          	add	a0,a0,-220 # 8001cb10 <__func__.1+0x318>
    80013bf4:	36e070ef          	jal	8001af62 <printf>
    80013bf8:	00144783          	lbu	a5,1(s0)
    80013bfc:	c789                	beqz	a5,80013c06 <load_guest_page_fault_6+0x14a>
    80013bfe:	6418                	ld	a4,8(s0)
    80013c00:	47d5                	li	a5,21
    80013c02:	00f70c63          	beq	a4,a5,80013c1a <load_guest_page_fault_6+0x15e>
    80013c06:	00009517          	auipc	a0,0x9
    80013c0a:	f1250513          	add	a0,a0,-238 # 8001cb18 <__func__.1+0x320>
    80013c0e:	354070ef          	jal	8001af62 <printf>
    80013c12:	02900513          	li	a0,41
    80013c16:	21e060ef          	jal	80019e34 <putchar>
    80013c1a:	4529                	li	a0,10
    80013c1c:	218060ef          	jal	80019e34 <putchar>
    80013c20:	cc95                	beqz	s1,80013c5c <load_guest_page_fault_6+0x1a0>
    80013c22:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80013c26:	00009597          	auipc	a1,0x9
    80013c2a:	eaa58593          	add	a1,a1,-342 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    80013c2e:	c491                	beqz	s1,80013c3a <load_guest_page_fault_6+0x17e>
    80013c30:	6418                	ld	a4,8(s0)
    80013c32:	47d5                	li	a5,21
    80013c34:	04f70463          	beq	a4,a5,80013c7c <load_guest_page_fault_6+0x1c0>
    80013c38:	4481                	li	s1,0
    TEST_END();
    80013c3a:	00009517          	auipc	a0,0x9
    80013c3e:	f3e50513          	add	a0,a0,-194 # 8001cb78 <__func__.1+0x380>
    80013c42:	320070ef          	jal	8001af62 <printf>
    80013c46:	4511                	li	a0,4
    80013c48:	e97ec0ef          	jal	80000ade <goto_priv>
    80013c4c:	edaed0ef          	jal	80001326 <reset_state>
}
    80013c50:	60e2                	ld	ra,24(sp)
    80013c52:	6442                	ld	s0,16(sp)
    80013c54:	8526                	mv	a0,s1
    80013c56:	64a2                	ld	s1,8(sp)
    80013c58:	6105                	add	sp,sp,32
    80013c5a:	8082                	ret
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    80013c5c:	4481                	li	s1,0
    TEST_END();
    80013c5e:	00009597          	auipc	a1,0x9
    80013c62:	e7258593          	add	a1,a1,-398 # 8001cad0 <__func__.1+0x2d8>
    80013c66:	bfd1                	j	80013c3a <load_guest_page_fault_6+0x17e>
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    80013c68:	00009597          	auipc	a1,0x9
    80013c6c:	e5858593          	add	a1,a1,-424 # 8001cac0 <__func__.1+0x2c8>
    80013c70:	bfb5                	j	80013bec <load_guest_page_fault_6+0x130>
    TEST_ASSERT("vs mode lb when the second-stage address translation pte.v=0 leads to LGPF",
    80013c72:	00009597          	auipc	a1,0x9
    80013c76:	e4e58593          	add	a1,a1,-434 # 8001cac0 <__func__.1+0x2c8>
    80013c7a:	bdf1                	j	80013b56 <load_guest_page_fault_6+0x9a>
    TEST_END();
    80013c7c:	00009597          	auipc	a1,0x9
    80013c80:	e4458593          	add	a1,a1,-444 # 8001cac0 <__func__.1+0x2c8>
    80013c84:	bf5d                	j	80013c3a <load_guest_page_fault_6+0x17e>

0000000080013c86 <load_guest_page_fault_7>:

bool load_guest_page_fault_7(){
    80013c86:	1101                	add	sp,sp,-32

    TEST_START();
    80013c88:	00008597          	auipc	a1,0x8
    80013c8c:	38058593          	add	a1,a1,896 # 8001c008 <__func__.29>
    80013c90:	00009517          	auipc	a0,0x9
    80013c94:	e5050513          	add	a0,a0,-432 # 8001cae0 <__func__.1+0x2e8>
bool load_guest_page_fault_7(){
    80013c98:	ec06                	sd	ra,24(sp)
    80013c9a:	e822                	sd	s0,16(sp)
    80013c9c:	e426                	sd	s1,8(sp)
    TEST_START();
    80013c9e:	2c4070ef          	jal	8001af62 <printf>
    80013ca2:	4529                	li	a0,10
    80013ca4:	190060ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80013ca8:	450d                	li	a0,3
    80013caa:	e35ec0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80013cae:	933ec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80013cb2:	b75ec0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80013cb6:	4509                	li	a0,2
    80013cb8:	e27ec0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80013cbc:	9f9ec0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80013cc0:	4509                	li	a0,2
    80013cc2:	e1dec0ef          	jal	80000ade <goto_priv>

    //执行lh指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    80013cc6:	0ff0000f          	fence
    80013cca:	4785                	li	a5,1
    80013ccc:	00029417          	auipc	s0,0x29
    80013cd0:	34440413          	add	s0,s0,836 # 8003d010 <excpt>
    80013cd4:	00f41023          	sh	a5,0(s0)
    80013cd8:	00029797          	auipc	a5,0x29
    80013cdc:	3607b823          	sd	zero,880(a5) # 8003d048 <excpt+0x38>
    80013ce0:	0ff0000f          	fence
    vaddr = hs_page_base(VSRWX_GI);


    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80013ce4:	000807b7          	lui	a5,0x80
    80013ce8:	1007b073          	csrc	sstatus,a5
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    80013cec:	001007b7          	lui	a5,0x100
    80013cf0:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80013cf4:	07b2                	sll	a5,a5,0xc
    80013cf6:	00079783          	lh	a5,0(a5)
    lh(vaddr);
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80013cfa:	08200593          	li	a1,130
    80013cfe:	0000e617          	auipc	a2,0xe
    80013d02:	e7a60613          	add	a2,a2,-390 # 80021b78 <__func__.1+0x5380>
    80013d06:	00009517          	auipc	a0,0x9
    80013d0a:	df250513          	add	a0,a0,-526 # 8001caf8 <__func__.1+0x300>
    80013d0e:	254070ef          	jal	8001af62 <printf>
    80013d12:	00144783          	lbu	a5,1(s0)
    80013d16:	00009597          	auipc	a1,0x9
    80013d1a:	dba58593          	add	a1,a1,-582 # 8001cad0 <__func__.1+0x2d8>
    80013d1e:	c789                	beqz	a5,80013d28 <load_guest_page_fault_7+0xa2>
    80013d20:	6418                	ld	a4,8(s0)
    80013d22:	47d5                	li	a5,21
    80013d24:	06f70e63          	beq	a4,a5,80013da0 <load_guest_page_fault_7+0x11a>
    80013d28:	00009517          	auipc	a0,0x9
    80013d2c:	de850513          	add	a0,a0,-536 # 8001cb10 <__func__.1+0x318>
    80013d30:	232070ef          	jal	8001af62 <printf>
    80013d34:	00144783          	lbu	a5,1(s0)
    80013d38:	c789                	beqz	a5,80013d42 <load_guest_page_fault_7+0xbc>
    80013d3a:	6418                	ld	a4,8(s0)
    80013d3c:	47d5                	li	a5,21
    80013d3e:	00f70c63          	beq	a4,a5,80013d56 <load_guest_page_fault_7+0xd0>
    80013d42:	00009517          	auipc	a0,0x9
    80013d46:	dd650513          	add	a0,a0,-554 # 8001cb18 <__func__.1+0x320>
    80013d4a:	218070ef          	jal	8001af62 <printf>
    80013d4e:	02900513          	li	a0,41
    80013d52:	0e2060ef          	jal	80019e34 <putchar>
    80013d56:	4529                	li	a0,10
    80013d58:	0dc060ef          	jal	80019e34 <putchar>
    80013d5c:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80013d60:	00009597          	auipc	a1,0x9
    80013d64:	d7058593          	add	a1,a1,-656 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80013d68:	c491                	beqz	s1,80013d74 <load_guest_page_fault_7+0xee>
    80013d6a:	6418                	ld	a4,8(s0)
    80013d6c:	47d5                	li	a5,21
    80013d6e:	02f70463          	beq	a4,a5,80013d96 <load_guest_page_fault_7+0x110>
    80013d72:	4481                	li	s1,0
    TEST_END();
    80013d74:	00009517          	auipc	a0,0x9
    80013d78:	e0450513          	add	a0,a0,-508 # 8001cb78 <__func__.1+0x380>
    80013d7c:	1e6070ef          	jal	8001af62 <printf>
    80013d80:	4511                	li	a0,4
    80013d82:	d5dec0ef          	jal	80000ade <goto_priv>
    80013d86:	da0ed0ef          	jal	80001326 <reset_state>
}
    80013d8a:	60e2                	ld	ra,24(sp)
    80013d8c:	6442                	ld	s0,16(sp)
    80013d8e:	8526                	mv	a0,s1
    80013d90:	64a2                	ld	s1,8(sp)
    80013d92:	6105                	add	sp,sp,32
    80013d94:	8082                	ret
    TEST_END();
    80013d96:	00009597          	auipc	a1,0x9
    80013d9a:	d2a58593          	add	a1,a1,-726 # 8001cac0 <__func__.1+0x2c8>
    80013d9e:	bfd9                	j	80013d74 <load_guest_page_fault_7+0xee>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80013da0:	00009597          	auipc	a1,0x9
    80013da4:	d2058593          	add	a1,a1,-736 # 8001cac0 <__func__.1+0x2c8>
    80013da8:	b741                	j	80013d28 <load_guest_page_fault_7+0xa2>

0000000080013daa <load_guest_page_fault_8>:

bool load_guest_page_fault_8(){
    80013daa:	1101                	add	sp,sp,-32

    TEST_START();
    80013dac:	00008597          	auipc	a1,0x8
    80013db0:	27458593          	add	a1,a1,628 # 8001c020 <__func__.28>
    80013db4:	00009517          	auipc	a0,0x9
    80013db8:	d2c50513          	add	a0,a0,-724 # 8001cae0 <__func__.1+0x2e8>
bool load_guest_page_fault_8(){
    80013dbc:	ec06                	sd	ra,24(sp)
    80013dbe:	e822                	sd	s0,16(sp)
    80013dc0:	e426                	sd	s1,8(sp)
    TEST_START();
    80013dc2:	1a0070ef          	jal	8001af62 <printf>
    80013dc6:	4529                	li	a0,10
    80013dc8:	06c060ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80013dcc:	450d                	li	a0,3
    80013dce:	d11ec0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80013dd2:	80fec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80013dd6:	a51ec0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80013dda:	4509                	li	a0,2
    80013ddc:	d03ec0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80013de0:	8d5ec0ef          	jal	800006b4 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80013de4:	4509                	li	a0,2
    80013de6:	cf9ec0ef          	jal	80000ade <goto_priv>

    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80013dea:	0ff0000f          	fence
    80013dee:	4785                	li	a5,1
    80013df0:	00029417          	auipc	s0,0x29
    80013df4:	22040413          	add	s0,s0,544 # 8003d010 <excpt>
    80013df8:	00f41023          	sh	a5,0(s0)
    80013dfc:	00029797          	auipc	a5,0x29
    80013e00:	2407b623          	sd	zero,588(a5) # 8003d048 <excpt+0x38>
    80013e04:	0ff0000f          	fence
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80013e08:	000807b7          	lui	a5,0x80
    80013e0c:	1007a073          	csrs	sstatus,a5
    80013e10:	001007b7          	lui	a5,0x100
    80013e14:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80013e18:	07b2                	sll	a5,a5,0xc
    80013e1a:	00079783          	lh	a5,0(a5)
    lh(vaddr);
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80013e1e:	08200593          	li	a1,130
    80013e22:	0000e617          	auipc	a2,0xe
    80013e26:	db660613          	add	a2,a2,-586 # 80021bd8 <__func__.1+0x53e0>
    80013e2a:	00009517          	auipc	a0,0x9
    80013e2e:	cce50513          	add	a0,a0,-818 # 8001caf8 <__func__.1+0x300>
    80013e32:	130070ef          	jal	8001af62 <printf>
    80013e36:	00144783          	lbu	a5,1(s0)
    80013e3a:	00009597          	auipc	a1,0x9
    80013e3e:	c9658593          	add	a1,a1,-874 # 8001cad0 <__func__.1+0x2d8>
    80013e42:	c789                	beqz	a5,80013e4c <load_guest_page_fault_8+0xa2>
    80013e44:	6418                	ld	a4,8(s0)
    80013e46:	47d5                	li	a5,21
    80013e48:	06f70e63          	beq	a4,a5,80013ec4 <load_guest_page_fault_8+0x11a>
    80013e4c:	00009517          	auipc	a0,0x9
    80013e50:	cc450513          	add	a0,a0,-828 # 8001cb10 <__func__.1+0x318>
    80013e54:	10e070ef          	jal	8001af62 <printf>
    80013e58:	00144783          	lbu	a5,1(s0)
    80013e5c:	c789                	beqz	a5,80013e66 <load_guest_page_fault_8+0xbc>
    80013e5e:	6418                	ld	a4,8(s0)
    80013e60:	47d5                	li	a5,21
    80013e62:	00f70c63          	beq	a4,a5,80013e7a <load_guest_page_fault_8+0xd0>
    80013e66:	00009517          	auipc	a0,0x9
    80013e6a:	cb250513          	add	a0,a0,-846 # 8001cb18 <__func__.1+0x320>
    80013e6e:	0f4070ef          	jal	8001af62 <printf>
    80013e72:	02900513          	li	a0,41
    80013e76:	7bf050ef          	jal	80019e34 <putchar>
    80013e7a:	4529                	li	a0,10
    80013e7c:	7b9050ef          	jal	80019e34 <putchar>
    80013e80:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    80013e84:	00009597          	auipc	a1,0x9
    80013e88:	c4c58593          	add	a1,a1,-948 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80013e8c:	c491                	beqz	s1,80013e98 <load_guest_page_fault_8+0xee>
    80013e8e:	6418                	ld	a4,8(s0)
    80013e90:	47d5                	li	a5,21
    80013e92:	02f70463          	beq	a4,a5,80013eba <load_guest_page_fault_8+0x110>
    80013e96:	4481                	li	s1,0
    TEST_END();
    80013e98:	00009517          	auipc	a0,0x9
    80013e9c:	ce050513          	add	a0,a0,-800 # 8001cb78 <__func__.1+0x380>
    80013ea0:	0c2070ef          	jal	8001af62 <printf>
    80013ea4:	4511                	li	a0,4
    80013ea6:	c39ec0ef          	jal	80000ade <goto_priv>
    80013eaa:	c7ced0ef          	jal	80001326 <reset_state>
}
    80013eae:	60e2                	ld	ra,24(sp)
    80013eb0:	6442                	ld	s0,16(sp)
    80013eb2:	8526                	mv	a0,s1
    80013eb4:	64a2                	ld	s1,8(sp)
    80013eb6:	6105                	add	sp,sp,32
    80013eb8:	8082                	ret
    TEST_END();
    80013eba:	00009597          	auipc	a1,0x9
    80013ebe:	c0658593          	add	a1,a1,-1018 # 8001cac0 <__func__.1+0x2c8>
    80013ec2:	bfd9                	j	80013e98 <load_guest_page_fault_8+0xee>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80013ec4:	00009597          	auipc	a1,0x9
    80013ec8:	bfc58593          	add	a1,a1,-1028 # 8001cac0 <__func__.1+0x2c8>
    80013ecc:	b741                	j	80013e4c <load_guest_page_fault_8+0xa2>

0000000080013ece <load_guest_page_fault_9>:

bool load_guest_page_fault_9(){
    80013ece:	1101                	add	sp,sp,-32

    TEST_START();
    80013ed0:	00008597          	auipc	a1,0x8
    80013ed4:	16858593          	add	a1,a1,360 # 8001c038 <__func__.27>
    80013ed8:	00009517          	auipc	a0,0x9
    80013edc:	c0850513          	add	a0,a0,-1016 # 8001cae0 <__func__.1+0x2e8>
bool load_guest_page_fault_9(){
    80013ee0:	ec06                	sd	ra,24(sp)
    80013ee2:	e822                	sd	s0,16(sp)
    80013ee4:	e426                	sd	s1,8(sp)
    TEST_START();
    80013ee6:	07c070ef          	jal	8001af62 <printf>
    80013eea:	4529                	li	a0,10
    80013eec:	749050ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80013ef0:	450d                	li	a0,3
    80013ef2:	bedec0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80013ef6:	eeaec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80013efa:	92dec0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80013efe:	4509                	li	a0,2
    80013f00:	bdfec0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80013f04:	fb0ec0ef          	jal	800006b4 <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    80013f08:	4511                	li	a0,4
    80013f0a:	bd5ec0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80013f0e:	000407b7          	lui	a5,0x40
    80013f12:	2007b073          	csrc	vsstatus,a5
    

    goto_priv(PRIV_VS);
    80013f16:	4509                	li	a0,2
    80013f18:	bc7ec0ef          	jal	80000ade <goto_priv>
    //执行lb指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80013f1c:	0ff0000f          	fence
    80013f20:	4785                	li	a5,1
    80013f22:	00029417          	auipc	s0,0x29
    80013f26:	0ee40413          	add	s0,s0,238 # 8003d010 <excpt>
    80013f2a:	00f41023          	sh	a5,0(s0)
    80013f2e:	00029797          	auipc	a5,0x29
    80013f32:	1007bd23          	sd	zero,282(a5) # 8003d048 <excpt+0x38>
    80013f36:	0ff0000f          	fence
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80013f3a:	000807b7          	lui	a5,0x80
    80013f3e:	07ed                	add	a5,a5,27 # 8001b <_test_table_size+0x8001a>
    80013f40:	07b6                	sll	a5,a5,0xd
    80013f42:	00078783          	lb	a5,0(a5)
    vaddr = hs_page_base(VSURWX_GUX);


    lb(vaddr);
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    80013f46:	08200593          	li	a1,130
    80013f4a:	0000e617          	auipc	a2,0xe
    80013f4e:	cfe60613          	add	a2,a2,-770 # 80021c48 <__func__.1+0x5450>
    80013f52:	00009517          	auipc	a0,0x9
    80013f56:	ba650513          	add	a0,a0,-1114 # 8001caf8 <__func__.1+0x300>
    80013f5a:	008070ef          	jal	8001af62 <printf>
    80013f5e:	00144783          	lbu	a5,1(s0)
    80013f62:	00009597          	auipc	a1,0x9
    80013f66:	b6e58593          	add	a1,a1,-1170 # 8001cad0 <__func__.1+0x2d8>
    80013f6a:	c789                	beqz	a5,80013f74 <load_guest_page_fault_9+0xa6>
    80013f6c:	6418                	ld	a4,8(s0)
    80013f6e:	47b5                	li	a5,13
    80013f70:	06f70e63          	beq	a4,a5,80013fec <load_guest_page_fault_9+0x11e>
    80013f74:	00009517          	auipc	a0,0x9
    80013f78:	b9c50513          	add	a0,a0,-1124 # 8001cb10 <__func__.1+0x318>
    80013f7c:	7e7060ef          	jal	8001af62 <printf>
    80013f80:	00144783          	lbu	a5,1(s0)
    80013f84:	c789                	beqz	a5,80013f8e <load_guest_page_fault_9+0xc0>
    80013f86:	6418                	ld	a4,8(s0)
    80013f88:	47b5                	li	a5,13
    80013f8a:	00f70c63          	beq	a4,a5,80013fa2 <load_guest_page_fault_9+0xd4>
    80013f8e:	00009517          	auipc	a0,0x9
    80013f92:	b8a50513          	add	a0,a0,-1142 # 8001cb18 <__func__.1+0x320>
    80013f96:	7cd060ef          	jal	8001af62 <printf>
    80013f9a:	02900513          	li	a0,41
    80013f9e:	697050ef          	jal	80019e34 <putchar>
    80013fa2:	4529                	li	a0,10
    80013fa4:	691050ef          	jal	80019e34 <putchar>
    80013fa8:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80013fac:	00009597          	auipc	a1,0x9
    80013fb0:	b2458593          	add	a1,a1,-1244 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    80013fb4:	c491                	beqz	s1,80013fc0 <load_guest_page_fault_9+0xf2>
    80013fb6:	6418                	ld	a4,8(s0)
    80013fb8:	47b5                	li	a5,13
    80013fba:	02f70463          	beq	a4,a5,80013fe2 <load_guest_page_fault_9+0x114>
    80013fbe:	4481                	li	s1,0
    TEST_END();
    80013fc0:	00009517          	auipc	a0,0x9
    80013fc4:	bb850513          	add	a0,a0,-1096 # 8001cb78 <__func__.1+0x380>
    80013fc8:	79b060ef          	jal	8001af62 <printf>
    80013fcc:	4511                	li	a0,4
    80013fce:	b11ec0ef          	jal	80000ade <goto_priv>
    80013fd2:	b54ed0ef          	jal	80001326 <reset_state>
}
    80013fd6:	60e2                	ld	ra,24(sp)
    80013fd8:	6442                	ld	s0,16(sp)
    80013fda:	8526                	mv	a0,s1
    80013fdc:	64a2                	ld	s1,8(sp)
    80013fde:	6105                	add	sp,sp,32
    80013fe0:	8082                	ret
    TEST_END();
    80013fe2:	00009597          	auipc	a1,0x9
    80013fe6:	ade58593          	add	a1,a1,-1314 # 8001cac0 <__func__.1+0x2c8>
    80013fea:	bfd9                	j	80013fc0 <load_guest_page_fault_9+0xf2>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    80013fec:	00009597          	auipc	a1,0x9
    80013ff0:	ad458593          	add	a1,a1,-1324 # 8001cac0 <__func__.1+0x2c8>
    80013ff4:	b741                	j	80013f74 <load_guest_page_fault_9+0xa6>

0000000080013ff6 <load_guest_page_fault_10>:

bool load_guest_page_fault_10(){
    80013ff6:	1141                	add	sp,sp,-16

    TEST_START();
    80013ff8:	00008597          	auipc	a1,0x8
    80013ffc:	05858593          	add	a1,a1,88 # 8001c050 <__func__.26>
    80014000:	00009517          	auipc	a0,0x9
    80014004:	ae050513          	add	a0,a0,-1312 # 8001cae0 <__func__.1+0x2e8>
bool load_guest_page_fault_10(){
    80014008:	e406                	sd	ra,8(sp)
    8001400a:	e022                	sd	s0,0(sp)
    TEST_START();
    8001400c:	757060ef          	jal	8001af62 <printf>
    80014010:	4529                	li	a0,10
    80014012:	623050ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80014016:	450d                	li	a0,3
    80014018:	ac7ec0ef          	jal	80000ade <goto_priv>
    hspt_init();
    8001401c:	dc4ec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014020:	807ec0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80014024:	4509                	li	a0,2
    80014026:	ab9ec0ef          	jal	80000ade <goto_priv>
    vspt_init();
    8001402a:	e8aec0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    8001402e:	4511                	li	a0,4
    80014030:	aafec0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80014034:	000407b7          	lui	a5,0x40
    80014038:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_VS);
    8001403c:	4509                	li	a0,2
    8001403e:	aa1ec0ef          	jal	80000ade <goto_priv>

    //执行lb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80014042:	0ff0000f          	fence
    80014046:	4785                	li	a5,1
    80014048:	00029417          	auipc	s0,0x29
    8001404c:	fc840413          	add	s0,s0,-56 # 8003d010 <excpt>
    80014050:	00f41023          	sh	a5,0(s0)
    80014054:	00029797          	auipc	a5,0x29
    80014058:	fe07ba23          	sd	zero,-12(a5) # 8003d048 <excpt+0x38>
    8001405c:	0ff0000f          	fence
    80014060:	000807b7          	lui	a5,0x80
    80014064:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80014066:	07b6                	sll	a5,a5,0xd
    80014068:	00078783          	lb	a5,0(a5)
    lb(vaddr);

    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    8001406c:	08200593          	li	a1,130
    80014070:	0000e617          	auipc	a2,0xe
    80014074:	c1060613          	add	a2,a2,-1008 # 80021c80 <__func__.1+0x5488>
    80014078:	00009517          	auipc	a0,0x9
    8001407c:	a8050513          	add	a0,a0,-1408 # 8001caf8 <__func__.1+0x300>
    80014080:	6e3060ef          	jal	8001af62 <printf>
    80014084:	00144783          	lbu	a5,1(s0)
    80014088:	00009597          	auipc	a1,0x9
    8001408c:	a3858593          	add	a1,a1,-1480 # 8001cac0 <__func__.1+0x2c8>
    80014090:	c789                	beqz	a5,8001409a <load_guest_page_fault_10+0xa4>
    80014092:	00009597          	auipc	a1,0x9
    80014096:	a3e58593          	add	a1,a1,-1474 # 8001cad0 <__func__.1+0x2d8>
    8001409a:	00009517          	auipc	a0,0x9
    8001409e:	a7650513          	add	a0,a0,-1418 # 8001cb10 <__func__.1+0x318>
    800140a2:	6c1060ef          	jal	8001af62 <printf>
    800140a6:	00144783          	lbu	a5,1(s0)
    800140aa:	e3b1                	bnez	a5,800140ee <load_guest_page_fault_10+0xf8>
    800140ac:	4529                	li	a0,10
    800140ae:	587050ef          	jal	80019e34 <putchar>
    800140b2:	00144783          	lbu	a5,1(s0)
    800140b6:	e795                	bnez	a5,800140e2 <load_guest_page_fault_10+0xec>
    800140b8:	4405                	li	s0,1
    );

    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    800140ba:	00009597          	auipc	a1,0x9
    800140be:	a0658593          	add	a1,a1,-1530 # 8001cac0 <__func__.1+0x2c8>
    800140c2:	00009517          	auipc	a0,0x9
    800140c6:	ab650513          	add	a0,a0,-1354 # 8001cb78 <__func__.1+0x380>
    800140ca:	699060ef          	jal	8001af62 <printf>
    800140ce:	4511                	li	a0,4
    800140d0:	a0fec0ef          	jal	80000ade <goto_priv>
    800140d4:	a52ed0ef          	jal	80001326 <reset_state>
}
    800140d8:	60a2                	ld	ra,8(sp)
    800140da:	8522                	mv	a0,s0
    800140dc:	6402                	ld	s0,0(sp)
    800140de:	0141                	add	sp,sp,16
    800140e0:	8082                	ret
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    800140e2:	4401                	li	s0,0
    TEST_END();
    800140e4:	00009597          	auipc	a1,0x9
    800140e8:	9ec58593          	add	a1,a1,-1556 # 8001cad0 <__func__.1+0x2d8>
    800140ec:	bfd9                	j	800140c2 <load_guest_page_fault_10+0xcc>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    800140ee:	00009517          	auipc	a0,0x9
    800140f2:	a2a50513          	add	a0,a0,-1494 # 8001cb18 <__func__.1+0x320>
    800140f6:	66d060ef          	jal	8001af62 <printf>
    800140fa:	02900513          	li	a0,41
    800140fe:	537050ef          	jal	80019e34 <putchar>
    80014102:	b76d                	j	800140ac <load_guest_page_fault_10+0xb6>

0000000080014104 <load_guest_page_fault_11>:



bool load_guest_page_fault_11(){
    80014104:	1101                	add	sp,sp,-32

    TEST_START();
    80014106:	00008597          	auipc	a1,0x8
    8001410a:	f6a58593          	add	a1,a1,-150 # 8001c070 <__func__.25>
    8001410e:	00009517          	auipc	a0,0x9
    80014112:	9d250513          	add	a0,a0,-1582 # 8001cae0 <__func__.1+0x2e8>
bool load_guest_page_fault_11(){
    80014116:	ec06                	sd	ra,24(sp)
    80014118:	e822                	sd	s0,16(sp)
    8001411a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001411c:	647060ef          	jal	8001af62 <printf>
    80014120:	4529                	li	a0,10
    80014122:	513050ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80014126:	450d                	li	a0,3
    80014128:	9b7ec0ef          	jal	80000ade <goto_priv>
    hspt_init();
    8001412c:	cb4ec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014130:	ef6ec0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80014134:	4509                	li	a0,2
    80014136:	9a9ec0ef          	jal	80000ade <goto_priv>
    vspt_init();
    8001413a:	d7aec0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    8001413e:	4511                	li	a0,4
    80014140:	99fec0ef          	jal	80000ade <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80014144:	28005073          	csrw	vsatp,0

    goto_priv(PRIV_HS);
    80014148:	450d                	li	a0,3
    8001414a:	995ec0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    8001414e:	4509                	li	a0,2
    80014150:	8b3ec0ef          	jal	80000a02 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80014154:	0ff0000f          	fence
    80014158:	4785                	li	a5,1
    8001415a:	00029417          	auipc	s0,0x29
    8001415e:	eb640413          	add	s0,s0,-330 # 8003d010 <excpt>
    80014162:	00f41023          	sh	a5,0(s0)
    80014166:	00029797          	auipc	a5,0x29
    8001416a:	ee07b123          	sd	zero,-286(a5) # 8003d048 <excpt+0x38>
    8001416e:	0ff0000f          	fence
    asm volatile(
    80014172:	400197b7          	lui	a5,0x40019
    80014176:	078a                	sll	a5,a5,0x2
    80014178:	6c07c7f3          	.4byte	0x6c07c7f3

    vaddr = hs_page_base(VSI_GI);
    hlvd(vaddr);
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    8001417c:	08200593          	li	a1,130
    80014180:	0000d617          	auipc	a2,0xd
    80014184:	79060613          	add	a2,a2,1936 # 80021910 <__func__.1+0x5118>
    80014188:	00009517          	auipc	a0,0x9
    8001418c:	97050513          	add	a0,a0,-1680 # 8001caf8 <__func__.1+0x300>
    80014190:	5d3060ef          	jal	8001af62 <printf>
    80014194:	00144783          	lbu	a5,1(s0)
    80014198:	00009597          	auipc	a1,0x9
    8001419c:	93858593          	add	a1,a1,-1736 # 8001cad0 <__func__.1+0x2d8>
    800141a0:	c789                	beqz	a5,800141aa <load_guest_page_fault_11+0xa6>
    800141a2:	6418                	ld	a4,8(s0)
    800141a4:	47d5                	li	a5,21
    800141a6:	06f70e63          	beq	a4,a5,80014222 <load_guest_page_fault_11+0x11e>
    800141aa:	00009517          	auipc	a0,0x9
    800141ae:	96650513          	add	a0,a0,-1690 # 8001cb10 <__func__.1+0x318>
    800141b2:	5b1060ef          	jal	8001af62 <printf>
    800141b6:	00144783          	lbu	a5,1(s0)
    800141ba:	c789                	beqz	a5,800141c4 <load_guest_page_fault_11+0xc0>
    800141bc:	6418                	ld	a4,8(s0)
    800141be:	47d5                	li	a5,21
    800141c0:	00f70c63          	beq	a4,a5,800141d8 <load_guest_page_fault_11+0xd4>
    800141c4:	00009517          	auipc	a0,0x9
    800141c8:	95450513          	add	a0,a0,-1708 # 8001cb18 <__func__.1+0x320>
    800141cc:	597060ef          	jal	8001af62 <printf>
    800141d0:	02900513          	li	a0,41
    800141d4:	461050ef          	jal	80019e34 <putchar>
    800141d8:	4529                	li	a0,10
    800141da:	45b050ef          	jal	80019e34 <putchar>
    800141de:	00144483          	lbu	s1,1(s0)
        excpt.cause == CAUSE_LGPF
    );



    TEST_END();
    800141e2:	00009597          	auipc	a1,0x9
    800141e6:	8ee58593          	add	a1,a1,-1810 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    800141ea:	c491                	beqz	s1,800141f6 <load_guest_page_fault_11+0xf2>
    800141ec:	6418                	ld	a4,8(s0)
    800141ee:	47d5                	li	a5,21
    800141f0:	02f70463          	beq	a4,a5,80014218 <load_guest_page_fault_11+0x114>
    800141f4:	4481                	li	s1,0
    TEST_END();
    800141f6:	00009517          	auipc	a0,0x9
    800141fa:	98250513          	add	a0,a0,-1662 # 8001cb78 <__func__.1+0x380>
    800141fe:	565060ef          	jal	8001af62 <printf>
    80014202:	4511                	li	a0,4
    80014204:	8dbec0ef          	jal	80000ade <goto_priv>
    80014208:	91eed0ef          	jal	80001326 <reset_state>
}
    8001420c:	60e2                	ld	ra,24(sp)
    8001420e:	6442                	ld	s0,16(sp)
    80014210:	8526                	mv	a0,s1
    80014212:	64a2                	ld	s1,8(sp)
    80014214:	6105                	add	sp,sp,32
    80014216:	8082                	ret
    TEST_END();
    80014218:	00009597          	auipc	a1,0x9
    8001421c:	8a858593          	add	a1,a1,-1880 # 8001cac0 <__func__.1+0x2c8>
    80014220:	bfd9                	j	800141f6 <load_guest_page_fault_11+0xf2>
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    80014222:	00009597          	auipc	a1,0x9
    80014226:	89e58593          	add	a1,a1,-1890 # 8001cac0 <__func__.1+0x2c8>
    8001422a:	b741                	j	800141aa <load_guest_page_fault_11+0xa6>

000000008001422c <load_guest_page_fault_12>:

bool load_guest_page_fault_12(){
    8001422c:	1101                	add	sp,sp,-32

    TEST_START();
    8001422e:	00008597          	auipc	a1,0x8
    80014232:	e6258593          	add	a1,a1,-414 # 8001c090 <__func__.24>
    80014236:	00009517          	auipc	a0,0x9
    8001423a:	8aa50513          	add	a0,a0,-1878 # 8001cae0 <__func__.1+0x2e8>
bool load_guest_page_fault_12(){
    8001423e:	ec06                	sd	ra,24(sp)
    80014240:	e822                	sd	s0,16(sp)
    80014242:	e426                	sd	s1,8(sp)
    TEST_START();
    80014244:	51f060ef          	jal	8001af62 <printf>
    80014248:	4529                	li	a0,10
    8001424a:	3eb050ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    8001424e:	450d                	li	a0,3
    80014250:	88fec0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80014254:	b8cec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014258:	dceec0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    8001425c:	4509                	li	a0,2
    8001425e:	881ec0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80014262:	c52ec0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80014266:	4511                	li	a0,4
    80014268:	877ec0ef          	jal	80000ade <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    8001426c:	28005073          	csrw	vsatp,0

    goto_priv(PRIV_HS);
    80014270:	450d                	li	a0,3
    80014272:	86dec0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80014276:	4509                	li	a0,2
    80014278:	f8aec0ef          	jal	80000a02 <set_prev_priv>

    ////特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    8001427c:	0ff0000f          	fence
    80014280:	4785                	li	a5,1
    80014282:	00029417          	auipc	s0,0x29
    80014286:	d8e40413          	add	s0,s0,-626 # 8003d010 <excpt>
    8001428a:	00f41023          	sh	a5,0(s0)
    8001428e:	00029797          	auipc	a5,0x29
    80014292:	da07bd23          	sd	zero,-582(a5) # 8003d048 <excpt+0x38>
    80014296:	0ff0000f          	fence
    vaddr = hs_page_base(VSURWX_GRW);


    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001429a:	000807b7          	lui	a5,0x80
    8001429e:	1007b073          	csrc	sstatus,a5
    asm volatile(
    800142a2:	07b5                	add	a5,a5,13 # 8000d <_test_table_size+0x8000c>
    800142a4:	07b6                	sll	a5,a5,0xd
    800142a6:	6407c7f3          	.4byte	0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    800142aa:	08200593          	li	a1,130
    800142ae:	0000d617          	auipc	a2,0xd
    800142b2:	71260613          	add	a2,a2,1810 # 800219c0 <__func__.1+0x51c8>
    800142b6:	00009517          	auipc	a0,0x9
    800142ba:	84250513          	add	a0,a0,-1982 # 8001caf8 <__func__.1+0x300>
    800142be:	4a5060ef          	jal	8001af62 <printf>
    800142c2:	00144783          	lbu	a5,1(s0)
    800142c6:	00009597          	auipc	a1,0x9
    800142ca:	80a58593          	add	a1,a1,-2038 # 8001cad0 <__func__.1+0x2d8>
    800142ce:	c789                	beqz	a5,800142d8 <load_guest_page_fault_12+0xac>
    800142d0:	6418                	ld	a4,8(s0)
    800142d2:	47d5                	li	a5,21
    800142d4:	06f70e63          	beq	a4,a5,80014350 <load_guest_page_fault_12+0x124>
    800142d8:	00009517          	auipc	a0,0x9
    800142dc:	83850513          	add	a0,a0,-1992 # 8001cb10 <__func__.1+0x318>
    800142e0:	483060ef          	jal	8001af62 <printf>
    800142e4:	00144783          	lbu	a5,1(s0)
    800142e8:	c789                	beqz	a5,800142f2 <load_guest_page_fault_12+0xc6>
    800142ea:	6418                	ld	a4,8(s0)
    800142ec:	47d5                	li	a5,21
    800142ee:	00f70c63          	beq	a4,a5,80014306 <load_guest_page_fault_12+0xda>
    800142f2:	00009517          	auipc	a0,0x9
    800142f6:	82650513          	add	a0,a0,-2010 # 8001cb18 <__func__.1+0x320>
    800142fa:	469060ef          	jal	8001af62 <printf>
    800142fe:	02900513          	li	a0,41
    80014302:	333050ef          	jal	80019e34 <putchar>
    80014306:	4529                	li	a0,10
    80014308:	32d050ef          	jal	80019e34 <putchar>
    8001430c:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80014310:	00008597          	auipc	a1,0x8
    80014314:	7c058593          	add	a1,a1,1984 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80014318:	c491                	beqz	s1,80014324 <load_guest_page_fault_12+0xf8>
    8001431a:	6418                	ld	a4,8(s0)
    8001431c:	47d5                	li	a5,21
    8001431e:	02f70463          	beq	a4,a5,80014346 <load_guest_page_fault_12+0x11a>
    80014322:	4481                	li	s1,0
    TEST_END();
    80014324:	00009517          	auipc	a0,0x9
    80014328:	85450513          	add	a0,a0,-1964 # 8001cb78 <__func__.1+0x380>
    8001432c:	437060ef          	jal	8001af62 <printf>
    80014330:	4511                	li	a0,4
    80014332:	facec0ef          	jal	80000ade <goto_priv>
    80014336:	ff1ec0ef          	jal	80001326 <reset_state>
}
    8001433a:	60e2                	ld	ra,24(sp)
    8001433c:	6442                	ld	s0,16(sp)
    8001433e:	8526                	mv	a0,s1
    80014340:	64a2                	ld	s1,8(sp)
    80014342:	6105                	add	sp,sp,32
    80014344:	8082                	ret
    TEST_END();
    80014346:	00008597          	auipc	a1,0x8
    8001434a:	77a58593          	add	a1,a1,1914 # 8001cac0 <__func__.1+0x2c8>
    8001434e:	bfd9                	j	80014324 <load_guest_page_fault_12+0xf8>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80014350:	00008597          	auipc	a1,0x8
    80014354:	77058593          	add	a1,a1,1904 # 8001cac0 <__func__.1+0x2c8>
    80014358:	b741                	j	800142d8 <load_guest_page_fault_12+0xac>

000000008001435a <load_guest_page_fault_13>:

bool load_guest_page_fault_13(){
    8001435a:	1101                	add	sp,sp,-32

    TEST_START();
    8001435c:	00008597          	auipc	a1,0x8
    80014360:	d5458593          	add	a1,a1,-684 # 8001c0b0 <__func__.23>
    80014364:	00008517          	auipc	a0,0x8
    80014368:	77c50513          	add	a0,a0,1916 # 8001cae0 <__func__.1+0x2e8>
bool load_guest_page_fault_13(){
    8001436c:	ec06                	sd	ra,24(sp)
    8001436e:	e822                	sd	s0,16(sp)
    80014370:	e426                	sd	s1,8(sp)
    TEST_START();
    80014372:	3f1060ef          	jal	8001af62 <printf>
    80014376:	4529                	li	a0,10
    80014378:	2bd050ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    8001437c:	450d                	li	a0,3
    8001437e:	f60ec0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80014382:	a5eec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014386:	ca0ec0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    8001438a:	4509                	li	a0,2
    8001438c:	f52ec0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80014390:	b24ec0ef          	jal	800006b4 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80014394:	4511                	li	a0,4
    80014396:	f48ec0ef          	jal	80000ade <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    8001439a:	28005073          	csrw	vsatp,0

    goto_priv(PRIV_HS);
    8001439e:	450d                	li	a0,3
    800143a0:	f3eec0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    800143a4:	4509                	li	a0,2
    800143a6:	e5cec0ef          	jal	80000a02 <set_prev_priv>
    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    800143aa:	0ff0000f          	fence
    800143ae:	4785                	li	a5,1
    800143b0:	00029417          	auipc	s0,0x29
    800143b4:	c6040413          	add	s0,s0,-928 # 8003d010 <excpt>
    800143b8:	00f41023          	sh	a5,0(s0)
    800143bc:	00029797          	auipc	a5,0x29
    800143c0:	c807b623          	sd	zero,-884(a5) # 8003d048 <excpt+0x38>
    800143c4:	0ff0000f          	fence
    vaddr = hs_page_base(VSI_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    800143c8:	000807b7          	lui	a5,0x80
    800143cc:	1007a073          	csrs	sstatus,a5
    800143d0:	400197b7          	lui	a5,0x40019
    800143d4:	078a                	sll	a5,a5,0x2
    800143d6:	6407c7f3          	.4byte	0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    800143da:	08200593          	li	a1,130
    800143de:	0000d617          	auipc	a2,0xd
    800143e2:	64260613          	add	a2,a2,1602 # 80021a20 <__func__.1+0x5228>
    800143e6:	00008517          	auipc	a0,0x8
    800143ea:	71250513          	add	a0,a0,1810 # 8001caf8 <__func__.1+0x300>
    800143ee:	375060ef          	jal	8001af62 <printf>
    800143f2:	00144783          	lbu	a5,1(s0)
    800143f6:	00008597          	auipc	a1,0x8
    800143fa:	6da58593          	add	a1,a1,1754 # 8001cad0 <__func__.1+0x2d8>
    800143fe:	c789                	beqz	a5,80014408 <load_guest_page_fault_13+0xae>
    80014400:	6418                	ld	a4,8(s0)
    80014402:	47d5                	li	a5,21
    80014404:	06f70e63          	beq	a4,a5,80014480 <load_guest_page_fault_13+0x126>
    80014408:	00008517          	auipc	a0,0x8
    8001440c:	70850513          	add	a0,a0,1800 # 8001cb10 <__func__.1+0x318>
    80014410:	353060ef          	jal	8001af62 <printf>
    80014414:	00144783          	lbu	a5,1(s0)
    80014418:	c789                	beqz	a5,80014422 <load_guest_page_fault_13+0xc8>
    8001441a:	6418                	ld	a4,8(s0)
    8001441c:	47d5                	li	a5,21
    8001441e:	00f70c63          	beq	a4,a5,80014436 <load_guest_page_fault_13+0xdc>
    80014422:	00008517          	auipc	a0,0x8
    80014426:	6f650513          	add	a0,a0,1782 # 8001cb18 <__func__.1+0x320>
    8001442a:	339060ef          	jal	8001af62 <printf>
    8001442e:	02900513          	li	a0,41
    80014432:	203050ef          	jal	80019e34 <putchar>
    80014436:	4529                	li	a0,10
    80014438:	1fd050ef          	jal	80019e34 <putchar>
    8001443c:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    80014440:	00008597          	auipc	a1,0x8
    80014444:	69058593          	add	a1,a1,1680 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80014448:	c491                	beqz	s1,80014454 <load_guest_page_fault_13+0xfa>
    8001444a:	6418                	ld	a4,8(s0)
    8001444c:	47d5                	li	a5,21
    8001444e:	02f70463          	beq	a4,a5,80014476 <load_guest_page_fault_13+0x11c>
    80014452:	4481                	li	s1,0
    TEST_END();
    80014454:	00008517          	auipc	a0,0x8
    80014458:	72450513          	add	a0,a0,1828 # 8001cb78 <__func__.1+0x380>
    8001445c:	307060ef          	jal	8001af62 <printf>
    80014460:	4511                	li	a0,4
    80014462:	e7cec0ef          	jal	80000ade <goto_priv>
    80014466:	ec1ec0ef          	jal	80001326 <reset_state>
}
    8001446a:	60e2                	ld	ra,24(sp)
    8001446c:	6442                	ld	s0,16(sp)
    8001446e:	8526                	mv	a0,s1
    80014470:	64a2                	ld	s1,8(sp)
    80014472:	6105                	add	sp,sp,32
    80014474:	8082                	ret
    TEST_END();
    80014476:	00008597          	auipc	a1,0x8
    8001447a:	64a58593          	add	a1,a1,1610 # 8001cac0 <__func__.1+0x2c8>
    8001447e:	bfd9                	j	80014454 <load_guest_page_fault_13+0xfa>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80014480:	00008597          	auipc	a1,0x8
    80014484:	64058593          	add	a1,a1,1600 # 8001cac0 <__func__.1+0x2c8>
    80014488:	b741                	j	80014408 <load_guest_page_fault_13+0xae>

000000008001448a <load_guest_page_fault_14>:

bool load_guest_page_fault_14(){
    8001448a:	1101                	add	sp,sp,-32

    TEST_START();
    8001448c:	00008597          	auipc	a1,0x8
    80014490:	c4458593          	add	a1,a1,-956 # 8001c0d0 <__func__.22>
    80014494:	00008517          	auipc	a0,0x8
    80014498:	64c50513          	add	a0,a0,1612 # 8001cae0 <__func__.1+0x2e8>
bool load_guest_page_fault_14(){
    8001449c:	ec06                	sd	ra,24(sp)
    8001449e:	e822                	sd	s0,16(sp)
    800144a0:	e426                	sd	s1,8(sp)
    TEST_START();
    800144a2:	2c1060ef          	jal	8001af62 <printf>
    800144a6:	4529                	li	a0,10
    800144a8:	18d050ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    800144ac:	450d                	li	a0,3
    800144ae:	e30ec0ef          	jal	80000ade <goto_priv>
    hspt_init();
    800144b2:	92eec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800144b6:	b70ec0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    800144ba:	4509                	li	a0,2
    800144bc:	e22ec0ef          	jal	80000ade <goto_priv>
    vspt_init();
    800144c0:	9f4ec0ef          	jal	800006b4 <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    800144c4:	4511                	li	a0,4
    800144c6:	e18ec0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800144ca:	000407b7          	lui	a5,0x40
    800144ce:	2007b073          	csrc	vsstatus,a5
    CSRW(CSR_VSATP,(uint64_t)0);
    800144d2:	28005073          	csrw	vsatp,0
    

    goto_priv(PRIV_HS);
    800144d6:	450d                	li	a0,3
    800144d8:	e06ec0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    800144dc:	4509                	li	a0,2
    800144de:	d24ec0ef          	jal	80000a02 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，执行hlvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800144e2:	0ff0000f          	fence
    800144e6:	4785                	li	a5,1
    800144e8:	00029417          	auipc	s0,0x29
    800144ec:	b2840413          	add	s0,s0,-1240 # 8003d010 <excpt>
    800144f0:	00f41023          	sh	a5,0(s0)
    800144f4:	00029797          	auipc	a5,0x29
    800144f8:	b407ba23          	sd	zero,-1196(a5) # 8003d048 <excpt+0x38>
    800144fc:	0ff0000f          	fence
    asm volatile(
    80014500:	001007b7          	lui	a5,0x100
    80014504:	06778793          	add	a5,a5,103 # 100067 <STACK_SIZE+0x67>
    80014508:	07b2                	sll	a5,a5,0xc
    8001450a:	6007c7f3          	.4byte	0x6007c7f3
    vaddr = hs_page_base(VSI_GURWX);


    hlvb(vaddr);
    printf("%d\n",excpt.cause);
    8001450e:	640c                	ld	a1,8(s0)
    80014510:	00009517          	auipc	a0,0x9
    80014514:	f9050513          	add	a0,a0,-112 # 8001d4a0 <__func__.1+0xca8>
    80014518:	24b060ef          	jal	8001af62 <printf>
    printf("%d\n",excpt.triggered);
    8001451c:	00144583          	lbu	a1,1(s0)
    80014520:	00009517          	auipc	a0,0x9
    80014524:	f8050513          	add	a0,a0,-128 # 8001d4a0 <__func__.1+0xca8>
    80014528:	23b060ef          	jal	8001af62 <printf>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    8001452c:	08200593          	li	a1,130
    80014530:	0000d617          	auipc	a2,0xd
    80014534:	56060613          	add	a2,a2,1376 # 80021a90 <__func__.1+0x5298>
    80014538:	00008517          	auipc	a0,0x8
    8001453c:	5c050513          	add	a0,a0,1472 # 8001caf8 <__func__.1+0x300>
    80014540:	223060ef          	jal	8001af62 <printf>
    80014544:	00144783          	lbu	a5,1(s0)
    80014548:	00008597          	auipc	a1,0x8
    8001454c:	58858593          	add	a1,a1,1416 # 8001cad0 <__func__.1+0x2d8>
    80014550:	c789                	beqz	a5,8001455a <load_guest_page_fault_14+0xd0>
    80014552:	6418                	ld	a4,8(s0)
    80014554:	47d5                	li	a5,21
    80014556:	06f70e63          	beq	a4,a5,800145d2 <load_guest_page_fault_14+0x148>
    8001455a:	00008517          	auipc	a0,0x8
    8001455e:	5b650513          	add	a0,a0,1462 # 8001cb10 <__func__.1+0x318>
    80014562:	201060ef          	jal	8001af62 <printf>
    80014566:	00144783          	lbu	a5,1(s0)
    8001456a:	c789                	beqz	a5,80014574 <load_guest_page_fault_14+0xea>
    8001456c:	6418                	ld	a4,8(s0)
    8001456e:	47d5                	li	a5,21
    80014570:	00f70c63          	beq	a4,a5,80014588 <load_guest_page_fault_14+0xfe>
    80014574:	00008517          	auipc	a0,0x8
    80014578:	5a450513          	add	a0,a0,1444 # 8001cb18 <__func__.1+0x320>
    8001457c:	1e7060ef          	jal	8001af62 <printf>
    80014580:	02900513          	li	a0,41
    80014584:	0b1050ef          	jal	80019e34 <putchar>
    80014588:	4529                	li	a0,10
    8001458a:	0ab050ef          	jal	80019e34 <putchar>
    8001458e:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80014592:	00008597          	auipc	a1,0x8
    80014596:	53e58593          	add	a1,a1,1342 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    8001459a:	c491                	beqz	s1,800145a6 <load_guest_page_fault_14+0x11c>
    8001459c:	6418                	ld	a4,8(s0)
    8001459e:	47d5                	li	a5,21
    800145a0:	02f70463          	beq	a4,a5,800145c8 <load_guest_page_fault_14+0x13e>
    800145a4:	4481                	li	s1,0
    TEST_END();
    800145a6:	00008517          	auipc	a0,0x8
    800145aa:	5d250513          	add	a0,a0,1490 # 8001cb78 <__func__.1+0x380>
    800145ae:	1b5060ef          	jal	8001af62 <printf>
    800145b2:	4511                	li	a0,4
    800145b4:	d2aec0ef          	jal	80000ade <goto_priv>
    800145b8:	d6fec0ef          	jal	80001326 <reset_state>
}
    800145bc:	60e2                	ld	ra,24(sp)
    800145be:	6442                	ld	s0,16(sp)
    800145c0:	8526                	mv	a0,s1
    800145c2:	64a2                	ld	s1,8(sp)
    800145c4:	6105                	add	sp,sp,32
    800145c6:	8082                	ret
    TEST_END();
    800145c8:	00008597          	auipc	a1,0x8
    800145cc:	4f858593          	add	a1,a1,1272 # 8001cac0 <__func__.1+0x2c8>
    800145d0:	bfd9                	j	800145a6 <load_guest_page_fault_14+0x11c>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    800145d2:	00008597          	auipc	a1,0x8
    800145d6:	4ee58593          	add	a1,a1,1262 # 8001cac0 <__func__.1+0x2c8>
    800145da:	b741                	j	8001455a <load_guest_page_fault_14+0xd0>

00000000800145dc <load_guest_page_fault_15>:

bool load_guest_page_fault_15(){
    800145dc:	1141                	add	sp,sp,-16

    TEST_START();
    800145de:	00008597          	auipc	a1,0x8
    800145e2:	b1258593          	add	a1,a1,-1262 # 8001c0f0 <__func__.21>
    800145e6:	00008517          	auipc	a0,0x8
    800145ea:	4fa50513          	add	a0,a0,1274 # 8001cae0 <__func__.1+0x2e8>
bool load_guest_page_fault_15(){
    800145ee:	e406                	sd	ra,8(sp)
    800145f0:	e022                	sd	s0,0(sp)
    TEST_START();
    800145f2:	171060ef          	jal	8001af62 <printf>
    800145f6:	4529                	li	a0,10
    800145f8:	03d050ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    800145fc:	450d                	li	a0,3
    800145fe:	ce0ec0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80014602:	fdfeb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014606:	a20ec0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    8001460a:	4509                	li	a0,2
    8001460c:	cd2ec0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80014610:	8a4ec0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80014614:	4511                	li	a0,4
    80014616:	cc8ec0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    8001461a:	000407b7          	lui	a5,0x40
    8001461e:	2007a073          	csrs	vsstatus,a5
    CSRW(CSR_VSATP,(uint64_t)0);
    80014622:	28005073          	csrw	vsatp,0

    goto_priv(PRIV_HS);
    80014626:	450d                	li	a0,3
    80014628:	cb6ec0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    8001462c:	4509                	li	a0,2
    8001462e:	bd4ec0ef          	jal	80000a02 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80014632:	0ff0000f          	fence
    80014636:	4785                	li	a5,1
    80014638:	00029417          	auipc	s0,0x29
    8001463c:	9d840413          	add	s0,s0,-1576 # 8003d010 <excpt>
    80014640:	00f41023          	sh	a5,0(s0)
    80014644:	00029797          	auipc	a5,0x29
    80014648:	a007b223          	sd	zero,-1532(a5) # 8003d048 <excpt+0x38>
    8001464c:	0ff0000f          	fence
    80014650:	000807b7          	lui	a5,0x80
    80014654:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80014656:	07b6                	sll	a5,a5,0xd
    80014658:	6007c7f3          	.4byte	0x6007c7f3
    hlvb(vaddr);
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    8001465c:	08200593          	li	a1,130
    80014660:	0000d617          	auipc	a2,0xd
    80014664:	b6060613          	add	a2,a2,-1184 # 800211c0 <__func__.1+0x49c8>
    80014668:	00008517          	auipc	a0,0x8
    8001466c:	49050513          	add	a0,a0,1168 # 8001caf8 <__func__.1+0x300>
    80014670:	0f3060ef          	jal	8001af62 <printf>
    80014674:	00144783          	lbu	a5,1(s0)
    80014678:	00008597          	auipc	a1,0x8
    8001467c:	44858593          	add	a1,a1,1096 # 8001cac0 <__func__.1+0x2c8>
    80014680:	c789                	beqz	a5,8001468a <load_guest_page_fault_15+0xae>
    80014682:	00008597          	auipc	a1,0x8
    80014686:	44e58593          	add	a1,a1,1102 # 8001cad0 <__func__.1+0x2d8>
    8001468a:	00008517          	auipc	a0,0x8
    8001468e:	48650513          	add	a0,a0,1158 # 8001cb10 <__func__.1+0x318>
    80014692:	0d1060ef          	jal	8001af62 <printf>
    80014696:	00144783          	lbu	a5,1(s0)
    8001469a:	e3b1                	bnez	a5,800146de <load_guest_page_fault_15+0x102>
    8001469c:	4529                	li	a0,10
    8001469e:	796050ef          	jal	80019e34 <putchar>
    800146a2:	00144783          	lbu	a5,1(s0)
    800146a6:	e795                	bnez	a5,800146d2 <load_guest_page_fault_15+0xf6>
    800146a8:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    800146aa:	00008597          	auipc	a1,0x8
    800146ae:	41658593          	add	a1,a1,1046 # 8001cac0 <__func__.1+0x2c8>
    800146b2:	00008517          	auipc	a0,0x8
    800146b6:	4c650513          	add	a0,a0,1222 # 8001cb78 <__func__.1+0x380>
    800146ba:	0a9060ef          	jal	8001af62 <printf>
    800146be:	4511                	li	a0,4
    800146c0:	c1eec0ef          	jal	80000ade <goto_priv>
    800146c4:	c63ec0ef          	jal	80001326 <reset_state>
}
    800146c8:	60a2                	ld	ra,8(sp)
    800146ca:	8522                	mv	a0,s0
    800146cc:	6402                	ld	s0,0(sp)
    800146ce:	0141                	add	sp,sp,16
    800146d0:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    800146d2:	4401                	li	s0,0
    TEST_END();
    800146d4:	00008597          	auipc	a1,0x8
    800146d8:	3fc58593          	add	a1,a1,1020 # 8001cad0 <__func__.1+0x2d8>
    800146dc:	bfd9                	j	800146b2 <load_guest_page_fault_15+0xd6>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    800146de:	00008517          	auipc	a0,0x8
    800146e2:	43a50513          	add	a0,a0,1082 # 8001cb18 <__func__.1+0x320>
    800146e6:	07d060ef          	jal	8001af62 <printf>
    800146ea:	02900513          	li	a0,41
    800146ee:	746050ef          	jal	80019e34 <putchar>
    800146f2:	b76d                	j	8001469c <load_guest_page_fault_15+0xc0>

00000000800146f4 <store_guest_page_fault_1>:



bool store_guest_page_fault_1(){
    800146f4:	1101                	add	sp,sp,-32

    TEST_START();
    800146f6:	00008597          	auipc	a1,0x8
    800146fa:	a1a58593          	add	a1,a1,-1510 # 8001c110 <__func__.20>
    800146fe:	00008517          	auipc	a0,0x8
    80014702:	3e250513          	add	a0,a0,994 # 8001cae0 <__func__.1+0x2e8>
bool store_guest_page_fault_1(){
    80014706:	ec06                	sd	ra,24(sp)
    80014708:	e822                	sd	s0,16(sp)
    8001470a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001470c:	057060ef          	jal	8001af62 <printf>
    80014710:	4529                	li	a0,10
    80014712:	722050ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80014716:	450d                	li	a0,3
    80014718:	bc6ec0ef          	jal	80000ade <goto_priv>
    hspt_init();
    8001471c:	ec5eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014720:	906ec0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80014724:	4509                	li	a0,2
    80014726:	bb8ec0ef          	jal	80000ade <goto_priv>
    vspt_init();
    8001472a:	f8beb0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    8001472e:	450d                	li	a0,3
    80014730:	baeec0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80014734:	4509                	li	a0,2
    80014736:	accec0ef          	jal	80000a02 <set_prev_priv>

    //执行store指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    8001473a:	0ff0000f          	fence
    8001473e:	4785                	li	a5,1
    80014740:	00029417          	auipc	s0,0x29
    80014744:	8d040413          	add	s0,s0,-1840 # 8003d010 <excpt>
    80014748:	00f41023          	sh	a5,0(s0)
    8001474c:	00029797          	auipc	a5,0x29
    80014750:	8e07be23          	sd	zero,-1796(a5) # 8003d048 <excpt+0x38>
    80014754:	0ff0000f          	fence
    asm volatile(
    80014758:	37ab77b7          	lui	a5,0x37ab7
    8001475c:	00100737          	lui	a4,0x100
    80014760:	078a                	sll	a5,a5,0x2
    80014762:	06570713          	add	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80014766:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001476a:	0732                	sll	a4,a4,0xc
    8001476c:	6ef74073          	.4byte	0x6ef74073

    vaddr = hs_page_base(VSRWX_GI);
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.v=0 leads to SGPF",
    80014770:	08200593          	li	a1,130
    80014774:	0000d617          	auipc	a2,0xd
    80014778:	54460613          	add	a2,a2,1348 # 80021cb8 <__func__.1+0x54c0>
    8001477c:	00008517          	auipc	a0,0x8
    80014780:	37c50513          	add	a0,a0,892 # 8001caf8 <__func__.1+0x300>
    80014784:	7de060ef          	jal	8001af62 <printf>
    80014788:	00144783          	lbu	a5,1(s0)
    8001478c:	00008597          	auipc	a1,0x8
    80014790:	34458593          	add	a1,a1,836 # 8001cad0 <__func__.1+0x2d8>
    80014794:	c789                	beqz	a5,8001479e <store_guest_page_fault_1+0xaa>
    80014796:	6418                	ld	a4,8(s0)
    80014798:	47dd                	li	a5,23
    8001479a:	12f70363          	beq	a4,a5,800148c0 <store_guest_page_fault_1+0x1cc>
    8001479e:	00008517          	auipc	a0,0x8
    800147a2:	37250513          	add	a0,a0,882 # 8001cb10 <__func__.1+0x318>
    800147a6:	7bc060ef          	jal	8001af62 <printf>
    800147aa:	00144783          	lbu	a5,1(s0)
    800147ae:	c789                	beqz	a5,800147b8 <store_guest_page_fault_1+0xc4>
    800147b0:	6418                	ld	a4,8(s0)
    800147b2:	47dd                	li	a5,23
    800147b4:	00f70c63          	beq	a4,a5,800147cc <store_guest_page_fault_1+0xd8>
    800147b8:	00008517          	auipc	a0,0x8
    800147bc:	36050513          	add	a0,a0,864 # 8001cb18 <__func__.1+0x320>
    800147c0:	7a2060ef          	jal	8001af62 <printf>
    800147c4:	02900513          	li	a0,41
    800147c8:	66c050ef          	jal	80019e34 <putchar>
    800147cc:	4529                	li	a0,10
    800147ce:	666050ef          	jal	80019e34 <putchar>
    800147d2:	00144783          	lbu	a5,1(s0)
    800147d6:	4481                	li	s1,0
    800147d8:	c789                	beqz	a5,800147e2 <store_guest_page_fault_1+0xee>
    800147da:	6404                	ld	s1,8(s0)
    800147dc:	14a5                	add	s1,s1,-23
    800147de:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SGPF
    );


    //执行store相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    800147e2:	0ff0000f          	fence
    800147e6:	4785                	li	a5,1
    800147e8:	00f41023          	sh	a5,0(s0)
    800147ec:	00029797          	auipc	a5,0x29
    800147f0:	8407be23          	sd	zero,-1956(a5) # 8003d048 <excpt+0x38>
    800147f4:	0ff0000f          	fence
    asm volatile(
    800147f8:	001007b7          	lui	a5,0x100
    800147fc:	6731                	lui	a4,0xc
    800147fe:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80014802:	eef70713          	add	a4,a4,-273 # beef <_test_table_size+0xbeee>
    80014806:	07b2                	sll	a5,a5,0xc
    80014808:	66e7c073          	.4byte	0x66e7c073
    addr = hs_page_base(VSRWX_GI);

    hsvh(addr,0xbeef);   
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    8001480c:	08200593          	li	a1,130
    80014810:	0000d617          	auipc	a2,0xd
    80014814:	4f860613          	add	a2,a2,1272 # 80021d08 <__func__.1+0x5510>
    80014818:	00008517          	auipc	a0,0x8
    8001481c:	2e050513          	add	a0,a0,736 # 8001caf8 <__func__.1+0x300>
    80014820:	742060ef          	jal	8001af62 <printf>
    80014824:	00144783          	lbu	a5,1(s0)
    80014828:	00008597          	auipc	a1,0x8
    8001482c:	2a858593          	add	a1,a1,680 # 8001cad0 <__func__.1+0x2d8>
    80014830:	c789                	beqz	a5,8001483a <store_guest_page_fault_1+0x146>
    80014832:	6418                	ld	a4,8(s0)
    80014834:	47dd                	li	a5,23
    80014836:	08f70063          	beq	a4,a5,800148b6 <store_guest_page_fault_1+0x1c2>
    8001483a:	00008517          	auipc	a0,0x8
    8001483e:	2d650513          	add	a0,a0,726 # 8001cb10 <__func__.1+0x318>
    80014842:	720060ef          	jal	8001af62 <printf>
    80014846:	00144783          	lbu	a5,1(s0)
    8001484a:	c789                	beqz	a5,80014854 <store_guest_page_fault_1+0x160>
    8001484c:	6418                	ld	a4,8(s0)
    8001484e:	47dd                	li	a5,23
    80014850:	00f70c63          	beq	a4,a5,80014868 <store_guest_page_fault_1+0x174>
    80014854:	00008517          	auipc	a0,0x8
    80014858:	2c450513          	add	a0,a0,708 # 8001cb18 <__func__.1+0x320>
    8001485c:	706060ef          	jal	8001af62 <printf>
    80014860:	02900513          	li	a0,41
    80014864:	5d0050ef          	jal	80019e34 <putchar>
    80014868:	4529                	li	a0,10
    8001486a:	5ca050ef          	jal	80019e34 <putchar>
    8001486e:	cc95                	beqz	s1,800148aa <store_guest_page_fault_1+0x1b6>
    80014870:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80014874:	00008597          	auipc	a1,0x8
    80014878:	25c58593          	add	a1,a1,604 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    8001487c:	c491                	beqz	s1,80014888 <store_guest_page_fault_1+0x194>
    8001487e:	6418                	ld	a4,8(s0)
    80014880:	47dd                	li	a5,23
    80014882:	04f70463          	beq	a4,a5,800148ca <store_guest_page_fault_1+0x1d6>
    80014886:	4481                	li	s1,0
    TEST_END();
    80014888:	00008517          	auipc	a0,0x8
    8001488c:	2f050513          	add	a0,a0,752 # 8001cb78 <__func__.1+0x380>
    80014890:	6d2060ef          	jal	8001af62 <printf>
    80014894:	4511                	li	a0,4
    80014896:	a48ec0ef          	jal	80000ade <goto_priv>
    8001489a:	a8dec0ef          	jal	80001326 <reset_state>

}
    8001489e:	60e2                	ld	ra,24(sp)
    800148a0:	6442                	ld	s0,16(sp)
    800148a2:	8526                	mv	a0,s1
    800148a4:	64a2                	ld	s1,8(sp)
    800148a6:	6105                	add	sp,sp,32
    800148a8:	8082                	ret
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    800148aa:	4481                	li	s1,0
    TEST_END();
    800148ac:	00008597          	auipc	a1,0x8
    800148b0:	22458593          	add	a1,a1,548 # 8001cad0 <__func__.1+0x2d8>
    800148b4:	bfd1                	j	80014888 <store_guest_page_fault_1+0x194>
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    800148b6:	00008597          	auipc	a1,0x8
    800148ba:	20a58593          	add	a1,a1,522 # 8001cac0 <__func__.1+0x2c8>
    800148be:	bfb5                	j	8001483a <store_guest_page_fault_1+0x146>
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.v=0 leads to SGPF",
    800148c0:	00008597          	auipc	a1,0x8
    800148c4:	20058593          	add	a1,a1,512 # 8001cac0 <__func__.1+0x2c8>
    800148c8:	bdd9                	j	8001479e <store_guest_page_fault_1+0xaa>
    TEST_END();
    800148ca:	00008597          	auipc	a1,0x8
    800148ce:	1f658593          	add	a1,a1,502 # 8001cac0 <__func__.1+0x2c8>
    800148d2:	bf5d                	j	80014888 <store_guest_page_fault_1+0x194>

00000000800148d4 <store_guest_page_fault_2>:

bool store_guest_page_fault_2(){
    800148d4:	1101                	add	sp,sp,-32

    TEST_START();
    800148d6:	00008597          	auipc	a1,0x8
    800148da:	85a58593          	add	a1,a1,-1958 # 8001c130 <__func__.19>
    800148de:	00008517          	auipc	a0,0x8
    800148e2:	20250513          	add	a0,a0,514 # 8001cae0 <__func__.1+0x2e8>
bool store_guest_page_fault_2(){
    800148e6:	ec06                	sd	ra,24(sp)
    800148e8:	e822                	sd	s0,16(sp)
    800148ea:	e426                	sd	s1,8(sp)
    TEST_START();
    800148ec:	676060ef          	jal	8001af62 <printf>
    800148f0:	4529                	li	a0,10
    800148f2:	542050ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    800148f6:	450d                	li	a0,3
    800148f8:	9e6ec0ef          	jal	80000ade <goto_priv>
    hspt_init();
    800148fc:	ce5eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014900:	f27eb0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80014904:	4509                	li	a0,2
    80014906:	9d8ec0ef          	jal	80000ade <goto_priv>
    vspt_init();
    8001490a:	dabeb0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    8001490e:	450d                	li	a0,3
    80014910:	9ceec0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80014914:	4509                	li	a0,2
    80014916:	8ecec0ef          	jal	80000a02 <set_prev_priv>

    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    8001491a:	0ff0000f          	fence
    8001491e:	4785                	li	a5,1
    80014920:	00028417          	auipc	s0,0x28
    80014924:	6f040413          	add	s0,s0,1776 # 8003d010 <excpt>
    80014928:	00f41023          	sh	a5,0(s0)
    8001492c:	00028797          	auipc	a5,0x28
    80014930:	7007be23          	sd	zero,1820(a5) # 8003d048 <excpt+0x38>
    80014934:	0ff0000f          	fence
    vaddr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80014938:	000807b7          	lui	a5,0x80
    8001493c:	1007b073          	csrc	sstatus,a5
    asm volatile(
    80014940:	37ab77b7          	lui	a5,0x37ab7
    80014944:	00100737          	lui	a4,0x100
    80014948:	078a                	sll	a5,a5,0x2
    8001494a:	06570713          	add	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    8001494e:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80014952:	0732                	sll	a4,a4,0xc
    80014954:	6ef74073          	.4byte	0x6ef74073
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80014958:	08200593          	li	a1,130
    8001495c:	0000d617          	auipc	a2,0xd
    80014960:	40c60613          	add	a2,a2,1036 # 80021d68 <__func__.1+0x5570>
    80014964:	00008517          	auipc	a0,0x8
    80014968:	19450513          	add	a0,a0,404 # 8001caf8 <__func__.1+0x300>
    8001496c:	5f6060ef          	jal	8001af62 <printf>
    80014970:	00144783          	lbu	a5,1(s0)
    80014974:	00008597          	auipc	a1,0x8
    80014978:	15c58593          	add	a1,a1,348 # 8001cad0 <__func__.1+0x2d8>
    8001497c:	c789                	beqz	a5,80014986 <store_guest_page_fault_2+0xb2>
    8001497e:	6418                	ld	a4,8(s0)
    80014980:	47dd                	li	a5,23
    80014982:	06f70e63          	beq	a4,a5,800149fe <store_guest_page_fault_2+0x12a>
    80014986:	00008517          	auipc	a0,0x8
    8001498a:	18a50513          	add	a0,a0,394 # 8001cb10 <__func__.1+0x318>
    8001498e:	5d4060ef          	jal	8001af62 <printf>
    80014992:	00144783          	lbu	a5,1(s0)
    80014996:	c789                	beqz	a5,800149a0 <store_guest_page_fault_2+0xcc>
    80014998:	6418                	ld	a4,8(s0)
    8001499a:	47dd                	li	a5,23
    8001499c:	00f70c63          	beq	a4,a5,800149b4 <store_guest_page_fault_2+0xe0>
    800149a0:	00008517          	auipc	a0,0x8
    800149a4:	17850513          	add	a0,a0,376 # 8001cb18 <__func__.1+0x320>
    800149a8:	5ba060ef          	jal	8001af62 <printf>
    800149ac:	02900513          	li	a0,41
    800149b0:	484050ef          	jal	80019e34 <putchar>
    800149b4:	4529                	li	a0,10
    800149b6:	47e050ef          	jal	80019e34 <putchar>
    800149ba:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    800149be:	00008597          	auipc	a1,0x8
    800149c2:	11258593          	add	a1,a1,274 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    800149c6:	c491                	beqz	s1,800149d2 <store_guest_page_fault_2+0xfe>
    800149c8:	6418                	ld	a4,8(s0)
    800149ca:	47dd                	li	a5,23
    800149cc:	02f70463          	beq	a4,a5,800149f4 <store_guest_page_fault_2+0x120>
    800149d0:	4481                	li	s1,0
    TEST_END();
    800149d2:	00008517          	auipc	a0,0x8
    800149d6:	1a650513          	add	a0,a0,422 # 8001cb78 <__func__.1+0x380>
    800149da:	588060ef          	jal	8001af62 <printf>
    800149de:	4511                	li	a0,4
    800149e0:	8feec0ef          	jal	80000ade <goto_priv>
    800149e4:	943ec0ef          	jal	80001326 <reset_state>
}
    800149e8:	60e2                	ld	ra,24(sp)
    800149ea:	6442                	ld	s0,16(sp)
    800149ec:	8526                	mv	a0,s1
    800149ee:	64a2                	ld	s1,8(sp)
    800149f0:	6105                	add	sp,sp,32
    800149f2:	8082                	ret
    TEST_END();
    800149f4:	00008597          	auipc	a1,0x8
    800149f8:	0cc58593          	add	a1,a1,204 # 8001cac0 <__func__.1+0x2c8>
    800149fc:	bfd9                	j	800149d2 <store_guest_page_fault_2+0xfe>
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    800149fe:	00008597          	auipc	a1,0x8
    80014a02:	0c258593          	add	a1,a1,194 # 8001cac0 <__func__.1+0x2c8>
    80014a06:	b741                	j	80014986 <store_guest_page_fault_2+0xb2>

0000000080014a08 <store_guest_page_fault_3>:

bool store_guest_page_fault_3(){
    80014a08:	1101                	add	sp,sp,-32

    TEST_START();
    80014a0a:	00007597          	auipc	a1,0x7
    80014a0e:	74658593          	add	a1,a1,1862 # 8001c150 <__func__.18>
    80014a12:	00008517          	auipc	a0,0x8
    80014a16:	0ce50513          	add	a0,a0,206 # 8001cae0 <__func__.1+0x2e8>
bool store_guest_page_fault_3(){
    80014a1a:	ec06                	sd	ra,24(sp)
    80014a1c:	e822                	sd	s0,16(sp)
    80014a1e:	e426                	sd	s1,8(sp)
    TEST_START();
    80014a20:	542060ef          	jal	8001af62 <printf>
    80014a24:	4529                	li	a0,10
    80014a26:	40e050ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80014a2a:	450d                	li	a0,3
    80014a2c:	8b2ec0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80014a30:	bb1eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014a34:	df3eb0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80014a38:	4509                	li	a0,2
    80014a3a:	8a4ec0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80014a3e:	c77eb0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80014a42:	450d                	li	a0,3
    80014a44:	89aec0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80014a48:	4509                	li	a0,2
    80014a4a:	fb9eb0ef          	jal	80000a02 <set_prev_priv>


    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80014a4e:	0ff0000f          	fence
    80014a52:	4785                	li	a5,1
    80014a54:	00028417          	auipc	s0,0x28
    80014a58:	5bc40413          	add	s0,s0,1468 # 8003d010 <excpt>
    80014a5c:	00f41023          	sh	a5,0(s0)
    80014a60:	00028797          	auipc	a5,0x28
    80014a64:	5e07b423          	sd	zero,1512(a5) # 8003d048 <excpt+0x38>
    80014a68:	0ff0000f          	fence
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80014a6c:	000807b7          	lui	a5,0x80
    80014a70:	1007a073          	csrs	sstatus,a5
    80014a74:	37ab77b7          	lui	a5,0x37ab7
    80014a78:	00100737          	lui	a4,0x100
    80014a7c:	078a                	sll	a5,a5,0x2
    80014a7e:	06570713          	add	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80014a82:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80014a86:	0732                	sll	a4,a4,0xc
    80014a88:	6ef74073          	.4byte	0x6ef74073
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80014a8c:	08200593          	li	a1,130
    80014a90:	0000d617          	auipc	a2,0xd
    80014a94:	33860613          	add	a2,a2,824 # 80021dc8 <__func__.1+0x55d0>
    80014a98:	00008517          	auipc	a0,0x8
    80014a9c:	06050513          	add	a0,a0,96 # 8001caf8 <__func__.1+0x300>
    80014aa0:	4c2060ef          	jal	8001af62 <printf>
    80014aa4:	00144783          	lbu	a5,1(s0)
    80014aa8:	00008597          	auipc	a1,0x8
    80014aac:	02858593          	add	a1,a1,40 # 8001cad0 <__func__.1+0x2d8>
    80014ab0:	c789                	beqz	a5,80014aba <store_guest_page_fault_3+0xb2>
    80014ab2:	6418                	ld	a4,8(s0)
    80014ab4:	47dd                	li	a5,23
    80014ab6:	08f70663          	beq	a4,a5,80014b42 <store_guest_page_fault_3+0x13a>
    80014aba:	00008517          	auipc	a0,0x8
    80014abe:	05650513          	add	a0,a0,86 # 8001cb10 <__func__.1+0x318>
    80014ac2:	4a0060ef          	jal	8001af62 <printf>
    80014ac6:	00144783          	lbu	a5,1(s0)
    80014aca:	c789                	beqz	a5,80014ad4 <store_guest_page_fault_3+0xcc>
    80014acc:	6418                	ld	a4,8(s0)
    80014ace:	47dd                	li	a5,23
    80014ad0:	00f70c63          	beq	a4,a5,80014ae8 <store_guest_page_fault_3+0xe0>
    80014ad4:	00008517          	auipc	a0,0x8
    80014ad8:	04450513          	add	a0,a0,68 # 8001cb18 <__func__.1+0x320>
    80014adc:	486060ef          	jal	8001af62 <printf>
    80014ae0:	02900513          	li	a0,41
    80014ae4:	350050ef          	jal	80019e34 <putchar>
    80014ae8:	4529                	li	a0,10
    80014aea:	34a050ef          	jal	80019e34 <putchar>
    80014aee:	00144483          	lbu	s1,1(s0)
    80014af2:	c489                	beqz	s1,80014afc <store_guest_page_fault_3+0xf4>
    80014af4:	6418                	ld	a4,8(s0)
    80014af6:	47dd                	li	a5,23
    80014af8:	02f70c63          	beq	a4,a5,80014b30 <store_guest_page_fault_3+0x128>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80014afc:	000807b7          	lui	a5,0x80
    80014b00:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80014b04:	4481                	li	s1,0

    TEST_END();
    80014b06:	00008597          	auipc	a1,0x8
    80014b0a:	fca58593          	add	a1,a1,-54 # 8001cad0 <__func__.1+0x2d8>
    80014b0e:	00008517          	auipc	a0,0x8
    80014b12:	06a50513          	add	a0,a0,106 # 8001cb78 <__func__.1+0x380>
    80014b16:	44c060ef          	jal	8001af62 <printf>
    80014b1a:	4511                	li	a0,4
    80014b1c:	fc3eb0ef          	jal	80000ade <goto_priv>
    80014b20:	807ec0ef          	jal	80001326 <reset_state>
}
    80014b24:	60e2                	ld	ra,24(sp)
    80014b26:	6442                	ld	s0,16(sp)
    80014b28:	8526                	mv	a0,s1
    80014b2a:	64a2                	ld	s1,8(sp)
    80014b2c:	6105                	add	sp,sp,32
    80014b2e:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80014b30:	000807b7          	lui	a5,0x80
    80014b34:	1007b073          	csrc	sstatus,a5
    TEST_END();
    80014b38:	00008597          	auipc	a1,0x8
    80014b3c:	f8858593          	add	a1,a1,-120 # 8001cac0 <__func__.1+0x2c8>
    80014b40:	b7f9                	j	80014b0e <store_guest_page_fault_3+0x106>
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80014b42:	00008597          	auipc	a1,0x8
    80014b46:	f7e58593          	add	a1,a1,-130 # 8001cac0 <__func__.1+0x2c8>
    80014b4a:	bf85                	j	80014aba <store_guest_page_fault_3+0xb2>

0000000080014b4c <store_guest_page_fault_4>:

bool store_guest_page_fault_4(){
    80014b4c:	1101                	add	sp,sp,-32

    TEST_START();
    80014b4e:	00007597          	auipc	a1,0x7
    80014b52:	62258593          	add	a1,a1,1570 # 8001c170 <__func__.17>
    80014b56:	00008517          	auipc	a0,0x8
    80014b5a:	f8a50513          	add	a0,a0,-118 # 8001cae0 <__func__.1+0x2e8>
bool store_guest_page_fault_4(){
    80014b5e:	ec06                	sd	ra,24(sp)
    80014b60:	e822                	sd	s0,16(sp)
    80014b62:	e426                	sd	s1,8(sp)
    TEST_START();
    80014b64:	3fe060ef          	jal	8001af62 <printf>
    80014b68:	4529                	li	a0,10
    80014b6a:	2ca050ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80014b6e:	450d                	li	a0,3
    80014b70:	f6feb0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80014b74:	a6deb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014b78:	cafeb0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80014b7c:	4509                	li	a0,2
    80014b7e:	f61eb0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80014b82:	b33eb0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80014b86:	4511                	li	a0,4
    80014b88:	f57eb0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80014b8c:	000407b7          	lui	a5,0x40
    80014b90:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    80014b94:	450d                	li	a0,3
    80014b96:	f49eb0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80014b9a:	4509                	li	a0,2
    80014b9c:	e67eb0ef          	jal	80000a02 <set_prev_priv>

    //执行hsvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80014ba0:	0ff0000f          	fence
    80014ba4:	4785                	li	a5,1
    80014ba6:	00028417          	auipc	s0,0x28
    80014baa:	46a40413          	add	s0,s0,1130 # 8003d010 <excpt>
    80014bae:	00f41023          	sh	a5,0(s0)
    80014bb2:	00028797          	auipc	a5,0x28
    80014bb6:	4807bb23          	sd	zero,1174(a5) # 8003d048 <excpt+0x38>
    80014bba:	0ff0000f          	fence
    80014bbe:	37ab77b7          	lui	a5,0x37ab7
    80014bc2:	00080737          	lui	a4,0x80
    80014bc6:	078a                	sll	a5,a5,0x2
    80014bc8:	076d                	add	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    80014bca:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80014bce:	0736                	sll	a4,a4,0xd
    80014bd0:	6ef74073          	.4byte	0x6ef74073
    vaddr = hs_page_base(VSURWX_GUX);


    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    80014bd4:	08200593          	li	a1,130
    80014bd8:	0000d617          	auipc	a2,0xd
    80014bdc:	26060613          	add	a2,a2,608 # 80021e38 <__func__.1+0x5640>
    80014be0:	00008517          	auipc	a0,0x8
    80014be4:	f1850513          	add	a0,a0,-232 # 8001caf8 <__func__.1+0x300>
    80014be8:	37a060ef          	jal	8001af62 <printf>
    80014bec:	00144783          	lbu	a5,1(s0)
    80014bf0:	00008597          	auipc	a1,0x8
    80014bf4:	ee058593          	add	a1,a1,-288 # 8001cad0 <__func__.1+0x2d8>
    80014bf8:	c789                	beqz	a5,80014c02 <store_guest_page_fault_4+0xb6>
    80014bfa:	6418                	ld	a4,8(s0)
    80014bfc:	47bd                	li	a5,15
    80014bfe:	06f70e63          	beq	a4,a5,80014c7a <store_guest_page_fault_4+0x12e>
    80014c02:	00008517          	auipc	a0,0x8
    80014c06:	f0e50513          	add	a0,a0,-242 # 8001cb10 <__func__.1+0x318>
    80014c0a:	358060ef          	jal	8001af62 <printf>
    80014c0e:	00144783          	lbu	a5,1(s0)
    80014c12:	c789                	beqz	a5,80014c1c <store_guest_page_fault_4+0xd0>
    80014c14:	6418                	ld	a4,8(s0)
    80014c16:	47bd                	li	a5,15
    80014c18:	00f70c63          	beq	a4,a5,80014c30 <store_guest_page_fault_4+0xe4>
    80014c1c:	00008517          	auipc	a0,0x8
    80014c20:	efc50513          	add	a0,a0,-260 # 8001cb18 <__func__.1+0x320>
    80014c24:	33e060ef          	jal	8001af62 <printf>
    80014c28:	02900513          	li	a0,41
    80014c2c:	208050ef          	jal	80019e34 <putchar>
    80014c30:	4529                	li	a0,10
    80014c32:	202050ef          	jal	80019e34 <putchar>
    80014c36:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80014c3a:	00008597          	auipc	a1,0x8
    80014c3e:	e9658593          	add	a1,a1,-362 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    80014c42:	c491                	beqz	s1,80014c4e <store_guest_page_fault_4+0x102>
    80014c44:	6418                	ld	a4,8(s0)
    80014c46:	47bd                	li	a5,15
    80014c48:	02f70463          	beq	a4,a5,80014c70 <store_guest_page_fault_4+0x124>
    80014c4c:	4481                	li	s1,0
    TEST_END();
    80014c4e:	00008517          	auipc	a0,0x8
    80014c52:	f2a50513          	add	a0,a0,-214 # 8001cb78 <__func__.1+0x380>
    80014c56:	30c060ef          	jal	8001af62 <printf>
    80014c5a:	4511                	li	a0,4
    80014c5c:	e83eb0ef          	jal	80000ade <goto_priv>
    80014c60:	ec6ec0ef          	jal	80001326 <reset_state>
}
    80014c64:	60e2                	ld	ra,24(sp)
    80014c66:	6442                	ld	s0,16(sp)
    80014c68:	8526                	mv	a0,s1
    80014c6a:	64a2                	ld	s1,8(sp)
    80014c6c:	6105                	add	sp,sp,32
    80014c6e:	8082                	ret
    TEST_END();
    80014c70:	00008597          	auipc	a1,0x8
    80014c74:	e5058593          	add	a1,a1,-432 # 8001cac0 <__func__.1+0x2c8>
    80014c78:	bfd9                	j	80014c4e <store_guest_page_fault_4+0x102>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    80014c7a:	00008597          	auipc	a1,0x8
    80014c7e:	e4658593          	add	a1,a1,-442 # 8001cac0 <__func__.1+0x2c8>
    80014c82:	b741                	j	80014c02 <store_guest_page_fault_4+0xb6>

0000000080014c84 <store_guest_page_fault_5>:

bool store_guest_page_fault_5(){
    80014c84:	1141                	add	sp,sp,-16

    TEST_START();
    80014c86:	00007597          	auipc	a1,0x7
    80014c8a:	50a58593          	add	a1,a1,1290 # 8001c190 <__func__.16>
    80014c8e:	00008517          	auipc	a0,0x8
    80014c92:	e5250513          	add	a0,a0,-430 # 8001cae0 <__func__.1+0x2e8>
bool store_guest_page_fault_5(){
    80014c96:	e406                	sd	ra,8(sp)
    80014c98:	e022                	sd	s0,0(sp)
    TEST_START();
    80014c9a:	2c8060ef          	jal	8001af62 <printf>
    80014c9e:	4529                	li	a0,10
    80014ca0:	194050ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80014ca4:	450d                	li	a0,3
    80014ca6:	e39eb0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80014caa:	937eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014cae:	b79eb0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80014cb2:	4509                	li	a0,2
    80014cb4:	e2beb0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80014cb8:	9fdeb0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_M);
    80014cbc:	4511                	li	a0,4
    80014cbe:	e21eb0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80014cc2:	000407b7          	lui	a5,0x40
    80014cc6:	2007a073          	csrs	vsstatus,a5

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80014cca:	450d                	li	a0,3
    80014ccc:	e13eb0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80014cd0:	4509                	li	a0,2
    80014cd2:	d31eb0ef          	jal	80000a02 <set_prev_priv>

    //执行hsvd指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80014cd6:	0ff0000f          	fence
    80014cda:	4785                	li	a5,1
    80014cdc:	00028417          	auipc	s0,0x28
    80014ce0:	33440413          	add	s0,s0,820 # 8003d010 <excpt>
    80014ce4:	00f41023          	sh	a5,0(s0)
    80014ce8:	00028797          	auipc	a5,0x28
    80014cec:	3607b023          	sd	zero,864(a5) # 8003d048 <excpt+0x38>
    80014cf0:	0ff0000f          	fence
    asm volatile(
    80014cf4:	37ab77b7          	lui	a5,0x37ab7
    80014cf8:	00080737          	lui	a4,0x80
    80014cfc:	078a                	sll	a5,a5,0x2
    80014cfe:	0765                	add	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80014d00:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80014d04:	0736                	sll	a4,a4,0xd
    80014d06:	62f74073          	.4byte	0x62f74073
    hsvb(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    80014d0a:	08200593          	li	a1,130
    80014d0e:	0000d617          	auipc	a2,0xd
    80014d12:	16a60613          	add	a2,a2,362 # 80021e78 <__func__.1+0x5680>
    80014d16:	00008517          	auipc	a0,0x8
    80014d1a:	de250513          	add	a0,a0,-542 # 8001caf8 <__func__.1+0x300>
    80014d1e:	244060ef          	jal	8001af62 <printf>
    80014d22:	00144783          	lbu	a5,1(s0)
    80014d26:	00008597          	auipc	a1,0x8
    80014d2a:	d9a58593          	add	a1,a1,-614 # 8001cac0 <__func__.1+0x2c8>
    80014d2e:	c789                	beqz	a5,80014d38 <store_guest_page_fault_5+0xb4>
    80014d30:	00008597          	auipc	a1,0x8
    80014d34:	da058593          	add	a1,a1,-608 # 8001cad0 <__func__.1+0x2d8>
    80014d38:	00008517          	auipc	a0,0x8
    80014d3c:	dd850513          	add	a0,a0,-552 # 8001cb10 <__func__.1+0x318>
    80014d40:	222060ef          	jal	8001af62 <printf>
    80014d44:	00144783          	lbu	a5,1(s0)
    80014d48:	e3b1                	bnez	a5,80014d8c <store_guest_page_fault_5+0x108>
    80014d4a:	4529                	li	a0,10
    80014d4c:	0e8050ef          	jal	80019e34 <putchar>
    80014d50:	00144783          	lbu	a5,1(s0)
    80014d54:	e795                	bnez	a5,80014d80 <store_guest_page_fault_5+0xfc>
    80014d56:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80014d58:	00008597          	auipc	a1,0x8
    80014d5c:	d6858593          	add	a1,a1,-664 # 8001cac0 <__func__.1+0x2c8>
    80014d60:	00008517          	auipc	a0,0x8
    80014d64:	e1850513          	add	a0,a0,-488 # 8001cb78 <__func__.1+0x380>
    80014d68:	1fa060ef          	jal	8001af62 <printf>
    80014d6c:	4511                	li	a0,4
    80014d6e:	d71eb0ef          	jal	80000ade <goto_priv>
    80014d72:	db4ec0ef          	jal	80001326 <reset_state>
}
    80014d76:	60a2                	ld	ra,8(sp)
    80014d78:	8522                	mv	a0,s0
    80014d7a:	6402                	ld	s0,0(sp)
    80014d7c:	0141                	add	sp,sp,16
    80014d7e:	8082                	ret
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    80014d80:	4401                	li	s0,0
    TEST_END();
    80014d82:	00008597          	auipc	a1,0x8
    80014d86:	d4e58593          	add	a1,a1,-690 # 8001cad0 <__func__.1+0x2d8>
    80014d8a:	bfd9                	j	80014d60 <store_guest_page_fault_5+0xdc>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    80014d8c:	00008517          	auipc	a0,0x8
    80014d90:	d8c50513          	add	a0,a0,-628 # 8001cb18 <__func__.1+0x320>
    80014d94:	1ce060ef          	jal	8001af62 <printf>
    80014d98:	02900513          	li	a0,41
    80014d9c:	098050ef          	jal	80019e34 <putchar>
    80014da0:	b76d                	j	80014d4a <store_guest_page_fault_5+0xc6>

0000000080014da2 <store_guest_page_fault_6>:

bool store_guest_page_fault_6(){
    80014da2:	1101                	add	sp,sp,-32

    TEST_START();
    80014da4:	00007597          	auipc	a1,0x7
    80014da8:	40c58593          	add	a1,a1,1036 # 8001c1b0 <__func__.15>
    80014dac:	00008517          	auipc	a0,0x8
    80014db0:	d3450513          	add	a0,a0,-716 # 8001cae0 <__func__.1+0x2e8>
bool store_guest_page_fault_6(){
    80014db4:	ec06                	sd	ra,24(sp)
    80014db6:	e822                	sd	s0,16(sp)
    80014db8:	e426                	sd	s1,8(sp)
    TEST_START();
    80014dba:	1a8060ef          	jal	8001af62 <printf>
    80014dbe:	4529                	li	a0,10
    80014dc0:	074050ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80014dc4:	450d                	li	a0,3
    80014dc6:	d19eb0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80014dca:	817eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014dce:	a59eb0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80014dd2:	4509                	li	a0,2
    80014dd4:	d0beb0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80014dd8:	8ddeb0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80014ddc:	4509                	li	a0,2
    80014dde:	d01eb0ef          	jal	80000ade <goto_priv>

    //执行store指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80014de2:	0ff0000f          	fence
    80014de6:	4785                	li	a5,1
    80014de8:	00028417          	auipc	s0,0x28
    80014dec:	22840413          	add	s0,s0,552 # 8003d010 <excpt>
    80014df0:	00f41023          	sh	a5,0(s0)
    80014df4:	00028797          	auipc	a5,0x28
    80014df8:	2407ba23          	sd	zero,596(a5) # 8003d048 <excpt+0x38>
    80014dfc:	0ff0000f          	fence
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80014e00:	37ab77b7          	lui	a5,0x37ab7
    80014e04:	00100737          	lui	a4,0x100
    80014e08:	078a                	sll	a5,a5,0x2
    80014e0a:	06570713          	add	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80014e0e:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80014e12:	0732                	sll	a4,a4,0xc
    80014e14:	00f73023          	sd	a5,0(a4)

    vaddr = hs_page_base(VSRWX_GI);
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.v=0 leads to SGPF",
    80014e18:	08200593          	li	a1,130
    80014e1c:	0000d617          	auipc	a2,0xd
    80014e20:	09460613          	add	a2,a2,148 # 80021eb0 <__func__.1+0x56b8>
    80014e24:	00008517          	auipc	a0,0x8
    80014e28:	cd450513          	add	a0,a0,-812 # 8001caf8 <__func__.1+0x300>
    80014e2c:	136060ef          	jal	8001af62 <printf>
    80014e30:	00144783          	lbu	a5,1(s0)
    80014e34:	00008597          	auipc	a1,0x8
    80014e38:	c9c58593          	add	a1,a1,-868 # 8001cad0 <__func__.1+0x2d8>
    80014e3c:	c789                	beqz	a5,80014e46 <store_guest_page_fault_6+0xa4>
    80014e3e:	6418                	ld	a4,8(s0)
    80014e40:	47dd                	li	a5,23
    80014e42:	12f70363          	beq	a4,a5,80014f68 <store_guest_page_fault_6+0x1c6>
    80014e46:	00008517          	auipc	a0,0x8
    80014e4a:	cca50513          	add	a0,a0,-822 # 8001cb10 <__func__.1+0x318>
    80014e4e:	114060ef          	jal	8001af62 <printf>
    80014e52:	00144783          	lbu	a5,1(s0)
    80014e56:	c789                	beqz	a5,80014e60 <store_guest_page_fault_6+0xbe>
    80014e58:	6418                	ld	a4,8(s0)
    80014e5a:	47dd                	li	a5,23
    80014e5c:	00f70c63          	beq	a4,a5,80014e74 <store_guest_page_fault_6+0xd2>
    80014e60:	00008517          	auipc	a0,0x8
    80014e64:	cb850513          	add	a0,a0,-840 # 8001cb18 <__func__.1+0x320>
    80014e68:	0fa060ef          	jal	8001af62 <printf>
    80014e6c:	02900513          	li	a0,41
    80014e70:	7c5040ef          	jal	80019e34 <putchar>
    80014e74:	4529                	li	a0,10
    80014e76:	7bf040ef          	jal	80019e34 <putchar>
    80014e7a:	00144783          	lbu	a5,1(s0)
    80014e7e:	4481                	li	s1,0
    80014e80:	c789                	beqz	a5,80014e8a <store_guest_page_fault_6+0xe8>
    80014e82:	6404                	ld	s1,8(s0)
    80014e84:	14a5                	add	s1,s1,-23
    80014e86:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SGPF
    );


    //执行store相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    80014e8a:	0ff0000f          	fence
    80014e8e:	4785                	li	a5,1
    80014e90:	00f41023          	sh	a5,0(s0)
    80014e94:	00028797          	auipc	a5,0x28
    80014e98:	1a07ba23          	sd	zero,436(a5) # 8003d048 <excpt+0x38>
    80014e9c:	0ff0000f          	fence
STORE_INSTRUCTION(sh, "sh", uint16_t);
    80014ea0:	001007b7          	lui	a5,0x100
    80014ea4:	7771                	lui	a4,0xffffc
    80014ea6:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80014eaa:	eef7071b          	addw	a4,a4,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    80014eae:	07b2                	sll	a5,a5,0xc
    80014eb0:	00e79023          	sh	a4,0(a5)
    addr = hs_page_base(VSRWX_GI);

    sh(addr,0xbeef);   
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80014eb4:	08200593          	li	a1,130
    80014eb8:	0000d617          	auipc	a2,0xd
    80014ebc:	04860613          	add	a2,a2,72 # 80021f00 <__func__.1+0x5708>
    80014ec0:	00008517          	auipc	a0,0x8
    80014ec4:	c3850513          	add	a0,a0,-968 # 8001caf8 <__func__.1+0x300>
    80014ec8:	09a060ef          	jal	8001af62 <printf>
    80014ecc:	00144783          	lbu	a5,1(s0)
    80014ed0:	00008597          	auipc	a1,0x8
    80014ed4:	c0058593          	add	a1,a1,-1024 # 8001cad0 <__func__.1+0x2d8>
    80014ed8:	c789                	beqz	a5,80014ee2 <store_guest_page_fault_6+0x140>
    80014eda:	6418                	ld	a4,8(s0)
    80014edc:	47dd                	li	a5,23
    80014ede:	08f70063          	beq	a4,a5,80014f5e <store_guest_page_fault_6+0x1bc>
    80014ee2:	00008517          	auipc	a0,0x8
    80014ee6:	c2e50513          	add	a0,a0,-978 # 8001cb10 <__func__.1+0x318>
    80014eea:	078060ef          	jal	8001af62 <printf>
    80014eee:	00144783          	lbu	a5,1(s0)
    80014ef2:	c789                	beqz	a5,80014efc <store_guest_page_fault_6+0x15a>
    80014ef4:	6418                	ld	a4,8(s0)
    80014ef6:	47dd                	li	a5,23
    80014ef8:	00f70c63          	beq	a4,a5,80014f10 <store_guest_page_fault_6+0x16e>
    80014efc:	00008517          	auipc	a0,0x8
    80014f00:	c1c50513          	add	a0,a0,-996 # 8001cb18 <__func__.1+0x320>
    80014f04:	05e060ef          	jal	8001af62 <printf>
    80014f08:	02900513          	li	a0,41
    80014f0c:	729040ef          	jal	80019e34 <putchar>
    80014f10:	4529                	li	a0,10
    80014f12:	723040ef          	jal	80019e34 <putchar>
    80014f16:	cc95                	beqz	s1,80014f52 <store_guest_page_fault_6+0x1b0>
    80014f18:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80014f1c:	00008597          	auipc	a1,0x8
    80014f20:	bb458593          	add	a1,a1,-1100 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80014f24:	c491                	beqz	s1,80014f30 <store_guest_page_fault_6+0x18e>
    80014f26:	6418                	ld	a4,8(s0)
    80014f28:	47dd                	li	a5,23
    80014f2a:	04f70463          	beq	a4,a5,80014f72 <store_guest_page_fault_6+0x1d0>
    80014f2e:	4481                	li	s1,0
    TEST_END();
    80014f30:	00008517          	auipc	a0,0x8
    80014f34:	c4850513          	add	a0,a0,-952 # 8001cb78 <__func__.1+0x380>
    80014f38:	02a060ef          	jal	8001af62 <printf>
    80014f3c:	4511                	li	a0,4
    80014f3e:	ba1eb0ef          	jal	80000ade <goto_priv>
    80014f42:	be4ec0ef          	jal	80001326 <reset_state>

}
    80014f46:	60e2                	ld	ra,24(sp)
    80014f48:	6442                	ld	s0,16(sp)
    80014f4a:	8526                	mv	a0,s1
    80014f4c:	64a2                	ld	s1,8(sp)
    80014f4e:	6105                	add	sp,sp,32
    80014f50:	8082                	ret
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80014f52:	4481                	li	s1,0
    TEST_END();
    80014f54:	00008597          	auipc	a1,0x8
    80014f58:	b7c58593          	add	a1,a1,-1156 # 8001cad0 <__func__.1+0x2d8>
    80014f5c:	bfd1                	j	80014f30 <store_guest_page_fault_6+0x18e>
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80014f5e:	00008597          	auipc	a1,0x8
    80014f62:	b6258593          	add	a1,a1,-1182 # 8001cac0 <__func__.1+0x2c8>
    80014f66:	bfb5                	j	80014ee2 <store_guest_page_fault_6+0x140>
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.v=0 leads to SGPF",
    80014f68:	00008597          	auipc	a1,0x8
    80014f6c:	b5858593          	add	a1,a1,-1192 # 8001cac0 <__func__.1+0x2c8>
    80014f70:	bdd9                	j	80014e46 <store_guest_page_fault_6+0xa4>
    TEST_END();
    80014f72:	00008597          	auipc	a1,0x8
    80014f76:	b4e58593          	add	a1,a1,-1202 # 8001cac0 <__func__.1+0x2c8>
    80014f7a:	bf5d                	j	80014f30 <store_guest_page_fault_6+0x18e>

0000000080014f7c <store_guest_page_fault_7>:

bool store_guest_page_fault_7(){
    80014f7c:	1101                	add	sp,sp,-32

    TEST_START();
    80014f7e:	00007597          	auipc	a1,0x7
    80014f82:	25258593          	add	a1,a1,594 # 8001c1d0 <__func__.14>
    80014f86:	00008517          	auipc	a0,0x8
    80014f8a:	b5a50513          	add	a0,a0,-1190 # 8001cae0 <__func__.1+0x2e8>
bool store_guest_page_fault_7(){
    80014f8e:	ec06                	sd	ra,24(sp)
    80014f90:	e822                	sd	s0,16(sp)
    80014f92:	e426                	sd	s1,8(sp)
    TEST_START();
    80014f94:	7cf050ef          	jal	8001af62 <printf>
    80014f98:	4529                	li	a0,10
    80014f9a:	69b040ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80014f9e:	450d                	li	a0,3
    80014fa0:	b3feb0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80014fa4:	e3ceb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014fa8:	87feb0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80014fac:	4509                	li	a0,2
    80014fae:	b31eb0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80014fb2:	f02eb0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80014fb6:	4509                	li	a0,2
    80014fb8:	b27eb0ef          	jal	80000ade <goto_priv>

    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    80014fbc:	0ff0000f          	fence
    80014fc0:	4785                	li	a5,1
    80014fc2:	00028417          	auipc	s0,0x28
    80014fc6:	04e40413          	add	s0,s0,78 # 8003d010 <excpt>
    80014fca:	00f41023          	sh	a5,0(s0)
    80014fce:	00028797          	auipc	a5,0x28
    80014fd2:	0607bd23          	sd	zero,122(a5) # 8003d048 <excpt+0x38>
    80014fd6:	0ff0000f          	fence
    vaddr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80014fda:	000807b7          	lui	a5,0x80
    80014fde:	1007b073          	csrc	sstatus,a5
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80014fe2:	37ab77b7          	lui	a5,0x37ab7
    80014fe6:	00100737          	lui	a4,0x100
    80014fea:	078a                	sll	a5,a5,0x2
    80014fec:	06570713          	add	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80014ff0:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80014ff4:	0732                	sll	a4,a4,0xc
    80014ff6:	00f73023          	sd	a5,0(a4)
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80014ffa:	08200593          	li	a1,130
    80014ffe:	0000d617          	auipc	a2,0xd
    80015002:	f5a60613          	add	a2,a2,-166 # 80021f58 <__func__.1+0x5760>
    80015006:	00008517          	auipc	a0,0x8
    8001500a:	af250513          	add	a0,a0,-1294 # 8001caf8 <__func__.1+0x300>
    8001500e:	755050ef          	jal	8001af62 <printf>
    80015012:	00144783          	lbu	a5,1(s0)
    80015016:	00008597          	auipc	a1,0x8
    8001501a:	aba58593          	add	a1,a1,-1350 # 8001cad0 <__func__.1+0x2d8>
    8001501e:	c789                	beqz	a5,80015028 <store_guest_page_fault_7+0xac>
    80015020:	6418                	ld	a4,8(s0)
    80015022:	47dd                	li	a5,23
    80015024:	06f70e63          	beq	a4,a5,800150a0 <store_guest_page_fault_7+0x124>
    80015028:	00008517          	auipc	a0,0x8
    8001502c:	ae850513          	add	a0,a0,-1304 # 8001cb10 <__func__.1+0x318>
    80015030:	733050ef          	jal	8001af62 <printf>
    80015034:	00144783          	lbu	a5,1(s0)
    80015038:	c789                	beqz	a5,80015042 <store_guest_page_fault_7+0xc6>
    8001503a:	6418                	ld	a4,8(s0)
    8001503c:	47dd                	li	a5,23
    8001503e:	00f70c63          	beq	a4,a5,80015056 <store_guest_page_fault_7+0xda>
    80015042:	00008517          	auipc	a0,0x8
    80015046:	ad650513          	add	a0,a0,-1322 # 8001cb18 <__func__.1+0x320>
    8001504a:	719050ef          	jal	8001af62 <printf>
    8001504e:	02900513          	li	a0,41
    80015052:	5e3040ef          	jal	80019e34 <putchar>
    80015056:	4529                	li	a0,10
    80015058:	5dd040ef          	jal	80019e34 <putchar>
    8001505c:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80015060:	00008597          	auipc	a1,0x8
    80015064:	a7058593          	add	a1,a1,-1424 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80015068:	c491                	beqz	s1,80015074 <store_guest_page_fault_7+0xf8>
    8001506a:	6418                	ld	a4,8(s0)
    8001506c:	47dd                	li	a5,23
    8001506e:	02f70463          	beq	a4,a5,80015096 <store_guest_page_fault_7+0x11a>
    80015072:	4481                	li	s1,0
    TEST_END();
    80015074:	00008517          	auipc	a0,0x8
    80015078:	b0450513          	add	a0,a0,-1276 # 8001cb78 <__func__.1+0x380>
    8001507c:	6e7050ef          	jal	8001af62 <printf>
    80015080:	4511                	li	a0,4
    80015082:	a5deb0ef          	jal	80000ade <goto_priv>
    80015086:	aa0ec0ef          	jal	80001326 <reset_state>
}
    8001508a:	60e2                	ld	ra,24(sp)
    8001508c:	6442                	ld	s0,16(sp)
    8001508e:	8526                	mv	a0,s1
    80015090:	64a2                	ld	s1,8(sp)
    80015092:	6105                	add	sp,sp,32
    80015094:	8082                	ret
    TEST_END();
    80015096:	00008597          	auipc	a1,0x8
    8001509a:	a2a58593          	add	a1,a1,-1494 # 8001cac0 <__func__.1+0x2c8>
    8001509e:	bfd9                	j	80015074 <store_guest_page_fault_7+0xf8>
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    800150a0:	00008597          	auipc	a1,0x8
    800150a4:	a2058593          	add	a1,a1,-1504 # 8001cac0 <__func__.1+0x2c8>
    800150a8:	b741                	j	80015028 <store_guest_page_fault_7+0xac>

00000000800150aa <store_guest_page_fault_8>:

bool store_guest_page_fault_8(){
    800150aa:	1101                	add	sp,sp,-32

    TEST_START();
    800150ac:	00007597          	auipc	a1,0x7
    800150b0:	14458593          	add	a1,a1,324 # 8001c1f0 <__func__.13>
    800150b4:	00008517          	auipc	a0,0x8
    800150b8:	a2c50513          	add	a0,a0,-1492 # 8001cae0 <__func__.1+0x2e8>
bool store_guest_page_fault_8(){
    800150bc:	ec06                	sd	ra,24(sp)
    800150be:	e822                	sd	s0,16(sp)
    800150c0:	e426                	sd	s1,8(sp)
    TEST_START();
    800150c2:	6a1050ef          	jal	8001af62 <printf>
    800150c6:	4529                	li	a0,10
    800150c8:	56d040ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    800150cc:	450d                	li	a0,3
    800150ce:	a11eb0ef          	jal	80000ade <goto_priv>
    hspt_init();
    800150d2:	d0eeb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800150d6:	f50eb0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    800150da:	4509                	li	a0,2
    800150dc:	a03eb0ef          	jal	80000ade <goto_priv>
    vspt_init();
    800150e0:	dd4eb0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    800150e4:	4509                	li	a0,2
    800150e6:	9f9eb0ef          	jal	80000ade <goto_priv>


    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    800150ea:	0ff0000f          	fence
    800150ee:	4785                	li	a5,1
    800150f0:	00028417          	auipc	s0,0x28
    800150f4:	f2040413          	add	s0,s0,-224 # 8003d010 <excpt>
    800150f8:	00f41023          	sh	a5,0(s0)
    800150fc:	00028797          	auipc	a5,0x28
    80015100:	f407b623          	sd	zero,-180(a5) # 8003d048 <excpt+0x38>
    80015104:	0ff0000f          	fence
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80015108:	000807b7          	lui	a5,0x80
    8001510c:	1007a073          	csrs	sstatus,a5
STORE_INSTRUCTION(sh, "sh", uint16_t);
    80015110:	001007b7          	lui	a5,0x100
    80015114:	7771                	lui	a4,0xffffc
    80015116:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8001511a:	eef7071b          	addw	a4,a4,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    8001511e:	07b2                	sll	a5,a5,0xc
    80015120:	00e79023          	sh	a4,0(a5)
    sh(vaddr,0xbeef);
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80015124:	08200593          	li	a1,130
    80015128:	0000d617          	auipc	a2,0xd
    8001512c:	e9060613          	add	a2,a2,-368 # 80021fb8 <__func__.1+0x57c0>
    80015130:	00008517          	auipc	a0,0x8
    80015134:	9c850513          	add	a0,a0,-1592 # 8001caf8 <__func__.1+0x300>
    80015138:	62b050ef          	jal	8001af62 <printf>
    8001513c:	00144783          	lbu	a5,1(s0)
    80015140:	00008597          	auipc	a1,0x8
    80015144:	99058593          	add	a1,a1,-1648 # 8001cad0 <__func__.1+0x2d8>
    80015148:	c789                	beqz	a5,80015152 <store_guest_page_fault_8+0xa8>
    8001514a:	6418                	ld	a4,8(s0)
    8001514c:	47dd                	li	a5,23
    8001514e:	08f70663          	beq	a4,a5,800151da <store_guest_page_fault_8+0x130>
    80015152:	00008517          	auipc	a0,0x8
    80015156:	9be50513          	add	a0,a0,-1602 # 8001cb10 <__func__.1+0x318>
    8001515a:	609050ef          	jal	8001af62 <printf>
    8001515e:	00144783          	lbu	a5,1(s0)
    80015162:	c789                	beqz	a5,8001516c <store_guest_page_fault_8+0xc2>
    80015164:	6418                	ld	a4,8(s0)
    80015166:	47dd                	li	a5,23
    80015168:	00f70c63          	beq	a4,a5,80015180 <store_guest_page_fault_8+0xd6>
    8001516c:	00008517          	auipc	a0,0x8
    80015170:	9ac50513          	add	a0,a0,-1620 # 8001cb18 <__func__.1+0x320>
    80015174:	5ef050ef          	jal	8001af62 <printf>
    80015178:	02900513          	li	a0,41
    8001517c:	4b9040ef          	jal	80019e34 <putchar>
    80015180:	4529                	li	a0,10
    80015182:	4b3040ef          	jal	80019e34 <putchar>
    80015186:	00144483          	lbu	s1,1(s0)
    8001518a:	c489                	beqz	s1,80015194 <store_guest_page_fault_8+0xea>
    8001518c:	6418                	ld	a4,8(s0)
    8001518e:	47dd                	li	a5,23
    80015190:	02f70c63          	beq	a4,a5,800151c8 <store_guest_page_fault_8+0x11e>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80015194:	000807b7          	lui	a5,0x80
    80015198:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    8001519c:	4481                	li	s1,0

    TEST_END();
    8001519e:	00008597          	auipc	a1,0x8
    800151a2:	93258593          	add	a1,a1,-1742 # 8001cad0 <__func__.1+0x2d8>
    800151a6:	00008517          	auipc	a0,0x8
    800151aa:	9d250513          	add	a0,a0,-1582 # 8001cb78 <__func__.1+0x380>
    800151ae:	5b5050ef          	jal	8001af62 <printf>
    800151b2:	4511                	li	a0,4
    800151b4:	92beb0ef          	jal	80000ade <goto_priv>
    800151b8:	96eec0ef          	jal	80001326 <reset_state>
}
    800151bc:	60e2                	ld	ra,24(sp)
    800151be:	6442                	ld	s0,16(sp)
    800151c0:	8526                	mv	a0,s1
    800151c2:	64a2                	ld	s1,8(sp)
    800151c4:	6105                	add	sp,sp,32
    800151c6:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800151c8:	000807b7          	lui	a5,0x80
    800151cc:	1007b073          	csrc	sstatus,a5
    TEST_END();
    800151d0:	00008597          	auipc	a1,0x8
    800151d4:	8f058593          	add	a1,a1,-1808 # 8001cac0 <__func__.1+0x2c8>
    800151d8:	b7f9                	j	800151a6 <store_guest_page_fault_8+0xfc>
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    800151da:	00008597          	auipc	a1,0x8
    800151de:	8e658593          	add	a1,a1,-1818 # 8001cac0 <__func__.1+0x2c8>
    800151e2:	bf85                	j	80015152 <store_guest_page_fault_8+0xa8>

00000000800151e4 <store_guest_page_fault_9>:

bool store_guest_page_fault_9(){
    800151e4:	1101                	add	sp,sp,-32

    TEST_START();
    800151e6:	00007597          	auipc	a1,0x7
    800151ea:	02a58593          	add	a1,a1,42 # 8001c210 <__func__.12>
    800151ee:	00008517          	auipc	a0,0x8
    800151f2:	8f250513          	add	a0,a0,-1806 # 8001cae0 <__func__.1+0x2e8>
bool store_guest_page_fault_9(){
    800151f6:	ec06                	sd	ra,24(sp)
    800151f8:	e822                	sd	s0,16(sp)
    800151fa:	e426                	sd	s1,8(sp)
    TEST_START();
    800151fc:	567050ef          	jal	8001af62 <printf>
    80015200:	4529                	li	a0,10
    80015202:	433040ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80015206:	450d                	li	a0,3
    80015208:	8d7eb0ef          	jal	80000ade <goto_priv>
    hspt_init();
    8001520c:	bd4eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015210:	e16eb0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80015214:	4509                	li	a0,2
    80015216:	8c9eb0ef          	jal	80000ade <goto_priv>
    vspt_init();
    8001521a:	c9aeb0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    8001521e:	4511                	li	a0,4
    80015220:	8bfeb0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80015224:	000407b7          	lui	a5,0x40
    80015228:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    8001522c:	4509                	li	a0,2
    8001522e:	8b1eb0ef          	jal	80000ade <goto_priv>

    //执行hsvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80015232:	0ff0000f          	fence
    80015236:	4785                	li	a5,1
    80015238:	00028417          	auipc	s0,0x28
    8001523c:	dd840413          	add	s0,s0,-552 # 8003d010 <excpt>
    80015240:	00f41023          	sh	a5,0(s0)
    80015244:	00028797          	auipc	a5,0x28
    80015248:	e007b223          	sd	zero,-508(a5) # 8003d048 <excpt+0x38>
    8001524c:	0ff0000f          	fence
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80015250:	37ab77b7          	lui	a5,0x37ab7
    80015254:	00080737          	lui	a4,0x80
    80015258:	078a                	sll	a5,a5,0x2
    8001525a:	076d                	add	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    8001525c:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015260:	0736                	sll	a4,a4,0xd
    80015262:	00f73023          	sd	a5,0(a4)
    vaddr = hs_page_base(VSURWX_GUX);


    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    80015266:	08200593          	li	a1,130
    8001526a:	0000d617          	auipc	a2,0xd
    8001526e:	dbe60613          	add	a2,a2,-578 # 80022028 <__func__.1+0x5830>
    80015272:	00008517          	auipc	a0,0x8
    80015276:	88650513          	add	a0,a0,-1914 # 8001caf8 <__func__.1+0x300>
    8001527a:	4e9050ef          	jal	8001af62 <printf>
    8001527e:	00144783          	lbu	a5,1(s0)
    80015282:	00008597          	auipc	a1,0x8
    80015286:	84e58593          	add	a1,a1,-1970 # 8001cad0 <__func__.1+0x2d8>
    8001528a:	c789                	beqz	a5,80015294 <store_guest_page_fault_9+0xb0>
    8001528c:	6418                	ld	a4,8(s0)
    8001528e:	47bd                	li	a5,15
    80015290:	06f70e63          	beq	a4,a5,8001530c <store_guest_page_fault_9+0x128>
    80015294:	00008517          	auipc	a0,0x8
    80015298:	87c50513          	add	a0,a0,-1924 # 8001cb10 <__func__.1+0x318>
    8001529c:	4c7050ef          	jal	8001af62 <printf>
    800152a0:	00144783          	lbu	a5,1(s0)
    800152a4:	c789                	beqz	a5,800152ae <store_guest_page_fault_9+0xca>
    800152a6:	6418                	ld	a4,8(s0)
    800152a8:	47bd                	li	a5,15
    800152aa:	00f70c63          	beq	a4,a5,800152c2 <store_guest_page_fault_9+0xde>
    800152ae:	00008517          	auipc	a0,0x8
    800152b2:	86a50513          	add	a0,a0,-1942 # 8001cb18 <__func__.1+0x320>
    800152b6:	4ad050ef          	jal	8001af62 <printf>
    800152ba:	02900513          	li	a0,41
    800152be:	377040ef          	jal	80019e34 <putchar>
    800152c2:	4529                	li	a0,10
    800152c4:	371040ef          	jal	80019e34 <putchar>
    800152c8:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    800152cc:	00008597          	auipc	a1,0x8
    800152d0:	80458593          	add	a1,a1,-2044 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    800152d4:	c491                	beqz	s1,800152e0 <store_guest_page_fault_9+0xfc>
    800152d6:	6418                	ld	a4,8(s0)
    800152d8:	47bd                	li	a5,15
    800152da:	02f70463          	beq	a4,a5,80015302 <store_guest_page_fault_9+0x11e>
    800152de:	4481                	li	s1,0
    TEST_END();
    800152e0:	00008517          	auipc	a0,0x8
    800152e4:	89850513          	add	a0,a0,-1896 # 8001cb78 <__func__.1+0x380>
    800152e8:	47b050ef          	jal	8001af62 <printf>
    800152ec:	4511                	li	a0,4
    800152ee:	ff0eb0ef          	jal	80000ade <goto_priv>
    800152f2:	834ec0ef          	jal	80001326 <reset_state>
}
    800152f6:	60e2                	ld	ra,24(sp)
    800152f8:	6442                	ld	s0,16(sp)
    800152fa:	8526                	mv	a0,s1
    800152fc:	64a2                	ld	s1,8(sp)
    800152fe:	6105                	add	sp,sp,32
    80015300:	8082                	ret
    TEST_END();
    80015302:	00007597          	auipc	a1,0x7
    80015306:	7be58593          	add	a1,a1,1982 # 8001cac0 <__func__.1+0x2c8>
    8001530a:	bfd9                	j	800152e0 <store_guest_page_fault_9+0xfc>
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    8001530c:	00007597          	auipc	a1,0x7
    80015310:	7b458593          	add	a1,a1,1972 # 8001cac0 <__func__.1+0x2c8>
    80015314:	b741                	j	80015294 <store_guest_page_fault_9+0xb0>

0000000080015316 <store_guest_page_fault_10>:

bool store_guest_page_fault_10(){
    80015316:	1141                	add	sp,sp,-16

    TEST_START();
    80015318:	00007597          	auipc	a1,0x7
    8001531c:	f1858593          	add	a1,a1,-232 # 8001c230 <__func__.11>
    80015320:	00007517          	auipc	a0,0x7
    80015324:	7c050513          	add	a0,a0,1984 # 8001cae0 <__func__.1+0x2e8>
bool store_guest_page_fault_10(){
    80015328:	e406                	sd	ra,8(sp)
    8001532a:	e022                	sd	s0,0(sp)
    TEST_START();
    8001532c:	437050ef          	jal	8001af62 <printf>
    80015330:	4529                	li	a0,10
    80015332:	303040ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80015336:	450d                	li	a0,3
    80015338:	fa6eb0ef          	jal	80000ade <goto_priv>
    hspt_init();
    8001533c:	aa4eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015340:	ce6eb0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80015344:	4509                	li	a0,2
    80015346:	f98eb0ef          	jal	80000ade <goto_priv>
    vspt_init();
    8001534a:	b6aeb0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_M);
    8001534e:	4511                	li	a0,4
    80015350:	f8eeb0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80015354:	000407b7          	lui	a5,0x40
    80015358:	2007a073          	csrs	vsstatus,a5

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    8001535c:	4509                	li	a0,2
    8001535e:	f80eb0ef          	jal	80000ade <goto_priv>

    //执行hsvd指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80015362:	0ff0000f          	fence
    80015366:	4785                	li	a5,1
    80015368:	00028417          	auipc	s0,0x28
    8001536c:	ca840413          	add	s0,s0,-856 # 8003d010 <excpt>
    80015370:	00f41023          	sh	a5,0(s0)
    80015374:	00028797          	auipc	a5,0x28
    80015378:	cc07ba23          	sd	zero,-812(a5) # 8003d048 <excpt+0x38>
    8001537c:	0ff0000f          	fence
    80015380:	37ab77b7          	lui	a5,0x37ab7
    80015384:	00080737          	lui	a4,0x80
    80015388:	078a                	sll	a5,a5,0x2
    8001538a:	0765                	add	a4,a4,25 # 80019 <_test_table_size+0x80018>
    8001538c:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015390:	0736                	sll	a4,a4,0xd
    80015392:	00f73023          	sd	a5,0(a4)
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80015396:	08200593          	li	a1,130
    8001539a:	0000c617          	auipc	a2,0xc
    8001539e:	1f660613          	add	a2,a2,502 # 80021590 <__func__.1+0x4d98>
    800153a2:	00007517          	auipc	a0,0x7
    800153a6:	75650513          	add	a0,a0,1878 # 8001caf8 <__func__.1+0x300>
    800153aa:	3b9050ef          	jal	8001af62 <printf>
    800153ae:	00144783          	lbu	a5,1(s0)
    800153b2:	00007597          	auipc	a1,0x7
    800153b6:	70e58593          	add	a1,a1,1806 # 8001cac0 <__func__.1+0x2c8>
    800153ba:	c789                	beqz	a5,800153c4 <store_guest_page_fault_10+0xae>
    800153bc:	00007597          	auipc	a1,0x7
    800153c0:	71458593          	add	a1,a1,1812 # 8001cad0 <__func__.1+0x2d8>
    800153c4:	00007517          	auipc	a0,0x7
    800153c8:	74c50513          	add	a0,a0,1868 # 8001cb10 <__func__.1+0x318>
    800153cc:	397050ef          	jal	8001af62 <printf>
    800153d0:	00144783          	lbu	a5,1(s0)
    800153d4:	e3b1                	bnez	a5,80015418 <store_guest_page_fault_10+0x102>
    800153d6:	4529                	li	a0,10
    800153d8:	25d040ef          	jal	80019e34 <putchar>
    800153dc:	00144783          	lbu	a5,1(s0)
    800153e0:	e795                	bnez	a5,8001540c <store_guest_page_fault_10+0xf6>
    800153e2:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    800153e4:	00007597          	auipc	a1,0x7
    800153e8:	6dc58593          	add	a1,a1,1756 # 8001cac0 <__func__.1+0x2c8>
    800153ec:	00007517          	auipc	a0,0x7
    800153f0:	78c50513          	add	a0,a0,1932 # 8001cb78 <__func__.1+0x380>
    800153f4:	36f050ef          	jal	8001af62 <printf>
    800153f8:	4511                	li	a0,4
    800153fa:	ee4eb0ef          	jal	80000ade <goto_priv>
    800153fe:	f29eb0ef          	jal	80001326 <reset_state>
}
    80015402:	60a2                	ld	ra,8(sp)
    80015404:	8522                	mv	a0,s0
    80015406:	6402                	ld	s0,0(sp)
    80015408:	0141                	add	sp,sp,16
    8001540a:	8082                	ret
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    8001540c:	4401                	li	s0,0
    TEST_END();
    8001540e:	00007597          	auipc	a1,0x7
    80015412:	6c258593          	add	a1,a1,1730 # 8001cad0 <__func__.1+0x2d8>
    80015416:	bfd9                	j	800153ec <store_guest_page_fault_10+0xd6>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80015418:	00007517          	auipc	a0,0x7
    8001541c:	70050513          	add	a0,a0,1792 # 8001cb18 <__func__.1+0x320>
    80015420:	343050ef          	jal	8001af62 <printf>
    80015424:	02900513          	li	a0,41
    80015428:	20d040ef          	jal	80019e34 <putchar>
    8001542c:	b76d                	j	800153d6 <store_guest_page_fault_10+0xc0>

000000008001542e <amo_guest_page_fault_1>:

bool amo_guest_page_fault_1(){
    8001542e:	1101                	add	sp,sp,-32

    TEST_START();
    80015430:	00007597          	auipc	a1,0x7
    80015434:	e2058593          	add	a1,a1,-480 # 8001c250 <__func__.10>
    80015438:	00007517          	auipc	a0,0x7
    8001543c:	6a850513          	add	a0,a0,1704 # 8001cae0 <__func__.1+0x2e8>
bool amo_guest_page_fault_1(){
    80015440:	ec06                	sd	ra,24(sp)
    80015442:	e822                	sd	s0,16(sp)
    80015444:	e426                	sd	s1,8(sp)
    80015446:	e04a                	sd	s2,0(sp)
    TEST_START();
    80015448:	31b050ef          	jal	8001af62 <printf>
    8001544c:	4529                	li	a0,10
    8001544e:	1e7040ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80015452:	450d                	li	a0,3
    80015454:	e8aeb0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80015458:	988eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001545c:	bcaeb0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80015460:	4509                	li	a0,2
    80015462:	e7ceb0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80015466:	a4eeb0ef          	jal	800006b4 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0x1;  
    goto_priv(PRIV_VS);
    8001546a:	4509                	li	a0,2
    8001546c:	e72eb0ef          	jal	80000ade <goto_priv>


    //执行原子指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80015470:	0ff0000f          	fence
    80015474:	4785                	li	a5,1
    80015476:	00028417          	auipc	s0,0x28
    8001547a:	b9a40413          	add	s0,s0,-1126 # 8003d010 <excpt>
    8001547e:	00f41023          	sh	a5,0(s0)
    80015482:	00028797          	auipc	a5,0x28
    80015486:	bc07b323          	sd	zero,-1082(a5) # 8003d048 <excpt+0x38>
    8001548a:	0ff0000f          	fence
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    8001548e:	001007b7          	lui	a5,0x100
    80015492:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80015496:	4705                	li	a4,1
    80015498:	07b2                	sll	a5,a5,0xc
    8001549a:	00e7a72f          	amoadd.w	a4,a4,(a5)


    addr = hs_page_base(VSRWX_GI);
    value = amoadd_w(addr,value);
    
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    8001549e:	08200593          	li	a1,130
    800154a2:	0000d617          	auipc	a2,0xd
    800154a6:	bbe60613          	add	a2,a2,-1090 # 80022060 <__func__.1+0x5868>
    800154aa:	00007517          	auipc	a0,0x7
    800154ae:	64e50513          	add	a0,a0,1614 # 8001caf8 <__func__.1+0x300>
    value = amoadd_w(addr,value);
    800154b2:	02071493          	sll	s1,a4,0x20
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    800154b6:	2ad050ef          	jal	8001af62 <printf>
    800154ba:	00144783          	lbu	a5,1(s0)
    value = amoadd_w(addr,value);
    800154be:	9081                	srl	s1,s1,0x20
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    800154c0:	00007597          	auipc	a1,0x7
    800154c4:	61058593          	add	a1,a1,1552 # 8001cad0 <__func__.1+0x2d8>
    800154c8:	c789                	beqz	a5,800154d2 <amo_guest_page_fault_1+0xa4>
    800154ca:	6418                	ld	a4,8(s0)
    800154cc:	47dd                	li	a5,23
    800154ce:	12f70463          	beq	a4,a5,800155f6 <amo_guest_page_fault_1+0x1c8>
    800154d2:	00007517          	auipc	a0,0x7
    800154d6:	63e50513          	add	a0,a0,1598 # 8001cb10 <__func__.1+0x318>
    800154da:	289050ef          	jal	8001af62 <printf>
    800154de:	00144783          	lbu	a5,1(s0)
    800154e2:	c789                	beqz	a5,800154ec <amo_guest_page_fault_1+0xbe>
    800154e4:	6418                	ld	a4,8(s0)
    800154e6:	47dd                	li	a5,23
    800154e8:	00f70c63          	beq	a4,a5,80015500 <amo_guest_page_fault_1+0xd2>
    800154ec:	00007517          	auipc	a0,0x7
    800154f0:	62c50513          	add	a0,a0,1580 # 8001cb18 <__func__.1+0x320>
    800154f4:	26f050ef          	jal	8001af62 <printf>
    800154f8:	02900513          	li	a0,41
    800154fc:	139040ef          	jal	80019e34 <putchar>
    80015500:	4529                	li	a0,10
    80015502:	133040ef          	jal	80019e34 <putchar>
    80015506:	00144783          	lbu	a5,1(s0)
    8001550a:	4901                	li	s2,0
    8001550c:	c791                	beqz	a5,80015518 <amo_guest_page_fault_1+0xea>
    8001550e:	00843903          	ld	s2,8(s0)
    80015512:	1925                	add	s2,s2,-23
    80015514:	00193913          	seqz	s2,s2
        excpt.cause == CAUSE_SGPF
    );


    //执行原子相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    80015518:	0ff0000f          	fence
    8001551c:	4785                	li	a5,1
    8001551e:	00f41023          	sh	a5,0(s0)
    80015522:	00028797          	auipc	a5,0x28
    80015526:	b207b323          	sd	zero,-1242(a5) # 8003d048 <excpt+0x38>
    8001552a:	0ff0000f          	fence
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    8001552e:	001007b7          	lui	a5,0x100
    80015532:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80015536:	8726                	mv	a4,s1
    80015538:	07b2                	sll	a5,a5,0xc
    8001553a:	a0e7b72f          	amomax.d	a4,a4,(a5)
    vaddr = hs_page_base(VSRWX_GI);
    value = amomax_d(vaddr,value);

    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    8001553e:	08200593          	li	a1,130
    80015542:	0000d617          	auipc	a2,0xd
    80015546:	b6e60613          	add	a2,a2,-1170 # 800220b0 <__func__.1+0x58b8>
    8001554a:	00007517          	auipc	a0,0x7
    8001554e:	5ae50513          	add	a0,a0,1454 # 8001caf8 <__func__.1+0x300>
    80015552:	211050ef          	jal	8001af62 <printf>
    80015556:	00144783          	lbu	a5,1(s0)
    8001555a:	00007597          	auipc	a1,0x7
    8001555e:	57658593          	add	a1,a1,1398 # 8001cad0 <__func__.1+0x2d8>
    80015562:	c789                	beqz	a5,8001556c <amo_guest_page_fault_1+0x13e>
    80015564:	6418                	ld	a4,8(s0)
    80015566:	47dd                	li	a5,23
    80015568:	08f70263          	beq	a4,a5,800155ec <amo_guest_page_fault_1+0x1be>
    8001556c:	00007517          	auipc	a0,0x7
    80015570:	5a450513          	add	a0,a0,1444 # 8001cb10 <__func__.1+0x318>
    80015574:	1ef050ef          	jal	8001af62 <printf>
    80015578:	00144783          	lbu	a5,1(s0)
    8001557c:	c789                	beqz	a5,80015586 <amo_guest_page_fault_1+0x158>
    8001557e:	6418                	ld	a4,8(s0)
    80015580:	47dd                	li	a5,23
    80015582:	00f70c63          	beq	a4,a5,8001559a <amo_guest_page_fault_1+0x16c>
    80015586:	00007517          	auipc	a0,0x7
    8001558a:	59250513          	add	a0,a0,1426 # 8001cb18 <__func__.1+0x320>
    8001558e:	1d5050ef          	jal	8001af62 <printf>
    80015592:	02900513          	li	a0,41
    80015596:	09f040ef          	jal	80019e34 <putchar>
    8001559a:	4529                	li	a0,10
    8001559c:	099040ef          	jal	80019e34 <putchar>
    800155a0:	04090063          	beqz	s2,800155e0 <amo_guest_page_fault_1+0x1b2>
    800155a4:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    800155a8:	00007597          	auipc	a1,0x7
    800155ac:	52858593          	add	a1,a1,1320 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    800155b0:	c491                	beqz	s1,800155bc <amo_guest_page_fault_1+0x18e>
    800155b2:	6418                	ld	a4,8(s0)
    800155b4:	47dd                	li	a5,23
    800155b6:	04f70563          	beq	a4,a5,80015600 <amo_guest_page_fault_1+0x1d2>
    800155ba:	4481                	li	s1,0
    TEST_END();
    800155bc:	00007517          	auipc	a0,0x7
    800155c0:	5bc50513          	add	a0,a0,1468 # 8001cb78 <__func__.1+0x380>
    800155c4:	19f050ef          	jal	8001af62 <printf>
    800155c8:	4511                	li	a0,4
    800155ca:	d14eb0ef          	jal	80000ade <goto_priv>
    800155ce:	d59eb0ef          	jal	80001326 <reset_state>
}
    800155d2:	60e2                	ld	ra,24(sp)
    800155d4:	6442                	ld	s0,16(sp)
    800155d6:	6902                	ld	s2,0(sp)
    800155d8:	8526                	mv	a0,s1
    800155da:	64a2                	ld	s1,8(sp)
    800155dc:	6105                	add	sp,sp,32
    800155de:	8082                	ret
    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    800155e0:	4481                	li	s1,0
    TEST_END();
    800155e2:	00007597          	auipc	a1,0x7
    800155e6:	4ee58593          	add	a1,a1,1262 # 8001cad0 <__func__.1+0x2d8>
    800155ea:	bfc9                	j	800155bc <amo_guest_page_fault_1+0x18e>
    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    800155ec:	00007597          	auipc	a1,0x7
    800155f0:	4d458593          	add	a1,a1,1236 # 8001cac0 <__func__.1+0x2c8>
    800155f4:	bfa5                	j	8001556c <amo_guest_page_fault_1+0x13e>
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    800155f6:	00007597          	auipc	a1,0x7
    800155fa:	4ca58593          	add	a1,a1,1226 # 8001cac0 <__func__.1+0x2c8>
    800155fe:	bdd1                	j	800154d2 <amo_guest_page_fault_1+0xa4>
    TEST_END();
    80015600:	00007597          	auipc	a1,0x7
    80015604:	4c058593          	add	a1,a1,1216 # 8001cac0 <__func__.1+0x2c8>
    80015608:	bf55                	j	800155bc <amo_guest_page_fault_1+0x18e>

000000008001560a <amo_guest_page_fault_2>:

bool amo_guest_page_fault_2(){
    8001560a:	1101                	add	sp,sp,-32

    TEST_START();
    8001560c:	00007597          	auipc	a1,0x7
    80015610:	c5c58593          	add	a1,a1,-932 # 8001c268 <__func__.9>
    80015614:	00007517          	auipc	a0,0x7
    80015618:	4cc50513          	add	a0,a0,1228 # 8001cae0 <__func__.1+0x2e8>
bool amo_guest_page_fault_2(){
    8001561c:	ec06                	sd	ra,24(sp)
    8001561e:	e822                	sd	s0,16(sp)
    80015620:	e426                	sd	s1,8(sp)
    TEST_START();
    80015622:	141050ef          	jal	8001af62 <printf>
    80015626:	4529                	li	a0,10
    80015628:	00d040ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    8001562c:	450d                	li	a0,3
    8001562e:	cb0eb0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80015632:	fafea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015636:	9f0eb0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    8001563a:	4509                	li	a0,2
    8001563c:	ca2eb0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80015640:	874eb0ef          	jal	800006b4 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    80015644:	4509                	li	a0,2
    80015646:	c98eb0ef          	jal	80000ade <goto_priv>
    //执行原子相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    8001564a:	0ff0000f          	fence
    8001564e:	4785                	li	a5,1
    80015650:	00028417          	auipc	s0,0x28
    80015654:	9c040413          	add	s0,s0,-1600 # 8003d010 <excpt>
    80015658:	00f41023          	sh	a5,0(s0)
    8001565c:	00028797          	auipc	a5,0x28
    80015660:	9e07b623          	sd	zero,-1556(a5) # 8003d048 <excpt+0x38>
    80015664:	0ff0000f          	fence
    addr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80015668:	000807b7          	lui	a5,0x80
    8001566c:	1007b073          	csrc	sstatus,a5
AMO_INSTRUCTION(amoswap_d, "amoswap.d", uint64_t);
    80015670:	37ab77b7          	lui	a5,0x37ab7
    80015674:	00100737          	lui	a4,0x100
    80015678:	078a                	sll	a5,a5,0x2
    8001567a:	06570713          	add	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    8001567e:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015682:	0732                	sll	a4,a4,0xc
    80015684:	08f737af          	amoswap.d	a5,a5,(a4)
    value = amoswap_d(addr,value);
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80015688:	08200593          	li	a1,130
    8001568c:	0000d617          	auipc	a2,0xd
    80015690:	a8460613          	add	a2,a2,-1404 # 80022110 <__func__.1+0x5918>
    80015694:	00007517          	auipc	a0,0x7
    80015698:	46450513          	add	a0,a0,1124 # 8001caf8 <__func__.1+0x300>
    8001569c:	0c7050ef          	jal	8001af62 <printf>
    800156a0:	00144783          	lbu	a5,1(s0)
    800156a4:	00007597          	auipc	a1,0x7
    800156a8:	42c58593          	add	a1,a1,1068 # 8001cad0 <__func__.1+0x2d8>
    800156ac:	c789                	beqz	a5,800156b6 <amo_guest_page_fault_2+0xac>
    800156ae:	6418                	ld	a4,8(s0)
    800156b0:	47dd                	li	a5,23
    800156b2:	06f70e63          	beq	a4,a5,8001572e <amo_guest_page_fault_2+0x124>
    800156b6:	00007517          	auipc	a0,0x7
    800156ba:	45a50513          	add	a0,a0,1114 # 8001cb10 <__func__.1+0x318>
    800156be:	0a5050ef          	jal	8001af62 <printf>
    800156c2:	00144783          	lbu	a5,1(s0)
    800156c6:	c789                	beqz	a5,800156d0 <amo_guest_page_fault_2+0xc6>
    800156c8:	6418                	ld	a4,8(s0)
    800156ca:	47dd                	li	a5,23
    800156cc:	00f70c63          	beq	a4,a5,800156e4 <amo_guest_page_fault_2+0xda>
    800156d0:	00007517          	auipc	a0,0x7
    800156d4:	44850513          	add	a0,a0,1096 # 8001cb18 <__func__.1+0x320>
    800156d8:	08b050ef          	jal	8001af62 <printf>
    800156dc:	02900513          	li	a0,41
    800156e0:	754040ef          	jal	80019e34 <putchar>
    800156e4:	4529                	li	a0,10
    800156e6:	74e040ef          	jal	80019e34 <putchar>
    800156ea:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    800156ee:	00007597          	auipc	a1,0x7
    800156f2:	3e258593          	add	a1,a1,994 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    800156f6:	c491                	beqz	s1,80015702 <amo_guest_page_fault_2+0xf8>
    800156f8:	6418                	ld	a4,8(s0)
    800156fa:	47dd                	li	a5,23
    800156fc:	02f70463          	beq	a4,a5,80015724 <amo_guest_page_fault_2+0x11a>
    80015700:	4481                	li	s1,0
    TEST_END();
    80015702:	00007517          	auipc	a0,0x7
    80015706:	47650513          	add	a0,a0,1142 # 8001cb78 <__func__.1+0x380>
    8001570a:	059050ef          	jal	8001af62 <printf>
    8001570e:	4511                	li	a0,4
    80015710:	bceeb0ef          	jal	80000ade <goto_priv>
    80015714:	c13eb0ef          	jal	80001326 <reset_state>
}
    80015718:	60e2                	ld	ra,24(sp)
    8001571a:	6442                	ld	s0,16(sp)
    8001571c:	8526                	mv	a0,s1
    8001571e:	64a2                	ld	s1,8(sp)
    80015720:	6105                	add	sp,sp,32
    80015722:	8082                	ret
    TEST_END();
    80015724:	00007597          	auipc	a1,0x7
    80015728:	39c58593          	add	a1,a1,924 # 8001cac0 <__func__.1+0x2c8>
    8001572c:	bfd9                	j	80015702 <amo_guest_page_fault_2+0xf8>
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    8001572e:	00007597          	auipc	a1,0x7
    80015732:	39258593          	add	a1,a1,914 # 8001cac0 <__func__.1+0x2c8>
    80015736:	b741                	j	800156b6 <amo_guest_page_fault_2+0xac>

0000000080015738 <amo_guest_page_fault_3>:

bool amo_guest_page_fault_3(){
    80015738:	1101                	add	sp,sp,-32

    TEST_START();
    8001573a:	00007597          	auipc	a1,0x7
    8001573e:	b4658593          	add	a1,a1,-1210 # 8001c280 <__func__.8>
    80015742:	00007517          	auipc	a0,0x7
    80015746:	39e50513          	add	a0,a0,926 # 8001cae0 <__func__.1+0x2e8>
bool amo_guest_page_fault_3(){
    8001574a:	ec06                	sd	ra,24(sp)
    8001574c:	e822                	sd	s0,16(sp)
    8001574e:	e426                	sd	s1,8(sp)
    TEST_START();
    80015750:	013050ef          	jal	8001af62 <printf>
    80015754:	4529                	li	a0,10
    80015756:	6de040ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    8001575a:	450d                	li	a0,3
    8001575c:	b82eb0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80015760:	e81ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015764:	8c2eb0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80015768:	4509                	li	a0,2
    8001576a:	b74eb0ef          	jal	80000ade <goto_priv>
    vspt_init();
    8001576e:	f47ea0ef          	jal	800006b4 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    80015772:	4509                	li	a0,2
    80015774:	b6aeb0ef          	jal	80000ade <goto_priv>


    //执行原子相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80015778:	0ff0000f          	fence
    8001577c:	4785                	li	a5,1
    8001577e:	00028417          	auipc	s0,0x28
    80015782:	89240413          	add	s0,s0,-1902 # 8003d010 <excpt>
    80015786:	00f41023          	sh	a5,0(s0)
    8001578a:	00028797          	auipc	a5,0x28
    8001578e:	8a07bf23          	sd	zero,-1858(a5) # 8003d048 <excpt+0x38>
    80015792:	0ff0000f          	fence
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80015796:	000807b7          	lui	a5,0x80
    8001579a:	1007a073          	csrs	sstatus,a5
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    8001579e:	37ab77b7          	lui	a5,0x37ab7
    800157a2:	00100737          	lui	a4,0x100
    800157a6:	078a                	sll	a5,a5,0x2
    800157a8:	06570713          	add	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    800157ac:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800157b0:	0732                	sll	a4,a4,0xc
    800157b2:	40f737af          	amoor.d	a5,a5,(a4)
    value = amoor_d(vaddr,value);
    TEST_ASSERT("s mode amoor_d when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    800157b6:	08200593          	li	a1,130
    800157ba:	0000d617          	auipc	a2,0xd
    800157be:	9be60613          	add	a2,a2,-1602 # 80022178 <__func__.1+0x5980>
    800157c2:	00007517          	auipc	a0,0x7
    800157c6:	33650513          	add	a0,a0,822 # 8001caf8 <__func__.1+0x300>
    800157ca:	798050ef          	jal	8001af62 <printf>
    800157ce:	00144783          	lbu	a5,1(s0)
    800157d2:	00007597          	auipc	a1,0x7
    800157d6:	2fe58593          	add	a1,a1,766 # 8001cad0 <__func__.1+0x2d8>
    800157da:	c789                	beqz	a5,800157e4 <amo_guest_page_fault_3+0xac>
    800157dc:	6418                	ld	a4,8(s0)
    800157de:	47dd                	li	a5,23
    800157e0:	08f70663          	beq	a4,a5,8001586c <amo_guest_page_fault_3+0x134>
    800157e4:	00007517          	auipc	a0,0x7
    800157e8:	32c50513          	add	a0,a0,812 # 8001cb10 <__func__.1+0x318>
    800157ec:	776050ef          	jal	8001af62 <printf>
    800157f0:	00144783          	lbu	a5,1(s0)
    800157f4:	c789                	beqz	a5,800157fe <amo_guest_page_fault_3+0xc6>
    800157f6:	6418                	ld	a4,8(s0)
    800157f8:	47dd                	li	a5,23
    800157fa:	00f70c63          	beq	a4,a5,80015812 <amo_guest_page_fault_3+0xda>
    800157fe:	00007517          	auipc	a0,0x7
    80015802:	31a50513          	add	a0,a0,794 # 8001cb18 <__func__.1+0x320>
    80015806:	75c050ef          	jal	8001af62 <printf>
    8001580a:	02900513          	li	a0,41
    8001580e:	626040ef          	jal	80019e34 <putchar>
    80015812:	4529                	li	a0,10
    80015814:	620040ef          	jal	80019e34 <putchar>
    80015818:	00144483          	lbu	s1,1(s0)
    8001581c:	c489                	beqz	s1,80015826 <amo_guest_page_fault_3+0xee>
    8001581e:	6418                	ld	a4,8(s0)
    80015820:	47dd                	li	a5,23
    80015822:	02f70c63          	beq	a4,a5,8001585a <amo_guest_page_fault_3+0x122>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80015826:	000807b7          	lui	a5,0x80
    8001582a:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("s mode amoor_d when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    8001582e:	4481                	li	s1,0

    TEST_END();
    80015830:	00007597          	auipc	a1,0x7
    80015834:	2a058593          	add	a1,a1,672 # 8001cad0 <__func__.1+0x2d8>
    80015838:	00007517          	auipc	a0,0x7
    8001583c:	34050513          	add	a0,a0,832 # 8001cb78 <__func__.1+0x380>
    80015840:	722050ef          	jal	8001af62 <printf>
    80015844:	4511                	li	a0,4
    80015846:	a98eb0ef          	jal	80000ade <goto_priv>
    8001584a:	addeb0ef          	jal	80001326 <reset_state>
}
    8001584e:	60e2                	ld	ra,24(sp)
    80015850:	6442                	ld	s0,16(sp)
    80015852:	8526                	mv	a0,s1
    80015854:	64a2                	ld	s1,8(sp)
    80015856:	6105                	add	sp,sp,32
    80015858:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001585a:	000807b7          	lui	a5,0x80
    8001585e:	1007b073          	csrc	sstatus,a5
    TEST_END();
    80015862:	00007597          	auipc	a1,0x7
    80015866:	25e58593          	add	a1,a1,606 # 8001cac0 <__func__.1+0x2c8>
    8001586a:	b7f9                	j	80015838 <amo_guest_page_fault_3+0x100>
    TEST_ASSERT("s mode amoor_d when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    8001586c:	00007597          	auipc	a1,0x7
    80015870:	25458593          	add	a1,a1,596 # 8001cac0 <__func__.1+0x2c8>
    80015874:	bf85                	j	800157e4 <amo_guest_page_fault_3+0xac>

0000000080015876 <amo_guest_page_fault_4>:

bool amo_guest_page_fault_4(){
    80015876:	1101                	add	sp,sp,-32

    TEST_START();
    80015878:	00007597          	auipc	a1,0x7
    8001587c:	a2058593          	add	a1,a1,-1504 # 8001c298 <__func__.7>
    80015880:	00007517          	auipc	a0,0x7
    80015884:	26050513          	add	a0,a0,608 # 8001cae0 <__func__.1+0x2e8>
bool amo_guest_page_fault_4(){
    80015888:	ec06                	sd	ra,24(sp)
    8001588a:	e822                	sd	s0,16(sp)
    8001588c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001588e:	6d4050ef          	jal	8001af62 <printf>
    80015892:	4529                	li	a0,10
    80015894:	5a0040ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80015898:	450d                	li	a0,3
    8001589a:	a44eb0ef          	jal	80000ade <goto_priv>
    hspt_init();
    8001589e:	d43ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800158a2:	f85ea0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    800158a6:	4509                	li	a0,2
    800158a8:	a36eb0ef          	jal	80000ade <goto_priv>
    vspt_init();
    800158ac:	e09ea0ef          	jal	800006b4 <vspt_init>
    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  

    goto_priv(PRIV_M);
    800158b0:	4511                	li	a0,4
    800158b2:	a2ceb0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    800158b6:	000407b7          	lui	a5,0x40
    800158ba:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    800158be:	450d                	li	a0,3
    800158c0:	a1eeb0ef          	jal	80000ade <goto_priv>


    //执行原子相关指令需要二级地址翻页时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800158c4:	0ff0000f          	fence
    800158c8:	4785                	li	a5,1
    800158ca:	00027417          	auipc	s0,0x27
    800158ce:	74640413          	add	s0,s0,1862 # 8003d010 <excpt>
    800158d2:	00f41023          	sh	a5,0(s0)
    800158d6:	00027797          	auipc	a5,0x27
    800158da:	7607b923          	sd	zero,1906(a5) # 8003d048 <excpt+0x38>
    800158de:	0ff0000f          	fence
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    800158e2:	37ab77b7          	lui	a5,0x37ab7
    800158e6:	00080737          	lui	a4,0x80
    800158ea:	078a                	sll	a5,a5,0x2
    800158ec:	076d                	add	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    800158ee:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800158f2:	0736                	sll	a4,a4,0xd
    800158f4:	80f737af          	amomin.d	a5,a5,(a4)
    addr = hs_page_base(VSURWX_GUX);

    value = amomin_d(addr,value);
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    800158f8:	08200593          	li	a1,130
    800158fc:	0000d617          	auipc	a2,0xd
    80015900:	8ec60613          	add	a2,a2,-1812 # 800221e8 <__func__.1+0x59f0>
    80015904:	00007517          	auipc	a0,0x7
    80015908:	1f450513          	add	a0,a0,500 # 8001caf8 <__func__.1+0x300>
    8001590c:	656050ef          	jal	8001af62 <printf>
    80015910:	00144783          	lbu	a5,1(s0)
    80015914:	00007597          	auipc	a1,0x7
    80015918:	1bc58593          	add	a1,a1,444 # 8001cad0 <__func__.1+0x2d8>
    8001591c:	c789                	beqz	a5,80015926 <amo_guest_page_fault_4+0xb0>
    8001591e:	6418                	ld	a4,8(s0)
    80015920:	47bd                	li	a5,15
    80015922:	06f70e63          	beq	a4,a5,8001599e <amo_guest_page_fault_4+0x128>
    80015926:	00007517          	auipc	a0,0x7
    8001592a:	1ea50513          	add	a0,a0,490 # 8001cb10 <__func__.1+0x318>
    8001592e:	634050ef          	jal	8001af62 <printf>
    80015932:	00144783          	lbu	a5,1(s0)
    80015936:	c789                	beqz	a5,80015940 <amo_guest_page_fault_4+0xca>
    80015938:	6418                	ld	a4,8(s0)
    8001593a:	47bd                	li	a5,15
    8001593c:	00f70c63          	beq	a4,a5,80015954 <amo_guest_page_fault_4+0xde>
    80015940:	00007517          	auipc	a0,0x7
    80015944:	1d850513          	add	a0,a0,472 # 8001cb18 <__func__.1+0x320>
    80015948:	61a050ef          	jal	8001af62 <printf>
    8001594c:	02900513          	li	a0,41
    80015950:	4e4040ef          	jal	80019e34 <putchar>
    80015954:	4529                	li	a0,10
    80015956:	4de040ef          	jal	80019e34 <putchar>
    8001595a:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    8001595e:	00007597          	auipc	a1,0x7
    80015962:	17258593          	add	a1,a1,370 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    80015966:	c491                	beqz	s1,80015972 <amo_guest_page_fault_4+0xfc>
    80015968:	6418                	ld	a4,8(s0)
    8001596a:	47bd                	li	a5,15
    8001596c:	02f70463          	beq	a4,a5,80015994 <amo_guest_page_fault_4+0x11e>
    80015970:	4481                	li	s1,0
    TEST_END();
    80015972:	00007517          	auipc	a0,0x7
    80015976:	20650513          	add	a0,a0,518 # 8001cb78 <__func__.1+0x380>
    8001597a:	5e8050ef          	jal	8001af62 <printf>
    8001597e:	4511                	li	a0,4
    80015980:	95eeb0ef          	jal	80000ade <goto_priv>
    80015984:	9a3eb0ef          	jal	80001326 <reset_state>
}
    80015988:	60e2                	ld	ra,24(sp)
    8001598a:	6442                	ld	s0,16(sp)
    8001598c:	8526                	mv	a0,s1
    8001598e:	64a2                	ld	s1,8(sp)
    80015990:	6105                	add	sp,sp,32
    80015992:	8082                	ret
    TEST_END();
    80015994:	00007597          	auipc	a1,0x7
    80015998:	12c58593          	add	a1,a1,300 # 8001cac0 <__func__.1+0x2c8>
    8001599c:	bfd9                	j	80015972 <amo_guest_page_fault_4+0xfc>
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    8001599e:	00007597          	auipc	a1,0x7
    800159a2:	12258593          	add	a1,a1,290 # 8001cac0 <__func__.1+0x2c8>
    800159a6:	b741                	j	80015926 <amo_guest_page_fault_4+0xb0>

00000000800159a8 <amo_guest_page_fault_5>:

bool amo_guest_page_fault_5(){
    800159a8:	1141                	add	sp,sp,-16

    TEST_START();
    800159aa:	00007597          	auipc	a1,0x7
    800159ae:	90658593          	add	a1,a1,-1786 # 8001c2b0 <__func__.6>
    800159b2:	00007517          	auipc	a0,0x7
    800159b6:	12e50513          	add	a0,a0,302 # 8001cae0 <__func__.1+0x2e8>
bool amo_guest_page_fault_5(){
    800159ba:	e406                	sd	ra,8(sp)
    800159bc:	e022                	sd	s0,0(sp)
    TEST_START();
    800159be:	5a4050ef          	jal	8001af62 <printf>
    800159c2:	4529                	li	a0,10
    800159c4:	470040ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    800159c8:	450d                	li	a0,3
    800159ca:	914eb0ef          	jal	80000ade <goto_priv>
    hspt_init();
    800159ce:	c13ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800159d2:	e55ea0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    800159d6:	4509                	li	a0,2
    800159d8:	906eb0ef          	jal	80000ade <goto_priv>
    vspt_init();
    800159dc:	cd9ea0ef          	jal	800006b4 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_M);
    800159e0:	4511                	li	a0,4
    800159e2:	8fceb0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    800159e6:	000407b7          	lui	a5,0x40
    800159ea:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    800159ee:	450d                	li	a0,3
    800159f0:	8eeeb0ef          	jal	80000ade <goto_priv>

    //执行原子指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    800159f4:	0ff0000f          	fence
    800159f8:	4785                	li	a5,1
    800159fa:	00027417          	auipc	s0,0x27
    800159fe:	61640413          	add	s0,s0,1558 # 8003d010 <excpt>
    80015a02:	00f41023          	sh	a5,0(s0)
    80015a06:	00027797          	auipc	a5,0x27
    80015a0a:	6407b123          	sd	zero,1602(a5) # 8003d048 <excpt+0x38>
    80015a0e:	0ff0000f          	fence
AMO_INSTRUCTION(amominu_d, "amominu.d", uint64_t);
    80015a12:	37ab77b7          	lui	a5,0x37ab7
    80015a16:	00080737          	lui	a4,0x80
    80015a1a:	078a                	sll	a5,a5,0x2
    80015a1c:	0765                	add	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80015a1e:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015a22:	0736                	sll	a4,a4,0xd
    80015a24:	c0f737af          	amominu.d	a5,a5,(a4)
    value = amominu_d(vaddr,value);

    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    80015a28:	08200593          	li	a1,130
    80015a2c:	0000c617          	auipc	a2,0xc
    80015a30:	7fc60613          	add	a2,a2,2044 # 80022228 <__func__.1+0x5a30>
    80015a34:	00007517          	auipc	a0,0x7
    80015a38:	0c450513          	add	a0,a0,196 # 8001caf8 <__func__.1+0x300>
    80015a3c:	526050ef          	jal	8001af62 <printf>
    80015a40:	00144783          	lbu	a5,1(s0)
    80015a44:	00007597          	auipc	a1,0x7
    80015a48:	07c58593          	add	a1,a1,124 # 8001cac0 <__func__.1+0x2c8>
    80015a4c:	c789                	beqz	a5,80015a56 <amo_guest_page_fault_5+0xae>
    80015a4e:	00007597          	auipc	a1,0x7
    80015a52:	08258593          	add	a1,a1,130 # 8001cad0 <__func__.1+0x2d8>
    80015a56:	00007517          	auipc	a0,0x7
    80015a5a:	0ba50513          	add	a0,a0,186 # 8001cb10 <__func__.1+0x318>
    80015a5e:	504050ef          	jal	8001af62 <printf>
    80015a62:	00144783          	lbu	a5,1(s0)
    80015a66:	e3b1                	bnez	a5,80015aaa <amo_guest_page_fault_5+0x102>
    80015a68:	4529                	li	a0,10
    80015a6a:	3ca040ef          	jal	80019e34 <putchar>
    80015a6e:	00144783          	lbu	a5,1(s0)
    80015a72:	e795                	bnez	a5,80015a9e <amo_guest_page_fault_5+0xf6>
    80015a74:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80015a76:	00007597          	auipc	a1,0x7
    80015a7a:	04a58593          	add	a1,a1,74 # 8001cac0 <__func__.1+0x2c8>
    80015a7e:	00007517          	auipc	a0,0x7
    80015a82:	0fa50513          	add	a0,a0,250 # 8001cb78 <__func__.1+0x380>
    80015a86:	4dc050ef          	jal	8001af62 <printf>
    80015a8a:	4511                	li	a0,4
    80015a8c:	852eb0ef          	jal	80000ade <goto_priv>
    80015a90:	897eb0ef          	jal	80001326 <reset_state>
}
    80015a94:	60a2                	ld	ra,8(sp)
    80015a96:	8522                	mv	a0,s0
    80015a98:	6402                	ld	s0,0(sp)
    80015a9a:	0141                	add	sp,sp,16
    80015a9c:	8082                	ret
    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    80015a9e:	4401                	li	s0,0
    TEST_END();
    80015aa0:	00007597          	auipc	a1,0x7
    80015aa4:	03058593          	add	a1,a1,48 # 8001cad0 <__func__.1+0x2d8>
    80015aa8:	bfd9                	j	80015a7e <amo_guest_page_fault_5+0xd6>
    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    80015aaa:	00007517          	auipc	a0,0x7
    80015aae:	06e50513          	add	a0,a0,110 # 8001cb18 <__func__.1+0x320>
    80015ab2:	4b0050ef          	jal	8001af62 <printf>
    80015ab6:	02900513          	li	a0,41
    80015aba:	37a040ef          	jal	80019e34 <putchar>
    80015abe:	b76d                	j	80015a68 <amo_guest_page_fault_5+0xc0>

0000000080015ac0 <instruction_guest_page_fault_1>:


bool instruction_guest_page_fault_1(){
    80015ac0:	1101                	add	sp,sp,-32

    TEST_START();
    80015ac2:	00007597          	auipc	a1,0x7
    80015ac6:	80658593          	add	a1,a1,-2042 # 8001c2c8 <__func__.5>
    80015aca:	00007517          	auipc	a0,0x7
    80015ace:	01650513          	add	a0,a0,22 # 8001cae0 <__func__.1+0x2e8>
bool instruction_guest_page_fault_1(){
    80015ad2:	ec06                	sd	ra,24(sp)
    80015ad4:	e822                	sd	s0,16(sp)
    80015ad6:	e426                	sd	s1,8(sp)
    TEST_START();
    80015ad8:	48a050ef          	jal	8001af62 <printf>
    80015adc:	4529                	li	a0,10
    80015ade:	356040ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80015ae2:	450d                	li	a0,3
    80015ae4:	ffbea0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80015ae8:	af9ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015aec:	d3bea0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80015af0:	4509                	li	a0,2
    80015af2:	fedea0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80015af6:	bbfea0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80015afa:	4509                	li	a0,2
    80015afc:	fe3ea0ef          	jal	80000ade <goto_priv>

    //执行取指指令二级地址翻译阶段时，pte.v=0
    vaddr = hs_page_base(VSRWX_GI);
    TEST_SETUP_EXCEPT();
    80015b00:	0ff0000f          	fence
    80015b04:	4785                	li	a5,1
    80015b06:	00027417          	auipc	s0,0x27
    80015b0a:	50a40413          	add	s0,s0,1290 # 8003d010 <excpt>
    80015b0e:	00f41023          	sh	a5,0(s0)
    80015b12:	00027797          	auipc	a5,0x27
    80015b16:	5207bb23          	sd	zero,1334(a5) # 8003d048 <excpt+0x38>
    80015b1a:	0ff0000f          	fence
    TEST_EXEC_EXCEPT(vaddr); 
    80015b1e:	001007b7          	lui	a5,0x100
    80015b22:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80015b26:	07b2                	sll	a5,a5,0xc
    80015b28:	00000297          	auipc	t0,0x0
    80015b2c:	00c28293          	add	t0,t0,12 # 80015b34 <instruction_guest_page_fault_1+0x74>
    80015b30:	02543c23          	sd	t0,56(s0)
    80015b34:	8782                	jr	a5


    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    80015b36:	08200593          	li	a1,130
    80015b3a:	0000c617          	auipc	a2,0xc
    80015b3e:	72e60613          	add	a2,a2,1838 # 80022268 <__func__.1+0x5a70>
    80015b42:	00007517          	auipc	a0,0x7
    80015b46:	fb650513          	add	a0,a0,-74 # 8001caf8 <__func__.1+0x300>
    80015b4a:	418050ef          	jal	8001af62 <printf>
    80015b4e:	00144783          	lbu	a5,1(s0)
    80015b52:	00007597          	auipc	a1,0x7
    80015b56:	f7e58593          	add	a1,a1,-130 # 8001cad0 <__func__.1+0x2d8>
    80015b5a:	c789                	beqz	a5,80015b64 <instruction_guest_page_fault_1+0xa4>
    80015b5c:	6418                	ld	a4,8(s0)
    80015b5e:	47d1                	li	a5,20
    80015b60:	06f70e63          	beq	a4,a5,80015bdc <instruction_guest_page_fault_1+0x11c>
    80015b64:	00007517          	auipc	a0,0x7
    80015b68:	fac50513          	add	a0,a0,-84 # 8001cb10 <__func__.1+0x318>
    80015b6c:	3f6050ef          	jal	8001af62 <printf>
    80015b70:	00144783          	lbu	a5,1(s0)
    80015b74:	c789                	beqz	a5,80015b7e <instruction_guest_page_fault_1+0xbe>
    80015b76:	6418                	ld	a4,8(s0)
    80015b78:	47d1                	li	a5,20
    80015b7a:	00f70c63          	beq	a4,a5,80015b92 <instruction_guest_page_fault_1+0xd2>
    80015b7e:	00007517          	auipc	a0,0x7
    80015b82:	f9a50513          	add	a0,a0,-102 # 8001cb18 <__func__.1+0x320>
    80015b86:	3dc050ef          	jal	8001af62 <printf>
    80015b8a:	02900513          	li	a0,41
    80015b8e:	2a6040ef          	jal	80019e34 <putchar>
    80015b92:	4529                	li	a0,10
    80015b94:	2a0040ef          	jal	80019e34 <putchar>
    80015b98:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    80015b9c:	00007597          	auipc	a1,0x7
    80015ba0:	f3458593          	add	a1,a1,-204 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    80015ba4:	c491                	beqz	s1,80015bb0 <instruction_guest_page_fault_1+0xf0>
    80015ba6:	6418                	ld	a4,8(s0)
    80015ba8:	47d1                	li	a5,20
    80015baa:	02f70463          	beq	a4,a5,80015bd2 <instruction_guest_page_fault_1+0x112>
    80015bae:	4481                	li	s1,0
    TEST_END();
    80015bb0:	00007517          	auipc	a0,0x7
    80015bb4:	fc850513          	add	a0,a0,-56 # 8001cb78 <__func__.1+0x380>
    80015bb8:	3aa050ef          	jal	8001af62 <printf>
    80015bbc:	4511                	li	a0,4
    80015bbe:	f21ea0ef          	jal	80000ade <goto_priv>
    80015bc2:	f64eb0ef          	jal	80001326 <reset_state>

}
    80015bc6:	60e2                	ld	ra,24(sp)
    80015bc8:	6442                	ld	s0,16(sp)
    80015bca:	8526                	mv	a0,s1
    80015bcc:	64a2                	ld	s1,8(sp)
    80015bce:	6105                	add	sp,sp,32
    80015bd0:	8082                	ret
    TEST_END();
    80015bd2:	00007597          	auipc	a1,0x7
    80015bd6:	eee58593          	add	a1,a1,-274 # 8001cac0 <__func__.1+0x2c8>
    80015bda:	bfd9                	j	80015bb0 <instruction_guest_page_fault_1+0xf0>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    80015bdc:	00007597          	auipc	a1,0x7
    80015be0:	ee458593          	add	a1,a1,-284 # 8001cac0 <__func__.1+0x2c8>
    80015be4:	b741                	j	80015b64 <instruction_guest_page_fault_1+0xa4>

0000000080015be6 <instruction_guest_page_fault_2>:


bool instruction_guest_page_fault_2(){
    80015be6:	1101                	add	sp,sp,-32

    TEST_START();
    80015be8:	00006597          	auipc	a1,0x6
    80015bec:	70058593          	add	a1,a1,1792 # 8001c2e8 <__func__.4>
    80015bf0:	00007517          	auipc	a0,0x7
    80015bf4:	ef050513          	add	a0,a0,-272 # 8001cae0 <__func__.1+0x2e8>
bool instruction_guest_page_fault_2(){
    80015bf8:	ec06                	sd	ra,24(sp)
    80015bfa:	e822                	sd	s0,16(sp)
    80015bfc:	e426                	sd	s1,8(sp)
    TEST_START();
    80015bfe:	364050ef          	jal	8001af62 <printf>
    80015c02:	4529                	li	a0,10
    80015c04:	230040ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80015c08:	450d                	li	a0,3
    80015c0a:	ed5ea0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80015c0e:	9d3ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015c12:	c15ea0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80015c16:	4509                	li	a0,2
    80015c18:	ec7ea0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80015c1c:	a99ea0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80015c20:	4509                	li	a0,2
    80015c22:	ebdea0ef          	jal	80000ade <goto_priv>


    //执行取指指令二级地址翻译阶段时，pte.x=0
    vaddr = vs_page_base(VSRWX_GRW);
    TEST_SETUP_EXCEPT();
    80015c26:	0ff0000f          	fence
    80015c2a:	4785                	li	a5,1
    80015c2c:	00027417          	auipc	s0,0x27
    80015c30:	3e440413          	add	s0,s0,996 # 8003d010 <excpt>
    80015c34:	00f41023          	sh	a5,0(s0)
    80015c38:	00027797          	auipc	a5,0x27
    80015c3c:	4007b823          	sd	zero,1040(a5) # 8003d048 <excpt+0x38>
    80015c40:	0ff0000f          	fence
    TEST_EXEC_EXCEPT(vaddr); 
    80015c44:	400137b7          	lui	a5,0x40013
    80015c48:	078a                	sll	a5,a5,0x2
    80015c4a:	00000297          	auipc	t0,0x0
    80015c4e:	00c28293          	add	t0,t0,12 # 80015c56 <instruction_guest_page_fault_2+0x70>
    80015c52:	02543c23          	sd	t0,56(s0)
    80015c56:	8782                	jr	a5

    // jalr_direct();

    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80015c58:	08200593          	li	a1,130
    80015c5c:	0000c617          	auipc	a2,0xc
    80015c60:	66c60613          	add	a2,a2,1644 # 800222c8 <__func__.1+0x5ad0>
    80015c64:	00007517          	auipc	a0,0x7
    80015c68:	e9450513          	add	a0,a0,-364 # 8001caf8 <__func__.1+0x300>
    80015c6c:	2f6050ef          	jal	8001af62 <printf>
    80015c70:	00144783          	lbu	a5,1(s0)
    80015c74:	00007597          	auipc	a1,0x7
    80015c78:	e5c58593          	add	a1,a1,-420 # 8001cad0 <__func__.1+0x2d8>
    80015c7c:	c789                	beqz	a5,80015c86 <instruction_guest_page_fault_2+0xa0>
    80015c7e:	6418                	ld	a4,8(s0)
    80015c80:	47d1                	li	a5,20
    80015c82:	06f70e63          	beq	a4,a5,80015cfe <instruction_guest_page_fault_2+0x118>
    80015c86:	00007517          	auipc	a0,0x7
    80015c8a:	e8a50513          	add	a0,a0,-374 # 8001cb10 <__func__.1+0x318>
    80015c8e:	2d4050ef          	jal	8001af62 <printf>
    80015c92:	00144783          	lbu	a5,1(s0)
    80015c96:	c789                	beqz	a5,80015ca0 <instruction_guest_page_fault_2+0xba>
    80015c98:	6418                	ld	a4,8(s0)
    80015c9a:	47d1                	li	a5,20
    80015c9c:	00f70c63          	beq	a4,a5,80015cb4 <instruction_guest_page_fault_2+0xce>
    80015ca0:	00007517          	auipc	a0,0x7
    80015ca4:	e7850513          	add	a0,a0,-392 # 8001cb18 <__func__.1+0x320>
    80015ca8:	2ba050ef          	jal	8001af62 <printf>
    80015cac:	02900513          	li	a0,41
    80015cb0:	184040ef          	jal	80019e34 <putchar>
    80015cb4:	4529                	li	a0,10
    80015cb6:	17e040ef          	jal	80019e34 <putchar>
    80015cba:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    80015cbe:	00007597          	auipc	a1,0x7
    80015cc2:	e1258593          	add	a1,a1,-494 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80015cc6:	c491                	beqz	s1,80015cd2 <instruction_guest_page_fault_2+0xec>
    80015cc8:	6418                	ld	a4,8(s0)
    80015cca:	47d1                	li	a5,20
    80015ccc:	02f70463          	beq	a4,a5,80015cf4 <instruction_guest_page_fault_2+0x10e>
    80015cd0:	4481                	li	s1,0
    TEST_END();
    80015cd2:	00007517          	auipc	a0,0x7
    80015cd6:	ea650513          	add	a0,a0,-346 # 8001cb78 <__func__.1+0x380>
    80015cda:	288050ef          	jal	8001af62 <printf>
    80015cde:	4511                	li	a0,4
    80015ce0:	dffea0ef          	jal	80000ade <goto_priv>
    80015ce4:	e42eb0ef          	jal	80001326 <reset_state>
}
    80015ce8:	60e2                	ld	ra,24(sp)
    80015cea:	6442                	ld	s0,16(sp)
    80015cec:	8526                	mv	a0,s1
    80015cee:	64a2                	ld	s1,8(sp)
    80015cf0:	6105                	add	sp,sp,32
    80015cf2:	8082                	ret
    TEST_END();
    80015cf4:	00007597          	auipc	a1,0x7
    80015cf8:	dcc58593          	add	a1,a1,-564 # 8001cac0 <__func__.1+0x2c8>
    80015cfc:	bfd9                	j	80015cd2 <instruction_guest_page_fault_2+0xec>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80015cfe:	00007597          	auipc	a1,0x7
    80015d02:	dc258593          	add	a1,a1,-574 # 8001cac0 <__func__.1+0x2c8>
    80015d06:	b741                	j	80015c86 <instruction_guest_page_fault_2+0xa0>

0000000080015d08 <instruction_guest_page_fault_3>:

bool instruction_guest_page_fault_3(){
    80015d08:	1101                	add	sp,sp,-32

    TEST_START();
    80015d0a:	00006597          	auipc	a1,0x6
    80015d0e:	5fe58593          	add	a1,a1,1534 # 8001c308 <__func__.3>
    80015d12:	00007517          	auipc	a0,0x7
    80015d16:	dce50513          	add	a0,a0,-562 # 8001cae0 <__func__.1+0x2e8>
bool instruction_guest_page_fault_3(){
    80015d1a:	ec06                	sd	ra,24(sp)
    80015d1c:	e822                	sd	s0,16(sp)
    80015d1e:	e426                	sd	s1,8(sp)
    TEST_START();
    80015d20:	242050ef          	jal	8001af62 <printf>
    80015d24:	4529                	li	a0,10
    80015d26:	10e040ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80015d2a:	450d                	li	a0,3
    80015d2c:	db3ea0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80015d30:	8b1ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015d34:	af3ea0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80015d38:	4509                	li	a0,2
    80015d3a:	da5ea0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80015d3e:	977ea0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80015d42:	4509                	li	a0,2
    80015d44:	d9bea0ef          	jal	80000ade <goto_priv>

    //执行取指指令时，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80015d48:	0ff0000f          	fence
    80015d4c:	4785                	li	a5,1
    80015d4e:	00027417          	auipc	s0,0x27
    80015d52:	2c240413          	add	s0,s0,706 # 8003d010 <excpt>
    80015d56:	00f41023          	sh	a5,0(s0)
    80015d5a:	00027797          	auipc	a5,0x27
    80015d5e:	2e07b723          	sd	zero,750(a5) # 8003d048 <excpt+0x38>
    80015d62:	0ff0000f          	fence
    vaddr = hs_page_base(VSURWX_GURWX);


    TEST_EXEC_EXCEPT(vaddr); 
    80015d66:	000807b7          	lui	a5,0x80
    80015d6a:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80015d6c:	07b6                	sll	a5,a5,0xd
    80015d6e:	00000297          	auipc	t0,0x0
    80015d72:	00c28293          	add	t0,t0,12 # 80015d7a <instruction_guest_page_fault_3+0x72>
    80015d76:	02543c23          	sd	t0,56(s0)
    80015d7a:	8782                	jr	a5
    TEST_ASSERT("vs mode fetche fetche instruction of u mode leads to IPF",
    80015d7c:	08200593          	li	a1,130
    80015d80:	0000c617          	auipc	a2,0xc
    80015d84:	5a860613          	add	a2,a2,1448 # 80022328 <__func__.1+0x5b30>
    80015d88:	00007517          	auipc	a0,0x7
    80015d8c:	d7050513          	add	a0,a0,-656 # 8001caf8 <__func__.1+0x300>
    80015d90:	1d2050ef          	jal	8001af62 <printf>
    80015d94:	00144783          	lbu	a5,1(s0)
    80015d98:	00007597          	auipc	a1,0x7
    80015d9c:	d3858593          	add	a1,a1,-712 # 8001cad0 <__func__.1+0x2d8>
    80015da0:	c789                	beqz	a5,80015daa <instruction_guest_page_fault_3+0xa2>
    80015da2:	6418                	ld	a4,8(s0)
    80015da4:	47b1                	li	a5,12
    80015da6:	06f70e63          	beq	a4,a5,80015e22 <instruction_guest_page_fault_3+0x11a>
    80015daa:	00007517          	auipc	a0,0x7
    80015dae:	d6650513          	add	a0,a0,-666 # 8001cb10 <__func__.1+0x318>
    80015db2:	1b0050ef          	jal	8001af62 <printf>
    80015db6:	00144783          	lbu	a5,1(s0)
    80015dba:	c789                	beqz	a5,80015dc4 <instruction_guest_page_fault_3+0xbc>
    80015dbc:	6418                	ld	a4,8(s0)
    80015dbe:	47b1                	li	a5,12
    80015dc0:	00f70c63          	beq	a4,a5,80015dd8 <instruction_guest_page_fault_3+0xd0>
    80015dc4:	00007517          	auipc	a0,0x7
    80015dc8:	d5450513          	add	a0,a0,-684 # 8001cb18 <__func__.1+0x320>
    80015dcc:	196050ef          	jal	8001af62 <printf>
    80015dd0:	02900513          	li	a0,41
    80015dd4:	060040ef          	jal	80019e34 <putchar>
    80015dd8:	4529                	li	a0,10
    80015dda:	05a040ef          	jal	80019e34 <putchar>
    80015dde:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80015de2:	00007597          	auipc	a1,0x7
    80015de6:	cee58593          	add	a1,a1,-786 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode fetche fetche instruction of u mode leads to IPF",
    80015dea:	c491                	beqz	s1,80015df6 <instruction_guest_page_fault_3+0xee>
    80015dec:	6418                	ld	a4,8(s0)
    80015dee:	47b1                	li	a5,12
    80015df0:	02f70463          	beq	a4,a5,80015e18 <instruction_guest_page_fault_3+0x110>
    80015df4:	4481                	li	s1,0
    TEST_END();
    80015df6:	00007517          	auipc	a0,0x7
    80015dfa:	d8250513          	add	a0,a0,-638 # 8001cb78 <__func__.1+0x380>
    80015dfe:	164050ef          	jal	8001af62 <printf>
    80015e02:	4511                	li	a0,4
    80015e04:	cdbea0ef          	jal	80000ade <goto_priv>
    80015e08:	d1eeb0ef          	jal	80001326 <reset_state>
}
    80015e0c:	60e2                	ld	ra,24(sp)
    80015e0e:	6442                	ld	s0,16(sp)
    80015e10:	8526                	mv	a0,s1
    80015e12:	64a2                	ld	s1,8(sp)
    80015e14:	6105                	add	sp,sp,32
    80015e16:	8082                	ret
    TEST_END();
    80015e18:	00007597          	auipc	a1,0x7
    80015e1c:	ca858593          	add	a1,a1,-856 # 8001cac0 <__func__.1+0x2c8>
    80015e20:	bfd9                	j	80015df6 <instruction_guest_page_fault_3+0xee>
    TEST_ASSERT("vs mode fetche fetche instruction of u mode leads to IPF",
    80015e22:	00007597          	auipc	a1,0x7
    80015e26:	c9e58593          	add	a1,a1,-866 # 8001cac0 <__func__.1+0x2c8>
    80015e2a:	b741                	j	80015daa <instruction_guest_page_fault_3+0xa2>

0000000080015e2c <instruction_guest_page_fault_4>:


bool instruction_guest_page_fault_4(){
    80015e2c:	1101                	add	sp,sp,-32

    TEST_START();
    80015e2e:	00006597          	auipc	a1,0x6
    80015e32:	4fa58593          	add	a1,a1,1274 # 8001c328 <__func__.2>
    80015e36:	00007517          	auipc	a0,0x7
    80015e3a:	caa50513          	add	a0,a0,-854 # 8001cae0 <__func__.1+0x2e8>
bool instruction_guest_page_fault_4(){
    80015e3e:	ec06                	sd	ra,24(sp)
    80015e40:	e822                	sd	s0,16(sp)
    80015e42:	e426                	sd	s1,8(sp)
    TEST_START();
    80015e44:	11e050ef          	jal	8001af62 <printf>
    80015e48:	4529                	li	a0,10
    80015e4a:	7eb030ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80015e4e:	450d                	li	a0,3
    80015e50:	c8fea0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80015e54:	f8cea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015e58:	9cfea0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80015e5c:	4509                	li	a0,2
    80015e5e:	c81ea0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80015e62:	853ea0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_M);
    80015e66:	4511                	li	a0,4
    80015e68:	c77ea0ef          	jal	80000ade <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80015e6c:	28005073          	csrw	vsatp,0
    goto_priv(PRIV_VS);
    80015e70:	4509                	li	a0,2
    80015e72:	c6dea0ef          	jal	80000ade <goto_priv>


    //特权模式在VS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，G阶段地址翻译一级页表项没有执行权限的页面中执行，pte.x=0
    addr = vs_page_base(VSURWX_GRW);
    TEST_SETUP_EXCEPT();
    80015e76:	0ff0000f          	fence
    80015e7a:	4785                	li	a5,1
    80015e7c:	00027417          	auipc	s0,0x27
    80015e80:	19440413          	add	s0,s0,404 # 8003d010 <excpt>
    80015e84:	00f41023          	sh	a5,0(s0)
    80015e88:	00027797          	auipc	a5,0x27
    80015e8c:	1c07b023          	sd	zero,448(a5) # 8003d048 <excpt+0x38>
    80015e90:	0ff0000f          	fence
    TEST_EXEC_EXCEPT(addr); 
    80015e94:	000807b7          	lui	a5,0x80
    80015e98:	07b5                	add	a5,a5,13 # 8000d <_test_table_size+0x8000c>
    80015e9a:	07b6                	sll	a5,a5,0xd
    80015e9c:	00000297          	auipc	t0,0x0
    80015ea0:	00c28293          	add	t0,t0,12 # 80015ea8 <instruction_guest_page_fault_4+0x7c>
    80015ea4:	02543c23          	sd	t0,56(s0)
    80015ea8:	8782                	jr	a5

    printf("%d\n",excpt.cause);
    80015eaa:	640c                	ld	a1,8(s0)
    80015eac:	00007517          	auipc	a0,0x7
    80015eb0:	5f450513          	add	a0,a0,1524 # 8001d4a0 <__func__.1+0xca8>
    80015eb4:	0ae050ef          	jal	8001af62 <printf>
    printf("%d\n",excpt.triggered);
    80015eb8:	00144583          	lbu	a1,1(s0)
    80015ebc:	00007517          	auipc	a0,0x7
    80015ec0:	5e450513          	add	a0,a0,1508 # 8001d4a0 <__func__.1+0xca8>
    80015ec4:	09e050ef          	jal	8001af62 <printf>

    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    80015ec8:	08200593          	li	a1,130
    80015ecc:	0000c617          	auipc	a2,0xc
    80015ed0:	49c60613          	add	a2,a2,1180 # 80022368 <__func__.1+0x5b70>
    80015ed4:	00007517          	auipc	a0,0x7
    80015ed8:	c2450513          	add	a0,a0,-988 # 8001caf8 <__func__.1+0x300>
    80015edc:	086050ef          	jal	8001af62 <printf>
    80015ee0:	00144783          	lbu	a5,1(s0)
    80015ee4:	00007597          	auipc	a1,0x7
    80015ee8:	bec58593          	add	a1,a1,-1044 # 8001cad0 <__func__.1+0x2d8>
    80015eec:	c789                	beqz	a5,80015ef6 <instruction_guest_page_fault_4+0xca>
    80015eee:	6418                	ld	a4,8(s0)
    80015ef0:	47d1                	li	a5,20
    80015ef2:	06f70e63          	beq	a4,a5,80015f6e <instruction_guest_page_fault_4+0x142>
    80015ef6:	00007517          	auipc	a0,0x7
    80015efa:	c1a50513          	add	a0,a0,-998 # 8001cb10 <__func__.1+0x318>
    80015efe:	064050ef          	jal	8001af62 <printf>
    80015f02:	00144783          	lbu	a5,1(s0)
    80015f06:	c789                	beqz	a5,80015f10 <instruction_guest_page_fault_4+0xe4>
    80015f08:	6418                	ld	a4,8(s0)
    80015f0a:	47d1                	li	a5,20
    80015f0c:	00f70c63          	beq	a4,a5,80015f24 <instruction_guest_page_fault_4+0xf8>
    80015f10:	00007517          	auipc	a0,0x7
    80015f14:	c0850513          	add	a0,a0,-1016 # 8001cb18 <__func__.1+0x320>
    80015f18:	04a050ef          	jal	8001af62 <printf>
    80015f1c:	02900513          	li	a0,41
    80015f20:	715030ef          	jal	80019e34 <putchar>
    80015f24:	4529                	li	a0,10
    80015f26:	70f030ef          	jal	80019e34 <putchar>
    80015f2a:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    80015f2e:	00007597          	auipc	a1,0x7
    80015f32:	ba258593          	add	a1,a1,-1118 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    80015f36:	c491                	beqz	s1,80015f42 <instruction_guest_page_fault_4+0x116>
    80015f38:	6418                	ld	a4,8(s0)
    80015f3a:	47d1                	li	a5,20
    80015f3c:	02f70463          	beq	a4,a5,80015f64 <instruction_guest_page_fault_4+0x138>
    80015f40:	4481                	li	s1,0
    TEST_END();
    80015f42:	00007517          	auipc	a0,0x7
    80015f46:	c3650513          	add	a0,a0,-970 # 8001cb78 <__func__.1+0x380>
    80015f4a:	018050ef          	jal	8001af62 <printf>
    80015f4e:	4511                	li	a0,4
    80015f50:	b8fea0ef          	jal	80000ade <goto_priv>
    80015f54:	bd2eb0ef          	jal	80001326 <reset_state>
}
    80015f58:	60e2                	ld	ra,24(sp)
    80015f5a:	6442                	ld	s0,16(sp)
    80015f5c:	8526                	mv	a0,s1
    80015f5e:	64a2                	ld	s1,8(sp)
    80015f60:	6105                	add	sp,sp,32
    80015f62:	8082                	ret
    TEST_END();
    80015f64:	00007597          	auipc	a1,0x7
    80015f68:	b5c58593          	add	a1,a1,-1188 # 8001cac0 <__func__.1+0x2c8>
    80015f6c:	bfd9                	j	80015f42 <instruction_guest_page_fault_4+0x116>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    80015f6e:	00007597          	auipc	a1,0x7
    80015f72:	b5258593          	add	a1,a1,-1198 # 8001cac0 <__func__.1+0x2c8>
    80015f76:	b741                	j	80015ef6 <instruction_guest_page_fault_4+0xca>

0000000080015f78 <instruction_guest_page_fault_5>:


bool instruction_guest_page_fault_5(){
    80015f78:	1101                	add	sp,sp,-32

    TEST_START();
    80015f7a:	00006597          	auipc	a1,0x6
    80015f7e:	3ce58593          	add	a1,a1,974 # 8001c348 <__func__.1>
    80015f82:	00007517          	auipc	a0,0x7
    80015f86:	b5e50513          	add	a0,a0,-1186 # 8001cae0 <__func__.1+0x2e8>
bool instruction_guest_page_fault_5(){
    80015f8a:	ec06                	sd	ra,24(sp)
    80015f8c:	e822                	sd	s0,16(sp)
    80015f8e:	e426                	sd	s1,8(sp)
    TEST_START();
    80015f90:	7d3040ef          	jal	8001af62 <printf>
    80015f94:	4529                	li	a0,10
    80015f96:	69f030ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80015f9a:	450d                	li	a0,3
    80015f9c:	b43ea0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80015fa0:	e40ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015fa4:	883ea0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80015fa8:	4509                	li	a0,2
    80015faa:	b35ea0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80015fae:	f06ea0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;
    goto_priv(PRIV_M);
    80015fb2:	4511                	li	a0,4
    80015fb4:	b2bea0ef          	jal	80000ade <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80015fb8:	28005073          	csrw	vsatp,0

    goto_priv(PRIV_VS);
    80015fbc:	4509                	li	a0,2
    80015fbe:	b21ea0ef          	jal	80000ade <goto_priv>

    //特权模式在VS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，G阶段地址翻译一级页表项无效，pte.v=0
    vaddr = hs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    80015fc2:	0ff0000f          	fence
    80015fc6:	4785                	li	a5,1
    80015fc8:	00027417          	auipc	s0,0x27
    80015fcc:	04840413          	add	s0,s0,72 # 8003d010 <excpt>
    80015fd0:	00f41023          	sh	a5,0(s0)
    80015fd4:	00027797          	auipc	a5,0x27
    80015fd8:	0607ba23          	sd	zero,116(a5) # 8003d048 <excpt+0x38>
    80015fdc:	0ff0000f          	fence
    TEST_EXEC_EXCEPT(vaddr); 
    80015fe0:	400197b7          	lui	a5,0x40019
    80015fe4:	078a                	sll	a5,a5,0x2
    80015fe6:	00000297          	auipc	t0,0x0
    80015fea:	00c28293          	add	t0,t0,12 # 80015ff2 <instruction_guest_page_fault_5+0x7a>
    80015fee:	02543c23          	sd	t0,56(s0)
    80015ff2:	8782                	jr	a5


    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    80015ff4:	08200593          	li	a1,130
    80015ff8:	0000c617          	auipc	a2,0xc
    80015ffc:	3d060613          	add	a2,a2,976 # 800223c8 <__func__.1+0x5bd0>
    80016000:	00007517          	auipc	a0,0x7
    80016004:	af850513          	add	a0,a0,-1288 # 8001caf8 <__func__.1+0x300>
    80016008:	75b040ef          	jal	8001af62 <printf>
    8001600c:	00144783          	lbu	a5,1(s0)
    80016010:	00007597          	auipc	a1,0x7
    80016014:	ac058593          	add	a1,a1,-1344 # 8001cad0 <__func__.1+0x2d8>
    80016018:	c789                	beqz	a5,80016022 <instruction_guest_page_fault_5+0xaa>
    8001601a:	6418                	ld	a4,8(s0)
    8001601c:	47d1                	li	a5,20
    8001601e:	06f70e63          	beq	a4,a5,8001609a <instruction_guest_page_fault_5+0x122>
    80016022:	00007517          	auipc	a0,0x7
    80016026:	aee50513          	add	a0,a0,-1298 # 8001cb10 <__func__.1+0x318>
    8001602a:	739040ef          	jal	8001af62 <printf>
    8001602e:	00144783          	lbu	a5,1(s0)
    80016032:	c789                	beqz	a5,8001603c <instruction_guest_page_fault_5+0xc4>
    80016034:	6418                	ld	a4,8(s0)
    80016036:	47d1                	li	a5,20
    80016038:	00f70c63          	beq	a4,a5,80016050 <instruction_guest_page_fault_5+0xd8>
    8001603c:	00007517          	auipc	a0,0x7
    80016040:	adc50513          	add	a0,a0,-1316 # 8001cb18 <__func__.1+0x320>
    80016044:	71f040ef          	jal	8001af62 <printf>
    80016048:	02900513          	li	a0,41
    8001604c:	5e9030ef          	jal	80019e34 <putchar>
    80016050:	4529                	li	a0,10
    80016052:	5e3030ef          	jal	80019e34 <putchar>
    80016056:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    8001605a:	00007597          	auipc	a1,0x7
    8001605e:	a7658593          	add	a1,a1,-1418 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    80016062:	c491                	beqz	s1,8001606e <instruction_guest_page_fault_5+0xf6>
    80016064:	6418                	ld	a4,8(s0)
    80016066:	47d1                	li	a5,20
    80016068:	02f70463          	beq	a4,a5,80016090 <instruction_guest_page_fault_5+0x118>
    8001606c:	4481                	li	s1,0
    TEST_END();
    8001606e:	00007517          	auipc	a0,0x7
    80016072:	b0a50513          	add	a0,a0,-1270 # 8001cb78 <__func__.1+0x380>
    80016076:	6ed040ef          	jal	8001af62 <printf>
    8001607a:	4511                	li	a0,4
    8001607c:	a63ea0ef          	jal	80000ade <goto_priv>
    80016080:	aa6eb0ef          	jal	80001326 <reset_state>

}
    80016084:	60e2                	ld	ra,24(sp)
    80016086:	6442                	ld	s0,16(sp)
    80016088:	8526                	mv	a0,s1
    8001608a:	64a2                	ld	s1,8(sp)
    8001608c:	6105                	add	sp,sp,32
    8001608e:	8082                	ret
    TEST_END();
    80016090:	00007597          	auipc	a1,0x7
    80016094:	a3058593          	add	a1,a1,-1488 # 8001cac0 <__func__.1+0x2c8>
    80016098:	bfd9                	j	8001606e <instruction_guest_page_fault_5+0xf6>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    8001609a:	00007597          	auipc	a1,0x7
    8001609e:	a2658593          	add	a1,a1,-1498 # 8001cac0 <__func__.1+0x2c8>
    800160a2:	b741                	j	80016022 <instruction_guest_page_fault_5+0xaa>

00000000800160a4 <instruction_guest_page_fault_6>:


bool instruction_guest_page_fault_6(){
    800160a4:	1101                	add	sp,sp,-32

    TEST_START();
    800160a6:	00006597          	auipc	a1,0x6
    800160aa:	2c258593          	add	a1,a1,706 # 8001c368 <__func__.0>
    800160ae:	00007517          	auipc	a0,0x7
    800160b2:	a3250513          	add	a0,a0,-1486 # 8001cae0 <__func__.1+0x2e8>
bool instruction_guest_page_fault_6(){
    800160b6:	ec06                	sd	ra,24(sp)
    800160b8:	e822                	sd	s0,16(sp)
    800160ba:	e426                	sd	s1,8(sp)
    TEST_START();
    800160bc:	6a7040ef          	jal	8001af62 <printf>
    800160c0:	4529                	li	a0,10
    800160c2:	573030ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    800160c6:	450d                	li	a0,3
    800160c8:	a17ea0ef          	jal	80000ade <goto_priv>
    hspt_init();
    800160cc:	d14ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800160d0:	f56ea0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    800160d4:	4509                	li	a0,2
    800160d6:	a09ea0ef          	jal	80000ade <goto_priv>
    vspt_init();
    800160da:	ddaea0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    800160de:	4509                	li	a0,2
    800160e0:	9ffea0ef          	jal	80000ade <goto_priv>

    //执行取指指令时，在VS模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800160e4:	0ff0000f          	fence
    800160e8:	4785                	li	a5,1
    800160ea:	00027417          	auipc	s0,0x27
    800160ee:	f2640413          	add	s0,s0,-218 # 8003d010 <excpt>
    800160f2:	00f41023          	sh	a5,0(s0)
    800160f6:	00027797          	auipc	a5,0x27
    800160fa:	f407b923          	sd	zero,-174(a5) # 8003d048 <excpt+0x38>
    800160fe:	0ff0000f          	fence
    vaddr = hs_page_base(VSURWX_GURWX);


    TEST_EXEC_EXCEPT(vaddr); 
    80016102:	000807b7          	lui	a5,0x80
    80016106:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80016108:	07b6                	sll	a5,a5,0xd
    8001610a:	00000297          	auipc	t0,0x0
    8001610e:	00c28293          	add	t0,t0,12 # 80016116 <instruction_guest_page_fault_6+0x72>
    80016112:	02543c23          	sd	t0,56(s0)
    80016116:	8782                	jr	a5
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    80016118:	08200593          	li	a1,130
    8001611c:	0000b617          	auipc	a2,0xb
    80016120:	f7c60613          	add	a2,a2,-132 # 80021098 <__func__.1+0x48a0>
    80016124:	00007517          	auipc	a0,0x7
    80016128:	9d450513          	add	a0,a0,-1580 # 8001caf8 <__func__.1+0x300>
    8001612c:	637040ef          	jal	8001af62 <printf>
    80016130:	00144783          	lbu	a5,1(s0)
    80016134:	00007597          	auipc	a1,0x7
    80016138:	99c58593          	add	a1,a1,-1636 # 8001cad0 <__func__.1+0x2d8>
    8001613c:	c789                	beqz	a5,80016146 <instruction_guest_page_fault_6+0xa2>
    8001613e:	6418                	ld	a4,8(s0)
    80016140:	47b1                	li	a5,12
    80016142:	06f70e63          	beq	a4,a5,800161be <instruction_guest_page_fault_6+0x11a>
    80016146:	00007517          	auipc	a0,0x7
    8001614a:	9ca50513          	add	a0,a0,-1590 # 8001cb10 <__func__.1+0x318>
    8001614e:	615040ef          	jal	8001af62 <printf>
    80016152:	00144783          	lbu	a5,1(s0)
    80016156:	c789                	beqz	a5,80016160 <instruction_guest_page_fault_6+0xbc>
    80016158:	6418                	ld	a4,8(s0)
    8001615a:	47b1                	li	a5,12
    8001615c:	00f70c63          	beq	a4,a5,80016174 <instruction_guest_page_fault_6+0xd0>
    80016160:	00007517          	auipc	a0,0x7
    80016164:	9b850513          	add	a0,a0,-1608 # 8001cb18 <__func__.1+0x320>
    80016168:	5fb040ef          	jal	8001af62 <printf>
    8001616c:	02900513          	li	a0,41
    80016170:	4c5030ef          	jal	80019e34 <putchar>
    80016174:	4529                	li	a0,10
    80016176:	4bf030ef          	jal	80019e34 <putchar>
    8001617a:	00144483          	lbu	s1,1(s0)
        excpt.cause == CAUSE_IPF
    );



    TEST_END();
    8001617e:	00007597          	auipc	a1,0x7
    80016182:	95258593          	add	a1,a1,-1710 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    80016186:	c491                	beqz	s1,80016192 <instruction_guest_page_fault_6+0xee>
    80016188:	6418                	ld	a4,8(s0)
    8001618a:	47b1                	li	a5,12
    8001618c:	02f70463          	beq	a4,a5,800161b4 <instruction_guest_page_fault_6+0x110>
    80016190:	4481                	li	s1,0
    TEST_END();
    80016192:	00007517          	auipc	a0,0x7
    80016196:	9e650513          	add	a0,a0,-1562 # 8001cb78 <__func__.1+0x380>
    8001619a:	5c9040ef          	jal	8001af62 <printf>
    8001619e:	4511                	li	a0,4
    800161a0:	93fea0ef          	jal	80000ade <goto_priv>
    800161a4:	982eb0ef          	jal	80001326 <reset_state>
    800161a8:	60e2                	ld	ra,24(sp)
    800161aa:	6442                	ld	s0,16(sp)
    800161ac:	8526                	mv	a0,s1
    800161ae:	64a2                	ld	s1,8(sp)
    800161b0:	6105                	add	sp,sp,32
    800161b2:	8082                	ret
    TEST_END();
    800161b4:	00007597          	auipc	a1,0x7
    800161b8:	90c58593          	add	a1,a1,-1780 # 8001cac0 <__func__.1+0x2c8>
    800161bc:	bfd9                	j	80016192 <instruction_guest_page_fault_6+0xee>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    800161be:	00007597          	auipc	a1,0x7
    800161c2:	90258593          	add	a1,a1,-1790 # 8001cac0 <__func__.1+0x2c8>
    800161c6:	b741                	j	80016146 <instruction_guest_page_fault_6+0xa2>

00000000800161c8 <load_access_fault_1>:
#include <page_tables.h>




bool load_access_fault_1(){
    800161c8:	1101                	add	sp,sp,-32

    TEST_START();
    800161ca:	00006597          	auipc	a1,0x6
    800161ce:	1be58593          	add	a1,a1,446 # 8001c388 <__func__.39>
    800161d2:	00007517          	auipc	a0,0x7
    800161d6:	90e50513          	add	a0,a0,-1778 # 8001cae0 <__func__.1+0x2e8>
bool load_access_fault_1(){
    800161da:	ec06                	sd	ra,24(sp)
    800161dc:	e822                	sd	s0,16(sp)
    800161de:	e426                	sd	s1,8(sp)
    TEST_START();
    800161e0:	583040ef          	jal	8001af62 <printf>
    800161e4:	4529                	li	a0,10
    800161e6:	44f030ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    800161ea:	4511                	li	a0,4
    800161ec:	8f3ea0ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    800161f0:	3a005073          	csrw	pmpcfg0,0
    
    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    800161f4:	10000793          	li	a5,256
    800161f8:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    800161fc:	20000793          	li	a5,512
    80016200:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80016204:	40000793          	li	a5,1024
    80016208:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001620c:	6705                	lui	a4,0x1
    8001620e:	80070713          	add	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
    80016212:	3a072073          	csrs	pmpcfg0,a4

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80016216:	4685                	li	a3,1
    80016218:	01f69713          	sll	a4,a3,0x1f
    8001621c:	3b071073          	csrw	pmpaddr0,a4
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80016220:	08100713          	li	a4,129
    80016224:	0762                	sll	a4,a4,0x18
    80016226:	3b171073          	csrw	pmpaddr1,a4

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001622a:	6721                	lui	a4,0x8
    8001622c:	3a072073          	csrs	pmpcfg0,a4

    TEST_SETUP_EXCEPT();
    80016230:	0ff0000f          	fence
    80016234:	00027417          	auipc	s0,0x27
    80016238:	ddc40413          	add	s0,s0,-548 # 8003d010 <excpt>
    8001623c:	00d41023          	sh	a3,0(s0)
    80016240:	00027717          	auipc	a4,0x27
    80016244:	e0073423          	sd	zero,-504(a4) # 8003d048 <excpt+0x38>
    80016248:	0ff0000f          	fence
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8001624c:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100 << 2);

    printf("%d\n",excpt.triggered);
    80016250:	00144583          	lbu	a1,1(s0)
    80016254:	00007517          	auipc	a0,0x7
    80016258:	24c50513          	add	a0,a0,588 # 8001d4a0 <__func__.1+0xca8>
    8001625c:	507040ef          	jal	8001af62 <printf>
    printf("%d\n",excpt.cause);
    80016260:	640c                	ld	a1,8(s0)
    80016262:	00007517          	auipc	a0,0x7
    80016266:	23e50513          	add	a0,a0,574 # 8001d4a0 <__func__.1+0xca8>
    8001626a:	4f9040ef          	jal	8001af62 <printf>

    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001626e:	08200593          	li	a1,130
    80016272:	0000c617          	auipc	a2,0xc
    80016276:	1be60613          	add	a2,a2,446 # 80022430 <__func__.1+0x5c38>
    8001627a:	00007517          	auipc	a0,0x7
    8001627e:	87e50513          	add	a0,a0,-1922 # 8001caf8 <__func__.1+0x300>
    80016282:	4e1040ef          	jal	8001af62 <printf>
    80016286:	00144783          	lbu	a5,1(s0)
    8001628a:	00007597          	auipc	a1,0x7
    8001628e:	84658593          	add	a1,a1,-1978 # 8001cad0 <__func__.1+0x2d8>
    80016292:	c789                	beqz	a5,8001629c <load_access_fault_1+0xd4>
    80016294:	6418                	ld	a4,8(s0)
    80016296:	4795                	li	a5,5
    80016298:	06f70e63          	beq	a4,a5,80016314 <load_access_fault_1+0x14c>
    8001629c:	00007517          	auipc	a0,0x7
    800162a0:	87450513          	add	a0,a0,-1932 # 8001cb10 <__func__.1+0x318>
    800162a4:	4bf040ef          	jal	8001af62 <printf>
    800162a8:	00144783          	lbu	a5,1(s0)
    800162ac:	c789                	beqz	a5,800162b6 <load_access_fault_1+0xee>
    800162ae:	6418                	ld	a4,8(s0)
    800162b0:	4795                	li	a5,5
    800162b2:	00f70c63          	beq	a4,a5,800162ca <load_access_fault_1+0x102>
    800162b6:	00007517          	auipc	a0,0x7
    800162ba:	86250513          	add	a0,a0,-1950 # 8001cb18 <__func__.1+0x320>
    800162be:	4a5040ef          	jal	8001af62 <printf>
    800162c2:	02900513          	li	a0,41
    800162c6:	36f030ef          	jal	80019e34 <putchar>
    800162ca:	4529                	li	a0,10
    800162cc:	369030ef          	jal	80019e34 <putchar>
    800162d0:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    800162d4:	00006597          	auipc	a1,0x6
    800162d8:	7fc58593          	add	a1,a1,2044 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    800162dc:	c491                	beqz	s1,800162e8 <load_access_fault_1+0x120>
    800162de:	6418                	ld	a4,8(s0)
    800162e0:	4795                	li	a5,5
    800162e2:	02f70463          	beq	a4,a5,8001630a <load_access_fault_1+0x142>
    800162e6:	4481                	li	s1,0
    TEST_END();
    800162e8:	00007517          	auipc	a0,0x7
    800162ec:	89050513          	add	a0,a0,-1904 # 8001cb78 <__func__.1+0x380>
    800162f0:	473040ef          	jal	8001af62 <printf>
    800162f4:	4511                	li	a0,4
    800162f6:	fe8ea0ef          	jal	80000ade <goto_priv>
    800162fa:	82ceb0ef          	jal	80001326 <reset_state>
}
    800162fe:	60e2                	ld	ra,24(sp)
    80016300:	6442                	ld	s0,16(sp)
    80016302:	8526                	mv	a0,s1
    80016304:	64a2                	ld	s1,8(sp)
    80016306:	6105                	add	sp,sp,32
    80016308:	8082                	ret
    TEST_END();
    8001630a:	00006597          	auipc	a1,0x6
    8001630e:	7b658593          	add	a1,a1,1974 # 8001cac0 <__func__.1+0x2c8>
    80016312:	bfd9                	j	800162e8 <load_access_fault_1+0x120>
    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    80016314:	00006597          	auipc	a1,0x6
    80016318:	7ac58593          	add	a1,a1,1964 # 8001cac0 <__func__.1+0x2c8>
    8001631c:	b741                	j	8001629c <load_access_fault_1+0xd4>

000000008001631e <load_access_fault_2>:

bool load_access_fault_2(){
    8001631e:	1101                	add	sp,sp,-32

    TEST_START();
    80016320:	00006597          	auipc	a1,0x6
    80016324:	08058593          	add	a1,a1,128 # 8001c3a0 <__func__.38>
    80016328:	00006517          	auipc	a0,0x6
    8001632c:	7b850513          	add	a0,a0,1976 # 8001cae0 <__func__.1+0x2e8>
bool load_access_fault_2(){
    80016330:	ec06                	sd	ra,24(sp)
    80016332:	e822                	sd	s0,16(sp)
    80016334:	e426                	sd	s1,8(sp)
    80016336:	e04a                	sd	s2,0(sp)
    TEST_START();
    80016338:	42b040ef          	jal	8001af62 <printf>
    8001633c:	4529                	li	a0,10
    8001633e:	2f7030ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    80016342:	4511                	li	a0,4
    80016344:	f9aea0ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80016348:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001634c:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80016350:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80016354:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80016358:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001635c:	08000793          	li	a5,128
    80016360:	3a07a073          	csrs	pmpcfg0,a5


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80016364:	10000793          	li	a5,256
    80016368:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001636c:	20000793          	li	a5,512
    80016370:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80016374:	40000493          	li	s1,1024
    80016378:	3a04a073          	csrs	pmpcfg0,s1
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001637c:	6785                	lui	a5,0x1
    8001637e:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80016382:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80016386:	67a1                	lui	a5,0x8
    80016388:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001638c:	4905                	li	s2,1
    8001638e:	01f91793          	sll	a5,s2,0x1f
    80016392:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80016396:	08100793          	li	a5,129
    8001639a:	07e2                	sll	a5,a5,0x18
    8001639c:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HS);
    800163a0:	450d                	li	a0,3
    800163a2:	f3cea0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    800163a6:	0ff0000f          	fence
    800163aa:	00027417          	auipc	s0,0x27
    800163ae:	c6640413          	add	s0,s0,-922 # 8003d010 <excpt>
    800163b2:	01241023          	sh	s2,0(s0)
    800163b6:	00027797          	auipc	a5,0x27
    800163ba:	c807b923          	sd	zero,-878(a5) # 8003d048 <excpt+0x38>
    800163be:	0ff0000f          	fence
    800163c2:	00048483          	lb	s1,0(s1)
    
    lb(0x80000100 << 2);

    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    800163c6:	08200593          	li	a1,130
    800163ca:	0000c617          	auipc	a2,0xc
    800163ce:	09e60613          	add	a2,a2,158 # 80022468 <__func__.1+0x5c70>
    800163d2:	00006517          	auipc	a0,0x6
    800163d6:	72650513          	add	a0,a0,1830 # 8001caf8 <__func__.1+0x300>
    800163da:	389040ef          	jal	8001af62 <printf>
    800163de:	00144783          	lbu	a5,1(s0)
    800163e2:	00006597          	auipc	a1,0x6
    800163e6:	6ee58593          	add	a1,a1,1774 # 8001cad0 <__func__.1+0x2d8>
    800163ea:	c789                	beqz	a5,800163f4 <load_access_fault_2+0xd6>
    800163ec:	6418                	ld	a4,8(s0)
    800163ee:	4795                	li	a5,5
    800163f0:	06f70f63          	beq	a4,a5,8001646e <load_access_fault_2+0x150>
    800163f4:	00006517          	auipc	a0,0x6
    800163f8:	71c50513          	add	a0,a0,1820 # 8001cb10 <__func__.1+0x318>
    800163fc:	367040ef          	jal	8001af62 <printf>
    80016400:	00144783          	lbu	a5,1(s0)
    80016404:	c789                	beqz	a5,8001640e <load_access_fault_2+0xf0>
    80016406:	6418                	ld	a4,8(s0)
    80016408:	4795                	li	a5,5
    8001640a:	00f70c63          	beq	a4,a5,80016422 <load_access_fault_2+0x104>
    8001640e:	00006517          	auipc	a0,0x6
    80016412:	70a50513          	add	a0,a0,1802 # 8001cb18 <__func__.1+0x320>
    80016416:	34d040ef          	jal	8001af62 <printf>
    8001641a:	02900513          	li	a0,41
    8001641e:	217030ef          	jal	80019e34 <putchar>
    80016422:	4529                	li	a0,10
    80016424:	211030ef          	jal	80019e34 <putchar>
    80016428:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001642c:	00006597          	auipc	a1,0x6
    80016430:	6a458593          	add	a1,a1,1700 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    80016434:	c491                	beqz	s1,80016440 <load_access_fault_2+0x122>
    80016436:	6418                	ld	a4,8(s0)
    80016438:	4795                	li	a5,5
    8001643a:	02f70563          	beq	a4,a5,80016464 <load_access_fault_2+0x146>
    8001643e:	4481                	li	s1,0
    TEST_END();
    80016440:	00006517          	auipc	a0,0x6
    80016444:	73850513          	add	a0,a0,1848 # 8001cb78 <__func__.1+0x380>
    80016448:	31b040ef          	jal	8001af62 <printf>
    8001644c:	4511                	li	a0,4
    8001644e:	e90ea0ef          	jal	80000ade <goto_priv>
    80016452:	ed5ea0ef          	jal	80001326 <reset_state>
}
    80016456:	60e2                	ld	ra,24(sp)
    80016458:	6442                	ld	s0,16(sp)
    8001645a:	6902                	ld	s2,0(sp)
    8001645c:	8526                	mv	a0,s1
    8001645e:	64a2                	ld	s1,8(sp)
    80016460:	6105                	add	sp,sp,32
    80016462:	8082                	ret
    TEST_END();
    80016464:	00006597          	auipc	a1,0x6
    80016468:	65c58593          	add	a1,a1,1628 # 8001cac0 <__func__.1+0x2c8>
    8001646c:	bfd1                	j	80016440 <load_access_fault_2+0x122>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001646e:	00006597          	auipc	a1,0x6
    80016472:	65258593          	add	a1,a1,1618 # 8001cac0 <__func__.1+0x2c8>
    80016476:	bfbd                	j	800163f4 <load_access_fault_2+0xd6>

0000000080016478 <load_access_fault_3>:


bool load_access_fault_3(){
    80016478:	1101                	add	sp,sp,-32

    TEST_START();
    8001647a:	00006597          	auipc	a1,0x6
    8001647e:	f3e58593          	add	a1,a1,-194 # 8001c3b8 <__func__.37>
    80016482:	00006517          	auipc	a0,0x6
    80016486:	65e50513          	add	a0,a0,1630 # 8001cae0 <__func__.1+0x2e8>
bool load_access_fault_3(){
    8001648a:	ec06                	sd	ra,24(sp)
    8001648c:	e822                	sd	s0,16(sp)
    8001648e:	e426                	sd	s1,8(sp)
    80016490:	e04a                	sd	s2,0(sp)
    TEST_START();
    80016492:	2d1040ef          	jal	8001af62 <printf>
    80016496:	4529                	li	a0,10
    80016498:	19d030ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    8001649c:	4511                	li	a0,4
    8001649e:	e40ea0ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    800164a2:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    800164a6:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    800164aa:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    800164ae:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    800164b2:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    800164b6:	08000793          	li	a5,128
    800164ba:	3a07a073          	csrs	pmpcfg0,a5


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    800164be:	10000793          	li	a5,256
    800164c2:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    800164c6:	20000793          	li	a5,512
    800164ca:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    800164ce:	40000493          	li	s1,1024
    800164d2:	3a04a073          	csrs	pmpcfg0,s1
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    800164d6:	6785                	lui	a5,0x1
    800164d8:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800164dc:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    800164e0:	67a1                	lui	a5,0x8
    800164e2:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    800164e6:	4905                	li	s2,1
    800164e8:	01f91793          	sll	a5,s2,0x1f
    800164ec:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    800164f0:	08100793          	li	a5,129
    800164f4:	07e2                	sll	a5,a5,0x18
    800164f6:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HU);
    800164fa:	4505                	li	a0,1
    800164fc:	de2ea0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80016500:	0ff0000f          	fence
    80016504:	00027417          	auipc	s0,0x27
    80016508:	b0c40413          	add	s0,s0,-1268 # 8003d010 <excpt>
    8001650c:	01241023          	sh	s2,0(s0)
    80016510:	00027797          	auipc	a5,0x27
    80016514:	b207bc23          	sd	zero,-1224(a5) # 8003d048 <excpt+0x38>
    80016518:	0ff0000f          	fence
    8001651c:	00048483          	lb	s1,0(s1)
    
    lb(0x80000100 << 2);

    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    80016520:	08200593          	li	a1,130
    80016524:	0000c617          	auipc	a2,0xc
    80016528:	f7c60613          	add	a2,a2,-132 # 800224a0 <__func__.1+0x5ca8>
    8001652c:	00006517          	auipc	a0,0x6
    80016530:	5cc50513          	add	a0,a0,1484 # 8001caf8 <__func__.1+0x300>
    80016534:	22f040ef          	jal	8001af62 <printf>
    80016538:	00144783          	lbu	a5,1(s0)
    8001653c:	00006597          	auipc	a1,0x6
    80016540:	59458593          	add	a1,a1,1428 # 8001cad0 <__func__.1+0x2d8>
    80016544:	c789                	beqz	a5,8001654e <load_access_fault_3+0xd6>
    80016546:	6418                	ld	a4,8(s0)
    80016548:	4795                	li	a5,5
    8001654a:	06f70f63          	beq	a4,a5,800165c8 <load_access_fault_3+0x150>
    8001654e:	00006517          	auipc	a0,0x6
    80016552:	5c250513          	add	a0,a0,1474 # 8001cb10 <__func__.1+0x318>
    80016556:	20d040ef          	jal	8001af62 <printf>
    8001655a:	00144783          	lbu	a5,1(s0)
    8001655e:	c789                	beqz	a5,80016568 <load_access_fault_3+0xf0>
    80016560:	6418                	ld	a4,8(s0)
    80016562:	4795                	li	a5,5
    80016564:	00f70c63          	beq	a4,a5,8001657c <load_access_fault_3+0x104>
    80016568:	00006517          	auipc	a0,0x6
    8001656c:	5b050513          	add	a0,a0,1456 # 8001cb18 <__func__.1+0x320>
    80016570:	1f3040ef          	jal	8001af62 <printf>
    80016574:	02900513          	li	a0,41
    80016578:	0bd030ef          	jal	80019e34 <putchar>
    8001657c:	4529                	li	a0,10
    8001657e:	0b7030ef          	jal	80019e34 <putchar>
    80016582:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    80016586:	00006597          	auipc	a1,0x6
    8001658a:	54a58593          	add	a1,a1,1354 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001658e:	c491                	beqz	s1,8001659a <load_access_fault_3+0x122>
    80016590:	6418                	ld	a4,8(s0)
    80016592:	4795                	li	a5,5
    80016594:	02f70563          	beq	a4,a5,800165be <load_access_fault_3+0x146>
    80016598:	4481                	li	s1,0
    TEST_END();
    8001659a:	00006517          	auipc	a0,0x6
    8001659e:	5de50513          	add	a0,a0,1502 # 8001cb78 <__func__.1+0x380>
    800165a2:	1c1040ef          	jal	8001af62 <printf>
    800165a6:	4511                	li	a0,4
    800165a8:	d36ea0ef          	jal	80000ade <goto_priv>
    800165ac:	d7bea0ef          	jal	80001326 <reset_state>
}
    800165b0:	60e2                	ld	ra,24(sp)
    800165b2:	6442                	ld	s0,16(sp)
    800165b4:	6902                	ld	s2,0(sp)
    800165b6:	8526                	mv	a0,s1
    800165b8:	64a2                	ld	s1,8(sp)
    800165ba:	6105                	add	sp,sp,32
    800165bc:	8082                	ret
    TEST_END();
    800165be:	00006597          	auipc	a1,0x6
    800165c2:	50258593          	add	a1,a1,1282 # 8001cac0 <__func__.1+0x2c8>
    800165c6:	bfd1                	j	8001659a <load_access_fault_3+0x122>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    800165c8:	00006597          	auipc	a1,0x6
    800165cc:	4f858593          	add	a1,a1,1272 # 8001cac0 <__func__.1+0x2c8>
    800165d0:	bfbd                	j	8001654e <load_access_fault_3+0xd6>

00000000800165d2 <load_access_fault_4>:

bool load_access_fault_4(){
    800165d2:	1101                	add	sp,sp,-32

    TEST_START();
    800165d4:	00006597          	auipc	a1,0x6
    800165d8:	dfc58593          	add	a1,a1,-516 # 8001c3d0 <__func__.36>
    800165dc:	00006517          	auipc	a0,0x6
    800165e0:	50450513          	add	a0,a0,1284 # 8001cae0 <__func__.1+0x2e8>
bool load_access_fault_4(){
    800165e4:	ec06                	sd	ra,24(sp)
    800165e6:	e822                	sd	s0,16(sp)
    800165e8:	e426                	sd	s1,8(sp)
    800165ea:	e04a                	sd	s2,0(sp)
    TEST_START();
    800165ec:	177040ef          	jal	8001af62 <printf>
    800165f0:	4529                	li	a0,10
    800165f2:	043030ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    800165f6:	4511                	li	a0,4
    800165f8:	ce6ea0ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    800165fc:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80016600:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80016604:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80016608:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001660c:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80016610:	08000793          	li	a5,128
    80016614:	3a07a073          	csrs	pmpcfg0,a5


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80016618:	10000793          	li	a5,256
    8001661c:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80016620:	20000793          	li	a5,512
    80016624:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80016628:	40000493          	li	s1,1024
    8001662c:	3a04a073          	csrs	pmpcfg0,s1
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80016630:	6785                	lui	a5,0x1
    80016632:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80016636:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001663a:	67a1                	lui	a5,0x8
    8001663c:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80016640:	4905                	li	s2,1
    80016642:	01f91793          	sll	a5,s2,0x1f
    80016646:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001664a:	08100793          	li	a5,129
    8001664e:	07e2                	sll	a5,a5,0x18
    80016650:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_VU);
    80016654:	4501                	li	a0,0
    80016656:	c88ea0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001665a:	0ff0000f          	fence
    8001665e:	00027417          	auipc	s0,0x27
    80016662:	9b240413          	add	s0,s0,-1614 # 8003d010 <excpt>
    80016666:	01241023          	sh	s2,0(s0)
    8001666a:	00027797          	auipc	a5,0x27
    8001666e:	9c07bf23          	sd	zero,-1570(a5) # 8003d048 <excpt+0x38>
    80016672:	0ff0000f          	fence
    80016676:	00048483          	lb	s1,0(s1)
    
    lb(0x80000100 << 2);

    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001667a:	08200593          	li	a1,130
    8001667e:	0000c617          	auipc	a2,0xc
    80016682:	e5a60613          	add	a2,a2,-422 # 800224d8 <__func__.1+0x5ce0>
    80016686:	00006517          	auipc	a0,0x6
    8001668a:	47250513          	add	a0,a0,1138 # 8001caf8 <__func__.1+0x300>
    8001668e:	0d5040ef          	jal	8001af62 <printf>
    80016692:	00144783          	lbu	a5,1(s0)
    80016696:	00006597          	auipc	a1,0x6
    8001669a:	43a58593          	add	a1,a1,1082 # 8001cad0 <__func__.1+0x2d8>
    8001669e:	c789                	beqz	a5,800166a8 <load_access_fault_4+0xd6>
    800166a0:	6418                	ld	a4,8(s0)
    800166a2:	4795                	li	a5,5
    800166a4:	06f70f63          	beq	a4,a5,80016722 <load_access_fault_4+0x150>
    800166a8:	00006517          	auipc	a0,0x6
    800166ac:	46850513          	add	a0,a0,1128 # 8001cb10 <__func__.1+0x318>
    800166b0:	0b3040ef          	jal	8001af62 <printf>
    800166b4:	00144783          	lbu	a5,1(s0)
    800166b8:	c789                	beqz	a5,800166c2 <load_access_fault_4+0xf0>
    800166ba:	6418                	ld	a4,8(s0)
    800166bc:	4795                	li	a5,5
    800166be:	00f70c63          	beq	a4,a5,800166d6 <load_access_fault_4+0x104>
    800166c2:	00006517          	auipc	a0,0x6
    800166c6:	45650513          	add	a0,a0,1110 # 8001cb18 <__func__.1+0x320>
    800166ca:	099040ef          	jal	8001af62 <printf>
    800166ce:	02900513          	li	a0,41
    800166d2:	762030ef          	jal	80019e34 <putchar>
    800166d6:	4529                	li	a0,10
    800166d8:	75c030ef          	jal	80019e34 <putchar>
    800166dc:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    800166e0:	00006597          	auipc	a1,0x6
    800166e4:	3f058593          	add	a1,a1,1008 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    800166e8:	c491                	beqz	s1,800166f4 <load_access_fault_4+0x122>
    800166ea:	6418                	ld	a4,8(s0)
    800166ec:	4795                	li	a5,5
    800166ee:	02f70563          	beq	a4,a5,80016718 <load_access_fault_4+0x146>
    800166f2:	4481                	li	s1,0
    TEST_END();
    800166f4:	00006517          	auipc	a0,0x6
    800166f8:	48450513          	add	a0,a0,1156 # 8001cb78 <__func__.1+0x380>
    800166fc:	067040ef          	jal	8001af62 <printf>
    80016700:	4511                	li	a0,4
    80016702:	bdcea0ef          	jal	80000ade <goto_priv>
    80016706:	c21ea0ef          	jal	80001326 <reset_state>
}
    8001670a:	60e2                	ld	ra,24(sp)
    8001670c:	6442                	ld	s0,16(sp)
    8001670e:	6902                	ld	s2,0(sp)
    80016710:	8526                	mv	a0,s1
    80016712:	64a2                	ld	s1,8(sp)
    80016714:	6105                	add	sp,sp,32
    80016716:	8082                	ret
    TEST_END();
    80016718:	00006597          	auipc	a1,0x6
    8001671c:	3a858593          	add	a1,a1,936 # 8001cac0 <__func__.1+0x2c8>
    80016720:	bfd1                	j	800166f4 <load_access_fault_4+0x122>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    80016722:	00006597          	auipc	a1,0x6
    80016726:	39e58593          	add	a1,a1,926 # 8001cac0 <__func__.1+0x2c8>
    8001672a:	bfbd                	j	800166a8 <load_access_fault_4+0xd6>

000000008001672c <load_access_fault_5>:

bool load_access_fault_5(){
    8001672c:	1141                	add	sp,sp,-16

    TEST_START();
    8001672e:	00006597          	auipc	a1,0x6
    80016732:	cba58593          	add	a1,a1,-838 # 8001c3e8 <__func__.35>
    80016736:	00006517          	auipc	a0,0x6
    8001673a:	3aa50513          	add	a0,a0,938 # 8001cae0 <__func__.1+0x2e8>
bool load_access_fault_5(){
    8001673e:	e406                	sd	ra,8(sp)
    80016740:	e022                	sd	s0,0(sp)
    TEST_START();
    80016742:	021040ef          	jal	8001af62 <printf>
    80016746:	4529                	li	a0,10
    80016748:	6ec030ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    8001674c:	4511                	li	a0,4
    8001674e:	b90ea0ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80016752:	3a005073          	csrw	pmpcfg0,0
    
    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80016756:	10000793          	li	a5,256
    8001675a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001675e:	20000793          	li	a5,512
    80016762:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80016766:	40000793          	li	a5,1024
    8001676a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001676e:	6705                	lui	a4,0x1
    80016770:	80070713          	add	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
    80016774:	3a072073          	csrs	pmpcfg0,a4

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80016778:	4685                	li	a3,1
    8001677a:	01f69713          	sll	a4,a3,0x1f
    8001677e:	3b071073          	csrw	pmpaddr0,a4
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80016782:	08100713          	li	a4,129
    80016786:	0762                	sll	a4,a4,0x18
    80016788:	3b171073          	csrw	pmpaddr1,a4

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001678c:	6721                	lui	a4,0x8
    8001678e:	3a073073          	csrc	pmpcfg0,a4

    TEST_SETUP_EXCEPT();
    80016792:	0ff0000f          	fence
    80016796:	00027417          	auipc	s0,0x27
    8001679a:	87a40413          	add	s0,s0,-1926 # 8003d010 <excpt>
    8001679e:	00d41023          	sh	a3,0(s0)
    800167a2:	00027717          	auipc	a4,0x27
    800167a6:	8a073323          	sd	zero,-1882(a4) # 8003d048 <excpt+0x38>
    800167aa:	0ff0000f          	fence
    800167ae:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100 << 2);

    printf("%d\n",excpt.triggered);
    800167b2:	00144583          	lbu	a1,1(s0)
    800167b6:	00007517          	auipc	a0,0x7
    800167ba:	cea50513          	add	a0,a0,-790 # 8001d4a0 <__func__.1+0xca8>
    800167be:	7a4040ef          	jal	8001af62 <printf>
    printf("%d\n",excpt.cause);
    800167c2:	640c                	ld	a1,8(s0)
    800167c4:	00007517          	auipc	a0,0x7
    800167c8:	cdc50513          	add	a0,a0,-804 # 8001d4a0 <__func__.1+0xca8>
    800167cc:	796040ef          	jal	8001af62 <printf>

    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    800167d0:	08200593          	li	a1,130
    800167d4:	0000c617          	auipc	a2,0xc
    800167d8:	d3c60613          	add	a2,a2,-708 # 80022510 <__func__.1+0x5d18>
    800167dc:	00006517          	auipc	a0,0x6
    800167e0:	31c50513          	add	a0,a0,796 # 8001caf8 <__func__.1+0x300>
    800167e4:	77e040ef          	jal	8001af62 <printf>
    800167e8:	00144783          	lbu	a5,1(s0)
    800167ec:	00006597          	auipc	a1,0x6
    800167f0:	2d458593          	add	a1,a1,724 # 8001cac0 <__func__.1+0x2c8>
    800167f4:	c789                	beqz	a5,800167fe <load_access_fault_5+0xd2>
    800167f6:	00006597          	auipc	a1,0x6
    800167fa:	2da58593          	add	a1,a1,730 # 8001cad0 <__func__.1+0x2d8>
    800167fe:	00006517          	auipc	a0,0x6
    80016802:	31250513          	add	a0,a0,786 # 8001cb10 <__func__.1+0x318>
    80016806:	75c040ef          	jal	8001af62 <printf>
    8001680a:	00144783          	lbu	a5,1(s0)
    8001680e:	e3b1                	bnez	a5,80016852 <load_access_fault_5+0x126>
    80016810:	4529                	li	a0,10
    80016812:	622030ef          	jal	80019e34 <putchar>
    80016816:	00144783          	lbu	a5,1(s0)
    8001681a:	e795                	bnez	a5,80016846 <load_access_fault_5+0x11a>
    8001681c:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END();
    8001681e:	00006597          	auipc	a1,0x6
    80016822:	2a258593          	add	a1,a1,674 # 8001cac0 <__func__.1+0x2c8>
    80016826:	00006517          	auipc	a0,0x6
    8001682a:	35250513          	add	a0,a0,850 # 8001cb78 <__func__.1+0x380>
    8001682e:	734040ef          	jal	8001af62 <printf>
    80016832:	4511                	li	a0,4
    80016834:	aaaea0ef          	jal	80000ade <goto_priv>
    80016838:	aefea0ef          	jal	80001326 <reset_state>
}
    8001683c:	60a2                	ld	ra,8(sp)
    8001683e:	8522                	mv	a0,s0
    80016840:	6402                	ld	s0,0(sp)
    80016842:	0141                	add	sp,sp,16
    80016844:	8082                	ret
    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    80016846:	4401                	li	s0,0
    TEST_END();
    80016848:	00006597          	auipc	a1,0x6
    8001684c:	28858593          	add	a1,a1,648 # 8001cad0 <__func__.1+0x2d8>
    80016850:	bfd9                	j	80016826 <load_access_fault_5+0xfa>
    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    80016852:	00006517          	auipc	a0,0x6
    80016856:	2c650513          	add	a0,a0,710 # 8001cb18 <__func__.1+0x320>
    8001685a:	708040ef          	jal	8001af62 <printf>
    8001685e:	02900513          	li	a0,41
    80016862:	5d2030ef          	jal	80019e34 <putchar>
    80016866:	b76d                	j	80016810 <load_access_fault_5+0xe4>

0000000080016868 <load_access_fault_6>:


bool load_access_fault_6(){
    80016868:	1101                	add	sp,sp,-32

    TEST_START();
    8001686a:	00006597          	auipc	a1,0x6
    8001686e:	b9658593          	add	a1,a1,-1130 # 8001c400 <__func__.34>
    80016872:	00006517          	auipc	a0,0x6
    80016876:	26e50513          	add	a0,a0,622 # 8001cae0 <__func__.1+0x2e8>
bool load_access_fault_6(){
    8001687a:	ec06                	sd	ra,24(sp)
    8001687c:	e822                	sd	s0,16(sp)
    8001687e:	e426                	sd	s1,8(sp)
    80016880:	e04a                	sd	s2,0(sp)
    TEST_START();
    80016882:	6e0040ef          	jal	8001af62 <printf>
    80016886:	4529                	li	a0,10
    80016888:	5ac030ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    8001688c:	4511                	li	a0,4
    8001688e:	a50ea0ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80016892:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80016896:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001689a:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001689e:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    800168a2:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    800168a6:	08000793          	li	a5,128
    800168aa:	3a07a073          	csrs	pmpcfg0,a5


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    800168ae:	10000793          	li	a5,256
    800168b2:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    800168b6:	20000793          	li	a5,512
    800168ba:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    800168be:	40000493          	li	s1,1024
    800168c2:	3a04a073          	csrs	pmpcfg0,s1
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    800168c6:	6785                	lui	a5,0x1
    800168c8:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800168cc:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    800168d0:	67a1                	lui	a5,0x8
    800168d2:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    800168d6:	4905                	li	s2,1
    800168d8:	01f91793          	sll	a5,s2,0x1f
    800168dc:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    800168e0:	08100793          	li	a5,129
    800168e4:	07e2                	sll	a5,a5,0x18
    800168e6:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HS);
    800168ea:	450d                	li	a0,3
    800168ec:	9f2ea0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    800168f0:	0ff0000f          	fence
    800168f4:	00026417          	auipc	s0,0x26
    800168f8:	71c40413          	add	s0,s0,1820 # 8003d010 <excpt>
    800168fc:	01241023          	sh	s2,0(s0)
    80016900:	00026797          	auipc	a5,0x26
    80016904:	7407b423          	sd	zero,1864(a5) # 8003d048 <excpt+0x38>
    80016908:	0ff0000f          	fence
    8001690c:	00048483          	lb	s1,0(s1)
    
    lb(0x80000100 << 2);

    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    80016910:	08200593          	li	a1,130
    80016914:	0000c617          	auipc	a2,0xc
    80016918:	c3460613          	add	a2,a2,-972 # 80022548 <__func__.1+0x5d50>
    8001691c:	00006517          	auipc	a0,0x6
    80016920:	1dc50513          	add	a0,a0,476 # 8001caf8 <__func__.1+0x300>
    80016924:	63e040ef          	jal	8001af62 <printf>
    80016928:	00144783          	lbu	a5,1(s0)
    8001692c:	00006597          	auipc	a1,0x6
    80016930:	1a458593          	add	a1,a1,420 # 8001cad0 <__func__.1+0x2d8>
    80016934:	c789                	beqz	a5,8001693e <load_access_fault_6+0xd6>
    80016936:	6418                	ld	a4,8(s0)
    80016938:	4795                	li	a5,5
    8001693a:	06f70f63          	beq	a4,a5,800169b8 <load_access_fault_6+0x150>
    8001693e:	00006517          	auipc	a0,0x6
    80016942:	1d250513          	add	a0,a0,466 # 8001cb10 <__func__.1+0x318>
    80016946:	61c040ef          	jal	8001af62 <printf>
    8001694a:	00144783          	lbu	a5,1(s0)
    8001694e:	c789                	beqz	a5,80016958 <load_access_fault_6+0xf0>
    80016950:	6418                	ld	a4,8(s0)
    80016952:	4795                	li	a5,5
    80016954:	00f70c63          	beq	a4,a5,8001696c <load_access_fault_6+0x104>
    80016958:	00006517          	auipc	a0,0x6
    8001695c:	1c050513          	add	a0,a0,448 # 8001cb18 <__func__.1+0x320>
    80016960:	602040ef          	jal	8001af62 <printf>
    80016964:	02900513          	li	a0,41
    80016968:	4cc030ef          	jal	80019e34 <putchar>
    8001696c:	4529                	li	a0,10
    8001696e:	4c6030ef          	jal	80019e34 <putchar>
    80016972:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    80016976:	00006597          	auipc	a1,0x6
    8001697a:	15a58593          	add	a1,a1,346 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001697e:	c491                	beqz	s1,8001698a <load_access_fault_6+0x122>
    80016980:	6418                	ld	a4,8(s0)
    80016982:	4795                	li	a5,5
    80016984:	02f70563          	beq	a4,a5,800169ae <load_access_fault_6+0x146>
    80016988:	4481                	li	s1,0
    TEST_END();
    8001698a:	00006517          	auipc	a0,0x6
    8001698e:	1ee50513          	add	a0,a0,494 # 8001cb78 <__func__.1+0x380>
    80016992:	5d0040ef          	jal	8001af62 <printf>
    80016996:	4511                	li	a0,4
    80016998:	946ea0ef          	jal	80000ade <goto_priv>
    8001699c:	98bea0ef          	jal	80001326 <reset_state>
}
    800169a0:	60e2                	ld	ra,24(sp)
    800169a2:	6442                	ld	s0,16(sp)
    800169a4:	6902                	ld	s2,0(sp)
    800169a6:	8526                	mv	a0,s1
    800169a8:	64a2                	ld	s1,8(sp)
    800169aa:	6105                	add	sp,sp,32
    800169ac:	8082                	ret
    TEST_END();
    800169ae:	00006597          	auipc	a1,0x6
    800169b2:	11258593          	add	a1,a1,274 # 8001cac0 <__func__.1+0x2c8>
    800169b6:	bfd1                	j	8001698a <load_access_fault_6+0x122>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    800169b8:	00006597          	auipc	a1,0x6
    800169bc:	10858593          	add	a1,a1,264 # 8001cac0 <__func__.1+0x2c8>
    800169c0:	bfbd                	j	8001693e <load_access_fault_6+0xd6>

00000000800169c2 <load_access_fault_7>:


bool load_access_fault_7(){
    800169c2:	1101                	add	sp,sp,-32

    TEST_START();
    800169c4:	00006597          	auipc	a1,0x6
    800169c8:	a5458593          	add	a1,a1,-1452 # 8001c418 <__func__.33>
    800169cc:	00006517          	auipc	a0,0x6
    800169d0:	11450513          	add	a0,a0,276 # 8001cae0 <__func__.1+0x2e8>
bool load_access_fault_7(){
    800169d4:	ec06                	sd	ra,24(sp)
    800169d6:	e822                	sd	s0,16(sp)
    800169d8:	e426                	sd	s1,8(sp)
    800169da:	e04a                	sd	s2,0(sp)
    TEST_START();
    800169dc:	586040ef          	jal	8001af62 <printf>
    800169e0:	4529                	li	a0,10
    800169e2:	452030ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    800169e6:	4511                	li	a0,4
    800169e8:	8f6ea0ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    800169ec:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    800169f0:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    800169f4:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    800169f8:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    800169fc:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80016a00:	08000793          	li	a5,128
    80016a04:	3a07a073          	csrs	pmpcfg0,a5


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80016a08:	10000793          	li	a5,256
    80016a0c:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80016a10:	20000793          	li	a5,512
    80016a14:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80016a18:	40000493          	li	s1,1024
    80016a1c:	3a04a073          	csrs	pmpcfg0,s1
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80016a20:	6785                	lui	a5,0x1
    80016a22:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80016a26:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80016a2a:	67a1                	lui	a5,0x8
    80016a2c:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80016a30:	4905                	li	s2,1
    80016a32:	01f91793          	sll	a5,s2,0x1f
    80016a36:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80016a3a:	08100793          	li	a5,129
    80016a3e:	07e2                	sll	a5,a5,0x18
    80016a40:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HU);
    80016a44:	4505                	li	a0,1
    80016a46:	898ea0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80016a4a:	0ff0000f          	fence
    80016a4e:	00026417          	auipc	s0,0x26
    80016a52:	5c240413          	add	s0,s0,1474 # 8003d010 <excpt>
    80016a56:	01241023          	sh	s2,0(s0)
    80016a5a:	00026797          	auipc	a5,0x26
    80016a5e:	5e07b723          	sd	zero,1518(a5) # 8003d048 <excpt+0x38>
    80016a62:	0ff0000f          	fence
    80016a66:	00048483          	lb	s1,0(s1)
    
    lb(0x80000100 << 2);

    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    80016a6a:	08200593          	li	a1,130
    80016a6e:	0000c617          	auipc	a2,0xc
    80016a72:	b1260613          	add	a2,a2,-1262 # 80022580 <__func__.1+0x5d88>
    80016a76:	00006517          	auipc	a0,0x6
    80016a7a:	08250513          	add	a0,a0,130 # 8001caf8 <__func__.1+0x300>
    80016a7e:	4e4040ef          	jal	8001af62 <printf>
    80016a82:	00144783          	lbu	a5,1(s0)
    80016a86:	00006597          	auipc	a1,0x6
    80016a8a:	04a58593          	add	a1,a1,74 # 8001cad0 <__func__.1+0x2d8>
    80016a8e:	c789                	beqz	a5,80016a98 <load_access_fault_7+0xd6>
    80016a90:	6418                	ld	a4,8(s0)
    80016a92:	4795                	li	a5,5
    80016a94:	06f70f63          	beq	a4,a5,80016b12 <load_access_fault_7+0x150>
    80016a98:	00006517          	auipc	a0,0x6
    80016a9c:	07850513          	add	a0,a0,120 # 8001cb10 <__func__.1+0x318>
    80016aa0:	4c2040ef          	jal	8001af62 <printf>
    80016aa4:	00144783          	lbu	a5,1(s0)
    80016aa8:	c789                	beqz	a5,80016ab2 <load_access_fault_7+0xf0>
    80016aaa:	6418                	ld	a4,8(s0)
    80016aac:	4795                	li	a5,5
    80016aae:	00f70c63          	beq	a4,a5,80016ac6 <load_access_fault_7+0x104>
    80016ab2:	00006517          	auipc	a0,0x6
    80016ab6:	06650513          	add	a0,a0,102 # 8001cb18 <__func__.1+0x320>
    80016aba:	4a8040ef          	jal	8001af62 <printf>
    80016abe:	02900513          	li	a0,41
    80016ac2:	372030ef          	jal	80019e34 <putchar>
    80016ac6:	4529                	li	a0,10
    80016ac8:	36c030ef          	jal	80019e34 <putchar>
    80016acc:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    80016ad0:	00006597          	auipc	a1,0x6
    80016ad4:	00058593          	mv	a1,a1
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    80016ad8:	c491                	beqz	s1,80016ae4 <load_access_fault_7+0x122>
    80016ada:	6418                	ld	a4,8(s0)
    80016adc:	4795                	li	a5,5
    80016ade:	02f70563          	beq	a4,a5,80016b08 <load_access_fault_7+0x146>
    80016ae2:	4481                	li	s1,0
    TEST_END();
    80016ae4:	00006517          	auipc	a0,0x6
    80016ae8:	09450513          	add	a0,a0,148 # 8001cb78 <__func__.1+0x380>
    80016aec:	476040ef          	jal	8001af62 <printf>
    80016af0:	4511                	li	a0,4
    80016af2:	fede90ef          	jal	80000ade <goto_priv>
    80016af6:	831ea0ef          	jal	80001326 <reset_state>
}
    80016afa:	60e2                	ld	ra,24(sp)
    80016afc:	6442                	ld	s0,16(sp)
    80016afe:	6902                	ld	s2,0(sp)
    80016b00:	8526                	mv	a0,s1
    80016b02:	64a2                	ld	s1,8(sp)
    80016b04:	6105                	add	sp,sp,32
    80016b06:	8082                	ret
    TEST_END();
    80016b08:	00006597          	auipc	a1,0x6
    80016b0c:	fb858593          	add	a1,a1,-72 # 8001cac0 <__func__.1+0x2c8>
    80016b10:	bfd1                	j	80016ae4 <load_access_fault_7+0x122>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    80016b12:	00006597          	auipc	a1,0x6
    80016b16:	fae58593          	add	a1,a1,-82 # 8001cac0 <__func__.1+0x2c8>
    80016b1a:	bfbd                	j	80016a98 <load_access_fault_7+0xd6>

0000000080016b1c <load_access_fault_8>:

bool load_access_fault_8(){
    80016b1c:	1101                	add	sp,sp,-32

    TEST_START();
    80016b1e:	00006597          	auipc	a1,0x6
    80016b22:	91258593          	add	a1,a1,-1774 # 8001c430 <__func__.32>
    80016b26:	00006517          	auipc	a0,0x6
    80016b2a:	fba50513          	add	a0,a0,-70 # 8001cae0 <__func__.1+0x2e8>
bool load_access_fault_8(){
    80016b2e:	ec06                	sd	ra,24(sp)
    80016b30:	e822                	sd	s0,16(sp)
    80016b32:	e426                	sd	s1,8(sp)
    80016b34:	e04a                	sd	s2,0(sp)
    TEST_START();
    80016b36:	42c040ef          	jal	8001af62 <printf>
    80016b3a:	4529                	li	a0,10
    80016b3c:	2f8030ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    80016b40:	4511                	li	a0,4
    80016b42:	f9de90ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80016b46:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80016b4a:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80016b4e:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80016b52:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80016b56:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80016b5a:	08000793          	li	a5,128
    80016b5e:	3a07a073          	csrs	pmpcfg0,a5


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80016b62:	10000793          	li	a5,256
    80016b66:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80016b6a:	20000793          	li	a5,512
    80016b6e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80016b72:	40000493          	li	s1,1024
    80016b76:	3a04a073          	csrs	pmpcfg0,s1
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80016b7a:	6785                	lui	a5,0x1
    80016b7c:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80016b80:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80016b84:	67a1                	lui	a5,0x8
    80016b86:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80016b8a:	4905                	li	s2,1
    80016b8c:	01f91793          	sll	a5,s2,0x1f
    80016b90:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80016b94:	08100793          	li	a5,129
    80016b98:	07e2                	sll	a5,a5,0x18
    80016b9a:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_VU);
    80016b9e:	4501                	li	a0,0
    80016ba0:	f3fe90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80016ba4:	0ff0000f          	fence
    80016ba8:	00026417          	auipc	s0,0x26
    80016bac:	46840413          	add	s0,s0,1128 # 8003d010 <excpt>
    80016bb0:	01241023          	sh	s2,0(s0)
    80016bb4:	00026797          	auipc	a5,0x26
    80016bb8:	4807ba23          	sd	zero,1172(a5) # 8003d048 <excpt+0x38>
    80016bbc:	0ff0000f          	fence
    80016bc0:	00048483          	lb	s1,0(s1)
    
    lb(0x80000100 << 2);

    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    80016bc4:	08200593          	li	a1,130
    80016bc8:	0000c617          	auipc	a2,0xc
    80016bcc:	9f060613          	add	a2,a2,-1552 # 800225b8 <__func__.1+0x5dc0>
    80016bd0:	00006517          	auipc	a0,0x6
    80016bd4:	f2850513          	add	a0,a0,-216 # 8001caf8 <__func__.1+0x300>
    80016bd8:	38a040ef          	jal	8001af62 <printf>
    80016bdc:	00144783          	lbu	a5,1(s0)
    80016be0:	00006597          	auipc	a1,0x6
    80016be4:	ef058593          	add	a1,a1,-272 # 8001cad0 <__func__.1+0x2d8>
    80016be8:	c789                	beqz	a5,80016bf2 <load_access_fault_8+0xd6>
    80016bea:	6418                	ld	a4,8(s0)
    80016bec:	4795                	li	a5,5
    80016bee:	06f70f63          	beq	a4,a5,80016c6c <load_access_fault_8+0x150>
    80016bf2:	00006517          	auipc	a0,0x6
    80016bf6:	f1e50513          	add	a0,a0,-226 # 8001cb10 <__func__.1+0x318>
    80016bfa:	368040ef          	jal	8001af62 <printf>
    80016bfe:	00144783          	lbu	a5,1(s0)
    80016c02:	c789                	beqz	a5,80016c0c <load_access_fault_8+0xf0>
    80016c04:	6418                	ld	a4,8(s0)
    80016c06:	4795                	li	a5,5
    80016c08:	00f70c63          	beq	a4,a5,80016c20 <load_access_fault_8+0x104>
    80016c0c:	00006517          	auipc	a0,0x6
    80016c10:	f0c50513          	add	a0,a0,-244 # 8001cb18 <__func__.1+0x320>
    80016c14:	34e040ef          	jal	8001af62 <printf>
    80016c18:	02900513          	li	a0,41
    80016c1c:	218030ef          	jal	80019e34 <putchar>
    80016c20:	4529                	li	a0,10
    80016c22:	212030ef          	jal	80019e34 <putchar>
    80016c26:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    80016c2a:	00006597          	auipc	a1,0x6
    80016c2e:	ea658593          	add	a1,a1,-346 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    80016c32:	c491                	beqz	s1,80016c3e <load_access_fault_8+0x122>
    80016c34:	6418                	ld	a4,8(s0)
    80016c36:	4795                	li	a5,5
    80016c38:	02f70563          	beq	a4,a5,80016c62 <load_access_fault_8+0x146>
    80016c3c:	4481                	li	s1,0
    TEST_END();
    80016c3e:	00006517          	auipc	a0,0x6
    80016c42:	f3a50513          	add	a0,a0,-198 # 8001cb78 <__func__.1+0x380>
    80016c46:	31c040ef          	jal	8001af62 <printf>
    80016c4a:	4511                	li	a0,4
    80016c4c:	e93e90ef          	jal	80000ade <goto_priv>
    80016c50:	ed6ea0ef          	jal	80001326 <reset_state>
}
    80016c54:	60e2                	ld	ra,24(sp)
    80016c56:	6442                	ld	s0,16(sp)
    80016c58:	6902                	ld	s2,0(sp)
    80016c5a:	8526                	mv	a0,s1
    80016c5c:	64a2                	ld	s1,8(sp)
    80016c5e:	6105                	add	sp,sp,32
    80016c60:	8082                	ret
    TEST_END();
    80016c62:	00006597          	auipc	a1,0x6
    80016c66:	e5e58593          	add	a1,a1,-418 # 8001cac0 <__func__.1+0x2c8>
    80016c6a:	bfd1                	j	80016c3e <load_access_fault_8+0x122>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    80016c6c:	00006597          	auipc	a1,0x6
    80016c70:	e5458593          	add	a1,a1,-428 # 8001cac0 <__func__.1+0x2c8>
    80016c74:	bfbd                	j	80016bf2 <load_access_fault_8+0xd6>

0000000080016c76 <load_access_fault_9>:

bool load_access_fault_9(){
    80016c76:	1101                	add	sp,sp,-32

    TEST_START();
    80016c78:	00005597          	auipc	a1,0x5
    80016c7c:	7d058593          	add	a1,a1,2000 # 8001c448 <__func__.31>
    80016c80:	00006517          	auipc	a0,0x6
    80016c84:	e6050513          	add	a0,a0,-416 # 8001cae0 <__func__.1+0x2e8>
bool load_access_fault_9(){
    80016c88:	ec06                	sd	ra,24(sp)
    80016c8a:	e822                	sd	s0,16(sp)
    80016c8c:	e426                	sd	s1,8(sp)
    TEST_START();
    80016c8e:	2d4040ef          	jal	8001af62 <printf>
    80016c92:	4529                	li	a0,10
    80016c94:	1a0030ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    80016c98:	4511                	li	a0,4
    80016c9a:	e45e90ef          	jal	80000ade <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80016c9e:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80016ca2:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80016ca6:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80016caa:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80016cae:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80016cb2:	08000793          	li	a5,128
    80016cb6:	3a07a073          	csrs	pmpcfg0,a5


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80016cba:	10000793          	li	a5,256
    80016cbe:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80016cc2:	20000793          	li	a5,512
    80016cc6:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80016cca:	40000793          	li	a5,1024
    80016cce:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80016cd2:	6785                	lui	a5,0x1
    80016cd4:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80016cd8:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80016cdc:	67a1                	lui	a5,0x8
    80016cde:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80016ce2:	4405                	li	s0,1
    80016ce4:	01f41793          	sll	a5,s0,0x1f
    80016ce8:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80016cec:	08100793          	li	a5,129
    80016cf0:	07e2                	sll	a5,a5,0x18
    80016cf2:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_VU);
    80016cf6:	4501                	li	a0,0
    80016cf8:	de7e90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80016cfc:	0ff0000f          	fence
    80016d00:	00026497          	auipc	s1,0x26
    80016d04:	31048493          	add	s1,s1,784 # 8003d010 <excpt>
    80016d08:	00849023          	sh	s0,0(s1)
    80016d0c:	00026797          	auipc	a5,0x26
    80016d10:	3207be23          	sd	zero,828(a5) # 8003d048 <excpt+0x38>
    80016d14:	0ff0000f          	fence
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    80016d18:	140e                	sll	s0,s0,0x23
    80016d1a:	1461                	add	s0,s0,-8
    80016d1c:	00043403          	ld	s0,0(s0)
    
    ld(0x1fffffffe << 2);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    80016d20:	08200593          	li	a1,130
    80016d24:	0000c617          	auipc	a2,0xc
    80016d28:	8cc60613          	add	a2,a2,-1844 # 800225f0 <__func__.1+0x5df8>
    80016d2c:	00006517          	auipc	a0,0x6
    80016d30:	dcc50513          	add	a0,a0,-564 # 8001caf8 <__func__.1+0x300>
    80016d34:	22e040ef          	jal	8001af62 <printf>
    80016d38:	0014c783          	lbu	a5,1(s1)
    80016d3c:	00006597          	auipc	a1,0x6
    80016d40:	d9458593          	add	a1,a1,-620 # 8001cad0 <__func__.1+0x2d8>
    80016d44:	c789                	beqz	a5,80016d4e <load_access_fault_9+0xd8>
    80016d46:	6498                	ld	a4,8(s1)
    80016d48:	4795                	li	a5,5
    80016d4a:	06f70e63          	beq	a4,a5,80016dc6 <load_access_fault_9+0x150>
    80016d4e:	00006517          	auipc	a0,0x6
    80016d52:	dc250513          	add	a0,a0,-574 # 8001cb10 <__func__.1+0x318>
    80016d56:	20c040ef          	jal	8001af62 <printf>
    80016d5a:	0014c783          	lbu	a5,1(s1)
    80016d5e:	c789                	beqz	a5,80016d68 <load_access_fault_9+0xf2>
    80016d60:	6498                	ld	a4,8(s1)
    80016d62:	4795                	li	a5,5
    80016d64:	00f70c63          	beq	a4,a5,80016d7c <load_access_fault_9+0x106>
    80016d68:	00006517          	auipc	a0,0x6
    80016d6c:	db050513          	add	a0,a0,-592 # 8001cb18 <__func__.1+0x320>
    80016d70:	1f2040ef          	jal	8001af62 <printf>
    80016d74:	02900513          	li	a0,41
    80016d78:	0bc030ef          	jal	80019e34 <putchar>
    80016d7c:	4529                	li	a0,10
    80016d7e:	0b6030ef          	jal	80019e34 <putchar>
    80016d82:	0014c403          	lbu	s0,1(s1)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    80016d86:	00006597          	auipc	a1,0x6
    80016d8a:	d4a58593          	add	a1,a1,-694 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    80016d8e:	c411                	beqz	s0,80016d9a <load_access_fault_9+0x124>
    80016d90:	6498                	ld	a4,8(s1)
    80016d92:	4795                	li	a5,5
    80016d94:	02f70463          	beq	a4,a5,80016dbc <load_access_fault_9+0x146>
    80016d98:	4401                	li	s0,0
    TEST_END();
    80016d9a:	00006517          	auipc	a0,0x6
    80016d9e:	dde50513          	add	a0,a0,-546 # 8001cb78 <__func__.1+0x380>
    80016da2:	1c0040ef          	jal	8001af62 <printf>
    80016da6:	4511                	li	a0,4
    80016da8:	d37e90ef          	jal	80000ade <goto_priv>
    80016dac:	d7aea0ef          	jal	80001326 <reset_state>
}
    80016db0:	60e2                	ld	ra,24(sp)
    80016db2:	8522                	mv	a0,s0
    80016db4:	6442                	ld	s0,16(sp)
    80016db6:	64a2                	ld	s1,8(sp)
    80016db8:	6105                	add	sp,sp,32
    80016dba:	8082                	ret
    TEST_END();
    80016dbc:	00006597          	auipc	a1,0x6
    80016dc0:	d0458593          	add	a1,a1,-764 # 8001cac0 <__func__.1+0x2c8>
    80016dc4:	bfd9                	j	80016d9a <load_access_fault_9+0x124>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    80016dc6:	00006597          	auipc	a1,0x6
    80016dca:	cfa58593          	add	a1,a1,-774 # 8001cac0 <__func__.1+0x2c8>
    80016dce:	b741                	j	80016d4e <load_access_fault_9+0xd8>

0000000080016dd0 <load_access_fault_10>:

bool load_access_fault_10(){
    80016dd0:	1101                	add	sp,sp,-32

    TEST_START();
    80016dd2:	00005597          	auipc	a1,0x5
    80016dd6:	68e58593          	add	a1,a1,1678 # 8001c460 <__func__.30>
    80016dda:	00006517          	auipc	a0,0x6
    80016dde:	d0650513          	add	a0,a0,-762 # 8001cae0 <__func__.1+0x2e8>
bool load_access_fault_10(){
    80016de2:	ec06                	sd	ra,24(sp)
    80016de4:	e822                	sd	s0,16(sp)
    80016de6:	e426                	sd	s1,8(sp)
    TEST_START();
    80016de8:	17a040ef          	jal	8001af62 <printf>
    80016dec:	4529                	li	a0,10
    80016dee:	046030ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    80016df2:	4511                	li	a0,4
    80016df4:	cebe90ef          	jal	80000ade <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80016df8:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80016dfc:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80016e00:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80016e04:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80016e08:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80016e0c:	08000793          	li	a5,128
    80016e10:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80016e14:	4485                	li	s1,1
    80016e16:	01f49793          	sll	a5,s1,0x1f
    80016e1a:	3b079073          	csrw	pmpaddr0,a5

    goto_priv(PRIV_M);
    80016e1e:	4511                	li	a0,4
    80016e20:	cbfe90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80016e24:	0ff0000f          	fence
    80016e28:	00026417          	auipc	s0,0x26
    80016e2c:	1e840413          	add	s0,s0,488 # 8003d010 <excpt>
    80016e30:	00941023          	sh	s1,0(s0)
    80016e34:	00026797          	auipc	a5,0x26
    80016e38:	2007ba23          	sd	zero,532(a5) # 8003d048 <excpt+0x38>
    80016e3c:	0ff0000f          	fence
    80016e40:	400007b7          	lui	a5,0x40000
    80016e44:	0007b783          	ld	a5,0(a5) # 40000000 <STACK_SIZE+0x3ff00000>
    
    ld(0x90000000 << 2);

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    80016e48:	08200593          	li	a1,130
    80016e4c:	0000c617          	auipc	a2,0xc
    80016e50:	81460613          	add	a2,a2,-2028 # 80022660 <__func__.1+0x5e68>
    80016e54:	00006517          	auipc	a0,0x6
    80016e58:	ca450513          	add	a0,a0,-860 # 8001caf8 <__func__.1+0x300>
    80016e5c:	106040ef          	jal	8001af62 <printf>
    80016e60:	00144783          	lbu	a5,1(s0)
    80016e64:	00006597          	auipc	a1,0x6
    80016e68:	c6c58593          	add	a1,a1,-916 # 8001cad0 <__func__.1+0x2d8>
    80016e6c:	c789                	beqz	a5,80016e76 <load_access_fault_10+0xa6>
    80016e6e:	6418                	ld	a4,8(s0)
    80016e70:	4795                	li	a5,5
    80016e72:	06f70e63          	beq	a4,a5,80016eee <load_access_fault_10+0x11e>
    80016e76:	00006517          	auipc	a0,0x6
    80016e7a:	c9a50513          	add	a0,a0,-870 # 8001cb10 <__func__.1+0x318>
    80016e7e:	0e4040ef          	jal	8001af62 <printf>
    80016e82:	00144783          	lbu	a5,1(s0)
    80016e86:	c789                	beqz	a5,80016e90 <load_access_fault_10+0xc0>
    80016e88:	6418                	ld	a4,8(s0)
    80016e8a:	4795                	li	a5,5
    80016e8c:	00f70c63          	beq	a4,a5,80016ea4 <load_access_fault_10+0xd4>
    80016e90:	00006517          	auipc	a0,0x6
    80016e94:	c8850513          	add	a0,a0,-888 # 8001cb18 <__func__.1+0x320>
    80016e98:	0ca040ef          	jal	8001af62 <printf>
    80016e9c:	02900513          	li	a0,41
    80016ea0:	795020ef          	jal	80019e34 <putchar>
    80016ea4:	4529                	li	a0,10
    80016ea6:	78f020ef          	jal	80019e34 <putchar>
    80016eaa:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    80016eae:	00006597          	auipc	a1,0x6
    80016eb2:	c2258593          	add	a1,a1,-990 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    80016eb6:	c491                	beqz	s1,80016ec2 <load_access_fault_10+0xf2>
    80016eb8:	6418                	ld	a4,8(s0)
    80016eba:	4795                	li	a5,5
    80016ebc:	02f70463          	beq	a4,a5,80016ee4 <load_access_fault_10+0x114>
    80016ec0:	4481                	li	s1,0
    TEST_END();
    80016ec2:	00006517          	auipc	a0,0x6
    80016ec6:	cb650513          	add	a0,a0,-842 # 8001cb78 <__func__.1+0x380>
    80016eca:	098040ef          	jal	8001af62 <printf>
    80016ece:	4511                	li	a0,4
    80016ed0:	c0fe90ef          	jal	80000ade <goto_priv>
    80016ed4:	c52ea0ef          	jal	80001326 <reset_state>
}
    80016ed8:	60e2                	ld	ra,24(sp)
    80016eda:	6442                	ld	s0,16(sp)
    80016edc:	8526                	mv	a0,s1
    80016ede:	64a2                	ld	s1,8(sp)
    80016ee0:	6105                	add	sp,sp,32
    80016ee2:	8082                	ret
    TEST_END();
    80016ee4:	00006597          	auipc	a1,0x6
    80016ee8:	bdc58593          	add	a1,a1,-1060 # 8001cac0 <__func__.1+0x2c8>
    80016eec:	bfd9                	j	80016ec2 <load_access_fault_10+0xf2>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    80016eee:	00006597          	auipc	a1,0x6
    80016ef2:	bd258593          	add	a1,a1,-1070 # 8001cac0 <__func__.1+0x2c8>
    80016ef6:	b741                	j	80016e76 <load_access_fault_10+0xa6>

0000000080016ef8 <store_access_fault_1>:


bool store_access_fault_1(){
    80016ef8:	1101                	add	sp,sp,-32

    TEST_START();
    80016efa:	00005597          	auipc	a1,0x5
    80016efe:	57e58593          	add	a1,a1,1406 # 8001c478 <__func__.29>
    80016f02:	00006517          	auipc	a0,0x6
    80016f06:	bde50513          	add	a0,a0,-1058 # 8001cae0 <__func__.1+0x2e8>
bool store_access_fault_1(){
    80016f0a:	ec06                	sd	ra,24(sp)
    80016f0c:	e822                	sd	s0,16(sp)
    80016f0e:	e426                	sd	s1,8(sp)
    TEST_START();
    80016f10:	052040ef          	jal	8001af62 <printf>
    80016f14:	4529                	li	a0,10
    80016f16:	71f020ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    80016f1a:	4511                	li	a0,4
    80016f1c:	bc3e90ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80016f20:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80016f24:	10000793          	li	a5,256
    80016f28:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80016f2c:	20000793          	li	a5,512
    80016f30:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80016f34:	40000713          	li	a4,1024
    80016f38:	3a072073          	csrs	pmpcfg0,a4
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80016f3c:	6785                	lui	a5,0x1
    80016f3e:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80016f42:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80016f46:	4685                	li	a3,1
    80016f48:	01f69793          	sll	a5,a3,0x1f
    80016f4c:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80016f50:	08100793          	li	a5,129
    80016f54:	07e2                	sll	a5,a5,0x18
    80016f56:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80016f5a:	67a1                	lui	a5,0x8
    80016f5c:	3a07a073          	csrs	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    80016f60:	0ff0000f          	fence
    80016f64:	00026417          	auipc	s0,0x26
    80016f68:	0ac40413          	add	s0,s0,172 # 8003d010 <excpt>
    80016f6c:	00d41023          	sh	a3,0(s0)
    80016f70:	00026797          	auipc	a5,0x26
    80016f74:	0c07bc23          	sd	zero,216(a5) # 8003d048 <excpt+0x38>
    80016f78:	0ff0000f          	fence
STORE_INSTRUCTION(sb, "sb", uint8_t);
    80016f7c:	4781                	li	a5,0
    80016f7e:	00f70023          	sb	a5,0(a4)
    
    sb(0x80000100 << 2 , 0x0);

    printf("%d\n",excpt.triggered);
    80016f82:	00144583          	lbu	a1,1(s0)
    80016f86:	00006517          	auipc	a0,0x6
    80016f8a:	51a50513          	add	a0,a0,1306 # 8001d4a0 <__func__.1+0xca8>
    80016f8e:	7d5030ef          	jal	8001af62 <printf>
    printf("%d\n",excpt.cause);
    80016f92:	640c                	ld	a1,8(s0)
    80016f94:	00006517          	auipc	a0,0x6
    80016f98:	50c50513          	add	a0,a0,1292 # 8001d4a0 <__func__.1+0xca8>
    80016f9c:	7c7030ef          	jal	8001af62 <printf>

    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80016fa0:	08200593          	li	a1,130
    80016fa4:	0000b617          	auipc	a2,0xb
    80016fa8:	71c60613          	add	a2,a2,1820 # 800226c0 <__func__.1+0x5ec8>
    80016fac:	00006517          	auipc	a0,0x6
    80016fb0:	b4c50513          	add	a0,a0,-1204 # 8001caf8 <__func__.1+0x300>
    80016fb4:	7af030ef          	jal	8001af62 <printf>
    80016fb8:	00144783          	lbu	a5,1(s0)
    80016fbc:	00006597          	auipc	a1,0x6
    80016fc0:	b1458593          	add	a1,a1,-1260 # 8001cad0 <__func__.1+0x2d8>
    80016fc4:	c789                	beqz	a5,80016fce <store_access_fault_1+0xd6>
    80016fc6:	6418                	ld	a4,8(s0)
    80016fc8:	479d                	li	a5,7
    80016fca:	06f70e63          	beq	a4,a5,80017046 <store_access_fault_1+0x14e>
    80016fce:	00006517          	auipc	a0,0x6
    80016fd2:	b4250513          	add	a0,a0,-1214 # 8001cb10 <__func__.1+0x318>
    80016fd6:	78d030ef          	jal	8001af62 <printf>
    80016fda:	00144783          	lbu	a5,1(s0)
    80016fde:	c789                	beqz	a5,80016fe8 <store_access_fault_1+0xf0>
    80016fe0:	6418                	ld	a4,8(s0)
    80016fe2:	479d                	li	a5,7
    80016fe4:	00f70c63          	beq	a4,a5,80016ffc <store_access_fault_1+0x104>
    80016fe8:	00006517          	auipc	a0,0x6
    80016fec:	b3050513          	add	a0,a0,-1232 # 8001cb18 <__func__.1+0x320>
    80016ff0:	773030ef          	jal	8001af62 <printf>
    80016ff4:	02900513          	li	a0,41
    80016ff8:	63d020ef          	jal	80019e34 <putchar>
    80016ffc:	4529                	li	a0,10
    80016ffe:	637020ef          	jal	80019e34 <putchar>
    80017002:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80017006:	00006597          	auipc	a1,0x6
    8001700a:	aca58593          	add	a1,a1,-1334 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001700e:	c491                	beqz	s1,8001701a <store_access_fault_1+0x122>
    80017010:	6418                	ld	a4,8(s0)
    80017012:	479d                	li	a5,7
    80017014:	02f70463          	beq	a4,a5,8001703c <store_access_fault_1+0x144>
    80017018:	4481                	li	s1,0
    TEST_END();
    8001701a:	00006517          	auipc	a0,0x6
    8001701e:	b5e50513          	add	a0,a0,-1186 # 8001cb78 <__func__.1+0x380>
    80017022:	741030ef          	jal	8001af62 <printf>
    80017026:	4511                	li	a0,4
    80017028:	ab7e90ef          	jal	80000ade <goto_priv>
    8001702c:	afaea0ef          	jal	80001326 <reset_state>
}
    80017030:	60e2                	ld	ra,24(sp)
    80017032:	6442                	ld	s0,16(sp)
    80017034:	8526                	mv	a0,s1
    80017036:	64a2                	ld	s1,8(sp)
    80017038:	6105                	add	sp,sp,32
    8001703a:	8082                	ret
    TEST_END();
    8001703c:	00006597          	auipc	a1,0x6
    80017040:	a8458593          	add	a1,a1,-1404 # 8001cac0 <__func__.1+0x2c8>
    80017044:	bfd9                	j	8001701a <store_access_fault_1+0x122>
    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80017046:	00006597          	auipc	a1,0x6
    8001704a:	a7a58593          	add	a1,a1,-1414 # 8001cac0 <__func__.1+0x2c8>
    8001704e:	b741                	j	80016fce <store_access_fault_1+0xd6>

0000000080017050 <store_access_fault_2>:

bool store_access_fault_2(){
    80017050:	1101                	add	sp,sp,-32

    TEST_START();
    80017052:	00005597          	auipc	a1,0x5
    80017056:	43e58593          	add	a1,a1,1086 # 8001c490 <__func__.28>
    8001705a:	00006517          	auipc	a0,0x6
    8001705e:	a8650513          	add	a0,a0,-1402 # 8001cae0 <__func__.1+0x2e8>
bool store_access_fault_2(){
    80017062:	ec06                	sd	ra,24(sp)
    80017064:	e822                	sd	s0,16(sp)
    80017066:	e426                	sd	s1,8(sp)
    80017068:	e04a                	sd	s2,0(sp)
    TEST_START();
    8001706a:	6f9030ef          	jal	8001af62 <printf>
    8001706e:	4529                	li	a0,10
    80017070:	5c5020ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    80017074:	4511                	li	a0,4
    80017076:	a69e90ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001707a:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001707e:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80017082:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80017086:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001708a:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001708e:	08000793          	li	a5,128
    80017092:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80017096:	10000793          	li	a5,256
    8001709a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001709e:	20000793          	li	a5,512
    800170a2:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    800170a6:	40000493          	li	s1,1024
    800170aa:	3a04a073          	csrs	pmpcfg0,s1
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    800170ae:	6785                	lui	a5,0x1
    800170b0:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800170b4:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    800170b8:	67a1                	lui	a5,0x8
    800170ba:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    800170be:	4905                	li	s2,1
    800170c0:	01f91793          	sll	a5,s2,0x1f
    800170c4:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    800170c8:	08100793          	li	a5,129
    800170cc:	07e2                	sll	a5,a5,0x18
    800170ce:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HS);
    800170d2:	450d                	li	a0,3
    800170d4:	a0be90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    800170d8:	0ff0000f          	fence
    800170dc:	00026417          	auipc	s0,0x26
    800170e0:	f3440413          	add	s0,s0,-204 # 8003d010 <excpt>
    800170e4:	01241023          	sh	s2,0(s0)
    800170e8:	00026797          	auipc	a5,0x26
    800170ec:	f607b023          	sd	zero,-160(a5) # 8003d048 <excpt+0x38>
    800170f0:	0ff0000f          	fence
    800170f4:	4781                	li	a5,0
    800170f6:	00f48023          	sb	a5,0(s1)
    
    sb(0x80000100 << 2, 0x0);

    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    800170fa:	08200593          	li	a1,130
    800170fe:	0000b617          	auipc	a2,0xb
    80017102:	5fa60613          	add	a2,a2,1530 # 800226f8 <__func__.1+0x5f00>
    80017106:	00006517          	auipc	a0,0x6
    8001710a:	9f250513          	add	a0,a0,-1550 # 8001caf8 <__func__.1+0x300>
    8001710e:	655030ef          	jal	8001af62 <printf>
    80017112:	00144783          	lbu	a5,1(s0)
    80017116:	00006597          	auipc	a1,0x6
    8001711a:	9ba58593          	add	a1,a1,-1606 # 8001cad0 <__func__.1+0x2d8>
    8001711e:	c789                	beqz	a5,80017128 <store_access_fault_2+0xd8>
    80017120:	6418                	ld	a4,8(s0)
    80017122:	479d                	li	a5,7
    80017124:	06f70f63          	beq	a4,a5,800171a2 <store_access_fault_2+0x152>
    80017128:	00006517          	auipc	a0,0x6
    8001712c:	9e850513          	add	a0,a0,-1560 # 8001cb10 <__func__.1+0x318>
    80017130:	633030ef          	jal	8001af62 <printf>
    80017134:	00144783          	lbu	a5,1(s0)
    80017138:	c789                	beqz	a5,80017142 <store_access_fault_2+0xf2>
    8001713a:	6418                	ld	a4,8(s0)
    8001713c:	479d                	li	a5,7
    8001713e:	00f70c63          	beq	a4,a5,80017156 <store_access_fault_2+0x106>
    80017142:	00006517          	auipc	a0,0x6
    80017146:	9d650513          	add	a0,a0,-1578 # 8001cb18 <__func__.1+0x320>
    8001714a:	619030ef          	jal	8001af62 <printf>
    8001714e:	02900513          	li	a0,41
    80017152:	4e3020ef          	jal	80019e34 <putchar>
    80017156:	4529                	li	a0,10
    80017158:	4dd020ef          	jal	80019e34 <putchar>
    8001715c:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80017160:	00006597          	auipc	a1,0x6
    80017164:	97058593          	add	a1,a1,-1680 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80017168:	c491                	beqz	s1,80017174 <store_access_fault_2+0x124>
    8001716a:	6418                	ld	a4,8(s0)
    8001716c:	479d                	li	a5,7
    8001716e:	02f70563          	beq	a4,a5,80017198 <store_access_fault_2+0x148>
    80017172:	4481                	li	s1,0
    TEST_END();
    80017174:	00006517          	auipc	a0,0x6
    80017178:	a0450513          	add	a0,a0,-1532 # 8001cb78 <__func__.1+0x380>
    8001717c:	5e7030ef          	jal	8001af62 <printf>
    80017180:	4511                	li	a0,4
    80017182:	95de90ef          	jal	80000ade <goto_priv>
    80017186:	9a0ea0ef          	jal	80001326 <reset_state>
}
    8001718a:	60e2                	ld	ra,24(sp)
    8001718c:	6442                	ld	s0,16(sp)
    8001718e:	6902                	ld	s2,0(sp)
    80017190:	8526                	mv	a0,s1
    80017192:	64a2                	ld	s1,8(sp)
    80017194:	6105                	add	sp,sp,32
    80017196:	8082                	ret
    TEST_END();
    80017198:	00006597          	auipc	a1,0x6
    8001719c:	92858593          	add	a1,a1,-1752 # 8001cac0 <__func__.1+0x2c8>
    800171a0:	bfd1                	j	80017174 <store_access_fault_2+0x124>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    800171a2:	00006597          	auipc	a1,0x6
    800171a6:	91e58593          	add	a1,a1,-1762 # 8001cac0 <__func__.1+0x2c8>
    800171aa:	bfbd                	j	80017128 <store_access_fault_2+0xd8>

00000000800171ac <store_access_fault_3>:


bool store_access_fault_3(){
    800171ac:	1101                	add	sp,sp,-32

    TEST_START();
    800171ae:	00005597          	auipc	a1,0x5
    800171b2:	2fa58593          	add	a1,a1,762 # 8001c4a8 <__func__.27>
    800171b6:	00006517          	auipc	a0,0x6
    800171ba:	92a50513          	add	a0,a0,-1750 # 8001cae0 <__func__.1+0x2e8>
bool store_access_fault_3(){
    800171be:	ec06                	sd	ra,24(sp)
    800171c0:	e822                	sd	s0,16(sp)
    800171c2:	e426                	sd	s1,8(sp)
    800171c4:	e04a                	sd	s2,0(sp)
    TEST_START();
    800171c6:	59d030ef          	jal	8001af62 <printf>
    800171ca:	4529                	li	a0,10
    800171cc:	469020ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    800171d0:	4511                	li	a0,4
    800171d2:	90de90ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    800171d6:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    800171da:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    800171de:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    800171e2:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    800171e6:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    800171ea:	08000793          	li	a5,128
    800171ee:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    800171f2:	10000793          	li	a5,256
    800171f6:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    800171fa:	20000793          	li	a5,512
    800171fe:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80017202:	40000493          	li	s1,1024
    80017206:	3a04a073          	csrs	pmpcfg0,s1
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001720a:	6785                	lui	a5,0x1
    8001720c:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80017210:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80017214:	67a1                	lui	a5,0x8
    80017216:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001721a:	4905                	li	s2,1
    8001721c:	01f91793          	sll	a5,s2,0x1f
    80017220:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80017224:	08100793          	li	a5,129
    80017228:	07e2                	sll	a5,a5,0x18
    8001722a:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HU);
    8001722e:	4505                	li	a0,1
    80017230:	8afe90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80017234:	0ff0000f          	fence
    80017238:	00026417          	auipc	s0,0x26
    8001723c:	dd840413          	add	s0,s0,-552 # 8003d010 <excpt>
    80017240:	01241023          	sh	s2,0(s0)
    80017244:	00026797          	auipc	a5,0x26
    80017248:	e007b223          	sd	zero,-508(a5) # 8003d048 <excpt+0x38>
    8001724c:	0ff0000f          	fence
    80017250:	4781                	li	a5,0
    80017252:	00f48023          	sb	a5,0(s1)
    
    sb(0x80000100 << 2, 0x0);

    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80017256:	08200593          	li	a1,130
    8001725a:	0000b617          	auipc	a2,0xb
    8001725e:	4d660613          	add	a2,a2,1238 # 80022730 <__func__.1+0x5f38>
    80017262:	00006517          	auipc	a0,0x6
    80017266:	89650513          	add	a0,a0,-1898 # 8001caf8 <__func__.1+0x300>
    8001726a:	4f9030ef          	jal	8001af62 <printf>
    8001726e:	00144783          	lbu	a5,1(s0)
    80017272:	00006597          	auipc	a1,0x6
    80017276:	85e58593          	add	a1,a1,-1954 # 8001cad0 <__func__.1+0x2d8>
    8001727a:	c789                	beqz	a5,80017284 <store_access_fault_3+0xd8>
    8001727c:	6418                	ld	a4,8(s0)
    8001727e:	479d                	li	a5,7
    80017280:	06f70f63          	beq	a4,a5,800172fe <store_access_fault_3+0x152>
    80017284:	00006517          	auipc	a0,0x6
    80017288:	88c50513          	add	a0,a0,-1908 # 8001cb10 <__func__.1+0x318>
    8001728c:	4d7030ef          	jal	8001af62 <printf>
    80017290:	00144783          	lbu	a5,1(s0)
    80017294:	c789                	beqz	a5,8001729e <store_access_fault_3+0xf2>
    80017296:	6418                	ld	a4,8(s0)
    80017298:	479d                	li	a5,7
    8001729a:	00f70c63          	beq	a4,a5,800172b2 <store_access_fault_3+0x106>
    8001729e:	00006517          	auipc	a0,0x6
    800172a2:	87a50513          	add	a0,a0,-1926 # 8001cb18 <__func__.1+0x320>
    800172a6:	4bd030ef          	jal	8001af62 <printf>
    800172aa:	02900513          	li	a0,41
    800172ae:	387020ef          	jal	80019e34 <putchar>
    800172b2:	4529                	li	a0,10
    800172b4:	381020ef          	jal	80019e34 <putchar>
    800172b8:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    800172bc:	00006597          	auipc	a1,0x6
    800172c0:	81458593          	add	a1,a1,-2028 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    800172c4:	c491                	beqz	s1,800172d0 <store_access_fault_3+0x124>
    800172c6:	6418                	ld	a4,8(s0)
    800172c8:	479d                	li	a5,7
    800172ca:	02f70563          	beq	a4,a5,800172f4 <store_access_fault_3+0x148>
    800172ce:	4481                	li	s1,0
    TEST_END();
    800172d0:	00006517          	auipc	a0,0x6
    800172d4:	8a850513          	add	a0,a0,-1880 # 8001cb78 <__func__.1+0x380>
    800172d8:	48b030ef          	jal	8001af62 <printf>
    800172dc:	4511                	li	a0,4
    800172de:	801e90ef          	jal	80000ade <goto_priv>
    800172e2:	844ea0ef          	jal	80001326 <reset_state>
}
    800172e6:	60e2                	ld	ra,24(sp)
    800172e8:	6442                	ld	s0,16(sp)
    800172ea:	6902                	ld	s2,0(sp)
    800172ec:	8526                	mv	a0,s1
    800172ee:	64a2                	ld	s1,8(sp)
    800172f0:	6105                	add	sp,sp,32
    800172f2:	8082                	ret
    TEST_END();
    800172f4:	00005597          	auipc	a1,0x5
    800172f8:	7cc58593          	add	a1,a1,1996 # 8001cac0 <__func__.1+0x2c8>
    800172fc:	bfd1                	j	800172d0 <store_access_fault_3+0x124>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    800172fe:	00005597          	auipc	a1,0x5
    80017302:	7c258593          	add	a1,a1,1986 # 8001cac0 <__func__.1+0x2c8>
    80017306:	bfbd                	j	80017284 <store_access_fault_3+0xd8>

0000000080017308 <store_access_fault_4>:

bool store_access_fault_4(){
    80017308:	1101                	add	sp,sp,-32

    TEST_START();
    8001730a:	00005597          	auipc	a1,0x5
    8001730e:	1b658593          	add	a1,a1,438 # 8001c4c0 <__func__.26>
    80017312:	00005517          	auipc	a0,0x5
    80017316:	7ce50513          	add	a0,a0,1998 # 8001cae0 <__func__.1+0x2e8>
bool store_access_fault_4(){
    8001731a:	ec06                	sd	ra,24(sp)
    8001731c:	e822                	sd	s0,16(sp)
    8001731e:	e426                	sd	s1,8(sp)
    80017320:	e04a                	sd	s2,0(sp)
    TEST_START();
    80017322:	441030ef          	jal	8001af62 <printf>
    80017326:	4529                	li	a0,10
    80017328:	30d020ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    8001732c:	4511                	li	a0,4
    8001732e:	fb0e90ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80017332:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80017336:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001733a:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001733e:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80017342:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80017346:	08000793          	li	a5,128
    8001734a:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001734e:	10000793          	li	a5,256
    80017352:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80017356:	20000793          	li	a5,512
    8001735a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001735e:	40000493          	li	s1,1024
    80017362:	3a04a073          	csrs	pmpcfg0,s1
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80017366:	6785                	lui	a5,0x1
    80017368:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001736c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80017370:	67a1                	lui	a5,0x8
    80017372:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80017376:	4905                	li	s2,1
    80017378:	01f91793          	sll	a5,s2,0x1f
    8001737c:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80017380:	08100793          	li	a5,129
    80017384:	07e2                	sll	a5,a5,0x18
    80017386:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_VU);
    8001738a:	4501                	li	a0,0
    8001738c:	f52e90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80017390:	0ff0000f          	fence
    80017394:	00026417          	auipc	s0,0x26
    80017398:	c7c40413          	add	s0,s0,-900 # 8003d010 <excpt>
    8001739c:	01241023          	sh	s2,0(s0)
    800173a0:	00026797          	auipc	a5,0x26
    800173a4:	ca07b423          	sd	zero,-856(a5) # 8003d048 <excpt+0x38>
    800173a8:	0ff0000f          	fence
    800173ac:	4781                	li	a5,0
    800173ae:	00f48023          	sb	a5,0(s1)
    
    sb(0x80000100 << 2, 0x0);

    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    800173b2:	08200593          	li	a1,130
    800173b6:	0000b617          	auipc	a2,0xb
    800173ba:	3b260613          	add	a2,a2,946 # 80022768 <__func__.1+0x5f70>
    800173be:	00005517          	auipc	a0,0x5
    800173c2:	73a50513          	add	a0,a0,1850 # 8001caf8 <__func__.1+0x300>
    800173c6:	39d030ef          	jal	8001af62 <printf>
    800173ca:	00144783          	lbu	a5,1(s0)
    800173ce:	00005597          	auipc	a1,0x5
    800173d2:	70258593          	add	a1,a1,1794 # 8001cad0 <__func__.1+0x2d8>
    800173d6:	c789                	beqz	a5,800173e0 <store_access_fault_4+0xd8>
    800173d8:	6418                	ld	a4,8(s0)
    800173da:	479d                	li	a5,7
    800173dc:	06f70f63          	beq	a4,a5,8001745a <store_access_fault_4+0x152>
    800173e0:	00005517          	auipc	a0,0x5
    800173e4:	73050513          	add	a0,a0,1840 # 8001cb10 <__func__.1+0x318>
    800173e8:	37b030ef          	jal	8001af62 <printf>
    800173ec:	00144783          	lbu	a5,1(s0)
    800173f0:	c789                	beqz	a5,800173fa <store_access_fault_4+0xf2>
    800173f2:	6418                	ld	a4,8(s0)
    800173f4:	479d                	li	a5,7
    800173f6:	00f70c63          	beq	a4,a5,8001740e <store_access_fault_4+0x106>
    800173fa:	00005517          	auipc	a0,0x5
    800173fe:	71e50513          	add	a0,a0,1822 # 8001cb18 <__func__.1+0x320>
    80017402:	361030ef          	jal	8001af62 <printf>
    80017406:	02900513          	li	a0,41
    8001740a:	22b020ef          	jal	80019e34 <putchar>
    8001740e:	4529                	li	a0,10
    80017410:	225020ef          	jal	80019e34 <putchar>
    80017414:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80017418:	00005597          	auipc	a1,0x5
    8001741c:	6b858593          	add	a1,a1,1720 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80017420:	c491                	beqz	s1,8001742c <store_access_fault_4+0x124>
    80017422:	6418                	ld	a4,8(s0)
    80017424:	479d                	li	a5,7
    80017426:	02f70563          	beq	a4,a5,80017450 <store_access_fault_4+0x148>
    8001742a:	4481                	li	s1,0
    TEST_END();
    8001742c:	00005517          	auipc	a0,0x5
    80017430:	74c50513          	add	a0,a0,1868 # 8001cb78 <__func__.1+0x380>
    80017434:	32f030ef          	jal	8001af62 <printf>
    80017438:	4511                	li	a0,4
    8001743a:	ea4e90ef          	jal	80000ade <goto_priv>
    8001743e:	ee9e90ef          	jal	80001326 <reset_state>
}
    80017442:	60e2                	ld	ra,24(sp)
    80017444:	6442                	ld	s0,16(sp)
    80017446:	6902                	ld	s2,0(sp)
    80017448:	8526                	mv	a0,s1
    8001744a:	64a2                	ld	s1,8(sp)
    8001744c:	6105                	add	sp,sp,32
    8001744e:	8082                	ret
    TEST_END();
    80017450:	00005597          	auipc	a1,0x5
    80017454:	67058593          	add	a1,a1,1648 # 8001cac0 <__func__.1+0x2c8>
    80017458:	bfd1                	j	8001742c <store_access_fault_4+0x124>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001745a:	00005597          	auipc	a1,0x5
    8001745e:	66658593          	add	a1,a1,1638 # 8001cac0 <__func__.1+0x2c8>
    80017462:	bfbd                	j	800173e0 <store_access_fault_4+0xd8>

0000000080017464 <store_access_fault_5>:

bool store_access_fault_5(){
    80017464:	1141                	add	sp,sp,-16

    TEST_START();
    80017466:	00005597          	auipc	a1,0x5
    8001746a:	07258593          	add	a1,a1,114 # 8001c4d8 <__func__.25>
    8001746e:	00005517          	auipc	a0,0x5
    80017472:	67250513          	add	a0,a0,1650 # 8001cae0 <__func__.1+0x2e8>
bool store_access_fault_5(){
    80017476:	e406                	sd	ra,8(sp)
    80017478:	e022                	sd	s0,0(sp)
    TEST_START();
    8001747a:	2e9030ef          	jal	8001af62 <printf>
    8001747e:	4529                	li	a0,10
    80017480:	1b5020ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    80017484:	4511                	li	a0,4
    80017486:	e58e90ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001748a:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001748e:	10000793          	li	a5,256
    80017492:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80017496:	20000793          	li	a5,512
    8001749a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001749e:	40000713          	li	a4,1024
    800174a2:	3a072073          	csrs	pmpcfg0,a4
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    800174a6:	6785                	lui	a5,0x1
    800174a8:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800174ac:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    800174b0:	4685                	li	a3,1
    800174b2:	01f69793          	sll	a5,a3,0x1f
    800174b6:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    800174ba:	08100793          	li	a5,129
    800174be:	07e2                	sll	a5,a5,0x18
    800174c0:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    800174c4:	67a1                	lui	a5,0x8
    800174c6:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    800174ca:	0ff0000f          	fence
    800174ce:	00026417          	auipc	s0,0x26
    800174d2:	b4240413          	add	s0,s0,-1214 # 8003d010 <excpt>
    800174d6:	00d41023          	sh	a3,0(s0)
    800174da:	00026797          	auipc	a5,0x26
    800174de:	b607b723          	sd	zero,-1170(a5) # 8003d048 <excpt+0x38>
    800174e2:	0ff0000f          	fence
    800174e6:	4781                	li	a5,0
    800174e8:	00f70023          	sb	a5,0(a4)
    
    sb(0x80000100 << 2, 0x0);

    printf("%d\n",excpt.triggered);
    800174ec:	00144583          	lbu	a1,1(s0)
    800174f0:	00006517          	auipc	a0,0x6
    800174f4:	fb050513          	add	a0,a0,-80 # 8001d4a0 <__func__.1+0xca8>
    800174f8:	26b030ef          	jal	8001af62 <printf>
    printf("%d\n",excpt.cause);
    800174fc:	640c                	ld	a1,8(s0)
    800174fe:	00006517          	auipc	a0,0x6
    80017502:	fa250513          	add	a0,a0,-94 # 8001d4a0 <__func__.1+0xca8>
    80017506:	25d030ef          	jal	8001af62 <printf>

    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001750a:	08200593          	li	a1,130
    8001750e:	0000b617          	auipc	a2,0xb
    80017512:	29260613          	add	a2,a2,658 # 800227a0 <__func__.1+0x5fa8>
    80017516:	00005517          	auipc	a0,0x5
    8001751a:	5e250513          	add	a0,a0,1506 # 8001caf8 <__func__.1+0x300>
    8001751e:	245030ef          	jal	8001af62 <printf>
    80017522:	00144783          	lbu	a5,1(s0)
    80017526:	00005597          	auipc	a1,0x5
    8001752a:	59a58593          	add	a1,a1,1434 # 8001cac0 <__func__.1+0x2c8>
    8001752e:	c789                	beqz	a5,80017538 <store_access_fault_5+0xd4>
    80017530:	00005597          	auipc	a1,0x5
    80017534:	5a058593          	add	a1,a1,1440 # 8001cad0 <__func__.1+0x2d8>
    80017538:	00005517          	auipc	a0,0x5
    8001753c:	5d850513          	add	a0,a0,1496 # 8001cb10 <__func__.1+0x318>
    80017540:	223030ef          	jal	8001af62 <printf>
    80017544:	00144783          	lbu	a5,1(s0)
    80017548:	e3b1                	bnez	a5,8001758c <store_access_fault_5+0x128>
    8001754a:	4529                	li	a0,10
    8001754c:	0e9020ef          	jal	80019e34 <putchar>
    80017550:	00144783          	lbu	a5,1(s0)
    80017554:	e795                	bnez	a5,80017580 <store_access_fault_5+0x11c>
    80017556:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    80017558:	00005597          	auipc	a1,0x5
    8001755c:	56858593          	add	a1,a1,1384 # 8001cac0 <__func__.1+0x2c8>
    80017560:	00005517          	auipc	a0,0x5
    80017564:	61850513          	add	a0,a0,1560 # 8001cb78 <__func__.1+0x380>
    80017568:	1fb030ef          	jal	8001af62 <printf>
    8001756c:	4511                	li	a0,4
    8001756e:	d70e90ef          	jal	80000ade <goto_priv>
    80017572:	db5e90ef          	jal	80001326 <reset_state>
}
    80017576:	60a2                	ld	ra,8(sp)
    80017578:	8522                	mv	a0,s0
    8001757a:	6402                	ld	s0,0(sp)
    8001757c:	0141                	add	sp,sp,16
    8001757e:	8082                	ret
    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    80017580:	4401                	li	s0,0
    TEST_END();
    80017582:	00005597          	auipc	a1,0x5
    80017586:	54e58593          	add	a1,a1,1358 # 8001cad0 <__func__.1+0x2d8>
    8001758a:	bfd9                	j	80017560 <store_access_fault_5+0xfc>
    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001758c:	00005517          	auipc	a0,0x5
    80017590:	58c50513          	add	a0,a0,1420 # 8001cb18 <__func__.1+0x320>
    80017594:	1cf030ef          	jal	8001af62 <printf>
    80017598:	02900513          	li	a0,41
    8001759c:	099020ef          	jal	80019e34 <putchar>
    800175a0:	b76d                	j	8001754a <store_access_fault_5+0xe6>

00000000800175a2 <store_access_fault_6>:


bool store_access_fault_6(){
    800175a2:	1101                	add	sp,sp,-32

    TEST_START();
    800175a4:	00005597          	auipc	a1,0x5
    800175a8:	f4c58593          	add	a1,a1,-180 # 8001c4f0 <__func__.24>
    800175ac:	00005517          	auipc	a0,0x5
    800175b0:	53450513          	add	a0,a0,1332 # 8001cae0 <__func__.1+0x2e8>
bool store_access_fault_6(){
    800175b4:	ec06                	sd	ra,24(sp)
    800175b6:	e822                	sd	s0,16(sp)
    800175b8:	e426                	sd	s1,8(sp)
    800175ba:	e04a                	sd	s2,0(sp)
    TEST_START();
    800175bc:	1a7030ef          	jal	8001af62 <printf>
    800175c0:	4529                	li	a0,10
    800175c2:	073020ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    800175c6:	4511                	li	a0,4
    800175c8:	d16e90ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    800175cc:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    800175d0:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    800175d4:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    800175d8:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    800175dc:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    800175e0:	08000793          	li	a5,128
    800175e4:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    800175e8:	10000793          	li	a5,256
    800175ec:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    800175f0:	20000793          	li	a5,512
    800175f4:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    800175f8:	40000493          	li	s1,1024
    800175fc:	3a04a073          	csrs	pmpcfg0,s1
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80017600:	6785                	lui	a5,0x1
    80017602:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80017606:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001760a:	67a1                	lui	a5,0x8
    8001760c:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80017610:	4905                	li	s2,1
    80017612:	01f91793          	sll	a5,s2,0x1f
    80017616:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001761a:	08100793          	li	a5,129
    8001761e:	07e2                	sll	a5,a5,0x18
    80017620:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HS);
    80017624:	450d                	li	a0,3
    80017626:	cb8e90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001762a:	0ff0000f          	fence
    8001762e:	00026417          	auipc	s0,0x26
    80017632:	9e240413          	add	s0,s0,-1566 # 8003d010 <excpt>
    80017636:	01241023          	sh	s2,0(s0)
    8001763a:	00026797          	auipc	a5,0x26
    8001763e:	a007b723          	sd	zero,-1522(a5) # 8003d048 <excpt+0x38>
    80017642:	0ff0000f          	fence
    80017646:	4781                	li	a5,0
    80017648:	00f48023          	sb	a5,0(s1)
    
    sb(0x80000100 << 2, 0x0);

    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001764c:	08200593          	li	a1,130
    80017650:	0000b617          	auipc	a2,0xb
    80017654:	18860613          	add	a2,a2,392 # 800227d8 <__func__.1+0x5fe0>
    80017658:	00005517          	auipc	a0,0x5
    8001765c:	4a050513          	add	a0,a0,1184 # 8001caf8 <__func__.1+0x300>
    80017660:	103030ef          	jal	8001af62 <printf>
    80017664:	00144783          	lbu	a5,1(s0)
    80017668:	00005597          	auipc	a1,0x5
    8001766c:	46858593          	add	a1,a1,1128 # 8001cad0 <__func__.1+0x2d8>
    80017670:	c789                	beqz	a5,8001767a <store_access_fault_6+0xd8>
    80017672:	6418                	ld	a4,8(s0)
    80017674:	479d                	li	a5,7
    80017676:	06f70f63          	beq	a4,a5,800176f4 <store_access_fault_6+0x152>
    8001767a:	00005517          	auipc	a0,0x5
    8001767e:	49650513          	add	a0,a0,1174 # 8001cb10 <__func__.1+0x318>
    80017682:	0e1030ef          	jal	8001af62 <printf>
    80017686:	00144783          	lbu	a5,1(s0)
    8001768a:	c789                	beqz	a5,80017694 <store_access_fault_6+0xf2>
    8001768c:	6418                	ld	a4,8(s0)
    8001768e:	479d                	li	a5,7
    80017690:	00f70c63          	beq	a4,a5,800176a8 <store_access_fault_6+0x106>
    80017694:	00005517          	auipc	a0,0x5
    80017698:	48450513          	add	a0,a0,1156 # 8001cb18 <__func__.1+0x320>
    8001769c:	0c7030ef          	jal	8001af62 <printf>
    800176a0:	02900513          	li	a0,41
    800176a4:	790020ef          	jal	80019e34 <putchar>
    800176a8:	4529                	li	a0,10
    800176aa:	78a020ef          	jal	80019e34 <putchar>
    800176ae:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    800176b2:	00005597          	auipc	a1,0x5
    800176b6:	41e58593          	add	a1,a1,1054 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    800176ba:	c491                	beqz	s1,800176c6 <store_access_fault_6+0x124>
    800176bc:	6418                	ld	a4,8(s0)
    800176be:	479d                	li	a5,7
    800176c0:	02f70563          	beq	a4,a5,800176ea <store_access_fault_6+0x148>
    800176c4:	4481                	li	s1,0
    TEST_END();
    800176c6:	00005517          	auipc	a0,0x5
    800176ca:	4b250513          	add	a0,a0,1202 # 8001cb78 <__func__.1+0x380>
    800176ce:	095030ef          	jal	8001af62 <printf>
    800176d2:	4511                	li	a0,4
    800176d4:	c0ae90ef          	jal	80000ade <goto_priv>
    800176d8:	c4fe90ef          	jal	80001326 <reset_state>
}
    800176dc:	60e2                	ld	ra,24(sp)
    800176de:	6442                	ld	s0,16(sp)
    800176e0:	6902                	ld	s2,0(sp)
    800176e2:	8526                	mv	a0,s1
    800176e4:	64a2                	ld	s1,8(sp)
    800176e6:	6105                	add	sp,sp,32
    800176e8:	8082                	ret
    TEST_END();
    800176ea:	00005597          	auipc	a1,0x5
    800176ee:	3d658593          	add	a1,a1,982 # 8001cac0 <__func__.1+0x2c8>
    800176f2:	bfd1                	j	800176c6 <store_access_fault_6+0x124>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    800176f4:	00005597          	auipc	a1,0x5
    800176f8:	3cc58593          	add	a1,a1,972 # 8001cac0 <__func__.1+0x2c8>
    800176fc:	bfbd                	j	8001767a <store_access_fault_6+0xd8>

00000000800176fe <store_access_fault_7>:


bool store_access_fault_7(){
    800176fe:	1101                	add	sp,sp,-32

    TEST_START();
    80017700:	00005597          	auipc	a1,0x5
    80017704:	e0858593          	add	a1,a1,-504 # 8001c508 <__func__.23>
    80017708:	00005517          	auipc	a0,0x5
    8001770c:	3d850513          	add	a0,a0,984 # 8001cae0 <__func__.1+0x2e8>
bool store_access_fault_7(){
    80017710:	ec06                	sd	ra,24(sp)
    80017712:	e822                	sd	s0,16(sp)
    80017714:	e426                	sd	s1,8(sp)
    80017716:	e04a                	sd	s2,0(sp)
    TEST_START();
    80017718:	04b030ef          	jal	8001af62 <printf>
    8001771c:	4529                	li	a0,10
    8001771e:	716020ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    80017722:	4511                	li	a0,4
    80017724:	bbae90ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80017728:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001772c:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80017730:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80017734:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80017738:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001773c:	08000793          	li	a5,128
    80017740:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80017744:	10000793          	li	a5,256
    80017748:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001774c:	20000793          	li	a5,512
    80017750:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80017754:	40000493          	li	s1,1024
    80017758:	3a04a073          	csrs	pmpcfg0,s1
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001775c:	6785                	lui	a5,0x1
    8001775e:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80017762:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80017766:	67a1                	lui	a5,0x8
    80017768:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001776c:	4905                	li	s2,1
    8001776e:	01f91793          	sll	a5,s2,0x1f
    80017772:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80017776:	08100793          	li	a5,129
    8001777a:	07e2                	sll	a5,a5,0x18
    8001777c:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HU);
    80017780:	4505                	li	a0,1
    80017782:	b5ce90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80017786:	0ff0000f          	fence
    8001778a:	00026417          	auipc	s0,0x26
    8001778e:	88640413          	add	s0,s0,-1914 # 8003d010 <excpt>
    80017792:	01241023          	sh	s2,0(s0)
    80017796:	00026797          	auipc	a5,0x26
    8001779a:	8a07b923          	sd	zero,-1870(a5) # 8003d048 <excpt+0x38>
    8001779e:	0ff0000f          	fence
    800177a2:	4781                	li	a5,0
    800177a4:	00f48023          	sb	a5,0(s1)
    
    sb(0x80000100 << 2, 0x0);

    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    800177a8:	08200593          	li	a1,130
    800177ac:	0000b617          	auipc	a2,0xb
    800177b0:	06460613          	add	a2,a2,100 # 80022810 <__func__.1+0x6018>
    800177b4:	00005517          	auipc	a0,0x5
    800177b8:	34450513          	add	a0,a0,836 # 8001caf8 <__func__.1+0x300>
    800177bc:	7a6030ef          	jal	8001af62 <printf>
    800177c0:	00144783          	lbu	a5,1(s0)
    800177c4:	00005597          	auipc	a1,0x5
    800177c8:	30c58593          	add	a1,a1,780 # 8001cad0 <__func__.1+0x2d8>
    800177cc:	c789                	beqz	a5,800177d6 <store_access_fault_7+0xd8>
    800177ce:	6418                	ld	a4,8(s0)
    800177d0:	479d                	li	a5,7
    800177d2:	06f70f63          	beq	a4,a5,80017850 <store_access_fault_7+0x152>
    800177d6:	00005517          	auipc	a0,0x5
    800177da:	33a50513          	add	a0,a0,826 # 8001cb10 <__func__.1+0x318>
    800177de:	784030ef          	jal	8001af62 <printf>
    800177e2:	00144783          	lbu	a5,1(s0)
    800177e6:	c789                	beqz	a5,800177f0 <store_access_fault_7+0xf2>
    800177e8:	6418                	ld	a4,8(s0)
    800177ea:	479d                	li	a5,7
    800177ec:	00f70c63          	beq	a4,a5,80017804 <store_access_fault_7+0x106>
    800177f0:	00005517          	auipc	a0,0x5
    800177f4:	32850513          	add	a0,a0,808 # 8001cb18 <__func__.1+0x320>
    800177f8:	76a030ef          	jal	8001af62 <printf>
    800177fc:	02900513          	li	a0,41
    80017800:	634020ef          	jal	80019e34 <putchar>
    80017804:	4529                	li	a0,10
    80017806:	62e020ef          	jal	80019e34 <putchar>
    8001780a:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001780e:	00005597          	auipc	a1,0x5
    80017812:	2c258593          	add	a1,a1,706 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    80017816:	c491                	beqz	s1,80017822 <store_access_fault_7+0x124>
    80017818:	6418                	ld	a4,8(s0)
    8001781a:	479d                	li	a5,7
    8001781c:	02f70563          	beq	a4,a5,80017846 <store_access_fault_7+0x148>
    80017820:	4481                	li	s1,0
    TEST_END();
    80017822:	00005517          	auipc	a0,0x5
    80017826:	35650513          	add	a0,a0,854 # 8001cb78 <__func__.1+0x380>
    8001782a:	738030ef          	jal	8001af62 <printf>
    8001782e:	4511                	li	a0,4
    80017830:	aaee90ef          	jal	80000ade <goto_priv>
    80017834:	af3e90ef          	jal	80001326 <reset_state>
}
    80017838:	60e2                	ld	ra,24(sp)
    8001783a:	6442                	ld	s0,16(sp)
    8001783c:	6902                	ld	s2,0(sp)
    8001783e:	8526                	mv	a0,s1
    80017840:	64a2                	ld	s1,8(sp)
    80017842:	6105                	add	sp,sp,32
    80017844:	8082                	ret
    TEST_END();
    80017846:	00005597          	auipc	a1,0x5
    8001784a:	27a58593          	add	a1,a1,634 # 8001cac0 <__func__.1+0x2c8>
    8001784e:	bfd1                	j	80017822 <store_access_fault_7+0x124>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    80017850:	00005597          	auipc	a1,0x5
    80017854:	27058593          	add	a1,a1,624 # 8001cac0 <__func__.1+0x2c8>
    80017858:	bfbd                	j	800177d6 <store_access_fault_7+0xd8>

000000008001785a <store_access_fault_8>:

bool store_access_fault_8(){
    8001785a:	1101                	add	sp,sp,-32

    TEST_START();
    8001785c:	00005597          	auipc	a1,0x5
    80017860:	cc458593          	add	a1,a1,-828 # 8001c520 <__func__.22>
    80017864:	00005517          	auipc	a0,0x5
    80017868:	27c50513          	add	a0,a0,636 # 8001cae0 <__func__.1+0x2e8>
bool store_access_fault_8(){
    8001786c:	ec06                	sd	ra,24(sp)
    8001786e:	e822                	sd	s0,16(sp)
    80017870:	e426                	sd	s1,8(sp)
    80017872:	e04a                	sd	s2,0(sp)
    TEST_START();
    80017874:	6ee030ef          	jal	8001af62 <printf>
    80017878:	4529                	li	a0,10
    8001787a:	5ba020ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    8001787e:	4511                	li	a0,4
    80017880:	a5ee90ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80017884:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80017888:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001788c:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80017890:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80017894:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80017898:	08000793          	li	a5,128
    8001789c:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    800178a0:	10000793          	li	a5,256
    800178a4:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    800178a8:	20000793          	li	a5,512
    800178ac:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    800178b0:	40000493          	li	s1,1024
    800178b4:	3a04a073          	csrs	pmpcfg0,s1
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    800178b8:	6785                	lui	a5,0x1
    800178ba:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800178be:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    800178c2:	67a1                	lui	a5,0x8
    800178c4:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    800178c8:	4905                	li	s2,1
    800178ca:	01f91793          	sll	a5,s2,0x1f
    800178ce:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    800178d2:	08100793          	li	a5,129
    800178d6:	07e2                	sll	a5,a5,0x18
    800178d8:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_VU);
    800178dc:	4501                	li	a0,0
    800178de:	a00e90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    800178e2:	0ff0000f          	fence
    800178e6:	00025417          	auipc	s0,0x25
    800178ea:	72a40413          	add	s0,s0,1834 # 8003d010 <excpt>
    800178ee:	01241023          	sh	s2,0(s0)
    800178f2:	00025797          	auipc	a5,0x25
    800178f6:	7407bb23          	sd	zero,1878(a5) # 8003d048 <excpt+0x38>
    800178fa:	0ff0000f          	fence
    800178fe:	4781                	li	a5,0
    80017900:	00f48023          	sb	a5,0(s1)
    
    sb(0x80000100 << 2, 0x0);

    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    80017904:	08200593          	li	a1,130
    80017908:	0000b617          	auipc	a2,0xb
    8001790c:	f4060613          	add	a2,a2,-192 # 80022848 <__func__.1+0x6050>
    80017910:	00005517          	auipc	a0,0x5
    80017914:	1e850513          	add	a0,a0,488 # 8001caf8 <__func__.1+0x300>
    80017918:	64a030ef          	jal	8001af62 <printf>
    8001791c:	00144783          	lbu	a5,1(s0)
    80017920:	00005597          	auipc	a1,0x5
    80017924:	1b058593          	add	a1,a1,432 # 8001cad0 <__func__.1+0x2d8>
    80017928:	c789                	beqz	a5,80017932 <store_access_fault_8+0xd8>
    8001792a:	6418                	ld	a4,8(s0)
    8001792c:	479d                	li	a5,7
    8001792e:	06f70f63          	beq	a4,a5,800179ac <store_access_fault_8+0x152>
    80017932:	00005517          	auipc	a0,0x5
    80017936:	1de50513          	add	a0,a0,478 # 8001cb10 <__func__.1+0x318>
    8001793a:	628030ef          	jal	8001af62 <printf>
    8001793e:	00144783          	lbu	a5,1(s0)
    80017942:	c789                	beqz	a5,8001794c <store_access_fault_8+0xf2>
    80017944:	6418                	ld	a4,8(s0)
    80017946:	479d                	li	a5,7
    80017948:	00f70c63          	beq	a4,a5,80017960 <store_access_fault_8+0x106>
    8001794c:	00005517          	auipc	a0,0x5
    80017950:	1cc50513          	add	a0,a0,460 # 8001cb18 <__func__.1+0x320>
    80017954:	60e030ef          	jal	8001af62 <printf>
    80017958:	02900513          	li	a0,41
    8001795c:	4d8020ef          	jal	80019e34 <putchar>
    80017960:	4529                	li	a0,10
    80017962:	4d2020ef          	jal	80019e34 <putchar>
    80017966:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001796a:	00005597          	auipc	a1,0x5
    8001796e:	16658593          	add	a1,a1,358 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    80017972:	c491                	beqz	s1,8001797e <store_access_fault_8+0x124>
    80017974:	6418                	ld	a4,8(s0)
    80017976:	479d                	li	a5,7
    80017978:	02f70563          	beq	a4,a5,800179a2 <store_access_fault_8+0x148>
    8001797c:	4481                	li	s1,0
    TEST_END();
    8001797e:	00005517          	auipc	a0,0x5
    80017982:	1fa50513          	add	a0,a0,506 # 8001cb78 <__func__.1+0x380>
    80017986:	5dc030ef          	jal	8001af62 <printf>
    8001798a:	4511                	li	a0,4
    8001798c:	952e90ef          	jal	80000ade <goto_priv>
    80017990:	997e90ef          	jal	80001326 <reset_state>
}
    80017994:	60e2                	ld	ra,24(sp)
    80017996:	6442                	ld	s0,16(sp)
    80017998:	6902                	ld	s2,0(sp)
    8001799a:	8526                	mv	a0,s1
    8001799c:	64a2                	ld	s1,8(sp)
    8001799e:	6105                	add	sp,sp,32
    800179a0:	8082                	ret
    TEST_END();
    800179a2:	00005597          	auipc	a1,0x5
    800179a6:	11e58593          	add	a1,a1,286 # 8001cac0 <__func__.1+0x2c8>
    800179aa:	bfd1                	j	8001797e <store_access_fault_8+0x124>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    800179ac:	00005597          	auipc	a1,0x5
    800179b0:	11458593          	add	a1,a1,276 # 8001cac0 <__func__.1+0x2c8>
    800179b4:	bfbd                	j	80017932 <store_access_fault_8+0xd8>

00000000800179b6 <store_access_fault_9>:

bool store_access_fault_9(){
    800179b6:	1101                	add	sp,sp,-32

    TEST_START();
    800179b8:	00005597          	auipc	a1,0x5
    800179bc:	b8058593          	add	a1,a1,-1152 # 8001c538 <__func__.21>
    800179c0:	00005517          	auipc	a0,0x5
    800179c4:	12050513          	add	a0,a0,288 # 8001cae0 <__func__.1+0x2e8>
bool store_access_fault_9(){
    800179c8:	ec06                	sd	ra,24(sp)
    800179ca:	e822                	sd	s0,16(sp)
    800179cc:	e426                	sd	s1,8(sp)
    TEST_START();
    800179ce:	594030ef          	jal	8001af62 <printf>
    800179d2:	4529                	li	a0,10
    800179d4:	460020ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    800179d8:	4511                	li	a0,4
    800179da:	904e90ef          	jal	80000ade <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    800179de:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    800179e2:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    800179e6:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    800179ea:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    800179ee:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    800179f2:	08000793          	li	a5,128
    800179f6:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    800179fa:	10000793          	li	a5,256
    800179fe:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80017a02:	20000793          	li	a5,512
    80017a06:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80017a0a:	40000793          	li	a5,1024
    80017a0e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80017a12:	6785                	lui	a5,0x1
    80017a14:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80017a18:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80017a1c:	67a1                	lui	a5,0x8
    80017a1e:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80017a22:	4405                	li	s0,1
    80017a24:	01f41793          	sll	a5,s0,0x1f
    80017a28:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80017a2c:	08100793          	li	a5,129
    80017a30:	07e2                	sll	a5,a5,0x18
    80017a32:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_VU);
    80017a36:	4501                	li	a0,0
    80017a38:	8a6e90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80017a3c:	0ff0000f          	fence
    80017a40:	00025497          	auipc	s1,0x25
    80017a44:	5d048493          	add	s1,s1,1488 # 8003d010 <excpt>
    80017a48:	00849023          	sh	s0,0(s1)
    80017a4c:	00025797          	auipc	a5,0x25
    80017a50:	5e07be23          	sd	zero,1532(a5) # 8003d048 <excpt+0x38>
    80017a54:	0ff0000f          	fence
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80017a58:	37ab77b7          	lui	a5,0x37ab7
    80017a5c:	140e                	sll	s0,s0,0x23
    80017a5e:	078a                	sll	a5,a5,0x2
    80017a60:	1461                	add	s0,s0,-8
    80017a62:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80017a66:	00f43023          	sd	a5,0(s0)
    
    sd(0x1fffffffe << 2 ,0xdeadbeef);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    80017a6a:	08200593          	li	a1,130
    80017a6e:	0000b617          	auipc	a2,0xb
    80017a72:	e1260613          	add	a2,a2,-494 # 80022880 <__func__.1+0x6088>
    80017a76:	00005517          	auipc	a0,0x5
    80017a7a:	08250513          	add	a0,a0,130 # 8001caf8 <__func__.1+0x300>
    80017a7e:	4e4030ef          	jal	8001af62 <printf>
    80017a82:	0014c783          	lbu	a5,1(s1)
    80017a86:	00005597          	auipc	a1,0x5
    80017a8a:	04a58593          	add	a1,a1,74 # 8001cad0 <__func__.1+0x2d8>
    80017a8e:	c789                	beqz	a5,80017a98 <store_access_fault_9+0xe2>
    80017a90:	6498                	ld	a4,8(s1)
    80017a92:	479d                	li	a5,7
    80017a94:	06f70e63          	beq	a4,a5,80017b10 <store_access_fault_9+0x15a>
    80017a98:	00005517          	auipc	a0,0x5
    80017a9c:	07850513          	add	a0,a0,120 # 8001cb10 <__func__.1+0x318>
    80017aa0:	4c2030ef          	jal	8001af62 <printf>
    80017aa4:	0014c783          	lbu	a5,1(s1)
    80017aa8:	c789                	beqz	a5,80017ab2 <store_access_fault_9+0xfc>
    80017aaa:	6498                	ld	a4,8(s1)
    80017aac:	479d                	li	a5,7
    80017aae:	00f70c63          	beq	a4,a5,80017ac6 <store_access_fault_9+0x110>
    80017ab2:	00005517          	auipc	a0,0x5
    80017ab6:	06650513          	add	a0,a0,102 # 8001cb18 <__func__.1+0x320>
    80017aba:	4a8030ef          	jal	8001af62 <printf>
    80017abe:	02900513          	li	a0,41
    80017ac2:	372020ef          	jal	80019e34 <putchar>
    80017ac6:	4529                	li	a0,10
    80017ac8:	36c020ef          	jal	80019e34 <putchar>
    80017acc:	0014c403          	lbu	s0,1(s1)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80017ad0:	00005597          	auipc	a1,0x5
    80017ad4:	00058593          	mv	a1,a1
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    80017ad8:	c411                	beqz	s0,80017ae4 <store_access_fault_9+0x12e>
    80017ada:	6498                	ld	a4,8(s1)
    80017adc:	479d                	li	a5,7
    80017ade:	02f70463          	beq	a4,a5,80017b06 <store_access_fault_9+0x150>
    80017ae2:	4401                	li	s0,0
    TEST_END();
    80017ae4:	00005517          	auipc	a0,0x5
    80017ae8:	09450513          	add	a0,a0,148 # 8001cb78 <__func__.1+0x380>
    80017aec:	476030ef          	jal	8001af62 <printf>
    80017af0:	4511                	li	a0,4
    80017af2:	fede80ef          	jal	80000ade <goto_priv>
    80017af6:	831e90ef          	jal	80001326 <reset_state>
}
    80017afa:	60e2                	ld	ra,24(sp)
    80017afc:	8522                	mv	a0,s0
    80017afe:	6442                	ld	s0,16(sp)
    80017b00:	64a2                	ld	s1,8(sp)
    80017b02:	6105                	add	sp,sp,32
    80017b04:	8082                	ret
    TEST_END();
    80017b06:	00005597          	auipc	a1,0x5
    80017b0a:	fba58593          	add	a1,a1,-70 # 8001cac0 <__func__.1+0x2c8>
    80017b0e:	bfd9                	j	80017ae4 <store_access_fault_9+0x12e>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    80017b10:	00005597          	auipc	a1,0x5
    80017b14:	fb058593          	add	a1,a1,-80 # 8001cac0 <__func__.1+0x2c8>
    80017b18:	b741                	j	80017a98 <store_access_fault_9+0xe2>

0000000080017b1a <store_access_fault_10>:


bool store_access_fault_10(){
    80017b1a:	1101                	add	sp,sp,-32

    TEST_START();
    80017b1c:	00005597          	auipc	a1,0x5
    80017b20:	a3458593          	add	a1,a1,-1484 # 8001c550 <__func__.20>
    80017b24:	00005517          	auipc	a0,0x5
    80017b28:	fbc50513          	add	a0,a0,-68 # 8001cae0 <__func__.1+0x2e8>
bool store_access_fault_10(){
    80017b2c:	ec06                	sd	ra,24(sp)
    80017b2e:	e822                	sd	s0,16(sp)
    80017b30:	e426                	sd	s1,8(sp)
    TEST_START();
    80017b32:	430030ef          	jal	8001af62 <printf>
    80017b36:	4529                	li	a0,10
    80017b38:	2fc020ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    80017b3c:	4511                	li	a0,4
    80017b3e:	fa1e80ef          	jal	80000ade <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80017b42:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80017b46:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80017b4a:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80017b4e:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80017b52:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80017b56:	08000793          	li	a5,128
    80017b5a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80017b5e:	4785                	li	a5,1
    80017b60:	01f79713          	sll	a4,a5,0x1f
    80017b64:	3b071073          	csrw	pmpaddr0,a4

    TEST_SETUP_EXCEPT();    
    80017b68:	0ff0000f          	fence
    80017b6c:	00025417          	auipc	s0,0x25
    80017b70:	4a440413          	add	s0,s0,1188 # 8003d010 <excpt>
    80017b74:	00f41023          	sh	a5,0(s0)
    80017b78:	00025797          	auipc	a5,0x25
    80017b7c:	4c07b823          	sd	zero,1232(a5) # 8003d048 <excpt+0x38>
    80017b80:	0ff0000f          	fence
    80017b84:	37ab77b7          	lui	a5,0x37ab7
    80017b88:	078a                	sll	a5,a5,0x2
    80017b8a:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80017b8e:	4701                	li	a4,0
    80017b90:	00f73023          	sd	a5,0(a4)
    
    sd(0x80000000 << 2,0xdeadbeef);

    printf("%d\n",excpt.triggered);
    80017b94:	00144583          	lbu	a1,1(s0)
    80017b98:	00006517          	auipc	a0,0x6
    80017b9c:	90850513          	add	a0,a0,-1784 # 8001d4a0 <__func__.1+0xca8>
    80017ba0:	3c2030ef          	jal	8001af62 <printf>
    printf("%d\n",excpt.cause);
    80017ba4:	640c                	ld	a1,8(s0)
    80017ba6:	00006517          	auipc	a0,0x6
    80017baa:	8fa50513          	add	a0,a0,-1798 # 8001d4a0 <__func__.1+0xca8>
    80017bae:	3b4030ef          	jal	8001af62 <printf>

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    80017bb2:	08200593          	li	a1,130
    80017bb6:	0000b617          	auipc	a2,0xb
    80017bba:	d3a60613          	add	a2,a2,-710 # 800228f0 <__func__.1+0x60f8>
    80017bbe:	00005517          	auipc	a0,0x5
    80017bc2:	f3a50513          	add	a0,a0,-198 # 8001caf8 <__func__.1+0x300>
    80017bc6:	39c030ef          	jal	8001af62 <printf>
    80017bca:	00144783          	lbu	a5,1(s0)
    80017bce:	00005597          	auipc	a1,0x5
    80017bd2:	f0258593          	add	a1,a1,-254 # 8001cad0 <__func__.1+0x2d8>
    80017bd6:	c789                	beqz	a5,80017be0 <store_access_fault_10+0xc6>
    80017bd8:	6418                	ld	a4,8(s0)
    80017bda:	479d                	li	a5,7
    80017bdc:	06f70e63          	beq	a4,a5,80017c58 <store_access_fault_10+0x13e>
    80017be0:	00005517          	auipc	a0,0x5
    80017be4:	f3050513          	add	a0,a0,-208 # 8001cb10 <__func__.1+0x318>
    80017be8:	37a030ef          	jal	8001af62 <printf>
    80017bec:	00144783          	lbu	a5,1(s0)
    80017bf0:	c789                	beqz	a5,80017bfa <store_access_fault_10+0xe0>
    80017bf2:	6418                	ld	a4,8(s0)
    80017bf4:	479d                	li	a5,7
    80017bf6:	00f70c63          	beq	a4,a5,80017c0e <store_access_fault_10+0xf4>
    80017bfa:	00005517          	auipc	a0,0x5
    80017bfe:	f1e50513          	add	a0,a0,-226 # 8001cb18 <__func__.1+0x320>
    80017c02:	360030ef          	jal	8001af62 <printf>
    80017c06:	02900513          	li	a0,41
    80017c0a:	22a020ef          	jal	80019e34 <putchar>
    80017c0e:	4529                	li	a0,10
    80017c10:	224020ef          	jal	80019e34 <putchar>
    80017c14:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80017c18:	00005597          	auipc	a1,0x5
    80017c1c:	eb858593          	add	a1,a1,-328 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    80017c20:	c491                	beqz	s1,80017c2c <store_access_fault_10+0x112>
    80017c22:	6418                	ld	a4,8(s0)
    80017c24:	479d                	li	a5,7
    80017c26:	02f70463          	beq	a4,a5,80017c4e <store_access_fault_10+0x134>
    80017c2a:	4481                	li	s1,0
    TEST_END();
    80017c2c:	00005517          	auipc	a0,0x5
    80017c30:	f4c50513          	add	a0,a0,-180 # 8001cb78 <__func__.1+0x380>
    80017c34:	32e030ef          	jal	8001af62 <printf>
    80017c38:	4511                	li	a0,4
    80017c3a:	ea5e80ef          	jal	80000ade <goto_priv>
    80017c3e:	ee8e90ef          	jal	80001326 <reset_state>
}
    80017c42:	60e2                	ld	ra,24(sp)
    80017c44:	6442                	ld	s0,16(sp)
    80017c46:	8526                	mv	a0,s1
    80017c48:	64a2                	ld	s1,8(sp)
    80017c4a:	6105                	add	sp,sp,32
    80017c4c:	8082                	ret
    TEST_END();
    80017c4e:	00005597          	auipc	a1,0x5
    80017c52:	e7258593          	add	a1,a1,-398 # 8001cac0 <__func__.1+0x2c8>
    80017c56:	bfd9                	j	80017c2c <store_access_fault_10+0x112>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    80017c58:	00005597          	auipc	a1,0x5
    80017c5c:	e6858593          	add	a1,a1,-408 # 8001cac0 <__func__.1+0x2c8>
    80017c60:	b741                	j	80017be0 <store_access_fault_10+0xc6>

0000000080017c62 <amo_access_fault_1>:




bool amo_access_fault_1(){
    80017c62:	1101                	add	sp,sp,-32

    TEST_START();
    80017c64:	00005597          	auipc	a1,0x5
    80017c68:	90458593          	add	a1,a1,-1788 # 8001c568 <__func__.19>
    80017c6c:	00005517          	auipc	a0,0x5
    80017c70:	e7450513          	add	a0,a0,-396 # 8001cae0 <__func__.1+0x2e8>
bool amo_access_fault_1(){
    80017c74:	ec06                	sd	ra,24(sp)
    80017c76:	e822                	sd	s0,16(sp)
    80017c78:	e426                	sd	s1,8(sp)
    TEST_START();
    80017c7a:	2e8030ef          	jal	8001af62 <printf>
    80017c7e:	4529                	li	a0,10
    80017c80:	1b4020ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    80017c84:	4511                	li	a0,4
    80017c86:	e59e80ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80017c8a:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80017c8e:	10000793          	li	a5,256
    80017c92:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80017c96:	20000793          	li	a5,512
    80017c9a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80017c9e:	40000713          	li	a4,1024
    80017ca2:	3a072073          	csrs	pmpcfg0,a4
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80017ca6:	6785                	lui	a5,0x1
    80017ca8:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80017cac:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80017cb0:	4685                	li	a3,1
    80017cb2:	01f69793          	sll	a5,a3,0x1f
    80017cb6:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80017cba:	08100793          	li	a5,129
    80017cbe:	07e2                	sll	a5,a5,0x18
    80017cc0:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80017cc4:	67a1                	lui	a5,0x8
    80017cc6:	3a07a073          	csrs	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    80017cca:	0ff0000f          	fence
    80017cce:	00025417          	auipc	s0,0x25
    80017cd2:	34240413          	add	s0,s0,834 # 8003d010 <excpt>
    80017cd6:	00d41023          	sh	a3,0(s0)
    80017cda:	00025797          	auipc	a5,0x25
    80017cde:	3607b723          	sd	zero,878(a5) # 8003d048 <excpt+0x38>
    80017ce2:	0ff0000f          	fence
AMO_INSTRUCTION(amoadd_d, "amoadd.d", uint64_t);
    80017ce6:	37ab77b7          	lui	a5,0x37ab7
    80017cea:	078a                	sll	a5,a5,0x2
    80017cec:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80017cf0:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100 << 2 , 0xdeadbeef);

    printf("%d\n",excpt.triggered);
    80017cf4:	00144583          	lbu	a1,1(s0)
    80017cf8:	00005517          	auipc	a0,0x5
    80017cfc:	7a850513          	add	a0,a0,1960 # 8001d4a0 <__func__.1+0xca8>
    80017d00:	262030ef          	jal	8001af62 <printf>
    printf("%d\n",excpt.cause);
    80017d04:	640c                	ld	a1,8(s0)
    80017d06:	00005517          	auipc	a0,0x5
    80017d0a:	79a50513          	add	a0,a0,1946 # 8001d4a0 <__func__.1+0xca8>
    80017d0e:	254030ef          	jal	8001af62 <printf>

    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80017d12:	08200593          	li	a1,130
    80017d16:	0000b617          	auipc	a2,0xb
    80017d1a:	c3a60613          	add	a2,a2,-966 # 80022950 <__func__.1+0x6158>
    80017d1e:	00005517          	auipc	a0,0x5
    80017d22:	dda50513          	add	a0,a0,-550 # 8001caf8 <__func__.1+0x300>
    80017d26:	23c030ef          	jal	8001af62 <printf>
    80017d2a:	00144783          	lbu	a5,1(s0)
    80017d2e:	00005597          	auipc	a1,0x5
    80017d32:	da258593          	add	a1,a1,-606 # 8001cad0 <__func__.1+0x2d8>
    80017d36:	c789                	beqz	a5,80017d40 <amo_access_fault_1+0xde>
    80017d38:	6418                	ld	a4,8(s0)
    80017d3a:	479d                	li	a5,7
    80017d3c:	06f70e63          	beq	a4,a5,80017db8 <amo_access_fault_1+0x156>
    80017d40:	00005517          	auipc	a0,0x5
    80017d44:	dd050513          	add	a0,a0,-560 # 8001cb10 <__func__.1+0x318>
    80017d48:	21a030ef          	jal	8001af62 <printf>
    80017d4c:	00144783          	lbu	a5,1(s0)
    80017d50:	c789                	beqz	a5,80017d5a <amo_access_fault_1+0xf8>
    80017d52:	6418                	ld	a4,8(s0)
    80017d54:	479d                	li	a5,7
    80017d56:	00f70c63          	beq	a4,a5,80017d6e <amo_access_fault_1+0x10c>
    80017d5a:	00005517          	auipc	a0,0x5
    80017d5e:	dbe50513          	add	a0,a0,-578 # 8001cb18 <__func__.1+0x320>
    80017d62:	200030ef          	jal	8001af62 <printf>
    80017d66:	02900513          	li	a0,41
    80017d6a:	0ca020ef          	jal	80019e34 <putchar>
    80017d6e:	4529                	li	a0,10
    80017d70:	0c4020ef          	jal	80019e34 <putchar>
    80017d74:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80017d78:	00005597          	auipc	a1,0x5
    80017d7c:	d5858593          	add	a1,a1,-680 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80017d80:	c491                	beqz	s1,80017d8c <amo_access_fault_1+0x12a>
    80017d82:	6418                	ld	a4,8(s0)
    80017d84:	479d                	li	a5,7
    80017d86:	02f70463          	beq	a4,a5,80017dae <amo_access_fault_1+0x14c>
    80017d8a:	4481                	li	s1,0
    TEST_END();
    80017d8c:	00005517          	auipc	a0,0x5
    80017d90:	dec50513          	add	a0,a0,-532 # 8001cb78 <__func__.1+0x380>
    80017d94:	1ce030ef          	jal	8001af62 <printf>
    80017d98:	4511                	li	a0,4
    80017d9a:	d45e80ef          	jal	80000ade <goto_priv>
    80017d9e:	d88e90ef          	jal	80001326 <reset_state>
}
    80017da2:	60e2                	ld	ra,24(sp)
    80017da4:	6442                	ld	s0,16(sp)
    80017da6:	8526                	mv	a0,s1
    80017da8:	64a2                	ld	s1,8(sp)
    80017daa:	6105                	add	sp,sp,32
    80017dac:	8082                	ret
    TEST_END();
    80017dae:	00005597          	auipc	a1,0x5
    80017db2:	d1258593          	add	a1,a1,-750 # 8001cac0 <__func__.1+0x2c8>
    80017db6:	bfd9                	j	80017d8c <amo_access_fault_1+0x12a>
    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80017db8:	00005597          	auipc	a1,0x5
    80017dbc:	d0858593          	add	a1,a1,-760 # 8001cac0 <__func__.1+0x2c8>
    80017dc0:	b741                	j	80017d40 <amo_access_fault_1+0xde>

0000000080017dc2 <amo_access_fault_2>:

bool amo_access_fault_2(){
    80017dc2:	1101                	add	sp,sp,-32

    TEST_START();
    80017dc4:	00004597          	auipc	a1,0x4
    80017dc8:	7bc58593          	add	a1,a1,1980 # 8001c580 <__func__.18>
    80017dcc:	00005517          	auipc	a0,0x5
    80017dd0:	d1450513          	add	a0,a0,-748 # 8001cae0 <__func__.1+0x2e8>
bool amo_access_fault_2(){
    80017dd4:	ec06                	sd	ra,24(sp)
    80017dd6:	e822                	sd	s0,16(sp)
    80017dd8:	e426                	sd	s1,8(sp)
    80017dda:	e04a                	sd	s2,0(sp)
    TEST_START();
    80017ddc:	186030ef          	jal	8001af62 <printf>
    80017de0:	4529                	li	a0,10
    80017de2:	052020ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    80017de6:	4511                	li	a0,4
    80017de8:	cf7e80ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80017dec:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80017df0:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80017df4:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80017df8:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80017dfc:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80017e00:	08000793          	li	a5,128
    80017e04:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80017e08:	10000793          	li	a5,256
    80017e0c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80017e10:	20000793          	li	a5,512
    80017e14:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80017e18:	40000493          	li	s1,1024
    80017e1c:	3a04a073          	csrs	pmpcfg0,s1
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80017e20:	6785                	lui	a5,0x1
    80017e22:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80017e26:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80017e2a:	67a1                	lui	a5,0x8
    80017e2c:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80017e30:	4905                	li	s2,1
    80017e32:	01f91793          	sll	a5,s2,0x1f
    80017e36:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80017e3a:	08100793          	li	a5,129
    80017e3e:	07e2                	sll	a5,a5,0x18
    80017e40:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HS);
    80017e44:	450d                	li	a0,3
    80017e46:	c99e80ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80017e4a:	0ff0000f          	fence
    80017e4e:	00025417          	auipc	s0,0x25
    80017e52:	1c240413          	add	s0,s0,450 # 8003d010 <excpt>
    80017e56:	01241023          	sh	s2,0(s0)
    80017e5a:	00025797          	auipc	a5,0x25
    80017e5e:	1e07b723          	sd	zero,494(a5) # 8003d048 <excpt+0x38>
    80017e62:	0ff0000f          	fence
    80017e66:	37ab77b7          	lui	a5,0x37ab7
    80017e6a:	078a                	sll	a5,a5,0x2
    80017e6c:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80017e70:	00f4b7af          	amoadd.d	a5,a5,(s1)
    
    amoadd_d(0x80000100 << 2 , 0xdeadbeef);

    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80017e74:	08200593          	li	a1,130
    80017e78:	0000b617          	auipc	a2,0xb
    80017e7c:	b1860613          	add	a2,a2,-1256 # 80022990 <__func__.1+0x6198>
    80017e80:	00005517          	auipc	a0,0x5
    80017e84:	c7850513          	add	a0,a0,-904 # 8001caf8 <__func__.1+0x300>
    80017e88:	0da030ef          	jal	8001af62 <printf>
    80017e8c:	00144783          	lbu	a5,1(s0)
    80017e90:	00005597          	auipc	a1,0x5
    80017e94:	c4058593          	add	a1,a1,-960 # 8001cad0 <__func__.1+0x2d8>
    80017e98:	c789                	beqz	a5,80017ea2 <amo_access_fault_2+0xe0>
    80017e9a:	6418                	ld	a4,8(s0)
    80017e9c:	479d                	li	a5,7
    80017e9e:	06f70f63          	beq	a4,a5,80017f1c <amo_access_fault_2+0x15a>
    80017ea2:	00005517          	auipc	a0,0x5
    80017ea6:	c6e50513          	add	a0,a0,-914 # 8001cb10 <__func__.1+0x318>
    80017eaa:	0b8030ef          	jal	8001af62 <printf>
    80017eae:	00144783          	lbu	a5,1(s0)
    80017eb2:	c789                	beqz	a5,80017ebc <amo_access_fault_2+0xfa>
    80017eb4:	6418                	ld	a4,8(s0)
    80017eb6:	479d                	li	a5,7
    80017eb8:	00f70c63          	beq	a4,a5,80017ed0 <amo_access_fault_2+0x10e>
    80017ebc:	00005517          	auipc	a0,0x5
    80017ec0:	c5c50513          	add	a0,a0,-932 # 8001cb18 <__func__.1+0x320>
    80017ec4:	09e030ef          	jal	8001af62 <printf>
    80017ec8:	02900513          	li	a0,41
    80017ecc:	769010ef          	jal	80019e34 <putchar>
    80017ed0:	4529                	li	a0,10
    80017ed2:	763010ef          	jal	80019e34 <putchar>
    80017ed6:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80017eda:	00005597          	auipc	a1,0x5
    80017ede:	bf658593          	add	a1,a1,-1034 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80017ee2:	c491                	beqz	s1,80017eee <amo_access_fault_2+0x12c>
    80017ee4:	6418                	ld	a4,8(s0)
    80017ee6:	479d                	li	a5,7
    80017ee8:	02f70563          	beq	a4,a5,80017f12 <amo_access_fault_2+0x150>
    80017eec:	4481                	li	s1,0
    TEST_END();
    80017eee:	00005517          	auipc	a0,0x5
    80017ef2:	c8a50513          	add	a0,a0,-886 # 8001cb78 <__func__.1+0x380>
    80017ef6:	06c030ef          	jal	8001af62 <printf>
    80017efa:	4511                	li	a0,4
    80017efc:	be3e80ef          	jal	80000ade <goto_priv>
    80017f00:	c26e90ef          	jal	80001326 <reset_state>
}
    80017f04:	60e2                	ld	ra,24(sp)
    80017f06:	6442                	ld	s0,16(sp)
    80017f08:	6902                	ld	s2,0(sp)
    80017f0a:	8526                	mv	a0,s1
    80017f0c:	64a2                	ld	s1,8(sp)
    80017f0e:	6105                	add	sp,sp,32
    80017f10:	8082                	ret
    TEST_END();
    80017f12:	00005597          	auipc	a1,0x5
    80017f16:	bae58593          	add	a1,a1,-1106 # 8001cac0 <__func__.1+0x2c8>
    80017f1a:	bfd1                	j	80017eee <amo_access_fault_2+0x12c>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80017f1c:	00005597          	auipc	a1,0x5
    80017f20:	ba458593          	add	a1,a1,-1116 # 8001cac0 <__func__.1+0x2c8>
    80017f24:	bfbd                	j	80017ea2 <amo_access_fault_2+0xe0>

0000000080017f26 <amo_access_fault_3>:


bool amo_access_fault_3(){
    80017f26:	1101                	add	sp,sp,-32

    TEST_START();
    80017f28:	00004597          	auipc	a1,0x4
    80017f2c:	67058593          	add	a1,a1,1648 # 8001c598 <__func__.17>
    80017f30:	00005517          	auipc	a0,0x5
    80017f34:	bb050513          	add	a0,a0,-1104 # 8001cae0 <__func__.1+0x2e8>
bool amo_access_fault_3(){
    80017f38:	ec06                	sd	ra,24(sp)
    80017f3a:	e822                	sd	s0,16(sp)
    80017f3c:	e426                	sd	s1,8(sp)
    80017f3e:	e04a                	sd	s2,0(sp)
    TEST_START();
    80017f40:	022030ef          	jal	8001af62 <printf>
    80017f44:	4529                	li	a0,10
    80017f46:	6ef010ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    80017f4a:	4511                	li	a0,4
    80017f4c:	b93e80ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80017f50:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80017f54:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80017f58:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80017f5c:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80017f60:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80017f64:	08000793          	li	a5,128
    80017f68:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80017f6c:	10000793          	li	a5,256
    80017f70:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80017f74:	20000793          	li	a5,512
    80017f78:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80017f7c:	40000493          	li	s1,1024
    80017f80:	3a04a073          	csrs	pmpcfg0,s1
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80017f84:	6785                	lui	a5,0x1
    80017f86:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80017f8a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80017f8e:	67a1                	lui	a5,0x8
    80017f90:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80017f94:	4905                	li	s2,1
    80017f96:	01f91793          	sll	a5,s2,0x1f
    80017f9a:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80017f9e:	08100793          	li	a5,129
    80017fa2:	07e2                	sll	a5,a5,0x18
    80017fa4:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HU);
    80017fa8:	4505                	li	a0,1
    80017faa:	b35e80ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80017fae:	0ff0000f          	fence
    80017fb2:	00025417          	auipc	s0,0x25
    80017fb6:	05e40413          	add	s0,s0,94 # 8003d010 <excpt>
    80017fba:	01241023          	sh	s2,0(s0)
    80017fbe:	00025797          	auipc	a5,0x25
    80017fc2:	0807b523          	sd	zero,138(a5) # 8003d048 <excpt+0x38>
    80017fc6:	0ff0000f          	fence
    80017fca:	37ab77b7          	lui	a5,0x37ab7
    80017fce:	078a                	sll	a5,a5,0x2
    80017fd0:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80017fd4:	00f4b7af          	amoadd.d	a5,a5,(s1)
    
    amoadd_d(0x80000100 << 2 , 0xdeadbeef);

    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80017fd8:	08200593          	li	a1,130
    80017fdc:	0000b617          	auipc	a2,0xb
    80017fe0:	9f460613          	add	a2,a2,-1548 # 800229d0 <__func__.1+0x61d8>
    80017fe4:	00005517          	auipc	a0,0x5
    80017fe8:	b1450513          	add	a0,a0,-1260 # 8001caf8 <__func__.1+0x300>
    80017fec:	777020ef          	jal	8001af62 <printf>
    80017ff0:	00144783          	lbu	a5,1(s0)
    80017ff4:	00005597          	auipc	a1,0x5
    80017ff8:	adc58593          	add	a1,a1,-1316 # 8001cad0 <__func__.1+0x2d8>
    80017ffc:	c789                	beqz	a5,80018006 <amo_access_fault_3+0xe0>
    80017ffe:	6418                	ld	a4,8(s0)
    80018000:	479d                	li	a5,7
    80018002:	06f70f63          	beq	a4,a5,80018080 <amo_access_fault_3+0x15a>
    80018006:	00005517          	auipc	a0,0x5
    8001800a:	b0a50513          	add	a0,a0,-1270 # 8001cb10 <__func__.1+0x318>
    8001800e:	755020ef          	jal	8001af62 <printf>
    80018012:	00144783          	lbu	a5,1(s0)
    80018016:	c789                	beqz	a5,80018020 <amo_access_fault_3+0xfa>
    80018018:	6418                	ld	a4,8(s0)
    8001801a:	479d                	li	a5,7
    8001801c:	00f70c63          	beq	a4,a5,80018034 <amo_access_fault_3+0x10e>
    80018020:	00005517          	auipc	a0,0x5
    80018024:	af850513          	add	a0,a0,-1288 # 8001cb18 <__func__.1+0x320>
    80018028:	73b020ef          	jal	8001af62 <printf>
    8001802c:	02900513          	li	a0,41
    80018030:	605010ef          	jal	80019e34 <putchar>
    80018034:	4529                	li	a0,10
    80018036:	5ff010ef          	jal	80019e34 <putchar>
    8001803a:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001803e:	00005597          	auipc	a1,0x5
    80018042:	a9258593          	add	a1,a1,-1390 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80018046:	c491                	beqz	s1,80018052 <amo_access_fault_3+0x12c>
    80018048:	6418                	ld	a4,8(s0)
    8001804a:	479d                	li	a5,7
    8001804c:	02f70563          	beq	a4,a5,80018076 <amo_access_fault_3+0x150>
    80018050:	4481                	li	s1,0
    TEST_END();
    80018052:	00005517          	auipc	a0,0x5
    80018056:	b2650513          	add	a0,a0,-1242 # 8001cb78 <__func__.1+0x380>
    8001805a:	709020ef          	jal	8001af62 <printf>
    8001805e:	4511                	li	a0,4
    80018060:	a7fe80ef          	jal	80000ade <goto_priv>
    80018064:	ac2e90ef          	jal	80001326 <reset_state>
}
    80018068:	60e2                	ld	ra,24(sp)
    8001806a:	6442                	ld	s0,16(sp)
    8001806c:	6902                	ld	s2,0(sp)
    8001806e:	8526                	mv	a0,s1
    80018070:	64a2                	ld	s1,8(sp)
    80018072:	6105                	add	sp,sp,32
    80018074:	8082                	ret
    TEST_END();
    80018076:	00005597          	auipc	a1,0x5
    8001807a:	a4a58593          	add	a1,a1,-1462 # 8001cac0 <__func__.1+0x2c8>
    8001807e:	bfd1                	j	80018052 <amo_access_fault_3+0x12c>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80018080:	00005597          	auipc	a1,0x5
    80018084:	a4058593          	add	a1,a1,-1472 # 8001cac0 <__func__.1+0x2c8>
    80018088:	bfbd                	j	80018006 <amo_access_fault_3+0xe0>

000000008001808a <amo_access_fault_4>:

bool amo_access_fault_4(){
    8001808a:	1101                	add	sp,sp,-32

    TEST_START();
    8001808c:	00004597          	auipc	a1,0x4
    80018090:	52458593          	add	a1,a1,1316 # 8001c5b0 <__func__.16>
    80018094:	00005517          	auipc	a0,0x5
    80018098:	a4c50513          	add	a0,a0,-1460 # 8001cae0 <__func__.1+0x2e8>
bool amo_access_fault_4(){
    8001809c:	ec06                	sd	ra,24(sp)
    8001809e:	e822                	sd	s0,16(sp)
    800180a0:	e426                	sd	s1,8(sp)
    800180a2:	e04a                	sd	s2,0(sp)
    TEST_START();
    800180a4:	6bf020ef          	jal	8001af62 <printf>
    800180a8:	4529                	li	a0,10
    800180aa:	58b010ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    800180ae:	4511                	li	a0,4
    800180b0:	a2fe80ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    800180b4:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    800180b8:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    800180bc:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    800180c0:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    800180c4:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    800180c8:	08000793          	li	a5,128
    800180cc:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    800180d0:	10000793          	li	a5,256
    800180d4:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    800180d8:	20000793          	li	a5,512
    800180dc:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    800180e0:	40000493          	li	s1,1024
    800180e4:	3a04a073          	csrs	pmpcfg0,s1
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    800180e8:	6785                	lui	a5,0x1
    800180ea:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800180ee:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    800180f2:	67a1                	lui	a5,0x8
    800180f4:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    800180f8:	4905                	li	s2,1
    800180fa:	01f91793          	sll	a5,s2,0x1f
    800180fe:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80018102:	08100793          	li	a5,129
    80018106:	07e2                	sll	a5,a5,0x18
    80018108:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_VU);
    8001810c:	4501                	li	a0,0
    8001810e:	9d1e80ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80018112:	0ff0000f          	fence
    80018116:	00025417          	auipc	s0,0x25
    8001811a:	efa40413          	add	s0,s0,-262 # 8003d010 <excpt>
    8001811e:	01241023          	sh	s2,0(s0)
    80018122:	00025797          	auipc	a5,0x25
    80018126:	f207b323          	sd	zero,-218(a5) # 8003d048 <excpt+0x38>
    8001812a:	0ff0000f          	fence
    8001812e:	37ab77b7          	lui	a5,0x37ab7
    80018132:	078a                	sll	a5,a5,0x2
    80018134:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018138:	00f4b7af          	amoadd.d	a5,a5,(s1)
    
    amoadd_d(0x80000100 << 2 , 0xdeadbeef);

    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001813c:	08200593          	li	a1,130
    80018140:	0000b617          	auipc	a2,0xb
    80018144:	8d060613          	add	a2,a2,-1840 # 80022a10 <__func__.1+0x6218>
    80018148:	00005517          	auipc	a0,0x5
    8001814c:	9b050513          	add	a0,a0,-1616 # 8001caf8 <__func__.1+0x300>
    80018150:	613020ef          	jal	8001af62 <printf>
    80018154:	00144783          	lbu	a5,1(s0)
    80018158:	00005597          	auipc	a1,0x5
    8001815c:	97858593          	add	a1,a1,-1672 # 8001cad0 <__func__.1+0x2d8>
    80018160:	c789                	beqz	a5,8001816a <amo_access_fault_4+0xe0>
    80018162:	6418                	ld	a4,8(s0)
    80018164:	479d                	li	a5,7
    80018166:	06f70f63          	beq	a4,a5,800181e4 <amo_access_fault_4+0x15a>
    8001816a:	00005517          	auipc	a0,0x5
    8001816e:	9a650513          	add	a0,a0,-1626 # 8001cb10 <__func__.1+0x318>
    80018172:	5f1020ef          	jal	8001af62 <printf>
    80018176:	00144783          	lbu	a5,1(s0)
    8001817a:	c789                	beqz	a5,80018184 <amo_access_fault_4+0xfa>
    8001817c:	6418                	ld	a4,8(s0)
    8001817e:	479d                	li	a5,7
    80018180:	00f70c63          	beq	a4,a5,80018198 <amo_access_fault_4+0x10e>
    80018184:	00005517          	auipc	a0,0x5
    80018188:	99450513          	add	a0,a0,-1644 # 8001cb18 <__func__.1+0x320>
    8001818c:	5d7020ef          	jal	8001af62 <printf>
    80018190:	02900513          	li	a0,41
    80018194:	4a1010ef          	jal	80019e34 <putchar>
    80018198:	4529                	li	a0,10
    8001819a:	49b010ef          	jal	80019e34 <putchar>
    8001819e:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    800181a2:	00005597          	auipc	a1,0x5
    800181a6:	92e58593          	add	a1,a1,-1746 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    800181aa:	c491                	beqz	s1,800181b6 <amo_access_fault_4+0x12c>
    800181ac:	6418                	ld	a4,8(s0)
    800181ae:	479d                	li	a5,7
    800181b0:	02f70563          	beq	a4,a5,800181da <amo_access_fault_4+0x150>
    800181b4:	4481                	li	s1,0
    TEST_END();
    800181b6:	00005517          	auipc	a0,0x5
    800181ba:	9c250513          	add	a0,a0,-1598 # 8001cb78 <__func__.1+0x380>
    800181be:	5a5020ef          	jal	8001af62 <printf>
    800181c2:	4511                	li	a0,4
    800181c4:	91be80ef          	jal	80000ade <goto_priv>
    800181c8:	95ee90ef          	jal	80001326 <reset_state>
}
    800181cc:	60e2                	ld	ra,24(sp)
    800181ce:	6442                	ld	s0,16(sp)
    800181d0:	6902                	ld	s2,0(sp)
    800181d2:	8526                	mv	a0,s1
    800181d4:	64a2                	ld	s1,8(sp)
    800181d6:	6105                	add	sp,sp,32
    800181d8:	8082                	ret
    TEST_END();
    800181da:	00005597          	auipc	a1,0x5
    800181de:	8e658593          	add	a1,a1,-1818 # 8001cac0 <__func__.1+0x2c8>
    800181e2:	bfd1                	j	800181b6 <amo_access_fault_4+0x12c>
    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    800181e4:	00005597          	auipc	a1,0x5
    800181e8:	8dc58593          	add	a1,a1,-1828 # 8001cac0 <__func__.1+0x2c8>
    800181ec:	bfbd                	j	8001816a <amo_access_fault_4+0xe0>

00000000800181ee <amo_access_fault_5>:

bool amo_access_fault_5(){
    800181ee:	1141                	add	sp,sp,-16

    TEST_START();
    800181f0:	00004597          	auipc	a1,0x4
    800181f4:	3d858593          	add	a1,a1,984 # 8001c5c8 <__func__.15>
    800181f8:	00005517          	auipc	a0,0x5
    800181fc:	8e850513          	add	a0,a0,-1816 # 8001cae0 <__func__.1+0x2e8>
bool amo_access_fault_5(){
    80018200:	e406                	sd	ra,8(sp)
    80018202:	e022                	sd	s0,0(sp)
    TEST_START();
    80018204:	55f020ef          	jal	8001af62 <printf>
    80018208:	4529                	li	a0,10
    8001820a:	42b010ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    8001820e:	4511                	li	a0,4
    80018210:	8cfe80ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80018214:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80018218:	10000793          	li	a5,256
    8001821c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80018220:	20000793          	li	a5,512
    80018224:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80018228:	40000713          	li	a4,1024
    8001822c:	3a072073          	csrs	pmpcfg0,a4
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80018230:	6785                	lui	a5,0x1
    80018232:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80018236:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001823a:	4685                	li	a3,1
    8001823c:	01f69793          	sll	a5,a3,0x1f
    80018240:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80018244:	08100793          	li	a5,129
    80018248:	07e2                	sll	a5,a5,0x18
    8001824a:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001824e:	67a1                	lui	a5,0x8
    80018250:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    80018254:	0ff0000f          	fence
    80018258:	00025417          	auipc	s0,0x25
    8001825c:	db840413          	add	s0,s0,-584 # 8003d010 <excpt>
    80018260:	00d41023          	sh	a3,0(s0)
    80018264:	00025797          	auipc	a5,0x25
    80018268:	de07b223          	sd	zero,-540(a5) # 8003d048 <excpt+0x38>
    8001826c:	0ff0000f          	fence
    80018270:	37ab77b7          	lui	a5,0x37ab7
    80018274:	078a                	sll	a5,a5,0x2
    80018276:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001827a:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100 << 2 , 0xdeadbeef);

    printf("%d\n",excpt.triggered);
    8001827e:	00144583          	lbu	a1,1(s0)
    80018282:	00005517          	auipc	a0,0x5
    80018286:	21e50513          	add	a0,a0,542 # 8001d4a0 <__func__.1+0xca8>
    8001828a:	4d9020ef          	jal	8001af62 <printf>
    printf("%d\n",excpt.cause);
    8001828e:	640c                	ld	a1,8(s0)
    80018290:	00005517          	auipc	a0,0x5
    80018294:	21050513          	add	a0,a0,528 # 8001d4a0 <__func__.1+0xca8>
    80018298:	4cb020ef          	jal	8001af62 <printf>

    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001829c:	08200593          	li	a1,130
    800182a0:	0000a617          	auipc	a2,0xa
    800182a4:	7b060613          	add	a2,a2,1968 # 80022a50 <__func__.1+0x6258>
    800182a8:	00005517          	auipc	a0,0x5
    800182ac:	85050513          	add	a0,a0,-1968 # 8001caf8 <__func__.1+0x300>
    800182b0:	4b3020ef          	jal	8001af62 <printf>
    800182b4:	00144783          	lbu	a5,1(s0)
    800182b8:	00005597          	auipc	a1,0x5
    800182bc:	80858593          	add	a1,a1,-2040 # 8001cac0 <__func__.1+0x2c8>
    800182c0:	c789                	beqz	a5,800182ca <amo_access_fault_5+0xdc>
    800182c2:	00005597          	auipc	a1,0x5
    800182c6:	80e58593          	add	a1,a1,-2034 # 8001cad0 <__func__.1+0x2d8>
    800182ca:	00005517          	auipc	a0,0x5
    800182ce:	84650513          	add	a0,a0,-1978 # 8001cb10 <__func__.1+0x318>
    800182d2:	491020ef          	jal	8001af62 <printf>
    800182d6:	00144783          	lbu	a5,1(s0)
    800182da:	e3b1                	bnez	a5,8001831e <amo_access_fault_5+0x130>
    800182dc:	4529                	li	a0,10
    800182de:	357010ef          	jal	80019e34 <putchar>
    800182e2:	00144783          	lbu	a5,1(s0)
    800182e6:	e795                	bnez	a5,80018312 <amo_access_fault_5+0x124>
    800182e8:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    800182ea:	00004597          	auipc	a1,0x4
    800182ee:	7d658593          	add	a1,a1,2006 # 8001cac0 <__func__.1+0x2c8>
    800182f2:	00005517          	auipc	a0,0x5
    800182f6:	88650513          	add	a0,a0,-1914 # 8001cb78 <__func__.1+0x380>
    800182fa:	469020ef          	jal	8001af62 <printf>
    800182fe:	4511                	li	a0,4
    80018300:	fdee80ef          	jal	80000ade <goto_priv>
    80018304:	822e90ef          	jal	80001326 <reset_state>
}
    80018308:	60a2                	ld	ra,8(sp)
    8001830a:	8522                	mv	a0,s0
    8001830c:	6402                	ld	s0,0(sp)
    8001830e:	0141                	add	sp,sp,16
    80018310:	8082                	ret
    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    80018312:	4401                	li	s0,0
    TEST_END();
    80018314:	00004597          	auipc	a1,0x4
    80018318:	7bc58593          	add	a1,a1,1980 # 8001cad0 <__func__.1+0x2d8>
    8001831c:	bfd9                	j	800182f2 <amo_access_fault_5+0x104>
    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001831e:	00004517          	auipc	a0,0x4
    80018322:	7fa50513          	add	a0,a0,2042 # 8001cb18 <__func__.1+0x320>
    80018326:	43d020ef          	jal	8001af62 <printf>
    8001832a:	02900513          	li	a0,41
    8001832e:	307010ef          	jal	80019e34 <putchar>
    80018332:	b76d                	j	800182dc <amo_access_fault_5+0xee>

0000000080018334 <amo_access_fault_6>:


bool amo_access_fault_6(){
    80018334:	1101                	add	sp,sp,-32

    TEST_START();
    80018336:	00004597          	auipc	a1,0x4
    8001833a:	2aa58593          	add	a1,a1,682 # 8001c5e0 <__func__.14>
    8001833e:	00004517          	auipc	a0,0x4
    80018342:	7a250513          	add	a0,a0,1954 # 8001cae0 <__func__.1+0x2e8>
bool amo_access_fault_6(){
    80018346:	ec06                	sd	ra,24(sp)
    80018348:	e822                	sd	s0,16(sp)
    8001834a:	e426                	sd	s1,8(sp)
    8001834c:	e04a                	sd	s2,0(sp)
    TEST_START();
    8001834e:	415020ef          	jal	8001af62 <printf>
    80018352:	4529                	li	a0,10
    80018354:	2e1010ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    80018358:	4511                	li	a0,4
    8001835a:	f84e80ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001835e:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80018362:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80018366:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001836a:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001836e:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80018372:	08000793          	li	a5,128
    80018376:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001837a:	10000793          	li	a5,256
    8001837e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80018382:	20000793          	li	a5,512
    80018386:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001838a:	40000493          	li	s1,1024
    8001838e:	3a04a073          	csrs	pmpcfg0,s1
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80018392:	6785                	lui	a5,0x1
    80018394:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80018398:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001839c:	67a1                	lui	a5,0x8
    8001839e:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    800183a2:	4905                	li	s2,1
    800183a4:	01f91793          	sll	a5,s2,0x1f
    800183a8:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    800183ac:	08100793          	li	a5,129
    800183b0:	07e2                	sll	a5,a5,0x18
    800183b2:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HS);
    800183b6:	450d                	li	a0,3
    800183b8:	f26e80ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    800183bc:	0ff0000f          	fence
    800183c0:	00025417          	auipc	s0,0x25
    800183c4:	c5040413          	add	s0,s0,-944 # 8003d010 <excpt>
    800183c8:	01241023          	sh	s2,0(s0)
    800183cc:	00025797          	auipc	a5,0x25
    800183d0:	c607be23          	sd	zero,-900(a5) # 8003d048 <excpt+0x38>
    800183d4:	0ff0000f          	fence
    800183d8:	37ab77b7          	lui	a5,0x37ab7
    800183dc:	078a                	sll	a5,a5,0x2
    800183de:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800183e2:	00f4b7af          	amoadd.d	a5,a5,(s1)
    
    amoadd_d(0x80000100 << 2 , 0xdeadbeef);

    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    800183e6:	08200593          	li	a1,130
    800183ea:	0000a617          	auipc	a2,0xa
    800183ee:	6a660613          	add	a2,a2,1702 # 80022a90 <__func__.1+0x6298>
    800183f2:	00004517          	auipc	a0,0x4
    800183f6:	70650513          	add	a0,a0,1798 # 8001caf8 <__func__.1+0x300>
    800183fa:	369020ef          	jal	8001af62 <printf>
    800183fe:	00144783          	lbu	a5,1(s0)
    80018402:	00004597          	auipc	a1,0x4
    80018406:	6ce58593          	add	a1,a1,1742 # 8001cad0 <__func__.1+0x2d8>
    8001840a:	c789                	beqz	a5,80018414 <amo_access_fault_6+0xe0>
    8001840c:	6418                	ld	a4,8(s0)
    8001840e:	479d                	li	a5,7
    80018410:	06f70f63          	beq	a4,a5,8001848e <amo_access_fault_6+0x15a>
    80018414:	00004517          	auipc	a0,0x4
    80018418:	6fc50513          	add	a0,a0,1788 # 8001cb10 <__func__.1+0x318>
    8001841c:	347020ef          	jal	8001af62 <printf>
    80018420:	00144783          	lbu	a5,1(s0)
    80018424:	c789                	beqz	a5,8001842e <amo_access_fault_6+0xfa>
    80018426:	6418                	ld	a4,8(s0)
    80018428:	479d                	li	a5,7
    8001842a:	00f70c63          	beq	a4,a5,80018442 <amo_access_fault_6+0x10e>
    8001842e:	00004517          	auipc	a0,0x4
    80018432:	6ea50513          	add	a0,a0,1770 # 8001cb18 <__func__.1+0x320>
    80018436:	32d020ef          	jal	8001af62 <printf>
    8001843a:	02900513          	li	a0,41
    8001843e:	1f7010ef          	jal	80019e34 <putchar>
    80018442:	4529                	li	a0,10
    80018444:	1f1010ef          	jal	80019e34 <putchar>
    80018448:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001844c:	00004597          	auipc	a1,0x4
    80018450:	68458593          	add	a1,a1,1668 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    80018454:	c491                	beqz	s1,80018460 <amo_access_fault_6+0x12c>
    80018456:	6418                	ld	a4,8(s0)
    80018458:	479d                	li	a5,7
    8001845a:	02f70563          	beq	a4,a5,80018484 <amo_access_fault_6+0x150>
    8001845e:	4481                	li	s1,0
    TEST_END();
    80018460:	00004517          	auipc	a0,0x4
    80018464:	71850513          	add	a0,a0,1816 # 8001cb78 <__func__.1+0x380>
    80018468:	2fb020ef          	jal	8001af62 <printf>
    8001846c:	4511                	li	a0,4
    8001846e:	e70e80ef          	jal	80000ade <goto_priv>
    80018472:	eb5e80ef          	jal	80001326 <reset_state>
}
    80018476:	60e2                	ld	ra,24(sp)
    80018478:	6442                	ld	s0,16(sp)
    8001847a:	6902                	ld	s2,0(sp)
    8001847c:	8526                	mv	a0,s1
    8001847e:	64a2                	ld	s1,8(sp)
    80018480:	6105                	add	sp,sp,32
    80018482:	8082                	ret
    TEST_END();
    80018484:	00004597          	auipc	a1,0x4
    80018488:	63c58593          	add	a1,a1,1596 # 8001cac0 <__func__.1+0x2c8>
    8001848c:	bfd1                	j	80018460 <amo_access_fault_6+0x12c>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001848e:	00004597          	auipc	a1,0x4
    80018492:	63258593          	add	a1,a1,1586 # 8001cac0 <__func__.1+0x2c8>
    80018496:	bfbd                	j	80018414 <amo_access_fault_6+0xe0>

0000000080018498 <amo_access_fault_7>:


bool amo_access_fault_7(){
    80018498:	1101                	add	sp,sp,-32

    TEST_START();
    8001849a:	00004597          	auipc	a1,0x4
    8001849e:	15e58593          	add	a1,a1,350 # 8001c5f8 <__func__.13>
    800184a2:	00004517          	auipc	a0,0x4
    800184a6:	63e50513          	add	a0,a0,1598 # 8001cae0 <__func__.1+0x2e8>
bool amo_access_fault_7(){
    800184aa:	ec06                	sd	ra,24(sp)
    800184ac:	e822                	sd	s0,16(sp)
    800184ae:	e426                	sd	s1,8(sp)
    800184b0:	e04a                	sd	s2,0(sp)
    TEST_START();
    800184b2:	2b1020ef          	jal	8001af62 <printf>
    800184b6:	4529                	li	a0,10
    800184b8:	17d010ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    800184bc:	4511                	li	a0,4
    800184be:	e20e80ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    800184c2:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    800184c6:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    800184ca:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    800184ce:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    800184d2:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    800184d6:	08000793          	li	a5,128
    800184da:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    800184de:	10000793          	li	a5,256
    800184e2:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    800184e6:	20000793          	li	a5,512
    800184ea:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    800184ee:	40000493          	li	s1,1024
    800184f2:	3a04a073          	csrs	pmpcfg0,s1
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    800184f6:	6785                	lui	a5,0x1
    800184f8:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800184fc:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80018500:	67a1                	lui	a5,0x8
    80018502:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80018506:	4905                	li	s2,1
    80018508:	01f91793          	sll	a5,s2,0x1f
    8001850c:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80018510:	08100793          	li	a5,129
    80018514:	07e2                	sll	a5,a5,0x18
    80018516:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HU);
    8001851a:	4505                	li	a0,1
    8001851c:	dc2e80ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80018520:	0ff0000f          	fence
    80018524:	00025417          	auipc	s0,0x25
    80018528:	aec40413          	add	s0,s0,-1300 # 8003d010 <excpt>
    8001852c:	01241023          	sh	s2,0(s0)
    80018530:	00025797          	auipc	a5,0x25
    80018534:	b007bc23          	sd	zero,-1256(a5) # 8003d048 <excpt+0x38>
    80018538:	0ff0000f          	fence
    8001853c:	37ab77b7          	lui	a5,0x37ab7
    80018540:	078a                	sll	a5,a5,0x2
    80018542:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018546:	00f4b7af          	amoadd.d	a5,a5,(s1)
    
    amoadd_d(0x80000100 << 2 , 0xdeadbeef);

    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001854a:	08200593          	li	a1,130
    8001854e:	0000a617          	auipc	a2,0xa
    80018552:	58260613          	add	a2,a2,1410 # 80022ad0 <__func__.1+0x62d8>
    80018556:	00004517          	auipc	a0,0x4
    8001855a:	5a250513          	add	a0,a0,1442 # 8001caf8 <__func__.1+0x300>
    8001855e:	205020ef          	jal	8001af62 <printf>
    80018562:	00144783          	lbu	a5,1(s0)
    80018566:	00004597          	auipc	a1,0x4
    8001856a:	56a58593          	add	a1,a1,1386 # 8001cad0 <__func__.1+0x2d8>
    8001856e:	c789                	beqz	a5,80018578 <amo_access_fault_7+0xe0>
    80018570:	6418                	ld	a4,8(s0)
    80018572:	479d                	li	a5,7
    80018574:	06f70f63          	beq	a4,a5,800185f2 <amo_access_fault_7+0x15a>
    80018578:	00004517          	auipc	a0,0x4
    8001857c:	59850513          	add	a0,a0,1432 # 8001cb10 <__func__.1+0x318>
    80018580:	1e3020ef          	jal	8001af62 <printf>
    80018584:	00144783          	lbu	a5,1(s0)
    80018588:	c789                	beqz	a5,80018592 <amo_access_fault_7+0xfa>
    8001858a:	6418                	ld	a4,8(s0)
    8001858c:	479d                	li	a5,7
    8001858e:	00f70c63          	beq	a4,a5,800185a6 <amo_access_fault_7+0x10e>
    80018592:	00004517          	auipc	a0,0x4
    80018596:	58650513          	add	a0,a0,1414 # 8001cb18 <__func__.1+0x320>
    8001859a:	1c9020ef          	jal	8001af62 <printf>
    8001859e:	02900513          	li	a0,41
    800185a2:	093010ef          	jal	80019e34 <putchar>
    800185a6:	4529                	li	a0,10
    800185a8:	08d010ef          	jal	80019e34 <putchar>
    800185ac:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    800185b0:	00004597          	auipc	a1,0x4
    800185b4:	52058593          	add	a1,a1,1312 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    800185b8:	c491                	beqz	s1,800185c4 <amo_access_fault_7+0x12c>
    800185ba:	6418                	ld	a4,8(s0)
    800185bc:	479d                	li	a5,7
    800185be:	02f70563          	beq	a4,a5,800185e8 <amo_access_fault_7+0x150>
    800185c2:	4481                	li	s1,0
    TEST_END();
    800185c4:	00004517          	auipc	a0,0x4
    800185c8:	5b450513          	add	a0,a0,1460 # 8001cb78 <__func__.1+0x380>
    800185cc:	197020ef          	jal	8001af62 <printf>
    800185d0:	4511                	li	a0,4
    800185d2:	d0ce80ef          	jal	80000ade <goto_priv>
    800185d6:	d51e80ef          	jal	80001326 <reset_state>
}
    800185da:	60e2                	ld	ra,24(sp)
    800185dc:	6442                	ld	s0,16(sp)
    800185de:	6902                	ld	s2,0(sp)
    800185e0:	8526                	mv	a0,s1
    800185e2:	64a2                	ld	s1,8(sp)
    800185e4:	6105                	add	sp,sp,32
    800185e6:	8082                	ret
    TEST_END();
    800185e8:	00004597          	auipc	a1,0x4
    800185ec:	4d858593          	add	a1,a1,1240 # 8001cac0 <__func__.1+0x2c8>
    800185f0:	bfd1                	j	800185c4 <amo_access_fault_7+0x12c>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    800185f2:	00004597          	auipc	a1,0x4
    800185f6:	4ce58593          	add	a1,a1,1230 # 8001cac0 <__func__.1+0x2c8>
    800185fa:	bfbd                	j	80018578 <amo_access_fault_7+0xe0>

00000000800185fc <amo_access_fault_8>:

bool amo_access_fault_8(){
    800185fc:	1101                	add	sp,sp,-32

    TEST_START();
    800185fe:	00004597          	auipc	a1,0x4
    80018602:	01258593          	add	a1,a1,18 # 8001c610 <__func__.12>
    80018606:	00004517          	auipc	a0,0x4
    8001860a:	4da50513          	add	a0,a0,1242 # 8001cae0 <__func__.1+0x2e8>
bool amo_access_fault_8(){
    8001860e:	ec06                	sd	ra,24(sp)
    80018610:	e822                	sd	s0,16(sp)
    80018612:	e426                	sd	s1,8(sp)
    80018614:	e04a                	sd	s2,0(sp)
    TEST_START();
    80018616:	14d020ef          	jal	8001af62 <printf>
    8001861a:	4529                	li	a0,10
    8001861c:	019010ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    80018620:	4511                	li	a0,4
    80018622:	cbce80ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80018626:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001862a:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001862e:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80018632:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80018636:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001863a:	08000793          	li	a5,128
    8001863e:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80018642:	10000793          	li	a5,256
    80018646:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001864a:	20000793          	li	a5,512
    8001864e:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80018652:	40000493          	li	s1,1024
    80018656:	3a04a073          	csrs	pmpcfg0,s1
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001865a:	6785                	lui	a5,0x1
    8001865c:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80018660:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80018664:	67a1                	lui	a5,0x8
    80018666:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001866a:	4905                	li	s2,1
    8001866c:	01f91793          	sll	a5,s2,0x1f
    80018670:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80018674:	08100793          	li	a5,129
    80018678:	07e2                	sll	a5,a5,0x18
    8001867a:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_VU);
    8001867e:	4501                	li	a0,0
    80018680:	c5ee80ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80018684:	0ff0000f          	fence
    80018688:	00025417          	auipc	s0,0x25
    8001868c:	98840413          	add	s0,s0,-1656 # 8003d010 <excpt>
    80018690:	01241023          	sh	s2,0(s0)
    80018694:	00025797          	auipc	a5,0x25
    80018698:	9a07ba23          	sd	zero,-1612(a5) # 8003d048 <excpt+0x38>
    8001869c:	0ff0000f          	fence
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    800186a0:	37ab77b7          	lui	a5,0x37ab7
    800186a4:	078a                	sll	a5,a5,0x2
    800186a6:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800186aa:	40f4b7af          	amoor.d	a5,a5,(s1)
    
    amoor_d(0x80000100 << 2 , 0xdeadbeef);

    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    800186ae:	08200593          	li	a1,130
    800186b2:	0000a617          	auipc	a2,0xa
    800186b6:	45e60613          	add	a2,a2,1118 # 80022b10 <__func__.1+0x6318>
    800186ba:	00004517          	auipc	a0,0x4
    800186be:	43e50513          	add	a0,a0,1086 # 8001caf8 <__func__.1+0x300>
    800186c2:	0a1020ef          	jal	8001af62 <printf>
    800186c6:	00144783          	lbu	a5,1(s0)
    800186ca:	00004597          	auipc	a1,0x4
    800186ce:	40658593          	add	a1,a1,1030 # 8001cad0 <__func__.1+0x2d8>
    800186d2:	c789                	beqz	a5,800186dc <amo_access_fault_8+0xe0>
    800186d4:	6418                	ld	a4,8(s0)
    800186d6:	479d                	li	a5,7
    800186d8:	06f70f63          	beq	a4,a5,80018756 <amo_access_fault_8+0x15a>
    800186dc:	00004517          	auipc	a0,0x4
    800186e0:	43450513          	add	a0,a0,1076 # 8001cb10 <__func__.1+0x318>
    800186e4:	07f020ef          	jal	8001af62 <printf>
    800186e8:	00144783          	lbu	a5,1(s0)
    800186ec:	c789                	beqz	a5,800186f6 <amo_access_fault_8+0xfa>
    800186ee:	6418                	ld	a4,8(s0)
    800186f0:	479d                	li	a5,7
    800186f2:	00f70c63          	beq	a4,a5,8001870a <amo_access_fault_8+0x10e>
    800186f6:	00004517          	auipc	a0,0x4
    800186fa:	42250513          	add	a0,a0,1058 # 8001cb18 <__func__.1+0x320>
    800186fe:	065020ef          	jal	8001af62 <printf>
    80018702:	02900513          	li	a0,41
    80018706:	72e010ef          	jal	80019e34 <putchar>
    8001870a:	4529                	li	a0,10
    8001870c:	728010ef          	jal	80019e34 <putchar>
    80018710:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80018714:	00004597          	auipc	a1,0x4
    80018718:	3bc58593          	add	a1,a1,956 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001871c:	c491                	beqz	s1,80018728 <amo_access_fault_8+0x12c>
    8001871e:	6418                	ld	a4,8(s0)
    80018720:	479d                	li	a5,7
    80018722:	02f70563          	beq	a4,a5,8001874c <amo_access_fault_8+0x150>
    80018726:	4481                	li	s1,0
    TEST_END();
    80018728:	00004517          	auipc	a0,0x4
    8001872c:	45050513          	add	a0,a0,1104 # 8001cb78 <__func__.1+0x380>
    80018730:	033020ef          	jal	8001af62 <printf>
    80018734:	4511                	li	a0,4
    80018736:	ba8e80ef          	jal	80000ade <goto_priv>
    8001873a:	bede80ef          	jal	80001326 <reset_state>
}
    8001873e:	60e2                	ld	ra,24(sp)
    80018740:	6442                	ld	s0,16(sp)
    80018742:	6902                	ld	s2,0(sp)
    80018744:	8526                	mv	a0,s1
    80018746:	64a2                	ld	s1,8(sp)
    80018748:	6105                	add	sp,sp,32
    8001874a:	8082                	ret
    TEST_END();
    8001874c:	00004597          	auipc	a1,0x4
    80018750:	37458593          	add	a1,a1,884 # 8001cac0 <__func__.1+0x2c8>
    80018754:	bfd1                	j	80018728 <amo_access_fault_8+0x12c>
    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    80018756:	00004597          	auipc	a1,0x4
    8001875a:	36a58593          	add	a1,a1,874 # 8001cac0 <__func__.1+0x2c8>
    8001875e:	bfbd                	j	800186dc <amo_access_fault_8+0xe0>

0000000080018760 <amo_access_fault_9>:

bool amo_access_fault_9(){
    80018760:	1101                	add	sp,sp,-32

    TEST_START();
    80018762:	00004597          	auipc	a1,0x4
    80018766:	ec658593          	add	a1,a1,-314 # 8001c628 <__func__.11>
    8001876a:	00004517          	auipc	a0,0x4
    8001876e:	37650513          	add	a0,a0,886 # 8001cae0 <__func__.1+0x2e8>
bool amo_access_fault_9(){
    80018772:	ec06                	sd	ra,24(sp)
    80018774:	e822                	sd	s0,16(sp)
    80018776:	e426                	sd	s1,8(sp)
    TEST_START();
    80018778:	7ea020ef          	jal	8001af62 <printf>
    8001877c:	4529                	li	a0,10
    8001877e:	6b6010ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    80018782:	4511                	li	a0,4
    80018784:	b5ae80ef          	jal	80000ade <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80018788:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001878c:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80018790:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80018794:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80018798:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001879c:	08000793          	li	a5,128
    800187a0:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    800187a4:	10000793          	li	a5,256
    800187a8:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    800187ac:	20000793          	li	a5,512
    800187b0:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    800187b4:	40000793          	li	a5,1024
    800187b8:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    800187bc:	6785                	lui	a5,0x1
    800187be:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800187c2:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    800187c6:	67a1                	lui	a5,0x8
    800187c8:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    800187cc:	4405                	li	s0,1
    800187ce:	01f41793          	sll	a5,s0,0x1f
    800187d2:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    800187d6:	08100793          	li	a5,129
    800187da:	07e2                	sll	a5,a5,0x18
    800187dc:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_VU);
    800187e0:	4501                	li	a0,0
    800187e2:	afce80ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    800187e6:	0ff0000f          	fence
    800187ea:	00025497          	auipc	s1,0x25
    800187ee:	82648493          	add	s1,s1,-2010 # 8003d010 <excpt>
    800187f2:	00849023          	sh	s0,0(s1)
    800187f6:	00025797          	auipc	a5,0x25
    800187fa:	8407b923          	sd	zero,-1966(a5) # 8003d048 <excpt+0x38>
    800187fe:	0ff0000f          	fence
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    80018802:	37ab77b7          	lui	a5,0x37ab7
    80018806:	078a                	sll	a5,a5,0x2
    80018808:	140e                	sll	s0,s0,0x23
    8001880a:	1461                	add	s0,s0,-8
    8001880c:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018810:	60f437af          	amoand.d	a5,a5,(s0)
    
    amoand_d(0x1fffffffe << 2 ,0xdeadbeef);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    80018814:	08200593          	li	a1,130
    80018818:	0000a617          	auipc	a2,0xa
    8001881c:	33860613          	add	a2,a2,824 # 80022b50 <__func__.1+0x6358>
    80018820:	00004517          	auipc	a0,0x4
    80018824:	2d850513          	add	a0,a0,728 # 8001caf8 <__func__.1+0x300>
    80018828:	73a020ef          	jal	8001af62 <printf>
    8001882c:	0014c783          	lbu	a5,1(s1)
    80018830:	00004597          	auipc	a1,0x4
    80018834:	2a058593          	add	a1,a1,672 # 8001cad0 <__func__.1+0x2d8>
    80018838:	c789                	beqz	a5,80018842 <amo_access_fault_9+0xe2>
    8001883a:	6498                	ld	a4,8(s1)
    8001883c:	479d                	li	a5,7
    8001883e:	06f70e63          	beq	a4,a5,800188ba <amo_access_fault_9+0x15a>
    80018842:	00004517          	auipc	a0,0x4
    80018846:	2ce50513          	add	a0,a0,718 # 8001cb10 <__func__.1+0x318>
    8001884a:	718020ef          	jal	8001af62 <printf>
    8001884e:	0014c783          	lbu	a5,1(s1)
    80018852:	c789                	beqz	a5,8001885c <amo_access_fault_9+0xfc>
    80018854:	6498                	ld	a4,8(s1)
    80018856:	479d                	li	a5,7
    80018858:	00f70c63          	beq	a4,a5,80018870 <amo_access_fault_9+0x110>
    8001885c:	00004517          	auipc	a0,0x4
    80018860:	2bc50513          	add	a0,a0,700 # 8001cb18 <__func__.1+0x320>
    80018864:	6fe020ef          	jal	8001af62 <printf>
    80018868:	02900513          	li	a0,41
    8001886c:	5c8010ef          	jal	80019e34 <putchar>
    80018870:	4529                	li	a0,10
    80018872:	5c2010ef          	jal	80019e34 <putchar>
    80018876:	0014c403          	lbu	s0,1(s1)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001887a:	00004597          	auipc	a1,0x4
    8001887e:	25658593          	add	a1,a1,598 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    80018882:	c411                	beqz	s0,8001888e <amo_access_fault_9+0x12e>
    80018884:	6498                	ld	a4,8(s1)
    80018886:	479d                	li	a5,7
    80018888:	02f70463          	beq	a4,a5,800188b0 <amo_access_fault_9+0x150>
    8001888c:	4401                	li	s0,0
    TEST_END();
    8001888e:	00004517          	auipc	a0,0x4
    80018892:	2ea50513          	add	a0,a0,746 # 8001cb78 <__func__.1+0x380>
    80018896:	6cc020ef          	jal	8001af62 <printf>
    8001889a:	4511                	li	a0,4
    8001889c:	a42e80ef          	jal	80000ade <goto_priv>
    800188a0:	a87e80ef          	jal	80001326 <reset_state>
}
    800188a4:	60e2                	ld	ra,24(sp)
    800188a6:	8522                	mv	a0,s0
    800188a8:	6442                	ld	s0,16(sp)
    800188aa:	64a2                	ld	s1,8(sp)
    800188ac:	6105                	add	sp,sp,32
    800188ae:	8082                	ret
    TEST_END();
    800188b0:	00004597          	auipc	a1,0x4
    800188b4:	21058593          	add	a1,a1,528 # 8001cac0 <__func__.1+0x2c8>
    800188b8:	bfd9                	j	8001888e <amo_access_fault_9+0x12e>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    800188ba:	00004597          	auipc	a1,0x4
    800188be:	20658593          	add	a1,a1,518 # 8001cac0 <__func__.1+0x2c8>
    800188c2:	b741                	j	80018842 <amo_access_fault_9+0xe2>

00000000800188c4 <amo_access_fault_10>:


bool amo_access_fault_10(){
    800188c4:	1101                	add	sp,sp,-32

    TEST_START();
    800188c6:	00004597          	auipc	a1,0x4
    800188ca:	d7a58593          	add	a1,a1,-646 # 8001c640 <__func__.10>
    800188ce:	00004517          	auipc	a0,0x4
    800188d2:	21250513          	add	a0,a0,530 # 8001cae0 <__func__.1+0x2e8>
bool amo_access_fault_10(){
    800188d6:	ec06                	sd	ra,24(sp)
    800188d8:	e822                	sd	s0,16(sp)
    800188da:	e426                	sd	s1,8(sp)
    TEST_START();
    800188dc:	686020ef          	jal	8001af62 <printf>
    800188e0:	4529                	li	a0,10
    800188e2:	552010ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    800188e6:	4511                	li	a0,4
    800188e8:	9f6e80ef          	jal	80000ade <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    800188ec:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    800188f0:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    800188f4:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    800188f8:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    800188fc:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80018900:	08000793          	li	a5,128
    80018904:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80018908:	4485                	li	s1,1
    8001890a:	01f49793          	sll	a5,s1,0x1f
    8001890e:	3b079073          	csrw	pmpaddr0,a5

    goto_priv(PRIV_M);
    80018912:	4511                	li	a0,4
    80018914:	9cae80ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80018918:	0ff0000f          	fence
    8001891c:	00024417          	auipc	s0,0x24
    80018920:	6f440413          	add	s0,s0,1780 # 8003d010 <excpt>
    80018924:	00941023          	sh	s1,0(s0)
    80018928:	00024797          	auipc	a5,0x24
    8001892c:	7207b023          	sd	zero,1824(a5) # 8003d048 <excpt+0x38>
    80018930:	0ff0000f          	fence
    80018934:	37ab77b7          	lui	a5,0x37ab7
    80018938:	078a                	sll	a5,a5,0x2
    8001893a:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001893e:	4701                	li	a4,0
    80018940:	60f737af          	amoand.d	a5,a5,(a4)
    
    amoand_d(0x80000000 << 2 ,0xdeadbeef);

    printf("%d\n",excpt.triggered);
    80018944:	00144583          	lbu	a1,1(s0)
    80018948:	00005517          	auipc	a0,0x5
    8001894c:	b5850513          	add	a0,a0,-1192 # 8001d4a0 <__func__.1+0xca8>
    80018950:	612020ef          	jal	8001af62 <printf>
    printf("%d\n",excpt.cause);
    80018954:	640c                	ld	a1,8(s0)
    80018956:	00005517          	auipc	a0,0x5
    8001895a:	b4a50513          	add	a0,a0,-1206 # 8001d4a0 <__func__.1+0xca8>
    8001895e:	604020ef          	jal	8001af62 <printf>

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    80018962:	08200593          	li	a1,130
    80018966:	0000a617          	auipc	a2,0xa
    8001896a:	26260613          	add	a2,a2,610 # 80022bc8 <__func__.1+0x63d0>
    8001896e:	00004517          	auipc	a0,0x4
    80018972:	18a50513          	add	a0,a0,394 # 8001caf8 <__func__.1+0x300>
    80018976:	5ec020ef          	jal	8001af62 <printf>
    8001897a:	00144783          	lbu	a5,1(s0)
    8001897e:	00004597          	auipc	a1,0x4
    80018982:	15258593          	add	a1,a1,338 # 8001cad0 <__func__.1+0x2d8>
    80018986:	c789                	beqz	a5,80018990 <amo_access_fault_10+0xcc>
    80018988:	6418                	ld	a4,8(s0)
    8001898a:	479d                	li	a5,7
    8001898c:	06f70e63          	beq	a4,a5,80018a08 <amo_access_fault_10+0x144>
    80018990:	00004517          	auipc	a0,0x4
    80018994:	18050513          	add	a0,a0,384 # 8001cb10 <__func__.1+0x318>
    80018998:	5ca020ef          	jal	8001af62 <printf>
    8001899c:	00144783          	lbu	a5,1(s0)
    800189a0:	c789                	beqz	a5,800189aa <amo_access_fault_10+0xe6>
    800189a2:	6418                	ld	a4,8(s0)
    800189a4:	479d                	li	a5,7
    800189a6:	00f70c63          	beq	a4,a5,800189be <amo_access_fault_10+0xfa>
    800189aa:	00004517          	auipc	a0,0x4
    800189ae:	16e50513          	add	a0,a0,366 # 8001cb18 <__func__.1+0x320>
    800189b2:	5b0020ef          	jal	8001af62 <printf>
    800189b6:	02900513          	li	a0,41
    800189ba:	47a010ef          	jal	80019e34 <putchar>
    800189be:	4529                	li	a0,10
    800189c0:	474010ef          	jal	80019e34 <putchar>
    800189c4:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    800189c8:	00004597          	auipc	a1,0x4
    800189cc:	10858593          	add	a1,a1,264 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    800189d0:	c491                	beqz	s1,800189dc <amo_access_fault_10+0x118>
    800189d2:	6418                	ld	a4,8(s0)
    800189d4:	479d                	li	a5,7
    800189d6:	02f70463          	beq	a4,a5,800189fe <amo_access_fault_10+0x13a>
    800189da:	4481                	li	s1,0
    TEST_END();
    800189dc:	00004517          	auipc	a0,0x4
    800189e0:	19c50513          	add	a0,a0,412 # 8001cb78 <__func__.1+0x380>
    800189e4:	57e020ef          	jal	8001af62 <printf>
    800189e8:	4511                	li	a0,4
    800189ea:	8f4e80ef          	jal	80000ade <goto_priv>
    800189ee:	939e80ef          	jal	80001326 <reset_state>
}
    800189f2:	60e2                	ld	ra,24(sp)
    800189f4:	6442                	ld	s0,16(sp)
    800189f6:	8526                	mv	a0,s1
    800189f8:	64a2                	ld	s1,8(sp)
    800189fa:	6105                	add	sp,sp,32
    800189fc:	8082                	ret
    TEST_END();
    800189fe:	00004597          	auipc	a1,0x4
    80018a02:	0c258593          	add	a1,a1,194 # 8001cac0 <__func__.1+0x2c8>
    80018a06:	bfd9                	j	800189dc <amo_access_fault_10+0x118>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    80018a08:	00004597          	auipc	a1,0x4
    80018a0c:	0b858593          	add	a1,a1,184 # 8001cac0 <__func__.1+0x2c8>
    80018a10:	b741                	j	80018990 <amo_access_fault_10+0xcc>

0000000080018a12 <instruction_access_fault_1>:


bool instruction_access_fault_1(){
    80018a12:	1101                	add	sp,sp,-32

    TEST_START();
    80018a14:	00004597          	auipc	a1,0x4
    80018a18:	c4458593          	add	a1,a1,-956 # 8001c658 <__func__.9>
    80018a1c:	00004517          	auipc	a0,0x4
    80018a20:	0c450513          	add	a0,a0,196 # 8001cae0 <__func__.1+0x2e8>
bool instruction_access_fault_1(){
    80018a24:	ec06                	sd	ra,24(sp)
    80018a26:	e822                	sd	s0,16(sp)
    80018a28:	e426                	sd	s1,8(sp)
    TEST_START();
    80018a2a:	538020ef          	jal	8001af62 <printf>
    80018a2e:	4529                	li	a0,10
    80018a30:	404010ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    80018a34:	4511                	li	a0,4
    80018a36:	8a8e80ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80018a3a:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80018a3e:	10000793          	li	a5,256
    80018a42:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80018a46:	20000793          	li	a5,512
    80018a4a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80018a4e:	40000793          	li	a5,1024
    80018a52:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80018a56:	6785                	lui	a5,0x1
    80018a58:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80018a5c:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80018a60:	4485                	li	s1,1
    80018a62:	01f49793          	sll	a5,s1,0x1f
    80018a66:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80018a6a:	08100793          	li	a5,129
    80018a6e:	07e2                	sll	a5,a5,0x18
    80018a70:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80018a74:	67a1                	lui	a5,0x8
    80018a76:	3a07a073          	csrs	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    80018a7a:	0ff0000f          	fence
    80018a7e:	00024417          	auipc	s0,0x24
    80018a82:	59240413          	add	s0,s0,1426 # 8003d010 <excpt>
    80018a86:	00941023          	sh	s1,0(s0)
    80018a8a:	00024797          	auipc	a5,0x24
    80018a8e:	5a07bf23          	sd	zero,1470(a5) # 8003d048 <excpt+0x38>
    80018a92:	0ff0000f          	fence
    
    TEST_EXEC_EXCEPT(0x80000100 << 2);
    80018a96:	40000793          	li	a5,1024
    80018a9a:	00000297          	auipc	t0,0x0
    80018a9e:	00c28293          	add	t0,t0,12 # 80018aa6 <instruction_access_fault_1+0x94>
    80018aa2:	02543c23          	sd	t0,56(s0)
    80018aa6:	8782                	jr	a5

    printf("%d\n",excpt.triggered);
    80018aa8:	00144583          	lbu	a1,1(s0)
    80018aac:	00005517          	auipc	a0,0x5
    80018ab0:	9f450513          	add	a0,a0,-1548 # 8001d4a0 <__func__.1+0xca8>
    80018ab4:	4ae020ef          	jal	8001af62 <printf>
    printf("%d\n",excpt.cause);
    80018ab8:	640c                	ld	a1,8(s0)
    80018aba:	00005517          	auipc	a0,0x5
    80018abe:	9e650513          	add	a0,a0,-1562 # 8001d4a0 <__func__.1+0xca8>
    80018ac2:	4a0020ef          	jal	8001af62 <printf>

    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    80018ac6:	08200593          	li	a1,130
    80018aca:	0000a617          	auipc	a2,0xa
    80018ace:	16e60613          	add	a2,a2,366 # 80022c38 <__func__.1+0x6440>
    80018ad2:	00004517          	auipc	a0,0x4
    80018ad6:	02650513          	add	a0,a0,38 # 8001caf8 <__func__.1+0x300>
    80018ada:	488020ef          	jal	8001af62 <printf>
    80018ade:	00144783          	lbu	a5,1(s0)
    80018ae2:	00004597          	auipc	a1,0x4
    80018ae6:	fee58593          	add	a1,a1,-18 # 8001cad0 <__func__.1+0x2d8>
    80018aea:	c781                	beqz	a5,80018af2 <instruction_access_fault_1+0xe0>
    80018aec:	641c                	ld	a5,8(s0)
    80018aee:	06978e63          	beq	a5,s1,80018b6a <instruction_access_fault_1+0x158>
    80018af2:	00004517          	auipc	a0,0x4
    80018af6:	01e50513          	add	a0,a0,30 # 8001cb10 <__func__.1+0x318>
    80018afa:	468020ef          	jal	8001af62 <printf>
    80018afe:	00144783          	lbu	a5,1(s0)
    80018b02:	c789                	beqz	a5,80018b0c <instruction_access_fault_1+0xfa>
    80018b04:	6418                	ld	a4,8(s0)
    80018b06:	4785                	li	a5,1
    80018b08:	00f70c63          	beq	a4,a5,80018b20 <instruction_access_fault_1+0x10e>
    80018b0c:	00004517          	auipc	a0,0x4
    80018b10:	00c50513          	add	a0,a0,12 # 8001cb18 <__func__.1+0x320>
    80018b14:	44e020ef          	jal	8001af62 <printf>
    80018b18:	02900513          	li	a0,41
    80018b1c:	318010ef          	jal	80019e34 <putchar>
    80018b20:	4529                	li	a0,10
    80018b22:	312010ef          	jal	80019e34 <putchar>
    80018b26:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    80018b2a:	00004597          	auipc	a1,0x4
    80018b2e:	fa658593          	add	a1,a1,-90 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    80018b32:	c491                	beqz	s1,80018b3e <instruction_access_fault_1+0x12c>
    80018b34:	6418                	ld	a4,8(s0)
    80018b36:	4785                	li	a5,1
    80018b38:	02f70463          	beq	a4,a5,80018b60 <instruction_access_fault_1+0x14e>
    80018b3c:	4481                	li	s1,0
    TEST_END();
    80018b3e:	00004517          	auipc	a0,0x4
    80018b42:	03a50513          	add	a0,a0,58 # 8001cb78 <__func__.1+0x380>
    80018b46:	41c020ef          	jal	8001af62 <printf>
    80018b4a:	4511                	li	a0,4
    80018b4c:	f93e70ef          	jal	80000ade <goto_priv>
    80018b50:	fd6e80ef          	jal	80001326 <reset_state>
}
    80018b54:	60e2                	ld	ra,24(sp)
    80018b56:	6442                	ld	s0,16(sp)
    80018b58:	8526                	mv	a0,s1
    80018b5a:	64a2                	ld	s1,8(sp)
    80018b5c:	6105                	add	sp,sp,32
    80018b5e:	8082                	ret
    TEST_END();
    80018b60:	00004597          	auipc	a1,0x4
    80018b64:	f6058593          	add	a1,a1,-160 # 8001cac0 <__func__.1+0x2c8>
    80018b68:	bfd9                	j	80018b3e <instruction_access_fault_1+0x12c>
    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    80018b6a:	00004597          	auipc	a1,0x4
    80018b6e:	f5658593          	add	a1,a1,-170 # 8001cac0 <__func__.1+0x2c8>
    80018b72:	b741                	j	80018af2 <instruction_access_fault_1+0xe0>

0000000080018b74 <instruction_access_fault_2>:

bool instruction_access_fault_2(){
    80018b74:	1101                	add	sp,sp,-32

    TEST_START();
    80018b76:	00004597          	auipc	a1,0x4
    80018b7a:	b0258593          	add	a1,a1,-1278 # 8001c678 <__func__.8>
    80018b7e:	00004517          	auipc	a0,0x4
    80018b82:	f6250513          	add	a0,a0,-158 # 8001cae0 <__func__.1+0x2e8>
bool instruction_access_fault_2(){
    80018b86:	ec06                	sd	ra,24(sp)
    80018b88:	e822                	sd	s0,16(sp)
    80018b8a:	e426                	sd	s1,8(sp)
    TEST_START();
    80018b8c:	3d6020ef          	jal	8001af62 <printf>
    80018b90:	4529                	li	a0,10
    80018b92:	2a2010ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    80018b96:	4511                	li	a0,4
    80018b98:	f47e70ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80018b9c:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80018ba0:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80018ba4:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80018ba8:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80018bac:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80018bb0:	08000793          	li	a5,128
    80018bb4:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80018bb8:	10000793          	li	a5,256
    80018bbc:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80018bc0:	20000793          	li	a5,512
    80018bc4:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80018bc8:	40000793          	li	a5,1024
    80018bcc:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80018bd0:	6785                	lui	a5,0x1
    80018bd2:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80018bd6:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80018bda:	4485                	li	s1,1
    80018bdc:	01f49793          	sll	a5,s1,0x1f
    80018be0:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80018be4:	08100793          	li	a5,129
    80018be8:	07e2                	sll	a5,a5,0x18
    80018bea:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HS);
    80018bee:	450d                	li	a0,3
    80018bf0:	eefe70ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80018bf4:	0ff0000f          	fence
    80018bf8:	00024417          	auipc	s0,0x24
    80018bfc:	41840413          	add	s0,s0,1048 # 8003d010 <excpt>
    80018c00:	00941023          	sh	s1,0(s0)
    80018c04:	00024797          	auipc	a5,0x24
    80018c08:	4407b223          	sd	zero,1092(a5) # 8003d048 <excpt+0x38>
    80018c0c:	0ff0000f          	fence
    
    TEST_EXEC_EXCEPT(0x80000100 << 2);
    80018c10:	40000793          	li	a5,1024
    80018c14:	00000297          	auipc	t0,0x0
    80018c18:	00c28293          	add	t0,t0,12 # 80018c20 <instruction_access_fault_2+0xac>
    80018c1c:	02543c23          	sd	t0,56(s0)
    80018c20:	8782                	jr	a5

    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    80018c22:	08200593          	li	a1,130
    80018c26:	0000a617          	auipc	a2,0xa
    80018c2a:	05a60613          	add	a2,a2,90 # 80022c80 <__func__.1+0x6488>
    80018c2e:	00004517          	auipc	a0,0x4
    80018c32:	eca50513          	add	a0,a0,-310 # 8001caf8 <__func__.1+0x300>
    80018c36:	32c020ef          	jal	8001af62 <printf>
    80018c3a:	00144783          	lbu	a5,1(s0)
    80018c3e:	00004597          	auipc	a1,0x4
    80018c42:	e9258593          	add	a1,a1,-366 # 8001cad0 <__func__.1+0x2d8>
    80018c46:	c781                	beqz	a5,80018c4e <instruction_access_fault_2+0xda>
    80018c48:	641c                	ld	a5,8(s0)
    80018c4a:	06978e63          	beq	a5,s1,80018cc6 <instruction_access_fault_2+0x152>
    80018c4e:	00004517          	auipc	a0,0x4
    80018c52:	ec250513          	add	a0,a0,-318 # 8001cb10 <__func__.1+0x318>
    80018c56:	30c020ef          	jal	8001af62 <printf>
    80018c5a:	00144783          	lbu	a5,1(s0)
    80018c5e:	c789                	beqz	a5,80018c68 <instruction_access_fault_2+0xf4>
    80018c60:	6418                	ld	a4,8(s0)
    80018c62:	4785                	li	a5,1
    80018c64:	00f70c63          	beq	a4,a5,80018c7c <instruction_access_fault_2+0x108>
    80018c68:	00004517          	auipc	a0,0x4
    80018c6c:	eb050513          	add	a0,a0,-336 # 8001cb18 <__func__.1+0x320>
    80018c70:	2f2020ef          	jal	8001af62 <printf>
    80018c74:	02900513          	li	a0,41
    80018c78:	1bc010ef          	jal	80019e34 <putchar>
    80018c7c:	4529                	li	a0,10
    80018c7e:	1b6010ef          	jal	80019e34 <putchar>
    80018c82:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    80018c86:	00004597          	auipc	a1,0x4
    80018c8a:	e4a58593          	add	a1,a1,-438 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    80018c8e:	c491                	beqz	s1,80018c9a <instruction_access_fault_2+0x126>
    80018c90:	6418                	ld	a4,8(s0)
    80018c92:	4785                	li	a5,1
    80018c94:	02f70463          	beq	a4,a5,80018cbc <instruction_access_fault_2+0x148>
    80018c98:	4481                	li	s1,0
    TEST_END();
    80018c9a:	00004517          	auipc	a0,0x4
    80018c9e:	ede50513          	add	a0,a0,-290 # 8001cb78 <__func__.1+0x380>
    80018ca2:	2c0020ef          	jal	8001af62 <printf>
    80018ca6:	4511                	li	a0,4
    80018ca8:	e37e70ef          	jal	80000ade <goto_priv>
    80018cac:	e7ae80ef          	jal	80001326 <reset_state>
}
    80018cb0:	60e2                	ld	ra,24(sp)
    80018cb2:	6442                	ld	s0,16(sp)
    80018cb4:	8526                	mv	a0,s1
    80018cb6:	64a2                	ld	s1,8(sp)
    80018cb8:	6105                	add	sp,sp,32
    80018cba:	8082                	ret
    TEST_END();
    80018cbc:	00004597          	auipc	a1,0x4
    80018cc0:	e0458593          	add	a1,a1,-508 # 8001cac0 <__func__.1+0x2c8>
    80018cc4:	bfd9                	j	80018c9a <instruction_access_fault_2+0x126>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    80018cc6:	00004597          	auipc	a1,0x4
    80018cca:	dfa58593          	add	a1,a1,-518 # 8001cac0 <__func__.1+0x2c8>
    80018cce:	b741                	j	80018c4e <instruction_access_fault_2+0xda>

0000000080018cd0 <instruction_access_fault_3>:


bool instruction_access_fault_3(){
    80018cd0:	1101                	add	sp,sp,-32

    TEST_START();
    80018cd2:	00004597          	auipc	a1,0x4
    80018cd6:	9c658593          	add	a1,a1,-1594 # 8001c698 <__func__.7>
    80018cda:	00004517          	auipc	a0,0x4
    80018cde:	e0650513          	add	a0,a0,-506 # 8001cae0 <__func__.1+0x2e8>
bool instruction_access_fault_3(){
    80018ce2:	ec06                	sd	ra,24(sp)
    80018ce4:	e822                	sd	s0,16(sp)
    80018ce6:	e426                	sd	s1,8(sp)
    TEST_START();
    80018ce8:	27a020ef          	jal	8001af62 <printf>
    80018cec:	4529                	li	a0,10
    80018cee:	146010ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    80018cf2:	4511                	li	a0,4
    80018cf4:	debe70ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80018cf8:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80018cfc:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80018d00:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80018d04:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80018d08:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80018d0c:	08000793          	li	a5,128
    80018d10:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80018d14:	10000793          	li	a5,256
    80018d18:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80018d1c:	20000793          	li	a5,512
    80018d20:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80018d24:	40000793          	li	a5,1024
    80018d28:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80018d2c:	6785                	lui	a5,0x1
    80018d2e:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80018d32:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80018d36:	4485                	li	s1,1
    80018d38:	01f49793          	sll	a5,s1,0x1f
    80018d3c:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80018d40:	08100793          	li	a5,129
    80018d44:	07e2                	sll	a5,a5,0x18
    80018d46:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HU);
    80018d4a:	4505                	li	a0,1
    80018d4c:	d93e70ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80018d50:	0ff0000f          	fence
    80018d54:	00024417          	auipc	s0,0x24
    80018d58:	2bc40413          	add	s0,s0,700 # 8003d010 <excpt>
    80018d5c:	00941023          	sh	s1,0(s0)
    80018d60:	00024797          	auipc	a5,0x24
    80018d64:	2e07b423          	sd	zero,744(a5) # 8003d048 <excpt+0x38>
    80018d68:	0ff0000f          	fence
    
    TEST_EXEC_EXCEPT(0x80000100 << 2);
    80018d6c:	40000793          	li	a5,1024
    80018d70:	00000297          	auipc	t0,0x0
    80018d74:	00c28293          	add	t0,t0,12 # 80018d7c <instruction_access_fault_3+0xac>
    80018d78:	02543c23          	sd	t0,56(s0)
    80018d7c:	8782                	jr	a5

    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    80018d7e:	08200593          	li	a1,130
    80018d82:	0000a617          	auipc	a2,0xa
    80018d86:	f4660613          	add	a2,a2,-186 # 80022cc8 <__func__.1+0x64d0>
    80018d8a:	00004517          	auipc	a0,0x4
    80018d8e:	d6e50513          	add	a0,a0,-658 # 8001caf8 <__func__.1+0x300>
    80018d92:	1d0020ef          	jal	8001af62 <printf>
    80018d96:	00144783          	lbu	a5,1(s0)
    80018d9a:	00004597          	auipc	a1,0x4
    80018d9e:	d3658593          	add	a1,a1,-714 # 8001cad0 <__func__.1+0x2d8>
    80018da2:	c781                	beqz	a5,80018daa <instruction_access_fault_3+0xda>
    80018da4:	641c                	ld	a5,8(s0)
    80018da6:	06978e63          	beq	a5,s1,80018e22 <instruction_access_fault_3+0x152>
    80018daa:	00004517          	auipc	a0,0x4
    80018dae:	d6650513          	add	a0,a0,-666 # 8001cb10 <__func__.1+0x318>
    80018db2:	1b0020ef          	jal	8001af62 <printf>
    80018db6:	00144783          	lbu	a5,1(s0)
    80018dba:	c789                	beqz	a5,80018dc4 <instruction_access_fault_3+0xf4>
    80018dbc:	6418                	ld	a4,8(s0)
    80018dbe:	4785                	li	a5,1
    80018dc0:	00f70c63          	beq	a4,a5,80018dd8 <instruction_access_fault_3+0x108>
    80018dc4:	00004517          	auipc	a0,0x4
    80018dc8:	d5450513          	add	a0,a0,-684 # 8001cb18 <__func__.1+0x320>
    80018dcc:	196020ef          	jal	8001af62 <printf>
    80018dd0:	02900513          	li	a0,41
    80018dd4:	060010ef          	jal	80019e34 <putchar>
    80018dd8:	4529                	li	a0,10
    80018dda:	05a010ef          	jal	80019e34 <putchar>
    80018dde:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    80018de2:	00004597          	auipc	a1,0x4
    80018de6:	cee58593          	add	a1,a1,-786 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    80018dea:	c491                	beqz	s1,80018df6 <instruction_access_fault_3+0x126>
    80018dec:	6418                	ld	a4,8(s0)
    80018dee:	4785                	li	a5,1
    80018df0:	02f70463          	beq	a4,a5,80018e18 <instruction_access_fault_3+0x148>
    80018df4:	4481                	li	s1,0
    TEST_END();
    80018df6:	00004517          	auipc	a0,0x4
    80018dfa:	d8250513          	add	a0,a0,-638 # 8001cb78 <__func__.1+0x380>
    80018dfe:	164020ef          	jal	8001af62 <printf>
    80018e02:	4511                	li	a0,4
    80018e04:	cdbe70ef          	jal	80000ade <goto_priv>
    80018e08:	d1ee80ef          	jal	80001326 <reset_state>
}
    80018e0c:	60e2                	ld	ra,24(sp)
    80018e0e:	6442                	ld	s0,16(sp)
    80018e10:	8526                	mv	a0,s1
    80018e12:	64a2                	ld	s1,8(sp)
    80018e14:	6105                	add	sp,sp,32
    80018e16:	8082                	ret
    TEST_END();
    80018e18:	00004597          	auipc	a1,0x4
    80018e1c:	ca858593          	add	a1,a1,-856 # 8001cac0 <__func__.1+0x2c8>
    80018e20:	bfd9                	j	80018df6 <instruction_access_fault_3+0x126>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    80018e22:	00004597          	auipc	a1,0x4
    80018e26:	c9e58593          	add	a1,a1,-866 # 8001cac0 <__func__.1+0x2c8>
    80018e2a:	b741                	j	80018daa <instruction_access_fault_3+0xda>

0000000080018e2c <instruction_access_fault_4>:

bool instruction_access_fault_4(){
    80018e2c:	1101                	add	sp,sp,-32

    TEST_START();
    80018e2e:	00004597          	auipc	a1,0x4
    80018e32:	88a58593          	add	a1,a1,-1910 # 8001c6b8 <__func__.6>
    80018e36:	00004517          	auipc	a0,0x4
    80018e3a:	caa50513          	add	a0,a0,-854 # 8001cae0 <__func__.1+0x2e8>
bool instruction_access_fault_4(){
    80018e3e:	ec06                	sd	ra,24(sp)
    80018e40:	e822                	sd	s0,16(sp)
    80018e42:	e426                	sd	s1,8(sp)
    TEST_START();
    80018e44:	11e020ef          	jal	8001af62 <printf>
    80018e48:	4529                	li	a0,10
    80018e4a:	7eb000ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    80018e4e:	4511                	li	a0,4
    80018e50:	c8fe70ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80018e54:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80018e58:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80018e5c:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80018e60:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80018e64:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80018e68:	08000793          	li	a5,128
    80018e6c:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80018e70:	10000793          	li	a5,256
    80018e74:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80018e78:	20000793          	li	a5,512
    80018e7c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80018e80:	40000793          	li	a5,1024
    80018e84:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80018e88:	6785                	lui	a5,0x1
    80018e8a:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80018e8e:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80018e92:	4485                	li	s1,1
    80018e94:	01f49793          	sll	a5,s1,0x1f
    80018e98:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80018e9c:	08100793          	li	a5,129
    80018ea0:	07e2                	sll	a5,a5,0x18
    80018ea2:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_VU);
    80018ea6:	4501                	li	a0,0
    80018ea8:	c37e70ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80018eac:	0ff0000f          	fence
    80018eb0:	00024417          	auipc	s0,0x24
    80018eb4:	16040413          	add	s0,s0,352 # 8003d010 <excpt>
    80018eb8:	00941023          	sh	s1,0(s0)
    80018ebc:	00024797          	auipc	a5,0x24
    80018ec0:	1807b623          	sd	zero,396(a5) # 8003d048 <excpt+0x38>
    80018ec4:	0ff0000f          	fence
    
    TEST_EXEC_EXCEPT(0x80000100 << 2);
    80018ec8:	40000793          	li	a5,1024
    80018ecc:	00000297          	auipc	t0,0x0
    80018ed0:	00c28293          	add	t0,t0,12 # 80018ed8 <instruction_access_fault_4+0xac>
    80018ed4:	02543c23          	sd	t0,56(s0)
    80018ed8:	8782                	jr	a5

    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    80018eda:	08200593          	li	a1,130
    80018ede:	0000a617          	auipc	a2,0xa
    80018ee2:	e3260613          	add	a2,a2,-462 # 80022d10 <__func__.1+0x6518>
    80018ee6:	00004517          	auipc	a0,0x4
    80018eea:	c1250513          	add	a0,a0,-1006 # 8001caf8 <__func__.1+0x300>
    80018eee:	074020ef          	jal	8001af62 <printf>
    80018ef2:	00144783          	lbu	a5,1(s0)
    80018ef6:	00004597          	auipc	a1,0x4
    80018efa:	bda58593          	add	a1,a1,-1062 # 8001cad0 <__func__.1+0x2d8>
    80018efe:	c781                	beqz	a5,80018f06 <instruction_access_fault_4+0xda>
    80018f00:	641c                	ld	a5,8(s0)
    80018f02:	06978e63          	beq	a5,s1,80018f7e <instruction_access_fault_4+0x152>
    80018f06:	00004517          	auipc	a0,0x4
    80018f0a:	c0a50513          	add	a0,a0,-1014 # 8001cb10 <__func__.1+0x318>
    80018f0e:	054020ef          	jal	8001af62 <printf>
    80018f12:	00144783          	lbu	a5,1(s0)
    80018f16:	c789                	beqz	a5,80018f20 <instruction_access_fault_4+0xf4>
    80018f18:	6418                	ld	a4,8(s0)
    80018f1a:	4785                	li	a5,1
    80018f1c:	00f70c63          	beq	a4,a5,80018f34 <instruction_access_fault_4+0x108>
    80018f20:	00004517          	auipc	a0,0x4
    80018f24:	bf850513          	add	a0,a0,-1032 # 8001cb18 <__func__.1+0x320>
    80018f28:	03a020ef          	jal	8001af62 <printf>
    80018f2c:	02900513          	li	a0,41
    80018f30:	705000ef          	jal	80019e34 <putchar>
    80018f34:	4529                	li	a0,10
    80018f36:	6ff000ef          	jal	80019e34 <putchar>
    80018f3a:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    80018f3e:	00004597          	auipc	a1,0x4
    80018f42:	b9258593          	add	a1,a1,-1134 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    80018f46:	c491                	beqz	s1,80018f52 <instruction_access_fault_4+0x126>
    80018f48:	6418                	ld	a4,8(s0)
    80018f4a:	4785                	li	a5,1
    80018f4c:	02f70463          	beq	a4,a5,80018f74 <instruction_access_fault_4+0x148>
    80018f50:	4481                	li	s1,0
    TEST_END();
    80018f52:	00004517          	auipc	a0,0x4
    80018f56:	c2650513          	add	a0,a0,-986 # 8001cb78 <__func__.1+0x380>
    80018f5a:	008020ef          	jal	8001af62 <printf>
    80018f5e:	4511                	li	a0,4
    80018f60:	b7fe70ef          	jal	80000ade <goto_priv>
    80018f64:	bc2e80ef          	jal	80001326 <reset_state>
}
    80018f68:	60e2                	ld	ra,24(sp)
    80018f6a:	6442                	ld	s0,16(sp)
    80018f6c:	8526                	mv	a0,s1
    80018f6e:	64a2                	ld	s1,8(sp)
    80018f70:	6105                	add	sp,sp,32
    80018f72:	8082                	ret
    TEST_END();
    80018f74:	00004597          	auipc	a1,0x4
    80018f78:	b4c58593          	add	a1,a1,-1204 # 8001cac0 <__func__.1+0x2c8>
    80018f7c:	bfd9                	j	80018f52 <instruction_access_fault_4+0x126>
    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    80018f7e:	00004597          	auipc	a1,0x4
    80018f82:	b4258593          	add	a1,a1,-1214 # 8001cac0 <__func__.1+0x2c8>
    80018f86:	b741                	j	80018f06 <instruction_access_fault_4+0xda>

0000000080018f88 <instruction_access_fault_5>:

bool instruction_access_fault_5(){
    80018f88:	1141                	add	sp,sp,-16

    TEST_START();
    80018f8a:	00003597          	auipc	a1,0x3
    80018f8e:	74e58593          	add	a1,a1,1870 # 8001c6d8 <__func__.5>
    80018f92:	00004517          	auipc	a0,0x4
    80018f96:	b4e50513          	add	a0,a0,-1202 # 8001cae0 <__func__.1+0x2e8>
bool instruction_access_fault_5(){
    80018f9a:	e406                	sd	ra,8(sp)
    80018f9c:	e022                	sd	s0,0(sp)
    TEST_START();
    80018f9e:	7c5010ef          	jal	8001af62 <printf>
    80018fa2:	4529                	li	a0,10
    80018fa4:	691000ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    80018fa8:	4511                	li	a0,4
    80018faa:	b35e70ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80018fae:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80018fb2:	10000793          	li	a5,256
    80018fb6:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80018fba:	20000793          	li	a5,512
    80018fbe:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80018fc2:	40000793          	li	a5,1024
    80018fc6:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80018fca:	6785                	lui	a5,0x1
    80018fcc:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80018fd0:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80018fd4:	4705                	li	a4,1
    80018fd6:	01f71793          	sll	a5,a4,0x1f
    80018fda:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80018fde:	08100793          	li	a5,129
    80018fe2:	07e2                	sll	a5,a5,0x18
    80018fe4:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80018fe8:	67a1                	lui	a5,0x8
    80018fea:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    80018fee:	0ff0000f          	fence
    80018ff2:	00024417          	auipc	s0,0x24
    80018ff6:	01e40413          	add	s0,s0,30 # 8003d010 <excpt>
    80018ffa:	00e41023          	sh	a4,0(s0)
    80018ffe:	00024797          	auipc	a5,0x24
    80019002:	0407b523          	sd	zero,74(a5) # 8003d048 <excpt+0x38>
    80019006:	0ff0000f          	fence
    
    TEST_EXEC_EXCEPT(0x80000100 << 2);
    8001900a:	40000793          	li	a5,1024
    8001900e:	00000297          	auipc	t0,0x0
    80019012:	00c28293          	add	t0,t0,12 # 8001901a <instruction_access_fault_5+0x92>
    80019016:	02543c23          	sd	t0,56(s0)
    8001901a:	8782                	jr	a5

    printf("%d\n",excpt.triggered);
    8001901c:	00144583          	lbu	a1,1(s0)
    80019020:	00004517          	auipc	a0,0x4
    80019024:	48050513          	add	a0,a0,1152 # 8001d4a0 <__func__.1+0xca8>
    80019028:	73b010ef          	jal	8001af62 <printf>
    printf("%d\n",excpt.cause);
    8001902c:	640c                	ld	a1,8(s0)
    8001902e:	00004517          	auipc	a0,0x4
    80019032:	47250513          	add	a0,a0,1138 # 8001d4a0 <__func__.1+0xca8>
    80019036:	72d010ef          	jal	8001af62 <printf>

    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    8001903a:	08200593          	li	a1,130
    8001903e:	0000a617          	auipc	a2,0xa
    80019042:	d1a60613          	add	a2,a2,-742 # 80022d58 <__func__.1+0x6560>
    80019046:	00004517          	auipc	a0,0x4
    8001904a:	ab250513          	add	a0,a0,-1358 # 8001caf8 <__func__.1+0x300>
    8001904e:	715010ef          	jal	8001af62 <printf>
    80019052:	00144783          	lbu	a5,1(s0)
    80019056:	00004597          	auipc	a1,0x4
    8001905a:	a6a58593          	add	a1,a1,-1430 # 8001cac0 <__func__.1+0x2c8>
    8001905e:	c789                	beqz	a5,80019068 <instruction_access_fault_5+0xe0>
    80019060:	00004597          	auipc	a1,0x4
    80019064:	a7058593          	add	a1,a1,-1424 # 8001cad0 <__func__.1+0x2d8>
    80019068:	00004517          	auipc	a0,0x4
    8001906c:	aa850513          	add	a0,a0,-1368 # 8001cb10 <__func__.1+0x318>
    80019070:	6f3010ef          	jal	8001af62 <printf>
    80019074:	00144783          	lbu	a5,1(s0)
    80019078:	e3b1                	bnez	a5,800190bc <instruction_access_fault_5+0x134>
    8001907a:	4529                	li	a0,10
    8001907c:	5b9000ef          	jal	80019e34 <putchar>
    80019080:	00144783          	lbu	a5,1(s0)
    80019084:	e795                	bnez	a5,800190b0 <instruction_access_fault_5+0x128>
    80019086:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    80019088:	00004597          	auipc	a1,0x4
    8001908c:	a3858593          	add	a1,a1,-1480 # 8001cac0 <__func__.1+0x2c8>
    80019090:	00004517          	auipc	a0,0x4
    80019094:	ae850513          	add	a0,a0,-1304 # 8001cb78 <__func__.1+0x380>
    80019098:	6cb010ef          	jal	8001af62 <printf>
    8001909c:	4511                	li	a0,4
    8001909e:	a41e70ef          	jal	80000ade <goto_priv>
    800190a2:	a84e80ef          	jal	80001326 <reset_state>
}
    800190a6:	60a2                	ld	ra,8(sp)
    800190a8:	8522                	mv	a0,s0
    800190aa:	6402                	ld	s0,0(sp)
    800190ac:	0141                	add	sp,sp,16
    800190ae:	8082                	ret
    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    800190b0:	4401                	li	s0,0
    TEST_END();
    800190b2:	00004597          	auipc	a1,0x4
    800190b6:	a1e58593          	add	a1,a1,-1506 # 8001cad0 <__func__.1+0x2d8>
    800190ba:	bfd9                	j	80019090 <instruction_access_fault_5+0x108>
    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    800190bc:	00004517          	auipc	a0,0x4
    800190c0:	a5c50513          	add	a0,a0,-1444 # 8001cb18 <__func__.1+0x320>
    800190c4:	69f010ef          	jal	8001af62 <printf>
    800190c8:	02900513          	li	a0,41
    800190cc:	569000ef          	jal	80019e34 <putchar>
    800190d0:	b76d                	j	8001907a <instruction_access_fault_5+0xf2>

00000000800190d2 <instruction_access_fault_6>:


bool instruction_access_fault_6(){
    800190d2:	1101                	add	sp,sp,-32

    TEST_START();
    800190d4:	00003597          	auipc	a1,0x3
    800190d8:	62458593          	add	a1,a1,1572 # 8001c6f8 <__func__.4>
    800190dc:	00004517          	auipc	a0,0x4
    800190e0:	a0450513          	add	a0,a0,-1532 # 8001cae0 <__func__.1+0x2e8>
bool instruction_access_fault_6(){
    800190e4:	ec06                	sd	ra,24(sp)
    800190e6:	e822                	sd	s0,16(sp)
    800190e8:	e426                	sd	s1,8(sp)
    TEST_START();
    800190ea:	679010ef          	jal	8001af62 <printf>
    800190ee:	4529                	li	a0,10
    800190f0:	545000ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    800190f4:	4511                	li	a0,4
    800190f6:	9e9e70ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    800190fa:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    800190fe:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80019102:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80019106:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001910a:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001910e:	08000793          	li	a5,128
    80019112:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80019116:	10000793          	li	a5,256
    8001911a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001911e:	20000793          	li	a5,512
    80019122:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80019126:	40000793          	li	a5,1024
    8001912a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001912e:	6785                	lui	a5,0x1
    80019130:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80019134:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80019138:	67a1                	lui	a5,0x8
    8001913a:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001913e:	4485                	li	s1,1
    80019140:	01f49793          	sll	a5,s1,0x1f
    80019144:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80019148:	08100793          	li	a5,129
    8001914c:	07e2                	sll	a5,a5,0x18
    8001914e:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HS);
    80019152:	450d                	li	a0,3
    80019154:	98be70ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80019158:	0ff0000f          	fence
    8001915c:	00024417          	auipc	s0,0x24
    80019160:	eb440413          	add	s0,s0,-332 # 8003d010 <excpt>
    80019164:	00941023          	sh	s1,0(s0)
    80019168:	00024797          	auipc	a5,0x24
    8001916c:	ee07b023          	sd	zero,-288(a5) # 8003d048 <excpt+0x38>
    80019170:	0ff0000f          	fence
    
    TEST_EXEC_EXCEPT(0x80000100 << 2);
    80019174:	40000793          	li	a5,1024
    80019178:	00000297          	auipc	t0,0x0
    8001917c:	00c28293          	add	t0,t0,12 # 80019184 <instruction_access_fault_6+0xb2>
    80019180:	02543c23          	sd	t0,56(s0)
    80019184:	8782                	jr	a5

    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    80019186:	08200593          	li	a1,130
    8001918a:	0000a617          	auipc	a2,0xa
    8001918e:	c1660613          	add	a2,a2,-1002 # 80022da0 <__func__.1+0x65a8>
    80019192:	00004517          	auipc	a0,0x4
    80019196:	96650513          	add	a0,a0,-1690 # 8001caf8 <__func__.1+0x300>
    8001919a:	5c9010ef          	jal	8001af62 <printf>
    8001919e:	00144783          	lbu	a5,1(s0)
    800191a2:	00004597          	auipc	a1,0x4
    800191a6:	92e58593          	add	a1,a1,-1746 # 8001cad0 <__func__.1+0x2d8>
    800191aa:	c781                	beqz	a5,800191b2 <instruction_access_fault_6+0xe0>
    800191ac:	641c                	ld	a5,8(s0)
    800191ae:	06978e63          	beq	a5,s1,8001922a <instruction_access_fault_6+0x158>
    800191b2:	00004517          	auipc	a0,0x4
    800191b6:	95e50513          	add	a0,a0,-1698 # 8001cb10 <__func__.1+0x318>
    800191ba:	5a9010ef          	jal	8001af62 <printf>
    800191be:	00144783          	lbu	a5,1(s0)
    800191c2:	c789                	beqz	a5,800191cc <instruction_access_fault_6+0xfa>
    800191c4:	6418                	ld	a4,8(s0)
    800191c6:	4785                	li	a5,1
    800191c8:	00f70c63          	beq	a4,a5,800191e0 <instruction_access_fault_6+0x10e>
    800191cc:	00004517          	auipc	a0,0x4
    800191d0:	94c50513          	add	a0,a0,-1716 # 8001cb18 <__func__.1+0x320>
    800191d4:	58f010ef          	jal	8001af62 <printf>
    800191d8:	02900513          	li	a0,41
    800191dc:	459000ef          	jal	80019e34 <putchar>
    800191e0:	4529                	li	a0,10
    800191e2:	453000ef          	jal	80019e34 <putchar>
    800191e6:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    800191ea:	00004597          	auipc	a1,0x4
    800191ee:	8e658593          	add	a1,a1,-1818 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    800191f2:	c491                	beqz	s1,800191fe <instruction_access_fault_6+0x12c>
    800191f4:	6418                	ld	a4,8(s0)
    800191f6:	4785                	li	a5,1
    800191f8:	02f70463          	beq	a4,a5,80019220 <instruction_access_fault_6+0x14e>
    800191fc:	4481                	li	s1,0
    TEST_END();
    800191fe:	00004517          	auipc	a0,0x4
    80019202:	97a50513          	add	a0,a0,-1670 # 8001cb78 <__func__.1+0x380>
    80019206:	55d010ef          	jal	8001af62 <printf>
    8001920a:	4511                	li	a0,4
    8001920c:	8d3e70ef          	jal	80000ade <goto_priv>
    80019210:	916e80ef          	jal	80001326 <reset_state>
}
    80019214:	60e2                	ld	ra,24(sp)
    80019216:	6442                	ld	s0,16(sp)
    80019218:	8526                	mv	a0,s1
    8001921a:	64a2                	ld	s1,8(sp)
    8001921c:	6105                	add	sp,sp,32
    8001921e:	8082                	ret
    TEST_END();
    80019220:	00004597          	auipc	a1,0x4
    80019224:	8a058593          	add	a1,a1,-1888 # 8001cac0 <__func__.1+0x2c8>
    80019228:	bfd9                	j	800191fe <instruction_access_fault_6+0x12c>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001922a:	00004597          	auipc	a1,0x4
    8001922e:	89658593          	add	a1,a1,-1898 # 8001cac0 <__func__.1+0x2c8>
    80019232:	b741                	j	800191b2 <instruction_access_fault_6+0xe0>

0000000080019234 <instruction_access_fault_7>:


bool instruction_access_fault_7(){
    80019234:	1101                	add	sp,sp,-32

    TEST_START();
    80019236:	00003597          	auipc	a1,0x3
    8001923a:	4e258593          	add	a1,a1,1250 # 8001c718 <__func__.3>
    8001923e:	00004517          	auipc	a0,0x4
    80019242:	8a250513          	add	a0,a0,-1886 # 8001cae0 <__func__.1+0x2e8>
bool instruction_access_fault_7(){
    80019246:	ec06                	sd	ra,24(sp)
    80019248:	e822                	sd	s0,16(sp)
    8001924a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001924c:	517010ef          	jal	8001af62 <printf>
    80019250:	4529                	li	a0,10
    80019252:	3e3000ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    80019256:	4511                	li	a0,4
    80019258:	887e70ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001925c:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80019260:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80019264:	3a016073          	csrs	pmpcfg0,2
    CSRC(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80019268:	3a027073          	csrc	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001926c:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80019270:	08000793          	li	a5,128
    80019274:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80019278:	10000793          	li	a5,256
    8001927c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80019280:	20000793          	li	a5,512
    80019284:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80019288:	40000793          	li	a5,1024
    8001928c:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80019290:	6785                	lui	a5,0x1
    80019292:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80019296:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001929a:	67a1                	lui	a5,0x8
    8001929c:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    800192a0:	4485                	li	s1,1
    800192a2:	01f49793          	sll	a5,s1,0x1f
    800192a6:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    800192aa:	08100793          	li	a5,129
    800192ae:	07e2                	sll	a5,a5,0x18
    800192b0:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HU);
    800192b4:	4505                	li	a0,1
    800192b6:	829e70ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    800192ba:	0ff0000f          	fence
    800192be:	00024417          	auipc	s0,0x24
    800192c2:	d5240413          	add	s0,s0,-686 # 8003d010 <excpt>
    800192c6:	00941023          	sh	s1,0(s0)
    800192ca:	00024797          	auipc	a5,0x24
    800192ce:	d607bf23          	sd	zero,-642(a5) # 8003d048 <excpt+0x38>
    800192d2:	0ff0000f          	fence
    
    TEST_EXEC_EXCEPT(0x80000100 << 2);
    800192d6:	40000793          	li	a5,1024
    800192da:	00000297          	auipc	t0,0x0
    800192de:	00c28293          	add	t0,t0,12 # 800192e6 <instruction_access_fault_7+0xb2>
    800192e2:	02543c23          	sd	t0,56(s0)
    800192e6:	8782                	jr	a5

    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    800192e8:	08200593          	li	a1,130
    800192ec:	0000a617          	auipc	a2,0xa
    800192f0:	afc60613          	add	a2,a2,-1284 # 80022de8 <__func__.1+0x65f0>
    800192f4:	00004517          	auipc	a0,0x4
    800192f8:	80450513          	add	a0,a0,-2044 # 8001caf8 <__func__.1+0x300>
    800192fc:	467010ef          	jal	8001af62 <printf>
    80019300:	00144783          	lbu	a5,1(s0)
    80019304:	00003597          	auipc	a1,0x3
    80019308:	7cc58593          	add	a1,a1,1996 # 8001cad0 <__func__.1+0x2d8>
    8001930c:	c781                	beqz	a5,80019314 <instruction_access_fault_7+0xe0>
    8001930e:	641c                	ld	a5,8(s0)
    80019310:	06978e63          	beq	a5,s1,8001938c <instruction_access_fault_7+0x158>
    80019314:	00003517          	auipc	a0,0x3
    80019318:	7fc50513          	add	a0,a0,2044 # 8001cb10 <__func__.1+0x318>
    8001931c:	447010ef          	jal	8001af62 <printf>
    80019320:	00144783          	lbu	a5,1(s0)
    80019324:	c789                	beqz	a5,8001932e <instruction_access_fault_7+0xfa>
    80019326:	6418                	ld	a4,8(s0)
    80019328:	4785                	li	a5,1
    8001932a:	00f70c63          	beq	a4,a5,80019342 <instruction_access_fault_7+0x10e>
    8001932e:	00003517          	auipc	a0,0x3
    80019332:	7ea50513          	add	a0,a0,2026 # 8001cb18 <__func__.1+0x320>
    80019336:	42d010ef          	jal	8001af62 <printf>
    8001933a:	02900513          	li	a0,41
    8001933e:	2f7000ef          	jal	80019e34 <putchar>
    80019342:	4529                	li	a0,10
    80019344:	2f1000ef          	jal	80019e34 <putchar>
    80019348:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001934c:	00003597          	auipc	a1,0x3
    80019350:	78458593          	add	a1,a1,1924 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    80019354:	c491                	beqz	s1,80019360 <instruction_access_fault_7+0x12c>
    80019356:	6418                	ld	a4,8(s0)
    80019358:	4785                	li	a5,1
    8001935a:	02f70463          	beq	a4,a5,80019382 <instruction_access_fault_7+0x14e>
    8001935e:	4481                	li	s1,0
    TEST_END();
    80019360:	00004517          	auipc	a0,0x4
    80019364:	81850513          	add	a0,a0,-2024 # 8001cb78 <__func__.1+0x380>
    80019368:	3fb010ef          	jal	8001af62 <printf>
    8001936c:	4511                	li	a0,4
    8001936e:	f70e70ef          	jal	80000ade <goto_priv>
    80019372:	fb5e70ef          	jal	80001326 <reset_state>
}
    80019376:	60e2                	ld	ra,24(sp)
    80019378:	6442                	ld	s0,16(sp)
    8001937a:	8526                	mv	a0,s1
    8001937c:	64a2                	ld	s1,8(sp)
    8001937e:	6105                	add	sp,sp,32
    80019380:	8082                	ret
    TEST_END();
    80019382:	00003597          	auipc	a1,0x3
    80019386:	73e58593          	add	a1,a1,1854 # 8001cac0 <__func__.1+0x2c8>
    8001938a:	bfd9                	j	80019360 <instruction_access_fault_7+0x12c>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001938c:	00003597          	auipc	a1,0x3
    80019390:	73458593          	add	a1,a1,1844 # 8001cac0 <__func__.1+0x2c8>
    80019394:	b741                	j	80019314 <instruction_access_fault_7+0xe0>

0000000080019396 <instruction_access_fault_8>:

bool instruction_access_fault_8(){
    80019396:	1101                	add	sp,sp,-32

    TEST_START();
    80019398:	00003597          	auipc	a1,0x3
    8001939c:	3a058593          	add	a1,a1,928 # 8001c738 <__func__.2>
    800193a0:	00003517          	auipc	a0,0x3
    800193a4:	74050513          	add	a0,a0,1856 # 8001cae0 <__func__.1+0x2e8>
bool instruction_access_fault_8(){
    800193a8:	ec06                	sd	ra,24(sp)
    800193aa:	e822                	sd	s0,16(sp)
    800193ac:	e426                	sd	s1,8(sp)
    TEST_START();
    800193ae:	3b5010ef          	jal	8001af62 <printf>
    800193b2:	4529                	li	a0,10
    800193b4:	281000ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    800193b8:	4511                	li	a0,4
    800193ba:	f24e70ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    800193be:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    800193c2:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    800193c6:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    800193ca:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    800193ce:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    800193d2:	08000793          	li	a5,128
    800193d6:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    800193da:	10000793          	li	a5,256
    800193de:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    800193e2:	20000793          	li	a5,512
    800193e6:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    800193ea:	40000793          	li	a5,1024
    800193ee:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    800193f2:	6785                	lui	a5,0x1
    800193f4:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800193f8:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    800193fc:	67a1                	lui	a5,0x8
    800193fe:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80019402:	4485                	li	s1,1
    80019404:	01f49793          	sll	a5,s1,0x1f
    80019408:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001940c:	08100793          	li	a5,129
    80019410:	07e2                	sll	a5,a5,0x18
    80019412:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_VU);
    80019416:	4501                	li	a0,0
    80019418:	ec6e70ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001941c:	0ff0000f          	fence
    80019420:	00024417          	auipc	s0,0x24
    80019424:	bf040413          	add	s0,s0,-1040 # 8003d010 <excpt>
    80019428:	00941023          	sh	s1,0(s0)
    8001942c:	00024797          	auipc	a5,0x24
    80019430:	c007be23          	sd	zero,-996(a5) # 8003d048 <excpt+0x38>
    80019434:	0ff0000f          	fence
    
    TEST_EXEC_EXCEPT(0x80000100 << 2);
    80019438:	40000793          	li	a5,1024
    8001943c:	00000297          	auipc	t0,0x0
    80019440:	00c28293          	add	t0,t0,12 # 80019448 <instruction_access_fault_8+0xb2>
    80019444:	02543c23          	sd	t0,56(s0)
    80019448:	8782                	jr	a5

    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001944a:	08200593          	li	a1,130
    8001944e:	0000a617          	auipc	a2,0xa
    80019452:	9e260613          	add	a2,a2,-1566 # 80022e30 <__func__.1+0x6638>
    80019456:	00003517          	auipc	a0,0x3
    8001945a:	6a250513          	add	a0,a0,1698 # 8001caf8 <__func__.1+0x300>
    8001945e:	305010ef          	jal	8001af62 <printf>
    80019462:	00144783          	lbu	a5,1(s0)
    80019466:	00003597          	auipc	a1,0x3
    8001946a:	66a58593          	add	a1,a1,1642 # 8001cad0 <__func__.1+0x2d8>
    8001946e:	c781                	beqz	a5,80019476 <instruction_access_fault_8+0xe0>
    80019470:	641c                	ld	a5,8(s0)
    80019472:	06978e63          	beq	a5,s1,800194ee <instruction_access_fault_8+0x158>
    80019476:	00003517          	auipc	a0,0x3
    8001947a:	69a50513          	add	a0,a0,1690 # 8001cb10 <__func__.1+0x318>
    8001947e:	2e5010ef          	jal	8001af62 <printf>
    80019482:	00144783          	lbu	a5,1(s0)
    80019486:	c789                	beqz	a5,80019490 <instruction_access_fault_8+0xfa>
    80019488:	6418                	ld	a4,8(s0)
    8001948a:	4785                	li	a5,1
    8001948c:	00f70c63          	beq	a4,a5,800194a4 <instruction_access_fault_8+0x10e>
    80019490:	00003517          	auipc	a0,0x3
    80019494:	68850513          	add	a0,a0,1672 # 8001cb18 <__func__.1+0x320>
    80019498:	2cb010ef          	jal	8001af62 <printf>
    8001949c:	02900513          	li	a0,41
    800194a0:	195000ef          	jal	80019e34 <putchar>
    800194a4:	4529                	li	a0,10
    800194a6:	18f000ef          	jal	80019e34 <putchar>
    800194aa:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    800194ae:	00003597          	auipc	a1,0x3
    800194b2:	62258593          	add	a1,a1,1570 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    800194b6:	c491                	beqz	s1,800194c2 <instruction_access_fault_8+0x12c>
    800194b8:	6418                	ld	a4,8(s0)
    800194ba:	4785                	li	a5,1
    800194bc:	02f70463          	beq	a4,a5,800194e4 <instruction_access_fault_8+0x14e>
    800194c0:	4481                	li	s1,0
    TEST_END();
    800194c2:	00003517          	auipc	a0,0x3
    800194c6:	6b650513          	add	a0,a0,1718 # 8001cb78 <__func__.1+0x380>
    800194ca:	299010ef          	jal	8001af62 <printf>
    800194ce:	4511                	li	a0,4
    800194d0:	e0ee70ef          	jal	80000ade <goto_priv>
    800194d4:	e53e70ef          	jal	80001326 <reset_state>
}
    800194d8:	60e2                	ld	ra,24(sp)
    800194da:	6442                	ld	s0,16(sp)
    800194dc:	8526                	mv	a0,s1
    800194de:	64a2                	ld	s1,8(sp)
    800194e0:	6105                	add	sp,sp,32
    800194e2:	8082                	ret
    TEST_END();
    800194e4:	00003597          	auipc	a1,0x3
    800194e8:	5dc58593          	add	a1,a1,1500 # 8001cac0 <__func__.1+0x2c8>
    800194ec:	bfd9                	j	800194c2 <instruction_access_fault_8+0x12c>
    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    800194ee:	00003597          	auipc	a1,0x3
    800194f2:	5d258593          	add	a1,a1,1490 # 8001cac0 <__func__.1+0x2c8>
    800194f6:	b741                	j	80019476 <instruction_access_fault_8+0xe0>

00000000800194f8 <instruction_access_fault_9>:

bool instruction_access_fault_9(){
    800194f8:	1101                	add	sp,sp,-32

    TEST_START();
    800194fa:	00003597          	auipc	a1,0x3
    800194fe:	25e58593          	add	a1,a1,606 # 8001c758 <__func__.1>
    80019502:	00003517          	auipc	a0,0x3
    80019506:	5de50513          	add	a0,a0,1502 # 8001cae0 <__func__.1+0x2e8>
bool instruction_access_fault_9(){
    8001950a:	ec06                	sd	ra,24(sp)
    8001950c:	e822                	sd	s0,16(sp)
    8001950e:	e426                	sd	s1,8(sp)
    TEST_START();
    80019510:	253010ef          	jal	8001af62 <printf>
    80019514:	4529                	li	a0,10
    80019516:	11f000ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    8001951a:	4511                	li	a0,4
    8001951c:	dc2e70ef          	jal	80000ade <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80019520:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80019524:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80019528:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001952c:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80019530:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80019534:	08000793          	li	a5,128
    80019538:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001953c:	10000793          	li	a5,256
    80019540:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80019544:	20000793          	li	a5,512
    80019548:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001954c:	40000793          	li	a5,1024
    80019550:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80019554:	6785                	lui	a5,0x1
    80019556:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001955a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001955e:	67a1                	lui	a5,0x8
    80019560:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80019564:	4485                	li	s1,1
    80019566:	01f49793          	sll	a5,s1,0x1f
    8001956a:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001956e:	08100793          	li	a5,129
    80019572:	07e2                	sll	a5,a5,0x18
    80019574:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_VU);
    80019578:	4501                	li	a0,0
    8001957a:	d64e70ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001957e:	0ff0000f          	fence
    80019582:	00024417          	auipc	s0,0x24
    80019586:	a8e40413          	add	s0,s0,-1394 # 8003d010 <excpt>
    8001958a:	00941023          	sh	s1,0(s0)
    8001958e:	00024797          	auipc	a5,0x24
    80019592:	aa07bd23          	sd	zero,-1350(a5) # 8003d048 <excpt+0x38>
    80019596:	0ff0000f          	fence
    
    TEST_EXEC_EXCEPT(0x1fffffffe << 2);
    8001959a:	02349793          	sll	a5,s1,0x23
    8001959e:	17e1                	add	a5,a5,-8
    800195a0:	00000297          	auipc	t0,0x0
    800195a4:	00c28293          	add	t0,t0,12 # 800195ac <instruction_access_fault_9+0xb4>
    800195a8:	02543c23          	sd	t0,56(s0)
    800195ac:	8782                	jr	a5

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    800195ae:	08200593          	li	a1,130
    800195b2:	0000a617          	auipc	a2,0xa
    800195b6:	8b660613          	add	a2,a2,-1866 # 80022e68 <__func__.1+0x6670>
    800195ba:	00003517          	auipc	a0,0x3
    800195be:	53e50513          	add	a0,a0,1342 # 8001caf8 <__func__.1+0x300>
    800195c2:	1a1010ef          	jal	8001af62 <printf>
    800195c6:	00144783          	lbu	a5,1(s0)
    800195ca:	00003597          	auipc	a1,0x3
    800195ce:	50658593          	add	a1,a1,1286 # 8001cad0 <__func__.1+0x2d8>
    800195d2:	c781                	beqz	a5,800195da <instruction_access_fault_9+0xe2>
    800195d4:	641c                	ld	a5,8(s0)
    800195d6:	06978e63          	beq	a5,s1,80019652 <instruction_access_fault_9+0x15a>
    800195da:	00003517          	auipc	a0,0x3
    800195de:	53650513          	add	a0,a0,1334 # 8001cb10 <__func__.1+0x318>
    800195e2:	181010ef          	jal	8001af62 <printf>
    800195e6:	00144783          	lbu	a5,1(s0)
    800195ea:	c789                	beqz	a5,800195f4 <instruction_access_fault_9+0xfc>
    800195ec:	6418                	ld	a4,8(s0)
    800195ee:	4785                	li	a5,1
    800195f0:	00f70c63          	beq	a4,a5,80019608 <instruction_access_fault_9+0x110>
    800195f4:	00003517          	auipc	a0,0x3
    800195f8:	52450513          	add	a0,a0,1316 # 8001cb18 <__func__.1+0x320>
    800195fc:	167010ef          	jal	8001af62 <printf>
    80019600:	02900513          	li	a0,41
    80019604:	031000ef          	jal	80019e34 <putchar>
    80019608:	4529                	li	a0,10
    8001960a:	02b000ef          	jal	80019e34 <putchar>
    8001960e:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    80019612:	00003597          	auipc	a1,0x3
    80019616:	4be58593          	add	a1,a1,1214 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    8001961a:	c491                	beqz	s1,80019626 <instruction_access_fault_9+0x12e>
    8001961c:	6418                	ld	a4,8(s0)
    8001961e:	4785                	li	a5,1
    80019620:	02f70463          	beq	a4,a5,80019648 <instruction_access_fault_9+0x150>
    80019624:	4481                	li	s1,0
    TEST_END();
    80019626:	00003517          	auipc	a0,0x3
    8001962a:	55250513          	add	a0,a0,1362 # 8001cb78 <__func__.1+0x380>
    8001962e:	135010ef          	jal	8001af62 <printf>
    80019632:	4511                	li	a0,4
    80019634:	caae70ef          	jal	80000ade <goto_priv>
    80019638:	cefe70ef          	jal	80001326 <reset_state>
}
    8001963c:	60e2                	ld	ra,24(sp)
    8001963e:	6442                	ld	s0,16(sp)
    80019640:	8526                	mv	a0,s1
    80019642:	64a2                	ld	s1,8(sp)
    80019644:	6105                	add	sp,sp,32
    80019646:	8082                	ret
    TEST_END();
    80019648:	00003597          	auipc	a1,0x3
    8001964c:	47858593          	add	a1,a1,1144 # 8001cac0 <__func__.1+0x2c8>
    80019650:	bfd9                	j	80019626 <instruction_access_fault_9+0x12e>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    80019652:	00003597          	auipc	a1,0x3
    80019656:	46e58593          	add	a1,a1,1134 # 8001cac0 <__func__.1+0x2c8>
    8001965a:	b741                	j	800195da <instruction_access_fault_9+0xe2>

000000008001965c <instruction_access_fault_10>:

bool instruction_access_fault_10(){
    8001965c:	1101                	add	sp,sp,-32

    TEST_START();
    8001965e:	00003597          	auipc	a1,0x3
    80019662:	11a58593          	add	a1,a1,282 # 8001c778 <__func__.0>
    80019666:	00003517          	auipc	a0,0x3
    8001966a:	47a50513          	add	a0,a0,1146 # 8001cae0 <__func__.1+0x2e8>
bool instruction_access_fault_10(){
    8001966e:	ec06                	sd	ra,24(sp)
    80019670:	e822                	sd	s0,16(sp)
    80019672:	e426                	sd	s1,8(sp)
    TEST_START();
    80019674:	0ef010ef          	jal	8001af62 <printf>
    80019678:	4529                	li	a0,10
    8001967a:	7ba000ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_M);
    8001967e:	4511                	li	a0,4
    80019680:	c5ee70ef          	jal	80000ade <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80019684:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80019688:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001968c:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80019690:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80019694:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80019698:	08000793          	li	a5,128
    8001969c:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    800196a0:	4485                	li	s1,1
    800196a2:	01f49793          	sll	a5,s1,0x1f
    800196a6:	3b079073          	csrw	pmpaddr0,a5

    goto_priv(PRIV_M);
    800196aa:	4511                	li	a0,4
    800196ac:	c32e70ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    800196b0:	0ff0000f          	fence
    800196b4:	00024417          	auipc	s0,0x24
    800196b8:	95c40413          	add	s0,s0,-1700 # 8003d010 <excpt>
    800196bc:	00941023          	sh	s1,0(s0)
    800196c0:	00024797          	auipc	a5,0x24
    800196c4:	9807b423          	sd	zero,-1656(a5) # 8003d048 <excpt+0x38>
    800196c8:	0ff0000f          	fence
    
    TEST_EXEC_EXCEPT(0x90000000 << 2);
    800196cc:	400007b7          	lui	a5,0x40000
    800196d0:	00000297          	auipc	t0,0x0
    800196d4:	00c28293          	add	t0,t0,12 # 800196dc <instruction_access_fault_10+0x80>
    800196d8:	02543c23          	sd	t0,56(s0)
    800196dc:	8782                	jr	a5

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    800196de:	08200593          	li	a1,130
    800196e2:	00009617          	auipc	a2,0x9
    800196e6:	7f660613          	add	a2,a2,2038 # 80022ed8 <__func__.1+0x66e0>
    800196ea:	00003517          	auipc	a0,0x3
    800196ee:	40e50513          	add	a0,a0,1038 # 8001caf8 <__func__.1+0x300>
    800196f2:	071010ef          	jal	8001af62 <printf>
    800196f6:	00144783          	lbu	a5,1(s0)
    800196fa:	00003597          	auipc	a1,0x3
    800196fe:	3d658593          	add	a1,a1,982 # 8001cad0 <__func__.1+0x2d8>
    80019702:	c781                	beqz	a5,8001970a <instruction_access_fault_10+0xae>
    80019704:	641c                	ld	a5,8(s0)
    80019706:	06978e63          	beq	a5,s1,80019782 <instruction_access_fault_10+0x126>
    8001970a:	00003517          	auipc	a0,0x3
    8001970e:	40650513          	add	a0,a0,1030 # 8001cb10 <__func__.1+0x318>
    80019712:	051010ef          	jal	8001af62 <printf>
    80019716:	00144783          	lbu	a5,1(s0)
    8001971a:	c789                	beqz	a5,80019724 <instruction_access_fault_10+0xc8>
    8001971c:	6418                	ld	a4,8(s0)
    8001971e:	4785                	li	a5,1
    80019720:	00f70c63          	beq	a4,a5,80019738 <instruction_access_fault_10+0xdc>
    80019724:	00003517          	auipc	a0,0x3
    80019728:	3f450513          	add	a0,a0,1012 # 8001cb18 <__func__.1+0x320>
    8001972c:	037010ef          	jal	8001af62 <printf>
    80019730:	02900513          	li	a0,41
    80019734:	700000ef          	jal	80019e34 <putchar>
    80019738:	4529                	li	a0,10
    8001973a:	6fa000ef          	jal	80019e34 <putchar>
    8001973e:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    80019742:	00003597          	auipc	a1,0x3
    80019746:	38e58593          	add	a1,a1,910 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    8001974a:	c491                	beqz	s1,80019756 <instruction_access_fault_10+0xfa>
    8001974c:	6418                	ld	a4,8(s0)
    8001974e:	4785                	li	a5,1
    80019750:	02f70463          	beq	a4,a5,80019778 <instruction_access_fault_10+0x11c>
    80019754:	4481                	li	s1,0
    TEST_END();
    80019756:	00003517          	auipc	a0,0x3
    8001975a:	42250513          	add	a0,a0,1058 # 8001cb78 <__func__.1+0x380>
    8001975e:	005010ef          	jal	8001af62 <printf>
    80019762:	4511                	li	a0,4
    80019764:	b7ae70ef          	jal	80000ade <goto_priv>
    80019768:	bbfe70ef          	jal	80001326 <reset_state>
    8001976c:	60e2                	ld	ra,24(sp)
    8001976e:	6442                	ld	s0,16(sp)
    80019770:	8526                	mv	a0,s1
    80019772:	64a2                	ld	s1,8(sp)
    80019774:	6105                	add	sp,sp,32
    80019776:	8082                	ret
    TEST_END();
    80019778:	00003597          	auipc	a1,0x3
    8001977c:	34858593          	add	a1,a1,840 # 8001cac0 <__func__.1+0x2c8>
    80019780:	bfd9                	j	80019756 <instruction_access_fault_10+0xfa>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    80019782:	00003597          	auipc	a1,0x3
    80019786:	33e58593          	add	a1,a1,830 # 8001cac0 <__func__.1+0x2c8>
    8001978a:	b741                	j	8001970a <instruction_access_fault_10+0xae>

000000008001978c <mstatus_csr_tests_1>:
#include <rvh_test.h>
#include <page_tables.h>

bool mstatus_csr_tests_1(){
    8001978c:	1101                	add	sp,sp,-32

TEST_START();
    8001978e:	00003597          	auipc	a1,0x3
    80019792:	00a58593          	add	a1,a1,10 # 8001c798 <__func__.6>
    80019796:	00003517          	auipc	a0,0x3
    8001979a:	34a50513          	add	a0,a0,842 # 8001cae0 <__func__.1+0x2e8>
bool mstatus_csr_tests_1(){
    8001979e:	ec06                	sd	ra,24(sp)
    800197a0:	e822                	sd	s0,16(sp)
    800197a2:	e426                	sd	s1,8(sp)
TEST_START();
    800197a4:	7be010ef          	jal	8001af62 <printf>
    800197a8:	4529                	li	a0,10
    800197aa:	68a000ef          	jal	80019e34 <putchar>
    printf("%d\n",x);
*/

//mstatus.SUM 阻止S对U访问，缺页异常
    
    goto_priv(PRIV_HS);
    800197ae:	450d                	li	a0,3
    800197b0:	b2ee70ef          	jal	80000ade <goto_priv>
    hspt_init();
    800197b4:	e2de60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800197b8:	86ee70ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    800197bc:	4509                	li	a0,2
    800197be:	b20e70ef          	jal	80000ade <goto_priv>
    vspt_init();
    800197c2:	ef3e60ef          	jal	800006b4 <vspt_init>

    //执行load指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    800197c6:	4511                	li	a0,4
    800197c8:	b16e70ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS, MSTATUS_SUM);
    800197cc:	000407b7          	lui	a5,0x40
    800197d0:	3007b073          	csrc	mstatus,a5
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    TEST_SETUP_EXCEPT();
    800197d4:	0ff0000f          	fence
    800197d8:	4785                	li	a5,1
    800197da:	00024417          	auipc	s0,0x24
    800197de:	83640413          	add	s0,s0,-1994 # 8003d010 <excpt>
    800197e2:	00f41023          	sh	a5,0(s0)
    800197e6:	00024797          	auipc	a5,0x24
    800197ea:	8607b123          	sd	zero,-1950(a5) # 8003d048 <excpt+0x38>
    800197ee:	0ff0000f          	fence

    goto_priv(PRIV_HS);
    800197f2:	450d                	li	a0,3
    800197f4:	aeae70ef          	jal	80000ade <goto_priv>
    asm volatile(
    800197f8:	000807b7          	lui	a5,0x80
    800197fc:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800197fe:	07b6                	sll	a5,a5,0xd
    80019800:	6c07c7f3          	.4byte	0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    80019804:	08200593          	li	a1,130
    80019808:	00009617          	auipc	a2,0x9
    8001980c:	73060613          	add	a2,a2,1840 # 80022f38 <__func__.1+0x6740>
    80019810:	00003517          	auipc	a0,0x3
    80019814:	2e850513          	add	a0,a0,744 # 8001caf8 <__func__.1+0x300>
    80019818:	74a010ef          	jal	8001af62 <printf>
    8001981c:	00144783          	lbu	a5,1(s0)
    80019820:	00003597          	auipc	a1,0x3
    80019824:	2b058593          	add	a1,a1,688 # 8001cad0 <__func__.1+0x2d8>
    80019828:	c789                	beqz	a5,80019832 <mstatus_csr_tests_1+0xa6>
    8001982a:	6418                	ld	a4,8(s0)
    8001982c:	47b5                	li	a5,13
    8001982e:	06f70e63          	beq	a4,a5,800198aa <mstatus_csr_tests_1+0x11e>
    80019832:	00003517          	auipc	a0,0x3
    80019836:	2de50513          	add	a0,a0,734 # 8001cb10 <__func__.1+0x318>
    8001983a:	728010ef          	jal	8001af62 <printf>
    8001983e:	00144783          	lbu	a5,1(s0)
    80019842:	c789                	beqz	a5,8001984c <mstatus_csr_tests_1+0xc0>
    80019844:	6418                	ld	a4,8(s0)
    80019846:	47b5                	li	a5,13
    80019848:	00f70c63          	beq	a4,a5,80019860 <mstatus_csr_tests_1+0xd4>
    8001984c:	00003517          	auipc	a0,0x3
    80019850:	2cc50513          	add	a0,a0,716 # 8001cb18 <__func__.1+0x320>
    80019854:	70e010ef          	jal	8001af62 <printf>
    80019858:	02900513          	li	a0,41
    8001985c:	5d8000ef          	jal	80019e34 <putchar>
    80019860:	4529                	li	a0,10
    80019862:	5d2000ef          	jal	80019e34 <putchar>
    80019866:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    8001986a:	00003597          	auipc	a1,0x3
    8001986e:	26658593          	add	a1,a1,614 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    80019872:	c491                	beqz	s1,8001987e <mstatus_csr_tests_1+0xf2>
    80019874:	6418                	ld	a4,8(s0)
    80019876:	47b5                	li	a5,13
    80019878:	02f70463          	beq	a4,a5,800198a0 <mstatus_csr_tests_1+0x114>
    8001987c:	4481                	li	s1,0
    TEST_END();
    8001987e:	00003517          	auipc	a0,0x3
    80019882:	2fa50513          	add	a0,a0,762 # 8001cb78 <__func__.1+0x380>
    80019886:	6dc010ef          	jal	8001af62 <printf>
    8001988a:	4511                	li	a0,4
    8001988c:	a52e70ef          	jal	80000ade <goto_priv>
    80019890:	a97e70ef          	jal	80001326 <reset_state>
}
    80019894:	60e2                	ld	ra,24(sp)
    80019896:	6442                	ld	s0,16(sp)
    80019898:	8526                	mv	a0,s1
    8001989a:	64a2                	ld	s1,8(sp)
    8001989c:	6105                	add	sp,sp,32
    8001989e:	8082                	ret
    TEST_END();
    800198a0:	00003597          	auipc	a1,0x3
    800198a4:	22058593          	add	a1,a1,544 # 8001cac0 <__func__.1+0x2c8>
    800198a8:	bfd9                	j	8001987e <mstatus_csr_tests_1+0xf2>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    800198aa:	00003597          	auipc	a1,0x3
    800198ae:	21658593          	add	a1,a1,534 # 8001cac0 <__func__.1+0x2c8>
    800198b2:	b741                	j	80019832 <mstatus_csr_tests_1+0xa6>

00000000800198b4 <mstatus_csr_tests_2>:

bool mstatus_csr_tests_2(){
    800198b4:	1141                	add	sp,sp,-16

    TEST_START();
    800198b6:	00003597          	auipc	a1,0x3
    800198ba:	efa58593          	add	a1,a1,-262 # 8001c7b0 <__func__.4>
    800198be:	00003517          	auipc	a0,0x3
    800198c2:	22250513          	add	a0,a0,546 # 8001cae0 <__func__.1+0x2e8>
bool mstatus_csr_tests_2(){
    800198c6:	e406                	sd	ra,8(sp)
    800198c8:	e022                	sd	s0,0(sp)
    TEST_START();
    800198ca:	698010ef          	jal	8001af62 <printf>
    800198ce:	4529                	li	a0,10
    800198d0:	564000ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    800198d4:	450d                	li	a0,3
    800198d6:	a08e70ef          	jal	80000ade <goto_priv>
    hspt_init();
    800198da:	d07e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800198de:	f49e60ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    800198e2:	4509                	li	a0,2
    800198e4:	9fae70ef          	jal	80000ade <goto_priv>
    vspt_init();
    800198e8:	dcde60ef          	jal	800006b4 <vspt_init>

    //执行load指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    800198ec:	4511                	li	a0,4
    800198ee:	9f0e70ef          	jal	80000ade <goto_priv>
    reset_state();
    800198f2:	a35e70ef          	jal	80001326 <reset_state>
    CSRS(CSR_MSTATUS, MSTATUS_SUM);
    800198f6:	000407b7          	lui	a5,0x40
    800198fa:	3007a073          	csrs	mstatus,a5
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    TEST_SETUP_EXCEPT();
    800198fe:	0ff0000f          	fence
    80019902:	4785                	li	a5,1
    80019904:	00023417          	auipc	s0,0x23
    80019908:	70c40413          	add	s0,s0,1804 # 8003d010 <excpt>
    8001990c:	00f41023          	sh	a5,0(s0)
    80019910:	00023797          	auipc	a5,0x23
    80019914:	7207bc23          	sd	zero,1848(a5) # 8003d048 <excpt+0x38>
    80019918:	0ff0000f          	fence

    goto_priv(PRIV_HS);
    8001991c:	450d                	li	a0,3
    8001991e:	9c0e70ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80019922:	4509                	li	a0,2
    80019924:	8dee70ef          	jal	80000a02 <set_prev_priv>
    80019928:	000807b7          	lui	a5,0x80
    8001992c:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001992e:	07b6                	sll	a5,a5,0xd
    80019930:	6c07c7f3          	.4byte	0x6c07c7f3
    hlvd(addr);
        printf("%d\n",excpt.triggered);
    80019934:	00144583          	lbu	a1,1(s0)
    80019938:	00004517          	auipc	a0,0x4
    8001993c:	b6850513          	add	a0,a0,-1176 # 8001d4a0 <__func__.1+0xca8>
    80019940:	622010ef          	jal	8001af62 <printf>
    printf("%d\n",excpt.cause);
    80019944:	640c                	ld	a1,8(s0)
    80019946:	00004517          	auipc	a0,0x4
    8001994a:	b5a50513          	add	a0,a0,-1190 # 8001d4a0 <__func__.1+0xca8>
    8001994e:	614010ef          	jal	8001af62 <printf>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    80019952:	08200593          	li	a1,130
    80019956:	00009617          	auipc	a2,0x9
    8001995a:	61a60613          	add	a2,a2,1562 # 80022f70 <__func__.1+0x6778>
    8001995e:	00003517          	auipc	a0,0x3
    80019962:	19a50513          	add	a0,a0,410 # 8001caf8 <__func__.1+0x300>
    80019966:	5fc010ef          	jal	8001af62 <printf>
    8001996a:	00144783          	lbu	a5,1(s0)
    8001996e:	00003597          	auipc	a1,0x3
    80019972:	15258593          	add	a1,a1,338 # 8001cac0 <__func__.1+0x2c8>
    80019976:	c789                	beqz	a5,80019980 <mstatus_csr_tests_2+0xcc>
    80019978:	00003597          	auipc	a1,0x3
    8001997c:	15858593          	add	a1,a1,344 # 8001cad0 <__func__.1+0x2d8>
    80019980:	00003517          	auipc	a0,0x3
    80019984:	19050513          	add	a0,a0,400 # 8001cb10 <__func__.1+0x318>
    80019988:	5da010ef          	jal	8001af62 <printf>
    8001998c:	00144783          	lbu	a5,1(s0)
    80019990:	e3b1                	bnez	a5,800199d4 <mstatus_csr_tests_2+0x120>
    80019992:	4529                	li	a0,10
    80019994:	4a0000ef          	jal	80019e34 <putchar>
    80019998:	00144783          	lbu	a5,1(s0)
    8001999c:	e795                	bnez	a5,800199c8 <mstatus_csr_tests_2+0x114>
    8001999e:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    800199a0:	00003597          	auipc	a1,0x3
    800199a4:	12058593          	add	a1,a1,288 # 8001cac0 <__func__.1+0x2c8>
    800199a8:	00003517          	auipc	a0,0x3
    800199ac:	1d050513          	add	a0,a0,464 # 8001cb78 <__func__.1+0x380>
    800199b0:	5b2010ef          	jal	8001af62 <printf>
    800199b4:	4511                	li	a0,4
    800199b6:	928e70ef          	jal	80000ade <goto_priv>
    800199ba:	96de70ef          	jal	80001326 <reset_state>
}
    800199be:	60a2                	ld	ra,8(sp)
    800199c0:	8522                	mv	a0,s0
    800199c2:	6402                	ld	s0,0(sp)
    800199c4:	0141                	add	sp,sp,16
    800199c6:	8082                	ret
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    800199c8:	4401                	li	s0,0
    TEST_END();
    800199ca:	00003597          	auipc	a1,0x3
    800199ce:	10658593          	add	a1,a1,262 # 8001cad0 <__func__.1+0x2d8>
    800199d2:	bfd9                	j	800199a8 <mstatus_csr_tests_2+0xf4>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    800199d4:	00003517          	auipc	a0,0x3
    800199d8:	14450513          	add	a0,a0,324 # 8001cb18 <__func__.1+0x320>
    800199dc:	586010ef          	jal	8001af62 <printf>
    800199e0:	02900513          	li	a0,41
    800199e4:	450000ef          	jal	80019e34 <putchar>
    800199e8:	b76d                	j	80019992 <mstatus_csr_tests_2+0xde>

00000000800199ea <mstatus_csr_tests_3>:

bool mstatus_csr_tests_3(){
    800199ea:	1101                	add	sp,sp,-32

    TEST_START();
    800199ec:	00003597          	auipc	a1,0x3
    800199f0:	ddc58593          	add	a1,a1,-548 # 8001c7c8 <__func__.3>
    800199f4:	00003517          	auipc	a0,0x3
    800199f8:	0ec50513          	add	a0,a0,236 # 8001cae0 <__func__.1+0x2e8>
bool mstatus_csr_tests_3(){
    800199fc:	ec06                	sd	ra,24(sp)
    800199fe:	e822                	sd	s0,16(sp)
    80019a00:	e426                	sd	s1,8(sp)
    TEST_START();
    80019a02:	560010ef          	jal	8001af62 <printf>
    80019a06:	4529                	li	a0,10
    80019a08:	42c000ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80019a0c:	450d                	li	a0,3
    80019a0e:	8d0e70ef          	jal	80000ade <goto_priv>
    hspt_init();
    80019a12:	bcfe60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019a16:	e11e60ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80019a1a:	4509                	li	a0,2
    80019a1c:	8c2e70ef          	jal	80000ade <goto_priv>
    vspt_init();
    80019a20:	c95e60ef          	jal	800006b4 <vspt_init>
    //执行load指令时，设置了mstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    goto_priv(PRIV_M);
    80019a24:	4511                	li	a0,4
    80019a26:	8b8e70ef          	jal	80000ade <goto_priv>
    reset_state();
    80019a2a:	8fde70ef          	jal	80001326 <reset_state>

    uintptr_t addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_MSTATUS, MSTATUS_MXR);
    80019a2e:	000807b7          	lui	a5,0x80
    80019a32:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_HS);
    80019a36:	450d                	li	a0,3
    80019a38:	8a6e70ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80019a3c:	4509                	li	a0,2
    80019a3e:	fc5e60ef          	jal	80000a02 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    80019a42:	0ff0000f          	fence
    80019a46:	4785                	li	a5,1
    80019a48:	00023417          	auipc	s0,0x23
    80019a4c:	5c840413          	add	s0,s0,1480 # 8003d010 <excpt>
    80019a50:	00f41023          	sh	a5,0(s0)
    80019a54:	00023797          	auipc	a5,0x23
    80019a58:	5e07ba23          	sd	zero,1524(a5) # 8003d048 <excpt+0x38>
    80019a5c:	0ff0000f          	fence
    80019a60:	001007b7          	lui	a5,0x100
    80019a64:	05f78793          	add	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    80019a68:	07b2                	sll	a5,a5,0xc
    80019a6a:	6c07c7f3          	.4byte	0x6c07c7f3
    hlvd(addr);   
    printf("%d\n",excpt.triggered);
    80019a6e:	00144583          	lbu	a1,1(s0)
    80019a72:	00004517          	auipc	a0,0x4
    80019a76:	a2e50513          	add	a0,a0,-1490 # 8001d4a0 <__func__.1+0xca8>
    80019a7a:	4e8010ef          	jal	8001af62 <printf>
    printf("%d\n",excpt.cause);
    80019a7e:	640c                	ld	a1,8(s0)
    80019a80:	00004517          	auipc	a0,0x4
    80019a84:	a2050513          	add	a0,a0,-1504 # 8001d4a0 <__func__.1+0xca8>
    80019a88:	4da010ef          	jal	8001af62 <printf>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    80019a8c:	08200593          	li	a1,130
    80019a90:	00009617          	auipc	a2,0x9
    80019a94:	51860613          	add	a2,a2,1304 # 80022fa8 <__func__.1+0x67b0>
    80019a98:	00003517          	auipc	a0,0x3
    80019a9c:	06050513          	add	a0,a0,96 # 8001caf8 <__func__.1+0x300>
    80019aa0:	4c2010ef          	jal	8001af62 <printf>
    80019aa4:	00144783          	lbu	a5,1(s0)
    80019aa8:	00003597          	auipc	a1,0x3
    80019aac:	02858593          	add	a1,a1,40 # 8001cad0 <__func__.1+0x2d8>
    80019ab0:	c789                	beqz	a5,80019aba <mstatus_csr_tests_3+0xd0>
    80019ab2:	6418                	ld	a4,8(s0)
    80019ab4:	47b5                	li	a5,13
    80019ab6:	06f70e63          	beq	a4,a5,80019b32 <mstatus_csr_tests_3+0x148>
    80019aba:	00003517          	auipc	a0,0x3
    80019abe:	05650513          	add	a0,a0,86 # 8001cb10 <__func__.1+0x318>
    80019ac2:	4a0010ef          	jal	8001af62 <printf>
    80019ac6:	00144783          	lbu	a5,1(s0)
    80019aca:	c789                	beqz	a5,80019ad4 <mstatus_csr_tests_3+0xea>
    80019acc:	6418                	ld	a4,8(s0)
    80019ace:	47b5                	li	a5,13
    80019ad0:	00f70c63          	beq	a4,a5,80019ae8 <mstatus_csr_tests_3+0xfe>
    80019ad4:	00003517          	auipc	a0,0x3
    80019ad8:	04450513          	add	a0,a0,68 # 8001cb18 <__func__.1+0x320>
    80019adc:	486010ef          	jal	8001af62 <printf>
    80019ae0:	02900513          	li	a0,41
    80019ae4:	350000ef          	jal	80019e34 <putchar>
    80019ae8:	4529                	li	a0,10
    80019aea:	34a000ef          	jal	80019e34 <putchar>
    80019aee:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );


    TEST_END();
    80019af2:	00003597          	auipc	a1,0x3
    80019af6:	fde58593          	add	a1,a1,-34 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    80019afa:	c491                	beqz	s1,80019b06 <mstatus_csr_tests_3+0x11c>
    80019afc:	6418                	ld	a4,8(s0)
    80019afe:	47b5                	li	a5,13
    80019b00:	02f70463          	beq	a4,a5,80019b28 <mstatus_csr_tests_3+0x13e>
    80019b04:	4481                	li	s1,0
    TEST_END();
    80019b06:	00003517          	auipc	a0,0x3
    80019b0a:	07250513          	add	a0,a0,114 # 8001cb78 <__func__.1+0x380>
    80019b0e:	454010ef          	jal	8001af62 <printf>
    80019b12:	4511                	li	a0,4
    80019b14:	fcbe60ef          	jal	80000ade <goto_priv>
    80019b18:	80fe70ef          	jal	80001326 <reset_state>
}
    80019b1c:	60e2                	ld	ra,24(sp)
    80019b1e:	6442                	ld	s0,16(sp)
    80019b20:	8526                	mv	a0,s1
    80019b22:	64a2                	ld	s1,8(sp)
    80019b24:	6105                	add	sp,sp,32
    80019b26:	8082                	ret
    TEST_END();
    80019b28:	00003597          	auipc	a1,0x3
    80019b2c:	f9858593          	add	a1,a1,-104 # 8001cac0 <__func__.1+0x2c8>
    80019b30:	bfd9                	j	80019b06 <mstatus_csr_tests_3+0x11c>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    80019b32:	00003597          	auipc	a1,0x3
    80019b36:	f8e58593          	add	a1,a1,-114 # 8001cac0 <__func__.1+0x2c8>
    80019b3a:	b741                	j	80019aba <mstatus_csr_tests_3+0xd0>

0000000080019b3c <mstatus_csr_tests_4>:

bool mstatus_csr_tests_4(){
    80019b3c:	1101                	add	sp,sp,-32

    TEST_START();
    80019b3e:	00003597          	auipc	a1,0x3
    80019b42:	ca258593          	add	a1,a1,-862 # 8001c7e0 <__func__.2>
    80019b46:	00003517          	auipc	a0,0x3
    80019b4a:	f9a50513          	add	a0,a0,-102 # 8001cae0 <__func__.1+0x2e8>
bool mstatus_csr_tests_4(){
    80019b4e:	ec06                	sd	ra,24(sp)
    80019b50:	e822                	sd	s0,16(sp)
    80019b52:	e426                	sd	s1,8(sp)
    TEST_START();
    80019b54:	40e010ef          	jal	8001af62 <printf>
    80019b58:	4529                	li	a0,10
    80019b5a:	2da000ef          	jal	80019e34 <putchar>

    goto_priv(PRIV_HS);
    80019b5e:	450d                	li	a0,3
    80019b60:	f7fe60ef          	jal	80000ade <goto_priv>
    hspt_init();
    80019b64:	a7de60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019b68:	cbfe60ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80019b6c:	4509                	li	a0,2
    80019b6e:	f71e60ef          	jal	80000ade <goto_priv>
    vspt_init();
    80019b72:	b43e60ef          	jal	800006b4 <vspt_init>
    //执行load指令时，设置了mstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    uintptr_t addr = hs_page_base(VSV_GV);

    goto_priv(PRIV_M);
    80019b76:	4511                	li	a0,4
    80019b78:	f67e60ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_MXR);
    80019b7c:	000807b7          	lui	a5,0x80
    80019b80:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    80019b84:	450d                	li	a0,3
    80019b86:	f59e60ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80019b8a:	4509                	li	a0,2
    80019b8c:	e77e60ef          	jal	80000a02 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    80019b90:	0ff0000f          	fence
    80019b94:	4785                	li	a5,1
    80019b96:	00023417          	auipc	s0,0x23
    80019b9a:	47a40413          	add	s0,s0,1146 # 8003d010 <excpt>
    80019b9e:	00f41023          	sh	a5,0(s0)
    80019ba2:	00023797          	auipc	a5,0x23
    80019ba6:	4a07b323          	sd	zero,1190(a5) # 8003d048 <excpt+0x38>
    80019baa:	0ff0000f          	fence
    80019bae:	001007b7          	lui	a5,0x100
    80019bb2:	07f5                	add	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    80019bb4:	07b2                	sll	a5,a5,0xc
    80019bb6:	6c07c7f3          	.4byte	0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("s mode load when mstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80019bba:	08200593          	li	a1,130
    80019bbe:	00009617          	auipc	a2,0x9
    80019bc2:	42260613          	add	a2,a2,1058 # 80022fe0 <__func__.1+0x67e8>
    80019bc6:	00003517          	auipc	a0,0x3
    80019bca:	f3250513          	add	a0,a0,-206 # 8001caf8 <__func__.1+0x300>
    80019bce:	394010ef          	jal	8001af62 <printf>
    80019bd2:	00144783          	lbu	a5,1(s0)
    80019bd6:	00003597          	auipc	a1,0x3
    80019bda:	efa58593          	add	a1,a1,-262 # 8001cad0 <__func__.1+0x2d8>
    80019bde:	c789                	beqz	a5,80019be8 <mstatus_csr_tests_4+0xac>
    80019be0:	6418                	ld	a4,8(s0)
    80019be2:	47b5                	li	a5,13
    80019be4:	08f70663          	beq	a4,a5,80019c70 <mstatus_csr_tests_4+0x134>
    80019be8:	00003517          	auipc	a0,0x3
    80019bec:	f2850513          	add	a0,a0,-216 # 8001cb10 <__func__.1+0x318>
    80019bf0:	372010ef          	jal	8001af62 <printf>
    80019bf4:	00144783          	lbu	a5,1(s0)
    80019bf8:	c789                	beqz	a5,80019c02 <mstatus_csr_tests_4+0xc6>
    80019bfa:	6418                	ld	a4,8(s0)
    80019bfc:	47b5                	li	a5,13
    80019bfe:	00f70c63          	beq	a4,a5,80019c16 <mstatus_csr_tests_4+0xda>
    80019c02:	00003517          	auipc	a0,0x3
    80019c06:	f1650513          	add	a0,a0,-234 # 8001cb18 <__func__.1+0x320>
    80019c0a:	358010ef          	jal	8001af62 <printf>
    80019c0e:	02900513          	li	a0,41
    80019c12:	222000ef          	jal	80019e34 <putchar>
    80019c16:	4529                	li	a0,10
    80019c18:	21c000ef          	jal	80019e34 <putchar>
    80019c1c:	00144483          	lbu	s1,1(s0)
    80019c20:	c489                	beqz	s1,80019c2a <mstatus_csr_tests_4+0xee>
    80019c22:	6418                	ld	a4,8(s0)
    80019c24:	47b5                	li	a5,13
    80019c26:	02f70c63          	beq	a4,a5,80019c5e <mstatus_csr_tests_4+0x122>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80019c2a:	000807b7          	lui	a5,0x80
    80019c2e:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("s mode load when mstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80019c32:	4481                	li	s1,0


TEST_END();
    80019c34:	00003597          	auipc	a1,0x3
    80019c38:	e9c58593          	add	a1,a1,-356 # 8001cad0 <__func__.1+0x2d8>
    80019c3c:	00003517          	auipc	a0,0x3
    80019c40:	f3c50513          	add	a0,a0,-196 # 8001cb78 <__func__.1+0x380>
    80019c44:	31e010ef          	jal	8001af62 <printf>
    80019c48:	4511                	li	a0,4
    80019c4a:	e95e60ef          	jal	80000ade <goto_priv>
    80019c4e:	ed8e70ef          	jal	80001326 <reset_state>

}
    80019c52:	60e2                	ld	ra,24(sp)
    80019c54:	6442                	ld	s0,16(sp)
    80019c56:	8526                	mv	a0,s1
    80019c58:	64a2                	ld	s1,8(sp)
    80019c5a:	6105                	add	sp,sp,32
    80019c5c:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80019c5e:	000807b7          	lui	a5,0x80
    80019c62:	1007b073          	csrc	sstatus,a5
TEST_END();
    80019c66:	00003597          	auipc	a1,0x3
    80019c6a:	e5a58593          	add	a1,a1,-422 # 8001cac0 <__func__.1+0x2c8>
    80019c6e:	b7f9                	j	80019c3c <mstatus_csr_tests_4+0x100>
    TEST_ASSERT("s mode load when mstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80019c70:	00003597          	auipc	a1,0x3
    80019c74:	e5058593          	add	a1,a1,-432 # 8001cac0 <__func__.1+0x2c8>
    80019c78:	bf85                	j	80019be8 <mstatus_csr_tests_4+0xac>

0000000080019c7a <mstatus_csr_tests_5>:

bool mstatus_csr_tests_5(){
    80019c7a:	1101                	add	sp,sp,-32

    TEST_START();
    80019c7c:	00003597          	auipc	a1,0x3
    80019c80:	b7c58593          	add	a1,a1,-1156 # 8001c7f8 <__func__.1>
    80019c84:	00003517          	auipc	a0,0x3
    80019c88:	e5c50513          	add	a0,a0,-420 # 8001cae0 <__func__.1+0x2e8>
bool mstatus_csr_tests_5(){
    80019c8c:	ec06                	sd	ra,24(sp)
    80019c8e:	e822                	sd	s0,16(sp)
    80019c90:	e426                	sd	s1,8(sp)
    TEST_START();
    80019c92:	2d0010ef          	jal	8001af62 <printf>
    80019c96:	4529                	li	a0,10
    80019c98:	19c000ef          	jal	80019e34 <putchar>
    //mstatus.TSR=1时，执行sret指令
    TEST_SETUP_EXCEPT();
    80019c9c:	0ff0000f          	fence
    80019ca0:	4785                	li	a5,1
    80019ca2:	00023417          	auipc	s0,0x23
    80019ca6:	36e40413          	add	s0,s0,878 # 8003d010 <excpt>
    80019caa:	00f41023          	sh	a5,0(s0)
    80019cae:	00023797          	auipc	a5,0x23
    80019cb2:	3807bd23          	sd	zero,922(a5) # 8003d048 <excpt+0x38>
    80019cb6:	0ff0000f          	fence
    goto_priv(PRIV_M);
    80019cba:	4511                	li	a0,4
    80019cbc:	e23e60ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 22);    //TSR位
    80019cc0:	004007b7          	lui	a5,0x400
    80019cc4:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    80019cc8:	450d                	li	a0,3
    80019cca:	e15e60ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VU);
    80019cce:	4501                	li	a0,0
    80019cd0:	d33e60ef          	jal	80000a02 <set_prev_priv>

    TEST_EXEC_SRET();
    80019cd4:	00000297          	auipc	t0,0x0
    80019cd8:	01028293          	add	t0,t0,16 # 80019ce4 <mstatus_csr_tests_5+0x6a>
    80019cdc:	14129073          	csrw	sepc,t0
    80019ce0:	10200073          	sret

    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    80019ce4:	08200593          	li	a1,130
    80019ce8:	00006617          	auipc	a2,0x6
    80019cec:	a9860613          	add	a2,a2,-1384 # 8001f780 <__func__.1+0x2f88>
    80019cf0:	00003517          	auipc	a0,0x3
    80019cf4:	e0850513          	add	a0,a0,-504 # 8001caf8 <__func__.1+0x300>
    80019cf8:	26a010ef          	jal	8001af62 <printf>
    80019cfc:	00144783          	lbu	a5,1(s0)
    80019d00:	00003597          	auipc	a1,0x3
    80019d04:	dd058593          	add	a1,a1,-560 # 8001cad0 <__func__.1+0x2d8>
    80019d08:	c789                	beqz	a5,80019d12 <mstatus_csr_tests_5+0x98>
    80019d0a:	6418                	ld	a4,8(s0)
    80019d0c:	4789                	li	a5,2
    80019d0e:	06f70e63          	beq	a4,a5,80019d8a <mstatus_csr_tests_5+0x110>
    80019d12:	00003517          	auipc	a0,0x3
    80019d16:	dfe50513          	add	a0,a0,-514 # 8001cb10 <__func__.1+0x318>
    80019d1a:	248010ef          	jal	8001af62 <printf>
    80019d1e:	00144783          	lbu	a5,1(s0)
    80019d22:	c789                	beqz	a5,80019d2c <mstatus_csr_tests_5+0xb2>
    80019d24:	6418                	ld	a4,8(s0)
    80019d26:	4789                	li	a5,2
    80019d28:	00f70c63          	beq	a4,a5,80019d40 <mstatus_csr_tests_5+0xc6>
    80019d2c:	00003517          	auipc	a0,0x3
    80019d30:	dec50513          	add	a0,a0,-532 # 8001cb18 <__func__.1+0x320>
    80019d34:	22e010ef          	jal	8001af62 <printf>
    80019d38:	02900513          	li	a0,41
    80019d3c:	0f8000ef          	jal	80019e34 <putchar>
    80019d40:	4529                	li	a0,10
    80019d42:	0f2000ef          	jal	80019e34 <putchar>
    80019d46:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80019d4a:	00003597          	auipc	a1,0x3
    80019d4e:	d8658593          	add	a1,a1,-634 # 8001cad0 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    80019d52:	c491                	beqz	s1,80019d5e <mstatus_csr_tests_5+0xe4>
    80019d54:	6418                	ld	a4,8(s0)
    80019d56:	4789                	li	a5,2
    80019d58:	02f70463          	beq	a4,a5,80019d80 <mstatus_csr_tests_5+0x106>
    80019d5c:	4481                	li	s1,0
    TEST_END();
    80019d5e:	00003517          	auipc	a0,0x3
    80019d62:	e1a50513          	add	a0,a0,-486 # 8001cb78 <__func__.1+0x380>
    80019d66:	1fc010ef          	jal	8001af62 <printf>
    80019d6a:	4511                	li	a0,4
    80019d6c:	d73e60ef          	jal	80000ade <goto_priv>
    80019d70:	db6e70ef          	jal	80001326 <reset_state>

}
    80019d74:	60e2                	ld	ra,24(sp)
    80019d76:	6442                	ld	s0,16(sp)
    80019d78:	8526                	mv	a0,s1
    80019d7a:	64a2                	ld	s1,8(sp)
    80019d7c:	6105                	add	sp,sp,32
    80019d7e:	8082                	ret
    TEST_END();
    80019d80:	00003597          	auipc	a1,0x3
    80019d84:	d4058593          	add	a1,a1,-704 # 8001cac0 <__func__.1+0x2c8>
    80019d88:	bfd9                	j	80019d5e <mstatus_csr_tests_5+0xe4>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    80019d8a:	00003597          	auipc	a1,0x3
    80019d8e:	d3658593          	add	a1,a1,-714 # 8001cac0 <__func__.1+0x2c8>
    80019d92:	b741                	j	80019d12 <mstatus_csr_tests_5+0x98>

0000000080019d94 <m_to_vs>:

bool m_to_vs(){
    80019d94:	1141                	add	sp,sp,-16

    TEST_START();
    80019d96:	00009597          	auipc	a1,0x9
    80019d9a:	2ea58593          	add	a1,a1,746 # 80023080 <__func__.0>
    80019d9e:	00003517          	auipc	a0,0x3
    80019da2:	d4250513          	add	a0,a0,-702 # 8001cae0 <__func__.1+0x2e8>
bool m_to_vs(){
    80019da6:	e406                	sd	ra,8(sp)
    80019da8:	e022                	sd	s0,0(sp)
    TEST_START();
    80019daa:	1b8010ef          	jal	8001af62 <printf>
    80019dae:	4529                	li	a0,10
    80019db0:	084000ef          	jal	80019e34 <putchar>
    TEST_SETUP_EXCEPT();
    80019db4:	0ff0000f          	fence
    80019db8:	00023797          	auipc	a5,0x23
    80019dbc:	25878793          	add	a5,a5,600 # 8003d010 <excpt>
    80019dc0:	4705                	li	a4,1
    80019dc2:	00e79023          	sh	a4,0(a5)
    80019dc6:	0207bc23          	sd	zero,56(a5)
    80019dca:	0ff0000f          	fence
    
    goto_priv(PRIV_M);
    80019dce:	4511                	li	a0,4
    80019dd0:	d0fe60ef          	jal	80000ade <goto_priv>
    printf("%d\n",curr_priv);
    80019dd4:	0000b417          	auipc	s0,0xb
    80019dd8:	2c040413          	add	s0,s0,704 # 80025094 <curr_priv>
    80019ddc:	400c                	lw	a1,0(s0)
    80019dde:	00003517          	auipc	a0,0x3
    80019de2:	6c250513          	add	a0,a0,1730 # 8001d4a0 <__func__.1+0xca8>
    80019de6:	17c010ef          	jal	8001af62 <printf>
    goto_priv(PRIV_VS);
    80019dea:	4509                	li	a0,2
    80019dec:	cf3e60ef          	jal	80000ade <goto_priv>
    printf("%d\n",curr_priv);
    80019df0:	400c                	lw	a1,0(s0)
    80019df2:	00003517          	auipc	a0,0x3
    80019df6:	6ae50513          	add	a0,a0,1710 # 8001d4a0 <__func__.1+0xca8>
    80019dfa:	168010ef          	jal	8001af62 <printf>


    TEST_END();
    80019dfe:	00003597          	auipc	a1,0x3
    80019e02:	cc258593          	add	a1,a1,-830 # 8001cac0 <__func__.1+0x2c8>
    80019e06:	00003517          	auipc	a0,0x3
    80019e0a:	d7250513          	add	a0,a0,-654 # 8001cb78 <__func__.1+0x380>
    80019e0e:	154010ef          	jal	8001af62 <printf>
    80019e12:	4511                	li	a0,4
    80019e14:	ccbe60ef          	jal	80000ade <goto_priv>
    80019e18:	d0ee70ef          	jal	80001326 <reset_state>

}
    80019e1c:	60a2                	ld	ra,8(sp)
    80019e1e:	6402                	ld	s0,0(sp)
    80019e20:	4505                	li	a0,1
    80019e22:	0141                	add	sp,sp,16
    80019e24:	8082                	ret

0000000080019e26 <sprintf_putch.0>:
  va_start(ap, fmt);

  void sprintf_putch(int ch, void** data)
  {
    char** pstr = (char**)data;
    **pstr = ch;
    80019e26:	619c                	ld	a5,0(a1)
    80019e28:	00a78023          	sb	a0,0(a5)
    (*pstr)++;
    80019e2c:	619c                	ld	a5,0(a1)
    80019e2e:	0785                	add	a5,a5,1
    80019e30:	e19c                	sd	a5,0(a1)
  }
    80019e32:	8082                	ret

0000000080019e34 <putchar>:
  buf[buflen++] = ch;
    80019e34:	00023697          	auipc	a3,0x23
    80019e38:	2a068693          	add	a3,a3,672 # 8003d0d4 <buflen.2>
    80019e3c:	4298                	lw	a4,0(a3)
    80019e3e:	00023617          	auipc	a2,0x23
    80019e42:	24260613          	add	a2,a2,578 # 8003d080 <buf.1>
{
    80019e46:	7159                	add	sp,sp,-112
  buf[buflen++] = ch;
    80019e48:	0017079b          	addw	a5,a4,1
    80019e4c:	9732                	add	a4,a4,a2
    80019e4e:	c29c                	sw	a5,0(a3)
    80019e50:	00a70023          	sb	a0,0(a4)
  if (ch == '\n' || buflen == sizeof(buf))
    80019e54:	46a9                	li	a3,10
{
    80019e56:	03f10713          	add	a4,sp,63
    80019e5a:	fc077713          	and	a4,a4,-64
  if (ch == '\n' || buflen == sizeof(buf))
    80019e5e:	00d50963          	beq	a0,a3,80019e70 <putchar+0x3c>
    80019e62:	04000693          	li	a3,64
    80019e66:	00d78563          	beq	a5,a3,80019e70 <putchar+0x3c>
}
    80019e6a:	4501                	li	a0,0
    80019e6c:	6165                	add	sp,sp,112
    80019e6e:	8082                	ret
  magic_mem[0] = which;
    80019e70:	04000693          	li	a3,64
    80019e74:	e314                	sd	a3,0(a4)
  magic_mem[1] = arg0;
    80019e76:	4685                	li	a3,1
    80019e78:	e714                	sd	a3,8(a4)
  magic_mem[2] = arg1;
    80019e7a:	eb10                	sd	a2,16(a4)
  magic_mem[3] = arg2;
    80019e7c:	ef1c                	sd	a5,24(a4)
  __sync_synchronize();
    80019e7e:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    80019e82:	0000c697          	auipc	a3,0xc
    80019e86:	1be68693          	add	a3,a3,446 # 80026040 <fromhost>
    80019e8a:	0000c797          	auipc	a5,0xc
    80019e8e:	16e7bb23          	sd	a4,374(a5) # 80026000 <tohost>
  while (fromhost == 0)
    80019e92:	629c                	ld	a5,0(a3)
    80019e94:	dffd                	beqz	a5,80019e92 <putchar+0x5e>
  fromhost = 0;
    80019e96:	0000c797          	auipc	a5,0xc
    80019e9a:	1a07b523          	sd	zero,426(a5) # 80026040 <fromhost>
  __sync_synchronize();
    80019e9e:	0ff0000f          	fence
  return magic_mem[0];
    80019ea2:	631c                	ld	a5,0(a4)
}
    80019ea4:	4501                	li	a0,0
    buflen = 0;
    80019ea6:	00023797          	auipc	a5,0x23
    80019eaa:	2207a723          	sw	zero,558(a5) # 8003d0d4 <buflen.2>
}
    80019eae:	6165                	add	sp,sp,112
    80019eb0:	8082                	ret

0000000080019eb2 <vprintfmt.constprop.0>:
static void vprintfmt(void (*putch)(int, void**), void **putdat, const char *fmt, va_list ap)
    80019eb2:	716d                	add	sp,sp,-272
    80019eb4:	e622                	sd	s0,264(sp)
    while ((ch = *(unsigned char *) fmt) != '%') {
    80019eb6:	02500313          	li	t1,37
    switch (ch = *(unsigned char *) fmt++) {
    80019eba:	05500f13          	li	t5,85
    80019ebe:	00003e97          	auipc	t4,0x3
    80019ec2:	94ee8e93          	add	t4,t4,-1714 # 8001c80c <__func__.1+0x14>
    while ((ch = *(unsigned char *) fmt) != '%') {
    80019ec6:	a809                	j	80019ed8 <vprintfmt.constprop.0+0x26>
      if (ch == '\0')
    80019ec8:	c729                	beqz	a4,80019f12 <vprintfmt.constprop.0+0x60>
    **pstr = ch;
    80019eca:	6118                	ld	a4,0(a0)
      fmt++;
    80019ecc:	0585                	add	a1,a1,1
    **pstr = ch;
    80019ece:	00f70023          	sb	a5,0(a4)
    (*pstr)++;
    80019ed2:	611c                	ld	a5,0(a0)
    80019ed4:	0785                	add	a5,a5,1
    80019ed6:	e11c                	sd	a5,0(a0)
    while ((ch = *(unsigned char *) fmt) != '%') {
    80019ed8:	0005c783          	lbu	a5,0(a1)
    80019edc:	0007871b          	sext.w	a4,a5
    80019ee0:	fe6794e3          	bne	a5,t1,80019ec8 <vprintfmt.constprop.0+0x16>
    switch (ch = *(unsigned char *) fmt++) {
    80019ee4:	0015c683          	lbu	a3,1(a1)
    fmt++;
    80019ee8:	00158893          	add	a7,a1,1
    80019eec:	8746                	mv	a4,a7
    padc = ' ';
    80019eee:	02000293          	li	t0,32
    precision = -1;
    80019ef2:	587d                	li	a6,-1
    width = -1;
    80019ef4:	5ffd                	li	t6,-1
    lflag = 0;
    80019ef6:	4e01                	li	t3,0
    switch (ch = *(unsigned char *) fmt++) {
    80019ef8:	fdd6879b          	addw	a5,a3,-35
    80019efc:	0ff7f793          	zext.b	a5,a5
    80019f00:	00170593          	add	a1,a4,1
    80019f04:	02ff6663          	bltu	t5,a5,80019f30 <vprintfmt.constprop.0+0x7e>
    80019f08:	078a                	sll	a5,a5,0x2
    80019f0a:	97f6                	add	a5,a5,t4
    80019f0c:	439c                	lw	a5,0(a5)
    80019f0e:	97f6                	add	a5,a5,t4
    80019f10:	8782                	jr	a5
}
    80019f12:	6432                	ld	s0,264(sp)
    80019f14:	6151                	add	sp,sp,272
    80019f16:	8082                	ret
      padc = '0';
    80019f18:	82b6                	mv	t0,a3
      goto reswitch;
    80019f1a:	00174683          	lbu	a3,1(a4)
    switch (ch = *(unsigned char *) fmt++) {
    80019f1e:	872e                	mv	a4,a1
    80019f20:	00170593          	add	a1,a4,1
    80019f24:	fdd6879b          	addw	a5,a3,-35
    80019f28:	0ff7f793          	zext.b	a5,a5
    80019f2c:	fcff7ee3          	bgeu	t5,a5,80019f08 <vprintfmt.constprop.0+0x56>
    **pstr = ch;
    80019f30:	611c                	ld	a5,0(a0)
      fmt = last_fmt;
    80019f32:	85c6                	mv	a1,a7
    **pstr = ch;
    80019f34:	02500713          	li	a4,37
    80019f38:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    80019f3c:	611c                	ld	a5,0(a0)
    80019f3e:	0785                	add	a5,a5,1
    80019f40:	e11c                	sd	a5,0(a0)
  }
    80019f42:	bf59                	j	80019ed8 <vprintfmt.constprop.0+0x26>
        precision = precision * 10 + ch - '0';
    80019f44:	fd06881b          	addw	a6,a3,-48
        ch = *fmt;
    80019f48:	00174683          	lbu	a3,1(a4)
        if (ch < '0' || ch > '9')
    80019f4c:	47a5                	li	a5,9
    80019f4e:	fd06871b          	addw	a4,a3,-48
        ch = *fmt;
    80019f52:	0006839b          	sext.w	t2,a3
        if (ch < '0' || ch > '9')
    80019f56:	26e7e763          	bltu	a5,a4,8001a1c4 <vprintfmt.constprop.0+0x312>
    switch (ch = *(unsigned char *) fmt++) {
    80019f5a:	872e                	mv	a4,a1
        if (ch < '0' || ch > '9')
    80019f5c:	4425                	li	s0,9
        ch = *fmt;
    80019f5e:	00174683          	lbu	a3,1(a4)
        precision = precision * 10 + ch - '0';
    80019f62:	0028179b          	sllw	a5,a6,0x2
    80019f66:	010787bb          	addw	a5,a5,a6
    80019f6a:	0017979b          	sllw	a5,a5,0x1
    80019f6e:	007787bb          	addw	a5,a5,t2
        if (ch < '0' || ch > '9')
    80019f72:	fd06859b          	addw	a1,a3,-48
      for (precision = 0; ; ++fmt) {
    80019f76:	0705                	add	a4,a4,1
        precision = precision * 10 + ch - '0';
    80019f78:	fd07881b          	addw	a6,a5,-48
        ch = *fmt;
    80019f7c:	0006839b          	sext.w	t2,a3
        if (ch < '0' || ch > '9')
    80019f80:	fcb47fe3          	bgeu	s0,a1,80019f5e <vprintfmt.constprop.0+0xac>
      if (width < 0)
    80019f84:	f60fdae3          	bgez	t6,80019ef8 <vprintfmt.constprop.0+0x46>
        width = precision, precision = -1;
    80019f88:	8fc2                	mv	t6,a6
    80019f8a:	587d                	li	a6,-1
    80019f8c:	b7b5                	j	80019ef8 <vprintfmt.constprop.0+0x46>
        ch = *fmt;
    80019f8e:	00174683          	lbu	a3,1(a4)
    switch (ch = *(unsigned char *) fmt++) {
    80019f92:	872e                	mv	a4,a1
      goto reswitch;
    80019f94:	b795                	j	80019ef8 <vprintfmt.constprop.0+0x46>
    **pstr = ch;
    80019f96:	611c                	ld	a5,0(a0)
    80019f98:	bf71                	j	80019f34 <vprintfmt.constprop.0+0x82>
      precision = va_arg(ap, int);
    80019f9a:	00062803          	lw	a6,0(a2)
        ch = *fmt;
    80019f9e:	00174683          	lbu	a3,1(a4)
      precision = va_arg(ap, int);
    80019fa2:	0621                	add	a2,a2,8
    switch (ch = *(unsigned char *) fmt++) {
    80019fa4:	872e                	mv	a4,a1
      goto process_precision;
    80019fa6:	bff9                	j	80019f84 <vprintfmt.constprop.0+0xd2>
    **pstr = ch;
    80019fa8:	611c                	ld	a5,0(a0)
    80019faa:	03000713          	li	a4,48
    (*pstr)++;
    80019fae:	4841                	li	a6,16
    **pstr = ch;
    80019fb0:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    80019fb4:	611c                	ld	a5,0(a0)
    80019fb6:	00860693          	add	a3,a2,8
    80019fba:	00178713          	add	a4,a5,1
    80019fbe:	e118                	sd	a4,0(a0)
    **pstr = ch;
    80019fc0:	07800713          	li	a4,120
    80019fc4:	00e780a3          	sb	a4,1(a5)
    (*pstr)++;
    80019fc8:	611c                	ld	a5,0(a0)
    80019fca:	0785                	add	a5,a5,1
    80019fcc:	e11c                	sd	a5,0(a0)
    return va_arg(*ap, unsigned long);
    80019fce:	6218                	ld	a4,0(a2)
    80019fd0:	8636                	mv	a2,a3
    digs[pos++] = num % base;
    80019fd2:	03077e33          	remu	t3,a4,a6
    80019fd6:	00410893          	add	a7,sp,4
    80019fda:	4685                	li	a3,1
    80019fdc:	c072                	sw	t3,0(sp)
    if (num < base)
    80019fde:	19076f63          	bltu	a4,a6,8001a17c <vprintfmt.constprop.0+0x2ca>
    num /= base;
    80019fe2:	03075733          	divu	a4,a4,a6
    if (num < base)
    80019fe6:	0891                	add	a7,a7,4 # 1004 <_test_table_size+0x1003>
    80019fe8:	83b6                	mv	t2,a3
    digs[pos++] = num % base;
    80019fea:	2685                	addw	a3,a3,1
    80019fec:	03077e33          	remu	t3,a4,a6
    80019ff0:	ffc8ae23          	sw	t3,-4(a7)
    if (num < base)
    80019ff4:	ff0777e3          	bgeu	a4,a6,80019fe2 <vprintfmt.constprop.0+0x130>
  while (width-- > pos)
    80019ff8:	ffff871b          	addw	a4,t6,-1
    80019ffc:	fff6881b          	addw	a6,a3,-1
    8001a000:	01f6da63          	bge	a3,t6,8001a014 <vprintfmt.constprop.0+0x162>
    **pstr = ch;
    8001a004:	00578023          	sb	t0,0(a5)
    (*pstr)++;
    8001a008:	611c                	ld	a5,0(a0)
  while (width-- > pos)
    8001a00a:	377d                	addw	a4,a4,-1
    (*pstr)++;
    8001a00c:	0785                	add	a5,a5,1
    8001a00e:	e11c                	sd	a5,0(a0)
  while (width-- > pos)
    8001a010:	fee81ae3          	bne	a6,a4,8001a004 <vprintfmt.constprop.0+0x152>
    8001a014:	038a                	sll	t2,t2,0x2
    8001a016:	007106b3          	add	a3,sp,t2
    8001a01a:	ffc10893          	add	a7,sp,-4
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8001a01e:	4825                	li	a6,9
    8001a020:	a819                	j	8001a036 <vprintfmt.constprop.0+0x184>
    8001a022:	0307071b          	addw	a4,a4,48
    **pstr = ch;
    8001a026:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    8001a02a:	611c                	ld	a5,0(a0)
  while (pos-- > 0)
    8001a02c:	16f1                	add	a3,a3,-4
    (*pstr)++;
    8001a02e:	0785                	add	a5,a5,1
    8001a030:	e11c                	sd	a5,0(a0)
  while (pos-- > 0)
    8001a032:	ead883e3          	beq	a7,a3,80019ed8 <vprintfmt.constprop.0+0x26>
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8001a036:	4298                	lw	a4,0(a3)
    8001a038:	fee875e3          	bgeu	a6,a4,8001a022 <vprintfmt.constprop.0+0x170>
    8001a03c:	0577071b          	addw	a4,a4,87
    8001a040:	b7dd                	j	8001a026 <vprintfmt.constprop.0+0x174>
  if (lflag >= 2)
    8001a042:	4785                	li	a5,1
      precision = va_arg(ap, int);
    8001a044:	00860693          	add	a3,a2,8
  if (lflag >= 2)
    8001a048:	01c7c463          	blt	a5,t3,8001a050 <vprintfmt.constprop.0+0x19e>
  else if (lflag)
    8001a04c:	120e0a63          	beqz	t3,8001a180 <vprintfmt.constprop.0+0x2ce>
    return va_arg(*ap, long);
    8001a050:	6218                	ld	a4,0(a2)
    **pstr = ch;
    8001a052:	611c                	ld	a5,0(a0)
      if ((long long) num < 0) {
    8001a054:	12074c63          	bltz	a4,8001a18c <vprintfmt.constprop.0+0x2da>
      num = getint(&ap, lflag);
    8001a058:	8636                	mv	a2,a3
    8001a05a:	4829                	li	a6,10
    8001a05c:	bf9d                	j	80019fd2 <vprintfmt.constprop.0+0x120>
        ch = *fmt;
    8001a05e:	00174683          	lbu	a3,1(a4)
      lflag++;
    8001a062:	2e05                	addw	t3,t3,1
    switch (ch = *(unsigned char *) fmt++) {
    8001a064:	872e                	mv	a4,a1
      goto reswitch;
    8001a066:	bd49                	j	80019ef8 <vprintfmt.constprop.0+0x46>
    switch (ch = *(unsigned char *) fmt++) {
    8001a068:	4841                	li	a6,16
  if (lflag >= 2)
    8001a06a:	4705                	li	a4,1
    **pstr = ch;
    8001a06c:	611c                	ld	a5,0(a0)
      precision = va_arg(ap, int);
    8001a06e:	00860693          	add	a3,a2,8
  if (lflag >= 2)
    8001a072:	f5c74ee3          	blt	a4,t3,80019fce <vprintfmt.constprop.0+0x11c>
  else if (lflag)
    8001a076:	f40e1ce3          	bnez	t3,80019fce <vprintfmt.constprop.0+0x11c>
    return va_arg(*ap, unsigned int);
    8001a07a:	00066703          	lwu	a4,0(a2)
    8001a07e:	8636                	mv	a2,a3
    8001a080:	bf89                	j	80019fd2 <vprintfmt.constprop.0+0x120>
      if ((p = va_arg(ap, char *)) == NULL)
    8001a082:	6218                	ld	a4,0(a2)
    8001a084:	0621                	add	a2,a2,8
    8001a086:	c72d                	beqz	a4,8001a0f0 <vprintfmt.constprop.0+0x23e>
      if (width > 0 && padc != '-')
    8001a088:	0df05263          	blez	t6,8001a14c <vprintfmt.constprop.0+0x29a>
    8001a08c:	02d00793          	li	a5,45
    8001a090:	08f29263          	bne	t0,a5,8001a114 <vprintfmt.constprop.0+0x262>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001a094:	00074783          	lbu	a5,0(a4)
    8001a098:	c3a1                	beqz	a5,8001a0d8 <vprintfmt.constprop.0+0x226>
    8001a09a:	10085563          	bgez	a6,8001a1a4 <vprintfmt.constprop.0+0x2f2>
    **pstr = ch;
    8001a09e:	6114                	ld	a3,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001a0a0:	3ffd                	addw	t6,t6,-1
    8001a0a2:	88fe                	mv	a7,t6
    **pstr = ch;
    8001a0a4:	00f68023          	sb	a5,0(a3)
    (*pstr)++;
    8001a0a8:	611c                	ld	a5,0(a0)
        p++;
    8001a0aa:	00170813          	add	a6,a4,1
    (*pstr)++;
    8001a0ae:	0785                	add	a5,a5,1
    8001a0b0:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001a0b2:	00174683          	lbu	a3,1(a4)
    8001a0b6:	ce99                	beqz	a3,8001a0d4 <vprintfmt.constprop.0+0x222>
        p++;
    8001a0b8:	8742                	mv	a4,a6
    **pstr = ch;
    8001a0ba:	00d78023          	sb	a3,0(a5)
    (*pstr)++;
    8001a0be:	611c                	ld	a5,0(a0)
        p++;
    8001a0c0:	0705                	add	a4,a4,1
    (*pstr)++;
    8001a0c2:	0785                	add	a5,a5,1
    8001a0c4:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001a0c6:	00074683          	lbu	a3,0(a4)
    8001a0ca:	fae5                	bnez	a3,8001a0ba <vprintfmt.constprop.0+0x208>
    8001a0cc:	40e807bb          	subw	a5,a6,a4
    8001a0d0:	01178fbb          	addw	t6,a5,a7
      for (; width > 0; width--)
    8001a0d4:	e1f052e3          	blez	t6,80019ed8 <vprintfmt.constprop.0+0x26>
    **pstr = ch;
    8001a0d8:	611c                	ld	a5,0(a0)
    8001a0da:	02000713          	li	a4,32
    8001a0de:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    8001a0e2:	611c                	ld	a5,0(a0)
      for (; width > 0; width--)
    8001a0e4:	3ffd                	addw	t6,t6,-1
    (*pstr)++;
    8001a0e6:	0785                	add	a5,a5,1
    8001a0e8:	e11c                	sd	a5,0(a0)
      for (; width > 0; width--)
    8001a0ea:	fe0f9ae3          	bnez	t6,8001a0de <vprintfmt.constprop.0+0x22c>
    8001a0ee:	b3ed                	j	80019ed8 <vprintfmt.constprop.0+0x26>
        p = "(null)";
    8001a0f0:	00009717          	auipc	a4,0x9
    8001a0f4:	f3870713          	add	a4,a4,-200 # 80023028 <__func__.1+0x6830>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001a0f8:	02800793          	li	a5,40
      if (width > 0 && padc != '-')
    8001a0fc:	f9f05fe3          	blez	t6,8001a09a <vprintfmt.constprop.0+0x1e8>
    8001a100:	02d00693          	li	a3,45
        p = "(null)";
    8001a104:	00009717          	auipc	a4,0x9
    8001a108:	f2470713          	add	a4,a4,-220 # 80023028 <__func__.1+0x6830>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001a10c:	02800793          	li	a5,40
      if (width > 0 && padc != '-')
    8001a110:	f8d285e3          	beq	t0,a3,8001a09a <vprintfmt.constprop.0+0x1e8>
        for (width -= strnlen(p, precision); width > 0; width--)
    8001a114:	000f8e1b          	sext.w	t3,t6
        p = "(null)";
    8001a118:	87ba                	mv	a5,a4
  while (n-- && *p)
    8001a11a:	010708b3          	add	a7,a4,a6
    8001a11e:	00081663          	bnez	a6,8001a12a <vprintfmt.constprop.0+0x278>
    8001a122:	a821                	j	8001a13a <vprintfmt.constprop.0+0x288>
    p++;
    8001a124:	0785                	add	a5,a5,1
  while (n-- && *p)
    8001a126:	01178563          	beq	a5,a7,8001a130 <vprintfmt.constprop.0+0x27e>
    8001a12a:	0007c683          	lbu	a3,0(a5)
    8001a12e:	fafd                	bnez	a3,8001a124 <vprintfmt.constprop.0+0x272>
  return p - s;
    8001a130:	8f99                	sub	a5,a5,a4
        for (width -= strnlen(p, precision); width > 0; width--)
    8001a132:	40fe0fbb          	subw	t6,t3,a5
    8001a136:	01f05b63          	blez	t6,8001a14c <vprintfmt.constprop.0+0x29a>
    **pstr = ch;
    8001a13a:	611c                	ld	a5,0(a0)
    8001a13c:	00578023          	sb	t0,0(a5)
    (*pstr)++;
    8001a140:	611c                	ld	a5,0(a0)
        for (width -= strnlen(p, precision); width > 0; width--)
    8001a142:	3ffd                	addw	t6,t6,-1
    (*pstr)++;
    8001a144:	0785                	add	a5,a5,1
    8001a146:	e11c                	sd	a5,0(a0)
        for (width -= strnlen(p, precision); width > 0; width--)
    8001a148:	fe0f9ae3          	bnez	t6,8001a13c <vprintfmt.constprop.0+0x28a>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001a14c:	00074783          	lbu	a5,0(a4)
    8001a150:	f7a9                	bnez	a5,8001a09a <vprintfmt.constprop.0+0x1e8>
    8001a152:	b359                	j	80019ed8 <vprintfmt.constprop.0+0x26>
      if (width < 0)
    8001a154:	ffffc793          	not	a5,t6
    8001a158:	97fd                	sra	a5,a5,0x3f
    8001a15a:	00fff7b3          	and	a5,t6,a5
        ch = *fmt;
    8001a15e:	00174683          	lbu	a3,1(a4)
      if (width < 0)
    8001a162:	00078f9b          	sext.w	t6,a5
    switch (ch = *(unsigned char *) fmt++) {
    8001a166:	872e                	mv	a4,a1
      goto reswitch;
    8001a168:	bb41                	j	80019ef8 <vprintfmt.constprop.0+0x46>
    **pstr = ch;
    8001a16a:	4218                	lw	a4,0(a2)
    8001a16c:	611c                	ld	a5,0(a0)
      putch(va_arg(ap, int), putdat);
    8001a16e:	0621                	add	a2,a2,8
    **pstr = ch;
    8001a170:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    8001a174:	611c                	ld	a5,0(a0)
    8001a176:	0785                	add	a5,a5,1
    8001a178:	e11c                	sd	a5,0(a0)
  }
    8001a17a:	bbb9                	j	80019ed8 <vprintfmt.constprop.0+0x26>
    if (num < base)
    8001a17c:	4381                	li	t2,0
    8001a17e:	bdad                	j	80019ff8 <vprintfmt.constprop.0+0x146>
    return va_arg(*ap, int);
    8001a180:	4218                	lw	a4,0(a2)
    8001a182:	bdc1                	j	8001a052 <vprintfmt.constprop.0+0x1a0>
    switch (ch = *(unsigned char *) fmt++) {
    8001a184:	4829                	li	a6,10
    8001a186:	b5d5                	j	8001a06a <vprintfmt.constprop.0+0x1b8>
    8001a188:	4821                	li	a6,8
    8001a18a:	b5c5                	j	8001a06a <vprintfmt.constprop.0+0x1b8>
    **pstr = ch;
    8001a18c:	02d00613          	li	a2,45
    8001a190:	00c78023          	sb	a2,0(a5)
    (*pstr)++;
    8001a194:	611c                	ld	a5,0(a0)
        num = -(long long) num;
    8001a196:	40e00733          	neg	a4,a4
    8001a19a:	8636                	mv	a2,a3
    (*pstr)++;
    8001a19c:	0785                	add	a5,a5,1
    8001a19e:	e11c                	sd	a5,0(a0)
        num = -(long long) num;
    8001a1a0:	4829                	li	a6,10
    8001a1a2:	bd05                	j	80019fd2 <vprintfmt.constprop.0+0x120>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001a1a4:	58fd                	li	a7,-1
    8001a1a6:	387d                	addw	a6,a6,-1 # fff <_test_table_size+0xffe>
    8001a1a8:	f31806e3          	beq	a6,a7,8001a0d4 <vprintfmt.constprop.0+0x222>
    **pstr = ch;
    8001a1ac:	6114                	ld	a3,0(a0)
        p++;
    8001a1ae:	0705                	add	a4,a4,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001a1b0:	3ffd                	addw	t6,t6,-1
    **pstr = ch;
    8001a1b2:	00f68023          	sb	a5,0(a3)
    (*pstr)++;
    8001a1b6:	611c                	ld	a5,0(a0)
    8001a1b8:	0785                	add	a5,a5,1
    8001a1ba:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001a1bc:	00074783          	lbu	a5,0(a4)
    8001a1c0:	f3fd                	bnez	a5,8001a1a6 <vprintfmt.constprop.0+0x2f4>
    8001a1c2:	bf09                	j	8001a0d4 <vprintfmt.constprop.0+0x222>
    switch (ch = *(unsigned char *) fmt++) {
    8001a1c4:	872e                	mv	a4,a1
    8001a1c6:	bb7d                	j	80019f84 <vprintfmt.constprop.0+0xd2>

000000008001a1c8 <vprintfmt.constprop.1>:
static void vprintfmt(void (*putch)(int, void**), void **putdat, const char *fmt, va_list ap)
    8001a1c8:	b6010113          	add	sp,sp,-1184
    8001a1cc:	14f10713          	add	a4,sp,335
    8001a1d0:	fc077713          	and	a4,a4,-64
    8001a1d4:	48913823          	sd	s1,1168(sp)
    8001a1d8:	45b13023          	sd	s11,1088(sp)
    8001a1dc:	48813c23          	sd	s0,1176(sp)
    8001a1e0:	49213423          	sd	s2,1160(sp)
    8001a1e4:	49313023          	sd	s3,1152(sp)
    8001a1e8:	47413c23          	sd	s4,1144(sp)
    8001a1ec:	47513823          	sd	s5,1136(sp)
    8001a1f0:	47613423          	sd	s6,1128(sp)
    8001a1f4:	47713023          	sd	s7,1120(sp)
    8001a1f8:	45813c23          	sd	s8,1112(sp)
    8001a1fc:	45913823          	sd	s9,1104(sp)
    8001a200:	45a13423          	sd	s10,1096(sp)
    while ((ch = *(unsigned char *) fmt) != '%') {
    8001a204:	02500893          	li	a7,37
  buf[buflen++] = ch;
    8001a208:	00023697          	auipc	a3,0x23
    8001a20c:	ecc68693          	add	a3,a3,-308 # 8003d0d4 <buflen.2>
    8001a210:	00023617          	auipc	a2,0x23
    8001a214:	e7060613          	add	a2,a2,-400 # 8003d080 <buf.1>
  if (ch == '\n' || buflen == sizeof(buf))
    8001a218:	4329                	li	t1,10
  magic_mem[0] = which;
    8001a21a:	04000813          	li	a6,64
  magic_mem[1] = arg0;
    8001a21e:	4f05                	li	t5,1
  tohost = (uintptr_t)magic_mem;
    8001a220:	2c070493          	add	s1,a4,704
    8001a224:	0000cd97          	auipc	s11,0xc
    8001a228:	ddcd8d93          	add	s11,s11,-548 # 80026000 <tohost>
    8001a22c:	0000c797          	auipc	a5,0xc
    8001a230:	e1478793          	add	a5,a5,-492 # 80026040 <fromhost>
    while ((ch = *(unsigned char *) fmt) != '%') {
    8001a234:	00054f83          	lbu	t6,0(a0)
    8001a238:	000f829b          	sext.w	t0,t6
    8001a23c:	071f8463          	beq	t6,a7,8001a2a4 <vprintfmt.constprop.1+0xdc>
      if (ch == '\0')
    8001a240:	0a028063          	beqz	t0,8001a2e0 <vprintfmt.constprop.1+0x118>
  buf[buflen++] = ch;
    8001a244:	0006ae83          	lw	t4,0(a3)
      fmt++;
    8001a248:	0505                	add	a0,a0,1
  buf[buflen++] = ch;
    8001a24a:	001e8e1b          	addw	t3,t4,1
    8001a24e:	9eb2                	add	t4,t4,a2
    8001a250:	01c6a023          	sw	t3,0(a3)
    8001a254:	01fe8023          	sb	t6,0(t4)
  if (ch == '\n' || buflen == sizeof(buf))
    8001a258:	00628463          	beq	t0,t1,8001a260 <vprintfmt.constprop.1+0x98>
    8001a25c:	fd0e1ce3          	bne	t3,a6,8001a234 <vprintfmt.constprop.1+0x6c>
  magic_mem[0] = which;
    8001a260:	2d073023          	sd	a6,704(a4)
  magic_mem[1] = arg0;
    8001a264:	2de73423          	sd	t5,712(a4)
  magic_mem[2] = arg1;
    8001a268:	2cc73823          	sd	a2,720(a4)
  magic_mem[3] = arg2;
    8001a26c:	2dc73c23          	sd	t3,728(a4)
  __sync_synchronize();
    8001a270:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001a274:	009db023          	sd	s1,0(s11)
  while (fromhost == 0)
    8001a278:	0007be03          	ld	t3,0(a5)
    8001a27c:	fe0e0ee3          	beqz	t3,8001a278 <vprintfmt.constprop.1+0xb0>
  fromhost = 0;
    8001a280:	0000ce17          	auipc	t3,0xc
    8001a284:	dc0e3023          	sd	zero,-576(t3) # 80026040 <fromhost>
  __sync_synchronize();
    8001a288:	0ff0000f          	fence
  return magic_mem[0];
    8001a28c:	2c073e03          	ld	t3,704(a4)
    buflen = 0;
    8001a290:	00023e17          	auipc	t3,0x23
    8001a294:	e40e2223          	sw	zero,-444(t3) # 8003d0d4 <buflen.2>
    while ((ch = *(unsigned char *) fmt) != '%') {
    8001a298:	00054f83          	lbu	t6,0(a0)
    8001a29c:	000f829b          	sext.w	t0,t6
    8001a2a0:	fb1f90e3          	bne	t6,a7,8001a240 <vprintfmt.constprop.1+0x78>
    switch (ch = *(unsigned char *) fmt++) {
    8001a2a4:	00154903          	lbu	s2,1(a0)
    fmt++;
    8001a2a8:	00150413          	add	s0,a0,1
    8001a2ac:	82a2                	mv	t0,s0
    padc = ' ';
    8001a2ae:	02000a13          	li	s4,32
    precision = -1;
    8001a2b2:	5e7d                	li	t3,-1
    width = -1;
    8001a2b4:	5efd                	li	t4,-1
    lflag = 0;
    8001a2b6:	4381                	li	t2,0
    switch (ch = *(unsigned char *) fmt++) {
    8001a2b8:	fdd90f9b          	addw	t6,s2,-35
    8001a2bc:	0fffff93          	zext.b	t6,t6
    8001a2c0:	05500993          	li	s3,85
    8001a2c4:	00128513          	add	a0,t0,1
    8001a2c8:	07f9e563          	bltu	s3,t6,8001a332 <vprintfmt.constprop.1+0x16a>
    8001a2cc:	00002997          	auipc	s3,0x2
    8001a2d0:	69898993          	add	s3,s3,1688 # 8001c964 <__func__.1+0x16c>
    8001a2d4:	0f8a                	sll	t6,t6,0x2
    8001a2d6:	9fce                	add	t6,t6,s3
    8001a2d8:	000faf83          	lw	t6,0(t6)
    8001a2dc:	9fce                	add	t6,t6,s3
    8001a2de:	8f82                	jr	t6
}
    8001a2e0:	49813403          	ld	s0,1176(sp)
    8001a2e4:	49013483          	ld	s1,1168(sp)
    8001a2e8:	48813903          	ld	s2,1160(sp)
    8001a2ec:	48013983          	ld	s3,1152(sp)
    8001a2f0:	47813a03          	ld	s4,1144(sp)
    8001a2f4:	47013a83          	ld	s5,1136(sp)
    8001a2f8:	46813b03          	ld	s6,1128(sp)
    8001a2fc:	46013b83          	ld	s7,1120(sp)
    8001a300:	45813c03          	ld	s8,1112(sp)
    8001a304:	45013c83          	ld	s9,1104(sp)
    8001a308:	44813d03          	ld	s10,1096(sp)
    8001a30c:	44013d83          	ld	s11,1088(sp)
    8001a310:	4a010113          	add	sp,sp,1184
    8001a314:	8082                	ret
      padc = '0';
    8001a316:	8a4a                	mv	s4,s2
      goto reswitch;
    8001a318:	0012c903          	lbu	s2,1(t0)
    switch (ch = *(unsigned char *) fmt++) {
    8001a31c:	05500993          	li	s3,85
    8001a320:	82aa                	mv	t0,a0
    8001a322:	fdd90f9b          	addw	t6,s2,-35
    8001a326:	0fffff93          	zext.b	t6,t6
    8001a32a:	00128513          	add	a0,t0,1
    8001a32e:	f9f9ffe3          	bgeu	s3,t6,8001a2cc <vprintfmt.constprop.1+0x104>
  buf[buflen++] = ch;
    8001a332:	00023e97          	auipc	t4,0x23
    8001a336:	da2e8e93          	add	t4,t4,-606 # 8003d0d4 <buflen.2>
    8001a33a:	000ea503          	lw	a0,0(t4)
    8001a33e:	00023397          	auipc	t2,0x23
    8001a342:	d4238393          	add	t2,t2,-702 # 8003d080 <buf.1>
    8001a346:	00150e1b          	addw	t3,a0,1
    8001a34a:	01cea023          	sw	t3,0(t4)
    8001a34e:	951e                	add	a0,a0,t2
    8001a350:	02500e93          	li	t4,37
    8001a354:	01d50023          	sb	t4,0(a0)
  if (ch == '\n' || buflen == sizeof(buf))
    8001a358:	04000513          	li	a0,64
    8001a35c:	5eae0963          	beq	t3,a0,8001a94e <vprintfmt.constprop.1+0x786>
      fmt = last_fmt;
    8001a360:	8522                	mv	a0,s0
    8001a362:	bdc9                	j	8001a234 <vprintfmt.constprop.1+0x6c>
        precision = precision * 10 + ch - '0';
    8001a364:	fd090e1b          	addw	t3,s2,-48
        ch = *fmt;
    8001a368:	0012c903          	lbu	s2,1(t0)
        if (ch < '0' || ch > '9')
    8001a36c:	42a5                	li	t0,9
    8001a36e:	fd09099b          	addw	s3,s2,-48
        ch = *fmt;
    8001a372:	00090f9b          	sext.w	t6,s2
        if (ch < '0' || ch > '9')
    8001a376:	7932e963          	bltu	t0,s3,8001ab08 <vprintfmt.constprop.1+0x940>
    switch (ch = *(unsigned char *) fmt++) {
    8001a37a:	82aa                	mv	t0,a0
        if (ch < '0' || ch > '9')
    8001a37c:	4aa5                	li	s5,9
        ch = *fmt;
    8001a37e:	0012c903          	lbu	s2,1(t0)
        precision = precision * 10 + ch - '0';
    8001a382:	002e151b          	sllw	a0,t3,0x2
    8001a386:	01c5053b          	addw	a0,a0,t3
    8001a38a:	0015151b          	sllw	a0,a0,0x1
    8001a38e:	01f5053b          	addw	a0,a0,t6
        if (ch < '0' || ch > '9')
    8001a392:	fd09099b          	addw	s3,s2,-48
      for (precision = 0; ; ++fmt) {
    8001a396:	0285                	add	t0,t0,1
        precision = precision * 10 + ch - '0';
    8001a398:	fd050e1b          	addw	t3,a0,-48
        ch = *fmt;
    8001a39c:	00090f9b          	sext.w	t6,s2
        if (ch < '0' || ch > '9')
    8001a3a0:	fd3affe3          	bgeu	s5,s3,8001a37e <vprintfmt.constprop.1+0x1b6>
      if (width < 0)
    8001a3a4:	f00edae3          	bgez	t4,8001a2b8 <vprintfmt.constprop.1+0xf0>
        width = precision, precision = -1;
    8001a3a8:	8ef2                	mv	t4,t3
    8001a3aa:	5e7d                	li	t3,-1
    8001a3ac:	b731                	j	8001a2b8 <vprintfmt.constprop.1+0xf0>
        ch = *fmt;
    8001a3ae:	0012c903          	lbu	s2,1(t0)
    switch (ch = *(unsigned char *) fmt++) {
    8001a3b2:	82aa                	mv	t0,a0
      goto reswitch;
    8001a3b4:	b711                	j	8001a2b8 <vprintfmt.constprop.1+0xf0>
  buf[buflen++] = ch;
    8001a3b6:	00023f97          	auipc	t6,0x23
    8001a3ba:	d1ef8f93          	add	t6,t6,-738 # 8003d0d4 <buflen.2>
    8001a3be:	000fae03          	lw	t3,0(t6)
    8001a3c2:	00023397          	auipc	t2,0x23
    8001a3c6:	cbe38393          	add	t2,t2,-834 # 8003d080 <buf.1>
    8001a3ca:	001e0e9b          	addw	t4,t3,1
    8001a3ce:	01dfa023          	sw	t4,0(t6)
    8001a3d2:	9e1e                	add	t3,t3,t2
    8001a3d4:	02500f93          	li	t6,37
    8001a3d8:	01fe0023          	sb	t6,0(t3)
  if (ch == '\n' || buflen == sizeof(buf))
    8001a3dc:	04000e13          	li	t3,64
    8001a3e0:	e5ce9ae3          	bne	t4,t3,8001a234 <vprintfmt.constprop.1+0x6c>
  magic_mem[0] = which;
    8001a3e4:	05d73023          	sd	t4,64(a4)
  magic_mem[1] = arg0;
    8001a3e8:	4e05                	li	t3,1
    8001a3ea:	05c73423          	sd	t3,72(a4)
  magic_mem[2] = arg1;
    8001a3ee:	04773823          	sd	t2,80(a4)
  magic_mem[3] = arg2;
    8001a3f2:	05d73c23          	sd	t4,88(a4)
  __sync_synchronize();
    8001a3f6:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001a3fa:	04070e13          	add	t3,a4,64
    8001a3fe:	0000ce97          	auipc	t4,0xc
    8001a402:	c1ceb123          	sd	t3,-1022(t4) # 80026000 <tohost>
  while (fromhost == 0)
    8001a406:	0000ce17          	auipc	t3,0xc
    8001a40a:	c3ae0e13          	add	t3,t3,-966 # 80026040 <fromhost>
    8001a40e:	000e3e83          	ld	t4,0(t3)
    8001a412:	fe0e8ee3          	beqz	t4,8001a40e <vprintfmt.constprop.1+0x246>
  fromhost = 0;
    8001a416:	0000ce17          	auipc	t3,0xc
    8001a41a:	c20e3523          	sd	zero,-982(t3) # 80026040 <fromhost>
  __sync_synchronize();
    8001a41e:	0ff0000f          	fence
    buflen = 0;
    8001a422:	00023e17          	auipc	t3,0x23
    8001a426:	ca0e2923          	sw	zero,-846(t3) # 8003d0d4 <buflen.2>
  return magic_mem[0];
    8001a42a:	04073e03          	ld	t3,64(a4)
    buflen = 0;
    8001a42e:	b519                	j	8001a234 <vprintfmt.constprop.1+0x6c>
      precision = va_arg(ap, int);
    8001a430:	0005ae03          	lw	t3,0(a1)
        ch = *fmt;
    8001a434:	0012c903          	lbu	s2,1(t0)
      precision = va_arg(ap, int);
    8001a438:	05a1                	add	a1,a1,8
    switch (ch = *(unsigned char *) fmt++) {
    8001a43a:	82aa                	mv	t0,a0
      goto process_precision;
    8001a43c:	b7a5                	j	8001a3a4 <vprintfmt.constprop.1+0x1dc>
  buf[buflen++] = ch;
    8001a43e:	00023997          	auipc	s3,0x23
    8001a442:	c9698993          	add	s3,s3,-874 # 8003d0d4 <buflen.2>
    8001a446:	0009af83          	lw	t6,0(s3)
    8001a44a:	00023397          	auipc	t2,0x23
    8001a44e:	c3638393          	add	t2,t2,-970 # 8003d080 <buf.1>
    8001a452:	03000293          	li	t0,48
    8001a456:	01f38433          	add	s0,t2,t6
    8001a45a:	001f8e1b          	addw	t3,t6,1
    8001a45e:	00540023          	sb	t0,0(s0)
    8001a462:	01c9a023          	sw	t3,0(s3)
  if (ch == '\n' || buflen == sizeof(buf))
    8001a466:	04000413          	li	s0,64
    8001a46a:	568e0b63          	beq	t3,s0,8001a9e0 <vprintfmt.constprop.1+0x818>
  buf[buflen++] = ch;
    8001a46e:	002f829b          	addw	t0,t6,2
    8001a472:	0059a023          	sw	t0,0(s3)
    8001a476:	01c38fb3          	add	t6,t2,t3
    8001a47a:	00028e1b          	sext.w	t3,t0
    8001a47e:	07800293          	li	t0,120
    8001a482:	005f8023          	sb	t0,0(t6)
  if (ch == '\n' || buflen == sizeof(buf))
    8001a486:	508e1963          	bne	t3,s0,8001a998 <vprintfmt.constprop.1+0x7d0>
  magic_mem[0] = which;
    8001a48a:	11c73023          	sd	t3,256(a4)
  magic_mem[1] = arg0;
    8001a48e:	4f85                	li	t6,1
    8001a490:	11f73423          	sd	t6,264(a4)
  magic_mem[2] = arg1;
    8001a494:	10773823          	sd	t2,272(a4)
  magic_mem[3] = arg2;
    8001a498:	11c73c23          	sd	t3,280(a4)
  __sync_synchronize();
    8001a49c:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001a4a0:	10070e13          	add	t3,a4,256
    8001a4a4:	0000cf97          	auipc	t6,0xc
    8001a4a8:	b5cfbe23          	sd	t3,-1188(t6) # 80026000 <tohost>
  while (fromhost == 0)
    8001a4ac:	0000ce17          	auipc	t3,0xc
    8001a4b0:	b94e0e13          	add	t3,t3,-1132 # 80026040 <fromhost>
    8001a4b4:	000e3f83          	ld	t6,0(t3)
    8001a4b8:	fe0f8ee3          	beqz	t6,8001a4b4 <vprintfmt.constprop.1+0x2ec>
  fromhost = 0;
    8001a4bc:	0000ce17          	auipc	t3,0xc
    8001a4c0:	b80e3223          	sd	zero,-1148(t3) # 80026040 <fromhost>
  __sync_synchronize();
    8001a4c4:	0ff0000f          	fence
    buflen = 0;
    8001a4c8:	00023e17          	auipc	t3,0x23
    8001a4cc:	c00e2623          	sw	zero,-1012(t3) # 8003d0d4 <buflen.2>
  return magic_mem[0];
    8001a4d0:	10073e03          	ld	t3,256(a4)
    buflen = 0;
    8001a4d4:	42c1                	li	t0,16
    8001a4d6:	4e01                	li	t3,0
    8001a4d8:	00858413          	add	s0,a1,8
    8001a4dc:	a1c9                	j	8001a99e <vprintfmt.constprop.1+0x7d6>
  if (lflag >= 2)
    8001a4de:	4e05                	li	t3,1
      precision = va_arg(ap, int);
    8001a4e0:	00858293          	add	t0,a1,8
  if (lflag >= 2)
    8001a4e4:	007e4463          	blt	t3,t2,8001a4ec <vprintfmt.constprop.1+0x324>
  else if (lflag)
    8001a4e8:	4a038563          	beqz	t2,8001a992 <vprintfmt.constprop.1+0x7ca>
    return va_arg(*ap, long);
    8001a4ec:	0005bf83          	ld	t6,0(a1)
  buf[buflen++] = ch;
    8001a4f0:	00023997          	auipc	s3,0x23
    8001a4f4:	be498993          	add	s3,s3,-1052 # 8003d0d4 <buflen.2>
    8001a4f8:	0009ae03          	lw	t3,0(s3)
      if ((long long) num < 0) {
    8001a4fc:	4a0fc963          	bltz	t6,8001a9ae <vprintfmt.constprop.1+0x7e6>
      num = getint(&ap, lflag);
    8001a500:	8596                	mv	a1,t0
    8001a502:	00023397          	auipc	t2,0x23
    8001a506:	b7e38393          	add	t2,t2,-1154 # 8003d080 <buf.1>
    8001a50a:	42a9                	li	t0,10
    digs[pos++] = num % base;
    8001a50c:	025ffab3          	remu	s5,t6,t0
    8001a510:	01410913          	add	s2,sp,20
    8001a514:	4405                	li	s0,1
    8001a516:	c856                	sw	s5,16(sp)
    if (num < base)
    8001a518:	425fe963          	bltu	t6,t0,8001a94a <vprintfmt.constprop.1+0x782>
    num /= base;
    8001a51c:	025fdfb3          	divu	t6,t6,t0
    if (num < base)
    8001a520:	0911                	add	s2,s2,4
    8001a522:	8aa2                	mv	s5,s0
    digs[pos++] = num % base;
    8001a524:	2405                	addw	s0,s0,1
    8001a526:	025ffb33          	remu	s6,t6,t0
    8001a52a:	ff692e23          	sw	s6,-4(s2)
    if (num < base)
    8001a52e:	fe5ff7e3          	bgeu	t6,t0,8001a51c <vprintfmt.constprop.1+0x354>
  while (width-- > pos)
    8001a532:	fffe8f9b          	addw	t6,t4,-1
    8001a536:	fff4091b          	addw	s2,s0,-1
    8001a53a:	07d45c63          	bge	s0,t4,8001a5b2 <vprintfmt.constprop.1+0x3ea>
  if (ch == '\n' || buflen == sizeof(buf))
    8001a53e:	04000413          	li	s0,64
  magic_mem[1] = arg0;
    8001a542:	4c05                	li	s8,1
  tohost = (uintptr_t)magic_mem;
    8001a544:	0c070b93          	add	s7,a4,192
    8001a548:	0000cb17          	auipc	s6,0xc
    8001a54c:	ab8b0b13          	add	s6,s6,-1352 # 80026000 <tohost>
    8001a550:	0000ce97          	auipc	t4,0xc
    8001a554:	af0e8e93          	add	t4,t4,-1296 # 80026040 <fromhost>
    8001a558:	a021                	j	8001a560 <vprintfmt.constprop.1+0x398>
  while (width-- > pos)
    8001a55a:	3ffd                	addw	t6,t6,-1
    8001a55c:	05f90b63          	beq	s2,t6,8001a5b2 <vprintfmt.constprop.1+0x3ea>
  buf[buflen++] = ch;
    8001a560:	001e029b          	addw	t0,t3,1
    8001a564:	9e1e                	add	t3,t3,t2
    8001a566:	014e0023          	sb	s4,0(t3)
    8001a56a:	0059a023          	sw	t0,0(s3)
    8001a56e:	00028e1b          	sext.w	t3,t0
  if (ch == '\n' || buflen == sizeof(buf))
    8001a572:	fe8e14e3          	bne	t3,s0,8001a55a <vprintfmt.constprop.1+0x392>
  magic_mem[0] = which;
    8001a576:	e360                	sd	s0,192(a4)
  magic_mem[1] = arg0;
    8001a578:	0d873423          	sd	s8,200(a4)
  magic_mem[2] = arg1;
    8001a57c:	0c773823          	sd	t2,208(a4)
  magic_mem[3] = arg2;
    8001a580:	ef60                	sd	s0,216(a4)
  __sync_synchronize();
    8001a582:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001a586:	017b3023          	sd	s7,0(s6)
  while (fromhost == 0)
    8001a58a:	000ebe03          	ld	t3,0(t4)
    8001a58e:	fe0e0ee3          	beqz	t3,8001a58a <vprintfmt.constprop.1+0x3c2>
  fromhost = 0;
    8001a592:	0000ce17          	auipc	t3,0xc
    8001a596:	aa0e3723          	sd	zero,-1362(t3) # 80026040 <fromhost>
  __sync_synchronize();
    8001a59a:	0ff0000f          	fence
  return magic_mem[0];
    8001a59e:	0c073e03          	ld	t3,192(a4)
  while (width-- > pos)
    8001a5a2:	3ffd                	addw	t6,t6,-1
    buflen = 0;
    8001a5a4:	00023e17          	auipc	t3,0x23
    8001a5a8:	b20e2823          	sw	zero,-1232(t3) # 8003d0d4 <buflen.2>
    8001a5ac:	4e01                	li	t3,0
  while (width-- > pos)
    8001a5ae:	fbf919e3          	bne	s2,t6,8001a560 <vprintfmt.constprop.1+0x398>
    8001a5b2:	0a8a                	sll	s5,s5,0x2
    8001a5b4:	010a8413          	add	s0,s5,16 # 20010 <_test_table_size+0x2000f>
    8001a5b8:	002402b3          	add	t0,s0,sp
    8001a5bc:	00c10a93          	add	s5,sp,12
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8001a5c0:	4a25                	li	s4,9
  magic_mem[0] = which;
    8001a5c2:	04000913          	li	s2,64
  magic_mem[1] = arg0;
    8001a5c6:	4c85                	li	s9,1
  tohost = (uintptr_t)magic_mem;
    8001a5c8:	08070c13          	add	s8,a4,128
    8001a5cc:	0000cb97          	auipc	s7,0xc
    8001a5d0:	a34b8b93          	add	s7,s7,-1484 # 80026000 <tohost>
    8001a5d4:	0000cf97          	auipc	t6,0xc
    8001a5d8:	a6cf8f93          	add	t6,t6,-1428 # 80026040 <fromhost>
  if (ch == '\n' || buflen == sizeof(buf))
    8001a5dc:	4b29                	li	s6,10
    8001a5de:	a831                	j	8001a5fa <vprintfmt.constprop.1+0x432>
  buf[buflen++] = ch;
    8001a5e0:	9e1e                	add	t3,t3,t2
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8001a5e2:	030e8e9b          	addw	t4,t4,48
  buf[buflen++] = ch;
    8001a5e6:	0089a023          	sw	s0,0(s3)
    8001a5ea:	01de0023          	sb	t4,0(t3)
  if (ch == '\n' || buflen == sizeof(buf))
    8001a5ee:	8e22                	mv	t3,s0
    8001a5f0:	23240663          	beq	s0,s2,8001a81c <vprintfmt.constprop.1+0x654>
  while (pos-- > 0)
    8001a5f4:	12f1                	add	t0,t0,-4
    8001a5f6:	c25a8fe3          	beq	s5,t0,8001a234 <vprintfmt.constprop.1+0x6c>
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8001a5fa:	0002ae83          	lw	t4,0(t0)
  buf[buflen++] = ch;
    8001a5fe:	001e041b          	addw	s0,t3,1
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8001a602:	fdda7fe3          	bgeu	s4,t4,8001a5e0 <vprintfmt.constprop.1+0x418>
    8001a606:	057e8e9b          	addw	t4,t4,87
  buf[buflen++] = ch;
    8001a60a:	9e1e                	add	t3,t3,t2
    8001a60c:	0089a023          	sw	s0,0(s3)
    8001a610:	01de0023          	sb	t4,0(t3)
  if (ch == '\n' || buflen == sizeof(buf))
    8001a614:	fd6e9de3          	bne	t4,s6,8001a5ee <vprintfmt.constprop.1+0x426>
  magic_mem[0] = which;
    8001a618:	09273023          	sd	s2,128(a4)
  magic_mem[1] = arg0;
    8001a61c:	09973423          	sd	s9,136(a4)
  magic_mem[2] = arg1;
    8001a620:	08773823          	sd	t2,144(a4)
  magic_mem[3] = arg2;
    8001a624:	ef40                	sd	s0,152(a4)
  __sync_synchronize();
    8001a626:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001a62a:	018bb023          	sd	s8,0(s7)
  while (fromhost == 0)
    8001a62e:	000fbe03          	ld	t3,0(t6)
    8001a632:	fe0e0ee3          	beqz	t3,8001a62e <vprintfmt.constprop.1+0x466>
  fromhost = 0;
    8001a636:	0000ce17          	auipc	t3,0xc
    8001a63a:	a00e3523          	sd	zero,-1526(t3) # 80026040 <fromhost>
  __sync_synchronize();
    8001a63e:	0ff0000f          	fence
  return magic_mem[0];
    8001a642:	08073e03          	ld	t3,128(a4)
    buflen = 0;
    8001a646:	00023e17          	auipc	t3,0x23
    8001a64a:	a80e2723          	sw	zero,-1394(t3) # 8003d0d4 <buflen.2>
    8001a64e:	4e01                	li	t3,0
    8001a650:	b755                	j	8001a5f4 <vprintfmt.constprop.1+0x42c>
        ch = *fmt;
    8001a652:	0012c903          	lbu	s2,1(t0)
      lflag++;
    8001a656:	2385                	addw	t2,t2,1
    switch (ch = *(unsigned char *) fmt++) {
    8001a658:	82aa                	mv	t0,a0
      goto reswitch;
    8001a65a:	b9b9                	j	8001a2b8 <vprintfmt.constprop.1+0xf0>
    switch (ch = *(unsigned char *) fmt++) {
    8001a65c:	42c1                	li	t0,16
  buf[buflen++] = ch;
    8001a65e:	00023997          	auipc	s3,0x23
    8001a662:	a7698993          	add	s3,s3,-1418 # 8003d0d4 <buflen.2>
  if (lflag >= 2)
    8001a666:	4f85                	li	t6,1
  buf[buflen++] = ch;
    8001a668:	0009ae03          	lw	t3,0(s3)
      precision = va_arg(ap, int);
    8001a66c:	00858413          	add	s0,a1,8
  if (lflag >= 2)
    8001a670:	227fc863          	blt	t6,t2,8001a8a0 <vprintfmt.constprop.1+0x6d8>
  else if (lflag)
    8001a674:	4e039b63          	bnez	t2,8001ab6a <vprintfmt.constprop.1+0x9a2>
    return va_arg(*ap, unsigned int);
    8001a678:	0005ef83          	lwu	t6,0(a1)
    8001a67c:	00023397          	auipc	t2,0x23
    8001a680:	a0438393          	add	t2,t2,-1532 # 8003d080 <buf.1>
    8001a684:	85a2                	mv	a1,s0
    8001a686:	b559                	j	8001a50c <vprintfmt.constprop.1+0x344>
      if ((p = va_arg(ap, char *)) == NULL)
    8001a688:	0005b903          	ld	s2,0(a1)
    8001a68c:	00858413          	add	s0,a1,8
    8001a690:	3a090563          	beqz	s2,8001aa3a <vprintfmt.constprop.1+0x872>
      if (width > 0 && padc != '-')
    8001a694:	01d05c63          	blez	t4,8001a6ac <vprintfmt.constprop.1+0x4e4>
    8001a698:	02d00593          	li	a1,45
    8001a69c:	3aba1e63          	bne	s4,a1,8001aa58 <vprintfmt.constprop.1+0x890>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001a6a0:	00094583          	lbu	a1,0(s2)
    8001a6a4:	00058f9b          	sext.w	t6,a1
    8001a6a8:	e981                	bnez	a1,8001a6b8 <vprintfmt.constprop.1+0x4f0>
    8001a6aa:	ac19                	j	8001a8c0 <vprintfmt.constprop.1+0x6f8>
    8001a6ac:	00094583          	lbu	a1,0(s2)
    8001a6b0:	00058f9b          	sext.w	t6,a1
    8001a6b4:	1e058e63          	beqz	a1,8001a8b0 <vprintfmt.constprop.1+0x6e8>
  tohost = (uintptr_t)magic_mem;
    8001a6b8:	20070c93          	add	s9,a4,512
    8001a6bc:	e466                	sd	s9,8(sp)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001a6be:	5c7d                	li	s8,-1
  buf[buflen++] = ch;
    8001a6c0:	00023297          	auipc	t0,0x23
    8001a6c4:	a1428293          	add	t0,t0,-1516 # 8003d0d4 <buflen.2>
    8001a6c8:	00023a17          	auipc	s4,0x23
    8001a6cc:	9b8a0a13          	add	s4,s4,-1608 # 8003d080 <buf.1>
  if (ch == '\n' || buflen == sizeof(buf))
    8001a6d0:	4ba9                	li	s7,10
  magic_mem[0] = which;
    8001a6d2:	04000b13          	li	s6,64
  magic_mem[1] = arg0;
    8001a6d6:	4d05                	li	s10,1
    8001a6d8:	0000c997          	auipc	s3,0xc
    8001a6dc:	96898993          	add	s3,s3,-1688 # 80026040 <fromhost>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001a6e0:	040e4163          	bltz	t3,8001a722 <vprintfmt.constprop.1+0x55a>
    8001a6e4:	fffe0c9b          	addw	s9,t3,-1
    8001a6e8:	1d8c8a63          	beq	s9,s8,8001a8bc <vprintfmt.constprop.1+0x6f4>
  buf[buflen++] = ch;
    8001a6ec:	0002aa83          	lw	s5,0(t0)
    8001a6f0:	001a839b          	addw	t2,s5,1
    8001a6f4:	9ad2                	add	s5,s5,s4
    8001a6f6:	0072a023          	sw	t2,0(t0)
    8001a6fa:	00ba8023          	sb	a1,0(s5)
  if (ch == '\n' || buflen == sizeof(buf))
    8001a6fe:	037f8e63          	beq	t6,s7,8001a73a <vprintfmt.constprop.1+0x572>
    8001a702:	03638c63          	beq	t2,s6,8001a73a <vprintfmt.constprop.1+0x572>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001a706:	00194583          	lbu	a1,1(s2)
    8001a70a:	3efd                	addw	t4,t4,-1
    8001a70c:	83f6                	mv	t2,t4
        p++;
    8001a70e:	0905                	add	s2,s2,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001a710:	00058f9b          	sext.w	t6,a1
    8001a714:	1a058463          	beqz	a1,8001a8bc <vprintfmt.constprop.1+0x6f4>
    8001a718:	100e4563          	bltz	t3,8001a822 <vprintfmt.constprop.1+0x65a>
    8001a71c:	8e66                	mv	t3,s9
    8001a71e:	fc0e53e3          	bgez	t3,8001a6e4 <vprintfmt.constprop.1+0x51c>
  buf[buflen++] = ch;
    8001a722:	0002aa83          	lw	s5,0(t0)
    8001a726:	8cf2                	mv	s9,t3
    8001a728:	001a839b          	addw	t2,s5,1
    8001a72c:	9ad2                	add	s5,s5,s4
    8001a72e:	0072a023          	sw	t2,0(t0)
    8001a732:	00ba8023          	sb	a1,0(s5)
  if (ch == '\n' || buflen == sizeof(buf))
    8001a736:	fd7f96e3          	bne	t6,s7,8001a702 <vprintfmt.constprop.1+0x53a>
  magic_mem[0] = which;
    8001a73a:	21673023          	sd	s6,512(a4)
  magic_mem[1] = arg0;
    8001a73e:	21a73423          	sd	s10,520(a4)
  magic_mem[2] = arg1;
    8001a742:	21473823          	sd	s4,528(a4)
  magic_mem[3] = arg2;
    8001a746:	20773c23          	sd	t2,536(a4)
  __sync_synchronize();
    8001a74a:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001a74e:	6fa2                	ld	t6,8(sp)
    8001a750:	0000c597          	auipc	a1,0xc
    8001a754:	8b058593          	add	a1,a1,-1872 # 80026000 <tohost>
    8001a758:	01f5b023          	sd	t6,0(a1)
  while (fromhost == 0)
    8001a75c:	0009b583          	ld	a1,0(s3)
    8001a760:	ddf5                	beqz	a1,8001a75c <vprintfmt.constprop.1+0x594>
  fromhost = 0;
    8001a762:	0000c597          	auipc	a1,0xc
    8001a766:	8c05bf23          	sd	zero,-1826(a1) # 80026040 <fromhost>
  __sync_synchronize();
    8001a76a:	0ff0000f          	fence
  return magic_mem[0];
    8001a76e:	20073583          	ld	a1,512(a4)
    buflen = 0;
    8001a772:	00023597          	auipc	a1,0x23
    8001a776:	9605a123          	sw	zero,-1694(a1) # 8003d0d4 <buflen.2>
    8001a77a:	b771                	j	8001a706 <vprintfmt.constprop.1+0x53e>
      if (width < 0)
    8001a77c:	fffecf93          	not	t6,t4
    8001a780:	43ffdf93          	sra	t6,t6,0x3f
    8001a784:	01fefeb3          	and	t4,t4,t6
        ch = *fmt;
    8001a788:	0012c903          	lbu	s2,1(t0)
      if (width < 0)
    8001a78c:	2e81                	sext.w	t4,t4
    switch (ch = *(unsigned char *) fmt++) {
    8001a78e:	82aa                	mv	t0,a0
      goto reswitch;
    8001a790:	b625                	j	8001a2b8 <vprintfmt.constprop.1+0xf0>
  buf[buflen++] = ch;
    8001a792:	00023297          	auipc	t0,0x23
    8001a796:	94228293          	add	t0,t0,-1726 # 8003d0d4 <buflen.2>
    8001a79a:	0002ae83          	lw	t4,0(t0)
      putch(va_arg(ap, int), putdat);
    8001a79e:	0005af83          	lw	t6,0(a1)
  buf[buflen++] = ch;
    8001a7a2:	00023397          	auipc	t2,0x23
    8001a7a6:	8de38393          	add	t2,t2,-1826 # 8003d080 <buf.1>
    8001a7aa:	001e8e1b          	addw	t3,t4,1
    8001a7ae:	9e9e                	add	t4,t4,t2
    8001a7b0:	01fe8023          	sb	t6,0(t4)
    8001a7b4:	01c2a023          	sw	t3,0(t0)
  if (ch == '\n' || buflen == sizeof(buf))
    8001a7b8:	4ea9                	li	t4,10
    8001a7ba:	01df8863          	beq	t6,t4,8001a7ca <vprintfmt.constprop.1+0x602>
    8001a7be:	04000e93          	li	t4,64
    8001a7c2:	01de0463          	beq	t3,t4,8001a7ca <vprintfmt.constprop.1+0x602>
      putch(va_arg(ap, int), putdat);
    8001a7c6:	05a1                	add	a1,a1,8
    8001a7c8:	b4b5                	j	8001a234 <vprintfmt.constprop.1+0x6c>
  magic_mem[0] = which;
    8001a7ca:	04000e93          	li	t4,64
    8001a7ce:	29d73023          	sd	t4,640(a4)
  magic_mem[1] = arg0;
    8001a7d2:	4e85                	li	t4,1
    8001a7d4:	29d73423          	sd	t4,648(a4)
  magic_mem[2] = arg1;
    8001a7d8:	28773823          	sd	t2,656(a4)
  magic_mem[3] = arg2;
    8001a7dc:	29c73c23          	sd	t3,664(a4)
  __sync_synchronize();
    8001a7e0:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001a7e4:	28070e13          	add	t3,a4,640
    8001a7e8:	0000ce97          	auipc	t4,0xc
    8001a7ec:	81cebc23          	sd	t3,-2024(t4) # 80026000 <tohost>
  while (fromhost == 0)
    8001a7f0:	0000ce17          	auipc	t3,0xc
    8001a7f4:	850e0e13          	add	t3,t3,-1968 # 80026040 <fromhost>
    8001a7f8:	000e3e83          	ld	t4,0(t3)
    8001a7fc:	fe0e8ee3          	beqz	t4,8001a7f8 <vprintfmt.constprop.1+0x630>
  fromhost = 0;
    8001a800:	0000ce17          	auipc	t3,0xc
    8001a804:	840e3023          	sd	zero,-1984(t3) # 80026040 <fromhost>
  __sync_synchronize();
    8001a808:	0ff0000f          	fence
    buflen = 0;
    8001a80c:	00023e17          	auipc	t3,0x23
    8001a810:	8c0e2423          	sw	zero,-1848(t3) # 8003d0d4 <buflen.2>
  return magic_mem[0];
    8001a814:	28073e03          	ld	t3,640(a4)
      putch(va_arg(ap, int), putdat);
    8001a818:	05a1                	add	a1,a1,8
    8001a81a:	bc29                	j	8001a234 <vprintfmt.constprop.1+0x6c>
    8001a81c:	04000413          	li	s0,64
    8001a820:	bbe5                	j	8001a618 <vprintfmt.constprop.1+0x450>
        p++;
    8001a822:	89ca                	mv	s3,s2
  if (ch == '\n' || buflen == sizeof(buf))
    8001a824:	4b29                	li	s6,10
  magic_mem[0] = which;
    8001a826:	04000a93          	li	s5,64
  magic_mem[1] = arg0;
    8001a82a:	4c85                	li	s9,1
  tohost = (uintptr_t)magic_mem;
    8001a82c:	20070c13          	add	s8,a4,512
    8001a830:	0000bb97          	auipc	s7,0xb
    8001a834:	7d0b8b93          	add	s7,s7,2000 # 80026000 <tohost>
    8001a838:	0000ce97          	auipc	t4,0xc
    8001a83c:	808e8e93          	add	t4,t4,-2040 # 80026040 <fromhost>
    8001a840:	a039                	j	8001a84e <vprintfmt.constprop.1+0x686>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001a842:	0019c583          	lbu	a1,1(s3)
        p++;
    8001a846:	0985                	add	s3,s3,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001a848:	00058f9b          	sext.w	t6,a1
    8001a84c:	c5a5                	beqz	a1,8001a8b4 <vprintfmt.constprop.1+0x6ec>
  buf[buflen++] = ch;
    8001a84e:	0002ad03          	lw	s10,0(t0)
    8001a852:	001d0e1b          	addw	t3,s10,1
    8001a856:	9d52                	add	s10,s10,s4
    8001a858:	01c2a023          	sw	t3,0(t0)
    8001a85c:	00bd0023          	sb	a1,0(s10)
  if (ch == '\n' || buflen == sizeof(buf))
    8001a860:	016f8463          	beq	t6,s6,8001a868 <vprintfmt.constprop.1+0x6a0>
    8001a864:	fd5e1fe3          	bne	t3,s5,8001a842 <vprintfmt.constprop.1+0x67a>
  magic_mem[0] = which;
    8001a868:	21573023          	sd	s5,512(a4)
  magic_mem[1] = arg0;
    8001a86c:	21973423          	sd	s9,520(a4)
  magic_mem[2] = arg1;
    8001a870:	21473823          	sd	s4,528(a4)
  magic_mem[3] = arg2;
    8001a874:	21c73c23          	sd	t3,536(a4)
  __sync_synchronize();
    8001a878:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001a87c:	018bb023          	sd	s8,0(s7)
  while (fromhost == 0)
    8001a880:	000eb583          	ld	a1,0(t4)
    8001a884:	ddf5                	beqz	a1,8001a880 <vprintfmt.constprop.1+0x6b8>
  fromhost = 0;
    8001a886:	0000b597          	auipc	a1,0xb
    8001a88a:	7a05bd23          	sd	zero,1978(a1) # 80026040 <fromhost>
  __sync_synchronize();
    8001a88e:	0ff0000f          	fence
  return magic_mem[0];
    8001a892:	20073583          	ld	a1,512(a4)
    buflen = 0;
    8001a896:	00023597          	auipc	a1,0x23
    8001a89a:	8205af23          	sw	zero,-1986(a1) # 8003d0d4 <buflen.2>
    8001a89e:	b755                	j	8001a842 <vprintfmt.constprop.1+0x67a>
    return va_arg(*ap, unsigned long long);
    8001a8a0:	0005bf83          	ld	t6,0(a1)
    8001a8a4:	00022397          	auipc	t2,0x22
    8001a8a8:	7dc38393          	add	t2,t2,2012 # 8003d080 <buf.1>
    8001a8ac:	85a2                	mv	a1,s0
    8001a8ae:	b9b9                	j	8001a50c <vprintfmt.constprop.1+0x344>
      if ((p = va_arg(ap, char *)) == NULL)
    8001a8b0:	85a2                	mv	a1,s0
    8001a8b2:	b249                	j	8001a234 <vprintfmt.constprop.1+0x6c>
    8001a8b4:	01238ebb          	addw	t4,t2,s2
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001a8b8:	413e8ebb          	subw	t4,t4,s3
      for (; width > 0; width--)
    8001a8bc:	ffd05ae3          	blez	t4,8001a8b0 <vprintfmt.constprop.1+0x6e8>
  buf[buflen++] = ch;
    8001a8c0:	00023997          	auipc	s3,0x23
    8001a8c4:	81498993          	add	s3,s3,-2028 # 8003d0d4 <buflen.2>
    8001a8c8:	0009a583          	lw	a1,0(s3)
    8001a8cc:	00022397          	auipc	t2,0x22
    8001a8d0:	7b438393          	add	t2,t2,1972 # 8003d080 <buf.1>
    8001a8d4:	02000913          	li	s2,32
  if (ch == '\n' || buflen == sizeof(buf))
    8001a8d8:	04000293          	li	t0,64
  magic_mem[1] = arg0;
    8001a8dc:	4b05                	li	s6,1
  tohost = (uintptr_t)magic_mem;
    8001a8de:	1c070a93          	add	s5,a4,448
    8001a8e2:	0000ba17          	auipc	s4,0xb
    8001a8e6:	71ea0a13          	add	s4,s4,1822 # 80026000 <tohost>
    8001a8ea:	0000bf97          	auipc	t6,0xb
    8001a8ee:	756f8f93          	add	t6,t6,1878 # 80026040 <fromhost>
    8001a8f2:	a021                	j	8001a8fa <vprintfmt.constprop.1+0x732>
      for (; width > 0; width--)
    8001a8f4:	3efd                	addw	t4,t4,-1
    8001a8f6:	fa0e8de3          	beqz	t4,8001a8b0 <vprintfmt.constprop.1+0x6e8>
  buf[buflen++] = ch;
    8001a8fa:	00158e1b          	addw	t3,a1,1
    8001a8fe:	959e                	add	a1,a1,t2
    8001a900:	01258023          	sb	s2,0(a1)
    8001a904:	01c9a023          	sw	t3,0(s3)
    8001a908:	000e059b          	sext.w	a1,t3
  if (ch == '\n' || buflen == sizeof(buf))
    8001a90c:	fe5594e3          	bne	a1,t0,8001a8f4 <vprintfmt.constprop.1+0x72c>
  magic_mem[0] = which;
    8001a910:	1c573023          	sd	t0,448(a4)
  magic_mem[1] = arg0;
    8001a914:	1d673423          	sd	s6,456(a4)
  magic_mem[2] = arg1;
    8001a918:	1c773823          	sd	t2,464(a4)
  magic_mem[3] = arg2;
    8001a91c:	1c573c23          	sd	t0,472(a4)
  __sync_synchronize();
    8001a920:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001a924:	015a3023          	sd	s5,0(s4)
  while (fromhost == 0)
    8001a928:	000fb583          	ld	a1,0(t6)
    8001a92c:	ddf5                	beqz	a1,8001a928 <vprintfmt.constprop.1+0x760>
  fromhost = 0;
    8001a92e:	0000b597          	auipc	a1,0xb
    8001a932:	7005b923          	sd	zero,1810(a1) # 80026040 <fromhost>
  __sync_synchronize();
    8001a936:	0ff0000f          	fence
  return magic_mem[0];
    8001a93a:	1c073583          	ld	a1,448(a4)
    buflen = 0;
    8001a93e:	00022597          	auipc	a1,0x22
    8001a942:	7805ab23          	sw	zero,1942(a1) # 8003d0d4 <buflen.2>
    8001a946:	4581                	li	a1,0
    8001a948:	b775                	j	8001a8f4 <vprintfmt.constprop.1+0x72c>
    if (num < base)
    8001a94a:	4a81                	li	s5,0
    8001a94c:	b6dd                	j	8001a532 <vprintfmt.constprop.1+0x36a>
  magic_mem[0] = which;
    8001a94e:	01c73023          	sd	t3,0(a4)
  magic_mem[1] = arg0;
    8001a952:	4505                	li	a0,1
    8001a954:	e708                	sd	a0,8(a4)
  magic_mem[2] = arg1;
    8001a956:	00773823          	sd	t2,16(a4)
  magic_mem[3] = arg2;
    8001a95a:	01c73c23          	sd	t3,24(a4)
  __sync_synchronize();
    8001a95e:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001a962:	0000be17          	auipc	t3,0xb
    8001a966:	6dee0e13          	add	t3,t3,1758 # 80026040 <fromhost>
    8001a96a:	0000b517          	auipc	a0,0xb
    8001a96e:	68e53b23          	sd	a4,1686(a0) # 80026000 <tohost>
  while (fromhost == 0)
    8001a972:	000e3503          	ld	a0,0(t3)
    8001a976:	dd75                	beqz	a0,8001a972 <vprintfmt.constprop.1+0x7aa>
  fromhost = 0;
    8001a978:	0000b517          	auipc	a0,0xb
    8001a97c:	6c053423          	sd	zero,1736(a0) # 80026040 <fromhost>
  __sync_synchronize();
    8001a980:	0ff0000f          	fence
  return magic_mem[0];
    8001a984:	6308                	ld	a0,0(a4)
    buflen = 0;
    8001a986:	00022517          	auipc	a0,0x22
    8001a98a:	74052723          	sw	zero,1870(a0) # 8003d0d4 <buflen.2>
      fmt = last_fmt;
    8001a98e:	8522                	mv	a0,s0
    8001a990:	b055                	j	8001a234 <vprintfmt.constprop.1+0x6c>
    return va_arg(*ap, int);
    8001a992:	0005af83          	lw	t6,0(a1)
    8001a996:	bea9                	j	8001a4f0 <vprintfmt.constprop.1+0x328>
    8001a998:	42c1                	li	t0,16
    8001a99a:	00858413          	add	s0,a1,8
    return va_arg(*ap, unsigned long);
    8001a99e:	0005bf83          	ld	t6,0(a1)
    8001a9a2:	85a2                	mv	a1,s0
    8001a9a4:	b6a5                	j	8001a50c <vprintfmt.constprop.1+0x344>
    switch (ch = *(unsigned char *) fmt++) {
    8001a9a6:	42a9                	li	t0,10
    8001a9a8:	b95d                	j	8001a65e <vprintfmt.constprop.1+0x496>
    8001a9aa:	42a1                	li	t0,8
    8001a9ac:	b94d                	j	8001a65e <vprintfmt.constprop.1+0x496>
  buf[buflen++] = ch;
    8001a9ae:	001e059b          	addw	a1,t3,1
    8001a9b2:	00022397          	auipc	t2,0x22
    8001a9b6:	6ce38393          	add	t2,t2,1742 # 8003d080 <buf.1>
    8001a9ba:	01c38433          	add	s0,t2,t3
    8001a9be:	00b9a023          	sw	a1,0(s3)
    8001a9c2:	00058e1b          	sext.w	t3,a1
    8001a9c6:	02d00593          	li	a1,45
    8001a9ca:	00b40023          	sb	a1,0(s0)
  if (ch == '\n' || buflen == sizeof(buf))
    8001a9ce:	04000593          	li	a1,64
    8001a9d2:	12be0d63          	beq	t3,a1,8001ab0c <vprintfmt.constprop.1+0x944>
        num = -(long long) num;
    8001a9d6:	8596                	mv	a1,t0
    8001a9d8:	41f00fb3          	neg	t6,t6
    8001a9dc:	42a9                	li	t0,10
    8001a9de:	b63d                	j	8001a50c <vprintfmt.constprop.1+0x344>
  magic_mem[0] = which;
    8001a9e0:	15c73023          	sd	t3,320(a4)
  magic_mem[1] = arg0;
    8001a9e4:	4f85                	li	t6,1
    8001a9e6:	15f73423          	sd	t6,328(a4)
  magic_mem[2] = arg1;
    8001a9ea:	14773823          	sd	t2,336(a4)
  magic_mem[3] = arg2;
    8001a9ee:	15c73c23          	sd	t3,344(a4)
  __sync_synchronize();
    8001a9f2:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001a9f6:	14070e13          	add	t3,a4,320
    8001a9fa:	0000bf97          	auipc	t6,0xb
    8001a9fe:	61cfb323          	sd	t3,1542(t6) # 80026000 <tohost>
  while (fromhost == 0)
    8001aa02:	0000be17          	auipc	t3,0xb
    8001aa06:	63ee0e13          	add	t3,t3,1598 # 80026040 <fromhost>
    8001aa0a:	000e3f83          	ld	t6,0(t3)
    8001aa0e:	fe0f8ee3          	beqz	t6,8001aa0a <vprintfmt.constprop.1+0x842>
  fromhost = 0;
    8001aa12:	0000be17          	auipc	t3,0xb
    8001aa16:	620e3723          	sd	zero,1582(t3) # 80026040 <fromhost>
  __sync_synchronize();
    8001aa1a:	0ff0000f          	fence
  return magic_mem[0];
    8001aa1e:	14073e03          	ld	t3,320(a4)
  buf[buflen++] = ch;
    8001aa22:	42c1                	li	t0,16
    8001aa24:	4e05                	li	t3,1
    8001aa26:	01c9a023          	sw	t3,0(s3)
    8001aa2a:	07800e13          	li	t3,120
    8001aa2e:	01c38023          	sb	t3,0(t2)
  if (ch == '\n' || buflen == sizeof(buf))
    8001aa32:	00858413          	add	s0,a1,8
  buf[buflen++] = ch;
    8001aa36:	4e05                	li	t3,1
    8001aa38:	b79d                	j	8001a99e <vprintfmt.constprop.1+0x7d6>
      if (width > 0 && padc != '-')
    8001aa3a:	01d05663          	blez	t4,8001aa46 <vprintfmt.constprop.1+0x87e>
    8001aa3e:	02d00593          	li	a1,45
    8001aa42:	10ba1b63          	bne	s4,a1,8001ab58 <vprintfmt.constprop.1+0x990>
        p = "(null)";
    8001aa46:	00008917          	auipc	s2,0x8
    8001aa4a:	5e290913          	add	s2,s2,1506 # 80023028 <__func__.1+0x6830>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001aa4e:	02800593          	li	a1,40
    8001aa52:	02800f93          	li	t6,40
    8001aa56:	b18d                	j	8001a6b8 <vprintfmt.constprop.1+0x4f0>
        for (width -= strnlen(p, precision); width > 0; width--)
    8001aa58:	000e8f9b          	sext.w	t6,t4
  while (n-- && *p)
    8001aa5c:	020e0363          	beqz	t3,8001aa82 <vprintfmt.constprop.1+0x8ba>
        p = "(null)";
    8001aa60:	85ca                	mv	a1,s2
  while (n-- && *p)
    8001aa62:	01c902b3          	add	t0,s2,t3
    8001aa66:	a021                	j	8001aa6e <vprintfmt.constprop.1+0x8a6>
    p++;
    8001aa68:	0585                	add	a1,a1,1
  while (n-- && *p)
    8001aa6a:	00558663          	beq	a1,t0,8001aa76 <vprintfmt.constprop.1+0x8ae>
    8001aa6e:	0005ce83          	lbu	t4,0(a1)
    8001aa72:	fe0e9be3          	bnez	t4,8001aa68 <vprintfmt.constprop.1+0x8a0>
  return p - s;
    8001aa76:	412585b3          	sub	a1,a1,s2
        for (width -= strnlen(p, precision); width > 0; width--)
    8001aa7a:	40bf8ebb          	subw	t4,t6,a1
    8001aa7e:	c3d057e3          	blez	t4,8001a6ac <vprintfmt.constprop.1+0x4e4>
  buf[buflen++] = ch;
    8001aa82:	00022997          	auipc	s3,0x22
    8001aa86:	65298993          	add	s3,s3,1618 # 8003d0d4 <buflen.2>
    8001aa8a:	0009a583          	lw	a1,0(s3)
    8001aa8e:	00022397          	auipc	t2,0x22
    8001aa92:	5f238393          	add	t2,t2,1522 # 8003d080 <buf.1>
  if (ch == '\n' || buflen == sizeof(buf))
    8001aa96:	04000a93          	li	s5,64
  magic_mem[1] = arg0;
    8001aa9a:	4c05                	li	s8,1
  tohost = (uintptr_t)magic_mem;
    8001aa9c:	24070b93          	add	s7,a4,576
    8001aaa0:	0000bb17          	auipc	s6,0xb
    8001aaa4:	560b0b13          	add	s6,s6,1376 # 80026000 <tohost>
    8001aaa8:	0000bf97          	auipc	t6,0xb
    8001aaac:	598f8f93          	add	t6,t6,1432 # 80026040 <fromhost>
    8001aab0:	a021                	j	8001aab8 <vprintfmt.constprop.1+0x8f0>
        for (width -= strnlen(p, precision); width > 0; width--)
    8001aab2:	3efd                	addw	t4,t4,-1
    8001aab4:	be0e8ce3          	beqz	t4,8001a6ac <vprintfmt.constprop.1+0x4e4>
  buf[buflen++] = ch;
    8001aab8:	0015829b          	addw	t0,a1,1
    8001aabc:	959e                	add	a1,a1,t2
    8001aabe:	01458023          	sb	s4,0(a1)
    8001aac2:	0059a023          	sw	t0,0(s3)
    8001aac6:	0002859b          	sext.w	a1,t0
  if (ch == '\n' || buflen == sizeof(buf))
    8001aaca:	ff5594e3          	bne	a1,s5,8001aab2 <vprintfmt.constprop.1+0x8ea>
  magic_mem[0] = which;
    8001aace:	25573023          	sd	s5,576(a4)
  magic_mem[1] = arg0;
    8001aad2:	25873423          	sd	s8,584(a4)
  magic_mem[2] = arg1;
    8001aad6:	24773823          	sd	t2,592(a4)
  magic_mem[3] = arg2;
    8001aada:	25573c23          	sd	s5,600(a4)
  __sync_synchronize();
    8001aade:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001aae2:	017b3023          	sd	s7,0(s6)
  while (fromhost == 0)
    8001aae6:	000fb583          	ld	a1,0(t6)
    8001aaea:	ddf5                	beqz	a1,8001aae6 <vprintfmt.constprop.1+0x91e>
  fromhost = 0;
    8001aaec:	0000b597          	auipc	a1,0xb
    8001aaf0:	5405ba23          	sd	zero,1364(a1) # 80026040 <fromhost>
  __sync_synchronize();
    8001aaf4:	0ff0000f          	fence
  return magic_mem[0];
    8001aaf8:	24073583          	ld	a1,576(a4)
    buflen = 0;
    8001aafc:	00022597          	auipc	a1,0x22
    8001ab00:	5c05ac23          	sw	zero,1496(a1) # 8003d0d4 <buflen.2>
    8001ab04:	4581                	li	a1,0
    8001ab06:	b775                	j	8001aab2 <vprintfmt.constprop.1+0x8ea>
    switch (ch = *(unsigned char *) fmt++) {
    8001ab08:	82aa                	mv	t0,a0
    8001ab0a:	b869                	j	8001a3a4 <vprintfmt.constprop.1+0x1dc>
  magic_mem[0] = which;
    8001ab0c:	19c73023          	sd	t3,384(a4)
  magic_mem[1] = arg0;
    8001ab10:	4585                	li	a1,1
    8001ab12:	18b73423          	sd	a1,392(a4)
  magic_mem[2] = arg1;
    8001ab16:	18773823          	sd	t2,400(a4)
  magic_mem[3] = arg2;
    8001ab1a:	19c73c23          	sd	t3,408(a4)
  __sync_synchronize();
    8001ab1e:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001ab22:	18070593          	add	a1,a4,384
    8001ab26:	0000be17          	auipc	t3,0xb
    8001ab2a:	4cbe3d23          	sd	a1,1242(t3) # 80026000 <tohost>
  while (fromhost == 0)
    8001ab2e:	0000be17          	auipc	t3,0xb
    8001ab32:	512e0e13          	add	t3,t3,1298 # 80026040 <fromhost>
    8001ab36:	000e3583          	ld	a1,0(t3)
    8001ab3a:	ddf5                	beqz	a1,8001ab36 <vprintfmt.constprop.1+0x96e>
  fromhost = 0;
    8001ab3c:	0000b597          	auipc	a1,0xb
    8001ab40:	5005b223          	sd	zero,1284(a1) # 80026040 <fromhost>
  __sync_synchronize();
    8001ab44:	0ff0000f          	fence
  return magic_mem[0];
    8001ab48:	18073583          	ld	a1,384(a4)
    buflen = 0;
    8001ab4c:	4e01                	li	t3,0
    8001ab4e:	00022597          	auipc	a1,0x22
    8001ab52:	5805a323          	sw	zero,1414(a1) # 8003d0d4 <buflen.2>
    8001ab56:	b541                	j	8001a9d6 <vprintfmt.constprop.1+0x80e>
        for (width -= strnlen(p, precision); width > 0; width--)
    8001ab58:	000e8f9b          	sext.w	t6,t4
        p = "(null)";
    8001ab5c:	00008917          	auipc	s2,0x8
    8001ab60:	4cc90913          	add	s2,s2,1228 # 80023028 <__func__.1+0x6830>
  while (n-- && *p)
    8001ab64:	ee0e1ee3          	bnez	t3,8001aa60 <vprintfmt.constprop.1+0x898>
    8001ab68:	bf29                	j	8001aa82 <vprintfmt.constprop.1+0x8ba>
    8001ab6a:	00022397          	auipc	t2,0x22
    8001ab6e:	51638393          	add	t2,t2,1302 # 8003d080 <buf.1>
    8001ab72:	b535                	j	8001a99e <vprintfmt.constprop.1+0x7d6>

000000008001ab74 <strlen>:
  while (*p)
    8001ab74:	00054783          	lbu	a5,0(a0)
    8001ab78:	cb89                	beqz	a5,8001ab8a <strlen+0x16>
  const char *p = s;
    8001ab7a:	87aa                	mv	a5,a0
  while (*p)
    8001ab7c:	0017c703          	lbu	a4,1(a5)
    p++;
    8001ab80:	0785                	add	a5,a5,1
  while (*p)
    8001ab82:	ff6d                	bnez	a4,8001ab7c <strlen+0x8>
  return p - s;
    8001ab84:	40a78533          	sub	a0,a5,a0
    8001ab88:	8082                	ret
  while (*p)
    8001ab8a:	4501                	li	a0,0
}
    8001ab8c:	8082                	ret

000000008001ab8e <strnlen>:
  while (n-- && *p)
    8001ab8e:	00b506b3          	add	a3,a0,a1
  const char *p = s;
    8001ab92:	87aa                	mv	a5,a0
  while (n-- && *p)
    8001ab94:	e589                	bnez	a1,8001ab9e <strnlen+0x10>
    8001ab96:	a829                	j	8001abb0 <strnlen+0x22>
    p++;
    8001ab98:	0785                	add	a5,a5,1
  while (n-- && *p)
    8001ab9a:	00f68863          	beq	a3,a5,8001abaa <strnlen+0x1c>
    8001ab9e:	0007c703          	lbu	a4,0(a5)
    8001aba2:	fb7d                	bnez	a4,8001ab98 <strnlen+0xa>
  return p - s;
    8001aba4:	40a78533          	sub	a0,a5,a0
}
    8001aba8:	8082                	ret
  return p - s;
    8001abaa:	40a68533          	sub	a0,a3,a0
    8001abae:	8082                	ret
  while (n-- && *p)
    8001abb0:	4501                	li	a0,0
    8001abb2:	8082                	ret

000000008001abb4 <setStats>:
  READ_CTR(mcycle);
    8001abb4:	b0002773          	csrr	a4,mcycle
    8001abb8:	00022797          	auipc	a5,0x22
    8001abbc:	4c878793          	add	a5,a5,1224 # 8003d080 <buf.1>
    8001abc0:	c511                	beqz	a0,8001abcc <setStats+0x18>
    8001abc2:	e3b8                	sd	a4,64(a5)
  READ_CTR(minstret);
    8001abc4:	b0202773          	csrr	a4,minstret
    8001abc8:	e7b8                	sd	a4,72(a5)
}
    8001abca:	8082                	ret
  READ_CTR(mcycle);
    8001abcc:	63b4                	ld	a3,64(a5)
    8001abce:	8f15                	sub	a4,a4,a3
    8001abd0:	e3b8                	sd	a4,64(a5)
  READ_CTR(minstret);
    8001abd2:	b0202773          	csrr	a4,minstret
    8001abd6:	67b4                	ld	a3,72(a5)
    8001abd8:	8f15                	sub	a4,a4,a3
    8001abda:	e7b8                	sd	a4,72(a5)
}
    8001abdc:	8082                	ret

000000008001abde <tohost_exit>:
  tohost = (code << 1) | 1;
    8001abde:	00151793          	sll	a5,a0,0x1
    8001abe2:	0017e793          	or	a5,a5,1
    8001abe6:	0000b717          	auipc	a4,0xb
    8001abea:	40f73d23          	sd	a5,1050(a4) # 80026000 <tohost>
  while (1);
    8001abee:	a001                	j	8001abee <tohost_exit+0x10>

000000008001abf0 <handle_trap>:
  tohost = (code << 1) | 1;
    8001abf0:	6785                	lui	a5,0x1
    8001abf2:	a7378793          	add	a5,a5,-1421 # a73 <_test_table_size+0xa72>
    8001abf6:	0000b717          	auipc	a4,0xb
    8001abfa:	40f73523          	sd	a5,1034(a4) # 80026000 <tohost>
  while (1);
    8001abfe:	a001                	j	8001abfe <handle_trap+0xe>

000000008001ac00 <exit>:
{
    8001ac00:	1141                	add	sp,sp,-16
    8001ac02:	e406                	sd	ra,8(sp)
  tohost_exit(code);
    8001ac04:	fdbff0ef          	jal	8001abde <tohost_exit>

000000008001ac08 <abort>:
  tohost = (code << 1) | 1;
    8001ac08:	10d00793          	li	a5,269
    8001ac0c:	0000b717          	auipc	a4,0xb
    8001ac10:	3ef73a23          	sd	a5,1012(a4) # 80026000 <tohost>
  while (1);
    8001ac14:	a001                	j	8001ac14 <abort+0xc>

000000008001ac16 <printstr>:
  while (*p)
    8001ac16:	00054783          	lbu	a5,0(a0)
{
    8001ac1a:	7159                	add	sp,sp,-112
    8001ac1c:	03f10693          	add	a3,sp,63
    8001ac20:	fc06f693          	and	a3,a3,-64
  while (*p)
    8001ac24:	c3b9                	beqz	a5,8001ac6a <printstr+0x54>
  const char *p = s;
    8001ac26:	87aa                	mv	a5,a0
  while (*p)
    8001ac28:	0017c703          	lbu	a4,1(a5)
    p++;
    8001ac2c:	0785                	add	a5,a5,1
  while (*p)
    8001ac2e:	ff6d                	bnez	a4,8001ac28 <printstr+0x12>
  return p - s;
    8001ac30:	8f89                	sub	a5,a5,a0
  magic_mem[0] = which;
    8001ac32:	04000713          	li	a4,64
    8001ac36:	e298                	sd	a4,0(a3)
  magic_mem[1] = arg0;
    8001ac38:	4705                	li	a4,1
    8001ac3a:	e698                	sd	a4,8(a3)
  magic_mem[2] = arg1;
    8001ac3c:	ea88                	sd	a0,16(a3)
  magic_mem[3] = arg2;
    8001ac3e:	ee9c                	sd	a5,24(a3)
  __sync_synchronize();
    8001ac40:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001ac44:	0000b717          	auipc	a4,0xb
    8001ac48:	3fc70713          	add	a4,a4,1020 # 80026040 <fromhost>
    8001ac4c:	0000b797          	auipc	a5,0xb
    8001ac50:	3ad7ba23          	sd	a3,948(a5) # 80026000 <tohost>
  while (fromhost == 0)
    8001ac54:	631c                	ld	a5,0(a4)
    8001ac56:	dffd                	beqz	a5,8001ac54 <printstr+0x3e>
  fromhost = 0;
    8001ac58:	0000b797          	auipc	a5,0xb
    8001ac5c:	3e07b423          	sd	zero,1000(a5) # 80026040 <fromhost>
  __sync_synchronize();
    8001ac60:	0ff0000f          	fence
  return magic_mem[0];
    8001ac64:	629c                	ld	a5,0(a3)
}
    8001ac66:	6165                	add	sp,sp,112
    8001ac68:	8082                	ret
  while (*p)
    8001ac6a:	4781                	li	a5,0
    8001ac6c:	b7d9                	j	8001ac32 <printstr+0x1c>

000000008001ac6e <puts>:
    8001ac6e:	00054783          	lbu	a5,0(a0)
{
    8001ac72:	7171                	add	sp,sp,-176
    8001ac74:	03f10693          	add	a3,sp,63
    8001ac78:	fc06f693          	and	a3,a3,-64
  while (*p)
    8001ac7c:	c7d9                	beqz	a5,8001ad0a <puts+0x9c>
  const char *p = s;
    8001ac7e:	87aa                	mv	a5,a0
  while (*p)
    8001ac80:	0017c703          	lbu	a4,1(a5)
    p++;
    8001ac84:	0785                	add	a5,a5,1
  while (*p)
    8001ac86:	ff6d                	bnez	a4,8001ac80 <puts+0x12>
  return p - s;
    8001ac88:	8f89                	sub	a5,a5,a0
  magic_mem[0] = which;
    8001ac8a:	04000713          	li	a4,64
    8001ac8e:	e2b8                	sd	a4,64(a3)
  magic_mem[1] = arg0;
    8001ac90:	4705                	li	a4,1
    8001ac92:	e6b8                	sd	a4,72(a3)
  magic_mem[2] = arg1;
    8001ac94:	eaa8                	sd	a0,80(a3)
  magic_mem[3] = arg2;
    8001ac96:	eebc                	sd	a5,88(a3)
  __sync_synchronize();
    8001ac98:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001ac9c:	0000b617          	auipc	a2,0xb
    8001aca0:	36460613          	add	a2,a2,868 # 80026000 <tohost>
    8001aca4:	04068793          	add	a5,a3,64
    8001aca8:	e21c                	sd	a5,0(a2)
  while (fromhost == 0)
    8001acaa:	0000b797          	auipc	a5,0xb
    8001acae:	39678793          	add	a5,a5,918 # 80026040 <fromhost>
    8001acb2:	6398                	ld	a4,0(a5)
    8001acb4:	df7d                	beqz	a4,8001acb2 <puts+0x44>
  fromhost = 0;
    8001acb6:	0000b717          	auipc	a4,0xb
    8001acba:	38073523          	sd	zero,906(a4) # 80026040 <fromhost>
  __sync_synchronize();
    8001acbe:	0ff0000f          	fence
  return magic_mem[0];
    8001acc2:	62b8                	ld	a4,64(a3)
  magic_mem[0] = which;
    8001acc4:	04000593          	li	a1,64
    8001acc8:	e28c                	sd	a1,0(a3)
  magic_mem[1] = arg0;
    8001acca:	4705                	li	a4,1
    8001accc:	e698                	sd	a4,8(a3)
  syscall(SYS_write, 1, (uintptr_t)s, strlen(s));
    8001acce:	00002597          	auipc	a1,0x2
    8001acd2:	0fa58593          	add	a1,a1,250 # 8001cdc8 <__func__.1+0x5d0>
  magic_mem[2] = arg1;
    8001acd6:	ea8c                	sd	a1,16(a3)
  magic_mem[3] = arg2;
    8001acd8:	ee98                	sd	a4,24(a3)
  __sync_synchronize();
    8001acda:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001acde:	e214                	sd	a3,0(a2)
  while (fromhost == 0)
    8001ace0:	6398                	ld	a4,0(a5)
    8001ace2:	df7d                	beqz	a4,8001ace0 <puts+0x72>
  fromhost = 0;
    8001ace4:	0000b797          	auipc	a5,0xb
    8001ace8:	3407be23          	sd	zero,860(a5) # 80026040 <fromhost>
  __sync_synchronize();
    8001acec:	0ff0000f          	fence
  while (*p)
    8001acf0:	00054783          	lbu	a5,0(a0)
  return magic_mem[0];
    8001acf4:	6298                	ld	a4,0(a3)
  while (*p)
    8001acf6:	cf81                	beqz	a5,8001ad0e <puts+0xa0>
  const char *p = s;
    8001acf8:	87aa                	mv	a5,a0
  while (*p)
    8001acfa:	0017c703          	lbu	a4,1(a5)
    p++;
    8001acfe:	0785                	add	a5,a5,1
  while (*p)
    8001ad00:	ff6d                	bnez	a4,8001acfa <puts+0x8c>
  return strlen(s);
    8001ad02:	40a7853b          	subw	a0,a5,a0
}
    8001ad06:	614d                	add	sp,sp,176
    8001ad08:	8082                	ret
  while (*p)
    8001ad0a:	4781                	li	a5,0
    8001ad0c:	bfbd                	j	8001ac8a <puts+0x1c>
    8001ad0e:	4501                	li	a0,0
}
    8001ad10:	614d                	add	sp,sp,176
    8001ad12:	8082                	ret

000000008001ad14 <thread_entry>:
  while (cid != 0);
    8001ad14:	c111                	beqz	a0,8001ad18 <thread_entry+0x4>
    8001ad16:	a001                	j	8001ad16 <thread_entry+0x2>
}
    8001ad18:	8082                	ret

000000008001ad1a <printhex>:
{
    8001ad1a:	7131                	add	sp,sp,-192
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001ad1c:	00f57713          	and	a4,a0,15
{
    8001ad20:	05f10693          	add	a3,sp,95
    8001ad24:	fd22                	sd	s0,184(sp)
    8001ad26:	f926                	sd	s1,176(sp)
    8001ad28:	f54a                	sd	s2,168(sp)
    8001ad2a:	f14e                	sd	s3,160(sp)
    8001ad2c:	ed52                	sd	s4,152(sp)
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001ad2e:	47a5                	li	a5,9
{
    8001ad30:	fc06f693          	and	a3,a3,-64
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001ad34:	85ba                	mv	a1,a4
    8001ad36:	03000393          	li	t2,48
    8001ad3a:	00e7f463          	bgeu	a5,a4,8001ad42 <printhex+0x28>
    8001ad3e:	05700393          	li	t2,87
    x >>= 4;
    8001ad42:	00455793          	srl	a5,a0,0x4
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001ad46:	00f7f613          	and	a2,a5,15
    8001ad4a:	4725                	li	a4,9
    8001ad4c:	93ae                	add	t2,t2,a1
    8001ad4e:	87b2                	mv	a5,a2
    8001ad50:	05700293          	li	t0,87
    8001ad54:	00c76463          	bltu	a4,a2,8001ad5c <printhex+0x42>
    8001ad58:	03000293          	li	t0,48
    x >>= 4;
    8001ad5c:	00855f93          	srl	t6,a0,0x8
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001ad60:	00fff613          	and	a2,t6,15
    8001ad64:	4725                	li	a4,9
    8001ad66:	92be                	add	t0,t0,a5
    8001ad68:	8fb2                	mv	t6,a2
    8001ad6a:	05700793          	li	a5,87
    8001ad6e:	00c76463          	bltu	a4,a2,8001ad76 <printhex+0x5c>
    8001ad72:	03000793          	li	a5,48
    x >>= 4;
    8001ad76:	00c55f13          	srl	t5,a0,0xc
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001ad7a:	00ff7613          	and	a2,t5,15
    8001ad7e:	4725                	li	a4,9
    8001ad80:	9fbe                	add	t6,t6,a5
    8001ad82:	8f32                	mv	t5,a2
    8001ad84:	05700793          	li	a5,87
    8001ad88:	00c76463          	bltu	a4,a2,8001ad90 <printhex+0x76>
    8001ad8c:	03000793          	li	a5,48
    x >>= 4;
    8001ad90:	01055e93          	srl	t4,a0,0x10
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001ad94:	00fef613          	and	a2,t4,15
    8001ad98:	4725                	li	a4,9
    8001ad9a:	9f3e                	add	t5,t5,a5
    8001ad9c:	8eb2                	mv	t4,a2
    8001ad9e:	05700793          	li	a5,87
    8001ada2:	00c76463          	bltu	a4,a2,8001adaa <printhex+0x90>
    8001ada6:	03000793          	li	a5,48
    x >>= 4;
    8001adaa:	01455e13          	srl	t3,a0,0x14
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001adae:	00fe7613          	and	a2,t3,15
    8001adb2:	4725                	li	a4,9
    8001adb4:	9ebe                	add	t4,t4,a5
    8001adb6:	8e32                	mv	t3,a2
    8001adb8:	05700793          	li	a5,87
    8001adbc:	00c76463          	bltu	a4,a2,8001adc4 <printhex+0xaa>
    8001adc0:	03000793          	li	a5,48
    x >>= 4;
    8001adc4:	01855313          	srl	t1,a0,0x18
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001adc8:	00f37593          	and	a1,t1,15
    8001adcc:	4625                	li	a2,9
    8001adce:	9e3e                	add	t3,t3,a5
    8001add0:	832e                	mv	t1,a1
    8001add2:	05700713          	li	a4,87
    8001add6:	00b66463          	bltu	a2,a1,8001adde <printhex+0xc4>
    8001adda:	03000713          	li	a4,48
    8001adde:	01c5579b          	srlw	a5,a0,0x1c
    8001ade2:	4625                	li	a2,9
    8001ade4:	933a                	add	t1,t1,a4
    8001ade6:	843e                	mv	s0,a5
    8001ade8:	05700713          	li	a4,87
    8001adec:	00f66463          	bltu	a2,a5,8001adf4 <printhex+0xda>
    8001adf0:	03000713          	li	a4,48
    x >>= 4;
    8001adf4:	02055893          	srl	a7,a0,0x20
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001adf8:	00f8f593          	and	a1,a7,15
    8001adfc:	4625                	li	a2,9
    8001adfe:	943a                	add	s0,s0,a4
    8001ae00:	88ae                	mv	a7,a1
    8001ae02:	05700793          	li	a5,87
    8001ae06:	00b66463          	bltu	a2,a1,8001ae0e <printhex+0xf4>
    8001ae0a:	03000793          	li	a5,48
    x >>= 4;
    8001ae0e:	02455813          	srl	a6,a0,0x24
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001ae12:	00f87593          	and	a1,a6,15
    8001ae16:	4625                	li	a2,9
    8001ae18:	98be                	add	a7,a7,a5
    8001ae1a:	882e                	mv	a6,a1
    8001ae1c:	05700713          	li	a4,87
    8001ae20:	00b66463          	bltu	a2,a1,8001ae28 <printhex+0x10e>
    8001ae24:	03000713          	li	a4,48
    x >>= 4;
    8001ae28:	02855793          	srl	a5,a0,0x28
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001ae2c:	00f7f493          	and	s1,a5,15
    8001ae30:	45a5                	li	a1,9
    8001ae32:	983a                	add	a6,a6,a4
    8001ae34:	05700613          	li	a2,87
    8001ae38:	8726                	mv	a4,s1
    8001ae3a:	0095e463          	bltu	a1,s1,8001ae42 <printhex+0x128>
    8001ae3e:	03000613          	li	a2,48
    x >>= 4;
    8001ae42:	02c55793          	srl	a5,a0,0x2c
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001ae46:	00f7f913          	and	s2,a5,15
    8001ae4a:	45a5                	li	a1,9
    8001ae4c:	00c704b3          	add	s1,a4,a2
    8001ae50:	874a                	mv	a4,s2
    8001ae52:	05700613          	li	a2,87
    8001ae56:	0125e463          	bltu	a1,s2,8001ae5e <printhex+0x144>
    8001ae5a:	03000613          	li	a2,48
    x >>= 4;
    8001ae5e:	03055793          	srl	a5,a0,0x30
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001ae62:	00f7f993          	and	s3,a5,15
    8001ae66:	4925                	li	s2,9
    8001ae68:	00c705b3          	add	a1,a4,a2
    8001ae6c:	874e                	mv	a4,s3
    8001ae6e:	05700613          	li	a2,87
    8001ae72:	01396463          	bltu	s2,s3,8001ae7a <printhex+0x160>
    8001ae76:	03000613          	li	a2,48
    x >>= 4;
    8001ae7a:	03455793          	srl	a5,a0,0x34
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001ae7e:	00f7fa13          	and	s4,a5,15
    8001ae82:	49a5                	li	s3,9
    8001ae84:	963a                	add	a2,a2,a4
    8001ae86:	05700913          	li	s2,87
    8001ae8a:	8752                	mv	a4,s4
    8001ae8c:	0149e463          	bltu	s3,s4,8001ae94 <printhex+0x17a>
    8001ae90:	03000913          	li	s2,48
    x >>= 4;
    8001ae94:	03855793          	srl	a5,a0,0x38
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001ae98:	00f7fa13          	and	s4,a5,15
    8001ae9c:	49a5                	li	s3,9
    8001ae9e:	974a                	add	a4,a4,s2
    8001aea0:	87d2                	mv	a5,s4
    8001aea2:	05700913          	li	s2,87
    8001aea6:	0149e463          	bltu	s3,s4,8001aeae <printhex+0x194>
    8001aeaa:	03000913          	li	s2,48
    x >>= 4;
    8001aeae:	03c55a13          	srl	s4,a0,0x3c
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001aeb2:	49a5                	li	s3,9
    8001aeb4:	97ca                	add	a5,a5,s2
    8001aeb6:	0b49f163          	bgeu	s3,s4,8001af58 <printhex+0x23e>
    8001aeba:	057a0513          	add	a0,s4,87
  syscall(SYS_write, 1, (uintptr_t)s, strlen(s));
    8001aebe:	00810913          	add	s2,sp,8
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001aec2:	00f104a3          	sb	a5,9(sp)
    8001aec6:	00710ba3          	sb	t2,23(sp)
    8001aeca:	00510b23          	sb	t0,22(sp)
    8001aece:	01f10aa3          	sb	t6,21(sp)
    8001aed2:	01e10a23          	sb	t5,20(sp)
    8001aed6:	01d109a3          	sb	t4,19(sp)
    8001aeda:	01c10923          	sb	t3,18(sp)
    8001aede:	006108a3          	sb	t1,17(sp)
    8001aee2:	00810823          	sb	s0,16(sp)
    8001aee6:	011107a3          	sb	a7,15(sp)
    8001aeea:	01010723          	sb	a6,14(sp)
    8001aeee:	009106a3          	sb	s1,13(sp)
    8001aef2:	00b10623          	sb	a1,12(sp)
    8001aef6:	00c105a3          	sb	a2,11(sp)
    8001aefa:	00e10523          	sb	a4,10(sp)
    8001aefe:	00a10423          	sb	a0,8(sp)
  str[16] = 0;
    8001af02:	00010c23          	sb	zero,24(sp)
  const char *p = s;
    8001af06:	87ca                	mv	a5,s2
  while (*p)
    8001af08:	0017c703          	lbu	a4,1(a5)
    p++;
    8001af0c:	0785                	add	a5,a5,1
  while (*p)
    8001af0e:	ff6d                	bnez	a4,8001af08 <printhex+0x1ee>
  magic_mem[0] = which;
    8001af10:	04000713          	li	a4,64
    8001af14:	e298                	sd	a4,0(a3)
  magic_mem[1] = arg0;
    8001af16:	4705                	li	a4,1
    8001af18:	e698                	sd	a4,8(a3)
  magic_mem[2] = arg1;
    8001af1a:	0126b823          	sd	s2,16(a3)
  return p - s;
    8001af1e:	412787b3          	sub	a5,a5,s2
  magic_mem[3] = arg2;
    8001af22:	ee9c                	sd	a5,24(a3)
  __sync_synchronize();
    8001af24:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001af28:	0000b717          	auipc	a4,0xb
    8001af2c:	11870713          	add	a4,a4,280 # 80026040 <fromhost>
    8001af30:	0000b797          	auipc	a5,0xb
    8001af34:	0cd7b823          	sd	a3,208(a5) # 80026000 <tohost>
  while (fromhost == 0)
    8001af38:	631c                	ld	a5,0(a4)
    8001af3a:	dffd                	beqz	a5,8001af38 <printhex+0x21e>
  fromhost = 0;
    8001af3c:	0000b797          	auipc	a5,0xb
    8001af40:	1007b223          	sd	zero,260(a5) # 80026040 <fromhost>
  __sync_synchronize();
    8001af44:	0ff0000f          	fence
}
    8001af48:	746a                	ld	s0,184(sp)
    8001af4a:	74ca                	ld	s1,176(sp)
    8001af4c:	792a                	ld	s2,168(sp)
    8001af4e:	798a                	ld	s3,160(sp)
    8001af50:	6a6a                	ld	s4,152(sp)
  return magic_mem[0];
    8001af52:	629c                	ld	a5,0(a3)
}
    8001af54:	6129                	add	sp,sp,192
    8001af56:	8082                	ret
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001af58:	030a0513          	add	a0,s4,48
  syscall(SYS_write, 1, (uintptr_t)s, strlen(s));
    8001af5c:	00810913          	add	s2,sp,8
  while (*p)
    8001af60:	b78d                	j	8001aec2 <printhex+0x1a8>

000000008001af62 <printf>:
{
    8001af62:	711d                	add	sp,sp,-96
  va_start(ap, fmt);
    8001af64:	02810313          	add	t1,sp,40
{
    8001af68:	f42e                	sd	a1,40(sp)
  vprintfmt((void*)putchar, 0, fmt, ap);
    8001af6a:	859a                	mv	a1,t1
{
    8001af6c:	ec06                	sd	ra,24(sp)
    8001af6e:	f832                	sd	a2,48(sp)
    8001af70:	fc36                	sd	a3,56(sp)
    8001af72:	e0ba                	sd	a4,64(sp)
    8001af74:	e4be                	sd	a5,72(sp)
    8001af76:	e8c2                	sd	a6,80(sp)
    8001af78:	ecc6                	sd	a7,88(sp)
  va_start(ap, fmt);
    8001af7a:	e41a                	sd	t1,8(sp)
  vprintfmt((void*)putchar, 0, fmt, ap);
    8001af7c:	a4cff0ef          	jal	8001a1c8 <vprintfmt.constprop.1>
}
    8001af80:	60e2                	ld	ra,24(sp)
    8001af82:	4501                	li	a0,0
    8001af84:	6125                	add	sp,sp,96
    8001af86:	8082                	ret

000000008001af88 <sprintf>:
{
    8001af88:	711d                	add	sp,sp,-96
  va_start(ap, fmt);
    8001af8a:	03010313          	add	t1,sp,48
{
    8001af8e:	f022                	sd	s0,32(sp)
    8001af90:	e42a                	sd	a0,8(sp)
    8001af92:	f832                	sd	a2,48(sp)
  char* str0 = str;
    8001af94:	842a                	mv	s0,a0

  vprintfmt(sprintf_putch, (void**)&str, fmt, ap);
    8001af96:	861a                	mv	a2,t1
    8001af98:	0028                	add	a0,sp,8
{
    8001af9a:	f406                	sd	ra,40(sp)
    8001af9c:	fc36                	sd	a3,56(sp)
    8001af9e:	e0ba                	sd	a4,64(sp)
    8001afa0:	e4be                	sd	a5,72(sp)
    8001afa2:	e8c2                	sd	a6,80(sp)
    8001afa4:	ecc6                	sd	a7,88(sp)
  va_start(ap, fmt);
    8001afa6:	ec1a                	sd	t1,24(sp)
  vprintfmt(sprintf_putch, (void**)&str, fmt, ap);
    8001afa8:	f0bfe0ef          	jal	80019eb2 <vprintfmt.constprop.0>
  *str = 0;
    8001afac:	6522                	ld	a0,8(sp)
    8001afae:	00050023          	sb	zero,0(a0)

  va_end(ap);
  return str - str0;
}
    8001afb2:	70a2                	ld	ra,40(sp)
    8001afb4:	9d01                	subw	a0,a0,s0
    8001afb6:	7402                	ld	s0,32(sp)
    8001afb8:	6125                	add	sp,sp,96
    8001afba:	8082                	ret

000000008001afbc <memcpy>:

void* memcpy(void* dest, const void* src, size_t len)
{
  if ((((uintptr_t)dest | (uintptr_t)src | len) & (sizeof(uintptr_t)-1)) == 0) {
    8001afbc:	00b56733          	or	a4,a0,a1
    8001afc0:	00c767b3          	or	a5,a4,a2
    8001afc4:	8b9d                	and	a5,a5,7
    while (d < (uintptr_t*)(dest + len))
      *d++ = *s++;
  } else {
    const char* s = src;
    char *d = dest;
    while (d < (char*)(dest + len))
    8001afc6:	00c506b3          	add	a3,a0,a2
  if ((((uintptr_t)dest | (uintptr_t)src | len) & (sizeof(uintptr_t)-1)) == 0) {
    8001afca:	cfcd                	beqz	a5,8001b084 <memcpy+0xc8>
    while (d < (char*)(dest + len))
    8001afcc:	0ed57563          	bgeu	a0,a3,8001b0b6 <memcpy+0xfa>
    8001afd0:	fff60793          	add	a5,a2,-1
    8001afd4:	481d                	li	a6,7
    8001afd6:	0cf87263          	bgeu	a6,a5,8001b09a <memcpy+0xde>
    8001afda:	8b1d                	and	a4,a4,7
    8001afdc:	00158793          	add	a5,a1,1
    8001afe0:	ef5d                	bnez	a4,8001b09e <memcpy+0xe2>
    8001afe2:	40f50733          	sub	a4,a0,a5
    8001afe6:	00773713          	sltiu	a4,a4,7
    8001afea:	00174713          	xor	a4,a4,1
    8001afee:	0ff77713          	zext.b	a4,a4
    8001aff2:	c755                	beqz	a4,8001b09e <memcpy+0xe2>
    8001aff4:	ff867893          	and	a7,a2,-8
    8001aff8:	87ae                	mv	a5,a1
    8001affa:	872a                	mv	a4,a0
    8001affc:	98ae                	add	a7,a7,a1
      *d++ = *s++;
    8001affe:	0007b803          	ld	a6,0(a5)
    8001b002:	07a1                	add	a5,a5,8
    8001b004:	0721                	add	a4,a4,8
    8001b006:	ff073c23          	sd	a6,-8(a4)
    while (d < (char*)(dest + len))
    8001b00a:	ff179ae3          	bne	a5,a7,8001affe <memcpy+0x42>
    8001b00e:	ff867793          	and	a5,a2,-8
    8001b012:	8a1d                	and	a2,a2,7
    8001b014:	95be                	add	a1,a1,a5
    8001b016:	97aa                	add	a5,a5,a0
    8001b018:	ce51                	beqz	a2,8001b0b4 <memcpy+0xf8>
      *d++ = *s++;
    8001b01a:	0005c603          	lbu	a2,0(a1)
    8001b01e:	00178713          	add	a4,a5,1
    8001b022:	00c78023          	sb	a2,0(a5)
    while (d < (char*)(dest + len))
    8001b026:	08d77763          	bgeu	a4,a3,8001b0b4 <memcpy+0xf8>
      *d++ = *s++;
    8001b02a:	0015c603          	lbu	a2,1(a1)
    8001b02e:	00278713          	add	a4,a5,2
    8001b032:	00c780a3          	sb	a2,1(a5)
    while (d < (char*)(dest + len))
    8001b036:	06d77f63          	bgeu	a4,a3,8001b0b4 <memcpy+0xf8>
      *d++ = *s++;
    8001b03a:	0025c603          	lbu	a2,2(a1)
    8001b03e:	00378713          	add	a4,a5,3
    8001b042:	00c78123          	sb	a2,2(a5)
    while (d < (char*)(dest + len))
    8001b046:	06d77763          	bgeu	a4,a3,8001b0b4 <memcpy+0xf8>
      *d++ = *s++;
    8001b04a:	0035c603          	lbu	a2,3(a1)
    8001b04e:	00478713          	add	a4,a5,4
    8001b052:	00c781a3          	sb	a2,3(a5)
    while (d < (char*)(dest + len))
    8001b056:	04d77f63          	bgeu	a4,a3,8001b0b4 <memcpy+0xf8>
      *d++ = *s++;
    8001b05a:	0045c603          	lbu	a2,4(a1)
    8001b05e:	00578713          	add	a4,a5,5
    8001b062:	00c78223          	sb	a2,4(a5)
    while (d < (char*)(dest + len))
    8001b066:	04d77763          	bgeu	a4,a3,8001b0b4 <memcpy+0xf8>
      *d++ = *s++;
    8001b06a:	0055c603          	lbu	a2,5(a1)
    8001b06e:	00678713          	add	a4,a5,6
    8001b072:	00c782a3          	sb	a2,5(a5)
    while (d < (char*)(dest + len))
    8001b076:	02d77f63          	bgeu	a4,a3,8001b0b4 <memcpy+0xf8>
      *d++ = *s++;
    8001b07a:	0065c703          	lbu	a4,6(a1)
    8001b07e:	00e78323          	sb	a4,6(a5)
    while (d < (char*)(dest + len))
    8001b082:	8082                	ret
    while (d < (uintptr_t*)(dest + len))
    8001b084:	02d57863          	bgeu	a0,a3,8001b0b4 <memcpy+0xf8>
    uintptr_t *d = dest;
    8001b088:	87aa                	mv	a5,a0
      *d++ = *s++;
    8001b08a:	6198                	ld	a4,0(a1)
    8001b08c:	07a1                	add	a5,a5,8
    8001b08e:	05a1                	add	a1,a1,8
    8001b090:	fee7bc23          	sd	a4,-8(a5)
    while (d < (uintptr_t*)(dest + len))
    8001b094:	fed7ebe3          	bltu	a5,a3,8001b08a <memcpy+0xce>
    8001b098:	8082                	ret
    8001b09a:	00158793          	add	a5,a1,1
    8001b09e:	95b2                	add	a1,a1,a2
    char *d = dest;
    8001b0a0:	872a                	mv	a4,a0
    8001b0a2:	a011                	j	8001b0a6 <memcpy+0xea>
    8001b0a4:	0785                	add	a5,a5,1
      *d++ = *s++;
    8001b0a6:	fff7c683          	lbu	a3,-1(a5)
    8001b0aa:	0705                	add	a4,a4,1
    8001b0ac:	fed70fa3          	sb	a3,-1(a4)
    while (d < (char*)(dest + len))
    8001b0b0:	feb79ae3          	bne	a5,a1,8001b0a4 <memcpy+0xe8>
  }
  return dest;
}
    8001b0b4:	8082                	ret
    8001b0b6:	8082                	ret

000000008001b0b8 <memset>:

void* memset(void* dest, int byte, size_t len)
{
    8001b0b8:	1141                	add	sp,sp,-16
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    8001b0ba:	00c567b3          	or	a5,a0,a2
{
    8001b0be:	e022                	sd	s0,0(sp)
    8001b0c0:	e406                	sd	ra,8(sp)
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    8001b0c2:	8b9d                	and	a5,a5,7
{
    8001b0c4:	842a                	mv	s0,a0
    uintptr_t *d = dest;
    while (d < (uintptr_t*)(dest + len))
      *d++ = word;
  } else {
    char *d = dest;
    while (d < (char*)(dest + len))
    8001b0c6:	00c50733          	add	a4,a0,a2
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    8001b0ca:	cf81                	beqz	a5,8001b0e2 <memset+0x2a>
    while (d < (char*)(dest + len))
    8001b0cc:	00e57663          	bgeu	a0,a4,8001b0d8 <memset+0x20>
      *d++ = byte;
    8001b0d0:	0ff5f593          	zext.b	a1,a1
    8001b0d4:	fe5ff0ef          	jal	8001b0b8 <memset>
  }
  return dest;
}
    8001b0d8:	60a2                	ld	ra,8(sp)
    8001b0da:	8522                	mv	a0,s0
    8001b0dc:	6402                	ld	s0,0(sp)
    8001b0de:	0141                	add	sp,sp,16
    8001b0e0:	8082                	ret
    uintptr_t word = byte & 0xFF;
    8001b0e2:	0ff5f593          	zext.b	a1,a1
    8001b0e6:	00008797          	auipc	a5,0x8
    8001b0ea:	f927b783          	ld	a5,-110(a5) # 80023078 <__func__.1+0x6880>
    8001b0ee:	02f585b3          	mul	a1,a1,a5
    while (d < (uintptr_t*)(dest + len))
    8001b0f2:	fee573e3          	bgeu	a0,a4,8001b0d8 <memset+0x20>
    uintptr_t *d = dest;
    8001b0f6:	87aa                	mv	a5,a0
      *d++ = word;
    8001b0f8:	07a1                	add	a5,a5,8
    8001b0fa:	feb7bc23          	sd	a1,-8(a5)
    while (d < (uintptr_t*)(dest + len))
    8001b0fe:	fee7ede3          	bltu	a5,a4,8001b0f8 <memset+0x40>
}
    8001b102:	60a2                	ld	ra,8(sp)
    8001b104:	8522                	mv	a0,s0
    8001b106:	6402                	ld	s0,0(sp)
    8001b108:	0141                	add	sp,sp,16
    8001b10a:	8082                	ret

000000008001b10c <strcmp>:
int strcmp(const char* s1, const char* s2)
{
  unsigned char c1, c2;

  do {
    c1 = *s1++;
    8001b10c:	00054783          	lbu	a5,0(a0)
    c2 = *s2++;
    8001b110:	0585                	add	a1,a1,1
    c1 = *s1++;
    8001b112:	0505                	add	a0,a0,1
    c2 = *s2++;
    8001b114:	fff5c703          	lbu	a4,-1(a1)
  } while (c1 != 0 && c1 == c2);
    8001b118:	c799                	beqz	a5,8001b126 <strcmp+0x1a>
    8001b11a:	fee789e3          	beq	a5,a4,8001b10c <strcmp>

  return c1 - c2;
    8001b11e:	0007851b          	sext.w	a0,a5
}
    8001b122:	9d19                	subw	a0,a0,a4
    8001b124:	8082                	ret
    8001b126:	4501                	li	a0,0
    8001b128:	bfed                	j	8001b122 <strcmp+0x16>

000000008001b12a <strcpy>:

char* strcpy(char* dest, const char* src)
{
  char* d = dest;
    8001b12a:	87aa                	mv	a5,a0
  while ((*d++ = *src++))
    8001b12c:	0005c703          	lbu	a4,0(a1)
    8001b130:	0785                	add	a5,a5,1
    8001b132:	0585                	add	a1,a1,1
    8001b134:	fee78fa3          	sb	a4,-1(a5)
    8001b138:	fb75                	bnez	a4,8001b12c <strcpy+0x2>
    ;
  return dest;
}
    8001b13a:	8082                	ret

000000008001b13c <atol>:
long atol(const char* str)
{
  long res = 0;
  int sign = 0;

  while (*str == ' ')
    8001b13c:	00054683          	lbu	a3,0(a0)
    8001b140:	02000713          	li	a4,32
{
    8001b144:	87aa                	mv	a5,a0
  while (*str == ' ')
    8001b146:	00e69763          	bne	a3,a4,8001b154 <atol+0x18>
    8001b14a:	0017c683          	lbu	a3,1(a5)
    str++;
    8001b14e:	0785                	add	a5,a5,1
  while (*str == ' ')
    8001b150:	fee68de3          	beq	a3,a4,8001b14a <atol+0xe>

  if (*str == '-' || *str == '+') {
    8001b154:	02d00713          	li	a4,45
    8001b158:	04e68063          	beq	a3,a4,8001b198 <atol+0x5c>
    8001b15c:	02b00713          	li	a4,43
    8001b160:	02e68563          	beq	a3,a4,8001b18a <atol+0x4e>
  int sign = 0;
    8001b164:	4581                	li	a1,0
    sign = *str == '-';
    str++;
  }

  while (*str) {
    8001b166:	c69d                	beqz	a3,8001b194 <atol+0x58>
    sign = *str == '-';
    8001b168:	4501                	li	a0,0
    res *= 10;
    res += *str++ - '0';
    8001b16a:	0785                	add	a5,a5,1
    res *= 10;
    8001b16c:	00251713          	sll	a4,a0,0x2
    res += *str++ - '0';
    8001b170:	fd06861b          	addw	a2,a3,-48
  while (*str) {
    8001b174:	0007c683          	lbu	a3,0(a5)
    res *= 10;
    8001b178:	972a                	add	a4,a4,a0
    8001b17a:	0706                	sll	a4,a4,0x1
    res += *str++ - '0';
    8001b17c:	00e60533          	add	a0,a2,a4
  while (*str) {
    8001b180:	f6ed                	bnez	a3,8001b16a <atol+0x2e>
  }

  return sign ? -res : res;
    8001b182:	c991                	beqz	a1,8001b196 <atol+0x5a>
    8001b184:	40a00533          	neg	a0,a0
    8001b188:	8082                	ret
  while (*str) {
    8001b18a:	0017c683          	lbu	a3,1(a5)
    sign = *str == '-';
    8001b18e:	4581                	li	a1,0
    str++;
    8001b190:	0785                	add	a5,a5,1
  while (*str) {
    8001b192:	faf9                	bnez	a3,8001b168 <atol+0x2c>
    8001b194:	4501                	li	a0,0
}
    8001b196:	8082                	ret
  while (*str) {
    8001b198:	0017c683          	lbu	a3,1(a5)
    sign = *str == '-';
    8001b19c:	4585                	li	a1,1
    str++;
    8001b19e:	0785                	add	a5,a5,1
  while (*str) {
    8001b1a0:	f6e1                	bnez	a3,8001b168 <atol+0x2c>
    8001b1a2:	4501                	li	a0,0
    8001b1a4:	bfcd                	j	8001b196 <atol+0x5a>

000000008001b1a6 <_init>:

void _init(){

    8001b1a6:	8082                	ret

000000008001b1a8 <mhandler_entry>:
.endm

.balign 0x4
.global mhandler_entry
mhandler_entry:
    SAVE_CONTEXT
    8001b1a8:	f0810113          	add	sp,sp,-248
    8001b1ac:	e006                	sd	ra,0(sp)
    8001b1ae:	e80e                	sd	gp,16(sp)
    8001b1b0:	ec12                	sd	tp,24(sp)
    8001b1b2:	f016                	sd	t0,32(sp)
    8001b1b4:	f41a                	sd	t1,40(sp)
    8001b1b6:	f81e                	sd	t2,48(sp)
    8001b1b8:	fc22                	sd	s0,56(sp)
    8001b1ba:	e0a6                	sd	s1,64(sp)
    8001b1bc:	e4aa                	sd	a0,72(sp)
    8001b1be:	e8ae                	sd	a1,80(sp)
    8001b1c0:	ecb2                	sd	a2,88(sp)
    8001b1c2:	f0b6                	sd	a3,96(sp)
    8001b1c4:	f4ba                	sd	a4,104(sp)
    8001b1c6:	f8be                	sd	a5,112(sp)
    8001b1c8:	fcc2                	sd	a6,120(sp)
    8001b1ca:	e146                	sd	a7,128(sp)
    8001b1cc:	e54a                	sd	s2,136(sp)
    8001b1ce:	e94e                	sd	s3,144(sp)
    8001b1d0:	ed52                	sd	s4,152(sp)
    8001b1d2:	f156                	sd	s5,160(sp)
    8001b1d4:	f55a                	sd	s6,168(sp)
    8001b1d6:	f95e                	sd	s7,176(sp)
    8001b1d8:	fd62                	sd	s8,184(sp)
    8001b1da:	e1e6                	sd	s9,192(sp)
    8001b1dc:	e5ea                	sd	s10,200(sp)
    8001b1de:	e9ee                	sd	s11,208(sp)
    8001b1e0:	edf2                	sd	t3,216(sp)
    8001b1e2:	f1f6                	sd	t4,224(sp)
    8001b1e4:	f5fa                	sd	t5,232(sp)
    8001b1e6:	f5fe                	sd	t6,232(sp)
    jal mhandler
    8001b1e8:	a33e50ef          	jal	80000c1a <mhandler>
    j _return
    8001b1ec:	a849                	j	8001b27e <_return>
    8001b1ee:	0001                	nop

000000008001b1f0 <hshandler_entry>:

.balign 0x4
.global hshandler_entry
hshandler_entry:
    SAVE_CONTEXT
    8001b1f0:	f0810113          	add	sp,sp,-248
    8001b1f4:	e006                	sd	ra,0(sp)
    8001b1f6:	e80e                	sd	gp,16(sp)
    8001b1f8:	ec12                	sd	tp,24(sp)
    8001b1fa:	f016                	sd	t0,32(sp)
    8001b1fc:	f41a                	sd	t1,40(sp)
    8001b1fe:	f81e                	sd	t2,48(sp)
    8001b200:	fc22                	sd	s0,56(sp)
    8001b202:	e0a6                	sd	s1,64(sp)
    8001b204:	e4aa                	sd	a0,72(sp)
    8001b206:	e8ae                	sd	a1,80(sp)
    8001b208:	ecb2                	sd	a2,88(sp)
    8001b20a:	f0b6                	sd	a3,96(sp)
    8001b20c:	f4ba                	sd	a4,104(sp)
    8001b20e:	f8be                	sd	a5,112(sp)
    8001b210:	fcc2                	sd	a6,120(sp)
    8001b212:	e146                	sd	a7,128(sp)
    8001b214:	e54a                	sd	s2,136(sp)
    8001b216:	e94e                	sd	s3,144(sp)
    8001b218:	ed52                	sd	s4,152(sp)
    8001b21a:	f156                	sd	s5,160(sp)
    8001b21c:	f55a                	sd	s6,168(sp)
    8001b21e:	f95e                	sd	s7,176(sp)
    8001b220:	fd62                	sd	s8,184(sp)
    8001b222:	e1e6                	sd	s9,192(sp)
    8001b224:	e5ea                	sd	s10,200(sp)
    8001b226:	e9ee                	sd	s11,208(sp)
    8001b228:	edf2                	sd	t3,216(sp)
    8001b22a:	f1f6                	sd	t4,224(sp)
    8001b22c:	f5fa                	sd	t5,232(sp)
    8001b22e:	f5fe                	sd	t6,232(sp)
    jal hshandler
    8001b230:	bf7e50ef          	jal	80000e26 <hshandler>
    j _return
    8001b234:	a0a9                	j	8001b27e <_return>
    8001b236:	0001                	nop

000000008001b238 <vshandler_entry>:

.balign 0x4
.global vshandler_entry
vshandler_entry:
    SAVE_CONTEXT
    8001b238:	f0810113          	add	sp,sp,-248
    8001b23c:	e006                	sd	ra,0(sp)
    8001b23e:	e80e                	sd	gp,16(sp)
    8001b240:	ec12                	sd	tp,24(sp)
    8001b242:	f016                	sd	t0,32(sp)
    8001b244:	f41a                	sd	t1,40(sp)
    8001b246:	f81e                	sd	t2,48(sp)
    8001b248:	fc22                	sd	s0,56(sp)
    8001b24a:	e0a6                	sd	s1,64(sp)
    8001b24c:	e4aa                	sd	a0,72(sp)
    8001b24e:	e8ae                	sd	a1,80(sp)
    8001b250:	ecb2                	sd	a2,88(sp)
    8001b252:	f0b6                	sd	a3,96(sp)
    8001b254:	f4ba                	sd	a4,104(sp)
    8001b256:	f8be                	sd	a5,112(sp)
    8001b258:	fcc2                	sd	a6,120(sp)
    8001b25a:	e146                	sd	a7,128(sp)
    8001b25c:	e54a                	sd	s2,136(sp)
    8001b25e:	e94e                	sd	s3,144(sp)
    8001b260:	ed52                	sd	s4,152(sp)
    8001b262:	f156                	sd	s5,160(sp)
    8001b264:	f55a                	sd	s6,168(sp)
    8001b266:	f95e                	sd	s7,176(sp)
    8001b268:	fd62                	sd	s8,184(sp)
    8001b26a:	e1e6                	sd	s9,192(sp)
    8001b26c:	e5ea                	sd	s10,200(sp)
    8001b26e:	e9ee                	sd	s11,208(sp)
    8001b270:	edf2                	sd	t3,216(sp)
    8001b272:	f1f6                	sd	t4,224(sp)
    8001b274:	f5fa                	sd	t5,232(sp)
    8001b276:	f5fe                	sd	t6,232(sp)
    jal vshandler
    8001b278:	dc9e50ef          	jal	80001040 <vshandler>
    j _return
    8001b27c:	a009                	j	8001b27e <_return>

000000008001b27e <_return>:
    
_return:
    li t0, 4 //make sure PRIV_M is 4
    8001b27e:	4291                	li	t0,4
    beq a0, t0, _return_from_m 
    8001b280:	04550563          	beq	a0,t0,8001b2ca <_return_from_m>

000000008001b284 <_return_from_s>:
_return_from_s:
    RESTORE_CONTEXT
    8001b284:	6082                	ld	ra,0(sp)
    8001b286:	61c2                	ld	gp,16(sp)
    8001b288:	6262                	ld	tp,24(sp)
    8001b28a:	7282                	ld	t0,32(sp)
    8001b28c:	7322                	ld	t1,40(sp)
    8001b28e:	73c2                	ld	t2,48(sp)
    8001b290:	7462                	ld	s0,56(sp)
    8001b292:	6486                	ld	s1,64(sp)
    8001b294:	6526                	ld	a0,72(sp)
    8001b296:	65c6                	ld	a1,80(sp)
    8001b298:	6666                	ld	a2,88(sp)
    8001b29a:	7686                	ld	a3,96(sp)
    8001b29c:	7726                	ld	a4,104(sp)
    8001b29e:	77c6                	ld	a5,112(sp)
    8001b2a0:	7866                	ld	a6,120(sp)
    8001b2a2:	688a                	ld	a7,128(sp)
    8001b2a4:	692a                	ld	s2,136(sp)
    8001b2a6:	69ca                	ld	s3,144(sp)
    8001b2a8:	6a6a                	ld	s4,152(sp)
    8001b2aa:	7a8a                	ld	s5,160(sp)
    8001b2ac:	7b2a                	ld	s6,168(sp)
    8001b2ae:	7bca                	ld	s7,176(sp)
    8001b2b0:	7c6a                	ld	s8,184(sp)
    8001b2b2:	6c8e                	ld	s9,192(sp)
    8001b2b4:	6d2e                	ld	s10,200(sp)
    8001b2b6:	6dce                	ld	s11,208(sp)
    8001b2b8:	6e6e                	ld	t3,216(sp)
    8001b2ba:	7e8e                	ld	t4,224(sp)
    8001b2bc:	7f2e                	ld	t5,232(sp)
    8001b2be:	7fce                	ld	t6,240(sp)
    8001b2c0:	0f810113          	add	sp,sp,248
    sret
    8001b2c4:	10200073          	sret
    j   .
    8001b2c8:	a001                	j	8001b2c8 <_return_from_s+0x44>

000000008001b2ca <_return_from_m>:
_return_from_m:
    RESTORE_CONTEXT
    8001b2ca:	6082                	ld	ra,0(sp)
    8001b2cc:	61c2                	ld	gp,16(sp)
    8001b2ce:	6262                	ld	tp,24(sp)
    8001b2d0:	7282                	ld	t0,32(sp)
    8001b2d2:	7322                	ld	t1,40(sp)
    8001b2d4:	73c2                	ld	t2,48(sp)
    8001b2d6:	7462                	ld	s0,56(sp)
    8001b2d8:	6486                	ld	s1,64(sp)
    8001b2da:	6526                	ld	a0,72(sp)
    8001b2dc:	65c6                	ld	a1,80(sp)
    8001b2de:	6666                	ld	a2,88(sp)
    8001b2e0:	7686                	ld	a3,96(sp)
    8001b2e2:	7726                	ld	a4,104(sp)
    8001b2e4:	77c6                	ld	a5,112(sp)
    8001b2e6:	7866                	ld	a6,120(sp)
    8001b2e8:	688a                	ld	a7,128(sp)
    8001b2ea:	692a                	ld	s2,136(sp)
    8001b2ec:	69ca                	ld	s3,144(sp)
    8001b2ee:	6a6a                	ld	s4,152(sp)
    8001b2f0:	7a8a                	ld	s5,160(sp)
    8001b2f2:	7b2a                	ld	s6,168(sp)
    8001b2f4:	7bca                	ld	s7,176(sp)
    8001b2f6:	7c6a                	ld	s8,184(sp)
    8001b2f8:	6c8e                	ld	s9,192(sp)
    8001b2fa:	6d2e                	ld	s10,200(sp)
    8001b2fc:	6dce                	ld	s11,208(sp)
    8001b2fe:	6e6e                	ld	t3,216(sp)
    8001b300:	7e8e                	ld	t4,224(sp)
    8001b302:	7f2e                	ld	t5,232(sp)
    8001b304:	7fce                	ld	t6,240(sp)
    8001b306:	0f810113          	add	sp,sp,248
    mret
    8001b30a:	30200073          	mret

Disassembly of section .text.startup:

000000008001b30e <main>:

void main(){
    8001b30e:	1101                	add	sp,sp,-32

    INFO("risc-v hypervisor extension tests");
    8001b310:	00002517          	auipc	a0,0x2
    8001b314:	8b850513          	add	a0,a0,-1864 # 8001cbc8 <__func__.1+0x3d0>
void main(){
    8001b318:	ec06                	sd	ra,24(sp)
    8001b31a:	e822                	sd	s0,16(sp)
    8001b31c:	e426                	sd	s1,8(sp)
    8001b31e:	e04a                	sd	s2,0(sp)
    INFO("risc-v hypervisor extension tests");
    8001b320:	c43ff0ef          	jal	8001af62 <printf>
    8001b324:	4529                	li	a0,10
    8001b326:	b0ffe0ef          	jal	80019e34 <putchar>
    // printf("%f\n",CSRR(CSR_SSCRATCH));
    if(check_misa_h()){
    8001b32a:	9e2e50ef          	jal	8000050c <check_misa_h>
    8001b32e:	c539                	beqz	a0,8001b37c <main+0x6e>
        
        reset_state();
        for(int i = 0; i < test_table_size; i++){
    8001b330:	0000a497          	auipc	s1,0xa
    8001b334:	d6848493          	add	s1,s1,-664 # 80025098 <test_table_size>
        reset_state();
    8001b338:	fefe50ef          	jal	80001326 <reset_state>
        for(int i = 0; i < test_table_size; i++){
    8001b33c:	609c                	ld	a5,0(s1)
    8001b33e:	4401                	li	s0,0
    8001b340:	0000a917          	auipc	s2,0xa
    8001b344:	d6090913          	add	s2,s2,-672 # 800250a0 <test_table>
    8001b348:	cf91                	beqz	a5,8001b364 <main+0x56>
            reset_state();
    8001b34a:	fdde50ef          	jal	80001326 <reset_state>
            test_table[i]();
    8001b34e:	00093783          	ld	a5,0(s2)
    8001b352:	00341713          	sll	a4,s0,0x3
        for(int i = 0; i < test_table_size; i++){
    8001b356:	0405                	add	s0,s0,1
            test_table[i]();
    8001b358:	97ba                	add	a5,a5,a4
    8001b35a:	639c                	ld	a5,0(a5)
    8001b35c:	9782                	jalr	a5
        for(int i = 0; i < test_table_size; i++){
    8001b35e:	609c                	ld	a5,0(s1)
    8001b360:	fef465e3          	bltu	s0,a5,8001b34a <main+0x3c>
            
    }else{
        printf("hypervisor extension is not supported!\n");
    }

    INFO("end");
    8001b364:	00002517          	auipc	a0,0x2
    8001b368:	8b450513          	add	a0,a0,-1868 # 8001cc18 <__func__.1+0x420>
    8001b36c:	bf7ff0ef          	jal	8001af62 <printf>
    8001b370:	4529                	li	a0,10
    8001b372:	ac3fe0ef          	jal	80019e34 <putchar>
    exit(0);
    8001b376:	4501                	li	a0,0
    8001b378:	889ff0ef          	jal	8001ac00 <exit>
        printf("hypervisor extension is not supported!\n");
    8001b37c:	00002517          	auipc	a0,0x2
    8001b380:	87450513          	add	a0,a0,-1932 # 8001cbf0 <__func__.1+0x3f8>
    8001b384:	8ebff0ef          	jal	8001ac6e <puts>
    8001b388:	bff1                	j	8001b364 <main+0x56>
{
    8001b38a:	1141                	add	sp,sp,-16
  printstr("Implement main(), foo!\n");
    8001b38c:	00008517          	auipc	a0,0x8
    8001b390:	ca450513          	add	a0,a0,-860 # 80023030 <__func__.1+0x6838>
{
    8001b394:	e406                	sd	ra,8(sp)
  printstr("Implement main(), foo!\n");
    8001b396:	881ff0ef          	jal	8001ac16 <printstr>
}
    8001b39a:	60a2                	ld	ra,8(sp)
    8001b39c:	557d                	li	a0,-1
    8001b39e:	0141                	add	sp,sp,16
    8001b3a0:	8082                	ret
