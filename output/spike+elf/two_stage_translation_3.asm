
build/spike/rvh_test.elf:     file format elf64-littleriscv


Disassembly of section .boot:

0000000080000000 <_boot>:

.section .boot, "ax" 
.globl _boot
_boot:
    bnez a0, .
    80000000:	e101                	bnez	a0,80000000 <_boot>
    csrwi    sscratch, 0xf
    80000002:	1407d073          	csrwi	sscratch,15
    /* Initialize stack pointer */
    la sp, __stack_top
    80000006:	002ff117          	auipc	sp,0x2ff
    8000000a:	ffa10113          	addi	sp,sp,-6 # 802ff000 <__stack_top>

    /* Clear bss */ 
    la a0, __bss_start
    8000000e:	00034517          	auipc	a0,0x34
    80000012:	ff250513          	addi	a0,a0,-14 # 80034000 <hpt>
    la a1, __bss_end
    80000016:	00049597          	auipc	a1,0x49
    8000001a:	0c258593          	addi	a1,a1,194 # 800490d8 <__bss_end>
    bgeu a0, a1, 2f
    8000001e:	00b57763          	bgeu	a0,a1,8000002c <_boot+0x2c>
1:
    sw zero, (a0)
    80000022:	00052023          	sw	zero,0(a0)
    addi a0, a0, 4
    80000026:	0511                	addi	a0,a0,4
    bltu a0, a1, 1b
    80000028:	feb56de3          	bltu	a0,a1,80000022 <_boot+0x22>
2:
    call _init
    8000002c:	717250ef          	jal	80025f42 <_init>
    call main
    80000030:	07a260ef          	jal	800260aa <main>
    li a0, 0
    80000034:	4501                	li	a0,0
    call exit
    80000036:	17f250ef          	jal	800259b4 <exit>
    j .
    8000003a:	a001                	j	8000003a <_boot+0x3a>

Disassembly of section .text:

000000008000003c <check_csr_field_spec>:
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <rvh_test.h>

bool check_csr_field_spec(){
    8000003c:	7179                	addi	sp,sp,-48

    TEST_START();
    8000003e:	00026597          	auipc	a1,0x26
    80000042:	10258593          	addi	a1,a1,258 # 80026140 <__func__.1>
    80000046:	00028517          	auipc	a0,0x28
    8000004a:	cfa50513          	addi	a0,a0,-774 # 80027d40 <__func__.0+0x2e0>
bool check_csr_field_spec(){
    8000004e:	f406                	sd	ra,40(sp)
    80000050:	f022                	sd	s0,32(sp)
    80000052:	ec26                	sd	s1,24(sp)
    80000054:	e84a                	sd	s2,16(sp)
    80000056:	e44e                	sd	s3,8(sp)
    80000058:	e052                	sd	s4,0(sp)
    TEST_START();
    8000005a:	49d250ef          	jal	80025cf6 <printf>
    8000005e:	4529                	li	a0,10
    80000060:	2a1240ef          	jal	80024b00 <putchar>

    /* this assumes machine mode */
    //check_csr_wrrd("mstatus", mstatus, (uint64_t) -1, 0x800000ca007e79aaULL);
    //check_csr_wrrd("mideleg", mideleg, (uint64_t) -1, 0x1666);
    //check_csr_wrrd("medeleg", medeleg, (uint64_t) -1, 0xb15d);
    check_csr_wrrd("mideleg", mideleg, (uint64_t)0, 0x444);
    80000064:	30302973          	csrr	s2,mideleg
    80000068:	30305073          	csrwi	mideleg,0
    8000006c:	30302473          	csrr	s0,mideleg
    80000070:	00028617          	auipc	a2,0x28
    80000074:	ce060613          	addi	a2,a2,-800 # 80027d50 <__func__.0+0x2f0>
    80000078:	08200593          	li	a1,130
    8000007c:	00028517          	auipc	a0,0x28
    80000080:	cdc50513          	addi	a0,a0,-804 # 80027d58 <__func__.0+0x2f8>
    80000084:	44400493          	li	s1,1092
    80000088:	46f250ef          	jal	80025cf6 <printf>
    8000008c:	46940163          	beq	s0,s1,800004ee <check_csr_field_spec+0x4b2>
    80000090:	00028597          	auipc	a1,0x28
    80000094:	ca058593          	addi	a1,a1,-864 # 80027d30 <__func__.0+0x2d0>
    80000098:	00028517          	auipc	a0,0x28
    8000009c:	cd850513          	addi	a0,a0,-808 # 80027d70 <__func__.0+0x310>
    800000a0:	457250ef          	jal	80025cf6 <printf>
    800000a4:	00028517          	auipc	a0,0x28
    800000a8:	cd450513          	addi	a0,a0,-812 # 80027d78 <__func__.0+0x318>
    800000ac:	44b250ef          	jal	80025cf6 <printf>
    800000b0:	8622                	mv	a2,s0
    800000b2:	86a6                	mv	a3,s1
    800000b4:	4581                	li	a1,0
    800000b6:	00028517          	auipc	a0,0x28
    800000ba:	cca50513          	addi	a0,a0,-822 # 80027d80 <__func__.0+0x320>
    800000be:	439250ef          	jal	80025cf6 <printf>
    800000c2:	02900513          	li	a0,41
    800000c6:	23b240ef          	jal	80024b00 <putchar>
    800000ca:	4529                	li	a0,10
    800000cc:	235240ef          	jal	80024b00 <putchar>
    800000d0:	4401                	li	s0,0
    800000d2:	30391073          	csrw	mideleg,s2
    //check_csr_wrrd("mip", mip, (uint64_t) -1, 0x6e6);
    //check_csr_wrrd("mie", mie, (uint64_t) -1, 0x1eee);
    check_csr_wrrd("mtinst", CSR_MTINST, (uint64_t) -1, (uint64_t) -1);
    800000d6:	34a029f3          	csrr	s3,0x34a
    800000da:	54fd                	li	s1,-1
    800000dc:	34a49073          	csrw	0x34a,s1
    800000e0:	34a02973          	csrr	s2,0x34a
    800000e4:	00028617          	auipc	a2,0x28
    800000e8:	cb460613          	addi	a2,a2,-844 # 80027d98 <__func__.0+0x338>
    800000ec:	08200593          	li	a1,130
    800000f0:	00028517          	auipc	a0,0x28
    800000f4:	c6850513          	addi	a0,a0,-920 # 80027d58 <__func__.0+0x2f8>
    800000f8:	3ff250ef          	jal	80025cf6 <printf>
    800000fc:	30990f63          	beq	s2,s1,8000041a <check_csr_field_spec+0x3de>
    80000100:	00028597          	auipc	a1,0x28
    80000104:	c3058593          	addi	a1,a1,-976 # 80027d30 <__func__.0+0x2d0>
    80000108:	00028517          	auipc	a0,0x28
    8000010c:	c6850513          	addi	a0,a0,-920 # 80027d70 <__func__.0+0x310>
    80000110:	3e7250ef          	jal	80025cf6 <printf>
    80000114:	00028517          	auipc	a0,0x28
    80000118:	c6450513          	addi	a0,a0,-924 # 80027d78 <__func__.0+0x318>
    8000011c:	3db250ef          	jal	80025cf6 <printf>
    80000120:	86a6                	mv	a3,s1
    80000122:	864a                	mv	a2,s2
    80000124:	85a6                	mv	a1,s1
    80000126:	00028517          	auipc	a0,0x28
    8000012a:	c5a50513          	addi	a0,a0,-934 # 80027d80 <__func__.0+0x320>
    8000012e:	3c9250ef          	jal	80025cf6 <printf>
    80000132:	02900513          	li	a0,41
    80000136:	1cb240ef          	jal	80024b00 <putchar>
    8000013a:	4529                	li	a0,10
    8000013c:	1c5240ef          	jal	80024b00 <putchar>
    80000140:	4401                	li	s0,0
    80000142:	34a99073          	csrw	0x34a,s3
    check_csr_wrrd("mtval2", CSR_MTVAL2, (uint64_t) -1, (uint64_t) -1);
    80000146:	34b029f3          	csrr	s3,0x34b
    8000014a:	54fd                	li	s1,-1
    8000014c:	34b49073          	csrw	0x34b,s1
    80000150:	34b02973          	csrr	s2,0x34b
    80000154:	00028617          	auipc	a2,0x28
    80000158:	c4c60613          	addi	a2,a2,-948 # 80027da0 <__func__.0+0x340>
    8000015c:	08200593          	li	a1,130
    80000160:	00028517          	auipc	a0,0x28
    80000164:	bf850513          	addi	a0,a0,-1032 # 80027d58 <__func__.0+0x2f8>
    80000168:	38f250ef          	jal	80025cf6 <printf>
    8000016c:	36990363          	beq	s2,s1,800004d2 <check_csr_field_spec+0x496>
    80000170:	00028597          	auipc	a1,0x28
    80000174:	bc058593          	addi	a1,a1,-1088 # 80027d30 <__func__.0+0x2d0>
    80000178:	00028517          	auipc	a0,0x28
    8000017c:	bf850513          	addi	a0,a0,-1032 # 80027d70 <__func__.0+0x310>
    80000180:	377250ef          	jal	80025cf6 <printf>
    80000184:	00028517          	auipc	a0,0x28
    80000188:	bf450513          	addi	a0,a0,-1036 # 80027d78 <__func__.0+0x318>
    8000018c:	36b250ef          	jal	80025cf6 <printf>
    80000190:	86a6                	mv	a3,s1
    80000192:	864a                	mv	a2,s2
    80000194:	85a6                	mv	a1,s1
    80000196:	00028517          	auipc	a0,0x28
    8000019a:	bea50513          	addi	a0,a0,-1046 # 80027d80 <__func__.0+0x320>
    8000019e:	359250ef          	jal	80025cf6 <printf>
    800001a2:	02900513          	li	a0,41
    800001a6:	15b240ef          	jal	80024b00 <putchar>
    800001aa:	4529                	li	a0,10
    800001ac:	155240ef          	jal	80024b00 <putchar>
    800001b0:	4401                	li	s0,0
    800001b2:	34b99073          	csrw	0x34b,s3
    //check_csr_wrrd("hstatus", CSR_HSTATUS, (uint64_t) -1, 0x30053f3e0);
    //check_csr_wrrd("hideleg", CSR_HIDELEG, (uint64_t) -1, 0x444);
    //check_csr_wrrd("hedeleg", CSR_HEDELEG, (uint64_t) -1, 0xb1ff);
    //check_csr_wrrd("hvip", CSR_HVIP, (uint64_t) -1, 0x444);
    //check_csr_wrrd("hip", CSR_HIP, (uint64_t) -1, 0x4);
    check_csr_wrrd("hie", CSR_HIE, (uint64_t) -1, 0x444);
    800001b6:	60402a73          	csrr	s4,hie
    800001ba:	54fd                	li	s1,-1
    800001bc:	60449073          	csrw	hie,s1
    800001c0:	60402973          	csrr	s2,hie
    800001c4:	00028617          	auipc	a2,0x28
    800001c8:	be460613          	addi	a2,a2,-1052 # 80027da8 <__func__.0+0x348>
    800001cc:	08200593          	li	a1,130
    800001d0:	00028517          	auipc	a0,0x28
    800001d4:	b8850513          	addi	a0,a0,-1144 # 80027d58 <__func__.0+0x2f8>
    800001d8:	44400993          	li	s3,1092
    800001dc:	31b250ef          	jal	80025cf6 <printf>
    800001e0:	2d390b63          	beq	s2,s3,800004b6 <check_csr_field_spec+0x47a>
    800001e4:	00028597          	auipc	a1,0x28
    800001e8:	b4c58593          	addi	a1,a1,-1204 # 80027d30 <__func__.0+0x2d0>
    800001ec:	00028517          	auipc	a0,0x28
    800001f0:	b8450513          	addi	a0,a0,-1148 # 80027d70 <__func__.0+0x310>
    800001f4:	303250ef          	jal	80025cf6 <printf>
    800001f8:	00028517          	auipc	a0,0x28
    800001fc:	b8050513          	addi	a0,a0,-1152 # 80027d78 <__func__.0+0x318>
    80000200:	2f7250ef          	jal	80025cf6 <printf>
    80000204:	86ce                	mv	a3,s3
    80000206:	864a                	mv	a2,s2
    80000208:	85a6                	mv	a1,s1
    8000020a:	00028517          	auipc	a0,0x28
    8000020e:	b7650513          	addi	a0,a0,-1162 # 80027d80 <__func__.0+0x320>
    80000212:	2e5250ef          	jal	80025cf6 <printf>
    80000216:	02900513          	li	a0,41
    8000021a:	0e7240ef          	jal	80024b00 <putchar>
    8000021e:	4529                	li	a0,10
    80000220:	0e1240ef          	jal	80024b00 <putchar>
    80000224:	4401                	li	s0,0
    80000226:	604a1073          	csrw	hie,s4
    check_csr_wrrd("htval", CSR_HTVAL, (uint64_t) -1, (uint64_t) -1);
    8000022a:	643029f3          	csrr	s3,htval
    8000022e:	54fd                	li	s1,-1
    80000230:	64349073          	csrw	htval,s1
    80000234:	64302973          	csrr	s2,htval
    80000238:	00028617          	auipc	a2,0x28
    8000023c:	b7860613          	addi	a2,a2,-1160 # 80027db0 <__func__.0+0x350>
    80000240:	08200593          	li	a1,130
    80000244:	00028517          	auipc	a0,0x28
    80000248:	b1450513          	addi	a0,a0,-1260 # 80027d58 <__func__.0+0x2f8>
    8000024c:	2ab250ef          	jal	80025cf6 <printf>
    80000250:	24990563          	beq	s2,s1,8000049a <check_csr_field_spec+0x45e>
    80000254:	00028597          	auipc	a1,0x28
    80000258:	adc58593          	addi	a1,a1,-1316 # 80027d30 <__func__.0+0x2d0>
    8000025c:	00028517          	auipc	a0,0x28
    80000260:	b1450513          	addi	a0,a0,-1260 # 80027d70 <__func__.0+0x310>
    80000264:	293250ef          	jal	80025cf6 <printf>
    80000268:	00028517          	auipc	a0,0x28
    8000026c:	b1050513          	addi	a0,a0,-1264 # 80027d78 <__func__.0+0x318>
    80000270:	287250ef          	jal	80025cf6 <printf>
    80000274:	86a6                	mv	a3,s1
    80000276:	864a                	mv	a2,s2
    80000278:	85a6                	mv	a1,s1
    8000027a:	00028517          	auipc	a0,0x28
    8000027e:	b0650513          	addi	a0,a0,-1274 # 80027d80 <__func__.0+0x320>
    80000282:	275250ef          	jal	80025cf6 <printf>
    80000286:	02900513          	li	a0,41
    8000028a:	077240ef          	jal	80024b00 <putchar>
    8000028e:	4529                	li	a0,10
    80000290:	071240ef          	jal	80024b00 <putchar>
    80000294:	4401                	li	s0,0
    80000296:	64399073          	csrw	htval,s3
    check_csr_wrrd("htinst", CSR_HTINST, (uint64_t) -1, (uint64_t) -1);
    8000029a:	64a029f3          	csrr	s3,htinst
    8000029e:	54fd                	li	s1,-1
    800002a0:	64a49073          	csrw	htinst,s1
    800002a4:	64a02973          	csrr	s2,htinst
    800002a8:	00028617          	auipc	a2,0x28
    800002ac:	b1060613          	addi	a2,a2,-1264 # 80027db8 <__func__.0+0x358>
    800002b0:	08200593          	li	a1,130
    800002b4:	00028517          	auipc	a0,0x28
    800002b8:	aa450513          	addi	a0,a0,-1372 # 80027d58 <__func__.0+0x2f8>
    800002bc:	23b250ef          	jal	80025cf6 <printf>
    800002c0:	1a990f63          	beq	s2,s1,8000047e <check_csr_field_spec+0x442>
    800002c4:	00028597          	auipc	a1,0x28
    800002c8:	a6c58593          	addi	a1,a1,-1428 # 80027d30 <__func__.0+0x2d0>
    800002cc:	00028517          	auipc	a0,0x28
    800002d0:	aa450513          	addi	a0,a0,-1372 # 80027d70 <__func__.0+0x310>
    800002d4:	223250ef          	jal	80025cf6 <printf>
    800002d8:	00028517          	auipc	a0,0x28
    800002dc:	aa050513          	addi	a0,a0,-1376 # 80027d78 <__func__.0+0x318>
    800002e0:	217250ef          	jal	80025cf6 <printf>
    800002e4:	86a6                	mv	a3,s1
    800002e6:	864a                	mv	a2,s2
    800002e8:	85a6                	mv	a1,s1
    800002ea:	00028517          	auipc	a0,0x28
    800002ee:	a9650513          	addi	a0,a0,-1386 # 80027d80 <__func__.0+0x320>
    800002f2:	205250ef          	jal	80025cf6 <printf>
    800002f6:	02900513          	li	a0,41
    800002fa:	007240ef          	jal	80024b00 <putchar>
    800002fe:	4529                	li	a0,10
    80000300:	001240ef          	jal	80024b00 <putchar>
    80000304:	4401                	li	s0,0
    80000306:	64a99073          	csrw	htinst,s3
    //check_csr_wrrd("hgatp", CSR_HGATP, (8ULL << 60) | (1ULL << 60)-1, 0x80000000000fffffULL);
    //check_csr_wrrd("vsstatus", CSR_VSSTATUS, (uint64_t) -1, 0x80000000000c6122ULL);
    //check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vstvec", CSR_VSTVEC, (uint64_t) -1, 0xffffffffffffff01ULL);
    check_csr_wrrd("vsscratch", CSR_VSSCRATCH, (uint64_t) -1, (uint64_t) -1);
    8000030a:	240029f3          	csrr	s3,vsscratch
    8000030e:	54fd                	li	s1,-1
    80000310:	24049073          	csrw	vsscratch,s1
    80000314:	24002973          	csrr	s2,vsscratch
    80000318:	00028617          	auipc	a2,0x28
    8000031c:	aa860613          	addi	a2,a2,-1368 # 80027dc0 <__func__.0+0x360>
    80000320:	08200593          	li	a1,130
    80000324:	00028517          	auipc	a0,0x28
    80000328:	a3450513          	addi	a0,a0,-1484 # 80027d58 <__func__.0+0x2f8>
    8000032c:	1cb250ef          	jal	80025cf6 <printf>
    80000330:	12990963          	beq	s2,s1,80000462 <check_csr_field_spec+0x426>
    80000334:	00028597          	auipc	a1,0x28
    80000338:	9fc58593          	addi	a1,a1,-1540 # 80027d30 <__func__.0+0x2d0>
    8000033c:	00028517          	auipc	a0,0x28
    80000340:	a3450513          	addi	a0,a0,-1484 # 80027d70 <__func__.0+0x310>
    80000344:	1b3250ef          	jal	80025cf6 <printf>
    80000348:	00028517          	auipc	a0,0x28
    8000034c:	a3050513          	addi	a0,a0,-1488 # 80027d78 <__func__.0+0x318>
    80000350:	1a7250ef          	jal	80025cf6 <printf>
    80000354:	86a6                	mv	a3,s1
    80000356:	864a                	mv	a2,s2
    80000358:	85a6                	mv	a1,s1
    8000035a:	00028517          	auipc	a0,0x28
    8000035e:	a2650513          	addi	a0,a0,-1498 # 80027d80 <__func__.0+0x320>
    80000362:	195250ef          	jal	80025cf6 <printf>
    80000366:	02900513          	li	a0,41
    8000036a:	796240ef          	jal	80024b00 <putchar>
    8000036e:	4529                	li	a0,10
    80000370:	790240ef          	jal	80024b00 <putchar>
    80000374:	4401                	li	s0,0
    80000376:	24099073          	csrw	vsscratch,s3
    //check_csr_wrrd("vsepc", CSR_VSEPC, (uint64_t) -1, 0xfffffffffffffffeULL);
    //check_csr_wrrd("vscause", CSR_VSCAUSE, (uint64_t) -1, 0x800000000000001fULL);
    check_csr_wrrd("vstval", CSR_VSTVAL, (uint64_t) -1, 0xffffffffffffffffULL);
    8000037a:	243029f3          	csrr	s3,vstval
    8000037e:	54fd                	li	s1,-1
    80000380:	24349073          	csrw	vstval,s1
    80000384:	24302973          	csrr	s2,vstval
    80000388:	00028617          	auipc	a2,0x28
    8000038c:	a4860613          	addi	a2,a2,-1464 # 80027dd0 <__func__.0+0x370>
    80000390:	08200593          	li	a1,130
    80000394:	00028517          	auipc	a0,0x28
    80000398:	9c450513          	addi	a0,a0,-1596 # 80027d58 <__func__.0+0x2f8>
    8000039c:	15b250ef          	jal	80025cf6 <printf>
    800003a0:	08990b63          	beq	s2,s1,80000436 <check_csr_field_spec+0x3fa>
    800003a4:	00028597          	auipc	a1,0x28
    800003a8:	98c58593          	addi	a1,a1,-1652 # 80027d30 <__func__.0+0x2d0>
    800003ac:	00028517          	auipc	a0,0x28
    800003b0:	9c450513          	addi	a0,a0,-1596 # 80027d70 <__func__.0+0x310>
    800003b4:	143250ef          	jal	80025cf6 <printf>
    800003b8:	00028517          	auipc	a0,0x28
    800003bc:	9c050513          	addi	a0,a0,-1600 # 80027d78 <__func__.0+0x318>
    800003c0:	137250ef          	jal	80025cf6 <printf>
    800003c4:	86a6                	mv	a3,s1
    800003c6:	864a                	mv	a2,s2
    800003c8:	85a6                	mv	a1,s1
    800003ca:	00028517          	auipc	a0,0x28
    800003ce:	9b650513          	addi	a0,a0,-1610 # 80027d80 <__func__.0+0x320>
    800003d2:	125250ef          	jal	80025cf6 <printf>
    800003d6:	02900513          	li	a0,41
    800003da:	726240ef          	jal	80024b00 <putchar>
    800003de:	4529                	li	a0,10
    800003e0:	720240ef          	jal	80024b00 <putchar>
    800003e4:	24399073          	csrw	vstval,s3
    800003e8:	4401                	li	s0,0
    //check_csr_wrrd("vsatp", CSR_VSATP, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vsatp", CSR_VSATP, (8ULL << 60) | (1ULL << 60)-1, 0x80000000000fffffULL);

    TEST_END();
    800003ea:	00028597          	auipc	a1,0x28
    800003ee:	94658593          	addi	a1,a1,-1722 # 80027d30 <__func__.0+0x2d0>
    800003f2:	00028517          	auipc	a0,0x28
    800003f6:	9e650513          	addi	a0,a0,-1562 # 80027dd8 <__func__.0+0x378>
    800003fa:	0fd250ef          	jal	80025cf6 <printf>
    800003fe:	4511                	li	a0,4
    80000400:	7f6000ef          	jal	80000bf6 <goto_priv>
    80000404:	0a8010ef          	jal	800014ac <reset_state>
}
    80000408:	70a2                	ld	ra,40(sp)
    8000040a:	8522                	mv	a0,s0
    8000040c:	7402                	ld	s0,32(sp)
    8000040e:	64e2                	ld	s1,24(sp)
    80000410:	6942                	ld	s2,16(sp)
    80000412:	69a2                	ld	s3,8(sp)
    80000414:	6a02                	ld	s4,0(sp)
    80000416:	6145                	addi	sp,sp,48
    80000418:	8082                	ret
    check_csr_wrrd("mtinst", CSR_MTINST, (uint64_t) -1, (uint64_t) -1);
    8000041a:	00028597          	auipc	a1,0x28
    8000041e:	90658593          	addi	a1,a1,-1786 # 80027d20 <__func__.0+0x2c0>
    80000422:	00028517          	auipc	a0,0x28
    80000426:	94e50513          	addi	a0,a0,-1714 # 80027d70 <__func__.0+0x310>
    8000042a:	0cd250ef          	jal	80025cf6 <printf>
    8000042e:	4529                	li	a0,10
    80000430:	6d0240ef          	jal	80024b00 <putchar>
    80000434:	b339                	j	80000142 <check_csr_field_spec+0x106>
    check_csr_wrrd("vstval", CSR_VSTVAL, (uint64_t) -1, 0xffffffffffffffffULL);
    80000436:	00028597          	auipc	a1,0x28
    8000043a:	8ea58593          	addi	a1,a1,-1814 # 80027d20 <__func__.0+0x2c0>
    8000043e:	00028517          	auipc	a0,0x28
    80000442:	93250513          	addi	a0,a0,-1742 # 80027d70 <__func__.0+0x310>
    80000446:	0b1250ef          	jal	80025cf6 <printf>
    8000044a:	4529                	li	a0,10
    8000044c:	6b4240ef          	jal	80024b00 <putchar>
    80000450:	d851                	beqz	s0,800003e4 <check_csr_field_spec+0x3a8>
    80000452:	24399073          	csrw	vstval,s3
    80000456:	4405                	li	s0,1
    TEST_END();
    80000458:	00028597          	auipc	a1,0x28
    8000045c:	8c858593          	addi	a1,a1,-1848 # 80027d20 <__func__.0+0x2c0>
    80000460:	bf49                	j	800003f2 <check_csr_field_spec+0x3b6>
    check_csr_wrrd("vsscratch", CSR_VSSCRATCH, (uint64_t) -1, (uint64_t) -1);
    80000462:	00028597          	auipc	a1,0x28
    80000466:	8be58593          	addi	a1,a1,-1858 # 80027d20 <__func__.0+0x2c0>
    8000046a:	00028517          	auipc	a0,0x28
    8000046e:	90650513          	addi	a0,a0,-1786 # 80027d70 <__func__.0+0x310>
    80000472:	085250ef          	jal	80025cf6 <printf>
    80000476:	4529                	li	a0,10
    80000478:	688240ef          	jal	80024b00 <putchar>
    8000047c:	bded                	j	80000376 <check_csr_field_spec+0x33a>
    check_csr_wrrd("htinst", CSR_HTINST, (uint64_t) -1, (uint64_t) -1);
    8000047e:	00028597          	auipc	a1,0x28
    80000482:	8a258593          	addi	a1,a1,-1886 # 80027d20 <__func__.0+0x2c0>
    80000486:	00028517          	auipc	a0,0x28
    8000048a:	8ea50513          	addi	a0,a0,-1814 # 80027d70 <__func__.0+0x310>
    8000048e:	069250ef          	jal	80025cf6 <printf>
    80000492:	4529                	li	a0,10
    80000494:	66c240ef          	jal	80024b00 <putchar>
    80000498:	b5bd                	j	80000306 <check_csr_field_spec+0x2ca>
    check_csr_wrrd("htval", CSR_HTVAL, (uint64_t) -1, (uint64_t) -1);
    8000049a:	00028597          	auipc	a1,0x28
    8000049e:	88658593          	addi	a1,a1,-1914 # 80027d20 <__func__.0+0x2c0>
    800004a2:	00028517          	auipc	a0,0x28
    800004a6:	8ce50513          	addi	a0,a0,-1842 # 80027d70 <__func__.0+0x310>
    800004aa:	04d250ef          	jal	80025cf6 <printf>
    800004ae:	4529                	li	a0,10
    800004b0:	650240ef          	jal	80024b00 <putchar>
    800004b4:	b3cd                	j	80000296 <check_csr_field_spec+0x25a>
    check_csr_wrrd("hie", CSR_HIE, (uint64_t) -1, 0x444);
    800004b6:	00028597          	auipc	a1,0x28
    800004ba:	86a58593          	addi	a1,a1,-1942 # 80027d20 <__func__.0+0x2c0>
    800004be:	00028517          	auipc	a0,0x28
    800004c2:	8b250513          	addi	a0,a0,-1870 # 80027d70 <__func__.0+0x310>
    800004c6:	031250ef          	jal	80025cf6 <printf>
    800004ca:	4529                	li	a0,10
    800004cc:	634240ef          	jal	80024b00 <putchar>
    800004d0:	bb99                	j	80000226 <check_csr_field_spec+0x1ea>
    check_csr_wrrd("mtval2", CSR_MTVAL2, (uint64_t) -1, (uint64_t) -1);
    800004d2:	00028597          	auipc	a1,0x28
    800004d6:	84e58593          	addi	a1,a1,-1970 # 80027d20 <__func__.0+0x2c0>
    800004da:	00028517          	auipc	a0,0x28
    800004de:	89650513          	addi	a0,a0,-1898 # 80027d70 <__func__.0+0x310>
    800004e2:	015250ef          	jal	80025cf6 <printf>
    800004e6:	4529                	li	a0,10
    800004e8:	618240ef          	jal	80024b00 <putchar>
    800004ec:	b1d9                	j	800001b2 <check_csr_field_spec+0x176>
    check_csr_wrrd("mideleg", mideleg, (uint64_t)0, 0x444);
    800004ee:	00028597          	auipc	a1,0x28
    800004f2:	83258593          	addi	a1,a1,-1998 # 80027d20 <__func__.0+0x2c0>
    800004f6:	00028517          	auipc	a0,0x28
    800004fa:	87a50513          	addi	a0,a0,-1926 # 80027d70 <__func__.0+0x310>
    800004fe:	7f8250ef          	jal	80025cf6 <printf>
    80000502:	4529                	li	a0,10
    80000504:	5fc240ef          	jal	80024b00 <putchar>
    80000508:	4405                	li	s0,1
    8000050a:	b6e1                	j	800000d2 <check_csr_field_spec+0x96>

000000008000050c <check_misa_h>:

bool check_misa_h(){
    8000050c:	1141                	addi	sp,sp,-16

    TEST_START();
    8000050e:	00026597          	auipc	a1,0x26
    80000512:	c4a58593          	addi	a1,a1,-950 # 80026158 <__func__.0>
    80000516:	00028517          	auipc	a0,0x28
    8000051a:	82a50513          	addi	a0,a0,-2006 # 80027d40 <__func__.0+0x2e0>
bool check_misa_h(){
    8000051e:	e406                	sd	ra,8(sp)
    80000520:	e022                	sd	s0,0(sp)
    TEST_START();
    80000522:	7d4250ef          	jal	80025cf6 <printf>
    80000526:	4529                	li	a0,10
    80000528:	5d8240ef          	jal	80024b00 <putchar>

    uint64_t misa = CSRR(misa);
    8000052c:	301027f3          	csrr	a5,misa
    CSRS(misa, (1ULL << 7));
    80000530:	08000793          	li	a5,128
    80000534:	3017a073          	csrs	misa,a5

    bool hyp_ext_present = CSRR(misa) & (1ULL << 7);
    80000538:	30102473          	csrr	s0,misa
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    8000053c:	00028617          	auipc	a2,0x28
    80000540:	8a460613          	addi	a2,a2,-1884 # 80027de0 <__func__.0+0x380>
    80000544:	08200593          	li	a1,130
    80000548:	00028517          	auipc	a0,0x28
    8000054c:	81050513          	addi	a0,a0,-2032 # 80027d58 <__func__.0+0x2f8>
    bool hyp_ext_present = CSRR(misa) & (1ULL << 7);
    80000550:	08047413          	andi	s0,s0,128
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    80000554:	7a2250ef          	jal	80025cf6 <printf>
    80000558:	c031                	beqz	s0,8000059c <check_misa_h+0x90>
    8000055a:	00027597          	auipc	a1,0x27
    8000055e:	7c658593          	addi	a1,a1,1990 # 80027d20 <__func__.0+0x2c0>
    80000562:	00028517          	auipc	a0,0x28
    80000566:	80e50513          	addi	a0,a0,-2034 # 80027d70 <__func__.0+0x310>
    8000056a:	78c250ef          	jal	80025cf6 <printf>
    8000056e:	4529                	li	a0,10
    80000570:	590240ef          	jal	80024b00 <putchar>
    //     VERBOSE("misa h bit is hardwired");
    // }

    // CSRW(misa, misa);

    TEST_END();
    80000574:	00027597          	auipc	a1,0x27
    80000578:	7ac58593          	addi	a1,a1,1964 # 80027d20 <__func__.0+0x2c0>
    8000057c:	00028517          	auipc	a0,0x28
    80000580:	85c50513          	addi	a0,a0,-1956 # 80027dd8 <__func__.0+0x378>
    80000584:	772250ef          	jal	80025cf6 <printf>
    80000588:	4511                	li	a0,4
    8000058a:	66c000ef          	jal	80000bf6 <goto_priv>
    8000058e:	71f000ef          	jal	800014ac <reset_state>
}
    80000592:	60a2                	ld	ra,8(sp)
    80000594:	6402                	ld	s0,0(sp)
    TEST_END();
    80000596:	4505                	li	a0,1
}
    80000598:	0141                	addi	sp,sp,16
    8000059a:	8082                	ret
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    8000059c:	00027597          	auipc	a1,0x27
    800005a0:	79458593          	addi	a1,a1,1940 # 80027d30 <__func__.0+0x2d0>
    800005a4:	00027517          	auipc	a0,0x27
    800005a8:	7cc50513          	addi	a0,a0,1996 # 80027d70 <__func__.0+0x310>
    800005ac:	74a250ef          	jal	80025cf6 <printf>
    800005b0:	00027517          	auipc	a0,0x27
    800005b4:	7c850513          	addi	a0,a0,1992 # 80027d78 <__func__.0+0x318>
    800005b8:	73e250ef          	jal	80025cf6 <printf>
    800005bc:	00028517          	auipc	a0,0x28
    800005c0:	84450513          	addi	a0,a0,-1980 # 80027e00 <__func__.0+0x3a0>
    800005c4:	732250ef          	jal	80025cf6 <printf>
    800005c8:	02900513          	li	a0,41
    800005cc:	534240ef          	jal	80024b00 <putchar>
    800005d0:	4529                	li	a0,10
    800005d2:	52e240ef          	jal	80024b00 <putchar>
}
    800005d6:	60a2                	ld	ra,8(sp)
    800005d8:	6402                	ld	s0,0(sp)
        return false;
    800005da:	4501                	li	a0,0
}
    800005dc:	0141                	addi	sp,sp,16
    800005de:	8082                	ret

00000000800005e0 <hspt_init>:
            PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(0);
    }

    hspt[0][4] =
        PTE_V | (((uintptr_t)&hspt[1][0]) >> 2);
    800005e0:	00047e17          	auipc	t3,0x47
    800005e4:	a20e0e13          	addi	t3,t3,-1504 # 80047000 <hspt+0x1000>
    hspt[1][0] = 
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    800005e8:	00048697          	auipc	a3,0x48
    800005ec:	a1868693          	addi	a3,a3,-1512 # 80048000 <hspt+0x2000>
        hspt[0][i] = 
    800005f0:	0cf00e93          	li	t4,207
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    800005f4:	0026d313          	srli	t1,a3,0x2
        PTE_V | (((uintptr_t)&hspt[1][0]) >> 2);
    800005f8:	002e5813          	srli	a6,t3,0x2
        hspt[0][i] = 
    800005fc:	100005b7          	lui	a1,0x10000
    80000600:	20000637          	lui	a2,0x20000
    80000604:	300007b7          	lui	a5,0x30000
    80000608:	00046897          	auipc	a7,0x46
    8000060c:	9f888893          	addi	a7,a7,-1544 # 80046000 <hspt>
        PTE_V | (((uintptr_t)&hspt[1][0]) >> 2);
    80000610:	00186813          	ori	a6,a6,1
        hspt[0][i] = 
    80000614:	9676                	add	a2,a2,t4
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    80000616:	00136313          	ori	t1,t1,1
        hspt[0][i] = 
    8000061a:	95f6                	add	a1,a1,t4
    8000061c:	97f6                	add	a5,a5,t4


    addr = TEST_PPAGE_BASE;
    8000061e:	4745                	li	a4,17
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000620:	44100513          	li	a0,1089
    hspt[0][4] =
    80000624:	0308b023          	sd	a6,32(a7)
        hspt[0][i] = 
    80000628:	00c8b823          	sd	a2,16(a7)
    hspt[1][0] = 
    8000062c:	006e3023          	sd	t1,0(t3)
        hspt[0][i] = 
    80000630:	01d8b023          	sd	t4,0(a7)
    80000634:	00b8b423          	sd	a1,8(a7)
    80000638:	00f8bc23          	sd	a5,24(a7)
    addr = TEST_PPAGE_BASE;
    8000063c:	076e                	slli	a4,a4,0x1b
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    8000063e:	0556                	slli	a0,a0,0x15
    80000640:	00030617          	auipc	a2,0x30
    80000644:	e5860613          	addi	a2,a2,-424 # 80030498 <test_page_perm_table>
        hspt[2][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].vs;
        addr += PAGE_SIZE;
    80000648:	6805                	lui	a6,0x1
        hspt[2][i] = (addr >> 2) | PTE_AD |
    8000064a:	620c                	ld	a1,0(a2)
    8000064c:	00275793          	srli	a5,a4,0x2
        addr += PAGE_SIZE;
    80000650:	9742                	add	a4,a4,a6
        hspt[2][i] = (addr >> 2) | PTE_AD |
    80000652:	8fcd                	or	a5,a5,a1
    80000654:	0c07e793          	ori	a5,a5,192
    80000658:	e29c                	sd	a5,0(a3)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    8000065a:	0641                	addi	a2,a2,16
    8000065c:	06a1                	addi	a3,a3,8
    8000065e:	fea716e3          	bne	a4,a0,8000064a <hspt_init+0x6a>
    //     hspt[2][i] = 
    //         PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
    //     addr +=  PAGE_SIZE;
    // }

    if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    80000662:	00032797          	auipc	a5,0x32
    80000666:	e3a7a783          	lw	a5,-454(a5) # 8003249c <curr_priv>
    8000066a:	4705                	li	a4,1
    8000066c:	37f5                	addiw	a5,a5,-3
    8000066e:	00f76a63          	bltu	a4,a5,80000682 <hspt_init+0xa2>
        uintptr_t satp = (((uintptr_t)hspt) >> 12) | (0x8ULL << 60);
    80000672:	577d                	li	a4,-1
    80000674:	00c8d793          	srli	a5,a7,0xc
    80000678:	177e                	slli	a4,a4,0x3f
    8000067a:	8fd9                	or	a5,a5,a4
        CSRW(satp, satp);
    8000067c:	18079073          	csrw	satp,a5
    } else {
        ERROR("trying to set hs level satp from lower privilege");
    80000680:	8082                	ret
void hspt_init(){
    80000682:	1141                	addi	sp,sp,-16
        ERROR("trying to set hs level satp from lower privilege");
    80000684:	00027517          	auipc	a0,0x27
    80000688:	7fc50513          	addi	a0,a0,2044 # 80027e80 <__func__.0+0x420>
void hspt_init(){
    8000068c:	e406                	sd	ra,8(sp)
        ERROR("trying to set hs level satp from lower privilege");
    8000068e:	668250ef          	jal	80025cf6 <printf>
    80000692:	0c000613          	li	a2,192
    80000696:	00026597          	auipc	a1,0x26
    8000069a:	ad258593          	addi	a1,a1,-1326 # 80026168 <__func__.2>
    8000069e:	00028517          	auipc	a0,0x28
    800006a2:	82a50513          	addi	a0,a0,-2006 # 80027ec8 <__func__.0+0x468>
    800006a6:	650250ef          	jal	80025cf6 <printf>
    800006aa:	4501                	li	a0,0
    800006ac:	308250ef          	jal	800259b4 <exit>

00000000800006b0 <vspt_init>:
            PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(0);
    }

    vspt[0][MEM_BASE/SUPERPAGE_SIZE(0)] = 
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    800006b0:	00041717          	auipc	a4,0x41
    800006b4:	95070713          	addi	a4,a4,-1712 # 80041000 <vspt+0x1000>
void vspt_init(){
    800006b8:	1141                	addi	sp,sp,-16
        vspt[0][i] = 
    800006ba:	0cf00893          	li	a7,207
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    800006be:	00275813          	srli	a6,a4,0x2
        vspt[0][i] = 
    800006c2:	100006b7          	lui	a3,0x10000
    800006c6:	300007b7          	lui	a5,0x30000
void vspt_init(){
    800006ca:	e022                	sd	s0,0(sp)
    800006cc:	e406                	sd	ra,8(sp)
        vspt[0][i] = 
    800006ce:	00040417          	auipc	s0,0x40
    800006d2:	93240413          	addi	s0,s0,-1742 # 80040000 <vspt>
    800006d6:	96c6                	add	a3,a3,a7
    800006d8:	97c6                	add	a5,a5,a7
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    800006da:	00186813          	ori	a6,a6,1

    addr = MEM_BASE;
    for(int i = 0; i < 512; i++) vspt[1][i] = 0;
    800006de:	6605                	lui	a2,0x1
    800006e0:	853a                	mv	a0,a4
    800006e2:	4581                	li	a1,0
        vspt[0][i] = 
    800006e4:	e414                	sd	a3,8(s0)
    800006e6:	ec1c                	sd	a5,24(s0)
    vspt[0][MEM_BASE/SUPERPAGE_SIZE(0)] = 
    800006e8:	01043823          	sd	a6,16(s0)
        vspt[0][i] = 
    800006ec:	01143023          	sd	a7,0(s0)
    for(int i = 0; i < 512; i++) vspt[1][i] = 0;
    800006f0:	75e250ef          	jal	80025e4e <memset>
    addr = MEM_BASE;
    800006f4:	4785                	li	a5,1
    for(int i = 0; i <  MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    800006f6:	46c5                	li	a3,17
    addr = MEM_BASE;
    800006f8:	07fe                	slli	a5,a5,0x1f
    for(int i = 0; i <  MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    800006fa:	06ee                	slli	a3,a3,0x1b
        vspt[1][i] = 
           PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(1);
    800006fc:	00200637          	lui	a2,0x200
           PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
    80000700:	0027d713          	srli	a4,a5,0x2
    80000704:	0cf76713          	ori	a4,a4,207
        vspt[1][i] = 
    80000708:	e118                	sd	a4,0(a0)
        addr +=  SUPERPAGE_SIZE(1);
    8000070a:	97b2                	add	a5,a5,a2
    for(int i = 0; i <  MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    8000070c:	0521                	addi	a0,a0,8
    8000070e:	fed799e3          	bne	a5,a3,80000700 <vspt_init+0x50>
    }

    vspt[0][4] =
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    80000712:	00042897          	auipc	a7,0x42
    80000716:	8ee88893          	addi	a7,a7,-1810 # 80042000 <vspt+0x2000>

    // vspt[0][5] =
    //     PTE_V | PTE_U | PTE_AD | (((uintptr_t)&vspt[2][0]) >> 2);

    vspt[2][0] = 
        PTE_V | (((uintptr_t)&vspt[3][0]) >> 2);
    8000071a:	00043697          	auipc	a3,0x43
    8000071e:	8e668693          	addi	a3,a3,-1818 # 80043000 <vspt+0x3000>
    80000722:	0026d613          	srli	a2,a3,0x2
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    80000726:	0028d713          	srli	a4,a7,0x2
        PTE_V | (((uintptr_t)&vspt[3][0]) >> 2);
    8000072a:	00166613          	ori	a2,a2,1
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    8000072e:	00176713          	ori	a4,a4,1

    addr = TEST_VPAGE_BASE;
    80000732:	4785                	li	a5,1
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000734:	00801537          	lui	a0,0x801
    vspt[2][0] = 
    80000738:	00c8b023          	sd	a2,0(a7)
    vspt[0][4] =
    8000073c:	f018                	sd	a4,32(s0)
    addr = TEST_VPAGE_BASE;
    8000073e:	1782                	slli	a5,a5,0x20
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000740:	0526                	slli	a0,a0,0x9
    80000742:	00030617          	auipc	a2,0x30
    80000746:	d5660613          	addi	a2,a2,-682 # 80030498 <test_page_perm_table>
        vspt[3][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].vs;
        addr +=  PAGE_SIZE;
    8000074a:	6805                	lui	a6,0x1
        vspt[3][i] = (addr >> 2) | PTE_AD |
    8000074c:	620c                	ld	a1,0(a2)
    8000074e:	0027d713          	srli	a4,a5,0x2
        addr +=  PAGE_SIZE;
    80000752:	97c2                	add	a5,a5,a6
        vspt[3][i] = (addr >> 2) | PTE_AD |
    80000754:	8f4d                	or	a4,a4,a1
    80000756:	0c076713          	ori	a4,a4,192
    8000075a:	e298                	sd	a4,0(a3)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    8000075c:	0641                	addi	a2,a2,16
    8000075e:	06a1                	addi	a3,a3,8
    80000760:	fea796e3          	bne	a5,a0,8000074c <vspt_init+0x9c>
    }

    vspt[2][1] = 
        PTE_V | (((uintptr_t)&vspt[4][0]) >> 2);
    80000764:	00044697          	auipc	a3,0x44
    80000768:	89c68693          	addi	a3,a3,-1892 # 80044000 <vspt+0x4000>
    8000076c:	0026d713          	srli	a4,a3,0x2
    80000770:	00176713          	ori	a4,a4,1

    addr = 4 * SUPERPAGE_SIZE(0) + SUPERPAGE_SIZE(1);
    for(int i = 0; i < 512; i++){
    80000774:	40100613          	li	a2,1025
    vspt[2][1] = 
    80000778:	00e8b423          	sd	a4,8(a7)
    for(int i = 0; i < 512; i++){
    8000077c:	065a                	slli	a2,a2,0x16
        vspt[4][i] = (addr >> 2) | 
            PTE_V | PTE_AD | PTE_RWX; 
        addr +=  PAGE_SIZE;
    8000077e:	6585                	lui	a1,0x1
        vspt[4][i] = (addr >> 2) | 
    80000780:	0027d713          	srli	a4,a5,0x2
            PTE_V | PTE_AD | PTE_RWX; 
    80000784:	0cf76713          	ori	a4,a4,207
        vspt[4][i] = (addr >> 2) | 
    80000788:	e298                	sd	a4,0(a3)
        addr +=  PAGE_SIZE;
    8000078a:	97ae                	add	a5,a5,a1
    for(int i = 0; i < 512; i++){
    8000078c:	06a1                	addi	a3,a3,8
    8000078e:	fec799e3          	bne	a5,a2,80000780 <vspt_init+0xd0>
    }  

    vspt[0][5] = 
        PTE_V | (((uintptr_t)&vspt[5][0]) >> 2);
    80000792:	00045697          	auipc	a3,0x45
    80000796:	86e68693          	addi	a3,a3,-1938 # 80045000 <vspt+0x5000>
    8000079a:	0026d713          	srli	a4,a3,0x2
    8000079e:	00176713          	ori	a4,a4,1
    
    addr = 5 * SUPERPAGE_SIZE(0);
    800007a2:	4795                	li	a5,5
    for(int i = 0; i < 512; i++){
    800007a4:	460d                	li	a2,3
    vspt[0][5] = 
    800007a6:	f418                	sd	a4,40(s0)
    addr = 5 * SUPERPAGE_SIZE(0);
    800007a8:	07fa                	slli	a5,a5,0x1e
    for(int i = 0; i < 512; i++){
    800007aa:	067e                	slli	a2,a2,0x1f
        vspt[5][i] = (addr >> 2) |
             PTE_V | PTE_AD | PTE_RWX;  
        addr +=  SUPERPAGE_SIZE(1);
    800007ac:	002005b7          	lui	a1,0x200
        vspt[5][i] = (addr >> 2) |
    800007b0:	0027d713          	srli	a4,a5,0x2
             PTE_V | PTE_AD | PTE_RWX;  
    800007b4:	0cf76713          	ori	a4,a4,207
        vspt[5][i] = (addr >> 2) |
    800007b8:	e298                	sd	a4,0(a3)
        addr +=  SUPERPAGE_SIZE(1);
    800007ba:	97ae                	add	a5,a5,a1
    for(int i = 0; i < 512; i++){
    800007bc:	06a1                	addi	a3,a3,8
    800007be:	fec799e3          	bne	a5,a2,800007b0 <vspt_init+0x100>
    }  

    uintptr_t satp = (((uintptr_t)vspt) >> 12) | (0x8ULL << 60);
    if(curr_priv == PRIV_VS){
    800007c2:	00032717          	auipc	a4,0x32
    800007c6:	cda72703          	lw	a4,-806(a4) # 8003249c <curr_priv>
    uintptr_t satp = (((uintptr_t)vspt) >> 12) | (0x8ULL << 60);
    800007ca:	57fd                	li	a5,-1
    800007cc:	8031                	srli	s0,s0,0xc
    800007ce:	17fe                	slli	a5,a5,0x3f
    if(curr_priv == PRIV_VS){
    800007d0:	4689                	li	a3,2
    uintptr_t satp = (((uintptr_t)vspt) >> 12) | (0x8ULL << 60);
    800007d2:	8c5d                	or	s0,s0,a5
    if(curr_priv == PRIV_VS){
    800007d4:	04d70163          	beq	a4,a3,80000816 <vspt_init+0x166>
        CSRW(satp, satp);
    } else if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    800007d8:	3775                	addiw	a4,a4,-3
    800007da:	4785                	li	a5,1
    800007dc:	00e7e863          	bltu	a5,a4,800007ec <vspt_init+0x13c>
        CSRW(CSR_VSATP, satp);
    800007e0:	28041073          	csrw	vsatp,s0
    } else {
        ERROR("");
    }
}
    800007e4:	60a2                	ld	ra,8(sp)
    800007e6:	6402                	ld	s0,0(sp)
    800007e8:	0141                	addi	sp,sp,16
    800007ea:	8082                	ret
        ERROR("");
    800007ec:	00027517          	auipc	a0,0x27
    800007f0:	6ec50513          	addi	a0,a0,1772 # 80027ed8 <__func__.0+0x478>
    800007f4:	502250ef          	jal	80025cf6 <printf>
    800007f8:	10600613          	li	a2,262
    800007fc:	00026597          	auipc	a1,0x26
    80000800:	97c58593          	addi	a1,a1,-1668 # 80026178 <__func__.1>
    80000804:	00027517          	auipc	a0,0x27
    80000808:	6c450513          	addi	a0,a0,1732 # 80027ec8 <__func__.0+0x468>
    8000080c:	4ea250ef          	jal	80025cf6 <printf>
    80000810:	4501                	li	a0,0
    80000812:	1a2250ef          	jal	800259b4 <exit>
        CSRW(satp, satp);
    80000816:	18041073          	csrw	satp,s0
}
    8000081a:	60a2                	ld	ra,8(sp)
    8000081c:	6402                	ld	s0,0(sp)
    8000081e:	0141                	addi	sp,sp,16
    80000820:	8082                	ret

0000000080000822 <hpt_init>:

pte_t hpt_root[PAGE_SIZE*4/sizeof(pte_t)] __attribute__((aligned(PAGE_SIZE*4)));
pte_t hpt[5][PAGE_SIZE/sizeof(pte_t)] __attribute__((aligned(PAGE_SIZE)));

void hpt_init(){
    80000822:	1141                	addi	sp,sp,-16
    80000824:	e022                	sd	s0,0(sp)

    for(int i = 0; i < 2048; i++){
        hpt_root[i] = 0;
    80000826:	0003b417          	auipc	s0,0x3b
    8000082a:	7da40413          	addi	s0,s0,2010 # 8003c000 <hpt_root>
    8000082e:	6611                	lui	a2,0x4
    80000830:	4581                	li	a1,0
    80000832:	8522                	mv	a0,s0
void hpt_init(){
    80000834:	e406                	sd	ra,8(sp)
        hpt_root[i] = 0;
    80000836:	618250ef          	jal	80025e4e <memset>
            PTE_V | PTE_U | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(0);
    }

    hpt_root[MEM_BASE/SUPERPAGE_SIZE(0)] =
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    8000083a:	00033717          	auipc	a4,0x33
    8000083e:	7c670713          	addi	a4,a4,1990 # 80034000 <hpt>
        hpt_root[i] = 
    80000842:	0df00893          	li	a7,223
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    80000846:	00275793          	srli	a5,a4,0x2
        hpt_root[i] = 
    8000084a:	10000837          	lui	a6,0x10000
    8000084e:	300006b7          	lui	a3,0x30000
    80000852:	96c6                	add	a3,a3,a7
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    80000854:	0017e793          	ori	a5,a5,1
        hpt_root[i] = 
    80000858:	9846                	add	a6,a6,a7

    addr = MEM_BASE;
    for(int i = 0; i < 512; i++) hpt[0][i] = 0;
    8000085a:	6605                	lui	a2,0x1
    8000085c:	853a                	mv	a0,a4
    8000085e:	4581                	li	a1,0
        hpt_root[i] = 
    80000860:	ec14                	sd	a3,24(s0)
    hpt_root[MEM_BASE/SUPERPAGE_SIZE(0)] =
    80000862:	e81c                	sd	a5,16(s0)
        hpt_root[i] = 
    80000864:	01143023          	sd	a7,0(s0)
    80000868:	01043423          	sd	a6,8(s0)
    for(int i = 0; i < 512; i++) hpt[0][i] = 0;
    8000086c:	5e2250ef          	jal	80025e4e <memset>
    addr = MEM_BASE;
    80000870:	4785                	li	a5,1
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    80000872:	46c5                	li	a3,17
    addr = MEM_BASE;
    80000874:	07fe                	slli	a5,a5,0x1f
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    80000876:	06ee                	slli	a3,a3,0x1b
        hpt[0][i] = 
            PTE_V | PTE_U | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(1);
    80000878:	00200637          	lui	a2,0x200
            PTE_V | PTE_U | PTE_AD | PTE_RWX | (addr >> 2);  
    8000087c:	0027d713          	srli	a4,a5,0x2
    80000880:	0df76713          	ori	a4,a4,223
        hpt[0][i] = 
    80000884:	e118                	sd	a4,0(a0)
        addr +=  SUPERPAGE_SIZE(1);
    80000886:	97b2                	add	a5,a5,a2
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    80000888:	0521                	addi	a0,a0,8
    8000088a:	fed799e3          	bne	a5,a3,8000087c <hpt_init+0x5a>
    }    

    hpt_root[4] =
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);
    8000088e:	00034317          	auipc	t1,0x34
    80000892:	77230313          	addi	t1,t1,1906 # 80035000 <hpt+0x1000>

    hpt_root[2047] =
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);

    hpt[1][0] = 
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);
    80000896:	00035617          	auipc	a2,0x35
    8000089a:	76a60613          	addi	a2,a2,1898 # 80036000 <hpt+0x2000>
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);
    8000089e:	00235693          	srli	a3,t1,0x2
    800008a2:	0016e693          	ori	a3,a3,1
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);
    800008a6:	00265713          	srli	a4,a2,0x2
    800008aa:	00176713          	ori	a4,a4,1
    hpt_root[2047] =
    800008ae:	0003f597          	auipc	a1,0x3f
    800008b2:	74d5b523          	sd	a3,1866(a1) # 8003fff8 <hpt_root+0x3ff8>

    hpt[1][511] = 
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);

    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800008b6:	44100813          	li	a6,1089
    hpt_root[4] =
    800008ba:	f014                	sd	a3,32(s0)
    hpt[1][0] = 
    800008bc:	00e33023          	sd	a4,0(t1)
    hpt[1][511] = 
    800008c0:	fee63c23          	sd	a4,-8(a2)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800008c4:	0856                	slli	a6,a6,0x15
    800008c6:	00030597          	auipc	a1,0x30
    800008ca:	bda58593          	addi	a1,a1,-1062 # 800304a0 <test_page_perm_table+0x8>
    addr = TEST_PPAGE_BASE;
    800008ce:	86be                	mv	a3,a5
        hpt[2][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].h; 
        addr +=  PAGE_SIZE;
    800008d0:	6885                	lui	a7,0x1
        hpt[2][i] = (addr >> 2) | PTE_AD |
    800008d2:	6188                	ld	a0,0(a1)
    800008d4:	0026d713          	srli	a4,a3,0x2
        addr +=  PAGE_SIZE;
    800008d8:	96c6                	add	a3,a3,a7
        hpt[2][i] = (addr >> 2) | PTE_AD |
    800008da:	8f49                	or	a4,a4,a0
    800008dc:	0c076713          	ori	a4,a4,192
    800008e0:	e218                	sd	a4,0(a2)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800008e2:	05c1                	addi	a1,a1,16
    800008e4:	0621                	addi	a2,a2,8
    800008e6:	ff0696e3          	bne	a3,a6,800008d2 <hpt_init+0xb0>
    }

    hpt[1][1] = 
        PTE_V | (((uintptr_t)&hpt[3][0]) >> 2);
    800008ea:	00036617          	auipc	a2,0x36
    800008ee:	71660613          	addi	a2,a2,1814 # 80037000 <hpt+0x3000>
    800008f2:	00265713          	srli	a4,a2,0x2
    800008f6:	00176713          	ori	a4,a4,1
    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < 512; i++){
    800008fa:	44100593          	li	a1,1089
    hpt[1][1] = 
    800008fe:	00e33423          	sd	a4,8(t1)
    for(int i = 0; i < 512; i++){
    80000902:	05d6                	slli	a1,a1,0x15
    addr = TEST_PPAGE_BASE;
    80000904:	873e                	mv	a4,a5
        hpt[3][i] = (addr >> 2) | 
            PTE_V | PTE_U | PTE_AD | PTE_RWX; 
        addr +=  PAGE_SIZE;
    80000906:	6505                	lui	a0,0x1
        hpt[3][i] = (addr >> 2) | 
    80000908:	00275693          	srli	a3,a4,0x2
            PTE_V | PTE_U | PTE_AD | PTE_RWX; 
    8000090c:	0df6e693          	ori	a3,a3,223
        hpt[3][i] = (addr >> 2) | 
    80000910:	e214                	sd	a3,0(a2)
        addr +=  PAGE_SIZE;
    80000912:	972a                	add	a4,a4,a0
    for(int i = 0; i < 512; i++){
    80000914:	0621                	addi	a2,a2,8
    80000916:	feb719e3          	bne	a4,a1,80000908 <hpt_init+0xe6>
    }  

    hpt_root[5] =
        PTE_V | (((uintptr_t)&hpt[4][0]) >> 2);
    8000091a:	00037697          	auipc	a3,0x37
    8000091e:	6e668693          	addi	a3,a3,1766 # 80038000 <hpt+0x4000>
    80000922:	0026d713          	srli	a4,a3,0x2
    80000926:	00176713          	ori	a4,a4,1
    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < 512; i++){
    8000092a:	4665                	li	a2,25
    hpt_root[5] =
    8000092c:	f418                	sd	a4,40(s0)
    for(int i = 0; i < 512; i++){
    8000092e:	066e                	slli	a2,a2,0x1b
        hpt[4][i] = (addr >> 2) |
             PTE_V | PTE_U | PTE_AD | PTE_RWX;  
        addr +=  SUPERPAGE_SIZE(1);
    80000930:	002005b7          	lui	a1,0x200
        hpt[4][i] = (addr >> 2) |
    80000934:	0027d713          	srli	a4,a5,0x2
             PTE_V | PTE_U | PTE_AD | PTE_RWX;  
    80000938:	0df76713          	ori	a4,a4,223
        hpt[4][i] = (addr >> 2) |
    8000093c:	e298                	sd	a4,0(a3)
        addr +=  SUPERPAGE_SIZE(1);
    8000093e:	97ae                	add	a5,a5,a1
    for(int i = 0; i < 512; i++){
    80000940:	06a1                	addi	a3,a3,8
    80000942:	fec799e3          	bne	a5,a2,80000934 <hpt_init+0x112>
    }  

    if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    80000946:	00032797          	auipc	a5,0x32
    8000094a:	b567a783          	lw	a5,-1194(a5) # 8003249c <curr_priv>
    8000094e:	4705                	li	a4,1
    80000950:	37f5                	addiw	a5,a5,-3
    80000952:	00f76d63          	bltu	a4,a5,8000096c <hpt_init+0x14a>
        uintptr_t hsatp = (((uintptr_t)hpt_root) >> 12) | (0x8ULL << 60);
    80000956:	577d                	li	a4,-1
    80000958:	00c45793          	srli	a5,s0,0xc
    8000095c:	177e                	slli	a4,a4,0x3f
    8000095e:	8fd9                	or	a5,a5,a4
        CSRW(CSR_HGATP, hsatp);
    80000960:	68079073          	csrw	hgatp,a5
    } else {
        ERROR("trying to set hs hgatp from lower privilege");
    }
}
    80000964:	60a2                	ld	ra,8(sp)
    80000966:	6402                	ld	s0,0(sp)
    80000968:	0141                	addi	sp,sp,16
    8000096a:	8082                	ret
        ERROR("trying to set hs hgatp from lower privilege");
    8000096c:	00027517          	auipc	a0,0x27
    80000970:	58450513          	addi	a0,a0,1412 # 80027ef0 <__func__.0+0x490>
    80000974:	382250ef          	jal	80025cf6 <printf>
    80000978:	14e00613          	li	a2,334
    8000097c:	00026597          	auipc	a1,0x26
    80000980:	80c58593          	addi	a1,a1,-2036 # 80026188 <__func__.0>
    80000984:	00027517          	auipc	a0,0x27
    80000988:	54450513          	addi	a0,a0,1348 # 80027ec8 <__func__.0+0x468>
    8000098c:	36a250ef          	jal	80025cf6 <printf>
    80000990:	4501                	li	a0,0
    80000992:	022250ef          	jal	800259b4 <exit>

0000000080000996 <page_table_add_vs_AD>:

void page_table_add_vs_AD(int i){
    uintptr_t addr;
    addr = 0x88000000 + i*0x1000;
    80000996:	00c5171b          	slliw	a4,a0,0xc
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    8000099a:	00451593          	slli	a1,a0,0x4
    addr = 0x88000000 + i*0x1000;
    8000099e:	880007b7          	lui	a5,0x88000
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009a2:	00030617          	auipc	a2,0x30
    800009a6:	af660613          	addi	a2,a2,-1290 # 80030498 <test_page_perm_table>
    addr = 0x88000000 + i*0x1000;
    800009aa:	9fb9                	addw	a5,a5,a4
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009ac:	962e                	add	a2,a2,a1

    addr = 0x100000000 + i*0x1000;
    800009ae:	4685                	li	a3,1
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009b0:	6210                	ld	a2,0(a2)
    addr = 0x100000000 + i*0x1000;
    800009b2:	1682                	slli	a3,a3,0x20
    addr = 0x88000000 + i*0x1000;
    800009b4:	1782                	slli	a5,a5,0x20
    addr = 0x100000000 + i*0x1000;
    800009b6:	9736                	add	a4,a4,a3
    addr = 0x88000000 + i*0x1000;
    800009b8:	9381                	srli	a5,a5,0x20
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009ba:	40050593          	addi	a1,a0,1024
    800009be:	8389                	srli	a5,a5,0x2
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009c0:	8309                	srli	a4,a4,0x2
    800009c2:	60050513          	addi	a0,a0,1536
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009c6:	8fd1                	or	a5,a5,a2
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009c8:	8f51                	or	a4,a4,a2
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009ca:	058e                	slli	a1,a1,0x3
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009cc:	050e                	slli	a0,a0,0x3
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009ce:	00045617          	auipc	a2,0x45
    800009d2:	63260613          	addi	a2,a2,1586 # 80046000 <hspt>
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009d6:	0003f697          	auipc	a3,0x3f
    800009da:	62a68693          	addi	a3,a3,1578 # 80040000 <vspt>
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009de:	0c07e793          	ori	a5,a5,192
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009e2:	0c076713          	ori	a4,a4,192
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009e6:	962e                	add	a2,a2,a1
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009e8:	96aa                	add	a3,a3,a0
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009ea:	e21c                	sd	a5,0(a2)
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009ec:	e298                	sd	a4,0(a3)
}
    800009ee:	8082                	ret

00000000800009f0 <page_table_del_vs_AD>:

void page_table_del_vs_AD(int i){
    uintptr_t addr;
    addr = 0x88000000 + i*0x1000;
    800009f0:	00c5171b          	slliw	a4,a0,0xc
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    800009f4:	00451593          	slli	a1,a0,0x4
    addr = 0x88000000 + i*0x1000;
    800009f8:	880007b7          	lui	a5,0x88000
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    800009fc:	00030617          	auipc	a2,0x30
    80000a00:	a9c60613          	addi	a2,a2,-1380 # 80030498 <test_page_perm_table>
    80000a04:	962e                	add	a2,a2,a1
    addr = 0x88000000 + i*0x1000;
    80000a06:	9fb9                	addw	a5,a5,a4

    addr = 0x100000000 + i*0x1000;
    80000a08:	4685                	li	a3,1
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a0a:	00063803          	ld	a6,0(a2)
    addr = 0x100000000 + i*0x1000;
    80000a0e:	1682                	slli	a3,a3,0x20
    addr = 0x88000000 + i*0x1000;
    80000a10:	1782                	slli	a5,a5,0x20
    addr = 0x100000000 + i*0x1000;
    80000a12:	9736                	add	a4,a4,a3
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a14:	40050593          	addi	a1,a0,1024
    addr = 0x88000000 + i*0x1000;
    80000a18:	9381                	srli	a5,a5,0x20
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a1a:	60050513          	addi	a0,a0,1536
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a1e:	8389                	srli	a5,a5,0x2
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a20:	8309                	srli	a4,a4,0x2
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a22:	058e                	slli	a1,a1,0x3
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a24:	050e                	slli	a0,a0,0x3
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a26:	00045617          	auipc	a2,0x45
    80000a2a:	5da60613          	addi	a2,a2,1498 # 80046000 <hspt>
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a2e:	0003f697          	auipc	a3,0x3f
    80000a32:	5d268693          	addi	a3,a3,1490 # 80040000 <vspt>
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a36:	0107e7b3          	or	a5,a5,a6
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a3a:	01076733          	or	a4,a4,a6
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a3e:	962e                	add	a2,a2,a1
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a40:	96aa                	add	a3,a3,a0
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a42:	e21c                	sd	a5,0(a2)
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a44:	e298                	sd	a4,0(a3)
}
    80000a46:	8082                	ret

0000000080000a48 <page_table_add_h_AD>:


void page_table_add_h_AD(int i){
    uintptr_t addr;
    addr = 0x88000000 + i*0x1000;
    80000a48:	00c5171b          	slliw	a4,a0,0xc
    80000a4c:	880007b7          	lui	a5,0x88000
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].h;
    80000a50:	00451693          	slli	a3,a0,0x4
    addr = 0x88000000 + i*0x1000;
    80000a54:	9fb9                	addw	a5,a5,a4
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].h;
    80000a56:	00030717          	auipc	a4,0x30
    80000a5a:	a4270713          	addi	a4,a4,-1470 # 80030498 <test_page_perm_table>
    80000a5e:	9736                	add	a4,a4,a3
    80000a60:	6714                	ld	a3,8(a4)
    addr = 0x88000000 + i*0x1000;
    80000a62:	1782                	slli	a5,a5,0x20
    80000a64:	9381                	srli	a5,a5,0x20
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].h;
    80000a66:	40050513          	addi	a0,a0,1024
    80000a6a:	8389                	srli	a5,a5,0x2
    80000a6c:	050e                	slli	a0,a0,0x3
    80000a6e:	00045717          	auipc	a4,0x45
    80000a72:	59270713          	addi	a4,a4,1426 # 80046000 <hspt>
    80000a76:	8fd5                	or	a5,a5,a3
    80000a78:	972a                	add	a4,a4,a0
    80000a7a:	e31c                	sd	a5,0(a4)
}
    80000a7c:	8082                	ret

0000000080000a7e <page_table_del_h_AD>:

void page_table_del_h_AD(int i){
    80000a7e:	00c5171b          	slliw	a4,a0,0xc
    80000a82:	880007b7          	lui	a5,0x88000
    80000a86:	00451693          	slli	a3,a0,0x4
    80000a8a:	9fb9                	addw	a5,a5,a4
    80000a8c:	00030717          	auipc	a4,0x30
    80000a90:	a0c70713          	addi	a4,a4,-1524 # 80030498 <test_page_perm_table>
    80000a94:	9736                	add	a4,a4,a3
    80000a96:	6714                	ld	a3,8(a4)
    80000a98:	1782                	slli	a5,a5,0x20
    80000a9a:	9381                	srli	a5,a5,0x20
    80000a9c:	40050513          	addi	a0,a0,1024
    80000aa0:	8389                	srli	a5,a5,0x2
    80000aa2:	050e                	slli	a0,a0,0x3
    80000aa4:	00045717          	auipc	a4,0x45
    80000aa8:	55c70713          	addi	a4,a4,1372 # 80046000 <hspt>
    80000aac:	8fd5                	or	a5,a5,a3
    80000aae:	972a                	add	a4,a4,a0
    80000ab0:	e31c                	sd	a5,0(a4)
    80000ab2:	8082                	ret

0000000080000ab4 <hspt_switch>:
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].h;
}

void hspt_switch(){
    pte_t temp = hspt[2][SWITCH1];
    hspt[2][SWITCH1] = hspt[2][SWITCH2];
    80000ab4:	00047797          	auipc	a5,0x47
    80000ab8:	54c78793          	addi	a5,a5,1356 # 80048000 <hspt+0x2000>
    80000abc:	3607b683          	ld	a3,864(a5)
    80000ac0:	3687b703          	ld	a4,872(a5)
    80000ac4:	36d7b423          	sd	a3,872(a5)
    80000ac8:	36e7b023          	sd	a4,864(a5)
    hspt[2][SWITCH2] = temp;
}
    80000acc:	8082                	ret

0000000080000ace <vspt_switch>:

void vspt_switch(){
    pte_t temp = vspt[3][SWITCH1];
    vspt[3][SWITCH1] = vspt[3][SWITCH2];
    80000ace:	00042797          	auipc	a5,0x42
    80000ad2:	53278793          	addi	a5,a5,1330 # 80043000 <vspt+0x3000>
    80000ad6:	3607b683          	ld	a3,864(a5)
    80000ada:	3687b703          	ld	a4,872(a5)
    80000ade:	36d7b423          	sd	a3,872(a5)
    80000ae2:	36e7b023          	sd	a4,864(a5)
    vspt[3][SWITCH2] = temp;
}
    80000ae6:	8082                	ret

0000000080000ae8 <hpt_switch>:

void hpt_switch(){
    pte_t temp = hpt[2][SWITCH1];
    hpt[2][SWITCH1] = hpt[2][SWITCH2];
    80000ae8:	00035797          	auipc	a5,0x35
    80000aec:	51878793          	addi	a5,a5,1304 # 80036000 <hpt+0x2000>
    80000af0:	3607b683          	ld	a3,864(a5)
    80000af4:	3687b703          	ld	a4,872(a5)
    80000af8:	36d7b423          	sd	a3,872(a5)
    80000afc:	36e7b023          	sd	a4,864(a5)
    hpt[2][SWITCH2] = temp;
}
    80000b00:	8082                	ret

0000000080000b02 <ecall>:

uint64_t ecall_args[2];

uint64_t ecall(uint64_t a0, uint64_t a1)
{
    ecall_args[0] = a0;
    80000b02:	00048797          	auipc	a5,0x48
    80000b06:	4fe78793          	addi	a5,a5,1278 # 80049000 <ecall_args>
    80000b0a:	e388                	sd	a0,0(a5)
    ecall_args[1] = a1;
    80000b0c:	e78c                	sd	a1,8(a5)

    asm volatile("ecall" ::: "memory");
    80000b0e:	00000073          	ecall
    return ecall_args[0];

}
    80000b12:	6388                	ld	a0,0(a5)
    80000b14:	8082                	ret

0000000080000b16 <set_prev_priv>:
    return priv == PRIV_VU || priv == PRIV_HU;
}

void set_prev_priv(int priv){

    switch(curr_priv){
    80000b16:	00032797          	auipc	a5,0x32
    80000b1a:	9867a783          	lw	a5,-1658(a5) # 8003249c <curr_priv>
    80000b1e:	470d                	li	a4,3
    80000b20:	06e78963          	beq	a5,a4,80000b92 <set_prev_priv+0x7c>
    80000b24:	4711                	li	a4,4
    80000b26:	04e78163          	beq	a5,a4,80000b68 <set_prev_priv+0x52>
    80000b2a:	4709                	li	a4,2
    80000b2c:	08e78863          	beq	a5,a4,80000bbc <set_prev_priv+0xa6>
void set_prev_priv(int priv){
    80000b30:	1141                	addi	sp,sp,-16
        case PRIV_VS: {
            uint64_t temp = CSRR(sstatus);
            CSRC(sstatus, 0x1ULL << 8);
        }
        break;
        default: ERROR("unknown current priv %d (%s)\n", priv, __func__);
    80000b32:	85aa                	mv	a1,a0
    80000b34:	00025617          	auipc	a2,0x25
    80000b38:	66460613          	addi	a2,a2,1636 # 80026198 <__func__.6>
    80000b3c:	00027517          	auipc	a0,0x27
    80000b40:	3f450513          	addi	a0,a0,1012 # 80027f30 <__func__.0+0x4d0>
void set_prev_priv(int priv){
    80000b44:	e406                	sd	ra,8(sp)
        default: ERROR("unknown current priv %d (%s)\n", priv, __func__);
    80000b46:	1b0250ef          	jal	80025cf6 <printf>
    80000b4a:	03c00613          	li	a2,60
    80000b4e:	00025597          	auipc	a1,0x25
    80000b52:	64a58593          	addi	a1,a1,1610 # 80026198 <__func__.6>
    80000b56:	00027517          	auipc	a0,0x27
    80000b5a:	37250513          	addi	a0,a0,882 # 80027ec8 <__func__.0+0x468>
    80000b5e:	198250ef          	jal	80025cf6 <printf>
    80000b62:	4501                	li	a0,0
    80000b64:	651240ef          	jal	800259b4 <exit>
            uint64_t temp = CSRR(mstatus);
    80000b68:	30002773          	csrr	a4,mstatus
            temp &= ~((3ULL << 11) | (1ULL << 39));
    80000b6c:	fc0007b7          	lui	a5,0xfc000
    80000b70:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    80000b72:	07b6                	slli	a5,a5,0xd
    80000b74:	7ff78793          	addi	a5,a5,2047
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000b78:	ffe5069b          	addiw	a3,a0,-2
    80000b7c:	4605                	li	a2,1
            temp &= ~((3ULL << 11) | (1ULL << 39));
    80000b7e:	8ff9                	and	a5,a5,a4
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000b80:	06d67363          	bgeu	a2,a3,80000be6 <set_prev_priv+0xd0>
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000b84:	e501                	bnez	a0,80000b8c <set_prev_priv+0x76>
    80000b86:	4705                	li	a4,1
    80000b88:	171e                	slli	a4,a4,0x27
    80000b8a:	8fd9                	or	a5,a5,a4
            CSRW(mstatus, temp);
    80000b8c:	30079073          	csrw	mstatus,a5
        break;
    80000b90:	8082                	ret
            uint64_t temp = CSRR(sstatus);
    80000b92:	100027f3          	csrr	a5,sstatus
            if(priv == PRIV_HS || priv == PRIV_VS) temp |= (0x1ULL << 8);   //spp
    80000b96:	4705                	li	a4,1
    80000b98:	ffe5069b          	addiw	a3,a0,-2
    80000b9c:	02d77763          	bgeu	a4,a3,80000bca <set_prev_priv+0xb4>
            temp &= ~(0x1ULL << 8);
    80000ba0:	eff7f793          	andi	a5,a5,-257
            CSRW(sstatus, temp);
    80000ba4:	10079073          	csrw	sstatus,a5
            temp = CSRR(CSR_HSTATUS);   //p101
    80000ba8:	600027f3          	csrr	a5,hstatus
            temp &= ~(0x3ULL << 7);
    80000bac:	e7f7f793          	andi	a5,a5,-385
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (0x1ULL << 7);       //spv
    80000bb0:	e119                	bnez	a0,80000bb6 <set_prev_priv+0xa0>
    80000bb2:	0807e793          	ori	a5,a5,128
            CSRW(CSR_HSTATUS, temp);
    80000bb6:	60079073          	csrw	hstatus,a5
        break;
    80000bba:	8082                	ret
            uint64_t temp = CSRR(sstatus);
    80000bbc:	100027f3          	csrr	a5,sstatus
            CSRC(sstatus, 0x1ULL << 8);
    80000bc0:	10000793          	li	a5,256
    80000bc4:	1007b073          	csrc	sstatus,a5
        break;
    80000bc8:	8082                	ret
            if(priv == PRIV_HS || priv == PRIV_VS) temp |= (0x1ULL << 8);   //spp
    80000bca:	1007e793          	ori	a5,a5,256
            CSRW(sstatus, temp);
    80000bce:	10079073          	csrw	sstatus,a5
            temp = CSRR(CSR_HSTATUS);   //p101
    80000bd2:	600027f3          	csrr	a5,hstatus
            if(priv == PRIV_VS) temp |= (1ULL << 8);        //spvp
    80000bd6:	4709                	li	a4,2
            temp &= ~(0x3ULL << 7);
    80000bd8:	e7f7f793          	andi	a5,a5,-385
            if(priv == PRIV_VS) temp |= (1ULL << 8);        //spvp
    80000bdc:	fce51de3          	bne	a0,a4,80000bb6 <set_prev_priv+0xa0>
    80000be0:	1007e793          	ori	a5,a5,256
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (0x1ULL << 7);       //spv
    80000be4:	b7f9                	j	80000bb2 <set_prev_priv+0x9c>
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000be6:	6705                	lui	a4,0x1
    80000be8:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000bec:	4689                	li	a3,2
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000bee:	8fd9                	or	a5,a5,a4
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000bf0:	f8d50be3          	beq	a0,a3,80000b86 <set_prev_priv+0x70>
    80000bf4:	bf61                	j	80000b8c <set_prev_priv+0x76>

0000000080000bf6 <goto_priv>:
    curr_priv = priv;

}


void goto_priv(int target_priv){
    80000bf6:	1101                	addi	sp,sp,-32
    80000bf8:	e822                	sd	s0,16(sp)
    80000bfa:	ec06                	sd	ra,24(sp)
    80000bfc:	e426                	sd	s1,8(sp)

    static bool on_going = false;

    DEBUG("goto_priv: real = %s, target = %s, curr = %s",  priv_strs[real_priv], priv_strs[target_priv], priv_strs[curr_priv]);

    if(is_user(target_priv) && is_user(curr_priv)) {
    80000bfe:	4785                	li	a5,1
void goto_priv(int target_priv){
    80000c00:	842a                	mv	s0,a0
    if(is_user(target_priv) && is_user(curr_priv)) {
    80000c02:	02a7f963          	bgeu	a5,a0,80000c34 <goto_priv+0x3e>
        goto_priv(PRIV_M);
    }

    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    80000c06:	00032797          	auipc	a5,0x32
    80000c0a:	8927a783          	lw	a5,-1902(a5) # 80032498 <real_priv>
    80000c0e:	00032497          	auipc	s1,0x32
    80000c12:	88e48493          	addi	s1,s1,-1906 # 8003249c <curr_priv>
    80000c16:	00a78963          	beq	a5,a0,80000c28 <goto_priv+0x32>
    80000c1a:	4791                	li	a5,4
    80000c1c:	00032497          	auipc	s1,0x32
    80000c20:	88048493          	addi	s1,s1,-1920 # 8003249c <curr_priv>
    80000c24:	06a7d363          	bge	a5,a0,80000c8a <goto_priv+0x94>
        if(on_going)
            VERBOSE("...entered %s mode", priv_strs[target_priv]);
        on_going = false;
        curr_priv = target_priv;
    80000c28:	c080                	sw	s0,0(s1)
        VERBOSE("...entered %s mode", priv_strs[target_priv]);
        on_going = false;
        lower_priv(target_priv);
    }

}
    80000c2a:	60e2                	ld	ra,24(sp)
    80000c2c:	6442                	ld	s0,16(sp)
    80000c2e:	64a2                	ld	s1,8(sp)
    80000c30:	6105                	addi	sp,sp,32
    80000c32:	8082                	ret
    if(is_user(target_priv) && is_user(curr_priv)) {
    80000c34:	00032717          	auipc	a4,0x32
    80000c38:	86872703          	lw	a4,-1944(a4) # 8003249c <curr_priv>
    80000c3c:	00032497          	auipc	s1,0x32
    80000c40:	86048493          	addi	s1,s1,-1952 # 8003249c <curr_priv>
    80000c44:	0ae7f863          	bgeu	a5,a4,80000cf4 <goto_priv+0xfe>
    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    80000c48:	00032797          	auipc	a5,0x32
    80000c4c:	8507a783          	lw	a5,-1968(a5) # 80032498 <real_priv>
    80000c50:	fca78ce3          	beq	a5,a0,80000c28 <goto_priv+0x32>
    if(curr_priv == PRIV_VS && priv == PRIV_HU){
    80000c54:	4789                	li	a5,2
    80000c56:	06f71063          	bne	a4,a5,80000cb6 <goto_priv+0xc0>
    80000c5a:	4785                	li	a5,1
    80000c5c:	04f41d63          	bne	s0,a5,80000cb6 <goto_priv+0xc0>
        ERROR("trying to go from vs to hu");
    80000c60:	00027517          	auipc	a0,0x27
    80000c64:	30050513          	addi	a0,a0,768 # 80027f60 <__func__.0+0x500>
    80000c68:	08e250ef          	jal	80025cf6 <printf>
    80000c6c:	04b00613          	li	a2,75
        ERROR("cant lower priv from u");
    80000c70:	00025597          	auipc	a1,0x25
    80000c74:	53858593          	addi	a1,a1,1336 # 800261a8 <__func__.4>
    80000c78:	00027517          	auipc	a0,0x27
    80000c7c:	25050513          	addi	a0,a0,592 # 80027ec8 <__func__.0+0x468>
    80000c80:	076250ef          	jal	80025cf6 <printf>
    80000c84:	4501                	li	a0,0
    80000c86:	52f240ef          	jal	800259b4 <exit>
    if(target_priv > curr_priv){
    80000c8a:	00032797          	auipc	a5,0x32
    80000c8e:	8127a783          	lw	a5,-2030(a5) # 8003249c <curr_priv>
    80000c92:	02a7f063          	bgeu	a5,a0,80000cb2 <goto_priv+0xbc>
    ecall_args[0] = a0;
    80000c96:	00048797          	auipc	a5,0x48
    80000c9a:	36a78793          	addi	a5,a5,874 # 80049000 <ecall_args>
    80000c9e:	4705                	li	a4,1
        ecall(ECALL_GOTO_PRIV, target_priv);
    80000ca0:	e780                	sd	s0,8(a5)
    ecall_args[0] = a0;
    80000ca2:	e398                	sd	a4,0(a5)
    asm volatile("ecall" ::: "memory");
    80000ca4:	00000073          	ecall
}
    80000ca8:	60e2                	ld	ra,24(sp)
    80000caa:	6442                	ld	s0,16(sp)
    80000cac:	64a2                	ld	s1,8(sp)
    80000cae:	6105                	addi	sp,sp,32
    80000cb0:	8082                	ret
    if(priv == curr_priv) 
    80000cb2:	f6f50ce3          	beq	a0,a5,80000c2a <goto_priv+0x34>
    set_prev_priv(priv);
    80000cb6:	8522                	mv	a0,s0
    80000cb8:	e5fff0ef          	jal	80000b16 <set_prev_priv>
    if(curr_priv == PRIV_M) {
    80000cbc:	00031797          	auipc	a5,0x31
    80000cc0:	7e07a783          	lw	a5,2016(a5) # 8003249c <curr_priv>
    real_priv = priv;
    80000cc4:	00031717          	auipc	a4,0x31
    80000cc8:	7c872a23          	sw	s0,2004(a4) # 80032498 <real_priv>
    if(curr_priv == PRIV_M) {
    80000ccc:	4711                	li	a4,4
    80000cce:	04e78e63          	beq	a5,a4,80000d2a <goto_priv+0x134>
    } else if(curr_priv == PRIV_VS || curr_priv == PRIV_HS){
    80000cd2:	37f9                	addiw	a5,a5,-2
    80000cd4:	4705                	li	a4,1
    80000cd6:	04f76163          	bltu	a4,a5,80000d18 <goto_priv+0x122>
        asm volatile(
    80000cda:	00000297          	auipc	t0,0x0
    80000cde:	01028293          	addi	t0,t0,16 # 80000cea <goto_priv+0xf4>
    80000ce2:	14129073          	csrw	sepc,t0
    80000ce6:	10200073          	sret
    curr_priv = priv;
    80000cea:	00031797          	auipc	a5,0x31
    80000cee:	7a87a923          	sw	s0,1970(a5) # 8003249c <curr_priv>
    80000cf2:	bf25                	j	80000c2a <goto_priv+0x34>
        goto_priv(PRIV_M);
    80000cf4:	4511                	li	a0,4
    80000cf6:	f01ff0ef          	jal	80000bf6 <goto_priv>
    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    80000cfa:	00031797          	auipc	a5,0x31
    80000cfe:	79e7a783          	lw	a5,1950(a5) # 80032498 <real_priv>
    80000d02:	f28783e3          	beq	a5,s0,80000c28 <goto_priv+0x32>
    if(target_priv > curr_priv){
    80000d06:	00031717          	auipc	a4,0x31
    80000d0a:	79672703          	lw	a4,1942(a4) # 8003249c <curr_priv>
    80000d0e:	f88764e3          	bltu	a4,s0,80000c96 <goto_priv+0xa0>
    if(priv == curr_priv) 
    80000d12:	f0870ce3          	beq	a4,s0,80000c2a <goto_priv+0x34>
    80000d16:	bf3d                	j	80000c54 <goto_priv+0x5e>
        ERROR("cant lower priv from u");
    80000d18:	00027517          	auipc	a0,0x27
    80000d1c:	27850513          	addi	a0,a0,632 # 80027f90 <__func__.0+0x530>
    80000d20:	7d7240ef          	jal	80025cf6 <printf>
    80000d24:	06300613          	li	a2,99
    80000d28:	b7a1                	j	80000c70 <goto_priv+0x7a>
        asm volatile(
    80000d2a:	00000297          	auipc	t0,0x0
    80000d2e:	01028293          	addi	t0,t0,16 # 80000d3a <goto_priv+0x144>
    80000d32:	34129073          	csrw	mepc,t0
    80000d36:	30200073          	mret
    80000d3a:	bf45                	j	80000cea <goto_priv+0xf4>

0000000080000d3c <mhandler>:
        break;\
    }\
    return from_priv;\
}

uint64_t mhandler(){
    80000d3c:	715d                	addi	sp,sp,-80
    80000d3e:	f44e                	sd	s3,40(sp)
    80000d40:	e486                	sd	ra,72(sp)
    80000d42:	e0a2                	sd	s0,64(sp)
    80000d44:	fc26                	sd	s1,56(sp)
    80000d46:	f84a                	sd	s2,48(sp)
    80000d48:	f052                	sd	s4,32(sp)
    80000d4a:	ec56                	sd	s5,24(sp)
    80000d4c:	e85a                	sd	s6,16(sp)
    80000d4e:	e45e                	sd	s7,8(sp)

    real_priv = PRIV_M;
    80000d50:	00031997          	auipc	s3,0x31
    80000d54:	74898993          	addi	s3,s3,1864 # 80032498 <real_priv>
    80000d58:	4791                	li	a5,4
    80000d5a:	00f9a023          	sw	a5,0(s3)

    uint64_t cause = CSRR(mcause);
    80000d5e:	342024f3          	csrr	s1,mcause
    uint64_t epc = CSRR(mepc);
    80000d62:	34102973          	csrr	s2,mepc
    80000d66:	8a4a                	mv	s4,s2
    uint64_t tval = CSRR(mtval);
    80000d68:	34302bf3          	csrr	s7,mtval
    uint64_t tval2 = CSRR(CSR_MTVAL2);
    80000d6c:	34b02af3          	csrr	s5,0x34b
    uint64_t tinst= CSRR(CSR_MTINST);
    80000d70:	34a02b73          	csrr	s6,0x34a
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    80000d74:	478d                	li	a5,3
    80000d76:	ff848713          	addi	a4,s1,-8
    80000d7a:	12e7ef63          	bltu	a5,a4,80000eb8 <mhandler+0x17c>
    DEBUG("mtinst = 0x%lx", tinst);
    DEBUG("mpp = 0x%lx", (CSRR(mstatus) >> 11) & 0x3);
    DEBUG("mpv = 0x%lx", (CSRR(mstatus) >> 39) & 0x1);
    DEBUG("gva = 0x%lx", (CSRR(mstatus) >> MSTATUS_GVA_OFF) & 0x1);
    
    if(is_ecall(cause) && ecall_args[0] == ECALL_GOTO_PRIV){
    80000d7e:	00048417          	auipc	s0,0x48
    80000d82:	28240413          	addi	s0,s0,642 # 80049000 <ecall_args>
    80000d86:	6018                	ld	a4,0(s0)
    80000d88:	4785                	li	a5,1
    80000d8a:	1cf70763          	beq	a4,a5,80000f58 <mhandler+0x21c>
        goto_priv(ecall_args[1]); 
    } else if(!excpt.testing){
    80000d8e:	00048797          	auipc	a5,0x48
    80000d92:	2827c783          	lbu	a5,642(a5) # 80049010 <excpt>
    80000d96:	c3cd                	beqz	a5,80000e38 <mhandler+0xfc>

    if(cause & (1ULL << 63)){
        CSRC(mip, 1ULL << (cause &  ~(1ULL << 63)));
    }

    excpt.triggered = true;
    80000d98:	4705                	li	a4,1
    excpt.priv = PRIV_M;
    80000d9a:	4791                	li	a5,4
    excpt.cause = cause;
    80000d9c:	ec04                	sd	s1,24(s0)
    excpt.epc = epc;
    80000d9e:	03243023          	sd	s2,32(s0)
    excpt.tval = tval;
    80000da2:	03743423          	sd	s7,40(s0)
    excpt.tinst = tinst;
    80000da6:	03643823          	sd	s6,48(s0)
    excpt.tval2 = tval2;
    80000daa:	03543c23          	sd	s5,56(s0)
    excpt.triggered = true;
    80000dae:	00e408a3          	sb	a4,17(s0)
    excpt.priv = PRIV_M;
    80000db2:	c85c                	sw	a5,20(s0)
    excpt.gva = !!((CSRR(mstatus) >> MSTATUS_GVA_OFF) & 0x1);
    80000db4:	300027f3          	csrr	a5,mstatus
    80000db8:	9399                	srli	a5,a5,0x26
    80000dba:	8ff9                	and	a5,a5,a4
    80000dbc:	04f40023          	sb	a5,64(s0)
    excpt.xpv = !!((CSRR(mstatus) >> 39) & 0x1);
    80000dc0:	300027f3          	csrr	a5,mstatus
    80000dc4:	939d                	srli	a5,a5,0x27
    80000dc6:	8ff9                	and	a5,a5,a4
    80000dc8:	04f400a3          	sb	a5,65(s0)
    excpt.testing = false;
    80000dcc:	00048797          	auipc	a5,0x48
    80000dd0:	24078223          	sb	zero,580(a5) # 80049010 <excpt>
    if(is_inst_fault(cause)){
    80000dd4:	47d1                	li	a5,20
    80000dd6:	0097ed63          	bltu	a5,s1,80000df0 <mhandler+0xb4>
    80000dda:	001017b7          	lui	a5,0x101
    80000dde:	078d                	addi	a5,a5,3 # 101003 <STACK_SIZE+0x1003>
    80000de0:	0097d7b3          	srl	a5,a5,s1
    80000de4:	8ff9                	and	a5,a5,a4
    80000de6:	c789                	beqz	a5,80000df0 <mhandler+0xb4>
        if(excpt.fault_inst != 0){ 
    80000de8:	04843a03          	ld	s4,72(s0)
    80000dec:	0e0a0763          	beqz	s4,80000eda <mhandler+0x19e>
            ERROR("instruction fault without return address");
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    real_priv = curr_priv;
    80000df0:	00031797          	auipc	a5,0x31
    80000df4:	6ac7a783          	lw	a5,1708(a5) # 8003249c <curr_priv>
    unsigned temp_priv = real_priv;
    80000df8:	00031517          	auipc	a0,0x31
    80000dfc:	6a052503          	lw	a0,1696(a0) # 80032498 <real_priv>
    excpt.fault_inst = 0;
    80000e00:	00048717          	auipc	a4,0x48
    80000e04:	24073423          	sd	zero,584(a4) # 80049048 <excpt+0x38>
    real_priv = curr_priv;
    80000e08:	00f9a023          	sw	a5,0(s3)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000e0c:	478d                	li	a5,3
    80000e0e:	04f50a63          	beq	a0,a5,80000e62 <mhandler+0x126>
    80000e12:	4791                	li	a5,4
    80000e14:	0ef50363          	beq	a0,a5,80000efa <mhandler+0x1be>
    80000e18:	4789                	li	a5,2
    80000e1a:	06f50263          	beq	a0,a5,80000e7e <mhandler+0x142>
}
    80000e1e:	60a6                	ld	ra,72(sp)
    80000e20:	6406                	ld	s0,64(sp)
    80000e22:	1502                	slli	a0,a0,0x20
    80000e24:	74e2                	ld	s1,56(sp)
    80000e26:	7942                	ld	s2,48(sp)
    80000e28:	79a2                	ld	s3,40(sp)
    80000e2a:	7a02                	ld	s4,32(sp)
    80000e2c:	6ae2                	ld	s5,24(sp)
    80000e2e:	6b42                	ld	s6,16(sp)
    80000e30:	6ba2                	ld	s7,8(sp)
    80000e32:	9101                	srli	a0,a0,0x20
    80000e34:	6161                	addi	sp,sp,80
    80000e36:	8082                	ret
        ERROR("untested exception!");
    80000e38:	00027517          	auipc	a0,0x27
    80000e3c:	18050513          	addi	a0,a0,384 # 80027fb8 <__func__.0+0x558>
    80000e40:	6b7240ef          	jal	80025cf6 <printf>
    80000e44:	0d600613          	li	a2,214
            ERROR("instruction fault without return address");
    80000e48:	00025597          	auipc	a1,0x25
    80000e4c:	37058593          	addi	a1,a1,880 # 800261b8 <__func__.3>
    80000e50:	00027517          	auipc	a0,0x27
    80000e54:	07850513          	addi	a0,a0,120 # 80027ec8 <__func__.0+0x468>
    80000e58:	69f240ef          	jal	80025cf6 <printf>
    80000e5c:	4501                	li	a0,0
    80000e5e:	357240ef          	jal	800259b4 <exit>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000e62:	600026f3          	csrr	a3,hstatus
    80000e66:	00031797          	auipc	a5,0x31
    80000e6a:	6367a783          	lw	a5,1590(a5) # 8003249c <curr_priv>
    80000e6e:	0806e713          	ori	a4,a3,128
    80000e72:	9bf5                	andi	a5,a5,-3
    80000e74:	c399                	beqz	a5,80000e7a <mhandler+0x13e>
    80000e76:	f7f6f713          	andi	a4,a3,-129
    80000e7a:	60071073          	csrw	hstatus,a4
    80000e7e:	100027f3          	csrr	a5,sstatus
    80000e82:	00031717          	auipc	a4,0x31
    80000e86:	61a72703          	lw	a4,1562(a4) # 8003249c <curr_priv>
    80000e8a:	4685                	li	a3,1
    80000e8c:	edf7f793          	andi	a5,a5,-289
    80000e90:	3779                	addiw	a4,a4,-2
    80000e92:	04e6fd63          	bgeu	a3,a4,80000eec <mhandler+0x1b0>
    80000e96:	10079073          	csrw	sstatus,a5
    80000e9a:	f804c2e3          	bltz	s1,80000e1e <mhandler+0xe2>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80000e9e:	000a5783          	lhu	a5,0(s4)
    80000ea2:	468d                	li	a3,3
    else return epc + 2;
    80000ea4:	002a0713          	addi	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80000ea8:	8ff5                	and	a5,a5,a3
    80000eaa:	00d79463          	bne	a5,a3,80000eb2 <mhandler+0x176>
    80000eae:	004a0713          	addi	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000eb2:	14171073          	csrw	sepc,a4
    80000eb6:	b7a5                	j	80000e1e <mhandler+0xe2>
    } else if(!excpt.testing){
    80000eb8:	00048797          	auipc	a5,0x48
    80000ebc:	1587c783          	lbu	a5,344(a5) # 80049010 <excpt>
    80000ec0:	dfa5                	beqz	a5,80000e38 <mhandler+0xfc>
    if(cause & (1ULL << 63)){
    80000ec2:	0004d763          	bgez	s1,80000ed0 <mhandler+0x194>
        CSRC(mip, 1ULL << (cause &  ~(1ULL << 63)));
    80000ec6:	4785                	li	a5,1
    80000ec8:	009797b3          	sll	a5,a5,s1
    80000ecc:	3447b073          	csrc	mip,a5
    80000ed0:	00048417          	auipc	s0,0x48
    80000ed4:	13040413          	addi	s0,s0,304 # 80049000 <ecall_args>
    80000ed8:	b5c1                	j	80000d98 <mhandler+0x5c>
            ERROR("instruction fault without return address");
    80000eda:	00027517          	auipc	a0,0x27
    80000ede:	10650513          	addi	a0,a0,262 # 80027fe0 <__func__.0+0x580>
    80000ee2:	615240ef          	jal	80025cf6 <printf>
    80000ee6:	0ec00613          	li	a2,236
    80000eea:	bfb9                	j	80000e48 <mhandler+0x10c>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000eec:	1007e793          	ori	a5,a5,256
    80000ef0:	10079073          	csrw	sstatus,a5
    80000ef4:	fa04d5e3          	bgez	s1,80000e9e <mhandler+0x162>
    80000ef8:	b71d                	j	80000e1e <mhandler+0xe2>
    80000efa:	30002773          	csrr	a4,mstatus
    80000efe:	fc0007b7          	lui	a5,0xfc000
    80000f02:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    80000f04:	00031697          	auipc	a3,0x31
    80000f08:	5986a683          	lw	a3,1432(a3) # 8003249c <curr_priv>
    80000f0c:	07b6                	slli	a5,a5,0xd
    80000f0e:	77f78793          	addi	a5,a5,1919
    80000f12:	8ff9                	and	a5,a5,a4
    80000f14:	04a68663          	beq	a3,a0,80000f60 <mhandler+0x224>
    80000f18:	ffe6871b          	addiw	a4,a3,-2
    80000f1c:	4605                	li	a2,1
    80000f1e:	04e66663          	bltu	a2,a4,80000f6a <mhandler+0x22e>
    80000f22:	6705                	lui	a4,0x1
    80000f24:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
    80000f28:	4609                	li	a2,2
    80000f2a:	8fd9                	or	a5,a5,a4
    80000f2c:	00c69563          	bne	a3,a2,80000f36 <mhandler+0x1fa>
    80000f30:	4705                	li	a4,1
    80000f32:	171e                	slli	a4,a4,0x27
    80000f34:	8fd9                	or	a5,a5,a4
    80000f36:	30079073          	csrw	mstatus,a5
    80000f3a:	ee04c2e3          	bltz	s1,80000e1e <mhandler+0xe2>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80000f3e:	000a5783          	lhu	a5,0(s4)
    80000f42:	468d                	li	a3,3
    else return epc + 2;
    80000f44:	002a0713          	addi	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80000f48:	8ff5                	and	a5,a5,a3
    80000f4a:	00d79463          	bne	a5,a3,80000f52 <mhandler+0x216>
    80000f4e:	004a0713          	addi	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000f52:	34171073          	csrw	mepc,a4
    80000f56:	b5e1                	j	80000e1e <mhandler+0xe2>
        goto_priv(ecall_args[1]); 
    80000f58:	4408                	lw	a0,8(s0)
    80000f5a:	c9dff0ef          	jal	80000bf6 <goto_priv>
    if(cause & (1ULL << 63)){
    80000f5e:	bd2d                	j	80000d98 <mhandler+0x5c>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000f60:	6709                	lui	a4,0x2
    80000f62:	80070713          	addi	a4,a4,-2048 # 1800 <_test_table_size+0x17ff>
    80000f66:	8fd9                	or	a5,a5,a4
    80000f68:	b7f9                	j	80000f36 <mhandler+0x1fa>
    80000f6a:	d2f9                	beqz	a3,80000f30 <mhandler+0x1f4>
    80000f6c:	b7e9                	j	80000f36 <mhandler+0x1fa>

0000000080000f6e <hshandler>:
uint64_t hshandler(){
    80000f6e:	715d                	addi	sp,sp,-80
    80000f70:	f44e                	sd	s3,40(sp)
    80000f72:	e486                	sd	ra,72(sp)
    80000f74:	e0a2                	sd	s0,64(sp)
    80000f76:	fc26                	sd	s1,56(sp)
    80000f78:	f84a                	sd	s2,48(sp)
    80000f7a:	f052                	sd	s4,32(sp)
    80000f7c:	ec56                	sd	s5,24(sp)
    80000f7e:	e85a                	sd	s6,16(sp)
    80000f80:	e45e                	sd	s7,8(sp)

    real_priv = PRIV_HS;
    80000f82:	00031997          	auipc	s3,0x31
    80000f86:	51698993          	addi	s3,s3,1302 # 80032498 <real_priv>
    80000f8a:	478d                	li	a5,3
    80000f8c:	00f9a023          	sw	a5,0(s3)

    uint64_t cause = CSRR(scause);
    80000f90:	142024f3          	csrr	s1,scause
    uint64_t epc = CSRR(sepc);
    80000f94:	14102973          	csrr	s2,sepc
    80000f98:	8a4a                	mv	s4,s2
    uint64_t tval = CSRR(stval);
    80000f9a:	14302bf3          	csrr	s7,stval
    uint64_t htval = CSRR(CSR_HTVAL);
    80000f9e:	64302af3          	csrr	s5,htval
    uint64_t htinst = CSRR(CSR_HTINST);
    80000fa2:	64a02b73          	csrr	s6,htinst
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    80000fa6:	ff848713          	addi	a4,s1,-8
    80000faa:	02e7ef63          	bltu	a5,a4,80000fe8 <hshandler+0x7a>
    DEBUG("spv = 0x%lx", (CSRR(CSR_HSTATUS) >> 7) & 0x1);
    DEBUG("spvp = 0x%lx", (CSRR(CSR_HSTATUS) >> 8) & 0x1);
    DEBUG("gva = 0x%lx", (CSRR(CSR_HSTATUS) >> HSTATUS_GVA_OFF) & 0x1);


    if(is_ecall(cause) && ecall_args[0] == ECALL_GOTO_PRIV){ 
    80000fae:	00048417          	auipc	s0,0x48
    80000fb2:	05240413          	addi	s0,s0,82 # 80049000 <ecall_args>
    80000fb6:	6018                	ld	a4,0(s0)
    80000fb8:	4785                	li	a5,1
    80000fba:	14f70063          	beq	a4,a5,800010fa <hshandler+0x18c>
        goto_priv(ecall_args[1]); 
    } else if(is_ecall(cause)) {
        ERROR("unknown ecall"); 
    80000fbe:	00027517          	auipc	a0,0x27
    80000fc2:	06250513          	addi	a0,a0,98 # 80028020 <__func__.0+0x5c0>
    80000fc6:	531240ef          	jal	80025cf6 <printf>
    80000fca:	10c00613          	li	a2,268
    } else if(!excpt.testing){
        ERROR("untested exception!");
    80000fce:	00025597          	auipc	a1,0x25
    80000fd2:	1fa58593          	addi	a1,a1,506 # 800261c8 <__func__.2>
    80000fd6:	00027517          	auipc	a0,0x27
    80000fda:	ef250513          	addi	a0,a0,-270 # 80027ec8 <__func__.0+0x468>
    80000fde:	519240ef          	jal	80025cf6 <printf>
    80000fe2:	4501                	li	a0,0
    80000fe4:	1d1240ef          	jal	800259b4 <exit>
    } else if(!excpt.testing){
    80000fe8:	00048797          	auipc	a5,0x48
    80000fec:	0287c783          	lbu	a5,40(a5) # 80049010 <excpt>
    80000ff0:	cfe5                	beqz	a5,800010e8 <hshandler+0x17a>
    }
    
    if(cause & (1ULL << 63)){
    80000ff2:	0004d963          	bgez	s1,80001004 <hshandler+0x96>
        CSRC(sip, 1ULL << (cause &  ~(1ULL << 63)));
    80000ff6:	4785                	li	a5,1
    80000ff8:	009797b3          	sll	a5,a5,s1
    80000ffc:	1447b073          	csrc	sip,a5
        //CSRC(CSR_HVIP, 1ULL << (cause &  ~(1ULL << 63)));
        CSRC(CSR_HIP, 1ULL << (cause &  ~(1ULL << 63)));
    80001000:	6447b073          	csrc	hip,a5
    80001004:	00048417          	auipc	s0,0x48
    80001008:	ffc40413          	addi	s0,s0,-4 # 80049000 <ecall_args>
    }

    excpt.triggered = true;
    8000100c:	4705                	li	a4,1
    excpt.priv = PRIV_HS;
    8000100e:	478d                	li	a5,3
    excpt.cause = cause;
    80001010:	ec04                	sd	s1,24(s0)
    excpt.epc = epc;
    80001012:	03243023          	sd	s2,32(s0)
    excpt.tval = tval;
    80001016:	03743423          	sd	s7,40(s0)
    excpt.tinst = htinst;
    8000101a:	03643823          	sd	s6,48(s0)
    excpt.tval2 = htval;
    8000101e:	03543c23          	sd	s5,56(s0)
    excpt.triggered = true;
    80001022:	00e408a3          	sb	a4,17(s0)
    excpt.priv = PRIV_HS;
    80001026:	c85c                	sw	a5,20(s0)
    excpt.gva = !!((CSRR(CSR_HSTATUS) >> HSTATUS_GVA_OFF) & 0x1);
    80001028:	600027f3          	csrr	a5,hstatus
    8000102c:	8399                	srli	a5,a5,0x6
    8000102e:	8ff9                	and	a5,a5,a4
    80001030:	04f40023          	sb	a5,64(s0)
    excpt.xpv = !!((CSRR(CSR_HSTATUS) >> 7) & 0x1);
    80001034:	600027f3          	csrr	a5,hstatus
    80001038:	839d                	srli	a5,a5,0x7
    8000103a:	8ff9                	and	a5,a5,a4
    8000103c:	04f400a3          	sb	a5,65(s0)
    excpt.testing = false;
    80001040:	00048797          	auipc	a5,0x48
    80001044:	fc078823          	sb	zero,-48(a5) # 80049010 <excpt>
    if(is_inst_fault(cause)){
    80001048:	47d1                	li	a5,20
    8000104a:	0097ed63          	bltu	a5,s1,80001064 <hshandler+0xf6>
    8000104e:	001017b7          	lui	a5,0x101
    80001052:	078d                	addi	a5,a5,3 # 101003 <STACK_SIZE+0x1003>
    80001054:	0097d7b3          	srl	a5,a5,s1
    80001058:	8ff9                	and	a5,a5,a4
    8000105a:	c789                	beqz	a5,80001064 <hshandler+0xf6>
        if(excpt.fault_inst != 0){ 
    8000105c:	04843a03          	ld	s4,72(s0)
    80001060:	0a0a0163          	beqz	s4,80001102 <hshandler+0x194>
            ERROR("instruction fault without return address");
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    real_priv = curr_priv;
    80001064:	00031797          	auipc	a5,0x31
    80001068:	4387a783          	lw	a5,1080(a5) # 8003249c <curr_priv>
    unsigned temp_priv = real_priv;
    8000106c:	00031517          	auipc	a0,0x31
    80001070:	42c52503          	lw	a0,1068(a0) # 80032498 <real_priv>
    excpt.fault_inst = 0;
    80001074:	00048717          	auipc	a4,0x48
    80001078:	fc073a23          	sd	zero,-44(a4) # 80049048 <excpt+0x38>
    real_priv = curr_priv;
    8000107c:	00f9a023          	sw	a5,0(s3)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001080:	478d                	li	a5,3
    80001082:	0ef50863          	beq	a0,a5,80001172 <hshandler+0x204>
    80001086:	4791                	li	a5,4
    80001088:	08f50663          	beq	a0,a5,80001114 <hshandler+0x1a6>
    8000108c:	4789                	li	a5,2
    8000108e:	04f51063          	bne	a0,a5,800010ce <hshandler+0x160>
    80001092:	100027f3          	csrr	a5,sstatus
    80001096:	00031717          	auipc	a4,0x31
    8000109a:	40672703          	lw	a4,1030(a4) # 8003249c <curr_priv>
    8000109e:	4685                	li	a3,1
    800010a0:	edf7f793          	andi	a5,a5,-289
    800010a4:	3779                	addiw	a4,a4,-2
    800010a6:	00e6e463          	bltu	a3,a4,800010ae <hshandler+0x140>
    800010aa:	1007e793          	ori	a5,a5,256
    800010ae:	10079073          	csrw	sstatus,a5
    800010b2:	0004ce63          	bltz	s1,800010ce <hshandler+0x160>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800010b6:	000a5783          	lhu	a5,0(s4)
    800010ba:	468d                	li	a3,3
    else return epc + 2;
    800010bc:	002a0713          	addi	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800010c0:	8ff5                	and	a5,a5,a3
    800010c2:	00d79463          	bne	a5,a3,800010ca <hshandler+0x15c>
    800010c6:	004a0713          	addi	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800010ca:	14171073          	csrw	sepc,a4
}
    800010ce:	60a6                	ld	ra,72(sp)
    800010d0:	6406                	ld	s0,64(sp)
    800010d2:	1502                	slli	a0,a0,0x20
    800010d4:	74e2                	ld	s1,56(sp)
    800010d6:	7942                	ld	s2,48(sp)
    800010d8:	79a2                	ld	s3,40(sp)
    800010da:	7a02                	ld	s4,32(sp)
    800010dc:	6ae2                	ld	s5,24(sp)
    800010de:	6b42                	ld	s6,16(sp)
    800010e0:	6ba2                	ld	s7,8(sp)
    800010e2:	9101                	srli	a0,a0,0x20
    800010e4:	6161                	addi	sp,sp,80
    800010e6:	8082                	ret
        ERROR("untested exception!");
    800010e8:	00027517          	auipc	a0,0x27
    800010ec:	ed050513          	addi	a0,a0,-304 # 80027fb8 <__func__.0+0x558>
    800010f0:	407240ef          	jal	80025cf6 <printf>
    800010f4:	10e00613          	li	a2,270
    800010f8:	bdd9                	j	80000fce <hshandler+0x60>
        goto_priv(ecall_args[1]); 
    800010fa:	4408                	lw	a0,8(s0)
    800010fc:	afbff0ef          	jal	80000bf6 <goto_priv>
    if(cause & (1ULL << 63)){
    80001100:	b731                	j	8000100c <hshandler+0x9e>
            ERROR("instruction fault without return address");
    80001102:	00027517          	auipc	a0,0x27
    80001106:	ede50513          	addi	a0,a0,-290 # 80027fe0 <__func__.0+0x580>
    8000110a:	3ed240ef          	jal	80025cf6 <printf>
    8000110e:	12600613          	li	a2,294
    80001112:	bd75                	j	80000fce <hshandler+0x60>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001114:	30002773          	csrr	a4,mstatus
    80001118:	fc0007b7          	lui	a5,0xfc000
    8000111c:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    8000111e:	00031697          	auipc	a3,0x31
    80001122:	37e6a683          	lw	a3,894(a3) # 8003249c <curr_priv>
    80001126:	07b6                	slli	a5,a5,0xd
    80001128:	77f78793          	addi	a5,a5,1919
    8000112c:	8ff9                	and	a5,a5,a4
    8000112e:	06a68263          	beq	a3,a0,80001192 <hshandler+0x224>
    80001132:	ffe6871b          	addiw	a4,a3,-2
    80001136:	4605                	li	a2,1
    80001138:	06e66263          	bltu	a2,a4,8000119c <hshandler+0x22e>
    8000113c:	6705                	lui	a4,0x1
    8000113e:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
    80001142:	4609                	li	a2,2
    80001144:	8fd9                	or	a5,a5,a4
    80001146:	00c69563          	bne	a3,a2,80001150 <hshandler+0x1e2>
    8000114a:	4705                	li	a4,1
    8000114c:	171e                	slli	a4,a4,0x27
    8000114e:	8fd9                	or	a5,a5,a4
    80001150:	30079073          	csrw	mstatus,a5
    80001154:	f604cde3          	bltz	s1,800010ce <hshandler+0x160>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001158:	000a5783          	lhu	a5,0(s4)
    8000115c:	468d                	li	a3,3
    else return epc + 2;
    8000115e:	002a0713          	addi	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001162:	8ff5                	and	a5,a5,a3
    80001164:	00d79463          	bne	a5,a3,8000116c <hshandler+0x1fe>
    80001168:	004a0713          	addi	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    8000116c:	34171073          	csrw	mepc,a4
    80001170:	bfb9                	j	800010ce <hshandler+0x160>
    80001172:	600026f3          	csrr	a3,hstatus
    80001176:	00031797          	auipc	a5,0x31
    8000117a:	3267a783          	lw	a5,806(a5) # 8003249c <curr_priv>
    8000117e:	0806e713          	ori	a4,a3,128
    80001182:	9bf5                	andi	a5,a5,-3
    80001184:	e781                	bnez	a5,8000118c <hshandler+0x21e>
    80001186:	60071073          	csrw	hstatus,a4
    8000118a:	b721                	j	80001092 <hshandler+0x124>
    8000118c:	f7f6f713          	andi	a4,a3,-129
    80001190:	bfdd                	j	80001186 <hshandler+0x218>
    80001192:	6709                	lui	a4,0x2
    80001194:	80070713          	addi	a4,a4,-2048 # 1800 <_test_table_size+0x17ff>
    80001198:	8fd9                	or	a5,a5,a4
    8000119a:	bf5d                	j	80001150 <hshandler+0x1e2>
    8000119c:	d6dd                	beqz	a3,8000114a <hshandler+0x1dc>
    8000119e:	bf4d                	j	80001150 <hshandler+0x1e2>

00000000800011a0 <vshandler>:

uint64_t vshandler(){
    800011a0:	7139                	addi	sp,sp,-64
    800011a2:	f04a                	sd	s2,32(sp)
    800011a4:	fc06                	sd	ra,56(sp)
    800011a6:	f822                	sd	s0,48(sp)
    800011a8:	f426                	sd	s1,40(sp)
    800011aa:	ec4e                	sd	s3,24(sp)
    800011ac:	e852                	sd	s4,16(sp)
    800011ae:	e456                	sd	s5,8(sp)

    real_priv = PRIV_VS;
    800011b0:	00031917          	auipc	s2,0x31
    800011b4:	2e890913          	addi	s2,s2,744 # 80032498 <real_priv>
    800011b8:	4709                	li	a4,2
    800011ba:	00e92023          	sw	a4,0(s2)

    uint64_t cause = CSRR(scause);
    800011be:	14202473          	csrr	s0,scause
    uint64_t epc = CSRR(sepc);
    800011c2:	141029f3          	csrr	s3,sepc
    800011c6:	84ce                	mv	s1,s3
    uint64_t tval = CSRR(stval);
    800011c8:	14302a73          	csrr	s4,stval
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    800011cc:	478d                	li	a5,3
    800011ce:	ff840693          	addi	a3,s0,-8
    800011d2:	04d7e663          	bltu	a5,a3,8000121e <vshandler+0x7e>
    VERBOSE("virtual supervisor handler (scause = 0x%llx)", cause);
    DEBUG("scause = 0x%llx", cause);
    DEBUG("sepc = 0x%lx", epc);
    DEBUG("stval = 0x%lx", tval);
    
    if(is_ecall(cause) && ecall_args[0] ==ECALL_GOTO_PRIV ){
    800011d6:	00048a97          	auipc	s5,0x48
    800011da:	e2aa8a93          	addi	s5,s5,-470 # 80049000 <ecall_args>
    800011de:	000ab703          	ld	a4,0(s5)
    800011e2:	4785                	li	a5,1
    800011e4:	1af70963          	beq	a4,a5,80001396 <vshandler+0x1f6>
        goto_priv(ecall_args[1]); 
    } else if(!excpt.testing){
    800011e8:	00048797          	auipc	a5,0x48
    800011ec:	e287c783          	lbu	a5,-472(a5) # 80049010 <excpt>
    800011f0:	1a079763          	bnez	a5,8000139e <vshandler+0x1fe>
        ERROR("untested exception!");
    800011f4:	00027517          	auipc	a0,0x27
    800011f8:	dc450513          	addi	a0,a0,-572 # 80027fb8 <__func__.0+0x558>
    800011fc:	2fb240ef          	jal	80025cf6 <printf>
    80001200:	13f00613          	li	a2,319
    excpt.epc = epc;
    excpt.tval = tval;
    excpt.testing = false;
    if(is_inst_fault(cause)){
        if(excpt.fault_inst != 0) epc = excpt.fault_inst;
        else ERROR("instruction fault without return address");
    80001204:	00025597          	auipc	a1,0x25
    80001208:	fd458593          	addi	a1,a1,-44 # 800261d8 <__func__.1>
    8000120c:	00027517          	auipc	a0,0x27
    80001210:	cbc50513          	addi	a0,a0,-836 # 80027ec8 <__func__.0+0x468>
    80001214:	2e3240ef          	jal	80025cf6 <printf>
    80001218:	4501                	li	a0,0
    8000121a:	79a240ef          	jal	800259b4 <exit>
    } else if(!excpt.testing){
    8000121e:	00048697          	auipc	a3,0x48
    80001222:	df26c683          	lbu	a3,-526(a3) # 80049010 <excpt>
    80001226:	00048797          	auipc	a5,0x48
    8000122a:	dda78793          	addi	a5,a5,-550 # 80049000 <ecall_args>
    8000122e:	d2f9                	beqz	a3,800011f4 <vshandler+0x54>
    if(cause & (1ULL << 63)){
    80001230:	0a045e63          	bgez	s0,800012ec <vshandler+0x14c>
        CSRC(sip, 1ULL << (cause &  ~(1ULL << 63)));
    80001234:	4685                	li	a3,1
    80001236:	008696b3          	sll	a3,a3,s0
    8000123a:	1446b073          	csrc	sip,a3
    excpt.testing = false;
    8000123e:	10000693          	li	a3,256
    excpt.priv = PRIV_VS;
    80001242:	cbd8                	sw	a4,20(a5)
    excpt.cause = cause;
    80001244:	ef80                	sd	s0,24(a5)
    excpt.epc = epc;
    80001246:	0337b023          	sd	s3,32(a5)
    excpt.tval = tval;
    8000124a:	0347b423          	sd	s4,40(a5)
    excpt.testing = false;
    8000124e:	00d79823          	sh	a3,16(a5)
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    real_priv = curr_priv;
    80001252:	00031797          	auipc	a5,0x31
    80001256:	24a7a783          	lw	a5,586(a5) # 8003249c <curr_priv>
    unsigned temp_priv = real_priv;
    8000125a:	00031517          	auipc	a0,0x31
    8000125e:	23e52503          	lw	a0,574(a0) # 80032498 <real_priv>
    excpt.fault_inst = 0;
    80001262:	00048717          	auipc	a4,0x48
    80001266:	de073323          	sd	zero,-538(a4) # 80049048 <excpt+0x38>
    real_priv = curr_priv;
    8000126a:	00f92023          	sw	a5,0(s2)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    8000126e:	478d                	li	a5,3
    80001270:	02f50363          	beq	a0,a5,80001296 <vshandler+0xf6>
    80001274:	4791                	li	a5,4
    80001276:	0cf50163          	beq	a0,a5,80001338 <vshandler+0x198>
    8000127a:	4789                	li	a5,2
    8000127c:	02f50b63          	beq	a0,a5,800012b2 <vshandler+0x112>
}
    80001280:	70e2                	ld	ra,56(sp)
    80001282:	7442                	ld	s0,48(sp)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001284:	1502                	slli	a0,a0,0x20
}
    80001286:	74a2                	ld	s1,40(sp)
    80001288:	7902                	ld	s2,32(sp)
    8000128a:	69e2                	ld	s3,24(sp)
    8000128c:	6a42                	ld	s4,16(sp)
    8000128e:	6aa2                	ld	s5,8(sp)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001290:	9101                	srli	a0,a0,0x20
}
    80001292:	6121                	addi	sp,sp,64
    80001294:	8082                	ret
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001296:	600026f3          	csrr	a3,hstatus
    8000129a:	00031797          	auipc	a5,0x31
    8000129e:	2027a783          	lw	a5,514(a5) # 8003249c <curr_priv>
    800012a2:	0806e713          	ori	a4,a3,128
    800012a6:	9bf5                	andi	a5,a5,-3
    800012a8:	c399                	beqz	a5,800012ae <vshandler+0x10e>
    800012aa:	f7f6f713          	andi	a4,a3,-129
    800012ae:	60071073          	csrw	hstatus,a4
    800012b2:	100027f3          	csrr	a5,sstatus
    800012b6:	00031717          	auipc	a4,0x31
    800012ba:	1e672703          	lw	a4,486(a4) # 8003249c <curr_priv>
    800012be:	4685                	li	a3,1
    800012c0:	edf7f793          	andi	a5,a5,-289
    800012c4:	3779                	addiw	a4,a4,-2
    800012c6:	06e6f263          	bgeu	a3,a4,8000132a <vshandler+0x18a>
    800012ca:	10079073          	csrw	sstatus,a5
    800012ce:	fa0449e3          	bltz	s0,80001280 <vshandler+0xe0>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800012d2:	0004d783          	lhu	a5,0(s1)
    800012d6:	468d                	li	a3,3
    else return epc + 2;
    800012d8:	00248713          	addi	a4,s1,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800012dc:	8ff5                	and	a5,a5,a3
    800012de:	00d79463          	bne	a5,a3,800012e6 <vshandler+0x146>
    800012e2:	00448713          	addi	a4,s1,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800012e6:	14171073          	csrw	sepc,a4
    800012ea:	bf59                	j	80001280 <vshandler+0xe0>
    excpt.testing = false;
    800012ec:	10000693          	li	a3,256
    excpt.priv = PRIV_VS;
    800012f0:	cbd8                	sw	a4,20(a5)
    excpt.cause = cause;
    800012f2:	ef80                	sd	s0,24(a5)
    excpt.epc = epc;
    800012f4:	0337b023          	sd	s3,32(a5)
    excpt.tval = tval;
    800012f8:	0347b423          	sd	s4,40(a5)
    excpt.testing = false;
    800012fc:	00d79823          	sh	a3,16(a5)
    if(is_inst_fault(cause)){
    80001300:	4751                	li	a4,20
    80001302:	f48768e3          	bltu	a4,s0,80001252 <vshandler+0xb2>
    80001306:	00101737          	lui	a4,0x101
    8000130a:	070d                	addi	a4,a4,3 # 101003 <STACK_SIZE+0x1003>
    8000130c:	00875733          	srl	a4,a4,s0
    80001310:	8b05                	andi	a4,a4,1
    80001312:	d321                	beqz	a4,80001252 <vshandler+0xb2>
        if(excpt.fault_inst != 0) epc = excpt.fault_inst;
    80001314:	67a4                	ld	s1,72(a5)
    80001316:	fc95                	bnez	s1,80001252 <vshandler+0xb2>
        else ERROR("instruction fault without return address");
    80001318:	00027517          	auipc	a0,0x27
    8000131c:	cc850513          	addi	a0,a0,-824 # 80027fe0 <__func__.0+0x580>
    80001320:	1d7240ef          	jal	80025cf6 <printf>
    80001324:	14e00613          	li	a2,334
    80001328:	bdf1                	j	80001204 <vshandler+0x64>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    8000132a:	1007e793          	ori	a5,a5,256
    8000132e:	10079073          	csrw	sstatus,a5
    80001332:	fa0450e3          	bgez	s0,800012d2 <vshandler+0x132>
    80001336:	b7a9                	j	80001280 <vshandler+0xe0>
    80001338:	30002773          	csrr	a4,mstatus
    8000133c:	fc0007b7          	lui	a5,0xfc000
    80001340:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    80001342:	00031697          	auipc	a3,0x31
    80001346:	15a6a683          	lw	a3,346(a3) # 8003249c <curr_priv>
    8000134a:	07b6                	slli	a5,a5,0xd
    8000134c:	77f78793          	addi	a5,a5,1919
    80001350:	8ff9                	and	a5,a5,a4
    80001352:	06a68463          	beq	a3,a0,800013ba <vshandler+0x21a>
    80001356:	ffe6871b          	addiw	a4,a3,-2
    8000135a:	4605                	li	a2,1
    8000135c:	06e66463          	bltu	a2,a4,800013c4 <vshandler+0x224>
    80001360:	6705                	lui	a4,0x1
    80001362:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
    80001366:	4609                	li	a2,2
    80001368:	8fd9                	or	a5,a5,a4
    8000136a:	00c69563          	bne	a3,a2,80001374 <vshandler+0x1d4>
    8000136e:	4705                	li	a4,1
    80001370:	171e                	slli	a4,a4,0x27
    80001372:	8fd9                	or	a5,a5,a4
    80001374:	30079073          	csrw	mstatus,a5
    80001378:	f00444e3          	bltz	s0,80001280 <vshandler+0xe0>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    8000137c:	0004d783          	lhu	a5,0(s1)
    80001380:	468d                	li	a3,3
    else return epc + 2;
    80001382:	00248713          	addi	a4,s1,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001386:	8ff5                	and	a5,a5,a3
    80001388:	00d79463          	bne	a5,a3,80001390 <vshandler+0x1f0>
    8000138c:	00448713          	addi	a4,s1,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001390:	34171073          	csrw	mepc,a4
    80001394:	b5f5                	j	80001280 <vshandler+0xe0>
        goto_priv(ecall_args[1]); 
    80001396:	008aa503          	lw	a0,8(s5)
    8000139a:	85dff0ef          	jal	80000bf6 <goto_priv>
    excpt.priv = PRIV_VS;
    8000139e:	4709                	li	a4,2
    excpt.testing = false;
    800013a0:	10000793          	li	a5,256
    excpt.cause = cause;
    800013a4:	008abc23          	sd	s0,24(s5)
    excpt.epc = epc;
    800013a8:	033ab023          	sd	s3,32(s5)
    excpt.tval = tval;
    800013ac:	034ab423          	sd	s4,40(s5)
    excpt.priv = PRIV_VS;
    800013b0:	00eaaa23          	sw	a4,20(s5)
    excpt.testing = false;
    800013b4:	00fa9823          	sh	a5,16(s5)
    if(is_inst_fault(cause)){
    800013b8:	bd69                	j	80001252 <vshandler+0xb2>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800013ba:	6709                	lui	a4,0x2
    800013bc:	80070713          	addi	a4,a4,-2048 # 1800 <_test_table_size+0x17ff>
    800013c0:	8fd9                	or	a5,a5,a4
    800013c2:	bf4d                	j	80001374 <vshandler+0x1d4>
    800013c4:	d6cd                	beqz	a3,8000136e <vshandler+0x1ce>
    800013c6:	b77d                	j	80001374 <vshandler+0x1d4>

00000000800013c8 <expand_compressed_instruction>:

uint32_t expand_compressed_instruction(uint16_t ins) {
    800013c8:	1141                	addi	sp,sp,-16
    800013ca:	e406                	sd	ra,8(sp)

    if(!INS_COMPRESSED(ins)) {
    800013cc:	00357713          	andi	a4,a0,3
    800013d0:	478d                	li	a5,3
    800013d2:	04f70763          	beq	a4,a5,80001420 <expand_compressed_instruction+0x58>
        ERROR("trying to expand non-compressed instruction");
    }

    if(INS_MATCH_C_LW(ins) || INS_MATCH_C_LD(ins) || INS_MATCH_C_SW(ins) || INS_MATCH_C_SD(ins)){
    800013d6:	77f9                	lui	a5,0xffffe
    800013d8:	078d                	addi	a5,a5,3 # ffffffffffffe003 <__stack_top+0xffffffff7fcff003>
    800013da:	8fe9                	and	a5,a5,a0
    800013dc:	6711                	lui	a4,0x4
    800013de:	85aa                	mv	a1,a0
    800013e0:	08e78963          	beq	a5,a4,80001472 <expand_compressed_instruction+0xaa>
    800013e4:	6719                	lui	a4,0x6
    800013e6:	04e78663          	beq	a5,a4,80001432 <expand_compressed_instruction+0x6a>
    800013ea:	6731                	lui	a4,0xc
    800013ec:	0ae78b63          	beq	a5,a4,800014a2 <expand_compressed_instruction+0xda>
    800013f0:	6739                	lui	a4,0xe
    800013f2:	0ae78363          	beq	a5,a4,80001498 <expand_compressed_instruction+0xd0>
            ((ins & INS_C_IMM0_MASK)  >> INS_C_IMM0_OFF) & 0x1 << 6 |
            ((ins & INS_C_IMM0_MASK)  >> INS_C_IMM0_OFF) >> 1 & 0x1 << 2;
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    } else {
        ERROR("expansion not implemented for target compressed instruction: 0x%x", ins);
    800013f6:	00027517          	auipc	a0,0x27
    800013fa:	c8a50513          	addi	a0,a0,-886 # 80028080 <__func__.0+0x620>
    800013fe:	0f9240ef          	jal	80025cf6 <printf>
    80001402:	16d00613          	li	a2,365
    80001406:	00025597          	auipc	a1,0x25
    8000140a:	de258593          	addi	a1,a1,-542 # 800261e8 <__func__.0>
    8000140e:	00027517          	auipc	a0,0x27
    80001412:	aba50513          	addi	a0,a0,-1350 # 80027ec8 <__func__.0+0x468>
    80001416:	0e1240ef          	jal	80025cf6 <printf>
    8000141a:	4501                	li	a0,0
    8000141c:	598240ef          	jal	800259b4 <exit>
        ERROR("trying to expand non-compressed instruction");
    80001420:	00027517          	auipc	a0,0x27
    80001424:	c2050513          	addi	a0,a0,-992 # 80028040 <__func__.0+0x5e0>
    80001428:	0cf240ef          	jal	80025cf6 <printf>
    8000142c:	15a00613          	li	a2,346
    80001430:	bfd9                	j	80001406 <expand_compressed_instruction+0x3e>
            (is_load ? MATCH_LD : MATCH_SD):
    80001432:	668d                	lui	a3,0x3
    80001434:	068d                	addi	a3,a3,3 # 3003 <_test_table_size+0x3002>
        bool is_load = INS_MATCH_C_LW(ins) || INS_MATCH_C_LD(ins); 
    80001436:	4505                	li	a0,1
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    80001438:	0025d793          	srli	a5,a1,0x2
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    8000143c:	0075d713          	srli	a4,a1,0x7
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    80001440:	8b9d                	andi	a5,a5,7
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    80001442:	8b1d                	andi	a4,a4,7
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    80001444:	27a1                	addiw	a5,a5,8
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    80001446:	2721                	addiw	a4,a4,8 # e008 <_test_table_size+0xe007>
            ((ins & INS_C_IMM0_MASK)  >> INS_C_IMM0_OFF) << 6 :
    80001448:	0055d613          	srli	a2,a1,0x5
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    8000144c:	0606                	slli	a2,a2,0x1
    8000144e:	0196161b          	slliw	a2,a2,0x19
    80001452:	0e0005b7          	lui	a1,0xe000
    80001456:	8e6d                	and	a2,a2,a1
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
    80001458:	45d1                	li	a1,20
    8000145a:	c111                	beqz	a0,8000145e <expand_compressed_instruction+0x96>
    8000145c:	459d                	li	a1,7
    }

}
    8000145e:	60a2                	ld	ra,8(sp)
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    80001460:	8ed1                	or	a3,a3,a2
    80001462:	00f7171b          	slliw	a4,a4,0xf
    80001466:	8f55                	or	a4,a4,a3
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
    80001468:	00b7953b          	sllw	a0,a5,a1
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    8000146c:	8d59                	or	a0,a0,a4
}
    8000146e:	0141                	addi	sp,sp,16
    80001470:	8082                	ret
            (is_load ? MATCH_LD : MATCH_SD):
    80001472:	6689                	lui	a3,0x2
    80001474:	068d                	addi	a3,a3,3 # 2003 <_test_table_size+0x2002>
    80001476:	4505                	li	a0,1
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    80001478:	0025d793          	srli	a5,a1,0x2
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    8000147c:	0075d713          	srli	a4,a1,0x7
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    80001480:	00a5d813          	srli	a6,a1,0xa
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    80001484:	8b9d                	andi	a5,a5,7
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    80001486:	8b1d                	andi	a4,a4,7
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    80001488:	00787813          	andi	a6,a6,7
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    8000148c:	27a1                	addiw	a5,a5,8
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    8000148e:	2721                	addiw	a4,a4,8
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    80001490:	4601                	li	a2,0
    80001492:	fc0803e3          	beqz	a6,80001458 <expand_compressed_instruction+0x90>
    80001496:	bf4d                	j	80001448 <expand_compressed_instruction+0x80>
            (is_load ? MATCH_LD : MATCH_SD):
    80001498:	668d                	lui	a3,0x3
    8000149a:	02368693          	addi	a3,a3,35 # 3023 <_test_table_size+0x3022>
    8000149e:	4501                	li	a0,0
    800014a0:	bf61                	j	80001438 <expand_compressed_instruction+0x70>
    800014a2:	6689                	lui	a3,0x2
    800014a4:	02368693          	addi	a3,a3,35 # 2023 <_test_table_size+0x2022>
    800014a8:	4501                	li	a0,0
    800014aa:	b7f9                	j	80001478 <expand_compressed_instruction+0xb0>

00000000800014ac <reset_state>:

extern void hshandler_entry();
extern void mhandler_entry();
extern void vshandler_entry();
    
void reset_state(){
    800014ac:	1141                	addi	sp,sp,-16

    goto_priv(PRIV_M);
    800014ae:	4511                	li	a0,4
void reset_state(){
    800014b0:	e406                	sd	ra,8(sp)
    goto_priv(PRIV_M);
    800014b2:	f44ff0ef          	jal	80000bf6 <goto_priv>
    CSRW(mstatus, 0ULL);
    800014b6:	30005073          	csrwi	mstatus,0
    //CSRW(mtvec, 0ULL);
    CSRW(medeleg, 0ULL);
    800014ba:	30205073          	csrwi	medeleg,0
    CSRW(mideleg, 0ULL);
    800014be:	30305073          	csrwi	mideleg,0
    CSRW(mip, 0ULL);
    800014c2:	34405073          	csrwi	mip,0
    CSRW(mie, 0ULL);
    800014c6:	30405073          	csrwi	mie,0
    //CSRW(mtime, 0ULL); 
    //CSRW(mtimecmp, 0ULL); 
    CSRW(mscratch, 0ULL);
    800014ca:	34005073          	csrwi	mscratch,0
    CSRW(mepc, 0ULL);
    800014ce:	34105073          	csrwi	mepc,0
    CSRW(mtval, 0ULL);
    800014d2:	34305073          	csrwi	mtval,0
    CSRW(CSR_MTINST, 0ULL);
    800014d6:	34a05073          	csrwi	0x34a,0
    CSRW(CSR_MTVAL2, 0ULL);
    800014da:	34b05073          	csrwi	0x34b,0
    //what about pmp register?
    CSRW(sstatus, 0ULL);
    800014de:	10005073          	csrwi	sstatus,0
    //CSRW(stvec, 0ULL);
    CSRW(sip, 0ULL);
    800014e2:	14405073          	csrwi	sip,0
    CSRW(sie, 0ULL);
    800014e6:	10405073          	csrwi	sie,0
    CSRW(sscratch, 0ULL);
    800014ea:	14005073          	csrwi	sscratch,0
    CSRW(sepc, 0ULL);
    800014ee:	14105073          	csrwi	sepc,0
    CSRW(scause, 0ULL);
    800014f2:	14205073          	csrwi	scause,0
    CSRW(stval, 0ULL);
    800014f6:	14305073          	csrwi	stval,0
    CSRW(satp, 0ULL);
    800014fa:	18005073          	csrwi	satp,0
    CSRW(CSR_HSTATUS, 0ULL);
    800014fe:	60005073          	csrwi	hstatus,0
    CSRW(CSR_HIDELEG, 0ULL);
    80001502:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG, 0ULL);
    80001506:	60205073          	csrwi	hedeleg,0
    CSRW(CSR_HVIP, 0ULL);
    8000150a:	64505073          	csrwi	hvip,0
    CSRW(CSR_HIP, 0ULL);
    8000150e:	64405073          	csrwi	hip,0
    CSRW(CSR_HIE, 0ULL);  
    80001512:	60405073          	csrwi	hie,0
    CSRW(CSR_HTVAL, 0ULL);
    80001516:	64305073          	csrwi	htval,0
    CSRW(CSR_HTINST, 0ULL);
    8000151a:	64a05073          	csrwi	htinst,0
    CSRW(CSR_HGATP, 0ULL);
    8000151e:	68005073          	csrwi	hgatp,0
    CSRW(CSR_VSSTATUS, 0ULL);
    80001522:	20005073          	csrwi	vsstatus,0
    CSRW(CSR_VSIP, 0ULL);
    80001526:	24405073          	csrwi	vsip,0
    CSRW(CSR_VSIE, 0ULL);
    8000152a:	20405073          	csrwi	vsie,0
    //CSRW(CSR_VSTVEC, 0ULL);
    CSRW(CSR_VSSCRATCH, 0ULL);
    8000152e:	24005073          	csrwi	vsscratch,0
    CSRW(CSR_VSEPC, 0ULL);
    80001532:	24105073          	csrwi	vsepc,0
    CSRW(CSR_VSCAUSE, 0ULL);
    80001536:	24205073          	csrwi	vscause,0
    CSRW(CSR_VSTVAL, 0ULL);
    8000153a:	24305073          	csrwi	vstval,0
    CSRW(CSR_VSATP, 0ULL);  
    8000153e:	28005073          	csrwi	vsatp,0

    CSRW(mtvec, mhandler_entry);
    80001542:	00025797          	auipc	a5,0x25
    80001546:	a0278793          	addi	a5,a5,-1534 # 80025f44 <mhandler_entry>
    8000154a:	30579073          	csrw	mtvec,a5
    CSRS(medeleg, (1ULL << 8) | (1ULL << 10));
    8000154e:	50000793          	li	a5,1280
    80001552:	3027a073          	csrs	medeleg,a5
    // full access to physical memory to other modes
    CSRW(pmpcfg0, 0xf);
    80001556:	3a07d073          	csrwi	pmpcfg0,15
    CSRW(pmpaddr0, (uint64_t) -1);
    8000155a:	57fd                	li	a5,-1
    8000155c:	3b079073          	csrw	pmpaddr0,a5

    CSRW(stvec, hshandler_entry);
    80001560:	00025797          	auipc	a5,0x25
    80001564:	a2c78793          	addi	a5,a5,-1492 # 80025f8c <hshandler_entry>
    80001568:	10579073          	csrw	stvec,a5
    CSRS(CSR_HEDELEG, (1ULL << 8));
    8000156c:	10000793          	li	a5,256
    80001570:	6027a073          	csrs	hedeleg,a5

    CSRW(CSR_VSTVEC, vshandler_entry);
    80001574:	00025797          	auipc	a5,0x25
    80001578:	a6078793          	addi	a5,a5,-1440 # 80025fd4 <vshandler_entry>
    8000157c:	20579073          	csrw	vstvec,a5
// }



static inline void sfence(){
    asm volatile ("sfence.vma \n\t");
    80001580:	12000073          	sfence.vma
        ".insn r 0x73, 0x0, 0x31, x0, x0, x0\n\t"
        ::: "memory");
}

static inline void hfence_vvma() {
    asm volatile(
    80001584:	22000073          	.insn	4, 0x22000073
    asm volatile(
    80001588:	62000073          	.insn	4, 0x62000073

    sfence();
    hfence();
}
    8000158c:	60a2                	ld	ra,8(sp)
    8000158e:	0141                	addi	sp,sp,16
    80001590:	8082                	ret

0000000080001592 <random_m_instruction>:
#include <rvh_test.h>
#include <instructions.h> 
#include <csrs.h>

void random_m_instruction(){
    int rand1=CSRR(time);
    80001592:	c01027f3          	rdtime	a5
    int rand2=CSRR(cycle);
    80001596:	c00026f3          	rdcycle	a3
    int num0=rand1+rand2;
    int num=num0%10;
    8000159a:	66666737          	lui	a4,0x66666
    int num0=rand1+rand2;
    8000159e:	9fb5                	addw	a5,a5,a3
    int num=num0%10;
    800015a0:	66770713          	addi	a4,a4,1639 # 66666667 <STACK_SIZE+0x66566667>
    800015a4:	02e78733          	mul	a4,a5,a4
    800015a8:	41f7d69b          	sraiw	a3,a5,0x1f

    switch (num)
    800015ac:	4625                	li	a2,9
    int num=num0%10;
    800015ae:	9709                	srai	a4,a4,0x22
    800015b0:	9f15                	subw	a4,a4,a3
    800015b2:	0027169b          	slliw	a3,a4,0x2
    800015b6:	9f35                	addw	a4,a4,a3
    800015b8:	0017171b          	slliw	a4,a4,0x1
    800015bc:	9f99                	subw	a5,a5,a4
    switch (num)
    800015be:	08f66a63          	bltu	a2,a5,80001652 <random_m_instruction+0xc0>
    800015c2:	02079713          	slli	a4,a5,0x20
    800015c6:	01e75793          	srli	a5,a4,0x1e
    800015ca:	00025717          	auipc	a4,0x25
    800015ce:	c3e70713          	addi	a4,a4,-962 # 80026208 <__func__.0+0x20>
    800015d2:	97ba                	add	a5,a5,a4
    800015d4:	439c                	lw	a5,0(a5)
    800015d6:	97ba                	add	a5,a5,a4
    800015d8:	8782                	jr	a5
        break;
    case 7:
        printf("这是7号指令\n");
        break;
    case 8:
        printf("这是8号指令\n");
    800015da:	00027517          	auipc	a0,0x27
    800015de:	bbe50513          	addi	a0,a0,-1090 # 80028198 <__func__.0+0x738>
    800015e2:	4402406f          	j	80025a22 <puts>
        break;
    case 9:
        printf("这是9号指令\n");
    800015e6:	00027517          	auipc	a0,0x27
    800015ea:	bca50513          	addi	a0,a0,-1078 # 800281b0 <__func__.0+0x750>
    800015ee:	4342406f          	j	80025a22 <puts>
        printf("这是0号指令\n");
    800015f2:	00027517          	auipc	a0,0x27
    800015f6:	ae650513          	addi	a0,a0,-1306 # 800280d8 <__func__.0+0x678>
    800015fa:	4282406f          	j	80025a22 <puts>
        printf("这是1号指令\n");
    800015fe:	00027517          	auipc	a0,0x27
    80001602:	af250513          	addi	a0,a0,-1294 # 800280f0 <__func__.0+0x690>
    80001606:	41c2406f          	j	80025a22 <puts>
        printf("这是2号指令\n");
    8000160a:	00027517          	auipc	a0,0x27
    8000160e:	afe50513          	addi	a0,a0,-1282 # 80028108 <__func__.0+0x6a8>
    80001612:	4102406f          	j	80025a22 <puts>
        printf("这是3号指令\n");
    80001616:	00027517          	auipc	a0,0x27
    8000161a:	b0a50513          	addi	a0,a0,-1270 # 80028120 <__func__.0+0x6c0>
    8000161e:	4042406f          	j	80025a22 <puts>
        printf("这是4号指令\n");
    80001622:	00027517          	auipc	a0,0x27
    80001626:	b1650513          	addi	a0,a0,-1258 # 80028138 <__func__.0+0x6d8>
    8000162a:	3f82406f          	j	80025a22 <puts>
        printf("这是5号指令\n");
    8000162e:	00027517          	auipc	a0,0x27
    80001632:	b2250513          	addi	a0,a0,-1246 # 80028150 <__func__.0+0x6f0>
    80001636:	3ec2406f          	j	80025a22 <puts>
        printf("这是6号指令\n");
    8000163a:	00027517          	auipc	a0,0x27
    8000163e:	b2e50513          	addi	a0,a0,-1234 # 80028168 <__func__.0+0x708>
    80001642:	3e02406f          	j	80025a22 <puts>
        printf("这是7号指令\n");
    80001646:	00027517          	auipc	a0,0x27
    8000164a:	b3a50513          	addi	a0,a0,-1222 # 80028180 <__func__.0+0x720>
    8000164e:	3d42406f          	j	80025a22 <puts>
    
    
    default:
        break;
    }
    80001652:	8082                	ret

0000000080001654 <check_xip_regs_1>:
#include <rvh_test.h>

bool check_xip_regs_1(){
    80001654:	7179                	addi	sp,sp,-48

    TEST_START();
    80001656:	00025597          	auipc	a1,0x25
    8000165a:	bda58593          	addi	a1,a1,-1062 # 80026230 <__func__.3>
    8000165e:	00026517          	auipc	a0,0x26
    80001662:	6e250513          	addi	a0,a0,1762 # 80027d40 <__func__.0+0x2e0>
bool check_xip_regs_1(){
    80001666:	f406                	sd	ra,40(sp)
    80001668:	f022                	sd	s0,32(sp)
    8000166a:	ec26                	sd	s1,24(sp)
    8000166c:	e84a                	sd	s2,16(sp)
    8000166e:	e44e                	sd	s3,8(sp)
    80001670:	e052                	sd	s4,0(sp)
    TEST_START();
    80001672:	684240ef          	jal	80025cf6 <printf>
    80001676:	4529                	li	a0,10
    80001678:	488230ef          	jal	80024b00 <putchar>

    CSRW(mideleg, 0);
    8000167c:	30305073          	csrwi	mideleg,0

    int64_t mtime_mask = ~((int64_t)0x80);

    CSRW(mideleg, (uint64_t)-1);
    80001680:	547d                	li	s0,-1
    80001682:	30341073          	csrw	mideleg,s0
    VERBOSE("setting mideleg and hideleg\n");
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    80001686:	60341073          	csrw	hideleg,s0
    check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x2);
    8000168a:	244029f3          	csrr	s3,vsip
    8000168e:	24441073          	csrw	vsip,s0
    80001692:	244024f3          	csrr	s1,vsip
    80001696:	00027617          	auipc	a2,0x27
    8000169a:	b3260613          	addi	a2,a2,-1230 # 800281c8 <__func__.0+0x768>
    8000169e:	08200593          	li	a1,130
    800016a2:	00026517          	auipc	a0,0x26
    800016a6:	6b650513          	addi	a0,a0,1718 # 80027d58 <__func__.0+0x2f8>
    800016aa:	4909                	li	s2,2
    800016ac:	64a240ef          	jal	80025cf6 <printf>
    800016b0:	11248f63          	beq	s1,s2,800017ce <check_xip_regs_1+0x17a>
    800016b4:	00026597          	auipc	a1,0x26
    800016b8:	67c58593          	addi	a1,a1,1660 # 80027d30 <__func__.0+0x2d0>
    800016bc:	00026517          	auipc	a0,0x26
    800016c0:	6b450513          	addi	a0,a0,1716 # 80027d70 <__func__.0+0x310>
    800016c4:	632240ef          	jal	80025cf6 <printf>
    800016c8:	00026517          	auipc	a0,0x26
    800016cc:	6b050513          	addi	a0,a0,1712 # 80027d78 <__func__.0+0x318>
    800016d0:	626240ef          	jal	80025cf6 <printf>
    800016d4:	86ca                	mv	a3,s2
    800016d6:	8626                	mv	a2,s1
    800016d8:	85a2                	mv	a1,s0
    800016da:	00026517          	auipc	a0,0x26
    800016de:	6a650513          	addi	a0,a0,1702 # 80027d80 <__func__.0+0x320>
    800016e2:	614240ef          	jal	80025cf6 <printf>
    800016e6:	02900513          	li	a0,41
    800016ea:	416230ef          	jal	80024b00 <putchar>
    800016ee:	4529                	li	a0,10
    800016f0:	410230ef          	jal	80024b00 <putchar>
    800016f4:	4a01                	li	s4,0
    800016f6:	24499073          	csrw	vsip,s3
    check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x2222);        //开启Shlcofideleg 扩展则为2222，否则为222
    800016fa:	204029f3          	csrr	s3,vsie
    800016fe:	54fd                	li	s1,-1
    80001700:	20449073          	csrw	vsie,s1
    80001704:	20402973          	csrr	s2,vsie
    80001708:	6409                	lui	s0,0x2
    8000170a:	00027617          	auipc	a2,0x27
    8000170e:	ac660613          	addi	a2,a2,-1338 # 800281d0 <__func__.0+0x770>
    80001712:	08200593          	li	a1,130
    80001716:	00026517          	auipc	a0,0x26
    8000171a:	64250513          	addi	a0,a0,1602 # 80027d58 <__func__.0+0x2f8>
    8000171e:	22240413          	addi	s0,s0,546 # 2222 <_test_table_size+0x2221>
    80001722:	5d4240ef          	jal	80025cf6 <printf>
    80001726:	06890d63          	beq	s2,s0,800017a0 <check_xip_regs_1+0x14c>
    8000172a:	00026597          	auipc	a1,0x26
    8000172e:	60658593          	addi	a1,a1,1542 # 80027d30 <__func__.0+0x2d0>
    80001732:	00026517          	auipc	a0,0x26
    80001736:	63e50513          	addi	a0,a0,1598 # 80027d70 <__func__.0+0x310>
    8000173a:	5bc240ef          	jal	80025cf6 <printf>
    8000173e:	00026517          	auipc	a0,0x26
    80001742:	63a50513          	addi	a0,a0,1594 # 80027d78 <__func__.0+0x318>
    80001746:	5b0240ef          	jal	80025cf6 <printf>
    8000174a:	86a2                	mv	a3,s0
    8000174c:	864a                	mv	a2,s2
    8000174e:	85a6                	mv	a1,s1
    80001750:	00026517          	auipc	a0,0x26
    80001754:	63050513          	addi	a0,a0,1584 # 80027d80 <__func__.0+0x320>
    80001758:	59e240ef          	jal	80025cf6 <printf>
    8000175c:	02900513          	li	a0,41
    80001760:	3a0230ef          	jal	80024b00 <putchar>
    80001764:	4529                	li	a0,10
    80001766:	39a230ef          	jal	80024b00 <putchar>
    8000176a:	20499073          	csrw	vsie,s3
    8000176e:	4401                	li	s0,0
    
    TEST_END();
    80001770:	00026597          	auipc	a1,0x26
    80001774:	5c058593          	addi	a1,a1,1472 # 80027d30 <__func__.0+0x2d0>
    80001778:	00026517          	auipc	a0,0x26
    8000177c:	66050513          	addi	a0,a0,1632 # 80027dd8 <__func__.0+0x378>
    80001780:	576240ef          	jal	80025cf6 <printf>
    80001784:	4511                	li	a0,4
    80001786:	c70ff0ef          	jal	80000bf6 <goto_priv>
    8000178a:	d23ff0ef          	jal	800014ac <reset_state>
}
    8000178e:	70a2                	ld	ra,40(sp)
    80001790:	8522                	mv	a0,s0
    80001792:	7402                	ld	s0,32(sp)
    80001794:	64e2                	ld	s1,24(sp)
    80001796:	6942                	ld	s2,16(sp)
    80001798:	69a2                	ld	s3,8(sp)
    8000179a:	6a02                	ld	s4,0(sp)
    8000179c:	6145                	addi	sp,sp,48
    8000179e:	8082                	ret
    check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x2222);        //开启Shlcofideleg 扩展则为2222，否则为222
    800017a0:	00026597          	auipc	a1,0x26
    800017a4:	58058593          	addi	a1,a1,1408 # 80027d20 <__func__.0+0x2c0>
    800017a8:	00026517          	auipc	a0,0x26
    800017ac:	5c850513          	addi	a0,a0,1480 # 80027d70 <__func__.0+0x310>
    800017b0:	546240ef          	jal	80025cf6 <printf>
    800017b4:	4529                	li	a0,10
    800017b6:	34a230ef          	jal	80024b00 <putchar>
    800017ba:	fa0a08e3          	beqz	s4,8000176a <check_xip_regs_1+0x116>
    800017be:	20499073          	csrw	vsie,s3
    800017c2:	4405                	li	s0,1
    TEST_END();
    800017c4:	00026597          	auipc	a1,0x26
    800017c8:	55c58593          	addi	a1,a1,1372 # 80027d20 <__func__.0+0x2c0>
    800017cc:	b775                	j	80001778 <check_xip_regs_1+0x124>
    check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x2);
    800017ce:	00026597          	auipc	a1,0x26
    800017d2:	55258593          	addi	a1,a1,1362 # 80027d20 <__func__.0+0x2c0>
    800017d6:	00026517          	auipc	a0,0x26
    800017da:	59a50513          	addi	a0,a0,1434 # 80027d70 <__func__.0+0x310>
    800017de:	518240ef          	jal	80025cf6 <printf>
    800017e2:	4529                	li	a0,10
    800017e4:	31c230ef          	jal	80024b00 <putchar>
    800017e8:	4a05                	li	s4,1
    800017ea:	b731                	j	800016f6 <check_xip_regs_1+0xa2>

00000000800017ec <check_xip_regs_2>:

bool check_xip_regs_2(){
    800017ec:	1101                	addi	sp,sp,-32

    TEST_START();
    800017ee:	00025597          	auipc	a1,0x25
    800017f2:	a5a58593          	addi	a1,a1,-1446 # 80026248 <__func__.2>
    800017f6:	00026517          	auipc	a0,0x26
    800017fa:	54a50513          	addi	a0,a0,1354 # 80027d40 <__func__.0+0x2e0>
bool check_xip_regs_2(){
    800017fe:	ec06                	sd	ra,24(sp)
    80001800:	e822                	sd	s0,16(sp)
    80001802:	e426                	sd	s1,8(sp)
    80001804:	e04a                	sd	s2,0(sp)
    TEST_START();
    80001806:	4f0240ef          	jal	80025cf6 <printf>
    8000180a:	4529                	li	a0,10
    8000180c:	2f4230ef          	jal	80024b00 <putchar>

    CSRC(CSR_MENVCFG,1ULL<<63);                   //若menvcfg.stce=0,则mip的stip可写，若为1则不可写
    80001810:	57fd                	li	a5,-1
    80001812:	03f79713          	slli	a4,a5,0x3f
    80001816:	30a73073          	csrc	0x30a,a4

    CSRW(mideleg, (uint64_t)-1);
    8000181a:	30379073          	csrw	mideleg,a5
    VERBOSE("setting mideleg and hideleg\n");
    
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    8000181e:	60379073          	csrw	hideleg,a5

    VERBOSE("setting all in mip\n");
    CSRW(mip, (uint64_t)-1);
    80001822:	34479073          	csrw	mip,a5
    check_csr_rd("hip", CSR_HIP, 0x4);
    80001826:	64402473          	csrr	s0,hip
    8000182a:	00027617          	auipc	a2,0x27
    8000182e:	9ae60613          	addi	a2,a2,-1618 # 800281d8 <__func__.0+0x778>
    80001832:	08200593          	li	a1,130
    80001836:	00026517          	auipc	a0,0x26
    8000183a:	52250513          	addi	a0,a0,1314 # 80027d58 <__func__.0+0x2f8>
    8000183e:	4491                	li	s1,4
    80001840:	4b6240ef          	jal	80025cf6 <printf>
    80001844:	46940463          	beq	s0,s1,80001cac <check_xip_regs_2+0x4c0>
    80001848:	00026597          	auipc	a1,0x26
    8000184c:	4e858593          	addi	a1,a1,1256 # 80027d30 <__func__.0+0x2d0>
    80001850:	00026517          	auipc	a0,0x26
    80001854:	52050513          	addi	a0,a0,1312 # 80027d70 <__func__.0+0x310>
    80001858:	49e240ef          	jal	80025cf6 <printf>
    8000185c:	00026517          	auipc	a0,0x26
    80001860:	51c50513          	addi	a0,a0,1308 # 80027d78 <__func__.0+0x318>
    80001864:	492240ef          	jal	80025cf6 <printf>
    80001868:	8622                	mv	a2,s0
    8000186a:	86a6                	mv	a3,s1
    8000186c:	02d00593          	li	a1,45
    80001870:	00027517          	auipc	a0,0x27
    80001874:	97050513          	addi	a0,a0,-1680 # 800281e0 <__func__.0+0x780>
    80001878:	47e240ef          	jal	80025cf6 <printf>
    8000187c:	02900513          	li	a0,41
    80001880:	280230ef          	jal	80024b00 <putchar>
    80001884:	4529                	li	a0,10
    80001886:	27a230ef          	jal	80024b00 <putchar>
    8000188a:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x222);    
    8000188c:	144024f3          	csrr	s1,sip
    80001890:	00027617          	auipc	a2,0x27
    80001894:	96860613          	addi	a2,a2,-1688 # 800281f8 <__func__.0+0x798>
    80001898:	08200593          	li	a1,130
    8000189c:	00026517          	auipc	a0,0x26
    800018a0:	4bc50513          	addi	a0,a0,1212 # 80027d58 <__func__.0+0x2f8>
    800018a4:	22200913          	li	s2,546
    800018a8:	44e240ef          	jal	80025cf6 <printf>
    800018ac:	3b248663          	beq	s1,s2,80001c58 <check_xip_regs_2+0x46c>
    800018b0:	00026597          	auipc	a1,0x26
    800018b4:	48058593          	addi	a1,a1,1152 # 80027d30 <__func__.0+0x2d0>
    800018b8:	00026517          	auipc	a0,0x26
    800018bc:	4b850513          	addi	a0,a0,1208 # 80027d70 <__func__.0+0x310>
    800018c0:	436240ef          	jal	80025cf6 <printf>
    800018c4:	00026517          	auipc	a0,0x26
    800018c8:	4b450513          	addi	a0,a0,1204 # 80027d78 <__func__.0+0x318>
    800018cc:	42a240ef          	jal	80025cf6 <printf>
    800018d0:	86ca                	mv	a3,s2
    800018d2:	8626                	mv	a2,s1
    800018d4:	02d00593          	li	a1,45
    800018d8:	00027517          	auipc	a0,0x27
    800018dc:	90850513          	addi	a0,a0,-1784 # 800281e0 <__func__.0+0x780>
    800018e0:	416240ef          	jal	80025cf6 <printf>
    800018e4:	02900513          	li	a0,41
    800018e8:	218230ef          	jal	80024b00 <putchar>
    800018ec:	4529                	li	a0,10
    800018ee:	212230ef          	jal	80024b00 <putchar>
    800018f2:	4401                	li	s0,0

    // check_csr_rd_mask("mip", mip, 0x226, mtime_mask); // only test when nemu don't use difftest because spike, as ref, shut up time interrupt
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    800018f4:	244024f3          	csrr	s1,vsip
    800018f8:	00027617          	auipc	a2,0x27
    800018fc:	8d060613          	addi	a2,a2,-1840 # 800281c8 <__func__.0+0x768>
    80001900:	08200593          	li	a1,130
    80001904:	00026517          	auipc	a0,0x26
    80001908:	45450513          	addi	a0,a0,1108 # 80027d58 <__func__.0+0x2f8>
    8000190c:	4909                	li	s2,2
    8000190e:	3e8240ef          	jal	80025cf6 <printf>
    80001912:	37248f63          	beq	s1,s2,80001c90 <check_xip_regs_2+0x4a4>
    80001916:	00026597          	auipc	a1,0x26
    8000191a:	41a58593          	addi	a1,a1,1050 # 80027d30 <__func__.0+0x2d0>
    8000191e:	00026517          	auipc	a0,0x26
    80001922:	45250513          	addi	a0,a0,1106 # 80027d70 <__func__.0+0x310>
    80001926:	3d0240ef          	jal	80025cf6 <printf>
    8000192a:	00026517          	auipc	a0,0x26
    8000192e:	44e50513          	addi	a0,a0,1102 # 80027d78 <__func__.0+0x318>
    80001932:	3c4240ef          	jal	80025cf6 <printf>
    80001936:	86ca                	mv	a3,s2
    80001938:	8626                	mv	a2,s1
    8000193a:	02d00593          	li	a1,45
    8000193e:	00027517          	auipc	a0,0x27
    80001942:	8a250513          	addi	a0,a0,-1886 # 800281e0 <__func__.0+0x780>
    80001946:	3b0240ef          	jal	80025cf6 <printf>
    8000194a:	02900513          	li	a0,41
    8000194e:	1b2230ef          	jal	80024b00 <putchar>
    80001952:	4529                	li	a0,10
    80001954:	1ac230ef          	jal	80024b00 <putchar>
    80001958:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    8000195a:	4509                	li	a0,2
    8000195c:	a9aff0ef          	jal	80000bf6 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    80001960:	144024f3          	csrr	s1,sip
    80001964:	00027617          	auipc	a2,0x27
    80001968:	89c60613          	addi	a2,a2,-1892 # 80028200 <__func__.0+0x7a0>
    8000196c:	08200593          	li	a1,130
    80001970:	00026517          	auipc	a0,0x26
    80001974:	3e850513          	addi	a0,a0,1000 # 80027d58 <__func__.0+0x2f8>
    80001978:	4909                	li	s2,2
    8000197a:	37c240ef          	jal	80025cf6 <printf>
    8000197e:	2f248b63          	beq	s1,s2,80001c74 <check_xip_regs_2+0x488>
    80001982:	00026597          	auipc	a1,0x26
    80001986:	3ae58593          	addi	a1,a1,942 # 80027d30 <__func__.0+0x2d0>
    8000198a:	00026517          	auipc	a0,0x26
    8000198e:	3e650513          	addi	a0,a0,998 # 80027d70 <__func__.0+0x310>
    80001992:	364240ef          	jal	80025cf6 <printf>
    80001996:	00026517          	auipc	a0,0x26
    8000199a:	3e250513          	addi	a0,a0,994 # 80027d78 <__func__.0+0x318>
    8000199e:	358240ef          	jal	80025cf6 <printf>
    800019a2:	86ca                	mv	a3,s2
    800019a4:	8626                	mv	a2,s1
    800019a6:	02d00593          	li	a1,45
    800019aa:	00027517          	auipc	a0,0x27
    800019ae:	83650513          	addi	a0,a0,-1994 # 800281e0 <__func__.0+0x780>
    800019b2:	344240ef          	jal	80025cf6 <printf>
    800019b6:	02900513          	li	a0,41
    800019ba:	146230ef          	jal	80024b00 <putchar>
    800019be:	4529                	li	a0,10
    800019c0:	140230ef          	jal	80024b00 <putchar>
    800019c4:	4401                	li	s0,0
    goto_priv(PRIV_M);
    800019c6:	4511                	li	a0,4
    800019c8:	a2eff0ef          	jal	80000bf6 <goto_priv>

    VERBOSE("clearing all in mip\n");
    CSRW(mip, (uint64_t)0);
    800019cc:	34405073          	csrwi	mip,0
    check_csr_rd("hip", CSR_HIP, 0x0);
    800019d0:	644024f3          	csrr	s1,hip
    800019d4:	00027617          	auipc	a2,0x27
    800019d8:	80460613          	addi	a2,a2,-2044 # 800281d8 <__func__.0+0x778>
    800019dc:	08200593          	li	a1,130
    800019e0:	00026517          	auipc	a0,0x26
    800019e4:	37850513          	addi	a0,a0,888 # 80027d58 <__func__.0+0x2f8>
    800019e8:	30e240ef          	jal	80025cf6 <printf>
    800019ec:	1a048663          	beqz	s1,80001b98 <check_xip_regs_2+0x3ac>
    800019f0:	00026597          	auipc	a1,0x26
    800019f4:	34058593          	addi	a1,a1,832 # 80027d30 <__func__.0+0x2d0>
    800019f8:	00026517          	auipc	a0,0x26
    800019fc:	37850513          	addi	a0,a0,888 # 80027d70 <__func__.0+0x310>
    80001a00:	2f6240ef          	jal	80025cf6 <printf>
    80001a04:	00026517          	auipc	a0,0x26
    80001a08:	37450513          	addi	a0,a0,884 # 80027d78 <__func__.0+0x318>
    80001a0c:	2ea240ef          	jal	80025cf6 <printf>
    80001a10:	8626                	mv	a2,s1
    80001a12:	4681                	li	a3,0
    80001a14:	02d00593          	li	a1,45
    80001a18:	00026517          	auipc	a0,0x26
    80001a1c:	7c850513          	addi	a0,a0,1992 # 800281e0 <__func__.0+0x780>
    80001a20:	2d6240ef          	jal	80025cf6 <printf>
    80001a24:	02900513          	li	a0,41
    80001a28:	0d8230ef          	jal	80024b00 <putchar>
    80001a2c:	4529                	li	a0,10
    80001a2e:	0d2230ef          	jal	80024b00 <putchar>
    80001a32:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    80001a34:	144024f3          	csrr	s1,sip
    80001a38:	00026617          	auipc	a2,0x26
    80001a3c:	7c060613          	addi	a2,a2,1984 # 800281f8 <__func__.0+0x798>
    80001a40:	08200593          	li	a1,130
    80001a44:	00026517          	auipc	a0,0x26
    80001a48:	31450513          	addi	a0,a0,788 # 80027d58 <__func__.0+0x2f8>
    80001a4c:	2aa240ef          	jal	80025cf6 <printf>
    80001a50:	18048163          	beqz	s1,80001bd2 <check_xip_regs_2+0x3e6>
    80001a54:	00026597          	auipc	a1,0x26
    80001a58:	2dc58593          	addi	a1,a1,732 # 80027d30 <__func__.0+0x2d0>
    80001a5c:	00026517          	auipc	a0,0x26
    80001a60:	31450513          	addi	a0,a0,788 # 80027d70 <__func__.0+0x310>
    80001a64:	292240ef          	jal	80025cf6 <printf>
    80001a68:	00026517          	auipc	a0,0x26
    80001a6c:	31050513          	addi	a0,a0,784 # 80027d78 <__func__.0+0x318>
    80001a70:	286240ef          	jal	80025cf6 <printf>
    80001a74:	8626                	mv	a2,s1
    80001a76:	4681                	li	a3,0
    80001a78:	02d00593          	li	a1,45
    80001a7c:	00026517          	auipc	a0,0x26
    80001a80:	76450513          	addi	a0,a0,1892 # 800281e0 <__func__.0+0x780>
    80001a84:	272240ef          	jal	80025cf6 <printf>
    80001a88:	02900513          	li	a0,41
    80001a8c:	074230ef          	jal	80024b00 <putchar>
    80001a90:	4529                	li	a0,10
    80001a92:	06e230ef          	jal	80024b00 <putchar>
    80001a96:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x000, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80001a98:	244024f3          	csrr	s1,vsip
    80001a9c:	00026617          	auipc	a2,0x26
    80001aa0:	72c60613          	addi	a2,a2,1836 # 800281c8 <__func__.0+0x768>
    80001aa4:	08200593          	li	a1,130
    80001aa8:	00026517          	auipc	a0,0x26
    80001aac:	2b050513          	addi	a0,a0,688 # 80027d58 <__func__.0+0x2f8>
    80001ab0:	246240ef          	jal	80025cf6 <printf>
    80001ab4:	14048c63          	beqz	s1,80001c0c <check_xip_regs_2+0x420>
    80001ab8:	00026597          	auipc	a1,0x26
    80001abc:	27858593          	addi	a1,a1,632 # 80027d30 <__func__.0+0x2d0>
    80001ac0:	00026517          	auipc	a0,0x26
    80001ac4:	2b050513          	addi	a0,a0,688 # 80027d70 <__func__.0+0x310>
    80001ac8:	22e240ef          	jal	80025cf6 <printf>
    80001acc:	00026517          	auipc	a0,0x26
    80001ad0:	2ac50513          	addi	a0,a0,684 # 80027d78 <__func__.0+0x318>
    80001ad4:	222240ef          	jal	80025cf6 <printf>
    80001ad8:	8626                	mv	a2,s1
    80001ada:	4681                	li	a3,0
    80001adc:	02d00593          	li	a1,45
    80001ae0:	00026517          	auipc	a0,0x26
    80001ae4:	70050513          	addi	a0,a0,1792 # 800281e0 <__func__.0+0x780>
    80001ae8:	20e240ef          	jal	80025cf6 <printf>
    80001aec:	02900513          	li	a0,41
    80001af0:	010230ef          	jal	80024b00 <putchar>
    80001af4:	4529                	li	a0,10
    80001af6:	00a230ef          	jal	80024b00 <putchar>
    80001afa:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80001afc:	4509                	li	a0,2
    80001afe:	8f8ff0ef          	jal	80000bf6 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001b02:	144024f3          	csrr	s1,sip
    80001b06:	00026617          	auipc	a2,0x26
    80001b0a:	6fa60613          	addi	a2,a2,1786 # 80028200 <__func__.0+0x7a0>
    80001b0e:	08200593          	li	a1,130
    80001b12:	00026517          	auipc	a0,0x26
    80001b16:	24650513          	addi	a0,a0,582 # 80027d58 <__func__.0+0x2f8>
    80001b1a:	1dc240ef          	jal	80025cf6 <printf>
    80001b1e:	10048563          	beqz	s1,80001c28 <check_xip_regs_2+0x43c>
    80001b22:	00026597          	auipc	a1,0x26
    80001b26:	20e58593          	addi	a1,a1,526 # 80027d30 <__func__.0+0x2d0>
    80001b2a:	00026517          	auipc	a0,0x26
    80001b2e:	24650513          	addi	a0,a0,582 # 80027d70 <__func__.0+0x310>
    80001b32:	1c4240ef          	jal	80025cf6 <printf>
    80001b36:	00026517          	auipc	a0,0x26
    80001b3a:	24250513          	addi	a0,a0,578 # 80027d78 <__func__.0+0x318>
    80001b3e:	1b8240ef          	jal	80025cf6 <printf>
    80001b42:	8626                	mv	a2,s1
    80001b44:	4681                	li	a3,0
    80001b46:	02d00593          	li	a1,45
    80001b4a:	00026517          	auipc	a0,0x26
    80001b4e:	69650513          	addi	a0,a0,1686 # 800281e0 <__func__.0+0x780>
    80001b52:	1a4240ef          	jal	80025cf6 <printf>
    80001b56:	02900513          	li	a0,41
    80001b5a:	7a7220ef          	jal	80024b00 <putchar>
    80001b5e:	4529                	li	a0,10
    80001b60:	7a1220ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);   
    80001b64:	4511                	li	a0,4
    80001b66:	890ff0ef          	jal	80000bf6 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001b6a:	4401                	li	s0,0

    TEST_END();
    80001b6c:	00026597          	auipc	a1,0x26
    80001b70:	1c458593          	addi	a1,a1,452 # 80027d30 <__func__.0+0x2d0>
    80001b74:	00026517          	auipc	a0,0x26
    80001b78:	26450513          	addi	a0,a0,612 # 80027dd8 <__func__.0+0x378>
    80001b7c:	17a240ef          	jal	80025cf6 <printf>
    80001b80:	4511                	li	a0,4
    80001b82:	874ff0ef          	jal	80000bf6 <goto_priv>
    80001b86:	927ff0ef          	jal	800014ac <reset_state>
}
    80001b8a:	60e2                	ld	ra,24(sp)
    80001b8c:	8522                	mv	a0,s0
    80001b8e:	6442                	ld	s0,16(sp)
    80001b90:	64a2                	ld	s1,8(sp)
    80001b92:	6902                	ld	s2,0(sp)
    80001b94:	6105                	addi	sp,sp,32
    80001b96:	8082                	ret
    check_csr_rd("hip", CSR_HIP, 0x0);
    80001b98:	00026597          	auipc	a1,0x26
    80001b9c:	18858593          	addi	a1,a1,392 # 80027d20 <__func__.0+0x2c0>
    80001ba0:	00026517          	auipc	a0,0x26
    80001ba4:	1d050513          	addi	a0,a0,464 # 80027d70 <__func__.0+0x310>
    80001ba8:	14e240ef          	jal	80025cf6 <printf>
    80001bac:	4529                	li	a0,10
    80001bae:	753220ef          	jal	80024b00 <putchar>
    check_csr_rd("sip", sip, 0x0);
    80001bb2:	144024f3          	csrr	s1,sip
    80001bb6:	00026617          	auipc	a2,0x26
    80001bba:	64260613          	addi	a2,a2,1602 # 800281f8 <__func__.0+0x798>
    80001bbe:	08200593          	li	a1,130
    80001bc2:	00026517          	auipc	a0,0x26
    80001bc6:	19650513          	addi	a0,a0,406 # 80027d58 <__func__.0+0x2f8>
    80001bca:	12c240ef          	jal	80025cf6 <printf>
    80001bce:	e80493e3          	bnez	s1,80001a54 <check_xip_regs_2+0x268>
    80001bd2:	00026597          	auipc	a1,0x26
    80001bd6:	14e58593          	addi	a1,a1,334 # 80027d20 <__func__.0+0x2c0>
    80001bda:	00026517          	auipc	a0,0x26
    80001bde:	19650513          	addi	a0,a0,406 # 80027d70 <__func__.0+0x310>
    80001be2:	114240ef          	jal	80025cf6 <printf>
    80001be6:	4529                	li	a0,10
    80001be8:	719220ef          	jal	80024b00 <putchar>
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80001bec:	244024f3          	csrr	s1,vsip
    80001bf0:	00026617          	auipc	a2,0x26
    80001bf4:	5d860613          	addi	a2,a2,1496 # 800281c8 <__func__.0+0x768>
    80001bf8:	08200593          	li	a1,130
    80001bfc:	00026517          	auipc	a0,0x26
    80001c00:	15c50513          	addi	a0,a0,348 # 80027d58 <__func__.0+0x2f8>
    80001c04:	0f2240ef          	jal	80025cf6 <printf>
    80001c08:	ea0498e3          	bnez	s1,80001ab8 <check_xip_regs_2+0x2cc>
    80001c0c:	00026597          	auipc	a1,0x26
    80001c10:	11458593          	addi	a1,a1,276 # 80027d20 <__func__.0+0x2c0>
    80001c14:	00026517          	auipc	a0,0x26
    80001c18:	15c50513          	addi	a0,a0,348 # 80027d70 <__func__.0+0x310>
    80001c1c:	0da240ef          	jal	80025cf6 <printf>
    80001c20:	4529                	li	a0,10
    80001c22:	6df220ef          	jal	80024b00 <putchar>
    80001c26:	bdd9                	j	80001afc <check_xip_regs_2+0x310>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001c28:	00026597          	auipc	a1,0x26
    80001c2c:	0f858593          	addi	a1,a1,248 # 80027d20 <__func__.0+0x2c0>
    80001c30:	00026517          	auipc	a0,0x26
    80001c34:	14050513          	addi	a0,a0,320 # 80027d70 <__func__.0+0x310>
    80001c38:	0be240ef          	jal	80025cf6 <printf>
    80001c3c:	4529                	li	a0,10
    80001c3e:	6c3220ef          	jal	80024b00 <putchar>
    80001c42:	f20401e3          	beqz	s0,80001b64 <check_xip_regs_2+0x378>
    goto_priv(PRIV_M);   
    80001c46:	4511                	li	a0,4
    80001c48:	faffe0ef          	jal	80000bf6 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001c4c:	4405                	li	s0,1
    TEST_END();
    80001c4e:	00026597          	auipc	a1,0x26
    80001c52:	0d258593          	addi	a1,a1,210 # 80027d20 <__func__.0+0x2c0>
    80001c56:	bf39                	j	80001b74 <check_xip_regs_2+0x388>
    check_csr_rd("sip", sip, 0x222);    
    80001c58:	00026597          	auipc	a1,0x26
    80001c5c:	0c858593          	addi	a1,a1,200 # 80027d20 <__func__.0+0x2c0>
    80001c60:	00026517          	auipc	a0,0x26
    80001c64:	11050513          	addi	a0,a0,272 # 80027d70 <__func__.0+0x310>
    80001c68:	08e240ef          	jal	80025cf6 <printf>
    80001c6c:	4529                	li	a0,10
    80001c6e:	693220ef          	jal	80024b00 <putchar>
    80001c72:	b149                	j	800018f4 <check_xip_regs_2+0x108>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    80001c74:	00026597          	auipc	a1,0x26
    80001c78:	0ac58593          	addi	a1,a1,172 # 80027d20 <__func__.0+0x2c0>
    80001c7c:	00026517          	auipc	a0,0x26
    80001c80:	0f450513          	addi	a0,a0,244 # 80027d70 <__func__.0+0x310>
    80001c84:	072240ef          	jal	80025cf6 <printf>
    80001c88:	4529                	li	a0,10
    80001c8a:	677220ef          	jal	80024b00 <putchar>
    80001c8e:	bb25                	j	800019c6 <check_xip_regs_2+0x1da>
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    80001c90:	00026597          	auipc	a1,0x26
    80001c94:	09058593          	addi	a1,a1,144 # 80027d20 <__func__.0+0x2c0>
    80001c98:	00026517          	auipc	a0,0x26
    80001c9c:	0d850513          	addi	a0,a0,216 # 80027d70 <__func__.0+0x310>
    80001ca0:	056240ef          	jal	80025cf6 <printf>
    80001ca4:	4529                	li	a0,10
    80001ca6:	65b220ef          	jal	80024b00 <putchar>
    80001caa:	b945                	j	8000195a <check_xip_regs_2+0x16e>
    check_csr_rd("hip", CSR_HIP, 0x4);
    80001cac:	00026597          	auipc	a1,0x26
    80001cb0:	07458593          	addi	a1,a1,116 # 80027d20 <__func__.0+0x2c0>
    80001cb4:	00026517          	auipc	a0,0x26
    80001cb8:	0bc50513          	addi	a0,a0,188 # 80027d70 <__func__.0+0x310>
    80001cbc:	03a240ef          	jal	80025cf6 <printf>
    80001cc0:	4529                	li	a0,10
    80001cc2:	63f220ef          	jal	80024b00 <putchar>
    80001cc6:	4405                	li	s0,1
    80001cc8:	b6d1                	j	8000188c <check_xip_regs_2+0xa0>

0000000080001cca <check_xip_regs_3>:

bool check_xip_regs_3(){
    80001cca:	1101                	addi	sp,sp,-32

    TEST_START();
    80001ccc:	00024597          	auipc	a1,0x24
    80001cd0:	59458593          	addi	a1,a1,1428 # 80026260 <__func__.1>
    80001cd4:	00026517          	auipc	a0,0x26
    80001cd8:	06c50513          	addi	a0,a0,108 # 80027d40 <__func__.0+0x2e0>
bool check_xip_regs_3(){
    80001cdc:	ec06                	sd	ra,24(sp)
    80001cde:	e822                	sd	s0,16(sp)
    80001ce0:	e426                	sd	s1,8(sp)
    80001ce2:	e04a                	sd	s2,0(sp)
    TEST_START();
    80001ce4:	012240ef          	jal	80025cf6 <printf>
    80001ce8:	4529                	li	a0,10
    80001cea:	617220ef          	jal	80024b00 <putchar>

    CSRW(mideleg, (uint64_t)-1);
    80001cee:	57fd                	li	a5,-1
    80001cf0:	30379073          	csrw	mideleg,a5
    VERBOSE("setting mideleg and hideleg\n");
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    80001cf4:	60379073          	csrw	hideleg,a5

    VERBOSE("setting all in hvip\n");
    CSRW(CSR_HVIP, (uint64_t)-1);
    80001cf8:	64579073          	csrw	hvip,a5
    printf("hvip=%llx\n",CSRR(CSR_HVIP));
    80001cfc:	645025f3          	csrr	a1,hvip
    80001d00:	00026517          	auipc	a0,0x26
    80001d04:	51850513          	addi	a0,a0,1304 # 80028218 <__func__.0+0x7b8>
    80001d08:	7ef230ef          	jal	80025cf6 <printf>
    check_csr_rd("hvip", CSR_HVIP, 0xffffffffffffe444);
    80001d0c:	645024f3          	csrr	s1,hvip
    80001d10:	7479                	lui	s0,0xffffe
    80001d12:	00026617          	auipc	a2,0x26
    80001d16:	51660613          	addi	a2,a2,1302 # 80028228 <__func__.0+0x7c8>
    80001d1a:	08200593          	li	a1,130
    80001d1e:	00026517          	auipc	a0,0x26
    80001d22:	03a50513          	addi	a0,a0,58 # 80027d58 <__func__.0+0x2f8>
    80001d26:	44440413          	addi	s0,s0,1092 # ffffffffffffe444 <__stack_top+0xffffffff7fcff444>
    80001d2a:	7cd230ef          	jal	80025cf6 <printf>
    80001d2e:	4a848663          	beq	s1,s0,800021da <check_xip_regs_3+0x510>
    80001d32:	00026597          	auipc	a1,0x26
    80001d36:	ffe58593          	addi	a1,a1,-2 # 80027d30 <__func__.0+0x2d0>
    80001d3a:	00026517          	auipc	a0,0x26
    80001d3e:	03650513          	addi	a0,a0,54 # 80027d70 <__func__.0+0x310>
    80001d42:	7b5230ef          	jal	80025cf6 <printf>
    80001d46:	00026517          	auipc	a0,0x26
    80001d4a:	03250513          	addi	a0,a0,50 # 80027d78 <__func__.0+0x318>
    80001d4e:	7a9230ef          	jal	80025cf6 <printf>
    80001d52:	86a2                	mv	a3,s0
    80001d54:	8626                	mv	a2,s1
    80001d56:	02d00593          	li	a1,45
    80001d5a:	00026517          	auipc	a0,0x26
    80001d5e:	48650513          	addi	a0,a0,1158 # 800281e0 <__func__.0+0x780>
    80001d62:	795230ef          	jal	80025cf6 <printf>
    80001d66:	02900513          	li	a0,41
    80001d6a:	597220ef          	jal	80024b00 <putchar>
    80001d6e:	4529                	li	a0,10
    80001d70:	591220ef          	jal	80024b00 <putchar>
    80001d74:	4401                	li	s0,0
    check_csr_rd("hip", CSR_HIP, 0x444);
    80001d76:	644024f3          	csrr	s1,hip
    80001d7a:	00026617          	auipc	a2,0x26
    80001d7e:	45e60613          	addi	a2,a2,1118 # 800281d8 <__func__.0+0x778>
    80001d82:	08200593          	li	a1,130
    80001d86:	00026517          	auipc	a0,0x26
    80001d8a:	fd250513          	addi	a0,a0,-46 # 80027d58 <__func__.0+0x2f8>
    80001d8e:	44400913          	li	s2,1092
    80001d92:	765230ef          	jal	80025cf6 <printf>
    80001d96:	3f248863          	beq	s1,s2,80002186 <check_xip_regs_3+0x4bc>
    80001d9a:	00026597          	auipc	a1,0x26
    80001d9e:	f9658593          	addi	a1,a1,-106 # 80027d30 <__func__.0+0x2d0>
    80001da2:	00026517          	auipc	a0,0x26
    80001da6:	fce50513          	addi	a0,a0,-50 # 80027d70 <__func__.0+0x310>
    80001daa:	74d230ef          	jal	80025cf6 <printf>
    80001dae:	00026517          	auipc	a0,0x26
    80001db2:	fca50513          	addi	a0,a0,-54 # 80027d78 <__func__.0+0x318>
    80001db6:	741230ef          	jal	80025cf6 <printf>
    80001dba:	86ca                	mv	a3,s2
    80001dbc:	8626                	mv	a2,s1
    80001dbe:	02d00593          	li	a1,45
    80001dc2:	00026517          	auipc	a0,0x26
    80001dc6:	41e50513          	addi	a0,a0,1054 # 800281e0 <__func__.0+0x780>
    80001dca:	72d230ef          	jal	80025cf6 <printf>
    80001dce:	02900513          	li	a0,41
    80001dd2:	52f220ef          	jal	80024b00 <putchar>
    80001dd6:	4529                	li	a0,10
    80001dd8:	529220ef          	jal	80024b00 <putchar>
    80001ddc:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    80001dde:	144024f3          	csrr	s1,sip
    80001de2:	00026617          	auipc	a2,0x26
    80001de6:	41660613          	addi	a2,a2,1046 # 800281f8 <__func__.0+0x798>
    80001dea:	08200593          	li	a1,130
    80001dee:	00026517          	auipc	a0,0x26
    80001df2:	f6a50513          	addi	a0,a0,-150 # 80027d58 <__func__.0+0x2f8>
    80001df6:	701230ef          	jal	80025cf6 <printf>
    80001dfa:	2e048763          	beqz	s1,800020e8 <check_xip_regs_3+0x41e>
    80001dfe:	00026597          	auipc	a1,0x26
    80001e02:	f3258593          	addi	a1,a1,-206 # 80027d30 <__func__.0+0x2d0>
    80001e06:	00026517          	auipc	a0,0x26
    80001e0a:	f6a50513          	addi	a0,a0,-150 # 80027d70 <__func__.0+0x310>
    80001e0e:	6e9230ef          	jal	80025cf6 <printf>
    80001e12:	00026517          	auipc	a0,0x26
    80001e16:	f6650513          	addi	a0,a0,-154 # 80027d78 <__func__.0+0x318>
    80001e1a:	6dd230ef          	jal	80025cf6 <printf>
    80001e1e:	8626                	mv	a2,s1
    80001e20:	4681                	li	a3,0
    80001e22:	02d00593          	li	a1,45
    80001e26:	00026517          	auipc	a0,0x26
    80001e2a:	3ba50513          	addi	a0,a0,954 # 800281e0 <__func__.0+0x780>
    80001e2e:	6c9230ef          	jal	80025cf6 <printf>
    80001e32:	02900513          	li	a0,41
    80001e36:	4cb220ef          	jal	80024b00 <putchar>
    80001e3a:	4529                	li	a0,10
    80001e3c:	4c5220ef          	jal	80024b00 <putchar>
    80001e40:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x444, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x222);
    80001e42:	244024f3          	csrr	s1,vsip
    80001e46:	00026617          	auipc	a2,0x26
    80001e4a:	38260613          	addi	a2,a2,898 # 800281c8 <__func__.0+0x768>
    80001e4e:	08200593          	li	a1,130
    80001e52:	00026517          	auipc	a0,0x26
    80001e56:	f0650513          	addi	a0,a0,-250 # 80027d58 <__func__.0+0x2f8>
    80001e5a:	22200913          	li	s2,546
    80001e5e:	699230ef          	jal	80025cf6 <printf>
    80001e62:	35248e63          	beq	s1,s2,800021be <check_xip_regs_3+0x4f4>
    80001e66:	00026597          	auipc	a1,0x26
    80001e6a:	eca58593          	addi	a1,a1,-310 # 80027d30 <__func__.0+0x2d0>
    80001e6e:	00026517          	auipc	a0,0x26
    80001e72:	f0250513          	addi	a0,a0,-254 # 80027d70 <__func__.0+0x310>
    80001e76:	681230ef          	jal	80025cf6 <printf>
    80001e7a:	00026517          	auipc	a0,0x26
    80001e7e:	efe50513          	addi	a0,a0,-258 # 80027d78 <__func__.0+0x318>
    80001e82:	675230ef          	jal	80025cf6 <printf>
    80001e86:	86ca                	mv	a3,s2
    80001e88:	8626                	mv	a2,s1
    80001e8a:	02d00593          	li	a1,45
    80001e8e:	00026517          	auipc	a0,0x26
    80001e92:	35250513          	addi	a0,a0,850 # 800281e0 <__func__.0+0x780>
    80001e96:	661230ef          	jal	80025cf6 <printf>
    80001e9a:	02900513          	li	a0,41
    80001e9e:	463220ef          	jal	80024b00 <putchar>
    80001ea2:	4529                	li	a0,10
    80001ea4:	45d220ef          	jal	80024b00 <putchar>
    80001ea8:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80001eaa:	4509                	li	a0,2
    80001eac:	d4bfe0ef          	jal	80000bf6 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x222);
    80001eb0:	144024f3          	csrr	s1,sip
    80001eb4:	00026617          	auipc	a2,0x26
    80001eb8:	34c60613          	addi	a2,a2,844 # 80028200 <__func__.0+0x7a0>
    80001ebc:	08200593          	li	a1,130
    80001ec0:	00026517          	auipc	a0,0x26
    80001ec4:	e9850513          	addi	a0,a0,-360 # 80027d58 <__func__.0+0x2f8>
    80001ec8:	22200913          	li	s2,546
    80001ecc:	62b230ef          	jal	80025cf6 <printf>
    80001ed0:	2d248963          	beq	s1,s2,800021a2 <check_xip_regs_3+0x4d8>
    80001ed4:	00026597          	auipc	a1,0x26
    80001ed8:	e5c58593          	addi	a1,a1,-420 # 80027d30 <__func__.0+0x2d0>
    80001edc:	00026517          	auipc	a0,0x26
    80001ee0:	e9450513          	addi	a0,a0,-364 # 80027d70 <__func__.0+0x310>
    80001ee4:	613230ef          	jal	80025cf6 <printf>
    80001ee8:	00026517          	auipc	a0,0x26
    80001eec:	e9050513          	addi	a0,a0,-368 # 80027d78 <__func__.0+0x318>
    80001ef0:	607230ef          	jal	80025cf6 <printf>
    80001ef4:	86ca                	mv	a3,s2
    80001ef6:	8626                	mv	a2,s1
    80001ef8:	02d00593          	li	a1,45
    80001efc:	00026517          	auipc	a0,0x26
    80001f00:	2e450513          	addi	a0,a0,740 # 800281e0 <__func__.0+0x780>
    80001f04:	5f3230ef          	jal	80025cf6 <printf>
    80001f08:	02900513          	li	a0,41
    80001f0c:	3f5220ef          	jal	80024b00 <putchar>
    80001f10:	4529                	li	a0,10
    80001f12:	3ef220ef          	jal	80024b00 <putchar>
    80001f16:	4401                	li	s0,0
    goto_priv(PRIV_M);
    80001f18:	4511                	li	a0,4
    80001f1a:	cddfe0ef          	jal	80000bf6 <goto_priv>

    VERBOSE("clearing all in hvip\n");
    CSRW(CSR_HVIP, (uint64_t)0);
    80001f1e:	64505073          	csrwi	hvip,0
    check_csr_rd("hip", CSR_HIP, 0x0);
    80001f22:	644024f3          	csrr	s1,hip
    80001f26:	00026617          	auipc	a2,0x26
    80001f2a:	2b260613          	addi	a2,a2,690 # 800281d8 <__func__.0+0x778>
    80001f2e:	08200593          	li	a1,130
    80001f32:	00026517          	auipc	a0,0x26
    80001f36:	e2650513          	addi	a0,a0,-474 # 80027d58 <__func__.0+0x2f8>
    80001f3a:	5bd230ef          	jal	80025cf6 <printf>
    80001f3e:	22048663          	beqz	s1,8000216a <check_xip_regs_3+0x4a0>
    80001f42:	00026597          	auipc	a1,0x26
    80001f46:	dee58593          	addi	a1,a1,-530 # 80027d30 <__func__.0+0x2d0>
    80001f4a:	00026517          	auipc	a0,0x26
    80001f4e:	e2650513          	addi	a0,a0,-474 # 80027d70 <__func__.0+0x310>
    80001f52:	5a5230ef          	jal	80025cf6 <printf>
    80001f56:	00026517          	auipc	a0,0x26
    80001f5a:	e2250513          	addi	a0,a0,-478 # 80027d78 <__func__.0+0x318>
    80001f5e:	599230ef          	jal	80025cf6 <printf>
    80001f62:	8626                	mv	a2,s1
    80001f64:	4681                	li	a3,0
    80001f66:	02d00593          	li	a1,45
    80001f6a:	00026517          	auipc	a0,0x26
    80001f6e:	27650513          	addi	a0,a0,630 # 800281e0 <__func__.0+0x780>
    80001f72:	585230ef          	jal	80025cf6 <printf>
    80001f76:	02900513          	li	a0,41
    80001f7a:	387220ef          	jal	80024b00 <putchar>
    80001f7e:	4529                	li	a0,10
    80001f80:	381220ef          	jal	80024b00 <putchar>
    80001f84:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    80001f86:	144024f3          	csrr	s1,sip
    80001f8a:	00026617          	auipc	a2,0x26
    80001f8e:	26e60613          	addi	a2,a2,622 # 800281f8 <__func__.0+0x798>
    80001f92:	08200593          	li	a1,130
    80001f96:	00026517          	auipc	a0,0x26
    80001f9a:	dc250513          	addi	a0,a0,-574 # 80027d58 <__func__.0+0x2f8>
    80001f9e:	559230ef          	jal	80025cf6 <printf>
    80001fa2:	1a048663          	beqz	s1,8000214e <check_xip_regs_3+0x484>
    80001fa6:	00026597          	auipc	a1,0x26
    80001faa:	d8a58593          	addi	a1,a1,-630 # 80027d30 <__func__.0+0x2d0>
    80001fae:	00026517          	auipc	a0,0x26
    80001fb2:	dc250513          	addi	a0,a0,-574 # 80027d70 <__func__.0+0x310>
    80001fb6:	541230ef          	jal	80025cf6 <printf>
    80001fba:	00026517          	auipc	a0,0x26
    80001fbe:	dbe50513          	addi	a0,a0,-578 # 80027d78 <__func__.0+0x318>
    80001fc2:	535230ef          	jal	80025cf6 <printf>
    80001fc6:	8626                	mv	a2,s1
    80001fc8:	4681                	li	a3,0
    80001fca:	02d00593          	li	a1,45
    80001fce:	00026517          	auipc	a0,0x26
    80001fd2:	21250513          	addi	a0,a0,530 # 800281e0 <__func__.0+0x780>
    80001fd6:	521230ef          	jal	80025cf6 <printf>
    80001fda:	02900513          	li	a0,41
    80001fde:	323220ef          	jal	80024b00 <putchar>
    80001fe2:	4529                	li	a0,10
    80001fe4:	31d220ef          	jal	80024b00 <putchar>
    80001fe8:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x000, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80001fea:	244024f3          	csrr	s1,vsip
    80001fee:	00026617          	auipc	a2,0x26
    80001ff2:	1da60613          	addi	a2,a2,474 # 800281c8 <__func__.0+0x768>
    80001ff6:	08200593          	li	a1,130
    80001ffa:	00026517          	auipc	a0,0x26
    80001ffe:	d5e50513          	addi	a0,a0,-674 # 80027d58 <__func__.0+0x2f8>
    80002002:	4f5230ef          	jal	80025cf6 <printf>
    80002006:	12048663          	beqz	s1,80002132 <check_xip_regs_3+0x468>
    8000200a:	00026597          	auipc	a1,0x26
    8000200e:	d2658593          	addi	a1,a1,-730 # 80027d30 <__func__.0+0x2d0>
    80002012:	00026517          	auipc	a0,0x26
    80002016:	d5e50513          	addi	a0,a0,-674 # 80027d70 <__func__.0+0x310>
    8000201a:	4dd230ef          	jal	80025cf6 <printf>
    8000201e:	00026517          	auipc	a0,0x26
    80002022:	d5a50513          	addi	a0,a0,-678 # 80027d78 <__func__.0+0x318>
    80002026:	4d1230ef          	jal	80025cf6 <printf>
    8000202a:	8626                	mv	a2,s1
    8000202c:	4681                	li	a3,0
    8000202e:	02d00593          	li	a1,45
    80002032:	00026517          	auipc	a0,0x26
    80002036:	1ae50513          	addi	a0,a0,430 # 800281e0 <__func__.0+0x780>
    8000203a:	4bd230ef          	jal	80025cf6 <printf>
    8000203e:	02900513          	li	a0,41
    80002042:	2bf220ef          	jal	80024b00 <putchar>
    80002046:	4529                	li	a0,10
    80002048:	2b9220ef          	jal	80024b00 <putchar>
    8000204c:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    8000204e:	4509                	li	a0,2
    80002050:	ba7fe0ef          	jal	80000bf6 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80002054:	144024f3          	csrr	s1,sip
    80002058:	00026617          	auipc	a2,0x26
    8000205c:	1a860613          	addi	a2,a2,424 # 80028200 <__func__.0+0x7a0>
    80002060:	08200593          	li	a1,130
    80002064:	00026517          	auipc	a0,0x26
    80002068:	cf450513          	addi	a0,a0,-780 # 80027d58 <__func__.0+0x2f8>
    8000206c:	48b230ef          	jal	80025cf6 <printf>
    80002070:	c8d1                	beqz	s1,80002104 <check_xip_regs_3+0x43a>
    80002072:	00026597          	auipc	a1,0x26
    80002076:	cbe58593          	addi	a1,a1,-834 # 80027d30 <__func__.0+0x2d0>
    8000207a:	00026517          	auipc	a0,0x26
    8000207e:	cf650513          	addi	a0,a0,-778 # 80027d70 <__func__.0+0x310>
    80002082:	475230ef          	jal	80025cf6 <printf>
    80002086:	00026517          	auipc	a0,0x26
    8000208a:	cf250513          	addi	a0,a0,-782 # 80027d78 <__func__.0+0x318>
    8000208e:	469230ef          	jal	80025cf6 <printf>
    80002092:	8626                	mv	a2,s1
    80002094:	4681                	li	a3,0
    80002096:	02d00593          	li	a1,45
    8000209a:	00026517          	auipc	a0,0x26
    8000209e:	14650513          	addi	a0,a0,326 # 800281e0 <__func__.0+0x780>
    800020a2:	455230ef          	jal	80025cf6 <printf>
    800020a6:	02900513          	li	a0,41
    800020aa:	257220ef          	jal	80024b00 <putchar>
    800020ae:	4529                	li	a0,10
    800020b0:	251220ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    800020b4:	4511                	li	a0,4
    800020b6:	b41fe0ef          	jal	80000bf6 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    800020ba:	4401                	li	s0,0

    TEST_END();
    800020bc:	00026597          	auipc	a1,0x26
    800020c0:	c7458593          	addi	a1,a1,-908 # 80027d30 <__func__.0+0x2d0>
    800020c4:	00026517          	auipc	a0,0x26
    800020c8:	d1450513          	addi	a0,a0,-748 # 80027dd8 <__func__.0+0x378>
    800020cc:	42b230ef          	jal	80025cf6 <printf>
    800020d0:	4511                	li	a0,4
    800020d2:	b25fe0ef          	jal	80000bf6 <goto_priv>
    800020d6:	bd6ff0ef          	jal	800014ac <reset_state>
}
    800020da:	60e2                	ld	ra,24(sp)
    800020dc:	8522                	mv	a0,s0
    800020de:	6442                	ld	s0,16(sp)
    800020e0:	64a2                	ld	s1,8(sp)
    800020e2:	6902                	ld	s2,0(sp)
    800020e4:	6105                	addi	sp,sp,32
    800020e6:	8082                	ret
    check_csr_rd("sip", sip, 0x0);
    800020e8:	00026597          	auipc	a1,0x26
    800020ec:	c3858593          	addi	a1,a1,-968 # 80027d20 <__func__.0+0x2c0>
    800020f0:	00026517          	auipc	a0,0x26
    800020f4:	c8050513          	addi	a0,a0,-896 # 80027d70 <__func__.0+0x310>
    800020f8:	3ff230ef          	jal	80025cf6 <printf>
    800020fc:	4529                	li	a0,10
    800020fe:	203220ef          	jal	80024b00 <putchar>
    80002102:	b381                	j	80001e42 <check_xip_regs_3+0x178>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80002104:	00026597          	auipc	a1,0x26
    80002108:	c1c58593          	addi	a1,a1,-996 # 80027d20 <__func__.0+0x2c0>
    8000210c:	00026517          	auipc	a0,0x26
    80002110:	c6450513          	addi	a0,a0,-924 # 80027d70 <__func__.0+0x310>
    80002114:	3e3230ef          	jal	80025cf6 <printf>
    80002118:	4529                	li	a0,10
    8000211a:	1e7220ef          	jal	80024b00 <putchar>
    8000211e:	d859                	beqz	s0,800020b4 <check_xip_regs_3+0x3ea>
    goto_priv(PRIV_M);
    80002120:	4511                	li	a0,4
    80002122:	ad5fe0ef          	jal	80000bf6 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80002126:	4405                	li	s0,1
    TEST_END();
    80002128:	00026597          	auipc	a1,0x26
    8000212c:	bf858593          	addi	a1,a1,-1032 # 80027d20 <__func__.0+0x2c0>
    80002130:	bf51                	j	800020c4 <check_xip_regs_3+0x3fa>
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80002132:	00026597          	auipc	a1,0x26
    80002136:	bee58593          	addi	a1,a1,-1042 # 80027d20 <__func__.0+0x2c0>
    8000213a:	00026517          	auipc	a0,0x26
    8000213e:	c3650513          	addi	a0,a0,-970 # 80027d70 <__func__.0+0x310>
    80002142:	3b5230ef          	jal	80025cf6 <printf>
    80002146:	4529                	li	a0,10
    80002148:	1b9220ef          	jal	80024b00 <putchar>
    8000214c:	b709                	j	8000204e <check_xip_regs_3+0x384>
    check_csr_rd("sip", sip, 0x0);
    8000214e:	00026597          	auipc	a1,0x26
    80002152:	bd258593          	addi	a1,a1,-1070 # 80027d20 <__func__.0+0x2c0>
    80002156:	00026517          	auipc	a0,0x26
    8000215a:	c1a50513          	addi	a0,a0,-998 # 80027d70 <__func__.0+0x310>
    8000215e:	399230ef          	jal	80025cf6 <printf>
    80002162:	4529                	li	a0,10
    80002164:	19d220ef          	jal	80024b00 <putchar>
    80002168:	b549                	j	80001fea <check_xip_regs_3+0x320>
    check_csr_rd("hip", CSR_HIP, 0x0);
    8000216a:	00026597          	auipc	a1,0x26
    8000216e:	bb658593          	addi	a1,a1,-1098 # 80027d20 <__func__.0+0x2c0>
    80002172:	00026517          	auipc	a0,0x26
    80002176:	bfe50513          	addi	a0,a0,-1026 # 80027d70 <__func__.0+0x310>
    8000217a:	37d230ef          	jal	80025cf6 <printf>
    8000217e:	4529                	li	a0,10
    80002180:	181220ef          	jal	80024b00 <putchar>
    80002184:	b509                	j	80001f86 <check_xip_regs_3+0x2bc>
    check_csr_rd("hip", CSR_HIP, 0x444);
    80002186:	00026597          	auipc	a1,0x26
    8000218a:	b9a58593          	addi	a1,a1,-1126 # 80027d20 <__func__.0+0x2c0>
    8000218e:	00026517          	auipc	a0,0x26
    80002192:	be250513          	addi	a0,a0,-1054 # 80027d70 <__func__.0+0x310>
    80002196:	361230ef          	jal	80025cf6 <printf>
    8000219a:	4529                	li	a0,10
    8000219c:	165220ef          	jal	80024b00 <putchar>
    800021a0:	b93d                	j	80001dde <check_xip_regs_3+0x114>
    check_csr_rd("sip (vs perspective)", sip, 0x222);
    800021a2:	00026597          	auipc	a1,0x26
    800021a6:	b7e58593          	addi	a1,a1,-1154 # 80027d20 <__func__.0+0x2c0>
    800021aa:	00026517          	auipc	a0,0x26
    800021ae:	bc650513          	addi	a0,a0,-1082 # 80027d70 <__func__.0+0x310>
    800021b2:	345230ef          	jal	80025cf6 <printf>
    800021b6:	4529                	li	a0,10
    800021b8:	149220ef          	jal	80024b00 <putchar>
    800021bc:	bbb1                	j	80001f18 <check_xip_regs_3+0x24e>
    check_csr_rd("vsip", CSR_VSIP, 0x222);
    800021be:	00026597          	auipc	a1,0x26
    800021c2:	b6258593          	addi	a1,a1,-1182 # 80027d20 <__func__.0+0x2c0>
    800021c6:	00026517          	auipc	a0,0x26
    800021ca:	baa50513          	addi	a0,a0,-1110 # 80027d70 <__func__.0+0x310>
    800021ce:	329230ef          	jal	80025cf6 <printf>
    800021d2:	4529                	li	a0,10
    800021d4:	12d220ef          	jal	80024b00 <putchar>
    800021d8:	b9c9                	j	80001eaa <check_xip_regs_3+0x1e0>
    check_csr_rd("hvip", CSR_HVIP, 0xffffffffffffe444);
    800021da:	00026597          	auipc	a1,0x26
    800021de:	b4658593          	addi	a1,a1,-1210 # 80027d20 <__func__.0+0x2c0>
    800021e2:	00026517          	auipc	a0,0x26
    800021e6:	b8e50513          	addi	a0,a0,-1138 # 80027d70 <__func__.0+0x310>
    800021ea:	30d230ef          	jal	80025cf6 <printf>
    800021ee:	4529                	li	a0,10
    800021f0:	111220ef          	jal	80024b00 <putchar>
    800021f4:	4405                	li	s0,1
    800021f6:	b641                	j	80001d76 <check_xip_regs_3+0xac>

00000000800021f8 <interrupt_tests>:

bool interrupt_tests(){
    800021f8:	1101                	addi	sp,sp,-32

    TEST_START();
    800021fa:	00024597          	auipc	a1,0x24
    800021fe:	07e58593          	addi	a1,a1,126 # 80026278 <__func__.0>
    80002202:	00026517          	auipc	a0,0x26
    80002206:	b3e50513          	addi	a0,a0,-1218 # 80027d40 <__func__.0+0x2e0>
bool interrupt_tests(){
    8000220a:	ec06                	sd	ra,24(sp)
    8000220c:	e822                	sd	s0,16(sp)
    8000220e:	e426                	sd	s1,8(sp)
    TEST_START();
    80002210:	2e7230ef          	jal	80025cf6 <printf>
    80002214:	4529                	li	a0,10
    80002216:	0eb220ef          	jal	80024b00 <putchar>
    /**
     * Test trigerring VSSI without delegating it. 
     * It assumes it is already delegated in miedeleg (it should be hardwired)
     */
    
    goto_priv(PRIV_HS);
    8000221a:	450d                	li	a0,3
    8000221c:	9dbfe0ef          	jal	80000bf6 <goto_priv>
    CSRC(sstatus, SSTATUS_SPIE_BIT | SSTATUS_SIE_BIT); 
    80002220:	02200793          	li	a5,34
    80002224:	1007b073          	csrc	sstatus,a5
    CSRS(CSR_HIE, 0x4);
    80002228:	60426073          	csrsi	hie,4
    CSRS(CSR_HIP, 0x4);
    8000222c:	64426073          	csrsi	hip,4
    TEST_SETUP_EXCEPT();
    80002230:	0330000f          	fence	rw,rw
    80002234:	00047417          	auipc	s0,0x47
    80002238:	ddc40413          	addi	s0,s0,-548 # 80049010 <excpt>
    8000223c:	4785                	li	a5,1
    8000223e:	00047717          	auipc	a4,0x47
    80002242:	e0073523          	sd	zero,-502(a4) # 80049048 <excpt+0x38>
    80002246:	00f41023          	sh	a5,0(s0)
    8000224a:	0330000f          	fence	rw,rw
    goto_priv(PRIV_VS);
    8000224e:	4509                	li	a0,2
    80002250:	9a7fe0ef          	jal	80000bf6 <goto_priv>
    //CSRS(sstatus, SSTATUS_SIE_BIT);
    TEST_ASSERT("vs sw irq with no delegation", 
    80002254:	08200593          	li	a1,130
    80002258:	00026617          	auipc	a2,0x26
    8000225c:	fd860613          	addi	a2,a2,-40 # 80028230 <__func__.0+0x7d0>
    80002260:	00026517          	auipc	a0,0x26
    80002264:	af850513          	addi	a0,a0,-1288 # 80027d58 <__func__.0+0x2f8>
    80002268:	28f230ef          	jal	80025cf6 <printf>
    8000226c:	00047797          	auipc	a5,0x47
    80002270:	da57c783          	lbu	a5,-603(a5) # 80049011 <excpt+0x1>
    80002274:	00026597          	auipc	a1,0x26
    80002278:	abc58593          	addi	a1,a1,-1348 # 80027d30 <__func__.0+0x2d0>
    8000227c:	c799                	beqz	a5,8000228a <interrupt_tests+0x92>
    8000227e:	57fd                	li	a5,-1
    80002280:	6418                	ld	a4,8(s0)
    80002282:	17fe                	slli	a5,a5,0x3f
    80002284:	0789                	addi	a5,a5,2
    80002286:	18f70163          	beq	a4,a5,80002408 <interrupt_tests+0x210>
    8000228a:	00026517          	auipc	a0,0x26
    8000228e:	ae650513          	addi	a0,a0,-1306 # 80027d70 <__func__.0+0x310>
    80002292:	265230ef          	jal	80025cf6 <printf>
    80002296:	00047797          	auipc	a5,0x47
    8000229a:	d7b7c783          	lbu	a5,-645(a5) # 80049011 <excpt+0x1>
    8000229e:	c799                	beqz	a5,800022ac <interrupt_tests+0xb4>
    800022a0:	57fd                	li	a5,-1
    800022a2:	6418                	ld	a4,8(s0)
    800022a4:	17fe                	slli	a5,a5,0x3f
    800022a6:	0789                	addi	a5,a5,2
    800022a8:	14f70863          	beq	a4,a5,800023f8 <interrupt_tests+0x200>
    800022ac:	00026517          	auipc	a0,0x26
    800022b0:	acc50513          	addi	a0,a0,-1332 # 80027d78 <__func__.0+0x318>
    800022b4:	243230ef          	jal	80025cf6 <printf>
    800022b8:	02900513          	li	a0,41
    800022bc:	045220ef          	jal	80024b00 <putchar>
    800022c0:	4529                	li	a0,10
    800022c2:	03f220ef          	jal	80024b00 <putchar>
    800022c6:	00047797          	auipc	a5,0x47
    800022ca:	d4b7c783          	lbu	a5,-693(a5) # 80049011 <excpt+0x1>
    800022ce:	4481                	li	s1,0
    800022d0:	c799                	beqz	a5,800022de <interrupt_tests+0xe6>
    800022d2:	57fd                	li	a5,-1
    800022d4:	6418                	ld	a4,8(s0)
    800022d6:	17fe                	slli	a5,a5,0x3f
    800022d8:	0789                	addi	a5,a5,2
    800022da:	14f70763          	beq	a4,a5,80002428 <interrupt_tests+0x230>
   
    /**
     * Test trigerring VSSI and delegating it. Should trap to VS with cause SSI.
     * It assumes it is already delegated in miedeleg (it should be hardwired)
     */
    goto_priv(PRIV_HS);
    800022de:	450d                	li	a0,3
    800022e0:	917fe0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HIDELEG, 0x4);
    800022e4:	60326073          	csrsi	hideleg,4
    CSRS(CSR_HIP, 0x4);
    800022e8:	64426073          	csrsi	hip,4
    TEST_SETUP_EXCEPT();
    800022ec:	0330000f          	fence	rw,rw
    800022f0:	4785                	li	a5,1
    800022f2:	00047717          	auipc	a4,0x47
    800022f6:	d4073b23          	sd	zero,-682(a4) # 80049048 <excpt+0x38>
    800022fa:	00f41023          	sh	a5,0(s0)
    800022fe:	0330000f          	fence	rw,rw
    goto_priv(PRIV_VS);
    80002302:	4509                	li	a0,2
    80002304:	8f3fe0ef          	jal	80000bf6 <goto_priv>
    CSRS(sie, 0x2);
    80002308:	10416073          	csrsi	sie,2
    CSRS(sstatus, 0x2);
    8000230c:	10016073          	csrsi	sstatus,2
    TEST_ASSERT("vs sw irq with delegation", 
    80002310:	08200593          	li	a1,130
    80002314:	00026617          	auipc	a2,0x26
    80002318:	f3c60613          	addi	a2,a2,-196 # 80028250 <__func__.0+0x7f0>
    8000231c:	00026517          	auipc	a0,0x26
    80002320:	a3c50513          	addi	a0,a0,-1476 # 80027d58 <__func__.0+0x2f8>
    80002324:	1d3230ef          	jal	80025cf6 <printf>
    80002328:	00047797          	auipc	a5,0x47
    8000232c:	ce97c783          	lbu	a5,-791(a5) # 80049011 <excpt+0x1>
    80002330:	00026597          	auipc	a1,0x26
    80002334:	a0058593          	addi	a1,a1,-1536 # 80027d30 <__func__.0+0x2d0>
    80002338:	c799                	beqz	a5,80002346 <interrupt_tests+0x14e>
    8000233a:	57fd                	li	a5,-1
    8000233c:	6418                	ld	a4,8(s0)
    8000233e:	17fe                	slli	a5,a5,0x3f
    80002340:	0785                	addi	a5,a5,1
    80002342:	0ef70b63          	beq	a4,a5,80002438 <interrupt_tests+0x240>
    80002346:	00026517          	auipc	a0,0x26
    8000234a:	a2a50513          	addi	a0,a0,-1494 # 80027d70 <__func__.0+0x310>
    8000234e:	1a9230ef          	jal	80025cf6 <printf>
    80002352:	00047797          	auipc	a5,0x47
    80002356:	cbf7c783          	lbu	a5,-833(a5) # 80049011 <excpt+0x1>
    8000235a:	c799                	beqz	a5,80002368 <interrupt_tests+0x170>
    8000235c:	57fd                	li	a5,-1
    8000235e:	6418                	ld	a4,8(s0)
    80002360:	17fe                	slli	a5,a5,0x3f
    80002362:	0785                	addi	a5,a5,1
    80002364:	08f70263          	beq	a4,a5,800023e8 <interrupt_tests+0x1f0>
    80002368:	00026517          	auipc	a0,0x26
    8000236c:	a1050513          	addi	a0,a0,-1520 # 80027d78 <__func__.0+0x318>
    80002370:	187230ef          	jal	80025cf6 <printf>
    80002374:	02900513          	li	a0,41
    80002378:	788220ef          	jal	80024b00 <putchar>
    8000237c:	4529                	li	a0,10
    8000237e:	782220ef          	jal	80024b00 <putchar>
    80002382:	cca9                	beqz	s1,800023dc <interrupt_tests+0x1e4>
    80002384:	00047497          	auipc	s1,0x47
    80002388:	c8d4c483          	lbu	s1,-883(s1) # 80049011 <excpt+0x1>


    //M模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    

    TEST_END();
    8000238c:	00026597          	auipc	a1,0x26
    80002390:	9a458593          	addi	a1,a1,-1628 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs sw irq with delegation", 
    80002394:	c881                	beqz	s1,800023a4 <interrupt_tests+0x1ac>
    80002396:	57fd                	li	a5,-1
    80002398:	6418                	ld	a4,8(s0)
    8000239a:	17fe                	slli	a5,a5,0x3f
    8000239c:	0785                	addi	a5,a5,1
    8000239e:	02f70463          	beq	a4,a5,800023c6 <interrupt_tests+0x1ce>
    800023a2:	4481                	li	s1,0
    TEST_END();
    800023a4:	00026517          	auipc	a0,0x26
    800023a8:	a3450513          	addi	a0,a0,-1484 # 80027dd8 <__func__.0+0x378>
    800023ac:	14b230ef          	jal	80025cf6 <printf>
    800023b0:	4511                	li	a0,4
    800023b2:	845fe0ef          	jal	80000bf6 <goto_priv>
    800023b6:	8f6ff0ef          	jal	800014ac <reset_state>
}
    800023ba:	60e2                	ld	ra,24(sp)
    800023bc:	6442                	ld	s0,16(sp)
    800023be:	8526                	mv	a0,s1
    800023c0:	64a2                	ld	s1,8(sp)
    800023c2:	6105                	addi	sp,sp,32
    800023c4:	8082                	ret
    TEST_ASSERT("vs sw irq with delegation", 
    800023c6:	00047717          	auipc	a4,0x47
    800023ca:	c4e72703          	lw	a4,-946(a4) # 80049014 <excpt+0x4>
    800023ce:	4789                	li	a5,2
    TEST_END();
    800023d0:	00026597          	auipc	a1,0x26
    800023d4:	95058593          	addi	a1,a1,-1712 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs sw irq with delegation", 
    800023d8:	fcf706e3          	beq	a4,a5,800023a4 <interrupt_tests+0x1ac>
    800023dc:	4481                	li	s1,0
    TEST_END();
    800023de:	00026597          	auipc	a1,0x26
    800023e2:	95258593          	addi	a1,a1,-1710 # 80027d30 <__func__.0+0x2d0>
    800023e6:	bf7d                	j	800023a4 <interrupt_tests+0x1ac>
    TEST_ASSERT("vs sw irq with delegation", 
    800023e8:	00047717          	auipc	a4,0x47
    800023ec:	c2c72703          	lw	a4,-980(a4) # 80049014 <excpt+0x4>
    800023f0:	4789                	li	a5,2
    800023f2:	f6f71be3          	bne	a4,a5,80002368 <interrupt_tests+0x170>
    800023f6:	b759                	j	8000237c <interrupt_tests+0x184>
    TEST_ASSERT("vs sw irq with no delegation", 
    800023f8:	00047717          	auipc	a4,0x47
    800023fc:	c1c72703          	lw	a4,-996(a4) # 80049014 <excpt+0x4>
    80002400:	478d                	li	a5,3
    80002402:	eaf715e3          	bne	a4,a5,800022ac <interrupt_tests+0xb4>
    80002406:	bd6d                	j	800022c0 <interrupt_tests+0xc8>
    80002408:	00047717          	auipc	a4,0x47
    8000240c:	c0c72703          	lw	a4,-1012(a4) # 80049014 <excpt+0x4>
    80002410:	478d                	li	a5,3
    80002412:	00026597          	auipc	a1,0x26
    80002416:	90e58593          	addi	a1,a1,-1778 # 80027d20 <__func__.0+0x2c0>
    8000241a:	e6f708e3          	beq	a4,a5,8000228a <interrupt_tests+0x92>
    8000241e:	00026597          	auipc	a1,0x26
    80002422:	91258593          	addi	a1,a1,-1774 # 80027d30 <__func__.0+0x2d0>
    80002426:	b595                	j	8000228a <interrupt_tests+0x92>
    80002428:	00047497          	auipc	s1,0x47
    8000242c:	bec4a483          	lw	s1,-1044(s1) # 80049014 <excpt+0x4>
    80002430:	14f5                	addi	s1,s1,-3
    80002432:	0014b493          	seqz	s1,s1
    80002436:	b565                	j	800022de <interrupt_tests+0xe6>
    TEST_ASSERT("vs sw irq with delegation", 
    80002438:	00047717          	auipc	a4,0x47
    8000243c:	bdc72703          	lw	a4,-1060(a4) # 80049014 <excpt+0x4>
    80002440:	4789                	li	a5,2
    80002442:	00026597          	auipc	a1,0x26
    80002446:	8de58593          	addi	a1,a1,-1826 # 80027d20 <__func__.0+0x2c0>
    8000244a:	eef70ee3          	beq	a4,a5,80002346 <interrupt_tests+0x14e>
    8000244e:	00026597          	auipc	a1,0x26
    80002452:	8e258593          	addi	a1,a1,-1822 # 80027d30 <__func__.0+0x2d0>
    80002456:	bdc5                	j	80002346 <interrupt_tests+0x14e>

0000000080002458 <two_stage_translation_1>:

static inline void touch(uintptr_t addr){
    touchwrite(addr);
}

bool two_stage_translation_1(){
    80002458:	7139                	addi	sp,sp,-64
    
    TEST_START();
    8000245a:	00024597          	auipc	a1,0x24
    8000245e:	e2e58593          	addi	a1,a1,-466 # 80026288 <__func__.20>
    80002462:	00026517          	auipc	a0,0x26
    80002466:	8de50513          	addi	a0,a0,-1826 # 80027d40 <__func__.0+0x2e0>
bool two_stage_translation_1(){
    8000246a:	fc06                	sd	ra,56(sp)
    8000246c:	f822                	sd	s0,48(sp)
    8000246e:	f426                	sd	s1,40(sp)
    80002470:	f04a                	sd	s2,32(sp)
    80002472:	ec4e                	sd	s3,24(sp)
    TEST_START();
    80002474:	083230ef          	jal	80025cf6 <printf>
    80002478:	4529                	li	a0,10
    8000247a:	686220ef          	jal	80024b00 <putchar>
static inline uint8_t read8(uintptr_t addr){
    return *((volatile uint8_t*) addr);    
}

static inline void write64(uintptr_t addr, uint64_t val){
    *((volatile uint64_t*) addr) = val;
    8000247e:	2201b737          	lui	a4,0x2201b
    80002482:	000887b7          	lui	a5,0x88
    80002486:	070a                	slli	a4,a4,0x2
    80002488:	44c5                	li	s1,17
    8000248a:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    8000248e:	e304                	sd	s1,0(a4)
    80002490:	07b2                	slli	a5,a5,0xc
    80002492:	02200913          	li	s2,34
    80002496:	0127b023          	sd	s2,0(a5)
    write64(addr2, 0x22);

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    8000249a:	450d                	li	a0,3
    8000249c:	f5afe0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    800024a0:	940fe0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800024a4:	b7efe0ef          	jal	80000822 <hpt_init>

    /**
     * Setup guest page tables.
     */
    vspt_init();
    800024a8:	a08fe0ef          	jal	800006b0 <vspt_init>
    return *((volatile uint64_t*) addr);
    800024ac:	4001b737          	lui	a4,0x4001b
    800024b0:	070a                	slli	a4,a4,0x2
    800024b2:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    800024b6:	001007b7          	lui	a5,0x100
    800024ba:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    800024be:	07b2                	slli	a5,a5,0xc

    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", check1 && check2);
    800024c0:	00026617          	auipc	a2,0x26
    800024c4:	db060613          	addi	a2,a2,-592 # 80028270 <__func__.0+0x810>
    800024c8:	08200593          	li	a1,130
    800024cc:	00026517          	auipc	a0,0x26
    800024d0:	88c50513          	addi	a0,a0,-1908 # 80027d58 <__func__.0+0x2f8>
    800024d4:	6380                	ld	s0,0(a5)
    800024d6:	021230ef          	jal	80025cf6 <printf>
    800024da:	3e998463          	beq	s3,s1,800028c2 <two_stage_translation_1+0x46a>
    800024de:	00026597          	auipc	a1,0x26
    800024e2:	85258593          	addi	a1,a1,-1966 # 80027d30 <__func__.0+0x2d0>
    800024e6:	00026517          	auipc	a0,0x26
    800024ea:	88a50513          	addi	a0,a0,-1910 # 80027d70 <__func__.0+0x310>
    800024ee:	009230ef          	jal	80025cf6 <printf>
    800024f2:	00026517          	auipc	a0,0x26
    800024f6:	88650513          	addi	a0,a0,-1914 # 80027d78 <__func__.0+0x318>
    800024fa:	7fc230ef          	jal	80025cf6 <printf>
    800024fe:	02900513          	li	a0,41
    80002502:	5fe220ef          	jal	80024b00 <putchar>
    80002506:	4529                	li	a0,10
    80002508:	5f8220ef          	jal	80024b00 <putchar>
    8000250c:	4401                	li	s0,0
    
    goto_priv(PRIV_HS);
    8000250e:	450d                	li	a0,3
    80002510:	ee6fe0ef          	jal	80000bf6 <goto_priv>
    hpt_switch();
    80002514:	dd4fe0ef          	jal	80000ae8 <hpt_switch>
    asm volatile(
    80002518:	22000073          	.insn	4, 0x22000073
    asm volatile(
    8000251c:	62000073          	.insn	4, 0x62000073
    hfence();
    goto_priv(PRIV_VS);
    80002520:	4509                	li	a0,2
    80002522:	ed4fe0ef          	jal	80000bf6 <goto_priv>
    80002526:	001007b7          	lui	a5,0x100
    8000252a:	4001b737          	lui	a4,0x4001b
    8000252e:	070a                	slli	a4,a4,0x2
    80002530:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002534:	07b2                	slli	a5,a5,0xc
    80002536:	00073903          	ld	s2,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    check1 = read64(vaddr1) == 0x22;
    check2 = read64(vaddr2) == 0x11;   
    // INFO("0%lx 0x%lx", read64(vaddr1), read64(vaddr2));
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    8000253a:	00026617          	auipc	a2,0x26
    8000253e:	d4e60613          	addi	a2,a2,-690 # 80028288 <__func__.0+0x828>
    80002542:	08200593          	li	a1,130
    80002546:	00026517          	auipc	a0,0x26
    8000254a:	81250513          	addi	a0,a0,-2030 # 80027d58 <__func__.0+0x2f8>
    8000254e:	6384                	ld	s1,0(a5)
    80002550:	7a6230ef          	jal	80025cf6 <printf>
    80002554:	02200793          	li	a5,34
    80002558:	32f90563          	beq	s2,a5,80002882 <two_stage_translation_1+0x42a>
    8000255c:	00025597          	auipc	a1,0x25
    80002560:	7d458593          	addi	a1,a1,2004 # 80027d30 <__func__.0+0x2d0>
    80002564:	00026517          	auipc	a0,0x26
    80002568:	80c50513          	addi	a0,a0,-2036 # 80027d70 <__func__.0+0x310>
    8000256c:	78a230ef          	jal	80025cf6 <printf>
    80002570:	00026517          	auipc	a0,0x26
    80002574:	80850513          	addi	a0,a0,-2040 # 80027d78 <__func__.0+0x318>
    80002578:	77e230ef          	jal	80025cf6 <printf>
    8000257c:	02900513          	li	a0,41
    80002580:	580220ef          	jal	80024b00 <putchar>
    80002584:	4529                	li	a0,10
    80002586:	57a220ef          	jal	80024b00 <putchar>
    8000258a:	4401                	li	s0,0

    vspt_switch();
    8000258c:	d42fe0ef          	jal	80000ace <vspt_switch>
    asm volatile ("sfence.vma \n\t");
    80002590:	12000073          	sfence.vma
    80002594:	001007b7          	lui	a5,0x100
    80002598:	4001b737          	lui	a4,0x4001b
    8000259c:	070a                	slli	a4,a4,0x2
    8000259e:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    800025a2:	07b2                	slli	a5,a5,0xc
    800025a4:	00073903          	ld	s2,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    sfence();
    check1 = read64(vaddr1) == 0x11;
    check2 = read64(vaddr2) == 0x22;   
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    800025a8:	00026617          	auipc	a2,0x26
    800025ac:	d1860613          	addi	a2,a2,-744 # 800282c0 <__func__.0+0x860>
    800025b0:	08200593          	li	a1,130
    800025b4:	00025517          	auipc	a0,0x25
    800025b8:	7a450513          	addi	a0,a0,1956 # 80027d58 <__func__.0+0x2f8>
    800025bc:	6384                	ld	s1,0(a5)
    800025be:	738230ef          	jal	80025cf6 <printf>
    800025c2:	47c5                	li	a5,17
    800025c4:	34f90b63          	beq	s2,a5,8000291a <two_stage_translation_1+0x4c2>
    800025c8:	00025597          	auipc	a1,0x25
    800025cc:	76858593          	addi	a1,a1,1896 # 80027d30 <__func__.0+0x2d0>
    800025d0:	00025517          	auipc	a0,0x25
    800025d4:	7a050513          	addi	a0,a0,1952 # 80027d70 <__func__.0+0x310>
    800025d8:	71e230ef          	jal	80025cf6 <printf>
    800025dc:	00025517          	auipc	a0,0x25
    800025e0:	79c50513          	addi	a0,a0,1948 # 80027d78 <__func__.0+0x318>
    800025e4:	712230ef          	jal	80025cf6 <printf>
    800025e8:	02900513          	li	a0,41
    800025ec:	514220ef          	jal	80024b00 <putchar>
    800025f0:	4529                	li	a0,10
    800025f2:	50e220ef          	jal	80024b00 <putchar>
    800025f6:	4481                	li	s1,0

    goto_priv(PRIV_M); 
    800025f8:	4511                	li	a0,4
    800025fa:	dfcfe0ef          	jal	80000bf6 <goto_priv>
    CSRS(medeleg, 1ull << CAUSE_LGPF);
    800025fe:	002007b7          	lui	a5,0x200
    80002602:	3027a073          	csrs	medeleg,a5
    goto_priv(PRIV_VS);
    80002606:	4509                	li	a0,2
    80002608:	deefe0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000260c:	0330000f          	fence	rw,rw
    80002610:	00047417          	auipc	s0,0x47
    80002614:	a0040413          	addi	s0,s0,-1536 # 80049010 <excpt>
    80002618:	4785                	li	a5,1
    8000261a:	00047717          	auipc	a4,0x47
    8000261e:	a2073723          	sd	zero,-1490(a4) # 80049048 <excpt+0x38>
    80002622:	00f41023          	sh	a5,0(s0)
    80002626:	0330000f          	fence	rw,rw
    8000262a:	001007b7          	lui	a5,0x100
    8000262e:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80002632:	07b2                	slli	a5,a5,0xc
    80002634:	639c                	ld	a5,0(a5)
    read64(vs_page_base(VSRWX_GI));    
    TEST_ASSERT(
    80002636:	08200593          	li	a1,130
    8000263a:	00026617          	auipc	a2,0x26
    8000263e:	cbe60613          	addi	a2,a2,-834 # 800282f8 <__func__.0+0x898>
    80002642:	00025517          	auipc	a0,0x25
    80002646:	71650513          	addi	a0,a0,1814 # 80027d58 <__func__.0+0x2f8>
    8000264a:	6ac230ef          	jal	80025cf6 <printf>
    8000264e:	00047797          	auipc	a5,0x47
    80002652:	9c37c783          	lbu	a5,-1597(a5) # 80049011 <excpt+0x1>
    80002656:	00025597          	auipc	a1,0x25
    8000265a:	6da58593          	addi	a1,a1,1754 # 80027d30 <__func__.0+0x2d0>
    8000265e:	c789                	beqz	a5,80002668 <two_stage_translation_1+0x210>
    80002660:	6418                	ld	a4,8(s0)
    80002662:	47d5                	li	a5,21
    80002664:	40f70b63          	beq	a4,a5,80002a7a <two_stage_translation_1+0x622>
    80002668:	00025517          	auipc	a0,0x25
    8000266c:	70850513          	addi	a0,a0,1800 # 80027d70 <__func__.0+0x310>
    80002670:	686230ef          	jal	80025cf6 <printf>
    80002674:	00047797          	auipc	a5,0x47
    80002678:	99d7c783          	lbu	a5,-1635(a5) # 80049011 <excpt+0x1>
    8000267c:	c789                	beqz	a5,80002686 <two_stage_translation_1+0x22e>
    8000267e:	6418                	ld	a4,8(s0)
    80002680:	47d5                	li	a5,21
    80002682:	2cf70e63          	beq	a4,a5,8000295e <two_stage_translation_1+0x506>
    80002686:	00025517          	auipc	a0,0x25
    8000268a:	6f250513          	addi	a0,a0,1778 # 80027d78 <__func__.0+0x318>
    8000268e:	668230ef          	jal	80025cf6 <printf>
    80002692:	02900513          	li	a0,41
    80002696:	46a220ef          	jal	80024b00 <putchar>
    8000269a:	4529                	li	a0,10
    8000269c:	464220ef          	jal	80024b00 <putchar>
    800026a0:	c899                	beqz	s1,800026b6 <two_stage_translation_1+0x25e>
    800026a2:	00047797          	auipc	a5,0x47
    800026a6:	96f7c783          	lbu	a5,-1681(a5) # 80049011 <excpt+0x1>
    800026aa:	4481                	li	s1,0
    800026ac:	c789                	beqz	a5,800026b6 <two_stage_translation_1+0x25e>
    800026ae:	6418                	ld	a4,8(s0)
    800026b0:	47d5                	li	a5,21
    800026b2:	34f70f63          	beq	a4,a5,80002a10 <two_stage_translation_1+0x5b8>
        excpt.priv == PRIV_HS &&
        excpt.gva == true &&
        excpt.xpv == true
    );

    TEST_SETUP_EXCEPT();
    800026b6:	0330000f          	fence	rw,rw
    800026ba:	4785                	li	a5,1
    800026bc:	00047717          	auipc	a4,0x47
    800026c0:	98073623          	sd	zero,-1652(a4) # 80049048 <excpt+0x38>
    800026c4:	00f41023          	sh	a5,0(s0)
    800026c8:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vs_page_base(VSRWX_GI)); 
    800026cc:	001007b7          	lui	a5,0x100
    800026d0:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800026d4:	07b2                	slli	a5,a5,0xc
    800026d6:	00000297          	auipc	t0,0x0
    800026da:	00c28293          	addi	t0,t0,12 # 800026e2 <two_stage_translation_1+0x28a>
    800026de:	02543c23          	sd	t0,56(s0)
    800026e2:	8782                	jr	a5
    TEST_ASSERT(
    800026e4:	08200593          	li	a1,130
    800026e8:	00026617          	auipc	a2,0x26
    800026ec:	c4060613          	addi	a2,a2,-960 # 80028328 <__func__.0+0x8c8>
    800026f0:	00025517          	auipc	a0,0x25
    800026f4:	66850513          	addi	a0,a0,1640 # 80027d58 <__func__.0+0x2f8>
    800026f8:	5fe230ef          	jal	80025cf6 <printf>
    800026fc:	00047797          	auipc	a5,0x47
    80002700:	9157c783          	lbu	a5,-1771(a5) # 80049011 <excpt+0x1>
    80002704:	00025597          	auipc	a1,0x25
    80002708:	62c58593          	addi	a1,a1,1580 # 80027d30 <__func__.0+0x2d0>
    8000270c:	c789                	beqz	a5,80002716 <two_stage_translation_1+0x2be>
    8000270e:	6418                	ld	a4,8(s0)
    80002710:	47d1                	li	a5,20
    80002712:	3cf70763          	beq	a4,a5,80002ae0 <two_stage_translation_1+0x688>
    80002716:	00025517          	auipc	a0,0x25
    8000271a:	65a50513          	addi	a0,a0,1626 # 80027d70 <__func__.0+0x310>
    8000271e:	5d8230ef          	jal	80025cf6 <printf>
    80002722:	00047797          	auipc	a5,0x47
    80002726:	8ef7c783          	lbu	a5,-1809(a5) # 80049011 <excpt+0x1>
    8000272a:	c789                	beqz	a5,80002734 <two_stage_translation_1+0x2dc>
    8000272c:	6418                	ld	a4,8(s0)
    8000272e:	47d1                	li	a5,20
    80002730:	26f70263          	beq	a4,a5,80002994 <two_stage_translation_1+0x53c>
    80002734:	00025517          	auipc	a0,0x25
    80002738:	64450513          	addi	a0,a0,1604 # 80027d78 <__func__.0+0x318>
    8000273c:	5ba230ef          	jal	80025cf6 <printf>
    80002740:	02900513          	li	a0,41
    80002744:	3bc220ef          	jal	80024b00 <putchar>
    80002748:	4529                	li	a0,10
    8000274a:	3b6220ef          	jal	80024b00 <putchar>
    8000274e:	c899                	beqz	s1,80002764 <two_stage_translation_1+0x30c>
    80002750:	00047797          	auipc	a5,0x47
    80002754:	8c17c783          	lbu	a5,-1855(a5) # 80049011 <excpt+0x1>
    80002758:	4481                	li	s1,0
    8000275a:	c789                	beqz	a5,80002764 <two_stage_translation_1+0x30c>
    8000275c:	6418                	ld	a4,8(s0)
    8000275e:	47d1                	li	a5,20
    80002760:	28f70363          	beq	a4,a5,800029e6 <two_stage_translation_1+0x58e>
        excpt.priv == PRIV_M  &&
        excpt.gva == true &&
        excpt.xpv == true
    );

    goto_priv(PRIV_M);
    80002764:	4511                	li	a0,4
    80002766:	c90fe0ef          	jal	80000bf6 <goto_priv>
    CSRS(medeleg, 1 << CAUSE_LPF | 1 << CAUSE_LGPF);
    8000276a:	002027b7          	lui	a5,0x202
    8000276e:	3027a073          	csrs	medeleg,a5
    goto_priv(PRIV_HS); 
    80002772:	450d                	li	a0,3
    80002774:	c82fe0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HEDELEG, 1 << CAUSE_LPF);
    80002778:	6789                	lui	a5,0x2
    8000277a:	6027a073          	csrs	hedeleg,a5
    goto_priv(PRIV_VS);
    8000277e:	4509                	li	a0,2
    80002780:	c76fe0ef          	jal	80000bf6 <goto_priv>
    80002784:	12000073          	sfence.vma
    sfence();
    TEST_SETUP_EXCEPT();
    80002788:	0330000f          	fence	rw,rw
    8000278c:	4785                	li	a5,1
    8000278e:	00047717          	auipc	a4,0x47
    80002792:	8a073d23          	sd	zero,-1862(a4) # 80049048 <excpt+0x38>
    80002796:	00f41023          	sh	a5,0(s0)
    8000279a:	0330000f          	fence	rw,rw
    volatile uint64_t x = *(volatile uint64_t *)addr;
    8000279e:	400197b7          	lui	a5,0x40019
    800027a2:	078a                	slli	a5,a5,0x2
    800027a4:	639c                	ld	a5,0(a5)
    touchread(vs_page_base(VSI_GI));    
    TEST_ASSERT(
    800027a6:	08200593          	li	a1,130
    800027aa:	00026617          	auipc	a2,0x26
    800027ae:	bbe60613          	addi	a2,a2,-1090 # 80028368 <__func__.0+0x908>
    800027b2:	00025517          	auipc	a0,0x25
    800027b6:	5a650513          	addi	a0,a0,1446 # 80027d58 <__func__.0+0x2f8>
    volatile uint64_t x = *(volatile uint64_t *)addr;
    800027ba:	e43e                	sd	a5,8(sp)
    TEST_ASSERT(
    800027bc:	53a230ef          	jal	80025cf6 <printf>
    800027c0:	00047797          	auipc	a5,0x47
    800027c4:	8517c783          	lbu	a5,-1967(a5) # 80049011 <excpt+0x1>
    800027c8:	00025597          	auipc	a1,0x25
    800027cc:	56858593          	addi	a1,a1,1384 # 80027d30 <__func__.0+0x2d0>
    800027d0:	c789                	beqz	a5,800027da <two_stage_translation_1+0x382>
    800027d2:	6418                	ld	a4,8(s0)
    800027d4:	47b5                	li	a5,13
    800027d6:	2cf70f63          	beq	a4,a5,80002ab4 <two_stage_translation_1+0x65c>
    800027da:	00025517          	auipc	a0,0x25
    800027de:	59650513          	addi	a0,a0,1430 # 80027d70 <__func__.0+0x310>
    800027e2:	514230ef          	jal	80025cf6 <printf>
    800027e6:	00047797          	auipc	a5,0x47
    800027ea:	82b7c783          	lbu	a5,-2005(a5) # 80049011 <excpt+0x1>
    800027ee:	c789                	beqz	a5,800027f8 <two_stage_translation_1+0x3a0>
    800027f0:	6418                	ld	a4,8(s0)
    800027f2:	47b5                	li	a5,13
    800027f4:	1cf70b63          	beq	a4,a5,800029ca <two_stage_translation_1+0x572>
    800027f8:	00025517          	auipc	a0,0x25
    800027fc:	58050513          	addi	a0,a0,1408 # 80027d78 <__func__.0+0x318>
    80002800:	4f6230ef          	jal	80025cf6 <printf>
    80002804:	02900513          	li	a0,41
    80002808:	2f8220ef          	jal	80024b00 <putchar>
    8000280c:	4529                	li	a0,10
    8000280e:	2f2220ef          	jal	80024b00 <putchar>
    80002812:	c0b5                	beqz	s1,80002876 <two_stage_translation_1+0x41e>
    80002814:	00046497          	auipc	s1,0x46
    80002818:	7fd4c483          	lbu	s1,2045(s1) # 80049011 <excpt+0x1>
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_VS && 
        excpt.gva == false
    );

    TEST_END();
    8000281c:	00025597          	auipc	a1,0x25
    80002820:	51458593          	addi	a1,a1,1300 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT(
    80002824:	c491                	beqz	s1,80002830 <two_stage_translation_1+0x3d8>
    80002826:	6418                	ld	a4,8(s0)
    80002828:	47b5                	li	a5,13
    8000282a:	02f70663          	beq	a4,a5,80002856 <two_stage_translation_1+0x3fe>
    8000282e:	4481                	li	s1,0
    TEST_END();
    80002830:	00025517          	auipc	a0,0x25
    80002834:	5a850513          	addi	a0,a0,1448 # 80027dd8 <__func__.0+0x378>
    80002838:	4be230ef          	jal	80025cf6 <printf>
    8000283c:	4511                	li	a0,4
    8000283e:	bb8fe0ef          	jal	80000bf6 <goto_priv>
    80002842:	c6bfe0ef          	jal	800014ac <reset_state>
}
    80002846:	70e2                	ld	ra,56(sp)
    80002848:	7442                	ld	s0,48(sp)
    8000284a:	7902                	ld	s2,32(sp)
    8000284c:	69e2                	ld	s3,24(sp)
    8000284e:	8526                	mv	a0,s1
    80002850:	74a2                	ld	s1,40(sp)
    80002852:	6121                	addi	sp,sp,64
    80002854:	8082                	ret
    TEST_ASSERT(
    80002856:	00046717          	auipc	a4,0x46
    8000285a:	7be72703          	lw	a4,1982(a4) # 80049014 <excpt+0x4>
    8000285e:	4789                	li	a5,2
    80002860:	fcf717e3          	bne	a4,a5,8000282e <two_stage_translation_1+0x3d6>
    80002864:	00046797          	auipc	a5,0x46
    80002868:	7dc7c783          	lbu	a5,2012(a5) # 80049040 <excpt+0x30>
    TEST_END();
    8000286c:	00025597          	auipc	a1,0x25
    80002870:	4b458593          	addi	a1,a1,1204 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT(
    80002874:	dfd5                	beqz	a5,80002830 <two_stage_translation_1+0x3d8>
    80002876:	4481                	li	s1,0
    TEST_END();
    80002878:	00025597          	auipc	a1,0x25
    8000287c:	4b858593          	addi	a1,a1,1208 # 80027d30 <__func__.0+0x2d0>
    80002880:	bf45                	j	80002830 <two_stage_translation_1+0x3d8>
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    80002882:	47c5                	li	a5,17
    80002884:	1cf48b63          	beq	s1,a5,80002a5a <two_stage_translation_1+0x602>
    80002888:	00025597          	auipc	a1,0x25
    8000288c:	4a858593          	addi	a1,a1,1192 # 80027d30 <__func__.0+0x2d0>
    80002890:	00025517          	auipc	a0,0x25
    80002894:	4e050513          	addi	a0,a0,1248 # 80027d70 <__func__.0+0x310>
    80002898:	45e230ef          	jal	80025cf6 <printf>
    8000289c:	00025517          	auipc	a0,0x25
    800028a0:	4dc50513          	addi	a0,a0,1244 # 80027d78 <__func__.0+0x318>
    800028a4:	452230ef          	jal	80025cf6 <printf>
    800028a8:	02900513          	li	a0,41
    800028ac:	254220ef          	jal	80024b00 <putchar>
    800028b0:	4529                	li	a0,10
    800028b2:	24e220ef          	jal	80024b00 <putchar>
    800028b6:	cc040ae3          	beqz	s0,8000258a <two_stage_translation_1+0x132>
    800028ba:	14bd                	addi	s1,s1,-17
    800028bc:	0014b413          	seqz	s0,s1
    800028c0:	b1f1                	j	8000258c <two_stage_translation_1+0x134>
    TEST_ASSERT("vs gets right values", check1 && check2);
    800028c2:	03240e63          	beq	s0,s2,800028fe <two_stage_translation_1+0x4a6>
    800028c6:	00025597          	auipc	a1,0x25
    800028ca:	46a58593          	addi	a1,a1,1130 # 80027d30 <__func__.0+0x2d0>
    800028ce:	00025517          	auipc	a0,0x25
    800028d2:	4a250513          	addi	a0,a0,1186 # 80027d70 <__func__.0+0x310>
    800028d6:	420230ef          	jal	80025cf6 <printf>
    800028da:	00025517          	auipc	a0,0x25
    800028de:	49e50513          	addi	a0,a0,1182 # 80027d78 <__func__.0+0x318>
    800028e2:	414230ef          	jal	80025cf6 <printf>
    800028e6:	02900513          	li	a0,41
    800028ea:	216220ef          	jal	80024b00 <putchar>
    800028ee:	4529                	li	a0,10
    800028f0:	210220ef          	jal	80024b00 <putchar>
    800028f4:	fde40413          	addi	s0,s0,-34
    800028f8:	00143413          	seqz	s0,s0
    800028fc:	b909                	j	8000250e <two_stage_translation_1+0xb6>
    800028fe:	00025597          	auipc	a1,0x25
    80002902:	42258593          	addi	a1,a1,1058 # 80027d20 <__func__.0+0x2c0>
    80002906:	00025517          	auipc	a0,0x25
    8000290a:	46a50513          	addi	a0,a0,1130 # 80027d70 <__func__.0+0x310>
    8000290e:	3e8230ef          	jal	80025cf6 <printf>
    80002912:	4529                	li	a0,10
    80002914:	1ec220ef          	jal	80024b00 <putchar>
    80002918:	bff1                	j	800028f4 <two_stage_translation_1+0x49c>
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    8000291a:	02200793          	li	a5,34
    8000291e:	10f48e63          	beq	s1,a5,80002a3a <two_stage_translation_1+0x5e2>
    80002922:	00025597          	auipc	a1,0x25
    80002926:	40e58593          	addi	a1,a1,1038 # 80027d30 <__func__.0+0x2d0>
    8000292a:	00025517          	auipc	a0,0x25
    8000292e:	44650513          	addi	a0,a0,1094 # 80027d70 <__func__.0+0x310>
    80002932:	3c4230ef          	jal	80025cf6 <printf>
    80002936:	00025517          	auipc	a0,0x25
    8000293a:	44250513          	addi	a0,a0,1090 # 80027d78 <__func__.0+0x318>
    8000293e:	3b8230ef          	jal	80025cf6 <printf>
    80002942:	02900513          	li	a0,41
    80002946:	1ba220ef          	jal	80024b00 <putchar>
    8000294a:	4529                	li	a0,10
    8000294c:	1b4220ef          	jal	80024b00 <putchar>
    80002950:	ca0403e3          	beqz	s0,800025f6 <two_stage_translation_1+0x19e>
    80002954:	fde48493          	addi	s1,s1,-34
    80002958:	0014b493          	seqz	s1,s1
    8000295c:	b971                	j	800025f8 <two_stage_translation_1+0x1a0>
    TEST_ASSERT(
    8000295e:	7418                	ld	a4,40(s0)
    80002960:	400197b7          	lui	a5,0x40019
    80002964:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002968:	d0f71fe3          	bne	a4,a5,80002686 <two_stage_translation_1+0x22e>
    8000296c:	00046717          	auipc	a4,0x46
    80002970:	6a872703          	lw	a4,1704(a4) # 80049014 <excpt+0x4>
    80002974:	478d                	li	a5,3
    80002976:	d0f718e3          	bne	a4,a5,80002686 <two_stage_translation_1+0x22e>
    8000297a:	00046797          	auipc	a5,0x46
    8000297e:	6c67c783          	lbu	a5,1734(a5) # 80049040 <excpt+0x30>
    80002982:	d00782e3          	beqz	a5,80002686 <two_stage_translation_1+0x22e>
    80002986:	00046797          	auipc	a5,0x46
    8000298a:	6bb7c783          	lbu	a5,1723(a5) # 80049041 <excpt+0x31>
    8000298e:	d00796e3          	bnez	a5,8000269a <two_stage_translation_1+0x242>
    80002992:	b9d5                	j	80002686 <two_stage_translation_1+0x22e>
    TEST_ASSERT(
    80002994:	7418                	ld	a4,40(s0)
    80002996:	400197b7          	lui	a5,0x40019
    8000299a:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    8000299e:	d8f71be3          	bne	a4,a5,80002734 <two_stage_translation_1+0x2dc>
    800029a2:	00046717          	auipc	a4,0x46
    800029a6:	67272703          	lw	a4,1650(a4) # 80049014 <excpt+0x4>
    800029aa:	4791                	li	a5,4
    800029ac:	d8f714e3          	bne	a4,a5,80002734 <two_stage_translation_1+0x2dc>
    800029b0:	00046797          	auipc	a5,0x46
    800029b4:	6907c783          	lbu	a5,1680(a5) # 80049040 <excpt+0x30>
    800029b8:	d6078ee3          	beqz	a5,80002734 <two_stage_translation_1+0x2dc>
    800029bc:	00046797          	auipc	a5,0x46
    800029c0:	6857c783          	lbu	a5,1669(a5) # 80049041 <excpt+0x31>
    800029c4:	d80792e3          	bnez	a5,80002748 <two_stage_translation_1+0x2f0>
    800029c8:	b3b5                	j	80002734 <two_stage_translation_1+0x2dc>
    TEST_ASSERT(
    800029ca:	00046717          	auipc	a4,0x46
    800029ce:	64a72703          	lw	a4,1610(a4) # 80049014 <excpt+0x4>
    800029d2:	4789                	li	a5,2
    800029d4:	e2f712e3          	bne	a4,a5,800027f8 <two_stage_translation_1+0x3a0>
    800029d8:	00046797          	auipc	a5,0x46
    800029dc:	6687c783          	lbu	a5,1640(a5) # 80049040 <excpt+0x30>
    800029e0:	e20786e3          	beqz	a5,8000280c <two_stage_translation_1+0x3b4>
    800029e4:	bd11                	j	800027f8 <two_stage_translation_1+0x3a0>
    TEST_ASSERT(
    800029e6:	7418                	ld	a4,40(s0)
    800029e8:	400197b7          	lui	a5,0x40019
    800029ec:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    800029f0:	d6f71ae3          	bne	a4,a5,80002764 <two_stage_translation_1+0x30c>
    800029f4:	00046717          	auipc	a4,0x46
    800029f8:	62072703          	lw	a4,1568(a4) # 80049014 <excpt+0x4>
    800029fc:	4791                	li	a5,4
    800029fe:	d6f713e3          	bne	a4,a5,80002764 <two_stage_translation_1+0x30c>
    80002a02:	03045483          	lhu	s1,48(s0)
    80002a06:	eff48493          	addi	s1,s1,-257
    80002a0a:	0014b493          	seqz	s1,s1
    80002a0e:	bb99                	j	80002764 <two_stage_translation_1+0x30c>
    TEST_ASSERT(
    80002a10:	7418                	ld	a4,40(s0)
    80002a12:	400197b7          	lui	a5,0x40019
    80002a16:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002a1a:	c8f71ee3          	bne	a4,a5,800026b6 <two_stage_translation_1+0x25e>
    80002a1e:	00046717          	auipc	a4,0x46
    80002a22:	5f672703          	lw	a4,1526(a4) # 80049014 <excpt+0x4>
    80002a26:	478d                	li	a5,3
    80002a28:	c8f717e3          	bne	a4,a5,800026b6 <two_stage_translation_1+0x25e>
    80002a2c:	03045483          	lhu	s1,48(s0)
    80002a30:	eff48493          	addi	s1,s1,-257
    80002a34:	0014b493          	seqz	s1,s1
    80002a38:	b9bd                	j	800026b6 <two_stage_translation_1+0x25e>
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    80002a3a:	00025597          	auipc	a1,0x25
    80002a3e:	2e658593          	addi	a1,a1,742 # 80027d20 <__func__.0+0x2c0>
    80002a42:	00025517          	auipc	a0,0x25
    80002a46:	32e50513          	addi	a0,a0,814 # 80027d70 <__func__.0+0x310>
    80002a4a:	2ac230ef          	jal	80025cf6 <printf>
    80002a4e:	4529                	li	a0,10
    80002a50:	0b0220ef          	jal	80024b00 <putchar>
    80002a54:	ba0401e3          	beqz	s0,800025f6 <two_stage_translation_1+0x19e>
    80002a58:	bdf5                	j	80002954 <two_stage_translation_1+0x4fc>
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    80002a5a:	00025597          	auipc	a1,0x25
    80002a5e:	2c658593          	addi	a1,a1,710 # 80027d20 <__func__.0+0x2c0>
    80002a62:	00025517          	auipc	a0,0x25
    80002a66:	30e50513          	addi	a0,a0,782 # 80027d70 <__func__.0+0x310>
    80002a6a:	28c230ef          	jal	80025cf6 <printf>
    80002a6e:	4529                	li	a0,10
    80002a70:	090220ef          	jal	80024b00 <putchar>
    80002a74:	b0040be3          	beqz	s0,8000258a <two_stage_translation_1+0x132>
    80002a78:	b589                	j	800028ba <two_stage_translation_1+0x462>
    TEST_ASSERT(
    80002a7a:	7418                	ld	a4,40(s0)
    80002a7c:	400197b7          	lui	a5,0x40019
    80002a80:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002a84:	bef712e3          	bne	a4,a5,80002668 <two_stage_translation_1+0x210>
    80002a88:	00046717          	auipc	a4,0x46
    80002a8c:	58c72703          	lw	a4,1420(a4) # 80049014 <excpt+0x4>
    80002a90:	478d                	li	a5,3
    80002a92:	bcf71be3          	bne	a4,a5,80002668 <two_stage_translation_1+0x210>
    80002a96:	03045703          	lhu	a4,48(s0)
    80002a9a:	10100793          	li	a5,257
    80002a9e:	00025597          	auipc	a1,0x25
    80002aa2:	28258593          	addi	a1,a1,642 # 80027d20 <__func__.0+0x2c0>
    80002aa6:	bcf701e3          	beq	a4,a5,80002668 <two_stage_translation_1+0x210>
    80002aaa:	00025597          	auipc	a1,0x25
    80002aae:	28658593          	addi	a1,a1,646 # 80027d30 <__func__.0+0x2d0>
    80002ab2:	be5d                	j	80002668 <two_stage_translation_1+0x210>
    TEST_ASSERT(
    80002ab4:	00046717          	auipc	a4,0x46
    80002ab8:	56072703          	lw	a4,1376(a4) # 80049014 <excpt+0x4>
    80002abc:	4789                	li	a5,2
    80002abe:	d0f71ee3          	bne	a4,a5,800027da <two_stage_translation_1+0x382>
    80002ac2:	00046797          	auipc	a5,0x46
    80002ac6:	57e7c783          	lbu	a5,1406(a5) # 80049040 <excpt+0x30>
    80002aca:	00025597          	auipc	a1,0x25
    80002ace:	25658593          	addi	a1,a1,598 # 80027d20 <__func__.0+0x2c0>
    80002ad2:	d00784e3          	beqz	a5,800027da <two_stage_translation_1+0x382>
    80002ad6:	00025597          	auipc	a1,0x25
    80002ada:	25a58593          	addi	a1,a1,602 # 80027d30 <__func__.0+0x2d0>
    80002ade:	b9f5                	j	800027da <two_stage_translation_1+0x382>
    TEST_ASSERT(
    80002ae0:	7418                	ld	a4,40(s0)
    80002ae2:	400197b7          	lui	a5,0x40019
    80002ae6:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002aea:	c2f716e3          	bne	a4,a5,80002716 <two_stage_translation_1+0x2be>
    80002aee:	00046717          	auipc	a4,0x46
    80002af2:	52672703          	lw	a4,1318(a4) # 80049014 <excpt+0x4>
    80002af6:	4791                	li	a5,4
    80002af8:	c0f71fe3          	bne	a4,a5,80002716 <two_stage_translation_1+0x2be>
    80002afc:	03045703          	lhu	a4,48(s0)
    80002b00:	10100793          	li	a5,257
    80002b04:	00025597          	auipc	a1,0x25
    80002b08:	21c58593          	addi	a1,a1,540 # 80027d20 <__func__.0+0x2c0>
    80002b0c:	c0f705e3          	beq	a4,a5,80002716 <two_stage_translation_1+0x2be>
    80002b10:	00025597          	auipc	a1,0x25
    80002b14:	22058593          	addi	a1,a1,544 # 80027d30 <__func__.0+0x2d0>
    80002b18:	befd                	j	80002716 <two_stage_translation_1+0x2be>

0000000080002b1a <two_stage_translation_2>:

bool two_stage_translation_2(){
    80002b1a:	7179                	addi	sp,sp,-48
    
    TEST_START();
    80002b1c:	00023597          	auipc	a1,0x23
    80002b20:	78458593          	addi	a1,a1,1924 # 800262a0 <__func__.17>
    80002b24:	00025517          	auipc	a0,0x25
    80002b28:	21c50513          	addi	a0,a0,540 # 80027d40 <__func__.0+0x2e0>
bool two_stage_translation_2(){
    80002b2c:	f406                	sd	ra,40(sp)
    80002b2e:	f022                	sd	s0,32(sp)
    80002b30:	ec26                	sd	s1,24(sp)
    80002b32:	e84a                	sd	s2,16(sp)
    80002b34:	e44e                	sd	s3,8(sp)
    TEST_START();
    80002b36:	1c0230ef          	jal	80025cf6 <printf>
    80002b3a:	4529                	li	a0,10
    80002b3c:	7c5210ef          	jal	80024b00 <putchar>
    *((volatile uint64_t*) addr) = val;
    80002b40:	2201b737          	lui	a4,0x2201b
    80002b44:	000887b7          	lui	a5,0x88
    80002b48:	070a                	slli	a4,a4,0x2
    80002b4a:	44c5                	li	s1,17
    80002b4c:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    80002b50:	e304                	sd	s1,0(a4)
    80002b52:	07b2                	slli	a5,a5,0xc
    80002b54:	02200913          	li	s2,34
    80002b58:	0127b023          	sd	s2,0(a5)
    write64(addr2, 0x22);

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    80002b5c:	450d                	li	a0,3
    80002b5e:	898fe0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80002b62:	a7ffd0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80002b66:	cbdfd0ef          	jal	80000822 <hpt_init>

    /**
     * Setup guest page tables.
     */
    vspt_init();
    80002b6a:	b47fd0ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_VS);
    80002b6e:	4509                	li	a0,2
    80002b70:	886fe0ef          	jal	80000bf6 <goto_priv>
    return *((volatile uint64_t*) addr);
    80002b74:	4001b737          	lui	a4,0x4001b
    80002b78:	070a                	slli	a4,a4,0x2
    80002b7a:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    80002b7e:	001007b7          	lui	a5,0x100
    80002b82:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002b86:	07b2                	slli	a5,a5,0xc
    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002b88:	00025617          	auipc	a2,0x25
    80002b8c:	6e860613          	addi	a2,a2,1768 # 80028270 <__func__.0+0x810>
    80002b90:	08200593          	li	a1,130
    80002b94:	00025517          	auipc	a0,0x25
    80002b98:	1c450513          	addi	a0,a0,452 # 80027d58 <__func__.0+0x2f8>
    80002b9c:	6380                	ld	s0,0(a5)
    80002b9e:	158230ef          	jal	80025cf6 <printf>
    80002ba2:	0c998b63          	beq	s3,s1,80002c78 <two_stage_translation_2+0x15e>
    80002ba6:	00025597          	auipc	a1,0x25
    80002baa:	18a58593          	addi	a1,a1,394 # 80027d30 <__func__.0+0x2d0>
    80002bae:	00025517          	auipc	a0,0x25
    80002bb2:	1c250513          	addi	a0,a0,450 # 80027d70 <__func__.0+0x310>
    80002bb6:	140230ef          	jal	80025cf6 <printf>
    80002bba:	00025517          	auipc	a0,0x25
    80002bbe:	1be50513          	addi	a0,a0,446 # 80027d78 <__func__.0+0x318>
    80002bc2:	134230ef          	jal	80025cf6 <printf>
    80002bc6:	02900513          	li	a0,41
    80002bca:	737210ef          	jal	80024b00 <putchar>
    80002bce:	4529                	li	a0,10
    80002bd0:	731210ef          	jal	80024b00 <putchar>
    80002bd4:	4401                	li	s0,0
    
    goto_priv(PRIV_HS);
    80002bd6:	450d                	li	a0,3
    80002bd8:	81efe0ef          	jal	80000bf6 <goto_priv>
    hpt_switch();
    80002bdc:	f0dfd0ef          	jal	80000ae8 <hpt_switch>
    goto_priv(PRIV_VS);
    80002be0:	4509                	li	a0,2
    80002be2:	814fe0ef          	jal	80000bf6 <goto_priv>
    80002be6:	001007b7          	lui	a5,0x100
    80002bea:	4001b737          	lui	a4,0x4001b
    80002bee:	070a                	slli	a4,a4,0x2
    80002bf0:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002bf4:	07b2                	slli	a5,a5,0xc
    80002bf6:	6304                	ld	s1,0(a4)
    check1 = read64(vaddr1) == 0x11;
    check2 = read64(vaddr2) == 0x22;   
    // INFO("0%lx 0x%lx", read64(vaddr1), read64(vaddr2));
    TEST_ASSERT("vs do not change values after changing 2nd stage pt when not execute hfence", check1 && check2);
    80002bf8:	00025617          	auipc	a2,0x25
    80002bfc:	7a860613          	addi	a2,a2,1960 # 800283a0 <__func__.0+0x940>
    80002c00:	08200593          	li	a1,130
    80002c04:	00025517          	auipc	a0,0x25
    80002c08:	15450513          	addi	a0,a0,340 # 80027d58 <__func__.0+0x2f8>
    80002c0c:	0007b903          	ld	s2,0(a5)
    80002c10:	0e6230ef          	jal	80025cf6 <printf>
    80002c14:	47c5                	li	a5,17
    80002c16:	0af48d63          	beq	s1,a5,80002cd0 <two_stage_translation_2+0x1b6>
    80002c1a:	00025597          	auipc	a1,0x25
    80002c1e:	11658593          	addi	a1,a1,278 # 80027d30 <__func__.0+0x2d0>
    80002c22:	00025517          	auipc	a0,0x25
    80002c26:	14e50513          	addi	a0,a0,334 # 80027d70 <__func__.0+0x310>
    80002c2a:	0cc230ef          	jal	80025cf6 <printf>
    80002c2e:	00025517          	auipc	a0,0x25
    80002c32:	14a50513          	addi	a0,a0,330 # 80027d78 <__func__.0+0x318>
    80002c36:	0c0230ef          	jal	80025cf6 <printf>
    80002c3a:	02900513          	li	a0,41
    80002c3e:	6c3210ef          	jal	80024b00 <putchar>
    80002c42:	4529                	li	a0,10
    80002c44:	6bd210ef          	jal	80024b00 <putchar>
    80002c48:	4401                	li	s0,0


    TEST_END();
    80002c4a:	00025597          	auipc	a1,0x25
    80002c4e:	0e658593          	addi	a1,a1,230 # 80027d30 <__func__.0+0x2d0>
    80002c52:	00025517          	auipc	a0,0x25
    80002c56:	18650513          	addi	a0,a0,390 # 80027dd8 <__func__.0+0x378>
    80002c5a:	09c230ef          	jal	80025cf6 <printf>
    80002c5e:	4511                	li	a0,4
    80002c60:	f97fd0ef          	jal	80000bf6 <goto_priv>
    80002c64:	849fe0ef          	jal	800014ac <reset_state>
}
    80002c68:	70a2                	ld	ra,40(sp)
    80002c6a:	8522                	mv	a0,s0
    80002c6c:	7402                	ld	s0,32(sp)
    80002c6e:	64e2                	ld	s1,24(sp)
    80002c70:	6942                	ld	s2,16(sp)
    80002c72:	69a2                	ld	s3,8(sp)
    80002c74:	6145                	addi	sp,sp,48
    80002c76:	8082                	ret
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002c78:	03240e63          	beq	s0,s2,80002cb4 <two_stage_translation_2+0x19a>
    80002c7c:	00025597          	auipc	a1,0x25
    80002c80:	0b458593          	addi	a1,a1,180 # 80027d30 <__func__.0+0x2d0>
    80002c84:	00025517          	auipc	a0,0x25
    80002c88:	0ec50513          	addi	a0,a0,236 # 80027d70 <__func__.0+0x310>
    80002c8c:	06a230ef          	jal	80025cf6 <printf>
    80002c90:	00025517          	auipc	a0,0x25
    80002c94:	0e850513          	addi	a0,a0,232 # 80027d78 <__func__.0+0x318>
    80002c98:	05e230ef          	jal	80025cf6 <printf>
    80002c9c:	02900513          	li	a0,41
    80002ca0:	661210ef          	jal	80024b00 <putchar>
    80002ca4:	4529                	li	a0,10
    80002ca6:	65b210ef          	jal	80024b00 <putchar>
    80002caa:	fde40413          	addi	s0,s0,-34
    80002cae:	00143413          	seqz	s0,s0
    80002cb2:	b715                	j	80002bd6 <two_stage_translation_2+0xbc>
    80002cb4:	00025597          	auipc	a1,0x25
    80002cb8:	06c58593          	addi	a1,a1,108 # 80027d20 <__func__.0+0x2c0>
    80002cbc:	00025517          	auipc	a0,0x25
    80002cc0:	0b450513          	addi	a0,a0,180 # 80027d70 <__func__.0+0x310>
    80002cc4:	032230ef          	jal	80025cf6 <printf>
    80002cc8:	4529                	li	a0,10
    80002cca:	637210ef          	jal	80024b00 <putchar>
    80002cce:	bff1                	j	80002caa <two_stage_translation_2+0x190>
    TEST_ASSERT("vs do not change values after changing 2nd stage pt when not execute hfence", check1 && check2);
    80002cd0:	02200793          	li	a5,34
    80002cd4:	f4f913e3          	bne	s2,a5,80002c1a <two_stage_translation_2+0x100>
    80002cd8:	00025597          	auipc	a1,0x25
    80002cdc:	04858593          	addi	a1,a1,72 # 80027d20 <__func__.0+0x2c0>
    80002ce0:	00025517          	auipc	a0,0x25
    80002ce4:	09050513          	addi	a0,a0,144 # 80027d70 <__func__.0+0x310>
    80002ce8:	00e230ef          	jal	80025cf6 <printf>
    80002cec:	4529                	li	a0,10
    80002cee:	613210ef          	jal	80024b00 <putchar>
    80002cf2:	d839                	beqz	s0,80002c48 <two_stage_translation_2+0x12e>
    80002cf4:	4405                	li	s0,1
    TEST_END();
    80002cf6:	00025597          	auipc	a1,0x25
    80002cfa:	02a58593          	addi	a1,a1,42 # 80027d20 <__func__.0+0x2c0>
    80002cfe:	bf91                	j	80002c52 <two_stage_translation_2+0x138>

0000000080002d00 <two_stage_translation_3>:

bool two_stage_translation_3(){
    80002d00:	7179                	addi	sp,sp,-48
    
    TEST_START();
    80002d02:	00023597          	auipc	a1,0x23
    80002d06:	5b658593          	addi	a1,a1,1462 # 800262b8 <__func__.16>
    80002d0a:	00025517          	auipc	a0,0x25
    80002d0e:	03650513          	addi	a0,a0,54 # 80027d40 <__func__.0+0x2e0>
bool two_stage_translation_3(){
    80002d12:	f406                	sd	ra,40(sp)
    80002d14:	f022                	sd	s0,32(sp)
    80002d16:	ec26                	sd	s1,24(sp)
    80002d18:	e84a                	sd	s2,16(sp)
    80002d1a:	e44e                	sd	s3,8(sp)
    TEST_START();
    80002d1c:	7db220ef          	jal	80025cf6 <printf>
    80002d20:	4529                	li	a0,10
    80002d22:	5df210ef          	jal	80024b00 <putchar>
    *((volatile uint64_t*) addr) = val;
    80002d26:	2201b737          	lui	a4,0x2201b
    80002d2a:	000887b7          	lui	a5,0x88
    80002d2e:	070a                	slli	a4,a4,0x2
    80002d30:	44c5                	li	s1,17
    80002d32:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    80002d36:	e304                	sd	s1,0(a4)
    80002d38:	07b2                	slli	a5,a5,0xc
    80002d3a:	02200913          	li	s2,34
    80002d3e:	0127b023          	sd	s2,0(a5)
    write64(addr2, 0x22);

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    80002d42:	450d                	li	a0,3
    80002d44:	eb3fd0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80002d48:	899fd0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80002d4c:	ad7fd0ef          	jal	80000822 <hpt_init>

    /**
     * Setup guest page tables.
     */
    vspt_init();
    80002d50:	961fd0ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_VS);
    80002d54:	4509                	li	a0,2
    80002d56:	ea1fd0ef          	jal	80000bf6 <goto_priv>
    return *((volatile uint64_t*) addr);
    80002d5a:	4001b737          	lui	a4,0x4001b
    80002d5e:	070a                	slli	a4,a4,0x2
    80002d60:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    80002d64:	001007b7          	lui	a5,0x100
    80002d68:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002d6c:	07b2                	slli	a5,a5,0xc
    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002d6e:	00025617          	auipc	a2,0x25
    80002d72:	50260613          	addi	a2,a2,1282 # 80028270 <__func__.0+0x810>
    80002d76:	08200593          	li	a1,130
    80002d7a:	00025517          	auipc	a0,0x25
    80002d7e:	fde50513          	addi	a0,a0,-34 # 80027d58 <__func__.0+0x2f8>
    80002d82:	6380                	ld	s0,0(a5)
    80002d84:	773220ef          	jal	80025cf6 <printf>
    80002d88:	0c998863          	beq	s3,s1,80002e58 <two_stage_translation_3+0x158>
    80002d8c:	00025597          	auipc	a1,0x25
    80002d90:	fa458593          	addi	a1,a1,-92 # 80027d30 <__func__.0+0x2d0>
    80002d94:	00025517          	auipc	a0,0x25
    80002d98:	fdc50513          	addi	a0,a0,-36 # 80027d70 <__func__.0+0x310>
    80002d9c:	75b220ef          	jal	80025cf6 <printf>
    80002da0:	00025517          	auipc	a0,0x25
    80002da4:	fd850513          	addi	a0,a0,-40 # 80027d78 <__func__.0+0x318>
    80002da8:	74f220ef          	jal	80025cf6 <printf>
    80002dac:	02900513          	li	a0,41
    80002db0:	551210ef          	jal	80024b00 <putchar>
    80002db4:	4529                	li	a0,10
    80002db6:	54b210ef          	jal	80024b00 <putchar>
    80002dba:	4401                	li	s0,0
    
    goto_priv(PRIV_VS);
    80002dbc:	4509                	li	a0,2
    80002dbe:	e39fd0ef          	jal	80000bf6 <goto_priv>

    vspt_switch();
    80002dc2:	d0dfd0ef          	jal	80000ace <vspt_switch>
    80002dc6:	001007b7          	lui	a5,0x100
    80002dca:	4001b737          	lui	a4,0x4001b
    80002dce:	070a                	slli	a4,a4,0x2
    80002dd0:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002dd4:	07b2                	slli	a5,a5,0xc
    80002dd6:	6304                	ld	s1,0(a4)
    check1 = read64(vaddr1) == 0x11;
    check2 = read64(vaddr2) == 0x22;   
    TEST_ASSERT("vs do not change values after changing 1st stage pt when not execute sfence", check1 && check2);
    80002dd8:	00025617          	auipc	a2,0x25
    80002ddc:	61860613          	addi	a2,a2,1560 # 800283f0 <__func__.0+0x990>
    80002de0:	08200593          	li	a1,130
    80002de4:	00025517          	auipc	a0,0x25
    80002de8:	f7450513          	addi	a0,a0,-140 # 80027d58 <__func__.0+0x2f8>
    80002dec:	0007b903          	ld	s2,0(a5)
    80002df0:	707220ef          	jal	80025cf6 <printf>
    80002df4:	47c5                	li	a5,17
    80002df6:	0af48d63          	beq	s1,a5,80002eb0 <two_stage_translation_3+0x1b0>
    80002dfa:	00025597          	auipc	a1,0x25
    80002dfe:	f3658593          	addi	a1,a1,-202 # 80027d30 <__func__.0+0x2d0>
    80002e02:	00025517          	auipc	a0,0x25
    80002e06:	f6e50513          	addi	a0,a0,-146 # 80027d70 <__func__.0+0x310>
    80002e0a:	6ed220ef          	jal	80025cf6 <printf>
    80002e0e:	00025517          	auipc	a0,0x25
    80002e12:	f6a50513          	addi	a0,a0,-150 # 80027d78 <__func__.0+0x318>
    80002e16:	6e1220ef          	jal	80025cf6 <printf>
    80002e1a:	02900513          	li	a0,41
    80002e1e:	4e3210ef          	jal	80024b00 <putchar>
    80002e22:	4529                	li	a0,10
    80002e24:	4dd210ef          	jal	80024b00 <putchar>
    80002e28:	4401                	li	s0,0

    TEST_END();
    80002e2a:	00025597          	auipc	a1,0x25
    80002e2e:	f0658593          	addi	a1,a1,-250 # 80027d30 <__func__.0+0x2d0>
    80002e32:	00025517          	auipc	a0,0x25
    80002e36:	fa650513          	addi	a0,a0,-90 # 80027dd8 <__func__.0+0x378>
    80002e3a:	6bd220ef          	jal	80025cf6 <printf>
    80002e3e:	4511                	li	a0,4
    80002e40:	db7fd0ef          	jal	80000bf6 <goto_priv>
    80002e44:	e68fe0ef          	jal	800014ac <reset_state>
}
    80002e48:	70a2                	ld	ra,40(sp)
    80002e4a:	8522                	mv	a0,s0
    80002e4c:	7402                	ld	s0,32(sp)
    80002e4e:	64e2                	ld	s1,24(sp)
    80002e50:	6942                	ld	s2,16(sp)
    80002e52:	69a2                	ld	s3,8(sp)
    80002e54:	6145                	addi	sp,sp,48
    80002e56:	8082                	ret
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002e58:	03240e63          	beq	s0,s2,80002e94 <two_stage_translation_3+0x194>
    80002e5c:	00025597          	auipc	a1,0x25
    80002e60:	ed458593          	addi	a1,a1,-300 # 80027d30 <__func__.0+0x2d0>
    80002e64:	00025517          	auipc	a0,0x25
    80002e68:	f0c50513          	addi	a0,a0,-244 # 80027d70 <__func__.0+0x310>
    80002e6c:	68b220ef          	jal	80025cf6 <printf>
    80002e70:	00025517          	auipc	a0,0x25
    80002e74:	f0850513          	addi	a0,a0,-248 # 80027d78 <__func__.0+0x318>
    80002e78:	67f220ef          	jal	80025cf6 <printf>
    80002e7c:	02900513          	li	a0,41
    80002e80:	481210ef          	jal	80024b00 <putchar>
    80002e84:	4529                	li	a0,10
    80002e86:	47b210ef          	jal	80024b00 <putchar>
    80002e8a:	fde40413          	addi	s0,s0,-34
    80002e8e:	00143413          	seqz	s0,s0
    80002e92:	b72d                	j	80002dbc <two_stage_translation_3+0xbc>
    80002e94:	00025597          	auipc	a1,0x25
    80002e98:	e8c58593          	addi	a1,a1,-372 # 80027d20 <__func__.0+0x2c0>
    80002e9c:	00025517          	auipc	a0,0x25
    80002ea0:	ed450513          	addi	a0,a0,-300 # 80027d70 <__func__.0+0x310>
    80002ea4:	653220ef          	jal	80025cf6 <printf>
    80002ea8:	4529                	li	a0,10
    80002eaa:	457210ef          	jal	80024b00 <putchar>
    80002eae:	bff1                	j	80002e8a <two_stage_translation_3+0x18a>
    TEST_ASSERT("vs do not change values after changing 1st stage pt when not execute sfence", check1 && check2);
    80002eb0:	02200793          	li	a5,34
    80002eb4:	f4f913e3          	bne	s2,a5,80002dfa <two_stage_translation_3+0xfa>
    80002eb8:	00025597          	auipc	a1,0x25
    80002ebc:	e6858593          	addi	a1,a1,-408 # 80027d20 <__func__.0+0x2c0>
    80002ec0:	00025517          	auipc	a0,0x25
    80002ec4:	eb050513          	addi	a0,a0,-336 # 80027d70 <__func__.0+0x310>
    80002ec8:	62f220ef          	jal	80025cf6 <printf>
    80002ecc:	4529                	li	a0,10
    80002ece:	433210ef          	jal	80024b00 <putchar>
    80002ed2:	d839                	beqz	s0,80002e28 <two_stage_translation_3+0x128>
    80002ed4:	4405                	li	s0,1
    TEST_END();
    80002ed6:	00025597          	auipc	a1,0x25
    80002eda:	e4a58593          	addi	a1,a1,-438 # 80027d20 <__func__.0+0x2c0>
    80002ede:	bf91                	j	80002e32 <two_stage_translation_3+0x132>

0000000080002ee0 <second_stage_only_translation>:

bool second_stage_only_translation(){
    80002ee0:	7179                	addi	sp,sp,-48

    /**
     * Test only 2nd stage translation.
     */
    TEST_START();
    80002ee2:	00023597          	auipc	a1,0x23
    80002ee6:	3ee58593          	addi	a1,a1,1006 # 800262d0 <__func__.15>
    80002eea:	00025517          	auipc	a0,0x25
    80002eee:	e5650513          	addi	a0,a0,-426 # 80027d40 <__func__.0+0x2e0>
bool second_stage_only_translation(){
    80002ef2:	f406                	sd	ra,40(sp)
    80002ef4:	ec26                	sd	s1,24(sp)
    80002ef6:	e84a                	sd	s2,16(sp)
    80002ef8:	f022                	sd	s0,32(sp)
    80002efa:	e44e                	sd	s3,8(sp)
    80002efc:	e052                	sd	s4,0(sp)
    TEST_START();
    80002efe:	5f9220ef          	jal	80025cf6 <printf>
    80002f02:	4529                	li	a0,10
    80002f04:	3fd210ef          	jal	80024b00 <putchar>
    *((volatile uint64_t*) addr) = val;
    80002f08:	2201b737          	lui	a4,0x2201b
    80002f0c:	000887b7          	lui	a5,0x88
    80002f10:	070a                	slli	a4,a4,0x2
    80002f12:	44c5                	li	s1,17
    80002f14:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    80002f18:	e304                	sd	s1,0(a4)
    80002f1a:	07b2                	slli	a5,a5,0xc
    80002f1c:	02200913          	li	s2,34
    80002f20:	0127b023          	sd	s2,0(a5)
    uintptr_t vaddr2 = vs_page_base(SWITCH2);
    write64(addr1, 0x11);
    write64(addr2, 0x22);   


    CSRS(medeleg, (1 << CAUSE_LGPF) | (1 << CAUSE_SGPF));
    80002f24:	00a007b7          	lui	a5,0xa00
    80002f28:	3027a073          	csrs	medeleg,a5

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    80002f2c:	450d                	li	a0,3
    80002f2e:	cc9fd0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80002f32:	eaefd0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80002f36:	8edfd0ef          	jal	80000822 <hpt_init>
    
    goto_priv(PRIV_VS);
    80002f3a:	4509                	li	a0,2
    80002f3c:	cbbfd0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80002f40:	0330000f          	fence	rw,rw
    80002f44:	00046417          	auipc	s0,0x46
    80002f48:	0cc40413          	addi	s0,s0,204 # 80049010 <excpt>
    80002f4c:	4785                	li	a5,1
    80002f4e:	00046717          	auipc	a4,0x46
    80002f52:	0e073d23          	sd	zero,250(a4) # 80049048 <excpt+0x38>
    80002f56:	00f41023          	sh	a5,0(s0)
    80002f5a:	0330000f          	fence	rw,rw
    return *((volatile uint64_t*) addr);
    80002f5e:	001007b7          	lui	a5,0x100
    80002f62:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002f66:	4001b737          	lui	a4,0x4001b
    80002f6a:	07b2                	slli	a5,a5,0xc
    80002f6c:	070a                	slli	a4,a4,0x2
    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    80002f6e:	00025617          	auipc	a2,0x25
    80002f72:	30260613          	addi	a2,a2,770 # 80028270 <__func__.0+0x810>
    80002f76:	08200593          	li	a1,130
    80002f7a:	00025517          	auipc	a0,0x25
    80002f7e:	dde50513          	addi	a0,a0,-546 # 80027d58 <__func__.0+0x2f8>
    80002f82:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    80002f86:	0007ba03          	ld	s4,0(a5)
    80002f8a:	56d220ef          	jal	80025cf6 <printf>
    80002f8e:	00046797          	auipc	a5,0x46
    80002f92:	0837c783          	lbu	a5,131(a5) # 80049011 <excpt+0x1>
    80002f96:	ef91                	bnez	a5,80002fb2 <second_stage_only_translation+0xd2>
    80002f98:	2e998163          	beq	s3,s1,8000327a <second_stage_only_translation+0x39a>
    80002f9c:	00025597          	auipc	a1,0x25
    80002fa0:	d9458593          	addi	a1,a1,-620 # 80027d30 <__func__.0+0x2d0>
    80002fa4:	00025517          	auipc	a0,0x25
    80002fa8:	dcc50513          	addi	a0,a0,-564 # 80027d70 <__func__.0+0x310>
    80002fac:	54b220ef          	jal	80025cf6 <printf>
    80002fb0:	a01d                	j	80002fd6 <second_stage_only_translation+0xf6>
    80002fb2:	00025597          	auipc	a1,0x25
    80002fb6:	d7e58593          	addi	a1,a1,-642 # 80027d30 <__func__.0+0x2d0>
    80002fba:	00025517          	auipc	a0,0x25
    80002fbe:	db650513          	addi	a0,a0,-586 # 80027d70 <__func__.0+0x310>
    80002fc2:	535220ef          	jal	80025cf6 <printf>
    80002fc6:	00046797          	auipc	a5,0x46
    80002fca:	04b7c783          	lbu	a5,75(a5) # 80049011 <excpt+0x1>
    80002fce:	2e079a63          	bnez	a5,800032c2 <second_stage_only_translation+0x3e2>
    80002fd2:	36998a63          	beq	s3,s1,80003346 <second_stage_only_translation+0x466>
    80002fd6:	00025517          	auipc	a0,0x25
    80002fda:	da250513          	addi	a0,a0,-606 # 80027d78 <__func__.0+0x318>
    80002fde:	519220ef          	jal	80025cf6 <printf>
    80002fe2:	02900513          	li	a0,41
    80002fe6:	31b210ef          	jal	80024b00 <putchar>
    80002fea:	4529                	li	a0,10
    80002fec:	315210ef          	jal	80024b00 <putchar>
    80002ff0:	4481                	li	s1,0

    goto_priv(PRIV_HS);
    80002ff2:	450d                	li	a0,3
    80002ff4:	c03fd0ef          	jal	80000bf6 <goto_priv>
    hpt_switch();       //在nemu中，执行read64没有变，执行hlvd变化了
    80002ff8:	af1fd0ef          	jal	80000ae8 <hpt_switch>
    asm volatile(
    80002ffc:	22000073          	.insn	4, 0x22000073
    asm volatile(
    80003000:	62000073          	.insn	4, 0x62000073
    hfence(); //l2tlb
    goto_priv(PRIV_VS);
    80003004:	4509                	li	a0,2
    80003006:	bf1fd0ef          	jal	80000bf6 <goto_priv>
    asm volatile ("sfence.vma \n\t");
    8000300a:	12000073          	sfence.vma
    sfence(); //l1tlb
    TEST_SETUP_EXCEPT();
    8000300e:	0330000f          	fence	rw,rw
    80003012:	4785                	li	a5,1
    80003014:	00046717          	auipc	a4,0x46
    80003018:	02073a23          	sd	zero,52(a4) # 80049048 <excpt+0x38>
    8000301c:	00f41023          	sh	a5,0(s0)
    80003020:	0330000f          	fence	rw,rw
    80003024:	001007b7          	lui	a5,0x100
    80003028:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    8000302c:	4001b737          	lui	a4,0x4001b
    80003030:	07b2                	slli	a5,a5,0xc
    80003032:	070a                	slli	a4,a4,0x2
    check1 = read64(vaddr1) == 0x22;
    check2 = read64(vaddr2) == 0x11;   
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    80003034:	00025617          	auipc	a2,0x25
    80003038:	40c60613          	addi	a2,a2,1036 # 80028440 <__func__.0+0x9e0>
    8000303c:	08200593          	li	a1,130
    80003040:	00025517          	auipc	a0,0x25
    80003044:	d1850513          	addi	a0,a0,-744 # 80027d58 <__func__.0+0x2f8>
    80003048:	00073903          	ld	s2,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    8000304c:	0007b983          	ld	s3,0(a5)
    80003050:	4a7220ef          	jal	80025cf6 <printf>
    80003054:	00046797          	auipc	a5,0x46
    80003058:	fbd7c783          	lbu	a5,-67(a5) # 80049011 <excpt+0x1>
    8000305c:	1a079563          	bnez	a5,80003206 <second_stage_only_translation+0x326>
    80003060:	02200793          	li	a5,34
    80003064:	2af90d63          	beq	s2,a5,8000331e <second_stage_only_translation+0x43e>
    80003068:	00025597          	auipc	a1,0x25
    8000306c:	cc858593          	addi	a1,a1,-824 # 80027d30 <__func__.0+0x2d0>
    80003070:	00025517          	auipc	a0,0x25
    80003074:	d0050513          	addi	a0,a0,-768 # 80027d70 <__func__.0+0x310>
    80003078:	47f220ef          	jal	80025cf6 <printf>
    8000307c:	00025517          	auipc	a0,0x25
    80003080:	cfc50513          	addi	a0,a0,-772 # 80027d78 <__func__.0+0x318>
    80003084:	473220ef          	jal	80025cf6 <printf>
    80003088:	02900513          	li	a0,41
    8000308c:	275210ef          	jal	80024b00 <putchar>
    80003090:	4529                	li	a0,10
    80003092:	26f210ef          	jal	80024b00 <putchar>
    80003096:	c891                	beqz	s1,800030aa <second_stage_only_translation+0x1ca>
    80003098:	00046797          	auipc	a5,0x46
    8000309c:	f797c783          	lbu	a5,-135(a5) # 80049011 <excpt+0x1>
    800030a0:	e789                	bnez	a5,800030aa <second_stage_only_translation+0x1ca>
    800030a2:	02200793          	li	a5,34
    800030a6:	1af90263          	beq	s2,a5,8000324a <second_stage_only_translation+0x36a>
    800030aa:	4481                	li	s1,0

    TEST_SETUP_EXCEPT();
    800030ac:	0330000f          	fence	rw,rw
    800030b0:	4785                	li	a5,1
    800030b2:	00046717          	auipc	a4,0x46
    800030b6:	f8073b23          	sd	zero,-106(a4) # 80049048 <excpt+0x38>
    800030ba:	00f41023          	sh	a5,0(s0)
    800030be:	0330000f          	fence	rw,rw
    800030c2:	001007b7          	lui	a5,0x100
    800030c6:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800030ca:	07b2                	slli	a5,a5,0xc
    800030cc:	639c                	ld	a5,0(a5)
    (void) read64(vs_page_base(VSRWX_GI));  
    TEST_ASSERT(
    800030ce:	08200593          	li	a1,130
    800030d2:	00025617          	auipc	a2,0x25
    800030d6:	39660613          	addi	a2,a2,918 # 80028468 <__func__.0+0xa08>
    800030da:	00025517          	auipc	a0,0x25
    800030de:	c7e50513          	addi	a0,a0,-898 # 80027d58 <__func__.0+0x2f8>
    800030e2:	415220ef          	jal	80025cf6 <printf>
    800030e6:	00046797          	auipc	a5,0x46
    800030ea:	f2b7c783          	lbu	a5,-213(a5) # 80049011 <excpt+0x1>
    800030ee:	00025597          	auipc	a1,0x25
    800030f2:	c4258593          	addi	a1,a1,-958 # 80027d30 <__func__.0+0x2d0>
    800030f6:	c789                	beqz	a5,80003100 <second_stage_only_translation+0x220>
    800030f8:	6418                	ld	a4,8(s0)
    800030fa:	47d5                	li	a5,21
    800030fc:	20f70163          	beq	a4,a5,800032fe <second_stage_only_translation+0x41e>
    80003100:	00025517          	auipc	a0,0x25
    80003104:	c7050513          	addi	a0,a0,-912 # 80027d70 <__func__.0+0x310>
    80003108:	3ef220ef          	jal	80025cf6 <printf>
    8000310c:	00046797          	auipc	a5,0x46
    80003110:	f057c783          	lbu	a5,-251(a5) # 80049011 <excpt+0x1>
    80003114:	c789                	beqz	a5,8000311e <second_stage_only_translation+0x23e>
    80003116:	6418                	ld	a4,8(s0)
    80003118:	47d5                	li	a5,21
    8000311a:	14f70863          	beq	a4,a5,8000326a <second_stage_only_translation+0x38a>
    8000311e:	00025517          	auipc	a0,0x25
    80003122:	c5a50513          	addi	a0,a0,-934 # 80027d78 <__func__.0+0x318>
    80003126:	3d1220ef          	jal	80025cf6 <printf>
    8000312a:	02900513          	li	a0,41
    8000312e:	1d3210ef          	jal	80024b00 <putchar>
    80003132:	4529                	li	a0,10
    80003134:	1cd210ef          	jal	80024b00 <putchar>
    80003138:	c899                	beqz	s1,8000314e <second_stage_only_translation+0x26e>
    8000313a:	00046797          	auipc	a5,0x46
    8000313e:	ed77c783          	lbu	a5,-297(a5) # 80049011 <excpt+0x1>
    80003142:	4481                	li	s1,0
    80003144:	c789                	beqz	a5,8000314e <second_stage_only_translation+0x26e>
    80003146:	6418                	ld	a4,8(s0)
    80003148:	47d5                	li	a5,21
    8000314a:	1af70263          	beq	a4,a5,800032ee <second_stage_only_translation+0x40e>
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        excpt.priv == PRIV_HS
    );

    TEST_SETUP_EXCEPT();
    8000314e:	0330000f          	fence	rw,rw
    80003152:	4785                	li	a5,1
    80003154:	00046717          	auipc	a4,0x46
    80003158:	ee073a23          	sd	zero,-268(a4) # 80049048 <excpt+0x38>
    8000315c:	00f41023          	sh	a5,0(s0)
    80003160:	0330000f          	fence	rw,rw
    80003164:	200007b7          	lui	a5,0x20000
    80003168:	17fd                	addi	a5,a5,-1 # 1fffffff <STACK_SIZE+0x1fefffff>
    8000316a:	07b2                	slli	a5,a5,0xc
    8000316c:	639c                	ld	a5,0(a5)
    read64(vs_page_base_limit(TOP));
    TEST_ASSERT(
    8000316e:	08200593          	li	a1,130
    80003172:	00025617          	auipc	a2,0x25
    80003176:	31e60613          	addi	a2,a2,798 # 80028490 <__func__.0+0xa30>
    8000317a:	00025517          	auipc	a0,0x25
    8000317e:	bde50513          	addi	a0,a0,-1058 # 80027d58 <__func__.0+0x2f8>
    80003182:	375220ef          	jal	80025cf6 <printf>
    80003186:	00046797          	auipc	a5,0x46
    8000318a:	e8b7c783          	lbu	a5,-373(a5) # 80049011 <excpt+0x1>
    8000318e:	00025597          	auipc	a1,0x25
    80003192:	ba258593          	addi	a1,a1,-1118 # 80027d30 <__func__.0+0x2d0>
    80003196:	e789                	bnez	a5,800031a0 <second_stage_only_translation+0x2c0>
    80003198:	00025597          	auipc	a1,0x25
    8000319c:	b8858593          	addi	a1,a1,-1144 # 80027d20 <__func__.0+0x2c0>
    800031a0:	00025517          	auipc	a0,0x25
    800031a4:	bd050513          	addi	a0,a0,-1072 # 80027d70 <__func__.0+0x310>
    800031a8:	34f220ef          	jal	80025cf6 <printf>
    800031ac:	00046797          	auipc	a5,0x46
    800031b0:	e657c783          	lbu	a5,-411(a5) # 80049011 <excpt+0x1>
    800031b4:	e3c5                	bnez	a5,80003254 <second_stage_only_translation+0x374>
    800031b6:	4529                	li	a0,10
    800031b8:	149210ef          	jal	80024b00 <putchar>
    800031bc:	cc9d                	beqz	s1,800031fa <second_stage_only_translation+0x31a>
    800031be:	00046797          	auipc	a5,0x46
    800031c2:	e537c783          	lbu	a5,-429(a5) # 80049011 <excpt+0x1>
    800031c6:	eb95                	bnez	a5,800031fa <second_stage_only_translation+0x31a>
    800031c8:	4405                	li	s0,1
    //     "access top of guest pa space with high bits =/= 0", 
    //     excpt.triggered == true &&
    //     excpt.cause == CAUSE_LGPF
    // ); 

    TEST_END();
    800031ca:	00025597          	auipc	a1,0x25
    800031ce:	b5658593          	addi	a1,a1,-1194 # 80027d20 <__func__.0+0x2c0>
    800031d2:	00025517          	auipc	a0,0x25
    800031d6:	c0650513          	addi	a0,a0,-1018 # 80027dd8 <__func__.0+0x378>
    800031da:	31d220ef          	jal	80025cf6 <printf>
    800031de:	4511                	li	a0,4
    800031e0:	a17fd0ef          	jal	80000bf6 <goto_priv>
    800031e4:	ac8fe0ef          	jal	800014ac <reset_state>
}
    800031e8:	70a2                	ld	ra,40(sp)
    800031ea:	8522                	mv	a0,s0
    800031ec:	7402                	ld	s0,32(sp)
    800031ee:	64e2                	ld	s1,24(sp)
    800031f0:	6942                	ld	s2,16(sp)
    800031f2:	69a2                	ld	s3,8(sp)
    800031f4:	6a02                	ld	s4,0(sp)
    800031f6:	6145                	addi	sp,sp,48
    800031f8:	8082                	ret
    TEST_ASSERT(
    800031fa:	4401                	li	s0,0
    TEST_END();
    800031fc:	00025597          	auipc	a1,0x25
    80003200:	b3458593          	addi	a1,a1,-1228 # 80027d30 <__func__.0+0x2d0>
    80003204:	b7f9                	j	800031d2 <second_stage_only_translation+0x2f2>
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    80003206:	00025597          	auipc	a1,0x25
    8000320a:	b2a58593          	addi	a1,a1,-1238 # 80027d30 <__func__.0+0x2d0>
    8000320e:	00025517          	auipc	a0,0x25
    80003212:	b6250513          	addi	a0,a0,-1182 # 80027d70 <__func__.0+0x310>
    80003216:	2e1220ef          	jal	80025cf6 <printf>
    8000321a:	00046797          	auipc	a5,0x46
    8000321e:	df77c783          	lbu	a5,-521(a5) # 80049011 <excpt+0x1>
    80003222:	e4079de3          	bnez	a5,8000307c <second_stage_only_translation+0x19c>
    80003226:	02200793          	li	a5,34
    8000322a:	e4f919e3          	bne	s2,a5,8000307c <second_stage_only_translation+0x19c>
    8000322e:	47c5                	li	a5,17
    80003230:	e4f996e3          	bne	s3,a5,8000307c <second_stage_only_translation+0x19c>
    80003234:	4529                	li	a0,10
    80003236:	0cb210ef          	jal	80024b00 <putchar>
    8000323a:	e60488e3          	beqz	s1,800030aa <second_stage_only_translation+0x1ca>
    8000323e:	00046797          	auipc	a5,0x46
    80003242:	dd37c783          	lbu	a5,-557(a5) # 80049011 <excpt+0x1>
    80003246:	e60792e3          	bnez	a5,800030aa <second_stage_only_translation+0x1ca>
    8000324a:	fef98493          	addi	s1,s3,-17
    8000324e:	0014b493          	seqz	s1,s1
    80003252:	bda9                	j	800030ac <second_stage_only_translation+0x1cc>
    TEST_ASSERT(
    80003254:	00025517          	auipc	a0,0x25
    80003258:	b2450513          	addi	a0,a0,-1244 # 80027d78 <__func__.0+0x318>
    8000325c:	29b220ef          	jal	80025cf6 <printf>
    80003260:	02900513          	li	a0,41
    80003264:	09d210ef          	jal	80024b00 <putchar>
    80003268:	b7b9                	j	800031b6 <second_stage_only_translation+0x2d6>
    TEST_ASSERT(
    8000326a:	00046717          	auipc	a4,0x46
    8000326e:	daa72703          	lw	a4,-598(a4) # 80049014 <excpt+0x4>
    80003272:	478d                	li	a5,3
    80003274:	eaf715e3          	bne	a4,a5,8000311e <second_stage_only_translation+0x23e>
    80003278:	bd6d                	j	80003132 <second_stage_only_translation+0x252>
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    8000327a:	0f2a0263          	beq	s4,s2,8000335e <second_stage_only_translation+0x47e>
    8000327e:	00025597          	auipc	a1,0x25
    80003282:	ab258593          	addi	a1,a1,-1358 # 80027d30 <__func__.0+0x2d0>
    80003286:	00025517          	auipc	a0,0x25
    8000328a:	aea50513          	addi	a0,a0,-1302 # 80027d70 <__func__.0+0x310>
    8000328e:	269220ef          	jal	80025cf6 <printf>
    80003292:	00025517          	auipc	a0,0x25
    80003296:	ae650513          	addi	a0,a0,-1306 # 80027d78 <__func__.0+0x318>
    8000329a:	25d220ef          	jal	80025cf6 <printf>
    8000329e:	02900513          	li	a0,41
    800032a2:	05f210ef          	jal	80024b00 <putchar>
    800032a6:	4529                	li	a0,10
    800032a8:	059210ef          	jal	80024b00 <putchar>
    800032ac:	00046797          	auipc	a5,0x46
    800032b0:	d657c783          	lbu	a5,-667(a5) # 80049011 <excpt+0x1>
    800032b4:	d2079ee3          	bnez	a5,80002ff0 <second_stage_only_translation+0x110>
    800032b8:	fdea0493          	addi	s1,s4,-34
    800032bc:	0014b493          	seqz	s1,s1
    800032c0:	bb0d                	j	80002ff2 <second_stage_only_translation+0x112>
    800032c2:	00025517          	auipc	a0,0x25
    800032c6:	ab650513          	addi	a0,a0,-1354 # 80027d78 <__func__.0+0x318>
    800032ca:	22d220ef          	jal	80025cf6 <printf>
    800032ce:	02900513          	li	a0,41
    800032d2:	02f210ef          	jal	80024b00 <putchar>
    800032d6:	4529                	li	a0,10
    800032d8:	029210ef          	jal	80024b00 <putchar>
    800032dc:	00046797          	auipc	a5,0x46
    800032e0:	d357c783          	lbu	a5,-715(a5) # 80049011 <excpt+0x1>
    800032e4:	d00796e3          	bnez	a5,80002ff0 <second_stage_only_translation+0x110>
    800032e8:	fc9988e3          	beq	s3,s1,800032b8 <second_stage_only_translation+0x3d8>
    800032ec:	b311                	j	80002ff0 <second_stage_only_translation+0x110>
    TEST_ASSERT(
    800032ee:	00046497          	auipc	s1,0x46
    800032f2:	d264a483          	lw	s1,-730(s1) # 80049014 <excpt+0x4>
    800032f6:	14f5                	addi	s1,s1,-3
    800032f8:	0014b493          	seqz	s1,s1
    800032fc:	bd89                	j	8000314e <second_stage_only_translation+0x26e>
    800032fe:	00046717          	auipc	a4,0x46
    80003302:	d1672703          	lw	a4,-746(a4) # 80049014 <excpt+0x4>
    80003306:	478d                	li	a5,3
    80003308:	00025597          	auipc	a1,0x25
    8000330c:	a1858593          	addi	a1,a1,-1512 # 80027d20 <__func__.0+0x2c0>
    80003310:	def708e3          	beq	a4,a5,80003100 <second_stage_only_translation+0x220>
    80003314:	00025597          	auipc	a1,0x25
    80003318:	a1c58593          	addi	a1,a1,-1508 # 80027d30 <__func__.0+0x2d0>
    8000331c:	b3d5                	j	80003100 <second_stage_only_translation+0x220>
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    8000331e:	47c5                	li	a5,17
    80003320:	d4f994e3          	bne	s3,a5,80003068 <second_stage_only_translation+0x188>
    80003324:	00025597          	auipc	a1,0x25
    80003328:	9fc58593          	addi	a1,a1,-1540 # 80027d20 <__func__.0+0x2c0>
    8000332c:	00025517          	auipc	a0,0x25
    80003330:	a4450513          	addi	a0,a0,-1468 # 80027d70 <__func__.0+0x310>
    80003334:	1c3220ef          	jal	80025cf6 <printf>
    80003338:	00046797          	auipc	a5,0x46
    8000333c:	cd97c783          	lbu	a5,-807(a5) # 80049011 <excpt+0x1>
    80003340:	ee078ae3          	beqz	a5,80003234 <second_stage_only_translation+0x354>
    80003344:	bb25                	j	8000307c <second_stage_only_translation+0x19c>
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    80003346:	f52a16e3          	bne	s4,s2,80003292 <second_stage_only_translation+0x3b2>
    8000334a:	4529                	li	a0,10
    8000334c:	7b4210ef          	jal	80024b00 <putchar>
    80003350:	00046497          	auipc	s1,0x46
    80003354:	cc14c483          	lbu	s1,-831(s1) # 80049011 <excpt+0x1>
    80003358:	0014c493          	xori	s1,s1,1
    8000335c:	b959                	j	80002ff2 <second_stage_only_translation+0x112>
    8000335e:	00025597          	auipc	a1,0x25
    80003362:	9c258593          	addi	a1,a1,-1598 # 80027d20 <__func__.0+0x2c0>
    80003366:	00025517          	auipc	a0,0x25
    8000336a:	a0a50513          	addi	a0,a0,-1526 # 80027d70 <__func__.0+0x310>
    8000336e:	189220ef          	jal	80025cf6 <printf>
    80003372:	00046797          	auipc	a5,0x46
    80003376:	c9f7c783          	lbu	a5,-865(a5) # 80049011 <excpt+0x1>
    8000337a:	dbe1                	beqz	a5,8000334a <second_stage_only_translation+0x46a>
    8000337c:	bf19                	j	80003292 <second_stage_only_translation+0x3b2>

000000008000337e <m_and_hs_using_vs_access_1>:
    );

}


bool m_and_hs_using_vs_access_1(){
    8000337e:	7179                	addi	sp,sp,-48

    uint64_t val, valu;
    uintptr_t vaddr = vs_page_base(SCRATCHPAD);
    uintptr_t addr;

    TEST_START();
    80003380:	00023597          	auipc	a1,0x23
    80003384:	f7058593          	addi	a1,a1,-144 # 800262f0 <__func__.13>
    80003388:	00025517          	auipc	a0,0x25
    8000338c:	9b850513          	addi	a0,a0,-1608 # 80027d40 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_1(){
    80003390:	f406                	sd	ra,40(sp)
    80003392:	f022                	sd	s0,32(sp)
    80003394:	ec26                	sd	s1,24(sp)
    80003396:	e84a                	sd	s2,16(sp)
    80003398:	e44e                	sd	s3,8(sp)
    8000339a:	e052                	sd	s4,0(sp)
    TEST_START();
    8000339c:	15b220ef          	jal	80025cf6 <printf>
    800033a0:	4529                	li	a0,10
    800033a2:	75e210ef          	jal	80024b00 <putchar>
    
    hspt_init();
    800033a6:	a3afd0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    800033aa:	c78fd0ef          	jal	80000822 <hpt_init>
    vspt_init();
    800033ae:	b02fd0ef          	jal	800006b0 <vspt_init>

    TEST_SETUP_EXCEPT();
    800033b2:	0330000f          	fence	rw,rw
    800033b6:	00046497          	auipc	s1,0x46
    800033ba:	c5a48493          	addi	s1,s1,-934 # 80049010 <excpt>
    800033be:	4785                	li	a5,1
    800033c0:	00046717          	auipc	a4,0x46
    800033c4:	c8073423          	sd	zero,-888(a4) # 80049048 <excpt+0x38>
    800033c8:	00f49023          	sh	a5,0(s1)
    800033cc:	0330000f          	fence	rw,rw
    if(curr_priv != PRIV_M){
    800033d0:	0002f917          	auipc	s2,0x2f
    800033d4:	0cc92903          	lw	s2,204(s2) # 8003249c <curr_priv>
    800033d8:	4791                	li	a5,4
    800033da:	02f90763          	beq	s2,a5,80003408 <m_and_hs_using_vs_access_1+0x8a>
        ERROR("trying to write as mprv from low privilege");
    800033de:	00025517          	auipc	a0,0x25
    800033e2:	0ea50513          	addi	a0,a0,234 # 800284c8 <__func__.0+0xa68>
    800033e6:	111220ef          	jal	80025cf6 <printf>
    800033ea:	11000613          	li	a2,272
    800033ee:	00023597          	auipc	a1,0x23
    800033f2:	f2258593          	addi	a1,a1,-222 # 80026310 <__func__.12>
    800033f6:	00025517          	auipc	a0,0x25
    800033fa:	ad250513          	addi	a0,a0,-1326 # 80027ec8 <__func__.0+0x468>
    800033fe:	0f9220ef          	jal	80025cf6 <printf>
    80003402:	4501                	li	a0,0
    80003404:	5b0220ef          	jal	800259b4 <exit>
    asm volatile(
    80003408:	01108437          	lui	s0,0x1108
    8000340c:	ec140413          	addi	s0,s0,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    80003410:	001009b7          	lui	s3,0x100
    set_prev_priv(priv);
    80003414:	4509                	li	a0,2
    asm volatile(
    80003416:	0442                	slli	s0,s0,0x10
    80003418:	06b98993          	addi	s3,s3,107 # 10006b <STACK_SIZE+0x6b>
    set_prev_priv(priv);
    8000341c:	efafd0ef          	jal	80000b16 <set_prev_priv>
    asm volatile(
    80003420:	1439                	addi	s0,s0,-18
    80003422:	09b2                	slli	s3,s3,0xc
    80003424:	00020a37          	lui	s4,0x20
    80003428:	300a2073          	csrs	mstatus,s4
    8000342c:	0089b023          	sd	s0,0(s3)
    80003430:	300a3073          	csrc	mstatus,s4
    if(curr_priv != PRIV_M){
    80003434:	0002f797          	auipc	a5,0x2f
    80003438:	0687a783          	lw	a5,104(a5) # 8003249c <curr_priv>
    8000343c:	03278763          	beq	a5,s2,8000346a <m_and_hs_using_vs_access_1+0xec>
        ERROR("trying to read as mprv from low privilege");
    80003440:	00025517          	auipc	a0,0x25
    80003444:	0c850513          	addi	a0,a0,200 # 80028508 <__func__.0+0xaa8>
    80003448:	0af220ef          	jal	80025cf6 <printf>
    8000344c:	0fd00613          	li	a2,253
    80003450:	00023597          	auipc	a1,0x23
    80003454:	ed058593          	addi	a1,a1,-304 # 80026320 <__func__.11>
    80003458:	00025517          	auipc	a0,0x25
    8000345c:	a7050513          	addi	a0,a0,-1424 # 80027ec8 <__func__.0+0x468>
    80003460:	097220ef          	jal	80025cf6 <printf>
    80003464:	4501                	li	a0,0
    80003466:	54e220ef          	jal	800259b4 <exit>
    set_prev_priv(priv);
    8000346a:	4509                	li	a0,2
    8000346c:	eaafd0ef          	jal	80000b16 <set_prev_priv>
    asm volatile(
    80003470:	300a2073          	csrs	mstatus,s4
    80003474:	0009b903          	ld	s2,0(s3)
    80003478:	300a3073          	csrc	mstatus,s4
    write64_mprv(PRIV_VS, vaddr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine sets mprv to access vs space",
    8000347c:	00025617          	auipc	a2,0x25
    80003480:	0cc60613          	addi	a2,a2,204 # 80028548 <__func__.0+0xae8>
    80003484:	08200593          	li	a1,130
    80003488:	00025517          	auipc	a0,0x25
    8000348c:	8d050513          	addi	a0,a0,-1840 # 80027d58 <__func__.0+0x2f8>
    80003490:	067220ef          	jal	80025cf6 <printf>
    80003494:	00046797          	auipc	a5,0x46
    80003498:	b7d7c783          	lbu	a5,-1155(a5) # 80049011 <excpt+0x1>
    8000349c:	2e079b63          	bnez	a5,80003792 <m_and_hs_using_vs_access_1+0x414>
    800034a0:	48890c63          	beq	s2,s0,80003938 <m_and_hs_using_vs_access_1+0x5ba>
    800034a4:	00025597          	auipc	a1,0x25
    800034a8:	88c58593          	addi	a1,a1,-1908 # 80027d30 <__func__.0+0x2d0>
    800034ac:	00025517          	auipc	a0,0x25
    800034b0:	8c450513          	addi	a0,a0,-1852 # 80027d70 <__func__.0+0x310>
    800034b4:	043220ef          	jal	80025cf6 <printf>
    800034b8:	00025517          	auipc	a0,0x25
    800034bc:	8c050513          	addi	a0,a0,-1856 # 80027d78 <__func__.0+0x318>
    800034c0:	037220ef          	jal	80025cf6 <printf>
    800034c4:	02900513          	li	a0,41
    800034c8:	638210ef          	jal	80024b00 <putchar>
    800034cc:	4529                	li	a0,10
    800034ce:	632210ef          	jal	80024b00 <putchar>
    800034d2:	00046797          	auipc	a5,0x46
    800034d6:	b3f7c783          	lbu	a5,-1217(a5) # 80049011 <excpt+0x1>
    800034da:	4981                	li	s3,0
    800034dc:	eb99                	bnez	a5,800034f2 <m_and_hs_using_vs_access_1+0x174>
    800034de:	011087b7          	lui	a5,0x1108
    800034e2:	ec178793          	addi	a5,a5,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    800034e6:	07c2                	slli	a5,a5,0x10
    800034e8:	17b9                	addi	a5,a5,-18
    800034ea:	40f90933          	sub	s2,s2,a5
    800034ee:	00193993          	seqz	s3,s2
        excpt.triggered == false && val == 0x1107ec0ffee
    );

    //TODO: test mprv to access hs space

    goto_priv(PRIV_HS);
    800034f2:	450d                	li	a0,3
    800034f4:	f02fd0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    800034f8:	4509                	li	a0,2
    800034fa:	e1cfd0ef          	jal	80000b16 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    800034fe:	0330000f          	fence	rw,rw
    80003502:	4785                	li	a5,1
    80003504:	00046717          	auipc	a4,0x46
    80003508:	b4073223          	sd	zero,-1212(a4) # 80049048 <excpt+0x38>
    8000350c:	00f49023          	sh	a5,0(s1)
    80003510:	0330000f          	fence	rw,rw
        :: "r"(value), "r"(addr): "memory");
    return value;
}

static inline uint64_t hsvd(uintptr_t addr, uint64_t value){
    asm volatile(
    80003514:	37ab7937          	lui	s2,0x37ab7
    80003518:	001007b7          	lui	a5,0x100
    8000351c:	090a                	slli	s2,s2,0x2
    8000351e:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    80003522:	eef90913          	addi	s2,s2,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80003526:	07b2                	slli	a5,a5,0xc
    80003528:	6f27c073          	.insn	4, 0x6f27c073
    asm volatile(
    8000352c:	6c07c473          	.insn	4, 0x6c07c473
    hsvd(vaddr, 0xdeadbeef);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd",
    80003530:	00025617          	auipc	a2,0x25
    80003534:	04060613          	addi	a2,a2,64 # 80028570 <__func__.0+0xb10>
    80003538:	08200593          	li	a1,130
    8000353c:	00025517          	auipc	a0,0x25
    80003540:	81c50513          	addi	a0,a0,-2020 # 80027d58 <__func__.0+0x2f8>
    80003544:	7b2220ef          	jal	80025cf6 <printf>
    80003548:	00046797          	auipc	a5,0x46
    8000354c:	ac97c783          	lbu	a5,-1335(a5) # 80049011 <excpt+0x1>
    80003550:	26079d63          	bnez	a5,800037ca <m_and_hs_using_vs_access_1+0x44c>
    80003554:	41240363          	beq	s0,s2,8000395a <m_and_hs_using_vs_access_1+0x5dc>
    80003558:	00024597          	auipc	a1,0x24
    8000355c:	7d858593          	addi	a1,a1,2008 # 80027d30 <__func__.0+0x2d0>
    80003560:	00025517          	auipc	a0,0x25
    80003564:	81050513          	addi	a0,a0,-2032 # 80027d70 <__func__.0+0x310>
    80003568:	78e220ef          	jal	80025cf6 <printf>
    8000356c:	00025517          	auipc	a0,0x25
    80003570:	80c50513          	addi	a0,a0,-2036 # 80027d78 <__func__.0+0x318>
    80003574:	782220ef          	jal	80025cf6 <printf>
    80003578:	02900513          	li	a0,41
    8000357c:	584210ef          	jal	80024b00 <putchar>
    80003580:	4529                	li	a0,10
    80003582:	57e210ef          	jal	80024b00 <putchar>
    80003586:	36099063          	bnez	s3,800038e6 <m_and_hs_using_vs_access_1+0x568>
    8000358a:	4401                	li	s0,0
        excpt.triggered == false && val == 0xdeadbeef
    );

    TEST_SETUP_EXCEPT();
    8000358c:	0330000f          	fence	rw,rw
    80003590:	4785                	li	a5,1
    80003592:	00046717          	auipc	a4,0x46
    80003596:	aa073b23          	sd	zero,-1354(a4) # 80049048 <excpt+0x38>
    8000359a:	00f49023          	sh	a5,0(s1)
    8000359e:	0330000f          	fence	rw,rw
    asm volatile(
    800035a2:	001007b7          	lui	a5,0x100
    800035a6:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    800035aa:	07b2                	slli	a5,a5,0xc
    800035ac:	0ff00993          	li	s3,255
    800035b0:	6337c073          	.insn	4, 0x6337c073
    asm volatile(
    800035b4:	6007ca73          	.insn	4, 0x6007ca73
    asm volatile(
    800035b8:	6017c973          	.insn	4, 0x6017c973
    hsvb(vaddr, ((uint8_t)-1));
    val = hlvb(vaddr);
    valu = hlvbu(vaddr);
    TEST_ASSERT("hs hlvb vs hlvbu",
    800035bc:	00025617          	auipc	a2,0x25
    800035c0:	fbc60613          	addi	a2,a2,-68 # 80028578 <__func__.0+0xb18>
    800035c4:	08200593          	li	a1,130
    800035c8:	00024517          	auipc	a0,0x24
    800035cc:	79050513          	addi	a0,a0,1936 # 80027d58 <__func__.0+0x2f8>
    800035d0:	726220ef          	jal	80025cf6 <printf>
    800035d4:	00046797          	auipc	a5,0x46
    800035d8:	a3d7c783          	lbu	a5,-1475(a5) # 80049011 <excpt+0x1>
    800035dc:	2c079063          	bnez	a5,8000389c <m_and_hs_using_vs_access_1+0x51e>
    800035e0:	57fd                	li	a5,-1
    800035e2:	32fa0963          	beq	s4,a5,80003914 <m_and_hs_using_vs_access_1+0x596>
    800035e6:	00024597          	auipc	a1,0x24
    800035ea:	74a58593          	addi	a1,a1,1866 # 80027d30 <__func__.0+0x2d0>
    800035ee:	00024517          	auipc	a0,0x24
    800035f2:	78250513          	addi	a0,a0,1922 # 80027d70 <__func__.0+0x310>
    800035f6:	700220ef          	jal	80025cf6 <printf>
    800035fa:	00024517          	auipc	a0,0x24
    800035fe:	77e50513          	addi	a0,a0,1918 # 80027d78 <__func__.0+0x318>
    80003602:	6f4220ef          	jal	80025cf6 <printf>
    80003606:	02900513          	li	a0,41
    8000360a:	4f6210ef          	jal	80024b00 <putchar>
    8000360e:	4529                	li	a0,10
    80003610:	4f0210ef          	jal	80024b00 <putchar>
    80003614:	c419                	beqz	s0,80003622 <m_and_hs_using_vs_access_1+0x2a4>
    80003616:	00046797          	auipc	a5,0x46
    8000361a:	9fb7c783          	lbu	a5,-1541(a5) # 80049011 <excpt+0x1>
    8000361e:	2e078763          	beqz	a5,8000390c <m_and_hs_using_vs_access_1+0x58e>
    80003622:	4401                	li	s0,0
        excpt.triggered == false && val == (-1) && valu == ((uint8_t)-1)
    );

    TEST_SETUP_EXCEPT();
    80003624:	0330000f          	fence	rw,rw
    80003628:	4785                	li	a5,1
    8000362a:	00046717          	auipc	a4,0x46
    8000362e:	a0073f23          	sd	zero,-1506(a4) # 80049048 <excpt+0x38>
    80003632:	00f49023          	sh	a5,0(s1)
    80003636:	0330000f          	fence	rw,rw
    asm volatile(
    8000363a:	001007b7          	lui	a5,0x100
    8000363e:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    80003642:	6941                	lui	s2,0x10
    80003644:	07b2                	slli	a5,a5,0xc
    80003646:	197d                	addi	s2,s2,-1 # ffff <_test_table_size+0xfffe>
    80003648:	6727c073          	.insn	4, 0x6727c073
    asm volatile(
    8000364c:	6407ca73          	.insn	4, 0x6407ca73
    asm volatile(
    80003650:	6417c9f3          	.insn	4, 0x6417c9f3
    hsvh(vaddr, ((uint16_t)-1));
    val = hlvh(vaddr);
    valu = hlvhu(vaddr);
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003654:	00025617          	auipc	a2,0x25
    80003658:	f3c60613          	addi	a2,a2,-196 # 80028590 <__func__.0+0xb30>
    8000365c:	08200593          	li	a1,130
    80003660:	00024517          	auipc	a0,0x24
    80003664:	6f850513          	addi	a0,a0,1784 # 80027d58 <__func__.0+0x2f8>
    80003668:	68e220ef          	jal	80025cf6 <printf>
    8000366c:	00046797          	auipc	a5,0x46
    80003670:	9a57c783          	lbu	a5,-1627(a5) # 80049011 <excpt+0x1>
    80003674:	1c079e63          	bnez	a5,80003850 <m_and_hs_using_vs_access_1+0x4d2>
    80003678:	57fd                	li	a5,-1
    8000367a:	32fa0463          	beq	s4,a5,800039a2 <m_and_hs_using_vs_access_1+0x624>
    8000367e:	00024597          	auipc	a1,0x24
    80003682:	6b258593          	addi	a1,a1,1714 # 80027d30 <__func__.0+0x2d0>
    80003686:	00024517          	auipc	a0,0x24
    8000368a:	6ea50513          	addi	a0,a0,1770 # 80027d70 <__func__.0+0x310>
    8000368e:	668220ef          	jal	80025cf6 <printf>
    80003692:	00024517          	auipc	a0,0x24
    80003696:	6e650513          	addi	a0,a0,1766 # 80027d78 <__func__.0+0x318>
    8000369a:	65c220ef          	jal	80025cf6 <printf>
    8000369e:	02900513          	li	a0,41
    800036a2:	45e210ef          	jal	80024b00 <putchar>
    800036a6:	4529                	li	a0,10
    800036a8:	458210ef          	jal	80024b00 <putchar>
    800036ac:	c419                	beqz	s0,800036ba <m_and_hs_using_vs_access_1+0x33c>
    800036ae:	00046797          	auipc	a5,0x46
    800036b2:	9637c783          	lbu	a5,-1693(a5) # 80049011 <excpt+0x1>
    800036b6:	24078763          	beqz	a5,80003904 <m_and_hs_using_vs_access_1+0x586>
    800036ba:	4901                	li	s2,0
        excpt.triggered == false && val == (-1) && valu == ((uint16_t)-1)
    );

    TEST_SETUP_EXCEPT();
    800036bc:	0330000f          	fence	rw,rw
    800036c0:	4785                	li	a5,1
    800036c2:	00046717          	auipc	a4,0x46
    800036c6:	98073323          	sd	zero,-1658(a4) # 80049048 <excpt+0x38>
    800036ca:	00f49023          	sh	a5,0(s1)
    800036ce:	0330000f          	fence	rw,rw
    asm volatile(
    800036d2:	001007b7          	lui	a5,0x100
    800036d6:	54fd                	li	s1,-1
    800036d8:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    800036dc:	07b2                	slli	a5,a5,0xc
    800036de:	0204d993          	srli	s3,s1,0x20
    800036e2:	6b37c073          	.insn	4, 0x6b37c073
    asm volatile(
    800036e6:	6807ca73          	.insn	4, 0x6807ca73
    asm volatile(
    800036ea:	6817c473          	.insn	4, 0x6817c473
    hsvw(vaddr, ((uint32_t)-1));
    val = hlvw(vaddr);
    valu = hlvwu(vaddr);
    TEST_ASSERT("hs hlvw vs hlvwu",
    800036ee:	00025617          	auipc	a2,0x25
    800036f2:	eba60613          	addi	a2,a2,-326 # 800285a8 <__func__.0+0xb48>
    800036f6:	08200593          	li	a1,130
    800036fa:	00024517          	auipc	a0,0x24
    800036fe:	65e50513          	addi	a0,a0,1630 # 80027d58 <__func__.0+0x2f8>
    80003702:	5f4220ef          	jal	80025cf6 <printf>
    80003706:	00046797          	auipc	a5,0x46
    8000370a:	90b7c783          	lbu	a5,-1781(a5) # 80049011 <excpt+0x1>
    8000370e:	0e079c63          	bnez	a5,80003806 <m_and_hs_using_vs_access_1+0x488>
    80003712:	269a0563          	beq	s4,s1,8000397c <m_and_hs_using_vs_access_1+0x5fe>
    80003716:	00024597          	auipc	a1,0x24
    8000371a:	61a58593          	addi	a1,a1,1562 # 80027d30 <__func__.0+0x2d0>
    8000371e:	00024517          	auipc	a0,0x24
    80003722:	65250513          	addi	a0,a0,1618 # 80027d70 <__func__.0+0x310>
    80003726:	5d0220ef          	jal	80025cf6 <printf>
    8000372a:	00024517          	auipc	a0,0x24
    8000372e:	64e50513          	addi	a0,a0,1614 # 80027d78 <__func__.0+0x318>
    80003732:	5c4220ef          	jal	80025cf6 <printf>
    80003736:	02900513          	li	a0,41
    8000373a:	3c6210ef          	jal	80024b00 <putchar>
    8000373e:	4529                	li	a0,10
    80003740:	3c0210ef          	jal	80024b00 <putchar>
    80003744:	00090e63          	beqz	s2,80003760 <m_and_hs_using_vs_access_1+0x3e2>
    80003748:	00046797          	auipc	a5,0x46
    8000374c:	8c97c783          	lbu	a5,-1847(a5) # 80049011 <excpt+0x1>
    80003750:	eb81                	bnez	a5,80003760 <m_and_hs_using_vs_access_1+0x3e2>
    80003752:	57fd                	li	a5,-1
    80003754:	00fa1663          	bne	s4,a5,80003760 <m_and_hs_using_vs_access_1+0x3e2>
    80003758:	020a5a13          	srli	s4,s4,0x20
    8000375c:	0f440463          	beq	s0,s4,80003844 <m_and_hs_using_vs_access_1+0x4c6>
    80003760:	4401                	li	s0,0
        excpt.triggered == false && val == (-1) && valu == ((uint32_t)-1)
    );

    TEST_END();
    80003762:	00024597          	auipc	a1,0x24
    80003766:	5ce58593          	addi	a1,a1,1486 # 80027d30 <__func__.0+0x2d0>
    8000376a:	00024517          	auipc	a0,0x24
    8000376e:	66e50513          	addi	a0,a0,1646 # 80027dd8 <__func__.0+0x378>
    80003772:	584220ef          	jal	80025cf6 <printf>
    80003776:	4511                	li	a0,4
    80003778:	c7efd0ef          	jal	80000bf6 <goto_priv>
    8000377c:	d31fd0ef          	jal	800014ac <reset_state>
}
    80003780:	70a2                	ld	ra,40(sp)
    80003782:	8522                	mv	a0,s0
    80003784:	7402                	ld	s0,32(sp)
    80003786:	64e2                	ld	s1,24(sp)
    80003788:	6942                	ld	s2,16(sp)
    8000378a:	69a2                	ld	s3,8(sp)
    8000378c:	6a02                	ld	s4,0(sp)
    8000378e:	6145                	addi	sp,sp,48
    80003790:	8082                	ret
    TEST_ASSERT("machine sets mprv to access vs space",
    80003792:	00024597          	auipc	a1,0x24
    80003796:	59e58593          	addi	a1,a1,1438 # 80027d30 <__func__.0+0x2d0>
    8000379a:	00024517          	auipc	a0,0x24
    8000379e:	5d650513          	addi	a0,a0,1494 # 80027d70 <__func__.0+0x310>
    800037a2:	554220ef          	jal	80025cf6 <printf>
    800037a6:	00046797          	auipc	a5,0x46
    800037aa:	86b7c783          	lbu	a5,-1941(a5) # 80049011 <excpt+0x1>
    800037ae:	d00795e3          	bnez	a5,800034b8 <m_and_hs_using_vs_access_1+0x13a>
    800037b2:	d08913e3          	bne	s2,s0,800034b8 <m_and_hs_using_vs_access_1+0x13a>
    800037b6:	4529                	li	a0,10
    800037b8:	348210ef          	jal	80024b00 <putchar>
    800037bc:	00046997          	auipc	s3,0x46
    800037c0:	8559c983          	lbu	s3,-1963(s3) # 80049011 <excpt+0x1>
    800037c4:	0019c993          	xori	s3,s3,1
    800037c8:	b32d                	j	800034f2 <m_and_hs_using_vs_access_1+0x174>
    TEST_ASSERT("hs hlvd",
    800037ca:	00024597          	auipc	a1,0x24
    800037ce:	56658593          	addi	a1,a1,1382 # 80027d30 <__func__.0+0x2d0>
    800037d2:	00024517          	auipc	a0,0x24
    800037d6:	59e50513          	addi	a0,a0,1438 # 80027d70 <__func__.0+0x310>
    800037da:	51c220ef          	jal	80025cf6 <printf>
    800037de:	00046797          	auipc	a5,0x46
    800037e2:	8337c783          	lbu	a5,-1997(a5) # 80049011 <excpt+0x1>
    800037e6:	d80793e3          	bnez	a5,8000356c <m_and_hs_using_vs_access_1+0x1ee>
    800037ea:	d92411e3          	bne	s0,s2,8000356c <m_and_hs_using_vs_access_1+0x1ee>
    800037ee:	4529                	li	a0,10
    800037f0:	310210ef          	jal	80024b00 <putchar>
    800037f4:	d8098be3          	beqz	s3,8000358a <m_and_hs_using_vs_access_1+0x20c>
    800037f8:	00046417          	auipc	s0,0x46
    800037fc:	81944403          	lbu	s0,-2023(s0) # 80049011 <excpt+0x1>
    80003800:	00144413          	xori	s0,s0,1
    80003804:	b361                	j	8000358c <m_and_hs_using_vs_access_1+0x20e>
    TEST_ASSERT("hs hlvw vs hlvwu",
    80003806:	00024597          	auipc	a1,0x24
    8000380a:	52a58593          	addi	a1,a1,1322 # 80027d30 <__func__.0+0x2d0>
    8000380e:	00024517          	auipc	a0,0x24
    80003812:	56250513          	addi	a0,a0,1378 # 80027d70 <__func__.0+0x310>
    80003816:	4e0220ef          	jal	80025cf6 <printf>
    8000381a:	00045797          	auipc	a5,0x45
    8000381e:	7f77c783          	lbu	a5,2039(a5) # 80049011 <excpt+0x1>
    80003822:	f00794e3          	bnez	a5,8000372a <m_and_hs_using_vs_access_1+0x3ac>
    80003826:	f09a12e3          	bne	s4,s1,8000372a <m_and_hs_using_vs_access_1+0x3ac>
    8000382a:	f13410e3          	bne	s0,s3,8000372a <m_and_hs_using_vs_access_1+0x3ac>
    8000382e:	4529                	li	a0,10
    80003830:	2d0210ef          	jal	80024b00 <putchar>
    80003834:	f20906e3          	beqz	s2,80003760 <m_and_hs_using_vs_access_1+0x3e2>
    80003838:	00045797          	auipc	a5,0x45
    8000383c:	7d97c783          	lbu	a5,2009(a5) # 80049011 <excpt+0x1>
    80003840:	f20790e3          	bnez	a5,80003760 <m_and_hs_using_vs_access_1+0x3e2>
    80003844:	4405                	li	s0,1
    TEST_END();
    80003846:	00024597          	auipc	a1,0x24
    8000384a:	4da58593          	addi	a1,a1,1242 # 80027d20 <__func__.0+0x2c0>
    8000384e:	bf31                	j	8000376a <m_and_hs_using_vs_access_1+0x3ec>
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003850:	00024597          	auipc	a1,0x24
    80003854:	4e058593          	addi	a1,a1,1248 # 80027d30 <__func__.0+0x2d0>
    80003858:	00024517          	auipc	a0,0x24
    8000385c:	51850513          	addi	a0,a0,1304 # 80027d70 <__func__.0+0x310>
    80003860:	496220ef          	jal	80025cf6 <printf>
    80003864:	00045797          	auipc	a5,0x45
    80003868:	7ad7c783          	lbu	a5,1965(a5) # 80049011 <excpt+0x1>
    8000386c:	e20793e3          	bnez	a5,80003692 <m_and_hs_using_vs_access_1+0x314>
    80003870:	57fd                	li	a5,-1
    80003872:	e2fa10e3          	bne	s4,a5,80003692 <m_and_hs_using_vs_access_1+0x314>
    80003876:	e1299ee3          	bne	s3,s2,80003692 <m_and_hs_using_vs_access_1+0x314>
    8000387a:	4529                	li	a0,10
    8000387c:	284210ef          	jal	80024b00 <putchar>
    80003880:	e2040de3          	beqz	s0,800036ba <m_and_hs_using_vs_access_1+0x33c>
    80003884:	00045797          	auipc	a5,0x45
    80003888:	78d7c783          	lbu	a5,1933(a5) # 80049011 <excpt+0x1>
    8000388c:	e20797e3          	bnez	a5,800036ba <m_and_hs_using_vs_access_1+0x33c>
    80003890:	7941                	lui	s2,0xffff0
    80003892:	0905                	addi	s2,s2,1 # ffffffffffff0001 <__stack_top+0xffffffff7fcf1001>
    80003894:	994e                	add	s2,s2,s3
    80003896:	00193913          	seqz	s2,s2
    8000389a:	b50d                	j	800036bc <m_and_hs_using_vs_access_1+0x33e>
    TEST_ASSERT("hs hlvb vs hlvbu",
    8000389c:	00024597          	auipc	a1,0x24
    800038a0:	49458593          	addi	a1,a1,1172 # 80027d30 <__func__.0+0x2d0>
    800038a4:	00024517          	auipc	a0,0x24
    800038a8:	4cc50513          	addi	a0,a0,1228 # 80027d70 <__func__.0+0x310>
    800038ac:	44a220ef          	jal	80025cf6 <printf>
    800038b0:	00045797          	auipc	a5,0x45
    800038b4:	7617c783          	lbu	a5,1889(a5) # 80049011 <excpt+0x1>
    800038b8:	d40791e3          	bnez	a5,800035fa <m_and_hs_using_vs_access_1+0x27c>
    800038bc:	57fd                	li	a5,-1
    800038be:	d2fa1ee3          	bne	s4,a5,800035fa <m_and_hs_using_vs_access_1+0x27c>
    800038c2:	d3391ce3          	bne	s2,s3,800035fa <m_and_hs_using_vs_access_1+0x27c>
    800038c6:	4529                	li	a0,10
    800038c8:	238210ef          	jal	80024b00 <putchar>
    800038cc:	d4040be3          	beqz	s0,80003622 <m_and_hs_using_vs_access_1+0x2a4>
    800038d0:	00045797          	auipc	a5,0x45
    800038d4:	7417c783          	lbu	a5,1857(a5) # 80049011 <excpt+0x1>
    800038d8:	d40795e3          	bnez	a5,80003622 <m_and_hs_using_vs_access_1+0x2a4>
    800038dc:	f0190793          	addi	a5,s2,-255
    800038e0:	0017b413          	seqz	s0,a5
    800038e4:	b381                	j	80003624 <m_and_hs_using_vs_access_1+0x2a6>
    TEST_ASSERT("hs hlvd",
    800038e6:	00045797          	auipc	a5,0x45
    800038ea:	72b7c783          	lbu	a5,1835(a5) # 80049011 <excpt+0x1>
    800038ee:	c8079ee3          	bnez	a5,8000358a <m_and_hs_using_vs_access_1+0x20c>
    800038f2:	c85497b7          	lui	a5,0xc8549
    800038f6:	078a                	slli	a5,a5,0x2
    800038f8:	11178793          	addi	a5,a5,273 # ffffffffc8549111 <__stack_top+0xffffffff4824a111>
    800038fc:	943e                	add	s0,s0,a5
    800038fe:	00143413          	seqz	s0,s0
    80003902:	b169                	j	8000358c <m_and_hs_using_vs_access_1+0x20e>
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003904:	57fd                	li	a5,-1
    80003906:	dafa1ae3          	bne	s4,a5,800036ba <m_and_hs_using_vs_access_1+0x33c>
    8000390a:	b759                	j	80003890 <m_and_hs_using_vs_access_1+0x512>
    TEST_ASSERT("hs hlvb vs hlvbu",
    8000390c:	57fd                	li	a5,-1
    8000390e:	d0fa1ae3          	bne	s4,a5,80003622 <m_and_hs_using_vs_access_1+0x2a4>
    80003912:	b7e9                	j	800038dc <m_and_hs_using_vs_access_1+0x55e>
    80003914:	cd3919e3          	bne	s2,s3,800035e6 <m_and_hs_using_vs_access_1+0x268>
    80003918:	00024597          	auipc	a1,0x24
    8000391c:	40858593          	addi	a1,a1,1032 # 80027d20 <__func__.0+0x2c0>
    80003920:	00024517          	auipc	a0,0x24
    80003924:	45050513          	addi	a0,a0,1104 # 80027d70 <__func__.0+0x310>
    80003928:	3ce220ef          	jal	80025cf6 <printf>
    8000392c:	00045797          	auipc	a5,0x45
    80003930:	6e57c783          	lbu	a5,1765(a5) # 80049011 <excpt+0x1>
    80003934:	dbc9                	beqz	a5,800038c6 <m_and_hs_using_vs_access_1+0x548>
    80003936:	b1d1                	j	800035fa <m_and_hs_using_vs_access_1+0x27c>
    TEST_ASSERT("machine sets mprv to access vs space",
    80003938:	00024597          	auipc	a1,0x24
    8000393c:	3e858593          	addi	a1,a1,1000 # 80027d20 <__func__.0+0x2c0>
    80003940:	00024517          	auipc	a0,0x24
    80003944:	43050513          	addi	a0,a0,1072 # 80027d70 <__func__.0+0x310>
    80003948:	3ae220ef          	jal	80025cf6 <printf>
    8000394c:	00045797          	auipc	a5,0x45
    80003950:	6c57c783          	lbu	a5,1733(a5) # 80049011 <excpt+0x1>
    80003954:	b6078ce3          	beqz	a5,800034cc <m_and_hs_using_vs_access_1+0x14e>
    80003958:	b685                	j	800034b8 <m_and_hs_using_vs_access_1+0x13a>
    TEST_ASSERT("hs hlvd",
    8000395a:	00024597          	auipc	a1,0x24
    8000395e:	3c658593          	addi	a1,a1,966 # 80027d20 <__func__.0+0x2c0>
    80003962:	00024517          	auipc	a0,0x24
    80003966:	40e50513          	addi	a0,a0,1038 # 80027d70 <__func__.0+0x310>
    8000396a:	38c220ef          	jal	80025cf6 <printf>
    8000396e:	00045797          	auipc	a5,0x45
    80003972:	6a37c783          	lbu	a5,1699(a5) # 80049011 <excpt+0x1>
    80003976:	e6078ce3          	beqz	a5,800037ee <m_and_hs_using_vs_access_1+0x470>
    8000397a:	becd                	j	8000356c <m_and_hs_using_vs_access_1+0x1ee>
    TEST_ASSERT("hs hlvw vs hlvwu",
    8000397c:	d9341de3          	bne	s0,s3,80003716 <m_and_hs_using_vs_access_1+0x398>
    80003980:	00024597          	auipc	a1,0x24
    80003984:	3a058593          	addi	a1,a1,928 # 80027d20 <__func__.0+0x2c0>
    80003988:	00024517          	auipc	a0,0x24
    8000398c:	3e850513          	addi	a0,a0,1000 # 80027d70 <__func__.0+0x310>
    80003990:	366220ef          	jal	80025cf6 <printf>
    80003994:	00045797          	auipc	a5,0x45
    80003998:	67d7c783          	lbu	a5,1661(a5) # 80049011 <excpt+0x1>
    8000399c:	e80789e3          	beqz	a5,8000382e <m_and_hs_using_vs_access_1+0x4b0>
    800039a0:	b369                	j	8000372a <m_and_hs_using_vs_access_1+0x3ac>
    TEST_ASSERT("hs hlvh vs hlvhu",
    800039a2:	cd299ee3          	bne	s3,s2,8000367e <m_and_hs_using_vs_access_1+0x300>
    800039a6:	00024597          	auipc	a1,0x24
    800039aa:	37a58593          	addi	a1,a1,890 # 80027d20 <__func__.0+0x2c0>
    800039ae:	00024517          	auipc	a0,0x24
    800039b2:	3c250513          	addi	a0,a0,962 # 80027d70 <__func__.0+0x310>
    800039b6:	340220ef          	jal	80025cf6 <printf>
    800039ba:	00045797          	auipc	a5,0x45
    800039be:	6577c783          	lbu	a5,1623(a5) # 80049011 <excpt+0x1>
    800039c2:	ea078ce3          	beqz	a5,8000387a <m_and_hs_using_vs_access_1+0x4fc>
    800039c6:	b1f1                	j	80003692 <m_and_hs_using_vs_access_1+0x314>

00000000800039c8 <m_and_hs_using_vs_access_2>:
     * hlvx instruction but on a previous lui instruction. 
     * TODO: find out why
     */


bool m_and_hs_using_vs_access_2(){
    800039c8:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    800039ca:	00023597          	auipc	a1,0x23
    800039ce:	96658593          	addi	a1,a1,-1690 # 80026330 <__func__.10>
    800039d2:	00024517          	auipc	a0,0x24
    800039d6:	36e50513          	addi	a0,a0,878 # 80027d40 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_2(){
    800039da:	ec06                	sd	ra,24(sp)
    800039dc:	e822                	sd	s0,16(sp)
    800039de:	e426                	sd	s1,8(sp)
    800039e0:	e04a                	sd	s2,0(sp)
    TEST_START();
    800039e2:	314220ef          	jal	80025cf6 <printf>
    800039e6:	4529                	li	a0,10
    800039e8:	118210ef          	jal	80024b00 <putchar>
    
    hspt_init();
    800039ec:	bf5fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    800039f0:	e33fc0ef          	jal	80000822 <hpt_init>
    vspt_init();
    800039f4:	cbdfc0ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_HS);
    800039f8:	450d                	li	a0,3
    800039fa:	9fcfd0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    800039fe:	4509                	li	a0,2
    80003a00:	916fd0ef          	jal	80000b16 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    80003a04:	0330000f          	fence	rw,rw
    80003a08:	00045417          	auipc	s0,0x45
    80003a0c:	60840413          	addi	s0,s0,1544 # 80049010 <excpt>
    80003a10:	4785                	li	a5,1
    80003a12:	00045717          	auipc	a4,0x45
    80003a16:	62073b23          	sd	zero,1590(a4) # 80049048 <excpt+0x38>
    80003a1a:	00f41023          	sh	a5,0(s0)
    80003a1e:	0330000f          	fence	rw,rw
    asm volatile(
    80003a22:	200037b7          	lui	a5,0x20003
    80003a26:	078e                	slli	a5,a5,0x3
    80003a28:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSX_GUX));
    TEST_ASSERT("hs hlvxwu accesses on only execute page",
    80003a2c:	08200593          	li	a1,130
    80003a30:	00025617          	auipc	a2,0x25
    80003a34:	b9060613          	addi	a2,a2,-1136 # 800285c0 <__func__.0+0xb60>
    80003a38:	00024517          	auipc	a0,0x24
    80003a3c:	32050513          	addi	a0,a0,800 # 80027d58 <__func__.0+0x2f8>
    80003a40:	2b6220ef          	jal	80025cf6 <printf>
    80003a44:	00045797          	auipc	a5,0x45
    80003a48:	5cd7c783          	lbu	a5,1485(a5) # 80049011 <excpt+0x1>
    80003a4c:	00024597          	auipc	a1,0x24
    80003a50:	2d458593          	addi	a1,a1,724 # 80027d20 <__func__.0+0x2c0>
    80003a54:	c789                	beqz	a5,80003a5e <m_and_hs_using_vs_access_2+0x96>
    80003a56:	00024597          	auipc	a1,0x24
    80003a5a:	2da58593          	addi	a1,a1,730 # 80027d30 <__func__.0+0x2d0>
    80003a5e:	00024517          	auipc	a0,0x24
    80003a62:	31250513          	addi	a0,a0,786 # 80027d70 <__func__.0+0x310>
    80003a66:	290220ef          	jal	80025cf6 <printf>
    80003a6a:	00045797          	auipc	a5,0x45
    80003a6e:	5a77c783          	lbu	a5,1447(a5) # 80049011 <excpt+0x1>
    80003a72:	28079563          	bnez	a5,80003cfc <m_and_hs_using_vs_access_2+0x334>
    80003a76:	4529                	li	a0,10
    80003a78:	088210ef          	jal	80024b00 <putchar>
    80003a7c:	00045917          	auipc	s2,0x45
    80003a80:	59594903          	lbu	s2,1429(s2) # 80049011 <excpt+0x1>
        excpt.triggered == false
    );

    TEST_SETUP_EXCEPT();
    80003a84:	0330000f          	fence	rw,rw
    80003a88:	4785                	li	a5,1
    80003a8a:	00045717          	auipc	a4,0x45
    80003a8e:	5a073f23          	sd	zero,1470(a4) # 80049048 <excpt+0x38>
    80003a92:	00f41023          	sh	a5,0(s0)
    80003a96:	0330000f          	fence	rw,rw
    80003a9a:	1782                	slli	a5,a5,0x20
    80003a9c:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSRWX_GURWX));
    TEST_ASSERT("hs hlvxwu accesses page with all permissions",
    80003aa0:	08200593          	li	a1,130
    80003aa4:	00025617          	auipc	a2,0x25
    80003aa8:	b4460613          	addi	a2,a2,-1212 # 800285e8 <__func__.0+0xb88>
    80003aac:	00024517          	auipc	a0,0x24
    80003ab0:	2ac50513          	addi	a0,a0,684 # 80027d58 <__func__.0+0x2f8>
    80003ab4:	242220ef          	jal	80025cf6 <printf>
    80003ab8:	00045797          	auipc	a5,0x45
    80003abc:	5597c783          	lbu	a5,1369(a5) # 80049011 <excpt+0x1>
    80003ac0:	00024597          	auipc	a1,0x24
    80003ac4:	27058593          	addi	a1,a1,624 # 80027d30 <__func__.0+0x2d0>
    80003ac8:	e789                	bnez	a5,80003ad2 <m_and_hs_using_vs_access_2+0x10a>
    80003aca:	00024597          	auipc	a1,0x24
    80003ace:	25658593          	addi	a1,a1,598 # 80027d20 <__func__.0+0x2c0>
    80003ad2:	00024517          	auipc	a0,0x24
    80003ad6:	29e50513          	addi	a0,a0,670 # 80027d70 <__func__.0+0x310>
    80003ada:	21c220ef          	jal	80025cf6 <printf>
    80003ade:	00045797          	auipc	a5,0x45
    80003ae2:	5337c783          	lbu	a5,1331(a5) # 80049011 <excpt+0x1>
    80003ae6:	20079063          	bnez	a5,80003ce6 <m_and_hs_using_vs_access_2+0x31e>
    80003aea:	4529                	li	a0,10
    80003aec:	014210ef          	jal	80024b00 <putchar>
    80003af0:	4481                	li	s1,0
    80003af2:	00091863          	bnez	s2,80003b02 <m_and_hs_using_vs_access_2+0x13a>
    80003af6:	00045497          	auipc	s1,0x45
    80003afa:	51b4c483          	lbu	s1,1307(s1) # 80049011 <excpt+0x1>
    80003afe:	0014c493          	xori	s1,s1,1
        excpt.triggered == false
    );

    TEST_SETUP_EXCEPT();
    80003b02:	0330000f          	fence	rw,rw
    80003b06:	4785                	li	a5,1
    80003b08:	00045717          	auipc	a4,0x45
    80003b0c:	54073023          	sd	zero,1344(a4) # 80049048 <excpt+0x38>
    80003b10:	00f41023          	sh	a5,0(s0)
    80003b14:	0330000f          	fence	rw,rw
    80003b18:	001007b7          	lui	a5,0x100
    80003b1c:	0785                	addi	a5,a5,1 # 100001 <STACK_SIZE+0x1>
    80003b1e:	07b2                	slli	a5,a5,0xc
    80003b20:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSRWX_GURW));
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003b24:	08200593          	li	a1,130
    80003b28:	00025617          	auipc	a2,0x25
    80003b2c:	af060613          	addi	a2,a2,-1296 # 80028618 <__func__.0+0xbb8>
    80003b30:	00024517          	auipc	a0,0x24
    80003b34:	22850513          	addi	a0,a0,552 # 80027d58 <__func__.0+0x2f8>
    80003b38:	1be220ef          	jal	80025cf6 <printf>
    80003b3c:	00045797          	auipc	a5,0x45
    80003b40:	4d57c783          	lbu	a5,1237(a5) # 80049011 <excpt+0x1>
    80003b44:	00024597          	auipc	a1,0x24
    80003b48:	1ec58593          	addi	a1,a1,492 # 80027d30 <__func__.0+0x2d0>
    80003b4c:	c789                	beqz	a5,80003b56 <m_and_hs_using_vs_access_2+0x18e>
    80003b4e:	6418                	ld	a4,8(s0)
    80003b50:	47d5                	li	a5,21
    80003b52:	1ef70563          	beq	a4,a5,80003d3c <m_and_hs_using_vs_access_2+0x374>
    80003b56:	00024517          	auipc	a0,0x24
    80003b5a:	21a50513          	addi	a0,a0,538 # 80027d70 <__func__.0+0x310>
    80003b5e:	198220ef          	jal	80025cf6 <printf>
    80003b62:	00045797          	auipc	a5,0x45
    80003b66:	4af7c783          	lbu	a5,1199(a5) # 80049011 <excpt+0x1>
    80003b6a:	c789                	beqz	a5,80003b74 <m_and_hs_using_vs_access_2+0x1ac>
    80003b6c:	6418                	ld	a4,8(s0)
    80003b6e:	47d5                	li	a5,21
    80003b70:	14f70e63          	beq	a4,a5,80003ccc <m_and_hs_using_vs_access_2+0x304>
    80003b74:	00024517          	auipc	a0,0x24
    80003b78:	20450513          	addi	a0,a0,516 # 80027d78 <__func__.0+0x318>
    80003b7c:	17a220ef          	jal	80025cf6 <printf>
    80003b80:	02900513          	li	a0,41
    80003b84:	77d200ef          	jal	80024b00 <putchar>
    80003b88:	4529                	li	a0,10
    80003b8a:	777200ef          	jal	80024b00 <putchar>
    80003b8e:	c881                	beqz	s1,80003b9e <m_and_hs_using_vs_access_2+0x1d6>
    80003b90:	00045797          	auipc	a5,0x45
    80003b94:	4817c783          	lbu	a5,1153(a5) # 80049011 <excpt+0x1>
    80003b98:	4481                	li	s1,0
    80003b9a:	0e079d63          	bnez	a5,80003c94 <m_and_hs_using_vs_access_2+0x2cc>
        excpt.cause == CAUSE_LGPF && 
        excpt.gva == true &&
        excpt.xpv == false
    );

    TEST_SETUP_EXCEPT();
    80003b9e:	0330000f          	fence	rw,rw
    80003ba2:	4785                	li	a5,1
    80003ba4:	00045717          	auipc	a4,0x45
    80003ba8:	4a073223          	sd	zero,1188(a4) # 80049048 <excpt+0x38>
    80003bac:	00f41023          	sh	a5,0(s0)
    80003bb0:	0330000f          	fence	rw,rw
    80003bb4:	001007b7          	lui	a5,0x100
    80003bb8:	0795                	addi	a5,a5,5 # 100005 <STACK_SIZE+0x5>
    80003bba:	07b2                	slli	a5,a5,0xc
    80003bbc:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSRW_GURWX));
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003bc0:	08200593          	li	a1,130
    80003bc4:	00025617          	auipc	a2,0x25
    80003bc8:	a8c60613          	addi	a2,a2,-1396 # 80028650 <__func__.0+0xbf0>
    80003bcc:	00024517          	auipc	a0,0x24
    80003bd0:	18c50513          	addi	a0,a0,396 # 80027d58 <__func__.0+0x2f8>
    80003bd4:	122220ef          	jal	80025cf6 <printf>
    80003bd8:	00045797          	auipc	a5,0x45
    80003bdc:	4397c783          	lbu	a5,1081(a5) # 80049011 <excpt+0x1>
    80003be0:	00024597          	auipc	a1,0x24
    80003be4:	15058593          	addi	a1,a1,336 # 80027d30 <__func__.0+0x2d0>
    80003be8:	c789                	beqz	a5,80003bf2 <m_and_hs_using_vs_access_2+0x22a>
    80003bea:	6418                	ld	a4,8(s0)
    80003bec:	47b5                	li	a5,13
    80003bee:	12f70263          	beq	a4,a5,80003d12 <m_and_hs_using_vs_access_2+0x34a>
    80003bf2:	00024517          	auipc	a0,0x24
    80003bf6:	17e50513          	addi	a0,a0,382 # 80027d70 <__func__.0+0x310>
    80003bfa:	0fc220ef          	jal	80025cf6 <printf>
    80003bfe:	00045797          	auipc	a5,0x45
    80003c02:	4137c783          	lbu	a5,1043(a5) # 80049011 <excpt+0x1>
    80003c06:	c789                	beqz	a5,80003c10 <m_and_hs_using_vs_access_2+0x248>
    80003c08:	6418                	ld	a4,8(s0)
    80003c0a:	47b5                	li	a5,13
    80003c0c:	0af70563          	beq	a4,a5,80003cb6 <m_and_hs_using_vs_access_2+0x2ee>
    80003c10:	00024517          	auipc	a0,0x24
    80003c14:	16850513          	addi	a0,a0,360 # 80027d78 <__func__.0+0x318>
    80003c18:	0de220ef          	jal	80025cf6 <printf>
    80003c1c:	02900513          	li	a0,41
    80003c20:	6e1200ef          	jal	80024b00 <putchar>
    80003c24:	4529                	li	a0,10
    80003c26:	6db200ef          	jal	80024b00 <putchar>
    80003c2a:	c491                	beqz	s1,80003c36 <m_and_hs_using_vs_access_2+0x26e>
    80003c2c:	00045797          	auipc	a5,0x45
    80003c30:	3e57c783          	lbu	a5,997(a5) # 80049011 <excpt+0x1>
    80003c34:	eb85                	bnez	a5,80003c64 <m_and_hs_using_vs_access_2+0x29c>
    80003c36:	4401                	li	s0,0
        excpt.gva == true &&
        excpt.xpv == false
    );

    
    TEST_END();
    80003c38:	00024597          	auipc	a1,0x24
    80003c3c:	0f858593          	addi	a1,a1,248 # 80027d30 <__func__.0+0x2d0>
    80003c40:	00024517          	auipc	a0,0x24
    80003c44:	19850513          	addi	a0,a0,408 # 80027dd8 <__func__.0+0x378>
    80003c48:	0ae220ef          	jal	80025cf6 <printf>
    80003c4c:	4511                	li	a0,4
    80003c4e:	fa9fc0ef          	jal	80000bf6 <goto_priv>
    80003c52:	85bfd0ef          	jal	800014ac <reset_state>
}
    80003c56:	60e2                	ld	ra,24(sp)
    80003c58:	8522                	mv	a0,s0
    80003c5a:	6442                	ld	s0,16(sp)
    80003c5c:	64a2                	ld	s1,8(sp)
    80003c5e:	6902                	ld	s2,0(sp)
    80003c60:	6105                	addi	sp,sp,32
    80003c62:	8082                	ret
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003c64:	6418                	ld	a4,8(s0)
    80003c66:	47b5                	li	a5,13
    80003c68:	4401                	li	s0,0
    TEST_END();
    80003c6a:	00024597          	auipc	a1,0x24
    80003c6e:	0c658593          	addi	a1,a1,198 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003c72:	fcf717e3          	bne	a4,a5,80003c40 <m_and_hs_using_vs_access_2+0x278>
    80003c76:	00045417          	auipc	s0,0x45
    80003c7a:	3ca44403          	lbu	s0,970(s0) # 80049040 <excpt+0x30>
    80003c7e:	d069                	beqz	s0,80003c40 <m_and_hs_using_vs_access_2+0x278>
    80003c80:	00045797          	auipc	a5,0x45
    80003c84:	3c17c783          	lbu	a5,961(a5) # 80049041 <excpt+0x31>
    TEST_END();
    80003c88:	00024597          	auipc	a1,0x24
    80003c8c:	09858593          	addi	a1,a1,152 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003c90:	dbc5                	beqz	a5,80003c40 <m_and_hs_using_vs_access_2+0x278>
    80003c92:	b755                	j	80003c36 <m_and_hs_using_vs_access_2+0x26e>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003c94:	6418                	ld	a4,8(s0)
    80003c96:	47d5                	li	a5,21
    80003c98:	f0f713e3          	bne	a4,a5,80003b9e <m_and_hs_using_vs_access_2+0x1d6>
    80003c9c:	00045797          	auipc	a5,0x45
    80003ca0:	3a47c783          	lbu	a5,932(a5) # 80049040 <excpt+0x30>
    80003ca4:	ee078de3          	beqz	a5,80003b9e <m_and_hs_using_vs_access_2+0x1d6>
    80003ca8:	00045497          	auipc	s1,0x45
    80003cac:	3994c483          	lbu	s1,921(s1) # 80049041 <excpt+0x31>
    80003cb0:	0014c493          	xori	s1,s1,1
    80003cb4:	b5ed                	j	80003b9e <m_and_hs_using_vs_access_2+0x1d6>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003cb6:	00045797          	auipc	a5,0x45
    80003cba:	38a7c783          	lbu	a5,906(a5) # 80049040 <excpt+0x30>
    80003cbe:	dba9                	beqz	a5,80003c10 <m_and_hs_using_vs_access_2+0x248>
    80003cc0:	00045797          	auipc	a5,0x45
    80003cc4:	3817c783          	lbu	a5,897(a5) # 80049041 <excpt+0x31>
    80003cc8:	dfb1                	beqz	a5,80003c24 <m_and_hs_using_vs_access_2+0x25c>
    80003cca:	b799                	j	80003c10 <m_and_hs_using_vs_access_2+0x248>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003ccc:	00045797          	auipc	a5,0x45
    80003cd0:	3747c783          	lbu	a5,884(a5) # 80049040 <excpt+0x30>
    80003cd4:	ea0780e3          	beqz	a5,80003b74 <m_and_hs_using_vs_access_2+0x1ac>
    80003cd8:	00045797          	auipc	a5,0x45
    80003cdc:	3697c783          	lbu	a5,873(a5) # 80049041 <excpt+0x31>
    80003ce0:	ea0784e3          	beqz	a5,80003b88 <m_and_hs_using_vs_access_2+0x1c0>
    80003ce4:	bd41                	j	80003b74 <m_and_hs_using_vs_access_2+0x1ac>
    TEST_ASSERT("hs hlvxwu accesses page with all permissions",
    80003ce6:	00024517          	auipc	a0,0x24
    80003cea:	09250513          	addi	a0,a0,146 # 80027d78 <__func__.0+0x318>
    80003cee:	008220ef          	jal	80025cf6 <printf>
    80003cf2:	02900513          	li	a0,41
    80003cf6:	60b200ef          	jal	80024b00 <putchar>
    80003cfa:	bbc5                	j	80003aea <m_and_hs_using_vs_access_2+0x122>
    TEST_ASSERT("hs hlvxwu accesses on only execute page",
    80003cfc:	00024517          	auipc	a0,0x24
    80003d00:	07c50513          	addi	a0,a0,124 # 80027d78 <__func__.0+0x318>
    80003d04:	7f3210ef          	jal	80025cf6 <printf>
    80003d08:	02900513          	li	a0,41
    80003d0c:	5f5200ef          	jal	80024b00 <putchar>
    80003d10:	b39d                	j	80003a76 <m_and_hs_using_vs_access_2+0xae>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003d12:	00045797          	auipc	a5,0x45
    80003d16:	32e7c783          	lbu	a5,814(a5) # 80049040 <excpt+0x30>
    80003d1a:	ec078ce3          	beqz	a5,80003bf2 <m_and_hs_using_vs_access_2+0x22a>
    80003d1e:	00045797          	auipc	a5,0x45
    80003d22:	3237c783          	lbu	a5,803(a5) # 80049041 <excpt+0x31>
    80003d26:	00024597          	auipc	a1,0x24
    80003d2a:	ffa58593          	addi	a1,a1,-6 # 80027d20 <__func__.0+0x2c0>
    80003d2e:	ec0782e3          	beqz	a5,80003bf2 <m_and_hs_using_vs_access_2+0x22a>
    80003d32:	00024597          	auipc	a1,0x24
    80003d36:	ffe58593          	addi	a1,a1,-2 # 80027d30 <__func__.0+0x2d0>
    80003d3a:	bd65                	j	80003bf2 <m_and_hs_using_vs_access_2+0x22a>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003d3c:	00045797          	auipc	a5,0x45
    80003d40:	3047c783          	lbu	a5,772(a5) # 80049040 <excpt+0x30>
    80003d44:	e00789e3          	beqz	a5,80003b56 <m_and_hs_using_vs_access_2+0x18e>
    80003d48:	00045797          	auipc	a5,0x45
    80003d4c:	2f97c783          	lbu	a5,761(a5) # 80049041 <excpt+0x31>
    80003d50:	00024597          	auipc	a1,0x24
    80003d54:	fd058593          	addi	a1,a1,-48 # 80027d20 <__func__.0+0x2c0>
    80003d58:	de078fe3          	beqz	a5,80003b56 <m_and_hs_using_vs_access_2+0x18e>
    80003d5c:	00024597          	auipc	a1,0x24
    80003d60:	fd458593          	addi	a1,a1,-44 # 80027d30 <__func__.0+0x2d0>
    80003d64:	bbcd                	j	80003b56 <m_and_hs_using_vs_access_2+0x18e>

0000000080003d66 <m_and_hs_using_vs_access_3>:

bool m_and_hs_using_vs_access_3(){
    80003d66:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80003d68:	00022597          	auipc	a1,0x22
    80003d6c:	5e858593          	addi	a1,a1,1512 # 80026350 <__func__.9>
    80003d70:	00024517          	auipc	a0,0x24
    80003d74:	fd050513          	addi	a0,a0,-48 # 80027d40 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_3(){
    80003d78:	ec06                	sd	ra,24(sp)
    80003d7a:	e822                	sd	s0,16(sp)
    80003d7c:	e426                	sd	s1,8(sp)
    80003d7e:	e04a                	sd	s2,0(sp)
    TEST_START();
    80003d80:	777210ef          	jal	80025cf6 <printf>
    80003d84:	4529                	li	a0,10
    80003d86:	57b200ef          	jal	80024b00 <putchar>
    
    hspt_init();
    80003d8a:	857fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80003d8e:	a95fc0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80003d92:	91ffc0ef          	jal	800006b0 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    goto_priv(PRIV_M);
    80003d96:	4511                	li	a0,4
    80003d98:	e5ffc0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80003d9c:	0330000f          	fence	rw,rw
    80003da0:	00045417          	auipc	s0,0x45
    80003da4:	27040413          	addi	s0,s0,624 # 80049010 <excpt>
    80003da8:	4785                	li	a5,1
    80003daa:	00045717          	auipc	a4,0x45
    80003dae:	28073f23          	sd	zero,670(a4) # 80049048 <excpt+0x38>
    80003db2:	00f41023          	sh	a5,0(s0)
    80003db6:	0330000f          	fence	rw,rw
    *((volatile uint64_t*) addr) = val;
    80003dba:	0002c497          	auipc	s1,0x2c
    80003dbe:	6be48493          	addi	s1,s1,1726 # 80030478 <__func__.0+0x8a18>
    80003dc2:	6098                	ld	a4,0(s1)
    80003dc4:	440197b7          	lui	a5,0x44019
    80003dc8:	0786                	slli	a5,a5,0x1
    80003dca:	e398                	sd	a4,0(a5)
    if(curr_priv != PRIV_M){
    80003dcc:	0002e717          	auipc	a4,0x2e
    80003dd0:	6d072703          	lw	a4,1744(a4) # 8003249c <curr_priv>
    80003dd4:	4791                	li	a5,4
    80003dd6:	02f70763          	beq	a4,a5,80003e04 <m_and_hs_using_vs_access_3+0x9e>
        ERROR("trying to read as mprv from low privilege");
    80003dda:	00024517          	auipc	a0,0x24
    80003dde:	72e50513          	addi	a0,a0,1838 # 80028508 <__func__.0+0xaa8>
    80003de2:	715210ef          	jal	80025cf6 <printf>
    80003de6:	0fd00613          	li	a2,253
    80003dea:	00022597          	auipc	a1,0x22
    80003dee:	53658593          	addi	a1,a1,1334 # 80026320 <__func__.11>
    80003df2:	00024517          	auipc	a0,0x24
    80003df6:	0d650513          	addi	a0,a0,214 # 80027ec8 <__func__.0+0x468>
    80003dfa:	6fd210ef          	jal	80025cf6 <printf>
    80003dfe:	4501                	li	a0,0
    80003e00:	3b5210ef          	jal	800259b4 <exit>
    set_prev_priv(priv);
    80003e04:	4509                	li	a0,2
    80003e06:	d11fc0ef          	jal	80000b16 <set_prev_priv>
    asm volatile(
    80003e0a:	000807b7          	lui	a5,0x80
    80003e0e:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80003e10:	07b6                	slli	a5,a5,0xd
    80003e12:	00020737          	lui	a4,0x20
    80003e16:	30072073          	csrs	mstatus,a4
    80003e1a:	6394                	ld	a3,0(a5)
    80003e1c:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine mprv vs access to vu leads to exception",
    80003e20:	08200593          	li	a1,130
    80003e24:	00025617          	auipc	a2,0x25
    80003e28:	86460613          	addi	a2,a2,-1948 # 80028688 <__func__.0+0xc28>
    80003e2c:	00024517          	auipc	a0,0x24
    80003e30:	f2c50513          	addi	a0,a0,-212 # 80027d58 <__func__.0+0x2f8>
    80003e34:	6c3210ef          	jal	80025cf6 <printf>
    80003e38:	00045797          	auipc	a5,0x45
    80003e3c:	1d97c783          	lbu	a5,473(a5) # 80049011 <excpt+0x1>
    80003e40:	00024597          	auipc	a1,0x24
    80003e44:	ef058593          	addi	a1,a1,-272 # 80027d30 <__func__.0+0x2d0>
    80003e48:	cf89                	beqz	a5,80003e62 <m_and_hs_using_vs_access_3+0xfc>
    80003e4a:	6418                	ld	a4,8(s0)
    80003e4c:	47b5                	li	a5,13
    80003e4e:	00024597          	auipc	a1,0x24
    80003e52:	ed258593          	addi	a1,a1,-302 # 80027d20 <__func__.0+0x2c0>
    80003e56:	00f70663          	beq	a4,a5,80003e62 <m_and_hs_using_vs_access_3+0xfc>
    80003e5a:	00024597          	auipc	a1,0x24
    80003e5e:	ed658593          	addi	a1,a1,-298 # 80027d30 <__func__.0+0x2d0>
    80003e62:	00024517          	auipc	a0,0x24
    80003e66:	f0e50513          	addi	a0,a0,-242 # 80027d70 <__func__.0+0x310>
    80003e6a:	68d210ef          	jal	80025cf6 <printf>
    80003e6e:	00045797          	auipc	a5,0x45
    80003e72:	1a37c783          	lbu	a5,419(a5) # 80049011 <excpt+0x1>
    80003e76:	c789                	beqz	a5,80003e80 <m_and_hs_using_vs_access_3+0x11a>
    80003e78:	6418                	ld	a4,8(s0)
    80003e7a:	47b5                	li	a5,13
    80003e7c:	00f70c63          	beq	a4,a5,80003e94 <m_and_hs_using_vs_access_3+0x12e>
    80003e80:	00024517          	auipc	a0,0x24
    80003e84:	ef850513          	addi	a0,a0,-264 # 80027d78 <__func__.0+0x318>
    80003e88:	66f210ef          	jal	80025cf6 <printf>
    80003e8c:	02900513          	li	a0,41
    80003e90:	471200ef          	jal	80024b00 <putchar>
    80003e94:	4529                	li	a0,10
    80003e96:	46b200ef          	jal	80024b00 <putchar>
    80003e9a:	00045797          	auipc	a5,0x45
    80003e9e:	1777c783          	lbu	a5,375(a5) # 80049011 <excpt+0x1>
    80003ea2:	4901                	li	s2,0
    80003ea4:	c791                	beqz	a5,80003eb0 <m_and_hs_using_vs_access_3+0x14a>
    80003ea6:	00843903          	ld	s2,8(s0)
    80003eaa:	194d                	addi	s2,s2,-13
    80003eac:	00193913          	seqz	s2,s2
        excpt.triggered == true&& 
        excpt.cause == CAUSE_LPF 
    );

    TEST_SETUP_EXCEPT();
    80003eb0:	0330000f          	fence	rw,rw
    80003eb4:	4785                	li	a5,1
    80003eb6:	00045717          	auipc	a4,0x45
    80003eba:	18073923          	sd	zero,402(a4) # 80049048 <excpt+0x38>
    80003ebe:	00f41023          	sh	a5,0(s0)
    80003ec2:	0330000f          	fence	rw,rw
    80003ec6:	6098                	ld	a4,0(s1)
    80003ec8:	440197b7          	lui	a5,0x44019
    80003ecc:	0786                	slli	a5,a5,0x1
    80003ece:	e398                	sd	a4,0(a5)
    if(curr_priv != PRIV_M){
    80003ed0:	0002e717          	auipc	a4,0x2e
    80003ed4:	5cc72703          	lw	a4,1484(a4) # 8003249c <curr_priv>
    80003ed8:	4791                	li	a5,4
    80003eda:	f0f710e3          	bne	a4,a5,80003dda <m_and_hs_using_vs_access_3+0x74>
    set_prev_priv(priv);
    80003ede:	4501                	li	a0,0
    80003ee0:	c37fc0ef          	jal	80000b16 <set_prev_priv>
    asm volatile(
    80003ee4:	000807b7          	lui	a5,0x80
    80003ee8:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80003eea:	07b6                	slli	a5,a5,0xd
    80003eec:	00020737          	lui	a4,0x20
    80003ef0:	30072073          	csrs	mstatus,a4
    80003ef4:	6394                	ld	a3,0(a5)
    80003ef6:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VU, vaddr);
    TEST_ASSERT("machine mprv vu access to vu successful",
    80003efa:	08200593          	li	a1,130
    80003efe:	00024617          	auipc	a2,0x24
    80003f02:	7ba60613          	addi	a2,a2,1978 # 800286b8 <__func__.0+0xc58>
    80003f06:	00024517          	auipc	a0,0x24
    80003f0a:	e5250513          	addi	a0,a0,-430 # 80027d58 <__func__.0+0x2f8>
    80003f0e:	5e9210ef          	jal	80025cf6 <printf>
    80003f12:	00045797          	auipc	a5,0x45
    80003f16:	0ff7c783          	lbu	a5,255(a5) # 80049011 <excpt+0x1>
    80003f1a:	00024597          	auipc	a1,0x24
    80003f1e:	e1658593          	addi	a1,a1,-490 # 80027d30 <__func__.0+0x2d0>
    80003f22:	e789                	bnez	a5,80003f2c <m_and_hs_using_vs_access_3+0x1c6>
    80003f24:	00024597          	auipc	a1,0x24
    80003f28:	dfc58593          	addi	a1,a1,-516 # 80027d20 <__func__.0+0x2c0>
    80003f2c:	00024517          	auipc	a0,0x24
    80003f30:	e4450513          	addi	a0,a0,-444 # 80027d70 <__func__.0+0x310>
    80003f34:	5c3210ef          	jal	80025cf6 <printf>
    80003f38:	00045797          	auipc	a5,0x45
    80003f3c:	0d97c783          	lbu	a5,217(a5) # 80049011 <excpt+0x1>
    80003f40:	eba1                	bnez	a5,80003f90 <m_and_hs_using_vs_access_3+0x22a>
    80003f42:	4529                	li	a0,10
    80003f44:	3bd200ef          	jal	80024b00 <putchar>
    80003f48:	00090763          	beqz	s2,80003f56 <m_and_hs_using_vs_access_3+0x1f0>
    80003f4c:	00045797          	auipc	a5,0x45
    80003f50:	0c57c783          	lbu	a5,197(a5) # 80049011 <excpt+0x1>
    80003f54:	cb85                	beqz	a5,80003f84 <m_and_hs_using_vs_access_3+0x21e>
    80003f56:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80003f58:	00024597          	auipc	a1,0x24
    80003f5c:	dd858593          	addi	a1,a1,-552 # 80027d30 <__func__.0+0x2d0>
    80003f60:	00024517          	auipc	a0,0x24
    80003f64:	e7850513          	addi	a0,a0,-392 # 80027dd8 <__func__.0+0x378>
    80003f68:	58f210ef          	jal	80025cf6 <printf>
    80003f6c:	4511                	li	a0,4
    80003f6e:	c89fc0ef          	jal	80000bf6 <goto_priv>
    80003f72:	d3afd0ef          	jal	800014ac <reset_state>
}
    80003f76:	60e2                	ld	ra,24(sp)
    80003f78:	8522                	mv	a0,s0
    80003f7a:	6442                	ld	s0,16(sp)
    80003f7c:	64a2                	ld	s1,8(sp)
    80003f7e:	6902                	ld	s2,0(sp)
    80003f80:	6105                	addi	sp,sp,32
    80003f82:	8082                	ret
    TEST_ASSERT("machine mprv vu access to vu successful",
    80003f84:	4405                	li	s0,1
    TEST_END();
    80003f86:	00024597          	auipc	a1,0x24
    80003f8a:	d9a58593          	addi	a1,a1,-614 # 80027d20 <__func__.0+0x2c0>
    80003f8e:	bfc9                	j	80003f60 <m_and_hs_using_vs_access_3+0x1fa>
    TEST_ASSERT("machine mprv vu access to vu successful",
    80003f90:	00024517          	auipc	a0,0x24
    80003f94:	de850513          	addi	a0,a0,-536 # 80027d78 <__func__.0+0x318>
    80003f98:	55f210ef          	jal	80025cf6 <printf>
    80003f9c:	02900513          	li	a0,41
    80003fa0:	361200ef          	jal	80024b00 <putchar>
    80003fa4:	bf79                	j	80003f42 <m_and_hs_using_vs_access_3+0x1dc>

0000000080003fa6 <m_and_hs_using_vs_access_4>:

bool m_and_hs_using_vs_access_4(){
    80003fa6:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80003fa8:	00022597          	auipc	a1,0x22
    80003fac:	3c858593          	addi	a1,a1,968 # 80026370 <__func__.8>
    80003fb0:	00024517          	auipc	a0,0x24
    80003fb4:	d9050513          	addi	a0,a0,-624 # 80027d40 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_4(){
    80003fb8:	ec06                	sd	ra,24(sp)
    80003fba:	e822                	sd	s0,16(sp)
    80003fbc:	e426                	sd	s1,8(sp)
    80003fbe:	e04a                	sd	s2,0(sp)
    TEST_START();
    80003fc0:	537210ef          	jal	80025cf6 <printf>
    80003fc4:	4529                	li	a0,10
    80003fc6:	33b200ef          	jal	80024b00 <putchar>
    
    hspt_init();
    80003fca:	e16fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80003fce:	855fc0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80003fd2:	edefc0ef          	jal	800006b0 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    goto_priv(PRIV_HS);
    80003fd6:	450d                	li	a0,3
    80003fd8:	c1ffc0ef          	jal	80000bf6 <goto_priv>

    set_prev_priv(PRIV_VU);
    80003fdc:	4501                	li	a0,0
    80003fde:	b39fc0ef          	jal	80000b16 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    80003fe2:	0330000f          	fence	rw,rw
    80003fe6:	00045417          	auipc	s0,0x45
    80003fea:	02a40413          	addi	s0,s0,42 # 80049010 <excpt>
    80003fee:	4785                	li	a5,1
    80003ff0:	00045717          	auipc	a4,0x45
    80003ff4:	04073c23          	sd	zero,88(a4) # 80049048 <excpt+0x38>
    80003ff8:	00f41023          	sh	a5,0(s0)
    80003ffc:	0330000f          	fence	rw,rw
    80004000:	0002c497          	auipc	s1,0x2c
    80004004:	47848493          	addi	s1,s1,1144 # 80030478 <__func__.0+0x8a18>
    80004008:	6094                	ld	a3,0(s1)
    8000400a:	44019737          	lui	a4,0x44019
    asm volatile(
    8000400e:	000807b7          	lui	a5,0x80
    80004012:	0706                	slli	a4,a4,0x1
    80004014:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80004016:	e314                	sd	a3,0(a4)
    80004018:	07b6                	slli	a5,a5,0xd
    8000401a:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    8000401e:	08200593          	li	a1,130
    80004022:	00024617          	auipc	a2,0x24
    80004026:	6be60613          	addi	a2,a2,1726 # 800286e0 <__func__.0+0xc80>
    8000402a:	00024517          	auipc	a0,0x24
    8000402e:	d2e50513          	addi	a0,a0,-722 # 80027d58 <__func__.0+0x2f8>
    80004032:	4c5210ef          	jal	80025cf6 <printf>
    80004036:	00045797          	auipc	a5,0x45
    8000403a:	fdb7c783          	lbu	a5,-37(a5) # 80049011 <excpt+0x1>
    8000403e:	00024597          	auipc	a1,0x24
    80004042:	ce258593          	addi	a1,a1,-798 # 80027d20 <__func__.0+0x2c0>
    80004046:	c789                	beqz	a5,80004050 <m_and_hs_using_vs_access_4+0xaa>
    80004048:	00024597          	auipc	a1,0x24
    8000404c:	ce858593          	addi	a1,a1,-792 # 80027d30 <__func__.0+0x2d0>
    80004050:	00024517          	auipc	a0,0x24
    80004054:	d2050513          	addi	a0,a0,-736 # 80027d70 <__func__.0+0x310>
    80004058:	49f210ef          	jal	80025cf6 <printf>
    8000405c:	00045797          	auipc	a5,0x45
    80004060:	fb57c783          	lbu	a5,-75(a5) # 80049011 <excpt+0x1>
    80004064:	10079963          	bnez	a5,80004176 <m_and_hs_using_vs_access_4+0x1d0>
    80004068:	4529                	li	a0,10
    8000406a:	297200ef          	jal	80024b00 <putchar>
        excpt.triggered == false
    );

    set_prev_priv(PRIV_VS);
    8000406e:	4509                	li	a0,2
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    80004070:	00045917          	auipc	s2,0x45
    80004074:	fa194903          	lbu	s2,-95(s2) # 80049011 <excpt+0x1>
    set_prev_priv(PRIV_VS);
    80004078:	a9ffc0ef          	jal	80000b16 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    8000407c:	0330000f          	fence	rw,rw
    80004080:	4785                	li	a5,1
    80004082:	00045717          	auipc	a4,0x45
    80004086:	fc073323          	sd	zero,-58(a4) # 80049048 <excpt+0x38>
    8000408a:	00f41023          	sh	a5,0(s0)
    8000408e:	0330000f          	fence	rw,rw
    80004092:	6094                	ld	a3,0(s1)
    80004094:	44019737          	lui	a4,0x44019
    80004098:	000807b7          	lui	a5,0x80
    8000409c:	0706                	slli	a4,a4,0x1
    8000409e:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800040a0:	e314                	sd	a3,0(a4)
    800040a2:	07b6                	slli	a5,a5,0xd
    800040a4:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    800040a8:	08200593          	li	a1,130
    800040ac:	00024617          	auipc	a2,0x24
    800040b0:	66460613          	addi	a2,a2,1636 # 80028710 <__func__.0+0xcb0>
    800040b4:	00024517          	auipc	a0,0x24
    800040b8:	ca450513          	addi	a0,a0,-860 # 80027d58 <__func__.0+0x2f8>
    800040bc:	43b210ef          	jal	80025cf6 <printf>
    800040c0:	00045797          	auipc	a5,0x45
    800040c4:	f517c783          	lbu	a5,-175(a5) # 80049011 <excpt+0x1>
    800040c8:	00024597          	auipc	a1,0x24
    800040cc:	c6858593          	addi	a1,a1,-920 # 80027d30 <__func__.0+0x2d0>
    800040d0:	cf89                	beqz	a5,800040ea <m_and_hs_using_vs_access_4+0x144>
    800040d2:	6418                	ld	a4,8(s0)
    800040d4:	47b5                	li	a5,13
    800040d6:	00024597          	auipc	a1,0x24
    800040da:	c4a58593          	addi	a1,a1,-950 # 80027d20 <__func__.0+0x2c0>
    800040de:	00f70663          	beq	a4,a5,800040ea <m_and_hs_using_vs_access_4+0x144>
    800040e2:	00024597          	auipc	a1,0x24
    800040e6:	c4e58593          	addi	a1,a1,-946 # 80027d30 <__func__.0+0x2d0>
    800040ea:	00024517          	auipc	a0,0x24
    800040ee:	c8650513          	addi	a0,a0,-890 # 80027d70 <__func__.0+0x310>
    800040f2:	405210ef          	jal	80025cf6 <printf>
    800040f6:	00045797          	auipc	a5,0x45
    800040fa:	f1b7c783          	lbu	a5,-229(a5) # 80049011 <excpt+0x1>
    800040fe:	c789                	beqz	a5,80004108 <m_and_hs_using_vs_access_4+0x162>
    80004100:	6418                	ld	a4,8(s0)
    80004102:	47b5                	li	a5,13
    80004104:	00f70c63          	beq	a4,a5,8000411c <m_and_hs_using_vs_access_4+0x176>
    80004108:	00024517          	auipc	a0,0x24
    8000410c:	c7050513          	addi	a0,a0,-912 # 80027d78 <__func__.0+0x318>
    80004110:	3e7210ef          	jal	80025cf6 <printf>
    80004114:	02900513          	li	a0,41
    80004118:	1e9200ef          	jal	80024b00 <putchar>
    8000411c:	4529                	li	a0,10
    8000411e:	1e3200ef          	jal	80024b00 <putchar>
    80004122:	02091363          	bnez	s2,80004148 <m_and_hs_using_vs_access_4+0x1a2>
    80004126:	00045497          	auipc	s1,0x45
    8000412a:	eeb4c483          	lbu	s1,-277(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true&& 
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    8000412e:	00024597          	auipc	a1,0x24
    80004132:	c0258593          	addi	a1,a1,-1022 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    80004136:	cc91                	beqz	s1,80004152 <m_and_hs_using_vs_access_4+0x1ac>
    80004138:	6418                	ld	a4,8(s0)
    8000413a:	47b5                	li	a5,13
    TEST_END();
    8000413c:	00024597          	auipc	a1,0x24
    80004140:	be458593          	addi	a1,a1,-1052 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    80004144:	00f70763          	beq	a4,a5,80004152 <m_and_hs_using_vs_access_4+0x1ac>
    80004148:	4481                	li	s1,0
    TEST_END();
    8000414a:	00024597          	auipc	a1,0x24
    8000414e:	be658593          	addi	a1,a1,-1050 # 80027d30 <__func__.0+0x2d0>
    80004152:	00024517          	auipc	a0,0x24
    80004156:	c8650513          	addi	a0,a0,-890 # 80027dd8 <__func__.0+0x378>
    8000415a:	39d210ef          	jal	80025cf6 <printf>
    8000415e:	4511                	li	a0,4
    80004160:	a97fc0ef          	jal	80000bf6 <goto_priv>
    80004164:	b48fd0ef          	jal	800014ac <reset_state>
}
    80004168:	60e2                	ld	ra,24(sp)
    8000416a:	6442                	ld	s0,16(sp)
    8000416c:	6902                	ld	s2,0(sp)
    8000416e:	8526                	mv	a0,s1
    80004170:	64a2                	ld	s1,8(sp)
    80004172:	6105                	addi	sp,sp,32
    80004174:	8082                	ret
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    80004176:	00024517          	auipc	a0,0x24
    8000417a:	c0250513          	addi	a0,a0,-1022 # 80027d78 <__func__.0+0x318>
    8000417e:	379210ef          	jal	80025cf6 <printf>
    80004182:	02900513          	li	a0,41
    80004186:	17b200ef          	jal	80024b00 <putchar>
    8000418a:	bdf9                	j	80004068 <m_and_hs_using_vs_access_4+0xc2>

000000008000418c <m_and_hs_using_vs_access_5>:

bool m_and_hs_using_vs_access_5(){
    8000418c:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    8000418e:	00022597          	auipc	a1,0x22
    80004192:	20258593          	addi	a1,a1,514 # 80026390 <__func__.7>
    80004196:	00024517          	auipc	a0,0x24
    8000419a:	baa50513          	addi	a0,a0,-1110 # 80027d40 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_5(){
    8000419e:	ec06                	sd	ra,24(sp)
    800041a0:	e822                	sd	s0,16(sp)
    800041a2:	e426                	sd	s1,8(sp)
    TEST_START();
    800041a4:	353210ef          	jal	80025cf6 <printf>
    800041a8:	4529                	li	a0,10
    800041aa:	157200ef          	jal	80024b00 <putchar>
    
    hspt_init();
    800041ae:	c32fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    800041b2:	e70fc0ef          	jal	80000822 <hpt_init>
    vspt_init();
    800041b6:	cfafc0ef          	jal	800006b0 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);


    goto_priv(PRIV_M);
    800041ba:	4511                	li	a0,4
    800041bc:	a3bfc0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    800041c0:	000407b7          	lui	a5,0x40
    800041c4:	2007a073          	csrs	vsstatus,a5

    TEST_SETUP_EXCEPT();
    800041c8:	0330000f          	fence	rw,rw
    800041cc:	4785                	li	a5,1
    800041ce:	00045717          	auipc	a4,0x45
    800041d2:	e6073d23          	sd	zero,-390(a4) # 80049048 <excpt+0x38>
    800041d6:	00045717          	auipc	a4,0x45
    800041da:	e2f71d23          	sh	a5,-454(a4) # 80049010 <excpt>
    800041de:	0330000f          	fence	rw,rw
    800041e2:	0002c417          	auipc	s0,0x2c
    800041e6:	29643403          	ld	s0,662(s0) # 80030478 <__func__.0+0x8a18>
    800041ea:	440197b7          	lui	a5,0x44019
    if(curr_priv != PRIV_M){
    800041ee:	0002e717          	auipc	a4,0x2e
    800041f2:	2ae72703          	lw	a4,686(a4) # 8003249c <curr_priv>
    800041f6:	0786                	slli	a5,a5,0x1
    800041f8:	e380                	sd	s0,0(a5)
    800041fa:	4791                	li	a5,4
    800041fc:	02f70763          	beq	a4,a5,8000422a <m_and_hs_using_vs_access_5+0x9e>
        ERROR("trying to read as mprv from low privilege");
    80004200:	00024517          	auipc	a0,0x24
    80004204:	30850513          	addi	a0,a0,776 # 80028508 <__func__.0+0xaa8>
    80004208:	2ef210ef          	jal	80025cf6 <printf>
    8000420c:	0fd00613          	li	a2,253
    80004210:	00022597          	auipc	a1,0x22
    80004214:	11058593          	addi	a1,a1,272 # 80026320 <__func__.11>
    80004218:	00024517          	auipc	a0,0x24
    8000421c:	cb050513          	addi	a0,a0,-848 # 80027ec8 <__func__.0+0x468>
    80004220:	2d7210ef          	jal	80025cf6 <printf>
    80004224:	4501                	li	a0,0
    80004226:	78e210ef          	jal	800259b4 <exit>
    set_prev_priv(priv);
    8000422a:	4509                	li	a0,2
    8000422c:	8ebfc0ef          	jal	80000b16 <set_prev_priv>
    asm volatile(
    80004230:	000807b7          	lui	a5,0x80
    80004234:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80004236:	07b6                	slli	a5,a5,0xd
    80004238:	00020737          	lui	a4,0x20
    8000423c:	30072073          	csrs	mstatus,a4
    80004240:	6384                	ld	s1,0(a5)
    80004242:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine mprv access vs user page successful when vsstatus.sum set",
    80004246:	00024617          	auipc	a2,0x24
    8000424a:	50260613          	addi	a2,a2,1282 # 80028748 <__func__.0+0xce8>
    8000424e:	08200593          	li	a1,130
    80004252:	00024517          	auipc	a0,0x24
    80004256:	b0650513          	addi	a0,a0,-1274 # 80027d58 <__func__.0+0x2f8>
    8000425a:	29d210ef          	jal	80025cf6 <printf>
    8000425e:	00045797          	auipc	a5,0x45
    80004262:	db37c783          	lbu	a5,-589(a5) # 80049011 <excpt+0x1>
    80004266:	c3d1                	beqz	a5,800042ea <m_and_hs_using_vs_access_5+0x15e>
    80004268:	00024597          	auipc	a1,0x24
    8000426c:	ac858593          	addi	a1,a1,-1336 # 80027d30 <__func__.0+0x2d0>
    80004270:	00024517          	auipc	a0,0x24
    80004274:	b0050513          	addi	a0,a0,-1280 # 80027d70 <__func__.0+0x310>
    80004278:	27f210ef          	jal	80025cf6 <printf>
    8000427c:	00045797          	auipc	a5,0x45
    80004280:	d957c783          	lbu	a5,-619(a5) # 80049011 <excpt+0x1>
    80004284:	e399                	bnez	a5,8000428a <m_and_hs_using_vs_access_5+0xfe>
    80004286:	08848e63          	beq	s1,s0,80004322 <m_and_hs_using_vs_access_5+0x196>
    8000428a:	00024517          	auipc	a0,0x24
    8000428e:	aee50513          	addi	a0,a0,-1298 # 80027d78 <__func__.0+0x318>
    80004292:	265210ef          	jal	80025cf6 <printf>
    80004296:	02900513          	li	a0,41
    8000429a:	067200ef          	jal	80024b00 <putchar>
    8000429e:	4529                	li	a0,10
    800042a0:	061200ef          	jal	80024b00 <putchar>
    800042a4:	00045797          	auipc	a5,0x45
    800042a8:	d6d7c783          	lbu	a5,-659(a5) # 80049011 <excpt+0x1>
    800042ac:	eb89                	bnez	a5,800042be <m_and_hs_using_vs_access_5+0x132>
    800042ae:	011087b7          	lui	a5,0x1108
    800042b2:	ec178793          	addi	a5,a5,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    800042b6:	07c2                	slli	a5,a5,0x10
    800042b8:	17b9                	addi	a5,a5,-18
    800042ba:	06f48c63          	beq	s1,a5,80004332 <m_and_hs_using_vs_access_5+0x1a6>
    800042be:	4401                	li	s0,0
        excpt.triggered == false && val == 0x1107ec0ffee
    );
    TEST_END();
    800042c0:	00024597          	auipc	a1,0x24
    800042c4:	a7058593          	addi	a1,a1,-1424 # 80027d30 <__func__.0+0x2d0>
    800042c8:	00024517          	auipc	a0,0x24
    800042cc:	b1050513          	addi	a0,a0,-1264 # 80027dd8 <__func__.0+0x378>
    800042d0:	227210ef          	jal	80025cf6 <printf>
    800042d4:	4511                	li	a0,4
    800042d6:	921fc0ef          	jal	80000bf6 <goto_priv>
    800042da:	9d2fd0ef          	jal	800014ac <reset_state>
}
    800042de:	60e2                	ld	ra,24(sp)
    800042e0:	8522                	mv	a0,s0
    800042e2:	6442                	ld	s0,16(sp)
    800042e4:	64a2                	ld	s1,8(sp)
    800042e6:	6105                	addi	sp,sp,32
    800042e8:	8082                	ret
    TEST_ASSERT("machine mprv access vs user page successful when vsstatus.sum set",
    800042ea:	00848d63          	beq	s1,s0,80004304 <m_and_hs_using_vs_access_5+0x178>
    800042ee:	00024597          	auipc	a1,0x24
    800042f2:	a4258593          	addi	a1,a1,-1470 # 80027d30 <__func__.0+0x2d0>
    800042f6:	00024517          	auipc	a0,0x24
    800042fa:	a7a50513          	addi	a0,a0,-1414 # 80027d70 <__func__.0+0x310>
    800042fe:	1f9210ef          	jal	80025cf6 <printf>
    80004302:	b761                	j	8000428a <m_and_hs_using_vs_access_5+0xfe>
    80004304:	00024597          	auipc	a1,0x24
    80004308:	a1c58593          	addi	a1,a1,-1508 # 80027d20 <__func__.0+0x2c0>
    8000430c:	00024517          	auipc	a0,0x24
    80004310:	a6450513          	addi	a0,a0,-1436 # 80027d70 <__func__.0+0x310>
    80004314:	1e3210ef          	jal	80025cf6 <printf>
    80004318:	00045797          	auipc	a5,0x45
    8000431c:	cf97c783          	lbu	a5,-775(a5) # 80049011 <excpt+0x1>
    80004320:	f7ad                	bnez	a5,8000428a <m_and_hs_using_vs_access_5+0xfe>
    80004322:	4529                	li	a0,10
    80004324:	7dc200ef          	jal	80024b00 <putchar>
    80004328:	00045797          	auipc	a5,0x45
    8000432c:	ce97c783          	lbu	a5,-791(a5) # 80049011 <excpt+0x1>
    80004330:	f7d9                	bnez	a5,800042be <m_and_hs_using_vs_access_5+0x132>
    80004332:	4405                	li	s0,1
    TEST_END();
    80004334:	00024597          	auipc	a1,0x24
    80004338:	9ec58593          	addi	a1,a1,-1556 # 80027d20 <__func__.0+0x2c0>
    8000433c:	b771                	j	800042c8 <m_and_hs_using_vs_access_5+0x13c>

000000008000433e <m_and_hs_using_vs_access_6>:

bool m_and_hs_using_vs_access_6(){
    8000433e:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004340:	00022597          	auipc	a1,0x22
    80004344:	07058593          	addi	a1,a1,112 # 800263b0 <__func__.6>
    80004348:	00024517          	auipc	a0,0x24
    8000434c:	9f850513          	addi	a0,a0,-1544 # 80027d40 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_6(){
    80004350:	ec06                	sd	ra,24(sp)
    80004352:	e822                	sd	s0,16(sp)
    80004354:	e426                	sd	s1,8(sp)
    TEST_START();
    80004356:	1a1210ef          	jal	80025cf6 <printf>
    8000435a:	4529                	li	a0,10
    8000435c:	7a4200ef          	jal	80024b00 <putchar>
    
    hspt_init();
    80004360:	a80fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004364:	cbefc0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80004368:	b48fc0ef          	jal	800006b0 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    8000436c:	000407b7          	lui	a5,0x40
    80004370:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    80004374:	450d                	li	a0,3
    80004376:	881fc0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    8000437a:	4509                	li	a0,2
    8000437c:	f9afc0ef          	jal	80000b16 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    80004380:	0330000f          	fence	rw,rw
    80004384:	4785                	li	a5,1
    80004386:	00045717          	auipc	a4,0x45
    8000438a:	cc073123          	sd	zero,-830(a4) # 80049048 <excpt+0x38>
    8000438e:	00045717          	auipc	a4,0x45
    80004392:	c8f71123          	sh	a5,-894(a4) # 80049010 <excpt>
    80004396:	0330000f          	fence	rw,rw
    8000439a:	0002c497          	auipc	s1,0x2c
    8000439e:	0de4b483          	ld	s1,222(s1) # 80030478 <__func__.0+0x8a18>
    800043a2:	440197b7          	lui	a5,0x44019
    800043a6:	00080437          	lui	s0,0x80
    800043aa:	0786                	slli	a5,a5,0x1
    800043ac:	0465                	addi	s0,s0,25 # 80019 <_test_table_size+0x80018>
    800043ae:	e384                	sd	s1,0(a5)
    800043b0:	0436                	slli	s0,s0,0xd
    800043b2:	6c044473          	.insn	4, 0x6c044473
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    800043b6:	00024617          	auipc	a2,0x24
    800043ba:	3da60613          	addi	a2,a2,986 # 80028790 <__func__.0+0xd30>
    800043be:	08200593          	li	a1,130
    800043c2:	00024517          	auipc	a0,0x24
    800043c6:	99650513          	addi	a0,a0,-1642 # 80027d58 <__func__.0+0x2f8>
    800043ca:	12d210ef          	jal	80025cf6 <printf>
    800043ce:	00045797          	auipc	a5,0x45
    800043d2:	c437c783          	lbu	a5,-957(a5) # 80049011 <excpt+0x1>
    800043d6:	e7a5                	bnez	a5,8000443e <m_and_hs_using_vs_access_6+0x100>
    800043d8:	0c940863          	beq	s0,s1,800044a8 <m_and_hs_using_vs_access_6+0x16a>
    800043dc:	00024597          	auipc	a1,0x24
    800043e0:	95458593          	addi	a1,a1,-1708 # 80027d30 <__func__.0+0x2d0>
    800043e4:	00024517          	auipc	a0,0x24
    800043e8:	98c50513          	addi	a0,a0,-1652 # 80027d70 <__func__.0+0x310>
    800043ec:	10b210ef          	jal	80025cf6 <printf>
    800043f0:	00024517          	auipc	a0,0x24
    800043f4:	98850513          	addi	a0,a0,-1656 # 80027d78 <__func__.0+0x318>
    800043f8:	0ff210ef          	jal	80025cf6 <printf>
    800043fc:	02900513          	li	a0,41
    80004400:	700200ef          	jal	80024b00 <putchar>
    80004404:	4529                	li	a0,10
    80004406:	6fa200ef          	jal	80024b00 <putchar>
        excpt.triggered == false && val == 0x1107ec0ffee
    );
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    8000440a:	000407b7          	lui	a5,0x40
    8000440e:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    80004412:	4401                	li	s0,0

    TEST_END();
    80004414:	00024597          	auipc	a1,0x24
    80004418:	91c58593          	addi	a1,a1,-1764 # 80027d30 <__func__.0+0x2d0>
    8000441c:	00024517          	auipc	a0,0x24
    80004420:	9bc50513          	addi	a0,a0,-1604 # 80027dd8 <__func__.0+0x378>
    80004424:	0d3210ef          	jal	80025cf6 <printf>
    80004428:	4511                	li	a0,4
    8000442a:	fccfc0ef          	jal	80000bf6 <goto_priv>
    8000442e:	87efd0ef          	jal	800014ac <reset_state>
}
    80004432:	60e2                	ld	ra,24(sp)
    80004434:	8522                	mv	a0,s0
    80004436:	6442                	ld	s0,16(sp)
    80004438:	64a2                	ld	s1,8(sp)
    8000443a:	6105                	addi	sp,sp,32
    8000443c:	8082                	ret
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    8000443e:	00024597          	auipc	a1,0x24
    80004442:	8f258593          	addi	a1,a1,-1806 # 80027d30 <__func__.0+0x2d0>
    80004446:	00024517          	auipc	a0,0x24
    8000444a:	92a50513          	addi	a0,a0,-1750 # 80027d70 <__func__.0+0x310>
    8000444e:	0a9210ef          	jal	80025cf6 <printf>
    80004452:	00045797          	auipc	a5,0x45
    80004456:	bbf7c783          	lbu	a5,-1089(a5) # 80049011 <excpt+0x1>
    8000445a:	e399                	bnez	a5,80004460 <m_and_hs_using_vs_access_6+0x122>
    8000445c:	06940563          	beq	s0,s1,800044c6 <m_and_hs_using_vs_access_6+0x188>
    80004460:	00024517          	auipc	a0,0x24
    80004464:	91850513          	addi	a0,a0,-1768 # 80027d78 <__func__.0+0x318>
    80004468:	08f210ef          	jal	80025cf6 <printf>
    8000446c:	02900513          	li	a0,41
    80004470:	690200ef          	jal	80024b00 <putchar>
    80004474:	4529                	li	a0,10
    80004476:	68a200ef          	jal	80024b00 <putchar>
    8000447a:	00045797          	auipc	a5,0x45
    8000447e:	b977c783          	lbu	a5,-1129(a5) # 80049011 <excpt+0x1>
    80004482:	f7c1                	bnez	a5,8000440a <m_and_hs_using_vs_access_6+0xcc>
    80004484:	011087b7          	lui	a5,0x1108
    80004488:	ec178793          	addi	a5,a5,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    8000448c:	07c2                	slli	a5,a5,0x10
    8000448e:	17b9                	addi	a5,a5,-18
    80004490:	f6f41de3          	bne	s0,a5,8000440a <m_and_hs_using_vs_access_6+0xcc>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80004494:	000407b7          	lui	a5,0x40
    80004498:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    8000449c:	4405                	li	s0,1
    TEST_END();
    8000449e:	00024597          	auipc	a1,0x24
    800044a2:	88258593          	addi	a1,a1,-1918 # 80027d20 <__func__.0+0x2c0>
    800044a6:	bf9d                	j	8000441c <m_and_hs_using_vs_access_6+0xde>
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    800044a8:	00024597          	auipc	a1,0x24
    800044ac:	87858593          	addi	a1,a1,-1928 # 80027d20 <__func__.0+0x2c0>
    800044b0:	00024517          	auipc	a0,0x24
    800044b4:	8c050513          	addi	a0,a0,-1856 # 80027d70 <__func__.0+0x310>
    800044b8:	03f210ef          	jal	80025cf6 <printf>
    800044bc:	00045797          	auipc	a5,0x45
    800044c0:	b557c783          	lbu	a5,-1195(a5) # 80049011 <excpt+0x1>
    800044c4:	ffd1                	bnez	a5,80004460 <m_and_hs_using_vs_access_6+0x122>
    800044c6:	4529                	li	a0,10
    800044c8:	638200ef          	jal	80024b00 <putchar>
    800044cc:	00045797          	auipc	a5,0x45
    800044d0:	b457c783          	lbu	a5,-1211(a5) # 80049011 <excpt+0x1>
    800044d4:	fb9d                	bnez	a5,8000440a <m_and_hs_using_vs_access_6+0xcc>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800044d6:	000407b7          	lui	a5,0x40
    800044da:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    800044de:	4405                	li	s0,1
    TEST_END();
    800044e0:	00024597          	auipc	a1,0x24
    800044e4:	84058593          	addi	a1,a1,-1984 # 80027d20 <__func__.0+0x2c0>
    800044e8:	bf15                	j	8000441c <m_and_hs_using_vs_access_6+0xde>

00000000800044ea <m_and_hs_using_vs_access_7>:

bool m_and_hs_using_vs_access_7(){
    800044ea:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    800044ec:	00022597          	auipc	a1,0x22
    800044f0:	ee458593          	addi	a1,a1,-284 # 800263d0 <__func__.5>
    800044f4:	00024517          	auipc	a0,0x24
    800044f8:	84c50513          	addi	a0,a0,-1972 # 80027d40 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_7(){
    800044fc:	ec06                	sd	ra,24(sp)
    800044fe:	e822                	sd	s0,16(sp)
    80004500:	e426                	sd	s1,8(sp)
    TEST_START();
    80004502:	7f4210ef          	jal	80025cf6 <printf>
    80004506:	4529                	li	a0,10
    80004508:	5f8200ef          	jal	80024b00 <putchar>
    
    hspt_init();
    8000450c:	8d4fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004510:	b12fc0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80004514:	99cfc0ef          	jal	800006b0 <vspt_init>

    vaddr = vs_page_base(VSX_GUX);
    addr = phys_page_base(VSX_GUX);

    goto_priv(PRIV_HS);
    80004518:	450d                	li	a0,3
    8000451a:	edcfc0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    8000451e:	4509                	li	a0,2
    80004520:	df6fc0ef          	jal	80000b16 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    80004524:	0330000f          	fence	rw,rw
    80004528:	00045497          	auipc	s1,0x45
    8000452c:	ae848493          	addi	s1,s1,-1304 # 80049010 <excpt>
    80004530:	4785                	li	a5,1
    80004532:	00045717          	auipc	a4,0x45
    80004536:	b0073b23          	sd	zero,-1258(a4) # 80049048 <excpt+0x38>
    8000453a:	00f49023          	sh	a5,0(s1)
    8000453e:	0330000f          	fence	rw,rw
    80004542:	200037b7          	lui	a5,0x20003
    80004546:	078e                	slli	a5,a5,0x3
    80004548:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page leads to exception",
    8000454c:	08200593          	li	a1,130
    80004550:	00024617          	auipc	a2,0x24
    80004554:	27860613          	addi	a2,a2,632 # 800287c8 <__func__.0+0xd68>
    80004558:	00024517          	auipc	a0,0x24
    8000455c:	80050513          	addi	a0,a0,-2048 # 80027d58 <__func__.0+0x2f8>
    80004560:	796210ef          	jal	80025cf6 <printf>
    80004564:	00045797          	auipc	a5,0x45
    80004568:	aad7c783          	lbu	a5,-1363(a5) # 80049011 <excpt+0x1>
    8000456c:	00023597          	auipc	a1,0x23
    80004570:	7b458593          	addi	a1,a1,1972 # 80027d20 <__func__.0+0x2c0>
    80004574:	e789                	bnez	a5,8000457e <m_and_hs_using_vs_access_7+0x94>
    80004576:	00023597          	auipc	a1,0x23
    8000457a:	7ba58593          	addi	a1,a1,1978 # 80027d30 <__func__.0+0x2d0>
    8000457e:	00023517          	auipc	a0,0x23
    80004582:	7f250513          	addi	a0,a0,2034 # 80027d70 <__func__.0+0x310>
    80004586:	770210ef          	jal	80025cf6 <printf>
    8000458a:	00045797          	auipc	a5,0x45
    8000458e:	a877c783          	lbu	a5,-1401(a5) # 80049011 <excpt+0x1>
    80004592:	0e078863          	beqz	a5,80004682 <m_and_hs_using_vs_access_7+0x198>
    80004596:	4529                	li	a0,10
    80004598:	568200ef          	jal	80024b00 <putchar>
    8000459c:	00045417          	auipc	s0,0x45
    800045a0:	a7544403          	lbu	s0,-1419(s0) # 80049011 <excpt+0x1>
        excpt.triggered == true
    );
    TEST_SETUP_EXCEPT();
    800045a4:	0330000f          	fence	rw,rw
    800045a8:	4785                	li	a5,1
    800045aa:	00045717          	auipc	a4,0x45
    800045ae:	a8073f23          	sd	zero,-1378(a4) # 80049048 <excpt+0x38>
    800045b2:	00f49023          	sh	a5,0(s1)
    800045b6:	0330000f          	fence	rw,rw
    CSRS(sstatus, SSTATUS_MXR);
    800045ba:	000807b7          	lui	a5,0x80
    800045be:	1007a073          	csrs	sstatus,a5
    800045c2:	200037b7          	lui	a5,0x20003
    800045c6:	078e                	slli	a5,a5,0x3
    800045c8:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    800045cc:	08200593          	li	a1,130
    800045d0:	00024617          	auipc	a2,0x24
    800045d4:	22860613          	addi	a2,a2,552 # 800287f8 <__func__.0+0xd98>
    800045d8:	00023517          	auipc	a0,0x23
    800045dc:	78050513          	addi	a0,a0,1920 # 80027d58 <__func__.0+0x2f8>
    800045e0:	716210ef          	jal	80025cf6 <printf>
    800045e4:	00045797          	auipc	a5,0x45
    800045e8:	a2d7c783          	lbu	a5,-1491(a5) # 80049011 <excpt+0x1>
    800045ec:	00023597          	auipc	a1,0x23
    800045f0:	74458593          	addi	a1,a1,1860 # 80027d30 <__func__.0+0x2d0>
    800045f4:	e789                	bnez	a5,800045fe <m_and_hs_using_vs_access_7+0x114>
    800045f6:	00023597          	auipc	a1,0x23
    800045fa:	72a58593          	addi	a1,a1,1834 # 80027d20 <__func__.0+0x2c0>
    800045fe:	00023517          	auipc	a0,0x23
    80004602:	77250513          	addi	a0,a0,1906 # 80027d70 <__func__.0+0x310>
    80004606:	6f0210ef          	jal	80025cf6 <printf>
    8000460a:	00045797          	auipc	a5,0x45
    8000460e:	a077c783          	lbu	a5,-1529(a5) # 80049011 <excpt+0x1>
    80004612:	efa9                	bnez	a5,8000466c <m_and_hs_using_vs_access_7+0x182>
    80004614:	4529                	li	a0,10
    80004616:	4ea200ef          	jal	80024b00 <putchar>
    8000461a:	c411                	beqz	s0,80004626 <m_and_hs_using_vs_access_7+0x13c>
    8000461c:	00045797          	auipc	a5,0x45
    80004620:	9f57c783          	lbu	a5,-1547(a5) # 80049011 <excpt+0x1>
    80004624:	cb9d                	beqz	a5,8000465a <m_and_hs_using_vs_access_7+0x170>
        excpt.triggered == false
    );
    CSRC(sstatus, SSTATUS_MXR);
    80004626:	000807b7          	lui	a5,0x80
    8000462a:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    8000462e:	4401                	li	s0,0

        TEST_END();
    80004630:	00023597          	auipc	a1,0x23
    80004634:	70058593          	addi	a1,a1,1792 # 80027d30 <__func__.0+0x2d0>
    80004638:	00023517          	auipc	a0,0x23
    8000463c:	7a050513          	addi	a0,a0,1952 # 80027dd8 <__func__.0+0x378>
    80004640:	6b6210ef          	jal	80025cf6 <printf>
    80004644:	4511                	li	a0,4
    80004646:	db0fc0ef          	jal	80000bf6 <goto_priv>
    8000464a:	e63fc0ef          	jal	800014ac <reset_state>
}
    8000464e:	60e2                	ld	ra,24(sp)
    80004650:	8522                	mv	a0,s0
    80004652:	6442                	ld	s0,16(sp)
    80004654:	64a2                	ld	s1,8(sp)
    80004656:	6105                	addi	sp,sp,32
    80004658:	8082                	ret
    CSRC(sstatus, SSTATUS_MXR);
    8000465a:	000807b7          	lui	a5,0x80
    8000465e:	1007b073          	csrc	sstatus,a5
        TEST_END();
    80004662:	00023597          	auipc	a1,0x23
    80004666:	6be58593          	addi	a1,a1,1726 # 80027d20 <__func__.0+0x2c0>
    8000466a:	b7f9                	j	80004638 <m_and_hs_using_vs_access_7+0x14e>
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    8000466c:	00023517          	auipc	a0,0x23
    80004670:	70c50513          	addi	a0,a0,1804 # 80027d78 <__func__.0+0x318>
    80004674:	682210ef          	jal	80025cf6 <printf>
    80004678:	02900513          	li	a0,41
    8000467c:	484200ef          	jal	80024b00 <putchar>
    80004680:	bf51                	j	80004614 <m_and_hs_using_vs_access_7+0x12a>
    TEST_ASSERT("hs hlvd of xo vs page leads to exception",
    80004682:	00023517          	auipc	a0,0x23
    80004686:	6f650513          	addi	a0,a0,1782 # 80027d78 <__func__.0+0x318>
    8000468a:	66c210ef          	jal	80025cf6 <printf>
    8000468e:	02900513          	li	a0,41
    80004692:	46e200ef          	jal	80024b00 <putchar>
    80004696:	b701                	j	80004596 <m_and_hs_using_vs_access_7+0xac>

0000000080004698 <m_and_hs_using_vs_access_8>:

bool m_and_hs_using_vs_access_8(){
    80004698:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    8000469a:	00022597          	auipc	a1,0x22
    8000469e:	d5658593          	addi	a1,a1,-682 # 800263f0 <__func__.4>
    800046a2:	00023517          	auipc	a0,0x23
    800046a6:	69e50513          	addi	a0,a0,1694 # 80027d40 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_8(){
    800046aa:	ec06                	sd	ra,24(sp)
    800046ac:	e822                	sd	s0,16(sp)
    800046ae:	e426                	sd	s1,8(sp)
    TEST_START();
    800046b0:	646210ef          	jal	80025cf6 <printf>
    800046b4:	4529                	li	a0,10
    800046b6:	44a200ef          	jal	80024b00 <putchar>
    
    hspt_init();
    800046ba:	f27fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    800046be:	964fc0ef          	jal	80000822 <hpt_init>
    vspt_init();
    800046c2:	feffb0ef          	jal	800006b0 <vspt_init>

    vaddr = vs_page_base(VSX_GUR);
    addr = phys_page_base(VSX_GUR);
    goto_priv(PRIV_HS);
    800046c6:	450d                	li	a0,3
    800046c8:	d2efc0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    800046cc:	4509                	li	a0,2
    800046ce:	c48fc0ef          	jal	80000b16 <set_prev_priv>
    CSRW(sscratch, 0x1111111);
    800046d2:	011117b7          	lui	a5,0x1111
    800046d6:	1117879b          	addiw	a5,a5,273 # 1111111 <STACK_SIZE+0x1011111>
    800046da:	14079073          	csrw	sscratch,a5
    TEST_SETUP_EXCEPT();
    800046de:	0330000f          	fence	rw,rw
    800046e2:	00045417          	auipc	s0,0x45
    800046e6:	92e40413          	addi	s0,s0,-1746 # 80049010 <excpt>
    800046ea:	4785                	li	a5,1
    800046ec:	00045717          	auipc	a4,0x45
    800046f0:	94073e23          	sd	zero,-1700(a4) # 80049048 <excpt+0x38>
    800046f4:	00f41023          	sh	a5,0(s0)
    800046f8:	0330000f          	fence	rw,rw
    800046fc:	001007b7          	lui	a5,0x100
    80004700:	07dd                	addi	a5,a5,23 # 100017 <STACK_SIZE+0x17>
    80004702:	07b2                	slli	a5,a5,0xc
    80004704:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page leads to load page fault",
    80004708:	08200593          	li	a1,130
    8000470c:	00024617          	auipc	a2,0x24
    80004710:	11460613          	addi	a2,a2,276 # 80028820 <__func__.0+0xdc0>
    80004714:	00023517          	auipc	a0,0x23
    80004718:	64450513          	addi	a0,a0,1604 # 80027d58 <__func__.0+0x2f8>
    8000471c:	5da210ef          	jal	80025cf6 <printf>
    80004720:	00045797          	auipc	a5,0x45
    80004724:	8f17c783          	lbu	a5,-1807(a5) # 80049011 <excpt+0x1>
    80004728:	00023597          	auipc	a1,0x23
    8000472c:	60858593          	addi	a1,a1,1544 # 80027d30 <__func__.0+0x2d0>
    80004730:	cf89                	beqz	a5,8000474a <m_and_hs_using_vs_access_8+0xb2>
    80004732:	6418                	ld	a4,8(s0)
    80004734:	47b5                	li	a5,13
    80004736:	00023597          	auipc	a1,0x23
    8000473a:	5ea58593          	addi	a1,a1,1514 # 80027d20 <__func__.0+0x2c0>
    8000473e:	00f70663          	beq	a4,a5,8000474a <m_and_hs_using_vs_access_8+0xb2>
    80004742:	00023597          	auipc	a1,0x23
    80004746:	5ee58593          	addi	a1,a1,1518 # 80027d30 <__func__.0+0x2d0>
    8000474a:	00023517          	auipc	a0,0x23
    8000474e:	62650513          	addi	a0,a0,1574 # 80027d70 <__func__.0+0x310>
    80004752:	5a4210ef          	jal	80025cf6 <printf>
    80004756:	00045797          	auipc	a5,0x45
    8000475a:	8bb7c783          	lbu	a5,-1861(a5) # 80049011 <excpt+0x1>
    8000475e:	c789                	beqz	a5,80004768 <m_and_hs_using_vs_access_8+0xd0>
    80004760:	6418                	ld	a4,8(s0)
    80004762:	47b5                	li	a5,13
    80004764:	00f70c63          	beq	a4,a5,8000477c <m_and_hs_using_vs_access_8+0xe4>
    80004768:	00023517          	auipc	a0,0x23
    8000476c:	61050513          	addi	a0,a0,1552 # 80027d78 <__func__.0+0x318>
    80004770:	586210ef          	jal	80025cf6 <printf>
    80004774:	02900513          	li	a0,41
    80004778:	388200ef          	jal	80024b00 <putchar>
    8000477c:	4529                	li	a0,10
    8000477e:	382200ef          	jal	80024b00 <putchar>
    80004782:	00045797          	auipc	a5,0x45
    80004786:	88f7c783          	lbu	a5,-1905(a5) # 80049011 <excpt+0x1>
    8000478a:	4481                	li	s1,0
    8000478c:	c789                	beqz	a5,80004796 <m_and_hs_using_vs_access_8+0xfe>
    8000478e:	6404                	ld	s1,8(s0)
    80004790:	14cd                	addi	s1,s1,-13
    80004792:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    TEST_SETUP_EXCEPT();
    80004796:	0330000f          	fence	rw,rw
    8000479a:	4785                	li	a5,1
    8000479c:	00045717          	auipc	a4,0x45
    800047a0:	8a073623          	sd	zero,-1876(a4) # 80049048 <excpt+0x38>
    800047a4:	00f41023          	sh	a5,0(s0)
    800047a8:	0330000f          	fence	rw,rw
    CSRS(CSR_VSSTATUS, SSTATUS_MXR);
    800047ac:	000807b7          	lui	a5,0x80
    800047b0:	2007a073          	csrs	vsstatus,a5
    800047b4:	001007b7          	lui	a5,0x100
    800047b8:	07dd                	addi	a5,a5,23 # 100017 <STACK_SIZE+0x17>
    800047ba:	07b2                	slli	a5,a5,0xc
    800047bc:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    800047c0:	08200593          	li	a1,130
    800047c4:	00024617          	auipc	a2,0x24
    800047c8:	08c60613          	addi	a2,a2,140 # 80028850 <__func__.0+0xdf0>
    800047cc:	00023517          	auipc	a0,0x23
    800047d0:	58c50513          	addi	a0,a0,1420 # 80027d58 <__func__.0+0x2f8>
    800047d4:	522210ef          	jal	80025cf6 <printf>
    800047d8:	00045797          	auipc	a5,0x45
    800047dc:	8397c783          	lbu	a5,-1991(a5) # 80049011 <excpt+0x1>
    800047e0:	00023597          	auipc	a1,0x23
    800047e4:	55058593          	addi	a1,a1,1360 # 80027d30 <__func__.0+0x2d0>
    800047e8:	e789                	bnez	a5,800047f2 <m_and_hs_using_vs_access_8+0x15a>
    800047ea:	00023597          	auipc	a1,0x23
    800047ee:	53658593          	addi	a1,a1,1334 # 80027d20 <__func__.0+0x2c0>
    800047f2:	00023517          	auipc	a0,0x23
    800047f6:	57e50513          	addi	a0,a0,1406 # 80027d70 <__func__.0+0x310>
    800047fa:	4fc210ef          	jal	80025cf6 <printf>
    800047fe:	00045797          	auipc	a5,0x45
    80004802:	8137c783          	lbu	a5,-2029(a5) # 80049011 <excpt+0x1>
    80004806:	e7b1                	bnez	a5,80004852 <m_and_hs_using_vs_access_8+0x1ba>
    80004808:	4529                	li	a0,10
    8000480a:	2f6200ef          	jal	80024b00 <putchar>
    8000480e:	c491                	beqz	s1,8000481a <m_and_hs_using_vs_access_8+0x182>
    80004810:	00045797          	auipc	a5,0x45
    80004814:	8017c783          	lbu	a5,-2047(a5) # 80049011 <excpt+0x1>
    80004818:	c79d                	beqz	a5,80004846 <m_and_hs_using_vs_access_8+0x1ae>
    8000481a:	4401                	li	s0,0
        excpt.triggered == false
    );


    TEST_END();
    8000481c:	00023597          	auipc	a1,0x23
    80004820:	51458593          	addi	a1,a1,1300 # 80027d30 <__func__.0+0x2d0>
    80004824:	00023517          	auipc	a0,0x23
    80004828:	5b450513          	addi	a0,a0,1460 # 80027dd8 <__func__.0+0x378>
    8000482c:	4ca210ef          	jal	80025cf6 <printf>
    80004830:	4511                	li	a0,4
    80004832:	bc4fc0ef          	jal	80000bf6 <goto_priv>
    80004836:	c77fc0ef          	jal	800014ac <reset_state>
}
    8000483a:	60e2                	ld	ra,24(sp)
    8000483c:	8522                	mv	a0,s0
    8000483e:	6442                	ld	s0,16(sp)
    80004840:	64a2                	ld	s1,8(sp)
    80004842:	6105                	addi	sp,sp,32
    80004844:	8082                	ret
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    80004846:	4405                	li	s0,1
    TEST_END();
    80004848:	00023597          	auipc	a1,0x23
    8000484c:	4d858593          	addi	a1,a1,1240 # 80027d20 <__func__.0+0x2c0>
    80004850:	bfd1                	j	80004824 <m_and_hs_using_vs_access_8+0x18c>
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    80004852:	00023517          	auipc	a0,0x23
    80004856:	52650513          	addi	a0,a0,1318 # 80027d78 <__func__.0+0x318>
    8000485a:	49c210ef          	jal	80025cf6 <printf>
    8000485e:	02900513          	li	a0,41
    80004862:	29e200ef          	jal	80024b00 <putchar>
    80004866:	b74d                	j	80004808 <m_and_hs_using_vs_access_8+0x170>

0000000080004868 <m_and_hs_using_vs_access_9>:

bool m_and_hs_using_vs_access_9(){
    80004868:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    8000486a:	00022597          	auipc	a1,0x22
    8000486e:	ba658593          	addi	a1,a1,-1114 # 80026410 <__func__.3>
    80004872:	00023517          	auipc	a0,0x23
    80004876:	4ce50513          	addi	a0,a0,1230 # 80027d40 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_9(){
    8000487a:	ec06                	sd	ra,24(sp)
    8000487c:	e822                	sd	s0,16(sp)
    8000487e:	e426                	sd	s1,8(sp)
    TEST_START();
    80004880:	476210ef          	jal	80025cf6 <printf>
    80004884:	4529                	li	a0,10
    80004886:	27a200ef          	jal	80024b00 <putchar>
    
    hspt_init();
    8000488a:	d57fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    8000488e:	f95fb0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80004892:	e1ffb0ef          	jal	800006b0 <vspt_init>
    
    reset_state();
    80004896:	c17fc0ef          	jal	800014ac <reset_state>
    goto_priv(PRIV_HS);
    8000489a:	450d                	li	a0,3
    8000489c:	b5afc0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    800048a0:	4509                	li	a0,2
    800048a2:	a74fc0ef          	jal	80000b16 <set_prev_priv>
    hpt_init();
    800048a6:	f7dfb0ef          	jal	80000822 <hpt_init>
    
    vaddr = vs_page_base(VSI_GUR) ;
    TEST_SETUP_EXCEPT();
    800048aa:	0330000f          	fence	rw,rw
    800048ae:	00044417          	auipc	s0,0x44
    800048b2:	76240413          	addi	s0,s0,1890 # 80049010 <excpt>
    800048b6:	4785                	li	a5,1
    800048b8:	00044717          	auipc	a4,0x44
    800048bc:	78073823          	sd	zero,1936(a4) # 80049048 <excpt+0x38>
    800048c0:	00f41023          	sh	a5,0(s0)
    800048c4:	0330000f          	fence	rw,rw
    asm volatile(
    800048c8:	37ab77b7          	lui	a5,0x37ab7
    800048cc:	00100737          	lui	a4,0x100
    800048d0:	078a                	slli	a5,a5,0x2
    800048d2:	06970713          	addi	a4,a4,105 # 100069 <STACK_SIZE+0x69>
    800048d6:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800048da:	0732                	slli	a4,a4,0xc
    800048dc:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    800048e0:	640c                	ld	a1,8(s0)
    800048e2:	00024517          	auipc	a0,0x24
    800048e6:	fa650513          	addi	a0,a0,-90 # 80028888 <__func__.0+0xe28>
    800048ea:	40c210ef          	jal	80025cf6 <printf>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    800048ee:	08200593          	li	a1,130
    800048f2:	00024617          	auipc	a2,0x24
    800048f6:	f9e60613          	addi	a2,a2,-98 # 80028890 <__func__.0+0xe30>
    800048fa:	00023517          	auipc	a0,0x23
    800048fe:	45e50513          	addi	a0,a0,1118 # 80027d58 <__func__.0+0x2f8>
    80004902:	3f4210ef          	jal	80025cf6 <printf>
    80004906:	00044797          	auipc	a5,0x44
    8000490a:	70b7c783          	lbu	a5,1803(a5) # 80049011 <excpt+0x1>
    8000490e:	00023597          	auipc	a1,0x23
    80004912:	42258593          	addi	a1,a1,1058 # 80027d30 <__func__.0+0x2d0>
    80004916:	c789                	beqz	a5,80004920 <m_and_hs_using_vs_access_9+0xb8>
    80004918:	6418                	ld	a4,8(s0)
    8000491a:	47dd                	li	a5,23
    8000491c:	12f70d63          	beq	a4,a5,80004a56 <m_and_hs_using_vs_access_9+0x1ee>
    80004920:	00023517          	auipc	a0,0x23
    80004924:	45050513          	addi	a0,a0,1104 # 80027d70 <__func__.0+0x310>
    80004928:	3ce210ef          	jal	80025cf6 <printf>
    8000492c:	00044797          	auipc	a5,0x44
    80004930:	6e57c783          	lbu	a5,1765(a5) # 80049011 <excpt+0x1>
    80004934:	c789                	beqz	a5,8000493e <m_and_hs_using_vs_access_9+0xd6>
    80004936:	6418                	ld	a4,8(s0)
    80004938:	47dd                	li	a5,23
    8000493a:	0ef70b63          	beq	a4,a5,80004a30 <m_and_hs_using_vs_access_9+0x1c8>
    8000493e:	00023517          	auipc	a0,0x23
    80004942:	43a50513          	addi	a0,a0,1082 # 80027d78 <__func__.0+0x318>
    80004946:	3b0210ef          	jal	80025cf6 <printf>
    8000494a:	02900513          	li	a0,41
    8000494e:	1b2200ef          	jal	80024b00 <putchar>
    80004952:	4529                	li	a0,10
    80004954:	1ac200ef          	jal	80024b00 <putchar>
    80004958:	00044797          	auipc	a5,0x44
    8000495c:	6b97c783          	lbu	a5,1721(a5) # 80049011 <excpt+0x1>
    80004960:	4481                	li	s1,0
    80004962:	c789                	beqz	a5,8000496c <m_and_hs_using_vs_access_9+0x104>
    80004964:	6418                	ld	a4,8(s0)
    80004966:	47dd                	li	a5,23
    80004968:	10f70763          	beq	a4,a5,80004a76 <m_and_hs_using_vs_access_9+0x20e>
        excpt.cause == CAUSE_SGPF &&
        excpt.tval2 == vaddr >> 2
    );

    vaddr = vs_page_base(VSI_GUR);
    TEST_SETUP_EXCEPT();
    8000496c:	0330000f          	fence	rw,rw
    80004970:	4785                	li	a5,1
    80004972:	00044717          	auipc	a4,0x44
    80004976:	6c073b23          	sd	zero,1750(a4) # 80049048 <excpt+0x38>
    8000497a:	00f41023          	sh	a5,0(s0)
    8000497e:	0330000f          	fence	rw,rw
    asm volatile(
    80004982:	001007b7          	lui	a5,0x100
    80004986:	06978793          	addi	a5,a5,105 # 100069 <STACK_SIZE+0x69>
    8000498a:	07b2                	slli	a5,a5,0xc
    8000498c:	6007c7f3          	.insn	4, 0x6007c7f3
    val = hlvb(vaddr);
    printf("%d\n",excpt.cause);
    80004990:	640c                	ld	a1,8(s0)
    80004992:	00024517          	auipc	a0,0x24
    80004996:	ef650513          	addi	a0,a0,-266 # 80028888 <__func__.0+0xe28>
    8000499a:	35c210ef          	jal	80025cf6 <printf>
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    8000499e:	08200593          	li	a1,130
    800049a2:	00024617          	auipc	a2,0x24
    800049a6:	f2e60613          	addi	a2,a2,-210 # 800288d0 <__func__.0+0xe70>
    800049aa:	00023517          	auipc	a0,0x23
    800049ae:	3ae50513          	addi	a0,a0,942 # 80027d58 <__func__.0+0x2f8>
    800049b2:	344210ef          	jal	80025cf6 <printf>
    800049b6:	00044797          	auipc	a5,0x44
    800049ba:	65b7c783          	lbu	a5,1627(a5) # 80049011 <excpt+0x1>
    800049be:	00023597          	auipc	a1,0x23
    800049c2:	37258593          	addi	a1,a1,882 # 80027d30 <__func__.0+0x2d0>
    800049c6:	e789                	bnez	a5,800049d0 <m_and_hs_using_vs_access_9+0x168>
    800049c8:	00023597          	auipc	a1,0x23
    800049cc:	35858593          	addi	a1,a1,856 # 80027d20 <__func__.0+0x2c0>
    800049d0:	00023517          	auipc	a0,0x23
    800049d4:	3a050513          	addi	a0,a0,928 # 80027d70 <__func__.0+0x310>
    800049d8:	31e210ef          	jal	80025cf6 <printf>
    800049dc:	00044797          	auipc	a5,0x44
    800049e0:	6357c783          	lbu	a5,1589(a5) # 80049011 <excpt+0x1>
    800049e4:	efb1                	bnez	a5,80004a40 <m_and_hs_using_vs_access_9+0x1d8>
    800049e6:	4529                	li	a0,10
    800049e8:	118200ef          	jal	80024b00 <putchar>
    800049ec:	c491                	beqz	s1,800049f8 <m_and_hs_using_vs_access_9+0x190>
    800049ee:	00044797          	auipc	a5,0x44
    800049f2:	6237c783          	lbu	a5,1571(a5) # 80049011 <excpt+0x1>
    800049f6:	c79d                	beqz	a5,80004a24 <m_and_hs_using_vs_access_9+0x1bc>
    800049f8:	4401                	li	s0,0
        excpt.triggered == false
    );
    
    TEST_END();
    800049fa:	00023597          	auipc	a1,0x23
    800049fe:	33658593          	addi	a1,a1,822 # 80027d30 <__func__.0+0x2d0>
    80004a02:	00023517          	auipc	a0,0x23
    80004a06:	3d650513          	addi	a0,a0,982 # 80027dd8 <__func__.0+0x378>
    80004a0a:	2ec210ef          	jal	80025cf6 <printf>
    80004a0e:	4511                	li	a0,4
    80004a10:	9e6fc0ef          	jal	80000bf6 <goto_priv>
    80004a14:	a99fc0ef          	jal	800014ac <reset_state>
}
    80004a18:	60e2                	ld	ra,24(sp)
    80004a1a:	8522                	mv	a0,s0
    80004a1c:	6442                	ld	s0,16(sp)
    80004a1e:	64a2                	ld	s1,8(sp)
    80004a20:	6105                	addi	sp,sp,32
    80004a22:	8082                	ret
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    80004a24:	4405                	li	s0,1
    TEST_END();
    80004a26:	00023597          	auipc	a1,0x23
    80004a2a:	2fa58593          	addi	a1,a1,762 # 80027d20 <__func__.0+0x2c0>
    80004a2e:	bfd1                	j	80004a02 <m_and_hs_using_vs_access_9+0x19a>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    80004a30:	7418                	ld	a4,40(s0)
    80004a32:	4001a7b7          	lui	a5,0x4001a
    80004a36:	40078793          	addi	a5,a5,1024 # 4001a400 <STACK_SIZE+0x3ff1a400>
    80004a3a:	f0f712e3          	bne	a4,a5,8000493e <m_and_hs_using_vs_access_9+0xd6>
    80004a3e:	bf11                	j	80004952 <m_and_hs_using_vs_access_9+0xea>
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    80004a40:	00023517          	auipc	a0,0x23
    80004a44:	33850513          	addi	a0,a0,824 # 80027d78 <__func__.0+0x318>
    80004a48:	2ae210ef          	jal	80025cf6 <printf>
    80004a4c:	02900513          	li	a0,41
    80004a50:	0b0200ef          	jal	80024b00 <putchar>
    80004a54:	bf49                	j	800049e6 <m_and_hs_using_vs_access_9+0x17e>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    80004a56:	7418                	ld	a4,40(s0)
    80004a58:	4001a7b7          	lui	a5,0x4001a
    80004a5c:	40078793          	addi	a5,a5,1024 # 4001a400 <STACK_SIZE+0x3ff1a400>
    80004a60:	00023597          	auipc	a1,0x23
    80004a64:	2c058593          	addi	a1,a1,704 # 80027d20 <__func__.0+0x2c0>
    80004a68:	eaf70ce3          	beq	a4,a5,80004920 <m_and_hs_using_vs_access_9+0xb8>
    80004a6c:	00023597          	auipc	a1,0x23
    80004a70:	2c458593          	addi	a1,a1,708 # 80027d30 <__func__.0+0x2d0>
    80004a74:	b575                	j	80004920 <m_and_hs_using_vs_access_9+0xb8>
    80004a76:	7404                	ld	s1,40(s0)
    80004a78:	bffe67b7          	lui	a5,0xbffe6
    80004a7c:	c0078793          	addi	a5,a5,-1024 # ffffffffbffe5c00 <__stack_top+0xffffffff3fce6c00>
    80004a80:	94be                	add	s1,s1,a5
    80004a82:	0014b493          	seqz	s1,s1
    80004a86:	b5dd                	j	8000496c <m_and_hs_using_vs_access_9+0x104>

0000000080004a88 <m_and_hs_using_vs_access_10>:

bool m_and_hs_using_vs_access_10(){
    80004a88:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004a8a:	00022597          	auipc	a1,0x22
    80004a8e:	9a658593          	addi	a1,a1,-1626 # 80026430 <__func__.2>
    80004a92:	00023517          	auipc	a0,0x23
    80004a96:	2ae50513          	addi	a0,a0,686 # 80027d40 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_10(){
    80004a9a:	ec06                	sd	ra,24(sp)
    80004a9c:	e822                	sd	s0,16(sp)
    80004a9e:	e426                	sd	s1,8(sp)
    TEST_START();
    80004aa0:	256210ef          	jal	80025cf6 <printf>
    80004aa4:	4529                	li	a0,10
    80004aa6:	05a200ef          	jal	80024b00 <putchar>
    
    hspt_init();
    80004aaa:	b37fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004aae:	d75fb0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80004ab2:	bfffb0ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_HS);
    80004ab6:	450d                	li	a0,3
    80004ab8:	93efc0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004abc:	4509                	li	a0,2
    80004abe:	858fc0ef          	jal	80000b16 <set_prev_priv>

    vaddr = vs_page_base(VSR_GUR);
    TEST_SETUP_EXCEPT();
    80004ac2:	0330000f          	fence	rw,rw
    80004ac6:	00044417          	auipc	s0,0x44
    80004aca:	54a40413          	addi	s0,s0,1354 # 80049010 <excpt>
    80004ace:	4785                	li	a5,1
    80004ad0:	00044717          	auipc	a4,0x44
    80004ad4:	56073c23          	sd	zero,1400(a4) # 80049048 <excpt+0x38>
    80004ad8:	00f41023          	sh	a5,0(s0)
    80004adc:	0330000f          	fence	rw,rw
    CSRW(sscratch, 0x911);
    80004ae0:	6785                	lui	a5,0x1
    80004ae2:	9117879b          	addiw	a5,a5,-1775 # 911 <_test_table_size+0x910>
    80004ae6:	14079073          	csrw	sscratch,a5
    80004aea:	000807b7          	lui	a5,0x80
    80004aee:	07a5                	addi	a5,a5,9 # 80009 <_test_table_size+0x80008>
    80004af0:	07b6                	slli	a5,a5,0xd
    80004af2:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(vaddr);
    TEST_ASSERT("hs hlvb on ro both stage page successfull",
    80004af6:	08200593          	li	a1,130
    80004afa:	00024617          	auipc	a2,0x24
    80004afe:	dfe60613          	addi	a2,a2,-514 # 800288f8 <__func__.0+0xe98>
    80004b02:	00023517          	auipc	a0,0x23
    80004b06:	25650513          	addi	a0,a0,598 # 80027d58 <__func__.0+0x2f8>
    80004b0a:	1ec210ef          	jal	80025cf6 <printf>
    80004b0e:	00044797          	auipc	a5,0x44
    80004b12:	5037c783          	lbu	a5,1283(a5) # 80049011 <excpt+0x1>
    80004b16:	00023597          	auipc	a1,0x23
    80004b1a:	20a58593          	addi	a1,a1,522 # 80027d20 <__func__.0+0x2c0>
    80004b1e:	c789                	beqz	a5,80004b28 <m_and_hs_using_vs_access_10+0xa0>
    80004b20:	00023597          	auipc	a1,0x23
    80004b24:	21058593          	addi	a1,a1,528 # 80027d30 <__func__.0+0x2d0>
    80004b28:	00023517          	auipc	a0,0x23
    80004b2c:	24850513          	addi	a0,a0,584 # 80027d70 <__func__.0+0x310>
    80004b30:	1c6210ef          	jal	80025cf6 <printf>
    80004b34:	00044797          	auipc	a5,0x44
    80004b38:	4dd7c783          	lbu	a5,1245(a5) # 80049011 <excpt+0x1>
    80004b3c:	10079b63          	bnez	a5,80004c52 <m_and_hs_using_vs_access_10+0x1ca>
    80004b40:	4529                	li	a0,10
    80004b42:	7bf1f0ef          	jal	80024b00 <putchar>
    80004b46:	00044497          	auipc	s1,0x44
    80004b4a:	4cb4c483          	lbu	s1,1227(s1) # 80049011 <excpt+0x1>
        excpt.triggered == false
    );
    
    vspt_init();
    80004b4e:	b63fb0ef          	jal	800006b0 <vspt_init>
    vaddr = vs_page_base(VSR_GUR);
    TEST_SETUP_EXCEPT();
    80004b52:	0330000f          	fence	rw,rw
    80004b56:	4785                	li	a5,1
    80004b58:	00044717          	auipc	a4,0x44
    80004b5c:	4e073823          	sd	zero,1264(a4) # 80049048 <excpt+0x38>
    80004b60:	00f41023          	sh	a5,0(s0)
    80004b64:	0330000f          	fence	rw,rw
    CSRW(sscratch, 0x911);      
    80004b68:	6785                	lui	a5,0x1
    80004b6a:	9117879b          	addiw	a5,a5,-1775 # 911 <_test_table_size+0x910>
    80004b6e:	14079073          	csrw	sscratch,a5
    asm volatile(
    80004b72:	37ab77b7          	lui	a5,0x37ab7
    80004b76:	00080737          	lui	a4,0x80
    80004b7a:	078a                	slli	a5,a5,0x2
    80004b7c:	0725                	addi	a4,a4,9 # 80009 <_test_table_size+0x80008>
    80004b7e:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80004b82:	0736                	slli	a4,a4,0xd
    80004b84:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    80004b88:	08200593          	li	a1,130
    80004b8c:	00024617          	auipc	a2,0x24
    80004b90:	d9c60613          	addi	a2,a2,-612 # 80028928 <__func__.0+0xec8>
    80004b94:	00023517          	auipc	a0,0x23
    80004b98:	1c450513          	addi	a0,a0,452 # 80027d58 <__func__.0+0x2f8>
    80004b9c:	15a210ef          	jal	80025cf6 <printf>
    80004ba0:	00044797          	auipc	a5,0x44
    80004ba4:	4717c783          	lbu	a5,1137(a5) # 80049011 <excpt+0x1>
    80004ba8:	00023597          	auipc	a1,0x23
    80004bac:	18858593          	addi	a1,a1,392 # 80027d30 <__func__.0+0x2d0>
    80004bb0:	cf89                	beqz	a5,80004bca <m_and_hs_using_vs_access_10+0x142>
    80004bb2:	6418                	ld	a4,8(s0)
    80004bb4:	47bd                	li	a5,15
    80004bb6:	00023597          	auipc	a1,0x23
    80004bba:	16a58593          	addi	a1,a1,362 # 80027d20 <__func__.0+0x2c0>
    80004bbe:	00f70663          	beq	a4,a5,80004bca <m_and_hs_using_vs_access_10+0x142>
    80004bc2:	00023597          	auipc	a1,0x23
    80004bc6:	16e58593          	addi	a1,a1,366 # 80027d30 <__func__.0+0x2d0>
    80004bca:	00023517          	auipc	a0,0x23
    80004bce:	1a650513          	addi	a0,a0,422 # 80027d70 <__func__.0+0x310>
    80004bd2:	124210ef          	jal	80025cf6 <printf>
    80004bd6:	00044797          	auipc	a5,0x44
    80004bda:	43b7c783          	lbu	a5,1083(a5) # 80049011 <excpt+0x1>
    80004bde:	c789                	beqz	a5,80004be8 <m_and_hs_using_vs_access_10+0x160>
    80004be0:	6418                	ld	a4,8(s0)
    80004be2:	47bd                	li	a5,15
    80004be4:	00f70c63          	beq	a4,a5,80004bfc <m_and_hs_using_vs_access_10+0x174>
    80004be8:	00023517          	auipc	a0,0x23
    80004bec:	19050513          	addi	a0,a0,400 # 80027d78 <__func__.0+0x318>
    80004bf0:	106210ef          	jal	80025cf6 <printf>
    80004bf4:	02900513          	li	a0,41
    80004bf8:	7091f0ef          	jal	80024b00 <putchar>
    80004bfc:	4529                	li	a0,10
    80004bfe:	7031f0ef          	jal	80024b00 <putchar>
    80004c02:	e095                	bnez	s1,80004c26 <m_and_hs_using_vs_access_10+0x19e>
    80004c04:	00044497          	auipc	s1,0x44
    80004c08:	40d4c483          	lbu	s1,1037(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80004c0c:	00023597          	auipc	a1,0x23
    80004c10:	12458593          	addi	a1,a1,292 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    80004c14:	cc91                	beqz	s1,80004c30 <m_and_hs_using_vs_access_10+0x1a8>
    80004c16:	6418                	ld	a4,8(s0)
    80004c18:	47bd                	li	a5,15
    TEST_END();
    80004c1a:	00023597          	auipc	a1,0x23
    80004c1e:	10658593          	addi	a1,a1,262 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    80004c22:	00f70763          	beq	a4,a5,80004c30 <m_and_hs_using_vs_access_10+0x1a8>
    80004c26:	4481                	li	s1,0
    TEST_END();
    80004c28:	00023597          	auipc	a1,0x23
    80004c2c:	10858593          	addi	a1,a1,264 # 80027d30 <__func__.0+0x2d0>
    80004c30:	00023517          	auipc	a0,0x23
    80004c34:	1a850513          	addi	a0,a0,424 # 80027dd8 <__func__.0+0x378>
    80004c38:	0be210ef          	jal	80025cf6 <printf>
    80004c3c:	4511                	li	a0,4
    80004c3e:	fb9fb0ef          	jal	80000bf6 <goto_priv>
    80004c42:	86bfc0ef          	jal	800014ac <reset_state>
}
    80004c46:	60e2                	ld	ra,24(sp)
    80004c48:	6442                	ld	s0,16(sp)
    80004c4a:	8526                	mv	a0,s1
    80004c4c:	64a2                	ld	s1,8(sp)
    80004c4e:	6105                	addi	sp,sp,32
    80004c50:	8082                	ret
    TEST_ASSERT("hs hlvb on ro both stage page successfull",
    80004c52:	00023517          	auipc	a0,0x23
    80004c56:	12650513          	addi	a0,a0,294 # 80027d78 <__func__.0+0x318>
    80004c5a:	09c210ef          	jal	80025cf6 <printf>
    80004c5e:	02900513          	li	a0,41
    80004c62:	69f1f0ef          	jal	80024b00 <putchar>
    80004c66:	bde9                	j	80004b40 <m_and_hs_using_vs_access_10+0xb8>

0000000080004c68 <m_and_hs_using_vs_access_11>:

bool m_and_hs_using_vs_access_11(){
    80004c68:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004c6a:	00021597          	auipc	a1,0x21
    80004c6e:	7e658593          	addi	a1,a1,2022 # 80026450 <__func__.1>
    80004c72:	00023517          	auipc	a0,0x23
    80004c76:	0ce50513          	addi	a0,a0,206 # 80027d40 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_11(){
    80004c7a:	ec06                	sd	ra,24(sp)
    80004c7c:	e822                	sd	s0,16(sp)
    80004c7e:	e426                	sd	s1,8(sp)
    TEST_START();
    80004c80:	076210ef          	jal	80025cf6 <printf>
    80004c84:	4529                	li	a0,10
    80004c86:	67b1f0ef          	jal	80024b00 <putchar>
    
    hspt_init();
    80004c8a:	957fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004c8e:	b95fb0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80004c92:	a1ffb0ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_HS);
    80004c96:	450d                	li	a0,3
    80004c98:	f5ffb0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004c9c:	4509                	li	a0,2
    80004c9e:	e79fb0ef          	jal	80000b16 <set_prev_priv>


    vaddr = vs_page_base(VSRW_GI);
    TEST_SETUP_EXCEPT();
    80004ca2:	0330000f          	fence	rw,rw
    80004ca6:	00044417          	auipc	s0,0x44
    80004caa:	36a40413          	addi	s0,s0,874 # 80049010 <excpt>
    80004cae:	4785                	li	a5,1
    80004cb0:	00044717          	auipc	a4,0x44
    80004cb4:	38073c23          	sd	zero,920(a4) # 80049048 <excpt+0x38>
    80004cb8:	00f41023          	sh	a5,0(s0)
    80004cbc:	0330000f          	fence	rw,rw
    CSRW(sscratch, 0x112);
    80004cc0:	11200793          	li	a5,274
    80004cc4:	14079073          	csrw	sscratch,a5
    80004cc8:	37ab77b7          	lui	a5,0x37ab7
    80004ccc:	00080737          	lui	a4,0x80
    80004cd0:	078a                	slli	a5,a5,0x2
    80004cd2:	03370713          	addi	a4,a4,51 # 80033 <_test_table_size+0x80032>
    80004cd6:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80004cda:	0736                	slli	a4,a4,0xd
    80004cdc:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    80004ce0:	08200593          	li	a1,130
    80004ce4:	00024617          	auipc	a2,0x24
    80004ce8:	c7c60613          	addi	a2,a2,-900 # 80028960 <__func__.0+0xf00>
    80004cec:	00023517          	auipc	a0,0x23
    80004cf0:	06c50513          	addi	a0,a0,108 # 80027d58 <__func__.0+0x2f8>
    80004cf4:	002210ef          	jal	80025cf6 <printf>
    80004cf8:	00044797          	auipc	a5,0x44
    80004cfc:	3197c783          	lbu	a5,793(a5) # 80049011 <excpt+0x1>
    80004d00:	00023597          	auipc	a1,0x23
    80004d04:	03058593          	addi	a1,a1,48 # 80027d30 <__func__.0+0x2d0>
    80004d08:	cf89                	beqz	a5,80004d22 <m_and_hs_using_vs_access_11+0xba>
    80004d0a:	6418                	ld	a4,8(s0)
    80004d0c:	47dd                	li	a5,23
    80004d0e:	00023597          	auipc	a1,0x23
    80004d12:	01258593          	addi	a1,a1,18 # 80027d20 <__func__.0+0x2c0>
    80004d16:	00f70663          	beq	a4,a5,80004d22 <m_and_hs_using_vs_access_11+0xba>
    80004d1a:	00023597          	auipc	a1,0x23
    80004d1e:	01658593          	addi	a1,a1,22 # 80027d30 <__func__.0+0x2d0>
    80004d22:	00023517          	auipc	a0,0x23
    80004d26:	04e50513          	addi	a0,a0,78 # 80027d70 <__func__.0+0x310>
    80004d2a:	7cd200ef          	jal	80025cf6 <printf>
    80004d2e:	00044797          	auipc	a5,0x44
    80004d32:	2e37c783          	lbu	a5,739(a5) # 80049011 <excpt+0x1>
    80004d36:	c789                	beqz	a5,80004d40 <m_and_hs_using_vs_access_11+0xd8>
    80004d38:	6418                	ld	a4,8(s0)
    80004d3a:	47dd                	li	a5,23
    80004d3c:	00f70c63          	beq	a4,a5,80004d54 <m_and_hs_using_vs_access_11+0xec>
    80004d40:	00023517          	auipc	a0,0x23
    80004d44:	03850513          	addi	a0,a0,56 # 80027d78 <__func__.0+0x318>
    80004d48:	7af200ef          	jal	80025cf6 <printf>
    80004d4c:	02900513          	li	a0,41
    80004d50:	5b11f0ef          	jal	80024b00 <putchar>
    80004d54:	4529                	li	a0,10
    80004d56:	5ab1f0ef          	jal	80024b00 <putchar>
    80004d5a:	00044497          	auipc	s1,0x44
    80004d5e:	2b74c483          	lbu	s1,695(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80004d62:	00023597          	auipc	a1,0x23
    80004d66:	fce58593          	addi	a1,a1,-50 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    80004d6a:	cc91                	beqz	s1,80004d86 <m_and_hs_using_vs_access_11+0x11e>
    80004d6c:	6418                	ld	a4,8(s0)
    80004d6e:	47dd                	li	a5,23
    TEST_END();
    80004d70:	00023597          	auipc	a1,0x23
    80004d74:	fb058593          	addi	a1,a1,-80 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    80004d78:	00f70763          	beq	a4,a5,80004d86 <m_and_hs_using_vs_access_11+0x11e>
    80004d7c:	4481                	li	s1,0
    TEST_END();
    80004d7e:	00023597          	auipc	a1,0x23
    80004d82:	fb258593          	addi	a1,a1,-78 # 80027d30 <__func__.0+0x2d0>
    80004d86:	00023517          	auipc	a0,0x23
    80004d8a:	05250513          	addi	a0,a0,82 # 80027dd8 <__func__.0+0x378>
    80004d8e:	769200ef          	jal	80025cf6 <printf>
    80004d92:	4511                	li	a0,4
    80004d94:	e63fb0ef          	jal	80000bf6 <goto_priv>
    80004d98:	f14fc0ef          	jal	800014ac <reset_state>
}
    80004d9c:	60e2                	ld	ra,24(sp)
    80004d9e:	6442                	ld	s0,16(sp)
    80004da0:	8526                	mv	a0,s1
    80004da2:	64a2                	ld	s1,8(sp)
    80004da4:	6105                	addi	sp,sp,32
    80004da6:	8082                	ret

0000000080004da8 <m_and_hs_using_vs_access_12>:

bool m_and_hs_using_vs_access_12(){
    80004da8:	1141                	addi	sp,sp,-16

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004daa:	00021597          	auipc	a1,0x21
    80004dae:	6c658593          	addi	a1,a1,1734 # 80026470 <__func__.0>
    80004db2:	00023517          	auipc	a0,0x23
    80004db6:	f8e50513          	addi	a0,a0,-114 # 80027d40 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_12(){
    80004dba:	e406                	sd	ra,8(sp)
    80004dbc:	e022                	sd	s0,0(sp)
    TEST_START();
    80004dbe:	739200ef          	jal	80025cf6 <printf>
    80004dc2:	4529                	li	a0,10
    80004dc4:	53d1f0ef          	jal	80024b00 <putchar>
    
    hspt_init();
    80004dc8:	819fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004dcc:	a57fb0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80004dd0:	8e1fb0ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_HS);
    80004dd4:	450d                	li	a0,3
    80004dd6:	e21fb0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004dda:	4509                	li	a0,2
    80004ddc:	d3bfb0ef          	jal	80000b16 <set_prev_priv>

    vaddr = vs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    80004de0:	0330000f          	fence	rw,rw
    80004de4:	4785                	li	a5,1
    80004de6:	00044717          	auipc	a4,0x44
    80004dea:	26073123          	sd	zero,610(a4) # 80049048 <excpt+0x38>
    80004dee:	00044717          	auipc	a4,0x44
    80004df2:	22f71123          	sh	a5,546(a4) # 80049010 <excpt>
    80004df6:	0330000f          	fence	rw,rw
    CSRW(sscratch, 0x112);
    80004dfa:	11200793          	li	a5,274
    80004dfe:	14079073          	csrw	sscratch,a5
    TEST_ASSERT("CSRW successfull int any condition",
    80004e02:	08200593          	li	a1,130
    80004e06:	00024617          	auipc	a2,0x24
    80004e0a:	b9a60613          	addi	a2,a2,-1126 # 800289a0 <__func__.0+0xf40>
    80004e0e:	00023517          	auipc	a0,0x23
    80004e12:	f4a50513          	addi	a0,a0,-182 # 80027d58 <__func__.0+0x2f8>
    80004e16:	6e1200ef          	jal	80025cf6 <printf>
    80004e1a:	00044797          	auipc	a5,0x44
    80004e1e:	1f77c783          	lbu	a5,503(a5) # 80049011 <excpt+0x1>
    80004e22:	00023597          	auipc	a1,0x23
    80004e26:	efe58593          	addi	a1,a1,-258 # 80027d20 <__func__.0+0x2c0>
    80004e2a:	c789                	beqz	a5,80004e34 <m_and_hs_using_vs_access_12+0x8c>
    80004e2c:	00023597          	auipc	a1,0x23
    80004e30:	f0458593          	addi	a1,a1,-252 # 80027d30 <__func__.0+0x2d0>
    80004e34:	00023517          	auipc	a0,0x23
    80004e38:	f3c50513          	addi	a0,a0,-196 # 80027d70 <__func__.0+0x310>
    80004e3c:	6bb200ef          	jal	80025cf6 <printf>
    80004e40:	00044797          	auipc	a5,0x44
    80004e44:	1d17c783          	lbu	a5,465(a5) # 80049011 <excpt+0x1>
    80004e48:	e7a1                	bnez	a5,80004e90 <m_and_hs_using_vs_access_12+0xe8>
    80004e4a:	4529                	li	a0,10
    80004e4c:	4b51f0ef          	jal	80024b00 <putchar>
    80004e50:	00044797          	auipc	a5,0x44
    80004e54:	1c17c783          	lbu	a5,449(a5) # 80049011 <excpt+0x1>
    80004e58:	e795                	bnez	a5,80004e84 <m_and_hs_using_vs_access_12+0xdc>
    80004e5a:	4405                	li	s0,1
        excpt.triggered == false
    );
    


    TEST_END();
    80004e5c:	00023597          	auipc	a1,0x23
    80004e60:	ec458593          	addi	a1,a1,-316 # 80027d20 <__func__.0+0x2c0>
    80004e64:	00023517          	auipc	a0,0x23
    80004e68:	f7450513          	addi	a0,a0,-140 # 80027dd8 <__func__.0+0x378>
    80004e6c:	68b200ef          	jal	80025cf6 <printf>
    80004e70:	4511                	li	a0,4
    80004e72:	d85fb0ef          	jal	80000bf6 <goto_priv>
    80004e76:	e36fc0ef          	jal	800014ac <reset_state>

}
    80004e7a:	60a2                	ld	ra,8(sp)
    80004e7c:	8522                	mv	a0,s0
    80004e7e:	6402                	ld	s0,0(sp)
    80004e80:	0141                	addi	sp,sp,16
    80004e82:	8082                	ret
    TEST_ASSERT("CSRW successfull int any condition",
    80004e84:	4401                	li	s0,0
    TEST_END();
    80004e86:	00023597          	auipc	a1,0x23
    80004e8a:	eaa58593          	addi	a1,a1,-342 # 80027d30 <__func__.0+0x2d0>
    80004e8e:	bfd9                	j	80004e64 <m_and_hs_using_vs_access_12+0xbc>
    TEST_ASSERT("CSRW successfull int any condition",
    80004e90:	00023517          	auipc	a0,0x23
    80004e94:	ee850513          	addi	a0,a0,-280 # 80027d78 <__func__.0+0x318>
    80004e98:	65f200ef          	jal	80025cf6 <printf>
    80004e9c:	02900513          	li	a0,41
    80004ea0:	4611f0ef          	jal	80024b00 <putchar>
    80004ea4:	b75d                	j	80004e4a <m_and_hs_using_vs_access_12+0xa2>

0000000080004ea6 <virtual_instruction_1>:
#include <rvh_test.h>
#include <page_tables.h> 


bool virtual_instruction_1() {
    80004ea6:	1101                	addi	sp,sp,-32

    TEST_START();
    80004ea8:	00021597          	auipc	a1,0x21
    80004eac:	5e858593          	addi	a1,a1,1512 # 80026490 <__func__.11>
    80004eb0:	00023517          	auipc	a0,0x23
    80004eb4:	e9050513          	addi	a0,a0,-368 # 80027d40 <__func__.0+0x2e0>
bool virtual_instruction_1() {
    80004eb8:	ec06                	sd	ra,24(sp)
    80004eba:	e822                	sd	s0,16(sp)
    80004ebc:	e426                	sd	s1,8(sp)
    TEST_START();
    80004ebe:	639200ef          	jal	80025cf6 <printf>
    80004ec2:	4529                	li	a0,10
    80004ec4:	43d1f0ef          	jal	80024b00 <putchar>


    goto_priv(PRIV_VS);
    80004ec8:	4509                	li	a0,2
    80004eca:	d2dfb0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80004ece:	0330000f          	fence	rw,rw
    80004ed2:	00044417          	auipc	s0,0x44
    80004ed6:	13e40413          	addi	s0,s0,318 # 80049010 <excpt>
    80004eda:	4785                	li	a5,1
    80004edc:	00044717          	auipc	a4,0x44
    80004ee0:	16073623          	sd	zero,364(a4) # 80049048 <excpt+0x38>
    80004ee4:	00f41023          	sh	a5,0(s0)
    80004ee8:	0330000f          	fence	rw,rw
    asm volatile(
    80004eec:	22000073          	.insn	4, 0x22000073
    hfence_vvma();
    TEST_ASSERT("vs executing hfence.vvma leads to virtual instruction exception",
    80004ef0:	08200593          	li	a1,130
    80004ef4:	00024617          	auipc	a2,0x24
    80004ef8:	ad460613          	addi	a2,a2,-1324 # 800289c8 <__func__.0+0xf68>
    80004efc:	00023517          	auipc	a0,0x23
    80004f00:	e5c50513          	addi	a0,a0,-420 # 80027d58 <__func__.0+0x2f8>
    80004f04:	5f3200ef          	jal	80025cf6 <printf>
    80004f08:	00044797          	auipc	a5,0x44
    80004f0c:	1097c783          	lbu	a5,265(a5) # 80049011 <excpt+0x1>
    80004f10:	00023597          	auipc	a1,0x23
    80004f14:	e2058593          	addi	a1,a1,-480 # 80027d30 <__func__.0+0x2d0>
    80004f18:	cf89                	beqz	a5,80004f32 <virtual_instruction_1+0x8c>
    80004f1a:	6418                	ld	a4,8(s0)
    80004f1c:	47d9                	li	a5,22
    80004f1e:	00023597          	auipc	a1,0x23
    80004f22:	e0258593          	addi	a1,a1,-510 # 80027d20 <__func__.0+0x2c0>
    80004f26:	00f70663          	beq	a4,a5,80004f32 <virtual_instruction_1+0x8c>
    80004f2a:	00023597          	auipc	a1,0x23
    80004f2e:	e0658593          	addi	a1,a1,-506 # 80027d30 <__func__.0+0x2d0>
    80004f32:	00023517          	auipc	a0,0x23
    80004f36:	e3e50513          	addi	a0,a0,-450 # 80027d70 <__func__.0+0x310>
    80004f3a:	5bd200ef          	jal	80025cf6 <printf>
    80004f3e:	00044797          	auipc	a5,0x44
    80004f42:	0d37c783          	lbu	a5,211(a5) # 80049011 <excpt+0x1>
    80004f46:	c789                	beqz	a5,80004f50 <virtual_instruction_1+0xaa>
    80004f48:	6418                	ld	a4,8(s0)
    80004f4a:	47d9                	li	a5,22
    80004f4c:	00f70c63          	beq	a4,a5,80004f64 <virtual_instruction_1+0xbe>
    80004f50:	00023517          	auipc	a0,0x23
    80004f54:	e2850513          	addi	a0,a0,-472 # 80027d78 <__func__.0+0x318>
    80004f58:	59f200ef          	jal	80025cf6 <printf>
    80004f5c:	02900513          	li	a0,41
    80004f60:	3a11f0ef          	jal	80024b00 <putchar>
    80004f64:	4529                	li	a0,10
    80004f66:	39b1f0ef          	jal	80024b00 <putchar>
    80004f6a:	00044797          	auipc	a5,0x44
    80004f6e:	0a77c783          	lbu	a5,167(a5) # 80049011 <excpt+0x1>
    80004f72:	4481                	li	s1,0
    80004f74:	c789                	beqz	a5,80004f7e <virtual_instruction_1+0xd8>
    80004f76:	6404                	ld	s1,8(s0)
    80004f78:	14a9                	addi	s1,s1,-22
    80004f7a:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    
    goto_priv(PRIV_VS);
    80004f7e:	4509                	li	a0,2
    80004f80:	c77fb0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80004f84:	0330000f          	fence	rw,rw
    80004f88:	4785                	li	a5,1
    80004f8a:	00044717          	auipc	a4,0x44
    80004f8e:	0a073f23          	sd	zero,190(a4) # 80049048 <excpt+0x38>
    80004f92:	00f41023          	sh	a5,0(s0)
    80004f96:	0330000f          	fence	rw,rw
    asm volatile(
    80004f9a:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("vs executing hfence.gvma leads to virtual instruction exception",
    80004f9e:	08200593          	li	a1,130
    80004fa2:	00024617          	auipc	a2,0x24
    80004fa6:	a6660613          	addi	a2,a2,-1434 # 80028a08 <__func__.0+0xfa8>
    80004faa:	00023517          	auipc	a0,0x23
    80004fae:	dae50513          	addi	a0,a0,-594 # 80027d58 <__func__.0+0x2f8>
    80004fb2:	545200ef          	jal	80025cf6 <printf>
    80004fb6:	00044797          	auipc	a5,0x44
    80004fba:	05b7c783          	lbu	a5,91(a5) # 80049011 <excpt+0x1>
    80004fbe:	00023597          	auipc	a1,0x23
    80004fc2:	d7258593          	addi	a1,a1,-654 # 80027d30 <__func__.0+0x2d0>
    80004fc6:	cf89                	beqz	a5,80004fe0 <virtual_instruction_1+0x13a>
    80004fc8:	6418                	ld	a4,8(s0)
    80004fca:	47d9                	li	a5,22
    80004fcc:	00023597          	auipc	a1,0x23
    80004fd0:	d5458593          	addi	a1,a1,-684 # 80027d20 <__func__.0+0x2c0>
    80004fd4:	00f70663          	beq	a4,a5,80004fe0 <virtual_instruction_1+0x13a>
    80004fd8:	00023597          	auipc	a1,0x23
    80004fdc:	d5858593          	addi	a1,a1,-680 # 80027d30 <__func__.0+0x2d0>
    80004fe0:	00023517          	auipc	a0,0x23
    80004fe4:	d9050513          	addi	a0,a0,-624 # 80027d70 <__func__.0+0x310>
    80004fe8:	50f200ef          	jal	80025cf6 <printf>
    80004fec:	00044797          	auipc	a5,0x44
    80004ff0:	0257c783          	lbu	a5,37(a5) # 80049011 <excpt+0x1>
    80004ff4:	c789                	beqz	a5,80004ffe <virtual_instruction_1+0x158>
    80004ff6:	6418                	ld	a4,8(s0)
    80004ff8:	47d9                	li	a5,22
    80004ffa:	00f70c63          	beq	a4,a5,80005012 <virtual_instruction_1+0x16c>
    80004ffe:	00023517          	auipc	a0,0x23
    80005002:	d7a50513          	addi	a0,a0,-646 # 80027d78 <__func__.0+0x318>
    80005006:	4f1200ef          	jal	80025cf6 <printf>
    8000500a:	02900513          	li	a0,41
    8000500e:	2f31f0ef          	jal	80024b00 <putchar>
    80005012:	4529                	li	a0,10
    80005014:	2ed1f0ef          	jal	80024b00 <putchar>
    80005018:	c881                	beqz	s1,80005028 <virtual_instruction_1+0x182>
    8000501a:	00044797          	auipc	a5,0x44
    8000501e:	ff77c783          	lbu	a5,-9(a5) # 80049011 <excpt+0x1>
    80005022:	4481                	li	s1,0
    80005024:	1a079863          	bnez	a5,800051d4 <virtual_instruction_1+0x32e>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_M);  
    80005028:	4511                	li	a0,4
    8000502a:	bcdfb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTVM);
    8000502e:	001007b7          	lui	a5,0x100
    80005032:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    80005036:	4509                	li	a0,2
    80005038:	bbffb0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000503c:	0330000f          	fence	rw,rw
    80005040:	4785                	li	a5,1
    80005042:	00044717          	auipc	a4,0x44
    80005046:	00073323          	sd	zero,6(a4) # 80049048 <excpt+0x38>
    8000504a:	00f41023          	sh	a5,0(s0)
    8000504e:	0330000f          	fence	rw,rw
    asm volatile(
    80005052:	12000073          	sfence.vma
    sfence_vma();
    TEST_ASSERT("vs executing sfence.vma leads to virtual instruction exception when vtvm=1",
    80005056:	08200593          	li	a1,130
    8000505a:	00024617          	auipc	a2,0x24
    8000505e:	9ee60613          	addi	a2,a2,-1554 # 80028a48 <__func__.0+0xfe8>
    80005062:	00023517          	auipc	a0,0x23
    80005066:	cf650513          	addi	a0,a0,-778 # 80027d58 <__func__.0+0x2f8>
    8000506a:	48d200ef          	jal	80025cf6 <printf>
    8000506e:	00044797          	auipc	a5,0x44
    80005072:	fa37c783          	lbu	a5,-93(a5) # 80049011 <excpt+0x1>
    80005076:	00023597          	auipc	a1,0x23
    8000507a:	cba58593          	addi	a1,a1,-838 # 80027d30 <__func__.0+0x2d0>
    8000507e:	cf89                	beqz	a5,80005098 <virtual_instruction_1+0x1f2>
    80005080:	6418                	ld	a4,8(s0)
    80005082:	47d9                	li	a5,22
    80005084:	00023597          	auipc	a1,0x23
    80005088:	c9c58593          	addi	a1,a1,-868 # 80027d20 <__func__.0+0x2c0>
    8000508c:	00f70663          	beq	a4,a5,80005098 <virtual_instruction_1+0x1f2>
    80005090:	00023597          	auipc	a1,0x23
    80005094:	ca058593          	addi	a1,a1,-864 # 80027d30 <__func__.0+0x2d0>
    80005098:	00023517          	auipc	a0,0x23
    8000509c:	cd850513          	addi	a0,a0,-808 # 80027d70 <__func__.0+0x310>
    800050a0:	457200ef          	jal	80025cf6 <printf>
    800050a4:	00044797          	auipc	a5,0x44
    800050a8:	f6d7c783          	lbu	a5,-147(a5) # 80049011 <excpt+0x1>
    800050ac:	c789                	beqz	a5,800050b6 <virtual_instruction_1+0x210>
    800050ae:	6418                	ld	a4,8(s0)
    800050b0:	47d9                	li	a5,22
    800050b2:	00f70c63          	beq	a4,a5,800050ca <virtual_instruction_1+0x224>
    800050b6:	00023517          	auipc	a0,0x23
    800050ba:	cc250513          	addi	a0,a0,-830 # 80027d78 <__func__.0+0x318>
    800050be:	439200ef          	jal	80025cf6 <printf>
    800050c2:	02900513          	li	a0,41
    800050c6:	23b1f0ef          	jal	80024b00 <putchar>
    800050ca:	4529                	li	a0,10
    800050cc:	2351f0ef          	jal	80024b00 <putchar>
    800050d0:	c881                	beqz	s1,800050e0 <virtual_instruction_1+0x23a>
    800050d2:	00044797          	auipc	a5,0x44
    800050d6:	f3f7c783          	lbu	a5,-193(a5) # 80049011 <excpt+0x1>
    800050da:	4481                	li	s1,0
    800050dc:	0e079763          	bnez	a5,800051ca <virtual_instruction_1+0x324>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    800050e0:	4509                	li	a0,2
    800050e2:	b15fb0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800050e6:	0330000f          	fence	rw,rw
    800050ea:	4785                	li	a5,1
    800050ec:	00044717          	auipc	a4,0x44
    800050f0:	f4073e23          	sd	zero,-164(a4) # 80049048 <excpt+0x38>
    800050f4:	00f41023          	sh	a5,0(s0)
    800050f8:	0330000f          	fence	rw,rw
    asm volatile(
    800050fc:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80005100:	08200593          	li	a1,130
    80005104:	00024617          	auipc	a2,0x24
    80005108:	99460613          	addi	a2,a2,-1644 # 80028a98 <__func__.0+0x1038>
    8000510c:	00023517          	auipc	a0,0x23
    80005110:	c4c50513          	addi	a0,a0,-948 # 80027d58 <__func__.0+0x2f8>
    80005114:	3e3200ef          	jal	80025cf6 <printf>
    80005118:	00044797          	auipc	a5,0x44
    8000511c:	ef97c783          	lbu	a5,-263(a5) # 80049011 <excpt+0x1>
    80005120:	00023597          	auipc	a1,0x23
    80005124:	c1058593          	addi	a1,a1,-1008 # 80027d30 <__func__.0+0x2d0>
    80005128:	cf89                	beqz	a5,80005142 <virtual_instruction_1+0x29c>
    8000512a:	6418                	ld	a4,8(s0)
    8000512c:	47d9                	li	a5,22
    8000512e:	00023597          	auipc	a1,0x23
    80005132:	bf258593          	addi	a1,a1,-1038 # 80027d20 <__func__.0+0x2c0>
    80005136:	00f70663          	beq	a4,a5,80005142 <virtual_instruction_1+0x29c>
    8000513a:	00023597          	auipc	a1,0x23
    8000513e:	bf658593          	addi	a1,a1,-1034 # 80027d30 <__func__.0+0x2d0>
    80005142:	00023517          	auipc	a0,0x23
    80005146:	c2e50513          	addi	a0,a0,-978 # 80027d70 <__func__.0+0x310>
    8000514a:	3ad200ef          	jal	80025cf6 <printf>
    8000514e:	00044797          	auipc	a5,0x44
    80005152:	ec37c783          	lbu	a5,-317(a5) # 80049011 <excpt+0x1>
    80005156:	c789                	beqz	a5,80005160 <virtual_instruction_1+0x2ba>
    80005158:	6418                	ld	a4,8(s0)
    8000515a:	47d9                	li	a5,22
    8000515c:	00f70c63          	beq	a4,a5,80005174 <virtual_instruction_1+0x2ce>
    80005160:	00023517          	auipc	a0,0x23
    80005164:	c1850513          	addi	a0,a0,-1000 # 80027d78 <__func__.0+0x318>
    80005168:	38f200ef          	jal	80025cf6 <printf>
    8000516c:	02900513          	li	a0,41
    80005170:	1911f0ef          	jal	80024b00 <putchar>
    80005174:	4529                	li	a0,10
    80005176:	18b1f0ef          	jal	80024b00 <putchar>
    8000517a:	c095                	beqz	s1,8000519e <virtual_instruction_1+0x2f8>
    8000517c:	00044497          	auipc	s1,0x44
    80005180:	e954c483          	lbu	s1,-363(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80005184:	00023597          	auipc	a1,0x23
    80005188:	bac58593          	addi	a1,a1,-1108 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    8000518c:	cc91                	beqz	s1,800051a8 <virtual_instruction_1+0x302>
    8000518e:	6418                	ld	a4,8(s0)
    80005190:	47d9                	li	a5,22
    TEST_END();
    80005192:	00023597          	auipc	a1,0x23
    80005196:	b8e58593          	addi	a1,a1,-1138 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    8000519a:	00f70763          	beq	a4,a5,800051a8 <virtual_instruction_1+0x302>
    8000519e:	4481                	li	s1,0
    TEST_END();
    800051a0:	00023597          	auipc	a1,0x23
    800051a4:	b9058593          	addi	a1,a1,-1136 # 80027d30 <__func__.0+0x2d0>
    800051a8:	00023517          	auipc	a0,0x23
    800051ac:	c3050513          	addi	a0,a0,-976 # 80027dd8 <__func__.0+0x378>
    800051b0:	347200ef          	jal	80025cf6 <printf>
    800051b4:	4511                	li	a0,4
    800051b6:	a41fb0ef          	jal	80000bf6 <goto_priv>
    800051ba:	af2fc0ef          	jal	800014ac <reset_state>
}
    800051be:	60e2                	ld	ra,24(sp)
    800051c0:	6442                	ld	s0,16(sp)
    800051c2:	8526                	mv	a0,s1
    800051c4:	64a2                	ld	s1,8(sp)
    800051c6:	6105                	addi	sp,sp,32
    800051c8:	8082                	ret
    TEST_ASSERT("vs executing sfence.vma leads to virtual instruction exception when vtvm=1",
    800051ca:	6404                	ld	s1,8(s0)
    800051cc:	14a9                	addi	s1,s1,-22
    800051ce:	0014b493          	seqz	s1,s1
    800051d2:	b739                	j	800050e0 <virtual_instruction_1+0x23a>
    TEST_ASSERT("vs executing hfence.gvma leads to virtual instruction exception",
    800051d4:	6404                	ld	s1,8(s0)
    800051d6:	14a9                	addi	s1,s1,-22
    800051d8:	0014b493          	seqz	s1,s1
    800051dc:	b5b1                	j	80005028 <virtual_instruction_1+0x182>

00000000800051de <virtual_instruction_2>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_2() {
    800051de:	7179                	addi	sp,sp,-48

    TEST_START();
    800051e0:	00021597          	auipc	a1,0x21
    800051e4:	2c858593          	addi	a1,a1,712 # 800264a8 <__func__.10>
    800051e8:	00023517          	auipc	a0,0x23
    800051ec:	b5850513          	addi	a0,a0,-1192 # 80027d40 <__func__.0+0x2e0>
bool virtual_instruction_2() {
    800051f0:	f406                	sd	ra,40(sp)
    800051f2:	f022                	sd	s0,32(sp)
    800051f4:	ec26                	sd	s1,24(sp)
    TEST_START();
    800051f6:	301200ef          	jal	80025cf6 <printf>
    800051fa:	4529                	li	a0,10
    800051fc:	1051f0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_VS);
    80005200:	4509                	li	a0,2
    80005202:	9f5fb0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005206:	0330000f          	fence	rw,rw
    8000520a:	00044417          	auipc	s0,0x44
    8000520e:	e0640413          	addi	s0,s0,-506 # 80049010 <excpt>
    80005212:	4785                	li	a5,1
    80005214:	00044717          	auipc	a4,0x44
    80005218:	e2073a23          	sd	zero,-460(a4) # 80049048 <excpt+0x38>
    8000521c:	00f41023          	sh	a5,0(s0)
    80005220:	0330000f          	fence	rw,rw
    asm volatile(
    80005224:	4781                	li	a5,0
    80005226:	6c07c7f3          	.insn	4, 0x6c07c7f3
    volatile uint64_t tmp = hlvd(0);
    TEST_ASSERT("vs hlvd leads to virtual instruction exception",
    8000522a:	08200593          	li	a1,130
    8000522e:	00024617          	auipc	a2,0x24
    80005232:	8ba60613          	addi	a2,a2,-1862 # 80028ae8 <__func__.0+0x1088>
    80005236:	00023517          	auipc	a0,0x23
    8000523a:	b2250513          	addi	a0,a0,-1246 # 80027d58 <__func__.0+0x2f8>
    volatile uint64_t tmp = hlvd(0);
    8000523e:	e43e                	sd	a5,8(sp)
    TEST_ASSERT("vs hlvd leads to virtual instruction exception",
    80005240:	2b7200ef          	jal	80025cf6 <printf>
    80005244:	00044797          	auipc	a5,0x44
    80005248:	dcd7c783          	lbu	a5,-563(a5) # 80049011 <excpt+0x1>
    8000524c:	00023597          	auipc	a1,0x23
    80005250:	ae458593          	addi	a1,a1,-1308 # 80027d30 <__func__.0+0x2d0>
    80005254:	cf89                	beqz	a5,8000526e <virtual_instruction_2+0x90>
    80005256:	6418                	ld	a4,8(s0)
    80005258:	47d9                	li	a5,22
    8000525a:	00023597          	auipc	a1,0x23
    8000525e:	ac658593          	addi	a1,a1,-1338 # 80027d20 <__func__.0+0x2c0>
    80005262:	00f70663          	beq	a4,a5,8000526e <virtual_instruction_2+0x90>
    80005266:	00023597          	auipc	a1,0x23
    8000526a:	aca58593          	addi	a1,a1,-1334 # 80027d30 <__func__.0+0x2d0>
    8000526e:	00023517          	auipc	a0,0x23
    80005272:	b0250513          	addi	a0,a0,-1278 # 80027d70 <__func__.0+0x310>
    80005276:	281200ef          	jal	80025cf6 <printf>
    8000527a:	00044797          	auipc	a5,0x44
    8000527e:	d977c783          	lbu	a5,-617(a5) # 80049011 <excpt+0x1>
    80005282:	c789                	beqz	a5,8000528c <virtual_instruction_2+0xae>
    80005284:	6418                	ld	a4,8(s0)
    80005286:	47d9                	li	a5,22
    80005288:	00f70c63          	beq	a4,a5,800052a0 <virtual_instruction_2+0xc2>
    8000528c:	00023517          	auipc	a0,0x23
    80005290:	aec50513          	addi	a0,a0,-1300 # 80027d78 <__func__.0+0x318>
    80005294:	263200ef          	jal	80025cf6 <printf>
    80005298:	02900513          	li	a0,41
    8000529c:	0651f0ef          	jal	80024b00 <putchar>
    800052a0:	4529                	li	a0,10
    800052a2:	05f1f0ef          	jal	80024b00 <putchar>
    800052a6:	00044797          	auipc	a5,0x44
    800052aa:	d6b7c783          	lbu	a5,-661(a5) # 80049011 <excpt+0x1>
    800052ae:	4481                	li	s1,0
    800052b0:	c789                	beqz	a5,800052ba <virtual_instruction_2+0xdc>
    800052b2:	6404                	ld	s1,8(s0)
    800052b4:	14a9                	addi	s1,s1,-22
    800052b6:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    800052ba:	4509                	li	a0,2
    800052bc:	93bfb0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800052c0:	0330000f          	fence	rw,rw
    800052c4:	4785                	li	a5,1
    800052c6:	00044717          	auipc	a4,0x44
    800052ca:	d8073123          	sd	zero,-638(a4) # 80049048 <excpt+0x38>
    800052ce:	00f41023          	sh	a5,0(s0)
    800052d2:	0330000f          	fence	rw,rw
    asm volatile(
    800052d6:	37ab77b7          	lui	a5,0x37ab7
    800052da:	078a                	slli	a5,a5,0x2
    800052dc:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800052e0:	4701                	li	a4,0
    800052e2:	62f74073          	.insn	4, 0x62f74073
    hsvb(0, 0xdeadbeef);
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    800052e6:	08200593          	li	a1,130
    800052ea:	00024617          	auipc	a2,0x24
    800052ee:	82e60613          	addi	a2,a2,-2002 # 80028b18 <__func__.0+0x10b8>
    800052f2:	00023517          	auipc	a0,0x23
    800052f6:	a6650513          	addi	a0,a0,-1434 # 80027d58 <__func__.0+0x2f8>
    800052fa:	1fd200ef          	jal	80025cf6 <printf>
    800052fe:	00044797          	auipc	a5,0x44
    80005302:	d137c783          	lbu	a5,-749(a5) # 80049011 <excpt+0x1>
    80005306:	00023597          	auipc	a1,0x23
    8000530a:	a2a58593          	addi	a1,a1,-1494 # 80027d30 <__func__.0+0x2d0>
    8000530e:	cf89                	beqz	a5,80005328 <virtual_instruction_2+0x14a>
    80005310:	6418                	ld	a4,8(s0)
    80005312:	47d9                	li	a5,22
    80005314:	00023597          	auipc	a1,0x23
    80005318:	a0c58593          	addi	a1,a1,-1524 # 80027d20 <__func__.0+0x2c0>
    8000531c:	00f70663          	beq	a4,a5,80005328 <virtual_instruction_2+0x14a>
    80005320:	00023597          	auipc	a1,0x23
    80005324:	a1058593          	addi	a1,a1,-1520 # 80027d30 <__func__.0+0x2d0>
    80005328:	00023517          	auipc	a0,0x23
    8000532c:	a4850513          	addi	a0,a0,-1464 # 80027d70 <__func__.0+0x310>
    80005330:	1c7200ef          	jal	80025cf6 <printf>
    80005334:	00044797          	auipc	a5,0x44
    80005338:	cdd7c783          	lbu	a5,-803(a5) # 80049011 <excpt+0x1>
    8000533c:	c789                	beqz	a5,80005346 <virtual_instruction_2+0x168>
    8000533e:	6418                	ld	a4,8(s0)
    80005340:	47d9                	li	a5,22
    80005342:	00f70c63          	beq	a4,a5,8000535a <virtual_instruction_2+0x17c>
    80005346:	00023517          	auipc	a0,0x23
    8000534a:	a3250513          	addi	a0,a0,-1486 # 80027d78 <__func__.0+0x318>
    8000534e:	1a9200ef          	jal	80025cf6 <printf>
    80005352:	02900513          	li	a0,41
    80005356:	7aa1f0ef          	jal	80024b00 <putchar>
    8000535a:	4529                	li	a0,10
    8000535c:	7a41f0ef          	jal	80024b00 <putchar>
    80005360:	c095                	beqz	s1,80005384 <virtual_instruction_2+0x1a6>
    80005362:	00044497          	auipc	s1,0x44
    80005366:	caf4c483          	lbu	s1,-849(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    TEST_END();
    8000536a:	00023597          	auipc	a1,0x23
    8000536e:	9c658593          	addi	a1,a1,-1594 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    80005372:	cc91                	beqz	s1,8000538e <virtual_instruction_2+0x1b0>
    80005374:	6418                	ld	a4,8(s0)
    80005376:	47d9                	li	a5,22
    TEST_END();
    80005378:	00023597          	auipc	a1,0x23
    8000537c:	9a858593          	addi	a1,a1,-1624 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    80005380:	00f70763          	beq	a4,a5,8000538e <virtual_instruction_2+0x1b0>
    80005384:	4481                	li	s1,0
    TEST_END();
    80005386:	00023597          	auipc	a1,0x23
    8000538a:	9aa58593          	addi	a1,a1,-1622 # 80027d30 <__func__.0+0x2d0>
    8000538e:	00023517          	auipc	a0,0x23
    80005392:	a4a50513          	addi	a0,a0,-1462 # 80027dd8 <__func__.0+0x378>
    80005396:	161200ef          	jal	80025cf6 <printf>
    8000539a:	4511                	li	a0,4
    8000539c:	85bfb0ef          	jal	80000bf6 <goto_priv>
    800053a0:	90cfc0ef          	jal	800014ac <reset_state>

}
    800053a4:	70a2                	ld	ra,40(sp)
    800053a6:	7402                	ld	s0,32(sp)
    800053a8:	8526                	mv	a0,s1
    800053aa:	64e2                	ld	s1,24(sp)
    800053ac:	6145                	addi	sp,sp,48
    800053ae:	8082                	ret

00000000800053b0 <virtual_instruction_3>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_3() {
    800053b0:	1101                	addi	sp,sp,-32

    TEST_START();
    800053b2:	00021597          	auipc	a1,0x21
    800053b6:	10e58593          	addi	a1,a1,270 # 800264c0 <__func__.9>
    800053ba:	00023517          	auipc	a0,0x23
    800053be:	98650513          	addi	a0,a0,-1658 # 80027d40 <__func__.0+0x2e0>
bool virtual_instruction_3() {
    800053c2:	ec06                	sd	ra,24(sp)
    800053c4:	e822                	sd	s0,16(sp)
    800053c6:	e426                	sd	s1,8(sp)
    TEST_START();
    800053c8:	12f200ef          	jal	80025cf6 <printf>
    800053cc:	4529                	li	a0,10
    800053ce:	7321f0ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    800053d2:	4511                	li	a0,4
    800053d4:	823fb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTSR);
    800053d8:	004007b7          	lui	a5,0x400
    800053dc:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    800053e0:	4509                	li	a0,2
    800053e2:	815fb0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800053e6:	0330000f          	fence	rw,rw
    800053ea:	00044497          	auipc	s1,0x44
    800053ee:	c2648493          	addi	s1,s1,-986 # 80049010 <excpt>
    800053f2:	4785                	li	a5,1
    800053f4:	00044717          	auipc	a4,0x44
    800053f8:	c4073a23          	sd	zero,-940(a4) # 80049048 <excpt+0x38>
    800053fc:	00f49023          	sh	a5,0(s1)
    80005400:	0330000f          	fence	rw,rw
    TEST_EXEC_SRET();
    80005404:	00000297          	auipc	t0,0x0
    80005408:	01028293          	addi	t0,t0,16 # 80005414 <virtual_instruction_3+0x64>
    8000540c:	14129073          	csrw	sepc,t0
    80005410:	10200073          	sret
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    80005414:	08200593          	li	a1,130
    80005418:	00023617          	auipc	a2,0x23
    8000541c:	73060613          	addi	a2,a2,1840 # 80028b48 <__func__.0+0x10e8>
    80005420:	00023517          	auipc	a0,0x23
    80005424:	93850513          	addi	a0,a0,-1736 # 80027d58 <__func__.0+0x2f8>
    80005428:	0cf200ef          	jal	80025cf6 <printf>
    8000542c:	00044797          	auipc	a5,0x44
    80005430:	be57c783          	lbu	a5,-1051(a5) # 80049011 <excpt+0x1>
    80005434:	00023597          	auipc	a1,0x23
    80005438:	8fc58593          	addi	a1,a1,-1796 # 80027d30 <__func__.0+0x2d0>
    8000543c:	cf89                	beqz	a5,80005456 <virtual_instruction_3+0xa6>
    8000543e:	6498                	ld	a4,8(s1)
    80005440:	47d9                	li	a5,22
    80005442:	00023597          	auipc	a1,0x23
    80005446:	8de58593          	addi	a1,a1,-1826 # 80027d20 <__func__.0+0x2c0>
    8000544a:	00f70663          	beq	a4,a5,80005456 <virtual_instruction_3+0xa6>
    8000544e:	00023597          	auipc	a1,0x23
    80005452:	8e258593          	addi	a1,a1,-1822 # 80027d30 <__func__.0+0x2d0>
    80005456:	00023517          	auipc	a0,0x23
    8000545a:	91a50513          	addi	a0,a0,-1766 # 80027d70 <__func__.0+0x310>
    8000545e:	099200ef          	jal	80025cf6 <printf>
    80005462:	00044797          	auipc	a5,0x44
    80005466:	baf7c783          	lbu	a5,-1105(a5) # 80049011 <excpt+0x1>
    8000546a:	c789                	beqz	a5,80005474 <virtual_instruction_3+0xc4>
    8000546c:	6498                	ld	a4,8(s1)
    8000546e:	47d9                	li	a5,22
    80005470:	00f70c63          	beq	a4,a5,80005488 <virtual_instruction_3+0xd8>
    80005474:	00023517          	auipc	a0,0x23
    80005478:	90450513          	addi	a0,a0,-1788 # 80027d78 <__func__.0+0x318>
    8000547c:	07b200ef          	jal	80025cf6 <printf>
    80005480:	02900513          	li	a0,41
    80005484:	67c1f0ef          	jal	80024b00 <putchar>
    80005488:	4529                	li	a0,10
    8000548a:	6761f0ef          	jal	80024b00 <putchar>
    8000548e:	00044417          	auipc	s0,0x44
    80005492:	b8344403          	lbu	s0,-1149(s0) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  
    goto_priv(PRIV_M);
    80005496:	4511                	li	a0,4
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    80005498:	c409                	beqz	s0,800054a2 <virtual_instruction_3+0xf2>
    8000549a:	6498                	ld	a4,8(s1)
    8000549c:	47d9                	li	a5,22
    8000549e:	02f70e63          	beq	a4,a5,800054da <virtual_instruction_3+0x12a>
    goto_priv(PRIV_M);
    800054a2:	f54fb0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTSR);
    800054a6:	004007b7          	lui	a5,0x400
    800054aa:	6007b073          	csrc	hstatus,a5
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    800054ae:	4401                	li	s0,0

    TEST_END();
    800054b0:	00023597          	auipc	a1,0x23
    800054b4:	88058593          	addi	a1,a1,-1920 # 80027d30 <__func__.0+0x2d0>
    800054b8:	00023517          	auipc	a0,0x23
    800054bc:	92050513          	addi	a0,a0,-1760 # 80027dd8 <__func__.0+0x378>
    800054c0:	037200ef          	jal	80025cf6 <printf>
    800054c4:	4511                	li	a0,4
    800054c6:	f30fb0ef          	jal	80000bf6 <goto_priv>
    800054ca:	fe3fb0ef          	jal	800014ac <reset_state>
}
    800054ce:	60e2                	ld	ra,24(sp)
    800054d0:	8522                	mv	a0,s0
    800054d2:	6442                	ld	s0,16(sp)
    800054d4:	64a2                	ld	s1,8(sp)
    800054d6:	6105                	addi	sp,sp,32
    800054d8:	8082                	ret
    goto_priv(PRIV_M);
    800054da:	f1cfb0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTSR);
    800054de:	004007b7          	lui	a5,0x400
    800054e2:	6007b073          	csrc	hstatus,a5
    TEST_END();
    800054e6:	00023597          	auipc	a1,0x23
    800054ea:	83a58593          	addi	a1,a1,-1990 # 80027d20 <__func__.0+0x2c0>
    800054ee:	b7e9                	j	800054b8 <virtual_instruction_3+0x108>

00000000800054f0 <virtual_instruction_4>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_4() {
    800054f0:	1101                	addi	sp,sp,-32

    TEST_START();
    800054f2:	00021597          	auipc	a1,0x21
    800054f6:	fe658593          	addi	a1,a1,-26 # 800264d8 <__func__.8>
    800054fa:	00023517          	auipc	a0,0x23
    800054fe:	84650513          	addi	a0,a0,-1978 # 80027d40 <__func__.0+0x2e0>
bool virtual_instruction_4() {
    80005502:	ec06                	sd	ra,24(sp)
    80005504:	e822                	sd	s0,16(sp)
    80005506:	e426                	sd	s1,8(sp)
    TEST_START();
    80005508:	7ee200ef          	jal	80025cf6 <printf>
    8000550c:	4529                	li	a0,10
    8000550e:	5f21f0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    80005512:	4511                	li	a0,4
    80005514:	ee2fb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTVM);
    80005518:	001007b7          	lui	a5,0x100
    8000551c:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    80005520:	4509                	li	a0,2
    80005522:	ed4fb0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005526:	0330000f          	fence	rw,rw
    8000552a:	00044417          	auipc	s0,0x44
    8000552e:	ae640413          	addi	s0,s0,-1306 # 80049010 <excpt>
    80005532:	4785                	li	a5,1
    80005534:	00044717          	auipc	a4,0x44
    80005538:	b0073a23          	sd	zero,-1260(a4) # 80049048 <excpt+0x38>
    8000553c:	00f41023          	sh	a5,0(s0)
    80005540:	0330000f          	fence	rw,rw
    asm volatile ("sfence.vma \n\t");
    80005544:	12000073          	sfence.vma
    sfence();
    TEST_ASSERT("vs sfence leads to virtual instruction exception when vtvm set",
    80005548:	08200593          	li	a1,130
    8000554c:	00023617          	auipc	a2,0x23
    80005550:	63c60613          	addi	a2,a2,1596 # 80028b88 <__func__.0+0x1128>
    80005554:	00023517          	auipc	a0,0x23
    80005558:	80450513          	addi	a0,a0,-2044 # 80027d58 <__func__.0+0x2f8>
    8000555c:	79a200ef          	jal	80025cf6 <printf>
    80005560:	00044797          	auipc	a5,0x44
    80005564:	ab17c783          	lbu	a5,-1359(a5) # 80049011 <excpt+0x1>
    80005568:	00022597          	auipc	a1,0x22
    8000556c:	7c858593          	addi	a1,a1,1992 # 80027d30 <__func__.0+0x2d0>
    80005570:	cf89                	beqz	a5,8000558a <virtual_instruction_4+0x9a>
    80005572:	6418                	ld	a4,8(s0)
    80005574:	47d9                	li	a5,22
    80005576:	00022597          	auipc	a1,0x22
    8000557a:	7aa58593          	addi	a1,a1,1962 # 80027d20 <__func__.0+0x2c0>
    8000557e:	00f70663          	beq	a4,a5,8000558a <virtual_instruction_4+0x9a>
    80005582:	00022597          	auipc	a1,0x22
    80005586:	7ae58593          	addi	a1,a1,1966 # 80027d30 <__func__.0+0x2d0>
    8000558a:	00022517          	auipc	a0,0x22
    8000558e:	7e650513          	addi	a0,a0,2022 # 80027d70 <__func__.0+0x310>
    80005592:	764200ef          	jal	80025cf6 <printf>
    80005596:	00044797          	auipc	a5,0x44
    8000559a:	a7b7c783          	lbu	a5,-1413(a5) # 80049011 <excpt+0x1>
    8000559e:	c789                	beqz	a5,800055a8 <virtual_instruction_4+0xb8>
    800055a0:	6418                	ld	a4,8(s0)
    800055a2:	47d9                	li	a5,22
    800055a4:	00f70c63          	beq	a4,a5,800055bc <virtual_instruction_4+0xcc>
    800055a8:	00022517          	auipc	a0,0x22
    800055ac:	7d050513          	addi	a0,a0,2000 # 80027d78 <__func__.0+0x318>
    800055b0:	746200ef          	jal	80025cf6 <printf>
    800055b4:	02900513          	li	a0,41
    800055b8:	5481f0ef          	jal	80024b00 <putchar>
    800055bc:	4529                	li	a0,10
    800055be:	5421f0ef          	jal	80024b00 <putchar>
    800055c2:	00044797          	auipc	a5,0x44
    800055c6:	a4f7c783          	lbu	a5,-1457(a5) # 80049011 <excpt+0x1>
    800055ca:	4481                	li	s1,0
    800055cc:	c789                	beqz	a5,800055d6 <virtual_instruction_4+0xe6>
    800055ce:	6404                	ld	s1,8(s0)
    800055d0:	14a9                	addi	s1,s1,-22
    800055d2:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_SETUP_EXCEPT();
    800055d6:	0330000f          	fence	rw,rw
    800055da:	4785                	li	a5,1
    800055dc:	00044717          	auipc	a4,0x44
    800055e0:	a6073623          	sd	zero,-1428(a4) # 80049048 <excpt+0x38>
    800055e4:	00f41023          	sh	a5,0(s0)
    800055e8:	0330000f          	fence	rw,rw
    CSRW(satp, 0x0);
    800055ec:	18005073          	csrwi	satp,0
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    800055f0:	08200593          	li	a1,130
    800055f4:	00023617          	auipc	a2,0x23
    800055f8:	5d460613          	addi	a2,a2,1492 # 80028bc8 <__func__.0+0x1168>
    800055fc:	00022517          	auipc	a0,0x22
    80005600:	75c50513          	addi	a0,a0,1884 # 80027d58 <__func__.0+0x2f8>
    80005604:	6f2200ef          	jal	80025cf6 <printf>
    80005608:	00044797          	auipc	a5,0x44
    8000560c:	a097c783          	lbu	a5,-1527(a5) # 80049011 <excpt+0x1>
    80005610:	00022597          	auipc	a1,0x22
    80005614:	72058593          	addi	a1,a1,1824 # 80027d30 <__func__.0+0x2d0>
    80005618:	cf89                	beqz	a5,80005632 <virtual_instruction_4+0x142>
    8000561a:	6418                	ld	a4,8(s0)
    8000561c:	47d9                	li	a5,22
    8000561e:	00022597          	auipc	a1,0x22
    80005622:	70258593          	addi	a1,a1,1794 # 80027d20 <__func__.0+0x2c0>
    80005626:	00f70663          	beq	a4,a5,80005632 <virtual_instruction_4+0x142>
    8000562a:	00022597          	auipc	a1,0x22
    8000562e:	70658593          	addi	a1,a1,1798 # 80027d30 <__func__.0+0x2d0>
    80005632:	00022517          	auipc	a0,0x22
    80005636:	73e50513          	addi	a0,a0,1854 # 80027d70 <__func__.0+0x310>
    8000563a:	6bc200ef          	jal	80025cf6 <printf>
    8000563e:	00044797          	auipc	a5,0x44
    80005642:	9d37c783          	lbu	a5,-1581(a5) # 80049011 <excpt+0x1>
    80005646:	c789                	beqz	a5,80005650 <virtual_instruction_4+0x160>
    80005648:	6418                	ld	a4,8(s0)
    8000564a:	47d9                	li	a5,22
    8000564c:	00f70c63          	beq	a4,a5,80005664 <virtual_instruction_4+0x174>
    80005650:	00022517          	auipc	a0,0x22
    80005654:	72850513          	addi	a0,a0,1832 # 80027d78 <__func__.0+0x318>
    80005658:	69e200ef          	jal	80025cf6 <printf>
    8000565c:	02900513          	li	a0,41
    80005660:	4a01f0ef          	jal	80024b00 <putchar>
    80005664:	4529                	li	a0,10
    80005666:	49a1f0ef          	jal	80024b00 <putchar>
    8000566a:	c095                	beqz	s1,8000568e <virtual_instruction_4+0x19e>
    8000566c:	00044497          	auipc	s1,0x44
    80005670:	9a54c483          	lbu	s1,-1627(s1) # 80049011 <excpt+0x1>
    // TEST_ASSERT("vs mode access h level low part leads to virtual instruction exception when mstatus_TVM=0",
    //     excpt.triggered == true &&
    //     excpt.cause == CAUSE_VRTI
    // );      
    
    TEST_END();
    80005674:	00022597          	auipc	a1,0x22
    80005678:	6bc58593          	addi	a1,a1,1724 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    8000567c:	cc91                	beqz	s1,80005698 <virtual_instruction_4+0x1a8>
    8000567e:	6418                	ld	a4,8(s0)
    80005680:	47d9                	li	a5,22
    TEST_END();
    80005682:	00022597          	auipc	a1,0x22
    80005686:	69e58593          	addi	a1,a1,1694 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    8000568a:	00f70763          	beq	a4,a5,80005698 <virtual_instruction_4+0x1a8>
    8000568e:	4481                	li	s1,0
    TEST_END();
    80005690:	00022597          	auipc	a1,0x22
    80005694:	6a058593          	addi	a1,a1,1696 # 80027d30 <__func__.0+0x2d0>
    80005698:	00022517          	auipc	a0,0x22
    8000569c:	74050513          	addi	a0,a0,1856 # 80027dd8 <__func__.0+0x378>
    800056a0:	656200ef          	jal	80025cf6 <printf>
    800056a4:	4511                	li	a0,4
    800056a6:	d50fb0ef          	jal	80000bf6 <goto_priv>
    800056aa:	e03fb0ef          	jal	800014ac <reset_state>
}
    800056ae:	60e2                	ld	ra,24(sp)
    800056b0:	6442                	ld	s0,16(sp)
    800056b2:	8526                	mv	a0,s1
    800056b4:	64a2                	ld	s1,8(sp)
    800056b6:	6105                	addi	sp,sp,32
    800056b8:	8082                	ret

00000000800056ba <virtual_instruction_5>:
    ////////////////////////////////////////////////////////////////////////

bool virtual_instruction_5() {
    800056ba:	1101                	addi	sp,sp,-32

    TEST_START();
    800056bc:	00021597          	auipc	a1,0x21
    800056c0:	e3458593          	addi	a1,a1,-460 # 800264f0 <__func__.7>
    800056c4:	00022517          	auipc	a0,0x22
    800056c8:	67c50513          	addi	a0,a0,1660 # 80027d40 <__func__.0+0x2e0>
bool virtual_instruction_5() {
    800056cc:	ec06                	sd	ra,24(sp)
    800056ce:	e822                	sd	s0,16(sp)
    800056d0:	e426                	sd	s1,8(sp)
    TEST_START();
    800056d2:	624200ef          	jal	80025cf6 <printf>
    800056d6:	4529                	li	a0,10
    800056d8:	4281f0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    800056dc:	4511                	li	a0,4
    800056de:	d18fb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);
    800056e2:	002007b7          	lui	a5,0x200
    800056e6:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    800056ea:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_VS);
    800056ee:	4509                	li	a0,2
    800056f0:	d06fb0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800056f4:	0330000f          	fence	rw,rw
    800056f8:	00044497          	auipc	s1,0x44
    800056fc:	91848493          	addi	s1,s1,-1768 # 80049010 <excpt>
    80005700:	4785                	li	a5,1
    80005702:	00044717          	auipc	a4,0x44
    80005706:	94073323          	sd	zero,-1722(a4) # 80049048 <excpt+0x38>
    8000570a:	00f49023          	sh	a5,0(s1)
    8000570e:	0330000f          	fence	rw,rw
    asm("wfi");
    80005712:	10500073          	wfi
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    80005716:	08200593          	li	a1,130
    8000571a:	00023617          	auipc	a2,0x23
    8000571e:	4f660613          	addi	a2,a2,1270 # 80028c10 <__func__.0+0x11b0>
    80005722:	00022517          	auipc	a0,0x22
    80005726:	63650513          	addi	a0,a0,1590 # 80027d58 <__func__.0+0x2f8>
    8000572a:	5cc200ef          	jal	80025cf6 <printf>
    8000572e:	00044797          	auipc	a5,0x44
    80005732:	8e37c783          	lbu	a5,-1821(a5) # 80049011 <excpt+0x1>
    80005736:	00022597          	auipc	a1,0x22
    8000573a:	5fa58593          	addi	a1,a1,1530 # 80027d30 <__func__.0+0x2d0>
    8000573e:	cf89                	beqz	a5,80005758 <virtual_instruction_5+0x9e>
    80005740:	6498                	ld	a4,8(s1)
    80005742:	47d9                	li	a5,22
    80005744:	00022597          	auipc	a1,0x22
    80005748:	5dc58593          	addi	a1,a1,1500 # 80027d20 <__func__.0+0x2c0>
    8000574c:	00f70663          	beq	a4,a5,80005758 <virtual_instruction_5+0x9e>
    80005750:	00022597          	auipc	a1,0x22
    80005754:	5e058593          	addi	a1,a1,1504 # 80027d30 <__func__.0+0x2d0>
    80005758:	00022517          	auipc	a0,0x22
    8000575c:	61850513          	addi	a0,a0,1560 # 80027d70 <__func__.0+0x310>
    80005760:	596200ef          	jal	80025cf6 <printf>
    80005764:	00044797          	auipc	a5,0x44
    80005768:	8ad7c783          	lbu	a5,-1875(a5) # 80049011 <excpt+0x1>
    8000576c:	c789                	beqz	a5,80005776 <virtual_instruction_5+0xbc>
    8000576e:	6498                	ld	a4,8(s1)
    80005770:	47d9                	li	a5,22
    80005772:	00f70c63          	beq	a4,a5,8000578a <virtual_instruction_5+0xd0>
    80005776:	00022517          	auipc	a0,0x22
    8000577a:	60250513          	addi	a0,a0,1538 # 80027d78 <__func__.0+0x318>
    8000577e:	578200ef          	jal	80025cf6 <printf>
    80005782:	02900513          	li	a0,41
    80005786:	37a1f0ef          	jal	80024b00 <putchar>
    8000578a:	4529                	li	a0,10
    8000578c:	3741f0ef          	jal	80024b00 <putchar>
    80005790:	00044417          	auipc	s0,0x44
    80005794:	88144403          	lbu	s0,-1919(s0) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    goto_priv(PRIV_M);
    80005798:	4511                	li	a0,4
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    8000579a:	c409                	beqz	s0,800057a4 <virtual_instruction_5+0xea>
    8000579c:	6498                	ld	a4,8(s1)
    8000579e:	47d9                	li	a5,22
    800057a0:	04f70263          	beq	a4,a5,800057e4 <virtual_instruction_5+0x12a>
    goto_priv(PRIV_M);
    800057a4:	c52fb0ef          	jal	80000bf6 <goto_priv>
    printf("%llx",CSRR(CSR_MTVAL));
    800057a8:	343025f3          	csrr	a1,mtval
    800057ac:	00023517          	auipc	a0,0x23
    800057b0:	4ac50513          	addi	a0,a0,1196 # 80028c58 <__func__.0+0x11f8>
    800057b4:	542200ef          	jal	80025cf6 <printf>
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    800057b8:	4401                	li	s0,0

    TEST_END();
    800057ba:	00022597          	auipc	a1,0x22
    800057be:	57658593          	addi	a1,a1,1398 # 80027d30 <__func__.0+0x2d0>
    800057c2:	00022517          	auipc	a0,0x22
    800057c6:	61650513          	addi	a0,a0,1558 # 80027dd8 <__func__.0+0x378>
    800057ca:	52c200ef          	jal	80025cf6 <printf>
    800057ce:	4511                	li	a0,4
    800057d0:	c26fb0ef          	jal	80000bf6 <goto_priv>
    800057d4:	cd9fb0ef          	jal	800014ac <reset_state>
}
    800057d8:	60e2                	ld	ra,24(sp)
    800057da:	8522                	mv	a0,s0
    800057dc:	6442                	ld	s0,16(sp)
    800057de:	64a2                	ld	s1,8(sp)
    800057e0:	6105                	addi	sp,sp,32
    800057e2:	8082                	ret
    goto_priv(PRIV_M);
    800057e4:	c12fb0ef          	jal	80000bf6 <goto_priv>
    printf("%llx",CSRR(CSR_MTVAL));
    800057e8:	343025f3          	csrr	a1,mtval
    800057ec:	00023517          	auipc	a0,0x23
    800057f0:	46c50513          	addi	a0,a0,1132 # 80028c58 <__func__.0+0x11f8>
    800057f4:	502200ef          	jal	80025cf6 <printf>
    TEST_END();
    800057f8:	00022597          	auipc	a1,0x22
    800057fc:	52858593          	addi	a1,a1,1320 # 80027d20 <__func__.0+0x2c0>
    80005800:	b7c9                	j	800057c2 <virtual_instruction_5+0x108>

0000000080005802 <virtual_instruction_6>:


bool virtual_instruction_6() {
    80005802:	1101                	addi	sp,sp,-32

    TEST_START();
    80005804:	00021597          	auipc	a1,0x21
    80005808:	d0458593          	addi	a1,a1,-764 # 80026508 <__func__.6>
    8000580c:	00022517          	auipc	a0,0x22
    80005810:	53450513          	addi	a0,a0,1332 # 80027d40 <__func__.0+0x2e0>
bool virtual_instruction_6() {
    80005814:	ec06                	sd	ra,24(sp)
    80005816:	e822                	sd	s0,16(sp)
    80005818:	e426                	sd	s1,8(sp)
    TEST_START();
    8000581a:	4dc200ef          	jal	80025cf6 <printf>
    8000581e:	4529                	li	a0,10
    80005820:	2e01f0ef          	jal	80024b00 <putchar>

//vu-mode
    goto_priv(PRIV_VU);
    80005824:	4501                	li	a0,0
    80005826:	bd0fb0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000582a:	0330000f          	fence	rw,rw
    8000582e:	00043417          	auipc	s0,0x43
    80005832:	7e240413          	addi	s0,s0,2018 # 80049010 <excpt>
    80005836:	4785                	li	a5,1
    80005838:	00044717          	auipc	a4,0x44
    8000583c:	80073823          	sd	zero,-2032(a4) # 80049048 <excpt+0x38>
    80005840:	00f41023          	sh	a5,0(s0)
    80005844:	0330000f          	fence	rw,rw
    asm volatile(
    80005848:	22000073          	.insn	4, 0x22000073
    hfence_vvma();
    TEST_ASSERT("vu executing hfence.vvma leads to virtual instruction exception",
    8000584c:	08200593          	li	a1,130
    80005850:	00023617          	auipc	a2,0x23
    80005854:	41060613          	addi	a2,a2,1040 # 80028c60 <__func__.0+0x1200>
    80005858:	00022517          	auipc	a0,0x22
    8000585c:	50050513          	addi	a0,a0,1280 # 80027d58 <__func__.0+0x2f8>
    80005860:	496200ef          	jal	80025cf6 <printf>
    80005864:	00043797          	auipc	a5,0x43
    80005868:	7ad7c783          	lbu	a5,1965(a5) # 80049011 <excpt+0x1>
    8000586c:	00022597          	auipc	a1,0x22
    80005870:	4c458593          	addi	a1,a1,1220 # 80027d30 <__func__.0+0x2d0>
    80005874:	cf89                	beqz	a5,8000588e <virtual_instruction_6+0x8c>
    80005876:	6418                	ld	a4,8(s0)
    80005878:	47d9                	li	a5,22
    8000587a:	00022597          	auipc	a1,0x22
    8000587e:	4a658593          	addi	a1,a1,1190 # 80027d20 <__func__.0+0x2c0>
    80005882:	00f70663          	beq	a4,a5,8000588e <virtual_instruction_6+0x8c>
    80005886:	00022597          	auipc	a1,0x22
    8000588a:	4aa58593          	addi	a1,a1,1194 # 80027d30 <__func__.0+0x2d0>
    8000588e:	00022517          	auipc	a0,0x22
    80005892:	4e250513          	addi	a0,a0,1250 # 80027d70 <__func__.0+0x310>
    80005896:	460200ef          	jal	80025cf6 <printf>
    8000589a:	00043797          	auipc	a5,0x43
    8000589e:	7777c783          	lbu	a5,1911(a5) # 80049011 <excpt+0x1>
    800058a2:	c789                	beqz	a5,800058ac <virtual_instruction_6+0xaa>
    800058a4:	6418                	ld	a4,8(s0)
    800058a6:	47d9                	li	a5,22
    800058a8:	00f70c63          	beq	a4,a5,800058c0 <virtual_instruction_6+0xbe>
    800058ac:	00022517          	auipc	a0,0x22
    800058b0:	4cc50513          	addi	a0,a0,1228 # 80027d78 <__func__.0+0x318>
    800058b4:	442200ef          	jal	80025cf6 <printf>
    800058b8:	02900513          	li	a0,41
    800058bc:	2441f0ef          	jal	80024b00 <putchar>
    800058c0:	4529                	li	a0,10
    800058c2:	23e1f0ef          	jal	80024b00 <putchar>
    800058c6:	00043797          	auipc	a5,0x43
    800058ca:	74b7c783          	lbu	a5,1867(a5) # 80049011 <excpt+0x1>
    800058ce:	4481                	li	s1,0
    800058d0:	c789                	beqz	a5,800058da <virtual_instruction_6+0xd8>
    800058d2:	6404                	ld	s1,8(s0)
    800058d4:	14a9                	addi	s1,s1,-22
    800058d6:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    
    goto_priv(PRIV_VU);
    800058da:	4501                	li	a0,0
    800058dc:	b1afb0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800058e0:	0330000f          	fence	rw,rw
    800058e4:	4785                	li	a5,1
    800058e6:	00043717          	auipc	a4,0x43
    800058ea:	76073123          	sd	zero,1890(a4) # 80049048 <excpt+0x38>
    800058ee:	00f41023          	sh	a5,0(s0)
    800058f2:	0330000f          	fence	rw,rw
    asm volatile(
    800058f6:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("vu executing hfence.gvma leads to virtual instruction exception",
    800058fa:	08200593          	li	a1,130
    800058fe:	00023617          	auipc	a2,0x23
    80005902:	3a260613          	addi	a2,a2,930 # 80028ca0 <__func__.0+0x1240>
    80005906:	00022517          	auipc	a0,0x22
    8000590a:	45250513          	addi	a0,a0,1106 # 80027d58 <__func__.0+0x2f8>
    8000590e:	3e8200ef          	jal	80025cf6 <printf>
    80005912:	00043797          	auipc	a5,0x43
    80005916:	6ff7c783          	lbu	a5,1791(a5) # 80049011 <excpt+0x1>
    8000591a:	00022597          	auipc	a1,0x22
    8000591e:	41658593          	addi	a1,a1,1046 # 80027d30 <__func__.0+0x2d0>
    80005922:	cf89                	beqz	a5,8000593c <virtual_instruction_6+0x13a>
    80005924:	6418                	ld	a4,8(s0)
    80005926:	47d9                	li	a5,22
    80005928:	00022597          	auipc	a1,0x22
    8000592c:	3f858593          	addi	a1,a1,1016 # 80027d20 <__func__.0+0x2c0>
    80005930:	00f70663          	beq	a4,a5,8000593c <virtual_instruction_6+0x13a>
    80005934:	00022597          	auipc	a1,0x22
    80005938:	3fc58593          	addi	a1,a1,1020 # 80027d30 <__func__.0+0x2d0>
    8000593c:	00022517          	auipc	a0,0x22
    80005940:	43450513          	addi	a0,a0,1076 # 80027d70 <__func__.0+0x310>
    80005944:	3b2200ef          	jal	80025cf6 <printf>
    80005948:	00043797          	auipc	a5,0x43
    8000594c:	6c97c783          	lbu	a5,1737(a5) # 80049011 <excpt+0x1>
    80005950:	c789                	beqz	a5,8000595a <virtual_instruction_6+0x158>
    80005952:	6418                	ld	a4,8(s0)
    80005954:	47d9                	li	a5,22
    80005956:	00f70c63          	beq	a4,a5,8000596e <virtual_instruction_6+0x16c>
    8000595a:	00022517          	auipc	a0,0x22
    8000595e:	41e50513          	addi	a0,a0,1054 # 80027d78 <__func__.0+0x318>
    80005962:	394200ef          	jal	80025cf6 <printf>
    80005966:	02900513          	li	a0,41
    8000596a:	1961f0ef          	jal	80024b00 <putchar>
    8000596e:	4529                	li	a0,10
    80005970:	1901f0ef          	jal	80024b00 <putchar>
    80005974:	c881                	beqz	s1,80005984 <virtual_instruction_6+0x182>
    80005976:	00043797          	auipc	a5,0x43
    8000597a:	69b7c783          	lbu	a5,1691(a5) # 80049011 <excpt+0x1>
    8000597e:	4481                	li	s1,0
    80005980:	0e079763          	bnez	a5,80005a6e <virtual_instruction_6+0x26c>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    goto_priv(PRIV_VU);
    80005984:	4501                	li	a0,0
    80005986:	a70fb0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000598a:	0330000f          	fence	rw,rw
    8000598e:	4785                	li	a5,1
    80005990:	00043717          	auipc	a4,0x43
    80005994:	6a073c23          	sd	zero,1720(a4) # 80049048 <excpt+0x38>
    80005998:	00f41023          	sh	a5,0(s0)
    8000599c:	0330000f          	fence	rw,rw
    asm volatile(
    800059a0:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    800059a4:	08200593          	li	a1,130
    800059a8:	00023617          	auipc	a2,0x23
    800059ac:	33860613          	addi	a2,a2,824 # 80028ce0 <__func__.0+0x1280>
    800059b0:	00022517          	auipc	a0,0x22
    800059b4:	3a850513          	addi	a0,a0,936 # 80027d58 <__func__.0+0x2f8>
    800059b8:	33e200ef          	jal	80025cf6 <printf>
    800059bc:	00043797          	auipc	a5,0x43
    800059c0:	6557c783          	lbu	a5,1621(a5) # 80049011 <excpt+0x1>
    800059c4:	00022597          	auipc	a1,0x22
    800059c8:	36c58593          	addi	a1,a1,876 # 80027d30 <__func__.0+0x2d0>
    800059cc:	cf89                	beqz	a5,800059e6 <virtual_instruction_6+0x1e4>
    800059ce:	6418                	ld	a4,8(s0)
    800059d0:	47d9                	li	a5,22
    800059d2:	00022597          	auipc	a1,0x22
    800059d6:	34e58593          	addi	a1,a1,846 # 80027d20 <__func__.0+0x2c0>
    800059da:	00f70663          	beq	a4,a5,800059e6 <virtual_instruction_6+0x1e4>
    800059de:	00022597          	auipc	a1,0x22
    800059e2:	35258593          	addi	a1,a1,850 # 80027d30 <__func__.0+0x2d0>
    800059e6:	00022517          	auipc	a0,0x22
    800059ea:	38a50513          	addi	a0,a0,906 # 80027d70 <__func__.0+0x310>
    800059ee:	308200ef          	jal	80025cf6 <printf>
    800059f2:	00043797          	auipc	a5,0x43
    800059f6:	61f7c783          	lbu	a5,1567(a5) # 80049011 <excpt+0x1>
    800059fa:	c789                	beqz	a5,80005a04 <virtual_instruction_6+0x202>
    800059fc:	6418                	ld	a4,8(s0)
    800059fe:	47d9                	li	a5,22
    80005a00:	00f70c63          	beq	a4,a5,80005a18 <virtual_instruction_6+0x216>
    80005a04:	00022517          	auipc	a0,0x22
    80005a08:	37450513          	addi	a0,a0,884 # 80027d78 <__func__.0+0x318>
    80005a0c:	2ea200ef          	jal	80025cf6 <printf>
    80005a10:	02900513          	li	a0,41
    80005a14:	0ec1f0ef          	jal	80024b00 <putchar>
    80005a18:	4529                	li	a0,10
    80005a1a:	0e61f0ef          	jal	80024b00 <putchar>
    80005a1e:	c095                	beqz	s1,80005a42 <virtual_instruction_6+0x240>
    80005a20:	00043497          	auipc	s1,0x43
    80005a24:	5f14c483          	lbu	s1,1521(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80005a28:	00022597          	auipc	a1,0x22
    80005a2c:	30858593          	addi	a1,a1,776 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80005a30:	cc91                	beqz	s1,80005a4c <virtual_instruction_6+0x24a>
    80005a32:	6418                	ld	a4,8(s0)
    80005a34:	47d9                	li	a5,22
    TEST_END();
    80005a36:	00022597          	auipc	a1,0x22
    80005a3a:	2ea58593          	addi	a1,a1,746 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80005a3e:	00f70763          	beq	a4,a5,80005a4c <virtual_instruction_6+0x24a>
    80005a42:	4481                	li	s1,0
    TEST_END();
    80005a44:	00022597          	auipc	a1,0x22
    80005a48:	2ec58593          	addi	a1,a1,748 # 80027d30 <__func__.0+0x2d0>
    80005a4c:	00022517          	auipc	a0,0x22
    80005a50:	38c50513          	addi	a0,a0,908 # 80027dd8 <__func__.0+0x378>
    80005a54:	2a2200ef          	jal	80025cf6 <printf>
    80005a58:	4511                	li	a0,4
    80005a5a:	99cfb0ef          	jal	80000bf6 <goto_priv>
    80005a5e:	a4ffb0ef          	jal	800014ac <reset_state>
}
    80005a62:	60e2                	ld	ra,24(sp)
    80005a64:	6442                	ld	s0,16(sp)
    80005a66:	8526                	mv	a0,s1
    80005a68:	64a2                	ld	s1,8(sp)
    80005a6a:	6105                	addi	sp,sp,32
    80005a6c:	8082                	ret
    TEST_ASSERT("vu executing hfence.gvma leads to virtual instruction exception",
    80005a6e:	6404                	ld	s1,8(s0)
    80005a70:	14a9                	addi	s1,s1,-22
    80005a72:	0014b493          	seqz	s1,s1
    80005a76:	b739                	j	80005984 <virtual_instruction_6+0x182>

0000000080005a78 <virtual_instruction_7>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_7() {
    80005a78:	1101                	addi	sp,sp,-32

    TEST_START();
    80005a7a:	00021597          	auipc	a1,0x21
    80005a7e:	aa658593          	addi	a1,a1,-1370 # 80026520 <__func__.5>
    80005a82:	00022517          	auipc	a0,0x22
    80005a86:	2be50513          	addi	a0,a0,702 # 80027d40 <__func__.0+0x2e0>
bool virtual_instruction_7() {
    80005a8a:	ec06                	sd	ra,24(sp)
    80005a8c:	e822                	sd	s0,16(sp)
    80005a8e:	e426                	sd	s1,8(sp)
    TEST_START();
    80005a90:	266200ef          	jal	80025cf6 <printf>
    80005a94:	4529                	li	a0,10
    80005a96:	06a1f0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_VU);
    80005a9a:	4501                	li	a0,0
    80005a9c:	95afb0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005aa0:	0330000f          	fence	rw,rw
    80005aa4:	00043417          	auipc	s0,0x43
    80005aa8:	56c40413          	addi	s0,s0,1388 # 80049010 <excpt>
    80005aac:	4785                	li	a5,1
    80005aae:	00043717          	auipc	a4,0x43
    80005ab2:	58073d23          	sd	zero,1434(a4) # 80049048 <excpt+0x38>
    80005ab6:	00f41023          	sh	a5,0(s0)
    80005aba:	0330000f          	fence	rw,rw
    asm volatile(
    80005abe:	4781                	li	a5,0
    80005ac0:	6007c7f3          	.insn	4, 0x6007c7f3
    uint64_t tmp = hlvb(0);

    TEST_ASSERT("vu hlvb leads to virtual instruction exception",
    80005ac4:	08200593          	li	a1,130
    80005ac8:	00023617          	auipc	a2,0x23
    80005acc:	26860613          	addi	a2,a2,616 # 80028d30 <__func__.0+0x12d0>
    80005ad0:	00022517          	auipc	a0,0x22
    80005ad4:	28850513          	addi	a0,a0,648 # 80027d58 <__func__.0+0x2f8>
    80005ad8:	21e200ef          	jal	80025cf6 <printf>
    80005adc:	00043797          	auipc	a5,0x43
    80005ae0:	5357c783          	lbu	a5,1333(a5) # 80049011 <excpt+0x1>
    80005ae4:	00022597          	auipc	a1,0x22
    80005ae8:	24c58593          	addi	a1,a1,588 # 80027d30 <__func__.0+0x2d0>
    80005aec:	cf89                	beqz	a5,80005b06 <virtual_instruction_7+0x8e>
    80005aee:	6418                	ld	a4,8(s0)
    80005af0:	47d9                	li	a5,22
    80005af2:	00022597          	auipc	a1,0x22
    80005af6:	22e58593          	addi	a1,a1,558 # 80027d20 <__func__.0+0x2c0>
    80005afa:	00f70663          	beq	a4,a5,80005b06 <virtual_instruction_7+0x8e>
    80005afe:	00022597          	auipc	a1,0x22
    80005b02:	23258593          	addi	a1,a1,562 # 80027d30 <__func__.0+0x2d0>
    80005b06:	00022517          	auipc	a0,0x22
    80005b0a:	26a50513          	addi	a0,a0,618 # 80027d70 <__func__.0+0x310>
    80005b0e:	1e8200ef          	jal	80025cf6 <printf>
    80005b12:	00043797          	auipc	a5,0x43
    80005b16:	4ff7c783          	lbu	a5,1279(a5) # 80049011 <excpt+0x1>
    80005b1a:	c789                	beqz	a5,80005b24 <virtual_instruction_7+0xac>
    80005b1c:	6418                	ld	a4,8(s0)
    80005b1e:	47d9                	li	a5,22
    80005b20:	00f70c63          	beq	a4,a5,80005b38 <virtual_instruction_7+0xc0>
    80005b24:	00022517          	auipc	a0,0x22
    80005b28:	25450513          	addi	a0,a0,596 # 80027d78 <__func__.0+0x318>
    80005b2c:	1ca200ef          	jal	80025cf6 <printf>
    80005b30:	02900513          	li	a0,41
    80005b34:	7cd1e0ef          	jal	80024b00 <putchar>
    80005b38:	4529                	li	a0,10
    80005b3a:	7c71e0ef          	jal	80024b00 <putchar>
    80005b3e:	00043797          	auipc	a5,0x43
    80005b42:	4d37c783          	lbu	a5,1235(a5) # 80049011 <excpt+0x1>
    80005b46:	4481                	li	s1,0
    80005b48:	c789                	beqz	a5,80005b52 <virtual_instruction_7+0xda>
    80005b4a:	6404                	ld	s1,8(s0)
    80005b4c:	14a9                	addi	s1,s1,-22
    80005b4e:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005b52:	4501                	li	a0,0
    80005b54:	8a2fb0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005b58:	0330000f          	fence	rw,rw
    80005b5c:	4785                	li	a5,1
    80005b5e:	00043717          	auipc	a4,0x43
    80005b62:	4e073523          	sd	zero,1258(a4) # 80049048 <excpt+0x38>
    80005b66:	00f41023          	sh	a5,0(s0)
    80005b6a:	0330000f          	fence	rw,rw
    asm volatile(
    80005b6e:	4781                	li	a5,0
    80005b70:	6017c7f3          	.insn	4, 0x6017c7f3
     tmp = hlvbu(0);

    TEST_ASSERT("vu hlvbu leads to virtual instruction exception",
    80005b74:	08200593          	li	a1,130
    80005b78:	00023617          	auipc	a2,0x23
    80005b7c:	1e860613          	addi	a2,a2,488 # 80028d60 <__func__.0+0x1300>
    80005b80:	00022517          	auipc	a0,0x22
    80005b84:	1d850513          	addi	a0,a0,472 # 80027d58 <__func__.0+0x2f8>
    80005b88:	16e200ef          	jal	80025cf6 <printf>
    80005b8c:	00043797          	auipc	a5,0x43
    80005b90:	4857c783          	lbu	a5,1157(a5) # 80049011 <excpt+0x1>
    80005b94:	00022597          	auipc	a1,0x22
    80005b98:	19c58593          	addi	a1,a1,412 # 80027d30 <__func__.0+0x2d0>
    80005b9c:	cf89                	beqz	a5,80005bb6 <virtual_instruction_7+0x13e>
    80005b9e:	6418                	ld	a4,8(s0)
    80005ba0:	47d9                	li	a5,22
    80005ba2:	00022597          	auipc	a1,0x22
    80005ba6:	17e58593          	addi	a1,a1,382 # 80027d20 <__func__.0+0x2c0>
    80005baa:	00f70663          	beq	a4,a5,80005bb6 <virtual_instruction_7+0x13e>
    80005bae:	00022597          	auipc	a1,0x22
    80005bb2:	18258593          	addi	a1,a1,386 # 80027d30 <__func__.0+0x2d0>
    80005bb6:	00022517          	auipc	a0,0x22
    80005bba:	1ba50513          	addi	a0,a0,442 # 80027d70 <__func__.0+0x310>
    80005bbe:	138200ef          	jal	80025cf6 <printf>
    80005bc2:	00043797          	auipc	a5,0x43
    80005bc6:	44f7c783          	lbu	a5,1103(a5) # 80049011 <excpt+0x1>
    80005bca:	c789                	beqz	a5,80005bd4 <virtual_instruction_7+0x15c>
    80005bcc:	6418                	ld	a4,8(s0)
    80005bce:	47d9                	li	a5,22
    80005bd0:	00f70c63          	beq	a4,a5,80005be8 <virtual_instruction_7+0x170>
    80005bd4:	00022517          	auipc	a0,0x22
    80005bd8:	1a450513          	addi	a0,a0,420 # 80027d78 <__func__.0+0x318>
    80005bdc:	11a200ef          	jal	80025cf6 <printf>
    80005be0:	02900513          	li	a0,41
    80005be4:	71d1e0ef          	jal	80024b00 <putchar>
    80005be8:	4529                	li	a0,10
    80005bea:	7171e0ef          	jal	80024b00 <putchar>
    80005bee:	c881                	beqz	s1,80005bfe <virtual_instruction_7+0x186>
    80005bf0:	00043797          	auipc	a5,0x43
    80005bf4:	4217c783          	lbu	a5,1057(a5) # 80049011 <excpt+0x1>
    80005bf8:	4481                	li	s1,0
    80005bfa:	54079c63          	bnez	a5,80006152 <virtual_instruction_7+0x6da>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005bfe:	4501                	li	a0,0
    80005c00:	ff7fa0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005c04:	0330000f          	fence	rw,rw
    80005c08:	4785                	li	a5,1
    80005c0a:	00043717          	auipc	a4,0x43
    80005c0e:	42073f23          	sd	zero,1086(a4) # 80049048 <excpt+0x38>
    80005c12:	00f41023          	sh	a5,0(s0)
    80005c16:	0330000f          	fence	rw,rw
    asm volatile(
    80005c1a:	4781                	li	a5,0
    80005c1c:	6407c7f3          	.insn	4, 0x6407c7f3
     tmp = hlvh(0);

    TEST_ASSERT("vu hlvh leads to virtual instruction exception",
    80005c20:	08200593          	li	a1,130
    80005c24:	00023617          	auipc	a2,0x23
    80005c28:	16c60613          	addi	a2,a2,364 # 80028d90 <__func__.0+0x1330>
    80005c2c:	00022517          	auipc	a0,0x22
    80005c30:	12c50513          	addi	a0,a0,300 # 80027d58 <__func__.0+0x2f8>
    80005c34:	0c2200ef          	jal	80025cf6 <printf>
    80005c38:	00043797          	auipc	a5,0x43
    80005c3c:	3d97c783          	lbu	a5,985(a5) # 80049011 <excpt+0x1>
    80005c40:	00022597          	auipc	a1,0x22
    80005c44:	0f058593          	addi	a1,a1,240 # 80027d30 <__func__.0+0x2d0>
    80005c48:	cf89                	beqz	a5,80005c62 <virtual_instruction_7+0x1ea>
    80005c4a:	6418                	ld	a4,8(s0)
    80005c4c:	47d9                	li	a5,22
    80005c4e:	00022597          	auipc	a1,0x22
    80005c52:	0d258593          	addi	a1,a1,210 # 80027d20 <__func__.0+0x2c0>
    80005c56:	00f70663          	beq	a4,a5,80005c62 <virtual_instruction_7+0x1ea>
    80005c5a:	00022597          	auipc	a1,0x22
    80005c5e:	0d658593          	addi	a1,a1,214 # 80027d30 <__func__.0+0x2d0>
    80005c62:	00022517          	auipc	a0,0x22
    80005c66:	10e50513          	addi	a0,a0,270 # 80027d70 <__func__.0+0x310>
    80005c6a:	08c200ef          	jal	80025cf6 <printf>
    80005c6e:	00043797          	auipc	a5,0x43
    80005c72:	3a37c783          	lbu	a5,931(a5) # 80049011 <excpt+0x1>
    80005c76:	c789                	beqz	a5,80005c80 <virtual_instruction_7+0x208>
    80005c78:	6418                	ld	a4,8(s0)
    80005c7a:	47d9                	li	a5,22
    80005c7c:	00f70c63          	beq	a4,a5,80005c94 <virtual_instruction_7+0x21c>
    80005c80:	00022517          	auipc	a0,0x22
    80005c84:	0f850513          	addi	a0,a0,248 # 80027d78 <__func__.0+0x318>
    80005c88:	06e200ef          	jal	80025cf6 <printf>
    80005c8c:	02900513          	li	a0,41
    80005c90:	6711e0ef          	jal	80024b00 <putchar>
    80005c94:	4529                	li	a0,10
    80005c96:	66b1e0ef          	jal	80024b00 <putchar>
    80005c9a:	c881                	beqz	s1,80005caa <virtual_instruction_7+0x232>
    80005c9c:	00043797          	auipc	a5,0x43
    80005ca0:	3757c783          	lbu	a5,885(a5) # 80049011 <excpt+0x1>
    80005ca4:	4481                	li	s1,0
    80005ca6:	4c079063          	bnez	a5,80006166 <virtual_instruction_7+0x6ee>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005caa:	4501                	li	a0,0
    80005cac:	f4bfa0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005cb0:	0330000f          	fence	rw,rw
    80005cb4:	4785                	li	a5,1
    80005cb6:	00043717          	auipc	a4,0x43
    80005cba:	38073923          	sd	zero,914(a4) # 80049048 <excpt+0x38>
    80005cbe:	00f41023          	sh	a5,0(s0)
    80005cc2:	0330000f          	fence	rw,rw
    asm volatile(
    80005cc6:	4781                	li	a5,0
    80005cc8:	6807c7f3          	.insn	4, 0x6807c7f3
     tmp = hlvw(0);

    TEST_ASSERT("vu hlvw leads to virtual instruction exception",
    80005ccc:	08200593          	li	a1,130
    80005cd0:	00023617          	auipc	a2,0x23
    80005cd4:	0f060613          	addi	a2,a2,240 # 80028dc0 <__func__.0+0x1360>
    80005cd8:	00022517          	auipc	a0,0x22
    80005cdc:	08050513          	addi	a0,a0,128 # 80027d58 <__func__.0+0x2f8>
    80005ce0:	016200ef          	jal	80025cf6 <printf>
    80005ce4:	00043797          	auipc	a5,0x43
    80005ce8:	32d7c783          	lbu	a5,813(a5) # 80049011 <excpt+0x1>
    80005cec:	00022597          	auipc	a1,0x22
    80005cf0:	04458593          	addi	a1,a1,68 # 80027d30 <__func__.0+0x2d0>
    80005cf4:	cf89                	beqz	a5,80005d0e <virtual_instruction_7+0x296>
    80005cf6:	6418                	ld	a4,8(s0)
    80005cf8:	47d9                	li	a5,22
    80005cfa:	00022597          	auipc	a1,0x22
    80005cfe:	02658593          	addi	a1,a1,38 # 80027d20 <__func__.0+0x2c0>
    80005d02:	00f70663          	beq	a4,a5,80005d0e <virtual_instruction_7+0x296>
    80005d06:	00022597          	auipc	a1,0x22
    80005d0a:	02a58593          	addi	a1,a1,42 # 80027d30 <__func__.0+0x2d0>
    80005d0e:	00022517          	auipc	a0,0x22
    80005d12:	06250513          	addi	a0,a0,98 # 80027d70 <__func__.0+0x310>
    80005d16:	7e11f0ef          	jal	80025cf6 <printf>
    80005d1a:	00043797          	auipc	a5,0x43
    80005d1e:	2f77c783          	lbu	a5,759(a5) # 80049011 <excpt+0x1>
    80005d22:	c789                	beqz	a5,80005d2c <virtual_instruction_7+0x2b4>
    80005d24:	6418                	ld	a4,8(s0)
    80005d26:	47d9                	li	a5,22
    80005d28:	00f70c63          	beq	a4,a5,80005d40 <virtual_instruction_7+0x2c8>
    80005d2c:	00022517          	auipc	a0,0x22
    80005d30:	04c50513          	addi	a0,a0,76 # 80027d78 <__func__.0+0x318>
    80005d34:	7c31f0ef          	jal	80025cf6 <printf>
    80005d38:	02900513          	li	a0,41
    80005d3c:	5c51e0ef          	jal	80024b00 <putchar>
    80005d40:	4529                	li	a0,10
    80005d42:	5bf1e0ef          	jal	80024b00 <putchar>
    80005d46:	c881                	beqz	s1,80005d56 <virtual_instruction_7+0x2de>
    80005d48:	00043797          	auipc	a5,0x43
    80005d4c:	2c97c783          	lbu	a5,713(a5) # 80049011 <excpt+0x1>
    80005d50:	4481                	li	s1,0
    80005d52:	40079563          	bnez	a5,8000615c <virtual_instruction_7+0x6e4>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005d56:	4501                	li	a0,0
    80005d58:	e9ffa0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005d5c:	0330000f          	fence	rw,rw
    80005d60:	4785                	li	a5,1
    80005d62:	00043717          	auipc	a4,0x43
    80005d66:	2e073323          	sd	zero,742(a4) # 80049048 <excpt+0x38>
    80005d6a:	00f41023          	sh	a5,0(s0)
    80005d6e:	0330000f          	fence	rw,rw
    asm volatile(
    80005d72:	4781                	li	a5,0
    80005d74:	6c07c7f3          	.insn	4, 0x6c07c7f3
     tmp = hlvd(0);

    TEST_ASSERT("vu hlvd leads to virtual instruction exception",
    80005d78:	08200593          	li	a1,130
    80005d7c:	00023617          	auipc	a2,0x23
    80005d80:	07460613          	addi	a2,a2,116 # 80028df0 <__func__.0+0x1390>
    80005d84:	00022517          	auipc	a0,0x22
    80005d88:	fd450513          	addi	a0,a0,-44 # 80027d58 <__func__.0+0x2f8>
    80005d8c:	76b1f0ef          	jal	80025cf6 <printf>
    80005d90:	00043797          	auipc	a5,0x43
    80005d94:	2817c783          	lbu	a5,641(a5) # 80049011 <excpt+0x1>
    80005d98:	00022597          	auipc	a1,0x22
    80005d9c:	f9858593          	addi	a1,a1,-104 # 80027d30 <__func__.0+0x2d0>
    80005da0:	cf89                	beqz	a5,80005dba <virtual_instruction_7+0x342>
    80005da2:	6418                	ld	a4,8(s0)
    80005da4:	47d9                	li	a5,22
    80005da6:	00022597          	auipc	a1,0x22
    80005daa:	f7a58593          	addi	a1,a1,-134 # 80027d20 <__func__.0+0x2c0>
    80005dae:	00f70663          	beq	a4,a5,80005dba <virtual_instruction_7+0x342>
    80005db2:	00022597          	auipc	a1,0x22
    80005db6:	f7e58593          	addi	a1,a1,-130 # 80027d30 <__func__.0+0x2d0>
    80005dba:	00022517          	auipc	a0,0x22
    80005dbe:	fb650513          	addi	a0,a0,-74 # 80027d70 <__func__.0+0x310>
    80005dc2:	7351f0ef          	jal	80025cf6 <printf>
    80005dc6:	00043797          	auipc	a5,0x43
    80005dca:	24b7c783          	lbu	a5,587(a5) # 80049011 <excpt+0x1>
    80005dce:	c789                	beqz	a5,80005dd8 <virtual_instruction_7+0x360>
    80005dd0:	6418                	ld	a4,8(s0)
    80005dd2:	47d9                	li	a5,22
    80005dd4:	00f70c63          	beq	a4,a5,80005dec <virtual_instruction_7+0x374>
    80005dd8:	00022517          	auipc	a0,0x22
    80005ddc:	fa050513          	addi	a0,a0,-96 # 80027d78 <__func__.0+0x318>
    80005de0:	7171f0ef          	jal	80025cf6 <printf>
    80005de4:	02900513          	li	a0,41
    80005de8:	5191e0ef          	jal	80024b00 <putchar>
    80005dec:	4529                	li	a0,10
    80005dee:	5131e0ef          	jal	80024b00 <putchar>
    80005df2:	c881                	beqz	s1,80005e02 <virtual_instruction_7+0x38a>
    80005df4:	00043797          	auipc	a5,0x43
    80005df8:	21d7c783          	lbu	a5,541(a5) # 80049011 <excpt+0x1>
    80005dfc:	4481                	li	s1,0
    80005dfe:	36079e63          	bnez	a5,8000617a <virtual_instruction_7+0x702>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005e02:	4501                	li	a0,0
    80005e04:	df3fa0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005e08:	0330000f          	fence	rw,rw
    80005e0c:	4785                	li	a5,1
    80005e0e:	00043717          	auipc	a4,0x43
    80005e12:	22073d23          	sd	zero,570(a4) # 80049048 <excpt+0x38>
    80005e16:	00f41023          	sh	a5,0(s0)
    80005e1a:	0330000f          	fence	rw,rw
    asm volatile(
    80005e1e:	37ab77b7          	lui	a5,0x37ab7
    80005e22:	078a                	slli	a5,a5,0x2
    80005e24:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005e28:	4701                	li	a4,0
    80005e2a:	62f74073          	.insn	4, 0x62f74073
    hsvb(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005e2e:	640c                	ld	a1,8(s0)
    80005e30:	00023517          	auipc	a0,0x23
    80005e34:	a5850513          	addi	a0,a0,-1448 # 80028888 <__func__.0+0xe28>
    80005e38:	6bf1f0ef          	jal	80025cf6 <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005e3c:	08200593          	li	a1,130
    80005e40:	00023617          	auipc	a2,0x23
    80005e44:	fe060613          	addi	a2,a2,-32 # 80028e20 <__func__.0+0x13c0>
    80005e48:	00022517          	auipc	a0,0x22
    80005e4c:	f1050513          	addi	a0,a0,-240 # 80027d58 <__func__.0+0x2f8>
    80005e50:	6a71f0ef          	jal	80025cf6 <printf>
    80005e54:	00043797          	auipc	a5,0x43
    80005e58:	1bd7c783          	lbu	a5,445(a5) # 80049011 <excpt+0x1>
    80005e5c:	00022597          	auipc	a1,0x22
    80005e60:	ed458593          	addi	a1,a1,-300 # 80027d30 <__func__.0+0x2d0>
    80005e64:	cf89                	beqz	a5,80005e7e <virtual_instruction_7+0x406>
    80005e66:	6418                	ld	a4,8(s0)
    80005e68:	47d9                	li	a5,22
    80005e6a:	00022597          	auipc	a1,0x22
    80005e6e:	eb658593          	addi	a1,a1,-330 # 80027d20 <__func__.0+0x2c0>
    80005e72:	00f70663          	beq	a4,a5,80005e7e <virtual_instruction_7+0x406>
    80005e76:	00022597          	auipc	a1,0x22
    80005e7a:	eba58593          	addi	a1,a1,-326 # 80027d30 <__func__.0+0x2d0>
    80005e7e:	00022517          	auipc	a0,0x22
    80005e82:	ef250513          	addi	a0,a0,-270 # 80027d70 <__func__.0+0x310>
    80005e86:	6711f0ef          	jal	80025cf6 <printf>
    80005e8a:	00043797          	auipc	a5,0x43
    80005e8e:	1877c783          	lbu	a5,391(a5) # 80049011 <excpt+0x1>
    80005e92:	c789                	beqz	a5,80005e9c <virtual_instruction_7+0x424>
    80005e94:	6418                	ld	a4,8(s0)
    80005e96:	47d9                	li	a5,22
    80005e98:	00f70c63          	beq	a4,a5,80005eb0 <virtual_instruction_7+0x438>
    80005e9c:	00022517          	auipc	a0,0x22
    80005ea0:	edc50513          	addi	a0,a0,-292 # 80027d78 <__func__.0+0x318>
    80005ea4:	6531f0ef          	jal	80025cf6 <printf>
    80005ea8:	02900513          	li	a0,41
    80005eac:	4551e0ef          	jal	80024b00 <putchar>
    80005eb0:	4529                	li	a0,10
    80005eb2:	44f1e0ef          	jal	80024b00 <putchar>
    80005eb6:	c881                	beqz	s1,80005ec6 <virtual_instruction_7+0x44e>
    80005eb8:	00043797          	auipc	a5,0x43
    80005ebc:	1597c783          	lbu	a5,345(a5) # 80049011 <excpt+0x1>
    80005ec0:	4481                	li	s1,0
    80005ec2:	2a079763          	bnez	a5,80006170 <virtual_instruction_7+0x6f8>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005ec6:	4501                	li	a0,0
    80005ec8:	d2ffa0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005ecc:	0330000f          	fence	rw,rw
    80005ed0:	4785                	li	a5,1
    80005ed2:	00043717          	auipc	a4,0x43
    80005ed6:	16073b23          	sd	zero,374(a4) # 80049048 <excpt+0x38>
    80005eda:	00f41023          	sh	a5,0(s0)
    80005ede:	0330000f          	fence	rw,rw
    asm volatile(
    80005ee2:	37ab77b7          	lui	a5,0x37ab7
    80005ee6:	078a                	slli	a5,a5,0x2
    80005ee8:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005eec:	4701                	li	a4,0
    80005eee:	6ef74073          	.insn	4, 0x6ef74073
    hsvd(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005ef2:	640c                	ld	a1,8(s0)
    80005ef4:	00023517          	auipc	a0,0x23
    80005ef8:	99450513          	addi	a0,a0,-1644 # 80028888 <__func__.0+0xe28>
    80005efc:	5fb1f0ef          	jal	80025cf6 <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005f00:	08200593          	li	a1,130
    80005f04:	00023617          	auipc	a2,0x23
    80005f08:	f1c60613          	addi	a2,a2,-228 # 80028e20 <__func__.0+0x13c0>
    80005f0c:	00022517          	auipc	a0,0x22
    80005f10:	e4c50513          	addi	a0,a0,-436 # 80027d58 <__func__.0+0x2f8>
    80005f14:	5e31f0ef          	jal	80025cf6 <printf>
    80005f18:	00043797          	auipc	a5,0x43
    80005f1c:	0f97c783          	lbu	a5,249(a5) # 80049011 <excpt+0x1>
    80005f20:	00022597          	auipc	a1,0x22
    80005f24:	e1058593          	addi	a1,a1,-496 # 80027d30 <__func__.0+0x2d0>
    80005f28:	cf89                	beqz	a5,80005f42 <virtual_instruction_7+0x4ca>
    80005f2a:	6418                	ld	a4,8(s0)
    80005f2c:	47d9                	li	a5,22
    80005f2e:	00022597          	auipc	a1,0x22
    80005f32:	df258593          	addi	a1,a1,-526 # 80027d20 <__func__.0+0x2c0>
    80005f36:	00f70663          	beq	a4,a5,80005f42 <virtual_instruction_7+0x4ca>
    80005f3a:	00022597          	auipc	a1,0x22
    80005f3e:	df658593          	addi	a1,a1,-522 # 80027d30 <__func__.0+0x2d0>
    80005f42:	00022517          	auipc	a0,0x22
    80005f46:	e2e50513          	addi	a0,a0,-466 # 80027d70 <__func__.0+0x310>
    80005f4a:	5ad1f0ef          	jal	80025cf6 <printf>
    80005f4e:	00043797          	auipc	a5,0x43
    80005f52:	0c37c783          	lbu	a5,195(a5) # 80049011 <excpt+0x1>
    80005f56:	c789                	beqz	a5,80005f60 <virtual_instruction_7+0x4e8>
    80005f58:	6418                	ld	a4,8(s0)
    80005f5a:	47d9                	li	a5,22
    80005f5c:	00f70c63          	beq	a4,a5,80005f74 <virtual_instruction_7+0x4fc>
    80005f60:	00022517          	auipc	a0,0x22
    80005f64:	e1850513          	addi	a0,a0,-488 # 80027d78 <__func__.0+0x318>
    80005f68:	58f1f0ef          	jal	80025cf6 <printf>
    80005f6c:	02900513          	li	a0,41
    80005f70:	3911e0ef          	jal	80024b00 <putchar>
    80005f74:	4529                	li	a0,10
    80005f76:	38b1e0ef          	jal	80024b00 <putchar>
    80005f7a:	c881                	beqz	s1,80005f8a <virtual_instruction_7+0x512>
    80005f7c:	00043797          	auipc	a5,0x43
    80005f80:	0957c783          	lbu	a5,149(a5) # 80049011 <excpt+0x1>
    80005f84:	4481                	li	s1,0
    80005f86:	20079463          	bnez	a5,8000618e <virtual_instruction_7+0x716>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005f8a:	4501                	li	a0,0
    80005f8c:	c6bfa0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005f90:	0330000f          	fence	rw,rw
    80005f94:	4785                	li	a5,1
    80005f96:	00043717          	auipc	a4,0x43
    80005f9a:	0a073923          	sd	zero,178(a4) # 80049048 <excpt+0x38>
    80005f9e:	00f41023          	sh	a5,0(s0)
    80005fa2:	0330000f          	fence	rw,rw
    asm volatile(
    80005fa6:	37ab77b7          	lui	a5,0x37ab7
    80005faa:	078a                	slli	a5,a5,0x2
    80005fac:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005fb0:	4701                	li	a4,0
    80005fb2:	6af74073          	.insn	4, 0x6af74073
    hsvw(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005fb6:	640c                	ld	a1,8(s0)
    80005fb8:	00023517          	auipc	a0,0x23
    80005fbc:	8d050513          	addi	a0,a0,-1840 # 80028888 <__func__.0+0xe28>
    80005fc0:	5371f0ef          	jal	80025cf6 <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005fc4:	08200593          	li	a1,130
    80005fc8:	00023617          	auipc	a2,0x23
    80005fcc:	e5860613          	addi	a2,a2,-424 # 80028e20 <__func__.0+0x13c0>
    80005fd0:	00022517          	auipc	a0,0x22
    80005fd4:	d8850513          	addi	a0,a0,-632 # 80027d58 <__func__.0+0x2f8>
    80005fd8:	51f1f0ef          	jal	80025cf6 <printf>
    80005fdc:	00043797          	auipc	a5,0x43
    80005fe0:	0357c783          	lbu	a5,53(a5) # 80049011 <excpt+0x1>
    80005fe4:	00022597          	auipc	a1,0x22
    80005fe8:	d4c58593          	addi	a1,a1,-692 # 80027d30 <__func__.0+0x2d0>
    80005fec:	cf89                	beqz	a5,80006006 <virtual_instruction_7+0x58e>
    80005fee:	6418                	ld	a4,8(s0)
    80005ff0:	47d9                	li	a5,22
    80005ff2:	00022597          	auipc	a1,0x22
    80005ff6:	d2e58593          	addi	a1,a1,-722 # 80027d20 <__func__.0+0x2c0>
    80005ffa:	00f70663          	beq	a4,a5,80006006 <virtual_instruction_7+0x58e>
    80005ffe:	00022597          	auipc	a1,0x22
    80006002:	d3258593          	addi	a1,a1,-718 # 80027d30 <__func__.0+0x2d0>
    80006006:	00022517          	auipc	a0,0x22
    8000600a:	d6a50513          	addi	a0,a0,-662 # 80027d70 <__func__.0+0x310>
    8000600e:	4e91f0ef          	jal	80025cf6 <printf>
    80006012:	00043797          	auipc	a5,0x43
    80006016:	fff7c783          	lbu	a5,-1(a5) # 80049011 <excpt+0x1>
    8000601a:	c789                	beqz	a5,80006024 <virtual_instruction_7+0x5ac>
    8000601c:	6418                	ld	a4,8(s0)
    8000601e:	47d9                	li	a5,22
    80006020:	00f70c63          	beq	a4,a5,80006038 <virtual_instruction_7+0x5c0>
    80006024:	00022517          	auipc	a0,0x22
    80006028:	d5450513          	addi	a0,a0,-684 # 80027d78 <__func__.0+0x318>
    8000602c:	4cb1f0ef          	jal	80025cf6 <printf>
    80006030:	02900513          	li	a0,41
    80006034:	2cd1e0ef          	jal	80024b00 <putchar>
    80006038:	4529                	li	a0,10
    8000603a:	2c71e0ef          	jal	80024b00 <putchar>
    8000603e:	c881                	beqz	s1,8000604e <virtual_instruction_7+0x5d6>
    80006040:	00043797          	auipc	a5,0x43
    80006044:	fd17c783          	lbu	a5,-47(a5) # 80049011 <excpt+0x1>
    80006048:	4481                	li	s1,0
    8000604a:	12079d63          	bnez	a5,80006184 <virtual_instruction_7+0x70c>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    8000604e:	4501                	li	a0,0
    80006050:	ba7fa0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006054:	0330000f          	fence	rw,rw
    80006058:	4785                	li	a5,1
    8000605a:	00043717          	auipc	a4,0x43
    8000605e:	fe073723          	sd	zero,-18(a4) # 80049048 <excpt+0x38>
    80006062:	00f41023          	sh	a5,0(s0)
    80006066:	0330000f          	fence	rw,rw
    asm volatile(
    8000606a:	37ab77b7          	lui	a5,0x37ab7
    8000606e:	078a                	slli	a5,a5,0x2
    80006070:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80006074:	4701                	li	a4,0
    80006076:	66f74073          	.insn	4, 0x66f74073
    hsvh(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    8000607a:	640c                	ld	a1,8(s0)
    8000607c:	00023517          	auipc	a0,0x23
    80006080:	80c50513          	addi	a0,a0,-2036 # 80028888 <__func__.0+0xe28>
    80006084:	4731f0ef          	jal	80025cf6 <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80006088:	08200593          	li	a1,130
    8000608c:	00023617          	auipc	a2,0x23
    80006090:	d9460613          	addi	a2,a2,-620 # 80028e20 <__func__.0+0x13c0>
    80006094:	00022517          	auipc	a0,0x22
    80006098:	cc450513          	addi	a0,a0,-828 # 80027d58 <__func__.0+0x2f8>
    8000609c:	45b1f0ef          	jal	80025cf6 <printf>
    800060a0:	00043797          	auipc	a5,0x43
    800060a4:	f717c783          	lbu	a5,-143(a5) # 80049011 <excpt+0x1>
    800060a8:	00022597          	auipc	a1,0x22
    800060ac:	c8858593          	addi	a1,a1,-888 # 80027d30 <__func__.0+0x2d0>
    800060b0:	cf89                	beqz	a5,800060ca <virtual_instruction_7+0x652>
    800060b2:	6418                	ld	a4,8(s0)
    800060b4:	47d9                	li	a5,22
    800060b6:	00022597          	auipc	a1,0x22
    800060ba:	c6a58593          	addi	a1,a1,-918 # 80027d20 <__func__.0+0x2c0>
    800060be:	00f70663          	beq	a4,a5,800060ca <virtual_instruction_7+0x652>
    800060c2:	00022597          	auipc	a1,0x22
    800060c6:	c6e58593          	addi	a1,a1,-914 # 80027d30 <__func__.0+0x2d0>
    800060ca:	00022517          	auipc	a0,0x22
    800060ce:	ca650513          	addi	a0,a0,-858 # 80027d70 <__func__.0+0x310>
    800060d2:	4251f0ef          	jal	80025cf6 <printf>
    800060d6:	00043797          	auipc	a5,0x43
    800060da:	f3b7c783          	lbu	a5,-197(a5) # 80049011 <excpt+0x1>
    800060de:	c789                	beqz	a5,800060e8 <virtual_instruction_7+0x670>
    800060e0:	6418                	ld	a4,8(s0)
    800060e2:	47d9                	li	a5,22
    800060e4:	00f70c63          	beq	a4,a5,800060fc <virtual_instruction_7+0x684>
    800060e8:	00022517          	auipc	a0,0x22
    800060ec:	c9050513          	addi	a0,a0,-880 # 80027d78 <__func__.0+0x318>
    800060f0:	4071f0ef          	jal	80025cf6 <printf>
    800060f4:	02900513          	li	a0,41
    800060f8:	2091e0ef          	jal	80024b00 <putchar>
    800060fc:	4529                	li	a0,10
    800060fe:	2031e0ef          	jal	80024b00 <putchar>
    80006102:	c095                	beqz	s1,80006126 <virtual_instruction_7+0x6ae>
    80006104:	00043497          	auipc	s1,0x43
    80006108:	f0d4c483          	lbu	s1,-243(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    TEST_END();
    8000610c:	00022597          	auipc	a1,0x22
    80006110:	c2458593          	addi	a1,a1,-988 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80006114:	cc91                	beqz	s1,80006130 <virtual_instruction_7+0x6b8>
    80006116:	6418                	ld	a4,8(s0)
    80006118:	47d9                	li	a5,22
    TEST_END();
    8000611a:	00022597          	auipc	a1,0x22
    8000611e:	c0658593          	addi	a1,a1,-1018 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80006122:	00f70763          	beq	a4,a5,80006130 <virtual_instruction_7+0x6b8>
    80006126:	4481                	li	s1,0
    TEST_END();
    80006128:	00022597          	auipc	a1,0x22
    8000612c:	c0858593          	addi	a1,a1,-1016 # 80027d30 <__func__.0+0x2d0>
    80006130:	00022517          	auipc	a0,0x22
    80006134:	ca850513          	addi	a0,a0,-856 # 80027dd8 <__func__.0+0x378>
    80006138:	3bf1f0ef          	jal	80025cf6 <printf>
    8000613c:	4511                	li	a0,4
    8000613e:	ab9fa0ef          	jal	80000bf6 <goto_priv>
    80006142:	b6afb0ef          	jal	800014ac <reset_state>
}
    80006146:	60e2                	ld	ra,24(sp)
    80006148:	6442                	ld	s0,16(sp)
    8000614a:	8526                	mv	a0,s1
    8000614c:	64a2                	ld	s1,8(sp)
    8000614e:	6105                	addi	sp,sp,32
    80006150:	8082                	ret
    TEST_ASSERT("vu hlvbu leads to virtual instruction exception",
    80006152:	6404                	ld	s1,8(s0)
    80006154:	14a9                	addi	s1,s1,-22
    80006156:	0014b493          	seqz	s1,s1
    8000615a:	b455                	j	80005bfe <virtual_instruction_7+0x186>
    TEST_ASSERT("vu hlvw leads to virtual instruction exception",
    8000615c:	6404                	ld	s1,8(s0)
    8000615e:	14a9                	addi	s1,s1,-22
    80006160:	0014b493          	seqz	s1,s1
    80006164:	becd                	j	80005d56 <virtual_instruction_7+0x2de>
    TEST_ASSERT("vu hlvh leads to virtual instruction exception",
    80006166:	6404                	ld	s1,8(s0)
    80006168:	14a9                	addi	s1,s1,-22
    8000616a:	0014b493          	seqz	s1,s1
    8000616e:	be35                	j	80005caa <virtual_instruction_7+0x232>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80006170:	6404                	ld	s1,8(s0)
    80006172:	14a9                	addi	s1,s1,-22
    80006174:	0014b493          	seqz	s1,s1
    80006178:	b3b9                	j	80005ec6 <virtual_instruction_7+0x44e>
    TEST_ASSERT("vu hlvd leads to virtual instruction exception",
    8000617a:	6404                	ld	s1,8(s0)
    8000617c:	14a9                	addi	s1,s1,-22
    8000617e:	0014b493          	seqz	s1,s1
    80006182:	b141                	j	80005e02 <virtual_instruction_7+0x38a>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80006184:	6404                	ld	s1,8(s0)
    80006186:	14a9                	addi	s1,s1,-22
    80006188:	0014b493          	seqz	s1,s1
    8000618c:	b5c9                	j	8000604e <virtual_instruction_7+0x5d6>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    8000618e:	6404                	ld	s1,8(s0)
    80006190:	14a9                	addi	s1,s1,-22
    80006192:	0014b493          	seqz	s1,s1
    80006196:	bbd5                	j	80005f8a <virtual_instruction_7+0x512>

0000000080006198 <virtual_instruction_8>:

    ////////////////////////////////////////////////////////////////////////
//在mstatus.TW=0  时执行WFI   (即使允许执行WFI指令),或者执行S级监管级指令 (SRET或者SFENCE)   , 引发虚拟异常(在虚拟用户模式下，软件不应该 由执行这些监管模式指令的权限)
bool virtual_instruction_8() {
    80006198:	1101                	addi	sp,sp,-32

    TEST_START();
    8000619a:	00020597          	auipc	a1,0x20
    8000619e:	39e58593          	addi	a1,a1,926 # 80026538 <__func__.4>
    800061a2:	00022517          	auipc	a0,0x22
    800061a6:	b9e50513          	addi	a0,a0,-1122 # 80027d40 <__func__.0+0x2e0>
bool virtual_instruction_8() {
    800061aa:	ec06                	sd	ra,24(sp)
    800061ac:	e822                	sd	s0,16(sp)
    800061ae:	e426                	sd	s1,8(sp)
    TEST_START();
    800061b0:	3471f0ef          	jal	80025cf6 <printf>
    800061b4:	4529                	li	a0,10
    800061b6:	14b1e0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    800061ba:	4511                	li	a0,4
    800061bc:	a3bfa0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTSR);
    800061c0:	004007b7          	lui	a5,0x400
    800061c4:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    800061c8:	002007b7          	lui	a5,0x200
    800061cc:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_VU);
    800061d0:	4501                	li	a0,0
    800061d2:	a25fa0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800061d6:	0330000f          	fence	rw,rw
    800061da:	00043417          	auipc	s0,0x43
    800061de:	e3640413          	addi	s0,s0,-458 # 80049010 <excpt>
    800061e2:	4785                	li	a5,1
    800061e4:	00043717          	auipc	a4,0x43
    800061e8:	e6073223          	sd	zero,-412(a4) # 80049048 <excpt+0x38>
    800061ec:	00f41023          	sh	a5,0(s0)
    800061f0:	0330000f          	fence	rw,rw
    asm volatile(
    800061f4:	10200073          	sret
    sret();
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    800061f8:	08200593          	li	a1,130
    800061fc:	00023617          	auipc	a2,0x23
    80006200:	c5460613          	addi	a2,a2,-940 # 80028e50 <__func__.0+0x13f0>
    80006204:	00022517          	auipc	a0,0x22
    80006208:	b5450513          	addi	a0,a0,-1196 # 80027d58 <__func__.0+0x2f8>
    8000620c:	2eb1f0ef          	jal	80025cf6 <printf>
    80006210:	00043797          	auipc	a5,0x43
    80006214:	e017c783          	lbu	a5,-511(a5) # 80049011 <excpt+0x1>
    80006218:	00022597          	auipc	a1,0x22
    8000621c:	b1858593          	addi	a1,a1,-1256 # 80027d30 <__func__.0+0x2d0>
    80006220:	cf89                	beqz	a5,8000623a <virtual_instruction_8+0xa2>
    80006222:	6418                	ld	a4,8(s0)
    80006224:	47d9                	li	a5,22
    80006226:	00022597          	auipc	a1,0x22
    8000622a:	afa58593          	addi	a1,a1,-1286 # 80027d20 <__func__.0+0x2c0>
    8000622e:	00f70663          	beq	a4,a5,8000623a <virtual_instruction_8+0xa2>
    80006232:	00022597          	auipc	a1,0x22
    80006236:	afe58593          	addi	a1,a1,-1282 # 80027d30 <__func__.0+0x2d0>
    8000623a:	00022517          	auipc	a0,0x22
    8000623e:	b3650513          	addi	a0,a0,-1226 # 80027d70 <__func__.0+0x310>
    80006242:	2b51f0ef          	jal	80025cf6 <printf>
    80006246:	00043797          	auipc	a5,0x43
    8000624a:	dcb7c783          	lbu	a5,-565(a5) # 80049011 <excpt+0x1>
    8000624e:	c789                	beqz	a5,80006258 <virtual_instruction_8+0xc0>
    80006250:	6418                	ld	a4,8(s0)
    80006252:	47d9                	li	a5,22
    80006254:	00f70c63          	beq	a4,a5,8000626c <virtual_instruction_8+0xd4>
    80006258:	00022517          	auipc	a0,0x22
    8000625c:	b2050513          	addi	a0,a0,-1248 # 80027d78 <__func__.0+0x318>
    80006260:	2971f0ef          	jal	80025cf6 <printf>
    80006264:	02900513          	li	a0,41
    80006268:	0991e0ef          	jal	80024b00 <putchar>
    8000626c:	4529                	li	a0,10
    8000626e:	0931e0ef          	jal	80024b00 <putchar>
    80006272:	00043497          	auipc	s1,0x43
    80006276:	d9f4c483          	lbu	s1,-609(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  
 
    TEST_END();
    8000627a:	00022597          	auipc	a1,0x22
    8000627e:	ab658593          	addi	a1,a1,-1354 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    80006282:	cc91                	beqz	s1,8000629e <virtual_instruction_8+0x106>
    80006284:	6418                	ld	a4,8(s0)
    80006286:	47d9                	li	a5,22
    TEST_END();
    80006288:	00022597          	auipc	a1,0x22
    8000628c:	a9858593          	addi	a1,a1,-1384 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    80006290:	00f70763          	beq	a4,a5,8000629e <virtual_instruction_8+0x106>
    80006294:	4481                	li	s1,0
    TEST_END();
    80006296:	00022597          	auipc	a1,0x22
    8000629a:	a9a58593          	addi	a1,a1,-1382 # 80027d30 <__func__.0+0x2d0>
    8000629e:	00022517          	auipc	a0,0x22
    800062a2:	b3a50513          	addi	a0,a0,-1222 # 80027dd8 <__func__.0+0x378>
    800062a6:	2511f0ef          	jal	80025cf6 <printf>
    800062aa:	4511                	li	a0,4
    800062ac:	94bfa0ef          	jal	80000bf6 <goto_priv>
    800062b0:	9fcfb0ef          	jal	800014ac <reset_state>
}
    800062b4:	60e2                	ld	ra,24(sp)
    800062b6:	6442                	ld	s0,16(sp)
    800062b8:	8526                	mv	a0,s1
    800062ba:	64a2                	ld	s1,8(sp)
    800062bc:	6105                	addi	sp,sp,32
    800062be:	8082                	ret

00000000800062c0 <virtual_instruction_9>:
bool virtual_instruction_9() {
    800062c0:	1101                	addi	sp,sp,-32

    TEST_START();
    800062c2:	00020597          	auipc	a1,0x20
    800062c6:	28e58593          	addi	a1,a1,654 # 80026550 <__func__.3>
    800062ca:	00022517          	auipc	a0,0x22
    800062ce:	a7650513          	addi	a0,a0,-1418 # 80027d40 <__func__.0+0x2e0>
bool virtual_instruction_9() {
    800062d2:	ec06                	sd	ra,24(sp)
    800062d4:	e822                	sd	s0,16(sp)
    800062d6:	e426                	sd	s1,8(sp)
    TEST_START();
    800062d8:	21f1f0ef          	jal	80025cf6 <printf>
    800062dc:	4529                	li	a0,10
    800062de:	0231e0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    800062e2:	4511                	li	a0,4
    800062e4:	913fa0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800062e8:	002007b7          	lui	a5,0x200
    800062ec:	3007b073          	csrc	mstatus,a5
    
    goto_priv(PRIV_VU);
    800062f0:	4501                	li	a0,0
    800062f2:	905fa0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800062f6:	0330000f          	fence	rw,rw
    800062fa:	00043417          	auipc	s0,0x43
    800062fe:	d1640413          	addi	s0,s0,-746 # 80049010 <excpt>
    80006302:	4785                	li	a5,1
    80006304:	00043717          	auipc	a4,0x43
    80006308:	d4073223          	sd	zero,-700(a4) # 80049048 <excpt+0x38>
    8000630c:	00f41023          	sh	a5,0(s0)
    80006310:	0330000f          	fence	rw,rw
    asm volatile ("sfence.vma \n\t");
    80006314:	12000073          	sfence.vma
    sfence();
    
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    80006318:	08200593          	li	a1,130
    8000631c:	00023617          	auipc	a2,0x23
    80006320:	b7c60613          	addi	a2,a2,-1156 # 80028e98 <__func__.0+0x1438>
    80006324:	00022517          	auipc	a0,0x22
    80006328:	a3450513          	addi	a0,a0,-1484 # 80027d58 <__func__.0+0x2f8>
    8000632c:	1cb1f0ef          	jal	80025cf6 <printf>
    80006330:	00043797          	auipc	a5,0x43
    80006334:	ce17c783          	lbu	a5,-799(a5) # 80049011 <excpt+0x1>
    80006338:	00022597          	auipc	a1,0x22
    8000633c:	9f858593          	addi	a1,a1,-1544 # 80027d30 <__func__.0+0x2d0>
    80006340:	cf89                	beqz	a5,8000635a <virtual_instruction_9+0x9a>
    80006342:	6418                	ld	a4,8(s0)
    80006344:	47d9                	li	a5,22
    80006346:	00022597          	auipc	a1,0x22
    8000634a:	9da58593          	addi	a1,a1,-1574 # 80027d20 <__func__.0+0x2c0>
    8000634e:	00f70663          	beq	a4,a5,8000635a <virtual_instruction_9+0x9a>
    80006352:	00022597          	auipc	a1,0x22
    80006356:	9de58593          	addi	a1,a1,-1570 # 80027d30 <__func__.0+0x2d0>
    8000635a:	00022517          	auipc	a0,0x22
    8000635e:	a1650513          	addi	a0,a0,-1514 # 80027d70 <__func__.0+0x310>
    80006362:	1951f0ef          	jal	80025cf6 <printf>
    80006366:	00043797          	auipc	a5,0x43
    8000636a:	cab7c783          	lbu	a5,-853(a5) # 80049011 <excpt+0x1>
    8000636e:	c789                	beqz	a5,80006378 <virtual_instruction_9+0xb8>
    80006370:	6418                	ld	a4,8(s0)
    80006372:	47d9                	li	a5,22
    80006374:	00f70c63          	beq	a4,a5,8000638c <virtual_instruction_9+0xcc>
    80006378:	00022517          	auipc	a0,0x22
    8000637c:	a0050513          	addi	a0,a0,-1536 # 80027d78 <__func__.0+0x318>
    80006380:	1771f0ef          	jal	80025cf6 <printf>
    80006384:	02900513          	li	a0,41
    80006388:	7781e0ef          	jal	80024b00 <putchar>
    8000638c:	4529                	li	a0,10
    8000638e:	7721e0ef          	jal	80024b00 <putchar>
    80006392:	00043497          	auipc	s1,0x43
    80006396:	c7f4c483          	lbu	s1,-897(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_END();
    8000639a:	00022597          	auipc	a1,0x22
    8000639e:	99658593          	addi	a1,a1,-1642 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    800063a2:	cc91                	beqz	s1,800063be <virtual_instruction_9+0xfe>
    800063a4:	6418                	ld	a4,8(s0)
    800063a6:	47d9                	li	a5,22
    TEST_END();
    800063a8:	00022597          	auipc	a1,0x22
    800063ac:	97858593          	addi	a1,a1,-1672 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    800063b0:	00f70763          	beq	a4,a5,800063be <virtual_instruction_9+0xfe>
    800063b4:	4481                	li	s1,0
    TEST_END();
    800063b6:	00022597          	auipc	a1,0x22
    800063ba:	97a58593          	addi	a1,a1,-1670 # 80027d30 <__func__.0+0x2d0>
    800063be:	00022517          	auipc	a0,0x22
    800063c2:	a1a50513          	addi	a0,a0,-1510 # 80027dd8 <__func__.0+0x378>
    800063c6:	1311f0ef          	jal	80025cf6 <printf>
    800063ca:	4511                	li	a0,4
    800063cc:	82bfa0ef          	jal	80000bf6 <goto_priv>
    800063d0:	8dcfb0ef          	jal	800014ac <reset_state>
}
    800063d4:	60e2                	ld	ra,24(sp)
    800063d6:	6442                	ld	s0,16(sp)
    800063d8:	8526                	mv	a0,s1
    800063da:	64a2                	ld	s1,8(sp)
    800063dc:	6105                	addi	sp,sp,32
    800063de:	8082                	ret

00000000800063e0 <virtual_instruction_10>:
bool virtual_instruction_10() {
    800063e0:	1101                	addi	sp,sp,-32

    TEST_START();
    800063e2:	00020597          	auipc	a1,0x20
    800063e6:	18658593          	addi	a1,a1,390 # 80026568 <__func__.2>
    800063ea:	00022517          	auipc	a0,0x22
    800063ee:	95650513          	addi	a0,a0,-1706 # 80027d40 <__func__.0+0x2e0>
bool virtual_instruction_10() {
    800063f2:	ec06                	sd	ra,24(sp)
    800063f4:	e822                	sd	s0,16(sp)
    800063f6:	e426                	sd	s1,8(sp)
    TEST_START();
    800063f8:	0ff1f0ef          	jal	80025cf6 <printf>
    800063fc:	4529                	li	a0,10
    800063fe:	7021e0ef          	jal	80024b00 <putchar>


    goto_priv(PRIV_M);
    80006402:	4511                	li	a0,4
    80006404:	ff2fa0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);
    80006408:	002007b7          	lui	a5,0x200
    8000640c:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    80006410:	3007b073          	csrc	mstatus,a5
    
    goto_priv(PRIV_VU);
    80006414:	4501                	li	a0,0
    80006416:	fe0fa0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000641a:	0330000f          	fence	rw,rw
    8000641e:	00043417          	auipc	s0,0x43
    80006422:	bf240413          	addi	s0,s0,-1038 # 80049010 <excpt>
    80006426:	4785                	li	a5,1
    80006428:	00043717          	auipc	a4,0x43
    8000642c:	c2073023          	sd	zero,-992(a4) # 80049048 <excpt+0x38>
    80006430:	00f41023          	sh	a5,0(s0)
    80006434:	0330000f          	fence	rw,rw
        :: "r"(value), "r"(addr) : "memory");
    return value;
}

static inline void wfi() {
    asm ("wfi" ::: "memory");
    80006438:	10500073          	wfi
    wfi();
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    8000643c:	08200593          	li	a1,130
    80006440:	00023617          	auipc	a2,0x23
    80006444:	aa060613          	addi	a2,a2,-1376 # 80028ee0 <__func__.0+0x1480>
    80006448:	00022517          	auipc	a0,0x22
    8000644c:	91050513          	addi	a0,a0,-1776 # 80027d58 <__func__.0+0x2f8>
    80006450:	0a71f0ef          	jal	80025cf6 <printf>
    80006454:	00043797          	auipc	a5,0x43
    80006458:	bbd7c783          	lbu	a5,-1091(a5) # 80049011 <excpt+0x1>
    8000645c:	00022597          	auipc	a1,0x22
    80006460:	8d458593          	addi	a1,a1,-1836 # 80027d30 <__func__.0+0x2d0>
    80006464:	cf89                	beqz	a5,8000647e <virtual_instruction_10+0x9e>
    80006466:	6418                	ld	a4,8(s0)
    80006468:	47d9                	li	a5,22
    8000646a:	00022597          	auipc	a1,0x22
    8000646e:	8b658593          	addi	a1,a1,-1866 # 80027d20 <__func__.0+0x2c0>
    80006472:	00f70663          	beq	a4,a5,8000647e <virtual_instruction_10+0x9e>
    80006476:	00022597          	auipc	a1,0x22
    8000647a:	8ba58593          	addi	a1,a1,-1862 # 80027d30 <__func__.0+0x2d0>
    8000647e:	00022517          	auipc	a0,0x22
    80006482:	8f250513          	addi	a0,a0,-1806 # 80027d70 <__func__.0+0x310>
    80006486:	0711f0ef          	jal	80025cf6 <printf>
    8000648a:	00043797          	auipc	a5,0x43
    8000648e:	b877c783          	lbu	a5,-1145(a5) # 80049011 <excpt+0x1>
    80006492:	c789                	beqz	a5,8000649c <virtual_instruction_10+0xbc>
    80006494:	6418                	ld	a4,8(s0)
    80006496:	47d9                	li	a5,22
    80006498:	00f70c63          	beq	a4,a5,800064b0 <virtual_instruction_10+0xd0>
    8000649c:	00022517          	auipc	a0,0x22
    800064a0:	8dc50513          	addi	a0,a0,-1828 # 80027d78 <__func__.0+0x318>
    800064a4:	0531f0ef          	jal	80025cf6 <printf>
    800064a8:	02900513          	li	a0,41
    800064ac:	6541e0ef          	jal	80024b00 <putchar>
    800064b0:	4529                	li	a0,10
    800064b2:	64e1e0ef          	jal	80024b00 <putchar>
    800064b6:	00043497          	auipc	s1,0x43
    800064ba:	b5b4c483          	lbu	s1,-1189(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_END();
    800064be:	00022597          	auipc	a1,0x22
    800064c2:	87258593          	addi	a1,a1,-1934 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    800064c6:	cc91                	beqz	s1,800064e2 <virtual_instruction_10+0x102>
    800064c8:	6418                	ld	a4,8(s0)
    800064ca:	47d9                	li	a5,22
    TEST_END();
    800064cc:	00022597          	auipc	a1,0x22
    800064d0:	85458593          	addi	a1,a1,-1964 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    800064d4:	00f70763          	beq	a4,a5,800064e2 <virtual_instruction_10+0x102>
    800064d8:	4481                	li	s1,0
    TEST_END();
    800064da:	00022597          	auipc	a1,0x22
    800064de:	85658593          	addi	a1,a1,-1962 # 80027d30 <__func__.0+0x2d0>
    800064e2:	00022517          	auipc	a0,0x22
    800064e6:	8f650513          	addi	a0,a0,-1802 # 80027dd8 <__func__.0+0x378>
    800064ea:	00d1f0ef          	jal	80025cf6 <printf>
    800064ee:	4511                	li	a0,4
    800064f0:	f06fa0ef          	jal	80000bf6 <goto_priv>
    800064f4:	fb9fa0ef          	jal	800014ac <reset_state>
}
    800064f8:	60e2                	ld	ra,24(sp)
    800064fa:	6442                	ld	s0,16(sp)
    800064fc:	8526                	mv	a0,s1
    800064fe:	64a2                	ld	s1,8(sp)
    80006500:	6105                	addi	sp,sp,32
    80006502:	8082                	ret

0000000080006504 <virtual_instruction_11>:
    ////////////////////////////////////////////////////////////////////////

bool virtual_instruction_11() {
    80006504:	1101                	addi	sp,sp,-32

    TEST_START();    
    80006506:	00020597          	auipc	a1,0x20
    8000650a:	07a58593          	addi	a1,a1,122 # 80026580 <__func__.1>
    8000650e:	00022517          	auipc	a0,0x22
    80006512:	83250513          	addi	a0,a0,-1998 # 80027d40 <__func__.0+0x2e0>
bool virtual_instruction_11() {
    80006516:	ec06                	sd	ra,24(sp)
    80006518:	e822                	sd	s0,16(sp)
    8000651a:	e426                	sd	s1,8(sp)
    TEST_START();    
    8000651c:	7da1f0ef          	jal	80025cf6 <printf>
    80006520:	4529                	li	a0,10
    80006522:	5de1e0ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    80006526:	4511                	li	a0,4
    80006528:	ecefa0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTVM);
    8000652c:	001007b7          	lui	a5,0x100
    80006530:	6007b073          	csrc	hstatus,a5
    CSRC(CSR_HSTATUS, MSTATUS_TVM);
    80006534:	6007b073          	csrc	hstatus,a5
    goto_priv(PRIV_VU);
    80006538:	4501                	li	a0,0
    8000653a:	ebcfa0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000653e:	0330000f          	fence	rw,rw
    80006542:	00043417          	auipc	s0,0x43
    80006546:	ace40413          	addi	s0,s0,-1330 # 80049010 <excpt>
    8000654a:	4785                	li	a5,1
    8000654c:	00043717          	auipc	a4,0x43
    80006550:	ae073e23          	sd	zero,-1284(a4) # 80049048 <excpt+0x38>
    80006554:	00f41023          	sh	a5,0(s0)
    80006558:	0330000f          	fence	rw,rw
    CSRS(CSR_VSIE,1ULL << 1);
    8000655c:	20416073          	csrsi	vsie,2
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    80006560:	08200593          	li	a1,130
    80006564:	00023617          	auipc	a2,0x23
    80006568:	9c460613          	addi	a2,a2,-1596 # 80028f28 <__func__.0+0x14c8>
    8000656c:	00021517          	auipc	a0,0x21
    80006570:	7ec50513          	addi	a0,a0,2028 # 80027d58 <__func__.0+0x2f8>
    80006574:	7821f0ef          	jal	80025cf6 <printf>
    80006578:	00043797          	auipc	a5,0x43
    8000657c:	a997c783          	lbu	a5,-1383(a5) # 80049011 <excpt+0x1>
    80006580:	00021597          	auipc	a1,0x21
    80006584:	7b058593          	addi	a1,a1,1968 # 80027d30 <__func__.0+0x2d0>
    80006588:	cf89                	beqz	a5,800065a2 <virtual_instruction_11+0x9e>
    8000658a:	6418                	ld	a4,8(s0)
    8000658c:	47d9                	li	a5,22
    8000658e:	00021597          	auipc	a1,0x21
    80006592:	79258593          	addi	a1,a1,1938 # 80027d20 <__func__.0+0x2c0>
    80006596:	00f70663          	beq	a4,a5,800065a2 <virtual_instruction_11+0x9e>
    8000659a:	00021597          	auipc	a1,0x21
    8000659e:	79658593          	addi	a1,a1,1942 # 80027d30 <__func__.0+0x2d0>
    800065a2:	00021517          	auipc	a0,0x21
    800065a6:	7ce50513          	addi	a0,a0,1998 # 80027d70 <__func__.0+0x310>
    800065aa:	74c1f0ef          	jal	80025cf6 <printf>
    800065ae:	00043797          	auipc	a5,0x43
    800065b2:	a637c783          	lbu	a5,-1437(a5) # 80049011 <excpt+0x1>
    800065b6:	c789                	beqz	a5,800065c0 <virtual_instruction_11+0xbc>
    800065b8:	6418                	ld	a4,8(s0)
    800065ba:	47d9                	li	a5,22
    800065bc:	00f70c63          	beq	a4,a5,800065d4 <virtual_instruction_11+0xd0>
    800065c0:	00021517          	auipc	a0,0x21
    800065c4:	7b850513          	addi	a0,a0,1976 # 80027d78 <__func__.0+0x318>
    800065c8:	72e1f0ef          	jal	80025cf6 <printf>
    800065cc:	02900513          	li	a0,41
    800065d0:	5301e0ef          	jal	80024b00 <putchar>
    800065d4:	4529                	li	a0,10
    800065d6:	52a1e0ef          	jal	80024b00 <putchar>
    800065da:	00043497          	auipc	s1,0x43
    800065de:	a374c483          	lbu	s1,-1481(s1) # 80049011 <excpt+0x1>
    //     excpt.cause == CAUSE_VRTI
    // );      



    TEST_END(); 
    800065e2:	00021597          	auipc	a1,0x21
    800065e6:	74e58593          	addi	a1,a1,1870 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    800065ea:	cc91                	beqz	s1,80006606 <virtual_instruction_11+0x102>
    800065ec:	6418                	ld	a4,8(s0)
    800065ee:	47d9                	li	a5,22
    TEST_END(); 
    800065f0:	00021597          	auipc	a1,0x21
    800065f4:	73058593          	addi	a1,a1,1840 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    800065f8:	00f70763          	beq	a4,a5,80006606 <virtual_instruction_11+0x102>
    800065fc:	4481                	li	s1,0
    TEST_END(); 
    800065fe:	00021597          	auipc	a1,0x21
    80006602:	73258593          	addi	a1,a1,1842 # 80027d30 <__func__.0+0x2d0>
    80006606:	00021517          	auipc	a0,0x21
    8000660a:	7d250513          	addi	a0,a0,2002 # 80027dd8 <__func__.0+0x378>
    8000660e:	6e81f0ef          	jal	80025cf6 <printf>
    80006612:	4511                	li	a0,4
    80006614:	de2fa0ef          	jal	80000bf6 <goto_priv>
    80006618:	e95fa0ef          	jal	800014ac <reset_state>
}
    8000661c:	60e2                	ld	ra,24(sp)
    8000661e:	6442                	ld	s0,16(sp)
    80006620:	8526                	mv	a0,s1
    80006622:	64a2                	ld	s1,8(sp)
    80006624:	6105                	addi	sp,sp,32
    80006626:	8082                	ret

0000000080006628 <virtual_instruction_12>:

bool virtual_instruction_12() {
    80006628:	1101                	addi	sp,sp,-32

    TEST_START();
    8000662a:	00020597          	auipc	a1,0x20
    8000662e:	f6e58593          	addi	a1,a1,-146 # 80026598 <__func__.0>
    80006632:	00021517          	auipc	a0,0x21
    80006636:	70e50513          	addi	a0,a0,1806 # 80027d40 <__func__.0+0x2e0>
bool virtual_instruction_12() {
    8000663a:	ec06                	sd	ra,24(sp)
    8000663c:	e822                	sd	s0,16(sp)
    8000663e:	e426                	sd	s1,8(sp)
    TEST_START();
    80006640:	6b61f0ef          	jal	80025cf6 <printf>
    80006644:	4529                	li	a0,10
    80006646:	4ba1e0ef          	jal	80024b00 <putchar>


    goto_priv(PRIV_VU);
    8000664a:	4501                	li	a0,0
    8000664c:	daafa0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006650:	0330000f          	fence	rw,rw
    80006654:	00043417          	auipc	s0,0x43
    80006658:	9bc40413          	addi	s0,s0,-1604 # 80049010 <excpt>
    8000665c:	4785                	li	a5,1
    8000665e:	00043717          	auipc	a4,0x43
    80006662:	9e073523          	sd	zero,-1558(a4) # 80049048 <excpt+0x38>
    80006666:	00f41023          	sh	a5,0(s0)
    8000666a:	0330000f          	fence	rw,rw

    CSRR(CSR_SATP);
    8000666e:	180027f3          	csrr	a5,satp
    TEST_ASSERT("vu mode access satp leads to virtual instruction exception",
    80006672:	08200593          	li	a1,130
    80006676:	00023617          	auipc	a2,0x23
    8000667a:	91260613          	addi	a2,a2,-1774 # 80028f88 <__func__.0+0x1528>
    8000667e:	00021517          	auipc	a0,0x21
    80006682:	6da50513          	addi	a0,a0,1754 # 80027d58 <__func__.0+0x2f8>
    80006686:	6701f0ef          	jal	80025cf6 <printf>
    8000668a:	00043797          	auipc	a5,0x43
    8000668e:	9877c783          	lbu	a5,-1657(a5) # 80049011 <excpt+0x1>
    80006692:	00021597          	auipc	a1,0x21
    80006696:	69e58593          	addi	a1,a1,1694 # 80027d30 <__func__.0+0x2d0>
    8000669a:	cf89                	beqz	a5,800066b4 <virtual_instruction_12+0x8c>
    8000669c:	6418                	ld	a4,8(s0)
    8000669e:	47d9                	li	a5,22
    800066a0:	00021597          	auipc	a1,0x21
    800066a4:	68058593          	addi	a1,a1,1664 # 80027d20 <__func__.0+0x2c0>
    800066a8:	00f70663          	beq	a4,a5,800066b4 <virtual_instruction_12+0x8c>
    800066ac:	00021597          	auipc	a1,0x21
    800066b0:	68458593          	addi	a1,a1,1668 # 80027d30 <__func__.0+0x2d0>
    800066b4:	00021517          	auipc	a0,0x21
    800066b8:	6bc50513          	addi	a0,a0,1724 # 80027d70 <__func__.0+0x310>
    800066bc:	63a1f0ef          	jal	80025cf6 <printf>
    800066c0:	00043797          	auipc	a5,0x43
    800066c4:	9517c783          	lbu	a5,-1711(a5) # 80049011 <excpt+0x1>
    800066c8:	c789                	beqz	a5,800066d2 <virtual_instruction_12+0xaa>
    800066ca:	6418                	ld	a4,8(s0)
    800066cc:	47d9                	li	a5,22
    800066ce:	00f70c63          	beq	a4,a5,800066e6 <virtual_instruction_12+0xbe>
    800066d2:	00021517          	auipc	a0,0x21
    800066d6:	6a650513          	addi	a0,a0,1702 # 80027d78 <__func__.0+0x318>
    800066da:	61c1f0ef          	jal	80025cf6 <printf>
    800066de:	02900513          	li	a0,41
    800066e2:	41e1e0ef          	jal	80024b00 <putchar>
    800066e6:	4529                	li	a0,10
    800066e8:	4181e0ef          	jal	80024b00 <putchar>
    800066ec:	00043497          	auipc	s1,0x43
    800066f0:	9254c483          	lbu	s1,-1755(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    800066f4:	00021597          	auipc	a1,0x21
    800066f8:	63c58593          	addi	a1,a1,1596 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vu mode access satp leads to virtual instruction exception",
    800066fc:	cc91                	beqz	s1,80006718 <virtual_instruction_12+0xf0>
    800066fe:	6418                	ld	a4,8(s0)
    80006700:	47d9                	li	a5,22
    TEST_END();
    80006702:	00021597          	auipc	a1,0x21
    80006706:	61e58593          	addi	a1,a1,1566 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vu mode access satp leads to virtual instruction exception",
    8000670a:	00f70763          	beq	a4,a5,80006718 <virtual_instruction_12+0xf0>
    8000670e:	4481                	li	s1,0
    TEST_END();
    80006710:	00021597          	auipc	a1,0x21
    80006714:	62058593          	addi	a1,a1,1568 # 80027d30 <__func__.0+0x2d0>
    80006718:	00021517          	auipc	a0,0x21
    8000671c:	6c050513          	addi	a0,a0,1728 # 80027dd8 <__func__.0+0x378>
    80006720:	5d61f0ef          	jal	80025cf6 <printf>
    80006724:	4511                	li	a0,4
    80006726:	cd0fa0ef          	jal	80000bf6 <goto_priv>
    8000672a:	d83fa0ef          	jal	800014ac <reset_state>
}
    8000672e:	60e2                	ld	ra,24(sp)
    80006730:	6442                	ld	s0,16(sp)
    80006732:	8526                	mv	a0,s1
    80006734:	64a2                	ld	s1,8(sp)
    80006736:	6105                	addi	sp,sp,32
    80006738:	8082                	ret

000000008000673a <hfence_test>:
#include <rvh_test.h>
#include <page_tables.h> 

bool hfence_test() {
    8000673a:	7179                	addi	sp,sp,-48

    TEST_START();
    8000673c:	00020597          	auipc	a1,0x20
    80006740:	e7458593          	addi	a1,a1,-396 # 800265b0 <__func__.2>
    80006744:	00021517          	auipc	a0,0x21
    80006748:	5fc50513          	addi	a0,a0,1532 # 80027d40 <__func__.0+0x2e0>
bool hfence_test() {
    8000674c:	f406                	sd	ra,40(sp)
    8000674e:	ec26                	sd	s1,24(sp)
    80006750:	f022                	sd	s0,32(sp)
    80006752:	e84a                	sd	s2,16(sp)
    80006754:	e44e                	sd	s3,8(sp)
    TEST_START();
    80006756:	5a01f0ef          	jal	80025cf6 <printf>
    8000675a:	4529                	li	a0,10
    8000675c:	3a41e0ef          	jal	80024b00 <putchar>
    80006760:	0002a617          	auipc	a2,0x2a
    80006764:	d2063603          	ld	a2,-736(a2) # 80030480 <__func__.0+0x8a20>
    80006768:	0002a697          	auipc	a3,0x2a
    8000676c:	d206b683          	ld	a3,-736(a3) # 80030488 <__func__.0+0x8a28>
    80006770:	2201b737          	lui	a4,0x2201b
    80006774:	000887b7          	lui	a5,0x88
    80006778:	070a                	slli	a4,a4,0x2
    8000677a:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    8000677e:	e310                	sd	a2,0(a4)
    80006780:	07b2                	slli	a5,a5,0xc
    80006782:	e394                	sd	a3,0(a5)
    write64(phys_page_base(SWITCH1), 0x111111111);
    write64(phys_page_base(SWITCH2), 0x222222222);

    //////////////////////////////////////////////////////////////////////

    goto_priv(PRIV_HS);
    80006784:	450d                	li	a0,3
    80006786:	c70fa0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    8000678a:	4509                	li	a0,2
    asm volatile(
    8000678c:	4001b4b7          	lui	s1,0x4001b
    80006790:	b86fa0ef          	jal	80000b16 <set_prev_priv>
    80006794:	048a                	slli	s1,s1,0x2
    hpt_init();
    80006796:	88cfa0ef          	jal	80000822 <hpt_init>
    vspt_init();
    8000679a:	f17f90ef          	jal	800006b0 <vspt_init>
    8000679e:	6c04c9f3          	.insn	4, 0x6c04c9f3
    vaddr = vs_page_base(SWITCH1);

    val = hlvd(vaddr);
    cond = true;
    vspt_switch();
    800067a2:	b2cfa0ef          	jal	80000ace <vspt_switch>
    800067a6:	6c04c473          	.insn	4, 0x6c04c473
    asm volatile(
    800067aa:	22000073          	.insn	4, 0x22000073
    asm volatile(
    800067ae:	6c04c7f3          	.insn	4, 0x6c04c7f3
    cond &= hlvd(vaddr) == val;
    800067b2:	41340433          	sub	s0,s0,s3
    hfence_vvma();
    cond &= hlvd(vaddr) != val;
    800067b6:	413787b3          	sub	a5,a5,s3
    800067ba:	00f037b3          	snez	a5,a5
    800067be:	00143413          	seqz	s0,s0
    800067c2:	8c7d                	and	s0,s0,a5
    hpt_switch();
    800067c4:	b24fa0ef          	jal	80000ae8 <hpt_switch>
    800067c8:	6c04c973          	.insn	4, 0x6c04c973
    asm volatile(
    800067cc:	62000073          	.insn	4, 0x62000073
    asm volatile(
    800067d0:	6c04c4f3          	.insn	4, 0x6c04c4f3
    cond &= hlvd(vaddr) != val;
    800067d4:	41390933          	sub	s2,s2,s3
    800067d8:	01203933          	snez	s2,s2
    hfence_gvma();
    cond &= hlvd(vaddr) == val;
    TEST_ASSERT("hfences correctly invalidate guest tlb entries", cond);
    800067dc:	00022617          	auipc	a2,0x22
    800067e0:	7ec60613          	addi	a2,a2,2028 # 80028fc8 <__func__.0+0x1568>
    800067e4:	08200593          	li	a1,130
    800067e8:	00021517          	auipc	a0,0x21
    800067ec:	57050513          	addi	a0,a0,1392 # 80027d58 <__func__.0+0x2f8>
    800067f0:	01247433          	and	s0,s0,s2
    800067f4:	5021f0ef          	jal	80025cf6 <printf>
    800067f8:	12040863          	beqz	s0,80006928 <hfence_test+0x1ee>
    800067fc:	13349663          	bne	s1,s3,80006928 <hfence_test+0x1ee>
    80006800:	00021597          	auipc	a1,0x21
    80006804:	52058593          	addi	a1,a1,1312 # 80027d20 <__func__.0+0x2c0>
    80006808:	00021517          	auipc	a0,0x21
    8000680c:	56850513          	addi	a0,a0,1384 # 80027d70 <__func__.0+0x310>
    80006810:	4e61f0ef          	jal	80025cf6 <printf>
    80006814:	4529                	li	a0,10
    80006816:	2ea1e0ef          	jal	80024b00 <putchar>
    8000681a:	4485                	li	s1,1

    //////////////////////////////////////////////////////////////////////

    goto_priv(PRIV_HS);
    8000681c:	450d                	li	a0,3
    8000681e:	4001b437          	lui	s0,0x4001b
    80006822:	bd4fa0ef          	jal	80000bf6 <goto_priv>
    80006826:	040a                	slli	s0,s0,0x2
    80006828:	6c044973          	.insn	4, 0x6c044973
    val = hlvd(vaddr);
    cond = true;
    hpt_switch();
    8000682c:	abcfa0ef          	jal	80000ae8 <hpt_switch>
    asm volatile ("sfence.vma \n\t");
    80006830:	12000073          	sfence.vma
    asm volatile(
    80006834:	6c044473          	.insn	4, 0x6c044473
    sfence();
    cond &= hlvd(vaddr) == val;
    TEST_ASSERT("hs sfence doest not affect guest level tlb entries", cond);
    80006838:	00022617          	auipc	a2,0x22
    8000683c:	7c060613          	addi	a2,a2,1984 # 80028ff8 <__func__.0+0x1598>
    80006840:	08200593          	li	a1,130
    80006844:	00021517          	auipc	a0,0x21
    80006848:	51450513          	addi	a0,a0,1300 # 80027d58 <__func__.0+0x2f8>
    8000684c:	4aa1f0ef          	jal	80025cf6 <printf>
    80006850:	13240963          	beq	s0,s2,80006982 <hfence_test+0x248>
    80006854:	00021597          	auipc	a1,0x21
    80006858:	4dc58593          	addi	a1,a1,1244 # 80027d30 <__func__.0+0x2d0>
    8000685c:	00021517          	auipc	a0,0x21
    80006860:	51450513          	addi	a0,a0,1300 # 80027d70 <__func__.0+0x310>
    80006864:	4921f0ef          	jal	80025cf6 <printf>
    80006868:	00021517          	auipc	a0,0x21
    8000686c:	51050513          	addi	a0,a0,1296 # 80027d78 <__func__.0+0x318>
    80006870:	4861f0ef          	jal	80025cf6 <printf>
    80006874:	02900513          	li	a0,41
    80006878:	2881e0ef          	jal	80024b00 <putchar>
    8000687c:	4529                	li	a0,10
    8000687e:	2821e0ef          	jal	80024b00 <putchar>
    80006882:	4481                	li	s1,0
    return *((volatile uint64_t*) addr);
    80006884:	4001b437          	lui	s0,0x4001b

    //////////////////////////////////////////////////////////////////////  

    goto_priv(PRIV_HS);
    80006888:	450d                	li	a0,3
    8000688a:	040a                	slli	s0,s0,0x2
    8000688c:	b6afa0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80006890:	d51f90ef          	jal	800005e0 <hspt_init>
    80006894:	00043903          	ld	s2,0(s0) # 4001b000 <STACK_SIZE+0x3ff1b000>
    vaddr = hs_page_base(SWITCH1);
    val = read64(vaddr);
    cond = true;

    hspt_switch();
    80006898:	a1cfa0ef          	jal	80000ab4 <hspt_switch>
    goto_priv(PRIV_VS);
    8000689c:	4509                	li	a0,2
    8000689e:	b58fa0ef          	jal	80000bf6 <goto_priv>
    asm volatile ("sfence.vma \n\t");
    800068a2:	12000073          	sfence.vma
    sfence();
    goto_priv(PRIV_HS);
    800068a6:	450d                	li	a0,3
    800068a8:	b4efa0ef          	jal	80000bf6 <goto_priv>
    800068ac:	6000                	ld	s0,0(s0)
    cond &= read64(vaddr) == val;
    TEST_ASSERT("vs sfence doest not affect hypervisor level tlb entries", cond);
    800068ae:	00022617          	auipc	a2,0x22
    800068b2:	78260613          	addi	a2,a2,1922 # 80029030 <__func__.0+0x15d0>
    800068b6:	08200593          	li	a1,130
    800068ba:	00021517          	auipc	a0,0x21
    800068be:	49e50513          	addi	a0,a0,1182 # 80027d58 <__func__.0+0x2f8>
    800068c2:	4341f0ef          	jal	80025cf6 <printf>
    800068c6:	09240a63          	beq	s0,s2,8000695a <hfence_test+0x220>
    800068ca:	00021597          	auipc	a1,0x21
    800068ce:	46658593          	addi	a1,a1,1126 # 80027d30 <__func__.0+0x2d0>
    800068d2:	00021517          	auipc	a0,0x21
    800068d6:	49e50513          	addi	a0,a0,1182 # 80027d70 <__func__.0+0x310>
    800068da:	41c1f0ef          	jal	80025cf6 <printf>
    800068de:	00021517          	auipc	a0,0x21
    800068e2:	49a50513          	addi	a0,a0,1178 # 80027d78 <__func__.0+0x318>
    800068e6:	4101f0ef          	jal	80025cf6 <printf>
    800068ea:	02900513          	li	a0,41
    800068ee:	2121e0ef          	jal	80024b00 <putchar>
    800068f2:	4529                	li	a0,10
    800068f4:	20c1e0ef          	jal	80024b00 <putchar>
    800068f8:	4401                	li	s0,0

    //////////////////////////////////////////////////////////////////////


    
    TEST_END();
    800068fa:	00021597          	auipc	a1,0x21
    800068fe:	43658593          	addi	a1,a1,1078 # 80027d30 <__func__.0+0x2d0>
    80006902:	00021517          	auipc	a0,0x21
    80006906:	4d650513          	addi	a0,a0,1238 # 80027dd8 <__func__.0+0x378>
    8000690a:	3ec1f0ef          	jal	80025cf6 <printf>
    8000690e:	4511                	li	a0,4
    80006910:	ae6fa0ef          	jal	80000bf6 <goto_priv>
    80006914:	b99fa0ef          	jal	800014ac <reset_state>
    80006918:	70a2                	ld	ra,40(sp)
    8000691a:	8522                	mv	a0,s0
    8000691c:	7402                	ld	s0,32(sp)
    8000691e:	64e2                	ld	s1,24(sp)
    80006920:	6942                	ld	s2,16(sp)
    80006922:	69a2                	ld	s3,8(sp)
    80006924:	6145                	addi	sp,sp,48
    80006926:	8082                	ret
    TEST_ASSERT("hfences correctly invalidate guest tlb entries", cond);
    80006928:	00021597          	auipc	a1,0x21
    8000692c:	40858593          	addi	a1,a1,1032 # 80027d30 <__func__.0+0x2d0>
    80006930:	00021517          	auipc	a0,0x21
    80006934:	44050513          	addi	a0,a0,1088 # 80027d70 <__func__.0+0x310>
    80006938:	3be1f0ef          	jal	80025cf6 <printf>
    8000693c:	00021517          	auipc	a0,0x21
    80006940:	43c50513          	addi	a0,a0,1084 # 80027d78 <__func__.0+0x318>
    80006944:	3b21f0ef          	jal	80025cf6 <printf>
    80006948:	02900513          	li	a0,41
    8000694c:	1b41e0ef          	jal	80024b00 <putchar>
    80006950:	4529                	li	a0,10
    80006952:	1ae1e0ef          	jal	80024b00 <putchar>
    80006956:	4481                	li	s1,0
    80006958:	b5d1                	j	8000681c <hfence_test+0xe2>
    TEST_ASSERT("vs sfence doest not affect hypervisor level tlb entries", cond);
    8000695a:	00021597          	auipc	a1,0x21
    8000695e:	3c658593          	addi	a1,a1,966 # 80027d20 <__func__.0+0x2c0>
    80006962:	00021517          	auipc	a0,0x21
    80006966:	40e50513          	addi	a0,a0,1038 # 80027d70 <__func__.0+0x310>
    8000696a:	38c1f0ef          	jal	80025cf6 <printf>
    8000696e:	4529                	li	a0,10
    80006970:	1901e0ef          	jal	80024b00 <putchar>
    80006974:	d0d1                	beqz	s1,800068f8 <hfence_test+0x1be>
    80006976:	4405                	li	s0,1
    TEST_END();
    80006978:	00021597          	auipc	a1,0x21
    8000697c:	3a858593          	addi	a1,a1,936 # 80027d20 <__func__.0+0x2c0>
    80006980:	b749                	j	80006902 <hfence_test+0x1c8>
    TEST_ASSERT("hs sfence doest not affect guest level tlb entries", cond);
    80006982:	00021597          	auipc	a1,0x21
    80006986:	39e58593          	addi	a1,a1,926 # 80027d20 <__func__.0+0x2c0>
    8000698a:	00021517          	auipc	a0,0x21
    8000698e:	3e650513          	addi	a0,a0,998 # 80027d70 <__func__.0+0x310>
    80006992:	3641f0ef          	jal	80025cf6 <printf>
    80006996:	4529                	li	a0,10
    80006998:	1681e0ef          	jal	80024b00 <putchar>
    8000699c:	b5e5                	j	80006884 <hfence_test+0x14a>

000000008000699e <wfi_exception_tests_1>:
#include <rvh_test.h>
#include <csrs.h> 
#include <stdio.h>

bool wfi_exception_tests_1() {
    8000699e:	1101                	addi	sp,sp,-32

    TEST_START();
    800069a0:	00020597          	auipc	a1,0x20
    800069a4:	c2058593          	addi	a1,a1,-992 # 800265c0 <__func__.22>
    800069a8:	00021517          	auipc	a0,0x21
    800069ac:	39850513          	addi	a0,a0,920 # 80027d40 <__func__.0+0x2e0>
bool wfi_exception_tests_1() {
    800069b0:	ec06                	sd	ra,24(sp)
    800069b2:	e822                	sd	s0,16(sp)
    800069b4:	e426                	sd	s1,8(sp)
    TEST_START();
    800069b6:	3401f0ef          	jal	80025cf6 <printf>
    800069ba:	4529                	li	a0,10
    800069bc:	1441e0ef          	jal	80024b00 <putchar>

    TEST_SETUP_EXCEPT();
    800069c0:	0330000f          	fence	rw,rw
    800069c4:	00042417          	auipc	s0,0x42
    800069c8:	64c40413          	addi	s0,s0,1612 # 80049010 <excpt>
    800069cc:	4485                	li	s1,1
    800069ce:	00042797          	auipc	a5,0x42
    800069d2:	6607bd23          	sd	zero,1658(a5) # 80049048 <excpt+0x38>
    800069d6:	00941023          	sh	s1,0(s0)
    800069da:	0330000f          	fence	rw,rw

    //mstatus.TW=0时，在u模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    800069de:	4511                	li	a0,4
    800069e0:	a16fa0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800069e4:	002007b7          	lui	a5,0x200
    800069e8:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    800069ec:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    800069f0:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    800069f4:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    800069f8:	60205073          	csrwi	hedeleg,0
    CSRS(CSR_UIE, 0b0100);
    800069fc:	00426073          	csrsi	uie,4
    asm ("wfi" ::: "memory");
    80006a00:	10500073          	wfi
    wfi();

    goto_priv(PRIV_HU);
    80006a04:	8526                	mv	a0,s1
    80006a06:	9f0fa0ef          	jal	80000bf6 <goto_priv>

    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006a0a:	08200593          	li	a1,130
    80006a0e:	00022617          	auipc	a2,0x22
    80006a12:	65a60613          	addi	a2,a2,1626 # 80029068 <__func__.0+0x1608>
    80006a16:	00021517          	auipc	a0,0x21
    80006a1a:	34250513          	addi	a0,a0,834 # 80027d58 <__func__.0+0x2f8>
    80006a1e:	2d81f0ef          	jal	80025cf6 <printf>
    80006a22:	00042797          	auipc	a5,0x42
    80006a26:	5ef7c783          	lbu	a5,1519(a5) # 80049011 <excpt+0x1>
    80006a2a:	00021597          	auipc	a1,0x21
    80006a2e:	30658593          	addi	a1,a1,774 # 80027d30 <__func__.0+0x2d0>
    80006a32:	cf89                	beqz	a5,80006a4c <wfi_exception_tests_1+0xae>
    80006a34:	6418                	ld	a4,8(s0)
    80006a36:	4789                	li	a5,2
    80006a38:	00021597          	auipc	a1,0x21
    80006a3c:	2e858593          	addi	a1,a1,744 # 80027d20 <__func__.0+0x2c0>
    80006a40:	00f70663          	beq	a4,a5,80006a4c <wfi_exception_tests_1+0xae>
    80006a44:	00021597          	auipc	a1,0x21
    80006a48:	2ec58593          	addi	a1,a1,748 # 80027d30 <__func__.0+0x2d0>
    80006a4c:	00021517          	auipc	a0,0x21
    80006a50:	32450513          	addi	a0,a0,804 # 80027d70 <__func__.0+0x310>
    80006a54:	2a21f0ef          	jal	80025cf6 <printf>
    80006a58:	00042797          	auipc	a5,0x42
    80006a5c:	5b97c783          	lbu	a5,1465(a5) # 80049011 <excpt+0x1>
    80006a60:	c789                	beqz	a5,80006a6a <wfi_exception_tests_1+0xcc>
    80006a62:	6418                	ld	a4,8(s0)
    80006a64:	4789                	li	a5,2
    80006a66:	00f70c63          	beq	a4,a5,80006a7e <wfi_exception_tests_1+0xe0>
    80006a6a:	00021517          	auipc	a0,0x21
    80006a6e:	30e50513          	addi	a0,a0,782 # 80027d78 <__func__.0+0x318>
    80006a72:	2841f0ef          	jal	80025cf6 <printf>
    80006a76:	02900513          	li	a0,41
    80006a7a:	0861e0ef          	jal	80024b00 <putchar>
    80006a7e:	4529                	li	a0,10
    80006a80:	0801e0ef          	jal	80024b00 <putchar>
    80006a84:	00042497          	auipc	s1,0x42
    80006a88:	58d4c483          	lbu	s1,1421(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80006a8c:	00021597          	auipc	a1,0x21
    80006a90:	2a458593          	addi	a1,a1,676 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006a94:	cc91                	beqz	s1,80006ab0 <wfi_exception_tests_1+0x112>
    80006a96:	6418                	ld	a4,8(s0)
    80006a98:	4789                	li	a5,2
    TEST_END();
    80006a9a:	00021597          	auipc	a1,0x21
    80006a9e:	28658593          	addi	a1,a1,646 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006aa2:	00f70763          	beq	a4,a5,80006ab0 <wfi_exception_tests_1+0x112>
    80006aa6:	4481                	li	s1,0
    TEST_END();
    80006aa8:	00021597          	auipc	a1,0x21
    80006aac:	28858593          	addi	a1,a1,648 # 80027d30 <__func__.0+0x2d0>
    80006ab0:	00021517          	auipc	a0,0x21
    80006ab4:	32850513          	addi	a0,a0,808 # 80027dd8 <__func__.0+0x378>
    80006ab8:	23e1f0ef          	jal	80025cf6 <printf>
    80006abc:	4511                	li	a0,4
    80006abe:	938fa0ef          	jal	80000bf6 <goto_priv>
    80006ac2:	9ebfa0ef          	jal	800014ac <reset_state>
}
    80006ac6:	60e2                	ld	ra,24(sp)
    80006ac8:	6442                	ld	s0,16(sp)
    80006aca:	8526                	mv	a0,s1
    80006acc:	64a2                	ld	s1,8(sp)
    80006ace:	6105                	addi	sp,sp,32
    80006ad0:	8082                	ret

0000000080006ad2 <wfi_exception_tests_2>:

bool wfi_exception_tests_2() {
    80006ad2:	1101                	addi	sp,sp,-32

    TEST_START();
    80006ad4:	00020597          	auipc	a1,0x20
    80006ad8:	b0458593          	addi	a1,a1,-1276 # 800265d8 <__func__.21>
    80006adc:	00021517          	auipc	a0,0x21
    80006ae0:	26450513          	addi	a0,a0,612 # 80027d40 <__func__.0+0x2e0>
bool wfi_exception_tests_2() {
    80006ae4:	ec06                	sd	ra,24(sp)
    80006ae6:	e822                	sd	s0,16(sp)
    80006ae8:	e426                	sd	s1,8(sp)
    TEST_START();
    80006aea:	20c1f0ef          	jal	80025cf6 <printf>
    80006aee:	4529                	li	a0,10
    80006af0:	0101e0ef          	jal	80024b00 <putchar>

    TEST_SETUP_EXCEPT();
    80006af4:	0330000f          	fence	rw,rw
    80006af8:	00042417          	auipc	s0,0x42
    80006afc:	51840413          	addi	s0,s0,1304 # 80049010 <excpt>
    80006b00:	4485                	li	s1,1
    80006b02:	00042797          	auipc	a5,0x42
    80006b06:	5407b323          	sd	zero,1350(a5) # 80049048 <excpt+0x38>
    80006b0a:	00941023          	sh	s1,0(s0)
    80006b0e:	0330000f          	fence	rw,rw
    //mstatus.TW=0时，在VU模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    80006b12:	4511                	li	a0,4
    80006b14:	8e2fa0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006b18:	002007b7          	lui	a5,0x200
    80006b1c:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006b20:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    80006b24:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80006b28:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    80006b2c:	60205073          	csrwi	hedeleg,0
    TEST_SETUP_EXCEPT();
    80006b30:	0330000f          	fence	rw,rw
    80006b34:	00042797          	auipc	a5,0x42
    80006b38:	5007ba23          	sd	zero,1300(a5) # 80049048 <excpt+0x38>
    80006b3c:	00941023          	sh	s1,0(s0)
    80006b40:	0330000f          	fence	rw,rw
    CSRS(CSR_UIE, 0b0100);
    80006b44:	00426073          	csrsi	uie,4
    80006b48:	10500073          	wfi
    wfi();

    goto_priv(PRIV_VU);
    80006b4c:	4501                	li	a0,0
    80006b4e:	8a8fa0ef          	jal	80000bf6 <goto_priv>
    
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006b52:	08200593          	li	a1,130
    80006b56:	00022617          	auipc	a2,0x22
    80006b5a:	58260613          	addi	a2,a2,1410 # 800290d8 <__func__.0+0x1678>
    80006b5e:	00021517          	auipc	a0,0x21
    80006b62:	1fa50513          	addi	a0,a0,506 # 80027d58 <__func__.0+0x2f8>
    80006b66:	1901f0ef          	jal	80025cf6 <printf>
    80006b6a:	00042797          	auipc	a5,0x42
    80006b6e:	4a77c783          	lbu	a5,1191(a5) # 80049011 <excpt+0x1>
    80006b72:	00021597          	auipc	a1,0x21
    80006b76:	1be58593          	addi	a1,a1,446 # 80027d30 <__func__.0+0x2d0>
    80006b7a:	cf89                	beqz	a5,80006b94 <wfi_exception_tests_2+0xc2>
    80006b7c:	6418                	ld	a4,8(s0)
    80006b7e:	4789                	li	a5,2
    80006b80:	00021597          	auipc	a1,0x21
    80006b84:	1a058593          	addi	a1,a1,416 # 80027d20 <__func__.0+0x2c0>
    80006b88:	00f70663          	beq	a4,a5,80006b94 <wfi_exception_tests_2+0xc2>
    80006b8c:	00021597          	auipc	a1,0x21
    80006b90:	1a458593          	addi	a1,a1,420 # 80027d30 <__func__.0+0x2d0>
    80006b94:	00021517          	auipc	a0,0x21
    80006b98:	1dc50513          	addi	a0,a0,476 # 80027d70 <__func__.0+0x310>
    80006b9c:	15a1f0ef          	jal	80025cf6 <printf>
    80006ba0:	00042797          	auipc	a5,0x42
    80006ba4:	4717c783          	lbu	a5,1137(a5) # 80049011 <excpt+0x1>
    80006ba8:	c789                	beqz	a5,80006bb2 <wfi_exception_tests_2+0xe0>
    80006baa:	6418                	ld	a4,8(s0)
    80006bac:	4789                	li	a5,2
    80006bae:	00f70c63          	beq	a4,a5,80006bc6 <wfi_exception_tests_2+0xf4>
    80006bb2:	00021517          	auipc	a0,0x21
    80006bb6:	1c650513          	addi	a0,a0,454 # 80027d78 <__func__.0+0x318>
    80006bba:	13c1f0ef          	jal	80025cf6 <printf>
    80006bbe:	02900513          	li	a0,41
    80006bc2:	73f1d0ef          	jal	80024b00 <putchar>
    80006bc6:	4529                	li	a0,10
    80006bc8:	7391d0ef          	jal	80024b00 <putchar>
    80006bcc:	00042497          	auipc	s1,0x42
    80006bd0:	4454c483          	lbu	s1,1093(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    TEST_END();
    80006bd4:	00021597          	auipc	a1,0x21
    80006bd8:	15c58593          	addi	a1,a1,348 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006bdc:	cc91                	beqz	s1,80006bf8 <wfi_exception_tests_2+0x126>
    80006bde:	6418                	ld	a4,8(s0)
    80006be0:	4789                	li	a5,2
    TEST_END();
    80006be2:	00021597          	auipc	a1,0x21
    80006be6:	13e58593          	addi	a1,a1,318 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006bea:	00f70763          	beq	a4,a5,80006bf8 <wfi_exception_tests_2+0x126>
    80006bee:	4481                	li	s1,0
    TEST_END();
    80006bf0:	00021597          	auipc	a1,0x21
    80006bf4:	14058593          	addi	a1,a1,320 # 80027d30 <__func__.0+0x2d0>
    80006bf8:	00021517          	auipc	a0,0x21
    80006bfc:	1e050513          	addi	a0,a0,480 # 80027dd8 <__func__.0+0x378>
    80006c00:	0f61f0ef          	jal	80025cf6 <printf>
    80006c04:	4511                	li	a0,4
    80006c06:	ff1f90ef          	jal	80000bf6 <goto_priv>
    80006c0a:	8a3fa0ef          	jal	800014ac <reset_state>
}
    80006c0e:	60e2                	ld	ra,24(sp)
    80006c10:	6442                	ld	s0,16(sp)
    80006c12:	8526                	mv	a0,s1
    80006c14:	64a2                	ld	s1,8(sp)
    80006c16:	6105                	addi	sp,sp,32
    80006c18:	8082                	ret

0000000080006c1a <wfi_exception_tests_3>:

bool wfi_exception_tests_3() {
    80006c1a:	1101                	addi	sp,sp,-32

    TEST_START();
    80006c1c:	00020597          	auipc	a1,0x20
    80006c20:	9d458593          	addi	a1,a1,-1580 # 800265f0 <__func__.20>
    80006c24:	00021517          	auipc	a0,0x21
    80006c28:	11c50513          	addi	a0,a0,284 # 80027d40 <__func__.0+0x2e0>
bool wfi_exception_tests_3() {
    80006c2c:	ec06                	sd	ra,24(sp)
    80006c2e:	e822                	sd	s0,16(sp)
    80006c30:	e426                	sd	s1,8(sp)
    TEST_START();
    80006c32:	0c41f0ef          	jal	80025cf6 <printf>
    80006c36:	4529                	li	a0,10
    80006c38:	6c91d0ef          	jal	80024b00 <putchar>

    TEST_SETUP_EXCEPT();
    80006c3c:	0330000f          	fence	rw,rw
    80006c40:	00042417          	auipc	s0,0x42
    80006c44:	3d040413          	addi	s0,s0,976 # 80049010 <excpt>
    80006c48:	4485                	li	s1,1
    80006c4a:	00042797          	auipc	a5,0x42
    80006c4e:	3e07bf23          	sd	zero,1022(a5) # 80049048 <excpt+0x38>
    80006c52:	00941023          	sh	s1,0(s0)
    80006c56:	0330000f          	fence	rw,rw
    /* Keep an interrupt pending so we don't get stuck when wfi succeeds */
    //mstatus.TW=0时，在m模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    80006c5a:	4511                	li	a0,4
    80006c5c:	f9bf90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006c60:	002007b7          	lui	a5,0x200
    80006c64:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006c68:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    80006c6c:	30305073          	csrwi	mideleg,0
    CSRS(mie, 0b0100);
    80006c70:	30426073          	csrsi	mie,4
    CSRS(mip, 0b0100);
    80006c74:	34426073          	csrsi	mip,4

    goto_priv(PRIV_M);
    80006c78:	4511                	li	a0,4
    80006c7a:	f7df90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006c7e:	0330000f          	fence	rw,rw
    80006c82:	00042797          	auipc	a5,0x42
    80006c86:	3c07b323          	sd	zero,966(a5) # 80049048 <excpt+0x38>
    80006c8a:	00941023          	sh	s1,0(s0)
    80006c8e:	0330000f          	fence	rw,rw
    80006c92:	10500073          	wfi
    wfi();
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006c96:	08200593          	li	a1,130
    80006c9a:	00022617          	auipc	a2,0x22
    80006c9e:	4ae60613          	addi	a2,a2,1198 # 80029148 <__func__.0+0x16e8>
    80006ca2:	00021517          	auipc	a0,0x21
    80006ca6:	0b650513          	addi	a0,a0,182 # 80027d58 <__func__.0+0x2f8>
    80006caa:	04c1f0ef          	jal	80025cf6 <printf>
    80006cae:	00042797          	auipc	a5,0x42
    80006cb2:	3637c783          	lbu	a5,867(a5) # 80049011 <excpt+0x1>
    80006cb6:	00021597          	auipc	a1,0x21
    80006cba:	06a58593          	addi	a1,a1,106 # 80027d20 <__func__.0+0x2c0>
    80006cbe:	c789                	beqz	a5,80006cc8 <wfi_exception_tests_3+0xae>
    80006cc0:	00021597          	auipc	a1,0x21
    80006cc4:	07058593          	addi	a1,a1,112 # 80027d30 <__func__.0+0x2d0>
    80006cc8:	00021517          	auipc	a0,0x21
    80006ccc:	0a850513          	addi	a0,a0,168 # 80027d70 <__func__.0+0x310>
    80006cd0:	0261f0ef          	jal	80025cf6 <printf>
    80006cd4:	00042797          	auipc	a5,0x42
    80006cd8:	33d7c783          	lbu	a5,829(a5) # 80049011 <excpt+0x1>
    80006cdc:	e7a9                	bnez	a5,80006d26 <wfi_exception_tests_3+0x10c>
    80006cde:	4529                	li	a0,10
    80006ce0:	6211d0ef          	jal	80024b00 <putchar>
    80006ce4:	00042797          	auipc	a5,0x42
    80006ce8:	32d7c783          	lbu	a5,813(a5) # 80049011 <excpt+0x1>
    80006cec:	e79d                	bnez	a5,80006d1a <wfi_exception_tests_3+0x100>
    80006cee:	4405                	li	s0,1

    /** 
     * Delegate the pending interrupt to hs mode so it doesnt immediately 
     * trigger a trap to machine when we jump to hs.
     */
    TEST_END();
    80006cf0:	00021597          	auipc	a1,0x21
    80006cf4:	03058593          	addi	a1,a1,48 # 80027d20 <__func__.0+0x2c0>
    80006cf8:	00021517          	auipc	a0,0x21
    80006cfc:	0e050513          	addi	a0,a0,224 # 80027dd8 <__func__.0+0x378>
    80006d00:	7f71e0ef          	jal	80025cf6 <printf>
    80006d04:	4511                	li	a0,4
    80006d06:	ef1f90ef          	jal	80000bf6 <goto_priv>
    80006d0a:	fa2fa0ef          	jal	800014ac <reset_state>
}
    80006d0e:	60e2                	ld	ra,24(sp)
    80006d10:	8522                	mv	a0,s0
    80006d12:	6442                	ld	s0,16(sp)
    80006d14:	64a2                	ld	s1,8(sp)
    80006d16:	6105                	addi	sp,sp,32
    80006d18:	8082                	ret
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006d1a:	4401                	li	s0,0
    TEST_END();
    80006d1c:	00021597          	auipc	a1,0x21
    80006d20:	01458593          	addi	a1,a1,20 # 80027d30 <__func__.0+0x2d0>
    80006d24:	bfd1                	j	80006cf8 <wfi_exception_tests_3+0xde>
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006d26:	00021517          	auipc	a0,0x21
    80006d2a:	05250513          	addi	a0,a0,82 # 80027d78 <__func__.0+0x318>
    80006d2e:	7c91e0ef          	jal	80025cf6 <printf>
    80006d32:	02900513          	li	a0,41
    80006d36:	5cb1d0ef          	jal	80024b00 <putchar>
    80006d3a:	b755                	j	80006cde <wfi_exception_tests_3+0xc4>

0000000080006d3c <wfi_exception_tests_4>:

bool wfi_exception_tests_4() {
    80006d3c:	1101                	addi	sp,sp,-32

    TEST_START();
    80006d3e:	00020597          	auipc	a1,0x20
    80006d42:	8ca58593          	addi	a1,a1,-1846 # 80026608 <__func__.19>
    80006d46:	00021517          	auipc	a0,0x21
    80006d4a:	ffa50513          	addi	a0,a0,-6 # 80027d40 <__func__.0+0x2e0>
bool wfi_exception_tests_4() {
    80006d4e:	ec06                	sd	ra,24(sp)
    80006d50:	e822                	sd	s0,16(sp)
    80006d52:	e426                	sd	s1,8(sp)
    TEST_START();
    80006d54:	7a31e0ef          	jal	80025cf6 <printf>
    80006d58:	4529                	li	a0,10
    80006d5a:	5a71d0ef          	jal	80024b00 <putchar>
    
    TEST_SETUP_EXCEPT();
    80006d5e:	0330000f          	fence	rw,rw
    80006d62:	00042417          	auipc	s0,0x42
    80006d66:	2ae40413          	addi	s0,s0,686 # 80049010 <excpt>
    80006d6a:	4485                	li	s1,1
    80006d6c:	00042797          	auipc	a5,0x42
    80006d70:	2c07be23          	sd	zero,732(a5) # 80049048 <excpt+0x38>
    80006d74:	00941023          	sh	s1,0(s0)
    80006d78:	0330000f          	fence	rw,rw

    //mstatus.TW=0时，在HS模式下，中断未被禁用，且代理没打开，执行wfi指令
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006d7c:	002007b7          	lui	a5,0x200
    80006d80:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006d84:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);   
    80006d88:	30305073          	csrwi	mideleg,0
    CSRS(CSR_HIE, 0b0100);
    80006d8c:	60426073          	csrsi	hie,4
    CSRS(CSR_HIP, 0b0100);
    80006d90:	64426073          	csrsi	hip,4

    goto_priv(PRIV_HS);
    80006d94:	450d                	li	a0,3
    80006d96:	e61f90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006d9a:	0330000f          	fence	rw,rw
    80006d9e:	00042797          	auipc	a5,0x42
    80006da2:	2a07b523          	sd	zero,682(a5) # 80049048 <excpt+0x38>
    80006da6:	00941023          	sh	s1,0(s0)
    80006daa:	0330000f          	fence	rw,rw
    80006dae:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006db2:	08200593          	li	a1,130
    80006db6:	00022617          	auipc	a2,0x22
    80006dba:	40260613          	addi	a2,a2,1026 # 800291b8 <__func__.0+0x1758>
    80006dbe:	00021517          	auipc	a0,0x21
    80006dc2:	f9a50513          	addi	a0,a0,-102 # 80027d58 <__func__.0+0x2f8>
    80006dc6:	7311e0ef          	jal	80025cf6 <printf>
    80006dca:	00042797          	auipc	a5,0x42
    80006dce:	2477c783          	lbu	a5,583(a5) # 80049011 <excpt+0x1>
    80006dd2:	00021597          	auipc	a1,0x21
    80006dd6:	f4e58593          	addi	a1,a1,-178 # 80027d20 <__func__.0+0x2c0>
    80006dda:	c789                	beqz	a5,80006de4 <wfi_exception_tests_4+0xa8>
    80006ddc:	00021597          	auipc	a1,0x21
    80006de0:	f5458593          	addi	a1,a1,-172 # 80027d30 <__func__.0+0x2d0>
    80006de4:	00021517          	auipc	a0,0x21
    80006de8:	f8c50513          	addi	a0,a0,-116 # 80027d70 <__func__.0+0x310>
    80006dec:	70b1e0ef          	jal	80025cf6 <printf>
    80006df0:	00042797          	auipc	a5,0x42
    80006df4:	2217c783          	lbu	a5,545(a5) # 80049011 <excpt+0x1>
    80006df8:	e7a9                	bnez	a5,80006e42 <wfi_exception_tests_4+0x106>
    80006dfa:	4529                	li	a0,10
    80006dfc:	5051d0ef          	jal	80024b00 <putchar>
    80006e00:	00042797          	auipc	a5,0x42
    80006e04:	2117c783          	lbu	a5,529(a5) # 80049011 <excpt+0x1>
    80006e08:	e79d                	bnez	a5,80006e36 <wfi_exception_tests_4+0xfa>
    80006e0a:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80006e0c:	00021597          	auipc	a1,0x21
    80006e10:	f1458593          	addi	a1,a1,-236 # 80027d20 <__func__.0+0x2c0>
    80006e14:	00021517          	auipc	a0,0x21
    80006e18:	fc450513          	addi	a0,a0,-60 # 80027dd8 <__func__.0+0x378>
    80006e1c:	6db1e0ef          	jal	80025cf6 <printf>
    80006e20:	4511                	li	a0,4
    80006e22:	dd5f90ef          	jal	80000bf6 <goto_priv>
    80006e26:	e86fa0ef          	jal	800014ac <reset_state>
}
    80006e2a:	60e2                	ld	ra,24(sp)
    80006e2c:	8522                	mv	a0,s0
    80006e2e:	6442                	ld	s0,16(sp)
    80006e30:	64a2                	ld	s1,8(sp)
    80006e32:	6105                	addi	sp,sp,32
    80006e34:	8082                	ret
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006e36:	4401                	li	s0,0
    TEST_END();
    80006e38:	00021597          	auipc	a1,0x21
    80006e3c:	ef858593          	addi	a1,a1,-264 # 80027d30 <__func__.0+0x2d0>
    80006e40:	bfd1                	j	80006e14 <wfi_exception_tests_4+0xd8>
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006e42:	00021517          	auipc	a0,0x21
    80006e46:	f3650513          	addi	a0,a0,-202 # 80027d78 <__func__.0+0x318>
    80006e4a:	6ad1e0ef          	jal	80025cf6 <printf>
    80006e4e:	02900513          	li	a0,41
    80006e52:	4af1d0ef          	jal	80024b00 <putchar>
    80006e56:	b755                	j	80006dfa <wfi_exception_tests_4+0xbe>

0000000080006e58 <wfi_exception_tests_5>:

bool wfi_exception_tests_5() {
    80006e58:	1101                	addi	sp,sp,-32

    TEST_START();
    80006e5a:	0001f597          	auipc	a1,0x1f
    80006e5e:	7c658593          	addi	a1,a1,1990 # 80026620 <__func__.18>
    80006e62:	00021517          	auipc	a0,0x21
    80006e66:	ede50513          	addi	a0,a0,-290 # 80027d40 <__func__.0+0x2e0>
bool wfi_exception_tests_5() {
    80006e6a:	ec06                	sd	ra,24(sp)
    80006e6c:	e822                	sd	s0,16(sp)
    80006e6e:	e426                	sd	s1,8(sp)
    TEST_START();
    80006e70:	6871e0ef          	jal	80025cf6 <printf>
    80006e74:	4529                	li	a0,10
    80006e76:	48b1d0ef          	jal	80024b00 <putchar>
    
    TEST_SETUP_EXCEPT();
    80006e7a:	0330000f          	fence	rw,rw
    80006e7e:	00042417          	auipc	s0,0x42
    80006e82:	19240413          	addi	s0,s0,402 # 80049010 <excpt>
    80006e86:	4485                	li	s1,1
    80006e88:	00042797          	auipc	a5,0x42
    80006e8c:	1c07b023          	sd	zero,448(a5) # 80049048 <excpt+0x38>
    80006e90:	00941023          	sh	s1,0(s0)
    80006e94:	0330000f          	fence	rw,rw

    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006e98:	002007b7          	lui	a5,0x200
    80006e9c:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006ea0:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);   
    80006ea4:	30305073          	csrwi	mideleg,0
    //mstatus.TW=0时，在VS模式下，中断未被禁用，且代理没打开，执行wfi指令

    goto_priv(PRIV_VS); //防止进入hs异常后不能直接进入m模式
    80006ea8:	4509                	li	a0,2
    80006eaa:	d4df90ef          	jal	80000bf6 <goto_priv>
    goto_priv(PRIV_M); 
    80006eae:	4511                	li	a0,4
    80006eb0:	d47f90ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_VSIE, 0b0100);
    80006eb4:	20426073          	csrsi	vsie,4
    CSRS(CSR_VSIP, 0b0100);
    80006eb8:	24426073          	csrsi	vsip,4

    goto_priv(PRIV_VS);
    80006ebc:	4509                	li	a0,2
    80006ebe:	d39f90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006ec2:	0330000f          	fence	rw,rw
    80006ec6:	00042797          	auipc	a5,0x42
    80006eca:	1807b123          	sd	zero,386(a5) # 80049048 <excpt+0x38>
    80006ece:	00941023          	sh	s1,0(s0)
    80006ed2:	0330000f          	fence	rw,rw
    80006ed6:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006eda:	08200593          	li	a1,130
    80006ede:	00022617          	auipc	a2,0x22
    80006ee2:	34260613          	addi	a2,a2,834 # 80029220 <__func__.0+0x17c0>
    80006ee6:	00021517          	auipc	a0,0x21
    80006eea:	e7250513          	addi	a0,a0,-398 # 80027d58 <__func__.0+0x2f8>
    80006eee:	6091e0ef          	jal	80025cf6 <printf>
    80006ef2:	00042797          	auipc	a5,0x42
    80006ef6:	11f7c783          	lbu	a5,287(a5) # 80049011 <excpt+0x1>
    80006efa:	00021597          	auipc	a1,0x21
    80006efe:	e2658593          	addi	a1,a1,-474 # 80027d20 <__func__.0+0x2c0>
    80006f02:	c789                	beqz	a5,80006f0c <wfi_exception_tests_5+0xb4>
    80006f04:	00021597          	auipc	a1,0x21
    80006f08:	e2c58593          	addi	a1,a1,-468 # 80027d30 <__func__.0+0x2d0>
    80006f0c:	00021517          	auipc	a0,0x21
    80006f10:	e6450513          	addi	a0,a0,-412 # 80027d70 <__func__.0+0x310>
    80006f14:	5e31e0ef          	jal	80025cf6 <printf>
    80006f18:	00042797          	auipc	a5,0x42
    80006f1c:	0f97c783          	lbu	a5,249(a5) # 80049011 <excpt+0x1>
    80006f20:	e7a9                	bnez	a5,80006f6a <wfi_exception_tests_5+0x112>
    80006f22:	4529                	li	a0,10
    80006f24:	3dd1d0ef          	jal	80024b00 <putchar>
    80006f28:	00042797          	auipc	a5,0x42
    80006f2c:	0e97c783          	lbu	a5,233(a5) # 80049011 <excpt+0x1>
    80006f30:	e79d                	bnez	a5,80006f5e <wfi_exception_tests_5+0x106>
    80006f32:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    80006f34:	00021597          	auipc	a1,0x21
    80006f38:	dec58593          	addi	a1,a1,-532 # 80027d20 <__func__.0+0x2c0>
    80006f3c:	00021517          	auipc	a0,0x21
    80006f40:	e9c50513          	addi	a0,a0,-356 # 80027dd8 <__func__.0+0x378>
    80006f44:	5b31e0ef          	jal	80025cf6 <printf>
    80006f48:	4511                	li	a0,4
    80006f4a:	cadf90ef          	jal	80000bf6 <goto_priv>
    80006f4e:	d5efa0ef          	jal	800014ac <reset_state>
}
    80006f52:	60e2                	ld	ra,24(sp)
    80006f54:	8522                	mv	a0,s0
    80006f56:	6442                	ld	s0,16(sp)
    80006f58:	64a2                	ld	s1,8(sp)
    80006f5a:	6105                	addi	sp,sp,32
    80006f5c:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006f5e:	4401                	li	s0,0
    TEST_END();
    80006f60:	00021597          	auipc	a1,0x21
    80006f64:	dd058593          	addi	a1,a1,-560 # 80027d30 <__func__.0+0x2d0>
    80006f68:	bfd1                	j	80006f3c <wfi_exception_tests_5+0xe4>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006f6a:	00021517          	auipc	a0,0x21
    80006f6e:	e0e50513          	addi	a0,a0,-498 # 80027d78 <__func__.0+0x318>
    80006f72:	5851e0ef          	jal	80025cf6 <printf>
    80006f76:	02900513          	li	a0,41
    80006f7a:	3871d0ef          	jal	80024b00 <putchar>
    80006f7e:	b755                	j	80006f22 <wfi_exception_tests_5+0xca>

0000000080006f80 <wfi_exception_tests_6>:

bool wfi_exception_tests_6() {
    80006f80:	1101                	addi	sp,sp,-32

    TEST_START();
    80006f82:	0001f597          	auipc	a1,0x1f
    80006f86:	6b658593          	addi	a1,a1,1718 # 80026638 <__func__.17>
    80006f8a:	00021517          	auipc	a0,0x21
    80006f8e:	db650513          	addi	a0,a0,-586 # 80027d40 <__func__.0+0x2e0>
bool wfi_exception_tests_6() {
    80006f92:	ec06                	sd	ra,24(sp)
    80006f94:	e822                	sd	s0,16(sp)
    80006f96:	e426                	sd	s1,8(sp)
    TEST_START();
    80006f98:	55f1e0ef          	jal	80025cf6 <printf>
    80006f9c:	4529                	li	a0,10
    80006f9e:	3631d0ef          	jal	80024b00 <putchar>
    
    TEST_SETUP_EXCEPT();
    80006fa2:	0330000f          	fence	rw,rw
    80006fa6:	00042417          	auipc	s0,0x42
    80006faa:	06a40413          	addi	s0,s0,106 # 80049010 <excpt>
    80006fae:	4485                	li	s1,1
    80006fb0:	00042797          	auipc	a5,0x42
    80006fb4:	0807bc23          	sd	zero,152(a5) # 80049048 <excpt+0x38>
    80006fb8:	00941023          	sh	s1,0(s0)
    80006fbc:	0330000f          	fence	rw,rw
    
    goto_priv(PRIV_M);
    80006fc0:	4511                	li	a0,4
    80006fc2:	c35f90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006fc6:	002007b7          	lui	a5,0x200
    80006fca:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006fce:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);   
    80006fd2:	30305073          	csrwi	mideleg,0
    CSRS(mie, 0b0100);
    80006fd6:	30426073          	csrsi	mie,4
    CSRS(mip, 0b0100);
    80006fda:	34426073          	csrsi	mip,4
    CSRS(mideleg, 0b0100);
    80006fde:	30326073          	csrsi	mideleg,4

    goto_priv(PRIV_M);
    80006fe2:	4511                	li	a0,4
    80006fe4:	c13f90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006fe8:	0330000f          	fence	rw,rw
    80006fec:	00042797          	auipc	a5,0x42
    80006ff0:	0407be23          	sd	zero,92(a5) # 80049048 <excpt+0x38>
    80006ff4:	00941023          	sh	s1,0(s0)
    80006ff8:	0330000f          	fence	rw,rw
    80006ffc:	10500073          	wfi
    wfi();
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007000:	08200593          	li	a1,130
    80007004:	00022617          	auipc	a2,0x22
    80007008:	28460613          	addi	a2,a2,644 # 80029288 <__func__.0+0x1828>
    8000700c:	00021517          	auipc	a0,0x21
    80007010:	d4c50513          	addi	a0,a0,-692 # 80027d58 <__func__.0+0x2f8>
    80007014:	4e31e0ef          	jal	80025cf6 <printf>
    80007018:	00042797          	auipc	a5,0x42
    8000701c:	ff97c783          	lbu	a5,-7(a5) # 80049011 <excpt+0x1>
    80007020:	00021597          	auipc	a1,0x21
    80007024:	d0058593          	addi	a1,a1,-768 # 80027d20 <__func__.0+0x2c0>
    80007028:	c789                	beqz	a5,80007032 <wfi_exception_tests_6+0xb2>
    8000702a:	00021597          	auipc	a1,0x21
    8000702e:	d0658593          	addi	a1,a1,-762 # 80027d30 <__func__.0+0x2d0>
    80007032:	00021517          	auipc	a0,0x21
    80007036:	d3e50513          	addi	a0,a0,-706 # 80027d70 <__func__.0+0x310>
    8000703a:	4bd1e0ef          	jal	80025cf6 <printf>
    8000703e:	00042797          	auipc	a5,0x42
    80007042:	fd37c783          	lbu	a5,-45(a5) # 80049011 <excpt+0x1>
    80007046:	e7a9                	bnez	a5,80007090 <wfi_exception_tests_6+0x110>
    80007048:	4529                	li	a0,10
    8000704a:	2b71d0ef          	jal	80024b00 <putchar>
    8000704e:	00042797          	auipc	a5,0x42
    80007052:	fc37c783          	lbu	a5,-61(a5) # 80049011 <excpt+0x1>
    80007056:	e79d                	bnez	a5,80007084 <wfi_exception_tests_6+0x104>
    80007058:	4405                	li	s0,1

    /** 
     * Delegate the pending interrupt to hs mode so it doesnt immediately 
     * trigger a trap to machine when we jump to hs.
     */
    TEST_END();
    8000705a:	00021597          	auipc	a1,0x21
    8000705e:	cc658593          	addi	a1,a1,-826 # 80027d20 <__func__.0+0x2c0>
    80007062:	00021517          	auipc	a0,0x21
    80007066:	d7650513          	addi	a0,a0,-650 # 80027dd8 <__func__.0+0x378>
    8000706a:	48d1e0ef          	jal	80025cf6 <printf>
    8000706e:	4511                	li	a0,4
    80007070:	b87f90ef          	jal	80000bf6 <goto_priv>
    80007074:	c38fa0ef          	jal	800014ac <reset_state>
}
    80007078:	60e2                	ld	ra,24(sp)
    8000707a:	8522                	mv	a0,s0
    8000707c:	6442                	ld	s0,16(sp)
    8000707e:	64a2                	ld	s1,8(sp)
    80007080:	6105                	addi	sp,sp,32
    80007082:	8082                	ret
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007084:	4401                	li	s0,0
    TEST_END();
    80007086:	00021597          	auipc	a1,0x21
    8000708a:	caa58593          	addi	a1,a1,-854 # 80027d30 <__func__.0+0x2d0>
    8000708e:	bfd1                	j	80007062 <wfi_exception_tests_6+0xe2>
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007090:	00021517          	auipc	a0,0x21
    80007094:	ce850513          	addi	a0,a0,-792 # 80027d78 <__func__.0+0x318>
    80007098:	45f1e0ef          	jal	80025cf6 <printf>
    8000709c:	02900513          	li	a0,41
    800070a0:	2611d0ef          	jal	80024b00 <putchar>
    800070a4:	b755                	j	80007048 <wfi_exception_tests_6+0xc8>

00000000800070a6 <wfi_exception_tests_7>:



bool wfi_exception_tests_7() {
    800070a6:	1101                	addi	sp,sp,-32

    TEST_START();
    800070a8:	0001f597          	auipc	a1,0x1f
    800070ac:	5a858593          	addi	a1,a1,1448 # 80026650 <__func__.16>
    800070b0:	00021517          	auipc	a0,0x21
    800070b4:	c9050513          	addi	a0,a0,-880 # 80027d40 <__func__.0+0x2e0>
bool wfi_exception_tests_7() {
    800070b8:	ec06                	sd	ra,24(sp)
    800070ba:	e822                	sd	s0,16(sp)
    800070bc:	e426                	sd	s1,8(sp)
    TEST_START();
    800070be:	4391e0ef          	jal	80025cf6 <printf>
    800070c2:	4529                	li	a0,10
    800070c4:	23d1d0ef          	jal	80024b00 <putchar>
    
    TEST_SETUP_EXCEPT();
    800070c8:	0330000f          	fence	rw,rw
    800070cc:	00042417          	auipc	s0,0x42
    800070d0:	f4440413          	addi	s0,s0,-188 # 80049010 <excpt>
    800070d4:	4485                	li	s1,1
    800070d6:	00042797          	auipc	a5,0x42
    800070da:	f607b923          	sd	zero,-142(a5) # 80049048 <excpt+0x38>
    800070de:	00941023          	sh	s1,0(s0)
    800070e2:	0330000f          	fence	rw,rw

    //mstatus.TW=0时，在VS模式下，中断未被禁用，且代理打开，执行wfi指令
    goto_priv(PRIV_M); 
    800070e6:	4511                	li	a0,4
    800070e8:	b0ff90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800070ec:	002007b7          	lui	a5,0x200
    800070f0:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_VSIE, 0b0100);
    800070f4:	20426073          	csrsi	vsie,4
    CSRS(CSR_VSIP, 0b0100);
    800070f8:	24426073          	csrsi	vsip,4
    CSRS(mideleg, 0b0100);
    800070fc:	30326073          	csrsi	mideleg,4

    goto_priv(PRIV_VS);
    80007100:	4509                	li	a0,2
    80007102:	af5f90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007106:	0330000f          	fence	rw,rw
    8000710a:	00042797          	auipc	a5,0x42
    8000710e:	f207bf23          	sd	zero,-194(a5) # 80049048 <excpt+0x38>
    80007112:	00941023          	sh	s1,0(s0)
    80007116:	0330000f          	fence	rw,rw
    8000711a:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    8000711e:	08200593          	li	a1,130
    80007122:	00022617          	auipc	a2,0x22
    80007126:	1d660613          	addi	a2,a2,470 # 800292f8 <__func__.0+0x1898>
    8000712a:	00021517          	auipc	a0,0x21
    8000712e:	c2e50513          	addi	a0,a0,-978 # 80027d58 <__func__.0+0x2f8>
    80007132:	3c51e0ef          	jal	80025cf6 <printf>
    80007136:	00042797          	auipc	a5,0x42
    8000713a:	edb7c783          	lbu	a5,-293(a5) # 80049011 <excpt+0x1>
    8000713e:	00021597          	auipc	a1,0x21
    80007142:	be258593          	addi	a1,a1,-1054 # 80027d20 <__func__.0+0x2c0>
    80007146:	c789                	beqz	a5,80007150 <wfi_exception_tests_7+0xaa>
    80007148:	00021597          	auipc	a1,0x21
    8000714c:	be858593          	addi	a1,a1,-1048 # 80027d30 <__func__.0+0x2d0>
    80007150:	00021517          	auipc	a0,0x21
    80007154:	c2050513          	addi	a0,a0,-992 # 80027d70 <__func__.0+0x310>
    80007158:	39f1e0ef          	jal	80025cf6 <printf>
    8000715c:	00042797          	auipc	a5,0x42
    80007160:	eb57c783          	lbu	a5,-331(a5) # 80049011 <excpt+0x1>
    80007164:	e7a9                	bnez	a5,800071ae <wfi_exception_tests_7+0x108>
    80007166:	4529                	li	a0,10
    80007168:	1991d0ef          	jal	80024b00 <putchar>
    8000716c:	00042797          	auipc	a5,0x42
    80007170:	ea57c783          	lbu	a5,-347(a5) # 80049011 <excpt+0x1>
    80007174:	e79d                	bnez	a5,800071a2 <wfi_exception_tests_7+0xfc>
    80007176:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    80007178:	00021597          	auipc	a1,0x21
    8000717c:	ba858593          	addi	a1,a1,-1112 # 80027d20 <__func__.0+0x2c0>
    80007180:	00021517          	auipc	a0,0x21
    80007184:	c5850513          	addi	a0,a0,-936 # 80027dd8 <__func__.0+0x378>
    80007188:	36f1e0ef          	jal	80025cf6 <printf>
    8000718c:	4511                	li	a0,4
    8000718e:	a69f90ef          	jal	80000bf6 <goto_priv>
    80007192:	b1afa0ef          	jal	800014ac <reset_state>
}
    80007196:	60e2                	ld	ra,24(sp)
    80007198:	8522                	mv	a0,s0
    8000719a:	6442                	ld	s0,16(sp)
    8000719c:	64a2                	ld	s1,8(sp)
    8000719e:	6105                	addi	sp,sp,32
    800071a0:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    800071a2:	4401                	li	s0,0
    TEST_END();
    800071a4:	00021597          	auipc	a1,0x21
    800071a8:	b8c58593          	addi	a1,a1,-1140 # 80027d30 <__func__.0+0x2d0>
    800071ac:	bfd1                	j	80007180 <wfi_exception_tests_7+0xda>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    800071ae:	00021517          	auipc	a0,0x21
    800071b2:	bca50513          	addi	a0,a0,-1078 # 80027d78 <__func__.0+0x318>
    800071b6:	3411e0ef          	jal	80025cf6 <printf>
    800071ba:	02900513          	li	a0,41
    800071be:	1431d0ef          	jal	80024b00 <putchar>
    800071c2:	b755                	j	80007166 <wfi_exception_tests_7+0xc0>

00000000800071c4 <wfi_exception_tests_8>:

bool wfi_exception_tests_8() {
    800071c4:	1141                	addi	sp,sp,-16

    TEST_START();
    800071c6:	0001f597          	auipc	a1,0x1f
    800071ca:	4a258593          	addi	a1,a1,1186 # 80026668 <__func__.15>
    800071ce:	00021517          	auipc	a0,0x21
    800071d2:	b7250513          	addi	a0,a0,-1166 # 80027d40 <__func__.0+0x2e0>
bool wfi_exception_tests_8() {
    800071d6:	e406                	sd	ra,8(sp)
    800071d8:	e022                	sd	s0,0(sp)
    TEST_START();
    800071da:	31d1e0ef          	jal	80025cf6 <printf>
    800071de:	4529                	li	a0,10
    800071e0:	1211d0ef          	jal	80024b00 <putchar>

    //mstatus.TW=0时，在VS，中断等待拉高，但中断使能未拉高，中断未被代理到低特权模式
    goto_priv(PRIV_M); 
    800071e4:	4511                	li	a0,4
    800071e6:	a11f90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800071ea:	002007b7          	lui	a5,0x200
    800071ee:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_SIE, 0x0);
    800071f2:	10406073          	csrsi	sie,0
    CSRS(mideleg, 0x0);
    800071f6:	30306073          	csrsi	mideleg,0

    goto_priv(PRIV_VS);
    800071fa:	4509                	li	a0,2
    800071fc:	9fbf90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007200:	0330000f          	fence	rw,rw
    80007204:	4785                	li	a5,1
    80007206:	00042717          	auipc	a4,0x42
    8000720a:	e4073123          	sd	zero,-446(a4) # 80049048 <excpt+0x38>
    8000720e:	00042717          	auipc	a4,0x42
    80007212:	e0f71123          	sh	a5,-510(a4) # 80049010 <excpt>
    80007216:	0330000f          	fence	rw,rw
    8000721a:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    8000721e:	08200593          	li	a1,130
    80007222:	00022617          	auipc	a2,0x22
    80007226:	13e60613          	addi	a2,a2,318 # 80029360 <__func__.0+0x1900>
    8000722a:	00021517          	auipc	a0,0x21
    8000722e:	b2e50513          	addi	a0,a0,-1234 # 80027d58 <__func__.0+0x2f8>
    80007232:	2c51e0ef          	jal	80025cf6 <printf>
    80007236:	00042797          	auipc	a5,0x42
    8000723a:	ddb7c783          	lbu	a5,-549(a5) # 80049011 <excpt+0x1>
    8000723e:	00021597          	auipc	a1,0x21
    80007242:	ae258593          	addi	a1,a1,-1310 # 80027d20 <__func__.0+0x2c0>
    80007246:	c789                	beqz	a5,80007250 <wfi_exception_tests_8+0x8c>
    80007248:	00021597          	auipc	a1,0x21
    8000724c:	ae858593          	addi	a1,a1,-1304 # 80027d30 <__func__.0+0x2d0>
    80007250:	00021517          	auipc	a0,0x21
    80007254:	b2050513          	addi	a0,a0,-1248 # 80027d70 <__func__.0+0x310>
    80007258:	29f1e0ef          	jal	80025cf6 <printf>
    8000725c:	00042797          	auipc	a5,0x42
    80007260:	db57c783          	lbu	a5,-587(a5) # 80049011 <excpt+0x1>
    80007264:	e7a1                	bnez	a5,800072ac <wfi_exception_tests_8+0xe8>
    80007266:	4529                	li	a0,10
    80007268:	0991d0ef          	jal	80024b00 <putchar>
    8000726c:	00042797          	auipc	a5,0x42
    80007270:	da57c783          	lbu	a5,-603(a5) # 80049011 <excpt+0x1>
    80007274:	e795                	bnez	a5,800072a0 <wfi_exception_tests_8+0xdc>
    80007276:	4405                	li	s0,1
        excpt.triggered == false
    );  

    TEST_END();
    80007278:	00021597          	auipc	a1,0x21
    8000727c:	aa858593          	addi	a1,a1,-1368 # 80027d20 <__func__.0+0x2c0>
    80007280:	00021517          	auipc	a0,0x21
    80007284:	b5850513          	addi	a0,a0,-1192 # 80027dd8 <__func__.0+0x378>
    80007288:	26f1e0ef          	jal	80025cf6 <printf>
    8000728c:	4511                	li	a0,4
    8000728e:	969f90ef          	jal	80000bf6 <goto_priv>
    80007292:	a1afa0ef          	jal	800014ac <reset_state>
}
    80007296:	60a2                	ld	ra,8(sp)
    80007298:	8522                	mv	a0,s0
    8000729a:	6402                	ld	s0,0(sp)
    8000729c:	0141                	addi	sp,sp,16
    8000729e:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800072a0:	4401                	li	s0,0
    TEST_END();
    800072a2:	00021597          	auipc	a1,0x21
    800072a6:	a8e58593          	addi	a1,a1,-1394 # 80027d30 <__func__.0+0x2d0>
    800072aa:	bfd9                	j	80007280 <wfi_exception_tests_8+0xbc>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800072ac:	00021517          	auipc	a0,0x21
    800072b0:	acc50513          	addi	a0,a0,-1332 # 80027d78 <__func__.0+0x318>
    800072b4:	2431e0ef          	jal	80025cf6 <printf>
    800072b8:	02900513          	li	a0,41
    800072bc:	0451d0ef          	jal	80024b00 <putchar>
    800072c0:	b75d                	j	80007266 <wfi_exception_tests_8+0xa2>

00000000800072c2 <wfi_exception_tests_9>:

bool wfi_exception_tests_9() {
    800072c2:	1141                	addi	sp,sp,-16

    TEST_START();
    800072c4:	0001f597          	auipc	a1,0x1f
    800072c8:	3bc58593          	addi	a1,a1,956 # 80026680 <__func__.14>
    800072cc:	00021517          	auipc	a0,0x21
    800072d0:	a7450513          	addi	a0,a0,-1420 # 80027d40 <__func__.0+0x2e0>
bool wfi_exception_tests_9() {
    800072d4:	e406                	sd	ra,8(sp)
    800072d6:	e022                	sd	s0,0(sp)
    TEST_START();
    800072d8:	21f1e0ef          	jal	80025cf6 <printf>
    800072dc:	4529                	li	a0,10
    800072de:	0231d0ef          	jal	80024b00 <putchar>
    //mstatus.TW=0时，在HS模式下，发生中断，中断使能未拉高，中断未被代理到低特权模式
    
    goto_priv(PRIV_M); 
    800072e2:	4511                	li	a0,4
    800072e4:	913f90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800072e8:	002007b7          	lui	a5,0x200
    800072ec:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_SIE, 0x0);
    800072f0:	10406073          	csrsi	sie,0
    CSRS(mideleg, 0x0);
    800072f4:	30306073          	csrsi	mideleg,0

    goto_priv(PRIV_HS);
    800072f8:	450d                	li	a0,3
    800072fa:	8fdf90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800072fe:	0330000f          	fence	rw,rw
    80007302:	4785                	li	a5,1
    80007304:	00042717          	auipc	a4,0x42
    80007308:	d4073223          	sd	zero,-700(a4) # 80049048 <excpt+0x38>
    8000730c:	00042717          	auipc	a4,0x42
    80007310:	d0f71223          	sh	a5,-764(a4) # 80049010 <excpt>
    80007314:	0330000f          	fence	rw,rw
    80007318:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    8000731c:	08200593          	li	a1,130
    80007320:	00022617          	auipc	a2,0x22
    80007324:	04060613          	addi	a2,a2,64 # 80029360 <__func__.0+0x1900>
    80007328:	00021517          	auipc	a0,0x21
    8000732c:	a3050513          	addi	a0,a0,-1488 # 80027d58 <__func__.0+0x2f8>
    80007330:	1c71e0ef          	jal	80025cf6 <printf>
    80007334:	00042797          	auipc	a5,0x42
    80007338:	cdd7c783          	lbu	a5,-803(a5) # 80049011 <excpt+0x1>
    8000733c:	00021597          	auipc	a1,0x21
    80007340:	9e458593          	addi	a1,a1,-1564 # 80027d20 <__func__.0+0x2c0>
    80007344:	c789                	beqz	a5,8000734e <wfi_exception_tests_9+0x8c>
    80007346:	00021597          	auipc	a1,0x21
    8000734a:	9ea58593          	addi	a1,a1,-1558 # 80027d30 <__func__.0+0x2d0>
    8000734e:	00021517          	auipc	a0,0x21
    80007352:	a2250513          	addi	a0,a0,-1502 # 80027d70 <__func__.0+0x310>
    80007356:	1a11e0ef          	jal	80025cf6 <printf>
    8000735a:	00042797          	auipc	a5,0x42
    8000735e:	cb77c783          	lbu	a5,-841(a5) # 80049011 <excpt+0x1>
    80007362:	e7a1                	bnez	a5,800073aa <wfi_exception_tests_9+0xe8>
    80007364:	4529                	li	a0,10
    80007366:	79a1d0ef          	jal	80024b00 <putchar>
    8000736a:	00042797          	auipc	a5,0x42
    8000736e:	ca77c783          	lbu	a5,-857(a5) # 80049011 <excpt+0x1>
    80007372:	e795                	bnez	a5,8000739e <wfi_exception_tests_9+0xdc>
    80007374:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007376:	00021597          	auipc	a1,0x21
    8000737a:	9aa58593          	addi	a1,a1,-1622 # 80027d20 <__func__.0+0x2c0>
    8000737e:	00021517          	auipc	a0,0x21
    80007382:	a5a50513          	addi	a0,a0,-1446 # 80027dd8 <__func__.0+0x378>
    80007386:	1711e0ef          	jal	80025cf6 <printf>
    8000738a:	4511                	li	a0,4
    8000738c:	86bf90ef          	jal	80000bf6 <goto_priv>
    80007390:	91cfa0ef          	jal	800014ac <reset_state>
}
    80007394:	60a2                	ld	ra,8(sp)
    80007396:	8522                	mv	a0,s0
    80007398:	6402                	ld	s0,0(sp)
    8000739a:	0141                	addi	sp,sp,16
    8000739c:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    8000739e:	4401                	li	s0,0
    TEST_END();
    800073a0:	00021597          	auipc	a1,0x21
    800073a4:	99058593          	addi	a1,a1,-1648 # 80027d30 <__func__.0+0x2d0>
    800073a8:	bfd9                	j	8000737e <wfi_exception_tests_9+0xbc>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800073aa:	00021517          	auipc	a0,0x21
    800073ae:	9ce50513          	addi	a0,a0,-1586 # 80027d78 <__func__.0+0x318>
    800073b2:	1451e0ef          	jal	80025cf6 <printf>
    800073b6:	02900513          	li	a0,41
    800073ba:	7461d0ef          	jal	80024b00 <putchar>
    800073be:	b75d                	j	80007364 <wfi_exception_tests_9+0xa2>

00000000800073c0 <wfi_exception_tests_10>:

bool wfi_exception_tests_10() {
    800073c0:	1141                	addi	sp,sp,-16

    TEST_START();
    800073c2:	0001f597          	auipc	a1,0x1f
    800073c6:	2d658593          	addi	a1,a1,726 # 80026698 <__func__.13>
    800073ca:	00021517          	auipc	a0,0x21
    800073ce:	97650513          	addi	a0,a0,-1674 # 80027d40 <__func__.0+0x2e0>
bool wfi_exception_tests_10() {
    800073d2:	e406                	sd	ra,8(sp)
    800073d4:	e022                	sd	s0,0(sp)
    TEST_START();
    800073d6:	1211e0ef          	jal	80025cf6 <printf>
    800073da:	4529                	li	a0,10
    800073dc:	7241d0ef          	jal	80024b00 <putchar>
    //mstatus.TW=0时，在M模式下，发生中断，中断使能未拉高，中断未被代理到低特权模式
    
    goto_priv(PRIV_M); 
    800073e0:	4511                	li	a0,4
    800073e2:	815f90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800073e6:	002007b7          	lui	a5,0x200
    800073ea:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_MIE, 0x0);
    800073ee:	30406073          	csrsi	mie,0
    CSRS(mideleg, 0x0);
    800073f2:	30306073          	csrsi	mideleg,0

    goto_priv(PRIV_M);
    800073f6:	4511                	li	a0,4
    800073f8:	ffef90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800073fc:	0330000f          	fence	rw,rw
    80007400:	4785                	li	a5,1
    80007402:	00042717          	auipc	a4,0x42
    80007406:	c4073323          	sd	zero,-954(a4) # 80049048 <excpt+0x38>
    8000740a:	00042717          	auipc	a4,0x42
    8000740e:	c0f71323          	sh	a5,-1018(a4) # 80049010 <excpt>
    80007412:	0330000f          	fence	rw,rw
    80007416:	10500073          	wfi
    wfi();

    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    8000741a:	08200593          	li	a1,130
    8000741e:	00022617          	auipc	a2,0x22
    80007422:	f8a60613          	addi	a2,a2,-118 # 800293a8 <__func__.0+0x1948>
    80007426:	00021517          	auipc	a0,0x21
    8000742a:	93250513          	addi	a0,a0,-1742 # 80027d58 <__func__.0+0x2f8>
    8000742e:	0c91e0ef          	jal	80025cf6 <printf>
    80007432:	00042797          	auipc	a5,0x42
    80007436:	bdf7c783          	lbu	a5,-1057(a5) # 80049011 <excpt+0x1>
    8000743a:	00021597          	auipc	a1,0x21
    8000743e:	8e658593          	addi	a1,a1,-1818 # 80027d20 <__func__.0+0x2c0>
    80007442:	c789                	beqz	a5,8000744c <wfi_exception_tests_10+0x8c>
    80007444:	00021597          	auipc	a1,0x21
    80007448:	8ec58593          	addi	a1,a1,-1812 # 80027d30 <__func__.0+0x2d0>
    8000744c:	00021517          	auipc	a0,0x21
    80007450:	92450513          	addi	a0,a0,-1756 # 80027d70 <__func__.0+0x310>
    80007454:	0a31e0ef          	jal	80025cf6 <printf>
    80007458:	00042797          	auipc	a5,0x42
    8000745c:	bb97c783          	lbu	a5,-1095(a5) # 80049011 <excpt+0x1>
    80007460:	e7a1                	bnez	a5,800074a8 <wfi_exception_tests_10+0xe8>
    80007462:	4529                	li	a0,10
    80007464:	69c1d0ef          	jal	80024b00 <putchar>
    80007468:	00042797          	auipc	a5,0x42
    8000746c:	ba97c783          	lbu	a5,-1111(a5) # 80049011 <excpt+0x1>
    80007470:	e795                	bnez	a5,8000749c <wfi_exception_tests_10+0xdc>
    80007472:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007474:	00021597          	auipc	a1,0x21
    80007478:	8ac58593          	addi	a1,a1,-1876 # 80027d20 <__func__.0+0x2c0>
    8000747c:	00021517          	auipc	a0,0x21
    80007480:	95c50513          	addi	a0,a0,-1700 # 80027dd8 <__func__.0+0x378>
    80007484:	0731e0ef          	jal	80025cf6 <printf>
    80007488:	4511                	li	a0,4
    8000748a:	f6cf90ef          	jal	80000bf6 <goto_priv>
    8000748e:	81efa0ef          	jal	800014ac <reset_state>
}
    80007492:	60a2                	ld	ra,8(sp)
    80007494:	8522                	mv	a0,s0
    80007496:	6402                	ld	s0,0(sp)
    80007498:	0141                	addi	sp,sp,16
    8000749a:	8082                	ret
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    8000749c:	4401                	li	s0,0
    TEST_END();
    8000749e:	00021597          	auipc	a1,0x21
    800074a2:	89258593          	addi	a1,a1,-1902 # 80027d30 <__func__.0+0x2d0>
    800074a6:	bfd9                	j	8000747c <wfi_exception_tests_10+0xbc>
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800074a8:	00021517          	auipc	a0,0x21
    800074ac:	8d050513          	addi	a0,a0,-1840 # 80027d78 <__func__.0+0x318>
    800074b0:	0471e0ef          	jal	80025cf6 <printf>
    800074b4:	02900513          	li	a0,41
    800074b8:	6481d0ef          	jal	80024b00 <putchar>
    800074bc:	b75d                	j	80007462 <wfi_exception_tests_10+0xa2>

00000000800074be <wfi_exception_tests_11>:

bool wfi_exception_tests_11() {
    800074be:	1141                	addi	sp,sp,-16

    TEST_START();
    800074c0:	0001f597          	auipc	a1,0x1f
    800074c4:	1f058593          	addi	a1,a1,496 # 800266b0 <__func__.12>
    800074c8:	00021517          	auipc	a0,0x21
    800074cc:	87850513          	addi	a0,a0,-1928 # 80027d40 <__func__.0+0x2e0>
bool wfi_exception_tests_11() {
    800074d0:	e406                	sd	ra,8(sp)
    800074d2:	e022                	sd	s0,0(sp)
    TEST_START();
    800074d4:	0231e0ef          	jal	80025cf6 <printf>
    800074d8:	4529                	li	a0,10
    800074da:	6261d0ef          	jal	80024b00 <putchar>

    //mstatus.TW=0时，在VS，中断等待拉高，但中断使能未拉高，中断被代理到低特权模式
    goto_priv(PRIV_M); 
    800074de:	4511                	li	a0,4
    800074e0:	f16f90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800074e4:	002007b7          	lui	a5,0x200
    800074e8:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_SIE, 0x0);
    800074ec:	10405073          	csrwi	sie,0

    CSRW(mideleg, (uint64_t)-1);
    800074f0:	57fd                	li	a5,-1
    800074f2:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_VS);
    800074f6:	4509                	li	a0,2
    800074f8:	efef90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800074fc:	0330000f          	fence	rw,rw
    80007500:	4785                	li	a5,1
    80007502:	00042717          	auipc	a4,0x42
    80007506:	b4073323          	sd	zero,-1210(a4) # 80049048 <excpt+0x38>
    8000750a:	00042717          	auipc	a4,0x42
    8000750e:	b0f71323          	sh	a5,-1274(a4) # 80049010 <excpt>
    80007512:	0330000f          	fence	rw,rw
    80007516:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    8000751a:	08200593          	li	a1,130
    8000751e:	00022617          	auipc	a2,0x22
    80007522:	ed260613          	addi	a2,a2,-302 # 800293f0 <__func__.0+0x1990>
    80007526:	00021517          	auipc	a0,0x21
    8000752a:	83250513          	addi	a0,a0,-1998 # 80027d58 <__func__.0+0x2f8>
    8000752e:	7c81e0ef          	jal	80025cf6 <printf>
    80007532:	00042797          	auipc	a5,0x42
    80007536:	adf7c783          	lbu	a5,-1313(a5) # 80049011 <excpt+0x1>
    8000753a:	00020597          	auipc	a1,0x20
    8000753e:	7e658593          	addi	a1,a1,2022 # 80027d20 <__func__.0+0x2c0>
    80007542:	c789                	beqz	a5,8000754c <wfi_exception_tests_11+0x8e>
    80007544:	00020597          	auipc	a1,0x20
    80007548:	7ec58593          	addi	a1,a1,2028 # 80027d30 <__func__.0+0x2d0>
    8000754c:	00021517          	auipc	a0,0x21
    80007550:	82450513          	addi	a0,a0,-2012 # 80027d70 <__func__.0+0x310>
    80007554:	7a21e0ef          	jal	80025cf6 <printf>
    80007558:	00042797          	auipc	a5,0x42
    8000755c:	ab97c783          	lbu	a5,-1351(a5) # 80049011 <excpt+0x1>
    80007560:	e7a1                	bnez	a5,800075a8 <wfi_exception_tests_11+0xea>
    80007562:	4529                	li	a0,10
    80007564:	59c1d0ef          	jal	80024b00 <putchar>
    80007568:	00042797          	auipc	a5,0x42
    8000756c:	aa97c783          	lbu	a5,-1367(a5) # 80049011 <excpt+0x1>
    80007570:	e795                	bnez	a5,8000759c <wfi_exception_tests_11+0xde>
    80007572:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007574:	00020597          	auipc	a1,0x20
    80007578:	7ac58593          	addi	a1,a1,1964 # 80027d20 <__func__.0+0x2c0>
    8000757c:	00021517          	auipc	a0,0x21
    80007580:	85c50513          	addi	a0,a0,-1956 # 80027dd8 <__func__.0+0x378>
    80007584:	7721e0ef          	jal	80025cf6 <printf>
    80007588:	4511                	li	a0,4
    8000758a:	e6cf90ef          	jal	80000bf6 <goto_priv>
    8000758e:	f1ff90ef          	jal	800014ac <reset_state>
}
    80007592:	60a2                	ld	ra,8(sp)
    80007594:	8522                	mv	a0,s0
    80007596:	6402                	ld	s0,0(sp)
    80007598:	0141                	addi	sp,sp,16
    8000759a:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    8000759c:	4401                	li	s0,0
    TEST_END();
    8000759e:	00020597          	auipc	a1,0x20
    800075a2:	79258593          	addi	a1,a1,1938 # 80027d30 <__func__.0+0x2d0>
    800075a6:	bfd9                	j	8000757c <wfi_exception_tests_11+0xbe>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    800075a8:	00020517          	auipc	a0,0x20
    800075ac:	7d050513          	addi	a0,a0,2000 # 80027d78 <__func__.0+0x318>
    800075b0:	7461e0ef          	jal	80025cf6 <printf>
    800075b4:	02900513          	li	a0,41
    800075b8:	5481d0ef          	jal	80024b00 <putchar>
    800075bc:	b75d                	j	80007562 <wfi_exception_tests_11+0xa4>

00000000800075be <wfi_exception_tests_12>:

bool wfi_exception_tests_12() {
    800075be:	1141                	addi	sp,sp,-16

    TEST_START();
    800075c0:	0001f597          	auipc	a1,0x1f
    800075c4:	10858593          	addi	a1,a1,264 # 800266c8 <__func__.11>
    800075c8:	00020517          	auipc	a0,0x20
    800075cc:	77850513          	addi	a0,a0,1912 # 80027d40 <__func__.0+0x2e0>
bool wfi_exception_tests_12() {
    800075d0:	e406                	sd	ra,8(sp)
    800075d2:	e022                	sd	s0,0(sp)
    TEST_START();
    800075d4:	7221e0ef          	jal	80025cf6 <printf>
    800075d8:	4529                	li	a0,10
    800075da:	5261d0ef          	jal	80024b00 <putchar>
    //mstatus.TW=0时，在HS模式下，发生中断，中断使能未拉高，中断被代理到低特权模式
    
    goto_priv(PRIV_M); 
    800075de:	4511                	li	a0,4
    800075e0:	e16f90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800075e4:	002007b7          	lui	a5,0x200
    800075e8:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_SIE, 0x0);
    800075ec:	10405073          	csrwi	sie,0
    CSRW(mideleg, (uint64_t)-1);
    800075f0:	57fd                	li	a5,-1
    800075f2:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_HS);
    800075f6:	450d                	li	a0,3
    800075f8:	dfef90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800075fc:	0330000f          	fence	rw,rw
    80007600:	4785                	li	a5,1
    80007602:	00042717          	auipc	a4,0x42
    80007606:	a4073323          	sd	zero,-1466(a4) # 80049048 <excpt+0x38>
    8000760a:	00042717          	auipc	a4,0x42
    8000760e:	a0f71323          	sh	a5,-1530(a4) # 80049010 <excpt>
    80007612:	0330000f          	fence	rw,rw
    80007616:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    8000761a:	08200593          	li	a1,130
    8000761e:	00022617          	auipc	a2,0x22
    80007622:	dd260613          	addi	a2,a2,-558 # 800293f0 <__func__.0+0x1990>
    80007626:	00020517          	auipc	a0,0x20
    8000762a:	73250513          	addi	a0,a0,1842 # 80027d58 <__func__.0+0x2f8>
    8000762e:	6c81e0ef          	jal	80025cf6 <printf>
    80007632:	00042797          	auipc	a5,0x42
    80007636:	9df7c783          	lbu	a5,-1569(a5) # 80049011 <excpt+0x1>
    8000763a:	00020597          	auipc	a1,0x20
    8000763e:	6e658593          	addi	a1,a1,1766 # 80027d20 <__func__.0+0x2c0>
    80007642:	c789                	beqz	a5,8000764c <wfi_exception_tests_12+0x8e>
    80007644:	00020597          	auipc	a1,0x20
    80007648:	6ec58593          	addi	a1,a1,1772 # 80027d30 <__func__.0+0x2d0>
    8000764c:	00020517          	auipc	a0,0x20
    80007650:	72450513          	addi	a0,a0,1828 # 80027d70 <__func__.0+0x310>
    80007654:	6a21e0ef          	jal	80025cf6 <printf>
    80007658:	00042797          	auipc	a5,0x42
    8000765c:	9b97c783          	lbu	a5,-1607(a5) # 80049011 <excpt+0x1>
    80007660:	e7a1                	bnez	a5,800076a8 <wfi_exception_tests_12+0xea>
    80007662:	4529                	li	a0,10
    80007664:	49c1d0ef          	jal	80024b00 <putchar>
    80007668:	00042797          	auipc	a5,0x42
    8000766c:	9a97c783          	lbu	a5,-1623(a5) # 80049011 <excpt+0x1>
    80007670:	e795                	bnez	a5,8000769c <wfi_exception_tests_12+0xde>
    80007672:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007674:	00020597          	auipc	a1,0x20
    80007678:	6ac58593          	addi	a1,a1,1708 # 80027d20 <__func__.0+0x2c0>
    8000767c:	00020517          	auipc	a0,0x20
    80007680:	75c50513          	addi	a0,a0,1884 # 80027dd8 <__func__.0+0x378>
    80007684:	6721e0ef          	jal	80025cf6 <printf>
    80007688:	4511                	li	a0,4
    8000768a:	d6cf90ef          	jal	80000bf6 <goto_priv>
    8000768e:	e1ff90ef          	jal	800014ac <reset_state>
}
    80007692:	60a2                	ld	ra,8(sp)
    80007694:	8522                	mv	a0,s0
    80007696:	6402                	ld	s0,0(sp)
    80007698:	0141                	addi	sp,sp,16
    8000769a:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    8000769c:	4401                	li	s0,0
    TEST_END();
    8000769e:	00020597          	auipc	a1,0x20
    800076a2:	69258593          	addi	a1,a1,1682 # 80027d30 <__func__.0+0x2d0>
    800076a6:	bfd9                	j	8000767c <wfi_exception_tests_12+0xbe>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    800076a8:	00020517          	auipc	a0,0x20
    800076ac:	6d050513          	addi	a0,a0,1744 # 80027d78 <__func__.0+0x318>
    800076b0:	6461e0ef          	jal	80025cf6 <printf>
    800076b4:	02900513          	li	a0,41
    800076b8:	4481d0ef          	jal	80024b00 <putchar>
    800076bc:	b75d                	j	80007662 <wfi_exception_tests_12+0xa4>

00000000800076be <wfi_exception_tests_13>:

bool wfi_exception_tests_13() {
    800076be:	1141                	addi	sp,sp,-16

    TEST_START();
    800076c0:	0001f597          	auipc	a1,0x1f
    800076c4:	02058593          	addi	a1,a1,32 # 800266e0 <__func__.10>
    800076c8:	00020517          	auipc	a0,0x20
    800076cc:	67850513          	addi	a0,a0,1656 # 80027d40 <__func__.0+0x2e0>
bool wfi_exception_tests_13() {
    800076d0:	e406                	sd	ra,8(sp)
    800076d2:	e022                	sd	s0,0(sp)
    TEST_START();
    800076d4:	6221e0ef          	jal	80025cf6 <printf>
    800076d8:	4529                	li	a0,10
    800076da:	4261d0ef          	jal	80024b00 <putchar>
    //mstatus.TW=0时，在M模式下，发生中断，中断使能未拉高，中断被代理到低特权模式
    
    goto_priv(PRIV_M); 
    800076de:	4511                	li	a0,4
    800076e0:	d16f90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800076e4:	002007b7          	lui	a5,0x200
    800076e8:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_MIE, 0x0);
    800076ec:	30405073          	csrwi	mie,0
    CSRW(mideleg, (uint64_t)-1);
    800076f0:	57fd                	li	a5,-1
    800076f2:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_M);
    800076f6:	4511                	li	a0,4
    800076f8:	cfef90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800076fc:	0330000f          	fence	rw,rw
    80007700:	4785                	li	a5,1
    80007702:	00042717          	auipc	a4,0x42
    80007706:	94073323          	sd	zero,-1722(a4) # 80049048 <excpt+0x38>
    8000770a:	00042717          	auipc	a4,0x42
    8000770e:	90f71323          	sh	a5,-1786(a4) # 80049010 <excpt>
    80007712:	0330000f          	fence	rw,rw
    80007716:	10500073          	wfi
    wfi();

    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    8000771a:	08200593          	li	a1,130
    8000771e:	00022617          	auipc	a2,0x22
    80007722:	d1a60613          	addi	a2,a2,-742 # 80029438 <__func__.0+0x19d8>
    80007726:	00020517          	auipc	a0,0x20
    8000772a:	63250513          	addi	a0,a0,1586 # 80027d58 <__func__.0+0x2f8>
    8000772e:	5c81e0ef          	jal	80025cf6 <printf>
    80007732:	00042797          	auipc	a5,0x42
    80007736:	8df7c783          	lbu	a5,-1825(a5) # 80049011 <excpt+0x1>
    8000773a:	00020597          	auipc	a1,0x20
    8000773e:	5e658593          	addi	a1,a1,1510 # 80027d20 <__func__.0+0x2c0>
    80007742:	c789                	beqz	a5,8000774c <wfi_exception_tests_13+0x8e>
    80007744:	00020597          	auipc	a1,0x20
    80007748:	5ec58593          	addi	a1,a1,1516 # 80027d30 <__func__.0+0x2d0>
    8000774c:	00020517          	auipc	a0,0x20
    80007750:	62450513          	addi	a0,a0,1572 # 80027d70 <__func__.0+0x310>
    80007754:	5a21e0ef          	jal	80025cf6 <printf>
    80007758:	00042797          	auipc	a5,0x42
    8000775c:	8b97c783          	lbu	a5,-1863(a5) # 80049011 <excpt+0x1>
    80007760:	e7a1                	bnez	a5,800077a8 <wfi_exception_tests_13+0xea>
    80007762:	4529                	li	a0,10
    80007764:	39c1d0ef          	jal	80024b00 <putchar>
    80007768:	00042797          	auipc	a5,0x42
    8000776c:	8a97c783          	lbu	a5,-1879(a5) # 80049011 <excpt+0x1>
    80007770:	e795                	bnez	a5,8000779c <wfi_exception_tests_13+0xde>
    80007772:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007774:	00020597          	auipc	a1,0x20
    80007778:	5ac58593          	addi	a1,a1,1452 # 80027d20 <__func__.0+0x2c0>
    8000777c:	00020517          	auipc	a0,0x20
    80007780:	65c50513          	addi	a0,a0,1628 # 80027dd8 <__func__.0+0x378>
    80007784:	5721e0ef          	jal	80025cf6 <printf>
    80007788:	4511                	li	a0,4
    8000778a:	c6cf90ef          	jal	80000bf6 <goto_priv>
    8000778e:	d1ff90ef          	jal	800014ac <reset_state>
}
    80007792:	60a2                	ld	ra,8(sp)
    80007794:	8522                	mv	a0,s0
    80007796:	6402                	ld	s0,0(sp)
    80007798:	0141                	addi	sp,sp,16
    8000779a:	8082                	ret
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    8000779c:	4401                	li	s0,0
    TEST_END();
    8000779e:	00020597          	auipc	a1,0x20
    800077a2:	59258593          	addi	a1,a1,1426 # 80027d30 <__func__.0+0x2d0>
    800077a6:	bfd9                	j	8000777c <wfi_exception_tests_13+0xbe>
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    800077a8:	00020517          	auipc	a0,0x20
    800077ac:	5d050513          	addi	a0,a0,1488 # 80027d78 <__func__.0+0x318>
    800077b0:	5461e0ef          	jal	80025cf6 <printf>
    800077b4:	02900513          	li	a0,41
    800077b8:	3481d0ef          	jal	80024b00 <putchar>
    800077bc:	b75d                	j	80007762 <wfi_exception_tests_13+0xa4>

00000000800077be <wfi_exception_tests_14>:

bool wfi_exception_tests_14() {
    800077be:	1141                	addi	sp,sp,-16

    TEST_START();
    800077c0:	0001f597          	auipc	a1,0x1f
    800077c4:	f3858593          	addi	a1,a1,-200 # 800266f8 <__func__.9>
    800077c8:	00020517          	auipc	a0,0x20
    800077cc:	57850513          	addi	a0,a0,1400 # 80027d40 <__func__.0+0x2e0>
bool wfi_exception_tests_14() {
    800077d0:	e406                	sd	ra,8(sp)
    800077d2:	e022                	sd	s0,0(sp)
    TEST_START();
    800077d4:	5221e0ef          	jal	80025cf6 <printf>
    800077d8:	4529                	li	a0,10
    800077da:	3261d0ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    800077de:	4511                	li	a0,4
    800077e0:	c16f90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800077e4:	002007b7          	lui	a5,0x200
    800077e8:	3007b073          	csrc	mstatus,a5
    CSRS(mideleg, 0b0100); 
    800077ec:	30326073          	csrsi	mideleg,4
    CSRS(CSR_HIE, 0b0100);
    800077f0:	60426073          	csrsi	hie,4

    goto_priv(PRIV_VS);
    800077f4:	4509                	li	a0,2
    800077f6:	c00f90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800077fa:	0330000f          	fence	rw,rw
    800077fe:	4785                	li	a5,1
    80007800:	00042717          	auipc	a4,0x42
    80007804:	84073423          	sd	zero,-1976(a4) # 80049048 <excpt+0x38>
    80007808:	00042717          	auipc	a4,0x42
    8000780c:	80f71423          	sh	a5,-2040(a4) # 80049010 <excpt>
    80007810:	0330000f          	fence	rw,rw
    80007814:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007818:	08200593          	li	a1,130
    8000781c:	00022617          	auipc	a2,0x22
    80007820:	adc60613          	addi	a2,a2,-1316 # 800292f8 <__func__.0+0x1898>
    80007824:	00020517          	auipc	a0,0x20
    80007828:	53450513          	addi	a0,a0,1332 # 80027d58 <__func__.0+0x2f8>
    8000782c:	4ca1e0ef          	jal	80025cf6 <printf>
    80007830:	00041797          	auipc	a5,0x41
    80007834:	7e17c783          	lbu	a5,2017(a5) # 80049011 <excpt+0x1>
    80007838:	00020597          	auipc	a1,0x20
    8000783c:	4e858593          	addi	a1,a1,1256 # 80027d20 <__func__.0+0x2c0>
    80007840:	c789                	beqz	a5,8000784a <wfi_exception_tests_14+0x8c>
    80007842:	00020597          	auipc	a1,0x20
    80007846:	4ee58593          	addi	a1,a1,1262 # 80027d30 <__func__.0+0x2d0>
    8000784a:	00020517          	auipc	a0,0x20
    8000784e:	52650513          	addi	a0,a0,1318 # 80027d70 <__func__.0+0x310>
    80007852:	4a41e0ef          	jal	80025cf6 <printf>
    80007856:	00041797          	auipc	a5,0x41
    8000785a:	7bb7c783          	lbu	a5,1979(a5) # 80049011 <excpt+0x1>
    8000785e:	e7a1                	bnez	a5,800078a6 <wfi_exception_tests_14+0xe8>
    80007860:	4529                	li	a0,10
    80007862:	29e1d0ef          	jal	80024b00 <putchar>
    80007866:	00041797          	auipc	a5,0x41
    8000786a:	7ab7c783          	lbu	a5,1963(a5) # 80049011 <excpt+0x1>
    8000786e:	e795                	bnez	a5,8000789a <wfi_exception_tests_14+0xdc>
    80007870:	4405                	li	s0,1
        excpt.triggered == false
    ); 
    
    TEST_END();
    80007872:	00020597          	auipc	a1,0x20
    80007876:	4ae58593          	addi	a1,a1,1198 # 80027d20 <__func__.0+0x2c0>
    8000787a:	00020517          	auipc	a0,0x20
    8000787e:	55e50513          	addi	a0,a0,1374 # 80027dd8 <__func__.0+0x378>
    80007882:	4741e0ef          	jal	80025cf6 <printf>
    80007886:	4511                	li	a0,4
    80007888:	b6ef90ef          	jal	80000bf6 <goto_priv>
    8000788c:	c21f90ef          	jal	800014ac <reset_state>
}
    80007890:	60a2                	ld	ra,8(sp)
    80007892:	8522                	mv	a0,s0
    80007894:	6402                	ld	s0,0(sp)
    80007896:	0141                	addi	sp,sp,16
    80007898:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    8000789a:	4401                	li	s0,0
    TEST_END();
    8000789c:	00020597          	auipc	a1,0x20
    800078a0:	49458593          	addi	a1,a1,1172 # 80027d30 <__func__.0+0x2d0>
    800078a4:	bfd9                	j	8000787a <wfi_exception_tests_14+0xbc>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    800078a6:	00020517          	auipc	a0,0x20
    800078aa:	4d250513          	addi	a0,a0,1234 # 80027d78 <__func__.0+0x318>
    800078ae:	4481e0ef          	jal	80025cf6 <printf>
    800078b2:	02900513          	li	a0,41
    800078b6:	24a1d0ef          	jal	80024b00 <putchar>
    800078ba:	b75d                	j	80007860 <wfi_exception_tests_14+0xa2>

00000000800078bc <wfi_exception_tests_15>:



bool wfi_exception_tests_15() {
    800078bc:	1101                	addi	sp,sp,-32

    TEST_START();
    800078be:	0001f597          	auipc	a1,0x1f
    800078c2:	e5258593          	addi	a1,a1,-430 # 80026710 <__func__.8>
    800078c6:	00020517          	auipc	a0,0x20
    800078ca:	47a50513          	addi	a0,a0,1146 # 80027d40 <__func__.0+0x2e0>
bool wfi_exception_tests_15() {
    800078ce:	ec06                	sd	ra,24(sp)
    800078d0:	e822                	sd	s0,16(sp)
    800078d2:	e426                	sd	s1,8(sp)
    TEST_START();
    800078d4:	4221e0ef          	jal	80025cf6 <printf>
    800078d8:	4529                	li	a0,10
    800078da:	2261d0ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    800078de:	4511                	li	a0,4
    800078e0:	b16f90ef          	jal	80000bf6 <goto_priv>
    CSRS(mstatus, MSTATUS_TW);
    800078e4:	002007b7          	lui	a5,0x200
    800078e8:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    800078ec:	450d                	li	a0,3
    800078ee:	b08f90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800078f2:	0330000f          	fence	rw,rw
    800078f6:	00041417          	auipc	s0,0x41
    800078fa:	71a40413          	addi	s0,s0,1818 # 80049010 <excpt>
    800078fe:	4785                	li	a5,1
    80007900:	00041717          	auipc	a4,0x41
    80007904:	74073423          	sd	zero,1864(a4) # 80049048 <excpt+0x38>
    80007908:	00f41023          	sh	a5,0(s0)
    8000790c:	0330000f          	fence	rw,rw
    80007910:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    80007914:	08200593          	li	a1,130
    80007918:	00022617          	auipc	a2,0x22
    8000791c:	b6860613          	addi	a2,a2,-1176 # 80029480 <__func__.0+0x1a20>
    80007920:	00020517          	auipc	a0,0x20
    80007924:	43850513          	addi	a0,a0,1080 # 80027d58 <__func__.0+0x2f8>
    80007928:	3ce1e0ef          	jal	80025cf6 <printf>
    8000792c:	00041797          	auipc	a5,0x41
    80007930:	6e57c783          	lbu	a5,1765(a5) # 80049011 <excpt+0x1>
    80007934:	00020597          	auipc	a1,0x20
    80007938:	3fc58593          	addi	a1,a1,1020 # 80027d30 <__func__.0+0x2d0>
    8000793c:	cf89                	beqz	a5,80007956 <wfi_exception_tests_15+0x9a>
    8000793e:	6418                	ld	a4,8(s0)
    80007940:	4789                	li	a5,2
    80007942:	00020597          	auipc	a1,0x20
    80007946:	3de58593          	addi	a1,a1,990 # 80027d20 <__func__.0+0x2c0>
    8000794a:	00f70663          	beq	a4,a5,80007956 <wfi_exception_tests_15+0x9a>
    8000794e:	00020597          	auipc	a1,0x20
    80007952:	3e258593          	addi	a1,a1,994 # 80027d30 <__func__.0+0x2d0>
    80007956:	00020517          	auipc	a0,0x20
    8000795a:	41a50513          	addi	a0,a0,1050 # 80027d70 <__func__.0+0x310>
    8000795e:	3981e0ef          	jal	80025cf6 <printf>
    80007962:	00041797          	auipc	a5,0x41
    80007966:	6af7c783          	lbu	a5,1711(a5) # 80049011 <excpt+0x1>
    8000796a:	c789                	beqz	a5,80007974 <wfi_exception_tests_15+0xb8>
    8000796c:	6418                	ld	a4,8(s0)
    8000796e:	4789                	li	a5,2
    80007970:	00f70c63          	beq	a4,a5,80007988 <wfi_exception_tests_15+0xcc>
    80007974:	00020517          	auipc	a0,0x20
    80007978:	40450513          	addi	a0,a0,1028 # 80027d78 <__func__.0+0x318>
    8000797c:	37a1e0ef          	jal	80025cf6 <printf>
    80007980:	02900513          	li	a0,41
    80007984:	17c1d0ef          	jal	80024b00 <putchar>
    80007988:	4529                	li	a0,10
    8000798a:	1761d0ef          	jal	80024b00 <putchar>
    8000798e:	00041497          	auipc	s1,0x41
    80007992:	6834c483          	lbu	s1,1667(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80007996:	00020597          	auipc	a1,0x20
    8000799a:	39a58593          	addi	a1,a1,922 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    8000799e:	cc91                	beqz	s1,800079ba <wfi_exception_tests_15+0xfe>
    800079a0:	6418                	ld	a4,8(s0)
    800079a2:	4789                	li	a5,2
    TEST_END();
    800079a4:	00020597          	auipc	a1,0x20
    800079a8:	37c58593          	addi	a1,a1,892 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    800079ac:	00f70763          	beq	a4,a5,800079ba <wfi_exception_tests_15+0xfe>
    800079b0:	4481                	li	s1,0
    TEST_END();
    800079b2:	00020597          	auipc	a1,0x20
    800079b6:	37e58593          	addi	a1,a1,894 # 80027d30 <__func__.0+0x2d0>
    800079ba:	00020517          	auipc	a0,0x20
    800079be:	41e50513          	addi	a0,a0,1054 # 80027dd8 <__func__.0+0x378>
    800079c2:	3341e0ef          	jal	80025cf6 <printf>
    800079c6:	4511                	li	a0,4
    800079c8:	a2ef90ef          	jal	80000bf6 <goto_priv>
    800079cc:	ae1f90ef          	jal	800014ac <reset_state>
}
    800079d0:	60e2                	ld	ra,24(sp)
    800079d2:	6442                	ld	s0,16(sp)
    800079d4:	8526                	mv	a0,s1
    800079d6:	64a2                	ld	s1,8(sp)
    800079d8:	6105                	addi	sp,sp,32
    800079da:	8082                	ret

00000000800079dc <wfi_exception_tests_16>:
     * Delegate the pending interrupt to hs mode so it doesnt immediately 
     * trigger a trap to machine when we jump to vs.
     */


bool wfi_exception_tests_16() {
    800079dc:	1101                	addi	sp,sp,-32

    TEST_START();
    800079de:	0001f597          	auipc	a1,0x1f
    800079e2:	d4a58593          	addi	a1,a1,-694 # 80026728 <__func__.7>
    800079e6:	00020517          	auipc	a0,0x20
    800079ea:	35a50513          	addi	a0,a0,858 # 80027d40 <__func__.0+0x2e0>
bool wfi_exception_tests_16() {
    800079ee:	ec06                	sd	ra,24(sp)
    800079f0:	e822                	sd	s0,16(sp)
    800079f2:	e426                	sd	s1,8(sp)
    TEST_START();
    800079f4:	3021e0ef          	jal	80025cf6 <printf>
    800079f8:	4529                	li	a0,10
    800079fa:	1061d0ef          	jal	80024b00 <putchar>
    CSRS(mstatus, MSTATUS_TW);
    800079fe:	002007b7          	lui	a5,0x200
    80007a02:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_HIDELEG, 0b0100);      
    80007a06:	60326073          	csrsi	hideleg,4
    CSRS(CSR_VSIE, 0b0010);           
    80007a0a:	20416073          	csrsi	vsie,2
    
    goto_priv(PRIV_VS);
    80007a0e:	4509                	li	a0,2
    80007a10:	9e6f90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007a14:	0330000f          	fence	rw,rw
    80007a18:	00041497          	auipc	s1,0x41
    80007a1c:	5f848493          	addi	s1,s1,1528 # 80049010 <excpt>
    80007a20:	4785                	li	a5,1
    80007a22:	00041717          	auipc	a4,0x41
    80007a26:	62073323          	sd	zero,1574(a4) # 80049048 <excpt+0x38>
    80007a2a:	00f49023          	sh	a5,0(s1)
    80007a2e:	0330000f          	fence	rw,rw
    80007a32:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    80007a36:	08200593          	li	a1,130
    80007a3a:	00022617          	auipc	a2,0x22
    80007a3e:	a8e60613          	addi	a2,a2,-1394 # 800294c8 <__func__.0+0x1a68>
    80007a42:	00020517          	auipc	a0,0x20
    80007a46:	31650513          	addi	a0,a0,790 # 80027d58 <__func__.0+0x2f8>
    80007a4a:	2ac1e0ef          	jal	80025cf6 <printf>
    80007a4e:	00041797          	auipc	a5,0x41
    80007a52:	5c37c783          	lbu	a5,1475(a5) # 80049011 <excpt+0x1>
    80007a56:	00020597          	auipc	a1,0x20
    80007a5a:	2da58593          	addi	a1,a1,730 # 80027d30 <__func__.0+0x2d0>
    80007a5e:	cf89                	beqz	a5,80007a78 <wfi_exception_tests_16+0x9c>
    80007a60:	6498                	ld	a4,8(s1)
    80007a62:	4789                	li	a5,2
    80007a64:	00020597          	auipc	a1,0x20
    80007a68:	2bc58593          	addi	a1,a1,700 # 80027d20 <__func__.0+0x2c0>
    80007a6c:	00f70663          	beq	a4,a5,80007a78 <wfi_exception_tests_16+0x9c>
    80007a70:	00020597          	auipc	a1,0x20
    80007a74:	2c058593          	addi	a1,a1,704 # 80027d30 <__func__.0+0x2d0>
    80007a78:	00020517          	auipc	a0,0x20
    80007a7c:	2f850513          	addi	a0,a0,760 # 80027d70 <__func__.0+0x310>
    80007a80:	2761e0ef          	jal	80025cf6 <printf>
    80007a84:	00041797          	auipc	a5,0x41
    80007a88:	58d7c783          	lbu	a5,1421(a5) # 80049011 <excpt+0x1>
    80007a8c:	c789                	beqz	a5,80007a96 <wfi_exception_tests_16+0xba>
    80007a8e:	6498                	ld	a4,8(s1)
    80007a90:	4789                	li	a5,2
    80007a92:	00f70c63          	beq	a4,a5,80007aaa <wfi_exception_tests_16+0xce>
    80007a96:	00020517          	auipc	a0,0x20
    80007a9a:	2e250513          	addi	a0,a0,738 # 80027d78 <__func__.0+0x318>
    80007a9e:	2581e0ef          	jal	80025cf6 <printf>
    80007aa2:	02900513          	li	a0,41
    80007aa6:	05a1d0ef          	jal	80024b00 <putchar>
    80007aaa:	4529                	li	a0,10
    80007aac:	0541d0ef          	jal	80024b00 <putchar>
    80007ab0:	00041417          	auipc	s0,0x41
    80007ab4:	56144403          	lbu	s0,1377(s0) # 80049011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    goto_priv(PRIV_M);
    80007ab8:	4511                	li	a0,4
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    80007aba:	c409                	beqz	s0,80007ac4 <wfi_exception_tests_16+0xe8>
    80007abc:	6498                	ld	a4,8(s1)
    80007abe:	4789                	li	a5,2
    80007ac0:	02f70e63          	beq	a4,a5,80007afc <wfi_exception_tests_16+0x120>
    goto_priv(PRIV_M);
    80007ac4:	932f90ef          	jal	80000bf6 <goto_priv>
    CSRC(mstatus, MSTATUS_TW);
    80007ac8:	002007b7          	lui	a5,0x200
    80007acc:	3007b073          	csrc	mstatus,a5
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    80007ad0:	4401                	li	s0,0
    TEST_END();
    80007ad2:	00020597          	auipc	a1,0x20
    80007ad6:	25e58593          	addi	a1,a1,606 # 80027d30 <__func__.0+0x2d0>
    80007ada:	00020517          	auipc	a0,0x20
    80007ade:	2fe50513          	addi	a0,a0,766 # 80027dd8 <__func__.0+0x378>
    80007ae2:	2141e0ef          	jal	80025cf6 <printf>
    80007ae6:	4511                	li	a0,4
    80007ae8:	90ef90ef          	jal	80000bf6 <goto_priv>
    80007aec:	9c1f90ef          	jal	800014ac <reset_state>
}
    80007af0:	60e2                	ld	ra,24(sp)
    80007af2:	8522                	mv	a0,s0
    80007af4:	6442                	ld	s0,16(sp)
    80007af6:	64a2                	ld	s1,8(sp)
    80007af8:	6105                	addi	sp,sp,32
    80007afa:	8082                	ret
    goto_priv(PRIV_M);
    80007afc:	8faf90ef          	jal	80000bf6 <goto_priv>
    CSRC(mstatus, MSTATUS_TW);
    80007b00:	002007b7          	lui	a5,0x200
    80007b04:	3007b073          	csrc	mstatus,a5
    TEST_END();
    80007b08:	00020597          	auipc	a1,0x20
    80007b0c:	21858593          	addi	a1,a1,536 # 80027d20 <__func__.0+0x2c0>
    80007b10:	b7e9                	j	80007ada <wfi_exception_tests_16+0xfe>

0000000080007b12 <wfi_exception_tests_17>:

bool wfi_exception_tests_17() {
    80007b12:	1141                	addi	sp,sp,-16

    TEST_START();
    80007b14:	0001f597          	auipc	a1,0x1f
    80007b18:	c2c58593          	addi	a1,a1,-980 # 80026740 <__func__.6>
    80007b1c:	00020517          	auipc	a0,0x20
    80007b20:	22450513          	addi	a0,a0,548 # 80027d40 <__func__.0+0x2e0>
bool wfi_exception_tests_17() {
    80007b24:	e406                	sd	ra,8(sp)
    80007b26:	e022                	sd	s0,0(sp)
    TEST_START();
    80007b28:	1ce1e0ef          	jal	80025cf6 <printf>
    80007b2c:	4529                	li	a0,10
    80007b2e:	7d31c0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    80007b32:	4511                	li	a0,4
    80007b34:	8c2f90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007b38:	002007b7          	lui	a5,0x200
    80007b3c:	3007b073          	csrc	mstatus,a5
    CSRC(CSR_HSTATUS,HSTATUS_VTW);
    80007b40:	6007b073          	csrc	hstatus,a5

    goto_priv(PRIV_VS);
    80007b44:	4509                	li	a0,2
    80007b46:	8b0f90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007b4a:	0330000f          	fence	rw,rw
    80007b4e:	4785                	li	a5,1
    80007b50:	00041717          	auipc	a4,0x41
    80007b54:	4e073c23          	sd	zero,1272(a4) # 80049048 <excpt+0x38>
    80007b58:	00041717          	auipc	a4,0x41
    80007b5c:	4af71c23          	sh	a5,1208(a4) # 80049010 <excpt>
    80007b60:	0330000f          	fence	rw,rw
    80007b64:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    80007b68:	08200593          	li	a1,130
    80007b6c:	00022617          	auipc	a2,0x22
    80007b70:	9a460613          	addi	a2,a2,-1628 # 80029510 <__func__.0+0x1ab0>
    80007b74:	00020517          	auipc	a0,0x20
    80007b78:	1e450513          	addi	a0,a0,484 # 80027d58 <__func__.0+0x2f8>
    80007b7c:	17a1e0ef          	jal	80025cf6 <printf>
    80007b80:	00041797          	auipc	a5,0x41
    80007b84:	4917c783          	lbu	a5,1169(a5) # 80049011 <excpt+0x1>
    80007b88:	00020597          	auipc	a1,0x20
    80007b8c:	19858593          	addi	a1,a1,408 # 80027d20 <__func__.0+0x2c0>
    80007b90:	c789                	beqz	a5,80007b9a <wfi_exception_tests_17+0x88>
    80007b92:	00020597          	auipc	a1,0x20
    80007b96:	19e58593          	addi	a1,a1,414 # 80027d30 <__func__.0+0x2d0>
    80007b9a:	00020517          	auipc	a0,0x20
    80007b9e:	1d650513          	addi	a0,a0,470 # 80027d70 <__func__.0+0x310>
    80007ba2:	1541e0ef          	jal	80025cf6 <printf>
    80007ba6:	00041797          	auipc	a5,0x41
    80007baa:	46b7c783          	lbu	a5,1131(a5) # 80049011 <excpt+0x1>
    80007bae:	e7a1                	bnez	a5,80007bf6 <wfi_exception_tests_17+0xe4>
    80007bb0:	4529                	li	a0,10
    80007bb2:	74f1c0ef          	jal	80024b00 <putchar>
    80007bb6:	00041797          	auipc	a5,0x41
    80007bba:	45b7c783          	lbu	a5,1115(a5) # 80049011 <excpt+0x1>
    80007bbe:	e795                	bnez	a5,80007bea <wfi_exception_tests_17+0xd8>
    80007bc0:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007bc2:	00020597          	auipc	a1,0x20
    80007bc6:	15e58593          	addi	a1,a1,350 # 80027d20 <__func__.0+0x2c0>
    80007bca:	00020517          	auipc	a0,0x20
    80007bce:	20e50513          	addi	a0,a0,526 # 80027dd8 <__func__.0+0x378>
    80007bd2:	1241e0ef          	jal	80025cf6 <printf>
    80007bd6:	4511                	li	a0,4
    80007bd8:	81ef90ef          	jal	80000bf6 <goto_priv>
    80007bdc:	8d1f90ef          	jal	800014ac <reset_state>
}
    80007be0:	60a2                	ld	ra,8(sp)
    80007be2:	8522                	mv	a0,s0
    80007be4:	6402                	ld	s0,0(sp)
    80007be6:	0141                	addi	sp,sp,16
    80007be8:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    80007bea:	4401                	li	s0,0
    TEST_END();
    80007bec:	00020597          	auipc	a1,0x20
    80007bf0:	14458593          	addi	a1,a1,324 # 80027d30 <__func__.0+0x2d0>
    80007bf4:	bfd9                	j	80007bca <wfi_exception_tests_17+0xb8>
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    80007bf6:	00020517          	auipc	a0,0x20
    80007bfa:	18250513          	addi	a0,a0,386 # 80027d78 <__func__.0+0x318>
    80007bfe:	0f81e0ef          	jal	80025cf6 <printf>
    80007c02:	02900513          	li	a0,41
    80007c06:	6fb1c0ef          	jal	80024b00 <putchar>
    80007c0a:	b75d                	j	80007bb0 <wfi_exception_tests_17+0x9e>

0000000080007c0c <wfi_exception_tests_18>:


bool wfi_exception_tests_18() {
    80007c0c:	1101                	addi	sp,sp,-32

    TEST_START();
    80007c0e:	0001f597          	auipc	a1,0x1f
    80007c12:	b4a58593          	addi	a1,a1,-1206 # 80026758 <__func__.5>
    80007c16:	00020517          	auipc	a0,0x20
    80007c1a:	12a50513          	addi	a0,a0,298 # 80027d40 <__func__.0+0x2e0>
bool wfi_exception_tests_18() {
    80007c1e:	ec06                	sd	ra,24(sp)
    80007c20:	e822                	sd	s0,16(sp)
    80007c22:	e426                	sd	s1,8(sp)
    TEST_START();
    80007c24:	0d21e0ef          	jal	80025cf6 <printf>
    80007c28:	4529                	li	a0,10
    80007c2a:	6d71c0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    80007c2e:	4511                	li	a0,4
    80007c30:	fc7f80ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);  
    80007c34:	002007b7          	lui	a5,0x200
    80007c38:	6007a073          	csrs	hstatus,a5

    goto_priv(PRIV_VS);
    80007c3c:	4509                	li	a0,2
    80007c3e:	fb9f80ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007c42:	0330000f          	fence	rw,rw
    80007c46:	00041417          	auipc	s0,0x41
    80007c4a:	3ca40413          	addi	s0,s0,970 # 80049010 <excpt>
    80007c4e:	4785                	li	a5,1
    80007c50:	00041717          	auipc	a4,0x41
    80007c54:	3e073c23          	sd	zero,1016(a4) # 80049048 <excpt+0x38>
    80007c58:	00f41023          	sh	a5,0(s0)
    80007c5c:	0330000f          	fence	rw,rw
    80007c60:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    80007c64:	08200593          	li	a1,130
    80007c68:	00022617          	auipc	a2,0x22
    80007c6c:	8f060613          	addi	a2,a2,-1808 # 80029558 <__func__.0+0x1af8>
    80007c70:	00020517          	auipc	a0,0x20
    80007c74:	0e850513          	addi	a0,a0,232 # 80027d58 <__func__.0+0x2f8>
    80007c78:	07e1e0ef          	jal	80025cf6 <printf>
    80007c7c:	00041797          	auipc	a5,0x41
    80007c80:	3957c783          	lbu	a5,917(a5) # 80049011 <excpt+0x1>
    80007c84:	00020597          	auipc	a1,0x20
    80007c88:	0ac58593          	addi	a1,a1,172 # 80027d30 <__func__.0+0x2d0>
    80007c8c:	cf89                	beqz	a5,80007ca6 <wfi_exception_tests_18+0x9a>
    80007c8e:	6418                	ld	a4,8(s0)
    80007c90:	47d9                	li	a5,22
    80007c92:	00020597          	auipc	a1,0x20
    80007c96:	08e58593          	addi	a1,a1,142 # 80027d20 <__func__.0+0x2c0>
    80007c9a:	00f70663          	beq	a4,a5,80007ca6 <wfi_exception_tests_18+0x9a>
    80007c9e:	00020597          	auipc	a1,0x20
    80007ca2:	09258593          	addi	a1,a1,146 # 80027d30 <__func__.0+0x2d0>
    80007ca6:	00020517          	auipc	a0,0x20
    80007caa:	0ca50513          	addi	a0,a0,202 # 80027d70 <__func__.0+0x310>
    80007cae:	0481e0ef          	jal	80025cf6 <printf>
    80007cb2:	00041797          	auipc	a5,0x41
    80007cb6:	35f7c783          	lbu	a5,863(a5) # 80049011 <excpt+0x1>
    80007cba:	c789                	beqz	a5,80007cc4 <wfi_exception_tests_18+0xb8>
    80007cbc:	6418                	ld	a4,8(s0)
    80007cbe:	47d9                	li	a5,22
    80007cc0:	00f70c63          	beq	a4,a5,80007cd8 <wfi_exception_tests_18+0xcc>
    80007cc4:	00020517          	auipc	a0,0x20
    80007cc8:	0b450513          	addi	a0,a0,180 # 80027d78 <__func__.0+0x318>
    80007ccc:	02a1e0ef          	jal	80025cf6 <printf>
    80007cd0:	02900513          	li	a0,41
    80007cd4:	62d1c0ef          	jal	80024b00 <putchar>
    80007cd8:	4529                	li	a0,10
    80007cda:	6271c0ef          	jal	80024b00 <putchar>
    80007cde:	00041497          	auipc	s1,0x41
    80007ce2:	3334c483          	lbu	s1,819(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80007ce6:	00020597          	auipc	a1,0x20
    80007cea:	04a58593          	addi	a1,a1,74 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    80007cee:	cc91                	beqz	s1,80007d0a <wfi_exception_tests_18+0xfe>
    80007cf0:	6418                	ld	a4,8(s0)
    80007cf2:	47d9                	li	a5,22
    TEST_END();
    80007cf4:	00020597          	auipc	a1,0x20
    80007cf8:	02c58593          	addi	a1,a1,44 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    80007cfc:	00f70763          	beq	a4,a5,80007d0a <wfi_exception_tests_18+0xfe>
    80007d00:	4481                	li	s1,0
    TEST_END();
    80007d02:	00020597          	auipc	a1,0x20
    80007d06:	02e58593          	addi	a1,a1,46 # 80027d30 <__func__.0+0x2d0>
    80007d0a:	00020517          	auipc	a0,0x20
    80007d0e:	0ce50513          	addi	a0,a0,206 # 80027dd8 <__func__.0+0x378>
    80007d12:	7e51d0ef          	jal	80025cf6 <printf>
    80007d16:	4511                	li	a0,4
    80007d18:	edff80ef          	jal	80000bf6 <goto_priv>
    80007d1c:	f90f90ef          	jal	800014ac <reset_state>
}
    80007d20:	60e2                	ld	ra,24(sp)
    80007d22:	6442                	ld	s0,16(sp)
    80007d24:	8526                	mv	a0,s1
    80007d26:	64a2                	ld	s1,8(sp)
    80007d28:	6105                	addi	sp,sp,32
    80007d2a:	8082                	ret

0000000080007d2c <wfi_exception_tests_19>:

bool wfi_exception_tests_19() {
    80007d2c:	1101                	addi	sp,sp,-32

    TEST_START();
    80007d2e:	0001f597          	auipc	a1,0x1f
    80007d32:	a4258593          	addi	a1,a1,-1470 # 80026770 <__func__.4>
    80007d36:	00020517          	auipc	a0,0x20
    80007d3a:	00a50513          	addi	a0,a0,10 # 80027d40 <__func__.0+0x2e0>
bool wfi_exception_tests_19() {
    80007d3e:	ec06                	sd	ra,24(sp)
    80007d40:	e822                	sd	s0,16(sp)
    80007d42:	e426                	sd	s1,8(sp)
    TEST_START();
    80007d44:	7b31d0ef          	jal	80025cf6 <printf>
    80007d48:	4529                	li	a0,10
    80007d4a:	5b71c0ef          	jal	80024b00 <putchar>
    //V=1&mstatus.TW=0 , hstatus.vtw=1时，在VS模式下执行WFI指令，并未在一个约定时间内产生中断
    goto_priv(PRIV_M);
    80007d4e:	4511                	li	a0,4
    80007d50:	ea7f80ef          	jal	80000bf6 <goto_priv>

    CSRW(CSR_SIE, 0x0);
    80007d54:	10405073          	csrwi	sie,0
    CSRS(CSR_HSTATUS,HSTATUS_VTW);
    80007d58:	002007b7          	lui	a5,0x200
    80007d5c:	6007a073          	csrs	hstatus,a5
    CSRC(mstatus, MSTATUS_TW);
    80007d60:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_VS);
    80007d64:	4509                	li	a0,2
    80007d66:	e91f80ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007d6a:	0330000f          	fence	rw,rw
    80007d6e:	00041417          	auipc	s0,0x41
    80007d72:	2a240413          	addi	s0,s0,674 # 80049010 <excpt>
    80007d76:	4785                	li	a5,1
    80007d78:	00041717          	auipc	a4,0x41
    80007d7c:	2c073823          	sd	zero,720(a4) # 80049048 <excpt+0x38>
    80007d80:	00f41023          	sh	a5,0(s0)
    80007d84:	0330000f          	fence	rw,rw
    80007d88:	10500073          	wfi
    wfi();
        printf("%d\n",excpt.cause);
    80007d8c:	640c                	ld	a1,8(s0)
    80007d8e:	00021517          	auipc	a0,0x21
    80007d92:	afa50513          	addi	a0,a0,-1286 # 80028888 <__func__.0+0xe28>
    80007d96:	7611d0ef          	jal	80025cf6 <printf>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    80007d9a:	08200593          	li	a1,130
    80007d9e:	00022617          	auipc	a2,0x22
    80007da2:	80260613          	addi	a2,a2,-2046 # 800295a0 <__func__.0+0x1b40>
    80007da6:	00020517          	auipc	a0,0x20
    80007daa:	fb250513          	addi	a0,a0,-78 # 80027d58 <__func__.0+0x2f8>
    80007dae:	7491d0ef          	jal	80025cf6 <printf>
    80007db2:	00041797          	auipc	a5,0x41
    80007db6:	25f7c783          	lbu	a5,607(a5) # 80049011 <excpt+0x1>
    80007dba:	00020597          	auipc	a1,0x20
    80007dbe:	f7658593          	addi	a1,a1,-138 # 80027d30 <__func__.0+0x2d0>
    80007dc2:	cf89                	beqz	a5,80007ddc <wfi_exception_tests_19+0xb0>
    80007dc4:	6418                	ld	a4,8(s0)
    80007dc6:	47d9                	li	a5,22
    80007dc8:	00020597          	auipc	a1,0x20
    80007dcc:	f5858593          	addi	a1,a1,-168 # 80027d20 <__func__.0+0x2c0>
    80007dd0:	00f70663          	beq	a4,a5,80007ddc <wfi_exception_tests_19+0xb0>
    80007dd4:	00020597          	auipc	a1,0x20
    80007dd8:	f5c58593          	addi	a1,a1,-164 # 80027d30 <__func__.0+0x2d0>
    80007ddc:	00020517          	auipc	a0,0x20
    80007de0:	f9450513          	addi	a0,a0,-108 # 80027d70 <__func__.0+0x310>
    80007de4:	7131d0ef          	jal	80025cf6 <printf>
    80007de8:	00041797          	auipc	a5,0x41
    80007dec:	2297c783          	lbu	a5,553(a5) # 80049011 <excpt+0x1>
    80007df0:	c789                	beqz	a5,80007dfa <wfi_exception_tests_19+0xce>
    80007df2:	6418                	ld	a4,8(s0)
    80007df4:	47d9                	li	a5,22
    80007df6:	00f70c63          	beq	a4,a5,80007e0e <wfi_exception_tests_19+0xe2>
    80007dfa:	00020517          	auipc	a0,0x20
    80007dfe:	f7e50513          	addi	a0,a0,-130 # 80027d78 <__func__.0+0x318>
    80007e02:	6f51d0ef          	jal	80025cf6 <printf>
    80007e06:	02900513          	li	a0,41
    80007e0a:	4f71c0ef          	jal	80024b00 <putchar>
    80007e0e:	4529                	li	a0,10
    80007e10:	4f11c0ef          	jal	80024b00 <putchar>
    80007e14:	00041497          	auipc	s1,0x41
    80007e18:	1fd4c483          	lbu	s1,509(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80007e1c:	00020597          	auipc	a1,0x20
    80007e20:	f1458593          	addi	a1,a1,-236 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    80007e24:	cc91                	beqz	s1,80007e40 <wfi_exception_tests_19+0x114>
    80007e26:	6418                	ld	a4,8(s0)
    80007e28:	47d9                	li	a5,22
    TEST_END();
    80007e2a:	00020597          	auipc	a1,0x20
    80007e2e:	ef658593          	addi	a1,a1,-266 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    80007e32:	00f70763          	beq	a4,a5,80007e40 <wfi_exception_tests_19+0x114>
    80007e36:	4481                	li	s1,0
    TEST_END();
    80007e38:	00020597          	auipc	a1,0x20
    80007e3c:	ef858593          	addi	a1,a1,-264 # 80027d30 <__func__.0+0x2d0>
    80007e40:	00020517          	auipc	a0,0x20
    80007e44:	f9850513          	addi	a0,a0,-104 # 80027dd8 <__func__.0+0x378>
    80007e48:	6af1d0ef          	jal	80025cf6 <printf>
    80007e4c:	4511                	li	a0,4
    80007e4e:	da9f80ef          	jal	80000bf6 <goto_priv>
    80007e52:	e5af90ef          	jal	800014ac <reset_state>
}
    80007e56:	60e2                	ld	ra,24(sp)
    80007e58:	6442                	ld	s0,16(sp)
    80007e5a:	8526                	mv	a0,s1
    80007e5c:	64a2                	ld	s1,8(sp)
    80007e5e:	6105                	addi	sp,sp,32
    80007e60:	8082                	ret

0000000080007e62 <wfi_exception_tests_20>:





bool wfi_exception_tests_20() {
    80007e62:	1101                	addi	sp,sp,-32

    TEST_START();
    80007e64:	0001f597          	auipc	a1,0x1f
    80007e68:	92458593          	addi	a1,a1,-1756 # 80026788 <__func__.3>
    80007e6c:	00020517          	auipc	a0,0x20
    80007e70:	ed450513          	addi	a0,a0,-300 # 80027d40 <__func__.0+0x2e0>
bool wfi_exception_tests_20() {
    80007e74:	ec06                	sd	ra,24(sp)
    80007e76:	e822                	sd	s0,16(sp)
    80007e78:	e426                	sd	s1,8(sp)
    TEST_START();
    80007e7a:	67d1d0ef          	jal	80025cf6 <printf>
    80007e7e:	4529                	li	a0,10
    80007e80:	4811c0ef          	jal	80024b00 <putchar>
    
    TEST_SETUP_EXCEPT();
    80007e84:	0330000f          	fence	rw,rw
    80007e88:	00041417          	auipc	s0,0x41
    80007e8c:	18840413          	addi	s0,s0,392 # 80049010 <excpt>
    80007e90:	4485                	li	s1,1
    80007e92:	00041797          	auipc	a5,0x41
    80007e96:	1a07bb23          	sd	zero,438(a5) # 80049048 <excpt+0x38>
    80007e9a:	00941023          	sh	s1,0(s0)
    80007e9e:	0330000f          	fence	rw,rw
    //mstatus.TW=0时，在HS模式下，中断未被禁用，且代理打开，执行wfi指令
    goto_priv(PRIV_M);
    80007ea2:	4511                	li	a0,4
    80007ea4:	d53f80ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007ea8:	002007b7          	lui	a5,0x200
    80007eac:	3007b073          	csrc	mstatus,a5

    CSRS(CSR_HIE, 0b0100);
    80007eb0:	60426073          	csrsi	hie,4
    CSRS(CSR_HIP, 0b0100);
    80007eb4:	64426073          	csrsi	hip,4
    CSRS(mideleg, 0b0100);
    80007eb8:	30326073          	csrsi	mideleg,4

    goto_priv(PRIV_HS);
    80007ebc:	450d                	li	a0,3
    80007ebe:	d39f80ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007ec2:	0330000f          	fence	rw,rw
    80007ec6:	00041797          	auipc	a5,0x41
    80007eca:	1807b123          	sd	zero,386(a5) # 80049048 <excpt+0x38>
    80007ece:	00941023          	sh	s1,0(s0)
    80007ed2:	0330000f          	fence	rw,rw
    80007ed6:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007eda:	08200593          	li	a1,130
    80007ede:	00021617          	auipc	a2,0x21
    80007ee2:	70a60613          	addi	a2,a2,1802 # 800295e8 <__func__.0+0x1b88>
    80007ee6:	00020517          	auipc	a0,0x20
    80007eea:	e7250513          	addi	a0,a0,-398 # 80027d58 <__func__.0+0x2f8>
    80007eee:	6091d0ef          	jal	80025cf6 <printf>
    80007ef2:	00041797          	auipc	a5,0x41
    80007ef6:	11f7c783          	lbu	a5,287(a5) # 80049011 <excpt+0x1>
    80007efa:	00020597          	auipc	a1,0x20
    80007efe:	e2658593          	addi	a1,a1,-474 # 80027d20 <__func__.0+0x2c0>
    80007f02:	c789                	beqz	a5,80007f0c <wfi_exception_tests_20+0xaa>
    80007f04:	00020597          	auipc	a1,0x20
    80007f08:	e2c58593          	addi	a1,a1,-468 # 80027d30 <__func__.0+0x2d0>
    80007f0c:	00020517          	auipc	a0,0x20
    80007f10:	e6450513          	addi	a0,a0,-412 # 80027d70 <__func__.0+0x310>
    80007f14:	5e31d0ef          	jal	80025cf6 <printf>
    80007f18:	00041797          	auipc	a5,0x41
    80007f1c:	0f97c783          	lbu	a5,249(a5) # 80049011 <excpt+0x1>
    80007f20:	e7a9                	bnez	a5,80007f6a <wfi_exception_tests_20+0x108>
    80007f22:	4529                	li	a0,10
    80007f24:	3dd1c0ef          	jal	80024b00 <putchar>
    80007f28:	00041797          	auipc	a5,0x41
    80007f2c:	0e97c783          	lbu	a5,233(a5) # 80049011 <excpt+0x1>
    80007f30:	e79d                	bnez	a5,80007f5e <wfi_exception_tests_20+0xfc>
    80007f32:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007f34:	00020597          	auipc	a1,0x20
    80007f38:	dec58593          	addi	a1,a1,-532 # 80027d20 <__func__.0+0x2c0>
    80007f3c:	00020517          	auipc	a0,0x20
    80007f40:	e9c50513          	addi	a0,a0,-356 # 80027dd8 <__func__.0+0x378>
    80007f44:	5b31d0ef          	jal	80025cf6 <printf>
    80007f48:	4511                	li	a0,4
    80007f4a:	cadf80ef          	jal	80000bf6 <goto_priv>
    80007f4e:	d5ef90ef          	jal	800014ac <reset_state>
}
    80007f52:	60e2                	ld	ra,24(sp)
    80007f54:	8522                	mv	a0,s0
    80007f56:	6442                	ld	s0,16(sp)
    80007f58:	64a2                	ld	s1,8(sp)
    80007f5a:	6105                	addi	sp,sp,32
    80007f5c:	8082                	ret
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007f5e:	4401                	li	s0,0
    TEST_END();
    80007f60:	00020597          	auipc	a1,0x20
    80007f64:	dd058593          	addi	a1,a1,-560 # 80027d30 <__func__.0+0x2d0>
    80007f68:	bfd1                	j	80007f3c <wfi_exception_tests_20+0xda>
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007f6a:	00020517          	auipc	a0,0x20
    80007f6e:	e0e50513          	addi	a0,a0,-498 # 80027d78 <__func__.0+0x318>
    80007f72:	5851d0ef          	jal	80025cf6 <printf>
    80007f76:	02900513          	li	a0,41
    80007f7a:	3871c0ef          	jal	80024b00 <putchar>
    80007f7e:	b755                	j	80007f22 <wfi_exception_tests_20+0xc0>

0000000080007f80 <wfi_exception_tests_21>:



bool wfi_exception_tests_21() {
    80007f80:	1101                	addi	sp,sp,-32

    TEST_START();
    80007f82:	0001f597          	auipc	a1,0x1f
    80007f86:	81e58593          	addi	a1,a1,-2018 # 800267a0 <__func__.2>
    80007f8a:	00020517          	auipc	a0,0x20
    80007f8e:	db650513          	addi	a0,a0,-586 # 80027d40 <__func__.0+0x2e0>
bool wfi_exception_tests_21() {
    80007f92:	ec06                	sd	ra,24(sp)
    80007f94:	e822                	sd	s0,16(sp)
    80007f96:	e426                	sd	s1,8(sp)
    TEST_START();
    80007f98:	55f1d0ef          	jal	80025cf6 <printf>
    80007f9c:	4529                	li	a0,10
    80007f9e:	3631c0ef          	jal	80024b00 <putchar>

    //V=0&mstatus.TW=1时，且实现了S/HS模式，在U模式下执行WFI指令，并在一个约定时间内产生中断,wfi指令被唤醒，且中断会发生在下一条指令上，xepc=pc+4
    TEST_SETUP_EXCEPT();
    80007fa2:	0330000f          	fence	rw,rw
    80007fa6:	00041417          	auipc	s0,0x41
    80007faa:	06a40413          	addi	s0,s0,106 # 80049010 <excpt>
    80007fae:	4485                	li	s1,1
    80007fb0:	00041797          	auipc	a5,0x41
    80007fb4:	0807bc23          	sd	zero,152(a5) # 80049048 <excpt+0x38>
    80007fb8:	00941023          	sh	s1,0(s0)
    80007fbc:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80007fc0:	4511                	li	a0,4
    80007fc2:	c35f80ef          	jal	80000bf6 <goto_priv>
    CSRW(CSR_HIE, 0x2);
    80007fc6:	60415073          	csrwi	hie,2
    
    CSRS(mstatus, MSTATUS_TW);
    80007fca:	002007b7          	lui	a5,0x200
    80007fce:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HU);
    80007fd2:	8526                	mv	a0,s1
    80007fd4:	c23f80ef          	jal	80000bf6 <goto_priv>
    80007fd8:	10500073          	wfi
    wfi();
    // CSRW(CSR_HIP,0x2);

    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007fdc:	08200593          	li	a1,130
    80007fe0:	00021617          	auipc	a2,0x21
    80007fe4:	67060613          	addi	a2,a2,1648 # 80029650 <__func__.0+0x1bf0>
    80007fe8:	00020517          	auipc	a0,0x20
    80007fec:	d7050513          	addi	a0,a0,-656 # 80027d58 <__func__.0+0x2f8>
    80007ff0:	5071d0ef          	jal	80025cf6 <printf>
    80007ff4:	00041797          	auipc	a5,0x41
    80007ff8:	01d7c783          	lbu	a5,29(a5) # 80049011 <excpt+0x1>
    80007ffc:	00020597          	auipc	a1,0x20
    80008000:	d3458593          	addi	a1,a1,-716 # 80027d30 <__func__.0+0x2d0>
    80008004:	cf89                	beqz	a5,8000801e <wfi_exception_tests_21+0x9e>
    80008006:	6418                	ld	a4,8(s0)
    80008008:	4789                	li	a5,2
    8000800a:	00020597          	auipc	a1,0x20
    8000800e:	d1658593          	addi	a1,a1,-746 # 80027d20 <__func__.0+0x2c0>
    80008012:	00f70663          	beq	a4,a5,8000801e <wfi_exception_tests_21+0x9e>
    80008016:	00020597          	auipc	a1,0x20
    8000801a:	d1a58593          	addi	a1,a1,-742 # 80027d30 <__func__.0+0x2d0>
    8000801e:	00020517          	auipc	a0,0x20
    80008022:	d5250513          	addi	a0,a0,-686 # 80027d70 <__func__.0+0x310>
    80008026:	4d11d0ef          	jal	80025cf6 <printf>
    8000802a:	00041797          	auipc	a5,0x41
    8000802e:	fe77c783          	lbu	a5,-25(a5) # 80049011 <excpt+0x1>
    80008032:	c789                	beqz	a5,8000803c <wfi_exception_tests_21+0xbc>
    80008034:	6418                	ld	a4,8(s0)
    80008036:	4789                	li	a5,2
    80008038:	00f70c63          	beq	a4,a5,80008050 <wfi_exception_tests_21+0xd0>
    8000803c:	00020517          	auipc	a0,0x20
    80008040:	d3c50513          	addi	a0,a0,-708 # 80027d78 <__func__.0+0x318>
    80008044:	4b31d0ef          	jal	80025cf6 <printf>
    80008048:	02900513          	li	a0,41
    8000804c:	2b51c0ef          	jal	80024b00 <putchar>
    80008050:	4529                	li	a0,10
    80008052:	2af1c0ef          	jal	80024b00 <putchar>
    80008056:	00041497          	auipc	s1,0x41
    8000805a:	fbb4c483          	lbu	s1,-69(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    

    TEST_END();
    8000805e:	00020597          	auipc	a1,0x20
    80008062:	cd258593          	addi	a1,a1,-814 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80008066:	cc91                	beqz	s1,80008082 <wfi_exception_tests_21+0x102>
    80008068:	6418                	ld	a4,8(s0)
    8000806a:	4789                	li	a5,2
    TEST_END();
    8000806c:	00020597          	auipc	a1,0x20
    80008070:	cb458593          	addi	a1,a1,-844 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80008074:	00f70763          	beq	a4,a5,80008082 <wfi_exception_tests_21+0x102>
    80008078:	4481                	li	s1,0
    TEST_END();
    8000807a:	00020597          	auipc	a1,0x20
    8000807e:	cb658593          	addi	a1,a1,-842 # 80027d30 <__func__.0+0x2d0>
    80008082:	00020517          	auipc	a0,0x20
    80008086:	d5650513          	addi	a0,a0,-682 # 80027dd8 <__func__.0+0x378>
    8000808a:	46d1d0ef          	jal	80025cf6 <printf>
    8000808e:	4511                	li	a0,4
    80008090:	b67f80ef          	jal	80000bf6 <goto_priv>
    80008094:	c18f90ef          	jal	800014ac <reset_state>
}
    80008098:	60e2                	ld	ra,24(sp)
    8000809a:	6442                	ld	s0,16(sp)
    8000809c:	8526                	mv	a0,s1
    8000809e:	64a2                	ld	s1,8(sp)
    800080a0:	6105                	addi	sp,sp,32
    800080a2:	8082                	ret

00000000800080a4 <wfi_exception_tests_22>:


bool wfi_exception_tests_22() {
    800080a4:	1101                	addi	sp,sp,-32

    TEST_START();
    800080a6:	0001e597          	auipc	a1,0x1e
    800080aa:	71258593          	addi	a1,a1,1810 # 800267b8 <__func__.1>
    800080ae:	00020517          	auipc	a0,0x20
    800080b2:	c9250513          	addi	a0,a0,-878 # 80027d40 <__func__.0+0x2e0>
bool wfi_exception_tests_22() {
    800080b6:	ec06                	sd	ra,24(sp)
    800080b8:	e822                	sd	s0,16(sp)
    800080ba:	e426                	sd	s1,8(sp)
    TEST_START();
    800080bc:	43b1d0ef          	jal	80025cf6 <printf>
    800080c0:	4529                	li	a0,10
    800080c2:	23f1c0ef          	jal	80024b00 <putchar>

    //V=0&mstatus.TW=1时，如果实现了S/HS模式，在U模式下执行WFI指令，没有在一个约定时间内产生中断
    TEST_SETUP_EXCEPT();
    800080c6:	0330000f          	fence	rw,rw
    800080ca:	00041417          	auipc	s0,0x41
    800080ce:	f4640413          	addi	s0,s0,-186 # 80049010 <excpt>
    800080d2:	4485                	li	s1,1
    800080d4:	00041797          	auipc	a5,0x41
    800080d8:	f607ba23          	sd	zero,-140(a5) # 80049048 <excpt+0x38>
    800080dc:	00941023          	sh	s1,0(s0)
    800080e0:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800080e4:	4511                	li	a0,4
    800080e6:	b11f80ef          	jal	80000bf6 <goto_priv>
    CSRW(CSR_HIE, 0);
    800080ea:	60405073          	csrwi	hie,0
    CSRW(CSR_HIP,0);
    800080ee:	64405073          	csrwi	hip,0
    CSRS(mstatus, MSTATUS_TW);
    800080f2:	002007b7          	lui	a5,0x200
    800080f6:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HU);
    800080fa:	8526                	mv	a0,s1
    800080fc:	afbf80ef          	jal	80000bf6 <goto_priv>
    80008100:	10500073          	wfi
    wfi();
    
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80008104:	08200593          	li	a1,130
    80008108:	00021617          	auipc	a2,0x21
    8000810c:	54860613          	addi	a2,a2,1352 # 80029650 <__func__.0+0x1bf0>
    80008110:	00020517          	auipc	a0,0x20
    80008114:	c4850513          	addi	a0,a0,-952 # 80027d58 <__func__.0+0x2f8>
    80008118:	3df1d0ef          	jal	80025cf6 <printf>
    8000811c:	00041797          	auipc	a5,0x41
    80008120:	ef57c783          	lbu	a5,-267(a5) # 80049011 <excpt+0x1>
    80008124:	00020597          	auipc	a1,0x20
    80008128:	c0c58593          	addi	a1,a1,-1012 # 80027d30 <__func__.0+0x2d0>
    8000812c:	cf89                	beqz	a5,80008146 <wfi_exception_tests_22+0xa2>
    8000812e:	6418                	ld	a4,8(s0)
    80008130:	4789                	li	a5,2
    80008132:	00020597          	auipc	a1,0x20
    80008136:	bee58593          	addi	a1,a1,-1042 # 80027d20 <__func__.0+0x2c0>
    8000813a:	00f70663          	beq	a4,a5,80008146 <wfi_exception_tests_22+0xa2>
    8000813e:	00020597          	auipc	a1,0x20
    80008142:	bf258593          	addi	a1,a1,-1038 # 80027d30 <__func__.0+0x2d0>
    80008146:	00020517          	auipc	a0,0x20
    8000814a:	c2a50513          	addi	a0,a0,-982 # 80027d70 <__func__.0+0x310>
    8000814e:	3a91d0ef          	jal	80025cf6 <printf>
    80008152:	00041797          	auipc	a5,0x41
    80008156:	ebf7c783          	lbu	a5,-321(a5) # 80049011 <excpt+0x1>
    8000815a:	c789                	beqz	a5,80008164 <wfi_exception_tests_22+0xc0>
    8000815c:	6418                	ld	a4,8(s0)
    8000815e:	4789                	li	a5,2
    80008160:	00f70c63          	beq	a4,a5,80008178 <wfi_exception_tests_22+0xd4>
    80008164:	00020517          	auipc	a0,0x20
    80008168:	c1450513          	addi	a0,a0,-1004 # 80027d78 <__func__.0+0x318>
    8000816c:	38b1d0ef          	jal	80025cf6 <printf>
    80008170:	02900513          	li	a0,41
    80008174:	18d1c0ef          	jal	80024b00 <putchar>
    80008178:	4529                	li	a0,10
    8000817a:	1871c0ef          	jal	80024b00 <putchar>
    8000817e:	00041497          	auipc	s1,0x41
    80008182:	e934c483          	lbu	s1,-365(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    

    TEST_END();
    80008186:	00020597          	auipc	a1,0x20
    8000818a:	baa58593          	addi	a1,a1,-1110 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    8000818e:	cc91                	beqz	s1,800081aa <wfi_exception_tests_22+0x106>
    80008190:	6418                	ld	a4,8(s0)
    80008192:	4789                	li	a5,2
    TEST_END();
    80008194:	00020597          	auipc	a1,0x20
    80008198:	b8c58593          	addi	a1,a1,-1140 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    8000819c:	00f70763          	beq	a4,a5,800081aa <wfi_exception_tests_22+0x106>
    800081a0:	4481                	li	s1,0
    TEST_END();
    800081a2:	00020597          	auipc	a1,0x20
    800081a6:	b8e58593          	addi	a1,a1,-1138 # 80027d30 <__func__.0+0x2d0>
    800081aa:	00020517          	auipc	a0,0x20
    800081ae:	c2e50513          	addi	a0,a0,-978 # 80027dd8 <__func__.0+0x378>
    800081b2:	3451d0ef          	jal	80025cf6 <printf>
    800081b6:	4511                	li	a0,4
    800081b8:	a3ff80ef          	jal	80000bf6 <goto_priv>
    800081bc:	af0f90ef          	jal	800014ac <reset_state>
}
    800081c0:	60e2                	ld	ra,24(sp)
    800081c2:	6442                	ld	s0,16(sp)
    800081c4:	8526                	mv	a0,s1
    800081c6:	64a2                	ld	s1,8(sp)
    800081c8:	6105                	addi	sp,sp,32
    800081ca:	8082                	ret

00000000800081cc <wfi_exception_tests_23>:


bool wfi_exception_tests_23() {
    800081cc:	1141                	addi	sp,sp,-16

    TEST_START();
    800081ce:	0001e597          	auipc	a1,0x1e
    800081d2:	60258593          	addi	a1,a1,1538 # 800267d0 <__func__.0>
    800081d6:	00020517          	auipc	a0,0x20
    800081da:	b6a50513          	addi	a0,a0,-1174 # 80027d40 <__func__.0+0x2e0>
bool wfi_exception_tests_23() {
    800081de:	e406                	sd	ra,8(sp)
    TEST_START();
    800081e0:	3171d0ef          	jal	80025cf6 <printf>
    800081e4:	4529                	li	a0,10
    800081e6:	11b1c0ef          	jal	80024b00 <putchar>



    TEST_END();
    800081ea:	00020597          	auipc	a1,0x20
    800081ee:	b3658593          	addi	a1,a1,-1226 # 80027d20 <__func__.0+0x2c0>
    800081f2:	00020517          	auipc	a0,0x20
    800081f6:	be650513          	addi	a0,a0,-1050 # 80027dd8 <__func__.0+0x378>
    800081fa:	2fd1d0ef          	jal	80025cf6 <printf>
    800081fe:	4511                	li	a0,4
    80008200:	9f7f80ef          	jal	80000bf6 <goto_priv>
    80008204:	aa8f90ef          	jal	800014ac <reset_state>
}
    80008208:	60a2                	ld	ra,8(sp)
    8000820a:	4505                	li	a0,1
    8000820c:	0141                	addi	sp,sp,16
    8000820e:	8082                	ret

0000000080008210 <tinst_tests_pf>:
#define TINST_CHECK_COMPRESSED(CHECK) (excpt.tinst == 0 ||\
    excpt.tinst == CHECK(expand_compressed_instruction(read_instruction(excpt.epc)) & ~0b10ULL))



bool tinst_tests_pf(){
    80008210:	7179                	addi	sp,sp,-48
    
    TEST_START();
    80008212:	0001e597          	auipc	a1,0x1e
    80008216:	5d658593          	addi	a1,a1,1494 # 800267e8 <__func__.3>
    8000821a:	00020517          	auipc	a0,0x20
    8000821e:	b2650513          	addi	a0,a0,-1242 # 80027d40 <__func__.0+0x2e0>
bool tinst_tests_pf(){
    80008222:	f406                	sd	ra,40(sp)
    80008224:	f022                	sd	s0,32(sp)
    80008226:	ec26                	sd	s1,24(sp)
    80008228:	e84a                	sd	s2,16(sp)
    8000822a:	e44e                	sd	s3,8(sp)
    TEST_START();
    8000822c:	2cb1d0ef          	jal	80025cf6 <printf>
    80008230:	4529                	li	a0,10
    80008232:	0cf1c0ef          	jal	80024b00 <putchar>

    hspt_init();        
    80008236:	baaf80ef          	jal	800005e0 <hspt_init>
    goto_priv(PRIV_HS);     
    8000823a:	450d                	li	a0,3
    8000823c:	9bbf80ef          	jal	80000bf6 <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    80008240:	0330000f          	fence	rw,rw
    80008244:	00041417          	auipc	s0,0x41
    80008248:	dcc40413          	addi	s0,s0,-564 # 80049010 <excpt>
    8000824c:	4785                	li	a5,1
    8000824e:	00041717          	auipc	a4,0x41
    80008252:	de073d23          	sd	zero,-518(a4) # 80049048 <excpt+0x38>
    80008256:	00f41023          	sh	a5,0(s0)
    8000825a:	0330000f          	fence	rw,rw
            ".option pop\n\t" \
            : "=r"(value) : "r"(addr) : "memory"); \
        return value; \
    }

LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8000825e:	400197b7          	lui	a5,0x40019
    80008262:	078a                	slli	a5,a5,0x2
    80008264:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    // uint8_t dest8[4];
    // vle8_v(dest8, (uintptr_t)src8);


    value = lb(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lb which results in a lpf",         
    80008268:	00021617          	auipc	a2,0x21
    8000826c:	43060613          	addi	a2,a2,1072 # 80029698 <__func__.0+0x1c38>
    80008270:	08200593          	li	a1,130
    80008274:	00020517          	auipc	a0,0x20
    80008278:	ae450513          	addi	a0,a0,-1308 # 80027d58 <__func__.0+0x2f8>
    8000827c:	27b1d0ef          	jal	80025cf6 <printf>
    80008280:	00041797          	auipc	a5,0x41
    80008284:	d917c783          	lbu	a5,-623(a5) # 80049011 <excpt+0x1>
    80008288:	e399                	bnez	a5,8000828e <tinst_tests_pf+0x7e>
    8000828a:	05f0106f          	j	80009ae8 <tinst_tests_pf+0x18d8>
    8000828e:	6418                	ld	a4,8(s0)
    80008290:	47b5                	li	a5,13
    80008292:	00020597          	auipc	a1,0x20
    80008296:	a9e58593          	addi	a1,a1,-1378 # 80027d30 <__func__.0+0x2d0>
    8000829a:	00f71463          	bne	a4,a5,800082a2 <tinst_tests_pf+0x92>
    8000829e:	0030106f          	j	80009aa0 <tinst_tests_pf+0x1890>
    800082a2:	00020517          	auipc	a0,0x20
    800082a6:	ace50513          	addi	a0,a0,-1330 # 80027d70 <__func__.0+0x310>
    800082aa:	24d1d0ef          	jal	80025cf6 <printf>
    800082ae:	00041797          	auipc	a5,0x41
    800082b2:	d637c783          	lbu	a5,-669(a5) # 80049011 <excpt+0x1>
    800082b6:	c799                	beqz	a5,800082c4 <tinst_tests_pf+0xb4>
    800082b8:	6418                	ld	a4,8(s0)
    800082ba:	47b5                	li	a5,13
    800082bc:	00f71463          	bne	a4,a5,800082c4 <tinst_tests_pf+0xb4>
    800082c0:	0850106f          	j	80009b44 <tinst_tests_pf+0x1934>
    800082c4:	00020517          	auipc	a0,0x20
    800082c8:	ab450513          	addi	a0,a0,-1356 # 80027d78 <__func__.0+0x318>
    800082cc:	22b1d0ef          	jal	80025cf6 <printf>
    800082d0:	02900513          	li	a0,41
    800082d4:	02d1c0ef          	jal	80024b00 <putchar>
    800082d8:	4529                	li	a0,10
    800082da:	0271c0ef          	jal	80024b00 <putchar>
    800082de:	00041797          	auipc	a5,0x41
    800082e2:	d337c783          	lbu	a5,-717(a5) # 80049011 <excpt+0x1>
    800082e6:	c399                	beqz	a5,800082ec <tinst_tests_pf+0xdc>
    800082e8:	00d0106f          	j	80009af4 <tinst_tests_pf+0x18e4>
    800082ec:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    800082ee:	0330000f          	fence	rw,rw
    800082f2:	4785                	li	a5,1
    800082f4:	00041717          	auipc	a4,0x41
    800082f8:	d4073a23          	sd	zero,-684(a4) # 80049048 <excpt+0x38>
    800082fc:	00f41023          	sh	a5,0(s0)
    80008300:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lbu, "lbu", uint8_t);
    80008304:	400197b7          	lui	a5,0x40019
    80008308:	078a                	slli	a5,a5,0x2
    8000830a:	0007c783          	lbu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lbu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    8000830e:	00021617          	auipc	a2,0x21
    80008312:	40a60613          	addi	a2,a2,1034 # 80029718 <__func__.0+0x1cb8>
    80008316:	08200593          	li	a1,130
    8000831a:	00020517          	auipc	a0,0x20
    8000831e:	a3e50513          	addi	a0,a0,-1474 # 80027d58 <__func__.0+0x2f8>
    80008322:	1d51d0ef          	jal	80025cf6 <printf>
    80008326:	00041797          	auipc	a5,0x41
    8000832a:	ceb7c783          	lbu	a5,-789(a5) # 80049011 <excpt+0x1>
    8000832e:	e399                	bnez	a5,80008334 <tinst_tests_pf+0x124>
    80008330:	0990106f          	j	80009bc8 <tinst_tests_pf+0x19b8>
    80008334:	6418                	ld	a4,8(s0)
    80008336:	47b5                	li	a5,13
    80008338:	00020597          	auipc	a1,0x20
    8000833c:	9f858593          	addi	a1,a1,-1544 # 80027d30 <__func__.0+0x2d0>
    80008340:	00f71463          	bne	a4,a5,80008348 <tinst_tests_pf+0x138>
    80008344:	03d0106f          	j	80009b80 <tinst_tests_pf+0x1970>
    80008348:	00020517          	auipc	a0,0x20
    8000834c:	a2850513          	addi	a0,a0,-1496 # 80027d70 <__func__.0+0x310>
    80008350:	1a71d0ef          	jal	80025cf6 <printf>
    80008354:	00041797          	auipc	a5,0x41
    80008358:	cbd7c783          	lbu	a5,-835(a5) # 80049011 <excpt+0x1>
    8000835c:	c799                	beqz	a5,8000836a <tinst_tests_pf+0x15a>
    8000835e:	6418                	ld	a4,8(s0)
    80008360:	47b5                	li	a5,13
    80008362:	00f71463          	bne	a4,a5,8000836a <tinst_tests_pf+0x15a>
    80008366:	4890106f          	j	80009fee <tinst_tests_pf+0x1dde>
    8000836a:	00020517          	auipc	a0,0x20
    8000836e:	a0e50513          	addi	a0,a0,-1522 # 80027d78 <__func__.0+0x318>
    80008372:	1851d0ef          	jal	80025cf6 <printf>
    80008376:	02900513          	li	a0,41
    8000837a:	7861c0ef          	jal	80024b00 <putchar>
    8000837e:	4529                	li	a0,10
    80008380:	7801c0ef          	jal	80024b00 <putchar>
    80008384:	00090e63          	beqz	s2,800083a0 <tinst_tests_pf+0x190>
    80008388:	00041797          	auipc	a5,0x41
    8000838c:	c897c783          	lbu	a5,-887(a5) # 80049011 <excpt+0x1>
    80008390:	c799                	beqz	a5,8000839e <tinst_tests_pf+0x18e>
    80008392:	6418                	ld	a4,8(s0)
    80008394:	47b5                	li	a5,13
    80008396:	00f71463          	bne	a4,a5,8000839e <tinst_tests_pf+0x18e>
    8000839a:	0980206f          	j	8000a432 <tinst_tests_pf+0x2222>
    8000839e:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    800083a0:	0330000f          	fence	rw,rw
    800083a4:	4785                	li	a5,1
    800083a6:	00041717          	auipc	a4,0x41
    800083aa:	ca073123          	sd	zero,-862(a4) # 80049048 <excpt+0x38>
    800083ae:	00f41023          	sh	a5,0(s0)
    800083b2:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    800083b6:	400197b7          	lui	a5,0x40019
    800083ba:	078a                	slli	a5,a5,0x2
    800083bc:	00079783          	lh	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lh(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    800083c0:	00021617          	auipc	a2,0x21
    800083c4:	39860613          	addi	a2,a2,920 # 80029758 <__func__.0+0x1cf8>
    800083c8:	08200593          	li	a1,130
    800083cc:	00020517          	auipc	a0,0x20
    800083d0:	98c50513          	addi	a0,a0,-1652 # 80027d58 <__func__.0+0x2f8>
    800083d4:	1231d0ef          	jal	80025cf6 <printf>
    800083d8:	00041797          	auipc	a5,0x41
    800083dc:	c397c783          	lbu	a5,-967(a5) # 80049011 <excpt+0x1>
    800083e0:	e399                	bnez	a5,800083e6 <tinst_tests_pf+0x1d6>
    800083e2:	03b0106f          	j	80009c1c <tinst_tests_pf+0x1a0c>
    800083e6:	6418                	ld	a4,8(s0)
    800083e8:	47b5                	li	a5,13
    800083ea:	00020597          	auipc	a1,0x20
    800083ee:	94658593          	addi	a1,a1,-1722 # 80027d30 <__func__.0+0x2d0>
    800083f2:	00f71463          	bne	a4,a5,800083fa <tinst_tests_pf+0x1ea>
    800083f6:	7de0106f          	j	80009bd4 <tinst_tests_pf+0x19c4>
    800083fa:	00020517          	auipc	a0,0x20
    800083fe:	97650513          	addi	a0,a0,-1674 # 80027d70 <__func__.0+0x310>
    80008402:	0f51d0ef          	jal	80025cf6 <printf>
    80008406:	00041797          	auipc	a5,0x41
    8000840a:	c0b7c783          	lbu	a5,-1013(a5) # 80049011 <excpt+0x1>
    8000840e:	c799                	beqz	a5,8000841c <tinst_tests_pf+0x20c>
    80008410:	6418                	ld	a4,8(s0)
    80008412:	47b5                	li	a5,13
    80008414:	00f71463          	bne	a4,a5,8000841c <tinst_tests_pf+0x20c>
    80008418:	0d20206f          	j	8000a4ea <tinst_tests_pf+0x22da>
    8000841c:	00020517          	auipc	a0,0x20
    80008420:	95c50513          	addi	a0,a0,-1700 # 80027d78 <__func__.0+0x318>
    80008424:	0d31d0ef          	jal	80025cf6 <printf>
    80008428:	02900513          	li	a0,41
    8000842c:	6d41c0ef          	jal	80024b00 <putchar>
    80008430:	4529                	li	a0,10
    80008432:	6ce1c0ef          	jal	80024b00 <putchar>
    80008436:	00090e63          	beqz	s2,80008452 <tinst_tests_pf+0x242>
    8000843a:	00041797          	auipc	a5,0x41
    8000843e:	bd77c783          	lbu	a5,-1065(a5) # 80049011 <excpt+0x1>
    80008442:	c799                	beqz	a5,80008450 <tinst_tests_pf+0x240>
    80008444:	6418                	ld	a4,8(s0)
    80008446:	47b5                	li	a5,13
    80008448:	00f71463          	bne	a4,a5,80008450 <tinst_tests_pf+0x240>
    8000844c:	0240206f          	j	8000a470 <tinst_tests_pf+0x2260>
    80008450:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80008452:	0330000f          	fence	rw,rw
    80008456:	4785                	li	a5,1
    80008458:	00041717          	auipc	a4,0x41
    8000845c:	be073823          	sd	zero,-1040(a4) # 80049048 <excpt+0x38>
    80008460:	00f41023          	sh	a5,0(s0)
    80008464:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lhu, "lhu", uint16_t); 
    80008468:	400197b7          	lui	a5,0x40019
    8000846c:	078a                	slli	a5,a5,0x2
    8000846e:	0007d783          	lhu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lhu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    80008472:	00021617          	auipc	a2,0x21
    80008476:	32660613          	addi	a2,a2,806 # 80029798 <__func__.0+0x1d38>
    8000847a:	08200593          	li	a1,130
    8000847e:	00020517          	auipc	a0,0x20
    80008482:	8da50513          	addi	a0,a0,-1830 # 80027d58 <__func__.0+0x2f8>
    80008486:	0711d0ef          	jal	80025cf6 <printf>
    8000848a:	00041797          	auipc	a5,0x41
    8000848e:	b877c783          	lbu	a5,-1145(a5) # 80049011 <excpt+0x1>
    80008492:	e399                	bnez	a5,80008498 <tinst_tests_pf+0x288>
    80008494:	7dc0106f          	j	80009c70 <tinst_tests_pf+0x1a60>
    80008498:	6418                	ld	a4,8(s0)
    8000849a:	47b5                	li	a5,13
    8000849c:	00020597          	auipc	a1,0x20
    800084a0:	89458593          	addi	a1,a1,-1900 # 80027d30 <__func__.0+0x2d0>
    800084a4:	00f71463          	bne	a4,a5,800084ac <tinst_tests_pf+0x29c>
    800084a8:	7800106f          	j	80009c28 <tinst_tests_pf+0x1a18>
    800084ac:	00020517          	auipc	a0,0x20
    800084b0:	8c450513          	addi	a0,a0,-1852 # 80027d70 <__func__.0+0x310>
    800084b4:	0431d0ef          	jal	80025cf6 <printf>
    800084b8:	00041797          	auipc	a5,0x41
    800084bc:	b597c783          	lbu	a5,-1191(a5) # 80049011 <excpt+0x1>
    800084c0:	c799                	beqz	a5,800084ce <tinst_tests_pf+0x2be>
    800084c2:	6418                	ld	a4,8(s0)
    800084c4:	47b5                	li	a5,13
    800084c6:	00f71463          	bne	a4,a5,800084ce <tinst_tests_pf+0x2be>
    800084ca:	0c00206f          	j	8000a58a <tinst_tests_pf+0x237a>
    800084ce:	00020517          	auipc	a0,0x20
    800084d2:	8aa50513          	addi	a0,a0,-1878 # 80027d78 <__func__.0+0x318>
    800084d6:	0211d0ef          	jal	80025cf6 <printf>
    800084da:	02900513          	li	a0,41
    800084de:	6221c0ef          	jal	80024b00 <putchar>
    800084e2:	4529                	li	a0,10
    800084e4:	61c1c0ef          	jal	80024b00 <putchar>
    800084e8:	00090e63          	beqz	s2,80008504 <tinst_tests_pf+0x2f4>
    800084ec:	00041797          	auipc	a5,0x41
    800084f0:	b257c783          	lbu	a5,-1243(a5) # 80049011 <excpt+0x1>
    800084f4:	c799                	beqz	a5,80008502 <tinst_tests_pf+0x2f2>
    800084f6:	6418                	ld	a4,8(s0)
    800084f8:	47b5                	li	a5,13
    800084fa:	00f71463          	bne	a4,a5,80008502 <tinst_tests_pf+0x2f2>
    800084fe:	7b10106f          	j	8000a4ae <tinst_tests_pf+0x229e>
    80008502:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80008504:	0330000f          	fence	rw,rw
    80008508:	4785                	li	a5,1
    8000850a:	00041717          	auipc	a4,0x41
    8000850e:	b2073f23          	sd	zero,-1218(a4) # 80049048 <excpt+0x38>
    80008512:	00f41023          	sh	a5,0(s0)
    80008516:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lw, "lw", uint32_t); 
    8000851a:	400197b7          	lui	a5,0x40019
    8000851e:	078a                	slli	a5,a5,0x2
    80008520:	0007a783          	lw	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    80008524:	00021617          	auipc	a2,0x21
    80008528:	2b460613          	addi	a2,a2,692 # 800297d8 <__func__.0+0x1d78>
    8000852c:	08200593          	li	a1,130
    80008530:	00020517          	auipc	a0,0x20
    80008534:	82850513          	addi	a0,a0,-2008 # 80027d58 <__func__.0+0x2f8>
    80008538:	7be1d0ef          	jal	80025cf6 <printf>
    8000853c:	00041797          	auipc	a5,0x41
    80008540:	ad57c783          	lbu	a5,-1323(a5) # 80049011 <excpt+0x1>
    80008544:	e399                	bnez	a5,8000854a <tinst_tests_pf+0x33a>
    80008546:	77e0106f          	j	80009cc4 <tinst_tests_pf+0x1ab4>
    8000854a:	6418                	ld	a4,8(s0)
    8000854c:	47b5                	li	a5,13
    8000854e:	0001f597          	auipc	a1,0x1f
    80008552:	7e258593          	addi	a1,a1,2018 # 80027d30 <__func__.0+0x2d0>
    80008556:	00f71463          	bne	a4,a5,8000855e <tinst_tests_pf+0x34e>
    8000855a:	7220106f          	j	80009c7c <tinst_tests_pf+0x1a6c>
    8000855e:	00020517          	auipc	a0,0x20
    80008562:	81250513          	addi	a0,a0,-2030 # 80027d70 <__func__.0+0x310>
    80008566:	7901d0ef          	jal	80025cf6 <printf>
    8000856a:	00041797          	auipc	a5,0x41
    8000856e:	aa77c783          	lbu	a5,-1369(a5) # 80049011 <excpt+0x1>
    80008572:	c799                	beqz	a5,80008580 <tinst_tests_pf+0x370>
    80008574:	6418                	ld	a4,8(s0)
    80008576:	47b5                	li	a5,13
    80008578:	00f71463          	bne	a4,a5,80008580 <tinst_tests_pf+0x370>
    8000857c:	0a00206f          	j	8000a61c <tinst_tests_pf+0x240c>
    80008580:	0001f517          	auipc	a0,0x1f
    80008584:	7f850513          	addi	a0,a0,2040 # 80027d78 <__func__.0+0x318>
    80008588:	76e1d0ef          	jal	80025cf6 <printf>
    8000858c:	02900513          	li	a0,41
    80008590:	5701c0ef          	jal	80024b00 <putchar>
    80008594:	4529                	li	a0,10
    80008596:	56a1c0ef          	jal	80024b00 <putchar>
    8000859a:	00090a63          	beqz	s2,800085ae <tinst_tests_pf+0x39e>
    8000859e:	00041797          	auipc	a5,0x41
    800085a2:	a737c783          	lbu	a5,-1421(a5) # 80049011 <excpt+0x1>
    800085a6:	c399                	beqz	a5,800085ac <tinst_tests_pf+0x39c>
    800085a8:	2830106f          	j	8000a02a <tinst_tests_pf+0x1e1a>
    800085ac:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    800085ae:	0330000f          	fence	rw,rw
    800085b2:	4785                	li	a5,1
    800085b4:	00041717          	auipc	a4,0x41
    800085b8:	a8073a23          	sd	zero,-1388(a4) # 80049048 <excpt+0x38>
    800085bc:	00f41023          	sh	a5,0(s0)
    800085c0:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lwu, "lwu", uint32_t);
    800085c4:	400197b7          	lui	a5,0x40019
    800085c8:	078a                	slli	a5,a5,0x2
    800085ca:	0007e783          	lwu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lwu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    800085ce:	00021617          	auipc	a2,0x21
    800085d2:	24a60613          	addi	a2,a2,586 # 80029818 <__func__.0+0x1db8>
    800085d6:	08200593          	li	a1,130
    800085da:	0001f517          	auipc	a0,0x1f
    800085de:	77e50513          	addi	a0,a0,1918 # 80027d58 <__func__.0+0x2f8>
    800085e2:	7141d0ef          	jal	80025cf6 <printf>
    800085e6:	00041797          	auipc	a5,0x41
    800085ea:	a2b7c783          	lbu	a5,-1493(a5) # 80049011 <excpt+0x1>
    800085ee:	e399                	bnez	a5,800085f4 <tinst_tests_pf+0x3e4>
    800085f0:	7280106f          	j	80009d18 <tinst_tests_pf+0x1b08>
    800085f4:	6418                	ld	a4,8(s0)
    800085f6:	47b5                	li	a5,13
    800085f8:	0001f597          	auipc	a1,0x1f
    800085fc:	73858593          	addi	a1,a1,1848 # 80027d30 <__func__.0+0x2d0>
    80008600:	00f71463          	bne	a4,a5,80008608 <tinst_tests_pf+0x3f8>
    80008604:	6cc0106f          	j	80009cd0 <tinst_tests_pf+0x1ac0>
    80008608:	0001f517          	auipc	a0,0x1f
    8000860c:	76850513          	addi	a0,a0,1896 # 80027d70 <__func__.0+0x310>
    80008610:	6e61d0ef          	jal	80025cf6 <printf>
    80008614:	00041797          	auipc	a5,0x41
    80008618:	9fd7c783          	lbu	a5,-1539(a5) # 80049011 <excpt+0x1>
    8000861c:	c799                	beqz	a5,8000862a <tinst_tests_pf+0x41a>
    8000861e:	6418                	ld	a4,8(s0)
    80008620:	47b5                	li	a5,13
    80008622:	00f71463          	bne	a4,a5,8000862a <tinst_tests_pf+0x41a>
    80008626:	08c0206f          	j	8000a6b2 <tinst_tests_pf+0x24a2>
    8000862a:	0001f517          	auipc	a0,0x1f
    8000862e:	74e50513          	addi	a0,a0,1870 # 80027d78 <__func__.0+0x318>
    80008632:	6c41d0ef          	jal	80025cf6 <printf>
    80008636:	02900513          	li	a0,41
    8000863a:	4c61c0ef          	jal	80024b00 <putchar>
    8000863e:	4529                	li	a0,10
    80008640:	4c01c0ef          	jal	80024b00 <putchar>
    80008644:	00090a63          	beqz	s2,80008658 <tinst_tests_pf+0x448>
    80008648:	00041797          	auipc	a5,0x41
    8000864c:	9c97c783          	lbu	a5,-1591(a5) # 80049011 <excpt+0x1>
    80008650:	c399                	beqz	a5,80008656 <tinst_tests_pf+0x446>
    80008652:	2890106f          	j	8000a0da <tinst_tests_pf+0x1eca>
    80008656:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80008658:	0330000f          	fence	rw,rw
    8000865c:	4785                	li	a5,1
    8000865e:	00041717          	auipc	a4,0x41
    80008662:	9e073523          	sd	zero,-1558(a4) # 80049048 <excpt+0x38>
    80008666:	00f41023          	sh	a5,0(s0)
    8000866a:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8000866e:	400197b7          	lui	a5,0x40019
    80008672:	078a                	slli	a5,a5,0x2
    80008674:	0007b783          	ld	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    80008678:	00021617          	auipc	a2,0x21
    8000867c:	1e060613          	addi	a2,a2,480 # 80029858 <__func__.0+0x1df8>
    80008680:	08200593          	li	a1,130
    80008684:	0001f517          	auipc	a0,0x1f
    80008688:	6d450513          	addi	a0,a0,1748 # 80027d58 <__func__.0+0x2f8>
    8000868c:	66a1d0ef          	jal	80025cf6 <printf>
    80008690:	00041797          	auipc	a5,0x41
    80008694:	9817c783          	lbu	a5,-1663(a5) # 80049011 <excpt+0x1>
    80008698:	e399                	bnez	a5,8000869e <tinst_tests_pf+0x48e>
    8000869a:	6d20106f          	j	80009d6c <tinst_tests_pf+0x1b5c>
    8000869e:	6418                	ld	a4,8(s0)
    800086a0:	47b5                	li	a5,13
    800086a2:	0001f597          	auipc	a1,0x1f
    800086a6:	68e58593          	addi	a1,a1,1678 # 80027d30 <__func__.0+0x2d0>
    800086aa:	00f71463          	bne	a4,a5,800086b2 <tinst_tests_pf+0x4a2>
    800086ae:	6760106f          	j	80009d24 <tinst_tests_pf+0x1b14>
    800086b2:	0001f517          	auipc	a0,0x1f
    800086b6:	6be50513          	addi	a0,a0,1726 # 80027d70 <__func__.0+0x310>
    800086ba:	63c1d0ef          	jal	80025cf6 <printf>
    800086be:	00041797          	auipc	a5,0x41
    800086c2:	9537c783          	lbu	a5,-1709(a5) # 80049011 <excpt+0x1>
    800086c6:	c799                	beqz	a5,800086d4 <tinst_tests_pf+0x4c4>
    800086c8:	6418                	ld	a4,8(s0)
    800086ca:	47b5                	li	a5,13
    800086cc:	00f71463          	bne	a4,a5,800086d4 <tinst_tests_pf+0x4c4>
    800086d0:	0780206f          	j	8000a748 <tinst_tests_pf+0x2538>
    800086d4:	0001f517          	auipc	a0,0x1f
    800086d8:	6a450513          	addi	a0,a0,1700 # 80027d78 <__func__.0+0x318>
    800086dc:	61a1d0ef          	jal	80025cf6 <printf>
    800086e0:	02900513          	li	a0,41
    800086e4:	41c1c0ef          	jal	80024b00 <putchar>
    800086e8:	4529                	li	a0,10
    800086ea:	4161c0ef          	jal	80024b00 <putchar>
    800086ee:	00090a63          	beqz	s2,80008702 <tinst_tests_pf+0x4f2>
    800086f2:	00041797          	auipc	a5,0x41
    800086f6:	91f7c783          	lbu	a5,-1761(a5) # 80049011 <excpt+0x1>
    800086fa:	c399                	beqz	a5,80008700 <tinst_tests_pf+0x4f0>
    800086fc:	2290106f          	j	8000a124 <tinst_tests_pf+0x1f14>
    80008700:	4901                	li	s2,0
        TINST_CHECK(TINST_LOAD)
    );

    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();
    80008702:	0330000f          	fence	rw,rw
    80008706:	4785                	li	a5,1
    80008708:	00041717          	auipc	a4,0x41
    8000870c:	94073023          	sd	zero,-1728(a4) # 80049048 <excpt+0x38>
    80008710:	00f41023          	sh	a5,0(s0)
    80008714:	0330000f          	fence	rw,rw
            ".option pop\n\t" \
            :: "r"(value), "r"(addr):  "memory" \
        ); \
    }

STORE_INSTRUCTION(sb, "sb", uint8_t);
    80008718:	400197b7          	lui	a5,0x40019
    8000871c:	078a                	slli	a5,a5,0x2
    8000871e:	573d                	li	a4,-17
    80008720:	00e78023          	sb	a4,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    sb(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    80008724:	00021617          	auipc	a2,0x21
    80008728:	17460613          	addi	a2,a2,372 # 80029898 <__func__.0+0x1e38>
    8000872c:	08200593          	li	a1,130
    80008730:	0001f517          	auipc	a0,0x1f
    80008734:	62850513          	addi	a0,a0,1576 # 80027d58 <__func__.0+0x2f8>
    80008738:	5be1d0ef          	jal	80025cf6 <printf>
    8000873c:	00041797          	auipc	a5,0x41
    80008740:	8d57c783          	lbu	a5,-1835(a5) # 80049011 <excpt+0x1>
    80008744:	e399                	bnez	a5,8000874a <tinst_tests_pf+0x53a>
    80008746:	6800106f          	j	80009dc6 <tinst_tests_pf+0x1bb6>
    8000874a:	6418                	ld	a4,8(s0)
    8000874c:	47bd                	li	a5,15
    8000874e:	0001f597          	auipc	a1,0x1f
    80008752:	5e258593          	addi	a1,a1,1506 # 80027d30 <__func__.0+0x2d0>
    80008756:	00f71463          	bne	a4,a5,8000875e <tinst_tests_pf+0x54e>
    8000875a:	61e0106f          	j	80009d78 <tinst_tests_pf+0x1b68>
    8000875e:	0001f517          	auipc	a0,0x1f
    80008762:	61250513          	addi	a0,a0,1554 # 80027d70 <__func__.0+0x310>
    80008766:	5901d0ef          	jal	80025cf6 <printf>
    8000876a:	00041797          	auipc	a5,0x41
    8000876e:	8a77c783          	lbu	a5,-1881(a5) # 80049011 <excpt+0x1>
    80008772:	c799                	beqz	a5,80008780 <tinst_tests_pf+0x570>
    80008774:	6418                	ld	a4,8(s0)
    80008776:	47bd                	li	a5,15
    80008778:	00f71463          	bne	a4,a5,80008780 <tinst_tests_pf+0x570>
    8000877c:	0620206f          	j	8000a7de <tinst_tests_pf+0x25ce>
    80008780:	0001f517          	auipc	a0,0x1f
    80008784:	5f850513          	addi	a0,a0,1528 # 80027d78 <__func__.0+0x318>
    80008788:	56e1d0ef          	jal	80025cf6 <printf>
    8000878c:	02900513          	li	a0,41
    80008790:	3701c0ef          	jal	80024b00 <putchar>
    80008794:	4529                	li	a0,10
    80008796:	36a1c0ef          	jal	80024b00 <putchar>
    8000879a:	00090a63          	beqz	s2,800087ae <tinst_tests_pf+0x59e>
    8000879e:	00041797          	auipc	a5,0x41
    800087a2:	8737c783          	lbu	a5,-1933(a5) # 80049011 <excpt+0x1>
    800087a6:	c399                	beqz	a5,800087ac <tinst_tests_pf+0x59c>
    800087a8:	1c70106f          	j	8000a16e <tinst_tests_pf+0x1f5e>
    800087ac:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    800087ae:	0330000f          	fence	rw,rw
    800087b2:	4785                	li	a5,1
    800087b4:	00041717          	auipc	a4,0x41
    800087b8:	88073a23          	sd	zero,-1900(a4) # 80049048 <excpt+0x38>
    800087bc:	00f41023          	sh	a5,0(s0)
    800087c0:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sh, "sh", uint16_t);
    800087c4:	77f1                	lui	a5,0xffffc
    800087c6:	40019737          	lui	a4,0x40019
    800087ca:	eef7879b          	addiw	a5,a5,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    800087ce:	070a                	slli	a4,a4,0x2
    800087d0:	00f71023          	sh	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sh(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    800087d4:	00021617          	auipc	a2,0x21
    800087d8:	10460613          	addi	a2,a2,260 # 800298d8 <__func__.0+0x1e78>
    800087dc:	08200593          	li	a1,130
    800087e0:	0001f517          	auipc	a0,0x1f
    800087e4:	57850513          	addi	a0,a0,1400 # 80027d58 <__func__.0+0x2f8>
    800087e8:	50e1d0ef          	jal	80025cf6 <printf>
    800087ec:	00041797          	auipc	a5,0x41
    800087f0:	8257c783          	lbu	a5,-2011(a5) # 80049011 <excpt+0x1>
    800087f4:	e399                	bnez	a5,800087fa <tinst_tests_pf+0x5ea>
    800087f6:	62a0106f          	j	80009e20 <tinst_tests_pf+0x1c10>
    800087fa:	6418                	ld	a4,8(s0)
    800087fc:	47bd                	li	a5,15
    800087fe:	0001f597          	auipc	a1,0x1f
    80008802:	53258593          	addi	a1,a1,1330 # 80027d30 <__func__.0+0x2d0>
    80008806:	00f71463          	bne	a4,a5,8000880e <tinst_tests_pf+0x5fe>
    8000880a:	5c80106f          	j	80009dd2 <tinst_tests_pf+0x1bc2>
    8000880e:	0001f517          	auipc	a0,0x1f
    80008812:	56250513          	addi	a0,a0,1378 # 80027d70 <__func__.0+0x310>
    80008816:	4e01d0ef          	jal	80025cf6 <printf>
    8000881a:	00040797          	auipc	a5,0x40
    8000881e:	7f77c783          	lbu	a5,2039(a5) # 80049011 <excpt+0x1>
    80008822:	c799                	beqz	a5,80008830 <tinst_tests_pf+0x620>
    80008824:	6418                	ld	a4,8(s0)
    80008826:	47bd                	li	a5,15
    80008828:	00f71463          	bne	a4,a5,80008830 <tinst_tests_pf+0x620>
    8000882c:	04e0206f          	j	8000a87a <tinst_tests_pf+0x266a>
    80008830:	0001f517          	auipc	a0,0x1f
    80008834:	54850513          	addi	a0,a0,1352 # 80027d78 <__func__.0+0x318>
    80008838:	4be1d0ef          	jal	80025cf6 <printf>
    8000883c:	02900513          	li	a0,41
    80008840:	2c01c0ef          	jal	80024b00 <putchar>
    80008844:	4529                	li	a0,10
    80008846:	2ba1c0ef          	jal	80024b00 <putchar>
    8000884a:	00090a63          	beqz	s2,8000885e <tinst_tests_pf+0x64e>
    8000884e:	00040797          	auipc	a5,0x40
    80008852:	7c37c783          	lbu	a5,1987(a5) # 80049011 <excpt+0x1>
    80008856:	c399                	beqz	a5,8000885c <tinst_tests_pf+0x64c>
    80008858:	1650106f          	j	8000a1bc <tinst_tests_pf+0x1fac>
    8000885c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000885e:	0330000f          	fence	rw,rw
    80008862:	4785                	li	a5,1
    80008864:	00040717          	auipc	a4,0x40
    80008868:	7e073223          	sd	zero,2020(a4) # 80049048 <excpt+0x38>
    8000886c:	00f41023          	sh	a5,0(s0)
    80008870:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sw, "sw", uint32_t);
    80008874:	deadc7b7          	lui	a5,0xdeadc
    80008878:	40019737          	lui	a4,0x40019
    8000887c:	eef7879b          	addiw	a5,a5,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    80008880:	070a                	slli	a4,a4,0x2
    80008882:	00f72023          	sw	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sw(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    80008886:	00021617          	auipc	a2,0x21
    8000888a:	09260613          	addi	a2,a2,146 # 80029918 <__func__.0+0x1eb8>
    8000888e:	08200593          	li	a1,130
    80008892:	0001f517          	auipc	a0,0x1f
    80008896:	4c650513          	addi	a0,a0,1222 # 80027d58 <__func__.0+0x2f8>
    8000889a:	45c1d0ef          	jal	80025cf6 <printf>
    8000889e:	00040797          	auipc	a5,0x40
    800088a2:	7737c783          	lbu	a5,1907(a5) # 80049011 <excpt+0x1>
    800088a6:	e399                	bnez	a5,800088ac <tinst_tests_pf+0x69c>
    800088a8:	5d20106f          	j	80009e7a <tinst_tests_pf+0x1c6a>
    800088ac:	6418                	ld	a4,8(s0)
    800088ae:	47bd                	li	a5,15
    800088b0:	0001f597          	auipc	a1,0x1f
    800088b4:	48058593          	addi	a1,a1,1152 # 80027d30 <__func__.0+0x2d0>
    800088b8:	00f71463          	bne	a4,a5,800088c0 <tinst_tests_pf+0x6b0>
    800088bc:	5700106f          	j	80009e2c <tinst_tests_pf+0x1c1c>
    800088c0:	0001f517          	auipc	a0,0x1f
    800088c4:	4b050513          	addi	a0,a0,1200 # 80027d70 <__func__.0+0x310>
    800088c8:	42e1d0ef          	jal	80025cf6 <printf>
    800088cc:	00040797          	auipc	a5,0x40
    800088d0:	7457c783          	lbu	a5,1861(a5) # 80049011 <excpt+0x1>
    800088d4:	c799                	beqz	a5,800088e2 <tinst_tests_pf+0x6d2>
    800088d6:	6418                	ld	a4,8(s0)
    800088d8:	47bd                	li	a5,15
    800088da:	00f71463          	bne	a4,a5,800088e2 <tinst_tests_pf+0x6d2>
    800088de:	0380206f          	j	8000a916 <tinst_tests_pf+0x2706>
    800088e2:	0001f517          	auipc	a0,0x1f
    800088e6:	49650513          	addi	a0,a0,1174 # 80027d78 <__func__.0+0x318>
    800088ea:	40c1d0ef          	jal	80025cf6 <printf>
    800088ee:	02900513          	li	a0,41
    800088f2:	20e1c0ef          	jal	80024b00 <putchar>
    800088f6:	4529                	li	a0,10
    800088f8:	2081c0ef          	jal	80024b00 <putchar>
    800088fc:	00090a63          	beqz	s2,80008910 <tinst_tests_pf+0x700>
    80008900:	00040797          	auipc	a5,0x40
    80008904:	7117c783          	lbu	a5,1809(a5) # 80049011 <excpt+0x1>
    80008908:	c399                	beqz	a5,8000890e <tinst_tests_pf+0x6fe>
    8000890a:	1010106f          	j	8000a20a <tinst_tests_pf+0x1ffa>
    8000890e:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    80008910:	0330000f          	fence	rw,rw
    80008914:	4785                	li	a5,1
    80008916:	00040717          	auipc	a4,0x40
    8000891a:	72073923          	sd	zero,1842(a4) # 80049048 <excpt+0x38>
    8000891e:	00f41023          	sh	a5,0(s0)
    80008922:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80008926:	37ab77b7          	lui	a5,0x37ab7
    8000892a:	078a                	slli	a5,a5,0x2
    8000892c:	40019737          	lui	a4,0x40019
    80008930:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80008934:	070a                	slli	a4,a4,0x2
    80008936:	00f73023          	sd	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sd(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    8000893a:	00021617          	auipc	a2,0x21
    8000893e:	01e60613          	addi	a2,a2,30 # 80029958 <__func__.0+0x1ef8>
    80008942:	08200593          	li	a1,130
    80008946:	0001f517          	auipc	a0,0x1f
    8000894a:	41250513          	addi	a0,a0,1042 # 80027d58 <__func__.0+0x2f8>
    8000894e:	3a81d0ef          	jal	80025cf6 <printf>
    80008952:	00040797          	auipc	a5,0x40
    80008956:	6bf7c783          	lbu	a5,1727(a5) # 80049011 <excpt+0x1>
    8000895a:	e399                	bnez	a5,80008960 <tinst_tests_pf+0x750>
    8000895c:	5780106f          	j	80009ed4 <tinst_tests_pf+0x1cc4>
    80008960:	6418                	ld	a4,8(s0)
    80008962:	47bd                	li	a5,15
    80008964:	0001f597          	auipc	a1,0x1f
    80008968:	3cc58593          	addi	a1,a1,972 # 80027d30 <__func__.0+0x2d0>
    8000896c:	00f71463          	bne	a4,a5,80008974 <tinst_tests_pf+0x764>
    80008970:	5160106f          	j	80009e86 <tinst_tests_pf+0x1c76>
    80008974:	0001f517          	auipc	a0,0x1f
    80008978:	3fc50513          	addi	a0,a0,1020 # 80027d70 <__func__.0+0x310>
    8000897c:	37a1d0ef          	jal	80025cf6 <printf>
    80008980:	00040797          	auipc	a5,0x40
    80008984:	6917c783          	lbu	a5,1681(a5) # 80049011 <excpt+0x1>
    80008988:	c799                	beqz	a5,80008996 <tinst_tests_pf+0x786>
    8000898a:	6418                	ld	a4,8(s0)
    8000898c:	47bd                	li	a5,15
    8000898e:	00f71463          	bne	a4,a5,80008996 <tinst_tests_pf+0x786>
    80008992:	0200206f          	j	8000a9b2 <tinst_tests_pf+0x27a2>
    80008996:	0001f517          	auipc	a0,0x1f
    8000899a:	3e250513          	addi	a0,a0,994 # 80027d78 <__func__.0+0x318>
    8000899e:	3581d0ef          	jal	80025cf6 <printf>
    800089a2:	02900513          	li	a0,41
    800089a6:	15a1c0ef          	jal	80024b00 <putchar>
    800089aa:	4529                	li	a0,10
    800089ac:	1541c0ef          	jal	80024b00 <putchar>
    800089b0:	00090a63          	beqz	s2,800089c4 <tinst_tests_pf+0x7b4>
    800089b4:	00040797          	auipc	a5,0x40
    800089b8:	65d7c783          	lbu	a5,1629(a5) # 80049011 <excpt+0x1>
    800089bc:	c399                	beqz	a5,800089c2 <tinst_tests_pf+0x7b2>
    800089be:	09b0106f          	j	8000a258 <tinst_tests_pf+0x2048>
    800089c2:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    800089c4:	0330000f          	fence	rw,rw
    800089c8:	4785                	li	a5,1
    800089ca:	00040717          	auipc	a4,0x40
    800089ce:	66073f23          	sd	zero,1662(a4) # 80049048 <excpt+0x38>
    800089d2:	00f41023          	sh	a5,0(s0)
    800089d6:	0330000f          	fence	rw,rw
 * the asm extended chosen registers are part of the subset allowed
 * so we have to make sure.
 */

static inline uint64_t c_lw(uintptr_t addr){
    register uint64_t _addr asm("a0") = addr;
    800089da:	40019537          	lui	a0,0x40019
    800089de:	050a                	slli	a0,a0,0x2
    register uint64_t value asm("a1");
    asm volatile(
    800089e0:	410c                	lw	a1,0(a0)
    value = c_lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    800089e2:	00021617          	auipc	a2,0x21
    800089e6:	fb660613          	addi	a2,a2,-74 # 80029998 <__func__.0+0x1f38>
    800089ea:	08200593          	li	a1,130
    800089ee:	0001f517          	auipc	a0,0x1f
    800089f2:	36a50513          	addi	a0,a0,874 # 80027d58 <__func__.0+0x2f8>
    800089f6:	3001d0ef          	jal	80025cf6 <printf>
    800089fa:	00040797          	auipc	a5,0x40
    800089fe:	6177c783          	lbu	a5,1559(a5) # 80049011 <excpt+0x1>
    80008a02:	c799                	beqz	a5,80008a10 <tinst_tests_pf+0x800>
    80008a04:	6418                	ld	a4,8(s0)
    80008a06:	47b5                	li	a5,13
    80008a08:	00f71463          	bne	a4,a5,80008a10 <tinst_tests_pf+0x800>
    80008a0c:	1970106f          	j	8000a3a2 <tinst_tests_pf+0x2192>
    80008a10:	0001f597          	auipc	a1,0x1f
    80008a14:	32058593          	addi	a1,a1,800 # 80027d30 <__func__.0+0x2d0>
    80008a18:	0001f517          	auipc	a0,0x1f
    80008a1c:	35850513          	addi	a0,a0,856 # 80027d70 <__func__.0+0x310>
    80008a20:	2d61d0ef          	jal	80025cf6 <printf>
    80008a24:	00040797          	auipc	a5,0x40
    80008a28:	5ed7c783          	lbu	a5,1517(a5) # 80049011 <excpt+0x1>
    80008a2c:	c799                	beqz	a5,80008a3a <tinst_tests_pf+0x82a>
    80008a2e:	6418                	ld	a4,8(s0)
    80008a30:	47b5                	li	a5,13
    80008a32:	00f71463          	bne	a4,a5,80008a3a <tinst_tests_pf+0x82a>
    80008a36:	0180206f          	j	8000aa4e <tinst_tests_pf+0x283e>
    80008a3a:	0001f517          	auipc	a0,0x1f
    80008a3e:	33e50513          	addi	a0,a0,830 # 80027d78 <__func__.0+0x318>
    80008a42:	2b41d0ef          	jal	80025cf6 <printf>
    80008a46:	02900513          	li	a0,41
    80008a4a:	0b61c0ef          	jal	80024b00 <putchar>
    80008a4e:	4529                	li	a0,10
    80008a50:	0b01c0ef          	jal	80024b00 <putchar>
    80008a54:	00090a63          	beqz	s2,80008a68 <tinst_tests_pf+0x858>
    80008a58:	00040797          	auipc	a5,0x40
    80008a5c:	5b97c783          	lbu	a5,1465(a5) # 80049011 <excpt+0x1>
    80008a60:	c399                	beqz	a5,80008a66 <tinst_tests_pf+0x856>
    80008a62:	0450106f          	j	8000a2a6 <tinst_tests_pf+0x2096>
    80008a66:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80008a68:	0330000f          	fence	rw,rw
    80008a6c:	4785                	li	a5,1
    80008a6e:	00040717          	auipc	a4,0x40
    80008a72:	5c073d23          	sd	zero,1498(a4) # 80049048 <excpt+0x38>
    80008a76:	00f41023          	sh	a5,0(s0)
    80008a7a:	0330000f          	fence	rw,rw
    );
    return value;
}

static inline uint64_t c_ld(uintptr_t addr){
    register uint64_t _addr asm("a0") = addr;
    80008a7e:	40019537          	lui	a0,0x40019
    80008a82:	050a                	slli	a0,a0,0x2
    register uint64_t value asm("a1");
    asm volatile(
    80008a84:	610c                	ld	a1,0(a0)
    value = c_ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    80008a86:	00021617          	auipc	a2,0x21
    80008a8a:	f5260613          	addi	a2,a2,-174 # 800299d8 <__func__.0+0x1f78>
        "c.ld    %0, 0(%1)\n\t"
        :"=r"(value): "r"(_addr) : "memory"
    );
    return value;
    80008a8e:	84ae                	mv	s1,a1
    80008a90:	0001f517          	auipc	a0,0x1f
    80008a94:	2c850513          	addi	a0,a0,712 # 80027d58 <__func__.0+0x2f8>
    80008a98:	08200593          	li	a1,130
    80008a9c:	25a1d0ef          	jal	80025cf6 <printf>
    80008aa0:	00040797          	auipc	a5,0x40
    80008aa4:	5717c783          	lbu	a5,1393(a5) # 80049011 <excpt+0x1>
    80008aa8:	c799                	beqz	a5,80008ab6 <tinst_tests_pf+0x8a6>
    80008aaa:	6418                	ld	a4,8(s0)
    80008aac:	47b5                	li	a5,13
    80008aae:	00f71463          	bne	a4,a5,80008ab6 <tinst_tests_pf+0x8a6>
    80008ab2:	1450106f          	j	8000a3f6 <tinst_tests_pf+0x21e6>
    80008ab6:	0001f597          	auipc	a1,0x1f
    80008aba:	27a58593          	addi	a1,a1,634 # 80027d30 <__func__.0+0x2d0>
    80008abe:	0001f517          	auipc	a0,0x1f
    80008ac2:	2b250513          	addi	a0,a0,690 # 80027d70 <__func__.0+0x310>
    80008ac6:	2301d0ef          	jal	80025cf6 <printf>
    80008aca:	00040797          	auipc	a5,0x40
    80008ace:	5477c783          	lbu	a5,1351(a5) # 80049011 <excpt+0x1>
    80008ad2:	c799                	beqz	a5,80008ae0 <tinst_tests_pf+0x8d0>
    80008ad4:	6418                	ld	a4,8(s0)
    80008ad6:	47b5                	li	a5,13
    80008ad8:	00f71463          	bne	a4,a5,80008ae0 <tinst_tests_pf+0x8d0>
    80008adc:	7f90106f          	j	8000aad4 <tinst_tests_pf+0x28c4>
    80008ae0:	0001f517          	auipc	a0,0x1f
    80008ae4:	29850513          	addi	a0,a0,664 # 80027d78 <__func__.0+0x318>
    80008ae8:	20e1d0ef          	jal	80025cf6 <printf>
    80008aec:	02900513          	li	a0,41
    80008af0:	0101c0ef          	jal	80024b00 <putchar>
    80008af4:	4529                	li	a0,10
    80008af6:	00a1c0ef          	jal	80024b00 <putchar>
    80008afa:	00090a63          	beqz	s2,80008b0e <tinst_tests_pf+0x8fe>
    80008afe:	00040797          	auipc	a5,0x40
    80008b02:	5137c783          	lbu	a5,1299(a5) # 80049011 <excpt+0x1>
    80008b06:	c399                	beqz	a5,80008b0c <tinst_tests_pf+0x8fc>
    80008b08:	7d80106f          	j	8000a2e0 <tinst_tests_pf+0x20d0>
    80008b0c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80008b0e:	0330000f          	fence	rw,rw
    80008b12:	4785                	li	a5,1
    80008b14:	00040717          	auipc	a4,0x40
    80008b18:	52073a23          	sd	zero,1332(a4) # 80049048 <excpt+0x38>
    80008b1c:	00f41023          	sh	a5,0(s0)
    80008b20:	0330000f          	fence	rw,rw
}

static inline void c_sw(uintptr_t addr, uint64_t value){
    register uint64_t _addr asm("a0") = addr;
    80008b24:	40019537          	lui	a0,0x40019
    register uint64_t _value asm("a1") = value;
    80008b28:	85a6                	mv	a1,s1
    register uint64_t _addr asm("a0") = addr;
    80008b2a:	050a                	slli	a0,a0,0x2
    asm volatile(
    80008b2c:	c10c                	sw	a1,0(a0)
    c_sw(vaddr_f, value);       
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80008b2e:	00021617          	auipc	a2,0x21
    80008b32:	e6a60613          	addi	a2,a2,-406 # 80029998 <__func__.0+0x1f38>
    80008b36:	08200593          	li	a1,130
    80008b3a:	0001f517          	auipc	a0,0x1f
    80008b3e:	21e50513          	addi	a0,a0,542 # 80027d58 <__func__.0+0x2f8>
    80008b42:	1b41d0ef          	jal	80025cf6 <printf>
    80008b46:	00040797          	auipc	a5,0x40
    80008b4a:	4cb7c783          	lbu	a5,1227(a5) # 80049011 <excpt+0x1>
    80008b4e:	c799                	beqz	a5,80008b5c <tinst_tests_pf+0x94c>
    80008b50:	6418                	ld	a4,8(s0)
    80008b52:	47bd                	li	a5,15
    80008b54:	00f71463          	bne	a4,a5,80008b5c <tinst_tests_pf+0x94c>
    80008b58:	0b30106f          	j	8000a40a <tinst_tests_pf+0x21fa>
    80008b5c:	0001f597          	auipc	a1,0x1f
    80008b60:	1d458593          	addi	a1,a1,468 # 80027d30 <__func__.0+0x2d0>
    80008b64:	0001f517          	auipc	a0,0x1f
    80008b68:	20c50513          	addi	a0,a0,524 # 80027d70 <__func__.0+0x310>
    80008b6c:	18a1d0ef          	jal	80025cf6 <printf>
    80008b70:	00040797          	auipc	a5,0x40
    80008b74:	4a17c783          	lbu	a5,1185(a5) # 80049011 <excpt+0x1>
    80008b78:	c799                	beqz	a5,80008b86 <tinst_tests_pf+0x976>
    80008b7a:	6418                	ld	a4,8(s0)
    80008b7c:	47bd                	li	a5,15
    80008b7e:	00f71463          	bne	a4,a5,80008b86 <tinst_tests_pf+0x976>
    80008b82:	7dd0106f          	j	8000ab5e <tinst_tests_pf+0x294e>
    80008b86:	0001f517          	auipc	a0,0x1f
    80008b8a:	1f250513          	addi	a0,a0,498 # 80027d78 <__func__.0+0x318>
    80008b8e:	1681d0ef          	jal	80025cf6 <printf>
    80008b92:	02900513          	li	a0,41
    80008b96:	76b1b0ef          	jal	80024b00 <putchar>
    80008b9a:	4529                	li	a0,10
    80008b9c:	7651b0ef          	jal	80024b00 <putchar>
    80008ba0:	00090e63          	beqz	s2,80008bbc <tinst_tests_pf+0x9ac>
    80008ba4:	00040797          	auipc	a5,0x40
    80008ba8:	46d7c783          	lbu	a5,1133(a5) # 80049011 <excpt+0x1>
    80008bac:	c799                	beqz	a5,80008bba <tinst_tests_pf+0x9aa>
    80008bae:	6418                	ld	a4,8(s0)
    80008bb0:	47bd                	li	a5,15
    80008bb2:	00f71463          	bne	a4,a5,80008bba <tinst_tests_pf+0x9aa>
    80008bb6:	6060206f          	j	8000b1bc <tinst_tests_pf+0x2fac>
    80008bba:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    80008bbc:	0330000f          	fence	rw,rw
    80008bc0:	4785                	li	a5,1
    80008bc2:	00040717          	auipc	a4,0x40
    80008bc6:	48073323          	sd	zero,1158(a4) # 80049048 <excpt+0x38>
    80008bca:	00f41023          	sh	a5,0(s0)
    80008bce:	0330000f          	fence	rw,rw
        :: "r"(_value), "r"(_addr): "memory"
    );
}

static inline void c_sd(uintptr_t addr, uint64_t value){
    register uint64_t _addr asm("a0") = addr;
    80008bd2:	40019537          	lui	a0,0x40019
    register uint64_t _value asm("a1") = value;
    80008bd6:	85a6                	mv	a1,s1
    register uint64_t _addr asm("a0") = addr;
    80008bd8:	050a                	slli	a0,a0,0x2
    asm volatile(
    80008bda:	e10c                	sd	a1,0(a0)
    c_sd(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    80008bdc:	00021617          	auipc	a2,0x21
    80008be0:	e3c60613          	addi	a2,a2,-452 # 80029a18 <__func__.0+0x1fb8>
    80008be4:	08200593          	li	a1,130
    80008be8:	0001f517          	auipc	a0,0x1f
    80008bec:	17050513          	addi	a0,a0,368 # 80027d58 <__func__.0+0x2f8>
    80008bf0:	1061d0ef          	jal	80025cf6 <printf>
    80008bf4:	00040797          	auipc	a5,0x40
    80008bf8:	41d7c783          	lbu	a5,1053(a5) # 80049011 <excpt+0x1>
    80008bfc:	c799                	beqz	a5,80008c0a <tinst_tests_pf+0x9fa>
    80008bfe:	6418                	ld	a4,8(s0)
    80008c00:	47bd                	li	a5,15
    80008c02:	00f71463          	bne	a4,a5,80008c0a <tinst_tests_pf+0x9fa>
    80008c06:	0190106f          	j	8000a41e <tinst_tests_pf+0x220e>
    80008c0a:	0001f597          	auipc	a1,0x1f
    80008c0e:	12658593          	addi	a1,a1,294 # 80027d30 <__func__.0+0x2d0>
    80008c12:	0001f517          	auipc	a0,0x1f
    80008c16:	15e50513          	addi	a0,a0,350 # 80027d70 <__func__.0+0x310>
    80008c1a:	0dc1d0ef          	jal	80025cf6 <printf>
    80008c1e:	00040797          	auipc	a5,0x40
    80008c22:	3f37c783          	lbu	a5,1011(a5) # 80049011 <excpt+0x1>
    80008c26:	c799                	beqz	a5,80008c34 <tinst_tests_pf+0xa24>
    80008c28:	6418                	ld	a4,8(s0)
    80008c2a:	47bd                	li	a5,15
    80008c2c:	00f71463          	bne	a4,a5,80008c34 <tinst_tests_pf+0xa24>
    80008c30:	7bd0106f          	j	8000abec <tinst_tests_pf+0x29dc>
    80008c34:	0001f517          	auipc	a0,0x1f
    80008c38:	14450513          	addi	a0,a0,324 # 80027d78 <__func__.0+0x318>
    80008c3c:	0ba1d0ef          	jal	80025cf6 <printf>
    80008c40:	02900513          	li	a0,41
    80008c44:	6bd1b0ef          	jal	80024b00 <putchar>
    80008c48:	4529                	li	a0,10
    80008c4a:	6b71b0ef          	jal	80024b00 <putchar>
    80008c4e:	00090e63          	beqz	s2,80008c6a <tinst_tests_pf+0xa5a>
    80008c52:	00040797          	auipc	a5,0x40
    80008c56:	3bf7c783          	lbu	a5,959(a5) # 80049011 <excpt+0x1>
    80008c5a:	c799                	beqz	a5,80008c68 <tinst_tests_pf+0xa58>
    80008c5c:	6418                	ld	a4,8(s0)
    80008c5e:	47bd                	li	a5,15
    80008c60:	00f71463          	bne	a4,a5,80008c68 <tinst_tests_pf+0xa58>
    80008c64:	58e0206f          	j	8000b1f2 <tinst_tests_pf+0x2fe2>
    80008c68:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    80008c6a:	0330000f          	fence	rw,rw
    80008c6e:	4785                	li	a5,1
    80008c70:	00040717          	auipc	a4,0x40
    80008c74:	3c073c23          	sd	zero,984(a4) # 80049048 <excpt+0x38>
    80008c78:	00f41023          	sh	a5,0(s0)
    80008c7c:	0330000f          	fence	rw,rw
    );
}

static inline uint32_t lr_w(uintptr_t addr){
    uint32_t value;
    asm volatile(
    80008c80:	400194b7          	lui	s1,0x40019
    80008c84:	048a                	slli	s1,s1,0x2
    80008c86:	1004a4af          	lr.w	s1,(s1)
    value = lr_w(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    80008c8a:	00021617          	auipc	a2,0x21
    80008c8e:	dce60613          	addi	a2,a2,-562 # 80029a58 <__func__.0+0x1ff8>
    80008c92:	08200593          	li	a1,130
    80008c96:	0001f517          	auipc	a0,0x1f
    80008c9a:	0c250513          	addi	a0,a0,194 # 80027d58 <__func__.0+0x2f8>
    80008c9e:	0581d0ef          	jal	80025cf6 <printf>
    80008ca2:	00040797          	auipc	a5,0x40
    80008ca6:	36f7c783          	lbu	a5,879(a5) # 80049011 <excpt+0x1>
    value = lr_w(vaddr_f);
    80008caa:	1482                	slli	s1,s1,0x20
    80008cac:	9081                	srli	s1,s1,0x20
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    80008cae:	e399                	bnez	a5,80008cb4 <tinst_tests_pf+0xaa4>
    80008cb0:	27e0106f          	j	80009f2e <tinst_tests_pf+0x1d1e>
    80008cb4:	6418                	ld	a4,8(s0)
    80008cb6:	47b5                	li	a5,13
    80008cb8:	0001f597          	auipc	a1,0x1f
    80008cbc:	07858593          	addi	a1,a1,120 # 80027d30 <__func__.0+0x2d0>
    80008cc0:	00f71463          	bne	a4,a5,80008cc8 <tinst_tests_pf+0xab8>
    80008cc4:	21c0106f          	j	80009ee0 <tinst_tests_pf+0x1cd0>
    80008cc8:	0001f517          	auipc	a0,0x1f
    80008ccc:	0a850513          	addi	a0,a0,168 # 80027d70 <__func__.0+0x310>
    80008cd0:	0261d0ef          	jal	80025cf6 <printf>
    80008cd4:	00040797          	auipc	a5,0x40
    80008cd8:	33d7c783          	lbu	a5,829(a5) # 80049011 <excpt+0x1>
    80008cdc:	c799                	beqz	a5,80008cea <tinst_tests_pf+0xada>
    80008cde:	6418                	ld	a4,8(s0)
    80008ce0:	47b5                	li	a5,13
    80008ce2:	00f71463          	bne	a4,a5,80008cea <tinst_tests_pf+0xada>
    80008ce6:	6380106f          	j	8000a31e <tinst_tests_pf+0x210e>
    80008cea:	0001f517          	auipc	a0,0x1f
    80008cee:	08e50513          	addi	a0,a0,142 # 80027d78 <__func__.0+0x318>
    80008cf2:	0041d0ef          	jal	80025cf6 <printf>
    80008cf6:	02900513          	li	a0,41
    80008cfa:	6071b0ef          	jal	80024b00 <putchar>
    80008cfe:	4529                	li	a0,10
    80008d00:	6011b0ef          	jal	80024b00 <putchar>
    80008d04:	00090e63          	beqz	s2,80008d20 <tinst_tests_pf+0xb10>
    80008d08:	00040797          	auipc	a5,0x40
    80008d0c:	3097c783          	lbu	a5,777(a5) # 80049011 <excpt+0x1>
    80008d10:	c799                	beqz	a5,80008d1e <tinst_tests_pf+0xb0e>
    80008d12:	6418                	ld	a4,8(s0)
    80008d14:	47b5                	li	a5,13
    80008d16:	00f71463          	bne	a4,a5,80008d1e <tinst_tests_pf+0xb0e>
    80008d1a:	50a0206f          	j	8000b224 <tinst_tests_pf+0x3014>
    80008d1e:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008d20:	0330000f          	fence	rw,rw
    80008d24:	4785                	li	a5,1
    80008d26:	00040717          	auipc	a4,0x40
    80008d2a:	32073123          	sd	zero,802(a4) # 80049048 <excpt+0x38>
    80008d2e:	00f41023          	sh	a5,0(s0)
    80008d32:	0330000f          	fence	rw,rw
    );
    return value;
}

static inline uint32_t sc_w(uintptr_t addr, uint64_t value){
    asm volatile(
    80008d36:	400197b7          	lui	a5,0x40019
    80008d3a:	078a                	slli	a5,a5,0x2
    80008d3c:	1897a4af          	sc.w	s1,s1,(a5)
    value = sc_w(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    80008d40:	00021617          	auipc	a2,0x21
    80008d44:	d5860613          	addi	a2,a2,-680 # 80029a98 <__func__.0+0x2038>
    80008d48:	08200593          	li	a1,130
    80008d4c:	0001f517          	auipc	a0,0x1f
    80008d50:	00c50513          	addi	a0,a0,12 # 80027d58 <__func__.0+0x2f8>
    80008d54:	7a31c0ef          	jal	80025cf6 <printf>
    80008d58:	00040797          	auipc	a5,0x40
    80008d5c:	2b97c783          	lbu	a5,697(a5) # 80049011 <excpt+0x1>
        "sc.w    %0, %0, 0(%1)\n\t"
        : "+r"(value) : "r"(addr): "memory"
    );
    return value;
    80008d60:	2481                	sext.w	s1,s1
    80008d62:	e399                	bnez	a5,80008d68 <tinst_tests_pf+0xb58>
    80008d64:	2240106f          	j	80009f88 <tinst_tests_pf+0x1d78>
    80008d68:	6418                	ld	a4,8(s0)
    80008d6a:	47bd                	li	a5,15
    80008d6c:	0001f597          	auipc	a1,0x1f
    80008d70:	fc458593          	addi	a1,a1,-60 # 80027d30 <__func__.0+0x2d0>
    80008d74:	00f71463          	bne	a4,a5,80008d7c <tinst_tests_pf+0xb6c>
    80008d78:	1c20106f          	j	80009f3a <tinst_tests_pf+0x1d2a>
    80008d7c:	0001f517          	auipc	a0,0x1f
    80008d80:	ff450513          	addi	a0,a0,-12 # 80027d70 <__func__.0+0x310>
    80008d84:	7731c0ef          	jal	80025cf6 <printf>
    80008d88:	00040797          	auipc	a5,0x40
    80008d8c:	2897c783          	lbu	a5,649(a5) # 80049011 <excpt+0x1>
    80008d90:	c799                	beqz	a5,80008d9e <tinst_tests_pf+0xb8e>
    80008d92:	6418                	ld	a4,8(s0)
    80008d94:	47bd                	li	a5,15
    80008d96:	00f71463          	bne	a4,a5,80008d9e <tinst_tests_pf+0xb8e>
    80008d9a:	5c60106f          	j	8000a360 <tinst_tests_pf+0x2150>
    80008d9e:	0001f517          	auipc	a0,0x1f
    80008da2:	fda50513          	addi	a0,a0,-38 # 80027d78 <__func__.0+0x318>
    80008da6:	7511c0ef          	jal	80025cf6 <printf>
    80008daa:	02900513          	li	a0,41
    80008dae:	5531b0ef          	jal	80024b00 <putchar>
    80008db2:	4529                	li	a0,10
    80008db4:	54d1b0ef          	jal	80024b00 <putchar>
    80008db8:	00090e63          	beqz	s2,80008dd4 <tinst_tests_pf+0xbc4>
    80008dbc:	00040797          	auipc	a5,0x40
    80008dc0:	2557c783          	lbu	a5,597(a5) # 80049011 <excpt+0x1>
    80008dc4:	c799                	beqz	a5,80008dd2 <tinst_tests_pf+0xbc2>
    80008dc6:	6418                	ld	a4,8(s0)
    80008dc8:	47bd                	li	a5,15
    80008dca:	00f71463          	bne	a4,a5,80008dd2 <tinst_tests_pf+0xbc2>
    80008dce:	4980206f          	j	8000b266 <tinst_tests_pf+0x3056>
    80008dd2:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008dd4:	0330000f          	fence	rw,rw
    80008dd8:	4785                	li	a5,1
    80008dda:	00040717          	auipc	a4,0x40
    80008dde:	26073723          	sd	zero,622(a4) # 80049048 <excpt+0x38>
    80008de2:	00f41023          	sh	a5,0(s0)
    80008de6:	0330000f          	fence	rw,rw
            : "+r"(value) : "r"(addr): "memory" \
        ); \
        return value; \
    }

AMO_INSTRUCTION(amoswap_w, "amoswap.w", uint32_t);
    80008dea:	400197b7          	lui	a5,0x40019
    80008dee:	078a                	slli	a5,a5,0x2
    80008df0:	0897a4af          	amoswap.w	s1,s1,(a5)
    value = amoswap_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    80008df4:	00021617          	auipc	a2,0x21
    80008df8:	ce460613          	addi	a2,a2,-796 # 80029ad8 <__func__.0+0x2078>
    80008dfc:	08200593          	li	a1,130
    80008e00:	0001f517          	auipc	a0,0x1f
    80008e04:	f5850513          	addi	a0,a0,-168 # 80027d58 <__func__.0+0x2f8>
    80008e08:	6ef1c0ef          	jal	80025cf6 <printf>
    80008e0c:	00040797          	auipc	a5,0x40
    80008e10:	2057c783          	lbu	a5,517(a5) # 80049011 <excpt+0x1>
    80008e14:	e399                	bnez	a5,80008e1a <tinst_tests_pf+0xc0a>
    80008e16:	1cc0106f          	j	80009fe2 <tinst_tests_pf+0x1dd2>
    80008e1a:	6418                	ld	a4,8(s0)
    80008e1c:	47bd                	li	a5,15
    80008e1e:	0001f597          	auipc	a1,0x1f
    80008e22:	f1258593          	addi	a1,a1,-238 # 80027d30 <__func__.0+0x2d0>
    80008e26:	00f71463          	bne	a4,a5,80008e2e <tinst_tests_pf+0xc1e>
    80008e2a:	16a0106f          	j	80009f94 <tinst_tests_pf+0x1d84>
    80008e2e:	0001f517          	auipc	a0,0x1f
    80008e32:	f4250513          	addi	a0,a0,-190 # 80027d70 <__func__.0+0x310>
    80008e36:	6c11c0ef          	jal	80025cf6 <printf>
    80008e3a:	00040797          	auipc	a5,0x40
    80008e3e:	1d77c783          	lbu	a5,471(a5) # 80049011 <excpt+0x1>
    80008e42:	c799                	beqz	a5,80008e50 <tinst_tests_pf+0xc40>
    80008e44:	6418                	ld	a4,8(s0)
    80008e46:	47bd                	li	a5,15
    80008e48:	00f71463          	bne	a4,a5,80008e50 <tinst_tests_pf+0xc40>
    80008e4c:	5680106f          	j	8000a3b4 <tinst_tests_pf+0x21a4>
    80008e50:	0001f517          	auipc	a0,0x1f
    80008e54:	f2850513          	addi	a0,a0,-216 # 80027d78 <__func__.0+0x318>
    80008e58:	69f1c0ef          	jal	80025cf6 <printf>
    80008e5c:	02900513          	li	a0,41
    80008e60:	4a11b0ef          	jal	80024b00 <putchar>
    80008e64:	4529                	li	a0,10
    80008e66:	49b1b0ef          	jal	80024b00 <putchar>
    80008e6a:	00090e63          	beqz	s2,80008e86 <tinst_tests_pf+0xc76>
    80008e6e:	00040797          	auipc	a5,0x40
    80008e72:	1a37c783          	lbu	a5,419(a5) # 80049011 <excpt+0x1>
    80008e76:	c799                	beqz	a5,80008e84 <tinst_tests_pf+0xc74>
    80008e78:	6418                	ld	a4,8(s0)
    80008e7a:	47bd                	li	a5,15
    80008e7c:	00f71463          	bne	a4,a5,80008e84 <tinst_tests_pf+0xc74>
    80008e80:	4280206f          	j	8000b2a8 <tinst_tests_pf+0x3098>
    80008e84:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008e86:	0330000f          	fence	rw,rw
    80008e8a:	4785                	li	a5,1
    80008e8c:	00040717          	auipc	a4,0x40
    80008e90:	1a073e23          	sd	zero,444(a4) # 80049048 <excpt+0x38>
    80008e94:	00f41023          	sh	a5,0(s0)
    80008e98:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80008e9c:	400197b7          	lui	a5,0x40019
    80008ea0:	078a                	slli	a5,a5,0x2
    80008ea2:	0097a4af          	amoadd.w	s1,s1,(a5)
    value = amoadd_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    80008ea6:	00021617          	auipc	a2,0x21
    80008eaa:	c7260613          	addi	a2,a2,-910 # 80029b18 <__func__.0+0x20b8>
    80008eae:	08200593          	li	a1,130
    80008eb2:	0001f517          	auipc	a0,0x1f
    80008eb6:	ea650513          	addi	a0,a0,-346 # 80027d58 <__func__.0+0x2f8>
    80008eba:	63d1c0ef          	jal	80025cf6 <printf>
    80008ebe:	00040797          	auipc	a5,0x40
    80008ec2:	1537c783          	lbu	a5,339(a5) # 80049011 <excpt+0x1>
    80008ec6:	c399                	beqz	a5,80008ecc <tinst_tests_pf+0xcbc>
    80008ec8:	1ac0106f          	j	8000a074 <tinst_tests_pf+0x1e64>
    80008ecc:	0001f597          	auipc	a1,0x1f
    80008ed0:	e6458593          	addi	a1,a1,-412 # 80027d30 <__func__.0+0x2d0>
    80008ed4:	0001f517          	auipc	a0,0x1f
    80008ed8:	e9c50513          	addi	a0,a0,-356 # 80027d70 <__func__.0+0x310>
    80008edc:	61b1c0ef          	jal	80025cf6 <printf>
    80008ee0:	00040797          	auipc	a5,0x40
    80008ee4:	1317c783          	lbu	a5,305(a5) # 80049011 <excpt+0x1>
    80008ee8:	c799                	beqz	a5,80008ef6 <tinst_tests_pf+0xce6>
    80008eea:	6418                	ld	a4,8(s0)
    80008eec:	47bd                	li	a5,15
    80008eee:	00f71463          	bne	a4,a5,80008ef6 <tinst_tests_pf+0xce6>
    80008ef2:	6930106f          	j	8000ad84 <tinst_tests_pf+0x2b74>
    80008ef6:	0001f517          	auipc	a0,0x1f
    80008efa:	e8250513          	addi	a0,a0,-382 # 80027d78 <__func__.0+0x318>
    80008efe:	5f91c0ef          	jal	80025cf6 <printf>
    80008f02:	02900513          	li	a0,41
    80008f06:	3fb1b0ef          	jal	80024b00 <putchar>
    80008f0a:	4529                	li	a0,10
    80008f0c:	3f51b0ef          	jal	80024b00 <putchar>
    80008f10:	00090e63          	beqz	s2,80008f2c <tinst_tests_pf+0xd1c>
    80008f14:	00040797          	auipc	a5,0x40
    80008f18:	0fd7c783          	lbu	a5,253(a5) # 80049011 <excpt+0x1>
    80008f1c:	c799                	beqz	a5,80008f2a <tinst_tests_pf+0xd1a>
    80008f1e:	6418                	ld	a4,8(s0)
    80008f20:	47bd                	li	a5,15
    80008f22:	00f71463          	bne	a4,a5,80008f2a <tinst_tests_pf+0xd1a>
    80008f26:	3c40206f          	j	8000b2ea <tinst_tests_pf+0x30da>
    80008f2a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008f2c:	0330000f          	fence	rw,rw
    80008f30:	4785                	li	a5,1
    80008f32:	00040717          	auipc	a4,0x40
    80008f36:	10073b23          	sd	zero,278(a4) # 80049048 <excpt+0x38>
    80008f3a:	00f41023          	sh	a5,0(s0)
    80008f3e:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoxor_w, "amoxor.w", uint32_t);
    80008f42:	400197b7          	lui	a5,0x40019
    80008f46:	078a                	slli	a5,a5,0x2
    80008f48:	2097a4af          	amoxor.w	s1,s1,(a5)
    value = amoxor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    80008f4c:	00021617          	auipc	a2,0x21
    80008f50:	c0c60613          	addi	a2,a2,-1012 # 80029b58 <__func__.0+0x20f8>
    80008f54:	08200593          	li	a1,130
    80008f58:	0001f517          	auipc	a0,0x1f
    80008f5c:	e0050513          	addi	a0,a0,-512 # 80027d58 <__func__.0+0x2f8>
    80008f60:	5971c0ef          	jal	80025cf6 <printf>
    80008f64:	00040797          	auipc	a5,0x40
    80008f68:	0ad7c783          	lbu	a5,173(a5) # 80049011 <excpt+0x1>
    80008f6c:	e399                	bnez	a5,80008f72 <tinst_tests_pf+0xd62>
    80008f6e:	6100106f          	j	8000a57e <tinst_tests_pf+0x236e>
    80008f72:	6418                	ld	a4,8(s0)
    80008f74:	47bd                	li	a5,15
    80008f76:	0001f597          	auipc	a1,0x1f
    80008f7a:	dba58593          	addi	a1,a1,-582 # 80027d30 <__func__.0+0x2d0>
    80008f7e:	00f71463          	bne	a4,a5,80008f86 <tinst_tests_pf+0xd76>
    80008f82:	5b00106f          	j	8000a532 <tinst_tests_pf+0x2322>
    80008f86:	0001f517          	auipc	a0,0x1f
    80008f8a:	dea50513          	addi	a0,a0,-534 # 80027d70 <__func__.0+0x310>
    80008f8e:	5691c0ef          	jal	80025cf6 <printf>
    80008f92:	00040797          	auipc	a5,0x40
    80008f96:	07f7c783          	lbu	a5,127(a5) # 80049011 <excpt+0x1>
    80008f9a:	c799                	beqz	a5,80008fa8 <tinst_tests_pf+0xd98>
    80008f9c:	6418                	ld	a4,8(s0)
    80008f9e:	47bd                	li	a5,15
    80008fa0:	00f71463          	bne	a4,a5,80008fa8 <tinst_tests_pf+0xd98>
    80008fa4:	6230106f          	j	8000adc6 <tinst_tests_pf+0x2bb6>
    80008fa8:	0001f517          	auipc	a0,0x1f
    80008fac:	dd050513          	addi	a0,a0,-560 # 80027d78 <__func__.0+0x318>
    80008fb0:	5471c0ef          	jal	80025cf6 <printf>
    80008fb4:	02900513          	li	a0,41
    80008fb8:	3491b0ef          	jal	80024b00 <putchar>
    80008fbc:	4529                	li	a0,10
    80008fbe:	3431b0ef          	jal	80024b00 <putchar>
    80008fc2:	00090e63          	beqz	s2,80008fde <tinst_tests_pf+0xdce>
    80008fc6:	00040797          	auipc	a5,0x40
    80008fca:	04b7c783          	lbu	a5,75(a5) # 80049011 <excpt+0x1>
    80008fce:	c799                	beqz	a5,80008fdc <tinst_tests_pf+0xdcc>
    80008fd0:	6418                	ld	a4,8(s0)
    80008fd2:	47bd                	li	a5,15
    80008fd4:	00f71463          	bne	a4,a5,80008fdc <tinst_tests_pf+0xdcc>
    80008fd8:	3ac0206f          	j	8000b384 <tinst_tests_pf+0x3174>
    80008fdc:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
       TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008fde:	0330000f          	fence	rw,rw
    80008fe2:	4785                	li	a5,1
    80008fe4:	00040717          	auipc	a4,0x40
    80008fe8:	06073223          	sd	zero,100(a4) # 80049048 <excpt+0x38>
    80008fec:	00f41023          	sh	a5,0(s0)
    80008ff0:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoand_w, "amoand.w", uint32_t);
    80008ff4:	400197b7          	lui	a5,0x40019
    80008ff8:	078a                	slli	a5,a5,0x2
    80008ffa:	6097a4af          	amoand.w	s1,s1,(a5)
    value = amoand_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    80008ffe:	00021617          	auipc	a2,0x21
    80009002:	b9a60613          	addi	a2,a2,-1126 # 80029b98 <__func__.0+0x2138>
    80009006:	08200593          	li	a1,130
    8000900a:	0001f517          	auipc	a0,0x1f
    8000900e:	d4e50513          	addi	a0,a0,-690 # 80027d58 <__func__.0+0x2f8>
    80009012:	4e51c0ef          	jal	80025cf6 <printf>
    80009016:	00040797          	auipc	a5,0x40
    8000901a:	ffb7c783          	lbu	a5,-5(a5) # 80049011 <excpt+0x1>
    8000901e:	e399                	bnez	a5,80009024 <tinst_tests_pf+0xe14>
    80009020:	5f00106f          	j	8000a610 <tinst_tests_pf+0x2400>
    80009024:	6418                	ld	a4,8(s0)
    80009026:	47bd                	li	a5,15
    80009028:	0001f597          	auipc	a1,0x1f
    8000902c:	d0858593          	addi	a1,a1,-760 # 80027d30 <__func__.0+0x2d0>
    80009030:	00f71463          	bne	a4,a5,80009038 <tinst_tests_pf+0xe28>
    80009034:	5900106f          	j	8000a5c4 <tinst_tests_pf+0x23b4>
    80009038:	0001f517          	auipc	a0,0x1f
    8000903c:	d3850513          	addi	a0,a0,-712 # 80027d70 <__func__.0+0x310>
    80009040:	4b71c0ef          	jal	80025cf6 <printf>
    80009044:	00040797          	auipc	a5,0x40
    80009048:	fcd7c783          	lbu	a5,-51(a5) # 80049011 <excpt+0x1>
    8000904c:	c799                	beqz	a5,8000905a <tinst_tests_pf+0xe4a>
    8000904e:	6418                	ld	a4,8(s0)
    80009050:	47bd                	li	a5,15
    80009052:	00f71463          	bne	a4,a5,8000905a <tinst_tests_pf+0xe4a>
    80009056:	5b30106f          	j	8000ae08 <tinst_tests_pf+0x2bf8>
    8000905a:	0001f517          	auipc	a0,0x1f
    8000905e:	d1e50513          	addi	a0,a0,-738 # 80027d78 <__func__.0+0x318>
    80009062:	4951c0ef          	jal	80025cf6 <printf>
    80009066:	02900513          	li	a0,41
    8000906a:	2971b0ef          	jal	80024b00 <putchar>
    8000906e:	4529                	li	a0,10
    80009070:	2911b0ef          	jal	80024b00 <putchar>
    80009074:	00090e63          	beqz	s2,80009090 <tinst_tests_pf+0xe80>
    80009078:	00040797          	auipc	a5,0x40
    8000907c:	f997c783          	lbu	a5,-103(a5) # 80049011 <excpt+0x1>
    80009080:	c799                	beqz	a5,8000908e <tinst_tests_pf+0xe7e>
    80009082:	6418                	ld	a4,8(s0)
    80009084:	47bd                	li	a5,15
    80009086:	00f71463          	bne	a4,a5,8000908e <tinst_tests_pf+0xe7e>
    8000908a:	36c0206f          	j	8000b3f6 <tinst_tests_pf+0x31e6>
    8000908e:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80009090:	0330000f          	fence	rw,rw
    80009094:	4785                	li	a5,1
    80009096:	00040717          	auipc	a4,0x40
    8000909a:	fa073923          	sd	zero,-78(a4) # 80049048 <excpt+0x38>
    8000909e:	00f41023          	sh	a5,0(s0)
    800090a2:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoor_w, "amoor.w", uint32_t);
    800090a6:	400197b7          	lui	a5,0x40019
    800090aa:	078a                	slli	a5,a5,0x2
    800090ac:	4097a4af          	amoor.w	s1,s1,(a5)
    value = amoor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    800090b0:	00021617          	auipc	a2,0x21
    800090b4:	b2860613          	addi	a2,a2,-1240 # 80029bd8 <__func__.0+0x2178>
    800090b8:	08200593          	li	a1,130
    800090bc:	0001f517          	auipc	a0,0x1f
    800090c0:	c9c50513          	addi	a0,a0,-868 # 80027d58 <__func__.0+0x2f8>
    800090c4:	4331c0ef          	jal	80025cf6 <printf>
    800090c8:	00040797          	auipc	a5,0x40
    800090cc:	f497c783          	lbu	a5,-183(a5) # 80049011 <excpt+0x1>
    800090d0:	e399                	bnez	a5,800090d6 <tinst_tests_pf+0xec6>
    800090d2:	5d40106f          	j	8000a6a6 <tinst_tests_pf+0x2496>
    800090d6:	6418                	ld	a4,8(s0)
    800090d8:	47bd                	li	a5,15
    800090da:	0001f597          	auipc	a1,0x1f
    800090de:	c5658593          	addi	a1,a1,-938 # 80027d30 <__func__.0+0x2d0>
    800090e2:	00f71463          	bne	a4,a5,800090ea <tinst_tests_pf+0xeda>
    800090e6:	5720106f          	j	8000a658 <tinst_tests_pf+0x2448>
    800090ea:	0001f517          	auipc	a0,0x1f
    800090ee:	c8650513          	addi	a0,a0,-890 # 80027d70 <__func__.0+0x310>
    800090f2:	4051c0ef          	jal	80025cf6 <printf>
    800090f6:	00040797          	auipc	a5,0x40
    800090fa:	f1b7c783          	lbu	a5,-229(a5) # 80049011 <excpt+0x1>
    800090fe:	c799                	beqz	a5,8000910c <tinst_tests_pf+0xefc>
    80009100:	6418                	ld	a4,8(s0)
    80009102:	47bd                	li	a5,15
    80009104:	00f71463          	bne	a4,a5,8000910c <tinst_tests_pf+0xefc>
    80009108:	5430106f          	j	8000ae4a <tinst_tests_pf+0x2c3a>
    8000910c:	0001f517          	auipc	a0,0x1f
    80009110:	c6c50513          	addi	a0,a0,-916 # 80027d78 <__func__.0+0x318>
    80009114:	3e31c0ef          	jal	80025cf6 <printf>
    80009118:	02900513          	li	a0,41
    8000911c:	1e51b0ef          	jal	80024b00 <putchar>
    80009120:	4529                	li	a0,10
    80009122:	1df1b0ef          	jal	80024b00 <putchar>
    80009126:	00090e63          	beqz	s2,80009142 <tinst_tests_pf+0xf32>
    8000912a:	00040797          	auipc	a5,0x40
    8000912e:	ee77c783          	lbu	a5,-281(a5) # 80049011 <excpt+0x1>
    80009132:	c799                	beqz	a5,80009140 <tinst_tests_pf+0xf30>
    80009134:	6418                	ld	a4,8(s0)
    80009136:	47bd                	li	a5,15
    80009138:	00f71463          	bne	a4,a5,80009140 <tinst_tests_pf+0xf30>
    8000913c:	32c0206f          	j	8000b468 <tinst_tests_pf+0x3258>
    80009140:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80009142:	0330000f          	fence	rw,rw
    80009146:	4785                	li	a5,1
    80009148:	00040717          	auipc	a4,0x40
    8000914c:	f0073023          	sd	zero,-256(a4) # 80049048 <excpt+0x38>
    80009150:	00f41023          	sh	a5,0(s0)
    80009154:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomin_w, "amomin.w", uint32_t);
    80009158:	400197b7          	lui	a5,0x40019
    8000915c:	078a                	slli	a5,a5,0x2
    8000915e:	8097a4af          	amomin.w	s1,s1,(a5)
    value = amomin_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    80009162:	00021617          	auipc	a2,0x21
    80009166:	ab660613          	addi	a2,a2,-1354 # 80029c18 <__func__.0+0x21b8>
    8000916a:	08200593          	li	a1,130
    8000916e:	0001f517          	auipc	a0,0x1f
    80009172:	bea50513          	addi	a0,a0,-1046 # 80027d58 <__func__.0+0x2f8>
    80009176:	3811c0ef          	jal	80025cf6 <printf>
    8000917a:	00040797          	auipc	a5,0x40
    8000917e:	e977c783          	lbu	a5,-361(a5) # 80049011 <excpt+0x1>
    80009182:	e399                	bnez	a5,80009188 <tinst_tests_pf+0xf78>
    80009184:	5b80106f          	j	8000a73c <tinst_tests_pf+0x252c>
    80009188:	6418                	ld	a4,8(s0)
    8000918a:	47bd                	li	a5,15
    8000918c:	0001f597          	auipc	a1,0x1f
    80009190:	ba458593          	addi	a1,a1,-1116 # 80027d30 <__func__.0+0x2d0>
    80009194:	00f71463          	bne	a4,a5,8000919c <tinst_tests_pf+0xf8c>
    80009198:	5560106f          	j	8000a6ee <tinst_tests_pf+0x24de>
    8000919c:	0001f517          	auipc	a0,0x1f
    800091a0:	bd450513          	addi	a0,a0,-1068 # 80027d70 <__func__.0+0x310>
    800091a4:	3531c0ef          	jal	80025cf6 <printf>
    800091a8:	00040797          	auipc	a5,0x40
    800091ac:	e697c783          	lbu	a5,-407(a5) # 80049011 <excpt+0x1>
    800091b0:	c799                	beqz	a5,800091be <tinst_tests_pf+0xfae>
    800091b2:	6418                	ld	a4,8(s0)
    800091b4:	47bd                	li	a5,15
    800091b6:	00f71463          	bne	a4,a5,800091be <tinst_tests_pf+0xfae>
    800091ba:	4d30106f          	j	8000ae8c <tinst_tests_pf+0x2c7c>
    800091be:	0001f517          	auipc	a0,0x1f
    800091c2:	bba50513          	addi	a0,a0,-1094 # 80027d78 <__func__.0+0x318>
    800091c6:	3311c0ef          	jal	80025cf6 <printf>
    800091ca:	02900513          	li	a0,41
    800091ce:	1331b0ef          	jal	80024b00 <putchar>
    800091d2:	4529                	li	a0,10
    800091d4:	12d1b0ef          	jal	80024b00 <putchar>
    800091d8:	00090e63          	beqz	s2,800091f4 <tinst_tests_pf+0xfe4>
    800091dc:	00040797          	auipc	a5,0x40
    800091e0:	e357c783          	lbu	a5,-459(a5) # 80049011 <excpt+0x1>
    800091e4:	c799                	beqz	a5,800091f2 <tinst_tests_pf+0xfe2>
    800091e6:	6418                	ld	a4,8(s0)
    800091e8:	47bd                	li	a5,15
    800091ea:	00f71463          	bne	a4,a5,800091f2 <tinst_tests_pf+0xfe2>
    800091ee:	2bc0206f          	j	8000b4aa <tinst_tests_pf+0x329a>
    800091f2:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800091f4:	0330000f          	fence	rw,rw
    800091f8:	4785                	li	a5,1
    800091fa:	00040717          	auipc	a4,0x40
    800091fe:	e4073723          	sd	zero,-434(a4) # 80049048 <excpt+0x38>
    80009202:	00f41023          	sh	a5,0(s0)
    80009206:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomax_w, "amomax.w", uint32_t);
    8000920a:	400197b7          	lui	a5,0x40019
    8000920e:	078a                	slli	a5,a5,0x2
    80009210:	a097a4af          	amomax.w	s1,s1,(a5)
    value = amomax_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    80009214:	00021617          	auipc	a2,0x21
    80009218:	a4460613          	addi	a2,a2,-1468 # 80029c58 <__func__.0+0x21f8>
    8000921c:	08200593          	li	a1,130
    80009220:	0001f517          	auipc	a0,0x1f
    80009224:	b3850513          	addi	a0,a0,-1224 # 80027d58 <__func__.0+0x2f8>
    80009228:	2cf1c0ef          	jal	80025cf6 <printf>
    8000922c:	00040797          	auipc	a5,0x40
    80009230:	de57c783          	lbu	a5,-539(a5) # 80049011 <excpt+0x1>
    80009234:	e399                	bnez	a5,8000923a <tinst_tests_pf+0x102a>
    80009236:	59c0106f          	j	8000a7d2 <tinst_tests_pf+0x25c2>
    8000923a:	6418                	ld	a4,8(s0)
    8000923c:	47bd                	li	a5,15
    8000923e:	0001f597          	auipc	a1,0x1f
    80009242:	af258593          	addi	a1,a1,-1294 # 80027d30 <__func__.0+0x2d0>
    80009246:	00f71463          	bne	a4,a5,8000924e <tinst_tests_pf+0x103e>
    8000924a:	53a0106f          	j	8000a784 <tinst_tests_pf+0x2574>
    8000924e:	0001f517          	auipc	a0,0x1f
    80009252:	b2250513          	addi	a0,a0,-1246 # 80027d70 <__func__.0+0x310>
    80009256:	2a11c0ef          	jal	80025cf6 <printf>
    8000925a:	00040797          	auipc	a5,0x40
    8000925e:	db77c783          	lbu	a5,-585(a5) # 80049011 <excpt+0x1>
    80009262:	c799                	beqz	a5,80009270 <tinst_tests_pf+0x1060>
    80009264:	6418                	ld	a4,8(s0)
    80009266:	47bd                	li	a5,15
    80009268:	00f71463          	bne	a4,a5,80009270 <tinst_tests_pf+0x1060>
    8000926c:	4630106f          	j	8000aece <tinst_tests_pf+0x2cbe>
    80009270:	0001f517          	auipc	a0,0x1f
    80009274:	b0850513          	addi	a0,a0,-1272 # 80027d78 <__func__.0+0x318>
    80009278:	27f1c0ef          	jal	80025cf6 <printf>
    8000927c:	02900513          	li	a0,41
    80009280:	0811b0ef          	jal	80024b00 <putchar>
    80009284:	4529                	li	a0,10
    80009286:	07b1b0ef          	jal	80024b00 <putchar>
    8000928a:	00090e63          	beqz	s2,800092a6 <tinst_tests_pf+0x1096>
    8000928e:	00040797          	auipc	a5,0x40
    80009292:	d837c783          	lbu	a5,-637(a5) # 80049011 <excpt+0x1>
    80009296:	c799                	beqz	a5,800092a4 <tinst_tests_pf+0x1094>
    80009298:	6418                	ld	a4,8(s0)
    8000929a:	47bd                	li	a5,15
    8000929c:	00f71463          	bne	a4,a5,800092a4 <tinst_tests_pf+0x1094>
    800092a0:	24c0206f          	j	8000b4ec <tinst_tests_pf+0x32dc>
    800092a4:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800092a6:	0330000f          	fence	rw,rw
    800092aa:	4785                	li	a5,1
    800092ac:	00040717          	auipc	a4,0x40
    800092b0:	d8073e23          	sd	zero,-612(a4) # 80049048 <excpt+0x38>
    800092b4:	00f41023          	sh	a5,0(s0)
    800092b8:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amominu_w, "amominu.w", uint32_t);
    800092bc:	400197b7          	lui	a5,0x40019
    800092c0:	078a                	slli	a5,a5,0x2
    800092c2:	c097a4af          	amominu.w	s1,s1,(a5)
    value = amominu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    800092c6:	00021617          	auipc	a2,0x21
    800092ca:	9d260613          	addi	a2,a2,-1582 # 80029c98 <__func__.0+0x2238>
    800092ce:	08200593          	li	a1,130
    800092d2:	0001f517          	auipc	a0,0x1f
    800092d6:	a8650513          	addi	a0,a0,-1402 # 80027d58 <__func__.0+0x2f8>
    800092da:	21d1c0ef          	jal	80025cf6 <printf>
    800092de:	00040797          	auipc	a5,0x40
    800092e2:	d337c783          	lbu	a5,-717(a5) # 80049011 <excpt+0x1>
    800092e6:	e399                	bnez	a5,800092ec <tinst_tests_pf+0x10dc>
    800092e8:	5860106f          	j	8000a86e <tinst_tests_pf+0x265e>
    800092ec:	6418                	ld	a4,8(s0)
    800092ee:	47bd                	li	a5,15
    800092f0:	0001f597          	auipc	a1,0x1f
    800092f4:	a4058593          	addi	a1,a1,-1472 # 80027d30 <__func__.0+0x2d0>
    800092f8:	00f71463          	bne	a4,a5,80009300 <tinst_tests_pf+0x10f0>
    800092fc:	5240106f          	j	8000a820 <tinst_tests_pf+0x2610>
    80009300:	0001f517          	auipc	a0,0x1f
    80009304:	a7050513          	addi	a0,a0,-1424 # 80027d70 <__func__.0+0x310>
    80009308:	1ef1c0ef          	jal	80025cf6 <printf>
    8000930c:	00040797          	auipc	a5,0x40
    80009310:	d057c783          	lbu	a5,-763(a5) # 80049011 <excpt+0x1>
    80009314:	c799                	beqz	a5,80009322 <tinst_tests_pf+0x1112>
    80009316:	6418                	ld	a4,8(s0)
    80009318:	47bd                	li	a5,15
    8000931a:	00f71463          	bne	a4,a5,80009322 <tinst_tests_pf+0x1112>
    8000931e:	3f30106f          	j	8000af10 <tinst_tests_pf+0x2d00>
    80009322:	0001f517          	auipc	a0,0x1f
    80009326:	a5650513          	addi	a0,a0,-1450 # 80027d78 <__func__.0+0x318>
    8000932a:	1cd1c0ef          	jal	80025cf6 <printf>
    8000932e:	02900513          	li	a0,41
    80009332:	7ce1b0ef          	jal	80024b00 <putchar>
    80009336:	4529                	li	a0,10
    80009338:	7c81b0ef          	jal	80024b00 <putchar>
    8000933c:	00090e63          	beqz	s2,80009358 <tinst_tests_pf+0x1148>
    80009340:	00040797          	auipc	a5,0x40
    80009344:	cd17c783          	lbu	a5,-815(a5) # 80049011 <excpt+0x1>
    80009348:	c799                	beqz	a5,80009356 <tinst_tests_pf+0x1146>
    8000934a:	6418                	ld	a4,8(s0)
    8000934c:	47bd                	li	a5,15
    8000934e:	00f71463          	bne	a4,a5,80009356 <tinst_tests_pf+0x1146>
    80009352:	1de0206f          	j	8000b530 <tinst_tests_pf+0x3320>
    80009356:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80009358:	0330000f          	fence	rw,rw
    8000935c:	4785                	li	a5,1
    8000935e:	00040717          	auipc	a4,0x40
    80009362:	ce073523          	sd	zero,-790(a4) # 80049048 <excpt+0x38>
    80009366:	00f41023          	sh	a5,0(s0)
    8000936a:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomaxu_w, "amomaxu.w", uint32_t);
    8000936e:	400197b7          	lui	a5,0x40019
    80009372:	078a                	slli	a5,a5,0x2
    80009374:	e097a4af          	amomaxu.w	s1,s1,(a5)
    value = amomaxu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    80009378:	00021617          	auipc	a2,0x21
    8000937c:	96060613          	addi	a2,a2,-1696 # 80029cd8 <__func__.0+0x2278>
    80009380:	08200593          	li	a1,130
    80009384:	0001f517          	auipc	a0,0x1f
    80009388:	9d450513          	addi	a0,a0,-1580 # 80027d58 <__func__.0+0x2f8>
    8000938c:	16b1c0ef          	jal	80025cf6 <printf>
    80009390:	00040797          	auipc	a5,0x40
    80009394:	c817c783          	lbu	a5,-895(a5) # 80049011 <excpt+0x1>
    value = amomaxu_w(vaddr_f,value);
    80009398:	1482                	slli	s1,s1,0x20
    8000939a:	9081                	srli	s1,s1,0x20
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000939c:	e399                	bnez	a5,800093a2 <tinst_tests_pf+0x1192>
    8000939e:	56c0106f          	j	8000a90a <tinst_tests_pf+0x26fa>
    800093a2:	6418                	ld	a4,8(s0)
    800093a4:	47bd                	li	a5,15
    800093a6:	0001f597          	auipc	a1,0x1f
    800093aa:	98a58593          	addi	a1,a1,-1654 # 80027d30 <__func__.0+0x2d0>
    800093ae:	00f71463          	bne	a4,a5,800093b6 <tinst_tests_pf+0x11a6>
    800093b2:	50a0106f          	j	8000a8bc <tinst_tests_pf+0x26ac>
    800093b6:	0001f517          	auipc	a0,0x1f
    800093ba:	9ba50513          	addi	a0,a0,-1606 # 80027d70 <__func__.0+0x310>
    800093be:	1391c0ef          	jal	80025cf6 <printf>
    800093c2:	00040797          	auipc	a5,0x40
    800093c6:	c4f7c783          	lbu	a5,-945(a5) # 80049011 <excpt+0x1>
    800093ca:	c799                	beqz	a5,800093d8 <tinst_tests_pf+0x11c8>
    800093cc:	6418                	ld	a4,8(s0)
    800093ce:	47bd                	li	a5,15
    800093d0:	00f71463          	bne	a4,a5,800093d8 <tinst_tests_pf+0x11c8>
    800093d4:	37f0106f          	j	8000af52 <tinst_tests_pf+0x2d42>
    800093d8:	0001f517          	auipc	a0,0x1f
    800093dc:	9a050513          	addi	a0,a0,-1632 # 80027d78 <__func__.0+0x318>
    800093e0:	1171c0ef          	jal	80025cf6 <printf>
    800093e4:	02900513          	li	a0,41
    800093e8:	7181b0ef          	jal	80024b00 <putchar>
    800093ec:	4529                	li	a0,10
    800093ee:	7121b0ef          	jal	80024b00 <putchar>
    800093f2:	00090e63          	beqz	s2,8000940e <tinst_tests_pf+0x11fe>
    800093f6:	00040797          	auipc	a5,0x40
    800093fa:	c1b7c783          	lbu	a5,-997(a5) # 80049011 <excpt+0x1>
    800093fe:	c799                	beqz	a5,8000940c <tinst_tests_pf+0x11fc>
    80009400:	6418                	ld	a4,8(s0)
    80009402:	47bd                	li	a5,15
    80009404:	00f71463          	bne	a4,a5,8000940c <tinst_tests_pf+0x11fc>
    80009408:	16c0206f          	j	8000b574 <tinst_tests_pf+0x3364>
    8000940c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000940e:	0330000f          	fence	rw,rw
    80009412:	4785                	li	a5,1
    80009414:	00040717          	auipc	a4,0x40
    80009418:	c2073a23          	sd	zero,-972(a4) # 80049048 <excpt+0x38>
    8000941c:	00f41023          	sh	a5,0(s0)
    80009420:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoswap_d, "amoswap.d", uint64_t);
    80009424:	400197b7          	lui	a5,0x40019
    80009428:	078a                	slli	a5,a5,0x2
    8000942a:	0897b4af          	amoswap.d	s1,s1,(a5)
    value = amoswap_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000942e:	00021617          	auipc	a2,0x21
    80009432:	8ea60613          	addi	a2,a2,-1814 # 80029d18 <__func__.0+0x22b8>
    80009436:	08200593          	li	a1,130
    8000943a:	0001f517          	auipc	a0,0x1f
    8000943e:	91e50513          	addi	a0,a0,-1762 # 80027d58 <__func__.0+0x2f8>
    80009442:	0b51c0ef          	jal	80025cf6 <printf>
    80009446:	00040797          	auipc	a5,0x40
    8000944a:	bcb7c783          	lbu	a5,-1077(a5) # 80049011 <excpt+0x1>
    8000944e:	e399                	bnez	a5,80009454 <tinst_tests_pf+0x1244>
    80009450:	5560106f          	j	8000a9a6 <tinst_tests_pf+0x2796>
    80009454:	6418                	ld	a4,8(s0)
    80009456:	47bd                	li	a5,15
    80009458:	0001f597          	auipc	a1,0x1f
    8000945c:	8d858593          	addi	a1,a1,-1832 # 80027d30 <__func__.0+0x2d0>
    80009460:	00f71463          	bne	a4,a5,80009468 <tinst_tests_pf+0x1258>
    80009464:	4f40106f          	j	8000a958 <tinst_tests_pf+0x2748>
    80009468:	0001f517          	auipc	a0,0x1f
    8000946c:	90850513          	addi	a0,a0,-1784 # 80027d70 <__func__.0+0x310>
    80009470:	0871c0ef          	jal	80025cf6 <printf>
    80009474:	00040797          	auipc	a5,0x40
    80009478:	b9d7c783          	lbu	a5,-1123(a5) # 80049011 <excpt+0x1>
    8000947c:	c799                	beqz	a5,8000948a <tinst_tests_pf+0x127a>
    8000947e:	6418                	ld	a4,8(s0)
    80009480:	47bd                	li	a5,15
    80009482:	00f71463          	bne	a4,a5,8000948a <tinst_tests_pf+0x127a>
    80009486:	30f0106f          	j	8000af94 <tinst_tests_pf+0x2d84>
    8000948a:	0001f517          	auipc	a0,0x1f
    8000948e:	8ee50513          	addi	a0,a0,-1810 # 80027d78 <__func__.0+0x318>
    80009492:	0651c0ef          	jal	80025cf6 <printf>
    80009496:	02900513          	li	a0,41
    8000949a:	6661b0ef          	jal	80024b00 <putchar>
    8000949e:	4529                	li	a0,10
    800094a0:	6601b0ef          	jal	80024b00 <putchar>
    800094a4:	00090e63          	beqz	s2,800094c0 <tinst_tests_pf+0x12b0>
    800094a8:	00040797          	auipc	a5,0x40
    800094ac:	b697c783          	lbu	a5,-1175(a5) # 80049011 <excpt+0x1>
    800094b0:	c799                	beqz	a5,800094be <tinst_tests_pf+0x12ae>
    800094b2:	6418                	ld	a4,8(s0)
    800094b4:	47bd                	li	a5,15
    800094b6:	00f71463          	bne	a4,a5,800094be <tinst_tests_pf+0x12ae>
    800094ba:	0fe0206f          	j	8000b5b8 <tinst_tests_pf+0x33a8>
    800094be:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800094c0:	0330000f          	fence	rw,rw
    800094c4:	4785                	li	a5,1
    800094c6:	00040717          	auipc	a4,0x40
    800094ca:	b8073123          	sd	zero,-1150(a4) # 80049048 <excpt+0x38>
    800094ce:	00f41023          	sh	a5,0(s0)
    800094d2:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoadd_d, "amoadd.d", uint64_t);
    800094d6:	400197b7          	lui	a5,0x40019
    800094da:	078a                	slli	a5,a5,0x2
    800094dc:	0097b4af          	amoadd.d	s1,s1,(a5)
    value = amoadd_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    800094e0:	00021617          	auipc	a2,0x21
    800094e4:	87860613          	addi	a2,a2,-1928 # 80029d58 <__func__.0+0x22f8>
    800094e8:	08200593          	li	a1,130
    800094ec:	0001f517          	auipc	a0,0x1f
    800094f0:	86c50513          	addi	a0,a0,-1940 # 80027d58 <__func__.0+0x2f8>
    800094f4:	0031c0ef          	jal	80025cf6 <printf>
    800094f8:	00040797          	auipc	a5,0x40
    800094fc:	b197c783          	lbu	a5,-1255(a5) # 80049011 <excpt+0x1>
    80009500:	e399                	bnez	a5,80009506 <tinst_tests_pf+0x12f6>
    80009502:	5400106f          	j	8000aa42 <tinst_tests_pf+0x2832>
    80009506:	6418                	ld	a4,8(s0)
    80009508:	47bd                	li	a5,15
    8000950a:	0001f597          	auipc	a1,0x1f
    8000950e:	82658593          	addi	a1,a1,-2010 # 80027d30 <__func__.0+0x2d0>
    80009512:	00f71463          	bne	a4,a5,8000951a <tinst_tests_pf+0x130a>
    80009516:	4de0106f          	j	8000a9f4 <tinst_tests_pf+0x27e4>
    8000951a:	0001f517          	auipc	a0,0x1f
    8000951e:	85650513          	addi	a0,a0,-1962 # 80027d70 <__func__.0+0x310>
    80009522:	7d41c0ef          	jal	80025cf6 <printf>
    80009526:	00040797          	auipc	a5,0x40
    8000952a:	aeb7c783          	lbu	a5,-1301(a5) # 80049011 <excpt+0x1>
    8000952e:	c799                	beqz	a5,8000953c <tinst_tests_pf+0x132c>
    80009530:	6418                	ld	a4,8(s0)
    80009532:	47bd                	li	a5,15
    80009534:	00f71463          	bne	a4,a5,8000953c <tinst_tests_pf+0x132c>
    80009538:	29f0106f          	j	8000afd6 <tinst_tests_pf+0x2dc6>
    8000953c:	0001f517          	auipc	a0,0x1f
    80009540:	83c50513          	addi	a0,a0,-1988 # 80027d78 <__func__.0+0x318>
    80009544:	7b21c0ef          	jal	80025cf6 <printf>
    80009548:	02900513          	li	a0,41
    8000954c:	5b41b0ef          	jal	80024b00 <putchar>
    80009550:	4529                	li	a0,10
    80009552:	5ae1b0ef          	jal	80024b00 <putchar>
    80009556:	00090e63          	beqz	s2,80009572 <tinst_tests_pf+0x1362>
    8000955a:	00040797          	auipc	a5,0x40
    8000955e:	ab77c783          	lbu	a5,-1353(a5) # 80049011 <excpt+0x1>
    80009562:	c799                	beqz	a5,80009570 <tinst_tests_pf+0x1360>
    80009564:	6418                	ld	a4,8(s0)
    80009566:	47bd                	li	a5,15
    80009568:	00f71463          	bne	a4,a5,80009570 <tinst_tests_pf+0x1360>
    8000956c:	0900206f          	j	8000b5fc <tinst_tests_pf+0x33ec>
    80009570:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80009572:	0330000f          	fence	rw,rw
    80009576:	4785                	li	a5,1
    80009578:	00040717          	auipc	a4,0x40
    8000957c:	ac073823          	sd	zero,-1328(a4) # 80049048 <excpt+0x38>
    80009580:	00f41023          	sh	a5,0(s0)
    80009584:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoxor_d, "amoxor.d", uint64_t);
    80009588:	400197b7          	lui	a5,0x40019
    8000958c:	078a                	slli	a5,a5,0x2
    8000958e:	2097b4af          	amoxor.d	s1,s1,(a5)
    value = amoxor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    80009592:	00021617          	auipc	a2,0x21
    80009596:	80660613          	addi	a2,a2,-2042 # 80029d98 <__func__.0+0x2338>
    8000959a:	08200593          	li	a1,130
    8000959e:	0001e517          	auipc	a0,0x1e
    800095a2:	7ba50513          	addi	a0,a0,1978 # 80027d58 <__func__.0+0x2f8>
    800095a6:	7501c0ef          	jal	80025cf6 <printf>
    800095aa:	00040797          	auipc	a5,0x40
    800095ae:	a677c783          	lbu	a5,-1433(a5) # 80049011 <excpt+0x1>
    800095b2:	e399                	bnez	a5,800095b8 <tinst_tests_pf+0x13a8>
    800095b4:	5140106f          	j	8000aac8 <tinst_tests_pf+0x28b8>
    800095b8:	6418                	ld	a4,8(s0)
    800095ba:	47bd                	li	a5,15
    800095bc:	0001e597          	auipc	a1,0x1e
    800095c0:	77458593          	addi	a1,a1,1908 # 80027d30 <__func__.0+0x2d0>
    800095c4:	00f71463          	bne	a4,a5,800095cc <tinst_tests_pf+0x13bc>
    800095c8:	4b20106f          	j	8000aa7a <tinst_tests_pf+0x286a>
    800095cc:	0001e517          	auipc	a0,0x1e
    800095d0:	7a450513          	addi	a0,a0,1956 # 80027d70 <__func__.0+0x310>
    800095d4:	7221c0ef          	jal	80025cf6 <printf>
    800095d8:	00040797          	auipc	a5,0x40
    800095dc:	a397c783          	lbu	a5,-1479(a5) # 80049011 <excpt+0x1>
    800095e0:	c799                	beqz	a5,800095ee <tinst_tests_pf+0x13de>
    800095e2:	6418                	ld	a4,8(s0)
    800095e4:	47bd                	li	a5,15
    800095e6:	00f71463          	bne	a4,a5,800095ee <tinst_tests_pf+0x13de>
    800095ea:	22f0106f          	j	8000b018 <tinst_tests_pf+0x2e08>
    800095ee:	0001e517          	auipc	a0,0x1e
    800095f2:	78a50513          	addi	a0,a0,1930 # 80027d78 <__func__.0+0x318>
    800095f6:	7001c0ef          	jal	80025cf6 <printf>
    800095fa:	02900513          	li	a0,41
    800095fe:	5021b0ef          	jal	80024b00 <putchar>
    80009602:	4529                	li	a0,10
    80009604:	4fc1b0ef          	jal	80024b00 <putchar>
    80009608:	00090e63          	beqz	s2,80009624 <tinst_tests_pf+0x1414>
    8000960c:	00040797          	auipc	a5,0x40
    80009610:	a057c783          	lbu	a5,-1531(a5) # 80049011 <excpt+0x1>
    80009614:	c799                	beqz	a5,80009622 <tinst_tests_pf+0x1412>
    80009616:	6418                	ld	a4,8(s0)
    80009618:	47bd                	li	a5,15
    8000961a:	00f71463          	bne	a4,a5,80009622 <tinst_tests_pf+0x1412>
    8000961e:	0220206f          	j	8000b640 <tinst_tests_pf+0x3430>
    80009622:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80009624:	0330000f          	fence	rw,rw
    80009628:	4785                	li	a5,1
    8000962a:	00040717          	auipc	a4,0x40
    8000962e:	a0073f23          	sd	zero,-1506(a4) # 80049048 <excpt+0x38>
    80009632:	00f41023          	sh	a5,0(s0)
    80009636:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    8000963a:	400197b7          	lui	a5,0x40019
    8000963e:	078a                	slli	a5,a5,0x2
    80009640:	6097b4af          	amoand.d	s1,s1,(a5)
    value = amoand_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    80009644:	00020617          	auipc	a2,0x20
    80009648:	79460613          	addi	a2,a2,1940 # 80029dd8 <__func__.0+0x2378>
    8000964c:	08200593          	li	a1,130
    80009650:	0001e517          	auipc	a0,0x1e
    80009654:	70850513          	addi	a0,a0,1800 # 80027d58 <__func__.0+0x2f8>
    80009658:	69e1c0ef          	jal	80025cf6 <printf>
    8000965c:	00040797          	auipc	a5,0x40
    80009660:	9b57c783          	lbu	a5,-1611(a5) # 80049011 <excpt+0x1>
    80009664:	e399                	bnez	a5,8000966a <tinst_tests_pf+0x145a>
    80009666:	4ec0106f          	j	8000ab52 <tinst_tests_pf+0x2942>
    8000966a:	6418                	ld	a4,8(s0)
    8000966c:	47bd                	li	a5,15
    8000966e:	0001e597          	auipc	a1,0x1e
    80009672:	6c258593          	addi	a1,a1,1730 # 80027d30 <__func__.0+0x2d0>
    80009676:	00f71463          	bne	a4,a5,8000967e <tinst_tests_pf+0x146e>
    8000967a:	48a0106f          	j	8000ab04 <tinst_tests_pf+0x28f4>
    8000967e:	0001e517          	auipc	a0,0x1e
    80009682:	6f250513          	addi	a0,a0,1778 # 80027d70 <__func__.0+0x310>
    80009686:	6701c0ef          	jal	80025cf6 <printf>
    8000968a:	00040797          	auipc	a5,0x40
    8000968e:	9877c783          	lbu	a5,-1657(a5) # 80049011 <excpt+0x1>
    80009692:	c799                	beqz	a5,800096a0 <tinst_tests_pf+0x1490>
    80009694:	6418                	ld	a4,8(s0)
    80009696:	47bd                	li	a5,15
    80009698:	00f71463          	bne	a4,a5,800096a0 <tinst_tests_pf+0x1490>
    8000969c:	02c0206f          	j	8000b6c8 <tinst_tests_pf+0x34b8>
    800096a0:	0001e517          	auipc	a0,0x1e
    800096a4:	6d850513          	addi	a0,a0,1752 # 80027d78 <__func__.0+0x318>
    800096a8:	64e1c0ef          	jal	80025cf6 <printf>
    800096ac:	02900513          	li	a0,41
    800096b0:	4501b0ef          	jal	80024b00 <putchar>
    800096b4:	4529                	li	a0,10
    800096b6:	44a1b0ef          	jal	80024b00 <putchar>
    800096ba:	00090e63          	beqz	s2,800096d6 <tinst_tests_pf+0x14c6>
    800096be:	00040797          	auipc	a5,0x40
    800096c2:	9537c783          	lbu	a5,-1709(a5) # 80049011 <excpt+0x1>
    800096c6:	c799                	beqz	a5,800096d4 <tinst_tests_pf+0x14c4>
    800096c8:	6418                	ld	a4,8(s0)
    800096ca:	47bd                	li	a5,15
    800096cc:	00f71463          	bne	a4,a5,800096d4 <tinst_tests_pf+0x14c4>
    800096d0:	7b50106f          	j	8000b684 <tinst_tests_pf+0x3474>
    800096d4:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800096d6:	0330000f          	fence	rw,rw
    800096da:	4785                	li	a5,1
    800096dc:	00040717          	auipc	a4,0x40
    800096e0:	96073623          	sd	zero,-1684(a4) # 80049048 <excpt+0x38>
    800096e4:	00f41023          	sh	a5,0(s0)
    800096e8:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    800096ec:	400197b7          	lui	a5,0x40019
    800096f0:	078a                	slli	a5,a5,0x2
    800096f2:	4097b4af          	amoor.d	s1,s1,(a5)
    value = amoor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    800096f6:	00020617          	auipc	a2,0x20
    800096fa:	72260613          	addi	a2,a2,1826 # 80029e18 <__func__.0+0x23b8>
    800096fe:	08200593          	li	a1,130
    80009702:	0001e517          	auipc	a0,0x1e
    80009706:	65650513          	addi	a0,a0,1622 # 80027d58 <__func__.0+0x2f8>
    8000970a:	5ec1c0ef          	jal	80025cf6 <printf>
    8000970e:	00040797          	auipc	a5,0x40
    80009712:	9037c783          	lbu	a5,-1789(a5) # 80049011 <excpt+0x1>
    80009716:	e399                	bnez	a5,8000971c <tinst_tests_pf+0x150c>
    80009718:	4c80106f          	j	8000abe0 <tinst_tests_pf+0x29d0>
    8000971c:	6418                	ld	a4,8(s0)
    8000971e:	47bd                	li	a5,15
    80009720:	0001e597          	auipc	a1,0x1e
    80009724:	61058593          	addi	a1,a1,1552 # 80027d30 <__func__.0+0x2d0>
    80009728:	00f71463          	bne	a4,a5,80009730 <tinst_tests_pf+0x1520>
    8000972c:	4660106f          	j	8000ab92 <tinst_tests_pf+0x2982>
    80009730:	0001e517          	auipc	a0,0x1e
    80009734:	64050513          	addi	a0,a0,1600 # 80027d70 <__func__.0+0x310>
    80009738:	5be1c0ef          	jal	80025cf6 <printf>
    8000973c:	00040797          	auipc	a5,0x40
    80009740:	8d57c783          	lbu	a5,-1835(a5) # 80049011 <excpt+0x1>
    80009744:	c799                	beqz	a5,80009752 <tinst_tests_pf+0x1542>
    80009746:	6418                	ld	a4,8(s0)
    80009748:	47bd                	li	a5,15
    8000974a:	00f71463          	bne	a4,a5,80009752 <tinst_tests_pf+0x1542>
    8000974e:	7bf0106f          	j	8000b70c <tinst_tests_pf+0x34fc>
    80009752:	0001e517          	auipc	a0,0x1e
    80009756:	62650513          	addi	a0,a0,1574 # 80027d78 <__func__.0+0x318>
    8000975a:	59c1c0ef          	jal	80025cf6 <printf>
    8000975e:	02900513          	li	a0,41
    80009762:	39e1b0ef          	jal	80024b00 <putchar>
    80009766:	4529                	li	a0,10
    80009768:	3981b0ef          	jal	80024b00 <putchar>
    8000976c:	00090a63          	beqz	s2,80009780 <tinst_tests_pf+0x1570>
    80009770:	00040797          	auipc	a5,0x40
    80009774:	8a17c783          	lbu	a5,-1887(a5) # 80049011 <excpt+0x1>
    80009778:	c399                	beqz	a5,8000977e <tinst_tests_pf+0x156e>
    8000977a:	0e10106f          	j	8000b05a <tinst_tests_pf+0x2e4a>
    8000977e:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80009780:	0330000f          	fence	rw,rw
    80009784:	4785                	li	a5,1
    80009786:	00040717          	auipc	a4,0x40
    8000978a:	8c073123          	sd	zero,-1854(a4) # 80049048 <excpt+0x38>
    8000978e:	00f41023          	sh	a5,0(s0)
    80009792:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    80009796:	400197b7          	lui	a5,0x40019
    8000979a:	078a                	slli	a5,a5,0x2
    8000979c:	8097b4af          	amomin.d	s1,s1,(a5)
    value = amomin_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    800097a0:	00020617          	auipc	a2,0x20
    800097a4:	6b860613          	addi	a2,a2,1720 # 80029e58 <__func__.0+0x23f8>
    800097a8:	08200593          	li	a1,130
    800097ac:	0001e517          	auipc	a0,0x1e
    800097b0:	5ac50513          	addi	a0,a0,1452 # 80027d58 <__func__.0+0x2f8>
    800097b4:	5421c0ef          	jal	80025cf6 <printf>
    800097b8:	00040797          	auipc	a5,0x40
    800097bc:	8597c783          	lbu	a5,-1959(a5) # 80049011 <excpt+0x1>
    800097c0:	e399                	bnez	a5,800097c6 <tinst_tests_pf+0x15b6>
    800097c2:	4a80106f          	j	8000ac6a <tinst_tests_pf+0x2a5a>
    800097c6:	6418                	ld	a4,8(s0)
    800097c8:	47bd                	li	a5,15
    800097ca:	0001e597          	auipc	a1,0x1e
    800097ce:	56658593          	addi	a1,a1,1382 # 80027d30 <__func__.0+0x2d0>
    800097d2:	00f71463          	bne	a4,a5,800097da <tinst_tests_pf+0x15ca>
    800097d6:	4460106f          	j	8000ac1c <tinst_tests_pf+0x2a0c>
    800097da:	0001e517          	auipc	a0,0x1e
    800097de:	59650513          	addi	a0,a0,1430 # 80027d70 <__func__.0+0x310>
    800097e2:	5141c0ef          	jal	80025cf6 <printf>
    800097e6:	00040797          	auipc	a5,0x40
    800097ea:	82b7c783          	lbu	a5,-2005(a5) # 80049011 <excpt+0x1>
    800097ee:	c799                	beqz	a5,800097fc <tinst_tests_pf+0x15ec>
    800097f0:	6418                	ld	a4,8(s0)
    800097f2:	47bd                	li	a5,15
    800097f4:	00f71463          	bne	a4,a5,800097fc <tinst_tests_pf+0x15ec>
    800097f8:	7590106f          	j	8000b750 <tinst_tests_pf+0x3540>
    800097fc:	0001e517          	auipc	a0,0x1e
    80009800:	57c50513          	addi	a0,a0,1404 # 80027d78 <__func__.0+0x318>
    80009804:	4f21c0ef          	jal	80025cf6 <printf>
    80009808:	02900513          	li	a0,41
    8000980c:	2f41b0ef          	jal	80024b00 <putchar>
    80009810:	4529                	li	a0,10
    80009812:	2ee1b0ef          	jal	80024b00 <putchar>
    80009816:	00090a63          	beqz	s2,8000982a <tinst_tests_pf+0x161a>
    8000981a:	0003f797          	auipc	a5,0x3f
    8000981e:	7f77c783          	lbu	a5,2039(a5) # 80049011 <excpt+0x1>
    80009822:	c399                	beqz	a5,80009828 <tinst_tests_pf+0x1618>
    80009824:	0850106f          	j	8000b0a8 <tinst_tests_pf+0x2e98>
    80009828:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000982a:	0330000f          	fence	rw,rw
    8000982e:	4785                	li	a5,1
    80009830:	00040717          	auipc	a4,0x40
    80009834:	80073c23          	sd	zero,-2024(a4) # 80049048 <excpt+0x38>
    80009838:	00f41023          	sh	a5,0(s0)
    8000983c:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    80009840:	400197b7          	lui	a5,0x40019
    80009844:	078a                	slli	a5,a5,0x2
    80009846:	a097b4af          	amomax.d	s1,s1,(a5)
    value = amomax_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000984a:	00020617          	auipc	a2,0x20
    8000984e:	64e60613          	addi	a2,a2,1614 # 80029e98 <__func__.0+0x2438>
    80009852:	08200593          	li	a1,130
    80009856:	0001e517          	auipc	a0,0x1e
    8000985a:	50250513          	addi	a0,a0,1282 # 80027d58 <__func__.0+0x2f8>
    8000985e:	4981c0ef          	jal	80025cf6 <printf>
    80009862:	0003f797          	auipc	a5,0x3f
    80009866:	7af7c783          	lbu	a5,1967(a5) # 80049011 <excpt+0x1>
    8000986a:	e399                	bnez	a5,80009870 <tinst_tests_pf+0x1660>
    8000986c:	4580106f          	j	8000acc4 <tinst_tests_pf+0x2ab4>
    80009870:	6418                	ld	a4,8(s0)
    80009872:	47bd                	li	a5,15
    80009874:	0001e597          	auipc	a1,0x1e
    80009878:	4bc58593          	addi	a1,a1,1212 # 80027d30 <__func__.0+0x2d0>
    8000987c:	00f71463          	bne	a4,a5,80009884 <tinst_tests_pf+0x1674>
    80009880:	3f60106f          	j	8000ac76 <tinst_tests_pf+0x2a66>
    80009884:	0001e517          	auipc	a0,0x1e
    80009888:	4ec50513          	addi	a0,a0,1260 # 80027d70 <__func__.0+0x310>
    8000988c:	46a1c0ef          	jal	80025cf6 <printf>
    80009890:	0003f797          	auipc	a5,0x3f
    80009894:	7817c783          	lbu	a5,1921(a5) # 80049011 <excpt+0x1>
    80009898:	c799                	beqz	a5,800098a6 <tinst_tests_pf+0x1696>
    8000989a:	6418                	ld	a4,8(s0)
    8000989c:	47bd                	li	a5,15
    8000989e:	00f71463          	bne	a4,a5,800098a6 <tinst_tests_pf+0x1696>
    800098a2:	6f30106f          	j	8000b794 <tinst_tests_pf+0x3584>
    800098a6:	0001e517          	auipc	a0,0x1e
    800098aa:	4d250513          	addi	a0,a0,1234 # 80027d78 <__func__.0+0x318>
    800098ae:	4481c0ef          	jal	80025cf6 <printf>
    800098b2:	02900513          	li	a0,41
    800098b6:	24a1b0ef          	jal	80024b00 <putchar>
    800098ba:	4529                	li	a0,10
    800098bc:	2441b0ef          	jal	80024b00 <putchar>
    800098c0:	00090a63          	beqz	s2,800098d4 <tinst_tests_pf+0x16c4>
    800098c4:	0003f797          	auipc	a5,0x3f
    800098c8:	74d7c783          	lbu	a5,1869(a5) # 80049011 <excpt+0x1>
    800098cc:	c399                	beqz	a5,800098d2 <tinst_tests_pf+0x16c2>
    800098ce:	0530106f          	j	8000b120 <tinst_tests_pf+0x2f10>
    800098d2:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800098d4:	0330000f          	fence	rw,rw
    800098d8:	4785                	li	a5,1
    800098da:	0003f717          	auipc	a4,0x3f
    800098de:	76073723          	sd	zero,1902(a4) # 80049048 <excpt+0x38>
    800098e2:	00f41023          	sh	a5,0(s0)
    800098e6:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amominu_d, "amominu.d", uint64_t);
    800098ea:	400197b7          	lui	a5,0x40019
    800098ee:	078a                	slli	a5,a5,0x2
    800098f0:	c097b4af          	amominu.d	s1,s1,(a5)
    value = amominu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    800098f4:	00020617          	auipc	a2,0x20
    800098f8:	5e460613          	addi	a2,a2,1508 # 80029ed8 <__func__.0+0x2478>
    800098fc:	08200593          	li	a1,130
    80009900:	0001e517          	auipc	a0,0x1e
    80009904:	45850513          	addi	a0,a0,1112 # 80027d58 <__func__.0+0x2f8>
    80009908:	3ee1c0ef          	jal	80025cf6 <printf>
    8000990c:	0003f797          	auipc	a5,0x3f
    80009910:	7057c783          	lbu	a5,1797(a5) # 80049011 <excpt+0x1>
    80009914:	e399                	bnez	a5,8000991a <tinst_tests_pf+0x170a>
    80009916:	4080106f          	j	8000ad1e <tinst_tests_pf+0x2b0e>
    8000991a:	6418                	ld	a4,8(s0)
    8000991c:	47bd                	li	a5,15
    8000991e:	0001e597          	auipc	a1,0x1e
    80009922:	41258593          	addi	a1,a1,1042 # 80027d30 <__func__.0+0x2d0>
    80009926:	00f71463          	bne	a4,a5,8000992e <tinst_tests_pf+0x171e>
    8000992a:	3a60106f          	j	8000acd0 <tinst_tests_pf+0x2ac0>
    8000992e:	0001e517          	auipc	a0,0x1e
    80009932:	44250513          	addi	a0,a0,1090 # 80027d70 <__func__.0+0x310>
    80009936:	3c01c0ef          	jal	80025cf6 <printf>
    8000993a:	0003f797          	auipc	a5,0x3f
    8000993e:	6d77c783          	lbu	a5,1751(a5) # 80049011 <excpt+0x1>
    80009942:	c799                	beqz	a5,80009950 <tinst_tests_pf+0x1740>
    80009944:	6418                	ld	a4,8(s0)
    80009946:	47bd                	li	a5,15
    80009948:	00f71463          	bne	a4,a5,80009950 <tinst_tests_pf+0x1740>
    8000994c:	68d0106f          	j	8000b7d8 <tinst_tests_pf+0x35c8>
    80009950:	0001e517          	auipc	a0,0x1e
    80009954:	42850513          	addi	a0,a0,1064 # 80027d78 <__func__.0+0x318>
    80009958:	39e1c0ef          	jal	80025cf6 <printf>
    8000995c:	02900513          	li	a0,41
    80009960:	1a01b0ef          	jal	80024b00 <putchar>
    80009964:	4529                	li	a0,10
    80009966:	19a1b0ef          	jal	80024b00 <putchar>
    8000996a:	00090a63          	beqz	s2,8000997e <tinst_tests_pf+0x176e>
    8000996e:	0003f797          	auipc	a5,0x3f
    80009972:	6a37c783          	lbu	a5,1699(a5) # 80049011 <excpt+0x1>
    80009976:	c399                	beqz	a5,8000997c <tinst_tests_pf+0x176c>
    80009978:	7f60106f          	j	8000b16e <tinst_tests_pf+0x2f5e>
    8000997c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000997e:	0330000f          	fence	rw,rw
    80009982:	4785                	li	a5,1
    80009984:	0003f717          	auipc	a4,0x3f
    80009988:	6c073223          	sd	zero,1732(a4) # 80049048 <excpt+0x38>
    8000998c:	00f41023          	sh	a5,0(s0)
    80009990:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomaxu_d, "amomaxu.d", uint64_t);
    80009994:	400197b7          	lui	a5,0x40019
    80009998:	078a                	slli	a5,a5,0x2
    8000999a:	e097b4af          	amomaxu.d	s1,s1,(a5)
    value = amomaxu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    8000999e:	00020617          	auipc	a2,0x20
    800099a2:	57a60613          	addi	a2,a2,1402 # 80029f18 <__func__.0+0x24b8>
    800099a6:	08200593          	li	a1,130
    800099aa:	0001e517          	auipc	a0,0x1e
    800099ae:	3ae50513          	addi	a0,a0,942 # 80027d58 <__func__.0+0x2f8>
    800099b2:	3441c0ef          	jal	80025cf6 <printf>
    800099b6:	0003f797          	auipc	a5,0x3f
    800099ba:	65b7c783          	lbu	a5,1627(a5) # 80049011 <excpt+0x1>
    800099be:	e399                	bnez	a5,800099c4 <tinst_tests_pf+0x17b4>
    800099c0:	3b80106f          	j	8000ad78 <tinst_tests_pf+0x2b68>
    800099c4:	6418                	ld	a4,8(s0)
    800099c6:	47bd                	li	a5,15
    800099c8:	0001e597          	auipc	a1,0x1e
    800099cc:	36858593          	addi	a1,a1,872 # 80027d30 <__func__.0+0x2d0>
    800099d0:	00f71463          	bne	a4,a5,800099d8 <tinst_tests_pf+0x17c8>
    800099d4:	3560106f          	j	8000ad2a <tinst_tests_pf+0x2b1a>
    800099d8:	0001e517          	auipc	a0,0x1e
    800099dc:	39850513          	addi	a0,a0,920 # 80027d70 <__func__.0+0x310>
    800099e0:	3161c0ef          	jal	80025cf6 <printf>
    800099e4:	0003f797          	auipc	a5,0x3f
    800099e8:	62d7c783          	lbu	a5,1581(a5) # 80049011 <excpt+0x1>
    800099ec:	c799                	beqz	a5,800099fa <tinst_tests_pf+0x17ea>
    800099ee:	6418                	ld	a4,8(s0)
    800099f0:	47bd                	li	a5,15
    800099f2:	00f71463          	bne	a4,a5,800099fa <tinst_tests_pf+0x17ea>
    800099f6:	6270106f          	j	8000b81c <tinst_tests_pf+0x360c>
    800099fa:	0001e517          	auipc	a0,0x1e
    800099fe:	37e50513          	addi	a0,a0,894 # 80027d78 <__func__.0+0x318>
    80009a02:	2f41c0ef          	jal	80025cf6 <printf>
    80009a06:	02900513          	li	a0,41
    80009a0a:	0f61b0ef          	jal	80024b00 <putchar>
    80009a0e:	4529                	li	a0,10
    80009a10:	0f01b0ef          	jal	80024b00 <putchar>
    80009a14:	04090e63          	beqz	s2,80009a70 <tinst_tests_pf+0x1860>
    80009a18:	0003f497          	auipc	s1,0x3f
    80009a1c:	5f94c483          	lbu	s1,1529(s1) # 80049011 <excpt+0x1>
    80009a20:	c8a9                	beqz	s1,80009a72 <tinst_tests_pf+0x1862>
    80009a22:	6418                	ld	a4,8(s0)
    80009a24:	47bd                	li	a5,15
    80009a26:	04f71563          	bne	a4,a5,80009a70 <tinst_tests_pf+0x1860>
    80009a2a:	701c                	ld	a5,32(s0)
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_END();
    80009a2c:	0001e597          	auipc	a1,0x1e
    80009a30:	2f458593          	addi	a1,a1,756 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    80009a34:	c3b9                	beqz	a5,80009a7a <tinst_tests_pf+0x186a>
    80009a36:	6814                	ld	a3,16(s0)

static inline uint32_t read_instruction(uintptr_t addr) {

    uint32_t instruction = 0;

    if((addr & 0b1) != 0) {
    80009a38:	0016f713          	andi	a4,a3,1
    80009a3c:	2c0710e3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
        ERROR("trying to read unaligned instruction (%s, %d)", __func__, __LINE__);
    }

    instruction = *((uint16_t*)addr);
    80009a40:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009a44:	460d                	li	a2,3
    80009a46:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009a4a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009a4c:	00c59763          	bne	a1,a2,80009a5a <tinst_tests_pf+0x184a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009a50:	0026d683          	lhu	a3,2(a3)
    80009a54:	0106969b          	slliw	a3,a3,0x10
    80009a58:	8f55                	or	a4,a4,a3
    80009a5a:	1ffe16b7          	lui	a3,0x1ffe1
    80009a5e:	068e                	slli	a3,a3,0x3
    80009a60:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009a62:	8f75                	and	a4,a4,a3
    TEST_END();
    80009a64:	0001e597          	auipc	a1,0x1e
    80009a68:	2bc58593          	addi	a1,a1,700 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    80009a6c:	00e78763          	beq	a5,a4,80009a7a <tinst_tests_pf+0x186a>
    80009a70:	4481                	li	s1,0
    TEST_END();
    80009a72:	0001e597          	auipc	a1,0x1e
    80009a76:	2be58593          	addi	a1,a1,702 # 80027d30 <__func__.0+0x2d0>
    80009a7a:	0001e517          	auipc	a0,0x1e
    80009a7e:	35e50513          	addi	a0,a0,862 # 80027dd8 <__func__.0+0x378>
    80009a82:	2741c0ef          	jal	80025cf6 <printf>
    80009a86:	4511                	li	a0,4
    80009a88:	96ef70ef          	jal	80000bf6 <goto_priv>
    80009a8c:	a21f70ef          	jal	800014ac <reset_state>
}
    80009a90:	70a2                	ld	ra,40(sp)
    80009a92:	7402                	ld	s0,32(sp)
    80009a94:	6942                	ld	s2,16(sp)
    80009a96:	69a2                	ld	s3,8(sp)
    80009a98:	8526                	mv	a0,s1
    80009a9a:	64e2                	ld	s1,24(sp)
    80009a9c:	6145                	addi	sp,sp,48
    80009a9e:	8082                	ret
    TEST_ASSERT("correct tinst when executing a lb which results in a lpf",         
    80009aa0:	701c                	ld	a5,32(s0)
    80009aa2:	0001e597          	auipc	a1,0x1e
    80009aa6:	27e58593          	addi	a1,a1,638 # 80027d20 <__func__.0+0x2c0>
    80009aaa:	e399                	bnez	a5,80009ab0 <tinst_tests_pf+0x18a0>
    80009aac:	ff6fe06f          	j	800082a2 <tinst_tests_pf+0x92>
    80009ab0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009ab2:	0016f713          	andi	a4,a3,1
    80009ab6:	240713e3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009aba:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009abe:	460d                	li	a2,3
    80009ac0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009ac4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009ac6:	00c59763          	bne	a1,a2,80009ad4 <tinst_tests_pf+0x18c4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009aca:	0026d683          	lhu	a3,2(a3)
    80009ace:	0106969b          	slliw	a3,a3,0x10
    80009ad2:	8f55                	or	a4,a4,a3
    80009ad4:	1746                	slli	a4,a4,0x31
    80009ad6:	9345                	srli	a4,a4,0x31
    80009ad8:	0001e597          	auipc	a1,0x1e
    80009adc:	24858593          	addi	a1,a1,584 # 80027d20 <__func__.0+0x2c0>
    80009ae0:	00e79463          	bne	a5,a4,80009ae8 <tinst_tests_pf+0x18d8>
    80009ae4:	fbefe06f          	j	800082a2 <tinst_tests_pf+0x92>
    80009ae8:	0001e597          	auipc	a1,0x1e
    80009aec:	24858593          	addi	a1,a1,584 # 80027d30 <__func__.0+0x2d0>
    80009af0:	fb2fe06f          	j	800082a2 <tinst_tests_pf+0x92>
    80009af4:	6418                	ld	a4,8(s0)
    80009af6:	47b5                	li	a5,13
    80009af8:	4901                	li	s2,0
    80009afa:	00f70463          	beq	a4,a5,80009b02 <tinst_tests_pf+0x18f2>
    80009afe:	ff0fe06f          	j	800082ee <tinst_tests_pf+0xde>
    80009b02:	7018                	ld	a4,32(s0)
    80009b04:	4905                	li	s2,1
    80009b06:	e319                	bnez	a4,80009b0c <tinst_tests_pf+0x18fc>
    80009b08:	fe6fe06f          	j	800082ee <tinst_tests_pf+0xde>
    80009b0c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009b0e:	0126f7b3          	and	a5,a3,s2
    80009b12:	1e0795e3          	bnez	a5,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009b16:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009b1a:	460d                	li	a2,3
    80009b1c:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009b20:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009b22:	00c59763          	bne	a1,a2,80009b30 <tinst_tests_pf+0x1920>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009b26:	0026d683          	lhu	a3,2(a3)
    80009b2a:	0106969b          	slliw	a3,a3,0x10
    80009b2e:	8fd5                	or	a5,a5,a3
    80009b30:	03179913          	slli	s2,a5,0x31
    80009b34:	03195913          	srli	s2,s2,0x31
    80009b38:	40e90933          	sub	s2,s2,a4
    80009b3c:	00193913          	seqz	s2,s2
    80009b40:	faefe06f          	j	800082ee <tinst_tests_pf+0xde>
    80009b44:	701c                	ld	a5,32(s0)
    80009b46:	e399                	bnez	a5,80009b4c <tinst_tests_pf+0x193c>
    80009b48:	f90fe06f          	j	800082d8 <tinst_tests_pf+0xc8>
    80009b4c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009b4e:	0016f713          	andi	a4,a3,1
    80009b52:	1a0715e3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009b56:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009b5a:	460d                	li	a2,3
    80009b5c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009b60:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009b62:	00c59763          	bne	a1,a2,80009b70 <tinst_tests_pf+0x1960>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009b66:	0026d683          	lhu	a3,2(a3)
    80009b6a:	0106969b          	slliw	a3,a3,0x10
    80009b6e:	8f55                	or	a4,a4,a3
    80009b70:	1746                	slli	a4,a4,0x31
    80009b72:	9345                	srli	a4,a4,0x31
    80009b74:	00e78463          	beq	a5,a4,80009b7c <tinst_tests_pf+0x196c>
    80009b78:	f4cfe06f          	j	800082c4 <tinst_tests_pf+0xb4>
    80009b7c:	f5cfe06f          	j	800082d8 <tinst_tests_pf+0xc8>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    80009b80:	701c                	ld	a5,32(s0)
    80009b82:	0001e597          	auipc	a1,0x1e
    80009b86:	19e58593          	addi	a1,a1,414 # 80027d20 <__func__.0+0x2c0>
    80009b8a:	e399                	bnez	a5,80009b90 <tinst_tests_pf+0x1980>
    80009b8c:	fbcfe06f          	j	80008348 <tinst_tests_pf+0x138>
    80009b90:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009b92:	0016f713          	andi	a4,a3,1
    80009b96:	160713e3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009b9a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009b9e:	460d                	li	a2,3
    80009ba0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009ba4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009ba6:	00c59763          	bne	a1,a2,80009bb4 <tinst_tests_pf+0x19a4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009baa:	0026d683          	lhu	a3,2(a3)
    80009bae:	0106969b          	slliw	a3,a3,0x10
    80009bb2:	8f55                	or	a4,a4,a3
    80009bb4:	1746                	slli	a4,a4,0x31
    80009bb6:	9345                	srli	a4,a4,0x31
    80009bb8:	0001e597          	auipc	a1,0x1e
    80009bbc:	16858593          	addi	a1,a1,360 # 80027d20 <__func__.0+0x2c0>
    80009bc0:	00e79463          	bne	a5,a4,80009bc8 <tinst_tests_pf+0x19b8>
    80009bc4:	f84fe06f          	j	80008348 <tinst_tests_pf+0x138>
    80009bc8:	0001e597          	auipc	a1,0x1e
    80009bcc:	16858593          	addi	a1,a1,360 # 80027d30 <__func__.0+0x2d0>
    80009bd0:	f78fe06f          	j	80008348 <tinst_tests_pf+0x138>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    80009bd4:	701c                	ld	a5,32(s0)
    80009bd6:	0001e597          	auipc	a1,0x1e
    80009bda:	14a58593          	addi	a1,a1,330 # 80027d20 <__func__.0+0x2c0>
    80009bde:	e399                	bnez	a5,80009be4 <tinst_tests_pf+0x19d4>
    80009be0:	81bfe06f          	j	800083fa <tinst_tests_pf+0x1ea>
    80009be4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009be6:	0016f713          	andi	a4,a3,1
    80009bea:	100719e3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009bee:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009bf2:	460d                	li	a2,3
    80009bf4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009bf8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009bfa:	00c59763          	bne	a1,a2,80009c08 <tinst_tests_pf+0x19f8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009bfe:	0026d683          	lhu	a3,2(a3)
    80009c02:	0106969b          	slliw	a3,a3,0x10
    80009c06:	8f55                	or	a4,a4,a3
    80009c08:	1746                	slli	a4,a4,0x31
    80009c0a:	9345                	srli	a4,a4,0x31
    80009c0c:	0001e597          	auipc	a1,0x1e
    80009c10:	11458593          	addi	a1,a1,276 # 80027d20 <__func__.0+0x2c0>
    80009c14:	00e79463          	bne	a5,a4,80009c1c <tinst_tests_pf+0x1a0c>
    80009c18:	fe2fe06f          	j	800083fa <tinst_tests_pf+0x1ea>
    80009c1c:	0001e597          	auipc	a1,0x1e
    80009c20:	11458593          	addi	a1,a1,276 # 80027d30 <__func__.0+0x2d0>
    80009c24:	fd6fe06f          	j	800083fa <tinst_tests_pf+0x1ea>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    80009c28:	701c                	ld	a5,32(s0)
    80009c2a:	0001e597          	auipc	a1,0x1e
    80009c2e:	0f658593          	addi	a1,a1,246 # 80027d20 <__func__.0+0x2c0>
    80009c32:	e399                	bnez	a5,80009c38 <tinst_tests_pf+0x1a28>
    80009c34:	879fe06f          	j	800084ac <tinst_tests_pf+0x29c>
    80009c38:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009c3a:	0016f713          	andi	a4,a3,1
    80009c3e:	0a071fe3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009c42:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009c46:	460d                	li	a2,3
    80009c48:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009c4c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009c4e:	00c59763          	bne	a1,a2,80009c5c <tinst_tests_pf+0x1a4c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009c52:	0026d683          	lhu	a3,2(a3)
    80009c56:	0106969b          	slliw	a3,a3,0x10
    80009c5a:	8f55                	or	a4,a4,a3
    80009c5c:	1746                	slli	a4,a4,0x31
    80009c5e:	9345                	srli	a4,a4,0x31
    80009c60:	0001e597          	auipc	a1,0x1e
    80009c64:	0c058593          	addi	a1,a1,192 # 80027d20 <__func__.0+0x2c0>
    80009c68:	00e79463          	bne	a5,a4,80009c70 <tinst_tests_pf+0x1a60>
    80009c6c:	841fe06f          	j	800084ac <tinst_tests_pf+0x29c>
    80009c70:	0001e597          	auipc	a1,0x1e
    80009c74:	0c058593          	addi	a1,a1,192 # 80027d30 <__func__.0+0x2d0>
    80009c78:	835fe06f          	j	800084ac <tinst_tests_pf+0x29c>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    80009c7c:	701c                	ld	a5,32(s0)
    80009c7e:	0001e597          	auipc	a1,0x1e
    80009c82:	0a258593          	addi	a1,a1,162 # 80027d20 <__func__.0+0x2c0>
    80009c86:	e399                	bnez	a5,80009c8c <tinst_tests_pf+0x1a7c>
    80009c88:	8d7fe06f          	j	8000855e <tinst_tests_pf+0x34e>
    80009c8c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009c8e:	0016f713          	andi	a4,a3,1
    80009c92:	060715e3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009c96:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009c9a:	460d                	li	a2,3
    80009c9c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009ca0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009ca2:	00c59763          	bne	a1,a2,80009cb0 <tinst_tests_pf+0x1aa0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009ca6:	0026d683          	lhu	a3,2(a3)
    80009caa:	0106969b          	slliw	a3,a3,0x10
    80009cae:	8f55                	or	a4,a4,a3
    80009cb0:	1746                	slli	a4,a4,0x31
    80009cb2:	9345                	srli	a4,a4,0x31
    80009cb4:	0001e597          	auipc	a1,0x1e
    80009cb8:	06c58593          	addi	a1,a1,108 # 80027d20 <__func__.0+0x2c0>
    80009cbc:	00e79463          	bne	a5,a4,80009cc4 <tinst_tests_pf+0x1ab4>
    80009cc0:	89ffe06f          	j	8000855e <tinst_tests_pf+0x34e>
    80009cc4:	0001e597          	auipc	a1,0x1e
    80009cc8:	06c58593          	addi	a1,a1,108 # 80027d30 <__func__.0+0x2d0>
    80009ccc:	893fe06f          	j	8000855e <tinst_tests_pf+0x34e>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    80009cd0:	701c                	ld	a5,32(s0)
    80009cd2:	0001e597          	auipc	a1,0x1e
    80009cd6:	04e58593          	addi	a1,a1,78 # 80027d20 <__func__.0+0x2c0>
    80009cda:	e399                	bnez	a5,80009ce0 <tinst_tests_pf+0x1ad0>
    80009cdc:	92dfe06f          	j	80008608 <tinst_tests_pf+0x3f8>
    80009ce0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009ce2:	0016f713          	andi	a4,a3,1
    80009ce6:	00071be3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009cea:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009cee:	460d                	li	a2,3
    80009cf0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009cf4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009cf6:	00c59763          	bne	a1,a2,80009d04 <tinst_tests_pf+0x1af4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009cfa:	0026d683          	lhu	a3,2(a3)
    80009cfe:	0106969b          	slliw	a3,a3,0x10
    80009d02:	8f55                	or	a4,a4,a3
    80009d04:	1746                	slli	a4,a4,0x31
    80009d06:	9345                	srli	a4,a4,0x31
    80009d08:	0001e597          	auipc	a1,0x1e
    80009d0c:	01858593          	addi	a1,a1,24 # 80027d20 <__func__.0+0x2c0>
    80009d10:	00e79463          	bne	a5,a4,80009d18 <tinst_tests_pf+0x1b08>
    80009d14:	8f5fe06f          	j	80008608 <tinst_tests_pf+0x3f8>
    80009d18:	0001e597          	auipc	a1,0x1e
    80009d1c:	01858593          	addi	a1,a1,24 # 80027d30 <__func__.0+0x2d0>
    80009d20:	8e9fe06f          	j	80008608 <tinst_tests_pf+0x3f8>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    80009d24:	701c                	ld	a5,32(s0)
    80009d26:	0001e597          	auipc	a1,0x1e
    80009d2a:	ffa58593          	addi	a1,a1,-6 # 80027d20 <__func__.0+0x2c0>
    80009d2e:	e399                	bnez	a5,80009d34 <tinst_tests_pf+0x1b24>
    80009d30:	983fe06f          	j	800086b2 <tinst_tests_pf+0x4a2>
    80009d34:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009d36:	0016f713          	andi	a4,a3,1
    80009d3a:	7c071163          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009d3e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009d42:	460d                	li	a2,3
    80009d44:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009d48:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009d4a:	00c59763          	bne	a1,a2,80009d58 <tinst_tests_pf+0x1b48>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009d4e:	0026d683          	lhu	a3,2(a3)
    80009d52:	0106969b          	slliw	a3,a3,0x10
    80009d56:	8f55                	or	a4,a4,a3
    80009d58:	1746                	slli	a4,a4,0x31
    80009d5a:	9345                	srli	a4,a4,0x31
    80009d5c:	0001e597          	auipc	a1,0x1e
    80009d60:	fc458593          	addi	a1,a1,-60 # 80027d20 <__func__.0+0x2c0>
    80009d64:	00e79463          	bne	a5,a4,80009d6c <tinst_tests_pf+0x1b5c>
    80009d68:	94bfe06f          	j	800086b2 <tinst_tests_pf+0x4a2>
    80009d6c:	0001e597          	auipc	a1,0x1e
    80009d70:	fc458593          	addi	a1,a1,-60 # 80027d30 <__func__.0+0x2d0>
    80009d74:	93ffe06f          	j	800086b2 <tinst_tests_pf+0x4a2>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    80009d78:	701c                	ld	a5,32(s0)
    80009d7a:	0001e597          	auipc	a1,0x1e
    80009d7e:	fa658593          	addi	a1,a1,-90 # 80027d20 <__func__.0+0x2c0>
    80009d82:	e399                	bnez	a5,80009d88 <tinst_tests_pf+0x1b78>
    80009d84:	9dbfe06f          	j	8000875e <tinst_tests_pf+0x54e>
    80009d88:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009d8a:	0016f713          	andi	a4,a3,1
    80009d8e:	76071763          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009d92:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009d96:	460d                	li	a2,3
    80009d98:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009d9c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009d9e:	00c59763          	bne	a1,a2,80009dac <tinst_tests_pf+0x1b9c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009da2:	0026d683          	lhu	a3,2(a3)
    80009da6:	0106969b          	slliw	a3,a3,0x10
    80009daa:	8f55                	or	a4,a4,a3
    80009dac:	01f076b7          	lui	a3,0x1f07
    80009db0:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009db4:	8f75                	and	a4,a4,a3
    80009db6:	0001e597          	auipc	a1,0x1e
    80009dba:	f6a58593          	addi	a1,a1,-150 # 80027d20 <__func__.0+0x2c0>
    80009dbe:	00e79463          	bne	a5,a4,80009dc6 <tinst_tests_pf+0x1bb6>
    80009dc2:	99dfe06f          	j	8000875e <tinst_tests_pf+0x54e>
    80009dc6:	0001e597          	auipc	a1,0x1e
    80009dca:	f6a58593          	addi	a1,a1,-150 # 80027d30 <__func__.0+0x2d0>
    80009dce:	991fe06f          	j	8000875e <tinst_tests_pf+0x54e>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    80009dd2:	701c                	ld	a5,32(s0)
    80009dd4:	0001e597          	auipc	a1,0x1e
    80009dd8:	f4c58593          	addi	a1,a1,-180 # 80027d20 <__func__.0+0x2c0>
    80009ddc:	e399                	bnez	a5,80009de2 <tinst_tests_pf+0x1bd2>
    80009dde:	a31fe06f          	j	8000880e <tinst_tests_pf+0x5fe>
    80009de2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009de4:	0016f713          	andi	a4,a3,1
    80009de8:	70071a63          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009dec:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009df0:	460d                	li	a2,3
    80009df2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009df6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009df8:	00c59763          	bne	a1,a2,80009e06 <tinst_tests_pf+0x1bf6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009dfc:	0026d683          	lhu	a3,2(a3)
    80009e00:	0106969b          	slliw	a3,a3,0x10
    80009e04:	8f55                	or	a4,a4,a3
    80009e06:	01f076b7          	lui	a3,0x1f07
    80009e0a:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009e0e:	8f75                	and	a4,a4,a3
    80009e10:	0001e597          	auipc	a1,0x1e
    80009e14:	f1058593          	addi	a1,a1,-240 # 80027d20 <__func__.0+0x2c0>
    80009e18:	00e79463          	bne	a5,a4,80009e20 <tinst_tests_pf+0x1c10>
    80009e1c:	9f3fe06f          	j	8000880e <tinst_tests_pf+0x5fe>
    80009e20:	0001e597          	auipc	a1,0x1e
    80009e24:	f1058593          	addi	a1,a1,-240 # 80027d30 <__func__.0+0x2d0>
    80009e28:	9e7fe06f          	j	8000880e <tinst_tests_pf+0x5fe>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    80009e2c:	701c                	ld	a5,32(s0)
    80009e2e:	0001e597          	auipc	a1,0x1e
    80009e32:	ef258593          	addi	a1,a1,-270 # 80027d20 <__func__.0+0x2c0>
    80009e36:	e399                	bnez	a5,80009e3c <tinst_tests_pf+0x1c2c>
    80009e38:	a89fe06f          	j	800088c0 <tinst_tests_pf+0x6b0>
    80009e3c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009e3e:	0016f713          	andi	a4,a3,1
    80009e42:	6a071d63          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009e46:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009e4a:	460d                	li	a2,3
    80009e4c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009e50:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009e52:	00c59763          	bne	a1,a2,80009e60 <tinst_tests_pf+0x1c50>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009e56:	0026d683          	lhu	a3,2(a3)
    80009e5a:	0106969b          	slliw	a3,a3,0x10
    80009e5e:	8f55                	or	a4,a4,a3
    80009e60:	01f076b7          	lui	a3,0x1f07
    80009e64:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009e68:	8f75                	and	a4,a4,a3
    80009e6a:	0001e597          	auipc	a1,0x1e
    80009e6e:	eb658593          	addi	a1,a1,-330 # 80027d20 <__func__.0+0x2c0>
    80009e72:	00e79463          	bne	a5,a4,80009e7a <tinst_tests_pf+0x1c6a>
    80009e76:	a4bfe06f          	j	800088c0 <tinst_tests_pf+0x6b0>
    80009e7a:	0001e597          	auipc	a1,0x1e
    80009e7e:	eb658593          	addi	a1,a1,-330 # 80027d30 <__func__.0+0x2d0>
    80009e82:	a3ffe06f          	j	800088c0 <tinst_tests_pf+0x6b0>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    80009e86:	701c                	ld	a5,32(s0)
    80009e88:	0001e597          	auipc	a1,0x1e
    80009e8c:	e9858593          	addi	a1,a1,-360 # 80027d20 <__func__.0+0x2c0>
    80009e90:	e399                	bnez	a5,80009e96 <tinst_tests_pf+0x1c86>
    80009e92:	ae3fe06f          	j	80008974 <tinst_tests_pf+0x764>
    80009e96:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009e98:	0016f713          	andi	a4,a3,1
    80009e9c:	66071063          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009ea0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009ea4:	460d                	li	a2,3
    80009ea6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009eaa:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009eac:	00c59763          	bne	a1,a2,80009eba <tinst_tests_pf+0x1caa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009eb0:	0026d683          	lhu	a3,2(a3)
    80009eb4:	0106969b          	slliw	a3,a3,0x10
    80009eb8:	8f55                	or	a4,a4,a3
    80009eba:	01f076b7          	lui	a3,0x1f07
    80009ebe:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009ec2:	8f75                	and	a4,a4,a3
    80009ec4:	0001e597          	auipc	a1,0x1e
    80009ec8:	e5c58593          	addi	a1,a1,-420 # 80027d20 <__func__.0+0x2c0>
    80009ecc:	00e79463          	bne	a5,a4,80009ed4 <tinst_tests_pf+0x1cc4>
    80009ed0:	aa5fe06f          	j	80008974 <tinst_tests_pf+0x764>
    80009ed4:	0001e597          	auipc	a1,0x1e
    80009ed8:	e5c58593          	addi	a1,a1,-420 # 80027d30 <__func__.0+0x2d0>
    80009edc:	a99fe06f          	j	80008974 <tinst_tests_pf+0x764>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    80009ee0:	701c                	ld	a5,32(s0)
    80009ee2:	0001e597          	auipc	a1,0x1e
    80009ee6:	e3e58593          	addi	a1,a1,-450 # 80027d20 <__func__.0+0x2c0>
    80009eea:	e399                	bnez	a5,80009ef0 <tinst_tests_pf+0x1ce0>
    80009eec:	dddfe06f          	j	80008cc8 <tinst_tests_pf+0xab8>
    80009ef0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009ef2:	0016f713          	andi	a4,a3,1
    80009ef6:	60071363          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009efa:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009efe:	460d                	li	a2,3
    80009f00:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009f04:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009f06:	00c59763          	bne	a1,a2,80009f14 <tinst_tests_pf+0x1d04>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009f0a:	0026d683          	lhu	a3,2(a3)
    80009f0e:	0106969b          	slliw	a3,a3,0x10
    80009f12:	8f55                	or	a4,a4,a3
    80009f14:	1ffe16b7          	lui	a3,0x1ffe1
    80009f18:	068e                	slli	a3,a3,0x3
    80009f1a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009f1c:	8f75                	and	a4,a4,a3
    80009f1e:	0001e597          	auipc	a1,0x1e
    80009f22:	e0258593          	addi	a1,a1,-510 # 80027d20 <__func__.0+0x2c0>
    80009f26:	00e79463          	bne	a5,a4,80009f2e <tinst_tests_pf+0x1d1e>
    80009f2a:	d9ffe06f          	j	80008cc8 <tinst_tests_pf+0xab8>
    80009f2e:	0001e597          	auipc	a1,0x1e
    80009f32:	e0258593          	addi	a1,a1,-510 # 80027d30 <__func__.0+0x2d0>
    80009f36:	d93fe06f          	j	80008cc8 <tinst_tests_pf+0xab8>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    80009f3a:	701c                	ld	a5,32(s0)
    80009f3c:	0001e597          	auipc	a1,0x1e
    80009f40:	de458593          	addi	a1,a1,-540 # 80027d20 <__func__.0+0x2c0>
    80009f44:	e399                	bnez	a5,80009f4a <tinst_tests_pf+0x1d3a>
    80009f46:	e37fe06f          	j	80008d7c <tinst_tests_pf+0xb6c>
    80009f4a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009f4c:	0016f713          	andi	a4,a3,1
    80009f50:	5a071663          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009f54:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009f58:	460d                	li	a2,3
    80009f5a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009f5e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009f60:	00c59763          	bne	a1,a2,80009f6e <tinst_tests_pf+0x1d5e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009f64:	0026d683          	lhu	a3,2(a3)
    80009f68:	0106969b          	slliw	a3,a3,0x10
    80009f6c:	8f55                	or	a4,a4,a3
    80009f6e:	1ffe16b7          	lui	a3,0x1ffe1
    80009f72:	068e                	slli	a3,a3,0x3
    80009f74:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009f76:	8f75                	and	a4,a4,a3
    80009f78:	0001e597          	auipc	a1,0x1e
    80009f7c:	da858593          	addi	a1,a1,-600 # 80027d20 <__func__.0+0x2c0>
    80009f80:	00e79463          	bne	a5,a4,80009f88 <tinst_tests_pf+0x1d78>
    80009f84:	df9fe06f          	j	80008d7c <tinst_tests_pf+0xb6c>
    80009f88:	0001e597          	auipc	a1,0x1e
    80009f8c:	da858593          	addi	a1,a1,-600 # 80027d30 <__func__.0+0x2d0>
    80009f90:	dedfe06f          	j	80008d7c <tinst_tests_pf+0xb6c>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    80009f94:	701c                	ld	a5,32(s0)
    80009f96:	0001e597          	auipc	a1,0x1e
    80009f9a:	d8a58593          	addi	a1,a1,-630 # 80027d20 <__func__.0+0x2c0>
    80009f9e:	e399                	bnez	a5,80009fa4 <tinst_tests_pf+0x1d94>
    80009fa0:	e8ffe06f          	j	80008e2e <tinst_tests_pf+0xc1e>
    80009fa4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009fa6:	0016f713          	andi	a4,a3,1
    80009faa:	54071963          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009fae:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009fb2:	460d                	li	a2,3
    80009fb4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009fb8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009fba:	00c59763          	bne	a1,a2,80009fc8 <tinst_tests_pf+0x1db8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009fbe:	0026d683          	lhu	a3,2(a3)
    80009fc2:	0106969b          	slliw	a3,a3,0x10
    80009fc6:	8f55                	or	a4,a4,a3
    80009fc8:	1ffe16b7          	lui	a3,0x1ffe1
    80009fcc:	068e                	slli	a3,a3,0x3
    80009fce:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009fd0:	8f75                	and	a4,a4,a3
    80009fd2:	0001e597          	auipc	a1,0x1e
    80009fd6:	d4e58593          	addi	a1,a1,-690 # 80027d20 <__func__.0+0x2c0>
    80009fda:	00e79463          	bne	a5,a4,80009fe2 <tinst_tests_pf+0x1dd2>
    80009fde:	e51fe06f          	j	80008e2e <tinst_tests_pf+0xc1e>
    80009fe2:	0001e597          	auipc	a1,0x1e
    80009fe6:	d4e58593          	addi	a1,a1,-690 # 80027d30 <__func__.0+0x2d0>
    80009fea:	e45fe06f          	j	80008e2e <tinst_tests_pf+0xc1e>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    80009fee:	701c                	ld	a5,32(s0)
    80009ff0:	e399                	bnez	a5,80009ff6 <tinst_tests_pf+0x1de6>
    80009ff2:	b8cfe06f          	j	8000837e <tinst_tests_pf+0x16e>
    80009ff6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009ff8:	0016f713          	andi	a4,a3,1
    80009ffc:	50071063          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a000:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a004:	460d                	li	a2,3
    8000a006:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a00a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a00c:	00c59763          	bne	a1,a2,8000a01a <tinst_tests_pf+0x1e0a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a010:	0026d683          	lhu	a3,2(a3)
    8000a014:	0106969b          	slliw	a3,a3,0x10
    8000a018:	8f55                	or	a4,a4,a3
    8000a01a:	1746                	slli	a4,a4,0x31
    8000a01c:	9345                	srli	a4,a4,0x31
    8000a01e:	00e78463          	beq	a5,a4,8000a026 <tinst_tests_pf+0x1e16>
    8000a022:	b48fe06f          	j	8000836a <tinst_tests_pf+0x15a>
    8000a026:	b58fe06f          	j	8000837e <tinst_tests_pf+0x16e>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    8000a02a:	6418                	ld	a4,8(s0)
    8000a02c:	47b5                	li	a5,13
    8000a02e:	00f70463          	beq	a4,a5,8000a036 <tinst_tests_pf+0x1e26>
    8000a032:	d7afe06f          	j	800085ac <tinst_tests_pf+0x39c>
    8000a036:	7018                	ld	a4,32(s0)
    8000a038:	e319                	bnez	a4,8000a03e <tinst_tests_pf+0x1e2e>
    8000a03a:	d74fe06f          	j	800085ae <tinst_tests_pf+0x39e>
    8000a03e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a040:	0016f793          	andi	a5,a3,1
    8000a044:	4a079c63          	bnez	a5,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a048:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a04c:	460d                	li	a2,3
    8000a04e:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000a052:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a054:	00c59763          	bne	a1,a2,8000a062 <tinst_tests_pf+0x1e52>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a058:	0026d683          	lhu	a3,2(a3)
    8000a05c:	0106969b          	slliw	a3,a3,0x10
    8000a060:	8fd5                	or	a5,a5,a3
    8000a062:	17c6                	slli	a5,a5,0x31
    8000a064:	0317d913          	srli	s2,a5,0x31
    8000a068:	40e90933          	sub	s2,s2,a4
    8000a06c:	00193913          	seqz	s2,s2
    8000a070:	d3efe06f          	j	800085ae <tinst_tests_pf+0x39e>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    8000a074:	6418                	ld	a4,8(s0)
    8000a076:	47bd                	li	a5,15
    8000a078:	0001e597          	auipc	a1,0x1e
    8000a07c:	cb858593          	addi	a1,a1,-840 # 80027d30 <__func__.0+0x2d0>
    8000a080:	00f70463          	beq	a4,a5,8000a088 <tinst_tests_pf+0x1e78>
    8000a084:	e51fe06f          	j	80008ed4 <tinst_tests_pf+0xcc4>
    8000a088:	701c                	ld	a5,32(s0)
    8000a08a:	0001e597          	auipc	a1,0x1e
    8000a08e:	c9658593          	addi	a1,a1,-874 # 80027d20 <__func__.0+0x2c0>
    8000a092:	e399                	bnez	a5,8000a098 <tinst_tests_pf+0x1e88>
    8000a094:	e41fe06f          	j	80008ed4 <tinst_tests_pf+0xcc4>
    8000a098:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a09a:	0016f713          	andi	a4,a3,1
    8000a09e:	44071f63          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a0a2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a0a6:	460d                	li	a2,3
    8000a0a8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a0ac:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a0ae:	00c59763          	bne	a1,a2,8000a0bc <tinst_tests_pf+0x1eac>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a0b2:	0026d683          	lhu	a3,2(a3)
    8000a0b6:	0106969b          	slliw	a3,a3,0x10
    8000a0ba:	8f55                	or	a4,a4,a3
    8000a0bc:	1ffe16b7          	lui	a3,0x1ffe1
    8000a0c0:	068e                	slli	a3,a3,0x3
    8000a0c2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a0c4:	8f75                	and	a4,a4,a3
    8000a0c6:	0001e597          	auipc	a1,0x1e
    8000a0ca:	c5a58593          	addi	a1,a1,-934 # 80027d20 <__func__.0+0x2c0>
    8000a0ce:	00e78463          	beq	a5,a4,8000a0d6 <tinst_tests_pf+0x1ec6>
    8000a0d2:	dfbfe06f          	j	80008ecc <tinst_tests_pf+0xcbc>
    8000a0d6:	dfffe06f          	j	80008ed4 <tinst_tests_pf+0xcc4>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    8000a0da:	6418                	ld	a4,8(s0)
    8000a0dc:	47b5                	li	a5,13
    8000a0de:	00f70463          	beq	a4,a5,8000a0e6 <tinst_tests_pf+0x1ed6>
    8000a0e2:	d74fe06f          	j	80008656 <tinst_tests_pf+0x446>
    8000a0e6:	7018                	ld	a4,32(s0)
    8000a0e8:	e319                	bnez	a4,8000a0ee <tinst_tests_pf+0x1ede>
    8000a0ea:	d6efe06f          	j	80008658 <tinst_tests_pf+0x448>
    8000a0ee:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a0f0:	0016f793          	andi	a5,a3,1
    8000a0f4:	40079463          	bnez	a5,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a0f8:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a0fc:	460d                	li	a2,3
    8000a0fe:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000a102:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a104:	00c59763          	bne	a1,a2,8000a112 <tinst_tests_pf+0x1f02>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a108:	0026d683          	lhu	a3,2(a3)
    8000a10c:	0106969b          	slliw	a3,a3,0x10
    8000a110:	8fd5                	or	a5,a5,a3
    8000a112:	17c6                	slli	a5,a5,0x31
    8000a114:	0317d913          	srli	s2,a5,0x31
    8000a118:	40e90933          	sub	s2,s2,a4
    8000a11c:	00193913          	seqz	s2,s2
    8000a120:	d38fe06f          	j	80008658 <tinst_tests_pf+0x448>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    8000a124:	6418                	ld	a4,8(s0)
    8000a126:	47b5                	li	a5,13
    8000a128:	00f70463          	beq	a4,a5,8000a130 <tinst_tests_pf+0x1f20>
    8000a12c:	dd4fe06f          	j	80008700 <tinst_tests_pf+0x4f0>
    8000a130:	7018                	ld	a4,32(s0)
    8000a132:	e319                	bnez	a4,8000a138 <tinst_tests_pf+0x1f28>
    8000a134:	dcefe06f          	j	80008702 <tinst_tests_pf+0x4f2>
    8000a138:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a13a:	0016f793          	andi	a5,a3,1
    8000a13e:	3a079f63          	bnez	a5,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a142:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a146:	460d                	li	a2,3
    8000a148:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000a14c:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a14e:	00c59763          	bne	a1,a2,8000a15c <tinst_tests_pf+0x1f4c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a152:	0026d683          	lhu	a3,2(a3)
    8000a156:	0106969b          	slliw	a3,a3,0x10
    8000a15a:	8fd5                	or	a5,a5,a3
    8000a15c:	17c6                	slli	a5,a5,0x31
    8000a15e:	0317d913          	srli	s2,a5,0x31
    8000a162:	40e90933          	sub	s2,s2,a4
    8000a166:	00193913          	seqz	s2,s2
    8000a16a:	d98fe06f          	j	80008702 <tinst_tests_pf+0x4f2>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    8000a16e:	6418                	ld	a4,8(s0)
    8000a170:	47bd                	li	a5,15
    8000a172:	00f70463          	beq	a4,a5,8000a17a <tinst_tests_pf+0x1f6a>
    8000a176:	e36fe06f          	j	800087ac <tinst_tests_pf+0x59c>
    8000a17a:	701c                	ld	a5,32(s0)
    8000a17c:	e399                	bnez	a5,8000a182 <tinst_tests_pf+0x1f72>
    8000a17e:	e30fe06f          	j	800087ae <tinst_tests_pf+0x59e>
    8000a182:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a184:	0016f713          	andi	a4,a3,1
    8000a188:	36071a63          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a18c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a190:	460d                	li	a2,3
    8000a192:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a196:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a198:	00c59763          	bne	a1,a2,8000a1a6 <tinst_tests_pf+0x1f96>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a19c:	0026d683          	lhu	a3,2(a3)
    8000a1a0:	0106969b          	slliw	a3,a3,0x10
    8000a1a4:	8f55                	or	a4,a4,a3
    8000a1a6:	01f076b7          	lui	a3,0x1f07
    8000a1aa:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a1ae:	8f75                	and	a4,a4,a3
    8000a1b0:	40f70933          	sub	s2,a4,a5
    8000a1b4:	00193913          	seqz	s2,s2
    8000a1b8:	df6fe06f          	j	800087ae <tinst_tests_pf+0x59e>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    8000a1bc:	6418                	ld	a4,8(s0)
    8000a1be:	47bd                	li	a5,15
    8000a1c0:	00f70463          	beq	a4,a5,8000a1c8 <tinst_tests_pf+0x1fb8>
    8000a1c4:	e98fe06f          	j	8000885c <tinst_tests_pf+0x64c>
    8000a1c8:	701c                	ld	a5,32(s0)
    8000a1ca:	e399                	bnez	a5,8000a1d0 <tinst_tests_pf+0x1fc0>
    8000a1cc:	e92fe06f          	j	8000885e <tinst_tests_pf+0x64e>
    8000a1d0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a1d2:	0016f713          	andi	a4,a3,1
    8000a1d6:	32071363          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a1da:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a1de:	460d                	li	a2,3
    8000a1e0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a1e4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a1e6:	00c59763          	bne	a1,a2,8000a1f4 <tinst_tests_pf+0x1fe4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a1ea:	0026d683          	lhu	a3,2(a3)
    8000a1ee:	0106969b          	slliw	a3,a3,0x10
    8000a1f2:	8f55                	or	a4,a4,a3
    8000a1f4:	01f076b7          	lui	a3,0x1f07
    8000a1f8:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a1fc:	8f75                	and	a4,a4,a3
    8000a1fe:	40f70933          	sub	s2,a4,a5
    8000a202:	00193913          	seqz	s2,s2
    8000a206:	e58fe06f          	j	8000885e <tinst_tests_pf+0x64e>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    8000a20a:	6418                	ld	a4,8(s0)
    8000a20c:	47bd                	li	a5,15
    8000a20e:	00f70463          	beq	a4,a5,8000a216 <tinst_tests_pf+0x2006>
    8000a212:	efcfe06f          	j	8000890e <tinst_tests_pf+0x6fe>
    8000a216:	701c                	ld	a5,32(s0)
    8000a218:	e399                	bnez	a5,8000a21e <tinst_tests_pf+0x200e>
    8000a21a:	ef6fe06f          	j	80008910 <tinst_tests_pf+0x700>
    8000a21e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a220:	0016f713          	andi	a4,a3,1
    8000a224:	2c071c63          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a228:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a22c:	460d                	li	a2,3
    8000a22e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a232:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a234:	00c59763          	bne	a1,a2,8000a242 <tinst_tests_pf+0x2032>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a238:	0026d683          	lhu	a3,2(a3)
    8000a23c:	0106969b          	slliw	a3,a3,0x10
    8000a240:	8f55                	or	a4,a4,a3
    8000a242:	01f076b7          	lui	a3,0x1f07
    8000a246:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a24a:	8f75                	and	a4,a4,a3
    8000a24c:	40f70933          	sub	s2,a4,a5
    8000a250:	00193913          	seqz	s2,s2
    8000a254:	ebcfe06f          	j	80008910 <tinst_tests_pf+0x700>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    8000a258:	6418                	ld	a4,8(s0)
    8000a25a:	47bd                	li	a5,15
    8000a25c:	00f70463          	beq	a4,a5,8000a264 <tinst_tests_pf+0x2054>
    8000a260:	f62fe06f          	j	800089c2 <tinst_tests_pf+0x7b2>
    8000a264:	701c                	ld	a5,32(s0)
    8000a266:	e399                	bnez	a5,8000a26c <tinst_tests_pf+0x205c>
    8000a268:	f5cfe06f          	j	800089c4 <tinst_tests_pf+0x7b4>
    8000a26c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a26e:	0016f713          	andi	a4,a3,1
    8000a272:	28071563          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a276:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a27a:	460d                	li	a2,3
    8000a27c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a280:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a282:	00c59763          	bne	a1,a2,8000a290 <tinst_tests_pf+0x2080>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a286:	0026d683          	lhu	a3,2(a3)
    8000a28a:	0106969b          	slliw	a3,a3,0x10
    8000a28e:	8f55                	or	a4,a4,a3
    8000a290:	01f076b7          	lui	a3,0x1f07
    8000a294:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a298:	8f75                	and	a4,a4,a3
    8000a29a:	40f70933          	sub	s2,a4,a5
    8000a29e:	00193913          	seqz	s2,s2
    8000a2a2:	f22fe06f          	j	800089c4 <tinst_tests_pf+0x7b4>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000a2a6:	6418                	ld	a4,8(s0)
    8000a2a8:	47b5                	li	a5,13
    8000a2aa:	00f70463          	beq	a4,a5,8000a2b2 <tinst_tests_pf+0x20a2>
    8000a2ae:	fb8fe06f          	j	80008a66 <tinst_tests_pf+0x856>
    8000a2b2:	7004                	ld	s1,32(s0)
    8000a2b4:	e099                	bnez	s1,8000a2ba <tinst_tests_pf+0x20aa>
    8000a2b6:	fb2fe06f          	j	80008a68 <tinst_tests_pf+0x858>
    8000a2ba:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a2bc:	0017f713          	andi	a4,a5,1
    8000a2c0:	22071e63          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a2c4:	0007d503          	lhu	a0,0(a5)
    8000a2c8:	900f70ef          	jal	800013c8 <expand_compressed_instruction>
    8000a2cc:	67a1                	lui	a5,0x8
    8000a2ce:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000a2d0:	00f57933          	and	s2,a0,a5
    8000a2d4:	40990933          	sub	s2,s2,s1
    8000a2d8:	00193913          	seqz	s2,s2
    8000a2dc:	f8cfe06f          	j	80008a68 <tinst_tests_pf+0x858>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    8000a2e0:	6418                	ld	a4,8(s0)
    8000a2e2:	47b5                	li	a5,13
    8000a2e4:	00f70463          	beq	a4,a5,8000a2ec <tinst_tests_pf+0x20dc>
    8000a2e8:	825fe06f          	j	80008b0c <tinst_tests_pf+0x8fc>
    8000a2ec:	02043983          	ld	s3,32(s0)
    8000a2f0:	00099463          	bnez	s3,8000a2f8 <tinst_tests_pf+0x20e8>
    8000a2f4:	81bfe06f          	j	80008b0e <tinst_tests_pf+0x8fe>
    8000a2f8:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a2fa:	0017f713          	andi	a4,a5,1
    8000a2fe:	1e071f63          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a302:	0007d503          	lhu	a0,0(a5)
    8000a306:	8c2f70ef          	jal	800013c8 <expand_compressed_instruction>
    8000a30a:	67a1                	lui	a5,0x8
    8000a30c:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000a30e:	00f57933          	and	s2,a0,a5
    8000a312:	41390933          	sub	s2,s2,s3
    8000a316:	00193913          	seqz	s2,s2
    8000a31a:	ff4fe06f          	j	80008b0e <tinst_tests_pf+0x8fe>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    8000a31e:	701c                	ld	a5,32(s0)
    8000a320:	e399                	bnez	a5,8000a326 <tinst_tests_pf+0x2116>
    8000a322:	9ddfe06f          	j	80008cfe <tinst_tests_pf+0xaee>
    8000a326:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a328:	0016f713          	andi	a4,a3,1
    8000a32c:	1c071863          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a330:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a334:	460d                	li	a2,3
    8000a336:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a33a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a33c:	00c59763          	bne	a1,a2,8000a34a <tinst_tests_pf+0x213a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a340:	0026d683          	lhu	a3,2(a3)
    8000a344:	0106969b          	slliw	a3,a3,0x10
    8000a348:	8f55                	or	a4,a4,a3
    8000a34a:	1ffe16b7          	lui	a3,0x1ffe1
    8000a34e:	068e                	slli	a3,a3,0x3
    8000a350:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a352:	8f75                	and	a4,a4,a3
    8000a354:	00e78463          	beq	a5,a4,8000a35c <tinst_tests_pf+0x214c>
    8000a358:	993fe06f          	j	80008cea <tinst_tests_pf+0xada>
    8000a35c:	9a3fe06f          	j	80008cfe <tinst_tests_pf+0xaee>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    8000a360:	701c                	ld	a5,32(s0)
    8000a362:	e399                	bnez	a5,8000a368 <tinst_tests_pf+0x2158>
    8000a364:	a4ffe06f          	j	80008db2 <tinst_tests_pf+0xba2>
    8000a368:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a36a:	0016f713          	andi	a4,a3,1
    8000a36e:	18071763          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a372:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a376:	460d                	li	a2,3
    8000a378:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a37c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a37e:	00c59763          	bne	a1,a2,8000a38c <tinst_tests_pf+0x217c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a382:	0026d683          	lhu	a3,2(a3)
    8000a386:	0106969b          	slliw	a3,a3,0x10
    8000a38a:	8f55                	or	a4,a4,a3
    8000a38c:	1ffe16b7          	lui	a3,0x1ffe1
    8000a390:	068e                	slli	a3,a3,0x3
    8000a392:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a394:	8f75                	and	a4,a4,a3
    8000a396:	00e78463          	beq	a5,a4,8000a39e <tinst_tests_pf+0x218e>
    8000a39a:	a05fe06f          	j	80008d9e <tinst_tests_pf+0xb8e>
    8000a39e:	a15fe06f          	j	80008db2 <tinst_tests_pf+0xba2>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000a3a2:	7004                	ld	s1,32(s0)
    8000a3a4:	780494e3          	bnez	s1,8000b32c <tinst_tests_pf+0x311c>
    8000a3a8:	0001e597          	auipc	a1,0x1e
    8000a3ac:	97858593          	addi	a1,a1,-1672 # 80027d20 <__func__.0+0x2c0>
    8000a3b0:	e68fe06f          	j	80008a18 <tinst_tests_pf+0x808>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    8000a3b4:	701c                	ld	a5,32(s0)
    8000a3b6:	e399                	bnez	a5,8000a3bc <tinst_tests_pf+0x21ac>
    8000a3b8:	aadfe06f          	j	80008e64 <tinst_tests_pf+0xc54>
    8000a3bc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a3be:	0016f713          	andi	a4,a3,1
    8000a3c2:	12071d63          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a3c6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a3ca:	460d                	li	a2,3
    8000a3cc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a3d0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a3d2:	00c59763          	bne	a1,a2,8000a3e0 <tinst_tests_pf+0x21d0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a3d6:	0026d683          	lhu	a3,2(a3)
    8000a3da:	0106969b          	slliw	a3,a3,0x10
    8000a3de:	8f55                	or	a4,a4,a3
    8000a3e0:	1ffe16b7          	lui	a3,0x1ffe1
    8000a3e4:	068e                	slli	a3,a3,0x3
    8000a3e6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a3e8:	8f75                	and	a4,a4,a3
    8000a3ea:	00e78463          	beq	a5,a4,8000a3f2 <tinst_tests_pf+0x21e2>
    8000a3ee:	a63fe06f          	j	80008e50 <tinst_tests_pf+0xc40>
    8000a3f2:	a73fe06f          	j	80008e64 <tinst_tests_pf+0xc54>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    8000a3f6:	02043983          	ld	s3,32(s0)
    8000a3fa:	74099fe3          	bnez	s3,8000b358 <tinst_tests_pf+0x3148>
    8000a3fe:	0001e597          	auipc	a1,0x1e
    8000a402:	92258593          	addi	a1,a1,-1758 # 80027d20 <__func__.0+0x2c0>
    8000a406:	eb8fe06f          	j	80008abe <tinst_tests_pf+0x8ae>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000a40a:	02043983          	ld	s3,32(s0)
    8000a40e:	7a099ce3          	bnez	s3,8000b3c6 <tinst_tests_pf+0x31b6>
    8000a412:	0001e597          	auipc	a1,0x1e
    8000a416:	90e58593          	addi	a1,a1,-1778 # 80027d20 <__func__.0+0x2c0>
    8000a41a:	f4afe06f          	j	80008b64 <tinst_tests_pf+0x954>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000a41e:	7004                	ld	s1,32(s0)
    8000a420:	c099                	beqz	s1,8000a426 <tinst_tests_pf+0x2216>
    8000a422:	0160106f          	j	8000b438 <tinst_tests_pf+0x3228>
    8000a426:	0001e597          	auipc	a1,0x1e
    8000a42a:	8fa58593          	addi	a1,a1,-1798 # 80027d20 <__func__.0+0x2c0>
    8000a42e:	fe4fe06f          	j	80008c12 <tinst_tests_pf+0xa02>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    8000a432:	7018                	ld	a4,32(s0)
    8000a434:	e319                	bnez	a4,8000a43a <tinst_tests_pf+0x222a>
    8000a436:	f6bfd06f          	j	800083a0 <tinst_tests_pf+0x190>
    8000a43a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a43c:	0016f793          	andi	a5,a3,1
    8000a440:	efd5                	bnez	a5,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a442:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a446:	460d                	li	a2,3
    8000a448:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000a44c:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a44e:	00c59763          	bne	a1,a2,8000a45c <tinst_tests_pf+0x224c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a452:	0026d683          	lhu	a3,2(a3)
    8000a456:	0106969b          	slliw	a3,a3,0x10
    8000a45a:	8fd5                	or	a5,a5,a3
    8000a45c:	03179913          	slli	s2,a5,0x31
    8000a460:	03195913          	srli	s2,s2,0x31
    8000a464:	40e90933          	sub	s2,s2,a4
    8000a468:	00193913          	seqz	s2,s2
    8000a46c:	f35fd06f          	j	800083a0 <tinst_tests_pf+0x190>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    8000a470:	7018                	ld	a4,32(s0)
    8000a472:	e319                	bnez	a4,8000a478 <tinst_tests_pf+0x2268>
    8000a474:	fdffd06f          	j	80008452 <tinst_tests_pf+0x242>
    8000a478:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a47a:	0016f793          	andi	a5,a3,1
    8000a47e:	efbd                	bnez	a5,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a480:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a484:	460d                	li	a2,3
    8000a486:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000a48a:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a48c:	00c59763          	bne	a1,a2,8000a49a <tinst_tests_pf+0x228a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a490:	0026d683          	lhu	a3,2(a3)
    8000a494:	0106969b          	slliw	a3,a3,0x10
    8000a498:	8fd5                	or	a5,a5,a3
    8000a49a:	03179913          	slli	s2,a5,0x31
    8000a49e:	03195913          	srli	s2,s2,0x31
    8000a4a2:	40e90933          	sub	s2,s2,a4
    8000a4a6:	00193913          	seqz	s2,s2
    8000a4aa:	fa9fd06f          	j	80008452 <tinst_tests_pf+0x242>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    8000a4ae:	7018                	ld	a4,32(s0)
    8000a4b0:	e319                	bnez	a4,8000a4b6 <tinst_tests_pf+0x22a6>
    8000a4b2:	852fe06f          	j	80008504 <tinst_tests_pf+0x2f4>
    8000a4b6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a4b8:	0016f793          	andi	a5,a3,1
    8000a4bc:	e3a1                	bnez	a5,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a4be:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a4c2:	460d                	li	a2,3
    8000a4c4:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000a4c8:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a4ca:	00c59763          	bne	a1,a2,8000a4d8 <tinst_tests_pf+0x22c8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a4ce:	0026d683          	lhu	a3,2(a3)
    8000a4d2:	0106969b          	slliw	a3,a3,0x10
    8000a4d6:	8fd5                	or	a5,a5,a3
    8000a4d8:	17c6                	slli	a5,a5,0x31
    8000a4da:	0317d913          	srli	s2,a5,0x31
    8000a4de:	40e90933          	sub	s2,s2,a4
    8000a4e2:	00193913          	seqz	s2,s2
    8000a4e6:	81efe06f          	j	80008504 <tinst_tests_pf+0x2f4>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    8000a4ea:	701c                	ld	a5,32(s0)
    8000a4ec:	e399                	bnez	a5,8000a4f2 <tinst_tests_pf+0x22e2>
    8000a4ee:	f43fd06f          	j	80008430 <tinst_tests_pf+0x220>
    8000a4f2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a4f4:	0016f713          	andi	a4,a3,1
    8000a4f8:	3e070fe3          	beqz	a4,8000b0f6 <tinst_tests_pf+0x2ee6>
        ERROR("trying to read unaligned instruction (%s, %d)", __func__, __LINE__);
    8000a4fc:	11400613          	li	a2,276
    8000a500:	0001c597          	auipc	a1,0x1c
    8000a504:	2f858593          	addi	a1,a1,760 # 800267f8 <__func__.1>
    8000a508:	0001f517          	auipc	a0,0x1f
    8000a50c:	1d050513          	addi	a0,a0,464 # 800296d8 <__func__.0+0x1c78>
    8000a510:	7e61b0ef          	jal	80025cf6 <printf>
    8000a514:	11400613          	li	a2,276
    8000a518:	0001c597          	auipc	a1,0x1c
    8000a51c:	2e058593          	addi	a1,a1,736 # 800267f8 <__func__.1>
    8000a520:	0001e517          	auipc	a0,0x1e
    8000a524:	9a850513          	addi	a0,a0,-1624 # 80027ec8 <__func__.0+0x468>
    8000a528:	7ce1b0ef          	jal	80025cf6 <printf>
    8000a52c:	4501                	li	a0,0
    8000a52e:	4861b0ef          	jal	800259b4 <exit>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    8000a532:	701c                	ld	a5,32(s0)
    8000a534:	0001d597          	auipc	a1,0x1d
    8000a538:	7ec58593          	addi	a1,a1,2028 # 80027d20 <__func__.0+0x2c0>
    8000a53c:	e399                	bnez	a5,8000a542 <tinst_tests_pf+0x2332>
    8000a53e:	a49fe06f          	j	80008f86 <tinst_tests_pf+0xd76>
    8000a542:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a544:	0016f713          	andi	a4,a3,1
    8000a548:	fb55                	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a54a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a54e:	460d                	li	a2,3
    8000a550:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a554:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a556:	00c59763          	bne	a1,a2,8000a564 <tinst_tests_pf+0x2354>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a55a:	0026d683          	lhu	a3,2(a3)
    8000a55e:	0106969b          	slliw	a3,a3,0x10
    8000a562:	8f55                	or	a4,a4,a3
    8000a564:	1ffe16b7          	lui	a3,0x1ffe1
    8000a568:	068e                	slli	a3,a3,0x3
    8000a56a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a56c:	8f75                	and	a4,a4,a3
    8000a56e:	0001d597          	auipc	a1,0x1d
    8000a572:	7b258593          	addi	a1,a1,1970 # 80027d20 <__func__.0+0x2c0>
    8000a576:	00e79463          	bne	a5,a4,8000a57e <tinst_tests_pf+0x236e>
    8000a57a:	a0dfe06f          	j	80008f86 <tinst_tests_pf+0xd76>
    8000a57e:	0001d597          	auipc	a1,0x1d
    8000a582:	7b258593          	addi	a1,a1,1970 # 80027d30 <__func__.0+0x2d0>
    8000a586:	a01fe06f          	j	80008f86 <tinst_tests_pf+0xd76>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    8000a58a:	701c                	ld	a5,32(s0)
    8000a58c:	e399                	bnez	a5,8000a592 <tinst_tests_pf+0x2382>
    8000a58e:	f55fd06f          	j	800084e2 <tinst_tests_pf+0x2d2>
    8000a592:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a594:	0016f713          	andi	a4,a3,1
    8000a598:	f335                	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a59a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a59e:	460d                	li	a2,3
    8000a5a0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a5a4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a5a6:	00c59763          	bne	a1,a2,8000a5b4 <tinst_tests_pf+0x23a4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a5aa:	0026d683          	lhu	a3,2(a3)
    8000a5ae:	0106969b          	slliw	a3,a3,0x10
    8000a5b2:	8f55                	or	a4,a4,a3
    8000a5b4:	1746                	slli	a4,a4,0x31
    8000a5b6:	9345                	srli	a4,a4,0x31
    8000a5b8:	00e78463          	beq	a5,a4,8000a5c0 <tinst_tests_pf+0x23b0>
    8000a5bc:	f13fd06f          	j	800084ce <tinst_tests_pf+0x2be>
    8000a5c0:	f23fd06f          	j	800084e2 <tinst_tests_pf+0x2d2>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    8000a5c4:	701c                	ld	a5,32(s0)
    8000a5c6:	0001d597          	auipc	a1,0x1d
    8000a5ca:	75a58593          	addi	a1,a1,1882 # 80027d20 <__func__.0+0x2c0>
    8000a5ce:	e399                	bnez	a5,8000a5d4 <tinst_tests_pf+0x23c4>
    8000a5d0:	a69fe06f          	j	80009038 <tinst_tests_pf+0xe28>
    8000a5d4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a5d6:	0016f713          	andi	a4,a3,1
    8000a5da:	f30d                	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a5dc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a5e0:	460d                	li	a2,3
    8000a5e2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a5e6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a5e8:	00c59763          	bne	a1,a2,8000a5f6 <tinst_tests_pf+0x23e6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a5ec:	0026d683          	lhu	a3,2(a3)
    8000a5f0:	0106969b          	slliw	a3,a3,0x10
    8000a5f4:	8f55                	or	a4,a4,a3
    8000a5f6:	1ffe16b7          	lui	a3,0x1ffe1
    8000a5fa:	068e                	slli	a3,a3,0x3
    8000a5fc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a5fe:	8f75                	and	a4,a4,a3
    8000a600:	0001d597          	auipc	a1,0x1d
    8000a604:	72058593          	addi	a1,a1,1824 # 80027d20 <__func__.0+0x2c0>
    8000a608:	00e79463          	bne	a5,a4,8000a610 <tinst_tests_pf+0x2400>
    8000a60c:	a2dfe06f          	j	80009038 <tinst_tests_pf+0xe28>
    8000a610:	0001d597          	auipc	a1,0x1d
    8000a614:	72058593          	addi	a1,a1,1824 # 80027d30 <__func__.0+0x2d0>
    8000a618:	a21fe06f          	j	80009038 <tinst_tests_pf+0xe28>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    8000a61c:	701c                	ld	a5,32(s0)
    8000a61e:	e399                	bnez	a5,8000a624 <tinst_tests_pf+0x2414>
    8000a620:	f75fd06f          	j	80008594 <tinst_tests_pf+0x384>
    8000a624:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a626:	0016f713          	andi	a4,a3,1
    8000a62a:	ec0719e3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a62e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a632:	460d                	li	a2,3
    8000a634:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a638:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a63a:	00c59763          	bne	a1,a2,8000a648 <tinst_tests_pf+0x2438>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a63e:	0026d683          	lhu	a3,2(a3)
    8000a642:	0106969b          	slliw	a3,a3,0x10
    8000a646:	8f55                	or	a4,a4,a3
    8000a648:	1746                	slli	a4,a4,0x31
    8000a64a:	9345                	srli	a4,a4,0x31
    8000a64c:	00e78463          	beq	a5,a4,8000a654 <tinst_tests_pf+0x2444>
    8000a650:	f31fd06f          	j	80008580 <tinst_tests_pf+0x370>
    8000a654:	f41fd06f          	j	80008594 <tinst_tests_pf+0x384>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    8000a658:	701c                	ld	a5,32(s0)
    8000a65a:	0001d597          	auipc	a1,0x1d
    8000a65e:	6c658593          	addi	a1,a1,1734 # 80027d20 <__func__.0+0x2c0>
    8000a662:	e399                	bnez	a5,8000a668 <tinst_tests_pf+0x2458>
    8000a664:	a87fe06f          	j	800090ea <tinst_tests_pf+0xeda>
    8000a668:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a66a:	0016f713          	andi	a4,a3,1
    8000a66e:	e80717e3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a672:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a676:	460d                	li	a2,3
    8000a678:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a67c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a67e:	00c59763          	bne	a1,a2,8000a68c <tinst_tests_pf+0x247c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a682:	0026d683          	lhu	a3,2(a3)
    8000a686:	0106969b          	slliw	a3,a3,0x10
    8000a68a:	8f55                	or	a4,a4,a3
    8000a68c:	1ffe16b7          	lui	a3,0x1ffe1
    8000a690:	068e                	slli	a3,a3,0x3
    8000a692:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a694:	8f75                	and	a4,a4,a3
    8000a696:	0001d597          	auipc	a1,0x1d
    8000a69a:	68a58593          	addi	a1,a1,1674 # 80027d20 <__func__.0+0x2c0>
    8000a69e:	00e79463          	bne	a5,a4,8000a6a6 <tinst_tests_pf+0x2496>
    8000a6a2:	a49fe06f          	j	800090ea <tinst_tests_pf+0xeda>
    8000a6a6:	0001d597          	auipc	a1,0x1d
    8000a6aa:	68a58593          	addi	a1,a1,1674 # 80027d30 <__func__.0+0x2d0>
    8000a6ae:	a3dfe06f          	j	800090ea <tinst_tests_pf+0xeda>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    8000a6b2:	701c                	ld	a5,32(s0)
    8000a6b4:	e399                	bnez	a5,8000a6ba <tinst_tests_pf+0x24aa>
    8000a6b6:	f89fd06f          	j	8000863e <tinst_tests_pf+0x42e>
    8000a6ba:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a6bc:	0016f713          	andi	a4,a3,1
    8000a6c0:	e2071ee3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a6c4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a6c8:	460d                	li	a2,3
    8000a6ca:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a6ce:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a6d0:	00c59763          	bne	a1,a2,8000a6de <tinst_tests_pf+0x24ce>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a6d4:	0026d683          	lhu	a3,2(a3)
    8000a6d8:	0106969b          	slliw	a3,a3,0x10
    8000a6dc:	8f55                	or	a4,a4,a3
    8000a6de:	1746                	slli	a4,a4,0x31
    8000a6e0:	9345                	srli	a4,a4,0x31
    8000a6e2:	00e78463          	beq	a5,a4,8000a6ea <tinst_tests_pf+0x24da>
    8000a6e6:	f45fd06f          	j	8000862a <tinst_tests_pf+0x41a>
    8000a6ea:	f55fd06f          	j	8000863e <tinst_tests_pf+0x42e>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    8000a6ee:	701c                	ld	a5,32(s0)
    8000a6f0:	0001d597          	auipc	a1,0x1d
    8000a6f4:	63058593          	addi	a1,a1,1584 # 80027d20 <__func__.0+0x2c0>
    8000a6f8:	e399                	bnez	a5,8000a6fe <tinst_tests_pf+0x24ee>
    8000a6fa:	aa3fe06f          	j	8000919c <tinst_tests_pf+0xf8c>
    8000a6fe:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a700:	0016f713          	andi	a4,a3,1
    8000a704:	de071ce3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a708:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a70c:	460d                	li	a2,3
    8000a70e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a712:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a714:	00c59763          	bne	a1,a2,8000a722 <tinst_tests_pf+0x2512>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a718:	0026d683          	lhu	a3,2(a3)
    8000a71c:	0106969b          	slliw	a3,a3,0x10
    8000a720:	8f55                	or	a4,a4,a3
    8000a722:	1ffe16b7          	lui	a3,0x1ffe1
    8000a726:	068e                	slli	a3,a3,0x3
    8000a728:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a72a:	8f75                	and	a4,a4,a3
    8000a72c:	0001d597          	auipc	a1,0x1d
    8000a730:	5f458593          	addi	a1,a1,1524 # 80027d20 <__func__.0+0x2c0>
    8000a734:	00e79463          	bne	a5,a4,8000a73c <tinst_tests_pf+0x252c>
    8000a738:	a65fe06f          	j	8000919c <tinst_tests_pf+0xf8c>
    8000a73c:	0001d597          	auipc	a1,0x1d
    8000a740:	5f458593          	addi	a1,a1,1524 # 80027d30 <__func__.0+0x2d0>
    8000a744:	a59fe06f          	j	8000919c <tinst_tests_pf+0xf8c>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    8000a748:	701c                	ld	a5,32(s0)
    8000a74a:	e399                	bnez	a5,8000a750 <tinst_tests_pf+0x2540>
    8000a74c:	f9dfd06f          	j	800086e8 <tinst_tests_pf+0x4d8>
    8000a750:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a752:	0016f713          	andi	a4,a3,1
    8000a756:	da0713e3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a75a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a75e:	460d                	li	a2,3
    8000a760:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a764:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a766:	00c59763          	bne	a1,a2,8000a774 <tinst_tests_pf+0x2564>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a76a:	0026d683          	lhu	a3,2(a3)
    8000a76e:	0106969b          	slliw	a3,a3,0x10
    8000a772:	8f55                	or	a4,a4,a3
    8000a774:	1746                	slli	a4,a4,0x31
    8000a776:	9345                	srli	a4,a4,0x31
    8000a778:	00e78463          	beq	a5,a4,8000a780 <tinst_tests_pf+0x2570>
    8000a77c:	f59fd06f          	j	800086d4 <tinst_tests_pf+0x4c4>
    8000a780:	f69fd06f          	j	800086e8 <tinst_tests_pf+0x4d8>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    8000a784:	701c                	ld	a5,32(s0)
    8000a786:	0001d597          	auipc	a1,0x1d
    8000a78a:	59a58593          	addi	a1,a1,1434 # 80027d20 <__func__.0+0x2c0>
    8000a78e:	e399                	bnez	a5,8000a794 <tinst_tests_pf+0x2584>
    8000a790:	abffe06f          	j	8000924e <tinst_tests_pf+0x103e>
    8000a794:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a796:	0016f713          	andi	a4,a3,1
    8000a79a:	d60711e3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a79e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a7a2:	460d                	li	a2,3
    8000a7a4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a7a8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a7aa:	00c59763          	bne	a1,a2,8000a7b8 <tinst_tests_pf+0x25a8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a7ae:	0026d683          	lhu	a3,2(a3)
    8000a7b2:	0106969b          	slliw	a3,a3,0x10
    8000a7b6:	8f55                	or	a4,a4,a3
    8000a7b8:	1ffe16b7          	lui	a3,0x1ffe1
    8000a7bc:	068e                	slli	a3,a3,0x3
    8000a7be:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a7c0:	8f75                	and	a4,a4,a3
    8000a7c2:	0001d597          	auipc	a1,0x1d
    8000a7c6:	55e58593          	addi	a1,a1,1374 # 80027d20 <__func__.0+0x2c0>
    8000a7ca:	00e79463          	bne	a5,a4,8000a7d2 <tinst_tests_pf+0x25c2>
    8000a7ce:	a81fe06f          	j	8000924e <tinst_tests_pf+0x103e>
    8000a7d2:	0001d597          	auipc	a1,0x1d
    8000a7d6:	55e58593          	addi	a1,a1,1374 # 80027d30 <__func__.0+0x2d0>
    8000a7da:	a75fe06f          	j	8000924e <tinst_tests_pf+0x103e>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    8000a7de:	701c                	ld	a5,32(s0)
    8000a7e0:	e399                	bnez	a5,8000a7e6 <tinst_tests_pf+0x25d6>
    8000a7e2:	fb3fd06f          	j	80008794 <tinst_tests_pf+0x584>
    8000a7e6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a7e8:	0016f713          	andi	a4,a3,1
    8000a7ec:	d00718e3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a7f0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a7f4:	460d                	li	a2,3
    8000a7f6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a7fa:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a7fc:	00c59763          	bne	a1,a2,8000a80a <tinst_tests_pf+0x25fa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a800:	0026d683          	lhu	a3,2(a3)
    8000a804:	0106969b          	slliw	a3,a3,0x10
    8000a808:	8f55                	or	a4,a4,a3
    8000a80a:	01f076b7          	lui	a3,0x1f07
    8000a80e:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a812:	8f75                	and	a4,a4,a3
    8000a814:	00e78463          	beq	a5,a4,8000a81c <tinst_tests_pf+0x260c>
    8000a818:	f69fd06f          	j	80008780 <tinst_tests_pf+0x570>
    8000a81c:	f79fd06f          	j	80008794 <tinst_tests_pf+0x584>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    8000a820:	701c                	ld	a5,32(s0)
    8000a822:	0001d597          	auipc	a1,0x1d
    8000a826:	4fe58593          	addi	a1,a1,1278 # 80027d20 <__func__.0+0x2c0>
    8000a82a:	e399                	bnez	a5,8000a830 <tinst_tests_pf+0x2620>
    8000a82c:	ad5fe06f          	j	80009300 <tinst_tests_pf+0x10f0>
    8000a830:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a832:	0016f713          	andi	a4,a3,1
    8000a836:	cc0713e3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a83a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a83e:	460d                	li	a2,3
    8000a840:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a844:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a846:	00c59763          	bne	a1,a2,8000a854 <tinst_tests_pf+0x2644>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a84a:	0026d683          	lhu	a3,2(a3)
    8000a84e:	0106969b          	slliw	a3,a3,0x10
    8000a852:	8f55                	or	a4,a4,a3
    8000a854:	1ffe16b7          	lui	a3,0x1ffe1
    8000a858:	068e                	slli	a3,a3,0x3
    8000a85a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a85c:	8f75                	and	a4,a4,a3
    8000a85e:	0001d597          	auipc	a1,0x1d
    8000a862:	4c258593          	addi	a1,a1,1218 # 80027d20 <__func__.0+0x2c0>
    8000a866:	00e79463          	bne	a5,a4,8000a86e <tinst_tests_pf+0x265e>
    8000a86a:	a97fe06f          	j	80009300 <tinst_tests_pf+0x10f0>
    8000a86e:	0001d597          	auipc	a1,0x1d
    8000a872:	4c258593          	addi	a1,a1,1218 # 80027d30 <__func__.0+0x2d0>
    8000a876:	a8bfe06f          	j	80009300 <tinst_tests_pf+0x10f0>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    8000a87a:	701c                	ld	a5,32(s0)
    8000a87c:	e399                	bnez	a5,8000a882 <tinst_tests_pf+0x2672>
    8000a87e:	fc7fd06f          	j	80008844 <tinst_tests_pf+0x634>
    8000a882:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a884:	0016f713          	andi	a4,a3,1
    8000a888:	c6071ae3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a88c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a890:	460d                	li	a2,3
    8000a892:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a896:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a898:	00c59763          	bne	a1,a2,8000a8a6 <tinst_tests_pf+0x2696>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a89c:	0026d683          	lhu	a3,2(a3)
    8000a8a0:	0106969b          	slliw	a3,a3,0x10
    8000a8a4:	8f55                	or	a4,a4,a3
    8000a8a6:	01f076b7          	lui	a3,0x1f07
    8000a8aa:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a8ae:	8f75                	and	a4,a4,a3
    8000a8b0:	00e78463          	beq	a5,a4,8000a8b8 <tinst_tests_pf+0x26a8>
    8000a8b4:	f7dfd06f          	j	80008830 <tinst_tests_pf+0x620>
    8000a8b8:	f8dfd06f          	j	80008844 <tinst_tests_pf+0x634>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000a8bc:	701c                	ld	a5,32(s0)
    8000a8be:	0001d597          	auipc	a1,0x1d
    8000a8c2:	46258593          	addi	a1,a1,1122 # 80027d20 <__func__.0+0x2c0>
    8000a8c6:	e399                	bnez	a5,8000a8cc <tinst_tests_pf+0x26bc>
    8000a8c8:	aeffe06f          	j	800093b6 <tinst_tests_pf+0x11a6>
    8000a8cc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a8ce:	0016f713          	andi	a4,a3,1
    8000a8d2:	c20715e3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a8d6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a8da:	460d                	li	a2,3
    8000a8dc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a8e0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a8e2:	00c59763          	bne	a1,a2,8000a8f0 <tinst_tests_pf+0x26e0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a8e6:	0026d683          	lhu	a3,2(a3)
    8000a8ea:	0106969b          	slliw	a3,a3,0x10
    8000a8ee:	8f55                	or	a4,a4,a3
    8000a8f0:	1ffe16b7          	lui	a3,0x1ffe1
    8000a8f4:	068e                	slli	a3,a3,0x3
    8000a8f6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a8f8:	8f75                	and	a4,a4,a3
    8000a8fa:	0001d597          	auipc	a1,0x1d
    8000a8fe:	42658593          	addi	a1,a1,1062 # 80027d20 <__func__.0+0x2c0>
    8000a902:	00e79463          	bne	a5,a4,8000a90a <tinst_tests_pf+0x26fa>
    8000a906:	ab1fe06f          	j	800093b6 <tinst_tests_pf+0x11a6>
    8000a90a:	0001d597          	auipc	a1,0x1d
    8000a90e:	42658593          	addi	a1,a1,1062 # 80027d30 <__func__.0+0x2d0>
    8000a912:	aa5fe06f          	j	800093b6 <tinst_tests_pf+0x11a6>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    8000a916:	701c                	ld	a5,32(s0)
    8000a918:	e399                	bnez	a5,8000a91e <tinst_tests_pf+0x270e>
    8000a91a:	fddfd06f          	j	800088f6 <tinst_tests_pf+0x6e6>
    8000a91e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a920:	0016f713          	andi	a4,a3,1
    8000a924:	bc071ce3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a928:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a92c:	460d                	li	a2,3
    8000a92e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a932:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a934:	00c59763          	bne	a1,a2,8000a942 <tinst_tests_pf+0x2732>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a938:	0026d683          	lhu	a3,2(a3)
    8000a93c:	0106969b          	slliw	a3,a3,0x10
    8000a940:	8f55                	or	a4,a4,a3
    8000a942:	01f076b7          	lui	a3,0x1f07
    8000a946:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a94a:	8f75                	and	a4,a4,a3
    8000a94c:	00e78463          	beq	a5,a4,8000a954 <tinst_tests_pf+0x2744>
    8000a950:	f93fd06f          	j	800088e2 <tinst_tests_pf+0x6d2>
    8000a954:	fa3fd06f          	j	800088f6 <tinst_tests_pf+0x6e6>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000a958:	701c                	ld	a5,32(s0)
    8000a95a:	0001d597          	auipc	a1,0x1d
    8000a95e:	3c658593          	addi	a1,a1,966 # 80027d20 <__func__.0+0x2c0>
    8000a962:	e399                	bnez	a5,8000a968 <tinst_tests_pf+0x2758>
    8000a964:	b05fe06f          	j	80009468 <tinst_tests_pf+0x1258>
    8000a968:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a96a:	0016f713          	andi	a4,a3,1
    8000a96e:	b80717e3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a972:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a976:	460d                	li	a2,3
    8000a978:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a97c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a97e:	00c59763          	bne	a1,a2,8000a98c <tinst_tests_pf+0x277c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a982:	0026d683          	lhu	a3,2(a3)
    8000a986:	0106969b          	slliw	a3,a3,0x10
    8000a98a:	8f55                	or	a4,a4,a3
    8000a98c:	1ffe16b7          	lui	a3,0x1ffe1
    8000a990:	068e                	slli	a3,a3,0x3
    8000a992:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a994:	8f75                	and	a4,a4,a3
    8000a996:	0001d597          	auipc	a1,0x1d
    8000a99a:	38a58593          	addi	a1,a1,906 # 80027d20 <__func__.0+0x2c0>
    8000a99e:	00e79463          	bne	a5,a4,8000a9a6 <tinst_tests_pf+0x2796>
    8000a9a2:	ac7fe06f          	j	80009468 <tinst_tests_pf+0x1258>
    8000a9a6:	0001d597          	auipc	a1,0x1d
    8000a9aa:	38a58593          	addi	a1,a1,906 # 80027d30 <__func__.0+0x2d0>
    8000a9ae:	abbfe06f          	j	80009468 <tinst_tests_pf+0x1258>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    8000a9b2:	701c                	ld	a5,32(s0)
    8000a9b4:	e399                	bnez	a5,8000a9ba <tinst_tests_pf+0x27aa>
    8000a9b6:	ff5fd06f          	j	800089aa <tinst_tests_pf+0x79a>
    8000a9ba:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a9bc:	0016f713          	andi	a4,a3,1
    8000a9c0:	b2071ee3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a9c4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a9c8:	460d                	li	a2,3
    8000a9ca:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a9ce:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a9d0:	00c59763          	bne	a1,a2,8000a9de <tinst_tests_pf+0x27ce>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a9d4:	0026d683          	lhu	a3,2(a3)
    8000a9d8:	0106969b          	slliw	a3,a3,0x10
    8000a9dc:	8f55                	or	a4,a4,a3
    8000a9de:	01f076b7          	lui	a3,0x1f07
    8000a9e2:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a9e6:	8f75                	and	a4,a4,a3
    8000a9e8:	00e78463          	beq	a5,a4,8000a9f0 <tinst_tests_pf+0x27e0>
    8000a9ec:	fabfd06f          	j	80008996 <tinst_tests_pf+0x786>
    8000a9f0:	fbbfd06f          	j	800089aa <tinst_tests_pf+0x79a>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000a9f4:	701c                	ld	a5,32(s0)
    8000a9f6:	0001d597          	auipc	a1,0x1d
    8000a9fa:	32a58593          	addi	a1,a1,810 # 80027d20 <__func__.0+0x2c0>
    8000a9fe:	e399                	bnez	a5,8000aa04 <tinst_tests_pf+0x27f4>
    8000aa00:	b1bfe06f          	j	8000951a <tinst_tests_pf+0x130a>
    8000aa04:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aa06:	0016f713          	andi	a4,a3,1
    8000aa0a:	ae0719e3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000aa0e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aa12:	460d                	li	a2,3
    8000aa14:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aa18:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aa1a:	00c59763          	bne	a1,a2,8000aa28 <tinst_tests_pf+0x2818>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aa1e:	0026d683          	lhu	a3,2(a3)
    8000aa22:	0106969b          	slliw	a3,a3,0x10
    8000aa26:	8f55                	or	a4,a4,a3
    8000aa28:	1ffe16b7          	lui	a3,0x1ffe1
    8000aa2c:	068e                	slli	a3,a3,0x3
    8000aa2e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aa30:	8f75                	and	a4,a4,a3
    8000aa32:	0001d597          	auipc	a1,0x1d
    8000aa36:	2ee58593          	addi	a1,a1,750 # 80027d20 <__func__.0+0x2c0>
    8000aa3a:	00e79463          	bne	a5,a4,8000aa42 <tinst_tests_pf+0x2832>
    8000aa3e:	addfe06f          	j	8000951a <tinst_tests_pf+0x130a>
    8000aa42:	0001d597          	auipc	a1,0x1d
    8000aa46:	2ee58593          	addi	a1,a1,750 # 80027d30 <__func__.0+0x2d0>
    8000aa4a:	ad1fe06f          	j	8000951a <tinst_tests_pf+0x130a>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000aa4e:	7004                	ld	s1,32(s0)
    8000aa50:	e099                	bnez	s1,8000aa56 <tinst_tests_pf+0x2846>
    8000aa52:	ffdfd06f          	j	80008a4e <tinst_tests_pf+0x83e>
    8000aa56:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000aa58:	0017f713          	andi	a4,a5,1
    8000aa5c:	aa0710e3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000aa60:	0007d503          	lhu	a0,0(a5)
    8000aa64:	965f60ef          	jal	800013c8 <expand_compressed_instruction>
    8000aa68:	67a1                	lui	a5,0x8
    8000aa6a:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000aa6c:	8d7d                	and	a0,a0,a5
    8000aa6e:	00a48463          	beq	s1,a0,8000aa76 <tinst_tests_pf+0x2866>
    8000aa72:	fc9fd06f          	j	80008a3a <tinst_tests_pf+0x82a>
    8000aa76:	fd9fd06f          	j	80008a4e <tinst_tests_pf+0x83e>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000aa7a:	701c                	ld	a5,32(s0)
    8000aa7c:	0001d597          	auipc	a1,0x1d
    8000aa80:	2a458593          	addi	a1,a1,676 # 80027d20 <__func__.0+0x2c0>
    8000aa84:	e399                	bnez	a5,8000aa8a <tinst_tests_pf+0x287a>
    8000aa86:	b47fe06f          	j	800095cc <tinst_tests_pf+0x13bc>
    8000aa8a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aa8c:	0016f713          	andi	a4,a3,1
    8000aa90:	a60716e3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000aa94:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aa98:	460d                	li	a2,3
    8000aa9a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aa9e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aaa0:	00c59763          	bne	a1,a2,8000aaae <tinst_tests_pf+0x289e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aaa4:	0026d683          	lhu	a3,2(a3)
    8000aaa8:	0106969b          	slliw	a3,a3,0x10
    8000aaac:	8f55                	or	a4,a4,a3
    8000aaae:	1ffe16b7          	lui	a3,0x1ffe1
    8000aab2:	068e                	slli	a3,a3,0x3
    8000aab4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aab6:	8f75                	and	a4,a4,a3
    8000aab8:	0001d597          	auipc	a1,0x1d
    8000aabc:	26858593          	addi	a1,a1,616 # 80027d20 <__func__.0+0x2c0>
    8000aac0:	00e79463          	bne	a5,a4,8000aac8 <tinst_tests_pf+0x28b8>
    8000aac4:	b09fe06f          	j	800095cc <tinst_tests_pf+0x13bc>
    8000aac8:	0001d597          	auipc	a1,0x1d
    8000aacc:	26858593          	addi	a1,a1,616 # 80027d30 <__func__.0+0x2d0>
    8000aad0:	afdfe06f          	j	800095cc <tinst_tests_pf+0x13bc>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    8000aad4:	02043983          	ld	s3,32(s0)
    8000aad8:	00099463          	bnez	s3,8000aae0 <tinst_tests_pf+0x28d0>
    8000aadc:	818fe06f          	j	80008af4 <tinst_tests_pf+0x8e4>
    8000aae0:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000aae2:	0017f713          	andi	a4,a5,1
    8000aae6:	a0071be3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000aaea:	0007d503          	lhu	a0,0(a5)
    8000aaee:	8dbf60ef          	jal	800013c8 <expand_compressed_instruction>
    8000aaf2:	67a1                	lui	a5,0x8
    8000aaf4:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000aaf6:	8d7d                	and	a0,a0,a5
    8000aaf8:	00a98463          	beq	s3,a0,8000ab00 <tinst_tests_pf+0x28f0>
    8000aafc:	fe5fd06f          	j	80008ae0 <tinst_tests_pf+0x8d0>
    8000ab00:	ff5fd06f          	j	80008af4 <tinst_tests_pf+0x8e4>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    8000ab04:	701c                	ld	a5,32(s0)
    8000ab06:	0001d597          	auipc	a1,0x1d
    8000ab0a:	21a58593          	addi	a1,a1,538 # 80027d20 <__func__.0+0x2c0>
    8000ab0e:	e399                	bnez	a5,8000ab14 <tinst_tests_pf+0x2904>
    8000ab10:	b6ffe06f          	j	8000967e <tinst_tests_pf+0x146e>
    8000ab14:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ab16:	0016f713          	andi	a4,a3,1
    8000ab1a:	9e0711e3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000ab1e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ab22:	460d                	li	a2,3
    8000ab24:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ab28:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ab2a:	00c59763          	bne	a1,a2,8000ab38 <tinst_tests_pf+0x2928>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ab2e:	0026d683          	lhu	a3,2(a3)
    8000ab32:	0106969b          	slliw	a3,a3,0x10
    8000ab36:	8f55                	or	a4,a4,a3
    8000ab38:	1ffe16b7          	lui	a3,0x1ffe1
    8000ab3c:	068e                	slli	a3,a3,0x3
    8000ab3e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ab40:	8f75                	and	a4,a4,a3
    8000ab42:	0001d597          	auipc	a1,0x1d
    8000ab46:	1de58593          	addi	a1,a1,478 # 80027d20 <__func__.0+0x2c0>
    8000ab4a:	00e79463          	bne	a5,a4,8000ab52 <tinst_tests_pf+0x2942>
    8000ab4e:	b31fe06f          	j	8000967e <tinst_tests_pf+0x146e>
    8000ab52:	0001d597          	auipc	a1,0x1d
    8000ab56:	1de58593          	addi	a1,a1,478 # 80027d30 <__func__.0+0x2d0>
    8000ab5a:	b25fe06f          	j	8000967e <tinst_tests_pf+0x146e>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000ab5e:	02043983          	ld	s3,32(s0)
    8000ab62:	00099463          	bnez	s3,8000ab6a <tinst_tests_pf+0x295a>
    8000ab66:	834fe06f          	j	80008b9a <tinst_tests_pf+0x98a>
    8000ab6a:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000ab6c:	0017f713          	andi	a4,a5,1
    8000ab70:	980716e3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000ab74:	0007d503          	lhu	a0,0(a5)
    8000ab78:	851f60ef          	jal	800013c8 <expand_compressed_instruction>
    8000ab7c:	01f077b7          	lui	a5,0x1f07
    8000ab80:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000ab84:	8d7d                	and	a0,a0,a5
    8000ab86:	00a98463          	beq	s3,a0,8000ab8e <tinst_tests_pf+0x297e>
    8000ab8a:	ffdfd06f          	j	80008b86 <tinst_tests_pf+0x976>
    8000ab8e:	80cfe06f          	j	80008b9a <tinst_tests_pf+0x98a>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000ab92:	701c                	ld	a5,32(s0)
    8000ab94:	0001d597          	auipc	a1,0x1d
    8000ab98:	18c58593          	addi	a1,a1,396 # 80027d20 <__func__.0+0x2c0>
    8000ab9c:	e399                	bnez	a5,8000aba2 <tinst_tests_pf+0x2992>
    8000ab9e:	b93fe06f          	j	80009730 <tinst_tests_pf+0x1520>
    8000aba2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aba4:	0016f713          	andi	a4,a3,1
    8000aba8:	94071ae3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000abac:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000abb0:	460d                	li	a2,3
    8000abb2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000abb6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000abb8:	00c59763          	bne	a1,a2,8000abc6 <tinst_tests_pf+0x29b6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000abbc:	0026d683          	lhu	a3,2(a3)
    8000abc0:	0106969b          	slliw	a3,a3,0x10
    8000abc4:	8f55                	or	a4,a4,a3
    8000abc6:	1ffe16b7          	lui	a3,0x1ffe1
    8000abca:	068e                	slli	a3,a3,0x3
    8000abcc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000abce:	8f75                	and	a4,a4,a3
    8000abd0:	0001d597          	auipc	a1,0x1d
    8000abd4:	15058593          	addi	a1,a1,336 # 80027d20 <__func__.0+0x2c0>
    8000abd8:	00e79463          	bne	a5,a4,8000abe0 <tinst_tests_pf+0x29d0>
    8000abdc:	b55fe06f          	j	80009730 <tinst_tests_pf+0x1520>
    8000abe0:	0001d597          	auipc	a1,0x1d
    8000abe4:	15058593          	addi	a1,a1,336 # 80027d30 <__func__.0+0x2d0>
    8000abe8:	b49fe06f          	j	80009730 <tinst_tests_pf+0x1520>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000abec:	7004                	ld	s1,32(s0)
    8000abee:	e099                	bnez	s1,8000abf4 <tinst_tests_pf+0x29e4>
    8000abf0:	858fe06f          	j	80008c48 <tinst_tests_pf+0xa38>
    8000abf4:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000abf6:	0017f713          	andi	a4,a5,1
    8000abfa:	900711e3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000abfe:	0007d503          	lhu	a0,0(a5)
    8000ac02:	fc6f60ef          	jal	800013c8 <expand_compressed_instruction>
    8000ac06:	01f077b7          	lui	a5,0x1f07
    8000ac0a:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000ac0e:	8d7d                	and	a0,a0,a5
    8000ac10:	00a48463          	beq	s1,a0,8000ac18 <tinst_tests_pf+0x2a08>
    8000ac14:	820fe06f          	j	80008c34 <tinst_tests_pf+0xa24>
    8000ac18:	830fe06f          	j	80008c48 <tinst_tests_pf+0xa38>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000ac1c:	701c                	ld	a5,32(s0)
    8000ac1e:	0001d597          	auipc	a1,0x1d
    8000ac22:	10258593          	addi	a1,a1,258 # 80027d20 <__func__.0+0x2c0>
    8000ac26:	e399                	bnez	a5,8000ac2c <tinst_tests_pf+0x2a1c>
    8000ac28:	bb3fe06f          	j	800097da <tinst_tests_pf+0x15ca>
    8000ac2c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ac2e:	0016f713          	andi	a4,a3,1
    8000ac32:	8c0715e3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000ac36:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ac3a:	460d                	li	a2,3
    8000ac3c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ac40:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ac42:	00c59763          	bne	a1,a2,8000ac50 <tinst_tests_pf+0x2a40>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ac46:	0026d683          	lhu	a3,2(a3)
    8000ac4a:	0106969b          	slliw	a3,a3,0x10
    8000ac4e:	8f55                	or	a4,a4,a3
    8000ac50:	1ffe16b7          	lui	a3,0x1ffe1
    8000ac54:	068e                	slli	a3,a3,0x3
    8000ac56:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ac58:	8f75                	and	a4,a4,a3
    8000ac5a:	0001d597          	auipc	a1,0x1d
    8000ac5e:	0c658593          	addi	a1,a1,198 # 80027d20 <__func__.0+0x2c0>
    8000ac62:	00e79463          	bne	a5,a4,8000ac6a <tinst_tests_pf+0x2a5a>
    8000ac66:	b75fe06f          	j	800097da <tinst_tests_pf+0x15ca>
    8000ac6a:	0001d597          	auipc	a1,0x1d
    8000ac6e:	0c658593          	addi	a1,a1,198 # 80027d30 <__func__.0+0x2d0>
    8000ac72:	b69fe06f          	j	800097da <tinst_tests_pf+0x15ca>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000ac76:	701c                	ld	a5,32(s0)
    8000ac78:	0001d597          	auipc	a1,0x1d
    8000ac7c:	0a858593          	addi	a1,a1,168 # 80027d20 <__func__.0+0x2c0>
    8000ac80:	e399                	bnez	a5,8000ac86 <tinst_tests_pf+0x2a76>
    8000ac82:	c03fe06f          	j	80009884 <tinst_tests_pf+0x1674>
    8000ac86:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ac88:	0016f713          	andi	a4,a3,1
    8000ac8c:	860718e3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000ac90:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ac94:	460d                	li	a2,3
    8000ac96:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ac9a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ac9c:	00c59763          	bne	a1,a2,8000acaa <tinst_tests_pf+0x2a9a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aca0:	0026d683          	lhu	a3,2(a3)
    8000aca4:	0106969b          	slliw	a3,a3,0x10
    8000aca8:	8f55                	or	a4,a4,a3
    8000acaa:	1ffe16b7          	lui	a3,0x1ffe1
    8000acae:	068e                	slli	a3,a3,0x3
    8000acb0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000acb2:	8f75                	and	a4,a4,a3
    8000acb4:	0001d597          	auipc	a1,0x1d
    8000acb8:	06c58593          	addi	a1,a1,108 # 80027d20 <__func__.0+0x2c0>
    8000acbc:	00e79463          	bne	a5,a4,8000acc4 <tinst_tests_pf+0x2ab4>
    8000acc0:	bc5fe06f          	j	80009884 <tinst_tests_pf+0x1674>
    8000acc4:	0001d597          	auipc	a1,0x1d
    8000acc8:	06c58593          	addi	a1,a1,108 # 80027d30 <__func__.0+0x2d0>
    8000accc:	bb9fe06f          	j	80009884 <tinst_tests_pf+0x1674>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000acd0:	701c                	ld	a5,32(s0)
    8000acd2:	0001d597          	auipc	a1,0x1d
    8000acd6:	04e58593          	addi	a1,a1,78 # 80027d20 <__func__.0+0x2c0>
    8000acda:	e399                	bnez	a5,8000ace0 <tinst_tests_pf+0x2ad0>
    8000acdc:	c53fe06f          	j	8000992e <tinst_tests_pf+0x171e>
    8000ace0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ace2:	0016f713          	andi	a4,a3,1
    8000ace6:	80071be3          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000acea:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000acee:	460d                	li	a2,3
    8000acf0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000acf4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000acf6:	00c59763          	bne	a1,a2,8000ad04 <tinst_tests_pf+0x2af4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000acfa:	0026d683          	lhu	a3,2(a3)
    8000acfe:	0106969b          	slliw	a3,a3,0x10
    8000ad02:	8f55                	or	a4,a4,a3
    8000ad04:	1ffe16b7          	lui	a3,0x1ffe1
    8000ad08:	068e                	slli	a3,a3,0x3
    8000ad0a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ad0c:	8f75                	and	a4,a4,a3
    8000ad0e:	0001d597          	auipc	a1,0x1d
    8000ad12:	01258593          	addi	a1,a1,18 # 80027d20 <__func__.0+0x2c0>
    8000ad16:	00e79463          	bne	a5,a4,8000ad1e <tinst_tests_pf+0x2b0e>
    8000ad1a:	c15fe06f          	j	8000992e <tinst_tests_pf+0x171e>
    8000ad1e:	0001d597          	auipc	a1,0x1d
    8000ad22:	01258593          	addi	a1,a1,18 # 80027d30 <__func__.0+0x2d0>
    8000ad26:	c09fe06f          	j	8000992e <tinst_tests_pf+0x171e>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    8000ad2a:	701c                	ld	a5,32(s0)
    8000ad2c:	0001d597          	auipc	a1,0x1d
    8000ad30:	ff458593          	addi	a1,a1,-12 # 80027d20 <__func__.0+0x2c0>
    8000ad34:	e399                	bnez	a5,8000ad3a <tinst_tests_pf+0x2b2a>
    8000ad36:	ca3fe06f          	j	800099d8 <tinst_tests_pf+0x17c8>
    8000ad3a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ad3c:	0016f713          	andi	a4,a3,1
    8000ad40:	fa071e63          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000ad44:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ad48:	460d                	li	a2,3
    8000ad4a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ad4e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ad50:	00c59763          	bne	a1,a2,8000ad5e <tinst_tests_pf+0x2b4e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ad54:	0026d683          	lhu	a3,2(a3)
    8000ad58:	0106969b          	slliw	a3,a3,0x10
    8000ad5c:	8f55                	or	a4,a4,a3
    8000ad5e:	1ffe16b7          	lui	a3,0x1ffe1
    8000ad62:	068e                	slli	a3,a3,0x3
    8000ad64:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ad66:	8f75                	and	a4,a4,a3
    8000ad68:	0001d597          	auipc	a1,0x1d
    8000ad6c:	fb858593          	addi	a1,a1,-72 # 80027d20 <__func__.0+0x2c0>
    8000ad70:	00e79463          	bne	a5,a4,8000ad78 <tinst_tests_pf+0x2b68>
    8000ad74:	c65fe06f          	j	800099d8 <tinst_tests_pf+0x17c8>
    8000ad78:	0001d597          	auipc	a1,0x1d
    8000ad7c:	fb858593          	addi	a1,a1,-72 # 80027d30 <__func__.0+0x2d0>
    8000ad80:	c59fe06f          	j	800099d8 <tinst_tests_pf+0x17c8>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    8000ad84:	701c                	ld	a5,32(s0)
    8000ad86:	e399                	bnez	a5,8000ad8c <tinst_tests_pf+0x2b7c>
    8000ad88:	982fe06f          	j	80008f0a <tinst_tests_pf+0xcfa>
    8000ad8c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ad8e:	0016f713          	andi	a4,a3,1
    8000ad92:	f6071563          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000ad96:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ad9a:	460d                	li	a2,3
    8000ad9c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ada0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ada2:	00c59763          	bne	a1,a2,8000adb0 <tinst_tests_pf+0x2ba0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ada6:	0026d683          	lhu	a3,2(a3)
    8000adaa:	0106969b          	slliw	a3,a3,0x10
    8000adae:	8f55                	or	a4,a4,a3
    8000adb0:	1ffe16b7          	lui	a3,0x1ffe1
    8000adb4:	068e                	slli	a3,a3,0x3
    8000adb6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000adb8:	8f75                	and	a4,a4,a3
    8000adba:	00e78463          	beq	a5,a4,8000adc2 <tinst_tests_pf+0x2bb2>
    8000adbe:	938fe06f          	j	80008ef6 <tinst_tests_pf+0xce6>
    8000adc2:	948fe06f          	j	80008f0a <tinst_tests_pf+0xcfa>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    8000adc6:	701c                	ld	a5,32(s0)
    8000adc8:	e399                	bnez	a5,8000adce <tinst_tests_pf+0x2bbe>
    8000adca:	9f2fe06f          	j	80008fbc <tinst_tests_pf+0xdac>
    8000adce:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000add0:	0016f713          	andi	a4,a3,1
    8000add4:	f2071463          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000add8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000addc:	460d                	li	a2,3
    8000adde:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ade2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ade4:	00c59763          	bne	a1,a2,8000adf2 <tinst_tests_pf+0x2be2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ade8:	0026d683          	lhu	a3,2(a3)
    8000adec:	0106969b          	slliw	a3,a3,0x10
    8000adf0:	8f55                	or	a4,a4,a3
    8000adf2:	1ffe16b7          	lui	a3,0x1ffe1
    8000adf6:	068e                	slli	a3,a3,0x3
    8000adf8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000adfa:	8f75                	and	a4,a4,a3
    8000adfc:	00e78463          	beq	a5,a4,8000ae04 <tinst_tests_pf+0x2bf4>
    8000ae00:	9a8fe06f          	j	80008fa8 <tinst_tests_pf+0xd98>
    8000ae04:	9b8fe06f          	j	80008fbc <tinst_tests_pf+0xdac>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    8000ae08:	701c                	ld	a5,32(s0)
    8000ae0a:	e399                	bnez	a5,8000ae10 <tinst_tests_pf+0x2c00>
    8000ae0c:	a62fe06f          	j	8000906e <tinst_tests_pf+0xe5e>
    8000ae10:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ae12:	0016f713          	andi	a4,a3,1
    8000ae16:	ee071363          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000ae1a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ae1e:	460d                	li	a2,3
    8000ae20:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ae24:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ae26:	00c59763          	bne	a1,a2,8000ae34 <tinst_tests_pf+0x2c24>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ae2a:	0026d683          	lhu	a3,2(a3)
    8000ae2e:	0106969b          	slliw	a3,a3,0x10
    8000ae32:	8f55                	or	a4,a4,a3
    8000ae34:	1ffe16b7          	lui	a3,0x1ffe1
    8000ae38:	068e                	slli	a3,a3,0x3
    8000ae3a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ae3c:	8f75                	and	a4,a4,a3
    8000ae3e:	00e78463          	beq	a5,a4,8000ae46 <tinst_tests_pf+0x2c36>
    8000ae42:	a18fe06f          	j	8000905a <tinst_tests_pf+0xe4a>
    8000ae46:	a28fe06f          	j	8000906e <tinst_tests_pf+0xe5e>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    8000ae4a:	701c                	ld	a5,32(s0)
    8000ae4c:	e399                	bnez	a5,8000ae52 <tinst_tests_pf+0x2c42>
    8000ae4e:	ad2fe06f          	j	80009120 <tinst_tests_pf+0xf10>
    8000ae52:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ae54:	0016f713          	andi	a4,a3,1
    8000ae58:	ea071263          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000ae5c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ae60:	460d                	li	a2,3
    8000ae62:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ae66:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ae68:	00c59763          	bne	a1,a2,8000ae76 <tinst_tests_pf+0x2c66>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ae6c:	0026d683          	lhu	a3,2(a3)
    8000ae70:	0106969b          	slliw	a3,a3,0x10
    8000ae74:	8f55                	or	a4,a4,a3
    8000ae76:	1ffe16b7          	lui	a3,0x1ffe1
    8000ae7a:	068e                	slli	a3,a3,0x3
    8000ae7c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ae7e:	8f75                	and	a4,a4,a3
    8000ae80:	00e78463          	beq	a5,a4,8000ae88 <tinst_tests_pf+0x2c78>
    8000ae84:	a88fe06f          	j	8000910c <tinst_tests_pf+0xefc>
    8000ae88:	a98fe06f          	j	80009120 <tinst_tests_pf+0xf10>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    8000ae8c:	701c                	ld	a5,32(s0)
    8000ae8e:	e399                	bnez	a5,8000ae94 <tinst_tests_pf+0x2c84>
    8000ae90:	b42fe06f          	j	800091d2 <tinst_tests_pf+0xfc2>
    8000ae94:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ae96:	0016f713          	andi	a4,a3,1
    8000ae9a:	e6071163          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000ae9e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aea2:	460d                	li	a2,3
    8000aea4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aea8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aeaa:	00c59763          	bne	a1,a2,8000aeb8 <tinst_tests_pf+0x2ca8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aeae:	0026d683          	lhu	a3,2(a3)
    8000aeb2:	0106969b          	slliw	a3,a3,0x10
    8000aeb6:	8f55                	or	a4,a4,a3
    8000aeb8:	1ffe16b7          	lui	a3,0x1ffe1
    8000aebc:	068e                	slli	a3,a3,0x3
    8000aebe:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aec0:	8f75                	and	a4,a4,a3
    8000aec2:	00e78463          	beq	a5,a4,8000aeca <tinst_tests_pf+0x2cba>
    8000aec6:	af8fe06f          	j	800091be <tinst_tests_pf+0xfae>
    8000aeca:	b08fe06f          	j	800091d2 <tinst_tests_pf+0xfc2>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    8000aece:	701c                	ld	a5,32(s0)
    8000aed0:	e399                	bnez	a5,8000aed6 <tinst_tests_pf+0x2cc6>
    8000aed2:	bb2fe06f          	j	80009284 <tinst_tests_pf+0x1074>
    8000aed6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aed8:	0016f713          	andi	a4,a3,1
    8000aedc:	e2071063          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000aee0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aee4:	460d                	li	a2,3
    8000aee6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aeea:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aeec:	00c59763          	bne	a1,a2,8000aefa <tinst_tests_pf+0x2cea>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aef0:	0026d683          	lhu	a3,2(a3)
    8000aef4:	0106969b          	slliw	a3,a3,0x10
    8000aef8:	8f55                	or	a4,a4,a3
    8000aefa:	1ffe16b7          	lui	a3,0x1ffe1
    8000aefe:	068e                	slli	a3,a3,0x3
    8000af00:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000af02:	8f75                	and	a4,a4,a3
    8000af04:	00e78463          	beq	a5,a4,8000af0c <tinst_tests_pf+0x2cfc>
    8000af08:	b68fe06f          	j	80009270 <tinst_tests_pf+0x1060>
    8000af0c:	b78fe06f          	j	80009284 <tinst_tests_pf+0x1074>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    8000af10:	701c                	ld	a5,32(s0)
    8000af12:	e399                	bnez	a5,8000af18 <tinst_tests_pf+0x2d08>
    8000af14:	c22fe06f          	j	80009336 <tinst_tests_pf+0x1126>
    8000af18:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000af1a:	0016f713          	andi	a4,a3,1
    8000af1e:	dc071f63          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000af22:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000af26:	460d                	li	a2,3
    8000af28:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000af2c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000af2e:	00c59763          	bne	a1,a2,8000af3c <tinst_tests_pf+0x2d2c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000af32:	0026d683          	lhu	a3,2(a3)
    8000af36:	0106969b          	slliw	a3,a3,0x10
    8000af3a:	8f55                	or	a4,a4,a3
    8000af3c:	1ffe16b7          	lui	a3,0x1ffe1
    8000af40:	068e                	slli	a3,a3,0x3
    8000af42:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000af44:	8f75                	and	a4,a4,a3
    8000af46:	00e78463          	beq	a5,a4,8000af4e <tinst_tests_pf+0x2d3e>
    8000af4a:	bd8fe06f          	j	80009322 <tinst_tests_pf+0x1112>
    8000af4e:	be8fe06f          	j	80009336 <tinst_tests_pf+0x1126>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000af52:	701c                	ld	a5,32(s0)
    8000af54:	e399                	bnez	a5,8000af5a <tinst_tests_pf+0x2d4a>
    8000af56:	c96fe06f          	j	800093ec <tinst_tests_pf+0x11dc>
    8000af5a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000af5c:	0016f713          	andi	a4,a3,1
    8000af60:	d8071e63          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000af64:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000af68:	460d                	li	a2,3
    8000af6a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000af6e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000af70:	00c59763          	bne	a1,a2,8000af7e <tinst_tests_pf+0x2d6e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000af74:	0026d683          	lhu	a3,2(a3)
    8000af78:	0106969b          	slliw	a3,a3,0x10
    8000af7c:	8f55                	or	a4,a4,a3
    8000af7e:	1ffe16b7          	lui	a3,0x1ffe1
    8000af82:	068e                	slli	a3,a3,0x3
    8000af84:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000af86:	8f75                	and	a4,a4,a3
    8000af88:	00e78463          	beq	a5,a4,8000af90 <tinst_tests_pf+0x2d80>
    8000af8c:	c4cfe06f          	j	800093d8 <tinst_tests_pf+0x11c8>
    8000af90:	c5cfe06f          	j	800093ec <tinst_tests_pf+0x11dc>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000af94:	701c                	ld	a5,32(s0)
    8000af96:	e399                	bnez	a5,8000af9c <tinst_tests_pf+0x2d8c>
    8000af98:	d06fe06f          	j	8000949e <tinst_tests_pf+0x128e>
    8000af9c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000af9e:	0016f713          	andi	a4,a3,1
    8000afa2:	d4071d63          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000afa6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000afaa:	460d                	li	a2,3
    8000afac:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000afb0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000afb2:	00c59763          	bne	a1,a2,8000afc0 <tinst_tests_pf+0x2db0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000afb6:	0026d683          	lhu	a3,2(a3)
    8000afba:	0106969b          	slliw	a3,a3,0x10
    8000afbe:	8f55                	or	a4,a4,a3
    8000afc0:	1ffe16b7          	lui	a3,0x1ffe1
    8000afc4:	068e                	slli	a3,a3,0x3
    8000afc6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000afc8:	8f75                	and	a4,a4,a3
    8000afca:	00e78463          	beq	a5,a4,8000afd2 <tinst_tests_pf+0x2dc2>
    8000afce:	cbcfe06f          	j	8000948a <tinst_tests_pf+0x127a>
    8000afd2:	cccfe06f          	j	8000949e <tinst_tests_pf+0x128e>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000afd6:	701c                	ld	a5,32(s0)
    8000afd8:	e399                	bnez	a5,8000afde <tinst_tests_pf+0x2dce>
    8000afda:	d76fe06f          	j	80009550 <tinst_tests_pf+0x1340>
    8000afde:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000afe0:	0016f713          	andi	a4,a3,1
    8000afe4:	d0071c63          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000afe8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000afec:	460d                	li	a2,3
    8000afee:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aff2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aff4:	00c59763          	bne	a1,a2,8000b002 <tinst_tests_pf+0x2df2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aff8:	0026d683          	lhu	a3,2(a3)
    8000affc:	0106969b          	slliw	a3,a3,0x10
    8000b000:	8f55                	or	a4,a4,a3
    8000b002:	1ffe16b7          	lui	a3,0x1ffe1
    8000b006:	068e                	slli	a3,a3,0x3
    8000b008:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b00a:	8f75                	and	a4,a4,a3
    8000b00c:	00e78463          	beq	a5,a4,8000b014 <tinst_tests_pf+0x2e04>
    8000b010:	d2cfe06f          	j	8000953c <tinst_tests_pf+0x132c>
    8000b014:	d3cfe06f          	j	80009550 <tinst_tests_pf+0x1340>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000b018:	701c                	ld	a5,32(s0)
    8000b01a:	e399                	bnez	a5,8000b020 <tinst_tests_pf+0x2e10>
    8000b01c:	de6fe06f          	j	80009602 <tinst_tests_pf+0x13f2>
    8000b020:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b022:	0016f713          	andi	a4,a3,1
    8000b026:	cc071b63          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b02a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b02e:	460d                	li	a2,3
    8000b030:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b034:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b036:	00c59763          	bne	a1,a2,8000b044 <tinst_tests_pf+0x2e34>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b03a:	0026d683          	lhu	a3,2(a3)
    8000b03e:	0106969b          	slliw	a3,a3,0x10
    8000b042:	8f55                	or	a4,a4,a3
    8000b044:	1ffe16b7          	lui	a3,0x1ffe1
    8000b048:	068e                	slli	a3,a3,0x3
    8000b04a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b04c:	8f75                	and	a4,a4,a3
    8000b04e:	00e78463          	beq	a5,a4,8000b056 <tinst_tests_pf+0x2e46>
    8000b052:	d9cfe06f          	j	800095ee <tinst_tests_pf+0x13de>
    8000b056:	dacfe06f          	j	80009602 <tinst_tests_pf+0x13f2>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000b05a:	6418                	ld	a4,8(s0)
    8000b05c:	47bd                	li	a5,15
    8000b05e:	00f70463          	beq	a4,a5,8000b066 <tinst_tests_pf+0x2e56>
    8000b062:	f1cfe06f          	j	8000977e <tinst_tests_pf+0x156e>
    8000b066:	701c                	ld	a5,32(s0)
    8000b068:	e399                	bnez	a5,8000b06e <tinst_tests_pf+0x2e5e>
    8000b06a:	f16fe06f          	j	80009780 <tinst_tests_pf+0x1570>
    8000b06e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b070:	0016f713          	andi	a4,a3,1
    8000b074:	c8071463          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b078:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b07c:	460d                	li	a2,3
    8000b07e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b082:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b084:	00c59763          	bne	a1,a2,8000b092 <tinst_tests_pf+0x2e82>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b088:	0026d683          	lhu	a3,2(a3)
    8000b08c:	0106969b          	slliw	a3,a3,0x10
    8000b090:	8f55                	or	a4,a4,a3
    8000b092:	1ffe16b7          	lui	a3,0x1ffe1
    8000b096:	068e                	slli	a3,a3,0x3
    8000b098:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b09a:	8f75                	and	a4,a4,a3
    8000b09c:	40f70933          	sub	s2,a4,a5
    8000b0a0:	00193913          	seqz	s2,s2
    8000b0a4:	edcfe06f          	j	80009780 <tinst_tests_pf+0x1570>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000b0a8:	6418                	ld	a4,8(s0)
    8000b0aa:	47bd                	li	a5,15
    8000b0ac:	00f70463          	beq	a4,a5,8000b0b4 <tinst_tests_pf+0x2ea4>
    8000b0b0:	f78fe06f          	j	80009828 <tinst_tests_pf+0x1618>
    8000b0b4:	701c                	ld	a5,32(s0)
    8000b0b6:	e399                	bnez	a5,8000b0bc <tinst_tests_pf+0x2eac>
    8000b0b8:	f72fe06f          	j	8000982a <tinst_tests_pf+0x161a>
    8000b0bc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b0be:	0016f713          	andi	a4,a3,1
    8000b0c2:	c2071d63          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b0c6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b0ca:	460d                	li	a2,3
    8000b0cc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b0d0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b0d2:	00c59763          	bne	a1,a2,8000b0e0 <tinst_tests_pf+0x2ed0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b0d6:	0026d683          	lhu	a3,2(a3)
    8000b0da:	0106969b          	slliw	a3,a3,0x10
    8000b0de:	8f55                	or	a4,a4,a3
    8000b0e0:	1ffe16b7          	lui	a3,0x1ffe1
    8000b0e4:	068e                	slli	a3,a3,0x3
    8000b0e6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b0e8:	8f75                	and	a4,a4,a3
    8000b0ea:	40f70933          	sub	s2,a4,a5
    8000b0ee:	00193913          	seqz	s2,s2
    8000b0f2:	f38fe06f          	j	8000982a <tinst_tests_pf+0x161a>
    instruction = *((uint16_t*)addr);
    8000b0f6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b0fa:	460d                	li	a2,3
    8000b0fc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b100:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b102:	00c59763          	bne	a1,a2,8000b110 <tinst_tests_pf+0x2f00>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b106:	0026d683          	lhu	a3,2(a3)
    8000b10a:	0106969b          	slliw	a3,a3,0x10
    8000b10e:	8f55                	or	a4,a4,a3
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    8000b110:	1746                	slli	a4,a4,0x31
    8000b112:	9345                	srli	a4,a4,0x31
    8000b114:	00e78463          	beq	a5,a4,8000b11c <tinst_tests_pf+0x2f0c>
    8000b118:	b04fd06f          	j	8000841c <tinst_tests_pf+0x20c>
    8000b11c:	b14fd06f          	j	80008430 <tinst_tests_pf+0x220>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000b120:	6418                	ld	a4,8(s0)
    8000b122:	47bd                	li	a5,15
    8000b124:	00f70463          	beq	a4,a5,8000b12c <tinst_tests_pf+0x2f1c>
    8000b128:	faafe06f          	j	800098d2 <tinst_tests_pf+0x16c2>
    8000b12c:	701c                	ld	a5,32(s0)
    8000b12e:	e399                	bnez	a5,8000b134 <tinst_tests_pf+0x2f24>
    8000b130:	fa4fe06f          	j	800098d4 <tinst_tests_pf+0x16c4>
    8000b134:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b136:	0016f713          	andi	a4,a3,1
    8000b13a:	bc071163          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b13e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b142:	460d                	li	a2,3
    8000b144:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b148:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b14a:	00c59763          	bne	a1,a2,8000b158 <tinst_tests_pf+0x2f48>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b14e:	0026d683          	lhu	a3,2(a3)
    8000b152:	0106969b          	slliw	a3,a3,0x10
    8000b156:	8f55                	or	a4,a4,a3
    8000b158:	1ffe16b7          	lui	a3,0x1ffe1
    8000b15c:	068e                	slli	a3,a3,0x3
    8000b15e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b160:	8f75                	and	a4,a4,a3
    8000b162:	40f70933          	sub	s2,a4,a5
    8000b166:	00193913          	seqz	s2,s2
    8000b16a:	f6afe06f          	j	800098d4 <tinst_tests_pf+0x16c4>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000b16e:	6418                	ld	a4,8(s0)
    8000b170:	47bd                	li	a5,15
    8000b172:	00f70463          	beq	a4,a5,8000b17a <tinst_tests_pf+0x2f6a>
    8000b176:	807fe06f          	j	8000997c <tinst_tests_pf+0x176c>
    8000b17a:	701c                	ld	a5,32(s0)
    8000b17c:	e399                	bnez	a5,8000b182 <tinst_tests_pf+0x2f72>
    8000b17e:	801fe06f          	j	8000997e <tinst_tests_pf+0x176e>
    8000b182:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b184:	0016f713          	andi	a4,a3,1
    8000b188:	b6071a63          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b18c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b190:	460d                	li	a2,3
    8000b192:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b196:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b198:	00c59763          	bne	a1,a2,8000b1a6 <tinst_tests_pf+0x2f96>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b19c:	0026d683          	lhu	a3,2(a3)
    8000b1a0:	0106969b          	slliw	a3,a3,0x10
    8000b1a4:	8f55                	or	a4,a4,a3
    8000b1a6:	1ffe16b7          	lui	a3,0x1ffe1
    8000b1aa:	068e                	slli	a3,a3,0x3
    8000b1ac:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b1ae:	8f75                	and	a4,a4,a3
    8000b1b0:	40f70933          	sub	s2,a4,a5
    8000b1b4:	00193913          	seqz	s2,s2
    8000b1b8:	fc6fe06f          	j	8000997e <tinst_tests_pf+0x176e>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000b1bc:	02043983          	ld	s3,32(s0)
    8000b1c0:	00099463          	bnez	s3,8000b1c8 <tinst_tests_pf+0x2fb8>
    8000b1c4:	9f9fd06f          	j	80008bbc <tinst_tests_pf+0x9ac>
    8000b1c8:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000b1ca:	0017f713          	andi	a4,a5,1
    8000b1ce:	b2071763          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b1d2:	0007d503          	lhu	a0,0(a5)
    8000b1d6:	9f2f60ef          	jal	800013c8 <expand_compressed_instruction>
    8000b1da:	01f077b7          	lui	a5,0x1f07
    8000b1de:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000b1e2:	00f57933          	and	s2,a0,a5
    8000b1e6:	41390933          	sub	s2,s2,s3
    8000b1ea:	00193913          	seqz	s2,s2
    8000b1ee:	9cffd06f          	j	80008bbc <tinst_tests_pf+0x9ac>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000b1f2:	7004                	ld	s1,32(s0)
    8000b1f4:	e099                	bnez	s1,8000b1fa <tinst_tests_pf+0x2fea>
    8000b1f6:	a75fd06f          	j	80008c6a <tinst_tests_pf+0xa5a>
    8000b1fa:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000b1fc:	0017f713          	andi	a4,a5,1
    8000b200:	ae071e63          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b204:	0007d503          	lhu	a0,0(a5)
    8000b208:	9c0f60ef          	jal	800013c8 <expand_compressed_instruction>
    8000b20c:	01f077b7          	lui	a5,0x1f07
    8000b210:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000b214:	00f57933          	and	s2,a0,a5
    8000b218:	40990933          	sub	s2,s2,s1
    8000b21c:	00193913          	seqz	s2,s2
    8000b220:	a4bfd06f          	j	80008c6a <tinst_tests_pf+0xa5a>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    8000b224:	701c                	ld	a5,32(s0)
    8000b226:	e399                	bnez	a5,8000b22c <tinst_tests_pf+0x301c>
    8000b228:	af9fd06f          	j	80008d20 <tinst_tests_pf+0xb10>
    8000b22c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b22e:	0016f713          	andi	a4,a3,1
    8000b232:	ac071563          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b236:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b23a:	460d                	li	a2,3
    8000b23c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b240:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b242:	00c59763          	bne	a1,a2,8000b250 <tinst_tests_pf+0x3040>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b246:	0026d683          	lhu	a3,2(a3)
    8000b24a:	0106969b          	slliw	a3,a3,0x10
    8000b24e:	8f55                	or	a4,a4,a3
    8000b250:	1ffe16b7          	lui	a3,0x1ffe1
    8000b254:	068e                	slli	a3,a3,0x3
    8000b256:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b258:	8f75                	and	a4,a4,a3
    8000b25a:	40f70933          	sub	s2,a4,a5
    8000b25e:	00193913          	seqz	s2,s2
    8000b262:	abffd06f          	j	80008d20 <tinst_tests_pf+0xb10>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    8000b266:	701c                	ld	a5,32(s0)
    8000b268:	e399                	bnez	a5,8000b26e <tinst_tests_pf+0x305e>
    8000b26a:	b6bfd06f          	j	80008dd4 <tinst_tests_pf+0xbc4>
    8000b26e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b270:	0016f713          	andi	a4,a3,1
    8000b274:	a8071463          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b278:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b27c:	460d                	li	a2,3
    8000b27e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b282:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b284:	00c59763          	bne	a1,a2,8000b292 <tinst_tests_pf+0x3082>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b288:	0026d683          	lhu	a3,2(a3)
    8000b28c:	0106969b          	slliw	a3,a3,0x10
    8000b290:	8f55                	or	a4,a4,a3
    8000b292:	1ffe16b7          	lui	a3,0x1ffe1
    8000b296:	068e                	slli	a3,a3,0x3
    8000b298:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b29a:	8f75                	and	a4,a4,a3
    8000b29c:	40f70933          	sub	s2,a4,a5
    8000b2a0:	00193913          	seqz	s2,s2
    8000b2a4:	b31fd06f          	j	80008dd4 <tinst_tests_pf+0xbc4>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    8000b2a8:	701c                	ld	a5,32(s0)
    8000b2aa:	e399                	bnez	a5,8000b2b0 <tinst_tests_pf+0x30a0>
    8000b2ac:	bdbfd06f          	j	80008e86 <tinst_tests_pf+0xc76>
    8000b2b0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b2b2:	0016f713          	andi	a4,a3,1
    8000b2b6:	a4071363          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b2ba:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b2be:	460d                	li	a2,3
    8000b2c0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b2c4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b2c6:	00c59763          	bne	a1,a2,8000b2d4 <tinst_tests_pf+0x30c4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b2ca:	0026d683          	lhu	a3,2(a3)
    8000b2ce:	0106969b          	slliw	a3,a3,0x10
    8000b2d2:	8f55                	or	a4,a4,a3
    8000b2d4:	1ffe16b7          	lui	a3,0x1ffe1
    8000b2d8:	068e                	slli	a3,a3,0x3
    8000b2da:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b2dc:	8f75                	and	a4,a4,a3
    8000b2de:	40f70933          	sub	s2,a4,a5
    8000b2e2:	00193913          	seqz	s2,s2
    8000b2e6:	ba1fd06f          	j	80008e86 <tinst_tests_pf+0xc76>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    8000b2ea:	701c                	ld	a5,32(s0)
    8000b2ec:	e399                	bnez	a5,8000b2f2 <tinst_tests_pf+0x30e2>
    8000b2ee:	c3ffd06f          	j	80008f2c <tinst_tests_pf+0xd1c>
    8000b2f2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b2f4:	0016f713          	andi	a4,a3,1
    8000b2f8:	a0071263          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b2fc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b300:	460d                	li	a2,3
    8000b302:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b306:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b308:	00c59763          	bne	a1,a2,8000b316 <tinst_tests_pf+0x3106>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b30c:	0026d683          	lhu	a3,2(a3)
    8000b310:	0106969b          	slliw	a3,a3,0x10
    8000b314:	8f55                	or	a4,a4,a3
    8000b316:	1ffe16b7          	lui	a3,0x1ffe1
    8000b31a:	068e                	slli	a3,a3,0x3
    8000b31c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b31e:	8f75                	and	a4,a4,a3
    8000b320:	40f70933          	sub	s2,a4,a5
    8000b324:	00193913          	seqz	s2,s2
    8000b328:	c05fd06f          	j	80008f2c <tinst_tests_pf+0xd1c>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000b32c:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000b32e:	0017f713          	andi	a4,a5,1
    8000b332:	9c071563          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b336:	0007d503          	lhu	a0,0(a5)
    8000b33a:	88ef60ef          	jal	800013c8 <expand_compressed_instruction>
    8000b33e:	67a1                	lui	a5,0x8
    8000b340:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000b342:	8d7d                	and	a0,a0,a5
    8000b344:	00a48463          	beq	s1,a0,8000b34c <tinst_tests_pf+0x313c>
    8000b348:	ec8fd06f          	j	80008a10 <tinst_tests_pf+0x800>
    8000b34c:	0001d597          	auipc	a1,0x1d
    8000b350:	9d458593          	addi	a1,a1,-1580 # 80027d20 <__func__.0+0x2c0>
    8000b354:	ec4fd06f          	j	80008a18 <tinst_tests_pf+0x808>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    8000b358:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000b35a:	0017f713          	andi	a4,a5,1
    8000b35e:	98071f63          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b362:	0007d503          	lhu	a0,0(a5)
    8000b366:	862f60ef          	jal	800013c8 <expand_compressed_instruction>
    8000b36a:	67a1                	lui	a5,0x8
    8000b36c:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000b36e:	8d7d                	and	a0,a0,a5
    8000b370:	00a98463          	beq	s3,a0,8000b378 <tinst_tests_pf+0x3168>
    8000b374:	f42fd06f          	j	80008ab6 <tinst_tests_pf+0x8a6>
    8000b378:	0001d597          	auipc	a1,0x1d
    8000b37c:	9a858593          	addi	a1,a1,-1624 # 80027d20 <__func__.0+0x2c0>
    8000b380:	f3efd06f          	j	80008abe <tinst_tests_pf+0x8ae>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    8000b384:	701c                	ld	a5,32(s0)
    8000b386:	e399                	bnez	a5,8000b38c <tinst_tests_pf+0x317c>
    8000b388:	c57fd06f          	j	80008fde <tinst_tests_pf+0xdce>
    8000b38c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b38e:	0016f713          	andi	a4,a3,1
    8000b392:	96071563          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b396:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b39a:	460d                	li	a2,3
    8000b39c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b3a0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b3a2:	00c59763          	bne	a1,a2,8000b3b0 <tinst_tests_pf+0x31a0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b3a6:	0026d683          	lhu	a3,2(a3)
    8000b3aa:	0106969b          	slliw	a3,a3,0x10
    8000b3ae:	8f55                	or	a4,a4,a3
    8000b3b0:	1ffe16b7          	lui	a3,0x1ffe1
    8000b3b4:	068e                	slli	a3,a3,0x3
    8000b3b6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b3b8:	8f75                	and	a4,a4,a3
    8000b3ba:	40f70933          	sub	s2,a4,a5
    8000b3be:	00193913          	seqz	s2,s2
    8000b3c2:	c1dfd06f          	j	80008fde <tinst_tests_pf+0xdce>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000b3c6:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000b3c8:	0017f713          	andi	a4,a5,1
    8000b3cc:	92071863          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b3d0:	0007d503          	lhu	a0,0(a5)
    8000b3d4:	ff5f50ef          	jal	800013c8 <expand_compressed_instruction>
    8000b3d8:	01f077b7          	lui	a5,0x1f07
    8000b3dc:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000b3e0:	8d7d                	and	a0,a0,a5
    8000b3e2:	00a98463          	beq	s3,a0,8000b3ea <tinst_tests_pf+0x31da>
    8000b3e6:	f76fd06f          	j	80008b5c <tinst_tests_pf+0x94c>
    8000b3ea:	0001d597          	auipc	a1,0x1d
    8000b3ee:	93658593          	addi	a1,a1,-1738 # 80027d20 <__func__.0+0x2c0>
    8000b3f2:	f72fd06f          	j	80008b64 <tinst_tests_pf+0x954>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    8000b3f6:	701c                	ld	a5,32(s0)
    8000b3f8:	e399                	bnez	a5,8000b3fe <tinst_tests_pf+0x31ee>
    8000b3fa:	c97fd06f          	j	80009090 <tinst_tests_pf+0xe80>
    8000b3fe:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b400:	0016f713          	andi	a4,a3,1
    8000b404:	8e071c63          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b408:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b40c:	460d                	li	a2,3
    8000b40e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b412:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b414:	00c59763          	bne	a1,a2,8000b422 <tinst_tests_pf+0x3212>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b418:	0026d683          	lhu	a3,2(a3)
    8000b41c:	0106969b          	slliw	a3,a3,0x10
    8000b420:	8f55                	or	a4,a4,a3
    8000b422:	1ffe16b7          	lui	a3,0x1ffe1
    8000b426:	068e                	slli	a3,a3,0x3
    8000b428:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b42a:	8f75                	and	a4,a4,a3
    8000b42c:	40f70933          	sub	s2,a4,a5
    8000b430:	00193913          	seqz	s2,s2
    8000b434:	c5dfd06f          	j	80009090 <tinst_tests_pf+0xe80>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000b438:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000b43a:	0017f713          	andi	a4,a5,1
    8000b43e:	8a071f63          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b442:	0007d503          	lhu	a0,0(a5)
    8000b446:	f83f50ef          	jal	800013c8 <expand_compressed_instruction>
    8000b44a:	01f077b7          	lui	a5,0x1f07
    8000b44e:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000b452:	8d7d                	and	a0,a0,a5
    8000b454:	00a48463          	beq	s1,a0,8000b45c <tinst_tests_pf+0x324c>
    8000b458:	fb2fd06f          	j	80008c0a <tinst_tests_pf+0x9fa>
    8000b45c:	0001d597          	auipc	a1,0x1d
    8000b460:	8c458593          	addi	a1,a1,-1852 # 80027d20 <__func__.0+0x2c0>
    8000b464:	faefd06f          	j	80008c12 <tinst_tests_pf+0xa02>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    8000b468:	701c                	ld	a5,32(s0)
    8000b46a:	e399                	bnez	a5,8000b470 <tinst_tests_pf+0x3260>
    8000b46c:	cd7fd06f          	j	80009142 <tinst_tests_pf+0xf32>
    8000b470:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b472:	0016f713          	andi	a4,a3,1
    8000b476:	88071363          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b47a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b47e:	460d                	li	a2,3
    8000b480:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b484:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b486:	00c59763          	bne	a1,a2,8000b494 <tinst_tests_pf+0x3284>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b48a:	0026d683          	lhu	a3,2(a3)
    8000b48e:	0106969b          	slliw	a3,a3,0x10
    8000b492:	8f55                	or	a4,a4,a3
    8000b494:	1ffe16b7          	lui	a3,0x1ffe1
    8000b498:	068e                	slli	a3,a3,0x3
    8000b49a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b49c:	8f75                	and	a4,a4,a3
    8000b49e:	40f70933          	sub	s2,a4,a5
    8000b4a2:	00193913          	seqz	s2,s2
    8000b4a6:	c9dfd06f          	j	80009142 <tinst_tests_pf+0xf32>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    8000b4aa:	701c                	ld	a5,32(s0)
    8000b4ac:	e399                	bnez	a5,8000b4b2 <tinst_tests_pf+0x32a2>
    8000b4ae:	d47fd06f          	j	800091f4 <tinst_tests_pf+0xfe4>
    8000b4b2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b4b4:	0016f713          	andi	a4,a3,1
    8000b4b8:	84071263          	bnez	a4,8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b4bc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b4c0:	460d                	li	a2,3
    8000b4c2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b4c6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b4c8:	00c59763          	bne	a1,a2,8000b4d6 <tinst_tests_pf+0x32c6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b4cc:	0026d683          	lhu	a3,2(a3)
    8000b4d0:	0106969b          	slliw	a3,a3,0x10
    8000b4d4:	8f55                	or	a4,a4,a3
    8000b4d6:	1ffe16b7          	lui	a3,0x1ffe1
    8000b4da:	068e                	slli	a3,a3,0x3
    8000b4dc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b4de:	8f75                	and	a4,a4,a3
    8000b4e0:	40f70933          	sub	s2,a4,a5
    8000b4e4:	00193913          	seqz	s2,s2
    8000b4e8:	d0dfd06f          	j	800091f4 <tinst_tests_pf+0xfe4>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    8000b4ec:	701c                	ld	a5,32(s0)
    8000b4ee:	e399                	bnez	a5,8000b4f4 <tinst_tests_pf+0x32e4>
    8000b4f0:	db7fd06f          	j	800092a6 <tinst_tests_pf+0x1096>
    8000b4f4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b4f6:	0016f713          	andi	a4,a3,1
    8000b4fa:	c319                	beqz	a4,8000b500 <tinst_tests_pf+0x32f0>
    8000b4fc:	800ff06f          	j	8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b500:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b504:	460d                	li	a2,3
    8000b506:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b50a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b50c:	00c59763          	bne	a1,a2,8000b51a <tinst_tests_pf+0x330a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b510:	0026d683          	lhu	a3,2(a3)
    8000b514:	0106969b          	slliw	a3,a3,0x10
    8000b518:	8f55                	or	a4,a4,a3
    8000b51a:	1ffe16b7          	lui	a3,0x1ffe1
    8000b51e:	068e                	slli	a3,a3,0x3
    8000b520:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b522:	8f75                	and	a4,a4,a3
    8000b524:	40f70933          	sub	s2,a4,a5
    8000b528:	00193913          	seqz	s2,s2
    8000b52c:	d7bfd06f          	j	800092a6 <tinst_tests_pf+0x1096>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    8000b530:	701c                	ld	a5,32(s0)
    8000b532:	e399                	bnez	a5,8000b538 <tinst_tests_pf+0x3328>
    8000b534:	e25fd06f          	j	80009358 <tinst_tests_pf+0x1148>
    8000b538:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b53a:	0016f713          	andi	a4,a3,1
    8000b53e:	c319                	beqz	a4,8000b544 <tinst_tests_pf+0x3334>
    8000b540:	fbdfe06f          	j	8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b544:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b548:	460d                	li	a2,3
    8000b54a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b54e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b550:	00c59763          	bne	a1,a2,8000b55e <tinst_tests_pf+0x334e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b554:	0026d683          	lhu	a3,2(a3)
    8000b558:	0106969b          	slliw	a3,a3,0x10
    8000b55c:	8f55                	or	a4,a4,a3
    8000b55e:	1ffe16b7          	lui	a3,0x1ffe1
    8000b562:	068e                	slli	a3,a3,0x3
    8000b564:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b566:	8f75                	and	a4,a4,a3
    8000b568:	40f70933          	sub	s2,a4,a5
    8000b56c:	00193913          	seqz	s2,s2
    8000b570:	de9fd06f          	j	80009358 <tinst_tests_pf+0x1148>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000b574:	701c                	ld	a5,32(s0)
    8000b576:	e399                	bnez	a5,8000b57c <tinst_tests_pf+0x336c>
    8000b578:	e97fd06f          	j	8000940e <tinst_tests_pf+0x11fe>
    8000b57c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b57e:	0016f713          	andi	a4,a3,1
    8000b582:	c319                	beqz	a4,8000b588 <tinst_tests_pf+0x3378>
    8000b584:	f79fe06f          	j	8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b588:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b58c:	460d                	li	a2,3
    8000b58e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b592:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b594:	00c59763          	bne	a1,a2,8000b5a2 <tinst_tests_pf+0x3392>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b598:	0026d683          	lhu	a3,2(a3)
    8000b59c:	0106969b          	slliw	a3,a3,0x10
    8000b5a0:	8f55                	or	a4,a4,a3
    8000b5a2:	1ffe16b7          	lui	a3,0x1ffe1
    8000b5a6:	068e                	slli	a3,a3,0x3
    8000b5a8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b5aa:	8f75                	and	a4,a4,a3
    8000b5ac:	40f70933          	sub	s2,a4,a5
    8000b5b0:	00193913          	seqz	s2,s2
    8000b5b4:	e5bfd06f          	j	8000940e <tinst_tests_pf+0x11fe>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000b5b8:	701c                	ld	a5,32(s0)
    8000b5ba:	e399                	bnez	a5,8000b5c0 <tinst_tests_pf+0x33b0>
    8000b5bc:	f05fd06f          	j	800094c0 <tinst_tests_pf+0x12b0>
    8000b5c0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b5c2:	0016f713          	andi	a4,a3,1
    8000b5c6:	c319                	beqz	a4,8000b5cc <tinst_tests_pf+0x33bc>
    8000b5c8:	f35fe06f          	j	8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b5cc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b5d0:	460d                	li	a2,3
    8000b5d2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b5d6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b5d8:	00c59763          	bne	a1,a2,8000b5e6 <tinst_tests_pf+0x33d6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b5dc:	0026d683          	lhu	a3,2(a3)
    8000b5e0:	0106969b          	slliw	a3,a3,0x10
    8000b5e4:	8f55                	or	a4,a4,a3
    8000b5e6:	1ffe16b7          	lui	a3,0x1ffe1
    8000b5ea:	068e                	slli	a3,a3,0x3
    8000b5ec:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b5ee:	8f75                	and	a4,a4,a3
    8000b5f0:	40f70933          	sub	s2,a4,a5
    8000b5f4:	00193913          	seqz	s2,s2
    8000b5f8:	ec9fd06f          	j	800094c0 <tinst_tests_pf+0x12b0>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000b5fc:	701c                	ld	a5,32(s0)
    8000b5fe:	e399                	bnez	a5,8000b604 <tinst_tests_pf+0x33f4>
    8000b600:	f73fd06f          	j	80009572 <tinst_tests_pf+0x1362>
    8000b604:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b606:	0016f713          	andi	a4,a3,1
    8000b60a:	c319                	beqz	a4,8000b610 <tinst_tests_pf+0x3400>
    8000b60c:	ef1fe06f          	j	8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b610:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b614:	460d                	li	a2,3
    8000b616:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b61a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b61c:	00c59763          	bne	a1,a2,8000b62a <tinst_tests_pf+0x341a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b620:	0026d683          	lhu	a3,2(a3)
    8000b624:	0106969b          	slliw	a3,a3,0x10
    8000b628:	8f55                	or	a4,a4,a3
    8000b62a:	1ffe16b7          	lui	a3,0x1ffe1
    8000b62e:	068e                	slli	a3,a3,0x3
    8000b630:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b632:	8f75                	and	a4,a4,a3
    8000b634:	40f70933          	sub	s2,a4,a5
    8000b638:	00193913          	seqz	s2,s2
    8000b63c:	f37fd06f          	j	80009572 <tinst_tests_pf+0x1362>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000b640:	701c                	ld	a5,32(s0)
    8000b642:	e399                	bnez	a5,8000b648 <tinst_tests_pf+0x3438>
    8000b644:	fe1fd06f          	j	80009624 <tinst_tests_pf+0x1414>
    8000b648:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b64a:	0016f713          	andi	a4,a3,1
    8000b64e:	c319                	beqz	a4,8000b654 <tinst_tests_pf+0x3444>
    8000b650:	eadfe06f          	j	8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b654:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b658:	460d                	li	a2,3
    8000b65a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b65e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b660:	00c59763          	bne	a1,a2,8000b66e <tinst_tests_pf+0x345e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b664:	0026d683          	lhu	a3,2(a3)
    8000b668:	0106969b          	slliw	a3,a3,0x10
    8000b66c:	8f55                	or	a4,a4,a3
    8000b66e:	1ffe16b7          	lui	a3,0x1ffe1
    8000b672:	068e                	slli	a3,a3,0x3
    8000b674:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b676:	8f75                	and	a4,a4,a3
    8000b678:	40f70933          	sub	s2,a4,a5
    8000b67c:	00193913          	seqz	s2,s2
    8000b680:	fa5fd06f          	j	80009624 <tinst_tests_pf+0x1414>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    8000b684:	701c                	ld	a5,32(s0)
    8000b686:	e399                	bnez	a5,8000b68c <tinst_tests_pf+0x347c>
    8000b688:	84efe06f          	j	800096d6 <tinst_tests_pf+0x14c6>
    8000b68c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b68e:	0016f713          	andi	a4,a3,1
    8000b692:	c319                	beqz	a4,8000b698 <tinst_tests_pf+0x3488>
    8000b694:	e69fe06f          	j	8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b698:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b69c:	460d                	li	a2,3
    8000b69e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b6a2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b6a4:	00c59763          	bne	a1,a2,8000b6b2 <tinst_tests_pf+0x34a2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b6a8:	0026d683          	lhu	a3,2(a3)
    8000b6ac:	0106969b          	slliw	a3,a3,0x10
    8000b6b0:	8f55                	or	a4,a4,a3
    8000b6b2:	1ffe16b7          	lui	a3,0x1ffe1
    8000b6b6:	068e                	slli	a3,a3,0x3
    8000b6b8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b6ba:	8f75                	and	a4,a4,a3
    8000b6bc:	40f70933          	sub	s2,a4,a5
    8000b6c0:	00193913          	seqz	s2,s2
    8000b6c4:	812fe06f          	j	800096d6 <tinst_tests_pf+0x14c6>
    8000b6c8:	701c                	ld	a5,32(s0)
    8000b6ca:	e399                	bnez	a5,8000b6d0 <tinst_tests_pf+0x34c0>
    8000b6cc:	fe9fd06f          	j	800096b4 <tinst_tests_pf+0x14a4>
    8000b6d0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b6d2:	0016f713          	andi	a4,a3,1
    8000b6d6:	c319                	beqz	a4,8000b6dc <tinst_tests_pf+0x34cc>
    8000b6d8:	e25fe06f          	j	8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b6dc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b6e0:	460d                	li	a2,3
    8000b6e2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b6e6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b6e8:	00c59763          	bne	a1,a2,8000b6f6 <tinst_tests_pf+0x34e6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b6ec:	0026d683          	lhu	a3,2(a3)
    8000b6f0:	0106969b          	slliw	a3,a3,0x10
    8000b6f4:	8f55                	or	a4,a4,a3
    8000b6f6:	1ffe16b7          	lui	a3,0x1ffe1
    8000b6fa:	068e                	slli	a3,a3,0x3
    8000b6fc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b6fe:	8f75                	and	a4,a4,a3
    8000b700:	00e78463          	beq	a5,a4,8000b708 <tinst_tests_pf+0x34f8>
    8000b704:	f9dfd06f          	j	800096a0 <tinst_tests_pf+0x1490>
    8000b708:	fadfd06f          	j	800096b4 <tinst_tests_pf+0x14a4>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000b70c:	701c                	ld	a5,32(s0)
    8000b70e:	e399                	bnez	a5,8000b714 <tinst_tests_pf+0x3504>
    8000b710:	856fe06f          	j	80009766 <tinst_tests_pf+0x1556>
    8000b714:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b716:	0016f713          	andi	a4,a3,1
    8000b71a:	c319                	beqz	a4,8000b720 <tinst_tests_pf+0x3510>
    8000b71c:	de1fe06f          	j	8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b720:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b724:	460d                	li	a2,3
    8000b726:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b72a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b72c:	00c59763          	bne	a1,a2,8000b73a <tinst_tests_pf+0x352a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b730:	0026d683          	lhu	a3,2(a3)
    8000b734:	0106969b          	slliw	a3,a3,0x10
    8000b738:	8f55                	or	a4,a4,a3
    8000b73a:	1ffe16b7          	lui	a3,0x1ffe1
    8000b73e:	068e                	slli	a3,a3,0x3
    8000b740:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b742:	8f75                	and	a4,a4,a3
    8000b744:	00e78463          	beq	a5,a4,8000b74c <tinst_tests_pf+0x353c>
    8000b748:	80afe06f          	j	80009752 <tinst_tests_pf+0x1542>
    8000b74c:	81afe06f          	j	80009766 <tinst_tests_pf+0x1556>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000b750:	701c                	ld	a5,32(s0)
    8000b752:	e399                	bnez	a5,8000b758 <tinst_tests_pf+0x3548>
    8000b754:	8bcfe06f          	j	80009810 <tinst_tests_pf+0x1600>
    8000b758:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b75a:	0016f713          	andi	a4,a3,1
    8000b75e:	c319                	beqz	a4,8000b764 <tinst_tests_pf+0x3554>
    8000b760:	d9dfe06f          	j	8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b764:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b768:	460d                	li	a2,3
    8000b76a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b76e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b770:	00c59763          	bne	a1,a2,8000b77e <tinst_tests_pf+0x356e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b774:	0026d683          	lhu	a3,2(a3)
    8000b778:	0106969b          	slliw	a3,a3,0x10
    8000b77c:	8f55                	or	a4,a4,a3
    8000b77e:	1ffe16b7          	lui	a3,0x1ffe1
    8000b782:	068e                	slli	a3,a3,0x3
    8000b784:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b786:	8f75                	and	a4,a4,a3
    8000b788:	00e78463          	beq	a5,a4,8000b790 <tinst_tests_pf+0x3580>
    8000b78c:	870fe06f          	j	800097fc <tinst_tests_pf+0x15ec>
    8000b790:	880fe06f          	j	80009810 <tinst_tests_pf+0x1600>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000b794:	701c                	ld	a5,32(s0)
    8000b796:	e399                	bnez	a5,8000b79c <tinst_tests_pf+0x358c>
    8000b798:	922fe06f          	j	800098ba <tinst_tests_pf+0x16aa>
    8000b79c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b79e:	0016f713          	andi	a4,a3,1
    8000b7a2:	c319                	beqz	a4,8000b7a8 <tinst_tests_pf+0x3598>
    8000b7a4:	d59fe06f          	j	8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b7a8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b7ac:	460d                	li	a2,3
    8000b7ae:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b7b2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b7b4:	00c59763          	bne	a1,a2,8000b7c2 <tinst_tests_pf+0x35b2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b7b8:	0026d683          	lhu	a3,2(a3)
    8000b7bc:	0106969b          	slliw	a3,a3,0x10
    8000b7c0:	8f55                	or	a4,a4,a3
    8000b7c2:	1ffe16b7          	lui	a3,0x1ffe1
    8000b7c6:	068e                	slli	a3,a3,0x3
    8000b7c8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b7ca:	8f75                	and	a4,a4,a3
    8000b7cc:	00e78463          	beq	a5,a4,8000b7d4 <tinst_tests_pf+0x35c4>
    8000b7d0:	8d6fe06f          	j	800098a6 <tinst_tests_pf+0x1696>
    8000b7d4:	8e6fe06f          	j	800098ba <tinst_tests_pf+0x16aa>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000b7d8:	701c                	ld	a5,32(s0)
    8000b7da:	e399                	bnez	a5,8000b7e0 <tinst_tests_pf+0x35d0>
    8000b7dc:	988fe06f          	j	80009964 <tinst_tests_pf+0x1754>
    8000b7e0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b7e2:	0016f713          	andi	a4,a3,1
    8000b7e6:	c319                	beqz	a4,8000b7ec <tinst_tests_pf+0x35dc>
    8000b7e8:	d15fe06f          	j	8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b7ec:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b7f0:	460d                	li	a2,3
    8000b7f2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b7f6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b7f8:	00c59763          	bne	a1,a2,8000b806 <tinst_tests_pf+0x35f6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b7fc:	0026d683          	lhu	a3,2(a3)
    8000b800:	0106969b          	slliw	a3,a3,0x10
    8000b804:	8f55                	or	a4,a4,a3
    8000b806:	1ffe16b7          	lui	a3,0x1ffe1
    8000b80a:	068e                	slli	a3,a3,0x3
    8000b80c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b80e:	8f75                	and	a4,a4,a3
    8000b810:	00e78463          	beq	a5,a4,8000b818 <tinst_tests_pf+0x3608>
    8000b814:	93cfe06f          	j	80009950 <tinst_tests_pf+0x1740>
    8000b818:	94cfe06f          	j	80009964 <tinst_tests_pf+0x1754>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    8000b81c:	701c                	ld	a5,32(s0)
    8000b81e:	e399                	bnez	a5,8000b824 <tinst_tests_pf+0x3614>
    8000b820:	9eefe06f          	j	80009a0e <tinst_tests_pf+0x17fe>
    8000b824:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b826:	0016f713          	andi	a4,a3,1
    8000b82a:	c319                	beqz	a4,8000b830 <tinst_tests_pf+0x3620>
    8000b82c:	cd1fe06f          	j	8000a4fc <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b830:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b834:	460d                	li	a2,3
    8000b836:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b83a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b83c:	00c59763          	bne	a1,a2,8000b84a <tinst_tests_pf+0x363a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b840:	0026d683          	lhu	a3,2(a3)
    8000b844:	0106969b          	slliw	a3,a3,0x10
    8000b848:	8f55                	or	a4,a4,a3
    8000b84a:	1ffe16b7          	lui	a3,0x1ffe1
    8000b84e:	068e                	slli	a3,a3,0x3
    8000b850:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b852:	8f75                	and	a4,a4,a3
    8000b854:	00e78463          	beq	a5,a4,8000b85c <tinst_tests_pf+0x364c>
    8000b858:	9a2fe06f          	j	800099fa <tinst_tests_pf+0x17ea>
    8000b85c:	9b2fe06f          	j	80009a0e <tinst_tests_pf+0x17fe>

000000008000b860 <tinst_tests_gpf>:

bool tinst_tests_gpf(){
    8000b860:	7179                	addi	sp,sp,-48
    
    TEST_START();
    8000b862:	0001b597          	auipc	a1,0x1b
    8000b866:	fae58593          	addi	a1,a1,-82 # 80026810 <__func__.0>
    8000b86a:	0001c517          	auipc	a0,0x1c
    8000b86e:	4d650513          	addi	a0,a0,1238 # 80027d40 <__func__.0+0x2e0>
bool tinst_tests_gpf(){
    8000b872:	f406                	sd	ra,40(sp)
    8000b874:	f022                	sd	s0,32(sp)
    8000b876:	ec26                	sd	s1,24(sp)
    8000b878:	e84a                	sd	s2,16(sp)
    8000b87a:	e44e                	sd	s3,8(sp)
    TEST_START();
    8000b87c:	47a1a0ef          	jal	80025cf6 <printf>
    8000b880:	4529                	li	a0,10
    8000b882:	27e190ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    8000b886:	450d                	li	a0,3
    8000b888:	b6ef50ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8000b88c:	d55f40ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000b890:	f93f40ef          	jal	80000822 <hpt_init>
    vspt_init();
    8000b894:	e1df40ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_VS);   
    8000b898:	4509                	li	a0,2
    8000b89a:	b5cf50ef          	jal	80000bf6 <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSRWX_GI);      
    printf("%llx\n",vaddr_f);
    8000b89e:	001005b7          	lui	a1,0x100
    8000b8a2:	06558593          	addi	a1,a1,101 # 100065 <STACK_SIZE+0x65>
    8000b8a6:	05b2                	slli	a1,a1,0xc
    8000b8a8:	00023517          	auipc	a0,0x23
    8000b8ac:	ad050513          	addi	a0,a0,-1328 # 8002e378 <__func__.0+0x6918>
    8000b8b0:	4461a0ef          	jal	80025cf6 <printf>
    uint64_t value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000b8b4:	0330000f          	fence	rw,rw
    8000b8b8:	0003d417          	auipc	s0,0x3d
    8000b8bc:	75840413          	addi	s0,s0,1880 # 80049010 <excpt>
    8000b8c0:	4785                	li	a5,1
    8000b8c2:	0003d717          	auipc	a4,0x3d
    8000b8c6:	78073323          	sd	zero,1926(a4) # 80049048 <excpt+0x38>
    8000b8ca:	00f41023          	sh	a5,0(s0)
    8000b8ce:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8000b8d2:	001007b7          	lui	a5,0x100
    8000b8d6:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b8da:	07b2                	slli	a5,a5,0xc
    8000b8dc:	00078783          	lb	a5,0(a5)
    // uint8_t dest8[4];
    // vle8_v(dest8, (uintptr_t)src8);


    value = lb(vaddr_f);    
    printf("%llx\n",excpt.tinst);
    8000b8e0:	700c                	ld	a1,32(s0)
    8000b8e2:	00023517          	auipc	a0,0x23
    8000b8e6:	a9650513          	addi	a0,a0,-1386 # 8002e378 <__func__.0+0x6918>
    8000b8ea:	40c1a0ef          	jal	80025cf6 <printf>
    printf("%llx\n",excpt.triggered);
    8000b8ee:	0003d597          	auipc	a1,0x3d
    8000b8f2:	7235c583          	lbu	a1,1827(a1) # 80049011 <excpt+0x1>
    8000b8f6:	00023517          	auipc	a0,0x23
    8000b8fa:	a8250513          	addi	a0,a0,-1406 # 8002e378 <__func__.0+0x6918>
    8000b8fe:	3f81a0ef          	jal	80025cf6 <printf>
    printf("%llx\n",excpt.cause);
    8000b902:	640c                	ld	a1,8(s0)
    8000b904:	00023517          	auipc	a0,0x23
    8000b908:	a7450513          	addi	a0,a0,-1420 # 8002e378 <__func__.0+0x6918>
    8000b90c:	3ea1a0ef          	jal	80025cf6 <printf>
    printf("%llx\n",excpt.tval2);
    8000b910:	740c                	ld	a1,40(s0)
    8000b912:	00023517          	auipc	a0,0x23
    8000b916:	a6650513          	addi	a0,a0,-1434 # 8002e378 <__func__.0+0x6918>
    8000b91a:	3dc1a0ef          	jal	80025cf6 <printf>
    printf("%llx\n",excpt.tval);
    8000b91e:	6c0c                	ld	a1,24(s0)
    8000b920:	00023517          	auipc	a0,0x23
    8000b924:	a5850513          	addi	a0,a0,-1448 # 8002e378 <__func__.0+0x6918>
    8000b928:	3ce1a0ef          	jal	80025cf6 <printf>

    TEST_ASSERT("correct tinst when executing a lb which results in a lgpf",         
    8000b92c:	08200593          	li	a1,130
    8000b930:	0001e617          	auipc	a2,0x1e
    8000b934:	62860613          	addi	a2,a2,1576 # 80029f58 <__func__.0+0x24f8>
    8000b938:	0001c517          	auipc	a0,0x1c
    8000b93c:	42050513          	addi	a0,a0,1056 # 80027d58 <__func__.0+0x2f8>
    8000b940:	3b61a0ef          	jal	80025cf6 <printf>
    8000b944:	0003d797          	auipc	a5,0x3d
    8000b948:	6cd7c783          	lbu	a5,1741(a5) # 80049011 <excpt+0x1>
    8000b94c:	0001c597          	auipc	a1,0x1c
    8000b950:	3e458593          	addi	a1,a1,996 # 80027d30 <__func__.0+0x2d0>
    8000b954:	c799                	beqz	a5,8000b962 <tinst_tests_gpf+0x102>
    8000b956:	6418                	ld	a4,8(s0)
    8000b958:	47d5                	li	a5,21
    8000b95a:	00f71463          	bne	a4,a5,8000b962 <tinst_tests_gpf+0x102>
    8000b95e:	7cf0106f          	j	8000d92c <tinst_tests_gpf+0x20cc>
    8000b962:	0001c517          	auipc	a0,0x1c
    8000b966:	40e50513          	addi	a0,a0,1038 # 80027d70 <__func__.0+0x310>
    8000b96a:	38c1a0ef          	jal	80025cf6 <printf>
    8000b96e:	0003d797          	auipc	a5,0x3d
    8000b972:	6a37c783          	lbu	a5,1699(a5) # 80049011 <excpt+0x1>
    8000b976:	c799                	beqz	a5,8000b984 <tinst_tests_gpf+0x124>
    8000b978:	6418                	ld	a4,8(s0)
    8000b97a:	47d5                	li	a5,21
    8000b97c:	00f71463          	bne	a4,a5,8000b984 <tinst_tests_gpf+0x124>
    8000b980:	11b0106f          	j	8000d29a <tinst_tests_gpf+0x1a3a>
    8000b984:	0001c517          	auipc	a0,0x1c
    8000b988:	3f450513          	addi	a0,a0,1012 # 80027d78 <__func__.0+0x318>
    8000b98c:	36a1a0ef          	jal	80025cf6 <printf>
    8000b990:	02900513          	li	a0,41
    8000b994:	16c190ef          	jal	80024b00 <putchar>
    8000b998:	4529                	li	a0,10
    8000b99a:	166190ef          	jal	80024b00 <putchar>
    8000b99e:	0003d797          	auipc	a5,0x3d
    8000b9a2:	6737c783          	lbu	a5,1651(a5) # 80049011 <excpt+0x1>
    8000b9a6:	4901                	li	s2,0
    8000b9a8:	c799                	beqz	a5,8000b9b6 <tinst_tests_gpf+0x156>
    8000b9aa:	6418                	ld	a4,8(s0)
    8000b9ac:	47d5                	li	a5,21
    8000b9ae:	00f71463          	bne	a4,a5,8000b9b6 <tinst_tests_gpf+0x156>
    8000b9b2:	79b0106f          	j	8000d94c <tinst_tests_gpf+0x20ec>
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        excpt.tinst == 0x00003000
    );

    TEST_SETUP_EXCEPT();
    8000b9b6:	0330000f          	fence	rw,rw
    8000b9ba:	4785                	li	a5,1
    8000b9bc:	0003d717          	auipc	a4,0x3d
    8000b9c0:	68073623          	sd	zero,1676(a4) # 80049048 <excpt+0x38>
    8000b9c4:	00f41023          	sh	a5,0(s0)
    8000b9c8:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lbu, "lbu", uint8_t);
    8000b9cc:	001007b7          	lui	a5,0x100
    8000b9d0:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b9d4:	07b2                	slli	a5,a5,0xc
    8000b9d6:	0007c783          	lbu	a5,0(a5)
    value = lbu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lbu which results in a lgpf",
    8000b9da:	0001e617          	auipc	a2,0x1e
    8000b9de:	5be60613          	addi	a2,a2,1470 # 80029f98 <__func__.0+0x2538>
    8000b9e2:	08200593          	li	a1,130
    8000b9e6:	0001c517          	auipc	a0,0x1c
    8000b9ea:	37250513          	addi	a0,a0,882 # 80027d58 <__func__.0+0x2f8>
    8000b9ee:	3081a0ef          	jal	80025cf6 <printf>
    8000b9f2:	0003d797          	auipc	a5,0x3d
    8000b9f6:	61f7c783          	lbu	a5,1567(a5) # 80049011 <excpt+0x1>
    8000b9fa:	e399                	bnez	a5,8000ba00 <tinst_tests_gpf+0x1a0>
    8000b9fc:	0330106f          	j	8000d22e <tinst_tests_gpf+0x19ce>
    8000ba00:	6418                	ld	a4,8(s0)
    8000ba02:	47d5                	li	a5,21
    8000ba04:	0001c597          	auipc	a1,0x1c
    8000ba08:	32c58593          	addi	a1,a1,812 # 80027d30 <__func__.0+0x2d0>
    8000ba0c:	00f71463          	bne	a4,a5,8000ba14 <tinst_tests_gpf+0x1b4>
    8000ba10:	7d60106f          	j	8000d1e6 <tinst_tests_gpf+0x1986>
    8000ba14:	0001c517          	auipc	a0,0x1c
    8000ba18:	35c50513          	addi	a0,a0,860 # 80027d70 <__func__.0+0x310>
    8000ba1c:	2da1a0ef          	jal	80025cf6 <printf>
    8000ba20:	0003d797          	auipc	a5,0x3d
    8000ba24:	5f17c783          	lbu	a5,1521(a5) # 80049011 <excpt+0x1>
    8000ba28:	c799                	beqz	a5,8000ba36 <tinst_tests_gpf+0x1d6>
    8000ba2a:	6418                	ld	a4,8(s0)
    8000ba2c:	47d5                	li	a5,21
    8000ba2e:	00f71463          	bne	a4,a5,8000ba36 <tinst_tests_gpf+0x1d6>
    8000ba32:	0790106f          	j	8000d2aa <tinst_tests_gpf+0x1a4a>
    8000ba36:	0001c517          	auipc	a0,0x1c
    8000ba3a:	34250513          	addi	a0,a0,834 # 80027d78 <__func__.0+0x318>
    8000ba3e:	2b81a0ef          	jal	80025cf6 <printf>
    8000ba42:	02900513          	li	a0,41
    8000ba46:	0ba190ef          	jal	80024b00 <putchar>
    8000ba4a:	4529                	li	a0,10
    8000ba4c:	0b4190ef          	jal	80024b00 <putchar>
    8000ba50:	00090e63          	beqz	s2,8000ba6c <tinst_tests_gpf+0x20c>
    8000ba54:	0003d797          	auipc	a5,0x3d
    8000ba58:	5bd7c783          	lbu	a5,1469(a5) # 80049011 <excpt+0x1>
    8000ba5c:	c799                	beqz	a5,8000ba6a <tinst_tests_gpf+0x20a>
    8000ba5e:	6418                	ld	a4,8(s0)
    8000ba60:	47d5                	li	a5,21
    8000ba62:	00f71463          	bne	a4,a5,8000ba6a <tinst_tests_gpf+0x20a>
    8000ba66:	1ee0206f          	j	8000dc54 <tinst_tests_gpf+0x23f4>
    8000ba6a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000ba6c:	0330000f          	fence	rw,rw
    8000ba70:	4785                	li	a5,1
    8000ba72:	0003d717          	auipc	a4,0x3d
    8000ba76:	5c073b23          	sd	zero,1494(a4) # 80049048 <excpt+0x38>
    8000ba7a:	00f41023          	sh	a5,0(s0)
    8000ba7e:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    8000ba82:	001007b7          	lui	a5,0x100
    8000ba86:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000ba8a:	07b2                	slli	a5,a5,0xc
    8000ba8c:	00079783          	lh	a5,0(a5)
    value = lh(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lh which results in a lgpf",
    8000ba90:	0001e617          	auipc	a2,0x1e
    8000ba94:	54860613          	addi	a2,a2,1352 # 80029fd8 <__func__.0+0x2578>
    8000ba98:	08200593          	li	a1,130
    8000ba9c:	0001c517          	auipc	a0,0x1c
    8000baa0:	2bc50513          	addi	a0,a0,700 # 80027d58 <__func__.0+0x2f8>
    8000baa4:	2521a0ef          	jal	80025cf6 <printf>
    8000baa8:	0003d797          	auipc	a5,0x3d
    8000baac:	5697c783          	lbu	a5,1385(a5) # 80049011 <excpt+0x1>
    8000bab0:	c399                	beqz	a5,8000bab6 <tinst_tests_gpf+0x256>
    8000bab2:	7880106f          	j	8000d23a <tinst_tests_gpf+0x19da>
    8000bab6:	0001c597          	auipc	a1,0x1c
    8000baba:	27a58593          	addi	a1,a1,634 # 80027d30 <__func__.0+0x2d0>
    8000babe:	0001c517          	auipc	a0,0x1c
    8000bac2:	2b250513          	addi	a0,a0,690 # 80027d70 <__func__.0+0x310>
    8000bac6:	2301a0ef          	jal	80025cf6 <printf>
    8000baca:	0003d797          	auipc	a5,0x3d
    8000bace:	5477c783          	lbu	a5,1351(a5) # 80049011 <excpt+0x1>
    8000bad2:	c799                	beqz	a5,8000bae0 <tinst_tests_gpf+0x280>
    8000bad4:	6418                	ld	a4,8(s0)
    8000bad6:	47d5                	li	a5,21
    8000bad8:	00f71463          	bne	a4,a5,8000bae0 <tinst_tests_gpf+0x280>
    8000badc:	42b0106f          	j	8000d706 <tinst_tests_gpf+0x1ea6>
    8000bae0:	0001c517          	auipc	a0,0x1c
    8000bae4:	29850513          	addi	a0,a0,664 # 80027d78 <__func__.0+0x318>
    8000bae8:	20e1a0ef          	jal	80025cf6 <printf>
    8000baec:	02900513          	li	a0,41
    8000baf0:	010190ef          	jal	80024b00 <putchar>
    8000baf4:	4529                	li	a0,10
    8000baf6:	00a190ef          	jal	80024b00 <putchar>
    8000bafa:	00090e63          	beqz	s2,8000bb16 <tinst_tests_gpf+0x2b6>
    8000bafe:	0003d797          	auipc	a5,0x3d
    8000bb02:	5137c783          	lbu	a5,1299(a5) # 80049011 <excpt+0x1>
    8000bb06:	c799                	beqz	a5,8000bb14 <tinst_tests_gpf+0x2b4>
    8000bb08:	6418                	ld	a4,8(s0)
    8000bb0a:	47d5                	li	a5,21
    8000bb0c:	00f71463          	bne	a4,a5,8000bb14 <tinst_tests_gpf+0x2b4>
    8000bb10:	1820206f          	j	8000dc92 <tinst_tests_gpf+0x2432>
    8000bb14:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000bb16:	0330000f          	fence	rw,rw
    8000bb1a:	4785                	li	a5,1
    8000bb1c:	0003d717          	auipc	a4,0x3d
    8000bb20:	52073623          	sd	zero,1324(a4) # 80049048 <excpt+0x38>
    8000bb24:	00f41023          	sh	a5,0(s0)
    8000bb28:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lhu, "lhu", uint16_t); 
    8000bb2c:	001007b7          	lui	a5,0x100
    8000bb30:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bb34:	07b2                	slli	a5,a5,0xc
    8000bb36:	0007d783          	lhu	a5,0(a5)
    value = lhu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lhu which results in a lgpf",
    8000bb3a:	0001e617          	auipc	a2,0x1e
    8000bb3e:	4de60613          	addi	a2,a2,1246 # 8002a018 <__func__.0+0x25b8>
    8000bb42:	08200593          	li	a1,130
    8000bb46:	0001c517          	auipc	a0,0x1c
    8000bb4a:	21250513          	addi	a0,a0,530 # 80027d58 <__func__.0+0x2f8>
    8000bb4e:	1a81a0ef          	jal	80025cf6 <printf>
    8000bb52:	0003d797          	auipc	a5,0x3d
    8000bb56:	4bf7c783          	lbu	a5,1215(a5) # 80049011 <excpt+0x1>
    8000bb5a:	e399                	bnez	a5,8000bb60 <tinst_tests_gpf+0x300>
    8000bb5c:	7d20106f          	j	8000d32e <tinst_tests_gpf+0x1ace>
    8000bb60:	6418                	ld	a4,8(s0)
    8000bb62:	47d5                	li	a5,21
    8000bb64:	0001c597          	auipc	a1,0x1c
    8000bb68:	1cc58593          	addi	a1,a1,460 # 80027d30 <__func__.0+0x2d0>
    8000bb6c:	00f71463          	bne	a4,a5,8000bb74 <tinst_tests_gpf+0x314>
    8000bb70:	7760106f          	j	8000d2e6 <tinst_tests_gpf+0x1a86>
    8000bb74:	0001c517          	auipc	a0,0x1c
    8000bb78:	1fc50513          	addi	a0,a0,508 # 80027d70 <__func__.0+0x310>
    8000bb7c:	17a1a0ef          	jal	80025cf6 <printf>
    8000bb80:	0003d797          	auipc	a5,0x3d
    8000bb84:	4917c783          	lbu	a5,1169(a5) # 80049011 <excpt+0x1>
    8000bb88:	c799                	beqz	a5,8000bb96 <tinst_tests_gpf+0x336>
    8000bb8a:	6418                	ld	a4,8(s0)
    8000bb8c:	47d5                	li	a5,21
    8000bb8e:	00f71463          	bne	a4,a5,8000bb96 <tinst_tests_gpf+0x336>
    8000bb92:	3b10106f          	j	8000d742 <tinst_tests_gpf+0x1ee2>
    8000bb96:	0001c517          	auipc	a0,0x1c
    8000bb9a:	1e250513          	addi	a0,a0,482 # 80027d78 <__func__.0+0x318>
    8000bb9e:	1581a0ef          	jal	80025cf6 <printf>
    8000bba2:	02900513          	li	a0,41
    8000bba6:	75b180ef          	jal	80024b00 <putchar>
    8000bbaa:	4529                	li	a0,10
    8000bbac:	755180ef          	jal	80024b00 <putchar>
    8000bbb0:	00090e63          	beqz	s2,8000bbcc <tinst_tests_gpf+0x36c>
    8000bbb4:	0003d797          	auipc	a5,0x3d
    8000bbb8:	45d7c783          	lbu	a5,1117(a5) # 80049011 <excpt+0x1>
    8000bbbc:	c799                	beqz	a5,8000bbca <tinst_tests_gpf+0x36a>
    8000bbbe:	6418                	ld	a4,8(s0)
    8000bbc0:	47d5                	li	a5,21
    8000bbc2:	00f71463          	bne	a4,a5,8000bbca <tinst_tests_gpf+0x36a>
    8000bbc6:	10a0206f          	j	8000dcd0 <tinst_tests_gpf+0x2470>
    8000bbca:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000bbcc:	0330000f          	fence	rw,rw
    8000bbd0:	4785                	li	a5,1
    8000bbd2:	0003d717          	auipc	a4,0x3d
    8000bbd6:	46073b23          	sd	zero,1142(a4) # 80049048 <excpt+0x38>
    8000bbda:	00f41023          	sh	a5,0(s0)
    8000bbde:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lw, "lw", uint32_t); 
    8000bbe2:	001007b7          	lui	a5,0x100
    8000bbe6:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bbea:	07b2                	slli	a5,a5,0xc
    8000bbec:	0007a783          	lw	a5,0(a5)
    lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lw which results in a lgpf",
    8000bbf0:	0001e617          	auipc	a2,0x1e
    8000bbf4:	46860613          	addi	a2,a2,1128 # 8002a058 <__func__.0+0x25f8>
    8000bbf8:	08200593          	li	a1,130
    8000bbfc:	0001c517          	auipc	a0,0x1c
    8000bc00:	15c50513          	addi	a0,a0,348 # 80027d58 <__func__.0+0x2f8>
    8000bc04:	0f21a0ef          	jal	80025cf6 <printf>
    8000bc08:	0003d797          	auipc	a5,0x3d
    8000bc0c:	4097c783          	lbu	a5,1033(a5) # 80049011 <excpt+0x1>
    8000bc10:	e399                	bnez	a5,8000bc16 <tinst_tests_gpf+0x3b6>
    8000bc12:	7700106f          	j	8000d382 <tinst_tests_gpf+0x1b22>
    8000bc16:	6418                	ld	a4,8(s0)
    8000bc18:	47d5                	li	a5,21
    8000bc1a:	0001c597          	auipc	a1,0x1c
    8000bc1e:	11658593          	addi	a1,a1,278 # 80027d30 <__func__.0+0x2d0>
    8000bc22:	00f71463          	bne	a4,a5,8000bc2a <tinst_tests_gpf+0x3ca>
    8000bc26:	7140106f          	j	8000d33a <tinst_tests_gpf+0x1ada>
    8000bc2a:	0001c517          	auipc	a0,0x1c
    8000bc2e:	14650513          	addi	a0,a0,326 # 80027d70 <__func__.0+0x310>
    8000bc32:	0c41a0ef          	jal	80025cf6 <printf>
    8000bc36:	0003d797          	auipc	a5,0x3d
    8000bc3a:	3db7c783          	lbu	a5,987(a5) # 80049011 <excpt+0x1>
    8000bc3e:	c799                	beqz	a5,8000bc4c <tinst_tests_gpf+0x3ec>
    8000bc40:	6418                	ld	a4,8(s0)
    8000bc42:	47d5                	li	a5,21
    8000bc44:	00f71463          	bne	a4,a5,8000bc4c <tinst_tests_gpf+0x3ec>
    8000bc48:	1020206f          	j	8000dd4a <tinst_tests_gpf+0x24ea>
    8000bc4c:	0001c517          	auipc	a0,0x1c
    8000bc50:	12c50513          	addi	a0,a0,300 # 80027d78 <__func__.0+0x318>
    8000bc54:	0a21a0ef          	jal	80025cf6 <printf>
    8000bc58:	02900513          	li	a0,41
    8000bc5c:	6a5180ef          	jal	80024b00 <putchar>
    8000bc60:	4529                	li	a0,10
    8000bc62:	69f180ef          	jal	80024b00 <putchar>
    8000bc66:	00090e63          	beqz	s2,8000bc82 <tinst_tests_gpf+0x422>
    8000bc6a:	0003d797          	auipc	a5,0x3d
    8000bc6e:	3a77c783          	lbu	a5,935(a5) # 80049011 <excpt+0x1>
    8000bc72:	c799                	beqz	a5,8000bc80 <tinst_tests_gpf+0x420>
    8000bc74:	6418                	ld	a4,8(s0)
    8000bc76:	47d5                	li	a5,21
    8000bc78:	00f71463          	bne	a4,a5,8000bc80 <tinst_tests_gpf+0x420>
    8000bc7c:	0920206f          	j	8000dd0e <tinst_tests_gpf+0x24ae>
    8000bc80:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000bc82:	0330000f          	fence	rw,rw
    8000bc86:	4785                	li	a5,1
    8000bc88:	0003d717          	auipc	a4,0x3d
    8000bc8c:	3c073023          	sd	zero,960(a4) # 80049048 <excpt+0x38>
    8000bc90:	00f41023          	sh	a5,0(s0)
    8000bc94:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lwu, "lwu", uint32_t);
    8000bc98:	001007b7          	lui	a5,0x100
    8000bc9c:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bca0:	07b2                	slli	a5,a5,0xc
    8000bca2:	0007e783          	lwu	a5,0(a5)
    value = lwu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lwu which results in a lgpf",
    8000bca6:	0001e617          	auipc	a2,0x1e
    8000bcaa:	3f260613          	addi	a2,a2,1010 # 8002a098 <__func__.0+0x2638>
    8000bcae:	08200593          	li	a1,130
    8000bcb2:	0001c517          	auipc	a0,0x1c
    8000bcb6:	0a650513          	addi	a0,a0,166 # 80027d58 <__func__.0+0x2f8>
    8000bcba:	03c1a0ef          	jal	80025cf6 <printf>
    8000bcbe:	0003d797          	auipc	a5,0x3d
    8000bcc2:	3537c783          	lbu	a5,851(a5) # 80049011 <excpt+0x1>
    8000bcc6:	e399                	bnez	a5,8000bccc <tinst_tests_gpf+0x46c>
    8000bcc8:	70e0106f          	j	8000d3d6 <tinst_tests_gpf+0x1b76>
    8000bccc:	6418                	ld	a4,8(s0)
    8000bcce:	47d5                	li	a5,21
    8000bcd0:	0001c597          	auipc	a1,0x1c
    8000bcd4:	06058593          	addi	a1,a1,96 # 80027d30 <__func__.0+0x2d0>
    8000bcd8:	00f71463          	bne	a4,a5,8000bce0 <tinst_tests_gpf+0x480>
    8000bcdc:	6b20106f          	j	8000d38e <tinst_tests_gpf+0x1b2e>
    8000bce0:	0001c517          	auipc	a0,0x1c
    8000bce4:	09050513          	addi	a0,a0,144 # 80027d70 <__func__.0+0x310>
    8000bce8:	00e1a0ef          	jal	80025cf6 <printf>
    8000bcec:	0003d797          	auipc	a5,0x3d
    8000bcf0:	3257c783          	lbu	a5,805(a5) # 80049011 <excpt+0x1>
    8000bcf4:	c799                	beqz	a5,8000bd02 <tinst_tests_gpf+0x4a2>
    8000bcf6:	6418                	ld	a4,8(s0)
    8000bcf8:	47d5                	li	a5,21
    8000bcfa:	00f71463          	bne	a4,a5,8000bd02 <tinst_tests_gpf+0x4a2>
    8000bcfe:	0ec0206f          	j	8000ddea <tinst_tests_gpf+0x258a>
    8000bd02:	0001c517          	auipc	a0,0x1c
    8000bd06:	07650513          	addi	a0,a0,118 # 80027d78 <__func__.0+0x318>
    8000bd0a:	7ed190ef          	jal	80025cf6 <printf>
    8000bd0e:	02900513          	li	a0,41
    8000bd12:	5ef180ef          	jal	80024b00 <putchar>
    8000bd16:	4529                	li	a0,10
    8000bd18:	5e9180ef          	jal	80024b00 <putchar>
    8000bd1c:	00090a63          	beqz	s2,8000bd30 <tinst_tests_gpf+0x4d0>
    8000bd20:	0003d797          	auipc	a5,0x3d
    8000bd24:	2f17c783          	lbu	a5,753(a5) # 80049011 <excpt+0x1>
    8000bd28:	c399                	beqz	a5,8000bd2e <tinst_tests_gpf+0x4ce>
    8000bd2a:	2550106f          	j	8000d77e <tinst_tests_gpf+0x1f1e>
    8000bd2e:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000bd30:	0330000f          	fence	rw,rw
    8000bd34:	4785                	li	a5,1
    8000bd36:	0003d717          	auipc	a4,0x3d
    8000bd3a:	30073923          	sd	zero,786(a4) # 80049048 <excpt+0x38>
    8000bd3e:	00f41023          	sh	a5,0(s0)
    8000bd42:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8000bd46:	001007b7          	lui	a5,0x100
    8000bd4a:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bd4e:	07b2                	slli	a5,a5,0xc
    8000bd50:	0007b783          	ld	a5,0(a5)
    value = ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a ld which results in a lgpf",
    8000bd54:	0001e617          	auipc	a2,0x1e
    8000bd58:	38460613          	addi	a2,a2,900 # 8002a0d8 <__func__.0+0x2678>
    8000bd5c:	08200593          	li	a1,130
    8000bd60:	0001c517          	auipc	a0,0x1c
    8000bd64:	ff850513          	addi	a0,a0,-8 # 80027d58 <__func__.0+0x2f8>
    8000bd68:	78f190ef          	jal	80025cf6 <printf>
    8000bd6c:	0003d797          	auipc	a5,0x3d
    8000bd70:	2a57c783          	lbu	a5,677(a5) # 80049011 <excpt+0x1>
    8000bd74:	e399                	bnez	a5,8000bd7a <tinst_tests_gpf+0x51a>
    8000bd76:	6b40106f          	j	8000d42a <tinst_tests_gpf+0x1bca>
    8000bd7a:	6418                	ld	a4,8(s0)
    8000bd7c:	47d5                	li	a5,21
    8000bd7e:	0001c597          	auipc	a1,0x1c
    8000bd82:	fb258593          	addi	a1,a1,-78 # 80027d30 <__func__.0+0x2d0>
    8000bd86:	00f71463          	bne	a4,a5,8000bd8e <tinst_tests_gpf+0x52e>
    8000bd8a:	6580106f          	j	8000d3e2 <tinst_tests_gpf+0x1b82>
    8000bd8e:	0001c517          	auipc	a0,0x1c
    8000bd92:	fe250513          	addi	a0,a0,-30 # 80027d70 <__func__.0+0x310>
    8000bd96:	761190ef          	jal	80025cf6 <printf>
    8000bd9a:	0003d797          	auipc	a5,0x3d
    8000bd9e:	2777c783          	lbu	a5,631(a5) # 80049011 <excpt+0x1>
    8000bda2:	c799                	beqz	a5,8000bdb0 <tinst_tests_gpf+0x550>
    8000bda4:	6418                	ld	a4,8(s0)
    8000bda6:	47d5                	li	a5,21
    8000bda8:	00f71463          	bne	a4,a5,8000bdb0 <tinst_tests_gpf+0x550>
    8000bdac:	0d00206f          	j	8000de7c <tinst_tests_gpf+0x261c>
    8000bdb0:	0001c517          	auipc	a0,0x1c
    8000bdb4:	fc850513          	addi	a0,a0,-56 # 80027d78 <__func__.0+0x318>
    8000bdb8:	73f190ef          	jal	80025cf6 <printf>
    8000bdbc:	02900513          	li	a0,41
    8000bdc0:	541180ef          	jal	80024b00 <putchar>
    8000bdc4:	4529                	li	a0,10
    8000bdc6:	53b180ef          	jal	80024b00 <putchar>
    8000bdca:	00090a63          	beqz	s2,8000bdde <tinst_tests_gpf+0x57e>
    8000bdce:	0003d797          	auipc	a5,0x3d
    8000bdd2:	2437c783          	lbu	a5,579(a5) # 80049011 <excpt+0x1>
    8000bdd6:	c399                	beqz	a5,8000bddc <tinst_tests_gpf+0x57c>
    8000bdd8:	2570106f          	j	8000d82e <tinst_tests_gpf+0x1fce>
    8000bddc:	4901                	li	s2,0
        TINST_CHECK(TINST_LOAD)
    );

    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();
    8000bdde:	0330000f          	fence	rw,rw
    8000bde2:	4785                	li	a5,1
    8000bde4:	0003d717          	auipc	a4,0x3d
    8000bde8:	26073223          	sd	zero,612(a4) # 80049048 <excpt+0x38>
    8000bdec:	00f41023          	sh	a5,0(s0)
    8000bdf0:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sb, "sb", uint8_t);
    8000bdf4:	001007b7          	lui	a5,0x100
    8000bdf8:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bdfc:	07b2                	slli	a5,a5,0xc
    8000bdfe:	573d                	li	a4,-17
    8000be00:	00e78023          	sb	a4,0(a5)
    sb(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sb which results in a sgpf",
    8000be04:	0001e617          	auipc	a2,0x1e
    8000be08:	31460613          	addi	a2,a2,788 # 8002a118 <__func__.0+0x26b8>
    8000be0c:	08200593          	li	a1,130
    8000be10:	0001c517          	auipc	a0,0x1c
    8000be14:	f4850513          	addi	a0,a0,-184 # 80027d58 <__func__.0+0x2f8>
    8000be18:	6df190ef          	jal	80025cf6 <printf>
    8000be1c:	0003d797          	auipc	a5,0x3d
    8000be20:	1f57c783          	lbu	a5,501(a5) # 80049011 <excpt+0x1>
    8000be24:	e399                	bnez	a5,8000be2a <tinst_tests_gpf+0x5ca>
    8000be26:	65e0106f          	j	8000d484 <tinst_tests_gpf+0x1c24>
    8000be2a:	6418                	ld	a4,8(s0)
    8000be2c:	47dd                	li	a5,23
    8000be2e:	0001c597          	auipc	a1,0x1c
    8000be32:	f0258593          	addi	a1,a1,-254 # 80027d30 <__func__.0+0x2d0>
    8000be36:	00f71463          	bne	a4,a5,8000be3e <tinst_tests_gpf+0x5de>
    8000be3a:	5fc0106f          	j	8000d436 <tinst_tests_gpf+0x1bd6>
    8000be3e:	0001c517          	auipc	a0,0x1c
    8000be42:	f3250513          	addi	a0,a0,-206 # 80027d70 <__func__.0+0x310>
    8000be46:	6b1190ef          	jal	80025cf6 <printf>
    8000be4a:	0003d797          	auipc	a5,0x3d
    8000be4e:	1c77c783          	lbu	a5,455(a5) # 80049011 <excpt+0x1>
    8000be52:	c799                	beqz	a5,8000be60 <tinst_tests_gpf+0x600>
    8000be54:	6418                	ld	a4,8(s0)
    8000be56:	47dd                	li	a5,23
    8000be58:	00f71463          	bne	a4,a5,8000be60 <tinst_tests_gpf+0x600>
    8000be5c:	0b60206f          	j	8000df12 <tinst_tests_gpf+0x26b2>
    8000be60:	0001c517          	auipc	a0,0x1c
    8000be64:	f1850513          	addi	a0,a0,-232 # 80027d78 <__func__.0+0x318>
    8000be68:	68f190ef          	jal	80025cf6 <printf>
    8000be6c:	02900513          	li	a0,41
    8000be70:	491180ef          	jal	80024b00 <putchar>
    8000be74:	4529                	li	a0,10
    8000be76:	48b180ef          	jal	80024b00 <putchar>
    8000be7a:	00090a63          	beqz	s2,8000be8e <tinst_tests_gpf+0x62e>
    8000be7e:	0003d797          	auipc	a5,0x3d
    8000be82:	1937c783          	lbu	a5,403(a5) # 80049011 <excpt+0x1>
    8000be86:	c399                	beqz	a5,8000be8c <tinst_tests_gpf+0x62c>
    8000be88:	2570106f          	j	8000d8de <tinst_tests_gpf+0x207e>
    8000be8c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000be8e:	0330000f          	fence	rw,rw
    8000be92:	4785                	li	a5,1
    8000be94:	0003d717          	auipc	a4,0x3d
    8000be98:	1a073a23          	sd	zero,436(a4) # 80049048 <excpt+0x38>
    8000be9c:	00f41023          	sh	a5,0(s0)
    8000bea0:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sh, "sh", uint16_t);
    8000bea4:	001007b7          	lui	a5,0x100
    8000bea8:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000beac:	7771                	lui	a4,0xffffc
    8000beae:	07b2                	slli	a5,a5,0xc
    8000beb0:	eef7071b          	addiw	a4,a4,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    8000beb4:	00e79023          	sh	a4,0(a5)
    sh(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sh which results in a sgpf",
    8000beb8:	0001e617          	auipc	a2,0x1e
    8000bebc:	2a060613          	addi	a2,a2,672 # 8002a158 <__func__.0+0x26f8>
    8000bec0:	08200593          	li	a1,130
    8000bec4:	0001c517          	auipc	a0,0x1c
    8000bec8:	e9450513          	addi	a0,a0,-364 # 80027d58 <__func__.0+0x2f8>
    8000becc:	62b190ef          	jal	80025cf6 <printf>
    8000bed0:	0003d797          	auipc	a5,0x3d
    8000bed4:	1417c783          	lbu	a5,321(a5) # 80049011 <excpt+0x1>
    8000bed8:	e399                	bnez	a5,8000bede <tinst_tests_gpf+0x67e>
    8000beda:	6040106f          	j	8000d4de <tinst_tests_gpf+0x1c7e>
    8000bede:	6418                	ld	a4,8(s0)
    8000bee0:	47dd                	li	a5,23
    8000bee2:	0001c597          	auipc	a1,0x1c
    8000bee6:	e4e58593          	addi	a1,a1,-434 # 80027d30 <__func__.0+0x2d0>
    8000beea:	00f71463          	bne	a4,a5,8000bef2 <tinst_tests_gpf+0x692>
    8000beee:	5a20106f          	j	8000d490 <tinst_tests_gpf+0x1c30>
    8000bef2:	0001c517          	auipc	a0,0x1c
    8000bef6:	e7e50513          	addi	a0,a0,-386 # 80027d70 <__func__.0+0x310>
    8000befa:	5fd190ef          	jal	80025cf6 <printf>
    8000befe:	0003d797          	auipc	a5,0x3d
    8000bf02:	1137c783          	lbu	a5,275(a5) # 80049011 <excpt+0x1>
    8000bf06:	c799                	beqz	a5,8000bf14 <tinst_tests_gpf+0x6b4>
    8000bf08:	6418                	ld	a4,8(s0)
    8000bf0a:	47dd                	li	a5,23
    8000bf0c:	00f71463          	bne	a4,a5,8000bf14 <tinst_tests_gpf+0x6b4>
    8000bf10:	09e0206f          	j	8000dfae <tinst_tests_gpf+0x274e>
    8000bf14:	0001c517          	auipc	a0,0x1c
    8000bf18:	e6450513          	addi	a0,a0,-412 # 80027d78 <__func__.0+0x318>
    8000bf1c:	5db190ef          	jal	80025cf6 <printf>
    8000bf20:	02900513          	li	a0,41
    8000bf24:	3dd180ef          	jal	80024b00 <putchar>
    8000bf28:	4529                	li	a0,10
    8000bf2a:	3d7180ef          	jal	80024b00 <putchar>
    8000bf2e:	00090a63          	beqz	s2,8000bf42 <tinst_tests_gpf+0x6e2>
    8000bf32:	0003d797          	auipc	a5,0x3d
    8000bf36:	0df7c783          	lbu	a5,223(a5) # 80049011 <excpt+0x1>
    8000bf3a:	c399                	beqz	a5,8000bf40 <tinst_tests_gpf+0x6e0>
    8000bf3c:	2210106f          	j	8000d95c <tinst_tests_gpf+0x20fc>
    8000bf40:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000bf42:	0330000f          	fence	rw,rw
    8000bf46:	4785                	li	a5,1
    8000bf48:	0003d717          	auipc	a4,0x3d
    8000bf4c:	10073023          	sd	zero,256(a4) # 80049048 <excpt+0x38>
    8000bf50:	00f41023          	sh	a5,0(s0)
    8000bf54:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sw, "sw", uint32_t);
    8000bf58:	001007b7          	lui	a5,0x100
    8000bf5c:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bf60:	deadc737          	lui	a4,0xdeadc
    8000bf64:	07b2                	slli	a5,a5,0xc
    8000bf66:	eef7071b          	addiw	a4,a4,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    8000bf6a:	00e7a023          	sw	a4,0(a5)
    sw(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sw which results in a sgpf",
    8000bf6e:	0001e617          	auipc	a2,0x1e
    8000bf72:	22a60613          	addi	a2,a2,554 # 8002a198 <__func__.0+0x2738>
    8000bf76:	08200593          	li	a1,130
    8000bf7a:	0001c517          	auipc	a0,0x1c
    8000bf7e:	dde50513          	addi	a0,a0,-546 # 80027d58 <__func__.0+0x2f8>
    8000bf82:	575190ef          	jal	80025cf6 <printf>
    8000bf86:	0003d797          	auipc	a5,0x3d
    8000bf8a:	08b7c783          	lbu	a5,139(a5) # 80049011 <excpt+0x1>
    8000bf8e:	e399                	bnez	a5,8000bf94 <tinst_tests_gpf+0x734>
    8000bf90:	5a80106f          	j	8000d538 <tinst_tests_gpf+0x1cd8>
    8000bf94:	6418                	ld	a4,8(s0)
    8000bf96:	47dd                	li	a5,23
    8000bf98:	0001c597          	auipc	a1,0x1c
    8000bf9c:	d9858593          	addi	a1,a1,-616 # 80027d30 <__func__.0+0x2d0>
    8000bfa0:	00f71463          	bne	a4,a5,8000bfa8 <tinst_tests_gpf+0x748>
    8000bfa4:	5460106f          	j	8000d4ea <tinst_tests_gpf+0x1c8a>
    8000bfa8:	0001c517          	auipc	a0,0x1c
    8000bfac:	dc850513          	addi	a0,a0,-568 # 80027d70 <__func__.0+0x310>
    8000bfb0:	547190ef          	jal	80025cf6 <printf>
    8000bfb4:	0003d797          	auipc	a5,0x3d
    8000bfb8:	05d7c783          	lbu	a5,93(a5) # 80049011 <excpt+0x1>
    8000bfbc:	c799                	beqz	a5,8000bfca <tinst_tests_gpf+0x76a>
    8000bfbe:	6418                	ld	a4,8(s0)
    8000bfc0:	47dd                	li	a5,23
    8000bfc2:	00f71463          	bne	a4,a5,8000bfca <tinst_tests_gpf+0x76a>
    8000bfc6:	0840206f          	j	8000e04a <tinst_tests_gpf+0x27ea>
    8000bfca:	0001c517          	auipc	a0,0x1c
    8000bfce:	dae50513          	addi	a0,a0,-594 # 80027d78 <__func__.0+0x318>
    8000bfd2:	525190ef          	jal	80025cf6 <printf>
    8000bfd6:	02900513          	li	a0,41
    8000bfda:	327180ef          	jal	80024b00 <putchar>
    8000bfde:	4529                	li	a0,10
    8000bfe0:	321180ef          	jal	80024b00 <putchar>
    8000bfe4:	00090a63          	beqz	s2,8000bff8 <tinst_tests_gpf+0x798>
    8000bfe8:	0003d797          	auipc	a5,0x3d
    8000bfec:	0297c783          	lbu	a5,41(a5) # 80049011 <excpt+0x1>
    8000bff0:	c399                	beqz	a5,8000bff6 <tinst_tests_gpf+0x796>
    8000bff2:	1b90106f          	j	8000d9aa <tinst_tests_gpf+0x214a>
    8000bff6:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000bff8:	0330000f          	fence	rw,rw
    8000bffc:	4785                	li	a5,1
    8000bffe:	0003d717          	auipc	a4,0x3d
    8000c002:	04073523          	sd	zero,74(a4) # 80049048 <excpt+0x38>
    8000c006:	00f41023          	sh	a5,0(s0)
    8000c00a:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8000c00e:	37ab77b7          	lui	a5,0x37ab7
    8000c012:	00100737          	lui	a4,0x100
    8000c016:	078a                	slli	a5,a5,0x2
    8000c018:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    8000c01c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8000c020:	0732                	slli	a4,a4,0xc
    8000c022:	00f73023          	sd	a5,0(a4)
    sd(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sd which results in a sgpf",
    8000c026:	0001e617          	auipc	a2,0x1e
    8000c02a:	1b260613          	addi	a2,a2,434 # 8002a1d8 <__func__.0+0x2778>
    8000c02e:	08200593          	li	a1,130
    8000c032:	0001c517          	auipc	a0,0x1c
    8000c036:	d2650513          	addi	a0,a0,-730 # 80027d58 <__func__.0+0x2f8>
    8000c03a:	4bd190ef          	jal	80025cf6 <printf>
    8000c03e:	0003d797          	auipc	a5,0x3d
    8000c042:	fd37c783          	lbu	a5,-45(a5) # 80049011 <excpt+0x1>
    8000c046:	e399                	bnez	a5,8000c04c <tinst_tests_gpf+0x7ec>
    8000c048:	54a0106f          	j	8000d592 <tinst_tests_gpf+0x1d32>
    8000c04c:	6418                	ld	a4,8(s0)
    8000c04e:	47dd                	li	a5,23
    8000c050:	0001c597          	auipc	a1,0x1c
    8000c054:	ce058593          	addi	a1,a1,-800 # 80027d30 <__func__.0+0x2d0>
    8000c058:	00f71463          	bne	a4,a5,8000c060 <tinst_tests_gpf+0x800>
    8000c05c:	4e80106f          	j	8000d544 <tinst_tests_gpf+0x1ce4>
    8000c060:	0001c517          	auipc	a0,0x1c
    8000c064:	d1050513          	addi	a0,a0,-752 # 80027d70 <__func__.0+0x310>
    8000c068:	48f190ef          	jal	80025cf6 <printf>
    8000c06c:	0003d797          	auipc	a5,0x3d
    8000c070:	fa57c783          	lbu	a5,-91(a5) # 80049011 <excpt+0x1>
    8000c074:	c799                	beqz	a5,8000c082 <tinst_tests_gpf+0x822>
    8000c076:	6418                	ld	a4,8(s0)
    8000c078:	47dd                	li	a5,23
    8000c07a:	00f71463          	bne	a4,a5,8000c082 <tinst_tests_gpf+0x822>
    8000c07e:	0680206f          	j	8000e0e6 <tinst_tests_gpf+0x2886>
    8000c082:	0001c517          	auipc	a0,0x1c
    8000c086:	cf650513          	addi	a0,a0,-778 # 80027d78 <__func__.0+0x318>
    8000c08a:	46d190ef          	jal	80025cf6 <printf>
    8000c08e:	02900513          	li	a0,41
    8000c092:	26f180ef          	jal	80024b00 <putchar>
    8000c096:	4529                	li	a0,10
    8000c098:	269180ef          	jal	80024b00 <putchar>
    8000c09c:	00090a63          	beqz	s2,8000c0b0 <tinst_tests_gpf+0x850>
    8000c0a0:	0003d797          	auipc	a5,0x3d
    8000c0a4:	f717c783          	lbu	a5,-143(a5) # 80049011 <excpt+0x1>
    8000c0a8:	c399                	beqz	a5,8000c0ae <tinst_tests_gpf+0x84e>
    8000c0aa:	14f0106f          	j	8000d9f8 <tinst_tests_gpf+0x2198>
    8000c0ae:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000c0b0:	0330000f          	fence	rw,rw
    8000c0b4:	4785                	li	a5,1
    8000c0b6:	0003d717          	auipc	a4,0x3d
    8000c0ba:	f8073923          	sd	zero,-110(a4) # 80049048 <excpt+0x38>
    8000c0be:	00f41023          	sh	a5,0(s0)
    8000c0c2:	0330000f          	fence	rw,rw
    register uint64_t _addr asm("a0") = addr;
    8000c0c6:	00100537          	lui	a0,0x100
    8000c0ca:	06550513          	addi	a0,a0,101 # 100065 <STACK_SIZE+0x65>
    8000c0ce:	0532                	slli	a0,a0,0xc
    asm volatile(
    8000c0d0:	410c                	lw	a1,0(a0)
    value = c_lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000c0d2:	0001e617          	auipc	a2,0x1e
    8000c0d6:	14660613          	addi	a2,a2,326 # 8002a218 <__func__.0+0x27b8>
    8000c0da:	08200593          	li	a1,130
    8000c0de:	0001c517          	auipc	a0,0x1c
    8000c0e2:	c7a50513          	addi	a0,a0,-902 # 80027d58 <__func__.0+0x2f8>
    8000c0e6:	411190ef          	jal	80025cf6 <printf>
    8000c0ea:	0003d797          	auipc	a5,0x3d
    8000c0ee:	f277c783          	lbu	a5,-217(a5) # 80049011 <excpt+0x1>
    8000c0f2:	c799                	beqz	a5,8000c100 <tinst_tests_gpf+0x8a0>
    8000c0f4:	6418                	ld	a4,8(s0)
    8000c0f6:	47d5                	li	a5,21
    8000c0f8:	00f71463          	bne	a4,a5,8000c100 <tinst_tests_gpf+0x8a0>
    8000c0fc:	2470106f          	j	8000db42 <tinst_tests_gpf+0x22e2>
    8000c100:	0001c597          	auipc	a1,0x1c
    8000c104:	c3058593          	addi	a1,a1,-976 # 80027d30 <__func__.0+0x2d0>
    8000c108:	0001c517          	auipc	a0,0x1c
    8000c10c:	c6850513          	addi	a0,a0,-920 # 80027d70 <__func__.0+0x310>
    8000c110:	3e7190ef          	jal	80025cf6 <printf>
    8000c114:	0003d797          	auipc	a5,0x3d
    8000c118:	efd7c783          	lbu	a5,-259(a5) # 80049011 <excpt+0x1>
    8000c11c:	c799                	beqz	a5,8000c12a <tinst_tests_gpf+0x8ca>
    8000c11e:	6418                	ld	a4,8(s0)
    8000c120:	47d5                	li	a5,21
    8000c122:	00f71463          	bne	a4,a5,8000c12a <tinst_tests_gpf+0x8ca>
    8000c126:	05c0206f          	j	8000e182 <tinst_tests_gpf+0x2922>
    8000c12a:	0001c517          	auipc	a0,0x1c
    8000c12e:	c4e50513          	addi	a0,a0,-946 # 80027d78 <__func__.0+0x318>
    8000c132:	3c5190ef          	jal	80025cf6 <printf>
    8000c136:	02900513          	li	a0,41
    8000c13a:	1c7180ef          	jal	80024b00 <putchar>
    8000c13e:	4529                	li	a0,10
    8000c140:	1c1180ef          	jal	80024b00 <putchar>
    8000c144:	00090a63          	beqz	s2,8000c158 <tinst_tests_gpf+0x8f8>
    8000c148:	0003d797          	auipc	a5,0x3d
    8000c14c:	ec97c783          	lbu	a5,-311(a5) # 80049011 <excpt+0x1>
    8000c150:	c399                	beqz	a5,8000c156 <tinst_tests_gpf+0x8f6>
    8000c152:	0f50106f          	j	8000da46 <tinst_tests_gpf+0x21e6>
    8000c156:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000c158:	0330000f          	fence	rw,rw
    8000c15c:	4785                	li	a5,1
    8000c15e:	0003d717          	auipc	a4,0x3d
    8000c162:	ee073523          	sd	zero,-278(a4) # 80049048 <excpt+0x38>
    8000c166:	00f41023          	sh	a5,0(s0)
    8000c16a:	0330000f          	fence	rw,rw
    register uint64_t _addr asm("a0") = addr;
    8000c16e:	00100537          	lui	a0,0x100
    8000c172:	06550513          	addi	a0,a0,101 # 100065 <STACK_SIZE+0x65>
    8000c176:	0532                	slli	a0,a0,0xc
    asm volatile(
    8000c178:	610c                	ld	a1,0(a0)
    value = c_ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000c17a:	0001e617          	auipc	a2,0x1e
    8000c17e:	0de60613          	addi	a2,a2,222 # 8002a258 <__func__.0+0x27f8>
    return value;
    8000c182:	84ae                	mv	s1,a1
    8000c184:	0001c517          	auipc	a0,0x1c
    8000c188:	bd450513          	addi	a0,a0,-1068 # 80027d58 <__func__.0+0x2f8>
    8000c18c:	08200593          	li	a1,130
    8000c190:	367190ef          	jal	80025cf6 <printf>
    8000c194:	0003d797          	auipc	a5,0x3d
    8000c198:	e7d7c783          	lbu	a5,-387(a5) # 80049011 <excpt+0x1>
    8000c19c:	c799                	beqz	a5,8000c1aa <tinst_tests_gpf+0x94a>
    8000c19e:	6418                	ld	a4,8(s0)
    8000c1a0:	47d5                	li	a5,21
    8000c1a2:	00f71463          	bne	a4,a5,8000c1aa <tinst_tests_gpf+0x94a>
    8000c1a6:	1f10106f          	j	8000db96 <tinst_tests_gpf+0x2336>
    8000c1aa:	0001c597          	auipc	a1,0x1c
    8000c1ae:	b8658593          	addi	a1,a1,-1146 # 80027d30 <__func__.0+0x2d0>
    8000c1b2:	0001c517          	auipc	a0,0x1c
    8000c1b6:	bbe50513          	addi	a0,a0,-1090 # 80027d70 <__func__.0+0x310>
    8000c1ba:	33d190ef          	jal	80025cf6 <printf>
    8000c1be:	0003d797          	auipc	a5,0x3d
    8000c1c2:	e537c783          	lbu	a5,-429(a5) # 80049011 <excpt+0x1>
    8000c1c6:	c799                	beqz	a5,8000c1d4 <tinst_tests_gpf+0x974>
    8000c1c8:	6418                	ld	a4,8(s0)
    8000c1ca:	47d5                	li	a5,21
    8000c1cc:	00f71463          	bne	a4,a5,8000c1d4 <tinst_tests_gpf+0x974>
    8000c1d0:	0380206f          	j	8000e208 <tinst_tests_gpf+0x29a8>
    8000c1d4:	0001c517          	auipc	a0,0x1c
    8000c1d8:	ba450513          	addi	a0,a0,-1116 # 80027d78 <__func__.0+0x318>
    8000c1dc:	31b190ef          	jal	80025cf6 <printf>
    8000c1e0:	02900513          	li	a0,41
    8000c1e4:	11d180ef          	jal	80024b00 <putchar>
    8000c1e8:	4529                	li	a0,10
    8000c1ea:	117180ef          	jal	80024b00 <putchar>
    8000c1ee:	00090a63          	beqz	s2,8000c202 <tinst_tests_gpf+0x9a2>
    8000c1f2:	0003d797          	auipc	a5,0x3d
    8000c1f6:	e1f7c783          	lbu	a5,-481(a5) # 80049011 <excpt+0x1>
    8000c1fa:	c399                	beqz	a5,8000c200 <tinst_tests_gpf+0x9a0>
    8000c1fc:	0850106f          	j	8000da80 <tinst_tests_gpf+0x2220>
    8000c200:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000c202:	0330000f          	fence	rw,rw
    8000c206:	4785                	li	a5,1
    8000c208:	0003d717          	auipc	a4,0x3d
    8000c20c:	e4073023          	sd	zero,-448(a4) # 80049048 <excpt+0x38>
    8000c210:	00f41023          	sh	a5,0(s0)
    8000c214:	0330000f          	fence	rw,rw
    register uint64_t _addr asm("a0") = addr;
    8000c218:	00100537          	lui	a0,0x100
    8000c21c:	06550513          	addi	a0,a0,101 # 100065 <STACK_SIZE+0x65>
    register uint64_t _value asm("a1") = value;
    8000c220:	85a6                	mv	a1,s1
    register uint64_t _addr asm("a0") = addr;
    8000c222:	0532                	slli	a0,a0,0xc
    asm volatile(
    8000c224:	c10c                	sw	a1,0(a0)
    c_sw(vaddr_f, value);       
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000c226:	0001e617          	auipc	a2,0x1e
    8000c22a:	ff260613          	addi	a2,a2,-14 # 8002a218 <__func__.0+0x27b8>
    8000c22e:	08200593          	li	a1,130
    8000c232:	0001c517          	auipc	a0,0x1c
    8000c236:	b2650513          	addi	a0,a0,-1242 # 80027d58 <__func__.0+0x2f8>
    8000c23a:	2bd190ef          	jal	80025cf6 <printf>
    8000c23e:	0003d797          	auipc	a5,0x3d
    8000c242:	dd37c783          	lbu	a5,-557(a5) # 80049011 <excpt+0x1>
    8000c246:	c799                	beqz	a5,8000c254 <tinst_tests_gpf+0x9f4>
    8000c248:	6418                	ld	a4,8(s0)
    8000c24a:	47dd                	li	a5,23
    8000c24c:	00f71463          	bne	a4,a5,8000c254 <tinst_tests_gpf+0x9f4>
    8000c250:	19d0106f          	j	8000dbec <tinst_tests_gpf+0x238c>
    8000c254:	0001c597          	auipc	a1,0x1c
    8000c258:	adc58593          	addi	a1,a1,-1316 # 80027d30 <__func__.0+0x2d0>
    8000c25c:	0001c517          	auipc	a0,0x1c
    8000c260:	b1450513          	addi	a0,a0,-1260 # 80027d70 <__func__.0+0x310>
    8000c264:	293190ef          	jal	80025cf6 <printf>
    8000c268:	0003d797          	auipc	a5,0x3d
    8000c26c:	da97c783          	lbu	a5,-599(a5) # 80049011 <excpt+0x1>
    8000c270:	c799                	beqz	a5,8000c27e <tinst_tests_gpf+0xa1e>
    8000c272:	6418                	ld	a4,8(s0)
    8000c274:	47dd                	li	a5,23
    8000c276:	00f71463          	bne	a4,a5,8000c27e <tinst_tests_gpf+0xa1e>
    8000c27a:	0180206f          	j	8000e292 <tinst_tests_gpf+0x2a32>
    8000c27e:	0001c517          	auipc	a0,0x1c
    8000c282:	afa50513          	addi	a0,a0,-1286 # 80027d78 <__func__.0+0x318>
    8000c286:	271190ef          	jal	80025cf6 <printf>
    8000c28a:	02900513          	li	a0,41
    8000c28e:	073180ef          	jal	80024b00 <putchar>
    8000c292:	4529                	li	a0,10
    8000c294:	06d180ef          	jal	80024b00 <putchar>
    8000c298:	00090a63          	beqz	s2,8000c2ac <tinst_tests_gpf+0xa4c>
    8000c29c:	0003d797          	auipc	a5,0x3d
    8000c2a0:	d757c783          	lbu	a5,-651(a5) # 80049011 <excpt+0x1>
    8000c2a4:	c399                	beqz	a5,8000c2aa <tinst_tests_gpf+0xa4a>
    8000c2a6:	0190106f          	j	8000dabe <tinst_tests_gpf+0x225e>
    8000c2aa:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000c2ac:	0330000f          	fence	rw,rw
    8000c2b0:	4785                	li	a5,1
    8000c2b2:	0003d717          	auipc	a4,0x3d
    8000c2b6:	d8073b23          	sd	zero,-618(a4) # 80049048 <excpt+0x38>
    8000c2ba:	00f41023          	sh	a5,0(s0)
    8000c2be:	0330000f          	fence	rw,rw
    register uint64_t _addr asm("a0") = addr;
    8000c2c2:	00100537          	lui	a0,0x100
    8000c2c6:	06550513          	addi	a0,a0,101 # 100065 <STACK_SIZE+0x65>
    register uint64_t _value asm("a1") = value;
    8000c2ca:	85a6                	mv	a1,s1
    register uint64_t _addr asm("a0") = addr;
    8000c2cc:	0532                	slli	a0,a0,0xc
    asm volatile(
    8000c2ce:	e10c                	sd	a1,0(a0)
    c_sd(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000c2d0:	0001e617          	auipc	a2,0x1e
    8000c2d4:	fc860613          	addi	a2,a2,-56 # 8002a298 <__func__.0+0x2838>
    8000c2d8:	08200593          	li	a1,130
    8000c2dc:	0001c517          	auipc	a0,0x1c
    8000c2e0:	a7c50513          	addi	a0,a0,-1412 # 80027d58 <__func__.0+0x2f8>
    8000c2e4:	213190ef          	jal	80025cf6 <printf>
    8000c2e8:	0003d797          	auipc	a5,0x3d
    8000c2ec:	d297c783          	lbu	a5,-727(a5) # 80049011 <excpt+0x1>
    8000c2f0:	c799                	beqz	a5,8000c2fe <tinst_tests_gpf+0xa9e>
    8000c2f2:	6418                	ld	a4,8(s0)
    8000c2f4:	47dd                	li	a5,23
    8000c2f6:	00f71463          	bne	a4,a5,8000c2fe <tinst_tests_gpf+0xa9e>
    8000c2fa:	1490106f          	j	8000dc42 <tinst_tests_gpf+0x23e2>
    8000c2fe:	0001c597          	auipc	a1,0x1c
    8000c302:	a3258593          	addi	a1,a1,-1486 # 80027d30 <__func__.0+0x2d0>
    8000c306:	0001c517          	auipc	a0,0x1c
    8000c30a:	a6a50513          	addi	a0,a0,-1430 # 80027d70 <__func__.0+0x310>
    8000c30e:	1e9190ef          	jal	80025cf6 <printf>
    8000c312:	0003d797          	auipc	a5,0x3d
    8000c316:	cff7c783          	lbu	a5,-769(a5) # 80049011 <excpt+0x1>
    8000c31a:	c799                	beqz	a5,8000c328 <tinst_tests_gpf+0xac8>
    8000c31c:	6418                	ld	a4,8(s0)
    8000c31e:	47dd                	li	a5,23
    8000c320:	00f71463          	bne	a4,a5,8000c328 <tinst_tests_gpf+0xac8>
    8000c324:	7fd0106f          	j	8000e320 <tinst_tests_gpf+0x2ac0>
    8000c328:	0001c517          	auipc	a0,0x1c
    8000c32c:	a5050513          	addi	a0,a0,-1456 # 80027d78 <__func__.0+0x318>
    8000c330:	1c7190ef          	jal	80025cf6 <printf>
    8000c334:	02900513          	li	a0,41
    8000c338:	7c8180ef          	jal	80024b00 <putchar>
    8000c33c:	4529                	li	a0,10
    8000c33e:	7c2180ef          	jal	80024b00 <putchar>
    8000c342:	00090e63          	beqz	s2,8000c35e <tinst_tests_gpf+0xafe>
    8000c346:	0003d797          	auipc	a5,0x3d
    8000c34a:	ccb7c783          	lbu	a5,-821(a5) # 80049011 <excpt+0x1>
    8000c34e:	c799                	beqz	a5,8000c35c <tinst_tests_gpf+0xafc>
    8000c350:	6418                	ld	a4,8(s0)
    8000c352:	47dd                	li	a5,23
    8000c354:	00f71463          	bne	a4,a5,8000c35c <tinst_tests_gpf+0xafc>
    8000c358:	54a0206f          	j	8000e8a2 <tinst_tests_gpf+0x3042>
    8000c35c:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000c35e:	0330000f          	fence	rw,rw
    8000c362:	4785                	li	a5,1
    8000c364:	0003d717          	auipc	a4,0x3d
    8000c368:	ce073223          	sd	zero,-796(a4) # 80049048 <excpt+0x38>
    8000c36c:	00f41023          	sh	a5,0(s0)
    8000c370:	0330000f          	fence	rw,rw
    asm volatile(
    8000c374:	001007b7          	lui	a5,0x100
    8000c378:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c37c:	07b2                	slli	a5,a5,0xc
    8000c37e:	1007a7af          	lr.w	a5,(a5)
    value = lr_w(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000c382:	0001e617          	auipc	a2,0x1e
    8000c386:	f5660613          	addi	a2,a2,-170 # 8002a2d8 <__func__.0+0x2878>
    8000c38a:	08200593          	li	a1,130
    8000c38e:	0001c517          	auipc	a0,0x1c
    8000c392:	9ca50513          	addi	a0,a0,-1590 # 80027d58 <__func__.0+0x2f8>
    value = lr_w(vaddr_f);
    8000c396:	02079493          	slli	s1,a5,0x20
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000c39a:	15d190ef          	jal	80025cf6 <printf>
    8000c39e:	0003d797          	auipc	a5,0x3d
    8000c3a2:	c737c783          	lbu	a5,-909(a5) # 80049011 <excpt+0x1>
    value = lr_w(vaddr_f);
    8000c3a6:	9081                	srli	s1,s1,0x20
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000c3a8:	e399                	bnez	a5,8000c3ae <tinst_tests_gpf+0xb4e>
    8000c3aa:	2420106f          	j	8000d5ec <tinst_tests_gpf+0x1d8c>
    8000c3ae:	6418                	ld	a4,8(s0)
    8000c3b0:	47d5                	li	a5,21
    8000c3b2:	0001c597          	auipc	a1,0x1c
    8000c3b6:	97e58593          	addi	a1,a1,-1666 # 80027d30 <__func__.0+0x2d0>
    8000c3ba:	00f71463          	bne	a4,a5,8000c3c2 <tinst_tests_gpf+0xb62>
    8000c3be:	1e00106f          	j	8000d59e <tinst_tests_gpf+0x1d3e>
    8000c3c2:	0001c517          	auipc	a0,0x1c
    8000c3c6:	9ae50513          	addi	a0,a0,-1618 # 80027d70 <__func__.0+0x310>
    8000c3ca:	12d190ef          	jal	80025cf6 <printf>
    8000c3ce:	0003d797          	auipc	a5,0x3d
    8000c3d2:	c437c783          	lbu	a5,-957(a5) # 80049011 <excpt+0x1>
    8000c3d6:	c799                	beqz	a5,8000c3e4 <tinst_tests_gpf+0xb84>
    8000c3d8:	6418                	ld	a4,8(s0)
    8000c3da:	47d5                	li	a5,21
    8000c3dc:	00f71463          	bne	a4,a5,8000c3e4 <tinst_tests_gpf+0xb84>
    8000c3e0:	7cb0106f          	j	8000e3aa <tinst_tests_gpf+0x2b4a>
    8000c3e4:	0001c517          	auipc	a0,0x1c
    8000c3e8:	99450513          	addi	a0,a0,-1644 # 80027d78 <__func__.0+0x318>
    8000c3ec:	10b190ef          	jal	80025cf6 <printf>
    8000c3f0:	02900513          	li	a0,41
    8000c3f4:	70c180ef          	jal	80024b00 <putchar>
    8000c3f8:	4529                	li	a0,10
    8000c3fa:	706180ef          	jal	80024b00 <putchar>
    8000c3fe:	00090e63          	beqz	s2,8000c41a <tinst_tests_gpf+0xbba>
    8000c402:	0003d797          	auipc	a5,0x3d
    8000c406:	c0f7c783          	lbu	a5,-1009(a5) # 80049011 <excpt+0x1>
    8000c40a:	c799                	beqz	a5,8000c418 <tinst_tests_gpf+0xbb8>
    8000c40c:	6418                	ld	a4,8(s0)
    8000c40e:	47d5                	li	a5,21
    8000c410:	00f71463          	bne	a4,a5,8000c418 <tinst_tests_gpf+0xbb8>
    8000c414:	4c00206f          	j	8000e8d4 <tinst_tests_gpf+0x3074>
    8000c418:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c41a:	0330000f          	fence	rw,rw
    8000c41e:	4785                	li	a5,1
    8000c420:	0003d717          	auipc	a4,0x3d
    8000c424:	c2073423          	sd	zero,-984(a4) # 80049048 <excpt+0x38>
    8000c428:	00f41023          	sh	a5,0(s0)
    8000c42c:	0330000f          	fence	rw,rw
    asm volatile(
    8000c430:	00100737          	lui	a4,0x100
    8000c434:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    8000c438:	87a6                	mv	a5,s1
    8000c43a:	0732                	slli	a4,a4,0xc
    8000c43c:	18f727af          	sc.w	a5,a5,(a4)
    value = sc_w(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a sc.w which results in a sgpf",
    8000c440:	0001e617          	auipc	a2,0x1e
    8000c444:	ed860613          	addi	a2,a2,-296 # 8002a318 <__func__.0+0x28b8>
    8000c448:	08200593          	li	a1,130
    8000c44c:	0001c517          	auipc	a0,0x1c
    8000c450:	90c50513          	addi	a0,a0,-1780 # 80027d58 <__func__.0+0x2f8>
    return value;
    8000c454:	0007849b          	sext.w	s1,a5
    8000c458:	09f190ef          	jal	80025cf6 <printf>
    8000c45c:	0003d797          	auipc	a5,0x3d
    8000c460:	bb57c783          	lbu	a5,-1099(a5) # 80049011 <excpt+0x1>
    8000c464:	e399                	bnez	a5,8000c46a <tinst_tests_gpf+0xc0a>
    8000c466:	1e00106f          	j	8000d646 <tinst_tests_gpf+0x1de6>
    8000c46a:	6418                	ld	a4,8(s0)
    8000c46c:	47dd                	li	a5,23
    8000c46e:	0001c597          	auipc	a1,0x1c
    8000c472:	8c258593          	addi	a1,a1,-1854 # 80027d30 <__func__.0+0x2d0>
    8000c476:	00f71463          	bne	a4,a5,8000c47e <tinst_tests_gpf+0xc1e>
    8000c47a:	17e0106f          	j	8000d5f8 <tinst_tests_gpf+0x1d98>
    8000c47e:	0001c517          	auipc	a0,0x1c
    8000c482:	8f250513          	addi	a0,a0,-1806 # 80027d70 <__func__.0+0x310>
    8000c486:	071190ef          	jal	80025cf6 <printf>
    8000c48a:	0003d797          	auipc	a5,0x3d
    8000c48e:	b877c783          	lbu	a5,-1145(a5) # 80049011 <excpt+0x1>
    8000c492:	c799                	beqz	a5,8000c4a0 <tinst_tests_gpf+0xc40>
    8000c494:	6418                	ld	a4,8(s0)
    8000c496:	47dd                	li	a5,23
    8000c498:	00f71463          	bne	a4,a5,8000c4a0 <tinst_tests_gpf+0xc40>
    8000c49c:	6640106f          	j	8000db00 <tinst_tests_gpf+0x22a0>
    8000c4a0:	0001c517          	auipc	a0,0x1c
    8000c4a4:	8d850513          	addi	a0,a0,-1832 # 80027d78 <__func__.0+0x318>
    8000c4a8:	04f190ef          	jal	80025cf6 <printf>
    8000c4ac:	02900513          	li	a0,41
    8000c4b0:	650180ef          	jal	80024b00 <putchar>
    8000c4b4:	4529                	li	a0,10
    8000c4b6:	64a180ef          	jal	80024b00 <putchar>
    8000c4ba:	00090e63          	beqz	s2,8000c4d6 <tinst_tests_gpf+0xc76>
    8000c4be:	0003d797          	auipc	a5,0x3d
    8000c4c2:	b537c783          	lbu	a5,-1197(a5) # 80049011 <excpt+0x1>
    8000c4c6:	c799                	beqz	a5,8000c4d4 <tinst_tests_gpf+0xc74>
    8000c4c8:	6418                	ld	a4,8(s0)
    8000c4ca:	47dd                	li	a5,23
    8000c4cc:	00f71463          	bne	a4,a5,8000c4d4 <tinst_tests_gpf+0xc74>
    8000c4d0:	4460206f          	j	8000e916 <tinst_tests_gpf+0x30b6>
    8000c4d4:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c4d6:	0330000f          	fence	rw,rw
    8000c4da:	4785                	li	a5,1
    8000c4dc:	0003d717          	auipc	a4,0x3d
    8000c4e0:	b6073623          	sd	zero,-1172(a4) # 80049048 <excpt+0x38>
    8000c4e4:	00f41023          	sh	a5,0(s0)
    8000c4e8:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoswap_w, "amoswap.w", uint32_t);
    8000c4ec:	001007b7          	lui	a5,0x100
    8000c4f0:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c4f4:	07b2                	slli	a5,a5,0xc
    8000c4f6:	0897a4af          	amoswap.w	s1,s1,(a5)
    value = amoswap_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a sgpf",
    8000c4fa:	0001e617          	auipc	a2,0x1e
    8000c4fe:	e5e60613          	addi	a2,a2,-418 # 8002a358 <__func__.0+0x28f8>
    8000c502:	08200593          	li	a1,130
    8000c506:	0001c517          	auipc	a0,0x1c
    8000c50a:	85250513          	addi	a0,a0,-1966 # 80027d58 <__func__.0+0x2f8>
    8000c50e:	7e8190ef          	jal	80025cf6 <printf>
    8000c512:	0003d797          	auipc	a5,0x3d
    8000c516:	aff7c783          	lbu	a5,-1281(a5) # 80049011 <excpt+0x1>
    8000c51a:	e399                	bnez	a5,8000c520 <tinst_tests_gpf+0xcc0>
    8000c51c:	1840106f          	j	8000d6a0 <tinst_tests_gpf+0x1e40>
    8000c520:	6418                	ld	a4,8(s0)
    8000c522:	47dd                	li	a5,23
    8000c524:	0001c597          	auipc	a1,0x1c
    8000c528:	80c58593          	addi	a1,a1,-2036 # 80027d30 <__func__.0+0x2d0>
    8000c52c:	00f71463          	bne	a4,a5,8000c534 <tinst_tests_gpf+0xcd4>
    8000c530:	1220106f          	j	8000d652 <tinst_tests_gpf+0x1df2>
    8000c534:	0001c517          	auipc	a0,0x1c
    8000c538:	83c50513          	addi	a0,a0,-1988 # 80027d70 <__func__.0+0x310>
    8000c53c:	7ba190ef          	jal	80025cf6 <printf>
    8000c540:	0003d797          	auipc	a5,0x3d
    8000c544:	ad17c783          	lbu	a5,-1327(a5) # 80049011 <excpt+0x1>
    8000c548:	c799                	beqz	a5,8000c556 <tinst_tests_gpf+0xcf6>
    8000c54a:	6418                	ld	a4,8(s0)
    8000c54c:	47dd                	li	a5,23
    8000c54e:	00f71463          	bne	a4,a5,8000c556 <tinst_tests_gpf+0xcf6>
    8000c552:	6020106f          	j	8000db54 <tinst_tests_gpf+0x22f4>
    8000c556:	0001c517          	auipc	a0,0x1c
    8000c55a:	82250513          	addi	a0,a0,-2014 # 80027d78 <__func__.0+0x318>
    8000c55e:	798190ef          	jal	80025cf6 <printf>
    8000c562:	02900513          	li	a0,41
    8000c566:	59a180ef          	jal	80024b00 <putchar>
    8000c56a:	4529                	li	a0,10
    8000c56c:	594180ef          	jal	80024b00 <putchar>
    8000c570:	00090e63          	beqz	s2,8000c58c <tinst_tests_gpf+0xd2c>
    8000c574:	0003d797          	auipc	a5,0x3d
    8000c578:	a9d7c783          	lbu	a5,-1379(a5) # 80049011 <excpt+0x1>
    8000c57c:	c799                	beqz	a5,8000c58a <tinst_tests_gpf+0xd2a>
    8000c57e:	6418                	ld	a4,8(s0)
    8000c580:	47dd                	li	a5,23
    8000c582:	00f71463          	bne	a4,a5,8000c58a <tinst_tests_gpf+0xd2a>
    8000c586:	3d20206f          	j	8000e958 <tinst_tests_gpf+0x30f8>
    8000c58a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c58c:	0330000f          	fence	rw,rw
    8000c590:	4785                	li	a5,1
    8000c592:	0003d717          	auipc	a4,0x3d
    8000c596:	aa073b23          	sd	zero,-1354(a4) # 80049048 <excpt+0x38>
    8000c59a:	00f41023          	sh	a5,0(s0)
    8000c59e:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    8000c5a2:	001007b7          	lui	a5,0x100
    8000c5a6:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c5aa:	07b2                	slli	a5,a5,0xc
    8000c5ac:	0097a4af          	amoadd.w	s1,s1,(a5)
    value = amoadd_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a sgpf",
    8000c5b0:	0001e617          	auipc	a2,0x1e
    8000c5b4:	df060613          	addi	a2,a2,-528 # 8002a3a0 <__func__.0+0x2940>
    8000c5b8:	08200593          	li	a1,130
    8000c5bc:	0001b517          	auipc	a0,0x1b
    8000c5c0:	79c50513          	addi	a0,a0,1948 # 80027d58 <__func__.0+0x2f8>
    8000c5c4:	732190ef          	jal	80025cf6 <printf>
    8000c5c8:	0003d797          	auipc	a5,0x3d
    8000c5cc:	a497c783          	lbu	a5,-1463(a5) # 80049011 <excpt+0x1>
    8000c5d0:	e399                	bnez	a5,8000c5d6 <tinst_tests_gpf+0xd76>
    8000c5d2:	1280106f          	j	8000d6fa <tinst_tests_gpf+0x1e9a>
    8000c5d6:	6418                	ld	a4,8(s0)
    8000c5d8:	47dd                	li	a5,23
    8000c5da:	0001b597          	auipc	a1,0x1b
    8000c5de:	75658593          	addi	a1,a1,1878 # 80027d30 <__func__.0+0x2d0>
    8000c5e2:	00f71463          	bne	a4,a5,8000c5ea <tinst_tests_gpf+0xd8a>
    8000c5e6:	0c60106f          	j	8000d6ac <tinst_tests_gpf+0x1e4c>
    8000c5ea:	0001b517          	auipc	a0,0x1b
    8000c5ee:	78650513          	addi	a0,a0,1926 # 80027d70 <__func__.0+0x310>
    8000c5f2:	704190ef          	jal	80025cf6 <printf>
    8000c5f6:	0003d797          	auipc	a5,0x3d
    8000c5fa:	a1b7c783          	lbu	a5,-1509(a5) # 80049011 <excpt+0x1>
    8000c5fe:	c799                	beqz	a5,8000c60c <tinst_tests_gpf+0xdac>
    8000c600:	6418                	ld	a4,8(s0)
    8000c602:	47dd                	li	a5,23
    8000c604:	00f71463          	bne	a4,a5,8000c60c <tinst_tests_gpf+0xdac>
    8000c608:	5a20106f          	j	8000dbaa <tinst_tests_gpf+0x234a>
    8000c60c:	0001b517          	auipc	a0,0x1b
    8000c610:	76c50513          	addi	a0,a0,1900 # 80027d78 <__func__.0+0x318>
    8000c614:	6e2190ef          	jal	80025cf6 <printf>
    8000c618:	02900513          	li	a0,41
    8000c61c:	4e4180ef          	jal	80024b00 <putchar>
    8000c620:	4529                	li	a0,10
    8000c622:	4de180ef          	jal	80024b00 <putchar>
    8000c626:	00090e63          	beqz	s2,8000c642 <tinst_tests_gpf+0xde2>
    8000c62a:	0003d797          	auipc	a5,0x3d
    8000c62e:	9e77c783          	lbu	a5,-1561(a5) # 80049011 <excpt+0x1>
    8000c632:	c799                	beqz	a5,8000c640 <tinst_tests_gpf+0xde0>
    8000c634:	6418                	ld	a4,8(s0)
    8000c636:	47dd                	li	a5,23
    8000c638:	00f71463          	bne	a4,a5,8000c640 <tinst_tests_gpf+0xde0>
    8000c63c:	38a0206f          	j	8000e9c6 <tinst_tests_gpf+0x3166>
    8000c640:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c642:	0330000f          	fence	rw,rw
    8000c646:	4785                	li	a5,1
    8000c648:	0003d717          	auipc	a4,0x3d
    8000c64c:	a0073023          	sd	zero,-1536(a4) # 80049048 <excpt+0x38>
    8000c650:	00f41023          	sh	a5,0(s0)
    8000c654:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoxor_w, "amoxor.w", uint32_t);
    8000c658:	001007b7          	lui	a5,0x100
    8000c65c:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c660:	07b2                	slli	a5,a5,0xc
    8000c662:	2097a4af          	amoxor.w	s1,s1,(a5)
    value = amoxor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a sgpf",
    8000c666:	0001e617          	auipc	a2,0x1e
    8000c66a:	d7a60613          	addi	a2,a2,-646 # 8002a3e0 <__func__.0+0x2980>
    8000c66e:	08200593          	li	a1,130
    8000c672:	0001b517          	auipc	a0,0x1b
    8000c676:	6e650513          	addi	a0,a0,1766 # 80027d58 <__func__.0+0x2f8>
    8000c67a:	67c190ef          	jal	80025cf6 <printf>
    8000c67e:	0003d797          	auipc	a5,0x3d
    8000c682:	9937c783          	lbu	a5,-1645(a5) # 80049011 <excpt+0x1>
    8000c686:	c399                	beqz	a5,8000c68c <tinst_tests_gpf+0xe2c>
    8000c688:	1400106f          	j	8000d7c8 <tinst_tests_gpf+0x1f68>
    8000c68c:	0001b597          	auipc	a1,0x1b
    8000c690:	6a458593          	addi	a1,a1,1700 # 80027d30 <__func__.0+0x2d0>
    8000c694:	0001b517          	auipc	a0,0x1b
    8000c698:	6dc50513          	addi	a0,a0,1756 # 80027d70 <__func__.0+0x310>
    8000c69c:	65a190ef          	jal	80025cf6 <printf>
    8000c6a0:	0003d797          	auipc	a5,0x3d
    8000c6a4:	9717c783          	lbu	a5,-1679(a5) # 80049011 <excpt+0x1>
    8000c6a8:	c799                	beqz	a5,8000c6b6 <tinst_tests_gpf+0xe56>
    8000c6aa:	6418                	ld	a4,8(s0)
    8000c6ac:	47dd                	li	a5,23
    8000c6ae:	00f71463          	bne	a4,a5,8000c6b6 <tinst_tests_gpf+0xe56>
    8000c6b2:	54e0106f          	j	8000dc00 <tinst_tests_gpf+0x23a0>
    8000c6b6:	0001b517          	auipc	a0,0x1b
    8000c6ba:	6c250513          	addi	a0,a0,1730 # 80027d78 <__func__.0+0x318>
    8000c6be:	638190ef          	jal	80025cf6 <printf>
    8000c6c2:	02900513          	li	a0,41
    8000c6c6:	43a180ef          	jal	80024b00 <putchar>
    8000c6ca:	4529                	li	a0,10
    8000c6cc:	434180ef          	jal	80024b00 <putchar>
    8000c6d0:	00090e63          	beqz	s2,8000c6ec <tinst_tests_gpf+0xe8c>
    8000c6d4:	0003d797          	auipc	a5,0x3d
    8000c6d8:	93d7c783          	lbu	a5,-1731(a5) # 80049011 <excpt+0x1>
    8000c6dc:	c799                	beqz	a5,8000c6ea <tinst_tests_gpf+0xe8a>
    8000c6de:	6418                	ld	a4,8(s0)
    8000c6e0:	47dd                	li	a5,23
    8000c6e2:	00f71463          	bne	a4,a5,8000c6ea <tinst_tests_gpf+0xe8a>
    8000c6e6:	34e0206f          	j	8000ea34 <tinst_tests_gpf+0x31d4>
    8000c6ea:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
       TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c6ec:	0330000f          	fence	rw,rw
    8000c6f0:	4785                	li	a5,1
    8000c6f2:	0003d717          	auipc	a4,0x3d
    8000c6f6:	94073b23          	sd	zero,-1706(a4) # 80049048 <excpt+0x38>
    8000c6fa:	00f41023          	sh	a5,0(s0)
    8000c6fe:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoand_w, "amoand.w", uint32_t);
    8000c702:	001007b7          	lui	a5,0x100
    8000c706:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c70a:	07b2                	slli	a5,a5,0xc
    8000c70c:	6097a4af          	amoand.w	s1,s1,(a5)
    value = amoand_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a sgpf",
    8000c710:	0001e617          	auipc	a2,0x1e
    8000c714:	d1060613          	addi	a2,a2,-752 # 8002a420 <__func__.0+0x29c0>
    8000c718:	08200593          	li	a1,130
    8000c71c:	0001b517          	auipc	a0,0x1b
    8000c720:	63c50513          	addi	a0,a0,1596 # 80027d58 <__func__.0+0x2f8>
    8000c724:	5d2190ef          	jal	80025cf6 <printf>
    8000c728:	0003d797          	auipc	a5,0x3d
    8000c72c:	8e97c783          	lbu	a5,-1815(a5) # 80049011 <excpt+0x1>
    8000c730:	c399                	beqz	a5,8000c736 <tinst_tests_gpf+0xed6>
    8000c732:	1460106f          	j	8000d878 <tinst_tests_gpf+0x2018>
    8000c736:	0001b597          	auipc	a1,0x1b
    8000c73a:	5fa58593          	addi	a1,a1,1530 # 80027d30 <__func__.0+0x2d0>
    8000c73e:	0001b517          	auipc	a0,0x1b
    8000c742:	63250513          	addi	a0,a0,1586 # 80027d70 <__func__.0+0x310>
    8000c746:	5b0190ef          	jal	80025cf6 <printf>
    8000c74a:	0003d797          	auipc	a5,0x3d
    8000c74e:	8c77c783          	lbu	a5,-1849(a5) # 80049011 <excpt+0x1>
    8000c752:	c799                	beqz	a5,8000c760 <tinst_tests_gpf+0xf00>
    8000c754:	6418                	ld	a4,8(s0)
    8000c756:	47dd                	li	a5,23
    8000c758:	00f71463          	bne	a4,a5,8000c760 <tinst_tests_gpf+0xf00>
    8000c75c:	59f0106f          	j	8000e4fa <tinst_tests_gpf+0x2c9a>
    8000c760:	0001b517          	auipc	a0,0x1b
    8000c764:	61850513          	addi	a0,a0,1560 # 80027d78 <__func__.0+0x318>
    8000c768:	58e190ef          	jal	80025cf6 <printf>
    8000c76c:	02900513          	li	a0,41
    8000c770:	390180ef          	jal	80024b00 <putchar>
    8000c774:	4529                	li	a0,10
    8000c776:	38a180ef          	jal	80024b00 <putchar>
    8000c77a:	00090e63          	beqz	s2,8000c796 <tinst_tests_gpf+0xf36>
    8000c77e:	0003d797          	auipc	a5,0x3d
    8000c782:	8937c783          	lbu	a5,-1901(a5) # 80049011 <excpt+0x1>
    8000c786:	c799                	beqz	a5,8000c794 <tinst_tests_gpf+0xf34>
    8000c788:	6418                	ld	a4,8(s0)
    8000c78a:	47dd                	li	a5,23
    8000c78c:	00f71463          	bne	a4,a5,8000c794 <tinst_tests_gpf+0xf34>
    8000c790:	2e60206f          	j	8000ea76 <tinst_tests_gpf+0x3216>
    8000c794:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c796:	0330000f          	fence	rw,rw
    8000c79a:	4785                	li	a5,1
    8000c79c:	0003d717          	auipc	a4,0x3d
    8000c7a0:	8a073623          	sd	zero,-1876(a4) # 80049048 <excpt+0x38>
    8000c7a4:	00f41023          	sh	a5,0(s0)
    8000c7a8:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoor_w, "amoor.w", uint32_t);
    8000c7ac:	001007b7          	lui	a5,0x100
    8000c7b0:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c7b4:	07b2                	slli	a5,a5,0xc
    8000c7b6:	4097a4af          	amoor.w	s1,s1,(a5)
    value = amoor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a sgpf",
    8000c7ba:	0001e617          	auipc	a2,0x1e
    8000c7be:	ca660613          	addi	a2,a2,-858 # 8002a460 <__func__.0+0x2a00>
    8000c7c2:	08200593          	li	a1,130
    8000c7c6:	0001b517          	auipc	a0,0x1b
    8000c7ca:	59250513          	addi	a0,a0,1426 # 80027d58 <__func__.0+0x2f8>
    8000c7ce:	528190ef          	jal	80025cf6 <printf>
    8000c7d2:	0003d797          	auipc	a5,0x3d
    8000c7d6:	83f7c783          	lbu	a5,-1985(a5) # 80049011 <excpt+0x1>
    8000c7da:	e399                	bnez	a5,8000c7e0 <tinst_tests_gpf+0xf80>
    8000c7dc:	6020106f          	j	8000ddde <tinst_tests_gpf+0x257e>
    8000c7e0:	6418                	ld	a4,8(s0)
    8000c7e2:	47dd                	li	a5,23
    8000c7e4:	0001b597          	auipc	a1,0x1b
    8000c7e8:	54c58593          	addi	a1,a1,1356 # 80027d30 <__func__.0+0x2d0>
    8000c7ec:	00f71463          	bne	a4,a5,8000c7f4 <tinst_tests_gpf+0xf94>
    8000c7f0:	5a20106f          	j	8000dd92 <tinst_tests_gpf+0x2532>
    8000c7f4:	0001b517          	auipc	a0,0x1b
    8000c7f8:	57c50513          	addi	a0,a0,1404 # 80027d70 <__func__.0+0x310>
    8000c7fc:	4fa190ef          	jal	80025cf6 <printf>
    8000c800:	0003d797          	auipc	a5,0x3d
    8000c804:	8117c783          	lbu	a5,-2031(a5) # 80049011 <excpt+0x1>
    8000c808:	c799                	beqz	a5,8000c816 <tinst_tests_gpf+0xfb6>
    8000c80a:	6418                	ld	a4,8(s0)
    8000c80c:	47dd                	li	a5,23
    8000c80e:	00f71463          	bne	a4,a5,8000c816 <tinst_tests_gpf+0xfb6>
    8000c812:	52b0106f          	j	8000e53c <tinst_tests_gpf+0x2cdc>
    8000c816:	0001b517          	auipc	a0,0x1b
    8000c81a:	56250513          	addi	a0,a0,1378 # 80027d78 <__func__.0+0x318>
    8000c81e:	4d8190ef          	jal	80025cf6 <printf>
    8000c822:	02900513          	li	a0,41
    8000c826:	2da180ef          	jal	80024b00 <putchar>
    8000c82a:	4529                	li	a0,10
    8000c82c:	2d4180ef          	jal	80024b00 <putchar>
    8000c830:	00090e63          	beqz	s2,8000c84c <tinst_tests_gpf+0xfec>
    8000c834:	0003c797          	auipc	a5,0x3c
    8000c838:	7dd7c783          	lbu	a5,2013(a5) # 80049011 <excpt+0x1>
    8000c83c:	c799                	beqz	a5,8000c84a <tinst_tests_gpf+0xfea>
    8000c83e:	6418                	ld	a4,8(s0)
    8000c840:	47dd                	li	a5,23
    8000c842:	00f71463          	bne	a4,a5,8000c84a <tinst_tests_gpf+0xfea>
    8000c846:	2a20206f          	j	8000eae8 <tinst_tests_gpf+0x3288>
    8000c84a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c84c:	0330000f          	fence	rw,rw
    8000c850:	4785                	li	a5,1
    8000c852:	0003c717          	auipc	a4,0x3c
    8000c856:	7e073b23          	sd	zero,2038(a4) # 80049048 <excpt+0x38>
    8000c85a:	00f41023          	sh	a5,0(s0)
    8000c85e:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomin_w, "amomin.w", uint32_t);
    8000c862:	001007b7          	lui	a5,0x100
    8000c866:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c86a:	07b2                	slli	a5,a5,0xc
    8000c86c:	8097a4af          	amomin.w	s1,s1,(a5)
    value = amomin_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a sgpf",
    8000c870:	0001e617          	auipc	a2,0x1e
    8000c874:	c3060613          	addi	a2,a2,-976 # 8002a4a0 <__func__.0+0x2a40>
    8000c878:	08200593          	li	a1,130
    8000c87c:	0001b517          	auipc	a0,0x1b
    8000c880:	4dc50513          	addi	a0,a0,1244 # 80027d58 <__func__.0+0x2f8>
    8000c884:	472190ef          	jal	80025cf6 <printf>
    8000c888:	0003c797          	auipc	a5,0x3c
    8000c88c:	7897c783          	lbu	a5,1929(a5) # 80049011 <excpt+0x1>
    8000c890:	e399                	bnez	a5,8000c896 <tinst_tests_gpf+0x1036>
    8000c892:	5de0106f          	j	8000de70 <tinst_tests_gpf+0x2610>
    8000c896:	6418                	ld	a4,8(s0)
    8000c898:	47dd                	li	a5,23
    8000c89a:	0001b597          	auipc	a1,0x1b
    8000c89e:	49658593          	addi	a1,a1,1174 # 80027d30 <__func__.0+0x2d0>
    8000c8a2:	00f71463          	bne	a4,a5,8000c8aa <tinst_tests_gpf+0x104a>
    8000c8a6:	57e0106f          	j	8000de24 <tinst_tests_gpf+0x25c4>
    8000c8aa:	0001b517          	auipc	a0,0x1b
    8000c8ae:	4c650513          	addi	a0,a0,1222 # 80027d70 <__func__.0+0x310>
    8000c8b2:	444190ef          	jal	80025cf6 <printf>
    8000c8b6:	0003c797          	auipc	a5,0x3c
    8000c8ba:	75b7c783          	lbu	a5,1883(a5) # 80049011 <excpt+0x1>
    8000c8be:	c799                	beqz	a5,8000c8cc <tinst_tests_gpf+0x106c>
    8000c8c0:	6418                	ld	a4,8(s0)
    8000c8c2:	47dd                	li	a5,23
    8000c8c4:	00f71463          	bne	a4,a5,8000c8cc <tinst_tests_gpf+0x106c>
    8000c8c8:	4b70106f          	j	8000e57e <tinst_tests_gpf+0x2d1e>
    8000c8cc:	0001b517          	auipc	a0,0x1b
    8000c8d0:	4ac50513          	addi	a0,a0,1196 # 80027d78 <__func__.0+0x318>
    8000c8d4:	422190ef          	jal	80025cf6 <printf>
    8000c8d8:	02900513          	li	a0,41
    8000c8dc:	224180ef          	jal	80024b00 <putchar>
    8000c8e0:	4529                	li	a0,10
    8000c8e2:	21e180ef          	jal	80024b00 <putchar>
    8000c8e6:	00090e63          	beqz	s2,8000c902 <tinst_tests_gpf+0x10a2>
    8000c8ea:	0003c797          	auipc	a5,0x3c
    8000c8ee:	7277c783          	lbu	a5,1831(a5) # 80049011 <excpt+0x1>
    8000c8f2:	c799                	beqz	a5,8000c900 <tinst_tests_gpf+0x10a0>
    8000c8f4:	6418                	ld	a4,8(s0)
    8000c8f6:	47dd                	li	a5,23
    8000c8f8:	00f71463          	bne	a4,a5,8000c900 <tinst_tests_gpf+0x10a0>
    8000c8fc:	25e0206f          	j	8000eb5a <tinst_tests_gpf+0x32fa>
    8000c900:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c902:	0330000f          	fence	rw,rw
    8000c906:	4785                	li	a5,1
    8000c908:	0003c717          	auipc	a4,0x3c
    8000c90c:	74073023          	sd	zero,1856(a4) # 80049048 <excpt+0x38>
    8000c910:	00f41023          	sh	a5,0(s0)
    8000c914:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomax_w, "amomax.w", uint32_t);
    8000c918:	001007b7          	lui	a5,0x100
    8000c91c:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c920:	07b2                	slli	a5,a5,0xc
    8000c922:	a097a4af          	amomax.w	s1,s1,(a5)
    value = amomax_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a sgpf",
    8000c926:	0001e617          	auipc	a2,0x1e
    8000c92a:	bba60613          	addi	a2,a2,-1094 # 8002a4e0 <__func__.0+0x2a80>
    8000c92e:	08200593          	li	a1,130
    8000c932:	0001b517          	auipc	a0,0x1b
    8000c936:	42650513          	addi	a0,a0,1062 # 80027d58 <__func__.0+0x2f8>
    8000c93a:	3bc190ef          	jal	80025cf6 <printf>
    8000c93e:	0003c797          	auipc	a5,0x3c
    8000c942:	6d37c783          	lbu	a5,1747(a5) # 80049011 <excpt+0x1>
    8000c946:	e399                	bnez	a5,8000c94c <tinst_tests_gpf+0x10ec>
    8000c948:	5be0106f          	j	8000df06 <tinst_tests_gpf+0x26a6>
    8000c94c:	6418                	ld	a4,8(s0)
    8000c94e:	47dd                	li	a5,23
    8000c950:	0001b597          	auipc	a1,0x1b
    8000c954:	3e058593          	addi	a1,a1,992 # 80027d30 <__func__.0+0x2d0>
    8000c958:	00f71463          	bne	a4,a5,8000c960 <tinst_tests_gpf+0x1100>
    8000c95c:	55c0106f          	j	8000deb8 <tinst_tests_gpf+0x2658>
    8000c960:	0001b517          	auipc	a0,0x1b
    8000c964:	41050513          	addi	a0,a0,1040 # 80027d70 <__func__.0+0x310>
    8000c968:	38e190ef          	jal	80025cf6 <printf>
    8000c96c:	0003c797          	auipc	a5,0x3c
    8000c970:	6a57c783          	lbu	a5,1701(a5) # 80049011 <excpt+0x1>
    8000c974:	c799                	beqz	a5,8000c982 <tinst_tests_gpf+0x1122>
    8000c976:	6418                	ld	a4,8(s0)
    8000c978:	47dd                	li	a5,23
    8000c97a:	00f71463          	bne	a4,a5,8000c982 <tinst_tests_gpf+0x1122>
    8000c97e:	4430106f          	j	8000e5c0 <tinst_tests_gpf+0x2d60>
    8000c982:	0001b517          	auipc	a0,0x1b
    8000c986:	3f650513          	addi	a0,a0,1014 # 80027d78 <__func__.0+0x318>
    8000c98a:	36c190ef          	jal	80025cf6 <printf>
    8000c98e:	02900513          	li	a0,41
    8000c992:	16e180ef          	jal	80024b00 <putchar>
    8000c996:	4529                	li	a0,10
    8000c998:	168180ef          	jal	80024b00 <putchar>
    8000c99c:	00090e63          	beqz	s2,8000c9b8 <tinst_tests_gpf+0x1158>
    8000c9a0:	0003c797          	auipc	a5,0x3c
    8000c9a4:	6717c783          	lbu	a5,1649(a5) # 80049011 <excpt+0x1>
    8000c9a8:	c799                	beqz	a5,8000c9b6 <tinst_tests_gpf+0x1156>
    8000c9aa:	6418                	ld	a4,8(s0)
    8000c9ac:	47dd                	li	a5,23
    8000c9ae:	00f71463          	bne	a4,a5,8000c9b6 <tinst_tests_gpf+0x1156>
    8000c9b2:	1ea0206f          	j	8000eb9c <tinst_tests_gpf+0x333c>
    8000c9b6:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c9b8:	0330000f          	fence	rw,rw
    8000c9bc:	4785                	li	a5,1
    8000c9be:	0003c717          	auipc	a4,0x3c
    8000c9c2:	68073523          	sd	zero,1674(a4) # 80049048 <excpt+0x38>
    8000c9c6:	00f41023          	sh	a5,0(s0)
    8000c9ca:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amominu_w, "amominu.w", uint32_t);
    8000c9ce:	001007b7          	lui	a5,0x100
    8000c9d2:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c9d6:	07b2                	slli	a5,a5,0xc
    8000c9d8:	c097a4af          	amominu.w	s1,s1,(a5)
    value = amominu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a sgpf",
    8000c9dc:	0001e617          	auipc	a2,0x1e
    8000c9e0:	b4460613          	addi	a2,a2,-1212 # 8002a520 <__func__.0+0x2ac0>
    8000c9e4:	08200593          	li	a1,130
    8000c9e8:	0001b517          	auipc	a0,0x1b
    8000c9ec:	37050513          	addi	a0,a0,880 # 80027d58 <__func__.0+0x2f8>
    8000c9f0:	306190ef          	jal	80025cf6 <printf>
    8000c9f4:	0003c797          	auipc	a5,0x3c
    8000c9f8:	61d7c783          	lbu	a5,1565(a5) # 80049011 <excpt+0x1>
    8000c9fc:	e399                	bnez	a5,8000ca02 <tinst_tests_gpf+0x11a2>
    8000c9fe:	5a40106f          	j	8000dfa2 <tinst_tests_gpf+0x2742>
    8000ca02:	6418                	ld	a4,8(s0)
    8000ca04:	47dd                	li	a5,23
    8000ca06:	0001b597          	auipc	a1,0x1b
    8000ca0a:	32a58593          	addi	a1,a1,810 # 80027d30 <__func__.0+0x2d0>
    8000ca0e:	00f71463          	bne	a4,a5,8000ca16 <tinst_tests_gpf+0x11b6>
    8000ca12:	5420106f          	j	8000df54 <tinst_tests_gpf+0x26f4>
    8000ca16:	0001b517          	auipc	a0,0x1b
    8000ca1a:	35a50513          	addi	a0,a0,858 # 80027d70 <__func__.0+0x310>
    8000ca1e:	2d8190ef          	jal	80025cf6 <printf>
    8000ca22:	0003c797          	auipc	a5,0x3c
    8000ca26:	5ef7c783          	lbu	a5,1519(a5) # 80049011 <excpt+0x1>
    8000ca2a:	c799                	beqz	a5,8000ca38 <tinst_tests_gpf+0x11d8>
    8000ca2c:	6418                	ld	a4,8(s0)
    8000ca2e:	47dd                	li	a5,23
    8000ca30:	00f71463          	bne	a4,a5,8000ca38 <tinst_tests_gpf+0x11d8>
    8000ca34:	3cf0106f          	j	8000e602 <tinst_tests_gpf+0x2da2>
    8000ca38:	0001b517          	auipc	a0,0x1b
    8000ca3c:	34050513          	addi	a0,a0,832 # 80027d78 <__func__.0+0x318>
    8000ca40:	2b6190ef          	jal	80025cf6 <printf>
    8000ca44:	02900513          	li	a0,41
    8000ca48:	0b8180ef          	jal	80024b00 <putchar>
    8000ca4c:	4529                	li	a0,10
    8000ca4e:	0b2180ef          	jal	80024b00 <putchar>
    8000ca52:	00090e63          	beqz	s2,8000ca6e <tinst_tests_gpf+0x120e>
    8000ca56:	0003c797          	auipc	a5,0x3c
    8000ca5a:	5bb7c783          	lbu	a5,1467(a5) # 80049011 <excpt+0x1>
    8000ca5e:	c799                	beqz	a5,8000ca6c <tinst_tests_gpf+0x120c>
    8000ca60:	6418                	ld	a4,8(s0)
    8000ca62:	47dd                	li	a5,23
    8000ca64:	00f71463          	bne	a4,a5,8000ca6c <tinst_tests_gpf+0x120c>
    8000ca68:	1760206f          	j	8000ebde <tinst_tests_gpf+0x337e>
    8000ca6c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000ca6e:	0330000f          	fence	rw,rw
    8000ca72:	4785                	li	a5,1
    8000ca74:	0003c717          	auipc	a4,0x3c
    8000ca78:	5c073a23          	sd	zero,1492(a4) # 80049048 <excpt+0x38>
    8000ca7c:	00f41023          	sh	a5,0(s0)
    8000ca80:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomaxu_w, "amomaxu.w", uint32_t);
    8000ca84:	001007b7          	lui	a5,0x100
    8000ca88:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000ca8c:	07b2                	slli	a5,a5,0xc
    8000ca8e:	e097a4af          	amomaxu.w	s1,s1,(a5)
    value = amomaxu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000ca92:	0001e617          	auipc	a2,0x1e
    8000ca96:	ad660613          	addi	a2,a2,-1322 # 8002a568 <__func__.0+0x2b08>
    8000ca9a:	08200593          	li	a1,130
    8000ca9e:	0001b517          	auipc	a0,0x1b
    8000caa2:	2ba50513          	addi	a0,a0,698 # 80027d58 <__func__.0+0x2f8>
    8000caa6:	250190ef          	jal	80025cf6 <printf>
    8000caaa:	0003c797          	auipc	a5,0x3c
    8000caae:	5677c783          	lbu	a5,1383(a5) # 80049011 <excpt+0x1>
    value = amomaxu_w(vaddr_f,value);
    8000cab2:	1482                	slli	s1,s1,0x20
    8000cab4:	9081                	srli	s1,s1,0x20
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000cab6:	e399                	bnez	a5,8000cabc <tinst_tests_gpf+0x125c>
    8000cab8:	5860106f          	j	8000e03e <tinst_tests_gpf+0x27de>
    8000cabc:	6418                	ld	a4,8(s0)
    8000cabe:	47dd                	li	a5,23
    8000cac0:	0001b597          	auipc	a1,0x1b
    8000cac4:	27058593          	addi	a1,a1,624 # 80027d30 <__func__.0+0x2d0>
    8000cac8:	00f71463          	bne	a4,a5,8000cad0 <tinst_tests_gpf+0x1270>
    8000cacc:	5240106f          	j	8000dff0 <tinst_tests_gpf+0x2790>
    8000cad0:	0001b517          	auipc	a0,0x1b
    8000cad4:	2a050513          	addi	a0,a0,672 # 80027d70 <__func__.0+0x310>
    8000cad8:	21e190ef          	jal	80025cf6 <printf>
    8000cadc:	0003c797          	auipc	a5,0x3c
    8000cae0:	5357c783          	lbu	a5,1333(a5) # 80049011 <excpt+0x1>
    8000cae4:	c799                	beqz	a5,8000caf2 <tinst_tests_gpf+0x1292>
    8000cae6:	6418                	ld	a4,8(s0)
    8000cae8:	47dd                	li	a5,23
    8000caea:	00f71463          	bne	a4,a5,8000caf2 <tinst_tests_gpf+0x1292>
    8000caee:	3570106f          	j	8000e644 <tinst_tests_gpf+0x2de4>
    8000caf2:	0001b517          	auipc	a0,0x1b
    8000caf6:	28650513          	addi	a0,a0,646 # 80027d78 <__func__.0+0x318>
    8000cafa:	1fc190ef          	jal	80025cf6 <printf>
    8000cafe:	02900513          	li	a0,41
    8000cb02:	7ff170ef          	jal	80024b00 <putchar>
    8000cb06:	4529                	li	a0,10
    8000cb08:	7f9170ef          	jal	80024b00 <putchar>
    8000cb0c:	00090e63          	beqz	s2,8000cb28 <tinst_tests_gpf+0x12c8>
    8000cb10:	0003c797          	auipc	a5,0x3c
    8000cb14:	5017c783          	lbu	a5,1281(a5) # 80049011 <excpt+0x1>
    8000cb18:	c799                	beqz	a5,8000cb26 <tinst_tests_gpf+0x12c6>
    8000cb1a:	6418                	ld	a4,8(s0)
    8000cb1c:	47dd                	li	a5,23
    8000cb1e:	00f71463          	bne	a4,a5,8000cb26 <tinst_tests_gpf+0x12c6>
    8000cb22:	0fe0206f          	j	8000ec20 <tinst_tests_gpf+0x33c0>
    8000cb26:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000cb28:	0330000f          	fence	rw,rw
    8000cb2c:	4785                	li	a5,1
    8000cb2e:	0003c717          	auipc	a4,0x3c
    8000cb32:	50073d23          	sd	zero,1306(a4) # 80049048 <excpt+0x38>
    8000cb36:	00f41023          	sh	a5,0(s0)
    8000cb3a:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoswap_d, "amoswap.d", uint64_t);
    8000cb3e:	001007b7          	lui	a5,0x100
    8000cb42:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000cb46:	07b2                	slli	a5,a5,0xc
    8000cb48:	0897b4af          	amoswap.d	s1,s1,(a5)
    value = amoswap_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a sgpf",
    8000cb4c:	0001e617          	auipc	a2,0x1e
    8000cb50:	a6460613          	addi	a2,a2,-1436 # 8002a5b0 <__func__.0+0x2b50>
    8000cb54:	08200593          	li	a1,130
    8000cb58:	0001b517          	auipc	a0,0x1b
    8000cb5c:	20050513          	addi	a0,a0,512 # 80027d58 <__func__.0+0x2f8>
    8000cb60:	196190ef          	jal	80025cf6 <printf>
    8000cb64:	0003c797          	auipc	a5,0x3c
    8000cb68:	4ad7c783          	lbu	a5,1197(a5) # 80049011 <excpt+0x1>
    8000cb6c:	e399                	bnez	a5,8000cb72 <tinst_tests_gpf+0x1312>
    8000cb6e:	56c0106f          	j	8000e0da <tinst_tests_gpf+0x287a>
    8000cb72:	6418                	ld	a4,8(s0)
    8000cb74:	47dd                	li	a5,23
    8000cb76:	0001b597          	auipc	a1,0x1b
    8000cb7a:	1ba58593          	addi	a1,a1,442 # 80027d30 <__func__.0+0x2d0>
    8000cb7e:	00f71463          	bne	a4,a5,8000cb86 <tinst_tests_gpf+0x1326>
    8000cb82:	50a0106f          	j	8000e08c <tinst_tests_gpf+0x282c>
    8000cb86:	0001b517          	auipc	a0,0x1b
    8000cb8a:	1ea50513          	addi	a0,a0,490 # 80027d70 <__func__.0+0x310>
    8000cb8e:	168190ef          	jal	80025cf6 <printf>
    8000cb92:	0003c797          	auipc	a5,0x3c
    8000cb96:	47f7c783          	lbu	a5,1151(a5) # 80049011 <excpt+0x1>
    8000cb9a:	c799                	beqz	a5,8000cba8 <tinst_tests_gpf+0x1348>
    8000cb9c:	6418                	ld	a4,8(s0)
    8000cb9e:	47dd                	li	a5,23
    8000cba0:	00f71463          	bne	a4,a5,8000cba8 <tinst_tests_gpf+0x1348>
    8000cba4:	2e30106f          	j	8000e686 <tinst_tests_gpf+0x2e26>
    8000cba8:	0001b517          	auipc	a0,0x1b
    8000cbac:	1d050513          	addi	a0,a0,464 # 80027d78 <__func__.0+0x318>
    8000cbb0:	146190ef          	jal	80025cf6 <printf>
    8000cbb4:	02900513          	li	a0,41
    8000cbb8:	749170ef          	jal	80024b00 <putchar>
    8000cbbc:	4529                	li	a0,10
    8000cbbe:	743170ef          	jal	80024b00 <putchar>
    8000cbc2:	00090e63          	beqz	s2,8000cbde <tinst_tests_gpf+0x137e>
    8000cbc6:	0003c797          	auipc	a5,0x3c
    8000cbca:	44b7c783          	lbu	a5,1099(a5) # 80049011 <excpt+0x1>
    8000cbce:	c799                	beqz	a5,8000cbdc <tinst_tests_gpf+0x137c>
    8000cbd0:	6418                	ld	a4,8(s0)
    8000cbd2:	47dd                	li	a5,23
    8000cbd4:	00f71463          	bne	a4,a5,8000cbdc <tinst_tests_gpf+0x137c>
    8000cbd8:	08a0206f          	j	8000ec62 <tinst_tests_gpf+0x3402>
    8000cbdc:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000cbde:	0330000f          	fence	rw,rw
    8000cbe2:	4785                	li	a5,1
    8000cbe4:	0003c717          	auipc	a4,0x3c
    8000cbe8:	46073223          	sd	zero,1124(a4) # 80049048 <excpt+0x38>
    8000cbec:	00f41023          	sh	a5,0(s0)
    8000cbf0:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoadd_d, "amoadd.d", uint64_t);
    8000cbf4:	001007b7          	lui	a5,0x100
    8000cbf8:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000cbfc:	07b2                	slli	a5,a5,0xc
    8000cbfe:	0097b4af          	amoadd.d	s1,s1,(a5)
    value = amoadd_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a sgpf",
    8000cc02:	0001e617          	auipc	a2,0x1e
    8000cc06:	9f660613          	addi	a2,a2,-1546 # 8002a5f8 <__func__.0+0x2b98>
    8000cc0a:	08200593          	li	a1,130
    8000cc0e:	0001b517          	auipc	a0,0x1b
    8000cc12:	14a50513          	addi	a0,a0,330 # 80027d58 <__func__.0+0x2f8>
    8000cc16:	0e0190ef          	jal	80025cf6 <printf>
    8000cc1a:	0003c797          	auipc	a5,0x3c
    8000cc1e:	3f77c783          	lbu	a5,1015(a5) # 80049011 <excpt+0x1>
    8000cc22:	e399                	bnez	a5,8000cc28 <tinst_tests_gpf+0x13c8>
    8000cc24:	5520106f          	j	8000e176 <tinst_tests_gpf+0x2916>
    8000cc28:	6418                	ld	a4,8(s0)
    8000cc2a:	47dd                	li	a5,23
    8000cc2c:	0001b597          	auipc	a1,0x1b
    8000cc30:	10458593          	addi	a1,a1,260 # 80027d30 <__func__.0+0x2d0>
    8000cc34:	00f71463          	bne	a4,a5,8000cc3c <tinst_tests_gpf+0x13dc>
    8000cc38:	4f00106f          	j	8000e128 <tinst_tests_gpf+0x28c8>
    8000cc3c:	0001b517          	auipc	a0,0x1b
    8000cc40:	13450513          	addi	a0,a0,308 # 80027d70 <__func__.0+0x310>
    8000cc44:	0b2190ef          	jal	80025cf6 <printf>
    8000cc48:	0003c797          	auipc	a5,0x3c
    8000cc4c:	3c97c783          	lbu	a5,969(a5) # 80049011 <excpt+0x1>
    8000cc50:	c799                	beqz	a5,8000cc5e <tinst_tests_gpf+0x13fe>
    8000cc52:	6418                	ld	a4,8(s0)
    8000cc54:	47dd                	li	a5,23
    8000cc56:	00f71463          	bne	a4,a5,8000cc5e <tinst_tests_gpf+0x13fe>
    8000cc5a:	26f0106f          	j	8000e6c8 <tinst_tests_gpf+0x2e68>
    8000cc5e:	0001b517          	auipc	a0,0x1b
    8000cc62:	11a50513          	addi	a0,a0,282 # 80027d78 <__func__.0+0x318>
    8000cc66:	090190ef          	jal	80025cf6 <printf>
    8000cc6a:	02900513          	li	a0,41
    8000cc6e:	693170ef          	jal	80024b00 <putchar>
    8000cc72:	4529                	li	a0,10
    8000cc74:	68d170ef          	jal	80024b00 <putchar>
    8000cc78:	00090e63          	beqz	s2,8000cc94 <tinst_tests_gpf+0x1434>
    8000cc7c:	0003c797          	auipc	a5,0x3c
    8000cc80:	3957c783          	lbu	a5,917(a5) # 80049011 <excpt+0x1>
    8000cc84:	c799                	beqz	a5,8000cc92 <tinst_tests_gpf+0x1432>
    8000cc86:	6418                	ld	a4,8(s0)
    8000cc88:	47dd                	li	a5,23
    8000cc8a:	00f71463          	bne	a4,a5,8000cc92 <tinst_tests_gpf+0x1432>
    8000cc8e:	0160206f          	j	8000eca4 <tinst_tests_gpf+0x3444>
    8000cc92:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000cc94:	0330000f          	fence	rw,rw
    8000cc98:	4785                	li	a5,1
    8000cc9a:	0003c717          	auipc	a4,0x3c
    8000cc9e:	3a073723          	sd	zero,942(a4) # 80049048 <excpt+0x38>
    8000cca2:	00f41023          	sh	a5,0(s0)
    8000cca6:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoxor_d, "amoxor.d", uint64_t);
    8000ccaa:	001007b7          	lui	a5,0x100
    8000ccae:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000ccb2:	07b2                	slli	a5,a5,0xc
    8000ccb4:	2097b4af          	amoxor.d	s1,s1,(a5)
    value = amoxor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a sgpf",
    8000ccb8:	0001e617          	auipc	a2,0x1e
    8000ccbc:	98060613          	addi	a2,a2,-1664 # 8002a638 <__func__.0+0x2bd8>
    8000ccc0:	08200593          	li	a1,130
    8000ccc4:	0001b517          	auipc	a0,0x1b
    8000ccc8:	09450513          	addi	a0,a0,148 # 80027d58 <__func__.0+0x2f8>
    8000cccc:	02a190ef          	jal	80025cf6 <printf>
    8000ccd0:	0003c797          	auipc	a5,0x3c
    8000ccd4:	3417c783          	lbu	a5,833(a5) # 80049011 <excpt+0x1>
    8000ccd8:	e399                	bnez	a5,8000ccde <tinst_tests_gpf+0x147e>
    8000ccda:	5220106f          	j	8000e1fc <tinst_tests_gpf+0x299c>
    8000ccde:	6418                	ld	a4,8(s0)
    8000cce0:	47dd                	li	a5,23
    8000cce2:	0001b597          	auipc	a1,0x1b
    8000cce6:	04e58593          	addi	a1,a1,78 # 80027d30 <__func__.0+0x2d0>
    8000ccea:	00f71463          	bne	a4,a5,8000ccf2 <tinst_tests_gpf+0x1492>
    8000ccee:	4c00106f          	j	8000e1ae <tinst_tests_gpf+0x294e>
    8000ccf2:	0001b517          	auipc	a0,0x1b
    8000ccf6:	07e50513          	addi	a0,a0,126 # 80027d70 <__func__.0+0x310>
    8000ccfa:	7fd180ef          	jal	80025cf6 <printf>
    8000ccfe:	0003c797          	auipc	a5,0x3c
    8000cd02:	3137c783          	lbu	a5,787(a5) # 80049011 <excpt+0x1>
    8000cd06:	c799                	beqz	a5,8000cd14 <tinst_tests_gpf+0x14b4>
    8000cd08:	6418                	ld	a4,8(s0)
    8000cd0a:	47dd                	li	a5,23
    8000cd0c:	00f71463          	bne	a4,a5,8000cd14 <tinst_tests_gpf+0x14b4>
    8000cd10:	1fb0106f          	j	8000e70a <tinst_tests_gpf+0x2eaa>
    8000cd14:	0001b517          	auipc	a0,0x1b
    8000cd18:	06450513          	addi	a0,a0,100 # 80027d78 <__func__.0+0x318>
    8000cd1c:	7db180ef          	jal	80025cf6 <printf>
    8000cd20:	02900513          	li	a0,41
    8000cd24:	5dd170ef          	jal	80024b00 <putchar>
    8000cd28:	4529                	li	a0,10
    8000cd2a:	5d7170ef          	jal	80024b00 <putchar>
    8000cd2e:	00090e63          	beqz	s2,8000cd4a <tinst_tests_gpf+0x14ea>
    8000cd32:	0003c797          	auipc	a5,0x3c
    8000cd36:	2df7c783          	lbu	a5,735(a5) # 80049011 <excpt+0x1>
    8000cd3a:	c799                	beqz	a5,8000cd48 <tinst_tests_gpf+0x14e8>
    8000cd3c:	6418                	ld	a4,8(s0)
    8000cd3e:	47dd                	li	a5,23
    8000cd40:	00f71463          	bne	a4,a5,8000cd48 <tinst_tests_gpf+0x14e8>
    8000cd44:	7a30106f          	j	8000ece6 <tinst_tests_gpf+0x3486>
    8000cd48:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000cd4a:	0330000f          	fence	rw,rw
    8000cd4e:	4785                	li	a5,1
    8000cd50:	0003c717          	auipc	a4,0x3c
    8000cd54:	2e073c23          	sd	zero,760(a4) # 80049048 <excpt+0x38>
    8000cd58:	00f41023          	sh	a5,0(s0)
    8000cd5c:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    8000cd60:	001007b7          	lui	a5,0x100
    8000cd64:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000cd68:	07b2                	slli	a5,a5,0xc
    8000cd6a:	6097b4af          	amoand.d	s1,s1,(a5)
    value = amoand_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a sgpf",
    8000cd6e:	0001e617          	auipc	a2,0x1e
    8000cd72:	90a60613          	addi	a2,a2,-1782 # 8002a678 <__func__.0+0x2c18>
    8000cd76:	08200593          	li	a1,130
    8000cd7a:	0001b517          	auipc	a0,0x1b
    8000cd7e:	fde50513          	addi	a0,a0,-34 # 80027d58 <__func__.0+0x2f8>
    8000cd82:	775180ef          	jal	80025cf6 <printf>
    8000cd86:	0003c797          	auipc	a5,0x3c
    8000cd8a:	28b7c783          	lbu	a5,651(a5) # 80049011 <excpt+0x1>
    8000cd8e:	e399                	bnez	a5,8000cd94 <tinst_tests_gpf+0x1534>
    8000cd90:	4f60106f          	j	8000e286 <tinst_tests_gpf+0x2a26>
    8000cd94:	6418                	ld	a4,8(s0)
    8000cd96:	47dd                	li	a5,23
    8000cd98:	0001b597          	auipc	a1,0x1b
    8000cd9c:	f9858593          	addi	a1,a1,-104 # 80027d30 <__func__.0+0x2d0>
    8000cda0:	00f71463          	bne	a4,a5,8000cda8 <tinst_tests_gpf+0x1548>
    8000cda4:	4940106f          	j	8000e238 <tinst_tests_gpf+0x29d8>
    8000cda8:	0001b517          	auipc	a0,0x1b
    8000cdac:	fc850513          	addi	a0,a0,-56 # 80027d70 <__func__.0+0x310>
    8000cdb0:	747180ef          	jal	80025cf6 <printf>
    8000cdb4:	0003c797          	auipc	a5,0x3c
    8000cdb8:	25d7c783          	lbu	a5,605(a5) # 80049011 <excpt+0x1>
    8000cdbc:	c799                	beqz	a5,8000cdca <tinst_tests_gpf+0x156a>
    8000cdbe:	6418                	ld	a4,8(s0)
    8000cdc0:	47dd                	li	a5,23
    8000cdc2:	00f71463          	bne	a4,a5,8000cdca <tinst_tests_gpf+0x156a>
    8000cdc6:	1870106f          	j	8000e74c <tinst_tests_gpf+0x2eec>
    8000cdca:	0001b517          	auipc	a0,0x1b
    8000cdce:	fae50513          	addi	a0,a0,-82 # 80027d78 <__func__.0+0x318>
    8000cdd2:	725180ef          	jal	80025cf6 <printf>
    8000cdd6:	02900513          	li	a0,41
    8000cdda:	527170ef          	jal	80024b00 <putchar>
    8000cdde:	4529                	li	a0,10
    8000cde0:	521170ef          	jal	80024b00 <putchar>
    8000cde4:	00090e63          	beqz	s2,8000ce00 <tinst_tests_gpf+0x15a0>
    8000cde8:	0003c797          	auipc	a5,0x3c
    8000cdec:	2297c783          	lbu	a5,553(a5) # 80049011 <excpt+0x1>
    8000cdf0:	c799                	beqz	a5,8000cdfe <tinst_tests_gpf+0x159e>
    8000cdf2:	6418                	ld	a4,8(s0)
    8000cdf4:	47dd                	li	a5,23
    8000cdf6:	00f71463          	bne	a4,a5,8000cdfe <tinst_tests_gpf+0x159e>
    8000cdfa:	72f0106f          	j	8000ed28 <tinst_tests_gpf+0x34c8>
    8000cdfe:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000ce00:	0330000f          	fence	rw,rw
    8000ce04:	4785                	li	a5,1
    8000ce06:	0003c717          	auipc	a4,0x3c
    8000ce0a:	24073123          	sd	zero,578(a4) # 80049048 <excpt+0x38>
    8000ce0e:	00f41023          	sh	a5,0(s0)
    8000ce12:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    8000ce16:	001007b7          	lui	a5,0x100
    8000ce1a:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000ce1e:	07b2                	slli	a5,a5,0xc
    8000ce20:	4097b4af          	amoor.d	s1,s1,(a5)
    value = amoor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a sgpf",
    8000ce24:	0001e617          	auipc	a2,0x1e
    8000ce28:	89460613          	addi	a2,a2,-1900 # 8002a6b8 <__func__.0+0x2c58>
    8000ce2c:	08200593          	li	a1,130
    8000ce30:	0001b517          	auipc	a0,0x1b
    8000ce34:	f2850513          	addi	a0,a0,-216 # 80027d58 <__func__.0+0x2f8>
    8000ce38:	6bf180ef          	jal	80025cf6 <printf>
    8000ce3c:	0003c797          	auipc	a5,0x3c
    8000ce40:	1d57c783          	lbu	a5,469(a5) # 80049011 <excpt+0x1>
    8000ce44:	e399                	bnez	a5,8000ce4a <tinst_tests_gpf+0x15ea>
    8000ce46:	4ce0106f          	j	8000e314 <tinst_tests_gpf+0x2ab4>
    8000ce4a:	6418                	ld	a4,8(s0)
    8000ce4c:	47dd                	li	a5,23
    8000ce4e:	0001b597          	auipc	a1,0x1b
    8000ce52:	ee258593          	addi	a1,a1,-286 # 80027d30 <__func__.0+0x2d0>
    8000ce56:	00f71463          	bne	a4,a5,8000ce5e <tinst_tests_gpf+0x15fe>
    8000ce5a:	46c0106f          	j	8000e2c6 <tinst_tests_gpf+0x2a66>
    8000ce5e:	0001b517          	auipc	a0,0x1b
    8000ce62:	f1250513          	addi	a0,a0,-238 # 80027d70 <__func__.0+0x310>
    8000ce66:	691180ef          	jal	80025cf6 <printf>
    8000ce6a:	0003c797          	auipc	a5,0x3c
    8000ce6e:	1a77c783          	lbu	a5,423(a5) # 80049011 <excpt+0x1>
    8000ce72:	c799                	beqz	a5,8000ce80 <tinst_tests_gpf+0x1620>
    8000ce74:	6418                	ld	a4,8(s0)
    8000ce76:	47dd                	li	a5,23
    8000ce78:	00f71463          	bne	a4,a5,8000ce80 <tinst_tests_gpf+0x1620>
    8000ce7c:	7350106f          	j	8000edb0 <tinst_tests_gpf+0x3550>
    8000ce80:	0001b517          	auipc	a0,0x1b
    8000ce84:	ef850513          	addi	a0,a0,-264 # 80027d78 <__func__.0+0x318>
    8000ce88:	66f180ef          	jal	80025cf6 <printf>
    8000ce8c:	02900513          	li	a0,41
    8000ce90:	471170ef          	jal	80024b00 <putchar>
    8000ce94:	4529                	li	a0,10
    8000ce96:	46b170ef          	jal	80024b00 <putchar>
    8000ce9a:	00090e63          	beqz	s2,8000ceb6 <tinst_tests_gpf+0x1656>
    8000ce9e:	0003c797          	auipc	a5,0x3c
    8000cea2:	1737c783          	lbu	a5,371(a5) # 80049011 <excpt+0x1>
    8000cea6:	c799                	beqz	a5,8000ceb4 <tinst_tests_gpf+0x1654>
    8000cea8:	6418                	ld	a4,8(s0)
    8000ceaa:	47dd                	li	a5,23
    8000ceac:	00f71463          	bne	a4,a5,8000ceb4 <tinst_tests_gpf+0x1654>
    8000ceb0:	6bd0106f          	j	8000ed6c <tinst_tests_gpf+0x350c>
    8000ceb4:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000ceb6:	0330000f          	fence	rw,rw
    8000ceba:	4785                	li	a5,1
    8000cebc:	0003c717          	auipc	a4,0x3c
    8000cec0:	18073623          	sd	zero,396(a4) # 80049048 <excpt+0x38>
    8000cec4:	00f41023          	sh	a5,0(s0)
    8000cec8:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    8000cecc:	001007b7          	lui	a5,0x100
    8000ced0:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000ced4:	07b2                	slli	a5,a5,0xc
    8000ced6:	8097b4af          	amomin.d	s1,s1,(a5)
    value = amomin_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a sgpf",
    8000ceda:	0001e617          	auipc	a2,0x1e
    8000cede:	81e60613          	addi	a2,a2,-2018 # 8002a6f8 <__func__.0+0x2c98>
    8000cee2:	08200593          	li	a1,130
    8000cee6:	0001b517          	auipc	a0,0x1b
    8000ceea:	e7250513          	addi	a0,a0,-398 # 80027d58 <__func__.0+0x2f8>
    8000ceee:	609180ef          	jal	80025cf6 <printf>
    8000cef2:	0003c797          	auipc	a5,0x3c
    8000cef6:	11f7c783          	lbu	a5,287(a5) # 80049011 <excpt+0x1>
    8000cefa:	e399                	bnez	a5,8000cf00 <tinst_tests_gpf+0x16a0>
    8000cefc:	4a20106f          	j	8000e39e <tinst_tests_gpf+0x2b3e>
    8000cf00:	6418                	ld	a4,8(s0)
    8000cf02:	47dd                	li	a5,23
    8000cf04:	0001b597          	auipc	a1,0x1b
    8000cf08:	e2c58593          	addi	a1,a1,-468 # 80027d30 <__func__.0+0x2d0>
    8000cf0c:	00f71463          	bne	a4,a5,8000cf14 <tinst_tests_gpf+0x16b4>
    8000cf10:	4400106f          	j	8000e350 <tinst_tests_gpf+0x2af0>
    8000cf14:	0001b517          	auipc	a0,0x1b
    8000cf18:	e5c50513          	addi	a0,a0,-420 # 80027d70 <__func__.0+0x310>
    8000cf1c:	5db180ef          	jal	80025cf6 <printf>
    8000cf20:	0003c797          	auipc	a5,0x3c
    8000cf24:	0f17c783          	lbu	a5,241(a5) # 80049011 <excpt+0x1>
    8000cf28:	c799                	beqz	a5,8000cf36 <tinst_tests_gpf+0x16d6>
    8000cf2a:	6418                	ld	a4,8(s0)
    8000cf2c:	47dd                	li	a5,23
    8000cf2e:	00f71463          	bne	a4,a5,8000cf36 <tinst_tests_gpf+0x16d6>
    8000cf32:	6c30106f          	j	8000edf4 <tinst_tests_gpf+0x3594>
    8000cf36:	0001b517          	auipc	a0,0x1b
    8000cf3a:	e4250513          	addi	a0,a0,-446 # 80027d78 <__func__.0+0x318>
    8000cf3e:	5b9180ef          	jal	80025cf6 <printf>
    8000cf42:	02900513          	li	a0,41
    8000cf46:	3bb170ef          	jal	80024b00 <putchar>
    8000cf4a:	4529                	li	a0,10
    8000cf4c:	3b5170ef          	jal	80024b00 <putchar>
    8000cf50:	00090a63          	beqz	s2,8000cf64 <tinst_tests_gpf+0x1704>
    8000cf54:	0003c797          	auipc	a5,0x3c
    8000cf58:	0bd7c783          	lbu	a5,189(a5) # 80049011 <excpt+0x1>
    8000cf5c:	c399                	beqz	a5,8000cf62 <tinst_tests_gpf+0x1702>
    8000cf5e:	0310106f          	j	8000e78e <tinst_tests_gpf+0x2f2e>
    8000cf62:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000cf64:	0330000f          	fence	rw,rw
    8000cf68:	4785                	li	a5,1
    8000cf6a:	0003c717          	auipc	a4,0x3c
    8000cf6e:	0c073f23          	sd	zero,222(a4) # 80049048 <excpt+0x38>
    8000cf72:	00f41023          	sh	a5,0(s0)
    8000cf76:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    8000cf7a:	001007b7          	lui	a5,0x100
    8000cf7e:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000cf82:	07b2                	slli	a5,a5,0xc
    8000cf84:	a097b4af          	amomax.d	s1,s1,(a5)
    value = amomax_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a sgpf",
    8000cf88:	0001d617          	auipc	a2,0x1d
    8000cf8c:	7b060613          	addi	a2,a2,1968 # 8002a738 <__func__.0+0x2cd8>
    8000cf90:	08200593          	li	a1,130
    8000cf94:	0001b517          	auipc	a0,0x1b
    8000cf98:	dc450513          	addi	a0,a0,-572 # 80027d58 <__func__.0+0x2f8>
    8000cf9c:	55b180ef          	jal	80025cf6 <printf>
    8000cfa0:	0003c797          	auipc	a5,0x3c
    8000cfa4:	0717c783          	lbu	a5,113(a5) # 80049011 <excpt+0x1>
    8000cfa8:	e399                	bnez	a5,8000cfae <tinst_tests_gpf+0x174e>
    8000cfaa:	4900106f          	j	8000e43a <tinst_tests_gpf+0x2bda>
    8000cfae:	6418                	ld	a4,8(s0)
    8000cfb0:	47dd                	li	a5,23
    8000cfb2:	0001b597          	auipc	a1,0x1b
    8000cfb6:	d7e58593          	addi	a1,a1,-642 # 80027d30 <__func__.0+0x2d0>
    8000cfba:	00f71463          	bne	a4,a5,8000cfc2 <tinst_tests_gpf+0x1762>
    8000cfbe:	42e0106f          	j	8000e3ec <tinst_tests_gpf+0x2b8c>
    8000cfc2:	0001b517          	auipc	a0,0x1b
    8000cfc6:	dae50513          	addi	a0,a0,-594 # 80027d70 <__func__.0+0x310>
    8000cfca:	52d180ef          	jal	80025cf6 <printf>
    8000cfce:	0003c797          	auipc	a5,0x3c
    8000cfd2:	0437c783          	lbu	a5,67(a5) # 80049011 <excpt+0x1>
    8000cfd6:	c799                	beqz	a5,8000cfe4 <tinst_tests_gpf+0x1784>
    8000cfd8:	6418                	ld	a4,8(s0)
    8000cfda:	47dd                	li	a5,23
    8000cfdc:	00f71463          	bne	a4,a5,8000cfe4 <tinst_tests_gpf+0x1784>
    8000cfe0:	6590106f          	j	8000ee38 <tinst_tests_gpf+0x35d8>
    8000cfe4:	0001b517          	auipc	a0,0x1b
    8000cfe8:	d9450513          	addi	a0,a0,-620 # 80027d78 <__func__.0+0x318>
    8000cfec:	50b180ef          	jal	80025cf6 <printf>
    8000cff0:	02900513          	li	a0,41
    8000cff4:	30d170ef          	jal	80024b00 <putchar>
    8000cff8:	4529                	li	a0,10
    8000cffa:	307170ef          	jal	80024b00 <putchar>
    8000cffe:	00090a63          	beqz	s2,8000d012 <tinst_tests_gpf+0x17b2>
    8000d002:	0003c797          	auipc	a5,0x3c
    8000d006:	00f7c783          	lbu	a5,15(a5) # 80049011 <excpt+0x1>
    8000d00a:	c399                	beqz	a5,8000d010 <tinst_tests_gpf+0x17b0>
    8000d00c:	7d00106f          	j	8000e7dc <tinst_tests_gpf+0x2f7c>
    8000d010:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000d012:	0330000f          	fence	rw,rw
    8000d016:	4785                	li	a5,1
    8000d018:	0003c717          	auipc	a4,0x3c
    8000d01c:	02073823          	sd	zero,48(a4) # 80049048 <excpt+0x38>
    8000d020:	00f41023          	sh	a5,0(s0)
    8000d024:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amominu_d, "amominu.d", uint64_t);
    8000d028:	001007b7          	lui	a5,0x100
    8000d02c:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000d030:	07b2                	slli	a5,a5,0xc
    8000d032:	c097b4af          	amominu.d	s1,s1,(a5)
    value = amominu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a sgpf",
    8000d036:	0001d617          	auipc	a2,0x1d
    8000d03a:	74260613          	addi	a2,a2,1858 # 8002a778 <__func__.0+0x2d18>
    8000d03e:	08200593          	li	a1,130
    8000d042:	0001b517          	auipc	a0,0x1b
    8000d046:	d1650513          	addi	a0,a0,-746 # 80027d58 <__func__.0+0x2f8>
    8000d04a:	4ad180ef          	jal	80025cf6 <printf>
    8000d04e:	0003c797          	auipc	a5,0x3c
    8000d052:	fc37c783          	lbu	a5,-61(a5) # 80049011 <excpt+0x1>
    8000d056:	e399                	bnez	a5,8000d05c <tinst_tests_gpf+0x17fc>
    8000d058:	43c0106f          	j	8000e494 <tinst_tests_gpf+0x2c34>
    8000d05c:	6418                	ld	a4,8(s0)
    8000d05e:	47dd                	li	a5,23
    8000d060:	0001b597          	auipc	a1,0x1b
    8000d064:	cd058593          	addi	a1,a1,-816 # 80027d30 <__func__.0+0x2d0>
    8000d068:	00f71463          	bne	a4,a5,8000d070 <tinst_tests_gpf+0x1810>
    8000d06c:	3da0106f          	j	8000e446 <tinst_tests_gpf+0x2be6>
    8000d070:	0001b517          	auipc	a0,0x1b
    8000d074:	d0050513          	addi	a0,a0,-768 # 80027d70 <__func__.0+0x310>
    8000d078:	47f180ef          	jal	80025cf6 <printf>
    8000d07c:	0003c797          	auipc	a5,0x3c
    8000d080:	f957c783          	lbu	a5,-107(a5) # 80049011 <excpt+0x1>
    8000d084:	c799                	beqz	a5,8000d092 <tinst_tests_gpf+0x1832>
    8000d086:	6418                	ld	a4,8(s0)
    8000d088:	47dd                	li	a5,23
    8000d08a:	00f71463          	bne	a4,a5,8000d092 <tinst_tests_gpf+0x1832>
    8000d08e:	5ef0106f          	j	8000ee7c <tinst_tests_gpf+0x361c>
    8000d092:	0001b517          	auipc	a0,0x1b
    8000d096:	ce650513          	addi	a0,a0,-794 # 80027d78 <__func__.0+0x318>
    8000d09a:	45d180ef          	jal	80025cf6 <printf>
    8000d09e:	02900513          	li	a0,41
    8000d0a2:	25f170ef          	jal	80024b00 <putchar>
    8000d0a6:	4529                	li	a0,10
    8000d0a8:	259170ef          	jal	80024b00 <putchar>
    8000d0ac:	00090a63          	beqz	s2,8000d0c0 <tinst_tests_gpf+0x1860>
    8000d0b0:	0003c797          	auipc	a5,0x3c
    8000d0b4:	f617c783          	lbu	a5,-159(a5) # 80049011 <excpt+0x1>
    8000d0b8:	c399                	beqz	a5,8000d0be <tinst_tests_gpf+0x185e>
    8000d0ba:	7700106f          	j	8000e82a <tinst_tests_gpf+0x2fca>
    8000d0be:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000d0c0:	0330000f          	fence	rw,rw
    8000d0c4:	4785                	li	a5,1
    8000d0c6:	0003c717          	auipc	a4,0x3c
    8000d0ca:	f8073123          	sd	zero,-126(a4) # 80049048 <excpt+0x38>
    8000d0ce:	00f41023          	sh	a5,0(s0)
    8000d0d2:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomaxu_d, "amomaxu.d", uint64_t);
    8000d0d6:	001007b7          	lui	a5,0x100
    8000d0da:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000d0de:	07b2                	slli	a5,a5,0xc
    8000d0e0:	e097b4af          	amomaxu.d	s1,s1,(a5)
    value = amomaxu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000d0e4:	0001d617          	auipc	a2,0x1d
    8000d0e8:	6dc60613          	addi	a2,a2,1756 # 8002a7c0 <__func__.0+0x2d60>
    8000d0ec:	08200593          	li	a1,130
    8000d0f0:	0001b517          	auipc	a0,0x1b
    8000d0f4:	c6850513          	addi	a0,a0,-920 # 80027d58 <__func__.0+0x2f8>
    8000d0f8:	3ff180ef          	jal	80025cf6 <printf>
    8000d0fc:	0003c797          	auipc	a5,0x3c
    8000d100:	f157c783          	lbu	a5,-235(a5) # 80049011 <excpt+0x1>
    8000d104:	e399                	bnez	a5,8000d10a <tinst_tests_gpf+0x18aa>
    8000d106:	3e80106f          	j	8000e4ee <tinst_tests_gpf+0x2c8e>
    8000d10a:	6418                	ld	a4,8(s0)
    8000d10c:	47dd                	li	a5,23
    8000d10e:	0001b597          	auipc	a1,0x1b
    8000d112:	c2258593          	addi	a1,a1,-990 # 80027d30 <__func__.0+0x2d0>
    8000d116:	00f71463          	bne	a4,a5,8000d11e <tinst_tests_gpf+0x18be>
    8000d11a:	3860106f          	j	8000e4a0 <tinst_tests_gpf+0x2c40>
    8000d11e:	0001b517          	auipc	a0,0x1b
    8000d122:	c5250513          	addi	a0,a0,-942 # 80027d70 <__func__.0+0x310>
    8000d126:	3d1180ef          	jal	80025cf6 <printf>
    8000d12a:	0003c797          	auipc	a5,0x3c
    8000d12e:	ee77c783          	lbu	a5,-281(a5) # 80049011 <excpt+0x1>
    8000d132:	c799                	beqz	a5,8000d140 <tinst_tests_gpf+0x18e0>
    8000d134:	6418                	ld	a4,8(s0)
    8000d136:	47dd                	li	a5,23
    8000d138:	00f71463          	bne	a4,a5,8000d140 <tinst_tests_gpf+0x18e0>
    8000d13c:	5850106f          	j	8000eec0 <tinst_tests_gpf+0x3660>
    8000d140:	0001b517          	auipc	a0,0x1b
    8000d144:	c3850513          	addi	a0,a0,-968 # 80027d78 <__func__.0+0x318>
    8000d148:	3af180ef          	jal	80025cf6 <printf>
    8000d14c:	02900513          	li	a0,41
    8000d150:	1b1170ef          	jal	80024b00 <putchar>
    8000d154:	4529                	li	a0,10
    8000d156:	1ab170ef          	jal	80024b00 <putchar>
    8000d15a:	04090e63          	beqz	s2,8000d1b6 <tinst_tests_gpf+0x1956>
    8000d15e:	0003c497          	auipc	s1,0x3c
    8000d162:	eb34c483          	lbu	s1,-333(s1) # 80049011 <excpt+0x1>
    8000d166:	c8a9                	beqz	s1,8000d1b8 <tinst_tests_gpf+0x1958>
    8000d168:	6418                	ld	a4,8(s0)
    8000d16a:	47dd                	li	a5,23
    8000d16c:	04f71563          	bne	a4,a5,8000d1b6 <tinst_tests_gpf+0x1956>
    8000d170:	701c                	ld	a5,32(s0)
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_END();
    8000d172:	0001b597          	auipc	a1,0x1b
    8000d176:	bae58593          	addi	a1,a1,-1106 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000d17a:	c3b9                	beqz	a5,8000d1c0 <tinst_tests_gpf+0x1960>
    8000d17c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d17e:	0016f713          	andi	a4,a3,1
    8000d182:	3c071de3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d186:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d18a:	460d                	li	a2,3
    8000d18c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d190:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d192:	00c59763          	bne	a1,a2,8000d1a0 <tinst_tests_gpf+0x1940>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d196:	0026d683          	lhu	a3,2(a3)
    8000d19a:	0106969b          	slliw	a3,a3,0x10
    8000d19e:	8f55                	or	a4,a4,a3
    8000d1a0:	1ffe16b7          	lui	a3,0x1ffe1
    8000d1a4:	068e                	slli	a3,a3,0x3
    8000d1a6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d1a8:	8f75                	and	a4,a4,a3
    TEST_END();
    8000d1aa:	0001b597          	auipc	a1,0x1b
    8000d1ae:	b7658593          	addi	a1,a1,-1162 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000d1b2:	00e78763          	beq	a5,a4,8000d1c0 <tinst_tests_gpf+0x1960>
    8000d1b6:	4481                	li	s1,0
    TEST_END();
    8000d1b8:	0001b597          	auipc	a1,0x1b
    8000d1bc:	b7858593          	addi	a1,a1,-1160 # 80027d30 <__func__.0+0x2d0>
    8000d1c0:	0001b517          	auipc	a0,0x1b
    8000d1c4:	c1850513          	addi	a0,a0,-1000 # 80027dd8 <__func__.0+0x378>
    8000d1c8:	32f180ef          	jal	80025cf6 <printf>
    8000d1cc:	4511                	li	a0,4
    8000d1ce:	a29f30ef          	jal	80000bf6 <goto_priv>
    8000d1d2:	adaf40ef          	jal	800014ac <reset_state>
}
    8000d1d6:	70a2                	ld	ra,40(sp)
    8000d1d8:	7402                	ld	s0,32(sp)
    8000d1da:	6942                	ld	s2,16(sp)
    8000d1dc:	69a2                	ld	s3,8(sp)
    8000d1de:	8526                	mv	a0,s1
    8000d1e0:	64e2                	ld	s1,24(sp)
    8000d1e2:	6145                	addi	sp,sp,48
    8000d1e4:	8082                	ret
    TEST_ASSERT("correct tinst when executing a lbu which results in a lgpf",
    8000d1e6:	701c                	ld	a5,32(s0)
    8000d1e8:	0001b597          	auipc	a1,0x1b
    8000d1ec:	b3858593          	addi	a1,a1,-1224 # 80027d20 <__func__.0+0x2c0>
    8000d1f0:	e399                	bnez	a5,8000d1f6 <tinst_tests_gpf+0x1996>
    8000d1f2:	823fe06f          	j	8000ba14 <tinst_tests_gpf+0x1b4>
    8000d1f6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d1f8:	0016f713          	andi	a4,a3,1
    8000d1fc:	360710e3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d200:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d204:	460d                	li	a2,3
    8000d206:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d20a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d20c:	00c59763          	bne	a1,a2,8000d21a <tinst_tests_gpf+0x19ba>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d210:	0026d683          	lhu	a3,2(a3)
    8000d214:	0106969b          	slliw	a3,a3,0x10
    8000d218:	8f55                	or	a4,a4,a3
    8000d21a:	1746                	slli	a4,a4,0x31
    8000d21c:	9345                	srli	a4,a4,0x31
    8000d21e:	0001b597          	auipc	a1,0x1b
    8000d222:	b0258593          	addi	a1,a1,-1278 # 80027d20 <__func__.0+0x2c0>
    8000d226:	00e79463          	bne	a5,a4,8000d22e <tinst_tests_gpf+0x19ce>
    8000d22a:	feafe06f          	j	8000ba14 <tinst_tests_gpf+0x1b4>
    8000d22e:	0001b597          	auipc	a1,0x1b
    8000d232:	b0258593          	addi	a1,a1,-1278 # 80027d30 <__func__.0+0x2d0>
    8000d236:	fdefe06f          	j	8000ba14 <tinst_tests_gpf+0x1b4>
    TEST_ASSERT("correct tinst when executing a lh which results in a lgpf",
    8000d23a:	6418                	ld	a4,8(s0)
    8000d23c:	47d5                	li	a5,21
    8000d23e:	0001b597          	auipc	a1,0x1b
    8000d242:	af258593          	addi	a1,a1,-1294 # 80027d30 <__func__.0+0x2d0>
    8000d246:	00f70463          	beq	a4,a5,8000d24e <tinst_tests_gpf+0x19ee>
    8000d24a:	875fe06f          	j	8000babe <tinst_tests_gpf+0x25e>
    8000d24e:	701c                	ld	a5,32(s0)
    8000d250:	0001b597          	auipc	a1,0x1b
    8000d254:	ad058593          	addi	a1,a1,-1328 # 80027d20 <__func__.0+0x2c0>
    8000d258:	e399                	bnez	a5,8000d25e <tinst_tests_gpf+0x19fe>
    8000d25a:	865fe06f          	j	8000babe <tinst_tests_gpf+0x25e>
    8000d25e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d260:	0016f713          	andi	a4,a3,1
    8000d264:	2e071ce3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d268:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d26c:	460d                	li	a2,3
    8000d26e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d272:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d274:	00c59763          	bne	a1,a2,8000d282 <tinst_tests_gpf+0x1a22>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d278:	0026d683          	lhu	a3,2(a3)
    8000d27c:	0106969b          	slliw	a3,a3,0x10
    8000d280:	8f55                	or	a4,a4,a3
    8000d282:	1746                	slli	a4,a4,0x31
    8000d284:	9345                	srli	a4,a4,0x31
    8000d286:	0001b597          	auipc	a1,0x1b
    8000d28a:	a9a58593          	addi	a1,a1,-1382 # 80027d20 <__func__.0+0x2c0>
    8000d28e:	00e78463          	beq	a5,a4,8000d296 <tinst_tests_gpf+0x1a36>
    8000d292:	825fe06f          	j	8000bab6 <tinst_tests_gpf+0x256>
    8000d296:	829fe06f          	j	8000babe <tinst_tests_gpf+0x25e>
    TEST_ASSERT("correct tinst when executing a lb which results in a lgpf",         
    8000d29a:	7018                	ld	a4,32(s0)
    8000d29c:	678d                	lui	a5,0x3
    8000d29e:	00f70463          	beq	a4,a5,8000d2a6 <tinst_tests_gpf+0x1a46>
    8000d2a2:	ee2fe06f          	j	8000b984 <tinst_tests_gpf+0x124>
    8000d2a6:	ef2fe06f          	j	8000b998 <tinst_tests_gpf+0x138>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lgpf",
    8000d2aa:	701c                	ld	a5,32(s0)
    8000d2ac:	e399                	bnez	a5,8000d2b2 <tinst_tests_gpf+0x1a52>
    8000d2ae:	f9cfe06f          	j	8000ba4a <tinst_tests_gpf+0x1ea>
    8000d2b2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d2b4:	0016f713          	andi	a4,a3,1
    8000d2b8:	2a0712e3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d2bc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d2c0:	460d                	li	a2,3
    8000d2c2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d2c6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d2c8:	00c59763          	bne	a1,a2,8000d2d6 <tinst_tests_gpf+0x1a76>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d2cc:	0026d683          	lhu	a3,2(a3)
    8000d2d0:	0106969b          	slliw	a3,a3,0x10
    8000d2d4:	8f55                	or	a4,a4,a3
    8000d2d6:	1746                	slli	a4,a4,0x31
    8000d2d8:	9345                	srli	a4,a4,0x31
    8000d2da:	00e78463          	beq	a5,a4,8000d2e2 <tinst_tests_gpf+0x1a82>
    8000d2de:	f58fe06f          	j	8000ba36 <tinst_tests_gpf+0x1d6>
    8000d2e2:	f68fe06f          	j	8000ba4a <tinst_tests_gpf+0x1ea>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lgpf",
    8000d2e6:	701c                	ld	a5,32(s0)
    8000d2e8:	0001b597          	auipc	a1,0x1b
    8000d2ec:	a3858593          	addi	a1,a1,-1480 # 80027d20 <__func__.0+0x2c0>
    8000d2f0:	e399                	bnez	a5,8000d2f6 <tinst_tests_gpf+0x1a96>
    8000d2f2:	883fe06f          	j	8000bb74 <tinst_tests_gpf+0x314>
    8000d2f6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d2f8:	0016f713          	andi	a4,a3,1
    8000d2fc:	260710e3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d300:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d304:	460d                	li	a2,3
    8000d306:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d30a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d30c:	00c59763          	bne	a1,a2,8000d31a <tinst_tests_gpf+0x1aba>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d310:	0026d683          	lhu	a3,2(a3)
    8000d314:	0106969b          	slliw	a3,a3,0x10
    8000d318:	8f55                	or	a4,a4,a3
    8000d31a:	1746                	slli	a4,a4,0x31
    8000d31c:	9345                	srli	a4,a4,0x31
    8000d31e:	0001b597          	auipc	a1,0x1b
    8000d322:	a0258593          	addi	a1,a1,-1534 # 80027d20 <__func__.0+0x2c0>
    8000d326:	00e79463          	bne	a5,a4,8000d32e <tinst_tests_gpf+0x1ace>
    8000d32a:	84bfe06f          	j	8000bb74 <tinst_tests_gpf+0x314>
    8000d32e:	0001b597          	auipc	a1,0x1b
    8000d332:	a0258593          	addi	a1,a1,-1534 # 80027d30 <__func__.0+0x2d0>
    8000d336:	83ffe06f          	j	8000bb74 <tinst_tests_gpf+0x314>
    TEST_ASSERT("correct tinst when executing a lw which results in a lgpf",
    8000d33a:	701c                	ld	a5,32(s0)
    8000d33c:	0001b597          	auipc	a1,0x1b
    8000d340:	9e458593          	addi	a1,a1,-1564 # 80027d20 <__func__.0+0x2c0>
    8000d344:	e399                	bnez	a5,8000d34a <tinst_tests_gpf+0x1aea>
    8000d346:	8e5fe06f          	j	8000bc2a <tinst_tests_gpf+0x3ca>
    8000d34a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d34c:	0016f713          	andi	a4,a3,1
    8000d350:	200716e3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d354:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d358:	460d                	li	a2,3
    8000d35a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d35e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d360:	00c59763          	bne	a1,a2,8000d36e <tinst_tests_gpf+0x1b0e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d364:	0026d683          	lhu	a3,2(a3)
    8000d368:	0106969b          	slliw	a3,a3,0x10
    8000d36c:	8f55                	or	a4,a4,a3
    8000d36e:	1746                	slli	a4,a4,0x31
    8000d370:	9345                	srli	a4,a4,0x31
    8000d372:	0001b597          	auipc	a1,0x1b
    8000d376:	9ae58593          	addi	a1,a1,-1618 # 80027d20 <__func__.0+0x2c0>
    8000d37a:	00e79463          	bne	a5,a4,8000d382 <tinst_tests_gpf+0x1b22>
    8000d37e:	8adfe06f          	j	8000bc2a <tinst_tests_gpf+0x3ca>
    8000d382:	0001b597          	auipc	a1,0x1b
    8000d386:	9ae58593          	addi	a1,a1,-1618 # 80027d30 <__func__.0+0x2d0>
    8000d38a:	8a1fe06f          	j	8000bc2a <tinst_tests_gpf+0x3ca>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lgpf",
    8000d38e:	701c                	ld	a5,32(s0)
    8000d390:	0001b597          	auipc	a1,0x1b
    8000d394:	99058593          	addi	a1,a1,-1648 # 80027d20 <__func__.0+0x2c0>
    8000d398:	e399                	bnez	a5,8000d39e <tinst_tests_gpf+0x1b3e>
    8000d39a:	947fe06f          	j	8000bce0 <tinst_tests_gpf+0x480>
    8000d39e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d3a0:	0016f713          	andi	a4,a3,1
    8000d3a4:	1a071ce3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d3a8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d3ac:	460d                	li	a2,3
    8000d3ae:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d3b2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d3b4:	00c59763          	bne	a1,a2,8000d3c2 <tinst_tests_gpf+0x1b62>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d3b8:	0026d683          	lhu	a3,2(a3)
    8000d3bc:	0106969b          	slliw	a3,a3,0x10
    8000d3c0:	8f55                	or	a4,a4,a3
    8000d3c2:	1746                	slli	a4,a4,0x31
    8000d3c4:	9345                	srli	a4,a4,0x31
    8000d3c6:	0001b597          	auipc	a1,0x1b
    8000d3ca:	95a58593          	addi	a1,a1,-1702 # 80027d20 <__func__.0+0x2c0>
    8000d3ce:	00e79463          	bne	a5,a4,8000d3d6 <tinst_tests_gpf+0x1b76>
    8000d3d2:	90ffe06f          	j	8000bce0 <tinst_tests_gpf+0x480>
    8000d3d6:	0001b597          	auipc	a1,0x1b
    8000d3da:	95a58593          	addi	a1,a1,-1702 # 80027d30 <__func__.0+0x2d0>
    8000d3de:	903fe06f          	j	8000bce0 <tinst_tests_gpf+0x480>
    TEST_ASSERT("correct tinst when executing a ld which results in a lgpf",
    8000d3e2:	701c                	ld	a5,32(s0)
    8000d3e4:	0001b597          	auipc	a1,0x1b
    8000d3e8:	93c58593          	addi	a1,a1,-1732 # 80027d20 <__func__.0+0x2c0>
    8000d3ec:	e399                	bnez	a5,8000d3f2 <tinst_tests_gpf+0x1b92>
    8000d3ee:	9a1fe06f          	j	8000bd8e <tinst_tests_gpf+0x52e>
    8000d3f2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d3f4:	0016f713          	andi	a4,a3,1
    8000d3f8:	160712e3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d3fc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d400:	460d                	li	a2,3
    8000d402:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d406:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d408:	00c59763          	bne	a1,a2,8000d416 <tinst_tests_gpf+0x1bb6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d40c:	0026d683          	lhu	a3,2(a3)
    8000d410:	0106969b          	slliw	a3,a3,0x10
    8000d414:	8f55                	or	a4,a4,a3
    8000d416:	1746                	slli	a4,a4,0x31
    8000d418:	9345                	srli	a4,a4,0x31
    8000d41a:	0001b597          	auipc	a1,0x1b
    8000d41e:	90658593          	addi	a1,a1,-1786 # 80027d20 <__func__.0+0x2c0>
    8000d422:	00e79463          	bne	a5,a4,8000d42a <tinst_tests_gpf+0x1bca>
    8000d426:	969fe06f          	j	8000bd8e <tinst_tests_gpf+0x52e>
    8000d42a:	0001b597          	auipc	a1,0x1b
    8000d42e:	90658593          	addi	a1,a1,-1786 # 80027d30 <__func__.0+0x2d0>
    8000d432:	95dfe06f          	j	8000bd8e <tinst_tests_gpf+0x52e>
    TEST_ASSERT("correct tinst when executing a sb which results in a sgpf",
    8000d436:	701c                	ld	a5,32(s0)
    8000d438:	0001b597          	auipc	a1,0x1b
    8000d43c:	8e858593          	addi	a1,a1,-1816 # 80027d20 <__func__.0+0x2c0>
    8000d440:	e399                	bnez	a5,8000d446 <tinst_tests_gpf+0x1be6>
    8000d442:	9fdfe06f          	j	8000be3e <tinst_tests_gpf+0x5de>
    8000d446:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d448:	0016f713          	andi	a4,a3,1
    8000d44c:	100718e3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d450:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d454:	460d                	li	a2,3
    8000d456:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d45a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d45c:	00c59763          	bne	a1,a2,8000d46a <tinst_tests_gpf+0x1c0a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d460:	0026d683          	lhu	a3,2(a3)
    8000d464:	0106969b          	slliw	a3,a3,0x10
    8000d468:	8f55                	or	a4,a4,a3
    8000d46a:	01f076b7          	lui	a3,0x1f07
    8000d46e:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d472:	8f75                	and	a4,a4,a3
    8000d474:	0001b597          	auipc	a1,0x1b
    8000d478:	8ac58593          	addi	a1,a1,-1876 # 80027d20 <__func__.0+0x2c0>
    8000d47c:	00e79463          	bne	a5,a4,8000d484 <tinst_tests_gpf+0x1c24>
    8000d480:	9bffe06f          	j	8000be3e <tinst_tests_gpf+0x5de>
    8000d484:	0001b597          	auipc	a1,0x1b
    8000d488:	8ac58593          	addi	a1,a1,-1876 # 80027d30 <__func__.0+0x2d0>
    8000d48c:	9b3fe06f          	j	8000be3e <tinst_tests_gpf+0x5de>
    TEST_ASSERT("correct tinst when executing a sh which results in a sgpf",
    8000d490:	701c                	ld	a5,32(s0)
    8000d492:	0001b597          	auipc	a1,0x1b
    8000d496:	88e58593          	addi	a1,a1,-1906 # 80027d20 <__func__.0+0x2c0>
    8000d49a:	e399                	bnez	a5,8000d4a0 <tinst_tests_gpf+0x1c40>
    8000d49c:	a57fe06f          	j	8000bef2 <tinst_tests_gpf+0x692>
    8000d4a0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d4a2:	0016f713          	andi	a4,a3,1
    8000d4a6:	0a071be3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d4aa:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d4ae:	460d                	li	a2,3
    8000d4b0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d4b4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d4b6:	00c59763          	bne	a1,a2,8000d4c4 <tinst_tests_gpf+0x1c64>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d4ba:	0026d683          	lhu	a3,2(a3)
    8000d4be:	0106969b          	slliw	a3,a3,0x10
    8000d4c2:	8f55                	or	a4,a4,a3
    8000d4c4:	01f076b7          	lui	a3,0x1f07
    8000d4c8:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d4cc:	8f75                	and	a4,a4,a3
    8000d4ce:	0001b597          	auipc	a1,0x1b
    8000d4d2:	85258593          	addi	a1,a1,-1966 # 80027d20 <__func__.0+0x2c0>
    8000d4d6:	00e79463          	bne	a5,a4,8000d4de <tinst_tests_gpf+0x1c7e>
    8000d4da:	a19fe06f          	j	8000bef2 <tinst_tests_gpf+0x692>
    8000d4de:	0001b597          	auipc	a1,0x1b
    8000d4e2:	85258593          	addi	a1,a1,-1966 # 80027d30 <__func__.0+0x2d0>
    8000d4e6:	a0dfe06f          	j	8000bef2 <tinst_tests_gpf+0x692>
    TEST_ASSERT("correct tinst when executing a sw which results in a sgpf",
    8000d4ea:	701c                	ld	a5,32(s0)
    8000d4ec:	0001b597          	auipc	a1,0x1b
    8000d4f0:	83458593          	addi	a1,a1,-1996 # 80027d20 <__func__.0+0x2c0>
    8000d4f4:	e399                	bnez	a5,8000d4fa <tinst_tests_gpf+0x1c9a>
    8000d4f6:	ab3fe06f          	j	8000bfa8 <tinst_tests_gpf+0x748>
    8000d4fa:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d4fc:	0016f713          	andi	a4,a3,1
    8000d500:	04071ee3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d504:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d508:	460d                	li	a2,3
    8000d50a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d50e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d510:	00c59763          	bne	a1,a2,8000d51e <tinst_tests_gpf+0x1cbe>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d514:	0026d683          	lhu	a3,2(a3)
    8000d518:	0106969b          	slliw	a3,a3,0x10
    8000d51c:	8f55                	or	a4,a4,a3
    8000d51e:	01f076b7          	lui	a3,0x1f07
    8000d522:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d526:	8f75                	and	a4,a4,a3
    8000d528:	0001a597          	auipc	a1,0x1a
    8000d52c:	7f858593          	addi	a1,a1,2040 # 80027d20 <__func__.0+0x2c0>
    8000d530:	00e79463          	bne	a5,a4,8000d538 <tinst_tests_gpf+0x1cd8>
    8000d534:	a75fe06f          	j	8000bfa8 <tinst_tests_gpf+0x748>
    8000d538:	0001a597          	auipc	a1,0x1a
    8000d53c:	7f858593          	addi	a1,a1,2040 # 80027d30 <__func__.0+0x2d0>
    8000d540:	a69fe06f          	j	8000bfa8 <tinst_tests_gpf+0x748>
    TEST_ASSERT("correct tinst when executing a sd which results in a sgpf",
    8000d544:	701c                	ld	a5,32(s0)
    8000d546:	0001a597          	auipc	a1,0x1a
    8000d54a:	7da58593          	addi	a1,a1,2010 # 80027d20 <__func__.0+0x2c0>
    8000d54e:	e399                	bnez	a5,8000d554 <tinst_tests_gpf+0x1cf4>
    8000d550:	b11fe06f          	j	8000c060 <tinst_tests_gpf+0x800>
    8000d554:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d556:	0016f713          	andi	a4,a3,1
    8000d55a:	000711e3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d55e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d562:	460d                	li	a2,3
    8000d564:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d568:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d56a:	00c59763          	bne	a1,a2,8000d578 <tinst_tests_gpf+0x1d18>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d56e:	0026d683          	lhu	a3,2(a3)
    8000d572:	0106969b          	slliw	a3,a3,0x10
    8000d576:	8f55                	or	a4,a4,a3
    8000d578:	01f076b7          	lui	a3,0x1f07
    8000d57c:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d580:	8f75                	and	a4,a4,a3
    8000d582:	0001a597          	auipc	a1,0x1a
    8000d586:	79e58593          	addi	a1,a1,1950 # 80027d20 <__func__.0+0x2c0>
    8000d58a:	00e79463          	bne	a5,a4,8000d592 <tinst_tests_gpf+0x1d32>
    8000d58e:	ad3fe06f          	j	8000c060 <tinst_tests_gpf+0x800>
    8000d592:	0001a597          	auipc	a1,0x1a
    8000d596:	79e58593          	addi	a1,a1,1950 # 80027d30 <__func__.0+0x2d0>
    8000d59a:	ac7fe06f          	j	8000c060 <tinst_tests_gpf+0x800>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000d59e:	701c                	ld	a5,32(s0)
    8000d5a0:	0001a597          	auipc	a1,0x1a
    8000d5a4:	78058593          	addi	a1,a1,1920 # 80027d20 <__func__.0+0x2c0>
    8000d5a8:	e399                	bnez	a5,8000d5ae <tinst_tests_gpf+0x1d4e>
    8000d5aa:	e19fe06f          	j	8000c3c2 <tinst_tests_gpf+0xb62>
    8000d5ae:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d5b0:	0016f713          	andi	a4,a3,1
    8000d5b4:	7a071463          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d5b8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d5bc:	460d                	li	a2,3
    8000d5be:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d5c2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d5c4:	00c59763          	bne	a1,a2,8000d5d2 <tinst_tests_gpf+0x1d72>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d5c8:	0026d683          	lhu	a3,2(a3)
    8000d5cc:	0106969b          	slliw	a3,a3,0x10
    8000d5d0:	8f55                	or	a4,a4,a3
    8000d5d2:	1ffe16b7          	lui	a3,0x1ffe1
    8000d5d6:	068e                	slli	a3,a3,0x3
    8000d5d8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d5da:	8f75                	and	a4,a4,a3
    8000d5dc:	0001a597          	auipc	a1,0x1a
    8000d5e0:	74458593          	addi	a1,a1,1860 # 80027d20 <__func__.0+0x2c0>
    8000d5e4:	00e79463          	bne	a5,a4,8000d5ec <tinst_tests_gpf+0x1d8c>
    8000d5e8:	ddbfe06f          	j	8000c3c2 <tinst_tests_gpf+0xb62>
    8000d5ec:	0001a597          	auipc	a1,0x1a
    8000d5f0:	74458593          	addi	a1,a1,1860 # 80027d30 <__func__.0+0x2d0>
    8000d5f4:	dcffe06f          	j	8000c3c2 <tinst_tests_gpf+0xb62>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a sgpf",
    8000d5f8:	701c                	ld	a5,32(s0)
    8000d5fa:	0001a597          	auipc	a1,0x1a
    8000d5fe:	72658593          	addi	a1,a1,1830 # 80027d20 <__func__.0+0x2c0>
    8000d602:	e399                	bnez	a5,8000d608 <tinst_tests_gpf+0x1da8>
    8000d604:	e7bfe06f          	j	8000c47e <tinst_tests_gpf+0xc1e>
    8000d608:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d60a:	0016f713          	andi	a4,a3,1
    8000d60e:	74071763          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d612:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d616:	460d                	li	a2,3
    8000d618:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d61c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d61e:	00c59763          	bne	a1,a2,8000d62c <tinst_tests_gpf+0x1dcc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d622:	0026d683          	lhu	a3,2(a3)
    8000d626:	0106969b          	slliw	a3,a3,0x10
    8000d62a:	8f55                	or	a4,a4,a3
    8000d62c:	1ffe16b7          	lui	a3,0x1ffe1
    8000d630:	068e                	slli	a3,a3,0x3
    8000d632:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d634:	8f75                	and	a4,a4,a3
    8000d636:	0001a597          	auipc	a1,0x1a
    8000d63a:	6ea58593          	addi	a1,a1,1770 # 80027d20 <__func__.0+0x2c0>
    8000d63e:	00e79463          	bne	a5,a4,8000d646 <tinst_tests_gpf+0x1de6>
    8000d642:	e3dfe06f          	j	8000c47e <tinst_tests_gpf+0xc1e>
    8000d646:	0001a597          	auipc	a1,0x1a
    8000d64a:	6ea58593          	addi	a1,a1,1770 # 80027d30 <__func__.0+0x2d0>
    8000d64e:	e31fe06f          	j	8000c47e <tinst_tests_gpf+0xc1e>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a sgpf",
    8000d652:	701c                	ld	a5,32(s0)
    8000d654:	0001a597          	auipc	a1,0x1a
    8000d658:	6cc58593          	addi	a1,a1,1740 # 80027d20 <__func__.0+0x2c0>
    8000d65c:	e399                	bnez	a5,8000d662 <tinst_tests_gpf+0x1e02>
    8000d65e:	ed7fe06f          	j	8000c534 <tinst_tests_gpf+0xcd4>
    8000d662:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d664:	0016f713          	andi	a4,a3,1
    8000d668:	6e071a63          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d66c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d670:	460d                	li	a2,3
    8000d672:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d676:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d678:	00c59763          	bne	a1,a2,8000d686 <tinst_tests_gpf+0x1e26>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d67c:	0026d683          	lhu	a3,2(a3)
    8000d680:	0106969b          	slliw	a3,a3,0x10
    8000d684:	8f55                	or	a4,a4,a3
    8000d686:	1ffe16b7          	lui	a3,0x1ffe1
    8000d68a:	068e                	slli	a3,a3,0x3
    8000d68c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d68e:	8f75                	and	a4,a4,a3
    8000d690:	0001a597          	auipc	a1,0x1a
    8000d694:	69058593          	addi	a1,a1,1680 # 80027d20 <__func__.0+0x2c0>
    8000d698:	00e79463          	bne	a5,a4,8000d6a0 <tinst_tests_gpf+0x1e40>
    8000d69c:	e99fe06f          	j	8000c534 <tinst_tests_gpf+0xcd4>
    8000d6a0:	0001a597          	auipc	a1,0x1a
    8000d6a4:	69058593          	addi	a1,a1,1680 # 80027d30 <__func__.0+0x2d0>
    8000d6a8:	e8dfe06f          	j	8000c534 <tinst_tests_gpf+0xcd4>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a sgpf",
    8000d6ac:	701c                	ld	a5,32(s0)
    8000d6ae:	0001a597          	auipc	a1,0x1a
    8000d6b2:	67258593          	addi	a1,a1,1650 # 80027d20 <__func__.0+0x2c0>
    8000d6b6:	e399                	bnez	a5,8000d6bc <tinst_tests_gpf+0x1e5c>
    8000d6b8:	f33fe06f          	j	8000c5ea <tinst_tests_gpf+0xd8a>
    8000d6bc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d6be:	0016f713          	andi	a4,a3,1
    8000d6c2:	68071d63          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d6c6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d6ca:	460d                	li	a2,3
    8000d6cc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d6d0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d6d2:	00c59763          	bne	a1,a2,8000d6e0 <tinst_tests_gpf+0x1e80>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d6d6:	0026d683          	lhu	a3,2(a3)
    8000d6da:	0106969b          	slliw	a3,a3,0x10
    8000d6de:	8f55                	or	a4,a4,a3
    8000d6e0:	1ffe16b7          	lui	a3,0x1ffe1
    8000d6e4:	068e                	slli	a3,a3,0x3
    8000d6e6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d6e8:	8f75                	and	a4,a4,a3
    8000d6ea:	0001a597          	auipc	a1,0x1a
    8000d6ee:	63658593          	addi	a1,a1,1590 # 80027d20 <__func__.0+0x2c0>
    8000d6f2:	00e79463          	bne	a5,a4,8000d6fa <tinst_tests_gpf+0x1e9a>
    8000d6f6:	ef5fe06f          	j	8000c5ea <tinst_tests_gpf+0xd8a>
    8000d6fa:	0001a597          	auipc	a1,0x1a
    8000d6fe:	63658593          	addi	a1,a1,1590 # 80027d30 <__func__.0+0x2d0>
    8000d702:	ee9fe06f          	j	8000c5ea <tinst_tests_gpf+0xd8a>
    TEST_ASSERT("correct tinst when executing a lh which results in a lgpf",
    8000d706:	701c                	ld	a5,32(s0)
    8000d708:	e399                	bnez	a5,8000d70e <tinst_tests_gpf+0x1eae>
    8000d70a:	beafe06f          	j	8000baf4 <tinst_tests_gpf+0x294>
    8000d70e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d710:	0016f713          	andi	a4,a3,1
    8000d714:	64071463          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d718:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d71c:	460d                	li	a2,3
    8000d71e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d722:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d724:	00c59763          	bne	a1,a2,8000d732 <tinst_tests_gpf+0x1ed2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d728:	0026d683          	lhu	a3,2(a3)
    8000d72c:	0106969b          	slliw	a3,a3,0x10
    8000d730:	8f55                	or	a4,a4,a3
    8000d732:	1746                	slli	a4,a4,0x31
    8000d734:	9345                	srli	a4,a4,0x31
    8000d736:	00e78463          	beq	a5,a4,8000d73e <tinst_tests_gpf+0x1ede>
    8000d73a:	ba6fe06f          	j	8000bae0 <tinst_tests_gpf+0x280>
    8000d73e:	bb6fe06f          	j	8000baf4 <tinst_tests_gpf+0x294>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lgpf",
    8000d742:	701c                	ld	a5,32(s0)
    8000d744:	e399                	bnez	a5,8000d74a <tinst_tests_gpf+0x1eea>
    8000d746:	c64fe06f          	j	8000bbaa <tinst_tests_gpf+0x34a>
    8000d74a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d74c:	0016f713          	andi	a4,a3,1
    8000d750:	60071663          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d754:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d758:	460d                	li	a2,3
    8000d75a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d75e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d760:	00c59763          	bne	a1,a2,8000d76e <tinst_tests_gpf+0x1f0e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d764:	0026d683          	lhu	a3,2(a3)
    8000d768:	0106969b          	slliw	a3,a3,0x10
    8000d76c:	8f55                	or	a4,a4,a3
    8000d76e:	1746                	slli	a4,a4,0x31
    8000d770:	9345                	srli	a4,a4,0x31
    8000d772:	00e78463          	beq	a5,a4,8000d77a <tinst_tests_gpf+0x1f1a>
    8000d776:	c20fe06f          	j	8000bb96 <tinst_tests_gpf+0x336>
    8000d77a:	c30fe06f          	j	8000bbaa <tinst_tests_gpf+0x34a>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lgpf",
    8000d77e:	6418                	ld	a4,8(s0)
    8000d780:	47d5                	li	a5,21
    8000d782:	00f70463          	beq	a4,a5,8000d78a <tinst_tests_gpf+0x1f2a>
    8000d786:	da8fe06f          	j	8000bd2e <tinst_tests_gpf+0x4ce>
    8000d78a:	7018                	ld	a4,32(s0)
    8000d78c:	e319                	bnez	a4,8000d792 <tinst_tests_gpf+0x1f32>
    8000d78e:	da2fe06f          	j	8000bd30 <tinst_tests_gpf+0x4d0>
    8000d792:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d794:	0016f793          	andi	a5,a3,1
    8000d798:	5c079263          	bnez	a5,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d79c:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d7a0:	460d                	li	a2,3
    8000d7a2:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000d7a6:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000d7a8:	00c59763          	bne	a1,a2,8000d7b6 <tinst_tests_gpf+0x1f56>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d7ac:	0026d683          	lhu	a3,2(a3)
    8000d7b0:	0106969b          	slliw	a3,a3,0x10
    8000d7b4:	8fd5                	or	a5,a5,a3
    8000d7b6:	17c6                	slli	a5,a5,0x31
    8000d7b8:	0317d913          	srli	s2,a5,0x31
    8000d7bc:	40e90933          	sub	s2,s2,a4
    8000d7c0:	00193913          	seqz	s2,s2
    8000d7c4:	d6cfe06f          	j	8000bd30 <tinst_tests_gpf+0x4d0>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a sgpf",
    8000d7c8:	6418                	ld	a4,8(s0)
    8000d7ca:	47dd                	li	a5,23
    8000d7cc:	0001a597          	auipc	a1,0x1a
    8000d7d0:	56458593          	addi	a1,a1,1380 # 80027d30 <__func__.0+0x2d0>
    8000d7d4:	00f70463          	beq	a4,a5,8000d7dc <tinst_tests_gpf+0x1f7c>
    8000d7d8:	ebdfe06f          	j	8000c694 <tinst_tests_gpf+0xe34>
    8000d7dc:	701c                	ld	a5,32(s0)
    8000d7de:	0001a597          	auipc	a1,0x1a
    8000d7e2:	54258593          	addi	a1,a1,1346 # 80027d20 <__func__.0+0x2c0>
    8000d7e6:	e399                	bnez	a5,8000d7ec <tinst_tests_gpf+0x1f8c>
    8000d7e8:	eadfe06f          	j	8000c694 <tinst_tests_gpf+0xe34>
    8000d7ec:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d7ee:	0016f713          	andi	a4,a3,1
    8000d7f2:	56071563          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d7f6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d7fa:	460d                	li	a2,3
    8000d7fc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d800:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d802:	00c59763          	bne	a1,a2,8000d810 <tinst_tests_gpf+0x1fb0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d806:	0026d683          	lhu	a3,2(a3)
    8000d80a:	0106969b          	slliw	a3,a3,0x10
    8000d80e:	8f55                	or	a4,a4,a3
    8000d810:	1ffe16b7          	lui	a3,0x1ffe1
    8000d814:	068e                	slli	a3,a3,0x3
    8000d816:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d818:	8f75                	and	a4,a4,a3
    8000d81a:	0001a597          	auipc	a1,0x1a
    8000d81e:	50658593          	addi	a1,a1,1286 # 80027d20 <__func__.0+0x2c0>
    8000d822:	00e78463          	beq	a5,a4,8000d82a <tinst_tests_gpf+0x1fca>
    8000d826:	e67fe06f          	j	8000c68c <tinst_tests_gpf+0xe2c>
    8000d82a:	e6bfe06f          	j	8000c694 <tinst_tests_gpf+0xe34>
    TEST_ASSERT("correct tinst when executing a ld which results in a lgpf",
    8000d82e:	6418                	ld	a4,8(s0)
    8000d830:	47d5                	li	a5,21
    8000d832:	00f70463          	beq	a4,a5,8000d83a <tinst_tests_gpf+0x1fda>
    8000d836:	da6fe06f          	j	8000bddc <tinst_tests_gpf+0x57c>
    8000d83a:	7018                	ld	a4,32(s0)
    8000d83c:	e319                	bnez	a4,8000d842 <tinst_tests_gpf+0x1fe2>
    8000d83e:	da0fe06f          	j	8000bdde <tinst_tests_gpf+0x57e>
    8000d842:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d844:	0016f793          	andi	a5,a3,1
    8000d848:	50079a63          	bnez	a5,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d84c:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d850:	460d                	li	a2,3
    8000d852:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000d856:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000d858:	00c59763          	bne	a1,a2,8000d866 <tinst_tests_gpf+0x2006>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d85c:	0026d683          	lhu	a3,2(a3)
    8000d860:	0106969b          	slliw	a3,a3,0x10
    8000d864:	8fd5                	or	a5,a5,a3
    8000d866:	17c6                	slli	a5,a5,0x31
    8000d868:	0317d913          	srli	s2,a5,0x31
    8000d86c:	40e90933          	sub	s2,s2,a4
    8000d870:	00193913          	seqz	s2,s2
    8000d874:	d6afe06f          	j	8000bdde <tinst_tests_gpf+0x57e>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a sgpf",
    8000d878:	6418                	ld	a4,8(s0)
    8000d87a:	47dd                	li	a5,23
    8000d87c:	0001a597          	auipc	a1,0x1a
    8000d880:	4b458593          	addi	a1,a1,1204 # 80027d30 <__func__.0+0x2d0>
    8000d884:	00f70463          	beq	a4,a5,8000d88c <tinst_tests_gpf+0x202c>
    8000d888:	eb7fe06f          	j	8000c73e <tinst_tests_gpf+0xede>
    8000d88c:	701c                	ld	a5,32(s0)
    8000d88e:	0001a597          	auipc	a1,0x1a
    8000d892:	49258593          	addi	a1,a1,1170 # 80027d20 <__func__.0+0x2c0>
    8000d896:	e399                	bnez	a5,8000d89c <tinst_tests_gpf+0x203c>
    8000d898:	ea7fe06f          	j	8000c73e <tinst_tests_gpf+0xede>
    8000d89c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d89e:	0016f713          	andi	a4,a3,1
    8000d8a2:	4a071d63          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d8a6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d8aa:	460d                	li	a2,3
    8000d8ac:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d8b0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d8b2:	00c59763          	bne	a1,a2,8000d8c0 <tinst_tests_gpf+0x2060>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d8b6:	0026d683          	lhu	a3,2(a3)
    8000d8ba:	0106969b          	slliw	a3,a3,0x10
    8000d8be:	8f55                	or	a4,a4,a3
    8000d8c0:	1ffe16b7          	lui	a3,0x1ffe1
    8000d8c4:	068e                	slli	a3,a3,0x3
    8000d8c6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d8c8:	8f75                	and	a4,a4,a3
    8000d8ca:	0001a597          	auipc	a1,0x1a
    8000d8ce:	45658593          	addi	a1,a1,1110 # 80027d20 <__func__.0+0x2c0>
    8000d8d2:	00e78463          	beq	a5,a4,8000d8da <tinst_tests_gpf+0x207a>
    8000d8d6:	e61fe06f          	j	8000c736 <tinst_tests_gpf+0xed6>
    8000d8da:	e65fe06f          	j	8000c73e <tinst_tests_gpf+0xede>
    TEST_ASSERT("correct tinst when executing a sb which results in a sgpf",
    8000d8de:	6418                	ld	a4,8(s0)
    8000d8e0:	47dd                	li	a5,23
    8000d8e2:	00f70463          	beq	a4,a5,8000d8ea <tinst_tests_gpf+0x208a>
    8000d8e6:	da6fe06f          	j	8000be8c <tinst_tests_gpf+0x62c>
    8000d8ea:	701c                	ld	a5,32(s0)
    8000d8ec:	e399                	bnez	a5,8000d8f2 <tinst_tests_gpf+0x2092>
    8000d8ee:	da0fe06f          	j	8000be8e <tinst_tests_gpf+0x62e>
    8000d8f2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d8f4:	0016f713          	andi	a4,a3,1
    8000d8f8:	46071263          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d8fc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d900:	460d                	li	a2,3
    8000d902:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d906:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d908:	00c59763          	bne	a1,a2,8000d916 <tinst_tests_gpf+0x20b6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d90c:	0026d683          	lhu	a3,2(a3)
    8000d910:	0106969b          	slliw	a3,a3,0x10
    8000d914:	8f55                	or	a4,a4,a3
    8000d916:	01f076b7          	lui	a3,0x1f07
    8000d91a:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d91e:	8f75                	and	a4,a4,a3
    8000d920:	40f70933          	sub	s2,a4,a5
    8000d924:	00193913          	seqz	s2,s2
    8000d928:	d66fe06f          	j	8000be8e <tinst_tests_gpf+0x62e>
    TEST_ASSERT("correct tinst when executing a lb which results in a lgpf",         
    8000d92c:	7018                	ld	a4,32(s0)
    8000d92e:	678d                	lui	a5,0x3
    8000d930:	0001a597          	auipc	a1,0x1a
    8000d934:	3f058593          	addi	a1,a1,1008 # 80027d20 <__func__.0+0x2c0>
    8000d938:	00f71463          	bne	a4,a5,8000d940 <tinst_tests_gpf+0x20e0>
    8000d93c:	826fe06f          	j	8000b962 <tinst_tests_gpf+0x102>
    8000d940:	0001a597          	auipc	a1,0x1a
    8000d944:	3f058593          	addi	a1,a1,1008 # 80027d30 <__func__.0+0x2d0>
    8000d948:	81afe06f          	j	8000b962 <tinst_tests_gpf+0x102>
    8000d94c:	02043903          	ld	s2,32(s0)
    8000d950:	77f5                	lui	a5,0xffffd
    8000d952:	993e                	add	s2,s2,a5
    8000d954:	00193913          	seqz	s2,s2
    8000d958:	85efe06f          	j	8000b9b6 <tinst_tests_gpf+0x156>
    TEST_ASSERT("correct tinst when executing a sh which results in a sgpf",
    8000d95c:	6418                	ld	a4,8(s0)
    8000d95e:	47dd                	li	a5,23
    8000d960:	00f70463          	beq	a4,a5,8000d968 <tinst_tests_gpf+0x2108>
    8000d964:	ddcfe06f          	j	8000bf40 <tinst_tests_gpf+0x6e0>
    8000d968:	701c                	ld	a5,32(s0)
    8000d96a:	e399                	bnez	a5,8000d970 <tinst_tests_gpf+0x2110>
    8000d96c:	dd6fe06f          	j	8000bf42 <tinst_tests_gpf+0x6e2>
    8000d970:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d972:	0016f713          	andi	a4,a3,1
    8000d976:	3e071363          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d97a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d97e:	460d                	li	a2,3
    8000d980:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d984:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d986:	00c59763          	bne	a1,a2,8000d994 <tinst_tests_gpf+0x2134>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d98a:	0026d683          	lhu	a3,2(a3)
    8000d98e:	0106969b          	slliw	a3,a3,0x10
    8000d992:	8f55                	or	a4,a4,a3
    8000d994:	01f076b7          	lui	a3,0x1f07
    8000d998:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d99c:	8f75                	and	a4,a4,a3
    8000d99e:	40f70933          	sub	s2,a4,a5
    8000d9a2:	00193913          	seqz	s2,s2
    8000d9a6:	d9cfe06f          	j	8000bf42 <tinst_tests_gpf+0x6e2>
    TEST_ASSERT("correct tinst when executing a sw which results in a sgpf",
    8000d9aa:	6418                	ld	a4,8(s0)
    8000d9ac:	47dd                	li	a5,23
    8000d9ae:	00f70463          	beq	a4,a5,8000d9b6 <tinst_tests_gpf+0x2156>
    8000d9b2:	e44fe06f          	j	8000bff6 <tinst_tests_gpf+0x796>
    8000d9b6:	701c                	ld	a5,32(s0)
    8000d9b8:	e399                	bnez	a5,8000d9be <tinst_tests_gpf+0x215e>
    8000d9ba:	e3efe06f          	j	8000bff8 <tinst_tests_gpf+0x798>
    8000d9be:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d9c0:	0016f713          	andi	a4,a3,1
    8000d9c4:	38071c63          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d9c8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d9cc:	460d                	li	a2,3
    8000d9ce:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d9d2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d9d4:	00c59763          	bne	a1,a2,8000d9e2 <tinst_tests_gpf+0x2182>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d9d8:	0026d683          	lhu	a3,2(a3)
    8000d9dc:	0106969b          	slliw	a3,a3,0x10
    8000d9e0:	8f55                	or	a4,a4,a3
    8000d9e2:	01f076b7          	lui	a3,0x1f07
    8000d9e6:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d9ea:	8f75                	and	a4,a4,a3
    8000d9ec:	40f70933          	sub	s2,a4,a5
    8000d9f0:	00193913          	seqz	s2,s2
    8000d9f4:	e04fe06f          	j	8000bff8 <tinst_tests_gpf+0x798>
    TEST_ASSERT("correct tinst when executing a sd which results in a sgpf",
    8000d9f8:	6418                	ld	a4,8(s0)
    8000d9fa:	47dd                	li	a5,23
    8000d9fc:	00f70463          	beq	a4,a5,8000da04 <tinst_tests_gpf+0x21a4>
    8000da00:	eaefe06f          	j	8000c0ae <tinst_tests_gpf+0x84e>
    8000da04:	701c                	ld	a5,32(s0)
    8000da06:	e399                	bnez	a5,8000da0c <tinst_tests_gpf+0x21ac>
    8000da08:	ea8fe06f          	j	8000c0b0 <tinst_tests_gpf+0x850>
    8000da0c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000da0e:	0016f713          	andi	a4,a3,1
    8000da12:	34071563          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000da16:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000da1a:	460d                	li	a2,3
    8000da1c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000da20:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000da22:	00c59763          	bne	a1,a2,8000da30 <tinst_tests_gpf+0x21d0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000da26:	0026d683          	lhu	a3,2(a3)
    8000da2a:	0106969b          	slliw	a3,a3,0x10
    8000da2e:	8f55                	or	a4,a4,a3
    8000da30:	01f076b7          	lui	a3,0x1f07
    8000da34:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000da38:	8f75                	and	a4,a4,a3
    8000da3a:	40f70933          	sub	s2,a4,a5
    8000da3e:	00193913          	seqz	s2,s2
    8000da42:	e6efe06f          	j	8000c0b0 <tinst_tests_gpf+0x850>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000da46:	6418                	ld	a4,8(s0)
    8000da48:	47d5                	li	a5,21
    8000da4a:	00f70463          	beq	a4,a5,8000da52 <tinst_tests_gpf+0x21f2>
    8000da4e:	f08fe06f          	j	8000c156 <tinst_tests_gpf+0x8f6>
    8000da52:	7004                	ld	s1,32(s0)
    8000da54:	e099                	bnez	s1,8000da5a <tinst_tests_gpf+0x21fa>
    8000da56:	f02fe06f          	j	8000c158 <tinst_tests_gpf+0x8f8>
    8000da5a:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000da5c:	0017f713          	andi	a4,a5,1
    8000da60:	2e071e63          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000da64:	0007d503          	lhu	a0,0(a5) # ffffffffffffd000 <__stack_top+0xffffffff7fcfe000>
    8000da68:	961f30ef          	jal	800013c8 <expand_compressed_instruction>
    8000da6c:	67a1                	lui	a5,0x8
    8000da6e:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000da70:	00f57933          	and	s2,a0,a5
    8000da74:	40990933          	sub	s2,s2,s1
    8000da78:	00193913          	seqz	s2,s2
    8000da7c:	edcfe06f          	j	8000c158 <tinst_tests_gpf+0x8f8>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000da80:	6418                	ld	a4,8(s0)
    8000da82:	47d5                	li	a5,21
    8000da84:	00f70463          	beq	a4,a5,8000da8c <tinst_tests_gpf+0x222c>
    8000da88:	f78fe06f          	j	8000c200 <tinst_tests_gpf+0x9a0>
    8000da8c:	02043983          	ld	s3,32(s0)
    8000da90:	00099463          	bnez	s3,8000da98 <tinst_tests_gpf+0x2238>
    8000da94:	f6efe06f          	j	8000c202 <tinst_tests_gpf+0x9a2>
    8000da98:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000da9a:	0017f713          	andi	a4,a5,1
    8000da9e:	2a071f63          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000daa2:	0007d503          	lhu	a0,0(a5)
    8000daa6:	923f30ef          	jal	800013c8 <expand_compressed_instruction>
    8000daaa:	67a1                	lui	a5,0x8
    8000daac:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000daae:	00f57933          	and	s2,a0,a5
    8000dab2:	41390933          	sub	s2,s2,s3
    8000dab6:	00193913          	seqz	s2,s2
    8000daba:	f48fe06f          	j	8000c202 <tinst_tests_gpf+0x9a2>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000dabe:	6418                	ld	a4,8(s0)
    8000dac0:	47dd                	li	a5,23
    8000dac2:	00f70463          	beq	a4,a5,8000daca <tinst_tests_gpf+0x226a>
    8000dac6:	fe4fe06f          	j	8000c2aa <tinst_tests_gpf+0xa4a>
    8000daca:	02043983          	ld	s3,32(s0)
    8000dace:	00099463          	bnez	s3,8000dad6 <tinst_tests_gpf+0x2276>
    8000dad2:	fdafe06f          	j	8000c2ac <tinst_tests_gpf+0xa4c>
    8000dad6:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000dad8:	0017f713          	andi	a4,a5,1
    8000dadc:	28071063          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000dae0:	0007d503          	lhu	a0,0(a5)
    8000dae4:	8e5f30ef          	jal	800013c8 <expand_compressed_instruction>
    8000dae8:	01f077b7          	lui	a5,0x1f07
    8000daec:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000daf0:	00f57933          	and	s2,a0,a5
    8000daf4:	41390933          	sub	s2,s2,s3
    8000daf8:	00193913          	seqz	s2,s2
    8000dafc:	fb0fe06f          	j	8000c2ac <tinst_tests_gpf+0xa4c>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a sgpf",
    8000db00:	701c                	ld	a5,32(s0)
    8000db02:	e399                	bnez	a5,8000db08 <tinst_tests_gpf+0x22a8>
    8000db04:	9b1fe06f          	j	8000c4b4 <tinst_tests_gpf+0xc54>
    8000db08:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000db0a:	0016f713          	andi	a4,a3,1
    8000db0e:	24071763          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000db12:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000db16:	460d                	li	a2,3
    8000db18:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000db1c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000db1e:	00c59763          	bne	a1,a2,8000db2c <tinst_tests_gpf+0x22cc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000db22:	0026d683          	lhu	a3,2(a3)
    8000db26:	0106969b          	slliw	a3,a3,0x10
    8000db2a:	8f55                	or	a4,a4,a3
    8000db2c:	1ffe16b7          	lui	a3,0x1ffe1
    8000db30:	068e                	slli	a3,a3,0x3
    8000db32:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000db34:	8f75                	and	a4,a4,a3
    8000db36:	00e78463          	beq	a5,a4,8000db3e <tinst_tests_gpf+0x22de>
    8000db3a:	967fe06f          	j	8000c4a0 <tinst_tests_gpf+0xc40>
    8000db3e:	977fe06f          	j	8000c4b4 <tinst_tests_gpf+0xc54>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000db42:	7004                	ld	s1,32(s0)
    8000db44:	64049be3          	bnez	s1,8000e99a <tinst_tests_gpf+0x313a>
    8000db48:	0001a597          	auipc	a1,0x1a
    8000db4c:	1d858593          	addi	a1,a1,472 # 80027d20 <__func__.0+0x2c0>
    8000db50:	db8fe06f          	j	8000c108 <tinst_tests_gpf+0x8a8>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a sgpf",
    8000db54:	701c                	ld	a5,32(s0)
    8000db56:	e399                	bnez	a5,8000db5c <tinst_tests_gpf+0x22fc>
    8000db58:	a13fe06f          	j	8000c56a <tinst_tests_gpf+0xd0a>
    8000db5c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000db5e:	0016f713          	andi	a4,a3,1
    8000db62:	1e071d63          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000db66:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000db6a:	460d                	li	a2,3
    8000db6c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000db70:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000db72:	00c59763          	bne	a1,a2,8000db80 <tinst_tests_gpf+0x2320>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000db76:	0026d683          	lhu	a3,2(a3)
    8000db7a:	0106969b          	slliw	a3,a3,0x10
    8000db7e:	8f55                	or	a4,a4,a3
    8000db80:	1ffe16b7          	lui	a3,0x1ffe1
    8000db84:	068e                	slli	a3,a3,0x3
    8000db86:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000db88:	8f75                	and	a4,a4,a3
    8000db8a:	00e78463          	beq	a5,a4,8000db92 <tinst_tests_gpf+0x2332>
    8000db8e:	9c9fe06f          	j	8000c556 <tinst_tests_gpf+0xcf6>
    8000db92:	9d9fe06f          	j	8000c56a <tinst_tests_gpf+0xd0a>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000db96:	02043983          	ld	s3,32(s0)
    8000db9a:	660997e3          	bnez	s3,8000ea08 <tinst_tests_gpf+0x31a8>
    8000db9e:	0001a597          	auipc	a1,0x1a
    8000dba2:	18258593          	addi	a1,a1,386 # 80027d20 <__func__.0+0x2c0>
    8000dba6:	e0cfe06f          	j	8000c1b2 <tinst_tests_gpf+0x952>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a sgpf",
    8000dbaa:	701c                	ld	a5,32(s0)
    8000dbac:	e399                	bnez	a5,8000dbb2 <tinst_tests_gpf+0x2352>
    8000dbae:	a73fe06f          	j	8000c620 <tinst_tests_gpf+0xdc0>
    8000dbb2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dbb4:	0016f713          	andi	a4,a3,1
    8000dbb8:	1a071263          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000dbbc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dbc0:	460d                	li	a2,3
    8000dbc2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dbc6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dbc8:	00c59763          	bne	a1,a2,8000dbd6 <tinst_tests_gpf+0x2376>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dbcc:	0026d683          	lhu	a3,2(a3)
    8000dbd0:	0106969b          	slliw	a3,a3,0x10
    8000dbd4:	8f55                	or	a4,a4,a3
    8000dbd6:	1ffe16b7          	lui	a3,0x1ffe1
    8000dbda:	068e                	slli	a3,a3,0x3
    8000dbdc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dbde:	8f75                	and	a4,a4,a3
    8000dbe0:	00e78463          	beq	a5,a4,8000dbe8 <tinst_tests_gpf+0x2388>
    8000dbe4:	a29fe06f          	j	8000c60c <tinst_tests_gpf+0xdac>
    8000dbe8:	a39fe06f          	j	8000c620 <tinst_tests_gpf+0xdc0>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000dbec:	02043983          	ld	s3,32(s0)
    8000dbf0:	6c0994e3          	bnez	s3,8000eab8 <tinst_tests_gpf+0x3258>
    8000dbf4:	0001a597          	auipc	a1,0x1a
    8000dbf8:	12c58593          	addi	a1,a1,300 # 80027d20 <__func__.0+0x2c0>
    8000dbfc:	e60fe06f          	j	8000c25c <tinst_tests_gpf+0x9fc>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a sgpf",
    8000dc00:	701c                	ld	a5,32(s0)
    8000dc02:	e399                	bnez	a5,8000dc08 <tinst_tests_gpf+0x23a8>
    8000dc04:	ac7fe06f          	j	8000c6ca <tinst_tests_gpf+0xe6a>
    8000dc08:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dc0a:	0016f713          	andi	a4,a3,1
    8000dc0e:	14071763          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000dc12:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dc16:	460d                	li	a2,3
    8000dc18:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dc1c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dc1e:	00c59763          	bne	a1,a2,8000dc2c <tinst_tests_gpf+0x23cc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dc22:	0026d683          	lhu	a3,2(a3)
    8000dc26:	0106969b          	slliw	a3,a3,0x10
    8000dc2a:	8f55                	or	a4,a4,a3
    8000dc2c:	1ffe16b7          	lui	a3,0x1ffe1
    8000dc30:	068e                	slli	a3,a3,0x3
    8000dc32:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dc34:	8f75                	and	a4,a4,a3
    8000dc36:	00e78463          	beq	a5,a4,8000dc3e <tinst_tests_gpf+0x23de>
    8000dc3a:	a7dfe06f          	j	8000c6b6 <tinst_tests_gpf+0xe56>
    8000dc3e:	a8dfe06f          	j	8000c6ca <tinst_tests_gpf+0xe6a>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000dc42:	7004                	ld	s1,32(s0)
    8000dc44:	6e0493e3          	bnez	s1,8000eb2a <tinst_tests_gpf+0x32ca>
    8000dc48:	0001a597          	auipc	a1,0x1a
    8000dc4c:	0d858593          	addi	a1,a1,216 # 80027d20 <__func__.0+0x2c0>
    8000dc50:	eb6fe06f          	j	8000c306 <tinst_tests_gpf+0xaa6>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lgpf",
    8000dc54:	7018                	ld	a4,32(s0)
    8000dc56:	e319                	bnez	a4,8000dc5c <tinst_tests_gpf+0x23fc>
    8000dc58:	e15fd06f          	j	8000ba6c <tinst_tests_gpf+0x20c>
    8000dc5c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dc5e:	0016f793          	andi	a5,a3,1
    8000dc62:	efed                	bnez	a5,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000dc64:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dc68:	460d                	li	a2,3
    8000dc6a:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000dc6e:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000dc70:	00c59763          	bne	a1,a2,8000dc7e <tinst_tests_gpf+0x241e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dc74:	0026d683          	lhu	a3,2(a3)
    8000dc78:	0106969b          	slliw	a3,a3,0x10
    8000dc7c:	8fd5                	or	a5,a5,a3
    8000dc7e:	03179913          	slli	s2,a5,0x31
    8000dc82:	03195913          	srli	s2,s2,0x31
    8000dc86:	40e90933          	sub	s2,s2,a4
    8000dc8a:	00193913          	seqz	s2,s2
    8000dc8e:	ddffd06f          	j	8000ba6c <tinst_tests_gpf+0x20c>
    TEST_ASSERT("correct tinst when executing a lh which results in a lgpf",
    8000dc92:	7018                	ld	a4,32(s0)
    8000dc94:	e319                	bnez	a4,8000dc9a <tinst_tests_gpf+0x243a>
    8000dc96:	e81fd06f          	j	8000bb16 <tinst_tests_gpf+0x2b6>
    8000dc9a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dc9c:	0016f793          	andi	a5,a3,1
    8000dca0:	efd5                	bnez	a5,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000dca2:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dca6:	460d                	li	a2,3
    8000dca8:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000dcac:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000dcae:	00c59763          	bne	a1,a2,8000dcbc <tinst_tests_gpf+0x245c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dcb2:	0026d683          	lhu	a3,2(a3)
    8000dcb6:	0106969b          	slliw	a3,a3,0x10
    8000dcba:	8fd5                	or	a5,a5,a3
    8000dcbc:	03179913          	slli	s2,a5,0x31
    8000dcc0:	03195913          	srli	s2,s2,0x31
    8000dcc4:	40e90933          	sub	s2,s2,a4
    8000dcc8:	00193913          	seqz	s2,s2
    8000dccc:	e4bfd06f          	j	8000bb16 <tinst_tests_gpf+0x2b6>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lgpf",
    8000dcd0:	7018                	ld	a4,32(s0)
    8000dcd2:	e319                	bnez	a4,8000dcd8 <tinst_tests_gpf+0x2478>
    8000dcd4:	ef9fd06f          	j	8000bbcc <tinst_tests_gpf+0x36c>
    8000dcd8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dcda:	0016f793          	andi	a5,a3,1
    8000dcde:	efbd                	bnez	a5,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000dce0:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dce4:	460d                	li	a2,3
    8000dce6:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000dcea:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000dcec:	00c59763          	bne	a1,a2,8000dcfa <tinst_tests_gpf+0x249a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dcf0:	0026d683          	lhu	a3,2(a3)
    8000dcf4:	0106969b          	slliw	a3,a3,0x10
    8000dcf8:	8fd5                	or	a5,a5,a3
    8000dcfa:	03179913          	slli	s2,a5,0x31
    8000dcfe:	03195913          	srli	s2,s2,0x31
    8000dd02:	40e90933          	sub	s2,s2,a4
    8000dd06:	00193913          	seqz	s2,s2
    8000dd0a:	ec3fd06f          	j	8000bbcc <tinst_tests_gpf+0x36c>
    TEST_ASSERT("correct tinst when executing a lw which results in a lgpf",
    8000dd0e:	7018                	ld	a4,32(s0)
    8000dd10:	e319                	bnez	a4,8000dd16 <tinst_tests_gpf+0x24b6>
    8000dd12:	f71fd06f          	j	8000bc82 <tinst_tests_gpf+0x422>
    8000dd16:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dd18:	0016f793          	andi	a5,a3,1
    8000dd1c:	e3a1                	bnez	a5,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000dd1e:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dd22:	460d                	li	a2,3
    8000dd24:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000dd28:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000dd2a:	00c59763          	bne	a1,a2,8000dd38 <tinst_tests_gpf+0x24d8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dd2e:	0026d683          	lhu	a3,2(a3)
    8000dd32:	0106969b          	slliw	a3,a3,0x10
    8000dd36:	8fd5                	or	a5,a5,a3
    8000dd38:	17c6                	slli	a5,a5,0x31
    8000dd3a:	0317d913          	srli	s2,a5,0x31
    8000dd3e:	40e90933          	sub	s2,s2,a4
    8000dd42:	00193913          	seqz	s2,s2
    8000dd46:	f3dfd06f          	j	8000bc82 <tinst_tests_gpf+0x422>
    8000dd4a:	701c                	ld	a5,32(s0)
    8000dd4c:	e399                	bnez	a5,8000dd52 <tinst_tests_gpf+0x24f2>
    8000dd4e:	f13fd06f          	j	8000bc60 <tinst_tests_gpf+0x400>
    8000dd52:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dd54:	0016f713          	andi	a4,a3,1
    8000dd58:	320700e3          	beqz	a4,8000e878 <tinst_tests_gpf+0x3018>
        ERROR("trying to read unaligned instruction (%s, %d)", __func__, __LINE__);
    8000dd5c:	11400613          	li	a2,276
    8000dd60:	00019597          	auipc	a1,0x19
    8000dd64:	a9858593          	addi	a1,a1,-1384 # 800267f8 <__func__.1>
    8000dd68:	0001c517          	auipc	a0,0x1c
    8000dd6c:	97050513          	addi	a0,a0,-1680 # 800296d8 <__func__.0+0x1c78>
    8000dd70:	787170ef          	jal	80025cf6 <printf>
    8000dd74:	11400613          	li	a2,276
    8000dd78:	00019597          	auipc	a1,0x19
    8000dd7c:	a8058593          	addi	a1,a1,-1408 # 800267f8 <__func__.1>
    8000dd80:	0001a517          	auipc	a0,0x1a
    8000dd84:	14850513          	addi	a0,a0,328 # 80027ec8 <__func__.0+0x468>
    8000dd88:	76f170ef          	jal	80025cf6 <printf>
    8000dd8c:	4501                	li	a0,0
    8000dd8e:	427170ef          	jal	800259b4 <exit>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a sgpf",
    8000dd92:	701c                	ld	a5,32(s0)
    8000dd94:	0001a597          	auipc	a1,0x1a
    8000dd98:	f8c58593          	addi	a1,a1,-116 # 80027d20 <__func__.0+0x2c0>
    8000dd9c:	e399                	bnez	a5,8000dda2 <tinst_tests_gpf+0x2542>
    8000dd9e:	a57fe06f          	j	8000c7f4 <tinst_tests_gpf+0xf94>
    8000dda2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dda4:	0016f713          	andi	a4,a3,1
    8000dda8:	fb55                	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ddaa:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ddae:	460d                	li	a2,3
    8000ddb0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ddb4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ddb6:	00c59763          	bne	a1,a2,8000ddc4 <tinst_tests_gpf+0x2564>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ddba:	0026d683          	lhu	a3,2(a3)
    8000ddbe:	0106969b          	slliw	a3,a3,0x10
    8000ddc2:	8f55                	or	a4,a4,a3
    8000ddc4:	1ffe16b7          	lui	a3,0x1ffe1
    8000ddc8:	068e                	slli	a3,a3,0x3
    8000ddca:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ddcc:	8f75                	and	a4,a4,a3
    8000ddce:	0001a597          	auipc	a1,0x1a
    8000ddd2:	f5258593          	addi	a1,a1,-174 # 80027d20 <__func__.0+0x2c0>
    8000ddd6:	00e79463          	bne	a5,a4,8000ddde <tinst_tests_gpf+0x257e>
    8000ddda:	a1bfe06f          	j	8000c7f4 <tinst_tests_gpf+0xf94>
    8000ddde:	0001a597          	auipc	a1,0x1a
    8000dde2:	f5258593          	addi	a1,a1,-174 # 80027d30 <__func__.0+0x2d0>
    8000dde6:	a0ffe06f          	j	8000c7f4 <tinst_tests_gpf+0xf94>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lgpf",
    8000ddea:	701c                	ld	a5,32(s0)
    8000ddec:	e399                	bnez	a5,8000ddf2 <tinst_tests_gpf+0x2592>
    8000ddee:	f29fd06f          	j	8000bd16 <tinst_tests_gpf+0x4b6>
    8000ddf2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ddf4:	0016f713          	andi	a4,a3,1
    8000ddf8:	f335                	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ddfa:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ddfe:	460d                	li	a2,3
    8000de00:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000de04:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000de06:	00c59763          	bne	a1,a2,8000de14 <tinst_tests_gpf+0x25b4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000de0a:	0026d683          	lhu	a3,2(a3)
    8000de0e:	0106969b          	slliw	a3,a3,0x10
    8000de12:	8f55                	or	a4,a4,a3
    8000de14:	1746                	slli	a4,a4,0x31
    8000de16:	9345                	srli	a4,a4,0x31
    8000de18:	00e78463          	beq	a5,a4,8000de20 <tinst_tests_gpf+0x25c0>
    8000de1c:	ee7fd06f          	j	8000bd02 <tinst_tests_gpf+0x4a2>
    8000de20:	ef7fd06f          	j	8000bd16 <tinst_tests_gpf+0x4b6>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a sgpf",
    8000de24:	701c                	ld	a5,32(s0)
    8000de26:	0001a597          	auipc	a1,0x1a
    8000de2a:	efa58593          	addi	a1,a1,-262 # 80027d20 <__func__.0+0x2c0>
    8000de2e:	e399                	bnez	a5,8000de34 <tinst_tests_gpf+0x25d4>
    8000de30:	a7bfe06f          	j	8000c8aa <tinst_tests_gpf+0x104a>
    8000de34:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000de36:	0016f713          	andi	a4,a3,1
    8000de3a:	f30d                	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000de3c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000de40:	460d                	li	a2,3
    8000de42:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000de46:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000de48:	00c59763          	bne	a1,a2,8000de56 <tinst_tests_gpf+0x25f6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000de4c:	0026d683          	lhu	a3,2(a3)
    8000de50:	0106969b          	slliw	a3,a3,0x10
    8000de54:	8f55                	or	a4,a4,a3
    8000de56:	1ffe16b7          	lui	a3,0x1ffe1
    8000de5a:	068e                	slli	a3,a3,0x3
    8000de5c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000de5e:	8f75                	and	a4,a4,a3
    8000de60:	0001a597          	auipc	a1,0x1a
    8000de64:	ec058593          	addi	a1,a1,-320 # 80027d20 <__func__.0+0x2c0>
    8000de68:	00e79463          	bne	a5,a4,8000de70 <tinst_tests_gpf+0x2610>
    8000de6c:	a3ffe06f          	j	8000c8aa <tinst_tests_gpf+0x104a>
    8000de70:	0001a597          	auipc	a1,0x1a
    8000de74:	ec058593          	addi	a1,a1,-320 # 80027d30 <__func__.0+0x2d0>
    8000de78:	a33fe06f          	j	8000c8aa <tinst_tests_gpf+0x104a>
    TEST_ASSERT("correct tinst when executing a ld which results in a lgpf",
    8000de7c:	701c                	ld	a5,32(s0)
    8000de7e:	e399                	bnez	a5,8000de84 <tinst_tests_gpf+0x2624>
    8000de80:	f45fd06f          	j	8000bdc4 <tinst_tests_gpf+0x564>
    8000de84:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000de86:	0016f713          	andi	a4,a3,1
    8000de8a:	ec0719e3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000de8e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000de92:	460d                	li	a2,3
    8000de94:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000de98:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000de9a:	00c59763          	bne	a1,a2,8000dea8 <tinst_tests_gpf+0x2648>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000de9e:	0026d683          	lhu	a3,2(a3)
    8000dea2:	0106969b          	slliw	a3,a3,0x10
    8000dea6:	8f55                	or	a4,a4,a3
    8000dea8:	1746                	slli	a4,a4,0x31
    8000deaa:	9345                	srli	a4,a4,0x31
    8000deac:	00e78463          	beq	a5,a4,8000deb4 <tinst_tests_gpf+0x2654>
    8000deb0:	f01fd06f          	j	8000bdb0 <tinst_tests_gpf+0x550>
    8000deb4:	f11fd06f          	j	8000bdc4 <tinst_tests_gpf+0x564>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a sgpf",
    8000deb8:	701c                	ld	a5,32(s0)
    8000deba:	0001a597          	auipc	a1,0x1a
    8000debe:	e6658593          	addi	a1,a1,-410 # 80027d20 <__func__.0+0x2c0>
    8000dec2:	e399                	bnez	a5,8000dec8 <tinst_tests_gpf+0x2668>
    8000dec4:	a9dfe06f          	j	8000c960 <tinst_tests_gpf+0x1100>
    8000dec8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000deca:	0016f713          	andi	a4,a3,1
    8000dece:	e80717e3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ded2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ded6:	460d                	li	a2,3
    8000ded8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dedc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dede:	00c59763          	bne	a1,a2,8000deec <tinst_tests_gpf+0x268c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dee2:	0026d683          	lhu	a3,2(a3)
    8000dee6:	0106969b          	slliw	a3,a3,0x10
    8000deea:	8f55                	or	a4,a4,a3
    8000deec:	1ffe16b7          	lui	a3,0x1ffe1
    8000def0:	068e                	slli	a3,a3,0x3
    8000def2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000def4:	8f75                	and	a4,a4,a3
    8000def6:	0001a597          	auipc	a1,0x1a
    8000defa:	e2a58593          	addi	a1,a1,-470 # 80027d20 <__func__.0+0x2c0>
    8000defe:	00e79463          	bne	a5,a4,8000df06 <tinst_tests_gpf+0x26a6>
    8000df02:	a5ffe06f          	j	8000c960 <tinst_tests_gpf+0x1100>
    8000df06:	0001a597          	auipc	a1,0x1a
    8000df0a:	e2a58593          	addi	a1,a1,-470 # 80027d30 <__func__.0+0x2d0>
    8000df0e:	a53fe06f          	j	8000c960 <tinst_tests_gpf+0x1100>
    TEST_ASSERT("correct tinst when executing a sb which results in a sgpf",
    8000df12:	701c                	ld	a5,32(s0)
    8000df14:	e399                	bnez	a5,8000df1a <tinst_tests_gpf+0x26ba>
    8000df16:	f5ffd06f          	j	8000be74 <tinst_tests_gpf+0x614>
    8000df1a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000df1c:	0016f713          	andi	a4,a3,1
    8000df20:	e2071ee3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000df24:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000df28:	460d                	li	a2,3
    8000df2a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000df2e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000df30:	00c59763          	bne	a1,a2,8000df3e <tinst_tests_gpf+0x26de>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000df34:	0026d683          	lhu	a3,2(a3)
    8000df38:	0106969b          	slliw	a3,a3,0x10
    8000df3c:	8f55                	or	a4,a4,a3
    8000df3e:	01f076b7          	lui	a3,0x1f07
    8000df42:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000df46:	8f75                	and	a4,a4,a3
    8000df48:	00e78463          	beq	a5,a4,8000df50 <tinst_tests_gpf+0x26f0>
    8000df4c:	f15fd06f          	j	8000be60 <tinst_tests_gpf+0x600>
    8000df50:	f25fd06f          	j	8000be74 <tinst_tests_gpf+0x614>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a sgpf",
    8000df54:	701c                	ld	a5,32(s0)
    8000df56:	0001a597          	auipc	a1,0x1a
    8000df5a:	dca58593          	addi	a1,a1,-566 # 80027d20 <__func__.0+0x2c0>
    8000df5e:	e399                	bnez	a5,8000df64 <tinst_tests_gpf+0x2704>
    8000df60:	ab7fe06f          	j	8000ca16 <tinst_tests_gpf+0x11b6>
    8000df64:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000df66:	0016f713          	andi	a4,a3,1
    8000df6a:	de0719e3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000df6e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000df72:	460d                	li	a2,3
    8000df74:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000df78:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000df7a:	00c59763          	bne	a1,a2,8000df88 <tinst_tests_gpf+0x2728>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000df7e:	0026d683          	lhu	a3,2(a3)
    8000df82:	0106969b          	slliw	a3,a3,0x10
    8000df86:	8f55                	or	a4,a4,a3
    8000df88:	1ffe16b7          	lui	a3,0x1ffe1
    8000df8c:	068e                	slli	a3,a3,0x3
    8000df8e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000df90:	8f75                	and	a4,a4,a3
    8000df92:	0001a597          	auipc	a1,0x1a
    8000df96:	d8e58593          	addi	a1,a1,-626 # 80027d20 <__func__.0+0x2c0>
    8000df9a:	00e79463          	bne	a5,a4,8000dfa2 <tinst_tests_gpf+0x2742>
    8000df9e:	a79fe06f          	j	8000ca16 <tinst_tests_gpf+0x11b6>
    8000dfa2:	0001a597          	auipc	a1,0x1a
    8000dfa6:	d8e58593          	addi	a1,a1,-626 # 80027d30 <__func__.0+0x2d0>
    8000dfaa:	a6dfe06f          	j	8000ca16 <tinst_tests_gpf+0x11b6>
    TEST_ASSERT("correct tinst when executing a sh which results in a sgpf",
    8000dfae:	701c                	ld	a5,32(s0)
    8000dfb0:	e399                	bnez	a5,8000dfb6 <tinst_tests_gpf+0x2756>
    8000dfb2:	f77fd06f          	j	8000bf28 <tinst_tests_gpf+0x6c8>
    8000dfb6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dfb8:	0016f713          	andi	a4,a3,1
    8000dfbc:	da0710e3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000dfc0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dfc4:	460d                	li	a2,3
    8000dfc6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dfca:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dfcc:	00c59763          	bne	a1,a2,8000dfda <tinst_tests_gpf+0x277a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dfd0:	0026d683          	lhu	a3,2(a3)
    8000dfd4:	0106969b          	slliw	a3,a3,0x10
    8000dfd8:	8f55                	or	a4,a4,a3
    8000dfda:	01f076b7          	lui	a3,0x1f07
    8000dfde:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000dfe2:	8f75                	and	a4,a4,a3
    8000dfe4:	00e78463          	beq	a5,a4,8000dfec <tinst_tests_gpf+0x278c>
    8000dfe8:	f2dfd06f          	j	8000bf14 <tinst_tests_gpf+0x6b4>
    8000dfec:	f3dfd06f          	j	8000bf28 <tinst_tests_gpf+0x6c8>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000dff0:	701c                	ld	a5,32(s0)
    8000dff2:	0001a597          	auipc	a1,0x1a
    8000dff6:	d2e58593          	addi	a1,a1,-722 # 80027d20 <__func__.0+0x2c0>
    8000dffa:	e399                	bnez	a5,8000e000 <tinst_tests_gpf+0x27a0>
    8000dffc:	ad5fe06f          	j	8000cad0 <tinst_tests_gpf+0x1270>
    8000e000:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e002:	0016f713          	andi	a4,a3,1
    8000e006:	d4071be3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e00a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e00e:	460d                	li	a2,3
    8000e010:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e014:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e016:	00c59763          	bne	a1,a2,8000e024 <tinst_tests_gpf+0x27c4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e01a:	0026d683          	lhu	a3,2(a3)
    8000e01e:	0106969b          	slliw	a3,a3,0x10
    8000e022:	8f55                	or	a4,a4,a3
    8000e024:	1ffe16b7          	lui	a3,0x1ffe1
    8000e028:	068e                	slli	a3,a3,0x3
    8000e02a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e02c:	8f75                	and	a4,a4,a3
    8000e02e:	0001a597          	auipc	a1,0x1a
    8000e032:	cf258593          	addi	a1,a1,-782 # 80027d20 <__func__.0+0x2c0>
    8000e036:	00e79463          	bne	a5,a4,8000e03e <tinst_tests_gpf+0x27de>
    8000e03a:	a97fe06f          	j	8000cad0 <tinst_tests_gpf+0x1270>
    8000e03e:	0001a597          	auipc	a1,0x1a
    8000e042:	cf258593          	addi	a1,a1,-782 # 80027d30 <__func__.0+0x2d0>
    8000e046:	a8bfe06f          	j	8000cad0 <tinst_tests_gpf+0x1270>
    TEST_ASSERT("correct tinst when executing a sw which results in a sgpf",
    8000e04a:	701c                	ld	a5,32(s0)
    8000e04c:	e399                	bnez	a5,8000e052 <tinst_tests_gpf+0x27f2>
    8000e04e:	f91fd06f          	j	8000bfde <tinst_tests_gpf+0x77e>
    8000e052:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e054:	0016f713          	andi	a4,a3,1
    8000e058:	d00712e3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e05c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e060:	460d                	li	a2,3
    8000e062:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e066:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e068:	00c59763          	bne	a1,a2,8000e076 <tinst_tests_gpf+0x2816>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e06c:	0026d683          	lhu	a3,2(a3)
    8000e070:	0106969b          	slliw	a3,a3,0x10
    8000e074:	8f55                	or	a4,a4,a3
    8000e076:	01f076b7          	lui	a3,0x1f07
    8000e07a:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000e07e:	8f75                	and	a4,a4,a3
    8000e080:	00e78463          	beq	a5,a4,8000e088 <tinst_tests_gpf+0x2828>
    8000e084:	f47fd06f          	j	8000bfca <tinst_tests_gpf+0x76a>
    8000e088:	f57fd06f          	j	8000bfde <tinst_tests_gpf+0x77e>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a sgpf",
    8000e08c:	701c                	ld	a5,32(s0)
    8000e08e:	0001a597          	auipc	a1,0x1a
    8000e092:	c9258593          	addi	a1,a1,-878 # 80027d20 <__func__.0+0x2c0>
    8000e096:	e399                	bnez	a5,8000e09c <tinst_tests_gpf+0x283c>
    8000e098:	aeffe06f          	j	8000cb86 <tinst_tests_gpf+0x1326>
    8000e09c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e09e:	0016f713          	andi	a4,a3,1
    8000e0a2:	ca071de3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e0a6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e0aa:	460d                	li	a2,3
    8000e0ac:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e0b0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e0b2:	00c59763          	bne	a1,a2,8000e0c0 <tinst_tests_gpf+0x2860>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e0b6:	0026d683          	lhu	a3,2(a3)
    8000e0ba:	0106969b          	slliw	a3,a3,0x10
    8000e0be:	8f55                	or	a4,a4,a3
    8000e0c0:	1ffe16b7          	lui	a3,0x1ffe1
    8000e0c4:	068e                	slli	a3,a3,0x3
    8000e0c6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e0c8:	8f75                	and	a4,a4,a3
    8000e0ca:	0001a597          	auipc	a1,0x1a
    8000e0ce:	c5658593          	addi	a1,a1,-938 # 80027d20 <__func__.0+0x2c0>
    8000e0d2:	00e79463          	bne	a5,a4,8000e0da <tinst_tests_gpf+0x287a>
    8000e0d6:	ab1fe06f          	j	8000cb86 <tinst_tests_gpf+0x1326>
    8000e0da:	0001a597          	auipc	a1,0x1a
    8000e0de:	c5658593          	addi	a1,a1,-938 # 80027d30 <__func__.0+0x2d0>
    8000e0e2:	aa5fe06f          	j	8000cb86 <tinst_tests_gpf+0x1326>
    TEST_ASSERT("correct tinst when executing a sd which results in a sgpf",
    8000e0e6:	701c                	ld	a5,32(s0)
    8000e0e8:	e399                	bnez	a5,8000e0ee <tinst_tests_gpf+0x288e>
    8000e0ea:	fadfd06f          	j	8000c096 <tinst_tests_gpf+0x836>
    8000e0ee:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e0f0:	0016f713          	andi	a4,a3,1
    8000e0f4:	c60714e3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e0f8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e0fc:	460d                	li	a2,3
    8000e0fe:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e102:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e104:	00c59763          	bne	a1,a2,8000e112 <tinst_tests_gpf+0x28b2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e108:	0026d683          	lhu	a3,2(a3)
    8000e10c:	0106969b          	slliw	a3,a3,0x10
    8000e110:	8f55                	or	a4,a4,a3
    8000e112:	01f076b7          	lui	a3,0x1f07
    8000e116:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000e11a:	8f75                	and	a4,a4,a3
    8000e11c:	00e78463          	beq	a5,a4,8000e124 <tinst_tests_gpf+0x28c4>
    8000e120:	f63fd06f          	j	8000c082 <tinst_tests_gpf+0x822>
    8000e124:	f73fd06f          	j	8000c096 <tinst_tests_gpf+0x836>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a sgpf",
    8000e128:	701c                	ld	a5,32(s0)
    8000e12a:	0001a597          	auipc	a1,0x1a
    8000e12e:	bf658593          	addi	a1,a1,-1034 # 80027d20 <__func__.0+0x2c0>
    8000e132:	e399                	bnez	a5,8000e138 <tinst_tests_gpf+0x28d8>
    8000e134:	b09fe06f          	j	8000cc3c <tinst_tests_gpf+0x13dc>
    8000e138:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e13a:	0016f713          	andi	a4,a3,1
    8000e13e:	c0071fe3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e142:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e146:	460d                	li	a2,3
    8000e148:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e14c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e14e:	00c59763          	bne	a1,a2,8000e15c <tinst_tests_gpf+0x28fc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e152:	0026d683          	lhu	a3,2(a3)
    8000e156:	0106969b          	slliw	a3,a3,0x10
    8000e15a:	8f55                	or	a4,a4,a3
    8000e15c:	1ffe16b7          	lui	a3,0x1ffe1
    8000e160:	068e                	slli	a3,a3,0x3
    8000e162:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e164:	8f75                	and	a4,a4,a3
    8000e166:	0001a597          	auipc	a1,0x1a
    8000e16a:	bba58593          	addi	a1,a1,-1094 # 80027d20 <__func__.0+0x2c0>
    8000e16e:	00e79463          	bne	a5,a4,8000e176 <tinst_tests_gpf+0x2916>
    8000e172:	acbfe06f          	j	8000cc3c <tinst_tests_gpf+0x13dc>
    8000e176:	0001a597          	auipc	a1,0x1a
    8000e17a:	bba58593          	addi	a1,a1,-1094 # 80027d30 <__func__.0+0x2d0>
    8000e17e:	abffe06f          	j	8000cc3c <tinst_tests_gpf+0x13dc>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000e182:	7004                	ld	s1,32(s0)
    8000e184:	e099                	bnez	s1,8000e18a <tinst_tests_gpf+0x292a>
    8000e186:	fb9fd06f          	j	8000c13e <tinst_tests_gpf+0x8de>
    8000e18a:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e18c:	0017f713          	andi	a4,a5,1
    8000e190:	bc0716e3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e194:	0007d503          	lhu	a0,0(a5)
    8000e198:	a30f30ef          	jal	800013c8 <expand_compressed_instruction>
    8000e19c:	67a1                	lui	a5,0x8
    8000e19e:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000e1a0:	8d7d                	and	a0,a0,a5
    8000e1a2:	00a48463          	beq	s1,a0,8000e1aa <tinst_tests_gpf+0x294a>
    8000e1a6:	f85fd06f          	j	8000c12a <tinst_tests_gpf+0x8ca>
    8000e1aa:	f95fd06f          	j	8000c13e <tinst_tests_gpf+0x8de>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a sgpf",
    8000e1ae:	701c                	ld	a5,32(s0)
    8000e1b0:	0001a597          	auipc	a1,0x1a
    8000e1b4:	b7058593          	addi	a1,a1,-1168 # 80027d20 <__func__.0+0x2c0>
    8000e1b8:	e399                	bnez	a5,8000e1be <tinst_tests_gpf+0x295e>
    8000e1ba:	b39fe06f          	j	8000ccf2 <tinst_tests_gpf+0x1492>
    8000e1be:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e1c0:	0016f713          	andi	a4,a3,1
    8000e1c4:	b8071ce3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e1c8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e1cc:	460d                	li	a2,3
    8000e1ce:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e1d2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e1d4:	00c59763          	bne	a1,a2,8000e1e2 <tinst_tests_gpf+0x2982>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e1d8:	0026d683          	lhu	a3,2(a3)
    8000e1dc:	0106969b          	slliw	a3,a3,0x10
    8000e1e0:	8f55                	or	a4,a4,a3
    8000e1e2:	1ffe16b7          	lui	a3,0x1ffe1
    8000e1e6:	068e                	slli	a3,a3,0x3
    8000e1e8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e1ea:	8f75                	and	a4,a4,a3
    8000e1ec:	0001a597          	auipc	a1,0x1a
    8000e1f0:	b3458593          	addi	a1,a1,-1228 # 80027d20 <__func__.0+0x2c0>
    8000e1f4:	00e79463          	bne	a5,a4,8000e1fc <tinst_tests_gpf+0x299c>
    8000e1f8:	afbfe06f          	j	8000ccf2 <tinst_tests_gpf+0x1492>
    8000e1fc:	0001a597          	auipc	a1,0x1a
    8000e200:	b3458593          	addi	a1,a1,-1228 # 80027d30 <__func__.0+0x2d0>
    8000e204:	aeffe06f          	j	8000ccf2 <tinst_tests_gpf+0x1492>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000e208:	02043983          	ld	s3,32(s0)
    8000e20c:	00099463          	bnez	s3,8000e214 <tinst_tests_gpf+0x29b4>
    8000e210:	fd9fd06f          	j	8000c1e8 <tinst_tests_gpf+0x988>
    8000e214:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e216:	0017f713          	andi	a4,a5,1
    8000e21a:	b40711e3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e21e:	0007d503          	lhu	a0,0(a5)
    8000e222:	9a6f30ef          	jal	800013c8 <expand_compressed_instruction>
    8000e226:	67a1                	lui	a5,0x8
    8000e228:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000e22a:	8d7d                	and	a0,a0,a5
    8000e22c:	00a98463          	beq	s3,a0,8000e234 <tinst_tests_gpf+0x29d4>
    8000e230:	fa5fd06f          	j	8000c1d4 <tinst_tests_gpf+0x974>
    8000e234:	fb5fd06f          	j	8000c1e8 <tinst_tests_gpf+0x988>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a sgpf",
    8000e238:	701c                	ld	a5,32(s0)
    8000e23a:	0001a597          	auipc	a1,0x1a
    8000e23e:	ae658593          	addi	a1,a1,-1306 # 80027d20 <__func__.0+0x2c0>
    8000e242:	e399                	bnez	a5,8000e248 <tinst_tests_gpf+0x29e8>
    8000e244:	b65fe06f          	j	8000cda8 <tinst_tests_gpf+0x1548>
    8000e248:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e24a:	0016f713          	andi	a4,a3,1
    8000e24e:	b00717e3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e252:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e256:	460d                	li	a2,3
    8000e258:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e25c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e25e:	00c59763          	bne	a1,a2,8000e26c <tinst_tests_gpf+0x2a0c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e262:	0026d683          	lhu	a3,2(a3)
    8000e266:	0106969b          	slliw	a3,a3,0x10
    8000e26a:	8f55                	or	a4,a4,a3
    8000e26c:	1ffe16b7          	lui	a3,0x1ffe1
    8000e270:	068e                	slli	a3,a3,0x3
    8000e272:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e274:	8f75                	and	a4,a4,a3
    8000e276:	0001a597          	auipc	a1,0x1a
    8000e27a:	aaa58593          	addi	a1,a1,-1366 # 80027d20 <__func__.0+0x2c0>
    8000e27e:	00e79463          	bne	a5,a4,8000e286 <tinst_tests_gpf+0x2a26>
    8000e282:	b27fe06f          	j	8000cda8 <tinst_tests_gpf+0x1548>
    8000e286:	0001a597          	auipc	a1,0x1a
    8000e28a:	aaa58593          	addi	a1,a1,-1366 # 80027d30 <__func__.0+0x2d0>
    8000e28e:	b1bfe06f          	j	8000cda8 <tinst_tests_gpf+0x1548>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000e292:	02043983          	ld	s3,32(s0)
    8000e296:	00099463          	bnez	s3,8000e29e <tinst_tests_gpf+0x2a3e>
    8000e29a:	ff9fd06f          	j	8000c292 <tinst_tests_gpf+0xa32>
    8000e29e:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e2a0:	0017f713          	andi	a4,a5,1
    8000e2a4:	aa071ce3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e2a8:	0007d503          	lhu	a0,0(a5)
    8000e2ac:	91cf30ef          	jal	800013c8 <expand_compressed_instruction>
    8000e2b0:	01f077b7          	lui	a5,0x1f07
    8000e2b4:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000e2b8:	8d7d                	and	a0,a0,a5
    8000e2ba:	00a98463          	beq	s3,a0,8000e2c2 <tinst_tests_gpf+0x2a62>
    8000e2be:	fc1fd06f          	j	8000c27e <tinst_tests_gpf+0xa1e>
    8000e2c2:	fd1fd06f          	j	8000c292 <tinst_tests_gpf+0xa32>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a sgpf",
    8000e2c6:	701c                	ld	a5,32(s0)
    8000e2c8:	0001a597          	auipc	a1,0x1a
    8000e2cc:	a5858593          	addi	a1,a1,-1448 # 80027d20 <__func__.0+0x2c0>
    8000e2d0:	e399                	bnez	a5,8000e2d6 <tinst_tests_gpf+0x2a76>
    8000e2d2:	b8dfe06f          	j	8000ce5e <tinst_tests_gpf+0x15fe>
    8000e2d6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e2d8:	0016f713          	andi	a4,a3,1
    8000e2dc:	a80710e3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e2e0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e2e4:	460d                	li	a2,3
    8000e2e6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e2ea:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e2ec:	00c59763          	bne	a1,a2,8000e2fa <tinst_tests_gpf+0x2a9a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e2f0:	0026d683          	lhu	a3,2(a3)
    8000e2f4:	0106969b          	slliw	a3,a3,0x10
    8000e2f8:	8f55                	or	a4,a4,a3
    8000e2fa:	1ffe16b7          	lui	a3,0x1ffe1
    8000e2fe:	068e                	slli	a3,a3,0x3
    8000e300:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e302:	8f75                	and	a4,a4,a3
    8000e304:	0001a597          	auipc	a1,0x1a
    8000e308:	a1c58593          	addi	a1,a1,-1508 # 80027d20 <__func__.0+0x2c0>
    8000e30c:	00e79463          	bne	a5,a4,8000e314 <tinst_tests_gpf+0x2ab4>
    8000e310:	b4ffe06f          	j	8000ce5e <tinst_tests_gpf+0x15fe>
    8000e314:	0001a597          	auipc	a1,0x1a
    8000e318:	a1c58593          	addi	a1,a1,-1508 # 80027d30 <__func__.0+0x2d0>
    8000e31c:	b43fe06f          	j	8000ce5e <tinst_tests_gpf+0x15fe>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000e320:	7004                	ld	s1,32(s0)
    8000e322:	e099                	bnez	s1,8000e328 <tinst_tests_gpf+0x2ac8>
    8000e324:	818fe06f          	j	8000c33c <tinst_tests_gpf+0xadc>
    8000e328:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e32a:	0017f713          	andi	a4,a5,1
    8000e32e:	a20717e3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e332:	0007d503          	lhu	a0,0(a5)
    8000e336:	892f30ef          	jal	800013c8 <expand_compressed_instruction>
    8000e33a:	01f077b7          	lui	a5,0x1f07
    8000e33e:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000e342:	8d7d                	and	a0,a0,a5
    8000e344:	00a48463          	beq	s1,a0,8000e34c <tinst_tests_gpf+0x2aec>
    8000e348:	fe1fd06f          	j	8000c328 <tinst_tests_gpf+0xac8>
    8000e34c:	ff1fd06f          	j	8000c33c <tinst_tests_gpf+0xadc>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a sgpf",
    8000e350:	701c                	ld	a5,32(s0)
    8000e352:	0001a597          	auipc	a1,0x1a
    8000e356:	9ce58593          	addi	a1,a1,-1586 # 80027d20 <__func__.0+0x2c0>
    8000e35a:	e399                	bnez	a5,8000e360 <tinst_tests_gpf+0x2b00>
    8000e35c:	bb9fe06f          	j	8000cf14 <tinst_tests_gpf+0x16b4>
    8000e360:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e362:	0016f713          	andi	a4,a3,1
    8000e366:	9e071be3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e36a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e36e:	460d                	li	a2,3
    8000e370:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e374:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e376:	00c59763          	bne	a1,a2,8000e384 <tinst_tests_gpf+0x2b24>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e37a:	0026d683          	lhu	a3,2(a3)
    8000e37e:	0106969b          	slliw	a3,a3,0x10
    8000e382:	8f55                	or	a4,a4,a3
    8000e384:	1ffe16b7          	lui	a3,0x1ffe1
    8000e388:	068e                	slli	a3,a3,0x3
    8000e38a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e38c:	8f75                	and	a4,a4,a3
    8000e38e:	0001a597          	auipc	a1,0x1a
    8000e392:	99258593          	addi	a1,a1,-1646 # 80027d20 <__func__.0+0x2c0>
    8000e396:	00e79463          	bne	a5,a4,8000e39e <tinst_tests_gpf+0x2b3e>
    8000e39a:	b7bfe06f          	j	8000cf14 <tinst_tests_gpf+0x16b4>
    8000e39e:	0001a597          	auipc	a1,0x1a
    8000e3a2:	99258593          	addi	a1,a1,-1646 # 80027d30 <__func__.0+0x2d0>
    8000e3a6:	b6ffe06f          	j	8000cf14 <tinst_tests_gpf+0x16b4>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000e3aa:	701c                	ld	a5,32(s0)
    8000e3ac:	e399                	bnez	a5,8000e3b2 <tinst_tests_gpf+0x2b52>
    8000e3ae:	84afe06f          	j	8000c3f8 <tinst_tests_gpf+0xb98>
    8000e3b2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e3b4:	0016f713          	andi	a4,a3,1
    8000e3b8:	9a0712e3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e3bc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e3c0:	460d                	li	a2,3
    8000e3c2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e3c6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e3c8:	00c59763          	bne	a1,a2,8000e3d6 <tinst_tests_gpf+0x2b76>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e3cc:	0026d683          	lhu	a3,2(a3)
    8000e3d0:	0106969b          	slliw	a3,a3,0x10
    8000e3d4:	8f55                	or	a4,a4,a3
    8000e3d6:	1ffe16b7          	lui	a3,0x1ffe1
    8000e3da:	068e                	slli	a3,a3,0x3
    8000e3dc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e3de:	8f75                	and	a4,a4,a3
    8000e3e0:	00e78463          	beq	a5,a4,8000e3e8 <tinst_tests_gpf+0x2b88>
    8000e3e4:	800fe06f          	j	8000c3e4 <tinst_tests_gpf+0xb84>
    8000e3e8:	810fe06f          	j	8000c3f8 <tinst_tests_gpf+0xb98>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a sgpf",
    8000e3ec:	701c                	ld	a5,32(s0)
    8000e3ee:	0001a597          	auipc	a1,0x1a
    8000e3f2:	93258593          	addi	a1,a1,-1742 # 80027d20 <__func__.0+0x2c0>
    8000e3f6:	e399                	bnez	a5,8000e3fc <tinst_tests_gpf+0x2b9c>
    8000e3f8:	bcbfe06f          	j	8000cfc2 <tinst_tests_gpf+0x1762>
    8000e3fc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e3fe:	0016f713          	andi	a4,a3,1
    8000e402:	94071de3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e406:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e40a:	460d                	li	a2,3
    8000e40c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e410:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e412:	00c59763          	bne	a1,a2,8000e420 <tinst_tests_gpf+0x2bc0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e416:	0026d683          	lhu	a3,2(a3)
    8000e41a:	0106969b          	slliw	a3,a3,0x10
    8000e41e:	8f55                	or	a4,a4,a3
    8000e420:	1ffe16b7          	lui	a3,0x1ffe1
    8000e424:	068e                	slli	a3,a3,0x3
    8000e426:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e428:	8f75                	and	a4,a4,a3
    8000e42a:	0001a597          	auipc	a1,0x1a
    8000e42e:	8f658593          	addi	a1,a1,-1802 # 80027d20 <__func__.0+0x2c0>
    8000e432:	00e79463          	bne	a5,a4,8000e43a <tinst_tests_gpf+0x2bda>
    8000e436:	b8dfe06f          	j	8000cfc2 <tinst_tests_gpf+0x1762>
    8000e43a:	0001a597          	auipc	a1,0x1a
    8000e43e:	8f658593          	addi	a1,a1,-1802 # 80027d30 <__func__.0+0x2d0>
    8000e442:	b81fe06f          	j	8000cfc2 <tinst_tests_gpf+0x1762>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a sgpf",
    8000e446:	701c                	ld	a5,32(s0)
    8000e448:	0001a597          	auipc	a1,0x1a
    8000e44c:	8d858593          	addi	a1,a1,-1832 # 80027d20 <__func__.0+0x2c0>
    8000e450:	e399                	bnez	a5,8000e456 <tinst_tests_gpf+0x2bf6>
    8000e452:	c1ffe06f          	j	8000d070 <tinst_tests_gpf+0x1810>
    8000e456:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e458:	0016f713          	andi	a4,a3,1
    8000e45c:	900710e3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e460:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e464:	460d                	li	a2,3
    8000e466:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e46a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e46c:	00c59763          	bne	a1,a2,8000e47a <tinst_tests_gpf+0x2c1a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e470:	0026d683          	lhu	a3,2(a3)
    8000e474:	0106969b          	slliw	a3,a3,0x10
    8000e478:	8f55                	or	a4,a4,a3
    8000e47a:	1ffe16b7          	lui	a3,0x1ffe1
    8000e47e:	068e                	slli	a3,a3,0x3
    8000e480:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e482:	8f75                	and	a4,a4,a3
    8000e484:	0001a597          	auipc	a1,0x1a
    8000e488:	89c58593          	addi	a1,a1,-1892 # 80027d20 <__func__.0+0x2c0>
    8000e48c:	00e79463          	bne	a5,a4,8000e494 <tinst_tests_gpf+0x2c34>
    8000e490:	be1fe06f          	j	8000d070 <tinst_tests_gpf+0x1810>
    8000e494:	0001a597          	auipc	a1,0x1a
    8000e498:	89c58593          	addi	a1,a1,-1892 # 80027d30 <__func__.0+0x2d0>
    8000e49c:	bd5fe06f          	j	8000d070 <tinst_tests_gpf+0x1810>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000e4a0:	701c                	ld	a5,32(s0)
    8000e4a2:	0001a597          	auipc	a1,0x1a
    8000e4a6:	87e58593          	addi	a1,a1,-1922 # 80027d20 <__func__.0+0x2c0>
    8000e4aa:	e399                	bnez	a5,8000e4b0 <tinst_tests_gpf+0x2c50>
    8000e4ac:	c73fe06f          	j	8000d11e <tinst_tests_gpf+0x18be>
    8000e4b0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e4b2:	0016f713          	andi	a4,a3,1
    8000e4b6:	8a0713e3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e4ba:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e4be:	460d                	li	a2,3
    8000e4c0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e4c4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e4c6:	00c59763          	bne	a1,a2,8000e4d4 <tinst_tests_gpf+0x2c74>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e4ca:	0026d683          	lhu	a3,2(a3)
    8000e4ce:	0106969b          	slliw	a3,a3,0x10
    8000e4d2:	8f55                	or	a4,a4,a3
    8000e4d4:	1ffe16b7          	lui	a3,0x1ffe1
    8000e4d8:	068e                	slli	a3,a3,0x3
    8000e4da:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e4dc:	8f75                	and	a4,a4,a3
    8000e4de:	0001a597          	auipc	a1,0x1a
    8000e4e2:	84258593          	addi	a1,a1,-1982 # 80027d20 <__func__.0+0x2c0>
    8000e4e6:	00e79463          	bne	a5,a4,8000e4ee <tinst_tests_gpf+0x2c8e>
    8000e4ea:	c35fe06f          	j	8000d11e <tinst_tests_gpf+0x18be>
    8000e4ee:	0001a597          	auipc	a1,0x1a
    8000e4f2:	84258593          	addi	a1,a1,-1982 # 80027d30 <__func__.0+0x2d0>
    8000e4f6:	c29fe06f          	j	8000d11e <tinst_tests_gpf+0x18be>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a sgpf",
    8000e4fa:	701c                	ld	a5,32(s0)
    8000e4fc:	e399                	bnez	a5,8000e502 <tinst_tests_gpf+0x2ca2>
    8000e4fe:	a76fe06f          	j	8000c774 <tinst_tests_gpf+0xf14>
    8000e502:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e504:	0016f713          	andi	a4,a3,1
    8000e508:	84071ae3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e50c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e510:	460d                	li	a2,3
    8000e512:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e516:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e518:	00c59763          	bne	a1,a2,8000e526 <tinst_tests_gpf+0x2cc6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e51c:	0026d683          	lhu	a3,2(a3)
    8000e520:	0106969b          	slliw	a3,a3,0x10
    8000e524:	8f55                	or	a4,a4,a3
    8000e526:	1ffe16b7          	lui	a3,0x1ffe1
    8000e52a:	068e                	slli	a3,a3,0x3
    8000e52c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e52e:	8f75                	and	a4,a4,a3
    8000e530:	00e78463          	beq	a5,a4,8000e538 <tinst_tests_gpf+0x2cd8>
    8000e534:	a2cfe06f          	j	8000c760 <tinst_tests_gpf+0xf00>
    8000e538:	a3cfe06f          	j	8000c774 <tinst_tests_gpf+0xf14>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a sgpf",
    8000e53c:	701c                	ld	a5,32(s0)
    8000e53e:	e399                	bnez	a5,8000e544 <tinst_tests_gpf+0x2ce4>
    8000e540:	aeafe06f          	j	8000c82a <tinst_tests_gpf+0xfca>
    8000e544:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e546:	0016f713          	andi	a4,a3,1
    8000e54a:	800719e3          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e54e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e552:	460d                	li	a2,3
    8000e554:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e558:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e55a:	00c59763          	bne	a1,a2,8000e568 <tinst_tests_gpf+0x2d08>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e55e:	0026d683          	lhu	a3,2(a3)
    8000e562:	0106969b          	slliw	a3,a3,0x10
    8000e566:	8f55                	or	a4,a4,a3
    8000e568:	1ffe16b7          	lui	a3,0x1ffe1
    8000e56c:	068e                	slli	a3,a3,0x3
    8000e56e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e570:	8f75                	and	a4,a4,a3
    8000e572:	00e78463          	beq	a5,a4,8000e57a <tinst_tests_gpf+0x2d1a>
    8000e576:	aa0fe06f          	j	8000c816 <tinst_tests_gpf+0xfb6>
    8000e57a:	ab0fe06f          	j	8000c82a <tinst_tests_gpf+0xfca>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a sgpf",
    8000e57e:	701c                	ld	a5,32(s0)
    8000e580:	e399                	bnez	a5,8000e586 <tinst_tests_gpf+0x2d26>
    8000e582:	b5efe06f          	j	8000c8e0 <tinst_tests_gpf+0x1080>
    8000e586:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e588:	0016f713          	andi	a4,a3,1
    8000e58c:	fc071863          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e590:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e594:	460d                	li	a2,3
    8000e596:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e59a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e59c:	00c59763          	bne	a1,a2,8000e5aa <tinst_tests_gpf+0x2d4a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e5a0:	0026d683          	lhu	a3,2(a3)
    8000e5a4:	0106969b          	slliw	a3,a3,0x10
    8000e5a8:	8f55                	or	a4,a4,a3
    8000e5aa:	1ffe16b7          	lui	a3,0x1ffe1
    8000e5ae:	068e                	slli	a3,a3,0x3
    8000e5b0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e5b2:	8f75                	and	a4,a4,a3
    8000e5b4:	00e78463          	beq	a5,a4,8000e5bc <tinst_tests_gpf+0x2d5c>
    8000e5b8:	b14fe06f          	j	8000c8cc <tinst_tests_gpf+0x106c>
    8000e5bc:	b24fe06f          	j	8000c8e0 <tinst_tests_gpf+0x1080>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a sgpf",
    8000e5c0:	701c                	ld	a5,32(s0)
    8000e5c2:	e399                	bnez	a5,8000e5c8 <tinst_tests_gpf+0x2d68>
    8000e5c4:	bd2fe06f          	j	8000c996 <tinst_tests_gpf+0x1136>
    8000e5c8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e5ca:	0016f713          	andi	a4,a3,1
    8000e5ce:	f8071763          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e5d2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e5d6:	460d                	li	a2,3
    8000e5d8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e5dc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e5de:	00c59763          	bne	a1,a2,8000e5ec <tinst_tests_gpf+0x2d8c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e5e2:	0026d683          	lhu	a3,2(a3)
    8000e5e6:	0106969b          	slliw	a3,a3,0x10
    8000e5ea:	8f55                	or	a4,a4,a3
    8000e5ec:	1ffe16b7          	lui	a3,0x1ffe1
    8000e5f0:	068e                	slli	a3,a3,0x3
    8000e5f2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e5f4:	8f75                	and	a4,a4,a3
    8000e5f6:	00e78463          	beq	a5,a4,8000e5fe <tinst_tests_gpf+0x2d9e>
    8000e5fa:	b88fe06f          	j	8000c982 <tinst_tests_gpf+0x1122>
    8000e5fe:	b98fe06f          	j	8000c996 <tinst_tests_gpf+0x1136>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a sgpf",
    8000e602:	701c                	ld	a5,32(s0)
    8000e604:	e399                	bnez	a5,8000e60a <tinst_tests_gpf+0x2daa>
    8000e606:	c46fe06f          	j	8000ca4c <tinst_tests_gpf+0x11ec>
    8000e60a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e60c:	0016f713          	andi	a4,a3,1
    8000e610:	f4071663          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e614:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e618:	460d                	li	a2,3
    8000e61a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e61e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e620:	00c59763          	bne	a1,a2,8000e62e <tinst_tests_gpf+0x2dce>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e624:	0026d683          	lhu	a3,2(a3)
    8000e628:	0106969b          	slliw	a3,a3,0x10
    8000e62c:	8f55                	or	a4,a4,a3
    8000e62e:	1ffe16b7          	lui	a3,0x1ffe1
    8000e632:	068e                	slli	a3,a3,0x3
    8000e634:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e636:	8f75                	and	a4,a4,a3
    8000e638:	00e78463          	beq	a5,a4,8000e640 <tinst_tests_gpf+0x2de0>
    8000e63c:	bfcfe06f          	j	8000ca38 <tinst_tests_gpf+0x11d8>
    8000e640:	c0cfe06f          	j	8000ca4c <tinst_tests_gpf+0x11ec>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000e644:	701c                	ld	a5,32(s0)
    8000e646:	e399                	bnez	a5,8000e64c <tinst_tests_gpf+0x2dec>
    8000e648:	cbefe06f          	j	8000cb06 <tinst_tests_gpf+0x12a6>
    8000e64c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e64e:	0016f713          	andi	a4,a3,1
    8000e652:	f0071563          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e656:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e65a:	460d                	li	a2,3
    8000e65c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e660:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e662:	00c59763          	bne	a1,a2,8000e670 <tinst_tests_gpf+0x2e10>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e666:	0026d683          	lhu	a3,2(a3)
    8000e66a:	0106969b          	slliw	a3,a3,0x10
    8000e66e:	8f55                	or	a4,a4,a3
    8000e670:	1ffe16b7          	lui	a3,0x1ffe1
    8000e674:	068e                	slli	a3,a3,0x3
    8000e676:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e678:	8f75                	and	a4,a4,a3
    8000e67a:	00e78463          	beq	a5,a4,8000e682 <tinst_tests_gpf+0x2e22>
    8000e67e:	c74fe06f          	j	8000caf2 <tinst_tests_gpf+0x1292>
    8000e682:	c84fe06f          	j	8000cb06 <tinst_tests_gpf+0x12a6>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a sgpf",
    8000e686:	701c                	ld	a5,32(s0)
    8000e688:	e399                	bnez	a5,8000e68e <tinst_tests_gpf+0x2e2e>
    8000e68a:	d32fe06f          	j	8000cbbc <tinst_tests_gpf+0x135c>
    8000e68e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e690:	0016f713          	andi	a4,a3,1
    8000e694:	ec071463          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e698:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e69c:	460d                	li	a2,3
    8000e69e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e6a2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e6a4:	00c59763          	bne	a1,a2,8000e6b2 <tinst_tests_gpf+0x2e52>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e6a8:	0026d683          	lhu	a3,2(a3)
    8000e6ac:	0106969b          	slliw	a3,a3,0x10
    8000e6b0:	8f55                	or	a4,a4,a3
    8000e6b2:	1ffe16b7          	lui	a3,0x1ffe1
    8000e6b6:	068e                	slli	a3,a3,0x3
    8000e6b8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e6ba:	8f75                	and	a4,a4,a3
    8000e6bc:	00e78463          	beq	a5,a4,8000e6c4 <tinst_tests_gpf+0x2e64>
    8000e6c0:	ce8fe06f          	j	8000cba8 <tinst_tests_gpf+0x1348>
    8000e6c4:	cf8fe06f          	j	8000cbbc <tinst_tests_gpf+0x135c>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a sgpf",
    8000e6c8:	701c                	ld	a5,32(s0)
    8000e6ca:	e399                	bnez	a5,8000e6d0 <tinst_tests_gpf+0x2e70>
    8000e6cc:	da6fe06f          	j	8000cc72 <tinst_tests_gpf+0x1412>
    8000e6d0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e6d2:	0016f713          	andi	a4,a3,1
    8000e6d6:	e8071363          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e6da:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e6de:	460d                	li	a2,3
    8000e6e0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e6e4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e6e6:	00c59763          	bne	a1,a2,8000e6f4 <tinst_tests_gpf+0x2e94>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e6ea:	0026d683          	lhu	a3,2(a3)
    8000e6ee:	0106969b          	slliw	a3,a3,0x10
    8000e6f2:	8f55                	or	a4,a4,a3
    8000e6f4:	1ffe16b7          	lui	a3,0x1ffe1
    8000e6f8:	068e                	slli	a3,a3,0x3
    8000e6fa:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e6fc:	8f75                	and	a4,a4,a3
    8000e6fe:	00e78463          	beq	a5,a4,8000e706 <tinst_tests_gpf+0x2ea6>
    8000e702:	d5cfe06f          	j	8000cc5e <tinst_tests_gpf+0x13fe>
    8000e706:	d6cfe06f          	j	8000cc72 <tinst_tests_gpf+0x1412>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a sgpf",
    8000e70a:	701c                	ld	a5,32(s0)
    8000e70c:	e399                	bnez	a5,8000e712 <tinst_tests_gpf+0x2eb2>
    8000e70e:	e1afe06f          	j	8000cd28 <tinst_tests_gpf+0x14c8>
    8000e712:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e714:	0016f713          	andi	a4,a3,1
    8000e718:	e4071263          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e71c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e720:	460d                	li	a2,3
    8000e722:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e726:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e728:	00c59763          	bne	a1,a2,8000e736 <tinst_tests_gpf+0x2ed6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e72c:	0026d683          	lhu	a3,2(a3)
    8000e730:	0106969b          	slliw	a3,a3,0x10
    8000e734:	8f55                	or	a4,a4,a3
    8000e736:	1ffe16b7          	lui	a3,0x1ffe1
    8000e73a:	068e                	slli	a3,a3,0x3
    8000e73c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e73e:	8f75                	and	a4,a4,a3
    8000e740:	00e78463          	beq	a5,a4,8000e748 <tinst_tests_gpf+0x2ee8>
    8000e744:	dd0fe06f          	j	8000cd14 <tinst_tests_gpf+0x14b4>
    8000e748:	de0fe06f          	j	8000cd28 <tinst_tests_gpf+0x14c8>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a sgpf",
    8000e74c:	701c                	ld	a5,32(s0)
    8000e74e:	e399                	bnez	a5,8000e754 <tinst_tests_gpf+0x2ef4>
    8000e750:	e8efe06f          	j	8000cdde <tinst_tests_gpf+0x157e>
    8000e754:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e756:	0016f713          	andi	a4,a3,1
    8000e75a:	e0071163          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e75e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e762:	460d                	li	a2,3
    8000e764:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e768:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e76a:	00c59763          	bne	a1,a2,8000e778 <tinst_tests_gpf+0x2f18>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e76e:	0026d683          	lhu	a3,2(a3)
    8000e772:	0106969b          	slliw	a3,a3,0x10
    8000e776:	8f55                	or	a4,a4,a3
    8000e778:	1ffe16b7          	lui	a3,0x1ffe1
    8000e77c:	068e                	slli	a3,a3,0x3
    8000e77e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e780:	8f75                	and	a4,a4,a3
    8000e782:	00e78463          	beq	a5,a4,8000e78a <tinst_tests_gpf+0x2f2a>
    8000e786:	e44fe06f          	j	8000cdca <tinst_tests_gpf+0x156a>
    8000e78a:	e54fe06f          	j	8000cdde <tinst_tests_gpf+0x157e>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a sgpf",
    8000e78e:	6418                	ld	a4,8(s0)
    8000e790:	47dd                	li	a5,23
    8000e792:	00f70463          	beq	a4,a5,8000e79a <tinst_tests_gpf+0x2f3a>
    8000e796:	fccfe06f          	j	8000cf62 <tinst_tests_gpf+0x1702>
    8000e79a:	701c                	ld	a5,32(s0)
    8000e79c:	e399                	bnez	a5,8000e7a2 <tinst_tests_gpf+0x2f42>
    8000e79e:	fc6fe06f          	j	8000cf64 <tinst_tests_gpf+0x1704>
    8000e7a2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e7a4:	0016f713          	andi	a4,a3,1
    8000e7a8:	da071a63          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e7ac:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e7b0:	460d                	li	a2,3
    8000e7b2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e7b6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e7b8:	00c59763          	bne	a1,a2,8000e7c6 <tinst_tests_gpf+0x2f66>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e7bc:	0026d683          	lhu	a3,2(a3)
    8000e7c0:	0106969b          	slliw	a3,a3,0x10
    8000e7c4:	8f55                	or	a4,a4,a3
    8000e7c6:	1ffe16b7          	lui	a3,0x1ffe1
    8000e7ca:	068e                	slli	a3,a3,0x3
    8000e7cc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e7ce:	8f75                	and	a4,a4,a3
    8000e7d0:	40f70933          	sub	s2,a4,a5
    8000e7d4:	00193913          	seqz	s2,s2
    8000e7d8:	f8cfe06f          	j	8000cf64 <tinst_tests_gpf+0x1704>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a sgpf",
    8000e7dc:	6418                	ld	a4,8(s0)
    8000e7de:	47dd                	li	a5,23
    8000e7e0:	00f70463          	beq	a4,a5,8000e7e8 <tinst_tests_gpf+0x2f88>
    8000e7e4:	82dfe06f          	j	8000d010 <tinst_tests_gpf+0x17b0>
    8000e7e8:	701c                	ld	a5,32(s0)
    8000e7ea:	e399                	bnez	a5,8000e7f0 <tinst_tests_gpf+0x2f90>
    8000e7ec:	827fe06f          	j	8000d012 <tinst_tests_gpf+0x17b2>
    8000e7f0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e7f2:	0016f713          	andi	a4,a3,1
    8000e7f6:	d6071363          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e7fa:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e7fe:	460d                	li	a2,3
    8000e800:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e804:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e806:	00c59763          	bne	a1,a2,8000e814 <tinst_tests_gpf+0x2fb4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e80a:	0026d683          	lhu	a3,2(a3)
    8000e80e:	0106969b          	slliw	a3,a3,0x10
    8000e812:	8f55                	or	a4,a4,a3
    8000e814:	1ffe16b7          	lui	a3,0x1ffe1
    8000e818:	068e                	slli	a3,a3,0x3
    8000e81a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e81c:	8f75                	and	a4,a4,a3
    8000e81e:	40f70933          	sub	s2,a4,a5
    8000e822:	00193913          	seqz	s2,s2
    8000e826:	fecfe06f          	j	8000d012 <tinst_tests_gpf+0x17b2>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a sgpf",
    8000e82a:	6418                	ld	a4,8(s0)
    8000e82c:	47dd                	li	a5,23
    8000e82e:	00f70463          	beq	a4,a5,8000e836 <tinst_tests_gpf+0x2fd6>
    8000e832:	88dfe06f          	j	8000d0be <tinst_tests_gpf+0x185e>
    8000e836:	701c                	ld	a5,32(s0)
    8000e838:	e399                	bnez	a5,8000e83e <tinst_tests_gpf+0x2fde>
    8000e83a:	887fe06f          	j	8000d0c0 <tinst_tests_gpf+0x1860>
    8000e83e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e840:	0016f713          	andi	a4,a3,1
    8000e844:	d0071c63          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e848:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e84c:	460d                	li	a2,3
    8000e84e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e852:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e854:	00c59763          	bne	a1,a2,8000e862 <tinst_tests_gpf+0x3002>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e858:	0026d683          	lhu	a3,2(a3)
    8000e85c:	0106969b          	slliw	a3,a3,0x10
    8000e860:	8f55                	or	a4,a4,a3
    8000e862:	1ffe16b7          	lui	a3,0x1ffe1
    8000e866:	068e                	slli	a3,a3,0x3
    8000e868:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e86a:	8f75                	and	a4,a4,a3
    8000e86c:	40f70933          	sub	s2,a4,a5
    8000e870:	00193913          	seqz	s2,s2
    8000e874:	84dfe06f          	j	8000d0c0 <tinst_tests_gpf+0x1860>
    instruction = *((uint16_t*)addr);
    8000e878:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e87c:	460d                	li	a2,3
    8000e87e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e882:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e884:	00c59763          	bne	a1,a2,8000e892 <tinst_tests_gpf+0x3032>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e888:	0026d683          	lhu	a3,2(a3)
    8000e88c:	0106969b          	slliw	a3,a3,0x10
    8000e890:	8f55                	or	a4,a4,a3
    TEST_ASSERT("correct tinst when executing a lw which results in a lgpf",
    8000e892:	1746                	slli	a4,a4,0x31
    8000e894:	9345                	srli	a4,a4,0x31
    8000e896:	00e78463          	beq	a5,a4,8000e89e <tinst_tests_gpf+0x303e>
    8000e89a:	bb2fd06f          	j	8000bc4c <tinst_tests_gpf+0x3ec>
    8000e89e:	bc2fd06f          	j	8000bc60 <tinst_tests_gpf+0x400>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000e8a2:	7004                	ld	s1,32(s0)
    8000e8a4:	e099                	bnez	s1,8000e8aa <tinst_tests_gpf+0x304a>
    8000e8a6:	ab9fd06f          	j	8000c35e <tinst_tests_gpf+0xafe>
    8000e8aa:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e8ac:	0017f713          	andi	a4,a5,1
    8000e8b0:	ca071663          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e8b4:	0007d503          	lhu	a0,0(a5)
    8000e8b8:	b11f20ef          	jal	800013c8 <expand_compressed_instruction>
    8000e8bc:	01f077b7          	lui	a5,0x1f07
    8000e8c0:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000e8c4:	00f57933          	and	s2,a0,a5
    8000e8c8:	40990933          	sub	s2,s2,s1
    8000e8cc:	00193913          	seqz	s2,s2
    8000e8d0:	a8ffd06f          	j	8000c35e <tinst_tests_gpf+0xafe>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000e8d4:	701c                	ld	a5,32(s0)
    8000e8d6:	e399                	bnez	a5,8000e8dc <tinst_tests_gpf+0x307c>
    8000e8d8:	b43fd06f          	j	8000c41a <tinst_tests_gpf+0xbba>
    8000e8dc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e8de:	0016f713          	andi	a4,a3,1
    8000e8e2:	c6071d63          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e8e6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e8ea:	460d                	li	a2,3
    8000e8ec:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e8f0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e8f2:	00c59763          	bne	a1,a2,8000e900 <tinst_tests_gpf+0x30a0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e8f6:	0026d683          	lhu	a3,2(a3)
    8000e8fa:	0106969b          	slliw	a3,a3,0x10
    8000e8fe:	8f55                	or	a4,a4,a3
    8000e900:	1ffe16b7          	lui	a3,0x1ffe1
    8000e904:	068e                	slli	a3,a3,0x3
    8000e906:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e908:	8f75                	and	a4,a4,a3
    8000e90a:	40f70933          	sub	s2,a4,a5
    8000e90e:	00193913          	seqz	s2,s2
    8000e912:	b09fd06f          	j	8000c41a <tinst_tests_gpf+0xbba>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a sgpf",
    8000e916:	701c                	ld	a5,32(s0)
    8000e918:	e399                	bnez	a5,8000e91e <tinst_tests_gpf+0x30be>
    8000e91a:	bbdfd06f          	j	8000c4d6 <tinst_tests_gpf+0xc76>
    8000e91e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e920:	0016f713          	andi	a4,a3,1
    8000e924:	c2071c63          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e928:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e92c:	460d                	li	a2,3
    8000e92e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e932:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e934:	00c59763          	bne	a1,a2,8000e942 <tinst_tests_gpf+0x30e2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e938:	0026d683          	lhu	a3,2(a3)
    8000e93c:	0106969b          	slliw	a3,a3,0x10
    8000e940:	8f55                	or	a4,a4,a3
    8000e942:	1ffe16b7          	lui	a3,0x1ffe1
    8000e946:	068e                	slli	a3,a3,0x3
    8000e948:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e94a:	8f75                	and	a4,a4,a3
    8000e94c:	40f70933          	sub	s2,a4,a5
    8000e950:	00193913          	seqz	s2,s2
    8000e954:	b83fd06f          	j	8000c4d6 <tinst_tests_gpf+0xc76>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a sgpf",
    8000e958:	701c                	ld	a5,32(s0)
    8000e95a:	e399                	bnez	a5,8000e960 <tinst_tests_gpf+0x3100>
    8000e95c:	c31fd06f          	j	8000c58c <tinst_tests_gpf+0xd2c>
    8000e960:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e962:	0016f713          	andi	a4,a3,1
    8000e966:	be071b63          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e96a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e96e:	460d                	li	a2,3
    8000e970:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e974:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e976:	00c59763          	bne	a1,a2,8000e984 <tinst_tests_gpf+0x3124>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e97a:	0026d683          	lhu	a3,2(a3)
    8000e97e:	0106969b          	slliw	a3,a3,0x10
    8000e982:	8f55                	or	a4,a4,a3
    8000e984:	1ffe16b7          	lui	a3,0x1ffe1
    8000e988:	068e                	slli	a3,a3,0x3
    8000e98a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e98c:	8f75                	and	a4,a4,a3
    8000e98e:	40f70933          	sub	s2,a4,a5
    8000e992:	00193913          	seqz	s2,s2
    8000e996:	bf7fd06f          	j	8000c58c <tinst_tests_gpf+0xd2c>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000e99a:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e99c:	0017f713          	andi	a4,a5,1
    8000e9a0:	ba071e63          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e9a4:	0007d503          	lhu	a0,0(a5)
    8000e9a8:	a21f20ef          	jal	800013c8 <expand_compressed_instruction>
    8000e9ac:	67a1                	lui	a5,0x8
    8000e9ae:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000e9b0:	8d7d                	and	a0,a0,a5
    8000e9b2:	00a48463          	beq	s1,a0,8000e9ba <tinst_tests_gpf+0x315a>
    8000e9b6:	f4afd06f          	j	8000c100 <tinst_tests_gpf+0x8a0>
    8000e9ba:	00019597          	auipc	a1,0x19
    8000e9be:	36658593          	addi	a1,a1,870 # 80027d20 <__func__.0+0x2c0>
    8000e9c2:	f46fd06f          	j	8000c108 <tinst_tests_gpf+0x8a8>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a sgpf",
    8000e9c6:	701c                	ld	a5,32(s0)
    8000e9c8:	e399                	bnez	a5,8000e9ce <tinst_tests_gpf+0x316e>
    8000e9ca:	c79fd06f          	j	8000c642 <tinst_tests_gpf+0xde2>
    8000e9ce:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e9d0:	0016f713          	andi	a4,a3,1
    8000e9d4:	b8071463          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e9d8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e9dc:	460d                	li	a2,3
    8000e9de:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e9e2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e9e4:	00c59763          	bne	a1,a2,8000e9f2 <tinst_tests_gpf+0x3192>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e9e8:	0026d683          	lhu	a3,2(a3)
    8000e9ec:	0106969b          	slliw	a3,a3,0x10
    8000e9f0:	8f55                	or	a4,a4,a3
    8000e9f2:	1ffe16b7          	lui	a3,0x1ffe1
    8000e9f6:	068e                	slli	a3,a3,0x3
    8000e9f8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e9fa:	8f75                	and	a4,a4,a3
    8000e9fc:	40f70933          	sub	s2,a4,a5
    8000ea00:	00193913          	seqz	s2,s2
    8000ea04:	c3ffd06f          	j	8000c642 <tinst_tests_gpf+0xde2>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000ea08:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000ea0a:	0017f713          	andi	a4,a5,1
    8000ea0e:	b4071763          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ea12:	0007d503          	lhu	a0,0(a5)
    8000ea16:	9b3f20ef          	jal	800013c8 <expand_compressed_instruction>
    8000ea1a:	67a1                	lui	a5,0x8
    8000ea1c:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000ea1e:	8d7d                	and	a0,a0,a5
    8000ea20:	00a98463          	beq	s3,a0,8000ea28 <tinst_tests_gpf+0x31c8>
    8000ea24:	f86fd06f          	j	8000c1aa <tinst_tests_gpf+0x94a>
    8000ea28:	00019597          	auipc	a1,0x19
    8000ea2c:	2f858593          	addi	a1,a1,760 # 80027d20 <__func__.0+0x2c0>
    8000ea30:	f82fd06f          	j	8000c1b2 <tinst_tests_gpf+0x952>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a sgpf",
    8000ea34:	701c                	ld	a5,32(s0)
    8000ea36:	e399                	bnez	a5,8000ea3c <tinst_tests_gpf+0x31dc>
    8000ea38:	cb5fd06f          	j	8000c6ec <tinst_tests_gpf+0xe8c>
    8000ea3c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ea3e:	0016f713          	andi	a4,a3,1
    8000ea42:	b0071d63          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ea46:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ea4a:	460d                	li	a2,3
    8000ea4c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ea50:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ea52:	00c59763          	bne	a1,a2,8000ea60 <tinst_tests_gpf+0x3200>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ea56:	0026d683          	lhu	a3,2(a3)
    8000ea5a:	0106969b          	slliw	a3,a3,0x10
    8000ea5e:	8f55                	or	a4,a4,a3
    8000ea60:	1ffe16b7          	lui	a3,0x1ffe1
    8000ea64:	068e                	slli	a3,a3,0x3
    8000ea66:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ea68:	8f75                	and	a4,a4,a3
    8000ea6a:	40f70933          	sub	s2,a4,a5
    8000ea6e:	00193913          	seqz	s2,s2
    8000ea72:	c7bfd06f          	j	8000c6ec <tinst_tests_gpf+0xe8c>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a sgpf",
    8000ea76:	701c                	ld	a5,32(s0)
    8000ea78:	e399                	bnez	a5,8000ea7e <tinst_tests_gpf+0x321e>
    8000ea7a:	d1dfd06f          	j	8000c796 <tinst_tests_gpf+0xf36>
    8000ea7e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ea80:	0016f713          	andi	a4,a3,1
    8000ea84:	ac071c63          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ea88:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ea8c:	460d                	li	a2,3
    8000ea8e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ea92:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ea94:	00c59763          	bne	a1,a2,8000eaa2 <tinst_tests_gpf+0x3242>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ea98:	0026d683          	lhu	a3,2(a3)
    8000ea9c:	0106969b          	slliw	a3,a3,0x10
    8000eaa0:	8f55                	or	a4,a4,a3
    8000eaa2:	1ffe16b7          	lui	a3,0x1ffe1
    8000eaa6:	068e                	slli	a3,a3,0x3
    8000eaa8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000eaaa:	8f75                	and	a4,a4,a3
    8000eaac:	40f70933          	sub	s2,a4,a5
    8000eab0:	00193913          	seqz	s2,s2
    8000eab4:	ce3fd06f          	j	8000c796 <tinst_tests_gpf+0xf36>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000eab8:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000eaba:	0017f713          	andi	a4,a5,1
    8000eabe:	a8071f63          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000eac2:	0007d503          	lhu	a0,0(a5)
    8000eac6:	903f20ef          	jal	800013c8 <expand_compressed_instruction>
    8000eaca:	01f077b7          	lui	a5,0x1f07
    8000eace:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000ead2:	8d7d                	and	a0,a0,a5
    8000ead4:	00a98463          	beq	s3,a0,8000eadc <tinst_tests_gpf+0x327c>
    8000ead8:	f7cfd06f          	j	8000c254 <tinst_tests_gpf+0x9f4>
    8000eadc:	00019597          	auipc	a1,0x19
    8000eae0:	24458593          	addi	a1,a1,580 # 80027d20 <__func__.0+0x2c0>
    8000eae4:	f78fd06f          	j	8000c25c <tinst_tests_gpf+0x9fc>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a sgpf",
    8000eae8:	701c                	ld	a5,32(s0)
    8000eaea:	e399                	bnez	a5,8000eaf0 <tinst_tests_gpf+0x3290>
    8000eaec:	d61fd06f          	j	8000c84c <tinst_tests_gpf+0xfec>
    8000eaf0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000eaf2:	0016f713          	andi	a4,a3,1
    8000eaf6:	a6071363          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000eafa:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000eafe:	460d                	li	a2,3
    8000eb00:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000eb04:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000eb06:	00c59763          	bne	a1,a2,8000eb14 <tinst_tests_gpf+0x32b4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000eb0a:	0026d683          	lhu	a3,2(a3)
    8000eb0e:	0106969b          	slliw	a3,a3,0x10
    8000eb12:	8f55                	or	a4,a4,a3
    8000eb14:	1ffe16b7          	lui	a3,0x1ffe1
    8000eb18:	068e                	slli	a3,a3,0x3
    8000eb1a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000eb1c:	8f75                	and	a4,a4,a3
    8000eb1e:	40f70933          	sub	s2,a4,a5
    8000eb22:	00193913          	seqz	s2,s2
    8000eb26:	d27fd06f          	j	8000c84c <tinst_tests_gpf+0xfec>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000eb2a:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000eb2c:	0017f713          	andi	a4,a5,1
    8000eb30:	a2071663          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000eb34:	0007d503          	lhu	a0,0(a5)
    8000eb38:	891f20ef          	jal	800013c8 <expand_compressed_instruction>
    8000eb3c:	01f077b7          	lui	a5,0x1f07
    8000eb40:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000eb44:	8d7d                	and	a0,a0,a5
    8000eb46:	00a48463          	beq	s1,a0,8000eb4e <tinst_tests_gpf+0x32ee>
    8000eb4a:	fb4fd06f          	j	8000c2fe <tinst_tests_gpf+0xa9e>
    8000eb4e:	00019597          	auipc	a1,0x19
    8000eb52:	1d258593          	addi	a1,a1,466 # 80027d20 <__func__.0+0x2c0>
    8000eb56:	fb0fd06f          	j	8000c306 <tinst_tests_gpf+0xaa6>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a sgpf",
    8000eb5a:	701c                	ld	a5,32(s0)
    8000eb5c:	e399                	bnez	a5,8000eb62 <tinst_tests_gpf+0x3302>
    8000eb5e:	da5fd06f          	j	8000c902 <tinst_tests_gpf+0x10a2>
    8000eb62:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000eb64:	0016f713          	andi	a4,a3,1
    8000eb68:	9e071a63          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000eb6c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000eb70:	460d                	li	a2,3
    8000eb72:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000eb76:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000eb78:	00c59763          	bne	a1,a2,8000eb86 <tinst_tests_gpf+0x3326>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000eb7c:	0026d683          	lhu	a3,2(a3)
    8000eb80:	0106969b          	slliw	a3,a3,0x10
    8000eb84:	8f55                	or	a4,a4,a3
    8000eb86:	1ffe16b7          	lui	a3,0x1ffe1
    8000eb8a:	068e                	slli	a3,a3,0x3
    8000eb8c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000eb8e:	8f75                	and	a4,a4,a3
    8000eb90:	40f70933          	sub	s2,a4,a5
    8000eb94:	00193913          	seqz	s2,s2
    8000eb98:	d6bfd06f          	j	8000c902 <tinst_tests_gpf+0x10a2>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a sgpf",
    8000eb9c:	701c                	ld	a5,32(s0)
    8000eb9e:	e399                	bnez	a5,8000eba4 <tinst_tests_gpf+0x3344>
    8000eba0:	e19fd06f          	j	8000c9b8 <tinst_tests_gpf+0x1158>
    8000eba4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000eba6:	0016f713          	andi	a4,a3,1
    8000ebaa:	9a071963          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ebae:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ebb2:	460d                	li	a2,3
    8000ebb4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ebb8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ebba:	00c59763          	bne	a1,a2,8000ebc8 <tinst_tests_gpf+0x3368>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ebbe:	0026d683          	lhu	a3,2(a3)
    8000ebc2:	0106969b          	slliw	a3,a3,0x10
    8000ebc6:	8f55                	or	a4,a4,a3
    8000ebc8:	1ffe16b7          	lui	a3,0x1ffe1
    8000ebcc:	068e                	slli	a3,a3,0x3
    8000ebce:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ebd0:	8f75                	and	a4,a4,a3
    8000ebd2:	40f70933          	sub	s2,a4,a5
    8000ebd6:	00193913          	seqz	s2,s2
    8000ebda:	ddffd06f          	j	8000c9b8 <tinst_tests_gpf+0x1158>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a sgpf",
    8000ebde:	701c                	ld	a5,32(s0)
    8000ebe0:	e399                	bnez	a5,8000ebe6 <tinst_tests_gpf+0x3386>
    8000ebe2:	e8dfd06f          	j	8000ca6e <tinst_tests_gpf+0x120e>
    8000ebe6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ebe8:	0016f713          	andi	a4,a3,1
    8000ebec:	96071863          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ebf0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ebf4:	460d                	li	a2,3
    8000ebf6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ebfa:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ebfc:	00c59763          	bne	a1,a2,8000ec0a <tinst_tests_gpf+0x33aa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ec00:	0026d683          	lhu	a3,2(a3)
    8000ec04:	0106969b          	slliw	a3,a3,0x10
    8000ec08:	8f55                	or	a4,a4,a3
    8000ec0a:	1ffe16b7          	lui	a3,0x1ffe1
    8000ec0e:	068e                	slli	a3,a3,0x3
    8000ec10:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ec12:	8f75                	and	a4,a4,a3
    8000ec14:	40f70933          	sub	s2,a4,a5
    8000ec18:	00193913          	seqz	s2,s2
    8000ec1c:	e53fd06f          	j	8000ca6e <tinst_tests_gpf+0x120e>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000ec20:	701c                	ld	a5,32(s0)
    8000ec22:	e399                	bnez	a5,8000ec28 <tinst_tests_gpf+0x33c8>
    8000ec24:	f05fd06f          	j	8000cb28 <tinst_tests_gpf+0x12c8>
    8000ec28:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ec2a:	0016f713          	andi	a4,a3,1
    8000ec2e:	92071763          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ec32:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ec36:	460d                	li	a2,3
    8000ec38:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ec3c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ec3e:	00c59763          	bne	a1,a2,8000ec4c <tinst_tests_gpf+0x33ec>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ec42:	0026d683          	lhu	a3,2(a3)
    8000ec46:	0106969b          	slliw	a3,a3,0x10
    8000ec4a:	8f55                	or	a4,a4,a3
    8000ec4c:	1ffe16b7          	lui	a3,0x1ffe1
    8000ec50:	068e                	slli	a3,a3,0x3
    8000ec52:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ec54:	8f75                	and	a4,a4,a3
    8000ec56:	40f70933          	sub	s2,a4,a5
    8000ec5a:	00193913          	seqz	s2,s2
    8000ec5e:	ecbfd06f          	j	8000cb28 <tinst_tests_gpf+0x12c8>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a sgpf",
    8000ec62:	701c                	ld	a5,32(s0)
    8000ec64:	e399                	bnez	a5,8000ec6a <tinst_tests_gpf+0x340a>
    8000ec66:	f79fd06f          	j	8000cbde <tinst_tests_gpf+0x137e>
    8000ec6a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ec6c:	0016f713          	andi	a4,a3,1
    8000ec70:	8e071663          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ec74:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ec78:	460d                	li	a2,3
    8000ec7a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ec7e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ec80:	00c59763          	bne	a1,a2,8000ec8e <tinst_tests_gpf+0x342e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ec84:	0026d683          	lhu	a3,2(a3)
    8000ec88:	0106969b          	slliw	a3,a3,0x10
    8000ec8c:	8f55                	or	a4,a4,a3
    8000ec8e:	1ffe16b7          	lui	a3,0x1ffe1
    8000ec92:	068e                	slli	a3,a3,0x3
    8000ec94:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ec96:	8f75                	and	a4,a4,a3
    8000ec98:	40f70933          	sub	s2,a4,a5
    8000ec9c:	00193913          	seqz	s2,s2
    8000eca0:	f3ffd06f          	j	8000cbde <tinst_tests_gpf+0x137e>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a sgpf",
    8000eca4:	701c                	ld	a5,32(s0)
    8000eca6:	e399                	bnez	a5,8000ecac <tinst_tests_gpf+0x344c>
    8000eca8:	fedfd06f          	j	8000cc94 <tinst_tests_gpf+0x1434>
    8000ecac:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ecae:	0016f713          	andi	a4,a3,1
    8000ecb2:	8a071563          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ecb6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ecba:	460d                	li	a2,3
    8000ecbc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ecc0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ecc2:	00c59763          	bne	a1,a2,8000ecd0 <tinst_tests_gpf+0x3470>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ecc6:	0026d683          	lhu	a3,2(a3)
    8000ecca:	0106969b          	slliw	a3,a3,0x10
    8000ecce:	8f55                	or	a4,a4,a3
    8000ecd0:	1ffe16b7          	lui	a3,0x1ffe1
    8000ecd4:	068e                	slli	a3,a3,0x3
    8000ecd6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ecd8:	8f75                	and	a4,a4,a3
    8000ecda:	40f70933          	sub	s2,a4,a5
    8000ecde:	00193913          	seqz	s2,s2
    8000ece2:	fb3fd06f          	j	8000cc94 <tinst_tests_gpf+0x1434>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a sgpf",
    8000ece6:	701c                	ld	a5,32(s0)
    8000ece8:	e399                	bnez	a5,8000ecee <tinst_tests_gpf+0x348e>
    8000ecea:	860fe06f          	j	8000cd4a <tinst_tests_gpf+0x14ea>
    8000ecee:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ecf0:	0016f713          	andi	a4,a3,1
    8000ecf4:	86071463          	bnez	a4,8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ecf8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ecfc:	460d                	li	a2,3
    8000ecfe:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ed02:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ed04:	00c59763          	bne	a1,a2,8000ed12 <tinst_tests_gpf+0x34b2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ed08:	0026d683          	lhu	a3,2(a3)
    8000ed0c:	0106969b          	slliw	a3,a3,0x10
    8000ed10:	8f55                	or	a4,a4,a3
    8000ed12:	1ffe16b7          	lui	a3,0x1ffe1
    8000ed16:	068e                	slli	a3,a3,0x3
    8000ed18:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ed1a:	8f75                	and	a4,a4,a3
    8000ed1c:	40f70933          	sub	s2,a4,a5
    8000ed20:	00193913          	seqz	s2,s2
    8000ed24:	826fe06f          	j	8000cd4a <tinst_tests_gpf+0x14ea>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a sgpf",
    8000ed28:	701c                	ld	a5,32(s0)
    8000ed2a:	e399                	bnez	a5,8000ed30 <tinst_tests_gpf+0x34d0>
    8000ed2c:	8d4fe06f          	j	8000ce00 <tinst_tests_gpf+0x15a0>
    8000ed30:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ed32:	0016f713          	andi	a4,a3,1
    8000ed36:	c319                	beqz	a4,8000ed3c <tinst_tests_gpf+0x34dc>
    8000ed38:	824ff06f          	j	8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ed3c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ed40:	460d                	li	a2,3
    8000ed42:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ed46:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ed48:	00c59763          	bne	a1,a2,8000ed56 <tinst_tests_gpf+0x34f6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ed4c:	0026d683          	lhu	a3,2(a3)
    8000ed50:	0106969b          	slliw	a3,a3,0x10
    8000ed54:	8f55                	or	a4,a4,a3
    8000ed56:	1ffe16b7          	lui	a3,0x1ffe1
    8000ed5a:	068e                	slli	a3,a3,0x3
    8000ed5c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ed5e:	8f75                	and	a4,a4,a3
    8000ed60:	40f70933          	sub	s2,a4,a5
    8000ed64:	00193913          	seqz	s2,s2
    8000ed68:	898fe06f          	j	8000ce00 <tinst_tests_gpf+0x15a0>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a sgpf",
    8000ed6c:	701c                	ld	a5,32(s0)
    8000ed6e:	e399                	bnez	a5,8000ed74 <tinst_tests_gpf+0x3514>
    8000ed70:	946fe06f          	j	8000ceb6 <tinst_tests_gpf+0x1656>
    8000ed74:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ed76:	0016f713          	andi	a4,a3,1
    8000ed7a:	c319                	beqz	a4,8000ed80 <tinst_tests_gpf+0x3520>
    8000ed7c:	fe1fe06f          	j	8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ed80:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ed84:	460d                	li	a2,3
    8000ed86:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ed8a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ed8c:	00c59763          	bne	a1,a2,8000ed9a <tinst_tests_gpf+0x353a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ed90:	0026d683          	lhu	a3,2(a3)
    8000ed94:	0106969b          	slliw	a3,a3,0x10
    8000ed98:	8f55                	or	a4,a4,a3
    8000ed9a:	1ffe16b7          	lui	a3,0x1ffe1
    8000ed9e:	068e                	slli	a3,a3,0x3
    8000eda0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000eda2:	8f75                	and	a4,a4,a3
    8000eda4:	40f70933          	sub	s2,a4,a5
    8000eda8:	00193913          	seqz	s2,s2
    8000edac:	90afe06f          	j	8000ceb6 <tinst_tests_gpf+0x1656>
    8000edb0:	701c                	ld	a5,32(s0)
    8000edb2:	e399                	bnez	a5,8000edb8 <tinst_tests_gpf+0x3558>
    8000edb4:	8e0fe06f          	j	8000ce94 <tinst_tests_gpf+0x1634>
    8000edb8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000edba:	0016f713          	andi	a4,a3,1
    8000edbe:	c319                	beqz	a4,8000edc4 <tinst_tests_gpf+0x3564>
    8000edc0:	f9dfe06f          	j	8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000edc4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000edc8:	460d                	li	a2,3
    8000edca:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000edce:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000edd0:	00c59763          	bne	a1,a2,8000edde <tinst_tests_gpf+0x357e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000edd4:	0026d683          	lhu	a3,2(a3)
    8000edd8:	0106969b          	slliw	a3,a3,0x10
    8000eddc:	8f55                	or	a4,a4,a3
    8000edde:	1ffe16b7          	lui	a3,0x1ffe1
    8000ede2:	068e                	slli	a3,a3,0x3
    8000ede4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ede6:	8f75                	and	a4,a4,a3
    8000ede8:	00e78463          	beq	a5,a4,8000edf0 <tinst_tests_gpf+0x3590>
    8000edec:	894fe06f          	j	8000ce80 <tinst_tests_gpf+0x1620>
    8000edf0:	8a4fe06f          	j	8000ce94 <tinst_tests_gpf+0x1634>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a sgpf",
    8000edf4:	701c                	ld	a5,32(s0)
    8000edf6:	e399                	bnez	a5,8000edfc <tinst_tests_gpf+0x359c>
    8000edf8:	952fe06f          	j	8000cf4a <tinst_tests_gpf+0x16ea>
    8000edfc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000edfe:	0016f713          	andi	a4,a3,1
    8000ee02:	c319                	beqz	a4,8000ee08 <tinst_tests_gpf+0x35a8>
    8000ee04:	f59fe06f          	j	8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ee08:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ee0c:	460d                	li	a2,3
    8000ee0e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ee12:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ee14:	00c59763          	bne	a1,a2,8000ee22 <tinst_tests_gpf+0x35c2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ee18:	0026d683          	lhu	a3,2(a3)
    8000ee1c:	0106969b          	slliw	a3,a3,0x10
    8000ee20:	8f55                	or	a4,a4,a3
    8000ee22:	1ffe16b7          	lui	a3,0x1ffe1
    8000ee26:	068e                	slli	a3,a3,0x3
    8000ee28:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ee2a:	8f75                	and	a4,a4,a3
    8000ee2c:	00e78463          	beq	a5,a4,8000ee34 <tinst_tests_gpf+0x35d4>
    8000ee30:	906fe06f          	j	8000cf36 <tinst_tests_gpf+0x16d6>
    8000ee34:	916fe06f          	j	8000cf4a <tinst_tests_gpf+0x16ea>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a sgpf",
    8000ee38:	701c                	ld	a5,32(s0)
    8000ee3a:	e399                	bnez	a5,8000ee40 <tinst_tests_gpf+0x35e0>
    8000ee3c:	9bcfe06f          	j	8000cff8 <tinst_tests_gpf+0x1798>
    8000ee40:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ee42:	0016f713          	andi	a4,a3,1
    8000ee46:	c319                	beqz	a4,8000ee4c <tinst_tests_gpf+0x35ec>
    8000ee48:	f15fe06f          	j	8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ee4c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ee50:	460d                	li	a2,3
    8000ee52:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ee56:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ee58:	00c59763          	bne	a1,a2,8000ee66 <tinst_tests_gpf+0x3606>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ee5c:	0026d683          	lhu	a3,2(a3)
    8000ee60:	0106969b          	slliw	a3,a3,0x10
    8000ee64:	8f55                	or	a4,a4,a3
    8000ee66:	1ffe16b7          	lui	a3,0x1ffe1
    8000ee6a:	068e                	slli	a3,a3,0x3
    8000ee6c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ee6e:	8f75                	and	a4,a4,a3
    8000ee70:	00e78463          	beq	a5,a4,8000ee78 <tinst_tests_gpf+0x3618>
    8000ee74:	970fe06f          	j	8000cfe4 <tinst_tests_gpf+0x1784>
    8000ee78:	980fe06f          	j	8000cff8 <tinst_tests_gpf+0x1798>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a sgpf",
    8000ee7c:	701c                	ld	a5,32(s0)
    8000ee7e:	e399                	bnez	a5,8000ee84 <tinst_tests_gpf+0x3624>
    8000ee80:	a26fe06f          	j	8000d0a6 <tinst_tests_gpf+0x1846>
    8000ee84:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ee86:	0016f713          	andi	a4,a3,1
    8000ee8a:	c319                	beqz	a4,8000ee90 <tinst_tests_gpf+0x3630>
    8000ee8c:	ed1fe06f          	j	8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ee90:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ee94:	460d                	li	a2,3
    8000ee96:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ee9a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ee9c:	00c59763          	bne	a1,a2,8000eeaa <tinst_tests_gpf+0x364a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000eea0:	0026d683          	lhu	a3,2(a3)
    8000eea4:	0106969b          	slliw	a3,a3,0x10
    8000eea8:	8f55                	or	a4,a4,a3
    8000eeaa:	1ffe16b7          	lui	a3,0x1ffe1
    8000eeae:	068e                	slli	a3,a3,0x3
    8000eeb0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000eeb2:	8f75                	and	a4,a4,a3
    8000eeb4:	00e78463          	beq	a5,a4,8000eebc <tinst_tests_gpf+0x365c>
    8000eeb8:	9dafe06f          	j	8000d092 <tinst_tests_gpf+0x1832>
    8000eebc:	9eafe06f          	j	8000d0a6 <tinst_tests_gpf+0x1846>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000eec0:	701c                	ld	a5,32(s0)
    8000eec2:	e399                	bnez	a5,8000eec8 <tinst_tests_gpf+0x3668>
    8000eec4:	a90fe06f          	j	8000d154 <tinst_tests_gpf+0x18f4>
    8000eec8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000eeca:	0016f713          	andi	a4,a3,1
    8000eece:	c319                	beqz	a4,8000eed4 <tinst_tests_gpf+0x3674>
    8000eed0:	e8dfe06f          	j	8000dd5c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000eed4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000eed8:	460d                	li	a2,3
    8000eeda:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000eede:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000eee0:	00c59763          	bne	a1,a2,8000eeee <tinst_tests_gpf+0x368e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000eee4:	0026d683          	lhu	a3,2(a3)
    8000eee8:	0106969b          	slliw	a3,a3,0x10
    8000eeec:	8f55                	or	a4,a4,a3
    8000eeee:	1ffe16b7          	lui	a3,0x1ffe1
    8000eef2:	068e                	slli	a3,a3,0x3
    8000eef4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000eef6:	8f75                	and	a4,a4,a3
    8000eef8:	00e78463          	beq	a5,a4,8000ef00 <tinst_tests_gpf+0x36a0>
    8000eefc:	a44fe06f          	j	8000d140 <tinst_tests_gpf+0x18e0>
    8000ef00:	a54fe06f          	j	8000d154 <tinst_tests_gpf+0x18f4>

000000008000ef04 <priv_change_1>:
#include <rvh_test.h>
#include <csrs.h> 
#include <page_tables.h> 
bool priv_change_1(){
    8000ef04:	1101                	addi	sp,sp,-32
    
    TEST_START();
    8000ef06:	00018597          	auipc	a1,0x18
    8000ef0a:	91a58593          	addi	a1,a1,-1766 # 80026820 <__func__.16>
    8000ef0e:	00019517          	auipc	a0,0x19
    8000ef12:	e3250513          	addi	a0,a0,-462 # 80027d40 <__func__.0+0x2e0>
bool priv_change_1(){
    8000ef16:	ec06                	sd	ra,24(sp)
    8000ef18:	e822                	sd	s0,16(sp)
    8000ef1a:	e426                	sd	s1,8(sp)
    TEST_START();
    8000ef1c:	5db160ef          	jal	80025cf6 <printf>
    8000ef20:	4529                	li	a0,10
    8000ef22:	3df150ef          	jal	80024b00 <putchar>


    goto_priv(PRIV_HS);
    8000ef26:	450d                	li	a0,3
    8000ef28:	ccff10ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8000ef2c:	eb4f10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000ef30:	8f3f10ef          	jal	80000822 <hpt_init>
    vspt_init(); 
    8000ef34:	f7cf10ef          	jal	800006b0 <vspt_init>

    //V=1，VS模式下发生异常，关闭代理，切换到M态处理异常，异常结束恢复到VS态
    goto_priv(PRIV_M);
    8000ef38:	4511                	li	a0,4
    8000ef3a:	cbdf10ef          	jal	80000bf6 <goto_priv>
    CSRW(medeleg,0);
    8000ef3e:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    8000ef42:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000ef46:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000ef4a:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_VS);     
    8000ef4e:	4509                	li	a0,2
    8000ef50:	ca7f10ef          	jal	80000bf6 <goto_priv>
    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000ef54:	0330000f          	fence	rw,rw
    8000ef58:	0003a417          	auipc	s0,0x3a
    8000ef5c:	0b840413          	addi	s0,s0,184 # 80049010 <excpt>
    8000ef60:	4785                	li	a5,1
    8000ef62:	0003a717          	auipc	a4,0x3a
    8000ef66:	0e073323          	sd	zero,230(a4) # 80049048 <excpt+0x38>
    8000ef6a:	00f41023          	sh	a5,0(s0)
    8000ef6e:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8000ef72:	400197b7          	lui	a5,0x40019
    8000ef76:	078a                	slli	a5,a5,0x2
    8000ef78:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000ef7c:	08200593          	li	a1,130
    8000ef80:	0001c617          	auipc	a2,0x1c
    8000ef84:	88860613          	addi	a2,a2,-1912 # 8002a808 <__func__.0+0x2da8>
    8000ef88:	00019517          	auipc	a0,0x19
    8000ef8c:	dd050513          	addi	a0,a0,-560 # 80027d58 <__func__.0+0x2f8>
    8000ef90:	567160ef          	jal	80025cf6 <printf>
    8000ef94:	0003a797          	auipc	a5,0x3a
    8000ef98:	07d7c783          	lbu	a5,125(a5) # 80049011 <excpt+0x1>
    8000ef9c:	00019597          	auipc	a1,0x19
    8000efa0:	d9458593          	addi	a1,a1,-620 # 80027d30 <__func__.0+0x2d0>
    8000efa4:	c789                	beqz	a5,8000efae <priv_change_1+0xaa>
    8000efa6:	6418                	ld	a4,8(s0)
    8000efa8:	47b5                	li	a5,13
    8000efaa:	0cf70463          	beq	a4,a5,8000f072 <priv_change_1+0x16e>
    8000efae:	00019517          	auipc	a0,0x19
    8000efb2:	dc250513          	addi	a0,a0,-574 # 80027d70 <__func__.0+0x310>
    8000efb6:	541160ef          	jal	80025cf6 <printf>
    8000efba:	0003a797          	auipc	a5,0x3a
    8000efbe:	0577c783          	lbu	a5,87(a5) # 80049011 <excpt+0x1>
    8000efc2:	c789                	beqz	a5,8000efcc <priv_change_1+0xc8>
    8000efc4:	6418                	ld	a4,8(s0)
    8000efc6:	47b5                	li	a5,13
    8000efc8:	04f70e63          	beq	a4,a5,8000f024 <priv_change_1+0x120>
    8000efcc:	00019517          	auipc	a0,0x19
    8000efd0:	dac50513          	addi	a0,a0,-596 # 80027d78 <__func__.0+0x318>
    8000efd4:	523160ef          	jal	80025cf6 <printf>
    8000efd8:	02900513          	li	a0,41
    8000efdc:	325150ef          	jal	80024b00 <putchar>
    8000efe0:	4529                	li	a0,10
    8000efe2:	31f150ef          	jal	80024b00 <putchar>
    8000efe6:	0003a497          	auipc	s1,0x3a
    8000efea:	02b4c483          	lbu	s1,43(s1) # 80049011 <excpt+0x1>
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_M &&
        curr_priv == PRIV_VS
    );

    TEST_END();
    8000efee:	00019597          	auipc	a1,0x19
    8000eff2:	d4258593          	addi	a1,a1,-702 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000eff6:	c491                	beqz	s1,8000f002 <priv_change_1+0xfe>
    8000eff8:	6418                	ld	a4,8(s0)
    8000effa:	47b5                	li	a5,13
    8000effc:	04f70363          	beq	a4,a5,8000f042 <priv_change_1+0x13e>
    8000f000:	4481                	li	s1,0
    TEST_END();
    8000f002:	00019517          	auipc	a0,0x19
    8000f006:	dd650513          	addi	a0,a0,-554 # 80027dd8 <__func__.0+0x378>
    8000f00a:	4ed160ef          	jal	80025cf6 <printf>
    8000f00e:	4511                	li	a0,4
    8000f010:	be7f10ef          	jal	80000bf6 <goto_priv>
    8000f014:	c98f20ef          	jal	800014ac <reset_state>
}
    8000f018:	60e2                	ld	ra,24(sp)
    8000f01a:	6442                	ld	s0,16(sp)
    8000f01c:	8526                	mv	a0,s1
    8000f01e:	64a2                	ld	s1,8(sp)
    8000f020:	6105                	addi	sp,sp,32
    8000f022:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000f024:	0003a717          	auipc	a4,0x3a
    8000f028:	ff072703          	lw	a4,-16(a4) # 80049014 <excpt+0x4>
    8000f02c:	4791                	li	a5,4
    8000f02e:	f8f71fe3          	bne	a4,a5,8000efcc <priv_change_1+0xc8>
    8000f032:	00023717          	auipc	a4,0x23
    8000f036:	46a72703          	lw	a4,1130(a4) # 8003249c <curr_priv>
    8000f03a:	4789                	li	a5,2
    8000f03c:	f8f718e3          	bne	a4,a5,8000efcc <priv_change_1+0xc8>
    8000f040:	b745                	j	8000efe0 <priv_change_1+0xdc>
    8000f042:	0003a717          	auipc	a4,0x3a
    8000f046:	fd272703          	lw	a4,-46(a4) # 80049014 <excpt+0x4>
    8000f04a:	4791                	li	a5,4
    8000f04c:	faf71ae3          	bne	a4,a5,8000f000 <priv_change_1+0xfc>
    8000f050:	00023717          	auipc	a4,0x23
    8000f054:	44c72703          	lw	a4,1100(a4) # 8003249c <curr_priv>
    8000f058:	4789                	li	a5,2
    TEST_END();
    8000f05a:	00019597          	auipc	a1,0x19
    8000f05e:	cc658593          	addi	a1,a1,-826 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000f062:	faf700e3          	beq	a4,a5,8000f002 <priv_change_1+0xfe>
    8000f066:	4481                	li	s1,0
    TEST_END();
    8000f068:	00019597          	auipc	a1,0x19
    8000f06c:	cc858593          	addi	a1,a1,-824 # 80027d30 <__func__.0+0x2d0>
    8000f070:	bf49                	j	8000f002 <priv_change_1+0xfe>
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000f072:	0003a717          	auipc	a4,0x3a
    8000f076:	fa272703          	lw	a4,-94(a4) # 80049014 <excpt+0x4>
    8000f07a:	4791                	li	a5,4
    8000f07c:	f2f719e3          	bne	a4,a5,8000efae <priv_change_1+0xaa>
    8000f080:	00023717          	auipc	a4,0x23
    8000f084:	41c72703          	lw	a4,1052(a4) # 8003249c <curr_priv>
    8000f088:	4789                	li	a5,2
    8000f08a:	00019597          	auipc	a1,0x19
    8000f08e:	c9658593          	addi	a1,a1,-874 # 80027d20 <__func__.0+0x2c0>
    8000f092:	f0f70ee3          	beq	a4,a5,8000efae <priv_change_1+0xaa>
    8000f096:	00019597          	auipc	a1,0x19
    8000f09a:	c9a58593          	addi	a1,a1,-870 # 80027d30 <__func__.0+0x2d0>
    8000f09e:	bf01                	j	8000efae <priv_change_1+0xaa>

000000008000f0a0 <priv_change_2>:

bool priv_change_2(){
    8000f0a0:	1101                	addi	sp,sp,-32
    
    TEST_START();
    8000f0a2:	00017597          	auipc	a1,0x17
    8000f0a6:	78e58593          	addi	a1,a1,1934 # 80026830 <__func__.14>
    8000f0aa:	00019517          	auipc	a0,0x19
    8000f0ae:	c9650513          	addi	a0,a0,-874 # 80027d40 <__func__.0+0x2e0>
bool priv_change_2(){
    8000f0b2:	ec06                	sd	ra,24(sp)
    8000f0b4:	e822                	sd	s0,16(sp)
    8000f0b6:	e426                	sd	s1,8(sp)
    TEST_START();
    8000f0b8:	43f160ef          	jal	80025cf6 <printf>
    8000f0bc:	4529                	li	a0,10
    8000f0be:	243150ef          	jal	80024b00 <putchar>


    goto_priv(PRIV_HS);
    8000f0c2:	450d                	li	a0,3
    8000f0c4:	b33f10ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8000f0c8:	d18f10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000f0cc:	f56f10ef          	jal	80000822 <hpt_init>
    vspt_init(); 
    8000f0d0:	de0f10ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;
    //V=1，VS模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000f0d4:	4511                	li	a0,4
    8000f0d6:	b21f10ef          	jal	80000bf6 <goto_priv>
    CSRC(medeleg, 1 << CAUSE_LPF);         
    8000f0da:	6789                	lui	a5,0x2
    8000f0dc:	3027b073          	csrc	medeleg,a5
    goto_priv(PRIV_VS);     
    8000f0e0:	4509                	li	a0,2
    8000f0e2:	b15f10ef          	jal	80000bf6 <goto_priv>

    vaddr_f = vs_page_base(VSI_GI);      
    value = 0xdeadbeef;
    
    TEST_SETUP_EXCEPT();        
    8000f0e6:	0330000f          	fence	rw,rw
    8000f0ea:	0003a417          	auipc	s0,0x3a
    8000f0ee:	f2640413          	addi	s0,s0,-218 # 80049010 <excpt>
    8000f0f2:	4785                	li	a5,1
    8000f0f4:	0003a717          	auipc	a4,0x3a
    8000f0f8:	f4073a23          	sd	zero,-172(a4) # 80049048 <excpt+0x38>
    8000f0fc:	00f41023          	sh	a5,0(s0)
    8000f100:	0330000f          	fence	rw,rw
    8000f104:	400197b7          	lui	a5,0x40019
    8000f108:	078a                	slli	a5,a5,0x2
    8000f10a:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000f10e:	08200593          	li	a1,130
    8000f112:	0001b617          	auipc	a2,0x1b
    8000f116:	76660613          	addi	a2,a2,1894 # 8002a878 <__func__.0+0x2e18>
    8000f11a:	00019517          	auipc	a0,0x19
    8000f11e:	c3e50513          	addi	a0,a0,-962 # 80027d58 <__func__.0+0x2f8>
    8000f122:	3d5160ef          	jal	80025cf6 <printf>
    8000f126:	0003a797          	auipc	a5,0x3a
    8000f12a:	eeb7c783          	lbu	a5,-277(a5) # 80049011 <excpt+0x1>
    8000f12e:	00019597          	auipc	a1,0x19
    8000f132:	c0258593          	addi	a1,a1,-1022 # 80027d30 <__func__.0+0x2d0>
    8000f136:	c789                	beqz	a5,8000f140 <priv_change_2+0xa0>
    8000f138:	6418                	ld	a4,8(s0)
    8000f13a:	47b5                	li	a5,13
    8000f13c:	0cf70463          	beq	a4,a5,8000f204 <priv_change_2+0x164>
    8000f140:	00019517          	auipc	a0,0x19
    8000f144:	c3050513          	addi	a0,a0,-976 # 80027d70 <__func__.0+0x310>
    8000f148:	3af160ef          	jal	80025cf6 <printf>
    8000f14c:	0003a797          	auipc	a5,0x3a
    8000f150:	ec57c783          	lbu	a5,-315(a5) # 80049011 <excpt+0x1>
    8000f154:	c789                	beqz	a5,8000f15e <priv_change_2+0xbe>
    8000f156:	6418                	ld	a4,8(s0)
    8000f158:	47b5                	li	a5,13
    8000f15a:	04f70e63          	beq	a4,a5,8000f1b6 <priv_change_2+0x116>
    8000f15e:	00019517          	auipc	a0,0x19
    8000f162:	c1a50513          	addi	a0,a0,-998 # 80027d78 <__func__.0+0x318>
    8000f166:	391160ef          	jal	80025cf6 <printf>
    8000f16a:	02900513          	li	a0,41
    8000f16e:	193150ef          	jal	80024b00 <putchar>
    8000f172:	4529                	li	a0,10
    8000f174:	18d150ef          	jal	80024b00 <putchar>
    8000f178:	0003a497          	auipc	s1,0x3a
    8000f17c:	e994c483          	lbu	s1,-359(s1) # 80049011 <excpt+0x1>
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_M &&
        curr_priv == PRIV_VS
    );    

    TEST_END();
    8000f180:	00019597          	auipc	a1,0x19
    8000f184:	bb058593          	addi	a1,a1,-1104 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000f188:	c491                	beqz	s1,8000f194 <priv_change_2+0xf4>
    8000f18a:	6418                	ld	a4,8(s0)
    8000f18c:	47b5                	li	a5,13
    8000f18e:	04f70363          	beq	a4,a5,8000f1d4 <priv_change_2+0x134>
    8000f192:	4481                	li	s1,0
    TEST_END();
    8000f194:	00019517          	auipc	a0,0x19
    8000f198:	c4450513          	addi	a0,a0,-956 # 80027dd8 <__func__.0+0x378>
    8000f19c:	35b160ef          	jal	80025cf6 <printf>
    8000f1a0:	4511                	li	a0,4
    8000f1a2:	a55f10ef          	jal	80000bf6 <goto_priv>
    8000f1a6:	b06f20ef          	jal	800014ac <reset_state>
}
    8000f1aa:	60e2                	ld	ra,24(sp)
    8000f1ac:	6442                	ld	s0,16(sp)
    8000f1ae:	8526                	mv	a0,s1
    8000f1b0:	64a2                	ld	s1,8(sp)
    8000f1b2:	6105                	addi	sp,sp,32
    8000f1b4:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000f1b6:	0003a717          	auipc	a4,0x3a
    8000f1ba:	e5e72703          	lw	a4,-418(a4) # 80049014 <excpt+0x4>
    8000f1be:	4791                	li	a5,4
    8000f1c0:	f8f71fe3          	bne	a4,a5,8000f15e <priv_change_2+0xbe>
    8000f1c4:	00023717          	auipc	a4,0x23
    8000f1c8:	2d872703          	lw	a4,728(a4) # 8003249c <curr_priv>
    8000f1cc:	4789                	li	a5,2
    8000f1ce:	f8f718e3          	bne	a4,a5,8000f15e <priv_change_2+0xbe>
    8000f1d2:	b745                	j	8000f172 <priv_change_2+0xd2>
    8000f1d4:	0003a717          	auipc	a4,0x3a
    8000f1d8:	e4072703          	lw	a4,-448(a4) # 80049014 <excpt+0x4>
    8000f1dc:	4791                	li	a5,4
    8000f1de:	faf71ae3          	bne	a4,a5,8000f192 <priv_change_2+0xf2>
    8000f1e2:	00023717          	auipc	a4,0x23
    8000f1e6:	2ba72703          	lw	a4,698(a4) # 8003249c <curr_priv>
    8000f1ea:	4789                	li	a5,2
    TEST_END();
    8000f1ec:	00019597          	auipc	a1,0x19
    8000f1f0:	b3458593          	addi	a1,a1,-1228 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000f1f4:	faf700e3          	beq	a4,a5,8000f194 <priv_change_2+0xf4>
    8000f1f8:	4481                	li	s1,0
    TEST_END();
    8000f1fa:	00019597          	auipc	a1,0x19
    8000f1fe:	b3658593          	addi	a1,a1,-1226 # 80027d30 <__func__.0+0x2d0>
    8000f202:	bf49                	j	8000f194 <priv_change_2+0xf4>
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000f204:	0003a717          	auipc	a4,0x3a
    8000f208:	e1072703          	lw	a4,-496(a4) # 80049014 <excpt+0x4>
    8000f20c:	4791                	li	a5,4
    8000f20e:	f2f719e3          	bne	a4,a5,8000f140 <priv_change_2+0xa0>
    8000f212:	00023717          	auipc	a4,0x23
    8000f216:	28a72703          	lw	a4,650(a4) # 8003249c <curr_priv>
    8000f21a:	4789                	li	a5,2
    8000f21c:	00019597          	auipc	a1,0x19
    8000f220:	b0458593          	addi	a1,a1,-1276 # 80027d20 <__func__.0+0x2c0>
    8000f224:	f0f70ee3          	beq	a4,a5,8000f140 <priv_change_2+0xa0>
    8000f228:	00019597          	auipc	a1,0x19
    8000f22c:	b0858593          	addi	a1,a1,-1272 # 80027d30 <__func__.0+0x2d0>
    8000f230:	bf01                	j	8000f140 <priv_change_2+0xa0>

000000008000f232 <priv_change_3>:


bool priv_change_3(){
    8000f232:	1101                	addi	sp,sp,-32
    
    TEST_START();
    8000f234:	00017597          	auipc	a1,0x17
    8000f238:	60c58593          	addi	a1,a1,1548 # 80026840 <__func__.13>
    8000f23c:	00019517          	auipc	a0,0x19
    8000f240:	b0450513          	addi	a0,a0,-1276 # 80027d40 <__func__.0+0x2e0>
bool priv_change_3(){
    8000f244:	ec06                	sd	ra,24(sp)
    8000f246:	e822                	sd	s0,16(sp)
    8000f248:	e426                	sd	s1,8(sp)
    TEST_START();
    8000f24a:	2ad160ef          	jal	80025cf6 <printf>
    8000f24e:	4529                	li	a0,10
    8000f250:	0b1150ef          	jal	80024b00 <putchar>


    goto_priv(PRIV_HS);
    8000f254:	450d                	li	a0,3
    8000f256:	9a1f10ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8000f25a:	b86f10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000f25e:	dc4f10ef          	jal	80000822 <hpt_init>
    vspt_init(); 
    8000f262:	c4ef10ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    //V=0，HS模式下发生异常，关闭代理，切换到M态处理异常，处理结束执行mret返回HS态
    TEST_SETUP_EXCEPT();  
    8000f266:	0330000f          	fence	rw,rw
    8000f26a:	0003a417          	auipc	s0,0x3a
    8000f26e:	da640413          	addi	s0,s0,-602 # 80049010 <excpt>
    8000f272:	4485                	li	s1,1
    8000f274:	0003a797          	auipc	a5,0x3a
    8000f278:	dc07ba23          	sd	zero,-556(a5) # 80049048 <excpt+0x38>
    8000f27c:	00941023          	sh	s1,0(s0)
    8000f280:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000f284:	4511                	li	a0,4
    8000f286:	971f10ef          	jal	80000bf6 <goto_priv>
    CSRW(medeleg,0);
    8000f28a:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);
    8000f28e:	30305073          	csrwi	mideleg,0
    goto_priv(PRIV_HS);     
    8000f292:	450d                	li	a0,3
    8000f294:	963f10ef          	jal	80000bf6 <goto_priv>
    vaddr_f = hs_page_base(VSI_GI);      
    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000f298:	0330000f          	fence	rw,rw
    8000f29c:	0003a797          	auipc	a5,0x3a
    8000f2a0:	da07b623          	sd	zero,-596(a5) # 80049048 <excpt+0x38>
    8000f2a4:	00941023          	sh	s1,0(s0)
    8000f2a8:	0330000f          	fence	rw,rw
    8000f2ac:	400197b7          	lui	a5,0x40019
    8000f2b0:	078a                	slli	a5,a5,0x2
    8000f2b2:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    //mret();
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000f2b6:	08200593          	li	a1,130
    8000f2ba:	0001b617          	auipc	a2,0x1b
    8000f2be:	5fe60613          	addi	a2,a2,1534 # 8002a8b8 <__func__.0+0x2e58>
    8000f2c2:	00019517          	auipc	a0,0x19
    8000f2c6:	a9650513          	addi	a0,a0,-1386 # 80027d58 <__func__.0+0x2f8>
    8000f2ca:	22d160ef          	jal	80025cf6 <printf>
    8000f2ce:	0003a797          	auipc	a5,0x3a
    8000f2d2:	d437c783          	lbu	a5,-701(a5) # 80049011 <excpt+0x1>
    8000f2d6:	00019597          	auipc	a1,0x19
    8000f2da:	a5a58593          	addi	a1,a1,-1446 # 80027d30 <__func__.0+0x2d0>
    8000f2de:	cb81                	beqz	a5,8000f2ee <priv_change_3+0xbc>
    8000f2e0:	00023717          	auipc	a4,0x23
    8000f2e4:	1bc72703          	lw	a4,444(a4) # 8003249c <curr_priv>
    8000f2e8:	478d                	li	a5,3
    8000f2ea:	0af70c63          	beq	a4,a5,8000f3a2 <priv_change_3+0x170>
    8000f2ee:	00019517          	auipc	a0,0x19
    8000f2f2:	a8250513          	addi	a0,a0,-1406 # 80027d70 <__func__.0+0x310>
    8000f2f6:	201160ef          	jal	80025cf6 <printf>
    8000f2fa:	0003a797          	auipc	a5,0x3a
    8000f2fe:	d177c783          	lbu	a5,-745(a5) # 80049011 <excpt+0x1>
    8000f302:	cb81                	beqz	a5,8000f312 <priv_change_3+0xe0>
    8000f304:	00023717          	auipc	a4,0x23
    8000f308:	19872703          	lw	a4,408(a4) # 8003249c <curr_priv>
    8000f30c:	478d                	li	a5,3
    8000f30e:	06f70163          	beq	a4,a5,8000f370 <priv_change_3+0x13e>
    8000f312:	00019517          	auipc	a0,0x19
    8000f316:	a6650513          	addi	a0,a0,-1434 # 80027d78 <__func__.0+0x318>
    8000f31a:	1dd160ef          	jal	80025cf6 <printf>
    8000f31e:	02900513          	li	a0,41
    8000f322:	7de150ef          	jal	80024b00 <putchar>
    8000f326:	4529                	li	a0,10
    8000f328:	7d8150ef          	jal	80024b00 <putchar>
    8000f32c:	0003a417          	auipc	s0,0x3a
    8000f330:	ce544403          	lbu	s0,-795(s0) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        curr_priv == PRIV_HS &&
        excpt.priv == PRIV_M
    ); 

    TEST_END();
    8000f334:	00019597          	auipc	a1,0x19
    8000f338:	9fc58593          	addi	a1,a1,-1540 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000f33c:	c809                	beqz	s0,8000f34e <priv_change_3+0x11c>
    8000f33e:	00023717          	auipc	a4,0x23
    8000f342:	15e72703          	lw	a4,350(a4) # 8003249c <curr_priv>
    8000f346:	478d                	li	a5,3
    8000f348:	02f70c63          	beq	a4,a5,8000f380 <priv_change_3+0x14e>
    8000f34c:	4401                	li	s0,0
    TEST_END();
    8000f34e:	00019517          	auipc	a0,0x19
    8000f352:	a8a50513          	addi	a0,a0,-1398 # 80027dd8 <__func__.0+0x378>
    8000f356:	1a1160ef          	jal	80025cf6 <printf>
    8000f35a:	4511                	li	a0,4
    8000f35c:	89bf10ef          	jal	80000bf6 <goto_priv>
    8000f360:	94cf20ef          	jal	800014ac <reset_state>
}
    8000f364:	60e2                	ld	ra,24(sp)
    8000f366:	8522                	mv	a0,s0
    8000f368:	6442                	ld	s0,16(sp)
    8000f36a:	64a2                	ld	s1,8(sp)
    8000f36c:	6105                	addi	sp,sp,32
    8000f36e:	8082                	ret
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000f370:	0003a717          	auipc	a4,0x3a
    8000f374:	ca472703          	lw	a4,-860(a4) # 80049014 <excpt+0x4>
    8000f378:	4791                	li	a5,4
    8000f37a:	f8f71ce3          	bne	a4,a5,8000f312 <priv_change_3+0xe0>
    8000f37e:	b765                	j	8000f326 <priv_change_3+0xf4>
    8000f380:	0003a717          	auipc	a4,0x3a
    8000f384:	c9472703          	lw	a4,-876(a4) # 80049014 <excpt+0x4>
    8000f388:	4791                	li	a5,4
    TEST_END();
    8000f38a:	00019597          	auipc	a1,0x19
    8000f38e:	99658593          	addi	a1,a1,-1642 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000f392:	faf70ee3          	beq	a4,a5,8000f34e <priv_change_3+0x11c>
    8000f396:	4401                	li	s0,0
    TEST_END();
    8000f398:	00019597          	auipc	a1,0x19
    8000f39c:	99858593          	addi	a1,a1,-1640 # 80027d30 <__func__.0+0x2d0>
    8000f3a0:	b77d                	j	8000f34e <priv_change_3+0x11c>
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000f3a2:	0003a717          	auipc	a4,0x3a
    8000f3a6:	c7272703          	lw	a4,-910(a4) # 80049014 <excpt+0x4>
    8000f3aa:	4791                	li	a5,4
    8000f3ac:	00019597          	auipc	a1,0x19
    8000f3b0:	97458593          	addi	a1,a1,-1676 # 80027d20 <__func__.0+0x2c0>
    8000f3b4:	f2f70de3          	beq	a4,a5,8000f2ee <priv_change_3+0xbc>
    8000f3b8:	00019597          	auipc	a1,0x19
    8000f3bc:	97858593          	addi	a1,a1,-1672 # 80027d30 <__func__.0+0x2d0>
    8000f3c0:	b73d                	j	8000f2ee <priv_change_3+0xbc>

000000008000f3c2 <priv_change_4>:

bool priv_change_4(){
    8000f3c2:	1101                	addi	sp,sp,-32
    
    TEST_START();
    8000f3c4:	00017597          	auipc	a1,0x17
    8000f3c8:	48c58593          	addi	a1,a1,1164 # 80026850 <__func__.12>
    8000f3cc:	00019517          	auipc	a0,0x19
    8000f3d0:	97450513          	addi	a0,a0,-1676 # 80027d40 <__func__.0+0x2e0>
bool priv_change_4(){
    8000f3d4:	ec06                	sd	ra,24(sp)
    8000f3d6:	e822                	sd	s0,16(sp)
    8000f3d8:	e426                	sd	s1,8(sp)
    TEST_START();
    8000f3da:	11d160ef          	jal	80025cf6 <printf>
    8000f3de:	4529                	li	a0,10
    8000f3e0:	720150ef          	jal	80024b00 <putchar>


    goto_priv(PRIV_HS);
    8000f3e4:	450d                	li	a0,3
    8000f3e6:	811f10ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8000f3ea:	9f6f10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000f3ee:	c34f10ef          	jal	80000822 <hpt_init>
    vspt_init(); 
    8000f3f2:	abef10ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    //V=0，HS模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000f3f6:	4511                	li	a0,4
    8000f3f8:	ffef10ef          	jal	80000bf6 <goto_priv>
    CSRC(medeleg, 1 << CAUSE_LPF);         
    8000f3fc:	6789                	lui	a5,0x2
    8000f3fe:	3027b073          	csrc	medeleg,a5
    goto_priv(PRIV_HS);     
    8000f402:	450d                	li	a0,3
    8000f404:	ff2f10ef          	jal	80000bf6 <goto_priv>
    vaddr_f = hs_page_base(VSI_GI);      
    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000f408:	0330000f          	fence	rw,rw
    8000f40c:	0003a417          	auipc	s0,0x3a
    8000f410:	c0440413          	addi	s0,s0,-1020 # 80049010 <excpt>
    8000f414:	4785                	li	a5,1
    8000f416:	0003a717          	auipc	a4,0x3a
    8000f41a:	c2073923          	sd	zero,-974(a4) # 80049048 <excpt+0x38>
    8000f41e:	00f41023          	sh	a5,0(s0)
    8000f422:	0330000f          	fence	rw,rw
    8000f426:	400197b7          	lui	a5,0x40019
    8000f42a:	078a                	slli	a5,a5,0x2
    8000f42c:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000f430:	08200593          	li	a1,130
    8000f434:	0001b617          	auipc	a2,0x1b
    8000f438:	4f460613          	addi	a2,a2,1268 # 8002a928 <__func__.0+0x2ec8>
    8000f43c:	00019517          	auipc	a0,0x19
    8000f440:	91c50513          	addi	a0,a0,-1764 # 80027d58 <__func__.0+0x2f8>
    8000f444:	0b3160ef          	jal	80025cf6 <printf>
    8000f448:	0003a797          	auipc	a5,0x3a
    8000f44c:	bc97c783          	lbu	a5,-1079(a5) # 80049011 <excpt+0x1>
    8000f450:	00019597          	auipc	a1,0x19
    8000f454:	8e058593          	addi	a1,a1,-1824 # 80027d30 <__func__.0+0x2d0>
    8000f458:	c789                	beqz	a5,8000f462 <priv_change_4+0xa0>
    8000f45a:	6418                	ld	a4,8(s0)
    8000f45c:	47b5                	li	a5,13
    8000f45e:	0af70663          	beq	a4,a5,8000f50a <priv_change_4+0x148>
    8000f462:	00019517          	auipc	a0,0x19
    8000f466:	90e50513          	addi	a0,a0,-1778 # 80027d70 <__func__.0+0x310>
    8000f46a:	08d160ef          	jal	80025cf6 <printf>
    8000f46e:	0003a797          	auipc	a5,0x3a
    8000f472:	ba37c783          	lbu	a5,-1117(a5) # 80049011 <excpt+0x1>
    8000f476:	c789                	beqz	a5,8000f480 <priv_change_4+0xbe>
    8000f478:	6418                	ld	a4,8(s0)
    8000f47a:	47b5                	li	a5,13
    8000f47c:	04f70e63          	beq	a4,a5,8000f4d8 <priv_change_4+0x116>
    8000f480:	00019517          	auipc	a0,0x19
    8000f484:	8f850513          	addi	a0,a0,-1800 # 80027d78 <__func__.0+0x318>
    8000f488:	06f160ef          	jal	80025cf6 <printf>
    8000f48c:	02900513          	li	a0,41
    8000f490:	670150ef          	jal	80024b00 <putchar>
    8000f494:	4529                	li	a0,10
    8000f496:	66a150ef          	jal	80024b00 <putchar>
    8000f49a:	0003a497          	auipc	s1,0x3a
    8000f49e:	b774c483          	lbu	s1,-1161(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        excpt.priv==PRIV_M
    );  
    
    TEST_END();
    8000f4a2:	00019597          	auipc	a1,0x19
    8000f4a6:	88e58593          	addi	a1,a1,-1906 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000f4aa:	c491                	beqz	s1,8000f4b6 <priv_change_4+0xf4>
    8000f4ac:	6418                	ld	a4,8(s0)
    8000f4ae:	47b5                	li	a5,13
    8000f4b0:	02f70c63          	beq	a4,a5,8000f4e8 <priv_change_4+0x126>
    8000f4b4:	4481                	li	s1,0
    TEST_END();
    8000f4b6:	00019517          	auipc	a0,0x19
    8000f4ba:	92250513          	addi	a0,a0,-1758 # 80027dd8 <__func__.0+0x378>
    8000f4be:	039160ef          	jal	80025cf6 <printf>
    8000f4c2:	4511                	li	a0,4
    8000f4c4:	f32f10ef          	jal	80000bf6 <goto_priv>
    8000f4c8:	fe5f10ef          	jal	800014ac <reset_state>
}
    8000f4cc:	60e2                	ld	ra,24(sp)
    8000f4ce:	6442                	ld	s0,16(sp)
    8000f4d0:	8526                	mv	a0,s1
    8000f4d2:	64a2                	ld	s1,8(sp)
    8000f4d4:	6105                	addi	sp,sp,32
    8000f4d6:	8082                	ret
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000f4d8:	0003a717          	auipc	a4,0x3a
    8000f4dc:	b3c72703          	lw	a4,-1220(a4) # 80049014 <excpt+0x4>
    8000f4e0:	4791                	li	a5,4
    8000f4e2:	f8f71fe3          	bne	a4,a5,8000f480 <priv_change_4+0xbe>
    8000f4e6:	b77d                	j	8000f494 <priv_change_4+0xd2>
    8000f4e8:	0003a717          	auipc	a4,0x3a
    8000f4ec:	b2c72703          	lw	a4,-1236(a4) # 80049014 <excpt+0x4>
    8000f4f0:	4791                	li	a5,4
    TEST_END();
    8000f4f2:	00019597          	auipc	a1,0x19
    8000f4f6:	82e58593          	addi	a1,a1,-2002 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000f4fa:	faf70ee3          	beq	a4,a5,8000f4b6 <priv_change_4+0xf4>
    8000f4fe:	4481                	li	s1,0
    TEST_END();
    8000f500:	00019597          	auipc	a1,0x19
    8000f504:	83058593          	addi	a1,a1,-2000 # 80027d30 <__func__.0+0x2d0>
    8000f508:	b77d                	j	8000f4b6 <priv_change_4+0xf4>
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000f50a:	0003a717          	auipc	a4,0x3a
    8000f50e:	b0a72703          	lw	a4,-1270(a4) # 80049014 <excpt+0x4>
    8000f512:	4791                	li	a5,4
    8000f514:	00019597          	auipc	a1,0x19
    8000f518:	80c58593          	addi	a1,a1,-2036 # 80027d20 <__func__.0+0x2c0>
    8000f51c:	f4f703e3          	beq	a4,a5,8000f462 <priv_change_4+0xa0>
    8000f520:	00019597          	auipc	a1,0x19
    8000f524:	81058593          	addi	a1,a1,-2032 # 80027d30 <__func__.0+0x2d0>
    8000f528:	bf2d                	j	8000f462 <priv_change_4+0xa0>

000000008000f52a <priv_change_5>:

bool priv_change_5(){
    8000f52a:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000f52c:	00017597          	auipc	a1,0x17
    8000f530:	33458593          	addi	a1,a1,820 # 80026860 <__func__.11>
    8000f534:	00019517          	auipc	a0,0x19
    8000f538:	80c50513          	addi	a0,a0,-2036 # 80027d40 <__func__.0+0x2e0>
bool priv_change_5(){
    8000f53c:	e406                	sd	ra,8(sp)
    8000f53e:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f540:	7b6160ef          	jal	80025cf6 <printf>
    8000f544:	4529                	li	a0,10
    8000f546:	5ba150ef          	jal	80024b00 <putchar>


    //V=0，M模式下发生异常，M态处理异常
    goto_priv(PRIV_M);
    8000f54a:	4511                	li	a0,4
    8000f54c:	eaaf10ef          	jal	80000bf6 <goto_priv>
    reset_state();
    8000f550:	f5df10ef          	jal	800014ac <reset_state>
    CSRW(medeleg, 0); 
    8000f554:	30205073          	csrwi	medeleg,0

    TEST_SETUP_EXCEPT();       
    8000f558:	0330000f          	fence	rw,rw
    8000f55c:	0003a417          	auipc	s0,0x3a
    8000f560:	ab440413          	addi	s0,s0,-1356 # 80049010 <excpt>
    8000f564:	4785                	li	a5,1
    8000f566:	0003a717          	auipc	a4,0x3a
    8000f56a:	ae073123          	sd	zero,-1310(a4) # 80049048 <excpt+0x38>
    8000f56e:	00f41023          	sh	a5,0(s0)
    8000f572:	0330000f          	fence	rw,rw
    asm volatile(
    8000f576:	00000073          	ecall
    ecall_1(); 
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000f57a:	08200593          	li	a1,130
    8000f57e:	0001b617          	auipc	a2,0x1b
    8000f582:	3ea60613          	addi	a2,a2,1002 # 8002a968 <__func__.0+0x2f08>
    8000f586:	00018517          	auipc	a0,0x18
    8000f58a:	7d250513          	addi	a0,a0,2002 # 80027d58 <__func__.0+0x2f8>
    8000f58e:	768160ef          	jal	80025cf6 <printf>
    8000f592:	6014                	ld	a3,0(s0)
    8000f594:	f0001737          	lui	a4,0xf0001
    8000f598:	0712                	slli	a4,a4,0x4
    8000f59a:	4785                	li	a5,1
    8000f59c:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f5a0:	178a                	slli	a5,a5,0x22
    8000f5a2:	8f75                	and	a4,a4,a3
    8000f5a4:	10078793          	addi	a5,a5,256
    8000f5a8:	00018597          	auipc	a1,0x18
    8000f5ac:	77858593          	addi	a1,a1,1912 # 80027d20 <__func__.0+0x2c0>
    8000f5b0:	00f70663          	beq	a4,a5,8000f5bc <priv_change_5+0x92>
    8000f5b4:	00018597          	auipc	a1,0x18
    8000f5b8:	77c58593          	addi	a1,a1,1916 # 80027d30 <__func__.0+0x2d0>
    8000f5bc:	00018517          	auipc	a0,0x18
    8000f5c0:	7b450513          	addi	a0,a0,1972 # 80027d70 <__func__.0+0x310>
    8000f5c4:	732160ef          	jal	80025cf6 <printf>
    8000f5c8:	0003a797          	auipc	a5,0x3a
    8000f5cc:	a497c783          	lbu	a5,-1463(a5) # 80049011 <excpt+0x1>
    8000f5d0:	cb81                	beqz	a5,8000f5e0 <priv_change_5+0xb6>
    8000f5d2:	0003a717          	auipc	a4,0x3a
    8000f5d6:	a4272703          	lw	a4,-1470(a4) # 80049014 <excpt+0x4>
    8000f5da:	4791                	li	a5,4
    8000f5dc:	00f70c63          	beq	a4,a5,8000f5f4 <priv_change_5+0xca>
    8000f5e0:	00018517          	auipc	a0,0x18
    8000f5e4:	79850513          	addi	a0,a0,1944 # 80027d78 <__func__.0+0x318>
    8000f5e8:	70e160ef          	jal	80025cf6 <printf>
    8000f5ec:	02900513          	li	a0,41
    8000f5f0:	510150ef          	jal	80024b00 <putchar>
    8000f5f4:	4529                	li	a0,10
    8000f5f6:	50a150ef          	jal	80024b00 <putchar>
    8000f5fa:	6014                	ld	a3,0(s0)
    8000f5fc:	f0001737          	lui	a4,0xf0001
    8000f600:	0712                	slli	a4,a4,0x4
    8000f602:	4785                	li	a5,1
    8000f604:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f608:	178a                	slli	a5,a5,0x22
    8000f60a:	8f75                	and	a4,a4,a3
    8000f60c:	10078793          	addi	a5,a5,256
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    ); 
    
    printf("niuh");
    8000f610:	0001b517          	auipc	a0,0x1b
    8000f614:	39050513          	addi	a0,a0,912 # 8002a9a0 <__func__.0+0x2f40>
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000f618:	02f70963          	beq	a4,a5,8000f64a <priv_change_5+0x120>
    printf("niuh");
    8000f61c:	6da160ef          	jal	80025cf6 <printf>
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000f620:	4401                	li	s0,0

    TEST_END();
    8000f622:	00018597          	auipc	a1,0x18
    8000f626:	70e58593          	addi	a1,a1,1806 # 80027d30 <__func__.0+0x2d0>
    8000f62a:	00018517          	auipc	a0,0x18
    8000f62e:	7ae50513          	addi	a0,a0,1966 # 80027dd8 <__func__.0+0x378>
    8000f632:	6c4160ef          	jal	80025cf6 <printf>
    8000f636:	4511                	li	a0,4
    8000f638:	dbef10ef          	jal	80000bf6 <goto_priv>
    8000f63c:	e71f10ef          	jal	800014ac <reset_state>
}
    8000f640:	60a2                	ld	ra,8(sp)
    8000f642:	8522                	mv	a0,s0
    8000f644:	6402                	ld	s0,0(sp)
    8000f646:	0141                	addi	sp,sp,16
    8000f648:	8082                	ret
    printf("niuh");
    8000f64a:	6ac160ef          	jal	80025cf6 <printf>
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000f64e:	4405                	li	s0,1
    TEST_END();
    8000f650:	00018597          	auipc	a1,0x18
    8000f654:	6d058593          	addi	a1,a1,1744 # 80027d20 <__func__.0+0x2c0>
    8000f658:	bfc9                	j	8000f62a <priv_change_5+0x100>

000000008000f65a <priv_change_6>:

bool priv_change_6(){
    8000f65a:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000f65c:	00017597          	auipc	a1,0x17
    8000f660:	21458593          	addi	a1,a1,532 # 80026870 <__func__.10>
    8000f664:	00018517          	auipc	a0,0x18
    8000f668:	6dc50513          	addi	a0,a0,1756 # 80027d40 <__func__.0+0x2e0>
bool priv_change_6(){
    8000f66c:	e406                	sd	ra,8(sp)
    8000f66e:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f670:	686160ef          	jal	80025cf6 <printf>
    8000f674:	4529                	li	a0,10
    8000f676:	48a150ef          	jal	80024b00 <putchar>


    //V=0，U模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000f67a:	4511                	li	a0,4
    8000f67c:	d7af10ef          	jal	80000bf6 <goto_priv>
    CSRW(medeleg,0);         
    8000f680:	30205073          	csrwi	medeleg,0

    goto_priv(PRIV_HU); 
    8000f684:	4505                	li	a0,1
    8000f686:	d70f10ef          	jal	80000bf6 <goto_priv>
    
    TEST_SETUP_EXCEPT();      
    8000f68a:	0330000f          	fence	rw,rw
    8000f68e:	0003a417          	auipc	s0,0x3a
    8000f692:	98240413          	addi	s0,s0,-1662 # 80049010 <excpt>
    8000f696:	4785                	li	a5,1
    8000f698:	0003a717          	auipc	a4,0x3a
    8000f69c:	9a073823          	sd	zero,-1616(a4) # 80049048 <excpt+0x38>
    8000f6a0:	00f41023          	sh	a5,0(s0)
    8000f6a4:	0330000f          	fence	rw,rw
    CSRR(CSR_MSTATUS);
    8000f6a8:	300027f3          	csrr	a5,mstatus
    TEST_ASSERT("hu trigger except that priv change to m mode when medeleg=0",         
    8000f6ac:	08200593          	li	a1,130
    8000f6b0:	0001b617          	auipc	a2,0x1b
    8000f6b4:	2f860613          	addi	a2,a2,760 # 8002a9a8 <__func__.0+0x2f48>
    8000f6b8:	00018517          	auipc	a0,0x18
    8000f6bc:	6a050513          	addi	a0,a0,1696 # 80027d58 <__func__.0+0x2f8>
    8000f6c0:	636160ef          	jal	80025cf6 <printf>
    8000f6c4:	6014                	ld	a3,0(s0)
    8000f6c6:	f0001737          	lui	a4,0xf0001
    8000f6ca:	0712                	slli	a4,a4,0x4
    8000f6cc:	4785                	li	a5,1
    8000f6ce:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f6d2:	178a                	slli	a5,a5,0x22
    8000f6d4:	8f75                	and	a4,a4,a3
    8000f6d6:	10078793          	addi	a5,a5,256
    8000f6da:	00018597          	auipc	a1,0x18
    8000f6de:	64658593          	addi	a1,a1,1606 # 80027d20 <__func__.0+0x2c0>
    8000f6e2:	00f70663          	beq	a4,a5,8000f6ee <priv_change_6+0x94>
    8000f6e6:	00018597          	auipc	a1,0x18
    8000f6ea:	64a58593          	addi	a1,a1,1610 # 80027d30 <__func__.0+0x2d0>
    8000f6ee:	00018517          	auipc	a0,0x18
    8000f6f2:	68250513          	addi	a0,a0,1666 # 80027d70 <__func__.0+0x310>
    8000f6f6:	600160ef          	jal	80025cf6 <printf>
    8000f6fa:	0003a797          	auipc	a5,0x3a
    8000f6fe:	9177c783          	lbu	a5,-1769(a5) # 80049011 <excpt+0x1>
    8000f702:	cb81                	beqz	a5,8000f712 <priv_change_6+0xb8>
    8000f704:	0003a717          	auipc	a4,0x3a
    8000f708:	91072703          	lw	a4,-1776(a4) # 80049014 <excpt+0x4>
    8000f70c:	4791                	li	a5,4
    8000f70e:	00f70c63          	beq	a4,a5,8000f726 <priv_change_6+0xcc>
    8000f712:	00018517          	auipc	a0,0x18
    8000f716:	66650513          	addi	a0,a0,1638 # 80027d78 <__func__.0+0x318>
    8000f71a:	5dc160ef          	jal	80025cf6 <printf>
    8000f71e:	02900513          	li	a0,41
    8000f722:	3de150ef          	jal	80024b00 <putchar>
    8000f726:	4529                	li	a0,10
    8000f728:	3d8150ef          	jal	80024b00 <putchar>
    8000f72c:	6014                	ld	a3,0(s0)
    8000f72e:	f0001737          	lui	a4,0xf0001
    8000f732:	0712                	slli	a4,a4,0x4
    8000f734:	4785                	li	a5,1
    8000f736:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f73a:	178a                	slli	a5,a5,0x22
    8000f73c:	8f75                	and	a4,a4,a3
    8000f73e:	10078793          	addi	a5,a5,256
    8000f742:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    );

    TEST_END();
    8000f744:	00018597          	auipc	a1,0x18
    8000f748:	5ec58593          	addi	a1,a1,1516 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hu trigger except that priv change to m mode when medeleg=0",         
    8000f74c:	00f71763          	bne	a4,a5,8000f75a <priv_change_6+0x100>
    8000f750:	4405                	li	s0,1
    TEST_END();
    8000f752:	00018597          	auipc	a1,0x18
    8000f756:	5ce58593          	addi	a1,a1,1486 # 80027d20 <__func__.0+0x2c0>
    8000f75a:	00018517          	auipc	a0,0x18
    8000f75e:	67e50513          	addi	a0,a0,1662 # 80027dd8 <__func__.0+0x378>
    8000f762:	594160ef          	jal	80025cf6 <printf>
    8000f766:	4511                	li	a0,4
    8000f768:	c8ef10ef          	jal	80000bf6 <goto_priv>
    8000f76c:	d41f10ef          	jal	800014ac <reset_state>
}
    8000f770:	60a2                	ld	ra,8(sp)
    8000f772:	8522                	mv	a0,s0
    8000f774:	6402                	ld	s0,0(sp)
    8000f776:	0141                	addi	sp,sp,16
    8000f778:	8082                	ret

000000008000f77a <priv_change_7>:

bool priv_change_7(){
    8000f77a:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000f77c:	00017597          	auipc	a1,0x17
    8000f780:	10458593          	addi	a1,a1,260 # 80026880 <__func__.9>
    8000f784:	00018517          	auipc	a0,0x18
    8000f788:	5bc50513          	addi	a0,a0,1468 # 80027d40 <__func__.0+0x2e0>
bool priv_change_7(){
    8000f78c:	e406                	sd	ra,8(sp)
    8000f78e:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f790:	566160ef          	jal	80025cf6 <printf>
    8000f794:	4529                	li	a0,10
    8000f796:	36a150ef          	jal	80024b00 <putchar>


    //V=1，VU模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000f79a:	4511                	li	a0,4
    8000f79c:	c5af10ef          	jal	80000bf6 <goto_priv>
    CSRW(medeleg,0);      
    8000f7a0:	30205073          	csrwi	medeleg,0

    goto_priv(PRIV_VU);     
    8000f7a4:	4501                	li	a0,0
    8000f7a6:	c50f10ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();        
    8000f7aa:	0330000f          	fence	rw,rw
    8000f7ae:	0003a417          	auipc	s0,0x3a
    8000f7b2:	86240413          	addi	s0,s0,-1950 # 80049010 <excpt>
    8000f7b6:	4785                	li	a5,1
    8000f7b8:	0003a717          	auipc	a4,0x3a
    8000f7bc:	88073823          	sd	zero,-1904(a4) # 80049048 <excpt+0x38>
    8000f7c0:	00f41023          	sh	a5,0(s0)
    8000f7c4:	0330000f          	fence	rw,rw
    CSRR(CSR_MSTATUS);
    8000f7c8:	300027f3          	csrr	a5,mstatus

    TEST_ASSERT("vu trigger except that priv change to m mode when medeleg=0",         
    8000f7cc:	08200593          	li	a1,130
    8000f7d0:	0001b617          	auipc	a2,0x1b
    8000f7d4:	21860613          	addi	a2,a2,536 # 8002a9e8 <__func__.0+0x2f88>
    8000f7d8:	00018517          	auipc	a0,0x18
    8000f7dc:	58050513          	addi	a0,a0,1408 # 80027d58 <__func__.0+0x2f8>
    8000f7e0:	516160ef          	jal	80025cf6 <printf>
    8000f7e4:	6014                	ld	a3,0(s0)
    8000f7e6:	f0001737          	lui	a4,0xf0001
    8000f7ea:	0712                	slli	a4,a4,0x4
    8000f7ec:	4785                	li	a5,1
    8000f7ee:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f7f2:	178a                	slli	a5,a5,0x22
    8000f7f4:	8f75                	and	a4,a4,a3
    8000f7f6:	10078793          	addi	a5,a5,256
    8000f7fa:	00018597          	auipc	a1,0x18
    8000f7fe:	52658593          	addi	a1,a1,1318 # 80027d20 <__func__.0+0x2c0>
    8000f802:	00f70663          	beq	a4,a5,8000f80e <priv_change_7+0x94>
    8000f806:	00018597          	auipc	a1,0x18
    8000f80a:	52a58593          	addi	a1,a1,1322 # 80027d30 <__func__.0+0x2d0>
    8000f80e:	00018517          	auipc	a0,0x18
    8000f812:	56250513          	addi	a0,a0,1378 # 80027d70 <__func__.0+0x310>
    8000f816:	4e0160ef          	jal	80025cf6 <printf>
    8000f81a:	00039797          	auipc	a5,0x39
    8000f81e:	7f77c783          	lbu	a5,2039(a5) # 80049011 <excpt+0x1>
    8000f822:	cb81                	beqz	a5,8000f832 <priv_change_7+0xb8>
    8000f824:	00039717          	auipc	a4,0x39
    8000f828:	7f072703          	lw	a4,2032(a4) # 80049014 <excpt+0x4>
    8000f82c:	4791                	li	a5,4
    8000f82e:	00f70c63          	beq	a4,a5,8000f846 <priv_change_7+0xcc>
    8000f832:	00018517          	auipc	a0,0x18
    8000f836:	54650513          	addi	a0,a0,1350 # 80027d78 <__func__.0+0x318>
    8000f83a:	4bc160ef          	jal	80025cf6 <printf>
    8000f83e:	02900513          	li	a0,41
    8000f842:	2be150ef          	jal	80024b00 <putchar>
    8000f846:	4529                	li	a0,10
    8000f848:	2b8150ef          	jal	80024b00 <putchar>
    8000f84c:	6014                	ld	a3,0(s0)
    8000f84e:	f0001737          	lui	a4,0xf0001
    8000f852:	0712                	slli	a4,a4,0x4
    8000f854:	4785                	li	a5,1
    8000f856:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f85a:	178a                	slli	a5,a5,0x22
    8000f85c:	8f75                	and	a4,a4,a3
    8000f85e:	10078793          	addi	a5,a5,256
    8000f862:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    );   


    TEST_END();
    8000f864:	00018597          	auipc	a1,0x18
    8000f868:	4cc58593          	addi	a1,a1,1228 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to m mode when medeleg=0",         
    8000f86c:	00f71763          	bne	a4,a5,8000f87a <priv_change_7+0x100>
    8000f870:	4405                	li	s0,1
    TEST_END();
    8000f872:	00018597          	auipc	a1,0x18
    8000f876:	4ae58593          	addi	a1,a1,1198 # 80027d20 <__func__.0+0x2c0>
    8000f87a:	00018517          	auipc	a0,0x18
    8000f87e:	55e50513          	addi	a0,a0,1374 # 80027dd8 <__func__.0+0x378>
    8000f882:	474160ef          	jal	80025cf6 <printf>
    8000f886:	4511                	li	a0,4
    8000f888:	b6ef10ef          	jal	80000bf6 <goto_priv>
    8000f88c:	c21f10ef          	jal	800014ac <reset_state>
}
    8000f890:	60a2                	ld	ra,8(sp)
    8000f892:	8522                	mv	a0,s0
    8000f894:	6402                	ld	s0,0(sp)
    8000f896:	0141                	addi	sp,sp,16
    8000f898:	8082                	ret

000000008000f89a <priv_change_8>:

bool priv_change_8(){
    8000f89a:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000f89c:	00017597          	auipc	a1,0x17
    8000f8a0:	ff458593          	addi	a1,a1,-12 # 80026890 <__func__.8>
    8000f8a4:	00018517          	auipc	a0,0x18
    8000f8a8:	49c50513          	addi	a0,a0,1180 # 80027d40 <__func__.0+0x2e0>
bool priv_change_8(){
    8000f8ac:	e406                	sd	ra,8(sp)
    8000f8ae:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f8b0:	446160ef          	jal	80025cf6 <printf>
    8000f8b4:	4529                	li	a0,10
    8000f8b6:	24a150ef          	jal	80024b00 <putchar>


    //V=1，VU模式下发生异常，关闭代理，切换到M态处理异常，异常结束执行mret恢复到VU态
    goto_priv(PRIV_M);
    8000f8ba:	4511                	li	a0,4
    8000f8bc:	b3af10ef          	jal	80000bf6 <goto_priv>
    reset_state();
    8000f8c0:	bedf10ef          	jal	800014ac <reset_state>
    CSRW(medeleg,0);
    8000f8c4:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    8000f8c8:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000f8cc:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000f8d0:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_VU);     
    8000f8d4:	4501                	li	a0,0
    8000f8d6:	b20f10ef          	jal	80000bf6 <goto_priv>
    
    TEST_SETUP_EXCEPT();        
    8000f8da:	0330000f          	fence	rw,rw
    8000f8de:	00039417          	auipc	s0,0x39
    8000f8e2:	73240413          	addi	s0,s0,1842 # 80049010 <excpt>
    8000f8e6:	4785                	li	a5,1
    8000f8e8:	00039717          	auipc	a4,0x39
    8000f8ec:	76073023          	sd	zero,1888(a4) # 80049048 <excpt+0x38>
    8000f8f0:	00f41023          	sh	a5,0(s0)
    8000f8f4:	0330000f          	fence	rw,rw
    CSRW(medeleg, 0); 
    8000f8f8:	30205073          	csrwi	medeleg,0
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000f8fc:	08200593          	li	a1,130
    8000f900:	0001b617          	auipc	a2,0x1b
    8000f904:	12860613          	addi	a2,a2,296 # 8002aa28 <__func__.0+0x2fc8>
    8000f908:	00018517          	auipc	a0,0x18
    8000f90c:	45050513          	addi	a0,a0,1104 # 80027d58 <__func__.0+0x2f8>
    8000f910:	3e6160ef          	jal	80025cf6 <printf>
    8000f914:	6014                	ld	a3,0(s0)
    8000f916:	f0001737          	lui	a4,0xf0001
    8000f91a:	0712                	slli	a4,a4,0x4
    8000f91c:	4785                	li	a5,1
    8000f91e:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f922:	178a                	slli	a5,a5,0x22
    8000f924:	8f75                	and	a4,a4,a3
    8000f926:	10078793          	addi	a5,a5,256
    8000f92a:	00018597          	auipc	a1,0x18
    8000f92e:	40658593          	addi	a1,a1,1030 # 80027d30 <__func__.0+0x2d0>
    8000f932:	08f70963          	beq	a4,a5,8000f9c4 <priv_change_8+0x12a>
    8000f936:	00018517          	auipc	a0,0x18
    8000f93a:	43a50513          	addi	a0,a0,1082 # 80027d70 <__func__.0+0x310>
    8000f93e:	3b8160ef          	jal	80025cf6 <printf>
    8000f942:	00039797          	auipc	a5,0x39
    8000f946:	6cf7c783          	lbu	a5,1743(a5) # 80049011 <excpt+0x1>
    8000f94a:	cb81                	beqz	a5,8000f95a <priv_change_8+0xc0>
    8000f94c:	00039717          	auipc	a4,0x39
    8000f950:	6c872703          	lw	a4,1736(a4) # 80049014 <excpt+0x4>
    8000f954:	4791                	li	a5,4
    8000f956:	06f70163          	beq	a4,a5,8000f9b8 <priv_change_8+0x11e>
    8000f95a:	00018517          	auipc	a0,0x18
    8000f95e:	41e50513          	addi	a0,a0,1054 # 80027d78 <__func__.0+0x318>
    8000f962:	394160ef          	jal	80025cf6 <printf>
    8000f966:	02900513          	li	a0,41
    8000f96a:	196150ef          	jal	80024b00 <putchar>
    8000f96e:	4529                	li	a0,10
    8000f970:	190150ef          	jal	80024b00 <putchar>
    8000f974:	6014                	ld	a3,0(s0)
    8000f976:	f0001737          	lui	a4,0xf0001
    8000f97a:	0712                	slli	a4,a4,0x4
    8000f97c:	4785                	li	a5,1
    8000f97e:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f982:	178a                	slli	a5,a5,0x22
    8000f984:	8f75                	and	a4,a4,a3
    8000f986:	10078793          	addi	a5,a5,256
    8000f98a:	4401                	li	s0,0
        curr_priv == PRIV_VU
    );



    TEST_END();
    8000f98c:	00018597          	auipc	a1,0x18
    8000f990:	3a458593          	addi	a1,a1,932 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000f994:	04f70663          	beq	a4,a5,8000f9e0 <priv_change_8+0x146>
    TEST_END();
    8000f998:	00018517          	auipc	a0,0x18
    8000f99c:	44050513          	addi	a0,a0,1088 # 80027dd8 <__func__.0+0x378>
    8000f9a0:	356160ef          	jal	80025cf6 <printf>
    8000f9a4:	4511                	li	a0,4
    8000f9a6:	a50f10ef          	jal	80000bf6 <goto_priv>
    8000f9aa:	b03f10ef          	jal	800014ac <reset_state>
}
    8000f9ae:	60a2                	ld	ra,8(sp)
    8000f9b0:	8522                	mv	a0,s0
    8000f9b2:	6402                	ld	s0,0(sp)
    8000f9b4:	0141                	addi	sp,sp,16
    8000f9b6:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000f9b8:	00023797          	auipc	a5,0x23
    8000f9bc:	ae47a783          	lw	a5,-1308(a5) # 8003249c <curr_priv>
    8000f9c0:	d7dd                	beqz	a5,8000f96e <priv_change_8+0xd4>
    8000f9c2:	bf61                	j	8000f95a <priv_change_8+0xc0>
    8000f9c4:	00023797          	auipc	a5,0x23
    8000f9c8:	ad87a783          	lw	a5,-1320(a5) # 8003249c <curr_priv>
    8000f9cc:	00018597          	auipc	a1,0x18
    8000f9d0:	35458593          	addi	a1,a1,852 # 80027d20 <__func__.0+0x2c0>
    8000f9d4:	d3ad                	beqz	a5,8000f936 <priv_change_8+0x9c>
    8000f9d6:	00018597          	auipc	a1,0x18
    8000f9da:	35a58593          	addi	a1,a1,858 # 80027d30 <__func__.0+0x2d0>
    8000f9de:	bfa1                	j	8000f936 <priv_change_8+0x9c>
    8000f9e0:	00023797          	auipc	a5,0x23
    8000f9e4:	abc7a783          	lw	a5,-1348(a5) # 8003249c <curr_priv>
    8000f9e8:	fbc5                	bnez	a5,8000f998 <priv_change_8+0xfe>
    8000f9ea:	4405                	li	s0,1
    TEST_END();
    8000f9ec:	00018597          	auipc	a1,0x18
    8000f9f0:	33458593          	addi	a1,a1,820 # 80027d20 <__func__.0+0x2c0>
    8000f9f4:	b755                	j	8000f998 <priv_change_8+0xfe>

000000008000f9f6 <priv_change_9>:
    /*
    当异常代理到了hs模式，那么处理的时候就会用hshandler处理。
    当想去m模式，会ecall，进入异常，但是去m模式需要mhandler才能过去，在hs模式下去处理这类异常是不行的，可是由于开启了异常代理，然后就一直循环执行hshandler出错。
    因此在开启异常代理后，不能在后面执行goto_priv(PRIV_M);否则会无限循环出错
    */
bool priv_change_9(){
    8000f9f6:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f9f8:	00017597          	auipc	a1,0x17
    8000f9fc:	ea858593          	addi	a1,a1,-344 # 800268a0 <__func__.7>
    8000fa00:	00018517          	auipc	a0,0x18
    8000fa04:	34050513          	addi	a0,a0,832 # 80027d40 <__func__.0+0x2e0>
bool priv_change_9(){
    8000fa08:	e406                	sd	ra,8(sp)
    8000fa0a:	e022                	sd	s0,0(sp)
    TEST_START();
    8000fa0c:	2ea160ef          	jal	80025cf6 <printf>
    8000fa10:	4529                	li	a0,10
    8000fa12:	0ee150ef          	jal	80024b00 <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，打开代理hedeleg/hideleg，切换到VS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000fa16:	4511                	li	a0,4
    8000fa18:	9def10ef          	jal	80000bf6 <goto_priv>
    CSRW(medeleg,(uint64_t)-1);
    8000fa1c:	57fd                	li	a5,-1
    8000fa1e:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000fa22:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000fa26:	60379073          	csrw	hideleg,a5
    CSRW(CSR_HEDELEG,(uint64_t)-1);   
    8000fa2a:	60279073          	csrw	hedeleg,a5

    goto_priv(PRIV_VU);     
    8000fa2e:	4501                	li	a0,0
    8000fa30:	9c6f10ef          	jal	80000bf6 <goto_priv>
    
    TEST_SETUP_EXCEPT();        
    8000fa34:	0330000f          	fence	rw,rw
    8000fa38:	00039417          	auipc	s0,0x39
    8000fa3c:	5d840413          	addi	s0,s0,1496 # 80049010 <excpt>
    8000fa40:	4785                	li	a5,1
    8000fa42:	00039717          	auipc	a4,0x39
    8000fa46:	60073323          	sd	zero,1542(a4) # 80049048 <excpt+0x38>
    8000fa4a:	00f41023          	sh	a5,0(s0)
    8000fa4e:	0330000f          	fence	rw,rw
    CSRR(CSR_MSTATUS);
    8000fa52:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000fa56:	08200593          	li	a1,130
    8000fa5a:	0001b617          	auipc	a2,0x1b
    8000fa5e:	03e60613          	addi	a2,a2,62 # 8002aa98 <__func__.0+0x3038>
    8000fa62:	00018517          	auipc	a0,0x18
    8000fa66:	2f650513          	addi	a0,a0,758 # 80027d58 <__func__.0+0x2f8>
    8000fa6a:	28c160ef          	jal	80025cf6 <printf>
    8000fa6e:	6014                	ld	a3,0(s0)
    8000fa70:	f0001737          	lui	a4,0xf0001
    8000fa74:	0712                	slli	a4,a4,0x4
    8000fa76:	4785                	li	a5,1
    8000fa78:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000fa7c:	1786                	slli	a5,a5,0x21
    8000fa7e:	8f75                	and	a4,a4,a3
    8000fa80:	10078793          	addi	a5,a5,256
    8000fa84:	00018597          	auipc	a1,0x18
    8000fa88:	2ac58593          	addi	a1,a1,684 # 80027d30 <__func__.0+0x2d0>
    8000fa8c:	08f70263          	beq	a4,a5,8000fb10 <priv_change_9+0x11a>
    8000fa90:	00018517          	auipc	a0,0x18
    8000fa94:	2e050513          	addi	a0,a0,736 # 80027d70 <__func__.0+0x310>
    8000fa98:	25e160ef          	jal	80025cf6 <printf>
    8000fa9c:	00039797          	auipc	a5,0x39
    8000faa0:	5757c783          	lbu	a5,1397(a5) # 80049011 <excpt+0x1>
    8000faa4:	cb81                	beqz	a5,8000fab4 <priv_change_9+0xbe>
    8000faa6:	00039717          	auipc	a4,0x39
    8000faaa:	56e72703          	lw	a4,1390(a4) # 80049014 <excpt+0x4>
    8000faae:	4789                	li	a5,2
    8000fab0:	04f70a63          	beq	a4,a5,8000fb04 <priv_change_9+0x10e>
    8000fab4:	00018517          	auipc	a0,0x18
    8000fab8:	2c450513          	addi	a0,a0,708 # 80027d78 <__func__.0+0x318>
    8000fabc:	23a160ef          	jal	80025cf6 <printf>
    8000fac0:	02900513          	li	a0,41
    8000fac4:	03c150ef          	jal	80024b00 <putchar>
    8000fac8:	4529                	li	a0,10
    8000faca:	036150ef          	jal	80024b00 <putchar>
    8000face:	6014                	ld	a3,0(s0)
    8000fad0:	f0001737          	lui	a4,0xf0001
    8000fad4:	0712                	slli	a4,a4,0x4
    8000fad6:	4785                	li	a5,1
    8000fad8:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000fadc:	1786                	slli	a5,a5,0x21
    8000fade:	8f75                	and	a4,a4,a3
    8000fae0:	10078793          	addi	a5,a5,256
        curr_priv == PRIV_VU
    );


    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000fae4:	00018597          	auipc	a1,0x18
    8000fae8:	24c58593          	addi	a1,a1,588 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000faec:	04f70063          	beq	a4,a5,8000fb2c <priv_change_9+0x136>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000faf0:	00018517          	auipc	a0,0x18
    8000faf4:	2e850513          	addi	a0,a0,744 # 80027dd8 <__func__.0+0x378>
    8000faf8:	1fe160ef          	jal	80025cf6 <printf>
    }
}
    8000fafc:	60a2                	ld	ra,8(sp)
    8000fafe:	6402                	ld	s0,0(sp)
    8000fb00:	0141                	addi	sp,sp,16
    8000fb02:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000fb04:	00023797          	auipc	a5,0x23
    8000fb08:	9987a783          	lw	a5,-1640(a5) # 8003249c <curr_priv>
    8000fb0c:	dfd5                	beqz	a5,8000fac8 <priv_change_9+0xd2>
    8000fb0e:	b75d                	j	8000fab4 <priv_change_9+0xbe>
    8000fb10:	00023797          	auipc	a5,0x23
    8000fb14:	98c7a783          	lw	a5,-1652(a5) # 8003249c <curr_priv>
    8000fb18:	00018597          	auipc	a1,0x18
    8000fb1c:	20858593          	addi	a1,a1,520 # 80027d20 <__func__.0+0x2c0>
    8000fb20:	dba5                	beqz	a5,8000fa90 <priv_change_9+0x9a>
    8000fb22:	00018597          	auipc	a1,0x18
    8000fb26:	20e58593          	addi	a1,a1,526 # 80027d30 <__func__.0+0x2d0>
    8000fb2a:	b79d                	j	8000fa90 <priv_change_9+0x9a>
    8000fb2c:	00023797          	auipc	a5,0x23
    8000fb30:	9707a783          	lw	a5,-1680(a5) # 8003249c <curr_priv>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000fb34:	00018597          	auipc	a1,0x18
    8000fb38:	1ec58593          	addi	a1,a1,492 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000fb3c:	dbd5                	beqz	a5,8000faf0 <priv_change_9+0xfa>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000fb3e:	00018597          	auipc	a1,0x18
    8000fb42:	1f258593          	addi	a1,a1,498 # 80027d30 <__func__.0+0x2d0>
    8000fb46:	00018517          	auipc	a0,0x18
    8000fb4a:	29250513          	addi	a0,a0,658 # 80027dd8 <__func__.0+0x378>
    8000fb4e:	1a8160ef          	jal	80025cf6 <printf>
}
    8000fb52:	60a2                	ld	ra,8(sp)
    8000fb54:	6402                	ld	s0,0(sp)
    8000fb56:	0141                	addi	sp,sp,16
    8000fb58:	8082                	ret

000000008000fb5a <priv_change_10>:


bool priv_change_10(){
    8000fb5a:	1101                	addi	sp,sp,-32
    TEST_START();
    8000fb5c:	00017597          	auipc	a1,0x17
    8000fb60:	d5458593          	addi	a1,a1,-684 # 800268b0 <__func__.6>
    8000fb64:	00018517          	auipc	a0,0x18
    8000fb68:	1dc50513          	addi	a0,a0,476 # 80027d40 <__func__.0+0x2e0>
bool priv_change_10(){
    8000fb6c:	ec06                	sd	ra,24(sp)
    8000fb6e:	e822                	sd	s0,16(sp)
    8000fb70:	e426                	sd	s1,8(sp)
    TEST_START();
    8000fb72:	184160ef          	jal	80025cf6 <printf>
    8000fb76:	4529                	li	a0,10
    8000fb78:	789140ef          	jal	80024b00 <putchar>


    //V=0，U模式下发生异常，打开代理medeleg/mideleg，切换到HS态处理异常，异常处理结束执行sret恢复到U态
    goto_priv(PRIV_M);
    8000fb7c:	4511                	li	a0,4
    8000fb7e:	878f10ef          	jal	80000bf6 <goto_priv>
    reset_state();
    8000fb82:	92bf10ef          	jal	800014ac <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000fb86:	57fd                	li	a5,-1
    8000fb88:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000fb8c:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000fb90:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000fb94:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_HU);     
    8000fb98:	4505                	li	a0,1
    8000fb9a:	85cf10ef          	jal	80000bf6 <goto_priv>
    
    TEST_SETUP_EXCEPT();        
    8000fb9e:	0330000f          	fence	rw,rw
    8000fba2:	00039417          	auipc	s0,0x39
    8000fba6:	46e40413          	addi	s0,s0,1134 # 80049010 <excpt>
    8000fbaa:	4485                	li	s1,1
    8000fbac:	00039797          	auipc	a5,0x39
    8000fbb0:	4807be23          	sd	zero,1180(a5) # 80049048 <excpt+0x38>
    8000fbb4:	00941023          	sh	s1,0(s0)
    8000fbb8:	0330000f          	fence	rw,rw
    CSRR(CSR_MSTATUS);
    8000fbbc:	300027f3          	csrr	a5,mstatus

    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000fbc0:	08200593          	li	a1,130
    8000fbc4:	0001b617          	auipc	a2,0x1b
    8000fbc8:	f4460613          	addi	a2,a2,-188 # 8002ab08 <__func__.0+0x30a8>
    8000fbcc:	00018517          	auipc	a0,0x18
    8000fbd0:	18c50513          	addi	a0,a0,396 # 80027d58 <__func__.0+0x2f8>
    8000fbd4:	122160ef          	jal	80025cf6 <printf>
    8000fbd8:	6014                	ld	a3,0(s0)
    8000fbda:	f0001737          	lui	a4,0xf0001
    8000fbde:	0712                	slli	a4,a4,0x4
    8000fbe0:	478d                	li	a5,3
    8000fbe2:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000fbe6:	1782                	slli	a5,a5,0x20
    8000fbe8:	8f75                	and	a4,a4,a3
    8000fbea:	10078793          	addi	a5,a5,256
    8000fbee:	00018597          	auipc	a1,0x18
    8000fbf2:	14258593          	addi	a1,a1,322 # 80027d30 <__func__.0+0x2d0>
    8000fbf6:	08f70563          	beq	a4,a5,8000fc80 <priv_change_10+0x126>
    8000fbfa:	00018517          	auipc	a0,0x18
    8000fbfe:	17650513          	addi	a0,a0,374 # 80027d70 <__func__.0+0x310>
    8000fc02:	0f4160ef          	jal	80025cf6 <printf>
    8000fc06:	00039797          	auipc	a5,0x39
    8000fc0a:	40b7c783          	lbu	a5,1035(a5) # 80049011 <excpt+0x1>
    8000fc0e:	cb81                	beqz	a5,8000fc1e <priv_change_10+0xc4>
    8000fc10:	00039717          	auipc	a4,0x39
    8000fc14:	40472703          	lw	a4,1028(a4) # 80049014 <excpt+0x4>
    8000fc18:	478d                	li	a5,3
    8000fc1a:	04f70b63          	beq	a4,a5,8000fc70 <priv_change_10+0x116>
    8000fc1e:	00018517          	auipc	a0,0x18
    8000fc22:	15a50513          	addi	a0,a0,346 # 80027d78 <__func__.0+0x318>
    8000fc26:	0d0160ef          	jal	80025cf6 <printf>
    8000fc2a:	02900513          	li	a0,41
    8000fc2e:	6d3140ef          	jal	80024b00 <putchar>
    8000fc32:	4529                	li	a0,10
    8000fc34:	6cd140ef          	jal	80024b00 <putchar>
    8000fc38:	6014                	ld	a3,0(s0)
    8000fc3a:	f0001737          	lui	a4,0xf0001
    8000fc3e:	0712                	slli	a4,a4,0x4
    8000fc40:	478d                	li	a5,3
    8000fc42:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000fc46:	1782                	slli	a5,a5,0x20
    8000fc48:	8f75                	and	a4,a4,a3
    8000fc4a:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_HU
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000fc4e:	00018597          	auipc	a1,0x18
    8000fc52:	0e258593          	addi	a1,a1,226 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000fc56:	04f70463          	beq	a4,a5,8000fc9e <priv_change_10+0x144>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000fc5a:	00018517          	auipc	a0,0x18
    8000fc5e:	17e50513          	addi	a0,a0,382 # 80027dd8 <__func__.0+0x378>
    8000fc62:	094160ef          	jal	80025cf6 <printf>
    }
}
    8000fc66:	60e2                	ld	ra,24(sp)
    8000fc68:	6442                	ld	s0,16(sp)
    8000fc6a:	64a2                	ld	s1,8(sp)
    8000fc6c:	6105                	addi	sp,sp,32
    8000fc6e:	8082                	ret
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000fc70:	00023717          	auipc	a4,0x23
    8000fc74:	82c72703          	lw	a4,-2004(a4) # 8003249c <curr_priv>
    8000fc78:	4785                	li	a5,1
    8000fc7a:	faf712e3          	bne	a4,a5,8000fc1e <priv_change_10+0xc4>
    8000fc7e:	bf55                	j	8000fc32 <priv_change_10+0xd8>
    8000fc80:	00023797          	auipc	a5,0x23
    8000fc84:	81c7a783          	lw	a5,-2020(a5) # 8003249c <curr_priv>
    8000fc88:	00018597          	auipc	a1,0x18
    8000fc8c:	09858593          	addi	a1,a1,152 # 80027d20 <__func__.0+0x2c0>
    8000fc90:	f69785e3          	beq	a5,s1,8000fbfa <priv_change_10+0xa0>
    8000fc94:	00018597          	auipc	a1,0x18
    8000fc98:	09c58593          	addi	a1,a1,156 # 80027d30 <__func__.0+0x2d0>
    8000fc9c:	bfb9                	j	8000fbfa <priv_change_10+0xa0>
    8000fc9e:	00022717          	auipc	a4,0x22
    8000fca2:	7fe72703          	lw	a4,2046(a4) # 8003249c <curr_priv>
    8000fca6:	4785                	li	a5,1
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000fca8:	00018597          	auipc	a1,0x18
    8000fcac:	07858593          	addi	a1,a1,120 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000fcb0:	faf705e3          	beq	a4,a5,8000fc5a <priv_change_10+0x100>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000fcb4:	00018597          	auipc	a1,0x18
    8000fcb8:	07c58593          	addi	a1,a1,124 # 80027d30 <__func__.0+0x2d0>
    8000fcbc:	00018517          	auipc	a0,0x18
    8000fcc0:	11c50513          	addi	a0,a0,284 # 80027dd8 <__func__.0+0x378>
    8000fcc4:	032160ef          	jal	80025cf6 <printf>
}
    8000fcc8:	60e2                	ld	ra,24(sp)
    8000fcca:	6442                	ld	s0,16(sp)
    8000fccc:	64a2                	ld	s1,8(sp)
    8000fcce:	6105                	addi	sp,sp,32
    8000fcd0:	8082                	ret

000000008000fcd2 <priv_change_11>:


bool priv_change_11(){
    8000fcd2:	1141                	addi	sp,sp,-16
    TEST_START();
    8000fcd4:	00017597          	auipc	a1,0x17
    8000fcd8:	bec58593          	addi	a1,a1,-1044 # 800268c0 <__func__.5>
    8000fcdc:	00018517          	auipc	a0,0x18
    8000fce0:	06450513          	addi	a0,a0,100 # 80027d40 <__func__.0+0x2e0>
bool priv_change_11(){
    8000fce4:	e406                	sd	ra,8(sp)
    8000fce6:	e022                	sd	s0,0(sp)
    TEST_START();
    8000fce8:	00e160ef          	jal	80025cf6 <printf>
    8000fcec:	4529                	li	a0,10
    8000fcee:	613140ef          	jal	80024b00 <putchar>

    //V=1，VS模式下发生异常，打开代理medeleg/mideleg，打开代理hedeleg/hideleg，切换到VS态处理异常
    goto_priv(PRIV_M);
    8000fcf2:	4511                	li	a0,4
    8000fcf4:	f03f00ef          	jal	80000bf6 <goto_priv>
    reset_state();
    8000fcf8:	fb4f10ef          	jal	800014ac <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000fcfc:	57fd                	li	a5,-1
    8000fcfe:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000fd02:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000fd06:	60379073          	csrw	hideleg,a5
    CSRW(CSR_HEDELEG,(uint64_t)-1);   
    8000fd0a:	60279073          	csrw	hedeleg,a5

    goto_priv(PRIV_VS);    
    8000fd0e:	4509                	li	a0,2
    8000fd10:	ee7f00ef          	jal	80000bf6 <goto_priv>
    

    TEST_SETUP_EXCEPT();        
    8000fd14:	0330000f          	fence	rw,rw
    8000fd18:	00039417          	auipc	s0,0x39
    8000fd1c:	2f840413          	addi	s0,s0,760 # 80049010 <excpt>
    8000fd20:	4785                	li	a5,1
    8000fd22:	00039717          	auipc	a4,0x39
    8000fd26:	32073323          	sd	zero,806(a4) # 80049048 <excpt+0x38>
    8000fd2a:	00f41023          	sh	a5,0(s0)
    8000fd2e:	0330000f          	fence	rw,rw
    CSRW(medeleg, 0); 
    8000fd32:	30205073          	csrwi	medeleg,0
    TEST_ASSERT("vs trigger except that priv no change  when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000fd36:	08200593          	li	a1,130
    8000fd3a:	0001b617          	auipc	a2,0x1b
    8000fd3e:	e3e60613          	addi	a2,a2,-450 # 8002ab78 <__func__.0+0x3118>
    8000fd42:	00018517          	auipc	a0,0x18
    8000fd46:	01650513          	addi	a0,a0,22 # 80027d58 <__func__.0+0x2f8>
    8000fd4a:	7ad150ef          	jal	80025cf6 <printf>
    8000fd4e:	6014                	ld	a3,0(s0)
    8000fd50:	f0001737          	lui	a4,0xf0001
    8000fd54:	0712                	slli	a4,a4,0x4
    8000fd56:	4785                	li	a5,1
    8000fd58:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000fd5c:	1786                	slli	a5,a5,0x21
    8000fd5e:	8f75                	and	a4,a4,a3
    8000fd60:	10078793          	addi	a5,a5,256
    8000fd64:	00018597          	auipc	a1,0x18
    8000fd68:	fbc58593          	addi	a1,a1,-68 # 80027d20 <__func__.0+0x2c0>
    8000fd6c:	00f70663          	beq	a4,a5,8000fd78 <priv_change_11+0xa6>
    8000fd70:	00018597          	auipc	a1,0x18
    8000fd74:	fc058593          	addi	a1,a1,-64 # 80027d30 <__func__.0+0x2d0>
    8000fd78:	00018517          	auipc	a0,0x18
    8000fd7c:	ff850513          	addi	a0,a0,-8 # 80027d70 <__func__.0+0x310>
    8000fd80:	777150ef          	jal	80025cf6 <printf>
    8000fd84:	00039797          	auipc	a5,0x39
    8000fd88:	28d7c783          	lbu	a5,653(a5) # 80049011 <excpt+0x1>
    8000fd8c:	cb81                	beqz	a5,8000fd9c <priv_change_11+0xca>
    8000fd8e:	00039717          	auipc	a4,0x39
    8000fd92:	28672703          	lw	a4,646(a4) # 80049014 <excpt+0x4>
    8000fd96:	4789                	li	a5,2
    8000fd98:	00f70c63          	beq	a4,a5,8000fdb0 <priv_change_11+0xde>
    8000fd9c:	00018517          	auipc	a0,0x18
    8000fda0:	fdc50513          	addi	a0,a0,-36 # 80027d78 <__func__.0+0x318>
    8000fda4:	753150ef          	jal	80025cf6 <printf>
    8000fda8:	02900513          	li	a0,41
    8000fdac:	555140ef          	jal	80024b00 <putchar>
    8000fdb0:	4529                	li	a0,10
    8000fdb2:	54f140ef          	jal	80024b00 <putchar>
    8000fdb6:	6014                	ld	a3,0(s0)
    8000fdb8:	f0001737          	lui	a4,0xf0001
    8000fdbc:	0712                	slli	a4,a4,0x4
    8000fdbe:	4785                	li	a5,1
    8000fdc0:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000fdc4:	1786                	slli	a5,a5,0x21
    8000fdc6:	8f75                	and	a4,a4,a3
    8000fdc8:	10078793          	addi	a5,a5,256
        excpt.priv==PRIV_VS
    ); 


    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000fdcc:	00018597          	auipc	a1,0x18
    8000fdd0:	f6458593          	addi	a1,a1,-156 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs trigger except that priv no change  when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000fdd4:	00f71663          	bne	a4,a5,8000fde0 <priv_change_11+0x10e>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000fdd8:	00018597          	auipc	a1,0x18
    8000fddc:	f4858593          	addi	a1,a1,-184 # 80027d20 <__func__.0+0x2c0>
    8000fde0:	00018517          	auipc	a0,0x18
    8000fde4:	ff850513          	addi	a0,a0,-8 # 80027dd8 <__func__.0+0x378>
    8000fde8:	70f150ef          	jal	80025cf6 <printf>
    }
}
    8000fdec:	60a2                	ld	ra,8(sp)
    8000fdee:	6402                	ld	s0,0(sp)
    8000fdf0:	0141                	addi	sp,sp,16
    8000fdf2:	8082                	ret

000000008000fdf4 <priv_change_12>:



bool priv_change_12(){
    8000fdf4:	1141                	addi	sp,sp,-16
    TEST_START();
    8000fdf6:	00017597          	auipc	a1,0x17
    8000fdfa:	ada58593          	addi	a1,a1,-1318 # 800268d0 <__func__.4>
    8000fdfe:	00018517          	auipc	a0,0x18
    8000fe02:	f4250513          	addi	a0,a0,-190 # 80027d40 <__func__.0+0x2e0>
bool priv_change_12(){
    8000fe06:	e406                	sd	ra,8(sp)
    8000fe08:	e022                	sd	s0,0(sp)
    TEST_START();
    8000fe0a:	6ed150ef          	jal	80025cf6 <printf>
    8000fe0e:	4529                	li	a0,10
    8000fe10:	4f1140ef          	jal	80024b00 <putchar>



    //V=0，HS模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常

    goto_priv(PRIV_M);     
    8000fe14:	4511                	li	a0,4
    8000fe16:	de1f00ef          	jal	80000bf6 <goto_priv>
    CSRW(medeleg,(uint64_t)-1);
    8000fe1a:	57fd                	li	a5,-1
    8000fe1c:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000fe20:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000fe24:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000fe28:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_HS);
    8000fe2c:	450d                	li	a0,3
    8000fe2e:	dc9f00ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();        
    8000fe32:	0330000f          	fence	rw,rw
    8000fe36:	00039417          	auipc	s0,0x39
    8000fe3a:	1da40413          	addi	s0,s0,474 # 80049010 <excpt>
    8000fe3e:	4785                	li	a5,1
    8000fe40:	00039717          	auipc	a4,0x39
    8000fe44:	20073423          	sd	zero,520(a4) # 80049048 <excpt+0x38>
    8000fe48:	00f41023          	sh	a5,0(s0)
    8000fe4c:	0330000f          	fence	rw,rw
    CSRR(CSR_MSTATUS);
    8000fe50:	300027f3          	csrr	a5,mstatus
    TEST_ASSERT("hs trigger except that priv no change when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000fe54:	08200593          	li	a1,130
    8000fe58:	0001b617          	auipc	a2,0x1b
    8000fe5c:	d7860613          	addi	a2,a2,-648 # 8002abd0 <__func__.0+0x3170>
    8000fe60:	00018517          	auipc	a0,0x18
    8000fe64:	ef850513          	addi	a0,a0,-264 # 80027d58 <__func__.0+0x2f8>
    8000fe68:	68f150ef          	jal	80025cf6 <printf>
    8000fe6c:	6014                	ld	a3,0(s0)
    8000fe6e:	f0001737          	lui	a4,0xf0001
    8000fe72:	0712                	slli	a4,a4,0x4
    8000fe74:	478d                	li	a5,3
    8000fe76:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000fe7a:	1782                	slli	a5,a5,0x20
    8000fe7c:	8f75                	and	a4,a4,a3
    8000fe7e:	10078793          	addi	a5,a5,256
    8000fe82:	00018597          	auipc	a1,0x18
    8000fe86:	e9e58593          	addi	a1,a1,-354 # 80027d20 <__func__.0+0x2c0>
    8000fe8a:	00f70663          	beq	a4,a5,8000fe96 <priv_change_12+0xa2>
    8000fe8e:	00018597          	auipc	a1,0x18
    8000fe92:	ea258593          	addi	a1,a1,-350 # 80027d30 <__func__.0+0x2d0>
    8000fe96:	00018517          	auipc	a0,0x18
    8000fe9a:	eda50513          	addi	a0,a0,-294 # 80027d70 <__func__.0+0x310>
    8000fe9e:	659150ef          	jal	80025cf6 <printf>
    8000fea2:	00039797          	auipc	a5,0x39
    8000fea6:	16f7c783          	lbu	a5,367(a5) # 80049011 <excpt+0x1>
    8000feaa:	cb81                	beqz	a5,8000feba <priv_change_12+0xc6>
    8000feac:	00039717          	auipc	a4,0x39
    8000feb0:	16872703          	lw	a4,360(a4) # 80049014 <excpt+0x4>
    8000feb4:	478d                	li	a5,3
    8000feb6:	00f70c63          	beq	a4,a5,8000fece <priv_change_12+0xda>
    8000feba:	00018517          	auipc	a0,0x18
    8000febe:	ebe50513          	addi	a0,a0,-322 # 80027d78 <__func__.0+0x318>
    8000fec2:	635150ef          	jal	80025cf6 <printf>
    8000fec6:	02900513          	li	a0,41
    8000feca:	437140ef          	jal	80024b00 <putchar>
    8000fece:	4529                	li	a0,10
    8000fed0:	431140ef          	jal	80024b00 <putchar>
    8000fed4:	6014                	ld	a3,0(s0)
    8000fed6:	f0001737          	lui	a4,0xf0001
    8000feda:	0712                	slli	a4,a4,0x4
    8000fedc:	478d                	li	a5,3
    8000fede:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000fee2:	1782                	slli	a5,a5,0x20
    8000fee4:	8f75                	and	a4,a4,a3
    8000fee6:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS
    ); 


    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000feea:	00018597          	auipc	a1,0x18
    8000feee:	e4658593          	addi	a1,a1,-442 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs trigger except that priv no change when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000fef2:	00f71663          	bne	a4,a5,8000fefe <priv_change_12+0x10a>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000fef6:	00018597          	auipc	a1,0x18
    8000fefa:	e2a58593          	addi	a1,a1,-470 # 80027d20 <__func__.0+0x2c0>
    8000fefe:	00018517          	auipc	a0,0x18
    8000ff02:	eda50513          	addi	a0,a0,-294 # 80027dd8 <__func__.0+0x378>
    8000ff06:	5f1150ef          	jal	80025cf6 <printf>
    }

}
    8000ff0a:	60a2                	ld	ra,8(sp)
    8000ff0c:	6402                	ld	s0,0(sp)
    8000ff0e:	0141                	addi	sp,sp,16
    8000ff10:	8082                	ret

000000008000ff12 <priv_change_13>:

bool priv_change_13(){
    8000ff12:	1141                	addi	sp,sp,-16
    TEST_START();
    8000ff14:	00017597          	auipc	a1,0x17
    8000ff18:	9cc58593          	addi	a1,a1,-1588 # 800268e0 <__func__.3>
    8000ff1c:	00018517          	auipc	a0,0x18
    8000ff20:	e2450513          	addi	a0,a0,-476 # 80027d40 <__func__.0+0x2e0>
bool priv_change_13(){
    8000ff24:	e406                	sd	ra,8(sp)
    8000ff26:	e022                	sd	s0,0(sp)
    TEST_START();
    8000ff28:	5cf150ef          	jal	80025cf6 <printf>
    8000ff2c:	4529                	li	a0,10
    8000ff2e:	3d3140ef          	jal	80024b00 <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000ff32:	4511                	li	a0,4
    8000ff34:	cc3f00ef          	jal	80000bf6 <goto_priv>
    reset_state();
    8000ff38:	d74f10ef          	jal	800014ac <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000ff3c:	57fd                	li	a5,-1
    8000ff3e:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000ff42:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000ff46:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000ff4a:	60205073          	csrwi	hedeleg,0

    TEST_SETUP_EXCEPT();  
    8000ff4e:	0330000f          	fence	rw,rw
    8000ff52:	00039417          	auipc	s0,0x39
    8000ff56:	0be40413          	addi	s0,s0,190 # 80049010 <excpt>
    8000ff5a:	4785                	li	a5,1
    8000ff5c:	00039717          	auipc	a4,0x39
    8000ff60:	0e073623          	sd	zero,236(a4) # 80049048 <excpt+0x38>
    8000ff64:	00f41023          	sh	a5,0(s0)
    8000ff68:	0330000f          	fence	rw,rw
    goto_priv(PRIV_VU);      
    8000ff6c:	4501                	li	a0,0
    8000ff6e:	c89f00ef          	jal	80000bf6 <goto_priv>
    CSRR(CSR_MSTATUS);
    8000ff72:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000ff76:	08200593          	li	a1,130
    8000ff7a:	0001b617          	auipc	a2,0x1b
    8000ff7e:	cae60613          	addi	a2,a2,-850 # 8002ac28 <__func__.0+0x31c8>
    8000ff82:	00018517          	auipc	a0,0x18
    8000ff86:	dd650513          	addi	a0,a0,-554 # 80027d58 <__func__.0+0x2f8>
    8000ff8a:	56d150ef          	jal	80025cf6 <printf>
    8000ff8e:	6014                	ld	a3,0(s0)
    8000ff90:	f0001737          	lui	a4,0xf0001
    8000ff94:	0712                	slli	a4,a4,0x4
    8000ff96:	478d                	li	a5,3
    8000ff98:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ff9c:	1782                	slli	a5,a5,0x20
    8000ff9e:	8f75                	and	a4,a4,a3
    8000ffa0:	10078793          	addi	a5,a5,256
    8000ffa4:	00018597          	auipc	a1,0x18
    8000ffa8:	d8c58593          	addi	a1,a1,-628 # 80027d30 <__func__.0+0x2d0>
    8000ffac:	08f70263          	beq	a4,a5,80010030 <priv_change_13+0x11e>
    8000ffb0:	00018517          	auipc	a0,0x18
    8000ffb4:	dc050513          	addi	a0,a0,-576 # 80027d70 <__func__.0+0x310>
    8000ffb8:	53f150ef          	jal	80025cf6 <printf>
    8000ffbc:	00039797          	auipc	a5,0x39
    8000ffc0:	0557c783          	lbu	a5,85(a5) # 80049011 <excpt+0x1>
    8000ffc4:	cb81                	beqz	a5,8000ffd4 <priv_change_13+0xc2>
    8000ffc6:	00039717          	auipc	a4,0x39
    8000ffca:	04e72703          	lw	a4,78(a4) # 80049014 <excpt+0x4>
    8000ffce:	478d                	li	a5,3
    8000ffd0:	04f70a63          	beq	a4,a5,80010024 <priv_change_13+0x112>
    8000ffd4:	00018517          	auipc	a0,0x18
    8000ffd8:	da450513          	addi	a0,a0,-604 # 80027d78 <__func__.0+0x318>
    8000ffdc:	51b150ef          	jal	80025cf6 <printf>
    8000ffe0:	02900513          	li	a0,41
    8000ffe4:	31d140ef          	jal	80024b00 <putchar>
    8000ffe8:	4529                	li	a0,10
    8000ffea:	317140ef          	jal	80024b00 <putchar>
    8000ffee:	6014                	ld	a3,0(s0)
    8000fff0:	f0001737          	lui	a4,0xf0001
    8000fff4:	0712                	slli	a4,a4,0x4
    8000fff6:	478d                	li	a5,3
    8000fff8:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000fffc:	1782                	slli	a5,a5,0x20
    8000fffe:	8f75                	and	a4,a4,a3
    80010000:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VU
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    80010004:	00018597          	auipc	a1,0x18
    80010008:	d2c58593          	addi	a1,a1,-724 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8001000c:	04f70063          	beq	a4,a5,8001004c <priv_change_13+0x13a>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    80010010:	00018517          	auipc	a0,0x18
    80010014:	dc850513          	addi	a0,a0,-568 # 80027dd8 <__func__.0+0x378>
    80010018:	4df150ef          	jal	80025cf6 <printf>
    }
}
    8001001c:	60a2                	ld	ra,8(sp)
    8001001e:	6402                	ld	s0,0(sp)
    80010020:	0141                	addi	sp,sp,16
    80010022:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    80010024:	00022797          	auipc	a5,0x22
    80010028:	4787a783          	lw	a5,1144(a5) # 8003249c <curr_priv>
    8001002c:	dfd5                	beqz	a5,8000ffe8 <priv_change_13+0xd6>
    8001002e:	b75d                	j	8000ffd4 <priv_change_13+0xc2>
    80010030:	00022797          	auipc	a5,0x22
    80010034:	46c7a783          	lw	a5,1132(a5) # 8003249c <curr_priv>
    80010038:	00018597          	auipc	a1,0x18
    8001003c:	ce858593          	addi	a1,a1,-792 # 80027d20 <__func__.0+0x2c0>
    80010040:	dba5                	beqz	a5,8000ffb0 <priv_change_13+0x9e>
    80010042:	00018597          	auipc	a1,0x18
    80010046:	cee58593          	addi	a1,a1,-786 # 80027d30 <__func__.0+0x2d0>
    8001004a:	b79d                	j	8000ffb0 <priv_change_13+0x9e>
    8001004c:	00022797          	auipc	a5,0x22
    80010050:	4507a783          	lw	a5,1104(a5) # 8003249c <curr_priv>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    80010054:	00018597          	auipc	a1,0x18
    80010058:	ccc58593          	addi	a1,a1,-820 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8001005c:	dbd5                	beqz	a5,80010010 <priv_change_13+0xfe>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8001005e:	00018597          	auipc	a1,0x18
    80010062:	cd258593          	addi	a1,a1,-814 # 80027d30 <__func__.0+0x2d0>
    80010066:	00018517          	auipc	a0,0x18
    8001006a:	d7250513          	addi	a0,a0,-654 # 80027dd8 <__func__.0+0x378>
    8001006e:	489150ef          	jal	80025cf6 <printf>
}
    80010072:	60a2                	ld	ra,8(sp)
    80010074:	6402                	ld	s0,0(sp)
    80010076:	0141                	addi	sp,sp,16
    80010078:	8082                	ret

000000008001007a <priv_change_14>:

bool priv_change_14(){
    8001007a:	1141                	addi	sp,sp,-16
    TEST_START();
    8001007c:	00017597          	auipc	a1,0x17
    80010080:	87458593          	addi	a1,a1,-1932 # 800268f0 <__func__.2>
    80010084:	00018517          	auipc	a0,0x18
    80010088:	cbc50513          	addi	a0,a0,-836 # 80027d40 <__func__.0+0x2e0>
bool priv_change_14(){
    8001008c:	e406                	sd	ra,8(sp)
    8001008e:	e022                	sd	s0,0(sp)
    TEST_START();
    80010090:	467150ef          	jal	80025cf6 <printf>
    80010094:	4529                	li	a0,10
    80010096:	26b140ef          	jal	80024b00 <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，关闭理hedeleg/hideleg，切换到HS态处理异常，异常处理结束恢复执行sret到VU态
    goto_priv(PRIV_M);
    8001009a:	4511                	li	a0,4
    8001009c:	b5bf00ef          	jal	80000bf6 <goto_priv>
    reset_state();
    800100a0:	c0cf10ef          	jal	800014ac <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    800100a4:	57fd                	li	a5,-1
    800100a6:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    800100aa:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    800100ae:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    800100b2:	60205073          	csrwi	hedeleg,0
    
    goto_priv(PRIV_VU);     
    800100b6:	4501                	li	a0,0
    800100b8:	b3ff00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();        
    800100bc:	0330000f          	fence	rw,rw
    800100c0:	00039417          	auipc	s0,0x39
    800100c4:	f5040413          	addi	s0,s0,-176 # 80049010 <excpt>
    800100c8:	4785                	li	a5,1
    800100ca:	00039717          	auipc	a4,0x39
    800100ce:	f6073f23          	sd	zero,-130(a4) # 80049048 <excpt+0x38>
    800100d2:	00f41023          	sh	a5,0(s0)
    800100d6:	0330000f          	fence	rw,rw
    CSRW(medeleg, 0); 
    800100da:	30205073          	csrwi	medeleg,0

    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    800100de:	08200593          	li	a1,130
    800100e2:	0001b617          	auipc	a2,0x1b
    800100e6:	bb660613          	addi	a2,a2,-1098 # 8002ac98 <__func__.0+0x3238>
    800100ea:	00018517          	auipc	a0,0x18
    800100ee:	c6e50513          	addi	a0,a0,-914 # 80027d58 <__func__.0+0x2f8>
    800100f2:	405150ef          	jal	80025cf6 <printf>
    800100f6:	6014                	ld	a3,0(s0)
    800100f8:	f0001737          	lui	a4,0xf0001
    800100fc:	0712                	slli	a4,a4,0x4
    800100fe:	478d                	li	a5,3
    80010100:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80010104:	1782                	slli	a5,a5,0x20
    80010106:	8f75                	and	a4,a4,a3
    80010108:	10078793          	addi	a5,a5,256
    8001010c:	00018597          	auipc	a1,0x18
    80010110:	c2458593          	addi	a1,a1,-988 # 80027d30 <__func__.0+0x2d0>
    80010114:	08f70263          	beq	a4,a5,80010198 <priv_change_14+0x11e>
    80010118:	00018517          	auipc	a0,0x18
    8001011c:	c5850513          	addi	a0,a0,-936 # 80027d70 <__func__.0+0x310>
    80010120:	3d7150ef          	jal	80025cf6 <printf>
    80010124:	00039797          	auipc	a5,0x39
    80010128:	eed7c783          	lbu	a5,-275(a5) # 80049011 <excpt+0x1>
    8001012c:	cb81                	beqz	a5,8001013c <priv_change_14+0xc2>
    8001012e:	00039717          	auipc	a4,0x39
    80010132:	ee672703          	lw	a4,-282(a4) # 80049014 <excpt+0x4>
    80010136:	478d                	li	a5,3
    80010138:	04f70a63          	beq	a4,a5,8001018c <priv_change_14+0x112>
    8001013c:	00018517          	auipc	a0,0x18
    80010140:	c3c50513          	addi	a0,a0,-964 # 80027d78 <__func__.0+0x318>
    80010144:	3b3150ef          	jal	80025cf6 <printf>
    80010148:	02900513          	li	a0,41
    8001014c:	1b5140ef          	jal	80024b00 <putchar>
    80010150:	4529                	li	a0,10
    80010152:	1af140ef          	jal	80024b00 <putchar>
    80010156:	6014                	ld	a3,0(s0)
    80010158:	f0001737          	lui	a4,0xf0001
    8001015c:	0712                	slli	a4,a4,0x4
    8001015e:	478d                	li	a5,3
    80010160:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80010164:	1782                	slli	a5,a5,0x20
    80010166:	8f75                	and	a4,a4,a3
    80010168:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VU
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8001016c:	00018597          	auipc	a1,0x18
    80010170:	bc458593          	addi	a1,a1,-1084 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    80010174:	04f70063          	beq	a4,a5,800101b4 <priv_change_14+0x13a>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    80010178:	00018517          	auipc	a0,0x18
    8001017c:	c6050513          	addi	a0,a0,-928 # 80027dd8 <__func__.0+0x378>
    80010180:	377150ef          	jal	80025cf6 <printf>
    }

}
    80010184:	60a2                	ld	ra,8(sp)
    80010186:	6402                	ld	s0,0(sp)
    80010188:	0141                	addi	sp,sp,16
    8001018a:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8001018c:	00022797          	auipc	a5,0x22
    80010190:	3107a783          	lw	a5,784(a5) # 8003249c <curr_priv>
    80010194:	dfd5                	beqz	a5,80010150 <priv_change_14+0xd6>
    80010196:	b75d                	j	8001013c <priv_change_14+0xc2>
    80010198:	00022797          	auipc	a5,0x22
    8001019c:	3047a783          	lw	a5,772(a5) # 8003249c <curr_priv>
    800101a0:	00018597          	auipc	a1,0x18
    800101a4:	b8058593          	addi	a1,a1,-1152 # 80027d20 <__func__.0+0x2c0>
    800101a8:	dba5                	beqz	a5,80010118 <priv_change_14+0x9e>
    800101aa:	00018597          	auipc	a1,0x18
    800101ae:	b8658593          	addi	a1,a1,-1146 # 80027d30 <__func__.0+0x2d0>
    800101b2:	b79d                	j	80010118 <priv_change_14+0x9e>
    800101b4:	00022797          	auipc	a5,0x22
    800101b8:	2e87a783          	lw	a5,744(a5) # 8003249c <curr_priv>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    800101bc:	00018597          	auipc	a1,0x18
    800101c0:	b6458593          	addi	a1,a1,-1180 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    800101c4:	dbd5                	beqz	a5,80010178 <priv_change_14+0xfe>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    800101c6:	00018597          	auipc	a1,0x18
    800101ca:	b6a58593          	addi	a1,a1,-1174 # 80027d30 <__func__.0+0x2d0>
    800101ce:	00018517          	auipc	a0,0x18
    800101d2:	c0a50513          	addi	a0,a0,-1014 # 80027dd8 <__func__.0+0x378>
    800101d6:	321150ef          	jal	80025cf6 <printf>
}
    800101da:	60a2                	ld	ra,8(sp)
    800101dc:	6402                	ld	s0,0(sp)
    800101de:	0141                	addi	sp,sp,16
    800101e0:	8082                	ret

00000000800101e2 <priv_change_15>:

bool priv_change_15(){
    800101e2:	1141                	addi	sp,sp,-16
    TEST_START();
    800101e4:	00016597          	auipc	a1,0x16
    800101e8:	71c58593          	addi	a1,a1,1820 # 80026900 <__func__.1>
    800101ec:	00018517          	auipc	a0,0x18
    800101f0:	b5450513          	addi	a0,a0,-1196 # 80027d40 <__func__.0+0x2e0>
bool priv_change_15(){
    800101f4:	e406                	sd	ra,8(sp)
    800101f6:	e022                	sd	s0,0(sp)
    TEST_START();
    800101f8:	2ff150ef          	jal	80025cf6 <printf>
    800101fc:	4529                	li	a0,10
    800101fe:	103140ef          	jal	80024b00 <putchar>

    //V=1，VS模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    80010202:	4511                	li	a0,4
    80010204:	9f3f00ef          	jal	80000bf6 <goto_priv>
    reset_state();
    80010208:	aa4f10ef          	jal	800014ac <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8001020c:	57fd                	li	a5,-1
    8001020e:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    80010212:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    80010216:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8001021a:	60205073          	csrwi	hedeleg,0

    TEST_SETUP_EXCEPT();    
    8001021e:	0330000f          	fence	rw,rw
    80010222:	00039417          	auipc	s0,0x39
    80010226:	dee40413          	addi	s0,s0,-530 # 80049010 <excpt>
    8001022a:	4785                	li	a5,1
    8001022c:	00039717          	auipc	a4,0x39
    80010230:	e0073e23          	sd	zero,-484(a4) # 80049048 <excpt+0x38>
    80010234:	00f41023          	sh	a5,0(s0)
    80010238:	0330000f          	fence	rw,rw
    goto_priv(PRIV_VS);     
    8001023c:	4509                	li	a0,2
    8001023e:	9b9f00ef          	jal	80000bf6 <goto_priv>
    CSRR(CSR_MSTATUS);
    80010242:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    80010246:	08200593          	li	a1,130
    8001024a:	0001b617          	auipc	a2,0x1b
    8001024e:	abe60613          	addi	a2,a2,-1346 # 8002ad08 <__func__.0+0x32a8>
    80010252:	00018517          	auipc	a0,0x18
    80010256:	b0650513          	addi	a0,a0,-1274 # 80027d58 <__func__.0+0x2f8>
    8001025a:	29d150ef          	jal	80025cf6 <printf>
    8001025e:	6014                	ld	a3,0(s0)
    80010260:	f0001737          	lui	a4,0xf0001
    80010264:	0712                	slli	a4,a4,0x4
    80010266:	478d                	li	a5,3
    80010268:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8001026c:	1782                	slli	a5,a5,0x20
    8001026e:	8f75                	and	a4,a4,a3
    80010270:	10078793          	addi	a5,a5,256
    80010274:	00018597          	auipc	a1,0x18
    80010278:	abc58593          	addi	a1,a1,-1348 # 80027d30 <__func__.0+0x2d0>
    8001027c:	08f70463          	beq	a4,a5,80010304 <priv_change_15+0x122>
    80010280:	00018517          	auipc	a0,0x18
    80010284:	af050513          	addi	a0,a0,-1296 # 80027d70 <__func__.0+0x310>
    80010288:	26f150ef          	jal	80025cf6 <printf>
    8001028c:	00039797          	auipc	a5,0x39
    80010290:	d857c783          	lbu	a5,-635(a5) # 80049011 <excpt+0x1>
    80010294:	cb81                	beqz	a5,800102a4 <priv_change_15+0xc2>
    80010296:	00039717          	auipc	a4,0x39
    8001029a:	d7e72703          	lw	a4,-642(a4) # 80049014 <excpt+0x4>
    8001029e:	478d                	li	a5,3
    800102a0:	04f70a63          	beq	a4,a5,800102f4 <priv_change_15+0x112>
    800102a4:	00018517          	auipc	a0,0x18
    800102a8:	ad450513          	addi	a0,a0,-1324 # 80027d78 <__func__.0+0x318>
    800102ac:	24b150ef          	jal	80025cf6 <printf>
    800102b0:	02900513          	li	a0,41
    800102b4:	04d140ef          	jal	80024b00 <putchar>
    800102b8:	4529                	li	a0,10
    800102ba:	047140ef          	jal	80024b00 <putchar>
    800102be:	6014                	ld	a3,0(s0)
    800102c0:	f0001737          	lui	a4,0xf0001
    800102c4:	0712                	slli	a4,a4,0x4
    800102c6:	478d                	li	a5,3
    800102c8:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    800102cc:	1782                	slli	a5,a5,0x20
    800102ce:	8f75                	and	a4,a4,a3
    800102d0:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VS
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    800102d4:	00018597          	auipc	a1,0x18
    800102d8:	a5c58593          	addi	a1,a1,-1444 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    800102dc:	04f70463          	beq	a4,a5,80010324 <priv_change_15+0x142>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    800102e0:	00018517          	auipc	a0,0x18
    800102e4:	af850513          	addi	a0,a0,-1288 # 80027dd8 <__func__.0+0x378>
    800102e8:	20f150ef          	jal	80025cf6 <printf>
    }

}
    800102ec:	60a2                	ld	ra,8(sp)
    800102ee:	6402                	ld	s0,0(sp)
    800102f0:	0141                	addi	sp,sp,16
    800102f2:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    800102f4:	00022717          	auipc	a4,0x22
    800102f8:	1a872703          	lw	a4,424(a4) # 8003249c <curr_priv>
    800102fc:	4789                	li	a5,2
    800102fe:	faf713e3          	bne	a4,a5,800102a4 <priv_change_15+0xc2>
    80010302:	bf5d                	j	800102b8 <priv_change_15+0xd6>
    80010304:	00022717          	auipc	a4,0x22
    80010308:	19872703          	lw	a4,408(a4) # 8003249c <curr_priv>
    8001030c:	4789                	li	a5,2
    8001030e:	00018597          	auipc	a1,0x18
    80010312:	a1258593          	addi	a1,a1,-1518 # 80027d20 <__func__.0+0x2c0>
    80010316:	f6f705e3          	beq	a4,a5,80010280 <priv_change_15+0x9e>
    8001031a:	00018597          	auipc	a1,0x18
    8001031e:	a1658593          	addi	a1,a1,-1514 # 80027d30 <__func__.0+0x2d0>
    80010322:	bfb9                	j	80010280 <priv_change_15+0x9e>
    80010324:	00022717          	auipc	a4,0x22
    80010328:	17872703          	lw	a4,376(a4) # 8003249c <curr_priv>
    8001032c:	4789                	li	a5,2
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8001032e:	00018597          	auipc	a1,0x18
    80010332:	9f258593          	addi	a1,a1,-1550 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    80010336:	faf705e3          	beq	a4,a5,800102e0 <priv_change_15+0xfe>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8001033a:	00018597          	auipc	a1,0x18
    8001033e:	9f658593          	addi	a1,a1,-1546 # 80027d30 <__func__.0+0x2d0>
    80010342:	00018517          	auipc	a0,0x18
    80010346:	a9650513          	addi	a0,a0,-1386 # 80027dd8 <__func__.0+0x378>
    8001034a:	1ad150ef          	jal	80025cf6 <printf>
}
    8001034e:	60a2                	ld	ra,8(sp)
    80010350:	6402                	ld	s0,0(sp)
    80010352:	0141                	addi	sp,sp,16
    80010354:	8082                	ret

0000000080010356 <priv_change_16>:

bool priv_change_16(){
    80010356:	1141                	addi	sp,sp,-16
    TEST_START();
    80010358:	00016597          	auipc	a1,0x16
    8001035c:	5b858593          	addi	a1,a1,1464 # 80026910 <__func__.0>
    80010360:	00018517          	auipc	a0,0x18
    80010364:	9e050513          	addi	a0,a0,-1568 # 80027d40 <__func__.0+0x2e0>
bool priv_change_16(){
    80010368:	e406                	sd	ra,8(sp)
    8001036a:	e022                	sd	s0,0(sp)
    TEST_START();
    8001036c:	18b150ef          	jal	80025cf6 <printf>
    80010370:	4529                	li	a0,10
    80010372:	78e140ef          	jal	80024b00 <putchar>

    //V=1，VS模式下发生异常，打开代理medeleg/mideleg，打开代理hedeleg/hideleg，切换到HS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    80010376:	4511                	li	a0,4
    80010378:	87ff00ef          	jal	80000bf6 <goto_priv>
    reset_state();
    8001037c:	930f10ef          	jal	800014ac <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    80010380:	57fd                	li	a5,-1
    80010382:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    80010386:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8001038a:	60379073          	csrw	hideleg,a5
    CSRW(CSR_HEDELEG,(uint64_t)-1);   
    8001038e:	60279073          	csrw	hedeleg,a5

    TEST_SETUP_EXCEPT();    
    80010392:	0330000f          	fence	rw,rw
    80010396:	00039417          	auipc	s0,0x39
    8001039a:	c7a40413          	addi	s0,s0,-902 # 80049010 <excpt>
    8001039e:	4785                	li	a5,1
    800103a0:	00039717          	auipc	a4,0x39
    800103a4:	ca073423          	sd	zero,-856(a4) # 80049048 <excpt+0x38>
    800103a8:	00f41023          	sh	a5,0(s0)
    800103ac:	0330000f          	fence	rw,rw
    goto_priv(PRIV_VS);     
    800103b0:	4509                	li	a0,2
    800103b2:	845f00ef          	jal	80000bf6 <goto_priv>
    CSRR(CSR_MSTATUS);
    800103b6:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vs trigger except that priv change to vs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    800103ba:	08200593          	li	a1,130
    800103be:	0001b617          	auipc	a2,0x1b
    800103c2:	9ba60613          	addi	a2,a2,-1606 # 8002ad78 <__func__.0+0x3318>
    800103c6:	00018517          	auipc	a0,0x18
    800103ca:	99250513          	addi	a0,a0,-1646 # 80027d58 <__func__.0+0x2f8>
    800103ce:	129150ef          	jal	80025cf6 <printf>
    800103d2:	6014                	ld	a3,0(s0)
    800103d4:	f0001737          	lui	a4,0xf0001
    800103d8:	0712                	slli	a4,a4,0x4
    800103da:	4785                	li	a5,1
    800103dc:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    800103e0:	1786                	slli	a5,a5,0x21
    800103e2:	8f75                	and	a4,a4,a3
    800103e4:	10078793          	addi	a5,a5,256
    800103e8:	00018597          	auipc	a1,0x18
    800103ec:	94858593          	addi	a1,a1,-1720 # 80027d30 <__func__.0+0x2d0>
    800103f0:	08f70363          	beq	a4,a5,80010476 <priv_change_16+0x120>
    800103f4:	00018517          	auipc	a0,0x18
    800103f8:	97c50513          	addi	a0,a0,-1668 # 80027d70 <__func__.0+0x310>
    800103fc:	0fb150ef          	jal	80025cf6 <printf>
    80010400:	00039797          	auipc	a5,0x39
    80010404:	c117c783          	lbu	a5,-1007(a5) # 80049011 <excpt+0x1>
    80010408:	cb81                	beqz	a5,80010418 <priv_change_16+0xc2>
    8001040a:	00039797          	auipc	a5,0x39
    8001040e:	c0a7a783          	lw	a5,-1014(a5) # 80049014 <excpt+0x4>
    80010412:	4709                	li	a4,2
    80010414:	04e78a63          	beq	a5,a4,80010468 <priv_change_16+0x112>
    80010418:	00018517          	auipc	a0,0x18
    8001041c:	96050513          	addi	a0,a0,-1696 # 80027d78 <__func__.0+0x318>
    80010420:	0d7150ef          	jal	80025cf6 <printf>
    80010424:	02900513          	li	a0,41
    80010428:	6d8140ef          	jal	80024b00 <putchar>
    8001042c:	4529                	li	a0,10
    8001042e:	6d2140ef          	jal	80024b00 <putchar>
    80010432:	6014                	ld	a3,0(s0)
    80010434:	f0001737          	lui	a4,0xf0001
    80010438:	0712                	slli	a4,a4,0x4
    8001043a:	4785                	li	a5,1
    8001043c:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80010440:	1786                	slli	a5,a5,0x21
    80010442:	8f75                	and	a4,a4,a3
    80010444:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_VS &&
        curr_priv == PRIV_VS
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    80010448:	00018597          	auipc	a1,0x18
    8001044c:	8e858593          	addi	a1,a1,-1816 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs trigger except that priv change to vs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    80010450:	04f70363          	beq	a4,a5,80010496 <priv_change_16+0x140>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    80010454:	00018517          	auipc	a0,0x18
    80010458:	98450513          	addi	a0,a0,-1660 # 80027dd8 <__func__.0+0x378>
    8001045c:	09b150ef          	jal	80025cf6 <printf>
    }

}
    80010460:	60a2                	ld	ra,8(sp)
    80010462:	6402                	ld	s0,0(sp)
    80010464:	0141                	addi	sp,sp,16
    80010466:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to vs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    80010468:	00022717          	auipc	a4,0x22
    8001046c:	03472703          	lw	a4,52(a4) # 8003249c <curr_priv>
    80010470:	faf714e3          	bne	a4,a5,80010418 <priv_change_16+0xc2>
    80010474:	bf65                	j	8001042c <priv_change_16+0xd6>
    80010476:	00022717          	auipc	a4,0x22
    8001047a:	02672703          	lw	a4,38(a4) # 8003249c <curr_priv>
    8001047e:	4789                	li	a5,2
    80010480:	00018597          	auipc	a1,0x18
    80010484:	8a058593          	addi	a1,a1,-1888 # 80027d20 <__func__.0+0x2c0>
    80010488:	f6f706e3          	beq	a4,a5,800103f4 <priv_change_16+0x9e>
    8001048c:	00018597          	auipc	a1,0x18
    80010490:	8a458593          	addi	a1,a1,-1884 # 80027d30 <__func__.0+0x2d0>
    80010494:	b785                	j	800103f4 <priv_change_16+0x9e>
    80010496:	00022717          	auipc	a4,0x22
    8001049a:	00672703          	lw	a4,6(a4) # 8003249c <curr_priv>
    8001049e:	4789                	li	a5,2
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    800104a0:	00018597          	auipc	a1,0x18
    800104a4:	88058593          	addi	a1,a1,-1920 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs trigger except that priv change to vs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    800104a8:	faf706e3          	beq	a4,a5,80010454 <priv_change_16+0xfe>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    800104ac:	00018597          	auipc	a1,0x18
    800104b0:	88458593          	addi	a1,a1,-1916 # 80027d30 <__func__.0+0x2d0>
    800104b4:	00018517          	auipc	a0,0x18
    800104b8:	92450513          	addi	a0,a0,-1756 # 80027dd8 <__func__.0+0x378>
    800104bc:	03b150ef          	jal	80025cf6 <printf>
}
    800104c0:	60a2                	ld	ra,8(sp)
    800104c2:	6402                	ld	s0,0(sp)
    800104c4:	0141                	addi	sp,sp,16
    800104c6:	8082                	ret

00000000800104c8 <addr_unaligned>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool addr_unaligned() {
    800104c8:	1101                	addi	sp,sp,-32

    TEST_START();
    800104ca:	00016597          	auipc	a1,0x16
    800104ce:	45658593          	addi	a1,a1,1110 # 80026920 <__func__.1>
    800104d2:	00018517          	auipc	a0,0x18
    800104d6:	86e50513          	addi	a0,a0,-1938 # 80027d40 <__func__.0+0x2e0>
bool addr_unaligned() {
    800104da:	ec06                	sd	ra,24(sp)
    800104dc:	e822                	sd	s0,16(sp)
    800104de:	e426                	sd	s1,8(sp)
    800104e0:	e04a                	sd	s2,0(sp)
    TEST_START();
    800104e2:	015150ef          	jal	80025cf6 <printf>
    800104e6:	4529                	li	a0,10
    800104e8:	618140ef          	jal	80024b00 <putchar>

    TEST_SETUP_EXCEPT();
    800104ec:	0330000f          	fence	rw,rw
    800104f0:	00039417          	auipc	s0,0x39
    800104f4:	b2040413          	addi	s0,s0,-1248 # 80049010 <excpt>
    800104f8:	4485                	li	s1,1
    800104fa:	00039797          	auipc	a5,0x39
    800104fe:	b407b723          	sd	zero,-1202(a5) # 80049048 <excpt+0x38>
    80010502:	00941023          	sh	s1,0(s0)
    80010506:	0330000f          	fence	rw,rw
    
    
    hspt_init();        
    8001050a:	8d6f00ef          	jal	800005e0 <hspt_init>
    goto_priv(PRIV_HS);     
    8001050e:	450d                	li	a0,3
    80010510:	ee6f00ef          	jal	80000bf6 <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSRWX_GRWX) + 1;      
    uint64_t value = 0xdeadbeef;

    //load byte地址不会发生未对齐
    TEST_SETUP_EXCEPT();        
    80010514:	0330000f          	fence	rw,rw
    80010518:	00039797          	auipc	a5,0x39
    8001051c:	b207b823          	sd	zero,-1232(a5) # 80049048 <excpt+0x38>
    80010520:	00941023          	sh	s1,0(s0)
    80010524:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80010528:	001007b7          	lui	a5,0x100
    8001052c:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    80010530:	07b2                	slli	a5,a5,0xc
    80010532:	97a6                	add	a5,a5,s1
    80010534:	00078783          	lb	a5,0(a5)
    value = lb(vaddr_f);
    TEST_ASSERT("load byte address is not aligned successful",         
    80010538:	08200593          	li	a1,130
    8001053c:	0001b617          	auipc	a2,0x1b
    80010540:	8ac60613          	addi	a2,a2,-1876 # 8002ade8 <__func__.0+0x3388>
    80010544:	00018517          	auipc	a0,0x18
    80010548:	81450513          	addi	a0,a0,-2028 # 80027d58 <__func__.0+0x2f8>
    8001054c:	7aa150ef          	jal	80025cf6 <printf>
    80010550:	00039797          	auipc	a5,0x39
    80010554:	ac17c783          	lbu	a5,-1343(a5) # 80049011 <excpt+0x1>
    80010558:	00017597          	auipc	a1,0x17
    8001055c:	7c858593          	addi	a1,a1,1992 # 80027d20 <__func__.0+0x2c0>
    80010560:	c789                	beqz	a5,8001056a <addr_unaligned+0xa2>
    80010562:	00017597          	auipc	a1,0x17
    80010566:	7ce58593          	addi	a1,a1,1998 # 80027d30 <__func__.0+0x2d0>
    8001056a:	00018517          	auipc	a0,0x18
    8001056e:	80650513          	addi	a0,a0,-2042 # 80027d70 <__func__.0+0x310>
    80010572:	784150ef          	jal	80025cf6 <printf>
    80010576:	00039797          	auipc	a5,0x39
    8001057a:	a9b7c783          	lbu	a5,-1381(a5) # 80049011 <excpt+0x1>
    8001057e:	52079663          	bnez	a5,80010aaa <addr_unaligned+0x5e2>
    80010582:	4529                	li	a0,10
    80010584:	57c140ef          	jal	80024b00 <putchar>
    80010588:	00039917          	auipc	s2,0x39
    8001058c:	a8994903          	lbu	s2,-1399(s2) # 80049011 <excpt+0x1>
        excpt.triggered == false
    );

    //load half地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    80010590:	0330000f          	fence	rw,rw
    80010594:	4785                	li	a5,1
    80010596:	00039717          	auipc	a4,0x39
    8001059a:	aa073923          	sd	zero,-1358(a4) # 80049048 <excpt+0x38>
    8001059e:	00f41023          	sh	a5,0(s0)
    800105a2:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    800105a6:	001007b7          	lui	a5,0x100
    800105aa:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    800105ae:	07b2                	slli	a5,a5,0xc
    800105b0:	0785                	addi	a5,a5,1
    800105b2:	00079783          	lh	a5,0(a5)
    value = lh(vaddr_f);
    TEST_ASSERT(" load half address is not aligned result in a lam",         
    800105b6:	08200593          	li	a1,130
    800105ba:	0001b617          	auipc	a2,0x1b
    800105be:	85e60613          	addi	a2,a2,-1954 # 8002ae18 <__func__.0+0x33b8>
    800105c2:	00017517          	auipc	a0,0x17
    800105c6:	79650513          	addi	a0,a0,1942 # 80027d58 <__func__.0+0x2f8>
    800105ca:	72c150ef          	jal	80025cf6 <printf>
    800105ce:	00039797          	auipc	a5,0x39
    800105d2:	a437c783          	lbu	a5,-1469(a5) # 80049011 <excpt+0x1>
    800105d6:	00017597          	auipc	a1,0x17
    800105da:	75a58593          	addi	a1,a1,1882 # 80027d30 <__func__.0+0x2d0>
    800105de:	cf89                	beqz	a5,800105f8 <addr_unaligned+0x130>
    800105e0:	6418                	ld	a4,8(s0)
    800105e2:	4791                	li	a5,4
    800105e4:	00017597          	auipc	a1,0x17
    800105e8:	73c58593          	addi	a1,a1,1852 # 80027d20 <__func__.0+0x2c0>
    800105ec:	00f70663          	beq	a4,a5,800105f8 <addr_unaligned+0x130>
    800105f0:	00017597          	auipc	a1,0x17
    800105f4:	74058593          	addi	a1,a1,1856 # 80027d30 <__func__.0+0x2d0>
    800105f8:	00017517          	auipc	a0,0x17
    800105fc:	77850513          	addi	a0,a0,1912 # 80027d70 <__func__.0+0x310>
    80010600:	6f6150ef          	jal	80025cf6 <printf>
    80010604:	00039797          	auipc	a5,0x39
    80010608:	a0d7c783          	lbu	a5,-1523(a5) # 80049011 <excpt+0x1>
    8001060c:	c789                	beqz	a5,80010616 <addr_unaligned+0x14e>
    8001060e:	6418                	ld	a4,8(s0)
    80010610:	4791                	li	a5,4
    80010612:	00f70c63          	beq	a4,a5,8001062a <addr_unaligned+0x162>
    80010616:	00017517          	auipc	a0,0x17
    8001061a:	76250513          	addi	a0,a0,1890 # 80027d78 <__func__.0+0x318>
    8001061e:	6d8150ef          	jal	80025cf6 <printf>
    80010622:	02900513          	li	a0,41
    80010626:	4da140ef          	jal	80024b00 <putchar>
    8001062a:	4529                	li	a0,10
    8001062c:	4d4140ef          	jal	80024b00 <putchar>
    80010630:	4481                	li	s1,0
    80010632:	00091863          	bnez	s2,80010642 <addr_unaligned+0x17a>
    80010636:	00039797          	auipc	a5,0x39
    8001063a:	9db7c783          	lbu	a5,-1573(a5) # 80049011 <excpt+0x1>
    8001063e:	44079263          	bnez	a5,80010a82 <addr_unaligned+0x5ba>
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );
    
    //load word地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    80010642:	0330000f          	fence	rw,rw
    80010646:	4785                	li	a5,1
    80010648:	00039717          	auipc	a4,0x39
    8001064c:	a0073023          	sd	zero,-1536(a4) # 80049048 <excpt+0x38>
    80010650:	00f41023          	sh	a5,0(s0)
    80010654:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lw, "lw", uint32_t); 
    80010658:	001007b7          	lui	a5,0x100
    8001065c:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    80010660:	07b2                	slli	a5,a5,0xc
    80010662:	0785                	addi	a5,a5,1
    80010664:	0007a783          	lw	a5,0(a5)
    value = lw(vaddr_f);
    TEST_ASSERT("load word address is not aligned result in a lam",         
    80010668:	08200593          	li	a1,130
    8001066c:	0001a617          	auipc	a2,0x1a
    80010670:	7e460613          	addi	a2,a2,2020 # 8002ae50 <__func__.0+0x33f0>
    80010674:	00017517          	auipc	a0,0x17
    80010678:	6e450513          	addi	a0,a0,1764 # 80027d58 <__func__.0+0x2f8>
    8001067c:	67a150ef          	jal	80025cf6 <printf>
    80010680:	00039797          	auipc	a5,0x39
    80010684:	9917c783          	lbu	a5,-1647(a5) # 80049011 <excpt+0x1>
    80010688:	00017597          	auipc	a1,0x17
    8001068c:	6a858593          	addi	a1,a1,1704 # 80027d30 <__func__.0+0x2d0>
    80010690:	cf89                	beqz	a5,800106aa <addr_unaligned+0x1e2>
    80010692:	6418                	ld	a4,8(s0)
    80010694:	4791                	li	a5,4
    80010696:	00017597          	auipc	a1,0x17
    8001069a:	68a58593          	addi	a1,a1,1674 # 80027d20 <__func__.0+0x2c0>
    8001069e:	00f70663          	beq	a4,a5,800106aa <addr_unaligned+0x1e2>
    800106a2:	00017597          	auipc	a1,0x17
    800106a6:	68e58593          	addi	a1,a1,1678 # 80027d30 <__func__.0+0x2d0>
    800106aa:	00017517          	auipc	a0,0x17
    800106ae:	6c650513          	addi	a0,a0,1734 # 80027d70 <__func__.0+0x310>
    800106b2:	644150ef          	jal	80025cf6 <printf>
    800106b6:	00039797          	auipc	a5,0x39
    800106ba:	95b7c783          	lbu	a5,-1701(a5) # 80049011 <excpt+0x1>
    800106be:	c789                	beqz	a5,800106c8 <addr_unaligned+0x200>
    800106c0:	6418                	ld	a4,8(s0)
    800106c2:	4791                	li	a5,4
    800106c4:	00f70c63          	beq	a4,a5,800106dc <addr_unaligned+0x214>
    800106c8:	00017517          	auipc	a0,0x17
    800106cc:	6b050513          	addi	a0,a0,1712 # 80027d78 <__func__.0+0x318>
    800106d0:	626150ef          	jal	80025cf6 <printf>
    800106d4:	02900513          	li	a0,41
    800106d8:	428140ef          	jal	80024b00 <putchar>
    800106dc:	4529                	li	a0,10
    800106de:	422140ef          	jal	80024b00 <putchar>
    800106e2:	c881                	beqz	s1,800106f2 <addr_unaligned+0x22a>
    800106e4:	00039797          	auipc	a5,0x39
    800106e8:	92d7c783          	lbu	a5,-1747(a5) # 80049011 <excpt+0x1>
    800106ec:	4481                	li	s1,0
    800106ee:	38079563          	bnez	a5,80010a78 <addr_unaligned+0x5b0>
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );

    //load double word地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    800106f2:	0330000f          	fence	rw,rw
    800106f6:	4785                	li	a5,1
    800106f8:	00039717          	auipc	a4,0x39
    800106fc:	94073823          	sd	zero,-1712(a4) # 80049048 <excpt+0x38>
    80010700:	00f41023          	sh	a5,0(s0)
    80010704:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    80010708:	00100937          	lui	s2,0x100
    8001070c:	04b90913          	addi	s2,s2,75 # 10004b <STACK_SIZE+0x4b>
    80010710:	0932                	slli	s2,s2,0xc
    80010712:	993e                	add	s2,s2,a5
    80010714:	00093903          	ld	s2,0(s2)
    value = ld(vaddr_f);
    TEST_ASSERT("load double word address is not aligned result in a lam",         
    80010718:	08200593          	li	a1,130
    8001071c:	0001a617          	auipc	a2,0x1a
    80010720:	76c60613          	addi	a2,a2,1900 # 8002ae88 <__func__.0+0x3428>
    80010724:	00017517          	auipc	a0,0x17
    80010728:	63450513          	addi	a0,a0,1588 # 80027d58 <__func__.0+0x2f8>
    8001072c:	5ca150ef          	jal	80025cf6 <printf>
    80010730:	00039797          	auipc	a5,0x39
    80010734:	8e17c783          	lbu	a5,-1823(a5) # 80049011 <excpt+0x1>
    80010738:	00017597          	auipc	a1,0x17
    8001073c:	5f858593          	addi	a1,a1,1528 # 80027d30 <__func__.0+0x2d0>
    80010740:	cf89                	beqz	a5,8001075a <addr_unaligned+0x292>
    80010742:	6418                	ld	a4,8(s0)
    80010744:	4791                	li	a5,4
    80010746:	00017597          	auipc	a1,0x17
    8001074a:	5da58593          	addi	a1,a1,1498 # 80027d20 <__func__.0+0x2c0>
    8001074e:	00f70663          	beq	a4,a5,8001075a <addr_unaligned+0x292>
    80010752:	00017597          	auipc	a1,0x17
    80010756:	5de58593          	addi	a1,a1,1502 # 80027d30 <__func__.0+0x2d0>
    8001075a:	00017517          	auipc	a0,0x17
    8001075e:	61650513          	addi	a0,a0,1558 # 80027d70 <__func__.0+0x310>
    80010762:	594150ef          	jal	80025cf6 <printf>
    80010766:	00039797          	auipc	a5,0x39
    8001076a:	8ab7c783          	lbu	a5,-1877(a5) # 80049011 <excpt+0x1>
    8001076e:	c789                	beqz	a5,80010778 <addr_unaligned+0x2b0>
    80010770:	6418                	ld	a4,8(s0)
    80010772:	4791                	li	a5,4
    80010774:	00f70c63          	beq	a4,a5,8001078c <addr_unaligned+0x2c4>
    80010778:	00017517          	auipc	a0,0x17
    8001077c:	60050513          	addi	a0,a0,1536 # 80027d78 <__func__.0+0x318>
    80010780:	576150ef          	jal	80025cf6 <printf>
    80010784:	02900513          	li	a0,41
    80010788:	378140ef          	jal	80024b00 <putchar>
    8001078c:	4529                	li	a0,10
    8001078e:	372140ef          	jal	80024b00 <putchar>
    80010792:	c881                	beqz	s1,800107a2 <addr_unaligned+0x2da>
    80010794:	00039797          	auipc	a5,0x39
    80010798:	87d7c783          	lbu	a5,-1923(a5) # 80049011 <excpt+0x1>
    8001079c:	4481                	li	s1,0
    8001079e:	30079163          	bnez	a5,80010aa0 <addr_unaligned+0x5d8>
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );

    //store byte地址不会发生未对齐
    TEST_SETUP_EXCEPT();        
    800107a2:	0330000f          	fence	rw,rw
    800107a6:	4785                	li	a5,1
    800107a8:	00039717          	auipc	a4,0x39
    800107ac:	8a073023          	sd	zero,-1888(a4) # 80049048 <excpt+0x38>
    800107b0:	00f41023          	sh	a5,0(s0)
    800107b4:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sb, "sb", uint8_t);
    800107b8:	001007b7          	lui	a5,0x100
    800107bc:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    800107c0:	07b2                	slli	a5,a5,0xc
    800107c2:	0785                	addi	a5,a5,1
    800107c4:	01278023          	sb	s2,0(a5)
    sb(vaddr_f,value);
    TEST_ASSERT("store byte address is not aligned successful",         
    800107c8:	08200593          	li	a1,130
    800107cc:	0001a617          	auipc	a2,0x1a
    800107d0:	6f460613          	addi	a2,a2,1780 # 8002aec0 <__func__.0+0x3460>
    800107d4:	00017517          	auipc	a0,0x17
    800107d8:	58450513          	addi	a0,a0,1412 # 80027d58 <__func__.0+0x2f8>
    800107dc:	51a150ef          	jal	80025cf6 <printf>
    800107e0:	00039797          	auipc	a5,0x39
    800107e4:	8317c783          	lbu	a5,-1999(a5) # 80049011 <excpt+0x1>
    800107e8:	00017597          	auipc	a1,0x17
    800107ec:	54858593          	addi	a1,a1,1352 # 80027d30 <__func__.0+0x2d0>
    800107f0:	e789                	bnez	a5,800107fa <addr_unaligned+0x332>
    800107f2:	00017597          	auipc	a1,0x17
    800107f6:	52e58593          	addi	a1,a1,1326 # 80027d20 <__func__.0+0x2c0>
    800107fa:	00017517          	auipc	a0,0x17
    800107fe:	57650513          	addi	a0,a0,1398 # 80027d70 <__func__.0+0x310>
    80010802:	4f4150ef          	jal	80025cf6 <printf>
    80010806:	00039797          	auipc	a5,0x39
    8001080a:	80b7c783          	lbu	a5,-2037(a5) # 80049011 <excpt+0x1>
    8001080e:	2a079963          	bnez	a5,80010ac0 <addr_unaligned+0x5f8>
    80010812:	4529                	li	a0,10
    80010814:	2ec140ef          	jal	80024b00 <putchar>
    80010818:	c499                	beqz	s1,80010826 <addr_unaligned+0x35e>
    8001081a:	00038497          	auipc	s1,0x38
    8001081e:	7f74c483          	lbu	s1,2039(s1) # 80049011 <excpt+0x1>
    80010822:	0014c493          	xori	s1,s1,1
        excpt.triggered == false
    );

    //store half地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    80010826:	0330000f          	fence	rw,rw
    8001082a:	4785                	li	a5,1
    8001082c:	00039717          	auipc	a4,0x39
    80010830:	80073e23          	sd	zero,-2020(a4) # 80049048 <excpt+0x38>
    80010834:	00f41023          	sh	a5,0(s0)
    80010838:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sh, "sh", uint16_t);
    8001083c:	001007b7          	lui	a5,0x100
    80010840:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    80010844:	07b2                	slli	a5,a5,0xc
    80010846:	0785                	addi	a5,a5,1
    80010848:	01279023          	sh	s2,0(a5)
    sh(vaddr_f,value);
    TEST_ASSERT("store half address is not aligned result in a sam",         
    8001084c:	08200593          	li	a1,130
    80010850:	0001a617          	auipc	a2,0x1a
    80010854:	6a060613          	addi	a2,a2,1696 # 8002aef0 <__func__.0+0x3490>
    80010858:	00017517          	auipc	a0,0x17
    8001085c:	50050513          	addi	a0,a0,1280 # 80027d58 <__func__.0+0x2f8>
    80010860:	496150ef          	jal	80025cf6 <printf>
    80010864:	00038797          	auipc	a5,0x38
    80010868:	7ad7c783          	lbu	a5,1965(a5) # 80049011 <excpt+0x1>
    8001086c:	00017597          	auipc	a1,0x17
    80010870:	4c458593          	addi	a1,a1,1220 # 80027d30 <__func__.0+0x2d0>
    80010874:	cf89                	beqz	a5,8001088e <addr_unaligned+0x3c6>
    80010876:	6418                	ld	a4,8(s0)
    80010878:	4799                	li	a5,6
    8001087a:	00017597          	auipc	a1,0x17
    8001087e:	4a658593          	addi	a1,a1,1190 # 80027d20 <__func__.0+0x2c0>
    80010882:	00f70663          	beq	a4,a5,8001088e <addr_unaligned+0x3c6>
    80010886:	00017597          	auipc	a1,0x17
    8001088a:	4aa58593          	addi	a1,a1,1194 # 80027d30 <__func__.0+0x2d0>
    8001088e:	00017517          	auipc	a0,0x17
    80010892:	4e250513          	addi	a0,a0,1250 # 80027d70 <__func__.0+0x310>
    80010896:	460150ef          	jal	80025cf6 <printf>
    8001089a:	00038797          	auipc	a5,0x38
    8001089e:	7777c783          	lbu	a5,1911(a5) # 80049011 <excpt+0x1>
    800108a2:	c789                	beqz	a5,800108ac <addr_unaligned+0x3e4>
    800108a4:	6418                	ld	a4,8(s0)
    800108a6:	4799                	li	a5,6
    800108a8:	00f70c63          	beq	a4,a5,800108c0 <addr_unaligned+0x3f8>
    800108ac:	00017517          	auipc	a0,0x17
    800108b0:	4cc50513          	addi	a0,a0,1228 # 80027d78 <__func__.0+0x318>
    800108b4:	442150ef          	jal	80025cf6 <printf>
    800108b8:	02900513          	li	a0,41
    800108bc:	244140ef          	jal	80024b00 <putchar>
    800108c0:	4529                	li	a0,10
    800108c2:	23e140ef          	jal	80024b00 <putchar>
    800108c6:	c881                	beqz	s1,800108d6 <addr_unaligned+0x40e>
    800108c8:	00038797          	auipc	a5,0x38
    800108cc:	7497c783          	lbu	a5,1865(a5) # 80049011 <excpt+0x1>
    800108d0:	4481                	li	s1,0
    800108d2:	1c079263          	bnez	a5,80010a96 <addr_unaligned+0x5ce>
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );
    
    //store word地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    800108d6:	0330000f          	fence	rw,rw
    800108da:	4785                	li	a5,1
    800108dc:	00038717          	auipc	a4,0x38
    800108e0:	76073623          	sd	zero,1900(a4) # 80049048 <excpt+0x38>
    800108e4:	00f41023          	sh	a5,0(s0)
    800108e8:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sw, "sw", uint32_t);
    800108ec:	001007b7          	lui	a5,0x100
    800108f0:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    800108f4:	07b2                	slli	a5,a5,0xc
    800108f6:	0785                	addi	a5,a5,1
    800108f8:	0127a023          	sw	s2,0(a5)
    sw(vaddr_f,value);
    TEST_ASSERT("store word address is not aligned result in a sam",         
    800108fc:	08200593          	li	a1,130
    80010900:	0001a617          	auipc	a2,0x1a
    80010904:	62860613          	addi	a2,a2,1576 # 8002af28 <__func__.0+0x34c8>
    80010908:	00017517          	auipc	a0,0x17
    8001090c:	45050513          	addi	a0,a0,1104 # 80027d58 <__func__.0+0x2f8>
    80010910:	3e6150ef          	jal	80025cf6 <printf>
    80010914:	00038797          	auipc	a5,0x38
    80010918:	6fd7c783          	lbu	a5,1789(a5) # 80049011 <excpt+0x1>
    8001091c:	00017597          	auipc	a1,0x17
    80010920:	41458593          	addi	a1,a1,1044 # 80027d30 <__func__.0+0x2d0>
    80010924:	cf89                	beqz	a5,8001093e <addr_unaligned+0x476>
    80010926:	6418                	ld	a4,8(s0)
    80010928:	4799                	li	a5,6
    8001092a:	00017597          	auipc	a1,0x17
    8001092e:	3f658593          	addi	a1,a1,1014 # 80027d20 <__func__.0+0x2c0>
    80010932:	00f70663          	beq	a4,a5,8001093e <addr_unaligned+0x476>
    80010936:	00017597          	auipc	a1,0x17
    8001093a:	3fa58593          	addi	a1,a1,1018 # 80027d30 <__func__.0+0x2d0>
    8001093e:	00017517          	auipc	a0,0x17
    80010942:	43250513          	addi	a0,a0,1074 # 80027d70 <__func__.0+0x310>
    80010946:	3b0150ef          	jal	80025cf6 <printf>
    8001094a:	00038797          	auipc	a5,0x38
    8001094e:	6c77c783          	lbu	a5,1735(a5) # 80049011 <excpt+0x1>
    80010952:	c789                	beqz	a5,8001095c <addr_unaligned+0x494>
    80010954:	6418                	ld	a4,8(s0)
    80010956:	4799                	li	a5,6
    80010958:	00f70c63          	beq	a4,a5,80010970 <addr_unaligned+0x4a8>
    8001095c:	00017517          	auipc	a0,0x17
    80010960:	41c50513          	addi	a0,a0,1052 # 80027d78 <__func__.0+0x318>
    80010964:	392150ef          	jal	80025cf6 <printf>
    80010968:	02900513          	li	a0,41
    8001096c:	194140ef          	jal	80024b00 <putchar>
    80010970:	4529                	li	a0,10
    80010972:	18e140ef          	jal	80024b00 <putchar>
    80010976:	c881                	beqz	s1,80010986 <addr_unaligned+0x4be>
    80010978:	00038797          	auipc	a5,0x38
    8001097c:	6997c783          	lbu	a5,1689(a5) # 80049011 <excpt+0x1>
    80010980:	4481                	li	s1,0
    80010982:	10079563          	bnez	a5,80010a8c <addr_unaligned+0x5c4>
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );

    //store double word地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    80010986:	0330000f          	fence	rw,rw
    8001098a:	4785                	li	a5,1
    8001098c:	00038717          	auipc	a4,0x38
    80010990:	6a073e23          	sd	zero,1724(a4) # 80049048 <excpt+0x38>
    80010994:	00f41023          	sh	a5,0(s0)
    80010998:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8001099c:	001007b7          	lui	a5,0x100
    800109a0:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    800109a4:	07b2                	slli	a5,a5,0xc
    800109a6:	0785                	addi	a5,a5,1
    800109a8:	0127b023          	sd	s2,0(a5)
    sd(vaddr_f,value);
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    800109ac:	08200593          	li	a1,130
    800109b0:	0001a617          	auipc	a2,0x1a
    800109b4:	5b060613          	addi	a2,a2,1456 # 8002af60 <__func__.0+0x3500>
    800109b8:	00017517          	auipc	a0,0x17
    800109bc:	3a050513          	addi	a0,a0,928 # 80027d58 <__func__.0+0x2f8>
    800109c0:	336150ef          	jal	80025cf6 <printf>
    800109c4:	00038797          	auipc	a5,0x38
    800109c8:	64d7c783          	lbu	a5,1613(a5) # 80049011 <excpt+0x1>
    800109cc:	00017597          	auipc	a1,0x17
    800109d0:	36458593          	addi	a1,a1,868 # 80027d30 <__func__.0+0x2d0>
    800109d4:	cf89                	beqz	a5,800109ee <addr_unaligned+0x526>
    800109d6:	6418                	ld	a4,8(s0)
    800109d8:	4799                	li	a5,6
    800109da:	00017597          	auipc	a1,0x17
    800109de:	34658593          	addi	a1,a1,838 # 80027d20 <__func__.0+0x2c0>
    800109e2:	00f70663          	beq	a4,a5,800109ee <addr_unaligned+0x526>
    800109e6:	00017597          	auipc	a1,0x17
    800109ea:	34a58593          	addi	a1,a1,842 # 80027d30 <__func__.0+0x2d0>
    800109ee:	00017517          	auipc	a0,0x17
    800109f2:	38250513          	addi	a0,a0,898 # 80027d70 <__func__.0+0x310>
    800109f6:	300150ef          	jal	80025cf6 <printf>
    800109fa:	00038797          	auipc	a5,0x38
    800109fe:	6177c783          	lbu	a5,1559(a5) # 80049011 <excpt+0x1>
    80010a02:	c789                	beqz	a5,80010a0c <addr_unaligned+0x544>
    80010a04:	6418                	ld	a4,8(s0)
    80010a06:	4799                	li	a5,6
    80010a08:	00f70c63          	beq	a4,a5,80010a20 <addr_unaligned+0x558>
    80010a0c:	00017517          	auipc	a0,0x17
    80010a10:	36c50513          	addi	a0,a0,876 # 80027d78 <__func__.0+0x318>
    80010a14:	2e2150ef          	jal	80025cf6 <printf>
    80010a18:	02900513          	li	a0,41
    80010a1c:	0e4140ef          	jal	80024b00 <putchar>
    80010a20:	4529                	li	a0,10
    80010a22:	0de140ef          	jal	80024b00 <putchar>
    80010a26:	c095                	beqz	s1,80010a4a <addr_unaligned+0x582>
    80010a28:	00038497          	auipc	s1,0x38
    80010a2c:	5e94c483          	lbu	s1,1513(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );

    TEST_END();
    80010a30:	00017597          	auipc	a1,0x17
    80010a34:	30058593          	addi	a1,a1,768 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    80010a38:	cc91                	beqz	s1,80010a54 <addr_unaligned+0x58c>
    80010a3a:	6418                	ld	a4,8(s0)
    80010a3c:	4799                	li	a5,6
    TEST_END();
    80010a3e:	00017597          	auipc	a1,0x17
    80010a42:	2e258593          	addi	a1,a1,738 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    80010a46:	00f70763          	beq	a4,a5,80010a54 <addr_unaligned+0x58c>
    80010a4a:	4481                	li	s1,0
    TEST_END();
    80010a4c:	00017597          	auipc	a1,0x17
    80010a50:	2e458593          	addi	a1,a1,740 # 80027d30 <__func__.0+0x2d0>
    80010a54:	00017517          	auipc	a0,0x17
    80010a58:	38450513          	addi	a0,a0,900 # 80027dd8 <__func__.0+0x378>
    80010a5c:	29a150ef          	jal	80025cf6 <printf>
    80010a60:	4511                	li	a0,4
    80010a62:	994f00ef          	jal	80000bf6 <goto_priv>
    80010a66:	a47f00ef          	jal	800014ac <reset_state>

    80010a6a:	60e2                	ld	ra,24(sp)
    80010a6c:	6442                	ld	s0,16(sp)
    80010a6e:	6902                	ld	s2,0(sp)
    80010a70:	8526                	mv	a0,s1
    80010a72:	64a2                	ld	s1,8(sp)
    80010a74:	6105                	addi	sp,sp,32
    80010a76:	8082                	ret
    TEST_ASSERT("load word address is not aligned result in a lam",         
    80010a78:	6404                	ld	s1,8(s0)
    80010a7a:	14f1                	addi	s1,s1,-4
    80010a7c:	0014b493          	seqz	s1,s1
    80010a80:	b98d                	j	800106f2 <addr_unaligned+0x22a>
    TEST_ASSERT(" load half address is not aligned result in a lam",         
    80010a82:	6404                	ld	s1,8(s0)
    80010a84:	14f1                	addi	s1,s1,-4
    80010a86:	0014b493          	seqz	s1,s1
    80010a8a:	be65                	j	80010642 <addr_unaligned+0x17a>
    TEST_ASSERT("store word address is not aligned result in a sam",         
    80010a8c:	6404                	ld	s1,8(s0)
    80010a8e:	14e9                	addi	s1,s1,-6
    80010a90:	0014b493          	seqz	s1,s1
    80010a94:	bdcd                	j	80010986 <addr_unaligned+0x4be>
    TEST_ASSERT("store half address is not aligned result in a sam",         
    80010a96:	6404                	ld	s1,8(s0)
    80010a98:	14e9                	addi	s1,s1,-6
    80010a9a:	0014b493          	seqz	s1,s1
    80010a9e:	bd25                	j	800108d6 <addr_unaligned+0x40e>
    TEST_ASSERT("load double word address is not aligned result in a lam",         
    80010aa0:	6404                	ld	s1,8(s0)
    80010aa2:	14f1                	addi	s1,s1,-4
    80010aa4:	0014b493          	seqz	s1,s1
    80010aa8:	b9ed                	j	800107a2 <addr_unaligned+0x2da>
    TEST_ASSERT("load byte address is not aligned successful",         
    80010aaa:	00017517          	auipc	a0,0x17
    80010aae:	2ce50513          	addi	a0,a0,718 # 80027d78 <__func__.0+0x318>
    80010ab2:	244150ef          	jal	80025cf6 <printf>
    80010ab6:	02900513          	li	a0,41
    80010aba:	046140ef          	jal	80024b00 <putchar>
    80010abe:	b4d1                	j	80010582 <addr_unaligned+0xba>
    TEST_ASSERT("store byte address is not aligned successful",         
    80010ac0:	00017517          	auipc	a0,0x17
    80010ac4:	2b850513          	addi	a0,a0,696 # 80027d78 <__func__.0+0x318>
    80010ac8:	22e150ef          	jal	80025cf6 <printf>
    80010acc:	02900513          	li	a0,41
    80010ad0:	030140ef          	jal	80024b00 <putchar>
    80010ad4:	bb3d                	j	80010812 <addr_unaligned+0x34a>

0000000080010ad6 <illegal_except_1>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool illegal_except_1() {
    80010ad6:	1101                	addi	sp,sp,-32

    TEST_START();
    80010ad8:	00016597          	auipc	a1,0x16
    80010adc:	e5858593          	addi	a1,a1,-424 # 80026930 <__func__.14>
    80010ae0:	00017517          	auipc	a0,0x17
    80010ae4:	26050513          	addi	a0,a0,608 # 80027d40 <__func__.0+0x2e0>
bool illegal_except_1() {
    80010ae8:	ec06                	sd	ra,24(sp)
    80010aea:	e822                	sd	s0,16(sp)
    80010aec:	e426                	sd	s1,8(sp)
    TEST_START();
    80010aee:	208150ef          	jal	80025cf6 <printf>
    80010af2:	4529                	li	a0,10
    80010af4:	00c140ef          	jal	80024b00 <putchar>

    TEST_SETUP_EXCEPT();
    80010af8:	0330000f          	fence	rw,rw
    80010afc:	00038417          	auipc	s0,0x38
    80010b00:	51440413          	addi	s0,s0,1300 # 80049010 <excpt>
    80010b04:	4785                	li	a5,1
    80010b06:	00038717          	auipc	a4,0x38
    80010b0a:	54073123          	sd	zero,1346(a4) # 80049048 <excpt+0x38>
    80010b0e:	00f41023          	sh	a5,0(s0)
    80010b12:	0330000f          	fence	rw,rw
    //     excpt.cause == CAUSE_ILI
    // ); 

    //访问有效，CSRoptype非跳转行为，且访问CSR地址不在CSR mapping地址范围内
    
    CSRR(CSR_INVALID);
    80010b16:	70102773          	csrr	a4,0x701
    TEST_SETUP_EXCEPT();
    80010b1a:	0330000f          	fence	rw,rw
    80010b1e:	00038717          	auipc	a4,0x38
    80010b22:	52073523          	sd	zero,1322(a4) # 80049048 <excpt+0x38>
    80010b26:	00f41023          	sh	a5,0(s0)
    80010b2a:	0330000f          	fence	rw,rw
    TEST_ASSERT("CSR addr not match the csr mapping leads to illegal instruction interrupt",
    80010b2e:	08200593          	li	a1,130
    80010b32:	0001a617          	auipc	a2,0x1a
    80010b36:	46e60613          	addi	a2,a2,1134 # 8002afa0 <__func__.0+0x3540>
    80010b3a:	00017517          	auipc	a0,0x17
    80010b3e:	21e50513          	addi	a0,a0,542 # 80027d58 <__func__.0+0x2f8>
    80010b42:	1b4150ef          	jal	80025cf6 <printf>
    80010b46:	00038797          	auipc	a5,0x38
    80010b4a:	4cb7c783          	lbu	a5,1227(a5) # 80049011 <excpt+0x1>
    80010b4e:	00017597          	auipc	a1,0x17
    80010b52:	1e258593          	addi	a1,a1,482 # 80027d30 <__func__.0+0x2d0>
    80010b56:	cf89                	beqz	a5,80010b70 <illegal_except_1+0x9a>
    80010b58:	6418                	ld	a4,8(s0)
    80010b5a:	4789                	li	a5,2
    80010b5c:	00017597          	auipc	a1,0x17
    80010b60:	1c458593          	addi	a1,a1,452 # 80027d20 <__func__.0+0x2c0>
    80010b64:	00f70663          	beq	a4,a5,80010b70 <illegal_except_1+0x9a>
    80010b68:	00017597          	auipc	a1,0x17
    80010b6c:	1c858593          	addi	a1,a1,456 # 80027d30 <__func__.0+0x2d0>
    80010b70:	00017517          	auipc	a0,0x17
    80010b74:	20050513          	addi	a0,a0,512 # 80027d70 <__func__.0+0x310>
    80010b78:	17e150ef          	jal	80025cf6 <printf>
    80010b7c:	00038797          	auipc	a5,0x38
    80010b80:	4957c783          	lbu	a5,1173(a5) # 80049011 <excpt+0x1>
    80010b84:	c789                	beqz	a5,80010b8e <illegal_except_1+0xb8>
    80010b86:	6418                	ld	a4,8(s0)
    80010b88:	4789                	li	a5,2
    80010b8a:	00f70c63          	beq	a4,a5,80010ba2 <illegal_except_1+0xcc>
    80010b8e:	00017517          	auipc	a0,0x17
    80010b92:	1ea50513          	addi	a0,a0,490 # 80027d78 <__func__.0+0x318>
    80010b96:	160150ef          	jal	80025cf6 <printf>
    80010b9a:	02900513          	li	a0,41
    80010b9e:	763130ef          	jal	80024b00 <putchar>
    80010ba2:	4529                	li	a0,10
    80010ba4:	75d130ef          	jal	80024b00 <putchar>
    80010ba8:	00038597          	auipc	a1,0x38
    80010bac:	4695c583          	lbu	a1,1129(a1) # 80049011 <excpt+0x1>
    80010bb0:	4481                	li	s1,0
    80010bb2:	c589                	beqz	a1,80010bbc <illegal_except_1+0xe6>
    80010bb4:	6404                	ld	s1,8(s0)
    80010bb6:	14f9                	addi	s1,s1,-2
    80010bb8:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 
    printf("%d",excpt.triggered);
    80010bbc:	0001a517          	auipc	a0,0x1a
    80010bc0:	43450513          	addi	a0,a0,1076 # 8002aff0 <__func__.0+0x3590>
    80010bc4:	132150ef          	jal	80025cf6 <printf>
    printf("%d",excpt.cause);
    80010bc8:	640c                	ld	a1,8(s0)
    80010bca:	0001a517          	auipc	a0,0x1a
    80010bce:	42650513          	addi	a0,a0,1062 # 8002aff0 <__func__.0+0x3590>
    80010bd2:	124150ef          	jal	80025cf6 <printf>

    //当前权限满足最低CSR访问权限，CSR写行为，但访问的CSR只读
    goto_priv(PRIV_M);
    80010bd6:	4511                	li	a0,4
    80010bd8:	81ef00ef          	jal	80000bf6 <goto_priv>
    CSRW(CSR_MCONFIGPTR,0xfff);
    80010bdc:	6785                	lui	a5,0x1
    80010bde:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    80010be0:	f1579073          	csrw	0xf15,a5
    TEST_ASSERT("write csr which is read-only leads to illegal instruction interrupt",
    80010be4:	08200593          	li	a1,130
    80010be8:	0001a617          	auipc	a2,0x1a
    80010bec:	41060613          	addi	a2,a2,1040 # 8002aff8 <__func__.0+0x3598>
    80010bf0:	00017517          	auipc	a0,0x17
    80010bf4:	16850513          	addi	a0,a0,360 # 80027d58 <__func__.0+0x2f8>
    80010bf8:	0fe150ef          	jal	80025cf6 <printf>
    80010bfc:	00038797          	auipc	a5,0x38
    80010c00:	4157c783          	lbu	a5,1045(a5) # 80049011 <excpt+0x1>
    80010c04:	00017597          	auipc	a1,0x17
    80010c08:	12c58593          	addi	a1,a1,300 # 80027d30 <__func__.0+0x2d0>
    80010c0c:	cf89                	beqz	a5,80010c26 <illegal_except_1+0x150>
    80010c0e:	6418                	ld	a4,8(s0)
    80010c10:	4789                	li	a5,2
    80010c12:	00017597          	auipc	a1,0x17
    80010c16:	10e58593          	addi	a1,a1,270 # 80027d20 <__func__.0+0x2c0>
    80010c1a:	00f70663          	beq	a4,a5,80010c26 <illegal_except_1+0x150>
    80010c1e:	00017597          	auipc	a1,0x17
    80010c22:	11258593          	addi	a1,a1,274 # 80027d30 <__func__.0+0x2d0>
    80010c26:	00017517          	auipc	a0,0x17
    80010c2a:	14a50513          	addi	a0,a0,330 # 80027d70 <__func__.0+0x310>
    80010c2e:	0c8150ef          	jal	80025cf6 <printf>
    80010c32:	00038797          	auipc	a5,0x38
    80010c36:	3df7c783          	lbu	a5,991(a5) # 80049011 <excpt+0x1>
    80010c3a:	c789                	beqz	a5,80010c44 <illegal_except_1+0x16e>
    80010c3c:	6418                	ld	a4,8(s0)
    80010c3e:	4789                	li	a5,2
    80010c40:	00f70c63          	beq	a4,a5,80010c58 <illegal_except_1+0x182>
    80010c44:	00017517          	auipc	a0,0x17
    80010c48:	13450513          	addi	a0,a0,308 # 80027d78 <__func__.0+0x318>
    80010c4c:	0aa150ef          	jal	80025cf6 <printf>
    80010c50:	02900513          	li	a0,41
    80010c54:	6ad130ef          	jal	80024b00 <putchar>
    80010c58:	4529                	li	a0,10
    80010c5a:	6a7130ef          	jal	80024b00 <putchar>
    80010c5e:	c881                	beqz	s1,80010c6e <illegal_except_1+0x198>
    80010c60:	00038797          	auipc	a5,0x38
    80010c64:	3b17c783          	lbu	a5,945(a5) # 80049011 <excpt+0x1>
    80010c68:	4481                	li	s1,0
    80010c6a:	0e079763          	bnez	a5,80010d58 <illegal_except_1+0x282>
        excpt.cause == CAUSE_ILI 
    ); 


    //当前权限不满足最低CSR访问权限
    goto_priv(PRIV_HS);
    80010c6e:	450d                	li	a0,3
    80010c70:	f87ef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010c74:	0330000f          	fence	rw,rw
    80010c78:	4785                	li	a5,1
    80010c7a:	00038717          	auipc	a4,0x38
    80010c7e:	3c073723          	sd	zero,974(a4) # 80049048 <excpt+0x38>
    80010c82:	00f41023          	sh	a5,0(s0)
    80010c86:	0330000f          	fence	rw,rw
    CSRR(CSR_MIE);
    80010c8a:	304027f3          	csrr	a5,mie
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    80010c8e:	08200593          	li	a1,130
    80010c92:	0001a617          	auipc	a2,0x1a
    80010c96:	3ae60613          	addi	a2,a2,942 # 8002b040 <__func__.0+0x35e0>
    80010c9a:	00017517          	auipc	a0,0x17
    80010c9e:	0be50513          	addi	a0,a0,190 # 80027d58 <__func__.0+0x2f8>
    80010ca2:	054150ef          	jal	80025cf6 <printf>
    80010ca6:	00038797          	auipc	a5,0x38
    80010caa:	36b7c783          	lbu	a5,875(a5) # 80049011 <excpt+0x1>
    80010cae:	00017597          	auipc	a1,0x17
    80010cb2:	08258593          	addi	a1,a1,130 # 80027d30 <__func__.0+0x2d0>
    80010cb6:	cf89                	beqz	a5,80010cd0 <illegal_except_1+0x1fa>
    80010cb8:	6418                	ld	a4,8(s0)
    80010cba:	4789                	li	a5,2
    80010cbc:	00017597          	auipc	a1,0x17
    80010cc0:	06458593          	addi	a1,a1,100 # 80027d20 <__func__.0+0x2c0>
    80010cc4:	00f70663          	beq	a4,a5,80010cd0 <illegal_except_1+0x1fa>
    80010cc8:	00017597          	auipc	a1,0x17
    80010ccc:	06858593          	addi	a1,a1,104 # 80027d30 <__func__.0+0x2d0>
    80010cd0:	00017517          	auipc	a0,0x17
    80010cd4:	0a050513          	addi	a0,a0,160 # 80027d70 <__func__.0+0x310>
    80010cd8:	01e150ef          	jal	80025cf6 <printf>
    80010cdc:	00038797          	auipc	a5,0x38
    80010ce0:	3357c783          	lbu	a5,821(a5) # 80049011 <excpt+0x1>
    80010ce4:	c789                	beqz	a5,80010cee <illegal_except_1+0x218>
    80010ce6:	6418                	ld	a4,8(s0)
    80010ce8:	4789                	li	a5,2
    80010cea:	00f70c63          	beq	a4,a5,80010d02 <illegal_except_1+0x22c>
    80010cee:	00017517          	auipc	a0,0x17
    80010cf2:	08a50513          	addi	a0,a0,138 # 80027d78 <__func__.0+0x318>
    80010cf6:	000150ef          	jal	80025cf6 <printf>
    80010cfa:	02900513          	li	a0,41
    80010cfe:	603130ef          	jal	80024b00 <putchar>
    80010d02:	4529                	li	a0,10
    80010d04:	5fd130ef          	jal	80024b00 <putchar>
    80010d08:	c095                	beqz	s1,80010d2c <illegal_except_1+0x256>
    80010d0a:	00038497          	auipc	s1,0x38
    80010d0e:	3074c483          	lbu	s1,775(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80010d12:	00017597          	auipc	a1,0x17
    80010d16:	01e58593          	addi	a1,a1,30 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    80010d1a:	cc91                	beqz	s1,80010d36 <illegal_except_1+0x260>
    80010d1c:	6418                	ld	a4,8(s0)
    80010d1e:	4789                	li	a5,2
    TEST_END();
    80010d20:	00017597          	auipc	a1,0x17
    80010d24:	00058593          	mv	a1,a1
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    80010d28:	00f70763          	beq	a4,a5,80010d36 <illegal_except_1+0x260>
    80010d2c:	4481                	li	s1,0
    TEST_END();
    80010d2e:	00017597          	auipc	a1,0x17
    80010d32:	00258593          	addi	a1,a1,2 # 80027d30 <__func__.0+0x2d0>
    80010d36:	00017517          	auipc	a0,0x17
    80010d3a:	0a250513          	addi	a0,a0,162 # 80027dd8 <__func__.0+0x378>
    80010d3e:	7b9140ef          	jal	80025cf6 <printf>
    80010d42:	4511                	li	a0,4
    80010d44:	eb3ef0ef          	jal	80000bf6 <goto_priv>
    80010d48:	f64f00ef          	jal	800014ac <reset_state>

}
    80010d4c:	60e2                	ld	ra,24(sp)
    80010d4e:	6442                	ld	s0,16(sp)
    80010d50:	8526                	mv	a0,s1
    80010d52:	64a2                	ld	s1,8(sp)
    80010d54:	6105                	addi	sp,sp,32
    80010d56:	8082                	ret
    TEST_ASSERT("write csr which is read-only leads to illegal instruction interrupt",
    80010d58:	6404                	ld	s1,8(s0)
    80010d5a:	14f9                	addi	s1,s1,-2
    80010d5c:	0014b493          	seqz	s1,s1
    80010d60:	b739                	j	80010c6e <illegal_except_1+0x198>

0000000080010d62 <illegal_except_2>:

bool illegal_except_2() {
    80010d62:	1101                	addi	sp,sp,-32

    TEST_START();
    80010d64:	00016597          	auipc	a1,0x16
    80010d68:	be458593          	addi	a1,a1,-1052 # 80026948 <__func__.13>
    80010d6c:	00017517          	auipc	a0,0x17
    80010d70:	fd450513          	addi	a0,a0,-44 # 80027d40 <__func__.0+0x2e0>
bool illegal_except_2() {
    80010d74:	ec06                	sd	ra,24(sp)
    80010d76:	e822                	sd	s0,16(sp)
    80010d78:	e426                	sd	s1,8(sp)
    TEST_START();
    80010d7a:	77d140ef          	jal	80025cf6 <printf>
    80010d7e:	4529                	li	a0,10
    80010d80:	581130ef          	jal	80024b00 <putchar>


    //特殊情况，没有开启虚存，在S模式下访问Satp寄存器，但被sstatus.TVM拦截
    goto_priv(PRIV_M);
    80010d84:	4511                	li	a0,4
    80010d86:	e71ef0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    80010d8a:	001007b7          	lui	a5,0x100
    80010d8e:	3007a073          	csrs	mstatus,a5
    CSRW(satp, 0x0);    //关闭虚存
    80010d92:	18005073          	csrwi	satp,0
    goto_priv(PRIV_HS);
    80010d96:	450d                	li	a0,3
    80010d98:	e5fef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010d9c:	0330000f          	fence	rw,rw
    80010da0:	00038417          	auipc	s0,0x38
    80010da4:	27040413          	addi	s0,s0,624 # 80049010 <excpt>
    80010da8:	4785                	li	a5,1
    80010daa:	00038717          	auipc	a4,0x38
    80010dae:	28073f23          	sd	zero,670(a4) # 80049048 <excpt+0x38>
    80010db2:	00f41023          	sh	a5,0(s0)
    80010db6:	0330000f          	fence	rw,rw
    CSRR(satp);
    80010dba:	180027f3          	csrr	a5,satp
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    80010dbe:	08200593          	li	a1,130
    80010dc2:	0001a617          	auipc	a2,0x1a
    80010dc6:	2d660613          	addi	a2,a2,726 # 8002b098 <__func__.0+0x3638>
    80010dca:	00017517          	auipc	a0,0x17
    80010dce:	f8e50513          	addi	a0,a0,-114 # 80027d58 <__func__.0+0x2f8>
    80010dd2:	725140ef          	jal	80025cf6 <printf>
    80010dd6:	00038797          	auipc	a5,0x38
    80010dda:	23b7c783          	lbu	a5,571(a5) # 80049011 <excpt+0x1>
    80010dde:	00017597          	auipc	a1,0x17
    80010de2:	f5258593          	addi	a1,a1,-174 # 80027d30 <__func__.0+0x2d0>
    80010de6:	cf89                	beqz	a5,80010e00 <illegal_except_2+0x9e>
    80010de8:	6418                	ld	a4,8(s0)
    80010dea:	4789                	li	a5,2
    80010dec:	00017597          	auipc	a1,0x17
    80010df0:	f3458593          	addi	a1,a1,-204 # 80027d20 <__func__.0+0x2c0>
    80010df4:	00f70663          	beq	a4,a5,80010e00 <illegal_except_2+0x9e>
    80010df8:	00017597          	auipc	a1,0x17
    80010dfc:	f3858593          	addi	a1,a1,-200 # 80027d30 <__func__.0+0x2d0>
    80010e00:	00017517          	auipc	a0,0x17
    80010e04:	f7050513          	addi	a0,a0,-144 # 80027d70 <__func__.0+0x310>
    80010e08:	6ef140ef          	jal	80025cf6 <printf>
    80010e0c:	00038797          	auipc	a5,0x38
    80010e10:	2057c783          	lbu	a5,517(a5) # 80049011 <excpt+0x1>
    80010e14:	c789                	beqz	a5,80010e1e <illegal_except_2+0xbc>
    80010e16:	6418                	ld	a4,8(s0)
    80010e18:	4789                	li	a5,2
    80010e1a:	00f70c63          	beq	a4,a5,80010e32 <illegal_except_2+0xd0>
    80010e1e:	00017517          	auipc	a0,0x17
    80010e22:	f5a50513          	addi	a0,a0,-166 # 80027d78 <__func__.0+0x318>
    80010e26:	6d1140ef          	jal	80025cf6 <printf>
    80010e2a:	02900513          	li	a0,41
    80010e2e:	4d3130ef          	jal	80024b00 <putchar>
    80010e32:	4529                	li	a0,10
    80010e34:	4cd130ef          	jal	80024b00 <putchar>
    80010e38:	00038497          	auipc	s1,0x38
    80010e3c:	1d94c483          	lbu	s1,473(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80010e40:	00017597          	auipc	a1,0x17
    80010e44:	ef058593          	addi	a1,a1,-272 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    80010e48:	cc91                	beqz	s1,80010e64 <illegal_except_2+0x102>
    80010e4a:	6418                	ld	a4,8(s0)
    80010e4c:	4789                	li	a5,2
    TEST_END();
    80010e4e:	00017597          	auipc	a1,0x17
    80010e52:	ed258593          	addi	a1,a1,-302 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    80010e56:	00f70763          	beq	a4,a5,80010e64 <illegal_except_2+0x102>
    80010e5a:	4481                	li	s1,0
    TEST_END();
    80010e5c:	00017597          	auipc	a1,0x17
    80010e60:	ed458593          	addi	a1,a1,-300 # 80027d30 <__func__.0+0x2d0>
    80010e64:	00017517          	auipc	a0,0x17
    80010e68:	f7450513          	addi	a0,a0,-140 # 80027dd8 <__func__.0+0x378>
    80010e6c:	68b140ef          	jal	80025cf6 <printf>
    80010e70:	4511                	li	a0,4
    80010e72:	d85ef0ef          	jal	80000bf6 <goto_priv>
    80010e76:	e36f00ef          	jal	800014ac <reset_state>

}
    80010e7a:	60e2                	ld	ra,24(sp)
    80010e7c:	6442                	ld	s0,16(sp)
    80010e7e:	8526                	mv	a0,s1
    80010e80:	64a2                	ld	s1,8(sp)
    80010e82:	6105                	addi	sp,sp,32
    80010e84:	8082                	ret

0000000080010e86 <illegal_except_3>:

bool illegal_except_3() {
    80010e86:	1101                	addi	sp,sp,-32

    TEST_START();
    80010e88:	00016597          	auipc	a1,0x16
    80010e8c:	ad858593          	addi	a1,a1,-1320 # 80026960 <__func__.12>
    80010e90:	00017517          	auipc	a0,0x17
    80010e94:	eb050513          	addi	a0,a0,-336 # 80027d40 <__func__.0+0x2e0>
bool illegal_except_3() {
    80010e98:	ec06                	sd	ra,24(sp)
    80010e9a:	e822                	sd	s0,16(sp)
    80010e9c:	e426                	sd	s1,8(sp)
    TEST_START();
    80010e9e:	659140ef          	jal	80025cf6 <printf>
    80010ea2:	4529                	li	a0,10
    80010ea4:	45d130ef          	jal	80024b00 <putchar>

    TEST_SETUP_EXCEPT();
    80010ea8:	0330000f          	fence	rw,rw
    80010eac:	00038417          	auipc	s0,0x38
    80010eb0:	16440413          	addi	s0,s0,356 # 80049010 <excpt>
    80010eb4:	4785                	li	a5,1
    80010eb6:	00038717          	auipc	a4,0x38
    80010eba:	18073923          	sd	zero,402(a4) # 80049048 <excpt+0x38>
    80010ebe:	00f41023          	sh	a5,0(s0)
    80010ec2:	0330000f          	fence	rw,rw

    //执行CSR写指令尝试将非支持值写入WLRL字段时
    printf("%llx\n",CSRR(CSR_MCAUSE));
    80010ec6:	342025f3          	csrr	a1,mcause
    80010eca:	0001d517          	auipc	a0,0x1d
    80010ece:	4ae50513          	addi	a0,a0,1198 # 8002e378 <__func__.0+0x6918>
    80010ed2:	625140ef          	jal	80025cf6 <printf>
    CSRW(CSR_MCAUSE,0xfffffffff);     //不支持的值写入将不会写入，没报错
    80010ed6:	57fd                	li	a5,-1
    80010ed8:	83f1                	srli	a5,a5,0x1c
    80010eda:	34279073          	csrw	mcause,a5
    printf("%llx\n",CSRR(CSR_MCAUSE));
    80010ede:	342025f3          	csrr	a1,mcause
    80010ee2:	0001d517          	auipc	a0,0x1d
    80010ee6:	49650513          	addi	a0,a0,1174 # 8002e378 <__func__.0+0x6918>
    80010eea:	60d140ef          	jal	80025cf6 <printf>
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    80010eee:	08200593          	li	a1,130
    80010ef2:	0001a617          	auipc	a2,0x1a
    80010ef6:	20660613          	addi	a2,a2,518 # 8002b0f8 <__func__.0+0x3698>
    80010efa:	00017517          	auipc	a0,0x17
    80010efe:	e5e50513          	addi	a0,a0,-418 # 80027d58 <__func__.0+0x2f8>
    80010f02:	5f5140ef          	jal	80025cf6 <printf>
    80010f06:	00038797          	auipc	a5,0x38
    80010f0a:	10b7c783          	lbu	a5,267(a5) # 80049011 <excpt+0x1>
    80010f0e:	00017597          	auipc	a1,0x17
    80010f12:	e2258593          	addi	a1,a1,-478 # 80027d30 <__func__.0+0x2d0>
    80010f16:	cf89                	beqz	a5,80010f30 <illegal_except_3+0xaa>
    80010f18:	6418                	ld	a4,8(s0)
    80010f1a:	4789                	li	a5,2
    80010f1c:	00017597          	auipc	a1,0x17
    80010f20:	e0458593          	addi	a1,a1,-508 # 80027d20 <__func__.0+0x2c0>
    80010f24:	00f70663          	beq	a4,a5,80010f30 <illegal_except_3+0xaa>
    80010f28:	00017597          	auipc	a1,0x17
    80010f2c:	e0858593          	addi	a1,a1,-504 # 80027d30 <__func__.0+0x2d0>
    80010f30:	00017517          	auipc	a0,0x17
    80010f34:	e4050513          	addi	a0,a0,-448 # 80027d70 <__func__.0+0x310>
    80010f38:	5bf140ef          	jal	80025cf6 <printf>
    80010f3c:	00038797          	auipc	a5,0x38
    80010f40:	0d57c783          	lbu	a5,213(a5) # 80049011 <excpt+0x1>
    80010f44:	c789                	beqz	a5,80010f4e <illegal_except_3+0xc8>
    80010f46:	6418                	ld	a4,8(s0)
    80010f48:	4789                	li	a5,2
    80010f4a:	00f70c63          	beq	a4,a5,80010f62 <illegal_except_3+0xdc>
    80010f4e:	00017517          	auipc	a0,0x17
    80010f52:	e2a50513          	addi	a0,a0,-470 # 80027d78 <__func__.0+0x318>
    80010f56:	5a1140ef          	jal	80025cf6 <printf>
    80010f5a:	02900513          	li	a0,41
    80010f5e:	3a3130ef          	jal	80024b00 <putchar>
    80010f62:	4529                	li	a0,10
    80010f64:	39d130ef          	jal	80024b00 <putchar>
    80010f68:	00038497          	auipc	s1,0x38
    80010f6c:	0a94c483          	lbu	s1,169(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 


    TEST_END();
    80010f70:	00017597          	auipc	a1,0x17
    80010f74:	dc058593          	addi	a1,a1,-576 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    80010f78:	cc91                	beqz	s1,80010f94 <illegal_except_3+0x10e>
    80010f7a:	6418                	ld	a4,8(s0)
    80010f7c:	4789                	li	a5,2
    TEST_END();
    80010f7e:	00017597          	auipc	a1,0x17
    80010f82:	da258593          	addi	a1,a1,-606 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    80010f86:	00f70763          	beq	a4,a5,80010f94 <illegal_except_3+0x10e>
    80010f8a:	4481                	li	s1,0
    TEST_END();
    80010f8c:	00017597          	auipc	a1,0x17
    80010f90:	da458593          	addi	a1,a1,-604 # 80027d30 <__func__.0+0x2d0>
    80010f94:	00017517          	auipc	a0,0x17
    80010f98:	e4450513          	addi	a0,a0,-444 # 80027dd8 <__func__.0+0x378>
    80010f9c:	55b140ef          	jal	80025cf6 <printf>
    80010fa0:	4511                	li	a0,4
    80010fa2:	c55ef0ef          	jal	80000bf6 <goto_priv>
    80010fa6:	d06f00ef          	jal	800014ac <reset_state>
}
    80010faa:	60e2                	ld	ra,24(sp)
    80010fac:	6442                	ld	s0,16(sp)
    80010fae:	8526                	mv	a0,s1
    80010fb0:	64a2                	ld	s1,8(sp)
    80010fb2:	6105                	addi	sp,sp,32
    80010fb4:	8082                	ret

0000000080010fb6 <illegal_except_4>:



bool illegal_except_4() {
    80010fb6:	1101                	addi	sp,sp,-32

    TEST_START();
    80010fb8:	00016597          	auipc	a1,0x16
    80010fbc:	9c058593          	addi	a1,a1,-1600 # 80026978 <__func__.11>
    80010fc0:	00017517          	auipc	a0,0x17
    80010fc4:	d8050513          	addi	a0,a0,-640 # 80027d40 <__func__.0+0x2e0>
bool illegal_except_4() {
    80010fc8:	ec06                	sd	ra,24(sp)
    80010fca:	e822                	sd	s0,16(sp)
    80010fcc:	e426                	sd	s1,8(sp)
    80010fce:	e04a                	sd	s2,0(sp)
    TEST_START();
    80010fd0:	527140ef          	jal	80025cf6 <printf>
    80010fd4:	4529                	li	a0,10
    80010fd6:	32b130ef          	jal	80024b00 <putchar>

    //M模式下可以访问任何CSR
    goto_priv(PRIV_M);
    80010fda:	4511                	li	a0,4
    80010fdc:	c1bef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010fe0:	0330000f          	fence	rw,rw
    80010fe4:	00038417          	auipc	s0,0x38
    80010fe8:	02c40413          	addi	s0,s0,44 # 80049010 <excpt>
    80010fec:	4785                	li	a5,1
    80010fee:	00038717          	auipc	a4,0x38
    80010ff2:	04073d23          	sd	zero,90(a4) # 80049048 <excpt+0x38>
    80010ff6:	00f41023          	sh	a5,0(s0)
    80010ffa:	0330000f          	fence	rw,rw
    CSRR(CSR_MCAUSE);
    80010ffe:	342027f3          	csrr	a5,mcause
    CSRR(CSR_SCAUSE);
    80011002:	142027f3          	csrr	a5,scause
    CSRR(CSR_VSCAUSE);
    80011006:	242027f3          	csrr	a5,vscause
    TEST_ASSERT("m mode access any csr successful",
    8001100a:	08200593          	li	a1,130
    8001100e:	0001a617          	auipc	a2,0x1a
    80011012:	12a60613          	addi	a2,a2,298 # 8002b138 <__func__.0+0x36d8>
    80011016:	00017517          	auipc	a0,0x17
    8001101a:	d4250513          	addi	a0,a0,-702 # 80027d58 <__func__.0+0x2f8>
    8001101e:	4d9140ef          	jal	80025cf6 <printf>
    80011022:	00038797          	auipc	a5,0x38
    80011026:	fef7c783          	lbu	a5,-17(a5) # 80049011 <excpt+0x1>
    8001102a:	00017597          	auipc	a1,0x17
    8001102e:	cf658593          	addi	a1,a1,-778 # 80027d20 <__func__.0+0x2c0>
    80011032:	c789                	beqz	a5,8001103c <illegal_except_4+0x86>
    80011034:	00017597          	auipc	a1,0x17
    80011038:	cfc58593          	addi	a1,a1,-772 # 80027d30 <__func__.0+0x2d0>
    8001103c:	00017517          	auipc	a0,0x17
    80011040:	d3450513          	addi	a0,a0,-716 # 80027d70 <__func__.0+0x310>
    80011044:	4b3140ef          	jal	80025cf6 <printf>
    80011048:	00038797          	auipc	a5,0x38
    8001104c:	fc97c783          	lbu	a5,-55(a5) # 80049011 <excpt+0x1>
    80011050:	1a079c63          	bnez	a5,80011208 <illegal_except_4+0x252>
    80011054:	4529                	li	a0,10
    80011056:	2ab130ef          	jal	80024b00 <putchar>
    8001105a:	00038917          	auipc	s2,0x38
    8001105e:	fb794903          	lbu	s2,-73(s2) # 80049011 <excpt+0x1>
        excpt.triggered == false
    ); 

    reset_state();
    80011062:	c4af00ef          	jal	800014ac <reset_state>

    //尝试访问高特权级别的任何CSR
    goto_priv(PRIV_HS);
    80011066:	450d                	li	a0,3
    80011068:	b8fef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    8001106c:	0330000f          	fence	rw,rw
    80011070:	4785                	li	a5,1
    80011072:	00038717          	auipc	a4,0x38
    80011076:	fc073b23          	sd	zero,-42(a4) # 80049048 <excpt+0x38>
    8001107a:	00f41023          	sh	a5,0(s0)
    8001107e:	0330000f          	fence	rw,rw
    CSRR(CSR_MCAUSE);
    80011082:	342027f3          	csrr	a5,mcause
    TEST_ASSERT("hs mode access higher privilege csr leads to ili",
    80011086:	08200593          	li	a1,130
    8001108a:	0001a617          	auipc	a2,0x1a
    8001108e:	0d660613          	addi	a2,a2,214 # 8002b160 <__func__.0+0x3700>
    80011092:	00017517          	auipc	a0,0x17
    80011096:	cc650513          	addi	a0,a0,-826 # 80027d58 <__func__.0+0x2f8>
    8001109a:	45d140ef          	jal	80025cf6 <printf>
    8001109e:	00038797          	auipc	a5,0x38
    800110a2:	f737c783          	lbu	a5,-141(a5) # 80049011 <excpt+0x1>
    800110a6:	00017597          	auipc	a1,0x17
    800110aa:	c8a58593          	addi	a1,a1,-886 # 80027d30 <__func__.0+0x2d0>
    800110ae:	cf89                	beqz	a5,800110c8 <illegal_except_4+0x112>
    800110b0:	6418                	ld	a4,8(s0)
    800110b2:	4789                	li	a5,2
    800110b4:	00017597          	auipc	a1,0x17
    800110b8:	c6c58593          	addi	a1,a1,-916 # 80027d20 <__func__.0+0x2c0>
    800110bc:	00f70663          	beq	a4,a5,800110c8 <illegal_except_4+0x112>
    800110c0:	00017597          	auipc	a1,0x17
    800110c4:	c7058593          	addi	a1,a1,-912 # 80027d30 <__func__.0+0x2d0>
    800110c8:	00017517          	auipc	a0,0x17
    800110cc:	ca850513          	addi	a0,a0,-856 # 80027d70 <__func__.0+0x310>
    800110d0:	427140ef          	jal	80025cf6 <printf>
    800110d4:	00038797          	auipc	a5,0x38
    800110d8:	f3d7c783          	lbu	a5,-195(a5) # 80049011 <excpt+0x1>
    800110dc:	c789                	beqz	a5,800110e6 <illegal_except_4+0x130>
    800110de:	6418                	ld	a4,8(s0)
    800110e0:	4789                	li	a5,2
    800110e2:	00f70c63          	beq	a4,a5,800110fa <illegal_except_4+0x144>
    800110e6:	00017517          	auipc	a0,0x17
    800110ea:	c9250513          	addi	a0,a0,-878 # 80027d78 <__func__.0+0x318>
    800110ee:	409140ef          	jal	80025cf6 <printf>
    800110f2:	02900513          	li	a0,41
    800110f6:	20b130ef          	jal	80024b00 <putchar>
    800110fa:	4529                	li	a0,10
    800110fc:	205130ef          	jal	80024b00 <putchar>
    80011100:	4481                	li	s1,0
    80011102:	00091863          	bnez	s2,80011112 <illegal_except_4+0x15c>
    80011106:	00038797          	auipc	a5,0x38
    8001110a:	f0b7c783          	lbu	a5,-245(a5) # 80049011 <excpt+0x1>
    8001110e:	0e079863          	bnez	a5,800111fe <illegal_except_4+0x248>
        excpt.triggered == true &&
        excpt.cause==CAUSE_ILI
    ); 

    goto_priv(PRIV_VS);
    80011112:	4509                	li	a0,2
    80011114:	ae3ef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80011118:	0330000f          	fence	rw,rw
    8001111c:	4785                	li	a5,1
    8001111e:	00038717          	auipc	a4,0x38
    80011122:	f2073523          	sd	zero,-214(a4) # 80049048 <excpt+0x38>
    80011126:	00f41023          	sh	a5,0(s0)
    8001112a:	0330000f          	fence	rw,rw
    CSRR(CSR_MIDELEG);
    8001112e:	303027f3          	csrr	a5,mideleg
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    80011132:	08200593          	li	a1,130
    80011136:	0001a617          	auipc	a2,0x1a
    8001113a:	06260613          	addi	a2,a2,98 # 8002b198 <__func__.0+0x3738>
    8001113e:	00017517          	auipc	a0,0x17
    80011142:	c1a50513          	addi	a0,a0,-998 # 80027d58 <__func__.0+0x2f8>
    80011146:	3b1140ef          	jal	80025cf6 <printf>
    8001114a:	00038797          	auipc	a5,0x38
    8001114e:	ec77c783          	lbu	a5,-313(a5) # 80049011 <excpt+0x1>
    80011152:	00017597          	auipc	a1,0x17
    80011156:	bde58593          	addi	a1,a1,-1058 # 80027d30 <__func__.0+0x2d0>
    8001115a:	cf89                	beqz	a5,80011174 <illegal_except_4+0x1be>
    8001115c:	6418                	ld	a4,8(s0)
    8001115e:	4789                	li	a5,2
    80011160:	00017597          	auipc	a1,0x17
    80011164:	bc058593          	addi	a1,a1,-1088 # 80027d20 <__func__.0+0x2c0>
    80011168:	00f70663          	beq	a4,a5,80011174 <illegal_except_4+0x1be>
    8001116c:	00017597          	auipc	a1,0x17
    80011170:	bc458593          	addi	a1,a1,-1084 # 80027d30 <__func__.0+0x2d0>
    80011174:	00017517          	auipc	a0,0x17
    80011178:	bfc50513          	addi	a0,a0,-1028 # 80027d70 <__func__.0+0x310>
    8001117c:	37b140ef          	jal	80025cf6 <printf>
    80011180:	00038797          	auipc	a5,0x38
    80011184:	e917c783          	lbu	a5,-367(a5) # 80049011 <excpt+0x1>
    80011188:	c789                	beqz	a5,80011192 <illegal_except_4+0x1dc>
    8001118a:	6418                	ld	a4,8(s0)
    8001118c:	4789                	li	a5,2
    8001118e:	00f70c63          	beq	a4,a5,800111a6 <illegal_except_4+0x1f0>
    80011192:	00017517          	auipc	a0,0x17
    80011196:	be650513          	addi	a0,a0,-1050 # 80027d78 <__func__.0+0x318>
    8001119a:	35d140ef          	jal	80025cf6 <printf>
    8001119e:	02900513          	li	a0,41
    800111a2:	15f130ef          	jal	80024b00 <putchar>
    800111a6:	4529                	li	a0,10
    800111a8:	159130ef          	jal	80024b00 <putchar>
    800111ac:	c095                	beqz	s1,800111d0 <illegal_except_4+0x21a>
    800111ae:	00038497          	auipc	s1,0x38
    800111b2:	e634c483          	lbu	s1,-413(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause==CAUSE_ILI
    );

    TEST_END();
    800111b6:	00017597          	auipc	a1,0x17
    800111ba:	b7a58593          	addi	a1,a1,-1158 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    800111be:	cc91                	beqz	s1,800111da <illegal_except_4+0x224>
    800111c0:	6418                	ld	a4,8(s0)
    800111c2:	4789                	li	a5,2
    TEST_END();
    800111c4:	00017597          	auipc	a1,0x17
    800111c8:	b5c58593          	addi	a1,a1,-1188 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    800111cc:	00f70763          	beq	a4,a5,800111da <illegal_except_4+0x224>
    800111d0:	4481                	li	s1,0
    TEST_END();
    800111d2:	00017597          	auipc	a1,0x17
    800111d6:	b5e58593          	addi	a1,a1,-1186 # 80027d30 <__func__.0+0x2d0>
    800111da:	00017517          	auipc	a0,0x17
    800111de:	bfe50513          	addi	a0,a0,-1026 # 80027dd8 <__func__.0+0x378>
    800111e2:	315140ef          	jal	80025cf6 <printf>
    800111e6:	4511                	li	a0,4
    800111e8:	a0fef0ef          	jal	80000bf6 <goto_priv>
    800111ec:	ac0f00ef          	jal	800014ac <reset_state>
}
    800111f0:	60e2                	ld	ra,24(sp)
    800111f2:	6442                	ld	s0,16(sp)
    800111f4:	6902                	ld	s2,0(sp)
    800111f6:	8526                	mv	a0,s1
    800111f8:	64a2                	ld	s1,8(sp)
    800111fa:	6105                	addi	sp,sp,32
    800111fc:	8082                	ret
    TEST_ASSERT("hs mode access higher privilege csr leads to ili",
    800111fe:	6404                	ld	s1,8(s0)
    80011200:	14f9                	addi	s1,s1,-2
    80011202:	0014b493          	seqz	s1,s1
    80011206:	b731                	j	80011112 <illegal_except_4+0x15c>
    TEST_ASSERT("m mode access any csr successful",
    80011208:	00017517          	auipc	a0,0x17
    8001120c:	b7050513          	addi	a0,a0,-1168 # 80027d78 <__func__.0+0x318>
    80011210:	2e7140ef          	jal	80025cf6 <printf>
    80011214:	02900513          	li	a0,41
    80011218:	0e9130ef          	jal	80024b00 <putchar>
    8001121c:	bd25                	j	80011054 <illegal_except_4+0x9e>

000000008001121e <illegal_except_5>:
        excpt.cause==CAUSE_ILI
    );
*/


bool illegal_except_5() {
    8001121e:	1101                	addi	sp,sp,-32

    TEST_START();
    80011220:	00015597          	auipc	a1,0x15
    80011224:	77058593          	addi	a1,a1,1904 # 80026990 <__func__.10>
    80011228:	00017517          	auipc	a0,0x17
    8001122c:	b1850513          	addi	a0,a0,-1256 # 80027d40 <__func__.0+0x2e0>
bool illegal_except_5() {
    80011230:	ec06                	sd	ra,24(sp)
    80011232:	e822                	sd	s0,16(sp)
    80011234:	e426                	sd	s1,8(sp)
    TEST_START();
    80011236:	2c1140ef          	jal	80025cf6 <printf>
    8001123a:	4529                	li	a0,10
    8001123c:	0c5130ef          	jal	80024b00 <putchar>
    //TVM=1，在S模式下，读写satp 寄存器
    goto_priv(PRIV_M);
    80011240:	4511                	li	a0,4
    80011242:	9b5ef0ef          	jal	80000bf6 <goto_priv>
    CSRW(satp, 0x0);
    80011246:	18005073          	csrwi	satp,0
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    8001124a:	001007b7          	lui	a5,0x100
    8001124e:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    80011252:	450d                	li	a0,3
    80011254:	9a3ef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80011258:	0330000f          	fence	rw,rw
    8001125c:	00038417          	auipc	s0,0x38
    80011260:	db440413          	addi	s0,s0,-588 # 80049010 <excpt>
    80011264:	4785                	li	a5,1
    80011266:	00038717          	auipc	a4,0x38
    8001126a:	de073123          	sd	zero,-542(a4) # 80049048 <excpt+0x38>
    8001126e:	00f41023          	sh	a5,0(s0)
    80011272:	0330000f          	fence	rw,rw
    CSRR(satp);
    80011276:	180027f3          	csrr	a5,satp
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    8001127a:	08200593          	li	a1,130
    8001127e:	0001a617          	auipc	a2,0x1a
    80011282:	e1a60613          	addi	a2,a2,-486 # 8002b098 <__func__.0+0x3638>
    80011286:	00017517          	auipc	a0,0x17
    8001128a:	ad250513          	addi	a0,a0,-1326 # 80027d58 <__func__.0+0x2f8>
    8001128e:	269140ef          	jal	80025cf6 <printf>
    80011292:	00038797          	auipc	a5,0x38
    80011296:	d7f7c783          	lbu	a5,-641(a5) # 80049011 <excpt+0x1>
    8001129a:	00017597          	auipc	a1,0x17
    8001129e:	a9658593          	addi	a1,a1,-1386 # 80027d30 <__func__.0+0x2d0>
    800112a2:	cf89                	beqz	a5,800112bc <illegal_except_5+0x9e>
    800112a4:	6418                	ld	a4,8(s0)
    800112a6:	4789                	li	a5,2
    800112a8:	00017597          	auipc	a1,0x17
    800112ac:	a7858593          	addi	a1,a1,-1416 # 80027d20 <__func__.0+0x2c0>
    800112b0:	00f70663          	beq	a4,a5,800112bc <illegal_except_5+0x9e>
    800112b4:	00017597          	auipc	a1,0x17
    800112b8:	a7c58593          	addi	a1,a1,-1412 # 80027d30 <__func__.0+0x2d0>
    800112bc:	00017517          	auipc	a0,0x17
    800112c0:	ab450513          	addi	a0,a0,-1356 # 80027d70 <__func__.0+0x310>
    800112c4:	233140ef          	jal	80025cf6 <printf>
    800112c8:	00038797          	auipc	a5,0x38
    800112cc:	d497c783          	lbu	a5,-695(a5) # 80049011 <excpt+0x1>
    800112d0:	c789                	beqz	a5,800112da <illegal_except_5+0xbc>
    800112d2:	6418                	ld	a4,8(s0)
    800112d4:	4789                	li	a5,2
    800112d6:	00f70c63          	beq	a4,a5,800112ee <illegal_except_5+0xd0>
    800112da:	00017517          	auipc	a0,0x17
    800112de:	a9e50513          	addi	a0,a0,-1378 # 80027d78 <__func__.0+0x318>
    800112e2:	215140ef          	jal	80025cf6 <printf>
    800112e6:	02900513          	li	a0,41
    800112ea:	017130ef          	jal	80024b00 <putchar>
    800112ee:	4529                	li	a0,10
    800112f0:	011130ef          	jal	80024b00 <putchar>
    800112f4:	00038497          	auipc	s1,0x38
    800112f8:	d1d4c483          	lbu	s1,-739(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    800112fc:	00017597          	auipc	a1,0x17
    80011300:	a3458593          	addi	a1,a1,-1484 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    80011304:	cc91                	beqz	s1,80011320 <illegal_except_5+0x102>
    80011306:	6418                	ld	a4,8(s0)
    80011308:	4789                	li	a5,2
    TEST_END();
    8001130a:	00017597          	auipc	a1,0x17
    8001130e:	a1658593          	addi	a1,a1,-1514 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    80011312:	00f70763          	beq	a4,a5,80011320 <illegal_except_5+0x102>
    80011316:	4481                	li	s1,0
    TEST_END();
    80011318:	00017597          	auipc	a1,0x17
    8001131c:	a1858593          	addi	a1,a1,-1512 # 80027d30 <__func__.0+0x2d0>
    80011320:	00017517          	auipc	a0,0x17
    80011324:	ab850513          	addi	a0,a0,-1352 # 80027dd8 <__func__.0+0x378>
    80011328:	1cf140ef          	jal	80025cf6 <printf>
    8001132c:	4511                	li	a0,4
    8001132e:	8c9ef0ef          	jal	80000bf6 <goto_priv>
    80011332:	97af00ef          	jal	800014ac <reset_state>
}
    80011336:	60e2                	ld	ra,24(sp)
    80011338:	6442                	ld	s0,16(sp)
    8001133a:	8526                	mv	a0,s1
    8001133c:	64a2                	ld	s1,8(sp)
    8001133e:	6105                	addi	sp,sp,32
    80011340:	8082                	ret

0000000080011342 <illegal_except_6>:

bool illegal_except_6() {
    80011342:	1101                	addi	sp,sp,-32

    TEST_START();
    80011344:	00015597          	auipc	a1,0x15
    80011348:	66458593          	addi	a1,a1,1636 # 800269a8 <__func__.9>
    8001134c:	00017517          	auipc	a0,0x17
    80011350:	9f450513          	addi	a0,a0,-1548 # 80027d40 <__func__.0+0x2e0>
bool illegal_except_6() {
    80011354:	ec06                	sd	ra,24(sp)
    80011356:	e822                	sd	s0,16(sp)
    80011358:	e426                	sd	s1,8(sp)
    TEST_START();
    8001135a:	19d140ef          	jal	80025cf6 <printf>
    8001135e:	4529                	li	a0,10
    80011360:	7a0130ef          	jal	80024b00 <putchar>
    //当mstatus.TVM=1时，在HS模式下执行时尝试读取或写入hgatp
    goto_priv(PRIV_M);
    80011364:	4511                	li	a0,4
    80011366:	891ef0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    8001136a:	001007b7          	lui	a5,0x100
    8001136e:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    80011372:	450d                	li	a0,3
    80011374:	883ef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80011378:	0330000f          	fence	rw,rw
    8001137c:	00038417          	auipc	s0,0x38
    80011380:	c9440413          	addi	s0,s0,-876 # 80049010 <excpt>
    80011384:	4785                	li	a5,1
    80011386:	00038717          	auipc	a4,0x38
    8001138a:	cc073123          	sd	zero,-830(a4) # 80049048 <excpt+0x38>
    8001138e:	00f41023          	sh	a5,0(s0)
    80011392:	0330000f          	fence	rw,rw
    CSRW(CSR_HGATP,(uint64_t)-1);         //没报错
    80011396:	57fd                	li	a5,-1
    80011398:	68079073          	csrw	hgatp,a5
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    8001139c:	08200593          	li	a1,130
    800113a0:	0001a617          	auipc	a2,0x1a
    800113a4:	e3060613          	addi	a2,a2,-464 # 8002b1d0 <__func__.0+0x3770>
    800113a8:	00017517          	auipc	a0,0x17
    800113ac:	9b050513          	addi	a0,a0,-1616 # 80027d58 <__func__.0+0x2f8>
    800113b0:	147140ef          	jal	80025cf6 <printf>
    800113b4:	00038797          	auipc	a5,0x38
    800113b8:	c5d7c783          	lbu	a5,-931(a5) # 80049011 <excpt+0x1>
    800113bc:	00017597          	auipc	a1,0x17
    800113c0:	97458593          	addi	a1,a1,-1676 # 80027d30 <__func__.0+0x2d0>
    800113c4:	cf89                	beqz	a5,800113de <illegal_except_6+0x9c>
    800113c6:	6418                	ld	a4,8(s0)
    800113c8:	4789                	li	a5,2
    800113ca:	00017597          	auipc	a1,0x17
    800113ce:	95658593          	addi	a1,a1,-1706 # 80027d20 <__func__.0+0x2c0>
    800113d2:	00f70663          	beq	a4,a5,800113de <illegal_except_6+0x9c>
    800113d6:	00017597          	auipc	a1,0x17
    800113da:	95a58593          	addi	a1,a1,-1702 # 80027d30 <__func__.0+0x2d0>
    800113de:	00017517          	auipc	a0,0x17
    800113e2:	99250513          	addi	a0,a0,-1646 # 80027d70 <__func__.0+0x310>
    800113e6:	111140ef          	jal	80025cf6 <printf>
    800113ea:	00038797          	auipc	a5,0x38
    800113ee:	c277c783          	lbu	a5,-985(a5) # 80049011 <excpt+0x1>
    800113f2:	c789                	beqz	a5,800113fc <illegal_except_6+0xba>
    800113f4:	6418                	ld	a4,8(s0)
    800113f6:	4789                	li	a5,2
    800113f8:	00f70c63          	beq	a4,a5,80011410 <illegal_except_6+0xce>
    800113fc:	00017517          	auipc	a0,0x17
    80011400:	97c50513          	addi	a0,a0,-1668 # 80027d78 <__func__.0+0x318>
    80011404:	0f3140ef          	jal	80025cf6 <printf>
    80011408:	02900513          	li	a0,41
    8001140c:	6f4130ef          	jal	80024b00 <putchar>
    80011410:	4529                	li	a0,10
    80011412:	6ee130ef          	jal	80024b00 <putchar>
    80011416:	00038497          	auipc	s1,0x38
    8001141a:	bfb4c483          	lbu	s1,-1029(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8001141e:	00017597          	auipc	a1,0x17
    80011422:	91258593          	addi	a1,a1,-1774 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    80011426:	cc91                	beqz	s1,80011442 <illegal_except_6+0x100>
    80011428:	6418                	ld	a4,8(s0)
    8001142a:	4789                	li	a5,2
    TEST_END();
    8001142c:	00017597          	auipc	a1,0x17
    80011430:	8f458593          	addi	a1,a1,-1804 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    80011434:	00f70763          	beq	a4,a5,80011442 <illegal_except_6+0x100>
    80011438:	4481                	li	s1,0
    TEST_END();
    8001143a:	00017597          	auipc	a1,0x17
    8001143e:	8f658593          	addi	a1,a1,-1802 # 80027d30 <__func__.0+0x2d0>
    80011442:	00017517          	auipc	a0,0x17
    80011446:	99650513          	addi	a0,a0,-1642 # 80027dd8 <__func__.0+0x378>
    8001144a:	0ad140ef          	jal	80025cf6 <printf>
    8001144e:	4511                	li	a0,4
    80011450:	fa6ef0ef          	jal	80000bf6 <goto_priv>
    80011454:	858f00ef          	jal	800014ac <reset_state>
}
    80011458:	60e2                	ld	ra,24(sp)
    8001145a:	6442                	ld	s0,16(sp)
    8001145c:	8526                	mv	a0,s1
    8001145e:	64a2                	ld	s1,8(sp)
    80011460:	6105                	addi	sp,sp,32
    80011462:	8082                	ret

0000000080011464 <illegal_except_7>:

bool illegal_except_7() {
    80011464:	1101                	addi	sp,sp,-32

    TEST_START();
    80011466:	00015597          	auipc	a1,0x15
    8001146a:	55a58593          	addi	a1,a1,1370 # 800269c0 <__func__.8>
    8001146e:	00017517          	auipc	a0,0x17
    80011472:	8d250513          	addi	a0,a0,-1838 # 80027d40 <__func__.0+0x2e0>
bool illegal_except_7() {
    80011476:	ec06                	sd	ra,24(sp)
    80011478:	e822                	sd	s0,16(sp)
    8001147a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001147c:	07b140ef          	jal	80025cf6 <printf>
    80011480:	4529                	li	a0,10
    80011482:	67e130ef          	jal	80024b00 <putchar>

    //TVM=1，在S模式下，执行SFENCE.VMA或SINVAL.VMA指令
    goto_priv(PRIV_M);
    80011486:	4511                	li	a0,4
    80011488:	f6eef0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    8001148c:	001007b7          	lui	a5,0x100
    80011490:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_HSTATUS,HSTATUS_VTVM);
    80011494:	6007a073          	csrs	hstatus,a5

    goto_priv(PRIV_HS); 
    80011498:	450d                	li	a0,3
    8001149a:	f5cef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    8001149e:	0330000f          	fence	rw,rw
    800114a2:	00038417          	auipc	s0,0x38
    800114a6:	b6e40413          	addi	s0,s0,-1170 # 80049010 <excpt>
    800114aa:	4785                	li	a5,1
    800114ac:	00038717          	auipc	a4,0x38
    800114b0:	b8073e23          	sd	zero,-1124(a4) # 80049048 <excpt+0x38>
    800114b4:	00f41023          	sh	a5,0(s0)
    800114b8:	0330000f          	fence	rw,rw
    asm volatile(
    800114bc:	12000073          	sfence.vma
    sfence_vma();
    TEST_ASSERT("s mode sfence.vma leads to ili when tvm=1",
    800114c0:	08200593          	li	a1,130
    800114c4:	0001a617          	auipc	a2,0x1a
    800114c8:	d7460613          	addi	a2,a2,-652 # 8002b238 <__func__.0+0x37d8>
    800114cc:	00017517          	auipc	a0,0x17
    800114d0:	88c50513          	addi	a0,a0,-1908 # 80027d58 <__func__.0+0x2f8>
    800114d4:	023140ef          	jal	80025cf6 <printf>
    800114d8:	00038797          	auipc	a5,0x38
    800114dc:	b397c783          	lbu	a5,-1223(a5) # 80049011 <excpt+0x1>
    800114e0:	00017597          	auipc	a1,0x17
    800114e4:	85058593          	addi	a1,a1,-1968 # 80027d30 <__func__.0+0x2d0>
    800114e8:	cf89                	beqz	a5,80011502 <illegal_except_7+0x9e>
    800114ea:	6418                	ld	a4,8(s0)
    800114ec:	4789                	li	a5,2
    800114ee:	00017597          	auipc	a1,0x17
    800114f2:	83258593          	addi	a1,a1,-1998 # 80027d20 <__func__.0+0x2c0>
    800114f6:	00f70663          	beq	a4,a5,80011502 <illegal_except_7+0x9e>
    800114fa:	00017597          	auipc	a1,0x17
    800114fe:	83658593          	addi	a1,a1,-1994 # 80027d30 <__func__.0+0x2d0>
    80011502:	00017517          	auipc	a0,0x17
    80011506:	86e50513          	addi	a0,a0,-1938 # 80027d70 <__func__.0+0x310>
    8001150a:	7ec140ef          	jal	80025cf6 <printf>
    8001150e:	00038797          	auipc	a5,0x38
    80011512:	b037c783          	lbu	a5,-1277(a5) # 80049011 <excpt+0x1>
    80011516:	c789                	beqz	a5,80011520 <illegal_except_7+0xbc>
    80011518:	6418                	ld	a4,8(s0)
    8001151a:	4789                	li	a5,2
    8001151c:	00f70c63          	beq	a4,a5,80011534 <illegal_except_7+0xd0>
    80011520:	00017517          	auipc	a0,0x17
    80011524:	85850513          	addi	a0,a0,-1960 # 80027d78 <__func__.0+0x318>
    80011528:	7ce140ef          	jal	80025cf6 <printf>
    8001152c:	02900513          	li	a0,41
    80011530:	5d0130ef          	jal	80024b00 <putchar>
    80011534:	4529                	li	a0,10
    80011536:	5ca130ef          	jal	80024b00 <putchar>
    8001153a:	00038797          	auipc	a5,0x38
    8001153e:	ad77c783          	lbu	a5,-1321(a5) # 80049011 <excpt+0x1>
    80011542:	4481                	li	s1,0
    80011544:	c789                	beqz	a5,8001154e <illegal_except_7+0xea>
    80011546:	6404                	ld	s1,8(s0)
    80011548:	14f9                	addi	s1,s1,-2
    8001154a:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    8001154e:	450d                	li	a0,3
    80011550:	ea6ef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80011554:	0330000f          	fence	rw,rw
    80011558:	4785                	li	a5,1
    8001155a:	00038717          	auipc	a4,0x38
    8001155e:	ae073723          	sd	zero,-1298(a4) # 80049048 <excpt+0x38>
    80011562:	00f41023          	sh	a5,0(s0)
    80011566:	0330000f          	fence	rw,rw
    asm volatile(
    8001156a:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    8001156e:	08200593          	li	a1,130
    80011572:	0001a617          	auipc	a2,0x1a
    80011576:	cf660613          	addi	a2,a2,-778 # 8002b268 <__func__.0+0x3808>
    8001157a:	00016517          	auipc	a0,0x16
    8001157e:	7de50513          	addi	a0,a0,2014 # 80027d58 <__func__.0+0x2f8>
    80011582:	774140ef          	jal	80025cf6 <printf>
    80011586:	00038797          	auipc	a5,0x38
    8001158a:	a8b7c783          	lbu	a5,-1397(a5) # 80049011 <excpt+0x1>
    8001158e:	00016597          	auipc	a1,0x16
    80011592:	7a258593          	addi	a1,a1,1954 # 80027d30 <__func__.0+0x2d0>
    80011596:	cf89                	beqz	a5,800115b0 <illegal_except_7+0x14c>
    80011598:	6418                	ld	a4,8(s0)
    8001159a:	4789                	li	a5,2
    8001159c:	00016597          	auipc	a1,0x16
    800115a0:	78458593          	addi	a1,a1,1924 # 80027d20 <__func__.0+0x2c0>
    800115a4:	00f70663          	beq	a4,a5,800115b0 <illegal_except_7+0x14c>
    800115a8:	00016597          	auipc	a1,0x16
    800115ac:	78858593          	addi	a1,a1,1928 # 80027d30 <__func__.0+0x2d0>
    800115b0:	00016517          	auipc	a0,0x16
    800115b4:	7c050513          	addi	a0,a0,1984 # 80027d70 <__func__.0+0x310>
    800115b8:	73e140ef          	jal	80025cf6 <printf>
    800115bc:	00038797          	auipc	a5,0x38
    800115c0:	a557c783          	lbu	a5,-1451(a5) # 80049011 <excpt+0x1>
    800115c4:	c789                	beqz	a5,800115ce <illegal_except_7+0x16a>
    800115c6:	6418                	ld	a4,8(s0)
    800115c8:	4789                	li	a5,2
    800115ca:	00f70c63          	beq	a4,a5,800115e2 <illegal_except_7+0x17e>
    800115ce:	00016517          	auipc	a0,0x16
    800115d2:	7aa50513          	addi	a0,a0,1962 # 80027d78 <__func__.0+0x318>
    800115d6:	720140ef          	jal	80025cf6 <printf>
    800115da:	02900513          	li	a0,41
    800115de:	522130ef          	jal	80024b00 <putchar>
    800115e2:	4529                	li	a0,10
    800115e4:	51c130ef          	jal	80024b00 <putchar>
    800115e8:	c095                	beqz	s1,8001160c <illegal_except_7+0x1a8>
    800115ea:	00038497          	auipc	s1,0x38
    800115ee:	a274c483          	lbu	s1,-1497(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    800115f2:	00016597          	auipc	a1,0x16
    800115f6:	73e58593          	addi	a1,a1,1854 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    800115fa:	cc91                	beqz	s1,80011616 <illegal_except_7+0x1b2>
    800115fc:	6418                	ld	a4,8(s0)
    800115fe:	4789                	li	a5,2
    TEST_END();
    80011600:	00016597          	auipc	a1,0x16
    80011604:	72058593          	addi	a1,a1,1824 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    80011608:	00f70763          	beq	a4,a5,80011616 <illegal_except_7+0x1b2>
    8001160c:	4481                	li	s1,0
    TEST_END();
    8001160e:	00016597          	auipc	a1,0x16
    80011612:	72258593          	addi	a1,a1,1826 # 80027d30 <__func__.0+0x2d0>
    80011616:	00016517          	auipc	a0,0x16
    8001161a:	7c250513          	addi	a0,a0,1986 # 80027dd8 <__func__.0+0x378>
    8001161e:	6d8140ef          	jal	80025cf6 <printf>
    80011622:	4511                	li	a0,4
    80011624:	dd2ef0ef          	jal	80000bf6 <goto_priv>
    80011628:	e85ef0ef          	jal	800014ac <reset_state>
}
    8001162c:	60e2                	ld	ra,24(sp)
    8001162e:	6442                	ld	s0,16(sp)
    80011630:	8526                	mv	a0,s1
    80011632:	64a2                	ld	s1,8(sp)
    80011634:	6105                	addi	sp,sp,32
    80011636:	8082                	ret

0000000080011638 <illegal_except_8>:


bool illegal_except_8() {
    80011638:	1141                	addi	sp,sp,-16

    TEST_START();
    8001163a:	00015597          	auipc	a1,0x15
    8001163e:	39e58593          	addi	a1,a1,926 # 800269d8 <__func__.7>
    80011642:	00016517          	auipc	a0,0x16
    80011646:	6fe50513          	addi	a0,a0,1790 # 80027d40 <__func__.0+0x2e0>
bool illegal_except_8() {
    8001164a:	e406                	sd	ra,8(sp)
    8001164c:	e022                	sd	s0,0(sp)
    TEST_START();
    8001164e:	6a8140ef          	jal	80025cf6 <printf>
    80011652:	4529                	li	a0,10
    80011654:	4ac130ef          	jal	80024b00 <putchar>
    //M模式下（无论mstatus.TVM的值如何）执行HFENCE.GVMA
    goto_priv(PRIV_M);
    80011658:	4511                	li	a0,4
    8001165a:	d9cef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    8001165e:	0330000f          	fence	rw,rw
    80011662:	4785                	li	a5,1
    80011664:	00038717          	auipc	a4,0x38
    80011668:	9e073223          	sd	zero,-1564(a4) # 80049048 <excpt+0x38>
    8001166c:	00038717          	auipc	a4,0x38
    80011670:	9af71223          	sh	a5,-1628(a4) # 80049010 <excpt>
    80011674:	0330000f          	fence	rw,rw
    asm volatile(
    80011678:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("m mode hfence.gvma successful",
    8001167c:	08200593          	li	a1,130
    80011680:	0001a617          	auipc	a2,0x1a
    80011684:	c1860613          	addi	a2,a2,-1000 # 8002b298 <__func__.0+0x3838>
    80011688:	00016517          	auipc	a0,0x16
    8001168c:	6d050513          	addi	a0,a0,1744 # 80027d58 <__func__.0+0x2f8>
    80011690:	666140ef          	jal	80025cf6 <printf>
    80011694:	00038797          	auipc	a5,0x38
    80011698:	97d7c783          	lbu	a5,-1667(a5) # 80049011 <excpt+0x1>
    8001169c:	00016597          	auipc	a1,0x16
    800116a0:	68458593          	addi	a1,a1,1668 # 80027d20 <__func__.0+0x2c0>
    800116a4:	c789                	beqz	a5,800116ae <illegal_except_8+0x76>
    800116a6:	00016597          	auipc	a1,0x16
    800116aa:	68a58593          	addi	a1,a1,1674 # 80027d30 <__func__.0+0x2d0>
    800116ae:	00016517          	auipc	a0,0x16
    800116b2:	6c250513          	addi	a0,a0,1730 # 80027d70 <__func__.0+0x310>
    800116b6:	640140ef          	jal	80025cf6 <printf>
    800116ba:	00038797          	auipc	a5,0x38
    800116be:	9577c783          	lbu	a5,-1705(a5) # 80049011 <excpt+0x1>
    800116c2:	e7a1                	bnez	a5,8001170a <illegal_except_8+0xd2>
    800116c4:	4529                	li	a0,10
    800116c6:	43a130ef          	jal	80024b00 <putchar>
    800116ca:	00038797          	auipc	a5,0x38
    800116ce:	9477c783          	lbu	a5,-1721(a5) # 80049011 <excpt+0x1>
    800116d2:	e795                	bnez	a5,800116fe <illegal_except_8+0xc6>
    800116d4:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    800116d6:	00016597          	auipc	a1,0x16
    800116da:	64a58593          	addi	a1,a1,1610 # 80027d20 <__func__.0+0x2c0>
    800116de:	00016517          	auipc	a0,0x16
    800116e2:	6fa50513          	addi	a0,a0,1786 # 80027dd8 <__func__.0+0x378>
    800116e6:	610140ef          	jal	80025cf6 <printf>
    800116ea:	4511                	li	a0,4
    800116ec:	d0aef0ef          	jal	80000bf6 <goto_priv>
    800116f0:	dbdef0ef          	jal	800014ac <reset_state>
}
    800116f4:	60a2                	ld	ra,8(sp)
    800116f6:	8522                	mv	a0,s0
    800116f8:	6402                	ld	s0,0(sp)
    800116fa:	0141                	addi	sp,sp,16
    800116fc:	8082                	ret
    TEST_ASSERT("m mode hfence.gvma successful",
    800116fe:	4401                	li	s0,0
    TEST_END();
    80011700:	00016597          	auipc	a1,0x16
    80011704:	63058593          	addi	a1,a1,1584 # 80027d30 <__func__.0+0x2d0>
    80011708:	bfd9                	j	800116de <illegal_except_8+0xa6>
    TEST_ASSERT("m mode hfence.gvma successful",
    8001170a:	00016517          	auipc	a0,0x16
    8001170e:	66e50513          	addi	a0,a0,1646 # 80027d78 <__func__.0+0x318>
    80011712:	5e4140ef          	jal	80025cf6 <printf>
    80011716:	02900513          	li	a0,41
    8001171a:	3e6130ef          	jal	80024b00 <putchar>
    8001171e:	b75d                	j	800116c4 <illegal_except_8+0x8c>

0000000080011720 <illegal_except_9>:

bool illegal_except_9() {
    80011720:	1101                	addi	sp,sp,-32

    TEST_START();
    80011722:	00015597          	auipc	a1,0x15
    80011726:	2ce58593          	addi	a1,a1,718 # 800269f0 <__func__.6>
    8001172a:	00016517          	auipc	a0,0x16
    8001172e:	61650513          	addi	a0,a0,1558 # 80027d40 <__func__.0+0x2e0>
bool illegal_except_9() {
    80011732:	ec06                	sd	ra,24(sp)
    80011734:	e822                	sd	s0,16(sp)
    80011736:	e426                	sd	s1,8(sp)
    TEST_START();
    80011738:	5be140ef          	jal	80025cf6 <printf>
    8001173c:	4529                	li	a0,10
    8001173e:	3c2130ef          	jal	80024b00 <putchar>
    //HS模式下mstatus.TVM=0时执行HFENCE.GVMA
    goto_priv(PRIV_M);
    80011742:	4511                	li	a0,4
    80011744:	cb2ef0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TVM);
    80011748:	001007b7          	lui	a5,0x100
    8001174c:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_HS);
    80011750:	450d                	li	a0,3
    80011752:	ca4ef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80011756:	0330000f          	fence	rw,rw
    8001175a:	00038417          	auipc	s0,0x38
    8001175e:	8b640413          	addi	s0,s0,-1866 # 80049010 <excpt>
    80011762:	4785                	li	a5,1
    80011764:	00038717          	auipc	a4,0x38
    80011768:	8e073223          	sd	zero,-1820(a4) # 80049048 <excpt+0x38>
    8001176c:	00f41023          	sh	a5,0(s0)
    80011770:	0330000f          	fence	rw,rw
    80011774:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    80011778:	08200593          	li	a1,130
    8001177c:	0001a617          	auipc	a2,0x1a
    80011780:	b3c60613          	addi	a2,a2,-1220 # 8002b2b8 <__func__.0+0x3858>
    80011784:	00016517          	auipc	a0,0x16
    80011788:	5d450513          	addi	a0,a0,1492 # 80027d58 <__func__.0+0x2f8>
    8001178c:	56a140ef          	jal	80025cf6 <printf>
    80011790:	00038797          	auipc	a5,0x38
    80011794:	8817c783          	lbu	a5,-1919(a5) # 80049011 <excpt+0x1>
    80011798:	00016597          	auipc	a1,0x16
    8001179c:	58858593          	addi	a1,a1,1416 # 80027d20 <__func__.0+0x2c0>
    800117a0:	c789                	beqz	a5,800117aa <illegal_except_9+0x8a>
    800117a2:	00016597          	auipc	a1,0x16
    800117a6:	58e58593          	addi	a1,a1,1422 # 80027d30 <__func__.0+0x2d0>
    800117aa:	00016517          	auipc	a0,0x16
    800117ae:	5c650513          	addi	a0,a0,1478 # 80027d70 <__func__.0+0x310>
    800117b2:	544140ef          	jal	80025cf6 <printf>
    800117b6:	00038797          	auipc	a5,0x38
    800117ba:	85b7c783          	lbu	a5,-1957(a5) # 80049011 <excpt+0x1>
    800117be:	10079563          	bnez	a5,800118c8 <illegal_except_9+0x1a8>
    800117c2:	4529                	li	a0,10
    800117c4:	33c130ef          	jal	80024b00 <putchar>
        excpt.triggered == false
    ); 

    //mstatus.TVM=1时，在HS模式下执行HFENCE.GVMA
    goto_priv(PRIV_M);
    800117c8:	4511                	li	a0,4
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    800117ca:	00038497          	auipc	s1,0x38
    800117ce:	8474c483          	lbu	s1,-1977(s1) # 80049011 <excpt+0x1>
    goto_priv(PRIV_M);
    800117d2:	c24ef0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    800117d6:	001007b7          	lui	a5,0x100
    800117da:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    800117de:	450d                	li	a0,3
    800117e0:	c16ef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800117e4:	0330000f          	fence	rw,rw
    800117e8:	4785                	li	a5,1
    800117ea:	00038717          	auipc	a4,0x38
    800117ee:	84073f23          	sd	zero,-1954(a4) # 80049048 <excpt+0x38>
    800117f2:	00f41023          	sh	a5,0(s0)
    800117f6:	0330000f          	fence	rw,rw
    800117fa:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    800117fe:	08200593          	li	a1,130
    80011802:	0001a617          	auipc	a2,0x1a
    80011806:	aee60613          	addi	a2,a2,-1298 # 8002b2f0 <__func__.0+0x3890>
    8001180a:	00016517          	auipc	a0,0x16
    8001180e:	54e50513          	addi	a0,a0,1358 # 80027d58 <__func__.0+0x2f8>
    80011812:	4e4140ef          	jal	80025cf6 <printf>
    80011816:	00037797          	auipc	a5,0x37
    8001181a:	7fb7c783          	lbu	a5,2043(a5) # 80049011 <excpt+0x1>
    8001181e:	00016597          	auipc	a1,0x16
    80011822:	51258593          	addi	a1,a1,1298 # 80027d30 <__func__.0+0x2d0>
    80011826:	cf89                	beqz	a5,80011840 <illegal_except_9+0x120>
    80011828:	6418                	ld	a4,8(s0)
    8001182a:	4789                	li	a5,2
    8001182c:	00016597          	auipc	a1,0x16
    80011830:	4f458593          	addi	a1,a1,1268 # 80027d20 <__func__.0+0x2c0>
    80011834:	00f70663          	beq	a4,a5,80011840 <illegal_except_9+0x120>
    80011838:	00016597          	auipc	a1,0x16
    8001183c:	4f858593          	addi	a1,a1,1272 # 80027d30 <__func__.0+0x2d0>
    80011840:	00016517          	auipc	a0,0x16
    80011844:	53050513          	addi	a0,a0,1328 # 80027d70 <__func__.0+0x310>
    80011848:	4ae140ef          	jal	80025cf6 <printf>
    8001184c:	00037797          	auipc	a5,0x37
    80011850:	7c57c783          	lbu	a5,1989(a5) # 80049011 <excpt+0x1>
    80011854:	c789                	beqz	a5,8001185e <illegal_except_9+0x13e>
    80011856:	6418                	ld	a4,8(s0)
    80011858:	4789                	li	a5,2
    8001185a:	00f70c63          	beq	a4,a5,80011872 <illegal_except_9+0x152>
    8001185e:	00016517          	auipc	a0,0x16
    80011862:	51a50513          	addi	a0,a0,1306 # 80027d78 <__func__.0+0x318>
    80011866:	490140ef          	jal	80025cf6 <printf>
    8001186a:	02900513          	li	a0,41
    8001186e:	292130ef          	jal	80024b00 <putchar>
    80011872:	4529                	li	a0,10
    80011874:	28c130ef          	jal	80024b00 <putchar>
    80011878:	e095                	bnez	s1,8001189c <illegal_except_9+0x17c>
    8001187a:	00037497          	auipc	s1,0x37
    8001187e:	7974c483          	lbu	s1,1943(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80011882:	00016597          	auipc	a1,0x16
    80011886:	4ae58593          	addi	a1,a1,1198 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    8001188a:	cc91                	beqz	s1,800118a6 <illegal_except_9+0x186>
    8001188c:	6418                	ld	a4,8(s0)
    8001188e:	4789                	li	a5,2
    TEST_END();
    80011890:	00016597          	auipc	a1,0x16
    80011894:	49058593          	addi	a1,a1,1168 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    80011898:	00f70763          	beq	a4,a5,800118a6 <illegal_except_9+0x186>
    8001189c:	4481                	li	s1,0
    TEST_END();
    8001189e:	00016597          	auipc	a1,0x16
    800118a2:	49258593          	addi	a1,a1,1170 # 80027d30 <__func__.0+0x2d0>
    800118a6:	00016517          	auipc	a0,0x16
    800118aa:	53250513          	addi	a0,a0,1330 # 80027dd8 <__func__.0+0x378>
    800118ae:	448140ef          	jal	80025cf6 <printf>
    800118b2:	4511                	li	a0,4
    800118b4:	b42ef0ef          	jal	80000bf6 <goto_priv>
    800118b8:	bf5ef0ef          	jal	800014ac <reset_state>
}
    800118bc:	60e2                	ld	ra,24(sp)
    800118be:	6442                	ld	s0,16(sp)
    800118c0:	8526                	mv	a0,s1
    800118c2:	64a2                	ld	s1,8(sp)
    800118c4:	6105                	addi	sp,sp,32
    800118c6:	8082                	ret
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    800118c8:	00016517          	auipc	a0,0x16
    800118cc:	4b050513          	addi	a0,a0,1200 # 80027d78 <__func__.0+0x318>
    800118d0:	426140ef          	jal	80025cf6 <printf>
    800118d4:	02900513          	li	a0,41
    800118d8:	228130ef          	jal	80024b00 <putchar>
    800118dc:	b5dd                	j	800117c2 <illegal_except_9+0xa2>

00000000800118de <illegal_except_10>:

bool illegal_except_10() {
    800118de:	1101                	addi	sp,sp,-32

    TEST_START();
    800118e0:	00015597          	auipc	a1,0x15
    800118e4:	12858593          	addi	a1,a1,296 # 80026a08 <__func__.5>
    800118e8:	00016517          	auipc	a0,0x16
    800118ec:	45850513          	addi	a0,a0,1112 # 80027d40 <__func__.0+0x2e0>
bool illegal_except_10() {
    800118f0:	ec06                	sd	ra,24(sp)
    800118f2:	e822                	sd	s0,16(sp)
    800118f4:	e426                	sd	s1,8(sp)
    TEST_START();
    800118f6:	400140ef          	jal	80025cf6 <printf>
    800118fa:	4529                	li	a0,10
    800118fc:	204130ef          	jal	80024b00 <putchar>
    
    //mstatus.TVM=1，尝试在S模式或HS模式下执行SINVAL.VMA或HINVAL.GVMA
    goto_priv(PRIV_M);
    80011900:	4511                	li	a0,4
    80011902:	af4ef0ef          	jal	80000bf6 <goto_priv>
    reset_state();
    80011906:	ba7ef0ef          	jal	800014ac <reset_state>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    8001190a:	001007b7          	lui	a5,0x100
    8001190e:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    80011912:	450d                	li	a0,3
    80011914:	ae2ef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80011918:	0330000f          	fence	rw,rw
    8001191c:	00037417          	auipc	s0,0x37
    80011920:	6f440413          	addi	s0,s0,1780 # 80049010 <excpt>
    80011924:	4785                	li	a5,1
    80011926:	00037717          	auipc	a4,0x37
    8001192a:	72073123          	sd	zero,1826(a4) # 80049048 <excpt+0x38>
    8001192e:	00f41023          	sh	a5,0(s0)
    80011932:	0330000f          	fence	rw,rw
    asm volatile(
    80011936:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("hs mode sinval.vma successful when mstatus.tvm=1",
    8001193a:	08200593          	li	a1,130
    8001193e:	0001a617          	auipc	a2,0x1a
    80011942:	9ea60613          	addi	a2,a2,-1558 # 8002b328 <__func__.0+0x38c8>
    80011946:	00016517          	auipc	a0,0x16
    8001194a:	41250513          	addi	a0,a0,1042 # 80027d58 <__func__.0+0x2f8>
    8001194e:	3a8140ef          	jal	80025cf6 <printf>
    80011952:	00037797          	auipc	a5,0x37
    80011956:	6bf7c783          	lbu	a5,1727(a5) # 80049011 <excpt+0x1>
    8001195a:	00016597          	auipc	a1,0x16
    8001195e:	3d658593          	addi	a1,a1,982 # 80027d30 <__func__.0+0x2d0>
    80011962:	cf89                	beqz	a5,8001197c <illegal_except_10+0x9e>
    80011964:	6418                	ld	a4,8(s0)
    80011966:	4789                	li	a5,2
    80011968:	00016597          	auipc	a1,0x16
    8001196c:	3b858593          	addi	a1,a1,952 # 80027d20 <__func__.0+0x2c0>
    80011970:	00f70663          	beq	a4,a5,8001197c <illegal_except_10+0x9e>
    80011974:	00016597          	auipc	a1,0x16
    80011978:	3bc58593          	addi	a1,a1,956 # 80027d30 <__func__.0+0x2d0>
    8001197c:	00016517          	auipc	a0,0x16
    80011980:	3f450513          	addi	a0,a0,1012 # 80027d70 <__func__.0+0x310>
    80011984:	372140ef          	jal	80025cf6 <printf>
    80011988:	00037797          	auipc	a5,0x37
    8001198c:	6897c783          	lbu	a5,1673(a5) # 80049011 <excpt+0x1>
    80011990:	c789                	beqz	a5,8001199a <illegal_except_10+0xbc>
    80011992:	6418                	ld	a4,8(s0)
    80011994:	4789                	li	a5,2
    80011996:	00f70c63          	beq	a4,a5,800119ae <illegal_except_10+0xd0>
    8001199a:	00016517          	auipc	a0,0x16
    8001199e:	3de50513          	addi	a0,a0,990 # 80027d78 <__func__.0+0x318>
    800119a2:	354140ef          	jal	80025cf6 <printf>
    800119a6:	02900513          	li	a0,41
    800119aa:	156130ef          	jal	80024b00 <putchar>
    800119ae:	4529                	li	a0,10
    800119b0:	150130ef          	jal	80024b00 <putchar>
    800119b4:	00037797          	auipc	a5,0x37
    800119b8:	65d7c783          	lbu	a5,1629(a5) # 80049011 <excpt+0x1>
    800119bc:	4481                	li	s1,0
    800119be:	c789                	beqz	a5,800119c8 <illegal_except_10+0xea>
    800119c0:	6404                	ld	s1,8(s0)
    800119c2:	14f9                	addi	s1,s1,-2
    800119c4:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_M);
    800119c8:	4511                	li	a0,4
    800119ca:	a2cef0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    800119ce:	001007b7          	lui	a5,0x100
    800119d2:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    800119d6:	450d                	li	a0,3
    800119d8:	a1eef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800119dc:	0330000f          	fence	rw,rw
    800119e0:	4785                	li	a5,1
    800119e2:	00037717          	auipc	a4,0x37
    800119e6:	66073323          	sd	zero,1638(a4) # 80049048 <excpt+0x38>
    800119ea:	00f41023          	sh	a5,0(s0)
    800119ee:	0330000f          	fence	rw,rw
    asm volatile(
    800119f2:	66000073          	.insn	4, 0x66000073
    hinval_gvma();
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    800119f6:	08200593          	li	a1,130
    800119fa:	0001a617          	auipc	a2,0x1a
    800119fe:	96660613          	addi	a2,a2,-1690 # 8002b360 <__func__.0+0x3900>
    80011a02:	00016517          	auipc	a0,0x16
    80011a06:	35650513          	addi	a0,a0,854 # 80027d58 <__func__.0+0x2f8>
    80011a0a:	2ec140ef          	jal	80025cf6 <printf>
    80011a0e:	00037797          	auipc	a5,0x37
    80011a12:	6037c783          	lbu	a5,1539(a5) # 80049011 <excpt+0x1>
    80011a16:	00016597          	auipc	a1,0x16
    80011a1a:	31a58593          	addi	a1,a1,794 # 80027d30 <__func__.0+0x2d0>
    80011a1e:	cf89                	beqz	a5,80011a38 <illegal_except_10+0x15a>
    80011a20:	6418                	ld	a4,8(s0)
    80011a22:	4789                	li	a5,2
    80011a24:	00016597          	auipc	a1,0x16
    80011a28:	2fc58593          	addi	a1,a1,764 # 80027d20 <__func__.0+0x2c0>
    80011a2c:	00f70663          	beq	a4,a5,80011a38 <illegal_except_10+0x15a>
    80011a30:	00016597          	auipc	a1,0x16
    80011a34:	30058593          	addi	a1,a1,768 # 80027d30 <__func__.0+0x2d0>
    80011a38:	00016517          	auipc	a0,0x16
    80011a3c:	33850513          	addi	a0,a0,824 # 80027d70 <__func__.0+0x310>
    80011a40:	2b6140ef          	jal	80025cf6 <printf>
    80011a44:	00037797          	auipc	a5,0x37
    80011a48:	5cd7c783          	lbu	a5,1485(a5) # 80049011 <excpt+0x1>
    80011a4c:	c789                	beqz	a5,80011a56 <illegal_except_10+0x178>
    80011a4e:	6418                	ld	a4,8(s0)
    80011a50:	4789                	li	a5,2
    80011a52:	00f70c63          	beq	a4,a5,80011a6a <illegal_except_10+0x18c>
    80011a56:	00016517          	auipc	a0,0x16
    80011a5a:	32250513          	addi	a0,a0,802 # 80027d78 <__func__.0+0x318>
    80011a5e:	298140ef          	jal	80025cf6 <printf>
    80011a62:	02900513          	li	a0,41
    80011a66:	09a130ef          	jal	80024b00 <putchar>
    80011a6a:	4529                	li	a0,10
    80011a6c:	094130ef          	jal	80024b00 <putchar>
    80011a70:	c095                	beqz	s1,80011a94 <illegal_except_10+0x1b6>
    80011a72:	00037497          	auipc	s1,0x37
    80011a76:	59f4c483          	lbu	s1,1439(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80011a7a:	00016597          	auipc	a1,0x16
    80011a7e:	2b658593          	addi	a1,a1,694 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    80011a82:	cc91                	beqz	s1,80011a9e <illegal_except_10+0x1c0>
    80011a84:	6418                	ld	a4,8(s0)
    80011a86:	4789                	li	a5,2
    TEST_END();
    80011a88:	00016597          	auipc	a1,0x16
    80011a8c:	29858593          	addi	a1,a1,664 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    80011a90:	00f70763          	beq	a4,a5,80011a9e <illegal_except_10+0x1c0>
    80011a94:	4481                	li	s1,0
    TEST_END();
    80011a96:	00016597          	auipc	a1,0x16
    80011a9a:	29a58593          	addi	a1,a1,666 # 80027d30 <__func__.0+0x2d0>
    80011a9e:	00016517          	auipc	a0,0x16
    80011aa2:	33a50513          	addi	a0,a0,826 # 80027dd8 <__func__.0+0x378>
    80011aa6:	250140ef          	jal	80025cf6 <printf>
    80011aaa:	4511                	li	a0,4
    80011aac:	94aef0ef          	jal	80000bf6 <goto_priv>
    80011ab0:	9fdef0ef          	jal	800014ac <reset_state>
}
    80011ab4:	60e2                	ld	ra,24(sp)
    80011ab6:	6442                	ld	s0,16(sp)
    80011ab8:	8526                	mv	a0,s1
    80011aba:	64a2                	ld	s1,8(sp)
    80011abc:	6105                	addi	sp,sp,32
    80011abe:	8082                	ret

0000000080011ac0 <illegal_except_11>:

bool illegal_except_11() {
    80011ac0:	1101                	addi	sp,sp,-32

    TEST_START();
    80011ac2:	00015597          	auipc	a1,0x15
    80011ac6:	f5e58593          	addi	a1,a1,-162 # 80026a20 <__func__.4>
    80011aca:	00016517          	auipc	a0,0x16
    80011ace:	27650513          	addi	a0,a0,630 # 80027d40 <__func__.0+0x2e0>
bool illegal_except_11() {
    80011ad2:	ec06                	sd	ra,24(sp)
    80011ad4:	e822                	sd	s0,16(sp)
    80011ad6:	e426                	sd	s1,8(sp)
    80011ad8:	e04a                	sd	s2,0(sp)
    TEST_START();
    80011ada:	21c140ef          	jal	80025cf6 <printf>
    80011ade:	4529                	li	a0,10
    80011ae0:	020130ef          	jal	80024b00 <putchar>

    //U模式下，执行HFENCE.VVMA或HFENCE.GVMA
    TEST_SETUP_EXCEPT();
    80011ae4:	0330000f          	fence	rw,rw
    80011ae8:	00037417          	auipc	s0,0x37
    80011aec:	52840413          	addi	s0,s0,1320 # 80049010 <excpt>
    80011af0:	4485                	li	s1,1
    80011af2:	00037797          	auipc	a5,0x37
    80011af6:	5407bb23          	sd	zero,1366(a5) # 80049048 <excpt+0x38>
    80011afa:	00941023          	sh	s1,0(s0)
    80011afe:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80011b02:	4511                	li	a0,4
    80011b04:	8f2ef0ef          	jal	80000bf6 <goto_priv>
    reset_state();
    80011b08:	9a5ef0ef          	jal	800014ac <reset_state>
    goto_priv(PRIV_HU);
    80011b0c:	8526                	mv	a0,s1
    80011b0e:	8e8ef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80011b12:	0330000f          	fence	rw,rw
    80011b16:	00037797          	auipc	a5,0x37
    80011b1a:	5207b923          	sd	zero,1330(a5) # 80049048 <excpt+0x38>
    80011b1e:	00941023          	sh	s1,0(s0)
    80011b22:	0330000f          	fence	rw,rw
    asm volatile(
    80011b26:	22000073          	.insn	4, 0x22000073
    hfence_vvma();
    TEST_ASSERT("hu mode hfence.vvma cause to illegal instruction interrupt",
    80011b2a:	08200593          	li	a1,130
    80011b2e:	0001a617          	auipc	a2,0x1a
    80011b32:	86a60613          	addi	a2,a2,-1942 # 8002b398 <__func__.0+0x3938>
    80011b36:	00016517          	auipc	a0,0x16
    80011b3a:	22250513          	addi	a0,a0,546 # 80027d58 <__func__.0+0x2f8>
    80011b3e:	1b8140ef          	jal	80025cf6 <printf>
    80011b42:	00037797          	auipc	a5,0x37
    80011b46:	4cf7c783          	lbu	a5,1231(a5) # 80049011 <excpt+0x1>
    80011b4a:	00016597          	auipc	a1,0x16
    80011b4e:	1e658593          	addi	a1,a1,486 # 80027d30 <__func__.0+0x2d0>
    80011b52:	cf89                	beqz	a5,80011b6c <illegal_except_11+0xac>
    80011b54:	6418                	ld	a4,8(s0)
    80011b56:	4789                	li	a5,2
    80011b58:	00016597          	auipc	a1,0x16
    80011b5c:	1c858593          	addi	a1,a1,456 # 80027d20 <__func__.0+0x2c0>
    80011b60:	00f70663          	beq	a4,a5,80011b6c <illegal_except_11+0xac>
    80011b64:	00016597          	auipc	a1,0x16
    80011b68:	1cc58593          	addi	a1,a1,460 # 80027d30 <__func__.0+0x2d0>
    80011b6c:	00016517          	auipc	a0,0x16
    80011b70:	20450513          	addi	a0,a0,516 # 80027d70 <__func__.0+0x310>
    80011b74:	182140ef          	jal	80025cf6 <printf>
    80011b78:	00037797          	auipc	a5,0x37
    80011b7c:	4997c783          	lbu	a5,1177(a5) # 80049011 <excpt+0x1>
    80011b80:	c789                	beqz	a5,80011b8a <illegal_except_11+0xca>
    80011b82:	6418                	ld	a4,8(s0)
    80011b84:	4789                	li	a5,2
    80011b86:	00f70c63          	beq	a4,a5,80011b9e <illegal_except_11+0xde>
    80011b8a:	00016517          	auipc	a0,0x16
    80011b8e:	1ee50513          	addi	a0,a0,494 # 80027d78 <__func__.0+0x318>
    80011b92:	164140ef          	jal	80025cf6 <printf>
    80011b96:	02900513          	li	a0,41
    80011b9a:	767120ef          	jal	80024b00 <putchar>
    80011b9e:	4529                	li	a0,10
    80011ba0:	761120ef          	jal	80024b00 <putchar>
    80011ba4:	00037797          	auipc	a5,0x37
    80011ba8:	46d7c783          	lbu	a5,1133(a5) # 80049011 <excpt+0x1>
    80011bac:	4481                	li	s1,0
    80011bae:	c789                	beqz	a5,80011bb8 <illegal_except_11+0xf8>
    80011bb0:	6404                	ld	s1,8(s0)
    80011bb2:	14f9                	addi	s1,s1,-2
    80011bb4:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    80011bb8:	0330000f          	fence	rw,rw
    80011bbc:	4905                	li	s2,1
    80011bbe:	00037797          	auipc	a5,0x37
    80011bc2:	4807b523          	sd	zero,1162(a5) # 80049048 <excpt+0x38>
    80011bc6:	01241023          	sh	s2,0(s0)
    80011bca:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80011bce:	4511                	li	a0,4
    80011bd0:	826ef0ef          	jal	80000bf6 <goto_priv>
    reset_state();
    80011bd4:	8d9ef0ef          	jal	800014ac <reset_state>
    goto_priv(PRIV_HU);
    80011bd8:	854a                	mv	a0,s2
    80011bda:	81cef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80011bde:	0330000f          	fence	rw,rw
    80011be2:	00037797          	auipc	a5,0x37
    80011be6:	4607b323          	sd	zero,1126(a5) # 80049048 <excpt+0x38>
    80011bea:	01241023          	sh	s2,0(s0)
    80011bee:	0330000f          	fence	rw,rw
    asm volatile(
    80011bf2:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    80011bf6:	08200593          	li	a1,130
    80011bfa:	00019617          	auipc	a2,0x19
    80011bfe:	7de60613          	addi	a2,a2,2014 # 8002b3d8 <__func__.0+0x3978>
    80011c02:	00016517          	auipc	a0,0x16
    80011c06:	15650513          	addi	a0,a0,342 # 80027d58 <__func__.0+0x2f8>
    80011c0a:	0ec140ef          	jal	80025cf6 <printf>
    80011c0e:	00037797          	auipc	a5,0x37
    80011c12:	4037c783          	lbu	a5,1027(a5) # 80049011 <excpt+0x1>
    80011c16:	00016597          	auipc	a1,0x16
    80011c1a:	11a58593          	addi	a1,a1,282 # 80027d30 <__func__.0+0x2d0>
    80011c1e:	cf89                	beqz	a5,80011c38 <illegal_except_11+0x178>
    80011c20:	6418                	ld	a4,8(s0)
    80011c22:	4789                	li	a5,2
    80011c24:	00016597          	auipc	a1,0x16
    80011c28:	0fc58593          	addi	a1,a1,252 # 80027d20 <__func__.0+0x2c0>
    80011c2c:	00f70663          	beq	a4,a5,80011c38 <illegal_except_11+0x178>
    80011c30:	00016597          	auipc	a1,0x16
    80011c34:	10058593          	addi	a1,a1,256 # 80027d30 <__func__.0+0x2d0>
    80011c38:	00016517          	auipc	a0,0x16
    80011c3c:	13850513          	addi	a0,a0,312 # 80027d70 <__func__.0+0x310>
    80011c40:	0b6140ef          	jal	80025cf6 <printf>
    80011c44:	00037797          	auipc	a5,0x37
    80011c48:	3cd7c783          	lbu	a5,973(a5) # 80049011 <excpt+0x1>
    80011c4c:	c789                	beqz	a5,80011c56 <illegal_except_11+0x196>
    80011c4e:	6418                	ld	a4,8(s0)
    80011c50:	4789                	li	a5,2
    80011c52:	00f70c63          	beq	a4,a5,80011c6a <illegal_except_11+0x1aa>
    80011c56:	00016517          	auipc	a0,0x16
    80011c5a:	12250513          	addi	a0,a0,290 # 80027d78 <__func__.0+0x318>
    80011c5e:	098140ef          	jal	80025cf6 <printf>
    80011c62:	02900513          	li	a0,41
    80011c66:	69b120ef          	jal	80024b00 <putchar>
    80011c6a:	4529                	li	a0,10
    80011c6c:	695120ef          	jal	80024b00 <putchar>
    80011c70:	c095                	beqz	s1,80011c94 <illegal_except_11+0x1d4>
    80011c72:	00037497          	auipc	s1,0x37
    80011c76:	39f4c483          	lbu	s1,927(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80011c7a:	00016597          	auipc	a1,0x16
    80011c7e:	0b658593          	addi	a1,a1,182 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    80011c82:	cc91                	beqz	s1,80011c9e <illegal_except_11+0x1de>
    80011c84:	6418                	ld	a4,8(s0)
    80011c86:	4789                	li	a5,2
    TEST_END();
    80011c88:	00016597          	auipc	a1,0x16
    80011c8c:	09858593          	addi	a1,a1,152 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    80011c90:	00f70763          	beq	a4,a5,80011c9e <illegal_except_11+0x1de>
    80011c94:	4481                	li	s1,0
    TEST_END();
    80011c96:	00016597          	auipc	a1,0x16
    80011c9a:	09a58593          	addi	a1,a1,154 # 80027d30 <__func__.0+0x2d0>
    80011c9e:	00016517          	auipc	a0,0x16
    80011ca2:	13a50513          	addi	a0,a0,314 # 80027dd8 <__func__.0+0x378>
    80011ca6:	050140ef          	jal	80025cf6 <printf>
    80011caa:	4511                	li	a0,4
    80011cac:	f4bee0ef          	jal	80000bf6 <goto_priv>
    80011cb0:	ffcef0ef          	jal	800014ac <reset_state>
}
    80011cb4:	60e2                	ld	ra,24(sp)
    80011cb6:	6442                	ld	s0,16(sp)
    80011cb8:	6902                	ld	s2,0(sp)
    80011cba:	8526                	mv	a0,s1
    80011cbc:	64a2                	ld	s1,8(sp)
    80011cbe:	6105                	addi	sp,sp,32
    80011cc0:	8082                	ret

0000000080011cc2 <illegal_except_12>:

bool illegal_except_12() {
    80011cc2:	1101                	addi	sp,sp,-32

    TEST_START();
    80011cc4:	00015597          	auipc	a1,0x15
    80011cc8:	d7458593          	addi	a1,a1,-652 # 80026a38 <__func__.3>
    80011ccc:	00016517          	auipc	a0,0x16
    80011cd0:	07450513          	addi	a0,a0,116 # 80027d40 <__func__.0+0x2e0>
bool illegal_except_12() {
    80011cd4:	ec06                	sd	ra,24(sp)
    80011cd6:	e822                	sd	s0,16(sp)
    80011cd8:	e426                	sd	s1,8(sp)
    80011cda:	e04a                	sd	s2,0(sp)
    TEST_START();
    80011cdc:	01a140ef          	jal	80025cf6 <printf>
    80011ce0:	4529                	li	a0,10
    80011ce2:	61f120ef          	jal	80024b00 <putchar>

    //在U模式下执行SINVAL.VMA、HINVAL.VVMA和HINVAL.GVMA中的任何一条
    TEST_SETUP_EXCEPT();
    80011ce6:	0330000f          	fence	rw,rw
    80011cea:	00037417          	auipc	s0,0x37
    80011cee:	32640413          	addi	s0,s0,806 # 80049010 <excpt>
    80011cf2:	4485                	li	s1,1
    80011cf4:	00037797          	auipc	a5,0x37
    80011cf8:	3407ba23          	sd	zero,852(a5) # 80049048 <excpt+0x38>
    80011cfc:	00941023          	sh	s1,0(s0)
    80011d00:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80011d04:	4511                	li	a0,4
    80011d06:	ef1ee0ef          	jal	80000bf6 <goto_priv>
    reset_state();
    80011d0a:	fa2ef0ef          	jal	800014ac <reset_state>
    goto_priv(PRIV_HU);
    80011d0e:	8526                	mv	a0,s1
    80011d10:	ee7ee0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80011d14:	0330000f          	fence	rw,rw
    80011d18:	00037797          	auipc	a5,0x37
    80011d1c:	3207b823          	sd	zero,816(a5) # 80049048 <excpt+0x38>
    80011d20:	00941023          	sh	s1,0(s0)
    80011d24:	0330000f          	fence	rw,rw
    asm volatile(
    80011d28:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("hu mode sinval.vma cause to illegal instruction interrupt",
    80011d2c:	08200593          	li	a1,130
    80011d30:	00019617          	auipc	a2,0x19
    80011d34:	6e860613          	addi	a2,a2,1768 # 8002b418 <__func__.0+0x39b8>
    80011d38:	00016517          	auipc	a0,0x16
    80011d3c:	02050513          	addi	a0,a0,32 # 80027d58 <__func__.0+0x2f8>
    80011d40:	7b7130ef          	jal	80025cf6 <printf>
    80011d44:	00037797          	auipc	a5,0x37
    80011d48:	2cd7c783          	lbu	a5,717(a5) # 80049011 <excpt+0x1>
    80011d4c:	00016597          	auipc	a1,0x16
    80011d50:	fe458593          	addi	a1,a1,-28 # 80027d30 <__func__.0+0x2d0>
    80011d54:	cf89                	beqz	a5,80011d6e <illegal_except_12+0xac>
    80011d56:	6418                	ld	a4,8(s0)
    80011d58:	4789                	li	a5,2
    80011d5a:	00016597          	auipc	a1,0x16
    80011d5e:	fc658593          	addi	a1,a1,-58 # 80027d20 <__func__.0+0x2c0>
    80011d62:	00f70663          	beq	a4,a5,80011d6e <illegal_except_12+0xac>
    80011d66:	00016597          	auipc	a1,0x16
    80011d6a:	fca58593          	addi	a1,a1,-54 # 80027d30 <__func__.0+0x2d0>
    80011d6e:	00016517          	auipc	a0,0x16
    80011d72:	00250513          	addi	a0,a0,2 # 80027d70 <__func__.0+0x310>
    80011d76:	781130ef          	jal	80025cf6 <printf>
    80011d7a:	00037797          	auipc	a5,0x37
    80011d7e:	2977c783          	lbu	a5,663(a5) # 80049011 <excpt+0x1>
    80011d82:	c789                	beqz	a5,80011d8c <illegal_except_12+0xca>
    80011d84:	6418                	ld	a4,8(s0)
    80011d86:	4789                	li	a5,2
    80011d88:	00f70c63          	beq	a4,a5,80011da0 <illegal_except_12+0xde>
    80011d8c:	00016517          	auipc	a0,0x16
    80011d90:	fec50513          	addi	a0,a0,-20 # 80027d78 <__func__.0+0x318>
    80011d94:	763130ef          	jal	80025cf6 <printf>
    80011d98:	02900513          	li	a0,41
    80011d9c:	565120ef          	jal	80024b00 <putchar>
    80011da0:	4529                	li	a0,10
    80011da2:	55f120ef          	jal	80024b00 <putchar>
    80011da6:	00037797          	auipc	a5,0x37
    80011daa:	26b7c783          	lbu	a5,619(a5) # 80049011 <excpt+0x1>
    80011dae:	4481                	li	s1,0
    80011db0:	c789                	beqz	a5,80011dba <illegal_except_12+0xf8>
    80011db2:	6404                	ld	s1,8(s0)
    80011db4:	14f9                	addi	s1,s1,-2
    80011db6:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    80011dba:	0330000f          	fence	rw,rw
    80011dbe:	4905                	li	s2,1
    80011dc0:	00037797          	auipc	a5,0x37
    80011dc4:	2807b423          	sd	zero,648(a5) # 80049048 <excpt+0x38>
    80011dc8:	01241023          	sh	s2,0(s0)
    80011dcc:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80011dd0:	4511                	li	a0,4
    80011dd2:	e25ee0ef          	jal	80000bf6 <goto_priv>
    reset_state();
    80011dd6:	ed6ef0ef          	jal	800014ac <reset_state>
    goto_priv(PRIV_HU);
    80011dda:	854a                	mv	a0,s2
    80011ddc:	e1bee0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80011de0:	0330000f          	fence	rw,rw
    80011de4:	00037797          	auipc	a5,0x37
    80011de8:	2607b223          	sd	zero,612(a5) # 80049048 <excpt+0x38>
    80011dec:	01241023          	sh	s2,0(s0)
    80011df0:	0330000f          	fence	rw,rw
    asm volatile(
    80011df4:	66000073          	.insn	4, 0x66000073
    hinval_gvma();
    TEST_ASSERT("hu mode hinval.gvma cause to illegal instruction interrupt",
    80011df8:	08200593          	li	a1,130
    80011dfc:	00019617          	auipc	a2,0x19
    80011e00:	65c60613          	addi	a2,a2,1628 # 8002b458 <__func__.0+0x39f8>
    80011e04:	00016517          	auipc	a0,0x16
    80011e08:	f5450513          	addi	a0,a0,-172 # 80027d58 <__func__.0+0x2f8>
    80011e0c:	6eb130ef          	jal	80025cf6 <printf>
    80011e10:	00037797          	auipc	a5,0x37
    80011e14:	2017c783          	lbu	a5,513(a5) # 80049011 <excpt+0x1>
    80011e18:	00016597          	auipc	a1,0x16
    80011e1c:	f1858593          	addi	a1,a1,-232 # 80027d30 <__func__.0+0x2d0>
    80011e20:	cf89                	beqz	a5,80011e3a <illegal_except_12+0x178>
    80011e22:	6418                	ld	a4,8(s0)
    80011e24:	4789                	li	a5,2
    80011e26:	00016597          	auipc	a1,0x16
    80011e2a:	efa58593          	addi	a1,a1,-262 # 80027d20 <__func__.0+0x2c0>
    80011e2e:	00f70663          	beq	a4,a5,80011e3a <illegal_except_12+0x178>
    80011e32:	00016597          	auipc	a1,0x16
    80011e36:	efe58593          	addi	a1,a1,-258 # 80027d30 <__func__.0+0x2d0>
    80011e3a:	00016517          	auipc	a0,0x16
    80011e3e:	f3650513          	addi	a0,a0,-202 # 80027d70 <__func__.0+0x310>
    80011e42:	6b5130ef          	jal	80025cf6 <printf>
    80011e46:	00037797          	auipc	a5,0x37
    80011e4a:	1cb7c783          	lbu	a5,459(a5) # 80049011 <excpt+0x1>
    80011e4e:	c789                	beqz	a5,80011e58 <illegal_except_12+0x196>
    80011e50:	6418                	ld	a4,8(s0)
    80011e52:	4789                	li	a5,2
    80011e54:	00f70c63          	beq	a4,a5,80011e6c <illegal_except_12+0x1aa>
    80011e58:	00016517          	auipc	a0,0x16
    80011e5c:	f2050513          	addi	a0,a0,-224 # 80027d78 <__func__.0+0x318>
    80011e60:	697130ef          	jal	80025cf6 <printf>
    80011e64:	02900513          	li	a0,41
    80011e68:	499120ef          	jal	80024b00 <putchar>
    80011e6c:	4529                	li	a0,10
    80011e6e:	493120ef          	jal	80024b00 <putchar>
    80011e72:	c881                	beqz	s1,80011e82 <illegal_except_12+0x1c0>
    80011e74:	00037797          	auipc	a5,0x37
    80011e78:	19d7c783          	lbu	a5,413(a5) # 80049011 <excpt+0x1>
    80011e7c:	4481                	li	s1,0
    80011e7e:	10079763          	bnez	a5,80011f8c <illegal_except_12+0x2ca>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    80011e82:	0330000f          	fence	rw,rw
    80011e86:	4905                	li	s2,1
    80011e88:	00037797          	auipc	a5,0x37
    80011e8c:	1c07b023          	sd	zero,448(a5) # 80049048 <excpt+0x38>
    80011e90:	01241023          	sh	s2,0(s0)
    80011e94:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80011e98:	4511                	li	a0,4
    80011e9a:	d5dee0ef          	jal	80000bf6 <goto_priv>
    reset_state();
    80011e9e:	e0eef0ef          	jal	800014ac <reset_state>
    goto_priv(PRIV_HU);
    80011ea2:	854a                	mv	a0,s2
    80011ea4:	d53ee0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80011ea8:	0330000f          	fence	rw,rw
    80011eac:	00037797          	auipc	a5,0x37
    80011eb0:	1807be23          	sd	zero,412(a5) # 80049048 <excpt+0x38>
    80011eb4:	01241023          	sh	s2,0(s0)
    80011eb8:	0330000f          	fence	rw,rw
    asm volatile(
    80011ebc:	26000073          	.insn	4, 0x26000073
    hinval_vvma();
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    80011ec0:	08200593          	li	a1,130
    80011ec4:	00019617          	auipc	a2,0x19
    80011ec8:	5d460613          	addi	a2,a2,1492 # 8002b498 <__func__.0+0x3a38>
    80011ecc:	00016517          	auipc	a0,0x16
    80011ed0:	e8c50513          	addi	a0,a0,-372 # 80027d58 <__func__.0+0x2f8>
    80011ed4:	623130ef          	jal	80025cf6 <printf>
    80011ed8:	00037797          	auipc	a5,0x37
    80011edc:	1397c783          	lbu	a5,313(a5) # 80049011 <excpt+0x1>
    80011ee0:	00016597          	auipc	a1,0x16
    80011ee4:	e5058593          	addi	a1,a1,-432 # 80027d30 <__func__.0+0x2d0>
    80011ee8:	cf89                	beqz	a5,80011f02 <illegal_except_12+0x240>
    80011eea:	6418                	ld	a4,8(s0)
    80011eec:	4789                	li	a5,2
    80011eee:	00016597          	auipc	a1,0x16
    80011ef2:	e3258593          	addi	a1,a1,-462 # 80027d20 <__func__.0+0x2c0>
    80011ef6:	00f70663          	beq	a4,a5,80011f02 <illegal_except_12+0x240>
    80011efa:	00016597          	auipc	a1,0x16
    80011efe:	e3658593          	addi	a1,a1,-458 # 80027d30 <__func__.0+0x2d0>
    80011f02:	00016517          	auipc	a0,0x16
    80011f06:	e6e50513          	addi	a0,a0,-402 # 80027d70 <__func__.0+0x310>
    80011f0a:	5ed130ef          	jal	80025cf6 <printf>
    80011f0e:	00037797          	auipc	a5,0x37
    80011f12:	1037c783          	lbu	a5,259(a5) # 80049011 <excpt+0x1>
    80011f16:	c789                	beqz	a5,80011f20 <illegal_except_12+0x25e>
    80011f18:	6418                	ld	a4,8(s0)
    80011f1a:	4789                	li	a5,2
    80011f1c:	00f70c63          	beq	a4,a5,80011f34 <illegal_except_12+0x272>
    80011f20:	00016517          	auipc	a0,0x16
    80011f24:	e5850513          	addi	a0,a0,-424 # 80027d78 <__func__.0+0x318>
    80011f28:	5cf130ef          	jal	80025cf6 <printf>
    80011f2c:	02900513          	li	a0,41
    80011f30:	3d1120ef          	jal	80024b00 <putchar>
    80011f34:	4529                	li	a0,10
    80011f36:	3cb120ef          	jal	80024b00 <putchar>
    80011f3a:	c095                	beqz	s1,80011f5e <illegal_except_12+0x29c>
    80011f3c:	00037497          	auipc	s1,0x37
    80011f40:	0d54c483          	lbu	s1,213(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80011f44:	00016597          	auipc	a1,0x16
    80011f48:	dec58593          	addi	a1,a1,-532 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    80011f4c:	cc91                	beqz	s1,80011f68 <illegal_except_12+0x2a6>
    80011f4e:	6418                	ld	a4,8(s0)
    80011f50:	4789                	li	a5,2
    TEST_END();
    80011f52:	00016597          	auipc	a1,0x16
    80011f56:	dce58593          	addi	a1,a1,-562 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    80011f5a:	00f70763          	beq	a4,a5,80011f68 <illegal_except_12+0x2a6>
    80011f5e:	4481                	li	s1,0
    TEST_END();
    80011f60:	00016597          	auipc	a1,0x16
    80011f64:	dd058593          	addi	a1,a1,-560 # 80027d30 <__func__.0+0x2d0>
    80011f68:	00016517          	auipc	a0,0x16
    80011f6c:	e7050513          	addi	a0,a0,-400 # 80027dd8 <__func__.0+0x378>
    80011f70:	587130ef          	jal	80025cf6 <printf>
    80011f74:	4511                	li	a0,4
    80011f76:	c81ee0ef          	jal	80000bf6 <goto_priv>
    80011f7a:	d32ef0ef          	jal	800014ac <reset_state>
}
    80011f7e:	60e2                	ld	ra,24(sp)
    80011f80:	6442                	ld	s0,16(sp)
    80011f82:	6902                	ld	s2,0(sp)
    80011f84:	8526                	mv	a0,s1
    80011f86:	64a2                	ld	s1,8(sp)
    80011f88:	6105                	addi	sp,sp,32
    80011f8a:	8082                	ret
    TEST_ASSERT("hu mode hinval.gvma cause to illegal instruction interrupt",
    80011f8c:	6404                	ld	s1,8(s0)
    80011f8e:	14f9                	addi	s1,s1,-2
    80011f90:	0014b493          	seqz	s1,s1
    80011f94:	b5fd                	j	80011e82 <illegal_except_12+0x1c0>

0000000080011f96 <illegal_except_13>:


bool illegal_except_13() {
    80011f96:	1101                	addi	sp,sp,-32

    TEST_START();
    80011f98:	00015597          	auipc	a1,0x15
    80011f9c:	ab858593          	addi	a1,a1,-1352 # 80026a50 <__func__.2>
    80011fa0:	00016517          	auipc	a0,0x16
    80011fa4:	da050513          	addi	a0,a0,-608 # 80027d40 <__func__.0+0x2e0>
bool illegal_except_13() {
    80011fa8:	ec06                	sd	ra,24(sp)
    80011faa:	e822                	sd	s0,16(sp)
    80011fac:	e426                	sd	s1,8(sp)
    TEST_START();
    80011fae:	549130ef          	jal	80025cf6 <printf>
    80011fb2:	4529                	li	a0,10
    80011fb4:	34d120ef          	jal	80024b00 <putchar>
    //satp.MODE只读0，执行sfence.vma
    TEST_SETUP_EXCEPT();
    80011fb8:	0330000f          	fence	rw,rw
    80011fbc:	00037417          	auipc	s0,0x37
    80011fc0:	05440413          	addi	s0,s0,84 # 80049010 <excpt>
    80011fc4:	4785                	li	a5,1
    80011fc6:	00037717          	auipc	a4,0x37
    80011fca:	08073123          	sd	zero,130(a4) # 80049048 <excpt+0x38>
    80011fce:	00f41023          	sh	a5,0(s0)
    80011fd2:	0330000f          	fence	rw,rw

    goto_priv(PRIV_HS);
    80011fd6:	450d                	li	a0,3
    80011fd8:	c1fee0ef          	jal	80000bf6 <goto_priv>
    CSRW(CSR_SATP,0ULL);
    80011fdc:	18005073          	csrwi	satp,0
    asm volatile(
    80011fe0:	12000073          	sfence.vma
    sfence_vma();
    printf("%d",excpt.triggered);
    80011fe4:	00037597          	auipc	a1,0x37
    80011fe8:	02d5c583          	lbu	a1,45(a1) # 80049011 <excpt+0x1>
    80011fec:	00019517          	auipc	a0,0x19
    80011ff0:	00450513          	addi	a0,a0,4 # 8002aff0 <__func__.0+0x3590>
    80011ff4:	503130ef          	jal	80025cf6 <printf>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    80011ff8:	08200593          	li	a1,130
    80011ffc:	00019617          	auipc	a2,0x19
    80012000:	4dc60613          	addi	a2,a2,1244 # 8002b4d8 <__func__.0+0x3a78>
    80012004:	00016517          	auipc	a0,0x16
    80012008:	d5450513          	addi	a0,a0,-684 # 80027d58 <__func__.0+0x2f8>
    8001200c:	4eb130ef          	jal	80025cf6 <printf>
    80012010:	00037797          	auipc	a5,0x37
    80012014:	0017c783          	lbu	a5,1(a5) # 80049011 <excpt+0x1>
    80012018:	00016597          	auipc	a1,0x16
    8001201c:	d1858593          	addi	a1,a1,-744 # 80027d30 <__func__.0+0x2d0>
    80012020:	cf89                	beqz	a5,8001203a <illegal_except_13+0xa4>
    80012022:	6418                	ld	a4,8(s0)
    80012024:	4789                	li	a5,2
    80012026:	00016597          	auipc	a1,0x16
    8001202a:	cfa58593          	addi	a1,a1,-774 # 80027d20 <__func__.0+0x2c0>
    8001202e:	00f70663          	beq	a4,a5,8001203a <illegal_except_13+0xa4>
    80012032:	00016597          	auipc	a1,0x16
    80012036:	cfe58593          	addi	a1,a1,-770 # 80027d30 <__func__.0+0x2d0>
    8001203a:	00016517          	auipc	a0,0x16
    8001203e:	d3650513          	addi	a0,a0,-714 # 80027d70 <__func__.0+0x310>
    80012042:	4b5130ef          	jal	80025cf6 <printf>
    80012046:	00037797          	auipc	a5,0x37
    8001204a:	fcb7c783          	lbu	a5,-53(a5) # 80049011 <excpt+0x1>
    8001204e:	c789                	beqz	a5,80012058 <illegal_except_13+0xc2>
    80012050:	6418                	ld	a4,8(s0)
    80012052:	4789                	li	a5,2
    80012054:	00f70c63          	beq	a4,a5,8001206c <illegal_except_13+0xd6>
    80012058:	00016517          	auipc	a0,0x16
    8001205c:	d2050513          	addi	a0,a0,-736 # 80027d78 <__func__.0+0x318>
    80012060:	497130ef          	jal	80025cf6 <printf>
    80012064:	02900513          	li	a0,41
    80012068:	299120ef          	jal	80024b00 <putchar>
    8001206c:	4529                	li	a0,10
    8001206e:	293120ef          	jal	80024b00 <putchar>
    80012072:	00037497          	auipc	s1,0x37
    80012076:	f9f4c483          	lbu	s1,-97(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8001207a:	00016597          	auipc	a1,0x16
    8001207e:	cb658593          	addi	a1,a1,-842 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    80012082:	cc91                	beqz	s1,8001209e <illegal_except_13+0x108>
    80012084:	6418                	ld	a4,8(s0)
    80012086:	4789                	li	a5,2
    TEST_END();
    80012088:	00016597          	auipc	a1,0x16
    8001208c:	c9858593          	addi	a1,a1,-872 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    80012090:	00f70763          	beq	a4,a5,8001209e <illegal_except_13+0x108>
    80012094:	4481                	li	s1,0
    TEST_END();
    80012096:	00016597          	auipc	a1,0x16
    8001209a:	c9a58593          	addi	a1,a1,-870 # 80027d30 <__func__.0+0x2d0>
    8001209e:	00016517          	auipc	a0,0x16
    800120a2:	d3a50513          	addi	a0,a0,-710 # 80027dd8 <__func__.0+0x378>
    800120a6:	451130ef          	jal	80025cf6 <printf>
    800120aa:	4511                	li	a0,4
    800120ac:	b4bee0ef          	jal	80000bf6 <goto_priv>
    800120b0:	bfcef0ef          	jal	800014ac <reset_state>
}
    800120b4:	60e2                	ld	ra,24(sp)
    800120b6:	6442                	ld	s0,16(sp)
    800120b8:	8526                	mv	a0,s1
    800120ba:	64a2                	ld	s1,8(sp)
    800120bc:	6105                	addi	sp,sp,32
    800120be:	8082                	ret

00000000800120c0 <illegal_except_14>:
    //扩展FS的状态设置为0时，尝试读取或者写入浮点对应的状态指令
    //扩展VS的状态设置为0时，尝试读取或者写入向量对应的状态指令
    //扩展XS的状态设置为0时，尝试读取或者写入其他扩展对应的状态指令
    //设置HU=0时，在U模式执行超级虚拟机指令

bool illegal_except_14() {
    800120c0:	1101                	addi	sp,sp,-32

    TEST_START();
    800120c2:	00015597          	auipc	a1,0x15
    800120c6:	9a658593          	addi	a1,a1,-1626 # 80026a68 <__func__.1>
    800120ca:	00016517          	auipc	a0,0x16
    800120ce:	c7650513          	addi	a0,a0,-906 # 80027d40 <__func__.0+0x2e0>
bool illegal_except_14() {
    800120d2:	ec06                	sd	ra,24(sp)
    800120d4:	e822                	sd	s0,16(sp)
    800120d6:	e426                	sd	s1,8(sp)
    TEST_START();
    800120d8:	41f130ef          	jal	80025cf6 <printf>
    800120dc:	4529                	li	a0,10
    800120de:	223120ef          	jal	80024b00 <putchar>
    //mstatus.TSR=1时，执行sret指令
    TEST_SETUP_EXCEPT();
    800120e2:	0330000f          	fence	rw,rw
    800120e6:	00037417          	auipc	s0,0x37
    800120ea:	f2a40413          	addi	s0,s0,-214 # 80049010 <excpt>
    800120ee:	4785                	li	a5,1
    800120f0:	00037717          	auipc	a4,0x37
    800120f4:	f4073c23          	sd	zero,-168(a4) # 80049048 <excpt+0x38>
    800120f8:	00f41023          	sh	a5,0(s0)
    800120fc:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80012100:	4511                	li	a0,4
    80012102:	af5ee0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 22);    //TSR位
    80012106:	004007b7          	lui	a5,0x400
    8001210a:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    8001210e:	450d                	li	a0,3
    80012110:	ae7ee0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VU);
    80012114:	4501                	li	a0,0
    80012116:	a01ee0ef          	jal	80000b16 <set_prev_priv>
    asm volatile(
    8001211a:	10200073          	sret

    //TEST_EXEC_SRET();
    sret();

    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001211e:	08200593          	li	a1,130
    80012122:	00019617          	auipc	a2,0x19
    80012126:	40660613          	addi	a2,a2,1030 # 8002b528 <__func__.0+0x3ac8>
    8001212a:	00016517          	auipc	a0,0x16
    8001212e:	c2e50513          	addi	a0,a0,-978 # 80027d58 <__func__.0+0x2f8>
    80012132:	3c5130ef          	jal	80025cf6 <printf>
    80012136:	00037797          	auipc	a5,0x37
    8001213a:	edb7c783          	lbu	a5,-293(a5) # 80049011 <excpt+0x1>
    8001213e:	00016597          	auipc	a1,0x16
    80012142:	bf258593          	addi	a1,a1,-1038 # 80027d30 <__func__.0+0x2d0>
    80012146:	cf89                	beqz	a5,80012160 <illegal_except_14+0xa0>
    80012148:	6418                	ld	a4,8(s0)
    8001214a:	4789                	li	a5,2
    8001214c:	00016597          	auipc	a1,0x16
    80012150:	bd458593          	addi	a1,a1,-1068 # 80027d20 <__func__.0+0x2c0>
    80012154:	00f70663          	beq	a4,a5,80012160 <illegal_except_14+0xa0>
    80012158:	00016597          	auipc	a1,0x16
    8001215c:	bd858593          	addi	a1,a1,-1064 # 80027d30 <__func__.0+0x2d0>
    80012160:	00016517          	auipc	a0,0x16
    80012164:	c1050513          	addi	a0,a0,-1008 # 80027d70 <__func__.0+0x310>
    80012168:	38f130ef          	jal	80025cf6 <printf>
    8001216c:	00037797          	auipc	a5,0x37
    80012170:	ea57c783          	lbu	a5,-347(a5) # 80049011 <excpt+0x1>
    80012174:	c789                	beqz	a5,8001217e <illegal_except_14+0xbe>
    80012176:	6418                	ld	a4,8(s0)
    80012178:	4789                	li	a5,2
    8001217a:	00f70c63          	beq	a4,a5,80012192 <illegal_except_14+0xd2>
    8001217e:	00016517          	auipc	a0,0x16
    80012182:	bfa50513          	addi	a0,a0,-1030 # 80027d78 <__func__.0+0x318>
    80012186:	371130ef          	jal	80025cf6 <printf>
    8001218a:	02900513          	li	a0,41
    8001218e:	173120ef          	jal	80024b00 <putchar>
    80012192:	4529                	li	a0,10
    80012194:	16d120ef          	jal	80024b00 <putchar>
    80012198:	00037497          	auipc	s1,0x37
    8001219c:	e794c483          	lbu	s1,-391(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    800121a0:	00016597          	auipc	a1,0x16
    800121a4:	b9058593          	addi	a1,a1,-1136 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    800121a8:	cc91                	beqz	s1,800121c4 <illegal_except_14+0x104>
    800121aa:	6418                	ld	a4,8(s0)
    800121ac:	4789                	li	a5,2
    TEST_END();
    800121ae:	00016597          	auipc	a1,0x16
    800121b2:	b7258593          	addi	a1,a1,-1166 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    800121b6:	00f70763          	beq	a4,a5,800121c4 <illegal_except_14+0x104>
    800121ba:	4481                	li	s1,0
    TEST_END();
    800121bc:	00016597          	auipc	a1,0x16
    800121c0:	b7458593          	addi	a1,a1,-1164 # 80027d30 <__func__.0+0x2d0>
    800121c4:	00016517          	auipc	a0,0x16
    800121c8:	c1450513          	addi	a0,a0,-1004 # 80027dd8 <__func__.0+0x378>
    800121cc:	32b130ef          	jal	80025cf6 <printf>
    800121d0:	4511                	li	a0,4
    800121d2:	a25ee0ef          	jal	80000bf6 <goto_priv>
    800121d6:	ad6ef0ef          	jal	800014ac <reset_state>

}
    800121da:	60e2                	ld	ra,24(sp)
    800121dc:	6442                	ld	s0,16(sp)
    800121de:	8526                	mv	a0,s1
    800121e0:	64a2                	ld	s1,8(sp)
    800121e2:	6105                	addi	sp,sp,32
    800121e4:	8082                	ret

00000000800121e6 <illegal_except_15>:

bool illegal_except_15() {
    800121e6:	1141                	addi	sp,sp,-16

    TEST_START();
    800121e8:	00015597          	auipc	a1,0x15
    800121ec:	89858593          	addi	a1,a1,-1896 # 80026a80 <__func__.0>
    800121f0:	00016517          	auipc	a0,0x16
    800121f4:	b5050513          	addi	a0,a0,-1200 # 80027d40 <__func__.0+0x2e0>
bool illegal_except_15() {
    800121f8:	e406                	sd	ra,8(sp)
    800121fa:	e022                	sd	s0,0(sp)
    TEST_START();
    800121fc:	2fb130ef          	jal	80025cf6 <printf>
    80012200:	4529                	li	a0,10
    80012202:	0ff120ef          	jal	80024b00 <putchar>
    //mstatus.TSR=1时，执行sret指令
    TEST_SETUP_EXCEPT();
    80012206:	0330000f          	fence	rw,rw
    8001220a:	4785                	li	a5,1
    8001220c:	00037717          	auipc	a4,0x37
    80012210:	e2073e23          	sd	zero,-452(a4) # 80049048 <excpt+0x38>
    80012214:	00037717          	auipc	a4,0x37
    80012218:	def71e23          	sh	a5,-516(a4) # 80049010 <excpt>
    8001221c:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80012220:	4511                	li	a0,4
    80012222:	9d5ee0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 22);    //TSR位
    80012226:	004007b7          	lui	a5,0x400
    8001222a:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    8001222e:	450d                	li	a0,3
    80012230:	9c7ee0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80012234:	4509                	li	a0,2
    80012236:	8e1ee0ef          	jal	80000b16 <set_prev_priv>

    TEST_EXEC_SRET();
    8001223a:	00000297          	auipc	t0,0x0
    8001223e:	01028293          	addi	t0,t0,16 # 8001224a <illegal_except_15+0x64>
    80012242:	14129073          	csrw	sepc,t0
    80012246:	10200073          	sret


    TEST_ASSERT("hs mode sret successful when mstatus.TSR=0",
    8001224a:	08200593          	li	a1,130
    8001224e:	00019617          	auipc	a2,0x19
    80012252:	30a60613          	addi	a2,a2,778 # 8002b558 <__func__.0+0x3af8>
    80012256:	00016517          	auipc	a0,0x16
    8001225a:	b0250513          	addi	a0,a0,-1278 # 80027d58 <__func__.0+0x2f8>
    8001225e:	299130ef          	jal	80025cf6 <printf>
    80012262:	00037797          	auipc	a5,0x37
    80012266:	daf7c783          	lbu	a5,-593(a5) # 80049011 <excpt+0x1>
    8001226a:	00016597          	auipc	a1,0x16
    8001226e:	ab658593          	addi	a1,a1,-1354 # 80027d20 <__func__.0+0x2c0>
    80012272:	c789                	beqz	a5,8001227c <illegal_except_15+0x96>
    80012274:	00016597          	auipc	a1,0x16
    80012278:	abc58593          	addi	a1,a1,-1348 # 80027d30 <__func__.0+0x2d0>
    8001227c:	00016517          	auipc	a0,0x16
    80012280:	af450513          	addi	a0,a0,-1292 # 80027d70 <__func__.0+0x310>
    80012284:	273130ef          	jal	80025cf6 <printf>
    80012288:	00037797          	auipc	a5,0x37
    8001228c:	d897c783          	lbu	a5,-631(a5) # 80049011 <excpt+0x1>
    80012290:	e7a1                	bnez	a5,800122d8 <illegal_except_15+0xf2>
    80012292:	4529                	li	a0,10
    80012294:	06d120ef          	jal	80024b00 <putchar>
    80012298:	00037797          	auipc	a5,0x37
    8001229c:	d797c783          	lbu	a5,-647(a5) # 80049011 <excpt+0x1>
    800122a0:	e795                	bnez	a5,800122cc <illegal_except_15+0xe6>
    800122a2:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    800122a4:	00016597          	auipc	a1,0x16
    800122a8:	a7c58593          	addi	a1,a1,-1412 # 80027d20 <__func__.0+0x2c0>
    800122ac:	00016517          	auipc	a0,0x16
    800122b0:	b2c50513          	addi	a0,a0,-1236 # 80027dd8 <__func__.0+0x378>
    800122b4:	243130ef          	jal	80025cf6 <printf>
    800122b8:	4511                	li	a0,4
    800122ba:	93dee0ef          	jal	80000bf6 <goto_priv>
    800122be:	9eeef0ef          	jal	800014ac <reset_state>

}
    800122c2:	60a2                	ld	ra,8(sp)
    800122c4:	8522                	mv	a0,s0
    800122c6:	6402                	ld	s0,0(sp)
    800122c8:	0141                	addi	sp,sp,16
    800122ca:	8082                	ret
    TEST_ASSERT("hs mode sret successful when mstatus.TSR=0",
    800122cc:	4401                	li	s0,0
    TEST_END();
    800122ce:	00016597          	auipc	a1,0x16
    800122d2:	a6258593          	addi	a1,a1,-1438 # 80027d30 <__func__.0+0x2d0>
    800122d6:	bfd9                	j	800122ac <illegal_except_15+0xc6>
    TEST_ASSERT("hs mode sret successful when mstatus.TSR=0",
    800122d8:	00016517          	auipc	a0,0x16
    800122dc:	aa050513          	addi	a0,a0,-1376 # 80027d78 <__func__.0+0x318>
    800122e0:	217130ef          	jal	80025cf6 <printf>
    800122e4:	02900513          	li	a0,41
    800122e8:	019120ef          	jal	80024b00 <putchar>
    800122ec:	b75d                	j	80012292 <illegal_except_15+0xac>

00000000800122ee <external_interrupt_MEI>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool external_interrupt_MEI() {
    800122ee:	1101                	addi	sp,sp,-32

    TEST_START();
    800122f0:	00014597          	auipc	a1,0x14
    800122f4:	7a858593          	addi	a1,a1,1960 # 80026a98 <__func__.2>
    800122f8:	00016517          	auipc	a0,0x16
    800122fc:	a4850513          	addi	a0,a0,-1464 # 80027d40 <__func__.0+0x2e0>
bool external_interrupt_MEI() {
    80012300:	ec06                	sd	ra,24(sp)
    80012302:	e822                	sd	s0,16(sp)
    80012304:	e426                	sd	s1,8(sp)
    TEST_START();
    80012306:	1f1130ef          	jal	80025cf6 <printf>
    8001230a:	4529                	li	a0,10
    8001230c:	7f4120ef          	jal	80024b00 <putchar>

    TEST_SETUP_EXCEPT();
    80012310:	0330000f          	fence	rw,rw
    80012314:	00037497          	auipc	s1,0x37
    80012318:	cfc48493          	addi	s1,s1,-772 # 80049010 <excpt>
    8001231c:	4785                	li	a5,1
    8001231e:	00037717          	auipc	a4,0x37
    80012322:	d2073523          	sd	zero,-726(a4) # 80049048 <excpt+0x38>
    80012326:	00f49023          	sh	a5,0(s1)
    8001232a:	0330000f          	fence	rw,rw

   
    //M模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    goto_priv(PRIV_M);
    8001232e:	4511                	li	a0,4
    80012330:	8c7ee0ef          	jal	80000bf6 <goto_priv>
    CSRW(CSR_MIDELEG,0);
    80012334:	30305073          	csrwi	mideleg,0
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    80012338:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);         
    8001233c:	6785                	lui	a5,0x1
    8001233e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80012342:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);     //p33 read-only  is set and cleared by a platform-specific interrupt controller
    80012346:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    8001234a:	4511                	li	a0,4
    8001234c:	8abee0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    80012350:	08200593          	li	a1,130
    80012354:	00019617          	auipc	a2,0x19
    80012358:	23460613          	addi	a2,a2,564 # 8002b588 <__func__.0+0x3b28>
    8001235c:	00016517          	auipc	a0,0x16
    80012360:	9fc50513          	addi	a0,a0,-1540 # 80027d58 <__func__.0+0x2f8>
    80012364:	193130ef          	jal	80025cf6 <printf>
    80012368:	00037797          	auipc	a5,0x37
    8001236c:	ca97c783          	lbu	a5,-855(a5) # 80049011 <excpt+0x1>
    80012370:	00016597          	auipc	a1,0x16
    80012374:	9c058593          	addi	a1,a1,-1600 # 80027d30 <__func__.0+0x2d0>
    80012378:	cf99                	beqz	a5,80012396 <external_interrupt_MEI+0xa8>
    8001237a:	57fd                	li	a5,-1
    8001237c:	6498                	ld	a4,8(s1)
    8001237e:	17fe                	slli	a5,a5,0x3f
    80012380:	07ad                	addi	a5,a5,11
    80012382:	00016597          	auipc	a1,0x16
    80012386:	99e58593          	addi	a1,a1,-1634 # 80027d20 <__func__.0+0x2c0>
    8001238a:	00f70663          	beq	a4,a5,80012396 <external_interrupt_MEI+0xa8>
    8001238e:	00016597          	auipc	a1,0x16
    80012392:	9a258593          	addi	a1,a1,-1630 # 80027d30 <__func__.0+0x2d0>
    80012396:	00016517          	auipc	a0,0x16
    8001239a:	9da50513          	addi	a0,a0,-1574 # 80027d70 <__func__.0+0x310>
    8001239e:	159130ef          	jal	80025cf6 <printf>
    800123a2:	00037797          	auipc	a5,0x37
    800123a6:	c6f7c783          	lbu	a5,-913(a5) # 80049011 <excpt+0x1>
    800123aa:	c799                	beqz	a5,800123b8 <external_interrupt_MEI+0xca>
    800123ac:	57fd                	li	a5,-1
    800123ae:	6498                	ld	a4,8(s1)
    800123b0:	17fe                	slli	a5,a5,0x3f
    800123b2:	07ad                	addi	a5,a5,11
    800123b4:	00f70c63          	beq	a4,a5,800123cc <external_interrupt_MEI+0xde>
    800123b8:	00016517          	auipc	a0,0x16
    800123bc:	9c050513          	addi	a0,a0,-1600 # 80027d78 <__func__.0+0x318>
    800123c0:	137130ef          	jal	80025cf6 <printf>
    800123c4:	02900513          	li	a0,41
    800123c8:	738120ef          	jal	80024b00 <putchar>
    800123cc:	4529                	li	a0,10
    800123ce:	732120ef          	jal	80024b00 <putchar>
    800123d2:	00037797          	auipc	a5,0x37
    800123d6:	c3f7c783          	lbu	a5,-961(a5) # 80049011 <excpt+0x1>
    800123da:	4401                	li	s0,0
    800123dc:	c799                	beqz	a5,800123ea <external_interrupt_MEI+0xfc>
    800123de:	6480                	ld	s0,8(s1)
    800123e0:	57ad                	li	a5,-21
    800123e2:	8385                	srli	a5,a5,0x1
    800123e4:	943e                	add	s0,s0,a5
    800123e6:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_MEI
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0
    TEST_SETUP_EXCEPT();
    800123ea:	0330000f          	fence	rw,rw
    800123ee:	4785                	li	a5,1
    800123f0:	00037717          	auipc	a4,0x37
    800123f4:	c4073c23          	sd	zero,-936(a4) # 80049048 <excpt+0x38>
    800123f8:	00f49023          	sh	a5,0(s1)
    800123fc:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80012400:	4511                	li	a0,4
    80012402:	ff4ee0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80012406:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    8001240a:	6785                	lui	a5,0x1
    8001240c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80012410:	3047b073          	csrc	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    80012414:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    80012418:	4511                	li	a0,4
    8001241a:	fdcee0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt pending when mstatus.mie=1 and mip.meip=1 and mie.meie=0",
    8001241e:	08200593          	li	a1,130
    80012422:	00019617          	auipc	a2,0x19
    80012426:	1c660613          	addi	a2,a2,454 # 8002b5e8 <__func__.0+0x3b88>
    8001242a:	00016517          	auipc	a0,0x16
    8001242e:	92e50513          	addi	a0,a0,-1746 # 80027d58 <__func__.0+0x2f8>
    80012432:	0c5130ef          	jal	80025cf6 <printf>
    80012436:	00037797          	auipc	a5,0x37
    8001243a:	bdb7c783          	lbu	a5,-1061(a5) # 80049011 <excpt+0x1>
    8001243e:	00016597          	auipc	a1,0x16
    80012442:	8f258593          	addi	a1,a1,-1806 # 80027d30 <__func__.0+0x2d0>
    80012446:	e789                	bnez	a5,80012450 <external_interrupt_MEI+0x162>
    80012448:	00016597          	auipc	a1,0x16
    8001244c:	8d858593          	addi	a1,a1,-1832 # 80027d20 <__func__.0+0x2c0>
    80012450:	00016517          	auipc	a0,0x16
    80012454:	92050513          	addi	a0,a0,-1760 # 80027d70 <__func__.0+0x310>
    80012458:	09f130ef          	jal	80025cf6 <printf>
    8001245c:	00037797          	auipc	a5,0x37
    80012460:	bb57c783          	lbu	a5,-1099(a5) # 80049011 <excpt+0x1>
    80012464:	280795e3          	bnez	a5,80012eee <external_interrupt_MEI+0xc00>
    80012468:	4529                	li	a0,10
    8001246a:	696120ef          	jal	80024b00 <putchar>
    8001246e:	c419                	beqz	s0,8001247c <external_interrupt_MEI+0x18e>
    80012470:	00037417          	auipc	s0,0x37
    80012474:	ba144403          	lbu	s0,-1119(s0) # 80049011 <excpt+0x1>
    80012478:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1
    TEST_SETUP_EXCEPT();
    8001247c:	0330000f          	fence	rw,rw
    80012480:	4785                	li	a5,1
    80012482:	00037717          	auipc	a4,0x37
    80012486:	bc073323          	sd	zero,-1082(a4) # 80049048 <excpt+0x38>
    8001248a:	00f49023          	sh	a5,0(s1)
    8001248e:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80012492:	4511                	li	a0,4
    80012494:	f62ee0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80012498:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8001249c:	6785                	lui	a5,0x1
    8001249e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800124a2:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    800124a6:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    800124aa:	4511                	li	a0,4
    800124ac:	f4aee0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1",
    800124b0:	08200593          	li	a1,130
    800124b4:	00019617          	auipc	a2,0x19
    800124b8:	18c60613          	addi	a2,a2,396 # 8002b640 <__func__.0+0x3be0>
    800124bc:	00016517          	auipc	a0,0x16
    800124c0:	89c50513          	addi	a0,a0,-1892 # 80027d58 <__func__.0+0x2f8>
    800124c4:	033130ef          	jal	80025cf6 <printf>
    800124c8:	00037797          	auipc	a5,0x37
    800124cc:	b497c783          	lbu	a5,-1207(a5) # 80049011 <excpt+0x1>
    800124d0:	00016597          	auipc	a1,0x16
    800124d4:	86058593          	addi	a1,a1,-1952 # 80027d30 <__func__.0+0x2d0>
    800124d8:	cf99                	beqz	a5,800124f6 <external_interrupt_MEI+0x208>
    800124da:	57fd                	li	a5,-1
    800124dc:	6498                	ld	a4,8(s1)
    800124de:	17fe                	slli	a5,a5,0x3f
    800124e0:	07ad                	addi	a5,a5,11
    800124e2:	00016597          	auipc	a1,0x16
    800124e6:	83e58593          	addi	a1,a1,-1986 # 80027d20 <__func__.0+0x2c0>
    800124ea:	00f70663          	beq	a4,a5,800124f6 <external_interrupt_MEI+0x208>
    800124ee:	00016597          	auipc	a1,0x16
    800124f2:	84258593          	addi	a1,a1,-1982 # 80027d30 <__func__.0+0x2d0>
    800124f6:	00016517          	auipc	a0,0x16
    800124fa:	87a50513          	addi	a0,a0,-1926 # 80027d70 <__func__.0+0x310>
    800124fe:	7f8130ef          	jal	80025cf6 <printf>
    80012502:	00037797          	auipc	a5,0x37
    80012506:	b0f7c783          	lbu	a5,-1265(a5) # 80049011 <excpt+0x1>
    8001250a:	c799                	beqz	a5,80012518 <external_interrupt_MEI+0x22a>
    8001250c:	57fd                	li	a5,-1
    8001250e:	6498                	ld	a4,8(s1)
    80012510:	17fe                	slli	a5,a5,0x3f
    80012512:	07ad                	addi	a5,a5,11
    80012514:	00f70c63          	beq	a4,a5,8001252c <external_interrupt_MEI+0x23e>
    80012518:	00016517          	auipc	a0,0x16
    8001251c:	86050513          	addi	a0,a0,-1952 # 80027d78 <__func__.0+0x318>
    80012520:	7d6130ef          	jal	80025cf6 <printf>
    80012524:	02900513          	li	a0,41
    80012528:	5d8120ef          	jal	80024b00 <putchar>
    8001252c:	4529                	li	a0,10
    8001252e:	5d2120ef          	jal	80024b00 <putchar>
    80012532:	c801                	beqz	s0,80012542 <external_interrupt_MEI+0x254>
    80012534:	00037797          	auipc	a5,0x37
    80012538:	add7c783          	lbu	a5,-1315(a5) # 80049011 <excpt+0x1>
    8001253c:	4401                	li	s0,0
    8001253e:	100798e3          	bnez	a5,80012e4e <external_interrupt_MEI+0xb60>
        excpt.triggered == true &&
        excpt.cause == CAUSE_MEI
    ); 
    
    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=1，mie.MIE=1
    TEST_SETUP_EXCEPT();
    80012542:	0330000f          	fence	rw,rw
    80012546:	4785                	li	a5,1
    80012548:	00037717          	auipc	a4,0x37
    8001254c:	b0073023          	sd	zero,-1280(a4) # 80049048 <excpt+0x38>
    80012550:	00f49023          	sh	a5,0(s1)
    80012554:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80012558:	4511                	li	a0,4
    8001255a:	e9cee0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    8001255e:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80012562:	6785                	lui	a5,0x1
    80012564:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80012568:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    8001256c:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    80012570:	4511                	li	a0,4
    80012572:	e84ee0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=1",
    80012576:	08200593          	li	a1,130
    8001257a:	00019617          	auipc	a2,0x19
    8001257e:	12660613          	addi	a2,a2,294 # 8002b6a0 <__func__.0+0x3c40>
    80012582:	00015517          	auipc	a0,0x15
    80012586:	7d650513          	addi	a0,a0,2006 # 80027d58 <__func__.0+0x2f8>
    8001258a:	76c130ef          	jal	80025cf6 <printf>
    8001258e:	00037797          	auipc	a5,0x37
    80012592:	a837c783          	lbu	a5,-1405(a5) # 80049011 <excpt+0x1>
    80012596:	00015597          	auipc	a1,0x15
    8001259a:	79a58593          	addi	a1,a1,1946 # 80027d30 <__func__.0+0x2d0>
    8001259e:	e789                	bnez	a5,800125a8 <external_interrupt_MEI+0x2ba>
    800125a0:	00015597          	auipc	a1,0x15
    800125a4:	78058593          	addi	a1,a1,1920 # 80027d20 <__func__.0+0x2c0>
    800125a8:	00015517          	auipc	a0,0x15
    800125ac:	7c850513          	addi	a0,a0,1992 # 80027d70 <__func__.0+0x310>
    800125b0:	746130ef          	jal	80025cf6 <printf>
    800125b4:	00037797          	auipc	a5,0x37
    800125b8:	a5d7c783          	lbu	a5,-1443(a5) # 80049011 <excpt+0x1>
    800125bc:	1a0793e3          	bnez	a5,80012f62 <external_interrupt_MEI+0xc74>
    800125c0:	4529                	li	a0,10
    800125c2:	53e120ef          	jal	80024b00 <putchar>
    800125c6:	c419                	beqz	s0,800125d4 <external_interrupt_MEI+0x2e6>
    800125c8:	00037417          	auipc	s0,0x37
    800125cc:	a4944403          	lbu	s0,-1463(s0) # 80049011 <excpt+0x1>
    800125d0:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=1，mie.MIE=0
    TEST_SETUP_EXCEPT();
    800125d4:	0330000f          	fence	rw,rw
    800125d8:	4785                	li	a5,1
    800125da:	00037717          	auipc	a4,0x37
    800125de:	a6073723          	sd	zero,-1426(a4) # 80049048 <excpt+0x38>
    800125e2:	00f49023          	sh	a5,0(s1)
    800125e6:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800125ea:	4511                	li	a0,4
    800125ec:	e0aee0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3)     
    800125f0:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    800125f4:	6785                	lui	a5,0x1
    800125f6:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800125fa:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    800125fe:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    80012602:	4511                	li	a0,4
    80012604:	df2ee0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=0",
    80012608:	08200593          	li	a1,130
    8001260c:	00019617          	auipc	a2,0x19
    80012610:	0ec60613          	addi	a2,a2,236 # 8002b6f8 <__func__.0+0x3c98>
    80012614:	00015517          	auipc	a0,0x15
    80012618:	74450513          	addi	a0,a0,1860 # 80027d58 <__func__.0+0x2f8>
    8001261c:	6da130ef          	jal	80025cf6 <printf>
    80012620:	00037797          	auipc	a5,0x37
    80012624:	9f17c783          	lbu	a5,-1551(a5) # 80049011 <excpt+0x1>
    80012628:	00015597          	auipc	a1,0x15
    8001262c:	70858593          	addi	a1,a1,1800 # 80027d30 <__func__.0+0x2d0>
    80012630:	e789                	bnez	a5,8001263a <external_interrupt_MEI+0x34c>
    80012632:	00015597          	auipc	a1,0x15
    80012636:	6ee58593          	addi	a1,a1,1774 # 80027d20 <__func__.0+0x2c0>
    8001263a:	00015517          	auipc	a0,0x15
    8001263e:	73650513          	addi	a0,a0,1846 # 80027d70 <__func__.0+0x310>
    80012642:	6b4130ef          	jal	80025cf6 <printf>
    80012646:	00037797          	auipc	a5,0x37
    8001264a:	9cb7c783          	lbu	a5,-1589(a5) # 80049011 <excpt+0x1>
    8001264e:	0e079ee3          	bnez	a5,80012f4a <external_interrupt_MEI+0xc5c>
    80012652:	4529                	li	a0,10
    80012654:	4ac120ef          	jal	80024b00 <putchar>
    80012658:	c419                	beqz	s0,80012666 <external_interrupt_MEI+0x378>
    8001265a:	00037417          	auipc	s0,0x37
    8001265e:	9b744403          	lbu	s0,-1609(s0) # 80049011 <excpt+0x1>
    80012662:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 
    
    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=0，mie.MIE=0
    TEST_SETUP_EXCEPT();
    80012666:	0330000f          	fence	rw,rw
    8001266a:	4785                	li	a5,1
    8001266c:	00037717          	auipc	a4,0x37
    80012670:	9c073e23          	sd	zero,-1572(a4) # 80049048 <excpt+0x38>
    80012674:	00f49023          	sh	a5,0(s1)
    80012678:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001267c:	4511                	li	a0,4
    8001267e:	d78ee0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3)     
    80012682:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    80012686:	6785                	lui	a5,0x1
    80012688:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001268c:	3047b073          	csrc	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    80012690:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    80012694:	4511                	li	a0,4
    80012696:	d60ee0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=0",
    8001269a:	08200593          	li	a1,130
    8001269e:	00019617          	auipc	a2,0x19
    800126a2:	0b260613          	addi	a2,a2,178 # 8002b750 <__func__.0+0x3cf0>
    800126a6:	00015517          	auipc	a0,0x15
    800126aa:	6b250513          	addi	a0,a0,1714 # 80027d58 <__func__.0+0x2f8>
    800126ae:	648130ef          	jal	80025cf6 <printf>
    800126b2:	00037797          	auipc	a5,0x37
    800126b6:	95f7c783          	lbu	a5,-1697(a5) # 80049011 <excpt+0x1>
    800126ba:	00015597          	auipc	a1,0x15
    800126be:	67658593          	addi	a1,a1,1654 # 80027d30 <__func__.0+0x2d0>
    800126c2:	e789                	bnez	a5,800126cc <external_interrupt_MEI+0x3de>
    800126c4:	00015597          	auipc	a1,0x15
    800126c8:	65c58593          	addi	a1,a1,1628 # 80027d20 <__func__.0+0x2c0>
    800126cc:	00015517          	auipc	a0,0x15
    800126d0:	6a450513          	addi	a0,a0,1700 # 80027d70 <__func__.0+0x310>
    800126d4:	622130ef          	jal	80025cf6 <printf>
    800126d8:	00037797          	auipc	a5,0x37
    800126dc:	9397c783          	lbu	a5,-1735(a5) # 80049011 <excpt+0x1>
    800126e0:	040799e3          	bnez	a5,80012f32 <external_interrupt_MEI+0xc44>
    800126e4:	4529                	li	a0,10
    800126e6:	41a120ef          	jal	80024b00 <putchar>
    800126ea:	c419                	beqz	s0,800126f8 <external_interrupt_MEI+0x40a>
    800126ec:	00037417          	auipc	s0,0x37
    800126f0:	92544403          	lbu	s0,-1755(s0) # 80049011 <excpt+0x1>
    800126f4:	00144413          	xori	s0,s0,1

//---------------------------------------------------------
    

    //HS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    TEST_SETUP_EXCEPT();
    800126f8:	0330000f          	fence	rw,rw
    800126fc:	4785                	li	a5,1
    800126fe:	00037717          	auipc	a4,0x37
    80012702:	94073523          	sd	zero,-1718(a4) # 80049048 <excpt+0x38>
    80012706:	00f49023          	sh	a5,0(s1)
    8001270a:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001270e:	4511                	li	a0,4
    80012710:	ce6ee0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80012714:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80012718:	6785                	lui	a5,0x1
    8001271a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001271e:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    80012722:	3447a073          	csrs	mip,a5

    
    goto_priv(PRIV_HS);
    80012726:	450d                	li	a0,3
    80012728:	cceee0ef          	jal	80000bf6 <goto_priv>

    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    8001272c:	08200593          	li	a1,130
    80012730:	00019617          	auipc	a2,0x19
    80012734:	07860613          	addi	a2,a2,120 # 8002b7a8 <__func__.0+0x3d48>
    80012738:	00015517          	auipc	a0,0x15
    8001273c:	62050513          	addi	a0,a0,1568 # 80027d58 <__func__.0+0x2f8>
    80012740:	5b6130ef          	jal	80025cf6 <printf>
    80012744:	6094                	ld	a3,0(s1)
    80012746:	f0001737          	lui	a4,0xf0001
    8001274a:	0712                	slli	a4,a4,0x4
    8001274c:	4785                	li	a5,1
    8001274e:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80012752:	178a                	slli	a5,a5,0x22
    80012754:	8f75                	and	a4,a4,a3
    80012756:	10078793          	addi	a5,a5,256
    8001275a:	00015597          	auipc	a1,0x15
    8001275e:	5d658593          	addi	a1,a1,1494 # 80027d30 <__func__.0+0x2d0>
    80012762:	00f71663          	bne	a4,a5,8001276e <external_interrupt_MEI+0x480>
    80012766:	00015597          	auipc	a1,0x15
    8001276a:	5ba58593          	addi	a1,a1,1466 # 80027d20 <__func__.0+0x2c0>
    8001276e:	00015517          	auipc	a0,0x15
    80012772:	60250513          	addi	a0,a0,1538 # 80027d70 <__func__.0+0x310>
    80012776:	580130ef          	jal	80025cf6 <printf>
    8001277a:	00037797          	auipc	a5,0x37
    8001277e:	8977c783          	lbu	a5,-1897(a5) # 80049011 <excpt+0x1>
    80012782:	cb81                	beqz	a5,80012792 <external_interrupt_MEI+0x4a4>
    80012784:	00037717          	auipc	a4,0x37
    80012788:	89072703          	lw	a4,-1904(a4) # 80049014 <excpt+0x4>
    8001278c:	4791                	li	a5,4
    8001278e:	00f70c63          	beq	a4,a5,800127a6 <external_interrupt_MEI+0x4b8>
    80012792:	00015517          	auipc	a0,0x15
    80012796:	5e650513          	addi	a0,a0,1510 # 80027d78 <__func__.0+0x318>
    8001279a:	55c130ef          	jal	80025cf6 <printf>
    8001279e:	02900513          	li	a0,41
    800127a2:	35e120ef          	jal	80024b00 <putchar>
    800127a6:	4529                	li	a0,10
    800127a8:	358120ef          	jal	80024b00 <putchar>
    800127ac:	cc19                	beqz	s0,800127ca <external_interrupt_MEI+0x4dc>
    800127ae:	6080                	ld	s0,0(s1)
    800127b0:	f0001737          	lui	a4,0xf0001
    800127b4:	0712                	slli	a4,a4,0x4
    800127b6:	57fd                	li	a5,-1
    800127b8:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    800127bc:	178a                	slli	a5,a5,0x22
    800127be:	8c79                	and	s0,s0,a4
    800127c0:	f0078793          	addi	a5,a5,-256
    800127c4:	943e                	add	s0,s0,a5
    800127c6:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高,有hideleg代理
    TEST_SETUP_EXCEPT();
    800127ca:	0330000f          	fence	rw,rw
    800127ce:	4785                	li	a5,1
    800127d0:	00037717          	auipc	a4,0x37
    800127d4:	86073c23          	sd	zero,-1928(a4) # 80049048 <excpt+0x38>
    800127d8:	00f49023          	sh	a5,0(s1)
    800127dc:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800127e0:	4511                	li	a0,4
    800127e2:	c14ee0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    800127e6:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    800127ea:	6785                	lui	a5,0x1
    800127ec:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800127f0:	3047a073          	csrs	mie,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    800127f4:	577d                	li	a4,-1
    800127f6:	60371073          	csrw	hideleg,a4
    CSRS(CSR_MIP,MIP_MEIP);
    800127fa:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_HS);
    800127fe:	450d                	li	a0,3
    80012800:	bf6ee0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1 ",
    80012804:	08200593          	li	a1,130
    80012808:	00019617          	auipc	a2,0x19
    8001280c:	ff860613          	addi	a2,a2,-8 # 8002b800 <__func__.0+0x3da0>
    80012810:	00015517          	auipc	a0,0x15
    80012814:	54850513          	addi	a0,a0,1352 # 80027d58 <__func__.0+0x2f8>
    80012818:	4de130ef          	jal	80025cf6 <printf>
    8001281c:	6094                	ld	a3,0(s1)
    8001281e:	f0001737          	lui	a4,0xf0001
    80012822:	0712                	slli	a4,a4,0x4
    80012824:	478d                	li	a5,3
    80012826:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8001282a:	1782                	slli	a5,a5,0x20
    8001282c:	8f75                	and	a4,a4,a3
    8001282e:	10078793          	addi	a5,a5,256
    80012832:	00015597          	auipc	a1,0x15
    80012836:	4fe58593          	addi	a1,a1,1278 # 80027d30 <__func__.0+0x2d0>
    8001283a:	00f71663          	bne	a4,a5,80012846 <external_interrupt_MEI+0x558>
    8001283e:	00015597          	auipc	a1,0x15
    80012842:	4e258593          	addi	a1,a1,1250 # 80027d20 <__func__.0+0x2c0>
    80012846:	00015517          	auipc	a0,0x15
    8001284a:	52a50513          	addi	a0,a0,1322 # 80027d70 <__func__.0+0x310>
    8001284e:	4a8130ef          	jal	80025cf6 <printf>
    80012852:	00036797          	auipc	a5,0x36
    80012856:	7bf7c783          	lbu	a5,1983(a5) # 80049011 <excpt+0x1>
    8001285a:	cb81                	beqz	a5,8001286a <external_interrupt_MEI+0x57c>
    8001285c:	00036717          	auipc	a4,0x36
    80012860:	7b872703          	lw	a4,1976(a4) # 80049014 <excpt+0x4>
    80012864:	478d                	li	a5,3
    80012866:	00f70c63          	beq	a4,a5,8001287e <external_interrupt_MEI+0x590>
    8001286a:	00015517          	auipc	a0,0x15
    8001286e:	50e50513          	addi	a0,a0,1294 # 80027d78 <__func__.0+0x318>
    80012872:	484130ef          	jal	80025cf6 <printf>
    80012876:	02900513          	li	a0,41
    8001287a:	286120ef          	jal	80024b00 <putchar>
    8001287e:	4529                	li	a0,10
    80012880:	280120ef          	jal	80024b00 <putchar>
    80012884:	cc19                	beqz	s0,800128a2 <external_interrupt_MEI+0x5b4>
    80012886:	6080                	ld	s0,0(s1)
    80012888:	f0001737          	lui	a4,0xf0001
    8001288c:	0712                	slli	a4,a4,0x4
    8001288e:	57f5                	li	a5,-3
    80012890:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80012894:	1782                	slli	a5,a5,0x20
    80012896:	8c79                	and	s0,s0,a4
    80012898:	f0078793          	addi	a5,a5,-256
    8001289c:	943e                	add	s0,s0,a5
    8001289e:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0，无代理
    TEST_SETUP_EXCEPT();
    800128a2:	0330000f          	fence	rw,rw
    800128a6:	4785                	li	a5,1
    800128a8:	00036717          	auipc	a4,0x36
    800128ac:	7a073023          	sd	zero,1952(a4) # 80049048 <excpt+0x38>
    800128b0:	00f49023          	sh	a5,0(s1)
    800128b4:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800128b8:	4511                	li	a0,4
    800128ba:	b3cee0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    800128be:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    800128c2:	6785                	lui	a5,0x1
    800128c4:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800128c8:	3047b073          	csrc	mie,a5
    CSRW(CSR_MIDELEG,0);
    800128cc:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    800128d0:	60305073          	csrwi	hideleg,0
    CSRS(CSR_MIP,MIP_MEIP);
    800128d4:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_HS);
    800128d8:	450d                	li	a0,3
    800128da:	b1cee0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    800128de:	08200593          	li	a1,130
    800128e2:	00019617          	auipc	a2,0x19
    800128e6:	f7660613          	addi	a2,a2,-138 # 8002b858 <__func__.0+0x3df8>
    800128ea:	00015517          	auipc	a0,0x15
    800128ee:	46e50513          	addi	a0,a0,1134 # 80027d58 <__func__.0+0x2f8>
    800128f2:	404130ef          	jal	80025cf6 <printf>
    800128f6:	00036797          	auipc	a5,0x36
    800128fa:	71b7c783          	lbu	a5,1819(a5) # 80049011 <excpt+0x1>
    800128fe:	00015597          	auipc	a1,0x15
    80012902:	43258593          	addi	a1,a1,1074 # 80027d30 <__func__.0+0x2d0>
    80012906:	e789                	bnez	a5,80012910 <external_interrupt_MEI+0x622>
    80012908:	00015597          	auipc	a1,0x15
    8001290c:	41858593          	addi	a1,a1,1048 # 80027d20 <__func__.0+0x2c0>
    80012910:	00015517          	auipc	a0,0x15
    80012914:	46050513          	addi	a0,a0,1120 # 80027d70 <__func__.0+0x310>
    80012918:	3de130ef          	jal	80025cf6 <printf>
    8001291c:	00036797          	auipc	a5,0x36
    80012920:	6f57c783          	lbu	a5,1781(a5) # 80049011 <excpt+0x1>
    80012924:	5e079c63          	bnez	a5,80012f1c <external_interrupt_MEI+0xc2e>
    80012928:	4529                	li	a0,10
    8001292a:	1d6120ef          	jal	80024b00 <putchar>
    8001292e:	c419                	beqz	s0,8001293c <external_interrupt_MEI+0x64e>
    80012930:	00036417          	auipc	s0,0x36
    80012934:	6e144403          	lbu	s0,1761(s0) # 80049011 <excpt+0x1>
    80012938:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1，无代理
    TEST_SETUP_EXCEPT();
    8001293c:	0330000f          	fence	rw,rw
    80012940:	4785                	li	a5,1
    80012942:	00036717          	auipc	a4,0x36
    80012946:	70073323          	sd	zero,1798(a4) # 80049048 <excpt+0x38>
    8001294a:	00f49023          	sh	a5,0(s1)
    8001294e:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80012952:	4511                	li	a0,4
    80012954:	aa2ee0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80012958:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8001295c:	6785                	lui	a5,0x1
    8001295e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80012962:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    80012966:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_HS);
    8001296a:	450d                	li	a0,3
    8001296c:	a8aee0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80012970:	08200593          	li	a1,130
    80012974:	00019617          	auipc	a2,0x19
    80012978:	f3c60613          	addi	a2,a2,-196 # 8002b8b0 <__func__.0+0x3e50>
    8001297c:	00015517          	auipc	a0,0x15
    80012980:	3dc50513          	addi	a0,a0,988 # 80027d58 <__func__.0+0x2f8>
    80012984:	372130ef          	jal	80025cf6 <printf>
    80012988:	00036797          	auipc	a5,0x36
    8001298c:	6897c783          	lbu	a5,1673(a5) # 80049011 <excpt+0x1>
    80012990:	00015597          	auipc	a1,0x15
    80012994:	3a058593          	addi	a1,a1,928 # 80027d30 <__func__.0+0x2d0>
    80012998:	c799                	beqz	a5,800129a6 <external_interrupt_MEI+0x6b8>
    8001299a:	57fd                	li	a5,-1
    8001299c:	6498                	ld	a4,8(s1)
    8001299e:	17fe                	slli	a5,a5,0x3f
    800129a0:	07ad                	addi	a5,a5,11
    800129a2:	5cf70c63          	beq	a4,a5,80012f7a <external_interrupt_MEI+0xc8c>
    800129a6:	00015517          	auipc	a0,0x15
    800129aa:	3ca50513          	addi	a0,a0,970 # 80027d70 <__func__.0+0x310>
    800129ae:	348130ef          	jal	80025cf6 <printf>
    800129b2:	00036797          	auipc	a5,0x36
    800129b6:	65f7c783          	lbu	a5,1631(a5) # 80049011 <excpt+0x1>
    800129ba:	c799                	beqz	a5,800129c8 <external_interrupt_MEI+0x6da>
    800129bc:	57fd                	li	a5,-1
    800129be:	6498                	ld	a4,8(s1)
    800129c0:	17fe                	slli	a5,a5,0x3f
    800129c2:	07ad                	addi	a5,a5,11
    800129c4:	4ef70763          	beq	a4,a5,80012eb2 <external_interrupt_MEI+0xbc4>
    800129c8:	00015517          	auipc	a0,0x15
    800129cc:	3b050513          	addi	a0,a0,944 # 80027d78 <__func__.0+0x318>
    800129d0:	326130ef          	jal	80025cf6 <printf>
    800129d4:	02900513          	li	a0,41
    800129d8:	128120ef          	jal	80024b00 <putchar>
    800129dc:	4529                	li	a0,10
    800129de:	122120ef          	jal	80024b00 <putchar>
    800129e2:	c801                	beqz	s0,800129f2 <external_interrupt_MEI+0x704>
    800129e4:	00036797          	auipc	a5,0x36
    800129e8:	62d7c783          	lbu	a5,1581(a5) # 80049011 <excpt+0x1>
    800129ec:	4401                	li	s0,0
    800129ee:	48079c63          	bnez	a5,80012e86 <external_interrupt_MEI+0xb98>
        excpt.priv == PRIV_HS
    ); 


    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=0，且mip.MEIP，mie.MIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    800129f2:	0330000f          	fence	rw,rw
    800129f6:	4785                	li	a5,1
    800129f8:	00036717          	auipc	a4,0x36
    800129fc:	64073823          	sd	zero,1616(a4) # 80049048 <excpt+0x38>
    80012a00:	00f49023          	sh	a5,0(s1)
    80012a04:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80012a08:	4511                	li	a0,4
    80012a0a:	9ecee0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    80012a0e:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80012a12:	6785                	lui	a5,0x1
    80012a14:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80012a18:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    80012a1c:	577d                	li	a4,-1
    80012a1e:	30373073          	csrc	mideleg,a4
    CSRC(CSR_MEDELEG,(uint64_t)-1
    80012a22:	30273073          	csrc	medeleg,a4
    );
    CSRC(CSR_MIP,MIP_MEIP);
    80012a26:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_HS);
    80012a2a:	450d                	li	a0,3
    80012a2c:	9caee0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("HS mode leads to no interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80012a30:	08200593          	li	a1,130
    80012a34:	00019617          	auipc	a2,0x19
    80012a38:	ed460613          	addi	a2,a2,-300 # 8002b908 <__func__.0+0x3ea8>
    80012a3c:	00015517          	auipc	a0,0x15
    80012a40:	31c50513          	addi	a0,a0,796 # 80027d58 <__func__.0+0x2f8>
    80012a44:	2b2130ef          	jal	80025cf6 <printf>
    80012a48:	00036797          	auipc	a5,0x36
    80012a4c:	5c97c783          	lbu	a5,1481(a5) # 80049011 <excpt+0x1>
    80012a50:	00015597          	auipc	a1,0x15
    80012a54:	2e058593          	addi	a1,a1,736 # 80027d30 <__func__.0+0x2d0>
    80012a58:	e789                	bnez	a5,80012a62 <external_interrupt_MEI+0x774>
    80012a5a:	00015597          	auipc	a1,0x15
    80012a5e:	2c658593          	addi	a1,a1,710 # 80027d20 <__func__.0+0x2c0>
    80012a62:	00015517          	auipc	a0,0x15
    80012a66:	30e50513          	addi	a0,a0,782 # 80027d70 <__func__.0+0x310>
    80012a6a:	28c130ef          	jal	80025cf6 <printf>
    80012a6e:	00036797          	auipc	a5,0x36
    80012a72:	5a37c783          	lbu	a5,1443(a5) # 80049011 <excpt+0x1>
    80012a76:	44079663          	bnez	a5,80012ec2 <external_interrupt_MEI+0xbd4>
    80012a7a:	4529                	li	a0,10
    80012a7c:	084120ef          	jal	80024b00 <putchar>
    80012a80:	c419                	beqz	s0,80012a8e <external_interrupt_MEI+0x7a0>
    80012a82:	00036417          	auipc	s0,0x36
    80012a86:	58f44403          	lbu	s0,1423(s0) # 80049011 <excpt+0x1>
    80012a8a:	00144413          	xori	s0,s0,1



//vs-mode下
    //VS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    TEST_SETUP_EXCEPT();
    80012a8e:	0330000f          	fence	rw,rw
    80012a92:	4785                	li	a5,1
    80012a94:	00036717          	auipc	a4,0x36
    80012a98:	5a073a23          	sd	zero,1460(a4) # 80049048 <excpt+0x38>
    80012a9c:	00f49023          	sh	a5,0(s1)
    80012aa0:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80012aa4:	4511                	li	a0,4
    80012aa6:	950ee0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80012aaa:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80012aae:	6785                	lui	a5,0x1
    80012ab0:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80012ab4:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    80012ab8:	3447a073          	csrs	mip,a5

    
    goto_priv(PRIV_VS);
    80012abc:	4509                	li	a0,2
    80012abe:	938ee0ef          	jal	80000bf6 <goto_priv>

    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    80012ac2:	08200593          	li	a1,130
    80012ac6:	00019617          	auipc	a2,0x19
    80012aca:	e9260613          	addi	a2,a2,-366 # 8002b958 <__func__.0+0x3ef8>
    80012ace:	00015517          	auipc	a0,0x15
    80012ad2:	28a50513          	addi	a0,a0,650 # 80027d58 <__func__.0+0x2f8>
    80012ad6:	220130ef          	jal	80025cf6 <printf>
    80012ada:	6094                	ld	a3,0(s1)
    80012adc:	f0001737          	lui	a4,0xf0001
    80012ae0:	0712                	slli	a4,a4,0x4
    80012ae2:	4785                	li	a5,1
    80012ae4:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80012ae8:	178a                	slli	a5,a5,0x22
    80012aea:	8f75                	and	a4,a4,a3
    80012aec:	10078793          	addi	a5,a5,256
    80012af0:	00015597          	auipc	a1,0x15
    80012af4:	24058593          	addi	a1,a1,576 # 80027d30 <__func__.0+0x2d0>
    80012af8:	00f71663          	bne	a4,a5,80012b04 <external_interrupt_MEI+0x816>
    80012afc:	00015597          	auipc	a1,0x15
    80012b00:	22458593          	addi	a1,a1,548 # 80027d20 <__func__.0+0x2c0>
    80012b04:	00015517          	auipc	a0,0x15
    80012b08:	26c50513          	addi	a0,a0,620 # 80027d70 <__func__.0+0x310>
    80012b0c:	1ea130ef          	jal	80025cf6 <printf>
    80012b10:	00036797          	auipc	a5,0x36
    80012b14:	5017c783          	lbu	a5,1281(a5) # 80049011 <excpt+0x1>
    80012b18:	cb81                	beqz	a5,80012b28 <external_interrupt_MEI+0x83a>
    80012b1a:	00036717          	auipc	a4,0x36
    80012b1e:	4fa72703          	lw	a4,1274(a4) # 80049014 <excpt+0x4>
    80012b22:	4791                	li	a5,4
    80012b24:	00f70c63          	beq	a4,a5,80012b3c <external_interrupt_MEI+0x84e>
    80012b28:	00015517          	auipc	a0,0x15
    80012b2c:	25050513          	addi	a0,a0,592 # 80027d78 <__func__.0+0x318>
    80012b30:	1c6130ef          	jal	80025cf6 <printf>
    80012b34:	02900513          	li	a0,41
    80012b38:	7c9110ef          	jal	80024b00 <putchar>
    80012b3c:	4529                	li	a0,10
    80012b3e:	7c3110ef          	jal	80024b00 <putchar>
    80012b42:	cc19                	beqz	s0,80012b60 <external_interrupt_MEI+0x872>
    80012b44:	6080                	ld	s0,0(s1)
    80012b46:	f0001737          	lui	a4,0xf0001
    80012b4a:	0712                	slli	a4,a4,0x4
    80012b4c:	57fd                	li	a5,-1
    80012b4e:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80012b52:	178a                	slli	a5,a5,0x22
    80012b54:	8c79                	and	s0,s0,a4
    80012b56:	f0078793          	addi	a5,a5,-256
    80012b5a:	943e                	add	s0,s0,a5
    80012b5c:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高,有hideleg代理
    TEST_SETUP_EXCEPT();
    80012b60:	0330000f          	fence	rw,rw
    80012b64:	4785                	li	a5,1
    80012b66:	00036717          	auipc	a4,0x36
    80012b6a:	4e073123          	sd	zero,1250(a4) # 80049048 <excpt+0x38>
    80012b6e:	00f49023          	sh	a5,0(s1)
    80012b72:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80012b76:	4511                	li	a0,4
    80012b78:	87eee0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80012b7c:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80012b80:	6785                	lui	a5,0x1
    80012b82:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80012b86:	3047a073          	csrs	mie,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    80012b8a:	577d                	li	a4,-1
    80012b8c:	60371073          	csrw	hideleg,a4
    CSRS(CSR_MIP,MIP_MEIP);
    80012b90:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_VS);
    80012b94:	4509                	li	a0,2
    80012b96:	860ee0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1 ",
    80012b9a:	08200593          	li	a1,130
    80012b9e:	00019617          	auipc	a2,0x19
    80012ba2:	e1a60613          	addi	a2,a2,-486 # 8002b9b8 <__func__.0+0x3f58>
    80012ba6:	00015517          	auipc	a0,0x15
    80012baa:	1b250513          	addi	a0,a0,434 # 80027d58 <__func__.0+0x2f8>
    80012bae:	148130ef          	jal	80025cf6 <printf>
    80012bb2:	6094                	ld	a3,0(s1)
    80012bb4:	f0001737          	lui	a4,0xf0001
    80012bb8:	0712                	slli	a4,a4,0x4
    80012bba:	4785                	li	a5,1
    80012bbc:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80012bc0:	1786                	slli	a5,a5,0x21
    80012bc2:	8f75                	and	a4,a4,a3
    80012bc4:	10078793          	addi	a5,a5,256
    80012bc8:	00015597          	auipc	a1,0x15
    80012bcc:	16858593          	addi	a1,a1,360 # 80027d30 <__func__.0+0x2d0>
    80012bd0:	00f71663          	bne	a4,a5,80012bdc <external_interrupt_MEI+0x8ee>
    80012bd4:	00015597          	auipc	a1,0x15
    80012bd8:	14c58593          	addi	a1,a1,332 # 80027d20 <__func__.0+0x2c0>
    80012bdc:	00015517          	auipc	a0,0x15
    80012be0:	19450513          	addi	a0,a0,404 # 80027d70 <__func__.0+0x310>
    80012be4:	112130ef          	jal	80025cf6 <printf>
    80012be8:	00036797          	auipc	a5,0x36
    80012bec:	4297c783          	lbu	a5,1065(a5) # 80049011 <excpt+0x1>
    80012bf0:	cb81                	beqz	a5,80012c00 <external_interrupt_MEI+0x912>
    80012bf2:	00036717          	auipc	a4,0x36
    80012bf6:	42272703          	lw	a4,1058(a4) # 80049014 <excpt+0x4>
    80012bfa:	4789                	li	a5,2
    80012bfc:	00f70c63          	beq	a4,a5,80012c14 <external_interrupt_MEI+0x926>
    80012c00:	00015517          	auipc	a0,0x15
    80012c04:	17850513          	addi	a0,a0,376 # 80027d78 <__func__.0+0x318>
    80012c08:	0ee130ef          	jal	80025cf6 <printf>
    80012c0c:	02900513          	li	a0,41
    80012c10:	6f1110ef          	jal	80024b00 <putchar>
    80012c14:	4529                	li	a0,10
    80012c16:	6eb110ef          	jal	80024b00 <putchar>
    80012c1a:	cc19                	beqz	s0,80012c38 <external_interrupt_MEI+0x94a>
    80012c1c:	6080                	ld	s0,0(s1)
    80012c1e:	f0001737          	lui	a4,0xf0001
    80012c22:	0712                	slli	a4,a4,0x4
    80012c24:	57fd                	li	a5,-1
    80012c26:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80012c2a:	1786                	slli	a5,a5,0x21
    80012c2c:	8c79                	and	s0,s0,a4
    80012c2e:	f0078793          	addi	a5,a5,-256
    80012c32:	943e                	add	s0,s0,a5
    80012c34:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0，无代理
    TEST_SETUP_EXCEPT();
    80012c38:	0330000f          	fence	rw,rw
    80012c3c:	4785                	li	a5,1
    80012c3e:	00036717          	auipc	a4,0x36
    80012c42:	40073523          	sd	zero,1034(a4) # 80049048 <excpt+0x38>
    80012c46:	00f49023          	sh	a5,0(s1)
    80012c4a:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80012c4e:	4511                	li	a0,4
    80012c50:	fa7ed0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80012c54:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    80012c58:	6785                	lui	a5,0x1
    80012c5a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80012c5e:	3047b073          	csrc	mie,a5
    CSRW(CSR_MIDELEG,0);
    80012c62:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80012c66:	60305073          	csrwi	hideleg,0
    CSRS(CSR_MIP,MIP_MEIP);
    80012c6a:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_VS);
    80012c6e:	4509                	li	a0,2
    80012c70:	f87ed0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    80012c74:	08200593          	li	a1,130
    80012c78:	00019617          	auipc	a2,0x19
    80012c7c:	da060613          	addi	a2,a2,-608 # 8002ba18 <__func__.0+0x3fb8>
    80012c80:	00015517          	auipc	a0,0x15
    80012c84:	0d850513          	addi	a0,a0,216 # 80027d58 <__func__.0+0x2f8>
    80012c88:	06e130ef          	jal	80025cf6 <printf>
    80012c8c:	00036797          	auipc	a5,0x36
    80012c90:	3857c783          	lbu	a5,901(a5) # 80049011 <excpt+0x1>
    80012c94:	00015597          	auipc	a1,0x15
    80012c98:	09c58593          	addi	a1,a1,156 # 80027d30 <__func__.0+0x2d0>
    80012c9c:	e789                	bnez	a5,80012ca6 <external_interrupt_MEI+0x9b8>
    80012c9e:	00015597          	auipc	a1,0x15
    80012ca2:	08258593          	addi	a1,a1,130 # 80027d20 <__func__.0+0x2c0>
    80012ca6:	00015517          	auipc	a0,0x15
    80012caa:	0ca50513          	addi	a0,a0,202 # 80027d70 <__func__.0+0x310>
    80012cae:	048130ef          	jal	80025cf6 <printf>
    80012cb2:	00036797          	auipc	a5,0x36
    80012cb6:	35f7c783          	lbu	a5,863(a5) # 80049011 <excpt+0x1>
    80012cba:	20079f63          	bnez	a5,80012ed8 <external_interrupt_MEI+0xbea>
    80012cbe:	4529                	li	a0,10
    80012cc0:	641110ef          	jal	80024b00 <putchar>
    80012cc4:	c419                	beqz	s0,80012cd2 <external_interrupt_MEI+0x9e4>
    80012cc6:	00036417          	auipc	s0,0x36
    80012cca:	34b44403          	lbu	s0,843(s0) # 80049011 <excpt+0x1>
    80012cce:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1，无代理
    TEST_SETUP_EXCEPT();
    80012cd2:	0330000f          	fence	rw,rw
    80012cd6:	4785                	li	a5,1
    80012cd8:	00036717          	auipc	a4,0x36
    80012cdc:	36073823          	sd	zero,880(a4) # 80049048 <excpt+0x38>
    80012ce0:	00f49023          	sh	a5,0(s1)
    80012ce4:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80012ce8:	4511                	li	a0,4
    80012cea:	f0ded0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80012cee:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80012cf2:	6785                	lui	a5,0x1
    80012cf4:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80012cf8:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    80012cfc:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_VS);
    80012d00:	4509                	li	a0,2
    80012d02:	ef5ed0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80012d06:	08200593          	li	a1,130
    80012d0a:	00019617          	auipc	a2,0x19
    80012d0e:	d6e60613          	addi	a2,a2,-658 # 8002ba78 <__func__.0+0x4018>
    80012d12:	00015517          	auipc	a0,0x15
    80012d16:	04650513          	addi	a0,a0,70 # 80027d58 <__func__.0+0x2f8>
    80012d1a:	7dd120ef          	jal	80025cf6 <printf>
    80012d1e:	00036797          	auipc	a5,0x36
    80012d22:	2f37c783          	lbu	a5,755(a5) # 80049011 <excpt+0x1>
    80012d26:	00015597          	auipc	a1,0x15
    80012d2a:	00a58593          	addi	a1,a1,10 # 80027d30 <__func__.0+0x2d0>
    80012d2e:	c799                	beqz	a5,80012d3c <external_interrupt_MEI+0xa4e>
    80012d30:	57fd                	li	a5,-1
    80012d32:	6498                	ld	a4,8(s1)
    80012d34:	17fe                	slli	a5,a5,0x3f
    80012d36:	07ad                	addi	a5,a5,11
    80012d38:	26f70163          	beq	a4,a5,80012f9a <external_interrupt_MEI+0xcac>
    80012d3c:	00015517          	auipc	a0,0x15
    80012d40:	03450513          	addi	a0,a0,52 # 80027d70 <__func__.0+0x310>
    80012d44:	7b3120ef          	jal	80025cf6 <printf>
    80012d48:	00036797          	auipc	a5,0x36
    80012d4c:	2c97c783          	lbu	a5,713(a5) # 80049011 <excpt+0x1>
    80012d50:	c799                	beqz	a5,80012d5e <external_interrupt_MEI+0xa70>
    80012d52:	57fd                	li	a5,-1
    80012d54:	6498                	ld	a4,8(s1)
    80012d56:	17fe                	slli	a5,a5,0x3f
    80012d58:	07ad                	addi	a5,a5,11
    80012d5a:	14f70463          	beq	a4,a5,80012ea2 <external_interrupt_MEI+0xbb4>
    80012d5e:	00015517          	auipc	a0,0x15
    80012d62:	01a50513          	addi	a0,a0,26 # 80027d78 <__func__.0+0x318>
    80012d66:	791120ef          	jal	80025cf6 <printf>
    80012d6a:	02900513          	li	a0,41
    80012d6e:	593110ef          	jal	80024b00 <putchar>
    80012d72:	4529                	li	a0,10
    80012d74:	58d110ef          	jal	80024b00 <putchar>
    80012d78:	c801                	beqz	s0,80012d88 <external_interrupt_MEI+0xa9a>
    80012d7a:	00036797          	auipc	a5,0x36
    80012d7e:	2977c783          	lbu	a5,663(a5) # 80049011 <excpt+0x1>
    80012d82:	4401                	li	s0,0
    80012d84:	0e079363          	bnez	a5,80012e6a <external_interrupt_MEI+0xb7c>
        excpt.cause == CAUSE_MEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=0，且mip.MEIP，mie.MIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    80012d88:	0330000f          	fence	rw,rw
    80012d8c:	4785                	li	a5,1
    80012d8e:	00036717          	auipc	a4,0x36
    80012d92:	2a073d23          	sd	zero,698(a4) # 80049048 <excpt+0x38>
    80012d96:	00f49023          	sh	a5,0(s1)
    80012d9a:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80012d9e:	4511                	li	a0,4
    80012da0:	e57ed0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    80012da4:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80012da8:	6785                	lui	a5,0x1
    80012daa:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80012dae:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    80012db2:	577d                	li	a4,-1
    80012db4:	30373073          	csrc	mideleg,a4
    CSRC(CSR_MEDELEG,(uint64_t)-1);
    80012db8:	30273073          	csrc	medeleg,a4
    CSRC(CSR_MIP,MIP_MEIP);
    80012dbc:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_VS);
    80012dc0:	4509                	li	a0,2
    80012dc2:	e35ed0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80012dc6:	08200593          	li	a1,130
    80012dca:	00019617          	auipc	a2,0x19
    80012dce:	d0e60613          	addi	a2,a2,-754 # 8002bad8 <__func__.0+0x4078>
    80012dd2:	00015517          	auipc	a0,0x15
    80012dd6:	f8650513          	addi	a0,a0,-122 # 80027d58 <__func__.0+0x2f8>
    80012dda:	71d120ef          	jal	80025cf6 <printf>
    80012dde:	00036797          	auipc	a5,0x36
    80012de2:	2337c783          	lbu	a5,563(a5) # 80049011 <excpt+0x1>
    80012de6:	00015597          	auipc	a1,0x15
    80012dea:	f4a58593          	addi	a1,a1,-182 # 80027d30 <__func__.0+0x2d0>
    80012dee:	e789                	bnez	a5,80012df8 <external_interrupt_MEI+0xb0a>
    80012df0:	00015597          	auipc	a1,0x15
    80012df4:	f3058593          	addi	a1,a1,-208 # 80027d20 <__func__.0+0x2c0>
    80012df8:	00015517          	auipc	a0,0x15
    80012dfc:	f7850513          	addi	a0,a0,-136 # 80027d70 <__func__.0+0x310>
    80012e00:	6f7120ef          	jal	80025cf6 <printf>
    80012e04:	00036797          	auipc	a5,0x36
    80012e08:	20d7c783          	lbu	a5,525(a5) # 80049011 <excpt+0x1>
    80012e0c:	0e079d63          	bnez	a5,80012f06 <external_interrupt_MEI+0xc18>
    80012e10:	4529                	li	a0,10
    80012e12:	4ef110ef          	jal	80024b00 <putchar>
    80012e16:	c411                	beqz	s0,80012e22 <external_interrupt_MEI+0xb34>
    80012e18:	00036797          	auipc	a5,0x36
    80012e1c:	1f97c783          	lbu	a5,505(a5) # 80049011 <excpt+0x1>
    80012e20:	cf9d                	beqz	a5,80012e5e <external_interrupt_MEI+0xb70>
    80012e22:	4401                	li	s0,0
    //     excpt.cause == CAUSE_MEI &&
    //     excpt.priv == PRIV_HS
    // ); 


    TEST_END();
    80012e24:	00015597          	auipc	a1,0x15
    80012e28:	f0c58593          	addi	a1,a1,-244 # 80027d30 <__func__.0+0x2d0>
    80012e2c:	00015517          	auipc	a0,0x15
    80012e30:	fac50513          	addi	a0,a0,-84 # 80027dd8 <__func__.0+0x378>
    80012e34:	6c3120ef          	jal	80025cf6 <printf>
    80012e38:	4511                	li	a0,4
    80012e3a:	dbded0ef          	jal	80000bf6 <goto_priv>
    80012e3e:	e6eee0ef          	jal	800014ac <reset_state>
}
    80012e42:	60e2                	ld	ra,24(sp)
    80012e44:	8522                	mv	a0,s0
    80012e46:	6442                	ld	s0,16(sp)
    80012e48:	64a2                	ld	s1,8(sp)
    80012e4a:	6105                	addi	sp,sp,32
    80012e4c:	8082                	ret
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1",
    80012e4e:	6480                	ld	s0,8(s1)
    80012e50:	57ad                	li	a5,-21
    80012e52:	8385                	srli	a5,a5,0x1
    80012e54:	943e                	add	s0,s0,a5
    80012e56:	00143413          	seqz	s0,s0
    80012e5a:	ee8ff06f          	j	80012542 <external_interrupt_MEI+0x254>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80012e5e:	4405                	li	s0,1
    TEST_END();
    80012e60:	00015597          	auipc	a1,0x15
    80012e64:	ec058593          	addi	a1,a1,-320 # 80027d20 <__func__.0+0x2c0>
    80012e68:	b7d1                	j	80012e2c <external_interrupt_MEI+0xb3e>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80012e6a:	57fd                	li	a5,-1
    80012e6c:	6498                	ld	a4,8(s1)
    80012e6e:	17fe                	slli	a5,a5,0x3f
    80012e70:	07ad                	addi	a5,a5,11
    80012e72:	f0f71be3          	bne	a4,a5,80012d88 <external_interrupt_MEI+0xa9a>
    80012e76:	00036417          	auipc	s0,0x36
    80012e7a:	19e42403          	lw	s0,414(s0) # 80049014 <excpt+0x4>
    80012e7e:	1479                	addi	s0,s0,-2
    80012e80:	00143413          	seqz	s0,s0
    80012e84:	b711                	j	80012d88 <external_interrupt_MEI+0xa9a>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80012e86:	57fd                	li	a5,-1
    80012e88:	6498                	ld	a4,8(s1)
    80012e8a:	17fe                	slli	a5,a5,0x3f
    80012e8c:	07ad                	addi	a5,a5,11
    80012e8e:	b6f712e3          	bne	a4,a5,800129f2 <external_interrupt_MEI+0x704>
    80012e92:	00036417          	auipc	s0,0x36
    80012e96:	18242403          	lw	s0,386(s0) # 80049014 <excpt+0x4>
    80012e9a:	1475                	addi	s0,s0,-3
    80012e9c:	00143413          	seqz	s0,s0
    80012ea0:	be89                	j	800129f2 <external_interrupt_MEI+0x704>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80012ea2:	00036717          	auipc	a4,0x36
    80012ea6:	17272703          	lw	a4,370(a4) # 80049014 <excpt+0x4>
    80012eaa:	4789                	li	a5,2
    80012eac:	eaf719e3          	bne	a4,a5,80012d5e <external_interrupt_MEI+0xa70>
    80012eb0:	b5c9                	j	80012d72 <external_interrupt_MEI+0xa84>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80012eb2:	00036717          	auipc	a4,0x36
    80012eb6:	16272703          	lw	a4,354(a4) # 80049014 <excpt+0x4>
    80012eba:	478d                	li	a5,3
    80012ebc:	b0f716e3          	bne	a4,a5,800129c8 <external_interrupt_MEI+0x6da>
    80012ec0:	be31                	j	800129dc <external_interrupt_MEI+0x6ee>
    TEST_ASSERT("HS mode leads to no interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80012ec2:	00015517          	auipc	a0,0x15
    80012ec6:	eb650513          	addi	a0,a0,-330 # 80027d78 <__func__.0+0x318>
    80012eca:	62d120ef          	jal	80025cf6 <printf>
    80012ece:	02900513          	li	a0,41
    80012ed2:	42f110ef          	jal	80024b00 <putchar>
    80012ed6:	b655                	j	80012a7a <external_interrupt_MEI+0x78c>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    80012ed8:	00015517          	auipc	a0,0x15
    80012edc:	ea050513          	addi	a0,a0,-352 # 80027d78 <__func__.0+0x318>
    80012ee0:	617120ef          	jal	80025cf6 <printf>
    80012ee4:	02900513          	li	a0,41
    80012ee8:	419110ef          	jal	80024b00 <putchar>
    80012eec:	bbc9                	j	80012cbe <external_interrupt_MEI+0x9d0>
    TEST_ASSERT("m mode leads to no interrupt pending when mstatus.mie=1 and mip.meip=1 and mie.meie=0",
    80012eee:	00015517          	auipc	a0,0x15
    80012ef2:	e8a50513          	addi	a0,a0,-374 # 80027d78 <__func__.0+0x318>
    80012ef6:	601120ef          	jal	80025cf6 <printf>
    80012efa:	02900513          	li	a0,41
    80012efe:	403110ef          	jal	80024b00 <putchar>
    80012f02:	d66ff06f          	j	80012468 <external_interrupt_MEI+0x17a>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80012f06:	00015517          	auipc	a0,0x15
    80012f0a:	e7250513          	addi	a0,a0,-398 # 80027d78 <__func__.0+0x318>
    80012f0e:	5e9120ef          	jal	80025cf6 <printf>
    80012f12:	02900513          	li	a0,41
    80012f16:	3eb110ef          	jal	80024b00 <putchar>
    80012f1a:	bddd                	j	80012e10 <external_interrupt_MEI+0xb22>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    80012f1c:	00015517          	auipc	a0,0x15
    80012f20:	e5c50513          	addi	a0,a0,-420 # 80027d78 <__func__.0+0x318>
    80012f24:	5d3120ef          	jal	80025cf6 <printf>
    80012f28:	02900513          	li	a0,41
    80012f2c:	3d5110ef          	jal	80024b00 <putchar>
    80012f30:	bae5                	j	80012928 <external_interrupt_MEI+0x63a>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=0",
    80012f32:	00015517          	auipc	a0,0x15
    80012f36:	e4650513          	addi	a0,a0,-442 # 80027d78 <__func__.0+0x318>
    80012f3a:	5bd120ef          	jal	80025cf6 <printf>
    80012f3e:	02900513          	li	a0,41
    80012f42:	3bf110ef          	jal	80024b00 <putchar>
    80012f46:	f9eff06f          	j	800126e4 <external_interrupt_MEI+0x3f6>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=0",
    80012f4a:	00015517          	auipc	a0,0x15
    80012f4e:	e2e50513          	addi	a0,a0,-466 # 80027d78 <__func__.0+0x318>
    80012f52:	5a5120ef          	jal	80025cf6 <printf>
    80012f56:	02900513          	li	a0,41
    80012f5a:	3a7110ef          	jal	80024b00 <putchar>
    80012f5e:	ef4ff06f          	j	80012652 <external_interrupt_MEI+0x364>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=1",
    80012f62:	00015517          	auipc	a0,0x15
    80012f66:	e1650513          	addi	a0,a0,-490 # 80027d78 <__func__.0+0x318>
    80012f6a:	58d120ef          	jal	80025cf6 <printf>
    80012f6e:	02900513          	li	a0,41
    80012f72:	38f110ef          	jal	80024b00 <putchar>
    80012f76:	e4aff06f          	j	800125c0 <external_interrupt_MEI+0x2d2>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80012f7a:	00036717          	auipc	a4,0x36
    80012f7e:	09a72703          	lw	a4,154(a4) # 80049014 <excpt+0x4>
    80012f82:	478d                	li	a5,3
    80012f84:	00015597          	auipc	a1,0x15
    80012f88:	d9c58593          	addi	a1,a1,-612 # 80027d20 <__func__.0+0x2c0>
    80012f8c:	a0f70de3          	beq	a4,a5,800129a6 <external_interrupt_MEI+0x6b8>
    80012f90:	00015597          	auipc	a1,0x15
    80012f94:	da058593          	addi	a1,a1,-608 # 80027d30 <__func__.0+0x2d0>
    80012f98:	b439                	j	800129a6 <external_interrupt_MEI+0x6b8>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80012f9a:	00036717          	auipc	a4,0x36
    80012f9e:	07a72703          	lw	a4,122(a4) # 80049014 <excpt+0x4>
    80012fa2:	4789                	li	a5,2
    80012fa4:	00015597          	auipc	a1,0x15
    80012fa8:	d7c58593          	addi	a1,a1,-644 # 80027d20 <__func__.0+0x2c0>
    80012fac:	d8f708e3          	beq	a4,a5,80012d3c <external_interrupt_MEI+0xa4e>
    80012fb0:	00015597          	auipc	a1,0x15
    80012fb4:	d8058593          	addi	a1,a1,-640 # 80027d30 <__func__.0+0x2d0>
    80012fb8:	b351                	j	80012d3c <external_interrupt_MEI+0xa4e>

0000000080012fba <external_interrupt_SEI>:


bool external_interrupt_SEI() {
    80012fba:	1101                	addi	sp,sp,-32

    TEST_START();
    80012fbc:	00014597          	auipc	a1,0x14
    80012fc0:	af458593          	addi	a1,a1,-1292 # 80026ab0 <__func__.1>
    80012fc4:	00015517          	auipc	a0,0x15
    80012fc8:	d7c50513          	addi	a0,a0,-644 # 80027d40 <__func__.0+0x2e0>
bool external_interrupt_SEI() {
    80012fcc:	ec06                	sd	ra,24(sp)
    80012fce:	e822                	sd	s0,16(sp)
    80012fd0:	e426                	sd	s1,8(sp)
    TEST_START();
    80012fd2:	525120ef          	jal	80025cf6 <printf>
    80012fd6:	4529                	li	a0,10
    80012fd8:	329110ef          	jal	80024b00 <putchar>

    TEST_SETUP_EXCEPT();
    80012fdc:	0330000f          	fence	rw,rw
    80012fe0:	00036497          	auipc	s1,0x36
    80012fe4:	03048493          	addi	s1,s1,48 # 80049010 <excpt>
    80012fe8:	4785                	li	a5,1
    80012fea:	00036717          	auipc	a4,0x36
    80012fee:	04073f23          	sd	zero,94(a4) # 80049048 <excpt+0x38>
    80012ff2:	00f49023          	sh	a5,0(s1)
    80012ff6:	0330000f          	fence	rw,rw

   
    //HS模式下产生单bit外部中断，sstatus.sie=1，且mip，sie对应的SEIP、SEIE拉高
    goto_priv(PRIV_HS);
    80012ffa:	450d                	li	a0,3
    80012ffc:	bfbed0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     //sie位
    80013000:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    80013004:	20000793          	li	a5,512
    80013008:	1047a073          	csrs	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    8001300c:	1447a073          	csrs	sip,a5

    goto_priv(PRIV_HS);
    80013010:	450d                	li	a0,3
    80013012:	be5ed0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    80013016:	08200593          	li	a1,130
    8001301a:	00019617          	auipc	a2,0x19
    8001301e:	b1e60613          	addi	a2,a2,-1250 # 8002bb38 <__func__.0+0x40d8>
    80013022:	00015517          	auipc	a0,0x15
    80013026:	d3650513          	addi	a0,a0,-714 # 80027d58 <__func__.0+0x2f8>
    8001302a:	4cd120ef          	jal	80025cf6 <printf>
    8001302e:	00036797          	auipc	a5,0x36
    80013032:	fe37c783          	lbu	a5,-29(a5) # 80049011 <excpt+0x1>
    80013036:	00015597          	auipc	a1,0x15
    8001303a:	cfa58593          	addi	a1,a1,-774 # 80027d30 <__func__.0+0x2d0>
    8001303e:	c799                	beqz	a5,8001304c <external_interrupt_SEI+0x92>
    80013040:	57fd                	li	a5,-1
    80013042:	6498                	ld	a4,8(s1)
    80013044:	17fe                	slli	a5,a5,0x3f
    80013046:	07a5                	addi	a5,a5,9
    80013048:	7ef70963          	beq	a4,a5,8001383a <external_interrupt_SEI+0x880>
    8001304c:	00015517          	auipc	a0,0x15
    80013050:	d2450513          	addi	a0,a0,-732 # 80027d70 <__func__.0+0x310>
    80013054:	4a3120ef          	jal	80025cf6 <printf>
    80013058:	00036797          	auipc	a5,0x36
    8001305c:	fb97c783          	lbu	a5,-71(a5) # 80049011 <excpt+0x1>
    80013060:	c799                	beqz	a5,8001306e <external_interrupt_SEI+0xb4>
    80013062:	57fd                	li	a5,-1
    80013064:	6498                	ld	a4,8(s1)
    80013066:	17fe                	slli	a5,a5,0x3f
    80013068:	07a5                	addi	a5,a5,9
    8001306a:	6af70063          	beq	a4,a5,8001370a <external_interrupt_SEI+0x750>
    8001306e:	00015517          	auipc	a0,0x15
    80013072:	d0a50513          	addi	a0,a0,-758 # 80027d78 <__func__.0+0x318>
    80013076:	481120ef          	jal	80025cf6 <printf>
    8001307a:	02900513          	li	a0,41
    8001307e:	283110ef          	jal	80024b00 <putchar>
    80013082:	4529                	li	a0,10
    80013084:	27d110ef          	jal	80024b00 <putchar>
    80013088:	00036797          	auipc	a5,0x36
    8001308c:	f897c783          	lbu	a5,-119(a5) # 80049011 <excpt+0x1>
    80013090:	4401                	li	s0,0
    80013092:	c799                	beqz	a5,800130a0 <external_interrupt_SEI+0xe6>
    80013094:	57fd                	li	a5,-1
    80013096:	6498                	ld	a4,8(s1)
    80013098:	17fe                	slli	a5,a5,0x3f
    8001309a:	07a5                	addi	a5,a5,9
    8001309c:	74f70663          	beq	a4,a5,800137e8 <external_interrupt_SEI+0x82e>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //HS模式下产生单bit外部中断，sstatus.sie=1，且sip.SEIP=1，sie.SEIE=0
    TEST_SETUP_EXCEPT();
    800130a0:	0330000f          	fence	rw,rw
    800130a4:	4785                	li	a5,1
    800130a6:	00036717          	auipc	a4,0x36
    800130aa:	fa073123          	sd	zero,-94(a4) # 80049048 <excpt+0x38>
    800130ae:	00f49023          	sh	a5,0(s1)
    800130b2:	0330000f          	fence	rw,rw
    goto_priv(PRIV_HS);
    800130b6:	450d                	li	a0,3
    800130b8:	b3fed0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    800130bc:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    800130c0:	20000793          	li	a5,512
    800130c4:	1047b073          	csrc	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    800130c8:	1447a073          	csrs	sip,a5

    goto_priv(PRIV_HS);
    800130cc:	450d                	li	a0,3
    800130ce:	b29ed0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt  when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    800130d2:	08200593          	li	a1,130
    800130d6:	00019617          	auipc	a2,0x19
    800130da:	ac260613          	addi	a2,a2,-1342 # 8002bb98 <__func__.0+0x4138>
    800130de:	00015517          	auipc	a0,0x15
    800130e2:	c7a50513          	addi	a0,a0,-902 # 80027d58 <__func__.0+0x2f8>
    800130e6:	411120ef          	jal	80025cf6 <printf>
    800130ea:	00036797          	auipc	a5,0x36
    800130ee:	f277c783          	lbu	a5,-217(a5) # 80049011 <excpt+0x1>
    800130f2:	00015597          	auipc	a1,0x15
    800130f6:	c3e58593          	addi	a1,a1,-962 # 80027d30 <__func__.0+0x2d0>
    800130fa:	e789                	bnez	a5,80013104 <external_interrupt_SEI+0x14a>
    800130fc:	00015597          	auipc	a1,0x15
    80013100:	c2458593          	addi	a1,a1,-988 # 80027d20 <__func__.0+0x2c0>
    80013104:	00015517          	auipc	a0,0x15
    80013108:	c6c50513          	addi	a0,a0,-916 # 80027d70 <__func__.0+0x310>
    8001310c:	3eb120ef          	jal	80025cf6 <printf>
    80013110:	00036797          	auipc	a5,0x36
    80013114:	f017c783          	lbu	a5,-255(a5) # 80049011 <excpt+0x1>
    80013118:	64079763          	bnez	a5,80013766 <external_interrupt_SEI+0x7ac>
    8001311c:	4529                	li	a0,10
    8001311e:	1e3110ef          	jal	80024b00 <putchar>
    80013122:	c419                	beqz	s0,80013130 <external_interrupt_SEI+0x176>
    80013124:	00036417          	auipc	s0,0x36
    80013128:	eed44403          	lbu	s0,-275(s0) # 80049011 <excpt+0x1>
    8001312c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //HS模式下产生单bit外部中断，sstatus.sie=1，且sip.SEIP=0，sie.SEIE=1
    TEST_SETUP_EXCEPT();
    80013130:	0330000f          	fence	rw,rw
    80013134:	4785                	li	a5,1
    80013136:	00036717          	auipc	a4,0x36
    8001313a:	f0073923          	sd	zero,-238(a4) # 80049048 <excpt+0x38>
    8001313e:	00f49023          	sh	a5,0(s1)
    80013142:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80013146:	4511                	li	a0,4
    80013148:	aafed0ef          	jal	80000bf6 <goto_priv>
    CSRW(CSR_MIDELEG,0);
    8001314c:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SSTATUS,1ULL << 1);     
    80013150:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    80013154:	20000793          	li	a5,512
    80013158:	1047a073          	csrs	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    8001315c:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    80013160:	450d                	li	a0,3
    80013162:	a95ed0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    80013166:	08200593          	li	a1,130
    8001316a:	00019617          	auipc	a2,0x19
    8001316e:	a7e60613          	addi	a2,a2,-1410 # 8002bbe8 <__func__.0+0x4188>
    80013172:	00015517          	auipc	a0,0x15
    80013176:	be650513          	addi	a0,a0,-1050 # 80027d58 <__func__.0+0x2f8>
    8001317a:	37d120ef          	jal	80025cf6 <printf>
    8001317e:	00036797          	auipc	a5,0x36
    80013182:	e937c783          	lbu	a5,-365(a5) # 80049011 <excpt+0x1>
    80013186:	00015597          	auipc	a1,0x15
    8001318a:	baa58593          	addi	a1,a1,-1110 # 80027d30 <__func__.0+0x2d0>
    8001318e:	c799                	beqz	a5,8001319c <external_interrupt_SEI+0x1e2>
    80013190:	57fd                	li	a5,-1
    80013192:	6498                	ld	a4,8(s1)
    80013194:	17fe                	slli	a5,a5,0x3f
    80013196:	07a5                	addi	a5,a5,9
    80013198:	66f70163          	beq	a4,a5,800137fa <external_interrupt_SEI+0x840>
    8001319c:	00015517          	auipc	a0,0x15
    800131a0:	bd450513          	addi	a0,a0,-1068 # 80027d70 <__func__.0+0x310>
    800131a4:	353120ef          	jal	80025cf6 <printf>
    800131a8:	00036797          	auipc	a5,0x36
    800131ac:	e697c783          	lbu	a5,-407(a5) # 80049011 <excpt+0x1>
    800131b0:	c799                	beqz	a5,800131be <external_interrupt_SEI+0x204>
    800131b2:	57fd                	li	a5,-1
    800131b4:	6498                	ld	a4,8(s1)
    800131b6:	17fe                	slli	a5,a5,0x3f
    800131b8:	07a5                	addi	a5,a5,9
    800131ba:	54f70063          	beq	a4,a5,800136fa <external_interrupt_SEI+0x740>
    800131be:	00015517          	auipc	a0,0x15
    800131c2:	bba50513          	addi	a0,a0,-1094 # 80027d78 <__func__.0+0x318>
    800131c6:	331120ef          	jal	80025cf6 <printf>
    800131ca:	02900513          	li	a0,41
    800131ce:	133110ef          	jal	80024b00 <putchar>
    800131d2:	4529                	li	a0,10
    800131d4:	12d110ef          	jal	80024b00 <putchar>
    800131d8:	c801                	beqz	s0,800131e8 <external_interrupt_SEI+0x22e>
    800131da:	00036797          	auipc	a5,0x36
    800131de:	e377c783          	lbu	a5,-457(a5) # 80049011 <excpt+0x1>
    800131e2:	4401                	li	s0,0
    800131e4:	4e079563          	bnez	a5,800136ce <external_interrupt_SEI+0x714>
    //     excpt.priv == PRIV_HS
    // ); 
    

    //HS模式下产生单bit外部中断，sstatus.mie=1，且sip.SEIP=0，sie.SIE=0
    TEST_SETUP_EXCEPT();
    800131e8:	0330000f          	fence	rw,rw
    800131ec:	4785                	li	a5,1
    800131ee:	00036717          	auipc	a4,0x36
    800131f2:	e4073d23          	sd	zero,-422(a4) # 80049048 <excpt+0x38>
    800131f6:	00f49023          	sh	a5,0(s1)
    800131fa:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800131fe:	4511                	li	a0,4
    80013200:	9f7ed0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1)     
    80013204:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    80013208:	20000793          	li	a5,512
    8001320c:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    80013210:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    80013214:	450d                	li	a0,3
    80013216:	9e1ed0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=1 and sie.seie=0",
    8001321a:	08200593          	li	a1,130
    8001321e:	00019617          	auipc	a2,0x19
    80013222:	a2a60613          	addi	a2,a2,-1494 # 8002bc48 <__func__.0+0x41e8>
    80013226:	00015517          	auipc	a0,0x15
    8001322a:	b3250513          	addi	a0,a0,-1230 # 80027d58 <__func__.0+0x2f8>
    8001322e:	2c9120ef          	jal	80025cf6 <printf>
    80013232:	00036797          	auipc	a5,0x36
    80013236:	ddf7c783          	lbu	a5,-545(a5) # 80049011 <excpt+0x1>
    8001323a:	00015597          	auipc	a1,0x15
    8001323e:	af658593          	addi	a1,a1,-1290 # 80027d30 <__func__.0+0x2d0>
    80013242:	e789                	bnez	a5,8001324c <external_interrupt_SEI+0x292>
    80013244:	00015597          	auipc	a1,0x15
    80013248:	adc58593          	addi	a1,a1,-1316 # 80027d20 <__func__.0+0x2c0>
    8001324c:	00015517          	auipc	a0,0x15
    80013250:	b2450513          	addi	a0,a0,-1244 # 80027d70 <__func__.0+0x310>
    80013254:	2a3120ef          	jal	80025cf6 <printf>
    80013258:	00036797          	auipc	a5,0x36
    8001325c:	db97c783          	lbu	a5,-583(a5) # 80049011 <excpt+0x1>
    80013260:	4e079863          	bnez	a5,80013750 <external_interrupt_SEI+0x796>
    80013264:	4529                	li	a0,10
    80013266:	09b110ef          	jal	80024b00 <putchar>
    8001326a:	c419                	beqz	s0,80013278 <external_interrupt_SEI+0x2be>
    8001326c:	00036417          	auipc	s0,0x36
    80013270:	da544403          	lbu	s0,-603(s0) # 80049011 <excpt+0x1>
    80013274:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 
    
    //HS模式下产生单bit外部中断，sstatus.sie=0，且sip.SEIP=0，sie.SIE=0
    TEST_SETUP_EXCEPT();
    80013278:	0330000f          	fence	rw,rw
    8001327c:	4785                	li	a5,1
    8001327e:	00036717          	auipc	a4,0x36
    80013282:	dc073523          	sd	zero,-566(a4) # 80049048 <excpt+0x38>
    80013286:	00f49023          	sh	a5,0(s1)
    8001328a:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001328e:	4511                	li	a0,4
    80013290:	967ed0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_SSTATUS,1ULL << 1)     
    80013294:	10017073          	csrci	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    80013298:	20000793          	li	a5,512
    8001329c:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    800132a0:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    800132a4:	450d                	li	a0,3
    800132a6:	951ed0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=0 and sie.seie=0",
    800132aa:	08200593          	li	a1,130
    800132ae:	00019617          	auipc	a2,0x19
    800132b2:	9ea60613          	addi	a2,a2,-1558 # 8002bc98 <__func__.0+0x4238>
    800132b6:	00015517          	auipc	a0,0x15
    800132ba:	aa250513          	addi	a0,a0,-1374 # 80027d58 <__func__.0+0x2f8>
    800132be:	239120ef          	jal	80025cf6 <printf>
    800132c2:	00036797          	auipc	a5,0x36
    800132c6:	d4f7c783          	lbu	a5,-689(a5) # 80049011 <excpt+0x1>
    800132ca:	00015597          	auipc	a1,0x15
    800132ce:	a6658593          	addi	a1,a1,-1434 # 80027d30 <__func__.0+0x2d0>
    800132d2:	e789                	bnez	a5,800132dc <external_interrupt_SEI+0x322>
    800132d4:	00015597          	auipc	a1,0x15
    800132d8:	a4c58593          	addi	a1,a1,-1460 # 80027d20 <__func__.0+0x2c0>
    800132dc:	00015517          	auipc	a0,0x15
    800132e0:	a9450513          	addi	a0,a0,-1388 # 80027d70 <__func__.0+0x310>
    800132e4:	213120ef          	jal	80025cf6 <printf>
    800132e8:	00036797          	auipc	a5,0x36
    800132ec:	d297c783          	lbu	a5,-727(a5) # 80049011 <excpt+0x1>
    800132f0:	44079563          	bnez	a5,8001373a <external_interrupt_SEI+0x780>
    800132f4:	4529                	li	a0,10
    800132f6:	00b110ef          	jal	80024b00 <putchar>
    800132fa:	c419                	beqz	s0,80013308 <external_interrupt_SEI+0x34e>
    800132fc:	00036417          	auipc	s0,0x36
    80013300:	d1544403          	lbu	s0,-747(s0) # 80049011 <excpt+0x1>
    80013304:	00144413          	xori	s0,s0,1

//---------------------------------------------------------
    

    //VS模式下产生单bit外部中断，sstatus.sie=1，且sip，sie对应的SEIP、SEIE拉高
    TEST_SETUP_EXCEPT();
    80013308:	0330000f          	fence	rw,rw
    8001330c:	4785                	li	a5,1
    8001330e:	00036717          	auipc	a4,0x36
    80013312:	d2073d23          	sd	zero,-710(a4) # 80049048 <excpt+0x38>
    80013316:	00f49023          	sh	a5,0(s1)
    8001331a:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001331e:	4511                	li	a0,4
    80013320:	8d7ed0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    80013324:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    80013328:	20000793          	li	a5,512
    8001332c:	1047a073          	csrs	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    80013330:	1447a073          	csrs	sip,a5

    
    goto_priv(PRIV_VS);
    80013334:	4509                	li	a0,2
    80013336:	8c1ed0ef          	jal	80000bf6 <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8001333a:	08200593          	li	a1,130
    8001333e:	00019617          	auipc	a2,0x19
    80013342:	9aa60613          	addi	a2,a2,-1622 # 8002bce8 <__func__.0+0x4288>
    80013346:	00015517          	auipc	a0,0x15
    8001334a:	a1250513          	addi	a0,a0,-1518 # 80027d58 <__func__.0+0x2f8>
    8001334e:	1a9120ef          	jal	80025cf6 <printf>
    80013352:	00036797          	auipc	a5,0x36
    80013356:	cbf7c783          	lbu	a5,-833(a5) # 80049011 <excpt+0x1>
    8001335a:	00015597          	auipc	a1,0x15
    8001335e:	9d658593          	addi	a1,a1,-1578 # 80027d30 <__func__.0+0x2d0>
    80013362:	c799                	beqz	a5,80013370 <external_interrupt_SEI+0x3b6>
    80013364:	57fd                	li	a5,-1
    80013366:	6498                	ld	a4,8(s1)
    80013368:	17fe                	slli	a5,a5,0x3f
    8001336a:	07a5                	addi	a5,a5,9
    8001336c:	44f70e63          	beq	a4,a5,800137c8 <external_interrupt_SEI+0x80e>
    80013370:	00015517          	auipc	a0,0x15
    80013374:	a0050513          	addi	a0,a0,-1536 # 80027d70 <__func__.0+0x310>
    80013378:	17f120ef          	jal	80025cf6 <printf>
    8001337c:	00036797          	auipc	a5,0x36
    80013380:	c957c783          	lbu	a5,-875(a5) # 80049011 <excpt+0x1>
    80013384:	c799                	beqz	a5,80013392 <external_interrupt_SEI+0x3d8>
    80013386:	57fd                	li	a5,-1
    80013388:	6498                	ld	a4,8(s1)
    8001338a:	17fe                	slli	a5,a5,0x3f
    8001338c:	07a5                	addi	a5,a5,9
    8001338e:	34f70e63          	beq	a4,a5,800136ea <external_interrupt_SEI+0x730>
    80013392:	00015517          	auipc	a0,0x15
    80013396:	9e650513          	addi	a0,a0,-1562 # 80027d78 <__func__.0+0x318>
    8001339a:	15d120ef          	jal	80025cf6 <printf>
    8001339e:	02900513          	li	a0,41
    800133a2:	75e110ef          	jal	80024b00 <putchar>
    800133a6:	4529                	li	a0,10
    800133a8:	758110ef          	jal	80024b00 <putchar>
    800133ac:	c801                	beqz	s0,800133bc <external_interrupt_SEI+0x402>
    800133ae:	00036797          	auipc	a5,0x36
    800133b2:	c637c783          	lbu	a5,-925(a5) # 80049011 <excpt+0x1>
    800133b6:	4401                	li	s0,0
    800133b8:	2e079d63          	bnez	a5,800136b2 <external_interrupt_SEI+0x6f8>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //vs模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=1，sie=0
    TEST_SETUP_EXCEPT();
    800133bc:	0330000f          	fence	rw,rw
    800133c0:	4785                	li	a5,1
    800133c2:	00036717          	auipc	a4,0x36
    800133c6:	c8073323          	sd	zero,-890(a4) # 80049048 <excpt+0x38>
    800133ca:	00f49023          	sh	a5,0(s1)
    800133ce:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800133d2:	4511                	li	a0,4
    800133d4:	823ed0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    800133d8:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    800133dc:	20000793          	li	a5,512
    800133e0:	1047b073          	csrc	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    800133e4:	1447a073          	csrs	sip,a5

    
    goto_priv(PRIV_VS);
    800133e8:	4509                	li	a0,2
    800133ea:	80ded0ef          	jal	80000bf6 <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    800133ee:	08200593          	li	a1,130
    800133f2:	00019617          	auipc	a2,0x19
    800133f6:	94e60613          	addi	a2,a2,-1714 # 8002bd40 <__func__.0+0x42e0>
    800133fa:	00015517          	auipc	a0,0x15
    800133fe:	95e50513          	addi	a0,a0,-1698 # 80027d58 <__func__.0+0x2f8>
    80013402:	0f5120ef          	jal	80025cf6 <printf>
    80013406:	00036797          	auipc	a5,0x36
    8001340a:	c0b7c783          	lbu	a5,-1013(a5) # 80049011 <excpt+0x1>
    8001340e:	00015597          	auipc	a1,0x15
    80013412:	92258593          	addi	a1,a1,-1758 # 80027d30 <__func__.0+0x2d0>
    80013416:	c799                	beqz	a5,80013424 <external_interrupt_SEI+0x46a>
    80013418:	57fd                	li	a5,-1
    8001341a:	6498                	ld	a4,8(s1)
    8001341c:	17fe                	slli	a5,a5,0x3f
    8001341e:	07a5                	addi	a5,a5,9
    80013420:	38f70463          	beq	a4,a5,800137a8 <external_interrupt_SEI+0x7ee>
    80013424:	00015517          	auipc	a0,0x15
    80013428:	94c50513          	addi	a0,a0,-1716 # 80027d70 <__func__.0+0x310>
    8001342c:	0cb120ef          	jal	80025cf6 <printf>
    80013430:	00036797          	auipc	a5,0x36
    80013434:	be17c783          	lbu	a5,-1055(a5) # 80049011 <excpt+0x1>
    80013438:	c799                	beqz	a5,80013446 <external_interrupt_SEI+0x48c>
    8001343a:	57fd                	li	a5,-1
    8001343c:	6498                	ld	a4,8(s1)
    8001343e:	17fe                	slli	a5,a5,0x3f
    80013440:	07a5                	addi	a5,a5,9
    80013442:	2ef70463          	beq	a4,a5,8001372a <external_interrupt_SEI+0x770>
    80013446:	00015517          	auipc	a0,0x15
    8001344a:	93250513          	addi	a0,a0,-1742 # 80027d78 <__func__.0+0x318>
    8001344e:	0a9120ef          	jal	80025cf6 <printf>
    80013452:	02900513          	li	a0,41
    80013456:	6aa110ef          	jal	80024b00 <putchar>
    8001345a:	4529                	li	a0,10
    8001345c:	6a4110ef          	jal	80024b00 <putchar>
    80013460:	c801                	beqz	s0,80013470 <external_interrupt_SEI+0x4b6>
    80013462:	00036797          	auipc	a5,0x36
    80013466:	baf7c783          	lbu	a5,-1105(a5) # 80049011 <excpt+0x1>
    8001346a:	4401                	li	s0,0
    8001346c:	22079563          	bnez	a5,80013696 <external_interrupt_SEI+0x6dc>
        excpt.cause == CAUSE_SEI &&
        excpt.priv == PRIV_M
    ); 

    //vs模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=0，sie=1
    TEST_SETUP_EXCEPT();
    80013470:	0330000f          	fence	rw,rw
    80013474:	4785                	li	a5,1
    80013476:	00036717          	auipc	a4,0x36
    8001347a:	bc073923          	sd	zero,-1070(a4) # 80049048 <excpt+0x38>
    8001347e:	00f49023          	sh	a5,0(s1)
    80013482:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80013486:	4511                	li	a0,4
    80013488:	f6eed0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    8001348c:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    80013490:	20000793          	li	a5,512
    80013494:	1047a073          	csrs	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    80013498:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    8001349c:	4509                	li	a0,2
    8001349e:	f58ed0ef          	jal	80000bf6 <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    800134a2:	08200593          	li	a1,130
    800134a6:	00019617          	auipc	a2,0x19
    800134aa:	8f260613          	addi	a2,a2,-1806 # 8002bd98 <__func__.0+0x4338>
    800134ae:	00015517          	auipc	a0,0x15
    800134b2:	8aa50513          	addi	a0,a0,-1878 # 80027d58 <__func__.0+0x2f8>
    800134b6:	041120ef          	jal	80025cf6 <printf>
    800134ba:	00036797          	auipc	a5,0x36
    800134be:	b577c783          	lbu	a5,-1193(a5) # 80049011 <excpt+0x1>
    800134c2:	00015597          	auipc	a1,0x15
    800134c6:	86e58593          	addi	a1,a1,-1938 # 80027d30 <__func__.0+0x2d0>
    800134ca:	c799                	beqz	a5,800134d8 <external_interrupt_SEI+0x51e>
    800134cc:	57fd                	li	a5,-1
    800134ce:	6498                	ld	a4,8(s1)
    800134d0:	17fe                	slli	a5,a5,0x3f
    800134d2:	07a5                	addi	a5,a5,9
    800134d4:	34f70363          	beq	a4,a5,8001381a <external_interrupt_SEI+0x860>
    800134d8:	00015517          	auipc	a0,0x15
    800134dc:	89850513          	addi	a0,a0,-1896 # 80027d70 <__func__.0+0x310>
    800134e0:	017120ef          	jal	80025cf6 <printf>
    800134e4:	00036797          	auipc	a5,0x36
    800134e8:	b2d7c783          	lbu	a5,-1235(a5) # 80049011 <excpt+0x1>
    800134ec:	c799                	beqz	a5,800134fa <external_interrupt_SEI+0x540>
    800134ee:	57fd                	li	a5,-1
    800134f0:	6498                	ld	a4,8(s1)
    800134f2:	17fe                	slli	a5,a5,0x3f
    800134f4:	07a5                	addi	a5,a5,9
    800134f6:	22f70263          	beq	a4,a5,8001371a <external_interrupt_SEI+0x760>
    800134fa:	00015517          	auipc	a0,0x15
    800134fe:	87e50513          	addi	a0,a0,-1922 # 80027d78 <__func__.0+0x318>
    80013502:	7f4120ef          	jal	80025cf6 <printf>
    80013506:	02900513          	li	a0,41
    8001350a:	5f6110ef          	jal	80024b00 <putchar>
    8001350e:	4529                	li	a0,10
    80013510:	5f0110ef          	jal	80024b00 <putchar>
    80013514:	c801                	beqz	s0,80013524 <external_interrupt_SEI+0x56a>
    80013516:	00036797          	auipc	a5,0x36
    8001351a:	afb7c783          	lbu	a5,-1285(a5) # 80049011 <excpt+0x1>
    8001351e:	4401                	li	s0,0
    80013520:	14079d63          	bnez	a5,8001367a <external_interrupt_SEI+0x6c0>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //低特权模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=0，sie=0
    TEST_SETUP_EXCEPT();
    80013524:	0330000f          	fence	rw,rw
    80013528:	4785                	li	a5,1
    8001352a:	00036717          	auipc	a4,0x36
    8001352e:	b0073f23          	sd	zero,-1250(a4) # 80049048 <excpt+0x38>
    80013532:	00f49023          	sh	a5,0(s1)
    80013536:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001353a:	4511                	li	a0,4
    8001353c:	ebaed0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    80013540:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    80013544:	20000793          	li	a5,512
    80013548:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    8001354c:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    80013550:	4509                	li	a0,2
    80013552:	ea4ed0ef          	jal	80000bf6 <goto_priv>

    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    80013556:	08200593          	li	a1,130
    8001355a:	00019617          	auipc	a2,0x19
    8001355e:	89660613          	addi	a2,a2,-1898 # 8002bdf0 <__func__.0+0x4390>
    80013562:	00014517          	auipc	a0,0x14
    80013566:	7f650513          	addi	a0,a0,2038 # 80027d58 <__func__.0+0x2f8>
    8001356a:	78c120ef          	jal	80025cf6 <printf>
    8001356e:	00036797          	auipc	a5,0x36
    80013572:	aa37c783          	lbu	a5,-1373(a5) # 80049011 <excpt+0x1>
    80013576:	00014597          	auipc	a1,0x14
    8001357a:	7ba58593          	addi	a1,a1,1978 # 80027d30 <__func__.0+0x2d0>
    8001357e:	e789                	bnez	a5,80013588 <external_interrupt_SEI+0x5ce>
    80013580:	00014597          	auipc	a1,0x14
    80013584:	7a058593          	addi	a1,a1,1952 # 80027d20 <__func__.0+0x2c0>
    80013588:	00014517          	auipc	a0,0x14
    8001358c:	7e850513          	addi	a0,a0,2024 # 80027d70 <__func__.0+0x310>
    80013590:	766120ef          	jal	80025cf6 <printf>
    80013594:	00036797          	auipc	a5,0x36
    80013598:	a7d7c783          	lbu	a5,-1411(a5) # 80049011 <excpt+0x1>
    8001359c:	1e079b63          	bnez	a5,80013792 <external_interrupt_SEI+0x7d8>
    800135a0:	4529                	li	a0,10
    800135a2:	55e110ef          	jal	80024b00 <putchar>
    800135a6:	c419                	beqz	s0,800135b4 <external_interrupt_SEI+0x5fa>
    800135a8:	00036417          	auipc	s0,0x36
    800135ac:	a6944403          	lbu	s0,-1431(s0) # 80049011 <excpt+0x1>
    800135b0:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //低特权模式下产生HS级单bit外部中断，sstatus.sie=0，且sip=0，sie=0
    TEST_SETUP_EXCEPT();
    800135b4:	0330000f          	fence	rw,rw
    800135b8:	4785                	li	a5,1
    800135ba:	00036717          	auipc	a4,0x36
    800135be:	a8073723          	sd	zero,-1394(a4) # 80049048 <excpt+0x38>
    800135c2:	00f49023          	sh	a5,0(s1)
    800135c6:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800135ca:	4511                	li	a0,4
    800135cc:	e2aed0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_SSTATUS,1ULL << 1);     
    800135d0:	10017073          	csrci	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    800135d4:	20000793          	li	a5,512
    800135d8:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    800135dc:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    800135e0:	4509                	li	a0,2
    800135e2:	e14ed0ef          	jal	80000bf6 <goto_priv>

    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    800135e6:	08200593          	li	a1,130
    800135ea:	00019617          	auipc	a2,0x19
    800135ee:	80660613          	addi	a2,a2,-2042 # 8002bdf0 <__func__.0+0x4390>
    800135f2:	00014517          	auipc	a0,0x14
    800135f6:	76650513          	addi	a0,a0,1894 # 80027d58 <__func__.0+0x2f8>
    800135fa:	6fc120ef          	jal	80025cf6 <printf>
    800135fe:	00036797          	auipc	a5,0x36
    80013602:	a137c783          	lbu	a5,-1517(a5) # 80049011 <excpt+0x1>
    80013606:	00014597          	auipc	a1,0x14
    8001360a:	72a58593          	addi	a1,a1,1834 # 80027d30 <__func__.0+0x2d0>
    8001360e:	e789                	bnez	a5,80013618 <external_interrupt_SEI+0x65e>
    80013610:	00014597          	auipc	a1,0x14
    80013614:	71058593          	addi	a1,a1,1808 # 80027d20 <__func__.0+0x2c0>
    80013618:	00014517          	auipc	a0,0x14
    8001361c:	75850513          	addi	a0,a0,1880 # 80027d70 <__func__.0+0x310>
    80013620:	6d6120ef          	jal	80025cf6 <printf>
    80013624:	00036797          	auipc	a5,0x36
    80013628:	9ed7c783          	lbu	a5,-1555(a5) # 80049011 <excpt+0x1>
    8001362c:	14079863          	bnez	a5,8001377c <external_interrupt_SEI+0x7c2>
    80013630:	4529                	li	a0,10
    80013632:	4ce110ef          	jal	80024b00 <putchar>
    80013636:	c411                	beqz	s0,80013642 <external_interrupt_SEI+0x688>
    80013638:	00036797          	auipc	a5,0x36
    8001363c:	9d97c783          	lbu	a5,-1575(a5) # 80049011 <excpt+0x1>
    80013640:	c79d                	beqz	a5,8001366e <external_interrupt_SEI+0x6b4>
    80013642:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80013644:	00014597          	auipc	a1,0x14
    80013648:	6ec58593          	addi	a1,a1,1772 # 80027d30 <__func__.0+0x2d0>
    8001364c:	00014517          	auipc	a0,0x14
    80013650:	78c50513          	addi	a0,a0,1932 # 80027dd8 <__func__.0+0x378>
    80013654:	6a2120ef          	jal	80025cf6 <printf>
    80013658:	4511                	li	a0,4
    8001365a:	d9ced0ef          	jal	80000bf6 <goto_priv>
    8001365e:	e4fed0ef          	jal	800014ac <reset_state>
}
    80013662:	60e2                	ld	ra,24(sp)
    80013664:	8522                	mv	a0,s0
    80013666:	6442                	ld	s0,16(sp)
    80013668:	64a2                	ld	s1,8(sp)
    8001366a:	6105                	addi	sp,sp,32
    8001366c:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    8001366e:	4405                	li	s0,1
    TEST_END();
    80013670:	00014597          	auipc	a1,0x14
    80013674:	6b058593          	addi	a1,a1,1712 # 80027d20 <__func__.0+0x2c0>
    80013678:	bfd1                	j	8001364c <external_interrupt_SEI+0x692>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8001367a:	57fd                	li	a5,-1
    8001367c:	6498                	ld	a4,8(s1)
    8001367e:	17fe                	slli	a5,a5,0x3f
    80013680:	07a5                	addi	a5,a5,9
    80013682:	eaf711e3          	bne	a4,a5,80013524 <external_interrupt_SEI+0x56a>
    80013686:	00036417          	auipc	s0,0x36
    8001368a:	98e42403          	lw	s0,-1650(s0) # 80049014 <excpt+0x4>
    8001368e:	1471                	addi	s0,s0,-4
    80013690:	00143413          	seqz	s0,s0
    80013694:	bd41                	j	80013524 <external_interrupt_SEI+0x56a>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    80013696:	57fd                	li	a5,-1
    80013698:	6498                	ld	a4,8(s1)
    8001369a:	17fe                	slli	a5,a5,0x3f
    8001369c:	07a5                	addi	a5,a5,9
    8001369e:	dcf719e3          	bne	a4,a5,80013470 <external_interrupt_SEI+0x4b6>
    800136a2:	00036417          	auipc	s0,0x36
    800136a6:	97242403          	lw	s0,-1678(s0) # 80049014 <excpt+0x4>
    800136aa:	1471                	addi	s0,s0,-4
    800136ac:	00143413          	seqz	s0,s0
    800136b0:	b3c1                	j	80013470 <external_interrupt_SEI+0x4b6>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    800136b2:	57fd                	li	a5,-1
    800136b4:	6498                	ld	a4,8(s1)
    800136b6:	17fe                	slli	a5,a5,0x3f
    800136b8:	07a5                	addi	a5,a5,9
    800136ba:	d0f711e3          	bne	a4,a5,800133bc <external_interrupt_SEI+0x402>
    800136be:	00036417          	auipc	s0,0x36
    800136c2:	95642403          	lw	s0,-1706(s0) # 80049014 <excpt+0x4>
    800136c6:	1471                	addi	s0,s0,-4
    800136c8:	00143413          	seqz	s0,s0
    800136cc:	b9c5                	j	800133bc <external_interrupt_SEI+0x402>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    800136ce:	57fd                	li	a5,-1
    800136d0:	6498                	ld	a4,8(s1)
    800136d2:	17fe                	slli	a5,a5,0x3f
    800136d4:	07a5                	addi	a5,a5,9
    800136d6:	b0f719e3          	bne	a4,a5,800131e8 <external_interrupt_SEI+0x22e>
    800136da:	00036417          	auipc	s0,0x36
    800136de:	93a42403          	lw	s0,-1734(s0) # 80049014 <excpt+0x4>
    800136e2:	1471                	addi	s0,s0,-4
    800136e4:	00143413          	seqz	s0,s0
    800136e8:	b601                	j	800131e8 <external_interrupt_SEI+0x22e>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    800136ea:	00036717          	auipc	a4,0x36
    800136ee:	92a72703          	lw	a4,-1750(a4) # 80049014 <excpt+0x4>
    800136f2:	4791                	li	a5,4
    800136f4:	c8f71fe3          	bne	a4,a5,80013392 <external_interrupt_SEI+0x3d8>
    800136f8:	b17d                	j	800133a6 <external_interrupt_SEI+0x3ec>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    800136fa:	00036717          	auipc	a4,0x36
    800136fe:	91a72703          	lw	a4,-1766(a4) # 80049014 <excpt+0x4>
    80013702:	4791                	li	a5,4
    80013704:	aaf71de3          	bne	a4,a5,800131be <external_interrupt_SEI+0x204>
    80013708:	b4e9                	j	800131d2 <external_interrupt_SEI+0x218>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8001370a:	00036717          	auipc	a4,0x36
    8001370e:	90a72703          	lw	a4,-1782(a4) # 80049014 <excpt+0x4>
    80013712:	4791                	li	a5,4
    80013714:	94f71de3          	bne	a4,a5,8001306e <external_interrupt_SEI+0xb4>
    80013718:	b2ad                	j	80013082 <external_interrupt_SEI+0xc8>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8001371a:	00036717          	auipc	a4,0x36
    8001371e:	8fa72703          	lw	a4,-1798(a4) # 80049014 <excpt+0x4>
    80013722:	4791                	li	a5,4
    80013724:	dcf71be3          	bne	a4,a5,800134fa <external_interrupt_SEI+0x540>
    80013728:	b3dd                	j	8001350e <external_interrupt_SEI+0x554>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    8001372a:	00036717          	auipc	a4,0x36
    8001372e:	8ea72703          	lw	a4,-1814(a4) # 80049014 <excpt+0x4>
    80013732:	4791                	li	a5,4
    80013734:	d0f719e3          	bne	a4,a5,80013446 <external_interrupt_SEI+0x48c>
    80013738:	b30d                	j	8001345a <external_interrupt_SEI+0x4a0>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=0 and sie.seie=0",
    8001373a:	00014517          	auipc	a0,0x14
    8001373e:	63e50513          	addi	a0,a0,1598 # 80027d78 <__func__.0+0x318>
    80013742:	5b4120ef          	jal	80025cf6 <printf>
    80013746:	02900513          	li	a0,41
    8001374a:	3b6110ef          	jal	80024b00 <putchar>
    8001374e:	b65d                	j	800132f4 <external_interrupt_SEI+0x33a>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=1 and sie.seie=0",
    80013750:	00014517          	auipc	a0,0x14
    80013754:	62850513          	addi	a0,a0,1576 # 80027d78 <__func__.0+0x318>
    80013758:	59e120ef          	jal	80025cf6 <printf>
    8001375c:	02900513          	li	a0,41
    80013760:	3a0110ef          	jal	80024b00 <putchar>
    80013764:	b601                	j	80013264 <external_interrupt_SEI+0x2aa>
    TEST_ASSERT("hs mode leads to no interrupt  when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    80013766:	00014517          	auipc	a0,0x14
    8001376a:	61250513          	addi	a0,a0,1554 # 80027d78 <__func__.0+0x318>
    8001376e:	588120ef          	jal	80025cf6 <printf>
    80013772:	02900513          	li	a0,41
    80013776:	38a110ef          	jal	80024b00 <putchar>
    8001377a:	b24d                	j	8001311c <external_interrupt_SEI+0x162>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    8001377c:	00014517          	auipc	a0,0x14
    80013780:	5fc50513          	addi	a0,a0,1532 # 80027d78 <__func__.0+0x318>
    80013784:	572120ef          	jal	80025cf6 <printf>
    80013788:	02900513          	li	a0,41
    8001378c:	374110ef          	jal	80024b00 <putchar>
    80013790:	b545                	j	80013630 <external_interrupt_SEI+0x676>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    80013792:	00014517          	auipc	a0,0x14
    80013796:	5e650513          	addi	a0,a0,1510 # 80027d78 <__func__.0+0x318>
    8001379a:	55c120ef          	jal	80025cf6 <printf>
    8001379e:	02900513          	li	a0,41
    800137a2:	35e110ef          	jal	80024b00 <putchar>
    800137a6:	bbed                	j	800135a0 <external_interrupt_SEI+0x5e6>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    800137a8:	00036717          	auipc	a4,0x36
    800137ac:	86c72703          	lw	a4,-1940(a4) # 80049014 <excpt+0x4>
    800137b0:	4791                	li	a5,4
    800137b2:	00014597          	auipc	a1,0x14
    800137b6:	56e58593          	addi	a1,a1,1390 # 80027d20 <__func__.0+0x2c0>
    800137ba:	c6f705e3          	beq	a4,a5,80013424 <external_interrupt_SEI+0x46a>
    800137be:	00014597          	auipc	a1,0x14
    800137c2:	57258593          	addi	a1,a1,1394 # 80027d30 <__func__.0+0x2d0>
    800137c6:	b9b9                	j	80013424 <external_interrupt_SEI+0x46a>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    800137c8:	00036717          	auipc	a4,0x36
    800137cc:	84c72703          	lw	a4,-1972(a4) # 80049014 <excpt+0x4>
    800137d0:	4791                	li	a5,4
    800137d2:	00014597          	auipc	a1,0x14
    800137d6:	54e58593          	addi	a1,a1,1358 # 80027d20 <__func__.0+0x2c0>
    800137da:	b8f70be3          	beq	a4,a5,80013370 <external_interrupt_SEI+0x3b6>
    800137de:	00014597          	auipc	a1,0x14
    800137e2:	55258593          	addi	a1,a1,1362 # 80027d30 <__func__.0+0x2d0>
    800137e6:	b669                	j	80013370 <external_interrupt_SEI+0x3b6>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    800137e8:	00036417          	auipc	s0,0x36
    800137ec:	82c42403          	lw	s0,-2004(s0) # 80049014 <excpt+0x4>
    800137f0:	1471                	addi	s0,s0,-4
    800137f2:	00143413          	seqz	s0,s0
    800137f6:	8abff06f          	j	800130a0 <external_interrupt_SEI+0xe6>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    800137fa:	00036717          	auipc	a4,0x36
    800137fe:	81a72703          	lw	a4,-2022(a4) # 80049014 <excpt+0x4>
    80013802:	4791                	li	a5,4
    80013804:	00014597          	auipc	a1,0x14
    80013808:	51c58593          	addi	a1,a1,1308 # 80027d20 <__func__.0+0x2c0>
    8001380c:	98f708e3          	beq	a4,a5,8001319c <external_interrupt_SEI+0x1e2>
    80013810:	00014597          	auipc	a1,0x14
    80013814:	52058593          	addi	a1,a1,1312 # 80027d30 <__func__.0+0x2d0>
    80013818:	b251                	j	8001319c <external_interrupt_SEI+0x1e2>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8001381a:	00035717          	auipc	a4,0x35
    8001381e:	7fa72703          	lw	a4,2042(a4) # 80049014 <excpt+0x4>
    80013822:	4791                	li	a5,4
    80013824:	00014597          	auipc	a1,0x14
    80013828:	4fc58593          	addi	a1,a1,1276 # 80027d20 <__func__.0+0x2c0>
    8001382c:	caf706e3          	beq	a4,a5,800134d8 <external_interrupt_SEI+0x51e>
    80013830:	00014597          	auipc	a1,0x14
    80013834:	50058593          	addi	a1,a1,1280 # 80027d30 <__func__.0+0x2d0>
    80013838:	b145                	j	800134d8 <external_interrupt_SEI+0x51e>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8001383a:	00035717          	auipc	a4,0x35
    8001383e:	7da72703          	lw	a4,2010(a4) # 80049014 <excpt+0x4>
    80013842:	4791                	li	a5,4
    80013844:	00014597          	auipc	a1,0x14
    80013848:	4dc58593          	addi	a1,a1,1244 # 80027d20 <__func__.0+0x2c0>
    8001384c:	80f700e3          	beq	a4,a5,8001304c <external_interrupt_SEI+0x92>
    80013850:	00014597          	auipc	a1,0x14
    80013854:	4e058593          	addi	a1,a1,1248 # 80027d30 <__func__.0+0x2d0>
    80013858:	ff4ff06f          	j	8001304c <external_interrupt_SEI+0x92>

000000008001385c <external_interrupt_VSEI>:

bool external_interrupt_VSEI() {
    8001385c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001385e:	00013597          	auipc	a1,0x13
    80013862:	26a58593          	addi	a1,a1,618 # 80026ac8 <__func__.0>
    80013866:	00014517          	auipc	a0,0x14
    8001386a:	4da50513          	addi	a0,a0,1242 # 80027d40 <__func__.0+0x2e0>
bool external_interrupt_VSEI() {
    8001386e:	ec06                	sd	ra,24(sp)
    80013870:	e822                	sd	s0,16(sp)
    80013872:	e426                	sd	s1,8(sp)
    TEST_START();
    80013874:	482120ef          	jal	80025cf6 <printf>
    80013878:	4529                	li	a0,10
    8001387a:	286110ef          	jal	80024b00 <putchar>

    TEST_SETUP_EXCEPT();
    8001387e:	0330000f          	fence	rw,rw
    80013882:	00035417          	auipc	s0,0x35
    80013886:	78e40413          	addi	s0,s0,1934 # 80049010 <excpt>
    8001388a:	4785                	li	a5,1
    8001388c:	00035717          	auipc	a4,0x35
    80013890:	7a073e23          	sd	zero,1980(a4) # 80049048 <excpt+0x38>
    80013894:	00f41023          	sh	a5,0(s0)
    80013898:	0330000f          	fence	rw,rw

   
    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高
    goto_priv(PRIV_M);
    8001389c:	4511                	li	a0,4
    8001389e:	b58ed0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    800138a2:	40000793          	li	a5,1024
    800138a6:	6047a073          	csrs	hie,a5
    CSRS(CSR_HIP,HIP_VSEIP);
    800138aa:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    800138ae:	4509                	li	a0,2
    800138b0:	b46ed0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    800138b4:	08200593          	li	a1,130
    800138b8:	00018617          	auipc	a2,0x18
    800138bc:	58860613          	addi	a2,a2,1416 # 8002be40 <__func__.0+0x43e0>
    800138c0:	00014517          	auipc	a0,0x14
    800138c4:	49850513          	addi	a0,a0,1176 # 80027d58 <__func__.0+0x2f8>
    800138c8:	42e120ef          	jal	80025cf6 <printf>
    800138cc:	00035797          	auipc	a5,0x35
    800138d0:	7457c783          	lbu	a5,1861(a5) # 80049011 <excpt+0x1>
    800138d4:	00014597          	auipc	a1,0x14
    800138d8:	45c58593          	addi	a1,a1,1116 # 80027d30 <__func__.0+0x2d0>
    800138dc:	c799                	beqz	a5,800138ea <external_interrupt_VSEI+0x8e>
    800138de:	57fd                	li	a5,-1
    800138e0:	6418                	ld	a4,8(s0)
    800138e2:	17fe                	slli	a5,a5,0x3f
    800138e4:	07a9                	addi	a5,a5,10
    800138e6:	6af70363          	beq	a4,a5,80013f8c <external_interrupt_VSEI+0x730>
    800138ea:	00014517          	auipc	a0,0x14
    800138ee:	48650513          	addi	a0,a0,1158 # 80027d70 <__func__.0+0x310>
    800138f2:	404120ef          	jal	80025cf6 <printf>
    800138f6:	00035797          	auipc	a5,0x35
    800138fa:	71b7c783          	lbu	a5,1819(a5) # 80049011 <excpt+0x1>
    800138fe:	c799                	beqz	a5,8001390c <external_interrupt_VSEI+0xb0>
    80013900:	57fd                	li	a5,-1
    80013902:	6418                	ld	a4,8(s0)
    80013904:	17fe                	slli	a5,a5,0x3f
    80013906:	07a9                	addi	a5,a5,10
    80013908:	5cf70463          	beq	a4,a5,80013ed0 <external_interrupt_VSEI+0x674>
    8001390c:	00014517          	auipc	a0,0x14
    80013910:	46c50513          	addi	a0,a0,1132 # 80027d78 <__func__.0+0x318>
    80013914:	3e2120ef          	jal	80025cf6 <printf>
    80013918:	02900513          	li	a0,41
    8001391c:	1e4110ef          	jal	80024b00 <putchar>
    80013920:	4529                	li	a0,10
    80013922:	1de110ef          	jal	80024b00 <putchar>
    80013926:	00035797          	auipc	a5,0x35
    8001392a:	6eb7c783          	lbu	a5,1771(a5) # 80049011 <excpt+0x1>
    8001392e:	4481                	li	s1,0
    80013930:	c799                	beqz	a5,8001393e <external_interrupt_VSEI+0xe2>
    80013932:	57fd                	li	a5,-1
    80013934:	6418                	ld	a4,8(s0)
    80013936:	17fe                	slli	a5,a5,0x3f
    80013938:	07a9                	addi	a5,a5,10
    8001393a:	62f70163          	beq	a4,a5,80013f5c <external_interrupt_VSEI+0x700>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高 ,开mideleg
    TEST_SETUP_EXCEPT();
    8001393e:	0330000f          	fence	rw,rw
    80013942:	4785                	li	a5,1
    80013944:	00035717          	auipc	a4,0x35
    80013948:	70073223          	sd	zero,1796(a4) # 80049048 <excpt+0x38>
    8001394c:	00f41023          	sh	a5,0(s0)
    80013950:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80013954:	4511                	li	a0,4
    80013956:	aa0ed0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    8001395a:	40000793          	li	a5,1024
    8001395e:	6047a073          	csrs	hie,a5
    CSRS(CSR_MIDELEG,(uint64_t)-1);
    80013962:	577d                	li	a4,-1
    80013964:	30372073          	csrs	mideleg,a4
    CSRS(CSR_HIP,HIP_VSEIP);
    80013968:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    8001396c:	4509                	li	a0,2
    8001396e:	a88ed0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    80013972:	08200593          	li	a1,130
    80013976:	00018617          	auipc	a2,0x18
    8001397a:	51a60613          	addi	a2,a2,1306 # 8002be90 <__func__.0+0x4430>
    8001397e:	00014517          	auipc	a0,0x14
    80013982:	3da50513          	addi	a0,a0,986 # 80027d58 <__func__.0+0x2f8>
    80013986:	370120ef          	jal	80025cf6 <printf>
    8001398a:	00035797          	auipc	a5,0x35
    8001398e:	6877c783          	lbu	a5,1671(a5) # 80049011 <excpt+0x1>
    80013992:	00014597          	auipc	a1,0x14
    80013996:	39e58593          	addi	a1,a1,926 # 80027d30 <__func__.0+0x2d0>
    8001399a:	c799                	beqz	a5,800139a8 <external_interrupt_VSEI+0x14c>
    8001399c:	57fd                	li	a5,-1
    8001399e:	6418                	ld	a4,8(s0)
    800139a0:	17fe                	slli	a5,a5,0x3f
    800139a2:	07a9                	addi	a5,a5,10
    800139a4:	5cf70463          	beq	a4,a5,80013f6c <external_interrupt_VSEI+0x710>
    800139a8:	00014517          	auipc	a0,0x14
    800139ac:	3c850513          	addi	a0,a0,968 # 80027d70 <__func__.0+0x310>
    800139b0:	346120ef          	jal	80025cf6 <printf>
    800139b4:	00035797          	auipc	a5,0x35
    800139b8:	65d7c783          	lbu	a5,1629(a5) # 80049011 <excpt+0x1>
    800139bc:	c799                	beqz	a5,800139ca <external_interrupt_VSEI+0x16e>
    800139be:	57fd                	li	a5,-1
    800139c0:	6418                	ld	a4,8(s0)
    800139c2:	17fe                	slli	a5,a5,0x3f
    800139c4:	07a9                	addi	a5,a5,10
    800139c6:	4ef70563          	beq	a4,a5,80013eb0 <external_interrupt_VSEI+0x654>
    800139ca:	00014517          	auipc	a0,0x14
    800139ce:	3ae50513          	addi	a0,a0,942 # 80027d78 <__func__.0+0x318>
    800139d2:	324120ef          	jal	80025cf6 <printf>
    800139d6:	02900513          	li	a0,41
    800139da:	126110ef          	jal	80024b00 <putchar>
    800139de:	4529                	li	a0,10
    800139e0:	120110ef          	jal	80024b00 <putchar>
    800139e4:	c881                	beqz	s1,800139f4 <external_interrupt_VSEI+0x198>
    800139e6:	00035797          	auipc	a5,0x35
    800139ea:	62b7c783          	lbu	a5,1579(a5) # 80049011 <excpt+0x1>
    800139ee:	4481                	li	s1,0
    800139f0:	4a079263          	bnez	a5,80013e94 <external_interrupt_VSEI+0x638>
        excpt.priv == PRIV_HS
    ); 


    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高 ,开mideleg,hideleg
    TEST_SETUP_EXCEPT();
    800139f4:	0330000f          	fence	rw,rw
    800139f8:	4785                	li	a5,1
    800139fa:	00035717          	auipc	a4,0x35
    800139fe:	64073723          	sd	zero,1614(a4) # 80049048 <excpt+0x38>
    80013a02:	00f41023          	sh	a5,0(s0)
    80013a06:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80013a0a:	4511                	li	a0,4
    80013a0c:	9eaed0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80013a10:	40000793          	li	a5,1024
    80013a14:	6047a073          	csrs	hie,a5
    CSRS(CSR_MIDELEG,(uint64_t)-1);
    80013a18:	577d                	li	a4,-1
    80013a1a:	30372073          	csrs	mideleg,a4
    CSRS(CSR_HIDELEG,(uint64_t)-1);
    80013a1e:	60372073          	csrs	hideleg,a4
    CSRS(CSR_HIP,HIP_VSEIP);
    80013a22:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    80013a26:	4509                	li	a0,2
    80013a28:	9ceed0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    80013a2c:	08200593          	li	a1,130
    80013a30:	00018617          	auipc	a2,0x18
    80013a34:	4c060613          	addi	a2,a2,1216 # 8002bef0 <__func__.0+0x4490>
    80013a38:	00014517          	auipc	a0,0x14
    80013a3c:	32050513          	addi	a0,a0,800 # 80027d58 <__func__.0+0x2f8>
    80013a40:	2b6120ef          	jal	80025cf6 <printf>
    80013a44:	00035797          	auipc	a5,0x35
    80013a48:	5cd7c783          	lbu	a5,1485(a5) # 80049011 <excpt+0x1>
    80013a4c:	00014597          	auipc	a1,0x14
    80013a50:	2e458593          	addi	a1,a1,740 # 80027d30 <__func__.0+0x2d0>
    80013a54:	c799                	beqz	a5,80013a62 <external_interrupt_VSEI+0x206>
    80013a56:	57fd                	li	a5,-1
    80013a58:	6418                	ld	a4,8(s0)
    80013a5a:	17fe                	slli	a5,a5,0x3f
    80013a5c:	07a9                	addi	a5,a5,10
    80013a5e:	54f70763          	beq	a4,a5,80013fac <external_interrupt_VSEI+0x750>
    80013a62:	00014517          	auipc	a0,0x14
    80013a66:	30e50513          	addi	a0,a0,782 # 80027d70 <__func__.0+0x310>
    80013a6a:	28c120ef          	jal	80025cf6 <printf>
    80013a6e:	00035797          	auipc	a5,0x35
    80013a72:	5a37c783          	lbu	a5,1443(a5) # 80049011 <excpt+0x1>
    80013a76:	c799                	beqz	a5,80013a84 <external_interrupt_VSEI+0x228>
    80013a78:	57fd                	li	a5,-1
    80013a7a:	6418                	ld	a4,8(s0)
    80013a7c:	17fe                	slli	a5,a5,0x3f
    80013a7e:	07a9                	addi	a5,a5,10
    80013a80:	44f70063          	beq	a4,a5,80013ec0 <external_interrupt_VSEI+0x664>
    80013a84:	00014517          	auipc	a0,0x14
    80013a88:	2f450513          	addi	a0,a0,756 # 80027d78 <__func__.0+0x318>
    80013a8c:	26a120ef          	jal	80025cf6 <printf>
    80013a90:	02900513          	li	a0,41
    80013a94:	06c110ef          	jal	80024b00 <putchar>
    80013a98:	4529                	li	a0,10
    80013a9a:	066110ef          	jal	80024b00 <putchar>
    80013a9e:	c881                	beqz	s1,80013aae <external_interrupt_VSEI+0x252>
    80013aa0:	00035797          	auipc	a5,0x35
    80013aa4:	5717c783          	lbu	a5,1393(a5) # 80049011 <excpt+0x1>
    80013aa8:	4481                	li	s1,0
    80013aaa:	3c079763          	bnez	a5,80013e78 <external_interrupt_VSEI+0x61c>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=1，hie.SSEIE=0
    TEST_SETUP_EXCEPT();
    80013aae:	0330000f          	fence	rw,rw
    80013ab2:	4785                	li	a5,1
    80013ab4:	00035717          	auipc	a4,0x35
    80013ab8:	58073a23          	sd	zero,1428(a4) # 80049048 <excpt+0x38>
    80013abc:	00f41023          	sh	a5,0(s0)
    80013ac0:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80013ac4:	4511                	li	a0,4
    80013ac6:	930ed0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_HIE,HIE_VSEIE);
    80013aca:	40000793          	li	a5,1024
    80013ace:	6047b073          	csrc	hie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    80013ad2:	577d                	li	a4,-1
    80013ad4:	30373073          	csrc	mideleg,a4
    CSRC(CSR_HIDELEG,(uint64_t)-1);
    80013ad8:	60373073          	csrc	hideleg,a4
    CSRS(CSR_HIP,HIP_VSEIP);
    80013adc:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    80013ae0:	4509                	li	a0,2
    80013ae2:	914ed0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("vs mode leads to no interrupt when hip.vseip=1 and hie.vseie=0",
    80013ae6:	08200593          	li	a1,130
    80013aea:	00018617          	auipc	a2,0x18
    80013aee:	47660613          	addi	a2,a2,1142 # 8002bf60 <__func__.0+0x4500>
    80013af2:	00014517          	auipc	a0,0x14
    80013af6:	26650513          	addi	a0,a0,614 # 80027d58 <__func__.0+0x2f8>
    80013afa:	1fc120ef          	jal	80025cf6 <printf>
    80013afe:	00035797          	auipc	a5,0x35
    80013b02:	5137c783          	lbu	a5,1299(a5) # 80049011 <excpt+0x1>
    80013b06:	00014597          	auipc	a1,0x14
    80013b0a:	22a58593          	addi	a1,a1,554 # 80027d30 <__func__.0+0x2d0>
    80013b0e:	e789                	bnez	a5,80013b18 <external_interrupt_VSEI+0x2bc>
    80013b10:	00014597          	auipc	a1,0x14
    80013b14:	21058593          	addi	a1,a1,528 # 80027d20 <__func__.0+0x2c0>
    80013b18:	00014517          	auipc	a0,0x14
    80013b1c:	25850513          	addi	a0,a0,600 # 80027d70 <__func__.0+0x310>
    80013b20:	1d6120ef          	jal	80025cf6 <printf>
    80013b24:	00035797          	auipc	a5,0x35
    80013b28:	4ed7c783          	lbu	a5,1261(a5) # 80049011 <excpt+0x1>
    80013b2c:	3e079d63          	bnez	a5,80013f26 <external_interrupt_VSEI+0x6ca>
    80013b30:	4529                	li	a0,10
    80013b32:	7cf100ef          	jal	80024b00 <putchar>
    80013b36:	c499                	beqz	s1,80013b44 <external_interrupt_VSEI+0x2e8>
    80013b38:	00035497          	auipc	s1,0x35
    80013b3c:	4d94c483          	lbu	s1,1241(s1) # 80049011 <excpt+0x1>
    80013b40:	0014c493          	xori	s1,s1,1
        excpt.triggered == false
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1
    TEST_SETUP_EXCEPT();
    80013b44:	0330000f          	fence	rw,rw
    80013b48:	4785                	li	a5,1
    80013b4a:	00035717          	auipc	a4,0x35
    80013b4e:	4e073f23          	sd	zero,1278(a4) # 80049048 <excpt+0x38>
    80013b52:	00f41023          	sh	a5,0(s0)
    80013b56:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80013b5a:	4511                	li	a0,4
    80013b5c:	89aed0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80013b60:	40000793          	li	a5,1024
    80013b64:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    80013b68:	6447b073          	csrc	hip,a5

    goto_priv(PRIV_VS);
    80013b6c:	4509                	li	a0,2
    80013b6e:	888ed0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    80013b72:	08200593          	li	a1,130
    80013b76:	00018617          	auipc	a2,0x18
    80013b7a:	42a60613          	addi	a2,a2,1066 # 8002bfa0 <__func__.0+0x4540>
    80013b7e:	00014517          	auipc	a0,0x14
    80013b82:	1da50513          	addi	a0,a0,474 # 80027d58 <__func__.0+0x2f8>
    80013b86:	170120ef          	jal	80025cf6 <printf>
    80013b8a:	00035797          	auipc	a5,0x35
    80013b8e:	4877c783          	lbu	a5,1159(a5) # 80049011 <excpt+0x1>
    80013b92:	00014597          	auipc	a1,0x14
    80013b96:	19e58593          	addi	a1,a1,414 # 80027d30 <__func__.0+0x2d0>
    80013b9a:	e799                	bnez	a5,80013ba8 <external_interrupt_VSEI+0x34c>
    80013b9c:	57fd                	li	a5,-1
    80013b9e:	6418                	ld	a4,8(s0)
    80013ba0:	17fe                	slli	a5,a5,0x3f
    80013ba2:	07a9                	addi	a5,a5,10
    80013ba4:	44f70463          	beq	a4,a5,80013fec <external_interrupt_VSEI+0x790>
    80013ba8:	00014517          	auipc	a0,0x14
    80013bac:	1c850513          	addi	a0,a0,456 # 80027d70 <__func__.0+0x310>
    80013bb0:	146120ef          	jal	80025cf6 <printf>
    80013bb4:	00035797          	auipc	a5,0x35
    80013bb8:	45d7c783          	lbu	a5,1117(a5) # 80049011 <excpt+0x1>
    80013bbc:	e799                	bnez	a5,80013bca <external_interrupt_VSEI+0x36e>
    80013bbe:	57fd                	li	a5,-1
    80013bc0:	6418                	ld	a4,8(s0)
    80013bc2:	17fe                	slli	a5,a5,0x3f
    80013bc4:	07a9                	addi	a5,a5,10
    80013bc6:	30f70d63          	beq	a4,a5,80013ee0 <external_interrupt_VSEI+0x684>
    80013bca:	00014517          	auipc	a0,0x14
    80013bce:	1ae50513          	addi	a0,a0,430 # 80027d78 <__func__.0+0x318>
    80013bd2:	124120ef          	jal	80025cf6 <printf>
    80013bd6:	02900513          	li	a0,41
    80013bda:	727100ef          	jal	80024b00 <putchar>
    80013bde:	4529                	li	a0,10
    80013be0:	721100ef          	jal	80024b00 <putchar>
    80013be4:	c881                	beqz	s1,80013bf4 <external_interrupt_VSEI+0x398>
    80013be6:	00035797          	auipc	a5,0x35
    80013bea:	42b7c783          	lbu	a5,1067(a5) # 80049011 <excpt+0x1>
    80013bee:	4481                	li	s1,0
    80013bf0:	26078663          	beqz	a5,80013e5c <external_interrupt_VSEI+0x600>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1，开mideleg
    TEST_SETUP_EXCEPT();
    80013bf4:	0330000f          	fence	rw,rw
    80013bf8:	4785                	li	a5,1
    80013bfa:	00035717          	auipc	a4,0x35
    80013bfe:	44073723          	sd	zero,1102(a4) # 80049048 <excpt+0x38>
    80013c02:	00f41023          	sh	a5,0(s0)
    80013c06:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80013c0a:	4511                	li	a0,4
    80013c0c:	febec0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80013c10:	40000793          	li	a5,1024
    80013c14:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    80013c18:	6447b073          	csrc	hip,a5
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    80013c1c:	57fd                	li	a5,-1
    80013c1e:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_VS);
    80013c22:	4509                	li	a0,2
    80013c24:	fd3ec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80013c28:	08200593          	li	a1,130
    80013c2c:	00018617          	auipc	a2,0x18
    80013c30:	3c460613          	addi	a2,a2,964 # 8002bff0 <__func__.0+0x4590>
    80013c34:	00014517          	auipc	a0,0x14
    80013c38:	12450513          	addi	a0,a0,292 # 80027d58 <__func__.0+0x2f8>
    80013c3c:	0ba120ef          	jal	80025cf6 <printf>
    80013c40:	00035797          	auipc	a5,0x35
    80013c44:	3d17c783          	lbu	a5,977(a5) # 80049011 <excpt+0x1>
    80013c48:	00014597          	auipc	a1,0x14
    80013c4c:	0e858593          	addi	a1,a1,232 # 80027d30 <__func__.0+0x2d0>
    80013c50:	e799                	bnez	a5,80013c5e <external_interrupt_VSEI+0x402>
    80013c52:	57fd                	li	a5,-1
    80013c54:	6418                	ld	a4,8(s0)
    80013c56:	17fe                	slli	a5,a5,0x3f
    80013c58:	07a9                	addi	a5,a5,10
    80013c5a:	2ef70163          	beq	a4,a5,80013f3c <external_interrupt_VSEI+0x6e0>
    80013c5e:	00014517          	auipc	a0,0x14
    80013c62:	11250513          	addi	a0,a0,274 # 80027d70 <__func__.0+0x310>
    80013c66:	090120ef          	jal	80025cf6 <printf>
    80013c6a:	00035797          	auipc	a5,0x35
    80013c6e:	3a77c783          	lbu	a5,935(a5) # 80049011 <excpt+0x1>
    80013c72:	e799                	bnez	a5,80013c80 <external_interrupt_VSEI+0x424>
    80013c74:	57fd                	li	a5,-1
    80013c76:	6418                	ld	a4,8(s0)
    80013c78:	17fe                	slli	a5,a5,0x3f
    80013c7a:	07a9                	addi	a5,a5,10
    80013c7c:	28f70263          	beq	a4,a5,80013f00 <external_interrupt_VSEI+0x6a4>
    80013c80:	00014517          	auipc	a0,0x14
    80013c84:	0f850513          	addi	a0,a0,248 # 80027d78 <__func__.0+0x318>
    80013c88:	06e120ef          	jal	80025cf6 <printf>
    80013c8c:	02900513          	li	a0,41
    80013c90:	671100ef          	jal	80024b00 <putchar>
    80013c94:	4529                	li	a0,10
    80013c96:	66b100ef          	jal	80024b00 <putchar>
    80013c9a:	c881                	beqz	s1,80013caa <external_interrupt_VSEI+0x44e>
    80013c9c:	00035797          	auipc	a5,0x35
    80013ca0:	3757c783          	lbu	a5,885(a5) # 80049011 <excpt+0x1>
    80013ca4:	4481                	li	s1,0
    80013ca6:	18078d63          	beqz	a5,80013e40 <external_interrupt_VSEI+0x5e4>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1，开mideleg,hideleg
    TEST_SETUP_EXCEPT();
    80013caa:	0330000f          	fence	rw,rw
    80013cae:	4785                	li	a5,1
    80013cb0:	00035717          	auipc	a4,0x35
    80013cb4:	38073c23          	sd	zero,920(a4) # 80049048 <excpt+0x38>
    80013cb8:	00f41023          	sh	a5,0(s0)
    80013cbc:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80013cc0:	4511                	li	a0,4
    80013cc2:	f35ec0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80013cc6:	40000793          	li	a5,1024
    80013cca:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    80013cce:	6447b073          	csrc	hip,a5
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    80013cd2:	57fd                	li	a5,-1
    80013cd4:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    80013cd8:	60379073          	csrw	hideleg,a5

    goto_priv(PRIV_VS);
    80013cdc:	4509                	li	a0,2
    80013cde:	f19ec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    80013ce2:	08200593          	li	a1,130
    80013ce6:	00018617          	auipc	a2,0x18
    80013cea:	36a60613          	addi	a2,a2,874 # 8002c050 <__func__.0+0x45f0>
    80013cee:	00014517          	auipc	a0,0x14
    80013cf2:	06a50513          	addi	a0,a0,106 # 80027d58 <__func__.0+0x2f8>
    80013cf6:	000120ef          	jal	80025cf6 <printf>
    80013cfa:	00035797          	auipc	a5,0x35
    80013cfe:	3177c783          	lbu	a5,791(a5) # 80049011 <excpt+0x1>
    80013d02:	00014597          	auipc	a1,0x14
    80013d06:	02e58593          	addi	a1,a1,46 # 80027d30 <__func__.0+0x2d0>
    80013d0a:	e799                	bnez	a5,80013d18 <external_interrupt_VSEI+0x4bc>
    80013d0c:	57fd                	li	a5,-1
    80013d0e:	6418                	ld	a4,8(s0)
    80013d10:	17fe                	slli	a5,a5,0x3f
    80013d12:	07a9                	addi	a5,a5,10
    80013d14:	2af70c63          	beq	a4,a5,80013fcc <external_interrupt_VSEI+0x770>
    80013d18:	00014517          	auipc	a0,0x14
    80013d1c:	05850513          	addi	a0,a0,88 # 80027d70 <__func__.0+0x310>
    80013d20:	7d7110ef          	jal	80025cf6 <printf>
    80013d24:	00035797          	auipc	a5,0x35
    80013d28:	2ed7c783          	lbu	a5,749(a5) # 80049011 <excpt+0x1>
    80013d2c:	e799                	bnez	a5,80013d3a <external_interrupt_VSEI+0x4de>
    80013d2e:	57fd                	li	a5,-1
    80013d30:	6418                	ld	a4,8(s0)
    80013d32:	17fe                	slli	a5,a5,0x3f
    80013d34:	07a9                	addi	a5,a5,10
    80013d36:	1af70d63          	beq	a4,a5,80013ef0 <external_interrupt_VSEI+0x694>
    80013d3a:	00014517          	auipc	a0,0x14
    80013d3e:	03e50513          	addi	a0,a0,62 # 80027d78 <__func__.0+0x318>
    80013d42:	7b5110ef          	jal	80025cf6 <printf>
    80013d46:	02900513          	li	a0,41
    80013d4a:	5b7100ef          	jal	80024b00 <putchar>
    80013d4e:	4529                	li	a0,10
    80013d50:	5b1100ef          	jal	80024b00 <putchar>
    80013d54:	c499                	beqz	s1,80013d62 <external_interrupt_VSEI+0x506>
    80013d56:	00035797          	auipc	a5,0x35
    80013d5a:	2bb7c783          	lbu	a5,699(a5) # 80049011 <excpt+0x1>
    80013d5e:	4481                	li	s1,0
    80013d60:	c3f1                	beqz	a5,80013e24 <external_interrupt_VSEI+0x5c8>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=0
    TEST_SETUP_EXCEPT();
    80013d62:	0330000f          	fence	rw,rw
    80013d66:	4785                	li	a5,1
    80013d68:	00035717          	auipc	a4,0x35
    80013d6c:	2e073023          	sd	zero,736(a4) # 80049048 <excpt+0x38>
    80013d70:	00f41023          	sh	a5,0(s0)
    80013d74:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80013d78:	4511                	li	a0,4
    80013d7a:	e7dec0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_HIE,HIE_VSEIE);
    80013d7e:	40000793          	li	a5,1024
    80013d82:	6047b073          	csrc	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    80013d86:	6447b073          	csrc	hip,a5

    goto_priv(PRIV_VS);
    80013d8a:	4509                	li	a0,2
    80013d8c:	e6bec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    80013d90:	08200593          	li	a1,130
    80013d94:	00018617          	auipc	a2,0x18
    80013d98:	32c60613          	addi	a2,a2,812 # 8002c0c0 <__func__.0+0x4660>
    80013d9c:	00014517          	auipc	a0,0x14
    80013da0:	fbc50513          	addi	a0,a0,-68 # 80027d58 <__func__.0+0x2f8>
    80013da4:	753110ef          	jal	80025cf6 <printf>
    80013da8:	00035797          	auipc	a5,0x35
    80013dac:	2697c783          	lbu	a5,617(a5) # 80049011 <excpt+0x1>
    80013db0:	00014597          	auipc	a1,0x14
    80013db4:	f8058593          	addi	a1,a1,-128 # 80027d30 <__func__.0+0x2d0>
    80013db8:	e789                	bnez	a5,80013dc2 <external_interrupt_VSEI+0x566>
    80013dba:	00014597          	auipc	a1,0x14
    80013dbe:	f6658593          	addi	a1,a1,-154 # 80027d20 <__func__.0+0x2c0>
    80013dc2:	00014517          	auipc	a0,0x14
    80013dc6:	fae50513          	addi	a0,a0,-82 # 80027d70 <__func__.0+0x310>
    80013dca:	72d110ef          	jal	80025cf6 <printf>
    80013dce:	00035797          	auipc	a5,0x35
    80013dd2:	2437c783          	lbu	a5,579(a5) # 80049011 <excpt+0x1>
    80013dd6:	12079d63          	bnez	a5,80013f10 <external_interrupt_VSEI+0x6b4>
    80013dda:	4529                	li	a0,10
    80013ddc:	525100ef          	jal	80024b00 <putchar>
    80013de0:	c491                	beqz	s1,80013dec <external_interrupt_VSEI+0x590>
    80013de2:	00035797          	auipc	a5,0x35
    80013de6:	22f7c783          	lbu	a5,559(a5) # 80049011 <excpt+0x1>
    80013dea:	c79d                	beqz	a5,80013e18 <external_interrupt_VSEI+0x5bc>
    80013dec:	4401                	li	s0,0





    TEST_END();
    80013dee:	00014597          	auipc	a1,0x14
    80013df2:	f4258593          	addi	a1,a1,-190 # 80027d30 <__func__.0+0x2d0>
    80013df6:	00014517          	auipc	a0,0x14
    80013dfa:	fe250513          	addi	a0,a0,-30 # 80027dd8 <__func__.0+0x378>
    80013dfe:	6f9110ef          	jal	80025cf6 <printf>
    80013e02:	4511                	li	a0,4
    80013e04:	df3ec0ef          	jal	80000bf6 <goto_priv>
    80013e08:	ea4ed0ef          	jal	800014ac <reset_state>
}
    80013e0c:	60e2                	ld	ra,24(sp)
    80013e0e:	8522                	mv	a0,s0
    80013e10:	6442                	ld	s0,16(sp)
    80013e12:	64a2                	ld	s1,8(sp)
    80013e14:	6105                	addi	sp,sp,32
    80013e16:	8082                	ret
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    80013e18:	4405                	li	s0,1
    TEST_END();
    80013e1a:	00014597          	auipc	a1,0x14
    80013e1e:	f0658593          	addi	a1,a1,-250 # 80027d20 <__func__.0+0x2c0>
    80013e22:	bfd1                	j	80013df6 <external_interrupt_VSEI+0x59a>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    80013e24:	57fd                	li	a5,-1
    80013e26:	6418                	ld	a4,8(s0)
    80013e28:	17fe                	slli	a5,a5,0x3f
    80013e2a:	07a9                	addi	a5,a5,10
    80013e2c:	f2f71be3          	bne	a4,a5,80013d62 <external_interrupt_VSEI+0x506>
    80013e30:	00035497          	auipc	s1,0x35
    80013e34:	1e44a483          	lw	s1,484(s1) # 80049014 <excpt+0x4>
    80013e38:	14f9                	addi	s1,s1,-2
    80013e3a:	0014b493          	seqz	s1,s1
    80013e3e:	b715                	j	80013d62 <external_interrupt_VSEI+0x506>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80013e40:	57fd                	li	a5,-1
    80013e42:	6418                	ld	a4,8(s0)
    80013e44:	17fe                	slli	a5,a5,0x3f
    80013e46:	07a9                	addi	a5,a5,10
    80013e48:	e6f711e3          	bne	a4,a5,80013caa <external_interrupt_VSEI+0x44e>
    80013e4c:	00035497          	auipc	s1,0x35
    80013e50:	1c84a483          	lw	s1,456(s1) # 80049014 <excpt+0x4>
    80013e54:	14f5                	addi	s1,s1,-3
    80013e56:	0014b493          	seqz	s1,s1
    80013e5a:	bd81                	j	80013caa <external_interrupt_VSEI+0x44e>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    80013e5c:	57fd                	li	a5,-1
    80013e5e:	6418                	ld	a4,8(s0)
    80013e60:	17fe                	slli	a5,a5,0x3f
    80013e62:	07a9                	addi	a5,a5,10
    80013e64:	d8f718e3          	bne	a4,a5,80013bf4 <external_interrupt_VSEI+0x398>
    80013e68:	00035497          	auipc	s1,0x35
    80013e6c:	1ac4a483          	lw	s1,428(s1) # 80049014 <excpt+0x4>
    80013e70:	14f1                	addi	s1,s1,-4
    80013e72:	0014b493          	seqz	s1,s1
    80013e76:	bbbd                	j	80013bf4 <external_interrupt_VSEI+0x398>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    80013e78:	57fd                	li	a5,-1
    80013e7a:	6418                	ld	a4,8(s0)
    80013e7c:	17fe                	slli	a5,a5,0x3f
    80013e7e:	07a9                	addi	a5,a5,10
    80013e80:	c2f717e3          	bne	a4,a5,80013aae <external_interrupt_VSEI+0x252>
    80013e84:	00035497          	auipc	s1,0x35
    80013e88:	1904a483          	lw	s1,400(s1) # 80049014 <excpt+0x4>
    80013e8c:	14f9                	addi	s1,s1,-2
    80013e8e:	0014b493          	seqz	s1,s1
    80013e92:	b931                	j	80013aae <external_interrupt_VSEI+0x252>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    80013e94:	57fd                	li	a5,-1
    80013e96:	6418                	ld	a4,8(s0)
    80013e98:	17fe                	slli	a5,a5,0x3f
    80013e9a:	07a9                	addi	a5,a5,10
    80013e9c:	b4f71ce3          	bne	a4,a5,800139f4 <external_interrupt_VSEI+0x198>
    80013ea0:	00035497          	auipc	s1,0x35
    80013ea4:	1744a483          	lw	s1,372(s1) # 80049014 <excpt+0x4>
    80013ea8:	14f5                	addi	s1,s1,-3
    80013eaa:	0014b493          	seqz	s1,s1
    80013eae:	b699                	j	800139f4 <external_interrupt_VSEI+0x198>
    80013eb0:	00035717          	auipc	a4,0x35
    80013eb4:	16472703          	lw	a4,356(a4) # 80049014 <excpt+0x4>
    80013eb8:	478d                	li	a5,3
    80013eba:	b0f718e3          	bne	a4,a5,800139ca <external_interrupt_VSEI+0x16e>
    80013ebe:	b605                	j	800139de <external_interrupt_VSEI+0x182>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    80013ec0:	00035717          	auipc	a4,0x35
    80013ec4:	15472703          	lw	a4,340(a4) # 80049014 <excpt+0x4>
    80013ec8:	4789                	li	a5,2
    80013eca:	baf71de3          	bne	a4,a5,80013a84 <external_interrupt_VSEI+0x228>
    80013ece:	b6e9                	j	80013a98 <external_interrupt_VSEI+0x23c>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    80013ed0:	00035717          	auipc	a4,0x35
    80013ed4:	14472703          	lw	a4,324(a4) # 80049014 <excpt+0x4>
    80013ed8:	4791                	li	a5,4
    80013eda:	a2f719e3          	bne	a4,a5,8001390c <external_interrupt_VSEI+0xb0>
    80013ede:	b489                	j	80013920 <external_interrupt_VSEI+0xc4>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    80013ee0:	00035717          	auipc	a4,0x35
    80013ee4:	13472703          	lw	a4,308(a4) # 80049014 <excpt+0x4>
    80013ee8:	4791                	li	a5,4
    80013eea:	cef710e3          	bne	a4,a5,80013bca <external_interrupt_VSEI+0x36e>
    80013eee:	b9c5                	j	80013bde <external_interrupt_VSEI+0x382>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    80013ef0:	00035717          	auipc	a4,0x35
    80013ef4:	12472703          	lw	a4,292(a4) # 80049014 <excpt+0x4>
    80013ef8:	4789                	li	a5,2
    80013efa:	e4f710e3          	bne	a4,a5,80013d3a <external_interrupt_VSEI+0x4de>
    80013efe:	bd81                	j	80013d4e <external_interrupt_VSEI+0x4f2>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80013f00:	00035717          	auipc	a4,0x35
    80013f04:	11472703          	lw	a4,276(a4) # 80049014 <excpt+0x4>
    80013f08:	478d                	li	a5,3
    80013f0a:	d6f71be3          	bne	a4,a5,80013c80 <external_interrupt_VSEI+0x424>
    80013f0e:	b359                	j	80013c94 <external_interrupt_VSEI+0x438>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    80013f10:	00014517          	auipc	a0,0x14
    80013f14:	e6850513          	addi	a0,a0,-408 # 80027d78 <__func__.0+0x318>
    80013f18:	5df110ef          	jal	80025cf6 <printf>
    80013f1c:	02900513          	li	a0,41
    80013f20:	3e1100ef          	jal	80024b00 <putchar>
    80013f24:	bd5d                	j	80013dda <external_interrupt_VSEI+0x57e>
    TEST_ASSERT("vs mode leads to no interrupt when hip.vseip=1 and hie.vseie=0",
    80013f26:	00014517          	auipc	a0,0x14
    80013f2a:	e5250513          	addi	a0,a0,-430 # 80027d78 <__func__.0+0x318>
    80013f2e:	5c9110ef          	jal	80025cf6 <printf>
    80013f32:	02900513          	li	a0,41
    80013f36:	3cb100ef          	jal	80024b00 <putchar>
    80013f3a:	bedd                	j	80013b30 <external_interrupt_VSEI+0x2d4>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80013f3c:	00035717          	auipc	a4,0x35
    80013f40:	0d872703          	lw	a4,216(a4) # 80049014 <excpt+0x4>
    80013f44:	478d                	li	a5,3
    80013f46:	00014597          	auipc	a1,0x14
    80013f4a:	dda58593          	addi	a1,a1,-550 # 80027d20 <__func__.0+0x2c0>
    80013f4e:	d0f708e3          	beq	a4,a5,80013c5e <external_interrupt_VSEI+0x402>
    80013f52:	00014597          	auipc	a1,0x14
    80013f56:	dde58593          	addi	a1,a1,-546 # 80027d30 <__func__.0+0x2d0>
    80013f5a:	b311                	j	80013c5e <external_interrupt_VSEI+0x402>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    80013f5c:	00035497          	auipc	s1,0x35
    80013f60:	0b84a483          	lw	s1,184(s1) # 80049014 <excpt+0x4>
    80013f64:	14f1                	addi	s1,s1,-4
    80013f66:	0014b493          	seqz	s1,s1
    80013f6a:	bad1                	j	8001393e <external_interrupt_VSEI+0xe2>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    80013f6c:	00035717          	auipc	a4,0x35
    80013f70:	0a872703          	lw	a4,168(a4) # 80049014 <excpt+0x4>
    80013f74:	478d                	li	a5,3
    80013f76:	00014597          	auipc	a1,0x14
    80013f7a:	daa58593          	addi	a1,a1,-598 # 80027d20 <__func__.0+0x2c0>
    80013f7e:	a2f705e3          	beq	a4,a5,800139a8 <external_interrupt_VSEI+0x14c>
    80013f82:	00014597          	auipc	a1,0x14
    80013f86:	dae58593          	addi	a1,a1,-594 # 80027d30 <__func__.0+0x2d0>
    80013f8a:	bc39                	j	800139a8 <external_interrupt_VSEI+0x14c>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    80013f8c:	00035717          	auipc	a4,0x35
    80013f90:	08872703          	lw	a4,136(a4) # 80049014 <excpt+0x4>
    80013f94:	4791                	li	a5,4
    80013f96:	00014597          	auipc	a1,0x14
    80013f9a:	d8a58593          	addi	a1,a1,-630 # 80027d20 <__func__.0+0x2c0>
    80013f9e:	94f706e3          	beq	a4,a5,800138ea <external_interrupt_VSEI+0x8e>
    80013fa2:	00014597          	auipc	a1,0x14
    80013fa6:	d8e58593          	addi	a1,a1,-626 # 80027d30 <__func__.0+0x2d0>
    80013faa:	b281                	j	800138ea <external_interrupt_VSEI+0x8e>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    80013fac:	00035717          	auipc	a4,0x35
    80013fb0:	06872703          	lw	a4,104(a4) # 80049014 <excpt+0x4>
    80013fb4:	4789                	li	a5,2
    80013fb6:	00014597          	auipc	a1,0x14
    80013fba:	d6a58593          	addi	a1,a1,-662 # 80027d20 <__func__.0+0x2c0>
    80013fbe:	aaf702e3          	beq	a4,a5,80013a62 <external_interrupt_VSEI+0x206>
    80013fc2:	00014597          	auipc	a1,0x14
    80013fc6:	d6e58593          	addi	a1,a1,-658 # 80027d30 <__func__.0+0x2d0>
    80013fca:	bc61                	j	80013a62 <external_interrupt_VSEI+0x206>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    80013fcc:	00035717          	auipc	a4,0x35
    80013fd0:	04872703          	lw	a4,72(a4) # 80049014 <excpt+0x4>
    80013fd4:	4789                	li	a5,2
    80013fd6:	00014597          	auipc	a1,0x14
    80013fda:	d4a58593          	addi	a1,a1,-694 # 80027d20 <__func__.0+0x2c0>
    80013fde:	d2f70de3          	beq	a4,a5,80013d18 <external_interrupt_VSEI+0x4bc>
    80013fe2:	00014597          	auipc	a1,0x14
    80013fe6:	d4e58593          	addi	a1,a1,-690 # 80027d30 <__func__.0+0x2d0>
    80013fea:	b33d                	j	80013d18 <external_interrupt_VSEI+0x4bc>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    80013fec:	00035717          	auipc	a4,0x35
    80013ff0:	02872703          	lw	a4,40(a4) # 80049014 <excpt+0x4>
    80013ff4:	4791                	li	a5,4
    80013ff6:	00014597          	auipc	a1,0x14
    80013ffa:	d2a58593          	addi	a1,a1,-726 # 80027d20 <__func__.0+0x2c0>
    80013ffe:	baf705e3          	beq	a4,a5,80013ba8 <external_interrupt_VSEI+0x34c>
    80014002:	00014597          	auipc	a1,0x14
    80014006:	d2e58593          	addi	a1,a1,-722 # 80027d30 <__func__.0+0x2d0>
    8001400a:	be79                	j	80013ba8 <external_interrupt_VSEI+0x34c>

000000008001400c <software_interrupt_msi>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool software_interrupt_msi() {
    8001400c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001400e:	00013597          	auipc	a1,0x13
    80014012:	ad258593          	addi	a1,a1,-1326 # 80026ae0 <__func__.2>
    80014016:	00014517          	auipc	a0,0x14
    8001401a:	d2a50513          	addi	a0,a0,-726 # 80027d40 <__func__.0+0x2e0>
bool software_interrupt_msi() {
    8001401e:	ec06                	sd	ra,24(sp)
    80014020:	e822                	sd	s0,16(sp)
    80014022:	e426                	sd	s1,8(sp)
    TEST_START();
    80014024:	4d3110ef          	jal	80025cf6 <printf>
    80014028:	4529                	li	a0,10
    8001402a:	2d7100ef          	jal	80024b00 <putchar>

    TEST_SETUP_EXCEPT();
    8001402e:	0330000f          	fence	rw,rw
    80014032:	00035497          	auipc	s1,0x35
    80014036:	fde48493          	addi	s1,s1,-34 # 80049010 <excpt>
    8001403a:	4785                	li	a5,1
    8001403c:	00035717          	auipc	a4,0x35
    80014040:	00073623          	sd	zero,12(a4) # 80049048 <excpt+0x38>
    80014044:	00f49023          	sh	a5,0(s1)
    80014048:	0330000f          	fence	rw,rw

   
    //M模式下产生软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高
    goto_priv(PRIV_M);
    8001404c:	4511                	li	a0,4
    8001404e:	ba9ec0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    80014052:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80014056:	30446073          	csrsi	mie,8
    CSRW(CSR_MIDELEG,0);
    8001405a:	30305073          	csrwi	mideleg,0
    CSRS(CSR_MIP,MIP_MSIP);     //read-only
    8001405e:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    80014062:	4511                	li	a0,4
    80014064:	b93ec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80014068:	08200593          	li	a1,130
    8001406c:	00018617          	auipc	a2,0x18
    80014070:	0a460613          	addi	a2,a2,164 # 8002c110 <__func__.0+0x46b0>
    80014074:	00014517          	auipc	a0,0x14
    80014078:	ce450513          	addi	a0,a0,-796 # 80027d58 <__func__.0+0x2f8>
    8001407c:	47b110ef          	jal	80025cf6 <printf>
    80014080:	00035797          	auipc	a5,0x35
    80014084:	f917c783          	lbu	a5,-111(a5) # 80049011 <excpt+0x1>
    80014088:	00014597          	auipc	a1,0x14
    8001408c:	ca858593          	addi	a1,a1,-856 # 80027d30 <__func__.0+0x2d0>
    80014090:	cb89                	beqz	a5,800140a2 <software_interrupt_msi+0x96>
    80014092:	57fd                	li	a5,-1
    80014094:	6498                	ld	a4,8(s1)
    80014096:	17fe                	slli	a5,a5,0x3f
    80014098:	0789                	addi	a5,a5,2
    8001409a:	00f71463          	bne	a4,a5,800140a2 <software_interrupt_msi+0x96>
    8001409e:	61b0006f          	j	80014eb8 <software_interrupt_msi+0xeac>
    800140a2:	00014517          	auipc	a0,0x14
    800140a6:	cce50513          	addi	a0,a0,-818 # 80027d70 <__func__.0+0x310>
    800140aa:	44d110ef          	jal	80025cf6 <printf>
    800140ae:	00035797          	auipc	a5,0x35
    800140b2:	f637c783          	lbu	a5,-157(a5) # 80049011 <excpt+0x1>
    800140b6:	c799                	beqz	a5,800140c4 <software_interrupt_msi+0xb8>
    800140b8:	57fd                	li	a5,-1
    800140ba:	6498                	ld	a4,8(s1)
    800140bc:	17fe                	slli	a5,a5,0x3f
    800140be:	0789                	addi	a5,a5,2
    800140c0:	46f70be3          	beq	a4,a5,80014d36 <software_interrupt_msi+0xd2a>
    800140c4:	00014517          	auipc	a0,0x14
    800140c8:	cb450513          	addi	a0,a0,-844 # 80027d78 <__func__.0+0x318>
    800140cc:	42b110ef          	jal	80025cf6 <printf>
    800140d0:	02900513          	li	a0,41
    800140d4:	22d100ef          	jal	80024b00 <putchar>
    800140d8:	4529                	li	a0,10
    800140da:	227100ef          	jal	80024b00 <putchar>
    800140de:	00035797          	auipc	a5,0x35
    800140e2:	f337c783          	lbu	a5,-205(a5) # 80049011 <excpt+0x1>
    800140e6:	4401                	li	s0,0
    800140e8:	cb89                	beqz	a5,800140fa <software_interrupt_msi+0xee>
    800140ea:	57fd                	li	a5,-1
    800140ec:	6498                	ld	a4,8(s1)
    800140ee:	17fe                	slli	a5,a5,0x3f
    800140f0:	0789                	addi	a5,a5,2
    800140f2:	00f71463          	bne	a4,a5,800140fa <software_interrupt_msi+0xee>
    800140f6:	6af0006f          	j	80014fa4 <software_interrupt_msi+0xf98>
        excpt.priv == PRIV_M
    ); 


    //M模式下产生软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    800140fa:	0330000f          	fence	rw,rw
    800140fe:	4785                	li	a5,1
    80014100:	00035717          	auipc	a4,0x35
    80014104:	f4073423          	sd	zero,-184(a4) # 80049048 <excpt+0x38>
    80014108:	00f49023          	sh	a5,0(s1)
    8001410c:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80014110:	4511                	li	a0,4
    80014112:	ae5ec0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80014116:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    8001411a:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8001411e:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    80014122:	4511                	li	a0,4
    80014124:	ad3ec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("m mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0",
    80014128:	08200593          	li	a1,130
    8001412c:	00018617          	auipc	a2,0x18
    80014130:	04460613          	addi	a2,a2,68 # 8002c170 <__func__.0+0x4710>
    80014134:	00014517          	auipc	a0,0x14
    80014138:	c2450513          	addi	a0,a0,-988 # 80027d58 <__func__.0+0x2f8>
    8001413c:	3bb110ef          	jal	80025cf6 <printf>
    80014140:	00035797          	auipc	a5,0x35
    80014144:	ed17c783          	lbu	a5,-303(a5) # 80049011 <excpt+0x1>
    80014148:	00014597          	auipc	a1,0x14
    8001414c:	be858593          	addi	a1,a1,-1048 # 80027d30 <__func__.0+0x2d0>
    80014150:	e789                	bnez	a5,8001415a <software_interrupt_msi+0x14e>
    80014152:	00014597          	auipc	a1,0x14
    80014156:	bce58593          	addi	a1,a1,-1074 # 80027d20 <__func__.0+0x2c0>
    8001415a:	00014517          	auipc	a0,0x14
    8001415e:	c1650513          	addi	a0,a0,-1002 # 80027d70 <__func__.0+0x310>
    80014162:	395110ef          	jal	80025cf6 <printf>
    80014166:	00035797          	auipc	a5,0x35
    8001416a:	eab7c783          	lbu	a5,-341(a5) # 80049011 <excpt+0x1>
    8001416e:	440797e3          	bnez	a5,80014dbc <software_interrupt_msi+0xdb0>
    80014172:	4529                	li	a0,10
    80014174:	18d100ef          	jal	80024b00 <putchar>
    80014178:	c419                	beqz	s0,80014186 <software_interrupt_msi+0x17a>
    8001417a:	00035417          	auipc	s0,0x35
    8001417e:	e9744403          	lbu	s0,-361(s0) # 80049011 <excpt+0x1>
    80014182:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    //M模式下产生软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1
    TEST_SETUP_EXCEPT();
    80014186:	0330000f          	fence	rw,rw
    8001418a:	4785                	li	a5,1
    8001418c:	00035717          	auipc	a4,0x35
    80014190:	ea073e23          	sd	zero,-324(a4) # 80049048 <excpt+0x38>
    80014194:	00f49023          	sh	a5,0(s1)
    80014198:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001419c:	4511                	li	a0,4
    8001419e:	a59ec0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    800141a2:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    800141a6:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    800141aa:	34447073          	csrci	mip,8

    goto_priv(PRIV_M);
    800141ae:	4511                	li	a0,4
    800141b0:	a47ec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1",
    800141b4:	08200593          	li	a1,130
    800141b8:	00018617          	auipc	a2,0x18
    800141bc:	01060613          	addi	a2,a2,16 # 8002c1c8 <__func__.0+0x4768>
    800141c0:	00014517          	auipc	a0,0x14
    800141c4:	b9850513          	addi	a0,a0,-1128 # 80027d58 <__func__.0+0x2f8>
    800141c8:	32f110ef          	jal	80025cf6 <printf>
    800141cc:	00035797          	auipc	a5,0x35
    800141d0:	e457c783          	lbu	a5,-443(a5) # 80049011 <excpt+0x1>
    800141d4:	00014597          	auipc	a1,0x14
    800141d8:	b5c58593          	addi	a1,a1,-1188 # 80027d30 <__func__.0+0x2d0>
    800141dc:	cf99                	beqz	a5,800141fa <software_interrupt_msi+0x1ee>
    800141de:	57fd                	li	a5,-1
    800141e0:	6498                	ld	a4,8(s1)
    800141e2:	17fe                	slli	a5,a5,0x3f
    800141e4:	0789                	addi	a5,a5,2
    800141e6:	00014597          	auipc	a1,0x14
    800141ea:	b3a58593          	addi	a1,a1,-1222 # 80027d20 <__func__.0+0x2c0>
    800141ee:	00f70663          	beq	a4,a5,800141fa <software_interrupt_msi+0x1ee>
    800141f2:	00014597          	auipc	a1,0x14
    800141f6:	b3e58593          	addi	a1,a1,-1218 # 80027d30 <__func__.0+0x2d0>
    800141fa:	00014517          	auipc	a0,0x14
    800141fe:	b7650513          	addi	a0,a0,-1162 # 80027d70 <__func__.0+0x310>
    80014202:	2f5110ef          	jal	80025cf6 <printf>
    80014206:	00035797          	auipc	a5,0x35
    8001420a:	e0b7c783          	lbu	a5,-501(a5) # 80049011 <excpt+0x1>
    8001420e:	c799                	beqz	a5,8001421c <software_interrupt_msi+0x210>
    80014210:	57fd                	li	a5,-1
    80014212:	6498                	ld	a4,8(s1)
    80014214:	17fe                	slli	a5,a5,0x3f
    80014216:	0789                	addi	a5,a5,2
    80014218:	00f70c63          	beq	a4,a5,80014230 <software_interrupt_msi+0x224>
    8001421c:	00014517          	auipc	a0,0x14
    80014220:	b5c50513          	addi	a0,a0,-1188 # 80027d78 <__func__.0+0x318>
    80014224:	2d3110ef          	jal	80025cf6 <printf>
    80014228:	02900513          	li	a0,41
    8001422c:	0d5100ef          	jal	80024b00 <putchar>
    80014230:	4529                	li	a0,10
    80014232:	0cf100ef          	jal	80024b00 <putchar>
    80014236:	c801                	beqz	s0,80014246 <software_interrupt_msi+0x23a>
    80014238:	00035797          	auipc	a5,0x35
    8001423c:	dd97c783          	lbu	a5,-551(a5) # 80049011 <excpt+0x1>
    80014240:	4401                	li	s0,0
    80014242:	2c079ae3          	bnez	a5,80014d16 <software_interrupt_msi+0xd0a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_MSI
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=1，mie.MSIE=1
    TEST_SETUP_EXCEPT();
    80014246:	0330000f          	fence	rw,rw
    8001424a:	4785                	li	a5,1
    8001424c:	00035717          	auipc	a4,0x35
    80014250:	de073e23          	sd	zero,-516(a4) # 80049048 <excpt+0x38>
    80014254:	00f49023          	sh	a5,0(s1)
    80014258:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001425c:	4511                	li	a0,4
    8001425e:	999ec0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    80014262:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80014266:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8001426a:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    8001426e:	4511                	li	a0,4
    80014270:	987ec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=1",
    80014274:	08200593          	li	a1,130
    80014278:	00018617          	auipc	a2,0x18
    8001427c:	fb060613          	addi	a2,a2,-80 # 8002c228 <__func__.0+0x47c8>
    80014280:	00014517          	auipc	a0,0x14
    80014284:	ad850513          	addi	a0,a0,-1320 # 80027d58 <__func__.0+0x2f8>
    80014288:	26f110ef          	jal	80025cf6 <printf>
    8001428c:	00035797          	auipc	a5,0x35
    80014290:	d857c783          	lbu	a5,-635(a5) # 80049011 <excpt+0x1>
    80014294:	00014597          	auipc	a1,0x14
    80014298:	a9c58593          	addi	a1,a1,-1380 # 80027d30 <__func__.0+0x2d0>
    8001429c:	e789                	bnez	a5,800142a6 <software_interrupt_msi+0x29a>
    8001429e:	00014597          	auipc	a1,0x14
    800142a2:	a8258593          	addi	a1,a1,-1406 # 80027d20 <__func__.0+0x2c0>
    800142a6:	00014517          	auipc	a0,0x14
    800142aa:	aca50513          	addi	a0,a0,-1334 # 80027d70 <__func__.0+0x310>
    800142ae:	249110ef          	jal	80025cf6 <printf>
    800142b2:	00035797          	auipc	a5,0x35
    800142b6:	d5f7c783          	lbu	a5,-673(a5) # 80049011 <excpt+0x1>
    800142ba:	320798e3          	bnez	a5,80014dea <software_interrupt_msi+0xdde>
    800142be:	4529                	li	a0,10
    800142c0:	041100ef          	jal	80024b00 <putchar>
    800142c4:	c419                	beqz	s0,800142d2 <software_interrupt_msi+0x2c6>
    800142c6:	00035417          	auipc	s0,0x35
    800142ca:	d4b44403          	lbu	s0,-693(s0) # 80049011 <excpt+0x1>
    800142ce:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=1，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    800142d2:	0330000f          	fence	rw,rw
    800142d6:	4785                	li	a5,1
    800142d8:	00035717          	auipc	a4,0x35
    800142dc:	d6073823          	sd	zero,-656(a4) # 80049048 <excpt+0x38>
    800142e0:	00f49023          	sh	a5,0(s1)
    800142e4:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800142e8:	4511                	li	a0,4
    800142ea:	90dec0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    800142ee:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    800142f2:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    800142f6:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    800142fa:	4511                	li	a0,4
    800142fc:	8fbec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=0",
    80014300:	08200593          	li	a1,130
    80014304:	00018617          	auipc	a2,0x18
    80014308:	f7460613          	addi	a2,a2,-140 # 8002c278 <__func__.0+0x4818>
    8001430c:	00014517          	auipc	a0,0x14
    80014310:	a4c50513          	addi	a0,a0,-1460 # 80027d58 <__func__.0+0x2f8>
    80014314:	1e3110ef          	jal	80025cf6 <printf>
    80014318:	00035797          	auipc	a5,0x35
    8001431c:	cf97c783          	lbu	a5,-775(a5) # 80049011 <excpt+0x1>
    80014320:	00014597          	auipc	a1,0x14
    80014324:	a1058593          	addi	a1,a1,-1520 # 80027d30 <__func__.0+0x2d0>
    80014328:	e789                	bnez	a5,80014332 <software_interrupt_msi+0x326>
    8001432a:	00014597          	auipc	a1,0x14
    8001432e:	9f658593          	addi	a1,a1,-1546 # 80027d20 <__func__.0+0x2c0>
    80014332:	00014517          	auipc	a0,0x14
    80014336:	a3e50513          	addi	a0,a0,-1474 # 80027d70 <__func__.0+0x310>
    8001433a:	1bd110ef          	jal	80025cf6 <printf>
    8001433e:	00035797          	auipc	a5,0x35
    80014342:	cd37c783          	lbu	a5,-813(a5) # 80049011 <excpt+0x1>
    80014346:	30079ce3          	bnez	a5,80014e5e <software_interrupt_msi+0xe52>
    8001434a:	4529                	li	a0,10
    8001434c:	7b4100ef          	jal	80024b00 <putchar>
    80014350:	c419                	beqz	s0,8001435e <software_interrupt_msi+0x352>
    80014352:	00035417          	auipc	s0,0x35
    80014356:	cbf44403          	lbu	s0,-833(s0) # 80049011 <excpt+0x1>
    8001435a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=0，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    8001435e:	0330000f          	fence	rw,rw
    80014362:	4785                	li	a5,1
    80014364:	00035717          	auipc	a4,0x35
    80014368:	ce073223          	sd	zero,-796(a4) # 80049048 <excpt+0x38>
    8001436c:	00f49023          	sh	a5,0(s1)
    80014370:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80014374:	4511                	li	a0,4
    80014376:	881ec0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    8001437a:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    8001437e:	30447073          	csrci	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80014382:	34447073          	csrci	mip,8

    goto_priv(PRIV_M);
    80014386:	4511                	li	a0,4
    80014388:	86fec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0",
    8001438c:	08200593          	li	a1,130
    80014390:	00018617          	auipc	a2,0x18
    80014394:	f3860613          	addi	a2,a2,-200 # 8002c2c8 <__func__.0+0x4868>
    80014398:	00014517          	auipc	a0,0x14
    8001439c:	9c050513          	addi	a0,a0,-1600 # 80027d58 <__func__.0+0x2f8>
    800143a0:	157110ef          	jal	80025cf6 <printf>
    800143a4:	00035797          	auipc	a5,0x35
    800143a8:	c6d7c783          	lbu	a5,-915(a5) # 80049011 <excpt+0x1>
    800143ac:	00014597          	auipc	a1,0x14
    800143b0:	98458593          	addi	a1,a1,-1660 # 80027d30 <__func__.0+0x2d0>
    800143b4:	e789                	bnez	a5,800143be <software_interrupt_msi+0x3b2>
    800143b6:	00014597          	auipc	a1,0x14
    800143ba:	96a58593          	addi	a1,a1,-1686 # 80027d20 <__func__.0+0x2c0>
    800143be:	00014517          	auipc	a0,0x14
    800143c2:	9b250513          	addi	a0,a0,-1614 # 80027d70 <__func__.0+0x310>
    800143c6:	131110ef          	jal	80025cf6 <printf>
    800143ca:	00035797          	auipc	a5,0x35
    800143ce:	c477c783          	lbu	a5,-953(a5) # 80049011 <excpt+0x1>
    800143d2:	26079ae3          	bnez	a5,80014e46 <software_interrupt_msi+0xe3a>
    800143d6:	4529                	li	a0,10
    800143d8:	728100ef          	jal	80024b00 <putchar>
    800143dc:	c419                	beqz	s0,800143ea <software_interrupt_msi+0x3de>
    800143de:	00035417          	auipc	s0,0x35
    800143e2:	c3344403          	lbu	s0,-973(s0) # 80049011 <excpt+0x1>
    800143e6:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

//HS mode 下

    TEST_SETUP_EXCEPT();
    800143ea:	0330000f          	fence	rw,rw
    800143ee:	4785                	li	a5,1
    800143f0:	00035717          	auipc	a4,0x35
    800143f4:	c4073c23          	sd	zero,-936(a4) # 80049048 <excpt+0x38>
    800143f8:	00f49023          	sh	a5,0(s1)
    800143fc:	0330000f          	fence	rw,rw
    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，无代理
    goto_priv(PRIV_M);
    80014400:	4511                	li	a0,4
    80014402:	ff4ec0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    80014406:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8001440a:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8001440e:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    80014412:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80014416:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    8001441a:	450d                	li	a0,3
    8001441c:	fdaec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80014420:	08200593          	li	a1,130
    80014424:	00018617          	auipc	a2,0x18
    80014428:	ef460613          	addi	a2,a2,-268 # 8002c318 <__func__.0+0x48b8>
    8001442c:	00014517          	auipc	a0,0x14
    80014430:	92c50513          	addi	a0,a0,-1748 # 80027d58 <__func__.0+0x2f8>
    80014434:	0c3110ef          	jal	80025cf6 <printf>
    80014438:	00035797          	auipc	a5,0x35
    8001443c:	bd97c783          	lbu	a5,-1063(a5) # 80049011 <excpt+0x1>
    80014440:	00014597          	auipc	a1,0x14
    80014444:	8f058593          	addi	a1,a1,-1808 # 80027d30 <__func__.0+0x2d0>
    80014448:	c799                	beqz	a5,80014456 <software_interrupt_msi+0x44a>
    8001444a:	57fd                	li	a5,-1
    8001444c:	6498                	ld	a4,8(s1)
    8001444e:	17fe                	slli	a5,a5,0x3f
    80014450:	0789                	addi	a5,a5,2
    80014452:	2cf707e3          	beq	a4,a5,80014f20 <software_interrupt_msi+0xf14>
    80014456:	00014517          	auipc	a0,0x14
    8001445a:	91a50513          	addi	a0,a0,-1766 # 80027d70 <__func__.0+0x310>
    8001445e:	099110ef          	jal	80025cf6 <printf>
    80014462:	00035797          	auipc	a5,0x35
    80014466:	baf7c783          	lbu	a5,-1105(a5) # 80049011 <excpt+0x1>
    8001446a:	c799                	beqz	a5,80014478 <software_interrupt_msi+0x46c>
    8001446c:	57fd                	li	a5,-1
    8001446e:	6498                	ld	a4,8(s1)
    80014470:	17fe                	slli	a5,a5,0x3f
    80014472:	0789                	addi	a5,a5,2
    80014474:	10f703e3          	beq	a4,a5,80014d7a <software_interrupt_msi+0xd6e>
    80014478:	00014517          	auipc	a0,0x14
    8001447c:	90050513          	addi	a0,a0,-1792 # 80027d78 <__func__.0+0x318>
    80014480:	077110ef          	jal	80025cf6 <printf>
    80014484:	02900513          	li	a0,41
    80014488:	678100ef          	jal	80024b00 <putchar>
    8001448c:	4529                	li	a0,10
    8001448e:	672100ef          	jal	80024b00 <putchar>
    80014492:	c801                	beqz	s0,800144a2 <software_interrupt_msi+0x496>
    80014494:	00035797          	auipc	a5,0x35
    80014498:	b7d7c783          	lbu	a5,-1155(a5) # 80049011 <excpt+0x1>
    8001449c:	4401                	li	s0,0
    8001449e:	04079de3          	bnez	a5,80014cf8 <software_interrupt_msi+0xcec>
        excpt.priv == PRIV_M
    ); 

    
    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，有mideleg代理
    TEST_SETUP_EXCEPT();
    800144a2:	0330000f          	fence	rw,rw
    800144a6:	4785                	li	a5,1
    800144a8:	00035717          	auipc	a4,0x35
    800144ac:	ba073023          	sd	zero,-1120(a4) # 80049048 <excpt+0x38>
    800144b0:	00f49023          	sh	a5,0(s1)
    800144b4:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800144b8:	4511                	li	a0,4
    800144ba:	f3cec0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    800144be:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    800144c2:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    800144c6:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    800144ca:	57fd                	li	a5,-1
    800144cc:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    800144d0:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    800144d4:	450d                	li	a0,3
    800144d6:	f20ec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    800144da:	08200593          	li	a1,130
    800144de:	00018617          	auipc	a2,0x18
    800144e2:	e9a60613          	addi	a2,a2,-358 # 8002c378 <__func__.0+0x4918>
    800144e6:	00014517          	auipc	a0,0x14
    800144ea:	87250513          	addi	a0,a0,-1934 # 80027d58 <__func__.0+0x2f8>
    800144ee:	009110ef          	jal	80025cf6 <printf>
    800144f2:	00035797          	auipc	a5,0x35
    800144f6:	b1f7c783          	lbu	a5,-1249(a5) # 80049011 <excpt+0x1>
    800144fa:	00014597          	auipc	a1,0x14
    800144fe:	83658593          	addi	a1,a1,-1994 # 80027d30 <__func__.0+0x2d0>
    80014502:	c799                	beqz	a5,80014510 <software_interrupt_msi+0x504>
    80014504:	57fd                	li	a5,-1
    80014506:	6498                	ld	a4,8(s1)
    80014508:	17fe                	slli	a5,a5,0x3f
    8001450a:	0789                	addi	a5,a5,2
    8001450c:	22f70be3          	beq	a4,a5,80014f42 <software_interrupt_msi+0xf36>
    80014510:	00014517          	auipc	a0,0x14
    80014514:	86050513          	addi	a0,a0,-1952 # 80027d70 <__func__.0+0x310>
    80014518:	7de110ef          	jal	80025cf6 <printf>
    8001451c:	00035797          	auipc	a5,0x35
    80014520:	af57c783          	lbu	a5,-1291(a5) # 80049011 <excpt+0x1>
    80014524:	c799                	beqz	a5,80014532 <software_interrupt_msi+0x526>
    80014526:	57fd                	li	a5,-1
    80014528:	6498                	ld	a4,8(s1)
    8001452a:	17fe                	slli	a5,a5,0x3f
    8001452c:	0789                	addi	a5,a5,2
    8001452e:	02f70de3          	beq	a4,a5,80014d68 <software_interrupt_msi+0xd5c>
    80014532:	00014517          	auipc	a0,0x14
    80014536:	84650513          	addi	a0,a0,-1978 # 80027d78 <__func__.0+0x318>
    8001453a:	7bc110ef          	jal	80025cf6 <printf>
    8001453e:	02900513          	li	a0,41
    80014542:	5be100ef          	jal	80024b00 <putchar>
    80014546:	4529                	li	a0,10
    80014548:	5b8100ef          	jal	80024b00 <putchar>
    8001454c:	c801                	beqz	s0,8001455c <software_interrupt_msi+0x550>
    8001454e:	00035797          	auipc	a5,0x35
    80014552:	ac37c783          	lbu	a5,-1341(a5) # 80049011 <excpt+0x1>
    80014556:	4401                	li	s0,0
    80014558:	78079163          	bnez	a5,80014cda <software_interrupt_msi+0xcce>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0，无代理
    TEST_SETUP_EXCEPT();
    8001455c:	0330000f          	fence	rw,rw
    80014560:	4785                	li	a5,1
    80014562:	00035717          	auipc	a4,0x35
    80014566:	ae073323          	sd	zero,-1306(a4) # 80049048 <excpt+0x38>
    8001456a:	00f49023          	sh	a5,0(s1)
    8001456e:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80014572:	4511                	li	a0,4
    80014574:	e82ec0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80014578:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    8001457c:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80014580:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    80014584:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80014588:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    8001458c:	450d                	li	a0,3
    8001458e:	e68ec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    80014592:	08200593          	li	a1,130
    80014596:	00018617          	auipc	a2,0x18
    8001459a:	e5260613          	addi	a2,a2,-430 # 8002c3e8 <__func__.0+0x4988>
    8001459e:	00013517          	auipc	a0,0x13
    800145a2:	7ba50513          	addi	a0,a0,1978 # 80027d58 <__func__.0+0x2f8>
    800145a6:	750110ef          	jal	80025cf6 <printf>
    800145aa:	00035797          	auipc	a5,0x35
    800145ae:	a677c783          	lbu	a5,-1433(a5) # 80049011 <excpt+0x1>
    800145b2:	00013597          	auipc	a1,0x13
    800145b6:	77e58593          	addi	a1,a1,1918 # 80027d30 <__func__.0+0x2d0>
    800145ba:	e789                	bnez	a5,800145c4 <software_interrupt_msi+0x5b8>
    800145bc:	00013597          	auipc	a1,0x13
    800145c0:	76458593          	addi	a1,a1,1892 # 80027d20 <__func__.0+0x2c0>
    800145c4:	00013517          	auipc	a0,0x13
    800145c8:	7ac50513          	addi	a0,a0,1964 # 80027d70 <__func__.0+0x310>
    800145cc:	72a110ef          	jal	80025cf6 <printf>
    800145d0:	00035797          	auipc	a5,0x35
    800145d4:	a417c783          	lbu	a5,-1471(a5) # 80049011 <excpt+0x1>
    800145d8:	04079be3          	bnez	a5,80014e2e <software_interrupt_msi+0xe22>
    800145dc:	4529                	li	a0,10
    800145de:	522100ef          	jal	80024b00 <putchar>
    800145e2:	c419                	beqz	s0,800145f0 <software_interrupt_msi+0x5e4>
    800145e4:	00035417          	auipc	s0,0x35
    800145e8:	a2d44403          	lbu	s0,-1491(s0) # 80049011 <excpt+0x1>
    800145ec:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MESIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    800145f0:	0330000f          	fence	rw,rw
    800145f4:	4785                	li	a5,1
    800145f6:	00035717          	auipc	a4,0x35
    800145fa:	a4073923          	sd	zero,-1454(a4) # 80049048 <excpt+0x38>
    800145fe:	00f49023          	sh	a5,0(s1)
    80014602:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80014606:	4511                	li	a0,4
    80014608:	deeec0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    8001460c:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80014610:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80014614:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    80014618:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8001461c:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    80014620:	450d                	li	a0,3
    80014622:	dd4ec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80014626:	08200593          	li	a1,130
    8001462a:	00018617          	auipc	a2,0x18
    8001462e:	e2660613          	addi	a2,a2,-474 # 8002c450 <__func__.0+0x49f0>
    80014632:	00013517          	auipc	a0,0x13
    80014636:	72650513          	addi	a0,a0,1830 # 80027d58 <__func__.0+0x2f8>
    8001463a:	6bc110ef          	jal	80025cf6 <printf>
    8001463e:	00035797          	auipc	a5,0x35
    80014642:	9d37c783          	lbu	a5,-1581(a5) # 80049011 <excpt+0x1>
    80014646:	00013597          	auipc	a1,0x13
    8001464a:	6ea58593          	addi	a1,a1,1770 # 80027d30 <__func__.0+0x2d0>
    8001464e:	c799                	beqz	a5,8001465c <software_interrupt_msi+0x650>
    80014650:	57fd                	li	a5,-1
    80014652:	6498                	ld	a4,8(s1)
    80014654:	17fe                	slli	a5,a5,0x3f
    80014656:	0789                	addi	a5,a5,2
    80014658:	08f703e3          	beq	a4,a5,80014ede <software_interrupt_msi+0xed2>
    8001465c:	00013517          	auipc	a0,0x13
    80014660:	71450513          	addi	a0,a0,1812 # 80027d70 <__func__.0+0x310>
    80014664:	692110ef          	jal	80025cf6 <printf>
    80014668:	00035797          	auipc	a5,0x35
    8001466c:	9a97c783          	lbu	a5,-1623(a5) # 80049011 <excpt+0x1>
    80014670:	c799                	beqz	a5,8001467e <software_interrupt_msi+0x672>
    80014672:	57fd                	li	a5,-1
    80014674:	6498                	ld	a4,8(s1)
    80014676:	17fe                	slli	a5,a5,0x3f
    80014678:	0789                	addi	a5,a5,2
    8001467a:	72f70163          	beq	a4,a5,80014d9c <software_interrupt_msi+0xd90>
    8001467e:	00013517          	auipc	a0,0x13
    80014682:	6fa50513          	addi	a0,a0,1786 # 80027d78 <__func__.0+0x318>
    80014686:	670110ef          	jal	80025cf6 <printf>
    8001468a:	02900513          	li	a0,41
    8001468e:	472100ef          	jal	80024b00 <putchar>
    80014692:	4529                	li	a0,10
    80014694:	46c100ef          	jal	80024b00 <putchar>
    80014698:	c801                	beqz	s0,800146a8 <software_interrupt_msi+0x69c>
    8001469a:	00035797          	auipc	a5,0x35
    8001469e:	9777c783          	lbu	a5,-1673(a5) # 80049011 <excpt+0x1>
    800146a2:	4401                	li	s0,0
    800146a4:	60079d63          	bnez	a5,80014cbe <software_interrupt_msi+0xcb2>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    800146a8:	0330000f          	fence	rw,rw
    800146ac:	4785                	li	a5,1
    800146ae:	00035717          	auipc	a4,0x35
    800146b2:	98073d23          	sd	zero,-1638(a4) # 80049048 <excpt+0x38>
    800146b6:	00f49023          	sh	a5,0(s1)
    800146ba:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800146be:	4511                	li	a0,4
    800146c0:	d36ec0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    800146c4:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    800146c8:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    800146cc:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,1);
    800146d0:	3030d073          	csrwi	mideleg,1
    CSRW(CSR_HIDELEG,0);
    800146d4:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    800146d8:	450d                	li	a0,3
    800146da:	d1cec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    800146de:	08200593          	li	a1,130
    800146e2:	00018617          	auipc	a2,0x18
    800146e6:	dde60613          	addi	a2,a2,-546 # 8002c4c0 <__func__.0+0x4a60>
    800146ea:	00013517          	auipc	a0,0x13
    800146ee:	66e50513          	addi	a0,a0,1646 # 80027d58 <__func__.0+0x2f8>
    800146f2:	604110ef          	jal	80025cf6 <printf>
    800146f6:	00035797          	auipc	a5,0x35
    800146fa:	91b7c783          	lbu	a5,-1765(a5) # 80049011 <excpt+0x1>
    800146fe:	00013597          	auipc	a1,0x13
    80014702:	63258593          	addi	a1,a1,1586 # 80027d30 <__func__.0+0x2d0>
    80014706:	c799                	beqz	a5,80014714 <software_interrupt_msi+0x708>
    80014708:	57fd                	li	a5,-1
    8001470a:	6498                	ld	a4,8(s1)
    8001470c:	17fe                	slli	a5,a5,0x3f
    8001470e:	0789                	addi	a5,a5,2
    80014710:	76f70363          	beq	a4,a5,80014e76 <software_interrupt_msi+0xe6a>
    80014714:	00013517          	auipc	a0,0x13
    80014718:	65c50513          	addi	a0,a0,1628 # 80027d70 <__func__.0+0x310>
    8001471c:	5da110ef          	jal	80025cf6 <printf>
    80014720:	00035797          	auipc	a5,0x35
    80014724:	8f17c783          	lbu	a5,-1807(a5) # 80049011 <excpt+0x1>
    80014728:	c799                	beqz	a5,80014736 <software_interrupt_msi+0x72a>
    8001472a:	57fd                	li	a5,-1
    8001472c:	6498                	ld	a4,8(s1)
    8001472e:	17fe                	slli	a5,a5,0x3f
    80014730:	0789                	addi	a5,a5,2
    80014732:	66f70d63          	beq	a4,a5,80014dac <software_interrupt_msi+0xda0>
    80014736:	00013517          	auipc	a0,0x13
    8001473a:	64250513          	addi	a0,a0,1602 # 80027d78 <__func__.0+0x318>
    8001473e:	5b8110ef          	jal	80025cf6 <printf>
    80014742:	02900513          	li	a0,41
    80014746:	3ba100ef          	jal	80024b00 <putchar>
    8001474a:	4529                	li	a0,10
    8001474c:	3b4100ef          	jal	80024b00 <putchar>
    80014750:	c801                	beqz	s0,80014760 <software_interrupt_msi+0x754>
    80014752:	00035797          	auipc	a5,0x35
    80014756:	8bf7c783          	lbu	a5,-1857(a5) # 80049011 <excpt+0x1>
    8001475a:	4401                	li	s0,0
    8001475c:	54079363          	bnez	a5,80014ca2 <software_interrupt_msi+0xc96>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=0，且mip.MSIP，mie.MSIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    80014760:	0330000f          	fence	rw,rw
    80014764:	4785                	li	a5,1
    80014766:	00035717          	auipc	a4,0x35
    8001476a:	8e073123          	sd	zero,-1822(a4) # 80049048 <excpt+0x38>
    8001476e:	00f49023          	sh	a5,0(s1)
    80014772:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80014776:	4511                	li	a0,4
    80014778:	c7eec0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);   
    8001477c:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80014780:	30447073          	csrci	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80014784:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    80014788:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8001478c:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    80014790:	450d                	li	a0,3
    80014792:	c64ec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80014796:	08200593          	li	a1,130
    8001479a:	00018617          	auipc	a2,0x18
    8001479e:	d9660613          	addi	a2,a2,-618 # 8002c530 <__func__.0+0x4ad0>
    800147a2:	00013517          	auipc	a0,0x13
    800147a6:	5b650513          	addi	a0,a0,1462 # 80027d58 <__func__.0+0x2f8>
    800147aa:	54c110ef          	jal	80025cf6 <printf>
    800147ae:	00035797          	auipc	a5,0x35
    800147b2:	8637c783          	lbu	a5,-1949(a5) # 80049011 <excpt+0x1>
    800147b6:	00013597          	auipc	a1,0x13
    800147ba:	57a58593          	addi	a1,a1,1402 # 80027d30 <__func__.0+0x2d0>
    800147be:	e789                	bnez	a5,800147c8 <software_interrupt_msi+0x7bc>
    800147c0:	00013597          	auipc	a1,0x13
    800147c4:	56058593          	addi	a1,a1,1376 # 80027d20 <__func__.0+0x2c0>
    800147c8:	00013517          	auipc	a0,0x13
    800147cc:	5a850513          	addi	a0,a0,1448 # 80027d70 <__func__.0+0x310>
    800147d0:	526110ef          	jal	80025cf6 <printf>
    800147d4:	00035797          	auipc	a5,0x35
    800147d8:	83d7c783          	lbu	a5,-1987(a5) # 80049011 <excpt+0x1>
    800147dc:	62079e63          	bnez	a5,80014e18 <software_interrupt_msi+0xe0c>
    800147e0:	4529                	li	a0,10
    800147e2:	31e100ef          	jal	80024b00 <putchar>
    800147e6:	c419                	beqz	s0,800147f4 <software_interrupt_msi+0x7e8>
    800147e8:	00035417          	auipc	s0,0x35
    800147ec:	82944403          	lbu	s0,-2007(s0) # 80049011 <excpt+0x1>
    800147f0:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

//vs mode 下

    TEST_SETUP_EXCEPT();
    800147f4:	0330000f          	fence	rw,rw
    800147f8:	4785                	li	a5,1
    800147fa:	00035717          	auipc	a4,0x35
    800147fe:	84073723          	sd	zero,-1970(a4) # 80049048 <excpt+0x38>
    80014802:	00f49023          	sh	a5,0(s1)
    80014806:	0330000f          	fence	rw,rw
    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，无代理
    goto_priv(PRIV_M);
    8001480a:	4511                	li	a0,4
    8001480c:	beaec0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    80014810:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80014814:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80014818:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    8001481c:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80014820:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    80014824:	4509                	li	a0,2
    80014826:	bd0ec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    8001482a:	08200593          	li	a1,130
    8001482e:	00018617          	auipc	a2,0x18
    80014832:	d6260613          	addi	a2,a2,-670 # 8002c590 <__func__.0+0x4b30>
    80014836:	00013517          	auipc	a0,0x13
    8001483a:	52250513          	addi	a0,a0,1314 # 80027d58 <__func__.0+0x2f8>
    8001483e:	4b8110ef          	jal	80025cf6 <printf>
    80014842:	00034797          	auipc	a5,0x34
    80014846:	7cf7c783          	lbu	a5,1999(a5) # 80049011 <excpt+0x1>
    8001484a:	00013597          	auipc	a1,0x13
    8001484e:	4e658593          	addi	a1,a1,1254 # 80027d30 <__func__.0+0x2d0>
    80014852:	c799                	beqz	a5,80014860 <software_interrupt_msi+0x854>
    80014854:	57fd                	li	a5,-1
    80014856:	6498                	ld	a4,8(s1)
    80014858:	17fe                	slli	a5,a5,0x3f
    8001485a:	0789                	addi	a5,a5,2
    8001485c:	6af70263          	beq	a4,a5,80014f00 <software_interrupt_msi+0xef4>
    80014860:	00013517          	auipc	a0,0x13
    80014864:	51050513          	addi	a0,a0,1296 # 80027d70 <__func__.0+0x310>
    80014868:	48e110ef          	jal	80025cf6 <printf>
    8001486c:	00034797          	auipc	a5,0x34
    80014870:	7a57c783          	lbu	a5,1957(a5) # 80049011 <excpt+0x1>
    80014874:	c799                	beqz	a5,80014882 <software_interrupt_msi+0x876>
    80014876:	57fd                	li	a5,-1
    80014878:	6498                	ld	a4,8(s1)
    8001487a:	17fe                	slli	a5,a5,0x3f
    8001487c:	0789                	addi	a5,a5,2
    8001487e:	50f70763          	beq	a4,a5,80014d8c <software_interrupt_msi+0xd80>
    80014882:	00013517          	auipc	a0,0x13
    80014886:	4f650513          	addi	a0,a0,1270 # 80027d78 <__func__.0+0x318>
    8001488a:	46c110ef          	jal	80025cf6 <printf>
    8001488e:	02900513          	li	a0,41
    80014892:	26e100ef          	jal	80024b00 <putchar>
    80014896:	4529                	li	a0,10
    80014898:	268100ef          	jal	80024b00 <putchar>
    8001489c:	c801                	beqz	s0,800148ac <software_interrupt_msi+0x8a0>
    8001489e:	00034797          	auipc	a5,0x34
    800148a2:	7737c783          	lbu	a5,1907(a5) # 80049011 <excpt+0x1>
    800148a6:	4401                	li	s0,0
    800148a8:	3c079f63          	bnez	a5,80014c86 <software_interrupt_msi+0xc7a>
        excpt.priv == PRIV_M
    ); 


    //vs模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，有mideleg代理
    TEST_SETUP_EXCEPT();
    800148ac:	0330000f          	fence	rw,rw
    800148b0:	4785                	li	a5,1
    800148b2:	00034717          	auipc	a4,0x34
    800148b6:	78073b23          	sd	zero,1942(a4) # 80049048 <excpt+0x38>
    800148ba:	00f49023          	sh	a5,0(s1)
    800148be:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800148c2:	4511                	li	a0,4
    800148c4:	b32ec0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    800148c8:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    800148cc:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    800148d0:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    800148d4:	57fd                	li	a5,-1
    800148d6:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    800148da:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    800148de:	4509                	li	a0,2
    800148e0:	b16ec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    800148e4:	08200593          	li	a1,130
    800148e8:	00018617          	auipc	a2,0x18
    800148ec:	d0860613          	addi	a2,a2,-760 # 8002c5f0 <__func__.0+0x4b90>
    800148f0:	00013517          	auipc	a0,0x13
    800148f4:	46850513          	addi	a0,a0,1128 # 80027d58 <__func__.0+0x2f8>
    800148f8:	3fe110ef          	jal	80025cf6 <printf>
    800148fc:	00034797          	auipc	a5,0x34
    80014900:	7157c783          	lbu	a5,1813(a5) # 80049011 <excpt+0x1>
    80014904:	00013597          	auipc	a1,0x13
    80014908:	42c58593          	addi	a1,a1,1068 # 80027d30 <__func__.0+0x2d0>
    8001490c:	c799                	beqz	a5,8001491a <software_interrupt_msi+0x90e>
    8001490e:	57fd                	li	a5,-1
    80014910:	6498                	ld	a4,8(s1)
    80014912:	17fe                	slli	a5,a5,0x3f
    80014914:	0789                	addi	a5,a5,2
    80014916:	66f70763          	beq	a4,a5,80014f84 <software_interrupt_msi+0xf78>
    8001491a:	00013517          	auipc	a0,0x13
    8001491e:	45650513          	addi	a0,a0,1110 # 80027d70 <__func__.0+0x310>
    80014922:	3d4110ef          	jal	80025cf6 <printf>
    80014926:	00034797          	auipc	a5,0x34
    8001492a:	6eb7c783          	lbu	a5,1771(a5) # 80049011 <excpt+0x1>
    8001492e:	c799                	beqz	a5,8001493c <software_interrupt_msi+0x930>
    80014930:	57fd                	li	a5,-1
    80014932:	6498                	ld	a4,8(s1)
    80014934:	17fe                	slli	a5,a5,0x3f
    80014936:	0789                	addi	a5,a5,2
    80014938:	40f70863          	beq	a4,a5,80014d48 <software_interrupt_msi+0xd3c>
    8001493c:	00013517          	auipc	a0,0x13
    80014940:	43c50513          	addi	a0,a0,1084 # 80027d78 <__func__.0+0x318>
    80014944:	3b2110ef          	jal	80025cf6 <printf>
    80014948:	02900513          	li	a0,41
    8001494c:	1b4100ef          	jal	80024b00 <putchar>
    80014950:	4529                	li	a0,10
    80014952:	1ae100ef          	jal	80024b00 <putchar>
    80014956:	c801                	beqz	s0,80014966 <software_interrupt_msi+0x95a>
    80014958:	00034797          	auipc	a5,0x34
    8001495c:	6b97c783          	lbu	a5,1721(a5) # 80049011 <excpt+0x1>
    80014960:	4401                	li	s0,0
    80014962:	30079463          	bnez	a5,80014c6a <software_interrupt_msi+0xc5e>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0，无代理
    TEST_SETUP_EXCEPT();
    80014966:	0330000f          	fence	rw,rw
    8001496a:	4785                	li	a5,1
    8001496c:	00034717          	auipc	a4,0x34
    80014970:	6c073e23          	sd	zero,1756(a4) # 80049048 <excpt+0x38>
    80014974:	00f49023          	sh	a5,0(s1)
    80014978:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001497c:	4511                	li	a0,4
    8001497e:	a78ec0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80014982:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80014986:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8001498a:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    8001498e:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80014992:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    80014996:	4509                	li	a0,2
    80014998:	a5eec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to  interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    8001499c:	08200593          	li	a1,130
    800149a0:	00018617          	auipc	a2,0x18
    800149a4:	cc060613          	addi	a2,a2,-832 # 8002c660 <__func__.0+0x4c00>
    800149a8:	00013517          	auipc	a0,0x13
    800149ac:	3b050513          	addi	a0,a0,944 # 80027d58 <__func__.0+0x2f8>
    800149b0:	346110ef          	jal	80025cf6 <printf>
    800149b4:	00034797          	auipc	a5,0x34
    800149b8:	65d7c783          	lbu	a5,1629(a5) # 80049011 <excpt+0x1>
    800149bc:	00013597          	auipc	a1,0x13
    800149c0:	37458593          	addi	a1,a1,884 # 80027d30 <__func__.0+0x2d0>
    800149c4:	e789                	bnez	a5,800149ce <software_interrupt_msi+0x9c2>
    800149c6:	00013597          	auipc	a1,0x13
    800149ca:	35a58593          	addi	a1,a1,858 # 80027d20 <__func__.0+0x2c0>
    800149ce:	00013517          	auipc	a0,0x13
    800149d2:	3a250513          	addi	a0,a0,930 # 80027d70 <__func__.0+0x310>
    800149d6:	320110ef          	jal	80025cf6 <printf>
    800149da:	00034797          	auipc	a5,0x34
    800149de:	6377c783          	lbu	a5,1591(a5) # 80049011 <excpt+0x1>
    800149e2:	3e079963          	bnez	a5,80014dd4 <software_interrupt_msi+0xdc8>
    800149e6:	4529                	li	a0,10
    800149e8:	118100ef          	jal	80024b00 <putchar>
    800149ec:	c419                	beqz	s0,800149fa <software_interrupt_msi+0x9ee>
    800149ee:	00034417          	auipc	s0,0x34
    800149f2:	62344403          	lbu	s0,1571(s0) # 80049011 <excpt+0x1>
    800149f6:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MESIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    800149fa:	0330000f          	fence	rw,rw
    800149fe:	4785                	li	a5,1
    80014a00:	00034717          	auipc	a4,0x34
    80014a04:	64073423          	sd	zero,1608(a4) # 80049048 <excpt+0x38>
    80014a08:	00f49023          	sh	a5,0(s1)
    80014a0c:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80014a10:	4511                	li	a0,4
    80014a12:	9e4ec0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80014a16:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80014a1a:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80014a1e:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    80014a22:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80014a26:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    80014a2a:	4509                	li	a0,2
    80014a2c:	9caec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80014a30:	08200593          	li	a1,130
    80014a34:	00018617          	auipc	a2,0x18
    80014a38:	c9460613          	addi	a2,a2,-876 # 8002c6c8 <__func__.0+0x4c68>
    80014a3c:	00013517          	auipc	a0,0x13
    80014a40:	31c50513          	addi	a0,a0,796 # 80027d58 <__func__.0+0x2f8>
    80014a44:	2b2110ef          	jal	80025cf6 <printf>
    80014a48:	00034797          	auipc	a5,0x34
    80014a4c:	5c97c783          	lbu	a5,1481(a5) # 80049011 <excpt+0x1>
    80014a50:	00013597          	auipc	a1,0x13
    80014a54:	2e058593          	addi	a1,a1,736 # 80027d30 <__func__.0+0x2d0>
    80014a58:	c799                	beqz	a5,80014a66 <software_interrupt_msi+0xa5a>
    80014a5a:	57fd                	li	a5,-1
    80014a5c:	6498                	ld	a4,8(s1)
    80014a5e:	17fe                	slli	a5,a5,0x3f
    80014a60:	0789                	addi	a5,a5,2
    80014a62:	42f70b63          	beq	a4,a5,80014e98 <software_interrupt_msi+0xe8c>
    80014a66:	00013517          	auipc	a0,0x13
    80014a6a:	30a50513          	addi	a0,a0,778 # 80027d70 <__func__.0+0x310>
    80014a6e:	288110ef          	jal	80025cf6 <printf>
    80014a72:	00034797          	auipc	a5,0x34
    80014a76:	59f7c783          	lbu	a5,1439(a5) # 80049011 <excpt+0x1>
    80014a7a:	c799                	beqz	a5,80014a88 <software_interrupt_msi+0xa7c>
    80014a7c:	57fd                	li	a5,-1
    80014a7e:	6498                	ld	a4,8(s1)
    80014a80:	17fe                	slli	a5,a5,0x3f
    80014a82:	0789                	addi	a5,a5,2
    80014a84:	2af70163          	beq	a4,a5,80014d26 <software_interrupt_msi+0xd1a>
    80014a88:	00013517          	auipc	a0,0x13
    80014a8c:	2f050513          	addi	a0,a0,752 # 80027d78 <__func__.0+0x318>
    80014a90:	266110ef          	jal	80025cf6 <printf>
    80014a94:	02900513          	li	a0,41
    80014a98:	068100ef          	jal	80024b00 <putchar>
    80014a9c:	4529                	li	a0,10
    80014a9e:	062100ef          	jal	80024b00 <putchar>
    80014aa2:	c801                	beqz	s0,80014ab2 <software_interrupt_msi+0xaa6>
    80014aa4:	00034797          	auipc	a5,0x34
    80014aa8:	56d7c783          	lbu	a5,1389(a5) # 80049011 <excpt+0x1>
    80014aac:	4401                	li	s0,0
    80014aae:	1a079063          	bnez	a5,80014c4e <software_interrupt_msi+0xc42>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    80014ab2:	0330000f          	fence	rw,rw
    80014ab6:	4785                	li	a5,1
    80014ab8:	00034717          	auipc	a4,0x34
    80014abc:	58073823          	sd	zero,1424(a4) # 80049048 <excpt+0x38>
    80014ac0:	00f49023          	sh	a5,0(s1)
    80014ac4:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80014ac8:	4511                	li	a0,4
    80014aca:	92cec0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80014ace:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80014ad2:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80014ad6:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,1);
    80014ada:	3030d073          	csrwi	mideleg,1
    CSRW(CSR_HIDELEG,0);
    80014ade:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    80014ae2:	4509                	li	a0,2
    80014ae4:	912ec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80014ae8:	08200593          	li	a1,130
    80014aec:	00018617          	auipc	a2,0x18
    80014af0:	c4c60613          	addi	a2,a2,-948 # 8002c738 <__func__.0+0x4cd8>
    80014af4:	00013517          	auipc	a0,0x13
    80014af8:	26450513          	addi	a0,a0,612 # 80027d58 <__func__.0+0x2f8>
    80014afc:	1fa110ef          	jal	80025cf6 <printf>
    80014b00:	00034797          	auipc	a5,0x34
    80014b04:	5117c783          	lbu	a5,1297(a5) # 80049011 <excpt+0x1>
    80014b08:	00013597          	auipc	a1,0x13
    80014b0c:	22858593          	addi	a1,a1,552 # 80027d30 <__func__.0+0x2d0>
    80014b10:	c799                	beqz	a5,80014b1e <software_interrupt_msi+0xb12>
    80014b12:	57fd                	li	a5,-1
    80014b14:	6498                	ld	a4,8(s1)
    80014b16:	17fe                	slli	a5,a5,0x3f
    80014b18:	0789                	addi	a5,a5,2
    80014b1a:	44f70563          	beq	a4,a5,80014f64 <software_interrupt_msi+0xf58>
    80014b1e:	00013517          	auipc	a0,0x13
    80014b22:	25250513          	addi	a0,a0,594 # 80027d70 <__func__.0+0x310>
    80014b26:	1d0110ef          	jal	80025cf6 <printf>
    80014b2a:	00034797          	auipc	a5,0x34
    80014b2e:	4e77c783          	lbu	a5,1255(a5) # 80049011 <excpt+0x1>
    80014b32:	c799                	beqz	a5,80014b40 <software_interrupt_msi+0xb34>
    80014b34:	57fd                	li	a5,-1
    80014b36:	6498                	ld	a4,8(s1)
    80014b38:	17fe                	slli	a5,a5,0x3f
    80014b3a:	0789                	addi	a5,a5,2
    80014b3c:	20f70e63          	beq	a4,a5,80014d58 <software_interrupt_msi+0xd4c>
    80014b40:	00013517          	auipc	a0,0x13
    80014b44:	23850513          	addi	a0,a0,568 # 80027d78 <__func__.0+0x318>
    80014b48:	1ae110ef          	jal	80025cf6 <printf>
    80014b4c:	02900513          	li	a0,41
    80014b50:	7b10f0ef          	jal	80024b00 <putchar>
    80014b54:	4529                	li	a0,10
    80014b56:	7ab0f0ef          	jal	80024b00 <putchar>
    80014b5a:	c419                	beqz	s0,80014b68 <software_interrupt_msi+0xb5c>
    80014b5c:	00034797          	auipc	a5,0x34
    80014b60:	4b57c783          	lbu	a5,1205(a5) # 80049011 <excpt+0x1>
    80014b64:	4401                	li	s0,0
    80014b66:	e7f1                	bnez	a5,80014c32 <software_interrupt_msi+0xc26>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=0，且mip.MSIP，mie.MSIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    80014b68:	0330000f          	fence	rw,rw
    80014b6c:	4785                	li	a5,1
    80014b6e:	00034717          	auipc	a4,0x34
    80014b72:	4c073d23          	sd	zero,1242(a4) # 80049048 <excpt+0x38>
    80014b76:	00f49023          	sh	a5,0(s1)
    80014b7a:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80014b7e:	4511                	li	a0,4
    80014b80:	876ec0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);   
    80014b84:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80014b88:	30447073          	csrci	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80014b8c:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    80014b90:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80014b94:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    80014b98:	4509                	li	a0,2
    80014b9a:	85cec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80014b9e:	08200593          	li	a1,130
    80014ba2:	00018617          	auipc	a2,0x18
    80014ba6:	c0660613          	addi	a2,a2,-1018 # 8002c7a8 <__func__.0+0x4d48>
    80014baa:	00013517          	auipc	a0,0x13
    80014bae:	1ae50513          	addi	a0,a0,430 # 80027d58 <__func__.0+0x2f8>
    80014bb2:	144110ef          	jal	80025cf6 <printf>
    80014bb6:	00034797          	auipc	a5,0x34
    80014bba:	45b7c783          	lbu	a5,1115(a5) # 80049011 <excpt+0x1>
    80014bbe:	00013597          	auipc	a1,0x13
    80014bc2:	17258593          	addi	a1,a1,370 # 80027d30 <__func__.0+0x2d0>
    80014bc6:	e789                	bnez	a5,80014bd0 <software_interrupt_msi+0xbc4>
    80014bc8:	00013597          	auipc	a1,0x13
    80014bcc:	15858593          	addi	a1,a1,344 # 80027d20 <__func__.0+0x2c0>
    80014bd0:	00013517          	auipc	a0,0x13
    80014bd4:	1a050513          	addi	a0,a0,416 # 80027d70 <__func__.0+0x310>
    80014bd8:	11e110ef          	jal	80025cf6 <printf>
    80014bdc:	00034797          	auipc	a5,0x34
    80014be0:	4357c783          	lbu	a5,1077(a5) # 80049011 <excpt+0x1>
    80014be4:	20079f63          	bnez	a5,80014e02 <software_interrupt_msi+0xdf6>
    80014be8:	4529                	li	a0,10
    80014bea:	7170f0ef          	jal	80024b00 <putchar>
    80014bee:	c411                	beqz	s0,80014bfa <software_interrupt_msi+0xbee>
    80014bf0:	00034797          	auipc	a5,0x34
    80014bf4:	4217c783          	lbu	a5,1057(a5) # 80049011 <excpt+0x1>
    80014bf8:	c79d                	beqz	a5,80014c26 <software_interrupt_msi+0xc1a>
    80014bfa:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80014bfc:	00013597          	auipc	a1,0x13
    80014c00:	13458593          	addi	a1,a1,308 # 80027d30 <__func__.0+0x2d0>
    80014c04:	00013517          	auipc	a0,0x13
    80014c08:	1d450513          	addi	a0,a0,468 # 80027dd8 <__func__.0+0x378>
    80014c0c:	0ea110ef          	jal	80025cf6 <printf>
    80014c10:	4511                	li	a0,4
    80014c12:	fe5eb0ef          	jal	80000bf6 <goto_priv>
    80014c16:	897ec0ef          	jal	800014ac <reset_state>
}
    80014c1a:	60e2                	ld	ra,24(sp)
    80014c1c:	8522                	mv	a0,s0
    80014c1e:	6442                	ld	s0,16(sp)
    80014c20:	64a2                	ld	s1,8(sp)
    80014c22:	6105                	addi	sp,sp,32
    80014c24:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80014c26:	4405                	li	s0,1
    TEST_END();
    80014c28:	00013597          	auipc	a1,0x13
    80014c2c:	0f858593          	addi	a1,a1,248 # 80027d20 <__func__.0+0x2c0>
    80014c30:	bfd1                	j	80014c04 <software_interrupt_msi+0xbf8>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80014c32:	57fd                	li	a5,-1
    80014c34:	6498                	ld	a4,8(s1)
    80014c36:	17fe                	slli	a5,a5,0x3f
    80014c38:	0789                	addi	a5,a5,2
    80014c3a:	f2f717e3          	bne	a4,a5,80014b68 <software_interrupt_msi+0xb5c>
    80014c3e:	00034417          	auipc	s0,0x34
    80014c42:	3d642403          	lw	s0,982(s0) # 80049014 <excpt+0x4>
    80014c46:	1475                	addi	s0,s0,-3
    80014c48:	00143413          	seqz	s0,s0
    80014c4c:	bf31                	j	80014b68 <software_interrupt_msi+0xb5c>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80014c4e:	57fd                	li	a5,-1
    80014c50:	6498                	ld	a4,8(s1)
    80014c52:	17fe                	slli	a5,a5,0x3f
    80014c54:	0789                	addi	a5,a5,2
    80014c56:	e4f71ee3          	bne	a4,a5,80014ab2 <software_interrupt_msi+0xaa6>
    80014c5a:	00034417          	auipc	s0,0x34
    80014c5e:	3ba42403          	lw	s0,954(s0) # 80049014 <excpt+0x4>
    80014c62:	1471                	addi	s0,s0,-4
    80014c64:	00143413          	seqz	s0,s0
    80014c68:	b5a9                	j	80014ab2 <software_interrupt_msi+0xaa6>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80014c6a:	57fd                	li	a5,-1
    80014c6c:	6498                	ld	a4,8(s1)
    80014c6e:	17fe                	slli	a5,a5,0x3f
    80014c70:	0789                	addi	a5,a5,2
    80014c72:	cef71ae3          	bne	a4,a5,80014966 <software_interrupt_msi+0x95a>
    80014c76:	00034417          	auipc	s0,0x34
    80014c7a:	39e42403          	lw	s0,926(s0) # 80049014 <excpt+0x4>
    80014c7e:	1475                	addi	s0,s0,-3
    80014c80:	00143413          	seqz	s0,s0
    80014c84:	b1cd                	j	80014966 <software_interrupt_msi+0x95a>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80014c86:	57fd                	li	a5,-1
    80014c88:	6498                	ld	a4,8(s1)
    80014c8a:	17fe                	slli	a5,a5,0x3f
    80014c8c:	0789                	addi	a5,a5,2
    80014c8e:	c0f71fe3          	bne	a4,a5,800148ac <software_interrupt_msi+0x8a0>
    80014c92:	00034417          	auipc	s0,0x34
    80014c96:	38242403          	lw	s0,898(s0) # 80049014 <excpt+0x4>
    80014c9a:	1471                	addi	s0,s0,-4
    80014c9c:	00143413          	seqz	s0,s0
    80014ca0:	b131                	j	800148ac <software_interrupt_msi+0x8a0>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    80014ca2:	57fd                	li	a5,-1
    80014ca4:	6498                	ld	a4,8(s1)
    80014ca6:	17fe                	slli	a5,a5,0x3f
    80014ca8:	0789                	addi	a5,a5,2
    80014caa:	aaf71be3          	bne	a4,a5,80014760 <software_interrupt_msi+0x754>
    80014cae:	00034417          	auipc	s0,0x34
    80014cb2:	36642403          	lw	s0,870(s0) # 80049014 <excpt+0x4>
    80014cb6:	1475                	addi	s0,s0,-3
    80014cb8:	00143413          	seqz	s0,s0
    80014cbc:	b455                	j	80014760 <software_interrupt_msi+0x754>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80014cbe:	57fd                	li	a5,-1
    80014cc0:	6498                	ld	a4,8(s1)
    80014cc2:	17fe                	slli	a5,a5,0x3f
    80014cc4:	0789                	addi	a5,a5,2
    80014cc6:	9ef711e3          	bne	a4,a5,800146a8 <software_interrupt_msi+0x69c>
    80014cca:	00034417          	auipc	s0,0x34
    80014cce:	34a42403          	lw	s0,842(s0) # 80049014 <excpt+0x4>
    80014cd2:	1471                	addi	s0,s0,-4
    80014cd4:	00143413          	seqz	s0,s0
    80014cd8:	bac1                	j	800146a8 <software_interrupt_msi+0x69c>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80014cda:	57fd                	li	a5,-1
    80014cdc:	6498                	ld	a4,8(s1)
    80014cde:	17fe                	slli	a5,a5,0x3f
    80014ce0:	0789                	addi	a5,a5,2
    80014ce2:	86f71de3          	bne	a4,a5,8001455c <software_interrupt_msi+0x550>
    80014ce6:	00034417          	auipc	s0,0x34
    80014cea:	32e42403          	lw	s0,814(s0) # 80049014 <excpt+0x4>
    80014cee:	1475                	addi	s0,s0,-3
    80014cf0:	00143413          	seqz	s0,s0
    80014cf4:	869ff06f          	j	8001455c <software_interrupt_msi+0x550>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80014cf8:	57fd                	li	a5,-1
    80014cfa:	6498                	ld	a4,8(s1)
    80014cfc:	17fe                	slli	a5,a5,0x3f
    80014cfe:	0789                	addi	a5,a5,2
    80014d00:	faf71163          	bne	a4,a5,800144a2 <software_interrupt_msi+0x496>
    80014d04:	00034417          	auipc	s0,0x34
    80014d08:	31042403          	lw	s0,784(s0) # 80049014 <excpt+0x4>
    80014d0c:	1471                	addi	s0,s0,-4
    80014d0e:	00143413          	seqz	s0,s0
    80014d12:	f90ff06f          	j	800144a2 <software_interrupt_msi+0x496>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1",
    80014d16:	6480                	ld	s0,8(s1)
    80014d18:	57f5                	li	a5,-3
    80014d1a:	8385                	srli	a5,a5,0x1
    80014d1c:	943e                	add	s0,s0,a5
    80014d1e:	00143413          	seqz	s0,s0
    80014d22:	d24ff06f          	j	80014246 <software_interrupt_msi+0x23a>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80014d26:	00034717          	auipc	a4,0x34
    80014d2a:	2ee72703          	lw	a4,750(a4) # 80049014 <excpt+0x4>
    80014d2e:	4791                	li	a5,4
    80014d30:	d4f71ce3          	bne	a4,a5,80014a88 <software_interrupt_msi+0xa7c>
    80014d34:	b3a5                	j	80014a9c <software_interrupt_msi+0xa90>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80014d36:	00034717          	auipc	a4,0x34
    80014d3a:	2de72703          	lw	a4,734(a4) # 80049014 <excpt+0x4>
    80014d3e:	4791                	li	a5,4
    80014d40:	b8f71263          	bne	a4,a5,800140c4 <software_interrupt_msi+0xb8>
    80014d44:	b94ff06f          	j	800140d8 <software_interrupt_msi+0xcc>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80014d48:	00034717          	auipc	a4,0x34
    80014d4c:	2cc72703          	lw	a4,716(a4) # 80049014 <excpt+0x4>
    80014d50:	478d                	li	a5,3
    80014d52:	bef715e3          	bne	a4,a5,8001493c <software_interrupt_msi+0x930>
    80014d56:	beed                	j	80014950 <software_interrupt_msi+0x944>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80014d58:	00034717          	auipc	a4,0x34
    80014d5c:	2bc72703          	lw	a4,700(a4) # 80049014 <excpt+0x4>
    80014d60:	478d                	li	a5,3
    80014d62:	dcf71fe3          	bne	a4,a5,80014b40 <software_interrupt_msi+0xb34>
    80014d66:	b3fd                	j	80014b54 <software_interrupt_msi+0xb48>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80014d68:	00034717          	auipc	a4,0x34
    80014d6c:	2ac72703          	lw	a4,684(a4) # 80049014 <excpt+0x4>
    80014d70:	478d                	li	a5,3
    80014d72:	fcf71063          	bne	a4,a5,80014532 <software_interrupt_msi+0x526>
    80014d76:	fd0ff06f          	j	80014546 <software_interrupt_msi+0x53a>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80014d7a:	00034717          	auipc	a4,0x34
    80014d7e:	29a72703          	lw	a4,666(a4) # 80049014 <excpt+0x4>
    80014d82:	4791                	li	a5,4
    80014d84:	eef71a63          	bne	a4,a5,80014478 <software_interrupt_msi+0x46c>
    80014d88:	f04ff06f          	j	8001448c <software_interrupt_msi+0x480>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80014d8c:	00034717          	auipc	a4,0x34
    80014d90:	28872703          	lw	a4,648(a4) # 80049014 <excpt+0x4>
    80014d94:	4791                	li	a5,4
    80014d96:	aef716e3          	bne	a4,a5,80014882 <software_interrupt_msi+0x876>
    80014d9a:	bcf5                	j	80014896 <software_interrupt_msi+0x88a>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80014d9c:	00034717          	auipc	a4,0x34
    80014da0:	27872703          	lw	a4,632(a4) # 80049014 <excpt+0x4>
    80014da4:	4791                	li	a5,4
    80014da6:	8cf71ce3          	bne	a4,a5,8001467e <software_interrupt_msi+0x672>
    80014daa:	b0e5                	j	80014692 <software_interrupt_msi+0x686>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    80014dac:	00034717          	auipc	a4,0x34
    80014db0:	26872703          	lw	a4,616(a4) # 80049014 <excpt+0x4>
    80014db4:	478d                	li	a5,3
    80014db6:	98f710e3          	bne	a4,a5,80014736 <software_interrupt_msi+0x72a>
    80014dba:	ba41                	j	8001474a <software_interrupt_msi+0x73e>
    TEST_ASSERT("m mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0",
    80014dbc:	00013517          	auipc	a0,0x13
    80014dc0:	fbc50513          	addi	a0,a0,-68 # 80027d78 <__func__.0+0x318>
    80014dc4:	733100ef          	jal	80025cf6 <printf>
    80014dc8:	02900513          	li	a0,41
    80014dcc:	5350f0ef          	jal	80024b00 <putchar>
    80014dd0:	ba2ff06f          	j	80014172 <software_interrupt_msi+0x166>
    TEST_ASSERT("VS mode leads to  interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    80014dd4:	00013517          	auipc	a0,0x13
    80014dd8:	fa450513          	addi	a0,a0,-92 # 80027d78 <__func__.0+0x318>
    80014ddc:	71b100ef          	jal	80025cf6 <printf>
    80014de0:	02900513          	li	a0,41
    80014de4:	51d0f0ef          	jal	80024b00 <putchar>
    80014de8:	befd                	j	800149e6 <software_interrupt_msi+0x9da>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=1",
    80014dea:	00013517          	auipc	a0,0x13
    80014dee:	f8e50513          	addi	a0,a0,-114 # 80027d78 <__func__.0+0x318>
    80014df2:	705100ef          	jal	80025cf6 <printf>
    80014df6:	02900513          	li	a0,41
    80014dfa:	5070f0ef          	jal	80024b00 <putchar>
    80014dfe:	cc0ff06f          	j	800142be <software_interrupt_msi+0x2b2>
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80014e02:	00013517          	auipc	a0,0x13
    80014e06:	f7650513          	addi	a0,a0,-138 # 80027d78 <__func__.0+0x318>
    80014e0a:	6ed100ef          	jal	80025cf6 <printf>
    80014e0e:	02900513          	li	a0,41
    80014e12:	4ef0f0ef          	jal	80024b00 <putchar>
    80014e16:	bbc9                	j	80014be8 <software_interrupt_msi+0xbdc>
    TEST_ASSERT("hs mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80014e18:	00013517          	auipc	a0,0x13
    80014e1c:	f6050513          	addi	a0,a0,-160 # 80027d78 <__func__.0+0x318>
    80014e20:	6d7100ef          	jal	80025cf6 <printf>
    80014e24:	02900513          	li	a0,41
    80014e28:	4d90f0ef          	jal	80024b00 <putchar>
    80014e2c:	ba55                	j	800147e0 <software_interrupt_msi+0x7d4>
    TEST_ASSERT("hs mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    80014e2e:	00013517          	auipc	a0,0x13
    80014e32:	f4a50513          	addi	a0,a0,-182 # 80027d78 <__func__.0+0x318>
    80014e36:	6c1100ef          	jal	80025cf6 <printf>
    80014e3a:	02900513          	li	a0,41
    80014e3e:	4c30f0ef          	jal	80024b00 <putchar>
    80014e42:	f9aff06f          	j	800145dc <software_interrupt_msi+0x5d0>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0",
    80014e46:	00013517          	auipc	a0,0x13
    80014e4a:	f3250513          	addi	a0,a0,-206 # 80027d78 <__func__.0+0x318>
    80014e4e:	6a9100ef          	jal	80025cf6 <printf>
    80014e52:	02900513          	li	a0,41
    80014e56:	4ab0f0ef          	jal	80024b00 <putchar>
    80014e5a:	d7cff06f          	j	800143d6 <software_interrupt_msi+0x3ca>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=0",
    80014e5e:	00013517          	auipc	a0,0x13
    80014e62:	f1a50513          	addi	a0,a0,-230 # 80027d78 <__func__.0+0x318>
    80014e66:	691100ef          	jal	80025cf6 <printf>
    80014e6a:	02900513          	li	a0,41
    80014e6e:	4930f0ef          	jal	80024b00 <putchar>
    80014e72:	cd8ff06f          	j	8001434a <software_interrupt_msi+0x33e>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    80014e76:	00034717          	auipc	a4,0x34
    80014e7a:	19e72703          	lw	a4,414(a4) # 80049014 <excpt+0x4>
    80014e7e:	478d                	li	a5,3
    80014e80:	00013597          	auipc	a1,0x13
    80014e84:	ea058593          	addi	a1,a1,-352 # 80027d20 <__func__.0+0x2c0>
    80014e88:	88f706e3          	beq	a4,a5,80014714 <software_interrupt_msi+0x708>
    80014e8c:	00013597          	auipc	a1,0x13
    80014e90:	ea458593          	addi	a1,a1,-348 # 80027d30 <__func__.0+0x2d0>
    80014e94:	881ff06f          	j	80014714 <software_interrupt_msi+0x708>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80014e98:	00034717          	auipc	a4,0x34
    80014e9c:	17c72703          	lw	a4,380(a4) # 80049014 <excpt+0x4>
    80014ea0:	4791                	li	a5,4
    80014ea2:	00013597          	auipc	a1,0x13
    80014ea6:	e7e58593          	addi	a1,a1,-386 # 80027d20 <__func__.0+0x2c0>
    80014eaa:	baf70ee3          	beq	a4,a5,80014a66 <software_interrupt_msi+0xa5a>
    80014eae:	00013597          	auipc	a1,0x13
    80014eb2:	e8258593          	addi	a1,a1,-382 # 80027d30 <__func__.0+0x2d0>
    80014eb6:	be45                	j	80014a66 <software_interrupt_msi+0xa5a>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80014eb8:	00034717          	auipc	a4,0x34
    80014ebc:	15c72703          	lw	a4,348(a4) # 80049014 <excpt+0x4>
    80014ec0:	4791                	li	a5,4
    80014ec2:	00013597          	auipc	a1,0x13
    80014ec6:	e5e58593          	addi	a1,a1,-418 # 80027d20 <__func__.0+0x2c0>
    80014eca:	00f71463          	bne	a4,a5,80014ed2 <software_interrupt_msi+0xec6>
    80014ece:	9d4ff06f          	j	800140a2 <software_interrupt_msi+0x96>
    80014ed2:	00013597          	auipc	a1,0x13
    80014ed6:	e5e58593          	addi	a1,a1,-418 # 80027d30 <__func__.0+0x2d0>
    80014eda:	9c8ff06f          	j	800140a2 <software_interrupt_msi+0x96>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80014ede:	00034717          	auipc	a4,0x34
    80014ee2:	13672703          	lw	a4,310(a4) # 80049014 <excpt+0x4>
    80014ee6:	4791                	li	a5,4
    80014ee8:	00013597          	auipc	a1,0x13
    80014eec:	e3858593          	addi	a1,a1,-456 # 80027d20 <__func__.0+0x2c0>
    80014ef0:	f6f70663          	beq	a4,a5,8001465c <software_interrupt_msi+0x650>
    80014ef4:	00013597          	auipc	a1,0x13
    80014ef8:	e3c58593          	addi	a1,a1,-452 # 80027d30 <__func__.0+0x2d0>
    80014efc:	f60ff06f          	j	8001465c <software_interrupt_msi+0x650>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80014f00:	00034717          	auipc	a4,0x34
    80014f04:	11472703          	lw	a4,276(a4) # 80049014 <excpt+0x4>
    80014f08:	4791                	li	a5,4
    80014f0a:	00013597          	auipc	a1,0x13
    80014f0e:	e1658593          	addi	a1,a1,-490 # 80027d20 <__func__.0+0x2c0>
    80014f12:	94f707e3          	beq	a4,a5,80014860 <software_interrupt_msi+0x854>
    80014f16:	00013597          	auipc	a1,0x13
    80014f1a:	e1a58593          	addi	a1,a1,-486 # 80027d30 <__func__.0+0x2d0>
    80014f1e:	b289                	j	80014860 <software_interrupt_msi+0x854>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80014f20:	00034717          	auipc	a4,0x34
    80014f24:	0f472703          	lw	a4,244(a4) # 80049014 <excpt+0x4>
    80014f28:	4791                	li	a5,4
    80014f2a:	00013597          	auipc	a1,0x13
    80014f2e:	df658593          	addi	a1,a1,-522 # 80027d20 <__func__.0+0x2c0>
    80014f32:	d2f70263          	beq	a4,a5,80014456 <software_interrupt_msi+0x44a>
    80014f36:	00013597          	auipc	a1,0x13
    80014f3a:	dfa58593          	addi	a1,a1,-518 # 80027d30 <__func__.0+0x2d0>
    80014f3e:	d18ff06f          	j	80014456 <software_interrupt_msi+0x44a>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80014f42:	00034717          	auipc	a4,0x34
    80014f46:	0d272703          	lw	a4,210(a4) # 80049014 <excpt+0x4>
    80014f4a:	478d                	li	a5,3
    80014f4c:	00013597          	auipc	a1,0x13
    80014f50:	dd458593          	addi	a1,a1,-556 # 80027d20 <__func__.0+0x2c0>
    80014f54:	daf70e63          	beq	a4,a5,80014510 <software_interrupt_msi+0x504>
    80014f58:	00013597          	auipc	a1,0x13
    80014f5c:	dd858593          	addi	a1,a1,-552 # 80027d30 <__func__.0+0x2d0>
    80014f60:	db0ff06f          	j	80014510 <software_interrupt_msi+0x504>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80014f64:	00034717          	auipc	a4,0x34
    80014f68:	0b072703          	lw	a4,176(a4) # 80049014 <excpt+0x4>
    80014f6c:	478d                	li	a5,3
    80014f6e:	00013597          	auipc	a1,0x13
    80014f72:	db258593          	addi	a1,a1,-590 # 80027d20 <__func__.0+0x2c0>
    80014f76:	baf704e3          	beq	a4,a5,80014b1e <software_interrupt_msi+0xb12>
    80014f7a:	00013597          	auipc	a1,0x13
    80014f7e:	db658593          	addi	a1,a1,-586 # 80027d30 <__func__.0+0x2d0>
    80014f82:	be71                	j	80014b1e <software_interrupt_msi+0xb12>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80014f84:	00034717          	auipc	a4,0x34
    80014f88:	09072703          	lw	a4,144(a4) # 80049014 <excpt+0x4>
    80014f8c:	478d                	li	a5,3
    80014f8e:	00013597          	auipc	a1,0x13
    80014f92:	d9258593          	addi	a1,a1,-622 # 80027d20 <__func__.0+0x2c0>
    80014f96:	98f702e3          	beq	a4,a5,8001491a <software_interrupt_msi+0x90e>
    80014f9a:	00013597          	auipc	a1,0x13
    80014f9e:	d9658593          	addi	a1,a1,-618 # 80027d30 <__func__.0+0x2d0>
    80014fa2:	baa5                	j	8001491a <software_interrupt_msi+0x90e>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80014fa4:	00034417          	auipc	s0,0x34
    80014fa8:	07042403          	lw	s0,112(s0) # 80049014 <excpt+0x4>
    80014fac:	1471                	addi	s0,s0,-4
    80014fae:	00143413          	seqz	s0,s0
    80014fb2:	948ff06f          	j	800140fa <software_interrupt_msi+0xee>

0000000080014fb6 <software_interrupt_ssi>:



bool software_interrupt_ssi() {
    80014fb6:	1101                	addi	sp,sp,-32

    TEST_START();
    80014fb8:	00012597          	auipc	a1,0x12
    80014fbc:	b4058593          	addi	a1,a1,-1216 # 80026af8 <__func__.1>
    80014fc0:	00013517          	auipc	a0,0x13
    80014fc4:	d8050513          	addi	a0,a0,-640 # 80027d40 <__func__.0+0x2e0>
bool software_interrupt_ssi() {
    80014fc8:	ec06                	sd	ra,24(sp)
    80014fca:	e822                	sd	s0,16(sp)
    80014fcc:	e426                	sd	s1,8(sp)
    TEST_START();
    80014fce:	529100ef          	jal	80025cf6 <printf>
    80014fd2:	4529                	li	a0,10
    80014fd4:	32d0f0ef          	jal	80024b00 <putchar>

    TEST_SETUP_EXCEPT();
    80014fd8:	0330000f          	fence	rw,rw
    80014fdc:	00034497          	auipc	s1,0x34
    80014fe0:	03448493          	addi	s1,s1,52 # 80049010 <excpt>
    80014fe4:	4785                	li	a5,1
    80014fe6:	00034717          	auipc	a4,0x34
    80014fea:	06073123          	sd	zero,98(a4) # 80049048 <excpt+0x38>
    80014fee:	00f49023          	sh	a5,0(s1)
    80014ff2:	0330000f          	fence	rw,rw

    //HS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSIE拉高
    goto_priv(PRIV_M);
    80014ff6:	4511                	li	a0,4
    80014ff8:	bffeb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);    
    80014ffc:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SSIE);
    80015000:	10416073          	csrsi	sie,2
    CSRW(CSR_MIDELEG,0);
    80015004:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    80015008:	14416073          	csrsi	sip,2

    goto_priv(PRIV_HS);
    8001500c:	450d                	li	a0,3
    8001500e:	be9eb0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80015012:	08200593          	li	a1,130
    80015016:	00017617          	auipc	a2,0x17
    8001501a:	7f260613          	addi	a2,a2,2034 # 8002c808 <__func__.0+0x4da8>
    8001501e:	00013517          	auipc	a0,0x13
    80015022:	d3a50513          	addi	a0,a0,-710 # 80027d58 <__func__.0+0x2f8>
    80015026:	4d1100ef          	jal	80025cf6 <printf>
    8001502a:	00034797          	auipc	a5,0x34
    8001502e:	fe77c783          	lbu	a5,-25(a5) # 80049011 <excpt+0x1>
    80015032:	00013597          	auipc	a1,0x13
    80015036:	cfe58593          	addi	a1,a1,-770 # 80027d30 <__func__.0+0x2d0>
    8001503a:	c799                	beqz	a5,80015048 <software_interrupt_ssi+0x92>
    8001503c:	57fd                	li	a5,-1
    8001503e:	6498                	ld	a4,8(s1)
    80015040:	17fe                	slli	a5,a5,0x3f
    80015042:	0785                	addi	a5,a5,1
    80015044:	36f705e3          	beq	a4,a5,80015bae <software_interrupt_ssi+0xbf8>
    80015048:	00013517          	auipc	a0,0x13
    8001504c:	d2850513          	addi	a0,a0,-728 # 80027d70 <__func__.0+0x310>
    80015050:	4a7100ef          	jal	80025cf6 <printf>
    80015054:	00034797          	auipc	a5,0x34
    80015058:	fbd7c783          	lbu	a5,-67(a5) # 80049011 <excpt+0x1>
    8001505c:	c799                	beqz	a5,8001506a <software_interrupt_ssi+0xb4>
    8001505e:	57fd                	li	a5,-1
    80015060:	6498                	ld	a4,8(s1)
    80015062:	17fe                	slli	a5,a5,0x3f
    80015064:	0785                	addi	a5,a5,1
    80015066:	18f70be3          	beq	a4,a5,800159fc <software_interrupt_ssi+0xa46>
    8001506a:	00013517          	auipc	a0,0x13
    8001506e:	d0e50513          	addi	a0,a0,-754 # 80027d78 <__func__.0+0x318>
    80015072:	485100ef          	jal	80025cf6 <printf>
    80015076:	02900513          	li	a0,41
    8001507a:	2870f0ef          	jal	80024b00 <putchar>
    8001507e:	4529                	li	a0,10
    80015080:	2810f0ef          	jal	80024b00 <putchar>
    80015084:	00034797          	auipc	a5,0x34
    80015088:	f8d7c783          	lbu	a5,-115(a5) # 80049011 <excpt+0x1>
    8001508c:	4401                	li	s0,0
    8001508e:	c799                	beqz	a5,8001509c <software_interrupt_ssi+0xe6>
    80015090:	57fd                	li	a5,-1
    80015092:	6498                	ld	a4,8(s1)
    80015094:	17fe                	slli	a5,a5,0x3f
    80015096:	0785                	addi	a5,a5,1
    80015098:	28f700e3          	beq	a4,a5,80015b18 <software_interrupt_ssi+0xb62>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSE拉高，有代理
    TEST_SETUP_EXCEPT();
    8001509c:	0330000f          	fence	rw,rw
    800150a0:	4785                	li	a5,1
    800150a2:	00034717          	auipc	a4,0x34
    800150a6:	fa073323          	sd	zero,-90(a4) # 80049048 <excpt+0x38>
    800150aa:	00f49023          	sh	a5,0(s1)
    800150ae:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800150b2:	4511                	li	a0,4
    800150b4:	b43eb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800150b8:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    800150bc:	57fd                	li	a5,-1
    800150be:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    800150c2:	10416073          	csrsi	sie,2
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    800150c6:	14416073          	csrsi	sip,2

    goto_priv(PRIV_HS);
    800150ca:	450d                	li	a0,3
    800150cc:	b2beb0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    800150d0:	08200593          	li	a1,130
    800150d4:	00017617          	auipc	a2,0x17
    800150d8:	7a460613          	addi	a2,a2,1956 # 8002c878 <__func__.0+0x4e18>
    800150dc:	00013517          	auipc	a0,0x13
    800150e0:	c7c50513          	addi	a0,a0,-900 # 80027d58 <__func__.0+0x2f8>
    800150e4:	413100ef          	jal	80025cf6 <printf>
    800150e8:	00034797          	auipc	a5,0x34
    800150ec:	f297c783          	lbu	a5,-215(a5) # 80049011 <excpt+0x1>
    800150f0:	00013597          	auipc	a1,0x13
    800150f4:	c4058593          	addi	a1,a1,-960 # 80027d30 <__func__.0+0x2d0>
    800150f8:	c799                	beqz	a5,80015106 <software_interrupt_ssi+0x150>
    800150fa:	57fd                	li	a5,-1
    800150fc:	6498                	ld	a4,8(s1)
    800150fe:	17fe                	slli	a5,a5,0x3f
    80015100:	0785                	addi	a5,a5,1
    80015102:	22f704e3          	beq	a4,a5,80015b2a <software_interrupt_ssi+0xb74>
    80015106:	00013517          	auipc	a0,0x13
    8001510a:	c6a50513          	addi	a0,a0,-918 # 80027d70 <__func__.0+0x310>
    8001510e:	3e9100ef          	jal	80025cf6 <printf>
    80015112:	00034797          	auipc	a5,0x34
    80015116:	eff7c783          	lbu	a5,-257(a5) # 80049011 <excpt+0x1>
    8001511a:	c799                	beqz	a5,80015128 <software_interrupt_ssi+0x172>
    8001511c:	57fd                	li	a5,-1
    8001511e:	6498                	ld	a4,8(s1)
    80015120:	17fe                	slli	a5,a5,0x3f
    80015122:	0785                	addi	a5,a5,1
    80015124:	0cf703e3          	beq	a4,a5,800159ea <software_interrupt_ssi+0xa34>
    80015128:	00013517          	auipc	a0,0x13
    8001512c:	c5050513          	addi	a0,a0,-944 # 80027d78 <__func__.0+0x318>
    80015130:	3c7100ef          	jal	80025cf6 <printf>
    80015134:	02900513          	li	a0,41
    80015138:	1c90f0ef          	jal	80024b00 <putchar>
    8001513c:	4529                	li	a0,10
    8001513e:	1c30f0ef          	jal	80024b00 <putchar>
    80015142:	c801                	beqz	s0,80015152 <software_interrupt_ssi+0x19c>
    80015144:	00034797          	auipc	a5,0x34
    80015148:	ecd7c783          	lbu	a5,-307(a5) # 80049011 <excpt+0x1>
    8001514c:	4401                	li	s0,0
    8001514e:	06079fe3          	bnez	a5,800159cc <software_interrupt_ssi+0xa16>
        excpt.priv == PRIV_HS
    ); 


    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=1，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    80015152:	0330000f          	fence	rw,rw
    80015156:	4785                	li	a5,1
    80015158:	00034717          	auipc	a4,0x34
    8001515c:	ee073823          	sd	zero,-272(a4) # 80049048 <excpt+0x38>
    80015160:	00f49023          	sh	a5,0(s1)
    80015164:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80015168:	4511                	li	a0,4
    8001516a:	a8deb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    8001516e:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    80015172:	10417073          	csrci	sie,2
    CSRS(CSR_SIP,SIP_SSIP);    
    80015176:	14416073          	csrsi	sip,2

    goto_priv(PRIV_HS);
    8001517a:	450d                	li	a0,3
    8001517c:	a7beb0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    80015180:	08200593          	li	a1,130
    80015184:	00017617          	auipc	a2,0x17
    80015188:	76460613          	addi	a2,a2,1892 # 8002c8e8 <__func__.0+0x4e88>
    8001518c:	00013517          	auipc	a0,0x13
    80015190:	bcc50513          	addi	a0,a0,-1076 # 80027d58 <__func__.0+0x2f8>
    80015194:	363100ef          	jal	80025cf6 <printf>
    80015198:	00034797          	auipc	a5,0x34
    8001519c:	e797c783          	lbu	a5,-391(a5) # 80049011 <excpt+0x1>
    800151a0:	00013597          	auipc	a1,0x13
    800151a4:	b9058593          	addi	a1,a1,-1136 # 80027d30 <__func__.0+0x2d0>
    800151a8:	e789                	bnez	a5,800151b2 <software_interrupt_ssi+0x1fc>
    800151aa:	00013597          	auipc	a1,0x13
    800151ae:	b7658593          	addi	a1,a1,-1162 # 80027d20 <__func__.0+0x2c0>
    800151b2:	00013517          	auipc	a0,0x13
    800151b6:	bbe50513          	addi	a0,a0,-1090 # 80027d70 <__func__.0+0x310>
    800151ba:	33d100ef          	jal	80025cf6 <printf>
    800151be:	00034797          	auipc	a5,0x34
    800151c2:	e537c783          	lbu	a5,-429(a5) # 80049011 <excpt+0x1>
    800151c6:	0c0791e3          	bnez	a5,80015a88 <software_interrupt_ssi+0xad2>
    800151ca:	4529                	li	a0,10
    800151cc:	1350f0ef          	jal	80024b00 <putchar>
    800151d0:	c419                	beqz	s0,800151de <software_interrupt_ssi+0x228>
    800151d2:	00034417          	auipc	s0,0x34
    800151d6:	e3f44403          	lbu	s0,-449(s0) # 80049011 <excpt+0x1>
    800151da:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1
    TEST_SETUP_EXCEPT();
    800151de:	0330000f          	fence	rw,rw
    800151e2:	4785                	li	a5,1
    800151e4:	00034717          	auipc	a4,0x34
    800151e8:	e6073223          	sd	zero,-412(a4) # 80049048 <excpt+0x38>
    800151ec:	00f49023          	sh	a5,0(s1)
    800151f0:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800151f4:	4511                	li	a0,4
    800151f6:	a01eb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800151fa:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,0);  
    800151fe:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIE,SIE_SSIE);
    80015202:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80015206:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    8001520a:	450d                	li	a0,3
    8001520c:	9ebeb0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80015210:	08200593          	li	a1,130
    80015214:	00017617          	auipc	a2,0x17
    80015218:	72c60613          	addi	a2,a2,1836 # 8002c940 <__func__.0+0x4ee0>
    8001521c:	00013517          	auipc	a0,0x13
    80015220:	b3c50513          	addi	a0,a0,-1220 # 80027d58 <__func__.0+0x2f8>
    80015224:	2d3100ef          	jal	80025cf6 <printf>
    80015228:	00034797          	auipc	a5,0x34
    8001522c:	de97c783          	lbu	a5,-535(a5) # 80049011 <excpt+0x1>
    80015230:	00013597          	auipc	a1,0x13
    80015234:	b0058593          	addi	a1,a1,-1280 # 80027d30 <__func__.0+0x2d0>
    80015238:	c799                	beqz	a5,80015246 <software_interrupt_ssi+0x290>
    8001523a:	57fd                	li	a5,-1
    8001523c:	6498                	ld	a4,8(s1)
    8001523e:	17fe                	slli	a5,a5,0x3f
    80015240:	0785                	addi	a5,a5,1
    80015242:	10f705e3          	beq	a4,a5,80015b4c <software_interrupt_ssi+0xb96>
    80015246:	00013517          	auipc	a0,0x13
    8001524a:	b2a50513          	addi	a0,a0,-1238 # 80027d70 <__func__.0+0x310>
    8001524e:	2a9100ef          	jal	80025cf6 <printf>
    80015252:	00034797          	auipc	a5,0x34
    80015256:	dbf7c783          	lbu	a5,-577(a5) # 80049011 <excpt+0x1>
    8001525a:	c799                	beqz	a5,80015268 <software_interrupt_ssi+0x2b2>
    8001525c:	57fd                	li	a5,-1
    8001525e:	6498                	ld	a4,8(s1)
    80015260:	17fe                	slli	a5,a5,0x3f
    80015262:	0785                	addi	a5,a5,1
    80015264:	7cf70d63          	beq	a4,a5,80015a3e <software_interrupt_ssi+0xa88>
    80015268:	00013517          	auipc	a0,0x13
    8001526c:	b1050513          	addi	a0,a0,-1264 # 80027d78 <__func__.0+0x318>
    80015270:	287100ef          	jal	80025cf6 <printf>
    80015274:	02900513          	li	a0,41
    80015278:	0890f0ef          	jal	80024b00 <putchar>
    8001527c:	4529                	li	a0,10
    8001527e:	0830f0ef          	jal	80024b00 <putchar>
    80015282:	c801                	beqz	s0,80015292 <software_interrupt_ssi+0x2dc>
    80015284:	00034797          	auipc	a5,0x34
    80015288:	d8d7c783          	lbu	a5,-627(a5) # 80049011 <excpt+0x1>
    8001528c:	4401                	li	s0,0
    8001528e:	72079063          	bnez	a5,800159ae <software_interrupt_ssi+0x9f8>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    );

    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1，有代理
    TEST_SETUP_EXCEPT();
    80015292:	0330000f          	fence	rw,rw
    80015296:	4785                	li	a5,1
    80015298:	00034717          	auipc	a4,0x34
    8001529c:	da073823          	sd	zero,-592(a4) # 80049048 <excpt+0x38>
    800152a0:	00f49023          	sh	a5,0(s1)
    800152a4:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800152a8:	4511                	li	a0,4
    800152aa:	94deb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800152ae:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    800152b2:	57fd                	li	a5,-1
    800152b4:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    800152b8:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    800152bc:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    800152c0:	450d                	li	a0,3
    800152c2:	935eb0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    800152c6:	08200593          	li	a1,130
    800152ca:	00017617          	auipc	a2,0x17
    800152ce:	6e660613          	addi	a2,a2,1766 # 8002c9b0 <__func__.0+0x4f50>
    800152d2:	00013517          	auipc	a0,0x13
    800152d6:	a8650513          	addi	a0,a0,-1402 # 80027d58 <__func__.0+0x2f8>
    800152da:	21d100ef          	jal	80025cf6 <printf>
    800152de:	00034797          	auipc	a5,0x34
    800152e2:	d337c783          	lbu	a5,-717(a5) # 80049011 <excpt+0x1>
    800152e6:	00013597          	auipc	a1,0x13
    800152ea:	a4a58593          	addi	a1,a1,-1462 # 80027d30 <__func__.0+0x2d0>
    800152ee:	c799                	beqz	a5,800152fc <software_interrupt_ssi+0x346>
    800152f0:	57fd                	li	a5,-1
    800152f2:	6498                	ld	a4,8(s1)
    800152f4:	17fe                	slli	a5,a5,0x3f
    800152f6:	0785                	addi	a5,a5,1
    800152f8:	0cf70ce3          	beq	a4,a5,80015bd0 <software_interrupt_ssi+0xc1a>
    800152fc:	00013517          	auipc	a0,0x13
    80015300:	a7450513          	addi	a0,a0,-1420 # 80027d70 <__func__.0+0x310>
    80015304:	1f3100ef          	jal	80025cf6 <printf>
    80015308:	00034797          	auipc	a5,0x34
    8001530c:	d097c783          	lbu	a5,-759(a5) # 80049011 <excpt+0x1>
    80015310:	c799                	beqz	a5,8001531e <software_interrupt_ssi+0x368>
    80015312:	57fd                	li	a5,-1
    80015314:	6498                	ld	a4,8(s1)
    80015316:	17fe                	slli	a5,a5,0x3f
    80015318:	0785                	addi	a5,a5,1
    8001531a:	72f70b63          	beq	a4,a5,80015a50 <software_interrupt_ssi+0xa9a>
    8001531e:	00013517          	auipc	a0,0x13
    80015322:	a5a50513          	addi	a0,a0,-1446 # 80027d78 <__func__.0+0x318>
    80015326:	1d1100ef          	jal	80025cf6 <printf>
    8001532a:	02900513          	li	a0,41
    8001532e:	7d20f0ef          	jal	80024b00 <putchar>
    80015332:	4529                	li	a0,10
    80015334:	7cc0f0ef          	jal	80024b00 <putchar>
    80015338:	c801                	beqz	s0,80015348 <software_interrupt_ssi+0x392>
    8001533a:	00034797          	auipc	a5,0x34
    8001533e:	cd77c783          	lbu	a5,-809(a5) # 80049011 <excpt+0x1>
    80015342:	4401                	li	s0,0
    80015344:	64079763          	bnez	a5,80015992 <software_interrupt_ssi+0x9dc>
        excpt.priv == PRIV_HS
    );


    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    80015348:	0330000f          	fence	rw,rw
    8001534c:	4785                	li	a5,1
    8001534e:	00034717          	auipc	a4,0x34
    80015352:	ce073d23          	sd	zero,-774(a4) # 80049048 <excpt+0x38>
    80015356:	00f49023          	sh	a5,0(s1)
    8001535a:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001535e:	4511                	li	a0,4
    80015360:	897eb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80015364:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    80015368:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    8001536c:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    80015370:	450d                	li	a0,3
    80015372:	885eb0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    80015376:	08200593          	li	a1,130
    8001537a:	00017617          	auipc	a2,0x17
    8001537e:	69660613          	addi	a2,a2,1686 # 8002ca10 <__func__.0+0x4fb0>
    80015382:	00013517          	auipc	a0,0x13
    80015386:	9d650513          	addi	a0,a0,-1578 # 80027d58 <__func__.0+0x2f8>
    8001538a:	16d100ef          	jal	80025cf6 <printf>
    8001538e:	00034797          	auipc	a5,0x34
    80015392:	c837c783          	lbu	a5,-893(a5) # 80049011 <excpt+0x1>
    80015396:	00013597          	auipc	a1,0x13
    8001539a:	99a58593          	addi	a1,a1,-1638 # 80027d30 <__func__.0+0x2d0>
    8001539e:	e789                	bnez	a5,800153a8 <software_interrupt_ssi+0x3f2>
    800153a0:	00013597          	auipc	a1,0x13
    800153a4:	98058593          	addi	a1,a1,-1664 # 80027d20 <__func__.0+0x2c0>
    800153a8:	00013517          	auipc	a0,0x13
    800153ac:	9c850513          	addi	a0,a0,-1592 # 80027d70 <__func__.0+0x310>
    800153b0:	147100ef          	jal	80025cf6 <printf>
    800153b4:	00034797          	auipc	a5,0x34
    800153b8:	c5d7c783          	lbu	a5,-931(a5) # 80049011 <excpt+0x1>
    800153bc:	6e079d63          	bnez	a5,80015ab6 <software_interrupt_ssi+0xb00>
    800153c0:	4529                	li	a0,10
    800153c2:	73e0f0ef          	jal	80024b00 <putchar>
    800153c6:	c419                	beqz	s0,800153d4 <software_interrupt_ssi+0x41e>
    800153c8:	00034417          	auipc	s0,0x34
    800153cc:	c4944403          	lbu	s0,-951(s0) # 80049011 <excpt+0x1>
    800153d0:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //HS模式下产生软件中断，sstatus.sie=0，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    800153d4:	0330000f          	fence	rw,rw
    800153d8:	4785                	li	a5,1
    800153da:	00034717          	auipc	a4,0x34
    800153de:	c6073723          	sd	zero,-914(a4) # 80049048 <excpt+0x38>
    800153e2:	00f49023          	sh	a5,0(s1)
    800153e6:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800153ea:	4511                	li	a0,4
    800153ec:	80beb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800153f0:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    800153f4:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    800153f8:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    800153fc:	450d                	li	a0,3
    800153fe:	ff8eb0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    80015402:	08200593          	li	a1,130
    80015406:	00017617          	auipc	a2,0x17
    8001540a:	65a60613          	addi	a2,a2,1626 # 8002ca60 <__func__.0+0x5000>
    8001540e:	00013517          	auipc	a0,0x13
    80015412:	94a50513          	addi	a0,a0,-1718 # 80027d58 <__func__.0+0x2f8>
    80015416:	0e1100ef          	jal	80025cf6 <printf>
    8001541a:	00034797          	auipc	a5,0x34
    8001541e:	bf77c783          	lbu	a5,-1033(a5) # 80049011 <excpt+0x1>
    80015422:	00013597          	auipc	a1,0x13
    80015426:	90e58593          	addi	a1,a1,-1778 # 80027d30 <__func__.0+0x2d0>
    8001542a:	e789                	bnez	a5,80015434 <software_interrupt_ssi+0x47e>
    8001542c:	00013597          	auipc	a1,0x13
    80015430:	8f458593          	addi	a1,a1,-1804 # 80027d20 <__func__.0+0x2c0>
    80015434:	00013517          	auipc	a0,0x13
    80015438:	93c50513          	addi	a0,a0,-1732 # 80027d70 <__func__.0+0x310>
    8001543c:	0bb100ef          	jal	80025cf6 <printf>
    80015440:	00034797          	auipc	a5,0x34
    80015444:	bd17c783          	lbu	a5,-1071(a5) # 80049011 <excpt+0x1>
    80015448:	64079c63          	bnez	a5,80015aa0 <software_interrupt_ssi+0xaea>
    8001544c:	4529                	li	a0,10
    8001544e:	6b20f0ef          	jal	80024b00 <putchar>
    80015452:	c419                	beqz	s0,80015460 <software_interrupt_ssi+0x4aa>
    80015454:	00034417          	auipc	s0,0x34
    80015458:	bbd44403          	lbu	s0,-1091(s0) # 80049011 <excpt+0x1>
    8001545c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

//VS-mode下

    TEST_SETUP_EXCEPT();
    80015460:	0330000f          	fence	rw,rw
    80015464:	4785                	li	a5,1
    80015466:	00034717          	auipc	a4,0x34
    8001546a:	be073123          	sd	zero,-1054(a4) # 80049048 <excpt+0x38>
    8001546e:	00f49023          	sh	a5,0(s1)
    80015472:	0330000f          	fence	rw,rw
    //VS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSIE拉高
    TEST_SETUP_EXCEPT();
    80015476:	0330000f          	fence	rw,rw
    8001547a:	00034717          	auipc	a4,0x34
    8001547e:	bc073723          	sd	zero,-1074(a4) # 80049048 <excpt+0x38>
    80015482:	00f49023          	sh	a5,0(s1)
    80015486:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001548a:	4511                	li	a0,4
    8001548c:	f6aeb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);    
    80015490:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SSIE);
    80015494:	10416073          	csrsi	sie,2
    CSRW(CSR_MIDELEG,0);
    80015498:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    8001549c:	14416073          	csrsi	sip,2

    goto_priv(PRIV_VS);
    800154a0:	4509                	li	a0,2
    800154a2:	f54eb0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    800154a6:	08200593          	li	a1,130
    800154aa:	00017617          	auipc	a2,0x17
    800154ae:	60660613          	addi	a2,a2,1542 # 8002cab0 <__func__.0+0x5050>
    800154b2:	00013517          	auipc	a0,0x13
    800154b6:	8a650513          	addi	a0,a0,-1882 # 80027d58 <__func__.0+0x2f8>
    800154ba:	03d100ef          	jal	80025cf6 <printf>
    800154be:	00034797          	auipc	a5,0x34
    800154c2:	b537c783          	lbu	a5,-1197(a5) # 80049011 <excpt+0x1>
    800154c6:	00013597          	auipc	a1,0x13
    800154ca:	86a58593          	addi	a1,a1,-1942 # 80027d30 <__func__.0+0x2d0>
    800154ce:	c799                	beqz	a5,800154dc <software_interrupt_ssi+0x526>
    800154d0:	57fd                	li	a5,-1
    800154d2:	6498                	ld	a4,8(s1)
    800154d4:	17fe                	slli	a5,a5,0x3f
    800154d6:	0785                	addi	a5,a5,1
    800154d8:	70f70d63          	beq	a4,a5,80015bf2 <software_interrupt_ssi+0xc3c>
    800154dc:	00013517          	auipc	a0,0x13
    800154e0:	89450513          	addi	a0,a0,-1900 # 80027d70 <__func__.0+0x310>
    800154e4:	013100ef          	jal	80025cf6 <printf>
    800154e8:	00034797          	auipc	a5,0x34
    800154ec:	b297c783          	lbu	a5,-1239(a5) # 80049011 <excpt+0x1>
    800154f0:	c799                	beqz	a5,800154fe <software_interrupt_ssi+0x548>
    800154f2:	57fd                	li	a5,-1
    800154f4:	6498                	ld	a4,8(s1)
    800154f6:	17fe                	slli	a5,a5,0x3f
    800154f8:	0785                	addi	a5,a5,1
    800154fa:	50f70a63          	beq	a4,a5,80015a0e <software_interrupt_ssi+0xa58>
    800154fe:	00013517          	auipc	a0,0x13
    80015502:	87a50513          	addi	a0,a0,-1926 # 80027d78 <__func__.0+0x318>
    80015506:	7f0100ef          	jal	80025cf6 <printf>
    8001550a:	02900513          	li	a0,41
    8001550e:	5f20f0ef          	jal	80024b00 <putchar>
    80015512:	4529                	li	a0,10
    80015514:	5ec0f0ef          	jal	80024b00 <putchar>
    80015518:	c801                	beqz	s0,80015528 <software_interrupt_ssi+0x572>
    8001551a:	00034797          	auipc	a5,0x34
    8001551e:	af77c783          	lbu	a5,-1289(a5) # 80049011 <excpt+0x1>
    80015522:	4401                	li	s0,0
    80015524:	44079963          	bnez	a5,80015976 <software_interrupt_ssi+0x9c0>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSE拉高，有代理
    TEST_SETUP_EXCEPT();
    80015528:	0330000f          	fence	rw,rw
    8001552c:	4785                	li	a5,1
    8001552e:	00034717          	auipc	a4,0x34
    80015532:	b0073d23          	sd	zero,-1254(a4) # 80049048 <excpt+0x38>
    80015536:	00f49023          	sh	a5,0(s1)
    8001553a:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001553e:	4511                	li	a0,4
    80015540:	eb6eb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80015544:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    80015548:	57fd                	li	a5,-1
    8001554a:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    8001554e:	10416073          	csrsi	sie,2
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    80015552:	14416073          	csrsi	sip,2

    goto_priv(PRIV_VS);
    80015556:	4509                	li	a0,2
    80015558:	e9eeb0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    8001555c:	08200593          	li	a1,130
    80015560:	00017617          	auipc	a2,0x17
    80015564:	5c060613          	addi	a2,a2,1472 # 8002cb20 <__func__.0+0x50c0>
    80015568:	00012517          	auipc	a0,0x12
    8001556c:	7f050513          	addi	a0,a0,2032 # 80027d58 <__func__.0+0x2f8>
    80015570:	786100ef          	jal	80025cf6 <printf>
    80015574:	00034797          	auipc	a5,0x34
    80015578:	a9d7c783          	lbu	a5,-1379(a5) # 80049011 <excpt+0x1>
    8001557c:	00012597          	auipc	a1,0x12
    80015580:	7b458593          	addi	a1,a1,1972 # 80027d30 <__func__.0+0x2d0>
    80015584:	c799                	beqz	a5,80015592 <software_interrupt_ssi+0x5dc>
    80015586:	57fd                	li	a5,-1
    80015588:	6498                	ld	a4,8(s1)
    8001558a:	17fe                	slli	a5,a5,0x3f
    8001558c:	0785                	addi	a5,a5,1
    8001558e:	60f70063          	beq	a4,a5,80015b8e <software_interrupt_ssi+0xbd8>
    80015592:	00012517          	auipc	a0,0x12
    80015596:	7de50513          	addi	a0,a0,2014 # 80027d70 <__func__.0+0x310>
    8001559a:	75c100ef          	jal	80025cf6 <printf>
    8001559e:	00034797          	auipc	a5,0x34
    800155a2:	a737c783          	lbu	a5,-1421(a5) # 80049011 <excpt+0x1>
    800155a6:	c799                	beqz	a5,800155b4 <software_interrupt_ssi+0x5fe>
    800155a8:	57fd                	li	a5,-1
    800155aa:	6498                	ld	a4,8(s1)
    800155ac:	17fe                	slli	a5,a5,0x3f
    800155ae:	0785                	addi	a5,a5,1
    800155b0:	46f70763          	beq	a4,a5,80015a1e <software_interrupt_ssi+0xa68>
    800155b4:	00012517          	auipc	a0,0x12
    800155b8:	7c450513          	addi	a0,a0,1988 # 80027d78 <__func__.0+0x318>
    800155bc:	73a100ef          	jal	80025cf6 <printf>
    800155c0:	02900513          	li	a0,41
    800155c4:	53c0f0ef          	jal	80024b00 <putchar>
    800155c8:	4529                	li	a0,10
    800155ca:	5360f0ef          	jal	80024b00 <putchar>
    800155ce:	c801                	beqz	s0,800155de <software_interrupt_ssi+0x628>
    800155d0:	00034797          	auipc	a5,0x34
    800155d4:	a417c783          	lbu	a5,-1471(a5) # 80049011 <excpt+0x1>
    800155d8:	4401                	li	s0,0
    800155da:	38079063          	bnez	a5,8001595a <software_interrupt_ssi+0x9a4>
        excpt.priv == PRIV_HS
    ); 


    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=1，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    800155de:	0330000f          	fence	rw,rw
    800155e2:	4785                	li	a5,1
    800155e4:	00034717          	auipc	a4,0x34
    800155e8:	a6073223          	sd	zero,-1436(a4) # 80049048 <excpt+0x38>
    800155ec:	00f49023          	sh	a5,0(s1)
    800155f0:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800155f4:	4511                	li	a0,4
    800155f6:	e00eb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800155fa:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    800155fe:	10417073          	csrci	sie,2
    CSRS(CSR_SIP,SIP_SSIP);    
    80015602:	14416073          	csrsi	sip,2

    goto_priv(PRIV_VS);
    80015606:	4509                	li	a0,2
    80015608:	deeeb0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    8001560c:	08200593          	li	a1,130
    80015610:	00017617          	auipc	a2,0x17
    80015614:	58060613          	addi	a2,a2,1408 # 8002cb90 <__func__.0+0x5130>
    80015618:	00012517          	auipc	a0,0x12
    8001561c:	74050513          	addi	a0,a0,1856 # 80027d58 <__func__.0+0x2f8>
    80015620:	6d6100ef          	jal	80025cf6 <printf>
    80015624:	00034797          	auipc	a5,0x34
    80015628:	9ed7c783          	lbu	a5,-1555(a5) # 80049011 <excpt+0x1>
    8001562c:	00012597          	auipc	a1,0x12
    80015630:	70458593          	addi	a1,a1,1796 # 80027d30 <__func__.0+0x2d0>
    80015634:	e789                	bnez	a5,8001563e <software_interrupt_ssi+0x688>
    80015636:	00012597          	auipc	a1,0x12
    8001563a:	6ea58593          	addi	a1,a1,1770 # 80027d20 <__func__.0+0x2c0>
    8001563e:	00012517          	auipc	a0,0x12
    80015642:	73250513          	addi	a0,a0,1842 # 80027d70 <__func__.0+0x310>
    80015646:	6b0100ef          	jal	80025cf6 <printf>
    8001564a:	00034797          	auipc	a5,0x34
    8001564e:	9c77c783          	lbu	a5,-1593(a5) # 80049011 <excpt+0x1>
    80015652:	42079063          	bnez	a5,80015a72 <software_interrupt_ssi+0xabc>
    80015656:	4529                	li	a0,10
    80015658:	4a80f0ef          	jal	80024b00 <putchar>
    8001565c:	c419                	beqz	s0,8001566a <software_interrupt_ssi+0x6b4>
    8001565e:	00034417          	auipc	s0,0x34
    80015662:	9b344403          	lbu	s0,-1613(s0) # 80049011 <excpt+0x1>
    80015666:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1
    TEST_SETUP_EXCEPT();
    8001566a:	0330000f          	fence	rw,rw
    8001566e:	4785                	li	a5,1
    80015670:	00034717          	auipc	a4,0x34
    80015674:	9c073c23          	sd	zero,-1576(a4) # 80049048 <excpt+0x38>
    80015678:	00f49023          	sh	a5,0(s1)
    8001567c:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80015680:	4511                	li	a0,4
    80015682:	d74eb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80015686:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,0);  
    8001568a:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIE,SIE_SSIE);
    8001568e:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80015692:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    80015696:	4509                	li	a0,2
    80015698:	d5eeb0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    8001569c:	08200593          	li	a1,130
    800156a0:	00017617          	auipc	a2,0x17
    800156a4:	54860613          	addi	a2,a2,1352 # 8002cbe8 <__func__.0+0x5188>
    800156a8:	00012517          	auipc	a0,0x12
    800156ac:	6b050513          	addi	a0,a0,1712 # 80027d58 <__func__.0+0x2f8>
    800156b0:	646100ef          	jal	80025cf6 <printf>
    800156b4:	00034797          	auipc	a5,0x34
    800156b8:	95d7c783          	lbu	a5,-1699(a5) # 80049011 <excpt+0x1>
    800156bc:	00012597          	auipc	a1,0x12
    800156c0:	67458593          	addi	a1,a1,1652 # 80027d30 <__func__.0+0x2d0>
    800156c4:	c799                	beqz	a5,800156d2 <software_interrupt_ssi+0x71c>
    800156c6:	57fd                	li	a5,-1
    800156c8:	6498                	ld	a4,8(s1)
    800156ca:	17fe                	slli	a5,a5,0x3f
    800156cc:	0785                	addi	a5,a5,1
    800156ce:	42f70563          	beq	a4,a5,80015af8 <software_interrupt_ssi+0xb42>
    800156d2:	00012517          	auipc	a0,0x12
    800156d6:	69e50513          	addi	a0,a0,1694 # 80027d70 <__func__.0+0x310>
    800156da:	61c100ef          	jal	80025cf6 <printf>
    800156de:	00034797          	auipc	a5,0x34
    800156e2:	9337c783          	lbu	a5,-1741(a5) # 80049011 <excpt+0x1>
    800156e6:	c799                	beqz	a5,800156f4 <software_interrupt_ssi+0x73e>
    800156e8:	57fd                	li	a5,-1
    800156ea:	6498                	ld	a4,8(s1)
    800156ec:	17fe                	slli	a5,a5,0x3f
    800156ee:	0785                	addi	a5,a5,1
    800156f0:	36f70963          	beq	a4,a5,80015a62 <software_interrupt_ssi+0xaac>
    800156f4:	00012517          	auipc	a0,0x12
    800156f8:	68450513          	addi	a0,a0,1668 # 80027d78 <__func__.0+0x318>
    800156fc:	5fa100ef          	jal	80025cf6 <printf>
    80015700:	02900513          	li	a0,41
    80015704:	3fc0f0ef          	jal	80024b00 <putchar>
    80015708:	4529                	li	a0,10
    8001570a:	3f60f0ef          	jal	80024b00 <putchar>
    8001570e:	c801                	beqz	s0,8001571e <software_interrupt_ssi+0x768>
    80015710:	00034797          	auipc	a5,0x34
    80015714:	9017c783          	lbu	a5,-1791(a5) # 80049011 <excpt+0x1>
    80015718:	4401                	li	s0,0
    8001571a:	22079263          	bnez	a5,8001593e <software_interrupt_ssi+0x988>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    );

    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1，有代理
    TEST_SETUP_EXCEPT();
    8001571e:	0330000f          	fence	rw,rw
    80015722:	4785                	li	a5,1
    80015724:	00034717          	auipc	a4,0x34
    80015728:	92073223          	sd	zero,-1756(a4) # 80049048 <excpt+0x38>
    8001572c:	00f49023          	sh	a5,0(s1)
    80015730:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80015734:	4511                	li	a0,4
    80015736:	cc0eb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    8001573a:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    8001573e:	57fd                	li	a5,-1
    80015740:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    80015744:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80015748:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    8001574c:	4509                	li	a0,2
    8001574e:	ca8eb0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80015752:	08200593          	li	a1,130
    80015756:	00017617          	auipc	a2,0x17
    8001575a:	50260613          	addi	a2,a2,1282 # 8002cc58 <__func__.0+0x51f8>
    8001575e:	00012517          	auipc	a0,0x12
    80015762:	5fa50513          	addi	a0,a0,1530 # 80027d58 <__func__.0+0x2f8>
    80015766:	590100ef          	jal	80025cf6 <printf>
    8001576a:	00034797          	auipc	a5,0x34
    8001576e:	8a77c783          	lbu	a5,-1881(a5) # 80049011 <excpt+0x1>
    80015772:	00012597          	auipc	a1,0x12
    80015776:	5be58593          	addi	a1,a1,1470 # 80027d30 <__func__.0+0x2d0>
    8001577a:	c799                	beqz	a5,80015788 <software_interrupt_ssi+0x7d2>
    8001577c:	57fd                	li	a5,-1
    8001577e:	6498                	ld	a4,8(s1)
    80015780:	17fe                	slli	a5,a5,0x3f
    80015782:	0785                	addi	a5,a5,1
    80015784:	3ef70563          	beq	a4,a5,80015b6e <software_interrupt_ssi+0xbb8>
    80015788:	00012517          	auipc	a0,0x12
    8001578c:	5e850513          	addi	a0,a0,1512 # 80027d70 <__func__.0+0x310>
    80015790:	566100ef          	jal	80025cf6 <printf>
    80015794:	00034797          	auipc	a5,0x34
    80015798:	87d7c783          	lbu	a5,-1923(a5) # 80049011 <excpt+0x1>
    8001579c:	c799                	beqz	a5,800157aa <software_interrupt_ssi+0x7f4>
    8001579e:	57fd                	li	a5,-1
    800157a0:	6498                	ld	a4,8(s1)
    800157a2:	17fe                	slli	a5,a5,0x3f
    800157a4:	0785                	addi	a5,a5,1
    800157a6:	28f70463          	beq	a4,a5,80015a2e <software_interrupt_ssi+0xa78>
    800157aa:	00012517          	auipc	a0,0x12
    800157ae:	5ce50513          	addi	a0,a0,1486 # 80027d78 <__func__.0+0x318>
    800157b2:	544100ef          	jal	80025cf6 <printf>
    800157b6:	02900513          	li	a0,41
    800157ba:	3460f0ef          	jal	80024b00 <putchar>
    800157be:	4529                	li	a0,10
    800157c0:	3400f0ef          	jal	80024b00 <putchar>
    800157c4:	c801                	beqz	s0,800157d4 <software_interrupt_ssi+0x81e>
    800157c6:	00034797          	auipc	a5,0x34
    800157ca:	84b7c783          	lbu	a5,-1973(a5) # 80049011 <excpt+0x1>
    800157ce:	4401                	li	s0,0
    800157d0:	14079963          	bnez	a5,80015922 <software_interrupt_ssi+0x96c>
        excpt.priv == PRIV_HS
    );


    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    800157d4:	0330000f          	fence	rw,rw
    800157d8:	4785                	li	a5,1
    800157da:	00034717          	auipc	a4,0x34
    800157de:	86073723          	sd	zero,-1938(a4) # 80049048 <excpt+0x38>
    800157e2:	00f49023          	sh	a5,0(s1)
    800157e6:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800157ea:	4511                	li	a0,4
    800157ec:	c0aeb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800157f0:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    800157f4:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    800157f8:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    800157fc:	4509                	li	a0,2
    800157fe:	bf8eb0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    80015802:	08200593          	li	a1,130
    80015806:	00017617          	auipc	a2,0x17
    8001580a:	4b260613          	addi	a2,a2,1202 # 8002ccb8 <__func__.0+0x5258>
    8001580e:	00012517          	auipc	a0,0x12
    80015812:	54a50513          	addi	a0,a0,1354 # 80027d58 <__func__.0+0x2f8>
    80015816:	4e0100ef          	jal	80025cf6 <printf>
    8001581a:	00033797          	auipc	a5,0x33
    8001581e:	7f77c783          	lbu	a5,2039(a5) # 80049011 <excpt+0x1>
    80015822:	00012597          	auipc	a1,0x12
    80015826:	50e58593          	addi	a1,a1,1294 # 80027d30 <__func__.0+0x2d0>
    8001582a:	e789                	bnez	a5,80015834 <software_interrupt_ssi+0x87e>
    8001582c:	00012597          	auipc	a1,0x12
    80015830:	4f458593          	addi	a1,a1,1268 # 80027d20 <__func__.0+0x2c0>
    80015834:	00012517          	auipc	a0,0x12
    80015838:	53c50513          	addi	a0,a0,1340 # 80027d70 <__func__.0+0x310>
    8001583c:	4ba100ef          	jal	80025cf6 <printf>
    80015840:	00033797          	auipc	a5,0x33
    80015844:	7d17c783          	lbu	a5,2001(a5) # 80049011 <excpt+0x1>
    80015848:	28079d63          	bnez	a5,80015ae2 <software_interrupt_ssi+0xb2c>
    8001584c:	4529                	li	a0,10
    8001584e:	2b20f0ef          	jal	80024b00 <putchar>
    80015852:	c419                	beqz	s0,80015860 <software_interrupt_ssi+0x8aa>
    80015854:	00033417          	auipc	s0,0x33
    80015858:	7bd44403          	lbu	s0,1981(s0) # 80049011 <excpt+0x1>
    8001585c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //VS模式下产生软件中断，sstatus.sie=0，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    80015860:	0330000f          	fence	rw,rw
    80015864:	4785                	li	a5,1
    80015866:	00033717          	auipc	a4,0x33
    8001586a:	7e073123          	sd	zero,2018(a4) # 80049048 <excpt+0x38>
    8001586e:	00f49023          	sh	a5,0(s1)
    80015872:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80015876:	4511                	li	a0,4
    80015878:	b7eeb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    8001587c:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    80015880:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80015884:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    80015888:	4509                	li	a0,2
    8001588a:	b6ceb0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    8001588e:	08200593          	li	a1,130
    80015892:	00017617          	auipc	a2,0x17
    80015896:	47660613          	addi	a2,a2,1142 # 8002cd08 <__func__.0+0x52a8>
    8001589a:	00012517          	auipc	a0,0x12
    8001589e:	4be50513          	addi	a0,a0,1214 # 80027d58 <__func__.0+0x2f8>
    800158a2:	454100ef          	jal	80025cf6 <printf>
    800158a6:	00033797          	auipc	a5,0x33
    800158aa:	76b7c783          	lbu	a5,1899(a5) # 80049011 <excpt+0x1>
    800158ae:	00012597          	auipc	a1,0x12
    800158b2:	48258593          	addi	a1,a1,1154 # 80027d30 <__func__.0+0x2d0>
    800158b6:	e789                	bnez	a5,800158c0 <software_interrupt_ssi+0x90a>
    800158b8:	00012597          	auipc	a1,0x12
    800158bc:	46858593          	addi	a1,a1,1128 # 80027d20 <__func__.0+0x2c0>
    800158c0:	00012517          	auipc	a0,0x12
    800158c4:	4b050513          	addi	a0,a0,1200 # 80027d70 <__func__.0+0x310>
    800158c8:	42e100ef          	jal	80025cf6 <printf>
    800158cc:	00033797          	auipc	a5,0x33
    800158d0:	7457c783          	lbu	a5,1861(a5) # 80049011 <excpt+0x1>
    800158d4:	1e079c63          	bnez	a5,80015acc <software_interrupt_ssi+0xb16>
    800158d8:	4529                	li	a0,10
    800158da:	2260f0ef          	jal	80024b00 <putchar>
    800158de:	c411                	beqz	s0,800158ea <software_interrupt_ssi+0x934>
    800158e0:	00033797          	auipc	a5,0x33
    800158e4:	7317c783          	lbu	a5,1841(a5) # 80049011 <excpt+0x1>
    800158e8:	c79d                	beqz	a5,80015916 <software_interrupt_ssi+0x960>
    800158ea:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    800158ec:	00012597          	auipc	a1,0x12
    800158f0:	44458593          	addi	a1,a1,1092 # 80027d30 <__func__.0+0x2d0>
    800158f4:	00012517          	auipc	a0,0x12
    800158f8:	4e450513          	addi	a0,a0,1252 # 80027dd8 <__func__.0+0x378>
    800158fc:	3fa100ef          	jal	80025cf6 <printf>
    80015900:	4511                	li	a0,4
    80015902:	af4eb0ef          	jal	80000bf6 <goto_priv>
    80015906:	ba7eb0ef          	jal	800014ac <reset_state>
}
    8001590a:	60e2                	ld	ra,24(sp)
    8001590c:	8522                	mv	a0,s0
    8001590e:	6442                	ld	s0,16(sp)
    80015910:	64a2                	ld	s1,8(sp)
    80015912:	6105                	addi	sp,sp,32
    80015914:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    80015916:	4405                	li	s0,1
    TEST_END();
    80015918:	00012597          	auipc	a1,0x12
    8001591c:	40858593          	addi	a1,a1,1032 # 80027d20 <__func__.0+0x2c0>
    80015920:	bfd1                	j	800158f4 <software_interrupt_ssi+0x93e>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80015922:	57fd                	li	a5,-1
    80015924:	6498                	ld	a4,8(s1)
    80015926:	17fe                	slli	a5,a5,0x3f
    80015928:	0785                	addi	a5,a5,1
    8001592a:	eaf715e3          	bne	a4,a5,800157d4 <software_interrupt_ssi+0x81e>
    8001592e:	00033417          	auipc	s0,0x33
    80015932:	6e642403          	lw	s0,1766(s0) # 80049014 <excpt+0x4>
    80015936:	1475                	addi	s0,s0,-3
    80015938:	00143413          	seqz	s0,s0
    8001593c:	bd61                	j	800157d4 <software_interrupt_ssi+0x81e>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    8001593e:	57fd                	li	a5,-1
    80015940:	6498                	ld	a4,8(s1)
    80015942:	17fe                	slli	a5,a5,0x3f
    80015944:	0785                	addi	a5,a5,1
    80015946:	dcf71ce3          	bne	a4,a5,8001571e <software_interrupt_ssi+0x768>
    8001594a:	00033417          	auipc	s0,0x33
    8001594e:	6ca42403          	lw	s0,1738(s0) # 80049014 <excpt+0x4>
    80015952:	1471                	addi	s0,s0,-4
    80015954:	00143413          	seqz	s0,s0
    80015958:	b3d9                	j	8001571e <software_interrupt_ssi+0x768>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    8001595a:	57fd                	li	a5,-1
    8001595c:	6498                	ld	a4,8(s1)
    8001595e:	17fe                	slli	a5,a5,0x3f
    80015960:	0785                	addi	a5,a5,1
    80015962:	c6f71ee3          	bne	a4,a5,800155de <software_interrupt_ssi+0x628>
    80015966:	00033417          	auipc	s0,0x33
    8001596a:	6ae42403          	lw	s0,1710(s0) # 80049014 <excpt+0x4>
    8001596e:	1475                	addi	s0,s0,-3
    80015970:	00143413          	seqz	s0,s0
    80015974:	b1ad                	j	800155de <software_interrupt_ssi+0x628>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80015976:	57fd                	li	a5,-1
    80015978:	6498                	ld	a4,8(s1)
    8001597a:	17fe                	slli	a5,a5,0x3f
    8001597c:	0785                	addi	a5,a5,1
    8001597e:	baf715e3          	bne	a4,a5,80015528 <software_interrupt_ssi+0x572>
    80015982:	00033417          	auipc	s0,0x33
    80015986:	69242403          	lw	s0,1682(s0) # 80049014 <excpt+0x4>
    8001598a:	1471                	addi	s0,s0,-4
    8001598c:	00143413          	seqz	s0,s0
    80015990:	be61                	j	80015528 <software_interrupt_ssi+0x572>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80015992:	57fd                	li	a5,-1
    80015994:	6498                	ld	a4,8(s1)
    80015996:	17fe                	slli	a5,a5,0x3f
    80015998:	0785                	addi	a5,a5,1
    8001599a:	9af717e3          	bne	a4,a5,80015348 <software_interrupt_ssi+0x392>
    8001599e:	00033417          	auipc	s0,0x33
    800159a2:	67642403          	lw	s0,1654(s0) # 80049014 <excpt+0x4>
    800159a6:	1475                	addi	s0,s0,-3
    800159a8:	00143413          	seqz	s0,s0
    800159ac:	ba71                	j	80015348 <software_interrupt_ssi+0x392>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    800159ae:	57fd                	li	a5,-1
    800159b0:	6498                	ld	a4,8(s1)
    800159b2:	17fe                	slli	a5,a5,0x3f
    800159b4:	0785                	addi	a5,a5,1
    800159b6:	8cf71ee3          	bne	a4,a5,80015292 <software_interrupt_ssi+0x2dc>
    800159ba:	00033417          	auipc	s0,0x33
    800159be:	65a42403          	lw	s0,1626(s0) # 80049014 <excpt+0x4>
    800159c2:	1471                	addi	s0,s0,-4
    800159c4:	00143413          	seqz	s0,s0
    800159c8:	8cbff06f          	j	80015292 <software_interrupt_ssi+0x2dc>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    800159cc:	57fd                	li	a5,-1
    800159ce:	6498                	ld	a4,8(s1)
    800159d0:	17fe                	slli	a5,a5,0x3f
    800159d2:	0785                	addi	a5,a5,1
    800159d4:	f6f71f63          	bne	a4,a5,80015152 <software_interrupt_ssi+0x19c>
    800159d8:	00033417          	auipc	s0,0x33
    800159dc:	63c42403          	lw	s0,1596(s0) # 80049014 <excpt+0x4>
    800159e0:	1475                	addi	s0,s0,-3
    800159e2:	00143413          	seqz	s0,s0
    800159e6:	f6cff06f          	j	80015152 <software_interrupt_ssi+0x19c>
    800159ea:	00033717          	auipc	a4,0x33
    800159ee:	62a72703          	lw	a4,1578(a4) # 80049014 <excpt+0x4>
    800159f2:	478d                	li	a5,3
    800159f4:	f2f71a63          	bne	a4,a5,80015128 <software_interrupt_ssi+0x172>
    800159f8:	f44ff06f          	j	8001513c <software_interrupt_ssi+0x186>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    800159fc:	00033717          	auipc	a4,0x33
    80015a00:	61872703          	lw	a4,1560(a4) # 80049014 <excpt+0x4>
    80015a04:	4791                	li	a5,4
    80015a06:	e6f71263          	bne	a4,a5,8001506a <software_interrupt_ssi+0xb4>
    80015a0a:	e74ff06f          	j	8001507e <software_interrupt_ssi+0xc8>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80015a0e:	00033717          	auipc	a4,0x33
    80015a12:	60672703          	lw	a4,1542(a4) # 80049014 <excpt+0x4>
    80015a16:	4791                	li	a5,4
    80015a18:	aef713e3          	bne	a4,a5,800154fe <software_interrupt_ssi+0x548>
    80015a1c:	bcdd                	j	80015512 <software_interrupt_ssi+0x55c>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80015a1e:	00033717          	auipc	a4,0x33
    80015a22:	5f672703          	lw	a4,1526(a4) # 80049014 <excpt+0x4>
    80015a26:	478d                	li	a5,3
    80015a28:	b8f716e3          	bne	a4,a5,800155b4 <software_interrupt_ssi+0x5fe>
    80015a2c:	be71                	j	800155c8 <software_interrupt_ssi+0x612>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80015a2e:	00033717          	auipc	a4,0x33
    80015a32:	5e672703          	lw	a4,1510(a4) # 80049014 <excpt+0x4>
    80015a36:	478d                	li	a5,3
    80015a38:	d6f719e3          	bne	a4,a5,800157aa <software_interrupt_ssi+0x7f4>
    80015a3c:	b349                	j	800157be <software_interrupt_ssi+0x808>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80015a3e:	00033717          	auipc	a4,0x33
    80015a42:	5d672703          	lw	a4,1494(a4) # 80049014 <excpt+0x4>
    80015a46:	4791                	li	a5,4
    80015a48:	82f710e3          	bne	a4,a5,80015268 <software_interrupt_ssi+0x2b2>
    80015a4c:	831ff06f          	j	8001527c <software_interrupt_ssi+0x2c6>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80015a50:	00033717          	auipc	a4,0x33
    80015a54:	5c472703          	lw	a4,1476(a4) # 80049014 <excpt+0x4>
    80015a58:	478d                	li	a5,3
    80015a5a:	8cf712e3          	bne	a4,a5,8001531e <software_interrupt_ssi+0x368>
    80015a5e:	8d5ff06f          	j	80015332 <software_interrupt_ssi+0x37c>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80015a62:	00033717          	auipc	a4,0x33
    80015a66:	5b272703          	lw	a4,1458(a4) # 80049014 <excpt+0x4>
    80015a6a:	4791                	li	a5,4
    80015a6c:	c8f714e3          	bne	a4,a5,800156f4 <software_interrupt_ssi+0x73e>
    80015a70:	b961                	j	80015708 <software_interrupt_ssi+0x752>
    TEST_ASSERT("VS mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    80015a72:	00012517          	auipc	a0,0x12
    80015a76:	30650513          	addi	a0,a0,774 # 80027d78 <__func__.0+0x318>
    80015a7a:	27c100ef          	jal	80025cf6 <printf>
    80015a7e:	02900513          	li	a0,41
    80015a82:	07e0f0ef          	jal	80024b00 <putchar>
    80015a86:	bec1                	j	80015656 <software_interrupt_ssi+0x6a0>
    TEST_ASSERT("hs mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    80015a88:	00012517          	auipc	a0,0x12
    80015a8c:	2f050513          	addi	a0,a0,752 # 80027d78 <__func__.0+0x318>
    80015a90:	266100ef          	jal	80025cf6 <printf>
    80015a94:	02900513          	li	a0,41
    80015a98:	0680f0ef          	jal	80024b00 <putchar>
    80015a9c:	f2eff06f          	j	800151ca <software_interrupt_ssi+0x214>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    80015aa0:	00012517          	auipc	a0,0x12
    80015aa4:	2d850513          	addi	a0,a0,728 # 80027d78 <__func__.0+0x318>
    80015aa8:	24e100ef          	jal	80025cf6 <printf>
    80015aac:	02900513          	li	a0,41
    80015ab0:	0500f0ef          	jal	80024b00 <putchar>
    80015ab4:	ba61                	j	8001544c <software_interrupt_ssi+0x496>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    80015ab6:	00012517          	auipc	a0,0x12
    80015aba:	2c250513          	addi	a0,a0,706 # 80027d78 <__func__.0+0x318>
    80015abe:	238100ef          	jal	80025cf6 <printf>
    80015ac2:	02900513          	li	a0,41
    80015ac6:	03a0f0ef          	jal	80024b00 <putchar>
    80015aca:	b8dd                	j	800153c0 <software_interrupt_ssi+0x40a>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    80015acc:	00012517          	auipc	a0,0x12
    80015ad0:	2ac50513          	addi	a0,a0,684 # 80027d78 <__func__.0+0x318>
    80015ad4:	222100ef          	jal	80025cf6 <printf>
    80015ad8:	02900513          	li	a0,41
    80015adc:	0240f0ef          	jal	80024b00 <putchar>
    80015ae0:	bbe5                	j	800158d8 <software_interrupt_ssi+0x922>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    80015ae2:	00012517          	auipc	a0,0x12
    80015ae6:	29650513          	addi	a0,a0,662 # 80027d78 <__func__.0+0x318>
    80015aea:	20c100ef          	jal	80025cf6 <printf>
    80015aee:	02900513          	li	a0,41
    80015af2:	00e0f0ef          	jal	80024b00 <putchar>
    80015af6:	bb99                	j	8001584c <software_interrupt_ssi+0x896>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80015af8:	00033717          	auipc	a4,0x33
    80015afc:	51c72703          	lw	a4,1308(a4) # 80049014 <excpt+0x4>
    80015b00:	4791                	li	a5,4
    80015b02:	00012597          	auipc	a1,0x12
    80015b06:	21e58593          	addi	a1,a1,542 # 80027d20 <__func__.0+0x2c0>
    80015b0a:	bcf704e3          	beq	a4,a5,800156d2 <software_interrupt_ssi+0x71c>
    80015b0e:	00012597          	auipc	a1,0x12
    80015b12:	22258593          	addi	a1,a1,546 # 80027d30 <__func__.0+0x2d0>
    80015b16:	be75                	j	800156d2 <software_interrupt_ssi+0x71c>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80015b18:	00033417          	auipc	s0,0x33
    80015b1c:	4fc42403          	lw	s0,1276(s0) # 80049014 <excpt+0x4>
    80015b20:	1471                	addi	s0,s0,-4
    80015b22:	00143413          	seqz	s0,s0
    80015b26:	d76ff06f          	j	8001509c <software_interrupt_ssi+0xe6>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80015b2a:	00033717          	auipc	a4,0x33
    80015b2e:	4ea72703          	lw	a4,1258(a4) # 80049014 <excpt+0x4>
    80015b32:	478d                	li	a5,3
    80015b34:	00012597          	auipc	a1,0x12
    80015b38:	1ec58593          	addi	a1,a1,492 # 80027d20 <__func__.0+0x2c0>
    80015b3c:	dcf70563          	beq	a4,a5,80015106 <software_interrupt_ssi+0x150>
    80015b40:	00012597          	auipc	a1,0x12
    80015b44:	1f058593          	addi	a1,a1,496 # 80027d30 <__func__.0+0x2d0>
    80015b48:	dbeff06f          	j	80015106 <software_interrupt_ssi+0x150>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80015b4c:	00033717          	auipc	a4,0x33
    80015b50:	4c872703          	lw	a4,1224(a4) # 80049014 <excpt+0x4>
    80015b54:	4791                	li	a5,4
    80015b56:	00012597          	auipc	a1,0x12
    80015b5a:	1ca58593          	addi	a1,a1,458 # 80027d20 <__func__.0+0x2c0>
    80015b5e:	eef70463          	beq	a4,a5,80015246 <software_interrupt_ssi+0x290>
    80015b62:	00012597          	auipc	a1,0x12
    80015b66:	1ce58593          	addi	a1,a1,462 # 80027d30 <__func__.0+0x2d0>
    80015b6a:	edcff06f          	j	80015246 <software_interrupt_ssi+0x290>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80015b6e:	00033717          	auipc	a4,0x33
    80015b72:	4a672703          	lw	a4,1190(a4) # 80049014 <excpt+0x4>
    80015b76:	478d                	li	a5,3
    80015b78:	00012597          	auipc	a1,0x12
    80015b7c:	1a858593          	addi	a1,a1,424 # 80027d20 <__func__.0+0x2c0>
    80015b80:	c0f704e3          	beq	a4,a5,80015788 <software_interrupt_ssi+0x7d2>
    80015b84:	00012597          	auipc	a1,0x12
    80015b88:	1ac58593          	addi	a1,a1,428 # 80027d30 <__func__.0+0x2d0>
    80015b8c:	bef5                	j	80015788 <software_interrupt_ssi+0x7d2>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80015b8e:	00033717          	auipc	a4,0x33
    80015b92:	48672703          	lw	a4,1158(a4) # 80049014 <excpt+0x4>
    80015b96:	478d                	li	a5,3
    80015b98:	00012597          	auipc	a1,0x12
    80015b9c:	18858593          	addi	a1,a1,392 # 80027d20 <__func__.0+0x2c0>
    80015ba0:	9ef709e3          	beq	a4,a5,80015592 <software_interrupt_ssi+0x5dc>
    80015ba4:	00012597          	auipc	a1,0x12
    80015ba8:	18c58593          	addi	a1,a1,396 # 80027d30 <__func__.0+0x2d0>
    80015bac:	b2dd                	j	80015592 <software_interrupt_ssi+0x5dc>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80015bae:	00033717          	auipc	a4,0x33
    80015bb2:	46672703          	lw	a4,1126(a4) # 80049014 <excpt+0x4>
    80015bb6:	4791                	li	a5,4
    80015bb8:	00012597          	auipc	a1,0x12
    80015bbc:	16858593          	addi	a1,a1,360 # 80027d20 <__func__.0+0x2c0>
    80015bc0:	c8f70463          	beq	a4,a5,80015048 <software_interrupt_ssi+0x92>
    80015bc4:	00012597          	auipc	a1,0x12
    80015bc8:	16c58593          	addi	a1,a1,364 # 80027d30 <__func__.0+0x2d0>
    80015bcc:	c7cff06f          	j	80015048 <software_interrupt_ssi+0x92>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80015bd0:	00033717          	auipc	a4,0x33
    80015bd4:	44472703          	lw	a4,1092(a4) # 80049014 <excpt+0x4>
    80015bd8:	478d                	li	a5,3
    80015bda:	00012597          	auipc	a1,0x12
    80015bde:	14658593          	addi	a1,a1,326 # 80027d20 <__func__.0+0x2c0>
    80015be2:	f0f70d63          	beq	a4,a5,800152fc <software_interrupt_ssi+0x346>
    80015be6:	00012597          	auipc	a1,0x12
    80015bea:	14a58593          	addi	a1,a1,330 # 80027d30 <__func__.0+0x2d0>
    80015bee:	f0eff06f          	j	800152fc <software_interrupt_ssi+0x346>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80015bf2:	00033717          	auipc	a4,0x33
    80015bf6:	42272703          	lw	a4,1058(a4) # 80049014 <excpt+0x4>
    80015bfa:	4791                	li	a5,4
    80015bfc:	00012597          	auipc	a1,0x12
    80015c00:	12458593          	addi	a1,a1,292 # 80027d20 <__func__.0+0x2c0>
    80015c04:	8cf70ce3          	beq	a4,a5,800154dc <software_interrupt_ssi+0x526>
    80015c08:	00012597          	auipc	a1,0x12
    80015c0c:	12858593          	addi	a1,a1,296 # 80027d30 <__func__.0+0x2d0>
    80015c10:	8cdff06f          	j	800154dc <software_interrupt_ssi+0x526>

0000000080015c14 <software_interrupt_vssi>:


bool software_interrupt_vssi() {
    80015c14:	1141                	addi	sp,sp,-16

    TEST_START();
    80015c16:	00011597          	auipc	a1,0x11
    80015c1a:	efa58593          	addi	a1,a1,-262 # 80026b10 <__func__.0>
    80015c1e:	00012517          	auipc	a0,0x12
    80015c22:	12250513          	addi	a0,a0,290 # 80027d40 <__func__.0+0x2e0>
bool software_interrupt_vssi() {
    80015c26:	e406                	sd	ra,8(sp)
    80015c28:	e022                	sd	s0,0(sp)
    TEST_START();
    80015c2a:	0cc100ef          	jal	80025cf6 <printf>
    80015c2e:	4529                	li	a0,10
    80015c30:	6d10e0ef          	jal	80024b00 <putchar>

    TEST_SETUP_EXCEPT();
    80015c34:	0330000f          	fence	rw,rw
    80015c38:	00033797          	auipc	a5,0x33
    80015c3c:	3d878793          	addi	a5,a5,984 # 80049010 <excpt>
    80015c40:	4405                	li	s0,1
    80015c42:	0207bc23          	sd	zero,56(a5)
    80015c46:	00879023          	sh	s0,0(a5)
    80015c4a:	0330000f          	fence	rw,rw

    TEST_END();
    80015c4e:	00012597          	auipc	a1,0x12
    80015c52:	0d258593          	addi	a1,a1,210 # 80027d20 <__func__.0+0x2c0>
    80015c56:	00012517          	auipc	a0,0x12
    80015c5a:	18250513          	addi	a0,a0,386 # 80027dd8 <__func__.0+0x378>
    80015c5e:	098100ef          	jal	80025cf6 <printf>
    80015c62:	4511                	li	a0,4
    80015c64:	f93ea0ef          	jal	80000bf6 <goto_priv>
    80015c68:	845eb0ef          	jal	800014ac <reset_state>


    80015c6c:	60a2                	ld	ra,8(sp)
    80015c6e:	8522                	mv	a0,s0
    80015c70:	6402                	ld	s0,0(sp)
    80015c72:	0141                	addi	sp,sp,16
    80015c74:	8082                	ret

0000000080015c76 <instruction_page_fault_1>:
#include <rvh_test.h>
#include <page_tables.h>

bool instruction_page_fault_1(){
    80015c76:	1101                	addi	sp,sp,-32

    TEST_START();
    80015c78:	00011597          	auipc	a1,0x11
    80015c7c:	eb058593          	addi	a1,a1,-336 # 80026b28 <__func__.26>
    80015c80:	00012517          	auipc	a0,0x12
    80015c84:	0c050513          	addi	a0,a0,192 # 80027d40 <__func__.0+0x2e0>
bool instruction_page_fault_1(){
    80015c88:	ec06                	sd	ra,24(sp)
    80015c8a:	e822                	sd	s0,16(sp)
    80015c8c:	e426                	sd	s1,8(sp)
    TEST_START();
    80015c8e:	068100ef          	jal	80025cf6 <printf>
    80015c92:	4529                	li	a0,10
    80015c94:	66d0e0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    80015c98:	450d                	li	a0,3
    80015c9a:	f5dea0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80015c9e:	943ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015ca2:	b81ea0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80015ca6:	a0bea0ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_HS);
    80015caa:	450d                	li	a0,3
    80015cac:	f4bea0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80015cb0:	4509                	li	a0,2
    80015cb2:	e65ea0ef          	jal	80000b16 <set_prev_priv>

    //执行取指指令时，pte.v=0
    vaddr = hs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    80015cb6:	0330000f          	fence	rw,rw
    80015cba:	00033417          	auipc	s0,0x33
    80015cbe:	35640413          	addi	s0,s0,854 # 80049010 <excpt>
    80015cc2:	4785                	li	a5,1
    80015cc4:	00033717          	auipc	a4,0x33
    80015cc8:	38073223          	sd	zero,900(a4) # 80049048 <excpt+0x38>
    80015ccc:	00f41023          	sh	a5,0(s0)
    80015cd0:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    80015cd4:	400197b7          	lui	a5,0x40019
    80015cd8:	078a                	slli	a5,a5,0x2
    80015cda:	00000297          	auipc	t0,0x0
    80015cde:	00c28293          	addi	t0,t0,12 # 80015ce6 <instruction_page_fault_1+0x70>
    80015ce2:	02543c23          	sd	t0,56(s0)
    80015ce6:	8782                	jr	a5

    TEST_ASSERT("hs mode fetche instruction when pte.v=0 leads to IPF",
    80015ce8:	08200593          	li	a1,130
    80015cec:	00017617          	auipc	a2,0x17
    80015cf0:	06c60613          	addi	a2,a2,108 # 8002cd58 <__func__.0+0x52f8>
    80015cf4:	00012517          	auipc	a0,0x12
    80015cf8:	06450513          	addi	a0,a0,100 # 80027d58 <__func__.0+0x2f8>
    80015cfc:	7fb0f0ef          	jal	80025cf6 <printf>
    80015d00:	00033797          	auipc	a5,0x33
    80015d04:	3117c783          	lbu	a5,785(a5) # 80049011 <excpt+0x1>
    80015d08:	00012597          	auipc	a1,0x12
    80015d0c:	02858593          	addi	a1,a1,40 # 80027d30 <__func__.0+0x2d0>
    80015d10:	cf89                	beqz	a5,80015d2a <instruction_page_fault_1+0xb4>
    80015d12:	6418                	ld	a4,8(s0)
    80015d14:	47b1                	li	a5,12
    80015d16:	00012597          	auipc	a1,0x12
    80015d1a:	00a58593          	addi	a1,a1,10 # 80027d20 <__func__.0+0x2c0>
    80015d1e:	00f70663          	beq	a4,a5,80015d2a <instruction_page_fault_1+0xb4>
    80015d22:	00012597          	auipc	a1,0x12
    80015d26:	00e58593          	addi	a1,a1,14 # 80027d30 <__func__.0+0x2d0>
    80015d2a:	00012517          	auipc	a0,0x12
    80015d2e:	04650513          	addi	a0,a0,70 # 80027d70 <__func__.0+0x310>
    80015d32:	7c50f0ef          	jal	80025cf6 <printf>
    80015d36:	00033797          	auipc	a5,0x33
    80015d3a:	2db7c783          	lbu	a5,731(a5) # 80049011 <excpt+0x1>
    80015d3e:	c789                	beqz	a5,80015d48 <instruction_page_fault_1+0xd2>
    80015d40:	6418                	ld	a4,8(s0)
    80015d42:	47b1                	li	a5,12
    80015d44:	00f70c63          	beq	a4,a5,80015d5c <instruction_page_fault_1+0xe6>
    80015d48:	00012517          	auipc	a0,0x12
    80015d4c:	03050513          	addi	a0,a0,48 # 80027d78 <__func__.0+0x318>
    80015d50:	7a70f0ef          	jal	80025cf6 <printf>
    80015d54:	02900513          	li	a0,41
    80015d58:	5a90e0ef          	jal	80024b00 <putchar>
    80015d5c:	4529                	li	a0,10
    80015d5e:	5a30e0ef          	jal	80024b00 <putchar>
    80015d62:	00033797          	auipc	a5,0x33
    80015d66:	2af7c783          	lbu	a5,687(a5) # 80049011 <excpt+0x1>
    80015d6a:	4481                	li	s1,0
    80015d6c:	c789                	beqz	a5,80015d76 <instruction_page_fault_1+0x100>
    80015d6e:	6404                	ld	s1,8(s0)
    80015d70:	14d1                	addi	s1,s1,-12
    80015d72:	0014b493          	seqz	s1,s1
    );


    //执行取指指令时，pte.x=0
    vaddr = vs_page_base(VSRW_GRW);
    TEST_SETUP_EXCEPT();
    80015d76:	0330000f          	fence	rw,rw
    80015d7a:	4785                	li	a5,1
    80015d7c:	00033717          	auipc	a4,0x33
    80015d80:	2c073623          	sd	zero,716(a4) # 80049048 <excpt+0x38>
    80015d84:	00f41023          	sh	a5,0(s0)
    80015d88:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    80015d8c:	001007b7          	lui	a5,0x100
    80015d90:	05178793          	addi	a5,a5,81 # 100051 <STACK_SIZE+0x51>
    80015d94:	07b2                	slli	a5,a5,0xc
    80015d96:	00000297          	auipc	t0,0x0
    80015d9a:	00c28293          	addi	t0,t0,12 # 80015da2 <instruction_page_fault_1+0x12c>
    80015d9e:	02543c23          	sd	t0,56(s0)
    80015da2:	8782                	jr	a5

    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    80015da4:	08200593          	li	a1,130
    80015da8:	00017617          	auipc	a2,0x17
    80015dac:	fe860613          	addi	a2,a2,-24 # 8002cd90 <__func__.0+0x5330>
    80015db0:	00012517          	auipc	a0,0x12
    80015db4:	fa850513          	addi	a0,a0,-88 # 80027d58 <__func__.0+0x2f8>
    80015db8:	73f0f0ef          	jal	80025cf6 <printf>
    80015dbc:	00033797          	auipc	a5,0x33
    80015dc0:	2557c783          	lbu	a5,597(a5) # 80049011 <excpt+0x1>
    80015dc4:	00012597          	auipc	a1,0x12
    80015dc8:	f6c58593          	addi	a1,a1,-148 # 80027d30 <__func__.0+0x2d0>
    80015dcc:	cf89                	beqz	a5,80015de6 <instruction_page_fault_1+0x170>
    80015dce:	6418                	ld	a4,8(s0)
    80015dd0:	47b1                	li	a5,12
    80015dd2:	00012597          	auipc	a1,0x12
    80015dd6:	f4e58593          	addi	a1,a1,-178 # 80027d20 <__func__.0+0x2c0>
    80015dda:	00f70663          	beq	a4,a5,80015de6 <instruction_page_fault_1+0x170>
    80015dde:	00012597          	auipc	a1,0x12
    80015de2:	f5258593          	addi	a1,a1,-174 # 80027d30 <__func__.0+0x2d0>
    80015de6:	00012517          	auipc	a0,0x12
    80015dea:	f8a50513          	addi	a0,a0,-118 # 80027d70 <__func__.0+0x310>
    80015dee:	7090f0ef          	jal	80025cf6 <printf>
    80015df2:	00033797          	auipc	a5,0x33
    80015df6:	21f7c783          	lbu	a5,543(a5) # 80049011 <excpt+0x1>
    80015dfa:	c789                	beqz	a5,80015e04 <instruction_page_fault_1+0x18e>
    80015dfc:	6418                	ld	a4,8(s0)
    80015dfe:	47b1                	li	a5,12
    80015e00:	00f70c63          	beq	a4,a5,80015e18 <instruction_page_fault_1+0x1a2>
    80015e04:	00012517          	auipc	a0,0x12
    80015e08:	f7450513          	addi	a0,a0,-140 # 80027d78 <__func__.0+0x318>
    80015e0c:	6eb0f0ef          	jal	80025cf6 <printf>
    80015e10:	02900513          	li	a0,41
    80015e14:	4ed0e0ef          	jal	80024b00 <putchar>
    80015e18:	4529                	li	a0,10
    80015e1a:	4e70e0ef          	jal	80024b00 <putchar>
    80015e1e:	c095                	beqz	s1,80015e42 <instruction_page_fault_1+0x1cc>
    80015e20:	00033497          	auipc	s1,0x33
    80015e24:	1f14c483          	lbu	s1,497(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80015e28:	00012597          	auipc	a1,0x12
    80015e2c:	f0858593          	addi	a1,a1,-248 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    80015e30:	cc91                	beqz	s1,80015e4c <instruction_page_fault_1+0x1d6>
    80015e32:	6418                	ld	a4,8(s0)
    80015e34:	47b1                	li	a5,12
    TEST_END();
    80015e36:	00012597          	auipc	a1,0x12
    80015e3a:	eea58593          	addi	a1,a1,-278 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    80015e3e:	00f70763          	beq	a4,a5,80015e4c <instruction_page_fault_1+0x1d6>
    80015e42:	4481                	li	s1,0
    TEST_END();
    80015e44:	00012597          	auipc	a1,0x12
    80015e48:	eec58593          	addi	a1,a1,-276 # 80027d30 <__func__.0+0x2d0>
    80015e4c:	00012517          	auipc	a0,0x12
    80015e50:	f8c50513          	addi	a0,a0,-116 # 80027dd8 <__func__.0+0x378>
    80015e54:	6a30f0ef          	jal	80025cf6 <printf>
    80015e58:	4511                	li	a0,4
    80015e5a:	d9dea0ef          	jal	80000bf6 <goto_priv>
    80015e5e:	e4eeb0ef          	jal	800014ac <reset_state>
}
    80015e62:	60e2                	ld	ra,24(sp)
    80015e64:	6442                	ld	s0,16(sp)
    80015e66:	8526                	mv	a0,s1
    80015e68:	64a2                	ld	s1,8(sp)
    80015e6a:	6105                	addi	sp,sp,32
    80015e6c:	8082                	ret

0000000080015e6e <instruction_page_fault_2>:

bool instruction_page_fault_2(){
    80015e6e:	1101                	addi	sp,sp,-32

    TEST_START();
    80015e70:	00011597          	auipc	a1,0x11
    80015e74:	cd858593          	addi	a1,a1,-808 # 80026b48 <__func__.24>
    80015e78:	00012517          	auipc	a0,0x12
    80015e7c:	ec850513          	addi	a0,a0,-312 # 80027d40 <__func__.0+0x2e0>
bool instruction_page_fault_2(){
    80015e80:	ec06                	sd	ra,24(sp)
    80015e82:	e822                	sd	s0,16(sp)
    80015e84:	e426                	sd	s1,8(sp)
    TEST_START();
    80015e86:	6710f0ef          	jal	80025cf6 <printf>
    80015e8a:	4529                	li	a0,10
    80015e8c:	4750e0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    80015e90:	450d                	li	a0,3
    80015e92:	d65ea0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80015e96:	f4aea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015e9a:	989ea0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80015e9e:	813ea0ef          	jal	800006b0 <vspt_init>


    goto_priv(PRIV_HS);
    80015ea2:	450d                	li	a0,3
    80015ea4:	d53ea0ef          	jal	80000bf6 <goto_priv>

    //执行取指指令时，在HS模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80015ea8:	0330000f          	fence	rw,rw
    80015eac:	00033417          	auipc	s0,0x33
    80015eb0:	16440413          	addi	s0,s0,356 # 80049010 <excpt>
    80015eb4:	4785                	li	a5,1
    80015eb6:	00033717          	auipc	a4,0x33
    80015eba:	18073923          	sd	zero,402(a4) # 80049048 <excpt+0x38>
    80015ebe:	00f41023          	sh	a5,0(s0)
    80015ec2:	0330000f          	fence	rw,rw
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    TEST_EXEC_EXCEPT(vaddr); 
    80015ec6:	000807b7          	lui	a5,0x80
    80015eca:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80015ecc:	07b6                	slli	a5,a5,0xd
    80015ece:	00000297          	auipc	t0,0x0
    80015ed2:	00c28293          	addi	t0,t0,12 # 80015eda <instruction_page_fault_2+0x6c>
    80015ed6:	02543c23          	sd	t0,56(s0)
    80015eda:	8782                	jr	a5
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    80015edc:	08200593          	li	a1,130
    80015ee0:	00017617          	auipc	a2,0x17
    80015ee4:	ee860613          	addi	a2,a2,-280 # 8002cdc8 <__func__.0+0x5368>
    80015ee8:	00012517          	auipc	a0,0x12
    80015eec:	e7050513          	addi	a0,a0,-400 # 80027d58 <__func__.0+0x2f8>
    80015ef0:	6070f0ef          	jal	80025cf6 <printf>
    80015ef4:	00033797          	auipc	a5,0x33
    80015ef8:	11d7c783          	lbu	a5,285(a5) # 80049011 <excpt+0x1>
    80015efc:	00012597          	auipc	a1,0x12
    80015f00:	e3458593          	addi	a1,a1,-460 # 80027d30 <__func__.0+0x2d0>
    80015f04:	cf89                	beqz	a5,80015f1e <instruction_page_fault_2+0xb0>
    80015f06:	6418                	ld	a4,8(s0)
    80015f08:	47b1                	li	a5,12
    80015f0a:	00012597          	auipc	a1,0x12
    80015f0e:	e1658593          	addi	a1,a1,-490 # 80027d20 <__func__.0+0x2c0>
    80015f12:	00f70663          	beq	a4,a5,80015f1e <instruction_page_fault_2+0xb0>
    80015f16:	00012597          	auipc	a1,0x12
    80015f1a:	e1a58593          	addi	a1,a1,-486 # 80027d30 <__func__.0+0x2d0>
    80015f1e:	00012517          	auipc	a0,0x12
    80015f22:	e5250513          	addi	a0,a0,-430 # 80027d70 <__func__.0+0x310>
    80015f26:	5d10f0ef          	jal	80025cf6 <printf>
    80015f2a:	00033797          	auipc	a5,0x33
    80015f2e:	0e77c783          	lbu	a5,231(a5) # 80049011 <excpt+0x1>
    80015f32:	c789                	beqz	a5,80015f3c <instruction_page_fault_2+0xce>
    80015f34:	6418                	ld	a4,8(s0)
    80015f36:	47b1                	li	a5,12
    80015f38:	00f70c63          	beq	a4,a5,80015f50 <instruction_page_fault_2+0xe2>
    80015f3c:	00012517          	auipc	a0,0x12
    80015f40:	e3c50513          	addi	a0,a0,-452 # 80027d78 <__func__.0+0x318>
    80015f44:	5b30f0ef          	jal	80025cf6 <printf>
    80015f48:	02900513          	li	a0,41
    80015f4c:	3b50e0ef          	jal	80024b00 <putchar>
    80015f50:	4529                	li	a0,10
    80015f52:	3af0e0ef          	jal	80024b00 <putchar>
    80015f56:	00033497          	auipc	s1,0x33
    80015f5a:	0bb4c483          	lbu	s1,187(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80015f5e:	00012597          	auipc	a1,0x12
    80015f62:	dd258593          	addi	a1,a1,-558 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    80015f66:	cc91                	beqz	s1,80015f82 <instruction_page_fault_2+0x114>
    80015f68:	6418                	ld	a4,8(s0)
    80015f6a:	47b1                	li	a5,12
    TEST_END();
    80015f6c:	00012597          	auipc	a1,0x12
    80015f70:	db458593          	addi	a1,a1,-588 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    80015f74:	00f70763          	beq	a4,a5,80015f82 <instruction_page_fault_2+0x114>
    80015f78:	4481                	li	s1,0
    TEST_END();
    80015f7a:	00012597          	auipc	a1,0x12
    80015f7e:	db658593          	addi	a1,a1,-586 # 80027d30 <__func__.0+0x2d0>
    80015f82:	00012517          	auipc	a0,0x12
    80015f86:	e5650513          	addi	a0,a0,-426 # 80027dd8 <__func__.0+0x378>
    80015f8a:	56d0f0ef          	jal	80025cf6 <printf>
    80015f8e:	4511                	li	a0,4
    80015f90:	c67ea0ef          	jal	80000bf6 <goto_priv>
    80015f94:	d18eb0ef          	jal	800014ac <reset_state>
}
    80015f98:	60e2                	ld	ra,24(sp)
    80015f9a:	6442                	ld	s0,16(sp)
    80015f9c:	8526                	mv	a0,s1
    80015f9e:	64a2                	ld	s1,8(sp)
    80015fa0:	6105                	addi	sp,sp,32
    80015fa2:	8082                	ret

0000000080015fa4 <instruction_page_fault_3>:



bool instruction_page_fault_3(){
    80015fa4:	1101                	addi	sp,sp,-32

    TEST_START();
    80015fa6:	00011597          	auipc	a1,0x11
    80015faa:	bc258593          	addi	a1,a1,-1086 # 80026b68 <__func__.23>
    80015fae:	00012517          	auipc	a0,0x12
    80015fb2:	d9250513          	addi	a0,a0,-622 # 80027d40 <__func__.0+0x2e0>
bool instruction_page_fault_3(){
    80015fb6:	ec06                	sd	ra,24(sp)
    80015fb8:	e822                	sd	s0,16(sp)
    80015fba:	e426                	sd	s1,8(sp)
    TEST_START();
    80015fbc:	53b0f0ef          	jal	80025cf6 <printf>
    80015fc0:	4529                	li	a0,10
    80015fc2:	33f0e0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    80015fc6:	450d                	li	a0,3
    80015fc8:	c2fea0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80015fcc:	e14ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015fd0:	853ea0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80015fd4:	edcea0ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80015fd8:	4509                	li	a0,2
    80015fda:	c1dea0ef          	jal	80000bf6 <goto_priv>


    //执行取指指令时，pte.v=0
    vaddr = hs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    80015fde:	0330000f          	fence	rw,rw
    80015fe2:	00033417          	auipc	s0,0x33
    80015fe6:	02e40413          	addi	s0,s0,46 # 80049010 <excpt>
    80015fea:	4785                	li	a5,1
    80015fec:	00033717          	auipc	a4,0x33
    80015ff0:	04073e23          	sd	zero,92(a4) # 80049048 <excpt+0x38>
    80015ff4:	00f41023          	sh	a5,0(s0)
    80015ff8:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    80015ffc:	400197b7          	lui	a5,0x40019
    80016000:	078a                	slli	a5,a5,0x2
    80016002:	00000297          	auipc	t0,0x0
    80016006:	00c28293          	addi	t0,t0,12 # 8001600e <instruction_page_fault_3+0x6a>
    8001600a:	02543c23          	sd	t0,56(s0)
    8001600e:	8782                	jr	a5

    TEST_ASSERT("vs mode fetch instruction when pte.v=0 leads to IPF",
    80016010:	08200593          	li	a1,130
    80016014:	00017617          	auipc	a2,0x17
    80016018:	dec60613          	addi	a2,a2,-532 # 8002ce00 <__func__.0+0x53a0>
    8001601c:	00012517          	auipc	a0,0x12
    80016020:	d3c50513          	addi	a0,a0,-708 # 80027d58 <__func__.0+0x2f8>
    80016024:	4d30f0ef          	jal	80025cf6 <printf>
    80016028:	00033797          	auipc	a5,0x33
    8001602c:	fe97c783          	lbu	a5,-23(a5) # 80049011 <excpt+0x1>
    80016030:	00012597          	auipc	a1,0x12
    80016034:	d0058593          	addi	a1,a1,-768 # 80027d30 <__func__.0+0x2d0>
    80016038:	cf89                	beqz	a5,80016052 <instruction_page_fault_3+0xae>
    8001603a:	6418                	ld	a4,8(s0)
    8001603c:	47b1                	li	a5,12
    8001603e:	00012597          	auipc	a1,0x12
    80016042:	ce258593          	addi	a1,a1,-798 # 80027d20 <__func__.0+0x2c0>
    80016046:	00f70663          	beq	a4,a5,80016052 <instruction_page_fault_3+0xae>
    8001604a:	00012597          	auipc	a1,0x12
    8001604e:	ce658593          	addi	a1,a1,-794 # 80027d30 <__func__.0+0x2d0>
    80016052:	00012517          	auipc	a0,0x12
    80016056:	d1e50513          	addi	a0,a0,-738 # 80027d70 <__func__.0+0x310>
    8001605a:	49d0f0ef          	jal	80025cf6 <printf>
    8001605e:	00033797          	auipc	a5,0x33
    80016062:	fb37c783          	lbu	a5,-77(a5) # 80049011 <excpt+0x1>
    80016066:	c789                	beqz	a5,80016070 <instruction_page_fault_3+0xcc>
    80016068:	6418                	ld	a4,8(s0)
    8001606a:	47b1                	li	a5,12
    8001606c:	00f70c63          	beq	a4,a5,80016084 <instruction_page_fault_3+0xe0>
    80016070:	00012517          	auipc	a0,0x12
    80016074:	d0850513          	addi	a0,a0,-760 # 80027d78 <__func__.0+0x318>
    80016078:	47f0f0ef          	jal	80025cf6 <printf>
    8001607c:	02900513          	li	a0,41
    80016080:	2810e0ef          	jal	80024b00 <putchar>
    80016084:	4529                	li	a0,10
    80016086:	27b0e0ef          	jal	80024b00 <putchar>
    8001608a:	00033797          	auipc	a5,0x33
    8001608e:	f877c783          	lbu	a5,-121(a5) # 80049011 <excpt+0x1>
    80016092:	4481                	li	s1,0
    80016094:	c789                	beqz	a5,8001609e <instruction_page_fault_3+0xfa>
    80016096:	6404                	ld	s1,8(s0)
    80016098:	14d1                	addi	s1,s1,-12
    8001609a:	0014b493          	seqz	s1,s1
    );


    //执行取指指令时，pte.x=0
    vaddr = vs_page_base(VSRW_GRW);
    TEST_SETUP_EXCEPT();
    8001609e:	0330000f          	fence	rw,rw
    800160a2:	4785                	li	a5,1
    800160a4:	00033717          	auipc	a4,0x33
    800160a8:	fa073223          	sd	zero,-92(a4) # 80049048 <excpt+0x38>
    800160ac:	00f41023          	sh	a5,0(s0)
    800160b0:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    800160b4:	001007b7          	lui	a5,0x100
    800160b8:	05178793          	addi	a5,a5,81 # 100051 <STACK_SIZE+0x51>
    800160bc:	07b2                	slli	a5,a5,0xc
    800160be:	00000297          	auipc	t0,0x0
    800160c2:	00c28293          	addi	t0,t0,12 # 800160ca <instruction_page_fault_3+0x126>
    800160c6:	02543c23          	sd	t0,56(s0)
    800160ca:	8782                	jr	a5

    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    800160cc:	08200593          	li	a1,130
    800160d0:	00017617          	auipc	a2,0x17
    800160d4:	d6860613          	addi	a2,a2,-664 # 8002ce38 <__func__.0+0x53d8>
    800160d8:	00012517          	auipc	a0,0x12
    800160dc:	c8050513          	addi	a0,a0,-896 # 80027d58 <__func__.0+0x2f8>
    800160e0:	4170f0ef          	jal	80025cf6 <printf>
    800160e4:	00033797          	auipc	a5,0x33
    800160e8:	f2d7c783          	lbu	a5,-211(a5) # 80049011 <excpt+0x1>
    800160ec:	00012597          	auipc	a1,0x12
    800160f0:	c4458593          	addi	a1,a1,-956 # 80027d30 <__func__.0+0x2d0>
    800160f4:	cf89                	beqz	a5,8001610e <instruction_page_fault_3+0x16a>
    800160f6:	6418                	ld	a4,8(s0)
    800160f8:	47b1                	li	a5,12
    800160fa:	00012597          	auipc	a1,0x12
    800160fe:	c2658593          	addi	a1,a1,-986 # 80027d20 <__func__.0+0x2c0>
    80016102:	00f70663          	beq	a4,a5,8001610e <instruction_page_fault_3+0x16a>
    80016106:	00012597          	auipc	a1,0x12
    8001610a:	c2a58593          	addi	a1,a1,-982 # 80027d30 <__func__.0+0x2d0>
    8001610e:	00012517          	auipc	a0,0x12
    80016112:	c6250513          	addi	a0,a0,-926 # 80027d70 <__func__.0+0x310>
    80016116:	3e10f0ef          	jal	80025cf6 <printf>
    8001611a:	00033797          	auipc	a5,0x33
    8001611e:	ef77c783          	lbu	a5,-265(a5) # 80049011 <excpt+0x1>
    80016122:	c789                	beqz	a5,8001612c <instruction_page_fault_3+0x188>
    80016124:	6418                	ld	a4,8(s0)
    80016126:	47b1                	li	a5,12
    80016128:	00f70c63          	beq	a4,a5,80016140 <instruction_page_fault_3+0x19c>
    8001612c:	00012517          	auipc	a0,0x12
    80016130:	c4c50513          	addi	a0,a0,-948 # 80027d78 <__func__.0+0x318>
    80016134:	3c30f0ef          	jal	80025cf6 <printf>
    80016138:	02900513          	li	a0,41
    8001613c:	1c50e0ef          	jal	80024b00 <putchar>
    80016140:	4529                	li	a0,10
    80016142:	1bf0e0ef          	jal	80024b00 <putchar>
    80016146:	c095                	beqz	s1,8001616a <instruction_page_fault_3+0x1c6>
    80016148:	00033497          	auipc	s1,0x33
    8001614c:	ec94c483          	lbu	s1,-311(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80016150:	00012597          	auipc	a1,0x12
    80016154:	be058593          	addi	a1,a1,-1056 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    80016158:	cc91                	beqz	s1,80016174 <instruction_page_fault_3+0x1d0>
    8001615a:	6418                	ld	a4,8(s0)
    8001615c:	47b1                	li	a5,12
    TEST_END();
    8001615e:	00012597          	auipc	a1,0x12
    80016162:	bc258593          	addi	a1,a1,-1086 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    80016166:	00f70763          	beq	a4,a5,80016174 <instruction_page_fault_3+0x1d0>
    8001616a:	4481                	li	s1,0
    TEST_END();
    8001616c:	00012597          	auipc	a1,0x12
    80016170:	bc458593          	addi	a1,a1,-1084 # 80027d30 <__func__.0+0x2d0>
    80016174:	00012517          	auipc	a0,0x12
    80016178:	c6450513          	addi	a0,a0,-924 # 80027dd8 <__func__.0+0x378>
    8001617c:	37b0f0ef          	jal	80025cf6 <printf>
    80016180:	4511                	li	a0,4
    80016182:	a75ea0ef          	jal	80000bf6 <goto_priv>
    80016186:	b26eb0ef          	jal	800014ac <reset_state>
}
    8001618a:	60e2                	ld	ra,24(sp)
    8001618c:	6442                	ld	s0,16(sp)
    8001618e:	8526                	mv	a0,s1
    80016190:	64a2                	ld	s1,8(sp)
    80016192:	6105                	addi	sp,sp,32
    80016194:	8082                	ret

0000000080016196 <instruction_page_fault_4>:

bool instruction_page_fault_4(){
    80016196:	1101                	addi	sp,sp,-32

    TEST_START();
    80016198:	00011597          	auipc	a1,0x11
    8001619c:	9f058593          	addi	a1,a1,-1552 # 80026b88 <__func__.22>
    800161a0:	00012517          	auipc	a0,0x12
    800161a4:	ba050513          	addi	a0,a0,-1120 # 80027d40 <__func__.0+0x2e0>
bool instruction_page_fault_4(){
    800161a8:	ec06                	sd	ra,24(sp)
    800161aa:	e822                	sd	s0,16(sp)
    800161ac:	e426                	sd	s1,8(sp)
    TEST_START();
    800161ae:	3490f0ef          	jal	80025cf6 <printf>
    800161b2:	4529                	li	a0,10
    800161b4:	14d0e0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    800161b8:	450d                	li	a0,3
    800161ba:	a3dea0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    800161be:	c22ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800161c2:	e60ea0ef          	jal	80000822 <hpt_init>
    vspt_init();
    800161c6:	ceaea0ef          	jal	800006b0 <vspt_init>


    goto_priv(PRIV_VS);
    800161ca:	4509                	li	a0,2
    800161cc:	a2bea0ef          	jal	80000bf6 <goto_priv>

    //执行取指指令时，在VS模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800161d0:	0330000f          	fence	rw,rw
    800161d4:	00033417          	auipc	s0,0x33
    800161d8:	e3c40413          	addi	s0,s0,-452 # 80049010 <excpt>
    800161dc:	4785                	li	a5,1
    800161de:	00033717          	auipc	a4,0x33
    800161e2:	e6073523          	sd	zero,-406(a4) # 80049048 <excpt+0x38>
    800161e6:	00f41023          	sh	a5,0(s0)
    800161ea:	0330000f          	fence	rw,rw
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    TEST_EXEC_EXCEPT(vaddr); 
    800161ee:	000807b7          	lui	a5,0x80
    800161f2:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800161f4:	07b6                	slli	a5,a5,0xd
    800161f6:	00000297          	auipc	t0,0x0
    800161fa:	00c28293          	addi	t0,t0,12 # 80016202 <instruction_page_fault_4+0x6c>
    800161fe:	02543c23          	sd	t0,56(s0)
    80016202:	8782                	jr	a5
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    80016204:	08200593          	li	a1,130
    80016208:	00017617          	auipc	a2,0x17
    8001620c:	c6860613          	addi	a2,a2,-920 # 8002ce70 <__func__.0+0x5410>
    80016210:	00012517          	auipc	a0,0x12
    80016214:	b4850513          	addi	a0,a0,-1208 # 80027d58 <__func__.0+0x2f8>
    80016218:	2df0f0ef          	jal	80025cf6 <printf>
    8001621c:	00033797          	auipc	a5,0x33
    80016220:	df57c783          	lbu	a5,-523(a5) # 80049011 <excpt+0x1>
    80016224:	00012597          	auipc	a1,0x12
    80016228:	b0c58593          	addi	a1,a1,-1268 # 80027d30 <__func__.0+0x2d0>
    8001622c:	cf89                	beqz	a5,80016246 <instruction_page_fault_4+0xb0>
    8001622e:	6418                	ld	a4,8(s0)
    80016230:	47b1                	li	a5,12
    80016232:	00012597          	auipc	a1,0x12
    80016236:	aee58593          	addi	a1,a1,-1298 # 80027d20 <__func__.0+0x2c0>
    8001623a:	00f70663          	beq	a4,a5,80016246 <instruction_page_fault_4+0xb0>
    8001623e:	00012597          	auipc	a1,0x12
    80016242:	af258593          	addi	a1,a1,-1294 # 80027d30 <__func__.0+0x2d0>
    80016246:	00012517          	auipc	a0,0x12
    8001624a:	b2a50513          	addi	a0,a0,-1238 # 80027d70 <__func__.0+0x310>
    8001624e:	2a90f0ef          	jal	80025cf6 <printf>
    80016252:	00033797          	auipc	a5,0x33
    80016256:	dbf7c783          	lbu	a5,-577(a5) # 80049011 <excpt+0x1>
    8001625a:	c789                	beqz	a5,80016264 <instruction_page_fault_4+0xce>
    8001625c:	6418                	ld	a4,8(s0)
    8001625e:	47b1                	li	a5,12
    80016260:	00f70c63          	beq	a4,a5,80016278 <instruction_page_fault_4+0xe2>
    80016264:	00012517          	auipc	a0,0x12
    80016268:	b1450513          	addi	a0,a0,-1260 # 80027d78 <__func__.0+0x318>
    8001626c:	28b0f0ef          	jal	80025cf6 <printf>
    80016270:	02900513          	li	a0,41
    80016274:	08d0e0ef          	jal	80024b00 <putchar>
    80016278:	4529                	li	a0,10
    8001627a:	0870e0ef          	jal	80024b00 <putchar>
    8001627e:	00033497          	auipc	s1,0x33
    80016282:	d934c483          	lbu	s1,-621(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80016286:	00012597          	auipc	a1,0x12
    8001628a:	aaa58593          	addi	a1,a1,-1366 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    8001628e:	cc91                	beqz	s1,800162aa <instruction_page_fault_4+0x114>
    80016290:	6418                	ld	a4,8(s0)
    80016292:	47b1                	li	a5,12
    TEST_END();
    80016294:	00012597          	auipc	a1,0x12
    80016298:	a8c58593          	addi	a1,a1,-1396 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    8001629c:	00f70763          	beq	a4,a5,800162aa <instruction_page_fault_4+0x114>
    800162a0:	4481                	li	s1,0
    TEST_END();
    800162a2:	00012597          	auipc	a1,0x12
    800162a6:	a8e58593          	addi	a1,a1,-1394 # 80027d30 <__func__.0+0x2d0>
    800162aa:	00012517          	auipc	a0,0x12
    800162ae:	b2e50513          	addi	a0,a0,-1234 # 80027dd8 <__func__.0+0x378>
    800162b2:	2450f0ef          	jal	80025cf6 <printf>
    800162b6:	4511                	li	a0,4
    800162b8:	93fea0ef          	jal	80000bf6 <goto_priv>
    800162bc:	9f0eb0ef          	jal	800014ac <reset_state>
}
    800162c0:	60e2                	ld	ra,24(sp)
    800162c2:	6442                	ld	s0,16(sp)
    800162c4:	8526                	mv	a0,s1
    800162c6:	64a2                	ld	s1,8(sp)
    800162c8:	6105                	addi	sp,sp,32
    800162ca:	8082                	ret

00000000800162cc <load_page_fault_1>:

bool load_page_fault_1(){
    800162cc:	1101                	addi	sp,sp,-32

    TEST_START();
    800162ce:	00011597          	auipc	a1,0x11
    800162d2:	8da58593          	addi	a1,a1,-1830 # 80026ba8 <__func__.21>
    800162d6:	00012517          	auipc	a0,0x12
    800162da:	a6a50513          	addi	a0,a0,-1430 # 80027d40 <__func__.0+0x2e0>
bool load_page_fault_1(){
    800162de:	ec06                	sd	ra,24(sp)
    800162e0:	e822                	sd	s0,16(sp)
    800162e2:	e426                	sd	s1,8(sp)
    TEST_START();
    800162e4:	2130f0ef          	jal	80025cf6 <printf>
    800162e8:	4529                	li	a0,10
    800162ea:	0170e0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS); 
    800162ee:	450d                	li	a0,3
    800162f0:	907ea0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    800162f4:	aecea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800162f8:	d2aea0ef          	jal	80000822 <hpt_init>
    vspt_init();
    800162fc:	bb4ea0ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80016300:	450d                	li	a0,3
    80016302:	8f5ea0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80016306:	4509                	li	a0,2
    80016308:	80fea0ef          	jal	80000b16 <set_prev_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    8001630c:	0330000f          	fence	rw,rw
    80016310:	00033417          	auipc	s0,0x33
    80016314:	d0040413          	addi	s0,s0,-768 # 80049010 <excpt>
    80016318:	4785                	li	a5,1
    8001631a:	00033717          	auipc	a4,0x33
    8001631e:	d2073723          	sd	zero,-722(a4) # 80049048 <excpt+0x38>
    80016322:	00f41023          	sh	a5,0(s0)
    80016326:	0330000f          	fence	rw,rw
    asm volatile(
    8001632a:	400197b7          	lui	a5,0x40019
    8001632e:	078a                	slli	a5,a5,0x2
    80016330:	6007c7f3          	.insn	4, 0x6007c7f3

    addr = hs_page_base(VSI_GI);
    hlvb(addr);
    TEST_ASSERT("hs mode load when pte.v=0 leads to LPF",
    80016334:	08200593          	li	a1,130
    80016338:	00017617          	auipc	a2,0x17
    8001633c:	b7060613          	addi	a2,a2,-1168 # 8002cea8 <__func__.0+0x5448>
    80016340:	00012517          	auipc	a0,0x12
    80016344:	a1850513          	addi	a0,a0,-1512 # 80027d58 <__func__.0+0x2f8>
    80016348:	1af0f0ef          	jal	80025cf6 <printf>
    8001634c:	00033797          	auipc	a5,0x33
    80016350:	cc57c783          	lbu	a5,-827(a5) # 80049011 <excpt+0x1>
    80016354:	00012597          	auipc	a1,0x12
    80016358:	9dc58593          	addi	a1,a1,-1572 # 80027d30 <__func__.0+0x2d0>
    8001635c:	cf89                	beqz	a5,80016376 <load_page_fault_1+0xaa>
    8001635e:	6418                	ld	a4,8(s0)
    80016360:	47b5                	li	a5,13
    80016362:	00012597          	auipc	a1,0x12
    80016366:	9be58593          	addi	a1,a1,-1602 # 80027d20 <__func__.0+0x2c0>
    8001636a:	00f70663          	beq	a4,a5,80016376 <load_page_fault_1+0xaa>
    8001636e:	00012597          	auipc	a1,0x12
    80016372:	9c258593          	addi	a1,a1,-1598 # 80027d30 <__func__.0+0x2d0>
    80016376:	00012517          	auipc	a0,0x12
    8001637a:	9fa50513          	addi	a0,a0,-1542 # 80027d70 <__func__.0+0x310>
    8001637e:	1790f0ef          	jal	80025cf6 <printf>
    80016382:	00033797          	auipc	a5,0x33
    80016386:	c8f7c783          	lbu	a5,-881(a5) # 80049011 <excpt+0x1>
    8001638a:	c789                	beqz	a5,80016394 <load_page_fault_1+0xc8>
    8001638c:	6418                	ld	a4,8(s0)
    8001638e:	47b5                	li	a5,13
    80016390:	00f70c63          	beq	a4,a5,800163a8 <load_page_fault_1+0xdc>
    80016394:	00012517          	auipc	a0,0x12
    80016398:	9e450513          	addi	a0,a0,-1564 # 80027d78 <__func__.0+0x318>
    8001639c:	15b0f0ef          	jal	80025cf6 <printf>
    800163a0:	02900513          	li	a0,41
    800163a4:	75c0e0ef          	jal	80024b00 <putchar>
    800163a8:	4529                	li	a0,10
    800163aa:	7560e0ef          	jal	80024b00 <putchar>
    800163ae:	00033797          	auipc	a5,0x33
    800163b2:	c637c783          	lbu	a5,-925(a5) # 80049011 <excpt+0x1>
    800163b6:	4481                	li	s1,0
    800163b8:	c789                	beqz	a5,800163c2 <load_page_fault_1+0xf6>
    800163ba:	6404                	ld	s1,8(s0)
    800163bc:	14cd                	addi	s1,s1,-13
    800163be:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_LPF
    );


    //执行hlvd指令时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    TEST_SETUP_EXCEPT();
    800163c2:	0330000f          	fence	rw,rw
    800163c6:	4785                	li	a5,1
    800163c8:	00033717          	auipc	a4,0x33
    800163cc:	c8073023          	sd	zero,-896(a4) # 80049048 <excpt+0x38>
    800163d0:	00f41023          	sh	a5,0(s0)
    800163d4:	0330000f          	fence	rw,rw
    addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800163d8:	000807b7          	lui	a5,0x80
    800163dc:	1007b073          	csrc	sstatus,a5
    asm volatile(
    800163e0:	001007b7          	lui	a5,0x100
    800163e4:	05f78793          	addi	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    800163e8:	07b2                	slli	a5,a5,0xc
    800163ea:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);   
    TEST_ASSERT("hs mode load when sstatus.mxr=0 and pte.r=0 leads to LPF",
    800163ee:	08200593          	li	a1,130
    800163f2:	00017617          	auipc	a2,0x17
    800163f6:	ade60613          	addi	a2,a2,-1314 # 8002ced0 <__func__.0+0x5470>
    800163fa:	00012517          	auipc	a0,0x12
    800163fe:	95e50513          	addi	a0,a0,-1698 # 80027d58 <__func__.0+0x2f8>
    80016402:	0f50f0ef          	jal	80025cf6 <printf>
    80016406:	00033797          	auipc	a5,0x33
    8001640a:	c0b7c783          	lbu	a5,-1013(a5) # 80049011 <excpt+0x1>
    8001640e:	00012597          	auipc	a1,0x12
    80016412:	92258593          	addi	a1,a1,-1758 # 80027d30 <__func__.0+0x2d0>
    80016416:	cf89                	beqz	a5,80016430 <load_page_fault_1+0x164>
    80016418:	6418                	ld	a4,8(s0)
    8001641a:	47b5                	li	a5,13
    8001641c:	00012597          	auipc	a1,0x12
    80016420:	90458593          	addi	a1,a1,-1788 # 80027d20 <__func__.0+0x2c0>
    80016424:	00f70663          	beq	a4,a5,80016430 <load_page_fault_1+0x164>
    80016428:	00012597          	auipc	a1,0x12
    8001642c:	90858593          	addi	a1,a1,-1784 # 80027d30 <__func__.0+0x2d0>
    80016430:	00012517          	auipc	a0,0x12
    80016434:	94050513          	addi	a0,a0,-1728 # 80027d70 <__func__.0+0x310>
    80016438:	0bf0f0ef          	jal	80025cf6 <printf>
    8001643c:	00033797          	auipc	a5,0x33
    80016440:	bd57c783          	lbu	a5,-1067(a5) # 80049011 <excpt+0x1>
    80016444:	c789                	beqz	a5,8001644e <load_page_fault_1+0x182>
    80016446:	6418                	ld	a4,8(s0)
    80016448:	47b5                	li	a5,13
    8001644a:	00f70c63          	beq	a4,a5,80016462 <load_page_fault_1+0x196>
    8001644e:	00012517          	auipc	a0,0x12
    80016452:	92a50513          	addi	a0,a0,-1750 # 80027d78 <__func__.0+0x318>
    80016456:	0a10f0ef          	jal	80025cf6 <printf>
    8001645a:	02900513          	li	a0,41
    8001645e:	6a20e0ef          	jal	80024b00 <putchar>
    80016462:	4529                	li	a0,10
    80016464:	69c0e0ef          	jal	80024b00 <putchar>
    80016468:	c881                	beqz	s1,80016478 <load_page_fault_1+0x1ac>
    8001646a:	00033797          	auipc	a5,0x33
    8001646e:	ba77c783          	lbu	a5,-1113(a5) # 80049011 <excpt+0x1>
    80016472:	4481                	li	s1,0
    80016474:	0e079763          	bnez	a5,80016562 <load_page_fault_1+0x296>
        excpt.cause == CAUSE_LPF
    );

    //执行hlvd指令时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    goto_priv(PRIV_HS);
    80016478:	450d                	li	a0,3
    8001647a:	f7cea0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    8001647e:	0330000f          	fence	rw,rw
    80016482:	4785                	li	a5,1
    80016484:	00033717          	auipc	a4,0x33
    80016488:	bc073223          	sd	zero,-1084(a4) # 80049048 <excpt+0x38>
    8001648c:	00f41023          	sh	a5,0(s0)
    80016490:	0330000f          	fence	rw,rw
    addr = hs_page_base(VSV_GV);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80016494:	000807b7          	lui	a5,0x80
    80016498:	1007a073          	csrs	sstatus,a5
    8001649c:	001007b7          	lui	a5,0x100
    800164a0:	07f5                	addi	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    800164a2:	07b2                	slli	a5,a5,0xc
    800164a4:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800164a8:	08200593          	li	a1,130
    800164ac:	00017617          	auipc	a2,0x17
    800164b0:	a6460613          	addi	a2,a2,-1436 # 8002cf10 <__func__.0+0x54b0>
    800164b4:	00012517          	auipc	a0,0x12
    800164b8:	8a450513          	addi	a0,a0,-1884 # 80027d58 <__func__.0+0x2f8>
    800164bc:	03b0f0ef          	jal	80025cf6 <printf>
    800164c0:	00033797          	auipc	a5,0x33
    800164c4:	b517c783          	lbu	a5,-1199(a5) # 80049011 <excpt+0x1>
    800164c8:	00012597          	auipc	a1,0x12
    800164cc:	86858593          	addi	a1,a1,-1944 # 80027d30 <__func__.0+0x2d0>
    800164d0:	cf89                	beqz	a5,800164ea <load_page_fault_1+0x21e>
    800164d2:	6418                	ld	a4,8(s0)
    800164d4:	47b5                	li	a5,13
    800164d6:	00012597          	auipc	a1,0x12
    800164da:	84a58593          	addi	a1,a1,-1974 # 80027d20 <__func__.0+0x2c0>
    800164de:	00f70663          	beq	a4,a5,800164ea <load_page_fault_1+0x21e>
    800164e2:	00012597          	auipc	a1,0x12
    800164e6:	84e58593          	addi	a1,a1,-1970 # 80027d30 <__func__.0+0x2d0>
    800164ea:	00012517          	auipc	a0,0x12
    800164ee:	88650513          	addi	a0,a0,-1914 # 80027d70 <__func__.0+0x310>
    800164f2:	0050f0ef          	jal	80025cf6 <printf>
    800164f6:	00033797          	auipc	a5,0x33
    800164fa:	b1b7c783          	lbu	a5,-1253(a5) # 80049011 <excpt+0x1>
    800164fe:	c789                	beqz	a5,80016508 <load_page_fault_1+0x23c>
    80016500:	6418                	ld	a4,8(s0)
    80016502:	47b5                	li	a5,13
    80016504:	00f70c63          	beq	a4,a5,8001651c <load_page_fault_1+0x250>
    80016508:	00012517          	auipc	a0,0x12
    8001650c:	87050513          	addi	a0,a0,-1936 # 80027d78 <__func__.0+0x318>
    80016510:	7e60f0ef          	jal	80025cf6 <printf>
    80016514:	02900513          	li	a0,41
    80016518:	5e80e0ef          	jal	80024b00 <putchar>
    8001651c:	4529                	li	a0,10
    8001651e:	5e20e0ef          	jal	80024b00 <putchar>
    80016522:	c491                	beqz	s1,8001652e <load_page_fault_1+0x262>
    80016524:	00033497          	auipc	s1,0x33
    80016528:	aed4c483          	lbu	s1,-1299(s1) # 80049011 <excpt+0x1>
    8001652c:	e0a1                	bnez	s1,8001656c <load_page_fault_1+0x2a0>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001652e:	000807b7          	lui	a5,0x80
    80016532:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80016536:	4481                	li	s1,0

    TEST_END();
    80016538:	00011597          	auipc	a1,0x11
    8001653c:	7f858593          	addi	a1,a1,2040 # 80027d30 <__func__.0+0x2d0>
    80016540:	00012517          	auipc	a0,0x12
    80016544:	89850513          	addi	a0,a0,-1896 # 80027dd8 <__func__.0+0x378>
    80016548:	7ae0f0ef          	jal	80025cf6 <printf>
    8001654c:	4511                	li	a0,4
    8001654e:	ea8ea0ef          	jal	80000bf6 <goto_priv>
    80016552:	f5bea0ef          	jal	800014ac <reset_state>

}
    80016556:	60e2                	ld	ra,24(sp)
    80016558:	6442                	ld	s0,16(sp)
    8001655a:	8526                	mv	a0,s1
    8001655c:	64a2                	ld	s1,8(sp)
    8001655e:	6105                	addi	sp,sp,32
    80016560:	8082                	ret
    TEST_ASSERT("hs mode load when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80016562:	6404                	ld	s1,8(s0)
    80016564:	14cd                	addi	s1,s1,-13
    80016566:	0014b493          	seqz	s1,s1
    8001656a:	b739                	j	80016478 <load_page_fault_1+0x1ac>
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001656c:	6418                	ld	a4,8(s0)
    8001656e:	47b5                	li	a5,13
    80016570:	faf71fe3          	bne	a4,a5,8001652e <load_page_fault_1+0x262>
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80016574:	000807b7          	lui	a5,0x80
    80016578:	1007b073          	csrc	sstatus,a5
    TEST_END();
    8001657c:	00011597          	auipc	a1,0x11
    80016580:	7a458593          	addi	a1,a1,1956 # 80027d20 <__func__.0+0x2c0>
    80016584:	bf75                	j	80016540 <load_page_fault_1+0x274>

0000000080016586 <load_page_fault_2>:

bool load_page_fault_2(){
    80016586:	1101                	addi	sp,sp,-32

    TEST_START();
    80016588:	00010597          	auipc	a1,0x10
    8001658c:	63858593          	addi	a1,a1,1592 # 80026bc0 <__func__.20>
    80016590:	00011517          	auipc	a0,0x11
    80016594:	7b050513          	addi	a0,a0,1968 # 80027d40 <__func__.0+0x2e0>
bool load_page_fault_2(){
    80016598:	ec06                	sd	ra,24(sp)
    8001659a:	e822                	sd	s0,16(sp)
    8001659c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001659e:	7580f0ef          	jal	80025cf6 <printf>
    800165a2:	4529                	li	a0,10
    800165a4:	55c0e0ef          	jal	80024b00 <putchar>


    goto_priv(PRIV_HS);
    800165a8:	450d                	li	a0,3
    800165aa:	e4cea0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    800165ae:	832ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800165b2:	a70ea0ef          	jal	80000822 <hpt_init>
    vspt_init();
    800165b6:	8faea0ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    800165ba:	4511                	li	a0,4
    800165bc:	e3aea0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800165c0:	000407b7          	lui	a5,0x40
    800165c4:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    800165c8:	450d                	li	a0,3
    800165ca:	e2cea0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    800165ce:	4509                	li	a0,2
    800165d0:	d46ea0ef          	jal	80000b16 <set_prev_priv>

    //执行hlvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800165d4:	0330000f          	fence	rw,rw
    800165d8:	00033417          	auipc	s0,0x33
    800165dc:	a3840413          	addi	s0,s0,-1480 # 80049010 <excpt>
    800165e0:	4785                	li	a5,1
    800165e2:	00033717          	auipc	a4,0x33
    800165e6:	a6073323          	sd	zero,-1434(a4) # 80049048 <excpt+0x38>
    800165ea:	00f41023          	sh	a5,0(s0)
    800165ee:	0330000f          	fence	rw,rw
    800165f2:	000807b7          	lui	a5,0x80
    800165f6:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800165f8:	07b6                	slli	a5,a5,0xd
    800165fa:	6c07c7f3          	.insn	4, 0x6c07c7f3
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    hlvd(addr);
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    800165fe:	08200593          	li	a1,130
    80016602:	00017617          	auipc	a2,0x17
    80016606:	95660613          	addi	a2,a2,-1706 # 8002cf58 <__func__.0+0x54f8>
    8001660a:	00011517          	auipc	a0,0x11
    8001660e:	74e50513          	addi	a0,a0,1870 # 80027d58 <__func__.0+0x2f8>
    80016612:	6e40f0ef          	jal	80025cf6 <printf>
    80016616:	00033797          	auipc	a5,0x33
    8001661a:	9fb7c783          	lbu	a5,-1541(a5) # 80049011 <excpt+0x1>
    8001661e:	00011597          	auipc	a1,0x11
    80016622:	71258593          	addi	a1,a1,1810 # 80027d30 <__func__.0+0x2d0>
    80016626:	cf89                	beqz	a5,80016640 <load_page_fault_2+0xba>
    80016628:	6418                	ld	a4,8(s0)
    8001662a:	47b5                	li	a5,13
    8001662c:	00011597          	auipc	a1,0x11
    80016630:	6f458593          	addi	a1,a1,1780 # 80027d20 <__func__.0+0x2c0>
    80016634:	00f70663          	beq	a4,a5,80016640 <load_page_fault_2+0xba>
    80016638:	00011597          	auipc	a1,0x11
    8001663c:	6f858593          	addi	a1,a1,1784 # 80027d30 <__func__.0+0x2d0>
    80016640:	00011517          	auipc	a0,0x11
    80016644:	73050513          	addi	a0,a0,1840 # 80027d70 <__func__.0+0x310>
    80016648:	6ae0f0ef          	jal	80025cf6 <printf>
    8001664c:	00033797          	auipc	a5,0x33
    80016650:	9c57c783          	lbu	a5,-1595(a5) # 80049011 <excpt+0x1>
    80016654:	c789                	beqz	a5,8001665e <load_page_fault_2+0xd8>
    80016656:	6418                	ld	a4,8(s0)
    80016658:	47b5                	li	a5,13
    8001665a:	00f70c63          	beq	a4,a5,80016672 <load_page_fault_2+0xec>
    8001665e:	00011517          	auipc	a0,0x11
    80016662:	71a50513          	addi	a0,a0,1818 # 80027d78 <__func__.0+0x318>
    80016666:	6900f0ef          	jal	80025cf6 <printf>
    8001666a:	02900513          	li	a0,41
    8001666e:	4920e0ef          	jal	80024b00 <putchar>
    80016672:	4529                	li	a0,10
    80016674:	48c0e0ef          	jal	80024b00 <putchar>
    80016678:	00033497          	auipc	s1,0x33
    8001667c:	9994c483          	lbu	s1,-1639(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80016680:	00011597          	auipc	a1,0x11
    80016684:	6b058593          	addi	a1,a1,1712 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    80016688:	cc91                	beqz	s1,800166a4 <load_page_fault_2+0x11e>
    8001668a:	6418                	ld	a4,8(s0)
    8001668c:	47b5                	li	a5,13
    TEST_END();
    8001668e:	00011597          	auipc	a1,0x11
    80016692:	69258593          	addi	a1,a1,1682 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    80016696:	00f70763          	beq	a4,a5,800166a4 <load_page_fault_2+0x11e>
    8001669a:	4481                	li	s1,0
    TEST_END();
    8001669c:	00011597          	auipc	a1,0x11
    800166a0:	69458593          	addi	a1,a1,1684 # 80027d30 <__func__.0+0x2d0>
    800166a4:	00011517          	auipc	a0,0x11
    800166a8:	73450513          	addi	a0,a0,1844 # 80027dd8 <__func__.0+0x378>
    800166ac:	64a0f0ef          	jal	80025cf6 <printf>
    800166b0:	4511                	li	a0,4
    800166b2:	d44ea0ef          	jal	80000bf6 <goto_priv>
    800166b6:	df7ea0ef          	jal	800014ac <reset_state>
}
    800166ba:	60e2                	ld	ra,24(sp)
    800166bc:	6442                	ld	s0,16(sp)
    800166be:	8526                	mv	a0,s1
    800166c0:	64a2                	ld	s1,8(sp)
    800166c2:	6105                	addi	sp,sp,32
    800166c4:	8082                	ret

00000000800166c6 <load_page_fault_3>:

bool load_page_fault_3(){
    800166c6:	1141                	addi	sp,sp,-16

    TEST_START();
    800166c8:	00010597          	auipc	a1,0x10
    800166cc:	51058593          	addi	a1,a1,1296 # 80026bd8 <__func__.19>
    800166d0:	00011517          	auipc	a0,0x11
    800166d4:	67050513          	addi	a0,a0,1648 # 80027d40 <__func__.0+0x2e0>
bool load_page_fault_3(){
    800166d8:	e406                	sd	ra,8(sp)
    800166da:	e022                	sd	s0,0(sp)
    TEST_START();
    800166dc:	61a0f0ef          	jal	80025cf6 <printf>
    800166e0:	4529                	li	a0,10
    800166e2:	41e0e0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    800166e6:	450d                	li	a0,3
    800166e8:	d0eea0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    800166ec:	ef5e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800166f0:	932ea0ef          	jal	80000822 <hpt_init>
    vspt_init();
    800166f4:	fbde90ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    800166f8:	4511                	li	a0,4
    800166fa:	cfcea0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    800166fe:	000407b7          	lui	a5,0x40
    80016702:	2007a073          	csrs	vsstatus,a5

    //执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_HS);
    80016706:	450d                	li	a0,3
    80016708:	ceeea0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001670c:	4509                	li	a0,2
    8001670e:	c08ea0ef          	jal	80000b16 <set_prev_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    80016712:	0330000f          	fence	rw,rw
    80016716:	4785                	li	a5,1
    80016718:	00033717          	auipc	a4,0x33
    8001671c:	92073823          	sd	zero,-1744(a4) # 80049048 <excpt+0x38>
    80016720:	00033717          	auipc	a4,0x33
    80016724:	8ef71823          	sh	a5,-1808(a4) # 80049010 <excpt>
    80016728:	0330000f          	fence	rw,rw
    asm volatile(
    8001672c:	000807b7          	lui	a5,0x80
    80016730:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80016732:	07b6                	slli	a5,a5,0xd
    80016734:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(addr);

    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80016738:	08200593          	li	a1,130
    8001673c:	00017617          	auipc	a2,0x17
    80016740:	85c60613          	addi	a2,a2,-1956 # 8002cf98 <__func__.0+0x5538>
    80016744:	00011517          	auipc	a0,0x11
    80016748:	61450513          	addi	a0,a0,1556 # 80027d58 <__func__.0+0x2f8>
    8001674c:	5aa0f0ef          	jal	80025cf6 <printf>
    80016750:	00033797          	auipc	a5,0x33
    80016754:	8c17c783          	lbu	a5,-1855(a5) # 80049011 <excpt+0x1>
    80016758:	00011597          	auipc	a1,0x11
    8001675c:	5c858593          	addi	a1,a1,1480 # 80027d20 <__func__.0+0x2c0>
    80016760:	c789                	beqz	a5,8001676a <load_page_fault_3+0xa4>
    80016762:	00011597          	auipc	a1,0x11
    80016766:	5ce58593          	addi	a1,a1,1486 # 80027d30 <__func__.0+0x2d0>
    8001676a:	00011517          	auipc	a0,0x11
    8001676e:	60650513          	addi	a0,a0,1542 # 80027d70 <__func__.0+0x310>
    80016772:	5840f0ef          	jal	80025cf6 <printf>
    80016776:	00033797          	auipc	a5,0x33
    8001677a:	89b7c783          	lbu	a5,-1893(a5) # 80049011 <excpt+0x1>
    8001677e:	e7a1                	bnez	a5,800167c6 <load_page_fault_3+0x100>
    80016780:	4529                	li	a0,10
    80016782:	37e0e0ef          	jal	80024b00 <putchar>
    80016786:	00033797          	auipc	a5,0x33
    8001678a:	88b7c783          	lbu	a5,-1909(a5) # 80049011 <excpt+0x1>
    8001678e:	e795                	bnez	a5,800167ba <load_page_fault_3+0xf4>
    80016790:	4405                	li	s0,1



    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80016792:	00011597          	auipc	a1,0x11
    80016796:	58e58593          	addi	a1,a1,1422 # 80027d20 <__func__.0+0x2c0>
    8001679a:	00011517          	auipc	a0,0x11
    8001679e:	63e50513          	addi	a0,a0,1598 # 80027dd8 <__func__.0+0x378>
    800167a2:	5540f0ef          	jal	80025cf6 <printf>
    800167a6:	4511                	li	a0,4
    800167a8:	c4eea0ef          	jal	80000bf6 <goto_priv>
    800167ac:	d01ea0ef          	jal	800014ac <reset_state>
}
    800167b0:	60a2                	ld	ra,8(sp)
    800167b2:	8522                	mv	a0,s0
    800167b4:	6402                	ld	s0,0(sp)
    800167b6:	0141                	addi	sp,sp,16
    800167b8:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    800167ba:	4401                	li	s0,0
    TEST_END();
    800167bc:	00011597          	auipc	a1,0x11
    800167c0:	57458593          	addi	a1,a1,1396 # 80027d30 <__func__.0+0x2d0>
    800167c4:	bfd9                	j	8001679a <load_page_fault_3+0xd4>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    800167c6:	00011517          	auipc	a0,0x11
    800167ca:	5b250513          	addi	a0,a0,1458 # 80027d78 <__func__.0+0x318>
    800167ce:	5280f0ef          	jal	80025cf6 <printf>
    800167d2:	02900513          	li	a0,41
    800167d6:	32a0e0ef          	jal	80024b00 <putchar>
    800167da:	b75d                	j	80016780 <load_page_fault_3+0xba>

00000000800167dc <load_page_fault_4>:


bool load_page_fault_4(){
    800167dc:	1101                	addi	sp,sp,-32

    TEST_START();
    800167de:	00010597          	auipc	a1,0x10
    800167e2:	41258593          	addi	a1,a1,1042 # 80026bf0 <__func__.18>
    800167e6:	00011517          	auipc	a0,0x11
    800167ea:	55a50513          	addi	a0,a0,1370 # 80027d40 <__func__.0+0x2e0>
bool load_page_fault_4(){
    800167ee:	ec06                	sd	ra,24(sp)
    800167f0:	e822                	sd	s0,16(sp)
    800167f2:	e426                	sd	s1,8(sp)
    TEST_START();
    800167f4:	5020f0ef          	jal	80025cf6 <printf>
    800167f8:	4529                	li	a0,10
    800167fa:	3060e0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS); 
    800167fe:	450d                	li	a0,3
    80016800:	bf6ea0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80016804:	ddde90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016808:	81aea0ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001680c:	ea5e90ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80016810:	4509                	li	a0,2
    80016812:	be4ea0ef          	jal	80000bf6 <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80016816:	0330000f          	fence	rw,rw
    8001681a:	00032417          	auipc	s0,0x32
    8001681e:	7f640413          	addi	s0,s0,2038 # 80049010 <excpt>
    80016822:	4785                	li	a5,1
    80016824:	00033717          	auipc	a4,0x33
    80016828:	82073223          	sd	zero,-2012(a4) # 80049048 <excpt+0x38>
    8001682c:	00f41023          	sh	a5,0(s0)
    80016830:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80016834:	400197b7          	lui	a5,0x40019
    80016838:	078a                	slli	a5,a5,0x2
    8001683a:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>

    addr = hs_page_base(VSI_GI);
    lb(addr);
    TEST_ASSERT("vs mode lb when pte.v=0 leads to LPF",
    8001683e:	08200593          	li	a1,130
    80016842:	00016617          	auipc	a2,0x16
    80016846:	78e60613          	addi	a2,a2,1934 # 8002cfd0 <__func__.0+0x5570>
    8001684a:	00011517          	auipc	a0,0x11
    8001684e:	50e50513          	addi	a0,a0,1294 # 80027d58 <__func__.0+0x2f8>
    80016852:	4a40f0ef          	jal	80025cf6 <printf>
    80016856:	00032797          	auipc	a5,0x32
    8001685a:	7bb7c783          	lbu	a5,1979(a5) # 80049011 <excpt+0x1>
    8001685e:	00011597          	auipc	a1,0x11
    80016862:	4d258593          	addi	a1,a1,1234 # 80027d30 <__func__.0+0x2d0>
    80016866:	cf89                	beqz	a5,80016880 <load_page_fault_4+0xa4>
    80016868:	6418                	ld	a4,8(s0)
    8001686a:	47b5                	li	a5,13
    8001686c:	00011597          	auipc	a1,0x11
    80016870:	4b458593          	addi	a1,a1,1204 # 80027d20 <__func__.0+0x2c0>
    80016874:	00f70663          	beq	a4,a5,80016880 <load_page_fault_4+0xa4>
    80016878:	00011597          	auipc	a1,0x11
    8001687c:	4b858593          	addi	a1,a1,1208 # 80027d30 <__func__.0+0x2d0>
    80016880:	00011517          	auipc	a0,0x11
    80016884:	4f050513          	addi	a0,a0,1264 # 80027d70 <__func__.0+0x310>
    80016888:	46e0f0ef          	jal	80025cf6 <printf>
    8001688c:	00032797          	auipc	a5,0x32
    80016890:	7857c783          	lbu	a5,1925(a5) # 80049011 <excpt+0x1>
    80016894:	c789                	beqz	a5,8001689e <load_page_fault_4+0xc2>
    80016896:	6418                	ld	a4,8(s0)
    80016898:	47b5                	li	a5,13
    8001689a:	00f70c63          	beq	a4,a5,800168b2 <load_page_fault_4+0xd6>
    8001689e:	00011517          	auipc	a0,0x11
    800168a2:	4da50513          	addi	a0,a0,1242 # 80027d78 <__func__.0+0x318>
    800168a6:	4500f0ef          	jal	80025cf6 <printf>
    800168aa:	02900513          	li	a0,41
    800168ae:	2520e0ef          	jal	80024b00 <putchar>
    800168b2:	4529                	li	a0,10
    800168b4:	24c0e0ef          	jal	80024b00 <putchar>
    800168b8:	00032797          	auipc	a5,0x32
    800168bc:	7597c783          	lbu	a5,1881(a5) # 80049011 <excpt+0x1>
    800168c0:	4481                	li	s1,0
    800168c2:	c789                	beqz	a5,800168cc <load_page_fault_4+0xf0>
    800168c4:	6404                	ld	s1,8(s0)
    800168c6:	14cd                	addi	s1,s1,-13
    800168c8:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_LPF
    );


    //执行ld令时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    TEST_SETUP_EXCEPT();
    800168cc:	0330000f          	fence	rw,rw
    800168d0:	4785                	li	a5,1
    800168d2:	00032717          	auipc	a4,0x32
    800168d6:	76073b23          	sd	zero,1910(a4) # 80049048 <excpt+0x38>
    800168da:	00f41023          	sh	a5,0(s0)
    800168de:	0330000f          	fence	rw,rw
    addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800168e2:	000807b7          	lui	a5,0x80
    800168e6:	1007b073          	csrc	sstatus,a5
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    800168ea:	001007b7          	lui	a5,0x100
    800168ee:	05f78793          	addi	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    800168f2:	07b2                	slli	a5,a5,0xc
    800168f4:	0007b783          	ld	a5,0(a5)
    ld(addr);   
    TEST_ASSERT("vs mode ld when sstatus.mxr=0 and pte.r=0 leads to LPF",
    800168f8:	08200593          	li	a1,130
    800168fc:	00016617          	auipc	a2,0x16
    80016900:	6fc60613          	addi	a2,a2,1788 # 8002cff8 <__func__.0+0x5598>
    80016904:	00011517          	auipc	a0,0x11
    80016908:	45450513          	addi	a0,a0,1108 # 80027d58 <__func__.0+0x2f8>
    8001690c:	3ea0f0ef          	jal	80025cf6 <printf>
    80016910:	00032797          	auipc	a5,0x32
    80016914:	7017c783          	lbu	a5,1793(a5) # 80049011 <excpt+0x1>
    80016918:	00011597          	auipc	a1,0x11
    8001691c:	41858593          	addi	a1,a1,1048 # 80027d30 <__func__.0+0x2d0>
    80016920:	cf89                	beqz	a5,8001693a <load_page_fault_4+0x15e>
    80016922:	6418                	ld	a4,8(s0)
    80016924:	47b5                	li	a5,13
    80016926:	00011597          	auipc	a1,0x11
    8001692a:	3fa58593          	addi	a1,a1,1018 # 80027d20 <__func__.0+0x2c0>
    8001692e:	00f70663          	beq	a4,a5,8001693a <load_page_fault_4+0x15e>
    80016932:	00011597          	auipc	a1,0x11
    80016936:	3fe58593          	addi	a1,a1,1022 # 80027d30 <__func__.0+0x2d0>
    8001693a:	00011517          	auipc	a0,0x11
    8001693e:	43650513          	addi	a0,a0,1078 # 80027d70 <__func__.0+0x310>
    80016942:	3b40f0ef          	jal	80025cf6 <printf>
    80016946:	00032797          	auipc	a5,0x32
    8001694a:	6cb7c783          	lbu	a5,1739(a5) # 80049011 <excpt+0x1>
    8001694e:	c789                	beqz	a5,80016958 <load_page_fault_4+0x17c>
    80016950:	6418                	ld	a4,8(s0)
    80016952:	47b5                	li	a5,13
    80016954:	00f70c63          	beq	a4,a5,8001696c <load_page_fault_4+0x190>
    80016958:	00011517          	auipc	a0,0x11
    8001695c:	42050513          	addi	a0,a0,1056 # 80027d78 <__func__.0+0x318>
    80016960:	3960f0ef          	jal	80025cf6 <printf>
    80016964:	02900513          	li	a0,41
    80016968:	1980e0ef          	jal	80024b00 <putchar>
    8001696c:	4529                	li	a0,10
    8001696e:	1920e0ef          	jal	80024b00 <putchar>
    80016972:	c881                	beqz	s1,80016982 <load_page_fault_4+0x1a6>
    80016974:	00032797          	auipc	a5,0x32
    80016978:	69d7c783          	lbu	a5,1693(a5) # 80049011 <excpt+0x1>
    8001697c:	4481                	li	s1,0
    8001697e:	0e079763          	bnez	a5,80016a6c <load_page_fault_4+0x290>
        excpt.cause == CAUSE_LPF
    );

    //执行lh指令时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    goto_priv(PRIV_VS);
    80016982:	4509                	li	a0,2
    80016984:	a72ea0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80016988:	0330000f          	fence	rw,rw
    8001698c:	4785                	li	a5,1
    8001698e:	00032717          	auipc	a4,0x32
    80016992:	6a073d23          	sd	zero,1722(a4) # 80049048 <excpt+0x38>
    80016996:	00f41023          	sh	a5,0(s0)
    8001699a:	0330000f          	fence	rw,rw
    addr = hs_page_base(VSV_GV);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    8001699e:	000807b7          	lui	a5,0x80
    800169a2:	1007a073          	csrs	sstatus,a5
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    800169a6:	001007b7          	lui	a5,0x100
    800169aa:	07f5                	addi	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    800169ac:	07b2                	slli	a5,a5,0xc
    800169ae:	00079783          	lh	a5,0(a5)
    lh(addr);
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800169b2:	08200593          	li	a1,130
    800169b6:	00016617          	auipc	a2,0x16
    800169ba:	67a60613          	addi	a2,a2,1658 # 8002d030 <__func__.0+0x55d0>
    800169be:	00011517          	auipc	a0,0x11
    800169c2:	39a50513          	addi	a0,a0,922 # 80027d58 <__func__.0+0x2f8>
    800169c6:	3300f0ef          	jal	80025cf6 <printf>
    800169ca:	00032797          	auipc	a5,0x32
    800169ce:	6477c783          	lbu	a5,1607(a5) # 80049011 <excpt+0x1>
    800169d2:	00011597          	auipc	a1,0x11
    800169d6:	35e58593          	addi	a1,a1,862 # 80027d30 <__func__.0+0x2d0>
    800169da:	cf89                	beqz	a5,800169f4 <load_page_fault_4+0x218>
    800169dc:	6418                	ld	a4,8(s0)
    800169de:	47b5                	li	a5,13
    800169e0:	00011597          	auipc	a1,0x11
    800169e4:	34058593          	addi	a1,a1,832 # 80027d20 <__func__.0+0x2c0>
    800169e8:	00f70663          	beq	a4,a5,800169f4 <load_page_fault_4+0x218>
    800169ec:	00011597          	auipc	a1,0x11
    800169f0:	34458593          	addi	a1,a1,836 # 80027d30 <__func__.0+0x2d0>
    800169f4:	00011517          	auipc	a0,0x11
    800169f8:	37c50513          	addi	a0,a0,892 # 80027d70 <__func__.0+0x310>
    800169fc:	2fa0f0ef          	jal	80025cf6 <printf>
    80016a00:	00032797          	auipc	a5,0x32
    80016a04:	6117c783          	lbu	a5,1553(a5) # 80049011 <excpt+0x1>
    80016a08:	c789                	beqz	a5,80016a12 <load_page_fault_4+0x236>
    80016a0a:	6418                	ld	a4,8(s0)
    80016a0c:	47b5                	li	a5,13
    80016a0e:	00f70c63          	beq	a4,a5,80016a26 <load_page_fault_4+0x24a>
    80016a12:	00011517          	auipc	a0,0x11
    80016a16:	36650513          	addi	a0,a0,870 # 80027d78 <__func__.0+0x318>
    80016a1a:	2dc0f0ef          	jal	80025cf6 <printf>
    80016a1e:	02900513          	li	a0,41
    80016a22:	0de0e0ef          	jal	80024b00 <putchar>
    80016a26:	4529                	li	a0,10
    80016a28:	0d80e0ef          	jal	80024b00 <putchar>
    80016a2c:	c491                	beqz	s1,80016a38 <load_page_fault_4+0x25c>
    80016a2e:	00032497          	auipc	s1,0x32
    80016a32:	5e34c483          	lbu	s1,1507(s1) # 80049011 <excpt+0x1>
    80016a36:	e0a1                	bnez	s1,80016a76 <load_page_fault_4+0x29a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80016a38:	000807b7          	lui	a5,0x80
    80016a3c:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80016a40:	4481                	li	s1,0

    TEST_END();
    80016a42:	00011597          	auipc	a1,0x11
    80016a46:	2ee58593          	addi	a1,a1,750 # 80027d30 <__func__.0+0x2d0>
    80016a4a:	00011517          	auipc	a0,0x11
    80016a4e:	38e50513          	addi	a0,a0,910 # 80027dd8 <__func__.0+0x378>
    80016a52:	2a40f0ef          	jal	80025cf6 <printf>
    80016a56:	4511                	li	a0,4
    80016a58:	99eea0ef          	jal	80000bf6 <goto_priv>
    80016a5c:	a51ea0ef          	jal	800014ac <reset_state>

}
    80016a60:	60e2                	ld	ra,24(sp)
    80016a62:	6442                	ld	s0,16(sp)
    80016a64:	8526                	mv	a0,s1
    80016a66:	64a2                	ld	s1,8(sp)
    80016a68:	6105                	addi	sp,sp,32
    80016a6a:	8082                	ret
    TEST_ASSERT("vs mode ld when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80016a6c:	6404                	ld	s1,8(s0)
    80016a6e:	14cd                	addi	s1,s1,-13
    80016a70:	0014b493          	seqz	s1,s1
    80016a74:	b739                	j	80016982 <load_page_fault_4+0x1a6>
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80016a76:	6418                	ld	a4,8(s0)
    80016a78:	47b5                	li	a5,13
    80016a7a:	faf71fe3          	bne	a4,a5,80016a38 <load_page_fault_4+0x25c>
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80016a7e:	000807b7          	lui	a5,0x80
    80016a82:	1007b073          	csrc	sstatus,a5
    TEST_END();
    80016a86:	00011597          	auipc	a1,0x11
    80016a8a:	29a58593          	addi	a1,a1,666 # 80027d20 <__func__.0+0x2c0>
    80016a8e:	bf75                	j	80016a4a <load_page_fault_4+0x26e>

0000000080016a90 <load_page_fault_5>:

bool load_page_fault_5(){
    80016a90:	1101                	addi	sp,sp,-32

    TEST_START();
    80016a92:	00010597          	auipc	a1,0x10
    80016a96:	17658593          	addi	a1,a1,374 # 80026c08 <__func__.17>
    80016a9a:	00011517          	auipc	a0,0x11
    80016a9e:	2a650513          	addi	a0,a0,678 # 80027d40 <__func__.0+0x2e0>
bool load_page_fault_5(){
    80016aa2:	ec06                	sd	ra,24(sp)
    80016aa4:	e822                	sd	s0,16(sp)
    80016aa6:	e426                	sd	s1,8(sp)
    TEST_START();
    80016aa8:	24e0f0ef          	jal	80025cf6 <printf>
    80016aac:	4529                	li	a0,10
    80016aae:	0520e0ef          	jal	80024b00 <putchar>


    goto_priv(PRIV_HS);
    80016ab2:	450d                	li	a0,3
    80016ab4:	942ea0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80016ab8:	b29e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016abc:	d67e90ef          	jal	80000822 <hpt_init>
    vspt_init();
    80016ac0:	bf1e90ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    80016ac4:	4511                	li	a0,4
    80016ac6:	930ea0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80016aca:	000407b7          	lui	a5,0x40
    80016ace:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80016ad2:	4509                	li	a0,2
    80016ad4:	922ea0ef          	jal	80000bf6 <goto_priv>

    //执行lbu指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80016ad8:	0330000f          	fence	rw,rw
    80016adc:	00032417          	auipc	s0,0x32
    80016ae0:	53440413          	addi	s0,s0,1332 # 80049010 <excpt>
    80016ae4:	4785                	li	a5,1
    80016ae6:	00032717          	auipc	a4,0x32
    80016aea:	56073123          	sd	zero,1378(a4) # 80049048 <excpt+0x38>
    80016aee:	00f41023          	sh	a5,0(s0)
    80016af2:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lbu, "lbu", uint8_t);
    80016af6:	000807b7          	lui	a5,0x80
    80016afa:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80016afc:	07b6                	slli	a5,a5,0xd
    80016afe:	0007c783          	lbu	a5,0(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    lbu(addr);
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    80016b02:	08200593          	li	a1,130
    80016b06:	00016617          	auipc	a2,0x16
    80016b0a:	57260613          	addi	a2,a2,1394 # 8002d078 <__func__.0+0x5618>
    80016b0e:	00011517          	auipc	a0,0x11
    80016b12:	24a50513          	addi	a0,a0,586 # 80027d58 <__func__.0+0x2f8>
    80016b16:	1e00f0ef          	jal	80025cf6 <printf>
    80016b1a:	00032797          	auipc	a5,0x32
    80016b1e:	4f77c783          	lbu	a5,1271(a5) # 80049011 <excpt+0x1>
    80016b22:	00011597          	auipc	a1,0x11
    80016b26:	20e58593          	addi	a1,a1,526 # 80027d30 <__func__.0+0x2d0>
    80016b2a:	cf89                	beqz	a5,80016b44 <load_page_fault_5+0xb4>
    80016b2c:	6418                	ld	a4,8(s0)
    80016b2e:	47b5                	li	a5,13
    80016b30:	00011597          	auipc	a1,0x11
    80016b34:	1f058593          	addi	a1,a1,496 # 80027d20 <__func__.0+0x2c0>
    80016b38:	00f70663          	beq	a4,a5,80016b44 <load_page_fault_5+0xb4>
    80016b3c:	00011597          	auipc	a1,0x11
    80016b40:	1f458593          	addi	a1,a1,500 # 80027d30 <__func__.0+0x2d0>
    80016b44:	00011517          	auipc	a0,0x11
    80016b48:	22c50513          	addi	a0,a0,556 # 80027d70 <__func__.0+0x310>
    80016b4c:	1aa0f0ef          	jal	80025cf6 <printf>
    80016b50:	00032797          	auipc	a5,0x32
    80016b54:	4c17c783          	lbu	a5,1217(a5) # 80049011 <excpt+0x1>
    80016b58:	c789                	beqz	a5,80016b62 <load_page_fault_5+0xd2>
    80016b5a:	6418                	ld	a4,8(s0)
    80016b5c:	47b5                	li	a5,13
    80016b5e:	00f70c63          	beq	a4,a5,80016b76 <load_page_fault_5+0xe6>
    80016b62:	00011517          	auipc	a0,0x11
    80016b66:	21650513          	addi	a0,a0,534 # 80027d78 <__func__.0+0x318>
    80016b6a:	18c0f0ef          	jal	80025cf6 <printf>
    80016b6e:	02900513          	li	a0,41
    80016b72:	78f0d0ef          	jal	80024b00 <putchar>
    80016b76:	4529                	li	a0,10
    80016b78:	7890d0ef          	jal	80024b00 <putchar>
    80016b7c:	00032497          	auipc	s1,0x32
    80016b80:	4954c483          	lbu	s1,1173(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80016b84:	00011597          	auipc	a1,0x11
    80016b88:	1ac58593          	addi	a1,a1,428 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    80016b8c:	cc91                	beqz	s1,80016ba8 <load_page_fault_5+0x118>
    80016b8e:	6418                	ld	a4,8(s0)
    80016b90:	47b5                	li	a5,13
    TEST_END();
    80016b92:	00011597          	auipc	a1,0x11
    80016b96:	18e58593          	addi	a1,a1,398 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    80016b9a:	00f70763          	beq	a4,a5,80016ba8 <load_page_fault_5+0x118>
    80016b9e:	4481                	li	s1,0
    TEST_END();
    80016ba0:	00011597          	auipc	a1,0x11
    80016ba4:	19058593          	addi	a1,a1,400 # 80027d30 <__func__.0+0x2d0>
    80016ba8:	00011517          	auipc	a0,0x11
    80016bac:	23050513          	addi	a0,a0,560 # 80027dd8 <__func__.0+0x378>
    80016bb0:	1460f0ef          	jal	80025cf6 <printf>
    80016bb4:	4511                	li	a0,4
    80016bb6:	840ea0ef          	jal	80000bf6 <goto_priv>
    80016bba:	8f3ea0ef          	jal	800014ac <reset_state>
}
    80016bbe:	60e2                	ld	ra,24(sp)
    80016bc0:	6442                	ld	s0,16(sp)
    80016bc2:	8526                	mv	a0,s1
    80016bc4:	64a2                	ld	s1,8(sp)
    80016bc6:	6105                	addi	sp,sp,32
    80016bc8:	8082                	ret

0000000080016bca <load_page_fault_6>:

bool load_page_fault_6(){
    80016bca:	1141                	addi	sp,sp,-16

    TEST_START();
    80016bcc:	00010597          	auipc	a1,0x10
    80016bd0:	05458593          	addi	a1,a1,84 # 80026c20 <__func__.16>
    80016bd4:	00011517          	auipc	a0,0x11
    80016bd8:	16c50513          	addi	a0,a0,364 # 80027d40 <__func__.0+0x2e0>
bool load_page_fault_6(){
    80016bdc:	e406                	sd	ra,8(sp)
    80016bde:	e022                	sd	s0,0(sp)
    TEST_START();
    80016be0:	1160f0ef          	jal	80025cf6 <printf>
    80016be4:	4529                	li	a0,10
    80016be6:	71b0d0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    80016bea:	450d                	li	a0,3
    80016bec:	80aea0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80016bf0:	9f1e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016bf4:	c2fe90ef          	jal	80000822 <hpt_init>
    vspt_init();
    80016bf8:	ab9e90ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    80016bfc:	4511                	li	a0,4
    80016bfe:	ff9e90ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80016c02:	000407b7          	lui	a5,0x40
    80016c06:	2007a073          	csrs	vsstatus,a5

    //执行lbu指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_VS);
    80016c0a:	4509                	li	a0,2
    80016c0c:	febe90ef          	jal	80000bf6 <goto_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    80016c10:	0330000f          	fence	rw,rw
    80016c14:	4785                	li	a5,1
    80016c16:	00032717          	auipc	a4,0x32
    80016c1a:	42073923          	sd	zero,1074(a4) # 80049048 <excpt+0x38>
    80016c1e:	00032717          	auipc	a4,0x32
    80016c22:	3ef71923          	sh	a5,1010(a4) # 80049010 <excpt>
    80016c26:	0330000f          	fence	rw,rw
    80016c2a:	000807b7          	lui	a5,0x80
    80016c2e:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80016c30:	07b6                	slli	a5,a5,0xd
    80016c32:	0007c783          	lbu	a5,0(a5)
    lbu(addr);

    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    80016c36:	08200593          	li	a1,130
    80016c3a:	00016617          	auipc	a2,0x16
    80016c3e:	47e60613          	addi	a2,a2,1150 # 8002d0b8 <__func__.0+0x5658>
    80016c42:	00011517          	auipc	a0,0x11
    80016c46:	11650513          	addi	a0,a0,278 # 80027d58 <__func__.0+0x2f8>
    80016c4a:	0ac0f0ef          	jal	80025cf6 <printf>
    80016c4e:	00032797          	auipc	a5,0x32
    80016c52:	3c37c783          	lbu	a5,963(a5) # 80049011 <excpt+0x1>
    80016c56:	00011597          	auipc	a1,0x11
    80016c5a:	0ca58593          	addi	a1,a1,202 # 80027d20 <__func__.0+0x2c0>
    80016c5e:	c789                	beqz	a5,80016c68 <load_page_fault_6+0x9e>
    80016c60:	00011597          	auipc	a1,0x11
    80016c64:	0d058593          	addi	a1,a1,208 # 80027d30 <__func__.0+0x2d0>
    80016c68:	00011517          	auipc	a0,0x11
    80016c6c:	10850513          	addi	a0,a0,264 # 80027d70 <__func__.0+0x310>
    80016c70:	0860f0ef          	jal	80025cf6 <printf>
    80016c74:	00032797          	auipc	a5,0x32
    80016c78:	39d7c783          	lbu	a5,925(a5) # 80049011 <excpt+0x1>
    80016c7c:	e7a1                	bnez	a5,80016cc4 <load_page_fault_6+0xfa>
    80016c7e:	4529                	li	a0,10
    80016c80:	6810d0ef          	jal	80024b00 <putchar>
    80016c84:	00032797          	auipc	a5,0x32
    80016c88:	38d7c783          	lbu	a5,909(a5) # 80049011 <excpt+0x1>
    80016c8c:	e795                	bnez	a5,80016cb8 <load_page_fault_6+0xee>
    80016c8e:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    80016c90:	00011597          	auipc	a1,0x11
    80016c94:	09058593          	addi	a1,a1,144 # 80027d20 <__func__.0+0x2c0>
    80016c98:	00011517          	auipc	a0,0x11
    80016c9c:	14050513          	addi	a0,a0,320 # 80027dd8 <__func__.0+0x378>
    80016ca0:	0560f0ef          	jal	80025cf6 <printf>
    80016ca4:	4511                	li	a0,4
    80016ca6:	f51e90ef          	jal	80000bf6 <goto_priv>
    80016caa:	803ea0ef          	jal	800014ac <reset_state>
}
    80016cae:	60a2                	ld	ra,8(sp)
    80016cb0:	8522                	mv	a0,s0
    80016cb2:	6402                	ld	s0,0(sp)
    80016cb4:	0141                	addi	sp,sp,16
    80016cb6:	8082                	ret
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    80016cb8:	4401                	li	s0,0
    TEST_END();
    80016cba:	00011597          	auipc	a1,0x11
    80016cbe:	07658593          	addi	a1,a1,118 # 80027d30 <__func__.0+0x2d0>
    80016cc2:	bfd9                	j	80016c98 <load_page_fault_6+0xce>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    80016cc4:	00011517          	auipc	a0,0x11
    80016cc8:	0b450513          	addi	a0,a0,180 # 80027d78 <__func__.0+0x318>
    80016ccc:	02a0f0ef          	jal	80025cf6 <printf>
    80016cd0:	02900513          	li	a0,41
    80016cd4:	62d0d0ef          	jal	80024b00 <putchar>
    80016cd8:	b75d                	j	80016c7e <load_page_fault_6+0xb4>

0000000080016cda <load_page_fault_7>:


bool load_page_fault_7(){
    80016cda:	1101                	addi	sp,sp,-32

    TEST_START();
    80016cdc:	00010597          	auipc	a1,0x10
    80016ce0:	f5c58593          	addi	a1,a1,-164 # 80026c38 <__func__.15>
    80016ce4:	00011517          	auipc	a0,0x11
    80016ce8:	05c50513          	addi	a0,a0,92 # 80027d40 <__func__.0+0x2e0>
bool load_page_fault_7(){
    80016cec:	ec06                	sd	ra,24(sp)
    80016cee:	e822                	sd	s0,16(sp)
    80016cf0:	e426                	sd	s1,8(sp)
    TEST_START();
    80016cf2:	0040f0ef          	jal	80025cf6 <printf>
    80016cf6:	4529                	li	a0,10
    80016cf8:	6090d0ef          	jal	80024b00 <putchar>


    goto_priv(PRIV_HS);
    80016cfc:	450d                	li	a0,3
    80016cfe:	ef9e90ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80016d02:	8dfe90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016d06:	b1de90ef          	jal	80000822 <hpt_init>
    vspt_init();
    80016d0a:	9a7e90ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    80016d0e:	4511                	li	a0,4
    80016d10:	ee7e90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80016d14:	000407b7          	lui	a5,0x40
    80016d18:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    80016d1c:	450d                	li	a0,3
    80016d1e:	ed9e90ef          	jal	80000bf6 <goto_priv>

    //执行hlvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80016d22:	0330000f          	fence	rw,rw
    80016d26:	00032417          	auipc	s0,0x32
    80016d2a:	2ea40413          	addi	s0,s0,746 # 80049010 <excpt>
    80016d2e:	4785                	li	a5,1
    80016d30:	00032717          	auipc	a4,0x32
    80016d34:	30073c23          	sd	zero,792(a4) # 80049048 <excpt+0x38>
    80016d38:	00f41023          	sh	a5,0(s0)
    80016d3c:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    80016d40:	000807b7          	lui	a5,0x80
    80016d44:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80016d46:	07b6                	slli	a5,a5,0xd
    80016d48:	0007b783          	ld	a5,0(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    ld(addr);
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    80016d4c:	08200593          	li	a1,130
    80016d50:	00016617          	auipc	a2,0x16
    80016d54:	3a060613          	addi	a2,a2,928 # 8002d0f0 <__func__.0+0x5690>
    80016d58:	00011517          	auipc	a0,0x11
    80016d5c:	00050513          	mv	a0,a0
    80016d60:	7970e0ef          	jal	80025cf6 <printf>
    80016d64:	00032797          	auipc	a5,0x32
    80016d68:	2ad7c783          	lbu	a5,685(a5) # 80049011 <excpt+0x1>
    80016d6c:	00011597          	auipc	a1,0x11
    80016d70:	fc458593          	addi	a1,a1,-60 # 80027d30 <__func__.0+0x2d0>
    80016d74:	cf89                	beqz	a5,80016d8e <load_page_fault_7+0xb4>
    80016d76:	6418                	ld	a4,8(s0)
    80016d78:	47b5                	li	a5,13
    80016d7a:	00011597          	auipc	a1,0x11
    80016d7e:	fa658593          	addi	a1,a1,-90 # 80027d20 <__func__.0+0x2c0>
    80016d82:	00f70663          	beq	a4,a5,80016d8e <load_page_fault_7+0xb4>
    80016d86:	00011597          	auipc	a1,0x11
    80016d8a:	faa58593          	addi	a1,a1,-86 # 80027d30 <__func__.0+0x2d0>
    80016d8e:	00011517          	auipc	a0,0x11
    80016d92:	fe250513          	addi	a0,a0,-30 # 80027d70 <__func__.0+0x310>
    80016d96:	7610e0ef          	jal	80025cf6 <printf>
    80016d9a:	00032797          	auipc	a5,0x32
    80016d9e:	2777c783          	lbu	a5,631(a5) # 80049011 <excpt+0x1>
    80016da2:	c789                	beqz	a5,80016dac <load_page_fault_7+0xd2>
    80016da4:	6418                	ld	a4,8(s0)
    80016da6:	47b5                	li	a5,13
    80016da8:	00f70c63          	beq	a4,a5,80016dc0 <load_page_fault_7+0xe6>
    80016dac:	00011517          	auipc	a0,0x11
    80016db0:	fcc50513          	addi	a0,a0,-52 # 80027d78 <__func__.0+0x318>
    80016db4:	7430e0ef          	jal	80025cf6 <printf>
    80016db8:	02900513          	li	a0,41
    80016dbc:	5450d0ef          	jal	80024b00 <putchar>
    80016dc0:	4529                	li	a0,10
    80016dc2:	53f0d0ef          	jal	80024b00 <putchar>
    80016dc6:	00032497          	auipc	s1,0x32
    80016dca:	24b4c483          	lbu	s1,587(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80016dce:	00011597          	auipc	a1,0x11
    80016dd2:	f6258593          	addi	a1,a1,-158 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    80016dd6:	cc91                	beqz	s1,80016df2 <load_page_fault_7+0x118>
    80016dd8:	6418                	ld	a4,8(s0)
    80016dda:	47b5                	li	a5,13
    TEST_END();
    80016ddc:	00011597          	auipc	a1,0x11
    80016de0:	f4458593          	addi	a1,a1,-188 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    80016de4:	00f70763          	beq	a4,a5,80016df2 <load_page_fault_7+0x118>
    80016de8:	4481                	li	s1,0
    TEST_END();
    80016dea:	00011597          	auipc	a1,0x11
    80016dee:	f4658593          	addi	a1,a1,-186 # 80027d30 <__func__.0+0x2d0>
    80016df2:	00011517          	auipc	a0,0x11
    80016df6:	fe650513          	addi	a0,a0,-26 # 80027dd8 <__func__.0+0x378>
    80016dfa:	6fd0e0ef          	jal	80025cf6 <printf>
    80016dfe:	4511                	li	a0,4
    80016e00:	df7e90ef          	jal	80000bf6 <goto_priv>
    80016e04:	ea8ea0ef          	jal	800014ac <reset_state>
}
    80016e08:	60e2                	ld	ra,24(sp)
    80016e0a:	6442                	ld	s0,16(sp)
    80016e0c:	8526                	mv	a0,s1
    80016e0e:	64a2                	ld	s1,8(sp)
    80016e10:	6105                	addi	sp,sp,32
    80016e12:	8082                	ret

0000000080016e14 <load_page_fault_8>:

bool load_page_fault_8(){
    80016e14:	1141                	addi	sp,sp,-16

    TEST_START();
    80016e16:	00010597          	auipc	a1,0x10
    80016e1a:	e3a58593          	addi	a1,a1,-454 # 80026c50 <__func__.14>
    80016e1e:	00011517          	auipc	a0,0x11
    80016e22:	f2250513          	addi	a0,a0,-222 # 80027d40 <__func__.0+0x2e0>
bool load_page_fault_8(){
    80016e26:	e406                	sd	ra,8(sp)
    80016e28:	e022                	sd	s0,0(sp)
    TEST_START();
    80016e2a:	6cd0e0ef          	jal	80025cf6 <printf>
    80016e2e:	4529                	li	a0,10
    80016e30:	4d10d0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    80016e34:	450d                	li	a0,3
    80016e36:	dc1e90ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80016e3a:	fa6e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016e3e:	9e5e90ef          	jal	80000822 <hpt_init>
    vspt_init();
    80016e42:	86fe90ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    80016e46:	4511                	li	a0,4
    80016e48:	dafe90ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    80016e4c:	000407b7          	lui	a5,0x40
    80016e50:	3007a073          	csrs	mstatus,a5

    //执行ld指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_HS);
    80016e54:	450d                	li	a0,3
    80016e56:	da1e90ef          	jal	80000bf6 <goto_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    80016e5a:	0330000f          	fence	rw,rw
    80016e5e:	4785                	li	a5,1
    80016e60:	00032717          	auipc	a4,0x32
    80016e64:	1e073423          	sd	zero,488(a4) # 80049048 <excpt+0x38>
    80016e68:	00032717          	auipc	a4,0x32
    80016e6c:	1af71423          	sh	a5,424(a4) # 80049010 <excpt>
    80016e70:	0330000f          	fence	rw,rw
    80016e74:	000807b7          	lui	a5,0x80
    80016e78:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80016e7a:	07b6                	slli	a5,a5,0xd
    80016e7c:	0007b783          	ld	a5,0(a5)
    ld(addr);

    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    80016e80:	08200593          	li	a1,130
    80016e84:	00016617          	auipc	a2,0x16
    80016e88:	2a460613          	addi	a2,a2,676 # 8002d128 <__func__.0+0x56c8>
    80016e8c:	00011517          	auipc	a0,0x11
    80016e90:	ecc50513          	addi	a0,a0,-308 # 80027d58 <__func__.0+0x2f8>
    80016e94:	6630e0ef          	jal	80025cf6 <printf>
    80016e98:	00032797          	auipc	a5,0x32
    80016e9c:	1797c783          	lbu	a5,377(a5) # 80049011 <excpt+0x1>
    80016ea0:	00011597          	auipc	a1,0x11
    80016ea4:	e8058593          	addi	a1,a1,-384 # 80027d20 <__func__.0+0x2c0>
    80016ea8:	c789                	beqz	a5,80016eb2 <load_page_fault_8+0x9e>
    80016eaa:	00011597          	auipc	a1,0x11
    80016eae:	e8658593          	addi	a1,a1,-378 # 80027d30 <__func__.0+0x2d0>
    80016eb2:	00011517          	auipc	a0,0x11
    80016eb6:	ebe50513          	addi	a0,a0,-322 # 80027d70 <__func__.0+0x310>
    80016eba:	63d0e0ef          	jal	80025cf6 <printf>
    80016ebe:	00032797          	auipc	a5,0x32
    80016ec2:	1537c783          	lbu	a5,339(a5) # 80049011 <excpt+0x1>
    80016ec6:	e7a1                	bnez	a5,80016f0e <load_page_fault_8+0xfa>
    80016ec8:	4529                	li	a0,10
    80016eca:	4370d0ef          	jal	80024b00 <putchar>
    80016ece:	00032797          	auipc	a5,0x32
    80016ed2:	1437c783          	lbu	a5,323(a5) # 80049011 <excpt+0x1>
    80016ed6:	e795                	bnez	a5,80016f02 <load_page_fault_8+0xee>
    80016ed8:	4405                	li	s0,1



    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80016eda:	00011597          	auipc	a1,0x11
    80016ede:	e4658593          	addi	a1,a1,-442 # 80027d20 <__func__.0+0x2c0>
    80016ee2:	00011517          	auipc	a0,0x11
    80016ee6:	ef650513          	addi	a0,a0,-266 # 80027dd8 <__func__.0+0x378>
    80016eea:	60d0e0ef          	jal	80025cf6 <printf>
    80016eee:	4511                	li	a0,4
    80016ef0:	d07e90ef          	jal	80000bf6 <goto_priv>
    80016ef4:	db8ea0ef          	jal	800014ac <reset_state>
}
    80016ef8:	60a2                	ld	ra,8(sp)
    80016efa:	8522                	mv	a0,s0
    80016efc:	6402                	ld	s0,0(sp)
    80016efe:	0141                	addi	sp,sp,16
    80016f00:	8082                	ret
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    80016f02:	4401                	li	s0,0
    TEST_END();
    80016f04:	00011597          	auipc	a1,0x11
    80016f08:	e2c58593          	addi	a1,a1,-468 # 80027d30 <__func__.0+0x2d0>
    80016f0c:	bfd9                	j	80016ee2 <load_page_fault_8+0xce>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    80016f0e:	00011517          	auipc	a0,0x11
    80016f12:	e6a50513          	addi	a0,a0,-406 # 80027d78 <__func__.0+0x318>
    80016f16:	5e10e0ef          	jal	80025cf6 <printf>
    80016f1a:	02900513          	li	a0,41
    80016f1e:	3e30d0ef          	jal	80024b00 <putchar>
    80016f22:	b75d                	j	80016ec8 <load_page_fault_8+0xb4>

0000000080016f24 <store_page_fault_1>:





bool store_page_fault_1(){
    80016f24:	1101                	addi	sp,sp,-32

    TEST_START();
    80016f26:	00010597          	auipc	a1,0x10
    80016f2a:	d4258593          	addi	a1,a1,-702 # 80026c68 <__func__.13>
    80016f2e:	00011517          	auipc	a0,0x11
    80016f32:	e1250513          	addi	a0,a0,-494 # 80027d40 <__func__.0+0x2e0>
bool store_page_fault_1(){
    80016f36:	ec06                	sd	ra,24(sp)
    80016f38:	e822                	sd	s0,16(sp)
    80016f3a:	e426                	sd	s1,8(sp)
    TEST_START();
    80016f3c:	5bb0e0ef          	jal	80025cf6 <printf>
    80016f40:	4529                	li	a0,10
    80016f42:	3bf0d0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    80016f46:	450d                	li	a0,3
    80016f48:	cafe90ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80016f4c:	e94e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016f50:	8d3e90ef          	jal	80000822 <hpt_init>
    vspt_init();
    80016f54:	f5ce90ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80016f58:	450d                	li	a0,3
    80016f5a:	c9de90ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80016f5e:	4509                	li	a0,2
    80016f60:	bb7e90ef          	jal	80000b16 <set_prev_priv>

    //执行store指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80016f64:	0330000f          	fence	rw,rw
    80016f68:	00032497          	auipc	s1,0x32
    80016f6c:	0a848493          	addi	s1,s1,168 # 80049010 <excpt>
    80016f70:	4785                	li	a5,1
    80016f72:	00032717          	auipc	a4,0x32
    80016f76:	0c073b23          	sd	zero,214(a4) # 80049048 <excpt+0x38>
    80016f7a:	00f49023          	sh	a5,0(s1)
    80016f7e:	0330000f          	fence	rw,rw
    asm volatile(
    80016f82:	37ab77b7          	lui	a5,0x37ab7
    80016f86:	078a                	slli	a5,a5,0x2
    80016f88:	40019737          	lui	a4,0x40019
    80016f8c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80016f90:	070a                	slli	a4,a4,0x2
    80016f92:	6ef74073          	.insn	4, 0x6ef74073

    addr = hs_page_base(VSI_GI);
    hsvd(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when pte.v=0 leads to LPF",
    80016f96:	08200593          	li	a1,130
    80016f9a:	00016617          	auipc	a2,0x16
    80016f9e:	1c660613          	addi	a2,a2,454 # 8002d160 <__func__.0+0x5700>
    80016fa2:	00011517          	auipc	a0,0x11
    80016fa6:	db650513          	addi	a0,a0,-586 # 80027d58 <__func__.0+0x2f8>
    80016faa:	54d0e0ef          	jal	80025cf6 <printf>
    80016fae:	00032797          	auipc	a5,0x32
    80016fb2:	0637c783          	lbu	a5,99(a5) # 80049011 <excpt+0x1>
    80016fb6:	00011597          	auipc	a1,0x11
    80016fba:	d7a58593          	addi	a1,a1,-646 # 80027d30 <__func__.0+0x2d0>
    80016fbe:	cf89                	beqz	a5,80016fd8 <store_page_fault_1+0xb4>
    80016fc0:	6498                	ld	a4,8(s1)
    80016fc2:	47bd                	li	a5,15
    80016fc4:	00011597          	auipc	a1,0x11
    80016fc8:	d5c58593          	addi	a1,a1,-676 # 80027d20 <__func__.0+0x2c0>
    80016fcc:	00f70663          	beq	a4,a5,80016fd8 <store_page_fault_1+0xb4>
    80016fd0:	00011597          	auipc	a1,0x11
    80016fd4:	d6058593          	addi	a1,a1,-672 # 80027d30 <__func__.0+0x2d0>
    80016fd8:	00011517          	auipc	a0,0x11
    80016fdc:	d9850513          	addi	a0,a0,-616 # 80027d70 <__func__.0+0x310>
    80016fe0:	5170e0ef          	jal	80025cf6 <printf>
    80016fe4:	00032797          	auipc	a5,0x32
    80016fe8:	02d7c783          	lbu	a5,45(a5) # 80049011 <excpt+0x1>
    80016fec:	c789                	beqz	a5,80016ff6 <store_page_fault_1+0xd2>
    80016fee:	6498                	ld	a4,8(s1)
    80016ff0:	47bd                	li	a5,15
    80016ff2:	00f70c63          	beq	a4,a5,8001700a <store_page_fault_1+0xe6>
    80016ff6:	00011517          	auipc	a0,0x11
    80016ffa:	d8250513          	addi	a0,a0,-638 # 80027d78 <__func__.0+0x318>
    80016ffe:	4f90e0ef          	jal	80025cf6 <printf>
    80017002:	02900513          	li	a0,41
    80017006:	2fb0d0ef          	jal	80024b00 <putchar>
    8001700a:	4529                	li	a0,10
    8001700c:	2f50d0ef          	jal	80024b00 <putchar>
    80017010:	00032797          	auipc	a5,0x32
    80017014:	0017c783          	lbu	a5,1(a5) # 80049011 <excpt+0x1>
    80017018:	4401                	li	s0,0
    8001701a:	c789                	beqz	a5,80017024 <store_page_fault_1+0x100>
    8001701c:	6480                	ld	s0,8(s1)
    8001701e:	1445                	addi	s0,s0,-15
    80017020:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_SPF
    );


    //执行store指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    80017024:	0330000f          	fence	rw,rw
    80017028:	4785                	li	a5,1
    8001702a:	00032717          	auipc	a4,0x32
    8001702e:	00073f23          	sd	zero,30(a4) # 80049048 <excpt+0x38>
    80017032:	00f49023          	sh	a5,0(s1)
    80017036:	0330000f          	fence	rw,rw
    asm volatile(
    8001703a:	37ab77b7          	lui	a5,0x37ab7
    8001703e:	00100737          	lui	a4,0x100
    80017042:	078a                	slli	a5,a5,0x2
    80017044:	05570713          	addi	a4,a4,85 # 100055 <STACK_SIZE+0x55>
    80017048:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001704c:	0732                	slli	a4,a4,0xc
    8001704e:	62f74073          	.insn	4, 0x62f74073
    addr = hs_page_base(VSRX_GRWX);

    hsvb(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvb when and pte.w=0 leads to LPF",
    80017052:	08200593          	li	a1,130
    80017056:	00016617          	auipc	a2,0x16
    8001705a:	13260613          	addi	a2,a2,306 # 8002d188 <__func__.0+0x5728>
    8001705e:	00011517          	auipc	a0,0x11
    80017062:	cfa50513          	addi	a0,a0,-774 # 80027d58 <__func__.0+0x2f8>
    80017066:	4910e0ef          	jal	80025cf6 <printf>
    8001706a:	00032797          	auipc	a5,0x32
    8001706e:	fa77c783          	lbu	a5,-89(a5) # 80049011 <excpt+0x1>
    80017072:	00011597          	auipc	a1,0x11
    80017076:	cbe58593          	addi	a1,a1,-834 # 80027d30 <__func__.0+0x2d0>
    8001707a:	cf89                	beqz	a5,80017094 <store_page_fault_1+0x170>
    8001707c:	6498                	ld	a4,8(s1)
    8001707e:	47bd                	li	a5,15
    80017080:	00011597          	auipc	a1,0x11
    80017084:	ca058593          	addi	a1,a1,-864 # 80027d20 <__func__.0+0x2c0>
    80017088:	00f70663          	beq	a4,a5,80017094 <store_page_fault_1+0x170>
    8001708c:	00011597          	auipc	a1,0x11
    80017090:	ca458593          	addi	a1,a1,-860 # 80027d30 <__func__.0+0x2d0>
    80017094:	00011517          	auipc	a0,0x11
    80017098:	cdc50513          	addi	a0,a0,-804 # 80027d70 <__func__.0+0x310>
    8001709c:	45b0e0ef          	jal	80025cf6 <printf>
    800170a0:	00032797          	auipc	a5,0x32
    800170a4:	f717c783          	lbu	a5,-143(a5) # 80049011 <excpt+0x1>
    800170a8:	c789                	beqz	a5,800170b2 <store_page_fault_1+0x18e>
    800170aa:	6498                	ld	a4,8(s1)
    800170ac:	47bd                	li	a5,15
    800170ae:	00f70c63          	beq	a4,a5,800170c6 <store_page_fault_1+0x1a2>
    800170b2:	00011517          	auipc	a0,0x11
    800170b6:	cc650513          	addi	a0,a0,-826 # 80027d78 <__func__.0+0x318>
    800170ba:	43d0e0ef          	jal	80025cf6 <printf>
    800170be:	02900513          	li	a0,41
    800170c2:	23f0d0ef          	jal	80024b00 <putchar>
    800170c6:	4529                	li	a0,10
    800170c8:	2390d0ef          	jal	80024b00 <putchar>
    800170cc:	c419                	beqz	s0,800170da <store_page_fault_1+0x1b6>
    800170ce:	00032797          	auipc	a5,0x32
    800170d2:	f437c783          	lbu	a5,-189(a5) # 80049011 <excpt+0x1>
    800170d6:	4401                	li	s0,0
    800170d8:	e3e1                	bnez	a5,80017198 <store_page_fault_1+0x274>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行store指令时，pte.w=1
    TEST_SETUP_EXCEPT();
    800170da:	0330000f          	fence	rw,rw
    800170de:	4785                	li	a5,1
    800170e0:	00032717          	auipc	a4,0x32
    800170e4:	f6073423          	sd	zero,-152(a4) # 80049048 <excpt+0x38>
    800170e8:	00f49023          	sh	a5,0(s1)
    800170ec:	0330000f          	fence	rw,rw
    asm volatile(
    800170f0:	37ab77b7          	lui	a5,0x37ab7
    800170f4:	00080737          	lui	a4,0x80
    800170f8:	078a                	slli	a5,a5,0x2
    800170fa:	070d                	addi	a4,a4,3 # 80003 <_test_table_size+0x80002>
    800170fc:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80017100:	0736                	slli	a4,a4,0xd
    80017102:	66f74073          	.insn	4, 0x66f74073
    addr = hs_page_base(VSRW_GURW);

    hsvh(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvh successful when pte.w=1",
    80017106:	08200593          	li	a1,130
    8001710a:	00016617          	auipc	a2,0x16
    8001710e:	0ae60613          	addi	a2,a2,174 # 8002d1b8 <__func__.0+0x5758>
    80017112:	00011517          	auipc	a0,0x11
    80017116:	c4650513          	addi	a0,a0,-954 # 80027d58 <__func__.0+0x2f8>
    8001711a:	3dd0e0ef          	jal	80025cf6 <printf>
    8001711e:	00032797          	auipc	a5,0x32
    80017122:	ef37c783          	lbu	a5,-269(a5) # 80049011 <excpt+0x1>
    80017126:	00011597          	auipc	a1,0x11
    8001712a:	c0a58593          	addi	a1,a1,-1014 # 80027d30 <__func__.0+0x2d0>
    8001712e:	e789                	bnez	a5,80017138 <store_page_fault_1+0x214>
    80017130:	00011597          	auipc	a1,0x11
    80017134:	bf058593          	addi	a1,a1,-1040 # 80027d20 <__func__.0+0x2c0>
    80017138:	00011517          	auipc	a0,0x11
    8001713c:	c3850513          	addi	a0,a0,-968 # 80027d70 <__func__.0+0x310>
    80017140:	3b70e0ef          	jal	80025cf6 <printf>
    80017144:	00032797          	auipc	a5,0x32
    80017148:	ecd7c783          	lbu	a5,-307(a5) # 80049011 <excpt+0x1>
    8001714c:	ebb9                	bnez	a5,800171a2 <store_page_fault_1+0x27e>
    8001714e:	4529                	li	a0,10
    80017150:	1b10d0ef          	jal	80024b00 <putchar>
    80017154:	c411                	beqz	s0,80017160 <store_page_fault_1+0x23c>
    80017156:	00032797          	auipc	a5,0x32
    8001715a:	ebb7c783          	lbu	a5,-325(a5) # 80049011 <excpt+0x1>
    8001715e:	c79d                	beqz	a5,8001718c <store_page_fault_1+0x268>
    80017160:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80017162:	00011597          	auipc	a1,0x11
    80017166:	bce58593          	addi	a1,a1,-1074 # 80027d30 <__func__.0+0x2d0>
    8001716a:	00011517          	auipc	a0,0x11
    8001716e:	c6e50513          	addi	a0,a0,-914 # 80027dd8 <__func__.0+0x378>
    80017172:	3850e0ef          	jal	80025cf6 <printf>
    80017176:	4511                	li	a0,4
    80017178:	a7fe90ef          	jal	80000bf6 <goto_priv>
    8001717c:	b30ea0ef          	jal	800014ac <reset_state>
}
    80017180:	60e2                	ld	ra,24(sp)
    80017182:	8522                	mv	a0,s0
    80017184:	6442                	ld	s0,16(sp)
    80017186:	64a2                	ld	s1,8(sp)
    80017188:	6105                	addi	sp,sp,32
    8001718a:	8082                	ret
    TEST_ASSERT("hs mode hsvh successful when pte.w=1",
    8001718c:	4405                	li	s0,1
    TEST_END();
    8001718e:	00011597          	auipc	a1,0x11
    80017192:	b9258593          	addi	a1,a1,-1134 # 80027d20 <__func__.0+0x2c0>
    80017196:	bfd1                	j	8001716a <store_page_fault_1+0x246>
    TEST_ASSERT("hs mode hsvb when and pte.w=0 leads to LPF",
    80017198:	6480                	ld	s0,8(s1)
    8001719a:	1445                	addi	s0,s0,-15
    8001719c:	00143413          	seqz	s0,s0
    800171a0:	bf2d                	j	800170da <store_page_fault_1+0x1b6>
    TEST_ASSERT("hs mode hsvh successful when pte.w=1",
    800171a2:	00011517          	auipc	a0,0x11
    800171a6:	bd650513          	addi	a0,a0,-1066 # 80027d78 <__func__.0+0x318>
    800171aa:	34d0e0ef          	jal	80025cf6 <printf>
    800171ae:	02900513          	li	a0,41
    800171b2:	14f0d0ef          	jal	80024b00 <putchar>
    800171b6:	bf61                	j	8001714e <store_page_fault_1+0x22a>

00000000800171b8 <store_page_fault_2>:

bool store_page_fault_2(){
    800171b8:	1101                	addi	sp,sp,-32

    TEST_START();
    800171ba:	00010597          	auipc	a1,0x10
    800171be:	ac658593          	addi	a1,a1,-1338 # 80026c80 <__func__.12>
    800171c2:	00011517          	auipc	a0,0x11
    800171c6:	b7e50513          	addi	a0,a0,-1154 # 80027d40 <__func__.0+0x2e0>
bool store_page_fault_2(){
    800171ca:	ec06                	sd	ra,24(sp)
    800171cc:	e822                	sd	s0,16(sp)
    800171ce:	e426                	sd	s1,8(sp)
    TEST_START();
    800171d0:	3270e0ef          	jal	80025cf6 <printf>
    800171d4:	4529                	li	a0,10
    800171d6:	12b0d0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    800171da:	450d                	li	a0,3
    800171dc:	a1be90ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    800171e0:	c00e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800171e4:	e3ee90ef          	jal	80000822 <hpt_init>
    vspt_init();
    800171e8:	cc8e90ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    800171ec:	4511                	li	a0,4
    800171ee:	a09e90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800171f2:	000407b7          	lui	a5,0x40
    800171f6:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    800171fa:	450d                	li	a0,3
    800171fc:	9fbe90ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80017200:	4509                	li	a0,2
    80017202:	915e90ef          	jal	80000b16 <set_prev_priv>
    //执行hsvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80017206:	0330000f          	fence	rw,rw
    8001720a:	00032417          	auipc	s0,0x32
    8001720e:	e0640413          	addi	s0,s0,-506 # 80049010 <excpt>
    80017212:	4785                	li	a5,1
    80017214:	00032717          	auipc	a4,0x32
    80017218:	e2073a23          	sd	zero,-460(a4) # 80049048 <excpt+0x38>
    8001721c:	00f41023          	sh	a5,0(s0)
    80017220:	0330000f          	fence	rw,rw
    asm volatile(
    80017224:	37ab77b7          	lui	a5,0x37ab7
    80017228:	00080737          	lui	a4,0x80
    8001722c:	078a                	slli	a5,a5,0x2
    8001722e:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80017230:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80017234:	0736                	slli	a4,a4,0xd
    80017236:	6ef74073          	.insn	4, 0x6ef74073
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    hsvd(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    8001723a:	08200593          	li	a1,130
    8001723e:	00016617          	auipc	a2,0x16
    80017242:	fa260613          	addi	a2,a2,-94 # 8002d1e0 <__func__.0+0x5780>
    80017246:	00011517          	auipc	a0,0x11
    8001724a:	b1250513          	addi	a0,a0,-1262 # 80027d58 <__func__.0+0x2f8>
    8001724e:	2a90e0ef          	jal	80025cf6 <printf>
    80017252:	00032797          	auipc	a5,0x32
    80017256:	dbf7c783          	lbu	a5,-577(a5) # 80049011 <excpt+0x1>
    8001725a:	00011597          	auipc	a1,0x11
    8001725e:	ad658593          	addi	a1,a1,-1322 # 80027d30 <__func__.0+0x2d0>
    80017262:	cf89                	beqz	a5,8001727c <store_page_fault_2+0xc4>
    80017264:	6418                	ld	a4,8(s0)
    80017266:	47bd                	li	a5,15
    80017268:	00011597          	auipc	a1,0x11
    8001726c:	ab858593          	addi	a1,a1,-1352 # 80027d20 <__func__.0+0x2c0>
    80017270:	00f70663          	beq	a4,a5,8001727c <store_page_fault_2+0xc4>
    80017274:	00011597          	auipc	a1,0x11
    80017278:	abc58593          	addi	a1,a1,-1348 # 80027d30 <__func__.0+0x2d0>
    8001727c:	00011517          	auipc	a0,0x11
    80017280:	af450513          	addi	a0,a0,-1292 # 80027d70 <__func__.0+0x310>
    80017284:	2730e0ef          	jal	80025cf6 <printf>
    80017288:	00032797          	auipc	a5,0x32
    8001728c:	d897c783          	lbu	a5,-631(a5) # 80049011 <excpt+0x1>
    80017290:	c789                	beqz	a5,8001729a <store_page_fault_2+0xe2>
    80017292:	6418                	ld	a4,8(s0)
    80017294:	47bd                	li	a5,15
    80017296:	00f70c63          	beq	a4,a5,800172ae <store_page_fault_2+0xf6>
    8001729a:	00011517          	auipc	a0,0x11
    8001729e:	ade50513          	addi	a0,a0,-1314 # 80027d78 <__func__.0+0x318>
    800172a2:	2550e0ef          	jal	80025cf6 <printf>
    800172a6:	02900513          	li	a0,41
    800172aa:	0570d0ef          	jal	80024b00 <putchar>
    800172ae:	4529                	li	a0,10
    800172b0:	0510d0ef          	jal	80024b00 <putchar>
    800172b4:	00032497          	auipc	s1,0x32
    800172b8:	d5d4c483          	lbu	s1,-675(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    800172bc:	00011597          	auipc	a1,0x11
    800172c0:	a7458593          	addi	a1,a1,-1420 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    800172c4:	cc91                	beqz	s1,800172e0 <store_page_fault_2+0x128>
    800172c6:	6418                	ld	a4,8(s0)
    800172c8:	47bd                	li	a5,15
    TEST_END();
    800172ca:	00011597          	auipc	a1,0x11
    800172ce:	a5658593          	addi	a1,a1,-1450 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    800172d2:	00f70763          	beq	a4,a5,800172e0 <store_page_fault_2+0x128>
    800172d6:	4481                	li	s1,0
    TEST_END();
    800172d8:	00011597          	auipc	a1,0x11
    800172dc:	a5858593          	addi	a1,a1,-1448 # 80027d30 <__func__.0+0x2d0>
    800172e0:	00011517          	auipc	a0,0x11
    800172e4:	af850513          	addi	a0,a0,-1288 # 80027dd8 <__func__.0+0x378>
    800172e8:	20f0e0ef          	jal	80025cf6 <printf>
    800172ec:	4511                	li	a0,4
    800172ee:	909e90ef          	jal	80000bf6 <goto_priv>
    800172f2:	9baea0ef          	jal	800014ac <reset_state>
}
    800172f6:	60e2                	ld	ra,24(sp)
    800172f8:	6442                	ld	s0,16(sp)
    800172fa:	8526                	mv	a0,s1
    800172fc:	64a2                	ld	s1,8(sp)
    800172fe:	6105                	addi	sp,sp,32
    80017300:	8082                	ret

0000000080017302 <store_page_fault_3>:

bool store_page_fault_3(){
    80017302:	1141                	addi	sp,sp,-16

    TEST_START();
    80017304:	00010597          	auipc	a1,0x10
    80017308:	99458593          	addi	a1,a1,-1644 # 80026c98 <__func__.11>
    8001730c:	00011517          	auipc	a0,0x11
    80017310:	a3450513          	addi	a0,a0,-1484 # 80027d40 <__func__.0+0x2e0>
bool store_page_fault_3(){
    80017314:	e406                	sd	ra,8(sp)
    80017316:	e022                	sd	s0,0(sp)
    TEST_START();
    80017318:	1df0e0ef          	jal	80025cf6 <printf>
    8001731c:	4529                	li	a0,10
    8001731e:	7e20d0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    80017322:	450d                	li	a0,3
    80017324:	8d3e90ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80017328:	ab8e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001732c:	cf6e90ef          	jal	80000822 <hpt_init>
    vspt_init();
    80017330:	b80e90ef          	jal	800006b0 <vspt_init>


    //执行hsvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80017334:	4511                	li	a0,4
    80017336:	8c1e90ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    8001733a:	000407b7          	lui	a5,0x40
    8001733e:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    80017342:	450d                	li	a0,3
    80017344:	8b3e90ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80017348:	4509                	li	a0,2
    8001734a:	fcce90ef          	jal	80000b16 <set_prev_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    8001734e:	0330000f          	fence	rw,rw
    80017352:	4785                	li	a5,1
    80017354:	00032717          	auipc	a4,0x32
    80017358:	ce073a23          	sd	zero,-780(a4) # 80049048 <excpt+0x38>
    8001735c:	00032717          	auipc	a4,0x32
    80017360:	caf71a23          	sh	a5,-844(a4) # 80049010 <excpt>
    80017364:	0330000f          	fence	rw,rw
    asm volatile(
    80017368:	37ab77b7          	lui	a5,0x37ab7
    8001736c:	00080737          	lui	a4,0x80
    80017370:	078a                	slli	a5,a5,0x2
    80017372:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80017374:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80017378:	0736                	slli	a4,a4,0xd
    8001737a:	62f74073          	.insn	4, 0x62f74073
    hsvb(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    8001737e:	08200593          	li	a1,130
    80017382:	00016617          	auipc	a2,0x16
    80017386:	e9e60613          	addi	a2,a2,-354 # 8002d220 <__func__.0+0x57c0>
    8001738a:	00011517          	auipc	a0,0x11
    8001738e:	9ce50513          	addi	a0,a0,-1586 # 80027d58 <__func__.0+0x2f8>
    80017392:	1650e0ef          	jal	80025cf6 <printf>
    80017396:	00032797          	auipc	a5,0x32
    8001739a:	c7b7c783          	lbu	a5,-901(a5) # 80049011 <excpt+0x1>
    8001739e:	00011597          	auipc	a1,0x11
    800173a2:	98258593          	addi	a1,a1,-1662 # 80027d20 <__func__.0+0x2c0>
    800173a6:	c789                	beqz	a5,800173b0 <store_page_fault_3+0xae>
    800173a8:	00011597          	auipc	a1,0x11
    800173ac:	98858593          	addi	a1,a1,-1656 # 80027d30 <__func__.0+0x2d0>
    800173b0:	00011517          	auipc	a0,0x11
    800173b4:	9c050513          	addi	a0,a0,-1600 # 80027d70 <__func__.0+0x310>
    800173b8:	13f0e0ef          	jal	80025cf6 <printf>
    800173bc:	00032797          	auipc	a5,0x32
    800173c0:	c557c783          	lbu	a5,-939(a5) # 80049011 <excpt+0x1>
    800173c4:	e7a1                	bnez	a5,8001740c <store_page_fault_3+0x10a>
    800173c6:	4529                	li	a0,10
    800173c8:	7380d0ef          	jal	80024b00 <putchar>
    800173cc:	00032797          	auipc	a5,0x32
    800173d0:	c457c783          	lbu	a5,-955(a5) # 80049011 <excpt+0x1>
    800173d4:	e795                	bnez	a5,80017400 <store_page_fault_3+0xfe>
    800173d6:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    800173d8:	00011597          	auipc	a1,0x11
    800173dc:	94858593          	addi	a1,a1,-1720 # 80027d20 <__func__.0+0x2c0>
    800173e0:	00011517          	auipc	a0,0x11
    800173e4:	9f850513          	addi	a0,a0,-1544 # 80027dd8 <__func__.0+0x378>
    800173e8:	10f0e0ef          	jal	80025cf6 <printf>
    800173ec:	4511                	li	a0,4
    800173ee:	809e90ef          	jal	80000bf6 <goto_priv>
    800173f2:	8baea0ef          	jal	800014ac <reset_state>
}
    800173f6:	60a2                	ld	ra,8(sp)
    800173f8:	8522                	mv	a0,s0
    800173fa:	6402                	ld	s0,0(sp)
    800173fc:	0141                	addi	sp,sp,16
    800173fe:	8082                	ret
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    80017400:	4401                	li	s0,0
    TEST_END();
    80017402:	00011597          	auipc	a1,0x11
    80017406:	92e58593          	addi	a1,a1,-1746 # 80027d30 <__func__.0+0x2d0>
    8001740a:	bfd9                	j	800173e0 <store_page_fault_3+0xde>
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    8001740c:	00011517          	auipc	a0,0x11
    80017410:	96c50513          	addi	a0,a0,-1684 # 80027d78 <__func__.0+0x318>
    80017414:	0e30e0ef          	jal	80025cf6 <printf>
    80017418:	02900513          	li	a0,41
    8001741c:	6e40d0ef          	jal	80024b00 <putchar>
    80017420:	b75d                	j	800173c6 <store_page_fault_3+0xc4>

0000000080017422 <store_page_fault_4>:


bool store_page_fault_4(){
    80017422:	1101                	addi	sp,sp,-32

    TEST_START();
    80017424:	00010597          	auipc	a1,0x10
    80017428:	88c58593          	addi	a1,a1,-1908 # 80026cb0 <__func__.10>
    8001742c:	00011517          	auipc	a0,0x11
    80017430:	91450513          	addi	a0,a0,-1772 # 80027d40 <__func__.0+0x2e0>
bool store_page_fault_4(){
    80017434:	ec06                	sd	ra,24(sp)
    80017436:	e822                	sd	s0,16(sp)
    80017438:	e426                	sd	s1,8(sp)
    TEST_START();
    8001743a:	0bd0e0ef          	jal	80025cf6 <printf>
    8001743e:	4529                	li	a0,10
    80017440:	6c00d0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    80017444:	450d                	li	a0,3
    80017446:	fb0e90ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001744a:	996e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001744e:	bd4e90ef          	jal	80000822 <hpt_init>
    vspt_init();
    80017452:	a5ee90ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80017456:	4509                	li	a0,2
    80017458:	f9ee90ef          	jal	80000bf6 <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    8001745c:	0330000f          	fence	rw,rw
    80017460:	00032497          	auipc	s1,0x32
    80017464:	bb048493          	addi	s1,s1,-1104 # 80049010 <excpt>
    80017468:	4785                	li	a5,1
    8001746a:	00032717          	auipc	a4,0x32
    8001746e:	bc073f23          	sd	zero,-1058(a4) # 80049048 <excpt+0x38>
    80017472:	00f49023          	sh	a5,0(s1)
    80017476:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8001747a:	37ab77b7          	lui	a5,0x37ab7
    8001747e:	078a                	slli	a5,a5,0x2
    80017480:	40019737          	lui	a4,0x40019
    80017484:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80017488:	070a                	slli	a4,a4,0x2
    8001748a:	00f73023          	sd	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>

    addr = hs_page_base(VSI_GI);
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd when pte.v=0 leads to LPF",
    8001748e:	08200593          	li	a1,130
    80017492:	00016617          	auipc	a2,0x16
    80017496:	dc660613          	addi	a2,a2,-570 # 8002d258 <__func__.0+0x57f8>
    8001749a:	00011517          	auipc	a0,0x11
    8001749e:	8be50513          	addi	a0,a0,-1858 # 80027d58 <__func__.0+0x2f8>
    800174a2:	0550e0ef          	jal	80025cf6 <printf>
    800174a6:	00032797          	auipc	a5,0x32
    800174aa:	b6b7c783          	lbu	a5,-1173(a5) # 80049011 <excpt+0x1>
    800174ae:	00011597          	auipc	a1,0x11
    800174b2:	88258593          	addi	a1,a1,-1918 # 80027d30 <__func__.0+0x2d0>
    800174b6:	cf89                	beqz	a5,800174d0 <store_page_fault_4+0xae>
    800174b8:	6498                	ld	a4,8(s1)
    800174ba:	47bd                	li	a5,15
    800174bc:	00011597          	auipc	a1,0x11
    800174c0:	86458593          	addi	a1,a1,-1948 # 80027d20 <__func__.0+0x2c0>
    800174c4:	00f70663          	beq	a4,a5,800174d0 <store_page_fault_4+0xae>
    800174c8:	00011597          	auipc	a1,0x11
    800174cc:	86858593          	addi	a1,a1,-1944 # 80027d30 <__func__.0+0x2d0>
    800174d0:	00011517          	auipc	a0,0x11
    800174d4:	8a050513          	addi	a0,a0,-1888 # 80027d70 <__func__.0+0x310>
    800174d8:	01f0e0ef          	jal	80025cf6 <printf>
    800174dc:	00032797          	auipc	a5,0x32
    800174e0:	b357c783          	lbu	a5,-1227(a5) # 80049011 <excpt+0x1>
    800174e4:	c789                	beqz	a5,800174ee <store_page_fault_4+0xcc>
    800174e6:	6498                	ld	a4,8(s1)
    800174e8:	47bd                	li	a5,15
    800174ea:	00f70c63          	beq	a4,a5,80017502 <store_page_fault_4+0xe0>
    800174ee:	00011517          	auipc	a0,0x11
    800174f2:	88a50513          	addi	a0,a0,-1910 # 80027d78 <__func__.0+0x318>
    800174f6:	0010e0ef          	jal	80025cf6 <printf>
    800174fa:	02900513          	li	a0,41
    800174fe:	6020d0ef          	jal	80024b00 <putchar>
    80017502:	4529                	li	a0,10
    80017504:	5fc0d0ef          	jal	80024b00 <putchar>
    80017508:	00032797          	auipc	a5,0x32
    8001750c:	b097c783          	lbu	a5,-1271(a5) # 80049011 <excpt+0x1>
    80017510:	4401                	li	s0,0
    80017512:	c789                	beqz	a5,8001751c <store_page_fault_4+0xfa>
    80017514:	6480                	ld	s0,8(s1)
    80017516:	1445                	addi	s0,s0,-15
    80017518:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_SPF
    );


    //执行sd指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    8001751c:	0330000f          	fence	rw,rw
    80017520:	4785                	li	a5,1
    80017522:	00032717          	auipc	a4,0x32
    80017526:	b2073323          	sd	zero,-1242(a4) # 80049048 <excpt+0x38>
    8001752a:	00f49023          	sh	a5,0(s1)
    8001752e:	0330000f          	fence	rw,rw
    addr = hs_page_base(VSRX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80017532:	000807b7          	lui	a5,0x80
    80017536:	1007b073          	csrc	sstatus,a5
    8001753a:	37ab77b7          	lui	a5,0x37ab7
    8001753e:	00100737          	lui	a4,0x100
    80017542:	078a                	slli	a5,a5,0x2
    80017544:	05570713          	addi	a4,a4,85 # 100055 <STACK_SIZE+0x55>
    80017548:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001754c:	0732                	slli	a4,a4,0xc
    8001754e:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd when pte.w=0 leads to LPF",
    80017552:	08200593          	li	a1,130
    80017556:	00016617          	auipc	a2,0x16
    8001755a:	d2a60613          	addi	a2,a2,-726 # 8002d280 <__func__.0+0x5820>
    8001755e:	00010517          	auipc	a0,0x10
    80017562:	7fa50513          	addi	a0,a0,2042 # 80027d58 <__func__.0+0x2f8>
    80017566:	7900e0ef          	jal	80025cf6 <printf>
    8001756a:	00032797          	auipc	a5,0x32
    8001756e:	aa77c783          	lbu	a5,-1369(a5) # 80049011 <excpt+0x1>
    80017572:	00010597          	auipc	a1,0x10
    80017576:	7be58593          	addi	a1,a1,1982 # 80027d30 <__func__.0+0x2d0>
    8001757a:	cf89                	beqz	a5,80017594 <store_page_fault_4+0x172>
    8001757c:	6498                	ld	a4,8(s1)
    8001757e:	47bd                	li	a5,15
    80017580:	00010597          	auipc	a1,0x10
    80017584:	7a058593          	addi	a1,a1,1952 # 80027d20 <__func__.0+0x2c0>
    80017588:	00f70663          	beq	a4,a5,80017594 <store_page_fault_4+0x172>
    8001758c:	00010597          	auipc	a1,0x10
    80017590:	7a458593          	addi	a1,a1,1956 # 80027d30 <__func__.0+0x2d0>
    80017594:	00010517          	auipc	a0,0x10
    80017598:	7dc50513          	addi	a0,a0,2012 # 80027d70 <__func__.0+0x310>
    8001759c:	75a0e0ef          	jal	80025cf6 <printf>
    800175a0:	00032797          	auipc	a5,0x32
    800175a4:	a717c783          	lbu	a5,-1423(a5) # 80049011 <excpt+0x1>
    800175a8:	c789                	beqz	a5,800175b2 <store_page_fault_4+0x190>
    800175aa:	6498                	ld	a4,8(s1)
    800175ac:	47bd                	li	a5,15
    800175ae:	00f70c63          	beq	a4,a5,800175c6 <store_page_fault_4+0x1a4>
    800175b2:	00010517          	auipc	a0,0x10
    800175b6:	7c650513          	addi	a0,a0,1990 # 80027d78 <__func__.0+0x318>
    800175ba:	73c0e0ef          	jal	80025cf6 <printf>
    800175be:	02900513          	li	a0,41
    800175c2:	53e0d0ef          	jal	80024b00 <putchar>
    800175c6:	4529                	li	a0,10
    800175c8:	5380d0ef          	jal	80024b00 <putchar>
    800175cc:	c419                	beqz	s0,800175da <store_page_fault_4+0x1b8>
    800175ce:	00032797          	auipc	a5,0x32
    800175d2:	a437c783          	lbu	a5,-1469(a5) # 80049011 <excpt+0x1>
    800175d6:	4401                	li	s0,0
    800175d8:	e3e1                	bnez	a5,80017698 <store_page_fault_4+0x276>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行sd指令时，如果此时pte.w=1
    TEST_SETUP_EXCEPT();
    800175da:	0330000f          	fence	rw,rw
    800175de:	4785                	li	a5,1
    800175e0:	00032717          	auipc	a4,0x32
    800175e4:	a6073423          	sd	zero,-1432(a4) # 80049048 <excpt+0x38>
    800175e8:	00f49023          	sh	a5,0(s1)
    800175ec:	0330000f          	fence	rw,rw
    800175f0:	37ab77b7          	lui	a5,0x37ab7
    800175f4:	00080737          	lui	a4,0x80
    800175f8:	078a                	slli	a5,a5,0x2
    800175fa:	070d                	addi	a4,a4,3 # 80003 <_test_table_size+0x80002>
    800175fc:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80017600:	0736                	slli	a4,a4,0xd
    80017602:	00f73023          	sd	a5,0(a4)
    addr = hs_page_base(VSRW_GURW);

    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode hsvh successful when pte.w=1",
    80017606:	08200593          	li	a1,130
    8001760a:	00016617          	auipc	a2,0x16
    8001760e:	c9e60613          	addi	a2,a2,-866 # 8002d2a8 <__func__.0+0x5848>
    80017612:	00010517          	auipc	a0,0x10
    80017616:	74650513          	addi	a0,a0,1862 # 80027d58 <__func__.0+0x2f8>
    8001761a:	6dc0e0ef          	jal	80025cf6 <printf>
    8001761e:	00032797          	auipc	a5,0x32
    80017622:	9f37c783          	lbu	a5,-1549(a5) # 80049011 <excpt+0x1>
    80017626:	00010597          	auipc	a1,0x10
    8001762a:	70a58593          	addi	a1,a1,1802 # 80027d30 <__func__.0+0x2d0>
    8001762e:	e789                	bnez	a5,80017638 <store_page_fault_4+0x216>
    80017630:	00010597          	auipc	a1,0x10
    80017634:	6f058593          	addi	a1,a1,1776 # 80027d20 <__func__.0+0x2c0>
    80017638:	00010517          	auipc	a0,0x10
    8001763c:	73850513          	addi	a0,a0,1848 # 80027d70 <__func__.0+0x310>
    80017640:	6b60e0ef          	jal	80025cf6 <printf>
    80017644:	00032797          	auipc	a5,0x32
    80017648:	9cd7c783          	lbu	a5,-1587(a5) # 80049011 <excpt+0x1>
    8001764c:	ebb9                	bnez	a5,800176a2 <store_page_fault_4+0x280>
    8001764e:	4529                	li	a0,10
    80017650:	4b00d0ef          	jal	80024b00 <putchar>
    80017654:	c411                	beqz	s0,80017660 <store_page_fault_4+0x23e>
    80017656:	00032797          	auipc	a5,0x32
    8001765a:	9bb7c783          	lbu	a5,-1605(a5) # 80049011 <excpt+0x1>
    8001765e:	c79d                	beqz	a5,8001768c <store_page_fault_4+0x26a>
    80017660:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80017662:	00010597          	auipc	a1,0x10
    80017666:	6ce58593          	addi	a1,a1,1742 # 80027d30 <__func__.0+0x2d0>
    8001766a:	00010517          	auipc	a0,0x10
    8001766e:	76e50513          	addi	a0,a0,1902 # 80027dd8 <__func__.0+0x378>
    80017672:	6840e0ef          	jal	80025cf6 <printf>
    80017676:	4511                	li	a0,4
    80017678:	d7ee90ef          	jal	80000bf6 <goto_priv>
    8001767c:	e31e90ef          	jal	800014ac <reset_state>
}
    80017680:	60e2                	ld	ra,24(sp)
    80017682:	8522                	mv	a0,s0
    80017684:	6442                	ld	s0,16(sp)
    80017686:	64a2                	ld	s1,8(sp)
    80017688:	6105                	addi	sp,sp,32
    8001768a:	8082                	ret
    TEST_ASSERT("vs mode hsvh successful when pte.w=1",
    8001768c:	4405                	li	s0,1
    TEST_END();
    8001768e:	00010597          	auipc	a1,0x10
    80017692:	69258593          	addi	a1,a1,1682 # 80027d20 <__func__.0+0x2c0>
    80017696:	bfd1                	j	8001766a <store_page_fault_4+0x248>
    TEST_ASSERT("vs mode sd when pte.w=0 leads to LPF",
    80017698:	6480                	ld	s0,8(s1)
    8001769a:	1445                	addi	s0,s0,-15
    8001769c:	00143413          	seqz	s0,s0
    800176a0:	bf2d                	j	800175da <store_page_fault_4+0x1b8>
    TEST_ASSERT("vs mode hsvh successful when pte.w=1",
    800176a2:	00010517          	auipc	a0,0x10
    800176a6:	6d650513          	addi	a0,a0,1750 # 80027d78 <__func__.0+0x318>
    800176aa:	64c0e0ef          	jal	80025cf6 <printf>
    800176ae:	02900513          	li	a0,41
    800176b2:	44e0d0ef          	jal	80024b00 <putchar>
    800176b6:	bf61                	j	8001764e <store_page_fault_4+0x22c>

00000000800176b8 <store_page_fault_5>:

bool store_page_fault_5(){
    800176b8:	1101                	addi	sp,sp,-32

    TEST_START();
    800176ba:	0000f597          	auipc	a1,0xf
    800176be:	60e58593          	addi	a1,a1,1550 # 80026cc8 <__func__.9>
    800176c2:	00010517          	auipc	a0,0x10
    800176c6:	67e50513          	addi	a0,a0,1662 # 80027d40 <__func__.0+0x2e0>
bool store_page_fault_5(){
    800176ca:	ec06                	sd	ra,24(sp)
    800176cc:	e822                	sd	s0,16(sp)
    800176ce:	e426                	sd	s1,8(sp)
    TEST_START();
    800176d0:	6260e0ef          	jal	80025cf6 <printf>
    800176d4:	4529                	li	a0,10
    800176d6:	42a0d0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    800176da:	450d                	li	a0,3
    800176dc:	d1ae90ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    800176e0:	f01e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800176e4:	93ee90ef          	jal	80000822 <hpt_init>
    vspt_init();
    800176e8:	fc9e80ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    800176ec:	4511                	li	a0,4
    800176ee:	d08e90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800176f2:	000407b7          	lui	a5,0x40
    800176f6:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    800176fa:	4509                	li	a0,2
    800176fc:	cfae90ef          	jal	80000bf6 <goto_priv>
    //执行sd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80017700:	0330000f          	fence	rw,rw
    80017704:	00032417          	auipc	s0,0x32
    80017708:	90c40413          	addi	s0,s0,-1780 # 80049010 <excpt>
    8001770c:	4785                	li	a5,1
    8001770e:	00032717          	auipc	a4,0x32
    80017712:	92073d23          	sd	zero,-1734(a4) # 80049048 <excpt+0x38>
    80017716:	00f41023          	sh	a5,0(s0)
    8001771a:	0330000f          	fence	rw,rw
    8001771e:	37ab77b7          	lui	a5,0x37ab7
    80017722:	00080737          	lui	a4,0x80
    80017726:	078a                	slli	a5,a5,0x2
    80017728:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    8001772a:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001772e:	0736                	slli	a4,a4,0xd
    80017730:	00f73023          	sd	a5,0(a4)
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    sd(vaddr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    80017734:	08200593          	li	a1,130
    80017738:	00016617          	auipc	a2,0x16
    8001773c:	b9860613          	addi	a2,a2,-1128 # 8002d2d0 <__func__.0+0x5870>
    80017740:	00010517          	auipc	a0,0x10
    80017744:	61850513          	addi	a0,a0,1560 # 80027d58 <__func__.0+0x2f8>
    80017748:	5ae0e0ef          	jal	80025cf6 <printf>
    8001774c:	00032797          	auipc	a5,0x32
    80017750:	8c57c783          	lbu	a5,-1851(a5) # 80049011 <excpt+0x1>
    80017754:	00010597          	auipc	a1,0x10
    80017758:	5dc58593          	addi	a1,a1,1500 # 80027d30 <__func__.0+0x2d0>
    8001775c:	cf89                	beqz	a5,80017776 <store_page_fault_5+0xbe>
    8001775e:	6418                	ld	a4,8(s0)
    80017760:	47bd                	li	a5,15
    80017762:	00010597          	auipc	a1,0x10
    80017766:	5be58593          	addi	a1,a1,1470 # 80027d20 <__func__.0+0x2c0>
    8001776a:	00f70663          	beq	a4,a5,80017776 <store_page_fault_5+0xbe>
    8001776e:	00010597          	auipc	a1,0x10
    80017772:	5c258593          	addi	a1,a1,1474 # 80027d30 <__func__.0+0x2d0>
    80017776:	00010517          	auipc	a0,0x10
    8001777a:	5fa50513          	addi	a0,a0,1530 # 80027d70 <__func__.0+0x310>
    8001777e:	5780e0ef          	jal	80025cf6 <printf>
    80017782:	00032797          	auipc	a5,0x32
    80017786:	88f7c783          	lbu	a5,-1905(a5) # 80049011 <excpt+0x1>
    8001778a:	c789                	beqz	a5,80017794 <store_page_fault_5+0xdc>
    8001778c:	6418                	ld	a4,8(s0)
    8001778e:	47bd                	li	a5,15
    80017790:	00f70c63          	beq	a4,a5,800177a8 <store_page_fault_5+0xf0>
    80017794:	00010517          	auipc	a0,0x10
    80017798:	5e450513          	addi	a0,a0,1508 # 80027d78 <__func__.0+0x318>
    8001779c:	55a0e0ef          	jal	80025cf6 <printf>
    800177a0:	02900513          	li	a0,41
    800177a4:	35c0d0ef          	jal	80024b00 <putchar>
    800177a8:	4529                	li	a0,10
    800177aa:	3560d0ef          	jal	80024b00 <putchar>
    800177ae:	00032497          	auipc	s1,0x32
    800177b2:	8634c483          	lbu	s1,-1949(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    800177b6:	00010597          	auipc	a1,0x10
    800177ba:	57a58593          	addi	a1,a1,1402 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    800177be:	cc91                	beqz	s1,800177da <store_page_fault_5+0x122>
    800177c0:	6418                	ld	a4,8(s0)
    800177c2:	47bd                	li	a5,15
    TEST_END();
    800177c4:	00010597          	auipc	a1,0x10
    800177c8:	55c58593          	addi	a1,a1,1372 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    800177cc:	00f70763          	beq	a4,a5,800177da <store_page_fault_5+0x122>
    800177d0:	4481                	li	s1,0
    TEST_END();
    800177d2:	00010597          	auipc	a1,0x10
    800177d6:	55e58593          	addi	a1,a1,1374 # 80027d30 <__func__.0+0x2d0>
    800177da:	00010517          	auipc	a0,0x10
    800177de:	5fe50513          	addi	a0,a0,1534 # 80027dd8 <__func__.0+0x378>
    800177e2:	5140e0ef          	jal	80025cf6 <printf>
    800177e6:	4511                	li	a0,4
    800177e8:	c0ee90ef          	jal	80000bf6 <goto_priv>
    800177ec:	cc1e90ef          	jal	800014ac <reset_state>
}
    800177f0:	60e2                	ld	ra,24(sp)
    800177f2:	6442                	ld	s0,16(sp)
    800177f4:	8526                	mv	a0,s1
    800177f6:	64a2                	ld	s1,8(sp)
    800177f8:	6105                	addi	sp,sp,32
    800177fa:	8082                	ret

00000000800177fc <store_page_fault_6>:

bool store_page_fault_6(){
    800177fc:	1141                	addi	sp,sp,-16

    TEST_START();
    800177fe:	0000f597          	auipc	a1,0xf
    80017802:	4e258593          	addi	a1,a1,1250 # 80026ce0 <__func__.8>
    80017806:	00010517          	auipc	a0,0x10
    8001780a:	53a50513          	addi	a0,a0,1338 # 80027d40 <__func__.0+0x2e0>
bool store_page_fault_6(){
    8001780e:	e406                	sd	ra,8(sp)
    80017810:	e022                	sd	s0,0(sp)
    TEST_START();
    80017812:	4e40e0ef          	jal	80025cf6 <printf>
    80017816:	4529                	li	a0,10
    80017818:	2e80d0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    8001781c:	450d                	li	a0,3
    8001781e:	bd8e90ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80017822:	dbfe80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017826:	ffde80ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001782a:	e87e80ef          	jal	800006b0 <vspt_init>


    //执行hsvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    8001782e:	4511                	li	a0,4
    80017830:	bc6e90ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80017834:	000407b7          	lui	a5,0x40
    80017838:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_VS);
    8001783c:	4509                	li	a0,2
    8001783e:	bb8e90ef          	jal	80000bf6 <goto_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80017842:	0330000f          	fence	rw,rw
    80017846:	4785                	li	a5,1
    80017848:	00032717          	auipc	a4,0x32
    8001784c:	80073023          	sd	zero,-2048(a4) # 80049048 <excpt+0x38>
    80017850:	00031717          	auipc	a4,0x31
    80017854:	7cf71023          	sh	a5,1984(a4) # 80049010 <excpt>
    80017858:	0330000f          	fence	rw,rw
    8001785c:	37ab77b7          	lui	a5,0x37ab7
    80017860:	00080737          	lui	a4,0x80
    80017864:	078a                	slli	a5,a5,0x2
    80017866:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80017868:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001786c:	0736                	slli	a4,a4,0xd
    8001786e:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80017872:	08200593          	li	a1,130
    80017876:	00016617          	auipc	a2,0x16
    8001787a:	a9260613          	addi	a2,a2,-1390 # 8002d308 <__func__.0+0x58a8>
    8001787e:	00010517          	auipc	a0,0x10
    80017882:	4da50513          	addi	a0,a0,1242 # 80027d58 <__func__.0+0x2f8>
    80017886:	4700e0ef          	jal	80025cf6 <printf>
    8001788a:	00031797          	auipc	a5,0x31
    8001788e:	7877c783          	lbu	a5,1927(a5) # 80049011 <excpt+0x1>
    80017892:	00010597          	auipc	a1,0x10
    80017896:	48e58593          	addi	a1,a1,1166 # 80027d20 <__func__.0+0x2c0>
    8001789a:	c789                	beqz	a5,800178a4 <store_page_fault_6+0xa8>
    8001789c:	00010597          	auipc	a1,0x10
    800178a0:	49458593          	addi	a1,a1,1172 # 80027d30 <__func__.0+0x2d0>
    800178a4:	00010517          	auipc	a0,0x10
    800178a8:	4cc50513          	addi	a0,a0,1228 # 80027d70 <__func__.0+0x310>
    800178ac:	44a0e0ef          	jal	80025cf6 <printf>
    800178b0:	00031797          	auipc	a5,0x31
    800178b4:	7617c783          	lbu	a5,1889(a5) # 80049011 <excpt+0x1>
    800178b8:	e7a1                	bnez	a5,80017900 <store_page_fault_6+0x104>
    800178ba:	4529                	li	a0,10
    800178bc:	2440d0ef          	jal	80024b00 <putchar>
    800178c0:	00031797          	auipc	a5,0x31
    800178c4:	7517c783          	lbu	a5,1873(a5) # 80049011 <excpt+0x1>
    800178c8:	e795                	bnez	a5,800178f4 <store_page_fault_6+0xf8>
    800178ca:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    800178cc:	00010597          	auipc	a1,0x10
    800178d0:	45458593          	addi	a1,a1,1108 # 80027d20 <__func__.0+0x2c0>
    800178d4:	00010517          	auipc	a0,0x10
    800178d8:	50450513          	addi	a0,a0,1284 # 80027dd8 <__func__.0+0x378>
    800178dc:	41a0e0ef          	jal	80025cf6 <printf>
    800178e0:	4511                	li	a0,4
    800178e2:	b14e90ef          	jal	80000bf6 <goto_priv>
    800178e6:	bc7e90ef          	jal	800014ac <reset_state>
}
    800178ea:	60a2                	ld	ra,8(sp)
    800178ec:	8522                	mv	a0,s0
    800178ee:	6402                	ld	s0,0(sp)
    800178f0:	0141                	addi	sp,sp,16
    800178f2:	8082                	ret
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    800178f4:	4401                	li	s0,0
    TEST_END();
    800178f6:	00010597          	auipc	a1,0x10
    800178fa:	43a58593          	addi	a1,a1,1082 # 80027d30 <__func__.0+0x2d0>
    800178fe:	bfd9                	j	800178d4 <store_page_fault_6+0xd8>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80017900:	00010517          	auipc	a0,0x10
    80017904:	47850513          	addi	a0,a0,1144 # 80027d78 <__func__.0+0x318>
    80017908:	3ee0e0ef          	jal	80025cf6 <printf>
    8001790c:	02900513          	li	a0,41
    80017910:	1f00d0ef          	jal	80024b00 <putchar>
    80017914:	b75d                	j	800178ba <store_page_fault_6+0xbe>

0000000080017916 <store_page_fault_7>:

bool store_page_fault_7(){
    80017916:	1101                	addi	sp,sp,-32

    TEST_START();
    80017918:	0000f597          	auipc	a1,0xf
    8001791c:	3e058593          	addi	a1,a1,992 # 80026cf8 <__func__.7>
    80017920:	00010517          	auipc	a0,0x10
    80017924:	42050513          	addi	a0,a0,1056 # 80027d40 <__func__.0+0x2e0>
bool store_page_fault_7(){
    80017928:	ec06                	sd	ra,24(sp)
    8001792a:	e822                	sd	s0,16(sp)
    8001792c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001792e:	3c80e0ef          	jal	80025cf6 <printf>
    80017932:	4529                	li	a0,10
    80017934:	1cc0d0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    80017938:	450d                	li	a0,3
    8001793a:	abce90ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001793e:	ca3e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017942:	ee1e80ef          	jal	80000822 <hpt_init>
    vspt_init();
    80017946:	d6be80ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    8001794a:	4511                	li	a0,4
    8001794c:	aaae90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80017950:	000407b7          	lui	a5,0x40
    80017954:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    80017958:	450d                	li	a0,3
    8001795a:	a9ce90ef          	jal	80000bf6 <goto_priv>
    //执行sd指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    8001795e:	0330000f          	fence	rw,rw
    80017962:	00031417          	auipc	s0,0x31
    80017966:	6ae40413          	addi	s0,s0,1710 # 80049010 <excpt>
    8001796a:	4785                	li	a5,1
    8001796c:	00031717          	auipc	a4,0x31
    80017970:	6c073e23          	sd	zero,1756(a4) # 80049048 <excpt+0x38>
    80017974:	00f41023          	sh	a5,0(s0)
    80017978:	0330000f          	fence	rw,rw
    8001797c:	37ab77b7          	lui	a5,0x37ab7
    80017980:	00080737          	lui	a4,0x80
    80017984:	078a                	slli	a5,a5,0x2
    80017986:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80017988:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001798c:	0736                	slli	a4,a4,0xd
    8001798e:	00f73023          	sd	a5,0(a4)
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    sd(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    80017992:	08200593          	li	a1,130
    80017996:	00016617          	auipc	a2,0x16
    8001799a:	9aa60613          	addi	a2,a2,-1622 # 8002d340 <__func__.0+0x58e0>
    8001799e:	00010517          	auipc	a0,0x10
    800179a2:	3ba50513          	addi	a0,a0,954 # 80027d58 <__func__.0+0x2f8>
    800179a6:	3500e0ef          	jal	80025cf6 <printf>
    800179aa:	00031797          	auipc	a5,0x31
    800179ae:	6677c783          	lbu	a5,1639(a5) # 80049011 <excpt+0x1>
    800179b2:	00010597          	auipc	a1,0x10
    800179b6:	37e58593          	addi	a1,a1,894 # 80027d30 <__func__.0+0x2d0>
    800179ba:	cf89                	beqz	a5,800179d4 <store_page_fault_7+0xbe>
    800179bc:	6418                	ld	a4,8(s0)
    800179be:	47bd                	li	a5,15
    800179c0:	00010597          	auipc	a1,0x10
    800179c4:	36058593          	addi	a1,a1,864 # 80027d20 <__func__.0+0x2c0>
    800179c8:	00f70663          	beq	a4,a5,800179d4 <store_page_fault_7+0xbe>
    800179cc:	00010597          	auipc	a1,0x10
    800179d0:	36458593          	addi	a1,a1,868 # 80027d30 <__func__.0+0x2d0>
    800179d4:	00010517          	auipc	a0,0x10
    800179d8:	39c50513          	addi	a0,a0,924 # 80027d70 <__func__.0+0x310>
    800179dc:	31a0e0ef          	jal	80025cf6 <printf>
    800179e0:	00031797          	auipc	a5,0x31
    800179e4:	6317c783          	lbu	a5,1585(a5) # 80049011 <excpt+0x1>
    800179e8:	c789                	beqz	a5,800179f2 <store_page_fault_7+0xdc>
    800179ea:	6418                	ld	a4,8(s0)
    800179ec:	47bd                	li	a5,15
    800179ee:	00f70c63          	beq	a4,a5,80017a06 <store_page_fault_7+0xf0>
    800179f2:	00010517          	auipc	a0,0x10
    800179f6:	38650513          	addi	a0,a0,902 # 80027d78 <__func__.0+0x318>
    800179fa:	2fc0e0ef          	jal	80025cf6 <printf>
    800179fe:	02900513          	li	a0,41
    80017a02:	0fe0d0ef          	jal	80024b00 <putchar>
    80017a06:	4529                	li	a0,10
    80017a08:	0f80d0ef          	jal	80024b00 <putchar>
    80017a0c:	00031497          	auipc	s1,0x31
    80017a10:	6054c483          	lbu	s1,1541(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    80017a14:	00010597          	auipc	a1,0x10
    80017a18:	31c58593          	addi	a1,a1,796 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    80017a1c:	cc91                	beqz	s1,80017a38 <store_page_fault_7+0x122>
    80017a1e:	6418                	ld	a4,8(s0)
    80017a20:	47bd                	li	a5,15
    TEST_END();
    80017a22:	00010597          	auipc	a1,0x10
    80017a26:	2fe58593          	addi	a1,a1,766 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    80017a2a:	00f70763          	beq	a4,a5,80017a38 <store_page_fault_7+0x122>
    80017a2e:	4481                	li	s1,0
    TEST_END();
    80017a30:	00010597          	auipc	a1,0x10
    80017a34:	30058593          	addi	a1,a1,768 # 80027d30 <__func__.0+0x2d0>
    80017a38:	00010517          	auipc	a0,0x10
    80017a3c:	3a050513          	addi	a0,a0,928 # 80027dd8 <__func__.0+0x378>
    80017a40:	2b60e0ef          	jal	80025cf6 <printf>
    80017a44:	4511                	li	a0,4
    80017a46:	9b0e90ef          	jal	80000bf6 <goto_priv>
    80017a4a:	a63e90ef          	jal	800014ac <reset_state>
}
    80017a4e:	60e2                	ld	ra,24(sp)
    80017a50:	6442                	ld	s0,16(sp)
    80017a52:	8526                	mv	a0,s1
    80017a54:	64a2                	ld	s1,8(sp)
    80017a56:	6105                	addi	sp,sp,32
    80017a58:	8082                	ret

0000000080017a5a <store_page_fault_8>:

bool store_page_fault_8(){
    80017a5a:	1141                	addi	sp,sp,-16

    TEST_START();
    80017a5c:	0000f597          	auipc	a1,0xf
    80017a60:	2b458593          	addi	a1,a1,692 # 80026d10 <__func__.6>
    80017a64:	00010517          	auipc	a0,0x10
    80017a68:	2dc50513          	addi	a0,a0,732 # 80027d40 <__func__.0+0x2e0>
bool store_page_fault_8(){
    80017a6c:	e406                	sd	ra,8(sp)
    80017a6e:	e022                	sd	s0,0(sp)
    TEST_START();
    80017a70:	2860e0ef          	jal	80025cf6 <printf>
    80017a74:	4529                	li	a0,10
    80017a76:	08a0d0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    80017a7a:	450d                	li	a0,3
    80017a7c:	97ae90ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80017a80:	b61e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017a84:	d9fe80ef          	jal	80000822 <hpt_init>
    vspt_init();
    80017a88:	c29e80ef          	jal	800006b0 <vspt_init>


    //执行sd指令时，设置了msstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80017a8c:	4511                	li	a0,4
    80017a8e:	968e90ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    80017a92:	000407b7          	lui	a5,0x40
    80017a96:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    80017a9a:	450d                	li	a0,3
    80017a9c:	95ae90ef          	jal	80000bf6 <goto_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80017aa0:	0330000f          	fence	rw,rw
    80017aa4:	4785                	li	a5,1
    80017aa6:	00031717          	auipc	a4,0x31
    80017aaa:	5a073123          	sd	zero,1442(a4) # 80049048 <excpt+0x38>
    80017aae:	00031717          	auipc	a4,0x31
    80017ab2:	56f71123          	sh	a5,1378(a4) # 80049010 <excpt>
    80017ab6:	0330000f          	fence	rw,rw
    80017aba:	37ab77b7          	lui	a5,0x37ab7
    80017abe:	00080737          	lui	a4,0x80
    80017ac2:	078a                	slli	a5,a5,0x2
    80017ac4:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80017ac6:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80017aca:	0736                	slli	a4,a4,0xd
    80017acc:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    80017ad0:	08200593          	li	a1,130
    80017ad4:	00016617          	auipc	a2,0x16
    80017ad8:	8a460613          	addi	a2,a2,-1884 # 8002d378 <__func__.0+0x5918>
    80017adc:	00010517          	auipc	a0,0x10
    80017ae0:	27c50513          	addi	a0,a0,636 # 80027d58 <__func__.0+0x2f8>
    80017ae4:	2120e0ef          	jal	80025cf6 <printf>
    80017ae8:	00031797          	auipc	a5,0x31
    80017aec:	5297c783          	lbu	a5,1321(a5) # 80049011 <excpt+0x1>
    80017af0:	00010597          	auipc	a1,0x10
    80017af4:	23058593          	addi	a1,a1,560 # 80027d20 <__func__.0+0x2c0>
    80017af8:	c789                	beqz	a5,80017b02 <store_page_fault_8+0xa8>
    80017afa:	00010597          	auipc	a1,0x10
    80017afe:	23658593          	addi	a1,a1,566 # 80027d30 <__func__.0+0x2d0>
    80017b02:	00010517          	auipc	a0,0x10
    80017b06:	26e50513          	addi	a0,a0,622 # 80027d70 <__func__.0+0x310>
    80017b0a:	1ec0e0ef          	jal	80025cf6 <printf>
    80017b0e:	00031797          	auipc	a5,0x31
    80017b12:	5037c783          	lbu	a5,1283(a5) # 80049011 <excpt+0x1>
    80017b16:	e7a1                	bnez	a5,80017b5e <store_page_fault_8+0x104>
    80017b18:	4529                	li	a0,10
    80017b1a:	7e70c0ef          	jal	80024b00 <putchar>
    80017b1e:	00031797          	auipc	a5,0x31
    80017b22:	4f37c783          	lbu	a5,1267(a5) # 80049011 <excpt+0x1>
    80017b26:	e795                	bnez	a5,80017b52 <store_page_fault_8+0xf8>
    80017b28:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80017b2a:	00010597          	auipc	a1,0x10
    80017b2e:	1f658593          	addi	a1,a1,502 # 80027d20 <__func__.0+0x2c0>
    80017b32:	00010517          	auipc	a0,0x10
    80017b36:	2a650513          	addi	a0,a0,678 # 80027dd8 <__func__.0+0x378>
    80017b3a:	1bc0e0ef          	jal	80025cf6 <printf>
    80017b3e:	4511                	li	a0,4
    80017b40:	8b6e90ef          	jal	80000bf6 <goto_priv>
    80017b44:	969e90ef          	jal	800014ac <reset_state>
}
    80017b48:	60a2                	ld	ra,8(sp)
    80017b4a:	8522                	mv	a0,s0
    80017b4c:	6402                	ld	s0,0(sp)
    80017b4e:	0141                	addi	sp,sp,16
    80017b50:	8082                	ret
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    80017b52:	4401                	li	s0,0
    TEST_END();
    80017b54:	00010597          	auipc	a1,0x10
    80017b58:	1dc58593          	addi	a1,a1,476 # 80027d30 <__func__.0+0x2d0>
    80017b5c:	bfd9                	j	80017b32 <store_page_fault_8+0xd8>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    80017b5e:	00010517          	auipc	a0,0x10
    80017b62:	21a50513          	addi	a0,a0,538 # 80027d78 <__func__.0+0x318>
    80017b66:	1900e0ef          	jal	80025cf6 <printf>
    80017b6a:	02900513          	li	a0,41
    80017b6e:	7930c0ef          	jal	80024b00 <putchar>
    80017b72:	b75d                	j	80017b18 <store_page_fault_8+0xbe>

0000000080017b74 <amo_page_fault_1>:





bool amo_page_fault_1(){
    80017b74:	1101                	addi	sp,sp,-32

    TEST_START();
    80017b76:	0000f597          	auipc	a1,0xf
    80017b7a:	1b258593          	addi	a1,a1,434 # 80026d28 <__func__.5>
    80017b7e:	00010517          	auipc	a0,0x10
    80017b82:	1c250513          	addi	a0,a0,450 # 80027d40 <__func__.0+0x2e0>
bool amo_page_fault_1(){
    80017b86:	ec06                	sd	ra,24(sp)
    80017b88:	e822                	sd	s0,16(sp)
    80017b8a:	e426                	sd	s1,8(sp)
    80017b8c:	e04a                	sd	s2,0(sp)
    TEST_START();
    80017b8e:	1680e0ef          	jal	80025cf6 <printf>
    80017b92:	4529                	li	a0,10
    80017b94:	76d0c0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    80017b98:	450d                	li	a0,3
    80017b9a:	85ce90ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80017b9e:	a43e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017ba2:	c81e80ef          	jal	80000822 <hpt_init>
    vspt_init();
    80017ba6:	b0be80ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_HS);
    80017baa:	450d                	li	a0,3
    80017bac:	84ae90ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80017bb0:	4509                	li	a0,2
    80017bb2:	f65e80ef          	jal	80000b16 <set_prev_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80017bb6:	0330000f          	fence	rw,rw
    80017bba:	00031917          	auipc	s2,0x31
    80017bbe:	45690913          	addi	s2,s2,1110 # 80049010 <excpt>
    80017bc2:	4785                	li	a5,1
    80017bc4:	00031717          	auipc	a4,0x31
    80017bc8:	48073223          	sd	zero,1156(a4) # 80049048 <excpt+0x38>
    80017bcc:	00f91023          	sh	a5,0(s2)
    80017bd0:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80017bd4:	deadc7b7          	lui	a5,0xdeadc
    80017bd8:	40019737          	lui	a4,0x40019
    80017bdc:	eef7879b          	addiw	a5,a5,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    80017be0:	070a                	slli	a4,a4,0x2
    80017be2:	00f727af          	amoadd.w	a5,a5,(a4)

    addr = hs_page_base(VSI_GI);
    value = amoadd_w(addr,value);
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    80017be6:	08200593          	li	a1,130
    80017bea:	00015617          	auipc	a2,0x15
    80017bee:	7c660613          	addi	a2,a2,1990 # 8002d3b0 <__func__.0+0x5950>
    80017bf2:	00010517          	auipc	a0,0x10
    80017bf6:	16650513          	addi	a0,a0,358 # 80027d58 <__func__.0+0x2f8>
    value = amoadd_w(addr,value);
    80017bfa:	02079413          	slli	s0,a5,0x20
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    80017bfe:	0f80e0ef          	jal	80025cf6 <printf>
    80017c02:	00031797          	auipc	a5,0x31
    80017c06:	40f7c783          	lbu	a5,1039(a5) # 80049011 <excpt+0x1>
    value = amoadd_w(addr,value);
    80017c0a:	9001                	srli	s0,s0,0x20
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    80017c0c:	00010597          	auipc	a1,0x10
    80017c10:	12458593          	addi	a1,a1,292 # 80027d30 <__func__.0+0x2d0>
    80017c14:	cf91                	beqz	a5,80017c30 <amo_page_fault_1+0xbc>
    80017c16:	00893703          	ld	a4,8(s2)
    80017c1a:	47bd                	li	a5,15
    80017c1c:	00010597          	auipc	a1,0x10
    80017c20:	10458593          	addi	a1,a1,260 # 80027d20 <__func__.0+0x2c0>
    80017c24:	00f70663          	beq	a4,a5,80017c30 <amo_page_fault_1+0xbc>
    80017c28:	00010597          	auipc	a1,0x10
    80017c2c:	10858593          	addi	a1,a1,264 # 80027d30 <__func__.0+0x2d0>
    80017c30:	00010517          	auipc	a0,0x10
    80017c34:	14050513          	addi	a0,a0,320 # 80027d70 <__func__.0+0x310>
    80017c38:	0be0e0ef          	jal	80025cf6 <printf>
    80017c3c:	00031797          	auipc	a5,0x31
    80017c40:	3d57c783          	lbu	a5,981(a5) # 80049011 <excpt+0x1>
    80017c44:	c791                	beqz	a5,80017c50 <amo_page_fault_1+0xdc>
    80017c46:	00893703          	ld	a4,8(s2)
    80017c4a:	47bd                	li	a5,15
    80017c4c:	00f70c63          	beq	a4,a5,80017c64 <amo_page_fault_1+0xf0>
    80017c50:	00010517          	auipc	a0,0x10
    80017c54:	12850513          	addi	a0,a0,296 # 80027d78 <__func__.0+0x318>
    80017c58:	09e0e0ef          	jal	80025cf6 <printf>
    80017c5c:	02900513          	li	a0,41
    80017c60:	6a10c0ef          	jal	80024b00 <putchar>
    80017c64:	4529                	li	a0,10
    80017c66:	69b0c0ef          	jal	80024b00 <putchar>
    80017c6a:	00031797          	auipc	a5,0x31
    80017c6e:	3a77c783          	lbu	a5,935(a5) # 80049011 <excpt+0x1>
    80017c72:	4481                	li	s1,0
    80017c74:	c791                	beqz	a5,80017c80 <amo_page_fault_1+0x10c>
    80017c76:	00893483          	ld	s1,8(s2)
    80017c7a:	14c5                	addi	s1,s1,-15
    80017c7c:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SPF
    );


    //执行amoand_d指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    80017c80:	0330000f          	fence	rw,rw
    80017c84:	4785                	li	a5,1
    80017c86:	00031717          	auipc	a4,0x31
    80017c8a:	3c073123          	sd	zero,962(a4) # 80049048 <excpt+0x38>
    80017c8e:	00f91023          	sh	a5,0(s2)
    80017c92:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    80017c96:	001007b7          	lui	a5,0x100
    80017c9a:	05578793          	addi	a5,a5,85 # 100055 <STACK_SIZE+0x55>
    80017c9e:	07b2                	slli	a5,a5,0xc
    80017ca0:	6087b42f          	amoand.d	s0,s0,(a5)
    addr = hs_page_base(VSRX_GRWX);

    value = amoand_d(addr,value);
    TEST_ASSERT("hs mode execute amoand_d when pte.w=0 leads to LPF",
    80017ca4:	08200593          	li	a1,130
    80017ca8:	00015617          	auipc	a2,0x15
    80017cac:	74060613          	addi	a2,a2,1856 # 8002d3e8 <__func__.0+0x5988>
    80017cb0:	00010517          	auipc	a0,0x10
    80017cb4:	0a850513          	addi	a0,a0,168 # 80027d58 <__func__.0+0x2f8>
    80017cb8:	03e0e0ef          	jal	80025cf6 <printf>
    80017cbc:	00031797          	auipc	a5,0x31
    80017cc0:	3557c783          	lbu	a5,853(a5) # 80049011 <excpt+0x1>
    80017cc4:	00010597          	auipc	a1,0x10
    80017cc8:	06c58593          	addi	a1,a1,108 # 80027d30 <__func__.0+0x2d0>
    80017ccc:	cf91                	beqz	a5,80017ce8 <amo_page_fault_1+0x174>
    80017cce:	00893703          	ld	a4,8(s2)
    80017cd2:	47bd                	li	a5,15
    80017cd4:	00010597          	auipc	a1,0x10
    80017cd8:	04c58593          	addi	a1,a1,76 # 80027d20 <__func__.0+0x2c0>
    80017cdc:	00f70663          	beq	a4,a5,80017ce8 <amo_page_fault_1+0x174>
    80017ce0:	00010597          	auipc	a1,0x10
    80017ce4:	05058593          	addi	a1,a1,80 # 80027d30 <__func__.0+0x2d0>
    80017ce8:	00010517          	auipc	a0,0x10
    80017cec:	08850513          	addi	a0,a0,136 # 80027d70 <__func__.0+0x310>
    80017cf0:	0060e0ef          	jal	80025cf6 <printf>
    80017cf4:	00031797          	auipc	a5,0x31
    80017cf8:	31d7c783          	lbu	a5,797(a5) # 80049011 <excpt+0x1>
    80017cfc:	c791                	beqz	a5,80017d08 <amo_page_fault_1+0x194>
    80017cfe:	00893703          	ld	a4,8(s2)
    80017d02:	47bd                	li	a5,15
    80017d04:	00f70c63          	beq	a4,a5,80017d1c <amo_page_fault_1+0x1a8>
    80017d08:	00010517          	auipc	a0,0x10
    80017d0c:	07050513          	addi	a0,a0,112 # 80027d78 <__func__.0+0x318>
    80017d10:	7e70d0ef          	jal	80025cf6 <printf>
    80017d14:	02900513          	li	a0,41
    80017d18:	5e90c0ef          	jal	80024b00 <putchar>
    80017d1c:	4529                	li	a0,10
    80017d1e:	5e30c0ef          	jal	80024b00 <putchar>
    80017d22:	c499                	beqz	s1,80017d30 <amo_page_fault_1+0x1bc>
    80017d24:	00031797          	auipc	a5,0x31
    80017d28:	2ed7c783          	lbu	a5,749(a5) # 80049011 <excpt+0x1>
    80017d2c:	4481                	li	s1,0
    80017d2e:	ebcd                	bnez	a5,80017de0 <amo_page_fault_1+0x26c>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行amoand_d指令时，如果此时pte.w=1
    TEST_SETUP_EXCEPT();
    80017d30:	0330000f          	fence	rw,rw
    80017d34:	4785                	li	a5,1
    80017d36:	00031717          	auipc	a4,0x31
    80017d3a:	30073923          	sd	zero,786(a4) # 80049048 <excpt+0x38>
    80017d3e:	00f91023          	sh	a5,0(s2)
    80017d42:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    80017d46:	1782                	slli	a5,a5,0x20
    80017d48:	a087b42f          	amomax.d	s0,s0,(a5)
    addr = hs_page_base(VSRWX_GURWX);

    value = amomax_d(addr,value);
    TEST_ASSERT("hs mode execute amomax_d successful when pte.w=0",
    80017d4c:	08200593          	li	a1,130
    80017d50:	00015617          	auipc	a2,0x15
    80017d54:	6d060613          	addi	a2,a2,1744 # 8002d420 <__func__.0+0x59c0>
    80017d58:	00010517          	auipc	a0,0x10
    80017d5c:	00050513          	mv	a0,a0
    80017d60:	7970d0ef          	jal	80025cf6 <printf>
    80017d64:	00031797          	auipc	a5,0x31
    80017d68:	2ad7c783          	lbu	a5,685(a5) # 80049011 <excpt+0x1>
    80017d6c:	00010597          	auipc	a1,0x10
    80017d70:	fc458593          	addi	a1,a1,-60 # 80027d30 <__func__.0+0x2d0>
    80017d74:	e789                	bnez	a5,80017d7e <amo_page_fault_1+0x20a>
    80017d76:	00010597          	auipc	a1,0x10
    80017d7a:	faa58593          	addi	a1,a1,-86 # 80027d20 <__func__.0+0x2c0>
    80017d7e:	00010517          	auipc	a0,0x10
    80017d82:	ff250513          	addi	a0,a0,-14 # 80027d70 <__func__.0+0x310>
    80017d86:	7710d0ef          	jal	80025cf6 <printf>
    80017d8a:	00031797          	auipc	a5,0x31
    80017d8e:	2877c783          	lbu	a5,647(a5) # 80049011 <excpt+0x1>
    80017d92:	efa9                	bnez	a5,80017dec <amo_page_fault_1+0x278>
    80017d94:	4529                	li	a0,10
    80017d96:	56b0c0ef          	jal	80024b00 <putchar>
    80017d9a:	c491                	beqz	s1,80017da6 <amo_page_fault_1+0x232>
    80017d9c:	00031797          	auipc	a5,0x31
    80017da0:	2757c783          	lbu	a5,629(a5) # 80049011 <excpt+0x1>
    80017da4:	cb85                	beqz	a5,80017dd4 <amo_page_fault_1+0x260>
    80017da6:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80017da8:	00010597          	auipc	a1,0x10
    80017dac:	f8858593          	addi	a1,a1,-120 # 80027d30 <__func__.0+0x2d0>
    80017db0:	00010517          	auipc	a0,0x10
    80017db4:	02850513          	addi	a0,a0,40 # 80027dd8 <__func__.0+0x378>
    80017db8:	73f0d0ef          	jal	80025cf6 <printf>
    80017dbc:	4511                	li	a0,4
    80017dbe:	e39e80ef          	jal	80000bf6 <goto_priv>
    80017dc2:	eeae90ef          	jal	800014ac <reset_state>
}
    80017dc6:	60e2                	ld	ra,24(sp)
    80017dc8:	8522                	mv	a0,s0
    80017dca:	6442                	ld	s0,16(sp)
    80017dcc:	64a2                	ld	s1,8(sp)
    80017dce:	6902                	ld	s2,0(sp)
    80017dd0:	6105                	addi	sp,sp,32
    80017dd2:	8082                	ret
    TEST_ASSERT("hs mode execute amomax_d successful when pte.w=0",
    80017dd4:	4405                	li	s0,1
    TEST_END();
    80017dd6:	00010597          	auipc	a1,0x10
    80017dda:	f4a58593          	addi	a1,a1,-182 # 80027d20 <__func__.0+0x2c0>
    80017dde:	bfc9                	j	80017db0 <amo_page_fault_1+0x23c>
    TEST_ASSERT("hs mode execute amoand_d when pte.w=0 leads to LPF",
    80017de0:	00893483          	ld	s1,8(s2)
    80017de4:	14c5                	addi	s1,s1,-15
    80017de6:	0014b493          	seqz	s1,s1
    80017dea:	b799                	j	80017d30 <amo_page_fault_1+0x1bc>
    TEST_ASSERT("hs mode execute amomax_d successful when pte.w=0",
    80017dec:	00010517          	auipc	a0,0x10
    80017df0:	f8c50513          	addi	a0,a0,-116 # 80027d78 <__func__.0+0x318>
    80017df4:	7030d0ef          	jal	80025cf6 <printf>
    80017df8:	02900513          	li	a0,41
    80017dfc:	5050c0ef          	jal	80024b00 <putchar>
    80017e00:	bf51                	j	80017d94 <amo_page_fault_1+0x220>

0000000080017e02 <amo_page_fault_2>:

bool amo_page_fault_2(){
    80017e02:	1101                	addi	sp,sp,-32

    TEST_START();
    80017e04:	0000f597          	auipc	a1,0xf
    80017e08:	f3c58593          	addi	a1,a1,-196 # 80026d40 <__func__.4>
    80017e0c:	00010517          	auipc	a0,0x10
    80017e10:	f3450513          	addi	a0,a0,-204 # 80027d40 <__func__.0+0x2e0>
bool amo_page_fault_2(){
    80017e14:	ec06                	sd	ra,24(sp)
    80017e16:	e822                	sd	s0,16(sp)
    80017e18:	e426                	sd	s1,8(sp)
    TEST_START();
    80017e1a:	6dd0d0ef          	jal	80025cf6 <printf>
    80017e1e:	4529                	li	a0,10
    80017e20:	4e10c0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    80017e24:	450d                	li	a0,3
    80017e26:	dd1e80ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80017e2a:	fb6e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017e2e:	9f5e80ef          	jal	80000822 <hpt_init>
    vspt_init();
    80017e32:	87fe80ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    80017e36:	4511                	li	a0,4
    80017e38:	dbfe80ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80017e3c:	000407b7          	lui	a5,0x40
    80017e40:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    80017e44:	450d                	li	a0,3
    80017e46:	db1e80ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);    
    80017e4a:	4509                	li	a0,2
    80017e4c:	ccbe80ef          	jal	80000b16 <set_prev_priv>
    //执行amomin_d指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项(sstatus配置不进去，需要配置mstatus)
    TEST_SETUP_EXCEPT();
    80017e50:	0330000f          	fence	rw,rw
    80017e54:	00031417          	auipc	s0,0x31
    80017e58:	1bc40413          	addi	s0,s0,444 # 80049010 <excpt>
    80017e5c:	4785                	li	a5,1
    80017e5e:	00031717          	auipc	a4,0x31
    80017e62:	1e073523          	sd	zero,490(a4) # 80049048 <excpt+0x38>
    80017e66:	00f41023          	sh	a5,0(s0)
    80017e6a:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    80017e6e:	000807b7          	lui	a5,0x80
    80017e72:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80017e74:	4701                	li	a4,0
    80017e76:	07b6                	slli	a5,a5,0xd
    80017e78:	80e7b72f          	amomin.d	a4,a4,(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);


    uint64_t value = amomin_d(addr,value);
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    80017e7c:	08200593          	li	a1,130
    80017e80:	00015617          	auipc	a2,0x15
    80017e84:	5d860613          	addi	a2,a2,1496 # 8002d458 <__func__.0+0x59f8>
    80017e88:	00010517          	auipc	a0,0x10
    80017e8c:	ed050513          	addi	a0,a0,-304 # 80027d58 <__func__.0+0x2f8>
    80017e90:	6670d0ef          	jal	80025cf6 <printf>
    80017e94:	00031797          	auipc	a5,0x31
    80017e98:	17d7c783          	lbu	a5,381(a5) # 80049011 <excpt+0x1>
    80017e9c:	00010597          	auipc	a1,0x10
    80017ea0:	e9458593          	addi	a1,a1,-364 # 80027d30 <__func__.0+0x2d0>
    80017ea4:	cf89                	beqz	a5,80017ebe <amo_page_fault_2+0xbc>
    80017ea6:	6418                	ld	a4,8(s0)
    80017ea8:	47bd                	li	a5,15
    80017eaa:	00010597          	auipc	a1,0x10
    80017eae:	e7658593          	addi	a1,a1,-394 # 80027d20 <__func__.0+0x2c0>
    80017eb2:	00f70663          	beq	a4,a5,80017ebe <amo_page_fault_2+0xbc>
    80017eb6:	00010597          	auipc	a1,0x10
    80017eba:	e7a58593          	addi	a1,a1,-390 # 80027d30 <__func__.0+0x2d0>
    80017ebe:	00010517          	auipc	a0,0x10
    80017ec2:	eb250513          	addi	a0,a0,-334 # 80027d70 <__func__.0+0x310>
    80017ec6:	6310d0ef          	jal	80025cf6 <printf>
    80017eca:	00031797          	auipc	a5,0x31
    80017ece:	1477c783          	lbu	a5,327(a5) # 80049011 <excpt+0x1>
    80017ed2:	c789                	beqz	a5,80017edc <amo_page_fault_2+0xda>
    80017ed4:	6418                	ld	a4,8(s0)
    80017ed6:	47bd                	li	a5,15
    80017ed8:	00f70c63          	beq	a4,a5,80017ef0 <amo_page_fault_2+0xee>
    80017edc:	00010517          	auipc	a0,0x10
    80017ee0:	e9c50513          	addi	a0,a0,-356 # 80027d78 <__func__.0+0x318>
    80017ee4:	6130d0ef          	jal	80025cf6 <printf>
    80017ee8:	02900513          	li	a0,41
    80017eec:	4150c0ef          	jal	80024b00 <putchar>
    80017ef0:	4529                	li	a0,10
    80017ef2:	40f0c0ef          	jal	80024b00 <putchar>
    80017ef6:	00031497          	auipc	s1,0x31
    80017efa:	11b4c483          	lbu	s1,283(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80017efe:	00010597          	auipc	a1,0x10
    80017f02:	e3258593          	addi	a1,a1,-462 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    80017f06:	cc91                	beqz	s1,80017f22 <amo_page_fault_2+0x120>
    80017f08:	6418                	ld	a4,8(s0)
    80017f0a:	47bd                	li	a5,15
    TEST_END();
    80017f0c:	00010597          	auipc	a1,0x10
    80017f10:	e1458593          	addi	a1,a1,-492 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    80017f14:	00f70763          	beq	a4,a5,80017f22 <amo_page_fault_2+0x120>
    80017f18:	4481                	li	s1,0
    TEST_END();
    80017f1a:	00010597          	auipc	a1,0x10
    80017f1e:	e1658593          	addi	a1,a1,-490 # 80027d30 <__func__.0+0x2d0>
    80017f22:	00010517          	auipc	a0,0x10
    80017f26:	eb650513          	addi	a0,a0,-330 # 80027dd8 <__func__.0+0x378>
    80017f2a:	5cd0d0ef          	jal	80025cf6 <printf>
    80017f2e:	4511                	li	a0,4
    80017f30:	cc7e80ef          	jal	80000bf6 <goto_priv>
    80017f34:	d78e90ef          	jal	800014ac <reset_state>
}
    80017f38:	60e2                	ld	ra,24(sp)
    80017f3a:	6442                	ld	s0,16(sp)
    80017f3c:	8526                	mv	a0,s1
    80017f3e:	64a2                	ld	s1,8(sp)
    80017f40:	6105                	addi	sp,sp,32
    80017f42:	8082                	ret

0000000080017f44 <amo_page_fault_3>:

bool amo_page_fault_3(){
    80017f44:	1141                	addi	sp,sp,-16

    TEST_START();
    80017f46:	0000f597          	auipc	a1,0xf
    80017f4a:	e1258593          	addi	a1,a1,-494 # 80026d58 <__func__.3>
    80017f4e:	00010517          	auipc	a0,0x10
    80017f52:	df250513          	addi	a0,a0,-526 # 80027d40 <__func__.0+0x2e0>
bool amo_page_fault_3(){
    80017f56:	e406                	sd	ra,8(sp)
    80017f58:	e022                	sd	s0,0(sp)
    TEST_START();
    80017f5a:	59d0d0ef          	jal	80025cf6 <printf>
    80017f5e:	4529                	li	a0,10
    80017f60:	3a10c0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    80017f64:	450d                	li	a0,3
    80017f66:	c91e80ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80017f6a:	e76e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017f6e:	8b5e80ef          	jal	80000822 <hpt_init>
    vspt_init();
    80017f72:	f3ee80ef          	jal	800006b0 <vspt_init>

 

    //执行amoadd_w指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80017f76:	4511                	li	a0,4
    80017f78:	c7fe80ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    80017f7c:	000407b7          	lui	a5,0x40
    80017f80:	3007a073          	csrs	mstatus,a5

    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    goto_priv(PRIV_HS);
    80017f84:	450d                	li	a0,3
    80017f86:	c71e80ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);   
    80017f8a:	4509                	li	a0,2
    80017f8c:	b8be80ef          	jal	80000b16 <set_prev_priv>
    
    TEST_SETUP_EXCEPT();
    80017f90:	0330000f          	fence	rw,rw
    80017f94:	4785                	li	a5,1
    80017f96:	00031717          	auipc	a4,0x31
    80017f9a:	0a073923          	sd	zero,178(a4) # 80049048 <excpt+0x38>
    80017f9e:	00031717          	auipc	a4,0x31
    80017fa2:	06f71923          	sh	a5,114(a4) # 80049010 <excpt>
    80017fa6:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80017faa:	000807b7          	lui	a5,0x80
    80017fae:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80017fb0:	4701                	li	a4,0
    80017fb2:	07b6                	slli	a5,a5,0xd
    80017fb4:	00e7a72f          	amoadd.w	a4,a4,(a5)
    uint64_t value = amoadd_w(addr,value);
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    80017fb8:	08200593          	li	a1,130
    80017fbc:	00015617          	auipc	a2,0x15
    80017fc0:	4e460613          	addi	a2,a2,1252 # 8002d4a0 <__func__.0+0x5a40>
    80017fc4:	00010517          	auipc	a0,0x10
    80017fc8:	d9450513          	addi	a0,a0,-620 # 80027d58 <__func__.0+0x2f8>
    80017fcc:	52b0d0ef          	jal	80025cf6 <printf>
    80017fd0:	00031797          	auipc	a5,0x31
    80017fd4:	0417c783          	lbu	a5,65(a5) # 80049011 <excpt+0x1>
    80017fd8:	00010597          	auipc	a1,0x10
    80017fdc:	d4858593          	addi	a1,a1,-696 # 80027d20 <__func__.0+0x2c0>
    80017fe0:	c789                	beqz	a5,80017fea <amo_page_fault_3+0xa6>
    80017fe2:	00010597          	auipc	a1,0x10
    80017fe6:	d4e58593          	addi	a1,a1,-690 # 80027d30 <__func__.0+0x2d0>
    80017fea:	00010517          	auipc	a0,0x10
    80017fee:	d8650513          	addi	a0,a0,-634 # 80027d70 <__func__.0+0x310>
    80017ff2:	5050d0ef          	jal	80025cf6 <printf>
    80017ff6:	00031797          	auipc	a5,0x31
    80017ffa:	01b7c783          	lbu	a5,27(a5) # 80049011 <excpt+0x1>
    80017ffe:	e7a1                	bnez	a5,80018046 <amo_page_fault_3+0x102>
    80018000:	4529                	li	a0,10
    80018002:	2ff0c0ef          	jal	80024b00 <putchar>
    80018006:	00031797          	auipc	a5,0x31
    8001800a:	00b7c783          	lbu	a5,11(a5) # 80049011 <excpt+0x1>
    8001800e:	e795                	bnez	a5,8001803a <amo_page_fault_3+0xf6>
    80018010:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80018012:	00010597          	auipc	a1,0x10
    80018016:	d0e58593          	addi	a1,a1,-754 # 80027d20 <__func__.0+0x2c0>
    8001801a:	00010517          	auipc	a0,0x10
    8001801e:	dbe50513          	addi	a0,a0,-578 # 80027dd8 <__func__.0+0x378>
    80018022:	4d50d0ef          	jal	80025cf6 <printf>
    80018026:	4511                	li	a0,4
    80018028:	bcfe80ef          	jal	80000bf6 <goto_priv>
    8001802c:	c80e90ef          	jal	800014ac <reset_state>
}
    80018030:	60a2                	ld	ra,8(sp)
    80018032:	8522                	mv	a0,s0
    80018034:	6402                	ld	s0,0(sp)
    80018036:	0141                	addi	sp,sp,16
    80018038:	8082                	ret
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    8001803a:	4401                	li	s0,0
    TEST_END();
    8001803c:	00010597          	auipc	a1,0x10
    80018040:	cf458593          	addi	a1,a1,-780 # 80027d30 <__func__.0+0x2d0>
    80018044:	bfd9                	j	8001801a <amo_page_fault_3+0xd6>
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    80018046:	00010517          	auipc	a0,0x10
    8001804a:	d3250513          	addi	a0,a0,-718 # 80027d78 <__func__.0+0x318>
    8001804e:	4a90d0ef          	jal	80025cf6 <printf>
    80018052:	02900513          	li	a0,41
    80018056:	2ab0c0ef          	jal	80024b00 <putchar>
    8001805a:	b75d                	j	80018000 <amo_page_fault_3+0xbc>

000000008001805c <amo_page_fault_4>:

bool amo_page_fault_4(){
    8001805c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001805e:	0000f597          	auipc	a1,0xf
    80018062:	d1258593          	addi	a1,a1,-750 # 80026d70 <__func__.2>
    80018066:	00010517          	auipc	a0,0x10
    8001806a:	cda50513          	addi	a0,a0,-806 # 80027d40 <__func__.0+0x2e0>
bool amo_page_fault_4(){
    8001806e:	ec06                	sd	ra,24(sp)
    80018070:	e822                	sd	s0,16(sp)
    80018072:	e426                	sd	s1,8(sp)
    80018074:	e04a                	sd	s2,0(sp)
    TEST_START();
    80018076:	4810d0ef          	jal	80025cf6 <printf>
    8001807a:	4529                	li	a0,10
    8001807c:	2850c0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    80018080:	450d                	li	a0,3
    80018082:	b75e80ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80018086:	d5ae80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001808a:	f98e80ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001808e:	e22e80ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    80018092:	4509                	li	a0,2
    80018094:	b63e80ef          	jal	80000bf6 <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80018098:	0330000f          	fence	rw,rw
    8001809c:	00031917          	auipc	s2,0x31
    800180a0:	f7490913          	addi	s2,s2,-140 # 80049010 <excpt>
    800180a4:	4785                	li	a5,1
    800180a6:	00031717          	auipc	a4,0x31
    800180aa:	fa073123          	sd	zero,-94(a4) # 80049048 <excpt+0x38>
    800180ae:	00f91023          	sh	a5,0(s2)
    800180b2:	0330000f          	fence	rw,rw
    800180b6:	deadc7b7          	lui	a5,0xdeadc
    800180ba:	40019737          	lui	a4,0x40019
    800180be:	eef7879b          	addiw	a5,a5,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    800180c2:	070a                	slli	a4,a4,0x2
    800180c4:	00f727af          	amoadd.w	a5,a5,(a4)

    addr = hs_page_base(VSI_GI);
    value = amoadd_w(addr,value);
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    800180c8:	08200593          	li	a1,130
    800180cc:	00015617          	auipc	a2,0x15
    800180d0:	41c60613          	addi	a2,a2,1052 # 8002d4e8 <__func__.0+0x5a88>
    800180d4:	00010517          	auipc	a0,0x10
    800180d8:	c8450513          	addi	a0,a0,-892 # 80027d58 <__func__.0+0x2f8>
    value = amoadd_w(addr,value);
    800180dc:	02079413          	slli	s0,a5,0x20
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    800180e0:	4170d0ef          	jal	80025cf6 <printf>
    800180e4:	00031797          	auipc	a5,0x31
    800180e8:	f2d7c783          	lbu	a5,-211(a5) # 80049011 <excpt+0x1>
    value = amoadd_w(addr,value);
    800180ec:	9001                	srli	s0,s0,0x20
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    800180ee:	00010597          	auipc	a1,0x10
    800180f2:	c4258593          	addi	a1,a1,-958 # 80027d30 <__func__.0+0x2d0>
    800180f6:	cf91                	beqz	a5,80018112 <amo_page_fault_4+0xb6>
    800180f8:	00893703          	ld	a4,8(s2)
    800180fc:	47bd                	li	a5,15
    800180fe:	00010597          	auipc	a1,0x10
    80018102:	c2258593          	addi	a1,a1,-990 # 80027d20 <__func__.0+0x2c0>
    80018106:	00f70663          	beq	a4,a5,80018112 <amo_page_fault_4+0xb6>
    8001810a:	00010597          	auipc	a1,0x10
    8001810e:	c2658593          	addi	a1,a1,-986 # 80027d30 <__func__.0+0x2d0>
    80018112:	00010517          	auipc	a0,0x10
    80018116:	c5e50513          	addi	a0,a0,-930 # 80027d70 <__func__.0+0x310>
    8001811a:	3dd0d0ef          	jal	80025cf6 <printf>
    8001811e:	00031797          	auipc	a5,0x31
    80018122:	ef37c783          	lbu	a5,-269(a5) # 80049011 <excpt+0x1>
    80018126:	c791                	beqz	a5,80018132 <amo_page_fault_4+0xd6>
    80018128:	00893703          	ld	a4,8(s2)
    8001812c:	47bd                	li	a5,15
    8001812e:	00f70c63          	beq	a4,a5,80018146 <amo_page_fault_4+0xea>
    80018132:	00010517          	auipc	a0,0x10
    80018136:	c4650513          	addi	a0,a0,-954 # 80027d78 <__func__.0+0x318>
    8001813a:	3bd0d0ef          	jal	80025cf6 <printf>
    8001813e:	02900513          	li	a0,41
    80018142:	1bf0c0ef          	jal	80024b00 <putchar>
    80018146:	4529                	li	a0,10
    80018148:	1b90c0ef          	jal	80024b00 <putchar>
    8001814c:	00031797          	auipc	a5,0x31
    80018150:	ec57c783          	lbu	a5,-315(a5) # 80049011 <excpt+0x1>
    80018154:	4481                	li	s1,0
    80018156:	c791                	beqz	a5,80018162 <amo_page_fault_4+0x106>
    80018158:	00893483          	ld	s1,8(s2)
    8001815c:	14c5                	addi	s1,s1,-15
    8001815e:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SPF
    );


    //执行amoand_d指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    80018162:	0330000f          	fence	rw,rw
    80018166:	4785                	li	a5,1
    80018168:	00031717          	auipc	a4,0x31
    8001816c:	ee073023          	sd	zero,-288(a4) # 80049048 <excpt+0x38>
    80018170:	00f91023          	sh	a5,0(s2)
    80018174:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    80018178:	000807b7          	lui	a5,0x80
    8001817c:	0795                	addi	a5,a5,5 # 80005 <_test_table_size+0x80004>
    8001817e:	07b6                	slli	a5,a5,0xd
    80018180:	6087b42f          	amoand.d	s0,s0,(a5)
    addr = hs_page_base(VSRX_GURWX);

    value = amoand_d(addr,value);

    TEST_ASSERT("vs mode execute amoand_d pte.w=0 leads to LPF",
    80018184:	08200593          	li	a1,130
    80018188:	00015617          	auipc	a2,0x15
    8001818c:	39860613          	addi	a2,a2,920 # 8002d520 <__func__.0+0x5ac0>
    80018190:	00010517          	auipc	a0,0x10
    80018194:	bc850513          	addi	a0,a0,-1080 # 80027d58 <__func__.0+0x2f8>
    80018198:	35f0d0ef          	jal	80025cf6 <printf>
    8001819c:	00031797          	auipc	a5,0x31
    800181a0:	e757c783          	lbu	a5,-395(a5) # 80049011 <excpt+0x1>
    800181a4:	00010597          	auipc	a1,0x10
    800181a8:	b8c58593          	addi	a1,a1,-1140 # 80027d30 <__func__.0+0x2d0>
    800181ac:	cf91                	beqz	a5,800181c8 <amo_page_fault_4+0x16c>
    800181ae:	00893703          	ld	a4,8(s2)
    800181b2:	47bd                	li	a5,15
    800181b4:	00010597          	auipc	a1,0x10
    800181b8:	b6c58593          	addi	a1,a1,-1172 # 80027d20 <__func__.0+0x2c0>
    800181bc:	00f70663          	beq	a4,a5,800181c8 <amo_page_fault_4+0x16c>
    800181c0:	00010597          	auipc	a1,0x10
    800181c4:	b7058593          	addi	a1,a1,-1168 # 80027d30 <__func__.0+0x2d0>
    800181c8:	00010517          	auipc	a0,0x10
    800181cc:	ba850513          	addi	a0,a0,-1112 # 80027d70 <__func__.0+0x310>
    800181d0:	3270d0ef          	jal	80025cf6 <printf>
    800181d4:	00031797          	auipc	a5,0x31
    800181d8:	e3d7c783          	lbu	a5,-451(a5) # 80049011 <excpt+0x1>
    800181dc:	c791                	beqz	a5,800181e8 <amo_page_fault_4+0x18c>
    800181de:	00893703          	ld	a4,8(s2)
    800181e2:	47bd                	li	a5,15
    800181e4:	00f70c63          	beq	a4,a5,800181fc <amo_page_fault_4+0x1a0>
    800181e8:	00010517          	auipc	a0,0x10
    800181ec:	b9050513          	addi	a0,a0,-1136 # 80027d78 <__func__.0+0x318>
    800181f0:	3070d0ef          	jal	80025cf6 <printf>
    800181f4:	02900513          	li	a0,41
    800181f8:	1090c0ef          	jal	80024b00 <putchar>
    800181fc:	4529                	li	a0,10
    800181fe:	1030c0ef          	jal	80024b00 <putchar>
    80018202:	c499                	beqz	s1,80018210 <amo_page_fault_4+0x1b4>
    80018204:	00031797          	auipc	a5,0x31
    80018208:	e0d7c783          	lbu	a5,-499(a5) # 80049011 <excpt+0x1>
    8001820c:	4481                	li	s1,0
    8001820e:	ebcd                	bnez	a5,800182c0 <amo_page_fault_4+0x264>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行amoand_d指令时，如果此时pte.w=1
    TEST_SETUP_EXCEPT();
    80018210:	0330000f          	fence	rw,rw
    80018214:	4785                	li	a5,1
    80018216:	00031717          	auipc	a4,0x31
    8001821a:	e2073923          	sd	zero,-462(a4) # 80049048 <excpt+0x38>
    8001821e:	00f91023          	sh	a5,0(s2)
    80018222:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    80018226:	1782                	slli	a5,a5,0x20
    80018228:	a087b42f          	amomax.d	s0,s0,(a5)
    addr = hs_page_base(VSRWX_GURWX);

    value = amomax_d(addr,value);
    TEST_ASSERT("vs mode execute amomax_d successful when pte.w=0",
    8001822c:	08200593          	li	a1,130
    80018230:	00015617          	auipc	a2,0x15
    80018234:	32060613          	addi	a2,a2,800 # 8002d550 <__func__.0+0x5af0>
    80018238:	00010517          	auipc	a0,0x10
    8001823c:	b2050513          	addi	a0,a0,-1248 # 80027d58 <__func__.0+0x2f8>
    80018240:	2b70d0ef          	jal	80025cf6 <printf>
    80018244:	00031797          	auipc	a5,0x31
    80018248:	dcd7c783          	lbu	a5,-563(a5) # 80049011 <excpt+0x1>
    8001824c:	00010597          	auipc	a1,0x10
    80018250:	ae458593          	addi	a1,a1,-1308 # 80027d30 <__func__.0+0x2d0>
    80018254:	e789                	bnez	a5,8001825e <amo_page_fault_4+0x202>
    80018256:	00010597          	auipc	a1,0x10
    8001825a:	aca58593          	addi	a1,a1,-1334 # 80027d20 <__func__.0+0x2c0>
    8001825e:	00010517          	auipc	a0,0x10
    80018262:	b1250513          	addi	a0,a0,-1262 # 80027d70 <__func__.0+0x310>
    80018266:	2910d0ef          	jal	80025cf6 <printf>
    8001826a:	00031797          	auipc	a5,0x31
    8001826e:	da77c783          	lbu	a5,-601(a5) # 80049011 <excpt+0x1>
    80018272:	efa9                	bnez	a5,800182cc <amo_page_fault_4+0x270>
    80018274:	4529                	li	a0,10
    80018276:	08b0c0ef          	jal	80024b00 <putchar>
    8001827a:	c491                	beqz	s1,80018286 <amo_page_fault_4+0x22a>
    8001827c:	00031797          	auipc	a5,0x31
    80018280:	d957c783          	lbu	a5,-619(a5) # 80049011 <excpt+0x1>
    80018284:	cb85                	beqz	a5,800182b4 <amo_page_fault_4+0x258>
    80018286:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80018288:	00010597          	auipc	a1,0x10
    8001828c:	aa858593          	addi	a1,a1,-1368 # 80027d30 <__func__.0+0x2d0>
    80018290:	00010517          	auipc	a0,0x10
    80018294:	b4850513          	addi	a0,a0,-1208 # 80027dd8 <__func__.0+0x378>
    80018298:	25f0d0ef          	jal	80025cf6 <printf>
    8001829c:	4511                	li	a0,4
    8001829e:	959e80ef          	jal	80000bf6 <goto_priv>
    800182a2:	a0ae90ef          	jal	800014ac <reset_state>
}
    800182a6:	60e2                	ld	ra,24(sp)
    800182a8:	8522                	mv	a0,s0
    800182aa:	6442                	ld	s0,16(sp)
    800182ac:	64a2                	ld	s1,8(sp)
    800182ae:	6902                	ld	s2,0(sp)
    800182b0:	6105                	addi	sp,sp,32
    800182b2:	8082                	ret
    TEST_ASSERT("vs mode execute amomax_d successful when pte.w=0",
    800182b4:	4405                	li	s0,1
    TEST_END();
    800182b6:	00010597          	auipc	a1,0x10
    800182ba:	a6a58593          	addi	a1,a1,-1430 # 80027d20 <__func__.0+0x2c0>
    800182be:	bfc9                	j	80018290 <amo_page_fault_4+0x234>
    TEST_ASSERT("vs mode execute amoand_d pte.w=0 leads to LPF",
    800182c0:	00893483          	ld	s1,8(s2)
    800182c4:	14c5                	addi	s1,s1,-15
    800182c6:	0014b493          	seqz	s1,s1
    800182ca:	b799                	j	80018210 <amo_page_fault_4+0x1b4>
    TEST_ASSERT("vs mode execute amomax_d successful when pte.w=0",
    800182cc:	00010517          	auipc	a0,0x10
    800182d0:	aac50513          	addi	a0,a0,-1364 # 80027d78 <__func__.0+0x318>
    800182d4:	2230d0ef          	jal	80025cf6 <printf>
    800182d8:	02900513          	li	a0,41
    800182dc:	0250c0ef          	jal	80024b00 <putchar>
    800182e0:	bf51                	j	80018274 <amo_page_fault_4+0x218>

00000000800182e2 <amo_page_fault_5>:

bool amo_page_fault_5(){
    800182e2:	1101                	addi	sp,sp,-32

    TEST_START();
    800182e4:	0000f597          	auipc	a1,0xf
    800182e8:	aa458593          	addi	a1,a1,-1372 # 80026d88 <__func__.1>
    800182ec:	00010517          	auipc	a0,0x10
    800182f0:	a5450513          	addi	a0,a0,-1452 # 80027d40 <__func__.0+0x2e0>
bool amo_page_fault_5(){
    800182f4:	ec06                	sd	ra,24(sp)
    800182f6:	e822                	sd	s0,16(sp)
    800182f8:	e426                	sd	s1,8(sp)
    TEST_START();
    800182fa:	1fd0d0ef          	jal	80025cf6 <printf>
    800182fe:	4529                	li	a0,10
    80018300:	0010c0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    80018304:	450d                	li	a0,3
    80018306:	8f1e80ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001830a:	ad6e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001830e:	d14e80ef          	jal	80000822 <hpt_init>
    vspt_init();
    80018312:	b9ee80ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    80018316:	4511                	li	a0,4
    80018318:	8dfe80ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    8001831c:	000407b7          	lui	a5,0x40
    80018320:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80018324:	4509                	li	a0,2
    80018326:	8d1e80ef          	jal	80000bf6 <goto_priv>
   
    //执行amomin_d指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项(sstatus配置不进去，需要配置mstatus)
    TEST_SETUP_EXCEPT();
    8001832a:	0330000f          	fence	rw,rw
    8001832e:	00031417          	auipc	s0,0x31
    80018332:	ce240413          	addi	s0,s0,-798 # 80049010 <excpt>
    80018336:	4785                	li	a5,1
    80018338:	00031717          	auipc	a4,0x31
    8001833c:	d0073823          	sd	zero,-752(a4) # 80049048 <excpt+0x38>
    80018340:	00f41023          	sh	a5,0(s0)
    80018344:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    80018348:	000807b7          	lui	a5,0x80
    8001834c:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001834e:	4701                	li	a4,0
    80018350:	07b6                	slli	a5,a5,0xd
    80018352:	80e7b72f          	amomin.d	a4,a4,(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);


    uint64_t value = amomin_d(addr,value);
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    80018356:	08200593          	li	a1,130
    8001835a:	00015617          	auipc	a2,0x15
    8001835e:	22e60613          	addi	a2,a2,558 # 8002d588 <__func__.0+0x5b28>
    80018362:	00010517          	auipc	a0,0x10
    80018366:	9f650513          	addi	a0,a0,-1546 # 80027d58 <__func__.0+0x2f8>
    8001836a:	18d0d0ef          	jal	80025cf6 <printf>
    8001836e:	00031797          	auipc	a5,0x31
    80018372:	ca37c783          	lbu	a5,-861(a5) # 80049011 <excpt+0x1>
    80018376:	00010597          	auipc	a1,0x10
    8001837a:	9ba58593          	addi	a1,a1,-1606 # 80027d30 <__func__.0+0x2d0>
    8001837e:	cf89                	beqz	a5,80018398 <amo_page_fault_5+0xb6>
    80018380:	6418                	ld	a4,8(s0)
    80018382:	47bd                	li	a5,15
    80018384:	00010597          	auipc	a1,0x10
    80018388:	99c58593          	addi	a1,a1,-1636 # 80027d20 <__func__.0+0x2c0>
    8001838c:	00f70663          	beq	a4,a5,80018398 <amo_page_fault_5+0xb6>
    80018390:	00010597          	auipc	a1,0x10
    80018394:	9a058593          	addi	a1,a1,-1632 # 80027d30 <__func__.0+0x2d0>
    80018398:	00010517          	auipc	a0,0x10
    8001839c:	9d850513          	addi	a0,a0,-1576 # 80027d70 <__func__.0+0x310>
    800183a0:	1570d0ef          	jal	80025cf6 <printf>
    800183a4:	00031797          	auipc	a5,0x31
    800183a8:	c6d7c783          	lbu	a5,-915(a5) # 80049011 <excpt+0x1>
    800183ac:	c789                	beqz	a5,800183b6 <amo_page_fault_5+0xd4>
    800183ae:	6418                	ld	a4,8(s0)
    800183b0:	47bd                	li	a5,15
    800183b2:	00f70c63          	beq	a4,a5,800183ca <amo_page_fault_5+0xe8>
    800183b6:	00010517          	auipc	a0,0x10
    800183ba:	9c250513          	addi	a0,a0,-1598 # 80027d78 <__func__.0+0x318>
    800183be:	1390d0ef          	jal	80025cf6 <printf>
    800183c2:	02900513          	li	a0,41
    800183c6:	73a0c0ef          	jal	80024b00 <putchar>
    800183ca:	4529                	li	a0,10
    800183cc:	7340c0ef          	jal	80024b00 <putchar>
    800183d0:	00031497          	auipc	s1,0x31
    800183d4:	c414c483          	lbu	s1,-959(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    800183d8:	00010597          	auipc	a1,0x10
    800183dc:	95858593          	addi	a1,a1,-1704 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    800183e0:	cc91                	beqz	s1,800183fc <amo_page_fault_5+0x11a>
    800183e2:	6418                	ld	a4,8(s0)
    800183e4:	47bd                	li	a5,15
    TEST_END();
    800183e6:	00010597          	auipc	a1,0x10
    800183ea:	93a58593          	addi	a1,a1,-1734 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    800183ee:	00f70763          	beq	a4,a5,800183fc <amo_page_fault_5+0x11a>
    800183f2:	4481                	li	s1,0
    TEST_END();
    800183f4:	00010597          	auipc	a1,0x10
    800183f8:	93c58593          	addi	a1,a1,-1732 # 80027d30 <__func__.0+0x2d0>
    800183fc:	00010517          	auipc	a0,0x10
    80018400:	9dc50513          	addi	a0,a0,-1572 # 80027dd8 <__func__.0+0x378>
    80018404:	0f30d0ef          	jal	80025cf6 <printf>
    80018408:	4511                	li	a0,4
    8001840a:	fece80ef          	jal	80000bf6 <goto_priv>
    8001840e:	89ee90ef          	jal	800014ac <reset_state>
}
    80018412:	60e2                	ld	ra,24(sp)
    80018414:	6442                	ld	s0,16(sp)
    80018416:	8526                	mv	a0,s1
    80018418:	64a2                	ld	s1,8(sp)
    8001841a:	6105                	addi	sp,sp,32
    8001841c:	8082                	ret

000000008001841e <amo_page_fault_6>:

bool amo_page_fault_6(){
    8001841e:	1141                	addi	sp,sp,-16

    TEST_START();
    80018420:	0000f597          	auipc	a1,0xf
    80018424:	98058593          	addi	a1,a1,-1664 # 80026da0 <__func__.0>
    80018428:	00010517          	auipc	a0,0x10
    8001842c:	91850513          	addi	a0,a0,-1768 # 80027d40 <__func__.0+0x2e0>
bool amo_page_fault_6(){
    80018430:	e406                	sd	ra,8(sp)
    80018432:	e022                	sd	s0,0(sp)
    TEST_START();
    80018434:	0c30d0ef          	jal	80025cf6 <printf>
    80018438:	4529                	li	a0,10
    8001843a:	6c60c0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    8001843e:	450d                	li	a0,3
    80018440:	fb6e80ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80018444:	99ce80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018448:	bdae80ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001844c:	a64e80ef          	jal	800006b0 <vspt_init>

 

    //执行amoadd_w指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80018450:	4511                	li	a0,4
    80018452:	fa4e80ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80018456:	000407b7          	lui	a5,0x40
    8001845a:	2007a073          	csrs	vsstatus,a5

    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    goto_priv(PRIV_VS);   
    8001845e:	4509                	li	a0,2
    80018460:	f96e80ef          	jal	80000bf6 <goto_priv>
    
    TEST_SETUP_EXCEPT();
    80018464:	0330000f          	fence	rw,rw
    80018468:	4785                	li	a5,1
    8001846a:	00031717          	auipc	a4,0x31
    8001846e:	bc073f23          	sd	zero,-1058(a4) # 80049048 <excpt+0x38>
    80018472:	00031717          	auipc	a4,0x31
    80018476:	b8f71f23          	sh	a5,-1122(a4) # 80049010 <excpt>
    8001847a:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    8001847e:	000807b7          	lui	a5,0x80
    80018482:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80018484:	4701                	li	a4,0
    80018486:	07b6                	slli	a5,a5,0xd
    80018488:	00e7a72f          	amoadd.w	a4,a4,(a5)
    uint64_t value = amoadd_w(addr,value);
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    8001848c:	08200593          	li	a1,130
    80018490:	00015617          	auipc	a2,0x15
    80018494:	14860613          	addi	a2,a2,328 # 8002d5d8 <__func__.0+0x5b78>
    80018498:	00010517          	auipc	a0,0x10
    8001849c:	8c050513          	addi	a0,a0,-1856 # 80027d58 <__func__.0+0x2f8>
    800184a0:	0570d0ef          	jal	80025cf6 <printf>
    800184a4:	00031797          	auipc	a5,0x31
    800184a8:	b6d7c783          	lbu	a5,-1171(a5) # 80049011 <excpt+0x1>
    800184ac:	00010597          	auipc	a1,0x10
    800184b0:	87458593          	addi	a1,a1,-1932 # 80027d20 <__func__.0+0x2c0>
    800184b4:	c789                	beqz	a5,800184be <amo_page_fault_6+0xa0>
    800184b6:	00010597          	auipc	a1,0x10
    800184ba:	87a58593          	addi	a1,a1,-1926 # 80027d30 <__func__.0+0x2d0>
    800184be:	00010517          	auipc	a0,0x10
    800184c2:	8b250513          	addi	a0,a0,-1870 # 80027d70 <__func__.0+0x310>
    800184c6:	0310d0ef          	jal	80025cf6 <printf>
    800184ca:	00031797          	auipc	a5,0x31
    800184ce:	b477c783          	lbu	a5,-1209(a5) # 80049011 <excpt+0x1>
    800184d2:	e7a1                	bnez	a5,8001851a <amo_page_fault_6+0xfc>
    800184d4:	4529                	li	a0,10
    800184d6:	62a0c0ef          	jal	80024b00 <putchar>
    800184da:	00031797          	auipc	a5,0x31
    800184de:	b377c783          	lbu	a5,-1225(a5) # 80049011 <excpt+0x1>
    800184e2:	e795                	bnez	a5,8001850e <amo_page_fault_6+0xf0>
    800184e4:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    800184e6:	00010597          	auipc	a1,0x10
    800184ea:	83a58593          	addi	a1,a1,-1990 # 80027d20 <__func__.0+0x2c0>
    800184ee:	00010517          	auipc	a0,0x10
    800184f2:	8ea50513          	addi	a0,a0,-1814 # 80027dd8 <__func__.0+0x378>
    800184f6:	0010d0ef          	jal	80025cf6 <printf>
    800184fa:	4511                	li	a0,4
    800184fc:	efae80ef          	jal	80000bf6 <goto_priv>
    80018500:	fade80ef          	jal	800014ac <reset_state>
}
    80018504:	60a2                	ld	ra,8(sp)
    80018506:	8522                	mv	a0,s0
    80018508:	6402                	ld	s0,0(sp)
    8001850a:	0141                	addi	sp,sp,16
    8001850c:	8082                	ret
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    8001850e:	4401                	li	s0,0
    TEST_END();
    80018510:	00010597          	auipc	a1,0x10
    80018514:	82058593          	addi	a1,a1,-2016 # 80027d30 <__func__.0+0x2d0>
    80018518:	bfd9                	j	800184ee <amo_page_fault_6+0xd0>
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    8001851a:	00010517          	auipc	a0,0x10
    8001851e:	85e50513          	addi	a0,a0,-1954 # 80027d78 <__func__.0+0x318>
    80018522:	7d40d0ef          	jal	80025cf6 <printf>
    80018526:	02900513          	li	a0,41
    8001852a:	5d60c0ef          	jal	80024b00 <putchar>
    8001852e:	b75d                	j	800184d4 <amo_page_fault_6+0xb6>

0000000080018530 <load_guest_page_fault_1>:
 #include <rvh_test.h>
#include <page_tables.h>

bool load_guest_page_fault_1(){
    80018530:	1101                	addi	sp,sp,-32

    TEST_START();
    80018532:	0000f597          	auipc	a1,0xf
    80018536:	88658593          	addi	a1,a1,-1914 # 80026db8 <__func__.37>
    8001853a:	00010517          	auipc	a0,0x10
    8001853e:	80650513          	addi	a0,a0,-2042 # 80027d40 <__func__.0+0x2e0>
bool load_guest_page_fault_1(){
    80018542:	ec06                	sd	ra,24(sp)
    80018544:	e822                	sd	s0,16(sp)
    80018546:	e426                	sd	s1,8(sp)
    TEST_START();
    80018548:	7ae0d0ef          	jal	80025cf6 <printf>
    8001854c:	4529                	li	a0,10
    8001854e:	5b20c0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    80018552:	450d                	li	a0,3
    80018554:	ea2e80ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80018558:	888e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001855c:	ac6e80ef          	jal	80000822 <hpt_init>
    vspt_init();
    80018560:	950e80ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80018564:	450d                	li	a0,3
    80018566:	e90e80ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001856a:	4509                	li	a0,2
    8001856c:	daae80ef          	jal	80000b16 <set_prev_priv>

    //执行取指相关指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80018570:	0330000f          	fence	rw,rw
    80018574:	00031417          	auipc	s0,0x31
    80018578:	a9c40413          	addi	s0,s0,-1380 # 80049010 <excpt>
    8001857c:	4785                	li	a5,1
    8001857e:	00031717          	auipc	a4,0x31
    80018582:	ac073523          	sd	zero,-1334(a4) # 80049048 <excpt+0x38>
    80018586:	00f41023          	sh	a5,0(s0)
    8001858a:	0330000f          	fence	rw,rw
    asm volatile(
    8001858e:	001007b7          	lui	a5,0x100
    80018592:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80018596:	07b2                	slli	a5,a5,0xc
    80018598:	6c07c7f3          	.insn	4, 0x6c07c7f3

    vaddr = hs_page_base(VSRWX_GI);
    hlvd(vaddr);
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    8001859c:	08200593          	li	a1,130
    800185a0:	00015617          	auipc	a2,0x15
    800185a4:	08060613          	addi	a2,a2,128 # 8002d620 <__func__.0+0x5bc0>
    800185a8:	0000f517          	auipc	a0,0xf
    800185ac:	7b050513          	addi	a0,a0,1968 # 80027d58 <__func__.0+0x2f8>
    800185b0:	7460d0ef          	jal	80025cf6 <printf>
    800185b4:	00031797          	auipc	a5,0x31
    800185b8:	a5d7c783          	lbu	a5,-1443(a5) # 80049011 <excpt+0x1>
    800185bc:	0000f597          	auipc	a1,0xf
    800185c0:	77458593          	addi	a1,a1,1908 # 80027d30 <__func__.0+0x2d0>
    800185c4:	cf89                	beqz	a5,800185de <load_guest_page_fault_1+0xae>
    800185c6:	6418                	ld	a4,8(s0)
    800185c8:	47d5                	li	a5,21
    800185ca:	0000f597          	auipc	a1,0xf
    800185ce:	75658593          	addi	a1,a1,1878 # 80027d20 <__func__.0+0x2c0>
    800185d2:	00f70663          	beq	a4,a5,800185de <load_guest_page_fault_1+0xae>
    800185d6:	0000f597          	auipc	a1,0xf
    800185da:	75a58593          	addi	a1,a1,1882 # 80027d30 <__func__.0+0x2d0>
    800185de:	0000f517          	auipc	a0,0xf
    800185e2:	79250513          	addi	a0,a0,1938 # 80027d70 <__func__.0+0x310>
    800185e6:	7100d0ef          	jal	80025cf6 <printf>
    800185ea:	00031797          	auipc	a5,0x31
    800185ee:	a277c783          	lbu	a5,-1497(a5) # 80049011 <excpt+0x1>
    800185f2:	c789                	beqz	a5,800185fc <load_guest_page_fault_1+0xcc>
    800185f4:	6418                	ld	a4,8(s0)
    800185f6:	47d5                	li	a5,21
    800185f8:	00f70c63          	beq	a4,a5,80018610 <load_guest_page_fault_1+0xe0>
    800185fc:	0000f517          	auipc	a0,0xf
    80018600:	77c50513          	addi	a0,a0,1916 # 80027d78 <__func__.0+0x318>
    80018604:	6f20d0ef          	jal	80025cf6 <printf>
    80018608:	02900513          	li	a0,41
    8001860c:	4f40c0ef          	jal	80024b00 <putchar>
    80018610:	4529                	li	a0,10
    80018612:	4ee0c0ef          	jal	80024b00 <putchar>
    80018616:	00031797          	auipc	a5,0x31
    8001861a:	9fb7c783          	lbu	a5,-1541(a5) # 80049011 <excpt+0x1>
    8001861e:	4481                	li	s1,0
    80018620:	c789                	beqz	a5,8001862a <load_guest_page_fault_1+0xfa>
    80018622:	6404                	ld	s1,8(s0)
    80018624:	14ad                	addi	s1,s1,-21
    80018626:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_LGPF
    );


    //执行hlvb指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    8001862a:	0330000f          	fence	rw,rw
    8001862e:	4785                	li	a5,1
    80018630:	00031717          	auipc	a4,0x31
    80018634:	a0073c23          	sd	zero,-1512(a4) # 80049048 <excpt+0x38>
    80018638:	00f41023          	sh	a5,0(s0)
    8001863c:	0330000f          	fence	rw,rw
    asm volatile(
    80018640:	001007b7          	lui	a5,0x100
    80018644:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80018648:	07b2                	slli	a5,a5,0xc
    8001864a:	6007c7f3          	.insn	4, 0x6007c7f3
    vaddr = hs_page_base(VSRWX_GI);

    hlvb(vaddr);   
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    8001864e:	08200593          	li	a1,130
    80018652:	00015617          	auipc	a2,0x15
    80018656:	01e60613          	addi	a2,a2,30 # 8002d670 <__func__.0+0x5c10>
    8001865a:	0000f517          	auipc	a0,0xf
    8001865e:	6fe50513          	addi	a0,a0,1790 # 80027d58 <__func__.0+0x2f8>
    80018662:	6940d0ef          	jal	80025cf6 <printf>
    80018666:	00031797          	auipc	a5,0x31
    8001866a:	9ab7c783          	lbu	a5,-1621(a5) # 80049011 <excpt+0x1>
    8001866e:	0000f597          	auipc	a1,0xf
    80018672:	6c258593          	addi	a1,a1,1730 # 80027d30 <__func__.0+0x2d0>
    80018676:	cf89                	beqz	a5,80018690 <load_guest_page_fault_1+0x160>
    80018678:	6418                	ld	a4,8(s0)
    8001867a:	47d5                	li	a5,21
    8001867c:	0000f597          	auipc	a1,0xf
    80018680:	6a458593          	addi	a1,a1,1700 # 80027d20 <__func__.0+0x2c0>
    80018684:	00f70663          	beq	a4,a5,80018690 <load_guest_page_fault_1+0x160>
    80018688:	0000f597          	auipc	a1,0xf
    8001868c:	6a858593          	addi	a1,a1,1704 # 80027d30 <__func__.0+0x2d0>
    80018690:	0000f517          	auipc	a0,0xf
    80018694:	6e050513          	addi	a0,a0,1760 # 80027d70 <__func__.0+0x310>
    80018698:	65e0d0ef          	jal	80025cf6 <printf>
    8001869c:	00031797          	auipc	a5,0x31
    800186a0:	9757c783          	lbu	a5,-1675(a5) # 80049011 <excpt+0x1>
    800186a4:	c789                	beqz	a5,800186ae <load_guest_page_fault_1+0x17e>
    800186a6:	6418                	ld	a4,8(s0)
    800186a8:	47d5                	li	a5,21
    800186aa:	00f70c63          	beq	a4,a5,800186c2 <load_guest_page_fault_1+0x192>
    800186ae:	0000f517          	auipc	a0,0xf
    800186b2:	6ca50513          	addi	a0,a0,1738 # 80027d78 <__func__.0+0x318>
    800186b6:	6400d0ef          	jal	80025cf6 <printf>
    800186ba:	02900513          	li	a0,41
    800186be:	4420c0ef          	jal	80024b00 <putchar>
    800186c2:	4529                	li	a0,10
    800186c4:	43c0c0ef          	jal	80024b00 <putchar>
    800186c8:	c095                	beqz	s1,800186ec <load_guest_page_fault_1+0x1bc>
    800186ca:	00031497          	auipc	s1,0x31
    800186ce:	9474c483          	lbu	s1,-1721(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    800186d2:	0000f597          	auipc	a1,0xf
    800186d6:	65e58593          	addi	a1,a1,1630 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    800186da:	cc91                	beqz	s1,800186f6 <load_guest_page_fault_1+0x1c6>
    800186dc:	6418                	ld	a4,8(s0)
    800186de:	47d5                	li	a5,21
    TEST_END();
    800186e0:	0000f597          	auipc	a1,0xf
    800186e4:	64058593          	addi	a1,a1,1600 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    800186e8:	00f70763          	beq	a4,a5,800186f6 <load_guest_page_fault_1+0x1c6>
    800186ec:	4481                	li	s1,0
    TEST_END();
    800186ee:	0000f597          	auipc	a1,0xf
    800186f2:	64258593          	addi	a1,a1,1602 # 80027d30 <__func__.0+0x2d0>
    800186f6:	0000f517          	auipc	a0,0xf
    800186fa:	6e250513          	addi	a0,a0,1762 # 80027dd8 <__func__.0+0x378>
    800186fe:	5f80d0ef          	jal	80025cf6 <printf>
    80018702:	4511                	li	a0,4
    80018704:	cf2e80ef          	jal	80000bf6 <goto_priv>
    80018708:	da5e80ef          	jal	800014ac <reset_state>
}
    8001870c:	60e2                	ld	ra,24(sp)
    8001870e:	6442                	ld	s0,16(sp)
    80018710:	8526                	mv	a0,s1
    80018712:	64a2                	ld	s1,8(sp)
    80018714:	6105                	addi	sp,sp,32
    80018716:	8082                	ret

0000000080018718 <load_guest_page_fault_2>:

bool load_guest_page_fault_2(){
    80018718:	1101                	addi	sp,sp,-32

    TEST_START();
    8001871a:	0000e597          	auipc	a1,0xe
    8001871e:	6b658593          	addi	a1,a1,1718 # 80026dd0 <__func__.35>
    80018722:	0000f517          	auipc	a0,0xf
    80018726:	61e50513          	addi	a0,a0,1566 # 80027d40 <__func__.0+0x2e0>
bool load_guest_page_fault_2(){
    8001872a:	ec06                	sd	ra,24(sp)
    8001872c:	e822                	sd	s0,16(sp)
    8001872e:	e426                	sd	s1,8(sp)
    TEST_START();
    80018730:	5c60d0ef          	jal	80025cf6 <printf>
    80018734:	4529                	li	a0,10
    80018736:	3ca0c0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    8001873a:	450d                	li	a0,3
    8001873c:	cbae80ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80018740:	ea1e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018744:	8dee80ef          	jal	80000822 <hpt_init>
    vspt_init();
    80018748:	f69e70ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    8001874c:	450d                	li	a0,3
    8001874e:	ca8e80ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80018752:	4509                	li	a0,2
    80018754:	bc2e80ef          	jal	80000b16 <set_prev_priv>

    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    80018758:	0330000f          	fence	rw,rw
    8001875c:	00031417          	auipc	s0,0x31
    80018760:	8b440413          	addi	s0,s0,-1868 # 80049010 <excpt>
    80018764:	4785                	li	a5,1
    80018766:	00031717          	auipc	a4,0x31
    8001876a:	8e073123          	sd	zero,-1822(a4) # 80049048 <excpt+0x38>
    8001876e:	00f41023          	sh	a5,0(s0)
    80018772:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSRWX_GI);


    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80018776:	000807b7          	lui	a5,0x80
    8001877a:	1007b073          	csrc	sstatus,a5
    asm volatile(
    8001877e:	001007b7          	lui	a5,0x100
    80018782:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80018786:	07b2                	slli	a5,a5,0xc
    80018788:	6407c7f3          	.insn	4, 0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    8001878c:	08200593          	li	a1,130
    80018790:	00015617          	auipc	a2,0x15
    80018794:	f4060613          	addi	a2,a2,-192 # 8002d6d0 <__func__.0+0x5c70>
    80018798:	0000f517          	auipc	a0,0xf
    8001879c:	5c050513          	addi	a0,a0,1472 # 80027d58 <__func__.0+0x2f8>
    800187a0:	5560d0ef          	jal	80025cf6 <printf>
    800187a4:	00031797          	auipc	a5,0x31
    800187a8:	86d7c783          	lbu	a5,-1939(a5) # 80049011 <excpt+0x1>
    800187ac:	0000f597          	auipc	a1,0xf
    800187b0:	58458593          	addi	a1,a1,1412 # 80027d30 <__func__.0+0x2d0>
    800187b4:	cf89                	beqz	a5,800187ce <load_guest_page_fault_2+0xb6>
    800187b6:	6418                	ld	a4,8(s0)
    800187b8:	47d5                	li	a5,21
    800187ba:	0000f597          	auipc	a1,0xf
    800187be:	56658593          	addi	a1,a1,1382 # 80027d20 <__func__.0+0x2c0>
    800187c2:	00f70663          	beq	a4,a5,800187ce <load_guest_page_fault_2+0xb6>
    800187c6:	0000f597          	auipc	a1,0xf
    800187ca:	56a58593          	addi	a1,a1,1386 # 80027d30 <__func__.0+0x2d0>
    800187ce:	0000f517          	auipc	a0,0xf
    800187d2:	5a250513          	addi	a0,a0,1442 # 80027d70 <__func__.0+0x310>
    800187d6:	5200d0ef          	jal	80025cf6 <printf>
    800187da:	00031797          	auipc	a5,0x31
    800187de:	8377c783          	lbu	a5,-1993(a5) # 80049011 <excpt+0x1>
    800187e2:	c789                	beqz	a5,800187ec <load_guest_page_fault_2+0xd4>
    800187e4:	6418                	ld	a4,8(s0)
    800187e6:	47d5                	li	a5,21
    800187e8:	00f70c63          	beq	a4,a5,80018800 <load_guest_page_fault_2+0xe8>
    800187ec:	0000f517          	auipc	a0,0xf
    800187f0:	58c50513          	addi	a0,a0,1420 # 80027d78 <__func__.0+0x318>
    800187f4:	5020d0ef          	jal	80025cf6 <printf>
    800187f8:	02900513          	li	a0,41
    800187fc:	3040c0ef          	jal	80024b00 <putchar>
    80018800:	4529                	li	a0,10
    80018802:	2fe0c0ef          	jal	80024b00 <putchar>
    80018806:	00031497          	auipc	s1,0x31
    8001880a:	80b4c483          	lbu	s1,-2037(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    8001880e:	0000f597          	auipc	a1,0xf
    80018812:	52258593          	addi	a1,a1,1314 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80018816:	cc91                	beqz	s1,80018832 <load_guest_page_fault_2+0x11a>
    80018818:	6418                	ld	a4,8(s0)
    8001881a:	47d5                	li	a5,21
    TEST_END();
    8001881c:	0000f597          	auipc	a1,0xf
    80018820:	50458593          	addi	a1,a1,1284 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80018824:	00f70763          	beq	a4,a5,80018832 <load_guest_page_fault_2+0x11a>
    80018828:	4481                	li	s1,0
    TEST_END();
    8001882a:	0000f597          	auipc	a1,0xf
    8001882e:	50658593          	addi	a1,a1,1286 # 80027d30 <__func__.0+0x2d0>
    80018832:	0000f517          	auipc	a0,0xf
    80018836:	5a650513          	addi	a0,a0,1446 # 80027dd8 <__func__.0+0x378>
    8001883a:	4bc0d0ef          	jal	80025cf6 <printf>
    8001883e:	4511                	li	a0,4
    80018840:	bb6e80ef          	jal	80000bf6 <goto_priv>
    80018844:	c69e80ef          	jal	800014ac <reset_state>
}
    80018848:	60e2                	ld	ra,24(sp)
    8001884a:	6442                	ld	s0,16(sp)
    8001884c:	8526                	mv	a0,s1
    8001884e:	64a2                	ld	s1,8(sp)
    80018850:	6105                	addi	sp,sp,32
    80018852:	8082                	ret

0000000080018854 <load_guest_page_fault_3>:

bool load_guest_page_fault_3(){
    80018854:	1101                	addi	sp,sp,-32

    TEST_START();
    80018856:	0000e597          	auipc	a1,0xe
    8001885a:	59258593          	addi	a1,a1,1426 # 80026de8 <__func__.34>
    8001885e:	0000f517          	auipc	a0,0xf
    80018862:	4e250513          	addi	a0,a0,1250 # 80027d40 <__func__.0+0x2e0>
bool load_guest_page_fault_3(){
    80018866:	ec06                	sd	ra,24(sp)
    80018868:	e822                	sd	s0,16(sp)
    8001886a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001886c:	48a0d0ef          	jal	80025cf6 <printf>
    80018870:	4529                	li	a0,10
    80018872:	28e0c0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    80018876:	450d                	li	a0,3
    80018878:	b7ee80ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001887c:	d65e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018880:	fa3e70ef          	jal	80000822 <hpt_init>
    vspt_init();
    80018884:	e2de70ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80018888:	450d                	li	a0,3
    8001888a:	b6ce80ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001888e:	4509                	li	a0,2
    80018890:	a86e80ef          	jal	80000b16 <set_prev_priv>
    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80018894:	0330000f          	fence	rw,rw
    80018898:	00030417          	auipc	s0,0x30
    8001889c:	77840413          	addi	s0,s0,1912 # 80049010 <excpt>
    800188a0:	4785                	li	a5,1
    800188a2:	00030717          	auipc	a4,0x30
    800188a6:	7a073323          	sd	zero,1958(a4) # 80049048 <excpt+0x38>
    800188aa:	00f41023          	sh	a5,0(s0)
    800188ae:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    800188b2:	000807b7          	lui	a5,0x80
    800188b6:	1007a073          	csrs	sstatus,a5
    800188ba:	001007b7          	lui	a5,0x100
    800188be:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800188c2:	07b2                	slli	a5,a5,0xc
    800188c4:	6407c7f3          	.insn	4, 0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    800188c8:	08200593          	li	a1,130
    800188cc:	00015617          	auipc	a2,0x15
    800188d0:	e6460613          	addi	a2,a2,-412 # 8002d730 <__func__.0+0x5cd0>
    800188d4:	0000f517          	auipc	a0,0xf
    800188d8:	48450513          	addi	a0,a0,1156 # 80027d58 <__func__.0+0x2f8>
    800188dc:	41a0d0ef          	jal	80025cf6 <printf>
    800188e0:	00030797          	auipc	a5,0x30
    800188e4:	7317c783          	lbu	a5,1841(a5) # 80049011 <excpt+0x1>
    800188e8:	0000f597          	auipc	a1,0xf
    800188ec:	44858593          	addi	a1,a1,1096 # 80027d30 <__func__.0+0x2d0>
    800188f0:	cf89                	beqz	a5,8001890a <load_guest_page_fault_3+0xb6>
    800188f2:	6418                	ld	a4,8(s0)
    800188f4:	47d5                	li	a5,21
    800188f6:	0000f597          	auipc	a1,0xf
    800188fa:	42a58593          	addi	a1,a1,1066 # 80027d20 <__func__.0+0x2c0>
    800188fe:	00f70663          	beq	a4,a5,8001890a <load_guest_page_fault_3+0xb6>
    80018902:	0000f597          	auipc	a1,0xf
    80018906:	42e58593          	addi	a1,a1,1070 # 80027d30 <__func__.0+0x2d0>
    8001890a:	0000f517          	auipc	a0,0xf
    8001890e:	46650513          	addi	a0,a0,1126 # 80027d70 <__func__.0+0x310>
    80018912:	3e40d0ef          	jal	80025cf6 <printf>
    80018916:	00030797          	auipc	a5,0x30
    8001891a:	6fb7c783          	lbu	a5,1787(a5) # 80049011 <excpt+0x1>
    8001891e:	c789                	beqz	a5,80018928 <load_guest_page_fault_3+0xd4>
    80018920:	6418                	ld	a4,8(s0)
    80018922:	47d5                	li	a5,21
    80018924:	00f70c63          	beq	a4,a5,8001893c <load_guest_page_fault_3+0xe8>
    80018928:	0000f517          	auipc	a0,0xf
    8001892c:	45050513          	addi	a0,a0,1104 # 80027d78 <__func__.0+0x318>
    80018930:	3c60d0ef          	jal	80025cf6 <printf>
    80018934:	02900513          	li	a0,41
    80018938:	1c80c0ef          	jal	80024b00 <putchar>
    8001893c:	4529                	li	a0,10
    8001893e:	1c20c0ef          	jal	80024b00 <putchar>
    80018942:	00030497          	auipc	s1,0x30
    80018946:	6cf4c483          	lbu	s1,1743(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    8001894a:	0000f597          	auipc	a1,0xf
    8001894e:	3e658593          	addi	a1,a1,998 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80018952:	cc91                	beqz	s1,8001896e <load_guest_page_fault_3+0x11a>
    80018954:	6418                	ld	a4,8(s0)
    80018956:	47d5                	li	a5,21
    TEST_END();
    80018958:	0000f597          	auipc	a1,0xf
    8001895c:	3c858593          	addi	a1,a1,968 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80018960:	00f70763          	beq	a4,a5,8001896e <load_guest_page_fault_3+0x11a>
    80018964:	4481                	li	s1,0
    TEST_END();
    80018966:	0000f597          	auipc	a1,0xf
    8001896a:	3ca58593          	addi	a1,a1,970 # 80027d30 <__func__.0+0x2d0>
    8001896e:	0000f517          	auipc	a0,0xf
    80018972:	46a50513          	addi	a0,a0,1130 # 80027dd8 <__func__.0+0x378>
    80018976:	3800d0ef          	jal	80025cf6 <printf>
    8001897a:	4511                	li	a0,4
    8001897c:	a7ae80ef          	jal	80000bf6 <goto_priv>
    80018980:	b2de80ef          	jal	800014ac <reset_state>
}
    80018984:	60e2                	ld	ra,24(sp)
    80018986:	6442                	ld	s0,16(sp)
    80018988:	8526                	mv	a0,s1
    8001898a:	64a2                	ld	s1,8(sp)
    8001898c:	6105                	addi	sp,sp,32
    8001898e:	8082                	ret

0000000080018990 <load_guest_page_fault_4>:

bool load_guest_page_fault_4(){
    80018990:	1101                	addi	sp,sp,-32

    TEST_START();
    80018992:	0000e597          	auipc	a1,0xe
    80018996:	46e58593          	addi	a1,a1,1134 # 80026e00 <__func__.33>
    8001899a:	0000f517          	auipc	a0,0xf
    8001899e:	3a650513          	addi	a0,a0,934 # 80027d40 <__func__.0+0x2e0>
bool load_guest_page_fault_4(){
    800189a2:	ec06                	sd	ra,24(sp)
    800189a4:	e822                	sd	s0,16(sp)
    800189a6:	e426                	sd	s1,8(sp)
    TEST_START();
    800189a8:	34e0d0ef          	jal	80025cf6 <printf>
    800189ac:	4529                	li	a0,10
    800189ae:	1520c0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    800189b2:	450d                	li	a0,3
    800189b4:	a42e80ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    800189b8:	c29e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800189bc:	e67e70ef          	jal	80000822 <hpt_init>
    vspt_init();
    800189c0:	cf1e70ef          	jal	800006b0 <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    800189c4:	4511                	li	a0,4
    800189c6:	a30e80ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800189ca:	000407b7          	lui	a5,0x40
    800189ce:	2007b073          	csrc	vsstatus,a5
    

    goto_priv(PRIV_HS);
    800189d2:	450d                	li	a0,3
    800189d4:	a22e80ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    800189d8:	4509                	li	a0,2
    800189da:	93ce80ef          	jal	80000b16 <set_prev_priv>
    //执行hlvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800189de:	0330000f          	fence	rw,rw
    800189e2:	00030417          	auipc	s0,0x30
    800189e6:	62e40413          	addi	s0,s0,1582 # 80049010 <excpt>
    800189ea:	4785                	li	a5,1
    800189ec:	00030717          	auipc	a4,0x30
    800189f0:	64073e23          	sd	zero,1628(a4) # 80049048 <excpt+0x38>
    800189f4:	00f41023          	sh	a5,0(s0)
    800189f8:	0330000f          	fence	rw,rw
    asm volatile(
    800189fc:	000807b7          	lui	a5,0x80
    80018a00:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80018a02:	07b6                	slli	a5,a5,0xd
    80018a04:	6007c7f3          	.insn	4, 0x6007c7f3
    vaddr = hs_page_base(VSURWX_GURWX);


    hlvb(vaddr);
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    80018a08:	08200593          	li	a1,130
    80018a0c:	00015617          	auipc	a2,0x15
    80018a10:	d9460613          	addi	a2,a2,-620 # 8002d7a0 <__func__.0+0x5d40>
    80018a14:	0000f517          	auipc	a0,0xf
    80018a18:	34450513          	addi	a0,a0,836 # 80027d58 <__func__.0+0x2f8>
    80018a1c:	2da0d0ef          	jal	80025cf6 <printf>
    80018a20:	00030797          	auipc	a5,0x30
    80018a24:	5f17c783          	lbu	a5,1521(a5) # 80049011 <excpt+0x1>
    80018a28:	0000f597          	auipc	a1,0xf
    80018a2c:	30858593          	addi	a1,a1,776 # 80027d30 <__func__.0+0x2d0>
    80018a30:	cf89                	beqz	a5,80018a4a <load_guest_page_fault_4+0xba>
    80018a32:	6418                	ld	a4,8(s0)
    80018a34:	47b5                	li	a5,13
    80018a36:	0000f597          	auipc	a1,0xf
    80018a3a:	2ea58593          	addi	a1,a1,746 # 80027d20 <__func__.0+0x2c0>
    80018a3e:	00f70663          	beq	a4,a5,80018a4a <load_guest_page_fault_4+0xba>
    80018a42:	0000f597          	auipc	a1,0xf
    80018a46:	2ee58593          	addi	a1,a1,750 # 80027d30 <__func__.0+0x2d0>
    80018a4a:	0000f517          	auipc	a0,0xf
    80018a4e:	32650513          	addi	a0,a0,806 # 80027d70 <__func__.0+0x310>
    80018a52:	2a40d0ef          	jal	80025cf6 <printf>
    80018a56:	00030797          	auipc	a5,0x30
    80018a5a:	5bb7c783          	lbu	a5,1467(a5) # 80049011 <excpt+0x1>
    80018a5e:	c789                	beqz	a5,80018a68 <load_guest_page_fault_4+0xd8>
    80018a60:	6418                	ld	a4,8(s0)
    80018a62:	47b5                	li	a5,13
    80018a64:	00f70c63          	beq	a4,a5,80018a7c <load_guest_page_fault_4+0xec>
    80018a68:	0000f517          	auipc	a0,0xf
    80018a6c:	31050513          	addi	a0,a0,784 # 80027d78 <__func__.0+0x318>
    80018a70:	2860d0ef          	jal	80025cf6 <printf>
    80018a74:	02900513          	li	a0,41
    80018a78:	0880c0ef          	jal	80024b00 <putchar>
    80018a7c:	4529                	li	a0,10
    80018a7e:	0820c0ef          	jal	80024b00 <putchar>
    80018a82:	00030497          	auipc	s1,0x30
    80018a86:	58f4c483          	lbu	s1,1423(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80018a8a:	0000f597          	auipc	a1,0xf
    80018a8e:	2a658593          	addi	a1,a1,678 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    80018a92:	cc91                	beqz	s1,80018aae <load_guest_page_fault_4+0x11e>
    80018a94:	6418                	ld	a4,8(s0)
    80018a96:	47b5                	li	a5,13
    TEST_END();
    80018a98:	0000f597          	auipc	a1,0xf
    80018a9c:	28858593          	addi	a1,a1,648 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    80018aa0:	00f70763          	beq	a4,a5,80018aae <load_guest_page_fault_4+0x11e>
    80018aa4:	4481                	li	s1,0
    TEST_END();
    80018aa6:	0000f597          	auipc	a1,0xf
    80018aaa:	28a58593          	addi	a1,a1,650 # 80027d30 <__func__.0+0x2d0>
    80018aae:	0000f517          	auipc	a0,0xf
    80018ab2:	32a50513          	addi	a0,a0,810 # 80027dd8 <__func__.0+0x378>
    80018ab6:	2400d0ef          	jal	80025cf6 <printf>
    80018aba:	4511                	li	a0,4
    80018abc:	93ae80ef          	jal	80000bf6 <goto_priv>
    80018ac0:	9ede80ef          	jal	800014ac <reset_state>
}
    80018ac4:	60e2                	ld	ra,24(sp)
    80018ac6:	6442                	ld	s0,16(sp)
    80018ac8:	8526                	mv	a0,s1
    80018aca:	64a2                	ld	s1,8(sp)
    80018acc:	6105                	addi	sp,sp,32
    80018ace:	8082                	ret

0000000080018ad0 <load_guest_page_fault_5>:

bool load_guest_page_fault_5(){
    80018ad0:	1141                	addi	sp,sp,-16

    TEST_START();
    80018ad2:	0000e597          	auipc	a1,0xe
    80018ad6:	34658593          	addi	a1,a1,838 # 80026e18 <__func__.32>
    80018ada:	0000f517          	auipc	a0,0xf
    80018ade:	26650513          	addi	a0,a0,614 # 80027d40 <__func__.0+0x2e0>
bool load_guest_page_fault_5(){
    80018ae2:	e406                	sd	ra,8(sp)
    80018ae4:	e022                	sd	s0,0(sp)
    TEST_START();
    80018ae6:	2100d0ef          	jal	80025cf6 <printf>
    80018aea:	4529                	li	a0,10
    80018aec:	0140c0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    80018af0:	450d                	li	a0,3
    80018af2:	904e80ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80018af6:	aebe70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018afa:	d29e70ef          	jal	80000822 <hpt_init>
    vspt_init();
    80018afe:	bb3e70ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80018b02:	4511                	li	a0,4
    80018b04:	8f2e80ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80018b08:	000407b7          	lui	a5,0x40
    80018b0c:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    80018b10:	450d                	li	a0,3
    80018b12:	8e4e80ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80018b16:	4509                	li	a0,2
    80018b18:	fffe70ef          	jal	80000b16 <set_prev_priv>

    //执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80018b1c:	0330000f          	fence	rw,rw
    80018b20:	4785                	li	a5,1
    80018b22:	00030717          	auipc	a4,0x30
    80018b26:	52073323          	sd	zero,1318(a4) # 80049048 <excpt+0x38>
    80018b2a:	00030717          	auipc	a4,0x30
    80018b2e:	4ef71323          	sh	a5,1254(a4) # 80049010 <excpt>
    80018b32:	0330000f          	fence	rw,rw
    80018b36:	000807b7          	lui	a5,0x80
    80018b3a:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80018b3c:	07b6                	slli	a5,a5,0xd
    80018b3e:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(vaddr);
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80018b42:	08200593          	li	a1,130
    80018b46:	00014617          	auipc	a2,0x14
    80018b4a:	45260613          	addi	a2,a2,1106 # 8002cf98 <__func__.0+0x5538>
    80018b4e:	0000f517          	auipc	a0,0xf
    80018b52:	20a50513          	addi	a0,a0,522 # 80027d58 <__func__.0+0x2f8>
    80018b56:	1a00d0ef          	jal	80025cf6 <printf>
    80018b5a:	00030797          	auipc	a5,0x30
    80018b5e:	4b77c783          	lbu	a5,1207(a5) # 80049011 <excpt+0x1>
    80018b62:	0000f597          	auipc	a1,0xf
    80018b66:	1be58593          	addi	a1,a1,446 # 80027d20 <__func__.0+0x2c0>
    80018b6a:	c789                	beqz	a5,80018b74 <load_guest_page_fault_5+0xa4>
    80018b6c:	0000f597          	auipc	a1,0xf
    80018b70:	1c458593          	addi	a1,a1,452 # 80027d30 <__func__.0+0x2d0>
    80018b74:	0000f517          	auipc	a0,0xf
    80018b78:	1fc50513          	addi	a0,a0,508 # 80027d70 <__func__.0+0x310>
    80018b7c:	17a0d0ef          	jal	80025cf6 <printf>
    80018b80:	00030797          	auipc	a5,0x30
    80018b84:	4917c783          	lbu	a5,1169(a5) # 80049011 <excpt+0x1>
    80018b88:	e7a1                	bnez	a5,80018bd0 <load_guest_page_fault_5+0x100>
    80018b8a:	4529                	li	a0,10
    80018b8c:	7750b0ef          	jal	80024b00 <putchar>
    80018b90:	00030797          	auipc	a5,0x30
    80018b94:	4817c783          	lbu	a5,1153(a5) # 80049011 <excpt+0x1>
    80018b98:	e795                	bnez	a5,80018bc4 <load_guest_page_fault_5+0xf4>
    80018b9a:	4405                	li	s0,1
    );

    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80018b9c:	0000f597          	auipc	a1,0xf
    80018ba0:	18458593          	addi	a1,a1,388 # 80027d20 <__func__.0+0x2c0>
    80018ba4:	0000f517          	auipc	a0,0xf
    80018ba8:	23450513          	addi	a0,a0,564 # 80027dd8 <__func__.0+0x378>
    80018bac:	14a0d0ef          	jal	80025cf6 <printf>
    80018bb0:	4511                	li	a0,4
    80018bb2:	844e80ef          	jal	80000bf6 <goto_priv>
    80018bb6:	8f7e80ef          	jal	800014ac <reset_state>
}
    80018bba:	60a2                	ld	ra,8(sp)
    80018bbc:	8522                	mv	a0,s0
    80018bbe:	6402                	ld	s0,0(sp)
    80018bc0:	0141                	addi	sp,sp,16
    80018bc2:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80018bc4:	4401                	li	s0,0
    TEST_END();
    80018bc6:	0000f597          	auipc	a1,0xf
    80018bca:	16a58593          	addi	a1,a1,362 # 80027d30 <__func__.0+0x2d0>
    80018bce:	bfd9                	j	80018ba4 <load_guest_page_fault_5+0xd4>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80018bd0:	0000f517          	auipc	a0,0xf
    80018bd4:	1a850513          	addi	a0,a0,424 # 80027d78 <__func__.0+0x318>
    80018bd8:	11e0d0ef          	jal	80025cf6 <printf>
    80018bdc:	02900513          	li	a0,41
    80018be0:	7210b0ef          	jal	80024b00 <putchar>
    80018be4:	b75d                	j	80018b8a <load_guest_page_fault_5+0xba>

0000000080018be6 <load_guest_page_fault_6>:

bool load_guest_page_fault_6(){
    80018be6:	1101                	addi	sp,sp,-32

    TEST_START();
    80018be8:	0000e597          	auipc	a1,0xe
    80018bec:	24858593          	addi	a1,a1,584 # 80026e30 <__func__.31>
    80018bf0:	0000f517          	auipc	a0,0xf
    80018bf4:	15050513          	addi	a0,a0,336 # 80027d40 <__func__.0+0x2e0>
bool load_guest_page_fault_6(){
    80018bf8:	ec06                	sd	ra,24(sp)
    80018bfa:	e822                	sd	s0,16(sp)
    80018bfc:	e426                	sd	s1,8(sp)
    TEST_START();
    80018bfe:	0f80d0ef          	jal	80025cf6 <printf>
    80018c02:	4529                	li	a0,10
    80018c04:	6fd0b0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    80018c08:	450d                	li	a0,3
    80018c0a:	fede70ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80018c0e:	9d3e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018c12:	c11e70ef          	jal	80000822 <hpt_init>
    vspt_init();
    80018c16:	a9be70ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80018c1a:	4509                	li	a0,2
    80018c1c:	fdbe70ef          	jal	80000bf6 <goto_priv>

    //执行lb指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80018c20:	0330000f          	fence	rw,rw
    80018c24:	00030417          	auipc	s0,0x30
    80018c28:	3ec40413          	addi	s0,s0,1004 # 80049010 <excpt>
    80018c2c:	4785                	li	a5,1
    80018c2e:	00030717          	auipc	a4,0x30
    80018c32:	40073d23          	sd	zero,1050(a4) # 80049048 <excpt+0x38>
    80018c36:	00f41023          	sh	a5,0(s0)
    80018c3a:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80018c3e:	001007b7          	lui	a5,0x100
    80018c42:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80018c46:	07b2                	slli	a5,a5,0xc
    80018c48:	00078783          	lb	a5,0(a5)

    vaddr = hs_page_base(VSRWX_GI);
    lb(vaddr);
    TEST_ASSERT("vs mode lb when the second-stage address translation pte.v=0 leads to LGPF",
    80018c4c:	08200593          	li	a1,130
    80018c50:	00015617          	auipc	a2,0x15
    80018c54:	b9060613          	addi	a2,a2,-1136 # 8002d7e0 <__func__.0+0x5d80>
    80018c58:	0000f517          	auipc	a0,0xf
    80018c5c:	10050513          	addi	a0,a0,256 # 80027d58 <__func__.0+0x2f8>
    80018c60:	0960d0ef          	jal	80025cf6 <printf>
    80018c64:	00030797          	auipc	a5,0x30
    80018c68:	3ad7c783          	lbu	a5,941(a5) # 80049011 <excpt+0x1>
    80018c6c:	0000f597          	auipc	a1,0xf
    80018c70:	0c458593          	addi	a1,a1,196 # 80027d30 <__func__.0+0x2d0>
    80018c74:	cf89                	beqz	a5,80018c8e <load_guest_page_fault_6+0xa8>
    80018c76:	6418                	ld	a4,8(s0)
    80018c78:	47d5                	li	a5,21
    80018c7a:	0000f597          	auipc	a1,0xf
    80018c7e:	0a658593          	addi	a1,a1,166 # 80027d20 <__func__.0+0x2c0>
    80018c82:	00f70663          	beq	a4,a5,80018c8e <load_guest_page_fault_6+0xa8>
    80018c86:	0000f597          	auipc	a1,0xf
    80018c8a:	0aa58593          	addi	a1,a1,170 # 80027d30 <__func__.0+0x2d0>
    80018c8e:	0000f517          	auipc	a0,0xf
    80018c92:	0e250513          	addi	a0,a0,226 # 80027d70 <__func__.0+0x310>
    80018c96:	0600d0ef          	jal	80025cf6 <printf>
    80018c9a:	00030797          	auipc	a5,0x30
    80018c9e:	3777c783          	lbu	a5,887(a5) # 80049011 <excpt+0x1>
    80018ca2:	c789                	beqz	a5,80018cac <load_guest_page_fault_6+0xc6>
    80018ca4:	6418                	ld	a4,8(s0)
    80018ca6:	47d5                	li	a5,21
    80018ca8:	00f70c63          	beq	a4,a5,80018cc0 <load_guest_page_fault_6+0xda>
    80018cac:	0000f517          	auipc	a0,0xf
    80018cb0:	0cc50513          	addi	a0,a0,204 # 80027d78 <__func__.0+0x318>
    80018cb4:	0420d0ef          	jal	80025cf6 <printf>
    80018cb8:	02900513          	li	a0,41
    80018cbc:	6450b0ef          	jal	80024b00 <putchar>
    80018cc0:	4529                	li	a0,10
    80018cc2:	63f0b0ef          	jal	80024b00 <putchar>
    80018cc6:	00030797          	auipc	a5,0x30
    80018cca:	34b7c783          	lbu	a5,843(a5) # 80049011 <excpt+0x1>
    80018cce:	4481                	li	s1,0
    80018cd0:	c789                	beqz	a5,80018cda <load_guest_page_fault_6+0xf4>
    80018cd2:	6404                	ld	s1,8(s0)
    80018cd4:	14ad                	addi	s1,s1,-21
    80018cd6:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_LGPF
    );


    //执行ld指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    80018cda:	0330000f          	fence	rw,rw
    80018cde:	4785                	li	a5,1
    80018ce0:	00030717          	auipc	a4,0x30
    80018ce4:	36073423          	sd	zero,872(a4) # 80049048 <excpt+0x38>
    80018ce8:	00f41023          	sh	a5,0(s0)
    80018cec:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    80018cf0:	001007b7          	lui	a5,0x100
    80018cf4:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80018cf8:	07b2                	slli	a5,a5,0xc
    80018cfa:	0007b783          	ld	a5,0(a5)
    vaddr = hs_page_base(VSRWX_GI);

    ld(vaddr);   
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    80018cfe:	08200593          	li	a1,130
    80018d02:	00015617          	auipc	a2,0x15
    80018d06:	b2e60613          	addi	a2,a2,-1234 # 8002d830 <__func__.0+0x5dd0>
    80018d0a:	0000f517          	auipc	a0,0xf
    80018d0e:	04e50513          	addi	a0,a0,78 # 80027d58 <__func__.0+0x2f8>
    80018d12:	7e50c0ef          	jal	80025cf6 <printf>
    80018d16:	00030797          	auipc	a5,0x30
    80018d1a:	2fb7c783          	lbu	a5,763(a5) # 80049011 <excpt+0x1>
    80018d1e:	0000f597          	auipc	a1,0xf
    80018d22:	01258593          	addi	a1,a1,18 # 80027d30 <__func__.0+0x2d0>
    80018d26:	cf89                	beqz	a5,80018d40 <load_guest_page_fault_6+0x15a>
    80018d28:	6418                	ld	a4,8(s0)
    80018d2a:	47d5                	li	a5,21
    80018d2c:	0000f597          	auipc	a1,0xf
    80018d30:	ff458593          	addi	a1,a1,-12 # 80027d20 <__func__.0+0x2c0>
    80018d34:	00f70663          	beq	a4,a5,80018d40 <load_guest_page_fault_6+0x15a>
    80018d38:	0000f597          	auipc	a1,0xf
    80018d3c:	ff858593          	addi	a1,a1,-8 # 80027d30 <__func__.0+0x2d0>
    80018d40:	0000f517          	auipc	a0,0xf
    80018d44:	03050513          	addi	a0,a0,48 # 80027d70 <__func__.0+0x310>
    80018d48:	7af0c0ef          	jal	80025cf6 <printf>
    80018d4c:	00030797          	auipc	a5,0x30
    80018d50:	2c57c783          	lbu	a5,709(a5) # 80049011 <excpt+0x1>
    80018d54:	c789                	beqz	a5,80018d5e <load_guest_page_fault_6+0x178>
    80018d56:	6418                	ld	a4,8(s0)
    80018d58:	47d5                	li	a5,21
    80018d5a:	00f70c63          	beq	a4,a5,80018d72 <load_guest_page_fault_6+0x18c>
    80018d5e:	0000f517          	auipc	a0,0xf
    80018d62:	01a50513          	addi	a0,a0,26 # 80027d78 <__func__.0+0x318>
    80018d66:	7910c0ef          	jal	80025cf6 <printf>
    80018d6a:	02900513          	li	a0,41
    80018d6e:	5930b0ef          	jal	80024b00 <putchar>
    80018d72:	4529                	li	a0,10
    80018d74:	58d0b0ef          	jal	80024b00 <putchar>
    80018d78:	c095                	beqz	s1,80018d9c <load_guest_page_fault_6+0x1b6>
    80018d7a:	00030497          	auipc	s1,0x30
    80018d7e:	2974c483          	lbu	s1,663(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80018d82:	0000f597          	auipc	a1,0xf
    80018d86:	fae58593          	addi	a1,a1,-82 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    80018d8a:	cc91                	beqz	s1,80018da6 <load_guest_page_fault_6+0x1c0>
    80018d8c:	6418                	ld	a4,8(s0)
    80018d8e:	47d5                	li	a5,21
    TEST_END();
    80018d90:	0000f597          	auipc	a1,0xf
    80018d94:	f9058593          	addi	a1,a1,-112 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    80018d98:	00f70763          	beq	a4,a5,80018da6 <load_guest_page_fault_6+0x1c0>
    80018d9c:	4481                	li	s1,0
    TEST_END();
    80018d9e:	0000f597          	auipc	a1,0xf
    80018da2:	f9258593          	addi	a1,a1,-110 # 80027d30 <__func__.0+0x2d0>
    80018da6:	0000f517          	auipc	a0,0xf
    80018daa:	03250513          	addi	a0,a0,50 # 80027dd8 <__func__.0+0x378>
    80018dae:	7490c0ef          	jal	80025cf6 <printf>
    80018db2:	4511                	li	a0,4
    80018db4:	e43e70ef          	jal	80000bf6 <goto_priv>
    80018db8:	ef4e80ef          	jal	800014ac <reset_state>
}
    80018dbc:	60e2                	ld	ra,24(sp)
    80018dbe:	6442                	ld	s0,16(sp)
    80018dc0:	8526                	mv	a0,s1
    80018dc2:	64a2                	ld	s1,8(sp)
    80018dc4:	6105                	addi	sp,sp,32
    80018dc6:	8082                	ret

0000000080018dc8 <load_guest_page_fault_7>:

bool load_guest_page_fault_7(){
    80018dc8:	1101                	addi	sp,sp,-32

    TEST_START();
    80018dca:	0000e597          	auipc	a1,0xe
    80018dce:	07e58593          	addi	a1,a1,126 # 80026e48 <__func__.30>
    80018dd2:	0000f517          	auipc	a0,0xf
    80018dd6:	f6e50513          	addi	a0,a0,-146 # 80027d40 <__func__.0+0x2e0>
bool load_guest_page_fault_7(){
    80018dda:	ec06                	sd	ra,24(sp)
    80018ddc:	e822                	sd	s0,16(sp)
    80018dde:	e426                	sd	s1,8(sp)
    TEST_START();
    80018de0:	7170c0ef          	jal	80025cf6 <printf>
    80018de4:	4529                	li	a0,10
    80018de6:	51b0b0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    80018dea:	450d                	li	a0,3
    80018dec:	e0be70ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80018df0:	ff0e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018df4:	a2fe70ef          	jal	80000822 <hpt_init>
    vspt_init();
    80018df8:	8b9e70ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80018dfc:	4509                	li	a0,2
    80018dfe:	df9e70ef          	jal	80000bf6 <goto_priv>

    //执行lh指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    80018e02:	0330000f          	fence	rw,rw
    80018e06:	00030417          	auipc	s0,0x30
    80018e0a:	20a40413          	addi	s0,s0,522 # 80049010 <excpt>
    80018e0e:	4785                	li	a5,1
    80018e10:	00030717          	auipc	a4,0x30
    80018e14:	22073c23          	sd	zero,568(a4) # 80049048 <excpt+0x38>
    80018e18:	00f41023          	sh	a5,0(s0)
    80018e1c:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSRWX_GI);


    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80018e20:	000807b7          	lui	a5,0x80
    80018e24:	1007b073          	csrc	sstatus,a5
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    80018e28:	001007b7          	lui	a5,0x100
    80018e2c:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80018e30:	07b2                	slli	a5,a5,0xc
    80018e32:	00079783          	lh	a5,0(a5)
    lh(vaddr);
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80018e36:	08200593          	li	a1,130
    80018e3a:	00015617          	auipc	a2,0x15
    80018e3e:	a4e60613          	addi	a2,a2,-1458 # 8002d888 <__func__.0+0x5e28>
    80018e42:	0000f517          	auipc	a0,0xf
    80018e46:	f1650513          	addi	a0,a0,-234 # 80027d58 <__func__.0+0x2f8>
    80018e4a:	6ad0c0ef          	jal	80025cf6 <printf>
    80018e4e:	00030797          	auipc	a5,0x30
    80018e52:	1c37c783          	lbu	a5,451(a5) # 80049011 <excpt+0x1>
    80018e56:	0000f597          	auipc	a1,0xf
    80018e5a:	eda58593          	addi	a1,a1,-294 # 80027d30 <__func__.0+0x2d0>
    80018e5e:	cf89                	beqz	a5,80018e78 <load_guest_page_fault_7+0xb0>
    80018e60:	6418                	ld	a4,8(s0)
    80018e62:	47d5                	li	a5,21
    80018e64:	0000f597          	auipc	a1,0xf
    80018e68:	ebc58593          	addi	a1,a1,-324 # 80027d20 <__func__.0+0x2c0>
    80018e6c:	00f70663          	beq	a4,a5,80018e78 <load_guest_page_fault_7+0xb0>
    80018e70:	0000f597          	auipc	a1,0xf
    80018e74:	ec058593          	addi	a1,a1,-320 # 80027d30 <__func__.0+0x2d0>
    80018e78:	0000f517          	auipc	a0,0xf
    80018e7c:	ef850513          	addi	a0,a0,-264 # 80027d70 <__func__.0+0x310>
    80018e80:	6770c0ef          	jal	80025cf6 <printf>
    80018e84:	00030797          	auipc	a5,0x30
    80018e88:	18d7c783          	lbu	a5,397(a5) # 80049011 <excpt+0x1>
    80018e8c:	c789                	beqz	a5,80018e96 <load_guest_page_fault_7+0xce>
    80018e8e:	6418                	ld	a4,8(s0)
    80018e90:	47d5                	li	a5,21
    80018e92:	00f70c63          	beq	a4,a5,80018eaa <load_guest_page_fault_7+0xe2>
    80018e96:	0000f517          	auipc	a0,0xf
    80018e9a:	ee250513          	addi	a0,a0,-286 # 80027d78 <__func__.0+0x318>
    80018e9e:	6590c0ef          	jal	80025cf6 <printf>
    80018ea2:	02900513          	li	a0,41
    80018ea6:	45b0b0ef          	jal	80024b00 <putchar>
    80018eaa:	4529                	li	a0,10
    80018eac:	4550b0ef          	jal	80024b00 <putchar>
    80018eb0:	00030497          	auipc	s1,0x30
    80018eb4:	1614c483          	lbu	s1,353(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80018eb8:	0000f597          	auipc	a1,0xf
    80018ebc:	e7858593          	addi	a1,a1,-392 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80018ec0:	cc91                	beqz	s1,80018edc <load_guest_page_fault_7+0x114>
    80018ec2:	6418                	ld	a4,8(s0)
    80018ec4:	47d5                	li	a5,21
    TEST_END();
    80018ec6:	0000f597          	auipc	a1,0xf
    80018eca:	e5a58593          	addi	a1,a1,-422 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80018ece:	00f70763          	beq	a4,a5,80018edc <load_guest_page_fault_7+0x114>
    80018ed2:	4481                	li	s1,0
    TEST_END();
    80018ed4:	0000f597          	auipc	a1,0xf
    80018ed8:	e5c58593          	addi	a1,a1,-420 # 80027d30 <__func__.0+0x2d0>
    80018edc:	0000f517          	auipc	a0,0xf
    80018ee0:	efc50513          	addi	a0,a0,-260 # 80027dd8 <__func__.0+0x378>
    80018ee4:	6130c0ef          	jal	80025cf6 <printf>
    80018ee8:	4511                	li	a0,4
    80018eea:	d0de70ef          	jal	80000bf6 <goto_priv>
    80018eee:	dbee80ef          	jal	800014ac <reset_state>
}
    80018ef2:	60e2                	ld	ra,24(sp)
    80018ef4:	6442                	ld	s0,16(sp)
    80018ef6:	8526                	mv	a0,s1
    80018ef8:	64a2                	ld	s1,8(sp)
    80018efa:	6105                	addi	sp,sp,32
    80018efc:	8082                	ret

0000000080018efe <load_guest_page_fault_8>:

bool load_guest_page_fault_8(){
    80018efe:	1101                	addi	sp,sp,-32

    TEST_START();
    80018f00:	0000e597          	auipc	a1,0xe
    80018f04:	f6058593          	addi	a1,a1,-160 # 80026e60 <__func__.29>
    80018f08:	0000f517          	auipc	a0,0xf
    80018f0c:	e3850513          	addi	a0,a0,-456 # 80027d40 <__func__.0+0x2e0>
bool load_guest_page_fault_8(){
    80018f10:	ec06                	sd	ra,24(sp)
    80018f12:	e822                	sd	s0,16(sp)
    80018f14:	e426                	sd	s1,8(sp)
    TEST_START();
    80018f16:	5e10c0ef          	jal	80025cf6 <printf>
    80018f1a:	4529                	li	a0,10
    80018f1c:	3e50b0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    80018f20:	450d                	li	a0,3
    80018f22:	cd5e70ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80018f26:	ebae70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018f2a:	8f9e70ef          	jal	80000822 <hpt_init>
    vspt_init();
    80018f2e:	f82e70ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80018f32:	4509                	li	a0,2
    80018f34:	cc3e70ef          	jal	80000bf6 <goto_priv>

    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80018f38:	0330000f          	fence	rw,rw
    80018f3c:	00030417          	auipc	s0,0x30
    80018f40:	0d440413          	addi	s0,s0,212 # 80049010 <excpt>
    80018f44:	4785                	li	a5,1
    80018f46:	00030717          	auipc	a4,0x30
    80018f4a:	10073123          	sd	zero,258(a4) # 80049048 <excpt+0x38>
    80018f4e:	00f41023          	sh	a5,0(s0)
    80018f52:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80018f56:	000807b7          	lui	a5,0x80
    80018f5a:	1007a073          	csrs	sstatus,a5
    80018f5e:	001007b7          	lui	a5,0x100
    80018f62:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80018f66:	07b2                	slli	a5,a5,0xc
    80018f68:	00079783          	lh	a5,0(a5)
    lh(vaddr);
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80018f6c:	08200593          	li	a1,130
    80018f70:	00015617          	auipc	a2,0x15
    80018f74:	97860613          	addi	a2,a2,-1672 # 8002d8e8 <__func__.0+0x5e88>
    80018f78:	0000f517          	auipc	a0,0xf
    80018f7c:	de050513          	addi	a0,a0,-544 # 80027d58 <__func__.0+0x2f8>
    80018f80:	5770c0ef          	jal	80025cf6 <printf>
    80018f84:	00030797          	auipc	a5,0x30
    80018f88:	08d7c783          	lbu	a5,141(a5) # 80049011 <excpt+0x1>
    80018f8c:	0000f597          	auipc	a1,0xf
    80018f90:	da458593          	addi	a1,a1,-604 # 80027d30 <__func__.0+0x2d0>
    80018f94:	cf89                	beqz	a5,80018fae <load_guest_page_fault_8+0xb0>
    80018f96:	6418                	ld	a4,8(s0)
    80018f98:	47d5                	li	a5,21
    80018f9a:	0000f597          	auipc	a1,0xf
    80018f9e:	d8658593          	addi	a1,a1,-634 # 80027d20 <__func__.0+0x2c0>
    80018fa2:	00f70663          	beq	a4,a5,80018fae <load_guest_page_fault_8+0xb0>
    80018fa6:	0000f597          	auipc	a1,0xf
    80018faa:	d8a58593          	addi	a1,a1,-630 # 80027d30 <__func__.0+0x2d0>
    80018fae:	0000f517          	auipc	a0,0xf
    80018fb2:	dc250513          	addi	a0,a0,-574 # 80027d70 <__func__.0+0x310>
    80018fb6:	5410c0ef          	jal	80025cf6 <printf>
    80018fba:	00030797          	auipc	a5,0x30
    80018fbe:	0577c783          	lbu	a5,87(a5) # 80049011 <excpt+0x1>
    80018fc2:	c789                	beqz	a5,80018fcc <load_guest_page_fault_8+0xce>
    80018fc4:	6418                	ld	a4,8(s0)
    80018fc6:	47d5                	li	a5,21
    80018fc8:	00f70c63          	beq	a4,a5,80018fe0 <load_guest_page_fault_8+0xe2>
    80018fcc:	0000f517          	auipc	a0,0xf
    80018fd0:	dac50513          	addi	a0,a0,-596 # 80027d78 <__func__.0+0x318>
    80018fd4:	5230c0ef          	jal	80025cf6 <printf>
    80018fd8:	02900513          	li	a0,41
    80018fdc:	3250b0ef          	jal	80024b00 <putchar>
    80018fe0:	4529                	li	a0,10
    80018fe2:	31f0b0ef          	jal	80024b00 <putchar>
    80018fe6:	00030497          	auipc	s1,0x30
    80018fea:	02b4c483          	lbu	s1,43(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    80018fee:	0000f597          	auipc	a1,0xf
    80018ff2:	d4258593          	addi	a1,a1,-702 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80018ff6:	cc91                	beqz	s1,80019012 <load_guest_page_fault_8+0x114>
    80018ff8:	6418                	ld	a4,8(s0)
    80018ffa:	47d5                	li	a5,21
    TEST_END();
    80018ffc:	0000f597          	auipc	a1,0xf
    80019000:	d2458593          	addi	a1,a1,-732 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80019004:	00f70763          	beq	a4,a5,80019012 <load_guest_page_fault_8+0x114>
    80019008:	4481                	li	s1,0
    TEST_END();
    8001900a:	0000f597          	auipc	a1,0xf
    8001900e:	d2658593          	addi	a1,a1,-730 # 80027d30 <__func__.0+0x2d0>
    80019012:	0000f517          	auipc	a0,0xf
    80019016:	dc650513          	addi	a0,a0,-570 # 80027dd8 <__func__.0+0x378>
    8001901a:	4dd0c0ef          	jal	80025cf6 <printf>
    8001901e:	4511                	li	a0,4
    80019020:	bd7e70ef          	jal	80000bf6 <goto_priv>
    80019024:	c88e80ef          	jal	800014ac <reset_state>
}
    80019028:	60e2                	ld	ra,24(sp)
    8001902a:	6442                	ld	s0,16(sp)
    8001902c:	8526                	mv	a0,s1
    8001902e:	64a2                	ld	s1,8(sp)
    80019030:	6105                	addi	sp,sp,32
    80019032:	8082                	ret

0000000080019034 <load_guest_page_fault_9>:

bool load_guest_page_fault_9(){
    80019034:	1101                	addi	sp,sp,-32

    TEST_START();
    80019036:	0000e597          	auipc	a1,0xe
    8001903a:	e4258593          	addi	a1,a1,-446 # 80026e78 <__func__.28>
    8001903e:	0000f517          	auipc	a0,0xf
    80019042:	d0250513          	addi	a0,a0,-766 # 80027d40 <__func__.0+0x2e0>
bool load_guest_page_fault_9(){
    80019046:	ec06                	sd	ra,24(sp)
    80019048:	e822                	sd	s0,16(sp)
    8001904a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001904c:	4ab0c0ef          	jal	80025cf6 <printf>
    80019050:	4529                	li	a0,10
    80019052:	2af0b0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    80019056:	450d                	li	a0,3
    80019058:	b9fe70ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001905c:	d84e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019060:	fc2e70ef          	jal	80000822 <hpt_init>
    vspt_init();
    80019064:	e4ce70ef          	jal	800006b0 <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    80019068:	4511                	li	a0,4
    8001906a:	b8de70ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    8001906e:	000407b7          	lui	a5,0x40
    80019072:	2007b073          	csrc	vsstatus,a5
    

    goto_priv(PRIV_VS);
    80019076:	4509                	li	a0,2
    80019078:	b7fe70ef          	jal	80000bf6 <goto_priv>
    //执行lb指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    8001907c:	0330000f          	fence	rw,rw
    80019080:	00030417          	auipc	s0,0x30
    80019084:	f9040413          	addi	s0,s0,-112 # 80049010 <excpt>
    80019088:	4785                	li	a5,1
    8001908a:	00030717          	auipc	a4,0x30
    8001908e:	fa073f23          	sd	zero,-66(a4) # 80049048 <excpt+0x38>
    80019092:	00f41023          	sh	a5,0(s0)
    80019096:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8001909a:	000807b7          	lui	a5,0x80
    8001909e:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800190a0:	07b6                	slli	a5,a5,0xd
    800190a2:	00078783          	lb	a5,0(a5)
    vaddr = hs_page_base(VSURWX_GURWX);


    lb(vaddr)  ;
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    800190a6:	08200593          	li	a1,130
    800190aa:	00015617          	auipc	a2,0x15
    800190ae:	8ae60613          	addi	a2,a2,-1874 # 8002d958 <__func__.0+0x5ef8>
    800190b2:	0000f517          	auipc	a0,0xf
    800190b6:	ca650513          	addi	a0,a0,-858 # 80027d58 <__func__.0+0x2f8>
    800190ba:	43d0c0ef          	jal	80025cf6 <printf>
    800190be:	00030797          	auipc	a5,0x30
    800190c2:	f537c783          	lbu	a5,-173(a5) # 80049011 <excpt+0x1>
    800190c6:	0000f597          	auipc	a1,0xf
    800190ca:	c6a58593          	addi	a1,a1,-918 # 80027d30 <__func__.0+0x2d0>
    800190ce:	cf89                	beqz	a5,800190e8 <load_guest_page_fault_9+0xb4>
    800190d0:	6418                	ld	a4,8(s0)
    800190d2:	47b5                	li	a5,13
    800190d4:	0000f597          	auipc	a1,0xf
    800190d8:	c4c58593          	addi	a1,a1,-948 # 80027d20 <__func__.0+0x2c0>
    800190dc:	00f70663          	beq	a4,a5,800190e8 <load_guest_page_fault_9+0xb4>
    800190e0:	0000f597          	auipc	a1,0xf
    800190e4:	c5058593          	addi	a1,a1,-944 # 80027d30 <__func__.0+0x2d0>
    800190e8:	0000f517          	auipc	a0,0xf
    800190ec:	c8850513          	addi	a0,a0,-888 # 80027d70 <__func__.0+0x310>
    800190f0:	4070c0ef          	jal	80025cf6 <printf>
    800190f4:	00030797          	auipc	a5,0x30
    800190f8:	f1d7c783          	lbu	a5,-227(a5) # 80049011 <excpt+0x1>
    800190fc:	c789                	beqz	a5,80019106 <load_guest_page_fault_9+0xd2>
    800190fe:	6418                	ld	a4,8(s0)
    80019100:	47b5                	li	a5,13
    80019102:	00f70c63          	beq	a4,a5,8001911a <load_guest_page_fault_9+0xe6>
    80019106:	0000f517          	auipc	a0,0xf
    8001910a:	c7250513          	addi	a0,a0,-910 # 80027d78 <__func__.0+0x318>
    8001910e:	3e90c0ef          	jal	80025cf6 <printf>
    80019112:	02900513          	li	a0,41
    80019116:	1eb0b0ef          	jal	80024b00 <putchar>
    8001911a:	4529                	li	a0,10
    8001911c:	1e50b0ef          	jal	80024b00 <putchar>
    80019120:	00030497          	auipc	s1,0x30
    80019124:	ef14c483          	lbu	s1,-271(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80019128:	0000f597          	auipc	a1,0xf
    8001912c:	c0858593          	addi	a1,a1,-1016 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    80019130:	cc91                	beqz	s1,8001914c <load_guest_page_fault_9+0x118>
    80019132:	6418                	ld	a4,8(s0)
    80019134:	47b5                	li	a5,13
    TEST_END();
    80019136:	0000f597          	auipc	a1,0xf
    8001913a:	bea58593          	addi	a1,a1,-1046 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    8001913e:	00f70763          	beq	a4,a5,8001914c <load_guest_page_fault_9+0x118>
    80019142:	4481                	li	s1,0
    TEST_END();
    80019144:	0000f597          	auipc	a1,0xf
    80019148:	bec58593          	addi	a1,a1,-1044 # 80027d30 <__func__.0+0x2d0>
    8001914c:	0000f517          	auipc	a0,0xf
    80019150:	c8c50513          	addi	a0,a0,-884 # 80027dd8 <__func__.0+0x378>
    80019154:	3a30c0ef          	jal	80025cf6 <printf>
    80019158:	4511                	li	a0,4
    8001915a:	a9de70ef          	jal	80000bf6 <goto_priv>
    8001915e:	b4ee80ef          	jal	800014ac <reset_state>
}
    80019162:	60e2                	ld	ra,24(sp)
    80019164:	6442                	ld	s0,16(sp)
    80019166:	8526                	mv	a0,s1
    80019168:	64a2                	ld	s1,8(sp)
    8001916a:	6105                	addi	sp,sp,32
    8001916c:	8082                	ret

000000008001916e <load_guest_page_fault_10>:

bool load_guest_page_fault_10(){
    8001916e:	1141                	addi	sp,sp,-16

    TEST_START();
    80019170:	0000e597          	auipc	a1,0xe
    80019174:	d2058593          	addi	a1,a1,-736 # 80026e90 <__func__.27>
    80019178:	0000f517          	auipc	a0,0xf
    8001917c:	bc850513          	addi	a0,a0,-1080 # 80027d40 <__func__.0+0x2e0>
bool load_guest_page_fault_10(){
    80019180:	e406                	sd	ra,8(sp)
    80019182:	e022                	sd	s0,0(sp)
    TEST_START();
    80019184:	3730c0ef          	jal	80025cf6 <printf>
    80019188:	4529                	li	a0,10
    8001918a:	1770b0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    8001918e:	450d                	li	a0,3
    80019190:	a67e70ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80019194:	c4ce70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019198:	e8ae70ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001919c:	d14e70ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    800191a0:	4511                	li	a0,4
    800191a2:	a55e70ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    800191a6:	000407b7          	lui	a5,0x40
    800191aa:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_VS);
    800191ae:	4509                	li	a0,2
    800191b0:	a47e70ef          	jal	80000bf6 <goto_priv>

    //执行lb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    800191b4:	0330000f          	fence	rw,rw
    800191b8:	4785                	li	a5,1
    800191ba:	00030717          	auipc	a4,0x30
    800191be:	e8073723          	sd	zero,-370(a4) # 80049048 <excpt+0x38>
    800191c2:	00030717          	auipc	a4,0x30
    800191c6:	e4f71723          	sh	a5,-434(a4) # 80049010 <excpt>
    800191ca:	0330000f          	fence	rw,rw
    800191ce:	000807b7          	lui	a5,0x80
    800191d2:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800191d4:	07b6                	slli	a5,a5,0xd
    800191d6:	00078783          	lb	a5,0(a5)
    lb(vaddr);

    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    800191da:	08200593          	li	a1,130
    800191de:	00014617          	auipc	a2,0x14
    800191e2:	7b260613          	addi	a2,a2,1970 # 8002d990 <__func__.0+0x5f30>
    800191e6:	0000f517          	auipc	a0,0xf
    800191ea:	b7250513          	addi	a0,a0,-1166 # 80027d58 <__func__.0+0x2f8>
    800191ee:	3090c0ef          	jal	80025cf6 <printf>
    800191f2:	00030797          	auipc	a5,0x30
    800191f6:	e1f7c783          	lbu	a5,-481(a5) # 80049011 <excpt+0x1>
    800191fa:	0000f597          	auipc	a1,0xf
    800191fe:	b2658593          	addi	a1,a1,-1242 # 80027d20 <__func__.0+0x2c0>
    80019202:	c789                	beqz	a5,8001920c <load_guest_page_fault_10+0x9e>
    80019204:	0000f597          	auipc	a1,0xf
    80019208:	b2c58593          	addi	a1,a1,-1236 # 80027d30 <__func__.0+0x2d0>
    8001920c:	0000f517          	auipc	a0,0xf
    80019210:	b6450513          	addi	a0,a0,-1180 # 80027d70 <__func__.0+0x310>
    80019214:	2e30c0ef          	jal	80025cf6 <printf>
    80019218:	00030797          	auipc	a5,0x30
    8001921c:	df97c783          	lbu	a5,-519(a5) # 80049011 <excpt+0x1>
    80019220:	e7a1                	bnez	a5,80019268 <load_guest_page_fault_10+0xfa>
    80019222:	4529                	li	a0,10
    80019224:	0dd0b0ef          	jal	80024b00 <putchar>
    80019228:	00030797          	auipc	a5,0x30
    8001922c:	de97c783          	lbu	a5,-535(a5) # 80049011 <excpt+0x1>
    80019230:	e795                	bnez	a5,8001925c <load_guest_page_fault_10+0xee>
    80019232:	4405                	li	s0,1
    );

    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80019234:	0000f597          	auipc	a1,0xf
    80019238:	aec58593          	addi	a1,a1,-1300 # 80027d20 <__func__.0+0x2c0>
    8001923c:	0000f517          	auipc	a0,0xf
    80019240:	b9c50513          	addi	a0,a0,-1124 # 80027dd8 <__func__.0+0x378>
    80019244:	2b30c0ef          	jal	80025cf6 <printf>
    80019248:	4511                	li	a0,4
    8001924a:	9ade70ef          	jal	80000bf6 <goto_priv>
    8001924e:	a5ee80ef          	jal	800014ac <reset_state>
}
    80019252:	60a2                	ld	ra,8(sp)
    80019254:	8522                	mv	a0,s0
    80019256:	6402                	ld	s0,0(sp)
    80019258:	0141                	addi	sp,sp,16
    8001925a:	8082                	ret
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    8001925c:	4401                	li	s0,0
    TEST_END();
    8001925e:	0000f597          	auipc	a1,0xf
    80019262:	ad258593          	addi	a1,a1,-1326 # 80027d30 <__func__.0+0x2d0>
    80019266:	bfd9                	j	8001923c <load_guest_page_fault_10+0xce>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    80019268:	0000f517          	auipc	a0,0xf
    8001926c:	b1050513          	addi	a0,a0,-1264 # 80027d78 <__func__.0+0x318>
    80019270:	2870c0ef          	jal	80025cf6 <printf>
    80019274:	02900513          	li	a0,41
    80019278:	0890b0ef          	jal	80024b00 <putchar>
    8001927c:	b75d                	j	80019222 <load_guest_page_fault_10+0xb4>

000000008001927e <load_guest_page_fault_11>:



bool load_guest_page_fault_11(){
    8001927e:	1101                	addi	sp,sp,-32

    TEST_START();
    80019280:	0000e597          	auipc	a1,0xe
    80019284:	c3058593          	addi	a1,a1,-976 # 80026eb0 <__func__.26>
    80019288:	0000f517          	auipc	a0,0xf
    8001928c:	ab850513          	addi	a0,a0,-1352 # 80027d40 <__func__.0+0x2e0>
bool load_guest_page_fault_11(){
    80019290:	ec06                	sd	ra,24(sp)
    80019292:	e822                	sd	s0,16(sp)
    80019294:	e426                	sd	s1,8(sp)
    TEST_START();
    80019296:	2610c0ef          	jal	80025cf6 <printf>
    8001929a:	4529                	li	a0,10
    8001929c:	0650b0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    800192a0:	450d                	li	a0,3
    800192a2:	955e70ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    800192a6:	b3ae70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800192aa:	d78e70ef          	jal	80000822 <hpt_init>
    vspt_init();
    800192ae:	c02e70ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    800192b2:	4511                	li	a0,4
    800192b4:	943e70ef          	jal	80000bf6 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    800192b8:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    800192bc:	450d                	li	a0,3
    800192be:	939e70ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    800192c2:	4509                	li	a0,2
    800192c4:	853e70ef          	jal	80000b16 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    800192c8:	0330000f          	fence	rw,rw
    800192cc:	00030417          	auipc	s0,0x30
    800192d0:	d4440413          	addi	s0,s0,-700 # 80049010 <excpt>
    800192d4:	4785                	li	a5,1
    800192d6:	00030717          	auipc	a4,0x30
    800192da:	d6073923          	sd	zero,-654(a4) # 80049048 <excpt+0x38>
    800192de:	00f41023          	sh	a5,0(s0)
    800192e2:	0330000f          	fence	rw,rw
    asm volatile(
    800192e6:	400197b7          	lui	a5,0x40019
    800192ea:	078a                	slli	a5,a5,0x2
    800192ec:	6c07c7f3          	.insn	4, 0x6c07c7f3

    vaddr = vs_page_base(VSI_GI);
    hlvd(vaddr);

    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    800192f0:	08200593          	li	a1,130
    800192f4:	00014617          	auipc	a2,0x14
    800192f8:	32c60613          	addi	a2,a2,812 # 8002d620 <__func__.0+0x5bc0>
    800192fc:	0000f517          	auipc	a0,0xf
    80019300:	a5c50513          	addi	a0,a0,-1444 # 80027d58 <__func__.0+0x2f8>
    80019304:	1f30c0ef          	jal	80025cf6 <printf>
    80019308:	00030797          	auipc	a5,0x30
    8001930c:	d097c783          	lbu	a5,-759(a5) # 80049011 <excpt+0x1>
    80019310:	0000f597          	auipc	a1,0xf
    80019314:	a2058593          	addi	a1,a1,-1504 # 80027d30 <__func__.0+0x2d0>
    80019318:	cf89                	beqz	a5,80019332 <load_guest_page_fault_11+0xb4>
    8001931a:	6418                	ld	a4,8(s0)
    8001931c:	47d5                	li	a5,21
    8001931e:	0000f597          	auipc	a1,0xf
    80019322:	a0258593          	addi	a1,a1,-1534 # 80027d20 <__func__.0+0x2c0>
    80019326:	00f70663          	beq	a4,a5,80019332 <load_guest_page_fault_11+0xb4>
    8001932a:	0000f597          	auipc	a1,0xf
    8001932e:	a0658593          	addi	a1,a1,-1530 # 80027d30 <__func__.0+0x2d0>
    80019332:	0000f517          	auipc	a0,0xf
    80019336:	a3e50513          	addi	a0,a0,-1474 # 80027d70 <__func__.0+0x310>
    8001933a:	1bd0c0ef          	jal	80025cf6 <printf>
    8001933e:	00030797          	auipc	a5,0x30
    80019342:	cd37c783          	lbu	a5,-813(a5) # 80049011 <excpt+0x1>
    80019346:	c789                	beqz	a5,80019350 <load_guest_page_fault_11+0xd2>
    80019348:	6418                	ld	a4,8(s0)
    8001934a:	47d5                	li	a5,21
    8001934c:	00f70c63          	beq	a4,a5,80019364 <load_guest_page_fault_11+0xe6>
    80019350:	0000f517          	auipc	a0,0xf
    80019354:	a2850513          	addi	a0,a0,-1496 # 80027d78 <__func__.0+0x318>
    80019358:	19f0c0ef          	jal	80025cf6 <printf>
    8001935c:	02900513          	li	a0,41
    80019360:	7a00b0ef          	jal	80024b00 <putchar>
    80019364:	4529                	li	a0,10
    80019366:	79a0b0ef          	jal	80024b00 <putchar>
    8001936a:	00030497          	auipc	s1,0x30
    8001936e:	ca74c483          	lbu	s1,-857(s1) # 80049011 <excpt+0x1>
        excpt.cause == CAUSE_LGPF
    );



    TEST_END();
    80019372:	0000f597          	auipc	a1,0xf
    80019376:	9be58593          	addi	a1,a1,-1602 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    8001937a:	cc91                	beqz	s1,80019396 <load_guest_page_fault_11+0x118>
    8001937c:	6418                	ld	a4,8(s0)
    8001937e:	47d5                	li	a5,21
    TEST_END();
    80019380:	0000f597          	auipc	a1,0xf
    80019384:	9a058593          	addi	a1,a1,-1632 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    80019388:	00f70763          	beq	a4,a5,80019396 <load_guest_page_fault_11+0x118>
    8001938c:	4481                	li	s1,0
    TEST_END();
    8001938e:	0000f597          	auipc	a1,0xf
    80019392:	9a258593          	addi	a1,a1,-1630 # 80027d30 <__func__.0+0x2d0>
    80019396:	0000f517          	auipc	a0,0xf
    8001939a:	a4250513          	addi	a0,a0,-1470 # 80027dd8 <__func__.0+0x378>
    8001939e:	1590c0ef          	jal	80025cf6 <printf>
    800193a2:	4511                	li	a0,4
    800193a4:	853e70ef          	jal	80000bf6 <goto_priv>
    800193a8:	904e80ef          	jal	800014ac <reset_state>
}
    800193ac:	60e2                	ld	ra,24(sp)
    800193ae:	6442                	ld	s0,16(sp)
    800193b0:	8526                	mv	a0,s1
    800193b2:	64a2                	ld	s1,8(sp)
    800193b4:	6105                	addi	sp,sp,32
    800193b6:	8082                	ret

00000000800193b8 <load_guest_page_fault_12>:

bool load_guest_page_fault_12(){
    800193b8:	1101                	addi	sp,sp,-32

    TEST_START();
    800193ba:	0000e597          	auipc	a1,0xe
    800193be:	b1658593          	addi	a1,a1,-1258 # 80026ed0 <__func__.25>
    800193c2:	0000f517          	auipc	a0,0xf
    800193c6:	97e50513          	addi	a0,a0,-1666 # 80027d40 <__func__.0+0x2e0>
bool load_guest_page_fault_12(){
    800193ca:	ec06                	sd	ra,24(sp)
    800193cc:	e822                	sd	s0,16(sp)
    800193ce:	e426                	sd	s1,8(sp)
    TEST_START();
    800193d0:	1270c0ef          	jal	80025cf6 <printf>
    800193d4:	4529                	li	a0,10
    800193d6:	72a0b0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    800193da:	450d                	li	a0,3
    800193dc:	81be70ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    800193e0:	a00e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800193e4:	c3ee70ef          	jal	80000822 <hpt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    800193e8:	4511                	li	a0,4
    800193ea:	80de70ef          	jal	80000bf6 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    800193ee:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    800193f2:	450d                	li	a0,3
    800193f4:	803e70ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    800193f8:	4509                	li	a0,2
    800193fa:	f1ce70ef          	jal	80000b16 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    800193fe:	0330000f          	fence	rw,rw
    80019402:	00030417          	auipc	s0,0x30
    80019406:	c0e40413          	addi	s0,s0,-1010 # 80049010 <excpt>
    8001940a:	4785                	li	a5,1
    8001940c:	00030717          	auipc	a4,0x30
    80019410:	c2073e23          	sd	zero,-964(a4) # 80049048 <excpt+0x38>
    80019414:	00f41023          	sh	a5,0(s0)
    80019418:	0330000f          	fence	rw,rw
    vaddr = vs_page_base(VSI_GUX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001941c:	000807b7          	lui	a5,0x80
    80019420:	1007b073          	csrc	sstatus,a5
    asm volatile(
    80019424:	2000d5b7          	lui	a1,0x2000d
    80019428:	058e                	slli	a1,a1,0x3
    8001942a:	6405c7f3          	.insn	4, 0x6405c7f3
    hlvh(vaddr);

    printf("%llx\n",vaddr);
    8001942e:	00015517          	auipc	a0,0x15
    80019432:	f4a50513          	addi	a0,a0,-182 # 8002e378 <__func__.0+0x6918>
    80019436:	0c10c0ef          	jal	80025cf6 <printf>
    printf("%d\n",excpt.cause);
    8001943a:	640c                	ld	a1,8(s0)
    8001943c:	0000f517          	auipc	a0,0xf
    80019440:	44c50513          	addi	a0,a0,1100 # 80028888 <__func__.0+0xe28>
    80019444:	0b30c0ef          	jal	80025cf6 <printf>
    printf("%d\n",excpt.triggered);
    80019448:	00030597          	auipc	a1,0x30
    8001944c:	bc95c583          	lbu	a1,-1079(a1) # 80049011 <excpt+0x1>
    80019450:	0000f517          	auipc	a0,0xf
    80019454:	43850513          	addi	a0,a0,1080 # 80028888 <__func__.0+0xe28>
    80019458:	09f0c0ef          	jal	80025cf6 <printf>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    8001945c:	08200593          	li	a1,130
    80019460:	00014617          	auipc	a2,0x14
    80019464:	27060613          	addi	a2,a2,624 # 8002d6d0 <__func__.0+0x5c70>
    80019468:	0000f517          	auipc	a0,0xf
    8001946c:	8f050513          	addi	a0,a0,-1808 # 80027d58 <__func__.0+0x2f8>
    80019470:	0870c0ef          	jal	80025cf6 <printf>
    80019474:	00030797          	auipc	a5,0x30
    80019478:	b9d7c783          	lbu	a5,-1123(a5) # 80049011 <excpt+0x1>
    8001947c:	0000f597          	auipc	a1,0xf
    80019480:	8b458593          	addi	a1,a1,-1868 # 80027d30 <__func__.0+0x2d0>
    80019484:	cf89                	beqz	a5,8001949e <load_guest_page_fault_12+0xe6>
    80019486:	6418                	ld	a4,8(s0)
    80019488:	47d5                	li	a5,21
    8001948a:	0000f597          	auipc	a1,0xf
    8001948e:	89658593          	addi	a1,a1,-1898 # 80027d20 <__func__.0+0x2c0>
    80019492:	00f70663          	beq	a4,a5,8001949e <load_guest_page_fault_12+0xe6>
    80019496:	0000f597          	auipc	a1,0xf
    8001949a:	89a58593          	addi	a1,a1,-1894 # 80027d30 <__func__.0+0x2d0>
    8001949e:	0000f517          	auipc	a0,0xf
    800194a2:	8d250513          	addi	a0,a0,-1838 # 80027d70 <__func__.0+0x310>
    800194a6:	0510c0ef          	jal	80025cf6 <printf>
    800194aa:	00030797          	auipc	a5,0x30
    800194ae:	b677c783          	lbu	a5,-1177(a5) # 80049011 <excpt+0x1>
    800194b2:	c789                	beqz	a5,800194bc <load_guest_page_fault_12+0x104>
    800194b4:	6418                	ld	a4,8(s0)
    800194b6:	47d5                	li	a5,21
    800194b8:	00f70c63          	beq	a4,a5,800194d0 <load_guest_page_fault_12+0x118>
    800194bc:	0000f517          	auipc	a0,0xf
    800194c0:	8bc50513          	addi	a0,a0,-1860 # 80027d78 <__func__.0+0x318>
    800194c4:	0330c0ef          	jal	80025cf6 <printf>
    800194c8:	02900513          	li	a0,41
    800194cc:	6340b0ef          	jal	80024b00 <putchar>
    800194d0:	4529                	li	a0,10
    800194d2:	62e0b0ef          	jal	80024b00 <putchar>
    800194d6:	00030497          	auipc	s1,0x30
    800194da:	b3b4c483          	lbu	s1,-1221(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    800194de:	0000f597          	auipc	a1,0xf
    800194e2:	85258593          	addi	a1,a1,-1966 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    800194e6:	cc91                	beqz	s1,80019502 <load_guest_page_fault_12+0x14a>
    800194e8:	6418                	ld	a4,8(s0)
    800194ea:	47d5                	li	a5,21
    TEST_END();
    800194ec:	0000f597          	auipc	a1,0xf
    800194f0:	83458593          	addi	a1,a1,-1996 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    800194f4:	00f70763          	beq	a4,a5,80019502 <load_guest_page_fault_12+0x14a>
    800194f8:	4481                	li	s1,0
    TEST_END();
    800194fa:	0000f597          	auipc	a1,0xf
    800194fe:	83658593          	addi	a1,a1,-1994 # 80027d30 <__func__.0+0x2d0>
    80019502:	0000f517          	auipc	a0,0xf
    80019506:	8d650513          	addi	a0,a0,-1834 # 80027dd8 <__func__.0+0x378>
    8001950a:	7ec0c0ef          	jal	80025cf6 <printf>
    8001950e:	4511                	li	a0,4
    80019510:	ee6e70ef          	jal	80000bf6 <goto_priv>
    80019514:	f99e70ef          	jal	800014ac <reset_state>
}
    80019518:	60e2                	ld	ra,24(sp)
    8001951a:	6442                	ld	s0,16(sp)
    8001951c:	8526                	mv	a0,s1
    8001951e:	64a2                	ld	s1,8(sp)
    80019520:	6105                	addi	sp,sp,32
    80019522:	8082                	ret

0000000080019524 <load_guest_page_fault_13>:

bool load_guest_page_fault_13(){
    80019524:	1101                	addi	sp,sp,-32

    TEST_START();
    80019526:	0000e597          	auipc	a1,0xe
    8001952a:	9ca58593          	addi	a1,a1,-1590 # 80026ef0 <__func__.24>
    8001952e:	0000f517          	auipc	a0,0xf
    80019532:	81250513          	addi	a0,a0,-2030 # 80027d40 <__func__.0+0x2e0>
bool load_guest_page_fault_13(){
    80019536:	ec06                	sd	ra,24(sp)
    80019538:	e822                	sd	s0,16(sp)
    8001953a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001953c:	7ba0c0ef          	jal	80025cf6 <printf>
    80019540:	4529                	li	a0,10
    80019542:	5be0b0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    80019546:	450d                	li	a0,3
    80019548:	eaee70ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001954c:	894e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019550:	ad2e70ef          	jal	80000822 <hpt_init>
    vspt_init();
    80019554:	95ce70ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80019558:	4511                	li	a0,4
    8001955a:	e9ce70ef          	jal	80000bf6 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    8001955e:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    80019562:	450d                	li	a0,3
    80019564:	e92e70ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80019568:	4509                	li	a0,2
    8001956a:	dace70ef          	jal	80000b16 <set_prev_priv>
    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    8001956e:	0330000f          	fence	rw,rw
    80019572:	00030417          	auipc	s0,0x30
    80019576:	a9e40413          	addi	s0,s0,-1378 # 80049010 <excpt>
    8001957a:	4785                	li	a5,1
    8001957c:	00030717          	auipc	a4,0x30
    80019580:	ac073623          	sd	zero,-1332(a4) # 80049048 <excpt+0x38>
    80019584:	00f41023          	sh	a5,0(s0)
    80019588:	0330000f          	fence	rw,rw
    vaddr = vs_page_base(VSI_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    8001958c:	000807b7          	lui	a5,0x80
    80019590:	1007a073          	csrs	sstatus,a5
    80019594:	400197b7          	lui	a5,0x40019
    80019598:	078a                	slli	a5,a5,0x2
    8001959a:	6407c7f3          	.insn	4, 0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    8001959e:	08200593          	li	a1,130
    800195a2:	00014617          	auipc	a2,0x14
    800195a6:	18e60613          	addi	a2,a2,398 # 8002d730 <__func__.0+0x5cd0>
    800195aa:	0000e517          	auipc	a0,0xe
    800195ae:	7ae50513          	addi	a0,a0,1966 # 80027d58 <__func__.0+0x2f8>
    800195b2:	7440c0ef          	jal	80025cf6 <printf>
    800195b6:	00030797          	auipc	a5,0x30
    800195ba:	a5b7c783          	lbu	a5,-1445(a5) # 80049011 <excpt+0x1>
    800195be:	0000e597          	auipc	a1,0xe
    800195c2:	77258593          	addi	a1,a1,1906 # 80027d30 <__func__.0+0x2d0>
    800195c6:	cf89                	beqz	a5,800195e0 <load_guest_page_fault_13+0xbc>
    800195c8:	6418                	ld	a4,8(s0)
    800195ca:	47d5                	li	a5,21
    800195cc:	0000e597          	auipc	a1,0xe
    800195d0:	75458593          	addi	a1,a1,1876 # 80027d20 <__func__.0+0x2c0>
    800195d4:	00f70663          	beq	a4,a5,800195e0 <load_guest_page_fault_13+0xbc>
    800195d8:	0000e597          	auipc	a1,0xe
    800195dc:	75858593          	addi	a1,a1,1880 # 80027d30 <__func__.0+0x2d0>
    800195e0:	0000e517          	auipc	a0,0xe
    800195e4:	79050513          	addi	a0,a0,1936 # 80027d70 <__func__.0+0x310>
    800195e8:	70e0c0ef          	jal	80025cf6 <printf>
    800195ec:	00030797          	auipc	a5,0x30
    800195f0:	a257c783          	lbu	a5,-1499(a5) # 80049011 <excpt+0x1>
    800195f4:	c789                	beqz	a5,800195fe <load_guest_page_fault_13+0xda>
    800195f6:	6418                	ld	a4,8(s0)
    800195f8:	47d5                	li	a5,21
    800195fa:	00f70c63          	beq	a4,a5,80019612 <load_guest_page_fault_13+0xee>
    800195fe:	0000e517          	auipc	a0,0xe
    80019602:	77a50513          	addi	a0,a0,1914 # 80027d78 <__func__.0+0x318>
    80019606:	6f00c0ef          	jal	80025cf6 <printf>
    8001960a:	02900513          	li	a0,41
    8001960e:	4f20b0ef          	jal	80024b00 <putchar>
    80019612:	4529                	li	a0,10
    80019614:	4ec0b0ef          	jal	80024b00 <putchar>
    80019618:	00030497          	auipc	s1,0x30
    8001961c:	9f94c483          	lbu	s1,-1543(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    80019620:	0000e597          	auipc	a1,0xe
    80019624:	71058593          	addi	a1,a1,1808 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80019628:	cc91                	beqz	s1,80019644 <load_guest_page_fault_13+0x120>
    8001962a:	6418                	ld	a4,8(s0)
    8001962c:	47d5                	li	a5,21
    TEST_END();
    8001962e:	0000e597          	auipc	a1,0xe
    80019632:	6f258593          	addi	a1,a1,1778 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80019636:	00f70763          	beq	a4,a5,80019644 <load_guest_page_fault_13+0x120>
    8001963a:	4481                	li	s1,0
    TEST_END();
    8001963c:	0000e597          	auipc	a1,0xe
    80019640:	6f458593          	addi	a1,a1,1780 # 80027d30 <__func__.0+0x2d0>
    80019644:	0000e517          	auipc	a0,0xe
    80019648:	79450513          	addi	a0,a0,1940 # 80027dd8 <__func__.0+0x378>
    8001964c:	6aa0c0ef          	jal	80025cf6 <printf>
    80019650:	4511                	li	a0,4
    80019652:	da4e70ef          	jal	80000bf6 <goto_priv>
    80019656:	e57e70ef          	jal	800014ac <reset_state>
}
    8001965a:	60e2                	ld	ra,24(sp)
    8001965c:	6442                	ld	s0,16(sp)
    8001965e:	8526                	mv	a0,s1
    80019660:	64a2                	ld	s1,8(sp)
    80019662:	6105                	addi	sp,sp,32
    80019664:	8082                	ret

0000000080019666 <load_guest_page_fault_14>:

bool load_guest_page_fault_14(){
    80019666:	1101                	addi	sp,sp,-32

    TEST_START();
    80019668:	0000e597          	auipc	a1,0xe
    8001966c:	8a858593          	addi	a1,a1,-1880 # 80026f10 <__func__.23>
    80019670:	0000e517          	auipc	a0,0xe
    80019674:	6d050513          	addi	a0,a0,1744 # 80027d40 <__func__.0+0x2e0>
bool load_guest_page_fault_14(){
    80019678:	ec06                	sd	ra,24(sp)
    8001967a:	e822                	sd	s0,16(sp)
    8001967c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001967e:	6780c0ef          	jal	80025cf6 <printf>
    80019682:	4529                	li	a0,10
    80019684:	47c0b0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    80019688:	450d                	li	a0,3
    8001968a:	d6ce70ef          	jal	80000bf6 <goto_priv>
    hpt_init();
    8001968e:	994e70ef          	jal	80000822 <hpt_init>
    hspt_init();
    80019692:	f4fe60ef          	jal	800005e0 <hspt_init>
    vspt_init();
    80019696:	81ae70ef          	jal	800006b0 <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    8001969a:	4511                	li	a0,4
    8001969c:	d5ae70ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800196a0:	000407b7          	lui	a5,0x40
    800196a4:	2007b073          	csrc	vsstatus,a5
    CSRW(CSR_VSATP,(uint64_t)0);
    800196a8:	28005073          	csrwi	vsatp,0
    
    goto_priv(PRIV_HS);
    800196ac:	450d                	li	a0,3
    800196ae:	d48e70ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    800196b2:	4509                	li	a0,2
    800196b4:	c62e70ef          	jal	80000b16 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，执行hlvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800196b8:	0330000f          	fence	rw,rw
    800196bc:	00030417          	auipc	s0,0x30
    800196c0:	95440413          	addi	s0,s0,-1708 # 80049010 <excpt>
    800196c4:	4785                	li	a5,1
    800196c6:	00030717          	auipc	a4,0x30
    800196ca:	98073123          	sd	zero,-1662(a4) # 80049048 <excpt+0x38>
    800196ce:	00f41023          	sh	a5,0(s0)
    800196d2:	0330000f          	fence	rw,rw
    asm volatile(
    800196d6:	001007b7          	lui	a5,0x100
    800196da:	06778793          	addi	a5,a5,103 # 100067 <STACK_SIZE+0x67>
    800196de:	07b2                	slli	a5,a5,0xc
    800196e0:	6007c7f3          	.insn	4, 0x6007c7f3
    vaddr = vs_page_base(VSI_GURWX);


    hlvb(vaddr);
    printf("%d\n",excpt.cause);
    800196e4:	640c                	ld	a1,8(s0)
    800196e6:	0000f517          	auipc	a0,0xf
    800196ea:	1a250513          	addi	a0,a0,418 # 80028888 <__func__.0+0xe28>
    800196ee:	6080c0ef          	jal	80025cf6 <printf>
    printf("%d\n",excpt.triggered);
    800196f2:	00030597          	auipc	a1,0x30
    800196f6:	91f5c583          	lbu	a1,-1761(a1) # 80049011 <excpt+0x1>
    800196fa:	0000f517          	auipc	a0,0xf
    800196fe:	18e50513          	addi	a0,a0,398 # 80028888 <__func__.0+0xe28>
    80019702:	5f40c0ef          	jal	80025cf6 <printf>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LGPF",
    80019706:	08200593          	li	a1,130
    8001970a:	00014617          	auipc	a2,0x14
    8001970e:	2be60613          	addi	a2,a2,702 # 8002d9c8 <__func__.0+0x5f68>
    80019712:	0000e517          	auipc	a0,0xe
    80019716:	64650513          	addi	a0,a0,1606 # 80027d58 <__func__.0+0x2f8>
    8001971a:	5dc0c0ef          	jal	80025cf6 <printf>
    8001971e:	00030797          	auipc	a5,0x30
    80019722:	8f37c783          	lbu	a5,-1805(a5) # 80049011 <excpt+0x1>
    80019726:	0000e597          	auipc	a1,0xe
    8001972a:	60a58593          	addi	a1,a1,1546 # 80027d30 <__func__.0+0x2d0>
    8001972e:	cf89                	beqz	a5,80019748 <load_guest_page_fault_14+0xe2>
    80019730:	6418                	ld	a4,8(s0)
    80019732:	47d5                	li	a5,21
    80019734:	0000e597          	auipc	a1,0xe
    80019738:	5ec58593          	addi	a1,a1,1516 # 80027d20 <__func__.0+0x2c0>
    8001973c:	00f70663          	beq	a4,a5,80019748 <load_guest_page_fault_14+0xe2>
    80019740:	0000e597          	auipc	a1,0xe
    80019744:	5f058593          	addi	a1,a1,1520 # 80027d30 <__func__.0+0x2d0>
    80019748:	0000e517          	auipc	a0,0xe
    8001974c:	62850513          	addi	a0,a0,1576 # 80027d70 <__func__.0+0x310>
    80019750:	5a60c0ef          	jal	80025cf6 <printf>
    80019754:	00030797          	auipc	a5,0x30
    80019758:	8bd7c783          	lbu	a5,-1859(a5) # 80049011 <excpt+0x1>
    8001975c:	c789                	beqz	a5,80019766 <load_guest_page_fault_14+0x100>
    8001975e:	6418                	ld	a4,8(s0)
    80019760:	47d5                	li	a5,21
    80019762:	00f70c63          	beq	a4,a5,8001977a <load_guest_page_fault_14+0x114>
    80019766:	0000e517          	auipc	a0,0xe
    8001976a:	61250513          	addi	a0,a0,1554 # 80027d78 <__func__.0+0x318>
    8001976e:	5880c0ef          	jal	80025cf6 <printf>
    80019772:	02900513          	li	a0,41
    80019776:	38a0b0ef          	jal	80024b00 <putchar>
    8001977a:	4529                	li	a0,10
    8001977c:	3840b0ef          	jal	80024b00 <putchar>
    80019780:	00030497          	auipc	s1,0x30
    80019784:	8914c483          	lbu	s1,-1903(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80019788:	0000e597          	auipc	a1,0xe
    8001978c:	5a858593          	addi	a1,a1,1448 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LGPF",
    80019790:	cc91                	beqz	s1,800197ac <load_guest_page_fault_14+0x146>
    80019792:	6418                	ld	a4,8(s0)
    80019794:	47d5                	li	a5,21
    TEST_END();
    80019796:	0000e597          	auipc	a1,0xe
    8001979a:	58a58593          	addi	a1,a1,1418 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LGPF",
    8001979e:	00f70763          	beq	a4,a5,800197ac <load_guest_page_fault_14+0x146>
    800197a2:	4481                	li	s1,0
    TEST_END();
    800197a4:	0000e597          	auipc	a1,0xe
    800197a8:	58c58593          	addi	a1,a1,1420 # 80027d30 <__func__.0+0x2d0>
    800197ac:	0000e517          	auipc	a0,0xe
    800197b0:	62c50513          	addi	a0,a0,1580 # 80027dd8 <__func__.0+0x378>
    800197b4:	5420c0ef          	jal	80025cf6 <printf>
    800197b8:	4511                	li	a0,4
    800197ba:	c3ce70ef          	jal	80000bf6 <goto_priv>
    800197be:	cefe70ef          	jal	800014ac <reset_state>
}
    800197c2:	60e2                	ld	ra,24(sp)
    800197c4:	6442                	ld	s0,16(sp)
    800197c6:	8526                	mv	a0,s1
    800197c8:	64a2                	ld	s1,8(sp)
    800197ca:	6105                	addi	sp,sp,32
    800197cc:	8082                	ret

00000000800197ce <load_guest_page_fault_15>:

bool load_guest_page_fault_15(){
    800197ce:	1141                	addi	sp,sp,-16

    TEST_START();
    800197d0:	0000d597          	auipc	a1,0xd
    800197d4:	76058593          	addi	a1,a1,1888 # 80026f30 <__func__.22>
    800197d8:	0000e517          	auipc	a0,0xe
    800197dc:	56850513          	addi	a0,a0,1384 # 80027d40 <__func__.0+0x2e0>
bool load_guest_page_fault_15(){
    800197e0:	e406                	sd	ra,8(sp)
    800197e2:	e022                	sd	s0,0(sp)
    TEST_START();
    800197e4:	5120c0ef          	jal	80025cf6 <printf>
    800197e8:	4529                	li	a0,10
    800197ea:	3160b0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    800197ee:	450d                	li	a0,3
    800197f0:	c06e70ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    800197f4:	dede60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800197f8:	82ae70ef          	jal	80000822 <hpt_init>
    vspt_init();
    800197fc:	eb5e60ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80019800:	4511                	li	a0,4
    80019802:	bf4e70ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80019806:	000407b7          	lui	a5,0x40
    8001980a:	2007a073          	csrs	vsstatus,a5
    CSRW(CSR_VSATP,(uint64_t)0);
    8001980e:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    80019812:	450d                	li	a0,3
    80019814:	be2e70ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80019818:	4509                	li	a0,2
    8001981a:	afce70ef          	jal	80000b16 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = vs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    8001981e:	0330000f          	fence	rw,rw
    80019822:	4785                	li	a5,1
    80019824:	00030717          	auipc	a4,0x30
    80019828:	82073223          	sd	zero,-2012(a4) # 80049048 <excpt+0x38>
    8001982c:	0002f717          	auipc	a4,0x2f
    80019830:	7ef71223          	sh	a5,2020(a4) # 80049010 <excpt>
    80019834:	0330000f          	fence	rw,rw
    80019838:	000807b7          	lui	a5,0x80
    8001983c:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001983e:	07b6                	slli	a5,a5,0xd
    80019840:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(vaddr);

    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80019844:	08200593          	li	a1,130
    80019848:	00013617          	auipc	a2,0x13
    8001984c:	75060613          	addi	a2,a2,1872 # 8002cf98 <__func__.0+0x5538>
    80019850:	0000e517          	auipc	a0,0xe
    80019854:	50850513          	addi	a0,a0,1288 # 80027d58 <__func__.0+0x2f8>
    80019858:	49e0c0ef          	jal	80025cf6 <printf>
    8001985c:	0002f797          	auipc	a5,0x2f
    80019860:	7b57c783          	lbu	a5,1973(a5) # 80049011 <excpt+0x1>
    80019864:	0000e597          	auipc	a1,0xe
    80019868:	4bc58593          	addi	a1,a1,1212 # 80027d20 <__func__.0+0x2c0>
    8001986c:	c789                	beqz	a5,80019876 <load_guest_page_fault_15+0xa8>
    8001986e:	0000e597          	auipc	a1,0xe
    80019872:	4c258593          	addi	a1,a1,1218 # 80027d30 <__func__.0+0x2d0>
    80019876:	0000e517          	auipc	a0,0xe
    8001987a:	4fa50513          	addi	a0,a0,1274 # 80027d70 <__func__.0+0x310>
    8001987e:	4780c0ef          	jal	80025cf6 <printf>
    80019882:	0002f797          	auipc	a5,0x2f
    80019886:	78f7c783          	lbu	a5,1935(a5) # 80049011 <excpt+0x1>
    8001988a:	e7a1                	bnez	a5,800198d2 <load_guest_page_fault_15+0x104>
    8001988c:	4529                	li	a0,10
    8001988e:	2720b0ef          	jal	80024b00 <putchar>
    80019892:	0002f797          	auipc	a5,0x2f
    80019896:	77f7c783          	lbu	a5,1919(a5) # 80049011 <excpt+0x1>
    8001989a:	e795                	bnez	a5,800198c6 <load_guest_page_fault_15+0xf8>
    8001989c:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001989e:	0000e597          	auipc	a1,0xe
    800198a2:	48258593          	addi	a1,a1,1154 # 80027d20 <__func__.0+0x2c0>
    800198a6:	0000e517          	auipc	a0,0xe
    800198aa:	53250513          	addi	a0,a0,1330 # 80027dd8 <__func__.0+0x378>
    800198ae:	4480c0ef          	jal	80025cf6 <printf>
    800198b2:	4511                	li	a0,4
    800198b4:	b42e70ef          	jal	80000bf6 <goto_priv>
    800198b8:	bf5e70ef          	jal	800014ac <reset_state>
}
    800198bc:	60a2                	ld	ra,8(sp)
    800198be:	8522                	mv	a0,s0
    800198c0:	6402                	ld	s0,0(sp)
    800198c2:	0141                	addi	sp,sp,16
    800198c4:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    800198c6:	4401                	li	s0,0
    TEST_END();
    800198c8:	0000e597          	auipc	a1,0xe
    800198cc:	46858593          	addi	a1,a1,1128 # 80027d30 <__func__.0+0x2d0>
    800198d0:	bfd9                	j	800198a6 <load_guest_page_fault_15+0xd8>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    800198d2:	0000e517          	auipc	a0,0xe
    800198d6:	4a650513          	addi	a0,a0,1190 # 80027d78 <__func__.0+0x318>
    800198da:	41c0c0ef          	jal	80025cf6 <printf>
    800198de:	02900513          	li	a0,41
    800198e2:	21e0b0ef          	jal	80024b00 <putchar>
    800198e6:	b75d                	j	8001988c <load_guest_page_fault_15+0xbe>

00000000800198e8 <store_guest_page_fault_1>:



bool store_guest_page_fault_1(){
    800198e8:	1101                	addi	sp,sp,-32

    TEST_START();
    800198ea:	0000d597          	auipc	a1,0xd
    800198ee:	66658593          	addi	a1,a1,1638 # 80026f50 <__func__.21>
    800198f2:	0000e517          	auipc	a0,0xe
    800198f6:	44e50513          	addi	a0,a0,1102 # 80027d40 <__func__.0+0x2e0>
bool store_guest_page_fault_1(){
    800198fa:	ec06                	sd	ra,24(sp)
    800198fc:	e822                	sd	s0,16(sp)
    800198fe:	e426                	sd	s1,8(sp)
    TEST_START();
    80019900:	3f60c0ef          	jal	80025cf6 <printf>
    80019904:	4529                	li	a0,10
    80019906:	1fa0b0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    8001990a:	450d                	li	a0,3
    8001990c:	aeae70ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80019910:	cd1e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019914:	f0fe60ef          	jal	80000822 <hpt_init>
    vspt_init();
    80019918:	d99e60ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    8001991c:	450d                	li	a0,3
    8001991e:	ad8e70ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80019922:	4509                	li	a0,2
    80019924:	9f2e70ef          	jal	80000b16 <set_prev_priv>

    //执行store指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80019928:	0330000f          	fence	rw,rw
    8001992c:	0002f417          	auipc	s0,0x2f
    80019930:	6e440413          	addi	s0,s0,1764 # 80049010 <excpt>
    80019934:	4785                	li	a5,1
    80019936:	0002f717          	auipc	a4,0x2f
    8001993a:	70073923          	sd	zero,1810(a4) # 80049048 <excpt+0x38>
    8001993e:	00f41023          	sh	a5,0(s0)
    80019942:	0330000f          	fence	rw,rw
    asm volatile(
    80019946:	37ab77b7          	lui	a5,0x37ab7
    8001994a:	00100737          	lui	a4,0x100
    8001994e:	078a                	slli	a5,a5,0x2
    80019950:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80019954:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80019958:	0732                	slli	a4,a4,0xc
    8001995a:	6ef74073          	.insn	4, 0x6ef74073

    vaddr = hs_page_base(VSRWX_GI);
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.v=0 leads to SGPF",
    8001995e:	08200593          	li	a1,130
    80019962:	00014617          	auipc	a2,0x14
    80019966:	0a660613          	addi	a2,a2,166 # 8002da08 <__func__.0+0x5fa8>
    8001996a:	0000e517          	auipc	a0,0xe
    8001996e:	3ee50513          	addi	a0,a0,1006 # 80027d58 <__func__.0+0x2f8>
    80019972:	3840c0ef          	jal	80025cf6 <printf>
    80019976:	0002f797          	auipc	a5,0x2f
    8001997a:	69b7c783          	lbu	a5,1691(a5) # 80049011 <excpt+0x1>
    8001997e:	0000e597          	auipc	a1,0xe
    80019982:	3b258593          	addi	a1,a1,946 # 80027d30 <__func__.0+0x2d0>
    80019986:	cf89                	beqz	a5,800199a0 <store_guest_page_fault_1+0xb8>
    80019988:	6418                	ld	a4,8(s0)
    8001998a:	47dd                	li	a5,23
    8001998c:	0000e597          	auipc	a1,0xe
    80019990:	39458593          	addi	a1,a1,916 # 80027d20 <__func__.0+0x2c0>
    80019994:	00f70663          	beq	a4,a5,800199a0 <store_guest_page_fault_1+0xb8>
    80019998:	0000e597          	auipc	a1,0xe
    8001999c:	39858593          	addi	a1,a1,920 # 80027d30 <__func__.0+0x2d0>
    800199a0:	0000e517          	auipc	a0,0xe
    800199a4:	3d050513          	addi	a0,a0,976 # 80027d70 <__func__.0+0x310>
    800199a8:	34e0c0ef          	jal	80025cf6 <printf>
    800199ac:	0002f797          	auipc	a5,0x2f
    800199b0:	6657c783          	lbu	a5,1637(a5) # 80049011 <excpt+0x1>
    800199b4:	c789                	beqz	a5,800199be <store_guest_page_fault_1+0xd6>
    800199b6:	6418                	ld	a4,8(s0)
    800199b8:	47dd                	li	a5,23
    800199ba:	00f70c63          	beq	a4,a5,800199d2 <store_guest_page_fault_1+0xea>
    800199be:	0000e517          	auipc	a0,0xe
    800199c2:	3ba50513          	addi	a0,a0,954 # 80027d78 <__func__.0+0x318>
    800199c6:	3300c0ef          	jal	80025cf6 <printf>
    800199ca:	02900513          	li	a0,41
    800199ce:	1320b0ef          	jal	80024b00 <putchar>
    800199d2:	4529                	li	a0,10
    800199d4:	12c0b0ef          	jal	80024b00 <putchar>
    800199d8:	0002f797          	auipc	a5,0x2f
    800199dc:	6397c783          	lbu	a5,1593(a5) # 80049011 <excpt+0x1>
    800199e0:	4481                	li	s1,0
    800199e2:	c789                	beqz	a5,800199ec <store_guest_page_fault_1+0x104>
    800199e4:	6404                	ld	s1,8(s0)
    800199e6:	14a5                	addi	s1,s1,-23
    800199e8:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SGPF
    );


    //执行store相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    800199ec:	0330000f          	fence	rw,rw
    800199f0:	4785                	li	a5,1
    800199f2:	0002f717          	auipc	a4,0x2f
    800199f6:	64073b23          	sd	zero,1622(a4) # 80049048 <excpt+0x38>
    800199fa:	00f41023          	sh	a5,0(s0)
    800199fe:	0330000f          	fence	rw,rw
    asm volatile(
    80019a02:	001007b7          	lui	a5,0x100
    80019a06:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80019a0a:	6731                	lui	a4,0xc
    80019a0c:	07b2                	slli	a5,a5,0xc
    80019a0e:	eef70713          	addi	a4,a4,-273 # beef <_test_table_size+0xbeee>
    80019a12:	66e7c073          	.insn	4, 0x66e7c073
    addr = hs_page_base(VSRWX_GI);

    hsvh(addr,0xbeef);   
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80019a16:	08200593          	li	a1,130
    80019a1a:	00014617          	auipc	a2,0x14
    80019a1e:	03e60613          	addi	a2,a2,62 # 8002da58 <__func__.0+0x5ff8>
    80019a22:	0000e517          	auipc	a0,0xe
    80019a26:	33650513          	addi	a0,a0,822 # 80027d58 <__func__.0+0x2f8>
    80019a2a:	2cc0c0ef          	jal	80025cf6 <printf>
    80019a2e:	0002f797          	auipc	a5,0x2f
    80019a32:	5e37c783          	lbu	a5,1507(a5) # 80049011 <excpt+0x1>
    80019a36:	0000e597          	auipc	a1,0xe
    80019a3a:	2fa58593          	addi	a1,a1,762 # 80027d30 <__func__.0+0x2d0>
    80019a3e:	cf89                	beqz	a5,80019a58 <store_guest_page_fault_1+0x170>
    80019a40:	6418                	ld	a4,8(s0)
    80019a42:	47dd                	li	a5,23
    80019a44:	0000e597          	auipc	a1,0xe
    80019a48:	2dc58593          	addi	a1,a1,732 # 80027d20 <__func__.0+0x2c0>
    80019a4c:	00f70663          	beq	a4,a5,80019a58 <store_guest_page_fault_1+0x170>
    80019a50:	0000e597          	auipc	a1,0xe
    80019a54:	2e058593          	addi	a1,a1,736 # 80027d30 <__func__.0+0x2d0>
    80019a58:	0000e517          	auipc	a0,0xe
    80019a5c:	31850513          	addi	a0,a0,792 # 80027d70 <__func__.0+0x310>
    80019a60:	2960c0ef          	jal	80025cf6 <printf>
    80019a64:	0002f797          	auipc	a5,0x2f
    80019a68:	5ad7c783          	lbu	a5,1453(a5) # 80049011 <excpt+0x1>
    80019a6c:	c789                	beqz	a5,80019a76 <store_guest_page_fault_1+0x18e>
    80019a6e:	6418                	ld	a4,8(s0)
    80019a70:	47dd                	li	a5,23
    80019a72:	00f70c63          	beq	a4,a5,80019a8a <store_guest_page_fault_1+0x1a2>
    80019a76:	0000e517          	auipc	a0,0xe
    80019a7a:	30250513          	addi	a0,a0,770 # 80027d78 <__func__.0+0x318>
    80019a7e:	2780c0ef          	jal	80025cf6 <printf>
    80019a82:	02900513          	li	a0,41
    80019a86:	07a0b0ef          	jal	80024b00 <putchar>
    80019a8a:	4529                	li	a0,10
    80019a8c:	0740b0ef          	jal	80024b00 <putchar>
    80019a90:	c095                	beqz	s1,80019ab4 <store_guest_page_fault_1+0x1cc>
    80019a92:	0002f497          	auipc	s1,0x2f
    80019a96:	57f4c483          	lbu	s1,1407(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80019a9a:	0000e597          	auipc	a1,0xe
    80019a9e:	29658593          	addi	a1,a1,662 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80019aa2:	cc91                	beqz	s1,80019abe <store_guest_page_fault_1+0x1d6>
    80019aa4:	6418                	ld	a4,8(s0)
    80019aa6:	47dd                	li	a5,23
    TEST_END();
    80019aa8:	0000e597          	auipc	a1,0xe
    80019aac:	27858593          	addi	a1,a1,632 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80019ab0:	00f70763          	beq	a4,a5,80019abe <store_guest_page_fault_1+0x1d6>
    80019ab4:	4481                	li	s1,0
    TEST_END();
    80019ab6:	0000e597          	auipc	a1,0xe
    80019aba:	27a58593          	addi	a1,a1,634 # 80027d30 <__func__.0+0x2d0>
    80019abe:	0000e517          	auipc	a0,0xe
    80019ac2:	31a50513          	addi	a0,a0,794 # 80027dd8 <__func__.0+0x378>
    80019ac6:	2300c0ef          	jal	80025cf6 <printf>
    80019aca:	4511                	li	a0,4
    80019acc:	92ae70ef          	jal	80000bf6 <goto_priv>
    80019ad0:	9dde70ef          	jal	800014ac <reset_state>

}
    80019ad4:	60e2                	ld	ra,24(sp)
    80019ad6:	6442                	ld	s0,16(sp)
    80019ad8:	8526                	mv	a0,s1
    80019ada:	64a2                	ld	s1,8(sp)
    80019adc:	6105                	addi	sp,sp,32
    80019ade:	8082                	ret

0000000080019ae0 <store_guest_page_fault_2>:

bool store_guest_page_fault_2(){
    80019ae0:	1101                	addi	sp,sp,-32

    TEST_START();
    80019ae2:	0000d597          	auipc	a1,0xd
    80019ae6:	48e58593          	addi	a1,a1,1166 # 80026f70 <__func__.20>
    80019aea:	0000e517          	auipc	a0,0xe
    80019aee:	25650513          	addi	a0,a0,598 # 80027d40 <__func__.0+0x2e0>
bool store_guest_page_fault_2(){
    80019af2:	ec06                	sd	ra,24(sp)
    80019af4:	e822                	sd	s0,16(sp)
    80019af6:	e426                	sd	s1,8(sp)
    TEST_START();
    80019af8:	1fe0c0ef          	jal	80025cf6 <printf>
    80019afc:	4529                	li	a0,10
    80019afe:	0020b0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    80019b02:	450d                	li	a0,3
    80019b04:	8f2e70ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80019b08:	ad9e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019b0c:	d17e60ef          	jal	80000822 <hpt_init>
    vspt_init();
    80019b10:	ba1e60ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80019b14:	450d                	li	a0,3
    80019b16:	8e0e70ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80019b1a:	4509                	li	a0,2
    80019b1c:	ffbe60ef          	jal	80000b16 <set_prev_priv>

    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    80019b20:	0330000f          	fence	rw,rw
    80019b24:	0002f417          	auipc	s0,0x2f
    80019b28:	4ec40413          	addi	s0,s0,1260 # 80049010 <excpt>
    80019b2c:	4785                	li	a5,1
    80019b2e:	0002f717          	auipc	a4,0x2f
    80019b32:	50073d23          	sd	zero,1306(a4) # 80049048 <excpt+0x38>
    80019b36:	00f41023          	sh	a5,0(s0)
    80019b3a:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80019b3e:	000807b7          	lui	a5,0x80
    80019b42:	1007b073          	csrc	sstatus,a5
    asm volatile(
    80019b46:	37ab77b7          	lui	a5,0x37ab7
    80019b4a:	00100737          	lui	a4,0x100
    80019b4e:	078a                	slli	a5,a5,0x2
    80019b50:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80019b54:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80019b58:	0732                	slli	a4,a4,0xc
    80019b5a:	6ef74073          	.insn	4, 0x6ef74073
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80019b5e:	08200593          	li	a1,130
    80019b62:	00014617          	auipc	a2,0x14
    80019b66:	f5660613          	addi	a2,a2,-170 # 8002dab8 <__func__.0+0x6058>
    80019b6a:	0000e517          	auipc	a0,0xe
    80019b6e:	1ee50513          	addi	a0,a0,494 # 80027d58 <__func__.0+0x2f8>
    80019b72:	1840c0ef          	jal	80025cf6 <printf>
    80019b76:	0002f797          	auipc	a5,0x2f
    80019b7a:	49b7c783          	lbu	a5,1179(a5) # 80049011 <excpt+0x1>
    80019b7e:	0000e597          	auipc	a1,0xe
    80019b82:	1b258593          	addi	a1,a1,434 # 80027d30 <__func__.0+0x2d0>
    80019b86:	cf89                	beqz	a5,80019ba0 <store_guest_page_fault_2+0xc0>
    80019b88:	6418                	ld	a4,8(s0)
    80019b8a:	47dd                	li	a5,23
    80019b8c:	0000e597          	auipc	a1,0xe
    80019b90:	19458593          	addi	a1,a1,404 # 80027d20 <__func__.0+0x2c0>
    80019b94:	00f70663          	beq	a4,a5,80019ba0 <store_guest_page_fault_2+0xc0>
    80019b98:	0000e597          	auipc	a1,0xe
    80019b9c:	19858593          	addi	a1,a1,408 # 80027d30 <__func__.0+0x2d0>
    80019ba0:	0000e517          	auipc	a0,0xe
    80019ba4:	1d050513          	addi	a0,a0,464 # 80027d70 <__func__.0+0x310>
    80019ba8:	14e0c0ef          	jal	80025cf6 <printf>
    80019bac:	0002f797          	auipc	a5,0x2f
    80019bb0:	4657c783          	lbu	a5,1125(a5) # 80049011 <excpt+0x1>
    80019bb4:	c789                	beqz	a5,80019bbe <store_guest_page_fault_2+0xde>
    80019bb6:	6418                	ld	a4,8(s0)
    80019bb8:	47dd                	li	a5,23
    80019bba:	00f70c63          	beq	a4,a5,80019bd2 <store_guest_page_fault_2+0xf2>
    80019bbe:	0000e517          	auipc	a0,0xe
    80019bc2:	1ba50513          	addi	a0,a0,442 # 80027d78 <__func__.0+0x318>
    80019bc6:	1300c0ef          	jal	80025cf6 <printf>
    80019bca:	02900513          	li	a0,41
    80019bce:	7330a0ef          	jal	80024b00 <putchar>
    80019bd2:	4529                	li	a0,10
    80019bd4:	72d0a0ef          	jal	80024b00 <putchar>
    80019bd8:	0002f497          	auipc	s1,0x2f
    80019bdc:	4394c483          	lbu	s1,1081(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80019be0:	0000e597          	auipc	a1,0xe
    80019be4:	15058593          	addi	a1,a1,336 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80019be8:	cc91                	beqz	s1,80019c04 <store_guest_page_fault_2+0x124>
    80019bea:	6418                	ld	a4,8(s0)
    80019bec:	47dd                	li	a5,23
    TEST_END();
    80019bee:	0000e597          	auipc	a1,0xe
    80019bf2:	13258593          	addi	a1,a1,306 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80019bf6:	00f70763          	beq	a4,a5,80019c04 <store_guest_page_fault_2+0x124>
    80019bfa:	4481                	li	s1,0
    TEST_END();
    80019bfc:	0000e597          	auipc	a1,0xe
    80019c00:	13458593          	addi	a1,a1,308 # 80027d30 <__func__.0+0x2d0>
    80019c04:	0000e517          	auipc	a0,0xe
    80019c08:	1d450513          	addi	a0,a0,468 # 80027dd8 <__func__.0+0x378>
    80019c0c:	0ea0c0ef          	jal	80025cf6 <printf>
    80019c10:	4511                	li	a0,4
    80019c12:	fe5e60ef          	jal	80000bf6 <goto_priv>
    80019c16:	897e70ef          	jal	800014ac <reset_state>
}
    80019c1a:	60e2                	ld	ra,24(sp)
    80019c1c:	6442                	ld	s0,16(sp)
    80019c1e:	8526                	mv	a0,s1
    80019c20:	64a2                	ld	s1,8(sp)
    80019c22:	6105                	addi	sp,sp,32
    80019c24:	8082                	ret

0000000080019c26 <store_guest_page_fault_3>:

bool store_guest_page_fault_3(){
    80019c26:	1101                	addi	sp,sp,-32

    TEST_START();
    80019c28:	0000d597          	auipc	a1,0xd
    80019c2c:	36858593          	addi	a1,a1,872 # 80026f90 <__func__.19>
    80019c30:	0000e517          	auipc	a0,0xe
    80019c34:	11050513          	addi	a0,a0,272 # 80027d40 <__func__.0+0x2e0>
bool store_guest_page_fault_3(){
    80019c38:	ec06                	sd	ra,24(sp)
    80019c3a:	e822                	sd	s0,16(sp)
    80019c3c:	e426                	sd	s1,8(sp)
    TEST_START();
    80019c3e:	0b80c0ef          	jal	80025cf6 <printf>
    80019c42:	4529                	li	a0,10
    80019c44:	6bd0a0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    80019c48:	450d                	li	a0,3
    80019c4a:	fade60ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80019c4e:	993e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019c52:	bd1e60ef          	jal	80000822 <hpt_init>
    vspt_init();
    80019c56:	a5be60ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80019c5a:	450d                	li	a0,3
    80019c5c:	f9be60ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80019c60:	4509                	li	a0,2
    80019c62:	eb5e60ef          	jal	80000b16 <set_prev_priv>


    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80019c66:	0330000f          	fence	rw,rw
    80019c6a:	0002f497          	auipc	s1,0x2f
    80019c6e:	3a648493          	addi	s1,s1,934 # 80049010 <excpt>
    80019c72:	4785                	li	a5,1
    80019c74:	0002f717          	auipc	a4,0x2f
    80019c78:	3c073a23          	sd	zero,980(a4) # 80049048 <excpt+0x38>
    80019c7c:	00f49023          	sh	a5,0(s1)
    80019c80:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80019c84:	000807b7          	lui	a5,0x80
    80019c88:	1007a073          	csrs	sstatus,a5
    80019c8c:	37ab77b7          	lui	a5,0x37ab7
    80019c90:	00100737          	lui	a4,0x100
    80019c94:	078a                	slli	a5,a5,0x2
    80019c96:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80019c9a:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80019c9e:	0732                	slli	a4,a4,0xc
    80019ca0:	6ef74073          	.insn	4, 0x6ef74073
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80019ca4:	08200593          	li	a1,130
    80019ca8:	00014617          	auipc	a2,0x14
    80019cac:	e7060613          	addi	a2,a2,-400 # 8002db18 <__func__.0+0x60b8>
    80019cb0:	0000e517          	auipc	a0,0xe
    80019cb4:	0a850513          	addi	a0,a0,168 # 80027d58 <__func__.0+0x2f8>
    80019cb8:	03e0c0ef          	jal	80025cf6 <printf>
    80019cbc:	0002f797          	auipc	a5,0x2f
    80019cc0:	3557c783          	lbu	a5,853(a5) # 80049011 <excpt+0x1>
    80019cc4:	0000e597          	auipc	a1,0xe
    80019cc8:	06c58593          	addi	a1,a1,108 # 80027d30 <__func__.0+0x2d0>
    80019ccc:	cf89                	beqz	a5,80019ce6 <store_guest_page_fault_3+0xc0>
    80019cce:	6498                	ld	a4,8(s1)
    80019cd0:	47dd                	li	a5,23
    80019cd2:	0000e597          	auipc	a1,0xe
    80019cd6:	04e58593          	addi	a1,a1,78 # 80027d20 <__func__.0+0x2c0>
    80019cda:	00f70663          	beq	a4,a5,80019ce6 <store_guest_page_fault_3+0xc0>
    80019cde:	0000e597          	auipc	a1,0xe
    80019ce2:	05258593          	addi	a1,a1,82 # 80027d30 <__func__.0+0x2d0>
    80019ce6:	0000e517          	auipc	a0,0xe
    80019cea:	08a50513          	addi	a0,a0,138 # 80027d70 <__func__.0+0x310>
    80019cee:	0080c0ef          	jal	80025cf6 <printf>
    80019cf2:	0002f797          	auipc	a5,0x2f
    80019cf6:	31f7c783          	lbu	a5,799(a5) # 80049011 <excpt+0x1>
    80019cfa:	c789                	beqz	a5,80019d04 <store_guest_page_fault_3+0xde>
    80019cfc:	6498                	ld	a4,8(s1)
    80019cfe:	47dd                	li	a5,23
    80019d00:	00f70c63          	beq	a4,a5,80019d18 <store_guest_page_fault_3+0xf2>
    80019d04:	0000e517          	auipc	a0,0xe
    80019d08:	07450513          	addi	a0,a0,116 # 80027d78 <__func__.0+0x318>
    80019d0c:	7eb0b0ef          	jal	80025cf6 <printf>
    80019d10:	02900513          	li	a0,41
    80019d14:	5ed0a0ef          	jal	80024b00 <putchar>
    80019d18:	4529                	li	a0,10
    80019d1a:	5e70a0ef          	jal	80024b00 <putchar>
    80019d1e:	0002f417          	auipc	s0,0x2f
    80019d22:	2f344403          	lbu	s0,755(s0) # 80049011 <excpt+0x1>
    80019d26:	c409                	beqz	s0,80019d30 <store_guest_page_fault_3+0x10a>
    80019d28:	6498                	ld	a4,8(s1)
    80019d2a:	47dd                	li	a5,23
    80019d2c:	02f70c63          	beq	a4,a5,80019d64 <store_guest_page_fault_3+0x13e>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80019d30:	000807b7          	lui	a5,0x80
    80019d34:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80019d38:	4401                	li	s0,0

    TEST_END();
    80019d3a:	0000e597          	auipc	a1,0xe
    80019d3e:	ff658593          	addi	a1,a1,-10 # 80027d30 <__func__.0+0x2d0>
    80019d42:	0000e517          	auipc	a0,0xe
    80019d46:	09650513          	addi	a0,a0,150 # 80027dd8 <__func__.0+0x378>
    80019d4a:	7ad0b0ef          	jal	80025cf6 <printf>
    80019d4e:	4511                	li	a0,4
    80019d50:	ea7e60ef          	jal	80000bf6 <goto_priv>
    80019d54:	f58e70ef          	jal	800014ac <reset_state>
}
    80019d58:	60e2                	ld	ra,24(sp)
    80019d5a:	8522                	mv	a0,s0
    80019d5c:	6442                	ld	s0,16(sp)
    80019d5e:	64a2                	ld	s1,8(sp)
    80019d60:	6105                	addi	sp,sp,32
    80019d62:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80019d64:	000807b7          	lui	a5,0x80
    80019d68:	1007b073          	csrc	sstatus,a5
    TEST_END();
    80019d6c:	0000e597          	auipc	a1,0xe
    80019d70:	fb458593          	addi	a1,a1,-76 # 80027d20 <__func__.0+0x2c0>
    80019d74:	b7f9                	j	80019d42 <store_guest_page_fault_3+0x11c>

0000000080019d76 <store_guest_page_fault_4>:

bool store_guest_page_fault_4(){
    80019d76:	1101                	addi	sp,sp,-32

    TEST_START();
    80019d78:	0000d597          	auipc	a1,0xd
    80019d7c:	23858593          	addi	a1,a1,568 # 80026fb0 <__func__.18>
    80019d80:	0000e517          	auipc	a0,0xe
    80019d84:	fc050513          	addi	a0,a0,-64 # 80027d40 <__func__.0+0x2e0>
bool store_guest_page_fault_4(){
    80019d88:	ec06                	sd	ra,24(sp)
    80019d8a:	e822                	sd	s0,16(sp)
    80019d8c:	e426                	sd	s1,8(sp)
    TEST_START();
    80019d8e:	7690b0ef          	jal	80025cf6 <printf>
    80019d92:	4529                	li	a0,10
    80019d94:	56d0a0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    80019d98:	450d                	li	a0,3
    80019d9a:	e5de60ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80019d9e:	843e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019da2:	a81e60ef          	jal	80000822 <hpt_init>
    vspt_init();
    80019da6:	90be60ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80019daa:	4511                	li	a0,4
    80019dac:	e4be60ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80019db0:	000407b7          	lui	a5,0x40
    80019db4:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    80019db8:	450d                	li	a0,3
    80019dba:	e3de60ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80019dbe:	4509                	li	a0,2
    80019dc0:	d57e60ef          	jal	80000b16 <set_prev_priv>

    //执行hsvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80019dc4:	0330000f          	fence	rw,rw
    80019dc8:	0002f417          	auipc	s0,0x2f
    80019dcc:	24840413          	addi	s0,s0,584 # 80049010 <excpt>
    80019dd0:	4785                	li	a5,1
    80019dd2:	0002f717          	auipc	a4,0x2f
    80019dd6:	26073b23          	sd	zero,630(a4) # 80049048 <excpt+0x38>
    80019dda:	00f41023          	sh	a5,0(s0)
    80019dde:	0330000f          	fence	rw,rw
    80019de2:	37ab77b7          	lui	a5,0x37ab7
    80019de6:	00080737          	lui	a4,0x80
    80019dea:	078a                	slli	a5,a5,0x2
    80019dec:	076d                	addi	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    80019dee:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80019df2:	0736                	slli	a4,a4,0xd
    80019df4:	6ef74073          	.insn	4, 0x6ef74073
    vaddr = hs_page_base(VSURWX_GUX);


    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    80019df8:	08200593          	li	a1,130
    80019dfc:	00014617          	auipc	a2,0x14
    80019e00:	d8c60613          	addi	a2,a2,-628 # 8002db88 <__func__.0+0x6128>
    80019e04:	0000e517          	auipc	a0,0xe
    80019e08:	f5450513          	addi	a0,a0,-172 # 80027d58 <__func__.0+0x2f8>
    80019e0c:	6eb0b0ef          	jal	80025cf6 <printf>
    80019e10:	0002f797          	auipc	a5,0x2f
    80019e14:	2017c783          	lbu	a5,513(a5) # 80049011 <excpt+0x1>
    80019e18:	0000e597          	auipc	a1,0xe
    80019e1c:	f1858593          	addi	a1,a1,-232 # 80027d30 <__func__.0+0x2d0>
    80019e20:	cf89                	beqz	a5,80019e3a <store_guest_page_fault_4+0xc4>
    80019e22:	6418                	ld	a4,8(s0)
    80019e24:	47bd                	li	a5,15
    80019e26:	0000e597          	auipc	a1,0xe
    80019e2a:	efa58593          	addi	a1,a1,-262 # 80027d20 <__func__.0+0x2c0>
    80019e2e:	00f70663          	beq	a4,a5,80019e3a <store_guest_page_fault_4+0xc4>
    80019e32:	0000e597          	auipc	a1,0xe
    80019e36:	efe58593          	addi	a1,a1,-258 # 80027d30 <__func__.0+0x2d0>
    80019e3a:	0000e517          	auipc	a0,0xe
    80019e3e:	f3650513          	addi	a0,a0,-202 # 80027d70 <__func__.0+0x310>
    80019e42:	6b50b0ef          	jal	80025cf6 <printf>
    80019e46:	0002f797          	auipc	a5,0x2f
    80019e4a:	1cb7c783          	lbu	a5,459(a5) # 80049011 <excpt+0x1>
    80019e4e:	c789                	beqz	a5,80019e58 <store_guest_page_fault_4+0xe2>
    80019e50:	6418                	ld	a4,8(s0)
    80019e52:	47bd                	li	a5,15
    80019e54:	00f70c63          	beq	a4,a5,80019e6c <store_guest_page_fault_4+0xf6>
    80019e58:	0000e517          	auipc	a0,0xe
    80019e5c:	f2050513          	addi	a0,a0,-224 # 80027d78 <__func__.0+0x318>
    80019e60:	6970b0ef          	jal	80025cf6 <printf>
    80019e64:	02900513          	li	a0,41
    80019e68:	4990a0ef          	jal	80024b00 <putchar>
    80019e6c:	4529                	li	a0,10
    80019e6e:	4930a0ef          	jal	80024b00 <putchar>
    80019e72:	0002f497          	auipc	s1,0x2f
    80019e76:	19f4c483          	lbu	s1,415(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80019e7a:	0000e597          	auipc	a1,0xe
    80019e7e:	eb658593          	addi	a1,a1,-330 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    80019e82:	cc91                	beqz	s1,80019e9e <store_guest_page_fault_4+0x128>
    80019e84:	6418                	ld	a4,8(s0)
    80019e86:	47bd                	li	a5,15
    TEST_END();
    80019e88:	0000e597          	auipc	a1,0xe
    80019e8c:	e9858593          	addi	a1,a1,-360 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    80019e90:	00f70763          	beq	a4,a5,80019e9e <store_guest_page_fault_4+0x128>
    80019e94:	4481                	li	s1,0
    TEST_END();
    80019e96:	0000e597          	auipc	a1,0xe
    80019e9a:	e9a58593          	addi	a1,a1,-358 # 80027d30 <__func__.0+0x2d0>
    80019e9e:	0000e517          	auipc	a0,0xe
    80019ea2:	f3a50513          	addi	a0,a0,-198 # 80027dd8 <__func__.0+0x378>
    80019ea6:	6510b0ef          	jal	80025cf6 <printf>
    80019eaa:	4511                	li	a0,4
    80019eac:	d4be60ef          	jal	80000bf6 <goto_priv>
    80019eb0:	dfce70ef          	jal	800014ac <reset_state>
}
    80019eb4:	60e2                	ld	ra,24(sp)
    80019eb6:	6442                	ld	s0,16(sp)
    80019eb8:	8526                	mv	a0,s1
    80019eba:	64a2                	ld	s1,8(sp)
    80019ebc:	6105                	addi	sp,sp,32
    80019ebe:	8082                	ret

0000000080019ec0 <store_guest_page_fault_5>:

bool store_guest_page_fault_5(){
    80019ec0:	1141                	addi	sp,sp,-16

    TEST_START();
    80019ec2:	0000d597          	auipc	a1,0xd
    80019ec6:	10e58593          	addi	a1,a1,270 # 80026fd0 <__func__.17>
    80019eca:	0000e517          	auipc	a0,0xe
    80019ece:	e7650513          	addi	a0,a0,-394 # 80027d40 <__func__.0+0x2e0>
bool store_guest_page_fault_5(){
    80019ed2:	e406                	sd	ra,8(sp)
    80019ed4:	e022                	sd	s0,0(sp)
    TEST_START();
    80019ed6:	6210b0ef          	jal	80025cf6 <printf>
    80019eda:	4529                	li	a0,10
    80019edc:	4250a0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    80019ee0:	450d                	li	a0,3
    80019ee2:	d15e60ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80019ee6:	efae60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019eea:	939e60ef          	jal	80000822 <hpt_init>
    vspt_init();
    80019eee:	fc2e60ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    80019ef2:	4511                	li	a0,4
    80019ef4:	d03e60ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80019ef8:	000407b7          	lui	a5,0x40
    80019efc:	2007a073          	csrs	vsstatus,a5

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80019f00:	450d                	li	a0,3
    80019f02:	cf5e60ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80019f06:	4509                	li	a0,2
    80019f08:	c0fe60ef          	jal	80000b16 <set_prev_priv>

    //执行hsvd指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80019f0c:	0330000f          	fence	rw,rw
    80019f10:	4785                	li	a5,1
    80019f12:	0002f717          	auipc	a4,0x2f
    80019f16:	12073b23          	sd	zero,310(a4) # 80049048 <excpt+0x38>
    80019f1a:	0002f717          	auipc	a4,0x2f
    80019f1e:	0ef71b23          	sh	a5,246(a4) # 80049010 <excpt>
    80019f22:	0330000f          	fence	rw,rw
    asm volatile(
    80019f26:	37ab77b7          	lui	a5,0x37ab7
    80019f2a:	00080737          	lui	a4,0x80
    80019f2e:	078a                	slli	a5,a5,0x2
    80019f30:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80019f32:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80019f36:	0736                	slli	a4,a4,0xd
    80019f38:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    80019f3c:	08200593          	li	a1,130
    80019f40:	00014617          	auipc	a2,0x14
    80019f44:	c8860613          	addi	a2,a2,-888 # 8002dbc8 <__func__.0+0x6168>
    80019f48:	0000e517          	auipc	a0,0xe
    80019f4c:	e1050513          	addi	a0,a0,-496 # 80027d58 <__func__.0+0x2f8>
    80019f50:	5a70b0ef          	jal	80025cf6 <printf>
    80019f54:	0002f797          	auipc	a5,0x2f
    80019f58:	0bd7c783          	lbu	a5,189(a5) # 80049011 <excpt+0x1>
    80019f5c:	0000e597          	auipc	a1,0xe
    80019f60:	dc458593          	addi	a1,a1,-572 # 80027d20 <__func__.0+0x2c0>
    80019f64:	c789                	beqz	a5,80019f6e <store_guest_page_fault_5+0xae>
    80019f66:	0000e597          	auipc	a1,0xe
    80019f6a:	dca58593          	addi	a1,a1,-566 # 80027d30 <__func__.0+0x2d0>
    80019f6e:	0000e517          	auipc	a0,0xe
    80019f72:	e0250513          	addi	a0,a0,-510 # 80027d70 <__func__.0+0x310>
    80019f76:	5810b0ef          	jal	80025cf6 <printf>
    80019f7a:	0002f797          	auipc	a5,0x2f
    80019f7e:	0977c783          	lbu	a5,151(a5) # 80049011 <excpt+0x1>
    80019f82:	e7a1                	bnez	a5,80019fca <store_guest_page_fault_5+0x10a>
    80019f84:	4529                	li	a0,10
    80019f86:	37b0a0ef          	jal	80024b00 <putchar>
    80019f8a:	0002f797          	auipc	a5,0x2f
    80019f8e:	0877c783          	lbu	a5,135(a5) # 80049011 <excpt+0x1>
    80019f92:	e795                	bnez	a5,80019fbe <store_guest_page_fault_5+0xfe>
    80019f94:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80019f96:	0000e597          	auipc	a1,0xe
    80019f9a:	d8a58593          	addi	a1,a1,-630 # 80027d20 <__func__.0+0x2c0>
    80019f9e:	0000e517          	auipc	a0,0xe
    80019fa2:	e3a50513          	addi	a0,a0,-454 # 80027dd8 <__func__.0+0x378>
    80019fa6:	5510b0ef          	jal	80025cf6 <printf>
    80019faa:	4511                	li	a0,4
    80019fac:	c4be60ef          	jal	80000bf6 <goto_priv>
    80019fb0:	cfce70ef          	jal	800014ac <reset_state>
}
    80019fb4:	60a2                	ld	ra,8(sp)
    80019fb6:	8522                	mv	a0,s0
    80019fb8:	6402                	ld	s0,0(sp)
    80019fba:	0141                	addi	sp,sp,16
    80019fbc:	8082                	ret
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    80019fbe:	4401                	li	s0,0
    TEST_END();
    80019fc0:	0000e597          	auipc	a1,0xe
    80019fc4:	d7058593          	addi	a1,a1,-656 # 80027d30 <__func__.0+0x2d0>
    80019fc8:	bfd9                	j	80019f9e <store_guest_page_fault_5+0xde>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    80019fca:	0000e517          	auipc	a0,0xe
    80019fce:	dae50513          	addi	a0,a0,-594 # 80027d78 <__func__.0+0x318>
    80019fd2:	5250b0ef          	jal	80025cf6 <printf>
    80019fd6:	02900513          	li	a0,41
    80019fda:	3270a0ef          	jal	80024b00 <putchar>
    80019fde:	b75d                	j	80019f84 <store_guest_page_fault_5+0xc4>

0000000080019fe0 <store_guest_page_fault_6>:

bool store_guest_page_fault_6(){
    80019fe0:	1101                	addi	sp,sp,-32

    TEST_START();
    80019fe2:	0000d597          	auipc	a1,0xd
    80019fe6:	00e58593          	addi	a1,a1,14 # 80026ff0 <__func__.16>
    80019fea:	0000e517          	auipc	a0,0xe
    80019fee:	d5650513          	addi	a0,a0,-682 # 80027d40 <__func__.0+0x2e0>
bool store_guest_page_fault_6(){
    80019ff2:	ec06                	sd	ra,24(sp)
    80019ff4:	e822                	sd	s0,16(sp)
    80019ff6:	e426                	sd	s1,8(sp)
    TEST_START();
    80019ff8:	4ff0b0ef          	jal	80025cf6 <printf>
    80019ffc:	4529                	li	a0,10
    80019ffe:	3030a0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    8001a002:	450d                	li	a0,3
    8001a004:	bf3e60ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001a008:	dd8e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001a00c:	817e60ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001a010:	ea0e60ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    8001a014:	4509                	li	a0,2
    8001a016:	be1e60ef          	jal	80000bf6 <goto_priv>

    //执行store指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    8001a01a:	0330000f          	fence	rw,rw
    8001a01e:	0002f417          	auipc	s0,0x2f
    8001a022:	ff240413          	addi	s0,s0,-14 # 80049010 <excpt>
    8001a026:	4785                	li	a5,1
    8001a028:	0002f717          	auipc	a4,0x2f
    8001a02c:	02073023          	sd	zero,32(a4) # 80049048 <excpt+0x38>
    8001a030:	00f41023          	sh	a5,0(s0)
    8001a034:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8001a038:	37ab77b7          	lui	a5,0x37ab7
    8001a03c:	00100737          	lui	a4,0x100
    8001a040:	078a                	slli	a5,a5,0x2
    8001a042:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    8001a046:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001a04a:	0732                	slli	a4,a4,0xc
    8001a04c:	00f73023          	sd	a5,0(a4)

    vaddr = hs_page_base(VSRWX_GI);
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.v=0 leads to SGPF",
    8001a050:	08200593          	li	a1,130
    8001a054:	00014617          	auipc	a2,0x14
    8001a058:	bac60613          	addi	a2,a2,-1108 # 8002dc00 <__func__.0+0x61a0>
    8001a05c:	0000e517          	auipc	a0,0xe
    8001a060:	cfc50513          	addi	a0,a0,-772 # 80027d58 <__func__.0+0x2f8>
    8001a064:	4930b0ef          	jal	80025cf6 <printf>
    8001a068:	0002f797          	auipc	a5,0x2f
    8001a06c:	fa97c783          	lbu	a5,-87(a5) # 80049011 <excpt+0x1>
    8001a070:	0000e597          	auipc	a1,0xe
    8001a074:	cc058593          	addi	a1,a1,-832 # 80027d30 <__func__.0+0x2d0>
    8001a078:	cf89                	beqz	a5,8001a092 <store_guest_page_fault_6+0xb2>
    8001a07a:	6418                	ld	a4,8(s0)
    8001a07c:	47dd                	li	a5,23
    8001a07e:	0000e597          	auipc	a1,0xe
    8001a082:	ca258593          	addi	a1,a1,-862 # 80027d20 <__func__.0+0x2c0>
    8001a086:	00f70663          	beq	a4,a5,8001a092 <store_guest_page_fault_6+0xb2>
    8001a08a:	0000e597          	auipc	a1,0xe
    8001a08e:	ca658593          	addi	a1,a1,-858 # 80027d30 <__func__.0+0x2d0>
    8001a092:	0000e517          	auipc	a0,0xe
    8001a096:	cde50513          	addi	a0,a0,-802 # 80027d70 <__func__.0+0x310>
    8001a09a:	45d0b0ef          	jal	80025cf6 <printf>
    8001a09e:	0002f797          	auipc	a5,0x2f
    8001a0a2:	f737c783          	lbu	a5,-141(a5) # 80049011 <excpt+0x1>
    8001a0a6:	c789                	beqz	a5,8001a0b0 <store_guest_page_fault_6+0xd0>
    8001a0a8:	6418                	ld	a4,8(s0)
    8001a0aa:	47dd                	li	a5,23
    8001a0ac:	00f70c63          	beq	a4,a5,8001a0c4 <store_guest_page_fault_6+0xe4>
    8001a0b0:	0000e517          	auipc	a0,0xe
    8001a0b4:	cc850513          	addi	a0,a0,-824 # 80027d78 <__func__.0+0x318>
    8001a0b8:	43f0b0ef          	jal	80025cf6 <printf>
    8001a0bc:	02900513          	li	a0,41
    8001a0c0:	2410a0ef          	jal	80024b00 <putchar>
    8001a0c4:	4529                	li	a0,10
    8001a0c6:	23b0a0ef          	jal	80024b00 <putchar>
    8001a0ca:	0002f797          	auipc	a5,0x2f
    8001a0ce:	f477c783          	lbu	a5,-185(a5) # 80049011 <excpt+0x1>
    8001a0d2:	4481                	li	s1,0
    8001a0d4:	c789                	beqz	a5,8001a0de <store_guest_page_fault_6+0xfe>
    8001a0d6:	6404                	ld	s1,8(s0)
    8001a0d8:	14a5                	addi	s1,s1,-23
    8001a0da:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SGPF
    );


    //执行store相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    8001a0de:	0330000f          	fence	rw,rw
    8001a0e2:	4785                	li	a5,1
    8001a0e4:	0002f717          	auipc	a4,0x2f
    8001a0e8:	f6073223          	sd	zero,-156(a4) # 80049048 <excpt+0x38>
    8001a0ec:	00f41023          	sh	a5,0(s0)
    8001a0f0:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sh, "sh", uint16_t);
    8001a0f4:	001007b7          	lui	a5,0x100
    8001a0f8:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8001a0fc:	7771                	lui	a4,0xffffc
    8001a0fe:	07b2                	slli	a5,a5,0xc
    8001a100:	eef7071b          	addiw	a4,a4,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    8001a104:	00e79023          	sh	a4,0(a5)
    addr = hs_page_base(VSRWX_GI);

    sh(addr,0xbeef);   
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    8001a108:	08200593          	li	a1,130
    8001a10c:	00014617          	auipc	a2,0x14
    8001a110:	b4460613          	addi	a2,a2,-1212 # 8002dc50 <__func__.0+0x61f0>
    8001a114:	0000e517          	auipc	a0,0xe
    8001a118:	c4450513          	addi	a0,a0,-956 # 80027d58 <__func__.0+0x2f8>
    8001a11c:	3db0b0ef          	jal	80025cf6 <printf>
    8001a120:	0002f797          	auipc	a5,0x2f
    8001a124:	ef17c783          	lbu	a5,-271(a5) # 80049011 <excpt+0x1>
    8001a128:	0000e597          	auipc	a1,0xe
    8001a12c:	c0858593          	addi	a1,a1,-1016 # 80027d30 <__func__.0+0x2d0>
    8001a130:	cf89                	beqz	a5,8001a14a <store_guest_page_fault_6+0x16a>
    8001a132:	6418                	ld	a4,8(s0)
    8001a134:	47dd                	li	a5,23
    8001a136:	0000e597          	auipc	a1,0xe
    8001a13a:	bea58593          	addi	a1,a1,-1046 # 80027d20 <__func__.0+0x2c0>
    8001a13e:	00f70663          	beq	a4,a5,8001a14a <store_guest_page_fault_6+0x16a>
    8001a142:	0000e597          	auipc	a1,0xe
    8001a146:	bee58593          	addi	a1,a1,-1042 # 80027d30 <__func__.0+0x2d0>
    8001a14a:	0000e517          	auipc	a0,0xe
    8001a14e:	c2650513          	addi	a0,a0,-986 # 80027d70 <__func__.0+0x310>
    8001a152:	3a50b0ef          	jal	80025cf6 <printf>
    8001a156:	0002f797          	auipc	a5,0x2f
    8001a15a:	ebb7c783          	lbu	a5,-325(a5) # 80049011 <excpt+0x1>
    8001a15e:	c789                	beqz	a5,8001a168 <store_guest_page_fault_6+0x188>
    8001a160:	6418                	ld	a4,8(s0)
    8001a162:	47dd                	li	a5,23
    8001a164:	00f70c63          	beq	a4,a5,8001a17c <store_guest_page_fault_6+0x19c>
    8001a168:	0000e517          	auipc	a0,0xe
    8001a16c:	c1050513          	addi	a0,a0,-1008 # 80027d78 <__func__.0+0x318>
    8001a170:	3870b0ef          	jal	80025cf6 <printf>
    8001a174:	02900513          	li	a0,41
    8001a178:	1890a0ef          	jal	80024b00 <putchar>
    8001a17c:	4529                	li	a0,10
    8001a17e:	1830a0ef          	jal	80024b00 <putchar>
    8001a182:	c095                	beqz	s1,8001a1a6 <store_guest_page_fault_6+0x1c6>
    8001a184:	0002f497          	auipc	s1,0x2f
    8001a188:	e8d4c483          	lbu	s1,-371(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    8001a18c:	0000e597          	auipc	a1,0xe
    8001a190:	ba458593          	addi	a1,a1,-1116 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    8001a194:	cc91                	beqz	s1,8001a1b0 <store_guest_page_fault_6+0x1d0>
    8001a196:	6418                	ld	a4,8(s0)
    8001a198:	47dd                	li	a5,23
    TEST_END();
    8001a19a:	0000e597          	auipc	a1,0xe
    8001a19e:	b8658593          	addi	a1,a1,-1146 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    8001a1a2:	00f70763          	beq	a4,a5,8001a1b0 <store_guest_page_fault_6+0x1d0>
    8001a1a6:	4481                	li	s1,0
    TEST_END();
    8001a1a8:	0000e597          	auipc	a1,0xe
    8001a1ac:	b8858593          	addi	a1,a1,-1144 # 80027d30 <__func__.0+0x2d0>
    8001a1b0:	0000e517          	auipc	a0,0xe
    8001a1b4:	c2850513          	addi	a0,a0,-984 # 80027dd8 <__func__.0+0x378>
    8001a1b8:	33f0b0ef          	jal	80025cf6 <printf>
    8001a1bc:	4511                	li	a0,4
    8001a1be:	a39e60ef          	jal	80000bf6 <goto_priv>
    8001a1c2:	aeae70ef          	jal	800014ac <reset_state>

}
    8001a1c6:	60e2                	ld	ra,24(sp)
    8001a1c8:	6442                	ld	s0,16(sp)
    8001a1ca:	8526                	mv	a0,s1
    8001a1cc:	64a2                	ld	s1,8(sp)
    8001a1ce:	6105                	addi	sp,sp,32
    8001a1d0:	8082                	ret

000000008001a1d2 <store_guest_page_fault_7>:

bool store_guest_page_fault_7(){
    8001a1d2:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a1d4:	0000d597          	auipc	a1,0xd
    8001a1d8:	e3c58593          	addi	a1,a1,-452 # 80027010 <__func__.15>
    8001a1dc:	0000e517          	auipc	a0,0xe
    8001a1e0:	b6450513          	addi	a0,a0,-1180 # 80027d40 <__func__.0+0x2e0>
bool store_guest_page_fault_7(){
    8001a1e4:	ec06                	sd	ra,24(sp)
    8001a1e6:	e822                	sd	s0,16(sp)
    8001a1e8:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a1ea:	30d0b0ef          	jal	80025cf6 <printf>
    8001a1ee:	4529                	li	a0,10
    8001a1f0:	1110a0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    8001a1f4:	450d                	li	a0,3
    8001a1f6:	a01e60ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001a1fa:	be6e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001a1fe:	e24e60ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001a202:	caee60ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    8001a206:	4509                	li	a0,2
    8001a208:	9efe60ef          	jal	80000bf6 <goto_priv>

    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    8001a20c:	0330000f          	fence	rw,rw
    8001a210:	0002f417          	auipc	s0,0x2f
    8001a214:	e0040413          	addi	s0,s0,-512 # 80049010 <excpt>
    8001a218:	4785                	li	a5,1
    8001a21a:	0002f717          	auipc	a4,0x2f
    8001a21e:	e2073723          	sd	zero,-466(a4) # 80049048 <excpt+0x38>
    8001a222:	00f41023          	sh	a5,0(s0)
    8001a226:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001a22a:	000807b7          	lui	a5,0x80
    8001a22e:	1007b073          	csrc	sstatus,a5
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8001a232:	37ab77b7          	lui	a5,0x37ab7
    8001a236:	00100737          	lui	a4,0x100
    8001a23a:	078a                	slli	a5,a5,0x2
    8001a23c:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    8001a240:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001a244:	0732                	slli	a4,a4,0xc
    8001a246:	00f73023          	sd	a5,0(a4)
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    8001a24a:	08200593          	li	a1,130
    8001a24e:	00014617          	auipc	a2,0x14
    8001a252:	a5a60613          	addi	a2,a2,-1446 # 8002dca8 <__func__.0+0x6248>
    8001a256:	0000e517          	auipc	a0,0xe
    8001a25a:	b0250513          	addi	a0,a0,-1278 # 80027d58 <__func__.0+0x2f8>
    8001a25e:	2990b0ef          	jal	80025cf6 <printf>
    8001a262:	0002f797          	auipc	a5,0x2f
    8001a266:	daf7c783          	lbu	a5,-593(a5) # 80049011 <excpt+0x1>
    8001a26a:	0000e597          	auipc	a1,0xe
    8001a26e:	ac658593          	addi	a1,a1,-1338 # 80027d30 <__func__.0+0x2d0>
    8001a272:	cf89                	beqz	a5,8001a28c <store_guest_page_fault_7+0xba>
    8001a274:	6418                	ld	a4,8(s0)
    8001a276:	47dd                	li	a5,23
    8001a278:	0000e597          	auipc	a1,0xe
    8001a27c:	aa858593          	addi	a1,a1,-1368 # 80027d20 <__func__.0+0x2c0>
    8001a280:	00f70663          	beq	a4,a5,8001a28c <store_guest_page_fault_7+0xba>
    8001a284:	0000e597          	auipc	a1,0xe
    8001a288:	aac58593          	addi	a1,a1,-1364 # 80027d30 <__func__.0+0x2d0>
    8001a28c:	0000e517          	auipc	a0,0xe
    8001a290:	ae450513          	addi	a0,a0,-1308 # 80027d70 <__func__.0+0x310>
    8001a294:	2630b0ef          	jal	80025cf6 <printf>
    8001a298:	0002f797          	auipc	a5,0x2f
    8001a29c:	d797c783          	lbu	a5,-647(a5) # 80049011 <excpt+0x1>
    8001a2a0:	c789                	beqz	a5,8001a2aa <store_guest_page_fault_7+0xd8>
    8001a2a2:	6418                	ld	a4,8(s0)
    8001a2a4:	47dd                	li	a5,23
    8001a2a6:	00f70c63          	beq	a4,a5,8001a2be <store_guest_page_fault_7+0xec>
    8001a2aa:	0000e517          	auipc	a0,0xe
    8001a2ae:	ace50513          	addi	a0,a0,-1330 # 80027d78 <__func__.0+0x318>
    8001a2b2:	2450b0ef          	jal	80025cf6 <printf>
    8001a2b6:	02900513          	li	a0,41
    8001a2ba:	0470a0ef          	jal	80024b00 <putchar>
    8001a2be:	4529                	li	a0,10
    8001a2c0:	0410a0ef          	jal	80024b00 <putchar>
    8001a2c4:	0002f497          	auipc	s1,0x2f
    8001a2c8:	d4d4c483          	lbu	s1,-691(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    8001a2cc:	0000e597          	auipc	a1,0xe
    8001a2d0:	a6458593          	addi	a1,a1,-1436 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    8001a2d4:	cc91                	beqz	s1,8001a2f0 <store_guest_page_fault_7+0x11e>
    8001a2d6:	6418                	ld	a4,8(s0)
    8001a2d8:	47dd                	li	a5,23
    TEST_END();
    8001a2da:	0000e597          	auipc	a1,0xe
    8001a2de:	a4658593          	addi	a1,a1,-1466 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    8001a2e2:	00f70763          	beq	a4,a5,8001a2f0 <store_guest_page_fault_7+0x11e>
    8001a2e6:	4481                	li	s1,0
    TEST_END();
    8001a2e8:	0000e597          	auipc	a1,0xe
    8001a2ec:	a4858593          	addi	a1,a1,-1464 # 80027d30 <__func__.0+0x2d0>
    8001a2f0:	0000e517          	auipc	a0,0xe
    8001a2f4:	ae850513          	addi	a0,a0,-1304 # 80027dd8 <__func__.0+0x378>
    8001a2f8:	1ff0b0ef          	jal	80025cf6 <printf>
    8001a2fc:	4511                	li	a0,4
    8001a2fe:	8f9e60ef          	jal	80000bf6 <goto_priv>
    8001a302:	9aae70ef          	jal	800014ac <reset_state>
}
    8001a306:	60e2                	ld	ra,24(sp)
    8001a308:	6442                	ld	s0,16(sp)
    8001a30a:	8526                	mv	a0,s1
    8001a30c:	64a2                	ld	s1,8(sp)
    8001a30e:	6105                	addi	sp,sp,32
    8001a310:	8082                	ret

000000008001a312 <store_guest_page_fault_8>:

bool store_guest_page_fault_8(){
    8001a312:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a314:	0000d597          	auipc	a1,0xd
    8001a318:	d1c58593          	addi	a1,a1,-740 # 80027030 <__func__.14>
    8001a31c:	0000e517          	auipc	a0,0xe
    8001a320:	a2450513          	addi	a0,a0,-1500 # 80027d40 <__func__.0+0x2e0>
bool store_guest_page_fault_8(){
    8001a324:	ec06                	sd	ra,24(sp)
    8001a326:	e822                	sd	s0,16(sp)
    8001a328:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a32a:	1cd0b0ef          	jal	80025cf6 <printf>
    8001a32e:	4529                	li	a0,10
    8001a330:	7d00a0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    8001a334:	450d                	li	a0,3
    8001a336:	8c1e60ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001a33a:	aa6e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001a33e:	ce4e60ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001a342:	b6ee60ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    8001a346:	4509                	li	a0,2
    8001a348:	8afe60ef          	jal	80000bf6 <goto_priv>


    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    8001a34c:	0330000f          	fence	rw,rw
    8001a350:	0002f497          	auipc	s1,0x2f
    8001a354:	cc048493          	addi	s1,s1,-832 # 80049010 <excpt>
    8001a358:	4785                	li	a5,1
    8001a35a:	0002f717          	auipc	a4,0x2f
    8001a35e:	ce073723          	sd	zero,-786(a4) # 80049048 <excpt+0x38>
    8001a362:	00f49023          	sh	a5,0(s1)
    8001a366:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    8001a36a:	000807b7          	lui	a5,0x80
    8001a36e:	1007a073          	csrs	sstatus,a5
STORE_INSTRUCTION(sh, "sh", uint16_t);
    8001a372:	001007b7          	lui	a5,0x100
    8001a376:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8001a37a:	7771                	lui	a4,0xffffc
    8001a37c:	07b2                	slli	a5,a5,0xc
    8001a37e:	eef7071b          	addiw	a4,a4,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    8001a382:	00e79023          	sh	a4,0(a5)
    sh(vaddr,0xbeef);
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    8001a386:	08200593          	li	a1,130
    8001a38a:	00014617          	auipc	a2,0x14
    8001a38e:	97e60613          	addi	a2,a2,-1666 # 8002dd08 <__func__.0+0x62a8>
    8001a392:	0000e517          	auipc	a0,0xe
    8001a396:	9c650513          	addi	a0,a0,-1594 # 80027d58 <__func__.0+0x2f8>
    8001a39a:	15d0b0ef          	jal	80025cf6 <printf>
    8001a39e:	0002f797          	auipc	a5,0x2f
    8001a3a2:	c737c783          	lbu	a5,-909(a5) # 80049011 <excpt+0x1>
    8001a3a6:	0000e597          	auipc	a1,0xe
    8001a3aa:	98a58593          	addi	a1,a1,-1654 # 80027d30 <__func__.0+0x2d0>
    8001a3ae:	cf89                	beqz	a5,8001a3c8 <store_guest_page_fault_8+0xb6>
    8001a3b0:	6498                	ld	a4,8(s1)
    8001a3b2:	47dd                	li	a5,23
    8001a3b4:	0000e597          	auipc	a1,0xe
    8001a3b8:	96c58593          	addi	a1,a1,-1684 # 80027d20 <__func__.0+0x2c0>
    8001a3bc:	00f70663          	beq	a4,a5,8001a3c8 <store_guest_page_fault_8+0xb6>
    8001a3c0:	0000e597          	auipc	a1,0xe
    8001a3c4:	97058593          	addi	a1,a1,-1680 # 80027d30 <__func__.0+0x2d0>
    8001a3c8:	0000e517          	auipc	a0,0xe
    8001a3cc:	9a850513          	addi	a0,a0,-1624 # 80027d70 <__func__.0+0x310>
    8001a3d0:	1270b0ef          	jal	80025cf6 <printf>
    8001a3d4:	0002f797          	auipc	a5,0x2f
    8001a3d8:	c3d7c783          	lbu	a5,-963(a5) # 80049011 <excpt+0x1>
    8001a3dc:	c789                	beqz	a5,8001a3e6 <store_guest_page_fault_8+0xd4>
    8001a3de:	6498                	ld	a4,8(s1)
    8001a3e0:	47dd                	li	a5,23
    8001a3e2:	00f70c63          	beq	a4,a5,8001a3fa <store_guest_page_fault_8+0xe8>
    8001a3e6:	0000e517          	auipc	a0,0xe
    8001a3ea:	99250513          	addi	a0,a0,-1646 # 80027d78 <__func__.0+0x318>
    8001a3ee:	1090b0ef          	jal	80025cf6 <printf>
    8001a3f2:	02900513          	li	a0,41
    8001a3f6:	70a0a0ef          	jal	80024b00 <putchar>
    8001a3fa:	4529                	li	a0,10
    8001a3fc:	7040a0ef          	jal	80024b00 <putchar>
    8001a400:	0002f417          	auipc	s0,0x2f
    8001a404:	c1144403          	lbu	s0,-1007(s0) # 80049011 <excpt+0x1>
    8001a408:	c409                	beqz	s0,8001a412 <store_guest_page_fault_8+0x100>
    8001a40a:	6498                	ld	a4,8(s1)
    8001a40c:	47dd                	li	a5,23
    8001a40e:	02f70c63          	beq	a4,a5,8001a446 <store_guest_page_fault_8+0x134>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001a412:	000807b7          	lui	a5,0x80
    8001a416:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    8001a41a:	4401                	li	s0,0

    TEST_END();
    8001a41c:	0000e597          	auipc	a1,0xe
    8001a420:	91458593          	addi	a1,a1,-1772 # 80027d30 <__func__.0+0x2d0>
    8001a424:	0000e517          	auipc	a0,0xe
    8001a428:	9b450513          	addi	a0,a0,-1612 # 80027dd8 <__func__.0+0x378>
    8001a42c:	0cb0b0ef          	jal	80025cf6 <printf>
    8001a430:	4511                	li	a0,4
    8001a432:	fc4e60ef          	jal	80000bf6 <goto_priv>
    8001a436:	876e70ef          	jal	800014ac <reset_state>
}
    8001a43a:	60e2                	ld	ra,24(sp)
    8001a43c:	8522                	mv	a0,s0
    8001a43e:	6442                	ld	s0,16(sp)
    8001a440:	64a2                	ld	s1,8(sp)
    8001a442:	6105                	addi	sp,sp,32
    8001a444:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001a446:	000807b7          	lui	a5,0x80
    8001a44a:	1007b073          	csrc	sstatus,a5
    TEST_END();
    8001a44e:	0000e597          	auipc	a1,0xe
    8001a452:	8d258593          	addi	a1,a1,-1838 # 80027d20 <__func__.0+0x2c0>
    8001a456:	b7f9                	j	8001a424 <store_guest_page_fault_8+0x112>

000000008001a458 <store_guest_page_fault_9>:

bool store_guest_page_fault_9(){
    8001a458:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a45a:	0000d597          	auipc	a1,0xd
    8001a45e:	bf658593          	addi	a1,a1,-1034 # 80027050 <__func__.13>
    8001a462:	0000e517          	auipc	a0,0xe
    8001a466:	8de50513          	addi	a0,a0,-1826 # 80027d40 <__func__.0+0x2e0>
bool store_guest_page_fault_9(){
    8001a46a:	ec06                	sd	ra,24(sp)
    8001a46c:	e822                	sd	s0,16(sp)
    8001a46e:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a470:	0870b0ef          	jal	80025cf6 <printf>
    8001a474:	4529                	li	a0,10
    8001a476:	68a0a0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    8001a47a:	450d                	li	a0,3
    8001a47c:	f7ae60ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001a480:	960e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001a484:	b9ee60ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001a488:	a28e60ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    8001a48c:	4511                	li	a0,4
    8001a48e:	f68e60ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    8001a492:	000407b7          	lui	a5,0x40
    8001a496:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    8001a49a:	4509                	li	a0,2
    8001a49c:	f5ae60ef          	jal	80000bf6 <goto_priv>

    //执行hsvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    8001a4a0:	0330000f          	fence	rw,rw
    8001a4a4:	0002f417          	auipc	s0,0x2f
    8001a4a8:	b6c40413          	addi	s0,s0,-1172 # 80049010 <excpt>
    8001a4ac:	4785                	li	a5,1
    8001a4ae:	0002f717          	auipc	a4,0x2f
    8001a4b2:	b8073d23          	sd	zero,-1126(a4) # 80049048 <excpt+0x38>
    8001a4b6:	00f41023          	sh	a5,0(s0)
    8001a4ba:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8001a4be:	37ab77b7          	lui	a5,0x37ab7
    8001a4c2:	00080737          	lui	a4,0x80
    8001a4c6:	078a                	slli	a5,a5,0x2
    8001a4c8:	076d                	addi	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    8001a4ca:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001a4ce:	0736                	slli	a4,a4,0xd
    8001a4d0:	00f73023          	sd	a5,0(a4)
    vaddr = hs_page_base(VSURWX_GUX);


    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    8001a4d4:	08200593          	li	a1,130
    8001a4d8:	00014617          	auipc	a2,0x14
    8001a4dc:	8a060613          	addi	a2,a2,-1888 # 8002dd78 <__func__.0+0x6318>
    8001a4e0:	0000e517          	auipc	a0,0xe
    8001a4e4:	87850513          	addi	a0,a0,-1928 # 80027d58 <__func__.0+0x2f8>
    8001a4e8:	00f0b0ef          	jal	80025cf6 <printf>
    8001a4ec:	0002f797          	auipc	a5,0x2f
    8001a4f0:	b257c783          	lbu	a5,-1243(a5) # 80049011 <excpt+0x1>
    8001a4f4:	0000e597          	auipc	a1,0xe
    8001a4f8:	83c58593          	addi	a1,a1,-1988 # 80027d30 <__func__.0+0x2d0>
    8001a4fc:	cf89                	beqz	a5,8001a516 <store_guest_page_fault_9+0xbe>
    8001a4fe:	6418                	ld	a4,8(s0)
    8001a500:	47bd                	li	a5,15
    8001a502:	0000e597          	auipc	a1,0xe
    8001a506:	81e58593          	addi	a1,a1,-2018 # 80027d20 <__func__.0+0x2c0>
    8001a50a:	00f70663          	beq	a4,a5,8001a516 <store_guest_page_fault_9+0xbe>
    8001a50e:	0000e597          	auipc	a1,0xe
    8001a512:	82258593          	addi	a1,a1,-2014 # 80027d30 <__func__.0+0x2d0>
    8001a516:	0000e517          	auipc	a0,0xe
    8001a51a:	85a50513          	addi	a0,a0,-1958 # 80027d70 <__func__.0+0x310>
    8001a51e:	7d80b0ef          	jal	80025cf6 <printf>
    8001a522:	0002f797          	auipc	a5,0x2f
    8001a526:	aef7c783          	lbu	a5,-1297(a5) # 80049011 <excpt+0x1>
    8001a52a:	c789                	beqz	a5,8001a534 <store_guest_page_fault_9+0xdc>
    8001a52c:	6418                	ld	a4,8(s0)
    8001a52e:	47bd                	li	a5,15
    8001a530:	00f70c63          	beq	a4,a5,8001a548 <store_guest_page_fault_9+0xf0>
    8001a534:	0000e517          	auipc	a0,0xe
    8001a538:	84450513          	addi	a0,a0,-1980 # 80027d78 <__func__.0+0x318>
    8001a53c:	7ba0b0ef          	jal	80025cf6 <printf>
    8001a540:	02900513          	li	a0,41
    8001a544:	5bc0a0ef          	jal	80024b00 <putchar>
    8001a548:	4529                	li	a0,10
    8001a54a:	5b60a0ef          	jal	80024b00 <putchar>
    8001a54e:	0002f497          	auipc	s1,0x2f
    8001a552:	ac34c483          	lbu	s1,-1341(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    8001a556:	0000d597          	auipc	a1,0xd
    8001a55a:	7da58593          	addi	a1,a1,2010 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    8001a55e:	cc91                	beqz	s1,8001a57a <store_guest_page_fault_9+0x122>
    8001a560:	6418                	ld	a4,8(s0)
    8001a562:	47bd                	li	a5,15
    TEST_END();
    8001a564:	0000d597          	auipc	a1,0xd
    8001a568:	7bc58593          	addi	a1,a1,1980 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    8001a56c:	00f70763          	beq	a4,a5,8001a57a <store_guest_page_fault_9+0x122>
    8001a570:	4481                	li	s1,0
    TEST_END();
    8001a572:	0000d597          	auipc	a1,0xd
    8001a576:	7be58593          	addi	a1,a1,1982 # 80027d30 <__func__.0+0x2d0>
    8001a57a:	0000e517          	auipc	a0,0xe
    8001a57e:	85e50513          	addi	a0,a0,-1954 # 80027dd8 <__func__.0+0x378>
    8001a582:	7740b0ef          	jal	80025cf6 <printf>
    8001a586:	4511                	li	a0,4
    8001a588:	e6ee60ef          	jal	80000bf6 <goto_priv>
    8001a58c:	f21e60ef          	jal	800014ac <reset_state>
}
    8001a590:	60e2                	ld	ra,24(sp)
    8001a592:	6442                	ld	s0,16(sp)
    8001a594:	8526                	mv	a0,s1
    8001a596:	64a2                	ld	s1,8(sp)
    8001a598:	6105                	addi	sp,sp,32
    8001a59a:	8082                	ret

000000008001a59c <store_guest_page_fault_10>:

bool store_guest_page_fault_10(){
    8001a59c:	1141                	addi	sp,sp,-16

    TEST_START();
    8001a59e:	0000d597          	auipc	a1,0xd
    8001a5a2:	ad258593          	addi	a1,a1,-1326 # 80027070 <__func__.12>
    8001a5a6:	0000d517          	auipc	a0,0xd
    8001a5aa:	79a50513          	addi	a0,a0,1946 # 80027d40 <__func__.0+0x2e0>
bool store_guest_page_fault_10(){
    8001a5ae:	e406                	sd	ra,8(sp)
    8001a5b0:	e022                	sd	s0,0(sp)
    TEST_START();
    8001a5b2:	7440b0ef          	jal	80025cf6 <printf>
    8001a5b6:	4529                	li	a0,10
    8001a5b8:	5480a0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    8001a5bc:	450d                	li	a0,3
    8001a5be:	e38e60ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001a5c2:	81ee60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001a5c6:	a5ce60ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001a5ca:	8e6e60ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    8001a5ce:	4511                	li	a0,4
    8001a5d0:	e26e60ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    8001a5d4:	000407b7          	lui	a5,0x40
    8001a5d8:	2007a073          	csrs	vsstatus,a5

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    8001a5dc:	4509                	li	a0,2
    8001a5de:	e18e60ef          	jal	80000bf6 <goto_priv>

    //执行hsvd指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    8001a5e2:	0330000f          	fence	rw,rw
    8001a5e6:	4785                	li	a5,1
    8001a5e8:	0002f717          	auipc	a4,0x2f
    8001a5ec:	a6073023          	sd	zero,-1440(a4) # 80049048 <excpt+0x38>
    8001a5f0:	0002f717          	auipc	a4,0x2f
    8001a5f4:	a2f71023          	sh	a5,-1504(a4) # 80049010 <excpt>
    8001a5f8:	0330000f          	fence	rw,rw
    8001a5fc:	37ab77b7          	lui	a5,0x37ab7
    8001a600:	00080737          	lui	a4,0x80
    8001a604:	078a                	slli	a5,a5,0x2
    8001a606:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    8001a608:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001a60c:	0736                	slli	a4,a4,0xd
    8001a60e:	00f73023          	sd	a5,0(a4)
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    8001a612:	08200593          	li	a1,130
    8001a616:	00013617          	auipc	a2,0x13
    8001a61a:	cf260613          	addi	a2,a2,-782 # 8002d308 <__func__.0+0x58a8>
    8001a61e:	0000d517          	auipc	a0,0xd
    8001a622:	73a50513          	addi	a0,a0,1850 # 80027d58 <__func__.0+0x2f8>
    8001a626:	6d00b0ef          	jal	80025cf6 <printf>
    8001a62a:	0002f797          	auipc	a5,0x2f
    8001a62e:	9e77c783          	lbu	a5,-1561(a5) # 80049011 <excpt+0x1>
    8001a632:	0000d597          	auipc	a1,0xd
    8001a636:	6ee58593          	addi	a1,a1,1774 # 80027d20 <__func__.0+0x2c0>
    8001a63a:	c789                	beqz	a5,8001a644 <store_guest_page_fault_10+0xa8>
    8001a63c:	0000d597          	auipc	a1,0xd
    8001a640:	6f458593          	addi	a1,a1,1780 # 80027d30 <__func__.0+0x2d0>
    8001a644:	0000d517          	auipc	a0,0xd
    8001a648:	72c50513          	addi	a0,a0,1836 # 80027d70 <__func__.0+0x310>
    8001a64c:	6aa0b0ef          	jal	80025cf6 <printf>
    8001a650:	0002f797          	auipc	a5,0x2f
    8001a654:	9c17c783          	lbu	a5,-1599(a5) # 80049011 <excpt+0x1>
    8001a658:	e7a1                	bnez	a5,8001a6a0 <store_guest_page_fault_10+0x104>
    8001a65a:	4529                	li	a0,10
    8001a65c:	4a40a0ef          	jal	80024b00 <putchar>
    8001a660:	0002f797          	auipc	a5,0x2f
    8001a664:	9b17c783          	lbu	a5,-1615(a5) # 80049011 <excpt+0x1>
    8001a668:	e795                	bnez	a5,8001a694 <store_guest_page_fault_10+0xf8>
    8001a66a:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    8001a66c:	0000d597          	auipc	a1,0xd
    8001a670:	6b458593          	addi	a1,a1,1716 # 80027d20 <__func__.0+0x2c0>
    8001a674:	0000d517          	auipc	a0,0xd
    8001a678:	76450513          	addi	a0,a0,1892 # 80027dd8 <__func__.0+0x378>
    8001a67c:	67a0b0ef          	jal	80025cf6 <printf>
    8001a680:	4511                	li	a0,4
    8001a682:	d74e60ef          	jal	80000bf6 <goto_priv>
    8001a686:	e27e60ef          	jal	800014ac <reset_state>
}
    8001a68a:	60a2                	ld	ra,8(sp)
    8001a68c:	8522                	mv	a0,s0
    8001a68e:	6402                	ld	s0,0(sp)
    8001a690:	0141                	addi	sp,sp,16
    8001a692:	8082                	ret
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    8001a694:	4401                	li	s0,0
    TEST_END();
    8001a696:	0000d597          	auipc	a1,0xd
    8001a69a:	69a58593          	addi	a1,a1,1690 # 80027d30 <__func__.0+0x2d0>
    8001a69e:	bfd9                	j	8001a674 <store_guest_page_fault_10+0xd8>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    8001a6a0:	0000d517          	auipc	a0,0xd
    8001a6a4:	6d850513          	addi	a0,a0,1752 # 80027d78 <__func__.0+0x318>
    8001a6a8:	64e0b0ef          	jal	80025cf6 <printf>
    8001a6ac:	02900513          	li	a0,41
    8001a6b0:	4500a0ef          	jal	80024b00 <putchar>
    8001a6b4:	b75d                	j	8001a65a <store_guest_page_fault_10+0xbe>

000000008001a6b6 <amo_guest_page_fault_1>:

bool amo_guest_page_fault_1(){
    8001a6b6:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a6b8:	0000d597          	auipc	a1,0xd
    8001a6bc:	9d858593          	addi	a1,a1,-1576 # 80027090 <__func__.11>
    8001a6c0:	0000d517          	auipc	a0,0xd
    8001a6c4:	68050513          	addi	a0,a0,1664 # 80027d40 <__func__.0+0x2e0>
bool amo_guest_page_fault_1(){
    8001a6c8:	ec06                	sd	ra,24(sp)
    8001a6ca:	e822                	sd	s0,16(sp)
    8001a6cc:	e426                	sd	s1,8(sp)
    8001a6ce:	e04a                	sd	s2,0(sp)
    TEST_START();
    8001a6d0:	6260b0ef          	jal	80025cf6 <printf>
    8001a6d4:	4529                	li	a0,10
    8001a6d6:	42a0a0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    8001a6da:	450d                	li	a0,3
    8001a6dc:	d1ae60ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001a6e0:	f01e50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001a6e4:	93ee60ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001a6e8:	fc9e50ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0x1;  
    goto_priv(PRIV_VS);
    8001a6ec:	4509                	li	a0,2
    8001a6ee:	d08e60ef          	jal	80000bf6 <goto_priv>


    //执行原子指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    8001a6f2:	0330000f          	fence	rw,rw
    8001a6f6:	0002f497          	auipc	s1,0x2f
    8001a6fa:	91a48493          	addi	s1,s1,-1766 # 80049010 <excpt>
    8001a6fe:	4785                	li	a5,1
    8001a700:	0002f717          	auipc	a4,0x2f
    8001a704:	94073423          	sd	zero,-1720(a4) # 80049048 <excpt+0x38>
    8001a708:	00f49023          	sh	a5,0(s1)
    8001a70c:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    8001a710:	00100737          	lui	a4,0x100
    8001a714:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    8001a718:	0732                	slli	a4,a4,0xc
    8001a71a:	00f727af          	amoadd.w	a5,a5,(a4)


    addr = hs_page_base(VSRWX_GI);
    value = amoadd_w(addr,value);
    
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    8001a71e:	08200593          	li	a1,130
    8001a722:	00013617          	auipc	a2,0x13
    8001a726:	68e60613          	addi	a2,a2,1678 # 8002ddb0 <__func__.0+0x6350>
    8001a72a:	0000d517          	auipc	a0,0xd
    8001a72e:	62e50513          	addi	a0,a0,1582 # 80027d58 <__func__.0+0x2f8>
    value = amoadd_w(addr,value);
    8001a732:	02079413          	slli	s0,a5,0x20
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    8001a736:	5c00b0ef          	jal	80025cf6 <printf>
    8001a73a:	0002f797          	auipc	a5,0x2f
    8001a73e:	8d77c783          	lbu	a5,-1833(a5) # 80049011 <excpt+0x1>
    value = amoadd_w(addr,value);
    8001a742:	9001                	srli	s0,s0,0x20
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    8001a744:	0000d597          	auipc	a1,0xd
    8001a748:	5ec58593          	addi	a1,a1,1516 # 80027d30 <__func__.0+0x2d0>
    8001a74c:	cf89                	beqz	a5,8001a766 <amo_guest_page_fault_1+0xb0>
    8001a74e:	6498                	ld	a4,8(s1)
    8001a750:	47dd                	li	a5,23
    8001a752:	0000d597          	auipc	a1,0xd
    8001a756:	5ce58593          	addi	a1,a1,1486 # 80027d20 <__func__.0+0x2c0>
    8001a75a:	00f70663          	beq	a4,a5,8001a766 <amo_guest_page_fault_1+0xb0>
    8001a75e:	0000d597          	auipc	a1,0xd
    8001a762:	5d258593          	addi	a1,a1,1490 # 80027d30 <__func__.0+0x2d0>
    8001a766:	0000d517          	auipc	a0,0xd
    8001a76a:	60a50513          	addi	a0,a0,1546 # 80027d70 <__func__.0+0x310>
    8001a76e:	5880b0ef          	jal	80025cf6 <printf>
    8001a772:	0002f797          	auipc	a5,0x2f
    8001a776:	89f7c783          	lbu	a5,-1889(a5) # 80049011 <excpt+0x1>
    8001a77a:	c789                	beqz	a5,8001a784 <amo_guest_page_fault_1+0xce>
    8001a77c:	6498                	ld	a4,8(s1)
    8001a77e:	47dd                	li	a5,23
    8001a780:	00f70c63          	beq	a4,a5,8001a798 <amo_guest_page_fault_1+0xe2>
    8001a784:	0000d517          	auipc	a0,0xd
    8001a788:	5f450513          	addi	a0,a0,1524 # 80027d78 <__func__.0+0x318>
    8001a78c:	56a0b0ef          	jal	80025cf6 <printf>
    8001a790:	02900513          	li	a0,41
    8001a794:	36c0a0ef          	jal	80024b00 <putchar>
    8001a798:	4529                	li	a0,10
    8001a79a:	3660a0ef          	jal	80024b00 <putchar>
    8001a79e:	0002f797          	auipc	a5,0x2f
    8001a7a2:	8737c783          	lbu	a5,-1933(a5) # 80049011 <excpt+0x1>
    8001a7a6:	4901                	li	s2,0
    8001a7a8:	c791                	beqz	a5,8001a7b4 <amo_guest_page_fault_1+0xfe>
    8001a7aa:	0084b903          	ld	s2,8(s1)
    8001a7ae:	1925                	addi	s2,s2,-23
    8001a7b0:	00193913          	seqz	s2,s2
        excpt.cause == CAUSE_SGPF
    );


    //执行原子相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    8001a7b4:	0330000f          	fence	rw,rw
    8001a7b8:	4785                	li	a5,1
    8001a7ba:	0002f717          	auipc	a4,0x2f
    8001a7be:	88073723          	sd	zero,-1906(a4) # 80049048 <excpt+0x38>
    8001a7c2:	00f49023          	sh	a5,0(s1)
    8001a7c6:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    8001a7ca:	00100737          	lui	a4,0x100
    8001a7ce:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    8001a7d2:	87a2                	mv	a5,s0
    8001a7d4:	0732                	slli	a4,a4,0xc
    8001a7d6:	a0f737af          	amomax.d	a5,a5,(a4)
    vaddr = hs_page_base(VSRWX_GI);
    value = amomax_d(vaddr,value);

    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    8001a7da:	08200593          	li	a1,130
    8001a7de:	00013617          	auipc	a2,0x13
    8001a7e2:	62260613          	addi	a2,a2,1570 # 8002de00 <__func__.0+0x63a0>
    8001a7e6:	0000d517          	auipc	a0,0xd
    8001a7ea:	57250513          	addi	a0,a0,1394 # 80027d58 <__func__.0+0x2f8>
    8001a7ee:	5080b0ef          	jal	80025cf6 <printf>
    8001a7f2:	0002f797          	auipc	a5,0x2f
    8001a7f6:	81f7c783          	lbu	a5,-2017(a5) # 80049011 <excpt+0x1>
    8001a7fa:	0000d597          	auipc	a1,0xd
    8001a7fe:	53658593          	addi	a1,a1,1334 # 80027d30 <__func__.0+0x2d0>
    8001a802:	cf89                	beqz	a5,8001a81c <amo_guest_page_fault_1+0x166>
    8001a804:	6498                	ld	a4,8(s1)
    8001a806:	47dd                	li	a5,23
    8001a808:	0000d597          	auipc	a1,0xd
    8001a80c:	51858593          	addi	a1,a1,1304 # 80027d20 <__func__.0+0x2c0>
    8001a810:	00f70663          	beq	a4,a5,8001a81c <amo_guest_page_fault_1+0x166>
    8001a814:	0000d597          	auipc	a1,0xd
    8001a818:	51c58593          	addi	a1,a1,1308 # 80027d30 <__func__.0+0x2d0>
    8001a81c:	0000d517          	auipc	a0,0xd
    8001a820:	55450513          	addi	a0,a0,1364 # 80027d70 <__func__.0+0x310>
    8001a824:	4d20b0ef          	jal	80025cf6 <printf>
    8001a828:	0002e797          	auipc	a5,0x2e
    8001a82c:	7e97c783          	lbu	a5,2025(a5) # 80049011 <excpt+0x1>
    8001a830:	c789                	beqz	a5,8001a83a <amo_guest_page_fault_1+0x184>
    8001a832:	6498                	ld	a4,8(s1)
    8001a834:	47dd                	li	a5,23
    8001a836:	00f70c63          	beq	a4,a5,8001a84e <amo_guest_page_fault_1+0x198>
    8001a83a:	0000d517          	auipc	a0,0xd
    8001a83e:	53e50513          	addi	a0,a0,1342 # 80027d78 <__func__.0+0x318>
    8001a842:	4b40b0ef          	jal	80025cf6 <printf>
    8001a846:	02900513          	li	a0,41
    8001a84a:	2b60a0ef          	jal	80024b00 <putchar>
    8001a84e:	4529                	li	a0,10
    8001a850:	2b00a0ef          	jal	80024b00 <putchar>
    8001a854:	02090363          	beqz	s2,8001a87a <amo_guest_page_fault_1+0x1c4>
    8001a858:	0002e417          	auipc	s0,0x2e
    8001a85c:	7b944403          	lbu	s0,1977(s0) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    8001a860:	0000d597          	auipc	a1,0xd
    8001a864:	4d058593          	addi	a1,a1,1232 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    8001a868:	cc11                	beqz	s0,8001a884 <amo_guest_page_fault_1+0x1ce>
    8001a86a:	6498                	ld	a4,8(s1)
    8001a86c:	47dd                	li	a5,23
    TEST_END();
    8001a86e:	0000d597          	auipc	a1,0xd
    8001a872:	4b258593          	addi	a1,a1,1202 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    8001a876:	00f70763          	beq	a4,a5,8001a884 <amo_guest_page_fault_1+0x1ce>
    8001a87a:	4401                	li	s0,0
    TEST_END();
    8001a87c:	0000d597          	auipc	a1,0xd
    8001a880:	4b458593          	addi	a1,a1,1204 # 80027d30 <__func__.0+0x2d0>
    8001a884:	0000d517          	auipc	a0,0xd
    8001a888:	55450513          	addi	a0,a0,1364 # 80027dd8 <__func__.0+0x378>
    8001a88c:	46a0b0ef          	jal	80025cf6 <printf>
    8001a890:	4511                	li	a0,4
    8001a892:	b64e60ef          	jal	80000bf6 <goto_priv>
    8001a896:	c17e60ef          	jal	800014ac <reset_state>
}
    8001a89a:	60e2                	ld	ra,24(sp)
    8001a89c:	8522                	mv	a0,s0
    8001a89e:	6442                	ld	s0,16(sp)
    8001a8a0:	64a2                	ld	s1,8(sp)
    8001a8a2:	6902                	ld	s2,0(sp)
    8001a8a4:	6105                	addi	sp,sp,32
    8001a8a6:	8082                	ret

000000008001a8a8 <amo_guest_page_fault_2>:

bool amo_guest_page_fault_2(){
    8001a8a8:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a8aa:	0000c597          	auipc	a1,0xc
    8001a8ae:	7fe58593          	addi	a1,a1,2046 # 800270a8 <__func__.10>
    8001a8b2:	0000d517          	auipc	a0,0xd
    8001a8b6:	48e50513          	addi	a0,a0,1166 # 80027d40 <__func__.0+0x2e0>
bool amo_guest_page_fault_2(){
    8001a8ba:	ec06                	sd	ra,24(sp)
    8001a8bc:	e822                	sd	s0,16(sp)
    8001a8be:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a8c0:	4360b0ef          	jal	80025cf6 <printf>
    8001a8c4:	4529                	li	a0,10
    8001a8c6:	23a0a0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    8001a8ca:	450d                	li	a0,3
    8001a8cc:	b2ae60ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001a8d0:	d11e50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001a8d4:	f4fe50ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001a8d8:	dd9e50ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    8001a8dc:	4509                	li	a0,2
    8001a8de:	b18e60ef          	jal	80000bf6 <goto_priv>
    //执行原子相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    8001a8e2:	0330000f          	fence	rw,rw
    8001a8e6:	0002e417          	auipc	s0,0x2e
    8001a8ea:	72a40413          	addi	s0,s0,1834 # 80049010 <excpt>
    8001a8ee:	4785                	li	a5,1
    8001a8f0:	0002e717          	auipc	a4,0x2e
    8001a8f4:	74073c23          	sd	zero,1880(a4) # 80049048 <excpt+0x38>
    8001a8f8:	00f41023          	sh	a5,0(s0)
    8001a8fc:	0330000f          	fence	rw,rw
    addr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001a900:	000807b7          	lui	a5,0x80
    8001a904:	1007b073          	csrc	sstatus,a5
AMO_INSTRUCTION(amoswap_d, "amoswap.d", uint64_t);
    8001a908:	37ab77b7          	lui	a5,0x37ab7
    8001a90c:	00100737          	lui	a4,0x100
    8001a910:	078a                	slli	a5,a5,0x2
    8001a912:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    8001a916:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001a91a:	0732                	slli	a4,a4,0xc
    8001a91c:	08f737af          	amoswap.d	a5,a5,(a4)
    value = amoswap_d(addr,value);
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    8001a920:	08200593          	li	a1,130
    8001a924:	00013617          	auipc	a2,0x13
    8001a928:	53c60613          	addi	a2,a2,1340 # 8002de60 <__func__.0+0x6400>
    8001a92c:	0000d517          	auipc	a0,0xd
    8001a930:	42c50513          	addi	a0,a0,1068 # 80027d58 <__func__.0+0x2f8>
    8001a934:	3c20b0ef          	jal	80025cf6 <printf>
    8001a938:	0002e797          	auipc	a5,0x2e
    8001a93c:	6d97c783          	lbu	a5,1753(a5) # 80049011 <excpt+0x1>
    8001a940:	0000d597          	auipc	a1,0xd
    8001a944:	3f058593          	addi	a1,a1,1008 # 80027d30 <__func__.0+0x2d0>
    8001a948:	cf89                	beqz	a5,8001a962 <amo_guest_page_fault_2+0xba>
    8001a94a:	6418                	ld	a4,8(s0)
    8001a94c:	47dd                	li	a5,23
    8001a94e:	0000d597          	auipc	a1,0xd
    8001a952:	3d258593          	addi	a1,a1,978 # 80027d20 <__func__.0+0x2c0>
    8001a956:	00f70663          	beq	a4,a5,8001a962 <amo_guest_page_fault_2+0xba>
    8001a95a:	0000d597          	auipc	a1,0xd
    8001a95e:	3d658593          	addi	a1,a1,982 # 80027d30 <__func__.0+0x2d0>
    8001a962:	0000d517          	auipc	a0,0xd
    8001a966:	40e50513          	addi	a0,a0,1038 # 80027d70 <__func__.0+0x310>
    8001a96a:	38c0b0ef          	jal	80025cf6 <printf>
    8001a96e:	0002e797          	auipc	a5,0x2e
    8001a972:	6a37c783          	lbu	a5,1699(a5) # 80049011 <excpt+0x1>
    8001a976:	c789                	beqz	a5,8001a980 <amo_guest_page_fault_2+0xd8>
    8001a978:	6418                	ld	a4,8(s0)
    8001a97a:	47dd                	li	a5,23
    8001a97c:	00f70c63          	beq	a4,a5,8001a994 <amo_guest_page_fault_2+0xec>
    8001a980:	0000d517          	auipc	a0,0xd
    8001a984:	3f850513          	addi	a0,a0,1016 # 80027d78 <__func__.0+0x318>
    8001a988:	36e0b0ef          	jal	80025cf6 <printf>
    8001a98c:	02900513          	li	a0,41
    8001a990:	1700a0ef          	jal	80024b00 <putchar>
    8001a994:	4529                	li	a0,10
    8001a996:	16a0a0ef          	jal	80024b00 <putchar>
    8001a99a:	0002e497          	auipc	s1,0x2e
    8001a99e:	6774c483          	lbu	s1,1655(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    8001a9a2:	0000d597          	auipc	a1,0xd
    8001a9a6:	38e58593          	addi	a1,a1,910 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    8001a9aa:	cc91                	beqz	s1,8001a9c6 <amo_guest_page_fault_2+0x11e>
    8001a9ac:	6418                	ld	a4,8(s0)
    8001a9ae:	47dd                	li	a5,23
    TEST_END();
    8001a9b0:	0000d597          	auipc	a1,0xd
    8001a9b4:	37058593          	addi	a1,a1,880 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    8001a9b8:	00f70763          	beq	a4,a5,8001a9c6 <amo_guest_page_fault_2+0x11e>
    8001a9bc:	4481                	li	s1,0
    TEST_END();
    8001a9be:	0000d597          	auipc	a1,0xd
    8001a9c2:	37258593          	addi	a1,a1,882 # 80027d30 <__func__.0+0x2d0>
    8001a9c6:	0000d517          	auipc	a0,0xd
    8001a9ca:	41250513          	addi	a0,a0,1042 # 80027dd8 <__func__.0+0x378>
    8001a9ce:	3280b0ef          	jal	80025cf6 <printf>
    8001a9d2:	4511                	li	a0,4
    8001a9d4:	a22e60ef          	jal	80000bf6 <goto_priv>
    8001a9d8:	ad5e60ef          	jal	800014ac <reset_state>
}
    8001a9dc:	60e2                	ld	ra,24(sp)
    8001a9de:	6442                	ld	s0,16(sp)
    8001a9e0:	8526                	mv	a0,s1
    8001a9e2:	64a2                	ld	s1,8(sp)
    8001a9e4:	6105                	addi	sp,sp,32
    8001a9e6:	8082                	ret

000000008001a9e8 <amo_guest_page_fault_3>:

bool amo_guest_page_fault_3(){
    8001a9e8:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a9ea:	0000c597          	auipc	a1,0xc
    8001a9ee:	6d658593          	addi	a1,a1,1750 # 800270c0 <__func__.9>
    8001a9f2:	0000d517          	auipc	a0,0xd
    8001a9f6:	34e50513          	addi	a0,a0,846 # 80027d40 <__func__.0+0x2e0>
bool amo_guest_page_fault_3(){
    8001a9fa:	ec06                	sd	ra,24(sp)
    8001a9fc:	e822                	sd	s0,16(sp)
    8001a9fe:	e426                	sd	s1,8(sp)
    TEST_START();
    8001aa00:	2f60b0ef          	jal	80025cf6 <printf>
    8001aa04:	4529                	li	a0,10
    8001aa06:	0fa0a0ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    8001aa0a:	450d                	li	a0,3
    8001aa0c:	9eae60ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001aa10:	bd1e50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001aa14:	e0fe50ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001aa18:	c99e50ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    8001aa1c:	4509                	li	a0,2
    8001aa1e:	9d8e60ef          	jal	80000bf6 <goto_priv>


    //执行原子相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    8001aa22:	0330000f          	fence	rw,rw
    8001aa26:	0002e497          	auipc	s1,0x2e
    8001aa2a:	5ea48493          	addi	s1,s1,1514 # 80049010 <excpt>
    8001aa2e:	4785                	li	a5,1
    8001aa30:	0002e717          	auipc	a4,0x2e
    8001aa34:	60073c23          	sd	zero,1560(a4) # 80049048 <excpt+0x38>
    8001aa38:	00f49023          	sh	a5,0(s1)
    8001aa3c:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    8001aa40:	000807b7          	lui	a5,0x80
    8001aa44:	1007a073          	csrs	sstatus,a5
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    8001aa48:	37ab77b7          	lui	a5,0x37ab7
    8001aa4c:	00100737          	lui	a4,0x100
    8001aa50:	078a                	slli	a5,a5,0x2
    8001aa52:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    8001aa56:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001aa5a:	0732                	slli	a4,a4,0xc
    8001aa5c:	40f737af          	amoor.d	a5,a5,(a4)
    value = amoor_d(vaddr,value);
    TEST_ASSERT("s mode amoor_d when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    8001aa60:	08200593          	li	a1,130
    8001aa64:	00013617          	auipc	a2,0x13
    8001aa68:	46460613          	addi	a2,a2,1124 # 8002dec8 <__func__.0+0x6468>
    8001aa6c:	0000d517          	auipc	a0,0xd
    8001aa70:	2ec50513          	addi	a0,a0,748 # 80027d58 <__func__.0+0x2f8>
    8001aa74:	2820b0ef          	jal	80025cf6 <printf>
    8001aa78:	0002e797          	auipc	a5,0x2e
    8001aa7c:	5997c783          	lbu	a5,1433(a5) # 80049011 <excpt+0x1>
    8001aa80:	0000d597          	auipc	a1,0xd
    8001aa84:	2b058593          	addi	a1,a1,688 # 80027d30 <__func__.0+0x2d0>
    8001aa88:	cf89                	beqz	a5,8001aaa2 <amo_guest_page_fault_3+0xba>
    8001aa8a:	6498                	ld	a4,8(s1)
    8001aa8c:	47dd                	li	a5,23
    8001aa8e:	0000d597          	auipc	a1,0xd
    8001aa92:	29258593          	addi	a1,a1,658 # 80027d20 <__func__.0+0x2c0>
    8001aa96:	00f70663          	beq	a4,a5,8001aaa2 <amo_guest_page_fault_3+0xba>
    8001aa9a:	0000d597          	auipc	a1,0xd
    8001aa9e:	29658593          	addi	a1,a1,662 # 80027d30 <__func__.0+0x2d0>
    8001aaa2:	0000d517          	auipc	a0,0xd
    8001aaa6:	2ce50513          	addi	a0,a0,718 # 80027d70 <__func__.0+0x310>
    8001aaaa:	24c0b0ef          	jal	80025cf6 <printf>
    8001aaae:	0002e797          	auipc	a5,0x2e
    8001aab2:	5637c783          	lbu	a5,1379(a5) # 80049011 <excpt+0x1>
    8001aab6:	c789                	beqz	a5,8001aac0 <amo_guest_page_fault_3+0xd8>
    8001aab8:	6498                	ld	a4,8(s1)
    8001aaba:	47dd                	li	a5,23
    8001aabc:	00f70c63          	beq	a4,a5,8001aad4 <amo_guest_page_fault_3+0xec>
    8001aac0:	0000d517          	auipc	a0,0xd
    8001aac4:	2b850513          	addi	a0,a0,696 # 80027d78 <__func__.0+0x318>
    8001aac8:	22e0b0ef          	jal	80025cf6 <printf>
    8001aacc:	02900513          	li	a0,41
    8001aad0:	0300a0ef          	jal	80024b00 <putchar>
    8001aad4:	4529                	li	a0,10
    8001aad6:	02a0a0ef          	jal	80024b00 <putchar>
    8001aada:	0002e417          	auipc	s0,0x2e
    8001aade:	53744403          	lbu	s0,1335(s0) # 80049011 <excpt+0x1>
    8001aae2:	c409                	beqz	s0,8001aaec <amo_guest_page_fault_3+0x104>
    8001aae4:	6498                	ld	a4,8(s1)
    8001aae6:	47dd                	li	a5,23
    8001aae8:	02f70c63          	beq	a4,a5,8001ab20 <amo_guest_page_fault_3+0x138>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001aaec:	000807b7          	lui	a5,0x80
    8001aaf0:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("s mode amoor_d when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    8001aaf4:	4401                	li	s0,0

    TEST_END();
    8001aaf6:	0000d597          	auipc	a1,0xd
    8001aafa:	23a58593          	addi	a1,a1,570 # 80027d30 <__func__.0+0x2d0>
    8001aafe:	0000d517          	auipc	a0,0xd
    8001ab02:	2da50513          	addi	a0,a0,730 # 80027dd8 <__func__.0+0x378>
    8001ab06:	1f00b0ef          	jal	80025cf6 <printf>
    8001ab0a:	4511                	li	a0,4
    8001ab0c:	8eae60ef          	jal	80000bf6 <goto_priv>
    8001ab10:	99de60ef          	jal	800014ac <reset_state>
}
    8001ab14:	60e2                	ld	ra,24(sp)
    8001ab16:	8522                	mv	a0,s0
    8001ab18:	6442                	ld	s0,16(sp)
    8001ab1a:	64a2                	ld	s1,8(sp)
    8001ab1c:	6105                	addi	sp,sp,32
    8001ab1e:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001ab20:	000807b7          	lui	a5,0x80
    8001ab24:	1007b073          	csrc	sstatus,a5
    TEST_END();
    8001ab28:	0000d597          	auipc	a1,0xd
    8001ab2c:	1f858593          	addi	a1,a1,504 # 80027d20 <__func__.0+0x2c0>
    8001ab30:	b7f9                	j	8001aafe <amo_guest_page_fault_3+0x116>

000000008001ab32 <amo_guest_page_fault_4>:

bool amo_guest_page_fault_4(){
    8001ab32:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ab34:	0000c597          	auipc	a1,0xc
    8001ab38:	5a458593          	addi	a1,a1,1444 # 800270d8 <__func__.8>
    8001ab3c:	0000d517          	auipc	a0,0xd
    8001ab40:	20450513          	addi	a0,a0,516 # 80027d40 <__func__.0+0x2e0>
bool amo_guest_page_fault_4(){
    8001ab44:	ec06                	sd	ra,24(sp)
    8001ab46:	e822                	sd	s0,16(sp)
    8001ab48:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ab4a:	1ac0b0ef          	jal	80025cf6 <printf>
    8001ab4e:	4529                	li	a0,10
    8001ab50:	7b1090ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    8001ab54:	450d                	li	a0,3
    8001ab56:	8a0e60ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001ab5a:	a87e50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001ab5e:	cc5e50ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001ab62:	b4fe50ef          	jal	800006b0 <vspt_init>
    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  

    goto_priv(PRIV_M);
    8001ab66:	4511                	li	a0,4
    8001ab68:	88ee60ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    8001ab6c:	000407b7          	lui	a5,0x40
    8001ab70:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    8001ab74:	450d                	li	a0,3
    8001ab76:	880e60ef          	jal	80000bf6 <goto_priv>


    //执行原子相关指令需要二级地址翻页时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    8001ab7a:	0330000f          	fence	rw,rw
    8001ab7e:	0002e417          	auipc	s0,0x2e
    8001ab82:	49240413          	addi	s0,s0,1170 # 80049010 <excpt>
    8001ab86:	4785                	li	a5,1
    8001ab88:	0002e717          	auipc	a4,0x2e
    8001ab8c:	4c073023          	sd	zero,1216(a4) # 80049048 <excpt+0x38>
    8001ab90:	00f41023          	sh	a5,0(s0)
    8001ab94:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    8001ab98:	37ab77b7          	lui	a5,0x37ab7
    8001ab9c:	00080737          	lui	a4,0x80
    8001aba0:	078a                	slli	a5,a5,0x2
    8001aba2:	076d                	addi	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    8001aba4:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001aba8:	0736                	slli	a4,a4,0xd
    8001abaa:	80f737af          	amomin.d	a5,a5,(a4)
    addr = hs_page_base(VSURWX_GUX);

    value = amomin_d(addr,value);
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    8001abae:	08200593          	li	a1,130
    8001abb2:	00013617          	auipc	a2,0x13
    8001abb6:	38660613          	addi	a2,a2,902 # 8002df38 <__func__.0+0x64d8>
    8001abba:	0000d517          	auipc	a0,0xd
    8001abbe:	19e50513          	addi	a0,a0,414 # 80027d58 <__func__.0+0x2f8>
    8001abc2:	1340b0ef          	jal	80025cf6 <printf>
    8001abc6:	0002e797          	auipc	a5,0x2e
    8001abca:	44b7c783          	lbu	a5,1099(a5) # 80049011 <excpt+0x1>
    8001abce:	0000d597          	auipc	a1,0xd
    8001abd2:	16258593          	addi	a1,a1,354 # 80027d30 <__func__.0+0x2d0>
    8001abd6:	cf89                	beqz	a5,8001abf0 <amo_guest_page_fault_4+0xbe>
    8001abd8:	6418                	ld	a4,8(s0)
    8001abda:	47bd                	li	a5,15
    8001abdc:	0000d597          	auipc	a1,0xd
    8001abe0:	14458593          	addi	a1,a1,324 # 80027d20 <__func__.0+0x2c0>
    8001abe4:	00f70663          	beq	a4,a5,8001abf0 <amo_guest_page_fault_4+0xbe>
    8001abe8:	0000d597          	auipc	a1,0xd
    8001abec:	14858593          	addi	a1,a1,328 # 80027d30 <__func__.0+0x2d0>
    8001abf0:	0000d517          	auipc	a0,0xd
    8001abf4:	18050513          	addi	a0,a0,384 # 80027d70 <__func__.0+0x310>
    8001abf8:	0fe0b0ef          	jal	80025cf6 <printf>
    8001abfc:	0002e797          	auipc	a5,0x2e
    8001ac00:	4157c783          	lbu	a5,1045(a5) # 80049011 <excpt+0x1>
    8001ac04:	c789                	beqz	a5,8001ac0e <amo_guest_page_fault_4+0xdc>
    8001ac06:	6418                	ld	a4,8(s0)
    8001ac08:	47bd                	li	a5,15
    8001ac0a:	00f70c63          	beq	a4,a5,8001ac22 <amo_guest_page_fault_4+0xf0>
    8001ac0e:	0000d517          	auipc	a0,0xd
    8001ac12:	16a50513          	addi	a0,a0,362 # 80027d78 <__func__.0+0x318>
    8001ac16:	0e00b0ef          	jal	80025cf6 <printf>
    8001ac1a:	02900513          	li	a0,41
    8001ac1e:	6e3090ef          	jal	80024b00 <putchar>
    8001ac22:	4529                	li	a0,10
    8001ac24:	6dd090ef          	jal	80024b00 <putchar>
    8001ac28:	0002e497          	auipc	s1,0x2e
    8001ac2c:	3e94c483          	lbu	s1,1001(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    8001ac30:	0000d597          	auipc	a1,0xd
    8001ac34:	10058593          	addi	a1,a1,256 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    8001ac38:	cc91                	beqz	s1,8001ac54 <amo_guest_page_fault_4+0x122>
    8001ac3a:	6418                	ld	a4,8(s0)
    8001ac3c:	47bd                	li	a5,15
    TEST_END();
    8001ac3e:	0000d597          	auipc	a1,0xd
    8001ac42:	0e258593          	addi	a1,a1,226 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    8001ac46:	00f70763          	beq	a4,a5,8001ac54 <amo_guest_page_fault_4+0x122>
    8001ac4a:	4481                	li	s1,0
    TEST_END();
    8001ac4c:	0000d597          	auipc	a1,0xd
    8001ac50:	0e458593          	addi	a1,a1,228 # 80027d30 <__func__.0+0x2d0>
    8001ac54:	0000d517          	auipc	a0,0xd
    8001ac58:	18450513          	addi	a0,a0,388 # 80027dd8 <__func__.0+0x378>
    8001ac5c:	09a0b0ef          	jal	80025cf6 <printf>
    8001ac60:	4511                	li	a0,4
    8001ac62:	f95e50ef          	jal	80000bf6 <goto_priv>
    8001ac66:	847e60ef          	jal	800014ac <reset_state>
}
    8001ac6a:	60e2                	ld	ra,24(sp)
    8001ac6c:	6442                	ld	s0,16(sp)
    8001ac6e:	8526                	mv	a0,s1
    8001ac70:	64a2                	ld	s1,8(sp)
    8001ac72:	6105                	addi	sp,sp,32
    8001ac74:	8082                	ret

000000008001ac76 <amo_guest_page_fault_5>:

bool amo_guest_page_fault_5(){
    8001ac76:	1141                	addi	sp,sp,-16

    TEST_START();
    8001ac78:	0000c597          	auipc	a1,0xc
    8001ac7c:	47858593          	addi	a1,a1,1144 # 800270f0 <__func__.7>
    8001ac80:	0000d517          	auipc	a0,0xd
    8001ac84:	0c050513          	addi	a0,a0,192 # 80027d40 <__func__.0+0x2e0>
bool amo_guest_page_fault_5(){
    8001ac88:	e406                	sd	ra,8(sp)
    8001ac8a:	e022                	sd	s0,0(sp)
    TEST_START();
    8001ac8c:	06a0b0ef          	jal	80025cf6 <printf>
    8001ac90:	4529                	li	a0,10
    8001ac92:	66f090ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    8001ac96:	450d                	li	a0,3
    8001ac98:	f5fe50ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001ac9c:	945e50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001aca0:	b83e50ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001aca4:	a0de50ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_M);
    8001aca8:	4511                	li	a0,4
    8001acaa:	f4de50ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    8001acae:	000407b7          	lui	a5,0x40
    8001acb2:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    8001acb6:	450d                	li	a0,3
    8001acb8:	f3fe50ef          	jal	80000bf6 <goto_priv>

    //执行原子指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    8001acbc:	0330000f          	fence	rw,rw
    8001acc0:	4785                	li	a5,1
    8001acc2:	0002e717          	auipc	a4,0x2e
    8001acc6:	38073323          	sd	zero,902(a4) # 80049048 <excpt+0x38>
    8001acca:	0002e717          	auipc	a4,0x2e
    8001acce:	34f71323          	sh	a5,838(a4) # 80049010 <excpt>
    8001acd2:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amominu_d, "amominu.d", uint64_t);
    8001acd6:	37ab77b7          	lui	a5,0x37ab7
    8001acda:	00080737          	lui	a4,0x80
    8001acde:	078a                	slli	a5,a5,0x2
    8001ace0:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    8001ace2:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001ace6:	0736                	slli	a4,a4,0xd
    8001ace8:	c0f737af          	amominu.d	a5,a5,(a4)
    value = amominu_d(vaddr,value);

    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    8001acec:	08200593          	li	a1,130
    8001acf0:	00013617          	auipc	a2,0x13
    8001acf4:	28860613          	addi	a2,a2,648 # 8002df78 <__func__.0+0x6518>
    8001acf8:	0000d517          	auipc	a0,0xd
    8001acfc:	06050513          	addi	a0,a0,96 # 80027d58 <__func__.0+0x2f8>
    8001ad00:	7f70a0ef          	jal	80025cf6 <printf>
    8001ad04:	0002e797          	auipc	a5,0x2e
    8001ad08:	30d7c783          	lbu	a5,781(a5) # 80049011 <excpt+0x1>
    8001ad0c:	0000d597          	auipc	a1,0xd
    8001ad10:	01458593          	addi	a1,a1,20 # 80027d20 <__func__.0+0x2c0>
    8001ad14:	c789                	beqz	a5,8001ad1e <amo_guest_page_fault_5+0xa8>
    8001ad16:	0000d597          	auipc	a1,0xd
    8001ad1a:	01a58593          	addi	a1,a1,26 # 80027d30 <__func__.0+0x2d0>
    8001ad1e:	0000d517          	auipc	a0,0xd
    8001ad22:	05250513          	addi	a0,a0,82 # 80027d70 <__func__.0+0x310>
    8001ad26:	7d10a0ef          	jal	80025cf6 <printf>
    8001ad2a:	0002e797          	auipc	a5,0x2e
    8001ad2e:	2e77c783          	lbu	a5,743(a5) # 80049011 <excpt+0x1>
    8001ad32:	e7a1                	bnez	a5,8001ad7a <amo_guest_page_fault_5+0x104>
    8001ad34:	4529                	li	a0,10
    8001ad36:	5cb090ef          	jal	80024b00 <putchar>
    8001ad3a:	0002e797          	auipc	a5,0x2e
    8001ad3e:	2d77c783          	lbu	a5,727(a5) # 80049011 <excpt+0x1>
    8001ad42:	e795                	bnez	a5,8001ad6e <amo_guest_page_fault_5+0xf8>
    8001ad44:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    8001ad46:	0000d597          	auipc	a1,0xd
    8001ad4a:	fda58593          	addi	a1,a1,-38 # 80027d20 <__func__.0+0x2c0>
    8001ad4e:	0000d517          	auipc	a0,0xd
    8001ad52:	08a50513          	addi	a0,a0,138 # 80027dd8 <__func__.0+0x378>
    8001ad56:	7a10a0ef          	jal	80025cf6 <printf>
    8001ad5a:	4511                	li	a0,4
    8001ad5c:	e9be50ef          	jal	80000bf6 <goto_priv>
    8001ad60:	f4ce60ef          	jal	800014ac <reset_state>
}
    8001ad64:	60a2                	ld	ra,8(sp)
    8001ad66:	8522                	mv	a0,s0
    8001ad68:	6402                	ld	s0,0(sp)
    8001ad6a:	0141                	addi	sp,sp,16
    8001ad6c:	8082                	ret
    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    8001ad6e:	4401                	li	s0,0
    TEST_END();
    8001ad70:	0000d597          	auipc	a1,0xd
    8001ad74:	fc058593          	addi	a1,a1,-64 # 80027d30 <__func__.0+0x2d0>
    8001ad78:	bfd9                	j	8001ad4e <amo_guest_page_fault_5+0xd8>
    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    8001ad7a:	0000d517          	auipc	a0,0xd
    8001ad7e:	ffe50513          	addi	a0,a0,-2 # 80027d78 <__func__.0+0x318>
    8001ad82:	7750a0ef          	jal	80025cf6 <printf>
    8001ad86:	02900513          	li	a0,41
    8001ad8a:	577090ef          	jal	80024b00 <putchar>
    8001ad8e:	b75d                	j	8001ad34 <amo_guest_page_fault_5+0xbe>

000000008001ad90 <instruction_guest_page_fault_1>:


bool instruction_guest_page_fault_1(){
    8001ad90:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ad92:	0000c597          	auipc	a1,0xc
    8001ad96:	37658593          	addi	a1,a1,886 # 80027108 <__func__.6>
    8001ad9a:	0000d517          	auipc	a0,0xd
    8001ad9e:	fa650513          	addi	a0,a0,-90 # 80027d40 <__func__.0+0x2e0>
bool instruction_guest_page_fault_1(){
    8001ada2:	ec06                	sd	ra,24(sp)
    8001ada4:	e822                	sd	s0,16(sp)
    8001ada6:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ada8:	74f0a0ef          	jal	80025cf6 <printf>
    8001adac:	4529                	li	a0,10
    8001adae:	553090ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    8001adb2:	450d                	li	a0,3
    8001adb4:	e43e50ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001adb8:	829e50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001adbc:	a67e50ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001adc0:	8f1e50ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    8001adc4:	4509                	li	a0,2
    8001adc6:	e31e50ef          	jal	80000bf6 <goto_priv>

    //执行取指指令二级地址翻译阶段时，pte.v=0
    vaddr = hs_page_base(VSRWX_GI);
    TEST_SETUP_EXCEPT();
    8001adca:	0330000f          	fence	rw,rw
    8001adce:	0002e417          	auipc	s0,0x2e
    8001add2:	24240413          	addi	s0,s0,578 # 80049010 <excpt>
    8001add6:	4785                	li	a5,1
    8001add8:	0002e717          	auipc	a4,0x2e
    8001addc:	26073823          	sd	zero,624(a4) # 80049048 <excpt+0x38>
    8001ade0:	00f41023          	sh	a5,0(s0)
    8001ade4:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    8001ade8:	001007b7          	lui	a5,0x100
    8001adec:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8001adf0:	07b2                	slli	a5,a5,0xc
    8001adf2:	00000297          	auipc	t0,0x0
    8001adf6:	00c28293          	addi	t0,t0,12 # 8001adfe <instruction_guest_page_fault_1+0x6e>
    8001adfa:	02543c23          	sd	t0,56(s0)
    8001adfe:	8782                	jr	a5


    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    8001ae00:	08200593          	li	a1,130
    8001ae04:	00013617          	auipc	a2,0x13
    8001ae08:	1b460613          	addi	a2,a2,436 # 8002dfb8 <__func__.0+0x6558>
    8001ae0c:	0000d517          	auipc	a0,0xd
    8001ae10:	f4c50513          	addi	a0,a0,-180 # 80027d58 <__func__.0+0x2f8>
    8001ae14:	6e30a0ef          	jal	80025cf6 <printf>
    8001ae18:	0002e797          	auipc	a5,0x2e
    8001ae1c:	1f97c783          	lbu	a5,505(a5) # 80049011 <excpt+0x1>
    8001ae20:	0000d597          	auipc	a1,0xd
    8001ae24:	f1058593          	addi	a1,a1,-240 # 80027d30 <__func__.0+0x2d0>
    8001ae28:	cf89                	beqz	a5,8001ae42 <instruction_guest_page_fault_1+0xb2>
    8001ae2a:	6418                	ld	a4,8(s0)
    8001ae2c:	47d1                	li	a5,20
    8001ae2e:	0000d597          	auipc	a1,0xd
    8001ae32:	ef258593          	addi	a1,a1,-270 # 80027d20 <__func__.0+0x2c0>
    8001ae36:	00f70663          	beq	a4,a5,8001ae42 <instruction_guest_page_fault_1+0xb2>
    8001ae3a:	0000d597          	auipc	a1,0xd
    8001ae3e:	ef658593          	addi	a1,a1,-266 # 80027d30 <__func__.0+0x2d0>
    8001ae42:	0000d517          	auipc	a0,0xd
    8001ae46:	f2e50513          	addi	a0,a0,-210 # 80027d70 <__func__.0+0x310>
    8001ae4a:	6ad0a0ef          	jal	80025cf6 <printf>
    8001ae4e:	0002e797          	auipc	a5,0x2e
    8001ae52:	1c37c783          	lbu	a5,451(a5) # 80049011 <excpt+0x1>
    8001ae56:	c789                	beqz	a5,8001ae60 <instruction_guest_page_fault_1+0xd0>
    8001ae58:	6418                	ld	a4,8(s0)
    8001ae5a:	47d1                	li	a5,20
    8001ae5c:	00f70c63          	beq	a4,a5,8001ae74 <instruction_guest_page_fault_1+0xe4>
    8001ae60:	0000d517          	auipc	a0,0xd
    8001ae64:	f1850513          	addi	a0,a0,-232 # 80027d78 <__func__.0+0x318>
    8001ae68:	68f0a0ef          	jal	80025cf6 <printf>
    8001ae6c:	02900513          	li	a0,41
    8001ae70:	491090ef          	jal	80024b00 <putchar>
    8001ae74:	4529                	li	a0,10
    8001ae76:	48b090ef          	jal	80024b00 <putchar>
    8001ae7a:	0002e497          	auipc	s1,0x2e
    8001ae7e:	1974c483          	lbu	s1,407(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    8001ae82:	0000d597          	auipc	a1,0xd
    8001ae86:	eae58593          	addi	a1,a1,-338 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    8001ae8a:	cc91                	beqz	s1,8001aea6 <instruction_guest_page_fault_1+0x116>
    8001ae8c:	6418                	ld	a4,8(s0)
    8001ae8e:	47d1                	li	a5,20
    TEST_END();
    8001ae90:	0000d597          	auipc	a1,0xd
    8001ae94:	e9058593          	addi	a1,a1,-368 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    8001ae98:	00f70763          	beq	a4,a5,8001aea6 <instruction_guest_page_fault_1+0x116>
    8001ae9c:	4481                	li	s1,0
    TEST_END();
    8001ae9e:	0000d597          	auipc	a1,0xd
    8001aea2:	e9258593          	addi	a1,a1,-366 # 80027d30 <__func__.0+0x2d0>
    8001aea6:	0000d517          	auipc	a0,0xd
    8001aeaa:	f3250513          	addi	a0,a0,-206 # 80027dd8 <__func__.0+0x378>
    8001aeae:	6490a0ef          	jal	80025cf6 <printf>
    8001aeb2:	4511                	li	a0,4
    8001aeb4:	d43e50ef          	jal	80000bf6 <goto_priv>
    8001aeb8:	df4e60ef          	jal	800014ac <reset_state>

}
    8001aebc:	60e2                	ld	ra,24(sp)
    8001aebe:	6442                	ld	s0,16(sp)
    8001aec0:	8526                	mv	a0,s1
    8001aec2:	64a2                	ld	s1,8(sp)
    8001aec4:	6105                	addi	sp,sp,32
    8001aec6:	8082                	ret

000000008001aec8 <instruction_guest_page_fault_2>:


bool instruction_guest_page_fault_2(){
    8001aec8:	1101                	addi	sp,sp,-32

    TEST_START();
    8001aeca:	0000c597          	auipc	a1,0xc
    8001aece:	25e58593          	addi	a1,a1,606 # 80027128 <__func__.5>
    8001aed2:	0000d517          	auipc	a0,0xd
    8001aed6:	e6e50513          	addi	a0,a0,-402 # 80027d40 <__func__.0+0x2e0>
bool instruction_guest_page_fault_2(){
    8001aeda:	ec06                	sd	ra,24(sp)
    8001aedc:	e822                	sd	s0,16(sp)
    8001aede:	e426                	sd	s1,8(sp)
    TEST_START();
    8001aee0:	6170a0ef          	jal	80025cf6 <printf>
    8001aee4:	4529                	li	a0,10
    8001aee6:	41b090ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    8001aeea:	450d                	li	a0,3
    8001aeec:	d0be50ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001aef0:	ef0e50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001aef4:	92fe50ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001aef8:	fb8e50ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    8001aefc:	4509                	li	a0,2
    8001aefe:	cf9e50ef          	jal	80000bf6 <goto_priv>


    //执行取指指令二级地址翻译阶段时，pte.x=0
    vaddr = vs_page_base(VSRWX_GRW);
    TEST_SETUP_EXCEPT();
    8001af02:	0330000f          	fence	rw,rw
    8001af06:	0002e417          	auipc	s0,0x2e
    8001af0a:	10a40413          	addi	s0,s0,266 # 80049010 <excpt>
    8001af0e:	4785                	li	a5,1
    8001af10:	0002e717          	auipc	a4,0x2e
    8001af14:	12073c23          	sd	zero,312(a4) # 80049048 <excpt+0x38>
    8001af18:	00f41023          	sh	a5,0(s0)
    8001af1c:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    8001af20:	400137b7          	lui	a5,0x40013
    8001af24:	078a                	slli	a5,a5,0x2
    8001af26:	00000297          	auipc	t0,0x0
    8001af2a:	00c28293          	addi	t0,t0,12 # 8001af32 <instruction_guest_page_fault_2+0x6a>
    8001af2e:	02543c23          	sd	t0,56(s0)
    8001af32:	8782                	jr	a5

    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    8001af34:	08200593          	li	a1,130
    8001af38:	00013617          	auipc	a2,0x13
    8001af3c:	0e060613          	addi	a2,a2,224 # 8002e018 <__func__.0+0x65b8>
    8001af40:	0000d517          	auipc	a0,0xd
    8001af44:	e1850513          	addi	a0,a0,-488 # 80027d58 <__func__.0+0x2f8>
    8001af48:	5af0a0ef          	jal	80025cf6 <printf>
    8001af4c:	0002e797          	auipc	a5,0x2e
    8001af50:	0c57c783          	lbu	a5,197(a5) # 80049011 <excpt+0x1>
    8001af54:	0000d597          	auipc	a1,0xd
    8001af58:	ddc58593          	addi	a1,a1,-548 # 80027d30 <__func__.0+0x2d0>
    8001af5c:	cf89                	beqz	a5,8001af76 <instruction_guest_page_fault_2+0xae>
    8001af5e:	6418                	ld	a4,8(s0)
    8001af60:	47d1                	li	a5,20
    8001af62:	0000d597          	auipc	a1,0xd
    8001af66:	dbe58593          	addi	a1,a1,-578 # 80027d20 <__func__.0+0x2c0>
    8001af6a:	00f70663          	beq	a4,a5,8001af76 <instruction_guest_page_fault_2+0xae>
    8001af6e:	0000d597          	auipc	a1,0xd
    8001af72:	dc258593          	addi	a1,a1,-574 # 80027d30 <__func__.0+0x2d0>
    8001af76:	0000d517          	auipc	a0,0xd
    8001af7a:	dfa50513          	addi	a0,a0,-518 # 80027d70 <__func__.0+0x310>
    8001af7e:	5790a0ef          	jal	80025cf6 <printf>
    8001af82:	0002e797          	auipc	a5,0x2e
    8001af86:	08f7c783          	lbu	a5,143(a5) # 80049011 <excpt+0x1>
    8001af8a:	c789                	beqz	a5,8001af94 <instruction_guest_page_fault_2+0xcc>
    8001af8c:	6418                	ld	a4,8(s0)
    8001af8e:	47d1                	li	a5,20
    8001af90:	00f70c63          	beq	a4,a5,8001afa8 <instruction_guest_page_fault_2+0xe0>
    8001af94:	0000d517          	auipc	a0,0xd
    8001af98:	de450513          	addi	a0,a0,-540 # 80027d78 <__func__.0+0x318>
    8001af9c:	55b0a0ef          	jal	80025cf6 <printf>
    8001afa0:	02900513          	li	a0,41
    8001afa4:	35d090ef          	jal	80024b00 <putchar>
    8001afa8:	4529                	li	a0,10
    8001afaa:	357090ef          	jal	80024b00 <putchar>
    8001afae:	0002e497          	auipc	s1,0x2e
    8001afb2:	0634c483          	lbu	s1,99(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    8001afb6:	0000d597          	auipc	a1,0xd
    8001afba:	d7a58593          	addi	a1,a1,-646 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    8001afbe:	cc91                	beqz	s1,8001afda <instruction_guest_page_fault_2+0x112>
    8001afc0:	6418                	ld	a4,8(s0)
    8001afc2:	47d1                	li	a5,20
    TEST_END();
    8001afc4:	0000d597          	auipc	a1,0xd
    8001afc8:	d5c58593          	addi	a1,a1,-676 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    8001afcc:	00f70763          	beq	a4,a5,8001afda <instruction_guest_page_fault_2+0x112>
    8001afd0:	4481                	li	s1,0
    TEST_END();
    8001afd2:	0000d597          	auipc	a1,0xd
    8001afd6:	d5e58593          	addi	a1,a1,-674 # 80027d30 <__func__.0+0x2d0>
    8001afda:	0000d517          	auipc	a0,0xd
    8001afde:	dfe50513          	addi	a0,a0,-514 # 80027dd8 <__func__.0+0x378>
    8001afe2:	5150a0ef          	jal	80025cf6 <printf>
    8001afe6:	4511                	li	a0,4
    8001afe8:	c0fe50ef          	jal	80000bf6 <goto_priv>
    8001afec:	cc0e60ef          	jal	800014ac <reset_state>
}
    8001aff0:	60e2                	ld	ra,24(sp)
    8001aff2:	6442                	ld	s0,16(sp)
    8001aff4:	8526                	mv	a0,s1
    8001aff6:	64a2                	ld	s1,8(sp)
    8001aff8:	6105                	addi	sp,sp,32
    8001affa:	8082                	ret

000000008001affc <instruction_guest_page_fault_3>:

bool instruction_guest_page_fault_3(){
    8001affc:	1101                	addi	sp,sp,-32

    TEST_START();
    8001affe:	0000c597          	auipc	a1,0xc
    8001b002:	14a58593          	addi	a1,a1,330 # 80027148 <__func__.4>
    8001b006:	0000d517          	auipc	a0,0xd
    8001b00a:	d3a50513          	addi	a0,a0,-710 # 80027d40 <__func__.0+0x2e0>
bool instruction_guest_page_fault_3(){
    8001b00e:	ec06                	sd	ra,24(sp)
    8001b010:	e822                	sd	s0,16(sp)
    8001b012:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b014:	4e30a0ef          	jal	80025cf6 <printf>
    8001b018:	4529                	li	a0,10
    8001b01a:	2e7090ef          	jal	80024b00 <putchar>

    CSRC(CSR_VSSTATUS,SSTATUS_SUM);
    8001b01e:	000407b7          	lui	a5,0x40
    8001b022:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    8001b026:	450d                	li	a0,3
    8001b028:	bcfe50ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001b02c:	db4e50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001b030:	ff2e50ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001b034:	e7ce50ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    8001b038:	4509                	li	a0,2
    8001b03a:	bbde50ef          	jal	80000bf6 <goto_priv>

    //执行取指指令时，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    8001b03e:	0330000f          	fence	rw,rw
    8001b042:	0002e417          	auipc	s0,0x2e
    8001b046:	fce40413          	addi	s0,s0,-50 # 80049010 <excpt>
    8001b04a:	4785                	li	a5,1
    8001b04c:	0002e717          	auipc	a4,0x2e
    8001b050:	fe073e23          	sd	zero,-4(a4) # 80049048 <excpt+0x38>
    8001b054:	00f41023          	sh	a5,0(s0)
    8001b058:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSURWX_GURWX);


    TEST_EXEC_EXCEPT(vaddr); 
    8001b05c:	000807b7          	lui	a5,0x80
    8001b060:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001b062:	07b6                	slli	a5,a5,0xd
    8001b064:	00000297          	auipc	t0,0x0
    8001b068:	00c28293          	addi	t0,t0,12 # 8001b070 <instruction_guest_page_fault_3+0x74>
    8001b06c:	02543c23          	sd	t0,56(s0)
    8001b070:	8782                	jr	a5
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF when vsstatus.sum=0",
    8001b072:	08200593          	li	a1,130
    8001b076:	00013617          	auipc	a2,0x13
    8001b07a:	00260613          	addi	a2,a2,2 # 8002e078 <__func__.0+0x6618>
    8001b07e:	0000d517          	auipc	a0,0xd
    8001b082:	cda50513          	addi	a0,a0,-806 # 80027d58 <__func__.0+0x2f8>
    8001b086:	4710a0ef          	jal	80025cf6 <printf>
    8001b08a:	0002e797          	auipc	a5,0x2e
    8001b08e:	f877c783          	lbu	a5,-121(a5) # 80049011 <excpt+0x1>
    8001b092:	0000d597          	auipc	a1,0xd
    8001b096:	c9e58593          	addi	a1,a1,-866 # 80027d30 <__func__.0+0x2d0>
    8001b09a:	cf89                	beqz	a5,8001b0b4 <instruction_guest_page_fault_3+0xb8>
    8001b09c:	6418                	ld	a4,8(s0)
    8001b09e:	47b1                	li	a5,12
    8001b0a0:	0000d597          	auipc	a1,0xd
    8001b0a4:	c8058593          	addi	a1,a1,-896 # 80027d20 <__func__.0+0x2c0>
    8001b0a8:	00f70663          	beq	a4,a5,8001b0b4 <instruction_guest_page_fault_3+0xb8>
    8001b0ac:	0000d597          	auipc	a1,0xd
    8001b0b0:	c8458593          	addi	a1,a1,-892 # 80027d30 <__func__.0+0x2d0>
    8001b0b4:	0000d517          	auipc	a0,0xd
    8001b0b8:	cbc50513          	addi	a0,a0,-836 # 80027d70 <__func__.0+0x310>
    8001b0bc:	43b0a0ef          	jal	80025cf6 <printf>
    8001b0c0:	0002e797          	auipc	a5,0x2e
    8001b0c4:	f517c783          	lbu	a5,-175(a5) # 80049011 <excpt+0x1>
    8001b0c8:	c789                	beqz	a5,8001b0d2 <instruction_guest_page_fault_3+0xd6>
    8001b0ca:	6418                	ld	a4,8(s0)
    8001b0cc:	47b1                	li	a5,12
    8001b0ce:	00f70c63          	beq	a4,a5,8001b0e6 <instruction_guest_page_fault_3+0xea>
    8001b0d2:	0000d517          	auipc	a0,0xd
    8001b0d6:	ca650513          	addi	a0,a0,-858 # 80027d78 <__func__.0+0x318>
    8001b0da:	41d0a0ef          	jal	80025cf6 <printf>
    8001b0de:	02900513          	li	a0,41
    8001b0e2:	21f090ef          	jal	80024b00 <putchar>
    8001b0e6:	4529                	li	a0,10
    8001b0e8:	219090ef          	jal	80024b00 <putchar>
    8001b0ec:	0002e497          	auipc	s1,0x2e
    8001b0f0:	f254c483          	lbu	s1,-219(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    8001b0f4:	0000d597          	auipc	a1,0xd
    8001b0f8:	c3c58593          	addi	a1,a1,-964 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF when vsstatus.sum=0",
    8001b0fc:	cc91                	beqz	s1,8001b118 <instruction_guest_page_fault_3+0x11c>
    8001b0fe:	6418                	ld	a4,8(s0)
    8001b100:	47b1                	li	a5,12
    TEST_END();
    8001b102:	0000d597          	auipc	a1,0xd
    8001b106:	c1e58593          	addi	a1,a1,-994 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF when vsstatus.sum=0",
    8001b10a:	00f70763          	beq	a4,a5,8001b118 <instruction_guest_page_fault_3+0x11c>
    8001b10e:	4481                	li	s1,0
    TEST_END();
    8001b110:	0000d597          	auipc	a1,0xd
    8001b114:	c2058593          	addi	a1,a1,-992 # 80027d30 <__func__.0+0x2d0>
    8001b118:	0000d517          	auipc	a0,0xd
    8001b11c:	cc050513          	addi	a0,a0,-832 # 80027dd8 <__func__.0+0x378>
    8001b120:	3d70a0ef          	jal	80025cf6 <printf>
    8001b124:	4511                	li	a0,4
    8001b126:	ad1e50ef          	jal	80000bf6 <goto_priv>
    8001b12a:	b82e60ef          	jal	800014ac <reset_state>
}
    8001b12e:	60e2                	ld	ra,24(sp)
    8001b130:	6442                	ld	s0,16(sp)
    8001b132:	8526                	mv	a0,s1
    8001b134:	64a2                	ld	s1,8(sp)
    8001b136:	6105                	addi	sp,sp,32
    8001b138:	8082                	ret

000000008001b13a <instruction_guest_page_fault_4>:


bool instruction_guest_page_fault_4(){
    8001b13a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b13c:	0000c597          	auipc	a1,0xc
    8001b140:	02c58593          	addi	a1,a1,44 # 80027168 <__func__.3>
    8001b144:	0000d517          	auipc	a0,0xd
    8001b148:	bfc50513          	addi	a0,a0,-1028 # 80027d40 <__func__.0+0x2e0>
bool instruction_guest_page_fault_4(){
    8001b14c:	ec06                	sd	ra,24(sp)
    8001b14e:	e822                	sd	s0,16(sp)
    8001b150:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b152:	3a50a0ef          	jal	80025cf6 <printf>
    8001b156:	4529                	li	a0,10
    8001b158:	1a9090ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    8001b15c:	450d                	li	a0,3
    8001b15e:	a99e50ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001b162:	c7ee50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001b166:	ebce50ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001b16a:	d46e50ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_M);
    8001b16e:	4511                	li	a0,4
    8001b170:	a87e50ef          	jal	80000bf6 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    8001b174:	28005073          	csrwi	vsatp,0
    goto_priv(PRIV_VS);
    8001b178:	4509                	li	a0,2
    8001b17a:	a7de50ef          	jal	80000bf6 <goto_priv>


    //特权模式在VS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，G阶段地址翻译一级页表项没有执行权限的页面中执行，pte.x=0
    addr = vs_page_base(VSURWX_GRW);
    TEST_SETUP_EXCEPT();
    8001b17e:	0330000f          	fence	rw,rw
    8001b182:	0002e417          	auipc	s0,0x2e
    8001b186:	e8e40413          	addi	s0,s0,-370 # 80049010 <excpt>
    8001b18a:	4785                	li	a5,1
    8001b18c:	0002e717          	auipc	a4,0x2e
    8001b190:	ea073e23          	sd	zero,-324(a4) # 80049048 <excpt+0x38>
    8001b194:	00f41023          	sh	a5,0(s0)
    8001b198:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(addr); 
    8001b19c:	000807b7          	lui	a5,0x80
    8001b1a0:	07b5                	addi	a5,a5,13 # 8000d <_test_table_size+0x8000c>
    8001b1a2:	07b6                	slli	a5,a5,0xd
    8001b1a4:	00000297          	auipc	t0,0x0
    8001b1a8:	00c28293          	addi	t0,t0,12 # 8001b1b0 <instruction_guest_page_fault_4+0x76>
    8001b1ac:	02543c23          	sd	t0,56(s0)
    8001b1b0:	8782                	jr	a5

    printf("%d\n",excpt.cause);
    8001b1b2:	640c                	ld	a1,8(s0)
    8001b1b4:	0000d517          	auipc	a0,0xd
    8001b1b8:	6d450513          	addi	a0,a0,1748 # 80028888 <__func__.0+0xe28>
    8001b1bc:	33b0a0ef          	jal	80025cf6 <printf>
    printf("%d\n",excpt.triggered);
    8001b1c0:	0002e597          	auipc	a1,0x2e
    8001b1c4:	e515c583          	lbu	a1,-431(a1) # 80049011 <excpt+0x1>
    8001b1c8:	0000d517          	auipc	a0,0xd
    8001b1cc:	6c050513          	addi	a0,a0,1728 # 80028888 <__func__.0+0xe28>
    8001b1d0:	3270a0ef          	jal	80025cf6 <printf>

    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    8001b1d4:	08200593          	li	a1,130
    8001b1d8:	00013617          	auipc	a2,0x13
    8001b1dc:	ee860613          	addi	a2,a2,-280 # 8002e0c0 <__func__.0+0x6660>
    8001b1e0:	0000d517          	auipc	a0,0xd
    8001b1e4:	b7850513          	addi	a0,a0,-1160 # 80027d58 <__func__.0+0x2f8>
    8001b1e8:	30f0a0ef          	jal	80025cf6 <printf>
    8001b1ec:	0002e797          	auipc	a5,0x2e
    8001b1f0:	e257c783          	lbu	a5,-475(a5) # 80049011 <excpt+0x1>
    8001b1f4:	0000d597          	auipc	a1,0xd
    8001b1f8:	b3c58593          	addi	a1,a1,-1220 # 80027d30 <__func__.0+0x2d0>
    8001b1fc:	cf89                	beqz	a5,8001b216 <instruction_guest_page_fault_4+0xdc>
    8001b1fe:	6418                	ld	a4,8(s0)
    8001b200:	47d1                	li	a5,20
    8001b202:	0000d597          	auipc	a1,0xd
    8001b206:	b1e58593          	addi	a1,a1,-1250 # 80027d20 <__func__.0+0x2c0>
    8001b20a:	00f70663          	beq	a4,a5,8001b216 <instruction_guest_page_fault_4+0xdc>
    8001b20e:	0000d597          	auipc	a1,0xd
    8001b212:	b2258593          	addi	a1,a1,-1246 # 80027d30 <__func__.0+0x2d0>
    8001b216:	0000d517          	auipc	a0,0xd
    8001b21a:	b5a50513          	addi	a0,a0,-1190 # 80027d70 <__func__.0+0x310>
    8001b21e:	2d90a0ef          	jal	80025cf6 <printf>
    8001b222:	0002e797          	auipc	a5,0x2e
    8001b226:	def7c783          	lbu	a5,-529(a5) # 80049011 <excpt+0x1>
    8001b22a:	c789                	beqz	a5,8001b234 <instruction_guest_page_fault_4+0xfa>
    8001b22c:	6418                	ld	a4,8(s0)
    8001b22e:	47d1                	li	a5,20
    8001b230:	00f70c63          	beq	a4,a5,8001b248 <instruction_guest_page_fault_4+0x10e>
    8001b234:	0000d517          	auipc	a0,0xd
    8001b238:	b4450513          	addi	a0,a0,-1212 # 80027d78 <__func__.0+0x318>
    8001b23c:	2bb0a0ef          	jal	80025cf6 <printf>
    8001b240:	02900513          	li	a0,41
    8001b244:	0bd090ef          	jal	80024b00 <putchar>
    8001b248:	4529                	li	a0,10
    8001b24a:	0b7090ef          	jal	80024b00 <putchar>
    8001b24e:	0002e497          	auipc	s1,0x2e
    8001b252:	dc34c483          	lbu	s1,-573(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    8001b256:	0000d597          	auipc	a1,0xd
    8001b25a:	ada58593          	addi	a1,a1,-1318 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    8001b25e:	cc91                	beqz	s1,8001b27a <instruction_guest_page_fault_4+0x140>
    8001b260:	6418                	ld	a4,8(s0)
    8001b262:	47d1                	li	a5,20
    TEST_END();
    8001b264:	0000d597          	auipc	a1,0xd
    8001b268:	abc58593          	addi	a1,a1,-1348 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    8001b26c:	00f70763          	beq	a4,a5,8001b27a <instruction_guest_page_fault_4+0x140>
    8001b270:	4481                	li	s1,0
    TEST_END();
    8001b272:	0000d597          	auipc	a1,0xd
    8001b276:	abe58593          	addi	a1,a1,-1346 # 80027d30 <__func__.0+0x2d0>
    8001b27a:	0000d517          	auipc	a0,0xd
    8001b27e:	b5e50513          	addi	a0,a0,-1186 # 80027dd8 <__func__.0+0x378>
    8001b282:	2750a0ef          	jal	80025cf6 <printf>
    8001b286:	4511                	li	a0,4
    8001b288:	96fe50ef          	jal	80000bf6 <goto_priv>
    8001b28c:	a20e60ef          	jal	800014ac <reset_state>
}
    8001b290:	60e2                	ld	ra,24(sp)
    8001b292:	6442                	ld	s0,16(sp)
    8001b294:	8526                	mv	a0,s1
    8001b296:	64a2                	ld	s1,8(sp)
    8001b298:	6105                	addi	sp,sp,32
    8001b29a:	8082                	ret

000000008001b29c <instruction_guest_page_fault_5>:


bool instruction_guest_page_fault_5(){
    8001b29c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b29e:	0000c597          	auipc	a1,0xc
    8001b2a2:	eea58593          	addi	a1,a1,-278 # 80027188 <__func__.2>
    8001b2a6:	0000d517          	auipc	a0,0xd
    8001b2aa:	a9a50513          	addi	a0,a0,-1382 # 80027d40 <__func__.0+0x2e0>
bool instruction_guest_page_fault_5(){
    8001b2ae:	ec06                	sd	ra,24(sp)
    8001b2b0:	e822                	sd	s0,16(sp)
    8001b2b2:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b2b4:	2430a0ef          	jal	80025cf6 <printf>
    8001b2b8:	4529                	li	a0,10
    8001b2ba:	047090ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    8001b2be:	450d                	li	a0,3
    8001b2c0:	937e50ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001b2c4:	b1ce50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001b2c8:	d5ae50ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001b2cc:	be4e50ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;
    goto_priv(PRIV_M);
    8001b2d0:	4511                	li	a0,4
    8001b2d2:	925e50ef          	jal	80000bf6 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    8001b2d6:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_VS);
    8001b2da:	4509                	li	a0,2
    8001b2dc:	91be50ef          	jal	80000bf6 <goto_priv>

    //特权模式在VS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，G阶段地址翻译一级页表项无效，pte.v=0
    vaddr = vs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    8001b2e0:	0330000f          	fence	rw,rw
    8001b2e4:	0002e417          	auipc	s0,0x2e
    8001b2e8:	d2c40413          	addi	s0,s0,-724 # 80049010 <excpt>
    8001b2ec:	4785                	li	a5,1
    8001b2ee:	0002e717          	auipc	a4,0x2e
    8001b2f2:	d4073d23          	sd	zero,-678(a4) # 80049048 <excpt+0x38>
    8001b2f6:	00f41023          	sh	a5,0(s0)
    8001b2fa:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    8001b2fe:	400197b7          	lui	a5,0x40019
    8001b302:	078a                	slli	a5,a5,0x2
    8001b304:	00000297          	auipc	t0,0x0
    8001b308:	00c28293          	addi	t0,t0,12 # 8001b310 <instruction_guest_page_fault_5+0x74>
    8001b30c:	02543c23          	sd	t0,56(s0)
    8001b310:	8782                	jr	a5


    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    8001b312:	08200593          	li	a1,130
    8001b316:	00013617          	auipc	a2,0x13
    8001b31a:	e0a60613          	addi	a2,a2,-502 # 8002e120 <__func__.0+0x66c0>
    8001b31e:	0000d517          	auipc	a0,0xd
    8001b322:	a3a50513          	addi	a0,a0,-1478 # 80027d58 <__func__.0+0x2f8>
    8001b326:	1d10a0ef          	jal	80025cf6 <printf>
    8001b32a:	0002e797          	auipc	a5,0x2e
    8001b32e:	ce77c783          	lbu	a5,-793(a5) # 80049011 <excpt+0x1>
    8001b332:	0000d597          	auipc	a1,0xd
    8001b336:	9fe58593          	addi	a1,a1,-1538 # 80027d30 <__func__.0+0x2d0>
    8001b33a:	cf89                	beqz	a5,8001b354 <instruction_guest_page_fault_5+0xb8>
    8001b33c:	6418                	ld	a4,8(s0)
    8001b33e:	47d1                	li	a5,20
    8001b340:	0000d597          	auipc	a1,0xd
    8001b344:	9e058593          	addi	a1,a1,-1568 # 80027d20 <__func__.0+0x2c0>
    8001b348:	00f70663          	beq	a4,a5,8001b354 <instruction_guest_page_fault_5+0xb8>
    8001b34c:	0000d597          	auipc	a1,0xd
    8001b350:	9e458593          	addi	a1,a1,-1564 # 80027d30 <__func__.0+0x2d0>
    8001b354:	0000d517          	auipc	a0,0xd
    8001b358:	a1c50513          	addi	a0,a0,-1508 # 80027d70 <__func__.0+0x310>
    8001b35c:	19b0a0ef          	jal	80025cf6 <printf>
    8001b360:	0002e797          	auipc	a5,0x2e
    8001b364:	cb17c783          	lbu	a5,-847(a5) # 80049011 <excpt+0x1>
    8001b368:	c789                	beqz	a5,8001b372 <instruction_guest_page_fault_5+0xd6>
    8001b36a:	6418                	ld	a4,8(s0)
    8001b36c:	47d1                	li	a5,20
    8001b36e:	00f70c63          	beq	a4,a5,8001b386 <instruction_guest_page_fault_5+0xea>
    8001b372:	0000d517          	auipc	a0,0xd
    8001b376:	a0650513          	addi	a0,a0,-1530 # 80027d78 <__func__.0+0x318>
    8001b37a:	17d0a0ef          	jal	80025cf6 <printf>
    8001b37e:	02900513          	li	a0,41
    8001b382:	77e090ef          	jal	80024b00 <putchar>
    8001b386:	4529                	li	a0,10
    8001b388:	778090ef          	jal	80024b00 <putchar>
    8001b38c:	0002e497          	auipc	s1,0x2e
    8001b390:	c854c483          	lbu	s1,-891(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    8001b394:	0000d597          	auipc	a1,0xd
    8001b398:	99c58593          	addi	a1,a1,-1636 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    8001b39c:	cc91                	beqz	s1,8001b3b8 <instruction_guest_page_fault_5+0x11c>
    8001b39e:	6418                	ld	a4,8(s0)
    8001b3a0:	47d1                	li	a5,20
    TEST_END();
    8001b3a2:	0000d597          	auipc	a1,0xd
    8001b3a6:	97e58593          	addi	a1,a1,-1666 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    8001b3aa:	00f70763          	beq	a4,a5,8001b3b8 <instruction_guest_page_fault_5+0x11c>
    8001b3ae:	4481                	li	s1,0
    TEST_END();
    8001b3b0:	0000d597          	auipc	a1,0xd
    8001b3b4:	98058593          	addi	a1,a1,-1664 # 80027d30 <__func__.0+0x2d0>
    8001b3b8:	0000d517          	auipc	a0,0xd
    8001b3bc:	a2050513          	addi	a0,a0,-1504 # 80027dd8 <__func__.0+0x378>
    8001b3c0:	1370a0ef          	jal	80025cf6 <printf>
    8001b3c4:	4511                	li	a0,4
    8001b3c6:	831e50ef          	jal	80000bf6 <goto_priv>
    8001b3ca:	8e2e60ef          	jal	800014ac <reset_state>

}
    8001b3ce:	60e2                	ld	ra,24(sp)
    8001b3d0:	6442                	ld	s0,16(sp)
    8001b3d2:	8526                	mv	a0,s1
    8001b3d4:	64a2                	ld	s1,8(sp)
    8001b3d6:	6105                	addi	sp,sp,32
    8001b3d8:	8082                	ret

000000008001b3da <instruction_guest_page_fault_6>:



bool instruction_guest_page_fault_6(){
    8001b3da:	1141                	addi	sp,sp,-16

    TEST_START();
    8001b3dc:	0000c597          	auipc	a1,0xc
    8001b3e0:	dcc58593          	addi	a1,a1,-564 # 800271a8 <__func__.1>
    8001b3e4:	0000d517          	auipc	a0,0xd
    8001b3e8:	95c50513          	addi	a0,a0,-1700 # 80027d40 <__func__.0+0x2e0>
bool instruction_guest_page_fault_6(){
    8001b3ec:	e406                	sd	ra,8(sp)
    8001b3ee:	e022                	sd	s0,0(sp)
    TEST_START();
    8001b3f0:	1070a0ef          	jal	80025cf6 <printf>
    8001b3f4:	4529                	li	a0,10
    8001b3f6:	70a090ef          	jal	80024b00 <putchar>
    // CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    // CSRS(CSR_MSTATUS, SSTATUS_SUM);


    goto_priv(PRIV_HS);
    8001b3fa:	450d                	li	a0,3
    8001b3fc:	ffae50ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001b400:	9e0e50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001b404:	c1ee50ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001b408:	aa8e50ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr ;


    goto_priv(PRIV_VS);
    8001b40c:	4509                	li	a0,2
    8001b40e:	fe8e50ef          	jal	80000bf6 <goto_priv>

    //执行取指指令时，在VS模式下
    vaddr = vs_page_base(VSRWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    8001b412:	0330000f          	fence	rw,rw
    8001b416:	0002e717          	auipc	a4,0x2e
    8001b41a:	bfa70713          	addi	a4,a4,-1030 # 80049010 <excpt>
    8001b41e:	4785                	li	a5,1
    8001b420:	0002e697          	auipc	a3,0x2e
    8001b424:	c206b423          	sd	zero,-984(a3) # 80049048 <excpt+0x38>
    8001b428:	00f71023          	sh	a5,0(a4)
    8001b42c:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    8001b430:	1782                	slli	a5,a5,0x20
    8001b432:	00000297          	auipc	t0,0x0
    8001b436:	00c28293          	addi	t0,t0,12 # 8001b43e <instruction_guest_page_fault_6+0x64>
    8001b43a:	02573c23          	sd	t0,56(a4)
    8001b43e:	8782                	jr	a5

    TEST_ASSERT("vs mode fetche instruction successful when pte.x=1",
    8001b440:	08200593          	li	a1,130
    8001b444:	00013617          	auipc	a2,0x13
    8001b448:	d4460613          	addi	a2,a2,-700 # 8002e188 <__func__.0+0x6728>
    8001b44c:	0000d517          	auipc	a0,0xd
    8001b450:	90c50513          	addi	a0,a0,-1780 # 80027d58 <__func__.0+0x2f8>
    8001b454:	0a30a0ef          	jal	80025cf6 <printf>
    8001b458:	0002e797          	auipc	a5,0x2e
    8001b45c:	bb97c783          	lbu	a5,-1095(a5) # 80049011 <excpt+0x1>
    8001b460:	0000d597          	auipc	a1,0xd
    8001b464:	8c058593          	addi	a1,a1,-1856 # 80027d20 <__func__.0+0x2c0>
    8001b468:	c789                	beqz	a5,8001b472 <instruction_guest_page_fault_6+0x98>
    8001b46a:	0000d597          	auipc	a1,0xd
    8001b46e:	8c658593          	addi	a1,a1,-1850 # 80027d30 <__func__.0+0x2d0>
    8001b472:	0000d517          	auipc	a0,0xd
    8001b476:	8fe50513          	addi	a0,a0,-1794 # 80027d70 <__func__.0+0x310>
    8001b47a:	07d0a0ef          	jal	80025cf6 <printf>
    8001b47e:	0002e797          	auipc	a5,0x2e
    8001b482:	b937c783          	lbu	a5,-1133(a5) # 80049011 <excpt+0x1>
    8001b486:	e7a1                	bnez	a5,8001b4ce <instruction_guest_page_fault_6+0xf4>
    8001b488:	4529                	li	a0,10
    8001b48a:	676090ef          	jal	80024b00 <putchar>
    8001b48e:	0002e797          	auipc	a5,0x2e
    8001b492:	b837c783          	lbu	a5,-1149(a5) # 80049011 <excpt+0x1>
    8001b496:	e795                	bnez	a5,8001b4c2 <instruction_guest_page_fault_6+0xe8>
    8001b498:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001b49a:	0000d597          	auipc	a1,0xd
    8001b49e:	88658593          	addi	a1,a1,-1914 # 80027d20 <__func__.0+0x2c0>
    8001b4a2:	0000d517          	auipc	a0,0xd
    8001b4a6:	93650513          	addi	a0,a0,-1738 # 80027dd8 <__func__.0+0x378>
    8001b4aa:	04d0a0ef          	jal	80025cf6 <printf>
    8001b4ae:	4511                	li	a0,4
    8001b4b0:	f46e50ef          	jal	80000bf6 <goto_priv>
    8001b4b4:	ff9e50ef          	jal	800014ac <reset_state>
}
    8001b4b8:	60a2                	ld	ra,8(sp)
    8001b4ba:	8522                	mv	a0,s0
    8001b4bc:	6402                	ld	s0,0(sp)
    8001b4be:	0141                	addi	sp,sp,16
    8001b4c0:	8082                	ret
    TEST_ASSERT("vs mode fetche instruction successful when pte.x=1",
    8001b4c2:	4401                	li	s0,0
    TEST_END();
    8001b4c4:	0000d597          	auipc	a1,0xd
    8001b4c8:	86c58593          	addi	a1,a1,-1940 # 80027d30 <__func__.0+0x2d0>
    8001b4cc:	bfd9                	j	8001b4a2 <instruction_guest_page_fault_6+0xc8>
    TEST_ASSERT("vs mode fetche instruction successful when pte.x=1",
    8001b4ce:	0000d517          	auipc	a0,0xd
    8001b4d2:	8aa50513          	addi	a0,a0,-1878 # 80027d78 <__func__.0+0x318>
    8001b4d6:	0210a0ef          	jal	80025cf6 <printf>
    8001b4da:	02900513          	li	a0,41
    8001b4de:	622090ef          	jal	80024b00 <putchar>
    8001b4e2:	b75d                	j	8001b488 <instruction_guest_page_fault_6+0xae>

000000008001b4e4 <instruction_guest_page_fault_7>:

bool instruction_guest_page_fault_7(){
    8001b4e4:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b4e6:	0000c597          	auipc	a1,0xc
    8001b4ea:	ce258593          	addi	a1,a1,-798 # 800271c8 <__func__.0>
    8001b4ee:	0000d517          	auipc	a0,0xd
    8001b4f2:	85250513          	addi	a0,a0,-1966 # 80027d40 <__func__.0+0x2e0>
bool instruction_guest_page_fault_7(){
    8001b4f6:	ec06                	sd	ra,24(sp)
    8001b4f8:	e822                	sd	s0,16(sp)
    8001b4fa:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b4fc:	7fa0a0ef          	jal	80025cf6 <printf>
    8001b500:	4529                	li	a0,10
    8001b502:	5fe090ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    8001b506:	450d                	li	a0,3
    8001b508:	eeee50ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001b50c:	8d4e50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001b510:	b12e50ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001b514:	99ce50ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    8001b518:	4509                	li	a0,2
    8001b51a:	edce50ef          	jal	80000bf6 <goto_priv>


    //执行取指指令二级地址翻译阶段时，pte.x=0
    vaddr = vs_page_base(VSRWX_GRW);
    TEST_SETUP_EXCEPT();
    8001b51e:	0330000f          	fence	rw,rw
    8001b522:	0002e417          	auipc	s0,0x2e
    8001b526:	aee40413          	addi	s0,s0,-1298 # 80049010 <excpt>
    8001b52a:	4785                	li	a5,1
    8001b52c:	0002e717          	auipc	a4,0x2e
    8001b530:	b0073e23          	sd	zero,-1252(a4) # 80049048 <excpt+0x38>
    8001b534:	00f41023          	sh	a5,0(s0)
    8001b538:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    8001b53c:	400137b7          	lui	a5,0x40013
    8001b540:	078a                	slli	a5,a5,0x2
    8001b542:	00000297          	auipc	t0,0x0
    8001b546:	00c28293          	addi	t0,t0,12 # 8001b54e <instruction_guest_page_fault_7+0x6a>
    8001b54a:	02543c23          	sd	t0,56(s0)
    8001b54e:	8782                	jr	a5

    TEST_ASSERT("vs mode first fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    8001b550:	08200593          	li	a1,130
    8001b554:	00013617          	auipc	a2,0x13
    8001b558:	c6c60613          	addi	a2,a2,-916 # 8002e1c0 <__func__.0+0x6760>
    8001b55c:	0000c517          	auipc	a0,0xc
    8001b560:	7fc50513          	addi	a0,a0,2044 # 80027d58 <__func__.0+0x2f8>
    8001b564:	7920a0ef          	jal	80025cf6 <printf>
    8001b568:	0002e797          	auipc	a5,0x2e
    8001b56c:	aa97c783          	lbu	a5,-1367(a5) # 80049011 <excpt+0x1>
    8001b570:	0000c597          	auipc	a1,0xc
    8001b574:	7c058593          	addi	a1,a1,1984 # 80027d30 <__func__.0+0x2d0>
    8001b578:	cf89                	beqz	a5,8001b592 <instruction_guest_page_fault_7+0xae>
    8001b57a:	6418                	ld	a4,8(s0)
    8001b57c:	47d1                	li	a5,20
    8001b57e:	0000c597          	auipc	a1,0xc
    8001b582:	7a258593          	addi	a1,a1,1954 # 80027d20 <__func__.0+0x2c0>
    8001b586:	00f70663          	beq	a4,a5,8001b592 <instruction_guest_page_fault_7+0xae>
    8001b58a:	0000c597          	auipc	a1,0xc
    8001b58e:	7a658593          	addi	a1,a1,1958 # 80027d30 <__func__.0+0x2d0>
    8001b592:	0000c517          	auipc	a0,0xc
    8001b596:	7de50513          	addi	a0,a0,2014 # 80027d70 <__func__.0+0x310>
    8001b59a:	75c0a0ef          	jal	80025cf6 <printf>
    8001b59e:	0002e797          	auipc	a5,0x2e
    8001b5a2:	a737c783          	lbu	a5,-1421(a5) # 80049011 <excpt+0x1>
    8001b5a6:	c789                	beqz	a5,8001b5b0 <instruction_guest_page_fault_7+0xcc>
    8001b5a8:	6418                	ld	a4,8(s0)
    8001b5aa:	47d1                	li	a5,20
    8001b5ac:	00f70c63          	beq	a4,a5,8001b5c4 <instruction_guest_page_fault_7+0xe0>
    8001b5b0:	0000c517          	auipc	a0,0xc
    8001b5b4:	7c850513          	addi	a0,a0,1992 # 80027d78 <__func__.0+0x318>
    8001b5b8:	73e0a0ef          	jal	80025cf6 <printf>
    8001b5bc:	02900513          	li	a0,41
    8001b5c0:	540090ef          	jal	80024b00 <putchar>
    8001b5c4:	4529                	li	a0,10
    8001b5c6:	53a090ef          	jal	80024b00 <putchar>
    8001b5ca:	0002e797          	auipc	a5,0x2e
    8001b5ce:	a477c783          	lbu	a5,-1465(a5) # 80049011 <excpt+0x1>
    8001b5d2:	4481                	li	s1,0
    8001b5d4:	c789                	beqz	a5,8001b5de <instruction_guest_page_fault_7+0xfa>
    8001b5d6:	6404                	ld	s1,8(s0)
    8001b5d8:	14b1                	addi	s1,s1,-20
    8001b5da:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_SETUP_EXCEPT();
    8001b5de:	0330000f          	fence	rw,rw
    8001b5e2:	4785                	li	a5,1
    8001b5e4:	0002e717          	auipc	a4,0x2e
    8001b5e8:	a6073223          	sd	zero,-1436(a4) # 80049048 <excpt+0x38>
    8001b5ec:	00f41023          	sh	a5,0(s0)
    8001b5f0:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    8001b5f4:	400137b7          	lui	a5,0x40013
    8001b5f8:	078a                	slli	a5,a5,0x2
    8001b5fa:	00000297          	auipc	t0,0x0
    8001b5fe:	00c28293          	addi	t0,t0,12 # 8001b606 <instruction_guest_page_fault_7+0x122>
    8001b602:	02543c23          	sd	t0,56(s0)
    8001b606:	8782                	jr	a5

    TEST_ASSERT("vs mode second fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    8001b608:	08200593          	li	a1,130
    8001b60c:	00013617          	auipc	a2,0x13
    8001b610:	c1c60613          	addi	a2,a2,-996 # 8002e228 <__func__.0+0x67c8>
    8001b614:	0000c517          	auipc	a0,0xc
    8001b618:	74450513          	addi	a0,a0,1860 # 80027d58 <__func__.0+0x2f8>
    8001b61c:	6da0a0ef          	jal	80025cf6 <printf>
    8001b620:	0002e797          	auipc	a5,0x2e
    8001b624:	9f17c783          	lbu	a5,-1551(a5) # 80049011 <excpt+0x1>
    8001b628:	0000c597          	auipc	a1,0xc
    8001b62c:	70858593          	addi	a1,a1,1800 # 80027d30 <__func__.0+0x2d0>
    8001b630:	cf89                	beqz	a5,8001b64a <instruction_guest_page_fault_7+0x166>
    8001b632:	6418                	ld	a4,8(s0)
    8001b634:	47d1                	li	a5,20
    8001b636:	0000c597          	auipc	a1,0xc
    8001b63a:	6ea58593          	addi	a1,a1,1770 # 80027d20 <__func__.0+0x2c0>
    8001b63e:	00f70663          	beq	a4,a5,8001b64a <instruction_guest_page_fault_7+0x166>
    8001b642:	0000c597          	auipc	a1,0xc
    8001b646:	6ee58593          	addi	a1,a1,1774 # 80027d30 <__func__.0+0x2d0>
    8001b64a:	0000c517          	auipc	a0,0xc
    8001b64e:	72650513          	addi	a0,a0,1830 # 80027d70 <__func__.0+0x310>
    8001b652:	6a40a0ef          	jal	80025cf6 <printf>
    8001b656:	0002e797          	auipc	a5,0x2e
    8001b65a:	9bb7c783          	lbu	a5,-1605(a5) # 80049011 <excpt+0x1>
    8001b65e:	c789                	beqz	a5,8001b668 <instruction_guest_page_fault_7+0x184>
    8001b660:	6418                	ld	a4,8(s0)
    8001b662:	47d1                	li	a5,20
    8001b664:	00f70c63          	beq	a4,a5,8001b67c <instruction_guest_page_fault_7+0x198>
    8001b668:	0000c517          	auipc	a0,0xc
    8001b66c:	71050513          	addi	a0,a0,1808 # 80027d78 <__func__.0+0x318>
    8001b670:	6860a0ef          	jal	80025cf6 <printf>
    8001b674:	02900513          	li	a0,41
    8001b678:	488090ef          	jal	80024b00 <putchar>
    8001b67c:	4529                	li	a0,10
    8001b67e:	482090ef          	jal	80024b00 <putchar>
    8001b682:	c095                	beqz	s1,8001b6a6 <instruction_guest_page_fault_7+0x1c2>
    8001b684:	0002e497          	auipc	s1,0x2e
    8001b688:	98d4c483          	lbu	s1,-1651(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    8001b68c:	0000c597          	auipc	a1,0xc
    8001b690:	6a458593          	addi	a1,a1,1700 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode second fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    8001b694:	cc91                	beqz	s1,8001b6b0 <instruction_guest_page_fault_7+0x1cc>
    8001b696:	6418                	ld	a4,8(s0)
    8001b698:	47d1                	li	a5,20
    TEST_END();
    8001b69a:	0000c597          	auipc	a1,0xc
    8001b69e:	68658593          	addi	a1,a1,1670 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode second fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    8001b6a2:	00f70763          	beq	a4,a5,8001b6b0 <instruction_guest_page_fault_7+0x1cc>
    8001b6a6:	4481                	li	s1,0
    TEST_END();
    8001b6a8:	0000c597          	auipc	a1,0xc
    8001b6ac:	68858593          	addi	a1,a1,1672 # 80027d30 <__func__.0+0x2d0>
    8001b6b0:	0000c517          	auipc	a0,0xc
    8001b6b4:	72850513          	addi	a0,a0,1832 # 80027dd8 <__func__.0+0x378>
    8001b6b8:	63e0a0ef          	jal	80025cf6 <printf>
    8001b6bc:	4511                	li	a0,4
    8001b6be:	d38e50ef          	jal	80000bf6 <goto_priv>
    8001b6c2:	debe50ef          	jal	800014ac <reset_state>
    8001b6c6:	60e2                	ld	ra,24(sp)
    8001b6c8:	6442                	ld	s0,16(sp)
    8001b6ca:	8526                	mv	a0,s1
    8001b6cc:	64a2                	ld	s1,8(sp)
    8001b6ce:	6105                	addi	sp,sp,32
    8001b6d0:	8082                	ret

000000008001b6d2 <load_access_fault_1>:
#include <page_tables.h>




bool load_access_fault_1(){
    8001b6d2:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b6d4:	0000c597          	auipc	a1,0xc
    8001b6d8:	b1458593          	addi	a1,a1,-1260 # 800271e8 <__func__.39>
    8001b6dc:	0000c517          	auipc	a0,0xc
    8001b6e0:	66450513          	addi	a0,a0,1636 # 80027d40 <__func__.0+0x2e0>
bool load_access_fault_1(){
    8001b6e4:	ec06                	sd	ra,24(sp)
    8001b6e6:	e822                	sd	s0,16(sp)
    8001b6e8:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b6ea:	60c0a0ef          	jal	80025cf6 <printf>
    8001b6ee:	4529                	li	a0,10
    8001b6f0:	410090ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001b6f4:	4511                	li	a0,4
    8001b6f6:	d00e50ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b6fa:	3a005073          	csrwi	pmpcfg0,0
    
    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位（清除）
    8001b6fe:	10000793          	li	a5,256
    8001b702:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b706:	20000793          	li	a5,512
    8001b70a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b70e:	40000793          	li	a5,1024
    8001b712:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b716:	6785                	lui	a5,0x1
    8001b718:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b71c:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b720:	4785                	li	a5,1
    8001b722:	07fe                	slli	a5,a5,0x1f
    8001b724:	4705                	li	a4,1
    8001b726:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b72a:	08100793          	li	a5,129
    8001b72e:	07e2                	slli	a5,a5,0x18
    8001b730:	3b179073          	csrw	pmpaddr1,a5
    // sfence();
    // hfence();
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b734:	67a1                	lui	a5,0x8
    8001b736:	3a07a073          	csrs	pmpcfg0,a5
    
    TEST_SETUP_EXCEPT();
    8001b73a:	0330000f          	fence	rw,rw
    8001b73e:	0002e417          	auipc	s0,0x2e
    8001b742:	8d240413          	addi	s0,s0,-1838 # 80049010 <excpt>
    8001b746:	0002e797          	auipc	a5,0x2e
    8001b74a:	9007b123          	sd	zero,-1790(a5) # 80049048 <excpt+0x38>
    8001b74e:	00e41023          	sh	a4,0(s0)
    8001b752:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8001b756:	02171793          	slli	a5,a4,0x21
    8001b75a:	40078793          	addi	a5,a5,1024
    8001b75e:	00078783          	lb	a5,0(a5)

    lb(0x80000100UL << 2);    //访问区域内地址


    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",        //预期产生load access fault
    8001b762:	08200593          	li	a1,130
    8001b766:	00013617          	auipc	a2,0x13
    8001b76a:	b2a60613          	addi	a2,a2,-1238 # 8002e290 <__func__.0+0x6830>
    8001b76e:	0000c517          	auipc	a0,0xc
    8001b772:	5ea50513          	addi	a0,a0,1514 # 80027d58 <__func__.0+0x2f8>
    8001b776:	5800a0ef          	jal	80025cf6 <printf>
    8001b77a:	0002e797          	auipc	a5,0x2e
    8001b77e:	8977c783          	lbu	a5,-1897(a5) # 80049011 <excpt+0x1>
    8001b782:	0000c597          	auipc	a1,0xc
    8001b786:	5ae58593          	addi	a1,a1,1454 # 80027d30 <__func__.0+0x2d0>
    8001b78a:	cf89                	beqz	a5,8001b7a4 <load_access_fault_1+0xd2>
    8001b78c:	6418                	ld	a4,8(s0)
    8001b78e:	4795                	li	a5,5
    8001b790:	0000c597          	auipc	a1,0xc
    8001b794:	59058593          	addi	a1,a1,1424 # 80027d20 <__func__.0+0x2c0>
    8001b798:	00f70663          	beq	a4,a5,8001b7a4 <load_access_fault_1+0xd2>
    8001b79c:	0000c597          	auipc	a1,0xc
    8001b7a0:	59458593          	addi	a1,a1,1428 # 80027d30 <__func__.0+0x2d0>
    8001b7a4:	0000c517          	auipc	a0,0xc
    8001b7a8:	5cc50513          	addi	a0,a0,1484 # 80027d70 <__func__.0+0x310>
    8001b7ac:	54a0a0ef          	jal	80025cf6 <printf>
    8001b7b0:	0002e797          	auipc	a5,0x2e
    8001b7b4:	8617c783          	lbu	a5,-1951(a5) # 80049011 <excpt+0x1>
    8001b7b8:	c789                	beqz	a5,8001b7c2 <load_access_fault_1+0xf0>
    8001b7ba:	6418                	ld	a4,8(s0)
    8001b7bc:	4795                	li	a5,5
    8001b7be:	00f70c63          	beq	a4,a5,8001b7d6 <load_access_fault_1+0x104>
    8001b7c2:	0000c517          	auipc	a0,0xc
    8001b7c6:	5b650513          	addi	a0,a0,1462 # 80027d78 <__func__.0+0x318>
    8001b7ca:	52c0a0ef          	jal	80025cf6 <printf>
    8001b7ce:	02900513          	li	a0,41
    8001b7d2:	32e090ef          	jal	80024b00 <putchar>
    8001b7d6:	4529                	li	a0,10
    8001b7d8:	328090ef          	jal	80024b00 <putchar>
    8001b7dc:	0002e497          	auipc	s1,0x2e
    8001b7e0:	8354c483          	lbu	s1,-1995(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001b7e4:	0000c597          	auipc	a1,0xc
    8001b7e8:	54c58593          	addi	a1,a1,1356 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",        //预期产生load access fault
    8001b7ec:	cc91                	beqz	s1,8001b808 <load_access_fault_1+0x136>
    8001b7ee:	6418                	ld	a4,8(s0)
    8001b7f0:	4795                	li	a5,5
    TEST_END();
    8001b7f2:	0000c597          	auipc	a1,0xc
    8001b7f6:	52e58593          	addi	a1,a1,1326 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",        //预期产生load access fault
    8001b7fa:	00f70763          	beq	a4,a5,8001b808 <load_access_fault_1+0x136>
    8001b7fe:	4481                	li	s1,0
    TEST_END();
    8001b800:	0000c597          	auipc	a1,0xc
    8001b804:	53058593          	addi	a1,a1,1328 # 80027d30 <__func__.0+0x2d0>
    8001b808:	0000c517          	auipc	a0,0xc
    8001b80c:	5d050513          	addi	a0,a0,1488 # 80027dd8 <__func__.0+0x378>
    8001b810:	4e60a0ef          	jal	80025cf6 <printf>
    8001b814:	4511                	li	a0,4
    8001b816:	be0e50ef          	jal	80000bf6 <goto_priv>
    8001b81a:	c93e50ef          	jal	800014ac <reset_state>
}
    8001b81e:	60e2                	ld	ra,24(sp)
    8001b820:	6442                	ld	s0,16(sp)
    8001b822:	8526                	mv	a0,s1
    8001b824:	64a2                	ld	s1,8(sp)
    8001b826:	6105                	addi	sp,sp,32
    8001b828:	8082                	ret

000000008001b82a <load_access_fault_2>:

bool load_access_fault_2(){
    8001b82a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b82c:	0000c597          	auipc	a1,0xc
    8001b830:	9d458593          	addi	a1,a1,-1580 # 80027200 <__func__.38>
    8001b834:	0000c517          	auipc	a0,0xc
    8001b838:	50c50513          	addi	a0,a0,1292 # 80027d40 <__func__.0+0x2e0>
bool load_access_fault_2(){
    8001b83c:	ec06                	sd	ra,24(sp)
    8001b83e:	e822                	sd	s0,16(sp)
    8001b840:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b842:	4b40a0ef          	jal	80025cf6 <printf>
    8001b846:	4529                	li	a0,10
    8001b848:	2b8090ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001b84c:	4511                	li	a0,4
    8001b84e:	ba8e50ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0

    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b852:	3a005073          	csrwi	pmpcfg0,0

    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b856:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b85a:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b85e:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b862:	3a046073          	csrsi	pmpcfg0,8

    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b866:	10000793          	li	a5,256
    8001b86a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b86e:	20000793          	li	a5,512
    8001b872:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b876:	40000793          	li	a5,1024
    8001b87a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b87e:	6785                	lui	a5,0x1
    8001b880:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b884:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, 0x88000000UL);
    8001b888:	47c5                	li	a5,17
    8001b88a:	07ee                	slli	a5,a5,0x1b
    8001b88c:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, 0x89000000UL);
    8001b890:	08900793          	li	a5,137
    8001b894:	07e2                	slli	a5,a5,0x18
    8001b896:	3b179073          	csrw	pmpaddr1,a5


    CSRS(CSR_PMPCFG0,1ULL << 7 );       //pmp0cfg的L位 
    8001b89a:	08000793          	li	a5,128
    8001b89e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );      //pmp1cfg的L位 
    8001b8a2:	67a1                	lui	a5,0x8
    8001b8a4:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001b8a8:	450d                	li	a0,3
    8001b8aa:	b4ce50ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b8ae:	0330000f          	fence	rw,rw
    8001b8b2:	0002d417          	auipc	s0,0x2d
    8001b8b6:	75e40413          	addi	s0,s0,1886 # 80049010 <excpt>
    8001b8ba:	4785                	li	a5,1
    8001b8bc:	0002d717          	auipc	a4,0x2d
    8001b8c0:	78073623          	sd	zero,1932(a4) # 80049048 <excpt+0x38>
    8001b8c4:	00f41023          	sh	a5,0(s0)
    8001b8c8:	0330000f          	fence	rw,rw
    8001b8cc:	008817b7          	lui	a5,0x881
    8001b8d0:	07aa                	slli	a5,a5,0xa
    8001b8d2:	00078783          	lb	a5,0(a5) # 881000 <STACK_SIZE+0x781000>

    lb(0x88100000UL << 2);

    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001b8d6:	08200593          	li	a1,130
    8001b8da:	00013617          	auipc	a2,0x13
    8001b8de:	9ee60613          	addi	a2,a2,-1554 # 8002e2c8 <__func__.0+0x6868>
    8001b8e2:	0000c517          	auipc	a0,0xc
    8001b8e6:	47650513          	addi	a0,a0,1142 # 80027d58 <__func__.0+0x2f8>
    8001b8ea:	40c0a0ef          	jal	80025cf6 <printf>
    8001b8ee:	0002d797          	auipc	a5,0x2d
    8001b8f2:	7237c783          	lbu	a5,1827(a5) # 80049011 <excpt+0x1>
    8001b8f6:	0000c597          	auipc	a1,0xc
    8001b8fa:	43a58593          	addi	a1,a1,1082 # 80027d30 <__func__.0+0x2d0>
    8001b8fe:	cf89                	beqz	a5,8001b918 <load_access_fault_2+0xee>
    8001b900:	6418                	ld	a4,8(s0)
    8001b902:	4795                	li	a5,5
    8001b904:	0000c597          	auipc	a1,0xc
    8001b908:	41c58593          	addi	a1,a1,1052 # 80027d20 <__func__.0+0x2c0>
    8001b90c:	00f70663          	beq	a4,a5,8001b918 <load_access_fault_2+0xee>
    8001b910:	0000c597          	auipc	a1,0xc
    8001b914:	42058593          	addi	a1,a1,1056 # 80027d30 <__func__.0+0x2d0>
    8001b918:	0000c517          	auipc	a0,0xc
    8001b91c:	45850513          	addi	a0,a0,1112 # 80027d70 <__func__.0+0x310>
    8001b920:	3d60a0ef          	jal	80025cf6 <printf>
    8001b924:	0002d797          	auipc	a5,0x2d
    8001b928:	6ed7c783          	lbu	a5,1773(a5) # 80049011 <excpt+0x1>
    8001b92c:	c789                	beqz	a5,8001b936 <load_access_fault_2+0x10c>
    8001b92e:	6418                	ld	a4,8(s0)
    8001b930:	4795                	li	a5,5
    8001b932:	00f70c63          	beq	a4,a5,8001b94a <load_access_fault_2+0x120>
    8001b936:	0000c517          	auipc	a0,0xc
    8001b93a:	44250513          	addi	a0,a0,1090 # 80027d78 <__func__.0+0x318>
    8001b93e:	3b80a0ef          	jal	80025cf6 <printf>
    8001b942:	02900513          	li	a0,41
    8001b946:	1ba090ef          	jal	80024b00 <putchar>
    8001b94a:	4529                	li	a0,10
    8001b94c:	1b4090ef          	jal	80024b00 <putchar>
    8001b950:	0002d497          	auipc	s1,0x2d
    8001b954:	6c14c483          	lbu	s1,1729(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001b958:	0000c597          	auipc	a1,0xc
    8001b95c:	3d858593          	addi	a1,a1,984 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001b960:	cc91                	beqz	s1,8001b97c <load_access_fault_2+0x152>
    8001b962:	6418                	ld	a4,8(s0)
    8001b964:	4795                	li	a5,5
    TEST_END();
    8001b966:	0000c597          	auipc	a1,0xc
    8001b96a:	3ba58593          	addi	a1,a1,954 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001b96e:	00f70763          	beq	a4,a5,8001b97c <load_access_fault_2+0x152>
    8001b972:	4481                	li	s1,0
    TEST_END();
    8001b974:	0000c597          	auipc	a1,0xc
    8001b978:	3bc58593          	addi	a1,a1,956 # 80027d30 <__func__.0+0x2d0>
    8001b97c:	0000c517          	auipc	a0,0xc
    8001b980:	45c50513          	addi	a0,a0,1116 # 80027dd8 <__func__.0+0x378>
    8001b984:	3720a0ef          	jal	80025cf6 <printf>
    8001b988:	4511                	li	a0,4
    8001b98a:	a6ce50ef          	jal	80000bf6 <goto_priv>
    8001b98e:	b1fe50ef          	jal	800014ac <reset_state>
}
    8001b992:	60e2                	ld	ra,24(sp)
    8001b994:	6442                	ld	s0,16(sp)
    8001b996:	8526                	mv	a0,s1
    8001b998:	64a2                	ld	s1,8(sp)
    8001b99a:	6105                	addi	sp,sp,32
    8001b99c:	8082                	ret

000000008001b99e <load_access_fault_3>:


bool load_access_fault_3(){
    8001b99e:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b9a0:	0000c597          	auipc	a1,0xc
    8001b9a4:	87858593          	addi	a1,a1,-1928 # 80027218 <__func__.37>
    8001b9a8:	0000c517          	auipc	a0,0xc
    8001b9ac:	39850513          	addi	a0,a0,920 # 80027d40 <__func__.0+0x2e0>
bool load_access_fault_3(){
    8001b9b0:	ec06                	sd	ra,24(sp)
    8001b9b2:	e822                	sd	s0,16(sp)
    8001b9b4:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b9b6:	3400a0ef          	jal	80025cf6 <printf>
    8001b9ba:	4529                	li	a0,10
    8001b9bc:	144090ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001b9c0:	4511                	li	a0,4
    8001b9c2:	a34e50ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b9c6:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b9ca:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b9ce:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b9d2:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b9d6:	3a046073          	csrsi	pmpcfg0,8

    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b9da:	10000793          	li	a5,256
    8001b9de:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b9e2:	20000793          	li	a5,512
    8001b9e6:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b9ea:	40000793          	li	a5,1024
    8001b9ee:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b9f2:	6785                	lui	a5,0x1
    8001b9f4:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b9f8:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b9fc:	4785                	li	a5,1
    8001b9fe:	07fe                	slli	a5,a5,0x1f
    8001ba00:	4485                	li	s1,1
    8001ba02:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001ba06:	08100793          	li	a5,129
    8001ba0a:	07e2                	slli	a5,a5,0x18
    8001ba0c:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001ba10:	08000793          	li	a5,128
    8001ba14:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001ba18:	67a1                	lui	a5,0x8
    8001ba1a:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001ba1e:	8526                	mv	a0,s1
    8001ba20:	9d6e50ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001ba24:	0330000f          	fence	rw,rw
    8001ba28:	0002d417          	auipc	s0,0x2d
    8001ba2c:	5e840413          	addi	s0,s0,1512 # 80049010 <excpt>
    8001ba30:	0002d797          	auipc	a5,0x2d
    8001ba34:	6007bc23          	sd	zero,1560(a5) # 80049048 <excpt+0x38>
    8001ba38:	00941023          	sh	s1,0(s0)
    8001ba3c:	0330000f          	fence	rw,rw
    8001ba40:	02149793          	slli	a5,s1,0x21
    8001ba44:	40078793          	addi	a5,a5,1024
    8001ba48:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001ba4c:	08200593          	li	a1,130
    8001ba50:	00013617          	auipc	a2,0x13
    8001ba54:	8b060613          	addi	a2,a2,-1872 # 8002e300 <__func__.0+0x68a0>
    8001ba58:	0000c517          	auipc	a0,0xc
    8001ba5c:	30050513          	addi	a0,a0,768 # 80027d58 <__func__.0+0x2f8>
    8001ba60:	2960a0ef          	jal	80025cf6 <printf>
    8001ba64:	0002d797          	auipc	a5,0x2d
    8001ba68:	5ad7c783          	lbu	a5,1453(a5) # 80049011 <excpt+0x1>
    8001ba6c:	0000c597          	auipc	a1,0xc
    8001ba70:	2c458593          	addi	a1,a1,708 # 80027d30 <__func__.0+0x2d0>
    8001ba74:	cf89                	beqz	a5,8001ba8e <load_access_fault_3+0xf0>
    8001ba76:	6418                	ld	a4,8(s0)
    8001ba78:	4795                	li	a5,5
    8001ba7a:	0000c597          	auipc	a1,0xc
    8001ba7e:	2a658593          	addi	a1,a1,678 # 80027d20 <__func__.0+0x2c0>
    8001ba82:	00f70663          	beq	a4,a5,8001ba8e <load_access_fault_3+0xf0>
    8001ba86:	0000c597          	auipc	a1,0xc
    8001ba8a:	2aa58593          	addi	a1,a1,682 # 80027d30 <__func__.0+0x2d0>
    8001ba8e:	0000c517          	auipc	a0,0xc
    8001ba92:	2e250513          	addi	a0,a0,738 # 80027d70 <__func__.0+0x310>
    8001ba96:	2600a0ef          	jal	80025cf6 <printf>
    8001ba9a:	0002d797          	auipc	a5,0x2d
    8001ba9e:	5777c783          	lbu	a5,1399(a5) # 80049011 <excpt+0x1>
    8001baa2:	c789                	beqz	a5,8001baac <load_access_fault_3+0x10e>
    8001baa4:	6418                	ld	a4,8(s0)
    8001baa6:	4795                	li	a5,5
    8001baa8:	00f70c63          	beq	a4,a5,8001bac0 <load_access_fault_3+0x122>
    8001baac:	0000c517          	auipc	a0,0xc
    8001bab0:	2cc50513          	addi	a0,a0,716 # 80027d78 <__func__.0+0x318>
    8001bab4:	2420a0ef          	jal	80025cf6 <printf>
    8001bab8:	02900513          	li	a0,41
    8001babc:	044090ef          	jal	80024b00 <putchar>
    8001bac0:	4529                	li	a0,10
    8001bac2:	03e090ef          	jal	80024b00 <putchar>
    8001bac6:	0002d497          	auipc	s1,0x2d
    8001baca:	54b4c483          	lbu	s1,1355(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001bace:	0000c597          	auipc	a1,0xc
    8001bad2:	26258593          	addi	a1,a1,610 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001bad6:	cc91                	beqz	s1,8001baf2 <load_access_fault_3+0x154>
    8001bad8:	6418                	ld	a4,8(s0)
    8001bada:	4795                	li	a5,5
    TEST_END();
    8001badc:	0000c597          	auipc	a1,0xc
    8001bae0:	24458593          	addi	a1,a1,580 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001bae4:	00f70763          	beq	a4,a5,8001baf2 <load_access_fault_3+0x154>
    8001bae8:	4481                	li	s1,0
    TEST_END();
    8001baea:	0000c597          	auipc	a1,0xc
    8001baee:	24658593          	addi	a1,a1,582 # 80027d30 <__func__.0+0x2d0>
    8001baf2:	0000c517          	auipc	a0,0xc
    8001baf6:	2e650513          	addi	a0,a0,742 # 80027dd8 <__func__.0+0x378>
    8001bafa:	1fc0a0ef          	jal	80025cf6 <printf>
    8001bafe:	4511                	li	a0,4
    8001bb00:	8f6e50ef          	jal	80000bf6 <goto_priv>
    8001bb04:	9a9e50ef          	jal	800014ac <reset_state>
}
    8001bb08:	60e2                	ld	ra,24(sp)
    8001bb0a:	6442                	ld	s0,16(sp)
    8001bb0c:	8526                	mv	a0,s1
    8001bb0e:	64a2                	ld	s1,8(sp)
    8001bb10:	6105                	addi	sp,sp,32
    8001bb12:	8082                	ret

000000008001bb14 <load_access_fault_4>:

bool load_access_fault_4(){
    8001bb14:	1101                	addi	sp,sp,-32

    TEST_START();
    8001bb16:	0000b597          	auipc	a1,0xb
    8001bb1a:	71a58593          	addi	a1,a1,1818 # 80027230 <__func__.36>
    8001bb1e:	0000c517          	auipc	a0,0xc
    8001bb22:	22250513          	addi	a0,a0,546 # 80027d40 <__func__.0+0x2e0>
bool load_access_fault_4(){
    8001bb26:	ec06                	sd	ra,24(sp)
    8001bb28:	e822                	sd	s0,16(sp)
    8001bb2a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001bb2c:	1ca0a0ef          	jal	80025cf6 <printf>
    8001bb30:	4529                	li	a0,10
    8001bb32:	7cf080ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001bb36:	4511                	li	a0,4
    8001bb38:	8bee50ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001bb3c:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001bb40:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001bb44:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001bb48:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001bb4c:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001bb50:	10000793          	li	a5,256
    8001bb54:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001bb58:	20000793          	li	a5,512
    8001bb5c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001bb60:	40000793          	li	a5,1024
    8001bb64:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001bb68:	6785                	lui	a5,0x1
    8001bb6a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001bb6e:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001bb72:	4785                	li	a5,1
    8001bb74:	07fe                	slli	a5,a5,0x1f
    8001bb76:	4485                	li	s1,1
    8001bb78:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001bb7c:	08100793          	li	a5,129
    8001bb80:	07e2                	slli	a5,a5,0x18
    8001bb82:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001bb86:	08000793          	li	a5,128
    8001bb8a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001bb8e:	67a1                	lui	a5,0x8
    8001bb90:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001bb94:	4501                	li	a0,0
    8001bb96:	860e50ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001bb9a:	0330000f          	fence	rw,rw
    8001bb9e:	0002d417          	auipc	s0,0x2d
    8001bba2:	47240413          	addi	s0,s0,1138 # 80049010 <excpt>
    8001bba6:	0002d797          	auipc	a5,0x2d
    8001bbaa:	4a07b123          	sd	zero,1186(a5) # 80049048 <excpt+0x38>
    8001bbae:	00941023          	sh	s1,0(s0)
    8001bbb2:	0330000f          	fence	rw,rw
    8001bbb6:	02149793          	slli	a5,s1,0x21
    8001bbba:	40078793          	addi	a5,a5,1024
    8001bbbe:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001bbc2:	08200593          	li	a1,130
    8001bbc6:	00012617          	auipc	a2,0x12
    8001bbca:	77260613          	addi	a2,a2,1906 # 8002e338 <__func__.0+0x68d8>
    8001bbce:	0000c517          	auipc	a0,0xc
    8001bbd2:	18a50513          	addi	a0,a0,394 # 80027d58 <__func__.0+0x2f8>
    8001bbd6:	1200a0ef          	jal	80025cf6 <printf>
    8001bbda:	0002d797          	auipc	a5,0x2d
    8001bbde:	4377c783          	lbu	a5,1079(a5) # 80049011 <excpt+0x1>
    8001bbe2:	0000c597          	auipc	a1,0xc
    8001bbe6:	14e58593          	addi	a1,a1,334 # 80027d30 <__func__.0+0x2d0>
    8001bbea:	cf89                	beqz	a5,8001bc04 <load_access_fault_4+0xf0>
    8001bbec:	6418                	ld	a4,8(s0)
    8001bbee:	4795                	li	a5,5
    8001bbf0:	0000c597          	auipc	a1,0xc
    8001bbf4:	13058593          	addi	a1,a1,304 # 80027d20 <__func__.0+0x2c0>
    8001bbf8:	00f70663          	beq	a4,a5,8001bc04 <load_access_fault_4+0xf0>
    8001bbfc:	0000c597          	auipc	a1,0xc
    8001bc00:	13458593          	addi	a1,a1,308 # 80027d30 <__func__.0+0x2d0>
    8001bc04:	0000c517          	auipc	a0,0xc
    8001bc08:	16c50513          	addi	a0,a0,364 # 80027d70 <__func__.0+0x310>
    8001bc0c:	0ea0a0ef          	jal	80025cf6 <printf>
    8001bc10:	0002d797          	auipc	a5,0x2d
    8001bc14:	4017c783          	lbu	a5,1025(a5) # 80049011 <excpt+0x1>
    8001bc18:	c789                	beqz	a5,8001bc22 <load_access_fault_4+0x10e>
    8001bc1a:	6418                	ld	a4,8(s0)
    8001bc1c:	4795                	li	a5,5
    8001bc1e:	00f70c63          	beq	a4,a5,8001bc36 <load_access_fault_4+0x122>
    8001bc22:	0000c517          	auipc	a0,0xc
    8001bc26:	15650513          	addi	a0,a0,342 # 80027d78 <__func__.0+0x318>
    8001bc2a:	0cc0a0ef          	jal	80025cf6 <printf>
    8001bc2e:	02900513          	li	a0,41
    8001bc32:	6cf080ef          	jal	80024b00 <putchar>
    8001bc36:	4529                	li	a0,10
    8001bc38:	6c9080ef          	jal	80024b00 <putchar>
    8001bc3c:	0002d497          	auipc	s1,0x2d
    8001bc40:	3d54c483          	lbu	s1,981(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001bc44:	0000c597          	auipc	a1,0xc
    8001bc48:	0ec58593          	addi	a1,a1,236 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001bc4c:	cc91                	beqz	s1,8001bc68 <load_access_fault_4+0x154>
    8001bc4e:	6418                	ld	a4,8(s0)
    8001bc50:	4795                	li	a5,5
    TEST_END();
    8001bc52:	0000c597          	auipc	a1,0xc
    8001bc56:	0ce58593          	addi	a1,a1,206 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001bc5a:	00f70763          	beq	a4,a5,8001bc68 <load_access_fault_4+0x154>
    8001bc5e:	4481                	li	s1,0
    TEST_END();
    8001bc60:	0000c597          	auipc	a1,0xc
    8001bc64:	0d058593          	addi	a1,a1,208 # 80027d30 <__func__.0+0x2d0>
    8001bc68:	0000c517          	auipc	a0,0xc
    8001bc6c:	17050513          	addi	a0,a0,368 # 80027dd8 <__func__.0+0x378>
    8001bc70:	0860a0ef          	jal	80025cf6 <printf>
    8001bc74:	4511                	li	a0,4
    8001bc76:	f81e40ef          	jal	80000bf6 <goto_priv>
    8001bc7a:	833e50ef          	jal	800014ac <reset_state>
}
    8001bc7e:	60e2                	ld	ra,24(sp)
    8001bc80:	6442                	ld	s0,16(sp)
    8001bc82:	8526                	mv	a0,s1
    8001bc84:	64a2                	ld	s1,8(sp)
    8001bc86:	6105                	addi	sp,sp,32
    8001bc88:	8082                	ret

000000008001bc8a <load_access_fault_5>:

bool load_access_fault_5(){
    8001bc8a:	1141                	addi	sp,sp,-16

    TEST_START();
    8001bc8c:	0000b597          	auipc	a1,0xb
    8001bc90:	5bc58593          	addi	a1,a1,1468 # 80027248 <__func__.35>
    8001bc94:	0000c517          	auipc	a0,0xc
    8001bc98:	0ac50513          	addi	a0,a0,172 # 80027d40 <__func__.0+0x2e0>
bool load_access_fault_5(){
    8001bc9c:	e406                	sd	ra,8(sp)
    8001bc9e:	e022                	sd	s0,0(sp)
    TEST_START();
    8001bca0:	0560a0ef          	jal	80025cf6 <printf>
    8001bca4:	4529                	li	a0,10
    8001bca6:	65b080ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001bcaa:	4511                	li	a0,4
    8001bcac:	f4be40ef          	jal	80000bf6 <goto_priv>
    printf("pmpcfg0=%llx\n",CSRR(CSR_PMPCFG0));
    8001bcb0:	3a0025f3          	csrr	a1,pmpcfg0
    8001bcb4:	00012517          	auipc	a0,0x12
    8001bcb8:	6bc50513          	addi	a0,a0,1724 # 8002e370 <__func__.0+0x6910>
    8001bcbc:	03a0a0ef          	jal	80025cf6 <printf>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001bcc0:	3a005073          	csrwi	pmpcfg0,0
    
    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001bcc4:	10000793          	li	a5,256
    8001bcc8:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001bccc:	20000793          	li	a5,512
    8001bcd0:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001bcd4:	40000793          	li	a5,1024
    8001bcd8:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001bcdc:	6785                	lui	a5,0x1
    8001bcde:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001bce2:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001bce6:	4785                	li	a5,1
    8001bce8:	07fe                	slli	a5,a5,0x1f
    8001bcea:	4705                	li	a4,1
    8001bcec:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001bcf0:	08100793          	li	a5,129
    8001bcf4:	07e2                	slli	a5,a5,0x18
    8001bcf6:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001bcfa:	67a1                	lui	a5,0x8
    8001bcfc:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001bd00:	0330000f          	fence	rw,rw
    8001bd04:	0002d417          	auipc	s0,0x2d
    8001bd08:	30c40413          	addi	s0,s0,780 # 80049010 <excpt>
    8001bd0c:	0002d797          	auipc	a5,0x2d
    8001bd10:	3207be23          	sd	zero,828(a5) # 80049048 <excpt+0x38>
    8001bd14:	00e41023          	sh	a4,0(s0)
    8001bd18:	0330000f          	fence	rw,rw
    8001bd1c:	02171793          	slli	a5,a4,0x21
    8001bd20:	40078793          	addi	a5,a5,1024
    8001bd24:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    printf("%d\n",excpt.triggered);
    8001bd28:	0002d597          	auipc	a1,0x2d
    8001bd2c:	2e95c583          	lbu	a1,745(a1) # 80049011 <excpt+0x1>
    8001bd30:	0000d517          	auipc	a0,0xd
    8001bd34:	b5850513          	addi	a0,a0,-1192 # 80028888 <__func__.0+0xe28>
    8001bd38:	7bf090ef          	jal	80025cf6 <printf>
    printf("%d\n",excpt.cause);
    8001bd3c:	640c                	ld	a1,8(s0)
    8001bd3e:	0000d517          	auipc	a0,0xd
    8001bd42:	b4a50513          	addi	a0,a0,-1206 # 80028888 <__func__.0+0xe28>
    8001bd46:	7b1090ef          	jal	80025cf6 <printf>



    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    8001bd4a:	08200593          	li	a1,130
    8001bd4e:	00012617          	auipc	a2,0x12
    8001bd52:	63260613          	addi	a2,a2,1586 # 8002e380 <__func__.0+0x6920>
    8001bd56:	0000c517          	auipc	a0,0xc
    8001bd5a:	00250513          	addi	a0,a0,2 # 80027d58 <__func__.0+0x2f8>
    8001bd5e:	799090ef          	jal	80025cf6 <printf>
    8001bd62:	0002d797          	auipc	a5,0x2d
    8001bd66:	2af7c783          	lbu	a5,687(a5) # 80049011 <excpt+0x1>
    8001bd6a:	0000c597          	auipc	a1,0xc
    8001bd6e:	fb658593          	addi	a1,a1,-74 # 80027d20 <__func__.0+0x2c0>
    8001bd72:	c789                	beqz	a5,8001bd7c <load_access_fault_5+0xf2>
    8001bd74:	0000c597          	auipc	a1,0xc
    8001bd78:	fbc58593          	addi	a1,a1,-68 # 80027d30 <__func__.0+0x2d0>
    8001bd7c:	0000c517          	auipc	a0,0xc
    8001bd80:	ff450513          	addi	a0,a0,-12 # 80027d70 <__func__.0+0x310>
    8001bd84:	773090ef          	jal	80025cf6 <printf>
    8001bd88:	0002d797          	auipc	a5,0x2d
    8001bd8c:	2897c783          	lbu	a5,649(a5) # 80049011 <excpt+0x1>
    8001bd90:	e7a1                	bnez	a5,8001bdd8 <load_access_fault_5+0x14e>
    8001bd92:	4529                	li	a0,10
    8001bd94:	56d080ef          	jal	80024b00 <putchar>
    8001bd98:	0002d797          	auipc	a5,0x2d
    8001bd9c:	2797c783          	lbu	a5,633(a5) # 80049011 <excpt+0x1>
    8001bda0:	e795                	bnez	a5,8001bdcc <load_access_fault_5+0x142>
    8001bda2:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END();
    8001bda4:	0000c597          	auipc	a1,0xc
    8001bda8:	f7c58593          	addi	a1,a1,-132 # 80027d20 <__func__.0+0x2c0>
    8001bdac:	0000c517          	auipc	a0,0xc
    8001bdb0:	02c50513          	addi	a0,a0,44 # 80027dd8 <__func__.0+0x378>
    8001bdb4:	743090ef          	jal	80025cf6 <printf>
    8001bdb8:	4511                	li	a0,4
    8001bdba:	e3de40ef          	jal	80000bf6 <goto_priv>
    8001bdbe:	eeee50ef          	jal	800014ac <reset_state>
}
    8001bdc2:	60a2                	ld	ra,8(sp)
    8001bdc4:	8522                	mv	a0,s0
    8001bdc6:	6402                	ld	s0,0(sp)
    8001bdc8:	0141                	addi	sp,sp,16
    8001bdca:	8082                	ret
    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    8001bdcc:	4401                	li	s0,0
    TEST_END();
    8001bdce:	0000c597          	auipc	a1,0xc
    8001bdd2:	f6258593          	addi	a1,a1,-158 # 80027d30 <__func__.0+0x2d0>
    8001bdd6:	bfd9                	j	8001bdac <load_access_fault_5+0x122>
    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    8001bdd8:	0000c517          	auipc	a0,0xc
    8001bddc:	fa050513          	addi	a0,a0,-96 # 80027d78 <__func__.0+0x318>
    8001bde0:	717090ef          	jal	80025cf6 <printf>
    8001bde4:	02900513          	li	a0,41
    8001bde8:	519080ef          	jal	80024b00 <putchar>
    8001bdec:	b75d                	j	8001bd92 <load_access_fault_5+0x108>

000000008001bdee <load_access_fault_6>:


bool load_access_fault_6(){
    8001bdee:	1101                	addi	sp,sp,-32

    TEST_START();
    8001bdf0:	0000b597          	auipc	a1,0xb
    8001bdf4:	47058593          	addi	a1,a1,1136 # 80027260 <__func__.34>
    8001bdf8:	0000c517          	auipc	a0,0xc
    8001bdfc:	f4850513          	addi	a0,a0,-184 # 80027d40 <__func__.0+0x2e0>
bool load_access_fault_6(){
    8001be00:	ec06                	sd	ra,24(sp)
    8001be02:	e822                	sd	s0,16(sp)
    8001be04:	e426                	sd	s1,8(sp)
    TEST_START();
    8001be06:	6f1090ef          	jal	80025cf6 <printf>
    8001be0a:	4529                	li	a0,10
    8001be0c:	4f5080ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001be10:	4511                	li	a0,4
    8001be12:	de5e40ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001be16:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001be1a:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001be1e:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001be22:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001be26:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001be2a:	10000793          	li	a5,256
    8001be2e:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001be32:	20000793          	li	a5,512
    8001be36:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001be3a:	40000793          	li	a5,1024
    8001be3e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001be42:	6785                	lui	a5,0x1
    8001be44:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001be48:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001be4c:	4785                	li	a5,1
    8001be4e:	07fe                	slli	a5,a5,0x1f
    8001be50:	4485                	li	s1,1
    8001be52:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001be56:	08100793          	li	a5,129
    8001be5a:	07e2                	slli	a5,a5,0x18
    8001be5c:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );           //pmp0cfg的L位 
    8001be60:	08000793          	li	a5,128
    8001be64:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );          //pmp1cfg的L位 
    8001be68:	67a1                	lui	a5,0x8
    8001be6a:	3a07b073          	csrc	pmpcfg0,a5

    printf("%llx\n",CSRR(CSR_PMPADDR0));
    8001be6e:	3b0025f3          	csrr	a1,pmpaddr0
    8001be72:	00012517          	auipc	a0,0x12
    8001be76:	50650513          	addi	a0,a0,1286 # 8002e378 <__func__.0+0x6918>
    8001be7a:	67d090ef          	jal	80025cf6 <printf>
    printf("%llx\n",CSRR(CSR_PMPADDR1));
    8001be7e:	3b1025f3          	csrr	a1,pmpaddr1
    8001be82:	00012517          	auipc	a0,0x12
    8001be86:	4f650513          	addi	a0,a0,1270 # 8002e378 <__func__.0+0x6918>
    8001be8a:	66d090ef          	jal	80025cf6 <printf>
    goto_priv(PRIV_HS);
    8001be8e:	450d                	li	a0,3
    8001be90:	d67e40ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001be94:	0330000f          	fence	rw,rw
    8001be98:	0002d417          	auipc	s0,0x2d
    8001be9c:	17840413          	addi	s0,s0,376 # 80049010 <excpt>
    8001bea0:	0002d797          	auipc	a5,0x2d
    8001bea4:	1a07b423          	sd	zero,424(a5) # 80049048 <excpt+0x38>
    8001bea8:	00941023          	sh	s1,0(s0)
    8001beac:	0330000f          	fence	rw,rw
    8001beb0:	02149793          	slli	a5,s1,0x21
    8001beb4:	40078793          	addi	a5,a5,1024
    8001beb8:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001bebc:	08200593          	li	a1,130
    8001bec0:	00012617          	auipc	a2,0x12
    8001bec4:	4f860613          	addi	a2,a2,1272 # 8002e3b8 <__func__.0+0x6958>
    8001bec8:	0000c517          	auipc	a0,0xc
    8001becc:	e9050513          	addi	a0,a0,-368 # 80027d58 <__func__.0+0x2f8>
    8001bed0:	627090ef          	jal	80025cf6 <printf>
    8001bed4:	0002d797          	auipc	a5,0x2d
    8001bed8:	13d7c783          	lbu	a5,317(a5) # 80049011 <excpt+0x1>
    8001bedc:	0000c597          	auipc	a1,0xc
    8001bee0:	e5458593          	addi	a1,a1,-428 # 80027d30 <__func__.0+0x2d0>
    8001bee4:	cf89                	beqz	a5,8001befe <load_access_fault_6+0x110>
    8001bee6:	6418                	ld	a4,8(s0)
    8001bee8:	4795                	li	a5,5
    8001beea:	0000c597          	auipc	a1,0xc
    8001beee:	e3658593          	addi	a1,a1,-458 # 80027d20 <__func__.0+0x2c0>
    8001bef2:	00f70663          	beq	a4,a5,8001befe <load_access_fault_6+0x110>
    8001bef6:	0000c597          	auipc	a1,0xc
    8001befa:	e3a58593          	addi	a1,a1,-454 # 80027d30 <__func__.0+0x2d0>
    8001befe:	0000c517          	auipc	a0,0xc
    8001bf02:	e7250513          	addi	a0,a0,-398 # 80027d70 <__func__.0+0x310>
    8001bf06:	5f1090ef          	jal	80025cf6 <printf>
    8001bf0a:	0002d797          	auipc	a5,0x2d
    8001bf0e:	1077c783          	lbu	a5,263(a5) # 80049011 <excpt+0x1>
    8001bf12:	c789                	beqz	a5,8001bf1c <load_access_fault_6+0x12e>
    8001bf14:	6418                	ld	a4,8(s0)
    8001bf16:	4795                	li	a5,5
    8001bf18:	00f70c63          	beq	a4,a5,8001bf30 <load_access_fault_6+0x142>
    8001bf1c:	0000c517          	auipc	a0,0xc
    8001bf20:	e5c50513          	addi	a0,a0,-420 # 80027d78 <__func__.0+0x318>
    8001bf24:	5d3090ef          	jal	80025cf6 <printf>
    8001bf28:	02900513          	li	a0,41
    8001bf2c:	3d5080ef          	jal	80024b00 <putchar>
    8001bf30:	4529                	li	a0,10
    8001bf32:	3cf080ef          	jal	80024b00 <putchar>
    8001bf36:	0002d497          	auipc	s1,0x2d
    8001bf3a:	0db4c483          	lbu	s1,219(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001bf3e:	0000c597          	auipc	a1,0xc
    8001bf42:	df258593          	addi	a1,a1,-526 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001bf46:	cc91                	beqz	s1,8001bf62 <load_access_fault_6+0x174>
    8001bf48:	6418                	ld	a4,8(s0)
    8001bf4a:	4795                	li	a5,5
    TEST_END();
    8001bf4c:	0000c597          	auipc	a1,0xc
    8001bf50:	dd458593          	addi	a1,a1,-556 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001bf54:	00f70763          	beq	a4,a5,8001bf62 <load_access_fault_6+0x174>
    8001bf58:	4481                	li	s1,0
    TEST_END();
    8001bf5a:	0000c597          	auipc	a1,0xc
    8001bf5e:	dd658593          	addi	a1,a1,-554 # 80027d30 <__func__.0+0x2d0>
    8001bf62:	0000c517          	auipc	a0,0xc
    8001bf66:	e7650513          	addi	a0,a0,-394 # 80027dd8 <__func__.0+0x378>
    8001bf6a:	58d090ef          	jal	80025cf6 <printf>
    8001bf6e:	4511                	li	a0,4
    8001bf70:	c87e40ef          	jal	80000bf6 <goto_priv>
    8001bf74:	d38e50ef          	jal	800014ac <reset_state>
}
    8001bf78:	60e2                	ld	ra,24(sp)
    8001bf7a:	6442                	ld	s0,16(sp)
    8001bf7c:	8526                	mv	a0,s1
    8001bf7e:	64a2                	ld	s1,8(sp)
    8001bf80:	6105                	addi	sp,sp,32
    8001bf82:	8082                	ret

000000008001bf84 <load_access_fault_7>:


bool load_access_fault_7(){
    8001bf84:	1101                	addi	sp,sp,-32

    TEST_START();
    8001bf86:	0000b597          	auipc	a1,0xb
    8001bf8a:	2f258593          	addi	a1,a1,754 # 80027278 <__func__.33>
    8001bf8e:	0000c517          	auipc	a0,0xc
    8001bf92:	db250513          	addi	a0,a0,-590 # 80027d40 <__func__.0+0x2e0>
bool load_access_fault_7(){
    8001bf96:	ec06                	sd	ra,24(sp)
    8001bf98:	e822                	sd	s0,16(sp)
    8001bf9a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001bf9c:	55b090ef          	jal	80025cf6 <printf>
    8001bfa0:	4529                	li	a0,10
    8001bfa2:	35f080ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001bfa6:	4511                	li	a0,4
    8001bfa8:	c4fe40ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001bfac:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001bfb0:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001bfb4:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001bfb8:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001bfbc:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001bfc0:	10000793          	li	a5,256
    8001bfc4:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001bfc8:	20000793          	li	a5,512
    8001bfcc:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001bfd0:	40000793          	li	a5,1024
    8001bfd4:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001bfd8:	6785                	lui	a5,0x1
    8001bfda:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001bfde:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001bfe2:	4785                	li	a5,1
    8001bfe4:	07fe                	slli	a5,a5,0x1f
    8001bfe6:	4485                	li	s1,1
    8001bfe8:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001bfec:	08100793          	li	a5,129
    8001bff0:	07e2                	slli	a5,a5,0x18
    8001bff2:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001bff6:	08000793          	li	a5,128
    8001bffa:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001bffe:	67a1                	lui	a5,0x8
    8001c000:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001c004:	8526                	mv	a0,s1
    8001c006:	bf1e40ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c00a:	0330000f          	fence	rw,rw
    8001c00e:	0002d417          	auipc	s0,0x2d
    8001c012:	00240413          	addi	s0,s0,2 # 80049010 <excpt>
    8001c016:	0002d797          	auipc	a5,0x2d
    8001c01a:	0207b923          	sd	zero,50(a5) # 80049048 <excpt+0x38>
    8001c01e:	00941023          	sh	s1,0(s0)
    8001c022:	0330000f          	fence	rw,rw
    8001c026:	02149793          	slli	a5,s1,0x21
    8001c02a:	40078793          	addi	a5,a5,1024
    8001c02e:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001c032:	08200593          	li	a1,130
    8001c036:	00012617          	auipc	a2,0x12
    8001c03a:	3ba60613          	addi	a2,a2,954 # 8002e3f0 <__func__.0+0x6990>
    8001c03e:	0000c517          	auipc	a0,0xc
    8001c042:	d1a50513          	addi	a0,a0,-742 # 80027d58 <__func__.0+0x2f8>
    8001c046:	4b1090ef          	jal	80025cf6 <printf>
    8001c04a:	0002d797          	auipc	a5,0x2d
    8001c04e:	fc77c783          	lbu	a5,-57(a5) # 80049011 <excpt+0x1>
    8001c052:	0000c597          	auipc	a1,0xc
    8001c056:	cde58593          	addi	a1,a1,-802 # 80027d30 <__func__.0+0x2d0>
    8001c05a:	cf89                	beqz	a5,8001c074 <load_access_fault_7+0xf0>
    8001c05c:	6418                	ld	a4,8(s0)
    8001c05e:	4795                	li	a5,5
    8001c060:	0000c597          	auipc	a1,0xc
    8001c064:	cc058593          	addi	a1,a1,-832 # 80027d20 <__func__.0+0x2c0>
    8001c068:	00f70663          	beq	a4,a5,8001c074 <load_access_fault_7+0xf0>
    8001c06c:	0000c597          	auipc	a1,0xc
    8001c070:	cc458593          	addi	a1,a1,-828 # 80027d30 <__func__.0+0x2d0>
    8001c074:	0000c517          	auipc	a0,0xc
    8001c078:	cfc50513          	addi	a0,a0,-772 # 80027d70 <__func__.0+0x310>
    8001c07c:	47b090ef          	jal	80025cf6 <printf>
    8001c080:	0002d797          	auipc	a5,0x2d
    8001c084:	f917c783          	lbu	a5,-111(a5) # 80049011 <excpt+0x1>
    8001c088:	c789                	beqz	a5,8001c092 <load_access_fault_7+0x10e>
    8001c08a:	6418                	ld	a4,8(s0)
    8001c08c:	4795                	li	a5,5
    8001c08e:	00f70c63          	beq	a4,a5,8001c0a6 <load_access_fault_7+0x122>
    8001c092:	0000c517          	auipc	a0,0xc
    8001c096:	ce650513          	addi	a0,a0,-794 # 80027d78 <__func__.0+0x318>
    8001c09a:	45d090ef          	jal	80025cf6 <printf>
    8001c09e:	02900513          	li	a0,41
    8001c0a2:	25f080ef          	jal	80024b00 <putchar>
    8001c0a6:	4529                	li	a0,10
    8001c0a8:	259080ef          	jal	80024b00 <putchar>
    8001c0ac:	0002d497          	auipc	s1,0x2d
    8001c0b0:	f654c483          	lbu	s1,-155(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001c0b4:	0000c597          	auipc	a1,0xc
    8001c0b8:	c7c58593          	addi	a1,a1,-900 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001c0bc:	cc91                	beqz	s1,8001c0d8 <load_access_fault_7+0x154>
    8001c0be:	6418                	ld	a4,8(s0)
    8001c0c0:	4795                	li	a5,5
    TEST_END();
    8001c0c2:	0000c597          	auipc	a1,0xc
    8001c0c6:	c5e58593          	addi	a1,a1,-930 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001c0ca:	00f70763          	beq	a4,a5,8001c0d8 <load_access_fault_7+0x154>
    8001c0ce:	4481                	li	s1,0
    TEST_END();
    8001c0d0:	0000c597          	auipc	a1,0xc
    8001c0d4:	c6058593          	addi	a1,a1,-928 # 80027d30 <__func__.0+0x2d0>
    8001c0d8:	0000c517          	auipc	a0,0xc
    8001c0dc:	d0050513          	addi	a0,a0,-768 # 80027dd8 <__func__.0+0x378>
    8001c0e0:	417090ef          	jal	80025cf6 <printf>
    8001c0e4:	4511                	li	a0,4
    8001c0e6:	b11e40ef          	jal	80000bf6 <goto_priv>
    8001c0ea:	bc2e50ef          	jal	800014ac <reset_state>
}
    8001c0ee:	60e2                	ld	ra,24(sp)
    8001c0f0:	6442                	ld	s0,16(sp)
    8001c0f2:	8526                	mv	a0,s1
    8001c0f4:	64a2                	ld	s1,8(sp)
    8001c0f6:	6105                	addi	sp,sp,32
    8001c0f8:	8082                	ret

000000008001c0fa <load_access_fault_8>:

bool load_access_fault_8(){
    8001c0fa:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c0fc:	0000b597          	auipc	a1,0xb
    8001c100:	19458593          	addi	a1,a1,404 # 80027290 <__func__.32>
    8001c104:	0000c517          	auipc	a0,0xc
    8001c108:	c3c50513          	addi	a0,a0,-964 # 80027d40 <__func__.0+0x2e0>
bool load_access_fault_8(){
    8001c10c:	ec06                	sd	ra,24(sp)
    8001c10e:	e822                	sd	s0,16(sp)
    8001c110:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c112:	3e5090ef          	jal	80025cf6 <printf>
    8001c116:	4529                	li	a0,10
    8001c118:	1e9080ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001c11c:	4511                	li	a0,4
    8001c11e:	ad9e40ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c122:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c126:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c12a:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c12e:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c132:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c136:	10000793          	li	a5,256
    8001c13a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c13e:	20000793          	li	a5,512
    8001c142:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c146:	40000793          	li	a5,1024
    8001c14a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c14e:	6785                	lui	a5,0x1
    8001c150:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c154:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c158:	4785                	li	a5,1
    8001c15a:	07fe                	slli	a5,a5,0x1f
    8001c15c:	4485                	li	s1,1
    8001c15e:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c162:	08100793          	li	a5,129
    8001c166:	07e2                	slli	a5,a5,0x18
    8001c168:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c16c:	08000793          	li	a5,128
    8001c170:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c174:	67a1                	lui	a5,0x8
    8001c176:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001c17a:	4501                	li	a0,0
    8001c17c:	a7be40ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c180:	0330000f          	fence	rw,rw
    8001c184:	0002d417          	auipc	s0,0x2d
    8001c188:	e8c40413          	addi	s0,s0,-372 # 80049010 <excpt>
    8001c18c:	0002d797          	auipc	a5,0x2d
    8001c190:	ea07be23          	sd	zero,-324(a5) # 80049048 <excpt+0x38>
    8001c194:	00941023          	sh	s1,0(s0)
    8001c198:	0330000f          	fence	rw,rw
    8001c19c:	02149793          	slli	a5,s1,0x21
    8001c1a0:	40078793          	addi	a5,a5,1024
    8001c1a4:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001c1a8:	08200593          	li	a1,130
    8001c1ac:	00012617          	auipc	a2,0x12
    8001c1b0:	27c60613          	addi	a2,a2,636 # 8002e428 <__func__.0+0x69c8>
    8001c1b4:	0000c517          	auipc	a0,0xc
    8001c1b8:	ba450513          	addi	a0,a0,-1116 # 80027d58 <__func__.0+0x2f8>
    8001c1bc:	33b090ef          	jal	80025cf6 <printf>
    8001c1c0:	0002d797          	auipc	a5,0x2d
    8001c1c4:	e517c783          	lbu	a5,-431(a5) # 80049011 <excpt+0x1>
    8001c1c8:	0000c597          	auipc	a1,0xc
    8001c1cc:	b6858593          	addi	a1,a1,-1176 # 80027d30 <__func__.0+0x2d0>
    8001c1d0:	cf89                	beqz	a5,8001c1ea <load_access_fault_8+0xf0>
    8001c1d2:	6418                	ld	a4,8(s0)
    8001c1d4:	4795                	li	a5,5
    8001c1d6:	0000c597          	auipc	a1,0xc
    8001c1da:	b4a58593          	addi	a1,a1,-1206 # 80027d20 <__func__.0+0x2c0>
    8001c1de:	00f70663          	beq	a4,a5,8001c1ea <load_access_fault_8+0xf0>
    8001c1e2:	0000c597          	auipc	a1,0xc
    8001c1e6:	b4e58593          	addi	a1,a1,-1202 # 80027d30 <__func__.0+0x2d0>
    8001c1ea:	0000c517          	auipc	a0,0xc
    8001c1ee:	b8650513          	addi	a0,a0,-1146 # 80027d70 <__func__.0+0x310>
    8001c1f2:	305090ef          	jal	80025cf6 <printf>
    8001c1f6:	0002d797          	auipc	a5,0x2d
    8001c1fa:	e1b7c783          	lbu	a5,-485(a5) # 80049011 <excpt+0x1>
    8001c1fe:	c789                	beqz	a5,8001c208 <load_access_fault_8+0x10e>
    8001c200:	6418                	ld	a4,8(s0)
    8001c202:	4795                	li	a5,5
    8001c204:	00f70c63          	beq	a4,a5,8001c21c <load_access_fault_8+0x122>
    8001c208:	0000c517          	auipc	a0,0xc
    8001c20c:	b7050513          	addi	a0,a0,-1168 # 80027d78 <__func__.0+0x318>
    8001c210:	2e7090ef          	jal	80025cf6 <printf>
    8001c214:	02900513          	li	a0,41
    8001c218:	0e9080ef          	jal	80024b00 <putchar>
    8001c21c:	4529                	li	a0,10
    8001c21e:	0e3080ef          	jal	80024b00 <putchar>
    8001c222:	0002d497          	auipc	s1,0x2d
    8001c226:	def4c483          	lbu	s1,-529(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001c22a:	0000c597          	auipc	a1,0xc
    8001c22e:	b0658593          	addi	a1,a1,-1274 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001c232:	cc91                	beqz	s1,8001c24e <load_access_fault_8+0x154>
    8001c234:	6418                	ld	a4,8(s0)
    8001c236:	4795                	li	a5,5
    TEST_END();
    8001c238:	0000c597          	auipc	a1,0xc
    8001c23c:	ae858593          	addi	a1,a1,-1304 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001c240:	00f70763          	beq	a4,a5,8001c24e <load_access_fault_8+0x154>
    8001c244:	4481                	li	s1,0
    TEST_END();
    8001c246:	0000c597          	auipc	a1,0xc
    8001c24a:	aea58593          	addi	a1,a1,-1302 # 80027d30 <__func__.0+0x2d0>
    8001c24e:	0000c517          	auipc	a0,0xc
    8001c252:	b8a50513          	addi	a0,a0,-1142 # 80027dd8 <__func__.0+0x378>
    8001c256:	2a1090ef          	jal	80025cf6 <printf>
    8001c25a:	4511                	li	a0,4
    8001c25c:	99be40ef          	jal	80000bf6 <goto_priv>
    8001c260:	a4ce50ef          	jal	800014ac <reset_state>
}
    8001c264:	60e2                	ld	ra,24(sp)
    8001c266:	6442                	ld	s0,16(sp)
    8001c268:	8526                	mv	a0,s1
    8001c26a:	64a2                	ld	s1,8(sp)
    8001c26c:	6105                	addi	sp,sp,32
    8001c26e:	8082                	ret

000000008001c270 <load_access_fault_9>:

bool load_access_fault_9(){
    8001c270:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c272:	0000b597          	auipc	a1,0xb
    8001c276:	03658593          	addi	a1,a1,54 # 800272a8 <__func__.31>
    8001c27a:	0000c517          	auipc	a0,0xc
    8001c27e:	ac650513          	addi	a0,a0,-1338 # 80027d40 <__func__.0+0x2e0>
bool load_access_fault_9(){
    8001c282:	ec06                	sd	ra,24(sp)
    8001c284:	e822                	sd	s0,16(sp)
    8001c286:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c288:	26f090ef          	jal	80025cf6 <printf>
    8001c28c:	4529                	li	a0,10
    8001c28e:	073080ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001c292:	4511                	li	a0,4
    8001c294:	963e40ef          	jal	80000bf6 <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c298:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c29c:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c2a0:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c2a4:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c2a8:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c2ac:	10000793          	li	a5,256
    8001c2b0:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c2b4:	20000793          	li	a5,512
    8001c2b8:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c2bc:	40000793          	li	a5,1024
    8001c2c0:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c2c4:	6785                	lui	a5,0x1
    8001c2c6:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c2ca:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c2ce:	4785                	li	a5,1
    8001c2d0:	07fe                	slli	a5,a5,0x1f
    8001c2d2:	4485                	li	s1,1
    8001c2d4:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c2d8:	08100793          	li	a5,129
    8001c2dc:	07e2                	slli	a5,a5,0x18
    8001c2de:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c2e2:	08000793          	li	a5,128
    8001c2e6:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c2ea:	67a1                	lui	a5,0x8
    8001c2ec:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001c2f0:	4501                	li	a0,0
    8001c2f2:	905e40ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c2f6:	0330000f          	fence	rw,rw
    8001c2fa:	0002d417          	auipc	s0,0x2d
    8001c2fe:	d1640413          	addi	s0,s0,-746 # 80049010 <excpt>
    8001c302:	0002d797          	auipc	a5,0x2d
    8001c306:	d407b323          	sd	zero,-698(a5) # 80049048 <excpt+0x38>
    8001c30a:	00941023          	sh	s1,0(s0)
    8001c30e:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8001c312:	02349793          	slli	a5,s1,0x23
    8001c316:	17e1                	addi	a5,a5,-8
    8001c318:	0007b783          	ld	a5,0(a5)
    
    ld(0x1fffffffeUL << 2);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    8001c31c:	08200593          	li	a1,130
    8001c320:	00012617          	auipc	a2,0x12
    8001c324:	14060613          	addi	a2,a2,320 # 8002e460 <__func__.0+0x6a00>
    8001c328:	0000c517          	auipc	a0,0xc
    8001c32c:	a3050513          	addi	a0,a0,-1488 # 80027d58 <__func__.0+0x2f8>
    8001c330:	1c7090ef          	jal	80025cf6 <printf>
    8001c334:	0002d797          	auipc	a5,0x2d
    8001c338:	cdd7c783          	lbu	a5,-803(a5) # 80049011 <excpt+0x1>
    8001c33c:	0000c597          	auipc	a1,0xc
    8001c340:	9f458593          	addi	a1,a1,-1548 # 80027d30 <__func__.0+0x2d0>
    8001c344:	cf89                	beqz	a5,8001c35e <load_access_fault_9+0xee>
    8001c346:	6418                	ld	a4,8(s0)
    8001c348:	4795                	li	a5,5
    8001c34a:	0000c597          	auipc	a1,0xc
    8001c34e:	9d658593          	addi	a1,a1,-1578 # 80027d20 <__func__.0+0x2c0>
    8001c352:	00f70663          	beq	a4,a5,8001c35e <load_access_fault_9+0xee>
    8001c356:	0000c597          	auipc	a1,0xc
    8001c35a:	9da58593          	addi	a1,a1,-1574 # 80027d30 <__func__.0+0x2d0>
    8001c35e:	0000c517          	auipc	a0,0xc
    8001c362:	a1250513          	addi	a0,a0,-1518 # 80027d70 <__func__.0+0x310>
    8001c366:	191090ef          	jal	80025cf6 <printf>
    8001c36a:	0002d797          	auipc	a5,0x2d
    8001c36e:	ca77c783          	lbu	a5,-857(a5) # 80049011 <excpt+0x1>
    8001c372:	c789                	beqz	a5,8001c37c <load_access_fault_9+0x10c>
    8001c374:	6418                	ld	a4,8(s0)
    8001c376:	4795                	li	a5,5
    8001c378:	00f70c63          	beq	a4,a5,8001c390 <load_access_fault_9+0x120>
    8001c37c:	0000c517          	auipc	a0,0xc
    8001c380:	9fc50513          	addi	a0,a0,-1540 # 80027d78 <__func__.0+0x318>
    8001c384:	173090ef          	jal	80025cf6 <printf>
    8001c388:	02900513          	li	a0,41
    8001c38c:	774080ef          	jal	80024b00 <putchar>
    8001c390:	4529                	li	a0,10
    8001c392:	76e080ef          	jal	80024b00 <putchar>
    8001c396:	0002d497          	auipc	s1,0x2d
    8001c39a:	c7b4c483          	lbu	s1,-901(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001c39e:	0000c597          	auipc	a1,0xc
    8001c3a2:	99258593          	addi	a1,a1,-1646 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    8001c3a6:	cc91                	beqz	s1,8001c3c2 <load_access_fault_9+0x152>
    8001c3a8:	6418                	ld	a4,8(s0)
    8001c3aa:	4795                	li	a5,5
    TEST_END();
    8001c3ac:	0000c597          	auipc	a1,0xc
    8001c3b0:	97458593          	addi	a1,a1,-1676 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    8001c3b4:	00f70763          	beq	a4,a5,8001c3c2 <load_access_fault_9+0x152>
    8001c3b8:	4481                	li	s1,0
    TEST_END();
    8001c3ba:	0000c597          	auipc	a1,0xc
    8001c3be:	97658593          	addi	a1,a1,-1674 # 80027d30 <__func__.0+0x2d0>
    8001c3c2:	0000c517          	auipc	a0,0xc
    8001c3c6:	a1650513          	addi	a0,a0,-1514 # 80027dd8 <__func__.0+0x378>
    8001c3ca:	12d090ef          	jal	80025cf6 <printf>
    8001c3ce:	4511                	li	a0,4
    8001c3d0:	827e40ef          	jal	80000bf6 <goto_priv>
    8001c3d4:	8d8e50ef          	jal	800014ac <reset_state>
}
    8001c3d8:	60e2                	ld	ra,24(sp)
    8001c3da:	6442                	ld	s0,16(sp)
    8001c3dc:	8526                	mv	a0,s1
    8001c3de:	64a2                	ld	s1,8(sp)
    8001c3e0:	6105                	addi	sp,sp,32
    8001c3e2:	8082                	ret

000000008001c3e4 <load_access_fault_10>:

bool load_access_fault_10(){
    8001c3e4:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c3e6:	0000b597          	auipc	a1,0xb
    8001c3ea:	eda58593          	addi	a1,a1,-294 # 800272c0 <__func__.30>
    8001c3ee:	0000c517          	auipc	a0,0xc
    8001c3f2:	95250513          	addi	a0,a0,-1710 # 80027d40 <__func__.0+0x2e0>
bool load_access_fault_10(){
    8001c3f6:	ec06                	sd	ra,24(sp)
    8001c3f8:	e822                	sd	s0,16(sp)
    8001c3fa:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c3fc:	0fb090ef          	jal	80025cf6 <printf>
    8001c400:	4529                	li	a0,10
    8001c402:	6fe080ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001c406:	4511                	li	a0,4
    8001c408:	feee40ef          	jal	80000bf6 <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c40c:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c410:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c414:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c418:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c41c:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c420:	4785                	li	a5,1
    8001c422:	07fe                	slli	a5,a5,0x1f
    8001c424:	4485                	li	s1,1
    8001c426:	3b079073          	csrw	pmpaddr0,a5
    
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c42a:	08000793          	li	a5,128
    8001c42e:	3a07a073          	csrs	pmpcfg0,a5

    printf("pmpcfg0=%llx \n",CSRR(CSR_PMPCFG0));
    8001c432:	3a0025f3          	csrr	a1,pmpcfg0
    8001c436:	00012517          	auipc	a0,0x12
    8001c43a:	09a50513          	addi	a0,a0,154 # 8002e4d0 <__func__.0+0x6a70>
    8001c43e:	0b9090ef          	jal	80025cf6 <printf>
    printf("pmpcfg2=%llx \n",CSRR(CSR_PMPCFG2));
    8001c442:	3a2025f3          	csrr	a1,pmpcfg2
    8001c446:	00012517          	auipc	a0,0x12
    8001c44a:	09a50513          	addi	a0,a0,154 # 8002e4e0 <__func__.0+0x6a80>
    8001c44e:	0a9090ef          	jal	80025cf6 <printf>


    goto_priv(PRIV_HS);
    8001c452:	450d                	li	a0,3
    8001c454:	fa2e40ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c458:	0330000f          	fence	rw,rw
    8001c45c:	0002d417          	auipc	s0,0x2d
    8001c460:	bb440413          	addi	s0,s0,-1100 # 80049010 <excpt>
    8001c464:	0002d797          	auipc	a5,0x2d
    8001c468:	be07b223          	sd	zero,-1052(a5) # 80049048 <excpt+0x38>
    8001c46c:	00941023          	sh	s1,0(s0)
    8001c470:	0330000f          	fence	rw,rw
    8001c474:	08f00793          	li	a5,143
    8001c478:	07ea                	slli	a5,a5,0x1a
    8001c47a:	0007b783          	ld	a5,0(a5)

    ld(0x8f000000UL << 2);

    printf("%d\n",excpt.triggered);
    8001c47e:	0002d597          	auipc	a1,0x2d
    8001c482:	b935c583          	lbu	a1,-1133(a1) # 80049011 <excpt+0x1>
    8001c486:	0000c517          	auipc	a0,0xc
    8001c48a:	40250513          	addi	a0,a0,1026 # 80028888 <__func__.0+0xe28>
    8001c48e:	069090ef          	jal	80025cf6 <printf>
    printf("%d\n",excpt.cause);
    8001c492:	640c                	ld	a1,8(s0)
    8001c494:	0000c517          	auipc	a0,0xc
    8001c498:	3f450513          	addi	a0,a0,1012 # 80028888 <__func__.0+0xe28>
    8001c49c:	05b090ef          	jal	80025cf6 <printf>

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    8001c4a0:	08200593          	li	a1,130
    8001c4a4:	00012617          	auipc	a2,0x12
    8001c4a8:	04c60613          	addi	a2,a2,76 # 8002e4f0 <__func__.0+0x6a90>
    8001c4ac:	0000c517          	auipc	a0,0xc
    8001c4b0:	8ac50513          	addi	a0,a0,-1876 # 80027d58 <__func__.0+0x2f8>
    8001c4b4:	043090ef          	jal	80025cf6 <printf>
    8001c4b8:	0002d797          	auipc	a5,0x2d
    8001c4bc:	b597c783          	lbu	a5,-1191(a5) # 80049011 <excpt+0x1>
    8001c4c0:	0000c597          	auipc	a1,0xc
    8001c4c4:	87058593          	addi	a1,a1,-1936 # 80027d30 <__func__.0+0x2d0>
    8001c4c8:	cf89                	beqz	a5,8001c4e2 <load_access_fault_10+0xfe>
    8001c4ca:	6418                	ld	a4,8(s0)
    8001c4cc:	4795                	li	a5,5
    8001c4ce:	0000c597          	auipc	a1,0xc
    8001c4d2:	85258593          	addi	a1,a1,-1966 # 80027d20 <__func__.0+0x2c0>
    8001c4d6:	00f70663          	beq	a4,a5,8001c4e2 <load_access_fault_10+0xfe>
    8001c4da:	0000c597          	auipc	a1,0xc
    8001c4de:	85658593          	addi	a1,a1,-1962 # 80027d30 <__func__.0+0x2d0>
    8001c4e2:	0000c517          	auipc	a0,0xc
    8001c4e6:	88e50513          	addi	a0,a0,-1906 # 80027d70 <__func__.0+0x310>
    8001c4ea:	00d090ef          	jal	80025cf6 <printf>
    8001c4ee:	0002d797          	auipc	a5,0x2d
    8001c4f2:	b237c783          	lbu	a5,-1245(a5) # 80049011 <excpt+0x1>
    8001c4f6:	c789                	beqz	a5,8001c500 <load_access_fault_10+0x11c>
    8001c4f8:	6418                	ld	a4,8(s0)
    8001c4fa:	4795                	li	a5,5
    8001c4fc:	00f70c63          	beq	a4,a5,8001c514 <load_access_fault_10+0x130>
    8001c500:	0000c517          	auipc	a0,0xc
    8001c504:	87850513          	addi	a0,a0,-1928 # 80027d78 <__func__.0+0x318>
    8001c508:	7ee090ef          	jal	80025cf6 <printf>
    8001c50c:	02900513          	li	a0,41
    8001c510:	5f0080ef          	jal	80024b00 <putchar>
    8001c514:	4529                	li	a0,10
    8001c516:	5ea080ef          	jal	80024b00 <putchar>
    8001c51a:	0002d497          	auipc	s1,0x2d
    8001c51e:	af74c483          	lbu	s1,-1289(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001c522:	0000c597          	auipc	a1,0xc
    8001c526:	80e58593          	addi	a1,a1,-2034 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    8001c52a:	cc91                	beqz	s1,8001c546 <load_access_fault_10+0x162>
    8001c52c:	6418                	ld	a4,8(s0)
    8001c52e:	4795                	li	a5,5
    TEST_END();
    8001c530:	0000b597          	auipc	a1,0xb
    8001c534:	7f058593          	addi	a1,a1,2032 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    8001c538:	00f70763          	beq	a4,a5,8001c546 <load_access_fault_10+0x162>
    8001c53c:	4481                	li	s1,0
    TEST_END();
    8001c53e:	0000b597          	auipc	a1,0xb
    8001c542:	7f258593          	addi	a1,a1,2034 # 80027d30 <__func__.0+0x2d0>
    8001c546:	0000c517          	auipc	a0,0xc
    8001c54a:	89250513          	addi	a0,a0,-1902 # 80027dd8 <__func__.0+0x378>
    8001c54e:	7a8090ef          	jal	80025cf6 <printf>
    8001c552:	4511                	li	a0,4
    8001c554:	ea2e40ef          	jal	80000bf6 <goto_priv>
    8001c558:	f55e40ef          	jal	800014ac <reset_state>
}
    8001c55c:	60e2                	ld	ra,24(sp)
    8001c55e:	6442                	ld	s0,16(sp)
    8001c560:	8526                	mv	a0,s1
    8001c562:	64a2                	ld	s1,8(sp)
    8001c564:	6105                	addi	sp,sp,32
    8001c566:	8082                	ret

000000008001c568 <store_access_fault_1>:


bool store_access_fault_1(){
    8001c568:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c56a:	0000b597          	auipc	a1,0xb
    8001c56e:	d6e58593          	addi	a1,a1,-658 # 800272d8 <__func__.29>
    8001c572:	0000b517          	auipc	a0,0xb
    8001c576:	7ce50513          	addi	a0,a0,1998 # 80027d40 <__func__.0+0x2e0>
bool store_access_fault_1(){
    8001c57a:	ec06                	sd	ra,24(sp)
    8001c57c:	e822                	sd	s0,16(sp)
    8001c57e:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c580:	776090ef          	jal	80025cf6 <printf>
    8001c584:	4529                	li	a0,10
    8001c586:	57a080ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001c58a:	4511                	li	a0,4
    8001c58c:	e6ae40ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c590:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c594:	10000793          	li	a5,256
    8001c598:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c59c:	20000793          	li	a5,512
    8001c5a0:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c5a4:	40000793          	li	a5,1024
    8001c5a8:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c5ac:	6785                	lui	a5,0x1
    8001c5ae:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c5b2:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c5b6:	4785                	li	a5,1
    8001c5b8:	07fe                	slli	a5,a5,0x1f
    8001c5ba:	4705                	li	a4,1
    8001c5bc:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c5c0:	08100793          	li	a5,129
    8001c5c4:	07e2                	slli	a5,a5,0x18
    8001c5c6:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c5ca:	67a1                	lui	a5,0x8
    8001c5cc:	3a07a073          	csrs	pmpcfg0,a5
    asm volatile ("sfence.vma \n\t");
    8001c5d0:	12000073          	sfence.vma
    asm volatile(
    8001c5d4:	22000073          	.insn	4, 0x22000073
    asm volatile(
    8001c5d8:	62000073          	.insn	4, 0x62000073

    sfence();
    hfence();
    TEST_SETUP_EXCEPT();
    8001c5dc:	0330000f          	fence	rw,rw
    8001c5e0:	0002d417          	auipc	s0,0x2d
    8001c5e4:	a3040413          	addi	s0,s0,-1488 # 80049010 <excpt>
    8001c5e8:	0002d797          	auipc	a5,0x2d
    8001c5ec:	a607b023          	sd	zero,-1440(a5) # 80049048 <excpt+0x38>
    8001c5f0:	00e41023          	sh	a4,0(s0)
    8001c5f4:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sb, "sb", uint8_t);
    8001c5f8:	02171793          	slli	a5,a4,0x21
    8001c5fc:	40078793          	addi	a5,a5,1024
    8001c600:	4701                	li	a4,0
    8001c602:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2 , 0x0);

    printf("%d\n",excpt.triggered);
    8001c606:	0002d597          	auipc	a1,0x2d
    8001c60a:	a0b5c583          	lbu	a1,-1525(a1) # 80049011 <excpt+0x1>
    8001c60e:	0000c517          	auipc	a0,0xc
    8001c612:	27a50513          	addi	a0,a0,634 # 80028888 <__func__.0+0xe28>
    8001c616:	6e0090ef          	jal	80025cf6 <printf>
    printf("%d\n",excpt.cause);
    8001c61a:	640c                	ld	a1,8(s0)
    8001c61c:	0000c517          	auipc	a0,0xc
    8001c620:	26c50513          	addi	a0,a0,620 # 80028888 <__func__.0+0xe28>
    8001c624:	6d2090ef          	jal	80025cf6 <printf>

    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001c628:	08200593          	li	a1,130
    8001c62c:	00012617          	auipc	a2,0x12
    8001c630:	f2460613          	addi	a2,a2,-220 # 8002e550 <__func__.0+0x6af0>
    8001c634:	0000b517          	auipc	a0,0xb
    8001c638:	72450513          	addi	a0,a0,1828 # 80027d58 <__func__.0+0x2f8>
    8001c63c:	6ba090ef          	jal	80025cf6 <printf>
    8001c640:	0002d797          	auipc	a5,0x2d
    8001c644:	9d17c783          	lbu	a5,-1583(a5) # 80049011 <excpt+0x1>
    8001c648:	0000b597          	auipc	a1,0xb
    8001c64c:	6e858593          	addi	a1,a1,1768 # 80027d30 <__func__.0+0x2d0>
    8001c650:	cf89                	beqz	a5,8001c66a <store_access_fault_1+0x102>
    8001c652:	6418                	ld	a4,8(s0)
    8001c654:	479d                	li	a5,7
    8001c656:	0000b597          	auipc	a1,0xb
    8001c65a:	6ca58593          	addi	a1,a1,1738 # 80027d20 <__func__.0+0x2c0>
    8001c65e:	00f70663          	beq	a4,a5,8001c66a <store_access_fault_1+0x102>
    8001c662:	0000b597          	auipc	a1,0xb
    8001c666:	6ce58593          	addi	a1,a1,1742 # 80027d30 <__func__.0+0x2d0>
    8001c66a:	0000b517          	auipc	a0,0xb
    8001c66e:	70650513          	addi	a0,a0,1798 # 80027d70 <__func__.0+0x310>
    8001c672:	684090ef          	jal	80025cf6 <printf>
    8001c676:	0002d797          	auipc	a5,0x2d
    8001c67a:	99b7c783          	lbu	a5,-1637(a5) # 80049011 <excpt+0x1>
    8001c67e:	c789                	beqz	a5,8001c688 <store_access_fault_1+0x120>
    8001c680:	6418                	ld	a4,8(s0)
    8001c682:	479d                	li	a5,7
    8001c684:	00f70c63          	beq	a4,a5,8001c69c <store_access_fault_1+0x134>
    8001c688:	0000b517          	auipc	a0,0xb
    8001c68c:	6f050513          	addi	a0,a0,1776 # 80027d78 <__func__.0+0x318>
    8001c690:	666090ef          	jal	80025cf6 <printf>
    8001c694:	02900513          	li	a0,41
    8001c698:	468080ef          	jal	80024b00 <putchar>
    8001c69c:	4529                	li	a0,10
    8001c69e:	462080ef          	jal	80024b00 <putchar>
    8001c6a2:	0002d497          	auipc	s1,0x2d
    8001c6a6:	96f4c483          	lbu	s1,-1681(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c6aa:	0000b597          	auipc	a1,0xb
    8001c6ae:	68658593          	addi	a1,a1,1670 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001c6b2:	cc91                	beqz	s1,8001c6ce <store_access_fault_1+0x166>
    8001c6b4:	6418                	ld	a4,8(s0)
    8001c6b6:	479d                	li	a5,7
    TEST_END();
    8001c6b8:	0000b597          	auipc	a1,0xb
    8001c6bc:	66858593          	addi	a1,a1,1640 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001c6c0:	00f70763          	beq	a4,a5,8001c6ce <store_access_fault_1+0x166>
    8001c6c4:	4481                	li	s1,0
    TEST_END();
    8001c6c6:	0000b597          	auipc	a1,0xb
    8001c6ca:	66a58593          	addi	a1,a1,1642 # 80027d30 <__func__.0+0x2d0>
    8001c6ce:	0000b517          	auipc	a0,0xb
    8001c6d2:	70a50513          	addi	a0,a0,1802 # 80027dd8 <__func__.0+0x378>
    8001c6d6:	620090ef          	jal	80025cf6 <printf>
    8001c6da:	4511                	li	a0,4
    8001c6dc:	d1ae40ef          	jal	80000bf6 <goto_priv>
    8001c6e0:	dcde40ef          	jal	800014ac <reset_state>
}
    8001c6e4:	60e2                	ld	ra,24(sp)
    8001c6e6:	6442                	ld	s0,16(sp)
    8001c6e8:	8526                	mv	a0,s1
    8001c6ea:	64a2                	ld	s1,8(sp)
    8001c6ec:	6105                	addi	sp,sp,32
    8001c6ee:	8082                	ret

000000008001c6f0 <store_access_fault_2>:

bool store_access_fault_2(){
    8001c6f0:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c6f2:	0000b597          	auipc	a1,0xb
    8001c6f6:	bfe58593          	addi	a1,a1,-1026 # 800272f0 <__func__.28>
    8001c6fa:	0000b517          	auipc	a0,0xb
    8001c6fe:	64650513          	addi	a0,a0,1606 # 80027d40 <__func__.0+0x2e0>
bool store_access_fault_2(){
    8001c702:	ec06                	sd	ra,24(sp)
    8001c704:	e822                	sd	s0,16(sp)
    8001c706:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c708:	5ee090ef          	jal	80025cf6 <printf>
    8001c70c:	4529                	li	a0,10
    8001c70e:	3f2080ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001c712:	4511                	li	a0,4
    8001c714:	ce2e40ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c718:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c71c:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c720:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c724:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c728:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c72c:	10000793          	li	a5,256
    8001c730:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c734:	20000793          	li	a5,512
    8001c738:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c73c:	40000793          	li	a5,1024
    8001c740:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c744:	6785                	lui	a5,0x1
    8001c746:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c74a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c74e:	4785                	li	a5,1
    8001c750:	07fe                	slli	a5,a5,0x1f
    8001c752:	4485                	li	s1,1
    8001c754:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c758:	08100793          	li	a5,129
    8001c75c:	07e2                	slli	a5,a5,0x18
    8001c75e:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c762:	08000793          	li	a5,128
    8001c766:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c76a:	67a1                	lui	a5,0x8
    8001c76c:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001c770:	450d                	li	a0,3
    8001c772:	c84e40ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c776:	0330000f          	fence	rw,rw
    8001c77a:	0002d417          	auipc	s0,0x2d
    8001c77e:	89640413          	addi	s0,s0,-1898 # 80049010 <excpt>
    8001c782:	0002d797          	auipc	a5,0x2d
    8001c786:	8c07b323          	sd	zero,-1850(a5) # 80049048 <excpt+0x38>
    8001c78a:	00941023          	sh	s1,0(s0)
    8001c78e:	0330000f          	fence	rw,rw
    8001c792:	02149793          	slli	a5,s1,0x21
    8001c796:	40078793          	addi	a5,a5,1024
    8001c79a:	4701                	li	a4,0
    8001c79c:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001c7a0:	08200593          	li	a1,130
    8001c7a4:	00012617          	auipc	a2,0x12
    8001c7a8:	de460613          	addi	a2,a2,-540 # 8002e588 <__func__.0+0x6b28>
    8001c7ac:	0000b517          	auipc	a0,0xb
    8001c7b0:	5ac50513          	addi	a0,a0,1452 # 80027d58 <__func__.0+0x2f8>
    8001c7b4:	542090ef          	jal	80025cf6 <printf>
    8001c7b8:	0002d797          	auipc	a5,0x2d
    8001c7bc:	8597c783          	lbu	a5,-1959(a5) # 80049011 <excpt+0x1>
    8001c7c0:	0000b597          	auipc	a1,0xb
    8001c7c4:	57058593          	addi	a1,a1,1392 # 80027d30 <__func__.0+0x2d0>
    8001c7c8:	cf89                	beqz	a5,8001c7e2 <store_access_fault_2+0xf2>
    8001c7ca:	6418                	ld	a4,8(s0)
    8001c7cc:	479d                	li	a5,7
    8001c7ce:	0000b597          	auipc	a1,0xb
    8001c7d2:	55258593          	addi	a1,a1,1362 # 80027d20 <__func__.0+0x2c0>
    8001c7d6:	00f70663          	beq	a4,a5,8001c7e2 <store_access_fault_2+0xf2>
    8001c7da:	0000b597          	auipc	a1,0xb
    8001c7de:	55658593          	addi	a1,a1,1366 # 80027d30 <__func__.0+0x2d0>
    8001c7e2:	0000b517          	auipc	a0,0xb
    8001c7e6:	58e50513          	addi	a0,a0,1422 # 80027d70 <__func__.0+0x310>
    8001c7ea:	50c090ef          	jal	80025cf6 <printf>
    8001c7ee:	0002d797          	auipc	a5,0x2d
    8001c7f2:	8237c783          	lbu	a5,-2013(a5) # 80049011 <excpt+0x1>
    8001c7f6:	c789                	beqz	a5,8001c800 <store_access_fault_2+0x110>
    8001c7f8:	6418                	ld	a4,8(s0)
    8001c7fa:	479d                	li	a5,7
    8001c7fc:	00f70c63          	beq	a4,a5,8001c814 <store_access_fault_2+0x124>
    8001c800:	0000b517          	auipc	a0,0xb
    8001c804:	57850513          	addi	a0,a0,1400 # 80027d78 <__func__.0+0x318>
    8001c808:	4ee090ef          	jal	80025cf6 <printf>
    8001c80c:	02900513          	li	a0,41
    8001c810:	2f0080ef          	jal	80024b00 <putchar>
    8001c814:	4529                	li	a0,10
    8001c816:	2ea080ef          	jal	80024b00 <putchar>
    8001c81a:	0002c497          	auipc	s1,0x2c
    8001c81e:	7f74c483          	lbu	s1,2039(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c822:	0000b597          	auipc	a1,0xb
    8001c826:	50e58593          	addi	a1,a1,1294 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001c82a:	cc91                	beqz	s1,8001c846 <store_access_fault_2+0x156>
    8001c82c:	6418                	ld	a4,8(s0)
    8001c82e:	479d                	li	a5,7
    TEST_END();
    8001c830:	0000b597          	auipc	a1,0xb
    8001c834:	4f058593          	addi	a1,a1,1264 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001c838:	00f70763          	beq	a4,a5,8001c846 <store_access_fault_2+0x156>
    8001c83c:	4481                	li	s1,0
    TEST_END();
    8001c83e:	0000b597          	auipc	a1,0xb
    8001c842:	4f258593          	addi	a1,a1,1266 # 80027d30 <__func__.0+0x2d0>
    8001c846:	0000b517          	auipc	a0,0xb
    8001c84a:	59250513          	addi	a0,a0,1426 # 80027dd8 <__func__.0+0x378>
    8001c84e:	4a8090ef          	jal	80025cf6 <printf>
    8001c852:	4511                	li	a0,4
    8001c854:	ba2e40ef          	jal	80000bf6 <goto_priv>
    8001c858:	c55e40ef          	jal	800014ac <reset_state>
}
    8001c85c:	60e2                	ld	ra,24(sp)
    8001c85e:	6442                	ld	s0,16(sp)
    8001c860:	8526                	mv	a0,s1
    8001c862:	64a2                	ld	s1,8(sp)
    8001c864:	6105                	addi	sp,sp,32
    8001c866:	8082                	ret

000000008001c868 <store_access_fault_3>:


bool store_access_fault_3(){
    8001c868:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c86a:	0000b597          	auipc	a1,0xb
    8001c86e:	a9e58593          	addi	a1,a1,-1378 # 80027308 <__func__.27>
    8001c872:	0000b517          	auipc	a0,0xb
    8001c876:	4ce50513          	addi	a0,a0,1230 # 80027d40 <__func__.0+0x2e0>
bool store_access_fault_3(){
    8001c87a:	ec06                	sd	ra,24(sp)
    8001c87c:	e822                	sd	s0,16(sp)
    8001c87e:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c880:	476090ef          	jal	80025cf6 <printf>
    8001c884:	4529                	li	a0,10
    8001c886:	27a080ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001c88a:	4511                	li	a0,4
    8001c88c:	b6ae40ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c890:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c894:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c898:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c89c:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c8a0:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c8a4:	10000793          	li	a5,256
    8001c8a8:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c8ac:	20000793          	li	a5,512
    8001c8b0:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c8b4:	40000793          	li	a5,1024
    8001c8b8:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c8bc:	6785                	lui	a5,0x1
    8001c8be:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c8c2:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c8c6:	4785                	li	a5,1
    8001c8c8:	07fe                	slli	a5,a5,0x1f
    8001c8ca:	4485                	li	s1,1
    8001c8cc:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c8d0:	08100793          	li	a5,129
    8001c8d4:	07e2                	slli	a5,a5,0x18
    8001c8d6:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c8da:	08000793          	li	a5,128
    8001c8de:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c8e2:	67a1                	lui	a5,0x8
    8001c8e4:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001c8e8:	8526                	mv	a0,s1
    8001c8ea:	b0ce40ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c8ee:	0330000f          	fence	rw,rw
    8001c8f2:	0002c417          	auipc	s0,0x2c
    8001c8f6:	71e40413          	addi	s0,s0,1822 # 80049010 <excpt>
    8001c8fa:	0002c797          	auipc	a5,0x2c
    8001c8fe:	7407b723          	sd	zero,1870(a5) # 80049048 <excpt+0x38>
    8001c902:	00941023          	sh	s1,0(s0)
    8001c906:	0330000f          	fence	rw,rw
    8001c90a:	02149793          	slli	a5,s1,0x21
    8001c90e:	40078793          	addi	a5,a5,1024
    8001c912:	4701                	li	a4,0
    8001c914:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001c918:	08200593          	li	a1,130
    8001c91c:	00012617          	auipc	a2,0x12
    8001c920:	ca460613          	addi	a2,a2,-860 # 8002e5c0 <__func__.0+0x6b60>
    8001c924:	0000b517          	auipc	a0,0xb
    8001c928:	43450513          	addi	a0,a0,1076 # 80027d58 <__func__.0+0x2f8>
    8001c92c:	3ca090ef          	jal	80025cf6 <printf>
    8001c930:	0002c797          	auipc	a5,0x2c
    8001c934:	6e17c783          	lbu	a5,1761(a5) # 80049011 <excpt+0x1>
    8001c938:	0000b597          	auipc	a1,0xb
    8001c93c:	3f858593          	addi	a1,a1,1016 # 80027d30 <__func__.0+0x2d0>
    8001c940:	cf89                	beqz	a5,8001c95a <store_access_fault_3+0xf2>
    8001c942:	6418                	ld	a4,8(s0)
    8001c944:	479d                	li	a5,7
    8001c946:	0000b597          	auipc	a1,0xb
    8001c94a:	3da58593          	addi	a1,a1,986 # 80027d20 <__func__.0+0x2c0>
    8001c94e:	00f70663          	beq	a4,a5,8001c95a <store_access_fault_3+0xf2>
    8001c952:	0000b597          	auipc	a1,0xb
    8001c956:	3de58593          	addi	a1,a1,990 # 80027d30 <__func__.0+0x2d0>
    8001c95a:	0000b517          	auipc	a0,0xb
    8001c95e:	41650513          	addi	a0,a0,1046 # 80027d70 <__func__.0+0x310>
    8001c962:	394090ef          	jal	80025cf6 <printf>
    8001c966:	0002c797          	auipc	a5,0x2c
    8001c96a:	6ab7c783          	lbu	a5,1707(a5) # 80049011 <excpt+0x1>
    8001c96e:	c789                	beqz	a5,8001c978 <store_access_fault_3+0x110>
    8001c970:	6418                	ld	a4,8(s0)
    8001c972:	479d                	li	a5,7
    8001c974:	00f70c63          	beq	a4,a5,8001c98c <store_access_fault_3+0x124>
    8001c978:	0000b517          	auipc	a0,0xb
    8001c97c:	40050513          	addi	a0,a0,1024 # 80027d78 <__func__.0+0x318>
    8001c980:	376090ef          	jal	80025cf6 <printf>
    8001c984:	02900513          	li	a0,41
    8001c988:	178080ef          	jal	80024b00 <putchar>
    8001c98c:	4529                	li	a0,10
    8001c98e:	172080ef          	jal	80024b00 <putchar>
    8001c992:	0002c497          	auipc	s1,0x2c
    8001c996:	67f4c483          	lbu	s1,1663(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c99a:	0000b597          	auipc	a1,0xb
    8001c99e:	39658593          	addi	a1,a1,918 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001c9a2:	cc91                	beqz	s1,8001c9be <store_access_fault_3+0x156>
    8001c9a4:	6418                	ld	a4,8(s0)
    8001c9a6:	479d                	li	a5,7
    TEST_END();
    8001c9a8:	0000b597          	auipc	a1,0xb
    8001c9ac:	37858593          	addi	a1,a1,888 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001c9b0:	00f70763          	beq	a4,a5,8001c9be <store_access_fault_3+0x156>
    8001c9b4:	4481                	li	s1,0
    TEST_END();
    8001c9b6:	0000b597          	auipc	a1,0xb
    8001c9ba:	37a58593          	addi	a1,a1,890 # 80027d30 <__func__.0+0x2d0>
    8001c9be:	0000b517          	auipc	a0,0xb
    8001c9c2:	41a50513          	addi	a0,a0,1050 # 80027dd8 <__func__.0+0x378>
    8001c9c6:	330090ef          	jal	80025cf6 <printf>
    8001c9ca:	4511                	li	a0,4
    8001c9cc:	a2ae40ef          	jal	80000bf6 <goto_priv>
    8001c9d0:	adde40ef          	jal	800014ac <reset_state>
}
    8001c9d4:	60e2                	ld	ra,24(sp)
    8001c9d6:	6442                	ld	s0,16(sp)
    8001c9d8:	8526                	mv	a0,s1
    8001c9da:	64a2                	ld	s1,8(sp)
    8001c9dc:	6105                	addi	sp,sp,32
    8001c9de:	8082                	ret

000000008001c9e0 <store_access_fault_4>:

bool store_access_fault_4(){
    8001c9e0:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c9e2:	0000b597          	auipc	a1,0xb
    8001c9e6:	93e58593          	addi	a1,a1,-1730 # 80027320 <__func__.26>
    8001c9ea:	0000b517          	auipc	a0,0xb
    8001c9ee:	35650513          	addi	a0,a0,854 # 80027d40 <__func__.0+0x2e0>
bool store_access_fault_4(){
    8001c9f2:	ec06                	sd	ra,24(sp)
    8001c9f4:	e822                	sd	s0,16(sp)
    8001c9f6:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c9f8:	2fe090ef          	jal	80025cf6 <printf>
    8001c9fc:	4529                	li	a0,10
    8001c9fe:	102080ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001ca02:	4511                	li	a0,4
    8001ca04:	9f2e40ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001ca08:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001ca0c:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001ca10:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001ca14:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001ca18:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001ca1c:	10000793          	li	a5,256
    8001ca20:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001ca24:	20000793          	li	a5,512
    8001ca28:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001ca2c:	40000793          	li	a5,1024
    8001ca30:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001ca34:	6785                	lui	a5,0x1
    8001ca36:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001ca3a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001ca3e:	4785                	li	a5,1
    8001ca40:	07fe                	slli	a5,a5,0x1f
    8001ca42:	4485                	li	s1,1
    8001ca44:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001ca48:	08100793          	li	a5,129
    8001ca4c:	07e2                	slli	a5,a5,0x18
    8001ca4e:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001ca52:	08000793          	li	a5,128
    8001ca56:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001ca5a:	67a1                	lui	a5,0x8
    8001ca5c:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001ca60:	4501                	li	a0,0
    8001ca62:	994e40ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001ca66:	0330000f          	fence	rw,rw
    8001ca6a:	0002c417          	auipc	s0,0x2c
    8001ca6e:	5a640413          	addi	s0,s0,1446 # 80049010 <excpt>
    8001ca72:	0002c797          	auipc	a5,0x2c
    8001ca76:	5c07bb23          	sd	zero,1494(a5) # 80049048 <excpt+0x38>
    8001ca7a:	00941023          	sh	s1,0(s0)
    8001ca7e:	0330000f          	fence	rw,rw
    8001ca82:	02149793          	slli	a5,s1,0x21
    8001ca86:	40078793          	addi	a5,a5,1024
    8001ca8a:	4701                	li	a4,0
    8001ca8c:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001ca90:	08200593          	li	a1,130
    8001ca94:	00012617          	auipc	a2,0x12
    8001ca98:	b6460613          	addi	a2,a2,-1180 # 8002e5f8 <__func__.0+0x6b98>
    8001ca9c:	0000b517          	auipc	a0,0xb
    8001caa0:	2bc50513          	addi	a0,a0,700 # 80027d58 <__func__.0+0x2f8>
    8001caa4:	252090ef          	jal	80025cf6 <printf>
    8001caa8:	0002c797          	auipc	a5,0x2c
    8001caac:	5697c783          	lbu	a5,1385(a5) # 80049011 <excpt+0x1>
    8001cab0:	0000b597          	auipc	a1,0xb
    8001cab4:	28058593          	addi	a1,a1,640 # 80027d30 <__func__.0+0x2d0>
    8001cab8:	cf89                	beqz	a5,8001cad2 <store_access_fault_4+0xf2>
    8001caba:	6418                	ld	a4,8(s0)
    8001cabc:	479d                	li	a5,7
    8001cabe:	0000b597          	auipc	a1,0xb
    8001cac2:	26258593          	addi	a1,a1,610 # 80027d20 <__func__.0+0x2c0>
    8001cac6:	00f70663          	beq	a4,a5,8001cad2 <store_access_fault_4+0xf2>
    8001caca:	0000b597          	auipc	a1,0xb
    8001cace:	26658593          	addi	a1,a1,614 # 80027d30 <__func__.0+0x2d0>
    8001cad2:	0000b517          	auipc	a0,0xb
    8001cad6:	29e50513          	addi	a0,a0,670 # 80027d70 <__func__.0+0x310>
    8001cada:	21c090ef          	jal	80025cf6 <printf>
    8001cade:	0002c797          	auipc	a5,0x2c
    8001cae2:	5337c783          	lbu	a5,1331(a5) # 80049011 <excpt+0x1>
    8001cae6:	c789                	beqz	a5,8001caf0 <store_access_fault_4+0x110>
    8001cae8:	6418                	ld	a4,8(s0)
    8001caea:	479d                	li	a5,7
    8001caec:	00f70c63          	beq	a4,a5,8001cb04 <store_access_fault_4+0x124>
    8001caf0:	0000b517          	auipc	a0,0xb
    8001caf4:	28850513          	addi	a0,a0,648 # 80027d78 <__func__.0+0x318>
    8001caf8:	1fe090ef          	jal	80025cf6 <printf>
    8001cafc:	02900513          	li	a0,41
    8001cb00:	000080ef          	jal	80024b00 <putchar>
    8001cb04:	4529                	li	a0,10
    8001cb06:	7fb070ef          	jal	80024b00 <putchar>
    8001cb0a:	0002c497          	auipc	s1,0x2c
    8001cb0e:	5074c483          	lbu	s1,1287(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001cb12:	0000b597          	auipc	a1,0xb
    8001cb16:	21e58593          	addi	a1,a1,542 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001cb1a:	cc91                	beqz	s1,8001cb36 <store_access_fault_4+0x156>
    8001cb1c:	6418                	ld	a4,8(s0)
    8001cb1e:	479d                	li	a5,7
    TEST_END();
    8001cb20:	0000b597          	auipc	a1,0xb
    8001cb24:	20058593          	addi	a1,a1,512 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001cb28:	00f70763          	beq	a4,a5,8001cb36 <store_access_fault_4+0x156>
    8001cb2c:	4481                	li	s1,0
    TEST_END();
    8001cb2e:	0000b597          	auipc	a1,0xb
    8001cb32:	20258593          	addi	a1,a1,514 # 80027d30 <__func__.0+0x2d0>
    8001cb36:	0000b517          	auipc	a0,0xb
    8001cb3a:	2a250513          	addi	a0,a0,674 # 80027dd8 <__func__.0+0x378>
    8001cb3e:	1b8090ef          	jal	80025cf6 <printf>
    8001cb42:	4511                	li	a0,4
    8001cb44:	8b2e40ef          	jal	80000bf6 <goto_priv>
    8001cb48:	965e40ef          	jal	800014ac <reset_state>
}
    8001cb4c:	60e2                	ld	ra,24(sp)
    8001cb4e:	6442                	ld	s0,16(sp)
    8001cb50:	8526                	mv	a0,s1
    8001cb52:	64a2                	ld	s1,8(sp)
    8001cb54:	6105                	addi	sp,sp,32
    8001cb56:	8082                	ret

000000008001cb58 <store_access_fault_5>:

bool store_access_fault_5(){
    8001cb58:	1141                	addi	sp,sp,-16

    TEST_START();
    8001cb5a:	0000a597          	auipc	a1,0xa
    8001cb5e:	7de58593          	addi	a1,a1,2014 # 80027338 <__func__.25>
    8001cb62:	0000b517          	auipc	a0,0xb
    8001cb66:	1de50513          	addi	a0,a0,478 # 80027d40 <__func__.0+0x2e0>
bool store_access_fault_5(){
    8001cb6a:	e406                	sd	ra,8(sp)
    8001cb6c:	e022                	sd	s0,0(sp)
    TEST_START();
    8001cb6e:	188090ef          	jal	80025cf6 <printf>
    8001cb72:	4529                	li	a0,10
    8001cb74:	78d070ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001cb78:	4511                	li	a0,4
    8001cb7a:	87ce40ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001cb7e:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001cb82:	10000793          	li	a5,256
    8001cb86:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001cb8a:	20000793          	li	a5,512
    8001cb8e:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001cb92:	40000793          	li	a5,1024
    8001cb96:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001cb9a:	6785                	lui	a5,0x1
    8001cb9c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001cba0:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001cba4:	4785                	li	a5,1
    8001cba6:	07fe                	slli	a5,a5,0x1f
    8001cba8:	4705                	li	a4,1
    8001cbaa:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001cbae:	08100793          	li	a5,129
    8001cbb2:	07e2                	slli	a5,a5,0x18
    8001cbb4:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001cbb8:	67a1                	lui	a5,0x8
    8001cbba:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001cbbe:	0330000f          	fence	rw,rw
    8001cbc2:	0002c417          	auipc	s0,0x2c
    8001cbc6:	44e40413          	addi	s0,s0,1102 # 80049010 <excpt>
    8001cbca:	0002c797          	auipc	a5,0x2c
    8001cbce:	4607bf23          	sd	zero,1150(a5) # 80049048 <excpt+0x38>
    8001cbd2:	00e41023          	sh	a4,0(s0)
    8001cbd6:	0330000f          	fence	rw,rw
    8001cbda:	02171793          	slli	a5,a4,0x21
    8001cbde:	40078793          	addi	a5,a5,1024
    8001cbe2:	4701                	li	a4,0
    8001cbe4:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    printf("%d\n",excpt.triggered);
    8001cbe8:	0002c597          	auipc	a1,0x2c
    8001cbec:	4295c583          	lbu	a1,1065(a1) # 80049011 <excpt+0x1>
    8001cbf0:	0000c517          	auipc	a0,0xc
    8001cbf4:	c9850513          	addi	a0,a0,-872 # 80028888 <__func__.0+0xe28>
    8001cbf8:	0fe090ef          	jal	80025cf6 <printf>
    printf("%d\n",excpt.cause);
    8001cbfc:	640c                	ld	a1,8(s0)
    8001cbfe:	0000c517          	auipc	a0,0xc
    8001cc02:	c8a50513          	addi	a0,a0,-886 # 80028888 <__func__.0+0xe28>
    8001cc06:	0f0090ef          	jal	80025cf6 <printf>

    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001cc0a:	08200593          	li	a1,130
    8001cc0e:	00012617          	auipc	a2,0x12
    8001cc12:	a2260613          	addi	a2,a2,-1502 # 8002e630 <__func__.0+0x6bd0>
    8001cc16:	0000b517          	auipc	a0,0xb
    8001cc1a:	14250513          	addi	a0,a0,322 # 80027d58 <__func__.0+0x2f8>
    8001cc1e:	0d8090ef          	jal	80025cf6 <printf>
    8001cc22:	0002c797          	auipc	a5,0x2c
    8001cc26:	3ef7c783          	lbu	a5,1007(a5) # 80049011 <excpt+0x1>
    8001cc2a:	0000b597          	auipc	a1,0xb
    8001cc2e:	0f658593          	addi	a1,a1,246 # 80027d20 <__func__.0+0x2c0>
    8001cc32:	c789                	beqz	a5,8001cc3c <store_access_fault_5+0xe4>
    8001cc34:	0000b597          	auipc	a1,0xb
    8001cc38:	0fc58593          	addi	a1,a1,252 # 80027d30 <__func__.0+0x2d0>
    8001cc3c:	0000b517          	auipc	a0,0xb
    8001cc40:	13450513          	addi	a0,a0,308 # 80027d70 <__func__.0+0x310>
    8001cc44:	0b2090ef          	jal	80025cf6 <printf>
    8001cc48:	0002c797          	auipc	a5,0x2c
    8001cc4c:	3c97c783          	lbu	a5,969(a5) # 80049011 <excpt+0x1>
    8001cc50:	e7a1                	bnez	a5,8001cc98 <store_access_fault_5+0x140>
    8001cc52:	4529                	li	a0,10
    8001cc54:	6ad070ef          	jal	80024b00 <putchar>
    8001cc58:	0002c797          	auipc	a5,0x2c
    8001cc5c:	3b97c783          	lbu	a5,953(a5) # 80049011 <excpt+0x1>
    8001cc60:	e795                	bnez	a5,8001cc8c <store_access_fault_5+0x134>
    8001cc62:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001cc64:	0000b597          	auipc	a1,0xb
    8001cc68:	0bc58593          	addi	a1,a1,188 # 80027d20 <__func__.0+0x2c0>
    8001cc6c:	0000b517          	auipc	a0,0xb
    8001cc70:	16c50513          	addi	a0,a0,364 # 80027dd8 <__func__.0+0x378>
    8001cc74:	082090ef          	jal	80025cf6 <printf>
    8001cc78:	4511                	li	a0,4
    8001cc7a:	f7de30ef          	jal	80000bf6 <goto_priv>
    8001cc7e:	82fe40ef          	jal	800014ac <reset_state>
}
    8001cc82:	60a2                	ld	ra,8(sp)
    8001cc84:	8522                	mv	a0,s0
    8001cc86:	6402                	ld	s0,0(sp)
    8001cc88:	0141                	addi	sp,sp,16
    8001cc8a:	8082                	ret
    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001cc8c:	4401                	li	s0,0
    TEST_END();
    8001cc8e:	0000b597          	auipc	a1,0xb
    8001cc92:	0a258593          	addi	a1,a1,162 # 80027d30 <__func__.0+0x2d0>
    8001cc96:	bfd9                	j	8001cc6c <store_access_fault_5+0x114>
    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001cc98:	0000b517          	auipc	a0,0xb
    8001cc9c:	0e050513          	addi	a0,a0,224 # 80027d78 <__func__.0+0x318>
    8001cca0:	056090ef          	jal	80025cf6 <printf>
    8001cca4:	02900513          	li	a0,41
    8001cca8:	659070ef          	jal	80024b00 <putchar>
    8001ccac:	b75d                	j	8001cc52 <store_access_fault_5+0xfa>

000000008001ccae <store_access_fault_6>:


bool store_access_fault_6(){
    8001ccae:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ccb0:	0000a597          	auipc	a1,0xa
    8001ccb4:	6a058593          	addi	a1,a1,1696 # 80027350 <__func__.24>
    8001ccb8:	0000b517          	auipc	a0,0xb
    8001ccbc:	08850513          	addi	a0,a0,136 # 80027d40 <__func__.0+0x2e0>
bool store_access_fault_6(){
    8001ccc0:	ec06                	sd	ra,24(sp)
    8001ccc2:	e822                	sd	s0,16(sp)
    8001ccc4:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ccc6:	030090ef          	jal	80025cf6 <printf>
    8001ccca:	4529                	li	a0,10
    8001cccc:	635070ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001ccd0:	4511                	li	a0,4
    8001ccd2:	f25e30ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001ccd6:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001ccda:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001ccde:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001cce2:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001cce6:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001ccea:	10000793          	li	a5,256
    8001ccee:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001ccf2:	20000793          	li	a5,512
    8001ccf6:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001ccfa:	40000793          	li	a5,1024
    8001ccfe:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001cd02:	6785                	lui	a5,0x1
    8001cd04:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001cd08:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001cd0c:	4785                	li	a5,1
    8001cd0e:	07fe                	slli	a5,a5,0x1f
    8001cd10:	4485                	li	s1,1
    8001cd12:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001cd16:	08100793          	li	a5,129
    8001cd1a:	07e2                	slli	a5,a5,0x18
    8001cd1c:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001cd20:	08000793          	li	a5,128
    8001cd24:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001cd28:	67a1                	lui	a5,0x8
    8001cd2a:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001cd2e:	450d                	li	a0,3
    8001cd30:	ec7e30ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001cd34:	0330000f          	fence	rw,rw
    8001cd38:	0002c417          	auipc	s0,0x2c
    8001cd3c:	2d840413          	addi	s0,s0,728 # 80049010 <excpt>
    8001cd40:	0002c797          	auipc	a5,0x2c
    8001cd44:	3007b423          	sd	zero,776(a5) # 80049048 <excpt+0x38>
    8001cd48:	00941023          	sh	s1,0(s0)
    8001cd4c:	0330000f          	fence	rw,rw
    8001cd50:	02149793          	slli	a5,s1,0x21
    8001cd54:	40078793          	addi	a5,a5,1024
    8001cd58:	4701                	li	a4,0
    8001cd5a:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001cd5e:	08200593          	li	a1,130
    8001cd62:	00012617          	auipc	a2,0x12
    8001cd66:	90660613          	addi	a2,a2,-1786 # 8002e668 <__func__.0+0x6c08>
    8001cd6a:	0000b517          	auipc	a0,0xb
    8001cd6e:	fee50513          	addi	a0,a0,-18 # 80027d58 <__func__.0+0x2f8>
    8001cd72:	785080ef          	jal	80025cf6 <printf>
    8001cd76:	0002c797          	auipc	a5,0x2c
    8001cd7a:	29b7c783          	lbu	a5,667(a5) # 80049011 <excpt+0x1>
    8001cd7e:	0000b597          	auipc	a1,0xb
    8001cd82:	fb258593          	addi	a1,a1,-78 # 80027d30 <__func__.0+0x2d0>
    8001cd86:	cf89                	beqz	a5,8001cda0 <store_access_fault_6+0xf2>
    8001cd88:	6418                	ld	a4,8(s0)
    8001cd8a:	479d                	li	a5,7
    8001cd8c:	0000b597          	auipc	a1,0xb
    8001cd90:	f9458593          	addi	a1,a1,-108 # 80027d20 <__func__.0+0x2c0>
    8001cd94:	00f70663          	beq	a4,a5,8001cda0 <store_access_fault_6+0xf2>
    8001cd98:	0000b597          	auipc	a1,0xb
    8001cd9c:	f9858593          	addi	a1,a1,-104 # 80027d30 <__func__.0+0x2d0>
    8001cda0:	0000b517          	auipc	a0,0xb
    8001cda4:	fd050513          	addi	a0,a0,-48 # 80027d70 <__func__.0+0x310>
    8001cda8:	74f080ef          	jal	80025cf6 <printf>
    8001cdac:	0002c797          	auipc	a5,0x2c
    8001cdb0:	2657c783          	lbu	a5,613(a5) # 80049011 <excpt+0x1>
    8001cdb4:	c789                	beqz	a5,8001cdbe <store_access_fault_6+0x110>
    8001cdb6:	6418                	ld	a4,8(s0)
    8001cdb8:	479d                	li	a5,7
    8001cdba:	00f70c63          	beq	a4,a5,8001cdd2 <store_access_fault_6+0x124>
    8001cdbe:	0000b517          	auipc	a0,0xb
    8001cdc2:	fba50513          	addi	a0,a0,-70 # 80027d78 <__func__.0+0x318>
    8001cdc6:	731080ef          	jal	80025cf6 <printf>
    8001cdca:	02900513          	li	a0,41
    8001cdce:	533070ef          	jal	80024b00 <putchar>
    8001cdd2:	4529                	li	a0,10
    8001cdd4:	52d070ef          	jal	80024b00 <putchar>
    8001cdd8:	0002c497          	auipc	s1,0x2c
    8001cddc:	2394c483          	lbu	s1,569(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001cde0:	0000b597          	auipc	a1,0xb
    8001cde4:	f5058593          	addi	a1,a1,-176 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001cde8:	cc91                	beqz	s1,8001ce04 <store_access_fault_6+0x156>
    8001cdea:	6418                	ld	a4,8(s0)
    8001cdec:	479d                	li	a5,7
    TEST_END();
    8001cdee:	0000b597          	auipc	a1,0xb
    8001cdf2:	f3258593          	addi	a1,a1,-206 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001cdf6:	00f70763          	beq	a4,a5,8001ce04 <store_access_fault_6+0x156>
    8001cdfa:	4481                	li	s1,0
    TEST_END();
    8001cdfc:	0000b597          	auipc	a1,0xb
    8001ce00:	f3458593          	addi	a1,a1,-204 # 80027d30 <__func__.0+0x2d0>
    8001ce04:	0000b517          	auipc	a0,0xb
    8001ce08:	fd450513          	addi	a0,a0,-44 # 80027dd8 <__func__.0+0x378>
    8001ce0c:	6eb080ef          	jal	80025cf6 <printf>
    8001ce10:	4511                	li	a0,4
    8001ce12:	de5e30ef          	jal	80000bf6 <goto_priv>
    8001ce16:	e96e40ef          	jal	800014ac <reset_state>
}
    8001ce1a:	60e2                	ld	ra,24(sp)
    8001ce1c:	6442                	ld	s0,16(sp)
    8001ce1e:	8526                	mv	a0,s1
    8001ce20:	64a2                	ld	s1,8(sp)
    8001ce22:	6105                	addi	sp,sp,32
    8001ce24:	8082                	ret

000000008001ce26 <store_access_fault_7>:


bool store_access_fault_7(){
    8001ce26:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ce28:	0000a597          	auipc	a1,0xa
    8001ce2c:	54058593          	addi	a1,a1,1344 # 80027368 <__func__.23>
    8001ce30:	0000b517          	auipc	a0,0xb
    8001ce34:	f1050513          	addi	a0,a0,-240 # 80027d40 <__func__.0+0x2e0>
bool store_access_fault_7(){
    8001ce38:	ec06                	sd	ra,24(sp)
    8001ce3a:	e822                	sd	s0,16(sp)
    8001ce3c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ce3e:	6b9080ef          	jal	80025cf6 <printf>
    8001ce42:	4529                	li	a0,10
    8001ce44:	4bd070ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001ce48:	4511                	li	a0,4
    8001ce4a:	dade30ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001ce4e:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001ce52:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001ce56:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001ce5a:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001ce5e:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001ce62:	10000793          	li	a5,256
    8001ce66:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001ce6a:	20000793          	li	a5,512
    8001ce6e:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001ce72:	40000793          	li	a5,1024
    8001ce76:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001ce7a:	6785                	lui	a5,0x1
    8001ce7c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001ce80:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001ce84:	4785                	li	a5,1
    8001ce86:	07fe                	slli	a5,a5,0x1f
    8001ce88:	4485                	li	s1,1
    8001ce8a:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001ce8e:	08100793          	li	a5,129
    8001ce92:	07e2                	slli	a5,a5,0x18
    8001ce94:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001ce98:	08000793          	li	a5,128
    8001ce9c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001cea0:	67a1                	lui	a5,0x8
    8001cea2:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001cea6:	8526                	mv	a0,s1
    8001cea8:	d4fe30ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001ceac:	0330000f          	fence	rw,rw
    8001ceb0:	0002c417          	auipc	s0,0x2c
    8001ceb4:	16040413          	addi	s0,s0,352 # 80049010 <excpt>
    8001ceb8:	0002c797          	auipc	a5,0x2c
    8001cebc:	1807b823          	sd	zero,400(a5) # 80049048 <excpt+0x38>
    8001cec0:	00941023          	sh	s1,0(s0)
    8001cec4:	0330000f          	fence	rw,rw
    8001cec8:	02149793          	slli	a5,s1,0x21
    8001cecc:	40078793          	addi	a5,a5,1024
    8001ced0:	4701                	li	a4,0
    8001ced2:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001ced6:	08200593          	li	a1,130
    8001ceda:	00011617          	auipc	a2,0x11
    8001cede:	7c660613          	addi	a2,a2,1990 # 8002e6a0 <__func__.0+0x6c40>
    8001cee2:	0000b517          	auipc	a0,0xb
    8001cee6:	e7650513          	addi	a0,a0,-394 # 80027d58 <__func__.0+0x2f8>
    8001ceea:	60d080ef          	jal	80025cf6 <printf>
    8001ceee:	0002c797          	auipc	a5,0x2c
    8001cef2:	1237c783          	lbu	a5,291(a5) # 80049011 <excpt+0x1>
    8001cef6:	0000b597          	auipc	a1,0xb
    8001cefa:	e3a58593          	addi	a1,a1,-454 # 80027d30 <__func__.0+0x2d0>
    8001cefe:	cf89                	beqz	a5,8001cf18 <store_access_fault_7+0xf2>
    8001cf00:	6418                	ld	a4,8(s0)
    8001cf02:	479d                	li	a5,7
    8001cf04:	0000b597          	auipc	a1,0xb
    8001cf08:	e1c58593          	addi	a1,a1,-484 # 80027d20 <__func__.0+0x2c0>
    8001cf0c:	00f70663          	beq	a4,a5,8001cf18 <store_access_fault_7+0xf2>
    8001cf10:	0000b597          	auipc	a1,0xb
    8001cf14:	e2058593          	addi	a1,a1,-480 # 80027d30 <__func__.0+0x2d0>
    8001cf18:	0000b517          	auipc	a0,0xb
    8001cf1c:	e5850513          	addi	a0,a0,-424 # 80027d70 <__func__.0+0x310>
    8001cf20:	5d7080ef          	jal	80025cf6 <printf>
    8001cf24:	0002c797          	auipc	a5,0x2c
    8001cf28:	0ed7c783          	lbu	a5,237(a5) # 80049011 <excpt+0x1>
    8001cf2c:	c789                	beqz	a5,8001cf36 <store_access_fault_7+0x110>
    8001cf2e:	6418                	ld	a4,8(s0)
    8001cf30:	479d                	li	a5,7
    8001cf32:	00f70c63          	beq	a4,a5,8001cf4a <store_access_fault_7+0x124>
    8001cf36:	0000b517          	auipc	a0,0xb
    8001cf3a:	e4250513          	addi	a0,a0,-446 # 80027d78 <__func__.0+0x318>
    8001cf3e:	5b9080ef          	jal	80025cf6 <printf>
    8001cf42:	02900513          	li	a0,41
    8001cf46:	3bb070ef          	jal	80024b00 <putchar>
    8001cf4a:	4529                	li	a0,10
    8001cf4c:	3b5070ef          	jal	80024b00 <putchar>
    8001cf50:	0002c497          	auipc	s1,0x2c
    8001cf54:	0c14c483          	lbu	s1,193(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001cf58:	0000b597          	auipc	a1,0xb
    8001cf5c:	dd858593          	addi	a1,a1,-552 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001cf60:	cc91                	beqz	s1,8001cf7c <store_access_fault_7+0x156>
    8001cf62:	6418                	ld	a4,8(s0)
    8001cf64:	479d                	li	a5,7
    TEST_END();
    8001cf66:	0000b597          	auipc	a1,0xb
    8001cf6a:	dba58593          	addi	a1,a1,-582 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001cf6e:	00f70763          	beq	a4,a5,8001cf7c <store_access_fault_7+0x156>
    8001cf72:	4481                	li	s1,0
    TEST_END();
    8001cf74:	0000b597          	auipc	a1,0xb
    8001cf78:	dbc58593          	addi	a1,a1,-580 # 80027d30 <__func__.0+0x2d0>
    8001cf7c:	0000b517          	auipc	a0,0xb
    8001cf80:	e5c50513          	addi	a0,a0,-420 # 80027dd8 <__func__.0+0x378>
    8001cf84:	573080ef          	jal	80025cf6 <printf>
    8001cf88:	4511                	li	a0,4
    8001cf8a:	c6de30ef          	jal	80000bf6 <goto_priv>
    8001cf8e:	d1ee40ef          	jal	800014ac <reset_state>
}
    8001cf92:	60e2                	ld	ra,24(sp)
    8001cf94:	6442                	ld	s0,16(sp)
    8001cf96:	8526                	mv	a0,s1
    8001cf98:	64a2                	ld	s1,8(sp)
    8001cf9a:	6105                	addi	sp,sp,32
    8001cf9c:	8082                	ret

000000008001cf9e <store_access_fault_8>:

bool store_access_fault_8(){
    8001cf9e:	1101                	addi	sp,sp,-32

    TEST_START();
    8001cfa0:	0000a597          	auipc	a1,0xa
    8001cfa4:	3e058593          	addi	a1,a1,992 # 80027380 <__func__.22>
    8001cfa8:	0000b517          	auipc	a0,0xb
    8001cfac:	d9850513          	addi	a0,a0,-616 # 80027d40 <__func__.0+0x2e0>
bool store_access_fault_8(){
    8001cfb0:	ec06                	sd	ra,24(sp)
    8001cfb2:	e822                	sd	s0,16(sp)
    8001cfb4:	e426                	sd	s1,8(sp)
    TEST_START();
    8001cfb6:	541080ef          	jal	80025cf6 <printf>
    8001cfba:	4529                	li	a0,10
    8001cfbc:	345070ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001cfc0:	4511                	li	a0,4
    8001cfc2:	c35e30ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001cfc6:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001cfca:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001cfce:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001cfd2:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001cfd6:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001cfda:	10000793          	li	a5,256
    8001cfde:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001cfe2:	20000793          	li	a5,512
    8001cfe6:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001cfea:	40000793          	li	a5,1024
    8001cfee:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001cff2:	6785                	lui	a5,0x1
    8001cff4:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001cff8:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001cffc:	4785                	li	a5,1
    8001cffe:	07fe                	slli	a5,a5,0x1f
    8001d000:	4485                	li	s1,1
    8001d002:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001d006:	08100793          	li	a5,129
    8001d00a:	07e2                	slli	a5,a5,0x18
    8001d00c:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d010:	08000793          	li	a5,128
    8001d014:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001d018:	67a1                	lui	a5,0x8
    8001d01a:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001d01e:	4501                	li	a0,0
    8001d020:	bd7e30ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d024:	0330000f          	fence	rw,rw
    8001d028:	0002c417          	auipc	s0,0x2c
    8001d02c:	fe840413          	addi	s0,s0,-24 # 80049010 <excpt>
    8001d030:	0002c797          	auipc	a5,0x2c
    8001d034:	0007bc23          	sd	zero,24(a5) # 80049048 <excpt+0x38>
    8001d038:	00941023          	sh	s1,0(s0)
    8001d03c:	0330000f          	fence	rw,rw
    8001d040:	02149793          	slli	a5,s1,0x21
    8001d044:	40078793          	addi	a5,a5,1024
    8001d048:	4701                	li	a4,0
    8001d04a:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001d04e:	08200593          	li	a1,130
    8001d052:	00011617          	auipc	a2,0x11
    8001d056:	68660613          	addi	a2,a2,1670 # 8002e6d8 <__func__.0+0x6c78>
    8001d05a:	0000b517          	auipc	a0,0xb
    8001d05e:	cfe50513          	addi	a0,a0,-770 # 80027d58 <__func__.0+0x2f8>
    8001d062:	495080ef          	jal	80025cf6 <printf>
    8001d066:	0002c797          	auipc	a5,0x2c
    8001d06a:	fab7c783          	lbu	a5,-85(a5) # 80049011 <excpt+0x1>
    8001d06e:	0000b597          	auipc	a1,0xb
    8001d072:	cc258593          	addi	a1,a1,-830 # 80027d30 <__func__.0+0x2d0>
    8001d076:	cf89                	beqz	a5,8001d090 <store_access_fault_8+0xf2>
    8001d078:	6418                	ld	a4,8(s0)
    8001d07a:	479d                	li	a5,7
    8001d07c:	0000b597          	auipc	a1,0xb
    8001d080:	ca458593          	addi	a1,a1,-860 # 80027d20 <__func__.0+0x2c0>
    8001d084:	00f70663          	beq	a4,a5,8001d090 <store_access_fault_8+0xf2>
    8001d088:	0000b597          	auipc	a1,0xb
    8001d08c:	ca858593          	addi	a1,a1,-856 # 80027d30 <__func__.0+0x2d0>
    8001d090:	0000b517          	auipc	a0,0xb
    8001d094:	ce050513          	addi	a0,a0,-800 # 80027d70 <__func__.0+0x310>
    8001d098:	45f080ef          	jal	80025cf6 <printf>
    8001d09c:	0002c797          	auipc	a5,0x2c
    8001d0a0:	f757c783          	lbu	a5,-139(a5) # 80049011 <excpt+0x1>
    8001d0a4:	c789                	beqz	a5,8001d0ae <store_access_fault_8+0x110>
    8001d0a6:	6418                	ld	a4,8(s0)
    8001d0a8:	479d                	li	a5,7
    8001d0aa:	00f70c63          	beq	a4,a5,8001d0c2 <store_access_fault_8+0x124>
    8001d0ae:	0000b517          	auipc	a0,0xb
    8001d0b2:	cca50513          	addi	a0,a0,-822 # 80027d78 <__func__.0+0x318>
    8001d0b6:	441080ef          	jal	80025cf6 <printf>
    8001d0ba:	02900513          	li	a0,41
    8001d0be:	243070ef          	jal	80024b00 <putchar>
    8001d0c2:	4529                	li	a0,10
    8001d0c4:	23d070ef          	jal	80024b00 <putchar>
    8001d0c8:	0002c497          	auipc	s1,0x2c
    8001d0cc:	f494c483          	lbu	s1,-183(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001d0d0:	0000b597          	auipc	a1,0xb
    8001d0d4:	c6058593          	addi	a1,a1,-928 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001d0d8:	cc91                	beqz	s1,8001d0f4 <store_access_fault_8+0x156>
    8001d0da:	6418                	ld	a4,8(s0)
    8001d0dc:	479d                	li	a5,7
    TEST_END();
    8001d0de:	0000b597          	auipc	a1,0xb
    8001d0e2:	c4258593          	addi	a1,a1,-958 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001d0e6:	00f70763          	beq	a4,a5,8001d0f4 <store_access_fault_8+0x156>
    8001d0ea:	4481                	li	s1,0
    TEST_END();
    8001d0ec:	0000b597          	auipc	a1,0xb
    8001d0f0:	c4458593          	addi	a1,a1,-956 # 80027d30 <__func__.0+0x2d0>
    8001d0f4:	0000b517          	auipc	a0,0xb
    8001d0f8:	ce450513          	addi	a0,a0,-796 # 80027dd8 <__func__.0+0x378>
    8001d0fc:	3fb080ef          	jal	80025cf6 <printf>
    8001d100:	4511                	li	a0,4
    8001d102:	af5e30ef          	jal	80000bf6 <goto_priv>
    8001d106:	ba6e40ef          	jal	800014ac <reset_state>
}
    8001d10a:	60e2                	ld	ra,24(sp)
    8001d10c:	6442                	ld	s0,16(sp)
    8001d10e:	8526                	mv	a0,s1
    8001d110:	64a2                	ld	s1,8(sp)
    8001d112:	6105                	addi	sp,sp,32
    8001d114:	8082                	ret

000000008001d116 <store_access_fault_9>:

bool store_access_fault_9(){
    8001d116:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d118:	0000a597          	auipc	a1,0xa
    8001d11c:	28058593          	addi	a1,a1,640 # 80027398 <__func__.21>
    8001d120:	0000b517          	auipc	a0,0xb
    8001d124:	c2050513          	addi	a0,a0,-992 # 80027d40 <__func__.0+0x2e0>
bool store_access_fault_9(){
    8001d128:	ec06                	sd	ra,24(sp)
    8001d12a:	e822                	sd	s0,16(sp)
    8001d12c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d12e:	3c9080ef          	jal	80025cf6 <printf>
    8001d132:	4529                	li	a0,10
    8001d134:	1cd070ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001d138:	4511                	li	a0,4
    8001d13a:	abde30ef          	jal	80000bf6 <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d13e:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d142:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d146:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d14a:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d14e:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001d152:	10000793          	li	a5,256
    8001d156:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001d15a:	20000793          	li	a5,512
    8001d15e:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001d162:	40000793          	li	a5,1024
    8001d166:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001d16a:	6785                	lui	a5,0x1
    8001d16c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001d170:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001d174:	4785                	li	a5,1
    8001d176:	07fe                	slli	a5,a5,0x1f
    8001d178:	4485                	li	s1,1
    8001d17a:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001d17e:	08100793          	li	a5,129
    8001d182:	07e2                	slli	a5,a5,0x18
    8001d184:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d188:	08000793          	li	a5,128
    8001d18c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001d190:	67a1                	lui	a5,0x8
    8001d192:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001d196:	4501                	li	a0,0
    8001d198:	a5fe30ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d19c:	0330000f          	fence	rw,rw
    8001d1a0:	0002c417          	auipc	s0,0x2c
    8001d1a4:	e7040413          	addi	s0,s0,-400 # 80049010 <excpt>
    8001d1a8:	0002c797          	auipc	a5,0x2c
    8001d1ac:	ea07b023          	sd	zero,-352(a5) # 80049048 <excpt+0x38>
    8001d1b0:	00941023          	sh	s1,0(s0)
    8001d1b4:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8001d1b8:	37ab77b7          	lui	a5,0x37ab7
    8001d1bc:	02349713          	slli	a4,s1,0x23
    8001d1c0:	078a                	slli	a5,a5,0x2
    8001d1c2:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001d1c6:	1761                	addi	a4,a4,-8
    8001d1c8:	00f73023          	sd	a5,0(a4)
    
    sd(0x1fffffffeUL << 2 ,0xdeadbeef);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    8001d1cc:	08200593          	li	a1,130
    8001d1d0:	00011617          	auipc	a2,0x11
    8001d1d4:	54060613          	addi	a2,a2,1344 # 8002e710 <__func__.0+0x6cb0>
    8001d1d8:	0000b517          	auipc	a0,0xb
    8001d1dc:	b8050513          	addi	a0,a0,-1152 # 80027d58 <__func__.0+0x2f8>
    8001d1e0:	317080ef          	jal	80025cf6 <printf>
    8001d1e4:	0002c797          	auipc	a5,0x2c
    8001d1e8:	e2d7c783          	lbu	a5,-467(a5) # 80049011 <excpt+0x1>
    8001d1ec:	0000b597          	auipc	a1,0xb
    8001d1f0:	b4458593          	addi	a1,a1,-1212 # 80027d30 <__func__.0+0x2d0>
    8001d1f4:	cf89                	beqz	a5,8001d20e <store_access_fault_9+0xf8>
    8001d1f6:	6418                	ld	a4,8(s0)
    8001d1f8:	479d                	li	a5,7
    8001d1fa:	0000b597          	auipc	a1,0xb
    8001d1fe:	b2658593          	addi	a1,a1,-1242 # 80027d20 <__func__.0+0x2c0>
    8001d202:	00f70663          	beq	a4,a5,8001d20e <store_access_fault_9+0xf8>
    8001d206:	0000b597          	auipc	a1,0xb
    8001d20a:	b2a58593          	addi	a1,a1,-1238 # 80027d30 <__func__.0+0x2d0>
    8001d20e:	0000b517          	auipc	a0,0xb
    8001d212:	b6250513          	addi	a0,a0,-1182 # 80027d70 <__func__.0+0x310>
    8001d216:	2e1080ef          	jal	80025cf6 <printf>
    8001d21a:	0002c797          	auipc	a5,0x2c
    8001d21e:	df77c783          	lbu	a5,-521(a5) # 80049011 <excpt+0x1>
    8001d222:	c789                	beqz	a5,8001d22c <store_access_fault_9+0x116>
    8001d224:	6418                	ld	a4,8(s0)
    8001d226:	479d                	li	a5,7
    8001d228:	00f70c63          	beq	a4,a5,8001d240 <store_access_fault_9+0x12a>
    8001d22c:	0000b517          	auipc	a0,0xb
    8001d230:	b4c50513          	addi	a0,a0,-1204 # 80027d78 <__func__.0+0x318>
    8001d234:	2c3080ef          	jal	80025cf6 <printf>
    8001d238:	02900513          	li	a0,41
    8001d23c:	0c5070ef          	jal	80024b00 <putchar>
    8001d240:	4529                	li	a0,10
    8001d242:	0bf070ef          	jal	80024b00 <putchar>
    8001d246:	0002c497          	auipc	s1,0x2c
    8001d24a:	dcb4c483          	lbu	s1,-565(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001d24e:	0000b597          	auipc	a1,0xb
    8001d252:	ae258593          	addi	a1,a1,-1310 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    8001d256:	cc91                	beqz	s1,8001d272 <store_access_fault_9+0x15c>
    8001d258:	6418                	ld	a4,8(s0)
    8001d25a:	479d                	li	a5,7
    TEST_END();
    8001d25c:	0000b597          	auipc	a1,0xb
    8001d260:	ac458593          	addi	a1,a1,-1340 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    8001d264:	00f70763          	beq	a4,a5,8001d272 <store_access_fault_9+0x15c>
    8001d268:	4481                	li	s1,0
    TEST_END();
    8001d26a:	0000b597          	auipc	a1,0xb
    8001d26e:	ac658593          	addi	a1,a1,-1338 # 80027d30 <__func__.0+0x2d0>
    8001d272:	0000b517          	auipc	a0,0xb
    8001d276:	b6650513          	addi	a0,a0,-1178 # 80027dd8 <__func__.0+0x378>
    8001d27a:	27d080ef          	jal	80025cf6 <printf>
    8001d27e:	4511                	li	a0,4
    8001d280:	977e30ef          	jal	80000bf6 <goto_priv>
    8001d284:	a28e40ef          	jal	800014ac <reset_state>
}
    8001d288:	60e2                	ld	ra,24(sp)
    8001d28a:	6442                	ld	s0,16(sp)
    8001d28c:	8526                	mv	a0,s1
    8001d28e:	64a2                	ld	s1,8(sp)
    8001d290:	6105                	addi	sp,sp,32
    8001d292:	8082                	ret

000000008001d294 <store_access_fault_10>:


bool store_access_fault_10(){
    8001d294:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d296:	0000a597          	auipc	a1,0xa
    8001d29a:	11a58593          	addi	a1,a1,282 # 800273b0 <__func__.20>
    8001d29e:	0000b517          	auipc	a0,0xb
    8001d2a2:	aa250513          	addi	a0,a0,-1374 # 80027d40 <__func__.0+0x2e0>
bool store_access_fault_10(){
    8001d2a6:	ec06                	sd	ra,24(sp)
    8001d2a8:	e822                	sd	s0,16(sp)
    8001d2aa:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d2ac:	24b080ef          	jal	80025cf6 <printf>
    8001d2b0:	4529                	li	a0,10
    8001d2b2:	04f070ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001d2b6:	4511                	li	a0,4
    8001d2b8:	93fe30ef          	jal	80000bf6 <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d2bc:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d2c0:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d2c4:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d2c8:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d2cc:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001d2d0:	4785                	li	a5,1
    8001d2d2:	07fe                	slli	a5,a5,0x1f
    8001d2d4:	4485                	li	s1,1
    8001d2d6:	3b079073          	csrw	pmpaddr0,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d2da:	08000793          	li	a5,128
    8001d2de:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001d2e2:	450d                	li	a0,3
    8001d2e4:	913e30ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d2e8:	0330000f          	fence	rw,rw
    8001d2ec:	0002c417          	auipc	s0,0x2c
    8001d2f0:	d2440413          	addi	s0,s0,-732 # 80049010 <excpt>
    8001d2f4:	0002c797          	auipc	a5,0x2c
    8001d2f8:	d407ba23          	sd	zero,-684(a5) # 80049048 <excpt+0x38>
    8001d2fc:	00941023          	sh	s1,0(s0)
    8001d300:	0330000f          	fence	rw,rw
    8001d304:	37ab77b7          	lui	a5,0x37ab7
    8001d308:	078a                	slli	a5,a5,0x2
    8001d30a:	00803737          	lui	a4,0x803
    8001d30e:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001d312:	072a                	slli	a4,a4,0xa
    8001d314:	00f73023          	sd	a5,0(a4) # 803000 <STACK_SIZE+0x703000>
    
    sd(0x80300000UL << 2,0xdeadbeef);

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    8001d318:	08200593          	li	a1,130
    8001d31c:	00011617          	auipc	a2,0x11
    8001d320:	46460613          	addi	a2,a2,1124 # 8002e780 <__func__.0+0x6d20>
    8001d324:	0000b517          	auipc	a0,0xb
    8001d328:	a3450513          	addi	a0,a0,-1484 # 80027d58 <__func__.0+0x2f8>
    8001d32c:	1cb080ef          	jal	80025cf6 <printf>
    8001d330:	0002c797          	auipc	a5,0x2c
    8001d334:	ce17c783          	lbu	a5,-799(a5) # 80049011 <excpt+0x1>
    8001d338:	0000b597          	auipc	a1,0xb
    8001d33c:	9f858593          	addi	a1,a1,-1544 # 80027d30 <__func__.0+0x2d0>
    8001d340:	cf89                	beqz	a5,8001d35a <store_access_fault_10+0xc6>
    8001d342:	6418                	ld	a4,8(s0)
    8001d344:	479d                	li	a5,7
    8001d346:	0000b597          	auipc	a1,0xb
    8001d34a:	9da58593          	addi	a1,a1,-1574 # 80027d20 <__func__.0+0x2c0>
    8001d34e:	00f70663          	beq	a4,a5,8001d35a <store_access_fault_10+0xc6>
    8001d352:	0000b597          	auipc	a1,0xb
    8001d356:	9de58593          	addi	a1,a1,-1570 # 80027d30 <__func__.0+0x2d0>
    8001d35a:	0000b517          	auipc	a0,0xb
    8001d35e:	a1650513          	addi	a0,a0,-1514 # 80027d70 <__func__.0+0x310>
    8001d362:	195080ef          	jal	80025cf6 <printf>
    8001d366:	0002c797          	auipc	a5,0x2c
    8001d36a:	cab7c783          	lbu	a5,-853(a5) # 80049011 <excpt+0x1>
    8001d36e:	c789                	beqz	a5,8001d378 <store_access_fault_10+0xe4>
    8001d370:	6418                	ld	a4,8(s0)
    8001d372:	479d                	li	a5,7
    8001d374:	00f70c63          	beq	a4,a5,8001d38c <store_access_fault_10+0xf8>
    8001d378:	0000b517          	auipc	a0,0xb
    8001d37c:	a0050513          	addi	a0,a0,-1536 # 80027d78 <__func__.0+0x318>
    8001d380:	177080ef          	jal	80025cf6 <printf>
    8001d384:	02900513          	li	a0,41
    8001d388:	778070ef          	jal	80024b00 <putchar>
    8001d38c:	4529                	li	a0,10
    8001d38e:	772070ef          	jal	80024b00 <putchar>
    8001d392:	0002c497          	auipc	s1,0x2c
    8001d396:	c7f4c483          	lbu	s1,-897(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001d39a:	0000b597          	auipc	a1,0xb
    8001d39e:	99658593          	addi	a1,a1,-1642 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    8001d3a2:	cc91                	beqz	s1,8001d3be <store_access_fault_10+0x12a>
    8001d3a4:	6418                	ld	a4,8(s0)
    8001d3a6:	479d                	li	a5,7
    TEST_END();
    8001d3a8:	0000b597          	auipc	a1,0xb
    8001d3ac:	97858593          	addi	a1,a1,-1672 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    8001d3b0:	00f70763          	beq	a4,a5,8001d3be <store_access_fault_10+0x12a>
    8001d3b4:	4481                	li	s1,0
    TEST_END();
    8001d3b6:	0000b597          	auipc	a1,0xb
    8001d3ba:	97a58593          	addi	a1,a1,-1670 # 80027d30 <__func__.0+0x2d0>
    8001d3be:	0000b517          	auipc	a0,0xb
    8001d3c2:	a1a50513          	addi	a0,a0,-1510 # 80027dd8 <__func__.0+0x378>
    8001d3c6:	131080ef          	jal	80025cf6 <printf>
    8001d3ca:	4511                	li	a0,4
    8001d3cc:	82be30ef          	jal	80000bf6 <goto_priv>
    8001d3d0:	8dce40ef          	jal	800014ac <reset_state>
}
    8001d3d4:	60e2                	ld	ra,24(sp)
    8001d3d6:	6442                	ld	s0,16(sp)
    8001d3d8:	8526                	mv	a0,s1
    8001d3da:	64a2                	ld	s1,8(sp)
    8001d3dc:	6105                	addi	sp,sp,32
    8001d3de:	8082                	ret

000000008001d3e0 <amo_access_fault_1>:




bool amo_access_fault_1(){
    8001d3e0:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d3e2:	0000a597          	auipc	a1,0xa
    8001d3e6:	fe658593          	addi	a1,a1,-26 # 800273c8 <__func__.19>
    8001d3ea:	0000b517          	auipc	a0,0xb
    8001d3ee:	95650513          	addi	a0,a0,-1706 # 80027d40 <__func__.0+0x2e0>
bool amo_access_fault_1(){
    8001d3f2:	ec06                	sd	ra,24(sp)
    8001d3f4:	e822                	sd	s0,16(sp)
    8001d3f6:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d3f8:	0ff080ef          	jal	80025cf6 <printf>
    8001d3fc:	4529                	li	a0,10
    8001d3fe:	702070ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001d402:	4511                	li	a0,4
    8001d404:	ff2e30ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d408:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001d40c:	10000793          	li	a5,256
    8001d410:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001d414:	20000793          	li	a5,512
    8001d418:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001d41c:	40000793          	li	a5,1024
    8001d420:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001d424:	6785                	lui	a5,0x1
    8001d426:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001d42a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001d42e:	4785                	li	a5,1
    8001d430:	07fe                	slli	a5,a5,0x1f
    8001d432:	4705                	li	a4,1
    8001d434:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001d438:	08100793          	li	a5,129
    8001d43c:	07e2                	slli	a5,a5,0x18
    8001d43e:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001d442:	67a1                	lui	a5,0x8
    8001d444:	3a07a073          	csrs	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001d448:	0330000f          	fence	rw,rw
    8001d44c:	0002c417          	auipc	s0,0x2c
    8001d450:	bc440413          	addi	s0,s0,-1084 # 80049010 <excpt>
    8001d454:	0002c797          	auipc	a5,0x2c
    8001d458:	be07ba23          	sd	zero,-1036(a5) # 80049048 <excpt+0x38>
    8001d45c:	00e41023          	sh	a4,0(s0)
    8001d460:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoadd_d, "amoadd.d", uint64_t);
    8001d464:	37ab77b7          	lui	a5,0x37ab7
    8001d468:	078a                	slli	a5,a5,0x2
    8001d46a:	1706                	slli	a4,a4,0x21
    8001d46c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001d470:	40070713          	addi	a4,a4,1024
    8001d474:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    printf("%d\n",excpt.triggered);
    8001d478:	0002c597          	auipc	a1,0x2c
    8001d47c:	b995c583          	lbu	a1,-1127(a1) # 80049011 <excpt+0x1>
    8001d480:	0000b517          	auipc	a0,0xb
    8001d484:	40850513          	addi	a0,a0,1032 # 80028888 <__func__.0+0xe28>
    8001d488:	06f080ef          	jal	80025cf6 <printf>
    printf("%d\n",excpt.cause);
    8001d48c:	640c                	ld	a1,8(s0)
    8001d48e:	0000b517          	auipc	a0,0xb
    8001d492:	3fa50513          	addi	a0,a0,1018 # 80028888 <__func__.0+0xe28>
    8001d496:	061080ef          	jal	80025cf6 <printf>

    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001d49a:	08200593          	li	a1,130
    8001d49e:	00011617          	auipc	a2,0x11
    8001d4a2:	34260613          	addi	a2,a2,834 # 8002e7e0 <__func__.0+0x6d80>
    8001d4a6:	0000b517          	auipc	a0,0xb
    8001d4aa:	8b250513          	addi	a0,a0,-1870 # 80027d58 <__func__.0+0x2f8>
    8001d4ae:	049080ef          	jal	80025cf6 <printf>
    8001d4b2:	0002c797          	auipc	a5,0x2c
    8001d4b6:	b5f7c783          	lbu	a5,-1185(a5) # 80049011 <excpt+0x1>
    8001d4ba:	0000b597          	auipc	a1,0xb
    8001d4be:	87658593          	addi	a1,a1,-1930 # 80027d30 <__func__.0+0x2d0>
    8001d4c2:	cf89                	beqz	a5,8001d4dc <amo_access_fault_1+0xfc>
    8001d4c4:	6418                	ld	a4,8(s0)
    8001d4c6:	479d                	li	a5,7
    8001d4c8:	0000b597          	auipc	a1,0xb
    8001d4cc:	85858593          	addi	a1,a1,-1960 # 80027d20 <__func__.0+0x2c0>
    8001d4d0:	00f70663          	beq	a4,a5,8001d4dc <amo_access_fault_1+0xfc>
    8001d4d4:	0000b597          	auipc	a1,0xb
    8001d4d8:	85c58593          	addi	a1,a1,-1956 # 80027d30 <__func__.0+0x2d0>
    8001d4dc:	0000b517          	auipc	a0,0xb
    8001d4e0:	89450513          	addi	a0,a0,-1900 # 80027d70 <__func__.0+0x310>
    8001d4e4:	013080ef          	jal	80025cf6 <printf>
    8001d4e8:	0002c797          	auipc	a5,0x2c
    8001d4ec:	b297c783          	lbu	a5,-1239(a5) # 80049011 <excpt+0x1>
    8001d4f0:	c789                	beqz	a5,8001d4fa <amo_access_fault_1+0x11a>
    8001d4f2:	6418                	ld	a4,8(s0)
    8001d4f4:	479d                	li	a5,7
    8001d4f6:	00f70c63          	beq	a4,a5,8001d50e <amo_access_fault_1+0x12e>
    8001d4fa:	0000b517          	auipc	a0,0xb
    8001d4fe:	87e50513          	addi	a0,a0,-1922 # 80027d78 <__func__.0+0x318>
    8001d502:	7f4080ef          	jal	80025cf6 <printf>
    8001d506:	02900513          	li	a0,41
    8001d50a:	5f6070ef          	jal	80024b00 <putchar>
    8001d50e:	4529                	li	a0,10
    8001d510:	5f0070ef          	jal	80024b00 <putchar>
    8001d514:	0002c497          	auipc	s1,0x2c
    8001d518:	afd4c483          	lbu	s1,-1283(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001d51c:	0000b597          	auipc	a1,0xb
    8001d520:	81458593          	addi	a1,a1,-2028 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001d524:	cc91                	beqz	s1,8001d540 <amo_access_fault_1+0x160>
    8001d526:	6418                	ld	a4,8(s0)
    8001d528:	479d                	li	a5,7
    TEST_END();
    8001d52a:	0000a597          	auipc	a1,0xa
    8001d52e:	7f658593          	addi	a1,a1,2038 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001d532:	00f70763          	beq	a4,a5,8001d540 <amo_access_fault_1+0x160>
    8001d536:	4481                	li	s1,0
    TEST_END();
    8001d538:	0000a597          	auipc	a1,0xa
    8001d53c:	7f858593          	addi	a1,a1,2040 # 80027d30 <__func__.0+0x2d0>
    8001d540:	0000b517          	auipc	a0,0xb
    8001d544:	89850513          	addi	a0,a0,-1896 # 80027dd8 <__func__.0+0x378>
    8001d548:	7ae080ef          	jal	80025cf6 <printf>
    8001d54c:	4511                	li	a0,4
    8001d54e:	ea8e30ef          	jal	80000bf6 <goto_priv>
    8001d552:	f5be30ef          	jal	800014ac <reset_state>
}
    8001d556:	60e2                	ld	ra,24(sp)
    8001d558:	6442                	ld	s0,16(sp)
    8001d55a:	8526                	mv	a0,s1
    8001d55c:	64a2                	ld	s1,8(sp)
    8001d55e:	6105                	addi	sp,sp,32
    8001d560:	8082                	ret

000000008001d562 <amo_access_fault_2>:

bool amo_access_fault_2(){
    8001d562:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d564:	0000a597          	auipc	a1,0xa
    8001d568:	e7c58593          	addi	a1,a1,-388 # 800273e0 <__func__.18>
    8001d56c:	0000a517          	auipc	a0,0xa
    8001d570:	7d450513          	addi	a0,a0,2004 # 80027d40 <__func__.0+0x2e0>
bool amo_access_fault_2(){
    8001d574:	ec06                	sd	ra,24(sp)
    8001d576:	e822                	sd	s0,16(sp)
    8001d578:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d57a:	77c080ef          	jal	80025cf6 <printf>
    8001d57e:	4529                	li	a0,10
    8001d580:	580070ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001d584:	4511                	li	a0,4
    8001d586:	e70e30ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d58a:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d58e:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d592:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d596:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d59a:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001d59e:	10000793          	li	a5,256
    8001d5a2:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001d5a6:	20000793          	li	a5,512
    8001d5aa:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001d5ae:	40000793          	li	a5,1024
    8001d5b2:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001d5b6:	6785                	lui	a5,0x1
    8001d5b8:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001d5bc:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001d5c0:	4785                	li	a5,1
    8001d5c2:	07fe                	slli	a5,a5,0x1f
    8001d5c4:	4485                	li	s1,1
    8001d5c6:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001d5ca:	08100793          	li	a5,129
    8001d5ce:	07e2                	slli	a5,a5,0x18
    8001d5d0:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d5d4:	08000793          	li	a5,128
    8001d5d8:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001d5dc:	67a1                	lui	a5,0x8
    8001d5de:	3a07a073          	csrs	pmpcfg0,a5


    goto_priv(PRIV_HS);
    8001d5e2:	450d                	li	a0,3
    8001d5e4:	e12e30ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d5e8:	0330000f          	fence	rw,rw
    8001d5ec:	0002c417          	auipc	s0,0x2c
    8001d5f0:	a2440413          	addi	s0,s0,-1500 # 80049010 <excpt>
    8001d5f4:	0002c797          	auipc	a5,0x2c
    8001d5f8:	a407ba23          	sd	zero,-1452(a5) # 80049048 <excpt+0x38>
    8001d5fc:	00941023          	sh	s1,0(s0)
    8001d600:	0330000f          	fence	rw,rw
    8001d604:	37ab77b7          	lui	a5,0x37ab7
    8001d608:	02149713          	slli	a4,s1,0x21
    8001d60c:	078a                	slli	a5,a5,0x2
    8001d60e:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001d612:	40070713          	addi	a4,a4,1024
    8001d616:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001d61a:	08200593          	li	a1,130
    8001d61e:	00011617          	auipc	a2,0x11
    8001d622:	20260613          	addi	a2,a2,514 # 8002e820 <__func__.0+0x6dc0>
    8001d626:	0000a517          	auipc	a0,0xa
    8001d62a:	73250513          	addi	a0,a0,1842 # 80027d58 <__func__.0+0x2f8>
    8001d62e:	6c8080ef          	jal	80025cf6 <printf>
    8001d632:	0002c797          	auipc	a5,0x2c
    8001d636:	9df7c783          	lbu	a5,-1569(a5) # 80049011 <excpt+0x1>
    8001d63a:	0000a597          	auipc	a1,0xa
    8001d63e:	6f658593          	addi	a1,a1,1782 # 80027d30 <__func__.0+0x2d0>
    8001d642:	cf89                	beqz	a5,8001d65c <amo_access_fault_2+0xfa>
    8001d644:	6418                	ld	a4,8(s0)
    8001d646:	479d                	li	a5,7
    8001d648:	0000a597          	auipc	a1,0xa
    8001d64c:	6d858593          	addi	a1,a1,1752 # 80027d20 <__func__.0+0x2c0>
    8001d650:	00f70663          	beq	a4,a5,8001d65c <amo_access_fault_2+0xfa>
    8001d654:	0000a597          	auipc	a1,0xa
    8001d658:	6dc58593          	addi	a1,a1,1756 # 80027d30 <__func__.0+0x2d0>
    8001d65c:	0000a517          	auipc	a0,0xa
    8001d660:	71450513          	addi	a0,a0,1812 # 80027d70 <__func__.0+0x310>
    8001d664:	692080ef          	jal	80025cf6 <printf>
    8001d668:	0002c797          	auipc	a5,0x2c
    8001d66c:	9a97c783          	lbu	a5,-1623(a5) # 80049011 <excpt+0x1>
    8001d670:	c789                	beqz	a5,8001d67a <amo_access_fault_2+0x118>
    8001d672:	6418                	ld	a4,8(s0)
    8001d674:	479d                	li	a5,7
    8001d676:	00f70c63          	beq	a4,a5,8001d68e <amo_access_fault_2+0x12c>
    8001d67a:	0000a517          	auipc	a0,0xa
    8001d67e:	6fe50513          	addi	a0,a0,1790 # 80027d78 <__func__.0+0x318>
    8001d682:	674080ef          	jal	80025cf6 <printf>
    8001d686:	02900513          	li	a0,41
    8001d68a:	476070ef          	jal	80024b00 <putchar>
    8001d68e:	4529                	li	a0,10
    8001d690:	470070ef          	jal	80024b00 <putchar>
    8001d694:	0002c497          	auipc	s1,0x2c
    8001d698:	97d4c483          	lbu	s1,-1667(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001d69c:	0000a597          	auipc	a1,0xa
    8001d6a0:	69458593          	addi	a1,a1,1684 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001d6a4:	cc91                	beqz	s1,8001d6c0 <amo_access_fault_2+0x15e>
    8001d6a6:	6418                	ld	a4,8(s0)
    8001d6a8:	479d                	li	a5,7
    TEST_END();
    8001d6aa:	0000a597          	auipc	a1,0xa
    8001d6ae:	67658593          	addi	a1,a1,1654 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001d6b2:	00f70763          	beq	a4,a5,8001d6c0 <amo_access_fault_2+0x15e>
    8001d6b6:	4481                	li	s1,0
    TEST_END();
    8001d6b8:	0000a597          	auipc	a1,0xa
    8001d6bc:	67858593          	addi	a1,a1,1656 # 80027d30 <__func__.0+0x2d0>
    8001d6c0:	0000a517          	auipc	a0,0xa
    8001d6c4:	71850513          	addi	a0,a0,1816 # 80027dd8 <__func__.0+0x378>
    8001d6c8:	62e080ef          	jal	80025cf6 <printf>
    8001d6cc:	4511                	li	a0,4
    8001d6ce:	d28e30ef          	jal	80000bf6 <goto_priv>
    8001d6d2:	ddbe30ef          	jal	800014ac <reset_state>
}
    8001d6d6:	60e2                	ld	ra,24(sp)
    8001d6d8:	6442                	ld	s0,16(sp)
    8001d6da:	8526                	mv	a0,s1
    8001d6dc:	64a2                	ld	s1,8(sp)
    8001d6de:	6105                	addi	sp,sp,32
    8001d6e0:	8082                	ret

000000008001d6e2 <amo_access_fault_3>:


bool amo_access_fault_3(){
    8001d6e2:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d6e4:	0000a597          	auipc	a1,0xa
    8001d6e8:	d1458593          	addi	a1,a1,-748 # 800273f8 <__func__.17>
    8001d6ec:	0000a517          	auipc	a0,0xa
    8001d6f0:	65450513          	addi	a0,a0,1620 # 80027d40 <__func__.0+0x2e0>
bool amo_access_fault_3(){
    8001d6f4:	ec06                	sd	ra,24(sp)
    8001d6f6:	e822                	sd	s0,16(sp)
    8001d6f8:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d6fa:	5fc080ef          	jal	80025cf6 <printf>
    8001d6fe:	4529                	li	a0,10
    8001d700:	400070ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001d704:	4511                	li	a0,4
    8001d706:	cf0e30ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d70a:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d70e:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d712:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d716:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d71a:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001d71e:	10000793          	li	a5,256
    8001d722:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001d726:	20000793          	li	a5,512
    8001d72a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001d72e:	40000793          	li	a5,1024
    8001d732:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001d736:	6785                	lui	a5,0x1
    8001d738:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001d73c:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001d740:	4785                	li	a5,1
    8001d742:	07fe                	slli	a5,a5,0x1f
    8001d744:	4485                	li	s1,1
    8001d746:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001d74a:	08100793          	li	a5,129
    8001d74e:	07e2                	slli	a5,a5,0x18
    8001d750:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d754:	08000793          	li	a5,128
    8001d758:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001d75c:	67a1                	lui	a5,0x8
    8001d75e:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001d762:	8526                	mv	a0,s1
    8001d764:	c92e30ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d768:	0330000f          	fence	rw,rw
    8001d76c:	0002c417          	auipc	s0,0x2c
    8001d770:	8a440413          	addi	s0,s0,-1884 # 80049010 <excpt>
    8001d774:	0002c797          	auipc	a5,0x2c
    8001d778:	8c07ba23          	sd	zero,-1836(a5) # 80049048 <excpt+0x38>
    8001d77c:	00941023          	sh	s1,0(s0)
    8001d780:	0330000f          	fence	rw,rw
    8001d784:	37ab77b7          	lui	a5,0x37ab7
    8001d788:	02149713          	slli	a4,s1,0x21
    8001d78c:	078a                	slli	a5,a5,0x2
    8001d78e:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001d792:	40070713          	addi	a4,a4,1024
    8001d796:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001d79a:	08200593          	li	a1,130
    8001d79e:	00011617          	auipc	a2,0x11
    8001d7a2:	0c260613          	addi	a2,a2,194 # 8002e860 <__func__.0+0x6e00>
    8001d7a6:	0000a517          	auipc	a0,0xa
    8001d7aa:	5b250513          	addi	a0,a0,1458 # 80027d58 <__func__.0+0x2f8>
    8001d7ae:	548080ef          	jal	80025cf6 <printf>
    8001d7b2:	0002c797          	auipc	a5,0x2c
    8001d7b6:	85f7c783          	lbu	a5,-1953(a5) # 80049011 <excpt+0x1>
    8001d7ba:	0000a597          	auipc	a1,0xa
    8001d7be:	57658593          	addi	a1,a1,1398 # 80027d30 <__func__.0+0x2d0>
    8001d7c2:	cf89                	beqz	a5,8001d7dc <amo_access_fault_3+0xfa>
    8001d7c4:	6418                	ld	a4,8(s0)
    8001d7c6:	479d                	li	a5,7
    8001d7c8:	0000a597          	auipc	a1,0xa
    8001d7cc:	55858593          	addi	a1,a1,1368 # 80027d20 <__func__.0+0x2c0>
    8001d7d0:	00f70663          	beq	a4,a5,8001d7dc <amo_access_fault_3+0xfa>
    8001d7d4:	0000a597          	auipc	a1,0xa
    8001d7d8:	55c58593          	addi	a1,a1,1372 # 80027d30 <__func__.0+0x2d0>
    8001d7dc:	0000a517          	auipc	a0,0xa
    8001d7e0:	59450513          	addi	a0,a0,1428 # 80027d70 <__func__.0+0x310>
    8001d7e4:	512080ef          	jal	80025cf6 <printf>
    8001d7e8:	0002c797          	auipc	a5,0x2c
    8001d7ec:	8297c783          	lbu	a5,-2007(a5) # 80049011 <excpt+0x1>
    8001d7f0:	c789                	beqz	a5,8001d7fa <amo_access_fault_3+0x118>
    8001d7f2:	6418                	ld	a4,8(s0)
    8001d7f4:	479d                	li	a5,7
    8001d7f6:	00f70c63          	beq	a4,a5,8001d80e <amo_access_fault_3+0x12c>
    8001d7fa:	0000a517          	auipc	a0,0xa
    8001d7fe:	57e50513          	addi	a0,a0,1406 # 80027d78 <__func__.0+0x318>
    8001d802:	4f4080ef          	jal	80025cf6 <printf>
    8001d806:	02900513          	li	a0,41
    8001d80a:	2f6070ef          	jal	80024b00 <putchar>
    8001d80e:	4529                	li	a0,10
    8001d810:	2f0070ef          	jal	80024b00 <putchar>
    8001d814:	0002b497          	auipc	s1,0x2b
    8001d818:	7fd4c483          	lbu	s1,2045(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001d81c:	0000a597          	auipc	a1,0xa
    8001d820:	51458593          	addi	a1,a1,1300 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001d824:	cc91                	beqz	s1,8001d840 <amo_access_fault_3+0x15e>
    8001d826:	6418                	ld	a4,8(s0)
    8001d828:	479d                	li	a5,7
    TEST_END();
    8001d82a:	0000a597          	auipc	a1,0xa
    8001d82e:	4f658593          	addi	a1,a1,1270 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001d832:	00f70763          	beq	a4,a5,8001d840 <amo_access_fault_3+0x15e>
    8001d836:	4481                	li	s1,0
    TEST_END();
    8001d838:	0000a597          	auipc	a1,0xa
    8001d83c:	4f858593          	addi	a1,a1,1272 # 80027d30 <__func__.0+0x2d0>
    8001d840:	0000a517          	auipc	a0,0xa
    8001d844:	59850513          	addi	a0,a0,1432 # 80027dd8 <__func__.0+0x378>
    8001d848:	4ae080ef          	jal	80025cf6 <printf>
    8001d84c:	4511                	li	a0,4
    8001d84e:	ba8e30ef          	jal	80000bf6 <goto_priv>
    8001d852:	c5be30ef          	jal	800014ac <reset_state>
}
    8001d856:	60e2                	ld	ra,24(sp)
    8001d858:	6442                	ld	s0,16(sp)
    8001d85a:	8526                	mv	a0,s1
    8001d85c:	64a2                	ld	s1,8(sp)
    8001d85e:	6105                	addi	sp,sp,32
    8001d860:	8082                	ret

000000008001d862 <amo_access_fault_4>:

bool amo_access_fault_4(){
    8001d862:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d864:	0000a597          	auipc	a1,0xa
    8001d868:	bac58593          	addi	a1,a1,-1108 # 80027410 <__func__.16>
    8001d86c:	0000a517          	auipc	a0,0xa
    8001d870:	4d450513          	addi	a0,a0,1236 # 80027d40 <__func__.0+0x2e0>
bool amo_access_fault_4(){
    8001d874:	ec06                	sd	ra,24(sp)
    8001d876:	e822                	sd	s0,16(sp)
    8001d878:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d87a:	47c080ef          	jal	80025cf6 <printf>
    8001d87e:	4529                	li	a0,10
    8001d880:	280070ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001d884:	4511                	li	a0,4
    8001d886:	b70e30ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d88a:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d88e:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d892:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d896:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d89a:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001d89e:	10000793          	li	a5,256
    8001d8a2:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001d8a6:	20000793          	li	a5,512
    8001d8aa:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001d8ae:	40000793          	li	a5,1024
    8001d8b2:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001d8b6:	6785                	lui	a5,0x1
    8001d8b8:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001d8bc:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001d8c0:	4785                	li	a5,1
    8001d8c2:	07fe                	slli	a5,a5,0x1f
    8001d8c4:	4485                	li	s1,1
    8001d8c6:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001d8ca:	08100793          	li	a5,129
    8001d8ce:	07e2                	slli	a5,a5,0x18
    8001d8d0:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d8d4:	08000793          	li	a5,128
    8001d8d8:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001d8dc:	67a1                	lui	a5,0x8
    8001d8de:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001d8e2:	4501                	li	a0,0
    8001d8e4:	b12e30ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d8e8:	0330000f          	fence	rw,rw
    8001d8ec:	0002b417          	auipc	s0,0x2b
    8001d8f0:	72440413          	addi	s0,s0,1828 # 80049010 <excpt>
    8001d8f4:	0002b797          	auipc	a5,0x2b
    8001d8f8:	7407ba23          	sd	zero,1876(a5) # 80049048 <excpt+0x38>
    8001d8fc:	00941023          	sh	s1,0(s0)
    8001d900:	0330000f          	fence	rw,rw
    8001d904:	37ab77b7          	lui	a5,0x37ab7
    8001d908:	02149713          	slli	a4,s1,0x21
    8001d90c:	078a                	slli	a5,a5,0x2
    8001d90e:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001d912:	40070713          	addi	a4,a4,1024
    8001d916:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001d91a:	08200593          	li	a1,130
    8001d91e:	00011617          	auipc	a2,0x11
    8001d922:	f8260613          	addi	a2,a2,-126 # 8002e8a0 <__func__.0+0x6e40>
    8001d926:	0000a517          	auipc	a0,0xa
    8001d92a:	43250513          	addi	a0,a0,1074 # 80027d58 <__func__.0+0x2f8>
    8001d92e:	3c8080ef          	jal	80025cf6 <printf>
    8001d932:	0002b797          	auipc	a5,0x2b
    8001d936:	6df7c783          	lbu	a5,1759(a5) # 80049011 <excpt+0x1>
    8001d93a:	0000a597          	auipc	a1,0xa
    8001d93e:	3f658593          	addi	a1,a1,1014 # 80027d30 <__func__.0+0x2d0>
    8001d942:	cf89                	beqz	a5,8001d95c <amo_access_fault_4+0xfa>
    8001d944:	6418                	ld	a4,8(s0)
    8001d946:	479d                	li	a5,7
    8001d948:	0000a597          	auipc	a1,0xa
    8001d94c:	3d858593          	addi	a1,a1,984 # 80027d20 <__func__.0+0x2c0>
    8001d950:	00f70663          	beq	a4,a5,8001d95c <amo_access_fault_4+0xfa>
    8001d954:	0000a597          	auipc	a1,0xa
    8001d958:	3dc58593          	addi	a1,a1,988 # 80027d30 <__func__.0+0x2d0>
    8001d95c:	0000a517          	auipc	a0,0xa
    8001d960:	41450513          	addi	a0,a0,1044 # 80027d70 <__func__.0+0x310>
    8001d964:	392080ef          	jal	80025cf6 <printf>
    8001d968:	0002b797          	auipc	a5,0x2b
    8001d96c:	6a97c783          	lbu	a5,1705(a5) # 80049011 <excpt+0x1>
    8001d970:	c789                	beqz	a5,8001d97a <amo_access_fault_4+0x118>
    8001d972:	6418                	ld	a4,8(s0)
    8001d974:	479d                	li	a5,7
    8001d976:	00f70c63          	beq	a4,a5,8001d98e <amo_access_fault_4+0x12c>
    8001d97a:	0000a517          	auipc	a0,0xa
    8001d97e:	3fe50513          	addi	a0,a0,1022 # 80027d78 <__func__.0+0x318>
    8001d982:	374080ef          	jal	80025cf6 <printf>
    8001d986:	02900513          	li	a0,41
    8001d98a:	176070ef          	jal	80024b00 <putchar>
    8001d98e:	4529                	li	a0,10
    8001d990:	170070ef          	jal	80024b00 <putchar>
    8001d994:	0002b497          	auipc	s1,0x2b
    8001d998:	67d4c483          	lbu	s1,1661(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001d99c:	0000a597          	auipc	a1,0xa
    8001d9a0:	39458593          	addi	a1,a1,916 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001d9a4:	cc91                	beqz	s1,8001d9c0 <amo_access_fault_4+0x15e>
    8001d9a6:	6418                	ld	a4,8(s0)
    8001d9a8:	479d                	li	a5,7
    TEST_END();
    8001d9aa:	0000a597          	auipc	a1,0xa
    8001d9ae:	37658593          	addi	a1,a1,886 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001d9b2:	00f70763          	beq	a4,a5,8001d9c0 <amo_access_fault_4+0x15e>
    8001d9b6:	4481                	li	s1,0
    TEST_END();
    8001d9b8:	0000a597          	auipc	a1,0xa
    8001d9bc:	37858593          	addi	a1,a1,888 # 80027d30 <__func__.0+0x2d0>
    8001d9c0:	0000a517          	auipc	a0,0xa
    8001d9c4:	41850513          	addi	a0,a0,1048 # 80027dd8 <__func__.0+0x378>
    8001d9c8:	32e080ef          	jal	80025cf6 <printf>
    8001d9cc:	4511                	li	a0,4
    8001d9ce:	a28e30ef          	jal	80000bf6 <goto_priv>
    8001d9d2:	adbe30ef          	jal	800014ac <reset_state>
}
    8001d9d6:	60e2                	ld	ra,24(sp)
    8001d9d8:	6442                	ld	s0,16(sp)
    8001d9da:	8526                	mv	a0,s1
    8001d9dc:	64a2                	ld	s1,8(sp)
    8001d9de:	6105                	addi	sp,sp,32
    8001d9e0:	8082                	ret

000000008001d9e2 <amo_access_fault_5>:

bool amo_access_fault_5(){
    8001d9e2:	1141                	addi	sp,sp,-16

    TEST_START();
    8001d9e4:	0000a597          	auipc	a1,0xa
    8001d9e8:	a4458593          	addi	a1,a1,-1468 # 80027428 <__func__.15>
    8001d9ec:	0000a517          	auipc	a0,0xa
    8001d9f0:	35450513          	addi	a0,a0,852 # 80027d40 <__func__.0+0x2e0>
bool amo_access_fault_5(){
    8001d9f4:	e406                	sd	ra,8(sp)
    8001d9f6:	e022                	sd	s0,0(sp)
    TEST_START();
    8001d9f8:	2fe080ef          	jal	80025cf6 <printf>
    8001d9fc:	4529                	li	a0,10
    8001d9fe:	102070ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001da02:	4511                	li	a0,4
    8001da04:	9f2e30ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001da08:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001da0c:	10000793          	li	a5,256
    8001da10:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001da14:	20000793          	li	a5,512
    8001da18:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001da1c:	40000793          	li	a5,1024
    8001da20:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001da24:	6785                	lui	a5,0x1
    8001da26:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001da2a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001da2e:	4785                	li	a5,1
    8001da30:	07fe                	slli	a5,a5,0x1f
    8001da32:	4705                	li	a4,1
    8001da34:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001da38:	08100793          	li	a5,129
    8001da3c:	07e2                	slli	a5,a5,0x18
    8001da3e:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001da42:	67a1                	lui	a5,0x8
    8001da44:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001da48:	0330000f          	fence	rw,rw
    8001da4c:	0002b417          	auipc	s0,0x2b
    8001da50:	5c440413          	addi	s0,s0,1476 # 80049010 <excpt>
    8001da54:	0002b797          	auipc	a5,0x2b
    8001da58:	5e07ba23          	sd	zero,1524(a5) # 80049048 <excpt+0x38>
    8001da5c:	00e41023          	sh	a4,0(s0)
    8001da60:	0330000f          	fence	rw,rw
    8001da64:	37ab77b7          	lui	a5,0x37ab7
    8001da68:	078a                	slli	a5,a5,0x2
    8001da6a:	1706                	slli	a4,a4,0x21
    8001da6c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001da70:	40070713          	addi	a4,a4,1024
    8001da74:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    printf("%d\n",excpt.triggered);
    8001da78:	0002b597          	auipc	a1,0x2b
    8001da7c:	5995c583          	lbu	a1,1433(a1) # 80049011 <excpt+0x1>
    8001da80:	0000b517          	auipc	a0,0xb
    8001da84:	e0850513          	addi	a0,a0,-504 # 80028888 <__func__.0+0xe28>
    8001da88:	26e080ef          	jal	80025cf6 <printf>
    printf("%d\n",excpt.cause);
    8001da8c:	640c                	ld	a1,8(s0)
    8001da8e:	0000b517          	auipc	a0,0xb
    8001da92:	dfa50513          	addi	a0,a0,-518 # 80028888 <__func__.0+0xe28>
    8001da96:	260080ef          	jal	80025cf6 <printf>

    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001da9a:	08200593          	li	a1,130
    8001da9e:	00011617          	auipc	a2,0x11
    8001daa2:	e4260613          	addi	a2,a2,-446 # 8002e8e0 <__func__.0+0x6e80>
    8001daa6:	0000a517          	auipc	a0,0xa
    8001daaa:	2b250513          	addi	a0,a0,690 # 80027d58 <__func__.0+0x2f8>
    8001daae:	248080ef          	jal	80025cf6 <printf>
    8001dab2:	0002b797          	auipc	a5,0x2b
    8001dab6:	55f7c783          	lbu	a5,1375(a5) # 80049011 <excpt+0x1>
    8001daba:	0000a597          	auipc	a1,0xa
    8001dabe:	26658593          	addi	a1,a1,614 # 80027d20 <__func__.0+0x2c0>
    8001dac2:	c789                	beqz	a5,8001dacc <amo_access_fault_5+0xea>
    8001dac4:	0000a597          	auipc	a1,0xa
    8001dac8:	26c58593          	addi	a1,a1,620 # 80027d30 <__func__.0+0x2d0>
    8001dacc:	0000a517          	auipc	a0,0xa
    8001dad0:	2a450513          	addi	a0,a0,676 # 80027d70 <__func__.0+0x310>
    8001dad4:	222080ef          	jal	80025cf6 <printf>
    8001dad8:	0002b797          	auipc	a5,0x2b
    8001dadc:	5397c783          	lbu	a5,1337(a5) # 80049011 <excpt+0x1>
    8001dae0:	e7a1                	bnez	a5,8001db28 <amo_access_fault_5+0x146>
    8001dae2:	4529                	li	a0,10
    8001dae4:	01c070ef          	jal	80024b00 <putchar>
    8001dae8:	0002b797          	auipc	a5,0x2b
    8001daec:	5297c783          	lbu	a5,1321(a5) # 80049011 <excpt+0x1>
    8001daf0:	e795                	bnez	a5,8001db1c <amo_access_fault_5+0x13a>
    8001daf2:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001daf4:	0000a597          	auipc	a1,0xa
    8001daf8:	22c58593          	addi	a1,a1,556 # 80027d20 <__func__.0+0x2c0>
    8001dafc:	0000a517          	auipc	a0,0xa
    8001db00:	2dc50513          	addi	a0,a0,732 # 80027dd8 <__func__.0+0x378>
    8001db04:	1f2080ef          	jal	80025cf6 <printf>
    8001db08:	4511                	li	a0,4
    8001db0a:	8ece30ef          	jal	80000bf6 <goto_priv>
    8001db0e:	99fe30ef          	jal	800014ac <reset_state>
}
    8001db12:	60a2                	ld	ra,8(sp)
    8001db14:	8522                	mv	a0,s0
    8001db16:	6402                	ld	s0,0(sp)
    8001db18:	0141                	addi	sp,sp,16
    8001db1a:	8082                	ret
    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001db1c:	4401                	li	s0,0
    TEST_END();
    8001db1e:	0000a597          	auipc	a1,0xa
    8001db22:	21258593          	addi	a1,a1,530 # 80027d30 <__func__.0+0x2d0>
    8001db26:	bfd9                	j	8001dafc <amo_access_fault_5+0x11a>
    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001db28:	0000a517          	auipc	a0,0xa
    8001db2c:	25050513          	addi	a0,a0,592 # 80027d78 <__func__.0+0x318>
    8001db30:	1c6080ef          	jal	80025cf6 <printf>
    8001db34:	02900513          	li	a0,41
    8001db38:	7c9060ef          	jal	80024b00 <putchar>
    8001db3c:	b75d                	j	8001dae2 <amo_access_fault_5+0x100>

000000008001db3e <amo_access_fault_6>:


bool amo_access_fault_6(){
    8001db3e:	1101                	addi	sp,sp,-32

    TEST_START();
    8001db40:	0000a597          	auipc	a1,0xa
    8001db44:	90058593          	addi	a1,a1,-1792 # 80027440 <__func__.14>
    8001db48:	0000a517          	auipc	a0,0xa
    8001db4c:	1f850513          	addi	a0,a0,504 # 80027d40 <__func__.0+0x2e0>
bool amo_access_fault_6(){
    8001db50:	ec06                	sd	ra,24(sp)
    8001db52:	e822                	sd	s0,16(sp)
    8001db54:	e426                	sd	s1,8(sp)
    TEST_START();
    8001db56:	1a0080ef          	jal	80025cf6 <printf>
    8001db5a:	4529                	li	a0,10
    8001db5c:	7a5060ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001db60:	4511                	li	a0,4
    8001db62:	894e30ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001db66:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001db6a:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001db6e:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001db72:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001db76:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001db7a:	10000793          	li	a5,256
    8001db7e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001db82:	20000793          	li	a5,512
    8001db86:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001db8a:	40000793          	li	a5,1024
    8001db8e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001db92:	6785                	lui	a5,0x1
    8001db94:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001db98:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001db9c:	4785                	li	a5,1
    8001db9e:	07fe                	slli	a5,a5,0x1f
    8001dba0:	4485                	li	s1,1
    8001dba2:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001dba6:	08100793          	li	a5,129
    8001dbaa:	07e2                	slli	a5,a5,0x18
    8001dbac:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001dbb0:	08000793          	li	a5,128
    8001dbb4:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001dbb8:	67a1                	lui	a5,0x8
    8001dbba:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001dbbe:	450d                	li	a0,3
    8001dbc0:	836e30ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001dbc4:	0330000f          	fence	rw,rw
    8001dbc8:	0002b417          	auipc	s0,0x2b
    8001dbcc:	44840413          	addi	s0,s0,1096 # 80049010 <excpt>
    8001dbd0:	0002b797          	auipc	a5,0x2b
    8001dbd4:	4607bc23          	sd	zero,1144(a5) # 80049048 <excpt+0x38>
    8001dbd8:	00941023          	sh	s1,0(s0)
    8001dbdc:	0330000f          	fence	rw,rw
    8001dbe0:	37ab77b7          	lui	a5,0x37ab7
    8001dbe4:	02149713          	slli	a4,s1,0x21
    8001dbe8:	078a                	slli	a5,a5,0x2
    8001dbea:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001dbee:	40070713          	addi	a4,a4,1024
    8001dbf2:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001dbf6:	08200593          	li	a1,130
    8001dbfa:	00011617          	auipc	a2,0x11
    8001dbfe:	d2660613          	addi	a2,a2,-730 # 8002e920 <__func__.0+0x6ec0>
    8001dc02:	0000a517          	auipc	a0,0xa
    8001dc06:	15650513          	addi	a0,a0,342 # 80027d58 <__func__.0+0x2f8>
    8001dc0a:	0ec080ef          	jal	80025cf6 <printf>
    8001dc0e:	0002b797          	auipc	a5,0x2b
    8001dc12:	4037c783          	lbu	a5,1027(a5) # 80049011 <excpt+0x1>
    8001dc16:	0000a597          	auipc	a1,0xa
    8001dc1a:	11a58593          	addi	a1,a1,282 # 80027d30 <__func__.0+0x2d0>
    8001dc1e:	cf89                	beqz	a5,8001dc38 <amo_access_fault_6+0xfa>
    8001dc20:	6418                	ld	a4,8(s0)
    8001dc22:	479d                	li	a5,7
    8001dc24:	0000a597          	auipc	a1,0xa
    8001dc28:	0fc58593          	addi	a1,a1,252 # 80027d20 <__func__.0+0x2c0>
    8001dc2c:	00f70663          	beq	a4,a5,8001dc38 <amo_access_fault_6+0xfa>
    8001dc30:	0000a597          	auipc	a1,0xa
    8001dc34:	10058593          	addi	a1,a1,256 # 80027d30 <__func__.0+0x2d0>
    8001dc38:	0000a517          	auipc	a0,0xa
    8001dc3c:	13850513          	addi	a0,a0,312 # 80027d70 <__func__.0+0x310>
    8001dc40:	0b6080ef          	jal	80025cf6 <printf>
    8001dc44:	0002b797          	auipc	a5,0x2b
    8001dc48:	3cd7c783          	lbu	a5,973(a5) # 80049011 <excpt+0x1>
    8001dc4c:	c789                	beqz	a5,8001dc56 <amo_access_fault_6+0x118>
    8001dc4e:	6418                	ld	a4,8(s0)
    8001dc50:	479d                	li	a5,7
    8001dc52:	00f70c63          	beq	a4,a5,8001dc6a <amo_access_fault_6+0x12c>
    8001dc56:	0000a517          	auipc	a0,0xa
    8001dc5a:	12250513          	addi	a0,a0,290 # 80027d78 <__func__.0+0x318>
    8001dc5e:	098080ef          	jal	80025cf6 <printf>
    8001dc62:	02900513          	li	a0,41
    8001dc66:	69b060ef          	jal	80024b00 <putchar>
    8001dc6a:	4529                	li	a0,10
    8001dc6c:	695060ef          	jal	80024b00 <putchar>
    8001dc70:	0002b497          	auipc	s1,0x2b
    8001dc74:	3a14c483          	lbu	s1,929(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001dc78:	0000a597          	auipc	a1,0xa
    8001dc7c:	0b858593          	addi	a1,a1,184 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001dc80:	cc91                	beqz	s1,8001dc9c <amo_access_fault_6+0x15e>
    8001dc82:	6418                	ld	a4,8(s0)
    8001dc84:	479d                	li	a5,7
    TEST_END();
    8001dc86:	0000a597          	auipc	a1,0xa
    8001dc8a:	09a58593          	addi	a1,a1,154 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001dc8e:	00f70763          	beq	a4,a5,8001dc9c <amo_access_fault_6+0x15e>
    8001dc92:	4481                	li	s1,0
    TEST_END();
    8001dc94:	0000a597          	auipc	a1,0xa
    8001dc98:	09c58593          	addi	a1,a1,156 # 80027d30 <__func__.0+0x2d0>
    8001dc9c:	0000a517          	auipc	a0,0xa
    8001dca0:	13c50513          	addi	a0,a0,316 # 80027dd8 <__func__.0+0x378>
    8001dca4:	052080ef          	jal	80025cf6 <printf>
    8001dca8:	4511                	li	a0,4
    8001dcaa:	f4de20ef          	jal	80000bf6 <goto_priv>
    8001dcae:	ffee30ef          	jal	800014ac <reset_state>
}
    8001dcb2:	60e2                	ld	ra,24(sp)
    8001dcb4:	6442                	ld	s0,16(sp)
    8001dcb6:	8526                	mv	a0,s1
    8001dcb8:	64a2                	ld	s1,8(sp)
    8001dcba:	6105                	addi	sp,sp,32
    8001dcbc:	8082                	ret

000000008001dcbe <amo_access_fault_7>:


bool amo_access_fault_7(){
    8001dcbe:	1101                	addi	sp,sp,-32

    TEST_START();
    8001dcc0:	00009597          	auipc	a1,0x9
    8001dcc4:	79858593          	addi	a1,a1,1944 # 80027458 <__func__.13>
    8001dcc8:	0000a517          	auipc	a0,0xa
    8001dccc:	07850513          	addi	a0,a0,120 # 80027d40 <__func__.0+0x2e0>
bool amo_access_fault_7(){
    8001dcd0:	ec06                	sd	ra,24(sp)
    8001dcd2:	e822                	sd	s0,16(sp)
    8001dcd4:	e426                	sd	s1,8(sp)
    TEST_START();
    8001dcd6:	020080ef          	jal	80025cf6 <printf>
    8001dcda:	4529                	li	a0,10
    8001dcdc:	625060ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001dce0:	4511                	li	a0,4
    8001dce2:	f15e20ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001dce6:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001dcea:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001dcee:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001dcf2:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001dcf6:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001dcfa:	10000793          	li	a5,256
    8001dcfe:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001dd02:	20000793          	li	a5,512
    8001dd06:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001dd0a:	40000793          	li	a5,1024
    8001dd0e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001dd12:	6785                	lui	a5,0x1
    8001dd14:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001dd18:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001dd1c:	4785                	li	a5,1
    8001dd1e:	07fe                	slli	a5,a5,0x1f
    8001dd20:	4485                	li	s1,1
    8001dd22:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001dd26:	08100793          	li	a5,129
    8001dd2a:	07e2                	slli	a5,a5,0x18
    8001dd2c:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001dd30:	08000793          	li	a5,128
    8001dd34:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001dd38:	67a1                	lui	a5,0x8
    8001dd3a:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001dd3e:	8526                	mv	a0,s1
    8001dd40:	eb7e20ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001dd44:	0330000f          	fence	rw,rw
    8001dd48:	0002b417          	auipc	s0,0x2b
    8001dd4c:	2c840413          	addi	s0,s0,712 # 80049010 <excpt>
    8001dd50:	0002b797          	auipc	a5,0x2b
    8001dd54:	2e07bc23          	sd	zero,760(a5) # 80049048 <excpt+0x38>
    8001dd58:	00941023          	sh	s1,0(s0)
    8001dd5c:	0330000f          	fence	rw,rw
    8001dd60:	37ab77b7          	lui	a5,0x37ab7
    8001dd64:	02149713          	slli	a4,s1,0x21
    8001dd68:	078a                	slli	a5,a5,0x2
    8001dd6a:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001dd6e:	40070713          	addi	a4,a4,1024
    8001dd72:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001dd76:	08200593          	li	a1,130
    8001dd7a:	00011617          	auipc	a2,0x11
    8001dd7e:	be660613          	addi	a2,a2,-1050 # 8002e960 <__func__.0+0x6f00>
    8001dd82:	0000a517          	auipc	a0,0xa
    8001dd86:	fd650513          	addi	a0,a0,-42 # 80027d58 <__func__.0+0x2f8>
    8001dd8a:	76d070ef          	jal	80025cf6 <printf>
    8001dd8e:	0002b797          	auipc	a5,0x2b
    8001dd92:	2837c783          	lbu	a5,643(a5) # 80049011 <excpt+0x1>
    8001dd96:	0000a597          	auipc	a1,0xa
    8001dd9a:	f9a58593          	addi	a1,a1,-102 # 80027d30 <__func__.0+0x2d0>
    8001dd9e:	cf89                	beqz	a5,8001ddb8 <amo_access_fault_7+0xfa>
    8001dda0:	6418                	ld	a4,8(s0)
    8001dda2:	479d                	li	a5,7
    8001dda4:	0000a597          	auipc	a1,0xa
    8001dda8:	f7c58593          	addi	a1,a1,-132 # 80027d20 <__func__.0+0x2c0>
    8001ddac:	00f70663          	beq	a4,a5,8001ddb8 <amo_access_fault_7+0xfa>
    8001ddb0:	0000a597          	auipc	a1,0xa
    8001ddb4:	f8058593          	addi	a1,a1,-128 # 80027d30 <__func__.0+0x2d0>
    8001ddb8:	0000a517          	auipc	a0,0xa
    8001ddbc:	fb850513          	addi	a0,a0,-72 # 80027d70 <__func__.0+0x310>
    8001ddc0:	737070ef          	jal	80025cf6 <printf>
    8001ddc4:	0002b797          	auipc	a5,0x2b
    8001ddc8:	24d7c783          	lbu	a5,589(a5) # 80049011 <excpt+0x1>
    8001ddcc:	c789                	beqz	a5,8001ddd6 <amo_access_fault_7+0x118>
    8001ddce:	6418                	ld	a4,8(s0)
    8001ddd0:	479d                	li	a5,7
    8001ddd2:	00f70c63          	beq	a4,a5,8001ddea <amo_access_fault_7+0x12c>
    8001ddd6:	0000a517          	auipc	a0,0xa
    8001ddda:	fa250513          	addi	a0,a0,-94 # 80027d78 <__func__.0+0x318>
    8001ddde:	719070ef          	jal	80025cf6 <printf>
    8001dde2:	02900513          	li	a0,41
    8001dde6:	51b060ef          	jal	80024b00 <putchar>
    8001ddea:	4529                	li	a0,10
    8001ddec:	515060ef          	jal	80024b00 <putchar>
    8001ddf0:	0002b497          	auipc	s1,0x2b
    8001ddf4:	2214c483          	lbu	s1,545(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001ddf8:	0000a597          	auipc	a1,0xa
    8001ddfc:	f3858593          	addi	a1,a1,-200 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001de00:	cc91                	beqz	s1,8001de1c <amo_access_fault_7+0x15e>
    8001de02:	6418                	ld	a4,8(s0)
    8001de04:	479d                	li	a5,7
    TEST_END();
    8001de06:	0000a597          	auipc	a1,0xa
    8001de0a:	f1a58593          	addi	a1,a1,-230 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001de0e:	00f70763          	beq	a4,a5,8001de1c <amo_access_fault_7+0x15e>
    8001de12:	4481                	li	s1,0
    TEST_END();
    8001de14:	0000a597          	auipc	a1,0xa
    8001de18:	f1c58593          	addi	a1,a1,-228 # 80027d30 <__func__.0+0x2d0>
    8001de1c:	0000a517          	auipc	a0,0xa
    8001de20:	fbc50513          	addi	a0,a0,-68 # 80027dd8 <__func__.0+0x378>
    8001de24:	6d3070ef          	jal	80025cf6 <printf>
    8001de28:	4511                	li	a0,4
    8001de2a:	dcde20ef          	jal	80000bf6 <goto_priv>
    8001de2e:	e7ee30ef          	jal	800014ac <reset_state>
}
    8001de32:	60e2                	ld	ra,24(sp)
    8001de34:	6442                	ld	s0,16(sp)
    8001de36:	8526                	mv	a0,s1
    8001de38:	64a2                	ld	s1,8(sp)
    8001de3a:	6105                	addi	sp,sp,32
    8001de3c:	8082                	ret

000000008001de3e <amo_access_fault_8>:

bool amo_access_fault_8(){
    8001de3e:	1101                	addi	sp,sp,-32

    TEST_START();
    8001de40:	00009597          	auipc	a1,0x9
    8001de44:	63058593          	addi	a1,a1,1584 # 80027470 <__func__.12>
    8001de48:	0000a517          	auipc	a0,0xa
    8001de4c:	ef850513          	addi	a0,a0,-264 # 80027d40 <__func__.0+0x2e0>
bool amo_access_fault_8(){
    8001de50:	ec06                	sd	ra,24(sp)
    8001de52:	e822                	sd	s0,16(sp)
    8001de54:	e426                	sd	s1,8(sp)
    TEST_START();
    8001de56:	6a1070ef          	jal	80025cf6 <printf>
    8001de5a:	4529                	li	a0,10
    8001de5c:	4a5060ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001de60:	4511                	li	a0,4
    8001de62:	d95e20ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001de66:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001de6a:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001de6e:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001de72:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001de76:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001de7a:	10000793          	li	a5,256
    8001de7e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001de82:	20000793          	li	a5,512
    8001de86:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001de8a:	40000793          	li	a5,1024
    8001de8e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001de92:	6785                	lui	a5,0x1
    8001de94:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001de98:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001de9c:	4785                	li	a5,1
    8001de9e:	07fe                	slli	a5,a5,0x1f
    8001dea0:	4485                	li	s1,1
    8001dea2:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001dea6:	08100793          	li	a5,129
    8001deaa:	07e2                	slli	a5,a5,0x18
    8001deac:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001deb0:	08000793          	li	a5,128
    8001deb4:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001deb8:	67a1                	lui	a5,0x8
    8001deba:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001debe:	4501                	li	a0,0
    8001dec0:	d37e20ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001dec4:	0330000f          	fence	rw,rw
    8001dec8:	0002b417          	auipc	s0,0x2b
    8001decc:	14840413          	addi	s0,s0,328 # 80049010 <excpt>
    8001ded0:	0002b797          	auipc	a5,0x2b
    8001ded4:	1607bc23          	sd	zero,376(a5) # 80049048 <excpt+0x38>
    8001ded8:	00941023          	sh	s1,0(s0)
    8001dedc:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    8001dee0:	37ab77b7          	lui	a5,0x37ab7
    8001dee4:	02149713          	slli	a4,s1,0x21
    8001dee8:	078a                	slli	a5,a5,0x2
    8001deea:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001deee:	40070713          	addi	a4,a4,1024
    8001def2:	40f737af          	amoor.d	a5,a5,(a4)
    
    amoor_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001def6:	08200593          	li	a1,130
    8001defa:	00011617          	auipc	a2,0x11
    8001defe:	aa660613          	addi	a2,a2,-1370 # 8002e9a0 <__func__.0+0x6f40>
    8001df02:	0000a517          	auipc	a0,0xa
    8001df06:	e5650513          	addi	a0,a0,-426 # 80027d58 <__func__.0+0x2f8>
    8001df0a:	5ed070ef          	jal	80025cf6 <printf>
    8001df0e:	0002b797          	auipc	a5,0x2b
    8001df12:	1037c783          	lbu	a5,259(a5) # 80049011 <excpt+0x1>
    8001df16:	0000a597          	auipc	a1,0xa
    8001df1a:	e1a58593          	addi	a1,a1,-486 # 80027d30 <__func__.0+0x2d0>
    8001df1e:	cf89                	beqz	a5,8001df38 <amo_access_fault_8+0xfa>
    8001df20:	6418                	ld	a4,8(s0)
    8001df22:	479d                	li	a5,7
    8001df24:	0000a597          	auipc	a1,0xa
    8001df28:	dfc58593          	addi	a1,a1,-516 # 80027d20 <__func__.0+0x2c0>
    8001df2c:	00f70663          	beq	a4,a5,8001df38 <amo_access_fault_8+0xfa>
    8001df30:	0000a597          	auipc	a1,0xa
    8001df34:	e0058593          	addi	a1,a1,-512 # 80027d30 <__func__.0+0x2d0>
    8001df38:	0000a517          	auipc	a0,0xa
    8001df3c:	e3850513          	addi	a0,a0,-456 # 80027d70 <__func__.0+0x310>
    8001df40:	5b7070ef          	jal	80025cf6 <printf>
    8001df44:	0002b797          	auipc	a5,0x2b
    8001df48:	0cd7c783          	lbu	a5,205(a5) # 80049011 <excpt+0x1>
    8001df4c:	c789                	beqz	a5,8001df56 <amo_access_fault_8+0x118>
    8001df4e:	6418                	ld	a4,8(s0)
    8001df50:	479d                	li	a5,7
    8001df52:	00f70c63          	beq	a4,a5,8001df6a <amo_access_fault_8+0x12c>
    8001df56:	0000a517          	auipc	a0,0xa
    8001df5a:	e2250513          	addi	a0,a0,-478 # 80027d78 <__func__.0+0x318>
    8001df5e:	599070ef          	jal	80025cf6 <printf>
    8001df62:	02900513          	li	a0,41
    8001df66:	39b060ef          	jal	80024b00 <putchar>
    8001df6a:	4529                	li	a0,10
    8001df6c:	395060ef          	jal	80024b00 <putchar>
    8001df70:	0002b497          	auipc	s1,0x2b
    8001df74:	0a14c483          	lbu	s1,161(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001df78:	0000a597          	auipc	a1,0xa
    8001df7c:	db858593          	addi	a1,a1,-584 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001df80:	cc91                	beqz	s1,8001df9c <amo_access_fault_8+0x15e>
    8001df82:	6418                	ld	a4,8(s0)
    8001df84:	479d                	li	a5,7
    TEST_END();
    8001df86:	0000a597          	auipc	a1,0xa
    8001df8a:	d9a58593          	addi	a1,a1,-614 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001df8e:	00f70763          	beq	a4,a5,8001df9c <amo_access_fault_8+0x15e>
    8001df92:	4481                	li	s1,0
    TEST_END();
    8001df94:	0000a597          	auipc	a1,0xa
    8001df98:	d9c58593          	addi	a1,a1,-612 # 80027d30 <__func__.0+0x2d0>
    8001df9c:	0000a517          	auipc	a0,0xa
    8001dfa0:	e3c50513          	addi	a0,a0,-452 # 80027dd8 <__func__.0+0x378>
    8001dfa4:	553070ef          	jal	80025cf6 <printf>
    8001dfa8:	4511                	li	a0,4
    8001dfaa:	c4de20ef          	jal	80000bf6 <goto_priv>
    8001dfae:	cfee30ef          	jal	800014ac <reset_state>
}
    8001dfb2:	60e2                	ld	ra,24(sp)
    8001dfb4:	6442                	ld	s0,16(sp)
    8001dfb6:	8526                	mv	a0,s1
    8001dfb8:	64a2                	ld	s1,8(sp)
    8001dfba:	6105                	addi	sp,sp,32
    8001dfbc:	8082                	ret

000000008001dfbe <amo_access_fault_9>:

bool amo_access_fault_9(){
    8001dfbe:	1101                	addi	sp,sp,-32

    TEST_START();
    8001dfc0:	00009597          	auipc	a1,0x9
    8001dfc4:	4c858593          	addi	a1,a1,1224 # 80027488 <__func__.11>
    8001dfc8:	0000a517          	auipc	a0,0xa
    8001dfcc:	d7850513          	addi	a0,a0,-648 # 80027d40 <__func__.0+0x2e0>
bool amo_access_fault_9(){
    8001dfd0:	ec06                	sd	ra,24(sp)
    8001dfd2:	e822                	sd	s0,16(sp)
    8001dfd4:	e426                	sd	s1,8(sp)
    TEST_START();
    8001dfd6:	521070ef          	jal	80025cf6 <printf>
    8001dfda:	4529                	li	a0,10
    8001dfdc:	325060ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001dfe0:	4511                	li	a0,4
    8001dfe2:	c15e20ef          	jal	80000bf6 <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001dfe6:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001dfea:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001dfee:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001dff2:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001dff6:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001dffa:	10000793          	li	a5,256
    8001dffe:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001e002:	20000793          	li	a5,512
    8001e006:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001e00a:	40000793          	li	a5,1024
    8001e00e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001e012:	6785                	lui	a5,0x1
    8001e014:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001e018:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001e01c:	4785                	li	a5,1
    8001e01e:	07fe                	slli	a5,a5,0x1f
    8001e020:	4485                	li	s1,1
    8001e022:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001e026:	08100793          	li	a5,129
    8001e02a:	07e2                	slli	a5,a5,0x18
    8001e02c:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001e030:	08000793          	li	a5,128
    8001e034:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001e038:	67a1                	lui	a5,0x8
    8001e03a:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001e03e:	4501                	li	a0,0
    8001e040:	bb7e20ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001e044:	0330000f          	fence	rw,rw
    8001e048:	0002b417          	auipc	s0,0x2b
    8001e04c:	fc840413          	addi	s0,s0,-56 # 80049010 <excpt>
    8001e050:	0002b797          	auipc	a5,0x2b
    8001e054:	fe07bc23          	sd	zero,-8(a5) # 80049048 <excpt+0x38>
    8001e058:	00941023          	sh	s1,0(s0)
    8001e05c:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    8001e060:	37ab77b7          	lui	a5,0x37ab7
    8001e064:	02349713          	slli	a4,s1,0x23
    8001e068:	078a                	slli	a5,a5,0x2
    8001e06a:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001e06e:	1761                	addi	a4,a4,-8
    8001e070:	60f737af          	amoand.d	a5,a5,(a4)
    
    amoand_d(0x1fffffffeUL << 2 ,0xdeadbeef);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    8001e074:	08200593          	li	a1,130
    8001e078:	00011617          	auipc	a2,0x11
    8001e07c:	96860613          	addi	a2,a2,-1688 # 8002e9e0 <__func__.0+0x6f80>
    8001e080:	0000a517          	auipc	a0,0xa
    8001e084:	cd850513          	addi	a0,a0,-808 # 80027d58 <__func__.0+0x2f8>
    8001e088:	46f070ef          	jal	80025cf6 <printf>
    8001e08c:	0002b797          	auipc	a5,0x2b
    8001e090:	f857c783          	lbu	a5,-123(a5) # 80049011 <excpt+0x1>
    8001e094:	0000a597          	auipc	a1,0xa
    8001e098:	c9c58593          	addi	a1,a1,-868 # 80027d30 <__func__.0+0x2d0>
    8001e09c:	cf89                	beqz	a5,8001e0b6 <amo_access_fault_9+0xf8>
    8001e09e:	6418                	ld	a4,8(s0)
    8001e0a0:	479d                	li	a5,7
    8001e0a2:	0000a597          	auipc	a1,0xa
    8001e0a6:	c7e58593          	addi	a1,a1,-898 # 80027d20 <__func__.0+0x2c0>
    8001e0aa:	00f70663          	beq	a4,a5,8001e0b6 <amo_access_fault_9+0xf8>
    8001e0ae:	0000a597          	auipc	a1,0xa
    8001e0b2:	c8258593          	addi	a1,a1,-894 # 80027d30 <__func__.0+0x2d0>
    8001e0b6:	0000a517          	auipc	a0,0xa
    8001e0ba:	cba50513          	addi	a0,a0,-838 # 80027d70 <__func__.0+0x310>
    8001e0be:	439070ef          	jal	80025cf6 <printf>
    8001e0c2:	0002b797          	auipc	a5,0x2b
    8001e0c6:	f4f7c783          	lbu	a5,-177(a5) # 80049011 <excpt+0x1>
    8001e0ca:	c789                	beqz	a5,8001e0d4 <amo_access_fault_9+0x116>
    8001e0cc:	6418                	ld	a4,8(s0)
    8001e0ce:	479d                	li	a5,7
    8001e0d0:	00f70c63          	beq	a4,a5,8001e0e8 <amo_access_fault_9+0x12a>
    8001e0d4:	0000a517          	auipc	a0,0xa
    8001e0d8:	ca450513          	addi	a0,a0,-860 # 80027d78 <__func__.0+0x318>
    8001e0dc:	41b070ef          	jal	80025cf6 <printf>
    8001e0e0:	02900513          	li	a0,41
    8001e0e4:	21d060ef          	jal	80024b00 <putchar>
    8001e0e8:	4529                	li	a0,10
    8001e0ea:	217060ef          	jal	80024b00 <putchar>
    8001e0ee:	0002b497          	auipc	s1,0x2b
    8001e0f2:	f234c483          	lbu	s1,-221(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001e0f6:	0000a597          	auipc	a1,0xa
    8001e0fa:	c3a58593          	addi	a1,a1,-966 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    8001e0fe:	cc91                	beqz	s1,8001e11a <amo_access_fault_9+0x15c>
    8001e100:	6418                	ld	a4,8(s0)
    8001e102:	479d                	li	a5,7
    TEST_END();
    8001e104:	0000a597          	auipc	a1,0xa
    8001e108:	c1c58593          	addi	a1,a1,-996 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    8001e10c:	00f70763          	beq	a4,a5,8001e11a <amo_access_fault_9+0x15c>
    8001e110:	4481                	li	s1,0
    TEST_END();
    8001e112:	0000a597          	auipc	a1,0xa
    8001e116:	c1e58593          	addi	a1,a1,-994 # 80027d30 <__func__.0+0x2d0>
    8001e11a:	0000a517          	auipc	a0,0xa
    8001e11e:	cbe50513          	addi	a0,a0,-834 # 80027dd8 <__func__.0+0x378>
    8001e122:	3d5070ef          	jal	80025cf6 <printf>
    8001e126:	4511                	li	a0,4
    8001e128:	acfe20ef          	jal	80000bf6 <goto_priv>
    8001e12c:	b80e30ef          	jal	800014ac <reset_state>
}
    8001e130:	60e2                	ld	ra,24(sp)
    8001e132:	6442                	ld	s0,16(sp)
    8001e134:	8526                	mv	a0,s1
    8001e136:	64a2                	ld	s1,8(sp)
    8001e138:	6105                	addi	sp,sp,32
    8001e13a:	8082                	ret

000000008001e13c <amo_access_fault_10>:


bool amo_access_fault_10(){
    8001e13c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001e13e:	00009597          	auipc	a1,0x9
    8001e142:	36258593          	addi	a1,a1,866 # 800274a0 <__func__.10>
    8001e146:	0000a517          	auipc	a0,0xa
    8001e14a:	bfa50513          	addi	a0,a0,-1030 # 80027d40 <__func__.0+0x2e0>
bool amo_access_fault_10(){
    8001e14e:	ec06                	sd	ra,24(sp)
    8001e150:	e822                	sd	s0,16(sp)
    8001e152:	e426                	sd	s1,8(sp)
    TEST_START();
    8001e154:	3a3070ef          	jal	80025cf6 <printf>
    8001e158:	4529                	li	a0,10
    8001e15a:	1a7060ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001e15e:	4511                	li	a0,4
    8001e160:	a97e20ef          	jal	80000bf6 <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001e164:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001e168:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001e16c:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001e170:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001e174:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001e178:	4785                	li	a5,1
    8001e17a:	07fe                	slli	a5,a5,0x1f
    8001e17c:	4485                	li	s1,1
    8001e17e:	3b079073          	csrw	pmpaddr0,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001e182:	08000793          	li	a5,128
    8001e186:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001e18a:	450d                	li	a0,3
    8001e18c:	a6be20ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001e190:	0330000f          	fence	rw,rw
    8001e194:	0002b417          	auipc	s0,0x2b
    8001e198:	e7c40413          	addi	s0,s0,-388 # 80049010 <excpt>
    8001e19c:	0002b797          	auipc	a5,0x2b
    8001e1a0:	ea07b623          	sd	zero,-340(a5) # 80049048 <excpt+0x38>
    8001e1a4:	00941023          	sh	s1,0(s0)
    8001e1a8:	0330000f          	fence	rw,rw
    8001e1ac:	37ab77b7          	lui	a5,0x37ab7
    8001e1b0:	078a                	slli	a5,a5,0x2
    8001e1b2:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001e1b6:	02149713          	slli	a4,s1,0x21
    8001e1ba:	60f737af          	amoand.d	a5,a5,(a4)
    
    amoand_d(0x80000000UL << 2 ,0xdeadbeef);

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    8001e1be:	08200593          	li	a1,130
    8001e1c2:	00011617          	auipc	a2,0x11
    8001e1c6:	89660613          	addi	a2,a2,-1898 # 8002ea58 <__func__.0+0x6ff8>
    8001e1ca:	0000a517          	auipc	a0,0xa
    8001e1ce:	b8e50513          	addi	a0,a0,-1138 # 80027d58 <__func__.0+0x2f8>
    8001e1d2:	325070ef          	jal	80025cf6 <printf>
    8001e1d6:	0002b797          	auipc	a5,0x2b
    8001e1da:	e3b7c783          	lbu	a5,-453(a5) # 80049011 <excpt+0x1>
    8001e1de:	0000a597          	auipc	a1,0xa
    8001e1e2:	b5258593          	addi	a1,a1,-1198 # 80027d30 <__func__.0+0x2d0>
    8001e1e6:	cf89                	beqz	a5,8001e200 <amo_access_fault_10+0xc4>
    8001e1e8:	6418                	ld	a4,8(s0)
    8001e1ea:	479d                	li	a5,7
    8001e1ec:	0000a597          	auipc	a1,0xa
    8001e1f0:	b3458593          	addi	a1,a1,-1228 # 80027d20 <__func__.0+0x2c0>
    8001e1f4:	00f70663          	beq	a4,a5,8001e200 <amo_access_fault_10+0xc4>
    8001e1f8:	0000a597          	auipc	a1,0xa
    8001e1fc:	b3858593          	addi	a1,a1,-1224 # 80027d30 <__func__.0+0x2d0>
    8001e200:	0000a517          	auipc	a0,0xa
    8001e204:	b7050513          	addi	a0,a0,-1168 # 80027d70 <__func__.0+0x310>
    8001e208:	2ef070ef          	jal	80025cf6 <printf>
    8001e20c:	0002b797          	auipc	a5,0x2b
    8001e210:	e057c783          	lbu	a5,-507(a5) # 80049011 <excpt+0x1>
    8001e214:	c789                	beqz	a5,8001e21e <amo_access_fault_10+0xe2>
    8001e216:	6418                	ld	a4,8(s0)
    8001e218:	479d                	li	a5,7
    8001e21a:	00f70c63          	beq	a4,a5,8001e232 <amo_access_fault_10+0xf6>
    8001e21e:	0000a517          	auipc	a0,0xa
    8001e222:	b5a50513          	addi	a0,a0,-1190 # 80027d78 <__func__.0+0x318>
    8001e226:	2d1070ef          	jal	80025cf6 <printf>
    8001e22a:	02900513          	li	a0,41
    8001e22e:	0d3060ef          	jal	80024b00 <putchar>
    8001e232:	4529                	li	a0,10
    8001e234:	0cd060ef          	jal	80024b00 <putchar>
    8001e238:	0002b497          	auipc	s1,0x2b
    8001e23c:	dd94c483          	lbu	s1,-551(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001e240:	0000a597          	auipc	a1,0xa
    8001e244:	af058593          	addi	a1,a1,-1296 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    8001e248:	cc91                	beqz	s1,8001e264 <amo_access_fault_10+0x128>
    8001e24a:	6418                	ld	a4,8(s0)
    8001e24c:	479d                	li	a5,7
    TEST_END();
    8001e24e:	0000a597          	auipc	a1,0xa
    8001e252:	ad258593          	addi	a1,a1,-1326 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    8001e256:	00f70763          	beq	a4,a5,8001e264 <amo_access_fault_10+0x128>
    8001e25a:	4481                	li	s1,0
    TEST_END();
    8001e25c:	0000a597          	auipc	a1,0xa
    8001e260:	ad458593          	addi	a1,a1,-1324 # 80027d30 <__func__.0+0x2d0>
    8001e264:	0000a517          	auipc	a0,0xa
    8001e268:	b7450513          	addi	a0,a0,-1164 # 80027dd8 <__func__.0+0x378>
    8001e26c:	28b070ef          	jal	80025cf6 <printf>
    8001e270:	4511                	li	a0,4
    8001e272:	985e20ef          	jal	80000bf6 <goto_priv>
    8001e276:	a36e30ef          	jal	800014ac <reset_state>
}
    8001e27a:	60e2                	ld	ra,24(sp)
    8001e27c:	6442                	ld	s0,16(sp)
    8001e27e:	8526                	mv	a0,s1
    8001e280:	64a2                	ld	s1,8(sp)
    8001e282:	6105                	addi	sp,sp,32
    8001e284:	8082                	ret

000000008001e286 <instruction_access_fault_1>:


bool instruction_access_fault_1(){
    8001e286:	1101                	addi	sp,sp,-32

    TEST_START();
    8001e288:	00009597          	auipc	a1,0x9
    8001e28c:	23058593          	addi	a1,a1,560 # 800274b8 <__func__.9>
    8001e290:	0000a517          	auipc	a0,0xa
    8001e294:	ab050513          	addi	a0,a0,-1360 # 80027d40 <__func__.0+0x2e0>
bool instruction_access_fault_1(){
    8001e298:	ec06                	sd	ra,24(sp)
    8001e29a:	e822                	sd	s0,16(sp)
    8001e29c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001e29e:	259070ef          	jal	80025cf6 <printf>
    8001e2a2:	4529                	li	a0,10
    8001e2a4:	05d060ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001e2a8:	4511                	li	a0,4
    8001e2aa:	94de20ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001e2ae:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001e2b2:	10000793          	li	a5,256
    8001e2b6:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001e2ba:	20000793          	li	a5,512
    8001e2be:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001e2c2:	40000793          	li	a5,1024
    8001e2c6:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001e2ca:	6785                	lui	a5,0x1
    8001e2cc:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001e2d0:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001e2d4:	4785                	li	a5,1
    8001e2d6:	07fe                	slli	a5,a5,0x1f
    8001e2d8:	4485                	li	s1,1
    8001e2da:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001e2de:	08100793          	li	a5,129
    8001e2e2:	07e2                	slli	a5,a5,0x18
    8001e2e4:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001e2e8:	67a1                	lui	a5,0x8
    8001e2ea:	3a07a073          	csrs	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001e2ee:	0330000f          	fence	rw,rw
    8001e2f2:	0002b417          	auipc	s0,0x2b
    8001e2f6:	d1e40413          	addi	s0,s0,-738 # 80049010 <excpt>
    8001e2fa:	0002b797          	auipc	a5,0x2b
    8001e2fe:	d407b723          	sd	zero,-690(a5) # 80049048 <excpt+0x38>
    8001e302:	00941023          	sh	s1,0(s0)
    8001e306:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001e30a:	02149793          	slli	a5,s1,0x21
    8001e30e:	40078793          	addi	a5,a5,1024
    8001e312:	00000297          	auipc	t0,0x0
    8001e316:	00c28293          	addi	t0,t0,12 # 8001e31e <instruction_access_fault_1+0x98>
    8001e31a:	02543c23          	sd	t0,56(s0)
    8001e31e:	8782                	jr	a5

    printf("%d\n",excpt.triggered);
    8001e320:	0002b597          	auipc	a1,0x2b
    8001e324:	cf15c583          	lbu	a1,-783(a1) # 80049011 <excpt+0x1>
    8001e328:	0000a517          	auipc	a0,0xa
    8001e32c:	56050513          	addi	a0,a0,1376 # 80028888 <__func__.0+0xe28>
    8001e330:	1c7070ef          	jal	80025cf6 <printf>
    printf("%d\n",excpt.cause);
    8001e334:	640c                	ld	a1,8(s0)
    8001e336:	0000a517          	auipc	a0,0xa
    8001e33a:	55250513          	addi	a0,a0,1362 # 80028888 <__func__.0+0xe28>
    8001e33e:	1b9070ef          	jal	80025cf6 <printf>

    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001e342:	08200593          	li	a1,130
    8001e346:	00010617          	auipc	a2,0x10
    8001e34a:	78260613          	addi	a2,a2,1922 # 8002eac8 <__func__.0+0x7068>
    8001e34e:	0000a517          	auipc	a0,0xa
    8001e352:	a0a50513          	addi	a0,a0,-1526 # 80027d58 <__func__.0+0x2f8>
    8001e356:	1a1070ef          	jal	80025cf6 <printf>
    8001e35a:	0002b797          	auipc	a5,0x2b
    8001e35e:	cb77c783          	lbu	a5,-841(a5) # 80049011 <excpt+0x1>
    8001e362:	0000a597          	auipc	a1,0xa
    8001e366:	9ce58593          	addi	a1,a1,-1586 # 80027d30 <__func__.0+0x2d0>
    8001e36a:	cf81                	beqz	a5,8001e382 <instruction_access_fault_1+0xfc>
    8001e36c:	641c                	ld	a5,8(s0)
    8001e36e:	0000a597          	auipc	a1,0xa
    8001e372:	9b258593          	addi	a1,a1,-1614 # 80027d20 <__func__.0+0x2c0>
    8001e376:	00978663          	beq	a5,s1,8001e382 <instruction_access_fault_1+0xfc>
    8001e37a:	0000a597          	auipc	a1,0xa
    8001e37e:	9b658593          	addi	a1,a1,-1610 # 80027d30 <__func__.0+0x2d0>
    8001e382:	0000a517          	auipc	a0,0xa
    8001e386:	9ee50513          	addi	a0,a0,-1554 # 80027d70 <__func__.0+0x310>
    8001e38a:	16d070ef          	jal	80025cf6 <printf>
    8001e38e:	0002b797          	auipc	a5,0x2b
    8001e392:	c837c783          	lbu	a5,-893(a5) # 80049011 <excpt+0x1>
    8001e396:	c789                	beqz	a5,8001e3a0 <instruction_access_fault_1+0x11a>
    8001e398:	6418                	ld	a4,8(s0)
    8001e39a:	4785                	li	a5,1
    8001e39c:	00f70c63          	beq	a4,a5,8001e3b4 <instruction_access_fault_1+0x12e>
    8001e3a0:	0000a517          	auipc	a0,0xa
    8001e3a4:	9d850513          	addi	a0,a0,-1576 # 80027d78 <__func__.0+0x318>
    8001e3a8:	14f070ef          	jal	80025cf6 <printf>
    8001e3ac:	02900513          	li	a0,41
    8001e3b0:	750060ef          	jal	80024b00 <putchar>
    8001e3b4:	4529                	li	a0,10
    8001e3b6:	74a060ef          	jal	80024b00 <putchar>
    8001e3ba:	0002b497          	auipc	s1,0x2b
    8001e3be:	c574c483          	lbu	s1,-937(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001e3c2:	0000a597          	auipc	a1,0xa
    8001e3c6:	96e58593          	addi	a1,a1,-1682 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001e3ca:	cc91                	beqz	s1,8001e3e6 <instruction_access_fault_1+0x160>
    8001e3cc:	6418                	ld	a4,8(s0)
    8001e3ce:	4785                	li	a5,1
    TEST_END();
    8001e3d0:	0000a597          	auipc	a1,0xa
    8001e3d4:	95058593          	addi	a1,a1,-1712 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001e3d8:	00f70763          	beq	a4,a5,8001e3e6 <instruction_access_fault_1+0x160>
    8001e3dc:	4481                	li	s1,0
    TEST_END();
    8001e3de:	0000a597          	auipc	a1,0xa
    8001e3e2:	95258593          	addi	a1,a1,-1710 # 80027d30 <__func__.0+0x2d0>
    8001e3e6:	0000a517          	auipc	a0,0xa
    8001e3ea:	9f250513          	addi	a0,a0,-1550 # 80027dd8 <__func__.0+0x378>
    8001e3ee:	109070ef          	jal	80025cf6 <printf>
    8001e3f2:	4511                	li	a0,4
    8001e3f4:	803e20ef          	jal	80000bf6 <goto_priv>
    8001e3f8:	8b4e30ef          	jal	800014ac <reset_state>
}
    8001e3fc:	60e2                	ld	ra,24(sp)
    8001e3fe:	6442                	ld	s0,16(sp)
    8001e400:	8526                	mv	a0,s1
    8001e402:	64a2                	ld	s1,8(sp)
    8001e404:	6105                	addi	sp,sp,32
    8001e406:	8082                	ret

000000008001e408 <instruction_access_fault_2>:

bool instruction_access_fault_2(){
    8001e408:	1101                	addi	sp,sp,-32

    TEST_START();
    8001e40a:	00009597          	auipc	a1,0x9
    8001e40e:	0ce58593          	addi	a1,a1,206 # 800274d8 <__func__.8>
    8001e412:	0000a517          	auipc	a0,0xa
    8001e416:	92e50513          	addi	a0,a0,-1746 # 80027d40 <__func__.0+0x2e0>
bool instruction_access_fault_2(){
    8001e41a:	ec06                	sd	ra,24(sp)
    8001e41c:	e822                	sd	s0,16(sp)
    8001e41e:	e426                	sd	s1,8(sp)
    TEST_START();
    8001e420:	0d7070ef          	jal	80025cf6 <printf>
    8001e424:	4529                	li	a0,10
    8001e426:	6da060ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001e42a:	4511                	li	a0,4
    8001e42c:	fcae20ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001e430:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001e434:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001e438:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001e43c:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001e440:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001e444:	10000793          	li	a5,256
    8001e448:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001e44c:	20000793          	li	a5,512
    8001e450:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001e454:	40000793          	li	a5,1024
    8001e458:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001e45c:	6785                	lui	a5,0x1
    8001e45e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001e462:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001e466:	4785                	li	a5,1
    8001e468:	07fe                	slli	a5,a5,0x1f
    8001e46a:	4485                	li	s1,1
    8001e46c:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001e470:	08100793          	li	a5,129
    8001e474:	07e2                	slli	a5,a5,0x18
    8001e476:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001e47a:	08000793          	li	a5,128
    8001e47e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001e482:	67a1                	lui	a5,0x8
    8001e484:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001e488:	450d                	li	a0,3
    8001e48a:	f6ce20ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001e48e:	0330000f          	fence	rw,rw
    8001e492:	0002b417          	auipc	s0,0x2b
    8001e496:	b7e40413          	addi	s0,s0,-1154 # 80049010 <excpt>
    8001e49a:	0002b797          	auipc	a5,0x2b
    8001e49e:	ba07b723          	sd	zero,-1106(a5) # 80049048 <excpt+0x38>
    8001e4a2:	00941023          	sh	s1,0(s0)
    8001e4a6:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001e4aa:	02149793          	slli	a5,s1,0x21
    8001e4ae:	40078793          	addi	a5,a5,1024
    8001e4b2:	00000297          	auipc	t0,0x0
    8001e4b6:	00c28293          	addi	t0,t0,12 # 8001e4be <instruction_access_fault_2+0xb6>
    8001e4ba:	02543c23          	sd	t0,56(s0)
    8001e4be:	8782                	jr	a5

    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001e4c0:	08200593          	li	a1,130
    8001e4c4:	00010617          	auipc	a2,0x10
    8001e4c8:	64c60613          	addi	a2,a2,1612 # 8002eb10 <__func__.0+0x70b0>
    8001e4cc:	0000a517          	auipc	a0,0xa
    8001e4d0:	88c50513          	addi	a0,a0,-1908 # 80027d58 <__func__.0+0x2f8>
    8001e4d4:	023070ef          	jal	80025cf6 <printf>
    8001e4d8:	0002b797          	auipc	a5,0x2b
    8001e4dc:	b397c783          	lbu	a5,-1223(a5) # 80049011 <excpt+0x1>
    8001e4e0:	0000a597          	auipc	a1,0xa
    8001e4e4:	85058593          	addi	a1,a1,-1968 # 80027d30 <__func__.0+0x2d0>
    8001e4e8:	cf81                	beqz	a5,8001e500 <instruction_access_fault_2+0xf8>
    8001e4ea:	641c                	ld	a5,8(s0)
    8001e4ec:	0000a597          	auipc	a1,0xa
    8001e4f0:	83458593          	addi	a1,a1,-1996 # 80027d20 <__func__.0+0x2c0>
    8001e4f4:	00978663          	beq	a5,s1,8001e500 <instruction_access_fault_2+0xf8>
    8001e4f8:	0000a597          	auipc	a1,0xa
    8001e4fc:	83858593          	addi	a1,a1,-1992 # 80027d30 <__func__.0+0x2d0>
    8001e500:	0000a517          	auipc	a0,0xa
    8001e504:	87050513          	addi	a0,a0,-1936 # 80027d70 <__func__.0+0x310>
    8001e508:	7ee070ef          	jal	80025cf6 <printf>
    8001e50c:	0002b797          	auipc	a5,0x2b
    8001e510:	b057c783          	lbu	a5,-1275(a5) # 80049011 <excpt+0x1>
    8001e514:	c789                	beqz	a5,8001e51e <instruction_access_fault_2+0x116>
    8001e516:	6418                	ld	a4,8(s0)
    8001e518:	4785                	li	a5,1
    8001e51a:	00f70c63          	beq	a4,a5,8001e532 <instruction_access_fault_2+0x12a>
    8001e51e:	0000a517          	auipc	a0,0xa
    8001e522:	85a50513          	addi	a0,a0,-1958 # 80027d78 <__func__.0+0x318>
    8001e526:	7d0070ef          	jal	80025cf6 <printf>
    8001e52a:	02900513          	li	a0,41
    8001e52e:	5d2060ef          	jal	80024b00 <putchar>
    8001e532:	4529                	li	a0,10
    8001e534:	5cc060ef          	jal	80024b00 <putchar>
    8001e538:	0002b497          	auipc	s1,0x2b
    8001e53c:	ad94c483          	lbu	s1,-1319(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001e540:	00009597          	auipc	a1,0x9
    8001e544:	7f058593          	addi	a1,a1,2032 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001e548:	cc91                	beqz	s1,8001e564 <instruction_access_fault_2+0x15c>
    8001e54a:	6418                	ld	a4,8(s0)
    8001e54c:	4785                	li	a5,1
    TEST_END();
    8001e54e:	00009597          	auipc	a1,0x9
    8001e552:	7d258593          	addi	a1,a1,2002 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001e556:	00f70763          	beq	a4,a5,8001e564 <instruction_access_fault_2+0x15c>
    8001e55a:	4481                	li	s1,0
    TEST_END();
    8001e55c:	00009597          	auipc	a1,0x9
    8001e560:	7d458593          	addi	a1,a1,2004 # 80027d30 <__func__.0+0x2d0>
    8001e564:	0000a517          	auipc	a0,0xa
    8001e568:	87450513          	addi	a0,a0,-1932 # 80027dd8 <__func__.0+0x378>
    8001e56c:	78a070ef          	jal	80025cf6 <printf>
    8001e570:	4511                	li	a0,4
    8001e572:	e84e20ef          	jal	80000bf6 <goto_priv>
    8001e576:	f37e20ef          	jal	800014ac <reset_state>
}
    8001e57a:	60e2                	ld	ra,24(sp)
    8001e57c:	6442                	ld	s0,16(sp)
    8001e57e:	8526                	mv	a0,s1
    8001e580:	64a2                	ld	s1,8(sp)
    8001e582:	6105                	addi	sp,sp,32
    8001e584:	8082                	ret

000000008001e586 <instruction_access_fault_3>:


bool instruction_access_fault_3(){
    8001e586:	1101                	addi	sp,sp,-32

    TEST_START();
    8001e588:	00009597          	auipc	a1,0x9
    8001e58c:	f7058593          	addi	a1,a1,-144 # 800274f8 <__func__.7>
    8001e590:	00009517          	auipc	a0,0x9
    8001e594:	7b050513          	addi	a0,a0,1968 # 80027d40 <__func__.0+0x2e0>
bool instruction_access_fault_3(){
    8001e598:	ec06                	sd	ra,24(sp)
    8001e59a:	e822                	sd	s0,16(sp)
    8001e59c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001e59e:	758070ef          	jal	80025cf6 <printf>
    8001e5a2:	4529                	li	a0,10
    8001e5a4:	55c060ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001e5a8:	4511                	li	a0,4
    8001e5aa:	e4ce20ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001e5ae:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001e5b2:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001e5b6:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001e5ba:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001e5be:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001e5c2:	10000793          	li	a5,256
    8001e5c6:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001e5ca:	20000793          	li	a5,512
    8001e5ce:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001e5d2:	40000793          	li	a5,1024
    8001e5d6:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001e5da:	6785                	lui	a5,0x1
    8001e5dc:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001e5e0:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001e5e4:	4785                	li	a5,1
    8001e5e6:	07fe                	slli	a5,a5,0x1f
    8001e5e8:	4485                	li	s1,1
    8001e5ea:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001e5ee:	08100793          	li	a5,129
    8001e5f2:	07e2                	slli	a5,a5,0x18
    8001e5f4:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001e5f8:	08000793          	li	a5,128
    8001e5fc:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001e600:	67a1                	lui	a5,0x8
    8001e602:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001e606:	8526                	mv	a0,s1
    8001e608:	deee20ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001e60c:	0330000f          	fence	rw,rw
    8001e610:	0002b417          	auipc	s0,0x2b
    8001e614:	a0040413          	addi	s0,s0,-1536 # 80049010 <excpt>
    8001e618:	0002b797          	auipc	a5,0x2b
    8001e61c:	a207b823          	sd	zero,-1488(a5) # 80049048 <excpt+0x38>
    8001e620:	00941023          	sh	s1,0(s0)
    8001e624:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001e628:	02149793          	slli	a5,s1,0x21
    8001e62c:	40078793          	addi	a5,a5,1024
    8001e630:	00000297          	auipc	t0,0x0
    8001e634:	00c28293          	addi	t0,t0,12 # 8001e63c <instruction_access_fault_3+0xb6>
    8001e638:	02543c23          	sd	t0,56(s0)
    8001e63c:	8782                	jr	a5

    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001e63e:	08200593          	li	a1,130
    8001e642:	00010617          	auipc	a2,0x10
    8001e646:	51660613          	addi	a2,a2,1302 # 8002eb58 <__func__.0+0x70f8>
    8001e64a:	00009517          	auipc	a0,0x9
    8001e64e:	70e50513          	addi	a0,a0,1806 # 80027d58 <__func__.0+0x2f8>
    8001e652:	6a4070ef          	jal	80025cf6 <printf>
    8001e656:	0002b797          	auipc	a5,0x2b
    8001e65a:	9bb7c783          	lbu	a5,-1605(a5) # 80049011 <excpt+0x1>
    8001e65e:	00009597          	auipc	a1,0x9
    8001e662:	6d258593          	addi	a1,a1,1746 # 80027d30 <__func__.0+0x2d0>
    8001e666:	cf81                	beqz	a5,8001e67e <instruction_access_fault_3+0xf8>
    8001e668:	641c                	ld	a5,8(s0)
    8001e66a:	00009597          	auipc	a1,0x9
    8001e66e:	6b658593          	addi	a1,a1,1718 # 80027d20 <__func__.0+0x2c0>
    8001e672:	00978663          	beq	a5,s1,8001e67e <instruction_access_fault_3+0xf8>
    8001e676:	00009597          	auipc	a1,0x9
    8001e67a:	6ba58593          	addi	a1,a1,1722 # 80027d30 <__func__.0+0x2d0>
    8001e67e:	00009517          	auipc	a0,0x9
    8001e682:	6f250513          	addi	a0,a0,1778 # 80027d70 <__func__.0+0x310>
    8001e686:	670070ef          	jal	80025cf6 <printf>
    8001e68a:	0002b797          	auipc	a5,0x2b
    8001e68e:	9877c783          	lbu	a5,-1657(a5) # 80049011 <excpt+0x1>
    8001e692:	c789                	beqz	a5,8001e69c <instruction_access_fault_3+0x116>
    8001e694:	6418                	ld	a4,8(s0)
    8001e696:	4785                	li	a5,1
    8001e698:	00f70c63          	beq	a4,a5,8001e6b0 <instruction_access_fault_3+0x12a>
    8001e69c:	00009517          	auipc	a0,0x9
    8001e6a0:	6dc50513          	addi	a0,a0,1756 # 80027d78 <__func__.0+0x318>
    8001e6a4:	652070ef          	jal	80025cf6 <printf>
    8001e6a8:	02900513          	li	a0,41
    8001e6ac:	454060ef          	jal	80024b00 <putchar>
    8001e6b0:	4529                	li	a0,10
    8001e6b2:	44e060ef          	jal	80024b00 <putchar>
    8001e6b6:	0002b497          	auipc	s1,0x2b
    8001e6ba:	95b4c483          	lbu	s1,-1701(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001e6be:	00009597          	auipc	a1,0x9
    8001e6c2:	67258593          	addi	a1,a1,1650 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001e6c6:	cc91                	beqz	s1,8001e6e2 <instruction_access_fault_3+0x15c>
    8001e6c8:	6418                	ld	a4,8(s0)
    8001e6ca:	4785                	li	a5,1
    TEST_END();
    8001e6cc:	00009597          	auipc	a1,0x9
    8001e6d0:	65458593          	addi	a1,a1,1620 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001e6d4:	00f70763          	beq	a4,a5,8001e6e2 <instruction_access_fault_3+0x15c>
    8001e6d8:	4481                	li	s1,0
    TEST_END();
    8001e6da:	00009597          	auipc	a1,0x9
    8001e6de:	65658593          	addi	a1,a1,1622 # 80027d30 <__func__.0+0x2d0>
    8001e6e2:	00009517          	auipc	a0,0x9
    8001e6e6:	6f650513          	addi	a0,a0,1782 # 80027dd8 <__func__.0+0x378>
    8001e6ea:	60c070ef          	jal	80025cf6 <printf>
    8001e6ee:	4511                	li	a0,4
    8001e6f0:	d06e20ef          	jal	80000bf6 <goto_priv>
    8001e6f4:	db9e20ef          	jal	800014ac <reset_state>
}
    8001e6f8:	60e2                	ld	ra,24(sp)
    8001e6fa:	6442                	ld	s0,16(sp)
    8001e6fc:	8526                	mv	a0,s1
    8001e6fe:	64a2                	ld	s1,8(sp)
    8001e700:	6105                	addi	sp,sp,32
    8001e702:	8082                	ret

000000008001e704 <instruction_access_fault_4>:

bool instruction_access_fault_4(){
    8001e704:	1101                	addi	sp,sp,-32

    TEST_START();
    8001e706:	00009597          	auipc	a1,0x9
    8001e70a:	e1258593          	addi	a1,a1,-494 # 80027518 <__func__.6>
    8001e70e:	00009517          	auipc	a0,0x9
    8001e712:	63250513          	addi	a0,a0,1586 # 80027d40 <__func__.0+0x2e0>
bool instruction_access_fault_4(){
    8001e716:	ec06                	sd	ra,24(sp)
    8001e718:	e822                	sd	s0,16(sp)
    8001e71a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001e71c:	5da070ef          	jal	80025cf6 <printf>
    8001e720:	4529                	li	a0,10
    8001e722:	3de060ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001e726:	4511                	li	a0,4
    8001e728:	ccee20ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001e72c:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001e730:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001e734:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001e738:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001e73c:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001e740:	10000793          	li	a5,256
    8001e744:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001e748:	20000793          	li	a5,512
    8001e74c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001e750:	40000793          	li	a5,1024
    8001e754:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001e758:	6785                	lui	a5,0x1
    8001e75a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001e75e:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001e762:	4785                	li	a5,1
    8001e764:	07fe                	slli	a5,a5,0x1f
    8001e766:	4485                	li	s1,1
    8001e768:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001e76c:	08100793          	li	a5,129
    8001e770:	07e2                	slli	a5,a5,0x18
    8001e772:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001e776:	08000793          	li	a5,128
    8001e77a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001e77e:	67a1                	lui	a5,0x8
    8001e780:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001e784:	4501                	li	a0,0
    8001e786:	c70e20ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001e78a:	0330000f          	fence	rw,rw
    8001e78e:	0002b417          	auipc	s0,0x2b
    8001e792:	88240413          	addi	s0,s0,-1918 # 80049010 <excpt>
    8001e796:	0002b797          	auipc	a5,0x2b
    8001e79a:	8a07b923          	sd	zero,-1870(a5) # 80049048 <excpt+0x38>
    8001e79e:	00941023          	sh	s1,0(s0)
    8001e7a2:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001e7a6:	02149793          	slli	a5,s1,0x21
    8001e7aa:	40078793          	addi	a5,a5,1024
    8001e7ae:	00000297          	auipc	t0,0x0
    8001e7b2:	00c28293          	addi	t0,t0,12 # 8001e7ba <instruction_access_fault_4+0xb6>
    8001e7b6:	02543c23          	sd	t0,56(s0)
    8001e7ba:	8782                	jr	a5

    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001e7bc:	08200593          	li	a1,130
    8001e7c0:	00010617          	auipc	a2,0x10
    8001e7c4:	3e060613          	addi	a2,a2,992 # 8002eba0 <__func__.0+0x7140>
    8001e7c8:	00009517          	auipc	a0,0x9
    8001e7cc:	59050513          	addi	a0,a0,1424 # 80027d58 <__func__.0+0x2f8>
    8001e7d0:	526070ef          	jal	80025cf6 <printf>
    8001e7d4:	0002b797          	auipc	a5,0x2b
    8001e7d8:	83d7c783          	lbu	a5,-1987(a5) # 80049011 <excpt+0x1>
    8001e7dc:	00009597          	auipc	a1,0x9
    8001e7e0:	55458593          	addi	a1,a1,1364 # 80027d30 <__func__.0+0x2d0>
    8001e7e4:	cf81                	beqz	a5,8001e7fc <instruction_access_fault_4+0xf8>
    8001e7e6:	641c                	ld	a5,8(s0)
    8001e7e8:	00009597          	auipc	a1,0x9
    8001e7ec:	53858593          	addi	a1,a1,1336 # 80027d20 <__func__.0+0x2c0>
    8001e7f0:	00978663          	beq	a5,s1,8001e7fc <instruction_access_fault_4+0xf8>
    8001e7f4:	00009597          	auipc	a1,0x9
    8001e7f8:	53c58593          	addi	a1,a1,1340 # 80027d30 <__func__.0+0x2d0>
    8001e7fc:	00009517          	auipc	a0,0x9
    8001e800:	57450513          	addi	a0,a0,1396 # 80027d70 <__func__.0+0x310>
    8001e804:	4f2070ef          	jal	80025cf6 <printf>
    8001e808:	0002b797          	auipc	a5,0x2b
    8001e80c:	8097c783          	lbu	a5,-2039(a5) # 80049011 <excpt+0x1>
    8001e810:	c789                	beqz	a5,8001e81a <instruction_access_fault_4+0x116>
    8001e812:	6418                	ld	a4,8(s0)
    8001e814:	4785                	li	a5,1
    8001e816:	00f70c63          	beq	a4,a5,8001e82e <instruction_access_fault_4+0x12a>
    8001e81a:	00009517          	auipc	a0,0x9
    8001e81e:	55e50513          	addi	a0,a0,1374 # 80027d78 <__func__.0+0x318>
    8001e822:	4d4070ef          	jal	80025cf6 <printf>
    8001e826:	02900513          	li	a0,41
    8001e82a:	2d6060ef          	jal	80024b00 <putchar>
    8001e82e:	4529                	li	a0,10
    8001e830:	2d0060ef          	jal	80024b00 <putchar>
    8001e834:	0002a497          	auipc	s1,0x2a
    8001e838:	7dd4c483          	lbu	s1,2013(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001e83c:	00009597          	auipc	a1,0x9
    8001e840:	4f458593          	addi	a1,a1,1268 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001e844:	cc91                	beqz	s1,8001e860 <instruction_access_fault_4+0x15c>
    8001e846:	6418                	ld	a4,8(s0)
    8001e848:	4785                	li	a5,1
    TEST_END();
    8001e84a:	00009597          	auipc	a1,0x9
    8001e84e:	4d658593          	addi	a1,a1,1238 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001e852:	00f70763          	beq	a4,a5,8001e860 <instruction_access_fault_4+0x15c>
    8001e856:	4481                	li	s1,0
    TEST_END();
    8001e858:	00009597          	auipc	a1,0x9
    8001e85c:	4d858593          	addi	a1,a1,1240 # 80027d30 <__func__.0+0x2d0>
    8001e860:	00009517          	auipc	a0,0x9
    8001e864:	57850513          	addi	a0,a0,1400 # 80027dd8 <__func__.0+0x378>
    8001e868:	48e070ef          	jal	80025cf6 <printf>
    8001e86c:	4511                	li	a0,4
    8001e86e:	b88e20ef          	jal	80000bf6 <goto_priv>
    8001e872:	c3be20ef          	jal	800014ac <reset_state>
}
    8001e876:	60e2                	ld	ra,24(sp)
    8001e878:	6442                	ld	s0,16(sp)
    8001e87a:	8526                	mv	a0,s1
    8001e87c:	64a2                	ld	s1,8(sp)
    8001e87e:	6105                	addi	sp,sp,32
    8001e880:	8082                	ret

000000008001e882 <instruction_access_fault_5>:

bool instruction_access_fault_5(){
    8001e882:	1141                	addi	sp,sp,-16

    TEST_START();
    8001e884:	00009597          	auipc	a1,0x9
    8001e888:	cb458593          	addi	a1,a1,-844 # 80027538 <__func__.5>
    8001e88c:	00009517          	auipc	a0,0x9
    8001e890:	4b450513          	addi	a0,a0,1204 # 80027d40 <__func__.0+0x2e0>
bool instruction_access_fault_5(){
    8001e894:	e406                	sd	ra,8(sp)
    8001e896:	e022                	sd	s0,0(sp)
    TEST_START();
    8001e898:	45e070ef          	jal	80025cf6 <printf>
    8001e89c:	4529                	li	a0,10
    8001e89e:	262060ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001e8a2:	4511                	li	a0,4
    8001e8a4:	b52e20ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001e8a8:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001e8ac:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001e8b0:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001e8b4:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001e8b8:	3a046073          	csrsi	pmpcfg0,8
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001e8bc:	10000793          	li	a5,256
    8001e8c0:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001e8c4:	20000793          	li	a5,512
    8001e8c8:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001e8cc:	40000793          	li	a5,1024
    8001e8d0:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001e8d4:	6785                	lui	a5,0x1
    8001e8d6:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001e8da:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000UL);
    8001e8de:	4785                	li	a5,1
    8001e8e0:	07fe                	slli	a5,a5,0x1f
    8001e8e2:	4705                	li	a4,1
    8001e8e4:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000UL);
    8001e8e8:	08100793          	li	a5,129
    8001e8ec:	07e2                	slli	a5,a5,0x18
    8001e8ee:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001e8f2:	67a1                	lui	a5,0x8
    8001e8f4:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001e8f8:	0330000f          	fence	rw,rw
    8001e8fc:	0002a417          	auipc	s0,0x2a
    8001e900:	71440413          	addi	s0,s0,1812 # 80049010 <excpt>
    8001e904:	0002a797          	auipc	a5,0x2a
    8001e908:	7407b223          	sd	zero,1860(a5) # 80049048 <excpt+0x38>
    8001e90c:	00e41023          	sh	a4,0(s0)
    8001e910:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001e914:	02171793          	slli	a5,a4,0x21
    8001e918:	40078793          	addi	a5,a5,1024
    8001e91c:	00000297          	auipc	t0,0x0
    8001e920:	00c28293          	addi	t0,t0,12 # 8001e928 <instruction_access_fault_5+0xa6>
    8001e924:	02543c23          	sd	t0,56(s0)
    8001e928:	8782                	jr	a5

    printf("%d\n",excpt.triggered);
    8001e92a:	0002a597          	auipc	a1,0x2a
    8001e92e:	6e75c583          	lbu	a1,1767(a1) # 80049011 <excpt+0x1>
    8001e932:	0000a517          	auipc	a0,0xa
    8001e936:	f5650513          	addi	a0,a0,-170 # 80028888 <__func__.0+0xe28>
    8001e93a:	3bc070ef          	jal	80025cf6 <printf>
    printf("%d\n",excpt.cause);
    8001e93e:	640c                	ld	a1,8(s0)
    8001e940:	0000a517          	auipc	a0,0xa
    8001e944:	f4850513          	addi	a0,a0,-184 # 80028888 <__func__.0+0xe28>
    8001e948:	3ae070ef          	jal	80025cf6 <printf>

    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    8001e94c:	08200593          	li	a1,130
    8001e950:	00010617          	auipc	a2,0x10
    8001e954:	29860613          	addi	a2,a2,664 # 8002ebe8 <__func__.0+0x7188>
    8001e958:	00009517          	auipc	a0,0x9
    8001e95c:	40050513          	addi	a0,a0,1024 # 80027d58 <__func__.0+0x2f8>
    8001e960:	396070ef          	jal	80025cf6 <printf>
    8001e964:	0002a797          	auipc	a5,0x2a
    8001e968:	6ad7c783          	lbu	a5,1709(a5) # 80049011 <excpt+0x1>
    8001e96c:	00009597          	auipc	a1,0x9
    8001e970:	3b458593          	addi	a1,a1,948 # 80027d20 <__func__.0+0x2c0>
    8001e974:	c789                	beqz	a5,8001e97e <instruction_access_fault_5+0xfc>
    8001e976:	00009597          	auipc	a1,0x9
    8001e97a:	3ba58593          	addi	a1,a1,954 # 80027d30 <__func__.0+0x2d0>
    8001e97e:	00009517          	auipc	a0,0x9
    8001e982:	3f250513          	addi	a0,a0,1010 # 80027d70 <__func__.0+0x310>
    8001e986:	370070ef          	jal	80025cf6 <printf>
    8001e98a:	0002a797          	auipc	a5,0x2a
    8001e98e:	6877c783          	lbu	a5,1671(a5) # 80049011 <excpt+0x1>
    8001e992:	e7a1                	bnez	a5,8001e9da <instruction_access_fault_5+0x158>
    8001e994:	4529                	li	a0,10
    8001e996:	16a060ef          	jal	80024b00 <putchar>
    8001e99a:	0002a797          	auipc	a5,0x2a
    8001e99e:	6777c783          	lbu	a5,1655(a5) # 80049011 <excpt+0x1>
    8001e9a2:	e795                	bnez	a5,8001e9ce <instruction_access_fault_5+0x14c>
    8001e9a4:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END();
    8001e9a6:	00009597          	auipc	a1,0x9
    8001e9aa:	37a58593          	addi	a1,a1,890 # 80027d20 <__func__.0+0x2c0>
    8001e9ae:	00009517          	auipc	a0,0x9
    8001e9b2:	42a50513          	addi	a0,a0,1066 # 80027dd8 <__func__.0+0x378>
    8001e9b6:	340070ef          	jal	80025cf6 <printf>
    8001e9ba:	4511                	li	a0,4
    8001e9bc:	a3ae20ef          	jal	80000bf6 <goto_priv>
    8001e9c0:	aede20ef          	jal	800014ac <reset_state>
}
    8001e9c4:	60a2                	ld	ra,8(sp)
    8001e9c6:	8522                	mv	a0,s0
    8001e9c8:	6402                	ld	s0,0(sp)
    8001e9ca:	0141                	addi	sp,sp,16
    8001e9cc:	8082                	ret
    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    8001e9ce:	4401                	li	s0,0
    TEST_END();
    8001e9d0:	00009597          	auipc	a1,0x9
    8001e9d4:	36058593          	addi	a1,a1,864 # 80027d30 <__func__.0+0x2d0>
    8001e9d8:	bfd9                	j	8001e9ae <instruction_access_fault_5+0x12c>
    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    8001e9da:	00009517          	auipc	a0,0x9
    8001e9de:	39e50513          	addi	a0,a0,926 # 80027d78 <__func__.0+0x318>
    8001e9e2:	314070ef          	jal	80025cf6 <printf>
    8001e9e6:	02900513          	li	a0,41
    8001e9ea:	116060ef          	jal	80024b00 <putchar>
    8001e9ee:	b75d                	j	8001e994 <instruction_access_fault_5+0x112>

000000008001e9f0 <instruction_access_fault_6>:


bool instruction_access_fault_6(){
    8001e9f0:	1101                	addi	sp,sp,-32

    TEST_START();
    8001e9f2:	00009597          	auipc	a1,0x9
    8001e9f6:	b6658593          	addi	a1,a1,-1178 # 80027558 <__func__.4>
    8001e9fa:	00009517          	auipc	a0,0x9
    8001e9fe:	34650513          	addi	a0,a0,838 # 80027d40 <__func__.0+0x2e0>
bool instruction_access_fault_6(){
    8001ea02:	ec06                	sd	ra,24(sp)
    8001ea04:	e822                	sd	s0,16(sp)
    8001ea06:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ea08:	2ee070ef          	jal	80025cf6 <printf>
    8001ea0c:	4529                	li	a0,10
    8001ea0e:	0f2060ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001ea12:	4511                	li	a0,4
    8001ea14:	9e2e20ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001ea18:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001ea1c:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001ea20:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001ea24:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001ea28:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001ea2c:	10000793          	li	a5,256
    8001ea30:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001ea34:	20000793          	li	a5,512
    8001ea38:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001ea3c:	40000793          	li	a5,1024
    8001ea40:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001ea44:	6785                	lui	a5,0x1
    8001ea46:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001ea4a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001ea4e:	4785                	li	a5,1
    8001ea50:	07fe                	slli	a5,a5,0x1f
    8001ea52:	4485                	li	s1,1
    8001ea54:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001ea58:	08100793          	li	a5,129
    8001ea5c:	07e2                	slli	a5,a5,0x18
    8001ea5e:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001ea62:	08000793          	li	a5,128
    8001ea66:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001ea6a:	67a1                	lui	a5,0x8
    8001ea6c:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001ea70:	450d                	li	a0,3
    8001ea72:	984e20ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001ea76:	0330000f          	fence	rw,rw
    8001ea7a:	0002a417          	auipc	s0,0x2a
    8001ea7e:	59640413          	addi	s0,s0,1430 # 80049010 <excpt>
    8001ea82:	0002a797          	auipc	a5,0x2a
    8001ea86:	5c07b323          	sd	zero,1478(a5) # 80049048 <excpt+0x38>
    8001ea8a:	00941023          	sh	s1,0(s0)
    8001ea8e:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001ea92:	02149793          	slli	a5,s1,0x21
    8001ea96:	40078793          	addi	a5,a5,1024
    8001ea9a:	00000297          	auipc	t0,0x0
    8001ea9e:	00c28293          	addi	t0,t0,12 # 8001eaa6 <instruction_access_fault_6+0xb6>
    8001eaa2:	02543c23          	sd	t0,56(s0)
    8001eaa6:	8782                	jr	a5

    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001eaa8:	08200593          	li	a1,130
    8001eaac:	00010617          	auipc	a2,0x10
    8001eab0:	18460613          	addi	a2,a2,388 # 8002ec30 <__func__.0+0x71d0>
    8001eab4:	00009517          	auipc	a0,0x9
    8001eab8:	2a450513          	addi	a0,a0,676 # 80027d58 <__func__.0+0x2f8>
    8001eabc:	23a070ef          	jal	80025cf6 <printf>
    8001eac0:	0002a797          	auipc	a5,0x2a
    8001eac4:	5517c783          	lbu	a5,1361(a5) # 80049011 <excpt+0x1>
    8001eac8:	00009597          	auipc	a1,0x9
    8001eacc:	26858593          	addi	a1,a1,616 # 80027d30 <__func__.0+0x2d0>
    8001ead0:	cf81                	beqz	a5,8001eae8 <instruction_access_fault_6+0xf8>
    8001ead2:	641c                	ld	a5,8(s0)
    8001ead4:	00009597          	auipc	a1,0x9
    8001ead8:	24c58593          	addi	a1,a1,588 # 80027d20 <__func__.0+0x2c0>
    8001eadc:	00978663          	beq	a5,s1,8001eae8 <instruction_access_fault_6+0xf8>
    8001eae0:	00009597          	auipc	a1,0x9
    8001eae4:	25058593          	addi	a1,a1,592 # 80027d30 <__func__.0+0x2d0>
    8001eae8:	00009517          	auipc	a0,0x9
    8001eaec:	28850513          	addi	a0,a0,648 # 80027d70 <__func__.0+0x310>
    8001eaf0:	206070ef          	jal	80025cf6 <printf>
    8001eaf4:	0002a797          	auipc	a5,0x2a
    8001eaf8:	51d7c783          	lbu	a5,1309(a5) # 80049011 <excpt+0x1>
    8001eafc:	c789                	beqz	a5,8001eb06 <instruction_access_fault_6+0x116>
    8001eafe:	6418                	ld	a4,8(s0)
    8001eb00:	4785                	li	a5,1
    8001eb02:	00f70c63          	beq	a4,a5,8001eb1a <instruction_access_fault_6+0x12a>
    8001eb06:	00009517          	auipc	a0,0x9
    8001eb0a:	27250513          	addi	a0,a0,626 # 80027d78 <__func__.0+0x318>
    8001eb0e:	1e8070ef          	jal	80025cf6 <printf>
    8001eb12:	02900513          	li	a0,41
    8001eb16:	7eb050ef          	jal	80024b00 <putchar>
    8001eb1a:	4529                	li	a0,10
    8001eb1c:	7e5050ef          	jal	80024b00 <putchar>
    8001eb20:	0002a497          	auipc	s1,0x2a
    8001eb24:	4f14c483          	lbu	s1,1265(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001eb28:	00009597          	auipc	a1,0x9
    8001eb2c:	20858593          	addi	a1,a1,520 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001eb30:	cc91                	beqz	s1,8001eb4c <instruction_access_fault_6+0x15c>
    8001eb32:	6418                	ld	a4,8(s0)
    8001eb34:	4785                	li	a5,1
    TEST_END();
    8001eb36:	00009597          	auipc	a1,0x9
    8001eb3a:	1ea58593          	addi	a1,a1,490 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001eb3e:	00f70763          	beq	a4,a5,8001eb4c <instruction_access_fault_6+0x15c>
    8001eb42:	4481                	li	s1,0
    TEST_END();
    8001eb44:	00009597          	auipc	a1,0x9
    8001eb48:	1ec58593          	addi	a1,a1,492 # 80027d30 <__func__.0+0x2d0>
    8001eb4c:	00009517          	auipc	a0,0x9
    8001eb50:	28c50513          	addi	a0,a0,652 # 80027dd8 <__func__.0+0x378>
    8001eb54:	1a2070ef          	jal	80025cf6 <printf>
    8001eb58:	4511                	li	a0,4
    8001eb5a:	89ce20ef          	jal	80000bf6 <goto_priv>
    8001eb5e:	94fe20ef          	jal	800014ac <reset_state>
}
    8001eb62:	60e2                	ld	ra,24(sp)
    8001eb64:	6442                	ld	s0,16(sp)
    8001eb66:	8526                	mv	a0,s1
    8001eb68:	64a2                	ld	s1,8(sp)
    8001eb6a:	6105                	addi	sp,sp,32
    8001eb6c:	8082                	ret

000000008001eb6e <instruction_access_fault_7>:


bool instruction_access_fault_7(){
    8001eb6e:	1101                	addi	sp,sp,-32

    TEST_START();
    8001eb70:	00009597          	auipc	a1,0x9
    8001eb74:	a0858593          	addi	a1,a1,-1528 # 80027578 <__func__.3>
    8001eb78:	00009517          	auipc	a0,0x9
    8001eb7c:	1c850513          	addi	a0,a0,456 # 80027d40 <__func__.0+0x2e0>
bool instruction_access_fault_7(){
    8001eb80:	ec06                	sd	ra,24(sp)
    8001eb82:	e822                	sd	s0,16(sp)
    8001eb84:	e426                	sd	s1,8(sp)
    TEST_START();
    8001eb86:	170070ef          	jal	80025cf6 <printf>
    8001eb8a:	4529                	li	a0,10
    8001eb8c:	775050ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001eb90:	4511                	li	a0,4
    8001eb92:	864e20ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001eb96:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001eb9a:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001eb9e:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001eba2:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001eba6:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001ebaa:	10000793          	li	a5,256
    8001ebae:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001ebb2:	20000793          	li	a5,512
    8001ebb6:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001ebba:	40000793          	li	a5,1024
    8001ebbe:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001ebc2:	6785                	lui	a5,0x1
    8001ebc4:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001ebc8:	3a07a073          	csrs	pmpcfg0,a5
    
    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001ebcc:	4785                	li	a5,1
    8001ebce:	07fe                	slli	a5,a5,0x1f
    8001ebd0:	4485                	li	s1,1
    8001ebd2:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001ebd6:	08100793          	li	a5,129
    8001ebda:	07e2                	slli	a5,a5,0x18
    8001ebdc:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001ebe0:	08000793          	li	a5,128
    8001ebe4:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001ebe8:	67a1                	lui	a5,0x8
    8001ebea:	3a07b073          	csrc	pmpcfg0,a5


    goto_priv(PRIV_HU);
    8001ebee:	8526                	mv	a0,s1
    8001ebf0:	806e20ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001ebf4:	0330000f          	fence	rw,rw
    8001ebf8:	0002a417          	auipc	s0,0x2a
    8001ebfc:	41840413          	addi	s0,s0,1048 # 80049010 <excpt>
    8001ec00:	0002a797          	auipc	a5,0x2a
    8001ec04:	4407b423          	sd	zero,1096(a5) # 80049048 <excpt+0x38>
    8001ec08:	00941023          	sh	s1,0(s0)
    8001ec0c:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001ec10:	02149793          	slli	a5,s1,0x21
    8001ec14:	40078793          	addi	a5,a5,1024
    8001ec18:	00000297          	auipc	t0,0x0
    8001ec1c:	00c28293          	addi	t0,t0,12 # 8001ec24 <instruction_access_fault_7+0xb6>
    8001ec20:	02543c23          	sd	t0,56(s0)
    8001ec24:	8782                	jr	a5

    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001ec26:	08200593          	li	a1,130
    8001ec2a:	00010617          	auipc	a2,0x10
    8001ec2e:	04e60613          	addi	a2,a2,78 # 8002ec78 <__func__.0+0x7218>
    8001ec32:	00009517          	auipc	a0,0x9
    8001ec36:	12650513          	addi	a0,a0,294 # 80027d58 <__func__.0+0x2f8>
    8001ec3a:	0bc070ef          	jal	80025cf6 <printf>
    8001ec3e:	0002a797          	auipc	a5,0x2a
    8001ec42:	3d37c783          	lbu	a5,979(a5) # 80049011 <excpt+0x1>
    8001ec46:	00009597          	auipc	a1,0x9
    8001ec4a:	0ea58593          	addi	a1,a1,234 # 80027d30 <__func__.0+0x2d0>
    8001ec4e:	cf81                	beqz	a5,8001ec66 <instruction_access_fault_7+0xf8>
    8001ec50:	641c                	ld	a5,8(s0)
    8001ec52:	00009597          	auipc	a1,0x9
    8001ec56:	0ce58593          	addi	a1,a1,206 # 80027d20 <__func__.0+0x2c0>
    8001ec5a:	00978663          	beq	a5,s1,8001ec66 <instruction_access_fault_7+0xf8>
    8001ec5e:	00009597          	auipc	a1,0x9
    8001ec62:	0d258593          	addi	a1,a1,210 # 80027d30 <__func__.0+0x2d0>
    8001ec66:	00009517          	auipc	a0,0x9
    8001ec6a:	10a50513          	addi	a0,a0,266 # 80027d70 <__func__.0+0x310>
    8001ec6e:	088070ef          	jal	80025cf6 <printf>
    8001ec72:	0002a797          	auipc	a5,0x2a
    8001ec76:	39f7c783          	lbu	a5,927(a5) # 80049011 <excpt+0x1>
    8001ec7a:	c789                	beqz	a5,8001ec84 <instruction_access_fault_7+0x116>
    8001ec7c:	6418                	ld	a4,8(s0)
    8001ec7e:	4785                	li	a5,1
    8001ec80:	00f70c63          	beq	a4,a5,8001ec98 <instruction_access_fault_7+0x12a>
    8001ec84:	00009517          	auipc	a0,0x9
    8001ec88:	0f450513          	addi	a0,a0,244 # 80027d78 <__func__.0+0x318>
    8001ec8c:	06a070ef          	jal	80025cf6 <printf>
    8001ec90:	02900513          	li	a0,41
    8001ec94:	66d050ef          	jal	80024b00 <putchar>
    8001ec98:	4529                	li	a0,10
    8001ec9a:	667050ef          	jal	80024b00 <putchar>
    8001ec9e:	0002a497          	auipc	s1,0x2a
    8001eca2:	3734c483          	lbu	s1,883(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );

    TEST_END();
    8001eca6:	00009597          	auipc	a1,0x9
    8001ecaa:	08a58593          	addi	a1,a1,138 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001ecae:	cc91                	beqz	s1,8001ecca <instruction_access_fault_7+0x15c>
    8001ecb0:	6418                	ld	a4,8(s0)
    8001ecb2:	4785                	li	a5,1
    TEST_END();
    8001ecb4:	00009597          	auipc	a1,0x9
    8001ecb8:	06c58593          	addi	a1,a1,108 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001ecbc:	00f70763          	beq	a4,a5,8001ecca <instruction_access_fault_7+0x15c>
    8001ecc0:	4481                	li	s1,0
    TEST_END();
    8001ecc2:	00009597          	auipc	a1,0x9
    8001ecc6:	06e58593          	addi	a1,a1,110 # 80027d30 <__func__.0+0x2d0>
    8001ecca:	00009517          	auipc	a0,0x9
    8001ecce:	10e50513          	addi	a0,a0,270 # 80027dd8 <__func__.0+0x378>
    8001ecd2:	024070ef          	jal	80025cf6 <printf>
    8001ecd6:	4511                	li	a0,4
    8001ecd8:	f1fe10ef          	jal	80000bf6 <goto_priv>
    8001ecdc:	fd0e20ef          	jal	800014ac <reset_state>
}
    8001ece0:	60e2                	ld	ra,24(sp)
    8001ece2:	6442                	ld	s0,16(sp)
    8001ece4:	8526                	mv	a0,s1
    8001ece6:	64a2                	ld	s1,8(sp)
    8001ece8:	6105                	addi	sp,sp,32
    8001ecea:	8082                	ret

000000008001ecec <instruction_access_fault_8>:

bool instruction_access_fault_8(){
    8001ecec:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ecee:	00009597          	auipc	a1,0x9
    8001ecf2:	8aa58593          	addi	a1,a1,-1878 # 80027598 <__func__.2>
    8001ecf6:	00009517          	auipc	a0,0x9
    8001ecfa:	04a50513          	addi	a0,a0,74 # 80027d40 <__func__.0+0x2e0>
bool instruction_access_fault_8(){
    8001ecfe:	ec06                	sd	ra,24(sp)
    8001ed00:	e822                	sd	s0,16(sp)
    8001ed02:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ed04:	7f3060ef          	jal	80025cf6 <printf>
    8001ed08:	4529                	li	a0,10
    8001ed0a:	5f7050ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001ed0e:	4511                	li	a0,4
    8001ed10:	ee7e10ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001ed14:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001ed18:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001ed1c:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001ed20:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001ed24:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001ed28:	10000793          	li	a5,256
    8001ed2c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001ed30:	20000793          	li	a5,512
    8001ed34:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001ed38:	40000793          	li	a5,1024
    8001ed3c:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001ed40:	6785                	lui	a5,0x1
    8001ed42:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001ed46:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001ed4a:	4785                	li	a5,1
    8001ed4c:	07fe                	slli	a5,a5,0x1f
    8001ed4e:	4485                	li	s1,1
    8001ed50:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001ed54:	08100793          	li	a5,129
    8001ed58:	07e2                	slli	a5,a5,0x18
    8001ed5a:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001ed5e:	08000793          	li	a5,128
    8001ed62:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001ed66:	67a1                	lui	a5,0x8
    8001ed68:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001ed6c:	4501                	li	a0,0
    8001ed6e:	e89e10ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001ed72:	0330000f          	fence	rw,rw
    8001ed76:	0002a417          	auipc	s0,0x2a
    8001ed7a:	29a40413          	addi	s0,s0,666 # 80049010 <excpt>
    8001ed7e:	0002a797          	auipc	a5,0x2a
    8001ed82:	2c07b523          	sd	zero,714(a5) # 80049048 <excpt+0x38>
    8001ed86:	00941023          	sh	s1,0(s0)
    8001ed8a:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001ed8e:	02149793          	slli	a5,s1,0x21
    8001ed92:	40078793          	addi	a5,a5,1024
    8001ed96:	00000297          	auipc	t0,0x0
    8001ed9a:	00c28293          	addi	t0,t0,12 # 8001eda2 <instruction_access_fault_8+0xb6>
    8001ed9e:	02543c23          	sd	t0,56(s0)
    8001eda2:	8782                	jr	a5

    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001eda4:	08200593          	li	a1,130
    8001eda8:	00010617          	auipc	a2,0x10
    8001edac:	f1860613          	addi	a2,a2,-232 # 8002ecc0 <__func__.0+0x7260>
    8001edb0:	00009517          	auipc	a0,0x9
    8001edb4:	fa850513          	addi	a0,a0,-88 # 80027d58 <__func__.0+0x2f8>
    8001edb8:	73f060ef          	jal	80025cf6 <printf>
    8001edbc:	0002a797          	auipc	a5,0x2a
    8001edc0:	2557c783          	lbu	a5,597(a5) # 80049011 <excpt+0x1>
    8001edc4:	00009597          	auipc	a1,0x9
    8001edc8:	f6c58593          	addi	a1,a1,-148 # 80027d30 <__func__.0+0x2d0>
    8001edcc:	cf81                	beqz	a5,8001ede4 <instruction_access_fault_8+0xf8>
    8001edce:	641c                	ld	a5,8(s0)
    8001edd0:	00009597          	auipc	a1,0x9
    8001edd4:	f5058593          	addi	a1,a1,-176 # 80027d20 <__func__.0+0x2c0>
    8001edd8:	00978663          	beq	a5,s1,8001ede4 <instruction_access_fault_8+0xf8>
    8001eddc:	00009597          	auipc	a1,0x9
    8001ede0:	f5458593          	addi	a1,a1,-172 # 80027d30 <__func__.0+0x2d0>
    8001ede4:	00009517          	auipc	a0,0x9
    8001ede8:	f8c50513          	addi	a0,a0,-116 # 80027d70 <__func__.0+0x310>
    8001edec:	70b060ef          	jal	80025cf6 <printf>
    8001edf0:	0002a797          	auipc	a5,0x2a
    8001edf4:	2217c783          	lbu	a5,545(a5) # 80049011 <excpt+0x1>
    8001edf8:	c789                	beqz	a5,8001ee02 <instruction_access_fault_8+0x116>
    8001edfa:	6418                	ld	a4,8(s0)
    8001edfc:	4785                	li	a5,1
    8001edfe:	00f70c63          	beq	a4,a5,8001ee16 <instruction_access_fault_8+0x12a>
    8001ee02:	00009517          	auipc	a0,0x9
    8001ee06:	f7650513          	addi	a0,a0,-138 # 80027d78 <__func__.0+0x318>
    8001ee0a:	6ed060ef          	jal	80025cf6 <printf>
    8001ee0e:	02900513          	li	a0,41
    8001ee12:	4ef050ef          	jal	80024b00 <putchar>
    8001ee16:	4529                	li	a0,10
    8001ee18:	4e9050ef          	jal	80024b00 <putchar>
    8001ee1c:	0002a497          	auipc	s1,0x2a
    8001ee20:	1f54c483          	lbu	s1,501(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001ee24:	00009597          	auipc	a1,0x9
    8001ee28:	f0c58593          	addi	a1,a1,-244 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001ee2c:	cc91                	beqz	s1,8001ee48 <instruction_access_fault_8+0x15c>
    8001ee2e:	6418                	ld	a4,8(s0)
    8001ee30:	4785                	li	a5,1
    TEST_END();
    8001ee32:	00009597          	auipc	a1,0x9
    8001ee36:	eee58593          	addi	a1,a1,-274 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001ee3a:	00f70763          	beq	a4,a5,8001ee48 <instruction_access_fault_8+0x15c>
    8001ee3e:	4481                	li	s1,0
    TEST_END();
    8001ee40:	00009597          	auipc	a1,0x9
    8001ee44:	ef058593          	addi	a1,a1,-272 # 80027d30 <__func__.0+0x2d0>
    8001ee48:	00009517          	auipc	a0,0x9
    8001ee4c:	f9050513          	addi	a0,a0,-112 # 80027dd8 <__func__.0+0x378>
    8001ee50:	6a7060ef          	jal	80025cf6 <printf>
    8001ee54:	4511                	li	a0,4
    8001ee56:	da1e10ef          	jal	80000bf6 <goto_priv>
    8001ee5a:	e52e20ef          	jal	800014ac <reset_state>
}
    8001ee5e:	60e2                	ld	ra,24(sp)
    8001ee60:	6442                	ld	s0,16(sp)
    8001ee62:	8526                	mv	a0,s1
    8001ee64:	64a2                	ld	s1,8(sp)
    8001ee66:	6105                	addi	sp,sp,32
    8001ee68:	8082                	ret

000000008001ee6a <instruction_access_fault_9>:

bool instruction_access_fault_9(){
    8001ee6a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ee6c:	00008597          	auipc	a1,0x8
    8001ee70:	74c58593          	addi	a1,a1,1868 # 800275b8 <__func__.1>
    8001ee74:	00009517          	auipc	a0,0x9
    8001ee78:	ecc50513          	addi	a0,a0,-308 # 80027d40 <__func__.0+0x2e0>
bool instruction_access_fault_9(){
    8001ee7c:	ec06                	sd	ra,24(sp)
    8001ee7e:	e822                	sd	s0,16(sp)
    8001ee80:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ee82:	675060ef          	jal	80025cf6 <printf>
    8001ee86:	4529                	li	a0,10
    8001ee88:	479050ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001ee8c:	4511                	li	a0,4
    8001ee8e:	d69e10ef          	jal	80000bf6 <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001ee92:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001ee96:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001ee9a:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001ee9e:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001eea2:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001eea6:	10000793          	li	a5,256
    8001eeaa:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001eeae:	20000793          	li	a5,512
    8001eeb2:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001eeb6:	40000793          	li	a5,1024
    8001eeba:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001eebe:	6785                	lui	a5,0x1
    8001eec0:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001eec4:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001eec8:	4785                	li	a5,1
    8001eeca:	07fe                	slli	a5,a5,0x1f
    8001eecc:	4485                	li	s1,1
    8001eece:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001eed2:	08100793          	li	a5,129
    8001eed6:	07e2                	slli	a5,a5,0x18
    8001eed8:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001eedc:	08000793          	li	a5,128
    8001eee0:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001eee4:	67a1                	lui	a5,0x8
    8001eee6:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001eeea:	4501                	li	a0,0
    8001eeec:	d0be10ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001eef0:	0330000f          	fence	rw,rw
    8001eef4:	0002a417          	auipc	s0,0x2a
    8001eef8:	11c40413          	addi	s0,s0,284 # 80049010 <excpt>
    8001eefc:	0002a797          	auipc	a5,0x2a
    8001ef00:	1407b623          	sd	zero,332(a5) # 80049048 <excpt+0x38>
    8001ef04:	00941023          	sh	s1,0(s0)
    8001ef08:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x1fffffffeUL << 2);
    8001ef0c:	02349793          	slli	a5,s1,0x23
    8001ef10:	17e1                	addi	a5,a5,-8
    8001ef12:	00000297          	auipc	t0,0x0
    8001ef16:	00c28293          	addi	t0,t0,12 # 8001ef1e <instruction_access_fault_9+0xb4>
    8001ef1a:	02543c23          	sd	t0,56(s0)
    8001ef1e:	8782                	jr	a5

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    8001ef20:	08200593          	li	a1,130
    8001ef24:	00010617          	auipc	a2,0x10
    8001ef28:	dd460613          	addi	a2,a2,-556 # 8002ecf8 <__func__.0+0x7298>
    8001ef2c:	00009517          	auipc	a0,0x9
    8001ef30:	e2c50513          	addi	a0,a0,-468 # 80027d58 <__func__.0+0x2f8>
    8001ef34:	5c3060ef          	jal	80025cf6 <printf>
    8001ef38:	0002a797          	auipc	a5,0x2a
    8001ef3c:	0d97c783          	lbu	a5,217(a5) # 80049011 <excpt+0x1>
    8001ef40:	00009597          	auipc	a1,0x9
    8001ef44:	df058593          	addi	a1,a1,-528 # 80027d30 <__func__.0+0x2d0>
    8001ef48:	cf81                	beqz	a5,8001ef60 <instruction_access_fault_9+0xf6>
    8001ef4a:	641c                	ld	a5,8(s0)
    8001ef4c:	00009597          	auipc	a1,0x9
    8001ef50:	dd458593          	addi	a1,a1,-556 # 80027d20 <__func__.0+0x2c0>
    8001ef54:	00978663          	beq	a5,s1,8001ef60 <instruction_access_fault_9+0xf6>
    8001ef58:	00009597          	auipc	a1,0x9
    8001ef5c:	dd858593          	addi	a1,a1,-552 # 80027d30 <__func__.0+0x2d0>
    8001ef60:	00009517          	auipc	a0,0x9
    8001ef64:	e1050513          	addi	a0,a0,-496 # 80027d70 <__func__.0+0x310>
    8001ef68:	58f060ef          	jal	80025cf6 <printf>
    8001ef6c:	0002a797          	auipc	a5,0x2a
    8001ef70:	0a57c783          	lbu	a5,165(a5) # 80049011 <excpt+0x1>
    8001ef74:	c789                	beqz	a5,8001ef7e <instruction_access_fault_9+0x114>
    8001ef76:	6418                	ld	a4,8(s0)
    8001ef78:	4785                	li	a5,1
    8001ef7a:	00f70c63          	beq	a4,a5,8001ef92 <instruction_access_fault_9+0x128>
    8001ef7e:	00009517          	auipc	a0,0x9
    8001ef82:	dfa50513          	addi	a0,a0,-518 # 80027d78 <__func__.0+0x318>
    8001ef86:	571060ef          	jal	80025cf6 <printf>
    8001ef8a:	02900513          	li	a0,41
    8001ef8e:	373050ef          	jal	80024b00 <putchar>
    8001ef92:	4529                	li	a0,10
    8001ef94:	36d050ef          	jal	80024b00 <putchar>
    8001ef98:	0002a497          	auipc	s1,0x2a
    8001ef9c:	0794c483          	lbu	s1,121(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001efa0:	00009597          	auipc	a1,0x9
    8001efa4:	d9058593          	addi	a1,a1,-624 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    8001efa8:	cc91                	beqz	s1,8001efc4 <instruction_access_fault_9+0x15a>
    8001efaa:	6418                	ld	a4,8(s0)
    8001efac:	4785                	li	a5,1
    TEST_END();
    8001efae:	00009597          	auipc	a1,0x9
    8001efb2:	d7258593          	addi	a1,a1,-654 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    8001efb6:	00f70763          	beq	a4,a5,8001efc4 <instruction_access_fault_9+0x15a>
    8001efba:	4481                	li	s1,0
    TEST_END();
    8001efbc:	00009597          	auipc	a1,0x9
    8001efc0:	d7458593          	addi	a1,a1,-652 # 80027d30 <__func__.0+0x2d0>
    8001efc4:	00009517          	auipc	a0,0x9
    8001efc8:	e1450513          	addi	a0,a0,-492 # 80027dd8 <__func__.0+0x378>
    8001efcc:	52b060ef          	jal	80025cf6 <printf>
    8001efd0:	4511                	li	a0,4
    8001efd2:	c25e10ef          	jal	80000bf6 <goto_priv>
    8001efd6:	cd6e20ef          	jal	800014ac <reset_state>
}
    8001efda:	60e2                	ld	ra,24(sp)
    8001efdc:	6442                	ld	s0,16(sp)
    8001efde:	8526                	mv	a0,s1
    8001efe0:	64a2                	ld	s1,8(sp)
    8001efe2:	6105                	addi	sp,sp,32
    8001efe4:	8082                	ret

000000008001efe6 <instruction_access_fault_10>:

bool instruction_access_fault_10(){
    8001efe6:	1101                	addi	sp,sp,-32

    TEST_START();
    8001efe8:	00008597          	auipc	a1,0x8
    8001efec:	5f058593          	addi	a1,a1,1520 # 800275d8 <__func__.0>
    8001eff0:	00009517          	auipc	a0,0x9
    8001eff4:	d5050513          	addi	a0,a0,-688 # 80027d40 <__func__.0+0x2e0>
bool instruction_access_fault_10(){
    8001eff8:	ec06                	sd	ra,24(sp)
    8001effa:	e822                	sd	s0,16(sp)
    8001effc:	e426                	sd	s1,8(sp)
    TEST_START();
    8001effe:	4f9060ef          	jal	80025cf6 <printf>
    8001f002:	4529                	li	a0,10
    8001f004:	2fd050ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    8001f008:	4511                	li	a0,4
    8001f00a:	bede10ef          	jal	80000bf6 <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001f00e:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001f012:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001f016:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001f01a:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001f01e:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x90000000);
    8001f022:	47a5                	li	a5,9
    8001f024:	07f2                	slli	a5,a5,0x1c
    8001f026:	3b079073          	csrw	pmpaddr0,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001f02a:	08000793          	li	a5,128
    8001f02e:	3a07a073          	csrs	pmpcfg0,a5
    printf("pmpcfg0=%llx\n",CSRR(CSR_PMPCFG0));printf("pmpcfg2=%llx\n",CSRR(CSR_PMPCFG2));
    8001f032:	3a0025f3          	csrr	a1,pmpcfg0
    8001f036:	0000f517          	auipc	a0,0xf
    8001f03a:	33a50513          	addi	a0,a0,826 # 8002e370 <__func__.0+0x6910>
    8001f03e:	4b9060ef          	jal	80025cf6 <printf>
    8001f042:	3a2025f3          	csrr	a1,pmpcfg2
    8001f046:	00010517          	auipc	a0,0x10
    8001f04a:	d2250513          	addi	a0,a0,-734 # 8002ed68 <__func__.0+0x7308>
    8001f04e:	4a9060ef          	jal	80025cf6 <printf>
    goto_priv(PRIV_HS);
    8001f052:	450d                	li	a0,3
    8001f054:	ba3e10ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001f058:	0330000f          	fence	rw,rw
    8001f05c:	0002a417          	auipc	s0,0x2a
    8001f060:	fb440413          	addi	s0,s0,-76 # 80049010 <excpt>
    8001f064:	4485                	li	s1,1
    8001f066:	0002a797          	auipc	a5,0x2a
    8001f06a:	fe07b123          	sd	zero,-30(a5) # 80049048 <excpt+0x38>
    8001f06e:	00941023          	sh	s1,0(s0)
    8001f072:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x9f000000UL << 2);
    8001f076:	09f00793          	li	a5,159
    8001f07a:	07ea                	slli	a5,a5,0x1a
    8001f07c:	00000297          	auipc	t0,0x0
    8001f080:	00c28293          	addi	t0,t0,12 # 8001f088 <instruction_access_fault_10+0xa2>
    8001f084:	02543c23          	sd	t0,56(s0)
    8001f088:	8782                	jr	a5

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    8001f08a:	08200593          	li	a1,130
    8001f08e:	00010617          	auipc	a2,0x10
    8001f092:	cea60613          	addi	a2,a2,-790 # 8002ed78 <__func__.0+0x7318>
    8001f096:	00009517          	auipc	a0,0x9
    8001f09a:	cc250513          	addi	a0,a0,-830 # 80027d58 <__func__.0+0x2f8>
    8001f09e:	459060ef          	jal	80025cf6 <printf>
    8001f0a2:	0002a797          	auipc	a5,0x2a
    8001f0a6:	f6f7c783          	lbu	a5,-145(a5) # 80049011 <excpt+0x1>
    8001f0aa:	00009597          	auipc	a1,0x9
    8001f0ae:	c8658593          	addi	a1,a1,-890 # 80027d30 <__func__.0+0x2d0>
    8001f0b2:	cf81                	beqz	a5,8001f0ca <instruction_access_fault_10+0xe4>
    8001f0b4:	641c                	ld	a5,8(s0)
    8001f0b6:	00009597          	auipc	a1,0x9
    8001f0ba:	c6a58593          	addi	a1,a1,-918 # 80027d20 <__func__.0+0x2c0>
    8001f0be:	00978663          	beq	a5,s1,8001f0ca <instruction_access_fault_10+0xe4>
    8001f0c2:	00009597          	auipc	a1,0x9
    8001f0c6:	c6e58593          	addi	a1,a1,-914 # 80027d30 <__func__.0+0x2d0>
    8001f0ca:	00009517          	auipc	a0,0x9
    8001f0ce:	ca650513          	addi	a0,a0,-858 # 80027d70 <__func__.0+0x310>
    8001f0d2:	425060ef          	jal	80025cf6 <printf>
    8001f0d6:	0002a797          	auipc	a5,0x2a
    8001f0da:	f3b7c783          	lbu	a5,-197(a5) # 80049011 <excpt+0x1>
    8001f0de:	c789                	beqz	a5,8001f0e8 <instruction_access_fault_10+0x102>
    8001f0e0:	6418                	ld	a4,8(s0)
    8001f0e2:	4785                	li	a5,1
    8001f0e4:	00f70c63          	beq	a4,a5,8001f0fc <instruction_access_fault_10+0x116>
    8001f0e8:	00009517          	auipc	a0,0x9
    8001f0ec:	c9050513          	addi	a0,a0,-880 # 80027d78 <__func__.0+0x318>
    8001f0f0:	407060ef          	jal	80025cf6 <printf>
    8001f0f4:	02900513          	li	a0,41
    8001f0f8:	209050ef          	jal	80024b00 <putchar>
    8001f0fc:	4529                	li	a0,10
    8001f0fe:	203050ef          	jal	80024b00 <putchar>
    8001f102:	0002a497          	auipc	s1,0x2a
    8001f106:	f0f4c483          	lbu	s1,-241(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001f10a:	00009597          	auipc	a1,0x9
    8001f10e:	c2658593          	addi	a1,a1,-986 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    8001f112:	cc91                	beqz	s1,8001f12e <instruction_access_fault_10+0x148>
    8001f114:	6418                	ld	a4,8(s0)
    8001f116:	4785                	li	a5,1
    TEST_END();
    8001f118:	00009597          	auipc	a1,0x9
    8001f11c:	c0858593          	addi	a1,a1,-1016 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    8001f120:	00f70763          	beq	a4,a5,8001f12e <instruction_access_fault_10+0x148>
    8001f124:	4481                	li	s1,0
    TEST_END();
    8001f126:	00009597          	auipc	a1,0x9
    8001f12a:	c0a58593          	addi	a1,a1,-1014 # 80027d30 <__func__.0+0x2d0>
    8001f12e:	00009517          	auipc	a0,0x9
    8001f132:	caa50513          	addi	a0,a0,-854 # 80027dd8 <__func__.0+0x378>
    8001f136:	3c1060ef          	jal	80025cf6 <printf>
    8001f13a:	4511                	li	a0,4
    8001f13c:	abbe10ef          	jal	80000bf6 <goto_priv>
    8001f140:	b6ce20ef          	jal	800014ac <reset_state>
    8001f144:	60e2                	ld	ra,24(sp)
    8001f146:	6442                	ld	s0,16(sp)
    8001f148:	8526                	mv	a0,s1
    8001f14a:	64a2                	ld	s1,8(sp)
    8001f14c:	6105                	addi	sp,sp,32
    8001f14e:	8082                	ret

000000008001f150 <mstatus_csr_tests_1>:
#include <rvh_test.h>
#include <page_tables.h>

bool mstatus_csr_tests_1(){
    8001f150:	1101                	addi	sp,sp,-32

TEST_START();
    8001f152:	00008597          	auipc	a1,0x8
    8001f156:	4a658593          	addi	a1,a1,1190 # 800275f8 <__func__.9>
    8001f15a:	00009517          	auipc	a0,0x9
    8001f15e:	be650513          	addi	a0,a0,-1050 # 80027d40 <__func__.0+0x2e0>
bool mstatus_csr_tests_1(){
    8001f162:	ec06                	sd	ra,24(sp)
    8001f164:	e822                	sd	s0,16(sp)
    8001f166:	e426                	sd	s1,8(sp)
TEST_START();
    8001f168:	38f060ef          	jal	80025cf6 <printf>
    8001f16c:	4529                	li	a0,10
    8001f16e:	193050ef          	jal	80024b00 <putchar>
    printf("%d\n",x);
*/

//mstatus.SUM 阻止S对U访问，缺页异常
    
    goto_priv(PRIV_HS);
    8001f172:	450d                	li	a0,3
    8001f174:	a83e10ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001f178:	c68e10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001f17c:	ea6e10ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001f180:	d30e10ef          	jal	800006b0 <vspt_init>

    //执行load指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    8001f184:	4511                	li	a0,4
    8001f186:	a71e10ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS, MSTATUS_SUM);
    8001f18a:	000407b7          	lui	a5,0x40
    8001f18e:	3007b073          	csrc	mstatus,a5
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    TEST_SETUP_EXCEPT();
    8001f192:	0330000f          	fence	rw,rw
    8001f196:	0002a417          	auipc	s0,0x2a
    8001f19a:	e7a40413          	addi	s0,s0,-390 # 80049010 <excpt>
    8001f19e:	4785                	li	a5,1
    8001f1a0:	0002a717          	auipc	a4,0x2a
    8001f1a4:	ea073423          	sd	zero,-344(a4) # 80049048 <excpt+0x38>
    8001f1a8:	00f41023          	sh	a5,0(s0)
    8001f1ac:	0330000f          	fence	rw,rw

    goto_priv(PRIV_HS);
    8001f1b0:	450d                	li	a0,3
    8001f1b2:	a45e10ef          	jal	80000bf6 <goto_priv>
    asm volatile(
    8001f1b6:	000807b7          	lui	a5,0x80
    8001f1ba:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001f1bc:	07b6                	slli	a5,a5,0xd
    8001f1be:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    8001f1c2:	08200593          	li	a1,130
    8001f1c6:	00010617          	auipc	a2,0x10
    8001f1ca:	c1260613          	addi	a2,a2,-1006 # 8002edd8 <__func__.0+0x7378>
    8001f1ce:	00009517          	auipc	a0,0x9
    8001f1d2:	b8a50513          	addi	a0,a0,-1142 # 80027d58 <__func__.0+0x2f8>
    8001f1d6:	321060ef          	jal	80025cf6 <printf>
    8001f1da:	0002a797          	auipc	a5,0x2a
    8001f1de:	e377c783          	lbu	a5,-457(a5) # 80049011 <excpt+0x1>
    8001f1e2:	00009597          	auipc	a1,0x9
    8001f1e6:	b4e58593          	addi	a1,a1,-1202 # 80027d30 <__func__.0+0x2d0>
    8001f1ea:	cf89                	beqz	a5,8001f204 <mstatus_csr_tests_1+0xb4>
    8001f1ec:	6418                	ld	a4,8(s0)
    8001f1ee:	47b5                	li	a5,13
    8001f1f0:	00009597          	auipc	a1,0x9
    8001f1f4:	b3058593          	addi	a1,a1,-1232 # 80027d20 <__func__.0+0x2c0>
    8001f1f8:	00f70663          	beq	a4,a5,8001f204 <mstatus_csr_tests_1+0xb4>
    8001f1fc:	00009597          	auipc	a1,0x9
    8001f200:	b3458593          	addi	a1,a1,-1228 # 80027d30 <__func__.0+0x2d0>
    8001f204:	00009517          	auipc	a0,0x9
    8001f208:	b6c50513          	addi	a0,a0,-1172 # 80027d70 <__func__.0+0x310>
    8001f20c:	2eb060ef          	jal	80025cf6 <printf>
    8001f210:	0002a797          	auipc	a5,0x2a
    8001f214:	e017c783          	lbu	a5,-511(a5) # 80049011 <excpt+0x1>
    8001f218:	c789                	beqz	a5,8001f222 <mstatus_csr_tests_1+0xd2>
    8001f21a:	6418                	ld	a4,8(s0)
    8001f21c:	47b5                	li	a5,13
    8001f21e:	00f70c63          	beq	a4,a5,8001f236 <mstatus_csr_tests_1+0xe6>
    8001f222:	00009517          	auipc	a0,0x9
    8001f226:	b5650513          	addi	a0,a0,-1194 # 80027d78 <__func__.0+0x318>
    8001f22a:	2cd060ef          	jal	80025cf6 <printf>
    8001f22e:	02900513          	li	a0,41
    8001f232:	0cf050ef          	jal	80024b00 <putchar>
    8001f236:	4529                	li	a0,10
    8001f238:	0c9050ef          	jal	80024b00 <putchar>
    8001f23c:	0002a497          	auipc	s1,0x2a
    8001f240:	dd54c483          	lbu	s1,-555(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    8001f244:	00009597          	auipc	a1,0x9
    8001f248:	aec58593          	addi	a1,a1,-1300 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    8001f24c:	cc91                	beqz	s1,8001f268 <mstatus_csr_tests_1+0x118>
    8001f24e:	6418                	ld	a4,8(s0)
    8001f250:	47b5                	li	a5,13
    TEST_END();
    8001f252:	00009597          	auipc	a1,0x9
    8001f256:	ace58593          	addi	a1,a1,-1330 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    8001f25a:	00f70763          	beq	a4,a5,8001f268 <mstatus_csr_tests_1+0x118>
    8001f25e:	4481                	li	s1,0
    TEST_END();
    8001f260:	00009597          	auipc	a1,0x9
    8001f264:	ad058593          	addi	a1,a1,-1328 # 80027d30 <__func__.0+0x2d0>
    8001f268:	00009517          	auipc	a0,0x9
    8001f26c:	b7050513          	addi	a0,a0,-1168 # 80027dd8 <__func__.0+0x378>
    8001f270:	287060ef          	jal	80025cf6 <printf>
    8001f274:	4511                	li	a0,4
    8001f276:	981e10ef          	jal	80000bf6 <goto_priv>
    8001f27a:	a32e20ef          	jal	800014ac <reset_state>
}
    8001f27e:	60e2                	ld	ra,24(sp)
    8001f280:	6442                	ld	s0,16(sp)
    8001f282:	8526                	mv	a0,s1
    8001f284:	64a2                	ld	s1,8(sp)
    8001f286:	6105                	addi	sp,sp,32
    8001f288:	8082                	ret

000000008001f28a <mstatus_csr_tests_2>:

bool mstatus_csr_tests_2(){
    8001f28a:	1141                	addi	sp,sp,-16

    TEST_START();
    8001f28c:	00008597          	auipc	a1,0x8
    8001f290:	38458593          	addi	a1,a1,900 # 80027610 <__func__.7>
    8001f294:	00009517          	auipc	a0,0x9
    8001f298:	aac50513          	addi	a0,a0,-1364 # 80027d40 <__func__.0+0x2e0>
bool mstatus_csr_tests_2(){
    8001f29c:	e406                	sd	ra,8(sp)
    8001f29e:	e022                	sd	s0,0(sp)
    TEST_START();
    8001f2a0:	257060ef          	jal	80025cf6 <printf>
    8001f2a4:	4529                	li	a0,10
    8001f2a6:	05b050ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    8001f2aa:	450d                	li	a0,3
    8001f2ac:	94be10ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001f2b0:	b30e10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001f2b4:	d6ee10ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001f2b8:	bf8e10ef          	jal	800006b0 <vspt_init>

    //执行load指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    8001f2bc:	4511                	li	a0,4
    8001f2be:	939e10ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_SUM);
    8001f2c2:	000407b7          	lui	a5,0x40
    8001f2c6:	3007a073          	csrs	mstatus,a5
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    TEST_SETUP_EXCEPT();
    8001f2ca:	0330000f          	fence	rw,rw
    8001f2ce:	0002a417          	auipc	s0,0x2a
    8001f2d2:	d4240413          	addi	s0,s0,-702 # 80049010 <excpt>
    8001f2d6:	4785                	li	a5,1
    8001f2d8:	0002a717          	auipc	a4,0x2a
    8001f2dc:	d6073823          	sd	zero,-656(a4) # 80049048 <excpt+0x38>
    8001f2e0:	00f41023          	sh	a5,0(s0)
    8001f2e4:	0330000f          	fence	rw,rw

    goto_priv(PRIV_HS);
    8001f2e8:	450d                	li	a0,3
    8001f2ea:	90de10ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001f2ee:	4509                	li	a0,2
    8001f2f0:	827e10ef          	jal	80000b16 <set_prev_priv>
    8001f2f4:	000807b7          	lui	a5,0x80
    8001f2f8:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001f2fa:	07b6                	slli	a5,a5,0xd
    8001f2fc:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
        printf("%d\n",excpt.triggered);
    8001f300:	0002a597          	auipc	a1,0x2a
    8001f304:	d115c583          	lbu	a1,-751(a1) # 80049011 <excpt+0x1>
    8001f308:	00009517          	auipc	a0,0x9
    8001f30c:	58050513          	addi	a0,a0,1408 # 80028888 <__func__.0+0xe28>
    8001f310:	1e7060ef          	jal	80025cf6 <printf>
    printf("%d\n",excpt.cause);
    8001f314:	640c                	ld	a1,8(s0)
    8001f316:	00009517          	auipc	a0,0x9
    8001f31a:	57250513          	addi	a0,a0,1394 # 80028888 <__func__.0+0xe28>
    8001f31e:	1d9060ef          	jal	80025cf6 <printf>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    8001f322:	08200593          	li	a1,130
    8001f326:	00010617          	auipc	a2,0x10
    8001f32a:	aea60613          	addi	a2,a2,-1302 # 8002ee10 <__func__.0+0x73b0>
    8001f32e:	00009517          	auipc	a0,0x9
    8001f332:	a2a50513          	addi	a0,a0,-1494 # 80027d58 <__func__.0+0x2f8>
    8001f336:	1c1060ef          	jal	80025cf6 <printf>
    8001f33a:	0002a797          	auipc	a5,0x2a
    8001f33e:	cd77c783          	lbu	a5,-809(a5) # 80049011 <excpt+0x1>
    8001f342:	00009597          	auipc	a1,0x9
    8001f346:	9de58593          	addi	a1,a1,-1570 # 80027d20 <__func__.0+0x2c0>
    8001f34a:	c789                	beqz	a5,8001f354 <mstatus_csr_tests_2+0xca>
    8001f34c:	00009597          	auipc	a1,0x9
    8001f350:	9e458593          	addi	a1,a1,-1564 # 80027d30 <__func__.0+0x2d0>
    8001f354:	00009517          	auipc	a0,0x9
    8001f358:	a1c50513          	addi	a0,a0,-1508 # 80027d70 <__func__.0+0x310>
    8001f35c:	19b060ef          	jal	80025cf6 <printf>
    8001f360:	0002a797          	auipc	a5,0x2a
    8001f364:	cb17c783          	lbu	a5,-847(a5) # 80049011 <excpt+0x1>
    8001f368:	e7a1                	bnez	a5,8001f3b0 <mstatus_csr_tests_2+0x126>
    8001f36a:	4529                	li	a0,10
    8001f36c:	794050ef          	jal	80024b00 <putchar>
    8001f370:	0002a797          	auipc	a5,0x2a
    8001f374:	ca17c783          	lbu	a5,-863(a5) # 80049011 <excpt+0x1>
    8001f378:	e795                	bnez	a5,8001f3a4 <mstatus_csr_tests_2+0x11a>
    8001f37a:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001f37c:	00009597          	auipc	a1,0x9
    8001f380:	9a458593          	addi	a1,a1,-1628 # 80027d20 <__func__.0+0x2c0>
    8001f384:	00009517          	auipc	a0,0x9
    8001f388:	a5450513          	addi	a0,a0,-1452 # 80027dd8 <__func__.0+0x378>
    8001f38c:	16b060ef          	jal	80025cf6 <printf>
    8001f390:	4511                	li	a0,4
    8001f392:	865e10ef          	jal	80000bf6 <goto_priv>
    8001f396:	916e20ef          	jal	800014ac <reset_state>
}
    8001f39a:	60a2                	ld	ra,8(sp)
    8001f39c:	8522                	mv	a0,s0
    8001f39e:	6402                	ld	s0,0(sp)
    8001f3a0:	0141                	addi	sp,sp,16
    8001f3a2:	8082                	ret
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    8001f3a4:	4401                	li	s0,0
    TEST_END();
    8001f3a6:	00009597          	auipc	a1,0x9
    8001f3aa:	98a58593          	addi	a1,a1,-1654 # 80027d30 <__func__.0+0x2d0>
    8001f3ae:	bfd9                	j	8001f384 <mstatus_csr_tests_2+0xfa>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    8001f3b0:	00009517          	auipc	a0,0x9
    8001f3b4:	9c850513          	addi	a0,a0,-1592 # 80027d78 <__func__.0+0x318>
    8001f3b8:	13f060ef          	jal	80025cf6 <printf>
    8001f3bc:	02900513          	li	a0,41
    8001f3c0:	740050ef          	jal	80024b00 <putchar>
    8001f3c4:	b75d                	j	8001f36a <mstatus_csr_tests_2+0xe0>

000000008001f3c6 <mstatus_csr_tests_3>:

bool mstatus_csr_tests_3(){
    8001f3c6:	1101                	addi	sp,sp,-32

    TEST_START();
    8001f3c8:	00008597          	auipc	a1,0x8
    8001f3cc:	26058593          	addi	a1,a1,608 # 80027628 <__func__.6>
    8001f3d0:	00009517          	auipc	a0,0x9
    8001f3d4:	97050513          	addi	a0,a0,-1680 # 80027d40 <__func__.0+0x2e0>
bool mstatus_csr_tests_3(){
    8001f3d8:	ec06                	sd	ra,24(sp)
    8001f3da:	e822                	sd	s0,16(sp)
    8001f3dc:	e426                	sd	s1,8(sp)
    TEST_START();
    8001f3de:	119060ef          	jal	80025cf6 <printf>
    8001f3e2:	4529                	li	a0,10
    8001f3e4:	71c050ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    8001f3e8:	450d                	li	a0,3
    8001f3ea:	80de10ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001f3ee:	9f2e10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001f3f2:	c30e10ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001f3f6:	abae10ef          	jal	800006b0 <vspt_init>
    //执行load指令时，设置了mstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    goto_priv(PRIV_M);
    8001f3fa:	4511                	li	a0,4
    8001f3fc:	ffae10ef          	jal	80000bf6 <goto_priv>

    uintptr_t addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_MSTATUS, MSTATUS_MXR);
    8001f400:	000807b7          	lui	a5,0x80
    8001f404:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_HS);
    8001f408:	450d                	li	a0,3
    8001f40a:	fece10ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001f40e:	4509                	li	a0,2
    8001f410:	f06e10ef          	jal	80000b16 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    8001f414:	0330000f          	fence	rw,rw
    8001f418:	0002a417          	auipc	s0,0x2a
    8001f41c:	bf840413          	addi	s0,s0,-1032 # 80049010 <excpt>
    8001f420:	4785                	li	a5,1
    8001f422:	0002a717          	auipc	a4,0x2a
    8001f426:	c2073323          	sd	zero,-986(a4) # 80049048 <excpt+0x38>
    8001f42a:	00f41023          	sh	a5,0(s0)
    8001f42e:	0330000f          	fence	rw,rw
    8001f432:	001007b7          	lui	a5,0x100
    8001f436:	05f78793          	addi	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    8001f43a:	07b2                	slli	a5,a5,0xc
    8001f43c:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);   
    printf("%d\n",excpt.triggered);
    8001f440:	0002a597          	auipc	a1,0x2a
    8001f444:	bd15c583          	lbu	a1,-1071(a1) # 80049011 <excpt+0x1>
    8001f448:	00009517          	auipc	a0,0x9
    8001f44c:	44050513          	addi	a0,a0,1088 # 80028888 <__func__.0+0xe28>
    8001f450:	0a7060ef          	jal	80025cf6 <printf>
    printf("%d\n",excpt.cause);
    8001f454:	640c                	ld	a1,8(s0)
    8001f456:	00009517          	auipc	a0,0x9
    8001f45a:	43250513          	addi	a0,a0,1074 # 80028888 <__func__.0+0xe28>
    8001f45e:	099060ef          	jal	80025cf6 <printf>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    8001f462:	08200593          	li	a1,130
    8001f466:	00010617          	auipc	a2,0x10
    8001f46a:	9e260613          	addi	a2,a2,-1566 # 8002ee48 <__func__.0+0x73e8>
    8001f46e:	00009517          	auipc	a0,0x9
    8001f472:	8ea50513          	addi	a0,a0,-1814 # 80027d58 <__func__.0+0x2f8>
    8001f476:	081060ef          	jal	80025cf6 <printf>
    8001f47a:	0002a797          	auipc	a5,0x2a
    8001f47e:	b977c783          	lbu	a5,-1129(a5) # 80049011 <excpt+0x1>
    8001f482:	00009597          	auipc	a1,0x9
    8001f486:	8ae58593          	addi	a1,a1,-1874 # 80027d30 <__func__.0+0x2d0>
    8001f48a:	cf89                	beqz	a5,8001f4a4 <mstatus_csr_tests_3+0xde>
    8001f48c:	6418                	ld	a4,8(s0)
    8001f48e:	47b5                	li	a5,13
    8001f490:	00009597          	auipc	a1,0x9
    8001f494:	89058593          	addi	a1,a1,-1904 # 80027d20 <__func__.0+0x2c0>
    8001f498:	00f70663          	beq	a4,a5,8001f4a4 <mstatus_csr_tests_3+0xde>
    8001f49c:	00009597          	auipc	a1,0x9
    8001f4a0:	89458593          	addi	a1,a1,-1900 # 80027d30 <__func__.0+0x2d0>
    8001f4a4:	00009517          	auipc	a0,0x9
    8001f4a8:	8cc50513          	addi	a0,a0,-1844 # 80027d70 <__func__.0+0x310>
    8001f4ac:	04b060ef          	jal	80025cf6 <printf>
    8001f4b0:	0002a797          	auipc	a5,0x2a
    8001f4b4:	b617c783          	lbu	a5,-1183(a5) # 80049011 <excpt+0x1>
    8001f4b8:	c789                	beqz	a5,8001f4c2 <mstatus_csr_tests_3+0xfc>
    8001f4ba:	6418                	ld	a4,8(s0)
    8001f4bc:	47b5                	li	a5,13
    8001f4be:	00f70c63          	beq	a4,a5,8001f4d6 <mstatus_csr_tests_3+0x110>
    8001f4c2:	00009517          	auipc	a0,0x9
    8001f4c6:	8b650513          	addi	a0,a0,-1866 # 80027d78 <__func__.0+0x318>
    8001f4ca:	02d060ef          	jal	80025cf6 <printf>
    8001f4ce:	02900513          	li	a0,41
    8001f4d2:	62e050ef          	jal	80024b00 <putchar>
    8001f4d6:	4529                	li	a0,10
    8001f4d8:	628050ef          	jal	80024b00 <putchar>
    8001f4dc:	0002a497          	auipc	s1,0x2a
    8001f4e0:	b354c483          	lbu	s1,-1227(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );


    TEST_END();
    8001f4e4:	00009597          	auipc	a1,0x9
    8001f4e8:	84c58593          	addi	a1,a1,-1972 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    8001f4ec:	cc91                	beqz	s1,8001f508 <mstatus_csr_tests_3+0x142>
    8001f4ee:	6418                	ld	a4,8(s0)
    8001f4f0:	47b5                	li	a5,13
    TEST_END();
    8001f4f2:	00009597          	auipc	a1,0x9
    8001f4f6:	82e58593          	addi	a1,a1,-2002 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    8001f4fa:	00f70763          	beq	a4,a5,8001f508 <mstatus_csr_tests_3+0x142>
    8001f4fe:	4481                	li	s1,0
    TEST_END();
    8001f500:	00009597          	auipc	a1,0x9
    8001f504:	83058593          	addi	a1,a1,-2000 # 80027d30 <__func__.0+0x2d0>
    8001f508:	00009517          	auipc	a0,0x9
    8001f50c:	8d050513          	addi	a0,a0,-1840 # 80027dd8 <__func__.0+0x378>
    8001f510:	7e6060ef          	jal	80025cf6 <printf>
    8001f514:	4511                	li	a0,4
    8001f516:	ee0e10ef          	jal	80000bf6 <goto_priv>
    8001f51a:	f93e10ef          	jal	800014ac <reset_state>
}
    8001f51e:	60e2                	ld	ra,24(sp)
    8001f520:	6442                	ld	s0,16(sp)
    8001f522:	8526                	mv	a0,s1
    8001f524:	64a2                	ld	s1,8(sp)
    8001f526:	6105                	addi	sp,sp,32
    8001f528:	8082                	ret

000000008001f52a <mstatus_csr_tests_4>:

bool mstatus_csr_tests_4(){
    8001f52a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001f52c:	00008597          	auipc	a1,0x8
    8001f530:	11458593          	addi	a1,a1,276 # 80027640 <__func__.5>
    8001f534:	00009517          	auipc	a0,0x9
    8001f538:	80c50513          	addi	a0,a0,-2036 # 80027d40 <__func__.0+0x2e0>
bool mstatus_csr_tests_4(){
    8001f53c:	ec06                	sd	ra,24(sp)
    8001f53e:	e822                	sd	s0,16(sp)
    8001f540:	e426                	sd	s1,8(sp)
    TEST_START();
    8001f542:	7b4060ef          	jal	80025cf6 <printf>
    8001f546:	4529                	li	a0,10
    8001f548:	5b8050ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_HS);
    8001f54c:	450d                	li	a0,3
    8001f54e:	ea8e10ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001f552:	88ee10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001f556:	acce10ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001f55a:	956e10ef          	jal	800006b0 <vspt_init>
    //执行load指令时，设置了mstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    uintptr_t addr = hs_page_base(VSV_GV);

    goto_priv(PRIV_M);
    8001f55e:	4511                	li	a0,4
    8001f560:	e96e10ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_MXR);
    8001f564:	000807b7          	lui	a5,0x80
    8001f568:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    8001f56c:	450d                	li	a0,3
    8001f56e:	e88e10ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001f572:	4509                	li	a0,2
    8001f574:	da2e10ef          	jal	80000b16 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    8001f578:	0330000f          	fence	rw,rw
    8001f57c:	0002a497          	auipc	s1,0x2a
    8001f580:	a9448493          	addi	s1,s1,-1388 # 80049010 <excpt>
    8001f584:	4785                	li	a5,1
    8001f586:	0002a717          	auipc	a4,0x2a
    8001f58a:	ac073123          	sd	zero,-1342(a4) # 80049048 <excpt+0x38>
    8001f58e:	00f49023          	sh	a5,0(s1)
    8001f592:	0330000f          	fence	rw,rw
    8001f596:	001007b7          	lui	a5,0x100
    8001f59a:	07f5                	addi	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    8001f59c:	07b2                	slli	a5,a5,0xc
    8001f59e:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("s mode load when mstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001f5a2:	08200593          	li	a1,130
    8001f5a6:	00010617          	auipc	a2,0x10
    8001f5aa:	8da60613          	addi	a2,a2,-1830 # 8002ee80 <__func__.0+0x7420>
    8001f5ae:	00008517          	auipc	a0,0x8
    8001f5b2:	7aa50513          	addi	a0,a0,1962 # 80027d58 <__func__.0+0x2f8>
    8001f5b6:	740060ef          	jal	80025cf6 <printf>
    8001f5ba:	0002a797          	auipc	a5,0x2a
    8001f5be:	a577c783          	lbu	a5,-1449(a5) # 80049011 <excpt+0x1>
    8001f5c2:	00008597          	auipc	a1,0x8
    8001f5c6:	76e58593          	addi	a1,a1,1902 # 80027d30 <__func__.0+0x2d0>
    8001f5ca:	cf89                	beqz	a5,8001f5e4 <mstatus_csr_tests_4+0xba>
    8001f5cc:	6498                	ld	a4,8(s1)
    8001f5ce:	47b5                	li	a5,13
    8001f5d0:	00008597          	auipc	a1,0x8
    8001f5d4:	75058593          	addi	a1,a1,1872 # 80027d20 <__func__.0+0x2c0>
    8001f5d8:	00f70663          	beq	a4,a5,8001f5e4 <mstatus_csr_tests_4+0xba>
    8001f5dc:	00008597          	auipc	a1,0x8
    8001f5e0:	75458593          	addi	a1,a1,1876 # 80027d30 <__func__.0+0x2d0>
    8001f5e4:	00008517          	auipc	a0,0x8
    8001f5e8:	78c50513          	addi	a0,a0,1932 # 80027d70 <__func__.0+0x310>
    8001f5ec:	70a060ef          	jal	80025cf6 <printf>
    8001f5f0:	0002a797          	auipc	a5,0x2a
    8001f5f4:	a217c783          	lbu	a5,-1503(a5) # 80049011 <excpt+0x1>
    8001f5f8:	c789                	beqz	a5,8001f602 <mstatus_csr_tests_4+0xd8>
    8001f5fa:	6498                	ld	a4,8(s1)
    8001f5fc:	47b5                	li	a5,13
    8001f5fe:	00f70c63          	beq	a4,a5,8001f616 <mstatus_csr_tests_4+0xec>
    8001f602:	00008517          	auipc	a0,0x8
    8001f606:	77650513          	addi	a0,a0,1910 # 80027d78 <__func__.0+0x318>
    8001f60a:	6ec060ef          	jal	80025cf6 <printf>
    8001f60e:	02900513          	li	a0,41
    8001f612:	4ee050ef          	jal	80024b00 <putchar>
    8001f616:	4529                	li	a0,10
    8001f618:	4e8050ef          	jal	80024b00 <putchar>
    8001f61c:	0002a417          	auipc	s0,0x2a
    8001f620:	9f544403          	lbu	s0,-1547(s0) # 80049011 <excpt+0x1>
    8001f624:	c409                	beqz	s0,8001f62e <mstatus_csr_tests_4+0x104>
    8001f626:	6498                	ld	a4,8(s1)
    8001f628:	47b5                	li	a5,13
    8001f62a:	02f70c63          	beq	a4,a5,8001f662 <mstatus_csr_tests_4+0x138>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001f62e:	000807b7          	lui	a5,0x80
    8001f632:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("s mode load when mstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001f636:	4401                	li	s0,0


TEST_END();
    8001f638:	00008597          	auipc	a1,0x8
    8001f63c:	6f858593          	addi	a1,a1,1784 # 80027d30 <__func__.0+0x2d0>
    8001f640:	00008517          	auipc	a0,0x8
    8001f644:	79850513          	addi	a0,a0,1944 # 80027dd8 <__func__.0+0x378>
    8001f648:	6ae060ef          	jal	80025cf6 <printf>
    8001f64c:	4511                	li	a0,4
    8001f64e:	da8e10ef          	jal	80000bf6 <goto_priv>
    8001f652:	e5be10ef          	jal	800014ac <reset_state>

}
    8001f656:	60e2                	ld	ra,24(sp)
    8001f658:	8522                	mv	a0,s0
    8001f65a:	6442                	ld	s0,16(sp)
    8001f65c:	64a2                	ld	s1,8(sp)
    8001f65e:	6105                	addi	sp,sp,32
    8001f660:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001f662:	000807b7          	lui	a5,0x80
    8001f666:	1007b073          	csrc	sstatus,a5
TEST_END();
    8001f66a:	00008597          	auipc	a1,0x8
    8001f66e:	6b658593          	addi	a1,a1,1718 # 80027d20 <__func__.0+0x2c0>
    8001f672:	b7f9                	j	8001f640 <mstatus_csr_tests_4+0x116>

000000008001f674 <mstatus_csr_tests_5>:

bool mstatus_csr_tests_5(){
    8001f674:	1101                	addi	sp,sp,-32

    TEST_START();
    8001f676:	00008597          	auipc	a1,0x8
    8001f67a:	fe258593          	addi	a1,a1,-30 # 80027658 <__func__.4>
    8001f67e:	00008517          	auipc	a0,0x8
    8001f682:	6c250513          	addi	a0,a0,1730 # 80027d40 <__func__.0+0x2e0>
bool mstatus_csr_tests_5(){
    8001f686:	ec06                	sd	ra,24(sp)
    8001f688:	e822                	sd	s0,16(sp)
    8001f68a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001f68c:	66a060ef          	jal	80025cf6 <printf>
    8001f690:	4529                	li	a0,10
    8001f692:	46e050ef          	jal	80024b00 <putchar>
    //mstatus.TSR=1时，执行sret指令
    TEST_SETUP_EXCEPT();
    8001f696:	0330000f          	fence	rw,rw
    8001f69a:	0002a417          	auipc	s0,0x2a
    8001f69e:	97640413          	addi	s0,s0,-1674 # 80049010 <excpt>
    8001f6a2:	4785                	li	a5,1
    8001f6a4:	0002a717          	auipc	a4,0x2a
    8001f6a8:	9a073223          	sd	zero,-1628(a4) # 80049048 <excpt+0x38>
    8001f6ac:	00f41023          	sh	a5,0(s0)
    8001f6b0:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001f6b4:	4511                	li	a0,4
    8001f6b6:	d40e10ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 22);    //TSR位
    8001f6ba:	004007b7          	lui	a5,0x400
    8001f6be:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    8001f6c2:	450d                	li	a0,3
    8001f6c4:	d32e10ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VU);
    8001f6c8:	4501                	li	a0,0
    8001f6ca:	c4ce10ef          	jal	80000b16 <set_prev_priv>

    TEST_EXEC_SRET();
    8001f6ce:	00000297          	auipc	t0,0x0
    8001f6d2:	01028293          	addi	t0,t0,16 # 8001f6de <mstatus_csr_tests_5+0x6a>
    8001f6d6:	14129073          	csrw	sepc,t0
    8001f6da:	10200073          	sret

    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001f6de:	08200593          	li	a1,130
    8001f6e2:	0000c617          	auipc	a2,0xc
    8001f6e6:	e4660613          	addi	a2,a2,-442 # 8002b528 <__func__.0+0x3ac8>
    8001f6ea:	00008517          	auipc	a0,0x8
    8001f6ee:	66e50513          	addi	a0,a0,1646 # 80027d58 <__func__.0+0x2f8>
    8001f6f2:	604060ef          	jal	80025cf6 <printf>
    8001f6f6:	0002a797          	auipc	a5,0x2a
    8001f6fa:	91b7c783          	lbu	a5,-1765(a5) # 80049011 <excpt+0x1>
    8001f6fe:	00008597          	auipc	a1,0x8
    8001f702:	63258593          	addi	a1,a1,1586 # 80027d30 <__func__.0+0x2d0>
    8001f706:	cf89                	beqz	a5,8001f720 <mstatus_csr_tests_5+0xac>
    8001f708:	6418                	ld	a4,8(s0)
    8001f70a:	4789                	li	a5,2
    8001f70c:	00008597          	auipc	a1,0x8
    8001f710:	61458593          	addi	a1,a1,1556 # 80027d20 <__func__.0+0x2c0>
    8001f714:	00f70663          	beq	a4,a5,8001f720 <mstatus_csr_tests_5+0xac>
    8001f718:	00008597          	auipc	a1,0x8
    8001f71c:	61858593          	addi	a1,a1,1560 # 80027d30 <__func__.0+0x2d0>
    8001f720:	00008517          	auipc	a0,0x8
    8001f724:	65050513          	addi	a0,a0,1616 # 80027d70 <__func__.0+0x310>
    8001f728:	5ce060ef          	jal	80025cf6 <printf>
    8001f72c:	0002a797          	auipc	a5,0x2a
    8001f730:	8e57c783          	lbu	a5,-1819(a5) # 80049011 <excpt+0x1>
    8001f734:	c789                	beqz	a5,8001f73e <mstatus_csr_tests_5+0xca>
    8001f736:	6418                	ld	a4,8(s0)
    8001f738:	4789                	li	a5,2
    8001f73a:	00f70c63          	beq	a4,a5,8001f752 <mstatus_csr_tests_5+0xde>
    8001f73e:	00008517          	auipc	a0,0x8
    8001f742:	63a50513          	addi	a0,a0,1594 # 80027d78 <__func__.0+0x318>
    8001f746:	5b0060ef          	jal	80025cf6 <printf>
    8001f74a:	02900513          	li	a0,41
    8001f74e:	3b2050ef          	jal	80024b00 <putchar>
    8001f752:	4529                	li	a0,10
    8001f754:	3ac050ef          	jal	80024b00 <putchar>
    8001f758:	0002a497          	auipc	s1,0x2a
    8001f75c:	8b94c483          	lbu	s1,-1863(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8001f760:	00008597          	auipc	a1,0x8
    8001f764:	5d058593          	addi	a1,a1,1488 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001f768:	cc91                	beqz	s1,8001f784 <mstatus_csr_tests_5+0x110>
    8001f76a:	6418                	ld	a4,8(s0)
    8001f76c:	4789                	li	a5,2
    TEST_END();
    8001f76e:	00008597          	auipc	a1,0x8
    8001f772:	5b258593          	addi	a1,a1,1458 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001f776:	00f70763          	beq	a4,a5,8001f784 <mstatus_csr_tests_5+0x110>
    8001f77a:	4481                	li	s1,0
    TEST_END();
    8001f77c:	00008597          	auipc	a1,0x8
    8001f780:	5b458593          	addi	a1,a1,1460 # 80027d30 <__func__.0+0x2d0>
    8001f784:	00008517          	auipc	a0,0x8
    8001f788:	65450513          	addi	a0,a0,1620 # 80027dd8 <__func__.0+0x378>
    8001f78c:	56a060ef          	jal	80025cf6 <printf>
    8001f790:	4511                	li	a0,4
    8001f792:	c64e10ef          	jal	80000bf6 <goto_priv>
    8001f796:	d17e10ef          	jal	800014ac <reset_state>

}
    8001f79a:	60e2                	ld	ra,24(sp)
    8001f79c:	6442                	ld	s0,16(sp)
    8001f79e:	8526                	mv	a0,s1
    8001f7a0:	64a2                	ld	s1,8(sp)
    8001f7a2:	6105                	addi	sp,sp,32
    8001f7a4:	8082                	ret

000000008001f7a6 <hedeleg_csr_tests_1>:

bool hedeleg_csr_tests_1(){
    8001f7a6:	1141                	addi	sp,sp,-16

    TEST_START();
    8001f7a8:	00008597          	auipc	a1,0x8
    8001f7ac:	ec858593          	addi	a1,a1,-312 # 80027670 <__func__.3>
    8001f7b0:	00008517          	auipc	a0,0x8
    8001f7b4:	59050513          	addi	a0,a0,1424 # 80027d40 <__func__.0+0x2e0>
bool hedeleg_csr_tests_1(){
    8001f7b8:	e406                	sd	ra,8(sp)
    8001f7ba:	e022                	sd	s0,0(sp)
    TEST_START();
    8001f7bc:	53a060ef          	jal	80025cf6 <printf>
    8001f7c0:	4529                	li	a0,10
    8001f7c2:	33e050ef          	jal	80024b00 <putchar>
    TEST_SETUP_EXCEPT();
    8001f7c6:	0330000f          	fence	rw,rw
    8001f7ca:	4785                	li	a5,1
    8001f7cc:	0002a717          	auipc	a4,0x2a
    8001f7d0:	86073e23          	sd	zero,-1924(a4) # 80049048 <excpt+0x38>
    8001f7d4:	0002a717          	auipc	a4,0x2a
    8001f7d8:	82f71e23          	sh	a5,-1988(a4) # 80049010 <excpt>
    8001f7dc:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001f7e0:	4511                	li	a0,4
    8001f7e2:	c14e10ef          	jal	80000bf6 <goto_priv>
    CSRW(CSR_HEDELEG, (uint64_t)-1);
    8001f7e6:	57fd                	li	a5,-1
    8001f7e8:	60279073          	csrw	hedeleg,a5
    printf("%llx\n",CSRR(CSR_HEDELEG));
    8001f7ec:	602025f3          	csrr	a1,hedeleg
    8001f7f0:	0000f517          	auipc	a0,0xf
    8001f7f4:	b8850513          	addi	a0,a0,-1144 # 8002e378 <__func__.0+0x6918>
    8001f7f8:	4fe060ef          	jal	80025cf6 <printf>

    TEST_ASSERT("hedeleg right",
    8001f7fc:	0000f617          	auipc	a2,0xf
    8001f800:	6cc60613          	addi	a2,a2,1740 # 8002eec8 <__func__.0+0x7468>
    8001f804:	08200593          	li	a1,130
    8001f808:	00008517          	auipc	a0,0x8
    8001f80c:	55050513          	addi	a0,a0,1360 # 80027d58 <__func__.0+0x2f8>
    8001f810:	4e6060ef          	jal	80025cf6 <printf>
    8001f814:	60202773          	csrr	a4,hedeleg
    8001f818:	67ad                	lui	a5,0xb
    8001f81a:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001f81e:	00008597          	auipc	a1,0x8
    8001f822:	50258593          	addi	a1,a1,1282 # 80027d20 <__func__.0+0x2c0>
    8001f826:	00f70663          	beq	a4,a5,8001f832 <hedeleg_csr_tests_1+0x8c>
    8001f82a:	00008597          	auipc	a1,0x8
    8001f82e:	50658593          	addi	a1,a1,1286 # 80027d30 <__func__.0+0x2d0>
    8001f832:	00008517          	auipc	a0,0x8
    8001f836:	53e50513          	addi	a0,a0,1342 # 80027d70 <__func__.0+0x310>
    8001f83a:	4bc060ef          	jal	80025cf6 <printf>
    8001f83e:	60202773          	csrr	a4,hedeleg
    8001f842:	67ad                	lui	a5,0xb
    8001f844:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001f848:	00f70c63          	beq	a4,a5,8001f860 <hedeleg_csr_tests_1+0xba>
    8001f84c:	00008517          	auipc	a0,0x8
    8001f850:	52c50513          	addi	a0,a0,1324 # 80027d78 <__func__.0+0x318>
    8001f854:	4a2060ef          	jal	80025cf6 <printf>
    8001f858:	02900513          	li	a0,41
    8001f85c:	2a4050ef          	jal	80024b00 <putchar>
    8001f860:	4529                	li	a0,10
    8001f862:	29e050ef          	jal	80024b00 <putchar>
    8001f866:	60202773          	csrr	a4,hedeleg
    8001f86a:	67ad                	lui	a5,0xb
    8001f86c:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001f870:	02f70763          	beq	a4,a5,8001f89e <hedeleg_csr_tests_1+0xf8>
    8001f874:	4401                	li	s0,0
        CSRR(CSR_HEDELEG) == 0xb1ff
    ); 

    TEST_END();
    8001f876:	00008597          	auipc	a1,0x8
    8001f87a:	4ba58593          	addi	a1,a1,1210 # 80027d30 <__func__.0+0x2d0>
    8001f87e:	00008517          	auipc	a0,0x8
    8001f882:	55a50513          	addi	a0,a0,1370 # 80027dd8 <__func__.0+0x378>
    8001f886:	470060ef          	jal	80025cf6 <printf>
    8001f88a:	4511                	li	a0,4
    8001f88c:	b6ae10ef          	jal	80000bf6 <goto_priv>
    8001f890:	c1de10ef          	jal	800014ac <reset_state>

}
    8001f894:	60a2                	ld	ra,8(sp)
    8001f896:	8522                	mv	a0,s0
    8001f898:	6402                	ld	s0,0(sp)
    8001f89a:	0141                	addi	sp,sp,16
    8001f89c:	8082                	ret
    TEST_ASSERT("hedeleg right",
    8001f89e:	4405                	li	s0,1
    TEST_END();
    8001f8a0:	00008597          	auipc	a1,0x8
    8001f8a4:	48058593          	addi	a1,a1,1152 # 80027d20 <__func__.0+0x2c0>
    8001f8a8:	bfd9                	j	8001f87e <hedeleg_csr_tests_1+0xd8>

000000008001f8aa <mhpmevent_csr_tests_1>:

bool mhpmevent_csr_tests_1(){
    8001f8aa:	1141                	addi	sp,sp,-16

    TEST_START();
    8001f8ac:	00008597          	auipc	a1,0x8
    8001f8b0:	ddc58593          	addi	a1,a1,-548 # 80027688 <__func__.2>
    8001f8b4:	00008517          	auipc	a0,0x8
    8001f8b8:	48c50513          	addi	a0,a0,1164 # 80027d40 <__func__.0+0x2e0>
bool mhpmevent_csr_tests_1(){
    8001f8bc:	e406                	sd	ra,8(sp)
    8001f8be:	e022                	sd	s0,0(sp)
    TEST_START();
    8001f8c0:	436060ef          	jal	80025cf6 <printf>
    8001f8c4:	4529                	li	a0,10
    8001f8c6:	23a050ef          	jal	80024b00 <putchar>
    TEST_SETUP_EXCEPT();
    8001f8ca:	0330000f          	fence	rw,rw
    8001f8ce:	00029797          	auipc	a5,0x29
    8001f8d2:	74278793          	addi	a5,a5,1858 # 80049010 <excpt>
    8001f8d6:	4405                	li	s0,1
    8001f8d8:	0207bc23          	sd	zero,56(a5)
    8001f8dc:	00879023          	sh	s0,0(a5)
    8001f8e0:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001f8e4:	4511                	li	a0,4
    8001f8e6:	b10e10ef          	jal	80000bf6 <goto_priv>
    CSRW(CSR_MHPMEVENT3, (uint64_t)-1);
    8001f8ea:	57fd                	li	a5,-1
    8001f8ec:	32379073          	csrw	mhpmevent3,a5
    printf("%llx\n",CSRR(CSR_MHPMEVENT3));
    8001f8f0:	323025f3          	csrr	a1,mhpmevent3
    8001f8f4:	0000f517          	auipc	a0,0xf
    8001f8f8:	a8450513          	addi	a0,a0,-1404 # 8002e378 <__func__.0+0x6918>
    8001f8fc:	3fa060ef          	jal	80025cf6 <printf>

    TEST_END();
    8001f900:	00008597          	auipc	a1,0x8
    8001f904:	42058593          	addi	a1,a1,1056 # 80027d20 <__func__.0+0x2c0>
    8001f908:	00008517          	auipc	a0,0x8
    8001f90c:	4d050513          	addi	a0,a0,1232 # 80027dd8 <__func__.0+0x378>
    8001f910:	3e6060ef          	jal	80025cf6 <printf>
    8001f914:	4511                	li	a0,4
    8001f916:	ae0e10ef          	jal	80000bf6 <goto_priv>
    8001f91a:	b93e10ef          	jal	800014ac <reset_state>

}
    8001f91e:	60a2                	ld	ra,8(sp)
    8001f920:	8522                	mv	a0,s0
    8001f922:	6402                	ld	s0,0(sp)
    8001f924:	0141                	addi	sp,sp,16
    8001f926:	8082                	ret

000000008001f928 <tselect_csr_tests_1>:

bool tselect_csr_tests_1(){
    8001f928:	1141                	addi	sp,sp,-16

    TEST_START();
    8001f92a:	00008597          	auipc	a1,0x8
    8001f92e:	d7658593          	addi	a1,a1,-650 # 800276a0 <__func__.1>
    8001f932:	00008517          	auipc	a0,0x8
    8001f936:	40e50513          	addi	a0,a0,1038 # 80027d40 <__func__.0+0x2e0>
bool tselect_csr_tests_1(){
    8001f93a:	e406                	sd	ra,8(sp)
    8001f93c:	e022                	sd	s0,0(sp)
    TEST_START();
    8001f93e:	3b8060ef          	jal	80025cf6 <printf>
    8001f942:	4529                	li	a0,10
    8001f944:	1bc050ef          	jal	80024b00 <putchar>
    TEST_SETUP_EXCEPT();
    8001f948:	0330000f          	fence	rw,rw
    8001f94c:	4785                	li	a5,1
    8001f94e:	00029717          	auipc	a4,0x29
    8001f952:	6e073d23          	sd	zero,1786(a4) # 80049048 <excpt+0x38>
    8001f956:	00029717          	auipc	a4,0x29
    8001f95a:	6af71d23          	sh	a5,1722(a4) # 80049010 <excpt>
    8001f95e:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001f962:	4511                	li	a0,4
    8001f964:	a92e10ef          	jal	80000bf6 <goto_priv>
    CSRW(CSR_TSELECT, (uint64_t)-1);
    8001f968:	57fd                	li	a5,-1
    8001f96a:	7a079073          	csrw	tselect,a5
    printf("%llx\n",CSRR(CSR_TSELECT));
    8001f96e:	7a0025f3          	csrr	a1,tselect
    8001f972:	0000f517          	auipc	a0,0xf
    8001f976:	a0650513          	addi	a0,a0,-1530 # 8002e378 <__func__.0+0x6918>
    8001f97a:	37c060ef          	jal	80025cf6 <printf>

    TEST_ASSERT("tselect right",
    8001f97e:	0000f617          	auipc	a2,0xf
    8001f982:	55a60613          	addi	a2,a2,1370 # 8002eed8 <__func__.0+0x7478>
    8001f986:	08200593          	li	a1,130
    8001f98a:	00008517          	auipc	a0,0x8
    8001f98e:	3ce50513          	addi	a0,a0,974 # 80027d58 <__func__.0+0x2f8>
    8001f992:	364060ef          	jal	80025cf6 <printf>
    8001f996:	60202773          	csrr	a4,hedeleg
    8001f99a:	67ad                	lui	a5,0xb
    8001f99c:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001f9a0:	00008597          	auipc	a1,0x8
    8001f9a4:	38058593          	addi	a1,a1,896 # 80027d20 <__func__.0+0x2c0>
    8001f9a8:	00f70663          	beq	a4,a5,8001f9b4 <tselect_csr_tests_1+0x8c>
    8001f9ac:	00008597          	auipc	a1,0x8
    8001f9b0:	38458593          	addi	a1,a1,900 # 80027d30 <__func__.0+0x2d0>
    8001f9b4:	00008517          	auipc	a0,0x8
    8001f9b8:	3bc50513          	addi	a0,a0,956 # 80027d70 <__func__.0+0x310>
    8001f9bc:	33a060ef          	jal	80025cf6 <printf>
    8001f9c0:	60202773          	csrr	a4,hedeleg
    8001f9c4:	67ad                	lui	a5,0xb
    8001f9c6:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001f9ca:	00f70c63          	beq	a4,a5,8001f9e2 <tselect_csr_tests_1+0xba>
    8001f9ce:	00008517          	auipc	a0,0x8
    8001f9d2:	3aa50513          	addi	a0,a0,938 # 80027d78 <__func__.0+0x318>
    8001f9d6:	320060ef          	jal	80025cf6 <printf>
    8001f9da:	02900513          	li	a0,41
    8001f9de:	122050ef          	jal	80024b00 <putchar>
    8001f9e2:	4529                	li	a0,10
    8001f9e4:	11c050ef          	jal	80024b00 <putchar>
    8001f9e8:	60202773          	csrr	a4,hedeleg
    8001f9ec:	67ad                	lui	a5,0xb
    8001f9ee:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001f9f2:	02f70763          	beq	a4,a5,8001fa20 <tselect_csr_tests_1+0xf8>
    8001f9f6:	4401                	li	s0,0
        CSRR(CSR_HEDELEG) == 0xb1ff
    ); 

    TEST_END();
    8001f9f8:	00008597          	auipc	a1,0x8
    8001f9fc:	33858593          	addi	a1,a1,824 # 80027d30 <__func__.0+0x2d0>
    8001fa00:	00008517          	auipc	a0,0x8
    8001fa04:	3d850513          	addi	a0,a0,984 # 80027dd8 <__func__.0+0x378>
    8001fa08:	2ee060ef          	jal	80025cf6 <printf>
    8001fa0c:	4511                	li	a0,4
    8001fa0e:	9e8e10ef          	jal	80000bf6 <goto_priv>
    8001fa12:	a9be10ef          	jal	800014ac <reset_state>

}
    8001fa16:	60a2                	ld	ra,8(sp)
    8001fa18:	8522                	mv	a0,s0
    8001fa1a:	6402                	ld	s0,0(sp)
    8001fa1c:	0141                	addi	sp,sp,16
    8001fa1e:	8082                	ret
    TEST_ASSERT("tselect right",
    8001fa20:	4405                	li	s0,1
    TEST_END();
    8001fa22:	00008597          	auipc	a1,0x8
    8001fa26:	2fe58593          	addi	a1,a1,766 # 80027d20 <__func__.0+0x2c0>
    8001fa2a:	bfd9                	j	8001fa00 <tselect_csr_tests_1+0xd8>

000000008001fa2c <random_instruction_tests>:


bool random_instruction_tests(){
    8001fa2c:	1141                	addi	sp,sp,-16

    TEST_START();
    8001fa2e:	00008597          	auipc	a1,0x8
    8001fa32:	c8a58593          	addi	a1,a1,-886 # 800276b8 <__func__.0>
    8001fa36:	00008517          	auipc	a0,0x8
    8001fa3a:	30a50513          	addi	a0,a0,778 # 80027d40 <__func__.0+0x2e0>
bool random_instruction_tests(){
    8001fa3e:	e406                	sd	ra,8(sp)
    8001fa40:	e022                	sd	s0,0(sp)
    TEST_START();
    8001fa42:	2b4060ef          	jal	80025cf6 <printf>
    8001fa46:	4529                	li	a0,10
    8001fa48:	0b8050ef          	jal	80024b00 <putchar>
    TEST_SETUP_EXCEPT();
    8001fa4c:	0330000f          	fence	rw,rw
    8001fa50:	00029797          	auipc	a5,0x29
    8001fa54:	5c078793          	addi	a5,a5,1472 # 80049010 <excpt>
    8001fa58:	4405                	li	s0,1
    8001fa5a:	0207bc23          	sd	zero,56(a5)
    8001fa5e:	00879023          	sh	s0,0(a5)
    8001fa62:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001fa66:	4511                	li	a0,4
    8001fa68:	98ee10ef          	jal	80000bf6 <goto_priv>

    for (int i = 0; i < 5; i++)
    {
        random_m_instruction();
    8001fa6c:	b27e10ef          	jal	80001592 <random_m_instruction>
    8001fa70:	b23e10ef          	jal	80001592 <random_m_instruction>
    8001fa74:	b1fe10ef          	jal	80001592 <random_m_instruction>
    8001fa78:	b1be10ef          	jal	80001592 <random_m_instruction>
    8001fa7c:	b17e10ef          	jal	80001592 <random_m_instruction>
    }
    

    TEST_END();
    8001fa80:	00008597          	auipc	a1,0x8
    8001fa84:	2a058593          	addi	a1,a1,672 # 80027d20 <__func__.0+0x2c0>
    8001fa88:	00008517          	auipc	a0,0x8
    8001fa8c:	35050513          	addi	a0,a0,848 # 80027dd8 <__func__.0+0x378>
    8001fa90:	266060ef          	jal	80025cf6 <printf>
    8001fa94:	4511                	li	a0,4
    8001fa96:	960e10ef          	jal	80000bf6 <goto_priv>
    8001fa9a:	a13e10ef          	jal	800014ac <reset_state>

    8001fa9e:	60a2                	ld	ra,8(sp)
    8001faa0:	8522                	mv	a0,s0
    8001faa2:	6402                	ld	s0,0(sp)
    8001faa4:	0141                	addi	sp,sp,16
    8001faa6:	8082                	ret

000000008001faa8 <time_test_1>:
#include <rvh_test.h>
#include <csrs.h> 

bool time_test_1() {
    8001faa8:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001faaa:	00008597          	auipc	a1,0x8
    8001faae:	c2e58593          	addi	a1,a1,-978 # 800276d8 <__func__.50>
    8001fab2:	00008517          	auipc	a0,0x8
    8001fab6:	28e50513          	addi	a0,a0,654 # 80027d40 <__func__.0+0x2e0>
bool time_test_1() {
    8001faba:	ec06                	sd	ra,24(sp)
    8001fabc:	e822                	sd	s0,16(sp)
    8001fabe:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001fac0:	236060ef          	jal	80025cf6 <printf>
    8001fac4:	4529                	li	a0,10
    8001fac6:	03a050ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    8001faca:	4511                	li	a0,4
    8001facc:	92ae10ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM);
    8001fad0:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_VS);
    8001fad4:	4509                	li	a0,2
    8001fad6:	920e10ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fada:	0330000f          	fence	rw,rw
    8001fade:	00029417          	auipc	s0,0x29
    8001fae2:	53240413          	addi	s0,s0,1330 # 80049010 <excpt>
    8001fae6:	4785                	li	a5,1
    8001fae8:	00029717          	auipc	a4,0x29
    8001faec:	56073023          	sd	zero,1376(a4) # 80049048 <excpt+0x38>
    8001faf0:	00f41023          	sh	a5,0(s0)
    8001faf4:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001faf8:	c01027f3          	rdtime	a5

    TEST_ASSERT("vs access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001fafc:	08200593          	li	a1,130
    8001fb00:	0000f617          	auipc	a2,0xf
    8001fb04:	3e860613          	addi	a2,a2,1000 # 8002eee8 <__func__.0+0x7488>
    8001fb08:	00008517          	auipc	a0,0x8
    8001fb0c:	25050513          	addi	a0,a0,592 # 80027d58 <__func__.0+0x2f8>
    8001fb10:	1e6060ef          	jal	80025cf6 <printf>
    8001fb14:	00029797          	auipc	a5,0x29
    8001fb18:	4fd7c783          	lbu	a5,1277(a5) # 80049011 <excpt+0x1>
    8001fb1c:	00008597          	auipc	a1,0x8
    8001fb20:	21458593          	addi	a1,a1,532 # 80027d30 <__func__.0+0x2d0>
    8001fb24:	cf89                	beqz	a5,8001fb3e <time_test_1+0x96>
    8001fb26:	6418                	ld	a4,8(s0)
    8001fb28:	4789                	li	a5,2
    8001fb2a:	00008597          	auipc	a1,0x8
    8001fb2e:	1f658593          	addi	a1,a1,502 # 80027d20 <__func__.0+0x2c0>
    8001fb32:	00f70663          	beq	a4,a5,8001fb3e <time_test_1+0x96>
    8001fb36:	00008597          	auipc	a1,0x8
    8001fb3a:	1fa58593          	addi	a1,a1,506 # 80027d30 <__func__.0+0x2d0>
    8001fb3e:	00008517          	auipc	a0,0x8
    8001fb42:	23250513          	addi	a0,a0,562 # 80027d70 <__func__.0+0x310>
    8001fb46:	1b0060ef          	jal	80025cf6 <printf>
    8001fb4a:	00029797          	auipc	a5,0x29
    8001fb4e:	4c77c783          	lbu	a5,1223(a5) # 80049011 <excpt+0x1>
    8001fb52:	c789                	beqz	a5,8001fb5c <time_test_1+0xb4>
    8001fb54:	6418                	ld	a4,8(s0)
    8001fb56:	4789                	li	a5,2
    8001fb58:	00f70c63          	beq	a4,a5,8001fb70 <time_test_1+0xc8>
    8001fb5c:	00008517          	auipc	a0,0x8
    8001fb60:	21c50513          	addi	a0,a0,540 # 80027d78 <__func__.0+0x318>
    8001fb64:	192060ef          	jal	80025cf6 <printf>
    8001fb68:	02900513          	li	a0,41
    8001fb6c:	795040ef          	jal	80024b00 <putchar>
    8001fb70:	4529                	li	a0,10
    8001fb72:	78f040ef          	jal	80024b00 <putchar>
    8001fb76:	00029797          	auipc	a5,0x29
    8001fb7a:	49b7c783          	lbu	a5,1179(a5) # 80049011 <excpt+0x1>
    8001fb7e:	4481                	li	s1,0
    8001fb80:	c789                	beqz	a5,8001fb8a <time_test_1+0xe2>
    8001fb82:	6404                	ld	s1,8(s0)
    8001fb84:	14f9                	addi	s1,s1,-2
    8001fb86:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HS);
    8001fb8a:	450d                	li	a0,3
    8001fb8c:	86ae10ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fb90:	0330000f          	fence	rw,rw
    8001fb94:	4785                	li	a5,1
    8001fb96:	00029717          	auipc	a4,0x29
    8001fb9a:	4a073923          	sd	zero,1202(a4) # 80049048 <excpt+0x38>
    8001fb9e:	00f41023          	sh	a5,0(s0)
    8001fba2:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001fba6:	c01027f3          	rdtime	a5

    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001fbaa:	08200593          	li	a1,130
    8001fbae:	0000f617          	auipc	a2,0xf
    8001fbb2:	38a60613          	addi	a2,a2,906 # 8002ef38 <__func__.0+0x74d8>
    8001fbb6:	00008517          	auipc	a0,0x8
    8001fbba:	1a250513          	addi	a0,a0,418 # 80027d58 <__func__.0+0x2f8>
    8001fbbe:	138060ef          	jal	80025cf6 <printf>
    8001fbc2:	00029797          	auipc	a5,0x29
    8001fbc6:	44f7c783          	lbu	a5,1103(a5) # 80049011 <excpt+0x1>
    8001fbca:	00008597          	auipc	a1,0x8
    8001fbce:	16658593          	addi	a1,a1,358 # 80027d30 <__func__.0+0x2d0>
    8001fbd2:	cf89                	beqz	a5,8001fbec <time_test_1+0x144>
    8001fbd4:	6418                	ld	a4,8(s0)
    8001fbd6:	4789                	li	a5,2
    8001fbd8:	00008597          	auipc	a1,0x8
    8001fbdc:	14858593          	addi	a1,a1,328 # 80027d20 <__func__.0+0x2c0>
    8001fbe0:	00f70663          	beq	a4,a5,8001fbec <time_test_1+0x144>
    8001fbe4:	00008597          	auipc	a1,0x8
    8001fbe8:	14c58593          	addi	a1,a1,332 # 80027d30 <__func__.0+0x2d0>
    8001fbec:	00008517          	auipc	a0,0x8
    8001fbf0:	18450513          	addi	a0,a0,388 # 80027d70 <__func__.0+0x310>
    8001fbf4:	102060ef          	jal	80025cf6 <printf>
    8001fbf8:	00029797          	auipc	a5,0x29
    8001fbfc:	4197c783          	lbu	a5,1049(a5) # 80049011 <excpt+0x1>
    8001fc00:	c789                	beqz	a5,8001fc0a <time_test_1+0x162>
    8001fc02:	6418                	ld	a4,8(s0)
    8001fc04:	4789                	li	a5,2
    8001fc06:	00f70c63          	beq	a4,a5,8001fc1e <time_test_1+0x176>
    8001fc0a:	00008517          	auipc	a0,0x8
    8001fc0e:	16e50513          	addi	a0,a0,366 # 80027d78 <__func__.0+0x318>
    8001fc12:	0e4060ef          	jal	80025cf6 <printf>
    8001fc16:	02900513          	li	a0,41
    8001fc1a:	6e7040ef          	jal	80024b00 <putchar>
    8001fc1e:	4529                	li	a0,10
    8001fc20:	6e1040ef          	jal	80024b00 <putchar>
    8001fc24:	c881                	beqz	s1,8001fc34 <time_test_1+0x18c>
    8001fc26:	00029797          	auipc	a5,0x29
    8001fc2a:	3eb7c783          	lbu	a5,1003(a5) # 80049011 <excpt+0x1>
    8001fc2e:	4481                	li	s1,0
    8001fc30:	1a079163          	bnez	a5,8001fdd2 <time_test_1+0x32a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    8001fc34:	4501                	li	a0,0
    8001fc36:	fc1e00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fc3a:	0330000f          	fence	rw,rw
    8001fc3e:	4785                	li	a5,1
    8001fc40:	00029717          	auipc	a4,0x29
    8001fc44:	40073423          	sd	zero,1032(a4) # 80049048 <excpt+0x38>
    8001fc48:	00f41023          	sh	a5,0(s0)
    8001fc4c:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001fc50:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001fc54:	08200593          	li	a1,130
    8001fc58:	0000f617          	auipc	a2,0xf
    8001fc5c:	33060613          	addi	a2,a2,816 # 8002ef88 <__func__.0+0x7528>
    8001fc60:	00008517          	auipc	a0,0x8
    8001fc64:	0f850513          	addi	a0,a0,248 # 80027d58 <__func__.0+0x2f8>
    8001fc68:	08e060ef          	jal	80025cf6 <printf>
    8001fc6c:	00029797          	auipc	a5,0x29
    8001fc70:	3a57c783          	lbu	a5,933(a5) # 80049011 <excpt+0x1>
    8001fc74:	00008597          	auipc	a1,0x8
    8001fc78:	0bc58593          	addi	a1,a1,188 # 80027d30 <__func__.0+0x2d0>
    8001fc7c:	cf89                	beqz	a5,8001fc96 <time_test_1+0x1ee>
    8001fc7e:	6418                	ld	a4,8(s0)
    8001fc80:	4789                	li	a5,2
    8001fc82:	00008597          	auipc	a1,0x8
    8001fc86:	09e58593          	addi	a1,a1,158 # 80027d20 <__func__.0+0x2c0>
    8001fc8a:	00f70663          	beq	a4,a5,8001fc96 <time_test_1+0x1ee>
    8001fc8e:	00008597          	auipc	a1,0x8
    8001fc92:	0a258593          	addi	a1,a1,162 # 80027d30 <__func__.0+0x2d0>
    8001fc96:	00008517          	auipc	a0,0x8
    8001fc9a:	0da50513          	addi	a0,a0,218 # 80027d70 <__func__.0+0x310>
    8001fc9e:	058060ef          	jal	80025cf6 <printf>
    8001fca2:	00029797          	auipc	a5,0x29
    8001fca6:	36f7c783          	lbu	a5,879(a5) # 80049011 <excpt+0x1>
    8001fcaa:	c789                	beqz	a5,8001fcb4 <time_test_1+0x20c>
    8001fcac:	6418                	ld	a4,8(s0)
    8001fcae:	4789                	li	a5,2
    8001fcb0:	00f70c63          	beq	a4,a5,8001fcc8 <time_test_1+0x220>
    8001fcb4:	00008517          	auipc	a0,0x8
    8001fcb8:	0c450513          	addi	a0,a0,196 # 80027d78 <__func__.0+0x318>
    8001fcbc:	03a060ef          	jal	80025cf6 <printf>
    8001fcc0:	02900513          	li	a0,41
    8001fcc4:	63d040ef          	jal	80024b00 <putchar>
    8001fcc8:	4529                	li	a0,10
    8001fcca:	637040ef          	jal	80024b00 <putchar>
    8001fcce:	c881                	beqz	s1,8001fcde <time_test_1+0x236>
    8001fcd0:	00029797          	auipc	a5,0x29
    8001fcd4:	3417c783          	lbu	a5,833(a5) # 80049011 <excpt+0x1>
    8001fcd8:	4481                	li	s1,0
    8001fcda:	0e079763          	bnez	a5,8001fdc8 <time_test_1+0x320>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );
    
    goto_priv(PRIV_HU);
    8001fcde:	4505                	li	a0,1
    8001fce0:	f17e00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fce4:	0330000f          	fence	rw,rw
    8001fce8:	4785                	li	a5,1
    8001fcea:	00029717          	auipc	a4,0x29
    8001fcee:	34073f23          	sd	zero,862(a4) # 80049048 <excpt+0x38>
    8001fcf2:	00f41023          	sh	a5,0(s0)
    8001fcf6:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001fcfa:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001fcfe:	08200593          	li	a1,130
    8001fd02:	0000f617          	auipc	a2,0xf
    8001fd06:	2d660613          	addi	a2,a2,726 # 8002efd8 <__func__.0+0x7578>
    8001fd0a:	00008517          	auipc	a0,0x8
    8001fd0e:	04e50513          	addi	a0,a0,78 # 80027d58 <__func__.0+0x2f8>
    8001fd12:	7e5050ef          	jal	80025cf6 <printf>
    8001fd16:	00029797          	auipc	a5,0x29
    8001fd1a:	2fb7c783          	lbu	a5,763(a5) # 80049011 <excpt+0x1>
    8001fd1e:	00008597          	auipc	a1,0x8
    8001fd22:	01258593          	addi	a1,a1,18 # 80027d30 <__func__.0+0x2d0>
    8001fd26:	cf89                	beqz	a5,8001fd40 <time_test_1+0x298>
    8001fd28:	6418                	ld	a4,8(s0)
    8001fd2a:	4789                	li	a5,2
    8001fd2c:	00008597          	auipc	a1,0x8
    8001fd30:	ff458593          	addi	a1,a1,-12 # 80027d20 <__func__.0+0x2c0>
    8001fd34:	00f70663          	beq	a4,a5,8001fd40 <time_test_1+0x298>
    8001fd38:	00008597          	auipc	a1,0x8
    8001fd3c:	ff858593          	addi	a1,a1,-8 # 80027d30 <__func__.0+0x2d0>
    8001fd40:	00008517          	auipc	a0,0x8
    8001fd44:	03050513          	addi	a0,a0,48 # 80027d70 <__func__.0+0x310>
    8001fd48:	7af050ef          	jal	80025cf6 <printf>
    8001fd4c:	00029797          	auipc	a5,0x29
    8001fd50:	2c57c783          	lbu	a5,709(a5) # 80049011 <excpt+0x1>
    8001fd54:	c789                	beqz	a5,8001fd5e <time_test_1+0x2b6>
    8001fd56:	6418                	ld	a4,8(s0)
    8001fd58:	4789                	li	a5,2
    8001fd5a:	00f70c63          	beq	a4,a5,8001fd72 <time_test_1+0x2ca>
    8001fd5e:	00008517          	auipc	a0,0x8
    8001fd62:	01a50513          	addi	a0,a0,26 # 80027d78 <__func__.0+0x318>
    8001fd66:	791050ef          	jal	80025cf6 <printf>
    8001fd6a:	02900513          	li	a0,41
    8001fd6e:	593040ef          	jal	80024b00 <putchar>
    8001fd72:	4529                	li	a0,10
    8001fd74:	58d040ef          	jal	80024b00 <putchar>
    8001fd78:	c095                	beqz	s1,8001fd9c <time_test_1+0x2f4>
    8001fd7a:	00029497          	auipc	s1,0x29
    8001fd7e:	2974c483          	lbu	s1,663(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001fd82:	00008597          	auipc	a1,0x8
    8001fd86:	fae58593          	addi	a1,a1,-82 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001fd8a:	cc91                	beqz	s1,8001fda6 <time_test_1+0x2fe>
    8001fd8c:	6418                	ld	a4,8(s0)
    8001fd8e:	4789                	li	a5,2
    TEST_END(); 
    8001fd90:	00008597          	auipc	a1,0x8
    8001fd94:	f9058593          	addi	a1,a1,-112 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001fd98:	00f70763          	beq	a4,a5,8001fda6 <time_test_1+0x2fe>
    8001fd9c:	4481                	li	s1,0
    TEST_END(); 
    8001fd9e:	00008597          	auipc	a1,0x8
    8001fda2:	f9258593          	addi	a1,a1,-110 # 80027d30 <__func__.0+0x2d0>
    8001fda6:	00008517          	auipc	a0,0x8
    8001fdaa:	03250513          	addi	a0,a0,50 # 80027dd8 <__func__.0+0x378>
    8001fdae:	749050ef          	jal	80025cf6 <printf>
    8001fdb2:	4511                	li	a0,4
    8001fdb4:	e43e00ef          	jal	80000bf6 <goto_priv>
    8001fdb8:	ef4e10ef          	jal	800014ac <reset_state>
}
    8001fdbc:	60e2                	ld	ra,24(sp)
    8001fdbe:	6442                	ld	s0,16(sp)
    8001fdc0:	8526                	mv	a0,s1
    8001fdc2:	64a2                	ld	s1,8(sp)
    8001fdc4:	6105                	addi	sp,sp,32
    8001fdc6:	8082                	ret
    TEST_ASSERT("vu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001fdc8:	6404                	ld	s1,8(s0)
    8001fdca:	14f9                	addi	s1,s1,-2
    8001fdcc:	0014b493          	seqz	s1,s1
    8001fdd0:	b739                	j	8001fcde <time_test_1+0x236>
    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001fdd2:	6404                	ld	s1,8(s0)
    8001fdd4:	14f9                	addi	s1,s1,-2
    8001fdd6:	0014b493          	seqz	s1,s1
    8001fdda:	bda9                	j	8001fc34 <time_test_1+0x18c>

000000008001fddc <time_test_2>:

bool time_test_2() {
    8001fddc:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001fdde:	00008597          	auipc	a1,0x8
    8001fde2:	90a58593          	addi	a1,a1,-1782 # 800276e8 <__func__.49>
    8001fde6:	00008517          	auipc	a0,0x8
    8001fdea:	f5a50513          	addi	a0,a0,-166 # 80027d40 <__func__.0+0x2e0>
bool time_test_2() {
    8001fdee:	e406                	sd	ra,8(sp)
    8001fdf0:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001fdf2:	705050ef          	jal	80025cf6 <printf>
    8001fdf6:	4529                	li	a0,10
    8001fdf8:	509040ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    8001fdfc:	4511                	li	a0,4
    8001fdfe:	df9e00ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM);
    8001fe02:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HS);
    8001fe06:	450d                	li	a0,3
    8001fe08:	defe00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fe0c:	0330000f          	fence	rw,rw
    8001fe10:	4785                	li	a5,1
    8001fe12:	00029717          	auipc	a4,0x29
    8001fe16:	22073b23          	sd	zero,566(a4) # 80049048 <excpt+0x38>
    8001fe1a:	00029717          	auipc	a4,0x29
    8001fe1e:	1ef71b23          	sh	a5,502(a4) # 80049010 <excpt>
    8001fe22:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001fe26:	c01027f3          	rdtime	a5

    TEST_ASSERT("hs access to time successful when mcounteren.tm=1",
    8001fe2a:	08200593          	li	a1,130
    8001fe2e:	0000f617          	auipc	a2,0xf
    8001fe32:	1fa60613          	addi	a2,a2,506 # 8002f028 <__func__.0+0x75c8>
    8001fe36:	00008517          	auipc	a0,0x8
    8001fe3a:	f2250513          	addi	a0,a0,-222 # 80027d58 <__func__.0+0x2f8>
    8001fe3e:	6b9050ef          	jal	80025cf6 <printf>
    8001fe42:	00029797          	auipc	a5,0x29
    8001fe46:	1cf7c783          	lbu	a5,463(a5) # 80049011 <excpt+0x1>
    8001fe4a:	00008597          	auipc	a1,0x8
    8001fe4e:	ed658593          	addi	a1,a1,-298 # 80027d20 <__func__.0+0x2c0>
    8001fe52:	c789                	beqz	a5,8001fe5c <time_test_2+0x80>
    8001fe54:	00008597          	auipc	a1,0x8
    8001fe58:	edc58593          	addi	a1,a1,-292 # 80027d30 <__func__.0+0x2d0>
    8001fe5c:	00008517          	auipc	a0,0x8
    8001fe60:	f1450513          	addi	a0,a0,-236 # 80027d70 <__func__.0+0x310>
    8001fe64:	693050ef          	jal	80025cf6 <printf>
    8001fe68:	00029797          	auipc	a5,0x29
    8001fe6c:	1a97c783          	lbu	a5,425(a5) # 80049011 <excpt+0x1>
    8001fe70:	e7a1                	bnez	a5,8001feb8 <time_test_2+0xdc>
    8001fe72:	4529                	li	a0,10
    8001fe74:	48d040ef          	jal	80024b00 <putchar>
    8001fe78:	00029797          	auipc	a5,0x29
    8001fe7c:	1997c783          	lbu	a5,409(a5) # 80049011 <excpt+0x1>
    8001fe80:	e795                	bnez	a5,8001feac <time_test_2+0xd0>
    8001fe82:	4405                	li	s0,1
        excpt.triggered == false
    );
    TEST_END(); 
    8001fe84:	00008597          	auipc	a1,0x8
    8001fe88:	e9c58593          	addi	a1,a1,-356 # 80027d20 <__func__.0+0x2c0>
    8001fe8c:	00008517          	auipc	a0,0x8
    8001fe90:	f4c50513          	addi	a0,a0,-180 # 80027dd8 <__func__.0+0x378>
    8001fe94:	663050ef          	jal	80025cf6 <printf>
    8001fe98:	4511                	li	a0,4
    8001fe9a:	d5de00ef          	jal	80000bf6 <goto_priv>
    8001fe9e:	e0ee10ef          	jal	800014ac <reset_state>
}
    8001fea2:	60a2                	ld	ra,8(sp)
    8001fea4:	8522                	mv	a0,s0
    8001fea6:	6402                	ld	s0,0(sp)
    8001fea8:	0141                	addi	sp,sp,16
    8001feaa:	8082                	ret
    TEST_ASSERT("hs access to time successful when mcounteren.tm=1",
    8001feac:	4401                	li	s0,0
    TEST_END(); 
    8001feae:	00008597          	auipc	a1,0x8
    8001feb2:	e8258593          	addi	a1,a1,-382 # 80027d30 <__func__.0+0x2d0>
    8001feb6:	bfd9                	j	8001fe8c <time_test_2+0xb0>
    TEST_ASSERT("hs access to time successful when mcounteren.tm=1",
    8001feb8:	00008517          	auipc	a0,0x8
    8001febc:	ec050513          	addi	a0,a0,-320 # 80027d78 <__func__.0+0x318>
    8001fec0:	637050ef          	jal	80025cf6 <printf>
    8001fec4:	02900513          	li	a0,41
    8001fec8:	439040ef          	jal	80024b00 <putchar>
    8001fecc:	b75d                	j	8001fe72 <time_test_2+0x96>

000000008001fece <time_test_3>:

bool time_test_3() {
    8001fece:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001fed0:	00008597          	auipc	a1,0x8
    8001fed4:	82858593          	addi	a1,a1,-2008 # 800276f8 <__func__.48>
    8001fed8:	00008517          	auipc	a0,0x8
    8001fedc:	e6850513          	addi	a0,a0,-408 # 80027d40 <__func__.0+0x2e0>
bool time_test_3() {
    8001fee0:	ec06                	sd	ra,24(sp)
    8001fee2:	e822                	sd	s0,16(sp)
    8001fee4:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001fee6:	611050ef          	jal	80025cf6 <printf>
    8001feea:	4529                	li	a0,10
    8001feec:	415040ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    8001fef0:	4511                	li	a0,4
    8001fef2:	d05e00ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001fef6:	10617073          	csrci	scounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001fefa:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HU);
    8001fefe:	4505                	li	a0,1
    8001ff00:	cf7e00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001ff04:	0330000f          	fence	rw,rw
    8001ff08:	00029417          	auipc	s0,0x29
    8001ff0c:	10840413          	addi	s0,s0,264 # 80049010 <excpt>
    8001ff10:	4785                	li	a5,1
    8001ff12:	00029717          	auipc	a4,0x29
    8001ff16:	12073b23          	sd	zero,310(a4) # 80049048 <excpt+0x38>
    8001ff1a:	00f41023          	sh	a5,0(s0)
    8001ff1e:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001ff22:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time casuses illegal instruction exception when scounteren.tm=0",
    8001ff26:	08200593          	li	a1,130
    8001ff2a:	0000f617          	auipc	a2,0xf
    8001ff2e:	13660613          	addi	a2,a2,310 # 8002f060 <__func__.0+0x7600>
    8001ff32:	00008517          	auipc	a0,0x8
    8001ff36:	e2650513          	addi	a0,a0,-474 # 80027d58 <__func__.0+0x2f8>
    8001ff3a:	5bd050ef          	jal	80025cf6 <printf>
    8001ff3e:	00029797          	auipc	a5,0x29
    8001ff42:	0d37c783          	lbu	a5,211(a5) # 80049011 <excpt+0x1>
    8001ff46:	00008597          	auipc	a1,0x8
    8001ff4a:	dea58593          	addi	a1,a1,-534 # 80027d30 <__func__.0+0x2d0>
    8001ff4e:	cf89                	beqz	a5,8001ff68 <time_test_3+0x9a>
    8001ff50:	6418                	ld	a4,8(s0)
    8001ff52:	4789                	li	a5,2
    8001ff54:	00008597          	auipc	a1,0x8
    8001ff58:	dcc58593          	addi	a1,a1,-564 # 80027d20 <__func__.0+0x2c0>
    8001ff5c:	00f70663          	beq	a4,a5,8001ff68 <time_test_3+0x9a>
    8001ff60:	00008597          	auipc	a1,0x8
    8001ff64:	dd058593          	addi	a1,a1,-560 # 80027d30 <__func__.0+0x2d0>
    8001ff68:	00008517          	auipc	a0,0x8
    8001ff6c:	e0850513          	addi	a0,a0,-504 # 80027d70 <__func__.0+0x310>
    8001ff70:	587050ef          	jal	80025cf6 <printf>
    8001ff74:	00029797          	auipc	a5,0x29
    8001ff78:	09d7c783          	lbu	a5,157(a5) # 80049011 <excpt+0x1>
    8001ff7c:	c789                	beqz	a5,8001ff86 <time_test_3+0xb8>
    8001ff7e:	6418                	ld	a4,8(s0)
    8001ff80:	4789                	li	a5,2
    8001ff82:	00f70c63          	beq	a4,a5,8001ff9a <time_test_3+0xcc>
    8001ff86:	00008517          	auipc	a0,0x8
    8001ff8a:	df250513          	addi	a0,a0,-526 # 80027d78 <__func__.0+0x318>
    8001ff8e:	569050ef          	jal	80025cf6 <printf>
    8001ff92:	02900513          	li	a0,41
    8001ff96:	36b040ef          	jal	80024b00 <putchar>
    8001ff9a:	4529                	li	a0,10
    8001ff9c:	365040ef          	jal	80024b00 <putchar>
    8001ffa0:	00029497          	auipc	s1,0x29
    8001ffa4:	0714c483          	lbu	s1,113(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001ffa8:	00008597          	auipc	a1,0x8
    8001ffac:	d8858593          	addi	a1,a1,-632 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when scounteren.tm=0",
    8001ffb0:	cc91                	beqz	s1,8001ffcc <time_test_3+0xfe>
    8001ffb2:	6418                	ld	a4,8(s0)
    8001ffb4:	4789                	li	a5,2
    TEST_END(); 
    8001ffb6:	00008597          	auipc	a1,0x8
    8001ffba:	d6a58593          	addi	a1,a1,-662 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when scounteren.tm=0",
    8001ffbe:	00f70763          	beq	a4,a5,8001ffcc <time_test_3+0xfe>
    8001ffc2:	4481                	li	s1,0
    TEST_END(); 
    8001ffc4:	00008597          	auipc	a1,0x8
    8001ffc8:	d6c58593          	addi	a1,a1,-660 # 80027d30 <__func__.0+0x2d0>
    8001ffcc:	00008517          	auipc	a0,0x8
    8001ffd0:	e0c50513          	addi	a0,a0,-500 # 80027dd8 <__func__.0+0x378>
    8001ffd4:	523050ef          	jal	80025cf6 <printf>
    8001ffd8:	4511                	li	a0,4
    8001ffda:	c1de00ef          	jal	80000bf6 <goto_priv>
    8001ffde:	ccee10ef          	jal	800014ac <reset_state>
}
    8001ffe2:	60e2                	ld	ra,24(sp)
    8001ffe4:	6442                	ld	s0,16(sp)
    8001ffe6:	8526                	mv	a0,s1
    8001ffe8:	64a2                	ld	s1,8(sp)
    8001ffea:	6105                	addi	sp,sp,32
    8001ffec:	8082                	ret

000000008001ffee <time_test_4>:

bool time_test_4() {
    8001ffee:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001fff0:	00007597          	auipc	a1,0x7
    8001fff4:	71858593          	addi	a1,a1,1816 # 80027708 <__func__.47>
    8001fff8:	00008517          	auipc	a0,0x8
    8001fffc:	d4850513          	addi	a0,a0,-696 # 80027d40 <__func__.0+0x2e0>
bool time_test_4() {
    80020000:	e406                	sd	ra,8(sp)
    80020002:	e022                	sd	s0,0(sp)
    TEST_START();    
    80020004:	4f3050ef          	jal	80025cf6 <printf>
    80020008:	4529                	li	a0,10
    8002000a:	2f7040ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    8002000e:	4511                	li	a0,4
    80020010:	be7e00ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    80020014:	10616073          	csrsi	scounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020018:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HU);
    8002001c:	4505                	li	a0,1
    8002001e:	bd9e00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020022:	0330000f          	fence	rw,rw
    80020026:	4785                	li	a5,1
    80020028:	00029717          	auipc	a4,0x29
    8002002c:	02073023          	sd	zero,32(a4) # 80049048 <excpt+0x38>
    80020030:	00029717          	auipc	a4,0x29
    80020034:	fef71023          	sh	a5,-32(a4) # 80049010 <excpt>
    80020038:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8002003c:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time successful when mcounteren.tm=1 scounteren.tm=1",
    80020040:	08200593          	li	a1,130
    80020044:	0000f617          	auipc	a2,0xf
    80020048:	06c60613          	addi	a2,a2,108 # 8002f0b0 <__func__.0+0x7650>
    8002004c:	00008517          	auipc	a0,0x8
    80020050:	d0c50513          	addi	a0,a0,-756 # 80027d58 <__func__.0+0x2f8>
    80020054:	4a3050ef          	jal	80025cf6 <printf>
    80020058:	00029797          	auipc	a5,0x29
    8002005c:	fb97c783          	lbu	a5,-71(a5) # 80049011 <excpt+0x1>
    80020060:	00008597          	auipc	a1,0x8
    80020064:	cc058593          	addi	a1,a1,-832 # 80027d20 <__func__.0+0x2c0>
    80020068:	c789                	beqz	a5,80020072 <time_test_4+0x84>
    8002006a:	00008597          	auipc	a1,0x8
    8002006e:	cc658593          	addi	a1,a1,-826 # 80027d30 <__func__.0+0x2d0>
    80020072:	00008517          	auipc	a0,0x8
    80020076:	cfe50513          	addi	a0,a0,-770 # 80027d70 <__func__.0+0x310>
    8002007a:	47d050ef          	jal	80025cf6 <printf>
    8002007e:	00029797          	auipc	a5,0x29
    80020082:	f937c783          	lbu	a5,-109(a5) # 80049011 <excpt+0x1>
    80020086:	e7a1                	bnez	a5,800200ce <time_test_4+0xe0>
    80020088:	4529                	li	a0,10
    8002008a:	277040ef          	jal	80024b00 <putchar>
    8002008e:	00029797          	auipc	a5,0x29
    80020092:	f837c783          	lbu	a5,-125(a5) # 80049011 <excpt+0x1>
    80020096:	e795                	bnez	a5,800200c2 <time_test_4+0xd4>
    80020098:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8002009a:	00008597          	auipc	a1,0x8
    8002009e:	c8658593          	addi	a1,a1,-890 # 80027d20 <__func__.0+0x2c0>
    800200a2:	00008517          	auipc	a0,0x8
    800200a6:	d3650513          	addi	a0,a0,-714 # 80027dd8 <__func__.0+0x378>
    800200aa:	44d050ef          	jal	80025cf6 <printf>
    800200ae:	4511                	li	a0,4
    800200b0:	b47e00ef          	jal	80000bf6 <goto_priv>
    800200b4:	bf8e10ef          	jal	800014ac <reset_state>
}
    800200b8:	60a2                	ld	ra,8(sp)
    800200ba:	8522                	mv	a0,s0
    800200bc:	6402                	ld	s0,0(sp)
    800200be:	0141                	addi	sp,sp,16
    800200c0:	8082                	ret
    TEST_ASSERT("hu access to time successful when mcounteren.tm=1 scounteren.tm=1",
    800200c2:	4401                	li	s0,0
    TEST_END(); 
    800200c4:	00008597          	auipc	a1,0x8
    800200c8:	c6c58593          	addi	a1,a1,-916 # 80027d30 <__func__.0+0x2d0>
    800200cc:	bfd9                	j	800200a2 <time_test_4+0xb4>
    TEST_ASSERT("hu access to time successful when mcounteren.tm=1 scounteren.tm=1",
    800200ce:	00008517          	auipc	a0,0x8
    800200d2:	caa50513          	addi	a0,a0,-854 # 80027d78 <__func__.0+0x318>
    800200d6:	421050ef          	jal	80025cf6 <printf>
    800200da:	02900513          	li	a0,41
    800200de:	223040ef          	jal	80024b00 <putchar>
    800200e2:	b75d                	j	80020088 <time_test_4+0x9a>

00000000800200e4 <time_test_5>:

bool time_test_5() {
    800200e4:	1101                	addi	sp,sp,-32

    TEST_START();    
    800200e6:	00007597          	auipc	a1,0x7
    800200ea:	63258593          	addi	a1,a1,1586 # 80027718 <__func__.46>
    800200ee:	00008517          	auipc	a0,0x8
    800200f2:	c5250513          	addi	a0,a0,-942 # 80027d40 <__func__.0+0x2e0>
bool time_test_5() {
    800200f6:	ec06                	sd	ra,24(sp)
    800200f8:	e822                	sd	s0,16(sp)
    800200fa:	e426                	sd	s1,8(sp)
    TEST_START();    
    800200fc:	3fb050ef          	jal	80025cf6 <printf>
    80020100:	4529                	li	a0,10
    80020102:	1ff040ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    80020106:	4511                	li	a0,4
    80020108:	aefe00ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8002010c:	60617073          	csrci	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020110:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_VS);
    80020114:	4509                	li	a0,2
    80020116:	ae1e00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002011a:	0330000f          	fence	rw,rw
    8002011e:	00029417          	auipc	s0,0x29
    80020122:	ef240413          	addi	s0,s0,-270 # 80049010 <excpt>
    80020126:	4785                	li	a5,1
    80020128:	00029717          	auipc	a4,0x29
    8002012c:	f2073023          	sd	zero,-224(a4) # 80049048 <excpt+0x38>
    80020130:	00f41023          	sh	a5,0(s0)
    80020134:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    80020138:	c01027f3          	rdtime	a5

    TEST_ASSERT("vs access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0",
    8002013c:	08200593          	li	a1,130
    80020140:	0000f617          	auipc	a2,0xf
    80020144:	fb860613          	addi	a2,a2,-72 # 8002f0f8 <__func__.0+0x7698>
    80020148:	00008517          	auipc	a0,0x8
    8002014c:	c1050513          	addi	a0,a0,-1008 # 80027d58 <__func__.0+0x2f8>
    80020150:	3a7050ef          	jal	80025cf6 <printf>
    80020154:	00029797          	auipc	a5,0x29
    80020158:	ebd7c783          	lbu	a5,-323(a5) # 80049011 <excpt+0x1>
    8002015c:	00008597          	auipc	a1,0x8
    80020160:	bd458593          	addi	a1,a1,-1068 # 80027d30 <__func__.0+0x2d0>
    80020164:	cf89                	beqz	a5,8002017e <time_test_5+0x9a>
    80020166:	6418                	ld	a4,8(s0)
    80020168:	47d9                	li	a5,22
    8002016a:	00008597          	auipc	a1,0x8
    8002016e:	bb658593          	addi	a1,a1,-1098 # 80027d20 <__func__.0+0x2c0>
    80020172:	00f70663          	beq	a4,a5,8002017e <time_test_5+0x9a>
    80020176:	00008597          	auipc	a1,0x8
    8002017a:	bba58593          	addi	a1,a1,-1094 # 80027d30 <__func__.0+0x2d0>
    8002017e:	00008517          	auipc	a0,0x8
    80020182:	bf250513          	addi	a0,a0,-1038 # 80027d70 <__func__.0+0x310>
    80020186:	371050ef          	jal	80025cf6 <printf>
    8002018a:	00029797          	auipc	a5,0x29
    8002018e:	e877c783          	lbu	a5,-377(a5) # 80049011 <excpt+0x1>
    80020192:	c789                	beqz	a5,8002019c <time_test_5+0xb8>
    80020194:	6418                	ld	a4,8(s0)
    80020196:	47d9                	li	a5,22
    80020198:	00f70c63          	beq	a4,a5,800201b0 <time_test_5+0xcc>
    8002019c:	00008517          	auipc	a0,0x8
    800201a0:	bdc50513          	addi	a0,a0,-1060 # 80027d78 <__func__.0+0x318>
    800201a4:	353050ef          	jal	80025cf6 <printf>
    800201a8:	02900513          	li	a0,41
    800201ac:	155040ef          	jal	80024b00 <putchar>
    800201b0:	4529                	li	a0,10
    800201b2:	14f040ef          	jal	80024b00 <putchar>
    800201b6:	00029497          	auipc	s1,0x29
    800201ba:	e5b4c483          	lbu	s1,-421(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    800201be:	00008597          	auipc	a1,0x8
    800201c2:	b7258593          	addi	a1,a1,-1166 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0",
    800201c6:	cc91                	beqz	s1,800201e2 <time_test_5+0xfe>
    800201c8:	6418                	ld	a4,8(s0)
    800201ca:	47d9                	li	a5,22
    TEST_END(); 
    800201cc:	00008597          	auipc	a1,0x8
    800201d0:	b5458593          	addi	a1,a1,-1196 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0",
    800201d4:	00f70763          	beq	a4,a5,800201e2 <time_test_5+0xfe>
    800201d8:	4481                	li	s1,0
    TEST_END(); 
    800201da:	00008597          	auipc	a1,0x8
    800201de:	b5658593          	addi	a1,a1,-1194 # 80027d30 <__func__.0+0x2d0>
    800201e2:	00008517          	auipc	a0,0x8
    800201e6:	bf650513          	addi	a0,a0,-1034 # 80027dd8 <__func__.0+0x378>
    800201ea:	30d050ef          	jal	80025cf6 <printf>
    800201ee:	4511                	li	a0,4
    800201f0:	a07e00ef          	jal	80000bf6 <goto_priv>
    800201f4:	ab8e10ef          	jal	800014ac <reset_state>
}
    800201f8:	60e2                	ld	ra,24(sp)
    800201fa:	6442                	ld	s0,16(sp)
    800201fc:	8526                	mv	a0,s1
    800201fe:	64a2                	ld	s1,8(sp)
    80020200:	6105                	addi	sp,sp,32
    80020202:	8082                	ret

0000000080020204 <time_test_6>:

bool time_test_6() {
    80020204:	1141                	addi	sp,sp,-16

    TEST_START();    
    80020206:	00007597          	auipc	a1,0x7
    8002020a:	52258593          	addi	a1,a1,1314 # 80027728 <__func__.45>
    8002020e:	00008517          	auipc	a0,0x8
    80020212:	b3250513          	addi	a0,a0,-1230 # 80027d40 <__func__.0+0x2e0>
bool time_test_6() {
    80020216:	e406                	sd	ra,8(sp)
    80020218:	e022                	sd	s0,0(sp)
    TEST_START();    
    8002021a:	2dd050ef          	jal	80025cf6 <printf>
    8002021e:	4529                	li	a0,10
    80020220:	0e1040ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    80020224:	4511                	li	a0,4
    80020226:	9d1e00ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8002022a:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8002022e:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_VS);
    80020232:	4509                	li	a0,2
    80020234:	9c3e00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020238:	0330000f          	fence	rw,rw
    8002023c:	4785                	li	a5,1
    8002023e:	00029717          	auipc	a4,0x29
    80020242:	e0073523          	sd	zero,-502(a4) # 80049048 <excpt+0x38>
    80020246:	00029717          	auipc	a4,0x29
    8002024a:	dcf71523          	sh	a5,-566(a4) # 80049010 <excpt>
    8002024e:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    80020252:	c01027f3          	rdtime	a5

    TEST_ASSERT("vs access to time successful when mcounteren.tm=1 hcounteren.tm=1",
    80020256:	08200593          	li	a1,130
    8002025a:	0000f617          	auipc	a2,0xf
    8002025e:	efe60613          	addi	a2,a2,-258 # 8002f158 <__func__.0+0x76f8>
    80020262:	00008517          	auipc	a0,0x8
    80020266:	af650513          	addi	a0,a0,-1290 # 80027d58 <__func__.0+0x2f8>
    8002026a:	28d050ef          	jal	80025cf6 <printf>
    8002026e:	00029797          	auipc	a5,0x29
    80020272:	da37c783          	lbu	a5,-605(a5) # 80049011 <excpt+0x1>
    80020276:	00008597          	auipc	a1,0x8
    8002027a:	aaa58593          	addi	a1,a1,-1366 # 80027d20 <__func__.0+0x2c0>
    8002027e:	c789                	beqz	a5,80020288 <time_test_6+0x84>
    80020280:	00008597          	auipc	a1,0x8
    80020284:	ab058593          	addi	a1,a1,-1360 # 80027d30 <__func__.0+0x2d0>
    80020288:	00008517          	auipc	a0,0x8
    8002028c:	ae850513          	addi	a0,a0,-1304 # 80027d70 <__func__.0+0x310>
    80020290:	267050ef          	jal	80025cf6 <printf>
    80020294:	00029797          	auipc	a5,0x29
    80020298:	d7d7c783          	lbu	a5,-643(a5) # 80049011 <excpt+0x1>
    8002029c:	e7a1                	bnez	a5,800202e4 <time_test_6+0xe0>
    8002029e:	4529                	li	a0,10
    800202a0:	061040ef          	jal	80024b00 <putchar>
    800202a4:	00029797          	auipc	a5,0x29
    800202a8:	d6d7c783          	lbu	a5,-659(a5) # 80049011 <excpt+0x1>
    800202ac:	e795                	bnez	a5,800202d8 <time_test_6+0xd4>
    800202ae:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    800202b0:	00008597          	auipc	a1,0x8
    800202b4:	a7058593          	addi	a1,a1,-1424 # 80027d20 <__func__.0+0x2c0>
    800202b8:	00008517          	auipc	a0,0x8
    800202bc:	b2050513          	addi	a0,a0,-1248 # 80027dd8 <__func__.0+0x378>
    800202c0:	237050ef          	jal	80025cf6 <printf>
    800202c4:	4511                	li	a0,4
    800202c6:	931e00ef          	jal	80000bf6 <goto_priv>
    800202ca:	9e2e10ef          	jal	800014ac <reset_state>
}
    800202ce:	60a2                	ld	ra,8(sp)
    800202d0:	8522                	mv	a0,s0
    800202d2:	6402                	ld	s0,0(sp)
    800202d4:	0141                	addi	sp,sp,16
    800202d6:	8082                	ret
    TEST_ASSERT("vs access to time successful when mcounteren.tm=1 hcounteren.tm=1",
    800202d8:	4401                	li	s0,0
    TEST_END(); 
    800202da:	00008597          	auipc	a1,0x8
    800202de:	a5658593          	addi	a1,a1,-1450 # 80027d30 <__func__.0+0x2d0>
    800202e2:	bfd9                	j	800202b8 <time_test_6+0xb4>
    TEST_ASSERT("vs access to time successful when mcounteren.tm=1 hcounteren.tm=1",
    800202e4:	00008517          	auipc	a0,0x8
    800202e8:	a9450513          	addi	a0,a0,-1388 # 80027d78 <__func__.0+0x318>
    800202ec:	20b050ef          	jal	80025cf6 <printf>
    800202f0:	02900513          	li	a0,41
    800202f4:	00d040ef          	jal	80024b00 <putchar>
    800202f8:	b75d                	j	8002029e <time_test_6+0x9a>

00000000800202fa <time_test_7>:

bool time_test_7() {
    800202fa:	1141                	addi	sp,sp,-16

    TEST_START();    
    800202fc:	00007597          	auipc	a1,0x7
    80020300:	43c58593          	addi	a1,a1,1084 # 80027738 <__func__.44>
    80020304:	00008517          	auipc	a0,0x8
    80020308:	a3c50513          	addi	a0,a0,-1476 # 80027d40 <__func__.0+0x2e0>
bool time_test_7() {
    8002030c:	e406                	sd	ra,8(sp)
    8002030e:	e022                	sd	s0,0(sp)
    TEST_START();    
    80020310:	1e7050ef          	jal	80025cf6 <printf>
    80020314:	4529                	li	a0,10
    80020316:	7ea040ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    8002031a:	4511                	li	a0,4
    8002031c:	8dbe00ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    80020320:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020324:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    80020328:	10616073          	csrsi	scounteren,2

    goto_priv(PRIV_VU);
    8002032c:	4501                	li	a0,0
    8002032e:	8c9e00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020332:	0330000f          	fence	rw,rw
    80020336:	4785                	li	a5,1
    80020338:	00029717          	auipc	a4,0x29
    8002033c:	d0073823          	sd	zero,-752(a4) # 80049048 <excpt+0x38>
    80020340:	00029717          	auipc	a4,0x29
    80020344:	ccf71823          	sh	a5,-816(a4) # 80049010 <excpt>
    80020348:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8002034c:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time successful when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=1",
    80020350:	08200593          	li	a1,130
    80020354:	0000f617          	auipc	a2,0xf
    80020358:	e4c60613          	addi	a2,a2,-436 # 8002f1a0 <__func__.0+0x7740>
    8002035c:	00008517          	auipc	a0,0x8
    80020360:	9fc50513          	addi	a0,a0,-1540 # 80027d58 <__func__.0+0x2f8>
    80020364:	193050ef          	jal	80025cf6 <printf>
    80020368:	00029797          	auipc	a5,0x29
    8002036c:	ca97c783          	lbu	a5,-855(a5) # 80049011 <excpt+0x1>
    80020370:	00008597          	auipc	a1,0x8
    80020374:	9b058593          	addi	a1,a1,-1616 # 80027d20 <__func__.0+0x2c0>
    80020378:	c789                	beqz	a5,80020382 <time_test_7+0x88>
    8002037a:	00008597          	auipc	a1,0x8
    8002037e:	9b658593          	addi	a1,a1,-1610 # 80027d30 <__func__.0+0x2d0>
    80020382:	00008517          	auipc	a0,0x8
    80020386:	9ee50513          	addi	a0,a0,-1554 # 80027d70 <__func__.0+0x310>
    8002038a:	16d050ef          	jal	80025cf6 <printf>
    8002038e:	00029797          	auipc	a5,0x29
    80020392:	c837c783          	lbu	a5,-893(a5) # 80049011 <excpt+0x1>
    80020396:	e7a1                	bnez	a5,800203de <time_test_7+0xe4>
    80020398:	4529                	li	a0,10
    8002039a:	766040ef          	jal	80024b00 <putchar>
    8002039e:	00029797          	auipc	a5,0x29
    800203a2:	c737c783          	lbu	a5,-909(a5) # 80049011 <excpt+0x1>
    800203a6:	e795                	bnez	a5,800203d2 <time_test_7+0xd8>
    800203a8:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    800203aa:	00008597          	auipc	a1,0x8
    800203ae:	97658593          	addi	a1,a1,-1674 # 80027d20 <__func__.0+0x2c0>
    800203b2:	00008517          	auipc	a0,0x8
    800203b6:	a2650513          	addi	a0,a0,-1498 # 80027dd8 <__func__.0+0x378>
    800203ba:	13d050ef          	jal	80025cf6 <printf>
    800203be:	4511                	li	a0,4
    800203c0:	837e00ef          	jal	80000bf6 <goto_priv>
    800203c4:	8e8e10ef          	jal	800014ac <reset_state>
}
    800203c8:	60a2                	ld	ra,8(sp)
    800203ca:	8522                	mv	a0,s0
    800203cc:	6402                	ld	s0,0(sp)
    800203ce:	0141                	addi	sp,sp,16
    800203d0:	8082                	ret
    TEST_ASSERT("vu access to time successful when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=1",
    800203d2:	4401                	li	s0,0
    TEST_END(); 
    800203d4:	00008597          	auipc	a1,0x8
    800203d8:	95c58593          	addi	a1,a1,-1700 # 80027d30 <__func__.0+0x2d0>
    800203dc:	bfd9                	j	800203b2 <time_test_7+0xb8>
    TEST_ASSERT("vu access to time successful when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=1",
    800203de:	00008517          	auipc	a0,0x8
    800203e2:	99a50513          	addi	a0,a0,-1638 # 80027d78 <__func__.0+0x318>
    800203e6:	111050ef          	jal	80025cf6 <printf>
    800203ea:	02900513          	li	a0,41
    800203ee:	712040ef          	jal	80024b00 <putchar>
    800203f2:	b75d                	j	80020398 <time_test_7+0x9e>

00000000800203f4 <time_test_8>:

bool time_test_8() {
    800203f4:	1101                	addi	sp,sp,-32

    TEST_START();    
    800203f6:	00007597          	auipc	a1,0x7
    800203fa:	35258593          	addi	a1,a1,850 # 80027748 <__func__.43>
    800203fe:	00008517          	auipc	a0,0x8
    80020402:	94250513          	addi	a0,a0,-1726 # 80027d40 <__func__.0+0x2e0>
bool time_test_8() {
    80020406:	ec06                	sd	ra,24(sp)
    80020408:	e822                	sd	s0,16(sp)
    8002040a:	e426                	sd	s1,8(sp)
    TEST_START();    
    8002040c:	0eb050ef          	jal	80025cf6 <printf>
    80020410:	4529                	li	a0,10
    80020412:	6ee040ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    80020416:	4511                	li	a0,4
    80020418:	fdee00ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8002041c:	60617073          	csrci	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020420:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    80020424:	10616073          	csrsi	scounteren,2

    goto_priv(PRIV_VU);
    80020428:	4501                	li	a0,0
    8002042a:	fcce00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002042e:	0330000f          	fence	rw,rw
    80020432:	00029417          	auipc	s0,0x29
    80020436:	bde40413          	addi	s0,s0,-1058 # 80049010 <excpt>
    8002043a:	4785                	li	a5,1
    8002043c:	00029717          	auipc	a4,0x29
    80020440:	c0073623          	sd	zero,-1012(a4) # 80049048 <excpt+0x38>
    80020444:	00f41023          	sh	a5,0(s0)
    80020448:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8002044c:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0 scounteren.tm=1",
    80020450:	08200593          	li	a1,130
    80020454:	0000f617          	auipc	a2,0xf
    80020458:	da460613          	addi	a2,a2,-604 # 8002f1f8 <__func__.0+0x7798>
    8002045c:	00008517          	auipc	a0,0x8
    80020460:	8fc50513          	addi	a0,a0,-1796 # 80027d58 <__func__.0+0x2f8>
    80020464:	093050ef          	jal	80025cf6 <printf>
    80020468:	00029797          	auipc	a5,0x29
    8002046c:	ba97c783          	lbu	a5,-1111(a5) # 80049011 <excpt+0x1>
    80020470:	00008597          	auipc	a1,0x8
    80020474:	8c058593          	addi	a1,a1,-1856 # 80027d30 <__func__.0+0x2d0>
    80020478:	cf89                	beqz	a5,80020492 <time_test_8+0x9e>
    8002047a:	6418                	ld	a4,8(s0)
    8002047c:	47d9                	li	a5,22
    8002047e:	00008597          	auipc	a1,0x8
    80020482:	8a258593          	addi	a1,a1,-1886 # 80027d20 <__func__.0+0x2c0>
    80020486:	00f70663          	beq	a4,a5,80020492 <time_test_8+0x9e>
    8002048a:	00008597          	auipc	a1,0x8
    8002048e:	8a658593          	addi	a1,a1,-1882 # 80027d30 <__func__.0+0x2d0>
    80020492:	00008517          	auipc	a0,0x8
    80020496:	8de50513          	addi	a0,a0,-1826 # 80027d70 <__func__.0+0x310>
    8002049a:	05d050ef          	jal	80025cf6 <printf>
    8002049e:	00029797          	auipc	a5,0x29
    800204a2:	b737c783          	lbu	a5,-1165(a5) # 80049011 <excpt+0x1>
    800204a6:	c789                	beqz	a5,800204b0 <time_test_8+0xbc>
    800204a8:	6418                	ld	a4,8(s0)
    800204aa:	47d9                	li	a5,22
    800204ac:	00f70c63          	beq	a4,a5,800204c4 <time_test_8+0xd0>
    800204b0:	00008517          	auipc	a0,0x8
    800204b4:	8c850513          	addi	a0,a0,-1848 # 80027d78 <__func__.0+0x318>
    800204b8:	03f050ef          	jal	80025cf6 <printf>
    800204bc:	02900513          	li	a0,41
    800204c0:	640040ef          	jal	80024b00 <putchar>
    800204c4:	4529                	li	a0,10
    800204c6:	63a040ef          	jal	80024b00 <putchar>
    800204ca:	00029497          	auipc	s1,0x29
    800204ce:	b474c483          	lbu	s1,-1209(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    800204d2:	00008597          	auipc	a1,0x8
    800204d6:	85e58593          	addi	a1,a1,-1954 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0 scounteren.tm=1",
    800204da:	cc91                	beqz	s1,800204f6 <time_test_8+0x102>
    800204dc:	6418                	ld	a4,8(s0)
    800204de:	47d9                	li	a5,22
    TEST_END(); 
    800204e0:	00008597          	auipc	a1,0x8
    800204e4:	84058593          	addi	a1,a1,-1984 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0 scounteren.tm=1",
    800204e8:	00f70763          	beq	a4,a5,800204f6 <time_test_8+0x102>
    800204ec:	4481                	li	s1,0
    TEST_END(); 
    800204ee:	00008597          	auipc	a1,0x8
    800204f2:	84258593          	addi	a1,a1,-1982 # 80027d30 <__func__.0+0x2d0>
    800204f6:	00008517          	auipc	a0,0x8
    800204fa:	8e250513          	addi	a0,a0,-1822 # 80027dd8 <__func__.0+0x378>
    800204fe:	7f8050ef          	jal	80025cf6 <printf>
    80020502:	4511                	li	a0,4
    80020504:	ef2e00ef          	jal	80000bf6 <goto_priv>
    80020508:	fa5e00ef          	jal	800014ac <reset_state>
}
    8002050c:	60e2                	ld	ra,24(sp)
    8002050e:	6442                	ld	s0,16(sp)
    80020510:	8526                	mv	a0,s1
    80020512:	64a2                	ld	s1,8(sp)
    80020514:	6105                	addi	sp,sp,32
    80020516:	8082                	ret

0000000080020518 <time_test_9>:

bool time_test_9() {
    80020518:	1101                	addi	sp,sp,-32

    TEST_START();    
    8002051a:	00007597          	auipc	a1,0x7
    8002051e:	23e58593          	addi	a1,a1,574 # 80027758 <__func__.42>
    80020522:	00008517          	auipc	a0,0x8
    80020526:	81e50513          	addi	a0,a0,-2018 # 80027d40 <__func__.0+0x2e0>
bool time_test_9() {
    8002052a:	ec06                	sd	ra,24(sp)
    8002052c:	e822                	sd	s0,16(sp)
    8002052e:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020530:	7c6050ef          	jal	80025cf6 <printf>
    80020534:	4529                	li	a0,10
    80020536:	5ca040ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    8002053a:	4511                	li	a0,4
    8002053c:	ebae00ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    80020540:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020544:	30616073          	csrsi	mcounteren,2
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    80020548:	10617073          	csrci	scounteren,2

    goto_priv(PRIV_HU);
    8002054c:	4505                	li	a0,1
    8002054e:	ea8e00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020552:	0330000f          	fence	rw,rw
    80020556:	00029417          	auipc	s0,0x29
    8002055a:	aba40413          	addi	s0,s0,-1350 # 80049010 <excpt>
    8002055e:	4785                	li	a5,1
    80020560:	00029717          	auipc	a4,0x29
    80020564:	ae073423          	sd	zero,-1304(a4) # 80049048 <excpt+0x38>
    80020568:	00f41023          	sh	a5,0(s0)
    8002056c:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    80020570:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=0",
    80020574:	08200593          	li	a1,130
    80020578:	0000f617          	auipc	a2,0xf
    8002057c:	cf060613          	addi	a2,a2,-784 # 8002f268 <__func__.0+0x7808>
    80020580:	00007517          	auipc	a0,0x7
    80020584:	7d850513          	addi	a0,a0,2008 # 80027d58 <__func__.0+0x2f8>
    80020588:	76e050ef          	jal	80025cf6 <printf>
    8002058c:	00029797          	auipc	a5,0x29
    80020590:	a857c783          	lbu	a5,-1403(a5) # 80049011 <excpt+0x1>
    80020594:	00007597          	auipc	a1,0x7
    80020598:	79c58593          	addi	a1,a1,1948 # 80027d30 <__func__.0+0x2d0>
    8002059c:	cf89                	beqz	a5,800205b6 <time_test_9+0x9e>
    8002059e:	6418                	ld	a4,8(s0)
    800205a0:	4789                	li	a5,2
    800205a2:	00007597          	auipc	a1,0x7
    800205a6:	77e58593          	addi	a1,a1,1918 # 80027d20 <__func__.0+0x2c0>
    800205aa:	00f70663          	beq	a4,a5,800205b6 <time_test_9+0x9e>
    800205ae:	00007597          	auipc	a1,0x7
    800205b2:	78258593          	addi	a1,a1,1922 # 80027d30 <__func__.0+0x2d0>
    800205b6:	00007517          	auipc	a0,0x7
    800205ba:	7ba50513          	addi	a0,a0,1978 # 80027d70 <__func__.0+0x310>
    800205be:	738050ef          	jal	80025cf6 <printf>
    800205c2:	00029797          	auipc	a5,0x29
    800205c6:	a4f7c783          	lbu	a5,-1457(a5) # 80049011 <excpt+0x1>
    800205ca:	c789                	beqz	a5,800205d4 <time_test_9+0xbc>
    800205cc:	6418                	ld	a4,8(s0)
    800205ce:	4789                	li	a5,2
    800205d0:	00f70c63          	beq	a4,a5,800205e8 <time_test_9+0xd0>
    800205d4:	00007517          	auipc	a0,0x7
    800205d8:	7a450513          	addi	a0,a0,1956 # 80027d78 <__func__.0+0x318>
    800205dc:	71a050ef          	jal	80025cf6 <printf>
    800205e0:	02900513          	li	a0,41
    800205e4:	51c040ef          	jal	80024b00 <putchar>
    800205e8:	4529                	li	a0,10
    800205ea:	516040ef          	jal	80024b00 <putchar>
    800205ee:	00029497          	auipc	s1,0x29
    800205f2:	a234c483          	lbu	s1,-1501(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    800205f6:	00007597          	auipc	a1,0x7
    800205fa:	73a58593          	addi	a1,a1,1850 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=0",
    800205fe:	cc91                	beqz	s1,8002061a <time_test_9+0x102>
    80020600:	6418                	ld	a4,8(s0)
    80020602:	4789                	li	a5,2
    TEST_END(); 
    80020604:	00007597          	auipc	a1,0x7
    80020608:	71c58593          	addi	a1,a1,1820 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=0",
    8002060c:	00f70763          	beq	a4,a5,8002061a <time_test_9+0x102>
    80020610:	4481                	li	s1,0
    TEST_END(); 
    80020612:	00007597          	auipc	a1,0x7
    80020616:	71e58593          	addi	a1,a1,1822 # 80027d30 <__func__.0+0x2d0>
    8002061a:	00007517          	auipc	a0,0x7
    8002061e:	7be50513          	addi	a0,a0,1982 # 80027dd8 <__func__.0+0x378>
    80020622:	6d4050ef          	jal	80025cf6 <printf>
    80020626:	4511                	li	a0,4
    80020628:	dcee00ef          	jal	80000bf6 <goto_priv>
    8002062c:	e81e00ef          	jal	800014ac <reset_state>
}
    80020630:	60e2                	ld	ra,24(sp)
    80020632:	6442                	ld	s0,16(sp)
    80020634:	8526                	mv	a0,s1
    80020636:	64a2                	ld	s1,8(sp)
    80020638:	6105                	addi	sp,sp,32
    8002063a:	8082                	ret

000000008002063c <time_test_10>:

bool time_test_10() {
    8002063c:	1141                	addi	sp,sp,-16

    TEST_START();    
    8002063e:	00007597          	auipc	a1,0x7
    80020642:	12a58593          	addi	a1,a1,298 # 80027768 <__func__.41>
    80020646:	00007517          	auipc	a0,0x7
    8002064a:	6fa50513          	addi	a0,a0,1786 # 80027d40 <__func__.0+0x2e0>
bool time_test_10() {
    8002064e:	e406                	sd	ra,8(sp)
    80020650:	e022                	sd	s0,0(sp)
    TEST_START();    
    80020652:	6a4050ef          	jal	80025cf6 <printf>
    80020656:	4529                	li	a0,10
    80020658:	4a8040ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    8002065c:	4511                	li	a0,4
    8002065e:	d98e00ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    80020662:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020666:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_VS);
    8002066a:	4509                	li	a0,2
    8002066c:	d8ae00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020670:	0330000f          	fence	rw,rw
    80020674:	4785                	li	a5,1
    80020676:	00029717          	auipc	a4,0x29
    8002067a:	9c073923          	sd	zero,-1582(a4) # 80049048 <excpt+0x38>
    8002067e:	00029717          	auipc	a4,0x29
    80020682:	98f71923          	sh	a5,-1646(a4) # 80049010 <excpt>
    80020686:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8002068a:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time successful exception when mcounteren.tm=1 hcounteren.tm=1",
    8002068e:	08200593          	li	a1,130
    80020692:	0000f617          	auipc	a2,0xf
    80020696:	c4660613          	addi	a2,a2,-954 # 8002f2d8 <__func__.0+0x7878>
    8002069a:	00007517          	auipc	a0,0x7
    8002069e:	6be50513          	addi	a0,a0,1726 # 80027d58 <__func__.0+0x2f8>
    800206a2:	654050ef          	jal	80025cf6 <printf>
    800206a6:	00029797          	auipc	a5,0x29
    800206aa:	96b7c783          	lbu	a5,-1685(a5) # 80049011 <excpt+0x1>
    800206ae:	00007597          	auipc	a1,0x7
    800206b2:	67258593          	addi	a1,a1,1650 # 80027d20 <__func__.0+0x2c0>
    800206b6:	c789                	beqz	a5,800206c0 <time_test_10+0x84>
    800206b8:	00007597          	auipc	a1,0x7
    800206bc:	67858593          	addi	a1,a1,1656 # 80027d30 <__func__.0+0x2d0>
    800206c0:	00007517          	auipc	a0,0x7
    800206c4:	6b050513          	addi	a0,a0,1712 # 80027d70 <__func__.0+0x310>
    800206c8:	62e050ef          	jal	80025cf6 <printf>
    800206cc:	00029797          	auipc	a5,0x29
    800206d0:	9457c783          	lbu	a5,-1723(a5) # 80049011 <excpt+0x1>
    800206d4:	e7a1                	bnez	a5,8002071c <time_test_10+0xe0>
    800206d6:	4529                	li	a0,10
    800206d8:	428040ef          	jal	80024b00 <putchar>
    800206dc:	00029797          	auipc	a5,0x29
    800206e0:	9357c783          	lbu	a5,-1739(a5) # 80049011 <excpt+0x1>
    800206e4:	e795                	bnez	a5,80020710 <time_test_10+0xd4>
    800206e6:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    800206e8:	00007597          	auipc	a1,0x7
    800206ec:	63858593          	addi	a1,a1,1592 # 80027d20 <__func__.0+0x2c0>
    800206f0:	00007517          	auipc	a0,0x7
    800206f4:	6e850513          	addi	a0,a0,1768 # 80027dd8 <__func__.0+0x378>
    800206f8:	5fe050ef          	jal	80025cf6 <printf>
    800206fc:	4511                	li	a0,4
    800206fe:	cf8e00ef          	jal	80000bf6 <goto_priv>
    80020702:	dabe00ef          	jal	800014ac <reset_state>
}
    80020706:	60a2                	ld	ra,8(sp)
    80020708:	8522                	mv	a0,s0
    8002070a:	6402                	ld	s0,0(sp)
    8002070c:	0141                	addi	sp,sp,16
    8002070e:	8082                	ret
    TEST_ASSERT("vu access to time successful exception when mcounteren.tm=1 hcounteren.tm=1",
    80020710:	4401                	li	s0,0
    TEST_END(); 
    80020712:	00007597          	auipc	a1,0x7
    80020716:	61e58593          	addi	a1,a1,1566 # 80027d30 <__func__.0+0x2d0>
    8002071a:	bfd9                	j	800206f0 <time_test_10+0xb4>
    TEST_ASSERT("vu access to time successful exception when mcounteren.tm=1 hcounteren.tm=1",
    8002071c:	00007517          	auipc	a0,0x7
    80020720:	65c50513          	addi	a0,a0,1628 # 80027d78 <__func__.0+0x318>
    80020724:	5d2050ef          	jal	80025cf6 <printf>
    80020728:	02900513          	li	a0,41
    8002072c:	3d4040ef          	jal	80024b00 <putchar>
    80020730:	b75d                	j	800206d6 <time_test_10+0x9a>

0000000080020732 <cycle_test_1>:


bool cycle_test_1() {
    80020732:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020734:	00007597          	auipc	a1,0x7
    80020738:	04458593          	addi	a1,a1,68 # 80027778 <__func__.40>
    8002073c:	00007517          	auipc	a0,0x7
    80020740:	60450513          	addi	a0,a0,1540 # 80027d40 <__func__.0+0x2e0>
bool cycle_test_1() {
    80020744:	ec06                	sd	ra,24(sp)
    80020746:	e822                	sd	s0,16(sp)
    80020748:	e426                	sd	s1,8(sp)
    TEST_START();    
    8002074a:	5ac050ef          	jal	80025cf6 <printf>
    8002074e:	4529                	li	a0,10
    80020750:	3b0040ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    80020754:	4511                	li	a0,4
    80020756:	ca0e00ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_CY);
    8002075a:	3060f073          	csrci	mcounteren,1

    goto_priv(PRIV_VS);
    8002075e:	4509                	li	a0,2
    80020760:	c96e00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020764:	0330000f          	fence	rw,rw
    80020768:	00029417          	auipc	s0,0x29
    8002076c:	8a840413          	addi	s0,s0,-1880 # 80049010 <excpt>
    80020770:	4785                	li	a5,1
    80020772:	00029717          	auipc	a4,0x29
    80020776:	8c073b23          	sd	zero,-1834(a4) # 80049048 <excpt+0x38>
    8002077a:	00f41023          	sh	a5,0(s0)
    8002077e:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    80020782:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vs access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    80020786:	08200593          	li	a1,130
    8002078a:	0000f617          	auipc	a2,0xf
    8002078e:	b9e60613          	addi	a2,a2,-1122 # 8002f328 <__func__.0+0x78c8>
    80020792:	00007517          	auipc	a0,0x7
    80020796:	5c650513          	addi	a0,a0,1478 # 80027d58 <__func__.0+0x2f8>
    8002079a:	55c050ef          	jal	80025cf6 <printf>
    8002079e:	00029797          	auipc	a5,0x29
    800207a2:	8737c783          	lbu	a5,-1933(a5) # 80049011 <excpt+0x1>
    800207a6:	00007597          	auipc	a1,0x7
    800207aa:	58a58593          	addi	a1,a1,1418 # 80027d30 <__func__.0+0x2d0>
    800207ae:	cf89                	beqz	a5,800207c8 <cycle_test_1+0x96>
    800207b0:	6418                	ld	a4,8(s0)
    800207b2:	4789                	li	a5,2
    800207b4:	00007597          	auipc	a1,0x7
    800207b8:	56c58593          	addi	a1,a1,1388 # 80027d20 <__func__.0+0x2c0>
    800207bc:	00f70663          	beq	a4,a5,800207c8 <cycle_test_1+0x96>
    800207c0:	00007597          	auipc	a1,0x7
    800207c4:	57058593          	addi	a1,a1,1392 # 80027d30 <__func__.0+0x2d0>
    800207c8:	00007517          	auipc	a0,0x7
    800207cc:	5a850513          	addi	a0,a0,1448 # 80027d70 <__func__.0+0x310>
    800207d0:	526050ef          	jal	80025cf6 <printf>
    800207d4:	00029797          	auipc	a5,0x29
    800207d8:	83d7c783          	lbu	a5,-1987(a5) # 80049011 <excpt+0x1>
    800207dc:	c789                	beqz	a5,800207e6 <cycle_test_1+0xb4>
    800207de:	6418                	ld	a4,8(s0)
    800207e0:	4789                	li	a5,2
    800207e2:	00f70c63          	beq	a4,a5,800207fa <cycle_test_1+0xc8>
    800207e6:	00007517          	auipc	a0,0x7
    800207ea:	59250513          	addi	a0,a0,1426 # 80027d78 <__func__.0+0x318>
    800207ee:	508050ef          	jal	80025cf6 <printf>
    800207f2:	02900513          	li	a0,41
    800207f6:	30a040ef          	jal	80024b00 <putchar>
    800207fa:	4529                	li	a0,10
    800207fc:	304040ef          	jal	80024b00 <putchar>
    80020800:	00029797          	auipc	a5,0x29
    80020804:	8117c783          	lbu	a5,-2031(a5) # 80049011 <excpt+0x1>
    80020808:	4481                	li	s1,0
    8002080a:	c789                	beqz	a5,80020814 <cycle_test_1+0xe2>
    8002080c:	6404                	ld	s1,8(s0)
    8002080e:	14f9                	addi	s1,s1,-2
    80020810:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HS);
    80020814:	450d                	li	a0,3
    80020816:	be0e00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002081a:	0330000f          	fence	rw,rw
    8002081e:	4785                	li	a5,1
    80020820:	00029717          	auipc	a4,0x29
    80020824:	82073423          	sd	zero,-2008(a4) # 80049048 <excpt+0x38>
    80020828:	00f41023          	sh	a5,0(s0)
    8002082c:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    80020830:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hs access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    80020834:	08200593          	li	a1,130
    80020838:	0000f617          	auipc	a2,0xf
    8002083c:	b4060613          	addi	a2,a2,-1216 # 8002f378 <__func__.0+0x7918>
    80020840:	00007517          	auipc	a0,0x7
    80020844:	51850513          	addi	a0,a0,1304 # 80027d58 <__func__.0+0x2f8>
    80020848:	4ae050ef          	jal	80025cf6 <printf>
    8002084c:	00028797          	auipc	a5,0x28
    80020850:	7c57c783          	lbu	a5,1989(a5) # 80049011 <excpt+0x1>
    80020854:	00007597          	auipc	a1,0x7
    80020858:	4dc58593          	addi	a1,a1,1244 # 80027d30 <__func__.0+0x2d0>
    8002085c:	cf89                	beqz	a5,80020876 <cycle_test_1+0x144>
    8002085e:	6418                	ld	a4,8(s0)
    80020860:	4789                	li	a5,2
    80020862:	00007597          	auipc	a1,0x7
    80020866:	4be58593          	addi	a1,a1,1214 # 80027d20 <__func__.0+0x2c0>
    8002086a:	00f70663          	beq	a4,a5,80020876 <cycle_test_1+0x144>
    8002086e:	00007597          	auipc	a1,0x7
    80020872:	4c258593          	addi	a1,a1,1218 # 80027d30 <__func__.0+0x2d0>
    80020876:	00007517          	auipc	a0,0x7
    8002087a:	4fa50513          	addi	a0,a0,1274 # 80027d70 <__func__.0+0x310>
    8002087e:	478050ef          	jal	80025cf6 <printf>
    80020882:	00028797          	auipc	a5,0x28
    80020886:	78f7c783          	lbu	a5,1935(a5) # 80049011 <excpt+0x1>
    8002088a:	c789                	beqz	a5,80020894 <cycle_test_1+0x162>
    8002088c:	6418                	ld	a4,8(s0)
    8002088e:	4789                	li	a5,2
    80020890:	00f70c63          	beq	a4,a5,800208a8 <cycle_test_1+0x176>
    80020894:	00007517          	auipc	a0,0x7
    80020898:	4e450513          	addi	a0,a0,1252 # 80027d78 <__func__.0+0x318>
    8002089c:	45a050ef          	jal	80025cf6 <printf>
    800208a0:	02900513          	li	a0,41
    800208a4:	25c040ef          	jal	80024b00 <putchar>
    800208a8:	4529                	li	a0,10
    800208aa:	256040ef          	jal	80024b00 <putchar>
    800208ae:	c881                	beqz	s1,800208be <cycle_test_1+0x18c>
    800208b0:	00028797          	auipc	a5,0x28
    800208b4:	7617c783          	lbu	a5,1889(a5) # 80049011 <excpt+0x1>
    800208b8:	4481                	li	s1,0
    800208ba:	1a079163          	bnez	a5,80020a5c <cycle_test_1+0x32a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    800208be:	4501                	li	a0,0
    800208c0:	b36e00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    800208c4:	0330000f          	fence	rw,rw
    800208c8:	4785                	li	a5,1
    800208ca:	00028717          	auipc	a4,0x28
    800208ce:	76073f23          	sd	zero,1918(a4) # 80049048 <excpt+0x38>
    800208d2:	00f41023          	sh	a5,0(s0)
    800208d6:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    800208da:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    800208de:	08200593          	li	a1,130
    800208e2:	0000f617          	auipc	a2,0xf
    800208e6:	ae660613          	addi	a2,a2,-1306 # 8002f3c8 <__func__.0+0x7968>
    800208ea:	00007517          	auipc	a0,0x7
    800208ee:	46e50513          	addi	a0,a0,1134 # 80027d58 <__func__.0+0x2f8>
    800208f2:	404050ef          	jal	80025cf6 <printf>
    800208f6:	00028797          	auipc	a5,0x28
    800208fa:	71b7c783          	lbu	a5,1819(a5) # 80049011 <excpt+0x1>
    800208fe:	00007597          	auipc	a1,0x7
    80020902:	43258593          	addi	a1,a1,1074 # 80027d30 <__func__.0+0x2d0>
    80020906:	cf89                	beqz	a5,80020920 <cycle_test_1+0x1ee>
    80020908:	6418                	ld	a4,8(s0)
    8002090a:	4789                	li	a5,2
    8002090c:	00007597          	auipc	a1,0x7
    80020910:	41458593          	addi	a1,a1,1044 # 80027d20 <__func__.0+0x2c0>
    80020914:	00f70663          	beq	a4,a5,80020920 <cycle_test_1+0x1ee>
    80020918:	00007597          	auipc	a1,0x7
    8002091c:	41858593          	addi	a1,a1,1048 # 80027d30 <__func__.0+0x2d0>
    80020920:	00007517          	auipc	a0,0x7
    80020924:	45050513          	addi	a0,a0,1104 # 80027d70 <__func__.0+0x310>
    80020928:	3ce050ef          	jal	80025cf6 <printf>
    8002092c:	00028797          	auipc	a5,0x28
    80020930:	6e57c783          	lbu	a5,1765(a5) # 80049011 <excpt+0x1>
    80020934:	c789                	beqz	a5,8002093e <cycle_test_1+0x20c>
    80020936:	6418                	ld	a4,8(s0)
    80020938:	4789                	li	a5,2
    8002093a:	00f70c63          	beq	a4,a5,80020952 <cycle_test_1+0x220>
    8002093e:	00007517          	auipc	a0,0x7
    80020942:	43a50513          	addi	a0,a0,1082 # 80027d78 <__func__.0+0x318>
    80020946:	3b0050ef          	jal	80025cf6 <printf>
    8002094a:	02900513          	li	a0,41
    8002094e:	1b2040ef          	jal	80024b00 <putchar>
    80020952:	4529                	li	a0,10
    80020954:	1ac040ef          	jal	80024b00 <putchar>
    80020958:	c881                	beqz	s1,80020968 <cycle_test_1+0x236>
    8002095a:	00028797          	auipc	a5,0x28
    8002095e:	6b77c783          	lbu	a5,1719(a5) # 80049011 <excpt+0x1>
    80020962:	4481                	li	s1,0
    80020964:	0e079763          	bnez	a5,80020a52 <cycle_test_1+0x320>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );
    
    goto_priv(PRIV_HU);
    80020968:	4505                	li	a0,1
    8002096a:	a8ce00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002096e:	0330000f          	fence	rw,rw
    80020972:	4785                	li	a5,1
    80020974:	00028717          	auipc	a4,0x28
    80020978:	6c073a23          	sd	zero,1748(a4) # 80049048 <excpt+0x38>
    8002097c:	00f41023          	sh	a5,0(s0)
    80020980:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    80020984:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    80020988:	08200593          	li	a1,130
    8002098c:	0000f617          	auipc	a2,0xf
    80020990:	a8c60613          	addi	a2,a2,-1396 # 8002f418 <__func__.0+0x79b8>
    80020994:	00007517          	auipc	a0,0x7
    80020998:	3c450513          	addi	a0,a0,964 # 80027d58 <__func__.0+0x2f8>
    8002099c:	35a050ef          	jal	80025cf6 <printf>
    800209a0:	00028797          	auipc	a5,0x28
    800209a4:	6717c783          	lbu	a5,1649(a5) # 80049011 <excpt+0x1>
    800209a8:	00007597          	auipc	a1,0x7
    800209ac:	38858593          	addi	a1,a1,904 # 80027d30 <__func__.0+0x2d0>
    800209b0:	cf89                	beqz	a5,800209ca <cycle_test_1+0x298>
    800209b2:	6418                	ld	a4,8(s0)
    800209b4:	4789                	li	a5,2
    800209b6:	00007597          	auipc	a1,0x7
    800209ba:	36a58593          	addi	a1,a1,874 # 80027d20 <__func__.0+0x2c0>
    800209be:	00f70663          	beq	a4,a5,800209ca <cycle_test_1+0x298>
    800209c2:	00007597          	auipc	a1,0x7
    800209c6:	36e58593          	addi	a1,a1,878 # 80027d30 <__func__.0+0x2d0>
    800209ca:	00007517          	auipc	a0,0x7
    800209ce:	3a650513          	addi	a0,a0,934 # 80027d70 <__func__.0+0x310>
    800209d2:	324050ef          	jal	80025cf6 <printf>
    800209d6:	00028797          	auipc	a5,0x28
    800209da:	63b7c783          	lbu	a5,1595(a5) # 80049011 <excpt+0x1>
    800209de:	c789                	beqz	a5,800209e8 <cycle_test_1+0x2b6>
    800209e0:	6418                	ld	a4,8(s0)
    800209e2:	4789                	li	a5,2
    800209e4:	00f70c63          	beq	a4,a5,800209fc <cycle_test_1+0x2ca>
    800209e8:	00007517          	auipc	a0,0x7
    800209ec:	39050513          	addi	a0,a0,912 # 80027d78 <__func__.0+0x318>
    800209f0:	306050ef          	jal	80025cf6 <printf>
    800209f4:	02900513          	li	a0,41
    800209f8:	108040ef          	jal	80024b00 <putchar>
    800209fc:	4529                	li	a0,10
    800209fe:	102040ef          	jal	80024b00 <putchar>
    80020a02:	c095                	beqz	s1,80020a26 <cycle_test_1+0x2f4>
    80020a04:	00028497          	auipc	s1,0x28
    80020a08:	60d4c483          	lbu	s1,1549(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80020a0c:	00007597          	auipc	a1,0x7
    80020a10:	32458593          	addi	a1,a1,804 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    80020a14:	cc91                	beqz	s1,80020a30 <cycle_test_1+0x2fe>
    80020a16:	6418                	ld	a4,8(s0)
    80020a18:	4789                	li	a5,2
    TEST_END(); 
    80020a1a:	00007597          	auipc	a1,0x7
    80020a1e:	30658593          	addi	a1,a1,774 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    80020a22:	00f70763          	beq	a4,a5,80020a30 <cycle_test_1+0x2fe>
    80020a26:	4481                	li	s1,0
    TEST_END(); 
    80020a28:	00007597          	auipc	a1,0x7
    80020a2c:	30858593          	addi	a1,a1,776 # 80027d30 <__func__.0+0x2d0>
    80020a30:	00007517          	auipc	a0,0x7
    80020a34:	3a850513          	addi	a0,a0,936 # 80027dd8 <__func__.0+0x378>
    80020a38:	2be050ef          	jal	80025cf6 <printf>
    80020a3c:	4511                	li	a0,4
    80020a3e:	9b8e00ef          	jal	80000bf6 <goto_priv>
    80020a42:	a6be00ef          	jal	800014ac <reset_state>
}
    80020a46:	60e2                	ld	ra,24(sp)
    80020a48:	6442                	ld	s0,16(sp)
    80020a4a:	8526                	mv	a0,s1
    80020a4c:	64a2                	ld	s1,8(sp)
    80020a4e:	6105                	addi	sp,sp,32
    80020a50:	8082                	ret
    TEST_ASSERT("vu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    80020a52:	6404                	ld	s1,8(s0)
    80020a54:	14f9                	addi	s1,s1,-2
    80020a56:	0014b493          	seqz	s1,s1
    80020a5a:	b739                	j	80020968 <cycle_test_1+0x236>
    TEST_ASSERT("hs access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    80020a5c:	6404                	ld	s1,8(s0)
    80020a5e:	14f9                	addi	s1,s1,-2
    80020a60:	0014b493          	seqz	s1,s1
    80020a64:	bda9                	j	800208be <cycle_test_1+0x18c>

0000000080020a66 <cycle_test_2>:

bool cycle_test_2() {
    80020a66:	1141                	addi	sp,sp,-16

    TEST_START();    
    80020a68:	00007597          	auipc	a1,0x7
    80020a6c:	d2058593          	addi	a1,a1,-736 # 80027788 <__func__.39>
    80020a70:	00007517          	auipc	a0,0x7
    80020a74:	2d050513          	addi	a0,a0,720 # 80027d40 <__func__.0+0x2e0>
bool cycle_test_2() {
    80020a78:	e406                	sd	ra,8(sp)
    80020a7a:	e022                	sd	s0,0(sp)
    TEST_START();    
    80020a7c:	27a050ef          	jal	80025cf6 <printf>
    80020a80:	4529                	li	a0,10
    80020a82:	07e040ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    80020a86:	4511                	li	a0,4
    80020a88:	96ee00ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY);
    80020a8c:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_HS);
    80020a90:	450d                	li	a0,3
    80020a92:	964e00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020a96:	0330000f          	fence	rw,rw
    80020a9a:	4785                	li	a5,1
    80020a9c:	00028717          	auipc	a4,0x28
    80020aa0:	5a073623          	sd	zero,1452(a4) # 80049048 <excpt+0x38>
    80020aa4:	00028717          	auipc	a4,0x28
    80020aa8:	56f71623          	sh	a5,1388(a4) # 80049010 <excpt>
    80020aac:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    80020ab0:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hs access to cycle successful when mcounteren.cy=1",
    80020ab4:	08200593          	li	a1,130
    80020ab8:	0000f617          	auipc	a2,0xf
    80020abc:	9b060613          	addi	a2,a2,-1616 # 8002f468 <__func__.0+0x7a08>
    80020ac0:	00007517          	auipc	a0,0x7
    80020ac4:	29850513          	addi	a0,a0,664 # 80027d58 <__func__.0+0x2f8>
    80020ac8:	22e050ef          	jal	80025cf6 <printf>
    80020acc:	00028797          	auipc	a5,0x28
    80020ad0:	5457c783          	lbu	a5,1349(a5) # 80049011 <excpt+0x1>
    80020ad4:	00007597          	auipc	a1,0x7
    80020ad8:	24c58593          	addi	a1,a1,588 # 80027d20 <__func__.0+0x2c0>
    80020adc:	c789                	beqz	a5,80020ae6 <cycle_test_2+0x80>
    80020ade:	00007597          	auipc	a1,0x7
    80020ae2:	25258593          	addi	a1,a1,594 # 80027d30 <__func__.0+0x2d0>
    80020ae6:	00007517          	auipc	a0,0x7
    80020aea:	28a50513          	addi	a0,a0,650 # 80027d70 <__func__.0+0x310>
    80020aee:	208050ef          	jal	80025cf6 <printf>
    80020af2:	00028797          	auipc	a5,0x28
    80020af6:	51f7c783          	lbu	a5,1311(a5) # 80049011 <excpt+0x1>
    80020afa:	e7a1                	bnez	a5,80020b42 <cycle_test_2+0xdc>
    80020afc:	4529                	li	a0,10
    80020afe:	002040ef          	jal	80024b00 <putchar>
    80020b02:	00028797          	auipc	a5,0x28
    80020b06:	50f7c783          	lbu	a5,1295(a5) # 80049011 <excpt+0x1>
    80020b0a:	e795                	bnez	a5,80020b36 <cycle_test_2+0xd0>
    80020b0c:	4405                	li	s0,1
        excpt.triggered == false
    );
    TEST_END(); 
    80020b0e:	00007597          	auipc	a1,0x7
    80020b12:	21258593          	addi	a1,a1,530 # 80027d20 <__func__.0+0x2c0>
    80020b16:	00007517          	auipc	a0,0x7
    80020b1a:	2c250513          	addi	a0,a0,706 # 80027dd8 <__func__.0+0x378>
    80020b1e:	1d8050ef          	jal	80025cf6 <printf>
    80020b22:	4511                	li	a0,4
    80020b24:	8d2e00ef          	jal	80000bf6 <goto_priv>
    80020b28:	985e00ef          	jal	800014ac <reset_state>
}
    80020b2c:	60a2                	ld	ra,8(sp)
    80020b2e:	8522                	mv	a0,s0
    80020b30:	6402                	ld	s0,0(sp)
    80020b32:	0141                	addi	sp,sp,16
    80020b34:	8082                	ret
    TEST_ASSERT("hs access to cycle successful when mcounteren.cy=1",
    80020b36:	4401                	li	s0,0
    TEST_END(); 
    80020b38:	00007597          	auipc	a1,0x7
    80020b3c:	1f858593          	addi	a1,a1,504 # 80027d30 <__func__.0+0x2d0>
    80020b40:	bfd9                	j	80020b16 <cycle_test_2+0xb0>
    TEST_ASSERT("hs access to cycle successful when mcounteren.cy=1",
    80020b42:	00007517          	auipc	a0,0x7
    80020b46:	23650513          	addi	a0,a0,566 # 80027d78 <__func__.0+0x318>
    80020b4a:	1ac050ef          	jal	80025cf6 <printf>
    80020b4e:	02900513          	li	a0,41
    80020b52:	7af030ef          	jal	80024b00 <putchar>
    80020b56:	b75d                	j	80020afc <cycle_test_2+0x96>

0000000080020b58 <cycle_test_3>:

bool cycle_test_3() {
    80020b58:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020b5a:	00007597          	auipc	a1,0x7
    80020b5e:	c3e58593          	addi	a1,a1,-962 # 80027798 <__func__.38>
    80020b62:	00007517          	auipc	a0,0x7
    80020b66:	1de50513          	addi	a0,a0,478 # 80027d40 <__func__.0+0x2e0>
bool cycle_test_3() {
    80020b6a:	ec06                	sd	ra,24(sp)
    80020b6c:	e822                	sd	s0,16(sp)
    80020b6e:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020b70:	186050ef          	jal	80025cf6 <printf>
    80020b74:	4529                	li	a0,10
    80020b76:	78b030ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    80020b7a:	4511                	li	a0,4
    80020b7c:	87ae00ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    80020b80:	1060f073          	csrci	scounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    80020b84:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_HU);
    80020b88:	4505                	li	a0,1
    80020b8a:	86ce00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020b8e:	0330000f          	fence	rw,rw
    80020b92:	00028417          	auipc	s0,0x28
    80020b96:	47e40413          	addi	s0,s0,1150 # 80049010 <excpt>
    80020b9a:	4785                	li	a5,1
    80020b9c:	00028717          	auipc	a4,0x28
    80020ba0:	4a073623          	sd	zero,1196(a4) # 80049048 <excpt+0x38>
    80020ba4:	00f41023          	sh	a5,0(s0)
    80020ba8:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    80020bac:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when scounteren.cy=0",
    80020bb0:	08200593          	li	a1,130
    80020bb4:	0000f617          	auipc	a2,0xf
    80020bb8:	8ec60613          	addi	a2,a2,-1812 # 8002f4a0 <__func__.0+0x7a40>
    80020bbc:	00007517          	auipc	a0,0x7
    80020bc0:	19c50513          	addi	a0,a0,412 # 80027d58 <__func__.0+0x2f8>
    80020bc4:	132050ef          	jal	80025cf6 <printf>
    80020bc8:	00028797          	auipc	a5,0x28
    80020bcc:	4497c783          	lbu	a5,1097(a5) # 80049011 <excpt+0x1>
    80020bd0:	00007597          	auipc	a1,0x7
    80020bd4:	16058593          	addi	a1,a1,352 # 80027d30 <__func__.0+0x2d0>
    80020bd8:	cf89                	beqz	a5,80020bf2 <cycle_test_3+0x9a>
    80020bda:	6418                	ld	a4,8(s0)
    80020bdc:	4789                	li	a5,2
    80020bde:	00007597          	auipc	a1,0x7
    80020be2:	14258593          	addi	a1,a1,322 # 80027d20 <__func__.0+0x2c0>
    80020be6:	00f70663          	beq	a4,a5,80020bf2 <cycle_test_3+0x9a>
    80020bea:	00007597          	auipc	a1,0x7
    80020bee:	14658593          	addi	a1,a1,326 # 80027d30 <__func__.0+0x2d0>
    80020bf2:	00007517          	auipc	a0,0x7
    80020bf6:	17e50513          	addi	a0,a0,382 # 80027d70 <__func__.0+0x310>
    80020bfa:	0fc050ef          	jal	80025cf6 <printf>
    80020bfe:	00028797          	auipc	a5,0x28
    80020c02:	4137c783          	lbu	a5,1043(a5) # 80049011 <excpt+0x1>
    80020c06:	c789                	beqz	a5,80020c10 <cycle_test_3+0xb8>
    80020c08:	6418                	ld	a4,8(s0)
    80020c0a:	4789                	li	a5,2
    80020c0c:	00f70c63          	beq	a4,a5,80020c24 <cycle_test_3+0xcc>
    80020c10:	00007517          	auipc	a0,0x7
    80020c14:	16850513          	addi	a0,a0,360 # 80027d78 <__func__.0+0x318>
    80020c18:	0de050ef          	jal	80025cf6 <printf>
    80020c1c:	02900513          	li	a0,41
    80020c20:	6e1030ef          	jal	80024b00 <putchar>
    80020c24:	4529                	li	a0,10
    80020c26:	6db030ef          	jal	80024b00 <putchar>
    80020c2a:	00028497          	auipc	s1,0x28
    80020c2e:	3e74c483          	lbu	s1,999(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80020c32:	00007597          	auipc	a1,0x7
    80020c36:	0fe58593          	addi	a1,a1,254 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when scounteren.cy=0",
    80020c3a:	cc91                	beqz	s1,80020c56 <cycle_test_3+0xfe>
    80020c3c:	6418                	ld	a4,8(s0)
    80020c3e:	4789                	li	a5,2
    TEST_END(); 
    80020c40:	00007597          	auipc	a1,0x7
    80020c44:	0e058593          	addi	a1,a1,224 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when scounteren.cy=0",
    80020c48:	00f70763          	beq	a4,a5,80020c56 <cycle_test_3+0xfe>
    80020c4c:	4481                	li	s1,0
    TEST_END(); 
    80020c4e:	00007597          	auipc	a1,0x7
    80020c52:	0e258593          	addi	a1,a1,226 # 80027d30 <__func__.0+0x2d0>
    80020c56:	00007517          	auipc	a0,0x7
    80020c5a:	18250513          	addi	a0,a0,386 # 80027dd8 <__func__.0+0x378>
    80020c5e:	098050ef          	jal	80025cf6 <printf>
    80020c62:	4511                	li	a0,4
    80020c64:	f93df0ef          	jal	80000bf6 <goto_priv>
    80020c68:	845e00ef          	jal	800014ac <reset_state>
}
    80020c6c:	60e2                	ld	ra,24(sp)
    80020c6e:	6442                	ld	s0,16(sp)
    80020c70:	8526                	mv	a0,s1
    80020c72:	64a2                	ld	s1,8(sp)
    80020c74:	6105                	addi	sp,sp,32
    80020c76:	8082                	ret

0000000080020c78 <cycle_test_4>:

bool cycle_test_4() {
    80020c78:	1141                	addi	sp,sp,-16

    TEST_START();    
    80020c7a:	00007597          	auipc	a1,0x7
    80020c7e:	b2e58593          	addi	a1,a1,-1234 # 800277a8 <__func__.37>
    80020c82:	00007517          	auipc	a0,0x7
    80020c86:	0be50513          	addi	a0,a0,190 # 80027d40 <__func__.0+0x2e0>
bool cycle_test_4() {
    80020c8a:	e406                	sd	ra,8(sp)
    80020c8c:	e022                	sd	s0,0(sp)
    TEST_START();    
    80020c8e:	068050ef          	jal	80025cf6 <printf>
    80020c92:	4529                	li	a0,10
    80020c94:	66d030ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    80020c98:	4511                	li	a0,4
    80020c9a:	f5ddf0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    80020c9e:	1060e073          	csrsi	scounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    80020ca2:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_HU);
    80020ca6:	4505                	li	a0,1
    80020ca8:	f4fdf0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020cac:	0330000f          	fence	rw,rw
    80020cb0:	4785                	li	a5,1
    80020cb2:	00028717          	auipc	a4,0x28
    80020cb6:	38073b23          	sd	zero,918(a4) # 80049048 <excpt+0x38>
    80020cba:	00028717          	auipc	a4,0x28
    80020cbe:	34f71b23          	sh	a5,854(a4) # 80049010 <excpt>
    80020cc2:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    80020cc6:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle successful when mcounteren.cy=1 scounteren.cy=1",
    80020cca:	08200593          	li	a1,130
    80020cce:	0000f617          	auipc	a2,0xf
    80020cd2:	82260613          	addi	a2,a2,-2014 # 8002f4f0 <__func__.0+0x7a90>
    80020cd6:	00007517          	auipc	a0,0x7
    80020cda:	08250513          	addi	a0,a0,130 # 80027d58 <__func__.0+0x2f8>
    80020cde:	018050ef          	jal	80025cf6 <printf>
    80020ce2:	00028797          	auipc	a5,0x28
    80020ce6:	32f7c783          	lbu	a5,815(a5) # 80049011 <excpt+0x1>
    80020cea:	00007597          	auipc	a1,0x7
    80020cee:	03658593          	addi	a1,a1,54 # 80027d20 <__func__.0+0x2c0>
    80020cf2:	c789                	beqz	a5,80020cfc <cycle_test_4+0x84>
    80020cf4:	00007597          	auipc	a1,0x7
    80020cf8:	03c58593          	addi	a1,a1,60 # 80027d30 <__func__.0+0x2d0>
    80020cfc:	00007517          	auipc	a0,0x7
    80020d00:	07450513          	addi	a0,a0,116 # 80027d70 <__func__.0+0x310>
    80020d04:	7f3040ef          	jal	80025cf6 <printf>
    80020d08:	00028797          	auipc	a5,0x28
    80020d0c:	3097c783          	lbu	a5,777(a5) # 80049011 <excpt+0x1>
    80020d10:	e7a1                	bnez	a5,80020d58 <cycle_test_4+0xe0>
    80020d12:	4529                	li	a0,10
    80020d14:	5ed030ef          	jal	80024b00 <putchar>
    80020d18:	00028797          	auipc	a5,0x28
    80020d1c:	2f97c783          	lbu	a5,761(a5) # 80049011 <excpt+0x1>
    80020d20:	e795                	bnez	a5,80020d4c <cycle_test_4+0xd4>
    80020d22:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80020d24:	00007597          	auipc	a1,0x7
    80020d28:	ffc58593          	addi	a1,a1,-4 # 80027d20 <__func__.0+0x2c0>
    80020d2c:	00007517          	auipc	a0,0x7
    80020d30:	0ac50513          	addi	a0,a0,172 # 80027dd8 <__func__.0+0x378>
    80020d34:	7c3040ef          	jal	80025cf6 <printf>
    80020d38:	4511                	li	a0,4
    80020d3a:	ebddf0ef          	jal	80000bf6 <goto_priv>
    80020d3e:	f6ee00ef          	jal	800014ac <reset_state>
}
    80020d42:	60a2                	ld	ra,8(sp)
    80020d44:	8522                	mv	a0,s0
    80020d46:	6402                	ld	s0,0(sp)
    80020d48:	0141                	addi	sp,sp,16
    80020d4a:	8082                	ret
    TEST_ASSERT("hu access to cycle successful when mcounteren.cy=1 scounteren.cy=1",
    80020d4c:	4401                	li	s0,0
    TEST_END(); 
    80020d4e:	00007597          	auipc	a1,0x7
    80020d52:	fe258593          	addi	a1,a1,-30 # 80027d30 <__func__.0+0x2d0>
    80020d56:	bfd9                	j	80020d2c <cycle_test_4+0xb4>
    TEST_ASSERT("hu access to cycle successful when mcounteren.cy=1 scounteren.cy=1",
    80020d58:	00007517          	auipc	a0,0x7
    80020d5c:	02050513          	addi	a0,a0,32 # 80027d78 <__func__.0+0x318>
    80020d60:	797040ef          	jal	80025cf6 <printf>
    80020d64:	02900513          	li	a0,41
    80020d68:	599030ef          	jal	80024b00 <putchar>
    80020d6c:	b75d                	j	80020d12 <cycle_test_4+0x9a>

0000000080020d6e <cycle_test_5>:

bool cycle_test_5() {
    80020d6e:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020d70:	00007597          	auipc	a1,0x7
    80020d74:	a4858593          	addi	a1,a1,-1464 # 800277b8 <__func__.36>
    80020d78:	00007517          	auipc	a0,0x7
    80020d7c:	fc850513          	addi	a0,a0,-56 # 80027d40 <__func__.0+0x2e0>
bool cycle_test_5() {
    80020d80:	ec06                	sd	ra,24(sp)
    80020d82:	e822                	sd	s0,16(sp)
    80020d84:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020d86:	771040ef          	jal	80025cf6 <printf>
    80020d8a:	4529                	li	a0,10
    80020d8c:	575030ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    80020d90:	4511                	li	a0,4
    80020d92:	e65df0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    80020d96:	6060f073          	csrci	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    80020d9a:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_VS);
    80020d9e:	4509                	li	a0,2
    80020da0:	e57df0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020da4:	0330000f          	fence	rw,rw
    80020da8:	00028417          	auipc	s0,0x28
    80020dac:	26840413          	addi	s0,s0,616 # 80049010 <excpt>
    80020db0:	4785                	li	a5,1
    80020db2:	00028717          	auipc	a4,0x28
    80020db6:	28073b23          	sd	zero,662(a4) # 80049048 <excpt+0x38>
    80020dba:	00f41023          	sh	a5,0(s0)
    80020dbe:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    80020dc2:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vs access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0",
    80020dc6:	08200593          	li	a1,130
    80020dca:	0000e617          	auipc	a2,0xe
    80020dce:	76e60613          	addi	a2,a2,1902 # 8002f538 <__func__.0+0x7ad8>
    80020dd2:	00007517          	auipc	a0,0x7
    80020dd6:	f8650513          	addi	a0,a0,-122 # 80027d58 <__func__.0+0x2f8>
    80020dda:	71d040ef          	jal	80025cf6 <printf>
    80020dde:	00028797          	auipc	a5,0x28
    80020de2:	2337c783          	lbu	a5,563(a5) # 80049011 <excpt+0x1>
    80020de6:	00007597          	auipc	a1,0x7
    80020dea:	f4a58593          	addi	a1,a1,-182 # 80027d30 <__func__.0+0x2d0>
    80020dee:	cf89                	beqz	a5,80020e08 <cycle_test_5+0x9a>
    80020df0:	6418                	ld	a4,8(s0)
    80020df2:	47d9                	li	a5,22
    80020df4:	00007597          	auipc	a1,0x7
    80020df8:	f2c58593          	addi	a1,a1,-212 # 80027d20 <__func__.0+0x2c0>
    80020dfc:	00f70663          	beq	a4,a5,80020e08 <cycle_test_5+0x9a>
    80020e00:	00007597          	auipc	a1,0x7
    80020e04:	f3058593          	addi	a1,a1,-208 # 80027d30 <__func__.0+0x2d0>
    80020e08:	00007517          	auipc	a0,0x7
    80020e0c:	f6850513          	addi	a0,a0,-152 # 80027d70 <__func__.0+0x310>
    80020e10:	6e7040ef          	jal	80025cf6 <printf>
    80020e14:	00028797          	auipc	a5,0x28
    80020e18:	1fd7c783          	lbu	a5,509(a5) # 80049011 <excpt+0x1>
    80020e1c:	c789                	beqz	a5,80020e26 <cycle_test_5+0xb8>
    80020e1e:	6418                	ld	a4,8(s0)
    80020e20:	47d9                	li	a5,22
    80020e22:	00f70c63          	beq	a4,a5,80020e3a <cycle_test_5+0xcc>
    80020e26:	00007517          	auipc	a0,0x7
    80020e2a:	f5250513          	addi	a0,a0,-174 # 80027d78 <__func__.0+0x318>
    80020e2e:	6c9040ef          	jal	80025cf6 <printf>
    80020e32:	02900513          	li	a0,41
    80020e36:	4cb030ef          	jal	80024b00 <putchar>
    80020e3a:	4529                	li	a0,10
    80020e3c:	4c5030ef          	jal	80024b00 <putchar>
    80020e40:	00028497          	auipc	s1,0x28
    80020e44:	1d14c483          	lbu	s1,465(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80020e48:	00007597          	auipc	a1,0x7
    80020e4c:	ee858593          	addi	a1,a1,-280 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0",
    80020e50:	cc91                	beqz	s1,80020e6c <cycle_test_5+0xfe>
    80020e52:	6418                	ld	a4,8(s0)
    80020e54:	47d9                	li	a5,22
    TEST_END(); 
    80020e56:	00007597          	auipc	a1,0x7
    80020e5a:	eca58593          	addi	a1,a1,-310 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0",
    80020e5e:	00f70763          	beq	a4,a5,80020e6c <cycle_test_5+0xfe>
    80020e62:	4481                	li	s1,0
    TEST_END(); 
    80020e64:	00007597          	auipc	a1,0x7
    80020e68:	ecc58593          	addi	a1,a1,-308 # 80027d30 <__func__.0+0x2d0>
    80020e6c:	00007517          	auipc	a0,0x7
    80020e70:	f6c50513          	addi	a0,a0,-148 # 80027dd8 <__func__.0+0x378>
    80020e74:	683040ef          	jal	80025cf6 <printf>
    80020e78:	4511                	li	a0,4
    80020e7a:	d7ddf0ef          	jal	80000bf6 <goto_priv>
    80020e7e:	e2ee00ef          	jal	800014ac <reset_state>
}
    80020e82:	60e2                	ld	ra,24(sp)
    80020e84:	6442                	ld	s0,16(sp)
    80020e86:	8526                	mv	a0,s1
    80020e88:	64a2                	ld	s1,8(sp)
    80020e8a:	6105                	addi	sp,sp,32
    80020e8c:	8082                	ret

0000000080020e8e <cycle_test_6>:

bool cycle_test_6() {
    80020e8e:	1141                	addi	sp,sp,-16

    TEST_START();    
    80020e90:	00007597          	auipc	a1,0x7
    80020e94:	93858593          	addi	a1,a1,-1736 # 800277c8 <__func__.35>
    80020e98:	00007517          	auipc	a0,0x7
    80020e9c:	ea850513          	addi	a0,a0,-344 # 80027d40 <__func__.0+0x2e0>
bool cycle_test_6() {
    80020ea0:	e406                	sd	ra,8(sp)
    80020ea2:	e022                	sd	s0,0(sp)
    TEST_START();    
    80020ea4:	653040ef          	jal	80025cf6 <printf>
    80020ea8:	4529                	li	a0,10
    80020eaa:	457030ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    80020eae:	4511                	li	a0,4
    80020eb0:	d47df0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    80020eb4:	6060e073          	csrsi	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    80020eb8:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_VS);
    80020ebc:	4509                	li	a0,2
    80020ebe:	d39df0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020ec2:	0330000f          	fence	rw,rw
    80020ec6:	4785                	li	a5,1
    80020ec8:	00028717          	auipc	a4,0x28
    80020ecc:	18073023          	sd	zero,384(a4) # 80049048 <excpt+0x38>
    80020ed0:	00028717          	auipc	a4,0x28
    80020ed4:	14f71023          	sh	a5,320(a4) # 80049010 <excpt>
    80020ed8:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    80020edc:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vs access to cycle successful when mcounteren.cy=1 hcounteren.cy=1",
    80020ee0:	08200593          	li	a1,130
    80020ee4:	0000e617          	auipc	a2,0xe
    80020ee8:	6b460613          	addi	a2,a2,1716 # 8002f598 <__func__.0+0x7b38>
    80020eec:	00007517          	auipc	a0,0x7
    80020ef0:	e6c50513          	addi	a0,a0,-404 # 80027d58 <__func__.0+0x2f8>
    80020ef4:	603040ef          	jal	80025cf6 <printf>
    80020ef8:	00028797          	auipc	a5,0x28
    80020efc:	1197c783          	lbu	a5,281(a5) # 80049011 <excpt+0x1>
    80020f00:	00007597          	auipc	a1,0x7
    80020f04:	e2058593          	addi	a1,a1,-480 # 80027d20 <__func__.0+0x2c0>
    80020f08:	c789                	beqz	a5,80020f12 <cycle_test_6+0x84>
    80020f0a:	00007597          	auipc	a1,0x7
    80020f0e:	e2658593          	addi	a1,a1,-474 # 80027d30 <__func__.0+0x2d0>
    80020f12:	00007517          	auipc	a0,0x7
    80020f16:	e5e50513          	addi	a0,a0,-418 # 80027d70 <__func__.0+0x310>
    80020f1a:	5dd040ef          	jal	80025cf6 <printf>
    80020f1e:	00028797          	auipc	a5,0x28
    80020f22:	0f37c783          	lbu	a5,243(a5) # 80049011 <excpt+0x1>
    80020f26:	e7a1                	bnez	a5,80020f6e <cycle_test_6+0xe0>
    80020f28:	4529                	li	a0,10
    80020f2a:	3d7030ef          	jal	80024b00 <putchar>
    80020f2e:	00028797          	auipc	a5,0x28
    80020f32:	0e37c783          	lbu	a5,227(a5) # 80049011 <excpt+0x1>
    80020f36:	e795                	bnez	a5,80020f62 <cycle_test_6+0xd4>
    80020f38:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80020f3a:	00007597          	auipc	a1,0x7
    80020f3e:	de658593          	addi	a1,a1,-538 # 80027d20 <__func__.0+0x2c0>
    80020f42:	00007517          	auipc	a0,0x7
    80020f46:	e9650513          	addi	a0,a0,-362 # 80027dd8 <__func__.0+0x378>
    80020f4a:	5ad040ef          	jal	80025cf6 <printf>
    80020f4e:	4511                	li	a0,4
    80020f50:	ca7df0ef          	jal	80000bf6 <goto_priv>
    80020f54:	d58e00ef          	jal	800014ac <reset_state>
}
    80020f58:	60a2                	ld	ra,8(sp)
    80020f5a:	8522                	mv	a0,s0
    80020f5c:	6402                	ld	s0,0(sp)
    80020f5e:	0141                	addi	sp,sp,16
    80020f60:	8082                	ret
    TEST_ASSERT("vs access to cycle successful when mcounteren.cy=1 hcounteren.cy=1",
    80020f62:	4401                	li	s0,0
    TEST_END(); 
    80020f64:	00007597          	auipc	a1,0x7
    80020f68:	dcc58593          	addi	a1,a1,-564 # 80027d30 <__func__.0+0x2d0>
    80020f6c:	bfd9                	j	80020f42 <cycle_test_6+0xb4>
    TEST_ASSERT("vs access to cycle successful when mcounteren.cy=1 hcounteren.cy=1",
    80020f6e:	00007517          	auipc	a0,0x7
    80020f72:	e0a50513          	addi	a0,a0,-502 # 80027d78 <__func__.0+0x318>
    80020f76:	581040ef          	jal	80025cf6 <printf>
    80020f7a:	02900513          	li	a0,41
    80020f7e:	383030ef          	jal	80024b00 <putchar>
    80020f82:	b75d                	j	80020f28 <cycle_test_6+0x9a>

0000000080020f84 <cycle_test_7>:

bool cycle_test_7() {
    80020f84:	1141                	addi	sp,sp,-16

    TEST_START();    
    80020f86:	00007597          	auipc	a1,0x7
    80020f8a:	85258593          	addi	a1,a1,-1966 # 800277d8 <__func__.34>
    80020f8e:	00007517          	auipc	a0,0x7
    80020f92:	db250513          	addi	a0,a0,-590 # 80027d40 <__func__.0+0x2e0>
bool cycle_test_7() {
    80020f96:	e406                	sd	ra,8(sp)
    80020f98:	e022                	sd	s0,0(sp)
    TEST_START();    
    80020f9a:	55d040ef          	jal	80025cf6 <printf>
    80020f9e:	4529                	li	a0,10
    80020fa0:	361030ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    80020fa4:	4511                	li	a0,4
    80020fa6:	c51df0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    80020faa:	6060e073          	csrsi	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    80020fae:	3060e073          	csrsi	mcounteren,1
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    80020fb2:	1060e073          	csrsi	scounteren,1

    goto_priv(PRIV_VU);
    80020fb6:	4501                	li	a0,0
    80020fb8:	c3fdf0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020fbc:	0330000f          	fence	rw,rw
    80020fc0:	4785                	li	a5,1
    80020fc2:	00028717          	auipc	a4,0x28
    80020fc6:	08073323          	sd	zero,134(a4) # 80049048 <excpt+0x38>
    80020fca:	00028717          	auipc	a4,0x28
    80020fce:	04f71323          	sh	a5,70(a4) # 80049010 <excpt>
    80020fd2:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    80020fd6:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to cycle successful when mcounteren.cy=1 hcounteren.cy=1 scounteren.cy=1",
    80020fda:	08200593          	li	a1,130
    80020fde:	0000e617          	auipc	a2,0xe
    80020fe2:	60260613          	addi	a2,a2,1538 # 8002f5e0 <__func__.0+0x7b80>
    80020fe6:	00007517          	auipc	a0,0x7
    80020fea:	d7250513          	addi	a0,a0,-654 # 80027d58 <__func__.0+0x2f8>
    80020fee:	509040ef          	jal	80025cf6 <printf>
    80020ff2:	00028797          	auipc	a5,0x28
    80020ff6:	01f7c783          	lbu	a5,31(a5) # 80049011 <excpt+0x1>
    80020ffa:	00007597          	auipc	a1,0x7
    80020ffe:	d2658593          	addi	a1,a1,-730 # 80027d20 <__func__.0+0x2c0>
    80021002:	c789                	beqz	a5,8002100c <cycle_test_7+0x88>
    80021004:	00007597          	auipc	a1,0x7
    80021008:	d2c58593          	addi	a1,a1,-724 # 80027d30 <__func__.0+0x2d0>
    8002100c:	00007517          	auipc	a0,0x7
    80021010:	d6450513          	addi	a0,a0,-668 # 80027d70 <__func__.0+0x310>
    80021014:	4e3040ef          	jal	80025cf6 <printf>
    80021018:	00028797          	auipc	a5,0x28
    8002101c:	ff97c783          	lbu	a5,-7(a5) # 80049011 <excpt+0x1>
    80021020:	e7a1                	bnez	a5,80021068 <cycle_test_7+0xe4>
    80021022:	4529                	li	a0,10
    80021024:	2dd030ef          	jal	80024b00 <putchar>
    80021028:	00028797          	auipc	a5,0x28
    8002102c:	fe97c783          	lbu	a5,-23(a5) # 80049011 <excpt+0x1>
    80021030:	e795                	bnez	a5,8002105c <cycle_test_7+0xd8>
    80021032:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80021034:	00007597          	auipc	a1,0x7
    80021038:	cec58593          	addi	a1,a1,-788 # 80027d20 <__func__.0+0x2c0>
    8002103c:	00007517          	auipc	a0,0x7
    80021040:	d9c50513          	addi	a0,a0,-612 # 80027dd8 <__func__.0+0x378>
    80021044:	4b3040ef          	jal	80025cf6 <printf>
    80021048:	4511                	li	a0,4
    8002104a:	baddf0ef          	jal	80000bf6 <goto_priv>
    8002104e:	c5ee00ef          	jal	800014ac <reset_state>
}
    80021052:	60a2                	ld	ra,8(sp)
    80021054:	8522                	mv	a0,s0
    80021056:	6402                	ld	s0,0(sp)
    80021058:	0141                	addi	sp,sp,16
    8002105a:	8082                	ret
    TEST_ASSERT("vu access to cycle successful when mcounteren.cy=1 hcounteren.cy=1 scounteren.cy=1",
    8002105c:	4401                	li	s0,0
    TEST_END(); 
    8002105e:	00007597          	auipc	a1,0x7
    80021062:	cd258593          	addi	a1,a1,-814 # 80027d30 <__func__.0+0x2d0>
    80021066:	bfd9                	j	8002103c <cycle_test_7+0xb8>
    TEST_ASSERT("vu access to cycle successful when mcounteren.cy=1 hcounteren.cy=1 scounteren.cy=1",
    80021068:	00007517          	auipc	a0,0x7
    8002106c:	d1050513          	addi	a0,a0,-752 # 80027d78 <__func__.0+0x318>
    80021070:	487040ef          	jal	80025cf6 <printf>
    80021074:	02900513          	li	a0,41
    80021078:	289030ef          	jal	80024b00 <putchar>
    8002107c:	b75d                	j	80021022 <cycle_test_7+0x9e>

000000008002107e <cycle_test_8>:

bool cycle_test_8() {
    8002107e:	1101                	addi	sp,sp,-32

    TEST_START();    
    80021080:	00006597          	auipc	a1,0x6
    80021084:	76858593          	addi	a1,a1,1896 # 800277e8 <__func__.33>
    80021088:	00007517          	auipc	a0,0x7
    8002108c:	cb850513          	addi	a0,a0,-840 # 80027d40 <__func__.0+0x2e0>
bool cycle_test_8() {
    80021090:	ec06                	sd	ra,24(sp)
    80021092:	e822                	sd	s0,16(sp)
    80021094:	e426                	sd	s1,8(sp)
    TEST_START();    
    80021096:	461040ef          	jal	80025cf6 <printf>
    8002109a:	4529                	li	a0,10
    8002109c:	265030ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    800210a0:	4511                	li	a0,4
    800210a2:	b55df0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    800210a6:	6060f073          	csrci	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    800210aa:	3060e073          	csrsi	mcounteren,1
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    800210ae:	1060e073          	csrsi	scounteren,1

    goto_priv(PRIV_VU);
    800210b2:	4501                	li	a0,0
    800210b4:	b43df0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    800210b8:	0330000f          	fence	rw,rw
    800210bc:	00028417          	auipc	s0,0x28
    800210c0:	f5440413          	addi	s0,s0,-172 # 80049010 <excpt>
    800210c4:	4785                	li	a5,1
    800210c6:	00028717          	auipc	a4,0x28
    800210ca:	f8073123          	sd	zero,-126(a4) # 80049048 <excpt+0x38>
    800210ce:	00f41023          	sh	a5,0(s0)
    800210d2:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    800210d6:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0 scounteren.cy=1",
    800210da:	08200593          	li	a1,130
    800210de:	0000e617          	auipc	a2,0xe
    800210e2:	55a60613          	addi	a2,a2,1370 # 8002f638 <__func__.0+0x7bd8>
    800210e6:	00007517          	auipc	a0,0x7
    800210ea:	c7250513          	addi	a0,a0,-910 # 80027d58 <__func__.0+0x2f8>
    800210ee:	409040ef          	jal	80025cf6 <printf>
    800210f2:	00028797          	auipc	a5,0x28
    800210f6:	f1f7c783          	lbu	a5,-225(a5) # 80049011 <excpt+0x1>
    800210fa:	00007597          	auipc	a1,0x7
    800210fe:	c3658593          	addi	a1,a1,-970 # 80027d30 <__func__.0+0x2d0>
    80021102:	cf89                	beqz	a5,8002111c <cycle_test_8+0x9e>
    80021104:	6418                	ld	a4,8(s0)
    80021106:	47d9                	li	a5,22
    80021108:	00007597          	auipc	a1,0x7
    8002110c:	c1858593          	addi	a1,a1,-1000 # 80027d20 <__func__.0+0x2c0>
    80021110:	00f70663          	beq	a4,a5,8002111c <cycle_test_8+0x9e>
    80021114:	00007597          	auipc	a1,0x7
    80021118:	c1c58593          	addi	a1,a1,-996 # 80027d30 <__func__.0+0x2d0>
    8002111c:	00007517          	auipc	a0,0x7
    80021120:	c5450513          	addi	a0,a0,-940 # 80027d70 <__func__.0+0x310>
    80021124:	3d3040ef          	jal	80025cf6 <printf>
    80021128:	00028797          	auipc	a5,0x28
    8002112c:	ee97c783          	lbu	a5,-279(a5) # 80049011 <excpt+0x1>
    80021130:	c789                	beqz	a5,8002113a <cycle_test_8+0xbc>
    80021132:	6418                	ld	a4,8(s0)
    80021134:	47d9                	li	a5,22
    80021136:	00f70c63          	beq	a4,a5,8002114e <cycle_test_8+0xd0>
    8002113a:	00007517          	auipc	a0,0x7
    8002113e:	c3e50513          	addi	a0,a0,-962 # 80027d78 <__func__.0+0x318>
    80021142:	3b5040ef          	jal	80025cf6 <printf>
    80021146:	02900513          	li	a0,41
    8002114a:	1b7030ef          	jal	80024b00 <putchar>
    8002114e:	4529                	li	a0,10
    80021150:	1b1030ef          	jal	80024b00 <putchar>
    80021154:	00028497          	auipc	s1,0x28
    80021158:	ebd4c483          	lbu	s1,-323(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8002115c:	00007597          	auipc	a1,0x7
    80021160:	bd458593          	addi	a1,a1,-1068 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0 scounteren.cy=1",
    80021164:	cc91                	beqz	s1,80021180 <cycle_test_8+0x102>
    80021166:	6418                	ld	a4,8(s0)
    80021168:	47d9                	li	a5,22
    TEST_END(); 
    8002116a:	00007597          	auipc	a1,0x7
    8002116e:	bb658593          	addi	a1,a1,-1098 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0 scounteren.cy=1",
    80021172:	00f70763          	beq	a4,a5,80021180 <cycle_test_8+0x102>
    80021176:	4481                	li	s1,0
    TEST_END(); 
    80021178:	00007597          	auipc	a1,0x7
    8002117c:	bb858593          	addi	a1,a1,-1096 # 80027d30 <__func__.0+0x2d0>
    80021180:	00007517          	auipc	a0,0x7
    80021184:	c5850513          	addi	a0,a0,-936 # 80027dd8 <__func__.0+0x378>
    80021188:	36f040ef          	jal	80025cf6 <printf>
    8002118c:	4511                	li	a0,4
    8002118e:	a69df0ef          	jal	80000bf6 <goto_priv>
    80021192:	b1ae00ef          	jal	800014ac <reset_state>
}
    80021196:	60e2                	ld	ra,24(sp)
    80021198:	6442                	ld	s0,16(sp)
    8002119a:	8526                	mv	a0,s1
    8002119c:	64a2                	ld	s1,8(sp)
    8002119e:	6105                	addi	sp,sp,32
    800211a0:	8082                	ret

00000000800211a2 <cycle_test_9>:

bool cycle_test_9() {
    800211a2:	1101                	addi	sp,sp,-32

    TEST_START();    
    800211a4:	00006597          	auipc	a1,0x6
    800211a8:	65458593          	addi	a1,a1,1620 # 800277f8 <__func__.32>
    800211ac:	00007517          	auipc	a0,0x7
    800211b0:	b9450513          	addi	a0,a0,-1132 # 80027d40 <__func__.0+0x2e0>
bool cycle_test_9() {
    800211b4:	ec06                	sd	ra,24(sp)
    800211b6:	e822                	sd	s0,16(sp)
    800211b8:	e426                	sd	s1,8(sp)
    TEST_START();    
    800211ba:	33d040ef          	jal	80025cf6 <printf>
    800211be:	4529                	li	a0,10
    800211c0:	141030ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    800211c4:	4511                	li	a0,4
    800211c6:	a31df0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    800211ca:	3060e073          	csrsi	mcounteren,1
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    800211ce:	1060f073          	csrci	scounteren,1

    goto_priv(PRIV_HU);
    800211d2:	4505                	li	a0,1
    800211d4:	a23df0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    800211d8:	0330000f          	fence	rw,rw
    800211dc:	00028417          	auipc	s0,0x28
    800211e0:	e3440413          	addi	s0,s0,-460 # 80049010 <excpt>
    800211e4:	4785                	li	a5,1
    800211e6:	00028717          	auipc	a4,0x28
    800211ea:	e6073123          	sd	zero,-414(a4) # 80049048 <excpt+0x38>
    800211ee:	00f41023          	sh	a5,0(s0)
    800211f2:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    800211f6:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=1 scounteren.cy=0",
    800211fa:	08200593          	li	a1,130
    800211fe:	0000e617          	auipc	a2,0xe
    80021202:	4aa60613          	addi	a2,a2,1194 # 8002f6a8 <__func__.0+0x7c48>
    80021206:	00007517          	auipc	a0,0x7
    8002120a:	b5250513          	addi	a0,a0,-1198 # 80027d58 <__func__.0+0x2f8>
    8002120e:	2e9040ef          	jal	80025cf6 <printf>
    80021212:	00028797          	auipc	a5,0x28
    80021216:	dff7c783          	lbu	a5,-513(a5) # 80049011 <excpt+0x1>
    8002121a:	00007597          	auipc	a1,0x7
    8002121e:	b1658593          	addi	a1,a1,-1258 # 80027d30 <__func__.0+0x2d0>
    80021222:	cf89                	beqz	a5,8002123c <cycle_test_9+0x9a>
    80021224:	6418                	ld	a4,8(s0)
    80021226:	4789                	li	a5,2
    80021228:	00007597          	auipc	a1,0x7
    8002122c:	af858593          	addi	a1,a1,-1288 # 80027d20 <__func__.0+0x2c0>
    80021230:	00f70663          	beq	a4,a5,8002123c <cycle_test_9+0x9a>
    80021234:	00007597          	auipc	a1,0x7
    80021238:	afc58593          	addi	a1,a1,-1284 # 80027d30 <__func__.0+0x2d0>
    8002123c:	00007517          	auipc	a0,0x7
    80021240:	b3450513          	addi	a0,a0,-1228 # 80027d70 <__func__.0+0x310>
    80021244:	2b3040ef          	jal	80025cf6 <printf>
    80021248:	00028797          	auipc	a5,0x28
    8002124c:	dc97c783          	lbu	a5,-567(a5) # 80049011 <excpt+0x1>
    80021250:	c789                	beqz	a5,8002125a <cycle_test_9+0xb8>
    80021252:	6418                	ld	a4,8(s0)
    80021254:	4789                	li	a5,2
    80021256:	00f70c63          	beq	a4,a5,8002126e <cycle_test_9+0xcc>
    8002125a:	00007517          	auipc	a0,0x7
    8002125e:	b1e50513          	addi	a0,a0,-1250 # 80027d78 <__func__.0+0x318>
    80021262:	295040ef          	jal	80025cf6 <printf>
    80021266:	02900513          	li	a0,41
    8002126a:	097030ef          	jal	80024b00 <putchar>
    8002126e:	4529                	li	a0,10
    80021270:	091030ef          	jal	80024b00 <putchar>
    80021274:	00028497          	auipc	s1,0x28
    80021278:	d9d4c483          	lbu	s1,-611(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8002127c:	00007597          	auipc	a1,0x7
    80021280:	ab458593          	addi	a1,a1,-1356 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=1 scounteren.cy=0",
    80021284:	cc91                	beqz	s1,800212a0 <cycle_test_9+0xfe>
    80021286:	6418                	ld	a4,8(s0)
    80021288:	4789                	li	a5,2
    TEST_END(); 
    8002128a:	00007597          	auipc	a1,0x7
    8002128e:	a9658593          	addi	a1,a1,-1386 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=1 scounteren.cy=0",
    80021292:	00f70763          	beq	a4,a5,800212a0 <cycle_test_9+0xfe>
    80021296:	4481                	li	s1,0
    TEST_END(); 
    80021298:	00007597          	auipc	a1,0x7
    8002129c:	a9858593          	addi	a1,a1,-1384 # 80027d30 <__func__.0+0x2d0>
    800212a0:	00007517          	auipc	a0,0x7
    800212a4:	b3850513          	addi	a0,a0,-1224 # 80027dd8 <__func__.0+0x378>
    800212a8:	24f040ef          	jal	80025cf6 <printf>
    800212ac:	4511                	li	a0,4
    800212ae:	949df0ef          	jal	80000bf6 <goto_priv>
    800212b2:	9fae00ef          	jal	800014ac <reset_state>
}
    800212b6:	60e2                	ld	ra,24(sp)
    800212b8:	6442                	ld	s0,16(sp)
    800212ba:	8526                	mv	a0,s1
    800212bc:	64a2                	ld	s1,8(sp)
    800212be:	6105                	addi	sp,sp,32
    800212c0:	8082                	ret

00000000800212c2 <cycle_test_10>:

bool cycle_test_10() {
    800212c2:	1141                	addi	sp,sp,-16

    TEST_START();    
    800212c4:	00006597          	auipc	a1,0x6
    800212c8:	54458593          	addi	a1,a1,1348 # 80027808 <__func__.31>
    800212cc:	00007517          	auipc	a0,0x7
    800212d0:	a7450513          	addi	a0,a0,-1420 # 80027d40 <__func__.0+0x2e0>
bool cycle_test_10() {
    800212d4:	e406                	sd	ra,8(sp)
    800212d6:	e022                	sd	s0,0(sp)
    TEST_START();    
    800212d8:	21f040ef          	jal	80025cf6 <printf>
    800212dc:	4529                	li	a0,10
    800212de:	023030ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    800212e2:	4511                	li	a0,4
    800212e4:	913df0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    800212e8:	6060e073          	csrsi	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    800212ec:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_VS);
    800212f0:	4509                	li	a0,2
    800212f2:	905df0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    800212f6:	0330000f          	fence	rw,rw
    800212fa:	4785                	li	a5,1
    800212fc:	00028717          	auipc	a4,0x28
    80021300:	d4073623          	sd	zero,-692(a4) # 80049048 <excpt+0x38>
    80021304:	00028717          	auipc	a4,0x28
    80021308:	d0f71623          	sh	a5,-756(a4) # 80049010 <excpt>
    8002130c:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    80021310:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to time successful exception when mcounteren.cy=1 hcounteren.cy=1",
    80021314:	08200593          	li	a1,130
    80021318:	0000e617          	auipc	a2,0xe
    8002131c:	3f060613          	addi	a2,a2,1008 # 8002f708 <__func__.0+0x7ca8>
    80021320:	00007517          	auipc	a0,0x7
    80021324:	a3850513          	addi	a0,a0,-1480 # 80027d58 <__func__.0+0x2f8>
    80021328:	1cf040ef          	jal	80025cf6 <printf>
    8002132c:	00028797          	auipc	a5,0x28
    80021330:	ce57c783          	lbu	a5,-795(a5) # 80049011 <excpt+0x1>
    80021334:	00007597          	auipc	a1,0x7
    80021338:	9ec58593          	addi	a1,a1,-1556 # 80027d20 <__func__.0+0x2c0>
    8002133c:	c789                	beqz	a5,80021346 <cycle_test_10+0x84>
    8002133e:	00007597          	auipc	a1,0x7
    80021342:	9f258593          	addi	a1,a1,-1550 # 80027d30 <__func__.0+0x2d0>
    80021346:	00007517          	auipc	a0,0x7
    8002134a:	a2a50513          	addi	a0,a0,-1494 # 80027d70 <__func__.0+0x310>
    8002134e:	1a9040ef          	jal	80025cf6 <printf>
    80021352:	00028797          	auipc	a5,0x28
    80021356:	cbf7c783          	lbu	a5,-833(a5) # 80049011 <excpt+0x1>
    8002135a:	e7a1                	bnez	a5,800213a2 <cycle_test_10+0xe0>
    8002135c:	4529                	li	a0,10
    8002135e:	7a2030ef          	jal	80024b00 <putchar>
    80021362:	00028797          	auipc	a5,0x28
    80021366:	caf7c783          	lbu	a5,-849(a5) # 80049011 <excpt+0x1>
    8002136a:	e795                	bnez	a5,80021396 <cycle_test_10+0xd4>
    8002136c:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8002136e:	00007597          	auipc	a1,0x7
    80021372:	9b258593          	addi	a1,a1,-1614 # 80027d20 <__func__.0+0x2c0>
    80021376:	00007517          	auipc	a0,0x7
    8002137a:	a6250513          	addi	a0,a0,-1438 # 80027dd8 <__func__.0+0x378>
    8002137e:	179040ef          	jal	80025cf6 <printf>
    80021382:	4511                	li	a0,4
    80021384:	873df0ef          	jal	80000bf6 <goto_priv>
    80021388:	924e00ef          	jal	800014ac <reset_state>
}
    8002138c:	60a2                	ld	ra,8(sp)
    8002138e:	8522                	mv	a0,s0
    80021390:	6402                	ld	s0,0(sp)
    80021392:	0141                	addi	sp,sp,16
    80021394:	8082                	ret
    TEST_ASSERT("vu access to time successful exception when mcounteren.cy=1 hcounteren.cy=1",
    80021396:	4401                	li	s0,0
    TEST_END(); 
    80021398:	00007597          	auipc	a1,0x7
    8002139c:	99858593          	addi	a1,a1,-1640 # 80027d30 <__func__.0+0x2d0>
    800213a0:	bfd9                	j	80021376 <cycle_test_10+0xb4>
    TEST_ASSERT("vu access to time successful exception when mcounteren.cy=1 hcounteren.cy=1",
    800213a2:	00007517          	auipc	a0,0x7
    800213a6:	9d650513          	addi	a0,a0,-1578 # 80027d78 <__func__.0+0x318>
    800213aa:	14d040ef          	jal	80025cf6 <printf>
    800213ae:	02900513          	li	a0,41
    800213b2:	74e030ef          	jal	80024b00 <putchar>
    800213b6:	b75d                	j	8002135c <cycle_test_10+0x9a>

00000000800213b8 <instret_test_1>:


bool instret_test_1() {
    800213b8:	1101                	addi	sp,sp,-32

    TEST_START();    
    800213ba:	00006597          	auipc	a1,0x6
    800213be:	45e58593          	addi	a1,a1,1118 # 80027818 <__func__.30>
    800213c2:	00007517          	auipc	a0,0x7
    800213c6:	97e50513          	addi	a0,a0,-1666 # 80027d40 <__func__.0+0x2e0>
bool instret_test_1() {
    800213ca:	ec06                	sd	ra,24(sp)
    800213cc:	e822                	sd	s0,16(sp)
    800213ce:	e426                	sd	s1,8(sp)
    TEST_START();    
    800213d0:	127040ef          	jal	80025cf6 <printf>
    800213d4:	4529                	li	a0,10
    800213d6:	72a030ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    800213da:	4511                	li	a0,4
    800213dc:	81bdf0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_IR);
    800213e0:	30627073          	csrci	mcounteren,4

    goto_priv(PRIV_VS);
    800213e4:	4509                	li	a0,2
    800213e6:	811df0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    800213ea:	0330000f          	fence	rw,rw
    800213ee:	00028417          	auipc	s0,0x28
    800213f2:	c2240413          	addi	s0,s0,-990 # 80049010 <excpt>
    800213f6:	4785                	li	a5,1
    800213f8:	00028717          	auipc	a4,0x28
    800213fc:	c4073823          	sd	zero,-944(a4) # 80049048 <excpt+0x38>
    80021400:	00f41023          	sh	a5,0(s0)
    80021404:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    80021408:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vs access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8002140c:	08200593          	li	a1,130
    80021410:	0000e617          	auipc	a2,0xe
    80021414:	34860613          	addi	a2,a2,840 # 8002f758 <__func__.0+0x7cf8>
    80021418:	00007517          	auipc	a0,0x7
    8002141c:	94050513          	addi	a0,a0,-1728 # 80027d58 <__func__.0+0x2f8>
    80021420:	0d7040ef          	jal	80025cf6 <printf>
    80021424:	00028797          	auipc	a5,0x28
    80021428:	bed7c783          	lbu	a5,-1043(a5) # 80049011 <excpt+0x1>
    8002142c:	00007597          	auipc	a1,0x7
    80021430:	90458593          	addi	a1,a1,-1788 # 80027d30 <__func__.0+0x2d0>
    80021434:	cf89                	beqz	a5,8002144e <instret_test_1+0x96>
    80021436:	6418                	ld	a4,8(s0)
    80021438:	4789                	li	a5,2
    8002143a:	00007597          	auipc	a1,0x7
    8002143e:	8e658593          	addi	a1,a1,-1818 # 80027d20 <__func__.0+0x2c0>
    80021442:	00f70663          	beq	a4,a5,8002144e <instret_test_1+0x96>
    80021446:	00007597          	auipc	a1,0x7
    8002144a:	8ea58593          	addi	a1,a1,-1814 # 80027d30 <__func__.0+0x2d0>
    8002144e:	00007517          	auipc	a0,0x7
    80021452:	92250513          	addi	a0,a0,-1758 # 80027d70 <__func__.0+0x310>
    80021456:	0a1040ef          	jal	80025cf6 <printf>
    8002145a:	00028797          	auipc	a5,0x28
    8002145e:	bb77c783          	lbu	a5,-1097(a5) # 80049011 <excpt+0x1>
    80021462:	c789                	beqz	a5,8002146c <instret_test_1+0xb4>
    80021464:	6418                	ld	a4,8(s0)
    80021466:	4789                	li	a5,2
    80021468:	00f70c63          	beq	a4,a5,80021480 <instret_test_1+0xc8>
    8002146c:	00007517          	auipc	a0,0x7
    80021470:	90c50513          	addi	a0,a0,-1780 # 80027d78 <__func__.0+0x318>
    80021474:	083040ef          	jal	80025cf6 <printf>
    80021478:	02900513          	li	a0,41
    8002147c:	684030ef          	jal	80024b00 <putchar>
    80021480:	4529                	li	a0,10
    80021482:	67e030ef          	jal	80024b00 <putchar>
    80021486:	00028797          	auipc	a5,0x28
    8002148a:	b8b7c783          	lbu	a5,-1141(a5) # 80049011 <excpt+0x1>
    8002148e:	4481                	li	s1,0
    80021490:	c789                	beqz	a5,8002149a <instret_test_1+0xe2>
    80021492:	6404                	ld	s1,8(s0)
    80021494:	14f9                	addi	s1,s1,-2
    80021496:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HS);
    8002149a:	450d                	li	a0,3
    8002149c:	f5adf0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    800214a0:	0330000f          	fence	rw,rw
    800214a4:	4785                	li	a5,1
    800214a6:	00028717          	auipc	a4,0x28
    800214aa:	ba073123          	sd	zero,-1118(a4) # 80049048 <excpt+0x38>
    800214ae:	00f41023          	sh	a5,0(s0)
    800214b2:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    800214b6:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hs access to instret casuses illegal instruction exception when mcounteren.ir=0",
    800214ba:	08200593          	li	a1,130
    800214be:	0000e617          	auipc	a2,0xe
    800214c2:	2ea60613          	addi	a2,a2,746 # 8002f7a8 <__func__.0+0x7d48>
    800214c6:	00007517          	auipc	a0,0x7
    800214ca:	89250513          	addi	a0,a0,-1902 # 80027d58 <__func__.0+0x2f8>
    800214ce:	029040ef          	jal	80025cf6 <printf>
    800214d2:	00028797          	auipc	a5,0x28
    800214d6:	b3f7c783          	lbu	a5,-1217(a5) # 80049011 <excpt+0x1>
    800214da:	00007597          	auipc	a1,0x7
    800214de:	85658593          	addi	a1,a1,-1962 # 80027d30 <__func__.0+0x2d0>
    800214e2:	cf89                	beqz	a5,800214fc <instret_test_1+0x144>
    800214e4:	6418                	ld	a4,8(s0)
    800214e6:	4789                	li	a5,2
    800214e8:	00007597          	auipc	a1,0x7
    800214ec:	83858593          	addi	a1,a1,-1992 # 80027d20 <__func__.0+0x2c0>
    800214f0:	00f70663          	beq	a4,a5,800214fc <instret_test_1+0x144>
    800214f4:	00007597          	auipc	a1,0x7
    800214f8:	83c58593          	addi	a1,a1,-1988 # 80027d30 <__func__.0+0x2d0>
    800214fc:	00007517          	auipc	a0,0x7
    80021500:	87450513          	addi	a0,a0,-1932 # 80027d70 <__func__.0+0x310>
    80021504:	7f2040ef          	jal	80025cf6 <printf>
    80021508:	00028797          	auipc	a5,0x28
    8002150c:	b097c783          	lbu	a5,-1271(a5) # 80049011 <excpt+0x1>
    80021510:	c789                	beqz	a5,8002151a <instret_test_1+0x162>
    80021512:	6418                	ld	a4,8(s0)
    80021514:	4789                	li	a5,2
    80021516:	00f70c63          	beq	a4,a5,8002152e <instret_test_1+0x176>
    8002151a:	00007517          	auipc	a0,0x7
    8002151e:	85e50513          	addi	a0,a0,-1954 # 80027d78 <__func__.0+0x318>
    80021522:	7d4040ef          	jal	80025cf6 <printf>
    80021526:	02900513          	li	a0,41
    8002152a:	5d6030ef          	jal	80024b00 <putchar>
    8002152e:	4529                	li	a0,10
    80021530:	5d0030ef          	jal	80024b00 <putchar>
    80021534:	c881                	beqz	s1,80021544 <instret_test_1+0x18c>
    80021536:	00028797          	auipc	a5,0x28
    8002153a:	adb7c783          	lbu	a5,-1317(a5) # 80049011 <excpt+0x1>
    8002153e:	4481                	li	s1,0
    80021540:	1a079163          	bnez	a5,800216e2 <instret_test_1+0x32a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    80021544:	4501                	li	a0,0
    80021546:	eb0df0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002154a:	0330000f          	fence	rw,rw
    8002154e:	4785                	li	a5,1
    80021550:	00028717          	auipc	a4,0x28
    80021554:	ae073c23          	sd	zero,-1288(a4) # 80049048 <excpt+0x38>
    80021558:	00f41023          	sh	a5,0(s0)
    8002155c:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    80021560:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    80021564:	08200593          	li	a1,130
    80021568:	0000e617          	auipc	a2,0xe
    8002156c:	29060613          	addi	a2,a2,656 # 8002f7f8 <__func__.0+0x7d98>
    80021570:	00006517          	auipc	a0,0x6
    80021574:	7e850513          	addi	a0,a0,2024 # 80027d58 <__func__.0+0x2f8>
    80021578:	77e040ef          	jal	80025cf6 <printf>
    8002157c:	00028797          	auipc	a5,0x28
    80021580:	a957c783          	lbu	a5,-1387(a5) # 80049011 <excpt+0x1>
    80021584:	00006597          	auipc	a1,0x6
    80021588:	7ac58593          	addi	a1,a1,1964 # 80027d30 <__func__.0+0x2d0>
    8002158c:	cf89                	beqz	a5,800215a6 <instret_test_1+0x1ee>
    8002158e:	6418                	ld	a4,8(s0)
    80021590:	4789                	li	a5,2
    80021592:	00006597          	auipc	a1,0x6
    80021596:	78e58593          	addi	a1,a1,1934 # 80027d20 <__func__.0+0x2c0>
    8002159a:	00f70663          	beq	a4,a5,800215a6 <instret_test_1+0x1ee>
    8002159e:	00006597          	auipc	a1,0x6
    800215a2:	79258593          	addi	a1,a1,1938 # 80027d30 <__func__.0+0x2d0>
    800215a6:	00006517          	auipc	a0,0x6
    800215aa:	7ca50513          	addi	a0,a0,1994 # 80027d70 <__func__.0+0x310>
    800215ae:	748040ef          	jal	80025cf6 <printf>
    800215b2:	00028797          	auipc	a5,0x28
    800215b6:	a5f7c783          	lbu	a5,-1441(a5) # 80049011 <excpt+0x1>
    800215ba:	c789                	beqz	a5,800215c4 <instret_test_1+0x20c>
    800215bc:	6418                	ld	a4,8(s0)
    800215be:	4789                	li	a5,2
    800215c0:	00f70c63          	beq	a4,a5,800215d8 <instret_test_1+0x220>
    800215c4:	00006517          	auipc	a0,0x6
    800215c8:	7b450513          	addi	a0,a0,1972 # 80027d78 <__func__.0+0x318>
    800215cc:	72a040ef          	jal	80025cf6 <printf>
    800215d0:	02900513          	li	a0,41
    800215d4:	52c030ef          	jal	80024b00 <putchar>
    800215d8:	4529                	li	a0,10
    800215da:	526030ef          	jal	80024b00 <putchar>
    800215de:	c881                	beqz	s1,800215ee <instret_test_1+0x236>
    800215e0:	00028797          	auipc	a5,0x28
    800215e4:	a317c783          	lbu	a5,-1487(a5) # 80049011 <excpt+0x1>
    800215e8:	4481                	li	s1,0
    800215ea:	0e079763          	bnez	a5,800216d8 <instret_test_1+0x320>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );
    
    goto_priv(PRIV_HU);
    800215ee:	4505                	li	a0,1
    800215f0:	e06df0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    800215f4:	0330000f          	fence	rw,rw
    800215f8:	4785                	li	a5,1
    800215fa:	00028717          	auipc	a4,0x28
    800215fe:	a4073723          	sd	zero,-1458(a4) # 80049048 <excpt+0x38>
    80021602:	00f41023          	sh	a5,0(s0)
    80021606:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    8002160a:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8002160e:	08200593          	li	a1,130
    80021612:	0000e617          	auipc	a2,0xe
    80021616:	23660613          	addi	a2,a2,566 # 8002f848 <__func__.0+0x7de8>
    8002161a:	00006517          	auipc	a0,0x6
    8002161e:	73e50513          	addi	a0,a0,1854 # 80027d58 <__func__.0+0x2f8>
    80021622:	6d4040ef          	jal	80025cf6 <printf>
    80021626:	00028797          	auipc	a5,0x28
    8002162a:	9eb7c783          	lbu	a5,-1557(a5) # 80049011 <excpt+0x1>
    8002162e:	00006597          	auipc	a1,0x6
    80021632:	70258593          	addi	a1,a1,1794 # 80027d30 <__func__.0+0x2d0>
    80021636:	cf89                	beqz	a5,80021650 <instret_test_1+0x298>
    80021638:	6418                	ld	a4,8(s0)
    8002163a:	4789                	li	a5,2
    8002163c:	00006597          	auipc	a1,0x6
    80021640:	6e458593          	addi	a1,a1,1764 # 80027d20 <__func__.0+0x2c0>
    80021644:	00f70663          	beq	a4,a5,80021650 <instret_test_1+0x298>
    80021648:	00006597          	auipc	a1,0x6
    8002164c:	6e858593          	addi	a1,a1,1768 # 80027d30 <__func__.0+0x2d0>
    80021650:	00006517          	auipc	a0,0x6
    80021654:	72050513          	addi	a0,a0,1824 # 80027d70 <__func__.0+0x310>
    80021658:	69e040ef          	jal	80025cf6 <printf>
    8002165c:	00028797          	auipc	a5,0x28
    80021660:	9b57c783          	lbu	a5,-1611(a5) # 80049011 <excpt+0x1>
    80021664:	c789                	beqz	a5,8002166e <instret_test_1+0x2b6>
    80021666:	6418                	ld	a4,8(s0)
    80021668:	4789                	li	a5,2
    8002166a:	00f70c63          	beq	a4,a5,80021682 <instret_test_1+0x2ca>
    8002166e:	00006517          	auipc	a0,0x6
    80021672:	70a50513          	addi	a0,a0,1802 # 80027d78 <__func__.0+0x318>
    80021676:	680040ef          	jal	80025cf6 <printf>
    8002167a:	02900513          	li	a0,41
    8002167e:	482030ef          	jal	80024b00 <putchar>
    80021682:	4529                	li	a0,10
    80021684:	47c030ef          	jal	80024b00 <putchar>
    80021688:	c095                	beqz	s1,800216ac <instret_test_1+0x2f4>
    8002168a:	00028497          	auipc	s1,0x28
    8002168e:	9874c483          	lbu	s1,-1657(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80021692:	00006597          	auipc	a1,0x6
    80021696:	69e58593          	addi	a1,a1,1694 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8002169a:	cc91                	beqz	s1,800216b6 <instret_test_1+0x2fe>
    8002169c:	6418                	ld	a4,8(s0)
    8002169e:	4789                	li	a5,2
    TEST_END(); 
    800216a0:	00006597          	auipc	a1,0x6
    800216a4:	68058593          	addi	a1,a1,1664 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    800216a8:	00f70763          	beq	a4,a5,800216b6 <instret_test_1+0x2fe>
    800216ac:	4481                	li	s1,0
    TEST_END(); 
    800216ae:	00006597          	auipc	a1,0x6
    800216b2:	68258593          	addi	a1,a1,1666 # 80027d30 <__func__.0+0x2d0>
    800216b6:	00006517          	auipc	a0,0x6
    800216ba:	72250513          	addi	a0,a0,1826 # 80027dd8 <__func__.0+0x378>
    800216be:	638040ef          	jal	80025cf6 <printf>
    800216c2:	4511                	li	a0,4
    800216c4:	d32df0ef          	jal	80000bf6 <goto_priv>
    800216c8:	de5df0ef          	jal	800014ac <reset_state>
}
    800216cc:	60e2                	ld	ra,24(sp)
    800216ce:	6442                	ld	s0,16(sp)
    800216d0:	8526                	mv	a0,s1
    800216d2:	64a2                	ld	s1,8(sp)
    800216d4:	6105                	addi	sp,sp,32
    800216d6:	8082                	ret
    TEST_ASSERT("vu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    800216d8:	6404                	ld	s1,8(s0)
    800216da:	14f9                	addi	s1,s1,-2
    800216dc:	0014b493          	seqz	s1,s1
    800216e0:	b739                	j	800215ee <instret_test_1+0x236>
    TEST_ASSERT("hs access to instret casuses illegal instruction exception when mcounteren.ir=0",
    800216e2:	6404                	ld	s1,8(s0)
    800216e4:	14f9                	addi	s1,s1,-2
    800216e6:	0014b493          	seqz	s1,s1
    800216ea:	bda9                	j	80021544 <instret_test_1+0x18c>

00000000800216ec <instret_test_2>:

bool instret_test_2() {
    800216ec:	1141                	addi	sp,sp,-16

    TEST_START();    
    800216ee:	00006597          	auipc	a1,0x6
    800216f2:	13a58593          	addi	a1,a1,314 # 80027828 <__func__.29>
    800216f6:	00006517          	auipc	a0,0x6
    800216fa:	64a50513          	addi	a0,a0,1610 # 80027d40 <__func__.0+0x2e0>
bool instret_test_2() {
    800216fe:	e406                	sd	ra,8(sp)
    80021700:	e022                	sd	s0,0(sp)
    TEST_START();    
    80021702:	5f4040ef          	jal	80025cf6 <printf>
    80021706:	4529                	li	a0,10
    80021708:	3f8030ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    8002170c:	4511                	li	a0,4
    8002170e:	ce8df0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR);
    80021712:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_HS);
    80021716:	450d                	li	a0,3
    80021718:	cdedf0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002171c:	0330000f          	fence	rw,rw
    80021720:	4785                	li	a5,1
    80021722:	00028717          	auipc	a4,0x28
    80021726:	92073323          	sd	zero,-1754(a4) # 80049048 <excpt+0x38>
    8002172a:	00028717          	auipc	a4,0x28
    8002172e:	8ef71323          	sh	a5,-1818(a4) # 80049010 <excpt>
    80021732:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    80021736:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hs access to instret successful when mcounteren.ir=1",
    8002173a:	08200593          	li	a1,130
    8002173e:	0000e617          	auipc	a2,0xe
    80021742:	15a60613          	addi	a2,a2,346 # 8002f898 <__func__.0+0x7e38>
    80021746:	00006517          	auipc	a0,0x6
    8002174a:	61250513          	addi	a0,a0,1554 # 80027d58 <__func__.0+0x2f8>
    8002174e:	5a8040ef          	jal	80025cf6 <printf>
    80021752:	00028797          	auipc	a5,0x28
    80021756:	8bf7c783          	lbu	a5,-1857(a5) # 80049011 <excpt+0x1>
    8002175a:	00006597          	auipc	a1,0x6
    8002175e:	5c658593          	addi	a1,a1,1478 # 80027d20 <__func__.0+0x2c0>
    80021762:	c789                	beqz	a5,8002176c <instret_test_2+0x80>
    80021764:	00006597          	auipc	a1,0x6
    80021768:	5cc58593          	addi	a1,a1,1484 # 80027d30 <__func__.0+0x2d0>
    8002176c:	00006517          	auipc	a0,0x6
    80021770:	60450513          	addi	a0,a0,1540 # 80027d70 <__func__.0+0x310>
    80021774:	582040ef          	jal	80025cf6 <printf>
    80021778:	00028797          	auipc	a5,0x28
    8002177c:	8997c783          	lbu	a5,-1895(a5) # 80049011 <excpt+0x1>
    80021780:	e7a1                	bnez	a5,800217c8 <instret_test_2+0xdc>
    80021782:	4529                	li	a0,10
    80021784:	37c030ef          	jal	80024b00 <putchar>
    80021788:	00028797          	auipc	a5,0x28
    8002178c:	8897c783          	lbu	a5,-1911(a5) # 80049011 <excpt+0x1>
    80021790:	e795                	bnez	a5,800217bc <instret_test_2+0xd0>
    80021792:	4405                	li	s0,1
        excpt.triggered == false
    );
    TEST_END(); 
    80021794:	00006597          	auipc	a1,0x6
    80021798:	58c58593          	addi	a1,a1,1420 # 80027d20 <__func__.0+0x2c0>
    8002179c:	00006517          	auipc	a0,0x6
    800217a0:	63c50513          	addi	a0,a0,1596 # 80027dd8 <__func__.0+0x378>
    800217a4:	552040ef          	jal	80025cf6 <printf>
    800217a8:	4511                	li	a0,4
    800217aa:	c4cdf0ef          	jal	80000bf6 <goto_priv>
    800217ae:	cffdf0ef          	jal	800014ac <reset_state>
}
    800217b2:	60a2                	ld	ra,8(sp)
    800217b4:	8522                	mv	a0,s0
    800217b6:	6402                	ld	s0,0(sp)
    800217b8:	0141                	addi	sp,sp,16
    800217ba:	8082                	ret
    TEST_ASSERT("hs access to instret successful when mcounteren.ir=1",
    800217bc:	4401                	li	s0,0
    TEST_END(); 
    800217be:	00006597          	auipc	a1,0x6
    800217c2:	57258593          	addi	a1,a1,1394 # 80027d30 <__func__.0+0x2d0>
    800217c6:	bfd9                	j	8002179c <instret_test_2+0xb0>
    TEST_ASSERT("hs access to instret successful when mcounteren.ir=1",
    800217c8:	00006517          	auipc	a0,0x6
    800217cc:	5b050513          	addi	a0,a0,1456 # 80027d78 <__func__.0+0x318>
    800217d0:	526040ef          	jal	80025cf6 <printf>
    800217d4:	02900513          	li	a0,41
    800217d8:	328030ef          	jal	80024b00 <putchar>
    800217dc:	b75d                	j	80021782 <instret_test_2+0x96>

00000000800217de <instret_test_3>:

bool instret_test_3() {
    800217de:	1101                	addi	sp,sp,-32

    TEST_START();    
    800217e0:	00006597          	auipc	a1,0x6
    800217e4:	05858593          	addi	a1,a1,88 # 80027838 <__func__.28>
    800217e8:	00006517          	auipc	a0,0x6
    800217ec:	55850513          	addi	a0,a0,1368 # 80027d40 <__func__.0+0x2e0>
bool instret_test_3() {
    800217f0:	ec06                	sd	ra,24(sp)
    800217f2:	e822                	sd	s0,16(sp)
    800217f4:	e426                	sd	s1,8(sp)
    TEST_START();    
    800217f6:	500040ef          	jal	80025cf6 <printf>
    800217fa:	4529                	li	a0,10
    800217fc:	304030ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    80021800:	4511                	li	a0,4
    80021802:	bf4df0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    80021806:	10627073          	csrci	scounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8002180a:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_HU);
    8002180e:	4505                	li	a0,1
    80021810:	be6df0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021814:	0330000f          	fence	rw,rw
    80021818:	00027417          	auipc	s0,0x27
    8002181c:	7f840413          	addi	s0,s0,2040 # 80049010 <excpt>
    80021820:	4785                	li	a5,1
    80021822:	00028717          	auipc	a4,0x28
    80021826:	82073323          	sd	zero,-2010(a4) # 80049048 <excpt+0x38>
    8002182a:	00f41023          	sh	a5,0(s0)
    8002182e:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    80021832:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret casuses illegal instruction exception when scounteren.ir=0",
    80021836:	08200593          	li	a1,130
    8002183a:	0000e617          	auipc	a2,0xe
    8002183e:	09660613          	addi	a2,a2,150 # 8002f8d0 <__func__.0+0x7e70>
    80021842:	00006517          	auipc	a0,0x6
    80021846:	51650513          	addi	a0,a0,1302 # 80027d58 <__func__.0+0x2f8>
    8002184a:	4ac040ef          	jal	80025cf6 <printf>
    8002184e:	00027797          	auipc	a5,0x27
    80021852:	7c37c783          	lbu	a5,1987(a5) # 80049011 <excpt+0x1>
    80021856:	00006597          	auipc	a1,0x6
    8002185a:	4da58593          	addi	a1,a1,1242 # 80027d30 <__func__.0+0x2d0>
    8002185e:	cf89                	beqz	a5,80021878 <instret_test_3+0x9a>
    80021860:	6418                	ld	a4,8(s0)
    80021862:	4789                	li	a5,2
    80021864:	00006597          	auipc	a1,0x6
    80021868:	4bc58593          	addi	a1,a1,1212 # 80027d20 <__func__.0+0x2c0>
    8002186c:	00f70663          	beq	a4,a5,80021878 <instret_test_3+0x9a>
    80021870:	00006597          	auipc	a1,0x6
    80021874:	4c058593          	addi	a1,a1,1216 # 80027d30 <__func__.0+0x2d0>
    80021878:	00006517          	auipc	a0,0x6
    8002187c:	4f850513          	addi	a0,a0,1272 # 80027d70 <__func__.0+0x310>
    80021880:	476040ef          	jal	80025cf6 <printf>
    80021884:	00027797          	auipc	a5,0x27
    80021888:	78d7c783          	lbu	a5,1933(a5) # 80049011 <excpt+0x1>
    8002188c:	c789                	beqz	a5,80021896 <instret_test_3+0xb8>
    8002188e:	6418                	ld	a4,8(s0)
    80021890:	4789                	li	a5,2
    80021892:	00f70c63          	beq	a4,a5,800218aa <instret_test_3+0xcc>
    80021896:	00006517          	auipc	a0,0x6
    8002189a:	4e250513          	addi	a0,a0,1250 # 80027d78 <__func__.0+0x318>
    8002189e:	458040ef          	jal	80025cf6 <printf>
    800218a2:	02900513          	li	a0,41
    800218a6:	25a030ef          	jal	80024b00 <putchar>
    800218aa:	4529                	li	a0,10
    800218ac:	254030ef          	jal	80024b00 <putchar>
    800218b0:	00027497          	auipc	s1,0x27
    800218b4:	7614c483          	lbu	s1,1889(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    800218b8:	00006597          	auipc	a1,0x6
    800218bc:	47858593          	addi	a1,a1,1144 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when scounteren.ir=0",
    800218c0:	cc91                	beqz	s1,800218dc <instret_test_3+0xfe>
    800218c2:	6418                	ld	a4,8(s0)
    800218c4:	4789                	li	a5,2
    TEST_END(); 
    800218c6:	00006597          	auipc	a1,0x6
    800218ca:	45a58593          	addi	a1,a1,1114 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when scounteren.ir=0",
    800218ce:	00f70763          	beq	a4,a5,800218dc <instret_test_3+0xfe>
    800218d2:	4481                	li	s1,0
    TEST_END(); 
    800218d4:	00006597          	auipc	a1,0x6
    800218d8:	45c58593          	addi	a1,a1,1116 # 80027d30 <__func__.0+0x2d0>
    800218dc:	00006517          	auipc	a0,0x6
    800218e0:	4fc50513          	addi	a0,a0,1276 # 80027dd8 <__func__.0+0x378>
    800218e4:	412040ef          	jal	80025cf6 <printf>
    800218e8:	4511                	li	a0,4
    800218ea:	b0cdf0ef          	jal	80000bf6 <goto_priv>
    800218ee:	bbfdf0ef          	jal	800014ac <reset_state>
}
    800218f2:	60e2                	ld	ra,24(sp)
    800218f4:	6442                	ld	s0,16(sp)
    800218f6:	8526                	mv	a0,s1
    800218f8:	64a2                	ld	s1,8(sp)
    800218fa:	6105                	addi	sp,sp,32
    800218fc:	8082                	ret

00000000800218fe <instret_test_4>:

bool instret_test_4() {
    800218fe:	1141                	addi	sp,sp,-16

    TEST_START();    
    80021900:	00006597          	auipc	a1,0x6
    80021904:	f4858593          	addi	a1,a1,-184 # 80027848 <__func__.27>
    80021908:	00006517          	auipc	a0,0x6
    8002190c:	43850513          	addi	a0,a0,1080 # 80027d40 <__func__.0+0x2e0>
bool instret_test_4() {
    80021910:	e406                	sd	ra,8(sp)
    80021912:	e022                	sd	s0,0(sp)
    TEST_START();    
    80021914:	3e2040ef          	jal	80025cf6 <printf>
    80021918:	4529                	li	a0,10
    8002191a:	1e6030ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    8002191e:	4511                	li	a0,4
    80021920:	ad6df0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    80021924:	10626073          	csrsi	scounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    80021928:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_HU);
    8002192c:	4505                	li	a0,1
    8002192e:	ac8df0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021932:	0330000f          	fence	rw,rw
    80021936:	4785                	li	a5,1
    80021938:	00027717          	auipc	a4,0x27
    8002193c:	70073823          	sd	zero,1808(a4) # 80049048 <excpt+0x38>
    80021940:	00027717          	auipc	a4,0x27
    80021944:	6cf71823          	sh	a5,1744(a4) # 80049010 <excpt>
    80021948:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    8002194c:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret successful when mcounteren.ir=1 scounteren.ir=1",
    80021950:	08200593          	li	a1,130
    80021954:	0000e617          	auipc	a2,0xe
    80021958:	fcc60613          	addi	a2,a2,-52 # 8002f920 <__func__.0+0x7ec0>
    8002195c:	00006517          	auipc	a0,0x6
    80021960:	3fc50513          	addi	a0,a0,1020 # 80027d58 <__func__.0+0x2f8>
    80021964:	392040ef          	jal	80025cf6 <printf>
    80021968:	00027797          	auipc	a5,0x27
    8002196c:	6a97c783          	lbu	a5,1705(a5) # 80049011 <excpt+0x1>
    80021970:	00006597          	auipc	a1,0x6
    80021974:	3b058593          	addi	a1,a1,944 # 80027d20 <__func__.0+0x2c0>
    80021978:	c789                	beqz	a5,80021982 <instret_test_4+0x84>
    8002197a:	00006597          	auipc	a1,0x6
    8002197e:	3b658593          	addi	a1,a1,950 # 80027d30 <__func__.0+0x2d0>
    80021982:	00006517          	auipc	a0,0x6
    80021986:	3ee50513          	addi	a0,a0,1006 # 80027d70 <__func__.0+0x310>
    8002198a:	36c040ef          	jal	80025cf6 <printf>
    8002198e:	00027797          	auipc	a5,0x27
    80021992:	6837c783          	lbu	a5,1667(a5) # 80049011 <excpt+0x1>
    80021996:	e7a1                	bnez	a5,800219de <instret_test_4+0xe0>
    80021998:	4529                	li	a0,10
    8002199a:	166030ef          	jal	80024b00 <putchar>
    8002199e:	00027797          	auipc	a5,0x27
    800219a2:	6737c783          	lbu	a5,1651(a5) # 80049011 <excpt+0x1>
    800219a6:	e795                	bnez	a5,800219d2 <instret_test_4+0xd4>
    800219a8:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    800219aa:	00006597          	auipc	a1,0x6
    800219ae:	37658593          	addi	a1,a1,886 # 80027d20 <__func__.0+0x2c0>
    800219b2:	00006517          	auipc	a0,0x6
    800219b6:	42650513          	addi	a0,a0,1062 # 80027dd8 <__func__.0+0x378>
    800219ba:	33c040ef          	jal	80025cf6 <printf>
    800219be:	4511                	li	a0,4
    800219c0:	a36df0ef          	jal	80000bf6 <goto_priv>
    800219c4:	ae9df0ef          	jal	800014ac <reset_state>
}
    800219c8:	60a2                	ld	ra,8(sp)
    800219ca:	8522                	mv	a0,s0
    800219cc:	6402                	ld	s0,0(sp)
    800219ce:	0141                	addi	sp,sp,16
    800219d0:	8082                	ret
    TEST_ASSERT("hu access to instret successful when mcounteren.ir=1 scounteren.ir=1",
    800219d2:	4401                	li	s0,0
    TEST_END(); 
    800219d4:	00006597          	auipc	a1,0x6
    800219d8:	35c58593          	addi	a1,a1,860 # 80027d30 <__func__.0+0x2d0>
    800219dc:	bfd9                	j	800219b2 <instret_test_4+0xb4>
    TEST_ASSERT("hu access to instret successful when mcounteren.ir=1 scounteren.ir=1",
    800219de:	00006517          	auipc	a0,0x6
    800219e2:	39a50513          	addi	a0,a0,922 # 80027d78 <__func__.0+0x318>
    800219e6:	310040ef          	jal	80025cf6 <printf>
    800219ea:	02900513          	li	a0,41
    800219ee:	112030ef          	jal	80024b00 <putchar>
    800219f2:	b75d                	j	80021998 <instret_test_4+0x9a>

00000000800219f4 <instret_test_5>:

bool instret_test_5() {
    800219f4:	1101                	addi	sp,sp,-32

    TEST_START();    
    800219f6:	00006597          	auipc	a1,0x6
    800219fa:	e6258593          	addi	a1,a1,-414 # 80027858 <__func__.26>
    800219fe:	00006517          	auipc	a0,0x6
    80021a02:	34250513          	addi	a0,a0,834 # 80027d40 <__func__.0+0x2e0>
bool instret_test_5() {
    80021a06:	ec06                	sd	ra,24(sp)
    80021a08:	e822                	sd	s0,16(sp)
    80021a0a:	e426                	sd	s1,8(sp)
    TEST_START();    
    80021a0c:	2ea040ef          	jal	80025cf6 <printf>
    80021a10:	4529                	li	a0,10
    80021a12:	0ee030ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    80021a16:	4511                	li	a0,4
    80021a18:	9dedf0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    80021a1c:	60627073          	csrci	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    80021a20:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_VS);
    80021a24:	4509                	li	a0,2
    80021a26:	9d0df0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021a2a:	0330000f          	fence	rw,rw
    80021a2e:	00027417          	auipc	s0,0x27
    80021a32:	5e240413          	addi	s0,s0,1506 # 80049010 <excpt>
    80021a36:	4785                	li	a5,1
    80021a38:	00027717          	auipc	a4,0x27
    80021a3c:	60073823          	sd	zero,1552(a4) # 80049048 <excpt+0x38>
    80021a40:	00f41023          	sh	a5,0(s0)
    80021a44:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    80021a48:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vs access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0",
    80021a4c:	08200593          	li	a1,130
    80021a50:	0000e617          	auipc	a2,0xe
    80021a54:	f1860613          	addi	a2,a2,-232 # 8002f968 <__func__.0+0x7f08>
    80021a58:	00006517          	auipc	a0,0x6
    80021a5c:	30050513          	addi	a0,a0,768 # 80027d58 <__func__.0+0x2f8>
    80021a60:	296040ef          	jal	80025cf6 <printf>
    80021a64:	00027797          	auipc	a5,0x27
    80021a68:	5ad7c783          	lbu	a5,1453(a5) # 80049011 <excpt+0x1>
    80021a6c:	00006597          	auipc	a1,0x6
    80021a70:	2c458593          	addi	a1,a1,708 # 80027d30 <__func__.0+0x2d0>
    80021a74:	cf89                	beqz	a5,80021a8e <instret_test_5+0x9a>
    80021a76:	6418                	ld	a4,8(s0)
    80021a78:	47d9                	li	a5,22
    80021a7a:	00006597          	auipc	a1,0x6
    80021a7e:	2a658593          	addi	a1,a1,678 # 80027d20 <__func__.0+0x2c0>
    80021a82:	00f70663          	beq	a4,a5,80021a8e <instret_test_5+0x9a>
    80021a86:	00006597          	auipc	a1,0x6
    80021a8a:	2aa58593          	addi	a1,a1,682 # 80027d30 <__func__.0+0x2d0>
    80021a8e:	00006517          	auipc	a0,0x6
    80021a92:	2e250513          	addi	a0,a0,738 # 80027d70 <__func__.0+0x310>
    80021a96:	260040ef          	jal	80025cf6 <printf>
    80021a9a:	00027797          	auipc	a5,0x27
    80021a9e:	5777c783          	lbu	a5,1399(a5) # 80049011 <excpt+0x1>
    80021aa2:	c789                	beqz	a5,80021aac <instret_test_5+0xb8>
    80021aa4:	6418                	ld	a4,8(s0)
    80021aa6:	47d9                	li	a5,22
    80021aa8:	00f70c63          	beq	a4,a5,80021ac0 <instret_test_5+0xcc>
    80021aac:	00006517          	auipc	a0,0x6
    80021ab0:	2cc50513          	addi	a0,a0,716 # 80027d78 <__func__.0+0x318>
    80021ab4:	242040ef          	jal	80025cf6 <printf>
    80021ab8:	02900513          	li	a0,41
    80021abc:	044030ef          	jal	80024b00 <putchar>
    80021ac0:	4529                	li	a0,10
    80021ac2:	03e030ef          	jal	80024b00 <putchar>
    80021ac6:	00027497          	auipc	s1,0x27
    80021aca:	54b4c483          	lbu	s1,1355(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80021ace:	00006597          	auipc	a1,0x6
    80021ad2:	26258593          	addi	a1,a1,610 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0",
    80021ad6:	cc91                	beqz	s1,80021af2 <instret_test_5+0xfe>
    80021ad8:	6418                	ld	a4,8(s0)
    80021ada:	47d9                	li	a5,22
    TEST_END(); 
    80021adc:	00006597          	auipc	a1,0x6
    80021ae0:	24458593          	addi	a1,a1,580 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0",
    80021ae4:	00f70763          	beq	a4,a5,80021af2 <instret_test_5+0xfe>
    80021ae8:	4481                	li	s1,0
    TEST_END(); 
    80021aea:	00006597          	auipc	a1,0x6
    80021aee:	24658593          	addi	a1,a1,582 # 80027d30 <__func__.0+0x2d0>
    80021af2:	00006517          	auipc	a0,0x6
    80021af6:	2e650513          	addi	a0,a0,742 # 80027dd8 <__func__.0+0x378>
    80021afa:	1fc040ef          	jal	80025cf6 <printf>
    80021afe:	4511                	li	a0,4
    80021b00:	8f6df0ef          	jal	80000bf6 <goto_priv>
    80021b04:	9a9df0ef          	jal	800014ac <reset_state>
}
    80021b08:	60e2                	ld	ra,24(sp)
    80021b0a:	6442                	ld	s0,16(sp)
    80021b0c:	8526                	mv	a0,s1
    80021b0e:	64a2                	ld	s1,8(sp)
    80021b10:	6105                	addi	sp,sp,32
    80021b12:	8082                	ret

0000000080021b14 <instret_test_6>:

bool instret_test_6() {
    80021b14:	1141                	addi	sp,sp,-16

    TEST_START();    
    80021b16:	00006597          	auipc	a1,0x6
    80021b1a:	d5258593          	addi	a1,a1,-686 # 80027868 <__func__.25>
    80021b1e:	00006517          	auipc	a0,0x6
    80021b22:	22250513          	addi	a0,a0,546 # 80027d40 <__func__.0+0x2e0>
bool instret_test_6() {
    80021b26:	e406                	sd	ra,8(sp)
    80021b28:	e022                	sd	s0,0(sp)
    TEST_START();    
    80021b2a:	1cc040ef          	jal	80025cf6 <printf>
    80021b2e:	4529                	li	a0,10
    80021b30:	7d1020ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    80021b34:	4511                	li	a0,4
    80021b36:	8c0df0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    80021b3a:	60626073          	csrsi	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    80021b3e:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_VS);
    80021b42:	4509                	li	a0,2
    80021b44:	8b2df0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021b48:	0330000f          	fence	rw,rw
    80021b4c:	4785                	li	a5,1
    80021b4e:	00027717          	auipc	a4,0x27
    80021b52:	4e073d23          	sd	zero,1274(a4) # 80049048 <excpt+0x38>
    80021b56:	00027717          	auipc	a4,0x27
    80021b5a:	4af71d23          	sh	a5,1210(a4) # 80049010 <excpt>
    80021b5e:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    80021b62:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vs access to instret successful when mcounteren.ir=1 hcounteren.ir=1",
    80021b66:	08200593          	li	a1,130
    80021b6a:	0000e617          	auipc	a2,0xe
    80021b6e:	e5e60613          	addi	a2,a2,-418 # 8002f9c8 <__func__.0+0x7f68>
    80021b72:	00006517          	auipc	a0,0x6
    80021b76:	1e650513          	addi	a0,a0,486 # 80027d58 <__func__.0+0x2f8>
    80021b7a:	17c040ef          	jal	80025cf6 <printf>
    80021b7e:	00027797          	auipc	a5,0x27
    80021b82:	4937c783          	lbu	a5,1171(a5) # 80049011 <excpt+0x1>
    80021b86:	00006597          	auipc	a1,0x6
    80021b8a:	19a58593          	addi	a1,a1,410 # 80027d20 <__func__.0+0x2c0>
    80021b8e:	c789                	beqz	a5,80021b98 <instret_test_6+0x84>
    80021b90:	00006597          	auipc	a1,0x6
    80021b94:	1a058593          	addi	a1,a1,416 # 80027d30 <__func__.0+0x2d0>
    80021b98:	00006517          	auipc	a0,0x6
    80021b9c:	1d850513          	addi	a0,a0,472 # 80027d70 <__func__.0+0x310>
    80021ba0:	156040ef          	jal	80025cf6 <printf>
    80021ba4:	00027797          	auipc	a5,0x27
    80021ba8:	46d7c783          	lbu	a5,1133(a5) # 80049011 <excpt+0x1>
    80021bac:	e7a1                	bnez	a5,80021bf4 <instret_test_6+0xe0>
    80021bae:	4529                	li	a0,10
    80021bb0:	751020ef          	jal	80024b00 <putchar>
    80021bb4:	00027797          	auipc	a5,0x27
    80021bb8:	45d7c783          	lbu	a5,1117(a5) # 80049011 <excpt+0x1>
    80021bbc:	e795                	bnez	a5,80021be8 <instret_test_6+0xd4>
    80021bbe:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80021bc0:	00006597          	auipc	a1,0x6
    80021bc4:	16058593          	addi	a1,a1,352 # 80027d20 <__func__.0+0x2c0>
    80021bc8:	00006517          	auipc	a0,0x6
    80021bcc:	21050513          	addi	a0,a0,528 # 80027dd8 <__func__.0+0x378>
    80021bd0:	126040ef          	jal	80025cf6 <printf>
    80021bd4:	4511                	li	a0,4
    80021bd6:	820df0ef          	jal	80000bf6 <goto_priv>
    80021bda:	8d3df0ef          	jal	800014ac <reset_state>
}
    80021bde:	60a2                	ld	ra,8(sp)
    80021be0:	8522                	mv	a0,s0
    80021be2:	6402                	ld	s0,0(sp)
    80021be4:	0141                	addi	sp,sp,16
    80021be6:	8082                	ret
    TEST_ASSERT("vs access to instret successful when mcounteren.ir=1 hcounteren.ir=1",
    80021be8:	4401                	li	s0,0
    TEST_END(); 
    80021bea:	00006597          	auipc	a1,0x6
    80021bee:	14658593          	addi	a1,a1,326 # 80027d30 <__func__.0+0x2d0>
    80021bf2:	bfd9                	j	80021bc8 <instret_test_6+0xb4>
    TEST_ASSERT("vs access to instret successful when mcounteren.ir=1 hcounteren.ir=1",
    80021bf4:	00006517          	auipc	a0,0x6
    80021bf8:	18450513          	addi	a0,a0,388 # 80027d78 <__func__.0+0x318>
    80021bfc:	0fa040ef          	jal	80025cf6 <printf>
    80021c00:	02900513          	li	a0,41
    80021c04:	6fd020ef          	jal	80024b00 <putchar>
    80021c08:	b75d                	j	80021bae <instret_test_6+0x9a>

0000000080021c0a <instret_test_7>:

bool instret_test_7() {
    80021c0a:	1141                	addi	sp,sp,-16

    TEST_START();    
    80021c0c:	00006597          	auipc	a1,0x6
    80021c10:	c6c58593          	addi	a1,a1,-916 # 80027878 <__func__.24>
    80021c14:	00006517          	auipc	a0,0x6
    80021c18:	12c50513          	addi	a0,a0,300 # 80027d40 <__func__.0+0x2e0>
bool instret_test_7() {
    80021c1c:	e406                	sd	ra,8(sp)
    80021c1e:	e022                	sd	s0,0(sp)
    TEST_START();    
    80021c20:	0d6040ef          	jal	80025cf6 <printf>
    80021c24:	4529                	li	a0,10
    80021c26:	6db020ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    80021c2a:	4511                	li	a0,4
    80021c2c:	fcbde0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    80021c30:	60626073          	csrsi	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    80021c34:	30626073          	csrsi	mcounteren,4
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    80021c38:	10626073          	csrsi	scounteren,4

    goto_priv(PRIV_VU);
    80021c3c:	4501                	li	a0,0
    80021c3e:	fb9de0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021c42:	0330000f          	fence	rw,rw
    80021c46:	4785                	li	a5,1
    80021c48:	00027717          	auipc	a4,0x27
    80021c4c:	40073023          	sd	zero,1024(a4) # 80049048 <excpt+0x38>
    80021c50:	00027717          	auipc	a4,0x27
    80021c54:	3cf71023          	sh	a5,960(a4) # 80049010 <excpt>
    80021c58:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    80021c5c:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret successful when mcounteren.ir=1 hcounteren.ir=1 scounteren.ir=1",
    80021c60:	08200593          	li	a1,130
    80021c64:	0000e617          	auipc	a2,0xe
    80021c68:	dac60613          	addi	a2,a2,-596 # 8002fa10 <__func__.0+0x7fb0>
    80021c6c:	00006517          	auipc	a0,0x6
    80021c70:	0ec50513          	addi	a0,a0,236 # 80027d58 <__func__.0+0x2f8>
    80021c74:	082040ef          	jal	80025cf6 <printf>
    80021c78:	00027797          	auipc	a5,0x27
    80021c7c:	3997c783          	lbu	a5,921(a5) # 80049011 <excpt+0x1>
    80021c80:	00006597          	auipc	a1,0x6
    80021c84:	0a058593          	addi	a1,a1,160 # 80027d20 <__func__.0+0x2c0>
    80021c88:	c789                	beqz	a5,80021c92 <instret_test_7+0x88>
    80021c8a:	00006597          	auipc	a1,0x6
    80021c8e:	0a658593          	addi	a1,a1,166 # 80027d30 <__func__.0+0x2d0>
    80021c92:	00006517          	auipc	a0,0x6
    80021c96:	0de50513          	addi	a0,a0,222 # 80027d70 <__func__.0+0x310>
    80021c9a:	05c040ef          	jal	80025cf6 <printf>
    80021c9e:	00027797          	auipc	a5,0x27
    80021ca2:	3737c783          	lbu	a5,883(a5) # 80049011 <excpt+0x1>
    80021ca6:	e7a1                	bnez	a5,80021cee <instret_test_7+0xe4>
    80021ca8:	4529                	li	a0,10
    80021caa:	657020ef          	jal	80024b00 <putchar>
    80021cae:	00027797          	auipc	a5,0x27
    80021cb2:	3637c783          	lbu	a5,867(a5) # 80049011 <excpt+0x1>
    80021cb6:	e795                	bnez	a5,80021ce2 <instret_test_7+0xd8>
    80021cb8:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80021cba:	00006597          	auipc	a1,0x6
    80021cbe:	06658593          	addi	a1,a1,102 # 80027d20 <__func__.0+0x2c0>
    80021cc2:	00006517          	auipc	a0,0x6
    80021cc6:	11650513          	addi	a0,a0,278 # 80027dd8 <__func__.0+0x378>
    80021cca:	02c040ef          	jal	80025cf6 <printf>
    80021cce:	4511                	li	a0,4
    80021cd0:	f27de0ef          	jal	80000bf6 <goto_priv>
    80021cd4:	fd8df0ef          	jal	800014ac <reset_state>
}
    80021cd8:	60a2                	ld	ra,8(sp)
    80021cda:	8522                	mv	a0,s0
    80021cdc:	6402                	ld	s0,0(sp)
    80021cde:	0141                	addi	sp,sp,16
    80021ce0:	8082                	ret
    TEST_ASSERT("vu access to instret successful when mcounteren.ir=1 hcounteren.ir=1 scounteren.ir=1",
    80021ce2:	4401                	li	s0,0
    TEST_END(); 
    80021ce4:	00006597          	auipc	a1,0x6
    80021ce8:	04c58593          	addi	a1,a1,76 # 80027d30 <__func__.0+0x2d0>
    80021cec:	bfd9                	j	80021cc2 <instret_test_7+0xb8>
    TEST_ASSERT("vu access to instret successful when mcounteren.ir=1 hcounteren.ir=1 scounteren.ir=1",
    80021cee:	00006517          	auipc	a0,0x6
    80021cf2:	08a50513          	addi	a0,a0,138 # 80027d78 <__func__.0+0x318>
    80021cf6:	000040ef          	jal	80025cf6 <printf>
    80021cfa:	02900513          	li	a0,41
    80021cfe:	603020ef          	jal	80024b00 <putchar>
    80021d02:	b75d                	j	80021ca8 <instret_test_7+0x9e>

0000000080021d04 <instret_test_8>:

bool instret_test_8() {
    80021d04:	1101                	addi	sp,sp,-32

    TEST_START();    
    80021d06:	00006597          	auipc	a1,0x6
    80021d0a:	b8258593          	addi	a1,a1,-1150 # 80027888 <__func__.23>
    80021d0e:	00006517          	auipc	a0,0x6
    80021d12:	03250513          	addi	a0,a0,50 # 80027d40 <__func__.0+0x2e0>
bool instret_test_8() {
    80021d16:	ec06                	sd	ra,24(sp)
    80021d18:	e822                	sd	s0,16(sp)
    80021d1a:	e426                	sd	s1,8(sp)
    TEST_START();    
    80021d1c:	7db030ef          	jal	80025cf6 <printf>
    80021d20:	4529                	li	a0,10
    80021d22:	5df020ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    80021d26:	4511                	li	a0,4
    80021d28:	ecfde0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    80021d2c:	60627073          	csrci	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    80021d30:	30626073          	csrsi	mcounteren,4
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    80021d34:	10626073          	csrsi	scounteren,4

    goto_priv(PRIV_VU);
    80021d38:	4501                	li	a0,0
    80021d3a:	ebdde0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021d3e:	0330000f          	fence	rw,rw
    80021d42:	00027417          	auipc	s0,0x27
    80021d46:	2ce40413          	addi	s0,s0,718 # 80049010 <excpt>
    80021d4a:	4785                	li	a5,1
    80021d4c:	00027717          	auipc	a4,0x27
    80021d50:	2e073e23          	sd	zero,764(a4) # 80049048 <excpt+0x38>
    80021d54:	00f41023          	sh	a5,0(s0)
    80021d58:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    80021d5c:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0 scounteren.ir=1",
    80021d60:	08200593          	li	a1,130
    80021d64:	0000e617          	auipc	a2,0xe
    80021d68:	d0460613          	addi	a2,a2,-764 # 8002fa68 <__func__.0+0x8008>
    80021d6c:	00006517          	auipc	a0,0x6
    80021d70:	fec50513          	addi	a0,a0,-20 # 80027d58 <__func__.0+0x2f8>
    80021d74:	783030ef          	jal	80025cf6 <printf>
    80021d78:	00027797          	auipc	a5,0x27
    80021d7c:	2997c783          	lbu	a5,665(a5) # 80049011 <excpt+0x1>
    80021d80:	00006597          	auipc	a1,0x6
    80021d84:	fb058593          	addi	a1,a1,-80 # 80027d30 <__func__.0+0x2d0>
    80021d88:	cf89                	beqz	a5,80021da2 <instret_test_8+0x9e>
    80021d8a:	6418                	ld	a4,8(s0)
    80021d8c:	47d9                	li	a5,22
    80021d8e:	00006597          	auipc	a1,0x6
    80021d92:	f9258593          	addi	a1,a1,-110 # 80027d20 <__func__.0+0x2c0>
    80021d96:	00f70663          	beq	a4,a5,80021da2 <instret_test_8+0x9e>
    80021d9a:	00006597          	auipc	a1,0x6
    80021d9e:	f9658593          	addi	a1,a1,-106 # 80027d30 <__func__.0+0x2d0>
    80021da2:	00006517          	auipc	a0,0x6
    80021da6:	fce50513          	addi	a0,a0,-50 # 80027d70 <__func__.0+0x310>
    80021daa:	74d030ef          	jal	80025cf6 <printf>
    80021dae:	00027797          	auipc	a5,0x27
    80021db2:	2637c783          	lbu	a5,611(a5) # 80049011 <excpt+0x1>
    80021db6:	c789                	beqz	a5,80021dc0 <instret_test_8+0xbc>
    80021db8:	6418                	ld	a4,8(s0)
    80021dba:	47d9                	li	a5,22
    80021dbc:	00f70c63          	beq	a4,a5,80021dd4 <instret_test_8+0xd0>
    80021dc0:	00006517          	auipc	a0,0x6
    80021dc4:	fb850513          	addi	a0,a0,-72 # 80027d78 <__func__.0+0x318>
    80021dc8:	72f030ef          	jal	80025cf6 <printf>
    80021dcc:	02900513          	li	a0,41
    80021dd0:	531020ef          	jal	80024b00 <putchar>
    80021dd4:	4529                	li	a0,10
    80021dd6:	52b020ef          	jal	80024b00 <putchar>
    80021dda:	00027497          	auipc	s1,0x27
    80021dde:	2374c483          	lbu	s1,567(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80021de2:	00006597          	auipc	a1,0x6
    80021de6:	f4e58593          	addi	a1,a1,-178 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0 scounteren.ir=1",
    80021dea:	cc91                	beqz	s1,80021e06 <instret_test_8+0x102>
    80021dec:	6418                	ld	a4,8(s0)
    80021dee:	47d9                	li	a5,22
    TEST_END(); 
    80021df0:	00006597          	auipc	a1,0x6
    80021df4:	f3058593          	addi	a1,a1,-208 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0 scounteren.ir=1",
    80021df8:	00f70763          	beq	a4,a5,80021e06 <instret_test_8+0x102>
    80021dfc:	4481                	li	s1,0
    TEST_END(); 
    80021dfe:	00006597          	auipc	a1,0x6
    80021e02:	f3258593          	addi	a1,a1,-206 # 80027d30 <__func__.0+0x2d0>
    80021e06:	00006517          	auipc	a0,0x6
    80021e0a:	fd250513          	addi	a0,a0,-46 # 80027dd8 <__func__.0+0x378>
    80021e0e:	6e9030ef          	jal	80025cf6 <printf>
    80021e12:	4511                	li	a0,4
    80021e14:	de3de0ef          	jal	80000bf6 <goto_priv>
    80021e18:	e94df0ef          	jal	800014ac <reset_state>
}
    80021e1c:	60e2                	ld	ra,24(sp)
    80021e1e:	6442                	ld	s0,16(sp)
    80021e20:	8526                	mv	a0,s1
    80021e22:	64a2                	ld	s1,8(sp)
    80021e24:	6105                	addi	sp,sp,32
    80021e26:	8082                	ret

0000000080021e28 <instret_test_9>:

bool instret_test_9() {
    80021e28:	1101                	addi	sp,sp,-32

    TEST_START();    
    80021e2a:	00006597          	auipc	a1,0x6
    80021e2e:	a6e58593          	addi	a1,a1,-1426 # 80027898 <__func__.22>
    80021e32:	00006517          	auipc	a0,0x6
    80021e36:	f0e50513          	addi	a0,a0,-242 # 80027d40 <__func__.0+0x2e0>
bool instret_test_9() {
    80021e3a:	ec06                	sd	ra,24(sp)
    80021e3c:	e822                	sd	s0,16(sp)
    80021e3e:	e426                	sd	s1,8(sp)
    TEST_START();    
    80021e40:	6b7030ef          	jal	80025cf6 <printf>
    80021e44:	4529                	li	a0,10
    80021e46:	4bb020ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    80021e4a:	4511                	li	a0,4
    80021e4c:	dabde0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    80021e50:	30626073          	csrsi	mcounteren,4
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    80021e54:	10627073          	csrci	scounteren,4

    goto_priv(PRIV_HU);
    80021e58:	4505                	li	a0,1
    80021e5a:	d9dde0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021e5e:	0330000f          	fence	rw,rw
    80021e62:	00027417          	auipc	s0,0x27
    80021e66:	1ae40413          	addi	s0,s0,430 # 80049010 <excpt>
    80021e6a:	4785                	li	a5,1
    80021e6c:	00027717          	auipc	a4,0x27
    80021e70:	1c073e23          	sd	zero,476(a4) # 80049048 <excpt+0x38>
    80021e74:	00f41023          	sh	a5,0(s0)
    80021e78:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    80021e7c:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=1 scounteren.ir=0",
    80021e80:	08200593          	li	a1,130
    80021e84:	0000e617          	auipc	a2,0xe
    80021e88:	c5460613          	addi	a2,a2,-940 # 8002fad8 <__func__.0+0x8078>
    80021e8c:	00006517          	auipc	a0,0x6
    80021e90:	ecc50513          	addi	a0,a0,-308 # 80027d58 <__func__.0+0x2f8>
    80021e94:	663030ef          	jal	80025cf6 <printf>
    80021e98:	00027797          	auipc	a5,0x27
    80021e9c:	1797c783          	lbu	a5,377(a5) # 80049011 <excpt+0x1>
    80021ea0:	00006597          	auipc	a1,0x6
    80021ea4:	e9058593          	addi	a1,a1,-368 # 80027d30 <__func__.0+0x2d0>
    80021ea8:	cf89                	beqz	a5,80021ec2 <instret_test_9+0x9a>
    80021eaa:	6418                	ld	a4,8(s0)
    80021eac:	4789                	li	a5,2
    80021eae:	00006597          	auipc	a1,0x6
    80021eb2:	e7258593          	addi	a1,a1,-398 # 80027d20 <__func__.0+0x2c0>
    80021eb6:	00f70663          	beq	a4,a5,80021ec2 <instret_test_9+0x9a>
    80021eba:	00006597          	auipc	a1,0x6
    80021ebe:	e7658593          	addi	a1,a1,-394 # 80027d30 <__func__.0+0x2d0>
    80021ec2:	00006517          	auipc	a0,0x6
    80021ec6:	eae50513          	addi	a0,a0,-338 # 80027d70 <__func__.0+0x310>
    80021eca:	62d030ef          	jal	80025cf6 <printf>
    80021ece:	00027797          	auipc	a5,0x27
    80021ed2:	1437c783          	lbu	a5,323(a5) # 80049011 <excpt+0x1>
    80021ed6:	c789                	beqz	a5,80021ee0 <instret_test_9+0xb8>
    80021ed8:	6418                	ld	a4,8(s0)
    80021eda:	4789                	li	a5,2
    80021edc:	00f70c63          	beq	a4,a5,80021ef4 <instret_test_9+0xcc>
    80021ee0:	00006517          	auipc	a0,0x6
    80021ee4:	e9850513          	addi	a0,a0,-360 # 80027d78 <__func__.0+0x318>
    80021ee8:	60f030ef          	jal	80025cf6 <printf>
    80021eec:	02900513          	li	a0,41
    80021ef0:	411020ef          	jal	80024b00 <putchar>
    80021ef4:	4529                	li	a0,10
    80021ef6:	40b020ef          	jal	80024b00 <putchar>
    80021efa:	00027497          	auipc	s1,0x27
    80021efe:	1174c483          	lbu	s1,279(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80021f02:	00006597          	auipc	a1,0x6
    80021f06:	e2e58593          	addi	a1,a1,-466 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=1 scounteren.ir=0",
    80021f0a:	cc91                	beqz	s1,80021f26 <instret_test_9+0xfe>
    80021f0c:	6418                	ld	a4,8(s0)
    80021f0e:	4789                	li	a5,2
    TEST_END(); 
    80021f10:	00006597          	auipc	a1,0x6
    80021f14:	e1058593          	addi	a1,a1,-496 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=1 scounteren.ir=0",
    80021f18:	00f70763          	beq	a4,a5,80021f26 <instret_test_9+0xfe>
    80021f1c:	4481                	li	s1,0
    TEST_END(); 
    80021f1e:	00006597          	auipc	a1,0x6
    80021f22:	e1258593          	addi	a1,a1,-494 # 80027d30 <__func__.0+0x2d0>
    80021f26:	00006517          	auipc	a0,0x6
    80021f2a:	eb250513          	addi	a0,a0,-334 # 80027dd8 <__func__.0+0x378>
    80021f2e:	5c9030ef          	jal	80025cf6 <printf>
    80021f32:	4511                	li	a0,4
    80021f34:	cc3de0ef          	jal	80000bf6 <goto_priv>
    80021f38:	d74df0ef          	jal	800014ac <reset_state>
}
    80021f3c:	60e2                	ld	ra,24(sp)
    80021f3e:	6442                	ld	s0,16(sp)
    80021f40:	8526                	mv	a0,s1
    80021f42:	64a2                	ld	s1,8(sp)
    80021f44:	6105                	addi	sp,sp,32
    80021f46:	8082                	ret

0000000080021f48 <instret_test_10>:

bool instret_test_10() {
    80021f48:	1141                	addi	sp,sp,-16

    TEST_START();    
    80021f4a:	00006597          	auipc	a1,0x6
    80021f4e:	95e58593          	addi	a1,a1,-1698 # 800278a8 <__func__.21>
    80021f52:	00006517          	auipc	a0,0x6
    80021f56:	dee50513          	addi	a0,a0,-530 # 80027d40 <__func__.0+0x2e0>
bool instret_test_10() {
    80021f5a:	e406                	sd	ra,8(sp)
    80021f5c:	e022                	sd	s0,0(sp)
    TEST_START();    
    80021f5e:	599030ef          	jal	80025cf6 <printf>
    80021f62:	4529                	li	a0,10
    80021f64:	39d020ef          	jal	80024b00 <putchar>
    goto_priv(PRIV_M);
    80021f68:	4511                	li	a0,4
    80021f6a:	c8dde0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    80021f6e:	60626073          	csrsi	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    80021f72:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_VS);
    80021f76:	4509                	li	a0,2
    80021f78:	c7fde0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021f7c:	0330000f          	fence	rw,rw
    80021f80:	4785                	li	a5,1
    80021f82:	00027717          	auipc	a4,0x27
    80021f86:	0c073323          	sd	zero,198(a4) # 80049048 <excpt+0x38>
    80021f8a:	00027717          	auipc	a4,0x27
    80021f8e:	08f71323          	sh	a5,134(a4) # 80049010 <excpt>
    80021f92:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    80021f96:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret successful exception when mcounteren.ir=1 hcounteren.ir=1",
    80021f9a:	08200593          	li	a1,130
    80021f9e:	0000e617          	auipc	a2,0xe
    80021fa2:	b9a60613          	addi	a2,a2,-1126 # 8002fb38 <__func__.0+0x80d8>
    80021fa6:	00006517          	auipc	a0,0x6
    80021faa:	db250513          	addi	a0,a0,-590 # 80027d58 <__func__.0+0x2f8>
    80021fae:	549030ef          	jal	80025cf6 <printf>
    80021fb2:	00027797          	auipc	a5,0x27
    80021fb6:	05f7c783          	lbu	a5,95(a5) # 80049011 <excpt+0x1>
    80021fba:	00006597          	auipc	a1,0x6
    80021fbe:	d6658593          	addi	a1,a1,-666 # 80027d20 <__func__.0+0x2c0>
    80021fc2:	c789                	beqz	a5,80021fcc <instret_test_10+0x84>
    80021fc4:	00006597          	auipc	a1,0x6
    80021fc8:	d6c58593          	addi	a1,a1,-660 # 80027d30 <__func__.0+0x2d0>
    80021fcc:	00006517          	auipc	a0,0x6
    80021fd0:	da450513          	addi	a0,a0,-604 # 80027d70 <__func__.0+0x310>
    80021fd4:	523030ef          	jal	80025cf6 <printf>
    80021fd8:	00027797          	auipc	a5,0x27
    80021fdc:	0397c783          	lbu	a5,57(a5) # 80049011 <excpt+0x1>
    80021fe0:	e7a1                	bnez	a5,80022028 <instret_test_10+0xe0>
    80021fe2:	4529                	li	a0,10
    80021fe4:	31d020ef          	jal	80024b00 <putchar>
    80021fe8:	00027797          	auipc	a5,0x27
    80021fec:	0297c783          	lbu	a5,41(a5) # 80049011 <excpt+0x1>
    80021ff0:	e795                	bnez	a5,8002201c <instret_test_10+0xd4>
    80021ff2:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80021ff4:	00006597          	auipc	a1,0x6
    80021ff8:	d2c58593          	addi	a1,a1,-724 # 80027d20 <__func__.0+0x2c0>
    80021ffc:	00006517          	auipc	a0,0x6
    80022000:	ddc50513          	addi	a0,a0,-548 # 80027dd8 <__func__.0+0x378>
    80022004:	4f3030ef          	jal	80025cf6 <printf>
    80022008:	4511                	li	a0,4
    8002200a:	bedde0ef          	jal	80000bf6 <goto_priv>
    8002200e:	c9edf0ef          	jal	800014ac <reset_state>
}
    80022012:	60a2                	ld	ra,8(sp)
    80022014:	8522                	mv	a0,s0
    80022016:	6402                	ld	s0,0(sp)
    80022018:	0141                	addi	sp,sp,16
    8002201a:	8082                	ret
    TEST_ASSERT("vu access to instret successful exception when mcounteren.ir=1 hcounteren.ir=1",
    8002201c:	4401                	li	s0,0
    TEST_END(); 
    8002201e:	00006597          	auipc	a1,0x6
    80022022:	d1258593          	addi	a1,a1,-750 # 80027d30 <__func__.0+0x2d0>
    80022026:	bfd9                	j	80021ffc <instret_test_10+0xb4>
    TEST_ASSERT("vu access to instret successful exception when mcounteren.ir=1 hcounteren.ir=1",
    80022028:	00006517          	auipc	a0,0x6
    8002202c:	d5050513          	addi	a0,a0,-688 # 80027d78 <__func__.0+0x318>
    80022030:	4c7030ef          	jal	80025cf6 <printf>
    80022034:	02900513          	li	a0,41
    80022038:	2c9020ef          	jal	80024b00 <putchar>
    8002203c:	b75d                	j	80021fe2 <instret_test_10+0x9a>

000000008002203e <timecmp_test_1>:


bool timecmp_test_1() {
    8002203e:	1101                	addi	sp,sp,-32

    TEST_START();    
    80022040:	00006597          	auipc	a1,0x6
    80022044:	87858593          	addi	a1,a1,-1928 # 800278b8 <__func__.20>
    80022048:	00006517          	auipc	a0,0x6
    8002204c:	cf850513          	addi	a0,a0,-776 # 80027d40 <__func__.0+0x2e0>
bool timecmp_test_1() {
    80022050:	ec06                	sd	ra,24(sp)
    80022052:	e822                	sd	s0,16(sp)
    80022054:	e426                	sd	s1,8(sp)
    TEST_START();    
    80022056:	4a1030ef          	jal	80025cf6 <printf>
    8002205a:	4529                	li	a0,10
    8002205c:	2a5020ef          	jal	80024b00 <putchar>
    CSRS(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    80022060:	57fd                	li	a5,-1
    80022062:	17fe                	slli	a5,a5,0x3f
    80022064:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80022068:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_HS);
    8002206c:	450d                	li	a0,3
    8002206e:	b89de0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80022072:	0330000f          	fence	rw,rw
    80022076:	00027417          	auipc	s0,0x27
    8002207a:	f9a40413          	addi	s0,s0,-102 # 80049010 <excpt>
    8002207e:	4785                	li	a5,1
    80022080:	00027717          	auipc	a4,0x27
    80022084:	fc073423          	sd	zero,-56(a4) # 80049048 <excpt+0x38>
    80022088:	00f41023          	sh	a5,0(s0)
    8002208c:	0330000f          	fence	rw,rw
    CSRR(CSR_VSTIMECMP);
    80022090:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    80022094:	08200593          	li	a1,130
    80022098:	0000e617          	auipc	a2,0xe
    8002209c:	af060613          	addi	a2,a2,-1296 # 8002fb88 <__func__.0+0x8128>
    800220a0:	00006517          	auipc	a0,0x6
    800220a4:	cb850513          	addi	a0,a0,-840 # 80027d58 <__func__.0+0x2f8>
    800220a8:	44f030ef          	jal	80025cf6 <printf>
    800220ac:	00027797          	auipc	a5,0x27
    800220b0:	f657c783          	lbu	a5,-155(a5) # 80049011 <excpt+0x1>
    800220b4:	00006597          	auipc	a1,0x6
    800220b8:	c7c58593          	addi	a1,a1,-900 # 80027d30 <__func__.0+0x2d0>
    800220bc:	cf89                	beqz	a5,800220d6 <timecmp_test_1+0x98>
    800220be:	6418                	ld	a4,8(s0)
    800220c0:	4789                	li	a5,2
    800220c2:	00006597          	auipc	a1,0x6
    800220c6:	c5e58593          	addi	a1,a1,-930 # 80027d20 <__func__.0+0x2c0>
    800220ca:	00f70663          	beq	a4,a5,800220d6 <timecmp_test_1+0x98>
    800220ce:	00006597          	auipc	a1,0x6
    800220d2:	c6258593          	addi	a1,a1,-926 # 80027d30 <__func__.0+0x2d0>
    800220d6:	00006517          	auipc	a0,0x6
    800220da:	c9a50513          	addi	a0,a0,-870 # 80027d70 <__func__.0+0x310>
    800220de:	419030ef          	jal	80025cf6 <printf>
    800220e2:	00027797          	auipc	a5,0x27
    800220e6:	f2f7c783          	lbu	a5,-209(a5) # 80049011 <excpt+0x1>
    800220ea:	c789                	beqz	a5,800220f4 <timecmp_test_1+0xb6>
    800220ec:	6418                	ld	a4,8(s0)
    800220ee:	4789                	li	a5,2
    800220f0:	00f70c63          	beq	a4,a5,80022108 <timecmp_test_1+0xca>
    800220f4:	00006517          	auipc	a0,0x6
    800220f8:	c8450513          	addi	a0,a0,-892 # 80027d78 <__func__.0+0x318>
    800220fc:	3fb030ef          	jal	80025cf6 <printf>
    80022100:	02900513          	li	a0,41
    80022104:	1fd020ef          	jal	80024b00 <putchar>
    80022108:	4529                	li	a0,10
    8002210a:	1f7020ef          	jal	80024b00 <putchar>
    8002210e:	00027797          	auipc	a5,0x27
    80022112:	f037c783          	lbu	a5,-253(a5) # 80049011 <excpt+0x1>
    80022116:	4481                	li	s1,0
    80022118:	c789                	beqz	a5,80022122 <timecmp_test_1+0xe4>
    8002211a:	6404                	ld	s1,8(s0)
    8002211c:	14f9                	addi	s1,s1,-2
    8002211e:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HU);
    80022122:	4505                	li	a0,1
    80022124:	ad3de0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80022128:	0330000f          	fence	rw,rw
    8002212c:	4785                	li	a5,1
    8002212e:	00027717          	auipc	a4,0x27
    80022132:	f0073d23          	sd	zero,-230(a4) # 80049048 <excpt+0x38>
    80022136:	00f41023          	sh	a5,0(s0)
    8002213a:	0330000f          	fence	rw,rw
    CSRR(CSR_VSTIMECMP);
    8002213e:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    80022142:	08200593          	li	a1,130
    80022146:	0000e617          	auipc	a2,0xe
    8002214a:	aaa60613          	addi	a2,a2,-1366 # 8002fbf0 <__func__.0+0x8190>
    8002214e:	00006517          	auipc	a0,0x6
    80022152:	c0a50513          	addi	a0,a0,-1014 # 80027d58 <__func__.0+0x2f8>
    80022156:	3a1030ef          	jal	80025cf6 <printf>
    8002215a:	00027797          	auipc	a5,0x27
    8002215e:	eb77c783          	lbu	a5,-329(a5) # 80049011 <excpt+0x1>
    80022162:	00006597          	auipc	a1,0x6
    80022166:	bce58593          	addi	a1,a1,-1074 # 80027d30 <__func__.0+0x2d0>
    8002216a:	cf89                	beqz	a5,80022184 <timecmp_test_1+0x146>
    8002216c:	6418                	ld	a4,8(s0)
    8002216e:	4789                	li	a5,2
    80022170:	00006597          	auipc	a1,0x6
    80022174:	bb058593          	addi	a1,a1,-1104 # 80027d20 <__func__.0+0x2c0>
    80022178:	00f70663          	beq	a4,a5,80022184 <timecmp_test_1+0x146>
    8002217c:	00006597          	auipc	a1,0x6
    80022180:	bb458593          	addi	a1,a1,-1100 # 80027d30 <__func__.0+0x2d0>
    80022184:	00006517          	auipc	a0,0x6
    80022188:	bec50513          	addi	a0,a0,-1044 # 80027d70 <__func__.0+0x310>
    8002218c:	36b030ef          	jal	80025cf6 <printf>
    80022190:	00027797          	auipc	a5,0x27
    80022194:	e817c783          	lbu	a5,-383(a5) # 80049011 <excpt+0x1>
    80022198:	c789                	beqz	a5,800221a2 <timecmp_test_1+0x164>
    8002219a:	6418                	ld	a4,8(s0)
    8002219c:	4789                	li	a5,2
    8002219e:	00f70c63          	beq	a4,a5,800221b6 <timecmp_test_1+0x178>
    800221a2:	00006517          	auipc	a0,0x6
    800221a6:	bd650513          	addi	a0,a0,-1066 # 80027d78 <__func__.0+0x318>
    800221aa:	34d030ef          	jal	80025cf6 <printf>
    800221ae:	02900513          	li	a0,41
    800221b2:	14f020ef          	jal	80024b00 <putchar>
    800221b6:	4529                	li	a0,10
    800221b8:	149020ef          	jal	80024b00 <putchar>
    800221bc:	c095                	beqz	s1,800221e0 <timecmp_test_1+0x1a2>
    800221be:	00027497          	auipc	s1,0x27
    800221c2:	e534c483          	lbu	s1,-429(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    800221c6:	00006597          	auipc	a1,0x6
    800221ca:	b6a58593          	addi	a1,a1,-1174 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    800221ce:	cc91                	beqz	s1,800221ea <timecmp_test_1+0x1ac>
    800221d0:	6418                	ld	a4,8(s0)
    800221d2:	4789                	li	a5,2
    TEST_END(); 
    800221d4:	00006597          	auipc	a1,0x6
    800221d8:	b4c58593          	addi	a1,a1,-1204 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    800221dc:	00f70763          	beq	a4,a5,800221ea <timecmp_test_1+0x1ac>
    800221e0:	4481                	li	s1,0
    TEST_END(); 
    800221e2:	00006597          	auipc	a1,0x6
    800221e6:	b4e58593          	addi	a1,a1,-1202 # 80027d30 <__func__.0+0x2d0>
    800221ea:	00006517          	auipc	a0,0x6
    800221ee:	bee50513          	addi	a0,a0,-1042 # 80027dd8 <__func__.0+0x378>
    800221f2:	305030ef          	jal	80025cf6 <printf>
    800221f6:	4511                	li	a0,4
    800221f8:	9ffde0ef          	jal	80000bf6 <goto_priv>
    800221fc:	ab0df0ef          	jal	800014ac <reset_state>
}
    80022200:	60e2                	ld	ra,24(sp)
    80022202:	6442                	ld	s0,16(sp)
    80022204:	8526                	mv	a0,s1
    80022206:	64a2                	ld	s1,8(sp)
    80022208:	6105                	addi	sp,sp,32
    8002220a:	8082                	ret

000000008002220c <timecmp_test_2>:

bool timecmp_test_2() {
    8002220c:	1101                	addi	sp,sp,-32

    TEST_START();    
    8002220e:	00005597          	auipc	a1,0x5
    80022212:	6ba58593          	addi	a1,a1,1722 # 800278c8 <__func__.19>
    80022216:	00006517          	auipc	a0,0x6
    8002221a:	b2a50513          	addi	a0,a0,-1238 # 80027d40 <__func__.0+0x2e0>
bool timecmp_test_2() {
    8002221e:	ec06                	sd	ra,24(sp)
    80022220:	e822                	sd	s0,16(sp)
    80022222:	e426                	sd	s1,8(sp)
    TEST_START();    
    80022224:	2d3030ef          	jal	80025cf6 <printf>
    80022228:	4529                	li	a0,10
    8002222a:	0d7020ef          	jal	80024b00 <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    8002222e:	57fd                	li	a5,-1
    80022230:	17fe                	slli	a5,a5,0x3f
    80022232:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_HS);
    80022236:	450d                	li	a0,3
    80022238:	9bfde0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002223c:	0330000f          	fence	rw,rw
    80022240:	00027417          	auipc	s0,0x27
    80022244:	dd040413          	addi	s0,s0,-560 # 80049010 <excpt>
    80022248:	4785                	li	a5,1
    8002224a:	00027717          	auipc	a4,0x27
    8002224e:	de073f23          	sd	zero,-514(a4) # 80049048 <excpt+0x38>
    80022252:	00f41023          	sh	a5,0(s0)
    80022256:	0330000f          	fence	rw,rw
    CSRR(CSR_VSTIMECMP);
    8002225a:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8002225e:	08200593          	li	a1,130
    80022262:	0000e617          	auipc	a2,0xe
    80022266:	9f660613          	addi	a2,a2,-1546 # 8002fc58 <__func__.0+0x81f8>
    8002226a:	00006517          	auipc	a0,0x6
    8002226e:	aee50513          	addi	a0,a0,-1298 # 80027d58 <__func__.0+0x2f8>
    80022272:	285030ef          	jal	80025cf6 <printf>
    80022276:	00027797          	auipc	a5,0x27
    8002227a:	d9b7c783          	lbu	a5,-613(a5) # 80049011 <excpt+0x1>
    8002227e:	00006597          	auipc	a1,0x6
    80022282:	ab258593          	addi	a1,a1,-1358 # 80027d30 <__func__.0+0x2d0>
    80022286:	cf89                	beqz	a5,800222a0 <timecmp_test_2+0x94>
    80022288:	6418                	ld	a4,8(s0)
    8002228a:	4789                	li	a5,2
    8002228c:	00006597          	auipc	a1,0x6
    80022290:	a9458593          	addi	a1,a1,-1388 # 80027d20 <__func__.0+0x2c0>
    80022294:	00f70663          	beq	a4,a5,800222a0 <timecmp_test_2+0x94>
    80022298:	00006597          	auipc	a1,0x6
    8002229c:	a9858593          	addi	a1,a1,-1384 # 80027d30 <__func__.0+0x2d0>
    800222a0:	00006517          	auipc	a0,0x6
    800222a4:	ad050513          	addi	a0,a0,-1328 # 80027d70 <__func__.0+0x310>
    800222a8:	24f030ef          	jal	80025cf6 <printf>
    800222ac:	00027797          	auipc	a5,0x27
    800222b0:	d657c783          	lbu	a5,-667(a5) # 80049011 <excpt+0x1>
    800222b4:	c789                	beqz	a5,800222be <timecmp_test_2+0xb2>
    800222b6:	6418                	ld	a4,8(s0)
    800222b8:	4789                	li	a5,2
    800222ba:	00f70c63          	beq	a4,a5,800222d2 <timecmp_test_2+0xc6>
    800222be:	00006517          	auipc	a0,0x6
    800222c2:	aba50513          	addi	a0,a0,-1350 # 80027d78 <__func__.0+0x318>
    800222c6:	231030ef          	jal	80025cf6 <printf>
    800222ca:	02900513          	li	a0,41
    800222ce:	033020ef          	jal	80024b00 <putchar>
    800222d2:	4529                	li	a0,10
    800222d4:	02d020ef          	jal	80024b00 <putchar>
    800222d8:	00027497          	auipc	s1,0x27
    800222dc:	d394c483          	lbu	s1,-711(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    800222e0:	00006597          	auipc	a1,0x6
    800222e4:	a5058593          	addi	a1,a1,-1456 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    800222e8:	cc91                	beqz	s1,80022304 <timecmp_test_2+0xf8>
    800222ea:	6418                	ld	a4,8(s0)
    800222ec:	4789                	li	a5,2
    TEST_END(); 
    800222ee:	00006597          	auipc	a1,0x6
    800222f2:	a3258593          	addi	a1,a1,-1486 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    800222f6:	00f70763          	beq	a4,a5,80022304 <timecmp_test_2+0xf8>
    800222fa:	4481                	li	s1,0
    TEST_END(); 
    800222fc:	00006597          	auipc	a1,0x6
    80022300:	a3458593          	addi	a1,a1,-1484 # 80027d30 <__func__.0+0x2d0>
    80022304:	00006517          	auipc	a0,0x6
    80022308:	ad450513          	addi	a0,a0,-1324 # 80027dd8 <__func__.0+0x378>
    8002230c:	1eb030ef          	jal	80025cf6 <printf>
    80022310:	4511                	li	a0,4
    80022312:	8e5de0ef          	jal	80000bf6 <goto_priv>
    80022316:	996df0ef          	jal	800014ac <reset_state>
}
    8002231a:	60e2                	ld	ra,24(sp)
    8002231c:	6442                	ld	s0,16(sp)
    8002231e:	8526                	mv	a0,s1
    80022320:	64a2                	ld	s1,8(sp)
    80022322:	6105                	addi	sp,sp,32
    80022324:	8082                	ret

0000000080022326 <timecmp_test_3>:

bool timecmp_test_3() {
    80022326:	1101                	addi	sp,sp,-32

    TEST_START();    
    80022328:	00005597          	auipc	a1,0x5
    8002232c:	5b058593          	addi	a1,a1,1456 # 800278d8 <__func__.18>
    80022330:	00006517          	auipc	a0,0x6
    80022334:	a1050513          	addi	a0,a0,-1520 # 80027d40 <__func__.0+0x2e0>
bool timecmp_test_3() {
    80022338:	ec06                	sd	ra,24(sp)
    8002233a:	e822                	sd	s0,16(sp)
    8002233c:	e426                	sd	s1,8(sp)
    TEST_START();    
    8002233e:	1b9030ef          	jal	80025cf6 <printf>
    80022342:	4529                	li	a0,10
    80022344:	7bc020ef          	jal	80024b00 <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    80022348:	57fd                	li	a5,-1
    8002234a:	17fe                	slli	a5,a5,0x3f
    8002234c:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_VS); 
    80022350:	4509                	li	a0,2
    80022352:	8a5de0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80022356:	0330000f          	fence	rw,rw
    8002235a:	00027417          	auipc	s0,0x27
    8002235e:	cb640413          	addi	s0,s0,-842 # 80049010 <excpt>
    80022362:	4785                	li	a5,1
    80022364:	00027717          	auipc	a4,0x27
    80022368:	ce073223          	sd	zero,-796(a4) # 80049048 <excpt+0x38>
    8002236c:	00f41023          	sh	a5,0(s0)
    80022370:	0330000f          	fence	rw,rw
    CSRR(CSR_VSTIMECMP);
    80022374:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80022378:	08200593          	li	a1,130
    8002237c:	0000e617          	auipc	a2,0xe
    80022380:	93460613          	addi	a2,a2,-1740 # 8002fcb0 <__func__.0+0x8250>
    80022384:	00006517          	auipc	a0,0x6
    80022388:	9d450513          	addi	a0,a0,-1580 # 80027d58 <__func__.0+0x2f8>
    8002238c:	16b030ef          	jal	80025cf6 <printf>
    80022390:	00027797          	auipc	a5,0x27
    80022394:	c817c783          	lbu	a5,-895(a5) # 80049011 <excpt+0x1>
    80022398:	00006597          	auipc	a1,0x6
    8002239c:	99858593          	addi	a1,a1,-1640 # 80027d30 <__func__.0+0x2d0>
    800223a0:	cf89                	beqz	a5,800223ba <timecmp_test_3+0x94>
    800223a2:	6418                	ld	a4,8(s0)
    800223a4:	4789                	li	a5,2
    800223a6:	00006597          	auipc	a1,0x6
    800223aa:	97a58593          	addi	a1,a1,-1670 # 80027d20 <__func__.0+0x2c0>
    800223ae:	00f70663          	beq	a4,a5,800223ba <timecmp_test_3+0x94>
    800223b2:	00006597          	auipc	a1,0x6
    800223b6:	97e58593          	addi	a1,a1,-1666 # 80027d30 <__func__.0+0x2d0>
    800223ba:	00006517          	auipc	a0,0x6
    800223be:	9b650513          	addi	a0,a0,-1610 # 80027d70 <__func__.0+0x310>
    800223c2:	135030ef          	jal	80025cf6 <printf>
    800223c6:	00027797          	auipc	a5,0x27
    800223ca:	c4b7c783          	lbu	a5,-949(a5) # 80049011 <excpt+0x1>
    800223ce:	c789                	beqz	a5,800223d8 <timecmp_test_3+0xb2>
    800223d0:	6418                	ld	a4,8(s0)
    800223d2:	4789                	li	a5,2
    800223d4:	00f70c63          	beq	a4,a5,800223ec <timecmp_test_3+0xc6>
    800223d8:	00006517          	auipc	a0,0x6
    800223dc:	9a050513          	addi	a0,a0,-1632 # 80027d78 <__func__.0+0x318>
    800223e0:	117030ef          	jal	80025cf6 <printf>
    800223e4:	02900513          	li	a0,41
    800223e8:	718020ef          	jal	80024b00 <putchar>
    800223ec:	4529                	li	a0,10
    800223ee:	712020ef          	jal	80024b00 <putchar>
    800223f2:	00027497          	auipc	s1,0x27
    800223f6:	c1f4c483          	lbu	s1,-993(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    800223fa:	00006597          	auipc	a1,0x6
    800223fe:	93658593          	addi	a1,a1,-1738 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80022402:	cc91                	beqz	s1,8002241e <timecmp_test_3+0xf8>
    80022404:	6418                	ld	a4,8(s0)
    80022406:	4789                	li	a5,2
    TEST_END(); 
    80022408:	00006597          	auipc	a1,0x6
    8002240c:	91858593          	addi	a1,a1,-1768 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80022410:	00f70763          	beq	a4,a5,8002241e <timecmp_test_3+0xf8>
    80022414:	4481                	li	s1,0
    TEST_END(); 
    80022416:	00006597          	auipc	a1,0x6
    8002241a:	91a58593          	addi	a1,a1,-1766 # 80027d30 <__func__.0+0x2d0>
    8002241e:	00006517          	auipc	a0,0x6
    80022422:	9ba50513          	addi	a0,a0,-1606 # 80027dd8 <__func__.0+0x378>
    80022426:	0d1030ef          	jal	80025cf6 <printf>
    8002242a:	4511                	li	a0,4
    8002242c:	fcade0ef          	jal	80000bf6 <goto_priv>
    80022430:	87cdf0ef          	jal	800014ac <reset_state>
}
    80022434:	60e2                	ld	ra,24(sp)
    80022436:	6442                	ld	s0,16(sp)
    80022438:	8526                	mv	a0,s1
    8002243a:	64a2                	ld	s1,8(sp)
    8002243c:	6105                	addi	sp,sp,32
    8002243e:	8082                	ret

0000000080022440 <timecmp_test_4>:

bool timecmp_test_4() {
    80022440:	1101                	addi	sp,sp,-32

    TEST_START();    
    80022442:	00005597          	auipc	a1,0x5
    80022446:	4a658593          	addi	a1,a1,1190 # 800278e8 <__func__.17>
    8002244a:	00006517          	auipc	a0,0x6
    8002244e:	8f650513          	addi	a0,a0,-1802 # 80027d40 <__func__.0+0x2e0>
bool timecmp_test_4() {
    80022452:	ec06                	sd	ra,24(sp)
    80022454:	e822                	sd	s0,16(sp)
    80022456:	e426                	sd	s1,8(sp)
    TEST_START();    
    80022458:	09f030ef          	jal	80025cf6 <printf>
    8002245c:	4529                	li	a0,10
    8002245e:	6a2020ef          	jal	80024b00 <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    80022462:	57fd                	li	a5,-1
    80022464:	17fe                	slli	a5,a5,0x3f
    80022466:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_HU);
    8002246a:	4505                	li	a0,1
    8002246c:	f8ade0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80022470:	0330000f          	fence	rw,rw
    80022474:	00027417          	auipc	s0,0x27
    80022478:	b9c40413          	addi	s0,s0,-1124 # 80049010 <excpt>
    8002247c:	4785                	li	a5,1
    8002247e:	00027717          	auipc	a4,0x27
    80022482:	bc073523          	sd	zero,-1078(a4) # 80049048 <excpt+0x38>
    80022486:	00f41023          	sh	a5,0(s0)
    8002248a:	0330000f          	fence	rw,rw
    CSRR(CSR_VSTIMECMP);
    8002248e:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80022492:	08200593          	li	a1,130
    80022496:	0000e617          	auipc	a2,0xe
    8002249a:	87260613          	addi	a2,a2,-1934 # 8002fd08 <__func__.0+0x82a8>
    8002249e:	00006517          	auipc	a0,0x6
    800224a2:	8ba50513          	addi	a0,a0,-1862 # 80027d58 <__func__.0+0x2f8>
    800224a6:	051030ef          	jal	80025cf6 <printf>
    800224aa:	00027797          	auipc	a5,0x27
    800224ae:	b677c783          	lbu	a5,-1177(a5) # 80049011 <excpt+0x1>
    800224b2:	00006597          	auipc	a1,0x6
    800224b6:	87e58593          	addi	a1,a1,-1922 # 80027d30 <__func__.0+0x2d0>
    800224ba:	cf89                	beqz	a5,800224d4 <timecmp_test_4+0x94>
    800224bc:	6418                	ld	a4,8(s0)
    800224be:	4789                	li	a5,2
    800224c0:	00006597          	auipc	a1,0x6
    800224c4:	86058593          	addi	a1,a1,-1952 # 80027d20 <__func__.0+0x2c0>
    800224c8:	00f70663          	beq	a4,a5,800224d4 <timecmp_test_4+0x94>
    800224cc:	00006597          	auipc	a1,0x6
    800224d0:	86458593          	addi	a1,a1,-1948 # 80027d30 <__func__.0+0x2d0>
    800224d4:	00006517          	auipc	a0,0x6
    800224d8:	89c50513          	addi	a0,a0,-1892 # 80027d70 <__func__.0+0x310>
    800224dc:	01b030ef          	jal	80025cf6 <printf>
    800224e0:	00027797          	auipc	a5,0x27
    800224e4:	b317c783          	lbu	a5,-1231(a5) # 80049011 <excpt+0x1>
    800224e8:	c789                	beqz	a5,800224f2 <timecmp_test_4+0xb2>
    800224ea:	6418                	ld	a4,8(s0)
    800224ec:	4789                	li	a5,2
    800224ee:	00f70c63          	beq	a4,a5,80022506 <timecmp_test_4+0xc6>
    800224f2:	00006517          	auipc	a0,0x6
    800224f6:	88650513          	addi	a0,a0,-1914 # 80027d78 <__func__.0+0x318>
    800224fa:	7fc030ef          	jal	80025cf6 <printf>
    800224fe:	02900513          	li	a0,41
    80022502:	5fe020ef          	jal	80024b00 <putchar>
    80022506:	4529                	li	a0,10
    80022508:	5f8020ef          	jal	80024b00 <putchar>
    8002250c:	00027497          	auipc	s1,0x27
    80022510:	b054c483          	lbu	s1,-1275(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80022514:	00006597          	auipc	a1,0x6
    80022518:	81c58593          	addi	a1,a1,-2020 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8002251c:	cc91                	beqz	s1,80022538 <timecmp_test_4+0xf8>
    8002251e:	6418                	ld	a4,8(s0)
    80022520:	4789                	li	a5,2
    TEST_END(); 
    80022522:	00005597          	auipc	a1,0x5
    80022526:	7fe58593          	addi	a1,a1,2046 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8002252a:	00f70763          	beq	a4,a5,80022538 <timecmp_test_4+0xf8>
    8002252e:	4481                	li	s1,0
    TEST_END(); 
    80022530:	00006597          	auipc	a1,0x6
    80022534:	80058593          	addi	a1,a1,-2048 # 80027d30 <__func__.0+0x2d0>
    80022538:	00006517          	auipc	a0,0x6
    8002253c:	8a050513          	addi	a0,a0,-1888 # 80027dd8 <__func__.0+0x378>
    80022540:	7b6030ef          	jal	80025cf6 <printf>
    80022544:	4511                	li	a0,4
    80022546:	eb0de0ef          	jal	80000bf6 <goto_priv>
    8002254a:	f63de0ef          	jal	800014ac <reset_state>
}
    8002254e:	60e2                	ld	ra,24(sp)
    80022550:	6442                	ld	s0,16(sp)
    80022552:	8526                	mv	a0,s1
    80022554:	64a2                	ld	s1,8(sp)
    80022556:	6105                	addi	sp,sp,32
    80022558:	8082                	ret

000000008002255a <timecmp_test_5>:

bool timecmp_test_5() {
    8002255a:	1101                	addi	sp,sp,-32

    TEST_START();    
    8002255c:	00005597          	auipc	a1,0x5
    80022560:	39c58593          	addi	a1,a1,924 # 800278f8 <__func__.16>
    80022564:	00005517          	auipc	a0,0x5
    80022568:	7dc50513          	addi	a0,a0,2012 # 80027d40 <__func__.0+0x2e0>
bool timecmp_test_5() {
    8002256c:	ec06                	sd	ra,24(sp)
    8002256e:	e822                	sd	s0,16(sp)
    80022570:	e426                	sd	s1,8(sp)
    TEST_START();    
    80022572:	784030ef          	jal	80025cf6 <printf>
    80022576:	4529                	li	a0,10
    80022578:	588020ef          	jal	80024b00 <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    8002257c:	57fd                	li	a5,-1
    8002257e:	17fe                	slli	a5,a5,0x3f
    80022580:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_VU);
    80022584:	4501                	li	a0,0
    80022586:	e70de0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002258a:	0330000f          	fence	rw,rw
    8002258e:	00027417          	auipc	s0,0x27
    80022592:	a8240413          	addi	s0,s0,-1406 # 80049010 <excpt>
    80022596:	4785                	li	a5,1
    80022598:	00027717          	auipc	a4,0x27
    8002259c:	aa073823          	sd	zero,-1360(a4) # 80049048 <excpt+0x38>
    800225a0:	00f41023          	sh	a5,0(s0)
    800225a4:	0330000f          	fence	rw,rw
    CSRR(CSR_VSTIMECMP);
    800225a8:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    800225ac:	08200593          	li	a1,130
    800225b0:	0000d617          	auipc	a2,0xd
    800225b4:	7b060613          	addi	a2,a2,1968 # 8002fd60 <__func__.0+0x8300>
    800225b8:	00005517          	auipc	a0,0x5
    800225bc:	7a050513          	addi	a0,a0,1952 # 80027d58 <__func__.0+0x2f8>
    800225c0:	736030ef          	jal	80025cf6 <printf>
    800225c4:	00027797          	auipc	a5,0x27
    800225c8:	a4d7c783          	lbu	a5,-1459(a5) # 80049011 <excpt+0x1>
    800225cc:	00005597          	auipc	a1,0x5
    800225d0:	76458593          	addi	a1,a1,1892 # 80027d30 <__func__.0+0x2d0>
    800225d4:	cf89                	beqz	a5,800225ee <timecmp_test_5+0x94>
    800225d6:	6418                	ld	a4,8(s0)
    800225d8:	4789                	li	a5,2
    800225da:	00005597          	auipc	a1,0x5
    800225de:	74658593          	addi	a1,a1,1862 # 80027d20 <__func__.0+0x2c0>
    800225e2:	00f70663          	beq	a4,a5,800225ee <timecmp_test_5+0x94>
    800225e6:	00005597          	auipc	a1,0x5
    800225ea:	74a58593          	addi	a1,a1,1866 # 80027d30 <__func__.0+0x2d0>
    800225ee:	00005517          	auipc	a0,0x5
    800225f2:	78250513          	addi	a0,a0,1922 # 80027d70 <__func__.0+0x310>
    800225f6:	700030ef          	jal	80025cf6 <printf>
    800225fa:	00027797          	auipc	a5,0x27
    800225fe:	a177c783          	lbu	a5,-1513(a5) # 80049011 <excpt+0x1>
    80022602:	c789                	beqz	a5,8002260c <timecmp_test_5+0xb2>
    80022604:	6418                	ld	a4,8(s0)
    80022606:	4789                	li	a5,2
    80022608:	00f70c63          	beq	a4,a5,80022620 <timecmp_test_5+0xc6>
    8002260c:	00005517          	auipc	a0,0x5
    80022610:	76c50513          	addi	a0,a0,1900 # 80027d78 <__func__.0+0x318>
    80022614:	6e2030ef          	jal	80025cf6 <printf>
    80022618:	02900513          	li	a0,41
    8002261c:	4e4020ef          	jal	80024b00 <putchar>
    80022620:	4529                	li	a0,10
    80022622:	4de020ef          	jal	80024b00 <putchar>
    80022626:	00027497          	auipc	s1,0x27
    8002262a:	9eb4c483          	lbu	s1,-1557(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8002262e:	00005597          	auipc	a1,0x5
    80022632:	70258593          	addi	a1,a1,1794 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80022636:	cc91                	beqz	s1,80022652 <timecmp_test_5+0xf8>
    80022638:	6418                	ld	a4,8(s0)
    8002263a:	4789                	li	a5,2
    TEST_END(); 
    8002263c:	00005597          	auipc	a1,0x5
    80022640:	6e458593          	addi	a1,a1,1764 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80022644:	00f70763          	beq	a4,a5,80022652 <timecmp_test_5+0xf8>
    80022648:	4481                	li	s1,0
    TEST_END(); 
    8002264a:	00005597          	auipc	a1,0x5
    8002264e:	6e658593          	addi	a1,a1,1766 # 80027d30 <__func__.0+0x2d0>
    80022652:	00005517          	auipc	a0,0x5
    80022656:	78650513          	addi	a0,a0,1926 # 80027dd8 <__func__.0+0x378>
    8002265a:	69c030ef          	jal	80025cf6 <printf>
    8002265e:	4511                	li	a0,4
    80022660:	d96de0ef          	jal	80000bf6 <goto_priv>
    80022664:	e49de0ef          	jal	800014ac <reset_state>
}
    80022668:	60e2                	ld	ra,24(sp)
    8002266a:	6442                	ld	s0,16(sp)
    8002266c:	8526                	mv	a0,s1
    8002266e:	64a2                	ld	s1,8(sp)
    80022670:	6105                	addi	sp,sp,32
    80022672:	8082                	ret

0000000080022674 <timecmp_test_6>:

bool timecmp_test_6() {
    80022674:	1101                	addi	sp,sp,-32

    TEST_START();    
    80022676:	00005597          	auipc	a1,0x5
    8002267a:	29258593          	addi	a1,a1,658 # 80027908 <__func__.15>
    8002267e:	00005517          	auipc	a0,0x5
    80022682:	6c250513          	addi	a0,a0,1730 # 80027d40 <__func__.0+0x2e0>
bool timecmp_test_6() {
    80022686:	ec06                	sd	ra,24(sp)
    80022688:	e822                	sd	s0,16(sp)
    8002268a:	e426                	sd	s1,8(sp)
    TEST_START();    
    8002268c:	66a030ef          	jal	80025cf6 <printf>
    80022690:	4529                	li	a0,10
    80022692:	46e020ef          	jal	80024b00 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80022696:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_HS);
    8002269a:	450d                	li	a0,3
    8002269c:	d5ade0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    800226a0:	0330000f          	fence	rw,rw
    800226a4:	00027417          	auipc	s0,0x27
    800226a8:	96c40413          	addi	s0,s0,-1684 # 80049010 <excpt>
    800226ac:	4785                	li	a5,1
    800226ae:	00027717          	auipc	a4,0x27
    800226b2:	98073d23          	sd	zero,-1638(a4) # 80049048 <excpt+0x38>
    800226b6:	00f41023          	sh	a5,0(s0)
    800226ba:	0330000f          	fence	rw,rw
    CSRR(CSR_STIMECMP);
    800226be:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("hs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    800226c2:	08200593          	li	a1,130
    800226c6:	0000d617          	auipc	a2,0xd
    800226ca:	6f260613          	addi	a2,a2,1778 # 8002fdb8 <__func__.0+0x8358>
    800226ce:	00005517          	auipc	a0,0x5
    800226d2:	68a50513          	addi	a0,a0,1674 # 80027d58 <__func__.0+0x2f8>
    800226d6:	620030ef          	jal	80025cf6 <printf>
    800226da:	00027797          	auipc	a5,0x27
    800226de:	9377c783          	lbu	a5,-1737(a5) # 80049011 <excpt+0x1>
    800226e2:	00005597          	auipc	a1,0x5
    800226e6:	64e58593          	addi	a1,a1,1614 # 80027d30 <__func__.0+0x2d0>
    800226ea:	cf89                	beqz	a5,80022704 <timecmp_test_6+0x90>
    800226ec:	6418                	ld	a4,8(s0)
    800226ee:	4789                	li	a5,2
    800226f0:	00005597          	auipc	a1,0x5
    800226f4:	63058593          	addi	a1,a1,1584 # 80027d20 <__func__.0+0x2c0>
    800226f8:	00f70663          	beq	a4,a5,80022704 <timecmp_test_6+0x90>
    800226fc:	00005597          	auipc	a1,0x5
    80022700:	63458593          	addi	a1,a1,1588 # 80027d30 <__func__.0+0x2d0>
    80022704:	00005517          	auipc	a0,0x5
    80022708:	66c50513          	addi	a0,a0,1644 # 80027d70 <__func__.0+0x310>
    8002270c:	5ea030ef          	jal	80025cf6 <printf>
    80022710:	00027797          	auipc	a5,0x27
    80022714:	9017c783          	lbu	a5,-1791(a5) # 80049011 <excpt+0x1>
    80022718:	c789                	beqz	a5,80022722 <timecmp_test_6+0xae>
    8002271a:	6418                	ld	a4,8(s0)
    8002271c:	4789                	li	a5,2
    8002271e:	00f70c63          	beq	a4,a5,80022736 <timecmp_test_6+0xc2>
    80022722:	00005517          	auipc	a0,0x5
    80022726:	65650513          	addi	a0,a0,1622 # 80027d78 <__func__.0+0x318>
    8002272a:	5cc030ef          	jal	80025cf6 <printf>
    8002272e:	02900513          	li	a0,41
    80022732:	3ce020ef          	jal	80024b00 <putchar>
    80022736:	4529                	li	a0,10
    80022738:	3c8020ef          	jal	80024b00 <putchar>
    8002273c:	00027497          	auipc	s1,0x27
    80022740:	8d54c483          	lbu	s1,-1835(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80022744:	00005597          	auipc	a1,0x5
    80022748:	5ec58593          	addi	a1,a1,1516 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    8002274c:	cc91                	beqz	s1,80022768 <timecmp_test_6+0xf4>
    8002274e:	6418                	ld	a4,8(s0)
    80022750:	4789                	li	a5,2
    TEST_END(); 
    80022752:	00005597          	auipc	a1,0x5
    80022756:	5ce58593          	addi	a1,a1,1486 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    8002275a:	00f70763          	beq	a4,a5,80022768 <timecmp_test_6+0xf4>
    8002275e:	4481                	li	s1,0
    TEST_END(); 
    80022760:	00005597          	auipc	a1,0x5
    80022764:	5d058593          	addi	a1,a1,1488 # 80027d30 <__func__.0+0x2d0>
    80022768:	00005517          	auipc	a0,0x5
    8002276c:	67050513          	addi	a0,a0,1648 # 80027dd8 <__func__.0+0x378>
    80022770:	586030ef          	jal	80025cf6 <printf>
    80022774:	4511                	li	a0,4
    80022776:	c80de0ef          	jal	80000bf6 <goto_priv>
    8002277a:	d33de0ef          	jal	800014ac <reset_state>
}
    8002277e:	60e2                	ld	ra,24(sp)
    80022780:	6442                	ld	s0,16(sp)
    80022782:	8526                	mv	a0,s1
    80022784:	64a2                	ld	s1,8(sp)
    80022786:	6105                	addi	sp,sp,32
    80022788:	8082                	ret

000000008002278a <timecmp_test_7>:

bool timecmp_test_7() {
    8002278a:	1101                	addi	sp,sp,-32

    TEST_START();    
    8002278c:	00005597          	auipc	a1,0x5
    80022790:	18c58593          	addi	a1,a1,396 # 80027918 <__func__.14>
    80022794:	00005517          	auipc	a0,0x5
    80022798:	5ac50513          	addi	a0,a0,1452 # 80027d40 <__func__.0+0x2e0>
bool timecmp_test_7() {
    8002279c:	ec06                	sd	ra,24(sp)
    8002279e:	e822                	sd	s0,16(sp)
    800227a0:	e426                	sd	s1,8(sp)
    TEST_START();    
    800227a2:	554030ef          	jal	80025cf6 <printf>
    800227a6:	4529                	li	a0,10
    800227a8:	358020ef          	jal	80024b00 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800227ac:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_VS);
    800227b0:	4509                	li	a0,2
    800227b2:	c44de0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    800227b6:	0330000f          	fence	rw,rw
    800227ba:	00027417          	auipc	s0,0x27
    800227be:	85640413          	addi	s0,s0,-1962 # 80049010 <excpt>
    800227c2:	4785                	li	a5,1
    800227c4:	00027717          	auipc	a4,0x27
    800227c8:	88073223          	sd	zero,-1916(a4) # 80049048 <excpt+0x38>
    800227cc:	00f41023          	sh	a5,0(s0)
    800227d0:	0330000f          	fence	rw,rw
    CSRR(CSR_STIMECMP);
    800227d4:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    800227d8:	08200593          	li	a1,130
    800227dc:	0000d617          	auipc	a2,0xd
    800227e0:	63460613          	addi	a2,a2,1588 # 8002fe10 <__func__.0+0x83b0>
    800227e4:	00005517          	auipc	a0,0x5
    800227e8:	57450513          	addi	a0,a0,1396 # 80027d58 <__func__.0+0x2f8>
    800227ec:	50a030ef          	jal	80025cf6 <printf>
    800227f0:	00027797          	auipc	a5,0x27
    800227f4:	8217c783          	lbu	a5,-2015(a5) # 80049011 <excpt+0x1>
    800227f8:	00005597          	auipc	a1,0x5
    800227fc:	53858593          	addi	a1,a1,1336 # 80027d30 <__func__.0+0x2d0>
    80022800:	cf89                	beqz	a5,8002281a <timecmp_test_7+0x90>
    80022802:	6418                	ld	a4,8(s0)
    80022804:	4789                	li	a5,2
    80022806:	00005597          	auipc	a1,0x5
    8002280a:	51a58593          	addi	a1,a1,1306 # 80027d20 <__func__.0+0x2c0>
    8002280e:	00f70663          	beq	a4,a5,8002281a <timecmp_test_7+0x90>
    80022812:	00005597          	auipc	a1,0x5
    80022816:	51e58593          	addi	a1,a1,1310 # 80027d30 <__func__.0+0x2d0>
    8002281a:	00005517          	auipc	a0,0x5
    8002281e:	55650513          	addi	a0,a0,1366 # 80027d70 <__func__.0+0x310>
    80022822:	4d4030ef          	jal	80025cf6 <printf>
    80022826:	00026797          	auipc	a5,0x26
    8002282a:	7eb7c783          	lbu	a5,2027(a5) # 80049011 <excpt+0x1>
    8002282e:	c789                	beqz	a5,80022838 <timecmp_test_7+0xae>
    80022830:	6418                	ld	a4,8(s0)
    80022832:	4789                	li	a5,2
    80022834:	00f70c63          	beq	a4,a5,8002284c <timecmp_test_7+0xc2>
    80022838:	00005517          	auipc	a0,0x5
    8002283c:	54050513          	addi	a0,a0,1344 # 80027d78 <__func__.0+0x318>
    80022840:	4b6030ef          	jal	80025cf6 <printf>
    80022844:	02900513          	li	a0,41
    80022848:	2b8020ef          	jal	80024b00 <putchar>
    8002284c:	4529                	li	a0,10
    8002284e:	2b2020ef          	jal	80024b00 <putchar>
    80022852:	00026497          	auipc	s1,0x26
    80022856:	7bf4c483          	lbu	s1,1983(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8002285a:	00005597          	auipc	a1,0x5
    8002285e:	4d658593          	addi	a1,a1,1238 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    80022862:	cc91                	beqz	s1,8002287e <timecmp_test_7+0xf4>
    80022864:	6418                	ld	a4,8(s0)
    80022866:	4789                	li	a5,2
    TEST_END(); 
    80022868:	00005597          	auipc	a1,0x5
    8002286c:	4b858593          	addi	a1,a1,1208 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    80022870:	00f70763          	beq	a4,a5,8002287e <timecmp_test_7+0xf4>
    80022874:	4481                	li	s1,0
    TEST_END(); 
    80022876:	00005597          	auipc	a1,0x5
    8002287a:	4ba58593          	addi	a1,a1,1210 # 80027d30 <__func__.0+0x2d0>
    8002287e:	00005517          	auipc	a0,0x5
    80022882:	55a50513          	addi	a0,a0,1370 # 80027dd8 <__func__.0+0x378>
    80022886:	470030ef          	jal	80025cf6 <printf>
    8002288a:	4511                	li	a0,4
    8002288c:	b6ade0ef          	jal	80000bf6 <goto_priv>
    80022890:	c1dde0ef          	jal	800014ac <reset_state>
}
    80022894:	60e2                	ld	ra,24(sp)
    80022896:	6442                	ld	s0,16(sp)
    80022898:	8526                	mv	a0,s1
    8002289a:	64a2                	ld	s1,8(sp)
    8002289c:	6105                	addi	sp,sp,32
    8002289e:	8082                	ret

00000000800228a0 <timecmp_test_8>:

bool timecmp_test_8() {
    800228a0:	1101                	addi	sp,sp,-32

    TEST_START();    
    800228a2:	00005597          	auipc	a1,0x5
    800228a6:	08658593          	addi	a1,a1,134 # 80027928 <__func__.13>
    800228aa:	00005517          	auipc	a0,0x5
    800228ae:	49650513          	addi	a0,a0,1174 # 80027d40 <__func__.0+0x2e0>
bool timecmp_test_8() {
    800228b2:	ec06                	sd	ra,24(sp)
    800228b4:	e822                	sd	s0,16(sp)
    800228b6:	e426                	sd	s1,8(sp)
    TEST_START();    
    800228b8:	43e030ef          	jal	80025cf6 <printf>
    800228bc:	4529                	li	a0,10
    800228be:	242020ef          	jal	80024b00 <putchar>

    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    800228c2:	57fd                	li	a5,-1
    800228c4:	17fe                	slli	a5,a5,0x3f
    800228c6:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_HENVCFG,  1ULL << 63);     //stce位
    800228ca:	60a7a073          	csrs	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800228ce:	30616073          	csrsi	mcounteren,2
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    800228d2:	60617073          	csrci	hcounteren,2

    goto_priv(PRIV_VS);
    800228d6:	4509                	li	a0,2
    800228d8:	b1ede0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    800228dc:	0330000f          	fence	rw,rw
    800228e0:	00026417          	auipc	s0,0x26
    800228e4:	73040413          	addi	s0,s0,1840 # 80049010 <excpt>
    800228e8:	4785                	li	a5,1
    800228ea:	00026717          	auipc	a4,0x26
    800228ee:	74073f23          	sd	zero,1886(a4) # 80049048 <excpt+0x38>
    800228f2:	00f41023          	sh	a5,0(s0)
    800228f6:	0330000f          	fence	rw,rw
    CSRR(CSR_STIMECMP);
    800228fa:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=0",
    800228fe:	08200593          	li	a1,130
    80022902:	0000d617          	auipc	a2,0xd
    80022906:	56660613          	addi	a2,a2,1382 # 8002fe68 <__func__.0+0x8408>
    8002290a:	00005517          	auipc	a0,0x5
    8002290e:	44e50513          	addi	a0,a0,1102 # 80027d58 <__func__.0+0x2f8>
    80022912:	3e4030ef          	jal	80025cf6 <printf>
    80022916:	00026797          	auipc	a5,0x26
    8002291a:	6fb7c783          	lbu	a5,1787(a5) # 80049011 <excpt+0x1>
    8002291e:	00005597          	auipc	a1,0x5
    80022922:	41258593          	addi	a1,a1,1042 # 80027d30 <__func__.0+0x2d0>
    80022926:	cf89                	beqz	a5,80022940 <timecmp_test_8+0xa0>
    80022928:	6418                	ld	a4,8(s0)
    8002292a:	47d9                	li	a5,22
    8002292c:	00005597          	auipc	a1,0x5
    80022930:	3f458593          	addi	a1,a1,1012 # 80027d20 <__func__.0+0x2c0>
    80022934:	00f70663          	beq	a4,a5,80022940 <timecmp_test_8+0xa0>
    80022938:	00005597          	auipc	a1,0x5
    8002293c:	3f858593          	addi	a1,a1,1016 # 80027d30 <__func__.0+0x2d0>
    80022940:	00005517          	auipc	a0,0x5
    80022944:	43050513          	addi	a0,a0,1072 # 80027d70 <__func__.0+0x310>
    80022948:	3ae030ef          	jal	80025cf6 <printf>
    8002294c:	00026797          	auipc	a5,0x26
    80022950:	6c57c783          	lbu	a5,1733(a5) # 80049011 <excpt+0x1>
    80022954:	c789                	beqz	a5,8002295e <timecmp_test_8+0xbe>
    80022956:	6418                	ld	a4,8(s0)
    80022958:	47d9                	li	a5,22
    8002295a:	00f70c63          	beq	a4,a5,80022972 <timecmp_test_8+0xd2>
    8002295e:	00005517          	auipc	a0,0x5
    80022962:	41a50513          	addi	a0,a0,1050 # 80027d78 <__func__.0+0x318>
    80022966:	390030ef          	jal	80025cf6 <printf>
    8002296a:	02900513          	li	a0,41
    8002296e:	192020ef          	jal	80024b00 <putchar>
    80022972:	4529                	li	a0,10
    80022974:	18c020ef          	jal	80024b00 <putchar>
    80022978:	00026497          	auipc	s1,0x26
    8002297c:	6994c483          	lbu	s1,1689(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80022980:	00005597          	auipc	a1,0x5
    80022984:	3b058593          	addi	a1,a1,944 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=0",
    80022988:	cc91                	beqz	s1,800229a4 <timecmp_test_8+0x104>
    8002298a:	6418                	ld	a4,8(s0)
    8002298c:	47d9                	li	a5,22
    TEST_END(); 
    8002298e:	00005597          	auipc	a1,0x5
    80022992:	39258593          	addi	a1,a1,914 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=0",
    80022996:	00f70763          	beq	a4,a5,800229a4 <timecmp_test_8+0x104>
    8002299a:	4481                	li	s1,0
    TEST_END(); 
    8002299c:	00005597          	auipc	a1,0x5
    800229a0:	39458593          	addi	a1,a1,916 # 80027d30 <__func__.0+0x2d0>
    800229a4:	00005517          	auipc	a0,0x5
    800229a8:	43450513          	addi	a0,a0,1076 # 80027dd8 <__func__.0+0x378>
    800229ac:	34a030ef          	jal	80025cf6 <printf>
    800229b0:	4511                	li	a0,4
    800229b2:	a44de0ef          	jal	80000bf6 <goto_priv>
    800229b6:	af7de0ef          	jal	800014ac <reset_state>
}
    800229ba:	60e2                	ld	ra,24(sp)
    800229bc:	6442                	ld	s0,16(sp)
    800229be:	8526                	mv	a0,s1
    800229c0:	64a2                	ld	s1,8(sp)
    800229c2:	6105                	addi	sp,sp,32
    800229c4:	8082                	ret

00000000800229c6 <timecmp_test_9>:

bool timecmp_test_9() {
    800229c6:	1101                	addi	sp,sp,-32

    TEST_START();    
    800229c8:	00005597          	auipc	a1,0x5
    800229cc:	f7058593          	addi	a1,a1,-144 # 80027938 <__func__.12>
    800229d0:	00005517          	auipc	a0,0x5
    800229d4:	37050513          	addi	a0,a0,880 # 80027d40 <__func__.0+0x2e0>
bool timecmp_test_9() {
    800229d8:	ec06                	sd	ra,24(sp)
    800229da:	e822                	sd	s0,16(sp)
    800229dc:	e426                	sd	s1,8(sp)
    TEST_START();    
    800229de:	318030ef          	jal	80025cf6 <printf>
    800229e2:	4529                	li	a0,10
    800229e4:	11c020ef          	jal	80024b00 <putchar>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    800229e8:	57fd                	li	a5,-1
    800229ea:	17fe                	slli	a5,a5,0x3f
    800229ec:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    800229f0:	60a7b073          	csrc	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800229f4:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    800229f8:	60616073          	csrsi	hcounteren,2

    goto_priv(PRIV_VS);
    800229fc:	4509                	li	a0,2
    800229fe:	9f8de0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80022a02:	0330000f          	fence	rw,rw
    80022a06:	00026417          	auipc	s0,0x26
    80022a0a:	60a40413          	addi	s0,s0,1546 # 80049010 <excpt>
    80022a0e:	4785                	li	a5,1
    80022a10:	00026717          	auipc	a4,0x26
    80022a14:	62073c23          	sd	zero,1592(a4) # 80049048 <excpt+0x38>
    80022a18:	00f41023          	sh	a5,0(s0)
    80022a1c:	0330000f          	fence	rw,rw
    CSRR(CSR_STIMECMP);
    80022a20:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1 hcounteren.tm=1",
    80022a24:	08200593          	li	a1,130
    80022a28:	0000d617          	auipc	a2,0xd
    80022a2c:	4c060613          	addi	a2,a2,1216 # 8002fee8 <__func__.0+0x8488>
    80022a30:	00005517          	auipc	a0,0x5
    80022a34:	32850513          	addi	a0,a0,808 # 80027d58 <__func__.0+0x2f8>
    80022a38:	2be030ef          	jal	80025cf6 <printf>
    80022a3c:	00026797          	auipc	a5,0x26
    80022a40:	5d57c783          	lbu	a5,1493(a5) # 80049011 <excpt+0x1>
    80022a44:	00005597          	auipc	a1,0x5
    80022a48:	2ec58593          	addi	a1,a1,748 # 80027d30 <__func__.0+0x2d0>
    80022a4c:	cf89                	beqz	a5,80022a66 <timecmp_test_9+0xa0>
    80022a4e:	6418                	ld	a4,8(s0)
    80022a50:	47d9                	li	a5,22
    80022a52:	00005597          	auipc	a1,0x5
    80022a56:	2ce58593          	addi	a1,a1,718 # 80027d20 <__func__.0+0x2c0>
    80022a5a:	00f70663          	beq	a4,a5,80022a66 <timecmp_test_9+0xa0>
    80022a5e:	00005597          	auipc	a1,0x5
    80022a62:	2d258593          	addi	a1,a1,722 # 80027d30 <__func__.0+0x2d0>
    80022a66:	00005517          	auipc	a0,0x5
    80022a6a:	30a50513          	addi	a0,a0,778 # 80027d70 <__func__.0+0x310>
    80022a6e:	288030ef          	jal	80025cf6 <printf>
    80022a72:	00026797          	auipc	a5,0x26
    80022a76:	59f7c783          	lbu	a5,1439(a5) # 80049011 <excpt+0x1>
    80022a7a:	c789                	beqz	a5,80022a84 <timecmp_test_9+0xbe>
    80022a7c:	6418                	ld	a4,8(s0)
    80022a7e:	47d9                	li	a5,22
    80022a80:	00f70c63          	beq	a4,a5,80022a98 <timecmp_test_9+0xd2>
    80022a84:	00005517          	auipc	a0,0x5
    80022a88:	2f450513          	addi	a0,a0,756 # 80027d78 <__func__.0+0x318>
    80022a8c:	26a030ef          	jal	80025cf6 <printf>
    80022a90:	02900513          	li	a0,41
    80022a94:	06c020ef          	jal	80024b00 <putchar>
    80022a98:	4529                	li	a0,10
    80022a9a:	066020ef          	jal	80024b00 <putchar>
    80022a9e:	00026497          	auipc	s1,0x26
    80022aa2:	5734c483          	lbu	s1,1395(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80022aa6:	00005597          	auipc	a1,0x5
    80022aaa:	28a58593          	addi	a1,a1,650 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1 hcounteren.tm=1",
    80022aae:	cc91                	beqz	s1,80022aca <timecmp_test_9+0x104>
    80022ab0:	6418                	ld	a4,8(s0)
    80022ab2:	47d9                	li	a5,22
    TEST_END(); 
    80022ab4:	00005597          	auipc	a1,0x5
    80022ab8:	26c58593          	addi	a1,a1,620 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1 hcounteren.tm=1",
    80022abc:	00f70763          	beq	a4,a5,80022aca <timecmp_test_9+0x104>
    80022ac0:	4481                	li	s1,0
    TEST_END(); 
    80022ac2:	00005597          	auipc	a1,0x5
    80022ac6:	26e58593          	addi	a1,a1,622 # 80027d30 <__func__.0+0x2d0>
    80022aca:	00005517          	auipc	a0,0x5
    80022ace:	30e50513          	addi	a0,a0,782 # 80027dd8 <__func__.0+0x378>
    80022ad2:	224030ef          	jal	80025cf6 <printf>
    80022ad6:	4511                	li	a0,4
    80022ad8:	91ede0ef          	jal	80000bf6 <goto_priv>
    80022adc:	9d1de0ef          	jal	800014ac <reset_state>
}
    80022ae0:	60e2                	ld	ra,24(sp)
    80022ae2:	6442                	ld	s0,16(sp)
    80022ae4:	8526                	mv	a0,s1
    80022ae6:	64a2                	ld	s1,8(sp)
    80022ae8:	6105                	addi	sp,sp,32
    80022aea:	8082                	ret

0000000080022aec <timecmp_test_10>:

bool timecmp_test_10() {
    80022aec:	1141                	addi	sp,sp,-16

    TEST_START();    
    80022aee:	00005597          	auipc	a1,0x5
    80022af2:	e5a58593          	addi	a1,a1,-422 # 80027948 <__func__.11>
    80022af6:	00005517          	auipc	a0,0x5
    80022afa:	24a50513          	addi	a0,a0,586 # 80027d40 <__func__.0+0x2e0>
bool timecmp_test_10() {
    80022afe:	e406                	sd	ra,8(sp)
    80022b00:	e022                	sd	s0,0(sp)
    TEST_START();    
    80022b02:	1f4030ef          	jal	80025cf6 <printf>
    80022b06:	4529                	li	a0,10
    80022b08:	7f9010ef          	jal	80024b00 <putchar>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80022b0c:	57fd                	li	a5,-1
    80022b0e:	17fe                	slli	a5,a5,0x3f
    80022b10:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_HENVCFG,  1ULL << 63);     //stce位
    80022b14:	60a7a073          	csrs	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80022b18:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    80022b1c:	60616073          	csrsi	hcounteren,2

    goto_priv(PRIV_VS);
    80022b20:	4509                	li	a0,2
    80022b22:	8d4de0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80022b26:	0330000f          	fence	rw,rw
    80022b2a:	4785                	li	a5,1
    80022b2c:	00026717          	auipc	a4,0x26
    80022b30:	50073e23          	sd	zero,1308(a4) # 80049048 <excpt+0x38>
    80022b34:	00026717          	auipc	a4,0x26
    80022b38:	4cf71e23          	sh	a5,1244(a4) # 80049010 <excpt>
    80022b3c:	0330000f          	fence	rw,rw
    CSRR(CSR_STIMECMP);
    80022b40:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp successful when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=1",
    80022b44:	08200593          	li	a1,130
    80022b48:	0000d617          	auipc	a2,0xd
    80022b4c:	42060613          	addi	a2,a2,1056 # 8002ff68 <__func__.0+0x8508>
    80022b50:	00005517          	auipc	a0,0x5
    80022b54:	20850513          	addi	a0,a0,520 # 80027d58 <__func__.0+0x2f8>
    80022b58:	19e030ef          	jal	80025cf6 <printf>
    80022b5c:	00026797          	auipc	a5,0x26
    80022b60:	4b57c783          	lbu	a5,1205(a5) # 80049011 <excpt+0x1>
    80022b64:	00005597          	auipc	a1,0x5
    80022b68:	1bc58593          	addi	a1,a1,444 # 80027d20 <__func__.0+0x2c0>
    80022b6c:	c789                	beqz	a5,80022b76 <timecmp_test_10+0x8a>
    80022b6e:	00005597          	auipc	a1,0x5
    80022b72:	1c258593          	addi	a1,a1,450 # 80027d30 <__func__.0+0x2d0>
    80022b76:	00005517          	auipc	a0,0x5
    80022b7a:	1fa50513          	addi	a0,a0,506 # 80027d70 <__func__.0+0x310>
    80022b7e:	178030ef          	jal	80025cf6 <printf>
    80022b82:	00026797          	auipc	a5,0x26
    80022b86:	48f7c783          	lbu	a5,1167(a5) # 80049011 <excpt+0x1>
    80022b8a:	e7a1                	bnez	a5,80022bd2 <timecmp_test_10+0xe6>
    80022b8c:	4529                	li	a0,10
    80022b8e:	773010ef          	jal	80024b00 <putchar>
    80022b92:	00026797          	auipc	a5,0x26
    80022b96:	47f7c783          	lbu	a5,1151(a5) # 80049011 <excpt+0x1>
    80022b9a:	e795                	bnez	a5,80022bc6 <timecmp_test_10+0xda>
    80022b9c:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80022b9e:	00005597          	auipc	a1,0x5
    80022ba2:	18258593          	addi	a1,a1,386 # 80027d20 <__func__.0+0x2c0>
    80022ba6:	00005517          	auipc	a0,0x5
    80022baa:	23250513          	addi	a0,a0,562 # 80027dd8 <__func__.0+0x378>
    80022bae:	148030ef          	jal	80025cf6 <printf>
    80022bb2:	4511                	li	a0,4
    80022bb4:	842de0ef          	jal	80000bf6 <goto_priv>
    80022bb8:	8f5de0ef          	jal	800014ac <reset_state>
}
    80022bbc:	60a2                	ld	ra,8(sp)
    80022bbe:	8522                	mv	a0,s0
    80022bc0:	6402                	ld	s0,0(sp)
    80022bc2:	0141                	addi	sp,sp,16
    80022bc4:	8082                	ret
    TEST_ASSERT("vs access to stimecmp successful when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=1",
    80022bc6:	4401                	li	s0,0
    TEST_END(); 
    80022bc8:	00005597          	auipc	a1,0x5
    80022bcc:	16858593          	addi	a1,a1,360 # 80027d30 <__func__.0+0x2d0>
    80022bd0:	bfd9                	j	80022ba6 <timecmp_test_10+0xba>
    TEST_ASSERT("vs access to stimecmp successful when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=1",
    80022bd2:	00005517          	auipc	a0,0x5
    80022bd6:	1a650513          	addi	a0,a0,422 # 80027d78 <__func__.0+0x318>
    80022bda:	11c030ef          	jal	80025cf6 <printf>
    80022bde:	02900513          	li	a0,41
    80022be2:	71f010ef          	jal	80024b00 <putchar>
    80022be6:	b75d                	j	80022b8c <timecmp_test_10+0xa0>

0000000080022be8 <timecmp_test_11>:

bool timecmp_test_11() {
    80022be8:	1141                	addi	sp,sp,-16

    TEST_START();    
    80022bea:	00005597          	auipc	a1,0x5
    80022bee:	d6e58593          	addi	a1,a1,-658 # 80027958 <__func__.10>
    80022bf2:	00005517          	auipc	a0,0x5
    80022bf6:	14e50513          	addi	a0,a0,334 # 80027d40 <__func__.0+0x2e0>
bool timecmp_test_11() {
    80022bfa:	e406                	sd	ra,8(sp)
    80022bfc:	e022                	sd	s0,0(sp)
    TEST_START();    
    80022bfe:	0f8030ef          	jal	80025cf6 <printf>
    80022c02:	4529                	li	a0,10
    80022c04:	6fd010ef          	jal	80024b00 <putchar>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80022c08:	57fd                	li	a5,-1
    80022c0a:	17fe                	slli	a5,a5,0x3f
    80022c0c:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80022c10:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HS);
    80022c14:	450d                	li	a0,3
    80022c16:	fe1dd0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80022c1a:	0330000f          	fence	rw,rw
    80022c1e:	4785                	li	a5,1
    80022c20:	00026717          	auipc	a4,0x26
    80022c24:	42073423          	sd	zero,1064(a4) # 80049048 <excpt+0x38>
    80022c28:	00026717          	auipc	a4,0x26
    80022c2c:	3ef71423          	sh	a5,1000(a4) # 80049010 <excpt>
    80022c30:	0330000f          	fence	rw,rw
    CSRR(CSR_STIMECMP);
    80022c34:	14d027f3          	csrr	a5,stimecmp
    CSRR(CSR_VSTIMECMP);
    80022c38:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vs access to stimecmp/vstimecmp successful when menvcfg.stce=1 mcounteren.tm=1",
    80022c3c:	08200593          	li	a1,130
    80022c40:	0000d617          	auipc	a2,0xd
    80022c44:	39060613          	addi	a2,a2,912 # 8002ffd0 <__func__.0+0x8570>
    80022c48:	00005517          	auipc	a0,0x5
    80022c4c:	11050513          	addi	a0,a0,272 # 80027d58 <__func__.0+0x2f8>
    80022c50:	0a6030ef          	jal	80025cf6 <printf>
    80022c54:	00026797          	auipc	a5,0x26
    80022c58:	3bd7c783          	lbu	a5,957(a5) # 80049011 <excpt+0x1>
    80022c5c:	00005597          	auipc	a1,0x5
    80022c60:	0c458593          	addi	a1,a1,196 # 80027d20 <__func__.0+0x2c0>
    80022c64:	c789                	beqz	a5,80022c6e <timecmp_test_11+0x86>
    80022c66:	00005597          	auipc	a1,0x5
    80022c6a:	0ca58593          	addi	a1,a1,202 # 80027d30 <__func__.0+0x2d0>
    80022c6e:	00005517          	auipc	a0,0x5
    80022c72:	10250513          	addi	a0,a0,258 # 80027d70 <__func__.0+0x310>
    80022c76:	080030ef          	jal	80025cf6 <printf>
    80022c7a:	00026797          	auipc	a5,0x26
    80022c7e:	3977c783          	lbu	a5,919(a5) # 80049011 <excpt+0x1>
    80022c82:	e7a1                	bnez	a5,80022cca <timecmp_test_11+0xe2>
    80022c84:	4529                	li	a0,10
    80022c86:	67b010ef          	jal	80024b00 <putchar>
    80022c8a:	00026797          	auipc	a5,0x26
    80022c8e:	3877c783          	lbu	a5,903(a5) # 80049011 <excpt+0x1>
    80022c92:	e795                	bnez	a5,80022cbe <timecmp_test_11+0xd6>
    80022c94:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80022c96:	00005597          	auipc	a1,0x5
    80022c9a:	08a58593          	addi	a1,a1,138 # 80027d20 <__func__.0+0x2c0>
    80022c9e:	00005517          	auipc	a0,0x5
    80022ca2:	13a50513          	addi	a0,a0,314 # 80027dd8 <__func__.0+0x378>
    80022ca6:	050030ef          	jal	80025cf6 <printf>
    80022caa:	4511                	li	a0,4
    80022cac:	f4bdd0ef          	jal	80000bf6 <goto_priv>
    80022cb0:	ffcde0ef          	jal	800014ac <reset_state>
}
    80022cb4:	60a2                	ld	ra,8(sp)
    80022cb6:	8522                	mv	a0,s0
    80022cb8:	6402                	ld	s0,0(sp)
    80022cba:	0141                	addi	sp,sp,16
    80022cbc:	8082                	ret
    TEST_ASSERT("vs access to stimecmp/vstimecmp successful when menvcfg.stce=1 mcounteren.tm=1",
    80022cbe:	4401                	li	s0,0
    TEST_END(); 
    80022cc0:	00005597          	auipc	a1,0x5
    80022cc4:	07058593          	addi	a1,a1,112 # 80027d30 <__func__.0+0x2d0>
    80022cc8:	bfd9                	j	80022c9e <timecmp_test_11+0xb6>
    TEST_ASSERT("vs access to stimecmp/vstimecmp successful when menvcfg.stce=1 mcounteren.tm=1",
    80022cca:	00005517          	auipc	a0,0x5
    80022cce:	0ae50513          	addi	a0,a0,174 # 80027d78 <__func__.0+0x318>
    80022cd2:	024030ef          	jal	80025cf6 <printf>
    80022cd6:	02900513          	li	a0,41
    80022cda:	627010ef          	jal	80024b00 <putchar>
    80022cde:	b75d                	j	80022c84 <timecmp_test_11+0x9c>

0000000080022ce0 <timecmp_test_12>:

bool timecmp_test_12() {
    80022ce0:	1141                	addi	sp,sp,-16

    TEST_START();    
    80022ce2:	00005597          	auipc	a1,0x5
    80022ce6:	c8658593          	addi	a1,a1,-890 # 80027968 <__func__.9>
    80022cea:	00005517          	auipc	a0,0x5
    80022cee:	05650513          	addi	a0,a0,86 # 80027d40 <__func__.0+0x2e0>
bool timecmp_test_12() {
    80022cf2:	e406                	sd	ra,8(sp)
    80022cf4:	e022                	sd	s0,0(sp)
    TEST_START();    
    80022cf6:	000030ef          	jal	80025cf6 <printf>
    80022cfa:	4529                	li	a0,10
    80022cfc:	605010ef          	jal	80024b00 <putchar>
    CSRS(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    80022d00:	57fd                	li	a5,-1
    80022d02:	17fe                	slli	a5,a5,0x3f
    80022d04:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80022d08:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HS);
    80022d0c:	450d                	li	a0,3
    80022d0e:	ee9dd0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80022d12:	0330000f          	fence	rw,rw
    80022d16:	4785                	li	a5,1
    80022d18:	00026717          	auipc	a4,0x26
    80022d1c:	32073823          	sd	zero,816(a4) # 80049048 <excpt+0x38>
    80022d20:	00026717          	auipc	a4,0x26
    80022d24:	2ef71823          	sh	a5,752(a4) # 80049010 <excpt>
    80022d28:	0330000f          	fence	rw,rw
    CSRR(CSR_VSTIMECMP);
    80022d2c:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hs access to vstimecmp successful exception when menvcfg.stce=1 mcounteren.tm=1",
    80022d30:	08200593          	li	a1,130
    80022d34:	0000d617          	auipc	a2,0xd
    80022d38:	2ec60613          	addi	a2,a2,748 # 80030020 <__func__.0+0x85c0>
    80022d3c:	00005517          	auipc	a0,0x5
    80022d40:	01c50513          	addi	a0,a0,28 # 80027d58 <__func__.0+0x2f8>
    80022d44:	7b3020ef          	jal	80025cf6 <printf>
    80022d48:	00026797          	auipc	a5,0x26
    80022d4c:	2c97c783          	lbu	a5,713(a5) # 80049011 <excpt+0x1>
    80022d50:	00005597          	auipc	a1,0x5
    80022d54:	fd058593          	addi	a1,a1,-48 # 80027d20 <__func__.0+0x2c0>
    80022d58:	c789                	beqz	a5,80022d62 <timecmp_test_12+0x82>
    80022d5a:	00005597          	auipc	a1,0x5
    80022d5e:	fd658593          	addi	a1,a1,-42 # 80027d30 <__func__.0+0x2d0>
    80022d62:	00005517          	auipc	a0,0x5
    80022d66:	00e50513          	addi	a0,a0,14 # 80027d70 <__func__.0+0x310>
    80022d6a:	78d020ef          	jal	80025cf6 <printf>
    80022d6e:	00026797          	auipc	a5,0x26
    80022d72:	2a37c783          	lbu	a5,675(a5) # 80049011 <excpt+0x1>
    80022d76:	e7a1                	bnez	a5,80022dbe <timecmp_test_12+0xde>
    80022d78:	4529                	li	a0,10
    80022d7a:	587010ef          	jal	80024b00 <putchar>
    80022d7e:	00026797          	auipc	a5,0x26
    80022d82:	2937c783          	lbu	a5,659(a5) # 80049011 <excpt+0x1>
    80022d86:	e795                	bnez	a5,80022db2 <timecmp_test_12+0xd2>
    80022d88:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80022d8a:	00005597          	auipc	a1,0x5
    80022d8e:	f9658593          	addi	a1,a1,-106 # 80027d20 <__func__.0+0x2c0>
    80022d92:	00005517          	auipc	a0,0x5
    80022d96:	04650513          	addi	a0,a0,70 # 80027dd8 <__func__.0+0x378>
    80022d9a:	75d020ef          	jal	80025cf6 <printf>
    80022d9e:	4511                	li	a0,4
    80022da0:	e57dd0ef          	jal	80000bf6 <goto_priv>
    80022da4:	f08de0ef          	jal	800014ac <reset_state>
}
    80022da8:	60a2                	ld	ra,8(sp)
    80022daa:	8522                	mv	a0,s0
    80022dac:	6402                	ld	s0,0(sp)
    80022dae:	0141                	addi	sp,sp,16
    80022db0:	8082                	ret
    TEST_ASSERT("hs access to vstimecmp successful exception when menvcfg.stce=1 mcounteren.tm=1",
    80022db2:	4401                	li	s0,0
    TEST_END(); 
    80022db4:	00005597          	auipc	a1,0x5
    80022db8:	f7c58593          	addi	a1,a1,-132 # 80027d30 <__func__.0+0x2d0>
    80022dbc:	bfd9                	j	80022d92 <timecmp_test_12+0xb2>
    TEST_ASSERT("hs access to vstimecmp successful exception when menvcfg.stce=1 mcounteren.tm=1",
    80022dbe:	00005517          	auipc	a0,0x5
    80022dc2:	fba50513          	addi	a0,a0,-70 # 80027d78 <__func__.0+0x318>
    80022dc6:	731020ef          	jal	80025cf6 <printf>
    80022dca:	02900513          	li	a0,41
    80022dce:	533010ef          	jal	80024b00 <putchar>
    80022dd2:	b75d                	j	80022d78 <timecmp_test_12+0x98>

0000000080022dd4 <timecmp_test_13>:

bool timecmp_test_13() {
    80022dd4:	1101                	addi	sp,sp,-32

    TEST_START();    
    80022dd6:	00005597          	auipc	a1,0x5
    80022dda:	ba258593          	addi	a1,a1,-1118 # 80027978 <__func__.8>
    80022dde:	00005517          	auipc	a0,0x5
    80022de2:	f6250513          	addi	a0,a0,-158 # 80027d40 <__func__.0+0x2e0>
bool timecmp_test_13() {
    80022de6:	ec06                	sd	ra,24(sp)
    80022de8:	e822                	sd	s0,16(sp)
    80022dea:	e426                	sd	s1,8(sp)
    TEST_START();    
    80022dec:	70b020ef          	jal	80025cf6 <printf>
    80022df0:	4529                	li	a0,10
    80022df2:	50f010ef          	jal	80024b00 <putchar>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80022df6:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80022dfa:	57fd                	li	a5,-1
    80022dfc:	17fe                	slli	a5,a5,0x3f
    80022dfe:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80022e02:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    80022e06:	30a025f3          	csrr	a1,0x30a
    80022e0a:	0000b517          	auipc	a0,0xb
    80022e0e:	56e50513          	addi	a0,a0,1390 # 8002e378 <__func__.0+0x6918>
    80022e12:	6e5020ef          	jal	80025cf6 <printf>
    80022e16:	60a025f3          	csrr	a1,henvcfg
    80022e1a:	0000b517          	auipc	a0,0xb
    80022e1e:	55e50513          	addi	a0,a0,1374 # 8002e378 <__func__.0+0x6918>
    80022e22:	6d5020ef          	jal	80025cf6 <printf>

    goto_priv(PRIV_VU);
    80022e26:	4501                	li	a0,0
    80022e28:	dcfdd0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80022e2c:	0330000f          	fence	rw,rw
    80022e30:	00026417          	auipc	s0,0x26
    80022e34:	1e040413          	addi	s0,s0,480 # 80049010 <excpt>
    80022e38:	4785                	li	a5,1
    80022e3a:	00026717          	auipc	a4,0x26
    80022e3e:	20073723          	sd	zero,526(a4) # 80049048 <excpt+0x38>
    80022e42:	00f41023          	sh	a5,0(s0)
    80022e46:	0330000f          	fence	rw,rw
    CSRR(CSR_VSTIMECMP);
    80022e4a:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    80022e4e:	00026597          	auipc	a1,0x26
    80022e52:	1c35c583          	lbu	a1,451(a1) # 80049011 <excpt+0x1>
    80022e56:	0000d517          	auipc	a0,0xd
    80022e5a:	21a50513          	addi	a0,a0,538 # 80030070 <__func__.0+0x8610>
    80022e5e:	699020ef          	jal	80025cf6 <printf>
    printf("cause=%d\n",excpt.cause);
    80022e62:	640c                	ld	a1,8(s0)
    80022e64:	0000d517          	auipc	a0,0xd
    80022e68:	21c50513          	addi	a0,a0,540 # 80030080 <__func__.0+0x8620>
    80022e6c:	68b020ef          	jal	80025cf6 <printf>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80022e70:	08200593          	li	a1,130
    80022e74:	0000d617          	auipc	a2,0xd
    80022e78:	21c60613          	addi	a2,a2,540 # 80030090 <__func__.0+0x8630>
    80022e7c:	00005517          	auipc	a0,0x5
    80022e80:	edc50513          	addi	a0,a0,-292 # 80027d58 <__func__.0+0x2f8>
    80022e84:	673020ef          	jal	80025cf6 <printf>
    80022e88:	00026797          	auipc	a5,0x26
    80022e8c:	1897c783          	lbu	a5,393(a5) # 80049011 <excpt+0x1>
    80022e90:	00005597          	auipc	a1,0x5
    80022e94:	ea058593          	addi	a1,a1,-352 # 80027d30 <__func__.0+0x2d0>
    80022e98:	cf89                	beqz	a5,80022eb2 <timecmp_test_13+0xde>
    80022e9a:	6418                	ld	a4,8(s0)
    80022e9c:	47d9                	li	a5,22
    80022e9e:	00005597          	auipc	a1,0x5
    80022ea2:	e8258593          	addi	a1,a1,-382 # 80027d20 <__func__.0+0x2c0>
    80022ea6:	00f70663          	beq	a4,a5,80022eb2 <timecmp_test_13+0xde>
    80022eaa:	00005597          	auipc	a1,0x5
    80022eae:	e8658593          	addi	a1,a1,-378 # 80027d30 <__func__.0+0x2d0>
    80022eb2:	00005517          	auipc	a0,0x5
    80022eb6:	ebe50513          	addi	a0,a0,-322 # 80027d70 <__func__.0+0x310>
    80022eba:	63d020ef          	jal	80025cf6 <printf>
    80022ebe:	00026797          	auipc	a5,0x26
    80022ec2:	1537c783          	lbu	a5,339(a5) # 80049011 <excpt+0x1>
    80022ec6:	c789                	beqz	a5,80022ed0 <timecmp_test_13+0xfc>
    80022ec8:	6418                	ld	a4,8(s0)
    80022eca:	47d9                	li	a5,22
    80022ecc:	00f70c63          	beq	a4,a5,80022ee4 <timecmp_test_13+0x110>
    80022ed0:	00005517          	auipc	a0,0x5
    80022ed4:	ea850513          	addi	a0,a0,-344 # 80027d78 <__func__.0+0x318>
    80022ed8:	61f020ef          	jal	80025cf6 <printf>
    80022edc:	02900513          	li	a0,41
    80022ee0:	421010ef          	jal	80024b00 <putchar>
    80022ee4:	4529                	li	a0,10
    80022ee6:	41b010ef          	jal	80024b00 <putchar>
    80022eea:	00026497          	auipc	s1,0x26
    80022eee:	1274c483          	lbu	s1,295(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80022ef2:	00005597          	auipc	a1,0x5
    80022ef6:	e3e58593          	addi	a1,a1,-450 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80022efa:	cc91                	beqz	s1,80022f16 <timecmp_test_13+0x142>
    80022efc:	6418                	ld	a4,8(s0)
    80022efe:	47d9                	li	a5,22
    TEST_END(); 
    80022f00:	00005597          	auipc	a1,0x5
    80022f04:	e2058593          	addi	a1,a1,-480 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80022f08:	00f70763          	beq	a4,a5,80022f16 <timecmp_test_13+0x142>
    80022f0c:	4481                	li	s1,0
    TEST_END(); 
    80022f0e:	00005597          	auipc	a1,0x5
    80022f12:	e2258593          	addi	a1,a1,-478 # 80027d30 <__func__.0+0x2d0>
    80022f16:	00005517          	auipc	a0,0x5
    80022f1a:	ec250513          	addi	a0,a0,-318 # 80027dd8 <__func__.0+0x378>
    80022f1e:	5d9020ef          	jal	80025cf6 <printf>
    80022f22:	4511                	li	a0,4
    80022f24:	cd3dd0ef          	jal	80000bf6 <goto_priv>
    80022f28:	d84de0ef          	jal	800014ac <reset_state>
}
    80022f2c:	60e2                	ld	ra,24(sp)
    80022f2e:	6442                	ld	s0,16(sp)
    80022f30:	8526                	mv	a0,s1
    80022f32:	64a2                	ld	s1,8(sp)
    80022f34:	6105                	addi	sp,sp,32
    80022f36:	8082                	ret

0000000080022f38 <timecmp_test_14>:

bool timecmp_test_14() {
    80022f38:	1101                	addi	sp,sp,-32

    TEST_START();    
    80022f3a:	00005597          	auipc	a1,0x5
    80022f3e:	a4e58593          	addi	a1,a1,-1458 # 80027988 <__func__.7>
    80022f42:	00005517          	auipc	a0,0x5
    80022f46:	dfe50513          	addi	a0,a0,-514 # 80027d40 <__func__.0+0x2e0>
bool timecmp_test_14() {
    80022f4a:	ec06                	sd	ra,24(sp)
    80022f4c:	e822                	sd	s0,16(sp)
    80022f4e:	e426                	sd	s1,8(sp)
    TEST_START();    
    80022f50:	5a7020ef          	jal	80025cf6 <printf>
    80022f54:	4529                	li	a0,10
    80022f56:	3ab010ef          	jal	80024b00 <putchar>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80022f5a:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80022f5e:	57fd                	li	a5,-1
    80022f60:	17fe                	slli	a5,a5,0x3f
    80022f62:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80022f66:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    80022f6a:	30a025f3          	csrr	a1,0x30a
    80022f6e:	0000b517          	auipc	a0,0xb
    80022f72:	40a50513          	addi	a0,a0,1034 # 8002e378 <__func__.0+0x6918>
    80022f76:	581020ef          	jal	80025cf6 <printf>
    80022f7a:	60a025f3          	csrr	a1,henvcfg
    80022f7e:	0000b517          	auipc	a0,0xb
    80022f82:	3fa50513          	addi	a0,a0,1018 # 8002e378 <__func__.0+0x6918>
    80022f86:	571020ef          	jal	80025cf6 <printf>

    goto_priv(PRIV_VS);
    80022f8a:	4509                	li	a0,2
    80022f8c:	c6bdd0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80022f90:	0330000f          	fence	rw,rw
    80022f94:	00026417          	auipc	s0,0x26
    80022f98:	07c40413          	addi	s0,s0,124 # 80049010 <excpt>
    80022f9c:	4785                	li	a5,1
    80022f9e:	00026717          	auipc	a4,0x26
    80022fa2:	0a073523          	sd	zero,170(a4) # 80049048 <excpt+0x38>
    80022fa6:	00f41023          	sh	a5,0(s0)
    80022faa:	0330000f          	fence	rw,rw
    CSRR(CSR_VSTIMECMP);
    80022fae:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    80022fb2:	00026597          	auipc	a1,0x26
    80022fb6:	05f5c583          	lbu	a1,95(a1) # 80049011 <excpt+0x1>
    80022fba:	0000d517          	auipc	a0,0xd
    80022fbe:	0b650513          	addi	a0,a0,182 # 80030070 <__func__.0+0x8610>
    80022fc2:	535020ef          	jal	80025cf6 <printf>
    printf("cause=%d\n",excpt.cause);
    80022fc6:	640c                	ld	a1,8(s0)
    80022fc8:	0000d517          	auipc	a0,0xd
    80022fcc:	0b850513          	addi	a0,a0,184 # 80030080 <__func__.0+0x8620>
    80022fd0:	527020ef          	jal	80025cf6 <printf>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80022fd4:	08200593          	li	a1,130
    80022fd8:	0000d617          	auipc	a2,0xd
    80022fdc:	12860613          	addi	a2,a2,296 # 80030100 <__func__.0+0x86a0>
    80022fe0:	00005517          	auipc	a0,0x5
    80022fe4:	d7850513          	addi	a0,a0,-648 # 80027d58 <__func__.0+0x2f8>
    80022fe8:	50f020ef          	jal	80025cf6 <printf>
    80022fec:	00026797          	auipc	a5,0x26
    80022ff0:	0257c783          	lbu	a5,37(a5) # 80049011 <excpt+0x1>
    80022ff4:	00005597          	auipc	a1,0x5
    80022ff8:	d3c58593          	addi	a1,a1,-708 # 80027d30 <__func__.0+0x2d0>
    80022ffc:	cf89                	beqz	a5,80023016 <timecmp_test_14+0xde>
    80022ffe:	6418                	ld	a4,8(s0)
    80023000:	47d9                	li	a5,22
    80023002:	00005597          	auipc	a1,0x5
    80023006:	d1e58593          	addi	a1,a1,-738 # 80027d20 <__func__.0+0x2c0>
    8002300a:	00f70663          	beq	a4,a5,80023016 <timecmp_test_14+0xde>
    8002300e:	00005597          	auipc	a1,0x5
    80023012:	d2258593          	addi	a1,a1,-734 # 80027d30 <__func__.0+0x2d0>
    80023016:	00005517          	auipc	a0,0x5
    8002301a:	d5a50513          	addi	a0,a0,-678 # 80027d70 <__func__.0+0x310>
    8002301e:	4d9020ef          	jal	80025cf6 <printf>
    80023022:	00026797          	auipc	a5,0x26
    80023026:	fef7c783          	lbu	a5,-17(a5) # 80049011 <excpt+0x1>
    8002302a:	c789                	beqz	a5,80023034 <timecmp_test_14+0xfc>
    8002302c:	6418                	ld	a4,8(s0)
    8002302e:	47d9                	li	a5,22
    80023030:	00f70c63          	beq	a4,a5,80023048 <timecmp_test_14+0x110>
    80023034:	00005517          	auipc	a0,0x5
    80023038:	d4450513          	addi	a0,a0,-700 # 80027d78 <__func__.0+0x318>
    8002303c:	4bb020ef          	jal	80025cf6 <printf>
    80023040:	02900513          	li	a0,41
    80023044:	2bd010ef          	jal	80024b00 <putchar>
    80023048:	4529                	li	a0,10
    8002304a:	2b7010ef          	jal	80024b00 <putchar>
    8002304e:	00026497          	auipc	s1,0x26
    80023052:	fc34c483          	lbu	s1,-61(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80023056:	00005597          	auipc	a1,0x5
    8002305a:	cda58593          	addi	a1,a1,-806 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    8002305e:	cc91                	beqz	s1,8002307a <timecmp_test_14+0x142>
    80023060:	6418                	ld	a4,8(s0)
    80023062:	47d9                	li	a5,22
    TEST_END(); 
    80023064:	00005597          	auipc	a1,0x5
    80023068:	cbc58593          	addi	a1,a1,-836 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    8002306c:	00f70763          	beq	a4,a5,8002307a <timecmp_test_14+0x142>
    80023070:	4481                	li	s1,0
    TEST_END(); 
    80023072:	00005597          	auipc	a1,0x5
    80023076:	cbe58593          	addi	a1,a1,-834 # 80027d30 <__func__.0+0x2d0>
    8002307a:	00005517          	auipc	a0,0x5
    8002307e:	d5e50513          	addi	a0,a0,-674 # 80027dd8 <__func__.0+0x378>
    80023082:	475020ef          	jal	80025cf6 <printf>
    80023086:	4511                	li	a0,4
    80023088:	b6fdd0ef          	jal	80000bf6 <goto_priv>
    8002308c:	c20de0ef          	jal	800014ac <reset_state>
}
    80023090:	60e2                	ld	ra,24(sp)
    80023092:	6442                	ld	s0,16(sp)
    80023094:	8526                	mv	a0,s1
    80023096:	64a2                	ld	s1,8(sp)
    80023098:	6105                	addi	sp,sp,32
    8002309a:	8082                	ret

000000008002309c <timecmp_test_15>:


bool timecmp_test_15() {
    8002309c:	1101                	addi	sp,sp,-32

    TEST_START();    
    8002309e:	00005597          	auipc	a1,0x5
    800230a2:	8fa58593          	addi	a1,a1,-1798 # 80027998 <__func__.6>
    800230a6:	00005517          	auipc	a0,0x5
    800230aa:	c9a50513          	addi	a0,a0,-870 # 80027d40 <__func__.0+0x2e0>
bool timecmp_test_15() {
    800230ae:	ec06                	sd	ra,24(sp)
    800230b0:	e822                	sd	s0,16(sp)
    800230b2:	e426                	sd	s1,8(sp)
    TEST_START();    
    800230b4:	443020ef          	jal	80025cf6 <printf>
    800230b8:	4529                	li	a0,10
    800230ba:	247010ef          	jal	80024b00 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800230be:	30617073          	csrci	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    800230c2:	57fd                	li	a5,-1
    800230c4:	17fe                	slli	a5,a5,0x3f
    800230c6:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    800230ca:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    800230ce:	30a025f3          	csrr	a1,0x30a
    800230d2:	0000b517          	auipc	a0,0xb
    800230d6:	2a650513          	addi	a0,a0,678 # 8002e378 <__func__.0+0x6918>
    800230da:	41d020ef          	jal	80025cf6 <printf>
    800230de:	60a025f3          	csrr	a1,henvcfg
    800230e2:	0000b517          	auipc	a0,0xb
    800230e6:	29650513          	addi	a0,a0,662 # 8002e378 <__func__.0+0x6918>
    800230ea:	40d020ef          	jal	80025cf6 <printf>

    goto_priv(PRIV_VU);
    800230ee:	4501                	li	a0,0
    800230f0:	b07dd0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    800230f4:	0330000f          	fence	rw,rw
    800230f8:	00026417          	auipc	s0,0x26
    800230fc:	f1840413          	addi	s0,s0,-232 # 80049010 <excpt>
    80023100:	4785                	li	a5,1
    80023102:	00026717          	auipc	a4,0x26
    80023106:	f4073323          	sd	zero,-186(a4) # 80049048 <excpt+0x38>
    8002310a:	00f41023          	sh	a5,0(s0)
    8002310e:	0330000f          	fence	rw,rw
    CSRR(CSR_VSTIMECMP);
    80023112:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    80023116:	00026597          	auipc	a1,0x26
    8002311a:	efb5c583          	lbu	a1,-261(a1) # 80049011 <excpt+0x1>
    8002311e:	0000d517          	auipc	a0,0xd
    80023122:	f5250513          	addi	a0,a0,-174 # 80030070 <__func__.0+0x8610>
    80023126:	3d1020ef          	jal	80025cf6 <printf>
    printf("cause=%d\n",excpt.cause);
    8002312a:	640c                	ld	a1,8(s0)
    8002312c:	0000d517          	auipc	a0,0xd
    80023130:	f5450513          	addi	a0,a0,-172 # 80030080 <__func__.0+0x8620>
    80023134:	3c3020ef          	jal	80025cf6 <printf>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    80023138:	08200593          	li	a1,130
    8002313c:	0000d617          	auipc	a2,0xd
    80023140:	03460613          	addi	a2,a2,52 # 80030170 <__func__.0+0x8710>
    80023144:	00005517          	auipc	a0,0x5
    80023148:	c1450513          	addi	a0,a0,-1004 # 80027d58 <__func__.0+0x2f8>
    8002314c:	3ab020ef          	jal	80025cf6 <printf>
    80023150:	00026797          	auipc	a5,0x26
    80023154:	ec17c783          	lbu	a5,-319(a5) # 80049011 <excpt+0x1>
    80023158:	00005597          	auipc	a1,0x5
    8002315c:	bd858593          	addi	a1,a1,-1064 # 80027d30 <__func__.0+0x2d0>
    80023160:	cf89                	beqz	a5,8002317a <timecmp_test_15+0xde>
    80023162:	6418                	ld	a4,8(s0)
    80023164:	4789                	li	a5,2
    80023166:	00005597          	auipc	a1,0x5
    8002316a:	bba58593          	addi	a1,a1,-1094 # 80027d20 <__func__.0+0x2c0>
    8002316e:	00f70663          	beq	a4,a5,8002317a <timecmp_test_15+0xde>
    80023172:	00005597          	auipc	a1,0x5
    80023176:	bbe58593          	addi	a1,a1,-1090 # 80027d30 <__func__.0+0x2d0>
    8002317a:	00005517          	auipc	a0,0x5
    8002317e:	bf650513          	addi	a0,a0,-1034 # 80027d70 <__func__.0+0x310>
    80023182:	375020ef          	jal	80025cf6 <printf>
    80023186:	00026797          	auipc	a5,0x26
    8002318a:	e8b7c783          	lbu	a5,-373(a5) # 80049011 <excpt+0x1>
    8002318e:	c789                	beqz	a5,80023198 <timecmp_test_15+0xfc>
    80023190:	6418                	ld	a4,8(s0)
    80023192:	4789                	li	a5,2
    80023194:	00f70c63          	beq	a4,a5,800231ac <timecmp_test_15+0x110>
    80023198:	00005517          	auipc	a0,0x5
    8002319c:	be050513          	addi	a0,a0,-1056 # 80027d78 <__func__.0+0x318>
    800231a0:	357020ef          	jal	80025cf6 <printf>
    800231a4:	02900513          	li	a0,41
    800231a8:	159010ef          	jal	80024b00 <putchar>
    800231ac:	4529                	li	a0,10
    800231ae:	153010ef          	jal	80024b00 <putchar>
    800231b2:	00026497          	auipc	s1,0x26
    800231b6:	e5f4c483          	lbu	s1,-417(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    800231ba:	00005597          	auipc	a1,0x5
    800231be:	b7658593          	addi	a1,a1,-1162 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    800231c2:	cc91                	beqz	s1,800231de <timecmp_test_15+0x142>
    800231c4:	6418                	ld	a4,8(s0)
    800231c6:	4789                	li	a5,2
    TEST_END(); 
    800231c8:	00005597          	auipc	a1,0x5
    800231cc:	b5858593          	addi	a1,a1,-1192 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    800231d0:	00f70763          	beq	a4,a5,800231de <timecmp_test_15+0x142>
    800231d4:	4481                	li	s1,0
    TEST_END(); 
    800231d6:	00005597          	auipc	a1,0x5
    800231da:	b5a58593          	addi	a1,a1,-1190 # 80027d30 <__func__.0+0x2d0>
    800231de:	00005517          	auipc	a0,0x5
    800231e2:	bfa50513          	addi	a0,a0,-1030 # 80027dd8 <__func__.0+0x378>
    800231e6:	311020ef          	jal	80025cf6 <printf>
    800231ea:	4511                	li	a0,4
    800231ec:	a0bdd0ef          	jal	80000bf6 <goto_priv>
    800231f0:	abcde0ef          	jal	800014ac <reset_state>
}
    800231f4:	60e2                	ld	ra,24(sp)
    800231f6:	6442                	ld	s0,16(sp)
    800231f8:	8526                	mv	a0,s1
    800231fa:	64a2                	ld	s1,8(sp)
    800231fc:	6105                	addi	sp,sp,32
    800231fe:	8082                	ret

0000000080023200 <timecmp_test_16>:

bool timecmp_test_16() {
    80023200:	1101                	addi	sp,sp,-32

    TEST_START();    
    80023202:	00004597          	auipc	a1,0x4
    80023206:	7a658593          	addi	a1,a1,1958 # 800279a8 <__func__.5>
    8002320a:	00005517          	auipc	a0,0x5
    8002320e:	b3650513          	addi	a0,a0,-1226 # 80027d40 <__func__.0+0x2e0>
bool timecmp_test_16() {
    80023212:	ec06                	sd	ra,24(sp)
    80023214:	e822                	sd	s0,16(sp)
    80023216:	e426                	sd	s1,8(sp)
    TEST_START();    
    80023218:	2df020ef          	jal	80025cf6 <printf>
    8002321c:	4529                	li	a0,10
    8002321e:	0e3010ef          	jal	80024b00 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80023222:	30617073          	csrci	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80023226:	57fd                	li	a5,-1
    80023228:	17fe                	slli	a5,a5,0x3f
    8002322a:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    8002322e:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    80023232:	30a025f3          	csrr	a1,0x30a
    80023236:	0000b517          	auipc	a0,0xb
    8002323a:	14250513          	addi	a0,a0,322 # 8002e378 <__func__.0+0x6918>
    8002323e:	2b9020ef          	jal	80025cf6 <printf>
    80023242:	60a025f3          	csrr	a1,henvcfg
    80023246:	0000b517          	auipc	a0,0xb
    8002324a:	13250513          	addi	a0,a0,306 # 8002e378 <__func__.0+0x6918>
    8002324e:	2a9020ef          	jal	80025cf6 <printf>

    goto_priv(PRIV_VS);
    80023252:	4509                	li	a0,2
    80023254:	9a3dd0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80023258:	0330000f          	fence	rw,rw
    8002325c:	00026417          	auipc	s0,0x26
    80023260:	db440413          	addi	s0,s0,-588 # 80049010 <excpt>
    80023264:	4785                	li	a5,1
    80023266:	00026717          	auipc	a4,0x26
    8002326a:	de073123          	sd	zero,-542(a4) # 80049048 <excpt+0x38>
    8002326e:	00f41023          	sh	a5,0(s0)
    80023272:	0330000f          	fence	rw,rw
    CSRR(CSR_VSTIMECMP);
    80023276:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    8002327a:	00026597          	auipc	a1,0x26
    8002327e:	d975c583          	lbu	a1,-617(a1) # 80049011 <excpt+0x1>
    80023282:	0000d517          	auipc	a0,0xd
    80023286:	dee50513          	addi	a0,a0,-530 # 80030070 <__func__.0+0x8610>
    8002328a:	26d020ef          	jal	80025cf6 <printf>
    printf("cause=%d\n",excpt.cause);
    8002328e:	640c                	ld	a1,8(s0)
    80023290:	0000d517          	auipc	a0,0xd
    80023294:	df050513          	addi	a0,a0,-528 # 80030080 <__func__.0+0x8620>
    80023298:	25f020ef          	jal	80025cf6 <printf>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    8002329c:	08200593          	li	a1,130
    800232a0:	0000d617          	auipc	a2,0xd
    800232a4:	f4060613          	addi	a2,a2,-192 # 800301e0 <__func__.0+0x8780>
    800232a8:	00005517          	auipc	a0,0x5
    800232ac:	ab050513          	addi	a0,a0,-1360 # 80027d58 <__func__.0+0x2f8>
    800232b0:	247020ef          	jal	80025cf6 <printf>
    800232b4:	00026797          	auipc	a5,0x26
    800232b8:	d5d7c783          	lbu	a5,-675(a5) # 80049011 <excpt+0x1>
    800232bc:	00005597          	auipc	a1,0x5
    800232c0:	a7458593          	addi	a1,a1,-1420 # 80027d30 <__func__.0+0x2d0>
    800232c4:	cf89                	beqz	a5,800232de <timecmp_test_16+0xde>
    800232c6:	6418                	ld	a4,8(s0)
    800232c8:	4789                	li	a5,2
    800232ca:	00005597          	auipc	a1,0x5
    800232ce:	a5658593          	addi	a1,a1,-1450 # 80027d20 <__func__.0+0x2c0>
    800232d2:	00f70663          	beq	a4,a5,800232de <timecmp_test_16+0xde>
    800232d6:	00005597          	auipc	a1,0x5
    800232da:	a5a58593          	addi	a1,a1,-1446 # 80027d30 <__func__.0+0x2d0>
    800232de:	00005517          	auipc	a0,0x5
    800232e2:	a9250513          	addi	a0,a0,-1390 # 80027d70 <__func__.0+0x310>
    800232e6:	211020ef          	jal	80025cf6 <printf>
    800232ea:	00026797          	auipc	a5,0x26
    800232ee:	d277c783          	lbu	a5,-729(a5) # 80049011 <excpt+0x1>
    800232f2:	c789                	beqz	a5,800232fc <timecmp_test_16+0xfc>
    800232f4:	6418                	ld	a4,8(s0)
    800232f6:	4789                	li	a5,2
    800232f8:	00f70c63          	beq	a4,a5,80023310 <timecmp_test_16+0x110>
    800232fc:	00005517          	auipc	a0,0x5
    80023300:	a7c50513          	addi	a0,a0,-1412 # 80027d78 <__func__.0+0x318>
    80023304:	1f3020ef          	jal	80025cf6 <printf>
    80023308:	02900513          	li	a0,41
    8002330c:	7f4010ef          	jal	80024b00 <putchar>
    80023310:	4529                	li	a0,10
    80023312:	7ee010ef          	jal	80024b00 <putchar>
    80023316:	00026497          	auipc	s1,0x26
    8002331a:	cfb4c483          	lbu	s1,-773(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8002331e:	00005597          	auipc	a1,0x5
    80023322:	a1258593          	addi	a1,a1,-1518 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    80023326:	cc91                	beqz	s1,80023342 <timecmp_test_16+0x142>
    80023328:	6418                	ld	a4,8(s0)
    8002332a:	4789                	li	a5,2
    TEST_END(); 
    8002332c:	00005597          	auipc	a1,0x5
    80023330:	9f458593          	addi	a1,a1,-1548 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    80023334:	00f70763          	beq	a4,a5,80023342 <timecmp_test_16+0x142>
    80023338:	4481                	li	s1,0
    TEST_END(); 
    8002333a:	00005597          	auipc	a1,0x5
    8002333e:	9f658593          	addi	a1,a1,-1546 # 80027d30 <__func__.0+0x2d0>
    80023342:	00005517          	auipc	a0,0x5
    80023346:	a9650513          	addi	a0,a0,-1386 # 80027dd8 <__func__.0+0x378>
    8002334a:	1ad020ef          	jal	80025cf6 <printf>
    8002334e:	4511                	li	a0,4
    80023350:	8a7dd0ef          	jal	80000bf6 <goto_priv>
    80023354:	958de0ef          	jal	800014ac <reset_state>
}
    80023358:	60e2                	ld	ra,24(sp)
    8002335a:	6442                	ld	s0,16(sp)
    8002335c:	8526                	mv	a0,s1
    8002335e:	64a2                	ld	s1,8(sp)
    80023360:	6105                	addi	sp,sp,32
    80023362:	8082                	ret

0000000080023364 <timecmp_test_17>:

bool timecmp_test_17() {
    80023364:	1101                	addi	sp,sp,-32

    TEST_START();    
    80023366:	00004597          	auipc	a1,0x4
    8002336a:	65258593          	addi	a1,a1,1618 # 800279b8 <__func__.4>
    8002336e:	00005517          	auipc	a0,0x5
    80023372:	9d250513          	addi	a0,a0,-1582 # 80027d40 <__func__.0+0x2e0>
bool timecmp_test_17() {
    80023376:	ec06                	sd	ra,24(sp)
    80023378:	e822                	sd	s0,16(sp)
    8002337a:	e426                	sd	s1,8(sp)
    TEST_START();    
    8002337c:	17b020ef          	jal	80025cf6 <printf>
    80023380:	4529                	li	a0,10
    80023382:	77e010ef          	jal	80024b00 <putchar>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80023386:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    8002338a:	57fd                	li	a5,-1
    8002338c:	17fe                	slli	a5,a5,0x3f
    8002338e:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80023392:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    80023396:	30a025f3          	csrr	a1,0x30a
    8002339a:	0000b517          	auipc	a0,0xb
    8002339e:	fde50513          	addi	a0,a0,-34 # 8002e378 <__func__.0+0x6918>
    800233a2:	155020ef          	jal	80025cf6 <printf>
    800233a6:	60a025f3          	csrr	a1,henvcfg
    800233aa:	0000b517          	auipc	a0,0xb
    800233ae:	fce50513          	addi	a0,a0,-50 # 8002e378 <__func__.0+0x6918>
    800233b2:	145020ef          	jal	80025cf6 <printf>

    goto_priv(PRIV_VU);
    800233b6:	4501                	li	a0,0
    800233b8:	83fdd0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    800233bc:	0330000f          	fence	rw,rw
    800233c0:	00026417          	auipc	s0,0x26
    800233c4:	c5040413          	addi	s0,s0,-944 # 80049010 <excpt>
    800233c8:	4785                	li	a5,1
    800233ca:	00026717          	auipc	a4,0x26
    800233ce:	c6073f23          	sd	zero,-898(a4) # 80049048 <excpt+0x38>
    800233d2:	00f41023          	sh	a5,0(s0)
    800233d6:	0330000f          	fence	rw,rw
    CSRR(CSR_VSTIMECMP);
    800233da:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    800233de:	00026597          	auipc	a1,0x26
    800233e2:	c335c583          	lbu	a1,-973(a1) # 80049011 <excpt+0x1>
    800233e6:	0000d517          	auipc	a0,0xd
    800233ea:	c8a50513          	addi	a0,a0,-886 # 80030070 <__func__.0+0x8610>
    800233ee:	109020ef          	jal	80025cf6 <printf>
    printf("cause=%d\n",excpt.cause);
    800233f2:	640c                	ld	a1,8(s0)
    800233f4:	0000d517          	auipc	a0,0xd
    800233f8:	c8c50513          	addi	a0,a0,-884 # 80030080 <__func__.0+0x8620>
    800233fc:	0fb020ef          	jal	80025cf6 <printf>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80023400:	08200593          	li	a1,130
    80023404:	0000d617          	auipc	a2,0xd
    80023408:	c8c60613          	addi	a2,a2,-884 # 80030090 <__func__.0+0x8630>
    8002340c:	00005517          	auipc	a0,0x5
    80023410:	94c50513          	addi	a0,a0,-1716 # 80027d58 <__func__.0+0x2f8>
    80023414:	0e3020ef          	jal	80025cf6 <printf>
    80023418:	00026797          	auipc	a5,0x26
    8002341c:	bf97c783          	lbu	a5,-1031(a5) # 80049011 <excpt+0x1>
    80023420:	00005597          	auipc	a1,0x5
    80023424:	91058593          	addi	a1,a1,-1776 # 80027d30 <__func__.0+0x2d0>
    80023428:	cf89                	beqz	a5,80023442 <timecmp_test_17+0xde>
    8002342a:	6418                	ld	a4,8(s0)
    8002342c:	47d9                	li	a5,22
    8002342e:	00005597          	auipc	a1,0x5
    80023432:	8f258593          	addi	a1,a1,-1806 # 80027d20 <__func__.0+0x2c0>
    80023436:	00f70663          	beq	a4,a5,80023442 <timecmp_test_17+0xde>
    8002343a:	00005597          	auipc	a1,0x5
    8002343e:	8f658593          	addi	a1,a1,-1802 # 80027d30 <__func__.0+0x2d0>
    80023442:	00005517          	auipc	a0,0x5
    80023446:	92e50513          	addi	a0,a0,-1746 # 80027d70 <__func__.0+0x310>
    8002344a:	0ad020ef          	jal	80025cf6 <printf>
    8002344e:	00026797          	auipc	a5,0x26
    80023452:	bc37c783          	lbu	a5,-1085(a5) # 80049011 <excpt+0x1>
    80023456:	c789                	beqz	a5,80023460 <timecmp_test_17+0xfc>
    80023458:	6418                	ld	a4,8(s0)
    8002345a:	47d9                	li	a5,22
    8002345c:	00f70c63          	beq	a4,a5,80023474 <timecmp_test_17+0x110>
    80023460:	00005517          	auipc	a0,0x5
    80023464:	91850513          	addi	a0,a0,-1768 # 80027d78 <__func__.0+0x318>
    80023468:	08f020ef          	jal	80025cf6 <printf>
    8002346c:	02900513          	li	a0,41
    80023470:	690010ef          	jal	80024b00 <putchar>
    80023474:	4529                	li	a0,10
    80023476:	68a010ef          	jal	80024b00 <putchar>
    8002347a:	00026497          	auipc	s1,0x26
    8002347e:	b974c483          	lbu	s1,-1129(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80023482:	00005597          	auipc	a1,0x5
    80023486:	8ae58593          	addi	a1,a1,-1874 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    8002348a:	cc91                	beqz	s1,800234a6 <timecmp_test_17+0x142>
    8002348c:	6418                	ld	a4,8(s0)
    8002348e:	47d9                	li	a5,22
    TEST_END(); 
    80023490:	00005597          	auipc	a1,0x5
    80023494:	89058593          	addi	a1,a1,-1904 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80023498:	00f70763          	beq	a4,a5,800234a6 <timecmp_test_17+0x142>
    8002349c:	4481                	li	s1,0
    TEST_END(); 
    8002349e:	00005597          	auipc	a1,0x5
    800234a2:	89258593          	addi	a1,a1,-1902 # 80027d30 <__func__.0+0x2d0>
    800234a6:	00005517          	auipc	a0,0x5
    800234aa:	93250513          	addi	a0,a0,-1742 # 80027dd8 <__func__.0+0x378>
    800234ae:	049020ef          	jal	80025cf6 <printf>
    800234b2:	4511                	li	a0,4
    800234b4:	f42dd0ef          	jal	80000bf6 <goto_priv>
    800234b8:	ff5dd0ef          	jal	800014ac <reset_state>
}
    800234bc:	60e2                	ld	ra,24(sp)
    800234be:	6442                	ld	s0,16(sp)
    800234c0:	8526                	mv	a0,s1
    800234c2:	64a2                	ld	s1,8(sp)
    800234c4:	6105                	addi	sp,sp,32
    800234c6:	8082                	ret

00000000800234c8 <timecmp_test_18>:

bool timecmp_test_18() {
    800234c8:	1101                	addi	sp,sp,-32

    TEST_START();    
    800234ca:	00004597          	auipc	a1,0x4
    800234ce:	4fe58593          	addi	a1,a1,1278 # 800279c8 <__func__.3>
    800234d2:	00005517          	auipc	a0,0x5
    800234d6:	86e50513          	addi	a0,a0,-1938 # 80027d40 <__func__.0+0x2e0>
bool timecmp_test_18() {
    800234da:	ec06                	sd	ra,24(sp)
    800234dc:	e822                	sd	s0,16(sp)
    800234de:	e426                	sd	s1,8(sp)
    TEST_START();    
    800234e0:	017020ef          	jal	80025cf6 <printf>
    800234e4:	4529                	li	a0,10
    800234e6:	61a010ef          	jal	80024b00 <putchar>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800234ea:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    800234ee:	57fd                	li	a5,-1
    800234f0:	17fe                	slli	a5,a5,0x3f
    800234f2:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    800234f6:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    800234fa:	30a025f3          	csrr	a1,0x30a
    800234fe:	0000b517          	auipc	a0,0xb
    80023502:	e7a50513          	addi	a0,a0,-390 # 8002e378 <__func__.0+0x6918>
    80023506:	7f0020ef          	jal	80025cf6 <printf>
    8002350a:	60a025f3          	csrr	a1,henvcfg
    8002350e:	0000b517          	auipc	a0,0xb
    80023512:	e6a50513          	addi	a0,a0,-406 # 8002e378 <__func__.0+0x6918>
    80023516:	7e0020ef          	jal	80025cf6 <printf>

    goto_priv(PRIV_VS);
    8002351a:	4509                	li	a0,2
    8002351c:	edadd0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80023520:	0330000f          	fence	rw,rw
    80023524:	00026417          	auipc	s0,0x26
    80023528:	aec40413          	addi	s0,s0,-1300 # 80049010 <excpt>
    8002352c:	4785                	li	a5,1
    8002352e:	00026717          	auipc	a4,0x26
    80023532:	b0073d23          	sd	zero,-1254(a4) # 80049048 <excpt+0x38>
    80023536:	00f41023          	sh	a5,0(s0)
    8002353a:	0330000f          	fence	rw,rw
    CSRR(CSR_VSTIMECMP);
    8002353e:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    80023542:	00026597          	auipc	a1,0x26
    80023546:	acf5c583          	lbu	a1,-1329(a1) # 80049011 <excpt+0x1>
    8002354a:	0000d517          	auipc	a0,0xd
    8002354e:	b2650513          	addi	a0,a0,-1242 # 80030070 <__func__.0+0x8610>
    80023552:	7a4020ef          	jal	80025cf6 <printf>
    printf("cause=%d\n",excpt.cause);
    80023556:	640c                	ld	a1,8(s0)
    80023558:	0000d517          	auipc	a0,0xd
    8002355c:	b2850513          	addi	a0,a0,-1240 # 80030080 <__func__.0+0x8620>
    80023560:	796020ef          	jal	80025cf6 <printf>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80023564:	08200593          	li	a1,130
    80023568:	0000d617          	auipc	a2,0xd
    8002356c:	b9860613          	addi	a2,a2,-1128 # 80030100 <__func__.0+0x86a0>
    80023570:	00004517          	auipc	a0,0x4
    80023574:	7e850513          	addi	a0,a0,2024 # 80027d58 <__func__.0+0x2f8>
    80023578:	77e020ef          	jal	80025cf6 <printf>
    8002357c:	00026797          	auipc	a5,0x26
    80023580:	a957c783          	lbu	a5,-1387(a5) # 80049011 <excpt+0x1>
    80023584:	00004597          	auipc	a1,0x4
    80023588:	7ac58593          	addi	a1,a1,1964 # 80027d30 <__func__.0+0x2d0>
    8002358c:	cf89                	beqz	a5,800235a6 <timecmp_test_18+0xde>
    8002358e:	6418                	ld	a4,8(s0)
    80023590:	47d9                	li	a5,22
    80023592:	00004597          	auipc	a1,0x4
    80023596:	78e58593          	addi	a1,a1,1934 # 80027d20 <__func__.0+0x2c0>
    8002359a:	00f70663          	beq	a4,a5,800235a6 <timecmp_test_18+0xde>
    8002359e:	00004597          	auipc	a1,0x4
    800235a2:	79258593          	addi	a1,a1,1938 # 80027d30 <__func__.0+0x2d0>
    800235a6:	00004517          	auipc	a0,0x4
    800235aa:	7ca50513          	addi	a0,a0,1994 # 80027d70 <__func__.0+0x310>
    800235ae:	748020ef          	jal	80025cf6 <printf>
    800235b2:	00026797          	auipc	a5,0x26
    800235b6:	a5f7c783          	lbu	a5,-1441(a5) # 80049011 <excpt+0x1>
    800235ba:	c789                	beqz	a5,800235c4 <timecmp_test_18+0xfc>
    800235bc:	6418                	ld	a4,8(s0)
    800235be:	47d9                	li	a5,22
    800235c0:	00f70c63          	beq	a4,a5,800235d8 <timecmp_test_18+0x110>
    800235c4:	00004517          	auipc	a0,0x4
    800235c8:	7b450513          	addi	a0,a0,1972 # 80027d78 <__func__.0+0x318>
    800235cc:	72a020ef          	jal	80025cf6 <printf>
    800235d0:	02900513          	li	a0,41
    800235d4:	52c010ef          	jal	80024b00 <putchar>
    800235d8:	4529                	li	a0,10
    800235da:	526010ef          	jal	80024b00 <putchar>
    800235de:	00026497          	auipc	s1,0x26
    800235e2:	a334c483          	lbu	s1,-1485(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    800235e6:	00004597          	auipc	a1,0x4
    800235ea:	74a58593          	addi	a1,a1,1866 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    800235ee:	cc91                	beqz	s1,8002360a <timecmp_test_18+0x142>
    800235f0:	6418                	ld	a4,8(s0)
    800235f2:	47d9                	li	a5,22
    TEST_END(); 
    800235f4:	00004597          	auipc	a1,0x4
    800235f8:	72c58593          	addi	a1,a1,1836 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    800235fc:	00f70763          	beq	a4,a5,8002360a <timecmp_test_18+0x142>
    80023600:	4481                	li	s1,0
    TEST_END(); 
    80023602:	00004597          	auipc	a1,0x4
    80023606:	72e58593          	addi	a1,a1,1838 # 80027d30 <__func__.0+0x2d0>
    8002360a:	00004517          	auipc	a0,0x4
    8002360e:	7ce50513          	addi	a0,a0,1998 # 80027dd8 <__func__.0+0x378>
    80023612:	6e4020ef          	jal	80025cf6 <printf>
    80023616:	4511                	li	a0,4
    80023618:	ddedd0ef          	jal	80000bf6 <goto_priv>
    8002361c:	e91dd0ef          	jal	800014ac <reset_state>
}
    80023620:	60e2                	ld	ra,24(sp)
    80023622:	6442                	ld	s0,16(sp)
    80023624:	8526                	mv	a0,s1
    80023626:	64a2                	ld	s1,8(sp)
    80023628:	6105                	addi	sp,sp,32
    8002362a:	8082                	ret

000000008002362c <timecmp_test_19>:


bool timecmp_test_19() {
    8002362c:	1101                	addi	sp,sp,-32

    TEST_START();    
    8002362e:	00004597          	auipc	a1,0x4
    80023632:	3aa58593          	addi	a1,a1,938 # 800279d8 <__func__.2>
    80023636:	00004517          	auipc	a0,0x4
    8002363a:	70a50513          	addi	a0,a0,1802 # 80027d40 <__func__.0+0x2e0>
bool timecmp_test_19() {
    8002363e:	ec06                	sd	ra,24(sp)
    80023640:	e822                	sd	s0,16(sp)
    80023642:	e426                	sd	s1,8(sp)
    TEST_START();    
    80023644:	6b2020ef          	jal	80025cf6 <printf>
    80023648:	4529                	li	a0,10
    8002364a:	4b6010ef          	jal	80024b00 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8002364e:	30617073          	csrci	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80023652:	57fd                	li	a5,-1
    80023654:	17fe                	slli	a5,a5,0x3f
    80023656:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    8002365a:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    8002365e:	30a025f3          	csrr	a1,0x30a
    80023662:	0000b517          	auipc	a0,0xb
    80023666:	d1650513          	addi	a0,a0,-746 # 8002e378 <__func__.0+0x6918>
    8002366a:	68c020ef          	jal	80025cf6 <printf>
    8002366e:	60a025f3          	csrr	a1,henvcfg
    80023672:	0000b517          	auipc	a0,0xb
    80023676:	d0650513          	addi	a0,a0,-762 # 8002e378 <__func__.0+0x6918>
    8002367a:	67c020ef          	jal	80025cf6 <printf>

    goto_priv(PRIV_VU);
    8002367e:	4501                	li	a0,0
    80023680:	d76dd0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80023684:	0330000f          	fence	rw,rw
    80023688:	00026417          	auipc	s0,0x26
    8002368c:	98840413          	addi	s0,s0,-1656 # 80049010 <excpt>
    80023690:	4785                	li	a5,1
    80023692:	00026717          	auipc	a4,0x26
    80023696:	9a073b23          	sd	zero,-1610(a4) # 80049048 <excpt+0x38>
    8002369a:	00f41023          	sh	a5,0(s0)
    8002369e:	0330000f          	fence	rw,rw
    CSRR(CSR_VSTIMECMP);
    800236a2:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    800236a6:	00026597          	auipc	a1,0x26
    800236aa:	96b5c583          	lbu	a1,-1685(a1) # 80049011 <excpt+0x1>
    800236ae:	0000d517          	auipc	a0,0xd
    800236b2:	9c250513          	addi	a0,a0,-1598 # 80030070 <__func__.0+0x8610>
    800236b6:	640020ef          	jal	80025cf6 <printf>
    printf("cause=%d\n",excpt.cause);
    800236ba:	640c                	ld	a1,8(s0)
    800236bc:	0000d517          	auipc	a0,0xd
    800236c0:	9c450513          	addi	a0,a0,-1596 # 80030080 <__func__.0+0x8620>
    800236c4:	632020ef          	jal	80025cf6 <printf>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    800236c8:	08200593          	li	a1,130
    800236cc:	0000d617          	auipc	a2,0xd
    800236d0:	aa460613          	addi	a2,a2,-1372 # 80030170 <__func__.0+0x8710>
    800236d4:	00004517          	auipc	a0,0x4
    800236d8:	68450513          	addi	a0,a0,1668 # 80027d58 <__func__.0+0x2f8>
    800236dc:	61a020ef          	jal	80025cf6 <printf>
    800236e0:	00026797          	auipc	a5,0x26
    800236e4:	9317c783          	lbu	a5,-1743(a5) # 80049011 <excpt+0x1>
    800236e8:	00004597          	auipc	a1,0x4
    800236ec:	64858593          	addi	a1,a1,1608 # 80027d30 <__func__.0+0x2d0>
    800236f0:	cf89                	beqz	a5,8002370a <timecmp_test_19+0xde>
    800236f2:	6418                	ld	a4,8(s0)
    800236f4:	4789                	li	a5,2
    800236f6:	00004597          	auipc	a1,0x4
    800236fa:	62a58593          	addi	a1,a1,1578 # 80027d20 <__func__.0+0x2c0>
    800236fe:	00f70663          	beq	a4,a5,8002370a <timecmp_test_19+0xde>
    80023702:	00004597          	auipc	a1,0x4
    80023706:	62e58593          	addi	a1,a1,1582 # 80027d30 <__func__.0+0x2d0>
    8002370a:	00004517          	auipc	a0,0x4
    8002370e:	66650513          	addi	a0,a0,1638 # 80027d70 <__func__.0+0x310>
    80023712:	5e4020ef          	jal	80025cf6 <printf>
    80023716:	00026797          	auipc	a5,0x26
    8002371a:	8fb7c783          	lbu	a5,-1797(a5) # 80049011 <excpt+0x1>
    8002371e:	c789                	beqz	a5,80023728 <timecmp_test_19+0xfc>
    80023720:	6418                	ld	a4,8(s0)
    80023722:	4789                	li	a5,2
    80023724:	00f70c63          	beq	a4,a5,8002373c <timecmp_test_19+0x110>
    80023728:	00004517          	auipc	a0,0x4
    8002372c:	65050513          	addi	a0,a0,1616 # 80027d78 <__func__.0+0x318>
    80023730:	5c6020ef          	jal	80025cf6 <printf>
    80023734:	02900513          	li	a0,41
    80023738:	3c8010ef          	jal	80024b00 <putchar>
    8002373c:	4529                	li	a0,10
    8002373e:	3c2010ef          	jal	80024b00 <putchar>
    80023742:	00026497          	auipc	s1,0x26
    80023746:	8cf4c483          	lbu	s1,-1841(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8002374a:	00004597          	auipc	a1,0x4
    8002374e:	5e658593          	addi	a1,a1,1510 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    80023752:	cc91                	beqz	s1,8002376e <timecmp_test_19+0x142>
    80023754:	6418                	ld	a4,8(s0)
    80023756:	4789                	li	a5,2
    TEST_END(); 
    80023758:	00004597          	auipc	a1,0x4
    8002375c:	5c858593          	addi	a1,a1,1480 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    80023760:	00f70763          	beq	a4,a5,8002376e <timecmp_test_19+0x142>
    80023764:	4481                	li	s1,0
    TEST_END(); 
    80023766:	00004597          	auipc	a1,0x4
    8002376a:	5ca58593          	addi	a1,a1,1482 # 80027d30 <__func__.0+0x2d0>
    8002376e:	00004517          	auipc	a0,0x4
    80023772:	66a50513          	addi	a0,a0,1642 # 80027dd8 <__func__.0+0x378>
    80023776:	580020ef          	jal	80025cf6 <printf>
    8002377a:	4511                	li	a0,4
    8002377c:	c7add0ef          	jal	80000bf6 <goto_priv>
    80023780:	d2ddd0ef          	jal	800014ac <reset_state>
}
    80023784:	60e2                	ld	ra,24(sp)
    80023786:	6442                	ld	s0,16(sp)
    80023788:	8526                	mv	a0,s1
    8002378a:	64a2                	ld	s1,8(sp)
    8002378c:	6105                	addi	sp,sp,32
    8002378e:	8082                	ret

0000000080023790 <timecmp_test_20>:

bool timecmp_test_20() {
    80023790:	1101                	addi	sp,sp,-32

    TEST_START();    
    80023792:	00004597          	auipc	a1,0x4
    80023796:	25658593          	addi	a1,a1,598 # 800279e8 <__func__.1>
    8002379a:	00004517          	auipc	a0,0x4
    8002379e:	5a650513          	addi	a0,a0,1446 # 80027d40 <__func__.0+0x2e0>
bool timecmp_test_20() {
    800237a2:	ec06                	sd	ra,24(sp)
    800237a4:	e822                	sd	s0,16(sp)
    800237a6:	e426                	sd	s1,8(sp)
    TEST_START();    
    800237a8:	54e020ef          	jal	80025cf6 <printf>
    800237ac:	4529                	li	a0,10
    800237ae:	352010ef          	jal	80024b00 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800237b2:	30617073          	csrci	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    800237b6:	57fd                	li	a5,-1
    800237b8:	17fe                	slli	a5,a5,0x3f
    800237ba:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    800237be:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    800237c2:	30a025f3          	csrr	a1,0x30a
    800237c6:	0000b517          	auipc	a0,0xb
    800237ca:	bb250513          	addi	a0,a0,-1102 # 8002e378 <__func__.0+0x6918>
    800237ce:	528020ef          	jal	80025cf6 <printf>
    800237d2:	60a025f3          	csrr	a1,henvcfg
    800237d6:	0000b517          	auipc	a0,0xb
    800237da:	ba250513          	addi	a0,a0,-1118 # 8002e378 <__func__.0+0x6918>
    800237de:	518020ef          	jal	80025cf6 <printf>

    goto_priv(PRIV_VS);
    800237e2:	4509                	li	a0,2
    800237e4:	c12dd0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    800237e8:	0330000f          	fence	rw,rw
    800237ec:	00026417          	auipc	s0,0x26
    800237f0:	82440413          	addi	s0,s0,-2012 # 80049010 <excpt>
    800237f4:	4785                	li	a5,1
    800237f6:	00026717          	auipc	a4,0x26
    800237fa:	84073923          	sd	zero,-1966(a4) # 80049048 <excpt+0x38>
    800237fe:	00f41023          	sh	a5,0(s0)
    80023802:	0330000f          	fence	rw,rw
    CSRR(CSR_VSTIMECMP);
    80023806:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    8002380a:	00026597          	auipc	a1,0x26
    8002380e:	8075c583          	lbu	a1,-2041(a1) # 80049011 <excpt+0x1>
    80023812:	0000d517          	auipc	a0,0xd
    80023816:	85e50513          	addi	a0,a0,-1954 # 80030070 <__func__.0+0x8610>
    8002381a:	4dc020ef          	jal	80025cf6 <printf>
    printf("cause=%d\n",excpt.cause);
    8002381e:	640c                	ld	a1,8(s0)
    80023820:	0000d517          	auipc	a0,0xd
    80023824:	86050513          	addi	a0,a0,-1952 # 80030080 <__func__.0+0x8620>
    80023828:	4ce020ef          	jal	80025cf6 <printf>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    8002382c:	08200593          	li	a1,130
    80023830:	0000d617          	auipc	a2,0xd
    80023834:	9b060613          	addi	a2,a2,-1616 # 800301e0 <__func__.0+0x8780>
    80023838:	00004517          	auipc	a0,0x4
    8002383c:	52050513          	addi	a0,a0,1312 # 80027d58 <__func__.0+0x2f8>
    80023840:	4b6020ef          	jal	80025cf6 <printf>
    80023844:	00025797          	auipc	a5,0x25
    80023848:	7cd7c783          	lbu	a5,1997(a5) # 80049011 <excpt+0x1>
    8002384c:	00004597          	auipc	a1,0x4
    80023850:	4e458593          	addi	a1,a1,1252 # 80027d30 <__func__.0+0x2d0>
    80023854:	cf89                	beqz	a5,8002386e <timecmp_test_20+0xde>
    80023856:	6418                	ld	a4,8(s0)
    80023858:	4789                	li	a5,2
    8002385a:	00004597          	auipc	a1,0x4
    8002385e:	4c658593          	addi	a1,a1,1222 # 80027d20 <__func__.0+0x2c0>
    80023862:	00f70663          	beq	a4,a5,8002386e <timecmp_test_20+0xde>
    80023866:	00004597          	auipc	a1,0x4
    8002386a:	4ca58593          	addi	a1,a1,1226 # 80027d30 <__func__.0+0x2d0>
    8002386e:	00004517          	auipc	a0,0x4
    80023872:	50250513          	addi	a0,a0,1282 # 80027d70 <__func__.0+0x310>
    80023876:	480020ef          	jal	80025cf6 <printf>
    8002387a:	00025797          	auipc	a5,0x25
    8002387e:	7977c783          	lbu	a5,1943(a5) # 80049011 <excpt+0x1>
    80023882:	c789                	beqz	a5,8002388c <timecmp_test_20+0xfc>
    80023884:	6418                	ld	a4,8(s0)
    80023886:	4789                	li	a5,2
    80023888:	00f70c63          	beq	a4,a5,800238a0 <timecmp_test_20+0x110>
    8002388c:	00004517          	auipc	a0,0x4
    80023890:	4ec50513          	addi	a0,a0,1260 # 80027d78 <__func__.0+0x318>
    80023894:	462020ef          	jal	80025cf6 <printf>
    80023898:	02900513          	li	a0,41
    8002389c:	264010ef          	jal	80024b00 <putchar>
    800238a0:	4529                	li	a0,10
    800238a2:	25e010ef          	jal	80024b00 <putchar>
    800238a6:	00025497          	auipc	s1,0x25
    800238aa:	76b4c483          	lbu	s1,1899(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    800238ae:	00004597          	auipc	a1,0x4
    800238b2:	48258593          	addi	a1,a1,1154 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    800238b6:	cc91                	beqz	s1,800238d2 <timecmp_test_20+0x142>
    800238b8:	6418                	ld	a4,8(s0)
    800238ba:	4789                	li	a5,2
    TEST_END(); 
    800238bc:	00004597          	auipc	a1,0x4
    800238c0:	46458593          	addi	a1,a1,1124 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    800238c4:	00f70763          	beq	a4,a5,800238d2 <timecmp_test_20+0x142>
    800238c8:	4481                	li	s1,0
    TEST_END(); 
    800238ca:	00004597          	auipc	a1,0x4
    800238ce:	46658593          	addi	a1,a1,1126 # 80027d30 <__func__.0+0x2d0>
    800238d2:	00004517          	auipc	a0,0x4
    800238d6:	50650513          	addi	a0,a0,1286 # 80027dd8 <__func__.0+0x378>
    800238da:	41c020ef          	jal	80025cf6 <printf>
    800238de:	4511                	li	a0,4
    800238e0:	b16dd0ef          	jal	80000bf6 <goto_priv>
    800238e4:	bc9dd0ef          	jal	800014ac <reset_state>
}
    800238e8:	60e2                	ld	ra,24(sp)
    800238ea:	6442                	ld	s0,16(sp)
    800238ec:	8526                	mv	a0,s1
    800238ee:	64a2                	ld	s1,8(sp)
    800238f0:	6105                	addi	sp,sp,32
    800238f2:	8082                	ret

00000000800238f4 <timecmp_test_21>:

bool timecmp_test_21() {
    800238f4:	1101                	addi	sp,sp,-32

    TEST_START();    
    800238f6:	00004597          	auipc	a1,0x4
    800238fa:	10258593          	addi	a1,a1,258 # 800279f8 <__func__.0>
    800238fe:	00004517          	auipc	a0,0x4
    80023902:	44250513          	addi	a0,a0,1090 # 80027d40 <__func__.0+0x2e0>
bool timecmp_test_21() {
    80023906:	ec06                	sd	ra,24(sp)
    80023908:	e822                	sd	s0,16(sp)
    8002390a:	e426                	sd	s1,8(sp)
    TEST_START();    
    8002390c:	3ea020ef          	jal	80025cf6 <printf>
    80023910:	4529                	li	a0,10
    80023912:	1ee010ef          	jal	80024b00 <putchar>
    CSRS(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    80023916:	57fd                	li	a5,-1
    80023918:	17fe                	slli	a5,a5,0x3f
    8002391a:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8002391e:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_VS);
    80023922:	4509                	li	a0,2
    80023924:	ad2dd0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80023928:	0330000f          	fence	rw,rw
    8002392c:	00025417          	auipc	s0,0x25
    80023930:	6e440413          	addi	s0,s0,1764 # 80049010 <excpt>
    80023934:	4785                	li	a5,1
    80023936:	00025717          	auipc	a4,0x25
    8002393a:	70073923          	sd	zero,1810(a4) # 80049048 <excpt+0x38>
    8002393e:	00f41023          	sh	a5,0(s0)
    80023942:	0330000f          	fence	rw,rw
    CSRR(CSR_VSTIMECMP);
    80023946:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    8002394a:	08200593          	li	a1,130
    8002394e:	0000d617          	auipc	a2,0xd
    80023952:	90260613          	addi	a2,a2,-1790 # 80030250 <__func__.0+0x87f0>
    80023956:	00004517          	auipc	a0,0x4
    8002395a:	40250513          	addi	a0,a0,1026 # 80027d58 <__func__.0+0x2f8>
    8002395e:	398020ef          	jal	80025cf6 <printf>
    80023962:	00025797          	auipc	a5,0x25
    80023966:	6af7c783          	lbu	a5,1711(a5) # 80049011 <excpt+0x1>
    8002396a:	00004597          	auipc	a1,0x4
    8002396e:	3c658593          	addi	a1,a1,966 # 80027d30 <__func__.0+0x2d0>
    80023972:	cf89                	beqz	a5,8002398c <timecmp_test_21+0x98>
    80023974:	6418                	ld	a4,8(s0)
    80023976:	4789                	li	a5,2
    80023978:	00004597          	auipc	a1,0x4
    8002397c:	3a858593          	addi	a1,a1,936 # 80027d20 <__func__.0+0x2c0>
    80023980:	00f70663          	beq	a4,a5,8002398c <timecmp_test_21+0x98>
    80023984:	00004597          	auipc	a1,0x4
    80023988:	3ac58593          	addi	a1,a1,940 # 80027d30 <__func__.0+0x2d0>
    8002398c:	00004517          	auipc	a0,0x4
    80023990:	3e450513          	addi	a0,a0,996 # 80027d70 <__func__.0+0x310>
    80023994:	362020ef          	jal	80025cf6 <printf>
    80023998:	00025797          	auipc	a5,0x25
    8002399c:	6797c783          	lbu	a5,1657(a5) # 80049011 <excpt+0x1>
    800239a0:	c789                	beqz	a5,800239aa <timecmp_test_21+0xb6>
    800239a2:	6418                	ld	a4,8(s0)
    800239a4:	4789                	li	a5,2
    800239a6:	00f70c63          	beq	a4,a5,800239be <timecmp_test_21+0xca>
    800239aa:	00004517          	auipc	a0,0x4
    800239ae:	3ce50513          	addi	a0,a0,974 # 80027d78 <__func__.0+0x318>
    800239b2:	344020ef          	jal	80025cf6 <printf>
    800239b6:	02900513          	li	a0,41
    800239ba:	146010ef          	jal	80024b00 <putchar>
    800239be:	4529                	li	a0,10
    800239c0:	140010ef          	jal	80024b00 <putchar>
    800239c4:	00025797          	auipc	a5,0x25
    800239c8:	64d7c783          	lbu	a5,1613(a5) # 80049011 <excpt+0x1>
    800239cc:	4481                	li	s1,0
    800239ce:	c789                	beqz	a5,800239d8 <timecmp_test_21+0xe4>
    800239d0:	6404                	ld	s1,8(s0)
    800239d2:	14f9                	addi	s1,s1,-2
    800239d4:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    800239d8:	4501                	li	a0,0
    800239da:	a1cdd0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    800239de:	0330000f          	fence	rw,rw
    800239e2:	4785                	li	a5,1
    800239e4:	00025717          	auipc	a4,0x25
    800239e8:	66073223          	sd	zero,1636(a4) # 80049048 <excpt+0x38>
    800239ec:	00f41023          	sh	a5,0(s0)
    800239f0:	0330000f          	fence	rw,rw
    CSRR(CSR_VSTIMECMP);
    800239f4:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    800239f8:	08200593          	li	a1,130
    800239fc:	0000d617          	auipc	a2,0xd
    80023a00:	8bc60613          	addi	a2,a2,-1860 # 800302b8 <__func__.0+0x8858>
    80023a04:	00004517          	auipc	a0,0x4
    80023a08:	35450513          	addi	a0,a0,852 # 80027d58 <__func__.0+0x2f8>
    80023a0c:	2ea020ef          	jal	80025cf6 <printf>
    80023a10:	00025797          	auipc	a5,0x25
    80023a14:	6017c783          	lbu	a5,1537(a5) # 80049011 <excpt+0x1>
    80023a18:	00004597          	auipc	a1,0x4
    80023a1c:	31858593          	addi	a1,a1,792 # 80027d30 <__func__.0+0x2d0>
    80023a20:	cf89                	beqz	a5,80023a3a <timecmp_test_21+0x146>
    80023a22:	6418                	ld	a4,8(s0)
    80023a24:	4789                	li	a5,2
    80023a26:	00004597          	auipc	a1,0x4
    80023a2a:	2fa58593          	addi	a1,a1,762 # 80027d20 <__func__.0+0x2c0>
    80023a2e:	00f70663          	beq	a4,a5,80023a3a <timecmp_test_21+0x146>
    80023a32:	00004597          	auipc	a1,0x4
    80023a36:	2fe58593          	addi	a1,a1,766 # 80027d30 <__func__.0+0x2d0>
    80023a3a:	00004517          	auipc	a0,0x4
    80023a3e:	33650513          	addi	a0,a0,822 # 80027d70 <__func__.0+0x310>
    80023a42:	2b4020ef          	jal	80025cf6 <printf>
    80023a46:	00025797          	auipc	a5,0x25
    80023a4a:	5cb7c783          	lbu	a5,1483(a5) # 80049011 <excpt+0x1>
    80023a4e:	c789                	beqz	a5,80023a58 <timecmp_test_21+0x164>
    80023a50:	6418                	ld	a4,8(s0)
    80023a52:	4789                	li	a5,2
    80023a54:	00f70c63          	beq	a4,a5,80023a6c <timecmp_test_21+0x178>
    80023a58:	00004517          	auipc	a0,0x4
    80023a5c:	32050513          	addi	a0,a0,800 # 80027d78 <__func__.0+0x318>
    80023a60:	296020ef          	jal	80025cf6 <printf>
    80023a64:	02900513          	li	a0,41
    80023a68:	098010ef          	jal	80024b00 <putchar>
    80023a6c:	4529                	li	a0,10
    80023a6e:	092010ef          	jal	80024b00 <putchar>
    80023a72:	c095                	beqz	s1,80023a96 <timecmp_test_21+0x1a2>
    80023a74:	00025497          	auipc	s1,0x25
    80023a78:	59d4c483          	lbu	s1,1437(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80023a7c:	00004597          	auipc	a1,0x4
    80023a80:	2b458593          	addi	a1,a1,692 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    80023a84:	cc91                	beqz	s1,80023aa0 <timecmp_test_21+0x1ac>
    80023a86:	6418                	ld	a4,8(s0)
    80023a88:	4789                	li	a5,2
    TEST_END(); 
    80023a8a:	00004597          	auipc	a1,0x4
    80023a8e:	29658593          	addi	a1,a1,662 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    80023a92:	00f70763          	beq	a4,a5,80023aa0 <timecmp_test_21+0x1ac>
    80023a96:	4481                	li	s1,0
    TEST_END(); 
    80023a98:	00004597          	auipc	a1,0x4
    80023a9c:	29858593          	addi	a1,a1,664 # 80027d30 <__func__.0+0x2d0>
    80023aa0:	00004517          	auipc	a0,0x4
    80023aa4:	33850513          	addi	a0,a0,824 # 80027dd8 <__func__.0+0x378>
    80023aa8:	24e020ef          	jal	80025cf6 <printf>
    80023aac:	4511                	li	a0,4
    80023aae:	948dd0ef          	jal	80000bf6 <goto_priv>
    80023ab2:	9fbdd0ef          	jal	800014ac <reset_state>
    80023ab6:	60e2                	ld	ra,24(sp)
    80023ab8:	6442                	ld	s0,16(sp)
    80023aba:	8526                	mv	a0,s1
    80023abc:	64a2                	ld	s1,8(sp)
    80023abe:	6105                	addi	sp,sp,32
    80023ac0:	8082                	ret

0000000080023ac2 <mix_instruction_1>:
#include <rvh_test.h>
#include <csrs.h> 
#include <page_tables.h>

bool mix_instruction_1(){
    80023ac2:	7179                	addi	sp,sp,-48

    TEST_START();
    80023ac4:	00004597          	auipc	a1,0x4
    80023ac8:	f4458593          	addi	a1,a1,-188 # 80027a08 <__func__.2>
    80023acc:	00004517          	auipc	a0,0x4
    80023ad0:	27450513          	addi	a0,a0,628 # 80027d40 <__func__.0+0x2e0>
bool mix_instruction_1(){
    80023ad4:	f406                	sd	ra,40(sp)
    80023ad6:	f022                	sd	s0,32(sp)
    80023ad8:	ec26                	sd	s1,24(sp)
    80023ada:	e84a                	sd	s2,16(sp)
    80023adc:	e44e                	sd	s3,8(sp)
    TEST_START();
    80023ade:	218020ef          	jal	80025cf6 <printf>
    80023ae2:	4529                	li	a0,10
    80023ae4:	01c010ef          	jal	80024b00 <putchar>

    goto_priv(PRIV_M);
    80023ae8:	4511                	li	a0,4
    80023aea:	90cdd0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80023aee:	57fd                	li	a5,-1
    80023af0:	17fe                	slli	a5,a5,0x3f
    80023af2:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80023af6:	60a7b073          	csrc	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80023afa:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    80023afe:	60616073          	csrsi	hcounteren,2

    goto_priv(PRIV_VS);
    80023b02:	4509                	li	a0,2
    80023b04:	8f2dd0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80023b08:	0330000f          	fence	rw,rw
    80023b0c:	00025497          	auipc	s1,0x25
    80023b10:	50448493          	addi	s1,s1,1284 # 80049010 <excpt>
    80023b14:	4785                	li	a5,1
    80023b16:	00025717          	auipc	a4,0x25
    80023b1a:	52073923          	sd	zero,1330(a4) # 80049048 <excpt+0x38>
    80023b1e:	00f49023          	sh	a5,0(s1)
    80023b22:	0330000f          	fence	rw,rw
    CSRR(CSR_STIMECMP);
    80023b26:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 and henvcfg.stce=0",
    80023b2a:	08200593          	li	a1,130
    80023b2e:	0000c617          	auipc	a2,0xc
    80023b32:	7f260613          	addi	a2,a2,2034 # 80030320 <__func__.0+0x88c0>
    80023b36:	00004517          	auipc	a0,0x4
    80023b3a:	22250513          	addi	a0,a0,546 # 80027d58 <__func__.0+0x2f8>
    80023b3e:	1b8020ef          	jal	80025cf6 <printf>
    80023b42:	00025797          	auipc	a5,0x25
    80023b46:	4cf7c783          	lbu	a5,1231(a5) # 80049011 <excpt+0x1>
    80023b4a:	00004597          	auipc	a1,0x4
    80023b4e:	1e658593          	addi	a1,a1,486 # 80027d30 <__func__.0+0x2d0>
    80023b52:	cf89                	beqz	a5,80023b6c <mix_instruction_1+0xaa>
    80023b54:	6498                	ld	a4,8(s1)
    80023b56:	47d9                	li	a5,22
    80023b58:	00004597          	auipc	a1,0x4
    80023b5c:	1c858593          	addi	a1,a1,456 # 80027d20 <__func__.0+0x2c0>
    80023b60:	00f70663          	beq	a4,a5,80023b6c <mix_instruction_1+0xaa>
    80023b64:	00004597          	auipc	a1,0x4
    80023b68:	1cc58593          	addi	a1,a1,460 # 80027d30 <__func__.0+0x2d0>
    80023b6c:	00004517          	auipc	a0,0x4
    80023b70:	20450513          	addi	a0,a0,516 # 80027d70 <__func__.0+0x310>
    80023b74:	182020ef          	jal	80025cf6 <printf>
    80023b78:	00025797          	auipc	a5,0x25
    80023b7c:	4997c783          	lbu	a5,1177(a5) # 80049011 <excpt+0x1>
    80023b80:	c789                	beqz	a5,80023b8a <mix_instruction_1+0xc8>
    80023b82:	6498                	ld	a4,8(s1)
    80023b84:	47d9                	li	a5,22
    80023b86:	00f70c63          	beq	a4,a5,80023b9e <mix_instruction_1+0xdc>
    80023b8a:	00004517          	auipc	a0,0x4
    80023b8e:	1ee50513          	addi	a0,a0,494 # 80027d78 <__func__.0+0x318>
    80023b92:	164020ef          	jal	80025cf6 <printf>
    80023b96:	02900513          	li	a0,41
    80023b9a:	767000ef          	jal	80024b00 <putchar>
    80023b9e:	4529                	li	a0,10
    80023ba0:	761000ef          	jal	80024b00 <putchar>
    80023ba4:	00025797          	auipc	a5,0x25
    80023ba8:	46d7c783          	lbu	a5,1133(a5) # 80049011 <excpt+0x1>
    80023bac:	4401                	li	s0,0
    80023bae:	c789                	beqz	a5,80023bb8 <mix_instruction_1+0xf6>
    80023bb0:	6480                	ld	s0,8(s1)
    80023bb2:	1429                	addi	s0,s0,-22
    80023bb4:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

//----------------------------------------------------------------------
    goto_priv(PRIV_M);
    80023bb8:	4511                	li	a0,4
    80023bba:	83cdd0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80023bbe:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_HS);
    80023bc2:	450d                	li	a0,3
    80023bc4:	832dd0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80023bc8:	0330000f          	fence	rw,rw
    80023bcc:	4785                	li	a5,1
    80023bce:	00025717          	auipc	a4,0x25
    80023bd2:	46073d23          	sd	zero,1146(a4) # 80049048 <excpt+0x38>
    80023bd6:	00f49023          	sh	a5,0(s1)
    80023bda:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    80023bde:	c01027f3          	rdtime	a5

    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    80023be2:	08200593          	li	a1,130
    80023be6:	0000b617          	auipc	a2,0xb
    80023bea:	35260613          	addi	a2,a2,850 # 8002ef38 <__func__.0+0x74d8>
    80023bee:	00004517          	auipc	a0,0x4
    80023bf2:	16a50513          	addi	a0,a0,362 # 80027d58 <__func__.0+0x2f8>
    80023bf6:	100020ef          	jal	80025cf6 <printf>
    80023bfa:	00025797          	auipc	a5,0x25
    80023bfe:	4177c783          	lbu	a5,1047(a5) # 80049011 <excpt+0x1>
    80023c02:	00004597          	auipc	a1,0x4
    80023c06:	12e58593          	addi	a1,a1,302 # 80027d30 <__func__.0+0x2d0>
    80023c0a:	cf89                	beqz	a5,80023c24 <mix_instruction_1+0x162>
    80023c0c:	6498                	ld	a4,8(s1)
    80023c0e:	4789                	li	a5,2
    80023c10:	00004597          	auipc	a1,0x4
    80023c14:	11058593          	addi	a1,a1,272 # 80027d20 <__func__.0+0x2c0>
    80023c18:	00f70663          	beq	a4,a5,80023c24 <mix_instruction_1+0x162>
    80023c1c:	00004597          	auipc	a1,0x4
    80023c20:	11458593          	addi	a1,a1,276 # 80027d30 <__func__.0+0x2d0>
    80023c24:	00004517          	auipc	a0,0x4
    80023c28:	14c50513          	addi	a0,a0,332 # 80027d70 <__func__.0+0x310>
    80023c2c:	0ca020ef          	jal	80025cf6 <printf>
    80023c30:	00025797          	auipc	a5,0x25
    80023c34:	3e17c783          	lbu	a5,993(a5) # 80049011 <excpt+0x1>
    80023c38:	c789                	beqz	a5,80023c42 <mix_instruction_1+0x180>
    80023c3a:	6498                	ld	a4,8(s1)
    80023c3c:	4789                	li	a5,2
    80023c3e:	00f70c63          	beq	a4,a5,80023c56 <mix_instruction_1+0x194>
    80023c42:	00004517          	auipc	a0,0x4
    80023c46:	13650513          	addi	a0,a0,310 # 80027d78 <__func__.0+0x318>
    80023c4a:	0ac020ef          	jal	80025cf6 <printf>
    80023c4e:	02900513          	li	a0,41
    80023c52:	6af000ef          	jal	80024b00 <putchar>
    80023c56:	4529                	li	a0,10
    80023c58:	6a9000ef          	jal	80024b00 <putchar>
    80023c5c:	c801                	beqz	s0,80023c6c <mix_instruction_1+0x1aa>
    80023c5e:	00025797          	auipc	a5,0x25
    80023c62:	3b37c783          	lbu	a5,947(a5) # 80049011 <excpt+0x1>
    80023c66:	4401                	li	s0,0
    80023c68:	0c0792e3          	bnez	a5,8002452c <mix_instruction_1+0xa6a>
    //     excpt.cause == CAUSE_ILI
    // ); 
    
//----------------------------------------------------------------------

    goto_priv(PRIV_M);
    80023c6c:	4511                	li	a0,4
    80023c6e:	f89dc0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTSR);
    80023c72:	004007b7          	lui	a5,0x400
    80023c76:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    80023c7a:	002007b7          	lui	a5,0x200
    80023c7e:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_VU);
    80023c82:	4501                	li	a0,0
    80023c84:	f73dc0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023c88:	0330000f          	fence	rw,rw
    80023c8c:	4785                	li	a5,1
    80023c8e:	00025717          	auipc	a4,0x25
    80023c92:	3a073d23          	sd	zero,954(a4) # 80049048 <excpt+0x38>
    80023c96:	00f49023          	sh	a5,0(s1)
    80023c9a:	0330000f          	fence	rw,rw
    asm volatile(
    80023c9e:	10200073          	sret
    sret();
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    80023ca2:	08200593          	li	a1,130
    80023ca6:	00005617          	auipc	a2,0x5
    80023caa:	1aa60613          	addi	a2,a2,426 # 80028e50 <__func__.0+0x13f0>
    80023cae:	00004517          	auipc	a0,0x4
    80023cb2:	0aa50513          	addi	a0,a0,170 # 80027d58 <__func__.0+0x2f8>
    80023cb6:	040020ef          	jal	80025cf6 <printf>
    80023cba:	00025797          	auipc	a5,0x25
    80023cbe:	3577c783          	lbu	a5,855(a5) # 80049011 <excpt+0x1>
    80023cc2:	00004597          	auipc	a1,0x4
    80023cc6:	06e58593          	addi	a1,a1,110 # 80027d30 <__func__.0+0x2d0>
    80023cca:	cf89                	beqz	a5,80023ce4 <mix_instruction_1+0x222>
    80023ccc:	6498                	ld	a4,8(s1)
    80023cce:	47d9                	li	a5,22
    80023cd0:	00004597          	auipc	a1,0x4
    80023cd4:	05058593          	addi	a1,a1,80 # 80027d20 <__func__.0+0x2c0>
    80023cd8:	00f70663          	beq	a4,a5,80023ce4 <mix_instruction_1+0x222>
    80023cdc:	00004597          	auipc	a1,0x4
    80023ce0:	05458593          	addi	a1,a1,84 # 80027d30 <__func__.0+0x2d0>
    80023ce4:	00004517          	auipc	a0,0x4
    80023ce8:	08c50513          	addi	a0,a0,140 # 80027d70 <__func__.0+0x310>
    80023cec:	00a020ef          	jal	80025cf6 <printf>
    80023cf0:	00025797          	auipc	a5,0x25
    80023cf4:	3217c783          	lbu	a5,801(a5) # 80049011 <excpt+0x1>
    80023cf8:	c789                	beqz	a5,80023d02 <mix_instruction_1+0x240>
    80023cfa:	6498                	ld	a4,8(s1)
    80023cfc:	47d9                	li	a5,22
    80023cfe:	00f70c63          	beq	a4,a5,80023d16 <mix_instruction_1+0x254>
    80023d02:	00004517          	auipc	a0,0x4
    80023d06:	07650513          	addi	a0,a0,118 # 80027d78 <__func__.0+0x318>
    80023d0a:	7ed010ef          	jal	80025cf6 <printf>
    80023d0e:	02900513          	li	a0,41
    80023d12:	5ef000ef          	jal	80024b00 <putchar>
    80023d16:	4529                	li	a0,10
    80023d18:	5e9000ef          	jal	80024b00 <putchar>
    80023d1c:	c801                	beqz	s0,80023d2c <mix_instruction_1+0x26a>
    80023d1e:	00025797          	auipc	a5,0x25
    80023d22:	2f37c783          	lbu	a5,755(a5) # 80049011 <excpt+0x1>
    80023d26:	4401                	li	s0,0
    80023d28:	7e079c63          	bnez	a5,80024520 <mix_instruction_1+0xa5e>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  
//----------------------------------------------------------------------

    goto_priv(PRIV_M);
    80023d2c:	4511                	li	a0,4
    80023d2e:	ec9dc0ef          	jal	80000bf6 <goto_priv>
    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    hspt_init();
    80023d32:	8afdc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80023d36:	aeddc0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80023d3a:	977dc0ef          	jal	800006b0 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    goto_priv(PRIV_HS);
    80023d3e:	450d                	li	a0,3
    80023d40:	eb7dc0ef          	jal	80000bf6 <goto_priv>

    set_prev_priv(PRIV_VU);
    80023d44:	4501                	li	a0,0
    80023d46:	dd1dc0ef          	jal	80000b16 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    80023d4a:	0330000f          	fence	rw,rw
    80023d4e:	4785                	li	a5,1
    80023d50:	00025717          	auipc	a4,0x25
    80023d54:	2e073c23          	sd	zero,760(a4) # 80049048 <excpt+0x38>
    80023d58:	00f49023          	sh	a5,0(s1)
    80023d5c:	0330000f          	fence	rw,rw
    *((volatile uint64_t*) addr) = val;
    80023d60:	0000c917          	auipc	s2,0xc
    80023d64:	71890913          	addi	s2,s2,1816 # 80030478 <__func__.0+0x8a18>
    80023d68:	00093683          	ld	a3,0(s2)
    80023d6c:	44019737          	lui	a4,0x44019
    asm volatile(
    80023d70:	000807b7          	lui	a5,0x80
    80023d74:	0706                	slli	a4,a4,0x1
    80023d76:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80023d78:	e314                	sd	a3,0(a4)
    80023d7a:	07b6                	slli	a5,a5,0xd
    80023d7c:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    80023d80:	08200593          	li	a1,130
    80023d84:	00005617          	auipc	a2,0x5
    80023d88:	95c60613          	addi	a2,a2,-1700 # 800286e0 <__func__.0+0xc80>
    80023d8c:	00004517          	auipc	a0,0x4
    80023d90:	fcc50513          	addi	a0,a0,-52 # 80027d58 <__func__.0+0x2f8>
    80023d94:	763010ef          	jal	80025cf6 <printf>
    80023d98:	00025797          	auipc	a5,0x25
    80023d9c:	2797c783          	lbu	a5,633(a5) # 80049011 <excpt+0x1>
    80023da0:	00004597          	auipc	a1,0x4
    80023da4:	f9058593          	addi	a1,a1,-112 # 80027d30 <__func__.0+0x2d0>
    80023da8:	e789                	bnez	a5,80023db2 <mix_instruction_1+0x2f0>
    80023daa:	00004597          	auipc	a1,0x4
    80023dae:	f7658593          	addi	a1,a1,-138 # 80027d20 <__func__.0+0x2c0>
    80023db2:	00004517          	auipc	a0,0x4
    80023db6:	fbe50513          	addi	a0,a0,-66 # 80027d70 <__func__.0+0x310>
    80023dba:	73d010ef          	jal	80025cf6 <printf>
    80023dbe:	00025797          	auipc	a5,0x25
    80023dc2:	2537c783          	lbu	a5,595(a5) # 80049011 <excpt+0x1>
    80023dc6:	7c079263          	bnez	a5,8002458a <mix_instruction_1+0xac8>
    80023dca:	4529                	li	a0,10
    80023dcc:	535000ef          	jal	80024b00 <putchar>
    80023dd0:	c419                	beqz	s0,80023dde <mix_instruction_1+0x31c>
    80023dd2:	00025417          	auipc	s0,0x25
    80023dd6:	23f44403          	lbu	s0,575(s0) # 80049011 <excpt+0x1>
    80023dda:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    set_prev_priv(PRIV_VS);
    80023dde:	4509                	li	a0,2
    80023de0:	d37dc0ef          	jal	80000b16 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    80023de4:	0330000f          	fence	rw,rw
    80023de8:	4785                	li	a5,1
    80023dea:	00025717          	auipc	a4,0x25
    80023dee:	24073f23          	sd	zero,606(a4) # 80049048 <excpt+0x38>
    80023df2:	00f49023          	sh	a5,0(s1)
    80023df6:	0330000f          	fence	rw,rw
    80023dfa:	00093683          	ld	a3,0(s2)
    80023dfe:	44019737          	lui	a4,0x44019
    80023e02:	000807b7          	lui	a5,0x80
    80023e06:	0706                	slli	a4,a4,0x1
    80023e08:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80023e0a:	e314                	sd	a3,0(a4)
    80023e0c:	07b6                	slli	a5,a5,0xd
    80023e0e:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    80023e12:	08200593          	li	a1,130
    80023e16:	00005617          	auipc	a2,0x5
    80023e1a:	8fa60613          	addi	a2,a2,-1798 # 80028710 <__func__.0+0xcb0>
    80023e1e:	00004517          	auipc	a0,0x4
    80023e22:	f3a50513          	addi	a0,a0,-198 # 80027d58 <__func__.0+0x2f8>
    80023e26:	6d1010ef          	jal	80025cf6 <printf>
    80023e2a:	00025797          	auipc	a5,0x25
    80023e2e:	1e77c783          	lbu	a5,487(a5) # 80049011 <excpt+0x1>
    80023e32:	00004597          	auipc	a1,0x4
    80023e36:	efe58593          	addi	a1,a1,-258 # 80027d30 <__func__.0+0x2d0>
    80023e3a:	cf89                	beqz	a5,80023e54 <mix_instruction_1+0x392>
    80023e3c:	6498                	ld	a4,8(s1)
    80023e3e:	47b5                	li	a5,13
    80023e40:	00004597          	auipc	a1,0x4
    80023e44:	ee058593          	addi	a1,a1,-288 # 80027d20 <__func__.0+0x2c0>
    80023e48:	00f70663          	beq	a4,a5,80023e54 <mix_instruction_1+0x392>
    80023e4c:	00004597          	auipc	a1,0x4
    80023e50:	ee458593          	addi	a1,a1,-284 # 80027d30 <__func__.0+0x2d0>
    80023e54:	00004517          	auipc	a0,0x4
    80023e58:	f1c50513          	addi	a0,a0,-228 # 80027d70 <__func__.0+0x310>
    80023e5c:	69b010ef          	jal	80025cf6 <printf>
    80023e60:	00025797          	auipc	a5,0x25
    80023e64:	1b17c783          	lbu	a5,433(a5) # 80049011 <excpt+0x1>
    80023e68:	c789                	beqz	a5,80023e72 <mix_instruction_1+0x3b0>
    80023e6a:	6498                	ld	a4,8(s1)
    80023e6c:	47b5                	li	a5,13
    80023e6e:	00f70c63          	beq	a4,a5,80023e86 <mix_instruction_1+0x3c4>
    80023e72:	00004517          	auipc	a0,0x4
    80023e76:	f0650513          	addi	a0,a0,-250 # 80027d78 <__func__.0+0x318>
    80023e7a:	67d010ef          	jal	80025cf6 <printf>
    80023e7e:	02900513          	li	a0,41
    80023e82:	47f000ef          	jal	80024b00 <putchar>
    80023e86:	4529                	li	a0,10
    80023e88:	479000ef          	jal	80024b00 <putchar>
    80023e8c:	c801                	beqz	s0,80023e9c <mix_instruction_1+0x3da>
    80023e8e:	00025797          	auipc	a5,0x25
    80023e92:	1837c783          	lbu	a5,387(a5) # 80049011 <excpt+0x1>
    80023e96:	4401                	li	s0,0
    80023e98:	6a079563          	bnez	a5,80024542 <mix_instruction_1+0xa80>


//----------------------------------------------------------------------


    goto_priv(PRIV_M);     
    80023e9c:	4511                	li	a0,4
    80023e9e:	d59dc0ef          	jal	80000bf6 <goto_priv>

    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80023ea2:	000407b7          	lui	a5,0x40
    80023ea6:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    80023eaa:	450d                	li	a0,3
    80023eac:	d4bdc0ef          	jal	80000bf6 <goto_priv>

    //执行sd指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80023eb0:	0330000f          	fence	rw,rw
    80023eb4:	4785                	li	a5,1
    80023eb6:	00025717          	auipc	a4,0x25
    80023eba:	18073923          	sd	zero,402(a4) # 80049048 <excpt+0x38>
    80023ebe:	00f49023          	sh	a5,0(s1)
    80023ec2:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80023ec6:	37ab77b7          	lui	a5,0x37ab7
    80023eca:	00080737          	lui	a4,0x80
    80023ece:	078a                	slli	a5,a5,0x2
    80023ed0:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80023ed2:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80023ed6:	0736                	slli	a4,a4,0xd
    80023ed8:	00f73023          	sd	a5,0(a4)
    vaddr = hs_page_base(VSURWX_GURWX);

    
    sd(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    80023edc:	08200593          	li	a1,130
    80023ee0:	00009617          	auipc	a2,0x9
    80023ee4:	46060613          	addi	a2,a2,1120 # 8002d340 <__func__.0+0x58e0>
    80023ee8:	00004517          	auipc	a0,0x4
    80023eec:	e7050513          	addi	a0,a0,-400 # 80027d58 <__func__.0+0x2f8>
    80023ef0:	607010ef          	jal	80025cf6 <printf>
    80023ef4:	00025797          	auipc	a5,0x25
    80023ef8:	11d7c783          	lbu	a5,285(a5) # 80049011 <excpt+0x1>
    80023efc:	00004597          	auipc	a1,0x4
    80023f00:	e3458593          	addi	a1,a1,-460 # 80027d30 <__func__.0+0x2d0>
    80023f04:	cf89                	beqz	a5,80023f1e <mix_instruction_1+0x45c>
    80023f06:	6498                	ld	a4,8(s1)
    80023f08:	47bd                	li	a5,15
    80023f0a:	00004597          	auipc	a1,0x4
    80023f0e:	e1658593          	addi	a1,a1,-490 # 80027d20 <__func__.0+0x2c0>
    80023f12:	00f70663          	beq	a4,a5,80023f1e <mix_instruction_1+0x45c>
    80023f16:	00004597          	auipc	a1,0x4
    80023f1a:	e1a58593          	addi	a1,a1,-486 # 80027d30 <__func__.0+0x2d0>
    80023f1e:	00004517          	auipc	a0,0x4
    80023f22:	e5250513          	addi	a0,a0,-430 # 80027d70 <__func__.0+0x310>
    80023f26:	5d1010ef          	jal	80025cf6 <printf>
    80023f2a:	00025797          	auipc	a5,0x25
    80023f2e:	0e77c783          	lbu	a5,231(a5) # 80049011 <excpt+0x1>
    80023f32:	c789                	beqz	a5,80023f3c <mix_instruction_1+0x47a>
    80023f34:	6498                	ld	a4,8(s1)
    80023f36:	47bd                	li	a5,15
    80023f38:	00f70c63          	beq	a4,a5,80023f50 <mix_instruction_1+0x48e>
    80023f3c:	00004517          	auipc	a0,0x4
    80023f40:	e3c50513          	addi	a0,a0,-452 # 80027d78 <__func__.0+0x318>
    80023f44:	5b3010ef          	jal	80025cf6 <printf>
    80023f48:	02900513          	li	a0,41
    80023f4c:	3b5000ef          	jal	80024b00 <putchar>
    80023f50:	4529                	li	a0,10
    80023f52:	3af000ef          	jal	80024b00 <putchar>
    80023f56:	c801                	beqz	s0,80023f66 <mix_instruction_1+0x4a4>
    80023f58:	00025797          	auipc	a5,0x25
    80023f5c:	0b97c783          	lbu	a5,185(a5) # 80049011 <excpt+0x1>
    80023f60:	4401                	li	s0,0
    80023f62:	5e079663          	bnez	a5,8002454e <mix_instruction_1+0xa8c>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );
//----------------------------------------------------------------------
    goto_priv(PRIV_M);
    80023f66:	4511                	li	a0,4
    80023f68:	c8fdc0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MENVCFG,1ULL<<63);                   //若menvcfg.stce=0,则mip的stip可写，若为1则不可写
    80023f6c:	57fd                	li	a5,-1
    80023f6e:	03f79713          	slli	a4,a5,0x3f
    80023f72:	30a73073          	csrc	0x30a,a4

    CSRW(mideleg, (uint64_t)-1);
    80023f76:	30379073          	csrw	mideleg,a5
    VERBOSE("setting mideleg and hideleg\n");
    
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    80023f7a:	60379073          	csrw	hideleg,a5

    VERBOSE("setting all in mip\n");
    CSRW(mip, (uint64_t)-1);
    80023f7e:	34479073          	csrw	mip,a5
    check_csr_rd("hip", CSR_HIP, 0x4);
    80023f82:	64402973          	csrr	s2,hip
    80023f86:	00004617          	auipc	a2,0x4
    80023f8a:	25260613          	addi	a2,a2,594 # 800281d8 <__func__.0+0x778>
    80023f8e:	08200593          	li	a1,130
    80023f92:	00004517          	auipc	a0,0x4
    80023f96:	dc650513          	addi	a0,a0,-570 # 80027d58 <__func__.0+0x2f8>
    80023f9a:	4991                	li	s3,4
    80023f9c:	55b010ef          	jal	80025cf6 <printf>
    80023fa0:	5b390c63          	beq	s2,s3,80024558 <mix_instruction_1+0xa96>
    80023fa4:	00004597          	auipc	a1,0x4
    80023fa8:	d8c58593          	addi	a1,a1,-628 # 80027d30 <__func__.0+0x2d0>
    80023fac:	00004517          	auipc	a0,0x4
    80023fb0:	dc450513          	addi	a0,a0,-572 # 80027d70 <__func__.0+0x310>
    80023fb4:	543010ef          	jal	80025cf6 <printf>
    80023fb8:	00004517          	auipc	a0,0x4
    80023fbc:	dc050513          	addi	a0,a0,-576 # 80027d78 <__func__.0+0x318>
    80023fc0:	537010ef          	jal	80025cf6 <printf>
    80023fc4:	86ce                	mv	a3,s3
    80023fc6:	864a                	mv	a2,s2
    80023fc8:	02d00593          	li	a1,45
    80023fcc:	00004517          	auipc	a0,0x4
    80023fd0:	21450513          	addi	a0,a0,532 # 800281e0 <__func__.0+0x780>
    80023fd4:	523010ef          	jal	80025cf6 <printf>
    80023fd8:	02900513          	li	a0,41
    80023fdc:	325000ef          	jal	80024b00 <putchar>
    80023fe0:	4529                	li	a0,10
    80023fe2:	31f000ef          	jal	80024b00 <putchar>
    80023fe6:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x222);    
    80023fe8:	14402973          	csrr	s2,sip
    80023fec:	00004617          	auipc	a2,0x4
    80023ff0:	20c60613          	addi	a2,a2,524 # 800281f8 <__func__.0+0x798>
    80023ff4:	08200593          	li	a1,130
    80023ff8:	00004517          	auipc	a0,0x4
    80023ffc:	d6050513          	addi	a0,a0,-672 # 80027d58 <__func__.0+0x2f8>
    80024000:	22200993          	li	s3,546
    80024004:	4f3010ef          	jal	80025cf6 <printf>
    80024008:	4f390863          	beq	s2,s3,800244f8 <mix_instruction_1+0xa36>
    8002400c:	00004597          	auipc	a1,0x4
    80024010:	d2458593          	addi	a1,a1,-732 # 80027d30 <__func__.0+0x2d0>
    80024014:	00004517          	auipc	a0,0x4
    80024018:	d5c50513          	addi	a0,a0,-676 # 80027d70 <__func__.0+0x310>
    8002401c:	4db010ef          	jal	80025cf6 <printf>
    80024020:	00004517          	auipc	a0,0x4
    80024024:	d5850513          	addi	a0,a0,-680 # 80027d78 <__func__.0+0x318>
    80024028:	4cf010ef          	jal	80025cf6 <printf>
    8002402c:	86ce                	mv	a3,s3
    8002402e:	864a                	mv	a2,s2
    80024030:	02d00593          	li	a1,45
    80024034:	00004517          	auipc	a0,0x4
    80024038:	1ac50513          	addi	a0,a0,428 # 800281e0 <__func__.0+0x780>
    8002403c:	4bb010ef          	jal	80025cf6 <printf>
    80024040:	02900513          	li	a0,41
    80024044:	2bd000ef          	jal	80024b00 <putchar>
    80024048:	4529                	li	a0,10
    8002404a:	2b7000ef          	jal	80024b00 <putchar>
    8002404e:	4401                	li	s0,0

    // check_csr_rd_mask("mip", mip, 0x226, mtime_mask); // only test when nemu don't use difftest because spike, as ref, shut up time interrupt
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    80024050:	24402973          	csrr	s2,vsip
    80024054:	00004617          	auipc	a2,0x4
    80024058:	17460613          	addi	a2,a2,372 # 800281c8 <__func__.0+0x768>
    8002405c:	08200593          	li	a1,130
    80024060:	00004517          	auipc	a0,0x4
    80024064:	cf850513          	addi	a0,a0,-776 # 80027d58 <__func__.0+0x2f8>
    80024068:	4989                	li	s3,2
    8002406a:	48d010ef          	jal	80025cf6 <printf>
    8002406e:	47390763          	beq	s2,s3,800244dc <mix_instruction_1+0xa1a>
    80024072:	00004597          	auipc	a1,0x4
    80024076:	cbe58593          	addi	a1,a1,-834 # 80027d30 <__func__.0+0x2d0>
    8002407a:	00004517          	auipc	a0,0x4
    8002407e:	cf650513          	addi	a0,a0,-778 # 80027d70 <__func__.0+0x310>
    80024082:	475010ef          	jal	80025cf6 <printf>
    80024086:	00004517          	auipc	a0,0x4
    8002408a:	cf250513          	addi	a0,a0,-782 # 80027d78 <__func__.0+0x318>
    8002408e:	469010ef          	jal	80025cf6 <printf>
    80024092:	86ce                	mv	a3,s3
    80024094:	864a                	mv	a2,s2
    80024096:	02d00593          	li	a1,45
    8002409a:	00004517          	auipc	a0,0x4
    8002409e:	14650513          	addi	a0,a0,326 # 800281e0 <__func__.0+0x780>
    800240a2:	455010ef          	jal	80025cf6 <printf>
    800240a6:	02900513          	li	a0,41
    800240aa:	257000ef          	jal	80024b00 <putchar>
    800240ae:	4529                	li	a0,10
    800240b0:	251000ef          	jal	80024b00 <putchar>
    800240b4:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    800240b6:	4509                	li	a0,2
    800240b8:	b3fdc0ef          	jal	80000bf6 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    800240bc:	14402973          	csrr	s2,sip
    800240c0:	00004617          	auipc	a2,0x4
    800240c4:	14060613          	addi	a2,a2,320 # 80028200 <__func__.0+0x7a0>
    800240c8:	08200593          	li	a1,130
    800240cc:	00004517          	auipc	a0,0x4
    800240d0:	c8c50513          	addi	a0,a0,-884 # 80027d58 <__func__.0+0x2f8>
    800240d4:	4989                	li	s3,2
    800240d6:	421010ef          	jal	80025cf6 <printf>
    800240da:	3f390363          	beq	s2,s3,800244c0 <mix_instruction_1+0x9fe>
    800240de:	00004597          	auipc	a1,0x4
    800240e2:	c5258593          	addi	a1,a1,-942 # 80027d30 <__func__.0+0x2d0>
    800240e6:	00004517          	auipc	a0,0x4
    800240ea:	c8a50513          	addi	a0,a0,-886 # 80027d70 <__func__.0+0x310>
    800240ee:	409010ef          	jal	80025cf6 <printf>
    800240f2:	00004517          	auipc	a0,0x4
    800240f6:	c8650513          	addi	a0,a0,-890 # 80027d78 <__func__.0+0x318>
    800240fa:	3fd010ef          	jal	80025cf6 <printf>
    800240fe:	86ce                	mv	a3,s3
    80024100:	864a                	mv	a2,s2
    80024102:	02d00593          	li	a1,45
    80024106:	00004517          	auipc	a0,0x4
    8002410a:	0da50513          	addi	a0,a0,218 # 800281e0 <__func__.0+0x780>
    8002410e:	3e9010ef          	jal	80025cf6 <printf>
    80024112:	02900513          	li	a0,41
    80024116:	1eb000ef          	jal	80024b00 <putchar>
    8002411a:	4529                	li	a0,10
    8002411c:	1e5000ef          	jal	80024b00 <putchar>
    80024120:	4401                	li	s0,0
    goto_priv(PRIV_M);
    80024122:	4511                	li	a0,4
    80024124:	ad3dc0ef          	jal	80000bf6 <goto_priv>

    VERBOSE("clearing all in mip\n");
    CSRW(mip, (uint64_t)0);
    80024128:	34405073          	csrwi	mip,0
    check_csr_rd("hip", CSR_HIP, 0x0);
    8002412c:	64402973          	csrr	s2,hip
    80024130:	00004617          	auipc	a2,0x4
    80024134:	0a860613          	addi	a2,a2,168 # 800281d8 <__func__.0+0x778>
    80024138:	08200593          	li	a1,130
    8002413c:	00004517          	auipc	a0,0x4
    80024140:	c1c50513          	addi	a0,a0,-996 # 80027d58 <__func__.0+0x2f8>
    80024144:	3b3010ef          	jal	80025cf6 <printf>
    80024148:	34090e63          	beqz	s2,800244a4 <mix_instruction_1+0x9e2>
    8002414c:	00004597          	auipc	a1,0x4
    80024150:	be458593          	addi	a1,a1,-1052 # 80027d30 <__func__.0+0x2d0>
    80024154:	00004517          	auipc	a0,0x4
    80024158:	c1c50513          	addi	a0,a0,-996 # 80027d70 <__func__.0+0x310>
    8002415c:	39b010ef          	jal	80025cf6 <printf>
    80024160:	00004517          	auipc	a0,0x4
    80024164:	c1850513          	addi	a0,a0,-1000 # 80027d78 <__func__.0+0x318>
    80024168:	38f010ef          	jal	80025cf6 <printf>
    8002416c:	864a                	mv	a2,s2
    8002416e:	4681                	li	a3,0
    80024170:	02d00593          	li	a1,45
    80024174:	00004517          	auipc	a0,0x4
    80024178:	06c50513          	addi	a0,a0,108 # 800281e0 <__func__.0+0x780>
    8002417c:	37b010ef          	jal	80025cf6 <printf>
    80024180:	02900513          	li	a0,41
    80024184:	17d000ef          	jal	80024b00 <putchar>
    80024188:	4529                	li	a0,10
    8002418a:	177000ef          	jal	80024b00 <putchar>
    8002418e:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    80024190:	14402973          	csrr	s2,sip
    80024194:	00004617          	auipc	a2,0x4
    80024198:	06460613          	addi	a2,a2,100 # 800281f8 <__func__.0+0x798>
    8002419c:	08200593          	li	a1,130
    800241a0:	00004517          	auipc	a0,0x4
    800241a4:	bb850513          	addi	a0,a0,-1096 # 80027d58 <__func__.0+0x2f8>
    800241a8:	34f010ef          	jal	80025cf6 <printf>
    800241ac:	2c090e63          	beqz	s2,80024488 <mix_instruction_1+0x9c6>
    800241b0:	00004597          	auipc	a1,0x4
    800241b4:	b8058593          	addi	a1,a1,-1152 # 80027d30 <__func__.0+0x2d0>
    800241b8:	00004517          	auipc	a0,0x4
    800241bc:	bb850513          	addi	a0,a0,-1096 # 80027d70 <__func__.0+0x310>
    800241c0:	337010ef          	jal	80025cf6 <printf>
    800241c4:	00004517          	auipc	a0,0x4
    800241c8:	bb450513          	addi	a0,a0,-1100 # 80027d78 <__func__.0+0x318>
    800241cc:	32b010ef          	jal	80025cf6 <printf>
    800241d0:	864a                	mv	a2,s2
    800241d2:	4681                	li	a3,0
    800241d4:	02d00593          	li	a1,45
    800241d8:	00004517          	auipc	a0,0x4
    800241dc:	00850513          	addi	a0,a0,8 # 800281e0 <__func__.0+0x780>
    800241e0:	317010ef          	jal	80025cf6 <printf>
    800241e4:	02900513          	li	a0,41
    800241e8:	119000ef          	jal	80024b00 <putchar>
    800241ec:	4529                	li	a0,10
    800241ee:	113000ef          	jal	80024b00 <putchar>
    800241f2:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x000, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    800241f4:	24402973          	csrr	s2,vsip
    800241f8:	00004617          	auipc	a2,0x4
    800241fc:	fd060613          	addi	a2,a2,-48 # 800281c8 <__func__.0+0x768>
    80024200:	08200593          	li	a1,130
    80024204:	00004517          	auipc	a0,0x4
    80024208:	b5450513          	addi	a0,a0,-1196 # 80027d58 <__func__.0+0x2f8>
    8002420c:	2eb010ef          	jal	80025cf6 <printf>
    80024210:	24090e63          	beqz	s2,8002446c <mix_instruction_1+0x9aa>
    80024214:	00004597          	auipc	a1,0x4
    80024218:	b1c58593          	addi	a1,a1,-1252 # 80027d30 <__func__.0+0x2d0>
    8002421c:	00004517          	auipc	a0,0x4
    80024220:	b5450513          	addi	a0,a0,-1196 # 80027d70 <__func__.0+0x310>
    80024224:	2d3010ef          	jal	80025cf6 <printf>
    80024228:	00004517          	auipc	a0,0x4
    8002422c:	b5050513          	addi	a0,a0,-1200 # 80027d78 <__func__.0+0x318>
    80024230:	2c7010ef          	jal	80025cf6 <printf>
    80024234:	864a                	mv	a2,s2
    80024236:	4681                	li	a3,0
    80024238:	02d00593          	li	a1,45
    8002423c:	00004517          	auipc	a0,0x4
    80024240:	fa450513          	addi	a0,a0,-92 # 800281e0 <__func__.0+0x780>
    80024244:	2b3010ef          	jal	80025cf6 <printf>
    80024248:	02900513          	li	a0,41
    8002424c:	0b5000ef          	jal	80024b00 <putchar>
    80024250:	4529                	li	a0,10
    80024252:	0af000ef          	jal	80024b00 <putchar>
    80024256:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80024258:	4509                	li	a0,2
    8002425a:	99ddc0ef          	jal	80000bf6 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    8002425e:	14402973          	csrr	s2,sip
    80024262:	00004617          	auipc	a2,0x4
    80024266:	f9e60613          	addi	a2,a2,-98 # 80028200 <__func__.0+0x7a0>
    8002426a:	08200593          	li	a1,130
    8002426e:	00004517          	auipc	a0,0x4
    80024272:	aea50513          	addi	a0,a0,-1302 # 80027d58 <__func__.0+0x2f8>
    80024276:	281010ef          	jal	80025cf6 <printf>
    8002427a:	1c090b63          	beqz	s2,80024450 <mix_instruction_1+0x98e>
    8002427e:	00004597          	auipc	a1,0x4
    80024282:	ab258593          	addi	a1,a1,-1358 # 80027d30 <__func__.0+0x2d0>
    80024286:	00004517          	auipc	a0,0x4
    8002428a:	aea50513          	addi	a0,a0,-1302 # 80027d70 <__func__.0+0x310>
    8002428e:	269010ef          	jal	80025cf6 <printf>
    80024292:	00004517          	auipc	a0,0x4
    80024296:	ae650513          	addi	a0,a0,-1306 # 80027d78 <__func__.0+0x318>
    8002429a:	25d010ef          	jal	80025cf6 <printf>
    8002429e:	864a                	mv	a2,s2
    800242a0:	4681                	li	a3,0
    800242a2:	02d00593          	li	a1,45
    800242a6:	00004517          	auipc	a0,0x4
    800242aa:	f3a50513          	addi	a0,a0,-198 # 800281e0 <__func__.0+0x780>
    800242ae:	249010ef          	jal	80025cf6 <printf>
    800242b2:	02900513          	li	a0,41
    800242b6:	04b000ef          	jal	80024b00 <putchar>
    800242ba:	4529                	li	a0,10
    800242bc:	045000ef          	jal	80024b00 <putchar>
    800242c0:	4401                	li	s0,0
    goto_priv(PRIV_M);   
    800242c2:	4511                	li	a0,4
    800242c4:	933dc0ef          	jal	80000bf6 <goto_priv>


//----------------------------------------------------------------------
    //执行取指指令二级地址翻译阶段时，pte.x=0
    goto_priv(PRIV_VS);
    800242c8:	4509                	li	a0,2
    800242ca:	92ddc0ef          	jal	80000bf6 <goto_priv>
    vaddr = vs_page_base(VSRWX_GRW);
    TEST_SETUP_EXCEPT();
    800242ce:	0330000f          	fence	rw,rw
    800242d2:	4785                	li	a5,1
    800242d4:	00025717          	auipc	a4,0x25
    800242d8:	d6073a23          	sd	zero,-652(a4) # 80049048 <excpt+0x38>
    800242dc:	00f49023          	sh	a5,0(s1)
    800242e0:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    800242e4:	400137b7          	lui	a5,0x40013
    800242e8:	078a                	slli	a5,a5,0x2
    800242ea:	00000297          	auipc	t0,0x0
    800242ee:	00c28293          	addi	t0,t0,12 # 800242f6 <mix_instruction_1+0x834>
    800242f2:	0254bc23          	sd	t0,56(s1)
    800242f6:	8782                	jr	a5

    TEST_ASSERT("vs mode first fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    800242f8:	08200593          	li	a1,130
    800242fc:	0000a617          	auipc	a2,0xa
    80024300:	ec460613          	addi	a2,a2,-316 # 8002e1c0 <__func__.0+0x6760>
    80024304:	00004517          	auipc	a0,0x4
    80024308:	a5450513          	addi	a0,a0,-1452 # 80027d58 <__func__.0+0x2f8>
    8002430c:	1eb010ef          	jal	80025cf6 <printf>
    80024310:	00025797          	auipc	a5,0x25
    80024314:	d017c783          	lbu	a5,-767(a5) # 80049011 <excpt+0x1>
    80024318:	00004597          	auipc	a1,0x4
    8002431c:	a1858593          	addi	a1,a1,-1512 # 80027d30 <__func__.0+0x2d0>
    80024320:	cf89                	beqz	a5,8002433a <mix_instruction_1+0x878>
    80024322:	6498                	ld	a4,8(s1)
    80024324:	47d1                	li	a5,20
    80024326:	00004597          	auipc	a1,0x4
    8002432a:	9fa58593          	addi	a1,a1,-1542 # 80027d20 <__func__.0+0x2c0>
    8002432e:	00f70663          	beq	a4,a5,8002433a <mix_instruction_1+0x878>
    80024332:	00004597          	auipc	a1,0x4
    80024336:	9fe58593          	addi	a1,a1,-1538 # 80027d30 <__func__.0+0x2d0>
    8002433a:	00004517          	auipc	a0,0x4
    8002433e:	a3650513          	addi	a0,a0,-1482 # 80027d70 <__func__.0+0x310>
    80024342:	1b5010ef          	jal	80025cf6 <printf>
    80024346:	00025797          	auipc	a5,0x25
    8002434a:	ccb7c783          	lbu	a5,-821(a5) # 80049011 <excpt+0x1>
    8002434e:	c789                	beqz	a5,80024358 <mix_instruction_1+0x896>
    80024350:	6498                	ld	a4,8(s1)
    80024352:	47d1                	li	a5,20
    80024354:	00f70c63          	beq	a4,a5,8002436c <mix_instruction_1+0x8aa>
    80024358:	00004517          	auipc	a0,0x4
    8002435c:	a2050513          	addi	a0,a0,-1504 # 80027d78 <__func__.0+0x318>
    80024360:	197010ef          	jal	80025cf6 <printf>
    80024364:	02900513          	li	a0,41
    80024368:	798000ef          	jal	80024b00 <putchar>
    8002436c:	4529                	li	a0,10
    8002436e:	792000ef          	jal	80024b00 <putchar>
    80024372:	c801                	beqz	s0,80024382 <mix_instruction_1+0x8c0>
    80024374:	00025797          	auipc	a5,0x25
    80024378:	c9d7c783          	lbu	a5,-867(a5) # 80049011 <excpt+0x1>
    8002437c:	4401                	li	s0,0
    8002437e:	1a079d63          	bnez	a5,80024538 <mix_instruction_1+0xa76>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );
//----------------------------------------------------------------------
    TEST_SETUP_EXCEPT();
    80024382:	0330000f          	fence	rw,rw
    80024386:	4905                	li	s2,1
    80024388:	00025797          	auipc	a5,0x25
    8002438c:	cc07b023          	sd	zero,-832(a5) # 80049048 <excpt+0x38>
    80024390:	01249023          	sh	s2,0(s1)
    80024394:	0330000f          	fence	rw,rw
    
    
    goto_priv(PRIV_HS);     
    80024398:	450d                	li	a0,3
    8002439a:	85ddc0ef          	jal	80000bf6 <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSRWX_GRWX) + 1;      
    uint64_t value = 0xdeadbeef;

    //load byte地址不会发生未对齐
    TEST_SETUP_EXCEPT();        
    8002439e:	0330000f          	fence	rw,rw
    800243a2:	00025797          	auipc	a5,0x25
    800243a6:	ca07b323          	sd	zero,-858(a5) # 80049048 <excpt+0x38>
    800243aa:	01249023          	sh	s2,0(s1)
    800243ae:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    800243b2:	001007b7          	lui	a5,0x100
    800243b6:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    800243ba:	07b2                	slli	a5,a5,0xc
    800243bc:	97ca                	add	a5,a5,s2
    800243be:	00078783          	lb	a5,0(a5)
    value = lb(vaddr_f);
    TEST_ASSERT("load byte address is not aligned successful",         
    800243c2:	08200593          	li	a1,130
    800243c6:	00007617          	auipc	a2,0x7
    800243ca:	a2260613          	addi	a2,a2,-1502 # 8002ade8 <__func__.0+0x3388>
    800243ce:	00004517          	auipc	a0,0x4
    800243d2:	98a50513          	addi	a0,a0,-1654 # 80027d58 <__func__.0+0x2f8>
    800243d6:	121010ef          	jal	80025cf6 <printf>
    800243da:	00025797          	auipc	a5,0x25
    800243de:	c377c783          	lbu	a5,-969(a5) # 80049011 <excpt+0x1>
    800243e2:	00004597          	auipc	a1,0x4
    800243e6:	94e58593          	addi	a1,a1,-1714 # 80027d30 <__func__.0+0x2d0>
    800243ea:	e789                	bnez	a5,800243f4 <mix_instruction_1+0x932>
    800243ec:	00004597          	auipc	a1,0x4
    800243f0:	93458593          	addi	a1,a1,-1740 # 80027d20 <__func__.0+0x2c0>
    800243f4:	00004517          	auipc	a0,0x4
    800243f8:	97c50513          	addi	a0,a0,-1668 # 80027d70 <__func__.0+0x310>
    800243fc:	0fb010ef          	jal	80025cf6 <printf>
    80024400:	00025797          	auipc	a5,0x25
    80024404:	c117c783          	lbu	a5,-1007(a5) # 80049011 <excpt+0x1>
    80024408:	16079663          	bnez	a5,80024574 <mix_instruction_1+0xab2>
    8002440c:	4529                	li	a0,10
    8002440e:	6f2000ef          	jal	80024b00 <putchar>
    80024412:	c419                	beqz	s0,80024420 <mix_instruction_1+0x95e>
    80024414:	00025797          	auipc	a5,0x25
    80024418:	bfd7c783          	lbu	a5,-1027(a5) # 80049011 <excpt+0x1>
    8002441c:	0e078c63          	beqz	a5,80024514 <mix_instruction_1+0xa52>
    80024420:	4401                	li	s0,0
        excpt.triggered == false
    );
//----------------------------------------------------------------------

    TEST_END();
    80024422:	00004597          	auipc	a1,0x4
    80024426:	90e58593          	addi	a1,a1,-1778 # 80027d30 <__func__.0+0x2d0>
    8002442a:	00004517          	auipc	a0,0x4
    8002442e:	9ae50513          	addi	a0,a0,-1618 # 80027dd8 <__func__.0+0x378>
    80024432:	0c5010ef          	jal	80025cf6 <printf>
    80024436:	4511                	li	a0,4
    80024438:	fbedc0ef          	jal	80000bf6 <goto_priv>
    8002443c:	870dd0ef          	jal	800014ac <reset_state>

    80024440:	70a2                	ld	ra,40(sp)
    80024442:	8522                	mv	a0,s0
    80024444:	7402                	ld	s0,32(sp)
    80024446:	64e2                	ld	s1,24(sp)
    80024448:	6942                	ld	s2,16(sp)
    8002444a:	69a2                	ld	s3,8(sp)
    8002444c:	6145                	addi	sp,sp,48
    8002444e:	8082                	ret
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80024450:	00004597          	auipc	a1,0x4
    80024454:	8d058593          	addi	a1,a1,-1840 # 80027d20 <__func__.0+0x2c0>
    80024458:	00004517          	auipc	a0,0x4
    8002445c:	91850513          	addi	a0,a0,-1768 # 80027d70 <__func__.0+0x310>
    80024460:	097010ef          	jal	80025cf6 <printf>
    80024464:	4529                	li	a0,10
    80024466:	69a000ef          	jal	80024b00 <putchar>
    8002446a:	bda1                	j	800242c2 <mix_instruction_1+0x800>
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    8002446c:	00004597          	auipc	a1,0x4
    80024470:	8b458593          	addi	a1,a1,-1868 # 80027d20 <__func__.0+0x2c0>
    80024474:	00004517          	auipc	a0,0x4
    80024478:	8fc50513          	addi	a0,a0,-1796 # 80027d70 <__func__.0+0x310>
    8002447c:	07b010ef          	jal	80025cf6 <printf>
    80024480:	4529                	li	a0,10
    80024482:	67e000ef          	jal	80024b00 <putchar>
    80024486:	bbc9                	j	80024258 <mix_instruction_1+0x796>
    check_csr_rd("sip", sip, 0x0);
    80024488:	00004597          	auipc	a1,0x4
    8002448c:	89858593          	addi	a1,a1,-1896 # 80027d20 <__func__.0+0x2c0>
    80024490:	00004517          	auipc	a0,0x4
    80024494:	8e050513          	addi	a0,a0,-1824 # 80027d70 <__func__.0+0x310>
    80024498:	05f010ef          	jal	80025cf6 <printf>
    8002449c:	4529                	li	a0,10
    8002449e:	662000ef          	jal	80024b00 <putchar>
    800244a2:	bb89                	j	800241f4 <mix_instruction_1+0x732>
    check_csr_rd("hip", CSR_HIP, 0x0);
    800244a4:	00004597          	auipc	a1,0x4
    800244a8:	87c58593          	addi	a1,a1,-1924 # 80027d20 <__func__.0+0x2c0>
    800244ac:	00004517          	auipc	a0,0x4
    800244b0:	8c450513          	addi	a0,a0,-1852 # 80027d70 <__func__.0+0x310>
    800244b4:	043010ef          	jal	80025cf6 <printf>
    800244b8:	4529                	li	a0,10
    800244ba:	646000ef          	jal	80024b00 <putchar>
    800244be:	b9c9                	j	80024190 <mix_instruction_1+0x6ce>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    800244c0:	00004597          	auipc	a1,0x4
    800244c4:	86058593          	addi	a1,a1,-1952 # 80027d20 <__func__.0+0x2c0>
    800244c8:	00004517          	auipc	a0,0x4
    800244cc:	8a850513          	addi	a0,a0,-1880 # 80027d70 <__func__.0+0x310>
    800244d0:	027010ef          	jal	80025cf6 <printf>
    800244d4:	4529                	li	a0,10
    800244d6:	62a000ef          	jal	80024b00 <putchar>
    800244da:	b1a1                	j	80024122 <mix_instruction_1+0x660>
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    800244dc:	00004597          	auipc	a1,0x4
    800244e0:	84458593          	addi	a1,a1,-1980 # 80027d20 <__func__.0+0x2c0>
    800244e4:	00004517          	auipc	a0,0x4
    800244e8:	88c50513          	addi	a0,a0,-1908 # 80027d70 <__func__.0+0x310>
    800244ec:	00b010ef          	jal	80025cf6 <printf>
    800244f0:	4529                	li	a0,10
    800244f2:	60e000ef          	jal	80024b00 <putchar>
    800244f6:	b6c1                	j	800240b6 <mix_instruction_1+0x5f4>
    check_csr_rd("sip", sip, 0x222);    
    800244f8:	00004597          	auipc	a1,0x4
    800244fc:	82858593          	addi	a1,a1,-2008 # 80027d20 <__func__.0+0x2c0>
    80024500:	00004517          	auipc	a0,0x4
    80024504:	87050513          	addi	a0,a0,-1936 # 80027d70 <__func__.0+0x310>
    80024508:	7ee010ef          	jal	80025cf6 <printf>
    8002450c:	4529                	li	a0,10
    8002450e:	5f2000ef          	jal	80024b00 <putchar>
    80024512:	be3d                	j	80024050 <mix_instruction_1+0x58e>
    TEST_ASSERT("load byte address is not aligned successful",         
    80024514:	4405                	li	s0,1
    TEST_END();
    80024516:	00004597          	auipc	a1,0x4
    8002451a:	80a58593          	addi	a1,a1,-2038 # 80027d20 <__func__.0+0x2c0>
    8002451e:	b731                	j	8002442a <mix_instruction_1+0x968>
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    80024520:	6480                	ld	s0,8(s1)
    80024522:	1429                	addi	s0,s0,-22
    80024524:	00143413          	seqz	s0,s0
    80024528:	805ff06f          	j	80023d2c <mix_instruction_1+0x26a>
    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    8002452c:	6480                	ld	s0,8(s1)
    8002452e:	1479                	addi	s0,s0,-2
    80024530:	00143413          	seqz	s0,s0
    80024534:	f38ff06f          	j	80023c6c <mix_instruction_1+0x1aa>
    TEST_ASSERT("vs mode first fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80024538:	6480                	ld	s0,8(s1)
    8002453a:	1431                	addi	s0,s0,-20
    8002453c:	00143413          	seqz	s0,s0
    80024540:	b589                	j	80024382 <mix_instruction_1+0x8c0>
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    80024542:	6480                	ld	s0,8(s1)
    80024544:	144d                	addi	s0,s0,-13
    80024546:	00143413          	seqz	s0,s0
    8002454a:	953ff06f          	j	80023e9c <mix_instruction_1+0x3da>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    8002454e:	6480                	ld	s0,8(s1)
    80024550:	1445                	addi	s0,s0,-15
    80024552:	00143413          	seqz	s0,s0
    80024556:	bc01                	j	80023f66 <mix_instruction_1+0x4a4>
    check_csr_rd("hip", CSR_HIP, 0x4);
    80024558:	00003597          	auipc	a1,0x3
    8002455c:	7c858593          	addi	a1,a1,1992 # 80027d20 <__func__.0+0x2c0>
    80024560:	00004517          	auipc	a0,0x4
    80024564:	81050513          	addi	a0,a0,-2032 # 80027d70 <__func__.0+0x310>
    80024568:	78e010ef          	jal	80025cf6 <printf>
    8002456c:	4529                	li	a0,10
    8002456e:	592000ef          	jal	80024b00 <putchar>
    80024572:	bc9d                	j	80023fe8 <mix_instruction_1+0x526>
    TEST_ASSERT("load byte address is not aligned successful",         
    80024574:	00004517          	auipc	a0,0x4
    80024578:	80450513          	addi	a0,a0,-2044 # 80027d78 <__func__.0+0x318>
    8002457c:	77a010ef          	jal	80025cf6 <printf>
    80024580:	02900513          	li	a0,41
    80024584:	57c000ef          	jal	80024b00 <putchar>
    80024588:	b551                	j	8002440c <mix_instruction_1+0x94a>
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    8002458a:	00003517          	auipc	a0,0x3
    8002458e:	7ee50513          	addi	a0,a0,2030 # 80027d78 <__func__.0+0x318>
    80024592:	764010ef          	jal	80025cf6 <printf>
    80024596:	02900513          	li	a0,41
    8002459a:	566000ef          	jal	80024b00 <putchar>
    8002459e:	82dff06f          	j	80023dca <mix_instruction_1+0x308>

00000000800245a2 <ebreak_tests_1>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool ebreak_tests_1() {
    800245a2:	1101                	addi	sp,sp,-32

    TEST_START();
    800245a4:	00003597          	auipc	a1,0x3
    800245a8:	47c58593          	addi	a1,a1,1148 # 80027a20 <__func__.4>
    800245ac:	00003517          	auipc	a0,0x3
    800245b0:	79450513          	addi	a0,a0,1940 # 80027d40 <__func__.0+0x2e0>
bool ebreak_tests_1() {
    800245b4:	ec06                	sd	ra,24(sp)
    800245b6:	e822                	sd	s0,16(sp)
    800245b8:	e426                	sd	s1,8(sp)
    TEST_START();
    800245ba:	73c010ef          	jal	80025cf6 <printf>
    800245be:	4529                	li	a0,10
    800245c0:	540000ef          	jal	80024b00 <putchar>

    //m模式下执行ebreak指令
    goto_priv(PRIV_M);
    800245c4:	4511                	li	a0,4
    800245c6:	e30dc0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800245ca:	0330000f          	fence	rw,rw
    800245ce:	00025417          	auipc	s0,0x25
    800245d2:	a4240413          	addi	s0,s0,-1470 # 80049010 <excpt>
    800245d6:	4785                	li	a5,1
    800245d8:	00025717          	auipc	a4,0x25
    800245dc:	a6073823          	sd	zero,-1424(a4) # 80049048 <excpt+0x38>
    800245e0:	00f41023          	sh	a5,0(s0)
    800245e4:	0330000f          	fence	rw,rw
    asm volatile ("ebreak");
    800245e8:	9002                	ebreak
    
    ebreak();

    TEST_ASSERT("m mode ebreak cause to Breakpoint",
    800245ea:	08200593          	li	a1,130
    800245ee:	0000c617          	auipc	a2,0xc
    800245f2:	d9a60613          	addi	a2,a2,-614 # 80030388 <__func__.0+0x8928>
    800245f6:	00003517          	auipc	a0,0x3
    800245fa:	76250513          	addi	a0,a0,1890 # 80027d58 <__func__.0+0x2f8>
    800245fe:	6f8010ef          	jal	80025cf6 <printf>
    80024602:	00025797          	auipc	a5,0x25
    80024606:	a0f7c783          	lbu	a5,-1521(a5) # 80049011 <excpt+0x1>
    8002460a:	00003597          	auipc	a1,0x3
    8002460e:	72658593          	addi	a1,a1,1830 # 80027d30 <__func__.0+0x2d0>
    80024612:	cf89                	beqz	a5,8002462c <ebreak_tests_1+0x8a>
    80024614:	6418                	ld	a4,8(s0)
    80024616:	478d                	li	a5,3
    80024618:	00003597          	auipc	a1,0x3
    8002461c:	70858593          	addi	a1,a1,1800 # 80027d20 <__func__.0+0x2c0>
    80024620:	00f70663          	beq	a4,a5,8002462c <ebreak_tests_1+0x8a>
    80024624:	00003597          	auipc	a1,0x3
    80024628:	70c58593          	addi	a1,a1,1804 # 80027d30 <__func__.0+0x2d0>
    8002462c:	00003517          	auipc	a0,0x3
    80024630:	74450513          	addi	a0,a0,1860 # 80027d70 <__func__.0+0x310>
    80024634:	6c2010ef          	jal	80025cf6 <printf>
    80024638:	00025797          	auipc	a5,0x25
    8002463c:	9d97c783          	lbu	a5,-1575(a5) # 80049011 <excpt+0x1>
    80024640:	c789                	beqz	a5,8002464a <ebreak_tests_1+0xa8>
    80024642:	6418                	ld	a4,8(s0)
    80024644:	478d                	li	a5,3
    80024646:	00f70c63          	beq	a4,a5,8002465e <ebreak_tests_1+0xbc>
    8002464a:	00003517          	auipc	a0,0x3
    8002464e:	72e50513          	addi	a0,a0,1838 # 80027d78 <__func__.0+0x318>
    80024652:	6a4010ef          	jal	80025cf6 <printf>
    80024656:	02900513          	li	a0,41
    8002465a:	4a6000ef          	jal	80024b00 <putchar>
    8002465e:	4529                	li	a0,10
    80024660:	4a0000ef          	jal	80024b00 <putchar>
    80024664:	00025497          	auipc	s1,0x25
    80024668:	9ad4c483          	lbu	s1,-1619(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    8002466c:	00003597          	auipc	a1,0x3
    80024670:	6c458593          	addi	a1,a1,1732 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("m mode ebreak cause to Breakpoint",
    80024674:	cc91                	beqz	s1,80024690 <ebreak_tests_1+0xee>
    80024676:	6418                	ld	a4,8(s0)
    80024678:	478d                	li	a5,3
    TEST_END();
    8002467a:	00003597          	auipc	a1,0x3
    8002467e:	6a658593          	addi	a1,a1,1702 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("m mode ebreak cause to Breakpoint",
    80024682:	00f70763          	beq	a4,a5,80024690 <ebreak_tests_1+0xee>
    80024686:	4481                	li	s1,0
    TEST_END();
    80024688:	00003597          	auipc	a1,0x3
    8002468c:	6a858593          	addi	a1,a1,1704 # 80027d30 <__func__.0+0x2d0>
    80024690:	00003517          	auipc	a0,0x3
    80024694:	74850513          	addi	a0,a0,1864 # 80027dd8 <__func__.0+0x378>
    80024698:	65e010ef          	jal	80025cf6 <printf>
    8002469c:	4511                	li	a0,4
    8002469e:	d58dc0ef          	jal	80000bf6 <goto_priv>
    800246a2:	e0bdc0ef          	jal	800014ac <reset_state>

}
    800246a6:	60e2                	ld	ra,24(sp)
    800246a8:	6442                	ld	s0,16(sp)
    800246aa:	8526                	mv	a0,s1
    800246ac:	64a2                	ld	s1,8(sp)
    800246ae:	6105                	addi	sp,sp,32
    800246b0:	8082                	ret

00000000800246b2 <ebreak_tests_2>:

bool ebreak_tests_2() {
    800246b2:	1101                	addi	sp,sp,-32

    TEST_START();
    800246b4:	00003597          	auipc	a1,0x3
    800246b8:	37c58593          	addi	a1,a1,892 # 80027a30 <__func__.3>
    800246bc:	00003517          	auipc	a0,0x3
    800246c0:	68450513          	addi	a0,a0,1668 # 80027d40 <__func__.0+0x2e0>
bool ebreak_tests_2() {
    800246c4:	ec06                	sd	ra,24(sp)
    800246c6:	e822                	sd	s0,16(sp)
    800246c8:	e426                	sd	s1,8(sp)
    TEST_START();
    800246ca:	62c010ef          	jal	80025cf6 <printf>
    800246ce:	4529                	li	a0,10
    800246d0:	430000ef          	jal	80024b00 <putchar>

    //vs模式下执行ebreak指令
    goto_priv(PRIV_M);
    800246d4:	4511                	li	a0,4
    800246d6:	d20dc0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800246da:	0330000f          	fence	rw,rw
    800246de:	00025417          	auipc	s0,0x25
    800246e2:	93240413          	addi	s0,s0,-1742 # 80049010 <excpt>
    800246e6:	4785                	li	a5,1
    800246e8:	00025717          	auipc	a4,0x25
    800246ec:	96073023          	sd	zero,-1696(a4) # 80049048 <excpt+0x38>
    800246f0:	00f41023          	sh	a5,0(s0)
    800246f4:	0330000f          	fence	rw,rw
    800246f8:	9002                	ebreak

    ebreak();

    TEST_ASSERT("vs mode ebreak cause to Breakpoint",
    800246fa:	08200593          	li	a1,130
    800246fe:	0000c617          	auipc	a2,0xc
    80024702:	cb260613          	addi	a2,a2,-846 # 800303b0 <__func__.0+0x8950>
    80024706:	00003517          	auipc	a0,0x3
    8002470a:	65250513          	addi	a0,a0,1618 # 80027d58 <__func__.0+0x2f8>
    8002470e:	5e8010ef          	jal	80025cf6 <printf>
    80024712:	00025797          	auipc	a5,0x25
    80024716:	8ff7c783          	lbu	a5,-1793(a5) # 80049011 <excpt+0x1>
    8002471a:	00003597          	auipc	a1,0x3
    8002471e:	61658593          	addi	a1,a1,1558 # 80027d30 <__func__.0+0x2d0>
    80024722:	cf89                	beqz	a5,8002473c <ebreak_tests_2+0x8a>
    80024724:	6418                	ld	a4,8(s0)
    80024726:	478d                	li	a5,3
    80024728:	00003597          	auipc	a1,0x3
    8002472c:	5f858593          	addi	a1,a1,1528 # 80027d20 <__func__.0+0x2c0>
    80024730:	00f70663          	beq	a4,a5,8002473c <ebreak_tests_2+0x8a>
    80024734:	00003597          	auipc	a1,0x3
    80024738:	5fc58593          	addi	a1,a1,1532 # 80027d30 <__func__.0+0x2d0>
    8002473c:	00003517          	auipc	a0,0x3
    80024740:	63450513          	addi	a0,a0,1588 # 80027d70 <__func__.0+0x310>
    80024744:	5b2010ef          	jal	80025cf6 <printf>
    80024748:	00025797          	auipc	a5,0x25
    8002474c:	8c97c783          	lbu	a5,-1847(a5) # 80049011 <excpt+0x1>
    80024750:	c789                	beqz	a5,8002475a <ebreak_tests_2+0xa8>
    80024752:	6418                	ld	a4,8(s0)
    80024754:	478d                	li	a5,3
    80024756:	00f70c63          	beq	a4,a5,8002476e <ebreak_tests_2+0xbc>
    8002475a:	00003517          	auipc	a0,0x3
    8002475e:	61e50513          	addi	a0,a0,1566 # 80027d78 <__func__.0+0x318>
    80024762:	594010ef          	jal	80025cf6 <printf>
    80024766:	02900513          	li	a0,41
    8002476a:	396000ef          	jal	80024b00 <putchar>
    8002476e:	4529                	li	a0,10
    80024770:	390000ef          	jal	80024b00 <putchar>
    80024774:	00025497          	auipc	s1,0x25
    80024778:	89d4c483          	lbu	s1,-1891(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    8002477c:	00003597          	auipc	a1,0x3
    80024780:	5b458593          	addi	a1,a1,1460 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode ebreak cause to Breakpoint",
    80024784:	cc91                	beqz	s1,800247a0 <ebreak_tests_2+0xee>
    80024786:	6418                	ld	a4,8(s0)
    80024788:	478d                	li	a5,3
    TEST_END();
    8002478a:	00003597          	auipc	a1,0x3
    8002478e:	59658593          	addi	a1,a1,1430 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode ebreak cause to Breakpoint",
    80024792:	00f70763          	beq	a4,a5,800247a0 <ebreak_tests_2+0xee>
    80024796:	4481                	li	s1,0
    TEST_END();
    80024798:	00003597          	auipc	a1,0x3
    8002479c:	59858593          	addi	a1,a1,1432 # 80027d30 <__func__.0+0x2d0>
    800247a0:	00003517          	auipc	a0,0x3
    800247a4:	63850513          	addi	a0,a0,1592 # 80027dd8 <__func__.0+0x378>
    800247a8:	54e010ef          	jal	80025cf6 <printf>
    800247ac:	4511                	li	a0,4
    800247ae:	c48dc0ef          	jal	80000bf6 <goto_priv>
    800247b2:	cfbdc0ef          	jal	800014ac <reset_state>

}
    800247b6:	60e2                	ld	ra,24(sp)
    800247b8:	6442                	ld	s0,16(sp)
    800247ba:	8526                	mv	a0,s1
    800247bc:	64a2                	ld	s1,8(sp)
    800247be:	6105                	addi	sp,sp,32
    800247c0:	8082                	ret

00000000800247c2 <ebreak_tests_3>:

bool ebreak_tests_3() {
    800247c2:	1101                	addi	sp,sp,-32

    TEST_START();
    800247c4:	00003597          	auipc	a1,0x3
    800247c8:	27c58593          	addi	a1,a1,636 # 80027a40 <__func__.2>
    800247cc:	00003517          	auipc	a0,0x3
    800247d0:	57450513          	addi	a0,a0,1396 # 80027d40 <__func__.0+0x2e0>
bool ebreak_tests_3() {
    800247d4:	ec06                	sd	ra,24(sp)
    800247d6:	e822                	sd	s0,16(sp)
    800247d8:	e426                	sd	s1,8(sp)
    TEST_START();
    800247da:	51c010ef          	jal	80025cf6 <printf>
    800247de:	4529                	li	a0,10
    800247e0:	320000ef          	jal	80024b00 <putchar>

    //m模式下执行ebreak指令
    goto_priv(PRIV_HS);
    800247e4:	450d                	li	a0,3
    800247e6:	c10dc0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800247ea:	0330000f          	fence	rw,rw
    800247ee:	00025417          	auipc	s0,0x25
    800247f2:	82240413          	addi	s0,s0,-2014 # 80049010 <excpt>
    800247f6:	4785                	li	a5,1
    800247f8:	00025717          	auipc	a4,0x25
    800247fc:	84073823          	sd	zero,-1968(a4) # 80049048 <excpt+0x38>
    80024800:	00f41023          	sh	a5,0(s0)
    80024804:	0330000f          	fence	rw,rw
    80024808:	9002                	ebreak

    ebreak();

    TEST_ASSERT("hs mode ebreak cause to Breakpoint",
    8002480a:	08200593          	li	a1,130
    8002480e:	0000c617          	auipc	a2,0xc
    80024812:	bca60613          	addi	a2,a2,-1078 # 800303d8 <__func__.0+0x8978>
    80024816:	00003517          	auipc	a0,0x3
    8002481a:	54250513          	addi	a0,a0,1346 # 80027d58 <__func__.0+0x2f8>
    8002481e:	4d8010ef          	jal	80025cf6 <printf>
    80024822:	00024797          	auipc	a5,0x24
    80024826:	7ef7c783          	lbu	a5,2031(a5) # 80049011 <excpt+0x1>
    8002482a:	00003597          	auipc	a1,0x3
    8002482e:	50658593          	addi	a1,a1,1286 # 80027d30 <__func__.0+0x2d0>
    80024832:	cf89                	beqz	a5,8002484c <ebreak_tests_3+0x8a>
    80024834:	6418                	ld	a4,8(s0)
    80024836:	478d                	li	a5,3
    80024838:	00003597          	auipc	a1,0x3
    8002483c:	4e858593          	addi	a1,a1,1256 # 80027d20 <__func__.0+0x2c0>
    80024840:	00f70663          	beq	a4,a5,8002484c <ebreak_tests_3+0x8a>
    80024844:	00003597          	auipc	a1,0x3
    80024848:	4ec58593          	addi	a1,a1,1260 # 80027d30 <__func__.0+0x2d0>
    8002484c:	00003517          	auipc	a0,0x3
    80024850:	52450513          	addi	a0,a0,1316 # 80027d70 <__func__.0+0x310>
    80024854:	4a2010ef          	jal	80025cf6 <printf>
    80024858:	00024797          	auipc	a5,0x24
    8002485c:	7b97c783          	lbu	a5,1977(a5) # 80049011 <excpt+0x1>
    80024860:	c789                	beqz	a5,8002486a <ebreak_tests_3+0xa8>
    80024862:	6418                	ld	a4,8(s0)
    80024864:	478d                	li	a5,3
    80024866:	00f70c63          	beq	a4,a5,8002487e <ebreak_tests_3+0xbc>
    8002486a:	00003517          	auipc	a0,0x3
    8002486e:	50e50513          	addi	a0,a0,1294 # 80027d78 <__func__.0+0x318>
    80024872:	484010ef          	jal	80025cf6 <printf>
    80024876:	02900513          	li	a0,41
    8002487a:	286000ef          	jal	80024b00 <putchar>
    8002487e:	4529                	li	a0,10
    80024880:	280000ef          	jal	80024b00 <putchar>
    80024884:	00024497          	auipc	s1,0x24
    80024888:	78d4c483          	lbu	s1,1933(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    8002488c:	00003597          	auipc	a1,0x3
    80024890:	4a458593          	addi	a1,a1,1188 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode ebreak cause to Breakpoint",
    80024894:	cc91                	beqz	s1,800248b0 <ebreak_tests_3+0xee>
    80024896:	6418                	ld	a4,8(s0)
    80024898:	478d                	li	a5,3
    TEST_END();
    8002489a:	00003597          	auipc	a1,0x3
    8002489e:	48658593          	addi	a1,a1,1158 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode ebreak cause to Breakpoint",
    800248a2:	00f70763          	beq	a4,a5,800248b0 <ebreak_tests_3+0xee>
    800248a6:	4481                	li	s1,0
    TEST_END();
    800248a8:	00003597          	auipc	a1,0x3
    800248ac:	48858593          	addi	a1,a1,1160 # 80027d30 <__func__.0+0x2d0>
    800248b0:	00003517          	auipc	a0,0x3
    800248b4:	52850513          	addi	a0,a0,1320 # 80027dd8 <__func__.0+0x378>
    800248b8:	43e010ef          	jal	80025cf6 <printf>
    800248bc:	4511                	li	a0,4
    800248be:	b38dc0ef          	jal	80000bf6 <goto_priv>
    800248c2:	bebdc0ef          	jal	800014ac <reset_state>

}
    800248c6:	60e2                	ld	ra,24(sp)
    800248c8:	6442                	ld	s0,16(sp)
    800248ca:	8526                	mv	a0,s1
    800248cc:	64a2                	ld	s1,8(sp)
    800248ce:	6105                	addi	sp,sp,32
    800248d0:	8082                	ret

00000000800248d2 <ebreak_tests_4>:

bool ebreak_tests_4() {
    800248d2:	1101                	addi	sp,sp,-32

    TEST_START();
    800248d4:	00003597          	auipc	a1,0x3
    800248d8:	17c58593          	addi	a1,a1,380 # 80027a50 <__func__.1>
    800248dc:	00003517          	auipc	a0,0x3
    800248e0:	46450513          	addi	a0,a0,1124 # 80027d40 <__func__.0+0x2e0>
bool ebreak_tests_4() {
    800248e4:	ec06                	sd	ra,24(sp)
    800248e6:	e822                	sd	s0,16(sp)
    800248e8:	e426                	sd	s1,8(sp)
    TEST_START();
    800248ea:	40c010ef          	jal	80025cf6 <printf>
    800248ee:	4529                	li	a0,10
    800248f0:	210000ef          	jal	80024b00 <putchar>

    //m模式下执行ebreak指令
    goto_priv(PRIV_HU);
    800248f4:	4505                	li	a0,1
    800248f6:	b00dc0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800248fa:	0330000f          	fence	rw,rw
    800248fe:	00024417          	auipc	s0,0x24
    80024902:	71240413          	addi	s0,s0,1810 # 80049010 <excpt>
    80024906:	4785                	li	a5,1
    80024908:	00024717          	auipc	a4,0x24
    8002490c:	74073023          	sd	zero,1856(a4) # 80049048 <excpt+0x38>
    80024910:	00f41023          	sh	a5,0(s0)
    80024914:	0330000f          	fence	rw,rw
    80024918:	9002                	ebreak

    ebreak();

    TEST_ASSERT("hu mode ebreak cause to Breakpoint",
    8002491a:	08200593          	li	a1,130
    8002491e:	0000c617          	auipc	a2,0xc
    80024922:	ae260613          	addi	a2,a2,-1310 # 80030400 <__func__.0+0x89a0>
    80024926:	00003517          	auipc	a0,0x3
    8002492a:	43250513          	addi	a0,a0,1074 # 80027d58 <__func__.0+0x2f8>
    8002492e:	3c8010ef          	jal	80025cf6 <printf>
    80024932:	00024797          	auipc	a5,0x24
    80024936:	6df7c783          	lbu	a5,1759(a5) # 80049011 <excpt+0x1>
    8002493a:	00003597          	auipc	a1,0x3
    8002493e:	3f658593          	addi	a1,a1,1014 # 80027d30 <__func__.0+0x2d0>
    80024942:	cf89                	beqz	a5,8002495c <ebreak_tests_4+0x8a>
    80024944:	6418                	ld	a4,8(s0)
    80024946:	478d                	li	a5,3
    80024948:	00003597          	auipc	a1,0x3
    8002494c:	3d858593          	addi	a1,a1,984 # 80027d20 <__func__.0+0x2c0>
    80024950:	00f70663          	beq	a4,a5,8002495c <ebreak_tests_4+0x8a>
    80024954:	00003597          	auipc	a1,0x3
    80024958:	3dc58593          	addi	a1,a1,988 # 80027d30 <__func__.0+0x2d0>
    8002495c:	00003517          	auipc	a0,0x3
    80024960:	41450513          	addi	a0,a0,1044 # 80027d70 <__func__.0+0x310>
    80024964:	392010ef          	jal	80025cf6 <printf>
    80024968:	00024797          	auipc	a5,0x24
    8002496c:	6a97c783          	lbu	a5,1705(a5) # 80049011 <excpt+0x1>
    80024970:	c789                	beqz	a5,8002497a <ebreak_tests_4+0xa8>
    80024972:	6418                	ld	a4,8(s0)
    80024974:	478d                	li	a5,3
    80024976:	00f70c63          	beq	a4,a5,8002498e <ebreak_tests_4+0xbc>
    8002497a:	00003517          	auipc	a0,0x3
    8002497e:	3fe50513          	addi	a0,a0,1022 # 80027d78 <__func__.0+0x318>
    80024982:	374010ef          	jal	80025cf6 <printf>
    80024986:	02900513          	li	a0,41
    8002498a:	176000ef          	jal	80024b00 <putchar>
    8002498e:	4529                	li	a0,10
    80024990:	170000ef          	jal	80024b00 <putchar>
    80024994:	00024497          	auipc	s1,0x24
    80024998:	67d4c483          	lbu	s1,1661(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    8002499c:	00003597          	auipc	a1,0x3
    800249a0:	39458593          	addi	a1,a1,916 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("hu mode ebreak cause to Breakpoint",
    800249a4:	cc91                	beqz	s1,800249c0 <ebreak_tests_4+0xee>
    800249a6:	6418                	ld	a4,8(s0)
    800249a8:	478d                	li	a5,3
    TEST_END();
    800249aa:	00003597          	auipc	a1,0x3
    800249ae:	37658593          	addi	a1,a1,886 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("hu mode ebreak cause to Breakpoint",
    800249b2:	00f70763          	beq	a4,a5,800249c0 <ebreak_tests_4+0xee>
    800249b6:	4481                	li	s1,0
    TEST_END();
    800249b8:	00003597          	auipc	a1,0x3
    800249bc:	37858593          	addi	a1,a1,888 # 80027d30 <__func__.0+0x2d0>
    800249c0:	00003517          	auipc	a0,0x3
    800249c4:	41850513          	addi	a0,a0,1048 # 80027dd8 <__func__.0+0x378>
    800249c8:	32e010ef          	jal	80025cf6 <printf>
    800249cc:	4511                	li	a0,4
    800249ce:	a28dc0ef          	jal	80000bf6 <goto_priv>
    800249d2:	adbdc0ef          	jal	800014ac <reset_state>

}
    800249d6:	60e2                	ld	ra,24(sp)
    800249d8:	6442                	ld	s0,16(sp)
    800249da:	8526                	mv	a0,s1
    800249dc:	64a2                	ld	s1,8(sp)
    800249de:	6105                	addi	sp,sp,32
    800249e0:	8082                	ret

00000000800249e2 <ebreak_tests_5>:

bool ebreak_tests_5() {
    800249e2:	1101                	addi	sp,sp,-32

    TEST_START();
    800249e4:	00003597          	auipc	a1,0x3
    800249e8:	07c58593          	addi	a1,a1,124 # 80027a60 <__func__.0>
    800249ec:	00003517          	auipc	a0,0x3
    800249f0:	35450513          	addi	a0,a0,852 # 80027d40 <__func__.0+0x2e0>
bool ebreak_tests_5() {
    800249f4:	ec06                	sd	ra,24(sp)
    800249f6:	e822                	sd	s0,16(sp)
    800249f8:	e426                	sd	s1,8(sp)
    TEST_START();
    800249fa:	2fc010ef          	jal	80025cf6 <printf>
    800249fe:	4529                	li	a0,10
    80024a00:	100000ef          	jal	80024b00 <putchar>

    //m模式下执行ebreak指令
    goto_priv(PRIV_VU);
    80024a04:	4501                	li	a0,0
    80024a06:	9f0dc0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80024a0a:	0330000f          	fence	rw,rw
    80024a0e:	00024417          	auipc	s0,0x24
    80024a12:	60240413          	addi	s0,s0,1538 # 80049010 <excpt>
    80024a16:	4785                	li	a5,1
    80024a18:	00024717          	auipc	a4,0x24
    80024a1c:	62073823          	sd	zero,1584(a4) # 80049048 <excpt+0x38>
    80024a20:	00f41023          	sh	a5,0(s0)
    80024a24:	0330000f          	fence	rw,rw
    80024a28:	9002                	ebreak

    ebreak();

    TEST_ASSERT("vu mode ebreak cause to Breakpoint",
    80024a2a:	08200593          	li	a1,130
    80024a2e:	0000c617          	auipc	a2,0xc
    80024a32:	9fa60613          	addi	a2,a2,-1542 # 80030428 <__func__.0+0x89c8>
    80024a36:	00003517          	auipc	a0,0x3
    80024a3a:	32250513          	addi	a0,a0,802 # 80027d58 <__func__.0+0x2f8>
    80024a3e:	2b8010ef          	jal	80025cf6 <printf>
    80024a42:	00024797          	auipc	a5,0x24
    80024a46:	5cf7c783          	lbu	a5,1487(a5) # 80049011 <excpt+0x1>
    80024a4a:	00003597          	auipc	a1,0x3
    80024a4e:	2e658593          	addi	a1,a1,742 # 80027d30 <__func__.0+0x2d0>
    80024a52:	cf89                	beqz	a5,80024a6c <ebreak_tests_5+0x8a>
    80024a54:	6418                	ld	a4,8(s0)
    80024a56:	478d                	li	a5,3
    80024a58:	00003597          	auipc	a1,0x3
    80024a5c:	2c858593          	addi	a1,a1,712 # 80027d20 <__func__.0+0x2c0>
    80024a60:	00f70663          	beq	a4,a5,80024a6c <ebreak_tests_5+0x8a>
    80024a64:	00003597          	auipc	a1,0x3
    80024a68:	2cc58593          	addi	a1,a1,716 # 80027d30 <__func__.0+0x2d0>
    80024a6c:	00003517          	auipc	a0,0x3
    80024a70:	30450513          	addi	a0,a0,772 # 80027d70 <__func__.0+0x310>
    80024a74:	282010ef          	jal	80025cf6 <printf>
    80024a78:	00024797          	auipc	a5,0x24
    80024a7c:	5997c783          	lbu	a5,1433(a5) # 80049011 <excpt+0x1>
    80024a80:	c789                	beqz	a5,80024a8a <ebreak_tests_5+0xa8>
    80024a82:	6418                	ld	a4,8(s0)
    80024a84:	478d                	li	a5,3
    80024a86:	00f70c63          	beq	a4,a5,80024a9e <ebreak_tests_5+0xbc>
    80024a8a:	00003517          	auipc	a0,0x3
    80024a8e:	2ee50513          	addi	a0,a0,750 # 80027d78 <__func__.0+0x318>
    80024a92:	264010ef          	jal	80025cf6 <printf>
    80024a96:	02900513          	li	a0,41
    80024a9a:	066000ef          	jal	80024b00 <putchar>
    80024a9e:	4529                	li	a0,10
    80024aa0:	060000ef          	jal	80024b00 <putchar>
    80024aa4:	00024497          	auipc	s1,0x24
    80024aa8:	56d4c483          	lbu	s1,1389(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    80024aac:	00003597          	auipc	a1,0x3
    80024ab0:	28458593          	addi	a1,a1,644 # 80027d30 <__func__.0+0x2d0>
    TEST_ASSERT("vu mode ebreak cause to Breakpoint",
    80024ab4:	cc91                	beqz	s1,80024ad0 <ebreak_tests_5+0xee>
    80024ab6:	6418                	ld	a4,8(s0)
    80024ab8:	478d                	li	a5,3
    TEST_END();
    80024aba:	00003597          	auipc	a1,0x3
    80024abe:	26658593          	addi	a1,a1,614 # 80027d20 <__func__.0+0x2c0>
    TEST_ASSERT("vu mode ebreak cause to Breakpoint",
    80024ac2:	00f70763          	beq	a4,a5,80024ad0 <ebreak_tests_5+0xee>
    80024ac6:	4481                	li	s1,0
    TEST_END();
    80024ac8:	00003597          	auipc	a1,0x3
    80024acc:	26858593          	addi	a1,a1,616 # 80027d30 <__func__.0+0x2d0>
    80024ad0:	00003517          	auipc	a0,0x3
    80024ad4:	30850513          	addi	a0,a0,776 # 80027dd8 <__func__.0+0x378>
    80024ad8:	21e010ef          	jal	80025cf6 <printf>
    80024adc:	4511                	li	a0,4
    80024ade:	918dc0ef          	jal	80000bf6 <goto_priv>
    80024ae2:	9cbdc0ef          	jal	800014ac <reset_state>

    80024ae6:	60e2                	ld	ra,24(sp)
    80024ae8:	6442                	ld	s0,16(sp)
    80024aea:	8526                	mv	a0,s1
    80024aec:	64a2                	ld	s1,8(sp)
    80024aee:	6105                	addi	sp,sp,32
    80024af0:	8082                	ret

0000000080024af2 <sprintf_putch.0>:
  va_start(ap, fmt);

  void sprintf_putch(int ch, void** data)
  {
    char** pstr = (char**)data;
    **pstr = ch;
    80024af2:	619c                	ld	a5,0(a1)
    80024af4:	00a78023          	sb	a0,0(a5)
    (*pstr)++;
    80024af8:	619c                	ld	a5,0(a1)
    80024afa:	0785                	addi	a5,a5,1
    80024afc:	e19c                	sd	a5,0(a1)
  }
    80024afe:	8082                	ret

0000000080024b00 <putchar>:
  buf[buflen++] = ch;
    80024b00:	00024797          	auipc	a5,0x24
    80024b04:	5d47a783          	lw	a5,1492(a5) # 800490d4 <buflen.2>
    80024b08:	00024697          	auipc	a3,0x24
    80024b0c:	57868693          	addi	a3,a3,1400 # 80049080 <buf.1>
{
    80024b10:	7159                	addi	sp,sp,-112
  buf[buflen++] = ch;
    80024b12:	00f68733          	add	a4,a3,a5
    80024b16:	2785                	addiw	a5,a5,1
    80024b18:	00a70023          	sb	a0,0(a4)
    80024b1c:	00024717          	auipc	a4,0x24
    80024b20:	5af72c23          	sw	a5,1464(a4) # 800490d4 <buflen.2>
{
    80024b24:	03f10713          	addi	a4,sp,63
  if (ch == '\n' || buflen == sizeof(buf))
    80024b28:	4629                	li	a2,10
{
    80024b2a:	fc077713          	andi	a4,a4,-64
  if (ch == '\n' || buflen == sizeof(buf))
    80024b2e:	00c50963          	beq	a0,a2,80024b40 <putchar+0x40>
    80024b32:	04000613          	li	a2,64
    80024b36:	00c78563          	beq	a5,a2,80024b40 <putchar+0x40>
}
    80024b3a:	4501                	li	a0,0
    80024b3c:	6165                	addi	sp,sp,112
    80024b3e:	8082                	ret
  magic_mem[0] = which;
    80024b40:	04000613          	li	a2,64
    80024b44:	e310                	sd	a2,0(a4)
  magic_mem[1] = arg0;
    80024b46:	4605                	li	a2,1
    80024b48:	e710                	sd	a2,8(a4)
  magic_mem[2] = arg1;
    80024b4a:	eb14                	sd	a3,16(a4)
  magic_mem[3] = arg2;
    80024b4c:	ef1c                	sd	a5,24(a4)
  __sync_synchronize();
    80024b4e:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    80024b52:	0000e697          	auipc	a3,0xe
    80024b56:	4ee68693          	addi	a3,a3,1262 # 80033040 <fromhost>
    80024b5a:	0000e797          	auipc	a5,0xe
    80024b5e:	4ae7b323          	sd	a4,1190(a5) # 80033000 <tohost>
  while (fromhost == 0)
    80024b62:	629c                	ld	a5,0(a3)
    80024b64:	dffd                	beqz	a5,80024b62 <putchar+0x62>
  fromhost = 0;
    80024b66:	0000e797          	auipc	a5,0xe
    80024b6a:	4c07bd23          	sd	zero,1242(a5) # 80033040 <fromhost>
  __sync_synchronize();
    80024b6e:	0330000f          	fence	rw,rw
  return magic_mem[0];
    80024b72:	631c                	ld	a5,0(a4)
}
    80024b74:	4501                	li	a0,0
    buflen = 0;
    80024b76:	00024797          	auipc	a5,0x24
    80024b7a:	5407af23          	sw	zero,1374(a5) # 800490d4 <buflen.2>
}
    80024b7e:	6165                	addi	sp,sp,112
    80024b80:	8082                	ret

0000000080024b82 <vprintfmt.constprop.0>:
static void vprintfmt(void (*putch)(int, void**), void **putdat, const char *fmt, va_list ap)
    80024b82:	716d                	addi	sp,sp,-272
    while ((ch = *(unsigned char *) fmt) != '%') {
    80024b84:	02500313          	li	t1,37
    switch (ch = *(unsigned char *) fmt++) {
    80024b88:	05500e93          	li	t4,85
    80024b8c:	00003e17          	auipc	t3,0x3
    80024b90:	ee4e0e13          	addi	t3,t3,-284 # 80027a70 <__func__.0+0x10>
    80024b94:	a809                	j	80024ba6 <vprintfmt.constprop.0+0x24>
      if (ch == '\0')
    80024b96:	c729                	beqz	a4,80024be0 <vprintfmt.constprop.0+0x5e>
    **pstr = ch;
    80024b98:	6118                	ld	a4,0(a0)
      fmt++;
    80024b9a:	0585                	addi	a1,a1,1
    **pstr = ch;
    80024b9c:	00f70023          	sb	a5,0(a4)
    (*pstr)++;
    80024ba0:	611c                	ld	a5,0(a0)
    80024ba2:	0785                	addi	a5,a5,1
    80024ba4:	e11c                	sd	a5,0(a0)
    while ((ch = *(unsigned char *) fmt) != '%') {
    80024ba6:	0005c783          	lbu	a5,0(a1)
    80024baa:	0007871b          	sext.w	a4,a5
    80024bae:	fe6794e3          	bne	a5,t1,80024b96 <vprintfmt.constprop.0+0x14>
    switch (ch = *(unsigned char *) fmt++) {
    80024bb2:	0015c803          	lbu	a6,1(a1)
    fmt++;
    80024bb6:	00158893          	addi	a7,a1,1
    precision = -1;
    80024bba:	577d                	li	a4,-1
    fmt++;
    80024bbc:	86c6                	mv	a3,a7
    width = -1;
    80024bbe:	8fba                	mv	t6,a4
    padc = ' ';
    80024bc0:	02000293          	li	t0,32
    lflag = 0;
    80024bc4:	4f01                	li	t5,0
    switch (ch = *(unsigned char *) fmt++) {
    80024bc6:	fdd8079b          	addiw	a5,a6,-35 # fffffdd <STACK_SIZE+0xfefffdd>
    80024bca:	0ff7f793          	zext.b	a5,a5
    80024bce:	00168593          	addi	a1,a3,1
    80024bd2:	02fee563          	bltu	t4,a5,80024bfc <vprintfmt.constprop.0+0x7a>
    80024bd6:	078a                	slli	a5,a5,0x2
    80024bd8:	97f2                	add	a5,a5,t3
    80024bda:	439c                	lw	a5,0(a5)
    80024bdc:	97f2                	add	a5,a5,t3
    80024bde:	8782                	jr	a5
}
    80024be0:	6151                	addi	sp,sp,272
    80024be2:	8082                	ret
      padc = '0';
    80024be4:	82c2                	mv	t0,a6
      goto reswitch;
    80024be6:	0016c803          	lbu	a6,1(a3)
    switch (ch = *(unsigned char *) fmt++) {
    80024bea:	86ae                	mv	a3,a1
    80024bec:	00168593          	addi	a1,a3,1
    80024bf0:	fdd8079b          	addiw	a5,a6,-35
    80024bf4:	0ff7f793          	zext.b	a5,a5
    80024bf8:	fcfeffe3          	bgeu	t4,a5,80024bd6 <vprintfmt.constprop.0+0x54>
    **pstr = ch;
    80024bfc:	611c                	ld	a5,0(a0)
    80024bfe:	02500713          	li	a4,37
      fmt = last_fmt;
    80024c02:	85c6                	mv	a1,a7
    **pstr = ch;
    80024c04:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    80024c08:	611c                	ld	a5,0(a0)
    80024c0a:	0785                	addi	a5,a5,1
    80024c0c:	e11c                	sd	a5,0(a0)
  }
    80024c0e:	bf61                	j	80024ba6 <vprintfmt.constprop.0+0x24>
    80024c10:	e622                	sd	s0,264(sp)
        precision = precision * 10 + ch - '0';
    80024c12:	fd08071b          	addiw	a4,a6,-48
        ch = *fmt;
    80024c16:	0016c803          	lbu	a6,1(a3)
        if (ch < '0' || ch > '9')
    80024c1a:	4425                	li	s0,9
    switch (ch = *(unsigned char *) fmt++) {
    80024c1c:	86ae                	mv	a3,a1
        if (ch < '0' || ch > '9')
    80024c1e:	fd08079b          	addiw	a5,a6,-48
        ch = *fmt;
    80024c22:	0008039b          	sext.w	t2,a6
        if (ch < '0' || ch > '9')
    80024c26:	02f46463          	bltu	s0,a5,80024c4e <vprintfmt.constprop.0+0xcc>
        precision = precision * 10 + ch - '0';
    80024c2a:	0027179b          	slliw	a5,a4,0x2
        ch = *fmt;
    80024c2e:	0016c803          	lbu	a6,1(a3)
        precision = precision * 10 + ch - '0';
    80024c32:	9fb9                	addw	a5,a5,a4
    80024c34:	0017979b          	slliw	a5,a5,0x1
    80024c38:	007787bb          	addw	a5,a5,t2
        if (ch < '0' || ch > '9')
    80024c3c:	fd08059b          	addiw	a1,a6,-48
      for (precision = 0; ; ++fmt) {
    80024c40:	0685                	addi	a3,a3,1
        precision = precision * 10 + ch - '0';
    80024c42:	fd07871b          	addiw	a4,a5,-48
        ch = *fmt;
    80024c46:	0008039b          	sext.w	t2,a6
        if (ch < '0' || ch > '9')
    80024c4a:	feb470e3          	bgeu	s0,a1,80024c2a <vprintfmt.constprop.0+0xa8>
    switch (ch = *(unsigned char *) fmt++) {
    80024c4e:	6432                	ld	s0,264(sp)
      if (width < 0)
    80024c50:	f60fdbe3          	bgez	t6,80024bc6 <vprintfmt.constprop.0+0x44>
        width = precision, precision = -1;
    80024c54:	8fba                	mv	t6,a4
    80024c56:	577d                	li	a4,-1
    80024c58:	b7bd                	j	80024bc6 <vprintfmt.constprop.0+0x44>
        ch = *fmt;
    80024c5a:	0016c803          	lbu	a6,1(a3)
    switch (ch = *(unsigned char *) fmt++) {
    80024c5e:	86ae                	mv	a3,a1
      goto reswitch;
    80024c60:	b79d                	j	80024bc6 <vprintfmt.constprop.0+0x44>
    **pstr = ch;
    80024c62:	611c                	ld	a5,0(a0)
    80024c64:	02500713          	li	a4,37
    80024c68:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    80024c6c:	611c                	ld	a5,0(a0)
    80024c6e:	0785                	addi	a5,a5,1
    80024c70:	e11c                	sd	a5,0(a0)
  }
    80024c72:	bf15                	j	80024ba6 <vprintfmt.constprop.0+0x24>
        ch = *fmt;
    80024c74:	0016c803          	lbu	a6,1(a3)
      precision = va_arg(ap, int);
    80024c78:	4218                	lw	a4,0(a2)
    switch (ch = *(unsigned char *) fmt++) {
    80024c7a:	86ae                	mv	a3,a1
      precision = va_arg(ap, int);
    80024c7c:	0621                	addi	a2,a2,8
      goto process_precision;
    80024c7e:	bfc9                	j	80024c50 <vprintfmt.constprop.0+0xce>
    **pstr = ch;
    80024c80:	611c                	ld	a5,0(a0)
    80024c82:	03000693          	li	a3,48
    80024c86:	07800713          	li	a4,120
    80024c8a:	00d78023          	sb	a3,0(a5)
    (*pstr)++;
    80024c8e:	611c                	ld	a5,0(a0)
    80024c90:	4841                	li	a6,16
    80024c92:	00860693          	addi	a3,a2,8
    80024c96:	00178893          	addi	a7,a5,1
    80024c9a:	01153023          	sd	a7,0(a0)
    **pstr = ch;
    80024c9e:	00e780a3          	sb	a4,1(a5)
    (*pstr)++;
    80024ca2:	611c                	ld	a5,0(a0)
    80024ca4:	0785                	addi	a5,a5,1
    80024ca6:	e11c                	sd	a5,0(a0)
    return va_arg(*ap, unsigned long);
    80024ca8:	6218                	ld	a4,0(a2)
    80024caa:	8636                	mv	a2,a3
    digs[pos++] = num % base;
    80024cac:	03077f33          	remu	t5,a4,a6
    80024cb0:	00410893          	addi	a7,sp,4
    80024cb4:	4685                	li	a3,1
    80024cb6:	c07a                	sw	t5,0(sp)
    if (num < base)
    80024cb8:	1b076c63          	bltu	a4,a6,80024e70 <vprintfmt.constprop.0+0x2ee>
    num /= base;
    80024cbc:	03075733          	divu	a4,a4,a6
    digs[pos++] = num % base;
    80024cc0:	83b6                	mv	t2,a3
    if (num < base)
    80024cc2:	0891                	addi	a7,a7,4 # 1004 <_test_table_size+0x1003>
    digs[pos++] = num % base;
    80024cc4:	2685                	addiw	a3,a3,1
    80024cc6:	03077f33          	remu	t5,a4,a6
    80024cca:	ffe8ae23          	sw	t5,-4(a7)
    if (num < base)
    80024cce:	ff0777e3          	bgeu	a4,a6,80024cbc <vprintfmt.constprop.0+0x13a>
  while (width-- > pos)
    80024cd2:	ffff871b          	addiw	a4,t6,-1
    80024cd6:	fff6881b          	addiw	a6,a3,-1
    80024cda:	01f6da63          	bge	a3,t6,80024cee <vprintfmt.constprop.0+0x16c>
    **pstr = ch;
    80024cde:	00578023          	sb	t0,0(a5)
    (*pstr)++;
    80024ce2:	611c                	ld	a5,0(a0)
  while (width-- > pos)
    80024ce4:	377d                	addiw	a4,a4,-1
    (*pstr)++;
    80024ce6:	0785                	addi	a5,a5,1
    80024ce8:	e11c                	sd	a5,0(a0)
  while (width-- > pos)
    80024cea:	fee81ae3          	bne	a6,a4,80024cde <vprintfmt.constprop.0+0x15c>
  while (pos-- > 0)
    80024cee:	038a                	slli	t2,t2,0x2
    80024cf0:	007106b3          	add	a3,sp,t2
    80024cf4:	ffc10893          	addi	a7,sp,-4
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    80024cf8:	4825                	li	a6,9
    80024cfa:	a819                	j	80024d10 <vprintfmt.constprop.0+0x18e>
    80024cfc:	0577071b          	addiw	a4,a4,87
    **pstr = ch;
    80024d00:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    80024d04:	611c                	ld	a5,0(a0)
  while (pos-- > 0)
    80024d06:	16f1                	addi	a3,a3,-4
    (*pstr)++;
    80024d08:	0785                	addi	a5,a5,1
    80024d0a:	e11c                	sd	a5,0(a0)
  while (pos-- > 0)
    80024d0c:	e8d88de3          	beq	a7,a3,80024ba6 <vprintfmt.constprop.0+0x24>
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    80024d10:	4298                	lw	a4,0(a3)
    80024d12:	fee865e3          	bltu	a6,a4,80024cfc <vprintfmt.constprop.0+0x17a>
    80024d16:	0307071b          	addiw	a4,a4,48
    80024d1a:	b7dd                	j	80024d00 <vprintfmt.constprop.0+0x17e>
  if (lflag >= 2)
    80024d1c:	4785                	li	a5,1
      precision = va_arg(ap, int);
    80024d1e:	00860693          	addi	a3,a2,8
  if (lflag >= 2)
    80024d22:	01e7c463          	blt	a5,t5,80024d2a <vprintfmt.constprop.0+0x1a8>
  else if (lflag)
    80024d26:	140f0763          	beqz	t5,80024e74 <vprintfmt.constprop.0+0x2f2>
    return va_arg(*ap, long);
    80024d2a:	6218                	ld	a4,0(a2)
    **pstr = ch;
    80024d2c:	611c                	ld	a5,0(a0)
      if ((long long) num < 0) {
    80024d2e:	14074963          	bltz	a4,80024e80 <vprintfmt.constprop.0+0x2fe>
      num = getint(&ap, lflag);
    80024d32:	8636                	mv	a2,a3
    80024d34:	4829                	li	a6,10
    80024d36:	bf9d                	j	80024cac <vprintfmt.constprop.0+0x12a>
        ch = *fmt;
    80024d38:	0016c803          	lbu	a6,1(a3)
      lflag++;
    80024d3c:	2f05                	addiw	t5,t5,1
    switch (ch = *(unsigned char *) fmt++) {
    80024d3e:	86ae                	mv	a3,a1
      goto reswitch;
    80024d40:	b559                	j	80024bc6 <vprintfmt.constprop.0+0x44>
    switch (ch = *(unsigned char *) fmt++) {
    80024d42:	4841                	li	a6,16
  if (lflag >= 2)
    80024d44:	4705                	li	a4,1
    **pstr = ch;
    80024d46:	611c                	ld	a5,0(a0)
      precision = va_arg(ap, int);
    80024d48:	00860693          	addi	a3,a2,8
  if (lflag >= 2)
    80024d4c:	f5e74ee3          	blt	a4,t5,80024ca8 <vprintfmt.constprop.0+0x126>
  else if (lflag)
    80024d50:	f40f1ce3          	bnez	t5,80024ca8 <vprintfmt.constprop.0+0x126>
    return va_arg(*ap, unsigned int);
    80024d54:	00066703          	lwu	a4,0(a2)
    80024d58:	8636                	mv	a2,a3
    80024d5a:	bf89                	j	80024cac <vprintfmt.constprop.0+0x12a>
      if ((p = va_arg(ap, char *)) == NULL)
    80024d5c:	6214                	ld	a3,0(a2)
    80024d5e:	ca99                	beqz	a3,80024d74 <vprintfmt.constprop.0+0x1f2>
      if (width > 0 && padc != '-')
    80024d60:	07f05663          	blez	t6,80024dcc <vprintfmt.constprop.0+0x24a>
    80024d64:	02d00793          	li	a5,45
    80024d68:	02f29863          	bne	t0,a5,80024d98 <vprintfmt.constprop.0+0x216>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80024d6c:	0006c783          	lbu	a5,0(a3)
    80024d70:	e3ad                	bnez	a5,80024dd2 <vprintfmt.constprop.0+0x250>
    80024d72:	a879                	j	80024e10 <vprintfmt.constprop.0+0x28e>
        p = "(null)";
    80024d74:	0000b697          	auipc	a3,0xb
    80024d78:	6dc68693          	addi	a3,a3,1756 # 80030450 <__func__.0+0x89f0>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80024d7c:	02800793          	li	a5,40
      if (width > 0 && padc != '-')
    80024d80:	05f05963          	blez	t6,80024dd2 <vprintfmt.constprop.0+0x250>
    80024d84:	02d00813          	li	a6,45
        p = "(null)";
    80024d88:	0000b697          	auipc	a3,0xb
    80024d8c:	6c868693          	addi	a3,a3,1736 # 80030450 <__func__.0+0x89f0>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80024d90:	02800793          	li	a5,40
      if (width > 0 && padc != '-')
    80024d94:	03028f63          	beq	t0,a6,80024dd2 <vprintfmt.constprop.0+0x250>
  const char *p = s;
    80024d98:	87b6                	mv	a5,a3
  while (n-- && *p)
    80024d9a:	00e688b3          	add	a7,a3,a4
    80024d9e:	e709                	bnez	a4,80024da8 <vprintfmt.constprop.0+0x226>
    80024da0:	a829                	j	80024dba <vprintfmt.constprop.0+0x238>
    p++;
    80024da2:	0785                	addi	a5,a5,1
  while (n-- && *p)
    80024da4:	01178663          	beq	a5,a7,80024db0 <vprintfmt.constprop.0+0x22e>
    80024da8:	0007c803          	lbu	a6,0(a5)
    80024dac:	fe081be3          	bnez	a6,80024da2 <vprintfmt.constprop.0+0x220>
  return p - s;
    80024db0:	8f95                	sub	a5,a5,a3
        for (width -= strnlen(p, precision); width > 0; width--)
    80024db2:	40ff8fbb          	subw	t6,t6,a5
    80024db6:	01f05b63          	blez	t6,80024dcc <vprintfmt.constprop.0+0x24a>
    **pstr = ch;
    80024dba:	611c                	ld	a5,0(a0)
    80024dbc:	00578023          	sb	t0,0(a5)
    (*pstr)++;
    80024dc0:	611c                	ld	a5,0(a0)
        for (width -= strnlen(p, precision); width > 0; width--)
    80024dc2:	3ffd                	addiw	t6,t6,-1
    (*pstr)++;
    80024dc4:	0785                	addi	a5,a5,1
    80024dc6:	e11c                	sd	a5,0(a0)
        for (width -= strnlen(p, precision); width > 0; width--)
    80024dc8:	fe0f9ae3          	bnez	t6,80024dbc <vprintfmt.constprop.0+0x23a>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80024dcc:	0006c783          	lbu	a5,0(a3)
    80024dd0:	cbb9                	beqz	a5,80024e26 <vprintfmt.constprop.0+0x2a4>
    80024dd2:	58fd                	li	a7,-1
    80024dd4:	04075b63          	bgez	a4,80024e2a <vprintfmt.constprop.0+0x2a8>
    **pstr = ch;
    80024dd8:	6118                	ld	a4,0(a0)
        p++;
    80024dda:	00168813          	addi	a6,a3,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80024dde:	3ffd                	addiw	t6,t6,-1
    **pstr = ch;
    80024de0:	00f70023          	sb	a5,0(a4)
    (*pstr)++;
    80024de4:	611c                	ld	a5,0(a0)
    80024de6:	8742                	mv	a4,a6
    80024de8:	0785                	addi	a5,a5,1
    80024dea:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80024dec:	0016c683          	lbu	a3,1(a3)
    80024df0:	ce91                	beqz	a3,80024e0c <vprintfmt.constprop.0+0x28a>
    **pstr = ch;
    80024df2:	00d78023          	sb	a3,0(a5)
    (*pstr)++;
    80024df6:	611c                	ld	a5,0(a0)
        p++;
    80024df8:	0705                	addi	a4,a4,1
    (*pstr)++;
    80024dfa:	0785                	addi	a5,a5,1
    80024dfc:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80024dfe:	00074683          	lbu	a3,0(a4)
    80024e02:	fae5                	bnez	a3,80024df2 <vprintfmt.constprop.0+0x270>
    80024e04:	40e8083b          	subw	a6,a6,a4
    80024e08:	01f80fbb          	addw	t6,a6,t6
      for (; width > 0; width--)
    80024e0c:	01f05d63          	blez	t6,80024e26 <vprintfmt.constprop.0+0x2a4>
    **pstr = ch;
    80024e10:	611c                	ld	a5,0(a0)
    80024e12:	02000713          	li	a4,32
    80024e16:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    80024e1a:	611c                	ld	a5,0(a0)
      for (; width > 0; width--)
    80024e1c:	3ffd                	addiw	t6,t6,-1
    (*pstr)++;
    80024e1e:	0785                	addi	a5,a5,1
    80024e20:	e11c                	sd	a5,0(a0)
      for (; width > 0; width--)
    80024e22:	fe0f9ae3          	bnez	t6,80024e16 <vprintfmt.constprop.0+0x294>
      if ((p = va_arg(ap, char *)) == NULL)
    80024e26:	0621                	addi	a2,a2,8
    while ((ch = *(unsigned char *) fmt) != '%') {
    80024e28:	bbbd                	j	80024ba6 <vprintfmt.constprop.0+0x24>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80024e2a:	377d                	addiw	a4,a4,-1
    80024e2c:	ff1700e3          	beq	a4,a7,80024e0c <vprintfmt.constprop.0+0x28a>
    **pstr = ch;
    80024e30:	00053803          	ld	a6,0(a0)
        p++;
    80024e34:	0685                	addi	a3,a3,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80024e36:	3ffd                	addiw	t6,t6,-1
    **pstr = ch;
    80024e38:	00f80023          	sb	a5,0(a6)
    (*pstr)++;
    80024e3c:	611c                	ld	a5,0(a0)
    80024e3e:	0785                	addi	a5,a5,1
    80024e40:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80024e42:	0006c783          	lbu	a5,0(a3)
    80024e46:	f3f5                	bnez	a5,80024e2a <vprintfmt.constprop.0+0x2a8>
    80024e48:	b7d1                	j	80024e0c <vprintfmt.constprop.0+0x28a>
      if (width < 0)
    80024e4a:	87fe                	mv	a5,t6
    80024e4c:	000fd363          	bgez	t6,80024e52 <vprintfmt.constprop.0+0x2d0>
    80024e50:	4781                	li	a5,0
        ch = *fmt;
    80024e52:	0016c803          	lbu	a6,1(a3)
      if (width < 0)
    80024e56:	00078f9b          	sext.w	t6,a5
    switch (ch = *(unsigned char *) fmt++) {
    80024e5a:	86ae                	mv	a3,a1
      goto reswitch;
    80024e5c:	b3ad                	j	80024bc6 <vprintfmt.constprop.0+0x44>
    **pstr = ch;
    80024e5e:	611c                	ld	a5,0(a0)
    80024e60:	4218                	lw	a4,0(a2)
      putch(va_arg(ap, int), putdat);
    80024e62:	0621                	addi	a2,a2,8
    **pstr = ch;
    80024e64:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    80024e68:	611c                	ld	a5,0(a0)
    80024e6a:	0785                	addi	a5,a5,1
    80024e6c:	e11c                	sd	a5,0(a0)
  }
    80024e6e:	bb25                	j	80024ba6 <vprintfmt.constprop.0+0x24>
    if (num < base)
    80024e70:	4381                	li	t2,0
    80024e72:	b585                	j	80024cd2 <vprintfmt.constprop.0+0x150>
    return va_arg(*ap, int);
    80024e74:	4218                	lw	a4,0(a2)
    80024e76:	bd5d                	j	80024d2c <vprintfmt.constprop.0+0x1aa>
    switch (ch = *(unsigned char *) fmt++) {
    80024e78:	4829                	li	a6,10
    80024e7a:	b5e9                	j	80024d44 <vprintfmt.constprop.0+0x1c2>
    80024e7c:	4821                	li	a6,8
    80024e7e:	b5d9                	j	80024d44 <vprintfmt.constprop.0+0x1c2>
    **pstr = ch;
    80024e80:	02d00613          	li	a2,45
    80024e84:	00c78023          	sb	a2,0(a5)
    (*pstr)++;
    80024e88:	611c                	ld	a5,0(a0)
        num = -(long long) num;
    80024e8a:	40e00733          	neg	a4,a4
    80024e8e:	8636                	mv	a2,a3
    (*pstr)++;
    80024e90:	0785                	addi	a5,a5,1
    80024e92:	e11c                	sd	a5,0(a0)
        num = -(long long) num;
    80024e94:	4829                	li	a6,10
    80024e96:	bd19                	j	80024cac <vprintfmt.constprop.0+0x12a>

0000000080024e98 <vprintfmt.constprop.1>:
static void vprintfmt(void (*putch)(int, void**), void **putdat, const char *fmt, va_list ap)
    80024e98:	b6010113          	addi	sp,sp,-1184
    80024e9c:	14f10713          	addi	a4,sp,335
    80024ea0:	fc077713          	andi	a4,a4,-64
    80024ea4:	45b13023          	sd	s11,1088(sp)
    80024ea8:	83ae                	mv	t2,a1
    80024eaa:	48813c23          	sd	s0,1176(sp)
    80024eae:	48913823          	sd	s1,1168(sp)
    80024eb2:	49213423          	sd	s2,1160(sp)
    80024eb6:	49313023          	sd	s3,1152(sp)
    80024eba:	47413c23          	sd	s4,1144(sp)
    80024ebe:	47513823          	sd	s5,1136(sp)
    80024ec2:	47613423          	sd	s6,1128(sp)
  tohost = (uintptr_t)magic_mem;
    80024ec6:	2c070f13          	addi	t5,a4,704
    while ((ch = *(unsigned char *) fmt) != '%') {
    80024eca:	02500593          	li	a1,37
  buf[buflen++] = ch;
    80024ece:	00024897          	auipc	a7,0x24
    80024ed2:	20688893          	addi	a7,a7,518 # 800490d4 <buflen.2>
    80024ed6:	00024697          	auipc	a3,0x24
    80024eda:	1aa68693          	addi	a3,a3,426 # 80049080 <buf.1>
  if (ch == '\n' || buflen == sizeof(buf))
    80024ede:	4829                	li	a6,10
  magic_mem[0] = which;
    80024ee0:	04000613          	li	a2,64
  magic_mem[1] = arg0;
    80024ee4:	4e85                	li	t4,1
  tohost = (uintptr_t)magic_mem;
    80024ee6:	0000ee17          	auipc	t3,0xe
    80024eea:	11ae0e13          	addi	t3,t3,282 # 80033000 <tohost>
    80024eee:	0000e797          	auipc	a5,0xe
    80024ef2:	15278793          	addi	a5,a5,338 # 80033040 <fromhost>
    switch (ch = *(unsigned char *) fmt++) {
    80024ef6:	00003d97          	auipc	s11,0x3
    80024efa:	cd2d8d93          	addi	s11,s11,-814 # 80027bc8 <__func__.0+0x168>
    while ((ch = *(unsigned char *) fmt) != '%') {
    80024efe:	00054f83          	lbu	t6,0(a0)
    80024f02:	000f841b          	sext.w	s0,t6
    80024f06:	06bf8563          	beq	t6,a1,80024f70 <vprintfmt.constprop.1+0xd8>
      if (ch == '\0')
    80024f0a:	cc49                	beqz	s0,80024fa4 <vprintfmt.constprop.1+0x10c>
  buf[buflen++] = ch;
    80024f0c:	00024317          	auipc	t1,0x24
    80024f10:	1c832303          	lw	t1,456(t1) # 800490d4 <buflen.2>
      fmt++;
    80024f14:	0505                	addi	a0,a0,1
  buf[buflen++] = ch;
    80024f16:	0013029b          	addiw	t0,t1,1
    80024f1a:	9336                	add	t1,t1,a3
    80024f1c:	0058a023          	sw	t0,0(a7)
    80024f20:	01f30023          	sb	t6,0(t1)
  if (ch == '\n' || buflen == sizeof(buf))
    80024f24:	01040463          	beq	s0,a6,80024f2c <vprintfmt.constprop.1+0x94>
    80024f28:	fcc29be3          	bne	t0,a2,80024efe <vprintfmt.constprop.1+0x66>
  magic_mem[0] = which;
    80024f2c:	2cc73023          	sd	a2,704(a4)
  magic_mem[1] = arg0;
    80024f30:	2dd73423          	sd	t4,712(a4)
  magic_mem[2] = arg1;
    80024f34:	2cd73823          	sd	a3,720(a4)
  magic_mem[3] = arg2;
    80024f38:	2c573c23          	sd	t0,728(a4)
  __sync_synchronize();
    80024f3c:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    80024f40:	01ee3023          	sd	t5,0(t3)
  while (fromhost == 0)
    80024f44:	0007b303          	ld	t1,0(a5)
    80024f48:	fe030ee3          	beqz	t1,80024f44 <vprintfmt.constprop.1+0xac>
  fromhost = 0;
    80024f4c:	0000e317          	auipc	t1,0xe
    80024f50:	0e033a23          	sd	zero,244(t1) # 80033040 <fromhost>
  __sync_synchronize();
    80024f54:	0330000f          	fence	rw,rw
  return magic_mem[0];
    80024f58:	2c073303          	ld	t1,704(a4)
    buflen = 0;
    80024f5c:	00024317          	auipc	t1,0x24
    80024f60:	16032c23          	sw	zero,376(t1) # 800490d4 <buflen.2>
    while ((ch = *(unsigned char *) fmt) != '%') {
    80024f64:	00054f83          	lbu	t6,0(a0)
    80024f68:	000f841b          	sext.w	s0,t6
    80024f6c:	f8bf9fe3          	bne	t6,a1,80024f0a <vprintfmt.constprop.1+0x72>
    switch (ch = *(unsigned char *) fmt++) {
    80024f70:	00154483          	lbu	s1,1(a0)
    fmt++;
    80024f74:	00150a13          	addi	s4,a0,1
    precision = -1;
    80024f78:	537d                	li	t1,-1
    fmt++;
    80024f7a:	8452                	mv	s0,s4
    width = -1;
    80024f7c:	8f9a                	mv	t6,t1
    padc = ' ';
    80024f7e:	02000a93          	li	s5,32
    lflag = 0;
    80024f82:	4901                	li	s2,0
    switch (ch = *(unsigned char *) fmt++) {
    80024f84:	05500993          	li	s3,85
    80024f88:	fdd4829b          	addiw	t0,s1,-35
    80024f8c:	0ff2f293          	zext.b	t0,t0
    80024f90:	00140513          	addi	a0,s0,1
    80024f94:	0459e763          	bltu	s3,t0,80024fe2 <vprintfmt.constprop.1+0x14a>
    80024f98:	028a                	slli	t0,t0,0x2
    80024f9a:	92ee                	add	t0,t0,s11
    80024f9c:	0002ab03          	lw	s6,0(t0)
    80024fa0:	9b6e                	add	s6,s6,s11
    80024fa2:	8b02                	jr	s6
}
    80024fa4:	49813403          	ld	s0,1176(sp)
    80024fa8:	49013483          	ld	s1,1168(sp)
    80024fac:	48813903          	ld	s2,1160(sp)
    80024fb0:	48013983          	ld	s3,1152(sp)
    80024fb4:	47813a03          	ld	s4,1144(sp)
    80024fb8:	47013a83          	ld	s5,1136(sp)
    80024fbc:	46813b03          	ld	s6,1128(sp)
    80024fc0:	44013d83          	ld	s11,1088(sp)
    80024fc4:	4a010113          	addi	sp,sp,1184
    80024fc8:	8082                	ret
      padc = '0';
    80024fca:	8aa6                	mv	s5,s1
      goto reswitch;
    80024fcc:	00144483          	lbu	s1,1(s0)
    switch (ch = *(unsigned char *) fmt++) {
    80024fd0:	842a                	mv	s0,a0
    80024fd2:	00140513          	addi	a0,s0,1
    80024fd6:	fdd4829b          	addiw	t0,s1,-35
    80024fda:	0ff2f293          	zext.b	t0,t0
    80024fde:	fa59fde3          	bgeu	s3,t0,80024f98 <vprintfmt.constprop.1+0x100>
  buf[buflen++] = ch;
    80024fe2:	00024317          	auipc	t1,0x24
    80024fe6:	0f232303          	lw	t1,242(t1) # 800490d4 <buflen.2>
    80024fea:	00024f97          	auipc	t6,0x24
    80024fee:	096f8f93          	addi	t6,t6,150 # 80049080 <buf.1>
    80024ff2:	02500293          	li	t0,37
    80024ff6:	0013051b          	addiw	a0,t1,1
    80024ffa:	937e                	add	t1,t1,t6
    80024ffc:	00530023          	sb	t0,0(t1)
    80025000:	00024417          	auipc	s0,0x24
    80025004:	0ca42a23          	sw	a0,212(s0) # 800490d4 <buflen.2>
  if (ch == '\n' || buflen == sizeof(buf))
    80025008:	04000313          	li	t1,64
    8002500c:	56650f63          	beq	a0,t1,8002558a <vprintfmt.constprop.1+0x6f2>
      fmt = last_fmt;
    80025010:	8552                	mv	a0,s4
    80025012:	b5f5                	j	80024efe <vprintfmt.constprop.1+0x66>
    80025014:	47713023          	sd	s7,1120(sp)
        precision = precision * 10 + ch - '0';
    80025018:	fd04831b          	addiw	t1,s1,-48
        ch = *fmt;
    8002501c:	00144483          	lbu	s1,1(s0)
        if (ch < '0' || ch > '9')
    80025020:	4ba5                	li	s7,9
    80025022:	fd04841b          	addiw	s0,s1,-48
        ch = *fmt;
    80025026:	0004829b          	sext.w	t0,s1
        if (ch < '0' || ch > '9')
    8002502a:	088befe3          	bltu	s7,s0,800258c8 <vprintfmt.constprop.1+0xa30>
    switch (ch = *(unsigned char *) fmt++) {
    8002502e:	842a                	mv	s0,a0
        precision = precision * 10 + ch - '0';
    80025030:	0023151b          	slliw	a0,t1,0x2
        ch = *fmt;
    80025034:	00144483          	lbu	s1,1(s0)
        precision = precision * 10 + ch - '0';
    80025038:	0065053b          	addw	a0,a0,t1
    8002503c:	0015151b          	slliw	a0,a0,0x1
    80025040:	0055053b          	addw	a0,a0,t0
        if (ch < '0' || ch > '9')
    80025044:	fd048b1b          	addiw	s6,s1,-48
      for (precision = 0; ; ++fmt) {
    80025048:	0405                	addi	s0,s0,1
        precision = precision * 10 + ch - '0';
    8002504a:	fd05031b          	addiw	t1,a0,-48
        ch = *fmt;
    8002504e:	0004829b          	sext.w	t0,s1
        if (ch < '0' || ch > '9')
    80025052:	fd6bffe3          	bgeu	s7,s6,80025030 <vprintfmt.constprop.1+0x198>
    switch (ch = *(unsigned char *) fmt++) {
    80025056:	46013b83          	ld	s7,1120(sp)
      if (width < 0)
    8002505a:	f20fd7e3          	bgez	t6,80024f88 <vprintfmt.constprop.1+0xf0>
        width = precision, precision = -1;
    8002505e:	8f9a                	mv	t6,t1
    80025060:	537d                	li	t1,-1
    80025062:	b71d                	j	80024f88 <vprintfmt.constprop.1+0xf0>
        ch = *fmt;
    80025064:	00144483          	lbu	s1,1(s0)
    switch (ch = *(unsigned char *) fmt++) {
    80025068:	842a                	mv	s0,a0
      goto reswitch;
    8002506a:	bf39                	j	80024f88 <vprintfmt.constprop.1+0xf0>
  buf[buflen++] = ch;
    8002506c:	00024f97          	auipc	t6,0x24
    80025070:	068faf83          	lw	t6,104(t6) # 800490d4 <buflen.2>
    80025074:	00024297          	auipc	t0,0x24
    80025078:	00c28293          	addi	t0,t0,12 # 80049080 <buf.1>
    8002507c:	02500413          	li	s0,37
    80025080:	001f831b          	addiw	t1,t6,1
    80025084:	9f96                	add	t6,t6,t0
    80025086:	008f8023          	sb	s0,0(t6)
    8002508a:	00024497          	auipc	s1,0x24
    8002508e:	0464a523          	sw	t1,74(s1) # 800490d4 <buflen.2>
  if (ch == '\n' || buflen == sizeof(buf))
    80025092:	04000f93          	li	t6,64
    80025096:	e7f314e3          	bne	t1,t6,80024efe <vprintfmt.constprop.1+0x66>
  magic_mem[0] = which;
    8002509a:	04673023          	sd	t1,64(a4)
  magic_mem[1] = arg0;
    8002509e:	4f85                	li	t6,1
    800250a0:	05f73423          	sd	t6,72(a4)
  magic_mem[2] = arg1;
    800250a4:	04573823          	sd	t0,80(a4)
  magic_mem[3] = arg2;
    800250a8:	04673c23          	sd	t1,88(a4)
  __sync_synchronize();
    800250ac:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    800250b0:	04070313          	addi	t1,a4,64
    800250b4:	0000ef97          	auipc	t6,0xe
    800250b8:	f46fb623          	sd	t1,-180(t6) # 80033000 <tohost>
  while (fromhost == 0)
    800250bc:	0000e317          	auipc	t1,0xe
    800250c0:	f8430313          	addi	t1,t1,-124 # 80033040 <fromhost>
    800250c4:	00033f83          	ld	t6,0(t1)
    800250c8:	fe0f8ee3          	beqz	t6,800250c4 <vprintfmt.constprop.1+0x22c>
  fromhost = 0;
    800250cc:	0000e317          	auipc	t1,0xe
    800250d0:	f6033a23          	sd	zero,-140(t1) # 80033040 <fromhost>
  __sync_synchronize();
    800250d4:	0330000f          	fence	rw,rw
    buflen = 0;
    800250d8:	00024317          	auipc	t1,0x24
    800250dc:	fe032e23          	sw	zero,-4(t1) # 800490d4 <buflen.2>
  return magic_mem[0];
    800250e0:	04073303          	ld	t1,64(a4)
    buflen = 0;
    800250e4:	bd29                	j	80024efe <vprintfmt.constprop.1+0x66>
        ch = *fmt;
    800250e6:	00144483          	lbu	s1,1(s0)
      precision = va_arg(ap, int);
    800250ea:	0003a303          	lw	t1,0(t2)
    switch (ch = *(unsigned char *) fmt++) {
    800250ee:	842a                	mv	s0,a0
      precision = va_arg(ap, int);
    800250f0:	03a1                	addi	t2,t2,8
      goto process_precision;
    800250f2:	b7a5                	j	8002505a <vprintfmt.constprop.1+0x1c2>
  buf[buflen++] = ch;
    800250f4:	00024317          	auipc	t1,0x24
    800250f8:	fe032303          	lw	t1,-32(t1) # 800490d4 <buflen.2>
    800250fc:	00024917          	auipc	s2,0x24
    80025100:	f8490913          	addi	s2,s2,-124 # 80049080 <buf.1>
    80025104:	47713023          	sd	s7,1120(sp)
    80025108:	45813c23          	sd	s8,1112(sp)
    8002510c:	45913823          	sd	s9,1104(sp)
    80025110:	45a13423          	sd	s10,1096(sp)
    80025114:	00690433          	add	s0,s2,t1
    80025118:	00024997          	auipc	s3,0x24
    8002511c:	fbc98993          	addi	s3,s3,-68 # 800490d4 <buflen.2>
    80025120:	0013029b          	addiw	t0,t1,1
    80025124:	03000493          	li	s1,48
    80025128:	00940023          	sb	s1,0(s0)
    8002512c:	0059a023          	sw	t0,0(s3)
  if (ch == '\n' || buflen == sizeof(buf))
    80025130:	04000413          	li	s0,64
    80025134:	62828d63          	beq	t0,s0,8002576e <vprintfmt.constprop.1+0x8d6>
  buf[buflen++] = ch;
    80025138:	2309                	addiw	t1,t1,2
    8002513a:	92ca                	add	t0,t0,s2
    8002513c:	07800493          	li	s1,120
    80025140:	0069a023          	sw	t1,0(s3)
    80025144:	00928023          	sb	s1,0(t0)
  if (ch == '\n' || buflen == sizeof(buf))
    80025148:	42831a63          	bne	t1,s0,8002557c <vprintfmt.constprop.1+0x6e4>
  magic_mem[0] = which;
    8002514c:	10673023          	sd	t1,256(a4)
  magic_mem[1] = arg0;
    80025150:	4285                	li	t0,1
    80025152:	10573423          	sd	t0,264(a4)
  magic_mem[2] = arg1;
    80025156:	11273823          	sd	s2,272(a4)
  magic_mem[3] = arg2;
    8002515a:	10673c23          	sd	t1,280(a4)
  __sync_synchronize();
    8002515e:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    80025162:	10070313          	addi	t1,a4,256
    80025166:	0000e297          	auipc	t0,0xe
    8002516a:	e862bd23          	sd	t1,-358(t0) # 80033000 <tohost>
  while (fromhost == 0)
    8002516e:	0000e317          	auipc	t1,0xe
    80025172:	ed230313          	addi	t1,t1,-302 # 80033040 <fromhost>
    80025176:	00033283          	ld	t0,0(t1)
    8002517a:	fe028ee3          	beqz	t0,80025176 <vprintfmt.constprop.1+0x2de>
  fromhost = 0;
    8002517e:	0000e317          	auipc	t1,0xe
    80025182:	ec033123          	sd	zero,-318(t1) # 80033040 <fromhost>
  __sync_synchronize();
    80025186:	0330000f          	fence	rw,rw
    buflen = 0;
    8002518a:	00024317          	auipc	t1,0x24
    8002518e:	f4032523          	sw	zero,-182(t1) # 800490d4 <buflen.2>
  return magic_mem[0];
    80025192:	10073303          	ld	t1,256(a4)
  else if (lflag)
    80025196:	00838493          	addi	s1,t2,8
    buflen = 0;
    8002519a:	4301                	li	t1,0
    8002519c:	4441                	li	s0,16
    8002519e:	a6d5                	j	80025582 <vprintfmt.constprop.1+0x6ea>
    800251a0:	47713023          	sd	s7,1120(sp)
    800251a4:	45813c23          	sd	s8,1112(sp)
    800251a8:	45913823          	sd	s9,1104(sp)
    800251ac:	45a13423          	sd	s10,1096(sp)
  if (lflag >= 2)
    800251b0:	4305                	li	t1,1
      precision = va_arg(ap, int);
    800251b2:	00838413          	addi	s0,t2,8
  if (lflag >= 2)
    800251b6:	01234463          	blt	t1,s2,800251be <vprintfmt.constprop.1+0x326>
  else if (lflag)
    800251ba:	3a090e63          	beqz	s2,80025576 <vprintfmt.constprop.1+0x6de>
    return va_arg(*ap, long);
    800251be:	0003b283          	ld	t0,0(t2)
  buf[buflen++] = ch;
    800251c2:	00024317          	auipc	t1,0x24
    800251c6:	f1232303          	lw	t1,-238(t1) # 800490d4 <buflen.2>
    800251ca:	00024997          	auipc	s3,0x24
    800251ce:	f0a98993          	addi	s3,s3,-246 # 800490d4 <buflen.2>
      if ((long long) num < 0) {
    800251d2:	5402cd63          	bltz	t0,8002572c <vprintfmt.constprop.1+0x894>
      num = getint(&ap, lflag);
    800251d6:	83a2                	mv	t2,s0
    800251d8:	00024917          	auipc	s2,0x24
    800251dc:	ea890913          	addi	s2,s2,-344 # 80049080 <buf.1>
    800251e0:	4429                	li	s0,10
    digs[pos++] = num % base;
    800251e2:	0282fb33          	remu	s6,t0,s0
    800251e6:	01410a13          	addi	s4,sp,20
    800251ea:	4485                	li	s1,1
    800251ec:	c85a                	sw	s6,16(sp)
    if (num < base)
    800251ee:	3682e263          	bltu	t0,s0,80025552 <vprintfmt.constprop.1+0x6ba>
    num /= base;
    800251f2:	0282d2b3          	divu	t0,t0,s0
    digs[pos++] = num % base;
    800251f6:	8ba6                	mv	s7,s1
    if (num < base)
    800251f8:	0a11                	addi	s4,s4,4 # 20004 <_test_table_size+0x20003>
    digs[pos++] = num % base;
    800251fa:	2485                	addiw	s1,s1,1
    800251fc:	0282fb33          	remu	s6,t0,s0
    80025200:	ff6a2e23          	sw	s6,-4(s4)
    if (num < base)
    80025204:	fe82f7e3          	bgeu	t0,s0,800251f2 <vprintfmt.constprop.1+0x35a>
  while (width-- > pos)
    80025208:	ffff829b          	addiw	t0,t6,-1
    8002520c:	fff48a1b          	addiw	s4,s1,-1
    80025210:	09f4d463          	bge	s1,t6,80025298 <vprintfmt.constprop.1+0x400>
  if (ch == '\n' || buflen == sizeof(buf))
    80025214:	04000413          	li	s0,64
  magic_mem[1] = arg0;
    80025218:	4c05                	li	s8,1
  tohost = (uintptr_t)magic_mem;
    8002521a:	0c070b13          	addi	s6,a4,192
    8002521e:	0000e497          	auipc	s1,0xe
    80025222:	de248493          	addi	s1,s1,-542 # 80033000 <tohost>
    80025226:	0000ef97          	auipc	t6,0xe
    8002522a:	e1af8f93          	addi	t6,t6,-486 # 80033040 <fromhost>
  buf[buflen++] = ch;
    8002522e:	4c89                	li	s9,2
    80025230:	00130d1b          	addiw	s10,t1,1
    80025234:	934a                	add	t1,t1,s2
    80025236:	01a9a023          	sw	s10,0(s3)
    8002523a:	01530023          	sb	s5,0(t1)
  if (ch == '\n' || buflen == sizeof(buf))
    8002523e:	2e8d1863          	bne	s10,s0,8002552e <vprintfmt.constprop.1+0x696>
  magic_mem[0] = which;
    80025242:	e360                	sd	s0,192(a4)
  magic_mem[1] = arg0;
    80025244:	0d873423          	sd	s8,200(a4)
  magic_mem[2] = arg1;
    80025248:	0d273823          	sd	s2,208(a4)
  magic_mem[3] = arg2;
    8002524c:	ef60                	sd	s0,216(a4)
  __sync_synchronize();
    8002524e:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    80025252:	0164b023          	sd	s6,0(s1)
  while (fromhost == 0)
    80025256:	000fb303          	ld	t1,0(t6)
    8002525a:	fe030ee3          	beqz	t1,80025256 <vprintfmt.constprop.1+0x3be>
  fromhost = 0;
    8002525e:	0000e317          	auipc	t1,0xe
    80025262:	de033123          	sd	zero,-542(t1) # 80033040 <fromhost>
  __sync_synchronize();
    80025266:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002526a:	0c073303          	ld	t1,192(a4)
    buflen = 0;
    8002526e:	00024317          	auipc	t1,0x24
    80025272:	e6032323          	sw	zero,-410(t1) # 800490d4 <buflen.2>
  while (width-- > pos)
    80025276:	fff2831b          	addiw	t1,t0,-1
    8002527a:	2b430c63          	beq	t1,s4,80025532 <vprintfmt.constprop.1+0x69a>
  buf[buflen++] = ch;
    8002527e:	01590023          	sb	s5,0(s2)
  while (width-- > pos)
    80025282:	32f9                	addiw	t0,t0,-2
    80025284:	2a5a0963          	beq	s4,t0,80025536 <vprintfmt.constprop.1+0x69e>
  buf[buflen++] = ch;
    80025288:	0199a023          	sw	s9,0(s3)
    8002528c:	015900a3          	sb	s5,1(s2)
    80025290:	4309                	li	t1,2
  while (width-- > pos)
    80025292:	32fd                	addiw	t0,t0,-1
    80025294:	f85a1ee3          	bne	s4,t0,80025230 <vprintfmt.constprop.1+0x398>
  while (pos-- > 0)
    80025298:	0b8a                	slli	s7,s7,0x2
    8002529a:	0800                	addi	s0,sp,16
    8002529c:	945e                	add	s0,s0,s7
    8002529e:	00c10a93          	addi	s5,sp,12
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    800252a2:	4a25                	li	s4,9
  magic_mem[0] = which;
    800252a4:	04000493          	li	s1,64
  magic_mem[1] = arg0;
    800252a8:	4c85                	li	s9,1
  tohost = (uintptr_t)magic_mem;
    800252aa:	08070c13          	addi	s8,a4,128
    800252ae:	0000eb97          	auipc	s7,0xe
    800252b2:	d52b8b93          	addi	s7,s7,-686 # 80033000 <tohost>
    800252b6:	0000e297          	auipc	t0,0xe
    800252ba:	d8a28293          	addi	t0,t0,-630 # 80033040 <fromhost>
  if (ch == '\n' || buflen == sizeof(buf))
    800252be:	4b29                	li	s6,10
    800252c0:	a831                	j	800252dc <vprintfmt.constprop.1+0x444>
  buf[buflen++] = ch;
    800252c2:	934a                	add	t1,t1,s2
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    800252c4:	030f8f9b          	addiw	t6,t6,48
  buf[buflen++] = ch;
    800252c8:	01f30023          	sb	t6,0(t1)
    800252cc:	01a9a023          	sw	s10,0(s3)
    800252d0:	836a                	mv	t1,s10
  if (ch == '\n' || buflen == sizeof(buf))
    800252d2:	029d0463          	beq	s10,s1,800252fa <vprintfmt.constprop.1+0x462>
  while (pos-- > 0)
    800252d6:	1471                	addi	s0,s0,-4
    800252d8:	068a8063          	beq	s5,s0,80025338 <vprintfmt.constprop.1+0x4a0>
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    800252dc:	00042f83          	lw	t6,0(s0)
  buf[buflen++] = ch;
    800252e0:	00130d1b          	addiw	s10,t1,1
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    800252e4:	fdfa7fe3          	bgeu	s4,t6,800252c2 <vprintfmt.constprop.1+0x42a>
    800252e8:	057f8f9b          	addiw	t6,t6,87
  buf[buflen++] = ch;
    800252ec:	934a                	add	t1,t1,s2
    800252ee:	01f30023          	sb	t6,0(t1)
    800252f2:	01a9a023          	sw	s10,0(s3)
  if (ch == '\n' || buflen == sizeof(buf))
    800252f6:	fd6f9de3          	bne	t6,s6,800252d0 <vprintfmt.constprop.1+0x438>
  magic_mem[0] = which;
    800252fa:	e344                	sd	s1,128(a4)
  magic_mem[1] = arg0;
    800252fc:	09973423          	sd	s9,136(a4)
  magic_mem[2] = arg1;
    80025300:	09273823          	sd	s2,144(a4)
  magic_mem[3] = arg2;
    80025304:	09a73c23          	sd	s10,152(a4)
  __sync_synchronize();
    80025308:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002530c:	018bb023          	sd	s8,0(s7)
  while (fromhost == 0)
    80025310:	0002b303          	ld	t1,0(t0)
    80025314:	fe030ee3          	beqz	t1,80025310 <vprintfmt.constprop.1+0x478>
  fromhost = 0;
    80025318:	0000e317          	auipc	t1,0xe
    8002531c:	d2033423          	sd	zero,-728(t1) # 80033040 <fromhost>
  __sync_synchronize();
    80025320:	0330000f          	fence	rw,rw
  return magic_mem[0];
    80025324:	08073303          	ld	t1,128(a4)
  while (pos-- > 0)
    80025328:	1471                	addi	s0,s0,-4
    buflen = 0;
    8002532a:	00024317          	auipc	t1,0x24
    8002532e:	da032523          	sw	zero,-598(t1) # 800490d4 <buflen.2>
    80025332:	4301                	li	t1,0
  while (pos-- > 0)
    80025334:	fa8a94e3          	bne	s5,s0,800252dc <vprintfmt.constprop.1+0x444>
    80025338:	46013b83          	ld	s7,1120(sp)
    8002533c:	45813c03          	ld	s8,1112(sp)
    80025340:	45013c83          	ld	s9,1104(sp)
    80025344:	44813d03          	ld	s10,1096(sp)
    80025348:	be5d                	j	80024efe <vprintfmt.constprop.1+0x66>
        ch = *fmt;
    8002534a:	00144483          	lbu	s1,1(s0)
      lflag++;
    8002534e:	2905                	addiw	s2,s2,1
    switch (ch = *(unsigned char *) fmt++) {
    80025350:	842a                	mv	s0,a0
      goto reswitch;
    80025352:	b91d                	j	80024f88 <vprintfmt.constprop.1+0xf0>
    80025354:	47713023          	sd	s7,1120(sp)
    80025358:	45813c23          	sd	s8,1112(sp)
    8002535c:	45913823          	sd	s9,1104(sp)
    80025360:	45a13423          	sd	s10,1096(sp)
    switch (ch = *(unsigned char *) fmt++) {
    80025364:	4441                	li	s0,16
  if (lflag >= 2)
    80025366:	4285                	li	t0,1
  buf[buflen++] = ch;
    80025368:	00024317          	auipc	t1,0x24
    8002536c:	d6c32303          	lw	t1,-660(t1) # 800490d4 <buflen.2>
      precision = va_arg(ap, int);
    80025370:	00838493          	addi	s1,t2,8
  if (lflag >= 2)
    80025374:	1d22c363          	blt	t0,s2,8002553a <vprintfmt.constprop.1+0x6a2>
  else if (lflag)
    80025378:	3e091263          	bnez	s2,8002575c <vprintfmt.constprop.1+0x8c4>
    return va_arg(*ap, unsigned int);
    8002537c:	0003e283          	lwu	t0,0(t2)
    80025380:	00024997          	auipc	s3,0x24
    80025384:	d5498993          	addi	s3,s3,-684 # 800490d4 <buflen.2>
    80025388:	83a6                	mv	t2,s1
    8002538a:	00024917          	auipc	s2,0x24
    8002538e:	cf690913          	addi	s2,s2,-778 # 80049080 <buf.1>
    80025392:	bd81                	j	800251e2 <vprintfmt.constprop.1+0x34a>
      if ((p = va_arg(ap, char *)) == NULL)
    80025394:	0003b483          	ld	s1,0(t2)
    80025398:	47713023          	sd	s7,1120(sp)
    8002539c:	45813c23          	sd	s8,1112(sp)
    800253a0:	45913823          	sd	s9,1104(sp)
    800253a4:	45a13423          	sd	s10,1096(sp)
    800253a8:	42048463          	beqz	s1,800257d0 <vprintfmt.constprop.1+0x938>
      if (width > 0 && padc != '-')
    800253ac:	1bf05563          	blez	t6,80025556 <vprintfmt.constprop.1+0x6be>
    800253b0:	02d00293          	li	t0,45
    800253b4:	445a9063          	bne	s5,t0,800257f4 <vprintfmt.constprop.1+0x95c>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    800253b8:	0004c283          	lbu	t0,0(s1)
    800253bc:	0002899b          	sext.w	s3,t0
    800253c0:	2c028363          	beqz	t0,80025686 <vprintfmt.constprop.1+0x7ee>
  tohost = (uintptr_t)magic_mem;
    800253c4:	20070413          	addi	s0,a4,512
    800253c8:	e422                	sd	s0,8(sp)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    800253ca:	5d7d                	li	s10,-1
  buf[buflen++] = ch;
    800253cc:	00024b97          	auipc	s7,0x24
    800253d0:	d08b8b93          	addi	s7,s7,-760 # 800490d4 <buflen.2>
    800253d4:	00024b17          	auipc	s6,0x24
    800253d8:	cacb0b13          	addi	s6,s6,-852 # 80049080 <buf.1>
  if (ch == '\n' || buflen == sizeof(buf))
    800253dc:	4ca9                	li	s9,10
  magic_mem[0] = which;
    800253de:	04000c13          	li	s8,64
    800253e2:	0000e917          	auipc	s2,0xe
    800253e6:	c5e90913          	addi	s2,s2,-930 # 80033040 <fromhost>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    800253ea:	04034263          	bltz	t1,8002542e <vprintfmt.constprop.1+0x596>
    800253ee:	fff30a9b          	addiw	s5,t1,-1
    800253f2:	29aa8863          	beq	s5,s10,80025682 <vprintfmt.constprop.1+0x7ea>
  buf[buflen++] = ch;
    800253f6:	00024417          	auipc	s0,0x24
    800253fa:	cde42403          	lw	s0,-802(s0) # 800490d4 <buflen.2>
    800253fe:	00140a1b          	addiw	s4,s0,1
    80025402:	945a                	add	s0,s0,s6
    80025404:	014ba023          	sw	s4,0(s7)
    80025408:	00540023          	sb	t0,0(s0)
  if (ch == '\n' || buflen == sizeof(buf))
    8002540c:	03998f63          	beq	s3,s9,8002544a <vprintfmt.constprop.1+0x5b2>
    80025410:	038a0d63          	beq	s4,s8,8002544a <vprintfmt.constprop.1+0x5b2>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80025414:	0014c283          	lbu	t0,1(s1)
        p++;
    80025418:	0485                	addi	s1,s1,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002541a:	3ffd                	addiw	t6,t6,-1
    8002541c:	0002899b          	sext.w	s3,t0
    80025420:	26028163          	beqz	t0,80025682 <vprintfmt.constprop.1+0x7ea>
    80025424:	1c034863          	bltz	t1,800255f4 <vprintfmt.constprop.1+0x75c>
    80025428:	8356                	mv	t1,s5
    8002542a:	fc0352e3          	bgez	t1,800253ee <vprintfmt.constprop.1+0x556>
  buf[buflen++] = ch;
    8002542e:	00024417          	auipc	s0,0x24
    80025432:	ca642403          	lw	s0,-858(s0) # 800490d4 <buflen.2>
    80025436:	8a9a                	mv	s5,t1
    80025438:	00140a1b          	addiw	s4,s0,1
    8002543c:	945a                	add	s0,s0,s6
    8002543e:	014ba023          	sw	s4,0(s7)
    80025442:	00540023          	sb	t0,0(s0)
  if (ch == '\n' || buflen == sizeof(buf))
    80025446:	fd9995e3          	bne	s3,s9,80025410 <vprintfmt.constprop.1+0x578>
  magic_mem[0] = which;
    8002544a:	21873023          	sd	s8,512(a4)
  magic_mem[1] = arg0;
    8002544e:	4405                	li	s0,1
    80025450:	20873423          	sd	s0,520(a4)
  magic_mem[2] = arg1;
    80025454:	21673823          	sd	s6,528(a4)
  magic_mem[3] = arg2;
    80025458:	21473c23          	sd	s4,536(a4)
  __sync_synchronize();
    8002545c:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    80025460:	62a2                	ld	t0,8(sp)
    80025462:	0000e417          	auipc	s0,0xe
    80025466:	b9e40413          	addi	s0,s0,-1122 # 80033000 <tohost>
    8002546a:	00543023          	sd	t0,0(s0)
  while (fromhost == 0)
    8002546e:	00093283          	ld	t0,0(s2)
    80025472:	fe028ee3          	beqz	t0,8002546e <vprintfmt.constprop.1+0x5d6>
  fromhost = 0;
    80025476:	0000e297          	auipc	t0,0xe
    8002547a:	bc02b523          	sd	zero,-1078(t0) # 80033040 <fromhost>
  __sync_synchronize();
    8002547e:	0330000f          	fence	rw,rw
  return magic_mem[0];
    80025482:	20073283          	ld	t0,512(a4)
    buflen = 0;
    80025486:	00024297          	auipc	t0,0x24
    8002548a:	c402a723          	sw	zero,-946(t0) # 800490d4 <buflen.2>
    8002548e:	b759                	j	80025414 <vprintfmt.constprop.1+0x57c>
      if (width < 0)
    80025490:	82fe                	mv	t0,t6
    80025492:	000fd363          	bgez	t6,80025498 <vprintfmt.constprop.1+0x600>
    80025496:	4281                	li	t0,0
        ch = *fmt;
    80025498:	00144483          	lbu	s1,1(s0)
      if (width < 0)
    8002549c:	00028f9b          	sext.w	t6,t0
    switch (ch = *(unsigned char *) fmt++) {
    800254a0:	842a                	mv	s0,a0
      goto reswitch;
    800254a2:	b4dd                	j	80024f88 <vprintfmt.constprop.1+0xf0>
  buf[buflen++] = ch;
    800254a4:	00024317          	auipc	t1,0x24
    800254a8:	c3032303          	lw	t1,-976(t1) # 800490d4 <buflen.2>
      putch(va_arg(ap, int), putdat);
    800254ac:	0003a283          	lw	t0,0(t2)
  buf[buflen++] = ch;
    800254b0:	00024917          	auipc	s2,0x24
    800254b4:	bd090913          	addi	s2,s2,-1072 # 80049080 <buf.1>
    800254b8:	00130f9b          	addiw	t6,t1,1
    800254bc:	934a                	add	t1,t1,s2
    800254be:	00530023          	sb	t0,0(t1)
    800254c2:	00024417          	auipc	s0,0x24
    800254c6:	c1f42923          	sw	t6,-1006(s0) # 800490d4 <buflen.2>
  if (ch == '\n' || buflen == sizeof(buf))
    800254ca:	4329                	li	t1,10
    800254cc:	00628863          	beq	t0,t1,800254dc <vprintfmt.constprop.1+0x644>
    800254d0:	04000313          	li	t1,64
    800254d4:	006f8463          	beq	t6,t1,800254dc <vprintfmt.constprop.1+0x644>
      putch(va_arg(ap, int), putdat);
    800254d8:	03a1                	addi	t2,t2,8
    800254da:	b415                	j	80024efe <vprintfmt.constprop.1+0x66>
  magic_mem[0] = which;
    800254dc:	04000313          	li	t1,64
    800254e0:	28673023          	sd	t1,640(a4)
  magic_mem[1] = arg0;
    800254e4:	4305                	li	t1,1
    800254e6:	28673423          	sd	t1,648(a4)
  magic_mem[2] = arg1;
    800254ea:	29273823          	sd	s2,656(a4)
  magic_mem[3] = arg2;
    800254ee:	29f73c23          	sd	t6,664(a4)
  __sync_synchronize();
    800254f2:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    800254f6:	28070313          	addi	t1,a4,640
    800254fa:	0000ef97          	auipc	t6,0xe
    800254fe:	b06fb323          	sd	t1,-1274(t6) # 80033000 <tohost>
  while (fromhost == 0)
    80025502:	0000e317          	auipc	t1,0xe
    80025506:	b3e30313          	addi	t1,t1,-1218 # 80033040 <fromhost>
    8002550a:	00033f83          	ld	t6,0(t1)
    8002550e:	fe0f8ee3          	beqz	t6,8002550a <vprintfmt.constprop.1+0x672>
  fromhost = 0;
    80025512:	0000e317          	auipc	t1,0xe
    80025516:	b2033723          	sd	zero,-1234(t1) # 80033040 <fromhost>
  __sync_synchronize();
    8002551a:	0330000f          	fence	rw,rw
    buflen = 0;
    8002551e:	00024317          	auipc	t1,0x24
    80025522:	ba032b23          	sw	zero,-1098(t1) # 800490d4 <buflen.2>
  return magic_mem[0];
    80025526:	28073303          	ld	t1,640(a4)
      putch(va_arg(ap, int), putdat);
    8002552a:	03a1                	addi	t2,t2,8
    8002552c:	bac9                	j	80024efe <vprintfmt.constprop.1+0x66>
    8002552e:	836a                	mv	t1,s10
    80025530:	b38d                	j	80025292 <vprintfmt.constprop.1+0x3fa>
  while (width-- > pos)
    80025532:	4301                	li	t1,0
    80025534:	b395                	j	80025298 <vprintfmt.constprop.1+0x400>
  buf[buflen++] = ch;
    80025536:	4305                	li	t1,1
    80025538:	b385                	j	80025298 <vprintfmt.constprop.1+0x400>
    return va_arg(*ap, unsigned long long);
    8002553a:	0003b283          	ld	t0,0(t2)
    8002553e:	00024997          	auipc	s3,0x24
    80025542:	b9698993          	addi	s3,s3,-1130 # 800490d4 <buflen.2>
    80025546:	83a6                	mv	t2,s1
    80025548:	00024917          	auipc	s2,0x24
    8002554c:	b3890913          	addi	s2,s2,-1224 # 80049080 <buf.1>
    80025550:	b949                	j	800251e2 <vprintfmt.constprop.1+0x34a>
    if (num < base)
    80025552:	4b81                	li	s7,0
    80025554:	b955                	j	80025208 <vprintfmt.constprop.1+0x370>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80025556:	0004c283          	lbu	t0,0(s1)
    8002555a:	0002899b          	sext.w	s3,t0
    8002555e:	e60293e3          	bnez	t0,800253c4 <vprintfmt.constprop.1+0x52c>
    80025562:	46013b83          	ld	s7,1120(sp)
    80025566:	45813c03          	ld	s8,1112(sp)
    8002556a:	45013c83          	ld	s9,1104(sp)
    8002556e:	44813d03          	ld	s10,1096(sp)
      if ((p = va_arg(ap, char *)) == NULL)
    80025572:	03a1                	addi	t2,t2,8
    80025574:	b269                	j	80024efe <vprintfmt.constprop.1+0x66>
    return va_arg(*ap, int);
    80025576:	0003a283          	lw	t0,0(t2)
    8002557a:	b1a1                	j	800251c2 <vprintfmt.constprop.1+0x32a>
    8002557c:	4441                	li	s0,16
    8002557e:	00838493          	addi	s1,t2,8
    return va_arg(*ap, unsigned long);
    80025582:	0003b283          	ld	t0,0(t2)
    80025586:	83a6                	mv	t2,s1
    80025588:	b9a9                	j	800251e2 <vprintfmt.constprop.1+0x34a>
  magic_mem[0] = which;
    8002558a:	e308                	sd	a0,0(a4)
  magic_mem[1] = arg0;
    8002558c:	4305                	li	t1,1
    8002558e:	00673423          	sd	t1,8(a4)
  magic_mem[2] = arg1;
    80025592:	01f73823          	sd	t6,16(a4)
  magic_mem[3] = arg2;
    80025596:	ef08                	sd	a0,24(a4)
  __sync_synchronize();
    80025598:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002559c:	0000e317          	auipc	t1,0xe
    800255a0:	aa430313          	addi	t1,t1,-1372 # 80033040 <fromhost>
    800255a4:	0000e517          	auipc	a0,0xe
    800255a8:	a4e53e23          	sd	a4,-1444(a0) # 80033000 <tohost>
  while (fromhost == 0)
    800255ac:	00033503          	ld	a0,0(t1)
    800255b0:	dd75                	beqz	a0,800255ac <vprintfmt.constprop.1+0x714>
  fromhost = 0;
    800255b2:	0000e517          	auipc	a0,0xe
    800255b6:	a8053723          	sd	zero,-1394(a0) # 80033040 <fromhost>
  __sync_synchronize();
    800255ba:	0330000f          	fence	rw,rw
  return magic_mem[0];
    800255be:	6308                	ld	a0,0(a4)
    buflen = 0;
    800255c0:	00024517          	auipc	a0,0x24
    800255c4:	b0052a23          	sw	zero,-1260(a0) # 800490d4 <buflen.2>
      fmt = last_fmt;
    800255c8:	8552                	mv	a0,s4
    800255ca:	ba15                	j	80024efe <vprintfmt.constprop.1+0x66>
    800255cc:	47713023          	sd	s7,1120(sp)
    800255d0:	45813c23          	sd	s8,1112(sp)
    800255d4:	45913823          	sd	s9,1104(sp)
    800255d8:	45a13423          	sd	s10,1096(sp)
    switch (ch = *(unsigned char *) fmt++) {
    800255dc:	4429                	li	s0,10
    800255de:	b361                	j	80025366 <vprintfmt.constprop.1+0x4ce>
    800255e0:	47713023          	sd	s7,1120(sp)
    800255e4:	45813c23          	sd	s8,1112(sp)
    800255e8:	45913823          	sd	s9,1104(sp)
    800255ec:	45a13423          	sd	s10,1096(sp)
    800255f0:	4421                	li	s0,8
    800255f2:	bb95                	j	80025366 <vprintfmt.constprop.1+0x4ce>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    800255f4:	8926                	mv	s2,s1
  if (ch == '\n' || buflen == sizeof(buf))
    800255f6:	4a29                	li	s4,10
    800255f8:	04000a93          	li	s5,64
    800255fc:	a801                	j	8002560c <vprintfmt.constprop.1+0x774>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    800255fe:	00194283          	lbu	t0,1(s2)
        p++;
    80025602:	0905                	addi	s2,s2,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80025604:	0002899b          	sext.w	s3,t0
    80025608:	06028963          	beqz	t0,8002567a <vprintfmt.constprop.1+0x7e2>
  buf[buflen++] = ch;
    8002560c:	00024317          	auipc	t1,0x24
    80025610:	ac832303          	lw	t1,-1336(t1) # 800490d4 <buflen.2>
    80025614:	0013041b          	addiw	s0,t1,1
    80025618:	935a                	add	t1,t1,s6
    8002561a:	008ba023          	sw	s0,0(s7)
    8002561e:	00530023          	sb	t0,0(t1)
  if (ch == '\n' || buflen == sizeof(buf))
    80025622:	01498463          	beq	s3,s4,8002562a <vprintfmt.constprop.1+0x792>
    80025626:	fd541ce3          	bne	s0,s5,800255fe <vprintfmt.constprop.1+0x766>
  magic_mem[0] = which;
    8002562a:	04000313          	li	t1,64
    8002562e:	20673023          	sd	t1,512(a4)
  magic_mem[1] = arg0;
    80025632:	4305                	li	t1,1
    80025634:	20673423          	sd	t1,520(a4)
  magic_mem[2] = arg1;
    80025638:	21673823          	sd	s6,528(a4)
  magic_mem[3] = arg2;
    8002563c:	20873c23          	sd	s0,536(a4)
  __sync_synchronize();
    80025640:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    80025644:	20070313          	addi	t1,a4,512
    80025648:	0000e297          	auipc	t0,0xe
    8002564c:	9a62bc23          	sd	t1,-1608(t0) # 80033000 <tohost>
  while (fromhost == 0)
    80025650:	0000e297          	auipc	t0,0xe
    80025654:	9f028293          	addi	t0,t0,-1552 # 80033040 <fromhost>
    80025658:	0002b303          	ld	t1,0(t0)
    8002565c:	fe030ee3          	beqz	t1,80025658 <vprintfmt.constprop.1+0x7c0>
  fromhost = 0;
    80025660:	0000e317          	auipc	t1,0xe
    80025664:	9e033023          	sd	zero,-1568(t1) # 80033040 <fromhost>
  __sync_synchronize();
    80025668:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002566c:	20073303          	ld	t1,512(a4)
    buflen = 0;
    80025670:	00024317          	auipc	t1,0x24
    80025674:	a6032223          	sw	zero,-1436(t1) # 800490d4 <buflen.2>
    80025678:	b759                	j	800255fe <vprintfmt.constprop.1+0x766>
    8002567a:	009f8fbb          	addw	t6,t6,s1
    8002567e:	412f8fbb          	subw	t6,t6,s2
      for (; width > 0; width--)
    80025682:	eff050e3          	blez	t6,80025562 <vprintfmt.constprop.1+0x6ca>
  buf[buflen++] = ch;
    80025686:	00024317          	auipc	t1,0x24
    8002568a:	a4e32303          	lw	t1,-1458(t1) # 800490d4 <buflen.2>
    8002568e:	00024997          	auipc	s3,0x24
    80025692:	a4698993          	addi	s3,s3,-1466 # 800490d4 <buflen.2>
    80025696:	00024917          	auipc	s2,0x24
    8002569a:	9ea90913          	addi	s2,s2,-1558 # 80049080 <buf.1>
    8002569e:	02000a13          	li	s4,32
  if (ch == '\n' || buflen == sizeof(buf))
    800256a2:	04000493          	li	s1,64
  magic_mem[1] = arg0;
    800256a6:	4a85                	li	s5,1
  tohost = (uintptr_t)magic_mem;
    800256a8:	1c070b93          	addi	s7,a4,448
    800256ac:	0000eb17          	auipc	s6,0xe
    800256b0:	954b0b13          	addi	s6,s6,-1708 # 80033000 <tohost>
    800256b4:	0000e297          	auipc	t0,0xe
    800256b8:	98c28293          	addi	t0,t0,-1652 # 80033040 <fromhost>
  buf[buflen++] = ch;
    800256bc:	4c09                	li	s8,2
    800256be:	0013041b          	addiw	s0,t1,1
    800256c2:	934a                	add	t1,t1,s2
    800256c4:	0089a023          	sw	s0,0(s3)
    800256c8:	01430023          	sb	s4,0(t1)
  if (ch == '\n' || buflen == sizeof(buf))
    800256cc:	04941e63          	bne	s0,s1,80025728 <vprintfmt.constprop.1+0x890>
  magic_mem[0] = which;
    800256d0:	1c973023          	sd	s1,448(a4)
  magic_mem[1] = arg0;
    800256d4:	1d573423          	sd	s5,456(a4)
  magic_mem[2] = arg1;
    800256d8:	1d273823          	sd	s2,464(a4)
  magic_mem[3] = arg2;
    800256dc:	1c973c23          	sd	s1,472(a4)
  __sync_synchronize();
    800256e0:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    800256e4:	017b3023          	sd	s7,0(s6)
  while (fromhost == 0)
    800256e8:	0002b303          	ld	t1,0(t0)
    800256ec:	fe030ee3          	beqz	t1,800256e8 <vprintfmt.constprop.1+0x850>
  fromhost = 0;
    800256f0:	0000e317          	auipc	t1,0xe
    800256f4:	94033823          	sd	zero,-1712(t1) # 80033040 <fromhost>
  __sync_synchronize();
    800256f8:	0330000f          	fence	rw,rw
  return magic_mem[0];
    800256fc:	1c073303          	ld	t1,448(a4)
      for (; width > 0; width--)
    80025700:	ffff831b          	addiw	t1,t6,-1
    80025704:	0c030163          	beqz	t1,800257c6 <vprintfmt.constprop.1+0x92e>
  buf[buflen++] = ch;
    80025708:	0159a023          	sw	s5,0(s3)
    8002570c:	01490023          	sb	s4,0(s2)
      for (; width > 0; width--)
    80025710:	3ff9                	addiw	t6,t6,-2
    80025712:	e40f88e3          	beqz	t6,80025562 <vprintfmt.constprop.1+0x6ca>
  buf[buflen++] = ch;
    80025716:	0189a023          	sw	s8,0(s3)
    8002571a:	014900a3          	sb	s4,1(s2)
    8002571e:	4309                	li	t1,2
      for (; width > 0; width--)
    80025720:	3ffd                	addiw	t6,t6,-1
    80025722:	f80f9ee3          	bnez	t6,800256be <vprintfmt.constprop.1+0x826>
    80025726:	bd35                	j	80025562 <vprintfmt.constprop.1+0x6ca>
    80025728:	8322                	mv	t1,s0
    8002572a:	bfdd                	j	80025720 <vprintfmt.constprop.1+0x888>
  buf[buflen++] = ch;
    8002572c:	00024917          	auipc	s2,0x24
    80025730:	95490913          	addi	s2,s2,-1708 # 80049080 <buf.1>
    80025734:	006904b3          	add	s1,s2,t1
    80025738:	0013039b          	addiw	t2,t1,1
    8002573c:	02d00313          	li	t1,45
    80025740:	00648023          	sb	t1,0(s1)
    80025744:	0079a023          	sw	t2,0(s3)
  if (ch == '\n' || buflen == sizeof(buf))
    80025748:	04000493          	li	s1,64
  buf[buflen++] = ch;
    8002574c:	831e                	mv	t1,t2
  if (ch == '\n' || buflen == sizeof(buf))
    8002574e:	18938263          	beq	t2,s1,800258d2 <vprintfmt.constprop.1+0xa3a>
        num = -(long long) num;
    80025752:	83a2                	mv	t2,s0
    80025754:	405002b3          	neg	t0,t0
    80025758:	4429                	li	s0,10
    8002575a:	b461                	j	800251e2 <vprintfmt.constprop.1+0x34a>
    8002575c:	00024997          	auipc	s3,0x24
    80025760:	97898993          	addi	s3,s3,-1672 # 800490d4 <buflen.2>
    80025764:	00024917          	auipc	s2,0x24
    80025768:	91c90913          	addi	s2,s2,-1764 # 80049080 <buf.1>
    8002576c:	bd19                	j	80025582 <vprintfmt.constprop.1+0x6ea>
  magic_mem[0] = which;
    8002576e:	14573023          	sd	t0,320(a4)
  magic_mem[1] = arg0;
    80025772:	4305                	li	t1,1
    80025774:	14673423          	sd	t1,328(a4)
  magic_mem[2] = arg1;
    80025778:	15273823          	sd	s2,336(a4)
  magic_mem[3] = arg2;
    8002577c:	14573c23          	sd	t0,344(a4)
  __sync_synchronize();
    80025780:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    80025784:	14070313          	addi	t1,a4,320
    80025788:	0000e297          	auipc	t0,0xe
    8002578c:	8662bc23          	sd	t1,-1928(t0) # 80033000 <tohost>
  while (fromhost == 0)
    80025790:	0000e317          	auipc	t1,0xe
    80025794:	8b030313          	addi	t1,t1,-1872 # 80033040 <fromhost>
    80025798:	00033283          	ld	t0,0(t1)
    8002579c:	fe028ee3          	beqz	t0,80025798 <vprintfmt.constprop.1+0x900>
  fromhost = 0;
    800257a0:	0000e317          	auipc	t1,0xe
    800257a4:	8a033023          	sd	zero,-1888(t1) # 80033040 <fromhost>
  __sync_synchronize();
    800257a8:	0330000f          	fence	rw,rw
  return magic_mem[0];
    800257ac:	14073403          	ld	s0,320(a4)
  buf[buflen++] = ch;
    800257b0:	07800293          	li	t0,120
    800257b4:	4305                	li	t1,1
    800257b6:	00590023          	sb	t0,0(s2)
    800257ba:	0069a023          	sw	t1,0(s3)
    800257be:	00838493          	addi	s1,t2,8
    800257c2:	4441                	li	s0,16
    800257c4:	bb7d                	j	80025582 <vprintfmt.constprop.1+0x6ea>
    buflen = 0;
    800257c6:	00024317          	auipc	t1,0x24
    800257ca:	90032723          	sw	zero,-1778(t1) # 800490d4 <buflen.2>
    800257ce:	bb51                	j	80025562 <vprintfmt.constprop.1+0x6ca>
      if (width > 0 && padc != '-')
    800257d0:	01f05663          	blez	t6,800257dc <vprintfmt.constprop.1+0x944>
    800257d4:	02d00293          	li	t0,45
    800257d8:	005a9a63          	bne	s5,t0,800257ec <vprintfmt.constprop.1+0x954>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    800257dc:	02800293          	li	t0,40
    800257e0:	8996                	mv	s3,t0
        p = "(null)";
    800257e2:	0000b497          	auipc	s1,0xb
    800257e6:	c6e48493          	addi	s1,s1,-914 # 80030450 <__func__.0+0x89f0>
    800257ea:	bee9                	j	800253c4 <vprintfmt.constprop.1+0x52c>
    800257ec:	0000b497          	auipc	s1,0xb
    800257f0:	c6448493          	addi	s1,s1,-924 # 80030450 <__func__.0+0x89f0>
  const char *p = s;
    800257f4:	82a6                	mv	t0,s1
  while (n-- && *p)
    800257f6:	00648933          	add	s2,s1,t1
    800257fa:	00031663          	bnez	t1,80025806 <vprintfmt.constprop.1+0x96e>
    800257fe:	a829                	j	80025818 <vprintfmt.constprop.1+0x980>
    p++;
    80025800:	0285                	addi	t0,t0,1
  while (n-- && *p)
    80025802:	01228563          	beq	t0,s2,8002580c <vprintfmt.constprop.1+0x974>
    80025806:	0002c403          	lbu	s0,0(t0)
    8002580a:	f87d                	bnez	s0,80025800 <vprintfmt.constprop.1+0x968>
  return p - s;
    8002580c:	409282b3          	sub	t0,t0,s1
        for (width -= strnlen(p, precision); width > 0; width--)
    80025810:	405f8fbb          	subw	t6,t6,t0
    80025814:	d5f051e3          	blez	t6,80025556 <vprintfmt.constprop.1+0x6be>
  buf[buflen++] = ch;
    80025818:	00024297          	auipc	t0,0x24
    8002581c:	8bc2a283          	lw	t0,-1860(t0) # 800490d4 <buflen.2>
    80025820:	00024997          	auipc	s3,0x24
    80025824:	8b498993          	addi	s3,s3,-1868 # 800490d4 <buflen.2>
    80025828:	00024917          	auipc	s2,0x24
    8002582c:	85890913          	addi	s2,s2,-1960 # 80049080 <buf.1>
  if (ch == '\n' || buflen == sizeof(buf))
    80025830:	04000a13          	li	s4,64
  magic_mem[1] = arg0;
    80025834:	4b05                	li	s6,1
  tohost = (uintptr_t)magic_mem;
    80025836:	24070c93          	addi	s9,a4,576
    8002583a:	0000dc17          	auipc	s8,0xd
    8002583e:	7c6c0c13          	addi	s8,s8,1990 # 80033000 <tohost>
    80025842:	0000d417          	auipc	s0,0xd
    80025846:	7fe40413          	addi	s0,s0,2046 # 80033040 <fromhost>
  buf[buflen++] = ch;
    8002584a:	4b89                	li	s7,2
    8002584c:	00128d1b          	addiw	s10,t0,1
    80025850:	92ca                	add	t0,t0,s2
    80025852:	01a9a023          	sw	s10,0(s3)
    80025856:	01528023          	sb	s5,0(t0)
  if (ch == '\n' || buflen == sizeof(buf))
    8002585a:	074d1563          	bne	s10,s4,800258c4 <vprintfmt.constprop.1+0xa2c>
  magic_mem[0] = which;
    8002585e:	25473023          	sd	s4,576(a4)
  magic_mem[1] = arg0;
    80025862:	25673423          	sd	s6,584(a4)
  magic_mem[2] = arg1;
    80025866:	25273823          	sd	s2,592(a4)
  magic_mem[3] = arg2;
    8002586a:	25473c23          	sd	s4,600(a4)
  __sync_synchronize();
    8002586e:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    80025872:	019c3023          	sd	s9,0(s8)
  while (fromhost == 0)
    80025876:	00043283          	ld	t0,0(s0)
    8002587a:	fe028ee3          	beqz	t0,80025876 <vprintfmt.constprop.1+0x9de>
  fromhost = 0;
    8002587e:	0000d297          	auipc	t0,0xd
    80025882:	7c02b123          	sd	zero,1986(t0) # 80033040 <fromhost>
  __sync_synchronize();
    80025886:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002588a:	24073283          	ld	t0,576(a4)
        for (width -= strnlen(p, precision); width > 0; width--)
    8002588e:	ffff829b          	addiw	t0,t6,-1
    80025892:	08028763          	beqz	t0,80025920 <vprintfmt.constprop.1+0xa88>
  buf[buflen++] = ch;
    80025896:	0169a023          	sw	s6,0(s3)
    8002589a:	01590023          	sb	s5,0(s2)
        for (width -= strnlen(p, precision); width > 0; width--)
    8002589e:	3ff9                	addiw	t6,t6,-2
    800258a0:	000f8a63          	beqz	t6,800258b4 <vprintfmt.constprop.1+0xa1c>
  buf[buflen++] = ch;
    800258a4:	0179a023          	sw	s7,0(s3)
    800258a8:	015900a3          	sb	s5,1(s2)
    800258ac:	4289                	li	t0,2
        for (width -= strnlen(p, precision); width > 0; width--)
    800258ae:	3ffd                	addiw	t6,t6,-1
    800258b0:	f80f9ee3          	bnez	t6,8002584c <vprintfmt.constprop.1+0x9b4>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    800258b4:	0004c283          	lbu	t0,0(s1)
    800258b8:	0002899b          	sext.w	s3,t0
    800258bc:	ca0283e3          	beqz	t0,80025562 <vprintfmt.constprop.1+0x6ca>
    800258c0:	4f81                	li	t6,0
    800258c2:	b609                	j	800253c4 <vprintfmt.constprop.1+0x52c>
    800258c4:	82ea                	mv	t0,s10
    800258c6:	b7e5                	j	800258ae <vprintfmt.constprop.1+0xa16>
    switch (ch = *(unsigned char *) fmt++) {
    800258c8:	46013b83          	ld	s7,1120(sp)
    800258cc:	842a                	mv	s0,a0
    800258ce:	f8cff06f          	j	8002505a <vprintfmt.constprop.1+0x1c2>
  magic_mem[0] = which;
    800258d2:	18773023          	sd	t2,384(a4)
  magic_mem[1] = arg0;
    800258d6:	4305                	li	t1,1
    800258d8:	18673423          	sd	t1,392(a4)
  magic_mem[2] = arg1;
    800258dc:	19273823          	sd	s2,400(a4)
  magic_mem[3] = arg2;
    800258e0:	18773c23          	sd	t2,408(a4)
  __sync_synchronize();
    800258e4:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    800258e8:	18070313          	addi	t1,a4,384
    800258ec:	0000d397          	auipc	t2,0xd
    800258f0:	7063ba23          	sd	t1,1812(t2) # 80033000 <tohost>
  while (fromhost == 0)
    800258f4:	0000d317          	auipc	t1,0xd
    800258f8:	74c30313          	addi	t1,t1,1868 # 80033040 <fromhost>
    800258fc:	00033383          	ld	t2,0(t1)
    80025900:	fe038ee3          	beqz	t2,800258fc <vprintfmt.constprop.1+0xa64>
  fromhost = 0;
    80025904:	0000d317          	auipc	t1,0xd
    80025908:	72033e23          	sd	zero,1852(t1) # 80033040 <fromhost>
  __sync_synchronize();
    8002590c:	0330000f          	fence	rw,rw
  return magic_mem[0];
    80025910:	18073303          	ld	t1,384(a4)
    buflen = 0;
    80025914:	00023317          	auipc	t1,0x23
    80025918:	7c032023          	sw	zero,1984(t1) # 800490d4 <buflen.2>
    8002591c:	4301                	li	t1,0
    8002591e:	bd15                	j	80025752 <vprintfmt.constprop.1+0x8ba>
    80025920:	00023f97          	auipc	t6,0x23
    80025924:	7a0faa23          	sw	zero,1972(t6) # 800490d4 <buflen.2>
    80025928:	b771                	j	800258b4 <vprintfmt.constprop.1+0xa1c>

000000008002592a <strlen>:
  while (*p)
    8002592a:	00054783          	lbu	a5,0(a0)
    8002592e:	cb89                	beqz	a5,80025940 <strlen+0x16>
  const char *p = s;
    80025930:	87aa                	mv	a5,a0
  while (*p)
    80025932:	0017c703          	lbu	a4,1(a5)
    p++;
    80025936:	0785                	addi	a5,a5,1
  while (*p)
    80025938:	ff6d                	bnez	a4,80025932 <strlen+0x8>
  return p - s;
    8002593a:	40a78533          	sub	a0,a5,a0
    8002593e:	8082                	ret
  while (*p)
    80025940:	4501                	li	a0,0
}
    80025942:	8082                	ret

0000000080025944 <strnlen>:
  while (n-- && *p)
    80025944:	00b506b3          	add	a3,a0,a1
  const char *p = s;
    80025948:	87aa                	mv	a5,a0
  while (n-- && *p)
    8002594a:	e589                	bnez	a1,80025954 <strnlen+0x10>
    8002594c:	a821                	j	80025964 <strnlen+0x20>
    p++;
    8002594e:	0785                	addi	a5,a5,1
  while (n-- && *p)
    80025950:	00f68863          	beq	a3,a5,80025960 <strnlen+0x1c>
    80025954:	0007c703          	lbu	a4,0(a5)
    80025958:	fb7d                	bnez	a4,8002594e <strnlen+0xa>
  return p - s;
    8002595a:	40a78533          	sub	a0,a5,a0
}
    8002595e:	8082                	ret
  return p - s;
    80025960:	852e                	mv	a0,a1
    80025962:	8082                	ret
  while (n-- && *p)
    80025964:	4501                	li	a0,0
    80025966:	8082                	ret

0000000080025968 <setStats>:
  READ_CTR(mcycle);
    80025968:	b0002773          	csrr	a4,mcycle
    8002596c:	00023797          	auipc	a5,0x23
    80025970:	71478793          	addi	a5,a5,1812 # 80049080 <buf.1>
    80025974:	c511                	beqz	a0,80025980 <setStats+0x18>
    80025976:	e3b8                	sd	a4,64(a5)
  READ_CTR(minstret);
    80025978:	b0202773          	csrr	a4,minstret
    8002597c:	e7b8                	sd	a4,72(a5)
}
    8002597e:	8082                	ret
  READ_CTR(mcycle);
    80025980:	63b4                	ld	a3,64(a5)
    80025982:	8f15                	sub	a4,a4,a3
    80025984:	e3b8                	sd	a4,64(a5)
  READ_CTR(minstret);
    80025986:	b0202773          	csrr	a4,minstret
    8002598a:	67b4                	ld	a3,72(a5)
    8002598c:	8f15                	sub	a4,a4,a3
    8002598e:	e7b8                	sd	a4,72(a5)
}
    80025990:	8082                	ret

0000000080025992 <tohost_exit>:
  tohost = (code << 1) | 1;
    80025992:	00151793          	slli	a5,a0,0x1
    80025996:	0017e793          	ori	a5,a5,1
    8002599a:	0000d717          	auipc	a4,0xd
    8002599e:	66f73323          	sd	a5,1638(a4) # 80033000 <tohost>
  while (1);
    800259a2:	a001                	j	800259a2 <tohost_exit+0x10>

00000000800259a4 <handle_trap>:
  tohost = (code << 1) | 1;
    800259a4:	6785                	lui	a5,0x1
    800259a6:	a7378793          	addi	a5,a5,-1421 # a73 <_test_table_size+0xa72>
    800259aa:	0000d717          	auipc	a4,0xd
    800259ae:	64f73b23          	sd	a5,1622(a4) # 80033000 <tohost>
  while (1);
    800259b2:	a001                	j	800259b2 <handle_trap+0xe>

00000000800259b4 <exit>:
{
    800259b4:	1141                	addi	sp,sp,-16
    800259b6:	e406                	sd	ra,8(sp)
  tohost_exit(code);
    800259b8:	fdbff0ef          	jal	80025992 <tohost_exit>

00000000800259bc <abort>:
  tohost = (code << 1) | 1;
    800259bc:	10d00793          	li	a5,269
    800259c0:	0000d717          	auipc	a4,0xd
    800259c4:	64f73023          	sd	a5,1600(a4) # 80033000 <tohost>
  while (1);
    800259c8:	a001                	j	800259c8 <abort+0xc>

00000000800259ca <printstr>:
  while (*p)
    800259ca:	00054783          	lbu	a5,0(a0)
{
    800259ce:	7159                	addi	sp,sp,-112
    800259d0:	03f10693          	addi	a3,sp,63
    800259d4:	fc06f693          	andi	a3,a3,-64
  while (*p)
    800259d8:	c3b9                	beqz	a5,80025a1e <printstr+0x54>
  const char *p = s;
    800259da:	87aa                	mv	a5,a0
  while (*p)
    800259dc:	0017c703          	lbu	a4,1(a5)
    p++;
    800259e0:	0785                	addi	a5,a5,1
  while (*p)
    800259e2:	ff6d                	bnez	a4,800259dc <printstr+0x12>
  return p - s;
    800259e4:	8f89                	sub	a5,a5,a0
  magic_mem[0] = which;
    800259e6:	04000713          	li	a4,64
    800259ea:	e298                	sd	a4,0(a3)
  magic_mem[1] = arg0;
    800259ec:	4705                	li	a4,1
    800259ee:	e698                	sd	a4,8(a3)
  magic_mem[2] = arg1;
    800259f0:	ea88                	sd	a0,16(a3)
  magic_mem[3] = arg2;
    800259f2:	ee9c                	sd	a5,24(a3)
  __sync_synchronize();
    800259f4:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    800259f8:	0000d717          	auipc	a4,0xd
    800259fc:	64870713          	addi	a4,a4,1608 # 80033040 <fromhost>
    80025a00:	0000d797          	auipc	a5,0xd
    80025a04:	60d7b023          	sd	a3,1536(a5) # 80033000 <tohost>
  while (fromhost == 0)
    80025a08:	631c                	ld	a5,0(a4)
    80025a0a:	dffd                	beqz	a5,80025a08 <printstr+0x3e>
  fromhost = 0;
    80025a0c:	0000d797          	auipc	a5,0xd
    80025a10:	6207ba23          	sd	zero,1588(a5) # 80033040 <fromhost>
  __sync_synchronize();
    80025a14:	0330000f          	fence	rw,rw
  return magic_mem[0];
    80025a18:	629c                	ld	a5,0(a3)
}
    80025a1a:	6165                	addi	sp,sp,112
    80025a1c:	8082                	ret
  while (*p)
    80025a1e:	4781                	li	a5,0
    80025a20:	b7d9                	j	800259e6 <printstr+0x1c>

0000000080025a22 <puts>:
    80025a22:	00054783          	lbu	a5,0(a0)
{
    80025a26:	7171                	addi	sp,sp,-176
    80025a28:	03f10693          	addi	a3,sp,63
    80025a2c:	fc06f693          	andi	a3,a3,-64
  while (*p)
    80025a30:	c7d9                	beqz	a5,80025abe <puts+0x9c>
  const char *p = s;
    80025a32:	87aa                	mv	a5,a0
  while (*p)
    80025a34:	0017c703          	lbu	a4,1(a5)
    p++;
    80025a38:	0785                	addi	a5,a5,1
  while (*p)
    80025a3a:	ff6d                	bnez	a4,80025a34 <puts+0x12>
  return p - s;
    80025a3c:	8f89                	sub	a5,a5,a0
  magic_mem[0] = which;
    80025a3e:	04000713          	li	a4,64
    80025a42:	e2b8                	sd	a4,64(a3)
  magic_mem[1] = arg0;
    80025a44:	4705                	li	a4,1
    80025a46:	e6b8                	sd	a4,72(a3)
  magic_mem[2] = arg1;
    80025a48:	eaa8                	sd	a0,80(a3)
  magic_mem[3] = arg2;
    80025a4a:	eebc                	sd	a5,88(a3)
  __sync_synchronize();
    80025a4c:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    80025a50:	0000d617          	auipc	a2,0xd
    80025a54:	5b060613          	addi	a2,a2,1456 # 80033000 <tohost>
    80025a58:	04068793          	addi	a5,a3,64
    80025a5c:	e21c                	sd	a5,0(a2)
  while (fromhost == 0)
    80025a5e:	0000d797          	auipc	a5,0xd
    80025a62:	5e278793          	addi	a5,a5,1506 # 80033040 <fromhost>
    80025a66:	6398                	ld	a4,0(a5)
    80025a68:	df7d                	beqz	a4,80025a66 <puts+0x44>
  fromhost = 0;
    80025a6a:	0000d717          	auipc	a4,0xd
    80025a6e:	5c073b23          	sd	zero,1494(a4) # 80033040 <fromhost>
  __sync_synchronize();
    80025a72:	0330000f          	fence	rw,rw
  return magic_mem[0];
    80025a76:	62b8                	ld	a4,64(a3)
  magic_mem[0] = which;
    80025a78:	04000593          	li	a1,64
    80025a7c:	e28c                	sd	a1,0(a3)
  magic_mem[1] = arg0;
    80025a7e:	4705                	li	a4,1
    80025a80:	e698                	sd	a4,8(a3)
  syscall(SYS_write, 1, (uintptr_t)s, strlen(s));
    80025a82:	0000b597          	auipc	a1,0xb
    80025a86:	9d658593          	addi	a1,a1,-1578 # 80030458 <__func__.0+0x89f8>
  magic_mem[2] = arg1;
    80025a8a:	ea8c                	sd	a1,16(a3)
  magic_mem[3] = arg2;
    80025a8c:	ee98                	sd	a4,24(a3)
  __sync_synchronize();
    80025a8e:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    80025a92:	e214                	sd	a3,0(a2)
  while (fromhost == 0)
    80025a94:	6398                	ld	a4,0(a5)
    80025a96:	df7d                	beqz	a4,80025a94 <puts+0x72>
  fromhost = 0;
    80025a98:	0000d797          	auipc	a5,0xd
    80025a9c:	5a07b423          	sd	zero,1448(a5) # 80033040 <fromhost>
  __sync_synchronize();
    80025aa0:	0330000f          	fence	rw,rw
  while (*p)
    80025aa4:	00054783          	lbu	a5,0(a0)
  return magic_mem[0];
    80025aa8:	6298                	ld	a4,0(a3)
  while (*p)
    80025aaa:	cf81                	beqz	a5,80025ac2 <puts+0xa0>
  const char *p = s;
    80025aac:	87aa                	mv	a5,a0
  while (*p)
    80025aae:	0017c703          	lbu	a4,1(a5)
    p++;
    80025ab2:	0785                	addi	a5,a5,1
  while (*p)
    80025ab4:	ff6d                	bnez	a4,80025aae <puts+0x8c>
  return strlen(s);
    80025ab6:	40a7853b          	subw	a0,a5,a0
}
    80025aba:	614d                	addi	sp,sp,176
    80025abc:	8082                	ret
  while (*p)
    80025abe:	4781                	li	a5,0
    80025ac0:	bfbd                	j	80025a3e <puts+0x1c>
    80025ac2:	4501                	li	a0,0
}
    80025ac4:	614d                	addi	sp,sp,176
    80025ac6:	8082                	ret

0000000080025ac8 <thread_entry>:
  while (cid != 0);
    80025ac8:	e111                	bnez	a0,80025acc <thread_entry+0x4>
}
    80025aca:	8082                	ret
  while (cid != 0);
    80025acc:	a001                	j	80025acc <thread_entry+0x4>

0000000080025ace <printhex>:
{
    80025ace:	7175                	addi	sp,sp,-144
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80025ad0:	00f57593          	andi	a1,a0,15
{
    80025ad4:	05f10693          	addi	a3,sp,95
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80025ad8:	4625                	li	a2,9
    80025ada:	872e                	mv	a4,a1
{
    80025adc:	fc06f693          	andi	a3,a3,-64
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80025ae0:	05700793          	li	a5,87
    80025ae4:	00b66463          	bltu	a2,a1,80025aec <printhex+0x1e>
    80025ae8:	03000793          	li	a5,48
    80025aec:	9f3d                	addw	a4,a4,a5
    x >>= 4;
    80025aee:	00455793          	srli	a5,a0,0x4
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80025af2:	00e10ba3          	sb	a4,23(sp)
    80025af6:	00f7f593          	andi	a1,a5,15
    80025afa:	4625                	li	a2,9
    80025afc:	87ae                	mv	a5,a1
    80025afe:	03000713          	li	a4,48
    80025b02:	00b67463          	bgeu	a2,a1,80025b0a <printhex+0x3c>
    80025b06:	05700713          	li	a4,87
    80025b0a:	9f3d                	addw	a4,a4,a5
    x >>= 4;
    80025b0c:	00855793          	srli	a5,a0,0x8
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80025b10:	00e10b23          	sb	a4,22(sp)
    80025b14:	00f7f593          	andi	a1,a5,15
    80025b18:	4625                	li	a2,9
    80025b1a:	87ae                	mv	a5,a1
    80025b1c:	03000713          	li	a4,48
    80025b20:	00b67463          	bgeu	a2,a1,80025b28 <printhex+0x5a>
    80025b24:	05700713          	li	a4,87
    80025b28:	9f3d                	addw	a4,a4,a5
    x >>= 4;
    80025b2a:	00c55793          	srli	a5,a0,0xc
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80025b2e:	00e10aa3          	sb	a4,21(sp)
    80025b32:	00f7f593          	andi	a1,a5,15
    80025b36:	4625                	li	a2,9
    80025b38:	87ae                	mv	a5,a1
    80025b3a:	03000713          	li	a4,48
    80025b3e:	00b67463          	bgeu	a2,a1,80025b46 <printhex+0x78>
    80025b42:	05700713          	li	a4,87
    80025b46:	9f3d                	addw	a4,a4,a5
    x >>= 4;
    80025b48:	01055793          	srli	a5,a0,0x10
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80025b4c:	00e10a23          	sb	a4,20(sp)
    80025b50:	00f7f593          	andi	a1,a5,15
    80025b54:	4625                	li	a2,9
    80025b56:	87ae                	mv	a5,a1
    80025b58:	03000713          	li	a4,48
    80025b5c:	00b67463          	bgeu	a2,a1,80025b64 <printhex+0x96>
    80025b60:	05700713          	li	a4,87
    80025b64:	9f3d                	addw	a4,a4,a5
    x >>= 4;
    80025b66:	01455793          	srli	a5,a0,0x14
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80025b6a:	00e109a3          	sb	a4,19(sp)
    80025b6e:	00f7f593          	andi	a1,a5,15
    80025b72:	4625                	li	a2,9
    80025b74:	87ae                	mv	a5,a1
    80025b76:	03000713          	li	a4,48
    80025b7a:	00b67463          	bgeu	a2,a1,80025b82 <printhex+0xb4>
    80025b7e:	05700713          	li	a4,87
    80025b82:	9f3d                	addw	a4,a4,a5
    x >>= 4;
    80025b84:	01855793          	srli	a5,a0,0x18
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80025b88:	00e10923          	sb	a4,18(sp)
    80025b8c:	00f7f593          	andi	a1,a5,15
    80025b90:	4625                	li	a2,9
    80025b92:	87ae                	mv	a5,a1
    80025b94:	03000713          	li	a4,48
    80025b98:	00b67463          	bgeu	a2,a1,80025ba0 <printhex+0xd2>
    80025b9c:	05700713          	li	a4,87
    80025ba0:	9fb9                	addw	a5,a5,a4
    80025ba2:	00f108a3          	sb	a5,17(sp)
    80025ba6:	45a5                	li	a1,9
    80025ba8:	01c5579b          	srliw	a5,a0,0x1c
    80025bac:	873e                	mv	a4,a5
    80025bae:	03000613          	li	a2,48
    80025bb2:	00f5f463          	bgeu	a1,a5,80025bba <printhex+0xec>
    80025bb6:	05700613          	li	a2,87
    80025bba:	9f31                	addw	a4,a4,a2
    x >>= 4;
    80025bbc:	02055793          	srli	a5,a0,0x20
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80025bc0:	00e10823          	sb	a4,16(sp)
    80025bc4:	00f7f593          	andi	a1,a5,15
    80025bc8:	4625                	li	a2,9
    80025bca:	87ae                	mv	a5,a1
    80025bcc:	03000713          	li	a4,48
    80025bd0:	00b67463          	bgeu	a2,a1,80025bd8 <printhex+0x10a>
    80025bd4:	05700713          	li	a4,87
    80025bd8:	9f3d                	addw	a4,a4,a5
    x >>= 4;
    80025bda:	02455793          	srli	a5,a0,0x24
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80025bde:	00e107a3          	sb	a4,15(sp)
    80025be2:	00f7f593          	andi	a1,a5,15
    80025be6:	4625                	li	a2,9
    80025be8:	87ae                	mv	a5,a1
    80025bea:	03000713          	li	a4,48
    80025bee:	00b67463          	bgeu	a2,a1,80025bf6 <printhex+0x128>
    80025bf2:	05700713          	li	a4,87
    80025bf6:	9f3d                	addw	a4,a4,a5
    x >>= 4;
    80025bf8:	02855793          	srli	a5,a0,0x28
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80025bfc:	00e10723          	sb	a4,14(sp)
    80025c00:	00f7f593          	andi	a1,a5,15
    80025c04:	4625                	li	a2,9
    80025c06:	87ae                	mv	a5,a1
    80025c08:	03000713          	li	a4,48
    80025c0c:	00b67463          	bgeu	a2,a1,80025c14 <printhex+0x146>
    80025c10:	05700713          	li	a4,87
    80025c14:	9f3d                	addw	a4,a4,a5
    x >>= 4;
    80025c16:	02c55793          	srli	a5,a0,0x2c
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80025c1a:	00e106a3          	sb	a4,13(sp)
    80025c1e:	00f7f593          	andi	a1,a5,15
    80025c22:	4625                	li	a2,9
    80025c24:	87ae                	mv	a5,a1
    80025c26:	03000713          	li	a4,48
    80025c2a:	00b67463          	bgeu	a2,a1,80025c32 <printhex+0x164>
    80025c2e:	05700713          	li	a4,87
    80025c32:	9f3d                	addw	a4,a4,a5
    x >>= 4;
    80025c34:	03055793          	srli	a5,a0,0x30
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80025c38:	00e10623          	sb	a4,12(sp)
    80025c3c:	00f7f593          	andi	a1,a5,15
    80025c40:	4625                	li	a2,9
    80025c42:	87ae                	mv	a5,a1
    80025c44:	03000713          	li	a4,48
    80025c48:	00b67463          	bgeu	a2,a1,80025c50 <printhex+0x182>
    80025c4c:	05700713          	li	a4,87
    80025c50:	9f3d                	addw	a4,a4,a5
    x >>= 4;
    80025c52:	03455793          	srli	a5,a0,0x34
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80025c56:	00e105a3          	sb	a4,11(sp)
    80025c5a:	00f7f593          	andi	a1,a5,15
    80025c5e:	4625                	li	a2,9
    80025c60:	87ae                	mv	a5,a1
    80025c62:	03000713          	li	a4,48
    80025c66:	00b67463          	bgeu	a2,a1,80025c6e <printhex+0x1a0>
    80025c6a:	05700713          	li	a4,87
    80025c6e:	9f3d                	addw	a4,a4,a5
    x >>= 4;
    80025c70:	03855793          	srli	a5,a0,0x38
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80025c74:	00e10523          	sb	a4,10(sp)
    80025c78:	00f7f593          	andi	a1,a5,15
    80025c7c:	4625                	li	a2,9
    80025c7e:	87ae                	mv	a5,a1
    80025c80:	03000713          	li	a4,48
    80025c84:	00b67463          	bgeu	a2,a1,80025c8c <printhex+0x1be>
    80025c88:	05700713          	li	a4,87
    80025c8c:	9fb9                	addw	a5,a5,a4
    80025c8e:	00f104a3          	sb	a5,9(sp)
    x >>= 4;
    80025c92:	03c55613          	srli	a2,a0,0x3c
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80025c96:	4725                	li	a4,9
    80025c98:	8532                	mv	a0,a2
    80025c9a:	03000793          	li	a5,48
    80025c9e:	00c77463          	bgeu	a4,a2,80025ca6 <printhex+0x1d8>
    80025ca2:	05700793          	li	a5,87
    80025ca6:	9d3d                	addw	a0,a0,a5
  syscall(SYS_write, 1, (uintptr_t)s, strlen(s));
    80025ca8:	0030                	addi	a2,sp,8
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80025caa:	00a10423          	sb	a0,8(sp)
  str[16] = 0;
    80025cae:	00010c23          	sb	zero,24(sp)
  const char *p = s;
    80025cb2:	87b2                	mv	a5,a2
  while (*p)
    80025cb4:	0017c703          	lbu	a4,1(a5)
    p++;
    80025cb8:	0785                	addi	a5,a5,1
  while (*p)
    80025cba:	ff6d                	bnez	a4,80025cb4 <printhex+0x1e6>
  magic_mem[0] = which;
    80025cbc:	04000713          	li	a4,64
    80025cc0:	e298                	sd	a4,0(a3)
  magic_mem[1] = arg0;
    80025cc2:	4705                	li	a4,1
    80025cc4:	e698                	sd	a4,8(a3)
  magic_mem[2] = arg1;
    80025cc6:	ea90                	sd	a2,16(a3)
  return p - s;
    80025cc8:	8f91                	sub	a5,a5,a2
  magic_mem[3] = arg2;
    80025cca:	ee9c                	sd	a5,24(a3)
  __sync_synchronize();
    80025ccc:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    80025cd0:	0000d717          	auipc	a4,0xd
    80025cd4:	37070713          	addi	a4,a4,880 # 80033040 <fromhost>
    80025cd8:	0000d797          	auipc	a5,0xd
    80025cdc:	32d7b423          	sd	a3,808(a5) # 80033000 <tohost>
  while (fromhost == 0)
    80025ce0:	631c                	ld	a5,0(a4)
    80025ce2:	dffd                	beqz	a5,80025ce0 <printhex+0x212>
  fromhost = 0;
    80025ce4:	0000d797          	auipc	a5,0xd
    80025ce8:	3407be23          	sd	zero,860(a5) # 80033040 <fromhost>
  __sync_synchronize();
    80025cec:	0330000f          	fence	rw,rw
  return magic_mem[0];
    80025cf0:	629c                	ld	a5,0(a3)
}
    80025cf2:	6149                	addi	sp,sp,144
    80025cf4:	8082                	ret

0000000080025cf6 <printf>:
{
    80025cf6:	711d                	addi	sp,sp,-96
  va_start(ap, fmt);
    80025cf8:	02810313          	addi	t1,sp,40
{
    80025cfc:	f42e                	sd	a1,40(sp)
  vprintfmt((void*)putchar, 0, fmt, ap);
    80025cfe:	859a                	mv	a1,t1
{
    80025d00:	ec06                	sd	ra,24(sp)
    80025d02:	f832                	sd	a2,48(sp)
    80025d04:	fc36                	sd	a3,56(sp)
    80025d06:	e0ba                	sd	a4,64(sp)
    80025d08:	e4be                	sd	a5,72(sp)
    80025d0a:	e8c2                	sd	a6,80(sp)
    80025d0c:	ecc6                	sd	a7,88(sp)
  va_start(ap, fmt);
    80025d0e:	e41a                	sd	t1,8(sp)
  vprintfmt((void*)putchar, 0, fmt, ap);
    80025d10:	988ff0ef          	jal	80024e98 <vprintfmt.constprop.1>
}
    80025d14:	60e2                	ld	ra,24(sp)
    80025d16:	4501                	li	a0,0
    80025d18:	6125                	addi	sp,sp,96
    80025d1a:	8082                	ret

0000000080025d1c <sprintf>:
{
    80025d1c:	711d                	addi	sp,sp,-96
  va_start(ap, fmt);
    80025d1e:	03010313          	addi	t1,sp,48
{
    80025d22:	f022                	sd	s0,32(sp)
    80025d24:	e42a                	sd	a0,8(sp)
    80025d26:	f832                	sd	a2,48(sp)
  char* str0 = str;
    80025d28:	842a                	mv	s0,a0

  vprintfmt(sprintf_putch, (void**)&str, fmt, ap);
    80025d2a:	861a                	mv	a2,t1
    80025d2c:	0028                	addi	a0,sp,8
{
    80025d2e:	f406                	sd	ra,40(sp)
    80025d30:	fc36                	sd	a3,56(sp)
    80025d32:	e0ba                	sd	a4,64(sp)
    80025d34:	e4be                	sd	a5,72(sp)
    80025d36:	e8c2                	sd	a6,80(sp)
    80025d38:	ecc6                	sd	a7,88(sp)
  va_start(ap, fmt);
    80025d3a:	ec1a                	sd	t1,24(sp)
  vprintfmt(sprintf_putch, (void**)&str, fmt, ap);
    80025d3c:	e47fe0ef          	jal	80024b82 <vprintfmt.constprop.0>
  *str = 0;
    80025d40:	6522                	ld	a0,8(sp)
    80025d42:	00050023          	sb	zero,0(a0)

  va_end(ap);
  return str - str0;
}
    80025d46:	70a2                	ld	ra,40(sp)
    80025d48:	9d01                	subw	a0,a0,s0
    80025d4a:	7402                	ld	s0,32(sp)
    80025d4c:	6125                	addi	sp,sp,96
    80025d4e:	8082                	ret

0000000080025d50 <memcpy>:

void* memcpy(void* dest, const void* src, size_t len)
{
  if ((((uintptr_t)dest | (uintptr_t)src | len) & (sizeof(uintptr_t)-1)) == 0) {
    80025d50:	00c5e833          	or	a6,a1,a2
    80025d54:	00a86833          	or	a6,a6,a0
    80025d58:	00787813          	andi	a6,a6,7
    80025d5c:	87ae                	mv	a5,a1
    80025d5e:	872a                	mv	a4,a0
    while (d < (uintptr_t*)(dest + len))
      *d++ = *s++;
  } else {
    const char* s = src;
    char *d = dest;
    while (d < (char*)(dest + len))
    80025d60:	00c506b3          	add	a3,a0,a2
  if ((((uintptr_t)dest | (uintptr_t)src | len) & (sizeof(uintptr_t)-1)) == 0) {
    80025d64:	0a080b63          	beqz	a6,80025e1a <memcpy+0xca>
    while (d < (char*)(dest + len))
    80025d68:	0ed57263          	bgeu	a0,a3,80025e4c <memcpy+0xfc>
    80025d6c:	fff60813          	addi	a6,a2,-1
    80025d70:	489d                	li	a7,7
    80025d72:	0b08ff63          	bgeu	a7,a6,80025e30 <memcpy+0xe0>
    80025d76:	00b56833          	or	a6,a0,a1
    80025d7a:	00787813          	andi	a6,a6,7
    80025d7e:	0a081963          	bnez	a6,80025e30 <memcpy+0xe0>
    80025d82:	00158813          	addi	a6,a1,1
    80025d86:	410508b3          	sub	a7,a0,a6
    80025d8a:	0078b893          	sltiu	a7,a7,7
    80025d8e:	0a089363          	bnez	a7,80025e34 <memcpy+0xe4>
    80025d92:	ff867893          	andi	a7,a2,-8
    80025d96:	01158833          	add	a6,a1,a7
      *d++ = *s++;
    80025d9a:	638c                	ld	a1,0(a5)
    80025d9c:	07a1                	addi	a5,a5,8
    80025d9e:	0721                	addi	a4,a4,8
    80025da0:	feb73c23          	sd	a1,-8(a4)
    while (d < (char*)(dest + len))
    80025da4:	fef81be3          	bne	a6,a5,80025d9a <memcpy+0x4a>
    80025da8:	011507b3          	add	a5,a0,a7
    80025dac:	09160f63          	beq	a2,a7,80025e4a <memcpy+0xfa>
      *d++ = *s++;
    80025db0:	00084603          	lbu	a2,0(a6)
    80025db4:	00178713          	addi	a4,a5,1
    80025db8:	00c78023          	sb	a2,0(a5)
    while (d < (char*)(dest + len))
    80025dbc:	08d77763          	bgeu	a4,a3,80025e4a <memcpy+0xfa>
      *d++ = *s++;
    80025dc0:	00184603          	lbu	a2,1(a6)
    80025dc4:	00278713          	addi	a4,a5,2
    80025dc8:	00c780a3          	sb	a2,1(a5)
    while (d < (char*)(dest + len))
    80025dcc:	06d77f63          	bgeu	a4,a3,80025e4a <memcpy+0xfa>
      *d++ = *s++;
    80025dd0:	00284603          	lbu	a2,2(a6)
    80025dd4:	00378713          	addi	a4,a5,3
    80025dd8:	00c78123          	sb	a2,2(a5)
    while (d < (char*)(dest + len))
    80025ddc:	06d77763          	bgeu	a4,a3,80025e4a <memcpy+0xfa>
      *d++ = *s++;
    80025de0:	00384603          	lbu	a2,3(a6)
    80025de4:	00478713          	addi	a4,a5,4
    80025de8:	00c781a3          	sb	a2,3(a5)
    while (d < (char*)(dest + len))
    80025dec:	04d77f63          	bgeu	a4,a3,80025e4a <memcpy+0xfa>
      *d++ = *s++;
    80025df0:	00484603          	lbu	a2,4(a6)
    80025df4:	00578713          	addi	a4,a5,5
    80025df8:	00c78223          	sb	a2,4(a5)
    while (d < (char*)(dest + len))
    80025dfc:	04d77763          	bgeu	a4,a3,80025e4a <memcpy+0xfa>
      *d++ = *s++;
    80025e00:	00584603          	lbu	a2,5(a6)
    80025e04:	00678713          	addi	a4,a5,6
    80025e08:	00c782a3          	sb	a2,5(a5)
    while (d < (char*)(dest + len))
    80025e0c:	02d77f63          	bgeu	a4,a3,80025e4a <memcpy+0xfa>
      *d++ = *s++;
    80025e10:	00684703          	lbu	a4,6(a6)
    80025e14:	00e78323          	sb	a4,6(a5)
    while (d < (char*)(dest + len))
    80025e18:	8082                	ret
    while (d < (uintptr_t*)(dest + len))
    80025e1a:	02d57863          	bgeu	a0,a3,80025e4a <memcpy+0xfa>
    uintptr_t *d = dest;
    80025e1e:	87aa                	mv	a5,a0
      *d++ = *s++;
    80025e20:	6198                	ld	a4,0(a1)
    80025e22:	07a1                	addi	a5,a5,8
    80025e24:	05a1                	addi	a1,a1,8
    80025e26:	fee7bc23          	sd	a4,-8(a5)
    while (d < (uintptr_t*)(dest + len))
    80025e2a:	fed7ebe3          	bltu	a5,a3,80025e20 <memcpy+0xd0>
    80025e2e:	8082                	ret
    80025e30:	00158813          	addi	a6,a1,1
    80025e34:	95b2                	add	a1,a1,a2
    char *d = dest;
    80025e36:	87aa                	mv	a5,a0
    80025e38:	a011                	j	80025e3c <memcpy+0xec>
    80025e3a:	0805                	addi	a6,a6,1
      *d++ = *s++;
    80025e3c:	fff84703          	lbu	a4,-1(a6)
    80025e40:	0785                	addi	a5,a5,1
    80025e42:	fee78fa3          	sb	a4,-1(a5)
    while (d < (char*)(dest + len))
    80025e46:	feb81ae3          	bne	a6,a1,80025e3a <memcpy+0xea>
  }
  return dest;
}
    80025e4a:	8082                	ret
    80025e4c:	8082                	ret

0000000080025e4e <memset>:

void* memset(void* dest, int byte, size_t len)
{
    80025e4e:	1141                	addi	sp,sp,-16
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    80025e50:	00c567b3          	or	a5,a0,a2
{
    80025e54:	e022                	sd	s0,0(sp)
    80025e56:	e406                	sd	ra,8(sp)
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    80025e58:	8b9d                	andi	a5,a5,7
{
    80025e5a:	842a                	mv	s0,a0
    uintptr_t *d = dest;
    while (d < (uintptr_t*)(dest + len))
      *d++ = word;
  } else {
    char *d = dest;
    while (d < (char*)(dest + len))
    80025e5c:	00c50733          	add	a4,a0,a2
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    80025e60:	cf81                	beqz	a5,80025e78 <memset+0x2a>
    while (d < (char*)(dest + len))
    80025e62:	00e57663          	bgeu	a0,a4,80025e6e <memset+0x20>
      *d++ = byte;
    80025e66:	0ff5f593          	zext.b	a1,a1
    80025e6a:	fe5ff0ef          	jal	80025e4e <memset>
  }
  return dest;
}
    80025e6e:	60a2                	ld	ra,8(sp)
    80025e70:	8522                	mv	a0,s0
    80025e72:	6402                	ld	s0,0(sp)
    80025e74:	0141                	addi	sp,sp,16
    80025e76:	8082                	ret
    word |= word << 16 << 16;
    80025e78:	010107b7          	lui	a5,0x1010
    80025e7c:	10178793          	addi	a5,a5,257 # 1010101 <STACK_SIZE+0xf10101>
    80025e80:	02079693          	slli	a3,a5,0x20
    uintptr_t word = byte & 0xFF;
    80025e84:	0ff5f593          	zext.b	a1,a1
    80025e88:	96be                	add	a3,a3,a5
    80025e8a:	02d585b3          	mul	a1,a1,a3
    while (d < (uintptr_t*)(dest + len))
    80025e8e:	fee570e3          	bgeu	a0,a4,80025e6e <memset+0x20>
    uintptr_t *d = dest;
    80025e92:	87aa                	mv	a5,a0
      *d++ = word;
    80025e94:	07a1                	addi	a5,a5,8
    80025e96:	feb7bc23          	sd	a1,-8(a5)
    while (d < (uintptr_t*)(dest + len))
    80025e9a:	fee7ede3          	bltu	a5,a4,80025e94 <memset+0x46>
}
    80025e9e:	60a2                	ld	ra,8(sp)
    80025ea0:	8522                	mv	a0,s0
    80025ea2:	6402                	ld	s0,0(sp)
    80025ea4:	0141                	addi	sp,sp,16
    80025ea6:	8082                	ret

0000000080025ea8 <strcmp>:
int strcmp(const char* s1, const char* s2)
{
  unsigned char c1, c2;

  do {
    c1 = *s1++;
    80025ea8:	00054783          	lbu	a5,0(a0)
    80025eac:	0505                	addi	a0,a0,1
    c2 = *s2++;
    80025eae:	0585                	addi	a1,a1,1
    80025eb0:	fff5c703          	lbu	a4,-1(a1)
  } while (c1 != 0 && c1 == c2);
    80025eb4:	c799                	beqz	a5,80025ec2 <strcmp+0x1a>
    80025eb6:	fee789e3          	beq	a5,a4,80025ea8 <strcmp>

  return c1 - c2;
    80025eba:	0007851b          	sext.w	a0,a5
}
    80025ebe:	9d19                	subw	a0,a0,a4
    80025ec0:	8082                	ret
    80025ec2:	4501                	li	a0,0
    80025ec4:	bfed                	j	80025ebe <strcmp+0x16>

0000000080025ec6 <strcpy>:

char* strcpy(char* dest, const char* src)
{
  char* d = dest;
    80025ec6:	87aa                	mv	a5,a0
  while ((*d++ = *src++))
    80025ec8:	0005c703          	lbu	a4,0(a1)
    80025ecc:	0585                	addi	a1,a1,1
    80025ece:	0785                	addi	a5,a5,1
    80025ed0:	fee78fa3          	sb	a4,-1(a5)
    80025ed4:	fb75                	bnez	a4,80025ec8 <strcpy+0x2>
    ;
  return dest;
}
    80025ed6:	8082                	ret

0000000080025ed8 <atol>:
long atol(const char* str)
{
  long res = 0;
  int sign = 0;

  while (*str == ' ')
    80025ed8:	00054683          	lbu	a3,0(a0)
    80025edc:	02000713          	li	a4,32
{
    80025ee0:	87aa                	mv	a5,a0
  while (*str == ' ')
    80025ee2:	00e69863          	bne	a3,a4,80025ef2 <atol+0x1a>
    80025ee6:	8736                	mv	a4,a3
    80025ee8:	0017c683          	lbu	a3,1(a5)
    str++;
    80025eec:	0785                	addi	a5,a5,1
  while (*str == ' ')
    80025eee:	fee68de3          	beq	a3,a4,80025ee8 <atol+0x10>

  if (*str == '-' || *str == '+') {
    80025ef2:	02d00713          	li	a4,45
    80025ef6:	02e68f63          	beq	a3,a4,80025f34 <atol+0x5c>
    80025efa:	02b00713          	li	a4,43
    80025efe:	02e68563          	beq	a3,a4,80025f28 <atol+0x50>
  int sign = 0;
    80025f02:	4581                	li	a1,0
    sign = *str == '-';
    str++;
  }

  while (*str) {
    80025f04:	ce8d                	beqz	a3,80025f3e <atol+0x66>
  int sign = 0;
    80025f06:	4501                	li	a0,0
    res *= 10;
    res += *str++ - '0';
    80025f08:	0785                	addi	a5,a5,1
    80025f0a:	fd06861b          	addiw	a2,a3,-48
    res *= 10;
    80025f0e:	00251713          	slli	a4,a0,0x2
  while (*str) {
    80025f12:	0007c683          	lbu	a3,0(a5)
    res *= 10;
    80025f16:	972a                	add	a4,a4,a0
    80025f18:	0706                	slli	a4,a4,0x1
    res += *str++ - '0';
    80025f1a:	00e60533          	add	a0,a2,a4
  while (*str) {
    80025f1e:	f6ed                	bnez	a3,80025f08 <atol+0x30>
  }

  return sign ? -res : res;
    80025f20:	c185                	beqz	a1,80025f40 <atol+0x68>
    80025f22:	40a00533          	neg	a0,a0
    80025f26:	8082                	ret
  while (*str) {
    80025f28:	0017c683          	lbu	a3,1(a5)
    str++;
    80025f2c:	0785                	addi	a5,a5,1
  while (*str) {
    80025f2e:	ca81                	beqz	a3,80025f3e <atol+0x66>
    sign = *str == '-';
    80025f30:	4581                	li	a1,0
    80025f32:	bfd1                	j	80025f06 <atol+0x2e>
  while (*str) {
    80025f34:	0017c683          	lbu	a3,1(a5)
    sign = *str == '-';
    80025f38:	4585                	li	a1,1
    str++;
    80025f3a:	97ae                	add	a5,a5,a1
  while (*str) {
    80025f3c:	f6e9                	bnez	a3,80025f06 <atol+0x2e>
  return sign ? -res : res;
    80025f3e:	4501                	li	a0,0
}
    80025f40:	8082                	ret

0000000080025f42 <_init>:

void _init(){

    80025f42:	8082                	ret

0000000080025f44 <mhandler_entry>:
.endm

.balign 0x4
.global mhandler_entry
mhandler_entry:
    SAVE_CONTEXT
    80025f44:	f0810113          	addi	sp,sp,-248
    80025f48:	e006                	sd	ra,0(sp)
    80025f4a:	e80e                	sd	gp,16(sp)
    80025f4c:	ec12                	sd	tp,24(sp)
    80025f4e:	f016                	sd	t0,32(sp)
    80025f50:	f41a                	sd	t1,40(sp)
    80025f52:	f81e                	sd	t2,48(sp)
    80025f54:	fc22                	sd	s0,56(sp)
    80025f56:	e0a6                	sd	s1,64(sp)
    80025f58:	e4aa                	sd	a0,72(sp)
    80025f5a:	e8ae                	sd	a1,80(sp)
    80025f5c:	ecb2                	sd	a2,88(sp)
    80025f5e:	f0b6                	sd	a3,96(sp)
    80025f60:	f4ba                	sd	a4,104(sp)
    80025f62:	f8be                	sd	a5,112(sp)
    80025f64:	fcc2                	sd	a6,120(sp)
    80025f66:	e146                	sd	a7,128(sp)
    80025f68:	e54a                	sd	s2,136(sp)
    80025f6a:	e94e                	sd	s3,144(sp)
    80025f6c:	ed52                	sd	s4,152(sp)
    80025f6e:	f156                	sd	s5,160(sp)
    80025f70:	f55a                	sd	s6,168(sp)
    80025f72:	f95e                	sd	s7,176(sp)
    80025f74:	fd62                	sd	s8,184(sp)
    80025f76:	e1e6                	sd	s9,192(sp)
    80025f78:	e5ea                	sd	s10,200(sp)
    80025f7a:	e9ee                	sd	s11,208(sp)
    80025f7c:	edf2                	sd	t3,216(sp)
    80025f7e:	f1f6                	sd	t4,224(sp)
    80025f80:	f5fa                	sd	t5,232(sp)
    80025f82:	f5fe                	sd	t6,232(sp)
    jal mhandler
    80025f84:	db9da0ef          	jal	80000d3c <mhandler>
    j _return
    80025f88:	a849                	j	8002601a <_return>
    80025f8a:	0001                	nop

0000000080025f8c <hshandler_entry>:

.balign 0x4
.global hshandler_entry
hshandler_entry:
    SAVE_CONTEXT
    80025f8c:	f0810113          	addi	sp,sp,-248
    80025f90:	e006                	sd	ra,0(sp)
    80025f92:	e80e                	sd	gp,16(sp)
    80025f94:	ec12                	sd	tp,24(sp)
    80025f96:	f016                	sd	t0,32(sp)
    80025f98:	f41a                	sd	t1,40(sp)
    80025f9a:	f81e                	sd	t2,48(sp)
    80025f9c:	fc22                	sd	s0,56(sp)
    80025f9e:	e0a6                	sd	s1,64(sp)
    80025fa0:	e4aa                	sd	a0,72(sp)
    80025fa2:	e8ae                	sd	a1,80(sp)
    80025fa4:	ecb2                	sd	a2,88(sp)
    80025fa6:	f0b6                	sd	a3,96(sp)
    80025fa8:	f4ba                	sd	a4,104(sp)
    80025faa:	f8be                	sd	a5,112(sp)
    80025fac:	fcc2                	sd	a6,120(sp)
    80025fae:	e146                	sd	a7,128(sp)
    80025fb0:	e54a                	sd	s2,136(sp)
    80025fb2:	e94e                	sd	s3,144(sp)
    80025fb4:	ed52                	sd	s4,152(sp)
    80025fb6:	f156                	sd	s5,160(sp)
    80025fb8:	f55a                	sd	s6,168(sp)
    80025fba:	f95e                	sd	s7,176(sp)
    80025fbc:	fd62                	sd	s8,184(sp)
    80025fbe:	e1e6                	sd	s9,192(sp)
    80025fc0:	e5ea                	sd	s10,200(sp)
    80025fc2:	e9ee                	sd	s11,208(sp)
    80025fc4:	edf2                	sd	t3,216(sp)
    80025fc6:	f1f6                	sd	t4,224(sp)
    80025fc8:	f5fa                	sd	t5,232(sp)
    80025fca:	f5fe                	sd	t6,232(sp)
    jal hshandler
    80025fcc:	fa3da0ef          	jal	80000f6e <hshandler>
    j _return
    80025fd0:	a0a9                	j	8002601a <_return>
    80025fd2:	0001                	nop

0000000080025fd4 <vshandler_entry>:

.balign 0x4
.global vshandler_entry
vshandler_entry:
    SAVE_CONTEXT
    80025fd4:	f0810113          	addi	sp,sp,-248
    80025fd8:	e006                	sd	ra,0(sp)
    80025fda:	e80e                	sd	gp,16(sp)
    80025fdc:	ec12                	sd	tp,24(sp)
    80025fde:	f016                	sd	t0,32(sp)
    80025fe0:	f41a                	sd	t1,40(sp)
    80025fe2:	f81e                	sd	t2,48(sp)
    80025fe4:	fc22                	sd	s0,56(sp)
    80025fe6:	e0a6                	sd	s1,64(sp)
    80025fe8:	e4aa                	sd	a0,72(sp)
    80025fea:	e8ae                	sd	a1,80(sp)
    80025fec:	ecb2                	sd	a2,88(sp)
    80025fee:	f0b6                	sd	a3,96(sp)
    80025ff0:	f4ba                	sd	a4,104(sp)
    80025ff2:	f8be                	sd	a5,112(sp)
    80025ff4:	fcc2                	sd	a6,120(sp)
    80025ff6:	e146                	sd	a7,128(sp)
    80025ff8:	e54a                	sd	s2,136(sp)
    80025ffa:	e94e                	sd	s3,144(sp)
    80025ffc:	ed52                	sd	s4,152(sp)
    80025ffe:	f156                	sd	s5,160(sp)
    80026000:	f55a                	sd	s6,168(sp)
    80026002:	f95e                	sd	s7,176(sp)
    80026004:	fd62                	sd	s8,184(sp)
    80026006:	e1e6                	sd	s9,192(sp)
    80026008:	e5ea                	sd	s10,200(sp)
    8002600a:	e9ee                	sd	s11,208(sp)
    8002600c:	edf2                	sd	t3,216(sp)
    8002600e:	f1f6                	sd	t4,224(sp)
    80026010:	f5fa                	sd	t5,232(sp)
    80026012:	f5fe                	sd	t6,232(sp)
    jal vshandler
    80026014:	98cdb0ef          	jal	800011a0 <vshandler>
    j _return
    80026018:	a009                	j	8002601a <_return>

000000008002601a <_return>:
    
_return:
    li t0, 4 //make sure PRIV_M is 4
    8002601a:	4291                	li	t0,4
    beq a0, t0, _return_from_m 
    8002601c:	04550563          	beq	a0,t0,80026066 <_return_from_m>

0000000080026020 <_return_from_s>:
_return_from_s:
    RESTORE_CONTEXT
    80026020:	6082                	ld	ra,0(sp)
    80026022:	61c2                	ld	gp,16(sp)
    80026024:	6262                	ld	tp,24(sp)
    80026026:	7282                	ld	t0,32(sp)
    80026028:	7322                	ld	t1,40(sp)
    8002602a:	73c2                	ld	t2,48(sp)
    8002602c:	7462                	ld	s0,56(sp)
    8002602e:	6486                	ld	s1,64(sp)
    80026030:	6526                	ld	a0,72(sp)
    80026032:	65c6                	ld	a1,80(sp)
    80026034:	6666                	ld	a2,88(sp)
    80026036:	7686                	ld	a3,96(sp)
    80026038:	7726                	ld	a4,104(sp)
    8002603a:	77c6                	ld	a5,112(sp)
    8002603c:	7866                	ld	a6,120(sp)
    8002603e:	688a                	ld	a7,128(sp)
    80026040:	692a                	ld	s2,136(sp)
    80026042:	69ca                	ld	s3,144(sp)
    80026044:	6a6a                	ld	s4,152(sp)
    80026046:	7a8a                	ld	s5,160(sp)
    80026048:	7b2a                	ld	s6,168(sp)
    8002604a:	7bca                	ld	s7,176(sp)
    8002604c:	7c6a                	ld	s8,184(sp)
    8002604e:	6c8e                	ld	s9,192(sp)
    80026050:	6d2e                	ld	s10,200(sp)
    80026052:	6dce                	ld	s11,208(sp)
    80026054:	6e6e                	ld	t3,216(sp)
    80026056:	7e8e                	ld	t4,224(sp)
    80026058:	7f2e                	ld	t5,232(sp)
    8002605a:	7fce                	ld	t6,240(sp)
    8002605c:	0f810113          	addi	sp,sp,248
    sret
    80026060:	10200073          	sret
    j   .
    80026064:	a001                	j	80026064 <_return_from_s+0x44>

0000000080026066 <_return_from_m>:
_return_from_m:
    RESTORE_CONTEXT
    80026066:	6082                	ld	ra,0(sp)
    80026068:	61c2                	ld	gp,16(sp)
    8002606a:	6262                	ld	tp,24(sp)
    8002606c:	7282                	ld	t0,32(sp)
    8002606e:	7322                	ld	t1,40(sp)
    80026070:	73c2                	ld	t2,48(sp)
    80026072:	7462                	ld	s0,56(sp)
    80026074:	6486                	ld	s1,64(sp)
    80026076:	6526                	ld	a0,72(sp)
    80026078:	65c6                	ld	a1,80(sp)
    8002607a:	6666                	ld	a2,88(sp)
    8002607c:	7686                	ld	a3,96(sp)
    8002607e:	7726                	ld	a4,104(sp)
    80026080:	77c6                	ld	a5,112(sp)
    80026082:	7866                	ld	a6,120(sp)
    80026084:	688a                	ld	a7,128(sp)
    80026086:	692a                	ld	s2,136(sp)
    80026088:	69ca                	ld	s3,144(sp)
    8002608a:	6a6a                	ld	s4,152(sp)
    8002608c:	7a8a                	ld	s5,160(sp)
    8002608e:	7b2a                	ld	s6,168(sp)
    80026090:	7bca                	ld	s7,176(sp)
    80026092:	7c6a                	ld	s8,184(sp)
    80026094:	6c8e                	ld	s9,192(sp)
    80026096:	6d2e                	ld	s10,200(sp)
    80026098:	6dce                	ld	s11,208(sp)
    8002609a:	6e6e                	ld	t3,216(sp)
    8002609c:	7e8e                	ld	t4,224(sp)
    8002609e:	7f2e                	ld	t5,232(sp)
    800260a0:	7fce                	ld	t6,240(sp)
    800260a2:	0f810113          	addi	sp,sp,248
    mret
    800260a6:	30200073          	mret

Disassembly of section .text.startup:

00000000800260aa <main>:

void main(){
    800260aa:	1101                	addi	sp,sp,-32

    INFO("risc-v hypervisor extension tests");
    800260ac:	00002517          	auipc	a0,0x2
    800260b0:	d7c50513          	addi	a0,a0,-644 # 80027e28 <__func__.0+0x3c8>
void main(){
    800260b4:	ec06                	sd	ra,24(sp)
    800260b6:	e822                	sd	s0,16(sp)
    800260b8:	e426                	sd	s1,8(sp)
    800260ba:	e04a                	sd	s2,0(sp)
    INFO("risc-v hypervisor extension tests");
    800260bc:	c3bff0ef          	jal	80025cf6 <printf>
    800260c0:	4529                	li	a0,10
    800260c2:	a3ffe0ef          	jal	80024b00 <putchar>
    // printf("%f\n",CSRR(CSR_SSCRATCH));
    if(check_misa_h()){
    800260c6:	c46da0ef          	jal	8000050c <check_misa_h>
    800260ca:	c539                	beqz	a0,80026118 <main+0x6e>
        
        reset_state();
    800260cc:	be0db0ef          	jal	800014ac <reset_state>
        for(int i = 0; i < test_table_size; i++){
    800260d0:	0000c497          	auipc	s1,0xc
    800260d4:	3d048493          	addi	s1,s1,976 # 800324a0 <test_table_size>
    800260d8:	609c                	ld	a5,0(s1)
    800260da:	4401                	li	s0,0
    800260dc:	0000c917          	auipc	s2,0xc
    800260e0:	3cc90913          	addi	s2,s2,972 # 800324a8 <test_table>
    800260e4:	cf91                	beqz	a5,80026100 <main+0x56>
            reset_state();
    800260e6:	bc6db0ef          	jal	800014ac <reset_state>
            test_table[i]();
    800260ea:	00093783          	ld	a5,0(s2)
    800260ee:	00341713          	slli	a4,s0,0x3
        for(int i = 0; i < test_table_size; i++){
    800260f2:	0405                	addi	s0,s0,1
            test_table[i]();
    800260f4:	97ba                	add	a5,a5,a4
    800260f6:	639c                	ld	a5,0(a5)
    800260f8:	9782                	jalr	a5
        for(int i = 0; i < test_table_size; i++){
    800260fa:	609c                	ld	a5,0(s1)
    800260fc:	fef465e3          	bltu	s0,a5,800260e6 <main+0x3c>
            
    }else{
        printf("hypervisor extension is not supported!\n");
    }

    INFO("end");
    80026100:	00002517          	auipc	a0,0x2
    80026104:	d7850513          	addi	a0,a0,-648 # 80027e78 <__func__.0+0x418>
    80026108:	befff0ef          	jal	80025cf6 <printf>
    8002610c:	4529                	li	a0,10
    8002610e:	9f3fe0ef          	jal	80024b00 <putchar>
    exit(0);
    80026112:	4501                	li	a0,0
    80026114:	8a1ff0ef          	jal	800259b4 <exit>
        printf("hypervisor extension is not supported!\n");
    80026118:	00002517          	auipc	a0,0x2
    8002611c:	d3850513          	addi	a0,a0,-712 # 80027e50 <__func__.0+0x3f0>
    80026120:	903ff0ef          	jal	80025a22 <puts>
    80026124:	bff1                	j	80026100 <main+0x56>
{
    80026126:	1141                	addi	sp,sp,-16
  printstr("Implement main(), foo!\n");
    80026128:	0000a517          	auipc	a0,0xa
    8002612c:	33850513          	addi	a0,a0,824 # 80030460 <__func__.0+0x8a00>
{
    80026130:	e406                	sd	ra,8(sp)
  printstr("Implement main(), foo!\n");
    80026132:	899ff0ef          	jal	800259ca <printstr>
}
    80026136:	60a2                	ld	ra,8(sp)
    80026138:	557d                	li	a0,-1
    8002613a:	0141                	addi	sp,sp,16
    8002613c:	8082                	ret
