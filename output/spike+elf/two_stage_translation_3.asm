
build/spike/rvh_test.elf:     file format elf64-littleriscv


Disassembly of section .boot:

0000000080000000 <_boot>:

.section .boot, "ax" 
.globl _boot
_boot:
    bnez a0, .
    80000000:	e101                	bnez	a0,80000000 <_boot>
    csrwi    sscratch, 0xf
    80000002:	1407d073          	csrw	sscratch,15
    /* Initialize stack pointer */
    la sp, __stack_top
    80000006:	002ff117          	auipc	sp,0x2ff
    8000000a:	ffa10113          	add	sp,sp,-6 # 802ff000 <__stack_top>

    /* Clear bss */ 
    la a0, __bss_start
    8000000e:	00027517          	auipc	a0,0x27
    80000012:	ff250513          	add	a0,a0,-14 # 80027000 <__bss_start>
    la a1, __bss_end
    80000016:	0003d597          	auipc	a1,0x3d
    8000001a:	0c258593          	add	a1,a1,194 # 8003d0d8 <__bss_end>
    bgeu a0, a1, 2f
    8000001e:	00b57763          	bgeu	a0,a1,8000002c <_boot+0x2c>
1:
    sw zero, (a0)
    80000022:	00052023          	sw	zero,0(a0)
    addi a0, a0, 4
    80000026:	0511                	add	a0,a0,4
    bltu a0, a1, 1b
    80000028:	feb56de3          	bltu	a0,a1,80000022 <_boot+0x22>
2:
    call _init
    8000002c:	5fe1b0ef          	jal	8001b62a <_init>
    call main
    80000030:	7621b0ef          	jal	8001b792 <main>
    li a0, 0
    80000034:	4501                	li	a0,0
    call exit
    80000036:	04e1b0ef          	jal	8001b084 <exit>
    j .
    8000003a:	a001                	j	8000003a <_boot+0x3a>

Disassembly of section .text:

000000008000003c <check_csr_field_spec>:
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <rvh_test.h>

bool check_csr_field_spec(){
    8000003c:	7179                	add	sp,sp,-48

    TEST_START();
    8000003e:	0001b597          	auipc	a1,0x1b
    80000042:	7ea58593          	add	a1,a1,2026 # 8001b828 <__func__.1>
    80000046:	0001d517          	auipc	a0,0x1d
    8000004a:	f4a50513          	add	a0,a0,-182 # 8001cf90 <__func__.1+0x2e8>
bool check_csr_field_spec(){
    8000004e:	f406                	sd	ra,40(sp)
    80000050:	f022                	sd	s0,32(sp)
    80000052:	ec26                	sd	s1,24(sp)
    80000054:	e84a                	sd	s2,16(sp)
    80000056:	e44e                	sd	s3,8(sp)
    TEST_START();
    80000058:	38e1b0ef          	jal	8001b3e6 <printf>
    8000005c:	4529                	li	a0,10
    8000005e:	25a1a0ef          	jal	8001a2b8 <putchar>

    /* this assumes machine mode */
    //check_csr_wrrd("mstatus", mstatus, (uint64_t) -1, 0x800000ca007e79aaULL);
    //check_csr_wrrd("mideleg", mideleg, (uint64_t) -1, 0x1666);
    //check_csr_wrrd("medeleg", medeleg, (uint64_t) -1, 0xb15d);
    check_csr_wrrd("mideleg", mideleg, (uint64_t)0, 0x444);
    80000062:	303024f3          	csrr	s1,mideleg
    80000066:	30305073          	csrw	mideleg,0
    8000006a:	30302473          	csrr	s0,mideleg
    8000006e:	0001d617          	auipc	a2,0x1d
    80000072:	f3260613          	add	a2,a2,-206 # 8001cfa0 <__func__.1+0x2f8>
    80000076:	08200593          	li	a1,130
    8000007a:	0001d517          	auipc	a0,0x1d
    8000007e:	f2e50513          	add	a0,a0,-210 # 8001cfa8 <__func__.1+0x300>
    80000082:	3641b0ef          	jal	8001b3e6 <printf>
    80000086:	44400793          	li	a5,1092
    8000008a:	46f40263          	beq	s0,a5,800004ee <check_csr_field_spec+0x4b2>
    8000008e:	0001d597          	auipc	a1,0x1d
    80000092:	ef258593          	add	a1,a1,-270 # 8001cf80 <__func__.1+0x2d8>
    80000096:	0001d517          	auipc	a0,0x1d
    8000009a:	f2a50513          	add	a0,a0,-214 # 8001cfc0 <__func__.1+0x318>
    8000009e:	3481b0ef          	jal	8001b3e6 <printf>
    800000a2:	0001d517          	auipc	a0,0x1d
    800000a6:	f2650513          	add	a0,a0,-218 # 8001cfc8 <__func__.1+0x320>
    800000aa:	33c1b0ef          	jal	8001b3e6 <printf>
    800000ae:	8622                	mv	a2,s0
    800000b0:	44400693          	li	a3,1092
    800000b4:	4581                	li	a1,0
    800000b6:	0001d517          	auipc	a0,0x1d
    800000ba:	f1a50513          	add	a0,a0,-230 # 8001cfd0 <__func__.1+0x328>
    800000be:	3281b0ef          	jal	8001b3e6 <printf>
    800000c2:	02900513          	li	a0,41
    800000c6:	1f21a0ef          	jal	8001a2b8 <putchar>
    800000ca:	4529                	li	a0,10
    800000cc:	1ec1a0ef          	jal	8001a2b8 <putchar>
    800000d0:	4401                	li	s0,0
    800000d2:	30349073          	csrw	mideleg,s1
    //check_csr_wrrd("mip", mip, (uint64_t) -1, 0x6e6);
    //check_csr_wrrd("mie", mie, (uint64_t) -1, 0x1eee);
    check_csr_wrrd("mtinst", CSR_MTINST, (uint64_t) -1, (uint64_t) -1);
    800000d6:	34a029f3          	csrr	s3,0x34a
    800000da:	54fd                	li	s1,-1
    800000dc:	34a49073          	csrw	0x34a,s1
    800000e0:	34a02973          	csrr	s2,0x34a
    800000e4:	0001d617          	auipc	a2,0x1d
    800000e8:	f0460613          	add	a2,a2,-252 # 8001cfe8 <__func__.1+0x340>
    800000ec:	08200593          	li	a1,130
    800000f0:	0001d517          	auipc	a0,0x1d
    800000f4:	eb850513          	add	a0,a0,-328 # 8001cfa8 <__func__.1+0x300>
    800000f8:	2ee1b0ef          	jal	8001b3e6 <printf>
    800000fc:	30990f63          	beq	s2,s1,8000041a <check_csr_field_spec+0x3de>
    80000100:	0001d597          	auipc	a1,0x1d
    80000104:	e8058593          	add	a1,a1,-384 # 8001cf80 <__func__.1+0x2d8>
    80000108:	0001d517          	auipc	a0,0x1d
    8000010c:	eb850513          	add	a0,a0,-328 # 8001cfc0 <__func__.1+0x318>
    80000110:	2d61b0ef          	jal	8001b3e6 <printf>
    80000114:	0001d517          	auipc	a0,0x1d
    80000118:	eb450513          	add	a0,a0,-332 # 8001cfc8 <__func__.1+0x320>
    8000011c:	2ca1b0ef          	jal	8001b3e6 <printf>
    80000120:	56fd                	li	a3,-1
    80000122:	864a                	mv	a2,s2
    80000124:	55fd                	li	a1,-1
    80000126:	0001d517          	auipc	a0,0x1d
    8000012a:	eaa50513          	add	a0,a0,-342 # 8001cfd0 <__func__.1+0x328>
    8000012e:	2b81b0ef          	jal	8001b3e6 <printf>
    80000132:	02900513          	li	a0,41
    80000136:	1821a0ef          	jal	8001a2b8 <putchar>
    8000013a:	4529                	li	a0,10
    8000013c:	17c1a0ef          	jal	8001a2b8 <putchar>
    80000140:	4401                	li	s0,0
    80000142:	34a99073          	csrw	0x34a,s3
    check_csr_wrrd("mtval2", CSR_MTVAL2, (uint64_t) -1, (uint64_t) -1);
    80000146:	34b029f3          	csrr	s3,0x34b
    8000014a:	54fd                	li	s1,-1
    8000014c:	34b49073          	csrw	0x34b,s1
    80000150:	34b02973          	csrr	s2,0x34b
    80000154:	0001d617          	auipc	a2,0x1d
    80000158:	e9c60613          	add	a2,a2,-356 # 8001cff0 <__func__.1+0x348>
    8000015c:	08200593          	li	a1,130
    80000160:	0001d517          	auipc	a0,0x1d
    80000164:	e4850513          	add	a0,a0,-440 # 8001cfa8 <__func__.1+0x300>
    80000168:	27e1b0ef          	jal	8001b3e6 <printf>
    8000016c:	36990363          	beq	s2,s1,800004d2 <check_csr_field_spec+0x496>
    80000170:	0001d597          	auipc	a1,0x1d
    80000174:	e1058593          	add	a1,a1,-496 # 8001cf80 <__func__.1+0x2d8>
    80000178:	0001d517          	auipc	a0,0x1d
    8000017c:	e4850513          	add	a0,a0,-440 # 8001cfc0 <__func__.1+0x318>
    80000180:	2661b0ef          	jal	8001b3e6 <printf>
    80000184:	0001d517          	auipc	a0,0x1d
    80000188:	e4450513          	add	a0,a0,-444 # 8001cfc8 <__func__.1+0x320>
    8000018c:	25a1b0ef          	jal	8001b3e6 <printf>
    80000190:	56fd                	li	a3,-1
    80000192:	864a                	mv	a2,s2
    80000194:	55fd                	li	a1,-1
    80000196:	0001d517          	auipc	a0,0x1d
    8000019a:	e3a50513          	add	a0,a0,-454 # 8001cfd0 <__func__.1+0x328>
    8000019e:	2481b0ef          	jal	8001b3e6 <printf>
    800001a2:	02900513          	li	a0,41
    800001a6:	1121a0ef          	jal	8001a2b8 <putchar>
    800001aa:	4529                	li	a0,10
    800001ac:	10c1a0ef          	jal	8001a2b8 <putchar>
    800001b0:	4401                	li	s0,0
    800001b2:	34b99073          	csrw	0x34b,s3
    //check_csr_wrrd("hstatus", CSR_HSTATUS, (uint64_t) -1, 0x30053f3e0);
    //check_csr_wrrd("hideleg", CSR_HIDELEG, (uint64_t) -1, 0x444);
    //check_csr_wrrd("hedeleg", CSR_HEDELEG, (uint64_t) -1, 0xb1ff);
    //check_csr_wrrd("hvip", CSR_HVIP, (uint64_t) -1, 0x444);
    //check_csr_wrrd("hip", CSR_HIP, (uint64_t) -1, 0x4);
    check_csr_wrrd("hie", CSR_HIE, (uint64_t) -1, 0x444);
    800001b6:	60402973          	csrr	s2,hie
    800001ba:	57fd                	li	a5,-1
    800001bc:	60479073          	csrw	hie,a5
    800001c0:	604024f3          	csrr	s1,hie
    800001c4:	0001d617          	auipc	a2,0x1d
    800001c8:	e3460613          	add	a2,a2,-460 # 8001cff8 <__func__.1+0x350>
    800001cc:	08200593          	li	a1,130
    800001d0:	0001d517          	auipc	a0,0x1d
    800001d4:	dd850513          	add	a0,a0,-552 # 8001cfa8 <__func__.1+0x300>
    800001d8:	20e1b0ef          	jal	8001b3e6 <printf>
    800001dc:	44400793          	li	a5,1092
    800001e0:	2cf48b63          	beq	s1,a5,800004b6 <check_csr_field_spec+0x47a>
    800001e4:	0001d597          	auipc	a1,0x1d
    800001e8:	d9c58593          	add	a1,a1,-612 # 8001cf80 <__func__.1+0x2d8>
    800001ec:	0001d517          	auipc	a0,0x1d
    800001f0:	dd450513          	add	a0,a0,-556 # 8001cfc0 <__func__.1+0x318>
    800001f4:	1f21b0ef          	jal	8001b3e6 <printf>
    800001f8:	0001d517          	auipc	a0,0x1d
    800001fc:	dd050513          	add	a0,a0,-560 # 8001cfc8 <__func__.1+0x320>
    80000200:	1e61b0ef          	jal	8001b3e6 <printf>
    80000204:	44400693          	li	a3,1092
    80000208:	8626                	mv	a2,s1
    8000020a:	55fd                	li	a1,-1
    8000020c:	0001d517          	auipc	a0,0x1d
    80000210:	dc450513          	add	a0,a0,-572 # 8001cfd0 <__func__.1+0x328>
    80000214:	1d21b0ef          	jal	8001b3e6 <printf>
    80000218:	02900513          	li	a0,41
    8000021c:	09c1a0ef          	jal	8001a2b8 <putchar>
    80000220:	4529                	li	a0,10
    80000222:	0961a0ef          	jal	8001a2b8 <putchar>
    80000226:	4401                	li	s0,0
    80000228:	60491073          	csrw	hie,s2
    check_csr_wrrd("htval", CSR_HTVAL, (uint64_t) -1, (uint64_t) -1);
    8000022c:	643029f3          	csrr	s3,htval
    80000230:	54fd                	li	s1,-1
    80000232:	64349073          	csrw	htval,s1
    80000236:	64302973          	csrr	s2,htval
    8000023a:	0001d617          	auipc	a2,0x1d
    8000023e:	dc660613          	add	a2,a2,-570 # 8001d000 <__func__.1+0x358>
    80000242:	08200593          	li	a1,130
    80000246:	0001d517          	auipc	a0,0x1d
    8000024a:	d6250513          	add	a0,a0,-670 # 8001cfa8 <__func__.1+0x300>
    8000024e:	1981b0ef          	jal	8001b3e6 <printf>
    80000252:	24990463          	beq	s2,s1,8000049a <check_csr_field_spec+0x45e>
    80000256:	0001d597          	auipc	a1,0x1d
    8000025a:	d2a58593          	add	a1,a1,-726 # 8001cf80 <__func__.1+0x2d8>
    8000025e:	0001d517          	auipc	a0,0x1d
    80000262:	d6250513          	add	a0,a0,-670 # 8001cfc0 <__func__.1+0x318>
    80000266:	1801b0ef          	jal	8001b3e6 <printf>
    8000026a:	0001d517          	auipc	a0,0x1d
    8000026e:	d5e50513          	add	a0,a0,-674 # 8001cfc8 <__func__.1+0x320>
    80000272:	1741b0ef          	jal	8001b3e6 <printf>
    80000276:	56fd                	li	a3,-1
    80000278:	864a                	mv	a2,s2
    8000027a:	55fd                	li	a1,-1
    8000027c:	0001d517          	auipc	a0,0x1d
    80000280:	d5450513          	add	a0,a0,-684 # 8001cfd0 <__func__.1+0x328>
    80000284:	1621b0ef          	jal	8001b3e6 <printf>
    80000288:	02900513          	li	a0,41
    8000028c:	02c1a0ef          	jal	8001a2b8 <putchar>
    80000290:	4529                	li	a0,10
    80000292:	0261a0ef          	jal	8001a2b8 <putchar>
    80000296:	4401                	li	s0,0
    80000298:	64399073          	csrw	htval,s3
    check_csr_wrrd("htinst", CSR_HTINST, (uint64_t) -1, (uint64_t) -1);
    8000029c:	64a029f3          	csrr	s3,htinst
    800002a0:	54fd                	li	s1,-1
    800002a2:	64a49073          	csrw	htinst,s1
    800002a6:	64a02973          	csrr	s2,htinst
    800002aa:	0001d617          	auipc	a2,0x1d
    800002ae:	d5e60613          	add	a2,a2,-674 # 8001d008 <__func__.1+0x360>
    800002b2:	08200593          	li	a1,130
    800002b6:	0001d517          	auipc	a0,0x1d
    800002ba:	cf250513          	add	a0,a0,-782 # 8001cfa8 <__func__.1+0x300>
    800002be:	1281b0ef          	jal	8001b3e6 <printf>
    800002c2:	1a990e63          	beq	s2,s1,8000047e <check_csr_field_spec+0x442>
    800002c6:	0001d597          	auipc	a1,0x1d
    800002ca:	cba58593          	add	a1,a1,-838 # 8001cf80 <__func__.1+0x2d8>
    800002ce:	0001d517          	auipc	a0,0x1d
    800002d2:	cf250513          	add	a0,a0,-782 # 8001cfc0 <__func__.1+0x318>
    800002d6:	1101b0ef          	jal	8001b3e6 <printf>
    800002da:	0001d517          	auipc	a0,0x1d
    800002de:	cee50513          	add	a0,a0,-786 # 8001cfc8 <__func__.1+0x320>
    800002e2:	1041b0ef          	jal	8001b3e6 <printf>
    800002e6:	56fd                	li	a3,-1
    800002e8:	864a                	mv	a2,s2
    800002ea:	55fd                	li	a1,-1
    800002ec:	0001d517          	auipc	a0,0x1d
    800002f0:	ce450513          	add	a0,a0,-796 # 8001cfd0 <__func__.1+0x328>
    800002f4:	0f21b0ef          	jal	8001b3e6 <printf>
    800002f8:	02900513          	li	a0,41
    800002fc:	7bd190ef          	jal	8001a2b8 <putchar>
    80000300:	4529                	li	a0,10
    80000302:	7b7190ef          	jal	8001a2b8 <putchar>
    80000306:	4401                	li	s0,0
    80000308:	64a99073          	csrw	htinst,s3
    //check_csr_wrrd("hgatp", CSR_HGATP, (8ULL << 60) | (1ULL << 60)-1, 0x80000000000fffffULL);
    //check_csr_wrrd("vsstatus", CSR_VSSTATUS, (uint64_t) -1, 0x80000000000c6122ULL);
    //check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vstvec", CSR_VSTVEC, (uint64_t) -1, 0xffffffffffffff01ULL);
    check_csr_wrrd("vsscratch", CSR_VSSCRATCH, (uint64_t) -1, (uint64_t) -1);
    8000030c:	240029f3          	csrr	s3,vsscratch
    80000310:	54fd                	li	s1,-1
    80000312:	24049073          	csrw	vsscratch,s1
    80000316:	24002973          	csrr	s2,vsscratch
    8000031a:	0001d617          	auipc	a2,0x1d
    8000031e:	cf660613          	add	a2,a2,-778 # 8001d010 <__func__.1+0x368>
    80000322:	08200593          	li	a1,130
    80000326:	0001d517          	auipc	a0,0x1d
    8000032a:	c8250513          	add	a0,a0,-894 # 8001cfa8 <__func__.1+0x300>
    8000032e:	0b81b0ef          	jal	8001b3e6 <printf>
    80000332:	12990863          	beq	s2,s1,80000462 <check_csr_field_spec+0x426>
    80000336:	0001d597          	auipc	a1,0x1d
    8000033a:	c4a58593          	add	a1,a1,-950 # 8001cf80 <__func__.1+0x2d8>
    8000033e:	0001d517          	auipc	a0,0x1d
    80000342:	c8250513          	add	a0,a0,-894 # 8001cfc0 <__func__.1+0x318>
    80000346:	0a01b0ef          	jal	8001b3e6 <printf>
    8000034a:	0001d517          	auipc	a0,0x1d
    8000034e:	c7e50513          	add	a0,a0,-898 # 8001cfc8 <__func__.1+0x320>
    80000352:	0941b0ef          	jal	8001b3e6 <printf>
    80000356:	56fd                	li	a3,-1
    80000358:	864a                	mv	a2,s2
    8000035a:	55fd                	li	a1,-1
    8000035c:	0001d517          	auipc	a0,0x1d
    80000360:	c7450513          	add	a0,a0,-908 # 8001cfd0 <__func__.1+0x328>
    80000364:	0821b0ef          	jal	8001b3e6 <printf>
    80000368:	02900513          	li	a0,41
    8000036c:	74d190ef          	jal	8001a2b8 <putchar>
    80000370:	4529                	li	a0,10
    80000372:	747190ef          	jal	8001a2b8 <putchar>
    80000376:	4401                	li	s0,0
    80000378:	24099073          	csrw	vsscratch,s3
    //check_csr_wrrd("vsepc", CSR_VSEPC, (uint64_t) -1, 0xfffffffffffffffeULL);
    //check_csr_wrrd("vscause", CSR_VSCAUSE, (uint64_t) -1, 0x800000000000001fULL);
    check_csr_wrrd("vstval", CSR_VSTVAL, (uint64_t) -1, 0xffffffffffffffffULL);
    8000037c:	243029f3          	csrr	s3,vstval
    80000380:	54fd                	li	s1,-1
    80000382:	24349073          	csrw	vstval,s1
    80000386:	24302973          	csrr	s2,vstval
    8000038a:	0001d617          	auipc	a2,0x1d
    8000038e:	c9660613          	add	a2,a2,-874 # 8001d020 <__func__.1+0x378>
    80000392:	08200593          	li	a1,130
    80000396:	0001d517          	auipc	a0,0x1d
    8000039a:	c1250513          	add	a0,a0,-1006 # 8001cfa8 <__func__.1+0x300>
    8000039e:	0481b0ef          	jal	8001b3e6 <printf>
    800003a2:	08990a63          	beq	s2,s1,80000436 <check_csr_field_spec+0x3fa>
    800003a6:	0001d597          	auipc	a1,0x1d
    800003aa:	bda58593          	add	a1,a1,-1062 # 8001cf80 <__func__.1+0x2d8>
    800003ae:	0001d517          	auipc	a0,0x1d
    800003b2:	c1250513          	add	a0,a0,-1006 # 8001cfc0 <__func__.1+0x318>
    800003b6:	0301b0ef          	jal	8001b3e6 <printf>
    800003ba:	0001d517          	auipc	a0,0x1d
    800003be:	c0e50513          	add	a0,a0,-1010 # 8001cfc8 <__func__.1+0x320>
    800003c2:	0241b0ef          	jal	8001b3e6 <printf>
    800003c6:	56fd                	li	a3,-1
    800003c8:	864a                	mv	a2,s2
    800003ca:	55fd                	li	a1,-1
    800003cc:	0001d517          	auipc	a0,0x1d
    800003d0:	c0450513          	add	a0,a0,-1020 # 8001cfd0 <__func__.1+0x328>
    800003d4:	0121b0ef          	jal	8001b3e6 <printf>
    800003d8:	02900513          	li	a0,41
    800003dc:	6dd190ef          	jal	8001a2b8 <putchar>
    800003e0:	4529                	li	a0,10
    800003e2:	6d7190ef          	jal	8001a2b8 <putchar>
    800003e6:	24399073          	csrw	vstval,s3
    800003ea:	4401                	li	s0,0
    //check_csr_wrrd("vsatp", CSR_VSATP, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vsatp", CSR_VSATP, (8ULL << 60) | (1ULL << 60)-1, 0x80000000000fffffULL);

    TEST_END();
    800003ec:	0001d597          	auipc	a1,0x1d
    800003f0:	b9458593          	add	a1,a1,-1132 # 8001cf80 <__func__.1+0x2d8>
    800003f4:	0001d517          	auipc	a0,0x1d
    800003f8:	c3450513          	add	a0,a0,-972 # 8001d028 <__func__.1+0x380>
    800003fc:	7eb1a0ef          	jal	8001b3e6 <printf>
    80000400:	4511                	li	a0,4
    80000402:	6dc000ef          	jal	80000ade <goto_priv>
    80000406:	721000ef          	jal	80001326 <reset_state>
}
    8000040a:	70a2                	ld	ra,40(sp)
    8000040c:	8522                	mv	a0,s0
    8000040e:	7402                	ld	s0,32(sp)
    80000410:	64e2                	ld	s1,24(sp)
    80000412:	6942                	ld	s2,16(sp)
    80000414:	69a2                	ld	s3,8(sp)
    80000416:	6145                	add	sp,sp,48
    80000418:	8082                	ret
    check_csr_wrrd("mtinst", CSR_MTINST, (uint64_t) -1, (uint64_t) -1);
    8000041a:	0001d597          	auipc	a1,0x1d
    8000041e:	b5658593          	add	a1,a1,-1194 # 8001cf70 <__func__.1+0x2c8>
    80000422:	0001d517          	auipc	a0,0x1d
    80000426:	b9e50513          	add	a0,a0,-1122 # 8001cfc0 <__func__.1+0x318>
    8000042a:	7bd1a0ef          	jal	8001b3e6 <printf>
    8000042e:	4529                	li	a0,10
    80000430:	689190ef          	jal	8001a2b8 <putchar>
    80000434:	b339                	j	80000142 <check_csr_field_spec+0x106>
    check_csr_wrrd("vstval", CSR_VSTVAL, (uint64_t) -1, 0xffffffffffffffffULL);
    80000436:	0001d597          	auipc	a1,0x1d
    8000043a:	b3a58593          	add	a1,a1,-1222 # 8001cf70 <__func__.1+0x2c8>
    8000043e:	0001d517          	auipc	a0,0x1d
    80000442:	b8250513          	add	a0,a0,-1150 # 8001cfc0 <__func__.1+0x318>
    80000446:	7a11a0ef          	jal	8001b3e6 <printf>
    8000044a:	4529                	li	a0,10
    8000044c:	66d190ef          	jal	8001a2b8 <putchar>
    80000450:	d859                	beqz	s0,800003e6 <check_csr_field_spec+0x3aa>
    80000452:	24399073          	csrw	vstval,s3
    80000456:	4405                	li	s0,1
    TEST_END();
    80000458:	0001d597          	auipc	a1,0x1d
    8000045c:	b1858593          	add	a1,a1,-1256 # 8001cf70 <__func__.1+0x2c8>
    80000460:	bf51                	j	800003f4 <check_csr_field_spec+0x3b8>
    check_csr_wrrd("vsscratch", CSR_VSSCRATCH, (uint64_t) -1, (uint64_t) -1);
    80000462:	0001d597          	auipc	a1,0x1d
    80000466:	b0e58593          	add	a1,a1,-1266 # 8001cf70 <__func__.1+0x2c8>
    8000046a:	0001d517          	auipc	a0,0x1d
    8000046e:	b5650513          	add	a0,a0,-1194 # 8001cfc0 <__func__.1+0x318>
    80000472:	7751a0ef          	jal	8001b3e6 <printf>
    80000476:	4529                	li	a0,10
    80000478:	641190ef          	jal	8001a2b8 <putchar>
    8000047c:	bdf5                	j	80000378 <check_csr_field_spec+0x33c>
    check_csr_wrrd("htinst", CSR_HTINST, (uint64_t) -1, (uint64_t) -1);
    8000047e:	0001d597          	auipc	a1,0x1d
    80000482:	af258593          	add	a1,a1,-1294 # 8001cf70 <__func__.1+0x2c8>
    80000486:	0001d517          	auipc	a0,0x1d
    8000048a:	b3a50513          	add	a0,a0,-1222 # 8001cfc0 <__func__.1+0x318>
    8000048e:	7591a0ef          	jal	8001b3e6 <printf>
    80000492:	4529                	li	a0,10
    80000494:	625190ef          	jal	8001a2b8 <putchar>
    80000498:	bd85                	j	80000308 <check_csr_field_spec+0x2cc>
    check_csr_wrrd("htval", CSR_HTVAL, (uint64_t) -1, (uint64_t) -1);
    8000049a:	0001d597          	auipc	a1,0x1d
    8000049e:	ad658593          	add	a1,a1,-1322 # 8001cf70 <__func__.1+0x2c8>
    800004a2:	0001d517          	auipc	a0,0x1d
    800004a6:	b1e50513          	add	a0,a0,-1250 # 8001cfc0 <__func__.1+0x318>
    800004aa:	73d1a0ef          	jal	8001b3e6 <printf>
    800004ae:	4529                	li	a0,10
    800004b0:	609190ef          	jal	8001a2b8 <putchar>
    800004b4:	b3d5                	j	80000298 <check_csr_field_spec+0x25c>
    check_csr_wrrd("hie", CSR_HIE, (uint64_t) -1, 0x444);
    800004b6:	0001d597          	auipc	a1,0x1d
    800004ba:	aba58593          	add	a1,a1,-1350 # 8001cf70 <__func__.1+0x2c8>
    800004be:	0001d517          	auipc	a0,0x1d
    800004c2:	b0250513          	add	a0,a0,-1278 # 8001cfc0 <__func__.1+0x318>
    800004c6:	7211a0ef          	jal	8001b3e6 <printf>
    800004ca:	4529                	li	a0,10
    800004cc:	5ed190ef          	jal	8001a2b8 <putchar>
    800004d0:	bba1                	j	80000228 <check_csr_field_spec+0x1ec>
    check_csr_wrrd("mtval2", CSR_MTVAL2, (uint64_t) -1, (uint64_t) -1);
    800004d2:	0001d597          	auipc	a1,0x1d
    800004d6:	a9e58593          	add	a1,a1,-1378 # 8001cf70 <__func__.1+0x2c8>
    800004da:	0001d517          	auipc	a0,0x1d
    800004de:	ae650513          	add	a0,a0,-1306 # 8001cfc0 <__func__.1+0x318>
    800004e2:	7051a0ef          	jal	8001b3e6 <printf>
    800004e6:	4529                	li	a0,10
    800004e8:	5d1190ef          	jal	8001a2b8 <putchar>
    800004ec:	b1d9                	j	800001b2 <check_csr_field_spec+0x176>
    check_csr_wrrd("mideleg", mideleg, (uint64_t)0, 0x444);
    800004ee:	0001d597          	auipc	a1,0x1d
    800004f2:	a8258593          	add	a1,a1,-1406 # 8001cf70 <__func__.1+0x2c8>
    800004f6:	0001d517          	auipc	a0,0x1d
    800004fa:	aca50513          	add	a0,a0,-1334 # 8001cfc0 <__func__.1+0x318>
    800004fe:	6e91a0ef          	jal	8001b3e6 <printf>
    80000502:	4529                	li	a0,10
    80000504:	5b5190ef          	jal	8001a2b8 <putchar>
    80000508:	4405                	li	s0,1
    8000050a:	b6e1                	j	800000d2 <check_csr_field_spec+0x96>

000000008000050c <check_misa_h>:

bool check_misa_h(){
    8000050c:	1141                	add	sp,sp,-16

    TEST_START();
    8000050e:	0001b597          	auipc	a1,0x1b
    80000512:	33258593          	add	a1,a1,818 # 8001b840 <__func__.0>
    80000516:	0001d517          	auipc	a0,0x1d
    8000051a:	a7a50513          	add	a0,a0,-1414 # 8001cf90 <__func__.1+0x2e8>
bool check_misa_h(){
    8000051e:	e406                	sd	ra,8(sp)
    80000520:	e022                	sd	s0,0(sp)
    TEST_START();
    80000522:	6c51a0ef          	jal	8001b3e6 <printf>
    80000526:	4529                	li	a0,10
    80000528:	591190ef          	jal	8001a2b8 <putchar>

    uint64_t misa = CSRR(misa);
    8000052c:	301027f3          	csrr	a5,misa
    CSRS(misa, (1ULL << 7));
    80000530:	08000793          	li	a5,128
    80000534:	3017a073          	csrs	misa,a5

    bool hyp_ext_present = CSRR(misa) & (1ULL << 7);
    80000538:	30102473          	csrr	s0,misa
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    8000053c:	0001d617          	auipc	a2,0x1d
    80000540:	af460613          	add	a2,a2,-1292 # 8001d030 <__func__.1+0x388>
    80000544:	08200593          	li	a1,130
    80000548:	0001d517          	auipc	a0,0x1d
    8000054c:	a6050513          	add	a0,a0,-1440 # 8001cfa8 <__func__.1+0x300>
    bool hyp_ext_present = CSRR(misa) & (1ULL << 7);
    80000550:	08047413          	and	s0,s0,128
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    80000554:	6931a0ef          	jal	8001b3e6 <printf>
    80000558:	c031                	beqz	s0,8000059c <check_misa_h+0x90>
    8000055a:	0001d597          	auipc	a1,0x1d
    8000055e:	a1658593          	add	a1,a1,-1514 # 8001cf70 <__func__.1+0x2c8>
    80000562:	0001d517          	auipc	a0,0x1d
    80000566:	a5e50513          	add	a0,a0,-1442 # 8001cfc0 <__func__.1+0x318>
    8000056a:	67d1a0ef          	jal	8001b3e6 <printf>
    8000056e:	4529                	li	a0,10
    80000570:	549190ef          	jal	8001a2b8 <putchar>
    //     VERBOSE("misa h bit is hardwired");
    // }

    // CSRW(misa, misa);

    TEST_END();
    80000574:	0001d597          	auipc	a1,0x1d
    80000578:	9fc58593          	add	a1,a1,-1540 # 8001cf70 <__func__.1+0x2c8>
    8000057c:	0001d517          	auipc	a0,0x1d
    80000580:	aac50513          	add	a0,a0,-1364 # 8001d028 <__func__.1+0x380>
    80000584:	6631a0ef          	jal	8001b3e6 <printf>
    80000588:	4511                	li	a0,4
    8000058a:	554000ef          	jal	80000ade <goto_priv>
    8000058e:	599000ef          	jal	80001326 <reset_state>
}
    80000592:	60a2                	ld	ra,8(sp)
    80000594:	6402                	ld	s0,0(sp)
    TEST_END();
    80000596:	4505                	li	a0,1
}
    80000598:	0141                	add	sp,sp,16
    8000059a:	8082                	ret
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    8000059c:	0001d597          	auipc	a1,0x1d
    800005a0:	9e458593          	add	a1,a1,-1564 # 8001cf80 <__func__.1+0x2d8>
    800005a4:	0001d517          	auipc	a0,0x1d
    800005a8:	a1c50513          	add	a0,a0,-1508 # 8001cfc0 <__func__.1+0x318>
    800005ac:	63b1a0ef          	jal	8001b3e6 <printf>
    800005b0:	0001d517          	auipc	a0,0x1d
    800005b4:	a1850513          	add	a0,a0,-1512 # 8001cfc8 <__func__.1+0x320>
    800005b8:	62f1a0ef          	jal	8001b3e6 <printf>
    800005bc:	0001d517          	auipc	a0,0x1d
    800005c0:	a9450513          	add	a0,a0,-1388 # 8001d050 <__func__.1+0x3a8>
    800005c4:	6231a0ef          	jal	8001b3e6 <printf>
    800005c8:	02900513          	li	a0,41
    800005cc:	4ed190ef          	jal	8001a2b8 <putchar>
    800005d0:	4529                	li	a0,10
    800005d2:	4e7190ef          	jal	8001a2b8 <putchar>
}
    800005d6:	60a2                	ld	ra,8(sp)
    800005d8:	6402                	ld	s0,0(sp)
        return false;
    800005da:	4501                	li	a0,0
}
    800005dc:	0141                	add	sp,sp,16
    800005de:	8082                	ret

00000000800005e0 <hspt_init>:
    //     for(int i = 0; i < 512; i++)
    //         hspt[j][i] = 0;

    addr = 0x00000000;
    for(int i = 0; i < 4; i++){
        hspt[0][i] = 
    800005e0:	0003a897          	auipc	a7,0x3a
    800005e4:	a2088893          	add	a7,a7,-1504 # 8003a000 <hspt>
    800005e8:	0cf00613          	li	a2,207
    800005ec:	00c8b023          	sd	a2,0(a7)
    800005f0:	10000637          	lui	a2,0x10000
    800005f4:	0cf60613          	add	a2,a2,207 # 100000cf <STACK_SIZE+0xff000cf>
            PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(0);
    }

    hspt[0][4] =
        PTE_V | (((uintptr_t)&hspt[1][0]) >> 2);
    800005f8:	0003b597          	auipc	a1,0x3b
    800005fc:	a0858593          	add	a1,a1,-1528 # 8003b000 <hspt+0x1000>
        hspt[0][i] = 
    80000600:	00c8b423          	sd	a2,8(a7)
    80000604:	20000637          	lui	a2,0x20000
    80000608:	0cf60613          	add	a2,a2,207 # 200000cf <STACK_SIZE+0x1ff000cf>
    hspt[1][0] = 
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    8000060c:	0003c697          	auipc	a3,0x3c
    80000610:	9f468693          	add	a3,a3,-1548 # 8003c000 <hspt+0x2000>
        PTE_V | (((uintptr_t)&hspt[1][0]) >> 2);
    80000614:	0025d713          	srl	a4,a1,0x2
    80000618:	00176713          	or	a4,a4,1
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    8000061c:	0026d793          	srl	a5,a3,0x2
        hspt[0][i] = 
    80000620:	00c8b823          	sd	a2,16(a7)
    80000624:	30000637          	lui	a2,0x30000
    80000628:	0cf60613          	add	a2,a2,207 # 300000cf <STACK_SIZE+0x2ff000cf>
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    8000062c:	0017e793          	or	a5,a5,1
    hspt[0][4] =
    80000630:	02e8b023          	sd	a4,32(a7)


    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000634:	44100513          	li	a0,1089
    addr = TEST_PPAGE_BASE;
    80000638:	4745                	li	a4,17
        hspt[0][i] = 
    8000063a:	00c8bc23          	sd	a2,24(a7)
    hspt[1][0] = 
    8000063e:	e19c                	sd	a5,0(a1)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000640:	00023617          	auipc	a2,0x23
    80000644:	fb860613          	add	a2,a2,-72 # 800235f8 <test_page_perm_table>
    addr = TEST_PPAGE_BASE;
    80000648:	076e                	sll	a4,a4,0x1b
        hspt[2][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].vs;  
        addr += PAGE_SIZE;
    8000064a:	6805                	lui	a6,0x1
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    8000064c:	0556                	sll	a0,a0,0x15
        hspt[2][i] = (addr >> 2) | PTE_AD |
    8000064e:	620c                	ld	a1,0(a2)
    80000650:	00275793          	srl	a5,a4,0x2
        addr += PAGE_SIZE;
    80000654:	9742                	add	a4,a4,a6
        hspt[2][i] = (addr >> 2) | PTE_AD |
    80000656:	8fcd                	or	a5,a5,a1
    80000658:	0c07e793          	or	a5,a5,192
    8000065c:	e29c                	sd	a5,0(a3)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    8000065e:	0641                	add	a2,a2,16
    80000660:	06a1                	add	a3,a3,8
    80000662:	fea716e3          	bne	a4,a0,8000064e <hspt_init+0x6e>
    //     hspt[2][i] = 
    //         PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
    //     addr +=  PAGE_SIZE;
    // }

    if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    80000666:	00025797          	auipc	a5,0x25
    8000066a:	f967a783          	lw	a5,-106(a5) # 800255fc <curr_priv>
    8000066e:	37f5                	addw	a5,a5,-3
    80000670:	4705                	li	a4,1
    80000672:	00f76a63          	bltu	a4,a5,80000686 <hspt_init+0xa6>
        uintptr_t satp = (((uintptr_t)hspt) >> 12) | (0x8ULL << 60);
    80000676:	577d                	li	a4,-1
    80000678:	00c8d793          	srl	a5,a7,0xc
    8000067c:	177e                	sll	a4,a4,0x3f
    8000067e:	8fd9                	or	a5,a5,a4
        CSRW(satp, satp);
    80000680:	18079073          	csrw	satp,a5
    } else {
        ERROR("trying to set hs level satp from lower privilege");
    80000684:	8082                	ret
void hspt_init(){
    80000686:	1141                	add	sp,sp,-16
        ERROR("trying to set hs level satp from lower privilege");
    80000688:	0001d517          	auipc	a0,0x1d
    8000068c:	a4850513          	add	a0,a0,-1464 # 8001d0d0 <__func__.1+0x428>
void hspt_init(){
    80000690:	e406                	sd	ra,8(sp)
        ERROR("trying to set hs level satp from lower privilege");
    80000692:	5551a0ef          	jal	8001b3e6 <printf>
    80000696:	0c000613          	li	a2,192
    8000069a:	0001b597          	auipc	a1,0x1b
    8000069e:	1b658593          	add	a1,a1,438 # 8001b850 <__func__.2>
    800006a2:	0001d517          	auipc	a0,0x1d
    800006a6:	a7650513          	add	a0,a0,-1418 # 8001d118 <__func__.1+0x470>
    800006aa:	53d1a0ef          	jal	8001b3e6 <printf>
    800006ae:	4501                	li	a0,0
    800006b0:	1d51a0ef          	jal	8001b084 <exit>

00000000800006b4 <vspt_init>:
    }
}

pte_t vspt[6][PAGE_SIZE/sizeof(pte_t)] __attribute__((aligned(PAGE_SIZE)));

void vspt_init(){
    800006b4:	1141                	add	sp,sp,-16
    800006b6:	e022                	sd	s0,0(sp)
    800006b8:	e406                	sd	ra,8(sp)

    uintptr_t addr;

    addr = 0x00000000;
    for(int i = 0; i < 4; i++){
        vspt[0][i] = 
    800006ba:	00034417          	auipc	s0,0x34
    800006be:	94640413          	add	s0,s0,-1722 # 80034000 <vspt>
    800006c2:	0cf00693          	li	a3,207
    800006c6:	e014                	sd	a3,0(s0)
    800006c8:	100006b7          	lui	a3,0x10000
            PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(0);
    }

    vspt[0][MEM_BASE/SUPERPAGE_SIZE(0)] = 
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    800006cc:	00035797          	auipc	a5,0x35
    800006d0:	93478793          	add	a5,a5,-1740 # 80035000 <vspt+0x1000>
        vspt[0][i] = 
    800006d4:	0cf68693          	add	a3,a3,207 # 100000cf <STACK_SIZE+0xff000cf>
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    800006d8:	0027d713          	srl	a4,a5,0x2
        vspt[0][i] = 
    800006dc:	e414                	sd	a3,8(s0)
    800006de:	300006b7          	lui	a3,0x30000
    800006e2:	0cf68693          	add	a3,a3,207 # 300000cf <STACK_SIZE+0x2ff000cf>
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    800006e6:	00176713          	or	a4,a4,1

    addr = MEM_BASE;
    for(int i = 0; i < 512; i++) vspt[1][i] = 0;
    800006ea:	6605                	lui	a2,0x1
    800006ec:	853e                	mv	a0,a5
    800006ee:	4581                	li	a1,0
        vspt[0][i] = 
    800006f0:	ec14                	sd	a3,24(s0)
    vspt[0][MEM_BASE/SUPERPAGE_SIZE(0)] = 
    800006f2:	e818                	sd	a4,16(s0)
    for(int i = 0; i < 512; i++) vspt[1][i] = 0;
    800006f4:	6491a0ef          	jal	8001b53c <memset>
    addr = MEM_BASE;
    800006f8:	4785                	li	a5,1
    for(int i = 0; i <  MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    800006fa:	46c5                	li	a3,17
    addr = MEM_BASE;
    800006fc:	07fe                	sll	a5,a5,0x1f
        vspt[1][i] = 
           PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(1);
    800006fe:	00200637          	lui	a2,0x200
    for(int i = 0; i <  MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    80000702:	06ee                	sll	a3,a3,0x1b
           PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
    80000704:	0027d713          	srl	a4,a5,0x2
    80000708:	0cf76713          	or	a4,a4,207
        vspt[1][i] = 
    8000070c:	e118                	sd	a4,0(a0)
        addr +=  SUPERPAGE_SIZE(1);
    8000070e:	97b2                	add	a5,a5,a2
    for(int i = 0; i <  MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    80000710:	0521                	add	a0,a0,8
    80000712:	fed799e3          	bne	a5,a3,80000704 <vspt_init+0x50>

    // vspt[0][5] =
    //     PTE_V | PTE_U | PTE_AD | (((uintptr_t)&vspt[2][0]) >> 2);

    vspt[2][0] = 
        PTE_V | (((uintptr_t)&vspt[3][0]) >> 2);
    80000716:	00037697          	auipc	a3,0x37
    8000071a:	8ea68693          	add	a3,a3,-1814 # 80037000 <vspt+0x3000>
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    8000071e:	00036897          	auipc	a7,0x36
    80000722:	8e288893          	add	a7,a7,-1822 # 80036000 <vspt+0x2000>
        PTE_V | (((uintptr_t)&vspt[3][0]) >> 2);
    80000726:	0026d793          	srl	a5,a3,0x2
    8000072a:	0017e793          	or	a5,a5,1
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    8000072e:	0028d713          	srl	a4,a7,0x2
    80000732:	00176713          	or	a4,a4,1
    vspt[2][0] = 
    80000736:	00f8b023          	sd	a5,0(a7)

    addr = TEST_VPAGE_BASE;
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    8000073a:	00801537          	lui	a0,0x801
    addr = TEST_VPAGE_BASE;
    8000073e:	4785                	li	a5,1
    vspt[0][4] =
    80000740:	f018                	sd	a4,32(s0)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000742:	00023617          	auipc	a2,0x23
    80000746:	eb660613          	add	a2,a2,-330 # 800235f8 <test_page_perm_table>
    addr = TEST_VPAGE_BASE;
    8000074a:	1782                	sll	a5,a5,0x20
        vspt[3][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].vs;  
        addr +=  PAGE_SIZE;
    8000074c:	6805                	lui	a6,0x1
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    8000074e:	0526                	sll	a0,a0,0x9
        vspt[3][i] = (addr >> 2) | PTE_AD |
    80000750:	620c                	ld	a1,0(a2)
    80000752:	0027d713          	srl	a4,a5,0x2
        addr +=  PAGE_SIZE;
    80000756:	97c2                	add	a5,a5,a6
        vspt[3][i] = (addr >> 2) | PTE_AD |
    80000758:	8f4d                	or	a4,a4,a1
    8000075a:	0c076713          	or	a4,a4,192
    8000075e:	e298                	sd	a4,0(a3)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000760:	0641                	add	a2,a2,16
    80000762:	06a1                	add	a3,a3,8
    80000764:	fea796e3          	bne	a5,a0,80000750 <vspt_init+0x9c>
    }

    vspt[2][1] = 
        PTE_V | (((uintptr_t)&vspt[4][0]) >> 2);
    80000768:	00038697          	auipc	a3,0x38
    8000076c:	89868693          	add	a3,a3,-1896 # 80038000 <vspt+0x4000>
    80000770:	0026d713          	srl	a4,a3,0x2
    80000774:	00176713          	or	a4,a4,1

    addr = 4 * SUPERPAGE_SIZE(0) + SUPERPAGE_SIZE(1);
    for(int i = 0; i < 512; i++){
    80000778:	40100613          	li	a2,1025
    vspt[2][1] = 
    8000077c:	00e8b423          	sd	a4,8(a7)
        vspt[4][i] = (addr >> 2) | 
            PTE_V | PTE_AD | PTE_RWX; 
        addr +=  PAGE_SIZE;
    80000780:	6585                	lui	a1,0x1
    for(int i = 0; i < 512; i++){
    80000782:	065a                	sll	a2,a2,0x16
        vspt[4][i] = (addr >> 2) | 
    80000784:	0027d713          	srl	a4,a5,0x2
            PTE_V | PTE_AD | PTE_RWX; 
    80000788:	0cf76713          	or	a4,a4,207
        vspt[4][i] = (addr >> 2) | 
    8000078c:	e298                	sd	a4,0(a3)
        addr +=  PAGE_SIZE;
    8000078e:	97ae                	add	a5,a5,a1
    for(int i = 0; i < 512; i++){
    80000790:	06a1                	add	a3,a3,8
    80000792:	fec799e3          	bne	a5,a2,80000784 <vspt_init+0xd0>
    }  

    vspt[0][5] = 
        PTE_V | (((uintptr_t)&vspt[5][0]) >> 2);
    80000796:	00039697          	auipc	a3,0x39
    8000079a:	86a68693          	add	a3,a3,-1942 # 80039000 <vspt+0x5000>
    8000079e:	0026d793          	srl	a5,a3,0x2
    800007a2:	0017e793          	or	a5,a5,1
    vspt[0][5] = 
    800007a6:	f41c                	sd	a5,40(s0)
    
    addr = 5 * SUPERPAGE_SIZE(0);
    for(int i = 0; i < 512; i++){
    800007a8:	460d                	li	a2,3
    addr = 5 * SUPERPAGE_SIZE(0);
    800007aa:	4795                	li	a5,5
    800007ac:	07fa                	sll	a5,a5,0x1e
        vspt[5][i] = (addr >> 2) |
             PTE_V | PTE_AD | PTE_RWX;  
        addr +=  SUPERPAGE_SIZE(1);
    800007ae:	002005b7          	lui	a1,0x200
    for(int i = 0; i < 512; i++){
    800007b2:	067e                	sll	a2,a2,0x1f
        vspt[5][i] = (addr >> 2) |
    800007b4:	0027d713          	srl	a4,a5,0x2
             PTE_V | PTE_AD | PTE_RWX;  
    800007b8:	0cf76713          	or	a4,a4,207
        vspt[5][i] = (addr >> 2) |
    800007bc:	e298                	sd	a4,0(a3)
        addr +=  SUPERPAGE_SIZE(1);
    800007be:	97ae                	add	a5,a5,a1
    for(int i = 0; i < 512; i++){
    800007c0:	06a1                	add	a3,a3,8
    800007c2:	fec799e3          	bne	a5,a2,800007b4 <vspt_init+0x100>
    }  

    uintptr_t satp = (((uintptr_t)vspt) >> 12) | (0x8ULL << 60);
    800007c6:	57fd                	li	a5,-1
    800007c8:	8031                	srl	s0,s0,0xc
    800007ca:	17fe                	sll	a5,a5,0x3f
    if(curr_priv == PRIV_VS){
    800007cc:	00025717          	auipc	a4,0x25
    800007d0:	e3072703          	lw	a4,-464(a4) # 800255fc <curr_priv>
    800007d4:	4689                	li	a3,2
    uintptr_t satp = (((uintptr_t)vspt) >> 12) | (0x8ULL << 60);
    800007d6:	8c5d                	or	s0,s0,a5
    if(curr_priv == PRIV_VS){
    800007d8:	04d70163          	beq	a4,a3,8000081a <vspt_init+0x166>
        CSRW(satp, satp);
    } else if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    800007dc:	3775                	addw	a4,a4,-3
    800007de:	4785                	li	a5,1
    800007e0:	00e7e863          	bltu	a5,a4,800007f0 <vspt_init+0x13c>
        CSRW(CSR_VSATP, satp);
    800007e4:	28041073          	csrw	vsatp,s0
    } else {
        ERROR("");
    }
}
    800007e8:	60a2                	ld	ra,8(sp)
    800007ea:	6402                	ld	s0,0(sp)
    800007ec:	0141                	add	sp,sp,16
    800007ee:	8082                	ret
        ERROR("");
    800007f0:	0001d517          	auipc	a0,0x1d
    800007f4:	93850513          	add	a0,a0,-1736 # 8001d128 <__func__.1+0x480>
    800007f8:	3ef1a0ef          	jal	8001b3e6 <printf>
    800007fc:	10600613          	li	a2,262
    80000800:	0001b597          	auipc	a1,0x1b
    80000804:	06058593          	add	a1,a1,96 # 8001b860 <__func__.1>
    80000808:	0001d517          	auipc	a0,0x1d
    8000080c:	91050513          	add	a0,a0,-1776 # 8001d118 <__func__.1+0x470>
    80000810:	3d71a0ef          	jal	8001b3e6 <printf>
    80000814:	4501                	li	a0,0
    80000816:	06f1a0ef          	jal	8001b084 <exit>
        CSRW(satp, satp);
    8000081a:	18041073          	csrw	satp,s0
}
    8000081e:	60a2                	ld	ra,8(sp)
    80000820:	6402                	ld	s0,0(sp)
    80000822:	0141                	add	sp,sp,16
    80000824:	8082                	ret

0000000080000826 <hpt_init>:

pte_t hpt_root[PAGE_SIZE*4/sizeof(pte_t)] __attribute__((aligned(PAGE_SIZE*4)));
pte_t hpt[5][PAGE_SIZE/sizeof(pte_t)] __attribute__((aligned(PAGE_SIZE)));

void hpt_init(){
    80000826:	1101                	add	sp,sp,-32
    80000828:	e426                	sd	s1,8(sp)

    for(int i = 0; i < 2048; i++){
        hpt_root[i] = 0;
    8000082a:	0002f497          	auipc	s1,0x2f
    8000082e:	7d648493          	add	s1,s1,2006 # 80030000 <hpt_root>
    80000832:	6611                	lui	a2,0x4
    80000834:	4581                	li	a1,0
    80000836:	8526                	mv	a0,s1
void hpt_init(){
    80000838:	ec06                	sd	ra,24(sp)
    8000083a:	e822                	sd	s0,16(sp)
        hpt_root[i] = 0;
    8000083c:	5011a0ef          	jal	8001b53c <memset>
    }

    uintptr_t addr = 0x0;
    for(int i = 0; i < 4; i++){
        hpt_root[i] = 
    80000840:	0df00713          	li	a4,223
    80000844:	e098                	sd	a4,0(s1)
    80000846:	10000737          	lui	a4,0x10000
            PTE_V | PTE_U | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(0);
    }

    hpt_root[MEM_BASE/SUPERPAGE_SIZE(0)] =
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    8000084a:	00027417          	auipc	s0,0x27
    8000084e:	7b640413          	add	s0,s0,1974 # 80028000 <hpt>
        hpt_root[i] = 
    80000852:	0df70713          	add	a4,a4,223 # 100000df <STACK_SIZE+0xff000df>
    80000856:	e498                	sd	a4,8(s1)
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    80000858:	00245793          	srl	a5,s0,0x2
        hpt_root[i] = 
    8000085c:	30000737          	lui	a4,0x30000
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    80000860:	0017e793          	or	a5,a5,1

    addr = MEM_BASE;
    for(int i = 0; i < 512; i++) hpt[0][i] = 0;
    80000864:	6605                	lui	a2,0x1
        hpt_root[i] = 
    80000866:	0df70713          	add	a4,a4,223 # 300000df <STACK_SIZE+0x2ff000df>
    for(int i = 0; i < 512; i++) hpt[0][i] = 0;
    8000086a:	4581                	li	a1,0
    8000086c:	8522                	mv	a0,s0
    hpt_root[MEM_BASE/SUPERPAGE_SIZE(0)] =
    8000086e:	e89c                	sd	a5,16(s1)
        hpt_root[i] = 
    80000870:	ec98                	sd	a4,24(s1)
    for(int i = 0; i < 512; i++) hpt[0][i] = 0;
    80000872:	4cb1a0ef          	jal	8001b53c <memset>
    addr = MEM_BASE;
    80000876:	4785                	li	a5,1
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    80000878:	46c5                	li	a3,17
    8000087a:	8522                	mv	a0,s0
    addr = MEM_BASE;
    8000087c:	07fe                	sll	a5,a5,0x1f
        hpt[0][i] = 
            PTE_V | PTE_U | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(1);
    8000087e:	00200637          	lui	a2,0x200
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    80000882:	06ee                	sll	a3,a3,0x1b
            PTE_V | PTE_U | PTE_AD | PTE_RWX | (addr >> 2);  
    80000884:	0027d713          	srl	a4,a5,0x2
    80000888:	0df76713          	or	a4,a4,223
        hpt[0][i] = 
    8000088c:	e118                	sd	a4,0(a0)
        addr +=  SUPERPAGE_SIZE(1);
    8000088e:	97b2                	add	a5,a5,a2
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    80000890:	0521                	add	a0,a0,8
    80000892:	fed799e3          	bne	a5,a3,80000884 <hpt_init+0x5e>
    }    

    hpt_root[4] =
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);
    80000896:	00028317          	auipc	t1,0x28
    8000089a:	76a30313          	add	t1,t1,1898 # 80029000 <hpt+0x1000>

    hpt_root[2047] =
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);

    hpt[1][0] = 
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);
    8000089e:	00029617          	auipc	a2,0x29
    800008a2:	76260613          	add	a2,a2,1890 # 8002a000 <hpt+0x2000>
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);
    800008a6:	00235693          	srl	a3,t1,0x2
    800008aa:	0016e693          	or	a3,a3,1
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);
    800008ae:	00265713          	srl	a4,a2,0x2
    800008b2:	00176713          	or	a4,a4,1
    hpt_root[2047] =
    800008b6:	00033597          	auipc	a1,0x33
    800008ba:	74d5b123          	sd	a3,1858(a1) # 80033ff8 <hpt_root+0x3ff8>

    hpt[1][511] = 
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);

    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800008be:	44100813          	li	a6,1089
    hpt_root[4] =
    800008c2:	f094                	sd	a3,32(s1)
    hpt[1][0] = 
    800008c4:	00e33023          	sd	a4,0(t1)
    hpt[1][511] = 
    800008c8:	fee63c23          	sd	a4,-8(a2)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800008cc:	00023597          	auipc	a1,0x23
    800008d0:	d3458593          	add	a1,a1,-716 # 80023600 <test_page_perm_table+0x8>
    addr = TEST_PPAGE_BASE;
    800008d4:	86be                	mv	a3,a5
        hpt[2][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].h;  
        addr +=  PAGE_SIZE;
    800008d6:	6885                	lui	a7,0x1
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800008d8:	0856                	sll	a6,a6,0x15
        hpt[2][i] = (addr >> 2) | PTE_AD |
    800008da:	6188                	ld	a0,0(a1)
    800008dc:	0026d713          	srl	a4,a3,0x2
        addr +=  PAGE_SIZE;
    800008e0:	96c6                	add	a3,a3,a7
        hpt[2][i] = (addr >> 2) | PTE_AD |
    800008e2:	8f49                	or	a4,a4,a0
    800008e4:	0c076713          	or	a4,a4,192
    800008e8:	e218                	sd	a4,0(a2)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800008ea:	05c1                	add	a1,a1,16
    800008ec:	0621                	add	a2,a2,8
    800008ee:	ff0696e3          	bne	a3,a6,800008da <hpt_init+0xb4>
    }

    hpt[1][1] = 
        PTE_V | (((uintptr_t)&hpt[3][0]) >> 2);
    800008f2:	0002a617          	auipc	a2,0x2a
    800008f6:	70e60613          	add	a2,a2,1806 # 8002b000 <hpt+0x3000>
    800008fa:	00265713          	srl	a4,a2,0x2
    800008fe:	00176713          	or	a4,a4,1
    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < 512; i++){
    80000902:	44100593          	li	a1,1089
    hpt[1][1] = 
    80000906:	00e33423          	sd	a4,8(t1)
        hpt[3][i] = (addr >> 2) | 
            PTE_V | PTE_U | PTE_AD | PTE_RWX; 
        addr +=  PAGE_SIZE;
    8000090a:	6505                	lui	a0,0x1
    addr = TEST_PPAGE_BASE;
    8000090c:	873e                	mv	a4,a5
    for(int i = 0; i < 512; i++){
    8000090e:	05d6                	sll	a1,a1,0x15
        hpt[3][i] = (addr >> 2) | 
    80000910:	00275693          	srl	a3,a4,0x2
            PTE_V | PTE_U | PTE_AD | PTE_RWX; 
    80000914:	0df6e693          	or	a3,a3,223
        hpt[3][i] = (addr >> 2) | 
    80000918:	e214                	sd	a3,0(a2)
        addr +=  PAGE_SIZE;
    8000091a:	972a                	add	a4,a4,a0
    for(int i = 0; i < 512; i++){
    8000091c:	0621                	add	a2,a2,8
    8000091e:	feb719e3          	bne	a4,a1,80000910 <hpt_init+0xea>
    }  

    hpt_root[5] =
        PTE_V | (((uintptr_t)&hpt[4][0]) >> 2);
    80000922:	0002b697          	auipc	a3,0x2b
    80000926:	6de68693          	add	a3,a3,1758 # 8002c000 <hpt+0x4000>
    8000092a:	0026d713          	srl	a4,a3,0x2
    8000092e:	00176713          	or	a4,a4,1
    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < 512; i++){
    80000932:	4665                	li	a2,25
    hpt_root[5] =
    80000934:	f498                	sd	a4,40(s1)
        hpt[4][i] = (addr >> 2) |
             PTE_V | PTE_U | PTE_AD | PTE_RWX;  
        addr +=  SUPERPAGE_SIZE(1);
    80000936:	002005b7          	lui	a1,0x200
    for(int i = 0; i < 512; i++){
    8000093a:	066e                	sll	a2,a2,0x1b
        hpt[4][i] = (addr >> 2) |
    8000093c:	0027d713          	srl	a4,a5,0x2
             PTE_V | PTE_U | PTE_AD | PTE_RWX;  
    80000940:	0df76713          	or	a4,a4,223
        hpt[4][i] = (addr >> 2) |
    80000944:	e298                	sd	a4,0(a3)
        addr +=  SUPERPAGE_SIZE(1);
    80000946:	97ae                	add	a5,a5,a1
    for(int i = 0; i < 512; i++){
    80000948:	06a1                	add	a3,a3,8
    8000094a:	fec799e3          	bne	a5,a2,8000093c <hpt_init+0x116>
    }  

    if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    8000094e:	00025797          	auipc	a5,0x25
    80000952:	cae7a783          	lw	a5,-850(a5) # 800255fc <curr_priv>
    80000956:	37f5                	addw	a5,a5,-3
    80000958:	4705                	li	a4,1
    8000095a:	00f76e63          	bltu	a4,a5,80000976 <hpt_init+0x150>
        uintptr_t hsatp = (((uintptr_t)hpt_root) >> 12) | (0x8ULL << 60);
    8000095e:	577d                	li	a4,-1
    80000960:	00c4d793          	srl	a5,s1,0xc
    80000964:	177e                	sll	a4,a4,0x3f
    80000966:	8fd9                	or	a5,a5,a4
        CSRW(CSR_HGATP, hsatp);
    80000968:	68079073          	csrw	hgatp,a5
    } else {
        ERROR("trying to set hs hgatp from lower privilege");
    }
}
    8000096c:	60e2                	ld	ra,24(sp)
    8000096e:	6442                	ld	s0,16(sp)
    80000970:	64a2                	ld	s1,8(sp)
    80000972:	6105                	add	sp,sp,32
    80000974:	8082                	ret
        ERROR("trying to set hs hgatp from lower privilege");
    80000976:	0001c517          	auipc	a0,0x1c
    8000097a:	7ca50513          	add	a0,a0,1994 # 8001d140 <__func__.1+0x498>
    8000097e:	2691a0ef          	jal	8001b3e6 <printf>
    80000982:	14e00613          	li	a2,334
    80000986:	0001b597          	auipc	a1,0x1b
    8000098a:	eea58593          	add	a1,a1,-278 # 8001b870 <__func__.0>
    8000098e:	0001c517          	auipc	a0,0x1c
    80000992:	78a50513          	add	a0,a0,1930 # 8001d118 <__func__.1+0x470>
    80000996:	2511a0ef          	jal	8001b3e6 <printf>
    8000099a:	4501                	li	a0,0
    8000099c:	6e81a0ef          	jal	8001b084 <exit>

00000000800009a0 <hspt_switch>:

void hspt_switch(){
    pte_t temp = hspt[2][SWITCH1];
    hspt[2][SWITCH1] = hspt[2][SWITCH2];
    800009a0:	0003b797          	auipc	a5,0x3b
    800009a4:	66078793          	add	a5,a5,1632 # 8003c000 <hspt+0x2000>
    800009a8:	3607b683          	ld	a3,864(a5)
    800009ac:	3687b703          	ld	a4,872(a5)
    800009b0:	36d7b423          	sd	a3,872(a5)
    800009b4:	36e7b023          	sd	a4,864(a5)
    hspt[2][SWITCH2] = temp;
}
    800009b8:	8082                	ret

00000000800009ba <vspt_switch>:

void vspt_switch(){
    pte_t temp = vspt[3][SWITCH1];
    vspt[3][SWITCH1] = vspt[3][SWITCH2];
    800009ba:	00036797          	auipc	a5,0x36
    800009be:	64678793          	add	a5,a5,1606 # 80037000 <vspt+0x3000>
    800009c2:	3607b683          	ld	a3,864(a5)
    800009c6:	3687b703          	ld	a4,872(a5)
    800009ca:	36d7b423          	sd	a3,872(a5)
    800009ce:	36e7b023          	sd	a4,864(a5)
    vspt[3][SWITCH2] = temp;
}
    800009d2:	8082                	ret

00000000800009d4 <hpt_switch>:

void hpt_switch(){
    pte_t temp = hpt[2][SWITCH1];
    hpt[2][SWITCH1] = hpt[2][SWITCH2];
    800009d4:	00029797          	auipc	a5,0x29
    800009d8:	62c78793          	add	a5,a5,1580 # 8002a000 <hpt+0x2000>
    800009dc:	3607b683          	ld	a3,864(a5)
    800009e0:	3687b703          	ld	a4,872(a5)
    800009e4:	36d7b423          	sd	a3,872(a5)
    800009e8:	36e7b023          	sd	a4,864(a5)
    hpt[2][SWITCH2] = temp;
}
    800009ec:	8082                	ret

00000000800009ee <ecall>:

uint64_t ecall_args[2];

uint64_t ecall(uint64_t a0, uint64_t a1)
{
    ecall_args[0] = a0;
    800009ee:	0003c797          	auipc	a5,0x3c
    800009f2:	61278793          	add	a5,a5,1554 # 8003d000 <ecall_args>
    800009f6:	e388                	sd	a0,0(a5)
    ecall_args[1] = a1;
    800009f8:	e78c                	sd	a1,8(a5)

    asm volatile("ecall" ::: "memory");
    800009fa:	00000073          	ecall
    return ecall_args[0];

}
    800009fe:	6388                	ld	a0,0(a5)
    80000a00:	8082                	ret

0000000080000a02 <set_prev_priv>:
    return priv == PRIV_VU || priv == PRIV_HU;
}

void set_prev_priv(int priv){

    switch(curr_priv){
    80000a02:	00025797          	auipc	a5,0x25
    80000a06:	bfa7a783          	lw	a5,-1030(a5) # 800255fc <curr_priv>
    80000a0a:	470d                	li	a4,3
    80000a0c:	04e78463          	beq	a5,a4,80000a54 <set_prev_priv+0x52>
    80000a10:	4711                	li	a4,4
    80000a12:	06e78d63          	beq	a5,a4,80000a8c <set_prev_priv+0x8a>
    80000a16:	4709                	li	a4,2
    80000a18:	06e78363          	beq	a5,a4,80000a7e <set_prev_priv+0x7c>
void set_prev_priv(int priv){
    80000a1c:	1141                	add	sp,sp,-16
        case PRIV_VS: {
            uint64_t temp = CSRR(sstatus);
            CSRC(sstatus, 0x1ULL << 8);
        }
        break;
        default: ERROR("unknown current priv %d (%s)\n", priv, __func__);
    80000a1e:	85aa                	mv	a1,a0
    80000a20:	0001b617          	auipc	a2,0x1b
    80000a24:	e6060613          	add	a2,a2,-416 # 8001b880 <__func__.6>
    80000a28:	0001c517          	auipc	a0,0x1c
    80000a2c:	75850513          	add	a0,a0,1880 # 8001d180 <__func__.1+0x4d8>
void set_prev_priv(int priv){
    80000a30:	e406                	sd	ra,8(sp)
        default: ERROR("unknown current priv %d (%s)\n", priv, __func__);
    80000a32:	1b51a0ef          	jal	8001b3e6 <printf>
    80000a36:	03c00613          	li	a2,60
    80000a3a:	0001b597          	auipc	a1,0x1b
    80000a3e:	e4658593          	add	a1,a1,-442 # 8001b880 <__func__.6>
    80000a42:	0001c517          	auipc	a0,0x1c
    80000a46:	6d650513          	add	a0,a0,1750 # 8001d118 <__func__.1+0x470>
    80000a4a:	19d1a0ef          	jal	8001b3e6 <printf>
    80000a4e:	4501                	li	a0,0
    80000a50:	6341a0ef          	jal	8001b084 <exit>
            uint64_t temp = CSRR(sstatus);
    80000a54:	100027f3          	csrr	a5,sstatus
            if(priv == PRIV_HS || priv == PRIV_VS) temp |= (0x1ULL << 8);   //spp
    80000a58:	4685                	li	a3,1
    80000a5a:	ffe5071b          	addw	a4,a0,-2
            temp &= ~(0x1ULL << 8);
    80000a5e:	eff7f793          	and	a5,a5,-257
            if(priv == PRIV_HS || priv == PRIV_VS) temp |= (0x1ULL << 8);   //spp
    80000a62:	06e6f063          	bgeu	a3,a4,80000ac2 <set_prev_priv+0xc0>
            CSRW(sstatus, temp);
    80000a66:	10079073          	csrw	sstatus,a5
            temp = CSRR(CSR_HSTATUS);   //p101
    80000a6a:	600027f3          	csrr	a5,hstatus
            temp &= ~(0x3ULL << 7);
    80000a6e:	e7f7f793          	and	a5,a5,-385
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (0x1ULL << 7);       //spv
    80000a72:	e119                	bnez	a0,80000a78 <set_prev_priv+0x76>
    80000a74:	0807e793          	or	a5,a5,128
            CSRW(CSR_HSTATUS, temp);
    80000a78:	60079073          	csrw	hstatus,a5
        break;
    80000a7c:	8082                	ret
            uint64_t temp = CSRR(sstatus);
    80000a7e:	100027f3          	csrr	a5,sstatus
            CSRC(sstatus, 0x1ULL << 8);
    80000a82:	10000793          	li	a5,256
    80000a86:	1007b073          	csrc	sstatus,a5
        break;
    80000a8a:	8082                	ret
            uint64_t temp = CSRR(mstatus);
    80000a8c:	300027f3          	csrr	a5,mstatus
            temp &= ~((3ULL << 11) | (1ULL << 39));
    80000a90:	00023617          	auipc	a2,0x23
    80000a94:	b2063603          	ld	a2,-1248(a2) # 800235b0 <__func__.1+0x6908>
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000a98:	ffe5071b          	addw	a4,a0,-2
    80000a9c:	4685                	li	a3,1
            temp &= ~((3ULL << 11) | (1ULL << 39));
    80000a9e:	8ff1                	and	a5,a5,a2
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000aa0:	00e6f963          	bgeu	a3,a4,80000ab2 <set_prev_priv+0xb0>
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000aa4:	e501                	bnez	a0,80000aac <set_prev_priv+0xaa>
    80000aa6:	4705                	li	a4,1
    80000aa8:	171e                	sll	a4,a4,0x27
    80000aaa:	8fd9                	or	a5,a5,a4
            CSRW(mstatus, temp);
    80000aac:	30079073          	csrw	mstatus,a5
        break;
    80000ab0:	8082                	ret
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000ab2:	6705                	lui	a4,0x1
    80000ab4:	80070713          	add	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000ab8:	4689                	li	a3,2
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000aba:	8fd9                	or	a5,a5,a4
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000abc:	fed518e3          	bne	a0,a3,80000aac <set_prev_priv+0xaa>
    80000ac0:	b7dd                	j	80000aa6 <set_prev_priv+0xa4>
            if(priv == PRIV_HS || priv == PRIV_VS) temp |= (0x1ULL << 8);   //spp
    80000ac2:	1007e793          	or	a5,a5,256
            CSRW(sstatus, temp);
    80000ac6:	10079073          	csrw	sstatus,a5
            temp = CSRR(CSR_HSTATUS);   //p101
    80000aca:	600027f3          	csrr	a5,hstatus
            if(priv == PRIV_VS) temp |= (1ULL << 8);        //spvp
    80000ace:	4709                	li	a4,2
            temp &= ~(0x3ULL << 7);
    80000ad0:	e7f7f793          	and	a5,a5,-385
            if(priv == PRIV_VS) temp |= (1ULL << 8);        //spvp
    80000ad4:	fae512e3          	bne	a0,a4,80000a78 <set_prev_priv+0x76>
    80000ad8:	1007e793          	or	a5,a5,256
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (0x1ULL << 7);       //spv
    80000adc:	bf61                	j	80000a74 <set_prev_priv+0x72>

0000000080000ade <goto_priv>:
    curr_priv = priv;

}


void goto_priv(int target_priv){
    80000ade:	7179                	add	sp,sp,-48
    80000ae0:	f022                	sd	s0,32(sp)
    80000ae2:	ec26                	sd	s1,24(sp)
    80000ae4:	f406                	sd	ra,40(sp)
    80000ae6:	e84a                	sd	s2,16(sp)
    80000ae8:	e44e                	sd	s3,8(sp)

    static bool on_going = false;

    DEBUG("goto_priv: real = %s, target = %s, curr = %s",  priv_strs[real_priv], priv_strs[target_priv], priv_strs[curr_priv]);

    if(is_user(target_priv) && is_user(curr_priv)) {
    80000aea:	4785                	li	a5,1
void goto_priv(int target_priv){
    80000aec:	842a                	mv	s0,a0
    return priv == PRIV_VU || priv == PRIV_HU;
    80000aee:	0005049b          	sext.w	s1,a0
    if(is_user(target_priv) && is_user(curr_priv)) {
    80000af2:	06a7fd63          	bgeu	a5,a0,80000b6c <goto_priv+0x8e>
        goto_priv(PRIV_M);
    }

    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    80000af6:	00025997          	auipc	s3,0x25
    80000afa:	b0298993          	add	s3,s3,-1278 # 800255f8 <real_priv>
    80000afe:	0009a783          	lw	a5,0(s3)
    80000b02:	00025917          	auipc	s2,0x25
    80000b06:	afa90913          	add	s2,s2,-1286 # 800255fc <curr_priv>
    80000b0a:	00978963          	beq	a5,s1,80000b1c <goto_priv+0x3e>
    80000b0e:	4791                	li	a5,4
    80000b10:	00025917          	auipc	s2,0x25
    80000b14:	aec90913          	add	s2,s2,-1300 # 800255fc <curr_priv>
    80000b18:	02a7d663          	bge	a5,a0,80000b44 <goto_priv+0x66>
    curr_priv = priv;
    80000b1c:	00992023          	sw	s1,0(s2)
        VERBOSE("...entered %s mode", priv_strs[target_priv]);
        on_going = false;
        lower_priv(target_priv);
    }

}
    80000b20:	70a2                	ld	ra,40(sp)
    80000b22:	7402                	ld	s0,32(sp)
    80000b24:	64e2                	ld	s1,24(sp)
    80000b26:	6942                	ld	s2,16(sp)
    80000b28:	69a2                	ld	s3,8(sp)
    80000b2a:	6145                	add	sp,sp,48
    80000b2c:	8082                	ret
        goto_priv(PRIV_M);
    80000b2e:	4511                	li	a0,4
    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    80000b30:	00025997          	auipc	s3,0x25
    80000b34:	ac898993          	add	s3,s3,-1336 # 800255f8 <real_priv>
        goto_priv(PRIV_M);
    80000b38:	fa7ff0ef          	jal	80000ade <goto_priv>
    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    80000b3c:	0009a783          	lw	a5,0(s3)
    80000b40:	fc978ee3          	beq	a5,s1,80000b1c <goto_priv+0x3e>
    if(target_priv > curr_priv){
    80000b44:	00092703          	lw	a4,0(s2)
    80000b48:	0a977d63          	bgeu	a4,s1,80000c02 <goto_priv+0x124>
    ecall_args[0] = a0;
    80000b4c:	0003c797          	auipc	a5,0x3c
    80000b50:	4b478793          	add	a5,a5,1204 # 8003d000 <ecall_args>
    80000b54:	4705                	li	a4,1
    80000b56:	e398                	sd	a4,0(a5)
        ecall(ECALL_GOTO_PRIV, target_priv);
    80000b58:	e780                	sd	s0,8(a5)
    asm volatile("ecall" ::: "memory");
    80000b5a:	00000073          	ecall
}
    80000b5e:	70a2                	ld	ra,40(sp)
    80000b60:	7402                	ld	s0,32(sp)
    80000b62:	64e2                	ld	s1,24(sp)
    80000b64:	6942                	ld	s2,16(sp)
    80000b66:	69a2                	ld	s3,8(sp)
    80000b68:	6145                	add	sp,sp,48
    80000b6a:	8082                	ret
    if(is_user(target_priv) && is_user(curr_priv)) {
    80000b6c:	00025917          	auipc	s2,0x25
    80000b70:	a9090913          	add	s2,s2,-1392 # 800255fc <curr_priv>
    80000b74:	00092703          	lw	a4,0(s2)
    80000b78:	fae7fbe3          	bgeu	a5,a4,80000b2e <goto_priv+0x50>
    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    80000b7c:	00025997          	auipc	s3,0x25
    80000b80:	a7c98993          	add	s3,s3,-1412 # 800255f8 <real_priv>
    80000b84:	0009a783          	lw	a5,0(s3)
    80000b88:	f8978ae3          	beq	a5,s1,80000b1c <goto_priv+0x3e>
    if(curr_priv == PRIV_VS && priv == PRIV_HU){
    80000b8c:	4789                	li	a5,2
    80000b8e:	02f71a63          	bne	a4,a5,80000bc2 <goto_priv+0xe4>
    80000b92:	4785                	li	a5,1
    80000b94:	02f49763          	bne	s1,a5,80000bc2 <goto_priv+0xe4>
        ERROR("trying to go from vs to hu");
    80000b98:	0001c517          	auipc	a0,0x1c
    80000b9c:	61850513          	add	a0,a0,1560 # 8001d1b0 <__func__.1+0x508>
    80000ba0:	0471a0ef          	jal	8001b3e6 <printf>
    80000ba4:	04b00613          	li	a2,75
        ERROR("cant lower priv from u");
    80000ba8:	0001b597          	auipc	a1,0x1b
    80000bac:	ce858593          	add	a1,a1,-792 # 8001b890 <__func__.4>
    80000bb0:	0001c517          	auipc	a0,0x1c
    80000bb4:	56850513          	add	a0,a0,1384 # 8001d118 <__func__.1+0x470>
    80000bb8:	02f1a0ef          	jal	8001b3e6 <printf>
    80000bbc:	4501                	li	a0,0
    80000bbe:	4c61a0ef          	jal	8001b084 <exit>
    set_prev_priv(priv);
    80000bc2:	8522                	mv	a0,s0
    80000bc4:	e3fff0ef          	jal	80000a02 <set_prev_priv>
    if(curr_priv == PRIV_M) {
    80000bc8:	00092783          	lw	a5,0(s2)
    real_priv = priv;
    80000bcc:	0099a023          	sw	s1,0(s3)
    if(curr_priv == PRIV_M) {
    80000bd0:	4711                	li	a4,4
    80000bd2:	02e78b63          	beq	a5,a4,80000c08 <goto_priv+0x12a>
    } else if(curr_priv == PRIV_VS || curr_priv == PRIV_HS){
    80000bd6:	37f9                	addw	a5,a5,-2
    80000bd8:	4705                	li	a4,1
    80000bda:	00f76b63          	bltu	a4,a5,80000bf0 <goto_priv+0x112>
        asm volatile(
    80000bde:	00000297          	auipc	t0,0x0
    80000be2:	01028293          	add	t0,t0,16 # 80000bee <goto_priv+0x110>
    80000be6:	14129073          	csrw	sepc,t0
    80000bea:	10200073          	sret
    80000bee:	b73d                	j	80000b1c <goto_priv+0x3e>
        ERROR("cant lower priv from u");
    80000bf0:	0001c517          	auipc	a0,0x1c
    80000bf4:	5f050513          	add	a0,a0,1520 # 8001d1e0 <__func__.1+0x538>
    80000bf8:	7ee1a0ef          	jal	8001b3e6 <printf>
    80000bfc:	06300613          	li	a2,99
    80000c00:	b765                	j	80000ba8 <goto_priv+0xca>
    if(priv == curr_priv) 
    80000c02:	f0970fe3          	beq	a4,s1,80000b20 <goto_priv+0x42>
    80000c06:	b759                	j	80000b8c <goto_priv+0xae>
        asm volatile(
    80000c08:	00000297          	auipc	t0,0x0
    80000c0c:	01028293          	add	t0,t0,16 # 80000c18 <goto_priv+0x13a>
    80000c10:	34129073          	csrw	mepc,t0
    80000c14:	30200073          	mret
    80000c18:	b711                	j	80000b1c <goto_priv+0x3e>

0000000080000c1a <mhandler>:
        break;\
    }\
    return from_priv;\
}

uint64_t mhandler(){
    80000c1a:	715d                	add	sp,sp,-80
    80000c1c:	f84a                	sd	s2,48(sp)
    80000c1e:	e486                	sd	ra,72(sp)
    80000c20:	e0a2                	sd	s0,64(sp)
    80000c22:	fc26                	sd	s1,56(sp)
    80000c24:	f44e                	sd	s3,40(sp)
    80000c26:	f052                	sd	s4,32(sp)
    80000c28:	ec56                	sd	s5,24(sp)
    80000c2a:	e85a                	sd	s6,16(sp)
    80000c2c:	e45e                	sd	s7,8(sp)

    real_priv = PRIV_M;
    80000c2e:	00025917          	auipc	s2,0x25
    80000c32:	9ca90913          	add	s2,s2,-1590 # 800255f8 <real_priv>
    80000c36:	4791                	li	a5,4
    80000c38:	00f92023          	sw	a5,0(s2)

    uint64_t cause = CSRR(mcause);
    80000c3c:	342024f3          	csrr	s1,mcause
    uint64_t epc = CSRR(mepc);
    80000c40:	341029f3          	csrr	s3,mepc
    80000c44:	8a4e                	mv	s4,s3
    uint64_t tval = CSRR(mtval);
    80000c46:	34302bf3          	csrr	s7,mtval
    uint64_t tval2 = CSRR(CSR_MTVAL2);
    80000c4a:	34b02af3          	csrr	s5,0x34b
    uint64_t tinst= CSRR(CSR_MTINST);
    80000c4e:	34a02b73          	csrr	s6,0x34a
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    80000c52:	478d                	li	a5,3
    80000c54:	ff848713          	add	a4,s1,-8
    DEBUG("mpv = 0x%lx", (CSRR(mstatus) >> 39) & 0x1);
    DEBUG("gva = 0x%lx", (CSRR(mstatus) >> MSTATUS_GVA_OFF) & 0x1);
    
    if(is_ecall(cause) && ecall_args[0] == ECALL_GOTO_PRIV){
        goto_priv(ecall_args[1]); 
    } else if(!excpt.testing){
    80000c58:	0003c417          	auipc	s0,0x3c
    80000c5c:	3a840413          	add	s0,s0,936 # 8003d000 <ecall_args>
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    80000c60:	12e7ec63          	bltu	a5,a4,80000d98 <mhandler+0x17e>
    if(is_ecall(cause) && ecall_args[0] == ECALL_GOTO_PRIV){
    80000c64:	6018                	ld	a4,0(s0)
    80000c66:	4785                	li	a5,1
    80000c68:	1af70463          	beq	a4,a5,80000e10 <mhandler+0x1f6>
    } else if(!excpt.testing){
    80000c6c:	01044783          	lbu	a5,16(s0)
    80000c70:	c3f5                	beqz	a5,80000d54 <mhandler+0x13a>

    if(cause & (1ULL << 63)){
        CSRC(mip, 1ULL << (cause &  ~(1ULL << 63)));
    }

    excpt.triggered = true;
    80000c72:	4785                	li	a5,1
    80000c74:	00f408a3          	sb	a5,17(s0)
    excpt.priv = PRIV_M;
    80000c78:	4791                	li	a5,4
    80000c7a:	c85c                	sw	a5,20(s0)
    excpt.cause = cause;
    80000c7c:	ec04                	sd	s1,24(s0)
    excpt.epc = epc;
    80000c7e:	03343023          	sd	s3,32(s0)
    excpt.tval = tval;
    80000c82:	03743423          	sd	s7,40(s0)
    excpt.tinst = tinst;
    80000c86:	03643823          	sd	s6,48(s0)
    excpt.tval2 = tval2;
    80000c8a:	03543c23          	sd	s5,56(s0)
    excpt.gva = !!((CSRR(mstatus) >> MSTATUS_GVA_OFF) & 0x1);
    80000c8e:	300027f3          	csrr	a5,mstatus
    80000c92:	9399                	srl	a5,a5,0x26
    80000c94:	8b85                	and	a5,a5,1
    80000c96:	04f40023          	sb	a5,64(s0)
    excpt.xpv = !!((CSRR(mstatus) >> 39) & 0x1);
    80000c9a:	300027f3          	csrr	a5,mstatus
    80000c9e:	939d                	srl	a5,a5,0x27
    80000ca0:	8b85                	and	a5,a5,1
    80000ca2:	04f400a3          	sb	a5,65(s0)
    excpt.testing = false;
    80000ca6:	0003c797          	auipc	a5,0x3c
    80000caa:	36078523          	sb	zero,874(a5) # 8003d010 <excpt>
    if(is_inst_fault(cause)){
    80000cae:	47d1                	li	a5,20
    80000cb0:	0097e963          	bltu	a5,s1,80000cc2 <mhandler+0xa8>
    80000cb4:	001017b7          	lui	a5,0x101
    80000cb8:	078d                	add	a5,a5,3 # 101003 <STACK_SIZE+0x1003>
    80000cba:	0097d7b3          	srl	a5,a5,s1
    80000cbe:	8b85                	and	a5,a5,1
    80000cc0:	efdd                	bnez	a5,80000d7e <mhandler+0x164>
            ERROR("instruction fault without return address");
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    real_priv = curr_priv;
    80000cc2:	00025797          	auipc	a5,0x25
    80000cc6:	93a78793          	add	a5,a5,-1734 # 800255fc <curr_priv>
    80000cca:	4398                	lw	a4,0(a5)
    unsigned temp_priv = real_priv;
    80000ccc:	00092503          	lw	a0,0(s2)
    excpt.fault_inst = 0;
    80000cd0:	0003c697          	auipc	a3,0x3c
    80000cd4:	3606bc23          	sd	zero,888(a3) # 8003d048 <excpt+0x38>
    real_priv = curr_priv;
    80000cd8:	00e92023          	sw	a4,0(s2)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000cdc:	470d                	li	a4,3
    80000cde:	02e50563          	beq	a0,a4,80000d08 <mhandler+0xee>
    80000ce2:	4711                	li	a4,4
    80000ce4:	0ce50563          	beq	a0,a4,80000dae <mhandler+0x194>
    80000ce8:	4709                	li	a4,2
    80000cea:	02e50a63          	beq	a0,a4,80000d1e <mhandler+0x104>
}
    80000cee:	60a6                	ld	ra,72(sp)
    80000cf0:	6406                	ld	s0,64(sp)
    80000cf2:	1502                	sll	a0,a0,0x20
    80000cf4:	74e2                	ld	s1,56(sp)
    80000cf6:	7942                	ld	s2,48(sp)
    80000cf8:	79a2                	ld	s3,40(sp)
    80000cfa:	7a02                	ld	s4,32(sp)
    80000cfc:	6ae2                	ld	s5,24(sp)
    80000cfe:	6b42                	ld	s6,16(sp)
    80000d00:	6ba2                	ld	s7,8(sp)
    80000d02:	9101                	srl	a0,a0,0x20
    80000d04:	6161                	add	sp,sp,80
    80000d06:	8082                	ret
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000d08:	60002773          	csrr	a4,hstatus
    80000d0c:	4394                	lw	a3,0(a5)
    80000d0e:	f7f77713          	and	a4,a4,-129
    80000d12:	9af5                	and	a3,a3,-3
    80000d14:	e299                	bnez	a3,80000d1a <mhandler+0x100>
    80000d16:	08076713          	or	a4,a4,128
    80000d1a:	60071073          	csrw	hstatus,a4
    80000d1e:	10002773          	csrr	a4,sstatus
    80000d22:	4394                	lw	a3,0(a5)
    80000d24:	4605                	li	a2,1
    80000d26:	edf77793          	and	a5,a4,-289
    80000d2a:	ffe6871b          	addw	a4,a3,-2
    80000d2e:	0ce67a63          	bgeu	a2,a4,80000e02 <mhandler+0x1e8>
    80000d32:	10079073          	csrw	sstatus,a5
    80000d36:	fa04cce3          	bltz	s1,80000cee <mhandler+0xd4>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80000d3a:	000a5783          	lhu	a5,0(s4)
    80000d3e:	468d                	li	a3,3
    else return epc + 2;
    80000d40:	002a0713          	add	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80000d44:	8b8d                	and	a5,a5,3
    80000d46:	00d79463          	bne	a5,a3,80000d4e <mhandler+0x134>
    80000d4a:	004a0713          	add	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000d4e:	14171073          	csrw	sepc,a4
    80000d52:	bf71                	j	80000cee <mhandler+0xd4>
        ERROR("untested exception!");
    80000d54:	0001c517          	auipc	a0,0x1c
    80000d58:	4b450513          	add	a0,a0,1204 # 8001d208 <__func__.1+0x560>
    80000d5c:	68a1a0ef          	jal	8001b3e6 <printf>
    80000d60:	0d700613          	li	a2,215
            ERROR("instruction fault without return address");
    80000d64:	0001b597          	auipc	a1,0x1b
    80000d68:	b3c58593          	add	a1,a1,-1220 # 8001b8a0 <__func__.3>
    80000d6c:	0001c517          	auipc	a0,0x1c
    80000d70:	3ac50513          	add	a0,a0,940 # 8001d118 <__func__.1+0x470>
    80000d74:	6721a0ef          	jal	8001b3e6 <printf>
    80000d78:	4501                	li	a0,0
    80000d7a:	30a1a0ef          	jal	8001b084 <exit>
        if(excpt.fault_inst != 0){ 
    80000d7e:	04843a03          	ld	s4,72(s0)
    80000d82:	f40a10e3          	bnez	s4,80000cc2 <mhandler+0xa8>
            ERROR("instruction fault without return address");
    80000d86:	0001c517          	auipc	a0,0x1c
    80000d8a:	4aa50513          	add	a0,a0,1194 # 8001d230 <__func__.1+0x588>
    80000d8e:	6581a0ef          	jal	8001b3e6 <printf>
    80000d92:	0ed00613          	li	a2,237
    80000d96:	b7f9                	j	80000d64 <mhandler+0x14a>
    } else if(!excpt.testing){
    80000d98:	01044783          	lbu	a5,16(s0)
    80000d9c:	dfc5                	beqz	a5,80000d54 <mhandler+0x13a>
    if(cause & (1ULL << 63)){
    80000d9e:	ec04dae3          	bgez	s1,80000c72 <mhandler+0x58>
        CSRC(mip, 1ULL << (cause &  ~(1ULL << 63)));
    80000da2:	4785                	li	a5,1
    80000da4:	009797b3          	sll	a5,a5,s1
    80000da8:	3447b073          	csrc	mip,a5
    80000dac:	b5d9                	j	80000c72 <mhandler+0x58>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000dae:	30002773          	csrr	a4,mstatus
    80000db2:	4394                	lw	a3,0(a5)
    80000db4:	00023797          	auipc	a5,0x23
    80000db8:	8047b783          	ld	a5,-2044(a5) # 800235b8 <__func__.1+0x6910>
    80000dbc:	8ff9                	and	a5,a5,a4
    80000dbe:	04a68d63          	beq	a3,a0,80000e18 <mhandler+0x1fe>
    80000dc2:	ffe6871b          	addw	a4,a3,-2
    80000dc6:	4605                	li	a2,1
    80000dc8:	04e66d63          	bltu	a2,a4,80000e22 <mhandler+0x208>
    80000dcc:	6705                	lui	a4,0x1
    80000dce:	80070713          	add	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
    80000dd2:	4609                	li	a2,2
    80000dd4:	8fd9                	or	a5,a5,a4
    80000dd6:	00c69563          	bne	a3,a2,80000de0 <mhandler+0x1c6>
    80000dda:	4705                	li	a4,1
    80000ddc:	171e                	sll	a4,a4,0x27
    80000dde:	8fd9                	or	a5,a5,a4
    80000de0:	30079073          	csrw	mstatus,a5
    80000de4:	f004c5e3          	bltz	s1,80000cee <mhandler+0xd4>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80000de8:	000a5783          	lhu	a5,0(s4)
    80000dec:	468d                	li	a3,3
    else return epc + 2;
    80000dee:	002a0713          	add	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80000df2:	8b8d                	and	a5,a5,3
    80000df4:	00d79463          	bne	a5,a3,80000dfc <mhandler+0x1e2>
    80000df8:	004a0713          	add	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000dfc:	34171073          	csrw	mepc,a4
    80000e00:	b5fd                	j	80000cee <mhandler+0xd4>
    80000e02:	1007e793          	or	a5,a5,256
    80000e06:	10079073          	csrw	sstatus,a5
    80000e0a:	f204d8e3          	bgez	s1,80000d3a <mhandler+0x120>
    80000e0e:	b5c5                	j	80000cee <mhandler+0xd4>
        goto_priv(ecall_args[1]); 
    80000e10:	4408                	lw	a0,8(s0)
    80000e12:	ccdff0ef          	jal	80000ade <goto_priv>
    if(cause & (1ULL << 63)){
    80000e16:	bdb1                	j	80000c72 <mhandler+0x58>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000e18:	6709                	lui	a4,0x2
    80000e1a:	80070713          	add	a4,a4,-2048 # 1800 <_test_table_size+0x17ff>
    80000e1e:	8fd9                	or	a5,a5,a4
    80000e20:	b7c1                	j	80000de0 <mhandler+0x1c6>
    80000e22:	dec5                	beqz	a3,80000dda <mhandler+0x1c0>
    80000e24:	bf75                	j	80000de0 <mhandler+0x1c6>

0000000080000e26 <hshandler>:

uint64_t hshandler(){
    80000e26:	715d                	add	sp,sp,-80
    80000e28:	f84a                	sd	s2,48(sp)
    80000e2a:	e486                	sd	ra,72(sp)
    80000e2c:	e0a2                	sd	s0,64(sp)
    80000e2e:	fc26                	sd	s1,56(sp)
    80000e30:	f44e                	sd	s3,40(sp)
    80000e32:	f052                	sd	s4,32(sp)
    80000e34:	ec56                	sd	s5,24(sp)
    80000e36:	e85a                	sd	s6,16(sp)
    80000e38:	e45e                	sd	s7,8(sp)

    real_priv = PRIV_HS;
    80000e3a:	00024917          	auipc	s2,0x24
    80000e3e:	7be90913          	add	s2,s2,1982 # 800255f8 <real_priv>
    80000e42:	478d                	li	a5,3
    80000e44:	00f92023          	sw	a5,0(s2)

    uint64_t cause = CSRR(scause);
    80000e48:	142024f3          	csrr	s1,scause
    uint64_t epc = CSRR(sepc);
    80000e4c:	141029f3          	csrr	s3,sepc
    80000e50:	8a4e                	mv	s4,s3
    uint64_t tval = CSRR(stval);
    80000e52:	14302bf3          	csrr	s7,stval
    uint64_t htval = CSRR(CSR_HTVAL);
    80000e56:	64302af3          	csrr	s5,htval
    uint64_t htinst = CSRR(CSR_HTINST);
    80000e5a:	64a02b73          	csrr	s6,htinst
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    80000e5e:	ff848713          	add	a4,s1,-8
    if(is_ecall(cause) && ecall_args[0] == ECALL_GOTO_PRIV){
        goto_priv(ecall_args[1]); 
    } else if(is_ecall(cause)) {
        printf("\n270\n%d\n\n",ecall_args[0]);
        ERROR("unknown ecall"); 
    } else if(!excpt.testing){
    80000e62:	0003c417          	auipc	s0,0x3c
    80000e66:	19e40413          	add	s0,s0,414 # 8003d000 <ecall_args>
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    80000e6a:	04e7e163          	bltu	a5,a4,80000eac <hshandler+0x86>
    if(is_ecall(cause) && ecall_args[0] == ECALL_GOTO_PRIV){
    80000e6e:	600c                	ld	a1,0(s0)
    80000e70:	4785                	li	a5,1
    80000e72:	10f58a63          	beq	a1,a5,80000f86 <hshandler+0x160>
        printf("\n270\n%d\n\n",ecall_args[0]);
    80000e76:	0001c517          	auipc	a0,0x1c
    80000e7a:	3fa50513          	add	a0,a0,1018 # 8001d270 <__func__.1+0x5c8>
    80000e7e:	5681a0ef          	jal	8001b3e6 <printf>
        ERROR("unknown ecall"); 
    80000e82:	0001c517          	auipc	a0,0x1c
    80000e86:	3fe50513          	add	a0,a0,1022 # 8001d280 <__func__.1+0x5d8>
    80000e8a:	55c1a0ef          	jal	8001b3e6 <printf>
    80000e8e:	10f00613          	li	a2,271
        ERROR("untested exception!");
    80000e92:	0001b597          	auipc	a1,0x1b
    80000e96:	a1e58593          	add	a1,a1,-1506 # 8001b8b0 <__func__.2>
    80000e9a:	0001c517          	auipc	a0,0x1c
    80000e9e:	27e50513          	add	a0,a0,638 # 8001d118 <__func__.1+0x470>
    80000ea2:	5441a0ef          	jal	8001b3e6 <printf>
    80000ea6:	4501                	li	a0,0
    80000ea8:	1dc1a0ef          	jal	8001b084 <exit>
    } else if(!excpt.testing){
    80000eac:	01044783          	lbu	a5,16(s0)
    80000eb0:	c7cd                	beqz	a5,80000f5a <hshandler+0x134>
    }
    
    if(cause & (1ULL << 63)){
    80000eb2:	0004d963          	bgez	s1,80000ec4 <hshandler+0x9e>
        CSRC(sip, 1ULL << (cause &  ~(1ULL << 63)));
    80000eb6:	4785                	li	a5,1
    80000eb8:	009797b3          	sll	a5,a5,s1
    80000ebc:	1447b073          	csrc	sip,a5
        //CSRC(CSR_HVIP, 1ULL << (cause &  ~(1ULL << 63)));
        CSRC(CSR_HIP, 1ULL << (cause &  ~(1ULL << 63)));
    80000ec0:	6447b073          	csrc	hip,a5
    }

    excpt.triggered = true;
    80000ec4:	4785                	li	a5,1
    80000ec6:	00f408a3          	sb	a5,17(s0)
    excpt.priv = PRIV_HS;
    80000eca:	478d                	li	a5,3
    80000ecc:	c85c                	sw	a5,20(s0)
    excpt.cause = cause;
    80000ece:	ec04                	sd	s1,24(s0)
    excpt.epc = epc;
    80000ed0:	03343023          	sd	s3,32(s0)
    excpt.tval = tval;
    80000ed4:	03743423          	sd	s7,40(s0)
    excpt.tinst = htinst;
    80000ed8:	03643823          	sd	s6,48(s0)
    excpt.tval2 = htval;
    80000edc:	03543c23          	sd	s5,56(s0)
    excpt.gva = !!((CSRR(CSR_HSTATUS) >> HSTATUS_GVA_OFF) & 0x1);
    80000ee0:	600027f3          	csrr	a5,hstatus
    80000ee4:	8399                	srl	a5,a5,0x6
    80000ee6:	8b85                	and	a5,a5,1
    80000ee8:	04f40023          	sb	a5,64(s0)
    excpt.xpv = !!((CSRR(CSR_HSTATUS) >> 7) & 0x1);
    80000eec:	600027f3          	csrr	a5,hstatus
    80000ef0:	839d                	srl	a5,a5,0x7
    80000ef2:	8b85                	and	a5,a5,1
    80000ef4:	04f400a3          	sb	a5,65(s0)
    excpt.testing = false;
    80000ef8:	0003c797          	auipc	a5,0x3c
    80000efc:	10078c23          	sb	zero,280(a5) # 8003d010 <excpt>
    if(is_inst_fault(cause)){
    80000f00:	47d1                	li	a5,20
    80000f02:	0097e963          	bltu	a5,s1,80000f14 <hshandler+0xee>
    80000f06:	001017b7          	lui	a5,0x101
    80000f0a:	078d                	add	a5,a5,3 # 101003 <STACK_SIZE+0x1003>
    80000f0c:	0097d7b3          	srl	a5,a5,s1
    80000f10:	8b85                	and	a5,a5,1
    80000f12:	efa9                	bnez	a5,80000f6c <hshandler+0x146>
            ERROR("instruction fault without return address");
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    real_priv = curr_priv;
    80000f14:	00024797          	auipc	a5,0x24
    80000f18:	6e878793          	add	a5,a5,1768 # 800255fc <curr_priv>
    80000f1c:	4398                	lw	a4,0(a5)
    unsigned temp_priv = real_priv;
    80000f1e:	00092503          	lw	a0,0(s2)
    excpt.fault_inst = 0;
    80000f22:	0003c697          	auipc	a3,0x3c
    80000f26:	1206b323          	sd	zero,294(a3) # 8003d048 <excpt+0x38>
    real_priv = curr_priv;
    80000f2a:	00e92023          	sw	a4,0(s2)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000f2e:	470d                	li	a4,3
    80000f30:	04e50f63          	beq	a0,a4,80000f8e <hshandler+0x168>
    80000f34:	4711                	li	a4,4
    80000f36:	0ae50463          	beq	a0,a4,80000fde <hshandler+0x1b8>
    80000f3a:	4709                	li	a4,2
    80000f3c:	06e50463          	beq	a0,a4,80000fa4 <hshandler+0x17e>
}
    80000f40:	60a6                	ld	ra,72(sp)
    80000f42:	6406                	ld	s0,64(sp)
    80000f44:	1502                	sll	a0,a0,0x20
    80000f46:	74e2                	ld	s1,56(sp)
    80000f48:	7942                	ld	s2,48(sp)
    80000f4a:	79a2                	ld	s3,40(sp)
    80000f4c:	7a02                	ld	s4,32(sp)
    80000f4e:	6ae2                	ld	s5,24(sp)
    80000f50:	6b42                	ld	s6,16(sp)
    80000f52:	6ba2                	ld	s7,8(sp)
    80000f54:	9101                	srl	a0,a0,0x20
    80000f56:	6161                	add	sp,sp,80
    80000f58:	8082                	ret
        ERROR("untested exception!");
    80000f5a:	0001c517          	auipc	a0,0x1c
    80000f5e:	2ae50513          	add	a0,a0,686 # 8001d208 <__func__.1+0x560>
    80000f62:	4841a0ef          	jal	8001b3e6 <printf>
    80000f66:	11100613          	li	a2,273
    80000f6a:	b725                	j	80000e92 <hshandler+0x6c>
        if(excpt.fault_inst != 0){ 
    80000f6c:	04843a03          	ld	s4,72(s0)
    80000f70:	fa0a12e3          	bnez	s4,80000f14 <hshandler+0xee>
            ERROR("instruction fault without return address");
    80000f74:	0001c517          	auipc	a0,0x1c
    80000f78:	2bc50513          	add	a0,a0,700 # 8001d230 <__func__.1+0x588>
    80000f7c:	46a1a0ef          	jal	8001b3e6 <printf>
    80000f80:	12900613          	li	a2,297
    80000f84:	b739                	j	80000e92 <hshandler+0x6c>
        goto_priv(ecall_args[1]); 
    80000f86:	4408                	lw	a0,8(s0)
    80000f88:	b57ff0ef          	jal	80000ade <goto_priv>
    if(cause & (1ULL << 63)){
    80000f8c:	bf25                	j	80000ec4 <hshandler+0x9e>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000f8e:	60002773          	csrr	a4,hstatus
    80000f92:	4394                	lw	a3,0(a5)
    80000f94:	f7f77713          	and	a4,a4,-129
    80000f98:	9af5                	and	a3,a3,-3
    80000f9a:	e299                	bnez	a3,80000fa0 <hshandler+0x17a>
    80000f9c:	08076713          	or	a4,a4,128
    80000fa0:	60071073          	csrw	hstatus,a4
    80000fa4:	10002773          	csrr	a4,sstatus
    80000fa8:	4394                	lw	a3,0(a5)
    80000faa:	4605                	li	a2,1
    80000fac:	edf77793          	and	a5,a4,-289
    80000fb0:	ffe6871b          	addw	a4,a3,-2
    80000fb4:	00e66463          	bltu	a2,a4,80000fbc <hshandler+0x196>
    80000fb8:	1007e793          	or	a5,a5,256
    80000fbc:	10079073          	csrw	sstatus,a5
    80000fc0:	f804c0e3          	bltz	s1,80000f40 <hshandler+0x11a>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80000fc4:	000a5783          	lhu	a5,0(s4)
    80000fc8:	468d                	li	a3,3
    else return epc + 2;
    80000fca:	002a0713          	add	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80000fce:	8b8d                	and	a5,a5,3
    80000fd0:	00d79463          	bne	a5,a3,80000fd8 <hshandler+0x1b2>
    80000fd4:	004a0713          	add	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000fd8:	14171073          	csrw	sepc,a4
    80000fdc:	b795                	j	80000f40 <hshandler+0x11a>
    80000fde:	30002773          	csrr	a4,mstatus
    80000fe2:	4394                	lw	a3,0(a5)
    80000fe4:	00022797          	auipc	a5,0x22
    80000fe8:	5d47b783          	ld	a5,1492(a5) # 800235b8 <__func__.1+0x6910>
    80000fec:	8ff9                	and	a5,a5,a4
    80000fee:	04a68263          	beq	a3,a0,80001032 <hshandler+0x20c>
    80000ff2:	ffe6871b          	addw	a4,a3,-2
    80000ff6:	4605                	li	a2,1
    80000ff8:	04e66263          	bltu	a2,a4,8000103c <hshandler+0x216>
    80000ffc:	6705                	lui	a4,0x1
    80000ffe:	80070713          	add	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
    80001002:	4609                	li	a2,2
    80001004:	8fd9                	or	a5,a5,a4
    80001006:	00c69563          	bne	a3,a2,80001010 <hshandler+0x1ea>
    8000100a:	4705                	li	a4,1
    8000100c:	171e                	sll	a4,a4,0x27
    8000100e:	8fd9                	or	a5,a5,a4
    80001010:	30079073          	csrw	mstatus,a5
    80001014:	f204c6e3          	bltz	s1,80000f40 <hshandler+0x11a>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001018:	000a5783          	lhu	a5,0(s4)
    8000101c:	468d                	li	a3,3
    else return epc + 2;
    8000101e:	002a0713          	add	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001022:	8b8d                	and	a5,a5,3
    80001024:	00d79463          	bne	a5,a3,8000102c <hshandler+0x206>
    80001028:	004a0713          	add	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    8000102c:	34171073          	csrw	mepc,a4
    80001030:	bf01                	j	80000f40 <hshandler+0x11a>
    80001032:	6709                	lui	a4,0x2
    80001034:	80070713          	add	a4,a4,-2048 # 1800 <_test_table_size+0x17ff>
    80001038:	8fd9                	or	a5,a5,a4
    8000103a:	bfd9                	j	80001010 <hshandler+0x1ea>
    8000103c:	d6f9                	beqz	a3,8000100a <hshandler+0x1e4>
    8000103e:	bfc9                	j	80001010 <hshandler+0x1ea>

0000000080001040 <vshandler>:

uint64_t vshandler(){
    80001040:	7139                	add	sp,sp,-64
    80001042:	f426                	sd	s1,40(sp)
    80001044:	fc06                	sd	ra,56(sp)
    80001046:	f822                	sd	s0,48(sp)
    80001048:	f04a                	sd	s2,32(sp)
    8000104a:	ec4e                	sd	s3,24(sp)
    8000104c:	e852                	sd	s4,16(sp)
    8000104e:	e456                	sd	s5,8(sp)

    real_priv = PRIV_VS;
    80001050:	00024497          	auipc	s1,0x24
    80001054:	5a848493          	add	s1,s1,1448 # 800255f8 <real_priv>
    80001058:	4709                	li	a4,2
    8000105a:	c098                	sw	a4,0(s1)

    uint64_t cause = CSRR(scause);
    8000105c:	14202473          	csrr	s0,scause
    uint64_t epc = CSRR(sepc);
    80001060:	141029f3          	csrr	s3,sepc
    80001064:	894e                	mv	s2,s3
    uint64_t tval = CSRR(stval);
    80001066:	14302af3          	csrr	s5,stval
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    8000106a:	478d                	li	a5,3
    8000106c:	ff840693          	add	a3,s0,-8
    80001070:	04d7e463          	bltu	a5,a3,800010b8 <vshandler+0x78>
    VERBOSE("virtual supervisor handler (scause = 0x%llx)", cause);
    DEBUG("scause = 0x%llx", cause);
    DEBUG("sepc = 0x%lx", epc);
    DEBUG("stval = 0x%lx", tval);
    
    if(is_ecall(cause) && ecall_args[0] ==ECALL_GOTO_PRIV ){
    80001074:	0003ca17          	auipc	s4,0x3c
    80001078:	f8ca0a13          	add	s4,s4,-116 # 8003d000 <ecall_args>
    8000107c:	000a3703          	ld	a4,0(s4)
    80001080:	4785                	li	a5,1
    80001082:	18f70a63          	beq	a4,a5,80001216 <vshandler+0x1d6>
        goto_priv(ecall_args[1]); 
    } else if(!excpt.testing){
    80001086:	010a4783          	lbu	a5,16(s4)
    8000108a:	18079a63          	bnez	a5,8000121e <vshandler+0x1de>
        ERROR("untested exception!");
    8000108e:	0001c517          	auipc	a0,0x1c
    80001092:	17a50513          	add	a0,a0,378 # 8001d208 <__func__.1+0x560>
    80001096:	3501a0ef          	jal	8001b3e6 <printf>
    8000109a:	14200613          	li	a2,322
    excpt.epc = epc;
    excpt.tval = tval;
    excpt.testing = false;
    if(is_inst_fault(cause)){
        if(excpt.fault_inst != 0) epc = excpt.fault_inst;
        else ERROR("instruction fault without return address");
    8000109e:	0001b597          	auipc	a1,0x1b
    800010a2:	82258593          	add	a1,a1,-2014 # 8001b8c0 <__func__.1>
    800010a6:	0001c517          	auipc	a0,0x1c
    800010aa:	07250513          	add	a0,a0,114 # 8001d118 <__func__.1+0x470>
    800010ae:	3381a0ef          	jal	8001b3e6 <printf>
    800010b2:	4501                	li	a0,0
    800010b4:	7d1190ef          	jal	8001b084 <exit>
    } else if(!excpt.testing){
    800010b8:	0003c797          	auipc	a5,0x3c
    800010bc:	f4878793          	add	a5,a5,-184 # 8003d000 <ecall_args>
    800010c0:	0107c683          	lbu	a3,16(a5)
    800010c4:	d6e9                	beqz	a3,8000108e <vshandler+0x4e>
    if(cause & (1ULL << 63)){
    800010c6:	06045063          	bgez	s0,80001126 <vshandler+0xe6>
        CSRC(sip, 1ULL << (cause &  ~(1ULL << 63)));
    800010ca:	4685                	li	a3,1
    800010cc:	008696b3          	sll	a3,a3,s0
    800010d0:	1446b073          	csrc	sip,a3
    excpt.priv = PRIV_VS;
    800010d4:	cbd8                	sw	a4,20(a5)
    excpt.testing = false;
    800010d6:	10000713          	li	a4,256
    excpt.cause = cause;
    800010da:	ef80                	sd	s0,24(a5)
    excpt.epc = epc;
    800010dc:	0337b023          	sd	s3,32(a5)
    excpt.tval = tval;
    800010e0:	0357b423          	sd	s5,40(a5)
    excpt.testing = false;
    800010e4:	00e79823          	sh	a4,16(a5)
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    real_priv = curr_priv;
    800010e8:	00024797          	auipc	a5,0x24
    800010ec:	51478793          	add	a5,a5,1300 # 800255fc <curr_priv>
    800010f0:	4398                	lw	a4,0(a5)
    unsigned temp_priv = real_priv;
    800010f2:	4088                	lw	a0,0(s1)
    excpt.fault_inst = 0;
    800010f4:	0003c697          	auipc	a3,0x3c
    800010f8:	f406ba23          	sd	zero,-172(a3) # 8003d048 <excpt+0x38>
    real_priv = curr_priv;
    800010fc:	c098                	sw	a4,0(s1)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800010fe:	470d                	li	a4,3
    80001100:	06e50463          	beq	a0,a4,80001168 <vshandler+0x128>
    80001104:	4711                	li	a4,4
    80001106:	0ae50e63          	beq	a0,a4,800011c2 <vshandler+0x182>
    8000110a:	4709                	li	a4,2
    8000110c:	06e50963          	beq	a0,a4,8000117e <vshandler+0x13e>
}
    80001110:	70e2                	ld	ra,56(sp)
    80001112:	7442                	ld	s0,48(sp)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001114:	1502                	sll	a0,a0,0x20
}
    80001116:	74a2                	ld	s1,40(sp)
    80001118:	7902                	ld	s2,32(sp)
    8000111a:	69e2                	ld	s3,24(sp)
    8000111c:	6a42                	ld	s4,16(sp)
    8000111e:	6aa2                	ld	s5,8(sp)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001120:	9101                	srl	a0,a0,0x20
}
    80001122:	6121                	add	sp,sp,64
    80001124:	8082                	ret
    excpt.priv = PRIV_VS;
    80001126:	cbd8                	sw	a4,20(a5)
    excpt.testing = false;
    80001128:	10000713          	li	a4,256
    8000112c:	00e79823          	sh	a4,16(a5)
    excpt.cause = cause;
    80001130:	ef80                	sd	s0,24(a5)
    excpt.epc = epc;
    80001132:	0337b023          	sd	s3,32(a5)
    excpt.tval = tval;
    80001136:	0357b423          	sd	s5,40(a5)
    if(is_inst_fault(cause)){
    8000113a:	4751                	li	a4,20
    8000113c:	fa8766e3          	bltu	a4,s0,800010e8 <vshandler+0xa8>
    80001140:	00101737          	lui	a4,0x101
    80001144:	070d                	add	a4,a4,3 # 101003 <STACK_SIZE+0x1003>
    80001146:	00875733          	srl	a4,a4,s0
    8000114a:	8b05                	and	a4,a4,1
    8000114c:	df51                	beqz	a4,800010e8 <vshandler+0xa8>
        if(excpt.fault_inst != 0) epc = excpt.fault_inst;
    8000114e:	0487b903          	ld	s2,72(a5)
    80001152:	f8091be3          	bnez	s2,800010e8 <vshandler+0xa8>
        else ERROR("instruction fault without return address");
    80001156:	0001c517          	auipc	a0,0x1c
    8000115a:	0da50513          	add	a0,a0,218 # 8001d230 <__func__.1+0x588>
    8000115e:	2881a0ef          	jal	8001b3e6 <printf>
    80001162:	15100613          	li	a2,337
    80001166:	bf25                	j	8000109e <vshandler+0x5e>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001168:	60002773          	csrr	a4,hstatus
    8000116c:	4394                	lw	a3,0(a5)
    8000116e:	f7f77713          	and	a4,a4,-129
    80001172:	9af5                	and	a3,a3,-3
    80001174:	e299                	bnez	a3,8000117a <vshandler+0x13a>
    80001176:	08076713          	or	a4,a4,128
    8000117a:	60071073          	csrw	hstatus,a4
    8000117e:	10002773          	csrr	a4,sstatus
    80001182:	4394                	lw	a3,0(a5)
    80001184:	4605                	li	a2,1
    80001186:	edf77793          	and	a5,a4,-289
    8000118a:	ffe6871b          	addw	a4,a3,-2
    8000118e:	02e67363          	bgeu	a2,a4,800011b4 <vshandler+0x174>
    80001192:	10079073          	csrw	sstatus,a5
    80001196:	f6044de3          	bltz	s0,80001110 <vshandler+0xd0>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    8000119a:	00095783          	lhu	a5,0(s2)
    8000119e:	468d                	li	a3,3
    else return epc + 2;
    800011a0:	00290713          	add	a4,s2,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800011a4:	8b8d                	and	a5,a5,3
    800011a6:	00d79463          	bne	a5,a3,800011ae <vshandler+0x16e>
    800011aa:	00490713          	add	a4,s2,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800011ae:	14171073          	csrw	sepc,a4
    800011b2:	bfb9                	j	80001110 <vshandler+0xd0>
    800011b4:	1007e793          	or	a5,a5,256
    800011b8:	10079073          	csrw	sstatus,a5
    800011bc:	fc045fe3          	bgez	s0,8000119a <vshandler+0x15a>
    800011c0:	bf81                	j	80001110 <vshandler+0xd0>
    800011c2:	30002773          	csrr	a4,mstatus
    800011c6:	4394                	lw	a3,0(a5)
    800011c8:	00022797          	auipc	a5,0x22
    800011cc:	3f07b783          	ld	a5,1008(a5) # 800235b8 <__func__.1+0x6910>
    800011d0:	8ff9                	and	a5,a5,a4
    800011d2:	06a68463          	beq	a3,a0,8000123a <vshandler+0x1fa>
    800011d6:	ffe6871b          	addw	a4,a3,-2
    800011da:	4605                	li	a2,1
    800011dc:	06e66463          	bltu	a2,a4,80001244 <vshandler+0x204>
    800011e0:	6705                	lui	a4,0x1
    800011e2:	80070713          	add	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
    800011e6:	4609                	li	a2,2
    800011e8:	8fd9                	or	a5,a5,a4
    800011ea:	00c69563          	bne	a3,a2,800011f4 <vshandler+0x1b4>
    800011ee:	4705                	li	a4,1
    800011f0:	171e                	sll	a4,a4,0x27
    800011f2:	8fd9                	or	a5,a5,a4
    800011f4:	30079073          	csrw	mstatus,a5
    800011f8:	f0044ce3          	bltz	s0,80001110 <vshandler+0xd0>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800011fc:	00095783          	lhu	a5,0(s2)
    80001200:	468d                	li	a3,3
    else return epc + 2;
    80001202:	00290713          	add	a4,s2,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001206:	8b8d                	and	a5,a5,3
    80001208:	00d79463          	bne	a5,a3,80001210 <vshandler+0x1d0>
    8000120c:	00490713          	add	a4,s2,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001210:	34171073          	csrw	mepc,a4
    80001214:	bdf5                	j	80001110 <vshandler+0xd0>
        goto_priv(ecall_args[1]); 
    80001216:	008a2503          	lw	a0,8(s4)
    8000121a:	8c5ff0ef          	jal	80000ade <goto_priv>
    excpt.priv = PRIV_VS;
    8000121e:	4789                	li	a5,2
    80001220:	00fa2a23          	sw	a5,20(s4)
    excpt.testing = false;
    80001224:	10000793          	li	a5,256
    excpt.cause = cause;
    80001228:	008a3c23          	sd	s0,24(s4)
    excpt.epc = epc;
    8000122c:	033a3023          	sd	s3,32(s4)
    excpt.tval = tval;
    80001230:	035a3423          	sd	s5,40(s4)
    excpt.testing = false;
    80001234:	00fa1823          	sh	a5,16(s4)
    if(is_inst_fault(cause)){
    80001238:	bd45                	j	800010e8 <vshandler+0xa8>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    8000123a:	6709                	lui	a4,0x2
    8000123c:	80070713          	add	a4,a4,-2048 # 1800 <_test_table_size+0x17ff>
    80001240:	8fd9                	or	a5,a5,a4
    80001242:	bf4d                	j	800011f4 <vshandler+0x1b4>
    80001244:	d6cd                	beqz	a3,800011ee <vshandler+0x1ae>
    80001246:	b77d                	j	800011f4 <vshandler+0x1b4>

0000000080001248 <expand_compressed_instruction>:

uint32_t expand_compressed_instruction(uint16_t ins) {
    80001248:	1141                	add	sp,sp,-16
    8000124a:	e406                	sd	ra,8(sp)

    if(!INS_COMPRESSED(ins)) {
    8000124c:	00357713          	and	a4,a0,3
    80001250:	478d                	li	a5,3
    80001252:	04f70763          	beq	a4,a5,800012a0 <expand_compressed_instruction+0x58>
        ERROR("trying to expand non-compressed instruction");
    }

    if(INS_MATCH_C_LW(ins) || INS_MATCH_C_LD(ins) || INS_MATCH_C_SW(ins) || INS_MATCH_C_SD(ins)){
    80001256:	77f9                	lui	a5,0xffffe
    80001258:	078d                	add	a5,a5,3 # ffffffffffffe003 <__stack_top+0xffffffff7fcff003>
    8000125a:	8fe9                	and	a5,a5,a0
    8000125c:	6711                	lui	a4,0x4
    8000125e:	85aa                	mv	a1,a0
    80001260:	08e78863          	beq	a5,a4,800012f0 <expand_compressed_instruction+0xa8>
    80001264:	6719                	lui	a4,0x6
    80001266:	04e78663          	beq	a5,a4,800012b2 <expand_compressed_instruction+0x6a>
    8000126a:	6731                	lui	a4,0xc
    8000126c:	0ae78863          	beq	a5,a4,8000131c <expand_compressed_instruction+0xd4>
    80001270:	6739                	lui	a4,0xe
    80001272:	0ae78063          	beq	a5,a4,80001312 <expand_compressed_instruction+0xca>
            ((ins & INS_C_IMM0_MASK)  >> INS_C_IMM0_OFF) & 0x1 << 6 |
            ((ins & INS_C_IMM0_MASK)  >> INS_C_IMM0_OFF) >> 1 & 0x1 << 2;
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    } else {
        ERROR("expansion not implemented for target compressed instruction: 0x%x", ins);
    80001276:	0001c517          	auipc	a0,0x1c
    8000127a:	06a50513          	add	a0,a0,106 # 8001d2e0 <__func__.1+0x638>
    8000127e:	1681a0ef          	jal	8001b3e6 <printf>
    80001282:	17000613          	li	a2,368
    80001286:	0001a597          	auipc	a1,0x1a
    8000128a:	64a58593          	add	a1,a1,1610 # 8001b8d0 <__func__.0>
    8000128e:	0001c517          	auipc	a0,0x1c
    80001292:	e8a50513          	add	a0,a0,-374 # 8001d118 <__func__.1+0x470>
    80001296:	1501a0ef          	jal	8001b3e6 <printf>
    8000129a:	4501                	li	a0,0
    8000129c:	5e9190ef          	jal	8001b084 <exit>
        ERROR("trying to expand non-compressed instruction");
    800012a0:	0001c517          	auipc	a0,0x1c
    800012a4:	00050513          	mv	a0,a0
    800012a8:	13e1a0ef          	jal	8001b3e6 <printf>
    800012ac:	15d00613          	li	a2,349
    800012b0:	bfd9                	j	80001286 <expand_compressed_instruction+0x3e>
            (is_load ? MATCH_LD : MATCH_SD):
    800012b2:	650d                	lui	a0,0x3
        bool is_load = INS_MATCH_C_LW(ins) || INS_MATCH_C_LD(ins); 
    800012b4:	4805                	li	a6,1
            (is_load ? MATCH_LD : MATCH_SD):
    800012b6:	050d                	add	a0,a0,3 # 3003 <_test_table_size+0x3002>
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    800012b8:	0025d713          	srl	a4,a1,0x2
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    800012bc:	0075d793          	srl	a5,a1,0x7
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    800012c0:	8b1d                	and	a4,a4,7
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    800012c2:	8b9d                	and	a5,a5,7
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    800012c4:	0721                	add	a4,a4,8 # e008 <_test_table_size+0xe007>
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    800012c6:	07a1                	add	a5,a5,8
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    800012c8:	01559613          	sll	a2,a1,0x15
    800012cc:	0c0006b7          	lui	a3,0xc000
    800012d0:	8e75                	and	a2,a2,a3
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
    800012d2:	46d1                	li	a3,20
    800012d4:	00080363          	beqz	a6,800012da <expand_compressed_instruction+0x92>
    800012d8:	469d                	li	a3,7
    }

}
    800012da:	60a2                	ld	ra,8(sp)
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    800012dc:	00f7979b          	sllw	a5,a5,0xf
    800012e0:	8d51                	or	a0,a0,a2
    800012e2:	8d5d                	or	a0,a0,a5
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
    800012e4:	00d7173b          	sllw	a4,a4,a3
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    800012e8:	8d59                	or	a0,a0,a4
    800012ea:	2501                	sext.w	a0,a0
}
    800012ec:	0141                	add	sp,sp,16
    800012ee:	8082                	ret
            (is_load ? MATCH_LD : MATCH_SD):
    800012f0:	6509                	lui	a0,0x2
        bool is_load = INS_MATCH_C_LW(ins) || INS_MATCH_C_LD(ins); 
    800012f2:	4805                	li	a6,1
            (is_load ? MATCH_LD : MATCH_SD):
    800012f4:	050d                	add	a0,a0,3 # 2003 <_test_table_size+0x2002>
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    800012f6:	0075d793          	srl	a5,a1,0x7
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    800012fa:	86be                	mv	a3,a5
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    800012fc:	0025d713          	srl	a4,a1,0x2
    80001300:	8b1d                	and	a4,a4,7
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    80001302:	8b9d                	and	a5,a5,7
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    80001304:	0386f693          	and	a3,a3,56
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    80001308:	0721                	add	a4,a4,8
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    8000130a:	07a1                	add	a5,a5,8
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    8000130c:	4601                	li	a2,0
    8000130e:	d2f1                	beqz	a3,800012d2 <expand_compressed_instruction+0x8a>
    80001310:	bf65                	j	800012c8 <expand_compressed_instruction+0x80>
            (is_load ? MATCH_LD : MATCH_SD):
    80001312:	650d                	lui	a0,0x3
    80001314:	4801                	li	a6,0
    80001316:	02350513          	add	a0,a0,35 # 3023 <_test_table_size+0x3022>
    8000131a:	bf79                	j	800012b8 <expand_compressed_instruction+0x70>
    8000131c:	6509                	lui	a0,0x2
    8000131e:	4801                	li	a6,0
    80001320:	02350513          	add	a0,a0,35 # 2023 <_test_table_size+0x2022>
    80001324:	bfc9                	j	800012f6 <expand_compressed_instruction+0xae>

0000000080001326 <reset_state>:

extern void hshandler_entry();
extern void mhandler_entry();
extern void vshandler_entry();
    
void reset_state(){
    80001326:	1141                	add	sp,sp,-16

    goto_priv(PRIV_M);
    80001328:	4511                	li	a0,4
void reset_state(){
    8000132a:	e406                	sd	ra,8(sp)
    goto_priv(PRIV_M);
    8000132c:	fb2ff0ef          	jal	80000ade <goto_priv>
    CSRW(mstatus, 0ULL);
    80001330:	30005073          	csrw	mstatus,0
    //CSRW(mtvec, 0ULL);
    CSRW(medeleg, 0ULL);
    80001334:	30205073          	csrw	medeleg,0
    CSRW(mideleg, 0ULL);
    80001338:	30305073          	csrw	mideleg,0
    CSRW(mip, 0ULL);
    8000133c:	34405073          	csrw	mip,0
    CSRW(mie, 0ULL);
    80001340:	30405073          	csrw	mie,0
    //CSRW(mtime, 0ULL); 
    //CSRW(mtimecmp, 0ULL); 
    CSRW(mscratch, 0ULL);
    80001344:	34005073          	csrw	mscratch,0
    CSRW(mepc, 0ULL);
    80001348:	34105073          	csrw	mepc,0
    CSRW(mtval, 0ULL);
    8000134c:	34305073          	csrw	mtval,0
    CSRW(CSR_MTINST, 0ULL);
    80001350:	34a05073          	csrw	0x34a,0
    CSRW(CSR_MTVAL2, 0ULL);
    80001354:	34b05073          	csrw	0x34b,0
    //what about pmp register?
    CSRW(sstatus, 0ULL);
    80001358:	10005073          	csrw	sstatus,0
    //CSRW(stvec, 0ULL);
    CSRW(sip, 0ULL);
    8000135c:	14405073          	csrw	sip,0
    CSRW(sie, 0ULL);
    80001360:	10405073          	csrw	sie,0
    CSRW(sscratch, 0ULL);
    80001364:	14005073          	csrw	sscratch,0
    CSRW(sepc, 0ULL);
    80001368:	14105073          	csrw	sepc,0
    CSRW(scause, 0ULL);
    8000136c:	14205073          	csrw	scause,0
    CSRW(stval, 0ULL);
    80001370:	14305073          	csrw	stval,0
    CSRW(satp, 0ULL);
    80001374:	18005073          	csrw	satp,0
    CSRW(CSR_HSTATUS, 0ULL);
    80001378:	60005073          	csrw	hstatus,0
    CSRW(CSR_HIDELEG, 0ULL);
    8000137c:	60305073          	csrw	hideleg,0
    CSRW(CSR_HEDELEG, 0ULL);
    80001380:	60205073          	csrw	hedeleg,0
    CSRW(CSR_HVIP, 0ULL);
    80001384:	64505073          	csrw	hvip,0
    CSRW(CSR_HIP, 0ULL);
    80001388:	64405073          	csrw	hip,0
    CSRW(CSR_HIE, 0ULL);  
    8000138c:	60405073          	csrw	hie,0
    CSRW(CSR_HTVAL, 0ULL);
    80001390:	64305073          	csrw	htval,0
    CSRW(CSR_HTINST, 0ULL);
    80001394:	64a05073          	csrw	htinst,0
    CSRW(CSR_HGATP, 0ULL);
    80001398:	68005073          	csrw	hgatp,0
    CSRW(CSR_VSSTATUS, 0ULL);
    8000139c:	20005073          	csrw	vsstatus,0
    CSRW(CSR_VSIP, 0ULL);
    800013a0:	24405073          	csrw	vsip,0
    CSRW(CSR_VSIE, 0ULL);
    800013a4:	20405073          	csrw	vsie,0
    //CSRW(CSR_VSTVEC, 0ULL);
    CSRW(CSR_VSSCRATCH, 0ULL);
    800013a8:	24005073          	csrw	vsscratch,0
    CSRW(CSR_VSEPC, 0ULL);
    800013ac:	24105073          	csrw	vsepc,0
    CSRW(CSR_VSCAUSE, 0ULL);
    800013b0:	24205073          	csrw	vscause,0
    CSRW(CSR_VSTVAL, 0ULL);
    800013b4:	24305073          	csrw	vstval,0
    CSRW(CSR_VSATP, 0ULL);  
    800013b8:	28005073          	csrw	vsatp,0

    CSRW(mtvec, mhandler_entry);
    800013bc:	0001a797          	auipc	a5,0x1a
    800013c0:	27078793          	add	a5,a5,624 # 8001b62c <mhandler_entry>
    800013c4:	30579073          	csrw	mtvec,a5
    CSRS(medeleg, (1ULL << 8) | (1ULL << 10));
    800013c8:	50000793          	li	a5,1280
    800013cc:	3027a073          	csrs	medeleg,a5
    // full access to physical memory to other modes
    CSRW(pmpcfg0, 0xf);
    800013d0:	3a07d073          	csrw	pmpcfg0,15
    CSRW(pmpaddr0, (uint64_t) -1);
    800013d4:	57fd                	li	a5,-1
    800013d6:	3b079073          	csrw	pmpaddr0,a5

    CSRW(stvec, hshandler_entry);
    800013da:	0001a797          	auipc	a5,0x1a
    800013de:	29a78793          	add	a5,a5,666 # 8001b674 <hshandler_entry>
    800013e2:	10579073          	csrw	stvec,a5
    CSRS(CSR_HEDELEG, (1ULL << 8));
    800013e6:	10000793          	li	a5,256
    800013ea:	6027a073          	csrs	hedeleg,a5

    CSRW(CSR_VSTVEC, vshandler_entry);
    800013ee:	0001a797          	auipc	a5,0x1a
    800013f2:	2ce78793          	add	a5,a5,718 # 8001b6bc <vshandler_entry>
    800013f6:	20579073          	csrw	vstvec,a5
// }



static inline void sfence(){
    asm volatile ("sfence.vma \n\t");
    800013fa:	12000073          	sfence.vma
        ".insn r 0x73, 0x0, 0x31, x0, x0, x0\n\t"
        ::: "memory");
}

static inline void hfence_vvma() {
    asm volatile(
    800013fe:	22000073          	.4byte	0x22000073
    asm volatile(
    80001402:	62000073          	.4byte	0x62000073

    sfence();
    hfence();
}
    80001406:	60a2                	ld	ra,8(sp)
    80001408:	0141                	add	sp,sp,16
    8000140a:	8082                	ret

000000008000140c <check_xip_regs_1>:
#include <rvh_test.h>

bool check_xip_regs_1(){
    8000140c:	7179                	add	sp,sp,-48

    TEST_START();
    8000140e:	0001a597          	auipc	a1,0x1a
    80001412:	4e258593          	add	a1,a1,1250 # 8001b8f0 <__func__.3>
    80001416:	0001c517          	auipc	a0,0x1c
    8000141a:	b7a50513          	add	a0,a0,-1158 # 8001cf90 <__func__.1+0x2e8>
bool check_xip_regs_1(){
    8000141e:	f406                	sd	ra,40(sp)
    80001420:	f022                	sd	s0,32(sp)
    80001422:	ec26                	sd	s1,24(sp)
    80001424:	e84a                	sd	s2,16(sp)
    80001426:	e44e                	sd	s3,8(sp)
    TEST_START();
    80001428:	7bf190ef          	jal	8001b3e6 <printf>
    8000142c:	4529                	li	a0,10
    8000142e:	68b180ef          	jal	8001a2b8 <putchar>

    CSRW(mideleg, 0);
    80001432:	30305073          	csrw	mideleg,0

    int64_t mtime_mask = ~((int64_t)0x80);

    CSRW(mideleg, (uint64_t)-1);
    80001436:	57fd                	li	a5,-1
    80001438:	30379073          	csrw	mideleg,a5
    VERBOSE("setting mideleg and hideleg\n");
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    8000143c:	60379073          	csrw	hideleg,a5
    check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x2);
    80001440:	244024f3          	csrr	s1,vsip
    80001444:	24479073          	csrw	vsip,a5
    80001448:	24402473          	csrr	s0,vsip
    8000144c:	0001c617          	auipc	a2,0x1c
    80001450:	eec60613          	add	a2,a2,-276 # 8001d338 <__func__.1+0x690>
    80001454:	08200593          	li	a1,130
    80001458:	0001c517          	auipc	a0,0x1c
    8000145c:	b5050513          	add	a0,a0,-1200 # 8001cfa8 <__func__.1+0x300>
    80001460:	787190ef          	jal	8001b3e6 <printf>
    80001464:	4789                	li	a5,2
    80001466:	10f40e63          	beq	s0,a5,80001582 <check_xip_regs_1+0x176>
    8000146a:	0001c597          	auipc	a1,0x1c
    8000146e:	b1658593          	add	a1,a1,-1258 # 8001cf80 <__func__.1+0x2d8>
    80001472:	0001c517          	auipc	a0,0x1c
    80001476:	b4e50513          	add	a0,a0,-1202 # 8001cfc0 <__func__.1+0x318>
    8000147a:	76d190ef          	jal	8001b3e6 <printf>
    8000147e:	0001c517          	auipc	a0,0x1c
    80001482:	b4a50513          	add	a0,a0,-1206 # 8001cfc8 <__func__.1+0x320>
    80001486:	761190ef          	jal	8001b3e6 <printf>
    8000148a:	4689                	li	a3,2
    8000148c:	8622                	mv	a2,s0
    8000148e:	55fd                	li	a1,-1
    80001490:	0001c517          	auipc	a0,0x1c
    80001494:	b4050513          	add	a0,a0,-1216 # 8001cfd0 <__func__.1+0x328>
    80001498:	74f190ef          	jal	8001b3e6 <printf>
    8000149c:	02900513          	li	a0,41
    800014a0:	619180ef          	jal	8001a2b8 <putchar>
    800014a4:	4529                	li	a0,10
    800014a6:	613180ef          	jal	8001a2b8 <putchar>
    800014aa:	4981                	li	s3,0
    800014ac:	24449073          	csrw	vsip,s1
    check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x2222);        //开启Shlcofideleg 扩展则为2222，否则为222
    800014b0:	20402973          	csrr	s2,vsie
    800014b4:	57fd                	li	a5,-1
    800014b6:	20479073          	csrw	vsie,a5
    800014ba:	204024f3          	csrr	s1,vsie
    800014be:	6409                	lui	s0,0x2
    800014c0:	0001c617          	auipc	a2,0x1c
    800014c4:	e8060613          	add	a2,a2,-384 # 8001d340 <__func__.1+0x698>
    800014c8:	08200593          	li	a1,130
    800014cc:	0001c517          	auipc	a0,0x1c
    800014d0:	adc50513          	add	a0,a0,-1316 # 8001cfa8 <__func__.1+0x300>
    800014d4:	22240413          	add	s0,s0,546 # 2222 <_test_table_size+0x2221>
    800014d8:	70f190ef          	jal	8001b3e6 <printf>
    800014dc:	06848c63          	beq	s1,s0,80001554 <check_xip_regs_1+0x148>
    800014e0:	0001c597          	auipc	a1,0x1c
    800014e4:	aa058593          	add	a1,a1,-1376 # 8001cf80 <__func__.1+0x2d8>
    800014e8:	0001c517          	auipc	a0,0x1c
    800014ec:	ad850513          	add	a0,a0,-1320 # 8001cfc0 <__func__.1+0x318>
    800014f0:	6f7190ef          	jal	8001b3e6 <printf>
    800014f4:	0001c517          	auipc	a0,0x1c
    800014f8:	ad450513          	add	a0,a0,-1324 # 8001cfc8 <__func__.1+0x320>
    800014fc:	6eb190ef          	jal	8001b3e6 <printf>
    80001500:	86a2                	mv	a3,s0
    80001502:	8626                	mv	a2,s1
    80001504:	55fd                	li	a1,-1
    80001506:	0001c517          	auipc	a0,0x1c
    8000150a:	aca50513          	add	a0,a0,-1334 # 8001cfd0 <__func__.1+0x328>
    8000150e:	6d9190ef          	jal	8001b3e6 <printf>
    80001512:	02900513          	li	a0,41
    80001516:	5a3180ef          	jal	8001a2b8 <putchar>
    8000151a:	4529                	li	a0,10
    8000151c:	59d180ef          	jal	8001a2b8 <putchar>
    80001520:	20491073          	csrw	vsie,s2
    80001524:	4401                	li	s0,0
    
    TEST_END();
    80001526:	0001c597          	auipc	a1,0x1c
    8000152a:	a5a58593          	add	a1,a1,-1446 # 8001cf80 <__func__.1+0x2d8>
    8000152e:	0001c517          	auipc	a0,0x1c
    80001532:	afa50513          	add	a0,a0,-1286 # 8001d028 <__func__.1+0x380>
    80001536:	6b1190ef          	jal	8001b3e6 <printf>
    8000153a:	4511                	li	a0,4
    8000153c:	da2ff0ef          	jal	80000ade <goto_priv>
    80001540:	de7ff0ef          	jal	80001326 <reset_state>
}
    80001544:	70a2                	ld	ra,40(sp)
    80001546:	8522                	mv	a0,s0
    80001548:	7402                	ld	s0,32(sp)
    8000154a:	64e2                	ld	s1,24(sp)
    8000154c:	6942                	ld	s2,16(sp)
    8000154e:	69a2                	ld	s3,8(sp)
    80001550:	6145                	add	sp,sp,48
    80001552:	8082                	ret
    check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x2222);        //开启Shlcofideleg 扩展则为2222，否则为222
    80001554:	0001c597          	auipc	a1,0x1c
    80001558:	a1c58593          	add	a1,a1,-1508 # 8001cf70 <__func__.1+0x2c8>
    8000155c:	0001c517          	auipc	a0,0x1c
    80001560:	a6450513          	add	a0,a0,-1436 # 8001cfc0 <__func__.1+0x318>
    80001564:	683190ef          	jal	8001b3e6 <printf>
    80001568:	4529                	li	a0,10
    8000156a:	54f180ef          	jal	8001a2b8 <putchar>
    8000156e:	fa0989e3          	beqz	s3,80001520 <check_xip_regs_1+0x114>
    80001572:	20491073          	csrw	vsie,s2
    80001576:	4405                	li	s0,1
    TEST_END();
    80001578:	0001c597          	auipc	a1,0x1c
    8000157c:	9f858593          	add	a1,a1,-1544 # 8001cf70 <__func__.1+0x2c8>
    80001580:	b77d                	j	8000152e <check_xip_regs_1+0x122>
    check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x2);
    80001582:	0001c597          	auipc	a1,0x1c
    80001586:	9ee58593          	add	a1,a1,-1554 # 8001cf70 <__func__.1+0x2c8>
    8000158a:	0001c517          	auipc	a0,0x1c
    8000158e:	a3650513          	add	a0,a0,-1482 # 8001cfc0 <__func__.1+0x318>
    80001592:	655190ef          	jal	8001b3e6 <printf>
    80001596:	4529                	li	a0,10
    80001598:	521180ef          	jal	8001a2b8 <putchar>
    8000159c:	4985                	li	s3,1
    8000159e:	b739                	j	800014ac <check_xip_regs_1+0xa0>

00000000800015a0 <check_xip_regs_2>:

bool check_xip_regs_2(){
    800015a0:	1101                	add	sp,sp,-32

    TEST_START();
    800015a2:	0001a597          	auipc	a1,0x1a
    800015a6:	36658593          	add	a1,a1,870 # 8001b908 <__func__.2>
    800015aa:	0001c517          	auipc	a0,0x1c
    800015ae:	9e650513          	add	a0,a0,-1562 # 8001cf90 <__func__.1+0x2e8>
bool check_xip_regs_2(){
    800015b2:	ec06                	sd	ra,24(sp)
    800015b4:	e822                	sd	s0,16(sp)
    800015b6:	e426                	sd	s1,8(sp)
    TEST_START();
    800015b8:	62f190ef          	jal	8001b3e6 <printf>
    800015bc:	4529                	li	a0,10
    800015be:	4fb180ef          	jal	8001a2b8 <putchar>

    CSRW(CSR_MENVCFG,0);                    //若menvcfg.mtce=0,则mip的stip可写，若为1则不可写
    800015c2:	30a05073          	csrw	0x30a,0


    CSRW(mideleg, (uint64_t)-1);
    800015c6:	57fd                	li	a5,-1
    800015c8:	30379073          	csrw	mideleg,a5
    VERBOSE("setting mideleg and hideleg\n");
    
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    800015cc:	60379073          	csrw	hideleg,a5

    VERBOSE("setting all in mip\n");
    CSRW(mip, (uint64_t)-1);
    800015d0:	34479073          	csrw	mip,a5
    check_csr_rd("hip", CSR_HIP, 0x4);
    800015d4:	64402473          	csrr	s0,hip
    800015d8:	0001c617          	auipc	a2,0x1c
    800015dc:	d7060613          	add	a2,a2,-656 # 8001d348 <__func__.1+0x6a0>
    800015e0:	08200593          	li	a1,130
    800015e4:	0001c517          	auipc	a0,0x1c
    800015e8:	9c450513          	add	a0,a0,-1596 # 8001cfa8 <__func__.1+0x300>
    800015ec:	5fb190ef          	jal	8001b3e6 <printf>
    800015f0:	4791                	li	a5,4
    800015f2:	46f40463          	beq	s0,a5,80001a5a <check_xip_regs_2+0x4ba>
    800015f6:	0001c597          	auipc	a1,0x1c
    800015fa:	98a58593          	add	a1,a1,-1654 # 8001cf80 <__func__.1+0x2d8>
    800015fe:	0001c517          	auipc	a0,0x1c
    80001602:	9c250513          	add	a0,a0,-1598 # 8001cfc0 <__func__.1+0x318>
    80001606:	5e1190ef          	jal	8001b3e6 <printf>
    8000160a:	0001c517          	auipc	a0,0x1c
    8000160e:	9be50513          	add	a0,a0,-1602 # 8001cfc8 <__func__.1+0x320>
    80001612:	5d5190ef          	jal	8001b3e6 <printf>
    80001616:	8622                	mv	a2,s0
    80001618:	4691                	li	a3,4
    8000161a:	02d00593          	li	a1,45
    8000161e:	0001c517          	auipc	a0,0x1c
    80001622:	d3250513          	add	a0,a0,-718 # 8001d350 <__func__.1+0x6a8>
    80001626:	5c1190ef          	jal	8001b3e6 <printf>
    8000162a:	02900513          	li	a0,41
    8000162e:	48b180ef          	jal	8001a2b8 <putchar>
    80001632:	4529                	li	a0,10
    80001634:	485180ef          	jal	8001a2b8 <putchar>
    80001638:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x222);    
    8000163a:	144024f3          	csrr	s1,sip
    8000163e:	0001c617          	auipc	a2,0x1c
    80001642:	d2a60613          	add	a2,a2,-726 # 8001d368 <__func__.1+0x6c0>
    80001646:	08200593          	li	a1,130
    8000164a:	0001c517          	auipc	a0,0x1c
    8000164e:	95e50513          	add	a0,a0,-1698 # 8001cfa8 <__func__.1+0x300>
    80001652:	595190ef          	jal	8001b3e6 <printf>
    80001656:	22200793          	li	a5,546
    8000165a:	3af48663          	beq	s1,a5,80001a06 <check_xip_regs_2+0x466>
    8000165e:	0001c597          	auipc	a1,0x1c
    80001662:	92258593          	add	a1,a1,-1758 # 8001cf80 <__func__.1+0x2d8>
    80001666:	0001c517          	auipc	a0,0x1c
    8000166a:	95a50513          	add	a0,a0,-1702 # 8001cfc0 <__func__.1+0x318>
    8000166e:	579190ef          	jal	8001b3e6 <printf>
    80001672:	0001c517          	auipc	a0,0x1c
    80001676:	95650513          	add	a0,a0,-1706 # 8001cfc8 <__func__.1+0x320>
    8000167a:	56d190ef          	jal	8001b3e6 <printf>
    8000167e:	22200693          	li	a3,546
    80001682:	8626                	mv	a2,s1
    80001684:	02d00593          	li	a1,45
    80001688:	0001c517          	auipc	a0,0x1c
    8000168c:	cc850513          	add	a0,a0,-824 # 8001d350 <__func__.1+0x6a8>
    80001690:	557190ef          	jal	8001b3e6 <printf>
    80001694:	02900513          	li	a0,41
    80001698:	421180ef          	jal	8001a2b8 <putchar>
    8000169c:	4529                	li	a0,10
    8000169e:	41b180ef          	jal	8001a2b8 <putchar>
    800016a2:	4401                	li	s0,0

    // check_csr_rd_mask("mip", mip, 0x226, mtime_mask); // only test when nemu don't use difftest because spike, as ref, shut up time interrupt
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    800016a4:	244024f3          	csrr	s1,vsip
    800016a8:	0001c617          	auipc	a2,0x1c
    800016ac:	c9060613          	add	a2,a2,-880 # 8001d338 <__func__.1+0x690>
    800016b0:	08200593          	li	a1,130
    800016b4:	0001c517          	auipc	a0,0x1c
    800016b8:	8f450513          	add	a0,a0,-1804 # 8001cfa8 <__func__.1+0x300>
    800016bc:	52b190ef          	jal	8001b3e6 <printf>
    800016c0:	4789                	li	a5,2
    800016c2:	36f48e63          	beq	s1,a5,80001a3e <check_xip_regs_2+0x49e>
    800016c6:	0001c597          	auipc	a1,0x1c
    800016ca:	8ba58593          	add	a1,a1,-1862 # 8001cf80 <__func__.1+0x2d8>
    800016ce:	0001c517          	auipc	a0,0x1c
    800016d2:	8f250513          	add	a0,a0,-1806 # 8001cfc0 <__func__.1+0x318>
    800016d6:	511190ef          	jal	8001b3e6 <printf>
    800016da:	0001c517          	auipc	a0,0x1c
    800016de:	8ee50513          	add	a0,a0,-1810 # 8001cfc8 <__func__.1+0x320>
    800016e2:	505190ef          	jal	8001b3e6 <printf>
    800016e6:	4689                	li	a3,2
    800016e8:	8626                	mv	a2,s1
    800016ea:	02d00593          	li	a1,45
    800016ee:	0001c517          	auipc	a0,0x1c
    800016f2:	c6250513          	add	a0,a0,-926 # 8001d350 <__func__.1+0x6a8>
    800016f6:	4f1190ef          	jal	8001b3e6 <printf>
    800016fa:	02900513          	li	a0,41
    800016fe:	3bb180ef          	jal	8001a2b8 <putchar>
    80001702:	4529                	li	a0,10
    80001704:	3b5180ef          	jal	8001a2b8 <putchar>
    80001708:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    8000170a:	4509                	li	a0,2
    8000170c:	bd2ff0ef          	jal	80000ade <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    80001710:	144024f3          	csrr	s1,sip
    80001714:	0001c617          	auipc	a2,0x1c
    80001718:	c5c60613          	add	a2,a2,-932 # 8001d370 <__func__.1+0x6c8>
    8000171c:	08200593          	li	a1,130
    80001720:	0001c517          	auipc	a0,0x1c
    80001724:	88850513          	add	a0,a0,-1912 # 8001cfa8 <__func__.1+0x300>
    80001728:	4bf190ef          	jal	8001b3e6 <printf>
    8000172c:	4789                	li	a5,2
    8000172e:	2ef48a63          	beq	s1,a5,80001a22 <check_xip_regs_2+0x482>
    80001732:	0001c597          	auipc	a1,0x1c
    80001736:	84e58593          	add	a1,a1,-1970 # 8001cf80 <__func__.1+0x2d8>
    8000173a:	0001c517          	auipc	a0,0x1c
    8000173e:	88650513          	add	a0,a0,-1914 # 8001cfc0 <__func__.1+0x318>
    80001742:	4a5190ef          	jal	8001b3e6 <printf>
    80001746:	0001c517          	auipc	a0,0x1c
    8000174a:	88250513          	add	a0,a0,-1918 # 8001cfc8 <__func__.1+0x320>
    8000174e:	499190ef          	jal	8001b3e6 <printf>
    80001752:	4689                	li	a3,2
    80001754:	8626                	mv	a2,s1
    80001756:	02d00593          	li	a1,45
    8000175a:	0001c517          	auipc	a0,0x1c
    8000175e:	bf650513          	add	a0,a0,-1034 # 8001d350 <__func__.1+0x6a8>
    80001762:	485190ef          	jal	8001b3e6 <printf>
    80001766:	02900513          	li	a0,41
    8000176a:	34f180ef          	jal	8001a2b8 <putchar>
    8000176e:	4529                	li	a0,10
    80001770:	349180ef          	jal	8001a2b8 <putchar>
    80001774:	4401                	li	s0,0
    goto_priv(PRIV_M);
    80001776:	4511                	li	a0,4
    80001778:	b66ff0ef          	jal	80000ade <goto_priv>

    VERBOSE("clearing all in mip\n");
    CSRW(mip, (uint64_t)0);
    8000177c:	34405073          	csrw	mip,0
    check_csr_rd("hip", CSR_HIP, 0x0);
    80001780:	644024f3          	csrr	s1,hip
    80001784:	0001c617          	auipc	a2,0x1c
    80001788:	bc460613          	add	a2,a2,-1084 # 8001d348 <__func__.1+0x6a0>
    8000178c:	08200593          	li	a1,130
    80001790:	0001c517          	auipc	a0,0x1c
    80001794:	81850513          	add	a0,a0,-2024 # 8001cfa8 <__func__.1+0x300>
    80001798:	44f190ef          	jal	8001b3e6 <printf>
    8000179c:	1a048563          	beqz	s1,80001946 <check_xip_regs_2+0x3a6>
    800017a0:	0001b597          	auipc	a1,0x1b
    800017a4:	7e058593          	add	a1,a1,2016 # 8001cf80 <__func__.1+0x2d8>
    800017a8:	0001c517          	auipc	a0,0x1c
    800017ac:	81850513          	add	a0,a0,-2024 # 8001cfc0 <__func__.1+0x318>
    800017b0:	437190ef          	jal	8001b3e6 <printf>
    800017b4:	0001c517          	auipc	a0,0x1c
    800017b8:	81450513          	add	a0,a0,-2028 # 8001cfc8 <__func__.1+0x320>
    800017bc:	42b190ef          	jal	8001b3e6 <printf>
    800017c0:	4681                	li	a3,0
    800017c2:	8626                	mv	a2,s1
    800017c4:	02d00593          	li	a1,45
    800017c8:	0001c517          	auipc	a0,0x1c
    800017cc:	b8850513          	add	a0,a0,-1144 # 8001d350 <__func__.1+0x6a8>
    800017d0:	417190ef          	jal	8001b3e6 <printf>
    800017d4:	02900513          	li	a0,41
    800017d8:	2e1180ef          	jal	8001a2b8 <putchar>
    800017dc:	4529                	li	a0,10
    800017de:	2db180ef          	jal	8001a2b8 <putchar>
    800017e2:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    800017e4:	144024f3          	csrr	s1,sip
    800017e8:	0001c617          	auipc	a2,0x1c
    800017ec:	b8060613          	add	a2,a2,-1152 # 8001d368 <__func__.1+0x6c0>
    800017f0:	08200593          	li	a1,130
    800017f4:	0001b517          	auipc	a0,0x1b
    800017f8:	7b450513          	add	a0,a0,1972 # 8001cfa8 <__func__.1+0x300>
    800017fc:	3eb190ef          	jal	8001b3e6 <printf>
    80001800:	18048063          	beqz	s1,80001980 <check_xip_regs_2+0x3e0>
    80001804:	0001b597          	auipc	a1,0x1b
    80001808:	77c58593          	add	a1,a1,1916 # 8001cf80 <__func__.1+0x2d8>
    8000180c:	0001b517          	auipc	a0,0x1b
    80001810:	7b450513          	add	a0,a0,1972 # 8001cfc0 <__func__.1+0x318>
    80001814:	3d3190ef          	jal	8001b3e6 <printf>
    80001818:	0001b517          	auipc	a0,0x1b
    8000181c:	7b050513          	add	a0,a0,1968 # 8001cfc8 <__func__.1+0x320>
    80001820:	3c7190ef          	jal	8001b3e6 <printf>
    80001824:	4681                	li	a3,0
    80001826:	8626                	mv	a2,s1
    80001828:	02d00593          	li	a1,45
    8000182c:	0001c517          	auipc	a0,0x1c
    80001830:	b2450513          	add	a0,a0,-1244 # 8001d350 <__func__.1+0x6a8>
    80001834:	3b3190ef          	jal	8001b3e6 <printf>
    80001838:	02900513          	li	a0,41
    8000183c:	27d180ef          	jal	8001a2b8 <putchar>
    80001840:	4529                	li	a0,10
    80001842:	277180ef          	jal	8001a2b8 <putchar>
    80001846:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x000, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80001848:	244024f3          	csrr	s1,vsip
    8000184c:	0001c617          	auipc	a2,0x1c
    80001850:	aec60613          	add	a2,a2,-1300 # 8001d338 <__func__.1+0x690>
    80001854:	08200593          	li	a1,130
    80001858:	0001b517          	auipc	a0,0x1b
    8000185c:	75050513          	add	a0,a0,1872 # 8001cfa8 <__func__.1+0x300>
    80001860:	387190ef          	jal	8001b3e6 <printf>
    80001864:	14048b63          	beqz	s1,800019ba <check_xip_regs_2+0x41a>
    80001868:	0001b597          	auipc	a1,0x1b
    8000186c:	71858593          	add	a1,a1,1816 # 8001cf80 <__func__.1+0x2d8>
    80001870:	0001b517          	auipc	a0,0x1b
    80001874:	75050513          	add	a0,a0,1872 # 8001cfc0 <__func__.1+0x318>
    80001878:	36f190ef          	jal	8001b3e6 <printf>
    8000187c:	0001b517          	auipc	a0,0x1b
    80001880:	74c50513          	add	a0,a0,1868 # 8001cfc8 <__func__.1+0x320>
    80001884:	363190ef          	jal	8001b3e6 <printf>
    80001888:	4681                	li	a3,0
    8000188a:	8626                	mv	a2,s1
    8000188c:	02d00593          	li	a1,45
    80001890:	0001c517          	auipc	a0,0x1c
    80001894:	ac050513          	add	a0,a0,-1344 # 8001d350 <__func__.1+0x6a8>
    80001898:	34f190ef          	jal	8001b3e6 <printf>
    8000189c:	02900513          	li	a0,41
    800018a0:	219180ef          	jal	8001a2b8 <putchar>
    800018a4:	4529                	li	a0,10
    800018a6:	213180ef          	jal	8001a2b8 <putchar>
    800018aa:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    800018ac:	4509                	li	a0,2
    800018ae:	a30ff0ef          	jal	80000ade <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    800018b2:	144024f3          	csrr	s1,sip
    800018b6:	0001c617          	auipc	a2,0x1c
    800018ba:	aba60613          	add	a2,a2,-1350 # 8001d370 <__func__.1+0x6c8>
    800018be:	08200593          	li	a1,130
    800018c2:	0001b517          	auipc	a0,0x1b
    800018c6:	6e650513          	add	a0,a0,1766 # 8001cfa8 <__func__.1+0x300>
    800018ca:	31d190ef          	jal	8001b3e6 <printf>
    800018ce:	10048463          	beqz	s1,800019d6 <check_xip_regs_2+0x436>
    800018d2:	0001b597          	auipc	a1,0x1b
    800018d6:	6ae58593          	add	a1,a1,1710 # 8001cf80 <__func__.1+0x2d8>
    800018da:	0001b517          	auipc	a0,0x1b
    800018de:	6e650513          	add	a0,a0,1766 # 8001cfc0 <__func__.1+0x318>
    800018e2:	305190ef          	jal	8001b3e6 <printf>
    800018e6:	0001b517          	auipc	a0,0x1b
    800018ea:	6e250513          	add	a0,a0,1762 # 8001cfc8 <__func__.1+0x320>
    800018ee:	2f9190ef          	jal	8001b3e6 <printf>
    800018f2:	4681                	li	a3,0
    800018f4:	8626                	mv	a2,s1
    800018f6:	02d00593          	li	a1,45
    800018fa:	0001c517          	auipc	a0,0x1c
    800018fe:	a5650513          	add	a0,a0,-1450 # 8001d350 <__func__.1+0x6a8>
    80001902:	2e5190ef          	jal	8001b3e6 <printf>
    80001906:	02900513          	li	a0,41
    8000190a:	1af180ef          	jal	8001a2b8 <putchar>
    8000190e:	4529                	li	a0,10
    80001910:	1a9180ef          	jal	8001a2b8 <putchar>
    goto_priv(PRIV_M);   
    80001914:	4511                	li	a0,4
    80001916:	9c8ff0ef          	jal	80000ade <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    8000191a:	4401                	li	s0,0

    TEST_END();
    8000191c:	0001b597          	auipc	a1,0x1b
    80001920:	66458593          	add	a1,a1,1636 # 8001cf80 <__func__.1+0x2d8>
    80001924:	0001b517          	auipc	a0,0x1b
    80001928:	70450513          	add	a0,a0,1796 # 8001d028 <__func__.1+0x380>
    8000192c:	2bb190ef          	jal	8001b3e6 <printf>
    80001930:	4511                	li	a0,4
    80001932:	9acff0ef          	jal	80000ade <goto_priv>
    80001936:	9f1ff0ef          	jal	80001326 <reset_state>
}
    8000193a:	60e2                	ld	ra,24(sp)
    8000193c:	8522                	mv	a0,s0
    8000193e:	6442                	ld	s0,16(sp)
    80001940:	64a2                	ld	s1,8(sp)
    80001942:	6105                	add	sp,sp,32
    80001944:	8082                	ret
    check_csr_rd("hip", CSR_HIP, 0x0);
    80001946:	0001b597          	auipc	a1,0x1b
    8000194a:	62a58593          	add	a1,a1,1578 # 8001cf70 <__func__.1+0x2c8>
    8000194e:	0001b517          	auipc	a0,0x1b
    80001952:	67250513          	add	a0,a0,1650 # 8001cfc0 <__func__.1+0x318>
    80001956:	291190ef          	jal	8001b3e6 <printf>
    8000195a:	4529                	li	a0,10
    8000195c:	15d180ef          	jal	8001a2b8 <putchar>
    check_csr_rd("sip", sip, 0x0);
    80001960:	144024f3          	csrr	s1,sip
    80001964:	0001c617          	auipc	a2,0x1c
    80001968:	a0460613          	add	a2,a2,-1532 # 8001d368 <__func__.1+0x6c0>
    8000196c:	08200593          	li	a1,130
    80001970:	0001b517          	auipc	a0,0x1b
    80001974:	63850513          	add	a0,a0,1592 # 8001cfa8 <__func__.1+0x300>
    80001978:	26f190ef          	jal	8001b3e6 <printf>
    8000197c:	e80494e3          	bnez	s1,80001804 <check_xip_regs_2+0x264>
    80001980:	0001b597          	auipc	a1,0x1b
    80001984:	5f058593          	add	a1,a1,1520 # 8001cf70 <__func__.1+0x2c8>
    80001988:	0001b517          	auipc	a0,0x1b
    8000198c:	63850513          	add	a0,a0,1592 # 8001cfc0 <__func__.1+0x318>
    80001990:	257190ef          	jal	8001b3e6 <printf>
    80001994:	4529                	li	a0,10
    80001996:	123180ef          	jal	8001a2b8 <putchar>
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    8000199a:	244024f3          	csrr	s1,vsip
    8000199e:	0001c617          	auipc	a2,0x1c
    800019a2:	99a60613          	add	a2,a2,-1638 # 8001d338 <__func__.1+0x690>
    800019a6:	08200593          	li	a1,130
    800019aa:	0001b517          	auipc	a0,0x1b
    800019ae:	5fe50513          	add	a0,a0,1534 # 8001cfa8 <__func__.1+0x300>
    800019b2:	235190ef          	jal	8001b3e6 <printf>
    800019b6:	ea0499e3          	bnez	s1,80001868 <check_xip_regs_2+0x2c8>
    800019ba:	0001b597          	auipc	a1,0x1b
    800019be:	5b658593          	add	a1,a1,1462 # 8001cf70 <__func__.1+0x2c8>
    800019c2:	0001b517          	auipc	a0,0x1b
    800019c6:	5fe50513          	add	a0,a0,1534 # 8001cfc0 <__func__.1+0x318>
    800019ca:	21d190ef          	jal	8001b3e6 <printf>
    800019ce:	4529                	li	a0,10
    800019d0:	0e9180ef          	jal	8001a2b8 <putchar>
    800019d4:	bde1                	j	800018ac <check_xip_regs_2+0x30c>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    800019d6:	0001b597          	auipc	a1,0x1b
    800019da:	59a58593          	add	a1,a1,1434 # 8001cf70 <__func__.1+0x2c8>
    800019de:	0001b517          	auipc	a0,0x1b
    800019e2:	5e250513          	add	a0,a0,1506 # 8001cfc0 <__func__.1+0x318>
    800019e6:	201190ef          	jal	8001b3e6 <printf>
    800019ea:	4529                	li	a0,10
    800019ec:	0cd180ef          	jal	8001a2b8 <putchar>
    800019f0:	f20402e3          	beqz	s0,80001914 <check_xip_regs_2+0x374>
    goto_priv(PRIV_M);   
    800019f4:	4511                	li	a0,4
    800019f6:	8e8ff0ef          	jal	80000ade <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    800019fa:	4405                	li	s0,1
    TEST_END();
    800019fc:	0001b597          	auipc	a1,0x1b
    80001a00:	57458593          	add	a1,a1,1396 # 8001cf70 <__func__.1+0x2c8>
    80001a04:	b705                	j	80001924 <check_xip_regs_2+0x384>
    check_csr_rd("sip", sip, 0x222);    
    80001a06:	0001b597          	auipc	a1,0x1b
    80001a0a:	56a58593          	add	a1,a1,1386 # 8001cf70 <__func__.1+0x2c8>
    80001a0e:	0001b517          	auipc	a0,0x1b
    80001a12:	5b250513          	add	a0,a0,1458 # 8001cfc0 <__func__.1+0x318>
    80001a16:	1d1190ef          	jal	8001b3e6 <printf>
    80001a1a:	4529                	li	a0,10
    80001a1c:	09d180ef          	jal	8001a2b8 <putchar>
    80001a20:	b151                	j	800016a4 <check_xip_regs_2+0x104>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    80001a22:	0001b597          	auipc	a1,0x1b
    80001a26:	54e58593          	add	a1,a1,1358 # 8001cf70 <__func__.1+0x2c8>
    80001a2a:	0001b517          	auipc	a0,0x1b
    80001a2e:	59650513          	add	a0,a0,1430 # 8001cfc0 <__func__.1+0x318>
    80001a32:	1b5190ef          	jal	8001b3e6 <printf>
    80001a36:	4529                	li	a0,10
    80001a38:	081180ef          	jal	8001a2b8 <putchar>
    80001a3c:	bb2d                	j	80001776 <check_xip_regs_2+0x1d6>
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    80001a3e:	0001b597          	auipc	a1,0x1b
    80001a42:	53258593          	add	a1,a1,1330 # 8001cf70 <__func__.1+0x2c8>
    80001a46:	0001b517          	auipc	a0,0x1b
    80001a4a:	57a50513          	add	a0,a0,1402 # 8001cfc0 <__func__.1+0x318>
    80001a4e:	199190ef          	jal	8001b3e6 <printf>
    80001a52:	4529                	li	a0,10
    80001a54:	065180ef          	jal	8001a2b8 <putchar>
    80001a58:	b94d                	j	8000170a <check_xip_regs_2+0x16a>
    check_csr_rd("hip", CSR_HIP, 0x4);
    80001a5a:	0001b597          	auipc	a1,0x1b
    80001a5e:	51658593          	add	a1,a1,1302 # 8001cf70 <__func__.1+0x2c8>
    80001a62:	0001b517          	auipc	a0,0x1b
    80001a66:	55e50513          	add	a0,a0,1374 # 8001cfc0 <__func__.1+0x318>
    80001a6a:	17d190ef          	jal	8001b3e6 <printf>
    80001a6e:	4529                	li	a0,10
    80001a70:	049180ef          	jal	8001a2b8 <putchar>
    80001a74:	4405                	li	s0,1
    80001a76:	b6d1                	j	8000163a <check_xip_regs_2+0x9a>

0000000080001a78 <check_xip_regs_3>:

bool check_xip_regs_3(){
    80001a78:	1101                	add	sp,sp,-32

    TEST_START();
    80001a7a:	0001a597          	auipc	a1,0x1a
    80001a7e:	ea658593          	add	a1,a1,-346 # 8001b920 <__func__.1>
    80001a82:	0001b517          	auipc	a0,0x1b
    80001a86:	50e50513          	add	a0,a0,1294 # 8001cf90 <__func__.1+0x2e8>
bool check_xip_regs_3(){
    80001a8a:	ec06                	sd	ra,24(sp)
    80001a8c:	e822                	sd	s0,16(sp)
    80001a8e:	e426                	sd	s1,8(sp)
    TEST_START();
    80001a90:	157190ef          	jal	8001b3e6 <printf>
    80001a94:	4529                	li	a0,10
    80001a96:	023180ef          	jal	8001a2b8 <putchar>

    CSRW(mideleg, (uint64_t)-1);
    80001a9a:	57fd                	li	a5,-1
    80001a9c:	30379073          	csrw	mideleg,a5
    VERBOSE("setting mideleg and hideleg\n");
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    80001aa0:	60379073          	csrw	hideleg,a5

    VERBOSE("setting all in hvip\n");
    CSRW(CSR_HVIP, (uint64_t)-1);
    80001aa4:	64579073          	csrw	hvip,a5
    printf("hvip=%llx\n",CSRR(CSR_HVIP));
    80001aa8:	645025f3          	csrr	a1,hvip
    80001aac:	0001c517          	auipc	a0,0x1c
    80001ab0:	8dc50513          	add	a0,a0,-1828 # 8001d388 <__func__.1+0x6e0>
    80001ab4:	133190ef          	jal	8001b3e6 <printf>
    check_csr_rd("hvip", CSR_HVIP, 0xffffffffffffe444);
    80001ab8:	645024f3          	csrr	s1,hvip
    80001abc:	7479                	lui	s0,0xffffe
    80001abe:	0001c617          	auipc	a2,0x1c
    80001ac2:	8da60613          	add	a2,a2,-1830 # 8001d398 <__func__.1+0x6f0>
    80001ac6:	08200593          	li	a1,130
    80001aca:	0001b517          	auipc	a0,0x1b
    80001ace:	4de50513          	add	a0,a0,1246 # 8001cfa8 <__func__.1+0x300>
    80001ad2:	44440413          	add	s0,s0,1092 # ffffffffffffe444 <__stack_top+0xffffffff7fcff444>
    80001ad6:	111190ef          	jal	8001b3e6 <printf>
    80001ada:	4a848863          	beq	s1,s0,80001f8a <check_xip_regs_3+0x512>
    80001ade:	0001b597          	auipc	a1,0x1b
    80001ae2:	4a258593          	add	a1,a1,1186 # 8001cf80 <__func__.1+0x2d8>
    80001ae6:	0001b517          	auipc	a0,0x1b
    80001aea:	4da50513          	add	a0,a0,1242 # 8001cfc0 <__func__.1+0x318>
    80001aee:	0f9190ef          	jal	8001b3e6 <printf>
    80001af2:	0001b517          	auipc	a0,0x1b
    80001af6:	4d650513          	add	a0,a0,1238 # 8001cfc8 <__func__.1+0x320>
    80001afa:	0ed190ef          	jal	8001b3e6 <printf>
    80001afe:	86a2                	mv	a3,s0
    80001b00:	8626                	mv	a2,s1
    80001b02:	02d00593          	li	a1,45
    80001b06:	0001c517          	auipc	a0,0x1c
    80001b0a:	84a50513          	add	a0,a0,-1974 # 8001d350 <__func__.1+0x6a8>
    80001b0e:	0d9190ef          	jal	8001b3e6 <printf>
    80001b12:	02900513          	li	a0,41
    80001b16:	7a2180ef          	jal	8001a2b8 <putchar>
    80001b1a:	4529                	li	a0,10
    80001b1c:	79c180ef          	jal	8001a2b8 <putchar>
    80001b20:	4401                	li	s0,0
    check_csr_rd("hip", CSR_HIP, 0x444);
    80001b22:	644024f3          	csrr	s1,hip
    80001b26:	0001c617          	auipc	a2,0x1c
    80001b2a:	82260613          	add	a2,a2,-2014 # 8001d348 <__func__.1+0x6a0>
    80001b2e:	08200593          	li	a1,130
    80001b32:	0001b517          	auipc	a0,0x1b
    80001b36:	47650513          	add	a0,a0,1142 # 8001cfa8 <__func__.1+0x300>
    80001b3a:	0ad190ef          	jal	8001b3e6 <printf>
    80001b3e:	44400793          	li	a5,1092
    80001b42:	3ef48a63          	beq	s1,a5,80001f36 <check_xip_regs_3+0x4be>
    80001b46:	0001b597          	auipc	a1,0x1b
    80001b4a:	43a58593          	add	a1,a1,1082 # 8001cf80 <__func__.1+0x2d8>
    80001b4e:	0001b517          	auipc	a0,0x1b
    80001b52:	47250513          	add	a0,a0,1138 # 8001cfc0 <__func__.1+0x318>
    80001b56:	091190ef          	jal	8001b3e6 <printf>
    80001b5a:	0001b517          	auipc	a0,0x1b
    80001b5e:	46e50513          	add	a0,a0,1134 # 8001cfc8 <__func__.1+0x320>
    80001b62:	085190ef          	jal	8001b3e6 <printf>
    80001b66:	44400693          	li	a3,1092
    80001b6a:	8626                	mv	a2,s1
    80001b6c:	02d00593          	li	a1,45
    80001b70:	0001b517          	auipc	a0,0x1b
    80001b74:	7e050513          	add	a0,a0,2016 # 8001d350 <__func__.1+0x6a8>
    80001b78:	06f190ef          	jal	8001b3e6 <printf>
    80001b7c:	02900513          	li	a0,41
    80001b80:	738180ef          	jal	8001a2b8 <putchar>
    80001b84:	4529                	li	a0,10
    80001b86:	732180ef          	jal	8001a2b8 <putchar>
    80001b8a:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    80001b8c:	144024f3          	csrr	s1,sip
    80001b90:	0001b617          	auipc	a2,0x1b
    80001b94:	7d860613          	add	a2,a2,2008 # 8001d368 <__func__.1+0x6c0>
    80001b98:	08200593          	li	a1,130
    80001b9c:	0001b517          	auipc	a0,0x1b
    80001ba0:	40c50513          	add	a0,a0,1036 # 8001cfa8 <__func__.1+0x300>
    80001ba4:	043190ef          	jal	8001b3e6 <printf>
    80001ba8:	2e048863          	beqz	s1,80001e98 <check_xip_regs_3+0x420>
    80001bac:	0001b597          	auipc	a1,0x1b
    80001bb0:	3d458593          	add	a1,a1,980 # 8001cf80 <__func__.1+0x2d8>
    80001bb4:	0001b517          	auipc	a0,0x1b
    80001bb8:	40c50513          	add	a0,a0,1036 # 8001cfc0 <__func__.1+0x318>
    80001bbc:	02b190ef          	jal	8001b3e6 <printf>
    80001bc0:	0001b517          	auipc	a0,0x1b
    80001bc4:	40850513          	add	a0,a0,1032 # 8001cfc8 <__func__.1+0x320>
    80001bc8:	01f190ef          	jal	8001b3e6 <printf>
    80001bcc:	4681                	li	a3,0
    80001bce:	8626                	mv	a2,s1
    80001bd0:	02d00593          	li	a1,45
    80001bd4:	0001b517          	auipc	a0,0x1b
    80001bd8:	77c50513          	add	a0,a0,1916 # 8001d350 <__func__.1+0x6a8>
    80001bdc:	00b190ef          	jal	8001b3e6 <printf>
    80001be0:	02900513          	li	a0,41
    80001be4:	6d4180ef          	jal	8001a2b8 <putchar>
    80001be8:	4529                	li	a0,10
    80001bea:	6ce180ef          	jal	8001a2b8 <putchar>
    80001bee:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x444, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x222);
    80001bf0:	244024f3          	csrr	s1,vsip
    80001bf4:	0001b617          	auipc	a2,0x1b
    80001bf8:	74460613          	add	a2,a2,1860 # 8001d338 <__func__.1+0x690>
    80001bfc:	08200593          	li	a1,130
    80001c00:	0001b517          	auipc	a0,0x1b
    80001c04:	3a850513          	add	a0,a0,936 # 8001cfa8 <__func__.1+0x300>
    80001c08:	7de190ef          	jal	8001b3e6 <printf>
    80001c0c:	22200793          	li	a5,546
    80001c10:	34f48f63          	beq	s1,a5,80001f6e <check_xip_regs_3+0x4f6>
    80001c14:	0001b597          	auipc	a1,0x1b
    80001c18:	36c58593          	add	a1,a1,876 # 8001cf80 <__func__.1+0x2d8>
    80001c1c:	0001b517          	auipc	a0,0x1b
    80001c20:	3a450513          	add	a0,a0,932 # 8001cfc0 <__func__.1+0x318>
    80001c24:	7c2190ef          	jal	8001b3e6 <printf>
    80001c28:	0001b517          	auipc	a0,0x1b
    80001c2c:	3a050513          	add	a0,a0,928 # 8001cfc8 <__func__.1+0x320>
    80001c30:	7b6190ef          	jal	8001b3e6 <printf>
    80001c34:	22200693          	li	a3,546
    80001c38:	8626                	mv	a2,s1
    80001c3a:	02d00593          	li	a1,45
    80001c3e:	0001b517          	auipc	a0,0x1b
    80001c42:	71250513          	add	a0,a0,1810 # 8001d350 <__func__.1+0x6a8>
    80001c46:	7a0190ef          	jal	8001b3e6 <printf>
    80001c4a:	02900513          	li	a0,41
    80001c4e:	66a180ef          	jal	8001a2b8 <putchar>
    80001c52:	4529                	li	a0,10
    80001c54:	664180ef          	jal	8001a2b8 <putchar>
    80001c58:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80001c5a:	4509                	li	a0,2
    80001c5c:	e83fe0ef          	jal	80000ade <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x222);
    80001c60:	144024f3          	csrr	s1,sip
    80001c64:	0001b617          	auipc	a2,0x1b
    80001c68:	70c60613          	add	a2,a2,1804 # 8001d370 <__func__.1+0x6c8>
    80001c6c:	08200593          	li	a1,130
    80001c70:	0001b517          	auipc	a0,0x1b
    80001c74:	33850513          	add	a0,a0,824 # 8001cfa8 <__func__.1+0x300>
    80001c78:	76e190ef          	jal	8001b3e6 <printf>
    80001c7c:	22200793          	li	a5,546
    80001c80:	2cf48963          	beq	s1,a5,80001f52 <check_xip_regs_3+0x4da>
    80001c84:	0001b597          	auipc	a1,0x1b
    80001c88:	2fc58593          	add	a1,a1,764 # 8001cf80 <__func__.1+0x2d8>
    80001c8c:	0001b517          	auipc	a0,0x1b
    80001c90:	33450513          	add	a0,a0,820 # 8001cfc0 <__func__.1+0x318>
    80001c94:	752190ef          	jal	8001b3e6 <printf>
    80001c98:	0001b517          	auipc	a0,0x1b
    80001c9c:	33050513          	add	a0,a0,816 # 8001cfc8 <__func__.1+0x320>
    80001ca0:	746190ef          	jal	8001b3e6 <printf>
    80001ca4:	22200693          	li	a3,546
    80001ca8:	8626                	mv	a2,s1
    80001caa:	02d00593          	li	a1,45
    80001cae:	0001b517          	auipc	a0,0x1b
    80001cb2:	6a250513          	add	a0,a0,1698 # 8001d350 <__func__.1+0x6a8>
    80001cb6:	730190ef          	jal	8001b3e6 <printf>
    80001cba:	02900513          	li	a0,41
    80001cbe:	5fa180ef          	jal	8001a2b8 <putchar>
    80001cc2:	4529                	li	a0,10
    80001cc4:	5f4180ef          	jal	8001a2b8 <putchar>
    80001cc8:	4401                	li	s0,0
    goto_priv(PRIV_M);
    80001cca:	4511                	li	a0,4
    80001ccc:	e13fe0ef          	jal	80000ade <goto_priv>

    VERBOSE("clearing all in hvip\n");
    CSRW(CSR_HVIP, (uint64_t)0);
    80001cd0:	64505073          	csrw	hvip,0
    check_csr_rd("hip", CSR_HIP, 0x0);
    80001cd4:	644024f3          	csrr	s1,hip
    80001cd8:	0001b617          	auipc	a2,0x1b
    80001cdc:	67060613          	add	a2,a2,1648 # 8001d348 <__func__.1+0x6a0>
    80001ce0:	08200593          	li	a1,130
    80001ce4:	0001b517          	auipc	a0,0x1b
    80001ce8:	2c450513          	add	a0,a0,708 # 8001cfa8 <__func__.1+0x300>
    80001cec:	6fa190ef          	jal	8001b3e6 <printf>
    80001cf0:	22048563          	beqz	s1,80001f1a <check_xip_regs_3+0x4a2>
    80001cf4:	0001b597          	auipc	a1,0x1b
    80001cf8:	28c58593          	add	a1,a1,652 # 8001cf80 <__func__.1+0x2d8>
    80001cfc:	0001b517          	auipc	a0,0x1b
    80001d00:	2c450513          	add	a0,a0,708 # 8001cfc0 <__func__.1+0x318>
    80001d04:	6e2190ef          	jal	8001b3e6 <printf>
    80001d08:	0001b517          	auipc	a0,0x1b
    80001d0c:	2c050513          	add	a0,a0,704 # 8001cfc8 <__func__.1+0x320>
    80001d10:	6d6190ef          	jal	8001b3e6 <printf>
    80001d14:	4681                	li	a3,0
    80001d16:	8626                	mv	a2,s1
    80001d18:	02d00593          	li	a1,45
    80001d1c:	0001b517          	auipc	a0,0x1b
    80001d20:	63450513          	add	a0,a0,1588 # 8001d350 <__func__.1+0x6a8>
    80001d24:	6c2190ef          	jal	8001b3e6 <printf>
    80001d28:	02900513          	li	a0,41
    80001d2c:	58c180ef          	jal	8001a2b8 <putchar>
    80001d30:	4529                	li	a0,10
    80001d32:	586180ef          	jal	8001a2b8 <putchar>
    80001d36:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    80001d38:	144024f3          	csrr	s1,sip
    80001d3c:	0001b617          	auipc	a2,0x1b
    80001d40:	62c60613          	add	a2,a2,1580 # 8001d368 <__func__.1+0x6c0>
    80001d44:	08200593          	li	a1,130
    80001d48:	0001b517          	auipc	a0,0x1b
    80001d4c:	26050513          	add	a0,a0,608 # 8001cfa8 <__func__.1+0x300>
    80001d50:	696190ef          	jal	8001b3e6 <printf>
    80001d54:	1a048563          	beqz	s1,80001efe <check_xip_regs_3+0x486>
    80001d58:	0001b597          	auipc	a1,0x1b
    80001d5c:	22858593          	add	a1,a1,552 # 8001cf80 <__func__.1+0x2d8>
    80001d60:	0001b517          	auipc	a0,0x1b
    80001d64:	26050513          	add	a0,a0,608 # 8001cfc0 <__func__.1+0x318>
    80001d68:	67e190ef          	jal	8001b3e6 <printf>
    80001d6c:	0001b517          	auipc	a0,0x1b
    80001d70:	25c50513          	add	a0,a0,604 # 8001cfc8 <__func__.1+0x320>
    80001d74:	672190ef          	jal	8001b3e6 <printf>
    80001d78:	4681                	li	a3,0
    80001d7a:	8626                	mv	a2,s1
    80001d7c:	02d00593          	li	a1,45
    80001d80:	0001b517          	auipc	a0,0x1b
    80001d84:	5d050513          	add	a0,a0,1488 # 8001d350 <__func__.1+0x6a8>
    80001d88:	65e190ef          	jal	8001b3e6 <printf>
    80001d8c:	02900513          	li	a0,41
    80001d90:	528180ef          	jal	8001a2b8 <putchar>
    80001d94:	4529                	li	a0,10
    80001d96:	522180ef          	jal	8001a2b8 <putchar>
    80001d9a:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x000, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80001d9c:	244024f3          	csrr	s1,vsip
    80001da0:	0001b617          	auipc	a2,0x1b
    80001da4:	59860613          	add	a2,a2,1432 # 8001d338 <__func__.1+0x690>
    80001da8:	08200593          	li	a1,130
    80001dac:	0001b517          	auipc	a0,0x1b
    80001db0:	1fc50513          	add	a0,a0,508 # 8001cfa8 <__func__.1+0x300>
    80001db4:	632190ef          	jal	8001b3e6 <printf>
    80001db8:	12048563          	beqz	s1,80001ee2 <check_xip_regs_3+0x46a>
    80001dbc:	0001b597          	auipc	a1,0x1b
    80001dc0:	1c458593          	add	a1,a1,452 # 8001cf80 <__func__.1+0x2d8>
    80001dc4:	0001b517          	auipc	a0,0x1b
    80001dc8:	1fc50513          	add	a0,a0,508 # 8001cfc0 <__func__.1+0x318>
    80001dcc:	61a190ef          	jal	8001b3e6 <printf>
    80001dd0:	0001b517          	auipc	a0,0x1b
    80001dd4:	1f850513          	add	a0,a0,504 # 8001cfc8 <__func__.1+0x320>
    80001dd8:	60e190ef          	jal	8001b3e6 <printf>
    80001ddc:	4681                	li	a3,0
    80001dde:	8626                	mv	a2,s1
    80001de0:	02d00593          	li	a1,45
    80001de4:	0001b517          	auipc	a0,0x1b
    80001de8:	56c50513          	add	a0,a0,1388 # 8001d350 <__func__.1+0x6a8>
    80001dec:	5fa190ef          	jal	8001b3e6 <printf>
    80001df0:	02900513          	li	a0,41
    80001df4:	4c4180ef          	jal	8001a2b8 <putchar>
    80001df8:	4529                	li	a0,10
    80001dfa:	4be180ef          	jal	8001a2b8 <putchar>
    80001dfe:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80001e00:	4509                	li	a0,2
    80001e02:	cddfe0ef          	jal	80000ade <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001e06:	144024f3          	csrr	s1,sip
    80001e0a:	0001b617          	auipc	a2,0x1b
    80001e0e:	56660613          	add	a2,a2,1382 # 8001d370 <__func__.1+0x6c8>
    80001e12:	08200593          	li	a1,130
    80001e16:	0001b517          	auipc	a0,0x1b
    80001e1a:	19250513          	add	a0,a0,402 # 8001cfa8 <__func__.1+0x300>
    80001e1e:	5c8190ef          	jal	8001b3e6 <printf>
    80001e22:	c8c9                	beqz	s1,80001eb4 <check_xip_regs_3+0x43c>
    80001e24:	0001b597          	auipc	a1,0x1b
    80001e28:	15c58593          	add	a1,a1,348 # 8001cf80 <__func__.1+0x2d8>
    80001e2c:	0001b517          	auipc	a0,0x1b
    80001e30:	19450513          	add	a0,a0,404 # 8001cfc0 <__func__.1+0x318>
    80001e34:	5b2190ef          	jal	8001b3e6 <printf>
    80001e38:	0001b517          	auipc	a0,0x1b
    80001e3c:	19050513          	add	a0,a0,400 # 8001cfc8 <__func__.1+0x320>
    80001e40:	5a6190ef          	jal	8001b3e6 <printf>
    80001e44:	4681                	li	a3,0
    80001e46:	8626                	mv	a2,s1
    80001e48:	02d00593          	li	a1,45
    80001e4c:	0001b517          	auipc	a0,0x1b
    80001e50:	50450513          	add	a0,a0,1284 # 8001d350 <__func__.1+0x6a8>
    80001e54:	592190ef          	jal	8001b3e6 <printf>
    80001e58:	02900513          	li	a0,41
    80001e5c:	45c180ef          	jal	8001a2b8 <putchar>
    80001e60:	4529                	li	a0,10
    80001e62:	456180ef          	jal	8001a2b8 <putchar>
    goto_priv(PRIV_M);
    80001e66:	4511                	li	a0,4
    80001e68:	c77fe0ef          	jal	80000ade <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001e6c:	4401                	li	s0,0

    TEST_END();
    80001e6e:	0001b597          	auipc	a1,0x1b
    80001e72:	11258593          	add	a1,a1,274 # 8001cf80 <__func__.1+0x2d8>
    80001e76:	0001b517          	auipc	a0,0x1b
    80001e7a:	1b250513          	add	a0,a0,434 # 8001d028 <__func__.1+0x380>
    80001e7e:	568190ef          	jal	8001b3e6 <printf>
    80001e82:	4511                	li	a0,4
    80001e84:	c5bfe0ef          	jal	80000ade <goto_priv>
    80001e88:	c9eff0ef          	jal	80001326 <reset_state>
}
    80001e8c:	60e2                	ld	ra,24(sp)
    80001e8e:	8522                	mv	a0,s0
    80001e90:	6442                	ld	s0,16(sp)
    80001e92:	64a2                	ld	s1,8(sp)
    80001e94:	6105                	add	sp,sp,32
    80001e96:	8082                	ret
    check_csr_rd("sip", sip, 0x0);
    80001e98:	0001b597          	auipc	a1,0x1b
    80001e9c:	0d858593          	add	a1,a1,216 # 8001cf70 <__func__.1+0x2c8>
    80001ea0:	0001b517          	auipc	a0,0x1b
    80001ea4:	12050513          	add	a0,a0,288 # 8001cfc0 <__func__.1+0x318>
    80001ea8:	53e190ef          	jal	8001b3e6 <printf>
    80001eac:	4529                	li	a0,10
    80001eae:	40a180ef          	jal	8001a2b8 <putchar>
    80001eb2:	bb3d                	j	80001bf0 <check_xip_regs_3+0x178>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001eb4:	0001b597          	auipc	a1,0x1b
    80001eb8:	0bc58593          	add	a1,a1,188 # 8001cf70 <__func__.1+0x2c8>
    80001ebc:	0001b517          	auipc	a0,0x1b
    80001ec0:	10450513          	add	a0,a0,260 # 8001cfc0 <__func__.1+0x318>
    80001ec4:	522190ef          	jal	8001b3e6 <printf>
    80001ec8:	4529                	li	a0,10
    80001eca:	3ee180ef          	jal	8001a2b8 <putchar>
    80001ece:	dc41                	beqz	s0,80001e66 <check_xip_regs_3+0x3ee>
    goto_priv(PRIV_M);
    80001ed0:	4511                	li	a0,4
    80001ed2:	c0dfe0ef          	jal	80000ade <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001ed6:	4405                	li	s0,1
    TEST_END();
    80001ed8:	0001b597          	auipc	a1,0x1b
    80001edc:	09858593          	add	a1,a1,152 # 8001cf70 <__func__.1+0x2c8>
    80001ee0:	bf59                	j	80001e76 <check_xip_regs_3+0x3fe>
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80001ee2:	0001b597          	auipc	a1,0x1b
    80001ee6:	08e58593          	add	a1,a1,142 # 8001cf70 <__func__.1+0x2c8>
    80001eea:	0001b517          	auipc	a0,0x1b
    80001eee:	0d650513          	add	a0,a0,214 # 8001cfc0 <__func__.1+0x318>
    80001ef2:	4f4190ef          	jal	8001b3e6 <printf>
    80001ef6:	4529                	li	a0,10
    80001ef8:	3c0180ef          	jal	8001a2b8 <putchar>
    80001efc:	b711                	j	80001e00 <check_xip_regs_3+0x388>
    check_csr_rd("sip", sip, 0x0);
    80001efe:	0001b597          	auipc	a1,0x1b
    80001f02:	07258593          	add	a1,a1,114 # 8001cf70 <__func__.1+0x2c8>
    80001f06:	0001b517          	auipc	a0,0x1b
    80001f0a:	0ba50513          	add	a0,a0,186 # 8001cfc0 <__func__.1+0x318>
    80001f0e:	4d8190ef          	jal	8001b3e6 <printf>
    80001f12:	4529                	li	a0,10
    80001f14:	3a4180ef          	jal	8001a2b8 <putchar>
    80001f18:	b551                	j	80001d9c <check_xip_regs_3+0x324>
    check_csr_rd("hip", CSR_HIP, 0x0);
    80001f1a:	0001b597          	auipc	a1,0x1b
    80001f1e:	05658593          	add	a1,a1,86 # 8001cf70 <__func__.1+0x2c8>
    80001f22:	0001b517          	auipc	a0,0x1b
    80001f26:	09e50513          	add	a0,a0,158 # 8001cfc0 <__func__.1+0x318>
    80001f2a:	4bc190ef          	jal	8001b3e6 <printf>
    80001f2e:	4529                	li	a0,10
    80001f30:	388180ef          	jal	8001a2b8 <putchar>
    80001f34:	b511                	j	80001d38 <check_xip_regs_3+0x2c0>
    check_csr_rd("hip", CSR_HIP, 0x444);
    80001f36:	0001b597          	auipc	a1,0x1b
    80001f3a:	03a58593          	add	a1,a1,58 # 8001cf70 <__func__.1+0x2c8>
    80001f3e:	0001b517          	auipc	a0,0x1b
    80001f42:	08250513          	add	a0,a0,130 # 8001cfc0 <__func__.1+0x318>
    80001f46:	4a0190ef          	jal	8001b3e6 <printf>
    80001f4a:	4529                	li	a0,10
    80001f4c:	36c180ef          	jal	8001a2b8 <putchar>
    80001f50:	b935                	j	80001b8c <check_xip_regs_3+0x114>
    check_csr_rd("sip (vs perspective)", sip, 0x222);
    80001f52:	0001b597          	auipc	a1,0x1b
    80001f56:	01e58593          	add	a1,a1,30 # 8001cf70 <__func__.1+0x2c8>
    80001f5a:	0001b517          	auipc	a0,0x1b
    80001f5e:	06650513          	add	a0,a0,102 # 8001cfc0 <__func__.1+0x318>
    80001f62:	484190ef          	jal	8001b3e6 <printf>
    80001f66:	4529                	li	a0,10
    80001f68:	350180ef          	jal	8001a2b8 <putchar>
    80001f6c:	bbb9                	j	80001cca <check_xip_regs_3+0x252>
    check_csr_rd("vsip", CSR_VSIP, 0x222);
    80001f6e:	0001b597          	auipc	a1,0x1b
    80001f72:	00258593          	add	a1,a1,2 # 8001cf70 <__func__.1+0x2c8>
    80001f76:	0001b517          	auipc	a0,0x1b
    80001f7a:	04a50513          	add	a0,a0,74 # 8001cfc0 <__func__.1+0x318>
    80001f7e:	468190ef          	jal	8001b3e6 <printf>
    80001f82:	4529                	li	a0,10
    80001f84:	334180ef          	jal	8001a2b8 <putchar>
    80001f88:	b9c9                	j	80001c5a <check_xip_regs_3+0x1e2>
    check_csr_rd("hvip", CSR_HVIP, 0xffffffffffffe444);
    80001f8a:	0001b597          	auipc	a1,0x1b
    80001f8e:	fe658593          	add	a1,a1,-26 # 8001cf70 <__func__.1+0x2c8>
    80001f92:	0001b517          	auipc	a0,0x1b
    80001f96:	02e50513          	add	a0,a0,46 # 8001cfc0 <__func__.1+0x318>
    80001f9a:	44c190ef          	jal	8001b3e6 <printf>
    80001f9e:	4529                	li	a0,10
    80001fa0:	318180ef          	jal	8001a2b8 <putchar>
    80001fa4:	4405                	li	s0,1
    80001fa6:	beb5                	j	80001b22 <check_xip_regs_3+0xaa>

0000000080001fa8 <interrupt_tests>:

bool interrupt_tests(){
    80001fa8:	1101                	add	sp,sp,-32

    TEST_START();
    80001faa:	0001a597          	auipc	a1,0x1a
    80001fae:	98e58593          	add	a1,a1,-1650 # 8001b938 <__func__.0>
    80001fb2:	0001b517          	auipc	a0,0x1b
    80001fb6:	fde50513          	add	a0,a0,-34 # 8001cf90 <__func__.1+0x2e8>
bool interrupt_tests(){
    80001fba:	ec06                	sd	ra,24(sp)
    80001fbc:	e822                	sd	s0,16(sp)
    80001fbe:	e426                	sd	s1,8(sp)
    TEST_START();
    80001fc0:	426190ef          	jal	8001b3e6 <printf>
    80001fc4:	4529                	li	a0,10
    80001fc6:	2f2180ef          	jal	8001a2b8 <putchar>
    /**
     * Test trigerring VSSI without delegating it. 
     * It assumes it is already delegated in miedeleg (it should be hardwired)
     */
    
    goto_priv(PRIV_HS);
    80001fca:	450d                	li	a0,3
    80001fcc:	b13fe0ef          	jal	80000ade <goto_priv>
    CSRC(sstatus, SSTATUS_SPIE_BIT | SSTATUS_SIE_BIT); 
    80001fd0:	02200793          	li	a5,34
    80001fd4:	1007b073          	csrc	sstatus,a5
    CSRS(CSR_HIE, 0x4);
    80001fd8:	60426073          	csrs	hie,4
    CSRS(CSR_HIP, 0x4);
    80001fdc:	64426073          	csrs	hip,4
    TEST_SETUP_EXCEPT();
    80001fe0:	0ff0000f          	fence
    80001fe4:	4785                	li	a5,1
    80001fe6:	0003b417          	auipc	s0,0x3b
    80001fea:	02a40413          	add	s0,s0,42 # 8003d010 <excpt>
    80001fee:	00f41023          	sh	a5,0(s0)
    80001ff2:	0003b797          	auipc	a5,0x3b
    80001ff6:	0407bb23          	sd	zero,86(a5) # 8003d048 <excpt+0x38>
    80001ffa:	0ff0000f          	fence
    goto_priv(PRIV_VS);
    80001ffe:	4509                	li	a0,2
    80002000:	adffe0ef          	jal	80000ade <goto_priv>
    //CSRS(sstatus, SSTATUS_SIE_BIT);
    TEST_ASSERT("vs sw irq with no delegation", 
    80002004:	08200593          	li	a1,130
    80002008:	0001b617          	auipc	a2,0x1b
    8000200c:	39860613          	add	a2,a2,920 # 8001d3a0 <__func__.1+0x6f8>
    80002010:	0001b517          	auipc	a0,0x1b
    80002014:	f9850513          	add	a0,a0,-104 # 8001cfa8 <__func__.1+0x300>
    80002018:	3ce190ef          	jal	8001b3e6 <printf>
    8000201c:	00144783          	lbu	a5,1(s0)
    80002020:	0001b597          	auipc	a1,0x1b
    80002024:	f6058593          	add	a1,a1,-160 # 8001cf80 <__func__.1+0x2d8>
    80002028:	c799                	beqz	a5,80002036 <interrupt_tests+0x8e>
    8000202a:	57fd                	li	a5,-1
    8000202c:	6418                	ld	a4,8(s0)
    8000202e:	17fe                	sll	a5,a5,0x3f
    80002030:	0789                	add	a5,a5,2
    80002032:	14f70663          	beq	a4,a5,8000217e <interrupt_tests+0x1d6>
    80002036:	0001b517          	auipc	a0,0x1b
    8000203a:	f8a50513          	add	a0,a0,-118 # 8001cfc0 <__func__.1+0x318>
    8000203e:	3a8190ef          	jal	8001b3e6 <printf>
    80002042:	00144783          	lbu	a5,1(s0)
    80002046:	c799                	beqz	a5,80002054 <interrupt_tests+0xac>
    80002048:	57fd                	li	a5,-1
    8000204a:	6418                	ld	a4,8(s0)
    8000204c:	17fe                	sll	a5,a5,0x3f
    8000204e:	0789                	add	a5,a5,2
    80002050:	12f70263          	beq	a4,a5,80002174 <interrupt_tests+0x1cc>
    80002054:	0001b517          	auipc	a0,0x1b
    80002058:	f7450513          	add	a0,a0,-140 # 8001cfc8 <__func__.1+0x320>
    8000205c:	38a190ef          	jal	8001b3e6 <printf>
    80002060:	02900513          	li	a0,41
    80002064:	254180ef          	jal	8001a2b8 <putchar>
    80002068:	4529                	li	a0,10
    8000206a:	24e180ef          	jal	8001a2b8 <putchar>
    8000206e:	00144783          	lbu	a5,1(s0)
    80002072:	4481                	li	s1,0
    80002074:	c799                	beqz	a5,80002082 <interrupt_tests+0xda>
    80002076:	57fd                	li	a5,-1
    80002078:	6418                	ld	a4,8(s0)
    8000207a:	17fe                	sll	a5,a5,0x3f
    8000207c:	0789                	add	a5,a5,2
    8000207e:	10f70963          	beq	a4,a5,80002190 <interrupt_tests+0x1e8>
   
    /**
     * Test trigerring VSSI and delegating it. Should trap to VS with cause SSI.
     * It assumes it is already delegated in miedeleg (it should be hardwired)
     */
    goto_priv(PRIV_HS);
    80002082:	450d                	li	a0,3
    80002084:	a5bfe0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HIDELEG, 0x4);
    80002088:	60326073          	csrs	hideleg,4
    CSRS(CSR_HIP, 0x4);
    8000208c:	64426073          	csrs	hip,4
    TEST_SETUP_EXCEPT();
    80002090:	0ff0000f          	fence
    80002094:	4785                	li	a5,1
    80002096:	00f41023          	sh	a5,0(s0)
    8000209a:	0003b797          	auipc	a5,0x3b
    8000209e:	fa07b723          	sd	zero,-82(a5) # 8003d048 <excpt+0x38>
    800020a2:	0ff0000f          	fence
    goto_priv(PRIV_VS);
    800020a6:	4509                	li	a0,2
    800020a8:	a37fe0ef          	jal	80000ade <goto_priv>
    CSRS(sie, 0x2);
    800020ac:	10416073          	csrs	sie,2
    CSRS(sstatus, 0x2);
    800020b0:	10016073          	csrs	sstatus,2
    TEST_ASSERT("vs sw irq with delegation", 
    800020b4:	08200593          	li	a1,130
    800020b8:	0001b617          	auipc	a2,0x1b
    800020bc:	30860613          	add	a2,a2,776 # 8001d3c0 <__func__.1+0x718>
    800020c0:	0001b517          	auipc	a0,0x1b
    800020c4:	ee850513          	add	a0,a0,-280 # 8001cfa8 <__func__.1+0x300>
    800020c8:	31e190ef          	jal	8001b3e6 <printf>
    800020cc:	00144783          	lbu	a5,1(s0)
    800020d0:	0001b597          	auipc	a1,0x1b
    800020d4:	eb058593          	add	a1,a1,-336 # 8001cf80 <__func__.1+0x2d8>
    800020d8:	c799                	beqz	a5,800020e6 <interrupt_tests+0x13e>
    800020da:	57fd                	li	a5,-1
    800020dc:	6418                	ld	a4,8(s0)
    800020de:	17fe                	sll	a5,a5,0x3f
    800020e0:	0785                	add	a5,a5,1
    800020e2:	0af70c63          	beq	a4,a5,8000219a <interrupt_tests+0x1f2>
    800020e6:	0001b517          	auipc	a0,0x1b
    800020ea:	eda50513          	add	a0,a0,-294 # 8001cfc0 <__func__.1+0x318>
    800020ee:	2f8190ef          	jal	8001b3e6 <printf>
    800020f2:	00144783          	lbu	a5,1(s0)
    800020f6:	c799                	beqz	a5,80002104 <interrupt_tests+0x15c>
    800020f8:	57fd                	li	a5,-1
    800020fa:	6418                	ld	a4,8(s0)
    800020fc:	17fe                	sll	a5,a5,0x3f
    800020fe:	0785                	add	a5,a5,1
    80002100:	06f70563          	beq	a4,a5,8000216a <interrupt_tests+0x1c2>
    80002104:	0001b517          	auipc	a0,0x1b
    80002108:	ec450513          	add	a0,a0,-316 # 8001cfc8 <__func__.1+0x320>
    8000210c:	2da190ef          	jal	8001b3e6 <printf>
    80002110:	02900513          	li	a0,41
    80002114:	1a4180ef          	jal	8001a2b8 <putchar>
    80002118:	4529                	li	a0,10
    8000211a:	19e180ef          	jal	8001a2b8 <putchar>
    8000211e:	c0a1                	beqz	s1,8000215e <interrupt_tests+0x1b6>
    80002120:	00144483          	lbu	s1,1(s0)


    //M模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    

    TEST_END();
    80002124:	0001b597          	auipc	a1,0x1b
    80002128:	e5c58593          	add	a1,a1,-420 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vs sw irq with delegation", 
    8000212c:	c881                	beqz	s1,8000213c <interrupt_tests+0x194>
    8000212e:	57fd                	li	a5,-1
    80002130:	6418                	ld	a4,8(s0)
    80002132:	17fe                	sll	a5,a5,0x3f
    80002134:	0785                	add	a5,a5,1
    80002136:	06f70b63          	beq	a4,a5,800021ac <interrupt_tests+0x204>
    8000213a:	4481                	li	s1,0
    TEST_END();
    8000213c:	0001b517          	auipc	a0,0x1b
    80002140:	eec50513          	add	a0,a0,-276 # 8001d028 <__func__.1+0x380>
    80002144:	2a2190ef          	jal	8001b3e6 <printf>
    80002148:	4511                	li	a0,4
    8000214a:	995fe0ef          	jal	80000ade <goto_priv>
    8000214e:	9d8ff0ef          	jal	80001326 <reset_state>
}
    80002152:	60e2                	ld	ra,24(sp)
    80002154:	6442                	ld	s0,16(sp)
    80002156:	8526                	mv	a0,s1
    80002158:	64a2                	ld	s1,8(sp)
    8000215a:	6105                	add	sp,sp,32
    8000215c:	8082                	ret
    TEST_ASSERT("vs sw irq with delegation", 
    8000215e:	4481                	li	s1,0
    TEST_END();
    80002160:	0001b597          	auipc	a1,0x1b
    80002164:	e2058593          	add	a1,a1,-480 # 8001cf80 <__func__.1+0x2d8>
    80002168:	bfd1                	j	8000213c <interrupt_tests+0x194>
    TEST_ASSERT("vs sw irq with delegation", 
    8000216a:	4058                	lw	a4,4(s0)
    8000216c:	4789                	li	a5,2
    8000216e:	f8f71be3          	bne	a4,a5,80002104 <interrupt_tests+0x15c>
    80002172:	b75d                	j	80002118 <interrupt_tests+0x170>
    TEST_ASSERT("vs sw irq with no delegation", 
    80002174:	4058                	lw	a4,4(s0)
    80002176:	478d                	li	a5,3
    80002178:	ecf71ee3          	bne	a4,a5,80002054 <interrupt_tests+0xac>
    8000217c:	b5f5                	j	80002068 <interrupt_tests+0xc0>
    8000217e:	4058                	lw	a4,4(s0)
    80002180:	478d                	li	a5,3
    80002182:	eaf71ae3          	bne	a4,a5,80002036 <interrupt_tests+0x8e>
    80002186:	0001b597          	auipc	a1,0x1b
    8000218a:	dea58593          	add	a1,a1,-534 # 8001cf70 <__func__.1+0x2c8>
    8000218e:	b565                	j	80002036 <interrupt_tests+0x8e>
    80002190:	4044                	lw	s1,4(s0)
    80002192:	14f5                	add	s1,s1,-3
    80002194:	0014b493          	seqz	s1,s1
    80002198:	b5ed                	j	80002082 <interrupt_tests+0xda>
    TEST_ASSERT("vs sw irq with delegation", 
    8000219a:	4058                	lw	a4,4(s0)
    8000219c:	4789                	li	a5,2
    8000219e:	f4f714e3          	bne	a4,a5,800020e6 <interrupt_tests+0x13e>
    800021a2:	0001b597          	auipc	a1,0x1b
    800021a6:	dce58593          	add	a1,a1,-562 # 8001cf70 <__func__.1+0x2c8>
    800021aa:	bf35                	j	800020e6 <interrupt_tests+0x13e>
    800021ac:	4058                	lw	a4,4(s0)
    800021ae:	4789                	li	a5,2
    800021b0:	f8f715e3          	bne	a4,a5,8000213a <interrupt_tests+0x192>
    TEST_END();
    800021b4:	0001b597          	auipc	a1,0x1b
    800021b8:	dbc58593          	add	a1,a1,-580 # 8001cf70 <__func__.1+0x2c8>
    800021bc:	b741                	j	8000213c <interrupt_tests+0x194>

00000000800021be <two_stage_translation_1>:

static inline void touch(uintptr_t addr){
    touchwrite(addr);
}

bool two_stage_translation_1(){
    800021be:	7139                	add	sp,sp,-64
    
    TEST_START();
    800021c0:	00019597          	auipc	a1,0x19
    800021c4:	78858593          	add	a1,a1,1928 # 8001b948 <__func__.20>
    800021c8:	0001b517          	auipc	a0,0x1b
    800021cc:	dc850513          	add	a0,a0,-568 # 8001cf90 <__func__.1+0x2e8>
bool two_stage_translation_1(){
    800021d0:	fc06                	sd	ra,56(sp)
    800021d2:	f822                	sd	s0,48(sp)
    800021d4:	f426                	sd	s1,40(sp)
    800021d6:	f04a                	sd	s2,32(sp)
    800021d8:	ec4e                	sd	s3,24(sp)
    TEST_START();
    800021da:	20c190ef          	jal	8001b3e6 <printf>
    800021de:	4529                	li	a0,10
    800021e0:	0d8180ef          	jal	8001a2b8 <putchar>
static inline uint8_t read8(uintptr_t addr){
    return *((volatile uint8_t*) addr);    
}

static inline void write64(uintptr_t addr, uint64_t val){
    *((volatile uint64_t*) addr) = val;
    800021e4:	000887b7          	lui	a5,0x88
    800021e8:	2201b737          	lui	a4,0x2201b
    800021ec:	070a                	sll	a4,a4,0x2
    800021ee:	44c5                	li	s1,17
    800021f0:	06d78793          	add	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    800021f4:	07b2                	sll	a5,a5,0xc
    800021f6:	e304                	sd	s1,0(a4)
    800021f8:	02200913          	li	s2,34
    800021fc:	0127b023          	sd	s2,0(a5)
    write64(addr2, 0x22);

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    80002200:	450d                	li	a0,3
    80002202:	8ddfe0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80002206:	bdafe0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000220a:	e1cfe0ef          	jal	80000826 <hpt_init>

    /**
     * Setup guest page tables.
     */
    goto_priv(PRIV_VS);
    8000220e:	4509                	li	a0,2
    80002210:	8cffe0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80002214:	ca0fe0ef          	jal	800006b4 <vspt_init>
    return *((volatile uint64_t*) addr);
    80002218:	4001b7b7          	lui	a5,0x4001b
    8000221c:	078a                	sll	a5,a5,0x2
    8000221e:	0007b983          	ld	s3,0(a5) # 4001b000 <STACK_SIZE+0x3ff1b000>
    80002222:	001007b7          	lui	a5,0x100
    80002226:	06d78793          	add	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    8000222a:	07b2                	sll	a5,a5,0xc

    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", check1 && check2);
    8000222c:	0001b617          	auipc	a2,0x1b
    80002230:	1b460613          	add	a2,a2,436 # 8001d3e0 <__func__.1+0x738>
    80002234:	08200593          	li	a1,130
    80002238:	0001b517          	auipc	a0,0x1b
    8000223c:	d7050513          	add	a0,a0,-656 # 8001cfa8 <__func__.1+0x300>
    80002240:	6380                	ld	s0,0(a5)
    80002242:	1a4190ef          	jal	8001b3e6 <printf>
    80002246:	3a998263          	beq	s3,s1,800025ea <two_stage_translation_1+0x42c>
    8000224a:	0001b597          	auipc	a1,0x1b
    8000224e:	d3658593          	add	a1,a1,-714 # 8001cf80 <__func__.1+0x2d8>
    80002252:	0001b517          	auipc	a0,0x1b
    80002256:	d6e50513          	add	a0,a0,-658 # 8001cfc0 <__func__.1+0x318>
    8000225a:	18c190ef          	jal	8001b3e6 <printf>
    8000225e:	0001b517          	auipc	a0,0x1b
    80002262:	d6a50513          	add	a0,a0,-662 # 8001cfc8 <__func__.1+0x320>
    80002266:	180190ef          	jal	8001b3e6 <printf>
    8000226a:	02900513          	li	a0,41
    8000226e:	04a180ef          	jal	8001a2b8 <putchar>
    80002272:	4529                	li	a0,10
    80002274:	044180ef          	jal	8001a2b8 <putchar>
    80002278:	4401                	li	s0,0
    
    goto_priv(PRIV_HS);
    8000227a:	450d                	li	a0,3
    8000227c:	863fe0ef          	jal	80000ade <goto_priv>
    hpt_switch();
    80002280:	f54fe0ef          	jal	800009d4 <hpt_switch>
    asm volatile(
    80002284:	22000073          	.4byte	0x22000073
    asm volatile(
    80002288:	62000073          	.4byte	0x62000073
    hfence();
    goto_priv(PRIV_VS);
    8000228c:	4509                	li	a0,2
    8000228e:	851fe0ef          	jal	80000ade <goto_priv>
    80002292:	4001b7b7          	lui	a5,0x4001b
    80002296:	078a                	sll	a5,a5,0x2
    80002298:	0007b903          	ld	s2,0(a5) # 4001b000 <STACK_SIZE+0x3ff1b000>
    8000229c:	001007b7          	lui	a5,0x100
    800022a0:	06d78793          	add	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    800022a4:	07b2                	sll	a5,a5,0xc
    check1 = read64(vaddr1) == 0x22;
    check2 = read64(vaddr2) == 0x11;   
    // INFO("0%lx 0x%lx", read64(vaddr1), read64(vaddr2));
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    800022a6:	0001b617          	auipc	a2,0x1b
    800022aa:	15260613          	add	a2,a2,338 # 8001d3f8 <__func__.1+0x750>
    800022ae:	08200593          	li	a1,130
    800022b2:	0001b517          	auipc	a0,0x1b
    800022b6:	cf650513          	add	a0,a0,-778 # 8001cfa8 <__func__.1+0x300>
    800022ba:	6384                	ld	s1,0(a5)
    800022bc:	12a190ef          	jal	8001b3e6 <printf>
    800022c0:	02200793          	li	a5,34
    800022c4:	2ef90363          	beq	s2,a5,800025aa <two_stage_translation_1+0x3ec>
    800022c8:	0001b597          	auipc	a1,0x1b
    800022cc:	cb858593          	add	a1,a1,-840 # 8001cf80 <__func__.1+0x2d8>
    800022d0:	0001b517          	auipc	a0,0x1b
    800022d4:	cf050513          	add	a0,a0,-784 # 8001cfc0 <__func__.1+0x318>
    800022d8:	10e190ef          	jal	8001b3e6 <printf>
    800022dc:	0001b517          	auipc	a0,0x1b
    800022e0:	cec50513          	add	a0,a0,-788 # 8001cfc8 <__func__.1+0x320>
    800022e4:	102190ef          	jal	8001b3e6 <printf>
    800022e8:	02900513          	li	a0,41
    800022ec:	7cd170ef          	jal	8001a2b8 <putchar>
    800022f0:	4529                	li	a0,10
    800022f2:	7c7170ef          	jal	8001a2b8 <putchar>
    800022f6:	4401                	li	s0,0

    vspt_switch();
    800022f8:	ec2fe0ef          	jal	800009ba <vspt_switch>
    asm volatile ("sfence.vma \n\t");
    800022fc:	12000073          	sfence.vma
    80002300:	4001b7b7          	lui	a5,0x4001b
    80002304:	078a                	sll	a5,a5,0x2
    80002306:	0007b903          	ld	s2,0(a5) # 4001b000 <STACK_SIZE+0x3ff1b000>
    8000230a:	001007b7          	lui	a5,0x100
    8000230e:	06d78793          	add	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002312:	07b2                	sll	a5,a5,0xc
    sfence();
    check1 = read64(vaddr1) == 0x11;
    check2 = read64(vaddr2) == 0x22;   
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    80002314:	0001b617          	auipc	a2,0x1b
    80002318:	11c60613          	add	a2,a2,284 # 8001d430 <__func__.1+0x788>
    8000231c:	08200593          	li	a1,130
    80002320:	0001b517          	auipc	a0,0x1b
    80002324:	c8850513          	add	a0,a0,-888 # 8001cfa8 <__func__.1+0x300>
    80002328:	6384                	ld	s1,0(a5)
    8000232a:	0bc190ef          	jal	8001b3e6 <printf>
    8000232e:	47c5                	li	a5,17
    80002330:	30f90963          	beq	s2,a5,80002642 <two_stage_translation_1+0x484>
    80002334:	0001b597          	auipc	a1,0x1b
    80002338:	c4c58593          	add	a1,a1,-948 # 8001cf80 <__func__.1+0x2d8>
    8000233c:	0001b517          	auipc	a0,0x1b
    80002340:	c8450513          	add	a0,a0,-892 # 8001cfc0 <__func__.1+0x318>
    80002344:	0a2190ef          	jal	8001b3e6 <printf>
    80002348:	0001b517          	auipc	a0,0x1b
    8000234c:	c8050513          	add	a0,a0,-896 # 8001cfc8 <__func__.1+0x320>
    80002350:	096190ef          	jal	8001b3e6 <printf>
    80002354:	02900513          	li	a0,41
    80002358:	761170ef          	jal	8001a2b8 <putchar>
    8000235c:	4529                	li	a0,10
    8000235e:	75b170ef          	jal	8001a2b8 <putchar>
    80002362:	4481                	li	s1,0

    goto_priv(PRIV_M); 
    80002364:	4511                	li	a0,4
    80002366:	f78fe0ef          	jal	80000ade <goto_priv>
    CSRS(medeleg, 1ull << CAUSE_LGPF);
    8000236a:	002007b7          	lui	a5,0x200
    8000236e:	3027a073          	csrs	medeleg,a5
    goto_priv(PRIV_VS);
    80002372:	4509                	li	a0,2
    80002374:	f6afe0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80002378:	0ff0000f          	fence
    8000237c:	4785                	li	a5,1
    8000237e:	0003b417          	auipc	s0,0x3b
    80002382:	c9240413          	add	s0,s0,-878 # 8003d010 <excpt>
    80002386:	00f41023          	sh	a5,0(s0)
    8000238a:	0003b797          	auipc	a5,0x3b
    8000238e:	ca07bf23          	sd	zero,-834(a5) # 8003d048 <excpt+0x38>
    80002392:	0ff0000f          	fence
    80002396:	001007b7          	lui	a5,0x100
    8000239a:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000239e:	07b2                	sll	a5,a5,0xc
    800023a0:	639c                	ld	a5,0(a5)
    read64(vs_page_base(VSRWX_GI));    
    TEST_ASSERT(
    800023a2:	08200593          	li	a1,130
    800023a6:	0001b617          	auipc	a2,0x1b
    800023aa:	0c260613          	add	a2,a2,194 # 8001d468 <__func__.1+0x7c0>
    800023ae:	0001b517          	auipc	a0,0x1b
    800023b2:	bfa50513          	add	a0,a0,-1030 # 8001cfa8 <__func__.1+0x300>
    800023b6:	030190ef          	jal	8001b3e6 <printf>
    800023ba:	00144783          	lbu	a5,1(s0)
    800023be:	0001b597          	auipc	a1,0x1b
    800023c2:	bc258593          	add	a1,a1,-1086 # 8001cf80 <__func__.1+0x2d8>
    800023c6:	c789                	beqz	a5,800023d0 <two_stage_translation_1+0x212>
    800023c8:	6418                	ld	a4,8(s0)
    800023ca:	47d5                	li	a5,21
    800023cc:	3af70f63          	beq	a4,a5,8000278a <two_stage_translation_1+0x5cc>
    800023d0:	0001b517          	auipc	a0,0x1b
    800023d4:	bf050513          	add	a0,a0,-1040 # 8001cfc0 <__func__.1+0x318>
    800023d8:	00e190ef          	jal	8001b3e6 <printf>
    800023dc:	00144783          	lbu	a5,1(s0)
    800023e0:	c789                	beqz	a5,800023ea <two_stage_translation_1+0x22c>
    800023e2:	6418                	ld	a4,8(s0)
    800023e4:	47d5                	li	a5,21
    800023e6:	2af70063          	beq	a4,a5,80002686 <two_stage_translation_1+0x4c8>
    800023ea:	0001b517          	auipc	a0,0x1b
    800023ee:	bde50513          	add	a0,a0,-1058 # 8001cfc8 <__func__.1+0x320>
    800023f2:	7f5180ef          	jal	8001b3e6 <printf>
    800023f6:	02900513          	li	a0,41
    800023fa:	6bf170ef          	jal	8001a2b8 <putchar>
    800023fe:	4529                	li	a0,10
    80002400:	6b9170ef          	jal	8001a2b8 <putchar>
    80002404:	c889                	beqz	s1,80002416 <two_stage_translation_1+0x258>
    80002406:	00144783          	lbu	a5,1(s0)
    8000240a:	4481                	li	s1,0
    8000240c:	c789                	beqz	a5,80002416 <two_stage_translation_1+0x258>
    8000240e:	6418                	ld	a4,8(s0)
    80002410:	47d5                	li	a5,21
    80002412:	30f70a63          	beq	a4,a5,80002726 <two_stage_translation_1+0x568>
        excpt.priv == PRIV_HS &&
        excpt.gva == true &&
        excpt.xpv == true
    );

    TEST_SETUP_EXCEPT();
    80002416:	0ff0000f          	fence
    8000241a:	4785                	li	a5,1
    8000241c:	00f41023          	sh	a5,0(s0)
    80002420:	0003b797          	auipc	a5,0x3b
    80002424:	c207b423          	sd	zero,-984(a5) # 8003d048 <excpt+0x38>
    80002428:	0ff0000f          	fence
    TEST_EXEC_EXCEPT(vs_page_base(VSRWX_GI)); 
    8000242c:	001007b7          	lui	a5,0x100
    80002430:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80002434:	07b2                	sll	a5,a5,0xc
    80002436:	00000297          	auipc	t0,0x0
    8000243a:	00c28293          	add	t0,t0,12 # 80002442 <two_stage_translation_1+0x284>
    8000243e:	02543c23          	sd	t0,56(s0)
    80002442:	8782                	jr	a5
    TEST_ASSERT(
    80002444:	08200593          	li	a1,130
    80002448:	0001b617          	auipc	a2,0x1b
    8000244c:	05060613          	add	a2,a2,80 # 8001d498 <__func__.1+0x7f0>
    80002450:	0001b517          	auipc	a0,0x1b
    80002454:	b5850513          	add	a0,a0,-1192 # 8001cfa8 <__func__.1+0x300>
    80002458:	78f180ef          	jal	8001b3e6 <printf>
    8000245c:	00144783          	lbu	a5,1(s0)
    80002460:	0001b597          	auipc	a1,0x1b
    80002464:	b2058593          	add	a1,a1,-1248 # 8001cf80 <__func__.1+0x2d8>
    80002468:	c789                	beqz	a5,80002472 <two_stage_translation_1+0x2b4>
    8000246a:	6418                	ld	a4,8(s0)
    8000246c:	47d1                	li	a5,20
    8000246e:	36f70163          	beq	a4,a5,800027d0 <two_stage_translation_1+0x612>
    80002472:	0001b517          	auipc	a0,0x1b
    80002476:	b4e50513          	add	a0,a0,-1202 # 8001cfc0 <__func__.1+0x318>
    8000247a:	76d180ef          	jal	8001b3e6 <printf>
    8000247e:	00144783          	lbu	a5,1(s0)
    80002482:	c789                	beqz	a5,8000248c <two_stage_translation_1+0x2ce>
    80002484:	6418                	ld	a4,8(s0)
    80002486:	47d1                	li	a5,20
    80002488:	22f70363          	beq	a4,a5,800026ae <two_stage_translation_1+0x4f0>
    8000248c:	0001b517          	auipc	a0,0x1b
    80002490:	b3c50513          	add	a0,a0,-1220 # 8001cfc8 <__func__.1+0x320>
    80002494:	753180ef          	jal	8001b3e6 <printf>
    80002498:	02900513          	li	a0,41
    8000249c:	61d170ef          	jal	8001a2b8 <putchar>
    800024a0:	4529                	li	a0,10
    800024a2:	617170ef          	jal	8001a2b8 <putchar>
    800024a6:	c889                	beqz	s1,800024b8 <two_stage_translation_1+0x2fa>
    800024a8:	00144783          	lbu	a5,1(s0)
    800024ac:	4481                	li	s1,0
    800024ae:	c789                	beqz	a5,800024b8 <two_stage_translation_1+0x2fa>
    800024b0:	6418                	ld	a4,8(s0)
    800024b2:	47d1                	li	a5,20
    800024b4:	24f70763          	beq	a4,a5,80002702 <two_stage_translation_1+0x544>
        excpt.priv == PRIV_M  &&
        excpt.gva == true &&
        excpt.xpv == true
    );

    goto_priv(PRIV_M);
    800024b8:	4511                	li	a0,4
    800024ba:	e24fe0ef          	jal	80000ade <goto_priv>
    CSRS(medeleg, 1 << CAUSE_LPF | 1 << CAUSE_LGPF);
    800024be:	002027b7          	lui	a5,0x202
    800024c2:	3027a073          	csrs	medeleg,a5
    goto_priv(PRIV_HS); 
    800024c6:	450d                	li	a0,3
    800024c8:	e16fe0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HEDELEG, 1 << CAUSE_LPF);
    800024cc:	6789                	lui	a5,0x2
    800024ce:	6027a073          	csrs	hedeleg,a5
    goto_priv(PRIV_VS);
    800024d2:	4509                	li	a0,2
    800024d4:	e0afe0ef          	jal	80000ade <goto_priv>
    800024d8:	12000073          	sfence.vma
    sfence();
    TEST_SETUP_EXCEPT();
    800024dc:	0ff0000f          	fence
    800024e0:	4785                	li	a5,1
    800024e2:	00f41023          	sh	a5,0(s0)
    800024e6:	0003b797          	auipc	a5,0x3b
    800024ea:	b607b123          	sd	zero,-1182(a5) # 8003d048 <excpt+0x38>
    800024ee:	0ff0000f          	fence
    volatile uint64_t x = *(volatile uint64_t *)addr;
    800024f2:	400197b7          	lui	a5,0x40019
    800024f6:	078a                	sll	a5,a5,0x2
    800024f8:	639c                	ld	a5,0(a5)
    touchread(vs_page_base(VSI_GI));    
    TEST_ASSERT(
    800024fa:	08200593          	li	a1,130
    800024fe:	0001b617          	auipc	a2,0x1b
    80002502:	fda60613          	add	a2,a2,-38 # 8001d4d8 <__func__.1+0x830>
    80002506:	0001b517          	auipc	a0,0x1b
    8000250a:	aa250513          	add	a0,a0,-1374 # 8001cfa8 <__func__.1+0x300>
    volatile uint64_t x = *(volatile uint64_t *)addr;
    8000250e:	e43e                	sd	a5,8(sp)
    TEST_ASSERT(
    80002510:	6d7180ef          	jal	8001b3e6 <printf>
    80002514:	00144783          	lbu	a5,1(s0)
    80002518:	0001b597          	auipc	a1,0x1b
    8000251c:	a6858593          	add	a1,a1,-1432 # 8001cf80 <__func__.1+0x2d8>
    80002520:	c789                	beqz	a5,8000252a <two_stage_translation_1+0x36c>
    80002522:	6418                	ld	a4,8(s0)
    80002524:	47b5                	li	a5,13
    80002526:	28f70863          	beq	a4,a5,800027b6 <two_stage_translation_1+0x5f8>
    8000252a:	0001b517          	auipc	a0,0x1b
    8000252e:	a9650513          	add	a0,a0,-1386 # 8001cfc0 <__func__.1+0x318>
    80002532:	6b5180ef          	jal	8001b3e6 <printf>
    80002536:	00144783          	lbu	a5,1(s0)
    8000253a:	c789                	beqz	a5,80002544 <two_stage_translation_1+0x386>
    8000253c:	6418                	ld	a4,8(s0)
    8000253e:	47b5                	li	a5,13
    80002540:	18f70b63          	beq	a4,a5,800026d6 <two_stage_translation_1+0x518>
    80002544:	0001b517          	auipc	a0,0x1b
    80002548:	a8450513          	add	a0,a0,-1404 # 8001cfc8 <__func__.1+0x320>
    8000254c:	69b180ef          	jal	8001b3e6 <printf>
    80002550:	02900513          	li	a0,41
    80002554:	565170ef          	jal	8001a2b8 <putchar>
    80002558:	4529                	li	a0,10
    8000255a:	55f170ef          	jal	8001a2b8 <putchar>
    8000255e:	c0a1                	beqz	s1,8000259e <two_stage_translation_1+0x3e0>
    80002560:	00144483          	lbu	s1,1(s0)
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_VS && 
        excpt.gva == false
    );

    TEST_END();
    80002564:	0001b597          	auipc	a1,0x1b
    80002568:	a1c58593          	add	a1,a1,-1508 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT(
    8000256c:	c491                	beqz	s1,80002578 <two_stage_translation_1+0x3ba>
    8000256e:	6418                	ld	a4,8(s0)
    80002570:	47b5                	li	a5,13
    80002572:	16f70b63          	beq	a4,a5,800026e8 <two_stage_translation_1+0x52a>
    80002576:	4481                	li	s1,0
    TEST_END();
    80002578:	0001b517          	auipc	a0,0x1b
    8000257c:	ab050513          	add	a0,a0,-1360 # 8001d028 <__func__.1+0x380>
    80002580:	667180ef          	jal	8001b3e6 <printf>
    80002584:	4511                	li	a0,4
    80002586:	d58fe0ef          	jal	80000ade <goto_priv>
    8000258a:	d9dfe0ef          	jal	80001326 <reset_state>
}
    8000258e:	70e2                	ld	ra,56(sp)
    80002590:	7442                	ld	s0,48(sp)
    80002592:	7902                	ld	s2,32(sp)
    80002594:	69e2                	ld	s3,24(sp)
    80002596:	8526                	mv	a0,s1
    80002598:	74a2                	ld	s1,40(sp)
    8000259a:	6121                	add	sp,sp,64
    8000259c:	8082                	ret
    TEST_ASSERT(
    8000259e:	4481                	li	s1,0
    TEST_END();
    800025a0:	0001b597          	auipc	a1,0x1b
    800025a4:	9e058593          	add	a1,a1,-1568 # 8001cf80 <__func__.1+0x2d8>
    800025a8:	bfc1                	j	80002578 <two_stage_translation_1+0x3ba>
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    800025aa:	47c5                	li	a5,17
    800025ac:	1af48f63          	beq	s1,a5,8000276a <two_stage_translation_1+0x5ac>
    800025b0:	0001b597          	auipc	a1,0x1b
    800025b4:	9d058593          	add	a1,a1,-1584 # 8001cf80 <__func__.1+0x2d8>
    800025b8:	0001b517          	auipc	a0,0x1b
    800025bc:	a0850513          	add	a0,a0,-1528 # 8001cfc0 <__func__.1+0x318>
    800025c0:	627180ef          	jal	8001b3e6 <printf>
    800025c4:	0001b517          	auipc	a0,0x1b
    800025c8:	a0450513          	add	a0,a0,-1532 # 8001cfc8 <__func__.1+0x320>
    800025cc:	61b180ef          	jal	8001b3e6 <printf>
    800025d0:	02900513          	li	a0,41
    800025d4:	4e5170ef          	jal	8001a2b8 <putchar>
    800025d8:	4529                	li	a0,10
    800025da:	4df170ef          	jal	8001a2b8 <putchar>
    800025de:	d0040ce3          	beqz	s0,800022f6 <two_stage_translation_1+0x138>
    800025e2:	14bd                	add	s1,s1,-17
    800025e4:	0014b413          	seqz	s0,s1
    800025e8:	bb01                	j	800022f8 <two_stage_translation_1+0x13a>
    TEST_ASSERT("vs gets right values", check1 && check2);
    800025ea:	03240e63          	beq	s0,s2,80002626 <two_stage_translation_1+0x468>
    800025ee:	0001b597          	auipc	a1,0x1b
    800025f2:	99258593          	add	a1,a1,-1646 # 8001cf80 <__func__.1+0x2d8>
    800025f6:	0001b517          	auipc	a0,0x1b
    800025fa:	9ca50513          	add	a0,a0,-1590 # 8001cfc0 <__func__.1+0x318>
    800025fe:	5e9180ef          	jal	8001b3e6 <printf>
    80002602:	0001b517          	auipc	a0,0x1b
    80002606:	9c650513          	add	a0,a0,-1594 # 8001cfc8 <__func__.1+0x320>
    8000260a:	5dd180ef          	jal	8001b3e6 <printf>
    8000260e:	02900513          	li	a0,41
    80002612:	4a7170ef          	jal	8001a2b8 <putchar>
    80002616:	4529                	li	a0,10
    80002618:	4a1170ef          	jal	8001a2b8 <putchar>
    8000261c:	fde40413          	add	s0,s0,-34
    80002620:	00143413          	seqz	s0,s0
    80002624:	b999                	j	8000227a <two_stage_translation_1+0xbc>
    80002626:	0001b597          	auipc	a1,0x1b
    8000262a:	94a58593          	add	a1,a1,-1718 # 8001cf70 <__func__.1+0x2c8>
    8000262e:	0001b517          	auipc	a0,0x1b
    80002632:	99250513          	add	a0,a0,-1646 # 8001cfc0 <__func__.1+0x318>
    80002636:	5b1180ef          	jal	8001b3e6 <printf>
    8000263a:	4529                	li	a0,10
    8000263c:	47d170ef          	jal	8001a2b8 <putchar>
    80002640:	bff1                	j	8000261c <two_stage_translation_1+0x45e>
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    80002642:	02200793          	li	a5,34
    80002646:	10f48263          	beq	s1,a5,8000274a <two_stage_translation_1+0x58c>
    8000264a:	0001b597          	auipc	a1,0x1b
    8000264e:	93658593          	add	a1,a1,-1738 # 8001cf80 <__func__.1+0x2d8>
    80002652:	0001b517          	auipc	a0,0x1b
    80002656:	96e50513          	add	a0,a0,-1682 # 8001cfc0 <__func__.1+0x318>
    8000265a:	58d180ef          	jal	8001b3e6 <printf>
    8000265e:	0001b517          	auipc	a0,0x1b
    80002662:	96a50513          	add	a0,a0,-1686 # 8001cfc8 <__func__.1+0x320>
    80002666:	581180ef          	jal	8001b3e6 <printf>
    8000266a:	02900513          	li	a0,41
    8000266e:	44b170ef          	jal	8001a2b8 <putchar>
    80002672:	4529                	li	a0,10
    80002674:	445170ef          	jal	8001a2b8 <putchar>
    80002678:	ce0405e3          	beqz	s0,80002362 <two_stage_translation_1+0x1a4>
    8000267c:	fde48493          	add	s1,s1,-34
    80002680:	0014b493          	seqz	s1,s1
    80002684:	b1c5                	j	80002364 <two_stage_translation_1+0x1a6>
    TEST_ASSERT(
    80002686:	7418                	ld	a4,40(s0)
    80002688:	400197b7          	lui	a5,0x40019
    8000268c:	40078793          	add	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002690:	d4f71de3          	bne	a4,a5,800023ea <two_stage_translation_1+0x22c>
    80002694:	4058                	lw	a4,4(s0)
    80002696:	478d                	li	a5,3
    80002698:	d4f719e3          	bne	a4,a5,800023ea <two_stage_translation_1+0x22c>
    8000269c:	03044783          	lbu	a5,48(s0)
    800026a0:	d40785e3          	beqz	a5,800023ea <two_stage_translation_1+0x22c>
    800026a4:	03144783          	lbu	a5,49(s0)
    800026a8:	d4079be3          	bnez	a5,800023fe <two_stage_translation_1+0x240>
    800026ac:	bb3d                	j	800023ea <two_stage_translation_1+0x22c>
    TEST_ASSERT(
    800026ae:	7418                	ld	a4,40(s0)
    800026b0:	400197b7          	lui	a5,0x40019
    800026b4:	40078793          	add	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    800026b8:	dcf71ae3          	bne	a4,a5,8000248c <two_stage_translation_1+0x2ce>
    800026bc:	4058                	lw	a4,4(s0)
    800026be:	4791                	li	a5,4
    800026c0:	dcf716e3          	bne	a4,a5,8000248c <two_stage_translation_1+0x2ce>
    800026c4:	03044783          	lbu	a5,48(s0)
    800026c8:	dc0782e3          	beqz	a5,8000248c <two_stage_translation_1+0x2ce>
    800026cc:	03144783          	lbu	a5,49(s0)
    800026d0:	dc0798e3          	bnez	a5,800024a0 <two_stage_translation_1+0x2e2>
    800026d4:	bb65                	j	8000248c <two_stage_translation_1+0x2ce>
    TEST_ASSERT(
    800026d6:	4058                	lw	a4,4(s0)
    800026d8:	4789                	li	a5,2
    800026da:	e6f715e3          	bne	a4,a5,80002544 <two_stage_translation_1+0x386>
    800026de:	03044783          	lbu	a5,48(s0)
    800026e2:	e6078be3          	beqz	a5,80002558 <two_stage_translation_1+0x39a>
    800026e6:	bdb9                	j	80002544 <two_stage_translation_1+0x386>
    800026e8:	4058                	lw	a4,4(s0)
    800026ea:	4789                	li	a5,2
    800026ec:	e8f715e3          	bne	a4,a5,80002576 <two_stage_translation_1+0x3b8>
    800026f0:	03044783          	lbu	a5,48(s0)
    800026f4:	e80791e3          	bnez	a5,80002576 <two_stage_translation_1+0x3b8>
    TEST_END();
    800026f8:	0001b597          	auipc	a1,0x1b
    800026fc:	87858593          	add	a1,a1,-1928 # 8001cf70 <__func__.1+0x2c8>
    80002700:	bda5                	j	80002578 <two_stage_translation_1+0x3ba>
    TEST_ASSERT(
    80002702:	7418                	ld	a4,40(s0)
    80002704:	400197b7          	lui	a5,0x40019
    80002708:	40078793          	add	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    8000270c:	daf716e3          	bne	a4,a5,800024b8 <two_stage_translation_1+0x2fa>
    80002710:	4058                	lw	a4,4(s0)
    80002712:	4791                	li	a5,4
    80002714:	daf712e3          	bne	a4,a5,800024b8 <two_stage_translation_1+0x2fa>
    80002718:	03045483          	lhu	s1,48(s0)
    8000271c:	eff48493          	add	s1,s1,-257
    80002720:	0014b493          	seqz	s1,s1
    80002724:	bb51                	j	800024b8 <two_stage_translation_1+0x2fa>
    TEST_ASSERT(
    80002726:	7418                	ld	a4,40(s0)
    80002728:	400197b7          	lui	a5,0x40019
    8000272c:	40078793          	add	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002730:	cef713e3          	bne	a4,a5,80002416 <two_stage_translation_1+0x258>
    80002734:	4058                	lw	a4,4(s0)
    80002736:	478d                	li	a5,3
    80002738:	ccf71fe3          	bne	a4,a5,80002416 <two_stage_translation_1+0x258>
    8000273c:	03045483          	lhu	s1,48(s0)
    80002740:	eff48493          	add	s1,s1,-257
    80002744:	0014b493          	seqz	s1,s1
    80002748:	b1f9                	j	80002416 <two_stage_translation_1+0x258>
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    8000274a:	0001b597          	auipc	a1,0x1b
    8000274e:	82658593          	add	a1,a1,-2010 # 8001cf70 <__func__.1+0x2c8>
    80002752:	0001b517          	auipc	a0,0x1b
    80002756:	86e50513          	add	a0,a0,-1938 # 8001cfc0 <__func__.1+0x318>
    8000275a:	48d180ef          	jal	8001b3e6 <printf>
    8000275e:	4529                	li	a0,10
    80002760:	359170ef          	jal	8001a2b8 <putchar>
    80002764:	be040fe3          	beqz	s0,80002362 <two_stage_translation_1+0x1a4>
    80002768:	bf11                	j	8000267c <two_stage_translation_1+0x4be>
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    8000276a:	0001b597          	auipc	a1,0x1b
    8000276e:	80658593          	add	a1,a1,-2042 # 8001cf70 <__func__.1+0x2c8>
    80002772:	0001b517          	auipc	a0,0x1b
    80002776:	84e50513          	add	a0,a0,-1970 # 8001cfc0 <__func__.1+0x318>
    8000277a:	46d180ef          	jal	8001b3e6 <printf>
    8000277e:	4529                	li	a0,10
    80002780:	339170ef          	jal	8001a2b8 <putchar>
    80002784:	b60409e3          	beqz	s0,800022f6 <two_stage_translation_1+0x138>
    80002788:	bda9                	j	800025e2 <two_stage_translation_1+0x424>
    TEST_ASSERT(
    8000278a:	7418                	ld	a4,40(s0)
    8000278c:	400197b7          	lui	a5,0x40019
    80002790:	40078793          	add	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002794:	c2f71ee3          	bne	a4,a5,800023d0 <two_stage_translation_1+0x212>
    80002798:	4058                	lw	a4,4(s0)
    8000279a:	478d                	li	a5,3
    8000279c:	c2f71ae3          	bne	a4,a5,800023d0 <two_stage_translation_1+0x212>
    800027a0:	03045703          	lhu	a4,48(s0)
    800027a4:	10100793          	li	a5,257
    800027a8:	c2f714e3          	bne	a4,a5,800023d0 <two_stage_translation_1+0x212>
    800027ac:	0001a597          	auipc	a1,0x1a
    800027b0:	7c458593          	add	a1,a1,1988 # 8001cf70 <__func__.1+0x2c8>
    800027b4:	b931                	j	800023d0 <two_stage_translation_1+0x212>
    TEST_ASSERT(
    800027b6:	4058                	lw	a4,4(s0)
    800027b8:	4789                	li	a5,2
    800027ba:	d6f718e3          	bne	a4,a5,8000252a <two_stage_translation_1+0x36c>
    800027be:	03044783          	lbu	a5,48(s0)
    800027c2:	d60794e3          	bnez	a5,8000252a <two_stage_translation_1+0x36c>
    800027c6:	0001a597          	auipc	a1,0x1a
    800027ca:	7aa58593          	add	a1,a1,1962 # 8001cf70 <__func__.1+0x2c8>
    800027ce:	bbb1                	j	8000252a <two_stage_translation_1+0x36c>
    TEST_ASSERT(
    800027d0:	7418                	ld	a4,40(s0)
    800027d2:	400197b7          	lui	a5,0x40019
    800027d6:	40078793          	add	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    800027da:	c8f71ce3          	bne	a4,a5,80002472 <two_stage_translation_1+0x2b4>
    800027de:	4058                	lw	a4,4(s0)
    800027e0:	4791                	li	a5,4
    800027e2:	c8f718e3          	bne	a4,a5,80002472 <two_stage_translation_1+0x2b4>
    800027e6:	03045703          	lhu	a4,48(s0)
    800027ea:	10100793          	li	a5,257
    800027ee:	c8f712e3          	bne	a4,a5,80002472 <two_stage_translation_1+0x2b4>
    800027f2:	0001a597          	auipc	a1,0x1a
    800027f6:	77e58593          	add	a1,a1,1918 # 8001cf70 <__func__.1+0x2c8>
    800027fa:	b9a5                	j	80002472 <two_stage_translation_1+0x2b4>

00000000800027fc <two_stage_translation_2>:

bool two_stage_translation_2(){
    800027fc:	7179                	add	sp,sp,-48
    
    TEST_START();
    800027fe:	00019597          	auipc	a1,0x19
    80002802:	16258593          	add	a1,a1,354 # 8001b960 <__func__.17>
    80002806:	0001a517          	auipc	a0,0x1a
    8000280a:	78a50513          	add	a0,a0,1930 # 8001cf90 <__func__.1+0x2e8>
bool two_stage_translation_2(){
    8000280e:	f406                	sd	ra,40(sp)
    80002810:	f022                	sd	s0,32(sp)
    80002812:	ec26                	sd	s1,24(sp)
    80002814:	e84a                	sd	s2,16(sp)
    80002816:	e44e                	sd	s3,8(sp)
    TEST_START();
    80002818:	3cf180ef          	jal	8001b3e6 <printf>
    8000281c:	4529                	li	a0,10
    8000281e:	29b170ef          	jal	8001a2b8 <putchar>
    *((volatile uint64_t*) addr) = val;
    80002822:	000887b7          	lui	a5,0x88
    80002826:	2201b737          	lui	a4,0x2201b
    8000282a:	070a                	sll	a4,a4,0x2
    8000282c:	44c5                	li	s1,17
    8000282e:	06d78793          	add	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    80002832:	07b2                	sll	a5,a5,0xc
    80002834:	e304                	sd	s1,0(a4)
    80002836:	02200913          	li	s2,34
    8000283a:	0127b023          	sd	s2,0(a5)
    write64(addr2, 0x22);

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    8000283e:	450d                	li	a0,3
    80002840:	a9efe0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80002844:	d9dfd0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80002848:	fdffd0ef          	jal	80000826 <hpt_init>

    /**
     * Setup guest page tables.
     */
    goto_priv(PRIV_VS);
    8000284c:	4509                	li	a0,2
    8000284e:	a90fe0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80002852:	e63fd0ef          	jal	800006b4 <vspt_init>
    return *((volatile uint64_t*) addr);
    80002856:	4001b7b7          	lui	a5,0x4001b
    8000285a:	078a                	sll	a5,a5,0x2
    8000285c:	0007b983          	ld	s3,0(a5) # 4001b000 <STACK_SIZE+0x3ff1b000>
    80002860:	001007b7          	lui	a5,0x100
    80002864:	06d78793          	add	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002868:	07b2                	sll	a5,a5,0xc

    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", check1 && check2);
    8000286a:	0001b617          	auipc	a2,0x1b
    8000286e:	b7660613          	add	a2,a2,-1162 # 8001d3e0 <__func__.1+0x738>
    80002872:	08200593          	li	a1,130
    80002876:	0001a517          	auipc	a0,0x1a
    8000287a:	73250513          	add	a0,a0,1842 # 8001cfa8 <__func__.1+0x300>
    8000287e:	6380                	ld	s0,0(a5)
    80002880:	367180ef          	jal	8001b3e6 <printf>
    80002884:	0c998b63          	beq	s3,s1,8000295a <two_stage_translation_2+0x15e>
    80002888:	0001a597          	auipc	a1,0x1a
    8000288c:	6f858593          	add	a1,a1,1784 # 8001cf80 <__func__.1+0x2d8>
    80002890:	0001a517          	auipc	a0,0x1a
    80002894:	73050513          	add	a0,a0,1840 # 8001cfc0 <__func__.1+0x318>
    80002898:	34f180ef          	jal	8001b3e6 <printf>
    8000289c:	0001a517          	auipc	a0,0x1a
    800028a0:	72c50513          	add	a0,a0,1836 # 8001cfc8 <__func__.1+0x320>
    800028a4:	343180ef          	jal	8001b3e6 <printf>
    800028a8:	02900513          	li	a0,41
    800028ac:	20d170ef          	jal	8001a2b8 <putchar>
    800028b0:	4529                	li	a0,10
    800028b2:	207170ef          	jal	8001a2b8 <putchar>
    800028b6:	4401                	li	s0,0
    
    goto_priv(PRIV_HS);
    800028b8:	450d                	li	a0,3
    800028ba:	a24fe0ef          	jal	80000ade <goto_priv>
    hpt_switch();
    800028be:	916fe0ef          	jal	800009d4 <hpt_switch>
    goto_priv(PRIV_VS);
    800028c2:	4509                	li	a0,2
    800028c4:	a1afe0ef          	jal	80000ade <goto_priv>
    800028c8:	4001b7b7          	lui	a5,0x4001b
    800028cc:	078a                	sll	a5,a5,0x2
    800028ce:	6384                	ld	s1,0(a5)
    800028d0:	001007b7          	lui	a5,0x100
    800028d4:	06d78793          	add	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    800028d8:	07b2                	sll	a5,a5,0xc
    check1 = read64(vaddr1) == 0x11;
    check2 = read64(vaddr2) == 0x22;   
    // INFO("0%lx 0x%lx", read64(vaddr1), read64(vaddr2));
    TEST_ASSERT("vs do not change values after changing 2nd stage pt when not execute hfence", check1 && check2);
    800028da:	0001b617          	auipc	a2,0x1b
    800028de:	c3660613          	add	a2,a2,-970 # 8001d510 <__func__.1+0x868>
    800028e2:	08200593          	li	a1,130
    800028e6:	0001a517          	auipc	a0,0x1a
    800028ea:	6c250513          	add	a0,a0,1730 # 8001cfa8 <__func__.1+0x300>
    800028ee:	0007b903          	ld	s2,0(a5)
    800028f2:	2f5180ef          	jal	8001b3e6 <printf>
    800028f6:	47c5                	li	a5,17
    800028f8:	0af48d63          	beq	s1,a5,800029b2 <two_stage_translation_2+0x1b6>
    800028fc:	0001a597          	auipc	a1,0x1a
    80002900:	68458593          	add	a1,a1,1668 # 8001cf80 <__func__.1+0x2d8>
    80002904:	0001a517          	auipc	a0,0x1a
    80002908:	6bc50513          	add	a0,a0,1724 # 8001cfc0 <__func__.1+0x318>
    8000290c:	2db180ef          	jal	8001b3e6 <printf>
    80002910:	0001a517          	auipc	a0,0x1a
    80002914:	6b850513          	add	a0,a0,1720 # 8001cfc8 <__func__.1+0x320>
    80002918:	2cf180ef          	jal	8001b3e6 <printf>
    8000291c:	02900513          	li	a0,41
    80002920:	199170ef          	jal	8001a2b8 <putchar>
    80002924:	4529                	li	a0,10
    80002926:	193170ef          	jal	8001a2b8 <putchar>
    8000292a:	4401                	li	s0,0


    TEST_END();
    8000292c:	0001a597          	auipc	a1,0x1a
    80002930:	65458593          	add	a1,a1,1620 # 8001cf80 <__func__.1+0x2d8>
    80002934:	0001a517          	auipc	a0,0x1a
    80002938:	6f450513          	add	a0,a0,1780 # 8001d028 <__func__.1+0x380>
    8000293c:	2ab180ef          	jal	8001b3e6 <printf>
    80002940:	4511                	li	a0,4
    80002942:	99cfe0ef          	jal	80000ade <goto_priv>
    80002946:	9e1fe0ef          	jal	80001326 <reset_state>
}
    8000294a:	70a2                	ld	ra,40(sp)
    8000294c:	8522                	mv	a0,s0
    8000294e:	7402                	ld	s0,32(sp)
    80002950:	64e2                	ld	s1,24(sp)
    80002952:	6942                	ld	s2,16(sp)
    80002954:	69a2                	ld	s3,8(sp)
    80002956:	6145                	add	sp,sp,48
    80002958:	8082                	ret
    TEST_ASSERT("vs gets right values", check1 && check2);
    8000295a:	03240e63          	beq	s0,s2,80002996 <two_stage_translation_2+0x19a>
    8000295e:	0001a597          	auipc	a1,0x1a
    80002962:	62258593          	add	a1,a1,1570 # 8001cf80 <__func__.1+0x2d8>
    80002966:	0001a517          	auipc	a0,0x1a
    8000296a:	65a50513          	add	a0,a0,1626 # 8001cfc0 <__func__.1+0x318>
    8000296e:	279180ef          	jal	8001b3e6 <printf>
    80002972:	0001a517          	auipc	a0,0x1a
    80002976:	65650513          	add	a0,a0,1622 # 8001cfc8 <__func__.1+0x320>
    8000297a:	26d180ef          	jal	8001b3e6 <printf>
    8000297e:	02900513          	li	a0,41
    80002982:	137170ef          	jal	8001a2b8 <putchar>
    80002986:	4529                	li	a0,10
    80002988:	131170ef          	jal	8001a2b8 <putchar>
    8000298c:	fde40413          	add	s0,s0,-34
    80002990:	00143413          	seqz	s0,s0
    80002994:	b715                	j	800028b8 <two_stage_translation_2+0xbc>
    80002996:	0001a597          	auipc	a1,0x1a
    8000299a:	5da58593          	add	a1,a1,1498 # 8001cf70 <__func__.1+0x2c8>
    8000299e:	0001a517          	auipc	a0,0x1a
    800029a2:	62250513          	add	a0,a0,1570 # 8001cfc0 <__func__.1+0x318>
    800029a6:	241180ef          	jal	8001b3e6 <printf>
    800029aa:	4529                	li	a0,10
    800029ac:	10d170ef          	jal	8001a2b8 <putchar>
    800029b0:	bff1                	j	8000298c <two_stage_translation_2+0x190>
    TEST_ASSERT("vs do not change values after changing 2nd stage pt when not execute hfence", check1 && check2);
    800029b2:	02200793          	li	a5,34
    800029b6:	f4f913e3          	bne	s2,a5,800028fc <two_stage_translation_2+0x100>
    800029ba:	0001a597          	auipc	a1,0x1a
    800029be:	5b658593          	add	a1,a1,1462 # 8001cf70 <__func__.1+0x2c8>
    800029c2:	0001a517          	auipc	a0,0x1a
    800029c6:	5fe50513          	add	a0,a0,1534 # 8001cfc0 <__func__.1+0x318>
    800029ca:	21d180ef          	jal	8001b3e6 <printf>
    800029ce:	4529                	li	a0,10
    800029d0:	0e9170ef          	jal	8001a2b8 <putchar>
    800029d4:	d839                	beqz	s0,8000292a <two_stage_translation_2+0x12e>
    800029d6:	4405                	li	s0,1
    TEST_END();
    800029d8:	0001a597          	auipc	a1,0x1a
    800029dc:	59858593          	add	a1,a1,1432 # 8001cf70 <__func__.1+0x2c8>
    800029e0:	bf91                	j	80002934 <two_stage_translation_2+0x138>

00000000800029e2 <two_stage_translation_3>:

bool two_stage_translation_3(){
    800029e2:	7179                	add	sp,sp,-48
    
    TEST_START();
    800029e4:	00019597          	auipc	a1,0x19
    800029e8:	f9458593          	add	a1,a1,-108 # 8001b978 <__func__.16>
    800029ec:	0001a517          	auipc	a0,0x1a
    800029f0:	5a450513          	add	a0,a0,1444 # 8001cf90 <__func__.1+0x2e8>
bool two_stage_translation_3(){
    800029f4:	f406                	sd	ra,40(sp)
    800029f6:	f022                	sd	s0,32(sp)
    800029f8:	ec26                	sd	s1,24(sp)
    800029fa:	e84a                	sd	s2,16(sp)
    800029fc:	e44e                	sd	s3,8(sp)
    TEST_START();
    800029fe:	1e9180ef          	jal	8001b3e6 <printf>
    80002a02:	4529                	li	a0,10
    80002a04:	0b5170ef          	jal	8001a2b8 <putchar>
    *((volatile uint64_t*) addr) = val;
    80002a08:	000887b7          	lui	a5,0x88
    80002a0c:	2201b737          	lui	a4,0x2201b
    80002a10:	070a                	sll	a4,a4,0x2
    80002a12:	44c5                	li	s1,17
    80002a14:	06d78793          	add	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    80002a18:	07b2                	sll	a5,a5,0xc
    80002a1a:	e304                	sd	s1,0(a4)
    80002a1c:	02200913          	li	s2,34
    80002a20:	0127b023          	sd	s2,0(a5)
    write64(addr2, 0x22);

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    80002a24:	450d                	li	a0,3
    80002a26:	8b8fe0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80002a2a:	bb7fd0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80002a2e:	df9fd0ef          	jal	80000826 <hpt_init>

    /**
     * Setup guest page tables.
     */
    goto_priv(PRIV_VS);
    80002a32:	4509                	li	a0,2
    80002a34:	8aafe0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80002a38:	c7dfd0ef          	jal	800006b4 <vspt_init>
    return *((volatile uint64_t*) addr);
    80002a3c:	4001b7b7          	lui	a5,0x4001b
    80002a40:	078a                	sll	a5,a5,0x2
    80002a42:	0007b983          	ld	s3,0(a5) # 4001b000 <STACK_SIZE+0x3ff1b000>
    80002a46:	001007b7          	lui	a5,0x100
    80002a4a:	06d78793          	add	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002a4e:	07b2                	sll	a5,a5,0xc

    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002a50:	0001b617          	auipc	a2,0x1b
    80002a54:	99060613          	add	a2,a2,-1648 # 8001d3e0 <__func__.1+0x738>
    80002a58:	08200593          	li	a1,130
    80002a5c:	0001a517          	auipc	a0,0x1a
    80002a60:	54c50513          	add	a0,a0,1356 # 8001cfa8 <__func__.1+0x300>
    80002a64:	6380                	ld	s0,0(a5)
    80002a66:	181180ef          	jal	8001b3e6 <printf>
    80002a6a:	0c998863          	beq	s3,s1,80002b3a <two_stage_translation_3+0x158>
    80002a6e:	0001a597          	auipc	a1,0x1a
    80002a72:	51258593          	add	a1,a1,1298 # 8001cf80 <__func__.1+0x2d8>
    80002a76:	0001a517          	auipc	a0,0x1a
    80002a7a:	54a50513          	add	a0,a0,1354 # 8001cfc0 <__func__.1+0x318>
    80002a7e:	169180ef          	jal	8001b3e6 <printf>
    80002a82:	0001a517          	auipc	a0,0x1a
    80002a86:	54650513          	add	a0,a0,1350 # 8001cfc8 <__func__.1+0x320>
    80002a8a:	15d180ef          	jal	8001b3e6 <printf>
    80002a8e:	02900513          	li	a0,41
    80002a92:	027170ef          	jal	8001a2b8 <putchar>
    80002a96:	4529                	li	a0,10
    80002a98:	021170ef          	jal	8001a2b8 <putchar>
    80002a9c:	4401                	li	s0,0
    
    goto_priv(PRIV_VS);
    80002a9e:	4509                	li	a0,2
    80002aa0:	83efe0ef          	jal	80000ade <goto_priv>

    vspt_switch();
    80002aa4:	f17fd0ef          	jal	800009ba <vspt_switch>
    80002aa8:	4001b7b7          	lui	a5,0x4001b
    80002aac:	078a                	sll	a5,a5,0x2
    80002aae:	6384                	ld	s1,0(a5)
    80002ab0:	001007b7          	lui	a5,0x100
    80002ab4:	06d78793          	add	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002ab8:	07b2                	sll	a5,a5,0xc
    check1 = read64(vaddr1) == 0x11;
    check2 = read64(vaddr2) == 0x22;   
    TEST_ASSERT("vs do not change values after changing 1st stage pt when not execute sfence", check1 && check2);
    80002aba:	0001b617          	auipc	a2,0x1b
    80002abe:	aa660613          	add	a2,a2,-1370 # 8001d560 <__func__.1+0x8b8>
    80002ac2:	08200593          	li	a1,130
    80002ac6:	0001a517          	auipc	a0,0x1a
    80002aca:	4e250513          	add	a0,a0,1250 # 8001cfa8 <__func__.1+0x300>
    80002ace:	0007b903          	ld	s2,0(a5)
    80002ad2:	115180ef          	jal	8001b3e6 <printf>
    80002ad6:	47c5                	li	a5,17
    80002ad8:	0af48d63          	beq	s1,a5,80002b92 <two_stage_translation_3+0x1b0>
    80002adc:	0001a597          	auipc	a1,0x1a
    80002ae0:	4a458593          	add	a1,a1,1188 # 8001cf80 <__func__.1+0x2d8>
    80002ae4:	0001a517          	auipc	a0,0x1a
    80002ae8:	4dc50513          	add	a0,a0,1244 # 8001cfc0 <__func__.1+0x318>
    80002aec:	0fb180ef          	jal	8001b3e6 <printf>
    80002af0:	0001a517          	auipc	a0,0x1a
    80002af4:	4d850513          	add	a0,a0,1240 # 8001cfc8 <__func__.1+0x320>
    80002af8:	0ef180ef          	jal	8001b3e6 <printf>
    80002afc:	02900513          	li	a0,41
    80002b00:	7b8170ef          	jal	8001a2b8 <putchar>
    80002b04:	4529                	li	a0,10
    80002b06:	7b2170ef          	jal	8001a2b8 <putchar>
    80002b0a:	4401                	li	s0,0

    TEST_END();
    80002b0c:	0001a597          	auipc	a1,0x1a
    80002b10:	47458593          	add	a1,a1,1140 # 8001cf80 <__func__.1+0x2d8>
    80002b14:	0001a517          	auipc	a0,0x1a
    80002b18:	51450513          	add	a0,a0,1300 # 8001d028 <__func__.1+0x380>
    80002b1c:	0cb180ef          	jal	8001b3e6 <printf>
    80002b20:	4511                	li	a0,4
    80002b22:	fbdfd0ef          	jal	80000ade <goto_priv>
    80002b26:	801fe0ef          	jal	80001326 <reset_state>
}
    80002b2a:	70a2                	ld	ra,40(sp)
    80002b2c:	8522                	mv	a0,s0
    80002b2e:	7402                	ld	s0,32(sp)
    80002b30:	64e2                	ld	s1,24(sp)
    80002b32:	6942                	ld	s2,16(sp)
    80002b34:	69a2                	ld	s3,8(sp)
    80002b36:	6145                	add	sp,sp,48
    80002b38:	8082                	ret
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002b3a:	03240e63          	beq	s0,s2,80002b76 <two_stage_translation_3+0x194>
    80002b3e:	0001a597          	auipc	a1,0x1a
    80002b42:	44258593          	add	a1,a1,1090 # 8001cf80 <__func__.1+0x2d8>
    80002b46:	0001a517          	auipc	a0,0x1a
    80002b4a:	47a50513          	add	a0,a0,1146 # 8001cfc0 <__func__.1+0x318>
    80002b4e:	099180ef          	jal	8001b3e6 <printf>
    80002b52:	0001a517          	auipc	a0,0x1a
    80002b56:	47650513          	add	a0,a0,1142 # 8001cfc8 <__func__.1+0x320>
    80002b5a:	08d180ef          	jal	8001b3e6 <printf>
    80002b5e:	02900513          	li	a0,41
    80002b62:	756170ef          	jal	8001a2b8 <putchar>
    80002b66:	4529                	li	a0,10
    80002b68:	750170ef          	jal	8001a2b8 <putchar>
    80002b6c:	fde40413          	add	s0,s0,-34
    80002b70:	00143413          	seqz	s0,s0
    80002b74:	b72d                	j	80002a9e <two_stage_translation_3+0xbc>
    80002b76:	0001a597          	auipc	a1,0x1a
    80002b7a:	3fa58593          	add	a1,a1,1018 # 8001cf70 <__func__.1+0x2c8>
    80002b7e:	0001a517          	auipc	a0,0x1a
    80002b82:	44250513          	add	a0,a0,1090 # 8001cfc0 <__func__.1+0x318>
    80002b86:	061180ef          	jal	8001b3e6 <printf>
    80002b8a:	4529                	li	a0,10
    80002b8c:	72c170ef          	jal	8001a2b8 <putchar>
    80002b90:	bff1                	j	80002b6c <two_stage_translation_3+0x18a>
    TEST_ASSERT("vs do not change values after changing 1st stage pt when not execute sfence", check1 && check2);
    80002b92:	02200793          	li	a5,34
    80002b96:	f4f913e3          	bne	s2,a5,80002adc <two_stage_translation_3+0xfa>
    80002b9a:	0001a597          	auipc	a1,0x1a
    80002b9e:	3d658593          	add	a1,a1,982 # 8001cf70 <__func__.1+0x2c8>
    80002ba2:	0001a517          	auipc	a0,0x1a
    80002ba6:	41e50513          	add	a0,a0,1054 # 8001cfc0 <__func__.1+0x318>
    80002baa:	03d180ef          	jal	8001b3e6 <printf>
    80002bae:	4529                	li	a0,10
    80002bb0:	708170ef          	jal	8001a2b8 <putchar>
    80002bb4:	d839                	beqz	s0,80002b0a <two_stage_translation_3+0x128>
    80002bb6:	4405                	li	s0,1
    TEST_END();
    80002bb8:	0001a597          	auipc	a1,0x1a
    80002bbc:	3b858593          	add	a1,a1,952 # 8001cf70 <__func__.1+0x2c8>
    80002bc0:	bf91                	j	80002b14 <two_stage_translation_3+0x132>

0000000080002bc2 <second_stage_only_translation>:

bool second_stage_only_translation(){
    80002bc2:	7179                	add	sp,sp,-48

    /**
     * Test only 2nd stage translation.
     */
    TEST_START();
    80002bc4:	00019597          	auipc	a1,0x19
    80002bc8:	dcc58593          	add	a1,a1,-564 # 8001b990 <__func__.15>
    80002bcc:	0001a517          	auipc	a0,0x1a
    80002bd0:	3c450513          	add	a0,a0,964 # 8001cf90 <__func__.1+0x2e8>
bool second_stage_only_translation(){
    80002bd4:	f406                	sd	ra,40(sp)
    80002bd6:	ec26                	sd	s1,24(sp)
    80002bd8:	e84a                	sd	s2,16(sp)
    80002bda:	f022                	sd	s0,32(sp)
    80002bdc:	e44e                	sd	s3,8(sp)
    80002bde:	e052                	sd	s4,0(sp)
    TEST_START();
    80002be0:	007180ef          	jal	8001b3e6 <printf>
    80002be4:	4529                	li	a0,10
    80002be6:	6d2170ef          	jal	8001a2b8 <putchar>
    *((volatile uint64_t*) addr) = val;
    80002bea:	000887b7          	lui	a5,0x88
    80002bee:	2201b737          	lui	a4,0x2201b
    80002bf2:	44c5                	li	s1,17
    80002bf4:	070a                	sll	a4,a4,0x2
    80002bf6:	06d78793          	add	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    80002bfa:	e304                	sd	s1,0(a4)
    80002bfc:	02200913          	li	s2,34
    80002c00:	07b2                	sll	a5,a5,0xc
    80002c02:	0127b023          	sd	s2,0(a5)
    uintptr_t vaddr2 = vs_page_base(SWITCH2);
    write64(addr1, 0x11);
    write64(addr2, 0x22);   


    CSRS(medeleg, (1 << CAUSE_LGPF) | (1 << CAUSE_SGPF));
    80002c06:	00a007b7          	lui	a5,0xa00
    80002c0a:	3027a073          	csrs	medeleg,a5

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    80002c0e:	450d                	li	a0,3
    80002c10:	ecffd0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80002c14:	9cdfd0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80002c18:	c0ffd0ef          	jal	80000826 <hpt_init>
    
    goto_priv(PRIV_VS);
    80002c1c:	4509                	li	a0,2
    80002c1e:	ec1fd0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80002c22:	0ff0000f          	fence
    80002c26:	4785                	li	a5,1
    80002c28:	0003a417          	auipc	s0,0x3a
    80002c2c:	3e840413          	add	s0,s0,1000 # 8003d010 <excpt>
    80002c30:	00f41023          	sh	a5,0(s0)
    80002c34:	0003a797          	auipc	a5,0x3a
    80002c38:	4007ba23          	sd	zero,1044(a5) # 8003d048 <excpt+0x38>
    80002c3c:	0ff0000f          	fence
    return *((volatile uint64_t*) addr);
    80002c40:	001007b7          	lui	a5,0x100
    80002c44:	4001b737          	lui	a4,0x4001b
    80002c48:	06d78793          	add	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002c4c:	07b2                	sll	a5,a5,0xc
    80002c4e:	070a                	sll	a4,a4,0x2
    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    80002c50:	0001a617          	auipc	a2,0x1a
    80002c54:	79060613          	add	a2,a2,1936 # 8001d3e0 <__func__.1+0x738>
    80002c58:	08200593          	li	a1,130
    80002c5c:	0001a517          	auipc	a0,0x1a
    80002c60:	34c50513          	add	a0,a0,844 # 8001cfa8 <__func__.1+0x300>
    80002c64:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    80002c68:	0007ba03          	ld	s4,0(a5)
    80002c6c:	77a180ef          	jal	8001b3e6 <printf>
    80002c70:	00144783          	lbu	a5,1(s0)
    80002c74:	22079163          	bnez	a5,80002e96 <second_stage_only_translation+0x2d4>
    80002c78:	2e998863          	beq	s3,s1,80002f68 <second_stage_only_translation+0x3a6>
    80002c7c:	0001a597          	auipc	a1,0x1a
    80002c80:	30458593          	add	a1,a1,772 # 8001cf80 <__func__.1+0x2d8>
    80002c84:	0001a517          	auipc	a0,0x1a
    80002c88:	33c50513          	add	a0,a0,828 # 8001cfc0 <__func__.1+0x318>
    80002c8c:	75a180ef          	jal	8001b3e6 <printf>
    80002c90:	0001a517          	auipc	a0,0x1a
    80002c94:	33850513          	add	a0,a0,824 # 8001cfc8 <__func__.1+0x320>
    80002c98:	74e180ef          	jal	8001b3e6 <printf>
    80002c9c:	02900513          	li	a0,41
    80002ca0:	618170ef          	jal	8001a2b8 <putchar>
    80002ca4:	4529                	li	a0,10
    80002ca6:	612170ef          	jal	8001a2b8 <putchar>
    80002caa:	4481                	li	s1,0

    goto_priv(PRIV_HS);
    80002cac:	450d                	li	a0,3
    80002cae:	e31fd0ef          	jal	80000ade <goto_priv>
    hpt_switch();       //在nemu中，执行read64没有变，执行hlvd变化了
    80002cb2:	d23fd0ef          	jal	800009d4 <hpt_switch>
    asm volatile(
    80002cb6:	22000073          	.4byte	0x22000073
    asm volatile(
    80002cba:	62000073          	.4byte	0x62000073
    hfence(); //l2tlb
    goto_priv(PRIV_VS);
    80002cbe:	4509                	li	a0,2
    80002cc0:	e1ffd0ef          	jal	80000ade <goto_priv>
    asm volatile ("sfence.vma \n\t");
    80002cc4:	12000073          	sfence.vma
    sfence(); //l1tlb
    TEST_SETUP_EXCEPT();
    80002cc8:	0ff0000f          	fence
    80002ccc:	4785                	li	a5,1
    80002cce:	00f41023          	sh	a5,0(s0)
    80002cd2:	0003a797          	auipc	a5,0x3a
    80002cd6:	3607bb23          	sd	zero,886(a5) # 8003d048 <excpt+0x38>
    80002cda:	0ff0000f          	fence
    80002cde:	001007b7          	lui	a5,0x100
    80002ce2:	4001b737          	lui	a4,0x4001b
    80002ce6:	06d78793          	add	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002cea:	07b2                	sll	a5,a5,0xc
    80002cec:	070a                	sll	a4,a4,0x2
    check1 = read64(vaddr1) == 0x22;
    check2 = read64(vaddr2) == 0x11;   
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    80002cee:	0001b617          	auipc	a2,0x1b
    80002cf2:	8c260613          	add	a2,a2,-1854 # 8001d5b0 <__func__.1+0x908>
    80002cf6:	08200593          	li	a1,130
    80002cfa:	0001a517          	auipc	a0,0x1a
    80002cfe:	2ae50513          	add	a0,a0,686 # 8001cfa8 <__func__.1+0x300>
    80002d02:	00073903          	ld	s2,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    80002d06:	0007b983          	ld	s3,0(a5)
    80002d0a:	6dc180ef          	jal	8001b3e6 <printf>
    80002d0e:	00144783          	lbu	a5,1(s0)
    80002d12:	1e079863          	bnez	a5,80002f02 <second_stage_only_translation+0x340>
    80002d16:	02200793          	li	a5,34
    80002d1a:	28f90e63          	beq	s2,a5,80002fb6 <second_stage_only_translation+0x3f4>
    80002d1e:	0001a597          	auipc	a1,0x1a
    80002d22:	26258593          	add	a1,a1,610 # 8001cf80 <__func__.1+0x2d8>
    80002d26:	0001a517          	auipc	a0,0x1a
    80002d2a:	29a50513          	add	a0,a0,666 # 8001cfc0 <__func__.1+0x318>
    80002d2e:	6b8180ef          	jal	8001b3e6 <printf>
    80002d32:	0001a517          	auipc	a0,0x1a
    80002d36:	29650513          	add	a0,a0,662 # 8001cfc8 <__func__.1+0x320>
    80002d3a:	6ac180ef          	jal	8001b3e6 <printf>
    80002d3e:	02900513          	li	a0,41
    80002d42:	576170ef          	jal	8001a2b8 <putchar>
    80002d46:	4529                	li	a0,10
    80002d48:	570170ef          	jal	8001a2b8 <putchar>
    80002d4c:	c881                	beqz	s1,80002d5c <second_stage_only_translation+0x19a>
    80002d4e:	00144783          	lbu	a5,1(s0)
    80002d52:	e789                	bnez	a5,80002d5c <second_stage_only_translation+0x19a>
    80002d54:	02200793          	li	a5,34
    80002d58:	1ef90363          	beq	s2,a5,80002f3e <second_stage_only_translation+0x37c>
    80002d5c:	4481                	li	s1,0

    TEST_SETUP_EXCEPT();
    80002d5e:	0ff0000f          	fence
    80002d62:	4785                	li	a5,1
    80002d64:	00f41023          	sh	a5,0(s0)
    80002d68:	0003a797          	auipc	a5,0x3a
    80002d6c:	2e07b023          	sd	zero,736(a5) # 8003d048 <excpt+0x38>
    80002d70:	0ff0000f          	fence
    80002d74:	001007b7          	lui	a5,0x100
    80002d78:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80002d7c:	07b2                	sll	a5,a5,0xc
    80002d7e:	639c                	ld	a5,0(a5)
    (void) read64(vs_page_base(VSRWX_GI));  
    TEST_ASSERT(
    80002d80:	08200593          	li	a1,130
    80002d84:	0001b617          	auipc	a2,0x1b
    80002d88:	85460613          	add	a2,a2,-1964 # 8001d5d8 <__func__.1+0x930>
    80002d8c:	0001a517          	auipc	a0,0x1a
    80002d90:	21c50513          	add	a0,a0,540 # 8001cfa8 <__func__.1+0x300>
    80002d94:	652180ef          	jal	8001b3e6 <printf>
    80002d98:	00144783          	lbu	a5,1(s0)
    80002d9c:	0001a597          	auipc	a1,0x1a
    80002da0:	1e458593          	add	a1,a1,484 # 8001cf80 <__func__.1+0x2d8>
    80002da4:	c789                	beqz	a5,80002dae <second_stage_only_translation+0x1ec>
    80002da6:	6418                	ld	a4,8(s0)
    80002da8:	47d5                	li	a5,21
    80002daa:	22f70763          	beq	a4,a5,80002fd8 <second_stage_only_translation+0x416>
    80002dae:	0001a517          	auipc	a0,0x1a
    80002db2:	21250513          	add	a0,a0,530 # 8001cfc0 <__func__.1+0x318>
    80002db6:	630180ef          	jal	8001b3e6 <printf>
    80002dba:	00144783          	lbu	a5,1(s0)
    80002dbe:	c789                	beqz	a5,80002dc8 <second_stage_only_translation+0x206>
    80002dc0:	6418                	ld	a4,8(s0)
    80002dc2:	47d5                	li	a5,21
    80002dc4:	18f70d63          	beq	a4,a5,80002f5e <second_stage_only_translation+0x39c>
    80002dc8:	0001a517          	auipc	a0,0x1a
    80002dcc:	20050513          	add	a0,a0,512 # 8001cfc8 <__func__.1+0x320>
    80002dd0:	616180ef          	jal	8001b3e6 <printf>
    80002dd4:	02900513          	li	a0,41
    80002dd8:	4e0170ef          	jal	8001a2b8 <putchar>
    80002ddc:	4529                	li	a0,10
    80002dde:	4da170ef          	jal	8001a2b8 <putchar>
    80002de2:	c889                	beqz	s1,80002df4 <second_stage_only_translation+0x232>
    80002de4:	00144783          	lbu	a5,1(s0)
    80002de8:	4481                	li	s1,0
    80002dea:	c789                	beqz	a5,80002df4 <second_stage_only_translation+0x232>
    80002dec:	6418                	ld	a4,8(s0)
    80002dee:	47d5                	li	a5,21
    80002df0:	1af70e63          	beq	a4,a5,80002fac <second_stage_only_translation+0x3ea>
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        excpt.priv == PRIV_HS
    );

    TEST_SETUP_EXCEPT();
    80002df4:	0ff0000f          	fence
    80002df8:	4785                	li	a5,1
    80002dfa:	00f41023          	sh	a5,0(s0)
    80002dfe:	0003a797          	auipc	a5,0x3a
    80002e02:	2407b523          	sd	zero,586(a5) # 8003d048 <excpt+0x38>
    80002e06:	0ff0000f          	fence
    80002e0a:	200007b7          	lui	a5,0x20000
    80002e0e:	17fd                	add	a5,a5,-1 # 1fffffff <STACK_SIZE+0x1fefffff>
    80002e10:	07b2                	sll	a5,a5,0xc
    80002e12:	639c                	ld	a5,0(a5)
    read64(vs_page_base_limit(TOP));
    TEST_ASSERT(
    80002e14:	08200593          	li	a1,130
    80002e18:	0001a617          	auipc	a2,0x1a
    80002e1c:	7e860613          	add	a2,a2,2024 # 8001d600 <__func__.1+0x958>
    80002e20:	0001a517          	auipc	a0,0x1a
    80002e24:	18850513          	add	a0,a0,392 # 8001cfa8 <__func__.1+0x300>
    80002e28:	5be180ef          	jal	8001b3e6 <printf>
    80002e2c:	00144783          	lbu	a5,1(s0)
    80002e30:	0001a597          	auipc	a1,0x1a
    80002e34:	15058593          	add	a1,a1,336 # 8001cf80 <__func__.1+0x2d8>
    80002e38:	e789                	bnez	a5,80002e42 <second_stage_only_translation+0x280>
    80002e3a:	0001a597          	auipc	a1,0x1a
    80002e3e:	13658593          	add	a1,a1,310 # 8001cf70 <__func__.1+0x2c8>
    80002e42:	0001a517          	auipc	a0,0x1a
    80002e46:	17e50513          	add	a0,a0,382 # 8001cfc0 <__func__.1+0x318>
    80002e4a:	59c180ef          	jal	8001b3e6 <printf>
    80002e4e:	00144783          	lbu	a5,1(s0)
    80002e52:	0e079b63          	bnez	a5,80002f48 <second_stage_only_translation+0x386>
    80002e56:	4529                	li	a0,10
    80002e58:	460170ef          	jal	8001a2b8 <putchar>
    80002e5c:	ccc9                	beqz	s1,80002ef6 <second_stage_only_translation+0x334>
    80002e5e:	00144783          	lbu	a5,1(s0)
    80002e62:	ebd1                	bnez	a5,80002ef6 <second_stage_only_translation+0x334>
    80002e64:	4405                	li	s0,1
    //     "access top of guest pa space with high bits =/= 0", 
    //     excpt.triggered == true &&
    //     excpt.cause == CAUSE_LGPF
    // ); 

    TEST_END();
    80002e66:	0001a597          	auipc	a1,0x1a
    80002e6a:	10a58593          	add	a1,a1,266 # 8001cf70 <__func__.1+0x2c8>
    80002e6e:	0001a517          	auipc	a0,0x1a
    80002e72:	1ba50513          	add	a0,a0,442 # 8001d028 <__func__.1+0x380>
    80002e76:	570180ef          	jal	8001b3e6 <printf>
    80002e7a:	4511                	li	a0,4
    80002e7c:	c63fd0ef          	jal	80000ade <goto_priv>
    80002e80:	ca6fe0ef          	jal	80001326 <reset_state>
}
    80002e84:	70a2                	ld	ra,40(sp)
    80002e86:	8522                	mv	a0,s0
    80002e88:	7402                	ld	s0,32(sp)
    80002e8a:	64e2                	ld	s1,24(sp)
    80002e8c:	6942                	ld	s2,16(sp)
    80002e8e:	69a2                	ld	s3,8(sp)
    80002e90:	6a02                	ld	s4,0(sp)
    80002e92:	6145                	add	sp,sp,48
    80002e94:	8082                	ret
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    80002e96:	0001a597          	auipc	a1,0x1a
    80002e9a:	0ea58593          	add	a1,a1,234 # 8001cf80 <__func__.1+0x2d8>
    80002e9e:	0001a517          	auipc	a0,0x1a
    80002ea2:	12250513          	add	a0,a0,290 # 8001cfc0 <__func__.1+0x318>
    80002ea6:	540180ef          	jal	8001b3e6 <printf>
    80002eaa:	00144783          	lbu	a5,1(s0)
    80002eae:	e385                	bnez	a5,80002ece <second_stage_only_translation+0x30c>
    80002eb0:	de9990e3          	bne	s3,s1,80002c90 <second_stage_only_translation+0xce>
    80002eb4:	0d2a1663          	bne	s4,s2,80002f80 <second_stage_only_translation+0x3be>
    80002eb8:	4529                	li	a0,10
    80002eba:	3fe170ef          	jal	8001a2b8 <putchar>
    80002ebe:	00144783          	lbu	a5,1(s0)
    80002ec2:	de0794e3          	bnez	a5,80002caa <second_stage_only_translation+0xe8>
    80002ec6:	19bd                	add	s3,s3,-17
    80002ec8:	0019b493          	seqz	s1,s3
    80002ecc:	b3c5                	j	80002cac <second_stage_only_translation+0xea>
    80002ece:	0001a517          	auipc	a0,0x1a
    80002ed2:	0fa50513          	add	a0,a0,250 # 8001cfc8 <__func__.1+0x320>
    80002ed6:	510180ef          	jal	8001b3e6 <printf>
    80002eda:	02900513          	li	a0,41
    80002ede:	3da170ef          	jal	8001a2b8 <putchar>
    80002ee2:	4529                	li	a0,10
    80002ee4:	3d4170ef          	jal	8001a2b8 <putchar>
    80002ee8:	00144783          	lbu	a5,1(s0)
    80002eec:	da079fe3          	bnez	a5,80002caa <second_stage_only_translation+0xe8>
    80002ef0:	da999de3          	bne	s3,s1,80002caa <second_stage_only_translation+0xe8>
    80002ef4:	a07d                	j	80002fa2 <second_stage_only_translation+0x3e0>
    TEST_ASSERT(
    80002ef6:	4401                	li	s0,0
    TEST_END();
    80002ef8:	0001a597          	auipc	a1,0x1a
    80002efc:	08858593          	add	a1,a1,136 # 8001cf80 <__func__.1+0x2d8>
    80002f00:	b7bd                	j	80002e6e <second_stage_only_translation+0x2ac>
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    80002f02:	0001a597          	auipc	a1,0x1a
    80002f06:	07e58593          	add	a1,a1,126 # 8001cf80 <__func__.1+0x2d8>
    80002f0a:	0001a517          	auipc	a0,0x1a
    80002f0e:	0b650513          	add	a0,a0,182 # 8001cfc0 <__func__.1+0x318>
    80002f12:	4d4180ef          	jal	8001b3e6 <printf>
    80002f16:	00144783          	lbu	a5,1(s0)
    80002f1a:	e0079ce3          	bnez	a5,80002d32 <second_stage_only_translation+0x170>
    80002f1e:	02200793          	li	a5,34
    80002f22:	e0f918e3          	bne	s2,a5,80002d32 <second_stage_only_translation+0x170>
    80002f26:	47c5                	li	a5,17
    80002f28:	e0f995e3          	bne	s3,a5,80002d32 <second_stage_only_translation+0x170>
    80002f2c:	4529                	li	a0,10
    80002f2e:	38a170ef          	jal	8001a2b8 <putchar>
    80002f32:	e20485e3          	beqz	s1,80002d5c <second_stage_only_translation+0x19a>
    80002f36:	00144783          	lbu	a5,1(s0)
    80002f3a:	e20791e3          	bnez	a5,80002d5c <second_stage_only_translation+0x19a>
    80002f3e:	fef98493          	add	s1,s3,-17
    80002f42:	0014b493          	seqz	s1,s1
    80002f46:	bd21                	j	80002d5e <second_stage_only_translation+0x19c>
    TEST_ASSERT(
    80002f48:	0001a517          	auipc	a0,0x1a
    80002f4c:	08050513          	add	a0,a0,128 # 8001cfc8 <__func__.1+0x320>
    80002f50:	496180ef          	jal	8001b3e6 <printf>
    80002f54:	02900513          	li	a0,41
    80002f58:	360170ef          	jal	8001a2b8 <putchar>
    80002f5c:	bded                	j	80002e56 <second_stage_only_translation+0x294>
    TEST_ASSERT(
    80002f5e:	4058                	lw	a4,4(s0)
    80002f60:	478d                	li	a5,3
    80002f62:	e6f713e3          	bne	a4,a5,80002dc8 <second_stage_only_translation+0x206>
    80002f66:	bd9d                	j	80002ddc <second_stage_only_translation+0x21a>
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    80002f68:	092a0163          	beq	s4,s2,80002fea <second_stage_only_translation+0x428>
    80002f6c:	0001a597          	auipc	a1,0x1a
    80002f70:	01458593          	add	a1,a1,20 # 8001cf80 <__func__.1+0x2d8>
    80002f74:	0001a517          	auipc	a0,0x1a
    80002f78:	04c50513          	add	a0,a0,76 # 8001cfc0 <__func__.1+0x318>
    80002f7c:	46a180ef          	jal	8001b3e6 <printf>
    80002f80:	0001a517          	auipc	a0,0x1a
    80002f84:	04850513          	add	a0,a0,72 # 8001cfc8 <__func__.1+0x320>
    80002f88:	45e180ef          	jal	8001b3e6 <printf>
    80002f8c:	02900513          	li	a0,41
    80002f90:	328170ef          	jal	8001a2b8 <putchar>
    80002f94:	4529                	li	a0,10
    80002f96:	322170ef          	jal	8001a2b8 <putchar>
    80002f9a:	00144783          	lbu	a5,1(s0)
    80002f9e:	d00796e3          	bnez	a5,80002caa <second_stage_only_translation+0xe8>
    80002fa2:	fdea0493          	add	s1,s4,-34
    80002fa6:	0014b493          	seqz	s1,s1
    80002faa:	b309                	j	80002cac <second_stage_only_translation+0xea>
    TEST_ASSERT(
    80002fac:	4044                	lw	s1,4(s0)
    80002fae:	14f5                	add	s1,s1,-3
    80002fb0:	0014b493          	seqz	s1,s1
    80002fb4:	b581                	j	80002df4 <second_stage_only_translation+0x232>
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    80002fb6:	47c5                	li	a5,17
    80002fb8:	d6f993e3          	bne	s3,a5,80002d1e <second_stage_only_translation+0x15c>
    80002fbc:	0001a597          	auipc	a1,0x1a
    80002fc0:	fb458593          	add	a1,a1,-76 # 8001cf70 <__func__.1+0x2c8>
    80002fc4:	0001a517          	auipc	a0,0x1a
    80002fc8:	ffc50513          	add	a0,a0,-4 # 8001cfc0 <__func__.1+0x318>
    80002fcc:	41a180ef          	jal	8001b3e6 <printf>
    80002fd0:	00144783          	lbu	a5,1(s0)
    80002fd4:	dfa1                	beqz	a5,80002f2c <second_stage_only_translation+0x36a>
    80002fd6:	bbb1                	j	80002d32 <second_stage_only_translation+0x170>
    TEST_ASSERT(
    80002fd8:	4058                	lw	a4,4(s0)
    80002fda:	478d                	li	a5,3
    80002fdc:	dcf719e3          	bne	a4,a5,80002dae <second_stage_only_translation+0x1ec>
    80002fe0:	0001a597          	auipc	a1,0x1a
    80002fe4:	f9058593          	add	a1,a1,-112 # 8001cf70 <__func__.1+0x2c8>
    80002fe8:	b3d9                	j	80002dae <second_stage_only_translation+0x1ec>
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    80002fea:	0001a597          	auipc	a1,0x1a
    80002fee:	f8658593          	add	a1,a1,-122 # 8001cf70 <__func__.1+0x2c8>
    80002ff2:	0001a517          	auipc	a0,0x1a
    80002ff6:	fce50513          	add	a0,a0,-50 # 8001cfc0 <__func__.1+0x318>
    80002ffa:	3ec180ef          	jal	8001b3e6 <printf>
    80002ffe:	00144783          	lbu	a5,1(s0)
    80003002:	ea078be3          	beqz	a5,80002eb8 <second_stage_only_translation+0x2f6>
    80003006:	bfad                	j	80002f80 <second_stage_only_translation+0x3be>

0000000080003008 <m_and_hs_using_vs_access_1>:
    );

}


bool m_and_hs_using_vs_access_1(){
    80003008:	7139                	add	sp,sp,-64

    uint64_t val, valu;
    uintptr_t vaddr = vs_page_base(SCRATCHPAD);
    uintptr_t addr;

    TEST_START();
    8000300a:	00019597          	auipc	a1,0x19
    8000300e:	9a658593          	add	a1,a1,-1626 # 8001b9b0 <__func__.13>
    80003012:	0001a517          	auipc	a0,0x1a
    80003016:	f7e50513          	add	a0,a0,-130 # 8001cf90 <__func__.1+0x2e8>
bool m_and_hs_using_vs_access_1(){
    8000301a:	fc06                	sd	ra,56(sp)
    8000301c:	f822                	sd	s0,48(sp)
    8000301e:	f426                	sd	s1,40(sp)
    80003020:	f04a                	sd	s2,32(sp)
    80003022:	ec4e                	sd	s3,24(sp)
    80003024:	e852                	sd	s4,16(sp)
    80003026:	e456                	sd	s5,8(sp)
    TEST_START();
    80003028:	3be180ef          	jal	8001b3e6 <printf>
    8000302c:	4529                	li	a0,10
    8000302e:	28a170ef          	jal	8001a2b8 <putchar>
    
    hspt_init();
    80003032:	daefd0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80003036:	ff0fd0ef          	jal	80000826 <hpt_init>
    vspt_init();
    8000303a:	e7afd0ef          	jal	800006b4 <vspt_init>

    TEST_SETUP_EXCEPT();
    8000303e:	0ff0000f          	fence
    80003042:	4785                	li	a5,1
    80003044:	0003a417          	auipc	s0,0x3a
    80003048:	fcc40413          	add	s0,s0,-52 # 8003d010 <excpt>
    8000304c:	00f41023          	sh	a5,0(s0)
    80003050:	0003a797          	auipc	a5,0x3a
    80003054:	fe07bc23          	sd	zero,-8(a5) # 8003d048 <excpt+0x38>
    80003058:	0ff0000f          	fence
    if(curr_priv != PRIV_M){
    8000305c:	00022917          	auipc	s2,0x22
    80003060:	5a090913          	add	s2,s2,1440 # 800255fc <curr_priv>
    80003064:	00092483          	lw	s1,0(s2)
    80003068:	4791                	li	a5,4
    8000306a:	02f48763          	beq	s1,a5,80003098 <m_and_hs_using_vs_access_1+0x90>
        ERROR("trying to write as mprv from low privilege");
    8000306e:	0001a517          	auipc	a0,0x1a
    80003072:	5ca50513          	add	a0,a0,1482 # 8001d638 <__func__.1+0x990>
    80003076:	370180ef          	jal	8001b3e6 <printf>
    8000307a:	11100613          	li	a2,273
    8000307e:	00019597          	auipc	a1,0x19
    80003082:	95258593          	add	a1,a1,-1710 # 8001b9d0 <__func__.12>
    80003086:	0001a517          	auipc	a0,0x1a
    8000308a:	09250513          	add	a0,a0,146 # 8001d118 <__func__.1+0x470>
    8000308e:	358180ef          	jal	8001b3e6 <printf>
    80003092:	4501                	li	a0,0
    80003094:	7f1170ef          	jal	8001b084 <exit>
    asm volatile(
    80003098:	001009b7          	lui	s3,0x100
    set_prev_priv(priv);
    8000309c:	4509                	li	a0,2
    asm volatile(
    8000309e:	06b98993          	add	s3,s3,107 # 10006b <STACK_SIZE+0x6b>
    set_prev_priv(priv);
    800030a2:	961fd0ef          	jal	80000a02 <set_prev_priv>
    asm volatile(
    800030a6:	09b2                	sll	s3,s3,0xc
    800030a8:	00020a17          	auipc	s4,0x20
    800030ac:	518a3a03          	ld	s4,1304(s4) # 800235c0 <__func__.1+0x6918>
    800030b0:	00020ab7          	lui	s5,0x20
    800030b4:	300aa073          	csrs	mstatus,s5
    800030b8:	0149b023          	sd	s4,0(s3)
    800030bc:	300ab073          	csrc	mstatus,s5
    if(curr_priv != PRIV_M){
    800030c0:	00092783          	lw	a5,0(s2)
    800030c4:	02978763          	beq	a5,s1,800030f2 <m_and_hs_using_vs_access_1+0xea>
        ERROR("trying to read as mprv from low privilege");
    800030c8:	0001a517          	auipc	a0,0x1a
    800030cc:	5b050513          	add	a0,a0,1456 # 8001d678 <__func__.1+0x9d0>
    800030d0:	316180ef          	jal	8001b3e6 <printf>
    800030d4:	0fe00613          	li	a2,254
    800030d8:	00019597          	auipc	a1,0x19
    800030dc:	90858593          	add	a1,a1,-1784 # 8001b9e0 <__func__.11>
    800030e0:	0001a517          	auipc	a0,0x1a
    800030e4:	03850513          	add	a0,a0,56 # 8001d118 <__func__.1+0x470>
    800030e8:	2fe180ef          	jal	8001b3e6 <printf>
    800030ec:	4501                	li	a0,0
    800030ee:	797170ef          	jal	8001b084 <exit>
    set_prev_priv(priv);
    800030f2:	4509                	li	a0,2
    800030f4:	90ffd0ef          	jal	80000a02 <set_prev_priv>
    asm volatile(
    800030f8:	300aa073          	csrs	mstatus,s5
    800030fc:	0009b483          	ld	s1,0(s3)
    80003100:	300ab073          	csrc	mstatus,s5
    write64_mprv(PRIV_VS, vaddr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine sets mprv to access vs space",
    80003104:	0001a617          	auipc	a2,0x1a
    80003108:	5b460613          	add	a2,a2,1460 # 8001d6b8 <__func__.1+0xa10>
    8000310c:	08200593          	li	a1,130
    80003110:	0001a517          	auipc	a0,0x1a
    80003114:	e9850513          	add	a0,a0,-360 # 8001cfa8 <__func__.1+0x300>
    80003118:	2ce180ef          	jal	8001b3e6 <printf>
    8000311c:	00144783          	lbu	a5,1(s0)
    80003120:	2c079663          	bnez	a5,800033ec <m_and_hs_using_vs_access_1+0x3e4>
    80003124:	43448e63          	beq	s1,s4,80003560 <m_and_hs_using_vs_access_1+0x558>
    80003128:	0001a597          	auipc	a1,0x1a
    8000312c:	e5858593          	add	a1,a1,-424 # 8001cf80 <__func__.1+0x2d8>
    80003130:	0001a517          	auipc	a0,0x1a
    80003134:	e9050513          	add	a0,a0,-368 # 8001cfc0 <__func__.1+0x318>
    80003138:	2ae180ef          	jal	8001b3e6 <printf>
    8000313c:	0001a517          	auipc	a0,0x1a
    80003140:	e8c50513          	add	a0,a0,-372 # 8001cfc8 <__func__.1+0x320>
    80003144:	2a2180ef          	jal	8001b3e6 <printf>
    80003148:	02900513          	li	a0,41
    8000314c:	16c170ef          	jal	8001a2b8 <putchar>
    80003150:	4529                	li	a0,10
    80003152:	166170ef          	jal	8001a2b8 <putchar>
    80003156:	00144783          	lbu	a5,1(s0)
    8000315a:	4981                	li	s3,0
    8000315c:	e789                	bnez	a5,80003166 <m_and_hs_using_vs_access_1+0x15e>
    8000315e:	414484b3          	sub	s1,s1,s4
    80003162:	0014b993          	seqz	s3,s1
        excpt.triggered == false && val == 0x1107ec0ffee
    );

    //TODO: test mprv to access hs space

    goto_priv(PRIV_HS);
    80003166:	450d                	li	a0,3
    80003168:	977fd0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    8000316c:	4509                	li	a0,2
    8000316e:	895fd0ef          	jal	80000a02 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    80003172:	0ff0000f          	fence
    80003176:	4785                	li	a5,1
    80003178:	00f41023          	sh	a5,0(s0)
    8000317c:	0003a797          	auipc	a5,0x3a
    80003180:	ec07b623          	sd	zero,-308(a5) # 8003d048 <excpt+0x38>
    80003184:	0ff0000f          	fence
        :: "r"(value), "r"(addr): "memory");
    return value;
}

static inline uint64_t hsvd(uintptr_t addr, uint64_t value){
    asm volatile(
    80003188:	37ab7937          	lui	s2,0x37ab7
    8000318c:	001007b7          	lui	a5,0x100
    80003190:	090a                	sll	s2,s2,0x2
    80003192:	06b78793          	add	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    80003196:	eef90913          	add	s2,s2,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8000319a:	07b2                	sll	a5,a5,0xc
    8000319c:	6f27c073          	.4byte	0x6f27c073
    asm volatile(
    800031a0:	6c07c4f3          	.4byte	0x6c07c4f3
    hsvd(vaddr, 0xdeadbeef);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd",
    800031a4:	0001a617          	auipc	a2,0x1a
    800031a8:	53c60613          	add	a2,a2,1340 # 8001d6e0 <__func__.1+0xa38>
    800031ac:	08200593          	li	a1,130
    800031b0:	0001a517          	auipc	a0,0x1a
    800031b4:	df850513          	add	a0,a0,-520 # 8001cfa8 <__func__.1+0x300>
    800031b8:	22e180ef          	jal	8001b3e6 <printf>
    800031bc:	00144783          	lbu	a5,1(s0)
    800031c0:	24079e63          	bnez	a5,8000341c <m_and_hs_using_vs_access_1+0x414>
    800031c4:	3b248d63          	beq	s1,s2,8000357e <m_and_hs_using_vs_access_1+0x576>
    800031c8:	0001a597          	auipc	a1,0x1a
    800031cc:	db858593          	add	a1,a1,-584 # 8001cf80 <__func__.1+0x2d8>
    800031d0:	0001a517          	auipc	a0,0x1a
    800031d4:	df050513          	add	a0,a0,-528 # 8001cfc0 <__func__.1+0x318>
    800031d8:	20e180ef          	jal	8001b3e6 <printf>
    800031dc:	0001a517          	auipc	a0,0x1a
    800031e0:	dec50513          	add	a0,a0,-532 # 8001cfc8 <__func__.1+0x320>
    800031e4:	202180ef          	jal	8001b3e6 <printf>
    800031e8:	02900513          	li	a0,41
    800031ec:	0cc170ef          	jal	8001a2b8 <putchar>
    800031f0:	4529                	li	a0,10
    800031f2:	0c6170ef          	jal	8001a2b8 <putchar>
    800031f6:	32099063          	bnez	s3,80003516 <m_and_hs_using_vs_access_1+0x50e>
    800031fa:	4481                	li	s1,0
        excpt.triggered == false && val == 0xdeadbeef
    );

    TEST_SETUP_EXCEPT();
    800031fc:	0ff0000f          	fence
    80003200:	4785                	li	a5,1
    80003202:	00f41023          	sh	a5,0(s0)
    80003206:	0003a797          	auipc	a5,0x3a
    8000320a:	e407b123          	sd	zero,-446(a5) # 8003d048 <excpt+0x38>
    8000320e:	0ff0000f          	fence
    asm volatile(
    80003212:	001007b7          	lui	a5,0x100
    80003216:	06b78793          	add	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    8000321a:	07b2                	sll	a5,a5,0xc
    8000321c:	0ff00993          	li	s3,255
    80003220:	6337c073          	.4byte	0x6337c073
    asm volatile(
    80003224:	6007ca73          	.4byte	0x6007ca73
    asm volatile(
    80003228:	6017c973          	.4byte	0x6017c973
    hsvb(vaddr, ((uint8_t)-1));
    val = hlvb(vaddr);
    valu = hlvbu(vaddr);
    TEST_ASSERT("hs hlvb vs hlvbu",
    8000322c:	0001a617          	auipc	a2,0x1a
    80003230:	4bc60613          	add	a2,a2,1212 # 8001d6e8 <__func__.1+0xa40>
    80003234:	08200593          	li	a1,130
    80003238:	0001a517          	auipc	a0,0x1a
    8000323c:	d7050513          	add	a0,a0,-656 # 8001cfa8 <__func__.1+0x300>
    80003240:	1a6180ef          	jal	8001b3e6 <printf>
    80003244:	00144783          	lbu	a5,1(s0)
    80003248:	28079663          	bnez	a5,800034d4 <m_and_hs_using_vs_access_1+0x4cc>
    8000324c:	57fd                	li	a5,-1
    8000324e:	2efa0963          	beq	s4,a5,80003540 <m_and_hs_using_vs_access_1+0x538>
    80003252:	0001a597          	auipc	a1,0x1a
    80003256:	d2e58593          	add	a1,a1,-722 # 8001cf80 <__func__.1+0x2d8>
    8000325a:	0001a517          	auipc	a0,0x1a
    8000325e:	d6650513          	add	a0,a0,-666 # 8001cfc0 <__func__.1+0x318>
    80003262:	184180ef          	jal	8001b3e6 <printf>
    80003266:	0001a517          	auipc	a0,0x1a
    8000326a:	d6250513          	add	a0,a0,-670 # 8001cfc8 <__func__.1+0x320>
    8000326e:	178180ef          	jal	8001b3e6 <printf>
    80003272:	02900513          	li	a0,41
    80003276:	042170ef          	jal	8001a2b8 <putchar>
    8000327a:	4529                	li	a0,10
    8000327c:	03c170ef          	jal	8001a2b8 <putchar>
    80003280:	c489                	beqz	s1,8000328a <m_and_hs_using_vs_access_1+0x282>
    80003282:	00144783          	lbu	a5,1(s0)
    80003286:	2a078963          	beqz	a5,80003538 <m_and_hs_using_vs_access_1+0x530>
    8000328a:	4481                	li	s1,0
        excpt.triggered == false && val == (-1) && valu == ((uint8_t)-1)
    );

    TEST_SETUP_EXCEPT();
    8000328c:	0ff0000f          	fence
    80003290:	4785                	li	a5,1
    80003292:	00f41023          	sh	a5,0(s0)
    80003296:	0003a797          	auipc	a5,0x3a
    8000329a:	da07b923          	sd	zero,-590(a5) # 8003d048 <excpt+0x38>
    8000329e:	0ff0000f          	fence
    asm volatile(
    800032a2:	001007b7          	lui	a5,0x100
    800032a6:	6941                	lui	s2,0x10
    800032a8:	06b78793          	add	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    800032ac:	197d                	add	s2,s2,-1 # ffff <_test_table_size+0xfffe>
    800032ae:	07b2                	sll	a5,a5,0xc
    800032b0:	6727c073          	.4byte	0x6727c073
    asm volatile(
    800032b4:	6407c9f3          	.4byte	0x6407c9f3
    asm volatile(
    800032b8:	6417ca73          	.4byte	0x6417ca73
    hsvh(vaddr, ((uint16_t)-1));
    val = hlvh(vaddr);
    valu = hlvhu(vaddr);
    TEST_ASSERT("hs hlvh vs hlvhu",
    800032bc:	0001a617          	auipc	a2,0x1a
    800032c0:	44460613          	add	a2,a2,1092 # 8001d700 <__func__.1+0xa58>
    800032c4:	08200593          	li	a1,130
    800032c8:	0001a517          	auipc	a0,0x1a
    800032cc:	ce050513          	add	a0,a0,-800 # 8001cfa8 <__func__.1+0x300>
    800032d0:	116180ef          	jal	8001b3e6 <printf>
    800032d4:	00144783          	lbu	a5,1(s0)
    800032d8:	1a079c63          	bnez	a5,80003490 <m_and_hs_using_vs_access_1+0x488>
    800032dc:	57fd                	li	a5,-1
    800032de:	2ef98063          	beq	s3,a5,800035be <m_and_hs_using_vs_access_1+0x5b6>
    800032e2:	0001a597          	auipc	a1,0x1a
    800032e6:	c9e58593          	add	a1,a1,-866 # 8001cf80 <__func__.1+0x2d8>
    800032ea:	0001a517          	auipc	a0,0x1a
    800032ee:	cd650513          	add	a0,a0,-810 # 8001cfc0 <__func__.1+0x318>
    800032f2:	0f4180ef          	jal	8001b3e6 <printf>
    800032f6:	0001a517          	auipc	a0,0x1a
    800032fa:	cd250513          	add	a0,a0,-814 # 8001cfc8 <__func__.1+0x320>
    800032fe:	0e8180ef          	jal	8001b3e6 <printf>
    80003302:	02900513          	li	a0,41
    80003306:	7b3160ef          	jal	8001a2b8 <putchar>
    8000330a:	4529                	li	a0,10
    8000330c:	7ad160ef          	jal	8001a2b8 <putchar>
    80003310:	c489                	beqz	s1,8000331a <m_and_hs_using_vs_access_1+0x312>
    80003312:	00144783          	lbu	a5,1(s0)
    80003316:	20078d63          	beqz	a5,80003530 <m_and_hs_using_vs_access_1+0x528>
    8000331a:	4981                	li	s3,0
        excpt.triggered == false && val == (-1) && valu == ((uint16_t)-1)
    );

    TEST_SETUP_EXCEPT();
    8000331c:	0ff0000f          	fence
    80003320:	4785                	li	a5,1
    80003322:	00f41023          	sh	a5,0(s0)
    80003326:	0003a797          	auipc	a5,0x3a
    8000332a:	d207b123          	sd	zero,-734(a5) # 8003d048 <excpt+0x38>
    8000332e:	0ff0000f          	fence
    asm volatile(
    80003332:	001007b7          	lui	a5,0x100
    80003336:	597d                	li	s2,-1
    80003338:	06b78793          	add	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    8000333c:	07b2                	sll	a5,a5,0xc
    8000333e:	02095a13          	srl	s4,s2,0x20
    80003342:	6b47c073          	.4byte	0x6b47c073
    asm volatile(
    80003346:	6807caf3          	.4byte	0x6807caf3
    asm volatile(
    8000334a:	6817c4f3          	.4byte	0x6817c4f3
    hsvw(vaddr, ((uint32_t)-1));
    val = hlvw(vaddr);
    valu = hlvwu(vaddr);
    TEST_ASSERT("hs hlvw vs hlvwu",
    8000334e:	0001a617          	auipc	a2,0x1a
    80003352:	3ca60613          	add	a2,a2,970 # 8001d718 <__func__.1+0xa70>
    80003356:	08200593          	li	a1,130
    8000335a:	0001a517          	auipc	a0,0x1a
    8000335e:	c4e50513          	add	a0,a0,-946 # 8001cfa8 <__func__.1+0x300>
    80003362:	084180ef          	jal	8001b3e6 <printf>
    80003366:	00144783          	lbu	a5,1(s0)
    8000336a:	0e079363          	bnez	a5,80003450 <m_and_hs_using_vs_access_1+0x448>
    8000336e:	232a8763          	beq	s5,s2,8000359c <m_and_hs_using_vs_access_1+0x594>
    80003372:	0001a597          	auipc	a1,0x1a
    80003376:	c0e58593          	add	a1,a1,-1010 # 8001cf80 <__func__.1+0x2d8>
    8000337a:	0001a517          	auipc	a0,0x1a
    8000337e:	c4650513          	add	a0,a0,-954 # 8001cfc0 <__func__.1+0x318>
    80003382:	064180ef          	jal	8001b3e6 <printf>
    80003386:	0001a517          	auipc	a0,0x1a
    8000338a:	c4250513          	add	a0,a0,-958 # 8001cfc8 <__func__.1+0x320>
    8000338e:	058180ef          	jal	8001b3e6 <printf>
    80003392:	02900513          	li	a0,41
    80003396:	723160ef          	jal	8001a2b8 <putchar>
    8000339a:	4529                	li	a0,10
    8000339c:	71d160ef          	jal	8001a2b8 <putchar>
    800033a0:	00098c63          	beqz	s3,800033b8 <m_and_hs_using_vs_access_1+0x3b0>
    800033a4:	00144783          	lbu	a5,1(s0)
    800033a8:	eb81                	bnez	a5,800033b8 <m_and_hs_using_vs_access_1+0x3b0>
    800033aa:	57fd                	li	a5,-1
    800033ac:	00fa9663          	bne	s5,a5,800033b8 <m_and_hs_using_vs_access_1+0x3b0>
    800033b0:	020ada93          	srl	s5,s5,0x20
    800033b4:	0d548863          	beq	s1,s5,80003484 <m_and_hs_using_vs_access_1+0x47c>
    800033b8:	4401                	li	s0,0
        excpt.triggered == false && val == (-1) && valu == ((uint32_t)-1)
    );

    TEST_END();
    800033ba:	0001a597          	auipc	a1,0x1a
    800033be:	bc658593          	add	a1,a1,-1082 # 8001cf80 <__func__.1+0x2d8>
    800033c2:	0001a517          	auipc	a0,0x1a
    800033c6:	c6650513          	add	a0,a0,-922 # 8001d028 <__func__.1+0x380>
    800033ca:	01c180ef          	jal	8001b3e6 <printf>
    800033ce:	4511                	li	a0,4
    800033d0:	f0efd0ef          	jal	80000ade <goto_priv>
    800033d4:	f53fd0ef          	jal	80001326 <reset_state>
}
    800033d8:	70e2                	ld	ra,56(sp)
    800033da:	8522                	mv	a0,s0
    800033dc:	7442                	ld	s0,48(sp)
    800033de:	74a2                	ld	s1,40(sp)
    800033e0:	7902                	ld	s2,32(sp)
    800033e2:	69e2                	ld	s3,24(sp)
    800033e4:	6a42                	ld	s4,16(sp)
    800033e6:	6aa2                	ld	s5,8(sp)
    800033e8:	6121                	add	sp,sp,64
    800033ea:	8082                	ret
    TEST_ASSERT("machine sets mprv to access vs space",
    800033ec:	0001a597          	auipc	a1,0x1a
    800033f0:	b9458593          	add	a1,a1,-1132 # 8001cf80 <__func__.1+0x2d8>
    800033f4:	0001a517          	auipc	a0,0x1a
    800033f8:	bcc50513          	add	a0,a0,-1076 # 8001cfc0 <__func__.1+0x318>
    800033fc:	7eb170ef          	jal	8001b3e6 <printf>
    80003400:	00144783          	lbu	a5,1(s0)
    80003404:	d2079ce3          	bnez	a5,8000313c <m_and_hs_using_vs_access_1+0x134>
    80003408:	d3449ae3          	bne	s1,s4,8000313c <m_and_hs_using_vs_access_1+0x134>
    8000340c:	4529                	li	a0,10
    8000340e:	6ab160ef          	jal	8001a2b8 <putchar>
    80003412:	00144983          	lbu	s3,1(s0)
    80003416:	0019c993          	xor	s3,s3,1
    8000341a:	b3b1                	j	80003166 <m_and_hs_using_vs_access_1+0x15e>
    TEST_ASSERT("hs hlvd",
    8000341c:	0001a597          	auipc	a1,0x1a
    80003420:	b6458593          	add	a1,a1,-1180 # 8001cf80 <__func__.1+0x2d8>
    80003424:	0001a517          	auipc	a0,0x1a
    80003428:	b9c50513          	add	a0,a0,-1124 # 8001cfc0 <__func__.1+0x318>
    8000342c:	7bb170ef          	jal	8001b3e6 <printf>
    80003430:	00144783          	lbu	a5,1(s0)
    80003434:	da0794e3          	bnez	a5,800031dc <m_and_hs_using_vs_access_1+0x1d4>
    80003438:	db2492e3          	bne	s1,s2,800031dc <m_and_hs_using_vs_access_1+0x1d4>
    8000343c:	4529                	li	a0,10
    8000343e:	67b160ef          	jal	8001a2b8 <putchar>
    80003442:	da098ce3          	beqz	s3,800031fa <m_and_hs_using_vs_access_1+0x1f2>
    80003446:	00144483          	lbu	s1,1(s0)
    8000344a:	0014c493          	xor	s1,s1,1
    8000344e:	b37d                	j	800031fc <m_and_hs_using_vs_access_1+0x1f4>
    TEST_ASSERT("hs hlvw vs hlvwu",
    80003450:	0001a597          	auipc	a1,0x1a
    80003454:	b3058593          	add	a1,a1,-1232 # 8001cf80 <__func__.1+0x2d8>
    80003458:	0001a517          	auipc	a0,0x1a
    8000345c:	b6850513          	add	a0,a0,-1176 # 8001cfc0 <__func__.1+0x318>
    80003460:	787170ef          	jal	8001b3e6 <printf>
    80003464:	00144783          	lbu	a5,1(s0)
    80003468:	f0079fe3          	bnez	a5,80003386 <m_and_hs_using_vs_access_1+0x37e>
    8000346c:	f12a9de3          	bne	s5,s2,80003386 <m_and_hs_using_vs_access_1+0x37e>
    80003470:	f1449be3          	bne	s1,s4,80003386 <m_and_hs_using_vs_access_1+0x37e>
    80003474:	4529                	li	a0,10
    80003476:	643160ef          	jal	8001a2b8 <putchar>
    8000347a:	f2098fe3          	beqz	s3,800033b8 <m_and_hs_using_vs_access_1+0x3b0>
    8000347e:	00144783          	lbu	a5,1(s0)
    80003482:	fb9d                	bnez	a5,800033b8 <m_and_hs_using_vs_access_1+0x3b0>
    80003484:	4405                	li	s0,1
    TEST_END();
    80003486:	0001a597          	auipc	a1,0x1a
    8000348a:	aea58593          	add	a1,a1,-1302 # 8001cf70 <__func__.1+0x2c8>
    8000348e:	bf15                	j	800033c2 <m_and_hs_using_vs_access_1+0x3ba>
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003490:	0001a597          	auipc	a1,0x1a
    80003494:	af058593          	add	a1,a1,-1296 # 8001cf80 <__func__.1+0x2d8>
    80003498:	0001a517          	auipc	a0,0x1a
    8000349c:	b2850513          	add	a0,a0,-1240 # 8001cfc0 <__func__.1+0x318>
    800034a0:	747170ef          	jal	8001b3e6 <printf>
    800034a4:	00144783          	lbu	a5,1(s0)
    800034a8:	e40797e3          	bnez	a5,800032f6 <m_and_hs_using_vs_access_1+0x2ee>
    800034ac:	57fd                	li	a5,-1
    800034ae:	e4f994e3          	bne	s3,a5,800032f6 <m_and_hs_using_vs_access_1+0x2ee>
    800034b2:	e52a12e3          	bne	s4,s2,800032f6 <m_and_hs_using_vs_access_1+0x2ee>
    800034b6:	4529                	li	a0,10
    800034b8:	601160ef          	jal	8001a2b8 <putchar>
    800034bc:	e4048fe3          	beqz	s1,8000331a <m_and_hs_using_vs_access_1+0x312>
    800034c0:	00144783          	lbu	a5,1(s0)
    800034c4:	e4079be3          	bnez	a5,8000331a <m_and_hs_using_vs_access_1+0x312>
    800034c8:	79c1                	lui	s3,0xffff0
    800034ca:	0985                	add	s3,s3,1 # ffffffffffff0001 <__stack_top+0xffffffff7fcf1001>
    800034cc:	99d2                	add	s3,s3,s4
    800034ce:	0019b993          	seqz	s3,s3
    800034d2:	b5a9                	j	8000331c <m_and_hs_using_vs_access_1+0x314>
    TEST_ASSERT("hs hlvb vs hlvbu",
    800034d4:	0001a597          	auipc	a1,0x1a
    800034d8:	aac58593          	add	a1,a1,-1364 # 8001cf80 <__func__.1+0x2d8>
    800034dc:	0001a517          	auipc	a0,0x1a
    800034e0:	ae450513          	add	a0,a0,-1308 # 8001cfc0 <__func__.1+0x318>
    800034e4:	703170ef          	jal	8001b3e6 <printf>
    800034e8:	00144783          	lbu	a5,1(s0)
    800034ec:	d6079de3          	bnez	a5,80003266 <m_and_hs_using_vs_access_1+0x25e>
    800034f0:	57fd                	li	a5,-1
    800034f2:	d6fa1ae3          	bne	s4,a5,80003266 <m_and_hs_using_vs_access_1+0x25e>
    800034f6:	d73918e3          	bne	s2,s3,80003266 <m_and_hs_using_vs_access_1+0x25e>
    800034fa:	4529                	li	a0,10
    800034fc:	5bd160ef          	jal	8001a2b8 <putchar>
    80003500:	d80485e3          	beqz	s1,8000328a <m_and_hs_using_vs_access_1+0x282>
    80003504:	00144783          	lbu	a5,1(s0)
    80003508:	d80791e3          	bnez	a5,8000328a <m_and_hs_using_vs_access_1+0x282>
    8000350c:	f0190793          	add	a5,s2,-255
    80003510:	0017b493          	seqz	s1,a5
    80003514:	bba5                	j	8000328c <m_and_hs_using_vs_access_1+0x284>
    TEST_ASSERT("hs hlvd",
    80003516:	00144783          	lbu	a5,1(s0)
    8000351a:	ce0790e3          	bnez	a5,800031fa <m_and_hs_using_vs_access_1+0x1f2>
    8000351e:	c85497b7          	lui	a5,0xc8549
    80003522:	078a                	sll	a5,a5,0x2
    80003524:	11178793          	add	a5,a5,273 # ffffffffc8549111 <__stack_top+0xffffffff4824a111>
    80003528:	94be                	add	s1,s1,a5
    8000352a:	0014b493          	seqz	s1,s1
    8000352e:	b1f9                	j	800031fc <m_and_hs_using_vs_access_1+0x1f4>
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003530:	57fd                	li	a5,-1
    80003532:	def994e3          	bne	s3,a5,8000331a <m_and_hs_using_vs_access_1+0x312>
    80003536:	bf49                	j	800034c8 <m_and_hs_using_vs_access_1+0x4c0>
    TEST_ASSERT("hs hlvb vs hlvbu",
    80003538:	57fd                	li	a5,-1
    8000353a:	d4fa18e3          	bne	s4,a5,8000328a <m_and_hs_using_vs_access_1+0x282>
    8000353e:	b7f9                	j	8000350c <m_and_hs_using_vs_access_1+0x504>
    80003540:	d13919e3          	bne	s2,s3,80003252 <m_and_hs_using_vs_access_1+0x24a>
    80003544:	0001a597          	auipc	a1,0x1a
    80003548:	a2c58593          	add	a1,a1,-1492 # 8001cf70 <__func__.1+0x2c8>
    8000354c:	0001a517          	auipc	a0,0x1a
    80003550:	a7450513          	add	a0,a0,-1420 # 8001cfc0 <__func__.1+0x318>
    80003554:	693170ef          	jal	8001b3e6 <printf>
    80003558:	00144783          	lbu	a5,1(s0)
    8000355c:	dfd9                	beqz	a5,800034fa <m_and_hs_using_vs_access_1+0x4f2>
    8000355e:	b321                	j	80003266 <m_and_hs_using_vs_access_1+0x25e>
    TEST_ASSERT("machine sets mprv to access vs space",
    80003560:	0001a597          	auipc	a1,0x1a
    80003564:	a1058593          	add	a1,a1,-1520 # 8001cf70 <__func__.1+0x2c8>
    80003568:	0001a517          	auipc	a0,0x1a
    8000356c:	a5850513          	add	a0,a0,-1448 # 8001cfc0 <__func__.1+0x318>
    80003570:	677170ef          	jal	8001b3e6 <printf>
    80003574:	00144783          	lbu	a5,1(s0)
    80003578:	bc078ce3          	beqz	a5,80003150 <m_and_hs_using_vs_access_1+0x148>
    8000357c:	b6c1                	j	8000313c <m_and_hs_using_vs_access_1+0x134>
    TEST_ASSERT("hs hlvd",
    8000357e:	0001a597          	auipc	a1,0x1a
    80003582:	9f258593          	add	a1,a1,-1550 # 8001cf70 <__func__.1+0x2c8>
    80003586:	0001a517          	auipc	a0,0x1a
    8000358a:	a3a50513          	add	a0,a0,-1478 # 8001cfc0 <__func__.1+0x318>
    8000358e:	659170ef          	jal	8001b3e6 <printf>
    80003592:	00144783          	lbu	a5,1(s0)
    80003596:	ea0783e3          	beqz	a5,8000343c <m_and_hs_using_vs_access_1+0x434>
    8000359a:	b189                	j	800031dc <m_and_hs_using_vs_access_1+0x1d4>
    TEST_ASSERT("hs hlvw vs hlvwu",
    8000359c:	dd449be3          	bne	s1,s4,80003372 <m_and_hs_using_vs_access_1+0x36a>
    800035a0:	0001a597          	auipc	a1,0x1a
    800035a4:	9d058593          	add	a1,a1,-1584 # 8001cf70 <__func__.1+0x2c8>
    800035a8:	0001a517          	auipc	a0,0x1a
    800035ac:	a1850513          	add	a0,a0,-1512 # 8001cfc0 <__func__.1+0x318>
    800035b0:	637170ef          	jal	8001b3e6 <printf>
    800035b4:	00144783          	lbu	a5,1(s0)
    800035b8:	ea078ee3          	beqz	a5,80003474 <m_and_hs_using_vs_access_1+0x46c>
    800035bc:	b3e9                	j	80003386 <m_and_hs_using_vs_access_1+0x37e>
    TEST_ASSERT("hs hlvh vs hlvhu",
    800035be:	d32a12e3          	bne	s4,s2,800032e2 <m_and_hs_using_vs_access_1+0x2da>
    800035c2:	0001a597          	auipc	a1,0x1a
    800035c6:	9ae58593          	add	a1,a1,-1618 # 8001cf70 <__func__.1+0x2c8>
    800035ca:	0001a517          	auipc	a0,0x1a
    800035ce:	9f650513          	add	a0,a0,-1546 # 8001cfc0 <__func__.1+0x318>
    800035d2:	615170ef          	jal	8001b3e6 <printf>
    800035d6:	00144783          	lbu	a5,1(s0)
    800035da:	ec078ee3          	beqz	a5,800034b6 <m_and_hs_using_vs_access_1+0x4ae>
    800035de:	bb21                	j	800032f6 <m_and_hs_using_vs_access_1+0x2ee>

00000000800035e0 <m_and_hs_using_vs_access_2>:
     * hlvx instruction but on a previous lui instruction. 
     * TODO: find out why
     */


bool m_and_hs_using_vs_access_2(){
    800035e0:	1101                	add	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    800035e2:	00018597          	auipc	a1,0x18
    800035e6:	40e58593          	add	a1,a1,1038 # 8001b9f0 <__func__.10>
    800035ea:	0001a517          	auipc	a0,0x1a
    800035ee:	9a650513          	add	a0,a0,-1626 # 8001cf90 <__func__.1+0x2e8>
bool m_and_hs_using_vs_access_2(){
    800035f2:	ec06                	sd	ra,24(sp)
    800035f4:	e822                	sd	s0,16(sp)
    800035f6:	e426                	sd	s1,8(sp)
    800035f8:	e04a                	sd	s2,0(sp)
    TEST_START();
    800035fa:	5ed170ef          	jal	8001b3e6 <printf>
    800035fe:	4529                	li	a0,10
    80003600:	4b9160ef          	jal	8001a2b8 <putchar>
    
    hspt_init();
    80003604:	fddfc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80003608:	a1efd0ef          	jal	80000826 <hpt_init>
    vspt_init();
    8000360c:	8a8fd0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_HS);
    80003610:	450d                	li	a0,3
    80003612:	cccfd0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80003616:	4509                	li	a0,2
    80003618:	beafd0ef          	jal	80000a02 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    8000361c:	0ff0000f          	fence
    80003620:	4785                	li	a5,1
    80003622:	0003a417          	auipc	s0,0x3a
    80003626:	9ee40413          	add	s0,s0,-1554 # 8003d010 <excpt>
    8000362a:	00f41023          	sh	a5,0(s0)
    8000362e:	0003a797          	auipc	a5,0x3a
    80003632:	a007bd23          	sd	zero,-1510(a5) # 8003d048 <excpt+0x38>
    80003636:	0ff0000f          	fence
    asm volatile(
    8000363a:	200037b7          	lui	a5,0x20003
    8000363e:	078e                	sll	a5,a5,0x3
    80003640:	6837c7f3          	.4byte	0x6837c7f3
    val = hlvxwu(vs_page_base(VSX_GUX));
    TEST_ASSERT("hs hlvxwu accesses on only execute page",
    80003644:	08200593          	li	a1,130
    80003648:	0001a617          	auipc	a2,0x1a
    8000364c:	0e860613          	add	a2,a2,232 # 8001d730 <__func__.1+0xa88>
    80003650:	0001a517          	auipc	a0,0x1a
    80003654:	95850513          	add	a0,a0,-1704 # 8001cfa8 <__func__.1+0x300>
    80003658:	58f170ef          	jal	8001b3e6 <printf>
    8000365c:	00144783          	lbu	a5,1(s0)
    80003660:	0001a597          	auipc	a1,0x1a
    80003664:	91058593          	add	a1,a1,-1776 # 8001cf70 <__func__.1+0x2c8>
    80003668:	c789                	beqz	a5,80003672 <m_and_hs_using_vs_access_2+0x92>
    8000366a:	0001a597          	auipc	a1,0x1a
    8000366e:	91658593          	add	a1,a1,-1770 # 8001cf80 <__func__.1+0x2d8>
    80003672:	0001a517          	auipc	a0,0x1a
    80003676:	94e50513          	add	a0,a0,-1714 # 8001cfc0 <__func__.1+0x318>
    8000367a:	56d170ef          	jal	8001b3e6 <printf>
    8000367e:	00144783          	lbu	a5,1(s0)
    80003682:	22079563          	bnez	a5,800038ac <m_and_hs_using_vs_access_2+0x2cc>
    80003686:	4529                	li	a0,10
    80003688:	431160ef          	jal	8001a2b8 <putchar>
    8000368c:	00144903          	lbu	s2,1(s0)
        excpt.triggered == false
    );

    TEST_SETUP_EXCEPT();
    80003690:	0ff0000f          	fence
    80003694:	4785                	li	a5,1
    80003696:	00f41023          	sh	a5,0(s0)
    8000369a:	0003a717          	auipc	a4,0x3a
    8000369e:	9a073723          	sd	zero,-1618(a4) # 8003d048 <excpt+0x38>
    800036a2:	0ff0000f          	fence
    800036a6:	1782                	sll	a5,a5,0x20
    800036a8:	6837c7f3          	.4byte	0x6837c7f3
    val = hlvxwu(vs_page_base(VSRWX_GURWX));
    TEST_ASSERT("hs hlvxwu accesses page with all permissions",
    800036ac:	08200593          	li	a1,130
    800036b0:	0001a617          	auipc	a2,0x1a
    800036b4:	0a860613          	add	a2,a2,168 # 8001d758 <__func__.1+0xab0>
    800036b8:	0001a517          	auipc	a0,0x1a
    800036bc:	8f050513          	add	a0,a0,-1808 # 8001cfa8 <__func__.1+0x300>
    800036c0:	527170ef          	jal	8001b3e6 <printf>
    800036c4:	00144783          	lbu	a5,1(s0)
    800036c8:	0001a597          	auipc	a1,0x1a
    800036cc:	8b858593          	add	a1,a1,-1864 # 8001cf80 <__func__.1+0x2d8>
    800036d0:	e789                	bnez	a5,800036da <m_and_hs_using_vs_access_2+0xfa>
    800036d2:	0001a597          	auipc	a1,0x1a
    800036d6:	89e58593          	add	a1,a1,-1890 # 8001cf70 <__func__.1+0x2c8>
    800036da:	0001a517          	auipc	a0,0x1a
    800036de:	8e650513          	add	a0,a0,-1818 # 8001cfc0 <__func__.1+0x318>
    800036e2:	505170ef          	jal	8001b3e6 <printf>
    800036e6:	00144783          	lbu	a5,1(s0)
    800036ea:	1a079663          	bnez	a5,80003896 <m_and_hs_using_vs_access_2+0x2b6>
    800036ee:	4529                	li	a0,10
    800036f0:	3c9160ef          	jal	8001a2b8 <putchar>
    800036f4:	4481                	li	s1,0
    800036f6:	00091663          	bnez	s2,80003702 <m_and_hs_using_vs_access_2+0x122>
    800036fa:	00144483          	lbu	s1,1(s0)
    800036fe:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    );

    TEST_SETUP_EXCEPT();
    80003702:	0ff0000f          	fence
    80003706:	4785                	li	a5,1
    80003708:	00f41023          	sh	a5,0(s0)
    8000370c:	0003a797          	auipc	a5,0x3a
    80003710:	9207be23          	sd	zero,-1732(a5) # 8003d048 <excpt+0x38>
    80003714:	0ff0000f          	fence
    80003718:	001007b7          	lui	a5,0x100
    8000371c:	0785                	add	a5,a5,1 # 100001 <STACK_SIZE+0x1>
    8000371e:	07b2                	sll	a5,a5,0xc
    80003720:	6837c7f3          	.4byte	0x6837c7f3
    val = hlvxwu(vs_page_base(VSRWX_GURW));
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003724:	08200593          	li	a1,130
    80003728:	0001a617          	auipc	a2,0x1a
    8000372c:	06060613          	add	a2,a2,96 # 8001d788 <__func__.1+0xae0>
    80003730:	0001a517          	auipc	a0,0x1a
    80003734:	87850513          	add	a0,a0,-1928 # 8001cfa8 <__func__.1+0x300>
    80003738:	4af170ef          	jal	8001b3e6 <printf>
    8000373c:	00144783          	lbu	a5,1(s0)
    80003740:	0001a597          	auipc	a1,0x1a
    80003744:	84058593          	add	a1,a1,-1984 # 8001cf80 <__func__.1+0x2d8>
    80003748:	c789                	beqz	a5,80003752 <m_and_hs_using_vs_access_2+0x172>
    8000374a:	6418                	ld	a4,8(s0)
    8000374c:	47d5                	li	a5,21
    8000374e:	18f70763          	beq	a4,a5,800038dc <m_and_hs_using_vs_access_2+0x2fc>
    80003752:	0001a517          	auipc	a0,0x1a
    80003756:	86e50513          	add	a0,a0,-1938 # 8001cfc0 <__func__.1+0x318>
    8000375a:	48d170ef          	jal	8001b3e6 <printf>
    8000375e:	00144783          	lbu	a5,1(s0)
    80003762:	c789                	beqz	a5,8000376c <m_and_hs_using_vs_access_2+0x18c>
    80003764:	6418                	ld	a4,8(s0)
    80003766:	47d5                	li	a5,21
    80003768:	10f70e63          	beq	a4,a5,80003884 <m_and_hs_using_vs_access_2+0x2a4>
    8000376c:	0001a517          	auipc	a0,0x1a
    80003770:	85c50513          	add	a0,a0,-1956 # 8001cfc8 <__func__.1+0x320>
    80003774:	473170ef          	jal	8001b3e6 <printf>
    80003778:	02900513          	li	a0,41
    8000377c:	33d160ef          	jal	8001a2b8 <putchar>
    80003780:	4529                	li	a0,10
    80003782:	337160ef          	jal	8001a2b8 <putchar>
    80003786:	c489                	beqz	s1,80003790 <m_and_hs_using_vs_access_2+0x1b0>
    80003788:	00144783          	lbu	a5,1(s0)
    8000378c:	4481                	li	s1,0
    8000378e:	ebe1                	bnez	a5,8000385e <m_and_hs_using_vs_access_2+0x27e>
        excpt.cause == CAUSE_LGPF && 
        excpt.gva == true &&
        excpt.xpv == false
    );

    TEST_SETUP_EXCEPT();
    80003790:	0ff0000f          	fence
    80003794:	4785                	li	a5,1
    80003796:	00f41023          	sh	a5,0(s0)
    8000379a:	0003a797          	auipc	a5,0x3a
    8000379e:	8a07b723          	sd	zero,-1874(a5) # 8003d048 <excpt+0x38>
    800037a2:	0ff0000f          	fence
    800037a6:	001007b7          	lui	a5,0x100
    800037aa:	0795                	add	a5,a5,5 # 100005 <STACK_SIZE+0x5>
    800037ac:	07b2                	sll	a5,a5,0xc
    800037ae:	6837c7f3          	.4byte	0x6837c7f3
    val = hlvxwu(vs_page_base(VSRW_GURWX));
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    800037b2:	08200593          	li	a1,130
    800037b6:	0001a617          	auipc	a2,0x1a
    800037ba:	00a60613          	add	a2,a2,10 # 8001d7c0 <__func__.1+0xb18>
    800037be:	00019517          	auipc	a0,0x19
    800037c2:	7ea50513          	add	a0,a0,2026 # 8001cfa8 <__func__.1+0x300>
    800037c6:	421170ef          	jal	8001b3e6 <printf>
    800037ca:	00144783          	lbu	a5,1(s0)
    800037ce:	00019597          	auipc	a1,0x19
    800037d2:	7b258593          	add	a1,a1,1970 # 8001cf80 <__func__.1+0x2d8>
    800037d6:	c789                	beqz	a5,800037e0 <m_and_hs_using_vs_access_2+0x200>
    800037d8:	6418                	ld	a4,8(s0)
    800037da:	47b5                	li	a5,13
    800037dc:	0ef70363          	beq	a4,a5,800038c2 <m_and_hs_using_vs_access_2+0x2e2>
    800037e0:	00019517          	auipc	a0,0x19
    800037e4:	7e050513          	add	a0,a0,2016 # 8001cfc0 <__func__.1+0x318>
    800037e8:	3ff170ef          	jal	8001b3e6 <printf>
    800037ec:	00144783          	lbu	a5,1(s0)
    800037f0:	c789                	beqz	a5,800037fa <m_and_hs_using_vs_access_2+0x21a>
    800037f2:	6418                	ld	a4,8(s0)
    800037f4:	47b5                	li	a5,13
    800037f6:	08f70063          	beq	a4,a5,80003876 <m_and_hs_using_vs_access_2+0x296>
    800037fa:	00019517          	auipc	a0,0x19
    800037fe:	7ce50513          	add	a0,a0,1998 # 8001cfc8 <__func__.1+0x320>
    80003802:	3e5170ef          	jal	8001b3e6 <printf>
    80003806:	02900513          	li	a0,41
    8000380a:	2af160ef          	jal	8001a2b8 <putchar>
    8000380e:	4529                	li	a0,10
    80003810:	2a9160ef          	jal	8001a2b8 <putchar>
    80003814:	cc9d                	beqz	s1,80003852 <m_and_hs_using_vs_access_2+0x272>
    80003816:	00144483          	lbu	s1,1(s0)
        excpt.gva == true &&
        excpt.xpv == false
    );

    
    TEST_END();
    8000381a:	00019597          	auipc	a1,0x19
    8000381e:	76658593          	add	a1,a1,1894 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003822:	c491                	beqz	s1,8000382e <m_and_hs_using_vs_access_2+0x24e>
    80003824:	6418                	ld	a4,8(s0)
    80003826:	47b5                	li	a5,13
    80003828:	4481                	li	s1,0
    8000382a:	0cf70663          	beq	a4,a5,800038f6 <m_and_hs_using_vs_access_2+0x316>
    TEST_END();
    8000382e:	00019517          	auipc	a0,0x19
    80003832:	7fa50513          	add	a0,a0,2042 # 8001d028 <__func__.1+0x380>
    80003836:	3b1170ef          	jal	8001b3e6 <printf>
    8000383a:	4511                	li	a0,4
    8000383c:	aa2fd0ef          	jal	80000ade <goto_priv>
    80003840:	ae7fd0ef          	jal	80001326 <reset_state>
}
    80003844:	60e2                	ld	ra,24(sp)
    80003846:	6442                	ld	s0,16(sp)
    80003848:	6902                	ld	s2,0(sp)
    8000384a:	8526                	mv	a0,s1
    8000384c:	64a2                	ld	s1,8(sp)
    8000384e:	6105                	add	sp,sp,32
    80003850:	8082                	ret
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003852:	4481                	li	s1,0
    TEST_END();
    80003854:	00019597          	auipc	a1,0x19
    80003858:	72c58593          	add	a1,a1,1836 # 8001cf80 <__func__.1+0x2d8>
    8000385c:	bfc9                	j	8000382e <m_and_hs_using_vs_access_2+0x24e>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    8000385e:	6418                	ld	a4,8(s0)
    80003860:	47d5                	li	a5,21
    80003862:	f2f717e3          	bne	a4,a5,80003790 <m_and_hs_using_vs_access_2+0x1b0>
    80003866:	03044783          	lbu	a5,48(s0)
    8000386a:	d39d                	beqz	a5,80003790 <m_and_hs_using_vs_access_2+0x1b0>
    8000386c:	03144483          	lbu	s1,49(s0)
    80003870:	0014c493          	xor	s1,s1,1
    80003874:	bf31                	j	80003790 <m_and_hs_using_vs_access_2+0x1b0>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003876:	03044783          	lbu	a5,48(s0)
    8000387a:	d3c1                	beqz	a5,800037fa <m_and_hs_using_vs_access_2+0x21a>
    8000387c:	03144783          	lbu	a5,49(s0)
    80003880:	d7d9                	beqz	a5,8000380e <m_and_hs_using_vs_access_2+0x22e>
    80003882:	bfa5                	j	800037fa <m_and_hs_using_vs_access_2+0x21a>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003884:	03044783          	lbu	a5,48(s0)
    80003888:	ee0782e3          	beqz	a5,8000376c <m_and_hs_using_vs_access_2+0x18c>
    8000388c:	03144783          	lbu	a5,49(s0)
    80003890:	ee0788e3          	beqz	a5,80003780 <m_and_hs_using_vs_access_2+0x1a0>
    80003894:	bde1                	j	8000376c <m_and_hs_using_vs_access_2+0x18c>
    TEST_ASSERT("hs hlvxwu accesses page with all permissions",
    80003896:	00019517          	auipc	a0,0x19
    8000389a:	73250513          	add	a0,a0,1842 # 8001cfc8 <__func__.1+0x320>
    8000389e:	349170ef          	jal	8001b3e6 <printf>
    800038a2:	02900513          	li	a0,41
    800038a6:	213160ef          	jal	8001a2b8 <putchar>
    800038aa:	b591                	j	800036ee <m_and_hs_using_vs_access_2+0x10e>
    TEST_ASSERT("hs hlvxwu accesses on only execute page",
    800038ac:	00019517          	auipc	a0,0x19
    800038b0:	71c50513          	add	a0,a0,1820 # 8001cfc8 <__func__.1+0x320>
    800038b4:	333170ef          	jal	8001b3e6 <printf>
    800038b8:	02900513          	li	a0,41
    800038bc:	1fd160ef          	jal	8001a2b8 <putchar>
    800038c0:	b3d9                	j	80003686 <m_and_hs_using_vs_access_2+0xa6>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    800038c2:	03044783          	lbu	a5,48(s0)
    800038c6:	f0078de3          	beqz	a5,800037e0 <m_and_hs_using_vs_access_2+0x200>
    800038ca:	03144783          	lbu	a5,49(s0)
    800038ce:	f00799e3          	bnez	a5,800037e0 <m_and_hs_using_vs_access_2+0x200>
    800038d2:	00019597          	auipc	a1,0x19
    800038d6:	69e58593          	add	a1,a1,1694 # 8001cf70 <__func__.1+0x2c8>
    800038da:	b719                	j	800037e0 <m_and_hs_using_vs_access_2+0x200>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    800038dc:	03044783          	lbu	a5,48(s0)
    800038e0:	e60789e3          	beqz	a5,80003752 <m_and_hs_using_vs_access_2+0x172>
    800038e4:	03144783          	lbu	a5,49(s0)
    800038e8:	e60795e3          	bnez	a5,80003752 <m_and_hs_using_vs_access_2+0x172>
    800038ec:	00019597          	auipc	a1,0x19
    800038f0:	68458593          	add	a1,a1,1668 # 8001cf70 <__func__.1+0x2c8>
    800038f4:	bdb9                	j	80003752 <m_and_hs_using_vs_access_2+0x172>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    800038f6:	03044483          	lbu	s1,48(s0)
    800038fa:	d895                	beqz	s1,8000382e <m_and_hs_using_vs_access_2+0x24e>
    800038fc:	03144783          	lbu	a5,49(s0)
    80003900:	e791                	bnez	a5,8000390c <m_and_hs_using_vs_access_2+0x32c>
    TEST_END();
    80003902:	00019597          	auipc	a1,0x19
    80003906:	66e58593          	add	a1,a1,1646 # 8001cf70 <__func__.1+0x2c8>
    8000390a:	b715                	j	8000382e <m_and_hs_using_vs_access_2+0x24e>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    8000390c:	4481                	li	s1,0
    8000390e:	b705                	j	8000382e <m_and_hs_using_vs_access_2+0x24e>

0000000080003910 <m_and_hs_using_vs_access_3>:

bool m_and_hs_using_vs_access_3(){
    80003910:	7179                	add	sp,sp,-48

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80003912:	00018597          	auipc	a1,0x18
    80003916:	0fe58593          	add	a1,a1,254 # 8001ba10 <__func__.9>
    8000391a:	00019517          	auipc	a0,0x19
    8000391e:	67650513          	add	a0,a0,1654 # 8001cf90 <__func__.1+0x2e8>
bool m_and_hs_using_vs_access_3(){
    80003922:	f406                	sd	ra,40(sp)
    80003924:	f022                	sd	s0,32(sp)
    80003926:	ec26                	sd	s1,24(sp)
    80003928:	e84a                	sd	s2,16(sp)
    8000392a:	e44e                	sd	s3,8(sp)
    TEST_START();
    8000392c:	2bb170ef          	jal	8001b3e6 <printf>
    80003930:	4529                	li	a0,10
    80003932:	187160ef          	jal	8001a2b8 <putchar>
    
    hspt_init();
    80003936:	cabfc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    8000393a:	eedfc0ef          	jal	80000826 <hpt_init>
    vspt_init();
    8000393e:	d77fc0ef          	jal	800006b4 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    goto_priv(PRIV_M);
    80003942:	4511                	li	a0,4
    80003944:	99afd0ef          	jal	80000ade <goto_priv>

    TEST_SETUP_EXCEPT();
    80003948:	0ff0000f          	fence
    8000394c:	4785                	li	a5,1
    8000394e:	00039417          	auipc	s0,0x39
    80003952:	6c240413          	add	s0,s0,1730 # 8003d010 <excpt>
    80003956:	00f41023          	sh	a5,0(s0)
    8000395a:	00039797          	auipc	a5,0x39
    8000395e:	6e07b723          	sd	zero,1774(a5) # 8003d048 <excpt+0x38>
    80003962:	0ff0000f          	fence
    *((volatile uint64_t*) addr) = val;
    80003966:	00020917          	auipc	s2,0x20
    8000396a:	c5a90913          	add	s2,s2,-934 # 800235c0 <__func__.1+0x6918>
    8000396e:	00093703          	ld	a4,0(s2)
    80003972:	440197b7          	lui	a5,0x44019
    80003976:	0786                	sll	a5,a5,0x1
    if(curr_priv != PRIV_M){
    80003978:	00022497          	auipc	s1,0x22
    8000397c:	c8448493          	add	s1,s1,-892 # 800255fc <curr_priv>
    80003980:	e398                	sd	a4,0(a5)
    80003982:	4098                	lw	a4,0(s1)
    80003984:	4791                	li	a5,4
    80003986:	02f70763          	beq	a4,a5,800039b4 <m_and_hs_using_vs_access_3+0xa4>
        ERROR("trying to read as mprv from low privilege");
    8000398a:	0001a517          	auipc	a0,0x1a
    8000398e:	cee50513          	add	a0,a0,-786 # 8001d678 <__func__.1+0x9d0>
    80003992:	255170ef          	jal	8001b3e6 <printf>
    80003996:	0fe00613          	li	a2,254
    8000399a:	00018597          	auipc	a1,0x18
    8000399e:	04658593          	add	a1,a1,70 # 8001b9e0 <__func__.11>
    800039a2:	00019517          	auipc	a0,0x19
    800039a6:	77650513          	add	a0,a0,1910 # 8001d118 <__func__.1+0x470>
    800039aa:	23d170ef          	jal	8001b3e6 <printf>
    800039ae:	4501                	li	a0,0
    800039b0:	6d4170ef          	jal	8001b084 <exit>
    set_prev_priv(priv);
    800039b4:	4509                	li	a0,2
    800039b6:	84cfd0ef          	jal	80000a02 <set_prev_priv>
    asm volatile(
    800039ba:	000807b7          	lui	a5,0x80
    800039be:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800039c0:	07b6                	sll	a5,a5,0xd
    800039c2:	00020737          	lui	a4,0x20
    800039c6:	30072073          	csrs	mstatus,a4
    800039ca:	6394                	ld	a3,0(a5)
    800039cc:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine mprv vs access to vu leads to exception",
    800039d0:	08200593          	li	a1,130
    800039d4:	0001a617          	auipc	a2,0x1a
    800039d8:	e2460613          	add	a2,a2,-476 # 8001d7f8 <__func__.1+0xb50>
    800039dc:	00019517          	auipc	a0,0x19
    800039e0:	5cc50513          	add	a0,a0,1484 # 8001cfa8 <__func__.1+0x300>
    800039e4:	203170ef          	jal	8001b3e6 <printf>
    800039e8:	00144783          	lbu	a5,1(s0)
    800039ec:	00019597          	auipc	a1,0x19
    800039f0:	59458593          	add	a1,a1,1428 # 8001cf80 <__func__.1+0x2d8>
    800039f4:	cb89                	beqz	a5,80003a06 <m_and_hs_using_vs_access_3+0xf6>
    800039f6:	6418                	ld	a4,8(s0)
    800039f8:	47b5                	li	a5,13
    800039fa:	00f71663          	bne	a4,a5,80003a06 <m_and_hs_using_vs_access_3+0xf6>
    800039fe:	00019597          	auipc	a1,0x19
    80003a02:	57258593          	add	a1,a1,1394 # 8001cf70 <__func__.1+0x2c8>
    80003a06:	00019517          	auipc	a0,0x19
    80003a0a:	5ba50513          	add	a0,a0,1466 # 8001cfc0 <__func__.1+0x318>
    80003a0e:	1d9170ef          	jal	8001b3e6 <printf>
    80003a12:	00144783          	lbu	a5,1(s0)
    80003a16:	c789                	beqz	a5,80003a20 <m_and_hs_using_vs_access_3+0x110>
    80003a18:	6418                	ld	a4,8(s0)
    80003a1a:	47b5                	li	a5,13
    80003a1c:	00f70c63          	beq	a4,a5,80003a34 <m_and_hs_using_vs_access_3+0x124>
    80003a20:	00019517          	auipc	a0,0x19
    80003a24:	5a850513          	add	a0,a0,1448 # 8001cfc8 <__func__.1+0x320>
    80003a28:	1bf170ef          	jal	8001b3e6 <printf>
    80003a2c:	02900513          	li	a0,41
    80003a30:	089160ef          	jal	8001a2b8 <putchar>
    80003a34:	4529                	li	a0,10
    80003a36:	083160ef          	jal	8001a2b8 <putchar>
    80003a3a:	00144783          	lbu	a5,1(s0)
    80003a3e:	4981                	li	s3,0
    80003a40:	c791                	beqz	a5,80003a4c <m_and_hs_using_vs_access_3+0x13c>
    80003a42:	00843983          	ld	s3,8(s0)
    80003a46:	19cd                	add	s3,s3,-13
    80003a48:	0019b993          	seqz	s3,s3
        excpt.triggered == true&& 
        excpt.cause == CAUSE_LPF 
    );

    TEST_SETUP_EXCEPT();
    80003a4c:	0ff0000f          	fence
    80003a50:	4785                	li	a5,1
    80003a52:	00f41023          	sh	a5,0(s0)
    80003a56:	00039797          	auipc	a5,0x39
    80003a5a:	5e07b923          	sd	zero,1522(a5) # 8003d048 <excpt+0x38>
    80003a5e:	0ff0000f          	fence
    80003a62:	00093703          	ld	a4,0(s2)
    80003a66:	440197b7          	lui	a5,0x44019
    80003a6a:	0786                	sll	a5,a5,0x1
    80003a6c:	e398                	sd	a4,0(a5)
    if(curr_priv != PRIV_M){
    80003a6e:	4098                	lw	a4,0(s1)
    80003a70:	4791                	li	a5,4
    80003a72:	f0f71ce3          	bne	a4,a5,8000398a <m_and_hs_using_vs_access_3+0x7a>
    set_prev_priv(priv);
    80003a76:	4501                	li	a0,0
    80003a78:	f8bfc0ef          	jal	80000a02 <set_prev_priv>
    asm volatile(
    80003a7c:	000807b7          	lui	a5,0x80
    80003a80:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80003a82:	07b6                	sll	a5,a5,0xd
    80003a84:	00020737          	lui	a4,0x20
    80003a88:	30072073          	csrs	mstatus,a4
    80003a8c:	6394                	ld	a3,0(a5)
    80003a8e:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VU, vaddr);
    TEST_ASSERT("machine mprv vu access to vu successful",
    80003a92:	08200593          	li	a1,130
    80003a96:	0001a617          	auipc	a2,0x1a
    80003a9a:	d9260613          	add	a2,a2,-622 # 8001d828 <__func__.1+0xb80>
    80003a9e:	00019517          	auipc	a0,0x19
    80003aa2:	50a50513          	add	a0,a0,1290 # 8001cfa8 <__func__.1+0x300>
    80003aa6:	141170ef          	jal	8001b3e6 <printf>
    80003aaa:	00144783          	lbu	a5,1(s0)
    80003aae:	00019597          	auipc	a1,0x19
    80003ab2:	4d258593          	add	a1,a1,1234 # 8001cf80 <__func__.1+0x2d8>
    80003ab6:	e789                	bnez	a5,80003ac0 <m_and_hs_using_vs_access_3+0x1b0>
    80003ab8:	00019597          	auipc	a1,0x19
    80003abc:	4b858593          	add	a1,a1,1208 # 8001cf70 <__func__.1+0x2c8>
    80003ac0:	00019517          	auipc	a0,0x19
    80003ac4:	50050513          	add	a0,a0,1280 # 8001cfc0 <__func__.1+0x318>
    80003ac8:	11f170ef          	jal	8001b3e6 <printf>
    80003acc:	00144783          	lbu	a5,1(s0)
    80003ad0:	e7b9                	bnez	a5,80003b1e <m_and_hs_using_vs_access_3+0x20e>
    80003ad2:	4529                	li	a0,10
    80003ad4:	7e4160ef          	jal	8001a2b8 <putchar>
    80003ad8:	00098563          	beqz	s3,80003ae2 <m_and_hs_using_vs_access_3+0x1d2>
    80003adc:	00144783          	lbu	a5,1(s0)
    80003ae0:	cb8d                	beqz	a5,80003b12 <m_and_hs_using_vs_access_3+0x202>
    80003ae2:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80003ae4:	00019597          	auipc	a1,0x19
    80003ae8:	49c58593          	add	a1,a1,1180 # 8001cf80 <__func__.1+0x2d8>
    80003aec:	00019517          	auipc	a0,0x19
    80003af0:	53c50513          	add	a0,a0,1340 # 8001d028 <__func__.1+0x380>
    80003af4:	0f3170ef          	jal	8001b3e6 <printf>
    80003af8:	4511                	li	a0,4
    80003afa:	fe5fc0ef          	jal	80000ade <goto_priv>
    80003afe:	829fd0ef          	jal	80001326 <reset_state>
}
    80003b02:	70a2                	ld	ra,40(sp)
    80003b04:	8522                	mv	a0,s0
    80003b06:	7402                	ld	s0,32(sp)
    80003b08:	64e2                	ld	s1,24(sp)
    80003b0a:	6942                	ld	s2,16(sp)
    80003b0c:	69a2                	ld	s3,8(sp)
    80003b0e:	6145                	add	sp,sp,48
    80003b10:	8082                	ret
    TEST_ASSERT("machine mprv vu access to vu successful",
    80003b12:	4405                	li	s0,1
    TEST_END();
    80003b14:	00019597          	auipc	a1,0x19
    80003b18:	45c58593          	add	a1,a1,1116 # 8001cf70 <__func__.1+0x2c8>
    80003b1c:	bfc1                	j	80003aec <m_and_hs_using_vs_access_3+0x1dc>
    TEST_ASSERT("machine mprv vu access to vu successful",
    80003b1e:	00019517          	auipc	a0,0x19
    80003b22:	4aa50513          	add	a0,a0,1194 # 8001cfc8 <__func__.1+0x320>
    80003b26:	0c1170ef          	jal	8001b3e6 <printf>
    80003b2a:	02900513          	li	a0,41
    80003b2e:	78a160ef          	jal	8001a2b8 <putchar>
    80003b32:	b745                	j	80003ad2 <m_and_hs_using_vs_access_3+0x1c2>

0000000080003b34 <m_and_hs_using_vs_access_4>:

bool m_and_hs_using_vs_access_4(){
    80003b34:	1101                	add	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80003b36:	00018597          	auipc	a1,0x18
    80003b3a:	efa58593          	add	a1,a1,-262 # 8001ba30 <__func__.8>
    80003b3e:	00019517          	auipc	a0,0x19
    80003b42:	45250513          	add	a0,a0,1106 # 8001cf90 <__func__.1+0x2e8>
bool m_and_hs_using_vs_access_4(){
    80003b46:	ec06                	sd	ra,24(sp)
    80003b48:	e822                	sd	s0,16(sp)
    80003b4a:	e426                	sd	s1,8(sp)
    80003b4c:	e04a                	sd	s2,0(sp)
    TEST_START();
    80003b4e:	099170ef          	jal	8001b3e6 <printf>
    80003b52:	4529                	li	a0,10
    80003b54:	764160ef          	jal	8001a2b8 <putchar>
    
    hspt_init();
    80003b58:	a89fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80003b5c:	ccbfc0ef          	jal	80000826 <hpt_init>
    vspt_init();
    80003b60:	b55fc0ef          	jal	800006b4 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    goto_priv(PRIV_HS);
    80003b64:	450d                	li	a0,3
    80003b66:	f79fc0ef          	jal	80000ade <goto_priv>

    set_prev_priv(PRIV_VU);
    80003b6a:	4501                	li	a0,0
    80003b6c:	e97fc0ef          	jal	80000a02 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    80003b70:	0ff0000f          	fence
    80003b74:	4785                	li	a5,1
    80003b76:	00039417          	auipc	s0,0x39
    80003b7a:	49a40413          	add	s0,s0,1178 # 8003d010 <excpt>
    80003b7e:	00f41023          	sh	a5,0(s0)
    80003b82:	00039797          	auipc	a5,0x39
    80003b86:	4c07b323          	sd	zero,1222(a5) # 8003d048 <excpt+0x38>
    80003b8a:	0ff0000f          	fence
    80003b8e:	00020497          	auipc	s1,0x20
    80003b92:	a3248493          	add	s1,s1,-1486 # 800235c0 <__func__.1+0x6918>
    80003b96:	6094                	ld	a3,0(s1)
    asm volatile(
    80003b98:	000807b7          	lui	a5,0x80
    80003b9c:	44019737          	lui	a4,0x44019
    80003ba0:	0706                	sll	a4,a4,0x1
    80003ba2:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80003ba4:	e314                	sd	a3,0(a4)
    80003ba6:	07b6                	sll	a5,a5,0xd
    80003ba8:	6c07c7f3          	.4byte	0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    80003bac:	08200593          	li	a1,130
    80003bb0:	0001a617          	auipc	a2,0x1a
    80003bb4:	ca060613          	add	a2,a2,-864 # 8001d850 <__func__.1+0xba8>
    80003bb8:	00019517          	auipc	a0,0x19
    80003bbc:	3f050513          	add	a0,a0,1008 # 8001cfa8 <__func__.1+0x300>
    80003bc0:	027170ef          	jal	8001b3e6 <printf>
    80003bc4:	00144783          	lbu	a5,1(s0)
    80003bc8:	00019597          	auipc	a1,0x19
    80003bcc:	3a858593          	add	a1,a1,936 # 8001cf70 <__func__.1+0x2c8>
    80003bd0:	c789                	beqz	a5,80003bda <m_and_hs_using_vs_access_4+0xa6>
    80003bd2:	00019597          	auipc	a1,0x19
    80003bd6:	3ae58593          	add	a1,a1,942 # 8001cf80 <__func__.1+0x2d8>
    80003bda:	00019517          	auipc	a0,0x19
    80003bde:	3e650513          	add	a0,a0,998 # 8001cfc0 <__func__.1+0x318>
    80003be2:	005170ef          	jal	8001b3e6 <printf>
    80003be6:	00144783          	lbu	a5,1(s0)
    80003bea:	0e079763          	bnez	a5,80003cd8 <m_and_hs_using_vs_access_4+0x1a4>
    80003bee:	4529                	li	a0,10
    80003bf0:	6c8160ef          	jal	8001a2b8 <putchar>
        excpt.triggered == false
    );

    set_prev_priv(PRIV_VS);
    80003bf4:	4509                	li	a0,2
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    80003bf6:	00144903          	lbu	s2,1(s0)
    set_prev_priv(PRIV_VS);
    80003bfa:	e09fc0ef          	jal	80000a02 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    80003bfe:	0ff0000f          	fence
    80003c02:	4785                	li	a5,1
    80003c04:	00f41023          	sh	a5,0(s0)
    80003c08:	00039797          	auipc	a5,0x39
    80003c0c:	4407b023          	sd	zero,1088(a5) # 8003d048 <excpt+0x38>
    80003c10:	0ff0000f          	fence
    80003c14:	6094                	ld	a3,0(s1)
    80003c16:	000807b7          	lui	a5,0x80
    80003c1a:	44019737          	lui	a4,0x44019
    80003c1e:	0706                	sll	a4,a4,0x1
    80003c20:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80003c22:	e314                	sd	a3,0(a4)
    80003c24:	07b6                	sll	a5,a5,0xd
    80003c26:	6c07c7f3          	.4byte	0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    80003c2a:	08200593          	li	a1,130
    80003c2e:	0001a617          	auipc	a2,0x1a
    80003c32:	c5260613          	add	a2,a2,-942 # 8001d880 <__func__.1+0xbd8>
    80003c36:	00019517          	auipc	a0,0x19
    80003c3a:	37250513          	add	a0,a0,882 # 8001cfa8 <__func__.1+0x300>
    80003c3e:	7a8170ef          	jal	8001b3e6 <printf>
    80003c42:	00144783          	lbu	a5,1(s0)
    80003c46:	00019597          	auipc	a1,0x19
    80003c4a:	33a58593          	add	a1,a1,826 # 8001cf80 <__func__.1+0x2d8>
    80003c4e:	c789                	beqz	a5,80003c58 <m_and_hs_using_vs_access_4+0x124>
    80003c50:	6418                	ld	a4,8(s0)
    80003c52:	47b5                	li	a5,13
    80003c54:	08f70d63          	beq	a4,a5,80003cee <m_and_hs_using_vs_access_4+0x1ba>
    80003c58:	00019517          	auipc	a0,0x19
    80003c5c:	36850513          	add	a0,a0,872 # 8001cfc0 <__func__.1+0x318>
    80003c60:	786170ef          	jal	8001b3e6 <printf>
    80003c64:	00144783          	lbu	a5,1(s0)
    80003c68:	c789                	beqz	a5,80003c72 <m_and_hs_using_vs_access_4+0x13e>
    80003c6a:	6418                	ld	a4,8(s0)
    80003c6c:	47b5                	li	a5,13
    80003c6e:	00f70c63          	beq	a4,a5,80003c86 <m_and_hs_using_vs_access_4+0x152>
    80003c72:	00019517          	auipc	a0,0x19
    80003c76:	35650513          	add	a0,a0,854 # 8001cfc8 <__func__.1+0x320>
    80003c7a:	76c170ef          	jal	8001b3e6 <printf>
    80003c7e:	02900513          	li	a0,41
    80003c82:	636160ef          	jal	8001a2b8 <putchar>
    80003c86:	4529                	li	a0,10
    80003c88:	630160ef          	jal	8001a2b8 <putchar>
    80003c8c:	04091063          	bnez	s2,80003ccc <m_and_hs_using_vs_access_4+0x198>
    80003c90:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true&& 
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80003c94:	00019597          	auipc	a1,0x19
    80003c98:	2ec58593          	add	a1,a1,748 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    80003c9c:	c491                	beqz	s1,80003ca8 <m_and_hs_using_vs_access_4+0x174>
    80003c9e:	6418                	ld	a4,8(s0)
    80003ca0:	47b5                	li	a5,13
    80003ca2:	04f70b63          	beq	a4,a5,80003cf8 <m_and_hs_using_vs_access_4+0x1c4>
    80003ca6:	4481                	li	s1,0
    TEST_END();
    80003ca8:	00019517          	auipc	a0,0x19
    80003cac:	38050513          	add	a0,a0,896 # 8001d028 <__func__.1+0x380>
    80003cb0:	736170ef          	jal	8001b3e6 <printf>
    80003cb4:	4511                	li	a0,4
    80003cb6:	e29fc0ef          	jal	80000ade <goto_priv>
    80003cba:	e6cfd0ef          	jal	80001326 <reset_state>
}
    80003cbe:	60e2                	ld	ra,24(sp)
    80003cc0:	6442                	ld	s0,16(sp)
    80003cc2:	6902                	ld	s2,0(sp)
    80003cc4:	8526                	mv	a0,s1
    80003cc6:	64a2                	ld	s1,8(sp)
    80003cc8:	6105                	add	sp,sp,32
    80003cca:	8082                	ret
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    80003ccc:	4481                	li	s1,0
    TEST_END();
    80003cce:	00019597          	auipc	a1,0x19
    80003cd2:	2b258593          	add	a1,a1,690 # 8001cf80 <__func__.1+0x2d8>
    80003cd6:	bfc9                	j	80003ca8 <m_and_hs_using_vs_access_4+0x174>
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    80003cd8:	00019517          	auipc	a0,0x19
    80003cdc:	2f050513          	add	a0,a0,752 # 8001cfc8 <__func__.1+0x320>
    80003ce0:	706170ef          	jal	8001b3e6 <printf>
    80003ce4:	02900513          	li	a0,41
    80003ce8:	5d0160ef          	jal	8001a2b8 <putchar>
    80003cec:	b709                	j	80003bee <m_and_hs_using_vs_access_4+0xba>
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    80003cee:	00019597          	auipc	a1,0x19
    80003cf2:	28258593          	add	a1,a1,642 # 8001cf70 <__func__.1+0x2c8>
    80003cf6:	b78d                	j	80003c58 <m_and_hs_using_vs_access_4+0x124>
    TEST_END();
    80003cf8:	00019597          	auipc	a1,0x19
    80003cfc:	27858593          	add	a1,a1,632 # 8001cf70 <__func__.1+0x2c8>
    80003d00:	b765                	j	80003ca8 <m_and_hs_using_vs_access_4+0x174>

0000000080003d02 <m_and_hs_using_vs_access_5>:

bool m_and_hs_using_vs_access_5(){
    80003d02:	1101                	add	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80003d04:	00018597          	auipc	a1,0x18
    80003d08:	d4c58593          	add	a1,a1,-692 # 8001ba50 <__func__.7>
    80003d0c:	00019517          	auipc	a0,0x19
    80003d10:	28450513          	add	a0,a0,644 # 8001cf90 <__func__.1+0x2e8>
bool m_and_hs_using_vs_access_5(){
    80003d14:	ec06                	sd	ra,24(sp)
    80003d16:	e822                	sd	s0,16(sp)
    80003d18:	e426                	sd	s1,8(sp)
    80003d1a:	e04a                	sd	s2,0(sp)
    TEST_START();
    80003d1c:	6ca170ef          	jal	8001b3e6 <printf>
    80003d20:	4529                	li	a0,10
    80003d22:	596160ef          	jal	8001a2b8 <putchar>
    
    hspt_init();
    80003d26:	8bbfc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80003d2a:	afdfc0ef          	jal	80000826 <hpt_init>
    vspt_init();
    80003d2e:	987fc0ef          	jal	800006b4 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);


    goto_priv(PRIV_M);
    80003d32:	4511                	li	a0,4
    80003d34:	dabfc0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80003d38:	000407b7          	lui	a5,0x40
    80003d3c:	2007a073          	csrs	vsstatus,a5

    TEST_SETUP_EXCEPT();
    80003d40:	0ff0000f          	fence
    80003d44:	4785                	li	a5,1
    80003d46:	00039417          	auipc	s0,0x39
    80003d4a:	2ca40413          	add	s0,s0,714 # 8003d010 <excpt>
    80003d4e:	00f41023          	sh	a5,0(s0)
    80003d52:	00039797          	auipc	a5,0x39
    80003d56:	2e07bb23          	sd	zero,758(a5) # 8003d048 <excpt+0x38>
    80003d5a:	0ff0000f          	fence
    80003d5e:	440197b7          	lui	a5,0x44019
    80003d62:	0786                	sll	a5,a5,0x1
    80003d64:	00020497          	auipc	s1,0x20
    80003d68:	85c4b483          	ld	s1,-1956(s1) # 800235c0 <__func__.1+0x6918>
    80003d6c:	e384                	sd	s1,0(a5)
    if(curr_priv != PRIV_M){
    80003d6e:	00022717          	auipc	a4,0x22
    80003d72:	88e72703          	lw	a4,-1906(a4) # 800255fc <curr_priv>
    80003d76:	4791                	li	a5,4
    80003d78:	02f70763          	beq	a4,a5,80003da6 <m_and_hs_using_vs_access_5+0xa4>
        ERROR("trying to read as mprv from low privilege");
    80003d7c:	0001a517          	auipc	a0,0x1a
    80003d80:	8fc50513          	add	a0,a0,-1796 # 8001d678 <__func__.1+0x9d0>
    80003d84:	662170ef          	jal	8001b3e6 <printf>
    80003d88:	0fe00613          	li	a2,254
    80003d8c:	00018597          	auipc	a1,0x18
    80003d90:	c5458593          	add	a1,a1,-940 # 8001b9e0 <__func__.11>
    80003d94:	00019517          	auipc	a0,0x19
    80003d98:	38450513          	add	a0,a0,900 # 8001d118 <__func__.1+0x470>
    80003d9c:	64a170ef          	jal	8001b3e6 <printf>
    80003da0:	4501                	li	a0,0
    80003da2:	2e2170ef          	jal	8001b084 <exit>
    set_prev_priv(priv);
    80003da6:	4509                	li	a0,2
    80003da8:	c5bfc0ef          	jal	80000a02 <set_prev_priv>
    asm volatile(
    80003dac:	000807b7          	lui	a5,0x80
    80003db0:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80003db2:	07b6                	sll	a5,a5,0xd
    80003db4:	00020737          	lui	a4,0x20
    80003db8:	30072073          	csrs	mstatus,a4
    80003dbc:	0007b903          	ld	s2,0(a5)
    80003dc0:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine mprv access vs user page successful when vsstatus.sum set",
    80003dc4:	0001a617          	auipc	a2,0x1a
    80003dc8:	af460613          	add	a2,a2,-1292 # 8001d8b8 <__func__.1+0xc10>
    80003dcc:	08200593          	li	a1,130
    80003dd0:	00019517          	auipc	a0,0x19
    80003dd4:	1d850513          	add	a0,a0,472 # 8001cfa8 <__func__.1+0x300>
    80003dd8:	60e170ef          	jal	8001b3e6 <printf>
    80003ddc:	00144783          	lbu	a5,1(s0)
    80003de0:	ebb5                	bnez	a5,80003e54 <m_and_hs_using_vs_access_5+0x152>
    80003de2:	0a990463          	beq	s2,s1,80003e8a <m_and_hs_using_vs_access_5+0x188>
    80003de6:	00019597          	auipc	a1,0x19
    80003dea:	19a58593          	add	a1,a1,410 # 8001cf80 <__func__.1+0x2d8>
    80003dee:	00019517          	auipc	a0,0x19
    80003df2:	1d250513          	add	a0,a0,466 # 8001cfc0 <__func__.1+0x318>
    80003df6:	5f0170ef          	jal	8001b3e6 <printf>
    80003dfa:	00019517          	auipc	a0,0x19
    80003dfe:	1ce50513          	add	a0,a0,462 # 8001cfc8 <__func__.1+0x320>
    80003e02:	5e4170ef          	jal	8001b3e6 <printf>
    80003e06:	02900513          	li	a0,41
    80003e0a:	4ae160ef          	jal	8001a2b8 <putchar>
    80003e0e:	4529                	li	a0,10
    80003e10:	4a8160ef          	jal	8001a2b8 <putchar>
    80003e14:	00144783          	lbu	a5,1(s0)
    80003e18:	e799                	bnez	a5,80003e26 <m_and_hs_using_vs_access_5+0x124>
    80003e1a:	0001f797          	auipc	a5,0x1f
    80003e1e:	7a67b783          	ld	a5,1958(a5) # 800235c0 <__func__.1+0x6918>
    80003e22:	04f90e63          	beq	s2,a5,80003e7e <m_and_hs_using_vs_access_5+0x17c>
    80003e26:	4401                	li	s0,0
        excpt.triggered == false && val == 0x1107ec0ffee
    );
    TEST_END();
    80003e28:	00019597          	auipc	a1,0x19
    80003e2c:	15858593          	add	a1,a1,344 # 8001cf80 <__func__.1+0x2d8>
    80003e30:	00019517          	auipc	a0,0x19
    80003e34:	1f850513          	add	a0,a0,504 # 8001d028 <__func__.1+0x380>
    80003e38:	5ae170ef          	jal	8001b3e6 <printf>
    80003e3c:	4511                	li	a0,4
    80003e3e:	ca1fc0ef          	jal	80000ade <goto_priv>
    80003e42:	ce4fd0ef          	jal	80001326 <reset_state>
}
    80003e46:	60e2                	ld	ra,24(sp)
    80003e48:	8522                	mv	a0,s0
    80003e4a:	6442                	ld	s0,16(sp)
    80003e4c:	64a2                	ld	s1,8(sp)
    80003e4e:	6902                	ld	s2,0(sp)
    80003e50:	6105                	add	sp,sp,32
    80003e52:	8082                	ret
    TEST_ASSERT("machine mprv access vs user page successful when vsstatus.sum set",
    80003e54:	00019597          	auipc	a1,0x19
    80003e58:	12c58593          	add	a1,a1,300 # 8001cf80 <__func__.1+0x2d8>
    80003e5c:	00019517          	auipc	a0,0x19
    80003e60:	16450513          	add	a0,a0,356 # 8001cfc0 <__func__.1+0x318>
    80003e64:	582170ef          	jal	8001b3e6 <printf>
    80003e68:	00144783          	lbu	a5,1(s0)
    80003e6c:	f7d9                	bnez	a5,80003dfa <m_and_hs_using_vs_access_5+0xf8>
    80003e6e:	f89916e3          	bne	s2,s1,80003dfa <m_and_hs_using_vs_access_5+0xf8>
    80003e72:	4529                	li	a0,10
    80003e74:	444160ef          	jal	8001a2b8 <putchar>
    80003e78:	00144783          	lbu	a5,1(s0)
    80003e7c:	f7cd                	bnez	a5,80003e26 <m_and_hs_using_vs_access_5+0x124>
    80003e7e:	4405                	li	s0,1
    TEST_END();
    80003e80:	00019597          	auipc	a1,0x19
    80003e84:	0f058593          	add	a1,a1,240 # 8001cf70 <__func__.1+0x2c8>
    80003e88:	b765                	j	80003e30 <m_and_hs_using_vs_access_5+0x12e>
    TEST_ASSERT("machine mprv access vs user page successful when vsstatus.sum set",
    80003e8a:	00019597          	auipc	a1,0x19
    80003e8e:	0e658593          	add	a1,a1,230 # 8001cf70 <__func__.1+0x2c8>
    80003e92:	00019517          	auipc	a0,0x19
    80003e96:	12e50513          	add	a0,a0,302 # 8001cfc0 <__func__.1+0x318>
    80003e9a:	54c170ef          	jal	8001b3e6 <printf>
    80003e9e:	00144783          	lbu	a5,1(s0)
    80003ea2:	dbe1                	beqz	a5,80003e72 <m_and_hs_using_vs_access_5+0x170>
    80003ea4:	bf99                	j	80003dfa <m_and_hs_using_vs_access_5+0xf8>

0000000080003ea6 <m_and_hs_using_vs_access_6>:

bool m_and_hs_using_vs_access_6(){
    80003ea6:	1101                	add	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80003ea8:	00018597          	auipc	a1,0x18
    80003eac:	bc858593          	add	a1,a1,-1080 # 8001ba70 <__func__.6>
    80003eb0:	00019517          	auipc	a0,0x19
    80003eb4:	0e050513          	add	a0,a0,224 # 8001cf90 <__func__.1+0x2e8>
bool m_and_hs_using_vs_access_6(){
    80003eb8:	ec06                	sd	ra,24(sp)
    80003eba:	e822                	sd	s0,16(sp)
    80003ebc:	e426                	sd	s1,8(sp)
    80003ebe:	e04a                	sd	s2,0(sp)
    TEST_START();
    80003ec0:	526170ef          	jal	8001b3e6 <printf>
    80003ec4:	4529                	li	a0,10
    80003ec6:	3f2160ef          	jal	8001a2b8 <putchar>
    
    hspt_init();
    80003eca:	f16fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80003ece:	959fc0ef          	jal	80000826 <hpt_init>
    vspt_init();
    80003ed2:	fe2fc0ef          	jal	800006b4 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80003ed6:	000407b7          	lui	a5,0x40
    80003eda:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    80003ede:	450d                	li	a0,3
    80003ee0:	bfffc0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80003ee4:	4509                	li	a0,2
    80003ee6:	b1dfc0ef          	jal	80000a02 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    80003eea:	0ff0000f          	fence
    80003eee:	4785                	li	a5,1
    80003ef0:	00039497          	auipc	s1,0x39
    80003ef4:	12048493          	add	s1,s1,288 # 8003d010 <excpt>
    80003ef8:	00f49023          	sh	a5,0(s1)
    80003efc:	00039797          	auipc	a5,0x39
    80003f00:	1407b623          	sd	zero,332(a5) # 8003d048 <excpt+0x38>
    80003f04:	0ff0000f          	fence
    80003f08:	00080437          	lui	s0,0x80
    80003f0c:	440197b7          	lui	a5,0x44019
    80003f10:	0001f917          	auipc	s2,0x1f
    80003f14:	6b093903          	ld	s2,1712(s2) # 800235c0 <__func__.1+0x6918>
    80003f18:	0786                	sll	a5,a5,0x1
    80003f1a:	0465                	add	s0,s0,25 # 80019 <_test_table_size+0x80018>
    80003f1c:	0127b023          	sd	s2,0(a5) # 44019000 <STACK_SIZE+0x43f19000>
    80003f20:	0436                	sll	s0,s0,0xd
    80003f22:	6c044473          	.4byte	0x6c044473
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    80003f26:	0001a617          	auipc	a2,0x1a
    80003f2a:	9da60613          	add	a2,a2,-1574 # 8001d900 <__func__.1+0xc58>
    80003f2e:	08200593          	li	a1,130
    80003f32:	00019517          	auipc	a0,0x19
    80003f36:	07650513          	add	a0,a0,118 # 8001cfa8 <__func__.1+0x300>
    80003f3a:	4ac170ef          	jal	8001b3e6 <printf>
    80003f3e:	0014c783          	lbu	a5,1(s1)
    80003f42:	e7ad                	bnez	a5,80003fac <m_and_hs_using_vs_access_6+0x106>
    80003f44:	0d240363          	beq	s0,s2,8000400a <m_and_hs_using_vs_access_6+0x164>
    80003f48:	00019597          	auipc	a1,0x19
    80003f4c:	03858593          	add	a1,a1,56 # 8001cf80 <__func__.1+0x2d8>
    80003f50:	00019517          	auipc	a0,0x19
    80003f54:	07050513          	add	a0,a0,112 # 8001cfc0 <__func__.1+0x318>
    80003f58:	48e170ef          	jal	8001b3e6 <printf>
    80003f5c:	00019517          	auipc	a0,0x19
    80003f60:	06c50513          	add	a0,a0,108 # 8001cfc8 <__func__.1+0x320>
    80003f64:	482170ef          	jal	8001b3e6 <printf>
    80003f68:	02900513          	li	a0,41
    80003f6c:	34c160ef          	jal	8001a2b8 <putchar>
    80003f70:	4529                	li	a0,10
    80003f72:	346160ef          	jal	8001a2b8 <putchar>
        excpt.triggered == false && val == 0x1107ec0ffee
    );
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80003f76:	000407b7          	lui	a5,0x40
    80003f7a:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    80003f7e:	4401                	li	s0,0

    TEST_END();
    80003f80:	00019597          	auipc	a1,0x19
    80003f84:	00058593          	mv	a1,a1
    80003f88:	00019517          	auipc	a0,0x19
    80003f8c:	0a050513          	add	a0,a0,160 # 8001d028 <__func__.1+0x380>
    80003f90:	456170ef          	jal	8001b3e6 <printf>
    80003f94:	4511                	li	a0,4
    80003f96:	b49fc0ef          	jal	80000ade <goto_priv>
    80003f9a:	b8cfd0ef          	jal	80001326 <reset_state>
}
    80003f9e:	60e2                	ld	ra,24(sp)
    80003fa0:	8522                	mv	a0,s0
    80003fa2:	6442                	ld	s0,16(sp)
    80003fa4:	64a2                	ld	s1,8(sp)
    80003fa6:	6902                	ld	s2,0(sp)
    80003fa8:	6105                	add	sp,sp,32
    80003faa:	8082                	ret
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    80003fac:	00019597          	auipc	a1,0x19
    80003fb0:	fd458593          	add	a1,a1,-44 # 8001cf80 <__func__.1+0x2d8>
    80003fb4:	00019517          	auipc	a0,0x19
    80003fb8:	00c50513          	add	a0,a0,12 # 8001cfc0 <__func__.1+0x318>
    80003fbc:	42a170ef          	jal	8001b3e6 <printf>
    80003fc0:	0014c783          	lbu	a5,1(s1)
    80003fc4:	e399                	bnez	a5,80003fca <m_and_hs_using_vs_access_6+0x124>
    80003fc6:	05240f63          	beq	s0,s2,80004024 <m_and_hs_using_vs_access_6+0x17e>
    80003fca:	00019517          	auipc	a0,0x19
    80003fce:	ffe50513          	add	a0,a0,-2 # 8001cfc8 <__func__.1+0x320>
    80003fd2:	414170ef          	jal	8001b3e6 <printf>
    80003fd6:	02900513          	li	a0,41
    80003fda:	2de160ef          	jal	8001a2b8 <putchar>
    80003fde:	4529                	li	a0,10
    80003fe0:	2d8160ef          	jal	8001a2b8 <putchar>
    80003fe4:	0014c783          	lbu	a5,1(s1)
    80003fe8:	f7d9                	bnez	a5,80003f76 <m_and_hs_using_vs_access_6+0xd0>
    80003fea:	0001f797          	auipc	a5,0x1f
    80003fee:	5d67b783          	ld	a5,1494(a5) # 800235c0 <__func__.1+0x6918>
    80003ff2:	f8f412e3          	bne	s0,a5,80003f76 <m_and_hs_using_vs_access_6+0xd0>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80003ff6:	000407b7          	lui	a5,0x40
    80003ffa:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    80003ffe:	4405                	li	s0,1
    TEST_END();
    80004000:	00019597          	auipc	a1,0x19
    80004004:	f7058593          	add	a1,a1,-144 # 8001cf70 <__func__.1+0x2c8>
    80004008:	b741                	j	80003f88 <m_and_hs_using_vs_access_6+0xe2>
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    8000400a:	00019597          	auipc	a1,0x19
    8000400e:	f6658593          	add	a1,a1,-154 # 8001cf70 <__func__.1+0x2c8>
    80004012:	00019517          	auipc	a0,0x19
    80004016:	fae50513          	add	a0,a0,-82 # 8001cfc0 <__func__.1+0x318>
    8000401a:	3cc170ef          	jal	8001b3e6 <printf>
    8000401e:	0014c783          	lbu	a5,1(s1)
    80004022:	f7c5                	bnez	a5,80003fca <m_and_hs_using_vs_access_6+0x124>
    80004024:	4529                	li	a0,10
    80004026:	292160ef          	jal	8001a2b8 <putchar>
    8000402a:	0014c783          	lbu	a5,1(s1)
    8000402e:	f7a1                	bnez	a5,80003f76 <m_and_hs_using_vs_access_6+0xd0>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80004030:	000407b7          	lui	a5,0x40
    80004034:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    80004038:	4405                	li	s0,1
    TEST_END();
    8000403a:	00019597          	auipc	a1,0x19
    8000403e:	f3658593          	add	a1,a1,-202 # 8001cf70 <__func__.1+0x2c8>
    80004042:	b799                	j	80003f88 <m_and_hs_using_vs_access_6+0xe2>

0000000080004044 <m_and_hs_using_vs_access_7>:

bool m_and_hs_using_vs_access_7(){
    80004044:	1101                	add	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004046:	00018597          	auipc	a1,0x18
    8000404a:	a4a58593          	add	a1,a1,-1462 # 8001ba90 <__func__.5>
    8000404e:	00019517          	auipc	a0,0x19
    80004052:	f4250513          	add	a0,a0,-190 # 8001cf90 <__func__.1+0x2e8>
bool m_and_hs_using_vs_access_7(){
    80004056:	ec06                	sd	ra,24(sp)
    80004058:	e822                	sd	s0,16(sp)
    8000405a:	e426                	sd	s1,8(sp)
    TEST_START();
    8000405c:	38a170ef          	jal	8001b3e6 <printf>
    80004060:	4529                	li	a0,10
    80004062:	256160ef          	jal	8001a2b8 <putchar>
    
    hspt_init();
    80004066:	d7afc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    8000406a:	fbcfc0ef          	jal	80000826 <hpt_init>
    vspt_init();
    8000406e:	e46fc0ef          	jal	800006b4 <vspt_init>

    vaddr = vs_page_base(VSX_GUX);
    addr = phys_page_base(VSX_GUX);

    goto_priv(PRIV_HS);
    80004072:	450d                	li	a0,3
    80004074:	a6bfc0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80004078:	4509                	li	a0,2
    8000407a:	989fc0ef          	jal	80000a02 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    8000407e:	0ff0000f          	fence
    80004082:	4785                	li	a5,1
    80004084:	00039417          	auipc	s0,0x39
    80004088:	f8c40413          	add	s0,s0,-116 # 8003d010 <excpt>
    8000408c:	00f41023          	sh	a5,0(s0)
    80004090:	00039797          	auipc	a5,0x39
    80004094:	fa07bc23          	sd	zero,-72(a5) # 8003d048 <excpt+0x38>
    80004098:	0ff0000f          	fence
    8000409c:	200037b7          	lui	a5,0x20003
    800040a0:	078e                	sll	a5,a5,0x3
    800040a2:	6c07c7f3          	.4byte	0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page leads to exception",
    800040a6:	08200593          	li	a1,130
    800040aa:	0001a617          	auipc	a2,0x1a
    800040ae:	88e60613          	add	a2,a2,-1906 # 8001d938 <__func__.1+0xc90>
    800040b2:	00019517          	auipc	a0,0x19
    800040b6:	ef650513          	add	a0,a0,-266 # 8001cfa8 <__func__.1+0x300>
    800040ba:	32c170ef          	jal	8001b3e6 <printf>
    800040be:	00144783          	lbu	a5,1(s0)
    800040c2:	00019597          	auipc	a1,0x19
    800040c6:	eae58593          	add	a1,a1,-338 # 8001cf70 <__func__.1+0x2c8>
    800040ca:	e789                	bnez	a5,800040d4 <m_and_hs_using_vs_access_7+0x90>
    800040cc:	00019597          	auipc	a1,0x19
    800040d0:	eb458593          	add	a1,a1,-332 # 8001cf80 <__func__.1+0x2d8>
    800040d4:	00019517          	auipc	a0,0x19
    800040d8:	eec50513          	add	a0,a0,-276 # 8001cfc0 <__func__.1+0x318>
    800040dc:	30a170ef          	jal	8001b3e6 <printf>
    800040e0:	00144783          	lbu	a5,1(s0)
    800040e4:	0e078063          	beqz	a5,800041c4 <m_and_hs_using_vs_access_7+0x180>
    800040e8:	4529                	li	a0,10
    800040ea:	1ce160ef          	jal	8001a2b8 <putchar>
    800040ee:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true
    );
    TEST_SETUP_EXCEPT();
    800040f2:	0ff0000f          	fence
    800040f6:	4785                	li	a5,1
    800040f8:	00f41023          	sh	a5,0(s0)
    800040fc:	00039797          	auipc	a5,0x39
    80004100:	f407b623          	sd	zero,-180(a5) # 8003d048 <excpt+0x38>
    80004104:	0ff0000f          	fence
    CSRS(sstatus, SSTATUS_MXR);
    80004108:	000807b7          	lui	a5,0x80
    8000410c:	1007a073          	csrs	sstatus,a5
    80004110:	200037b7          	lui	a5,0x20003
    80004114:	078e                	sll	a5,a5,0x3
    80004116:	6c07c7f3          	.4byte	0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    8000411a:	08200593          	li	a1,130
    8000411e:	0001a617          	auipc	a2,0x1a
    80004122:	84a60613          	add	a2,a2,-1974 # 8001d968 <__func__.1+0xcc0>
    80004126:	00019517          	auipc	a0,0x19
    8000412a:	e8250513          	add	a0,a0,-382 # 8001cfa8 <__func__.1+0x300>
    8000412e:	2b8170ef          	jal	8001b3e6 <printf>
    80004132:	00144783          	lbu	a5,1(s0)
    80004136:	00019597          	auipc	a1,0x19
    8000413a:	e4a58593          	add	a1,a1,-438 # 8001cf80 <__func__.1+0x2d8>
    8000413e:	e789                	bnez	a5,80004148 <m_and_hs_using_vs_access_7+0x104>
    80004140:	00019597          	auipc	a1,0x19
    80004144:	e3058593          	add	a1,a1,-464 # 8001cf70 <__func__.1+0x2c8>
    80004148:	00019517          	auipc	a0,0x19
    8000414c:	e7850513          	add	a0,a0,-392 # 8001cfc0 <__func__.1+0x318>
    80004150:	296170ef          	jal	8001b3e6 <printf>
    80004154:	00144783          	lbu	a5,1(s0)
    80004158:	ebb9                	bnez	a5,800041ae <m_and_hs_using_vs_access_7+0x16a>
    8000415a:	4529                	li	a0,10
    8000415c:	15c160ef          	jal	8001a2b8 <putchar>
    80004160:	c481                	beqz	s1,80004168 <m_and_hs_using_vs_access_7+0x124>
    80004162:	00144783          	lbu	a5,1(s0)
    80004166:	cb9d                	beqz	a5,8000419c <m_and_hs_using_vs_access_7+0x158>
        excpt.triggered == false
    );
    CSRC(sstatus, SSTATUS_MXR);
    80004168:	000807b7          	lui	a5,0x80
    8000416c:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    80004170:	4481                	li	s1,0

        TEST_END();
    80004172:	00019597          	auipc	a1,0x19
    80004176:	e0e58593          	add	a1,a1,-498 # 8001cf80 <__func__.1+0x2d8>
    8000417a:	00019517          	auipc	a0,0x19
    8000417e:	eae50513          	add	a0,a0,-338 # 8001d028 <__func__.1+0x380>
    80004182:	264170ef          	jal	8001b3e6 <printf>
    80004186:	4511                	li	a0,4
    80004188:	957fc0ef          	jal	80000ade <goto_priv>
    8000418c:	99afd0ef          	jal	80001326 <reset_state>
}
    80004190:	60e2                	ld	ra,24(sp)
    80004192:	6442                	ld	s0,16(sp)
    80004194:	8526                	mv	a0,s1
    80004196:	64a2                	ld	s1,8(sp)
    80004198:	6105                	add	sp,sp,32
    8000419a:	8082                	ret
    CSRC(sstatus, SSTATUS_MXR);
    8000419c:	000807b7          	lui	a5,0x80
    800041a0:	1007b073          	csrc	sstatus,a5
        TEST_END();
    800041a4:	00019597          	auipc	a1,0x19
    800041a8:	dcc58593          	add	a1,a1,-564 # 8001cf70 <__func__.1+0x2c8>
    800041ac:	b7f9                	j	8000417a <m_and_hs_using_vs_access_7+0x136>
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    800041ae:	00019517          	auipc	a0,0x19
    800041b2:	e1a50513          	add	a0,a0,-486 # 8001cfc8 <__func__.1+0x320>
    800041b6:	230170ef          	jal	8001b3e6 <printf>
    800041ba:	02900513          	li	a0,41
    800041be:	0fa160ef          	jal	8001a2b8 <putchar>
    800041c2:	bf61                	j	8000415a <m_and_hs_using_vs_access_7+0x116>
    TEST_ASSERT("hs hlvd of xo vs page leads to exception",
    800041c4:	00019517          	auipc	a0,0x19
    800041c8:	e0450513          	add	a0,a0,-508 # 8001cfc8 <__func__.1+0x320>
    800041cc:	21a170ef          	jal	8001b3e6 <printf>
    800041d0:	02900513          	li	a0,41
    800041d4:	0e4160ef          	jal	8001a2b8 <putchar>
    800041d8:	bf01                	j	800040e8 <m_and_hs_using_vs_access_7+0xa4>

00000000800041da <m_and_hs_using_vs_access_8>:

bool m_and_hs_using_vs_access_8(){
    800041da:	1101                	add	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    800041dc:	00018597          	auipc	a1,0x18
    800041e0:	8d458593          	add	a1,a1,-1836 # 8001bab0 <__func__.4>
    800041e4:	00019517          	auipc	a0,0x19
    800041e8:	dac50513          	add	a0,a0,-596 # 8001cf90 <__func__.1+0x2e8>
bool m_and_hs_using_vs_access_8(){
    800041ec:	ec06                	sd	ra,24(sp)
    800041ee:	e822                	sd	s0,16(sp)
    800041f0:	e426                	sd	s1,8(sp)
    TEST_START();
    800041f2:	1f4170ef          	jal	8001b3e6 <printf>
    800041f6:	4529                	li	a0,10
    800041f8:	0c0160ef          	jal	8001a2b8 <putchar>
    
    hspt_init();
    800041fc:	be4fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004200:	e26fc0ef          	jal	80000826 <hpt_init>
    vspt_init();
    80004204:	cb0fc0ef          	jal	800006b4 <vspt_init>

    vaddr = vs_page_base(VSX_GUR);
    addr = phys_page_base(VSX_GUR);
    goto_priv(PRIV_HS);
    80004208:	450d                	li	a0,3
    8000420a:	8d5fc0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    8000420e:	4509                	li	a0,2
    80004210:	ff2fc0ef          	jal	80000a02 <set_prev_priv>
    CSRW(sscratch, 0x1111111);
    80004214:	011117b7          	lui	a5,0x1111
    80004218:	1117879b          	addw	a5,a5,273 # 1111111 <STACK_SIZE+0x1011111>
    8000421c:	14079073          	csrw	sscratch,a5
    TEST_SETUP_EXCEPT();
    80004220:	0ff0000f          	fence
    80004224:	4785                	li	a5,1
    80004226:	00039417          	auipc	s0,0x39
    8000422a:	dea40413          	add	s0,s0,-534 # 8003d010 <excpt>
    8000422e:	00f41023          	sh	a5,0(s0)
    80004232:	00039797          	auipc	a5,0x39
    80004236:	e007bb23          	sd	zero,-490(a5) # 8003d048 <excpt+0x38>
    8000423a:	0ff0000f          	fence
    8000423e:	001007b7          	lui	a5,0x100
    80004242:	07dd                	add	a5,a5,23 # 100017 <STACK_SIZE+0x17>
    80004244:	07b2                	sll	a5,a5,0xc
    80004246:	6c07c7f3          	.4byte	0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page leads to load page fault",
    8000424a:	08200593          	li	a1,130
    8000424e:	00019617          	auipc	a2,0x19
    80004252:	74260613          	add	a2,a2,1858 # 8001d990 <__func__.1+0xce8>
    80004256:	00019517          	auipc	a0,0x19
    8000425a:	d5250513          	add	a0,a0,-686 # 8001cfa8 <__func__.1+0x300>
    8000425e:	188170ef          	jal	8001b3e6 <printf>
    80004262:	00144783          	lbu	a5,1(s0)
    80004266:	00019597          	auipc	a1,0x19
    8000426a:	d1a58593          	add	a1,a1,-742 # 8001cf80 <__func__.1+0x2d8>
    8000426e:	c789                	beqz	a5,80004278 <m_and_hs_using_vs_access_8+0x9e>
    80004270:	6418                	ld	a4,8(s0)
    80004272:	47b5                	li	a5,13
    80004274:	10f70763          	beq	a4,a5,80004382 <m_and_hs_using_vs_access_8+0x1a8>
    80004278:	00019517          	auipc	a0,0x19
    8000427c:	d4850513          	add	a0,a0,-696 # 8001cfc0 <__func__.1+0x318>
    80004280:	166170ef          	jal	8001b3e6 <printf>
    80004284:	00144783          	lbu	a5,1(s0)
    80004288:	c789                	beqz	a5,80004292 <m_and_hs_using_vs_access_8+0xb8>
    8000428a:	6418                	ld	a4,8(s0)
    8000428c:	47b5                	li	a5,13
    8000428e:	00f70c63          	beq	a4,a5,800042a6 <m_and_hs_using_vs_access_8+0xcc>
    80004292:	00019517          	auipc	a0,0x19
    80004296:	d3650513          	add	a0,a0,-714 # 8001cfc8 <__func__.1+0x320>
    8000429a:	14c170ef          	jal	8001b3e6 <printf>
    8000429e:	02900513          	li	a0,41
    800042a2:	016160ef          	jal	8001a2b8 <putchar>
    800042a6:	4529                	li	a0,10
    800042a8:	010160ef          	jal	8001a2b8 <putchar>
    800042ac:	00144783          	lbu	a5,1(s0)
    800042b0:	4481                	li	s1,0
    800042b2:	c789                	beqz	a5,800042bc <m_and_hs_using_vs_access_8+0xe2>
    800042b4:	6404                	ld	s1,8(s0)
    800042b6:	14cd                	add	s1,s1,-13
    800042b8:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    TEST_SETUP_EXCEPT();
    800042bc:	0ff0000f          	fence
    800042c0:	4785                	li	a5,1
    800042c2:	00f41023          	sh	a5,0(s0)
    800042c6:	00039797          	auipc	a5,0x39
    800042ca:	d807b123          	sd	zero,-638(a5) # 8003d048 <excpt+0x38>
    800042ce:	0ff0000f          	fence
    CSRS(CSR_VSSTATUS, SSTATUS_MXR);
    800042d2:	000807b7          	lui	a5,0x80
    800042d6:	2007a073          	csrs	vsstatus,a5
    800042da:	001007b7          	lui	a5,0x100
    800042de:	07dd                	add	a5,a5,23 # 100017 <STACK_SIZE+0x17>
    800042e0:	07b2                	sll	a5,a5,0xc
    800042e2:	6c07c7f3          	.4byte	0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    800042e6:	08200593          	li	a1,130
    800042ea:	00019617          	auipc	a2,0x19
    800042ee:	6d660613          	add	a2,a2,1750 # 8001d9c0 <__func__.1+0xd18>
    800042f2:	00019517          	auipc	a0,0x19
    800042f6:	cb650513          	add	a0,a0,-842 # 8001cfa8 <__func__.1+0x300>
    800042fa:	0ec170ef          	jal	8001b3e6 <printf>
    800042fe:	00144783          	lbu	a5,1(s0)
    80004302:	00019597          	auipc	a1,0x19
    80004306:	c7e58593          	add	a1,a1,-898 # 8001cf80 <__func__.1+0x2d8>
    8000430a:	e789                	bnez	a5,80004314 <m_and_hs_using_vs_access_8+0x13a>
    8000430c:	00019597          	auipc	a1,0x19
    80004310:	c6458593          	add	a1,a1,-924 # 8001cf70 <__func__.1+0x2c8>
    80004314:	00019517          	auipc	a0,0x19
    80004318:	cac50513          	add	a0,a0,-852 # 8001cfc0 <__func__.1+0x318>
    8000431c:	0ca170ef          	jal	8001b3e6 <printf>
    80004320:	00144783          	lbu	a5,1(s0)
    80004324:	e7a1                	bnez	a5,8000436c <m_and_hs_using_vs_access_8+0x192>
    80004326:	4529                	li	a0,10
    80004328:	791150ef          	jal	8001a2b8 <putchar>
    8000432c:	c481                	beqz	s1,80004334 <m_and_hs_using_vs_access_8+0x15a>
    8000432e:	00144783          	lbu	a5,1(s0)
    80004332:	c79d                	beqz	a5,80004360 <m_and_hs_using_vs_access_8+0x186>
    80004334:	4401                	li	s0,0
        excpt.triggered == false
    );


    TEST_END();
    80004336:	00019597          	auipc	a1,0x19
    8000433a:	c4a58593          	add	a1,a1,-950 # 8001cf80 <__func__.1+0x2d8>
    8000433e:	00019517          	auipc	a0,0x19
    80004342:	cea50513          	add	a0,a0,-790 # 8001d028 <__func__.1+0x380>
    80004346:	0a0170ef          	jal	8001b3e6 <printf>
    8000434a:	4511                	li	a0,4
    8000434c:	f92fc0ef          	jal	80000ade <goto_priv>
    80004350:	fd7fc0ef          	jal	80001326 <reset_state>
}
    80004354:	60e2                	ld	ra,24(sp)
    80004356:	8522                	mv	a0,s0
    80004358:	6442                	ld	s0,16(sp)
    8000435a:	64a2                	ld	s1,8(sp)
    8000435c:	6105                	add	sp,sp,32
    8000435e:	8082                	ret
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    80004360:	4405                	li	s0,1
    TEST_END();
    80004362:	00019597          	auipc	a1,0x19
    80004366:	c0e58593          	add	a1,a1,-1010 # 8001cf70 <__func__.1+0x2c8>
    8000436a:	bfd1                	j	8000433e <m_and_hs_using_vs_access_8+0x164>
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    8000436c:	00019517          	auipc	a0,0x19
    80004370:	c5c50513          	add	a0,a0,-932 # 8001cfc8 <__func__.1+0x320>
    80004374:	072170ef          	jal	8001b3e6 <printf>
    80004378:	02900513          	li	a0,41
    8000437c:	73d150ef          	jal	8001a2b8 <putchar>
    80004380:	b75d                	j	80004326 <m_and_hs_using_vs_access_8+0x14c>
    TEST_ASSERT("hs hlvd of xo vs page leads to load page fault",
    80004382:	00019597          	auipc	a1,0x19
    80004386:	bee58593          	add	a1,a1,-1042 # 8001cf70 <__func__.1+0x2c8>
    8000438a:	b5fd                	j	80004278 <m_and_hs_using_vs_access_8+0x9e>

000000008000438c <m_and_hs_using_vs_access_9>:

bool m_and_hs_using_vs_access_9(){
    8000438c:	1101                	add	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    8000438e:	00017597          	auipc	a1,0x17
    80004392:	74258593          	add	a1,a1,1858 # 8001bad0 <__func__.3>
    80004396:	00019517          	auipc	a0,0x19
    8000439a:	bfa50513          	add	a0,a0,-1030 # 8001cf90 <__func__.1+0x2e8>
bool m_and_hs_using_vs_access_9(){
    8000439e:	ec06                	sd	ra,24(sp)
    800043a0:	e822                	sd	s0,16(sp)
    800043a2:	e426                	sd	s1,8(sp)
    TEST_START();
    800043a4:	042170ef          	jal	8001b3e6 <printf>
    800043a8:	4529                	li	a0,10
    800043aa:	70f150ef          	jal	8001a2b8 <putchar>
    
    hspt_init();
    800043ae:	a32fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    800043b2:	c74fc0ef          	jal	80000826 <hpt_init>
    vspt_init();
    800043b6:	afefc0ef          	jal	800006b4 <vspt_init>
    
    reset_state();
    800043ba:	f6dfc0ef          	jal	80001326 <reset_state>
    goto_priv(PRIV_HS);
    800043be:	450d                	li	a0,3
    800043c0:	f1efc0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    800043c4:	4509                	li	a0,2
    800043c6:	e3cfc0ef          	jal	80000a02 <set_prev_priv>
    hpt_init();
    800043ca:	c5cfc0ef          	jal	80000826 <hpt_init>
    
    vaddr = vs_page_base(VSI_GUR) ;
    TEST_SETUP_EXCEPT();
    800043ce:	0ff0000f          	fence
    800043d2:	4785                	li	a5,1
    800043d4:	00039417          	auipc	s0,0x39
    800043d8:	c3c40413          	add	s0,s0,-964 # 8003d010 <excpt>
    800043dc:	00f41023          	sh	a5,0(s0)
    800043e0:	00039797          	auipc	a5,0x39
    800043e4:	c607b423          	sd	zero,-920(a5) # 8003d048 <excpt+0x38>
    800043e8:	0ff0000f          	fence
    asm volatile(
    800043ec:	37ab77b7          	lui	a5,0x37ab7
    800043f0:	00100737          	lui	a4,0x100
    800043f4:	078a                	sll	a5,a5,0x2
    800043f6:	06970713          	add	a4,a4,105 # 100069 <STACK_SIZE+0x69>
    800043fa:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800043fe:	0732                	sll	a4,a4,0xc
    80004400:	62f74073          	.4byte	0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80004404:	640c                	ld	a1,8(s0)
    80004406:	00019517          	auipc	a0,0x19
    8000440a:	5f250513          	add	a0,a0,1522 # 8001d9f8 <__func__.1+0xd50>
    8000440e:	7d9160ef          	jal	8001b3e6 <printf>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    80004412:	08200593          	li	a1,130
    80004416:	00019617          	auipc	a2,0x19
    8000441a:	5ea60613          	add	a2,a2,1514 # 8001da00 <__func__.1+0xd58>
    8000441e:	00019517          	auipc	a0,0x19
    80004422:	b8a50513          	add	a0,a0,-1142 # 8001cfa8 <__func__.1+0x300>
    80004426:	7c1160ef          	jal	8001b3e6 <printf>
    8000442a:	00144783          	lbu	a5,1(s0)
    8000442e:	00019597          	auipc	a1,0x19
    80004432:	b5258593          	add	a1,a1,-1198 # 8001cf80 <__func__.1+0x2d8>
    80004436:	c789                	beqz	a5,80004440 <m_and_hs_using_vs_access_9+0xb4>
    80004438:	6418                	ld	a4,8(s0)
    8000443a:	47dd                	li	a5,23
    8000443c:	12f70363          	beq	a4,a5,80004562 <m_and_hs_using_vs_access_9+0x1d6>
    80004440:	00019517          	auipc	a0,0x19
    80004444:	b8050513          	add	a0,a0,-1152 # 8001cfc0 <__func__.1+0x318>
    80004448:	79f160ef          	jal	8001b3e6 <printf>
    8000444c:	00144783          	lbu	a5,1(s0)
    80004450:	c789                	beqz	a5,8000445a <m_and_hs_using_vs_access_9+0xce>
    80004452:	6418                	ld	a4,8(s0)
    80004454:	47dd                	li	a5,23
    80004456:	0ef70363          	beq	a4,a5,8000453c <m_and_hs_using_vs_access_9+0x1b0>
    8000445a:	00019517          	auipc	a0,0x19
    8000445e:	b6e50513          	add	a0,a0,-1170 # 8001cfc8 <__func__.1+0x320>
    80004462:	785160ef          	jal	8001b3e6 <printf>
    80004466:	02900513          	li	a0,41
    8000446a:	64f150ef          	jal	8001a2b8 <putchar>
    8000446e:	4529                	li	a0,10
    80004470:	649150ef          	jal	8001a2b8 <putchar>
    80004474:	00144783          	lbu	a5,1(s0)
    80004478:	4481                	li	s1,0
    8000447a:	c789                	beqz	a5,80004484 <m_and_hs_using_vs_access_9+0xf8>
    8000447c:	6418                	ld	a4,8(s0)
    8000447e:	47dd                	li	a5,23
    80004480:	0ef70d63          	beq	a4,a5,8000457a <m_and_hs_using_vs_access_9+0x1ee>
        excpt.cause == CAUSE_SGPF &&
        excpt.tval2 == vaddr >> 2
    );

    vaddr = vs_page_base(VSI_GUR);
    TEST_SETUP_EXCEPT();
    80004484:	0ff0000f          	fence
    80004488:	4785                	li	a5,1
    8000448a:	00f41023          	sh	a5,0(s0)
    8000448e:	00039797          	auipc	a5,0x39
    80004492:	ba07bd23          	sd	zero,-1094(a5) # 8003d048 <excpt+0x38>
    80004496:	0ff0000f          	fence
    asm volatile(
    8000449a:	001007b7          	lui	a5,0x100
    8000449e:	06978793          	add	a5,a5,105 # 100069 <STACK_SIZE+0x69>
    800044a2:	07b2                	sll	a5,a5,0xc
    800044a4:	6007c7f3          	.4byte	0x6007c7f3
    val = hlvb(vaddr);
    printf("%d\n",excpt.cause);
    800044a8:	640c                	ld	a1,8(s0)
    800044aa:	00019517          	auipc	a0,0x19
    800044ae:	54e50513          	add	a0,a0,1358 # 8001d9f8 <__func__.1+0xd50>
    800044b2:	735160ef          	jal	8001b3e6 <printf>
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    800044b6:	08200593          	li	a1,130
    800044ba:	00019617          	auipc	a2,0x19
    800044be:	58660613          	add	a2,a2,1414 # 8001da40 <__func__.1+0xd98>
    800044c2:	00019517          	auipc	a0,0x19
    800044c6:	ae650513          	add	a0,a0,-1306 # 8001cfa8 <__func__.1+0x300>
    800044ca:	71d160ef          	jal	8001b3e6 <printf>
    800044ce:	00144783          	lbu	a5,1(s0)
    800044d2:	00019597          	auipc	a1,0x19
    800044d6:	aae58593          	add	a1,a1,-1362 # 8001cf80 <__func__.1+0x2d8>
    800044da:	e789                	bnez	a5,800044e4 <m_and_hs_using_vs_access_9+0x158>
    800044dc:	00019597          	auipc	a1,0x19
    800044e0:	a9458593          	add	a1,a1,-1388 # 8001cf70 <__func__.1+0x2c8>
    800044e4:	00019517          	auipc	a0,0x19
    800044e8:	adc50513          	add	a0,a0,-1316 # 8001cfc0 <__func__.1+0x318>
    800044ec:	6fb160ef          	jal	8001b3e6 <printf>
    800044f0:	00144783          	lbu	a5,1(s0)
    800044f4:	efa1                	bnez	a5,8000454c <m_and_hs_using_vs_access_9+0x1c0>
    800044f6:	4529                	li	a0,10
    800044f8:	5c1150ef          	jal	8001a2b8 <putchar>
    800044fc:	c481                	beqz	s1,80004504 <m_and_hs_using_vs_access_9+0x178>
    800044fe:	00144783          	lbu	a5,1(s0)
    80004502:	c79d                	beqz	a5,80004530 <m_and_hs_using_vs_access_9+0x1a4>
    80004504:	4401                	li	s0,0
        excpt.triggered == false
    );
    
    TEST_END();
    80004506:	00019597          	auipc	a1,0x19
    8000450a:	a7a58593          	add	a1,a1,-1414 # 8001cf80 <__func__.1+0x2d8>
    8000450e:	00019517          	auipc	a0,0x19
    80004512:	b1a50513          	add	a0,a0,-1254 # 8001d028 <__func__.1+0x380>
    80004516:	6d1160ef          	jal	8001b3e6 <printf>
    8000451a:	4511                	li	a0,4
    8000451c:	dc2fc0ef          	jal	80000ade <goto_priv>
    80004520:	e07fc0ef          	jal	80001326 <reset_state>
}
    80004524:	60e2                	ld	ra,24(sp)
    80004526:	8522                	mv	a0,s0
    80004528:	6442                	ld	s0,16(sp)
    8000452a:	64a2                	ld	s1,8(sp)
    8000452c:	6105                	add	sp,sp,32
    8000452e:	8082                	ret
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    80004530:	4405                	li	s0,1
    TEST_END();
    80004532:	00019597          	auipc	a1,0x19
    80004536:	a3e58593          	add	a1,a1,-1474 # 8001cf70 <__func__.1+0x2c8>
    8000453a:	bfd1                	j	8000450e <m_and_hs_using_vs_access_9+0x182>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    8000453c:	7418                	ld	a4,40(s0)
    8000453e:	4001a7b7          	lui	a5,0x4001a
    80004542:	40078793          	add	a5,a5,1024 # 4001a400 <STACK_SIZE+0x3ff1a400>
    80004546:	f0f71ae3          	bne	a4,a5,8000445a <m_and_hs_using_vs_access_9+0xce>
    8000454a:	b715                	j	8000446e <m_and_hs_using_vs_access_9+0xe2>
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    8000454c:	00019517          	auipc	a0,0x19
    80004550:	a7c50513          	add	a0,a0,-1412 # 8001cfc8 <__func__.1+0x320>
    80004554:	693160ef          	jal	8001b3e6 <printf>
    80004558:	02900513          	li	a0,41
    8000455c:	55d150ef          	jal	8001a2b8 <putchar>
    80004560:	bf59                	j	800044f6 <m_and_hs_using_vs_access_9+0x16a>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    80004562:	7418                	ld	a4,40(s0)
    80004564:	4001a7b7          	lui	a5,0x4001a
    80004568:	40078793          	add	a5,a5,1024 # 4001a400 <STACK_SIZE+0x3ff1a400>
    8000456c:	ecf71ae3          	bne	a4,a5,80004440 <m_and_hs_using_vs_access_9+0xb4>
    80004570:	00019597          	auipc	a1,0x19
    80004574:	a0058593          	add	a1,a1,-1536 # 8001cf70 <__func__.1+0x2c8>
    80004578:	b5e1                	j	80004440 <m_and_hs_using_vs_access_9+0xb4>
    8000457a:	7404                	ld	s1,40(s0)
    8000457c:	bffe67b7          	lui	a5,0xbffe6
    80004580:	c0078793          	add	a5,a5,-1024 # ffffffffbffe5c00 <__stack_top+0xffffffff3fce6c00>
    80004584:	94be                	add	s1,s1,a5
    80004586:	0014b493          	seqz	s1,s1
    8000458a:	bded                	j	80004484 <m_and_hs_using_vs_access_9+0xf8>

000000008000458c <m_and_hs_using_vs_access_10>:

bool m_and_hs_using_vs_access_10(){
    8000458c:	1101                	add	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    8000458e:	00017597          	auipc	a1,0x17
    80004592:	56258593          	add	a1,a1,1378 # 8001baf0 <__func__.2>
    80004596:	00019517          	auipc	a0,0x19
    8000459a:	9fa50513          	add	a0,a0,-1542 # 8001cf90 <__func__.1+0x2e8>
bool m_and_hs_using_vs_access_10(){
    8000459e:	ec06                	sd	ra,24(sp)
    800045a0:	e822                	sd	s0,16(sp)
    800045a2:	e426                	sd	s1,8(sp)
    TEST_START();
    800045a4:	643160ef          	jal	8001b3e6 <printf>
    800045a8:	4529                	li	a0,10
    800045aa:	50f150ef          	jal	8001a2b8 <putchar>
    
    hspt_init();
    800045ae:	832fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    800045b2:	a74fc0ef          	jal	80000826 <hpt_init>
    vspt_init();
    800045b6:	8fefc0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_HS);
    800045ba:	450d                	li	a0,3
    800045bc:	d22fc0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    800045c0:	4509                	li	a0,2
    800045c2:	c40fc0ef          	jal	80000a02 <set_prev_priv>

    vaddr = vs_page_base(VSR_GUR);
    TEST_SETUP_EXCEPT();
    800045c6:	0ff0000f          	fence
    800045ca:	4785                	li	a5,1
    800045cc:	00039417          	auipc	s0,0x39
    800045d0:	a4440413          	add	s0,s0,-1468 # 8003d010 <excpt>
    800045d4:	00f41023          	sh	a5,0(s0)
    800045d8:	00039797          	auipc	a5,0x39
    800045dc:	a607b823          	sd	zero,-1424(a5) # 8003d048 <excpt+0x38>
    800045e0:	0ff0000f          	fence
    CSRW(sscratch, 0x911);
    800045e4:	6785                	lui	a5,0x1
    800045e6:	9117879b          	addw	a5,a5,-1775 # 911 <_test_table_size+0x910>
    800045ea:	14079073          	csrw	sscratch,a5
    800045ee:	000807b7          	lui	a5,0x80
    800045f2:	07a5                	add	a5,a5,9 # 80009 <_test_table_size+0x80008>
    800045f4:	07b6                	sll	a5,a5,0xd
    800045f6:	6007c7f3          	.4byte	0x6007c7f3
    hlvb(vaddr);
    TEST_ASSERT("hs hlvb on ro both stage page successfull",
    800045fa:	08200593          	li	a1,130
    800045fe:	00019617          	auipc	a2,0x19
    80004602:	46a60613          	add	a2,a2,1130 # 8001da68 <__func__.1+0xdc0>
    80004606:	00019517          	auipc	a0,0x19
    8000460a:	9a250513          	add	a0,a0,-1630 # 8001cfa8 <__func__.1+0x300>
    8000460e:	5d9160ef          	jal	8001b3e6 <printf>
    80004612:	00144783          	lbu	a5,1(s0)
    80004616:	00019597          	auipc	a1,0x19
    8000461a:	95a58593          	add	a1,a1,-1702 # 8001cf70 <__func__.1+0x2c8>
    8000461e:	c789                	beqz	a5,80004628 <m_and_hs_using_vs_access_10+0x9c>
    80004620:	00019597          	auipc	a1,0x19
    80004624:	96058593          	add	a1,a1,-1696 # 8001cf80 <__func__.1+0x2d8>
    80004628:	00019517          	auipc	a0,0x19
    8000462c:	99850513          	add	a0,a0,-1640 # 8001cfc0 <__func__.1+0x318>
    80004630:	5b7160ef          	jal	8001b3e6 <printf>
    80004634:	00144783          	lbu	a5,1(s0)
    80004638:	0e079963          	bnez	a5,8000472a <m_and_hs_using_vs_access_10+0x19e>
    8000463c:	4529                	li	a0,10
    8000463e:	47b150ef          	jal	8001a2b8 <putchar>
    80004642:	00144483          	lbu	s1,1(s0)
        excpt.triggered == false
    );
    
    vspt_init();
    80004646:	86efc0ef          	jal	800006b4 <vspt_init>
    vaddr = vs_page_base(VSR_GUR);
    TEST_SETUP_EXCEPT();
    8000464a:	0ff0000f          	fence
    8000464e:	4785                	li	a5,1
    80004650:	00f41023          	sh	a5,0(s0)
    80004654:	00039797          	auipc	a5,0x39
    80004658:	9e07ba23          	sd	zero,-1548(a5) # 8003d048 <excpt+0x38>
    8000465c:	0ff0000f          	fence
    CSRW(sscratch, 0x911);      
    80004660:	6785                	lui	a5,0x1
    80004662:	9117879b          	addw	a5,a5,-1775 # 911 <_test_table_size+0x910>
    80004666:	14079073          	csrw	sscratch,a5
    asm volatile(
    8000466a:	37ab77b7          	lui	a5,0x37ab7
    8000466e:	00080737          	lui	a4,0x80
    80004672:	078a                	sll	a5,a5,0x2
    80004674:	0725                	add	a4,a4,9 # 80009 <_test_table_size+0x80008>
    80004676:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8000467a:	0736                	sll	a4,a4,0xd
    8000467c:	62f74073          	.4byte	0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    80004680:	08200593          	li	a1,130
    80004684:	00019617          	auipc	a2,0x19
    80004688:	41460613          	add	a2,a2,1044 # 8001da98 <__func__.1+0xdf0>
    8000468c:	00019517          	auipc	a0,0x19
    80004690:	91c50513          	add	a0,a0,-1764 # 8001cfa8 <__func__.1+0x300>
    80004694:	553160ef          	jal	8001b3e6 <printf>
    80004698:	00144783          	lbu	a5,1(s0)
    8000469c:	00019597          	auipc	a1,0x19
    800046a0:	8e458593          	add	a1,a1,-1820 # 8001cf80 <__func__.1+0x2d8>
    800046a4:	c789                	beqz	a5,800046ae <m_and_hs_using_vs_access_10+0x122>
    800046a6:	6418                	ld	a4,8(s0)
    800046a8:	47bd                	li	a5,15
    800046aa:	08f70b63          	beq	a4,a5,80004740 <m_and_hs_using_vs_access_10+0x1b4>
    800046ae:	00019517          	auipc	a0,0x19
    800046b2:	91250513          	add	a0,a0,-1774 # 8001cfc0 <__func__.1+0x318>
    800046b6:	531160ef          	jal	8001b3e6 <printf>
    800046ba:	00144783          	lbu	a5,1(s0)
    800046be:	c789                	beqz	a5,800046c8 <m_and_hs_using_vs_access_10+0x13c>
    800046c0:	6418                	ld	a4,8(s0)
    800046c2:	47bd                	li	a5,15
    800046c4:	00f70c63          	beq	a4,a5,800046dc <m_and_hs_using_vs_access_10+0x150>
    800046c8:	00019517          	auipc	a0,0x19
    800046cc:	90050513          	add	a0,a0,-1792 # 8001cfc8 <__func__.1+0x320>
    800046d0:	517160ef          	jal	8001b3e6 <printf>
    800046d4:	02900513          	li	a0,41
    800046d8:	3e1150ef          	jal	8001a2b8 <putchar>
    800046dc:	4529                	li	a0,10
    800046de:	3db150ef          	jal	8001a2b8 <putchar>
    800046e2:	ec95                	bnez	s1,8000471e <m_and_hs_using_vs_access_10+0x192>
    800046e4:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&  
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    800046e8:	00019597          	auipc	a1,0x19
    800046ec:	89858593          	add	a1,a1,-1896 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    800046f0:	c491                	beqz	s1,800046fc <m_and_hs_using_vs_access_10+0x170>
    800046f2:	6418                	ld	a4,8(s0)
    800046f4:	47bd                	li	a5,15
    800046f6:	04f70a63          	beq	a4,a5,8000474a <m_and_hs_using_vs_access_10+0x1be>
    800046fa:	4481                	li	s1,0
    TEST_END();
    800046fc:	00019517          	auipc	a0,0x19
    80004700:	92c50513          	add	a0,a0,-1748 # 8001d028 <__func__.1+0x380>
    80004704:	4e3160ef          	jal	8001b3e6 <printf>
    80004708:	4511                	li	a0,4
    8000470a:	bd4fc0ef          	jal	80000ade <goto_priv>
    8000470e:	c19fc0ef          	jal	80001326 <reset_state>
}
    80004712:	60e2                	ld	ra,24(sp)
    80004714:	6442                	ld	s0,16(sp)
    80004716:	8526                	mv	a0,s1
    80004718:	64a2                	ld	s1,8(sp)
    8000471a:	6105                	add	sp,sp,32
    8000471c:	8082                	ret
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    8000471e:	4481                	li	s1,0
    TEST_END();
    80004720:	00019597          	auipc	a1,0x19
    80004724:	86058593          	add	a1,a1,-1952 # 8001cf80 <__func__.1+0x2d8>
    80004728:	bfd1                	j	800046fc <m_and_hs_using_vs_access_10+0x170>
    TEST_ASSERT("hs hlvb on ro both stage page successfull",
    8000472a:	00019517          	auipc	a0,0x19
    8000472e:	89e50513          	add	a0,a0,-1890 # 8001cfc8 <__func__.1+0x320>
    80004732:	4b5160ef          	jal	8001b3e6 <printf>
    80004736:	02900513          	li	a0,41
    8000473a:	37f150ef          	jal	8001a2b8 <putchar>
    8000473e:	bdfd                	j	8000463c <m_and_hs_using_vs_access_10+0xb0>
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    80004740:	00019597          	auipc	a1,0x19
    80004744:	83058593          	add	a1,a1,-2000 # 8001cf70 <__func__.1+0x2c8>
    80004748:	b79d                	j	800046ae <m_and_hs_using_vs_access_10+0x122>
    TEST_END();
    8000474a:	00019597          	auipc	a1,0x19
    8000474e:	82658593          	add	a1,a1,-2010 # 8001cf70 <__func__.1+0x2c8>
    80004752:	b76d                	j	800046fc <m_and_hs_using_vs_access_10+0x170>

0000000080004754 <m_and_hs_using_vs_access_11>:

bool m_and_hs_using_vs_access_11(){
    80004754:	1101                	add	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004756:	00017597          	auipc	a1,0x17
    8000475a:	3ba58593          	add	a1,a1,954 # 8001bb10 <__func__.1>
    8000475e:	00019517          	auipc	a0,0x19
    80004762:	83250513          	add	a0,a0,-1998 # 8001cf90 <__func__.1+0x2e8>
bool m_and_hs_using_vs_access_11(){
    80004766:	ec06                	sd	ra,24(sp)
    80004768:	e822                	sd	s0,16(sp)
    8000476a:	e426                	sd	s1,8(sp)
    TEST_START();
    8000476c:	47b160ef          	jal	8001b3e6 <printf>
    80004770:	4529                	li	a0,10
    80004772:	347150ef          	jal	8001a2b8 <putchar>
    
    hspt_init();
    80004776:	e6bfb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    8000477a:	8acfc0ef          	jal	80000826 <hpt_init>
    vspt_init();
    8000477e:	f37fb0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_HS);
    80004782:	450d                	li	a0,3
    80004784:	b5afc0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80004788:	4509                	li	a0,2
    8000478a:	a78fc0ef          	jal	80000a02 <set_prev_priv>


    vaddr = vs_page_base(VSRW_GI);
    TEST_SETUP_EXCEPT();
    8000478e:	0ff0000f          	fence
    80004792:	4785                	li	a5,1
    80004794:	00039417          	auipc	s0,0x39
    80004798:	87c40413          	add	s0,s0,-1924 # 8003d010 <excpt>
    8000479c:	00f41023          	sh	a5,0(s0)
    800047a0:	00039797          	auipc	a5,0x39
    800047a4:	8a07b423          	sd	zero,-1880(a5) # 8003d048 <excpt+0x38>
    800047a8:	0ff0000f          	fence
    CSRW(sscratch, 0x112);
    800047ac:	11200793          	li	a5,274
    800047b0:	14079073          	csrw	sscratch,a5
    800047b4:	37ab77b7          	lui	a5,0x37ab7
    800047b8:	00080737          	lui	a4,0x80
    800047bc:	078a                	sll	a5,a5,0x2
    800047be:	03370713          	add	a4,a4,51 # 80033 <_test_table_size+0x80032>
    800047c2:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800047c6:	0736                	sll	a4,a4,0xd
    800047c8:	62f74073          	.4byte	0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    800047cc:	08200593          	li	a1,130
    800047d0:	00019617          	auipc	a2,0x19
    800047d4:	30060613          	add	a2,a2,768 # 8001dad0 <__func__.1+0xe28>
    800047d8:	00018517          	auipc	a0,0x18
    800047dc:	7d050513          	add	a0,a0,2000 # 8001cfa8 <__func__.1+0x300>
    800047e0:	407160ef          	jal	8001b3e6 <printf>
    800047e4:	00144783          	lbu	a5,1(s0)
    800047e8:	00018597          	auipc	a1,0x18
    800047ec:	79858593          	add	a1,a1,1944 # 8001cf80 <__func__.1+0x2d8>
    800047f0:	c789                	beqz	a5,800047fa <m_and_hs_using_vs_access_11+0xa6>
    800047f2:	6418                	ld	a4,8(s0)
    800047f4:	47dd                	li	a5,23
    800047f6:	06f70e63          	beq	a4,a5,80004872 <m_and_hs_using_vs_access_11+0x11e>
    800047fa:	00018517          	auipc	a0,0x18
    800047fe:	7c650513          	add	a0,a0,1990 # 8001cfc0 <__func__.1+0x318>
    80004802:	3e5160ef          	jal	8001b3e6 <printf>
    80004806:	00144783          	lbu	a5,1(s0)
    8000480a:	c789                	beqz	a5,80004814 <m_and_hs_using_vs_access_11+0xc0>
    8000480c:	6418                	ld	a4,8(s0)
    8000480e:	47dd                	li	a5,23
    80004810:	00f70c63          	beq	a4,a5,80004828 <m_and_hs_using_vs_access_11+0xd4>
    80004814:	00018517          	auipc	a0,0x18
    80004818:	7b450513          	add	a0,a0,1972 # 8001cfc8 <__func__.1+0x320>
    8000481c:	3cb160ef          	jal	8001b3e6 <printf>
    80004820:	02900513          	li	a0,41
    80004824:	295150ef          	jal	8001a2b8 <putchar>
    80004828:	4529                	li	a0,10
    8000482a:	28f150ef          	jal	8001a2b8 <putchar>
    8000482e:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&  
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80004832:	00018597          	auipc	a1,0x18
    80004836:	74e58593          	add	a1,a1,1870 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    8000483a:	c491                	beqz	s1,80004846 <m_and_hs_using_vs_access_11+0xf2>
    8000483c:	6418                	ld	a4,8(s0)
    8000483e:	47dd                	li	a5,23
    80004840:	02f70463          	beq	a4,a5,80004868 <m_and_hs_using_vs_access_11+0x114>
    80004844:	4481                	li	s1,0
    TEST_END();
    80004846:	00018517          	auipc	a0,0x18
    8000484a:	7e250513          	add	a0,a0,2018 # 8001d028 <__func__.1+0x380>
    8000484e:	399160ef          	jal	8001b3e6 <printf>
    80004852:	4511                	li	a0,4
    80004854:	a8afc0ef          	jal	80000ade <goto_priv>
    80004858:	acffc0ef          	jal	80001326 <reset_state>
}
    8000485c:	60e2                	ld	ra,24(sp)
    8000485e:	6442                	ld	s0,16(sp)
    80004860:	8526                	mv	a0,s1
    80004862:	64a2                	ld	s1,8(sp)
    80004864:	6105                	add	sp,sp,32
    80004866:	8082                	ret
    TEST_END();
    80004868:	00018597          	auipc	a1,0x18
    8000486c:	70858593          	add	a1,a1,1800 # 8001cf70 <__func__.1+0x2c8>
    80004870:	bfd9                	j	80004846 <m_and_hs_using_vs_access_11+0xf2>
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    80004872:	00018597          	auipc	a1,0x18
    80004876:	6fe58593          	add	a1,a1,1790 # 8001cf70 <__func__.1+0x2c8>
    8000487a:	b741                	j	800047fa <m_and_hs_using_vs_access_11+0xa6>

000000008000487c <m_and_hs_using_vs_access_12>:

bool m_and_hs_using_vs_access_12(){
    8000487c:	1141                	add	sp,sp,-16

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    8000487e:	00017597          	auipc	a1,0x17
    80004882:	2b258593          	add	a1,a1,690 # 8001bb30 <__func__.0>
    80004886:	00018517          	auipc	a0,0x18
    8000488a:	70a50513          	add	a0,a0,1802 # 8001cf90 <__func__.1+0x2e8>
bool m_and_hs_using_vs_access_12(){
    8000488e:	e406                	sd	ra,8(sp)
    80004890:	e022                	sd	s0,0(sp)
    TEST_START();
    80004892:	355160ef          	jal	8001b3e6 <printf>
    80004896:	4529                	li	a0,10
    80004898:	221150ef          	jal	8001a2b8 <putchar>
    
    hspt_init();
    8000489c:	d45fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    800048a0:	f87fb0ef          	jal	80000826 <hpt_init>
    vspt_init();
    800048a4:	e11fb0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_HS);
    800048a8:	450d                	li	a0,3
    800048aa:	a34fc0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    800048ae:	4509                	li	a0,2
    800048b0:	952fc0ef          	jal	80000a02 <set_prev_priv>

    vaddr = vs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    800048b4:	0ff0000f          	fence
    800048b8:	4785                	li	a5,1
    800048ba:	00038417          	auipc	s0,0x38
    800048be:	75640413          	add	s0,s0,1878 # 8003d010 <excpt>
    800048c2:	00f41023          	sh	a5,0(s0)
    800048c6:	00038797          	auipc	a5,0x38
    800048ca:	7807b123          	sd	zero,1922(a5) # 8003d048 <excpt+0x38>
    800048ce:	0ff0000f          	fence
    CSRW(sscratch, 0x112);
    800048d2:	11200793          	li	a5,274
    800048d6:	14079073          	csrw	sscratch,a5
    TEST_ASSERT("CSRW successfull int any condition",
    800048da:	08200593          	li	a1,130
    800048de:	00019617          	auipc	a2,0x19
    800048e2:	23260613          	add	a2,a2,562 # 8001db10 <__func__.1+0xe68>
    800048e6:	00018517          	auipc	a0,0x18
    800048ea:	6c250513          	add	a0,a0,1730 # 8001cfa8 <__func__.1+0x300>
    800048ee:	2f9160ef          	jal	8001b3e6 <printf>
    800048f2:	00144783          	lbu	a5,1(s0)
    800048f6:	00018597          	auipc	a1,0x18
    800048fa:	67a58593          	add	a1,a1,1658 # 8001cf70 <__func__.1+0x2c8>
    800048fe:	c789                	beqz	a5,80004908 <m_and_hs_using_vs_access_12+0x8c>
    80004900:	00018597          	auipc	a1,0x18
    80004904:	68058593          	add	a1,a1,1664 # 8001cf80 <__func__.1+0x2d8>
    80004908:	00018517          	auipc	a0,0x18
    8000490c:	6b850513          	add	a0,a0,1720 # 8001cfc0 <__func__.1+0x318>
    80004910:	2d7160ef          	jal	8001b3e6 <printf>
    80004914:	00144783          	lbu	a5,1(s0)
    80004918:	e3b1                	bnez	a5,8000495c <m_and_hs_using_vs_access_12+0xe0>
    8000491a:	4529                	li	a0,10
    8000491c:	19d150ef          	jal	8001a2b8 <putchar>
    80004920:	00144783          	lbu	a5,1(s0)
    80004924:	e795                	bnez	a5,80004950 <m_and_hs_using_vs_access_12+0xd4>
    80004926:	4405                	li	s0,1
        excpt.triggered == false
    );
    


    TEST_END();
    80004928:	00018597          	auipc	a1,0x18
    8000492c:	64858593          	add	a1,a1,1608 # 8001cf70 <__func__.1+0x2c8>
    80004930:	00018517          	auipc	a0,0x18
    80004934:	6f850513          	add	a0,a0,1784 # 8001d028 <__func__.1+0x380>
    80004938:	2af160ef          	jal	8001b3e6 <printf>
    8000493c:	4511                	li	a0,4
    8000493e:	9a0fc0ef          	jal	80000ade <goto_priv>
    80004942:	9e5fc0ef          	jal	80001326 <reset_state>

}
    80004946:	60a2                	ld	ra,8(sp)
    80004948:	8522                	mv	a0,s0
    8000494a:	6402                	ld	s0,0(sp)
    8000494c:	0141                	add	sp,sp,16
    8000494e:	8082                	ret
    TEST_ASSERT("CSRW successfull int any condition",
    80004950:	4401                	li	s0,0
    TEST_END();
    80004952:	00018597          	auipc	a1,0x18
    80004956:	62e58593          	add	a1,a1,1582 # 8001cf80 <__func__.1+0x2d8>
    8000495a:	bfd9                	j	80004930 <m_and_hs_using_vs_access_12+0xb4>
    TEST_ASSERT("CSRW successfull int any condition",
    8000495c:	00018517          	auipc	a0,0x18
    80004960:	66c50513          	add	a0,a0,1644 # 8001cfc8 <__func__.1+0x320>
    80004964:	283160ef          	jal	8001b3e6 <printf>
    80004968:	02900513          	li	a0,41
    8000496c:	14d150ef          	jal	8001a2b8 <putchar>
    80004970:	b76d                	j	8000491a <m_and_hs_using_vs_access_12+0x9e>

0000000080004972 <virtual_instruction_1>:
#include <rvh_test.h>
#include <page_tables.h> 


bool virtual_instruction_1() {
    80004972:	1101                	add	sp,sp,-32

    TEST_START();
    80004974:	00017597          	auipc	a1,0x17
    80004978:	1dc58593          	add	a1,a1,476 # 8001bb50 <__func__.10>
    8000497c:	00018517          	auipc	a0,0x18
    80004980:	61450513          	add	a0,a0,1556 # 8001cf90 <__func__.1+0x2e8>
bool virtual_instruction_1() {
    80004984:	ec06                	sd	ra,24(sp)
    80004986:	e822                	sd	s0,16(sp)
    80004988:	e426                	sd	s1,8(sp)
    TEST_START();
    8000498a:	25d160ef          	jal	8001b3e6 <printf>
    8000498e:	4529                	li	a0,10
    80004990:	129150ef          	jal	8001a2b8 <putchar>


    goto_priv(PRIV_VS);
    80004994:	4509                	li	a0,2
    80004996:	948fc0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000499a:	0ff0000f          	fence
    8000499e:	4785                	li	a5,1
    800049a0:	00038417          	auipc	s0,0x38
    800049a4:	67040413          	add	s0,s0,1648 # 8003d010 <excpt>
    800049a8:	00f41023          	sh	a5,0(s0)
    800049ac:	00038797          	auipc	a5,0x38
    800049b0:	6807be23          	sd	zero,1692(a5) # 8003d048 <excpt+0x38>
    800049b4:	0ff0000f          	fence
    asm volatile(
    800049b8:	22000073          	.4byte	0x22000073
    hfence_vvma();
    TEST_ASSERT("vs executing hfence.vvma leads to virtual instruction exception",
    800049bc:	08200593          	li	a1,130
    800049c0:	00019617          	auipc	a2,0x19
    800049c4:	17860613          	add	a2,a2,376 # 8001db38 <__func__.1+0xe90>
    800049c8:	00018517          	auipc	a0,0x18
    800049cc:	5e050513          	add	a0,a0,1504 # 8001cfa8 <__func__.1+0x300>
    800049d0:	217160ef          	jal	8001b3e6 <printf>
    800049d4:	00144783          	lbu	a5,1(s0)
    800049d8:	00018597          	auipc	a1,0x18
    800049dc:	5a858593          	add	a1,a1,1448 # 8001cf80 <__func__.1+0x2d8>
    800049e0:	c789                	beqz	a5,800049ea <virtual_instruction_1+0x78>
    800049e2:	6418                	ld	a4,8(s0)
    800049e4:	47d9                	li	a5,22
    800049e6:	24f70c63          	beq	a4,a5,80004c3e <virtual_instruction_1+0x2cc>
    800049ea:	00018517          	auipc	a0,0x18
    800049ee:	5d650513          	add	a0,a0,1494 # 8001cfc0 <__func__.1+0x318>
    800049f2:	1f5160ef          	jal	8001b3e6 <printf>
    800049f6:	00144783          	lbu	a5,1(s0)
    800049fa:	c789                	beqz	a5,80004a04 <virtual_instruction_1+0x92>
    800049fc:	6418                	ld	a4,8(s0)
    800049fe:	47d9                	li	a5,22
    80004a00:	00f70c63          	beq	a4,a5,80004a18 <virtual_instruction_1+0xa6>
    80004a04:	00018517          	auipc	a0,0x18
    80004a08:	5c450513          	add	a0,a0,1476 # 8001cfc8 <__func__.1+0x320>
    80004a0c:	1db160ef          	jal	8001b3e6 <printf>
    80004a10:	02900513          	li	a0,41
    80004a14:	0a5150ef          	jal	8001a2b8 <putchar>
    80004a18:	4529                	li	a0,10
    80004a1a:	09f150ef          	jal	8001a2b8 <putchar>
    80004a1e:	00144783          	lbu	a5,1(s0)
    80004a22:	4481                	li	s1,0
    80004a24:	c789                	beqz	a5,80004a2e <virtual_instruction_1+0xbc>
    80004a26:	6404                	ld	s1,8(s0)
    80004a28:	14a9                	add	s1,s1,-22
    80004a2a:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    
    goto_priv(PRIV_VS);
    80004a2e:	4509                	li	a0,2
    80004a30:	8aefc0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80004a34:	0ff0000f          	fence
    80004a38:	4785                	li	a5,1
    80004a3a:	00f41023          	sh	a5,0(s0)
    80004a3e:	00038797          	auipc	a5,0x38
    80004a42:	6007b523          	sd	zero,1546(a5) # 8003d048 <excpt+0x38>
    80004a46:	0ff0000f          	fence
    asm volatile(
    80004a4a:	62000073          	.4byte	0x62000073
    hfence_gvma();
    TEST_ASSERT("vs executing hfence.gvma leads to virtual instruction exception",
    80004a4e:	08200593          	li	a1,130
    80004a52:	00019617          	auipc	a2,0x19
    80004a56:	12660613          	add	a2,a2,294 # 8001db78 <__func__.1+0xed0>
    80004a5a:	00018517          	auipc	a0,0x18
    80004a5e:	54e50513          	add	a0,a0,1358 # 8001cfa8 <__func__.1+0x300>
    80004a62:	185160ef          	jal	8001b3e6 <printf>
    80004a66:	00144783          	lbu	a5,1(s0)
    80004a6a:	00018597          	auipc	a1,0x18
    80004a6e:	51658593          	add	a1,a1,1302 # 8001cf80 <__func__.1+0x2d8>
    80004a72:	c789                	beqz	a5,80004a7c <virtual_instruction_1+0x10a>
    80004a74:	6418                	ld	a4,8(s0)
    80004a76:	47d9                	li	a5,22
    80004a78:	1cf70863          	beq	a4,a5,80004c48 <virtual_instruction_1+0x2d6>
    80004a7c:	00018517          	auipc	a0,0x18
    80004a80:	54450513          	add	a0,a0,1348 # 8001cfc0 <__func__.1+0x318>
    80004a84:	163160ef          	jal	8001b3e6 <printf>
    80004a88:	00144783          	lbu	a5,1(s0)
    80004a8c:	c789                	beqz	a5,80004a96 <virtual_instruction_1+0x124>
    80004a8e:	6418                	ld	a4,8(s0)
    80004a90:	47d9                	li	a5,22
    80004a92:	00f70c63          	beq	a4,a5,80004aaa <virtual_instruction_1+0x138>
    80004a96:	00018517          	auipc	a0,0x18
    80004a9a:	53250513          	add	a0,a0,1330 # 8001cfc8 <__func__.1+0x320>
    80004a9e:	149160ef          	jal	8001b3e6 <printf>
    80004aa2:	02900513          	li	a0,41
    80004aa6:	013150ef          	jal	8001a2b8 <putchar>
    80004aaa:	4529                	li	a0,10
    80004aac:	00d150ef          	jal	8001a2b8 <putchar>
    80004ab0:	c491                	beqz	s1,80004abc <virtual_instruction_1+0x14a>
    80004ab2:	00144783          	lbu	a5,1(s0)
    80004ab6:	4481                	li	s1,0
    80004ab8:	16079963          	bnez	a5,80004c2a <virtual_instruction_1+0x2b8>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_M);  
    80004abc:	4511                	li	a0,4
    80004abe:	820fc0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTVM);
    80004ac2:	001007b7          	lui	a5,0x100
    80004ac6:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    80004aca:	4509                	li	a0,2
    80004acc:	812fc0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80004ad0:	0ff0000f          	fence
    80004ad4:	4785                	li	a5,1
    80004ad6:	00f41023          	sh	a5,0(s0)
    80004ada:	00038797          	auipc	a5,0x38
    80004ade:	5607b723          	sd	zero,1390(a5) # 8003d048 <excpt+0x38>
    80004ae2:	0ff0000f          	fence
    asm volatile(
    80004ae6:	12000073          	sfence.vma
    sfence_vma();
    TEST_ASSERT("vs executing sfence.vma leads to virtual instruction exception when vtvm=1",
    80004aea:	08200593          	li	a1,130
    80004aee:	00019617          	auipc	a2,0x19
    80004af2:	0ca60613          	add	a2,a2,202 # 8001dbb8 <__func__.1+0xf10>
    80004af6:	00018517          	auipc	a0,0x18
    80004afa:	4b250513          	add	a0,a0,1202 # 8001cfa8 <__func__.1+0x300>
    80004afe:	0e9160ef          	jal	8001b3e6 <printf>
    80004b02:	00144783          	lbu	a5,1(s0)
    80004b06:	00018597          	auipc	a1,0x18
    80004b0a:	47a58593          	add	a1,a1,1146 # 8001cf80 <__func__.1+0x2d8>
    80004b0e:	c789                	beqz	a5,80004b18 <virtual_instruction_1+0x1a6>
    80004b10:	6418                	ld	a4,8(s0)
    80004b12:	47d9                	li	a5,22
    80004b14:	12f70f63          	beq	a4,a5,80004c52 <virtual_instruction_1+0x2e0>
    80004b18:	00018517          	auipc	a0,0x18
    80004b1c:	4a850513          	add	a0,a0,1192 # 8001cfc0 <__func__.1+0x318>
    80004b20:	0c7160ef          	jal	8001b3e6 <printf>
    80004b24:	00144783          	lbu	a5,1(s0)
    80004b28:	c789                	beqz	a5,80004b32 <virtual_instruction_1+0x1c0>
    80004b2a:	6418                	ld	a4,8(s0)
    80004b2c:	47d9                	li	a5,22
    80004b2e:	00f70c63          	beq	a4,a5,80004b46 <virtual_instruction_1+0x1d4>
    80004b32:	00018517          	auipc	a0,0x18
    80004b36:	49650513          	add	a0,a0,1174 # 8001cfc8 <__func__.1+0x320>
    80004b3a:	0ad160ef          	jal	8001b3e6 <printf>
    80004b3e:	02900513          	li	a0,41
    80004b42:	776150ef          	jal	8001a2b8 <putchar>
    80004b46:	4529                	li	a0,10
    80004b48:	770150ef          	jal	8001a2b8 <putchar>
    80004b4c:	c489                	beqz	s1,80004b56 <virtual_instruction_1+0x1e4>
    80004b4e:	00144783          	lbu	a5,1(s0)
    80004b52:	4481                	li	s1,0
    80004b54:	e7f1                	bnez	a5,80004c20 <virtual_instruction_1+0x2ae>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    80004b56:	4509                	li	a0,2
    80004b58:	f87fb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80004b5c:	0ff0000f          	fence
    80004b60:	4785                	li	a5,1
    80004b62:	00f41023          	sh	a5,0(s0)
    80004b66:	00038797          	auipc	a5,0x38
    80004b6a:	4e07b123          	sd	zero,1250(a5) # 8003d048 <excpt+0x38>
    80004b6e:	0ff0000f          	fence
    asm volatile(
    80004b72:	16000073          	.4byte	0x16000073
    Sinval_vma();
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80004b76:	08200593          	li	a1,130
    80004b7a:	00019617          	auipc	a2,0x19
    80004b7e:	08e60613          	add	a2,a2,142 # 8001dc08 <__func__.1+0xf60>
    80004b82:	00018517          	auipc	a0,0x18
    80004b86:	42650513          	add	a0,a0,1062 # 8001cfa8 <__func__.1+0x300>
    80004b8a:	05d160ef          	jal	8001b3e6 <printf>
    80004b8e:	00144783          	lbu	a5,1(s0)
    80004b92:	00018597          	auipc	a1,0x18
    80004b96:	3ee58593          	add	a1,a1,1006 # 8001cf80 <__func__.1+0x2d8>
    80004b9a:	c789                	beqz	a5,80004ba4 <virtual_instruction_1+0x232>
    80004b9c:	6418                	ld	a4,8(s0)
    80004b9e:	47d9                	li	a5,22
    80004ba0:	08f70a63          	beq	a4,a5,80004c34 <virtual_instruction_1+0x2c2>
    80004ba4:	00018517          	auipc	a0,0x18
    80004ba8:	41c50513          	add	a0,a0,1052 # 8001cfc0 <__func__.1+0x318>
    80004bac:	03b160ef          	jal	8001b3e6 <printf>
    80004bb0:	00144783          	lbu	a5,1(s0)
    80004bb4:	c789                	beqz	a5,80004bbe <virtual_instruction_1+0x24c>
    80004bb6:	6418                	ld	a4,8(s0)
    80004bb8:	47d9                	li	a5,22
    80004bba:	00f70c63          	beq	a4,a5,80004bd2 <virtual_instruction_1+0x260>
    80004bbe:	00018517          	auipc	a0,0x18
    80004bc2:	40a50513          	add	a0,a0,1034 # 8001cfc8 <__func__.1+0x320>
    80004bc6:	021160ef          	jal	8001b3e6 <printf>
    80004bca:	02900513          	li	a0,41
    80004bce:	6ea150ef          	jal	8001a2b8 <putchar>
    80004bd2:	4529                	li	a0,10
    80004bd4:	6e4150ef          	jal	8001a2b8 <putchar>
    80004bd8:	cc95                	beqz	s1,80004c14 <virtual_instruction_1+0x2a2>
    80004bda:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80004bde:	00018597          	auipc	a1,0x18
    80004be2:	3a258593          	add	a1,a1,930 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80004be6:	c491                	beqz	s1,80004bf2 <virtual_instruction_1+0x280>
    80004be8:	6418                	ld	a4,8(s0)
    80004bea:	47d9                	li	a5,22
    80004bec:	06f70863          	beq	a4,a5,80004c5c <virtual_instruction_1+0x2ea>
    80004bf0:	4481                	li	s1,0
    TEST_END();
    80004bf2:	00018517          	auipc	a0,0x18
    80004bf6:	43650513          	add	a0,a0,1078 # 8001d028 <__func__.1+0x380>
    80004bfa:	7ec160ef          	jal	8001b3e6 <printf>
    80004bfe:	4511                	li	a0,4
    80004c00:	edffb0ef          	jal	80000ade <goto_priv>
    80004c04:	f22fc0ef          	jal	80001326 <reset_state>
}
    80004c08:	60e2                	ld	ra,24(sp)
    80004c0a:	6442                	ld	s0,16(sp)
    80004c0c:	8526                	mv	a0,s1
    80004c0e:	64a2                	ld	s1,8(sp)
    80004c10:	6105                	add	sp,sp,32
    80004c12:	8082                	ret
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80004c14:	4481                	li	s1,0
    TEST_END();
    80004c16:	00018597          	auipc	a1,0x18
    80004c1a:	36a58593          	add	a1,a1,874 # 8001cf80 <__func__.1+0x2d8>
    80004c1e:	bfd1                	j	80004bf2 <virtual_instruction_1+0x280>
    TEST_ASSERT("vs executing sfence.vma leads to virtual instruction exception when vtvm=1",
    80004c20:	6404                	ld	s1,8(s0)
    80004c22:	14a9                	add	s1,s1,-22
    80004c24:	0014b493          	seqz	s1,s1
    80004c28:	b73d                	j	80004b56 <virtual_instruction_1+0x1e4>
    TEST_ASSERT("vs executing hfence.gvma leads to virtual instruction exception",
    80004c2a:	6404                	ld	s1,8(s0)
    80004c2c:	14a9                	add	s1,s1,-22
    80004c2e:	0014b493          	seqz	s1,s1
    80004c32:	b569                	j	80004abc <virtual_instruction_1+0x14a>
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80004c34:	00018597          	auipc	a1,0x18
    80004c38:	33c58593          	add	a1,a1,828 # 8001cf70 <__func__.1+0x2c8>
    80004c3c:	b7a5                	j	80004ba4 <virtual_instruction_1+0x232>
    TEST_ASSERT("vs executing hfence.vvma leads to virtual instruction exception",
    80004c3e:	00018597          	auipc	a1,0x18
    80004c42:	33258593          	add	a1,a1,818 # 8001cf70 <__func__.1+0x2c8>
    80004c46:	b355                	j	800049ea <virtual_instruction_1+0x78>
    TEST_ASSERT("vs executing hfence.gvma leads to virtual instruction exception",
    80004c48:	00018597          	auipc	a1,0x18
    80004c4c:	32858593          	add	a1,a1,808 # 8001cf70 <__func__.1+0x2c8>
    80004c50:	b535                	j	80004a7c <virtual_instruction_1+0x10a>
    TEST_ASSERT("vs executing sfence.vma leads to virtual instruction exception when vtvm=1",
    80004c52:	00018597          	auipc	a1,0x18
    80004c56:	31e58593          	add	a1,a1,798 # 8001cf70 <__func__.1+0x2c8>
    80004c5a:	bd7d                	j	80004b18 <virtual_instruction_1+0x1a6>
    TEST_END();
    80004c5c:	00018597          	auipc	a1,0x18
    80004c60:	31458593          	add	a1,a1,788 # 8001cf70 <__func__.1+0x2c8>
    80004c64:	b779                	j	80004bf2 <virtual_instruction_1+0x280>

0000000080004c66 <virtual_instruction_2>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_2() {
    80004c66:	7179                	add	sp,sp,-48

    TEST_START();
    80004c68:	00017597          	auipc	a1,0x17
    80004c6c:	f0058593          	add	a1,a1,-256 # 8001bb68 <__func__.9>
    80004c70:	00018517          	auipc	a0,0x18
    80004c74:	32050513          	add	a0,a0,800 # 8001cf90 <__func__.1+0x2e8>
bool virtual_instruction_2() {
    80004c78:	f406                	sd	ra,40(sp)
    80004c7a:	f022                	sd	s0,32(sp)
    80004c7c:	ec26                	sd	s1,24(sp)
    TEST_START();
    80004c7e:	768160ef          	jal	8001b3e6 <printf>
    80004c82:	4529                	li	a0,10
    80004c84:	634150ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_VS);
    80004c88:	4509                	li	a0,2
    80004c8a:	e55fb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80004c8e:	0ff0000f          	fence
    80004c92:	4785                	li	a5,1
    80004c94:	00038417          	auipc	s0,0x38
    80004c98:	37c40413          	add	s0,s0,892 # 8003d010 <excpt>
    80004c9c:	00f41023          	sh	a5,0(s0)
    80004ca0:	00038797          	auipc	a5,0x38
    80004ca4:	3a07b423          	sd	zero,936(a5) # 8003d048 <excpt+0x38>
    80004ca8:	0ff0000f          	fence
    asm volatile(
    80004cac:	4781                	li	a5,0
    80004cae:	6c07c7f3          	.4byte	0x6c07c7f3
    volatile uint64_t tmp = hlvd(0);
    TEST_ASSERT("vs hlvd leads to virtual instruction exception",
    80004cb2:	08200593          	li	a1,130
    80004cb6:	00019617          	auipc	a2,0x19
    80004cba:	fa260613          	add	a2,a2,-94 # 8001dc58 <__func__.1+0xfb0>
    80004cbe:	00018517          	auipc	a0,0x18
    80004cc2:	2ea50513          	add	a0,a0,746 # 8001cfa8 <__func__.1+0x300>
    volatile uint64_t tmp = hlvd(0);
    80004cc6:	e43e                	sd	a5,8(sp)
    TEST_ASSERT("vs hlvd leads to virtual instruction exception",
    80004cc8:	71e160ef          	jal	8001b3e6 <printf>
    80004ccc:	00144783          	lbu	a5,1(s0)
    80004cd0:	00018597          	auipc	a1,0x18
    80004cd4:	2b058593          	add	a1,a1,688 # 8001cf80 <__func__.1+0x2d8>
    80004cd8:	c789                	beqz	a5,80004ce2 <virtual_instruction_2+0x7c>
    80004cda:	6418                	ld	a4,8(s0)
    80004cdc:	47d9                	li	a5,22
    80004cde:	12f70463          	beq	a4,a5,80004e06 <virtual_instruction_2+0x1a0>
    80004ce2:	00018517          	auipc	a0,0x18
    80004ce6:	2de50513          	add	a0,a0,734 # 8001cfc0 <__func__.1+0x318>
    80004cea:	6fc160ef          	jal	8001b3e6 <printf>
    80004cee:	00144783          	lbu	a5,1(s0)
    80004cf2:	c789                	beqz	a5,80004cfc <virtual_instruction_2+0x96>
    80004cf4:	6418                	ld	a4,8(s0)
    80004cf6:	47d9                	li	a5,22
    80004cf8:	00f70c63          	beq	a4,a5,80004d10 <virtual_instruction_2+0xaa>
    80004cfc:	00018517          	auipc	a0,0x18
    80004d00:	2cc50513          	add	a0,a0,716 # 8001cfc8 <__func__.1+0x320>
    80004d04:	6e2160ef          	jal	8001b3e6 <printf>
    80004d08:	02900513          	li	a0,41
    80004d0c:	5ac150ef          	jal	8001a2b8 <putchar>
    80004d10:	4529                	li	a0,10
    80004d12:	5a6150ef          	jal	8001a2b8 <putchar>
    80004d16:	00144783          	lbu	a5,1(s0)
    80004d1a:	4481                	li	s1,0
    80004d1c:	c789                	beqz	a5,80004d26 <virtual_instruction_2+0xc0>
    80004d1e:	6404                	ld	s1,8(s0)
    80004d20:	14a9                	add	s1,s1,-22
    80004d22:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    80004d26:	4509                	li	a0,2
    80004d28:	db7fb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80004d2c:	0ff0000f          	fence
    80004d30:	4785                	li	a5,1
    80004d32:	00f41023          	sh	a5,0(s0)
    80004d36:	00038797          	auipc	a5,0x38
    80004d3a:	3007b923          	sd	zero,786(a5) # 8003d048 <excpt+0x38>
    80004d3e:	0ff0000f          	fence
    asm volatile(
    80004d42:	37ab77b7          	lui	a5,0x37ab7
    80004d46:	078a                	sll	a5,a5,0x2
    80004d48:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80004d4c:	4701                	li	a4,0
    80004d4e:	62f74073          	.4byte	0x62f74073
    hsvb(0, 0xdeadbeef);
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    80004d52:	08200593          	li	a1,130
    80004d56:	00019617          	auipc	a2,0x19
    80004d5a:	f3260613          	add	a2,a2,-206 # 8001dc88 <__func__.1+0xfe0>
    80004d5e:	00018517          	auipc	a0,0x18
    80004d62:	24a50513          	add	a0,a0,586 # 8001cfa8 <__func__.1+0x300>
    80004d66:	680160ef          	jal	8001b3e6 <printf>
    80004d6a:	00144783          	lbu	a5,1(s0)
    80004d6e:	00018597          	auipc	a1,0x18
    80004d72:	21258593          	add	a1,a1,530 # 8001cf80 <__func__.1+0x2d8>
    80004d76:	c789                	beqz	a5,80004d80 <virtual_instruction_2+0x11a>
    80004d78:	6418                	ld	a4,8(s0)
    80004d7a:	47d9                	li	a5,22
    80004d7c:	08f70063          	beq	a4,a5,80004dfc <virtual_instruction_2+0x196>
    80004d80:	00018517          	auipc	a0,0x18
    80004d84:	24050513          	add	a0,a0,576 # 8001cfc0 <__func__.1+0x318>
    80004d88:	65e160ef          	jal	8001b3e6 <printf>
    80004d8c:	00144783          	lbu	a5,1(s0)
    80004d90:	c789                	beqz	a5,80004d9a <virtual_instruction_2+0x134>
    80004d92:	6418                	ld	a4,8(s0)
    80004d94:	47d9                	li	a5,22
    80004d96:	00f70c63          	beq	a4,a5,80004dae <virtual_instruction_2+0x148>
    80004d9a:	00018517          	auipc	a0,0x18
    80004d9e:	22e50513          	add	a0,a0,558 # 8001cfc8 <__func__.1+0x320>
    80004da2:	644160ef          	jal	8001b3e6 <printf>
    80004da6:	02900513          	li	a0,41
    80004daa:	50e150ef          	jal	8001a2b8 <putchar>
    80004dae:	4529                	li	a0,10
    80004db0:	508150ef          	jal	8001a2b8 <putchar>
    80004db4:	cc95                	beqz	s1,80004df0 <virtual_instruction_2+0x18a>
    80004db6:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    TEST_END();
    80004dba:	00018597          	auipc	a1,0x18
    80004dbe:	1c658593          	add	a1,a1,454 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    80004dc2:	c491                	beqz	s1,80004dce <virtual_instruction_2+0x168>
    80004dc4:	6418                	ld	a4,8(s0)
    80004dc6:	47d9                	li	a5,22
    80004dc8:	04f70463          	beq	a4,a5,80004e10 <virtual_instruction_2+0x1aa>
    80004dcc:	4481                	li	s1,0
    TEST_END();
    80004dce:	00018517          	auipc	a0,0x18
    80004dd2:	25a50513          	add	a0,a0,602 # 8001d028 <__func__.1+0x380>
    80004dd6:	610160ef          	jal	8001b3e6 <printf>
    80004dda:	4511                	li	a0,4
    80004ddc:	d03fb0ef          	jal	80000ade <goto_priv>
    80004de0:	d46fc0ef          	jal	80001326 <reset_state>

}
    80004de4:	70a2                	ld	ra,40(sp)
    80004de6:	7402                	ld	s0,32(sp)
    80004de8:	8526                	mv	a0,s1
    80004dea:	64e2                	ld	s1,24(sp)
    80004dec:	6145                	add	sp,sp,48
    80004dee:	8082                	ret
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    80004df0:	4481                	li	s1,0
    TEST_END();
    80004df2:	00018597          	auipc	a1,0x18
    80004df6:	18e58593          	add	a1,a1,398 # 8001cf80 <__func__.1+0x2d8>
    80004dfa:	bfd1                	j	80004dce <virtual_instruction_2+0x168>
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    80004dfc:	00018597          	auipc	a1,0x18
    80004e00:	17458593          	add	a1,a1,372 # 8001cf70 <__func__.1+0x2c8>
    80004e04:	bfb5                	j	80004d80 <virtual_instruction_2+0x11a>
    TEST_ASSERT("vs hlvd leads to virtual instruction exception",
    80004e06:	00018597          	auipc	a1,0x18
    80004e0a:	16a58593          	add	a1,a1,362 # 8001cf70 <__func__.1+0x2c8>
    80004e0e:	bdd1                	j	80004ce2 <virtual_instruction_2+0x7c>
    TEST_END();
    80004e10:	00018597          	auipc	a1,0x18
    80004e14:	16058593          	add	a1,a1,352 # 8001cf70 <__func__.1+0x2c8>
    80004e18:	bf5d                	j	80004dce <virtual_instruction_2+0x168>

0000000080004e1a <virtual_instruction_3>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_3() {
    80004e1a:	1101                	add	sp,sp,-32

    TEST_START();
    80004e1c:	00017597          	auipc	a1,0x17
    80004e20:	d6458593          	add	a1,a1,-668 # 8001bb80 <__func__.8>
    80004e24:	00018517          	auipc	a0,0x18
    80004e28:	16c50513          	add	a0,a0,364 # 8001cf90 <__func__.1+0x2e8>
bool virtual_instruction_3() {
    80004e2c:	ec06                	sd	ra,24(sp)
    80004e2e:	e822                	sd	s0,16(sp)
    80004e30:	e426                	sd	s1,8(sp)
    TEST_START();
    80004e32:	5b4160ef          	jal	8001b3e6 <printf>
    80004e36:	4529                	li	a0,10
    80004e38:	480150ef          	jal	8001a2b8 <putchar>
    goto_priv(PRIV_M);
    80004e3c:	4511                	li	a0,4
    80004e3e:	ca1fb0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTSR);
    80004e42:	004007b7          	lui	a5,0x400
    80004e46:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    80004e4a:	4509                	li	a0,2
    80004e4c:	c93fb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80004e50:	0ff0000f          	fence
    80004e54:	4785                	li	a5,1
    80004e56:	00038417          	auipc	s0,0x38
    80004e5a:	1ba40413          	add	s0,s0,442 # 8003d010 <excpt>
    80004e5e:	00f41023          	sh	a5,0(s0)
    80004e62:	00038797          	auipc	a5,0x38
    80004e66:	1e07b323          	sd	zero,486(a5) # 8003d048 <excpt+0x38>
    80004e6a:	0ff0000f          	fence
    TEST_EXEC_SRET();
    80004e6e:	00000297          	auipc	t0,0x0
    80004e72:	01028293          	add	t0,t0,16 # 80004e7e <virtual_instruction_3+0x64>
    80004e76:	14129073          	csrw	sepc,t0
    80004e7a:	10200073          	sret
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    80004e7e:	08200593          	li	a1,130
    80004e82:	00019617          	auipc	a2,0x19
    80004e86:	e3660613          	add	a2,a2,-458 # 8001dcb8 <__func__.1+0x1010>
    80004e8a:	00018517          	auipc	a0,0x18
    80004e8e:	11e50513          	add	a0,a0,286 # 8001cfa8 <__func__.1+0x300>
    80004e92:	554160ef          	jal	8001b3e6 <printf>
    80004e96:	00144783          	lbu	a5,1(s0)
    80004e9a:	00018597          	auipc	a1,0x18
    80004e9e:	0e658593          	add	a1,a1,230 # 8001cf80 <__func__.1+0x2d8>
    80004ea2:	c789                	beqz	a5,80004eac <virtual_instruction_3+0x92>
    80004ea4:	6418                	ld	a4,8(s0)
    80004ea6:	47d9                	li	a5,22
    80004ea8:	08f70b63          	beq	a4,a5,80004f3e <virtual_instruction_3+0x124>
    80004eac:	00018517          	auipc	a0,0x18
    80004eb0:	11450513          	add	a0,a0,276 # 8001cfc0 <__func__.1+0x318>
    80004eb4:	532160ef          	jal	8001b3e6 <printf>
    80004eb8:	00144783          	lbu	a5,1(s0)
    80004ebc:	c789                	beqz	a5,80004ec6 <virtual_instruction_3+0xac>
    80004ebe:	6418                	ld	a4,8(s0)
    80004ec0:	47d9                	li	a5,22
    80004ec2:	00f70c63          	beq	a4,a5,80004eda <virtual_instruction_3+0xc0>
    80004ec6:	00018517          	auipc	a0,0x18
    80004eca:	10250513          	add	a0,a0,258 # 8001cfc8 <__func__.1+0x320>
    80004ece:	518160ef          	jal	8001b3e6 <printf>
    80004ed2:	02900513          	li	a0,41
    80004ed6:	3e2150ef          	jal	8001a2b8 <putchar>
    80004eda:	4529                	li	a0,10
    80004edc:	3dc150ef          	jal	8001a2b8 <putchar>
    80004ee0:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  
    goto_priv(PRIV_M);
    80004ee4:	4511                	li	a0,4
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    80004ee6:	c489                	beqz	s1,80004ef0 <virtual_instruction_3+0xd6>
    80004ee8:	6418                	ld	a4,8(s0)
    80004eea:	47d9                	li	a5,22
    80004eec:	02f70e63          	beq	a4,a5,80004f28 <virtual_instruction_3+0x10e>
    goto_priv(PRIV_M);
    80004ef0:	beffb0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTSR);
    80004ef4:	004007b7          	lui	a5,0x400
    80004ef8:	6007b073          	csrc	hstatus,a5
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    80004efc:	4481                	li	s1,0

    TEST_END();
    80004efe:	00018597          	auipc	a1,0x18
    80004f02:	08258593          	add	a1,a1,130 # 8001cf80 <__func__.1+0x2d8>
    80004f06:	00018517          	auipc	a0,0x18
    80004f0a:	12250513          	add	a0,a0,290 # 8001d028 <__func__.1+0x380>
    80004f0e:	4d8160ef          	jal	8001b3e6 <printf>
    80004f12:	4511                	li	a0,4
    80004f14:	bcbfb0ef          	jal	80000ade <goto_priv>
    80004f18:	c0efc0ef          	jal	80001326 <reset_state>
}
    80004f1c:	60e2                	ld	ra,24(sp)
    80004f1e:	6442                	ld	s0,16(sp)
    80004f20:	8526                	mv	a0,s1
    80004f22:	64a2                	ld	s1,8(sp)
    80004f24:	6105                	add	sp,sp,32
    80004f26:	8082                	ret
    goto_priv(PRIV_M);
    80004f28:	bb7fb0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTSR);
    80004f2c:	004007b7          	lui	a5,0x400
    80004f30:	6007b073          	csrc	hstatus,a5
    TEST_END();
    80004f34:	00018597          	auipc	a1,0x18
    80004f38:	03c58593          	add	a1,a1,60 # 8001cf70 <__func__.1+0x2c8>
    80004f3c:	b7e9                	j	80004f06 <virtual_instruction_3+0xec>
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    80004f3e:	00018597          	auipc	a1,0x18
    80004f42:	03258593          	add	a1,a1,50 # 8001cf70 <__func__.1+0x2c8>
    80004f46:	b79d                	j	80004eac <virtual_instruction_3+0x92>

0000000080004f48 <virtual_instruction_4>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_4() {
    80004f48:	1101                	add	sp,sp,-32

    TEST_START();
    80004f4a:	00017597          	auipc	a1,0x17
    80004f4e:	c4e58593          	add	a1,a1,-946 # 8001bb98 <__func__.7>
    80004f52:	00018517          	auipc	a0,0x18
    80004f56:	03e50513          	add	a0,a0,62 # 8001cf90 <__func__.1+0x2e8>
bool virtual_instruction_4() {
    80004f5a:	ec06                	sd	ra,24(sp)
    80004f5c:	e822                	sd	s0,16(sp)
    80004f5e:	e426                	sd	s1,8(sp)
    TEST_START();
    80004f60:	486160ef          	jal	8001b3e6 <printf>
    80004f64:	4529                	li	a0,10
    80004f66:	352150ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80004f6a:	4511                	li	a0,4
    80004f6c:	b73fb0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTVM);
    80004f70:	001007b7          	lui	a5,0x100
    80004f74:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    80004f78:	4509                	li	a0,2
    80004f7a:	b65fb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80004f7e:	0ff0000f          	fence
    80004f82:	4785                	li	a5,1
    80004f84:	00038417          	auipc	s0,0x38
    80004f88:	08c40413          	add	s0,s0,140 # 8003d010 <excpt>
    80004f8c:	00f41023          	sh	a5,0(s0)
    80004f90:	00038797          	auipc	a5,0x38
    80004f94:	0a07bc23          	sd	zero,184(a5) # 8003d048 <excpt+0x38>
    80004f98:	0ff0000f          	fence
    asm volatile ("sfence.vma \n\t");
    80004f9c:	12000073          	sfence.vma
    sfence();
    TEST_ASSERT("vs sfence leads to virtual instruction exception when vtvm set",
    80004fa0:	08200593          	li	a1,130
    80004fa4:	00019617          	auipc	a2,0x19
    80004fa8:	d5460613          	add	a2,a2,-684 # 8001dcf8 <__func__.1+0x1050>
    80004fac:	00018517          	auipc	a0,0x18
    80004fb0:	ffc50513          	add	a0,a0,-4 # 8001cfa8 <__func__.1+0x300>
    80004fb4:	432160ef          	jal	8001b3e6 <printf>
    80004fb8:	00144783          	lbu	a5,1(s0)
    80004fbc:	00018597          	auipc	a1,0x18
    80004fc0:	fc458593          	add	a1,a1,-60 # 8001cf80 <__func__.1+0x2d8>
    80004fc4:	c789                	beqz	a5,80004fce <virtual_instruction_4+0x86>
    80004fc6:	6418                	ld	a4,8(s0)
    80004fc8:	47d9                	li	a5,22
    80004fca:	10f70b63          	beq	a4,a5,800050e0 <virtual_instruction_4+0x198>
    80004fce:	00018517          	auipc	a0,0x18
    80004fd2:	ff250513          	add	a0,a0,-14 # 8001cfc0 <__func__.1+0x318>
    80004fd6:	410160ef          	jal	8001b3e6 <printf>
    80004fda:	00144783          	lbu	a5,1(s0)
    80004fde:	c789                	beqz	a5,80004fe8 <virtual_instruction_4+0xa0>
    80004fe0:	6418                	ld	a4,8(s0)
    80004fe2:	47d9                	li	a5,22
    80004fe4:	00f70c63          	beq	a4,a5,80004ffc <virtual_instruction_4+0xb4>
    80004fe8:	00018517          	auipc	a0,0x18
    80004fec:	fe050513          	add	a0,a0,-32 # 8001cfc8 <__func__.1+0x320>
    80004ff0:	3f6160ef          	jal	8001b3e6 <printf>
    80004ff4:	02900513          	li	a0,41
    80004ff8:	2c0150ef          	jal	8001a2b8 <putchar>
    80004ffc:	4529                	li	a0,10
    80004ffe:	2ba150ef          	jal	8001a2b8 <putchar>
    80005002:	00144783          	lbu	a5,1(s0)
    80005006:	4481                	li	s1,0
    80005008:	c789                	beqz	a5,80005012 <virtual_instruction_4+0xca>
    8000500a:	6404                	ld	s1,8(s0)
    8000500c:	14a9                	add	s1,s1,-22
    8000500e:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_SETUP_EXCEPT();
    80005012:	0ff0000f          	fence
    80005016:	4785                	li	a5,1
    80005018:	00f41023          	sh	a5,0(s0)
    8000501c:	00038797          	auipc	a5,0x38
    80005020:	0207b623          	sd	zero,44(a5) # 8003d048 <excpt+0x38>
    80005024:	0ff0000f          	fence
    CSRW(satp, 0x0);
    80005028:	18005073          	csrw	satp,0
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    8000502c:	08200593          	li	a1,130
    80005030:	00019617          	auipc	a2,0x19
    80005034:	d0860613          	add	a2,a2,-760 # 8001dd38 <__func__.1+0x1090>
    80005038:	00018517          	auipc	a0,0x18
    8000503c:	f7050513          	add	a0,a0,-144 # 8001cfa8 <__func__.1+0x300>
    80005040:	3a6160ef          	jal	8001b3e6 <printf>
    80005044:	00144783          	lbu	a5,1(s0)
    80005048:	00018597          	auipc	a1,0x18
    8000504c:	f3858593          	add	a1,a1,-200 # 8001cf80 <__func__.1+0x2d8>
    80005050:	c789                	beqz	a5,8000505a <virtual_instruction_4+0x112>
    80005052:	6418                	ld	a4,8(s0)
    80005054:	47d9                	li	a5,22
    80005056:	08f70063          	beq	a4,a5,800050d6 <virtual_instruction_4+0x18e>
    8000505a:	00018517          	auipc	a0,0x18
    8000505e:	f6650513          	add	a0,a0,-154 # 8001cfc0 <__func__.1+0x318>
    80005062:	384160ef          	jal	8001b3e6 <printf>
    80005066:	00144783          	lbu	a5,1(s0)
    8000506a:	c789                	beqz	a5,80005074 <virtual_instruction_4+0x12c>
    8000506c:	6418                	ld	a4,8(s0)
    8000506e:	47d9                	li	a5,22
    80005070:	00f70c63          	beq	a4,a5,80005088 <virtual_instruction_4+0x140>
    80005074:	00018517          	auipc	a0,0x18
    80005078:	f5450513          	add	a0,a0,-172 # 8001cfc8 <__func__.1+0x320>
    8000507c:	36a160ef          	jal	8001b3e6 <printf>
    80005080:	02900513          	li	a0,41
    80005084:	234150ef          	jal	8001a2b8 <putchar>
    80005088:	4529                	li	a0,10
    8000508a:	22e150ef          	jal	8001a2b8 <putchar>
    8000508e:	cc95                	beqz	s1,800050ca <virtual_instruction_4+0x182>
    80005090:	00144483          	lbu	s1,1(s0)
    // TEST_ASSERT("vs mode access h level low part leads to virtual instruction exception when mstatus_TVM=0",
    //     excpt.triggered == true &&
    //     excpt.cause == CAUSE_VRTI
    // );      
    
    TEST_END();
    80005094:	00018597          	auipc	a1,0x18
    80005098:	eec58593          	add	a1,a1,-276 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    8000509c:	c491                	beqz	s1,800050a8 <virtual_instruction_4+0x160>
    8000509e:	6418                	ld	a4,8(s0)
    800050a0:	47d9                	li	a5,22
    800050a2:	04f70463          	beq	a4,a5,800050ea <virtual_instruction_4+0x1a2>
    800050a6:	4481                	li	s1,0
    TEST_END();
    800050a8:	00018517          	auipc	a0,0x18
    800050ac:	f8050513          	add	a0,a0,-128 # 8001d028 <__func__.1+0x380>
    800050b0:	336160ef          	jal	8001b3e6 <printf>
    800050b4:	4511                	li	a0,4
    800050b6:	a29fb0ef          	jal	80000ade <goto_priv>
    800050ba:	a6cfc0ef          	jal	80001326 <reset_state>
}
    800050be:	60e2                	ld	ra,24(sp)
    800050c0:	6442                	ld	s0,16(sp)
    800050c2:	8526                	mv	a0,s1
    800050c4:	64a2                	ld	s1,8(sp)
    800050c6:	6105                	add	sp,sp,32
    800050c8:	8082                	ret
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    800050ca:	4481                	li	s1,0
    TEST_END();
    800050cc:	00018597          	auipc	a1,0x18
    800050d0:	eb458593          	add	a1,a1,-332 # 8001cf80 <__func__.1+0x2d8>
    800050d4:	bfd1                	j	800050a8 <virtual_instruction_4+0x160>
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    800050d6:	00018597          	auipc	a1,0x18
    800050da:	e9a58593          	add	a1,a1,-358 # 8001cf70 <__func__.1+0x2c8>
    800050de:	bfb5                	j	8000505a <virtual_instruction_4+0x112>
    TEST_ASSERT("vs sfence leads to virtual instruction exception when vtvm set",
    800050e0:	00018597          	auipc	a1,0x18
    800050e4:	e9058593          	add	a1,a1,-368 # 8001cf70 <__func__.1+0x2c8>
    800050e8:	b5dd                	j	80004fce <virtual_instruction_4+0x86>
    TEST_END();
    800050ea:	00018597          	auipc	a1,0x18
    800050ee:	e8658593          	add	a1,a1,-378 # 8001cf70 <__func__.1+0x2c8>
    800050f2:	bf5d                	j	800050a8 <virtual_instruction_4+0x160>

00000000800050f4 <virtual_instruction_5>:
    ////////////////////////////////////////////////////////////////////////

bool virtual_instruction_5() {
    800050f4:	1101                	add	sp,sp,-32

    TEST_START();
    800050f6:	00017597          	auipc	a1,0x17
    800050fa:	aba58593          	add	a1,a1,-1350 # 8001bbb0 <__func__.6>
    800050fe:	00018517          	auipc	a0,0x18
    80005102:	e9250513          	add	a0,a0,-366 # 8001cf90 <__func__.1+0x2e8>
bool virtual_instruction_5() {
    80005106:	ec06                	sd	ra,24(sp)
    80005108:	e822                	sd	s0,16(sp)
    8000510a:	e426                	sd	s1,8(sp)
    TEST_START();
    8000510c:	2da160ef          	jal	8001b3e6 <printf>
    80005110:	4529                	li	a0,10
    80005112:	1a6150ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80005116:	4511                	li	a0,4
    80005118:	9c7fb0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);
    8000511c:	002007b7          	lui	a5,0x200
    80005120:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    80005124:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_VS);
    80005128:	4509                	li	a0,2
    8000512a:	9b5fb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000512e:	0ff0000f          	fence
    80005132:	4785                	li	a5,1
    80005134:	00038417          	auipc	s0,0x38
    80005138:	edc40413          	add	s0,s0,-292 # 8003d010 <excpt>
    8000513c:	00f41023          	sh	a5,0(s0)
    80005140:	00038797          	auipc	a5,0x38
    80005144:	f007b423          	sd	zero,-248(a5) # 8003d048 <excpt+0x38>
    80005148:	0ff0000f          	fence
    asm("wfi");
    8000514c:	10500073          	wfi
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    80005150:	08200593          	li	a1,130
    80005154:	00019617          	auipc	a2,0x19
    80005158:	c2c60613          	add	a2,a2,-980 # 8001dd80 <__func__.1+0x10d8>
    8000515c:	00018517          	auipc	a0,0x18
    80005160:	e4c50513          	add	a0,a0,-436 # 8001cfa8 <__func__.1+0x300>
    80005164:	282160ef          	jal	8001b3e6 <printf>
    80005168:	00144783          	lbu	a5,1(s0)
    8000516c:	00018597          	auipc	a1,0x18
    80005170:	e1458593          	add	a1,a1,-492 # 8001cf80 <__func__.1+0x2d8>
    80005174:	c789                	beqz	a5,8000517e <virtual_instruction_5+0x8a>
    80005176:	6418                	ld	a4,8(s0)
    80005178:	47d9                	li	a5,22
    8000517a:	06f70e63          	beq	a4,a5,800051f6 <virtual_instruction_5+0x102>
    8000517e:	00018517          	auipc	a0,0x18
    80005182:	e4250513          	add	a0,a0,-446 # 8001cfc0 <__func__.1+0x318>
    80005186:	260160ef          	jal	8001b3e6 <printf>
    8000518a:	00144783          	lbu	a5,1(s0)
    8000518e:	c789                	beqz	a5,80005198 <virtual_instruction_5+0xa4>
    80005190:	6418                	ld	a4,8(s0)
    80005192:	47d9                	li	a5,22
    80005194:	00f70c63          	beq	a4,a5,800051ac <virtual_instruction_5+0xb8>
    80005198:	00018517          	auipc	a0,0x18
    8000519c:	e3050513          	add	a0,a0,-464 # 8001cfc8 <__func__.1+0x320>
    800051a0:	246160ef          	jal	8001b3e6 <printf>
    800051a4:	02900513          	li	a0,41
    800051a8:	110150ef          	jal	8001a2b8 <putchar>
    800051ac:	4529                	li	a0,10
    800051ae:	10a150ef          	jal	8001a2b8 <putchar>
    800051b2:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_END();
    800051b6:	00018597          	auipc	a1,0x18
    800051ba:	dca58593          	add	a1,a1,-566 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    800051be:	c491                	beqz	s1,800051ca <virtual_instruction_5+0xd6>
    800051c0:	6418                	ld	a4,8(s0)
    800051c2:	47d9                	li	a5,22
    800051c4:	02f70463          	beq	a4,a5,800051ec <virtual_instruction_5+0xf8>
    800051c8:	4481                	li	s1,0
    TEST_END();
    800051ca:	00018517          	auipc	a0,0x18
    800051ce:	e5e50513          	add	a0,a0,-418 # 8001d028 <__func__.1+0x380>
    800051d2:	214160ef          	jal	8001b3e6 <printf>
    800051d6:	4511                	li	a0,4
    800051d8:	907fb0ef          	jal	80000ade <goto_priv>
    800051dc:	94afc0ef          	jal	80001326 <reset_state>
}
    800051e0:	60e2                	ld	ra,24(sp)
    800051e2:	6442                	ld	s0,16(sp)
    800051e4:	8526                	mv	a0,s1
    800051e6:	64a2                	ld	s1,8(sp)
    800051e8:	6105                	add	sp,sp,32
    800051ea:	8082                	ret
    TEST_END();
    800051ec:	00018597          	auipc	a1,0x18
    800051f0:	d8458593          	add	a1,a1,-636 # 8001cf70 <__func__.1+0x2c8>
    800051f4:	bfd9                	j	800051ca <virtual_instruction_5+0xd6>
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    800051f6:	00018597          	auipc	a1,0x18
    800051fa:	d7a58593          	add	a1,a1,-646 # 8001cf70 <__func__.1+0x2c8>
    800051fe:	b741                	j	8000517e <virtual_instruction_5+0x8a>

0000000080005200 <virtual_instruction_6>:
    TEST_ASSERT("vs access to cycle casuses succsseful when mcounteren.cy and hcounteren.cy set",
        excpt.triggered == false
    );
#endif

bool virtual_instruction_6() {
    80005200:	1101                	add	sp,sp,-32

    TEST_START();
    80005202:	00017597          	auipc	a1,0x17
    80005206:	9c658593          	add	a1,a1,-1594 # 8001bbc8 <__func__.5>
    8000520a:	00018517          	auipc	a0,0x18
    8000520e:	d8650513          	add	a0,a0,-634 # 8001cf90 <__func__.1+0x2e8>
bool virtual_instruction_6() {
    80005212:	ec06                	sd	ra,24(sp)
    80005214:	e822                	sd	s0,16(sp)
    80005216:	e426                	sd	s1,8(sp)
    TEST_START();
    80005218:	1ce160ef          	jal	8001b3e6 <printf>
    8000521c:	4529                	li	a0,10
    8000521e:	09a150ef          	jal	8001a2b8 <putchar>

//vu-mode
    goto_priv(PRIV_VU);
    80005222:	4501                	li	a0,0
    80005224:	8bbfb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80005228:	0ff0000f          	fence
    8000522c:	4785                	li	a5,1
    8000522e:	00038417          	auipc	s0,0x38
    80005232:	de240413          	add	s0,s0,-542 # 8003d010 <excpt>
    80005236:	00f41023          	sh	a5,0(s0)
    8000523a:	00038797          	auipc	a5,0x38
    8000523e:	e007b723          	sd	zero,-498(a5) # 8003d048 <excpt+0x38>
    80005242:	0ff0000f          	fence
    asm volatile(
    80005246:	22000073          	.4byte	0x22000073
    hfence_vvma();
    TEST_ASSERT("vu executing hfence.vvma leads to virtual instruction exception",
    8000524a:	08200593          	li	a1,130
    8000524e:	00019617          	auipc	a2,0x19
    80005252:	b7a60613          	add	a2,a2,-1158 # 8001ddc8 <__func__.1+0x1120>
    80005256:	00018517          	auipc	a0,0x18
    8000525a:	d5250513          	add	a0,a0,-686 # 8001cfa8 <__func__.1+0x300>
    8000525e:	188160ef          	jal	8001b3e6 <printf>
    80005262:	00144783          	lbu	a5,1(s0)
    80005266:	00018597          	auipc	a1,0x18
    8000526a:	d1a58593          	add	a1,a1,-742 # 8001cf80 <__func__.1+0x2d8>
    8000526e:	c789                	beqz	a5,80005278 <virtual_instruction_6+0x78>
    80005270:	6418                	ld	a4,8(s0)
    80005272:	47d9                	li	a5,22
    80005274:	1af70963          	beq	a4,a5,80005426 <virtual_instruction_6+0x226>
    80005278:	00018517          	auipc	a0,0x18
    8000527c:	d4850513          	add	a0,a0,-696 # 8001cfc0 <__func__.1+0x318>
    80005280:	166160ef          	jal	8001b3e6 <printf>
    80005284:	00144783          	lbu	a5,1(s0)
    80005288:	c789                	beqz	a5,80005292 <virtual_instruction_6+0x92>
    8000528a:	6418                	ld	a4,8(s0)
    8000528c:	47d9                	li	a5,22
    8000528e:	00f70c63          	beq	a4,a5,800052a6 <virtual_instruction_6+0xa6>
    80005292:	00018517          	auipc	a0,0x18
    80005296:	d3650513          	add	a0,a0,-714 # 8001cfc8 <__func__.1+0x320>
    8000529a:	14c160ef          	jal	8001b3e6 <printf>
    8000529e:	02900513          	li	a0,41
    800052a2:	016150ef          	jal	8001a2b8 <putchar>
    800052a6:	4529                	li	a0,10
    800052a8:	010150ef          	jal	8001a2b8 <putchar>
    800052ac:	00144783          	lbu	a5,1(s0)
    800052b0:	4481                	li	s1,0
    800052b2:	c789                	beqz	a5,800052bc <virtual_instruction_6+0xbc>
    800052b4:	6404                	ld	s1,8(s0)
    800052b6:	14a9                	add	s1,s1,-22
    800052b8:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    
    goto_priv(PRIV_VU);
    800052bc:	4501                	li	a0,0
    800052be:	821fb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    800052c2:	0ff0000f          	fence
    800052c6:	4785                	li	a5,1
    800052c8:	00f41023          	sh	a5,0(s0)
    800052cc:	00038797          	auipc	a5,0x38
    800052d0:	d607be23          	sd	zero,-644(a5) # 8003d048 <excpt+0x38>
    800052d4:	0ff0000f          	fence
    asm volatile(
    800052d8:	62000073          	.4byte	0x62000073
    hfence_gvma();
    TEST_ASSERT("vu executing hfence.gvma leads to virtual instruction exception",
    800052dc:	08200593          	li	a1,130
    800052e0:	00019617          	auipc	a2,0x19
    800052e4:	b2860613          	add	a2,a2,-1240 # 8001de08 <__func__.1+0x1160>
    800052e8:	00018517          	auipc	a0,0x18
    800052ec:	cc050513          	add	a0,a0,-832 # 8001cfa8 <__func__.1+0x300>
    800052f0:	0f6160ef          	jal	8001b3e6 <printf>
    800052f4:	00144783          	lbu	a5,1(s0)
    800052f8:	00018597          	auipc	a1,0x18
    800052fc:	c8858593          	add	a1,a1,-888 # 8001cf80 <__func__.1+0x2d8>
    80005300:	c789                	beqz	a5,8000530a <virtual_instruction_6+0x10a>
    80005302:	6418                	ld	a4,8(s0)
    80005304:	47d9                	li	a5,22
    80005306:	12f70563          	beq	a4,a5,80005430 <virtual_instruction_6+0x230>
    8000530a:	00018517          	auipc	a0,0x18
    8000530e:	cb650513          	add	a0,a0,-842 # 8001cfc0 <__func__.1+0x318>
    80005312:	0d4160ef          	jal	8001b3e6 <printf>
    80005316:	00144783          	lbu	a5,1(s0)
    8000531a:	c789                	beqz	a5,80005324 <virtual_instruction_6+0x124>
    8000531c:	6418                	ld	a4,8(s0)
    8000531e:	47d9                	li	a5,22
    80005320:	00f70c63          	beq	a4,a5,80005338 <virtual_instruction_6+0x138>
    80005324:	00018517          	auipc	a0,0x18
    80005328:	ca450513          	add	a0,a0,-860 # 8001cfc8 <__func__.1+0x320>
    8000532c:	0ba160ef          	jal	8001b3e6 <printf>
    80005330:	02900513          	li	a0,41
    80005334:	785140ef          	jal	8001a2b8 <putchar>
    80005338:	4529                	li	a0,10
    8000533a:	77f140ef          	jal	8001a2b8 <putchar>
    8000533e:	c489                	beqz	s1,80005348 <virtual_instruction_6+0x148>
    80005340:	00144783          	lbu	a5,1(s0)
    80005344:	4481                	li	s1,0
    80005346:	e7f1                	bnez	a5,80005412 <virtual_instruction_6+0x212>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    goto_priv(PRIV_VU);
    80005348:	4501                	li	a0,0
    8000534a:	f94fb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000534e:	0ff0000f          	fence
    80005352:	4785                	li	a5,1
    80005354:	00f41023          	sh	a5,0(s0)
    80005358:	00038797          	auipc	a5,0x38
    8000535c:	ce07b823          	sd	zero,-784(a5) # 8003d048 <excpt+0x38>
    80005360:	0ff0000f          	fence
    asm volatile(
    80005364:	16000073          	.4byte	0x16000073
    Sinval_vma();
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80005368:	08200593          	li	a1,130
    8000536c:	00019617          	auipc	a2,0x19
    80005370:	adc60613          	add	a2,a2,-1316 # 8001de48 <__func__.1+0x11a0>
    80005374:	00018517          	auipc	a0,0x18
    80005378:	c3450513          	add	a0,a0,-972 # 8001cfa8 <__func__.1+0x300>
    8000537c:	06a160ef          	jal	8001b3e6 <printf>
    80005380:	00144783          	lbu	a5,1(s0)
    80005384:	00018597          	auipc	a1,0x18
    80005388:	bfc58593          	add	a1,a1,-1028 # 8001cf80 <__func__.1+0x2d8>
    8000538c:	c789                	beqz	a5,80005396 <virtual_instruction_6+0x196>
    8000538e:	6418                	ld	a4,8(s0)
    80005390:	47d9                	li	a5,22
    80005392:	08f70563          	beq	a4,a5,8000541c <virtual_instruction_6+0x21c>
    80005396:	00018517          	auipc	a0,0x18
    8000539a:	c2a50513          	add	a0,a0,-982 # 8001cfc0 <__func__.1+0x318>
    8000539e:	048160ef          	jal	8001b3e6 <printf>
    800053a2:	00144783          	lbu	a5,1(s0)
    800053a6:	c789                	beqz	a5,800053b0 <virtual_instruction_6+0x1b0>
    800053a8:	6418                	ld	a4,8(s0)
    800053aa:	47d9                	li	a5,22
    800053ac:	00f70c63          	beq	a4,a5,800053c4 <virtual_instruction_6+0x1c4>
    800053b0:	00018517          	auipc	a0,0x18
    800053b4:	c1850513          	add	a0,a0,-1000 # 8001cfc8 <__func__.1+0x320>
    800053b8:	02e160ef          	jal	8001b3e6 <printf>
    800053bc:	02900513          	li	a0,41
    800053c0:	6f9140ef          	jal	8001a2b8 <putchar>
    800053c4:	4529                	li	a0,10
    800053c6:	6f3140ef          	jal	8001a2b8 <putchar>
    800053ca:	cc95                	beqz	s1,80005406 <virtual_instruction_6+0x206>
    800053cc:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    800053d0:	00018597          	auipc	a1,0x18
    800053d4:	bb058593          	add	a1,a1,-1104 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    800053d8:	c491                	beqz	s1,800053e4 <virtual_instruction_6+0x1e4>
    800053da:	6418                	ld	a4,8(s0)
    800053dc:	47d9                	li	a5,22
    800053de:	04f70e63          	beq	a4,a5,8000543a <virtual_instruction_6+0x23a>
    800053e2:	4481                	li	s1,0
    TEST_END();
    800053e4:	00018517          	auipc	a0,0x18
    800053e8:	c4450513          	add	a0,a0,-956 # 8001d028 <__func__.1+0x380>
    800053ec:	7fb150ef          	jal	8001b3e6 <printf>
    800053f0:	4511                	li	a0,4
    800053f2:	eecfb0ef          	jal	80000ade <goto_priv>
    800053f6:	f31fb0ef          	jal	80001326 <reset_state>
}
    800053fa:	60e2                	ld	ra,24(sp)
    800053fc:	6442                	ld	s0,16(sp)
    800053fe:	8526                	mv	a0,s1
    80005400:	64a2                	ld	s1,8(sp)
    80005402:	6105                	add	sp,sp,32
    80005404:	8082                	ret
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80005406:	4481                	li	s1,0
    TEST_END();
    80005408:	00018597          	auipc	a1,0x18
    8000540c:	b7858593          	add	a1,a1,-1160 # 8001cf80 <__func__.1+0x2d8>
    80005410:	bfd1                	j	800053e4 <virtual_instruction_6+0x1e4>
    TEST_ASSERT("vu executing hfence.gvma leads to virtual instruction exception",
    80005412:	6404                	ld	s1,8(s0)
    80005414:	14a9                	add	s1,s1,-22
    80005416:	0014b493          	seqz	s1,s1
    8000541a:	b73d                	j	80005348 <virtual_instruction_6+0x148>
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    8000541c:	00018597          	auipc	a1,0x18
    80005420:	b5458593          	add	a1,a1,-1196 # 8001cf70 <__func__.1+0x2c8>
    80005424:	bf8d                	j	80005396 <virtual_instruction_6+0x196>
    TEST_ASSERT("vu executing hfence.vvma leads to virtual instruction exception",
    80005426:	00018597          	auipc	a1,0x18
    8000542a:	b4a58593          	add	a1,a1,-1206 # 8001cf70 <__func__.1+0x2c8>
    8000542e:	b5a9                	j	80005278 <virtual_instruction_6+0x78>
    TEST_ASSERT("vu executing hfence.gvma leads to virtual instruction exception",
    80005430:	00018597          	auipc	a1,0x18
    80005434:	b4058593          	add	a1,a1,-1216 # 8001cf70 <__func__.1+0x2c8>
    80005438:	bdc9                	j	8000530a <virtual_instruction_6+0x10a>
    TEST_END();
    8000543a:	00018597          	auipc	a1,0x18
    8000543e:	b3658593          	add	a1,a1,-1226 # 8001cf70 <__func__.1+0x2c8>
    80005442:	b74d                	j	800053e4 <virtual_instruction_6+0x1e4>

0000000080005444 <virtual_instruction_7>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_7() {
    80005444:	1101                	add	sp,sp,-32

    TEST_START();
    80005446:	00016597          	auipc	a1,0x16
    8000544a:	79a58593          	add	a1,a1,1946 # 8001bbe0 <__func__.4>
    8000544e:	00018517          	auipc	a0,0x18
    80005452:	b4250513          	add	a0,a0,-1214 # 8001cf90 <__func__.1+0x2e8>
bool virtual_instruction_7() {
    80005456:	ec06                	sd	ra,24(sp)
    80005458:	e822                	sd	s0,16(sp)
    8000545a:	e426                	sd	s1,8(sp)
    TEST_START();
    8000545c:	78b150ef          	jal	8001b3e6 <printf>
    80005460:	4529                	li	a0,10
    80005462:	657140ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_VU);
    80005466:	4501                	li	a0,0
    80005468:	e76fb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000546c:	0ff0000f          	fence
    80005470:	4785                	li	a5,1
    80005472:	00038417          	auipc	s0,0x38
    80005476:	b9e40413          	add	s0,s0,-1122 # 8003d010 <excpt>
    8000547a:	00f41023          	sh	a5,0(s0)
    8000547e:	00038797          	auipc	a5,0x38
    80005482:	bc07b523          	sd	zero,-1078(a5) # 8003d048 <excpt+0x38>
    80005486:	0ff0000f          	fence
    asm volatile(
    8000548a:	4781                	li	a5,0
    8000548c:	6007c7f3          	.4byte	0x6007c7f3
    uint64_t tmp = hlvb(0);

    TEST_ASSERT("vu hlvb leads to virtual instruction exception",
    80005490:	08200593          	li	a1,130
    80005494:	00019617          	auipc	a2,0x19
    80005498:	a0460613          	add	a2,a2,-1532 # 8001de98 <__func__.1+0x11f0>
    8000549c:	00018517          	auipc	a0,0x18
    800054a0:	b0c50513          	add	a0,a0,-1268 # 8001cfa8 <__func__.1+0x300>
    800054a4:	743150ef          	jal	8001b3e6 <printf>
    800054a8:	00144783          	lbu	a5,1(s0)
    800054ac:	00018597          	auipc	a1,0x18
    800054b0:	ad458593          	add	a1,a1,-1324 # 8001cf80 <__func__.1+0x2d8>
    800054b4:	c789                	beqz	a5,800054be <virtual_instruction_7+0x7a>
    800054b6:	6418                	ld	a4,8(s0)
    800054b8:	47d9                	li	a5,22
    800054ba:	5cf70e63          	beq	a4,a5,80005a96 <virtual_instruction_7+0x652>
    800054be:	00018517          	auipc	a0,0x18
    800054c2:	b0250513          	add	a0,a0,-1278 # 8001cfc0 <__func__.1+0x318>
    800054c6:	721150ef          	jal	8001b3e6 <printf>
    800054ca:	00144783          	lbu	a5,1(s0)
    800054ce:	c789                	beqz	a5,800054d8 <virtual_instruction_7+0x94>
    800054d0:	6418                	ld	a4,8(s0)
    800054d2:	47d9                	li	a5,22
    800054d4:	00f70c63          	beq	a4,a5,800054ec <virtual_instruction_7+0xa8>
    800054d8:	00018517          	auipc	a0,0x18
    800054dc:	af050513          	add	a0,a0,-1296 # 8001cfc8 <__func__.1+0x320>
    800054e0:	707150ef          	jal	8001b3e6 <printf>
    800054e4:	02900513          	li	a0,41
    800054e8:	5d1140ef          	jal	8001a2b8 <putchar>
    800054ec:	4529                	li	a0,10
    800054ee:	5cb140ef          	jal	8001a2b8 <putchar>
    800054f2:	00144783          	lbu	a5,1(s0)
    800054f6:	4481                	li	s1,0
    800054f8:	c789                	beqz	a5,80005502 <virtual_instruction_7+0xbe>
    800054fa:	6404                	ld	s1,8(s0)
    800054fc:	14a9                	add	s1,s1,-22
    800054fe:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005502:	4501                	li	a0,0
    80005504:	ddafb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80005508:	0ff0000f          	fence
    8000550c:	4785                	li	a5,1
    8000550e:	00f41023          	sh	a5,0(s0)
    80005512:	00038797          	auipc	a5,0x38
    80005516:	b207bb23          	sd	zero,-1226(a5) # 8003d048 <excpt+0x38>
    8000551a:	0ff0000f          	fence
    asm volatile(
    8000551e:	4781                	li	a5,0
    80005520:	6017c7f3          	.4byte	0x6017c7f3
     tmp = hlvbu(0);

    TEST_ASSERT("vu hlvbu leads to virtual instruction exception",
    80005524:	08200593          	li	a1,130
    80005528:	00019617          	auipc	a2,0x19
    8000552c:	9a060613          	add	a2,a2,-1632 # 8001dec8 <__func__.1+0x1220>
    80005530:	00018517          	auipc	a0,0x18
    80005534:	a7850513          	add	a0,a0,-1416 # 8001cfa8 <__func__.1+0x300>
    80005538:	6af150ef          	jal	8001b3e6 <printf>
    8000553c:	00144783          	lbu	a5,1(s0)
    80005540:	00018597          	auipc	a1,0x18
    80005544:	a4058593          	add	a1,a1,-1472 # 8001cf80 <__func__.1+0x2d8>
    80005548:	c789                	beqz	a5,80005552 <virtual_instruction_7+0x10e>
    8000554a:	6418                	ld	a4,8(s0)
    8000554c:	47d9                	li	a5,22
    8000554e:	54f70963          	beq	a4,a5,80005aa0 <virtual_instruction_7+0x65c>
    80005552:	00018517          	auipc	a0,0x18
    80005556:	a6e50513          	add	a0,a0,-1426 # 8001cfc0 <__func__.1+0x318>
    8000555a:	68d150ef          	jal	8001b3e6 <printf>
    8000555e:	00144783          	lbu	a5,1(s0)
    80005562:	c789                	beqz	a5,8000556c <virtual_instruction_7+0x128>
    80005564:	6418                	ld	a4,8(s0)
    80005566:	47d9                	li	a5,22
    80005568:	00f70c63          	beq	a4,a5,80005580 <virtual_instruction_7+0x13c>
    8000556c:	00018517          	auipc	a0,0x18
    80005570:	a5c50513          	add	a0,a0,-1444 # 8001cfc8 <__func__.1+0x320>
    80005574:	673150ef          	jal	8001b3e6 <printf>
    80005578:	02900513          	li	a0,41
    8000557c:	53d140ef          	jal	8001a2b8 <putchar>
    80005580:	4529                	li	a0,10
    80005582:	537140ef          	jal	8001a2b8 <putchar>
    80005586:	c491                	beqz	s1,80005592 <virtual_instruction_7+0x14e>
    80005588:	00144783          	lbu	a5,1(s0)
    8000558c:	4481                	li	s1,0
    8000558e:	4c079663          	bnez	a5,80005a5a <virtual_instruction_7+0x616>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005592:	4501                	li	a0,0
    80005594:	d4afb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80005598:	0ff0000f          	fence
    8000559c:	4785                	li	a5,1
    8000559e:	00f41023          	sh	a5,0(s0)
    800055a2:	00038797          	auipc	a5,0x38
    800055a6:	aa07b323          	sd	zero,-1370(a5) # 8003d048 <excpt+0x38>
    800055aa:	0ff0000f          	fence
    asm volatile(
    800055ae:	4781                	li	a5,0
    800055b0:	6407c7f3          	.4byte	0x6407c7f3
     tmp = hlvh(0);

    TEST_ASSERT("vu hlvh leads to virtual instruction exception",
    800055b4:	08200593          	li	a1,130
    800055b8:	00019617          	auipc	a2,0x19
    800055bc:	94060613          	add	a2,a2,-1728 # 8001def8 <__func__.1+0x1250>
    800055c0:	00018517          	auipc	a0,0x18
    800055c4:	9e850513          	add	a0,a0,-1560 # 8001cfa8 <__func__.1+0x300>
    800055c8:	61f150ef          	jal	8001b3e6 <printf>
    800055cc:	00144783          	lbu	a5,1(s0)
    800055d0:	00018597          	auipc	a1,0x18
    800055d4:	9b058593          	add	a1,a1,-1616 # 8001cf80 <__func__.1+0x2d8>
    800055d8:	c789                	beqz	a5,800055e2 <virtual_instruction_7+0x19e>
    800055da:	6418                	ld	a4,8(s0)
    800055dc:	47d9                	li	a5,22
    800055de:	48f70363          	beq	a4,a5,80005a64 <virtual_instruction_7+0x620>
    800055e2:	00018517          	auipc	a0,0x18
    800055e6:	9de50513          	add	a0,a0,-1570 # 8001cfc0 <__func__.1+0x318>
    800055ea:	5fd150ef          	jal	8001b3e6 <printf>
    800055ee:	00144783          	lbu	a5,1(s0)
    800055f2:	c789                	beqz	a5,800055fc <virtual_instruction_7+0x1b8>
    800055f4:	6418                	ld	a4,8(s0)
    800055f6:	47d9                	li	a5,22
    800055f8:	00f70c63          	beq	a4,a5,80005610 <virtual_instruction_7+0x1cc>
    800055fc:	00018517          	auipc	a0,0x18
    80005600:	9cc50513          	add	a0,a0,-1588 # 8001cfc8 <__func__.1+0x320>
    80005604:	5e3150ef          	jal	8001b3e6 <printf>
    80005608:	02900513          	li	a0,41
    8000560c:	4ad140ef          	jal	8001a2b8 <putchar>
    80005610:	4529                	li	a0,10
    80005612:	4a7140ef          	jal	8001a2b8 <putchar>
    80005616:	c491                	beqz	s1,80005622 <virtual_instruction_7+0x1de>
    80005618:	00144783          	lbu	a5,1(s0)
    8000561c:	4481                	li	s1,0
    8000561e:	42079963          	bnez	a5,80005a50 <virtual_instruction_7+0x60c>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005622:	4501                	li	a0,0
    80005624:	cbafb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80005628:	0ff0000f          	fence
    8000562c:	4785                	li	a5,1
    8000562e:	00f41023          	sh	a5,0(s0)
    80005632:	00038797          	auipc	a5,0x38
    80005636:	a007bb23          	sd	zero,-1514(a5) # 8003d048 <excpt+0x38>
    8000563a:	0ff0000f          	fence
    asm volatile(
    8000563e:	4781                	li	a5,0
    80005640:	6807c7f3          	.4byte	0x6807c7f3
     tmp = hlvw(0);

    TEST_ASSERT("vu hlvw leads to virtual instruction exception",
    80005644:	08200593          	li	a1,130
    80005648:	00019617          	auipc	a2,0x19
    8000564c:	8e060613          	add	a2,a2,-1824 # 8001df28 <__func__.1+0x1280>
    80005650:	00018517          	auipc	a0,0x18
    80005654:	95850513          	add	a0,a0,-1704 # 8001cfa8 <__func__.1+0x300>
    80005658:	58f150ef          	jal	8001b3e6 <printf>
    8000565c:	00144783          	lbu	a5,1(s0)
    80005660:	00018597          	auipc	a1,0x18
    80005664:	92058593          	add	a1,a1,-1760 # 8001cf80 <__func__.1+0x2d8>
    80005668:	c789                	beqz	a5,80005672 <virtual_instruction_7+0x22e>
    8000566a:	6418                	ld	a4,8(s0)
    8000566c:	47d9                	li	a5,22
    8000566e:	42f70e63          	beq	a4,a5,80005aaa <virtual_instruction_7+0x666>
    80005672:	00018517          	auipc	a0,0x18
    80005676:	94e50513          	add	a0,a0,-1714 # 8001cfc0 <__func__.1+0x318>
    8000567a:	56d150ef          	jal	8001b3e6 <printf>
    8000567e:	00144783          	lbu	a5,1(s0)
    80005682:	c789                	beqz	a5,8000568c <virtual_instruction_7+0x248>
    80005684:	6418                	ld	a4,8(s0)
    80005686:	47d9                	li	a5,22
    80005688:	00f70c63          	beq	a4,a5,800056a0 <virtual_instruction_7+0x25c>
    8000568c:	00018517          	auipc	a0,0x18
    80005690:	93c50513          	add	a0,a0,-1732 # 8001cfc8 <__func__.1+0x320>
    80005694:	553150ef          	jal	8001b3e6 <printf>
    80005698:	02900513          	li	a0,41
    8000569c:	41d140ef          	jal	8001a2b8 <putchar>
    800056a0:	4529                	li	a0,10
    800056a2:	417140ef          	jal	8001a2b8 <putchar>
    800056a6:	c491                	beqz	s1,800056b2 <virtual_instruction_7+0x26e>
    800056a8:	00144783          	lbu	a5,1(s0)
    800056ac:	4481                	li	s1,0
    800056ae:	38079c63          	bnez	a5,80005a46 <virtual_instruction_7+0x602>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    800056b2:	4501                	li	a0,0
    800056b4:	c2afb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    800056b8:	0ff0000f          	fence
    800056bc:	4785                	li	a5,1
    800056be:	00f41023          	sh	a5,0(s0)
    800056c2:	00038797          	auipc	a5,0x38
    800056c6:	9807b323          	sd	zero,-1658(a5) # 8003d048 <excpt+0x38>
    800056ca:	0ff0000f          	fence
    asm volatile(
    800056ce:	4781                	li	a5,0
    800056d0:	6c07c7f3          	.4byte	0x6c07c7f3
     tmp = hlvd(0);

    TEST_ASSERT("vu hlvd leads to virtual instruction exception",
    800056d4:	08200593          	li	a1,130
    800056d8:	00019617          	auipc	a2,0x19
    800056dc:	88060613          	add	a2,a2,-1920 # 8001df58 <__func__.1+0x12b0>
    800056e0:	00018517          	auipc	a0,0x18
    800056e4:	8c850513          	add	a0,a0,-1848 # 8001cfa8 <__func__.1+0x300>
    800056e8:	4ff150ef          	jal	8001b3e6 <printf>
    800056ec:	00144783          	lbu	a5,1(s0)
    800056f0:	00018597          	auipc	a1,0x18
    800056f4:	89058593          	add	a1,a1,-1904 # 8001cf80 <__func__.1+0x2d8>
    800056f8:	c789                	beqz	a5,80005702 <virtual_instruction_7+0x2be>
    800056fa:	6418                	ld	a4,8(s0)
    800056fc:	47d9                	li	a5,22
    800056fe:	3af70b63          	beq	a4,a5,80005ab4 <virtual_instruction_7+0x670>
    80005702:	00018517          	auipc	a0,0x18
    80005706:	8be50513          	add	a0,a0,-1858 # 8001cfc0 <__func__.1+0x318>
    8000570a:	4dd150ef          	jal	8001b3e6 <printf>
    8000570e:	00144783          	lbu	a5,1(s0)
    80005712:	c789                	beqz	a5,8000571c <virtual_instruction_7+0x2d8>
    80005714:	6418                	ld	a4,8(s0)
    80005716:	47d9                	li	a5,22
    80005718:	00f70c63          	beq	a4,a5,80005730 <virtual_instruction_7+0x2ec>
    8000571c:	00018517          	auipc	a0,0x18
    80005720:	8ac50513          	add	a0,a0,-1876 # 8001cfc8 <__func__.1+0x320>
    80005724:	4c3150ef          	jal	8001b3e6 <printf>
    80005728:	02900513          	li	a0,41
    8000572c:	38d140ef          	jal	8001a2b8 <putchar>
    80005730:	4529                	li	a0,10
    80005732:	387140ef          	jal	8001a2b8 <putchar>
    80005736:	c491                	beqz	s1,80005742 <virtual_instruction_7+0x2fe>
    80005738:	00144783          	lbu	a5,1(s0)
    8000573c:	4481                	li	s1,0
    8000573e:	2e079f63          	bnez	a5,80005a3c <virtual_instruction_7+0x5f8>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005742:	4501                	li	a0,0
    80005744:	b9afb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80005748:	0ff0000f          	fence
    8000574c:	4785                	li	a5,1
    8000574e:	00f41023          	sh	a5,0(s0)
    80005752:	00038797          	auipc	a5,0x38
    80005756:	8e07bb23          	sd	zero,-1802(a5) # 8003d048 <excpt+0x38>
    8000575a:	0ff0000f          	fence
    asm volatile(
    8000575e:	37ab77b7          	lui	a5,0x37ab7
    80005762:	078a                	sll	a5,a5,0x2
    80005764:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005768:	4701                	li	a4,0
    8000576a:	62f74073          	.4byte	0x62f74073
    hsvb(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    8000576e:	640c                	ld	a1,8(s0)
    80005770:	00018517          	auipc	a0,0x18
    80005774:	28850513          	add	a0,a0,648 # 8001d9f8 <__func__.1+0xd50>
    80005778:	46f150ef          	jal	8001b3e6 <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    8000577c:	08200593          	li	a1,130
    80005780:	00019617          	auipc	a2,0x19
    80005784:	80860613          	add	a2,a2,-2040 # 8001df88 <__func__.1+0x12e0>
    80005788:	00018517          	auipc	a0,0x18
    8000578c:	82050513          	add	a0,a0,-2016 # 8001cfa8 <__func__.1+0x300>
    80005790:	457150ef          	jal	8001b3e6 <printf>
    80005794:	00144783          	lbu	a5,1(s0)
    80005798:	00017597          	auipc	a1,0x17
    8000579c:	7e858593          	add	a1,a1,2024 # 8001cf80 <__func__.1+0x2d8>
    800057a0:	c789                	beqz	a5,800057aa <virtual_instruction_7+0x366>
    800057a2:	6418                	ld	a4,8(s0)
    800057a4:	47d9                	li	a5,22
    800057a6:	2cf70e63          	beq	a4,a5,80005a82 <virtual_instruction_7+0x63e>
    800057aa:	00018517          	auipc	a0,0x18
    800057ae:	81650513          	add	a0,a0,-2026 # 8001cfc0 <__func__.1+0x318>
    800057b2:	435150ef          	jal	8001b3e6 <printf>
    800057b6:	00144783          	lbu	a5,1(s0)
    800057ba:	c789                	beqz	a5,800057c4 <virtual_instruction_7+0x380>
    800057bc:	6418                	ld	a4,8(s0)
    800057be:	47d9                	li	a5,22
    800057c0:	00f70c63          	beq	a4,a5,800057d8 <virtual_instruction_7+0x394>
    800057c4:	00018517          	auipc	a0,0x18
    800057c8:	80450513          	add	a0,a0,-2044 # 8001cfc8 <__func__.1+0x320>
    800057cc:	41b150ef          	jal	8001b3e6 <printf>
    800057d0:	02900513          	li	a0,41
    800057d4:	2e5140ef          	jal	8001a2b8 <putchar>
    800057d8:	4529                	li	a0,10
    800057da:	2df140ef          	jal	8001a2b8 <putchar>
    800057de:	c491                	beqz	s1,800057ea <virtual_instruction_7+0x3a6>
    800057e0:	00144783          	lbu	a5,1(s0)
    800057e4:	4481                	li	s1,0
    800057e6:	24079663          	bnez	a5,80005a32 <virtual_instruction_7+0x5ee>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    800057ea:	4501                	li	a0,0
    800057ec:	af2fb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    800057f0:	0ff0000f          	fence
    800057f4:	4785                	li	a5,1
    800057f6:	00f41023          	sh	a5,0(s0)
    800057fa:	00038797          	auipc	a5,0x38
    800057fe:	8407b723          	sd	zero,-1970(a5) # 8003d048 <excpt+0x38>
    80005802:	0ff0000f          	fence
    asm volatile(
    80005806:	37ab77b7          	lui	a5,0x37ab7
    8000580a:	078a                	sll	a5,a5,0x2
    8000580c:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005810:	4701                	li	a4,0
    80005812:	6ef74073          	.4byte	0x6ef74073
    hsvd(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005816:	640c                	ld	a1,8(s0)
    80005818:	00018517          	auipc	a0,0x18
    8000581c:	1e050513          	add	a0,a0,480 # 8001d9f8 <__func__.1+0xd50>
    80005820:	3c7150ef          	jal	8001b3e6 <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005824:	08200593          	li	a1,130
    80005828:	00018617          	auipc	a2,0x18
    8000582c:	76060613          	add	a2,a2,1888 # 8001df88 <__func__.1+0x12e0>
    80005830:	00017517          	auipc	a0,0x17
    80005834:	77850513          	add	a0,a0,1912 # 8001cfa8 <__func__.1+0x300>
    80005838:	3af150ef          	jal	8001b3e6 <printf>
    8000583c:	00144783          	lbu	a5,1(s0)
    80005840:	00017597          	auipc	a1,0x17
    80005844:	74058593          	add	a1,a1,1856 # 8001cf80 <__func__.1+0x2d8>
    80005848:	c789                	beqz	a5,80005852 <virtual_instruction_7+0x40e>
    8000584a:	6418                	ld	a4,8(s0)
    8000584c:	47d9                	li	a5,22
    8000584e:	22f70f63          	beq	a4,a5,80005a8c <virtual_instruction_7+0x648>
    80005852:	00017517          	auipc	a0,0x17
    80005856:	76e50513          	add	a0,a0,1902 # 8001cfc0 <__func__.1+0x318>
    8000585a:	38d150ef          	jal	8001b3e6 <printf>
    8000585e:	00144783          	lbu	a5,1(s0)
    80005862:	c789                	beqz	a5,8000586c <virtual_instruction_7+0x428>
    80005864:	6418                	ld	a4,8(s0)
    80005866:	47d9                	li	a5,22
    80005868:	00f70c63          	beq	a4,a5,80005880 <virtual_instruction_7+0x43c>
    8000586c:	00017517          	auipc	a0,0x17
    80005870:	75c50513          	add	a0,a0,1884 # 8001cfc8 <__func__.1+0x320>
    80005874:	373150ef          	jal	8001b3e6 <printf>
    80005878:	02900513          	li	a0,41
    8000587c:	23d140ef          	jal	8001a2b8 <putchar>
    80005880:	4529                	li	a0,10
    80005882:	237140ef          	jal	8001a2b8 <putchar>
    80005886:	c491                	beqz	s1,80005892 <virtual_instruction_7+0x44e>
    80005888:	00144783          	lbu	a5,1(s0)
    8000588c:	4481                	li	s1,0
    8000588e:	18079d63          	bnez	a5,80005a28 <virtual_instruction_7+0x5e4>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005892:	4501                	li	a0,0
    80005894:	a4afb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80005898:	0ff0000f          	fence
    8000589c:	4785                	li	a5,1
    8000589e:	00f41023          	sh	a5,0(s0)
    800058a2:	00037797          	auipc	a5,0x37
    800058a6:	7a07b323          	sd	zero,1958(a5) # 8003d048 <excpt+0x38>
    800058aa:	0ff0000f          	fence
    asm volatile(
    800058ae:	37ab77b7          	lui	a5,0x37ab7
    800058b2:	078a                	sll	a5,a5,0x2
    800058b4:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800058b8:	4701                	li	a4,0
    800058ba:	6af74073          	.4byte	0x6af74073
    hsvw(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    800058be:	640c                	ld	a1,8(s0)
    800058c0:	00018517          	auipc	a0,0x18
    800058c4:	13850513          	add	a0,a0,312 # 8001d9f8 <__func__.1+0xd50>
    800058c8:	31f150ef          	jal	8001b3e6 <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    800058cc:	08200593          	li	a1,130
    800058d0:	00018617          	auipc	a2,0x18
    800058d4:	6b860613          	add	a2,a2,1720 # 8001df88 <__func__.1+0x12e0>
    800058d8:	00017517          	auipc	a0,0x17
    800058dc:	6d050513          	add	a0,a0,1744 # 8001cfa8 <__func__.1+0x300>
    800058e0:	307150ef          	jal	8001b3e6 <printf>
    800058e4:	00144783          	lbu	a5,1(s0)
    800058e8:	00017597          	auipc	a1,0x17
    800058ec:	69858593          	add	a1,a1,1688 # 8001cf80 <__func__.1+0x2d8>
    800058f0:	c789                	beqz	a5,800058fa <virtual_instruction_7+0x4b6>
    800058f2:	6418                	ld	a4,8(s0)
    800058f4:	47d9                	li	a5,22
    800058f6:	16f70c63          	beq	a4,a5,80005a6e <virtual_instruction_7+0x62a>
    800058fa:	00017517          	auipc	a0,0x17
    800058fe:	6c650513          	add	a0,a0,1734 # 8001cfc0 <__func__.1+0x318>
    80005902:	2e5150ef          	jal	8001b3e6 <printf>
    80005906:	00144783          	lbu	a5,1(s0)
    8000590a:	c789                	beqz	a5,80005914 <virtual_instruction_7+0x4d0>
    8000590c:	6418                	ld	a4,8(s0)
    8000590e:	47d9                	li	a5,22
    80005910:	00f70c63          	beq	a4,a5,80005928 <virtual_instruction_7+0x4e4>
    80005914:	00017517          	auipc	a0,0x17
    80005918:	6b450513          	add	a0,a0,1716 # 8001cfc8 <__func__.1+0x320>
    8000591c:	2cb150ef          	jal	8001b3e6 <printf>
    80005920:	02900513          	li	a0,41
    80005924:	195140ef          	jal	8001a2b8 <putchar>
    80005928:	4529                	li	a0,10
    8000592a:	18f140ef          	jal	8001a2b8 <putchar>
    8000592e:	c491                	beqz	s1,8000593a <virtual_instruction_7+0x4f6>
    80005930:	00144783          	lbu	a5,1(s0)
    80005934:	4481                	li	s1,0
    80005936:	0e079463          	bnez	a5,80005a1e <virtual_instruction_7+0x5da>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    8000593a:	4501                	li	a0,0
    8000593c:	9a2fb0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80005940:	0ff0000f          	fence
    80005944:	4785                	li	a5,1
    80005946:	00f41023          	sh	a5,0(s0)
    8000594a:	00037797          	auipc	a5,0x37
    8000594e:	6e07bf23          	sd	zero,1790(a5) # 8003d048 <excpt+0x38>
    80005952:	0ff0000f          	fence
    asm volatile(
    80005956:	37ab77b7          	lui	a5,0x37ab7
    8000595a:	078a                	sll	a5,a5,0x2
    8000595c:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005960:	4701                	li	a4,0
    80005962:	66f74073          	.4byte	0x66f74073
    hsvh(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005966:	640c                	ld	a1,8(s0)
    80005968:	00018517          	auipc	a0,0x18
    8000596c:	09050513          	add	a0,a0,144 # 8001d9f8 <__func__.1+0xd50>
    80005970:	277150ef          	jal	8001b3e6 <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005974:	08200593          	li	a1,130
    80005978:	00018617          	auipc	a2,0x18
    8000597c:	61060613          	add	a2,a2,1552 # 8001df88 <__func__.1+0x12e0>
    80005980:	00017517          	auipc	a0,0x17
    80005984:	62850513          	add	a0,a0,1576 # 8001cfa8 <__func__.1+0x300>
    80005988:	25f150ef          	jal	8001b3e6 <printf>
    8000598c:	00144783          	lbu	a5,1(s0)
    80005990:	00017597          	auipc	a1,0x17
    80005994:	5f058593          	add	a1,a1,1520 # 8001cf80 <__func__.1+0x2d8>
    80005998:	c789                	beqz	a5,800059a2 <virtual_instruction_7+0x55e>
    8000599a:	6418                	ld	a4,8(s0)
    8000599c:	47d9                	li	a5,22
    8000599e:	0cf70d63          	beq	a4,a5,80005a78 <virtual_instruction_7+0x634>
    800059a2:	00017517          	auipc	a0,0x17
    800059a6:	61e50513          	add	a0,a0,1566 # 8001cfc0 <__func__.1+0x318>
    800059aa:	23d150ef          	jal	8001b3e6 <printf>
    800059ae:	00144783          	lbu	a5,1(s0)
    800059b2:	c789                	beqz	a5,800059bc <virtual_instruction_7+0x578>
    800059b4:	6418                	ld	a4,8(s0)
    800059b6:	47d9                	li	a5,22
    800059b8:	00f70c63          	beq	a4,a5,800059d0 <virtual_instruction_7+0x58c>
    800059bc:	00017517          	auipc	a0,0x17
    800059c0:	60c50513          	add	a0,a0,1548 # 8001cfc8 <__func__.1+0x320>
    800059c4:	223150ef          	jal	8001b3e6 <printf>
    800059c8:	02900513          	li	a0,41
    800059cc:	0ed140ef          	jal	8001a2b8 <putchar>
    800059d0:	4529                	li	a0,10
    800059d2:	0e7140ef          	jal	8001a2b8 <putchar>
    800059d6:	cc95                	beqz	s1,80005a12 <virtual_instruction_7+0x5ce>
    800059d8:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    TEST_END();
    800059dc:	00017597          	auipc	a1,0x17
    800059e0:	5a458593          	add	a1,a1,1444 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    800059e4:	c491                	beqz	s1,800059f0 <virtual_instruction_7+0x5ac>
    800059e6:	6418                	ld	a4,8(s0)
    800059e8:	47d9                	li	a5,22
    800059ea:	0cf70a63          	beq	a4,a5,80005abe <virtual_instruction_7+0x67a>
    800059ee:	4481                	li	s1,0
    TEST_END();
    800059f0:	00017517          	auipc	a0,0x17
    800059f4:	63850513          	add	a0,a0,1592 # 8001d028 <__func__.1+0x380>
    800059f8:	1ef150ef          	jal	8001b3e6 <printf>
    800059fc:	4511                	li	a0,4
    800059fe:	8e0fb0ef          	jal	80000ade <goto_priv>
    80005a02:	925fb0ef          	jal	80001326 <reset_state>
}
    80005a06:	60e2                	ld	ra,24(sp)
    80005a08:	6442                	ld	s0,16(sp)
    80005a0a:	8526                	mv	a0,s1
    80005a0c:	64a2                	ld	s1,8(sp)
    80005a0e:	6105                	add	sp,sp,32
    80005a10:	8082                	ret
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005a12:	4481                	li	s1,0
    TEST_END();
    80005a14:	00017597          	auipc	a1,0x17
    80005a18:	56c58593          	add	a1,a1,1388 # 8001cf80 <__func__.1+0x2d8>
    80005a1c:	bfd1                	j	800059f0 <virtual_instruction_7+0x5ac>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005a1e:	6404                	ld	s1,8(s0)
    80005a20:	14a9                	add	s1,s1,-22
    80005a22:	0014b493          	seqz	s1,s1
    80005a26:	bf11                	j	8000593a <virtual_instruction_7+0x4f6>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005a28:	6404                	ld	s1,8(s0)
    80005a2a:	14a9                	add	s1,s1,-22
    80005a2c:	0014b493          	seqz	s1,s1
    80005a30:	b58d                	j	80005892 <virtual_instruction_7+0x44e>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005a32:	6404                	ld	s1,8(s0)
    80005a34:	14a9                	add	s1,s1,-22
    80005a36:	0014b493          	seqz	s1,s1
    80005a3a:	bb45                	j	800057ea <virtual_instruction_7+0x3a6>
    TEST_ASSERT("vu hlvd leads to virtual instruction exception",
    80005a3c:	6404                	ld	s1,8(s0)
    80005a3e:	14a9                	add	s1,s1,-22
    80005a40:	0014b493          	seqz	s1,s1
    80005a44:	b9fd                	j	80005742 <virtual_instruction_7+0x2fe>
    TEST_ASSERT("vu hlvw leads to virtual instruction exception",
    80005a46:	6404                	ld	s1,8(s0)
    80005a48:	14a9                	add	s1,s1,-22
    80005a4a:	0014b493          	seqz	s1,s1
    80005a4e:	b195                	j	800056b2 <virtual_instruction_7+0x26e>
    TEST_ASSERT("vu hlvh leads to virtual instruction exception",
    80005a50:	6404                	ld	s1,8(s0)
    80005a52:	14a9                	add	s1,s1,-22
    80005a54:	0014b493          	seqz	s1,s1
    80005a58:	b6e9                	j	80005622 <virtual_instruction_7+0x1de>
    TEST_ASSERT("vu hlvbu leads to virtual instruction exception",
    80005a5a:	6404                	ld	s1,8(s0)
    80005a5c:	14a9                	add	s1,s1,-22
    80005a5e:	0014b493          	seqz	s1,s1
    80005a62:	be05                	j	80005592 <virtual_instruction_7+0x14e>
    TEST_ASSERT("vu hlvh leads to virtual instruction exception",
    80005a64:	00017597          	auipc	a1,0x17
    80005a68:	50c58593          	add	a1,a1,1292 # 8001cf70 <__func__.1+0x2c8>
    80005a6c:	be9d                	j	800055e2 <virtual_instruction_7+0x19e>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005a6e:	00017597          	auipc	a1,0x17
    80005a72:	50258593          	add	a1,a1,1282 # 8001cf70 <__func__.1+0x2c8>
    80005a76:	b551                	j	800058fa <virtual_instruction_7+0x4b6>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005a78:	00017597          	auipc	a1,0x17
    80005a7c:	4f858593          	add	a1,a1,1272 # 8001cf70 <__func__.1+0x2c8>
    80005a80:	b70d                	j	800059a2 <virtual_instruction_7+0x55e>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005a82:	00017597          	auipc	a1,0x17
    80005a86:	4ee58593          	add	a1,a1,1262 # 8001cf70 <__func__.1+0x2c8>
    80005a8a:	b305                	j	800057aa <virtual_instruction_7+0x366>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005a8c:	00017597          	auipc	a1,0x17
    80005a90:	4e458593          	add	a1,a1,1252 # 8001cf70 <__func__.1+0x2c8>
    80005a94:	bb7d                	j	80005852 <virtual_instruction_7+0x40e>
    TEST_ASSERT("vu hlvb leads to virtual instruction exception",
    80005a96:	00017597          	auipc	a1,0x17
    80005a9a:	4da58593          	add	a1,a1,1242 # 8001cf70 <__func__.1+0x2c8>
    80005a9e:	b405                	j	800054be <virtual_instruction_7+0x7a>
    TEST_ASSERT("vu hlvbu leads to virtual instruction exception",
    80005aa0:	00017597          	auipc	a1,0x17
    80005aa4:	4d058593          	add	a1,a1,1232 # 8001cf70 <__func__.1+0x2c8>
    80005aa8:	b46d                	j	80005552 <virtual_instruction_7+0x10e>
    TEST_ASSERT("vu hlvw leads to virtual instruction exception",
    80005aaa:	00017597          	auipc	a1,0x17
    80005aae:	4c658593          	add	a1,a1,1222 # 8001cf70 <__func__.1+0x2c8>
    80005ab2:	b6c1                	j	80005672 <virtual_instruction_7+0x22e>
    TEST_ASSERT("vu hlvd leads to virtual instruction exception",
    80005ab4:	00017597          	auipc	a1,0x17
    80005ab8:	4bc58593          	add	a1,a1,1212 # 8001cf70 <__func__.1+0x2c8>
    80005abc:	b199                	j	80005702 <virtual_instruction_7+0x2be>
    TEST_END();
    80005abe:	00017597          	auipc	a1,0x17
    80005ac2:	4b258593          	add	a1,a1,1202 # 8001cf70 <__func__.1+0x2c8>
    80005ac6:	b72d                	j	800059f0 <virtual_instruction_7+0x5ac>

0000000080005ac8 <virtual_instruction_8>:

    ////////////////////////////////////////////////////////////////////////
//在mstatus.TW=0  时执行WFI   (即使允许执行WFI指令),或者执行S级监管级指令 (SRET或者SFENCE)   , 引发虚拟异常(在虚拟用户模式下，软件不应该 由执行这些监管模式指令的权限)
bool virtual_instruction_8() {
    80005ac8:	1101                	add	sp,sp,-32

    TEST_START();
    80005aca:	00016597          	auipc	a1,0x16
    80005ace:	12e58593          	add	a1,a1,302 # 8001bbf8 <__func__.3>
    80005ad2:	00017517          	auipc	a0,0x17
    80005ad6:	4be50513          	add	a0,a0,1214 # 8001cf90 <__func__.1+0x2e8>
bool virtual_instruction_8() {
    80005ada:	ec06                	sd	ra,24(sp)
    80005adc:	e822                	sd	s0,16(sp)
    80005ade:	e426                	sd	s1,8(sp)
    TEST_START();
    80005ae0:	107150ef          	jal	8001b3e6 <printf>
    80005ae4:	4529                	li	a0,10
    80005ae6:	7d2140ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80005aea:	4511                	li	a0,4
    80005aec:	ff3fa0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTSR);
    80005af0:	004007b7          	lui	a5,0x400
    80005af4:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    80005af8:	002007b7          	lui	a5,0x200
    80005afc:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_VU);
    80005b00:	4501                	li	a0,0
    80005b02:	fddfa0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80005b06:	0ff0000f          	fence
    80005b0a:	4785                	li	a5,1
    80005b0c:	00037417          	auipc	s0,0x37
    80005b10:	50440413          	add	s0,s0,1284 # 8003d010 <excpt>
    80005b14:	00f41023          	sh	a5,0(s0)
    80005b18:	00037797          	auipc	a5,0x37
    80005b1c:	5207b823          	sd	zero,1328(a5) # 8003d048 <excpt+0x38>
    80005b20:	0ff0000f          	fence
    asm volatile(
    80005b24:	10200073          	sret
    sret();
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    80005b28:	08200593          	li	a1,130
    80005b2c:	00018617          	auipc	a2,0x18
    80005b30:	48c60613          	add	a2,a2,1164 # 8001dfb8 <__func__.1+0x1310>
    80005b34:	00017517          	auipc	a0,0x17
    80005b38:	47450513          	add	a0,a0,1140 # 8001cfa8 <__func__.1+0x300>
    80005b3c:	0ab150ef          	jal	8001b3e6 <printf>
    80005b40:	00144783          	lbu	a5,1(s0)
    80005b44:	00017597          	auipc	a1,0x17
    80005b48:	43c58593          	add	a1,a1,1084 # 8001cf80 <__func__.1+0x2d8>
    80005b4c:	c789                	beqz	a5,80005b56 <virtual_instruction_8+0x8e>
    80005b4e:	6418                	ld	a4,8(s0)
    80005b50:	47d9                	li	a5,22
    80005b52:	06f70e63          	beq	a4,a5,80005bce <virtual_instruction_8+0x106>
    80005b56:	00017517          	auipc	a0,0x17
    80005b5a:	46a50513          	add	a0,a0,1130 # 8001cfc0 <__func__.1+0x318>
    80005b5e:	089150ef          	jal	8001b3e6 <printf>
    80005b62:	00144783          	lbu	a5,1(s0)
    80005b66:	c789                	beqz	a5,80005b70 <virtual_instruction_8+0xa8>
    80005b68:	6418                	ld	a4,8(s0)
    80005b6a:	47d9                	li	a5,22
    80005b6c:	00f70c63          	beq	a4,a5,80005b84 <virtual_instruction_8+0xbc>
    80005b70:	00017517          	auipc	a0,0x17
    80005b74:	45850513          	add	a0,a0,1112 # 8001cfc8 <__func__.1+0x320>
    80005b78:	06f150ef          	jal	8001b3e6 <printf>
    80005b7c:	02900513          	li	a0,41
    80005b80:	738140ef          	jal	8001a2b8 <putchar>
    80005b84:	4529                	li	a0,10
    80005b86:	732140ef          	jal	8001a2b8 <putchar>
    80005b8a:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  
 
    TEST_END();
    80005b8e:	00017597          	auipc	a1,0x17
    80005b92:	3f258593          	add	a1,a1,1010 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    80005b96:	c491                	beqz	s1,80005ba2 <virtual_instruction_8+0xda>
    80005b98:	6418                	ld	a4,8(s0)
    80005b9a:	47d9                	li	a5,22
    80005b9c:	02f70463          	beq	a4,a5,80005bc4 <virtual_instruction_8+0xfc>
    80005ba0:	4481                	li	s1,0
    TEST_END();
    80005ba2:	00017517          	auipc	a0,0x17
    80005ba6:	48650513          	add	a0,a0,1158 # 8001d028 <__func__.1+0x380>
    80005baa:	03d150ef          	jal	8001b3e6 <printf>
    80005bae:	4511                	li	a0,4
    80005bb0:	f2ffa0ef          	jal	80000ade <goto_priv>
    80005bb4:	f72fb0ef          	jal	80001326 <reset_state>
}
    80005bb8:	60e2                	ld	ra,24(sp)
    80005bba:	6442                	ld	s0,16(sp)
    80005bbc:	8526                	mv	a0,s1
    80005bbe:	64a2                	ld	s1,8(sp)
    80005bc0:	6105                	add	sp,sp,32
    80005bc2:	8082                	ret
    TEST_END();
    80005bc4:	00017597          	auipc	a1,0x17
    80005bc8:	3ac58593          	add	a1,a1,940 # 8001cf70 <__func__.1+0x2c8>
    80005bcc:	bfd9                	j	80005ba2 <virtual_instruction_8+0xda>
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    80005bce:	00017597          	auipc	a1,0x17
    80005bd2:	3a258593          	add	a1,a1,930 # 8001cf70 <__func__.1+0x2c8>
    80005bd6:	b741                	j	80005b56 <virtual_instruction_8+0x8e>

0000000080005bd8 <virtual_instruction_9>:
bool virtual_instruction_9() {
    80005bd8:	1101                	add	sp,sp,-32

    TEST_START();
    80005bda:	00016597          	auipc	a1,0x16
    80005bde:	03658593          	add	a1,a1,54 # 8001bc10 <__func__.2>
    80005be2:	00017517          	auipc	a0,0x17
    80005be6:	3ae50513          	add	a0,a0,942 # 8001cf90 <__func__.1+0x2e8>
bool virtual_instruction_9() {
    80005bea:	ec06                	sd	ra,24(sp)
    80005bec:	e822                	sd	s0,16(sp)
    80005bee:	e426                	sd	s1,8(sp)
    TEST_START();
    80005bf0:	7f6150ef          	jal	8001b3e6 <printf>
    80005bf4:	4529                	li	a0,10
    80005bf6:	6c2140ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80005bfa:	4511                	li	a0,4
    80005bfc:	ee3fa0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80005c00:	002007b7          	lui	a5,0x200
    80005c04:	3007b073          	csrc	mstatus,a5
    
    goto_priv(PRIV_VU);
    80005c08:	4501                	li	a0,0
    80005c0a:	ed5fa0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80005c0e:	0ff0000f          	fence
    80005c12:	4785                	li	a5,1
    80005c14:	00037417          	auipc	s0,0x37
    80005c18:	3fc40413          	add	s0,s0,1020 # 8003d010 <excpt>
    80005c1c:	00f41023          	sh	a5,0(s0)
    80005c20:	00037797          	auipc	a5,0x37
    80005c24:	4207b423          	sd	zero,1064(a5) # 8003d048 <excpt+0x38>
    80005c28:	0ff0000f          	fence
    asm volatile ("sfence.vma \n\t");
    80005c2c:	12000073          	sfence.vma
    sfence();
    
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    80005c30:	08200593          	li	a1,130
    80005c34:	00018617          	auipc	a2,0x18
    80005c38:	3cc60613          	add	a2,a2,972 # 8001e000 <__func__.1+0x1358>
    80005c3c:	00017517          	auipc	a0,0x17
    80005c40:	36c50513          	add	a0,a0,876 # 8001cfa8 <__func__.1+0x300>
    80005c44:	7a2150ef          	jal	8001b3e6 <printf>
    80005c48:	00144783          	lbu	a5,1(s0)
    80005c4c:	00017597          	auipc	a1,0x17
    80005c50:	33458593          	add	a1,a1,820 # 8001cf80 <__func__.1+0x2d8>
    80005c54:	c789                	beqz	a5,80005c5e <virtual_instruction_9+0x86>
    80005c56:	6418                	ld	a4,8(s0)
    80005c58:	47d9                	li	a5,22
    80005c5a:	06f70e63          	beq	a4,a5,80005cd6 <virtual_instruction_9+0xfe>
    80005c5e:	00017517          	auipc	a0,0x17
    80005c62:	36250513          	add	a0,a0,866 # 8001cfc0 <__func__.1+0x318>
    80005c66:	780150ef          	jal	8001b3e6 <printf>
    80005c6a:	00144783          	lbu	a5,1(s0)
    80005c6e:	c789                	beqz	a5,80005c78 <virtual_instruction_9+0xa0>
    80005c70:	6418                	ld	a4,8(s0)
    80005c72:	47d9                	li	a5,22
    80005c74:	00f70c63          	beq	a4,a5,80005c8c <virtual_instruction_9+0xb4>
    80005c78:	00017517          	auipc	a0,0x17
    80005c7c:	35050513          	add	a0,a0,848 # 8001cfc8 <__func__.1+0x320>
    80005c80:	766150ef          	jal	8001b3e6 <printf>
    80005c84:	02900513          	li	a0,41
    80005c88:	630140ef          	jal	8001a2b8 <putchar>
    80005c8c:	4529                	li	a0,10
    80005c8e:	62a140ef          	jal	8001a2b8 <putchar>
    80005c92:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_END();
    80005c96:	00017597          	auipc	a1,0x17
    80005c9a:	2ea58593          	add	a1,a1,746 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    80005c9e:	c491                	beqz	s1,80005caa <virtual_instruction_9+0xd2>
    80005ca0:	6418                	ld	a4,8(s0)
    80005ca2:	47d9                	li	a5,22
    80005ca4:	02f70463          	beq	a4,a5,80005ccc <virtual_instruction_9+0xf4>
    80005ca8:	4481                	li	s1,0
    TEST_END();
    80005caa:	00017517          	auipc	a0,0x17
    80005cae:	37e50513          	add	a0,a0,894 # 8001d028 <__func__.1+0x380>
    80005cb2:	734150ef          	jal	8001b3e6 <printf>
    80005cb6:	4511                	li	a0,4
    80005cb8:	e27fa0ef          	jal	80000ade <goto_priv>
    80005cbc:	e6afb0ef          	jal	80001326 <reset_state>
}
    80005cc0:	60e2                	ld	ra,24(sp)
    80005cc2:	6442                	ld	s0,16(sp)
    80005cc4:	8526                	mv	a0,s1
    80005cc6:	64a2                	ld	s1,8(sp)
    80005cc8:	6105                	add	sp,sp,32
    80005cca:	8082                	ret
    TEST_END();
    80005ccc:	00017597          	auipc	a1,0x17
    80005cd0:	2a458593          	add	a1,a1,676 # 8001cf70 <__func__.1+0x2c8>
    80005cd4:	bfd9                	j	80005caa <virtual_instruction_9+0xd2>
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    80005cd6:	00017597          	auipc	a1,0x17
    80005cda:	29a58593          	add	a1,a1,666 # 8001cf70 <__func__.1+0x2c8>
    80005cde:	b741                	j	80005c5e <virtual_instruction_9+0x86>

0000000080005ce0 <virtual_instruction_10>:
bool virtual_instruction_10() {
    80005ce0:	1101                	add	sp,sp,-32

    TEST_START();
    80005ce2:	00016597          	auipc	a1,0x16
    80005ce6:	f4658593          	add	a1,a1,-186 # 8001bc28 <__func__.1>
    80005cea:	00017517          	auipc	a0,0x17
    80005cee:	2a650513          	add	a0,a0,678 # 8001cf90 <__func__.1+0x2e8>
bool virtual_instruction_10() {
    80005cf2:	ec06                	sd	ra,24(sp)
    80005cf4:	e822                	sd	s0,16(sp)
    80005cf6:	e426                	sd	s1,8(sp)
    TEST_START();
    80005cf8:	6ee150ef          	jal	8001b3e6 <printf>
    80005cfc:	4529                	li	a0,10
    80005cfe:	5ba140ef          	jal	8001a2b8 <putchar>


    goto_priv(PRIV_M);
    80005d02:	4511                	li	a0,4
    80005d04:	ddbfa0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);
    80005d08:	002007b7          	lui	a5,0x200
    80005d0c:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    80005d10:	3007b073          	csrc	mstatus,a5
    
    goto_priv(PRIV_VU);
    80005d14:	4501                	li	a0,0
    80005d16:	dc9fa0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80005d1a:	0ff0000f          	fence
    80005d1e:	4785                	li	a5,1
    80005d20:	00037417          	auipc	s0,0x37
    80005d24:	2f040413          	add	s0,s0,752 # 8003d010 <excpt>
    80005d28:	00f41023          	sh	a5,0(s0)
    80005d2c:	00037797          	auipc	a5,0x37
    80005d30:	3007be23          	sd	zero,796(a5) # 8003d048 <excpt+0x38>
    80005d34:	0ff0000f          	fence
        :: "r"(value), "r"(addr) : "memory");
    return value;
}

static inline void wfi() {
    asm ("wfi" ::: "memory");
    80005d38:	10500073          	wfi
    wfi();
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    80005d3c:	08200593          	li	a1,130
    80005d40:	00018617          	auipc	a2,0x18
    80005d44:	30860613          	add	a2,a2,776 # 8001e048 <__func__.1+0x13a0>
    80005d48:	00017517          	auipc	a0,0x17
    80005d4c:	26050513          	add	a0,a0,608 # 8001cfa8 <__func__.1+0x300>
    80005d50:	696150ef          	jal	8001b3e6 <printf>
    80005d54:	00144783          	lbu	a5,1(s0)
    80005d58:	00017597          	auipc	a1,0x17
    80005d5c:	22858593          	add	a1,a1,552 # 8001cf80 <__func__.1+0x2d8>
    80005d60:	c789                	beqz	a5,80005d6a <virtual_instruction_10+0x8a>
    80005d62:	6418                	ld	a4,8(s0)
    80005d64:	47d9                	li	a5,22
    80005d66:	06f70e63          	beq	a4,a5,80005de2 <virtual_instruction_10+0x102>
    80005d6a:	00017517          	auipc	a0,0x17
    80005d6e:	25650513          	add	a0,a0,598 # 8001cfc0 <__func__.1+0x318>
    80005d72:	674150ef          	jal	8001b3e6 <printf>
    80005d76:	00144783          	lbu	a5,1(s0)
    80005d7a:	c789                	beqz	a5,80005d84 <virtual_instruction_10+0xa4>
    80005d7c:	6418                	ld	a4,8(s0)
    80005d7e:	47d9                	li	a5,22
    80005d80:	00f70c63          	beq	a4,a5,80005d98 <virtual_instruction_10+0xb8>
    80005d84:	00017517          	auipc	a0,0x17
    80005d88:	24450513          	add	a0,a0,580 # 8001cfc8 <__func__.1+0x320>
    80005d8c:	65a150ef          	jal	8001b3e6 <printf>
    80005d90:	02900513          	li	a0,41
    80005d94:	524140ef          	jal	8001a2b8 <putchar>
    80005d98:	4529                	li	a0,10
    80005d9a:	51e140ef          	jal	8001a2b8 <putchar>
    80005d9e:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_END();
    80005da2:	00017597          	auipc	a1,0x17
    80005da6:	1de58593          	add	a1,a1,478 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    80005daa:	c491                	beqz	s1,80005db6 <virtual_instruction_10+0xd6>
    80005dac:	6418                	ld	a4,8(s0)
    80005dae:	47d9                	li	a5,22
    80005db0:	02f70463          	beq	a4,a5,80005dd8 <virtual_instruction_10+0xf8>
    80005db4:	4481                	li	s1,0
    TEST_END();
    80005db6:	00017517          	auipc	a0,0x17
    80005dba:	27250513          	add	a0,a0,626 # 8001d028 <__func__.1+0x380>
    80005dbe:	628150ef          	jal	8001b3e6 <printf>
    80005dc2:	4511                	li	a0,4
    80005dc4:	d1bfa0ef          	jal	80000ade <goto_priv>
    80005dc8:	d5efb0ef          	jal	80001326 <reset_state>
}
    80005dcc:	60e2                	ld	ra,24(sp)
    80005dce:	6442                	ld	s0,16(sp)
    80005dd0:	8526                	mv	a0,s1
    80005dd2:	64a2                	ld	s1,8(sp)
    80005dd4:	6105                	add	sp,sp,32
    80005dd6:	8082                	ret
    TEST_END();
    80005dd8:	00017597          	auipc	a1,0x17
    80005ddc:	19858593          	add	a1,a1,408 # 8001cf70 <__func__.1+0x2c8>
    80005de0:	bfd9                	j	80005db6 <virtual_instruction_10+0xd6>
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    80005de2:	00017597          	auipc	a1,0x17
    80005de6:	18e58593          	add	a1,a1,398 # 8001cf70 <__func__.1+0x2c8>
    80005dea:	b741                	j	80005d6a <virtual_instruction_10+0x8a>

0000000080005dec <virtual_instruction_11>:
    ////////////////////////////////////////////////////////////////////////

bool virtual_instruction_11() {
    80005dec:	1101                	add	sp,sp,-32

    TEST_START();    
    80005dee:	00016597          	auipc	a1,0x16
    80005df2:	e5258593          	add	a1,a1,-430 # 8001bc40 <__func__.0>
    80005df6:	00017517          	auipc	a0,0x17
    80005dfa:	19a50513          	add	a0,a0,410 # 8001cf90 <__func__.1+0x2e8>
bool virtual_instruction_11() {
    80005dfe:	ec06                	sd	ra,24(sp)
    80005e00:	e822                	sd	s0,16(sp)
    80005e02:	e426                	sd	s1,8(sp)
    TEST_START();    
    80005e04:	5e2150ef          	jal	8001b3e6 <printf>
    80005e08:	4529                	li	a0,10
    80005e0a:	4ae140ef          	jal	8001a2b8 <putchar>
    goto_priv(PRIV_M);
    80005e0e:	4511                	li	a0,4
    80005e10:	ccffa0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTVM);
    80005e14:	001007b7          	lui	a5,0x100
    80005e18:	6007b073          	csrc	hstatus,a5
    CSRC(CSR_HSTATUS, MSTATUS_TVM);
    80005e1c:	6007b073          	csrc	hstatus,a5
    goto_priv(PRIV_VU);
    80005e20:	4501                	li	a0,0
    80005e22:	cbdfa0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80005e26:	0ff0000f          	fence
    80005e2a:	4785                	li	a5,1
    80005e2c:	00037417          	auipc	s0,0x37
    80005e30:	1e440413          	add	s0,s0,484 # 8003d010 <excpt>
    80005e34:	00f41023          	sh	a5,0(s0)
    80005e38:	00037797          	auipc	a5,0x37
    80005e3c:	2007b823          	sd	zero,528(a5) # 8003d048 <excpt+0x38>
    80005e40:	0ff0000f          	fence
    CSRS(CSR_VSIE,1ULL << 1);
    80005e44:	20416073          	csrs	vsie,2
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    80005e48:	08200593          	li	a1,130
    80005e4c:	00018617          	auipc	a2,0x18
    80005e50:	24460613          	add	a2,a2,580 # 8001e090 <__func__.1+0x13e8>
    80005e54:	00017517          	auipc	a0,0x17
    80005e58:	15450513          	add	a0,a0,340 # 8001cfa8 <__func__.1+0x300>
    80005e5c:	58a150ef          	jal	8001b3e6 <printf>
    80005e60:	00144783          	lbu	a5,1(s0)
    80005e64:	00017597          	auipc	a1,0x17
    80005e68:	11c58593          	add	a1,a1,284 # 8001cf80 <__func__.1+0x2d8>
    80005e6c:	c789                	beqz	a5,80005e76 <virtual_instruction_11+0x8a>
    80005e6e:	6418                	ld	a4,8(s0)
    80005e70:	47d9                	li	a5,22
    80005e72:	06f70e63          	beq	a4,a5,80005eee <virtual_instruction_11+0x102>
    80005e76:	00017517          	auipc	a0,0x17
    80005e7a:	14a50513          	add	a0,a0,330 # 8001cfc0 <__func__.1+0x318>
    80005e7e:	568150ef          	jal	8001b3e6 <printf>
    80005e82:	00144783          	lbu	a5,1(s0)
    80005e86:	c789                	beqz	a5,80005e90 <virtual_instruction_11+0xa4>
    80005e88:	6418                	ld	a4,8(s0)
    80005e8a:	47d9                	li	a5,22
    80005e8c:	00f70c63          	beq	a4,a5,80005ea4 <virtual_instruction_11+0xb8>
    80005e90:	00017517          	auipc	a0,0x17
    80005e94:	13850513          	add	a0,a0,312 # 8001cfc8 <__func__.1+0x320>
    80005e98:	54e150ef          	jal	8001b3e6 <printf>
    80005e9c:	02900513          	li	a0,41
    80005ea0:	418140ef          	jal	8001a2b8 <putchar>
    80005ea4:	4529                	li	a0,10
    80005ea6:	412140ef          	jal	8001a2b8 <putchar>
    80005eaa:	00144483          	lbu	s1,1(s0)





    TEST_END(); 
    80005eae:	00017597          	auipc	a1,0x17
    80005eb2:	0d258593          	add	a1,a1,210 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    80005eb6:	c491                	beqz	s1,80005ec2 <virtual_instruction_11+0xd6>
    80005eb8:	6418                	ld	a4,8(s0)
    80005eba:	47d9                	li	a5,22
    80005ebc:	02f70463          	beq	a4,a5,80005ee4 <virtual_instruction_11+0xf8>
    80005ec0:	4481                	li	s1,0
    TEST_END(); 
    80005ec2:	00017517          	auipc	a0,0x17
    80005ec6:	16650513          	add	a0,a0,358 # 8001d028 <__func__.1+0x380>
    80005eca:	51c150ef          	jal	8001b3e6 <printf>
    80005ece:	4511                	li	a0,4
    80005ed0:	c0ffa0ef          	jal	80000ade <goto_priv>
    80005ed4:	c52fb0ef          	jal	80001326 <reset_state>
    80005ed8:	60e2                	ld	ra,24(sp)
    80005eda:	6442                	ld	s0,16(sp)
    80005edc:	8526                	mv	a0,s1
    80005ede:	64a2                	ld	s1,8(sp)
    80005ee0:	6105                	add	sp,sp,32
    80005ee2:	8082                	ret
    TEST_END(); 
    80005ee4:	00017597          	auipc	a1,0x17
    80005ee8:	08c58593          	add	a1,a1,140 # 8001cf70 <__func__.1+0x2c8>
    80005eec:	bfd9                	j	80005ec2 <virtual_instruction_11+0xd6>
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    80005eee:	00017597          	auipc	a1,0x17
    80005ef2:	08258593          	add	a1,a1,130 # 8001cf70 <__func__.1+0x2c8>
    80005ef6:	b741                	j	80005e76 <virtual_instruction_11+0x8a>

0000000080005ef8 <hfence_test>:
#include <rvh_test.h>
#include <page_tables.h> 

bool hfence_test() {
    80005ef8:	7179                	add	sp,sp,-48

    TEST_START();
    80005efa:	00016597          	auipc	a1,0x16
    80005efe:	d5e58593          	add	a1,a1,-674 # 8001bc58 <__func__.2>
    80005f02:	00017517          	auipc	a0,0x17
    80005f06:	08e50513          	add	a0,a0,142 # 8001cf90 <__func__.1+0x2e8>
bool hfence_test() {
    80005f0a:	f406                	sd	ra,40(sp)
    80005f0c:	ec26                	sd	s1,24(sp)
    80005f0e:	f022                	sd	s0,32(sp)
    80005f10:	e84a                	sd	s2,16(sp)
    80005f12:	e44e                	sd	s3,8(sp)
    TEST_START();
    80005f14:	4d2150ef          	jal	8001b3e6 <printf>
    80005f18:	4529                	li	a0,10
    80005f1a:	39e140ef          	jal	8001a2b8 <putchar>
    80005f1e:	000887b7          	lui	a5,0x88
    80005f22:	2201b737          	lui	a4,0x2201b
    80005f26:	0001d697          	auipc	a3,0x1d
    80005f2a:	6a26b683          	ld	a3,1698(a3) # 800235c8 <__func__.1+0x6920>
    80005f2e:	070a                	sll	a4,a4,0x2
    80005f30:	06d78793          	add	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    80005f34:	e314                	sd	a3,0(a4)
    80005f36:	07b2                	sll	a5,a5,0xc
    80005f38:	0001d717          	auipc	a4,0x1d
    80005f3c:	69873703          	ld	a4,1688(a4) # 800235d0 <__func__.1+0x6928>
    80005f40:	e398                	sd	a4,0(a5)
    write64(phys_page_base(SWITCH1), 0x111111111);
    write64(phys_page_base(SWITCH2), 0x222222222);

    //////////////////////////////////////////////////////////////////////

    goto_priv(PRIV_HS);
    80005f42:	450d                	li	a0,3
    80005f44:	b9bfa0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80005f48:	4509                	li	a0,2
    asm volatile(
    80005f4a:	4001b4b7          	lui	s1,0x4001b
    80005f4e:	ab5fa0ef          	jal	80000a02 <set_prev_priv>
    80005f52:	048a                	sll	s1,s1,0x2
    hpt_init();
    80005f54:	8d3fa0ef          	jal	80000826 <hpt_init>
    vspt_init();
    80005f58:	f5cfa0ef          	jal	800006b4 <vspt_init>
    80005f5c:	6c04c9f3          	.4byte	0x6c04c9f3
    vaddr = vs_page_base(SWITCH1);

    val = hlvd(vaddr);
    cond = true;
    vspt_switch();
    80005f60:	a5bfa0ef          	jal	800009ba <vspt_switch>
    80005f64:	6c04c473          	.4byte	0x6c04c473
    asm volatile(
    80005f68:	22000073          	.4byte	0x22000073
    asm volatile(
    80005f6c:	6c04c7f3          	.4byte	0x6c04c7f3
    cond &= hlvd(vaddr) == val;
    80005f70:	41340433          	sub	s0,s0,s3
    hfence_vvma();
    cond &= hlvd(vaddr) != val;
    80005f74:	413787b3          	sub	a5,a5,s3
    80005f78:	00f037b3          	snez	a5,a5
    80005f7c:	00143413          	seqz	s0,s0
    80005f80:	8c7d                	and	s0,s0,a5
    hpt_switch();
    80005f82:	a53fa0ef          	jal	800009d4 <hpt_switch>
    80005f86:	6c04c973          	.4byte	0x6c04c973
    asm volatile(
    80005f8a:	62000073          	.4byte	0x62000073
    asm volatile(
    80005f8e:	6c04c4f3          	.4byte	0x6c04c4f3
    cond &= hlvd(vaddr) != val;
    80005f92:	41390933          	sub	s2,s2,s3
    80005f96:	01203933          	snez	s2,s2
    hfence_gvma();
    cond &= hlvd(vaddr) == val;
    TEST_ASSERT("hfences correctly invalidate guest tlb entries", cond);
    80005f9a:	00018617          	auipc	a2,0x18
    80005f9e:	15660613          	add	a2,a2,342 # 8001e0f0 <__func__.1+0x1448>
    80005fa2:	08200593          	li	a1,130
    80005fa6:	00017517          	auipc	a0,0x17
    80005faa:	00250513          	add	a0,a0,2 # 8001cfa8 <__func__.1+0x300>
    80005fae:	01247433          	and	s0,s0,s2
    80005fb2:	434150ef          	jal	8001b3e6 <printf>
    80005fb6:	12040863          	beqz	s0,800060e6 <hfence_test+0x1ee>
    80005fba:	13349663          	bne	s1,s3,800060e6 <hfence_test+0x1ee>
    80005fbe:	00017597          	auipc	a1,0x17
    80005fc2:	fb258593          	add	a1,a1,-78 # 8001cf70 <__func__.1+0x2c8>
    80005fc6:	00017517          	auipc	a0,0x17
    80005fca:	ffa50513          	add	a0,a0,-6 # 8001cfc0 <__func__.1+0x318>
    80005fce:	418150ef          	jal	8001b3e6 <printf>
    80005fd2:	4529                	li	a0,10
    80005fd4:	2e4140ef          	jal	8001a2b8 <putchar>
    80005fd8:	4485                	li	s1,1

    //////////////////////////////////////////////////////////////////////

    goto_priv(PRIV_HS);
    80005fda:	450d                	li	a0,3
    80005fdc:	4001b437          	lui	s0,0x4001b
    80005fe0:	afffa0ef          	jal	80000ade <goto_priv>
    80005fe4:	040a                	sll	s0,s0,0x2
    80005fe6:	6c044973          	.4byte	0x6c044973
    val = hlvd(vaddr);
    cond = true;
    hpt_switch();
    80005fea:	9ebfa0ef          	jal	800009d4 <hpt_switch>
    asm volatile ("sfence.vma \n\t");
    80005fee:	12000073          	sfence.vma
    asm volatile(
    80005ff2:	6c044473          	.4byte	0x6c044473
    sfence();
    cond &= hlvd(vaddr) == val;
    TEST_ASSERT("hs sfence doest not affect guest level tlb entries", cond);
    80005ff6:	00018617          	auipc	a2,0x18
    80005ffa:	12a60613          	add	a2,a2,298 # 8001e120 <__func__.1+0x1478>
    80005ffe:	08200593          	li	a1,130
    80006002:	00017517          	auipc	a0,0x17
    80006006:	fa650513          	add	a0,a0,-90 # 8001cfa8 <__func__.1+0x300>
    8000600a:	3dc150ef          	jal	8001b3e6 <printf>
    8000600e:	13240963          	beq	s0,s2,80006140 <hfence_test+0x248>
    80006012:	00017597          	auipc	a1,0x17
    80006016:	f6e58593          	add	a1,a1,-146 # 8001cf80 <__func__.1+0x2d8>
    8000601a:	00017517          	auipc	a0,0x17
    8000601e:	fa650513          	add	a0,a0,-90 # 8001cfc0 <__func__.1+0x318>
    80006022:	3c4150ef          	jal	8001b3e6 <printf>
    80006026:	00017517          	auipc	a0,0x17
    8000602a:	fa250513          	add	a0,a0,-94 # 8001cfc8 <__func__.1+0x320>
    8000602e:	3b8150ef          	jal	8001b3e6 <printf>
    80006032:	02900513          	li	a0,41
    80006036:	282140ef          	jal	8001a2b8 <putchar>
    8000603a:	4529                	li	a0,10
    8000603c:	27c140ef          	jal	8001a2b8 <putchar>
    80006040:	4481                	li	s1,0
    return *((volatile uint64_t*) addr);
    80006042:	4001b437          	lui	s0,0x4001b

    //////////////////////////////////////////////////////////////////////  

    goto_priv(PRIV_HS);
    80006046:	450d                	li	a0,3
    80006048:	040a                	sll	s0,s0,0x2
    8000604a:	a95fa0ef          	jal	80000ade <goto_priv>
    hspt_init();
    8000604e:	d92fa0ef          	jal	800005e0 <hspt_init>
    80006052:	00043903          	ld	s2,0(s0) # 4001b000 <STACK_SIZE+0x3ff1b000>
    vaddr = hs_page_base(SWITCH1);
    val = read64(vaddr);
    cond = true;

    hspt_switch();
    80006056:	94bfa0ef          	jal	800009a0 <hspt_switch>
    goto_priv(PRIV_VS);
    8000605a:	4509                	li	a0,2
    8000605c:	a83fa0ef          	jal	80000ade <goto_priv>
    asm volatile ("sfence.vma \n\t");
    80006060:	12000073          	sfence.vma
    sfence();
    goto_priv(PRIV_HS);
    80006064:	450d                	li	a0,3
    80006066:	a79fa0ef          	jal	80000ade <goto_priv>
    8000606a:	6000                	ld	s0,0(s0)
    cond &= read64(vaddr) == val;
    TEST_ASSERT("vs sfence doest not affect hypervisor level tlb entries", cond);
    8000606c:	00018617          	auipc	a2,0x18
    80006070:	0ec60613          	add	a2,a2,236 # 8001e158 <__func__.1+0x14b0>
    80006074:	08200593          	li	a1,130
    80006078:	00017517          	auipc	a0,0x17
    8000607c:	f3050513          	add	a0,a0,-208 # 8001cfa8 <__func__.1+0x300>
    80006080:	366150ef          	jal	8001b3e6 <printf>
    80006084:	09240a63          	beq	s0,s2,80006118 <hfence_test+0x220>
    80006088:	00017597          	auipc	a1,0x17
    8000608c:	ef858593          	add	a1,a1,-264 # 8001cf80 <__func__.1+0x2d8>
    80006090:	00017517          	auipc	a0,0x17
    80006094:	f3050513          	add	a0,a0,-208 # 8001cfc0 <__func__.1+0x318>
    80006098:	34e150ef          	jal	8001b3e6 <printf>
    8000609c:	00017517          	auipc	a0,0x17
    800060a0:	f2c50513          	add	a0,a0,-212 # 8001cfc8 <__func__.1+0x320>
    800060a4:	342150ef          	jal	8001b3e6 <printf>
    800060a8:	02900513          	li	a0,41
    800060ac:	20c140ef          	jal	8001a2b8 <putchar>
    800060b0:	4529                	li	a0,10
    800060b2:	206140ef          	jal	8001a2b8 <putchar>
    800060b6:	4401                	li	s0,0

    //////////////////////////////////////////////////////////////////////


    
    TEST_END();
    800060b8:	00017597          	auipc	a1,0x17
    800060bc:	ec858593          	add	a1,a1,-312 # 8001cf80 <__func__.1+0x2d8>
    800060c0:	00017517          	auipc	a0,0x17
    800060c4:	f6850513          	add	a0,a0,-152 # 8001d028 <__func__.1+0x380>
    800060c8:	31e150ef          	jal	8001b3e6 <printf>
    800060cc:	4511                	li	a0,4
    800060ce:	a11fa0ef          	jal	80000ade <goto_priv>
    800060d2:	a54fb0ef          	jal	80001326 <reset_state>
    800060d6:	70a2                	ld	ra,40(sp)
    800060d8:	8522                	mv	a0,s0
    800060da:	7402                	ld	s0,32(sp)
    800060dc:	64e2                	ld	s1,24(sp)
    800060de:	6942                	ld	s2,16(sp)
    800060e0:	69a2                	ld	s3,8(sp)
    800060e2:	6145                	add	sp,sp,48
    800060e4:	8082                	ret
    TEST_ASSERT("hfences correctly invalidate guest tlb entries", cond);
    800060e6:	00017597          	auipc	a1,0x17
    800060ea:	e9a58593          	add	a1,a1,-358 # 8001cf80 <__func__.1+0x2d8>
    800060ee:	00017517          	auipc	a0,0x17
    800060f2:	ed250513          	add	a0,a0,-302 # 8001cfc0 <__func__.1+0x318>
    800060f6:	2f0150ef          	jal	8001b3e6 <printf>
    800060fa:	00017517          	auipc	a0,0x17
    800060fe:	ece50513          	add	a0,a0,-306 # 8001cfc8 <__func__.1+0x320>
    80006102:	2e4150ef          	jal	8001b3e6 <printf>
    80006106:	02900513          	li	a0,41
    8000610a:	1ae140ef          	jal	8001a2b8 <putchar>
    8000610e:	4529                	li	a0,10
    80006110:	1a8140ef          	jal	8001a2b8 <putchar>
    80006114:	4481                	li	s1,0
    80006116:	b5d1                	j	80005fda <hfence_test+0xe2>
    TEST_ASSERT("vs sfence doest not affect hypervisor level tlb entries", cond);
    80006118:	00017597          	auipc	a1,0x17
    8000611c:	e5858593          	add	a1,a1,-424 # 8001cf70 <__func__.1+0x2c8>
    80006120:	00017517          	auipc	a0,0x17
    80006124:	ea050513          	add	a0,a0,-352 # 8001cfc0 <__func__.1+0x318>
    80006128:	2be150ef          	jal	8001b3e6 <printf>
    8000612c:	4529                	li	a0,10
    8000612e:	18a140ef          	jal	8001a2b8 <putchar>
    80006132:	d0d1                	beqz	s1,800060b6 <hfence_test+0x1be>
    80006134:	4405                	li	s0,1
    TEST_END();
    80006136:	00017597          	auipc	a1,0x17
    8000613a:	e3a58593          	add	a1,a1,-454 # 8001cf70 <__func__.1+0x2c8>
    8000613e:	b749                	j	800060c0 <hfence_test+0x1c8>
    TEST_ASSERT("hs sfence doest not affect guest level tlb entries", cond);
    80006140:	00017597          	auipc	a1,0x17
    80006144:	e3058593          	add	a1,a1,-464 # 8001cf70 <__func__.1+0x2c8>
    80006148:	00017517          	auipc	a0,0x17
    8000614c:	e7850513          	add	a0,a0,-392 # 8001cfc0 <__func__.1+0x318>
    80006150:	296150ef          	jal	8001b3e6 <printf>
    80006154:	4529                	li	a0,10
    80006156:	162140ef          	jal	8001a2b8 <putchar>
    8000615a:	b5e5                	j	80006042 <hfence_test+0x14a>

000000008000615c <wfi_exception_tests_1>:
#include <rvh_test.h>
#include <csrs.h> 
#include <stdio.h>

bool wfi_exception_tests_1() {
    8000615c:	1101                	add	sp,sp,-32

    TEST_START();
    8000615e:	00016597          	auipc	a1,0x16
    80006162:	b0a58593          	add	a1,a1,-1270 # 8001bc68 <__func__.21>
    80006166:	00017517          	auipc	a0,0x17
    8000616a:	e2a50513          	add	a0,a0,-470 # 8001cf90 <__func__.1+0x2e8>
bool wfi_exception_tests_1() {
    8000616e:	ec06                	sd	ra,24(sp)
    80006170:	e822                	sd	s0,16(sp)
    80006172:	e426                	sd	s1,8(sp)
    TEST_START();
    80006174:	272150ef          	jal	8001b3e6 <printf>
    80006178:	4529                	li	a0,10
    8000617a:	13e140ef          	jal	8001a2b8 <putchar>

    TEST_SETUP_EXCEPT();
    8000617e:	0ff0000f          	fence
    80006182:	4785                	li	a5,1
    80006184:	00037417          	auipc	s0,0x37
    80006188:	e8c40413          	add	s0,s0,-372 # 8003d010 <excpt>
    8000618c:	00f41023          	sh	a5,0(s0)
    80006190:	00037797          	auipc	a5,0x37
    80006194:	ea07bc23          	sd	zero,-328(a5) # 8003d048 <excpt+0x38>
    80006198:	0ff0000f          	fence

    //mstatus.TW=0时，在u模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    8000619c:	4511                	li	a0,4
    8000619e:	941fa0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800061a2:	002007b7          	lui	a5,0x200
    800061a6:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    800061aa:	30205073          	csrw	medeleg,0
    CSRW(mideleg,0);     
    800061ae:	30305073          	csrw	mideleg,0
    CSRW(CSR_HIDELEG,0);
    800061b2:	60305073          	csrw	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    800061b6:	60205073          	csrw	hedeleg,0
    CSRS(CSR_UIE, 0b0100);
    800061ba:	00426073          	csrs	uie,4
    asm ("wfi" ::: "memory");
    800061be:	10500073          	wfi
    wfi();

    goto_priv(PRIV_HU);
    800061c2:	4505                	li	a0,1
    800061c4:	91bfa0ef          	jal	80000ade <goto_priv>

    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    800061c8:	08200593          	li	a1,130
    800061cc:	00018617          	auipc	a2,0x18
    800061d0:	fc460613          	add	a2,a2,-60 # 8001e190 <__func__.1+0x14e8>
    800061d4:	00017517          	auipc	a0,0x17
    800061d8:	dd450513          	add	a0,a0,-556 # 8001cfa8 <__func__.1+0x300>
    800061dc:	20a150ef          	jal	8001b3e6 <printf>
    800061e0:	00144783          	lbu	a5,1(s0)
    800061e4:	00017597          	auipc	a1,0x17
    800061e8:	d9c58593          	add	a1,a1,-612 # 8001cf80 <__func__.1+0x2d8>
    800061ec:	c789                	beqz	a5,800061f6 <wfi_exception_tests_1+0x9a>
    800061ee:	6418                	ld	a4,8(s0)
    800061f0:	4789                	li	a5,2
    800061f2:	06f70e63          	beq	a4,a5,8000626e <wfi_exception_tests_1+0x112>
    800061f6:	00017517          	auipc	a0,0x17
    800061fa:	dca50513          	add	a0,a0,-566 # 8001cfc0 <__func__.1+0x318>
    800061fe:	1e8150ef          	jal	8001b3e6 <printf>
    80006202:	00144783          	lbu	a5,1(s0)
    80006206:	c789                	beqz	a5,80006210 <wfi_exception_tests_1+0xb4>
    80006208:	6418                	ld	a4,8(s0)
    8000620a:	4789                	li	a5,2
    8000620c:	00f70c63          	beq	a4,a5,80006224 <wfi_exception_tests_1+0xc8>
    80006210:	00017517          	auipc	a0,0x17
    80006214:	db850513          	add	a0,a0,-584 # 8001cfc8 <__func__.1+0x320>
    80006218:	1ce150ef          	jal	8001b3e6 <printf>
    8000621c:	02900513          	li	a0,41
    80006220:	098140ef          	jal	8001a2b8 <putchar>
    80006224:	4529                	li	a0,10
    80006226:	092140ef          	jal	8001a2b8 <putchar>
    8000622a:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    8000622e:	00017597          	auipc	a1,0x17
    80006232:	d5258593          	add	a1,a1,-686 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006236:	c491                	beqz	s1,80006242 <wfi_exception_tests_1+0xe6>
    80006238:	6418                	ld	a4,8(s0)
    8000623a:	4789                	li	a5,2
    8000623c:	02f70463          	beq	a4,a5,80006264 <wfi_exception_tests_1+0x108>
    80006240:	4481                	li	s1,0
    TEST_END();
    80006242:	00017517          	auipc	a0,0x17
    80006246:	de650513          	add	a0,a0,-538 # 8001d028 <__func__.1+0x380>
    8000624a:	19c150ef          	jal	8001b3e6 <printf>
    8000624e:	4511                	li	a0,4
    80006250:	88ffa0ef          	jal	80000ade <goto_priv>
    80006254:	8d2fb0ef          	jal	80001326 <reset_state>
}
    80006258:	60e2                	ld	ra,24(sp)
    8000625a:	6442                	ld	s0,16(sp)
    8000625c:	8526                	mv	a0,s1
    8000625e:	64a2                	ld	s1,8(sp)
    80006260:	6105                	add	sp,sp,32
    80006262:	8082                	ret
    TEST_END();
    80006264:	00017597          	auipc	a1,0x17
    80006268:	d0c58593          	add	a1,a1,-756 # 8001cf70 <__func__.1+0x2c8>
    8000626c:	bfd9                	j	80006242 <wfi_exception_tests_1+0xe6>
    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    8000626e:	00017597          	auipc	a1,0x17
    80006272:	d0258593          	add	a1,a1,-766 # 8001cf70 <__func__.1+0x2c8>
    80006276:	b741                	j	800061f6 <wfi_exception_tests_1+0x9a>

0000000080006278 <wfi_exception_tests_2>:

bool wfi_exception_tests_2() {
    80006278:	1101                	add	sp,sp,-32

    TEST_START();
    8000627a:	00016597          	auipc	a1,0x16
    8000627e:	a0658593          	add	a1,a1,-1530 # 8001bc80 <__func__.20>
    80006282:	00017517          	auipc	a0,0x17
    80006286:	d0e50513          	add	a0,a0,-754 # 8001cf90 <__func__.1+0x2e8>
bool wfi_exception_tests_2() {
    8000628a:	ec06                	sd	ra,24(sp)
    8000628c:	e822                	sd	s0,16(sp)
    8000628e:	e426                	sd	s1,8(sp)
    TEST_START();
    80006290:	156150ef          	jal	8001b3e6 <printf>
    80006294:	4529                	li	a0,10
    80006296:	022140ef          	jal	8001a2b8 <putchar>

    TEST_SETUP_EXCEPT();
    8000629a:	0ff0000f          	fence
    8000629e:	00037417          	auipc	s0,0x37
    800062a2:	d7240413          	add	s0,s0,-654 # 8003d010 <excpt>
    800062a6:	4485                	li	s1,1
    800062a8:	00941023          	sh	s1,0(s0)
    800062ac:	00037797          	auipc	a5,0x37
    800062b0:	d807be23          	sd	zero,-612(a5) # 8003d048 <excpt+0x38>
    800062b4:	0ff0000f          	fence
    //mstatus.TW=0时，在VU模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    800062b8:	4511                	li	a0,4
    800062ba:	825fa0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800062be:	002007b7          	lui	a5,0x200
    800062c2:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    800062c6:	30205073          	csrw	medeleg,0
    CSRW(mideleg,0);     
    800062ca:	30305073          	csrw	mideleg,0
    CSRW(CSR_HIDELEG,0);
    800062ce:	60305073          	csrw	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    800062d2:	60205073          	csrw	hedeleg,0
    TEST_SETUP_EXCEPT();
    800062d6:	0ff0000f          	fence
    800062da:	00037797          	auipc	a5,0x37
    800062de:	d607b723          	sd	zero,-658(a5) # 8003d048 <excpt+0x38>
    800062e2:	00941023          	sh	s1,0(s0)
    800062e6:	0ff0000f          	fence
    CSRS(CSR_UIE, 0b0100);
    800062ea:	00426073          	csrs	uie,4
    800062ee:	10500073          	wfi
    wfi();

    goto_priv(PRIV_VU);
    800062f2:	4501                	li	a0,0
    800062f4:	feafa0ef          	jal	80000ade <goto_priv>
    
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    800062f8:	08200593          	li	a1,130
    800062fc:	00018617          	auipc	a2,0x18
    80006300:	f0460613          	add	a2,a2,-252 # 8001e200 <__func__.1+0x1558>
    80006304:	00017517          	auipc	a0,0x17
    80006308:	ca450513          	add	a0,a0,-860 # 8001cfa8 <__func__.1+0x300>
    8000630c:	0da150ef          	jal	8001b3e6 <printf>
    80006310:	00144783          	lbu	a5,1(s0)
    80006314:	00017597          	auipc	a1,0x17
    80006318:	c6c58593          	add	a1,a1,-916 # 8001cf80 <__func__.1+0x2d8>
    8000631c:	c789                	beqz	a5,80006326 <wfi_exception_tests_2+0xae>
    8000631e:	6418                	ld	a4,8(s0)
    80006320:	4789                	li	a5,2
    80006322:	06f70e63          	beq	a4,a5,8000639e <wfi_exception_tests_2+0x126>
    80006326:	00017517          	auipc	a0,0x17
    8000632a:	c9a50513          	add	a0,a0,-870 # 8001cfc0 <__func__.1+0x318>
    8000632e:	0b8150ef          	jal	8001b3e6 <printf>
    80006332:	00144783          	lbu	a5,1(s0)
    80006336:	c789                	beqz	a5,80006340 <wfi_exception_tests_2+0xc8>
    80006338:	6418                	ld	a4,8(s0)
    8000633a:	4789                	li	a5,2
    8000633c:	00f70c63          	beq	a4,a5,80006354 <wfi_exception_tests_2+0xdc>
    80006340:	00017517          	auipc	a0,0x17
    80006344:	c8850513          	add	a0,a0,-888 # 8001cfc8 <__func__.1+0x320>
    80006348:	09e150ef          	jal	8001b3e6 <printf>
    8000634c:	02900513          	li	a0,41
    80006350:	769130ef          	jal	8001a2b8 <putchar>
    80006354:	4529                	li	a0,10
    80006356:	763130ef          	jal	8001a2b8 <putchar>
    8000635a:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    TEST_END();
    8000635e:	00017597          	auipc	a1,0x17
    80006362:	c2258593          	add	a1,a1,-990 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006366:	c491                	beqz	s1,80006372 <wfi_exception_tests_2+0xfa>
    80006368:	6418                	ld	a4,8(s0)
    8000636a:	4789                	li	a5,2
    8000636c:	02f70463          	beq	a4,a5,80006394 <wfi_exception_tests_2+0x11c>
    80006370:	4481                	li	s1,0
    TEST_END();
    80006372:	00017517          	auipc	a0,0x17
    80006376:	cb650513          	add	a0,a0,-842 # 8001d028 <__func__.1+0x380>
    8000637a:	06c150ef          	jal	8001b3e6 <printf>
    8000637e:	4511                	li	a0,4
    80006380:	f5efa0ef          	jal	80000ade <goto_priv>
    80006384:	fa3fa0ef          	jal	80001326 <reset_state>
}
    80006388:	60e2                	ld	ra,24(sp)
    8000638a:	6442                	ld	s0,16(sp)
    8000638c:	8526                	mv	a0,s1
    8000638e:	64a2                	ld	s1,8(sp)
    80006390:	6105                	add	sp,sp,32
    80006392:	8082                	ret
    TEST_END();
    80006394:	00017597          	auipc	a1,0x17
    80006398:	bdc58593          	add	a1,a1,-1060 # 8001cf70 <__func__.1+0x2c8>
    8000639c:	bfd9                	j	80006372 <wfi_exception_tests_2+0xfa>
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    8000639e:	00017597          	auipc	a1,0x17
    800063a2:	bd258593          	add	a1,a1,-1070 # 8001cf70 <__func__.1+0x2c8>
    800063a6:	b741                	j	80006326 <wfi_exception_tests_2+0xae>

00000000800063a8 <wfi_exception_tests_3>:

bool wfi_exception_tests_3() {
    800063a8:	1101                	add	sp,sp,-32

    TEST_START();
    800063aa:	00016597          	auipc	a1,0x16
    800063ae:	8ee58593          	add	a1,a1,-1810 # 8001bc98 <__func__.19>
    800063b2:	00017517          	auipc	a0,0x17
    800063b6:	bde50513          	add	a0,a0,-1058 # 8001cf90 <__func__.1+0x2e8>
bool wfi_exception_tests_3() {
    800063ba:	ec06                	sd	ra,24(sp)
    800063bc:	e822                	sd	s0,16(sp)
    800063be:	e426                	sd	s1,8(sp)
    TEST_START();
    800063c0:	026150ef          	jal	8001b3e6 <printf>
    800063c4:	4529                	li	a0,10
    800063c6:	6f3130ef          	jal	8001a2b8 <putchar>

    TEST_SETUP_EXCEPT();
    800063ca:	0ff0000f          	fence
    800063ce:	00037417          	auipc	s0,0x37
    800063d2:	c4240413          	add	s0,s0,-958 # 8003d010 <excpt>
    800063d6:	4485                	li	s1,1
    800063d8:	00941023          	sh	s1,0(s0)
    800063dc:	00037797          	auipc	a5,0x37
    800063e0:	c607b623          	sd	zero,-916(a5) # 8003d048 <excpt+0x38>
    800063e4:	0ff0000f          	fence
    /* Keep an interrupt pending so we don't get stuck when wfi succeeds */
    //mstatus.TW=0时，在m模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    800063e8:	4511                	li	a0,4
    800063ea:	ef4fa0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800063ee:	002007b7          	lui	a5,0x200
    800063f2:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    800063f6:	30205073          	csrw	medeleg,0
    CSRW(mideleg,0);     
    800063fa:	30305073          	csrw	mideleg,0
    CSRS(mie, 0b0100);
    800063fe:	30426073          	csrs	mie,4
    CSRS(mip, 0b0100);
    80006402:	34426073          	csrs	mip,4

    goto_priv(PRIV_M);
    80006406:	4511                	li	a0,4
    80006408:	ed6fa0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000640c:	0ff0000f          	fence
    80006410:	00037797          	auipc	a5,0x37
    80006414:	c207bc23          	sd	zero,-968(a5) # 8003d048 <excpt+0x38>
    80006418:	00941023          	sh	s1,0(s0)
    8000641c:	0ff0000f          	fence
    80006420:	10500073          	wfi
    wfi();
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006424:	08200593          	li	a1,130
    80006428:	00018617          	auipc	a2,0x18
    8000642c:	e4860613          	add	a2,a2,-440 # 8001e270 <__func__.1+0x15c8>
    80006430:	00017517          	auipc	a0,0x17
    80006434:	b7850513          	add	a0,a0,-1160 # 8001cfa8 <__func__.1+0x300>
    80006438:	7af140ef          	jal	8001b3e6 <printf>
    8000643c:	00144783          	lbu	a5,1(s0)
    80006440:	00017597          	auipc	a1,0x17
    80006444:	b3058593          	add	a1,a1,-1232 # 8001cf70 <__func__.1+0x2c8>
    80006448:	c789                	beqz	a5,80006452 <wfi_exception_tests_3+0xaa>
    8000644a:	00017597          	auipc	a1,0x17
    8000644e:	b3658593          	add	a1,a1,-1226 # 8001cf80 <__func__.1+0x2d8>
    80006452:	00017517          	auipc	a0,0x17
    80006456:	b6e50513          	add	a0,a0,-1170 # 8001cfc0 <__func__.1+0x318>
    8000645a:	78d140ef          	jal	8001b3e6 <printf>
    8000645e:	00144783          	lbu	a5,1(s0)
    80006462:	e3b9                	bnez	a5,800064a8 <wfi_exception_tests_3+0x100>
    80006464:	4529                	li	a0,10
    80006466:	653130ef          	jal	8001a2b8 <putchar>
    8000646a:	00144783          	lbu	a5,1(s0)
    8000646e:	e79d                	bnez	a5,8000649c <wfi_exception_tests_3+0xf4>
    80006470:	4405                	li	s0,1

    /** 
     * Delegate the pending interrupt to hs mode so it doesnt immediately 
     * trigger a trap to machine when we jump to hs.
     */
    TEST_END();
    80006472:	00017597          	auipc	a1,0x17
    80006476:	afe58593          	add	a1,a1,-1282 # 8001cf70 <__func__.1+0x2c8>
    8000647a:	00017517          	auipc	a0,0x17
    8000647e:	bae50513          	add	a0,a0,-1106 # 8001d028 <__func__.1+0x380>
    80006482:	765140ef          	jal	8001b3e6 <printf>
    80006486:	4511                	li	a0,4
    80006488:	e56fa0ef          	jal	80000ade <goto_priv>
    8000648c:	e9bfa0ef          	jal	80001326 <reset_state>
}
    80006490:	60e2                	ld	ra,24(sp)
    80006492:	8522                	mv	a0,s0
    80006494:	6442                	ld	s0,16(sp)
    80006496:	64a2                	ld	s1,8(sp)
    80006498:	6105                	add	sp,sp,32
    8000649a:	8082                	ret
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    8000649c:	4401                	li	s0,0
    TEST_END();
    8000649e:	00017597          	auipc	a1,0x17
    800064a2:	ae258593          	add	a1,a1,-1310 # 8001cf80 <__func__.1+0x2d8>
    800064a6:	bfd1                	j	8000647a <wfi_exception_tests_3+0xd2>
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    800064a8:	00017517          	auipc	a0,0x17
    800064ac:	b2050513          	add	a0,a0,-1248 # 8001cfc8 <__func__.1+0x320>
    800064b0:	737140ef          	jal	8001b3e6 <printf>
    800064b4:	02900513          	li	a0,41
    800064b8:	601130ef          	jal	8001a2b8 <putchar>
    800064bc:	b765                	j	80006464 <wfi_exception_tests_3+0xbc>

00000000800064be <wfi_exception_tests_4>:

bool wfi_exception_tests_4() {
    800064be:	1101                	add	sp,sp,-32

    TEST_START();
    800064c0:	00015597          	auipc	a1,0x15
    800064c4:	7f058593          	add	a1,a1,2032 # 8001bcb0 <__func__.18>
    800064c8:	00017517          	auipc	a0,0x17
    800064cc:	ac850513          	add	a0,a0,-1336 # 8001cf90 <__func__.1+0x2e8>
bool wfi_exception_tests_4() {
    800064d0:	ec06                	sd	ra,24(sp)
    800064d2:	e822                	sd	s0,16(sp)
    800064d4:	e426                	sd	s1,8(sp)
    TEST_START();
    800064d6:	711140ef          	jal	8001b3e6 <printf>
    800064da:	4529                	li	a0,10
    800064dc:	5dd130ef          	jal	8001a2b8 <putchar>
    
    TEST_SETUP_EXCEPT();
    800064e0:	0ff0000f          	fence
    800064e4:	00037417          	auipc	s0,0x37
    800064e8:	b2c40413          	add	s0,s0,-1236 # 8003d010 <excpt>
    800064ec:	4485                	li	s1,1
    800064ee:	00941023          	sh	s1,0(s0)
    800064f2:	00037797          	auipc	a5,0x37
    800064f6:	b407bb23          	sd	zero,-1194(a5) # 8003d048 <excpt+0x38>
    800064fa:	0ff0000f          	fence

    //mstatus.TW=0时，在HS模式下，中断未被禁用，且代理没打开，执行wfi指令
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800064fe:	002007b7          	lui	a5,0x200
    80006502:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006506:	30205073          	csrw	medeleg,0
    CSRW(mideleg,0);   
    8000650a:	30305073          	csrw	mideleg,0
    CSRS(CSR_HIE, 0b0100);
    8000650e:	60426073          	csrs	hie,4
    CSRS(CSR_HIP, 0b0100);
    80006512:	64426073          	csrs	hip,4

    goto_priv(PRIV_HS);
    80006516:	450d                	li	a0,3
    80006518:	dc6fa0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000651c:	0ff0000f          	fence
    80006520:	00037797          	auipc	a5,0x37
    80006524:	b207b423          	sd	zero,-1240(a5) # 8003d048 <excpt+0x38>
    80006528:	00941023          	sh	s1,0(s0)
    8000652c:	0ff0000f          	fence
    80006530:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006534:	08200593          	li	a1,130
    80006538:	00018617          	auipc	a2,0x18
    8000653c:	da860613          	add	a2,a2,-600 # 8001e2e0 <__func__.1+0x1638>
    80006540:	00017517          	auipc	a0,0x17
    80006544:	a6850513          	add	a0,a0,-1432 # 8001cfa8 <__func__.1+0x300>
    80006548:	69f140ef          	jal	8001b3e6 <printf>
    8000654c:	00144783          	lbu	a5,1(s0)
    80006550:	00017597          	auipc	a1,0x17
    80006554:	a2058593          	add	a1,a1,-1504 # 8001cf70 <__func__.1+0x2c8>
    80006558:	c789                	beqz	a5,80006562 <wfi_exception_tests_4+0xa4>
    8000655a:	00017597          	auipc	a1,0x17
    8000655e:	a2658593          	add	a1,a1,-1498 # 8001cf80 <__func__.1+0x2d8>
    80006562:	00017517          	auipc	a0,0x17
    80006566:	a5e50513          	add	a0,a0,-1442 # 8001cfc0 <__func__.1+0x318>
    8000656a:	67d140ef          	jal	8001b3e6 <printf>
    8000656e:	00144783          	lbu	a5,1(s0)
    80006572:	e3b9                	bnez	a5,800065b8 <wfi_exception_tests_4+0xfa>
    80006574:	4529                	li	a0,10
    80006576:	543130ef          	jal	8001a2b8 <putchar>
    8000657a:	00144783          	lbu	a5,1(s0)
    8000657e:	e79d                	bnez	a5,800065ac <wfi_exception_tests_4+0xee>
    80006580:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80006582:	00017597          	auipc	a1,0x17
    80006586:	9ee58593          	add	a1,a1,-1554 # 8001cf70 <__func__.1+0x2c8>
    8000658a:	00017517          	auipc	a0,0x17
    8000658e:	a9e50513          	add	a0,a0,-1378 # 8001d028 <__func__.1+0x380>
    80006592:	655140ef          	jal	8001b3e6 <printf>
    80006596:	4511                	li	a0,4
    80006598:	d46fa0ef          	jal	80000ade <goto_priv>
    8000659c:	d8bfa0ef          	jal	80001326 <reset_state>
}
    800065a0:	60e2                	ld	ra,24(sp)
    800065a2:	8522                	mv	a0,s0
    800065a4:	6442                	ld	s0,16(sp)
    800065a6:	64a2                	ld	s1,8(sp)
    800065a8:	6105                	add	sp,sp,32
    800065aa:	8082                	ret
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    800065ac:	4401                	li	s0,0
    TEST_END();
    800065ae:	00017597          	auipc	a1,0x17
    800065b2:	9d258593          	add	a1,a1,-1582 # 8001cf80 <__func__.1+0x2d8>
    800065b6:	bfd1                	j	8000658a <wfi_exception_tests_4+0xcc>
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    800065b8:	00017517          	auipc	a0,0x17
    800065bc:	a1050513          	add	a0,a0,-1520 # 8001cfc8 <__func__.1+0x320>
    800065c0:	627140ef          	jal	8001b3e6 <printf>
    800065c4:	02900513          	li	a0,41
    800065c8:	4f1130ef          	jal	8001a2b8 <putchar>
    800065cc:	b765                	j	80006574 <wfi_exception_tests_4+0xb6>

00000000800065ce <wfi_exception_tests_5>:

bool wfi_exception_tests_5() {
    800065ce:	1101                	add	sp,sp,-32

    TEST_START();
    800065d0:	00015597          	auipc	a1,0x15
    800065d4:	6f858593          	add	a1,a1,1784 # 8001bcc8 <__func__.17>
    800065d8:	00017517          	auipc	a0,0x17
    800065dc:	9b850513          	add	a0,a0,-1608 # 8001cf90 <__func__.1+0x2e8>
bool wfi_exception_tests_5() {
    800065e0:	ec06                	sd	ra,24(sp)
    800065e2:	e822                	sd	s0,16(sp)
    800065e4:	e426                	sd	s1,8(sp)
    TEST_START();
    800065e6:	601140ef          	jal	8001b3e6 <printf>
    800065ea:	4529                	li	a0,10
    800065ec:	4cd130ef          	jal	8001a2b8 <putchar>
    
    TEST_SETUP_EXCEPT();
    800065f0:	0ff0000f          	fence
    800065f4:	00037417          	auipc	s0,0x37
    800065f8:	a1c40413          	add	s0,s0,-1508 # 8003d010 <excpt>
    800065fc:	4485                	li	s1,1
    800065fe:	00941023          	sh	s1,0(s0)
    80006602:	00037797          	auipc	a5,0x37
    80006606:	a407b323          	sd	zero,-1466(a5) # 8003d048 <excpt+0x38>
    8000660a:	0ff0000f          	fence

    CSRC(CSR_MSTATUS,MSTATUS_TW);
    8000660e:	002007b7          	lui	a5,0x200
    80006612:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006616:	30205073          	csrw	medeleg,0
    CSRW(mideleg,0);   
    8000661a:	30305073          	csrw	mideleg,0
    //mstatus.TW=0时，在VS模式下，中断未被禁用，且代理没打开，执行wfi指令

    goto_priv(PRIV_VS); //防止进入hs异常后不能直接进入m模式
    8000661e:	4509                	li	a0,2
    80006620:	cbefa0ef          	jal	80000ade <goto_priv>
    goto_priv(PRIV_M); 
    80006624:	4511                	li	a0,4
    80006626:	cb8fa0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_VSIE, 0b0100);
    8000662a:	20426073          	csrs	vsie,4
    CSRS(CSR_VSIP, 0b0100);
    8000662e:	24426073          	csrs	vsip,4

    goto_priv(PRIV_VS);
    80006632:	4509                	li	a0,2
    80006634:	caafa0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80006638:	0ff0000f          	fence
    8000663c:	00037797          	auipc	a5,0x37
    80006640:	a007b623          	sd	zero,-1524(a5) # 8003d048 <excpt+0x38>
    80006644:	00941023          	sh	s1,0(s0)
    80006648:	0ff0000f          	fence
    8000664c:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006650:	08200593          	li	a1,130
    80006654:	00018617          	auipc	a2,0x18
    80006658:	cf460613          	add	a2,a2,-780 # 8001e348 <__func__.1+0x16a0>
    8000665c:	00017517          	auipc	a0,0x17
    80006660:	94c50513          	add	a0,a0,-1716 # 8001cfa8 <__func__.1+0x300>
    80006664:	583140ef          	jal	8001b3e6 <printf>
    80006668:	00144783          	lbu	a5,1(s0)
    8000666c:	00017597          	auipc	a1,0x17
    80006670:	90458593          	add	a1,a1,-1788 # 8001cf70 <__func__.1+0x2c8>
    80006674:	c789                	beqz	a5,8000667e <wfi_exception_tests_5+0xb0>
    80006676:	00017597          	auipc	a1,0x17
    8000667a:	90a58593          	add	a1,a1,-1782 # 8001cf80 <__func__.1+0x2d8>
    8000667e:	00017517          	auipc	a0,0x17
    80006682:	94250513          	add	a0,a0,-1726 # 8001cfc0 <__func__.1+0x318>
    80006686:	561140ef          	jal	8001b3e6 <printf>
    8000668a:	00144783          	lbu	a5,1(s0)
    8000668e:	e3b9                	bnez	a5,800066d4 <wfi_exception_tests_5+0x106>
    80006690:	4529                	li	a0,10
    80006692:	427130ef          	jal	8001a2b8 <putchar>
    80006696:	00144783          	lbu	a5,1(s0)
    8000669a:	e79d                	bnez	a5,800066c8 <wfi_exception_tests_5+0xfa>
    8000669c:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    8000669e:	00017597          	auipc	a1,0x17
    800066a2:	8d258593          	add	a1,a1,-1838 # 8001cf70 <__func__.1+0x2c8>
    800066a6:	00017517          	auipc	a0,0x17
    800066aa:	98250513          	add	a0,a0,-1662 # 8001d028 <__func__.1+0x380>
    800066ae:	539140ef          	jal	8001b3e6 <printf>
    800066b2:	4511                	li	a0,4
    800066b4:	c2afa0ef          	jal	80000ade <goto_priv>
    800066b8:	c6ffa0ef          	jal	80001326 <reset_state>
}
    800066bc:	60e2                	ld	ra,24(sp)
    800066be:	8522                	mv	a0,s0
    800066c0:	6442                	ld	s0,16(sp)
    800066c2:	64a2                	ld	s1,8(sp)
    800066c4:	6105                	add	sp,sp,32
    800066c6:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    800066c8:	4401                	li	s0,0
    TEST_END();
    800066ca:	00017597          	auipc	a1,0x17
    800066ce:	8b658593          	add	a1,a1,-1866 # 8001cf80 <__func__.1+0x2d8>
    800066d2:	bfd1                	j	800066a6 <wfi_exception_tests_5+0xd8>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    800066d4:	00017517          	auipc	a0,0x17
    800066d8:	8f450513          	add	a0,a0,-1804 # 8001cfc8 <__func__.1+0x320>
    800066dc:	50b140ef          	jal	8001b3e6 <printf>
    800066e0:	02900513          	li	a0,41
    800066e4:	3d5130ef          	jal	8001a2b8 <putchar>
    800066e8:	b765                	j	80006690 <wfi_exception_tests_5+0xc2>

00000000800066ea <wfi_exception_tests_6>:

bool wfi_exception_tests_6() {
    800066ea:	1101                	add	sp,sp,-32

    TEST_START();
    800066ec:	00015597          	auipc	a1,0x15
    800066f0:	5f458593          	add	a1,a1,1524 # 8001bce0 <__func__.16>
    800066f4:	00017517          	auipc	a0,0x17
    800066f8:	89c50513          	add	a0,a0,-1892 # 8001cf90 <__func__.1+0x2e8>
bool wfi_exception_tests_6() {
    800066fc:	ec06                	sd	ra,24(sp)
    800066fe:	e822                	sd	s0,16(sp)
    80006700:	e426                	sd	s1,8(sp)
    TEST_START();
    80006702:	4e5140ef          	jal	8001b3e6 <printf>
    80006706:	4529                	li	a0,10
    80006708:	3b1130ef          	jal	8001a2b8 <putchar>
    
    TEST_SETUP_EXCEPT();
    8000670c:	0ff0000f          	fence
    80006710:	00037417          	auipc	s0,0x37
    80006714:	90040413          	add	s0,s0,-1792 # 8003d010 <excpt>
    80006718:	4485                	li	s1,1
    8000671a:	00941023          	sh	s1,0(s0)
    8000671e:	00037797          	auipc	a5,0x37
    80006722:	9207b523          	sd	zero,-1750(a5) # 8003d048 <excpt+0x38>
    80006726:	0ff0000f          	fence
    
    goto_priv(PRIV_M);
    8000672a:	4511                	li	a0,4
    8000672c:	bb2fa0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006730:	002007b7          	lui	a5,0x200
    80006734:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006738:	30205073          	csrw	medeleg,0
    CSRW(mideleg,0);   
    8000673c:	30305073          	csrw	mideleg,0
    CSRS(mie, 0b0100);
    80006740:	30426073          	csrs	mie,4
    CSRS(mip, 0b0100);
    80006744:	34426073          	csrs	mip,4
    CSRS(mideleg, 0b0100);
    80006748:	30326073          	csrs	mideleg,4

    goto_priv(PRIV_M);
    8000674c:	4511                	li	a0,4
    8000674e:	b90fa0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80006752:	0ff0000f          	fence
    80006756:	00037797          	auipc	a5,0x37
    8000675a:	8e07b923          	sd	zero,-1806(a5) # 8003d048 <excpt+0x38>
    8000675e:	00941023          	sh	s1,0(s0)
    80006762:	0ff0000f          	fence
    80006766:	10500073          	wfi
    wfi();
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    8000676a:	08200593          	li	a1,130
    8000676e:	00018617          	auipc	a2,0x18
    80006772:	c4260613          	add	a2,a2,-958 # 8001e3b0 <__func__.1+0x1708>
    80006776:	00017517          	auipc	a0,0x17
    8000677a:	83250513          	add	a0,a0,-1998 # 8001cfa8 <__func__.1+0x300>
    8000677e:	469140ef          	jal	8001b3e6 <printf>
    80006782:	00144783          	lbu	a5,1(s0)
    80006786:	00016597          	auipc	a1,0x16
    8000678a:	7ea58593          	add	a1,a1,2026 # 8001cf70 <__func__.1+0x2c8>
    8000678e:	c789                	beqz	a5,80006798 <wfi_exception_tests_6+0xae>
    80006790:	00016597          	auipc	a1,0x16
    80006794:	7f058593          	add	a1,a1,2032 # 8001cf80 <__func__.1+0x2d8>
    80006798:	00017517          	auipc	a0,0x17
    8000679c:	82850513          	add	a0,a0,-2008 # 8001cfc0 <__func__.1+0x318>
    800067a0:	447140ef          	jal	8001b3e6 <printf>
    800067a4:	00144783          	lbu	a5,1(s0)
    800067a8:	e3b9                	bnez	a5,800067ee <wfi_exception_tests_6+0x104>
    800067aa:	4529                	li	a0,10
    800067ac:	30d130ef          	jal	8001a2b8 <putchar>
    800067b0:	00144783          	lbu	a5,1(s0)
    800067b4:	e79d                	bnez	a5,800067e2 <wfi_exception_tests_6+0xf8>
    800067b6:	4405                	li	s0,1

    /** 
     * Delegate the pending interrupt to hs mode so it doesnt immediately 
     * trigger a trap to machine when we jump to hs.
     */
    TEST_END();
    800067b8:	00016597          	auipc	a1,0x16
    800067bc:	7b858593          	add	a1,a1,1976 # 8001cf70 <__func__.1+0x2c8>
    800067c0:	00017517          	auipc	a0,0x17
    800067c4:	86850513          	add	a0,a0,-1944 # 8001d028 <__func__.1+0x380>
    800067c8:	41f140ef          	jal	8001b3e6 <printf>
    800067cc:	4511                	li	a0,4
    800067ce:	b10fa0ef          	jal	80000ade <goto_priv>
    800067d2:	b55fa0ef          	jal	80001326 <reset_state>
}
    800067d6:	60e2                	ld	ra,24(sp)
    800067d8:	8522                	mv	a0,s0
    800067da:	6442                	ld	s0,16(sp)
    800067dc:	64a2                	ld	s1,8(sp)
    800067de:	6105                	add	sp,sp,32
    800067e0:	8082                	ret
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    800067e2:	4401                	li	s0,0
    TEST_END();
    800067e4:	00016597          	auipc	a1,0x16
    800067e8:	79c58593          	add	a1,a1,1948 # 8001cf80 <__func__.1+0x2d8>
    800067ec:	bfd1                	j	800067c0 <wfi_exception_tests_6+0xd6>
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    800067ee:	00016517          	auipc	a0,0x16
    800067f2:	7da50513          	add	a0,a0,2010 # 8001cfc8 <__func__.1+0x320>
    800067f6:	3f1140ef          	jal	8001b3e6 <printf>
    800067fa:	02900513          	li	a0,41
    800067fe:	2bb130ef          	jal	8001a2b8 <putchar>
    80006802:	b765                	j	800067aa <wfi_exception_tests_6+0xc0>

0000000080006804 <wfi_exception_tests_7>:



bool wfi_exception_tests_7() {
    80006804:	1101                	add	sp,sp,-32

    TEST_START();
    80006806:	00015597          	auipc	a1,0x15
    8000680a:	4f258593          	add	a1,a1,1266 # 8001bcf8 <__func__.15>
    8000680e:	00016517          	auipc	a0,0x16
    80006812:	78250513          	add	a0,a0,1922 # 8001cf90 <__func__.1+0x2e8>
bool wfi_exception_tests_7() {
    80006816:	ec06                	sd	ra,24(sp)
    80006818:	e822                	sd	s0,16(sp)
    8000681a:	e426                	sd	s1,8(sp)
    TEST_START();
    8000681c:	3cb140ef          	jal	8001b3e6 <printf>
    80006820:	4529                	li	a0,10
    80006822:	297130ef          	jal	8001a2b8 <putchar>
    
    TEST_SETUP_EXCEPT();
    80006826:	0ff0000f          	fence
    8000682a:	00036417          	auipc	s0,0x36
    8000682e:	7e640413          	add	s0,s0,2022 # 8003d010 <excpt>
    80006832:	4485                	li	s1,1
    80006834:	00941023          	sh	s1,0(s0)
    80006838:	00037797          	auipc	a5,0x37
    8000683c:	8007b823          	sd	zero,-2032(a5) # 8003d048 <excpt+0x38>
    80006840:	0ff0000f          	fence

    //mstatus.TW=0时，在VS模式下，中断未被禁用，且代理打开，执行wfi指令
    goto_priv(PRIV_M); 
    80006844:	4511                	li	a0,4
    80006846:	a98fa0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    8000684a:	002007b7          	lui	a5,0x200
    8000684e:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_VSIE, 0b0100);
    80006852:	20426073          	csrs	vsie,4
    CSRS(CSR_VSIP, 0b0100);
    80006856:	24426073          	csrs	vsip,4
    CSRS(mideleg, 0b0100);
    8000685a:	30326073          	csrs	mideleg,4

    goto_priv(PRIV_VS);
    8000685e:	4509                	li	a0,2
    80006860:	a7efa0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80006864:	0ff0000f          	fence
    80006868:	00036797          	auipc	a5,0x36
    8000686c:	7e07b023          	sd	zero,2016(a5) # 8003d048 <excpt+0x38>
    80006870:	00941023          	sh	s1,0(s0)
    80006874:	0ff0000f          	fence
    80006878:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    8000687c:	08200593          	li	a1,130
    80006880:	00018617          	auipc	a2,0x18
    80006884:	ba060613          	add	a2,a2,-1120 # 8001e420 <__func__.1+0x1778>
    80006888:	00016517          	auipc	a0,0x16
    8000688c:	72050513          	add	a0,a0,1824 # 8001cfa8 <__func__.1+0x300>
    80006890:	357140ef          	jal	8001b3e6 <printf>
    80006894:	00144783          	lbu	a5,1(s0)
    80006898:	00016597          	auipc	a1,0x16
    8000689c:	6d858593          	add	a1,a1,1752 # 8001cf70 <__func__.1+0x2c8>
    800068a0:	c789                	beqz	a5,800068aa <wfi_exception_tests_7+0xa6>
    800068a2:	00016597          	auipc	a1,0x16
    800068a6:	6de58593          	add	a1,a1,1758 # 8001cf80 <__func__.1+0x2d8>
    800068aa:	00016517          	auipc	a0,0x16
    800068ae:	71650513          	add	a0,a0,1814 # 8001cfc0 <__func__.1+0x318>
    800068b2:	335140ef          	jal	8001b3e6 <printf>
    800068b6:	00144783          	lbu	a5,1(s0)
    800068ba:	e3b9                	bnez	a5,80006900 <wfi_exception_tests_7+0xfc>
    800068bc:	4529                	li	a0,10
    800068be:	1fb130ef          	jal	8001a2b8 <putchar>
    800068c2:	00144783          	lbu	a5,1(s0)
    800068c6:	e79d                	bnez	a5,800068f4 <wfi_exception_tests_7+0xf0>
    800068c8:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    800068ca:	00016597          	auipc	a1,0x16
    800068ce:	6a658593          	add	a1,a1,1702 # 8001cf70 <__func__.1+0x2c8>
    800068d2:	00016517          	auipc	a0,0x16
    800068d6:	75650513          	add	a0,a0,1878 # 8001d028 <__func__.1+0x380>
    800068da:	30d140ef          	jal	8001b3e6 <printf>
    800068de:	4511                	li	a0,4
    800068e0:	9fefa0ef          	jal	80000ade <goto_priv>
    800068e4:	a43fa0ef          	jal	80001326 <reset_state>
}
    800068e8:	60e2                	ld	ra,24(sp)
    800068ea:	8522                	mv	a0,s0
    800068ec:	6442                	ld	s0,16(sp)
    800068ee:	64a2                	ld	s1,8(sp)
    800068f0:	6105                	add	sp,sp,32
    800068f2:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    800068f4:	4401                	li	s0,0
    TEST_END();
    800068f6:	00016597          	auipc	a1,0x16
    800068fa:	68a58593          	add	a1,a1,1674 # 8001cf80 <__func__.1+0x2d8>
    800068fe:	bfd1                	j	800068d2 <wfi_exception_tests_7+0xce>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006900:	00016517          	auipc	a0,0x16
    80006904:	6c850513          	add	a0,a0,1736 # 8001cfc8 <__func__.1+0x320>
    80006908:	2df140ef          	jal	8001b3e6 <printf>
    8000690c:	02900513          	li	a0,41
    80006910:	1a9130ef          	jal	8001a2b8 <putchar>
    80006914:	b765                	j	800068bc <wfi_exception_tests_7+0xb8>

0000000080006916 <wfi_exception_tests_8>:

bool wfi_exception_tests_8() {
    80006916:	1141                	add	sp,sp,-16

    TEST_START();
    80006918:	00015597          	auipc	a1,0x15
    8000691c:	3f858593          	add	a1,a1,1016 # 8001bd10 <__func__.14>
    80006920:	00016517          	auipc	a0,0x16
    80006924:	67050513          	add	a0,a0,1648 # 8001cf90 <__func__.1+0x2e8>
bool wfi_exception_tests_8() {
    80006928:	e406                	sd	ra,8(sp)
    8000692a:	e022                	sd	s0,0(sp)
    TEST_START();
    8000692c:	2bb140ef          	jal	8001b3e6 <printf>
    80006930:	4529                	li	a0,10
    80006932:	187130ef          	jal	8001a2b8 <putchar>

    //mstatus.TW=0时，在VS，中断等待拉高，但中断使能未拉高，中断未被代理到低特权模式
    goto_priv(PRIV_M); 
    80006936:	4511                	li	a0,4
    80006938:	9a6fa0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    8000693c:	002007b7          	lui	a5,0x200
    80006940:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_SIE, 0x0);
    80006944:	10406073          	csrs	sie,0
    CSRS(mideleg, 0x0);
    80006948:	30306073          	csrs	mideleg,0

    goto_priv(PRIV_VS);
    8000694c:	4509                	li	a0,2
    8000694e:	990fa0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80006952:	0ff0000f          	fence
    80006956:	4785                	li	a5,1
    80006958:	00036417          	auipc	s0,0x36
    8000695c:	6b840413          	add	s0,s0,1720 # 8003d010 <excpt>
    80006960:	00f41023          	sh	a5,0(s0)
    80006964:	00036797          	auipc	a5,0x36
    80006968:	6e07b223          	sd	zero,1764(a5) # 8003d048 <excpt+0x38>
    8000696c:	0ff0000f          	fence
    80006970:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80006974:	08200593          	li	a1,130
    80006978:	00018617          	auipc	a2,0x18
    8000697c:	b1060613          	add	a2,a2,-1264 # 8001e488 <__func__.1+0x17e0>
    80006980:	00016517          	auipc	a0,0x16
    80006984:	62850513          	add	a0,a0,1576 # 8001cfa8 <__func__.1+0x300>
    80006988:	25f140ef          	jal	8001b3e6 <printf>
    8000698c:	00144783          	lbu	a5,1(s0)
    80006990:	00016597          	auipc	a1,0x16
    80006994:	5e058593          	add	a1,a1,1504 # 8001cf70 <__func__.1+0x2c8>
    80006998:	c789                	beqz	a5,800069a2 <wfi_exception_tests_8+0x8c>
    8000699a:	00016597          	auipc	a1,0x16
    8000699e:	5e658593          	add	a1,a1,1510 # 8001cf80 <__func__.1+0x2d8>
    800069a2:	00016517          	auipc	a0,0x16
    800069a6:	61e50513          	add	a0,a0,1566 # 8001cfc0 <__func__.1+0x318>
    800069aa:	23d140ef          	jal	8001b3e6 <printf>
    800069ae:	00144783          	lbu	a5,1(s0)
    800069b2:	e3b1                	bnez	a5,800069f6 <wfi_exception_tests_8+0xe0>
    800069b4:	4529                	li	a0,10
    800069b6:	103130ef          	jal	8001a2b8 <putchar>
    800069ba:	00144783          	lbu	a5,1(s0)
    800069be:	e795                	bnez	a5,800069ea <wfi_exception_tests_8+0xd4>
    800069c0:	4405                	li	s0,1
        excpt.triggered == false
    );  

    TEST_END();
    800069c2:	00016597          	auipc	a1,0x16
    800069c6:	5ae58593          	add	a1,a1,1454 # 8001cf70 <__func__.1+0x2c8>
    800069ca:	00016517          	auipc	a0,0x16
    800069ce:	65e50513          	add	a0,a0,1630 # 8001d028 <__func__.1+0x380>
    800069d2:	215140ef          	jal	8001b3e6 <printf>
    800069d6:	4511                	li	a0,4
    800069d8:	906fa0ef          	jal	80000ade <goto_priv>
    800069dc:	94bfa0ef          	jal	80001326 <reset_state>
}
    800069e0:	60a2                	ld	ra,8(sp)
    800069e2:	8522                	mv	a0,s0
    800069e4:	6402                	ld	s0,0(sp)
    800069e6:	0141                	add	sp,sp,16
    800069e8:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800069ea:	4401                	li	s0,0
    TEST_END();
    800069ec:	00016597          	auipc	a1,0x16
    800069f0:	59458593          	add	a1,a1,1428 # 8001cf80 <__func__.1+0x2d8>
    800069f4:	bfd9                	j	800069ca <wfi_exception_tests_8+0xb4>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800069f6:	00016517          	auipc	a0,0x16
    800069fa:	5d250513          	add	a0,a0,1490 # 8001cfc8 <__func__.1+0x320>
    800069fe:	1e9140ef          	jal	8001b3e6 <printf>
    80006a02:	02900513          	li	a0,41
    80006a06:	0b3130ef          	jal	8001a2b8 <putchar>
    80006a0a:	b76d                	j	800069b4 <wfi_exception_tests_8+0x9e>

0000000080006a0c <wfi_exception_tests_9>:

bool wfi_exception_tests_9() {
    80006a0c:	1141                	add	sp,sp,-16

    TEST_START();
    80006a0e:	00015597          	auipc	a1,0x15
    80006a12:	31a58593          	add	a1,a1,794 # 8001bd28 <__func__.13>
    80006a16:	00016517          	auipc	a0,0x16
    80006a1a:	57a50513          	add	a0,a0,1402 # 8001cf90 <__func__.1+0x2e8>
bool wfi_exception_tests_9() {
    80006a1e:	e406                	sd	ra,8(sp)
    80006a20:	e022                	sd	s0,0(sp)
    TEST_START();
    80006a22:	1c5140ef          	jal	8001b3e6 <printf>
    80006a26:	4529                	li	a0,10
    80006a28:	091130ef          	jal	8001a2b8 <putchar>
    //mstatus.TW=0时，在HS模式下，发生中断，中断使能未拉高，中断未被代理到低特权模式
    
    goto_priv(PRIV_M); 
    80006a2c:	4511                	li	a0,4
    80006a2e:	8b0fa0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006a32:	002007b7          	lui	a5,0x200
    80006a36:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_SIE, 0x0);
    80006a3a:	10406073          	csrs	sie,0
    CSRS(mideleg, 0x0);
    80006a3e:	30306073          	csrs	mideleg,0

    goto_priv(PRIV_HS);
    80006a42:	450d                	li	a0,3
    80006a44:	89afa0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80006a48:	0ff0000f          	fence
    80006a4c:	4785                	li	a5,1
    80006a4e:	00036417          	auipc	s0,0x36
    80006a52:	5c240413          	add	s0,s0,1474 # 8003d010 <excpt>
    80006a56:	00f41023          	sh	a5,0(s0)
    80006a5a:	00036797          	auipc	a5,0x36
    80006a5e:	5e07b723          	sd	zero,1518(a5) # 8003d048 <excpt+0x38>
    80006a62:	0ff0000f          	fence
    80006a66:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80006a6a:	08200593          	li	a1,130
    80006a6e:	00018617          	auipc	a2,0x18
    80006a72:	a1a60613          	add	a2,a2,-1510 # 8001e488 <__func__.1+0x17e0>
    80006a76:	00016517          	auipc	a0,0x16
    80006a7a:	53250513          	add	a0,a0,1330 # 8001cfa8 <__func__.1+0x300>
    80006a7e:	169140ef          	jal	8001b3e6 <printf>
    80006a82:	00144783          	lbu	a5,1(s0)
    80006a86:	00016597          	auipc	a1,0x16
    80006a8a:	4ea58593          	add	a1,a1,1258 # 8001cf70 <__func__.1+0x2c8>
    80006a8e:	c789                	beqz	a5,80006a98 <wfi_exception_tests_9+0x8c>
    80006a90:	00016597          	auipc	a1,0x16
    80006a94:	4f058593          	add	a1,a1,1264 # 8001cf80 <__func__.1+0x2d8>
    80006a98:	00016517          	auipc	a0,0x16
    80006a9c:	52850513          	add	a0,a0,1320 # 8001cfc0 <__func__.1+0x318>
    80006aa0:	147140ef          	jal	8001b3e6 <printf>
    80006aa4:	00144783          	lbu	a5,1(s0)
    80006aa8:	e3b1                	bnez	a5,80006aec <wfi_exception_tests_9+0xe0>
    80006aaa:	4529                	li	a0,10
    80006aac:	00d130ef          	jal	8001a2b8 <putchar>
    80006ab0:	00144783          	lbu	a5,1(s0)
    80006ab4:	e795                	bnez	a5,80006ae0 <wfi_exception_tests_9+0xd4>
    80006ab6:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80006ab8:	00016597          	auipc	a1,0x16
    80006abc:	4b858593          	add	a1,a1,1208 # 8001cf70 <__func__.1+0x2c8>
    80006ac0:	00016517          	auipc	a0,0x16
    80006ac4:	56850513          	add	a0,a0,1384 # 8001d028 <__func__.1+0x380>
    80006ac8:	11f140ef          	jal	8001b3e6 <printf>
    80006acc:	4511                	li	a0,4
    80006ace:	810fa0ef          	jal	80000ade <goto_priv>
    80006ad2:	855fa0ef          	jal	80001326 <reset_state>
}
    80006ad6:	60a2                	ld	ra,8(sp)
    80006ad8:	8522                	mv	a0,s0
    80006ada:	6402                	ld	s0,0(sp)
    80006adc:	0141                	add	sp,sp,16
    80006ade:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80006ae0:	4401                	li	s0,0
    TEST_END();
    80006ae2:	00016597          	auipc	a1,0x16
    80006ae6:	49e58593          	add	a1,a1,1182 # 8001cf80 <__func__.1+0x2d8>
    80006aea:	bfd9                	j	80006ac0 <wfi_exception_tests_9+0xb4>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80006aec:	00016517          	auipc	a0,0x16
    80006af0:	4dc50513          	add	a0,a0,1244 # 8001cfc8 <__func__.1+0x320>
    80006af4:	0f3140ef          	jal	8001b3e6 <printf>
    80006af8:	02900513          	li	a0,41
    80006afc:	7bc130ef          	jal	8001a2b8 <putchar>
    80006b00:	b76d                	j	80006aaa <wfi_exception_tests_9+0x9e>

0000000080006b02 <wfi_exception_tests_10>:

bool wfi_exception_tests_10() {
    80006b02:	1141                	add	sp,sp,-16

    TEST_START();
    80006b04:	00015597          	auipc	a1,0x15
    80006b08:	23c58593          	add	a1,a1,572 # 8001bd40 <__func__.12>
    80006b0c:	00016517          	auipc	a0,0x16
    80006b10:	48450513          	add	a0,a0,1156 # 8001cf90 <__func__.1+0x2e8>
bool wfi_exception_tests_10() {
    80006b14:	e406                	sd	ra,8(sp)
    80006b16:	e022                	sd	s0,0(sp)
    TEST_START();
    80006b18:	0cf140ef          	jal	8001b3e6 <printf>
    80006b1c:	4529                	li	a0,10
    80006b1e:	79a130ef          	jal	8001a2b8 <putchar>
    //mstatus.TW=0时，在M模式下，发生中断，中断使能未拉高，中断未被代理到低特权模式
    
    goto_priv(PRIV_M); 
    80006b22:	4511                	li	a0,4
    80006b24:	fbbf90ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006b28:	002007b7          	lui	a5,0x200
    80006b2c:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_MIE, 0x0);
    80006b30:	30406073          	csrs	mie,0
    CSRS(mideleg, 0x0);
    80006b34:	30306073          	csrs	mideleg,0

    goto_priv(PRIV_M);
    80006b38:	4511                	li	a0,4
    80006b3a:	fa5f90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80006b3e:	0ff0000f          	fence
    80006b42:	4785                	li	a5,1
    80006b44:	00036417          	auipc	s0,0x36
    80006b48:	4cc40413          	add	s0,s0,1228 # 8003d010 <excpt>
    80006b4c:	00f41023          	sh	a5,0(s0)
    80006b50:	00036797          	auipc	a5,0x36
    80006b54:	4e07bc23          	sd	zero,1272(a5) # 8003d048 <excpt+0x38>
    80006b58:	0ff0000f          	fence
    80006b5c:	10500073          	wfi
    wfi();

    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80006b60:	08200593          	li	a1,130
    80006b64:	00018617          	auipc	a2,0x18
    80006b68:	96c60613          	add	a2,a2,-1684 # 8001e4d0 <__func__.1+0x1828>
    80006b6c:	00016517          	auipc	a0,0x16
    80006b70:	43c50513          	add	a0,a0,1084 # 8001cfa8 <__func__.1+0x300>
    80006b74:	073140ef          	jal	8001b3e6 <printf>
    80006b78:	00144783          	lbu	a5,1(s0)
    80006b7c:	00016597          	auipc	a1,0x16
    80006b80:	3f458593          	add	a1,a1,1012 # 8001cf70 <__func__.1+0x2c8>
    80006b84:	c789                	beqz	a5,80006b8e <wfi_exception_tests_10+0x8c>
    80006b86:	00016597          	auipc	a1,0x16
    80006b8a:	3fa58593          	add	a1,a1,1018 # 8001cf80 <__func__.1+0x2d8>
    80006b8e:	00016517          	auipc	a0,0x16
    80006b92:	43250513          	add	a0,a0,1074 # 8001cfc0 <__func__.1+0x318>
    80006b96:	051140ef          	jal	8001b3e6 <printf>
    80006b9a:	00144783          	lbu	a5,1(s0)
    80006b9e:	e3b1                	bnez	a5,80006be2 <wfi_exception_tests_10+0xe0>
    80006ba0:	4529                	li	a0,10
    80006ba2:	716130ef          	jal	8001a2b8 <putchar>
    80006ba6:	00144783          	lbu	a5,1(s0)
    80006baa:	e795                	bnez	a5,80006bd6 <wfi_exception_tests_10+0xd4>
    80006bac:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80006bae:	00016597          	auipc	a1,0x16
    80006bb2:	3c258593          	add	a1,a1,962 # 8001cf70 <__func__.1+0x2c8>
    80006bb6:	00016517          	auipc	a0,0x16
    80006bba:	47250513          	add	a0,a0,1138 # 8001d028 <__func__.1+0x380>
    80006bbe:	029140ef          	jal	8001b3e6 <printf>
    80006bc2:	4511                	li	a0,4
    80006bc4:	f1bf90ef          	jal	80000ade <goto_priv>
    80006bc8:	f5efa0ef          	jal	80001326 <reset_state>
}
    80006bcc:	60a2                	ld	ra,8(sp)
    80006bce:	8522                	mv	a0,s0
    80006bd0:	6402                	ld	s0,0(sp)
    80006bd2:	0141                	add	sp,sp,16
    80006bd4:	8082                	ret
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80006bd6:	4401                	li	s0,0
    TEST_END();
    80006bd8:	00016597          	auipc	a1,0x16
    80006bdc:	3a858593          	add	a1,a1,936 # 8001cf80 <__func__.1+0x2d8>
    80006be0:	bfd9                	j	80006bb6 <wfi_exception_tests_10+0xb4>
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80006be2:	00016517          	auipc	a0,0x16
    80006be6:	3e650513          	add	a0,a0,998 # 8001cfc8 <__func__.1+0x320>
    80006bea:	7fc140ef          	jal	8001b3e6 <printf>
    80006bee:	02900513          	li	a0,41
    80006bf2:	6c6130ef          	jal	8001a2b8 <putchar>
    80006bf6:	b76d                	j	80006ba0 <wfi_exception_tests_10+0x9e>

0000000080006bf8 <wfi_exception_tests_11>:

bool wfi_exception_tests_11() {
    80006bf8:	1141                	add	sp,sp,-16

    TEST_START();
    80006bfa:	00015597          	auipc	a1,0x15
    80006bfe:	15e58593          	add	a1,a1,350 # 8001bd58 <__func__.11>
    80006c02:	00016517          	auipc	a0,0x16
    80006c06:	38e50513          	add	a0,a0,910 # 8001cf90 <__func__.1+0x2e8>
bool wfi_exception_tests_11() {
    80006c0a:	e406                	sd	ra,8(sp)
    80006c0c:	e022                	sd	s0,0(sp)
    TEST_START();
    80006c0e:	7d8140ef          	jal	8001b3e6 <printf>
    80006c12:	4529                	li	a0,10
    80006c14:	6a4130ef          	jal	8001a2b8 <putchar>

    //mstatus.TW=0时，在VS，中断等待拉高，但中断使能未拉高，中断被代理到低特权模式
    goto_priv(PRIV_M); 
    80006c18:	4511                	li	a0,4
    80006c1a:	ec5f90ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006c1e:	002007b7          	lui	a5,0x200
    80006c22:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_SIE, 0x0);
    80006c26:	10405073          	csrw	sie,0

    CSRW(mideleg, (uint64_t)-1);
    80006c2a:	57fd                	li	a5,-1
    80006c2c:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_VS);
    80006c30:	4509                	li	a0,2
    80006c32:	eadf90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80006c36:	0ff0000f          	fence
    80006c3a:	4785                	li	a5,1
    80006c3c:	00036417          	auipc	s0,0x36
    80006c40:	3d440413          	add	s0,s0,980 # 8003d010 <excpt>
    80006c44:	00f41023          	sh	a5,0(s0)
    80006c48:	00036797          	auipc	a5,0x36
    80006c4c:	4007b023          	sd	zero,1024(a5) # 8003d048 <excpt+0x38>
    80006c50:	0ff0000f          	fence
    80006c54:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80006c58:	08200593          	li	a1,130
    80006c5c:	00018617          	auipc	a2,0x18
    80006c60:	8bc60613          	add	a2,a2,-1860 # 8001e518 <__func__.1+0x1870>
    80006c64:	00016517          	auipc	a0,0x16
    80006c68:	34450513          	add	a0,a0,836 # 8001cfa8 <__func__.1+0x300>
    80006c6c:	77a140ef          	jal	8001b3e6 <printf>
    80006c70:	00144783          	lbu	a5,1(s0)
    80006c74:	00016597          	auipc	a1,0x16
    80006c78:	2fc58593          	add	a1,a1,764 # 8001cf70 <__func__.1+0x2c8>
    80006c7c:	c789                	beqz	a5,80006c86 <wfi_exception_tests_11+0x8e>
    80006c7e:	00016597          	auipc	a1,0x16
    80006c82:	30258593          	add	a1,a1,770 # 8001cf80 <__func__.1+0x2d8>
    80006c86:	00016517          	auipc	a0,0x16
    80006c8a:	33a50513          	add	a0,a0,826 # 8001cfc0 <__func__.1+0x318>
    80006c8e:	758140ef          	jal	8001b3e6 <printf>
    80006c92:	00144783          	lbu	a5,1(s0)
    80006c96:	e3b1                	bnez	a5,80006cda <wfi_exception_tests_11+0xe2>
    80006c98:	4529                	li	a0,10
    80006c9a:	61e130ef          	jal	8001a2b8 <putchar>
    80006c9e:	00144783          	lbu	a5,1(s0)
    80006ca2:	e795                	bnez	a5,80006cce <wfi_exception_tests_11+0xd6>
    80006ca4:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80006ca6:	00016597          	auipc	a1,0x16
    80006caa:	2ca58593          	add	a1,a1,714 # 8001cf70 <__func__.1+0x2c8>
    80006cae:	00016517          	auipc	a0,0x16
    80006cb2:	37a50513          	add	a0,a0,890 # 8001d028 <__func__.1+0x380>
    80006cb6:	730140ef          	jal	8001b3e6 <printf>
    80006cba:	4511                	li	a0,4
    80006cbc:	e23f90ef          	jal	80000ade <goto_priv>
    80006cc0:	e66fa0ef          	jal	80001326 <reset_state>
}
    80006cc4:	60a2                	ld	ra,8(sp)
    80006cc6:	8522                	mv	a0,s0
    80006cc8:	6402                	ld	s0,0(sp)
    80006cca:	0141                	add	sp,sp,16
    80006ccc:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80006cce:	4401                	li	s0,0
    TEST_END();
    80006cd0:	00016597          	auipc	a1,0x16
    80006cd4:	2b058593          	add	a1,a1,688 # 8001cf80 <__func__.1+0x2d8>
    80006cd8:	bfd9                	j	80006cae <wfi_exception_tests_11+0xb6>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80006cda:	00016517          	auipc	a0,0x16
    80006cde:	2ee50513          	add	a0,a0,750 # 8001cfc8 <__func__.1+0x320>
    80006ce2:	704140ef          	jal	8001b3e6 <printf>
    80006ce6:	02900513          	li	a0,41
    80006cea:	5ce130ef          	jal	8001a2b8 <putchar>
    80006cee:	b76d                	j	80006c98 <wfi_exception_tests_11+0xa0>

0000000080006cf0 <wfi_exception_tests_12>:

bool wfi_exception_tests_12() {
    80006cf0:	1141                	add	sp,sp,-16

    TEST_START();
    80006cf2:	00015597          	auipc	a1,0x15
    80006cf6:	07e58593          	add	a1,a1,126 # 8001bd70 <__func__.10>
    80006cfa:	00016517          	auipc	a0,0x16
    80006cfe:	29650513          	add	a0,a0,662 # 8001cf90 <__func__.1+0x2e8>
bool wfi_exception_tests_12() {
    80006d02:	e406                	sd	ra,8(sp)
    80006d04:	e022                	sd	s0,0(sp)
    TEST_START();
    80006d06:	6e0140ef          	jal	8001b3e6 <printf>
    80006d0a:	4529                	li	a0,10
    80006d0c:	5ac130ef          	jal	8001a2b8 <putchar>
    //mstatus.TW=0时，在HS模式下，发生中断，中断使能未拉高，中断被代理到低特权模式
    
    goto_priv(PRIV_M); 
    80006d10:	4511                	li	a0,4
    80006d12:	dcdf90ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006d16:	002007b7          	lui	a5,0x200
    80006d1a:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_SIE, 0x0);
    80006d1e:	10405073          	csrw	sie,0
    CSRW(mideleg, (uint64_t)-1);
    80006d22:	57fd                	li	a5,-1
    80006d24:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_HS);
    80006d28:	450d                	li	a0,3
    80006d2a:	db5f90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80006d2e:	0ff0000f          	fence
    80006d32:	4785                	li	a5,1
    80006d34:	00036417          	auipc	s0,0x36
    80006d38:	2dc40413          	add	s0,s0,732 # 8003d010 <excpt>
    80006d3c:	00f41023          	sh	a5,0(s0)
    80006d40:	00036797          	auipc	a5,0x36
    80006d44:	3007b423          	sd	zero,776(a5) # 8003d048 <excpt+0x38>
    80006d48:	0ff0000f          	fence
    80006d4c:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80006d50:	08200593          	li	a1,130
    80006d54:	00017617          	auipc	a2,0x17
    80006d58:	7c460613          	add	a2,a2,1988 # 8001e518 <__func__.1+0x1870>
    80006d5c:	00016517          	auipc	a0,0x16
    80006d60:	24c50513          	add	a0,a0,588 # 8001cfa8 <__func__.1+0x300>
    80006d64:	682140ef          	jal	8001b3e6 <printf>
    80006d68:	00144783          	lbu	a5,1(s0)
    80006d6c:	00016597          	auipc	a1,0x16
    80006d70:	20458593          	add	a1,a1,516 # 8001cf70 <__func__.1+0x2c8>
    80006d74:	c789                	beqz	a5,80006d7e <wfi_exception_tests_12+0x8e>
    80006d76:	00016597          	auipc	a1,0x16
    80006d7a:	20a58593          	add	a1,a1,522 # 8001cf80 <__func__.1+0x2d8>
    80006d7e:	00016517          	auipc	a0,0x16
    80006d82:	24250513          	add	a0,a0,578 # 8001cfc0 <__func__.1+0x318>
    80006d86:	660140ef          	jal	8001b3e6 <printf>
    80006d8a:	00144783          	lbu	a5,1(s0)
    80006d8e:	e3b1                	bnez	a5,80006dd2 <wfi_exception_tests_12+0xe2>
    80006d90:	4529                	li	a0,10
    80006d92:	526130ef          	jal	8001a2b8 <putchar>
    80006d96:	00144783          	lbu	a5,1(s0)
    80006d9a:	e795                	bnez	a5,80006dc6 <wfi_exception_tests_12+0xd6>
    80006d9c:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80006d9e:	00016597          	auipc	a1,0x16
    80006da2:	1d258593          	add	a1,a1,466 # 8001cf70 <__func__.1+0x2c8>
    80006da6:	00016517          	auipc	a0,0x16
    80006daa:	28250513          	add	a0,a0,642 # 8001d028 <__func__.1+0x380>
    80006dae:	638140ef          	jal	8001b3e6 <printf>
    80006db2:	4511                	li	a0,4
    80006db4:	d2bf90ef          	jal	80000ade <goto_priv>
    80006db8:	d6efa0ef          	jal	80001326 <reset_state>
}
    80006dbc:	60a2                	ld	ra,8(sp)
    80006dbe:	8522                	mv	a0,s0
    80006dc0:	6402                	ld	s0,0(sp)
    80006dc2:	0141                	add	sp,sp,16
    80006dc4:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80006dc6:	4401                	li	s0,0
    TEST_END();
    80006dc8:	00016597          	auipc	a1,0x16
    80006dcc:	1b858593          	add	a1,a1,440 # 8001cf80 <__func__.1+0x2d8>
    80006dd0:	bfd9                	j	80006da6 <wfi_exception_tests_12+0xb6>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80006dd2:	00016517          	auipc	a0,0x16
    80006dd6:	1f650513          	add	a0,a0,502 # 8001cfc8 <__func__.1+0x320>
    80006dda:	60c140ef          	jal	8001b3e6 <printf>
    80006dde:	02900513          	li	a0,41
    80006de2:	4d6130ef          	jal	8001a2b8 <putchar>
    80006de6:	b76d                	j	80006d90 <wfi_exception_tests_12+0xa0>

0000000080006de8 <wfi_exception_tests_13>:

bool wfi_exception_tests_13() {
    80006de8:	1141                	add	sp,sp,-16

    TEST_START();
    80006dea:	00015597          	auipc	a1,0x15
    80006dee:	f9e58593          	add	a1,a1,-98 # 8001bd88 <__func__.9>
    80006df2:	00016517          	auipc	a0,0x16
    80006df6:	19e50513          	add	a0,a0,414 # 8001cf90 <__func__.1+0x2e8>
bool wfi_exception_tests_13() {
    80006dfa:	e406                	sd	ra,8(sp)
    80006dfc:	e022                	sd	s0,0(sp)
    TEST_START();
    80006dfe:	5e8140ef          	jal	8001b3e6 <printf>
    80006e02:	4529                	li	a0,10
    80006e04:	4b4130ef          	jal	8001a2b8 <putchar>
    //mstatus.TW=0时，在M模式下，发生中断，中断使能未拉高，中断被代理到低特权模式
    
    goto_priv(PRIV_M); 
    80006e08:	4511                	li	a0,4
    80006e0a:	cd5f90ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006e0e:	002007b7          	lui	a5,0x200
    80006e12:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_MIE, 0x0);
    80006e16:	30405073          	csrw	mie,0
    CSRW(mideleg, (uint64_t)-1);
    80006e1a:	57fd                	li	a5,-1
    80006e1c:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_M);
    80006e20:	4511                	li	a0,4
    80006e22:	cbdf90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80006e26:	0ff0000f          	fence
    80006e2a:	4785                	li	a5,1
    80006e2c:	00036417          	auipc	s0,0x36
    80006e30:	1e440413          	add	s0,s0,484 # 8003d010 <excpt>
    80006e34:	00f41023          	sh	a5,0(s0)
    80006e38:	00036797          	auipc	a5,0x36
    80006e3c:	2007b823          	sd	zero,528(a5) # 8003d048 <excpt+0x38>
    80006e40:	0ff0000f          	fence
    80006e44:	10500073          	wfi
    wfi();

    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80006e48:	08200593          	li	a1,130
    80006e4c:	00017617          	auipc	a2,0x17
    80006e50:	71460613          	add	a2,a2,1812 # 8001e560 <__func__.1+0x18b8>
    80006e54:	00016517          	auipc	a0,0x16
    80006e58:	15450513          	add	a0,a0,340 # 8001cfa8 <__func__.1+0x300>
    80006e5c:	58a140ef          	jal	8001b3e6 <printf>
    80006e60:	00144783          	lbu	a5,1(s0)
    80006e64:	00016597          	auipc	a1,0x16
    80006e68:	10c58593          	add	a1,a1,268 # 8001cf70 <__func__.1+0x2c8>
    80006e6c:	c789                	beqz	a5,80006e76 <wfi_exception_tests_13+0x8e>
    80006e6e:	00016597          	auipc	a1,0x16
    80006e72:	11258593          	add	a1,a1,274 # 8001cf80 <__func__.1+0x2d8>
    80006e76:	00016517          	auipc	a0,0x16
    80006e7a:	14a50513          	add	a0,a0,330 # 8001cfc0 <__func__.1+0x318>
    80006e7e:	568140ef          	jal	8001b3e6 <printf>
    80006e82:	00144783          	lbu	a5,1(s0)
    80006e86:	e3b1                	bnez	a5,80006eca <wfi_exception_tests_13+0xe2>
    80006e88:	4529                	li	a0,10
    80006e8a:	42e130ef          	jal	8001a2b8 <putchar>
    80006e8e:	00144783          	lbu	a5,1(s0)
    80006e92:	e795                	bnez	a5,80006ebe <wfi_exception_tests_13+0xd6>
    80006e94:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80006e96:	00016597          	auipc	a1,0x16
    80006e9a:	0da58593          	add	a1,a1,218 # 8001cf70 <__func__.1+0x2c8>
    80006e9e:	00016517          	auipc	a0,0x16
    80006ea2:	18a50513          	add	a0,a0,394 # 8001d028 <__func__.1+0x380>
    80006ea6:	540140ef          	jal	8001b3e6 <printf>
    80006eaa:	4511                	li	a0,4
    80006eac:	c33f90ef          	jal	80000ade <goto_priv>
    80006eb0:	c76fa0ef          	jal	80001326 <reset_state>
}
    80006eb4:	60a2                	ld	ra,8(sp)
    80006eb6:	8522                	mv	a0,s0
    80006eb8:	6402                	ld	s0,0(sp)
    80006eba:	0141                	add	sp,sp,16
    80006ebc:	8082                	ret
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80006ebe:	4401                	li	s0,0
    TEST_END();
    80006ec0:	00016597          	auipc	a1,0x16
    80006ec4:	0c058593          	add	a1,a1,192 # 8001cf80 <__func__.1+0x2d8>
    80006ec8:	bfd9                	j	80006e9e <wfi_exception_tests_13+0xb6>
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80006eca:	00016517          	auipc	a0,0x16
    80006ece:	0fe50513          	add	a0,a0,254 # 8001cfc8 <__func__.1+0x320>
    80006ed2:	514140ef          	jal	8001b3e6 <printf>
    80006ed6:	02900513          	li	a0,41
    80006eda:	3de130ef          	jal	8001a2b8 <putchar>
    80006ede:	b76d                	j	80006e88 <wfi_exception_tests_13+0xa0>

0000000080006ee0 <wfi_exception_tests_14>:

bool wfi_exception_tests_14() {
    80006ee0:	1141                	add	sp,sp,-16

    TEST_START();
    80006ee2:	00015597          	auipc	a1,0x15
    80006ee6:	ebe58593          	add	a1,a1,-322 # 8001bda0 <__func__.8>
    80006eea:	00016517          	auipc	a0,0x16
    80006eee:	0a650513          	add	a0,a0,166 # 8001cf90 <__func__.1+0x2e8>
bool wfi_exception_tests_14() {
    80006ef2:	e406                	sd	ra,8(sp)
    80006ef4:	e022                	sd	s0,0(sp)
    TEST_START();
    80006ef6:	4f0140ef          	jal	8001b3e6 <printf>
    80006efa:	4529                	li	a0,10
    80006efc:	3bc130ef          	jal	8001a2b8 <putchar>
    goto_priv(PRIV_M);
    80006f00:	4511                	li	a0,4
    80006f02:	bddf90ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006f06:	002007b7          	lui	a5,0x200
    80006f0a:	3007b073          	csrc	mstatus,a5
    CSRS(mideleg, 0b0100); 
    80006f0e:	30326073          	csrs	mideleg,4
    CSRS(CSR_HIE, 0b0100);
    80006f12:	60426073          	csrs	hie,4

    goto_priv(PRIV_VS);
    80006f16:	4509                	li	a0,2
    80006f18:	bc7f90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80006f1c:	0ff0000f          	fence
    80006f20:	4785                	li	a5,1
    80006f22:	00036417          	auipc	s0,0x36
    80006f26:	0ee40413          	add	s0,s0,238 # 8003d010 <excpt>
    80006f2a:	00f41023          	sh	a5,0(s0)
    80006f2e:	00036797          	auipc	a5,0x36
    80006f32:	1007bd23          	sd	zero,282(a5) # 8003d048 <excpt+0x38>
    80006f36:	0ff0000f          	fence
    80006f3a:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006f3e:	08200593          	li	a1,130
    80006f42:	00017617          	auipc	a2,0x17
    80006f46:	4de60613          	add	a2,a2,1246 # 8001e420 <__func__.1+0x1778>
    80006f4a:	00016517          	auipc	a0,0x16
    80006f4e:	05e50513          	add	a0,a0,94 # 8001cfa8 <__func__.1+0x300>
    80006f52:	494140ef          	jal	8001b3e6 <printf>
    80006f56:	00144783          	lbu	a5,1(s0)
    80006f5a:	00016597          	auipc	a1,0x16
    80006f5e:	01658593          	add	a1,a1,22 # 8001cf70 <__func__.1+0x2c8>
    80006f62:	c789                	beqz	a5,80006f6c <wfi_exception_tests_14+0x8c>
    80006f64:	00016597          	auipc	a1,0x16
    80006f68:	01c58593          	add	a1,a1,28 # 8001cf80 <__func__.1+0x2d8>
    80006f6c:	00016517          	auipc	a0,0x16
    80006f70:	05450513          	add	a0,a0,84 # 8001cfc0 <__func__.1+0x318>
    80006f74:	472140ef          	jal	8001b3e6 <printf>
    80006f78:	00144783          	lbu	a5,1(s0)
    80006f7c:	e3b1                	bnez	a5,80006fc0 <wfi_exception_tests_14+0xe0>
    80006f7e:	4529                	li	a0,10
    80006f80:	338130ef          	jal	8001a2b8 <putchar>
    80006f84:	00144783          	lbu	a5,1(s0)
    80006f88:	e795                	bnez	a5,80006fb4 <wfi_exception_tests_14+0xd4>
    80006f8a:	4405                	li	s0,1
        excpt.triggered == false
    ); 
    
    TEST_END();
    80006f8c:	00016597          	auipc	a1,0x16
    80006f90:	fe458593          	add	a1,a1,-28 # 8001cf70 <__func__.1+0x2c8>
    80006f94:	00016517          	auipc	a0,0x16
    80006f98:	09450513          	add	a0,a0,148 # 8001d028 <__func__.1+0x380>
    80006f9c:	44a140ef          	jal	8001b3e6 <printf>
    80006fa0:	4511                	li	a0,4
    80006fa2:	b3df90ef          	jal	80000ade <goto_priv>
    80006fa6:	b80fa0ef          	jal	80001326 <reset_state>
}
    80006faa:	60a2                	ld	ra,8(sp)
    80006fac:	8522                	mv	a0,s0
    80006fae:	6402                	ld	s0,0(sp)
    80006fb0:	0141                	add	sp,sp,16
    80006fb2:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006fb4:	4401                	li	s0,0
    TEST_END();
    80006fb6:	00016597          	auipc	a1,0x16
    80006fba:	fca58593          	add	a1,a1,-54 # 8001cf80 <__func__.1+0x2d8>
    80006fbe:	bfd9                	j	80006f94 <wfi_exception_tests_14+0xb4>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006fc0:	00016517          	auipc	a0,0x16
    80006fc4:	00850513          	add	a0,a0,8 # 8001cfc8 <__func__.1+0x320>
    80006fc8:	41e140ef          	jal	8001b3e6 <printf>
    80006fcc:	02900513          	li	a0,41
    80006fd0:	2e8130ef          	jal	8001a2b8 <putchar>
    80006fd4:	b76d                	j	80006f7e <wfi_exception_tests_14+0x9e>

0000000080006fd6 <wfi_exception_tests_15>:



bool wfi_exception_tests_15() {
    80006fd6:	1101                	add	sp,sp,-32

    TEST_START();
    80006fd8:	00015597          	auipc	a1,0x15
    80006fdc:	de058593          	add	a1,a1,-544 # 8001bdb8 <__func__.7>
    80006fe0:	00016517          	auipc	a0,0x16
    80006fe4:	fb050513          	add	a0,a0,-80 # 8001cf90 <__func__.1+0x2e8>
bool wfi_exception_tests_15() {
    80006fe8:	ec06                	sd	ra,24(sp)
    80006fea:	e822                	sd	s0,16(sp)
    80006fec:	e426                	sd	s1,8(sp)
    TEST_START();
    80006fee:	3f8140ef          	jal	8001b3e6 <printf>
    80006ff2:	4529                	li	a0,10
    80006ff4:	2c4130ef          	jal	8001a2b8 <putchar>
    goto_priv(PRIV_M);
    80006ff8:	4511                	li	a0,4
    80006ffa:	ae5f90ef          	jal	80000ade <goto_priv>
    CSRS(mstatus, MSTATUS_TW);
    80006ffe:	002007b7          	lui	a5,0x200
    80007002:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    80007006:	450d                	li	a0,3
    80007008:	ad7f90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000700c:	0ff0000f          	fence
    80007010:	4785                	li	a5,1
    80007012:	00036417          	auipc	s0,0x36
    80007016:	ffe40413          	add	s0,s0,-2 # 8003d010 <excpt>
    8000701a:	00f41023          	sh	a5,0(s0)
    8000701e:	00036797          	auipc	a5,0x36
    80007022:	0207b523          	sd	zero,42(a5) # 8003d048 <excpt+0x38>
    80007026:	0ff0000f          	fence
    8000702a:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    8000702e:	08200593          	li	a1,130
    80007032:	00017617          	auipc	a2,0x17
    80007036:	57660613          	add	a2,a2,1398 # 8001e5a8 <__func__.1+0x1900>
    8000703a:	00016517          	auipc	a0,0x16
    8000703e:	f6e50513          	add	a0,a0,-146 # 8001cfa8 <__func__.1+0x300>
    80007042:	3a4140ef          	jal	8001b3e6 <printf>
    80007046:	00144783          	lbu	a5,1(s0)
    8000704a:	00016597          	auipc	a1,0x16
    8000704e:	f3658593          	add	a1,a1,-202 # 8001cf80 <__func__.1+0x2d8>
    80007052:	c789                	beqz	a5,8000705c <wfi_exception_tests_15+0x86>
    80007054:	6418                	ld	a4,8(s0)
    80007056:	4789                	li	a5,2
    80007058:	06f70e63          	beq	a4,a5,800070d4 <wfi_exception_tests_15+0xfe>
    8000705c:	00016517          	auipc	a0,0x16
    80007060:	f6450513          	add	a0,a0,-156 # 8001cfc0 <__func__.1+0x318>
    80007064:	382140ef          	jal	8001b3e6 <printf>
    80007068:	00144783          	lbu	a5,1(s0)
    8000706c:	c789                	beqz	a5,80007076 <wfi_exception_tests_15+0xa0>
    8000706e:	6418                	ld	a4,8(s0)
    80007070:	4789                	li	a5,2
    80007072:	00f70c63          	beq	a4,a5,8000708a <wfi_exception_tests_15+0xb4>
    80007076:	00016517          	auipc	a0,0x16
    8000707a:	f5250513          	add	a0,a0,-174 # 8001cfc8 <__func__.1+0x320>
    8000707e:	368140ef          	jal	8001b3e6 <printf>
    80007082:	02900513          	li	a0,41
    80007086:	232130ef          	jal	8001a2b8 <putchar>
    8000708a:	4529                	li	a0,10
    8000708c:	22c130ef          	jal	8001a2b8 <putchar>
    80007090:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80007094:	00016597          	auipc	a1,0x16
    80007098:	eec58593          	add	a1,a1,-276 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    8000709c:	c491                	beqz	s1,800070a8 <wfi_exception_tests_15+0xd2>
    8000709e:	6418                	ld	a4,8(s0)
    800070a0:	4789                	li	a5,2
    800070a2:	02f70463          	beq	a4,a5,800070ca <wfi_exception_tests_15+0xf4>
    800070a6:	4481                	li	s1,0
    TEST_END();
    800070a8:	00016517          	auipc	a0,0x16
    800070ac:	f8050513          	add	a0,a0,-128 # 8001d028 <__func__.1+0x380>
    800070b0:	336140ef          	jal	8001b3e6 <printf>
    800070b4:	4511                	li	a0,4
    800070b6:	a29f90ef          	jal	80000ade <goto_priv>
    800070ba:	a6cfa0ef          	jal	80001326 <reset_state>
}
    800070be:	60e2                	ld	ra,24(sp)
    800070c0:	6442                	ld	s0,16(sp)
    800070c2:	8526                	mv	a0,s1
    800070c4:	64a2                	ld	s1,8(sp)
    800070c6:	6105                	add	sp,sp,32
    800070c8:	8082                	ret
    TEST_END();
    800070ca:	00016597          	auipc	a1,0x16
    800070ce:	ea658593          	add	a1,a1,-346 # 8001cf70 <__func__.1+0x2c8>
    800070d2:	bfd9                	j	800070a8 <wfi_exception_tests_15+0xd2>
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    800070d4:	00016597          	auipc	a1,0x16
    800070d8:	e9c58593          	add	a1,a1,-356 # 8001cf70 <__func__.1+0x2c8>
    800070dc:	b741                	j	8000705c <wfi_exception_tests_15+0x86>

00000000800070de <wfi_exception_tests_16>:
     * Delegate the pending interrupt to hs mode so it doesnt immediately 
     * trigger a trap to machine when we jump to vs.
     */


bool wfi_exception_tests_16() {
    800070de:	1101                	add	sp,sp,-32

    TEST_START();
    800070e0:	00015597          	auipc	a1,0x15
    800070e4:	cf058593          	add	a1,a1,-784 # 8001bdd0 <__func__.6>
    800070e8:	00016517          	auipc	a0,0x16
    800070ec:	ea850513          	add	a0,a0,-344 # 8001cf90 <__func__.1+0x2e8>
bool wfi_exception_tests_16() {
    800070f0:	ec06                	sd	ra,24(sp)
    800070f2:	e822                	sd	s0,16(sp)
    800070f4:	e426                	sd	s1,8(sp)
    TEST_START();
    800070f6:	2f0140ef          	jal	8001b3e6 <printf>
    800070fa:	4529                	li	a0,10
    800070fc:	1bc130ef          	jal	8001a2b8 <putchar>
    CSRS(mstatus, MSTATUS_TW);
    80007100:	002007b7          	lui	a5,0x200
    80007104:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_HIDELEG, 0b0100);      
    80007108:	60326073          	csrs	hideleg,4
    CSRS(CSR_VSIE, 0b0010);           
    8000710c:	20416073          	csrs	vsie,2
    
    goto_priv(PRIV_VS);
    80007110:	4509                	li	a0,2
    80007112:	9cdf90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80007116:	0ff0000f          	fence
    8000711a:	4785                	li	a5,1
    8000711c:	00036417          	auipc	s0,0x36
    80007120:	ef440413          	add	s0,s0,-268 # 8003d010 <excpt>
    80007124:	00f41023          	sh	a5,0(s0)
    80007128:	00036797          	auipc	a5,0x36
    8000712c:	f207b023          	sd	zero,-224(a5) # 8003d048 <excpt+0x38>
    80007130:	0ff0000f          	fence
    80007134:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    80007138:	08200593          	li	a1,130
    8000713c:	00017617          	auipc	a2,0x17
    80007140:	4b460613          	add	a2,a2,1204 # 8001e5f0 <__func__.1+0x1948>
    80007144:	00016517          	auipc	a0,0x16
    80007148:	e6450513          	add	a0,a0,-412 # 8001cfa8 <__func__.1+0x300>
    8000714c:	29a140ef          	jal	8001b3e6 <printf>
    80007150:	00144783          	lbu	a5,1(s0)
    80007154:	00016597          	auipc	a1,0x16
    80007158:	e2c58593          	add	a1,a1,-468 # 8001cf80 <__func__.1+0x2d8>
    8000715c:	c789                	beqz	a5,80007166 <wfi_exception_tests_16+0x88>
    8000715e:	6418                	ld	a4,8(s0)
    80007160:	4789                	li	a5,2
    80007162:	08f70b63          	beq	a4,a5,800071f8 <wfi_exception_tests_16+0x11a>
    80007166:	00016517          	auipc	a0,0x16
    8000716a:	e5a50513          	add	a0,a0,-422 # 8001cfc0 <__func__.1+0x318>
    8000716e:	278140ef          	jal	8001b3e6 <printf>
    80007172:	00144783          	lbu	a5,1(s0)
    80007176:	c789                	beqz	a5,80007180 <wfi_exception_tests_16+0xa2>
    80007178:	6418                	ld	a4,8(s0)
    8000717a:	4789                	li	a5,2
    8000717c:	00f70c63          	beq	a4,a5,80007194 <wfi_exception_tests_16+0xb6>
    80007180:	00016517          	auipc	a0,0x16
    80007184:	e4850513          	add	a0,a0,-440 # 8001cfc8 <__func__.1+0x320>
    80007188:	25e140ef          	jal	8001b3e6 <printf>
    8000718c:	02900513          	li	a0,41
    80007190:	128130ef          	jal	8001a2b8 <putchar>
    80007194:	4529                	li	a0,10
    80007196:	122130ef          	jal	8001a2b8 <putchar>
    8000719a:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    goto_priv(PRIV_M);
    8000719e:	4511                	li	a0,4
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    800071a0:	c489                	beqz	s1,800071aa <wfi_exception_tests_16+0xcc>
    800071a2:	6418                	ld	a4,8(s0)
    800071a4:	4789                	li	a5,2
    800071a6:	02f70e63          	beq	a4,a5,800071e2 <wfi_exception_tests_16+0x104>
    goto_priv(PRIV_M);
    800071aa:	935f90ef          	jal	80000ade <goto_priv>
    CSRC(mstatus, MSTATUS_TW);
    800071ae:	002007b7          	lui	a5,0x200
    800071b2:	3007b073          	csrc	mstatus,a5
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    800071b6:	4481                	li	s1,0
    TEST_END();
    800071b8:	00016597          	auipc	a1,0x16
    800071bc:	dc858593          	add	a1,a1,-568 # 8001cf80 <__func__.1+0x2d8>
    800071c0:	00016517          	auipc	a0,0x16
    800071c4:	e6850513          	add	a0,a0,-408 # 8001d028 <__func__.1+0x380>
    800071c8:	21e140ef          	jal	8001b3e6 <printf>
    800071cc:	4511                	li	a0,4
    800071ce:	911f90ef          	jal	80000ade <goto_priv>
    800071d2:	954fa0ef          	jal	80001326 <reset_state>
}
    800071d6:	60e2                	ld	ra,24(sp)
    800071d8:	6442                	ld	s0,16(sp)
    800071da:	8526                	mv	a0,s1
    800071dc:	64a2                	ld	s1,8(sp)
    800071de:	6105                	add	sp,sp,32
    800071e0:	8082                	ret
    goto_priv(PRIV_M);
    800071e2:	8fdf90ef          	jal	80000ade <goto_priv>
    CSRC(mstatus, MSTATUS_TW);
    800071e6:	002007b7          	lui	a5,0x200
    800071ea:	3007b073          	csrc	mstatus,a5
    TEST_END();
    800071ee:	00016597          	auipc	a1,0x16
    800071f2:	d8258593          	add	a1,a1,-638 # 8001cf70 <__func__.1+0x2c8>
    800071f6:	b7e9                	j	800071c0 <wfi_exception_tests_16+0xe2>
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    800071f8:	00016597          	auipc	a1,0x16
    800071fc:	d7858593          	add	a1,a1,-648 # 8001cf70 <__func__.1+0x2c8>
    80007200:	b79d                	j	80007166 <wfi_exception_tests_16+0x88>

0000000080007202 <wfi_exception_tests_17>:

bool wfi_exception_tests_17() {
    80007202:	1141                	add	sp,sp,-16

    TEST_START();
    80007204:	00015597          	auipc	a1,0x15
    80007208:	be458593          	add	a1,a1,-1052 # 8001bde8 <__func__.5>
    8000720c:	00016517          	auipc	a0,0x16
    80007210:	d8450513          	add	a0,a0,-636 # 8001cf90 <__func__.1+0x2e8>
bool wfi_exception_tests_17() {
    80007214:	e406                	sd	ra,8(sp)
    80007216:	e022                	sd	s0,0(sp)
    TEST_START();
    80007218:	1ce140ef          	jal	8001b3e6 <printf>
    8000721c:	4529                	li	a0,10
    8000721e:	09a130ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80007222:	4511                	li	a0,4
    80007224:	8bbf90ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007228:	002007b7          	lui	a5,0x200
    8000722c:	3007b073          	csrc	mstatus,a5
    CSRC(CSR_HSTATUS,HSTATUS_VTW);
    80007230:	6007b073          	csrc	hstatus,a5

    goto_priv(PRIV_VS);
    80007234:	4509                	li	a0,2
    80007236:	8a9f90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000723a:	0ff0000f          	fence
    8000723e:	4785                	li	a5,1
    80007240:	00036417          	auipc	s0,0x36
    80007244:	dd040413          	add	s0,s0,-560 # 8003d010 <excpt>
    80007248:	00f41023          	sh	a5,0(s0)
    8000724c:	00036797          	auipc	a5,0x36
    80007250:	de07be23          	sd	zero,-516(a5) # 8003d048 <excpt+0x38>
    80007254:	0ff0000f          	fence
    80007258:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    8000725c:	08200593          	li	a1,130
    80007260:	00017617          	auipc	a2,0x17
    80007264:	3d860613          	add	a2,a2,984 # 8001e638 <__func__.1+0x1990>
    80007268:	00016517          	auipc	a0,0x16
    8000726c:	d4050513          	add	a0,a0,-704 # 8001cfa8 <__func__.1+0x300>
    80007270:	176140ef          	jal	8001b3e6 <printf>
    80007274:	00144783          	lbu	a5,1(s0)
    80007278:	00016597          	auipc	a1,0x16
    8000727c:	cf858593          	add	a1,a1,-776 # 8001cf70 <__func__.1+0x2c8>
    80007280:	c789                	beqz	a5,8000728a <wfi_exception_tests_17+0x88>
    80007282:	00016597          	auipc	a1,0x16
    80007286:	cfe58593          	add	a1,a1,-770 # 8001cf80 <__func__.1+0x2d8>
    8000728a:	00016517          	auipc	a0,0x16
    8000728e:	d3650513          	add	a0,a0,-714 # 8001cfc0 <__func__.1+0x318>
    80007292:	154140ef          	jal	8001b3e6 <printf>
    80007296:	00144783          	lbu	a5,1(s0)
    8000729a:	e3b1                	bnez	a5,800072de <wfi_exception_tests_17+0xdc>
    8000729c:	4529                	li	a0,10
    8000729e:	01a130ef          	jal	8001a2b8 <putchar>
    800072a2:	00144783          	lbu	a5,1(s0)
    800072a6:	e795                	bnez	a5,800072d2 <wfi_exception_tests_17+0xd0>
    800072a8:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    800072aa:	00016597          	auipc	a1,0x16
    800072ae:	cc658593          	add	a1,a1,-826 # 8001cf70 <__func__.1+0x2c8>
    800072b2:	00016517          	auipc	a0,0x16
    800072b6:	d7650513          	add	a0,a0,-650 # 8001d028 <__func__.1+0x380>
    800072ba:	12c140ef          	jal	8001b3e6 <printf>
    800072be:	4511                	li	a0,4
    800072c0:	81ff90ef          	jal	80000ade <goto_priv>
    800072c4:	862fa0ef          	jal	80001326 <reset_state>
}
    800072c8:	60a2                	ld	ra,8(sp)
    800072ca:	8522                	mv	a0,s0
    800072cc:	6402                	ld	s0,0(sp)
    800072ce:	0141                	add	sp,sp,16
    800072d0:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    800072d2:	4401                	li	s0,0
    TEST_END();
    800072d4:	00016597          	auipc	a1,0x16
    800072d8:	cac58593          	add	a1,a1,-852 # 8001cf80 <__func__.1+0x2d8>
    800072dc:	bfd9                	j	800072b2 <wfi_exception_tests_17+0xb0>
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    800072de:	00016517          	auipc	a0,0x16
    800072e2:	cea50513          	add	a0,a0,-790 # 8001cfc8 <__func__.1+0x320>
    800072e6:	100140ef          	jal	8001b3e6 <printf>
    800072ea:	02900513          	li	a0,41
    800072ee:	7cb120ef          	jal	8001a2b8 <putchar>
    800072f2:	b76d                	j	8000729c <wfi_exception_tests_17+0x9a>

00000000800072f4 <wfi_exception_tests_18>:


bool wfi_exception_tests_18() {
    800072f4:	1101                	add	sp,sp,-32

    TEST_START();
    800072f6:	00015597          	auipc	a1,0x15
    800072fa:	b0a58593          	add	a1,a1,-1270 # 8001be00 <__func__.4>
    800072fe:	00016517          	auipc	a0,0x16
    80007302:	c9250513          	add	a0,a0,-878 # 8001cf90 <__func__.1+0x2e8>
bool wfi_exception_tests_18() {
    80007306:	ec06                	sd	ra,24(sp)
    80007308:	e822                	sd	s0,16(sp)
    8000730a:	e426                	sd	s1,8(sp)
    TEST_START();
    8000730c:	0da140ef          	jal	8001b3e6 <printf>
    80007310:	4529                	li	a0,10
    80007312:	7a7120ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80007316:	4511                	li	a0,4
    80007318:	fc6f90ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);  
    8000731c:	002007b7          	lui	a5,0x200
    80007320:	6007a073          	csrs	hstatus,a5

    goto_priv(PRIV_VS);
    80007324:	4509                	li	a0,2
    80007326:	fb8f90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000732a:	0ff0000f          	fence
    8000732e:	4785                	li	a5,1
    80007330:	00036417          	auipc	s0,0x36
    80007334:	ce040413          	add	s0,s0,-800 # 8003d010 <excpt>
    80007338:	00f41023          	sh	a5,0(s0)
    8000733c:	00036797          	auipc	a5,0x36
    80007340:	d007b623          	sd	zero,-756(a5) # 8003d048 <excpt+0x38>
    80007344:	0ff0000f          	fence
    80007348:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    8000734c:	08200593          	li	a1,130
    80007350:	00017617          	auipc	a2,0x17
    80007354:	33060613          	add	a2,a2,816 # 8001e680 <__func__.1+0x19d8>
    80007358:	00016517          	auipc	a0,0x16
    8000735c:	c5050513          	add	a0,a0,-944 # 8001cfa8 <__func__.1+0x300>
    80007360:	086140ef          	jal	8001b3e6 <printf>
    80007364:	00144783          	lbu	a5,1(s0)
    80007368:	00016597          	auipc	a1,0x16
    8000736c:	c1858593          	add	a1,a1,-1000 # 8001cf80 <__func__.1+0x2d8>
    80007370:	c789                	beqz	a5,8000737a <wfi_exception_tests_18+0x86>
    80007372:	6418                	ld	a4,8(s0)
    80007374:	47d9                	li	a5,22
    80007376:	06f70e63          	beq	a4,a5,800073f2 <wfi_exception_tests_18+0xfe>
    8000737a:	00016517          	auipc	a0,0x16
    8000737e:	c4650513          	add	a0,a0,-954 # 8001cfc0 <__func__.1+0x318>
    80007382:	064140ef          	jal	8001b3e6 <printf>
    80007386:	00144783          	lbu	a5,1(s0)
    8000738a:	c789                	beqz	a5,80007394 <wfi_exception_tests_18+0xa0>
    8000738c:	6418                	ld	a4,8(s0)
    8000738e:	47d9                	li	a5,22
    80007390:	00f70c63          	beq	a4,a5,800073a8 <wfi_exception_tests_18+0xb4>
    80007394:	00016517          	auipc	a0,0x16
    80007398:	c3450513          	add	a0,a0,-972 # 8001cfc8 <__func__.1+0x320>
    8000739c:	04a140ef          	jal	8001b3e6 <printf>
    800073a0:	02900513          	li	a0,41
    800073a4:	715120ef          	jal	8001a2b8 <putchar>
    800073a8:	4529                	li	a0,10
    800073aa:	70f120ef          	jal	8001a2b8 <putchar>
    800073ae:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    800073b2:	00016597          	auipc	a1,0x16
    800073b6:	bce58593          	add	a1,a1,-1074 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    800073ba:	c491                	beqz	s1,800073c6 <wfi_exception_tests_18+0xd2>
    800073bc:	6418                	ld	a4,8(s0)
    800073be:	47d9                	li	a5,22
    800073c0:	02f70463          	beq	a4,a5,800073e8 <wfi_exception_tests_18+0xf4>
    800073c4:	4481                	li	s1,0
    TEST_END();
    800073c6:	00016517          	auipc	a0,0x16
    800073ca:	c6250513          	add	a0,a0,-926 # 8001d028 <__func__.1+0x380>
    800073ce:	018140ef          	jal	8001b3e6 <printf>
    800073d2:	4511                	li	a0,4
    800073d4:	f0af90ef          	jal	80000ade <goto_priv>
    800073d8:	f4ff90ef          	jal	80001326 <reset_state>
}
    800073dc:	60e2                	ld	ra,24(sp)
    800073de:	6442                	ld	s0,16(sp)
    800073e0:	8526                	mv	a0,s1
    800073e2:	64a2                	ld	s1,8(sp)
    800073e4:	6105                	add	sp,sp,32
    800073e6:	8082                	ret
    TEST_END();
    800073e8:	00016597          	auipc	a1,0x16
    800073ec:	b8858593          	add	a1,a1,-1144 # 8001cf70 <__func__.1+0x2c8>
    800073f0:	bfd9                	j	800073c6 <wfi_exception_tests_18+0xd2>
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    800073f2:	00016597          	auipc	a1,0x16
    800073f6:	b7e58593          	add	a1,a1,-1154 # 8001cf70 <__func__.1+0x2c8>
    800073fa:	b741                	j	8000737a <wfi_exception_tests_18+0x86>

00000000800073fc <wfi_exception_tests_19>:

bool wfi_exception_tests_19() {
    800073fc:	1101                	add	sp,sp,-32

    TEST_START();
    800073fe:	00015597          	auipc	a1,0x15
    80007402:	a1a58593          	add	a1,a1,-1510 # 8001be18 <__func__.3>
    80007406:	00016517          	auipc	a0,0x16
    8000740a:	b8a50513          	add	a0,a0,-1142 # 8001cf90 <__func__.1+0x2e8>
bool wfi_exception_tests_19() {
    8000740e:	ec06                	sd	ra,24(sp)
    80007410:	e822                	sd	s0,16(sp)
    80007412:	e426                	sd	s1,8(sp)
    TEST_START();
    80007414:	7d3130ef          	jal	8001b3e6 <printf>
    80007418:	4529                	li	a0,10
    8000741a:	69f120ef          	jal	8001a2b8 <putchar>
    //V=1&mstatus.TW=0 , hstatus.vtw=1时，在VS模式下执行WFI指令，并未在一个约定时间内产生中断
    goto_priv(PRIV_M);
    8000741e:	4511                	li	a0,4
    80007420:	ebef90ef          	jal	80000ade <goto_priv>

    CSRW(CSR_SIE, 0x0);
    80007424:	10405073          	csrw	sie,0
    CSRS(CSR_HSTATUS,HSTATUS_VTW);
    80007428:	002007b7          	lui	a5,0x200
    8000742c:	6007a073          	csrs	hstatus,a5
    CSRC(mstatus, MSTATUS_TW);
    80007430:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_VS);
    80007434:	4509                	li	a0,2
    80007436:	ea8f90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000743a:	0ff0000f          	fence
    8000743e:	4785                	li	a5,1
    80007440:	00036417          	auipc	s0,0x36
    80007444:	bd040413          	add	s0,s0,-1072 # 8003d010 <excpt>
    80007448:	00f41023          	sh	a5,0(s0)
    8000744c:	00036797          	auipc	a5,0x36
    80007450:	be07be23          	sd	zero,-1028(a5) # 8003d048 <excpt+0x38>
    80007454:	0ff0000f          	fence
    80007458:	10500073          	wfi
    wfi();
        printf("%d\n",excpt.cause);
    8000745c:	640c                	ld	a1,8(s0)
    8000745e:	00016517          	auipc	a0,0x16
    80007462:	59a50513          	add	a0,a0,1434 # 8001d9f8 <__func__.1+0xd50>
    80007466:	781130ef          	jal	8001b3e6 <printf>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    8000746a:	08200593          	li	a1,130
    8000746e:	00017617          	auipc	a2,0x17
    80007472:	25a60613          	add	a2,a2,602 # 8001e6c8 <__func__.1+0x1a20>
    80007476:	00016517          	auipc	a0,0x16
    8000747a:	b3250513          	add	a0,a0,-1230 # 8001cfa8 <__func__.1+0x300>
    8000747e:	769130ef          	jal	8001b3e6 <printf>
    80007482:	00144783          	lbu	a5,1(s0)
    80007486:	00016597          	auipc	a1,0x16
    8000748a:	afa58593          	add	a1,a1,-1286 # 8001cf80 <__func__.1+0x2d8>
    8000748e:	c789                	beqz	a5,80007498 <wfi_exception_tests_19+0x9c>
    80007490:	6418                	ld	a4,8(s0)
    80007492:	47d9                	li	a5,22
    80007494:	06f70e63          	beq	a4,a5,80007510 <wfi_exception_tests_19+0x114>
    80007498:	00016517          	auipc	a0,0x16
    8000749c:	b2850513          	add	a0,a0,-1240 # 8001cfc0 <__func__.1+0x318>
    800074a0:	747130ef          	jal	8001b3e6 <printf>
    800074a4:	00144783          	lbu	a5,1(s0)
    800074a8:	c789                	beqz	a5,800074b2 <wfi_exception_tests_19+0xb6>
    800074aa:	6418                	ld	a4,8(s0)
    800074ac:	47d9                	li	a5,22
    800074ae:	00f70c63          	beq	a4,a5,800074c6 <wfi_exception_tests_19+0xca>
    800074b2:	00016517          	auipc	a0,0x16
    800074b6:	b1650513          	add	a0,a0,-1258 # 8001cfc8 <__func__.1+0x320>
    800074ba:	72d130ef          	jal	8001b3e6 <printf>
    800074be:	02900513          	li	a0,41
    800074c2:	5f7120ef          	jal	8001a2b8 <putchar>
    800074c6:	4529                	li	a0,10
    800074c8:	5f1120ef          	jal	8001a2b8 <putchar>
    800074cc:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&  
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    800074d0:	00016597          	auipc	a1,0x16
    800074d4:	ab058593          	add	a1,a1,-1360 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    800074d8:	c491                	beqz	s1,800074e4 <wfi_exception_tests_19+0xe8>
    800074da:	6418                	ld	a4,8(s0)
    800074dc:	47d9                	li	a5,22
    800074de:	02f70463          	beq	a4,a5,80007506 <wfi_exception_tests_19+0x10a>
    800074e2:	4481                	li	s1,0
    TEST_END();
    800074e4:	00016517          	auipc	a0,0x16
    800074e8:	b4450513          	add	a0,a0,-1212 # 8001d028 <__func__.1+0x380>
    800074ec:	6fb130ef          	jal	8001b3e6 <printf>
    800074f0:	4511                	li	a0,4
    800074f2:	decf90ef          	jal	80000ade <goto_priv>
    800074f6:	e31f90ef          	jal	80001326 <reset_state>
}
    800074fa:	60e2                	ld	ra,24(sp)
    800074fc:	6442                	ld	s0,16(sp)
    800074fe:	8526                	mv	a0,s1
    80007500:	64a2                	ld	s1,8(sp)
    80007502:	6105                	add	sp,sp,32
    80007504:	8082                	ret
    TEST_END();
    80007506:	00016597          	auipc	a1,0x16
    8000750a:	a6a58593          	add	a1,a1,-1430 # 8001cf70 <__func__.1+0x2c8>
    8000750e:	bfd9                	j	800074e4 <wfi_exception_tests_19+0xe8>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    80007510:	00016597          	auipc	a1,0x16
    80007514:	a6058593          	add	a1,a1,-1440 # 8001cf70 <__func__.1+0x2c8>
    80007518:	b741                	j	80007498 <wfi_exception_tests_19+0x9c>

000000008000751a <wfi_exception_tests_20>:





bool wfi_exception_tests_20() {
    8000751a:	1101                	add	sp,sp,-32

    TEST_START();
    8000751c:	00015597          	auipc	a1,0x15
    80007520:	91458593          	add	a1,a1,-1772 # 8001be30 <__func__.2>
    80007524:	00016517          	auipc	a0,0x16
    80007528:	a6c50513          	add	a0,a0,-1428 # 8001cf90 <__func__.1+0x2e8>
bool wfi_exception_tests_20() {
    8000752c:	ec06                	sd	ra,24(sp)
    8000752e:	e822                	sd	s0,16(sp)
    80007530:	e426                	sd	s1,8(sp)
    TEST_START();
    80007532:	6b5130ef          	jal	8001b3e6 <printf>
    80007536:	4529                	li	a0,10
    80007538:	581120ef          	jal	8001a2b8 <putchar>
    
    TEST_SETUP_EXCEPT();
    8000753c:	0ff0000f          	fence
    80007540:	00036417          	auipc	s0,0x36
    80007544:	ad040413          	add	s0,s0,-1328 # 8003d010 <excpt>
    80007548:	4485                	li	s1,1
    8000754a:	00941023          	sh	s1,0(s0)
    8000754e:	00036797          	auipc	a5,0x36
    80007552:	ae07bd23          	sd	zero,-1286(a5) # 8003d048 <excpt+0x38>
    80007556:	0ff0000f          	fence
    //mstatus.TW=0时，在HS模式下，中断未被禁用，且代理打开，执行wfi指令
    goto_priv(PRIV_M);
    8000755a:	4511                	li	a0,4
    8000755c:	d82f90ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007560:	002007b7          	lui	a5,0x200
    80007564:	3007b073          	csrc	mstatus,a5

    CSRS(CSR_HIE, 0b0100);
    80007568:	60426073          	csrs	hie,4
    CSRS(CSR_HIP, 0b0100);
    8000756c:	64426073          	csrs	hip,4
    CSRS(mideleg, 0b0100);
    80007570:	30326073          	csrs	mideleg,4

    goto_priv(PRIV_HS);
    80007574:	450d                	li	a0,3
    80007576:	d68f90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000757a:	0ff0000f          	fence
    8000757e:	00036797          	auipc	a5,0x36
    80007582:	ac07b523          	sd	zero,-1334(a5) # 8003d048 <excpt+0x38>
    80007586:	00941023          	sh	s1,0(s0)
    8000758a:	0ff0000f          	fence
    8000758e:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007592:	08200593          	li	a1,130
    80007596:	00017617          	auipc	a2,0x17
    8000759a:	17a60613          	add	a2,a2,378 # 8001e710 <__func__.1+0x1a68>
    8000759e:	00016517          	auipc	a0,0x16
    800075a2:	a0a50513          	add	a0,a0,-1526 # 8001cfa8 <__func__.1+0x300>
    800075a6:	641130ef          	jal	8001b3e6 <printf>
    800075aa:	00144783          	lbu	a5,1(s0)
    800075ae:	00016597          	auipc	a1,0x16
    800075b2:	9c258593          	add	a1,a1,-1598 # 8001cf70 <__func__.1+0x2c8>
    800075b6:	c789                	beqz	a5,800075c0 <wfi_exception_tests_20+0xa6>
    800075b8:	00016597          	auipc	a1,0x16
    800075bc:	9c858593          	add	a1,a1,-1592 # 8001cf80 <__func__.1+0x2d8>
    800075c0:	00016517          	auipc	a0,0x16
    800075c4:	a0050513          	add	a0,a0,-1536 # 8001cfc0 <__func__.1+0x318>
    800075c8:	61f130ef          	jal	8001b3e6 <printf>
    800075cc:	00144783          	lbu	a5,1(s0)
    800075d0:	e3b9                	bnez	a5,80007616 <wfi_exception_tests_20+0xfc>
    800075d2:	4529                	li	a0,10
    800075d4:	4e5120ef          	jal	8001a2b8 <putchar>
    800075d8:	00144783          	lbu	a5,1(s0)
    800075dc:	e79d                	bnez	a5,8000760a <wfi_exception_tests_20+0xf0>
    800075de:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    800075e0:	00016597          	auipc	a1,0x16
    800075e4:	99058593          	add	a1,a1,-1648 # 8001cf70 <__func__.1+0x2c8>
    800075e8:	00016517          	auipc	a0,0x16
    800075ec:	a4050513          	add	a0,a0,-1472 # 8001d028 <__func__.1+0x380>
    800075f0:	5f7130ef          	jal	8001b3e6 <printf>
    800075f4:	4511                	li	a0,4
    800075f6:	ce8f90ef          	jal	80000ade <goto_priv>
    800075fa:	d2df90ef          	jal	80001326 <reset_state>
}
    800075fe:	60e2                	ld	ra,24(sp)
    80007600:	8522                	mv	a0,s0
    80007602:	6442                	ld	s0,16(sp)
    80007604:	64a2                	ld	s1,8(sp)
    80007606:	6105                	add	sp,sp,32
    80007608:	8082                	ret
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    8000760a:	4401                	li	s0,0
    TEST_END();
    8000760c:	00016597          	auipc	a1,0x16
    80007610:	97458593          	add	a1,a1,-1676 # 8001cf80 <__func__.1+0x2d8>
    80007614:	bfd1                	j	800075e8 <wfi_exception_tests_20+0xce>
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007616:	00016517          	auipc	a0,0x16
    8000761a:	9b250513          	add	a0,a0,-1614 # 8001cfc8 <__func__.1+0x320>
    8000761e:	5c9130ef          	jal	8001b3e6 <printf>
    80007622:	02900513          	li	a0,41
    80007626:	493120ef          	jal	8001a2b8 <putchar>
    8000762a:	b765                	j	800075d2 <wfi_exception_tests_20+0xb8>

000000008000762c <wfi_exception_tests_21>:



bool wfi_exception_tests_21() {
    8000762c:	1101                	add	sp,sp,-32

    TEST_START();
    8000762e:	00015597          	auipc	a1,0x15
    80007632:	81a58593          	add	a1,a1,-2022 # 8001be48 <__func__.1>
    80007636:	00016517          	auipc	a0,0x16
    8000763a:	95a50513          	add	a0,a0,-1702 # 8001cf90 <__func__.1+0x2e8>
bool wfi_exception_tests_21() {
    8000763e:	ec06                	sd	ra,24(sp)
    80007640:	e822                	sd	s0,16(sp)
    80007642:	e426                	sd	s1,8(sp)
    TEST_START();
    80007644:	5a3130ef          	jal	8001b3e6 <printf>
    80007648:	4529                	li	a0,10
    8000764a:	46f120ef          	jal	8001a2b8 <putchar>

    //V=0&mstatus.TW=1时，且实现了S/HS模式，在U模式下执行WFI指令，并在一个约定时间内产生中断,wfi指令被唤醒，且中断会发生在下一条指令上，xepc=pc+4
    TEST_SETUP_EXCEPT();
    8000764e:	0ff0000f          	fence
    80007652:	4785                	li	a5,1
    80007654:	00036417          	auipc	s0,0x36
    80007658:	9bc40413          	add	s0,s0,-1604 # 8003d010 <excpt>
    8000765c:	00f41023          	sh	a5,0(s0)
    80007660:	00036797          	auipc	a5,0x36
    80007664:	9e07b423          	sd	zero,-1560(a5) # 8003d048 <excpt+0x38>
    80007668:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000766c:	4511                	li	a0,4
    8000766e:	c70f90ef          	jal	80000ade <goto_priv>
    CSRW(CSR_HIE, 0x2);
    80007672:	60415073          	csrw	hie,2
    
    CSRS(mstatus, MSTATUS_TW);
    80007676:	002007b7          	lui	a5,0x200
    8000767a:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HU);
    8000767e:	4505                	li	a0,1
    80007680:	c5ef90ef          	jal	80000ade <goto_priv>
    80007684:	10500073          	wfi
    wfi();
    // CSRW(CSR_HIP,0x2);

    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007688:	08200593          	li	a1,130
    8000768c:	00017617          	auipc	a2,0x17
    80007690:	0ec60613          	add	a2,a2,236 # 8001e778 <__func__.1+0x1ad0>
    80007694:	00016517          	auipc	a0,0x16
    80007698:	91450513          	add	a0,a0,-1772 # 8001cfa8 <__func__.1+0x300>
    8000769c:	54b130ef          	jal	8001b3e6 <printf>
    800076a0:	00144783          	lbu	a5,1(s0)
    800076a4:	00016597          	auipc	a1,0x16
    800076a8:	8dc58593          	add	a1,a1,-1828 # 8001cf80 <__func__.1+0x2d8>
    800076ac:	c789                	beqz	a5,800076b6 <wfi_exception_tests_21+0x8a>
    800076ae:	6418                	ld	a4,8(s0)
    800076b0:	4789                	li	a5,2
    800076b2:	06f70e63          	beq	a4,a5,8000772e <wfi_exception_tests_21+0x102>
    800076b6:	00016517          	auipc	a0,0x16
    800076ba:	90a50513          	add	a0,a0,-1782 # 8001cfc0 <__func__.1+0x318>
    800076be:	529130ef          	jal	8001b3e6 <printf>
    800076c2:	00144783          	lbu	a5,1(s0)
    800076c6:	c789                	beqz	a5,800076d0 <wfi_exception_tests_21+0xa4>
    800076c8:	6418                	ld	a4,8(s0)
    800076ca:	4789                	li	a5,2
    800076cc:	00f70c63          	beq	a4,a5,800076e4 <wfi_exception_tests_21+0xb8>
    800076d0:	00016517          	auipc	a0,0x16
    800076d4:	8f850513          	add	a0,a0,-1800 # 8001cfc8 <__func__.1+0x320>
    800076d8:	50f130ef          	jal	8001b3e6 <printf>
    800076dc:	02900513          	li	a0,41
    800076e0:	3d9120ef          	jal	8001a2b8 <putchar>
    800076e4:	4529                	li	a0,10
    800076e6:	3d3120ef          	jal	8001a2b8 <putchar>
    800076ea:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    

    TEST_END();
    800076ee:	00016597          	auipc	a1,0x16
    800076f2:	89258593          	add	a1,a1,-1902 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    800076f6:	c491                	beqz	s1,80007702 <wfi_exception_tests_21+0xd6>
    800076f8:	6418                	ld	a4,8(s0)
    800076fa:	4789                	li	a5,2
    800076fc:	02f70463          	beq	a4,a5,80007724 <wfi_exception_tests_21+0xf8>
    80007700:	4481                	li	s1,0
    TEST_END();
    80007702:	00016517          	auipc	a0,0x16
    80007706:	92650513          	add	a0,a0,-1754 # 8001d028 <__func__.1+0x380>
    8000770a:	4dd130ef          	jal	8001b3e6 <printf>
    8000770e:	4511                	li	a0,4
    80007710:	bcef90ef          	jal	80000ade <goto_priv>
    80007714:	c13f90ef          	jal	80001326 <reset_state>
}
    80007718:	60e2                	ld	ra,24(sp)
    8000771a:	6442                	ld	s0,16(sp)
    8000771c:	8526                	mv	a0,s1
    8000771e:	64a2                	ld	s1,8(sp)
    80007720:	6105                	add	sp,sp,32
    80007722:	8082                	ret
    TEST_END();
    80007724:	00016597          	auipc	a1,0x16
    80007728:	84c58593          	add	a1,a1,-1972 # 8001cf70 <__func__.1+0x2c8>
    8000772c:	bfd9                	j	80007702 <wfi_exception_tests_21+0xd6>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    8000772e:	00016597          	auipc	a1,0x16
    80007732:	84258593          	add	a1,a1,-1982 # 8001cf70 <__func__.1+0x2c8>
    80007736:	b741                	j	800076b6 <wfi_exception_tests_21+0x8a>

0000000080007738 <wfi_exception_tests_22>:


bool wfi_exception_tests_22() {
    80007738:	1101                	add	sp,sp,-32

    TEST_START();
    8000773a:	00014597          	auipc	a1,0x14
    8000773e:	72658593          	add	a1,a1,1830 # 8001be60 <__func__.0>
    80007742:	00016517          	auipc	a0,0x16
    80007746:	84e50513          	add	a0,a0,-1970 # 8001cf90 <__func__.1+0x2e8>
bool wfi_exception_tests_22() {
    8000774a:	ec06                	sd	ra,24(sp)
    8000774c:	e822                	sd	s0,16(sp)
    8000774e:	e426                	sd	s1,8(sp)
    TEST_START();
    80007750:	497130ef          	jal	8001b3e6 <printf>
    80007754:	4529                	li	a0,10
    80007756:	363120ef          	jal	8001a2b8 <putchar>

    //V=0&mstatus.TW=1时，如果实现了S/HS模式，在U模式下执行WFI指令，没有在一个约定时间内产生中断
    TEST_SETUP_EXCEPT();
    8000775a:	0ff0000f          	fence
    8000775e:	4785                	li	a5,1
    80007760:	00036417          	auipc	s0,0x36
    80007764:	8b040413          	add	s0,s0,-1872 # 8003d010 <excpt>
    80007768:	00f41023          	sh	a5,0(s0)
    8000776c:	00036797          	auipc	a5,0x36
    80007770:	8c07be23          	sd	zero,-1828(a5) # 8003d048 <excpt+0x38>
    80007774:	0ff0000f          	fence
    goto_priv(PRIV_M);
    80007778:	4511                	li	a0,4
    8000777a:	b64f90ef          	jal	80000ade <goto_priv>
    CSRW(CSR_HIE, 0);
    8000777e:	60405073          	csrw	hie,0
    CSRW(CSR_HIP,0);
    80007782:	64405073          	csrw	hip,0
    CSRS(mstatus, MSTATUS_TW);
    80007786:	002007b7          	lui	a5,0x200
    8000778a:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HU);
    8000778e:	4505                	li	a0,1
    80007790:	b4ef90ef          	jal	80000ade <goto_priv>
    80007794:	10500073          	wfi
    wfi();
    
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007798:	08200593          	li	a1,130
    8000779c:	00017617          	auipc	a2,0x17
    800077a0:	fdc60613          	add	a2,a2,-36 # 8001e778 <__func__.1+0x1ad0>
    800077a4:	00016517          	auipc	a0,0x16
    800077a8:	80450513          	add	a0,a0,-2044 # 8001cfa8 <__func__.1+0x300>
    800077ac:	43b130ef          	jal	8001b3e6 <printf>
    800077b0:	00144783          	lbu	a5,1(s0)
    800077b4:	00015597          	auipc	a1,0x15
    800077b8:	7cc58593          	add	a1,a1,1996 # 8001cf80 <__func__.1+0x2d8>
    800077bc:	c789                	beqz	a5,800077c6 <wfi_exception_tests_22+0x8e>
    800077be:	6418                	ld	a4,8(s0)
    800077c0:	4789                	li	a5,2
    800077c2:	06f70e63          	beq	a4,a5,8000783e <wfi_exception_tests_22+0x106>
    800077c6:	00015517          	auipc	a0,0x15
    800077ca:	7fa50513          	add	a0,a0,2042 # 8001cfc0 <__func__.1+0x318>
    800077ce:	419130ef          	jal	8001b3e6 <printf>
    800077d2:	00144783          	lbu	a5,1(s0)
    800077d6:	c789                	beqz	a5,800077e0 <wfi_exception_tests_22+0xa8>
    800077d8:	6418                	ld	a4,8(s0)
    800077da:	4789                	li	a5,2
    800077dc:	00f70c63          	beq	a4,a5,800077f4 <wfi_exception_tests_22+0xbc>
    800077e0:	00015517          	auipc	a0,0x15
    800077e4:	7e850513          	add	a0,a0,2024 # 8001cfc8 <__func__.1+0x320>
    800077e8:	3ff130ef          	jal	8001b3e6 <printf>
    800077ec:	02900513          	li	a0,41
    800077f0:	2c9120ef          	jal	8001a2b8 <putchar>
    800077f4:	4529                	li	a0,10
    800077f6:	2c3120ef          	jal	8001a2b8 <putchar>
    800077fa:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    

    TEST_END();
    800077fe:	00015597          	auipc	a1,0x15
    80007802:	78258593          	add	a1,a1,1922 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007806:	c491                	beqz	s1,80007812 <wfi_exception_tests_22+0xda>
    80007808:	6418                	ld	a4,8(s0)
    8000780a:	4789                	li	a5,2
    8000780c:	02f70463          	beq	a4,a5,80007834 <wfi_exception_tests_22+0xfc>
    80007810:	4481                	li	s1,0
    TEST_END();
    80007812:	00016517          	auipc	a0,0x16
    80007816:	81650513          	add	a0,a0,-2026 # 8001d028 <__func__.1+0x380>
    8000781a:	3cd130ef          	jal	8001b3e6 <printf>
    8000781e:	4511                	li	a0,4
    80007820:	abef90ef          	jal	80000ade <goto_priv>
    80007824:	b03f90ef          	jal	80001326 <reset_state>
}
    80007828:	60e2                	ld	ra,24(sp)
    8000782a:	6442                	ld	s0,16(sp)
    8000782c:	8526                	mv	a0,s1
    8000782e:	64a2                	ld	s1,8(sp)
    80007830:	6105                	add	sp,sp,32
    80007832:	8082                	ret
    TEST_END();
    80007834:	00015597          	auipc	a1,0x15
    80007838:	73c58593          	add	a1,a1,1852 # 8001cf70 <__func__.1+0x2c8>
    8000783c:	bfd9                	j	80007812 <wfi_exception_tests_22+0xda>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    8000783e:	00015597          	auipc	a1,0x15
    80007842:	73258593          	add	a1,a1,1842 # 8001cf70 <__func__.1+0x2c8>
    80007846:	b741                	j	800077c6 <wfi_exception_tests_22+0x8e>

0000000080007848 <tinst_tests>:
#define TINST_CHECK_COMPRESSED(CHECK) (excpt.tinst == 0 ||\
    excpt.tinst == CHECK(expand_compressed_instruction(read_instruction(excpt.epc)) & ~0b10ULL))



bool tinst_tests(){
    80007848:	7179                	add	sp,sp,-48
    
    TEST_START();
    8000784a:	00014597          	auipc	a1,0x14
    8000784e:	62e58593          	add	a1,a1,1582 # 8001be78 <__func__.2>
    80007852:	00015517          	auipc	a0,0x15
    80007856:	73e50513          	add	a0,a0,1854 # 8001cf90 <__func__.1+0x2e8>
bool tinst_tests(){
    8000785a:	f406                	sd	ra,40(sp)
    8000785c:	f022                	sd	s0,32(sp)
    8000785e:	ec26                	sd	s1,24(sp)
    80007860:	e84a                	sd	s2,16(sp)
    80007862:	e44e                	sd	s3,8(sp)
    TEST_START();
    80007864:	383130ef          	jal	8001b3e6 <printf>
    80007868:	4529                	li	a0,10
    8000786a:	24f120ef          	jal	8001a2b8 <putchar>

    hspt_init();        
    8000786e:	d73f80ef          	jal	800005e0 <hspt_init>
    goto_priv(PRIV_HS);     
    80007872:	450d                	li	a0,3
    80007874:	a6af90ef          	jal	80000ade <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    80007878:	0ff0000f          	fence
    8000787c:	4785                	li	a5,1
    8000787e:	00035417          	auipc	s0,0x35
    80007882:	79240413          	add	s0,s0,1938 # 8003d010 <excpt>
    80007886:	00f41023          	sh	a5,0(s0)
    8000788a:	00035797          	auipc	a5,0x35
    8000788e:	7a07bf23          	sd	zero,1982(a5) # 8003d048 <excpt+0x38>
    80007892:	0ff0000f          	fence
            ".option pop\n\t" \
            : "=r"(value) : "r"(addr) : "memory"); \
        return value; \
    }

LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80007896:	400197b7          	lui	a5,0x40019
    8000789a:	078a                	sll	a5,a5,0x2
    8000789c:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    // uint8_t dest8[4];
    // vle8_v(dest8, (uintptr_t)src8);


    value = lb(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lb which results in a lpf",         
    800078a0:	00017617          	auipc	a2,0x17
    800078a4:	f2060613          	add	a2,a2,-224 # 8001e7c0 <__func__.1+0x1b18>
    800078a8:	08200593          	li	a1,130
    800078ac:	00015517          	auipc	a0,0x15
    800078b0:	6fc50513          	add	a0,a0,1788 # 8001cfa8 <__func__.1+0x300>
    800078b4:	333130ef          	jal	8001b3e6 <printf>
    800078b8:	00144783          	lbu	a5,1(s0)
    800078bc:	e399                	bnez	a5,800078c2 <tinst_tests+0x7a>
    800078be:	6720106f          	j	80008f30 <tinst_tests+0x16e8>
    800078c2:	6418                	ld	a4,8(s0)
    800078c4:	47b5                	li	a5,13
    800078c6:	00015597          	auipc	a1,0x15
    800078ca:	6ba58593          	add	a1,a1,1722 # 8001cf80 <__func__.1+0x2d8>
    800078ce:	00f71463          	bne	a4,a5,800078d6 <tinst_tests+0x8e>
    800078d2:	1210106f          	j	800091f2 <tinst_tests+0x19aa>
    800078d6:	00015517          	auipc	a0,0x15
    800078da:	6ea50513          	add	a0,a0,1770 # 8001cfc0 <__func__.1+0x318>
    800078de:	309130ef          	jal	8001b3e6 <printf>
    800078e2:	00144783          	lbu	a5,1(s0)
    800078e6:	c799                	beqz	a5,800078f4 <tinst_tests+0xac>
    800078e8:	6418                	ld	a4,8(s0)
    800078ea:	47b5                	li	a5,13
    800078ec:	00f71463          	bne	a4,a5,800078f4 <tinst_tests+0xac>
    800078f0:	69e0106f          	j	80008f8e <tinst_tests+0x1746>
    800078f4:	00015517          	auipc	a0,0x15
    800078f8:	6d450513          	add	a0,a0,1748 # 8001cfc8 <__func__.1+0x320>
    800078fc:	2eb130ef          	jal	8001b3e6 <printf>
    80007900:	02900513          	li	a0,41
    80007904:	1b5120ef          	jal	8001a2b8 <putchar>
    80007908:	4529                	li	a0,10
    8000790a:	1af120ef          	jal	8001a2b8 <putchar>
    8000790e:	00144783          	lbu	a5,1(s0)
    80007912:	c399                	beqz	a5,80007918 <tinst_tests+0xd0>
    80007914:	6280106f          	j	80008f3c <tinst_tests+0x16f4>
    80007918:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000791a:	0ff0000f          	fence
    8000791e:	4785                	li	a5,1
    80007920:	00f41023          	sh	a5,0(s0)
    80007924:	00035797          	auipc	a5,0x35
    80007928:	7207b223          	sd	zero,1828(a5) # 8003d048 <excpt+0x38>
    8000792c:	0ff0000f          	fence
LOAD_INSTRUCTION(lbu, "lbu", uint8_t);
    80007930:	400197b7          	lui	a5,0x40019
    80007934:	078a                	sll	a5,a5,0x2
    80007936:	0007c783          	lbu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lbu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    8000793a:	00017617          	auipc	a2,0x17
    8000793e:	f0660613          	add	a2,a2,-250 # 8001e840 <__func__.1+0x1b98>
    80007942:	08200593          	li	a1,130
    80007946:	00015517          	auipc	a0,0x15
    8000794a:	66250513          	add	a0,a0,1634 # 8001cfa8 <__func__.1+0x300>
    8000794e:	299130ef          	jal	8001b3e6 <printf>
    80007952:	00144783          	lbu	a5,1(s0)
    80007956:	e399                	bnez	a5,8000795c <tinst_tests+0x114>
    80007958:	6740106f          	j	80008fcc <tinst_tests+0x1784>
    8000795c:	6418                	ld	a4,8(s0)
    8000795e:	47b5                	li	a5,13
    80007960:	00015597          	auipc	a1,0x15
    80007964:	62058593          	add	a1,a1,1568 # 8001cf80 <__func__.1+0x2d8>
    80007968:	00f71463          	bne	a4,a5,80007970 <tinst_tests+0x128>
    8000796c:	75d0106f          	j	800098c8 <tinst_tests+0x2080>
    80007970:	00015517          	auipc	a0,0x15
    80007974:	65050513          	add	a0,a0,1616 # 8001cfc0 <__func__.1+0x318>
    80007978:	26f130ef          	jal	8001b3e6 <printf>
    8000797c:	00144783          	lbu	a5,1(s0)
    80007980:	c799                	beqz	a5,8000798e <tinst_tests+0x146>
    80007982:	6418                	ld	a4,8(s0)
    80007984:	47b5                	li	a5,13
    80007986:	00f71463          	bne	a4,a5,8000798e <tinst_tests+0x146>
    8000798a:	6d20106f          	j	8000905c <tinst_tests+0x1814>
    8000798e:	00015517          	auipc	a0,0x15
    80007992:	63a50513          	add	a0,a0,1594 # 8001cfc8 <__func__.1+0x320>
    80007996:	251130ef          	jal	8001b3e6 <printf>
    8000799a:	02900513          	li	a0,41
    8000799e:	11b120ef          	jal	8001a2b8 <putchar>
    800079a2:	4529                	li	a0,10
    800079a4:	115120ef          	jal	8001a2b8 <putchar>
    800079a8:	00090c63          	beqz	s2,800079c0 <tinst_tests+0x178>
    800079ac:	00144783          	lbu	a5,1(s0)
    800079b0:	c799                	beqz	a5,800079be <tinst_tests+0x176>
    800079b2:	6418                	ld	a4,8(s0)
    800079b4:	47b5                	li	a5,13
    800079b6:	00f71463          	bne	a4,a5,800079be <tinst_tests+0x176>
    800079ba:	3d90106f          	j	80009592 <tinst_tests+0x1d4a>
    800079be:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    800079c0:	0ff0000f          	fence
    800079c4:	4785                	li	a5,1
    800079c6:	00f41023          	sh	a5,0(s0)
    800079ca:	00035797          	auipc	a5,0x35
    800079ce:	6607bf23          	sd	zero,1662(a5) # 8003d048 <excpt+0x38>
    800079d2:	0ff0000f          	fence
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    800079d6:	400197b7          	lui	a5,0x40019
    800079da:	078a                	sll	a5,a5,0x2
    800079dc:	00079783          	lh	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lh(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    800079e0:	00017617          	auipc	a2,0x17
    800079e4:	ea060613          	add	a2,a2,-352 # 8001e880 <__func__.1+0x1bd8>
    800079e8:	08200593          	li	a1,130
    800079ec:	00015517          	auipc	a0,0x15
    800079f0:	5bc50513          	add	a0,a0,1468 # 8001cfa8 <__func__.1+0x300>
    800079f4:	1f3130ef          	jal	8001b3e6 <printf>
    800079f8:	00144783          	lbu	a5,1(s0)
    800079fc:	e399                	bnez	a5,80007a02 <tinst_tests+0x1ba>
    800079fe:	5da0106f          	j	80008fd8 <tinst_tests+0x1790>
    80007a02:	6418                	ld	a4,8(s0)
    80007a04:	47b5                	li	a5,13
    80007a06:	00015597          	auipc	a1,0x15
    80007a0a:	57a58593          	add	a1,a1,1402 # 8001cf80 <__func__.1+0x2d8>
    80007a0e:	00f71463          	bne	a4,a5,80007a16 <tinst_tests+0x1ce>
    80007a12:	75d0106f          	j	8000996e <tinst_tests+0x2126>
    80007a16:	00015517          	auipc	a0,0x15
    80007a1a:	5aa50513          	add	a0,a0,1450 # 8001cfc0 <__func__.1+0x318>
    80007a1e:	1c9130ef          	jal	8001b3e6 <printf>
    80007a22:	00144783          	lbu	a5,1(s0)
    80007a26:	c799                	beqz	a5,80007a34 <tinst_tests+0x1ec>
    80007a28:	6418                	ld	a4,8(s0)
    80007a2a:	47b5                	li	a5,13
    80007a2c:	00f71463          	bne	a4,a5,80007a34 <tinst_tests+0x1ec>
    80007a30:	53b0106f          	j	8000976a <tinst_tests+0x1f22>
    80007a34:	00015517          	auipc	a0,0x15
    80007a38:	59450513          	add	a0,a0,1428 # 8001cfc8 <__func__.1+0x320>
    80007a3c:	1ab130ef          	jal	8001b3e6 <printf>
    80007a40:	02900513          	li	a0,41
    80007a44:	075120ef          	jal	8001a2b8 <putchar>
    80007a48:	4529                	li	a0,10
    80007a4a:	06f120ef          	jal	8001a2b8 <putchar>
    80007a4e:	00090c63          	beqz	s2,80007a66 <tinst_tests+0x21e>
    80007a52:	00144783          	lbu	a5,1(s0)
    80007a56:	c799                	beqz	a5,80007a64 <tinst_tests+0x21c>
    80007a58:	6418                	ld	a4,8(s0)
    80007a5a:	47b5                	li	a5,13
    80007a5c:	00f71463          	bne	a4,a5,80007a64 <tinst_tests+0x21c>
    80007a60:	3d30106f          	j	80009632 <tinst_tests+0x1dea>
    80007a64:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80007a66:	0ff0000f          	fence
    80007a6a:	4785                	li	a5,1
    80007a6c:	00f41023          	sh	a5,0(s0)
    80007a70:	00035797          	auipc	a5,0x35
    80007a74:	5c07bc23          	sd	zero,1496(a5) # 8003d048 <excpt+0x38>
    80007a78:	0ff0000f          	fence
LOAD_INSTRUCTION(lhu, "lhu", uint16_t); 
    80007a7c:	400197b7          	lui	a5,0x40019
    80007a80:	078a                	sll	a5,a5,0x2
    80007a82:	0007d783          	lhu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lhu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    80007a86:	00017617          	auipc	a2,0x17
    80007a8a:	e3a60613          	add	a2,a2,-454 # 8001e8c0 <__func__.1+0x1c18>
    80007a8e:	08200593          	li	a1,130
    80007a92:	00015517          	auipc	a0,0x15
    80007a96:	51650513          	add	a0,a0,1302 # 8001cfa8 <__func__.1+0x300>
    80007a9a:	14d130ef          	jal	8001b3e6 <printf>
    80007a9e:	00144783          	lbu	a5,1(s0)
    80007aa2:	e399                	bnez	a5,80007aa8 <tinst_tests+0x260>
    80007aa4:	5400106f          	j	80008fe4 <tinst_tests+0x179c>
    80007aa8:	6418                	ld	a4,8(s0)
    80007aaa:	47b5                	li	a5,13
    80007aac:	00015597          	auipc	a1,0x15
    80007ab0:	4d458593          	add	a1,a1,1236 # 8001cf80 <__func__.1+0x2d8>
    80007ab4:	00f71463          	bne	a4,a5,80007abc <tinst_tests+0x274>
    80007ab8:	75d0106f          	j	80009a14 <tinst_tests+0x21cc>
    80007abc:	00015517          	auipc	a0,0x15
    80007ac0:	50450513          	add	a0,a0,1284 # 8001cfc0 <__func__.1+0x318>
    80007ac4:	123130ef          	jal	8001b3e6 <printf>
    80007ac8:	00144783          	lbu	a5,1(s0)
    80007acc:	c799                	beqz	a5,80007ada <tinst_tests+0x292>
    80007ace:	6418                	ld	a4,8(s0)
    80007ad0:	47b5                	li	a5,13
    80007ad2:	00f71463          	bne	a4,a5,80007ada <tinst_tests+0x292>
    80007ad6:	4dd0106f          	j	800097b2 <tinst_tests+0x1f6a>
    80007ada:	00015517          	auipc	a0,0x15
    80007ade:	4ee50513          	add	a0,a0,1262 # 8001cfc8 <__func__.1+0x320>
    80007ae2:	105130ef          	jal	8001b3e6 <printf>
    80007ae6:	02900513          	li	a0,41
    80007aea:	7ce120ef          	jal	8001a2b8 <putchar>
    80007aee:	4529                	li	a0,10
    80007af0:	7c8120ef          	jal	8001a2b8 <putchar>
    80007af4:	00090c63          	beqz	s2,80007b0c <tinst_tests+0x2c4>
    80007af8:	00144783          	lbu	a5,1(s0)
    80007afc:	c799                	beqz	a5,80007b0a <tinst_tests+0x2c2>
    80007afe:	6418                	ld	a4,8(s0)
    80007b00:	47b5                	li	a5,13
    80007b02:	00f71463          	bne	a4,a5,80007b0a <tinst_tests+0x2c2>
    80007b06:	3cb0106f          	j	800096d0 <tinst_tests+0x1e88>
    80007b0a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80007b0c:	0ff0000f          	fence
    80007b10:	4785                	li	a5,1
    80007b12:	00f41023          	sh	a5,0(s0)
    80007b16:	00035797          	auipc	a5,0x35
    80007b1a:	5207b923          	sd	zero,1330(a5) # 8003d048 <excpt+0x38>
    80007b1e:	0ff0000f          	fence
LOAD_INSTRUCTION(lw, "lw", uint32_t); 
    80007b22:	400197b7          	lui	a5,0x40019
    80007b26:	078a                	sll	a5,a5,0x2
    80007b28:	0007a783          	lw	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    80007b2c:	00017617          	auipc	a2,0x17
    80007b30:	dd460613          	add	a2,a2,-556 # 8001e900 <__func__.1+0x1c58>
    80007b34:	08200593          	li	a1,130
    80007b38:	00015517          	auipc	a0,0x15
    80007b3c:	47050513          	add	a0,a0,1136 # 8001cfa8 <__func__.1+0x300>
    80007b40:	0a7130ef          	jal	8001b3e6 <printf>
    80007b44:	00144783          	lbu	a5,1(s0)
    80007b48:	e399                	bnez	a5,80007b4e <tinst_tests+0x306>
    80007b4a:	4a60106f          	j	80008ff0 <tinst_tests+0x17a8>
    80007b4e:	6418                	ld	a4,8(s0)
    80007b50:	47b5                	li	a5,13
    80007b52:	00015597          	auipc	a1,0x15
    80007b56:	42e58593          	add	a1,a1,1070 # 8001cf80 <__func__.1+0x2d8>
    80007b5a:	00f71463          	bne	a4,a5,80007b62 <tinst_tests+0x31a>
    80007b5e:	75d0106f          	j	80009aba <tinst_tests+0x2272>
    80007b62:	00015517          	auipc	a0,0x15
    80007b66:	45e50513          	add	a0,a0,1118 # 8001cfc0 <__func__.1+0x318>
    80007b6a:	07d130ef          	jal	8001b3e6 <printf>
    80007b6e:	00144783          	lbu	a5,1(s0)
    80007b72:	c799                	beqz	a5,80007b80 <tinst_tests+0x338>
    80007b74:	6418                	ld	a4,8(s0)
    80007b76:	47b5                	li	a5,13
    80007b78:	00f71463          	bne	a4,a5,80007b80 <tinst_tests+0x338>
    80007b7c:	47f0106f          	j	800097fa <tinst_tests+0x1fb2>
    80007b80:	00015517          	auipc	a0,0x15
    80007b84:	44850513          	add	a0,a0,1096 # 8001cfc8 <__func__.1+0x320>
    80007b88:	05f130ef          	jal	8001b3e6 <printf>
    80007b8c:	02900513          	li	a0,41
    80007b90:	728120ef          	jal	8001a2b8 <putchar>
    80007b94:	4529                	li	a0,10
    80007b96:	722120ef          	jal	8001a2b8 <putchar>
    80007b9a:	00090863          	beqz	s2,80007baa <tinst_tests+0x362>
    80007b9e:	00144783          	lbu	a5,1(s0)
    80007ba2:	c399                	beqz	a5,80007ba8 <tinst_tests+0x360>
    80007ba4:	5020106f          	j	800090a6 <tinst_tests+0x185e>
    80007ba8:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80007baa:	0ff0000f          	fence
    80007bae:	4785                	li	a5,1
    80007bb0:	00f41023          	sh	a5,0(s0)
    80007bb4:	00035797          	auipc	a5,0x35
    80007bb8:	4807ba23          	sd	zero,1172(a5) # 8003d048 <excpt+0x38>
    80007bbc:	0ff0000f          	fence
LOAD_INSTRUCTION(lwu, "lwu", uint32_t);
    80007bc0:	400197b7          	lui	a5,0x40019
    80007bc4:	078a                	sll	a5,a5,0x2
    80007bc6:	0007e783          	lwu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lwu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    80007bca:	00017617          	auipc	a2,0x17
    80007bce:	d7660613          	add	a2,a2,-650 # 8001e940 <__func__.1+0x1c98>
    80007bd2:	08200593          	li	a1,130
    80007bd6:	00015517          	auipc	a0,0x15
    80007bda:	3d250513          	add	a0,a0,978 # 8001cfa8 <__func__.1+0x300>
    80007bde:	009130ef          	jal	8001b3e6 <printf>
    80007be2:	00144783          	lbu	a5,1(s0)
    80007be6:	e399                	bnez	a5,80007bec <tinst_tests+0x3a4>
    80007be8:	4140106f          	j	80008ffc <tinst_tests+0x17b4>
    80007bec:	6418                	ld	a4,8(s0)
    80007bee:	47b5                	li	a5,13
    80007bf0:	00015597          	auipc	a1,0x15
    80007bf4:	39058593          	add	a1,a1,912 # 8001cf80 <__func__.1+0x2d8>
    80007bf8:	00f71463          	bne	a4,a5,80007c00 <tinst_tests+0x3b8>
    80007bfc:	7650106f          	j	80009b60 <tinst_tests+0x2318>
    80007c00:	00015517          	auipc	a0,0x15
    80007c04:	3c050513          	add	a0,a0,960 # 8001cfc0 <__func__.1+0x318>
    80007c08:	7de130ef          	jal	8001b3e6 <printf>
    80007c0c:	00144783          	lbu	a5,1(s0)
    80007c10:	c799                	beqz	a5,80007c1e <tinst_tests+0x3d6>
    80007c12:	6418                	ld	a4,8(s0)
    80007c14:	47b5                	li	a5,13
    80007c16:	00f71463          	bne	a4,a5,80007c1e <tinst_tests+0x3d6>
    80007c1a:	4290106f          	j	80009842 <tinst_tests+0x1ffa>
    80007c1e:	00015517          	auipc	a0,0x15
    80007c22:	3aa50513          	add	a0,a0,938 # 8001cfc8 <__func__.1+0x320>
    80007c26:	7c0130ef          	jal	8001b3e6 <printf>
    80007c2a:	02900513          	li	a0,41
    80007c2e:	68a120ef          	jal	8001a2b8 <putchar>
    80007c32:	4529                	li	a0,10
    80007c34:	684120ef          	jal	8001a2b8 <putchar>
    80007c38:	00090863          	beqz	s2,80007c48 <tinst_tests+0x400>
    80007c3c:	00144783          	lbu	a5,1(s0)
    80007c40:	c399                	beqz	a5,80007c46 <tinst_tests+0x3fe>
    80007c42:	5180106f          	j	8000915a <tinst_tests+0x1912>
    80007c46:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80007c48:	0ff0000f          	fence
    80007c4c:	4785                	li	a5,1
    80007c4e:	00f41023          	sh	a5,0(s0)
    80007c52:	00035797          	auipc	a5,0x35
    80007c56:	3e07bb23          	sd	zero,1014(a5) # 8003d048 <excpt+0x38>
    80007c5a:	0ff0000f          	fence
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    80007c5e:	400197b7          	lui	a5,0x40019
    80007c62:	078a                	sll	a5,a5,0x2
    80007c64:	0007b783          	ld	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    80007c68:	00017617          	auipc	a2,0x17
    80007c6c:	d1860613          	add	a2,a2,-744 # 8001e980 <__func__.1+0x1cd8>
    80007c70:	08200593          	li	a1,130
    80007c74:	00015517          	auipc	a0,0x15
    80007c78:	33450513          	add	a0,a0,820 # 8001cfa8 <__func__.1+0x300>
    80007c7c:	76a130ef          	jal	8001b3e6 <printf>
    80007c80:	00144783          	lbu	a5,1(s0)
    80007c84:	e399                	bnez	a5,80007c8a <tinst_tests+0x442>
    80007c86:	3820106f          	j	80009008 <tinst_tests+0x17c0>
    80007c8a:	6418                	ld	a4,8(s0)
    80007c8c:	47b5                	li	a5,13
    80007c8e:	00015597          	auipc	a1,0x15
    80007c92:	2f258593          	add	a1,a1,754 # 8001cf80 <__func__.1+0x2d8>
    80007c96:	00f71463          	bne	a4,a5,80007c9e <tinst_tests+0x456>
    80007c9a:	7590106f          	j	80009bf2 <tinst_tests+0x23aa>
    80007c9e:	00015517          	auipc	a0,0x15
    80007ca2:	32250513          	add	a0,a0,802 # 8001cfc0 <__func__.1+0x318>
    80007ca6:	740130ef          	jal	8001b3e6 <printf>
    80007caa:	00144783          	lbu	a5,1(s0)
    80007cae:	c799                	beqz	a5,80007cbc <tinst_tests+0x474>
    80007cb0:	6418                	ld	a4,8(s0)
    80007cb2:	47b5                	li	a5,13
    80007cb4:	00f71463          	bne	a4,a5,80007cbc <tinst_tests+0x474>
    80007cb8:	3d30106f          	j	8000988a <tinst_tests+0x2042>
    80007cbc:	00015517          	auipc	a0,0x15
    80007cc0:	30c50513          	add	a0,a0,780 # 8001cfc8 <__func__.1+0x320>
    80007cc4:	722130ef          	jal	8001b3e6 <printf>
    80007cc8:	02900513          	li	a0,41
    80007ccc:	5ec120ef          	jal	8001a2b8 <putchar>
    80007cd0:	4529                	li	a0,10
    80007cd2:	5e6120ef          	jal	8001a2b8 <putchar>
    80007cd6:	00090863          	beqz	s2,80007ce6 <tinst_tests+0x49e>
    80007cda:	00144783          	lbu	a5,1(s0)
    80007cde:	c399                	beqz	a5,80007ce4 <tinst_tests+0x49c>
    80007ce0:	4c60106f          	j	800091a6 <tinst_tests+0x195e>
    80007ce4:	4901                	li	s2,0
        TINST_CHECK(TINST_LOAD)
    );

    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();
    80007ce6:	0ff0000f          	fence
    80007cea:	4785                	li	a5,1
    80007cec:	00f41023          	sh	a5,0(s0)
    80007cf0:	00035797          	auipc	a5,0x35
    80007cf4:	3407bc23          	sd	zero,856(a5) # 8003d048 <excpt+0x38>
    80007cf8:	0ff0000f          	fence
            ".option pop\n\t" \
            :: "r"(value), "r"(addr):  "memory" \
        ); \
    }

STORE_INSTRUCTION(sb, "sb", uint8_t);
    80007cfc:	400197b7          	lui	a5,0x40019
    80007d00:	573d                	li	a4,-17
    80007d02:	078a                	sll	a5,a5,0x2
    80007d04:	00e78023          	sb	a4,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    sb(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    80007d08:	00017617          	auipc	a2,0x17
    80007d0c:	cb860613          	add	a2,a2,-840 # 8001e9c0 <__func__.1+0x1d18>
    80007d10:	08200593          	li	a1,130
    80007d14:	00015517          	auipc	a0,0x15
    80007d18:	29450513          	add	a0,a0,660 # 8001cfa8 <__func__.1+0x300>
    80007d1c:	6ca130ef          	jal	8001b3e6 <printf>
    80007d20:	00144783          	lbu	a5,1(s0)
    80007d24:	e399                	bnez	a5,80007d2a <tinst_tests+0x4e2>
    80007d26:	2ee0106f          	j	80009014 <tinst_tests+0x17cc>
    80007d2a:	6418                	ld	a4,8(s0)
    80007d2c:	47bd                	li	a5,15
    80007d2e:	00015597          	auipc	a1,0x15
    80007d32:	25258593          	add	a1,a1,594 # 8001cf80 <__func__.1+0x2d8>
    80007d36:	00f71463          	bne	a4,a5,80007d3e <tinst_tests+0x4f6>
    80007d3a:	74f0106f          	j	80009c88 <tinst_tests+0x2440>
    80007d3e:	00015517          	auipc	a0,0x15
    80007d42:	28250513          	add	a0,a0,642 # 8001cfc0 <__func__.1+0x318>
    80007d46:	6a0130ef          	jal	8001b3e6 <printf>
    80007d4a:	00144783          	lbu	a5,1(s0)
    80007d4e:	c799                	beqz	a5,80007d5c <tinst_tests+0x514>
    80007d50:	6418                	ld	a4,8(s0)
    80007d52:	47bd                	li	a5,15
    80007d54:	00f71463          	bne	a4,a5,80007d5c <tinst_tests+0x514>
    80007d58:	3d30106f          	j	8000992a <tinst_tests+0x20e2>
    80007d5c:	00015517          	auipc	a0,0x15
    80007d60:	26c50513          	add	a0,a0,620 # 8001cfc8 <__func__.1+0x320>
    80007d64:	682130ef          	jal	8001b3e6 <printf>
    80007d68:	02900513          	li	a0,41
    80007d6c:	54c120ef          	jal	8001a2b8 <putchar>
    80007d70:	4529                	li	a0,10
    80007d72:	546120ef          	jal	8001a2b8 <putchar>
    80007d76:	00090863          	beqz	s2,80007d86 <tinst_tests+0x53e>
    80007d7a:	00144783          	lbu	a5,1(s0)
    80007d7e:	c399                	beqz	a5,80007d84 <tinst_tests+0x53c>
    80007d80:	4c80106f          	j	80009248 <tinst_tests+0x1a00>
    80007d84:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    80007d86:	0ff0000f          	fence
    80007d8a:	4785                	li	a5,1
    80007d8c:	00f41023          	sh	a5,0(s0)
    80007d90:	00035797          	auipc	a5,0x35
    80007d94:	2a07bc23          	sd	zero,696(a5) # 8003d048 <excpt+0x38>
    80007d98:	0ff0000f          	fence
STORE_INSTRUCTION(sh, "sh", uint16_t);
    80007d9c:	77f1                	lui	a5,0xffffc
    80007d9e:	40019737          	lui	a4,0x40019
    80007da2:	eef7879b          	addw	a5,a5,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    80007da6:	070a                	sll	a4,a4,0x2
    80007da8:	00f71023          	sh	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sh(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    80007dac:	00017617          	auipc	a2,0x17
    80007db0:	c5460613          	add	a2,a2,-940 # 8001ea00 <__func__.1+0x1d58>
    80007db4:	08200593          	li	a1,130
    80007db8:	00015517          	auipc	a0,0x15
    80007dbc:	1f050513          	add	a0,a0,496 # 8001cfa8 <__func__.1+0x300>
    80007dc0:	626130ef          	jal	8001b3e6 <printf>
    80007dc4:	00144783          	lbu	a5,1(s0)
    80007dc8:	e399                	bnez	a5,80007dce <tinst_tests+0x586>
    80007dca:	2560106f          	j	80009020 <tinst_tests+0x17d8>
    80007dce:	6418                	ld	a4,8(s0)
    80007dd0:	47bd                	li	a5,15
    80007dd2:	00015597          	auipc	a1,0x15
    80007dd6:	1ae58593          	add	a1,a1,430 # 8001cf80 <__func__.1+0x2d8>
    80007dda:	00f71463          	bne	a4,a5,80007de2 <tinst_tests+0x59a>
    80007dde:	74b0106f          	j	80009d28 <tinst_tests+0x24e0>
    80007de2:	00015517          	auipc	a0,0x15
    80007de6:	1de50513          	add	a0,a0,478 # 8001cfc0 <__func__.1+0x318>
    80007dea:	5fc130ef          	jal	8001b3e6 <printf>
    80007dee:	00144783          	lbu	a5,1(s0)
    80007df2:	c799                	beqz	a5,80007e00 <tinst_tests+0x5b8>
    80007df4:	6418                	ld	a4,8(s0)
    80007df6:	47bd                	li	a5,15
    80007df8:	00f71463          	bne	a4,a5,80007e00 <tinst_tests+0x5b8>
    80007dfc:	3d50106f          	j	800099d0 <tinst_tests+0x2188>
    80007e00:	00015517          	auipc	a0,0x15
    80007e04:	1c850513          	add	a0,a0,456 # 8001cfc8 <__func__.1+0x320>
    80007e08:	5de130ef          	jal	8001b3e6 <printf>
    80007e0c:	02900513          	li	a0,41
    80007e10:	4a8120ef          	jal	8001a2b8 <putchar>
    80007e14:	4529                	li	a0,10
    80007e16:	4a2120ef          	jal	8001a2b8 <putchar>
    80007e1a:	00090863          	beqz	s2,80007e2a <tinst_tests+0x5e2>
    80007e1e:	00144783          	lbu	a5,1(s0)
    80007e22:	c399                	beqz	a5,80007e28 <tinst_tests+0x5e0>
    80007e24:	4740106f          	j	80009298 <tinst_tests+0x1a50>
    80007e28:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    80007e2a:	0ff0000f          	fence
    80007e2e:	4785                	li	a5,1
    80007e30:	00f41023          	sh	a5,0(s0)
    80007e34:	00035797          	auipc	a5,0x35
    80007e38:	2007ba23          	sd	zero,532(a5) # 8003d048 <excpt+0x38>
    80007e3c:	0ff0000f          	fence
STORE_INSTRUCTION(sw, "sw", uint32_t);
    80007e40:	deadc7b7          	lui	a5,0xdeadc
    80007e44:	40019737          	lui	a4,0x40019
    80007e48:	eef7879b          	addw	a5,a5,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    80007e4c:	070a                	sll	a4,a4,0x2
    80007e4e:	00f72023          	sw	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sw(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    80007e52:	00017617          	auipc	a2,0x17
    80007e56:	bee60613          	add	a2,a2,-1042 # 8001ea40 <__func__.1+0x1d98>
    80007e5a:	08200593          	li	a1,130
    80007e5e:	00015517          	auipc	a0,0x15
    80007e62:	14a50513          	add	a0,a0,330 # 8001cfa8 <__func__.1+0x300>
    80007e66:	580130ef          	jal	8001b3e6 <printf>
    80007e6a:	00144783          	lbu	a5,1(s0)
    80007e6e:	e399                	bnez	a5,80007e74 <tinst_tests+0x62c>
    80007e70:	1bc0106f          	j	8000902c <tinst_tests+0x17e4>
    80007e74:	6418                	ld	a4,8(s0)
    80007e76:	47bd                	li	a5,15
    80007e78:	00015597          	auipc	a1,0x15
    80007e7c:	10858593          	add	a1,a1,264 # 8001cf80 <__func__.1+0x2d8>
    80007e80:	00f71463          	bne	a4,a5,80007e88 <tinst_tests+0x640>
    80007e84:	7410106f          	j	80009dc4 <tinst_tests+0x257c>
    80007e88:	00015517          	auipc	a0,0x15
    80007e8c:	13850513          	add	a0,a0,312 # 8001cfc0 <__func__.1+0x318>
    80007e90:	556130ef          	jal	8001b3e6 <printf>
    80007e94:	00144783          	lbu	a5,1(s0)
    80007e98:	c799                	beqz	a5,80007ea6 <tinst_tests+0x65e>
    80007e9a:	6418                	ld	a4,8(s0)
    80007e9c:	47bd                	li	a5,15
    80007e9e:	00f71463          	bne	a4,a5,80007ea6 <tinst_tests+0x65e>
    80007ea2:	3d50106f          	j	80009a76 <tinst_tests+0x222e>
    80007ea6:	00015517          	auipc	a0,0x15
    80007eaa:	12250513          	add	a0,a0,290 # 8001cfc8 <__func__.1+0x320>
    80007eae:	538130ef          	jal	8001b3e6 <printf>
    80007eb2:	02900513          	li	a0,41
    80007eb6:	402120ef          	jal	8001a2b8 <putchar>
    80007eba:	4529                	li	a0,10
    80007ebc:	3fc120ef          	jal	8001a2b8 <putchar>
    80007ec0:	00090863          	beqz	s2,80007ed0 <tinst_tests+0x688>
    80007ec4:	00144783          	lbu	a5,1(s0)
    80007ec8:	c399                	beqz	a5,80007ece <tinst_tests+0x686>
    80007eca:	41e0106f          	j	800092e8 <tinst_tests+0x1aa0>
    80007ece:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    80007ed0:	0ff0000f          	fence
    80007ed4:	4785                	li	a5,1
    80007ed6:	00f41023          	sh	a5,0(s0)
    80007eda:	00035797          	auipc	a5,0x35
    80007ede:	1607b723          	sd	zero,366(a5) # 8003d048 <excpt+0x38>
    80007ee2:	0ff0000f          	fence
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80007ee6:	37ab77b7          	lui	a5,0x37ab7
    80007eea:	078a                	sll	a5,a5,0x2
    80007eec:	40019737          	lui	a4,0x40019
    80007ef0:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80007ef4:	070a                	sll	a4,a4,0x2
    80007ef6:	00f73023          	sd	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sd(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    80007efa:	00017617          	auipc	a2,0x17
    80007efe:	b8660613          	add	a2,a2,-1146 # 8001ea80 <__func__.1+0x1dd8>
    80007f02:	08200593          	li	a1,130
    80007f06:	00015517          	auipc	a0,0x15
    80007f0a:	0a250513          	add	a0,a0,162 # 8001cfa8 <__func__.1+0x300>
    80007f0e:	4d8130ef          	jal	8001b3e6 <printf>
    80007f12:	00144783          	lbu	a5,1(s0)
    80007f16:	e399                	bnez	a5,80007f1c <tinst_tests+0x6d4>
    80007f18:	1200106f          	j	80009038 <tinst_tests+0x17f0>
    80007f1c:	6418                	ld	a4,8(s0)
    80007f1e:	47bd                	li	a5,15
    80007f20:	00015597          	auipc	a1,0x15
    80007f24:	06058593          	add	a1,a1,96 # 8001cf80 <__func__.1+0x2d8>
    80007f28:	00f71463          	bne	a4,a5,80007f30 <tinst_tests+0x6e8>
    80007f2c:	5260106f          	j	80009452 <tinst_tests+0x1c0a>
    80007f30:	00015517          	auipc	a0,0x15
    80007f34:	09050513          	add	a0,a0,144 # 8001cfc0 <__func__.1+0x318>
    80007f38:	4ae130ef          	jal	8001b3e6 <printf>
    80007f3c:	00144783          	lbu	a5,1(s0)
    80007f40:	c799                	beqz	a5,80007f4e <tinst_tests+0x706>
    80007f42:	6418                	ld	a4,8(s0)
    80007f44:	47bd                	li	a5,15
    80007f46:	00f71463          	bne	a4,a5,80007f4e <tinst_tests+0x706>
    80007f4a:	3d30106f          	j	80009b1c <tinst_tests+0x22d4>
    80007f4e:	00015517          	auipc	a0,0x15
    80007f52:	07a50513          	add	a0,a0,122 # 8001cfc8 <__func__.1+0x320>
    80007f56:	490130ef          	jal	8001b3e6 <printf>
    80007f5a:	02900513          	li	a0,41
    80007f5e:	35a120ef          	jal	8001a2b8 <putchar>
    80007f62:	4529                	li	a0,10
    80007f64:	354120ef          	jal	8001a2b8 <putchar>
    80007f68:	00090863          	beqz	s2,80007f78 <tinst_tests+0x730>
    80007f6c:	00144783          	lbu	a5,1(s0)
    80007f70:	c399                	beqz	a5,80007f76 <tinst_tests+0x72e>
    80007f72:	3c60106f          	j	80009338 <tinst_tests+0x1af0>
    80007f76:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    80007f78:	0ff0000f          	fence
    80007f7c:	4785                	li	a5,1
    80007f7e:	00f41023          	sh	a5,0(s0)
    80007f82:	00035797          	auipc	a5,0x35
    80007f86:	0c07b323          	sd	zero,198(a5) # 8003d048 <excpt+0x38>
    80007f8a:	0ff0000f          	fence
 * the asm extended chosen registers are part of the subset allowed
 * so we have to make sure.
 */

static inline uint64_t c_lw(uintptr_t addr){
    register uint64_t _addr asm("a0") = addr;
    80007f8e:	40019537          	lui	a0,0x40019
    80007f92:	050a                	sll	a0,a0,0x2
    register uint64_t value asm("a1");
    asm volatile(
    80007f94:	410c                	lw	a1,0(a0)
    value = c_lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80007f96:	00017617          	auipc	a2,0x17
    80007f9a:	b2a60613          	add	a2,a2,-1238 # 8001eac0 <__func__.1+0x1e18>
    80007f9e:	08200593          	li	a1,130
    80007fa2:	00015517          	auipc	a0,0x15
    80007fa6:	00650513          	add	a0,a0,6 # 8001cfa8 <__func__.1+0x300>
    80007faa:	43c130ef          	jal	8001b3e6 <printf>
    80007fae:	00144783          	lbu	a5,1(s0)
    80007fb2:	c799                	beqz	a5,80007fc0 <tinst_tests+0x778>
    80007fb4:	6418                	ld	a4,8(s0)
    80007fb6:	47b5                	li	a5,13
    80007fb8:	00f71463          	bne	a4,a5,80007fc0 <tinst_tests+0x778>
    80007fbc:	5380106f          	j	800094f4 <tinst_tests+0x1cac>
    80007fc0:	00015597          	auipc	a1,0x15
    80007fc4:	fc058593          	add	a1,a1,-64 # 8001cf80 <__func__.1+0x2d8>
    80007fc8:	00015517          	auipc	a0,0x15
    80007fcc:	ff850513          	add	a0,a0,-8 # 8001cfc0 <__func__.1+0x318>
    80007fd0:	416130ef          	jal	8001b3e6 <printf>
    80007fd4:	00144783          	lbu	a5,1(s0)
    80007fd8:	c799                	beqz	a5,80007fe6 <tinst_tests+0x79e>
    80007fda:	6418                	ld	a4,8(s0)
    80007fdc:	47b5                	li	a5,13
    80007fde:	00f71463          	bne	a4,a5,80007fe6 <tinst_tests+0x79e>
    80007fe2:	3e10106f          	j	80009bc2 <tinst_tests+0x237a>
    80007fe6:	00015517          	auipc	a0,0x15
    80007fea:	fe250513          	add	a0,a0,-30 # 8001cfc8 <__func__.1+0x320>
    80007fee:	3f8130ef          	jal	8001b3e6 <printf>
    80007ff2:	02900513          	li	a0,41
    80007ff6:	2c2120ef          	jal	8001a2b8 <putchar>
    80007ffa:	4529                	li	a0,10
    80007ffc:	2bc120ef          	jal	8001a2b8 <putchar>
    80008000:	00090863          	beqz	s2,80008010 <tinst_tests+0x7c8>
    80008004:	00144783          	lbu	a5,1(s0)
    80008008:	c399                	beqz	a5,8000800e <tinst_tests+0x7c6>
    8000800a:	37e0106f          	j	80009388 <tinst_tests+0x1b40>
    8000800e:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80008010:	0ff0000f          	fence
    80008014:	4785                	li	a5,1
    80008016:	00f41023          	sh	a5,0(s0)
    8000801a:	00035797          	auipc	a5,0x35
    8000801e:	0207b723          	sd	zero,46(a5) # 8003d048 <excpt+0x38>
    80008022:	0ff0000f          	fence
    );
    return value;
}

static inline uint64_t c_ld(uintptr_t addr){
    register uint64_t _addr asm("a0") = addr;
    80008026:	40019537          	lui	a0,0x40019
    8000802a:	050a                	sll	a0,a0,0x2
    register uint64_t value asm("a1");
    asm volatile(
    8000802c:	610c                	ld	a1,0(a0)
    value = c_ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    8000802e:	00017617          	auipc	a2,0x17
    80008032:	ad260613          	add	a2,a2,-1326 # 8001eb00 <__func__.1+0x1e58>
        "c.ld    %0, 0(%1)\n\t"
        :"=r"(value): "r"(_addr) : "memory"
    );
    return value;
    80008036:	84ae                	mv	s1,a1
    80008038:	00015517          	auipc	a0,0x15
    8000803c:	f7050513          	add	a0,a0,-144 # 8001cfa8 <__func__.1+0x300>
    80008040:	08200593          	li	a1,130
    80008044:	3a2130ef          	jal	8001b3e6 <printf>
    80008048:	00144783          	lbu	a5,1(s0)
    8000804c:	c799                	beqz	a5,8000805a <tinst_tests+0x812>
    8000804e:	6418                	ld	a4,8(s0)
    80008050:	47b5                	li	a5,13
    80008052:	00f71463          	bne	a4,a5,8000805a <tinst_tests+0x812>
    80008056:	4f80106f          	j	8000954e <tinst_tests+0x1d06>
    8000805a:	00015597          	auipc	a1,0x15
    8000805e:	f2658593          	add	a1,a1,-218 # 8001cf80 <__func__.1+0x2d8>
    80008062:	00015517          	auipc	a0,0x15
    80008066:	f5e50513          	add	a0,a0,-162 # 8001cfc0 <__func__.1+0x318>
    8000806a:	37c130ef          	jal	8001b3e6 <printf>
    8000806e:	00144783          	lbu	a5,1(s0)
    80008072:	c799                	beqz	a5,80008080 <tinst_tests+0x838>
    80008074:	6418                	ld	a4,8(s0)
    80008076:	47b5                	li	a5,13
    80008078:	00f71463          	bne	a4,a5,80008080 <tinst_tests+0x838>
    8000807c:	3d90106f          	j	80009c54 <tinst_tests+0x240c>
    80008080:	00015517          	auipc	a0,0x15
    80008084:	f4850513          	add	a0,a0,-184 # 8001cfc8 <__func__.1+0x320>
    80008088:	35e130ef          	jal	8001b3e6 <printf>
    8000808c:	02900513          	li	a0,41
    80008090:	228120ef          	jal	8001a2b8 <putchar>
    80008094:	4529                	li	a0,10
    80008096:	222120ef          	jal	8001a2b8 <putchar>
    8000809a:	00090863          	beqz	s2,800080aa <tinst_tests+0x862>
    8000809e:	00144783          	lbu	a5,1(s0)
    800080a2:	c399                	beqz	a5,800080a8 <tinst_tests+0x860>
    800080a4:	3240106f          	j	800093c8 <tinst_tests+0x1b80>
    800080a8:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    800080aa:	0ff0000f          	fence
    800080ae:	4785                	li	a5,1
    800080b0:	00f41023          	sh	a5,0(s0)
    800080b4:	00035797          	auipc	a5,0x35
    800080b8:	f807ba23          	sd	zero,-108(a5) # 8003d048 <excpt+0x38>
    800080bc:	0ff0000f          	fence
}

static inline void c_sw(uintptr_t addr, uint64_t value){
    register uint64_t _addr asm("a0") = addr;
    800080c0:	40019537          	lui	a0,0x40019
    800080c4:	050a                	sll	a0,a0,0x2
    register uint64_t _value asm("a1") = value;
    800080c6:	85a6                	mv	a1,s1
    asm volatile(
    800080c8:	c10c                	sw	a1,0(a0)
    c_sw(vaddr_f, value);       
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    800080ca:	00017617          	auipc	a2,0x17
    800080ce:	9f660613          	add	a2,a2,-1546 # 8001eac0 <__func__.1+0x1e18>
    800080d2:	08200593          	li	a1,130
    800080d6:	00015517          	auipc	a0,0x15
    800080da:	ed250513          	add	a0,a0,-302 # 8001cfa8 <__func__.1+0x300>
    800080de:	308130ef          	jal	8001b3e6 <printf>
    800080e2:	00144783          	lbu	a5,1(s0)
    800080e6:	c799                	beqz	a5,800080f4 <tinst_tests+0x8ac>
    800080e8:	6418                	ld	a4,8(s0)
    800080ea:	47bd                	li	a5,15
    800080ec:	00f71463          	bne	a4,a5,800080f4 <tinst_tests+0x8ac>
    800080f0:	4760106f          	j	80009566 <tinst_tests+0x1d1e>
    800080f4:	00015597          	auipc	a1,0x15
    800080f8:	e8c58593          	add	a1,a1,-372 # 8001cf80 <__func__.1+0x2d8>
    800080fc:	00015517          	auipc	a0,0x15
    80008100:	ec450513          	add	a0,a0,-316 # 8001cfc0 <__func__.1+0x318>
    80008104:	2e2130ef          	jal	8001b3e6 <printf>
    80008108:	00144783          	lbu	a5,1(s0)
    8000810c:	c799                	beqz	a5,8000811a <tinst_tests+0x8d2>
    8000810e:	6418                	ld	a4,8(s0)
    80008110:	47bd                	li	a5,15
    80008112:	00f71463          	bne	a4,a5,8000811a <tinst_tests+0x8d2>
    80008116:	3db0106f          	j	80009cf0 <tinst_tests+0x24a8>
    8000811a:	00015517          	auipc	a0,0x15
    8000811e:	eae50513          	add	a0,a0,-338 # 8001cfc8 <__func__.1+0x320>
    80008122:	2c4130ef          	jal	8001b3e6 <printf>
    80008126:	02900513          	li	a0,41
    8000812a:	18e120ef          	jal	8001a2b8 <putchar>
    8000812e:	4529                	li	a0,10
    80008130:	188120ef          	jal	8001a2b8 <putchar>
    80008134:	00090c63          	beqz	s2,8000814c <tinst_tests+0x904>
    80008138:	00144783          	lbu	a5,1(s0)
    8000813c:	c799                	beqz	a5,8000814a <tinst_tests+0x902>
    8000813e:	6418                	ld	a4,8(s0)
    80008140:	47bd                	li	a5,15
    80008142:	00f71463          	bne	a4,a5,8000814a <tinst_tests+0x902>
    80008146:	30c0206f          	j	8000a452 <tinst_tests+0x2c0a>
    8000814a:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000814c:	0ff0000f          	fence
    80008150:	4785                	li	a5,1
    80008152:	00f41023          	sh	a5,0(s0)
    80008156:	00035797          	auipc	a5,0x35
    8000815a:	ee07b923          	sd	zero,-270(a5) # 8003d048 <excpt+0x38>
    8000815e:	0ff0000f          	fence
        :: "r"(_value), "r"(_addr): "memory"
    );
}

static inline void c_sd(uintptr_t addr, uint64_t value){
    register uint64_t _addr asm("a0") = addr;
    80008162:	40019537          	lui	a0,0x40019
    80008166:	050a                	sll	a0,a0,0x2
    register uint64_t _value asm("a1") = value;
    80008168:	85a6                	mv	a1,s1
    asm volatile(
    8000816a:	e10c                	sd	a1,0(a0)
    c_sd(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000816c:	00017617          	auipc	a2,0x17
    80008170:	9d460613          	add	a2,a2,-1580 # 8001eb40 <__func__.1+0x1e98>
    80008174:	08200593          	li	a1,130
    80008178:	00015517          	auipc	a0,0x15
    8000817c:	e3050513          	add	a0,a0,-464 # 8001cfa8 <__func__.1+0x300>
    80008180:	266130ef          	jal	8001b3e6 <printf>
    80008184:	00144783          	lbu	a5,1(s0)
    80008188:	c799                	beqz	a5,80008196 <tinst_tests+0x94e>
    8000818a:	6418                	ld	a4,8(s0)
    8000818c:	47bd                	li	a5,15
    8000818e:	00f71463          	bne	a4,a5,80008196 <tinst_tests+0x94e>
    80008192:	3ec0106f          	j	8000957e <tinst_tests+0x1d36>
    80008196:	00015597          	auipc	a1,0x15
    8000819a:	dea58593          	add	a1,a1,-534 # 8001cf80 <__func__.1+0x2d8>
    8000819e:	00015517          	auipc	a0,0x15
    800081a2:	e2250513          	add	a0,a0,-478 # 8001cfc0 <__func__.1+0x318>
    800081a6:	240130ef          	jal	8001b3e6 <printf>
    800081aa:	00144783          	lbu	a5,1(s0)
    800081ae:	c799                	beqz	a5,800081bc <tinst_tests+0x974>
    800081b0:	6418                	ld	a4,8(s0)
    800081b2:	47bd                	li	a5,15
    800081b4:	00f71463          	bne	a4,a5,800081bc <tinst_tests+0x974>
    800081b8:	3d90106f          	j	80009d90 <tinst_tests+0x2548>
    800081bc:	00015517          	auipc	a0,0x15
    800081c0:	e0c50513          	add	a0,a0,-500 # 8001cfc8 <__func__.1+0x320>
    800081c4:	222130ef          	jal	8001b3e6 <printf>
    800081c8:	02900513          	li	a0,41
    800081cc:	0ec120ef          	jal	8001a2b8 <putchar>
    800081d0:	4529                	li	a0,10
    800081d2:	0e6120ef          	jal	8001a2b8 <putchar>
    800081d6:	00090c63          	beqz	s2,800081ee <tinst_tests+0x9a6>
    800081da:	00144783          	lbu	a5,1(s0)
    800081de:	c799                	beqz	a5,800081ec <tinst_tests+0x9a4>
    800081e0:	6418                	ld	a4,8(s0)
    800081e2:	47bd                	li	a5,15
    800081e4:	00f71463          	bne	a4,a5,800081ec <tinst_tests+0x9a4>
    800081e8:	2a40206f          	j	8000a48c <tinst_tests+0x2c44>
    800081ec:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    800081ee:	0ff0000f          	fence
    800081f2:	4785                	li	a5,1
    800081f4:	00f41023          	sh	a5,0(s0)
    800081f8:	00035797          	auipc	a5,0x35
    800081fc:	e407b823          	sd	zero,-432(a5) # 8003d048 <excpt+0x38>
    80008200:	0ff0000f          	fence
    );
}

static inline uint32_t lr_w(uintptr_t addr){
    uint32_t value;
    asm volatile(
    80008204:	400194b7          	lui	s1,0x40019
    80008208:	048a                	sll	s1,s1,0x2
    8000820a:	1004a4af          	lr.w	s1,(s1)
    value = lr_w(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    8000820e:	00017617          	auipc	a2,0x17
    80008212:	97260613          	add	a2,a2,-1678 # 8001eb80 <__func__.1+0x1ed8>
    80008216:	08200593          	li	a1,130
    8000821a:	00015517          	auipc	a0,0x15
    8000821e:	d8e50513          	add	a0,a0,-626 # 8001cfa8 <__func__.1+0x300>
    80008222:	1c4130ef          	jal	8001b3e6 <printf>
    80008226:	00144783          	lbu	a5,1(s0)
    value = lr_w(vaddr_f);
    8000822a:	1482                	sll	s1,s1,0x20
    8000822c:	9081                	srl	s1,s1,0x20
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    8000822e:	60078be3          	beqz	a5,80009044 <tinst_tests+0x17fc>
    80008232:	6418                	ld	a4,8(s0)
    80008234:	47b5                	li	a5,13
    80008236:	00015597          	auipc	a1,0x15
    8000823a:	d4a58593          	add	a1,a1,-694 # 8001cf80 <__func__.1+0x2d8>
    8000823e:	00f71463          	bne	a4,a5,80008246 <tinst_tests+0x9fe>
    80008242:	3920106f          	j	800095d4 <tinst_tests+0x1d8c>
    80008246:	00015517          	auipc	a0,0x15
    8000824a:	d7a50513          	add	a0,a0,-646 # 8001cfc0 <__func__.1+0x318>
    8000824e:	198130ef          	jal	8001b3e6 <printf>
    80008252:	00144783          	lbu	a5,1(s0)
    80008256:	c799                	beqz	a5,80008264 <tinst_tests+0xa1c>
    80008258:	6418                	ld	a4,8(s0)
    8000825a:	47b5                	li	a5,13
    8000825c:	00f71463          	bne	a4,a5,80008264 <tinst_tests+0xa1c>
    80008260:	1ac0106f          	j	8000940c <tinst_tests+0x1bc4>
    80008264:	00015517          	auipc	a0,0x15
    80008268:	d6450513          	add	a0,a0,-668 # 8001cfc8 <__func__.1+0x320>
    8000826c:	17a130ef          	jal	8001b3e6 <printf>
    80008270:	02900513          	li	a0,41
    80008274:	044120ef          	jal	8001a2b8 <putchar>
    80008278:	4529                	li	a0,10
    8000827a:	03e120ef          	jal	8001a2b8 <putchar>
    8000827e:	00090c63          	beqz	s2,80008296 <tinst_tests+0xa4e>
    80008282:	00144783          	lbu	a5,1(s0)
    80008286:	c799                	beqz	a5,80008294 <tinst_tests+0xa4c>
    80008288:	6418                	ld	a4,8(s0)
    8000828a:	47b5                	li	a5,13
    8000828c:	00f71463          	bne	a4,a5,80008294 <tinst_tests+0xa4c>
    80008290:	2320206f          	j	8000a4c2 <tinst_tests+0x2c7a>
    80008294:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008296:	0ff0000f          	fence
    8000829a:	4785                	li	a5,1
    8000829c:	00f41023          	sh	a5,0(s0)
    800082a0:	00035797          	auipc	a5,0x35
    800082a4:	da07b423          	sd	zero,-600(a5) # 8003d048 <excpt+0x38>
    800082a8:	0ff0000f          	fence
    );
    return value;
}

static inline uint32_t sc_w(uintptr_t addr, uint64_t value){
    asm volatile(
    800082ac:	400197b7          	lui	a5,0x40019
    800082b0:	078a                	sll	a5,a5,0x2
    800082b2:	1897a4af          	sc.w	s1,s1,(a5)
    value = sc_w(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    800082b6:	00017617          	auipc	a2,0x17
    800082ba:	90a60613          	add	a2,a2,-1782 # 8001ebc0 <__func__.1+0x1f18>
    800082be:	08200593          	li	a1,130
    800082c2:	00015517          	auipc	a0,0x15
    800082c6:	ce650513          	add	a0,a0,-794 # 8001cfa8 <__func__.1+0x300>
    800082ca:	11c130ef          	jal	8001b3e6 <printf>
    800082ce:	00144783          	lbu	a5,1(s0)
        "sc.w    %0, %0, 0(%1)\n\t"
        : "+r"(value) : "r"(addr): "memory"
    );
    return value;
    800082d2:	2481                	sext.w	s1,s1
    800082d4:	56078ee3          	beqz	a5,80009050 <tinst_tests+0x1808>
    800082d8:	6418                	ld	a4,8(s0)
    800082da:	47bd                	li	a5,15
    800082dc:	00015597          	auipc	a1,0x15
    800082e0:	ca458593          	add	a1,a1,-860 # 8001cf80 <__func__.1+0x2d8>
    800082e4:	00f71463          	bne	a4,a5,800082ec <tinst_tests+0xaa4>
    800082e8:	38c0106f          	j	80009674 <tinst_tests+0x1e2c>
    800082ec:	00015517          	auipc	a0,0x15
    800082f0:	cd450513          	add	a0,a0,-812 # 8001cfc0 <__func__.1+0x318>
    800082f4:	0f2130ef          	jal	8001b3e6 <printf>
    800082f8:	00144783          	lbu	a5,1(s0)
    800082fc:	c799                	beqz	a5,8000830a <tinst_tests+0xac2>
    800082fe:	6418                	ld	a4,8(s0)
    80008300:	47bd                	li	a5,15
    80008302:	00f71463          	bne	a4,a5,8000830a <tinst_tests+0xac2>
    80008306:	1a80106f          	j	800094ae <tinst_tests+0x1c66>
    8000830a:	00015517          	auipc	a0,0x15
    8000830e:	cbe50513          	add	a0,a0,-834 # 8001cfc8 <__func__.1+0x320>
    80008312:	0d4130ef          	jal	8001b3e6 <printf>
    80008316:	02900513          	li	a0,41
    8000831a:	79f110ef          	jal	8001a2b8 <putchar>
    8000831e:	4529                	li	a0,10
    80008320:	799110ef          	jal	8001a2b8 <putchar>
    80008324:	00090c63          	beqz	s2,8000833c <tinst_tests+0xaf4>
    80008328:	00144783          	lbu	a5,1(s0)
    8000832c:	c799                	beqz	a5,8000833a <tinst_tests+0xaf2>
    8000832e:	6418                	ld	a4,8(s0)
    80008330:	47bd                	li	a5,15
    80008332:	00f71463          	bne	a4,a5,8000833a <tinst_tests+0xaf2>
    80008336:	1d40206f          	j	8000a50a <tinst_tests+0x2cc2>
    8000833a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000833c:	0ff0000f          	fence
    80008340:	4785                	li	a5,1
    80008342:	00f41023          	sh	a5,0(s0)
    80008346:	00035797          	auipc	a5,0x35
    8000834a:	d007b123          	sd	zero,-766(a5) # 8003d048 <excpt+0x38>
    8000834e:	0ff0000f          	fence
            : "+r"(value) : "r"(addr): "memory" \
        ); \
        return value; \
    }

AMO_INSTRUCTION(amoswap_w, "amoswap.w", uint32_t);
    80008352:	400197b7          	lui	a5,0x40019
    80008356:	078a                	sll	a5,a5,0x2
    80008358:	0897a4af          	amoswap.w	s1,s1,(a5)
    value = amoswap_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    8000835c:	00017617          	auipc	a2,0x17
    80008360:	8a460613          	add	a2,a2,-1884 # 8001ec00 <__func__.1+0x1f58>
    80008364:	08200593          	li	a1,130
    80008368:	00015517          	auipc	a0,0x15
    8000836c:	c4050513          	add	a0,a0,-960 # 8001cfa8 <__func__.1+0x300>
    80008370:	076130ef          	jal	8001b3e6 <printf>
    80008374:	00144783          	lbu	a5,1(s0)
    80008378:	520781e3          	beqz	a5,8000909a <tinst_tests+0x1852>
    8000837c:	6418                	ld	a4,8(s0)
    8000837e:	47bd                	li	a5,15
    80008380:	00015597          	auipc	a1,0x15
    80008384:	c0058593          	add	a1,a1,-1024 # 8001cf80 <__func__.1+0x2d8>
    80008388:	00f71463          	bne	a4,a5,80008390 <tinst_tests+0xb48>
    8000838c:	3820106f          	j	8000970e <tinst_tests+0x1ec6>
    80008390:	00015517          	auipc	a0,0x15
    80008394:	c3050513          	add	a0,a0,-976 # 8001cfc0 <__func__.1+0x318>
    80008398:	04e130ef          	jal	8001b3e6 <printf>
    8000839c:	00144783          	lbu	a5,1(s0)
    800083a0:	c799                	beqz	a5,800083ae <tinst_tests+0xb66>
    800083a2:	6418                	ld	a4,8(s0)
    800083a4:	47bd                	li	a5,15
    800083a6:	00f71463          	bne	a4,a5,800083ae <tinst_tests+0xb66>
    800083aa:	15e0106f          	j	80009508 <tinst_tests+0x1cc0>
    800083ae:	00015517          	auipc	a0,0x15
    800083b2:	c1a50513          	add	a0,a0,-998 # 8001cfc8 <__func__.1+0x320>
    800083b6:	030130ef          	jal	8001b3e6 <printf>
    800083ba:	02900513          	li	a0,41
    800083be:	6fb110ef          	jal	8001a2b8 <putchar>
    800083c2:	4529                	li	a0,10
    800083c4:	6f5110ef          	jal	8001a2b8 <putchar>
    800083c8:	00090c63          	beqz	s2,800083e0 <tinst_tests+0xb98>
    800083cc:	00144783          	lbu	a5,1(s0)
    800083d0:	c799                	beqz	a5,800083de <tinst_tests+0xb96>
    800083d2:	6418                	ld	a4,8(s0)
    800083d4:	47bd                	li	a5,15
    800083d6:	00f71463          	bne	a4,a5,800083de <tinst_tests+0xb96>
    800083da:	1780206f          	j	8000a552 <tinst_tests+0x2d0a>
    800083de:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800083e0:	0ff0000f          	fence
    800083e4:	4785                	li	a5,1
    800083e6:	00f41023          	sh	a5,0(s0)
    800083ea:	00035797          	auipc	a5,0x35
    800083ee:	c407bf23          	sd	zero,-930(a5) # 8003d048 <excpt+0x38>
    800083f2:	0ff0000f          	fence
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    800083f6:	400197b7          	lui	a5,0x40019
    800083fa:	078a                	sll	a5,a5,0x2
    800083fc:	0097a4af          	amoadd.w	s1,s1,(a5)
    value = amoadd_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    80008400:	00017617          	auipc	a2,0x17
    80008404:	84060613          	add	a2,a2,-1984 # 8001ec40 <__func__.1+0x1f98>
    80008408:	08200593          	li	a1,130
    8000840c:	00015517          	auipc	a0,0x15
    80008410:	b9c50513          	add	a0,a0,-1124 # 8001cfa8 <__func__.1+0x300>
    80008414:	7d3120ef          	jal	8001b3e6 <printf>
    80008418:	00144783          	lbu	a5,1(s0)
    8000841c:	4c079be3          	bnez	a5,800090f2 <tinst_tests+0x18aa>
    80008420:	00015597          	auipc	a1,0x15
    80008424:	b6058593          	add	a1,a1,-1184 # 8001cf80 <__func__.1+0x2d8>
    80008428:	00015517          	auipc	a0,0x15
    8000842c:	b9850513          	add	a0,a0,-1128 # 8001cfc0 <__func__.1+0x318>
    80008430:	7b7120ef          	jal	8001b3e6 <printf>
    80008434:	00144783          	lbu	a5,1(s0)
    80008438:	c799                	beqz	a5,80008446 <tinst_tests+0xbfe>
    8000843a:	6418                	ld	a4,8(s0)
    8000843c:	47bd                	li	a5,15
    8000843e:	00f71463          	bne	a4,a5,80008446 <tinst_tests+0xbfe>
    80008442:	20f0106f          	j	80009e50 <tinst_tests+0x2608>
    80008446:	00015517          	auipc	a0,0x15
    8000844a:	b8250513          	add	a0,a0,-1150 # 8001cfc8 <__func__.1+0x320>
    8000844e:	799120ef          	jal	8001b3e6 <printf>
    80008452:	02900513          	li	a0,41
    80008456:	663110ef          	jal	8001a2b8 <putchar>
    8000845a:	4529                	li	a0,10
    8000845c:	65d110ef          	jal	8001a2b8 <putchar>
    80008460:	00090c63          	beqz	s2,80008478 <tinst_tests+0xc30>
    80008464:	00144783          	lbu	a5,1(s0)
    80008468:	c799                	beqz	a5,80008476 <tinst_tests+0xc2e>
    8000846a:	6418                	ld	a4,8(s0)
    8000846c:	47bd                	li	a5,15
    8000846e:	00f71463          	bne	a4,a5,80008476 <tinst_tests+0xc2e>
    80008472:	1280206f          	j	8000a59a <tinst_tests+0x2d52>
    80008476:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008478:	0ff0000f          	fence
    8000847c:	4785                	li	a5,1
    8000847e:	00f41023          	sh	a5,0(s0)
    80008482:	00035797          	auipc	a5,0x35
    80008486:	bc07b323          	sd	zero,-1082(a5) # 8003d048 <excpt+0x38>
    8000848a:	0ff0000f          	fence
AMO_INSTRUCTION(amoxor_w, "amoxor.w", uint32_t);
    8000848e:	400197b7          	lui	a5,0x40019
    80008492:	078a                	sll	a5,a5,0x2
    80008494:	2097a4af          	amoxor.w	s1,s1,(a5)
    value = amoxor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    80008498:	00016617          	auipc	a2,0x16
    8000849c:	7e860613          	add	a2,a2,2024 # 8001ec80 <__func__.1+0x1fd8>
    800084a0:	08200593          	li	a1,130
    800084a4:	00015517          	auipc	a0,0x15
    800084a8:	b0450513          	add	a0,a0,-1276 # 8001cfa8 <__func__.1+0x300>
    800084ac:	73b120ef          	jal	8001b3e6 <printf>
    800084b0:	00144783          	lbu	a5,1(s0)
    800084b4:	e399                	bnez	a5,800084ba <tinst_tests+0xc72>
    800084b6:	3380106f          	j	800097ee <tinst_tests+0x1fa6>
    800084ba:	6418                	ld	a4,8(s0)
    800084bc:	47bd                	li	a5,15
    800084be:	00015597          	auipc	a1,0x15
    800084c2:	ac258593          	add	a1,a1,-1342 # 8001cf80 <__func__.1+0x2d8>
    800084c6:	00f71463          	bne	a4,a5,800084ce <tinst_tests+0xc86>
    800084ca:	37d0106f          	j	8000a046 <tinst_tests+0x27fe>
    800084ce:	00015517          	auipc	a0,0x15
    800084d2:	af250513          	add	a0,a0,-1294 # 8001cfc0 <__func__.1+0x318>
    800084d6:	711120ef          	jal	8001b3e6 <printf>
    800084da:	00144783          	lbu	a5,1(s0)
    800084de:	c799                	beqz	a5,800084ec <tinst_tests+0xca4>
    800084e0:	6418                	ld	a4,8(s0)
    800084e2:	47bd                	li	a5,15
    800084e4:	00f71463          	bne	a4,a5,800084ec <tinst_tests+0xca4>
    800084e8:	1bb0106f          	j	80009ea2 <tinst_tests+0x265a>
    800084ec:	00015517          	auipc	a0,0x15
    800084f0:	adc50513          	add	a0,a0,-1316 # 8001cfc8 <__func__.1+0x320>
    800084f4:	6f3120ef          	jal	8001b3e6 <printf>
    800084f8:	02900513          	li	a0,41
    800084fc:	5bd110ef          	jal	8001a2b8 <putchar>
    80008500:	4529                	li	a0,10
    80008502:	5b7110ef          	jal	8001a2b8 <putchar>
    80008506:	00090c63          	beqz	s2,8000851e <tinst_tests+0xcd6>
    8000850a:	00144783          	lbu	a5,1(s0)
    8000850e:	c799                	beqz	a5,8000851c <tinst_tests+0xcd4>
    80008510:	6418                	ld	a4,8(s0)
    80008512:	47bd                	li	a5,15
    80008514:	00f71463          	bne	a4,a5,8000851c <tinst_tests+0xcd4>
    80008518:	12a0206f          	j	8000a642 <tinst_tests+0x2dfa>
    8000851c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
       TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000851e:	0ff0000f          	fence
    80008522:	4785                	li	a5,1
    80008524:	00f41023          	sh	a5,0(s0)
    80008528:	00035797          	auipc	a5,0x35
    8000852c:	b207b023          	sd	zero,-1248(a5) # 8003d048 <excpt+0x38>
    80008530:	0ff0000f          	fence
AMO_INSTRUCTION(amoand_w, "amoand.w", uint32_t);
    80008534:	400197b7          	lui	a5,0x40019
    80008538:	078a                	sll	a5,a5,0x2
    8000853a:	6097a4af          	amoand.w	s1,s1,(a5)
    value = amoand_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    8000853e:	00016617          	auipc	a2,0x16
    80008542:	78260613          	add	a2,a2,1922 # 8001ecc0 <__func__.1+0x2018>
    80008546:	08200593          	li	a1,130
    8000854a:	00015517          	auipc	a0,0x15
    8000854e:	a5e50513          	add	a0,a0,-1442 # 8001cfa8 <__func__.1+0x300>
    80008552:	695120ef          	jal	8001b3e6 <printf>
    80008556:	00144783          	lbu	a5,1(s0)
    8000855a:	e399                	bnez	a5,80008560 <tinst_tests+0xd18>
    8000855c:	2da0106f          	j	80009836 <tinst_tests+0x1fee>
    80008560:	6418                	ld	a4,8(s0)
    80008562:	47bd                	li	a5,15
    80008564:	00015597          	auipc	a1,0x15
    80008568:	a1c58593          	add	a1,a1,-1508 # 8001cf80 <__func__.1+0x2d8>
    8000856c:	00f71463          	bne	a4,a5,80008574 <tinst_tests+0xd2c>
    80008570:	37b0106f          	j	8000a0ea <tinst_tests+0x28a2>
    80008574:	00015517          	auipc	a0,0x15
    80008578:	a4c50513          	add	a0,a0,-1460 # 8001cfc0 <__func__.1+0x318>
    8000857c:	66b120ef          	jal	8001b3e6 <printf>
    80008580:	00144783          	lbu	a5,1(s0)
    80008584:	c799                	beqz	a5,80008592 <tinst_tests+0xd4a>
    80008586:	6418                	ld	a4,8(s0)
    80008588:	47bd                	li	a5,15
    8000858a:	00f71463          	bne	a4,a5,80008592 <tinst_tests+0xd4a>
    8000858e:	15b0106f          	j	80009ee8 <tinst_tests+0x26a0>
    80008592:	00015517          	auipc	a0,0x15
    80008596:	a3650513          	add	a0,a0,-1482 # 8001cfc8 <__func__.1+0x320>
    8000859a:	64d120ef          	jal	8001b3e6 <printf>
    8000859e:	02900513          	li	a0,41
    800085a2:	517110ef          	jal	8001a2b8 <putchar>
    800085a6:	4529                	li	a0,10
    800085a8:	511110ef          	jal	8001a2b8 <putchar>
    800085ac:	00090c63          	beqz	s2,800085c4 <tinst_tests+0xd7c>
    800085b0:	00144783          	lbu	a5,1(s0)
    800085b4:	c799                	beqz	a5,800085c2 <tinst_tests+0xd7a>
    800085b6:	6418                	ld	a4,8(s0)
    800085b8:	47bd                	li	a5,15
    800085ba:	00f71463          	bne	a4,a5,800085c2 <tinst_tests+0xd7a>
    800085be:	1000206f          	j	8000a6be <tinst_tests+0x2e76>
    800085c2:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800085c4:	0ff0000f          	fence
    800085c8:	4785                	li	a5,1
    800085ca:	00f41023          	sh	a5,0(s0)
    800085ce:	00035797          	auipc	a5,0x35
    800085d2:	a607bd23          	sd	zero,-1414(a5) # 8003d048 <excpt+0x38>
    800085d6:	0ff0000f          	fence
AMO_INSTRUCTION(amoor_w, "amoor.w", uint32_t);
    800085da:	400197b7          	lui	a5,0x40019
    800085de:	078a                	sll	a5,a5,0x2
    800085e0:	4097a4af          	amoor.w	s1,s1,(a5)
    value = amoor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    800085e4:	00016617          	auipc	a2,0x16
    800085e8:	71c60613          	add	a2,a2,1820 # 8001ed00 <__func__.1+0x2058>
    800085ec:	08200593          	li	a1,130
    800085f0:	00015517          	auipc	a0,0x15
    800085f4:	9b850513          	add	a0,a0,-1608 # 8001cfa8 <__func__.1+0x300>
    800085f8:	5ef120ef          	jal	8001b3e6 <printf>
    800085fc:	00144783          	lbu	a5,1(s0)
    80008600:	e399                	bnez	a5,80008606 <tinst_tests+0xdbe>
    80008602:	27c0106f          	j	8000987e <tinst_tests+0x2036>
    80008606:	6418                	ld	a4,8(s0)
    80008608:	47bd                	li	a5,15
    8000860a:	00015597          	auipc	a1,0x15
    8000860e:	97658593          	add	a1,a1,-1674 # 8001cf80 <__func__.1+0x2d8>
    80008612:	00f71463          	bne	a4,a5,8000861a <tinst_tests+0xdd2>
    80008616:	3790106f          	j	8000a18e <tinst_tests+0x2946>
    8000861a:	00015517          	auipc	a0,0x15
    8000861e:	9a650513          	add	a0,a0,-1626 # 8001cfc0 <__func__.1+0x318>
    80008622:	5c5120ef          	jal	8001b3e6 <printf>
    80008626:	00144783          	lbu	a5,1(s0)
    8000862a:	c799                	beqz	a5,80008638 <tinst_tests+0xdf0>
    8000862c:	6418                	ld	a4,8(s0)
    8000862e:	47bd                	li	a5,15
    80008630:	00f71463          	bne	a4,a5,80008638 <tinst_tests+0xdf0>
    80008634:	0fb0106f          	j	80009f2e <tinst_tests+0x26e6>
    80008638:	00015517          	auipc	a0,0x15
    8000863c:	99050513          	add	a0,a0,-1648 # 8001cfc8 <__func__.1+0x320>
    80008640:	5a7120ef          	jal	8001b3e6 <printf>
    80008644:	02900513          	li	a0,41
    80008648:	471110ef          	jal	8001a2b8 <putchar>
    8000864c:	4529                	li	a0,10
    8000864e:	46b110ef          	jal	8001a2b8 <putchar>
    80008652:	00090c63          	beqz	s2,8000866a <tinst_tests+0xe22>
    80008656:	00144783          	lbu	a5,1(s0)
    8000865a:	c799                	beqz	a5,80008668 <tinst_tests+0xe20>
    8000865c:	6418                	ld	a4,8(s0)
    8000865e:	47bd                	li	a5,15
    80008660:	00f71463          	bne	a4,a5,80008668 <tinst_tests+0xe20>
    80008664:	0d60206f          	j	8000a73a <tinst_tests+0x2ef2>
    80008668:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000866a:	0ff0000f          	fence
    8000866e:	4785                	li	a5,1
    80008670:	00f41023          	sh	a5,0(s0)
    80008674:	00035797          	auipc	a5,0x35
    80008678:	9c07ba23          	sd	zero,-1580(a5) # 8003d048 <excpt+0x38>
    8000867c:	0ff0000f          	fence
AMO_INSTRUCTION(amomin_w, "amomin.w", uint32_t);
    80008680:	400197b7          	lui	a5,0x40019
    80008684:	078a                	sll	a5,a5,0x2
    80008686:	8097a4af          	amomin.w	s1,s1,(a5)
    value = amomin_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    8000868a:	00016617          	auipc	a2,0x16
    8000868e:	6b660613          	add	a2,a2,1718 # 8001ed40 <__func__.1+0x2098>
    80008692:	08200593          	li	a1,130
    80008696:	00015517          	auipc	a0,0x15
    8000869a:	91250513          	add	a0,a0,-1774 # 8001cfa8 <__func__.1+0x300>
    8000869e:	549120ef          	jal	8001b3e6 <printf>
    800086a2:	00144783          	lbu	a5,1(s0)
    800086a6:	e399                	bnez	a5,800086ac <tinst_tests+0xe64>
    800086a8:	2760106f          	j	8000991e <tinst_tests+0x20d6>
    800086ac:	6418                	ld	a4,8(s0)
    800086ae:	47bd                	li	a5,15
    800086b0:	00015597          	auipc	a1,0x15
    800086b4:	8d058593          	add	a1,a1,-1840 # 8001cf80 <__func__.1+0x2d8>
    800086b8:	00f71463          	bne	a4,a5,800086c0 <tinst_tests+0xe78>
    800086bc:	3770106f          	j	8000a232 <tinst_tests+0x29ea>
    800086c0:	00015517          	auipc	a0,0x15
    800086c4:	90050513          	add	a0,a0,-1792 # 8001cfc0 <__func__.1+0x318>
    800086c8:	51f120ef          	jal	8001b3e6 <printf>
    800086cc:	00144783          	lbu	a5,1(s0)
    800086d0:	c799                	beqz	a5,800086de <tinst_tests+0xe96>
    800086d2:	6418                	ld	a4,8(s0)
    800086d4:	47bd                	li	a5,15
    800086d6:	00f71463          	bne	a4,a5,800086de <tinst_tests+0xe96>
    800086da:	09b0106f          	j	80009f74 <tinst_tests+0x272c>
    800086de:	00015517          	auipc	a0,0x15
    800086e2:	8ea50513          	add	a0,a0,-1814 # 8001cfc8 <__func__.1+0x320>
    800086e6:	501120ef          	jal	8001b3e6 <printf>
    800086ea:	02900513          	li	a0,41
    800086ee:	3cb110ef          	jal	8001a2b8 <putchar>
    800086f2:	4529                	li	a0,10
    800086f4:	3c5110ef          	jal	8001a2b8 <putchar>
    800086f8:	00090c63          	beqz	s2,80008710 <tinst_tests+0xec8>
    800086fc:	00144783          	lbu	a5,1(s0)
    80008700:	c799                	beqz	a5,8000870e <tinst_tests+0xec6>
    80008702:	6418                	ld	a4,8(s0)
    80008704:	47bd                	li	a5,15
    80008706:	00f71463          	bne	a4,a5,8000870e <tinst_tests+0xec6>
    8000870a:	0780206f          	j	8000a782 <tinst_tests+0x2f3a>
    8000870e:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008710:	0ff0000f          	fence
    80008714:	4785                	li	a5,1
    80008716:	00f41023          	sh	a5,0(s0)
    8000871a:	00035797          	auipc	a5,0x35
    8000871e:	9207b723          	sd	zero,-1746(a5) # 8003d048 <excpt+0x38>
    80008722:	0ff0000f          	fence
AMO_INSTRUCTION(amomax_w, "amomax.w", uint32_t);
    80008726:	400197b7          	lui	a5,0x40019
    8000872a:	078a                	sll	a5,a5,0x2
    8000872c:	a097a4af          	amomax.w	s1,s1,(a5)
    value = amomax_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    80008730:	00016617          	auipc	a2,0x16
    80008734:	65060613          	add	a2,a2,1616 # 8001ed80 <__func__.1+0x20d8>
    80008738:	08200593          	li	a1,130
    8000873c:	00015517          	auipc	a0,0x15
    80008740:	86c50513          	add	a0,a0,-1940 # 8001cfa8 <__func__.1+0x300>
    80008744:	4a3120ef          	jal	8001b3e6 <printf>
    80008748:	00144783          	lbu	a5,1(s0)
    8000874c:	e399                	bnez	a5,80008752 <tinst_tests+0xf0a>
    8000874e:	2760106f          	j	800099c4 <tinst_tests+0x217c>
    80008752:	6418                	ld	a4,8(s0)
    80008754:	47bd                	li	a5,15
    80008756:	00015597          	auipc	a1,0x15
    8000875a:	82a58593          	add	a1,a1,-2006 # 8001cf80 <__func__.1+0x2d8>
    8000875e:	00f71463          	bne	a4,a5,80008766 <tinst_tests+0xf1e>
    80008762:	2700206f          	j	8000a9d2 <tinst_tests+0x318a>
    80008766:	00015517          	auipc	a0,0x15
    8000876a:	85a50513          	add	a0,a0,-1958 # 8001cfc0 <__func__.1+0x318>
    8000876e:	479120ef          	jal	8001b3e6 <printf>
    80008772:	00144783          	lbu	a5,1(s0)
    80008776:	c799                	beqz	a5,80008784 <tinst_tests+0xf3c>
    80008778:	6418                	ld	a4,8(s0)
    8000877a:	47bd                	li	a5,15
    8000877c:	00f71463          	bne	a4,a5,80008784 <tinst_tests+0xf3c>
    80008780:	03b0106f          	j	80009fba <tinst_tests+0x2772>
    80008784:	00015517          	auipc	a0,0x15
    80008788:	84450513          	add	a0,a0,-1980 # 8001cfc8 <__func__.1+0x320>
    8000878c:	45b120ef          	jal	8001b3e6 <printf>
    80008790:	02900513          	li	a0,41
    80008794:	325110ef          	jal	8001a2b8 <putchar>
    80008798:	4529                	li	a0,10
    8000879a:	31f110ef          	jal	8001a2b8 <putchar>
    8000879e:	00090c63          	beqz	s2,800087b6 <tinst_tests+0xf6e>
    800087a2:	00144783          	lbu	a5,1(s0)
    800087a6:	c799                	beqz	a5,800087b4 <tinst_tests+0xf6c>
    800087a8:	6418                	ld	a4,8(s0)
    800087aa:	47bd                	li	a5,15
    800087ac:	00f71463          	bne	a4,a5,800087b4 <tinst_tests+0xf6c>
    800087b0:	01c0206f          	j	8000a7cc <tinst_tests+0x2f84>
    800087b4:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800087b6:	0ff0000f          	fence
    800087ba:	4785                	li	a5,1
    800087bc:	00f41023          	sh	a5,0(s0)
    800087c0:	00035797          	auipc	a5,0x35
    800087c4:	8807b423          	sd	zero,-1912(a5) # 8003d048 <excpt+0x38>
    800087c8:	0ff0000f          	fence
AMO_INSTRUCTION(amominu_w, "amominu.w", uint32_t);
    800087cc:	400197b7          	lui	a5,0x40019
    800087d0:	078a                	sll	a5,a5,0x2
    800087d2:	c097a4af          	amominu.w	s1,s1,(a5)
    value = amominu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    800087d6:	00016617          	auipc	a2,0x16
    800087da:	5ea60613          	add	a2,a2,1514 # 8001edc0 <__func__.1+0x2118>
    800087de:	08200593          	li	a1,130
    800087e2:	00014517          	auipc	a0,0x14
    800087e6:	7c650513          	add	a0,a0,1990 # 8001cfa8 <__func__.1+0x300>
    800087ea:	3fd120ef          	jal	8001b3e6 <printf>
    800087ee:	00144783          	lbu	a5,1(s0)
    800087f2:	e399                	bnez	a5,800087f8 <tinst_tests+0xfb0>
    800087f4:	2760106f          	j	80009a6a <tinst_tests+0x2222>
    800087f8:	6418                	ld	a4,8(s0)
    800087fa:	47bd                	li	a5,15
    800087fc:	00014597          	auipc	a1,0x14
    80008800:	78458593          	add	a1,a1,1924 # 8001cf80 <__func__.1+0x2d8>
    80008804:	00f71463          	bne	a4,a5,8000880c <tinst_tests+0xfc4>
    80008808:	2720206f          	j	8000aa7a <tinst_tests+0x3232>
    8000880c:	00014517          	auipc	a0,0x14
    80008810:	7b450513          	add	a0,a0,1972 # 8001cfc0 <__func__.1+0x318>
    80008814:	3d3120ef          	jal	8001b3e6 <printf>
    80008818:	00144783          	lbu	a5,1(s0)
    8000881c:	c799                	beqz	a5,8000882a <tinst_tests+0xfe2>
    8000881e:	6418                	ld	a4,8(s0)
    80008820:	47bd                	li	a5,15
    80008822:	00f71463          	bne	a4,a5,8000882a <tinst_tests+0xfe2>
    80008826:	7da0106f          	j	8000a000 <tinst_tests+0x27b8>
    8000882a:	00014517          	auipc	a0,0x14
    8000882e:	79e50513          	add	a0,a0,1950 # 8001cfc8 <__func__.1+0x320>
    80008832:	3b5120ef          	jal	8001b3e6 <printf>
    80008836:	02900513          	li	a0,41
    8000883a:	27f110ef          	jal	8001a2b8 <putchar>
    8000883e:	4529                	li	a0,10
    80008840:	279110ef          	jal	8001a2b8 <putchar>
    80008844:	00090c63          	beqz	s2,8000885c <tinst_tests+0x1014>
    80008848:	00144783          	lbu	a5,1(s0)
    8000884c:	c799                	beqz	a5,8000885a <tinst_tests+0x1012>
    8000884e:	6418                	ld	a4,8(s0)
    80008850:	47bd                	li	a5,15
    80008852:	00f71463          	bne	a4,a5,8000885a <tinst_tests+0x1012>
    80008856:	7c10106f          	j	8000a816 <tinst_tests+0x2fce>
    8000885a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000885c:	0ff0000f          	fence
    80008860:	4785                	li	a5,1
    80008862:	00f41023          	sh	a5,0(s0)
    80008866:	00034797          	auipc	a5,0x34
    8000886a:	7e07b123          	sd	zero,2018(a5) # 8003d048 <excpt+0x38>
    8000886e:	0ff0000f          	fence
AMO_INSTRUCTION(amomaxu_w, "amomaxu.w", uint32_t);
    80008872:	400197b7          	lui	a5,0x40019
    80008876:	078a                	sll	a5,a5,0x2
    80008878:	e097a4af          	amomaxu.w	s1,s1,(a5)
    value = amomaxu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000887c:	00016617          	auipc	a2,0x16
    80008880:	58460613          	add	a2,a2,1412 # 8001ee00 <__func__.1+0x2158>
    80008884:	08200593          	li	a1,130
    80008888:	00014517          	auipc	a0,0x14
    8000888c:	72050513          	add	a0,a0,1824 # 8001cfa8 <__func__.1+0x300>
    80008890:	357120ef          	jal	8001b3e6 <printf>
    80008894:	00144783          	lbu	a5,1(s0)
    value = amomaxu_w(vaddr_f,value);
    80008898:	1482                	sll	s1,s1,0x20
    8000889a:	9081                	srl	s1,s1,0x20
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000889c:	e399                	bnez	a5,800088a2 <tinst_tests+0x105a>
    8000889e:	2720106f          	j	80009b10 <tinst_tests+0x22c8>
    800088a2:	6418                	ld	a4,8(s0)
    800088a4:	47bd                	li	a5,15
    800088a6:	00014597          	auipc	a1,0x14
    800088aa:	6da58593          	add	a1,a1,1754 # 8001cf80 <__func__.1+0x2d8>
    800088ae:	00f71463          	bne	a4,a5,800088b6 <tinst_tests+0x106e>
    800088b2:	2700206f          	j	8000ab22 <tinst_tests+0x32da>
    800088b6:	00014517          	auipc	a0,0x14
    800088ba:	70a50513          	add	a0,a0,1802 # 8001cfc0 <__func__.1+0x318>
    800088be:	329120ef          	jal	8001b3e6 <printf>
    800088c2:	00144783          	lbu	a5,1(s0)
    800088c6:	c799                	beqz	a5,800088d4 <tinst_tests+0x108c>
    800088c8:	6418                	ld	a4,8(s0)
    800088ca:	47bd                	li	a5,15
    800088cc:	00f71463          	bne	a4,a5,800088d4 <tinst_tests+0x108c>
    800088d0:	7d40106f          	j	8000a0a4 <tinst_tests+0x285c>
    800088d4:	00014517          	auipc	a0,0x14
    800088d8:	6f450513          	add	a0,a0,1780 # 8001cfc8 <__func__.1+0x320>
    800088dc:	30b120ef          	jal	8001b3e6 <printf>
    800088e0:	02900513          	li	a0,41
    800088e4:	1d5110ef          	jal	8001a2b8 <putchar>
    800088e8:	4529                	li	a0,10
    800088ea:	1cf110ef          	jal	8001a2b8 <putchar>
    800088ee:	00090c63          	beqz	s2,80008906 <tinst_tests+0x10be>
    800088f2:	00144783          	lbu	a5,1(s0)
    800088f6:	c799                	beqz	a5,80008904 <tinst_tests+0x10bc>
    800088f8:	6418                	ld	a4,8(s0)
    800088fa:	47bd                	li	a5,15
    800088fc:	00f71463          	bne	a4,a5,80008904 <tinst_tests+0x10bc>
    80008900:	7610106f          	j	8000a860 <tinst_tests+0x3018>
    80008904:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008906:	0ff0000f          	fence
    8000890a:	4785                	li	a5,1
    8000890c:	00f41023          	sh	a5,0(s0)
    80008910:	00034797          	auipc	a5,0x34
    80008914:	7207bc23          	sd	zero,1848(a5) # 8003d048 <excpt+0x38>
    80008918:	0ff0000f          	fence
AMO_INSTRUCTION(amoswap_d, "amoswap.d", uint64_t);
    8000891c:	400197b7          	lui	a5,0x40019
    80008920:	078a                	sll	a5,a5,0x2
    80008922:	0897b4af          	amoswap.d	s1,s1,(a5)
    value = amoswap_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    80008926:	00016617          	auipc	a2,0x16
    8000892a:	51a60613          	add	a2,a2,1306 # 8001ee40 <__func__.1+0x2198>
    8000892e:	08200593          	li	a1,130
    80008932:	00014517          	auipc	a0,0x14
    80008936:	67650513          	add	a0,a0,1654 # 8001cfa8 <__func__.1+0x300>
    8000893a:	2ad120ef          	jal	8001b3e6 <printf>
    8000893e:	00144783          	lbu	a5,1(s0)
    80008942:	e399                	bnez	a5,80008948 <tinst_tests+0x1100>
    80008944:	2720106f          	j	80009bb6 <tinst_tests+0x236e>
    80008948:	6418                	ld	a4,8(s0)
    8000894a:	47bd                	li	a5,15
    8000894c:	00014597          	auipc	a1,0x14
    80008950:	63458593          	add	a1,a1,1588 # 8001cf80 <__func__.1+0x2d8>
    80008954:	00f71463          	bne	a4,a5,8000895c <tinst_tests+0x1114>
    80008958:	2720206f          	j	8000abca <tinst_tests+0x3382>
    8000895c:	00014517          	auipc	a0,0x14
    80008960:	66450513          	add	a0,a0,1636 # 8001cfc0 <__func__.1+0x318>
    80008964:	283120ef          	jal	8001b3e6 <printf>
    80008968:	00144783          	lbu	a5,1(s0)
    8000896c:	c799                	beqz	a5,8000897a <tinst_tests+0x1132>
    8000896e:	6418                	ld	a4,8(s0)
    80008970:	47bd                	li	a5,15
    80008972:	00f71463          	bne	a4,a5,8000897a <tinst_tests+0x1132>
    80008976:	7d20106f          	j	8000a148 <tinst_tests+0x2900>
    8000897a:	00014517          	auipc	a0,0x14
    8000897e:	64e50513          	add	a0,a0,1614 # 8001cfc8 <__func__.1+0x320>
    80008982:	265120ef          	jal	8001b3e6 <printf>
    80008986:	02900513          	li	a0,41
    8000898a:	12f110ef          	jal	8001a2b8 <putchar>
    8000898e:	4529                	li	a0,10
    80008990:	129110ef          	jal	8001a2b8 <putchar>
    80008994:	00090c63          	beqz	s2,800089ac <tinst_tests+0x1164>
    80008998:	00144783          	lbu	a5,1(s0)
    8000899c:	c799                	beqz	a5,800089aa <tinst_tests+0x1162>
    8000899e:	6418                	ld	a4,8(s0)
    800089a0:	47bd                	li	a5,15
    800089a2:	00f71463          	bne	a4,a5,800089aa <tinst_tests+0x1162>
    800089a6:	7050106f          	j	8000a8aa <tinst_tests+0x3062>
    800089aa:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800089ac:	0ff0000f          	fence
    800089b0:	4785                	li	a5,1
    800089b2:	00f41023          	sh	a5,0(s0)
    800089b6:	00034797          	auipc	a5,0x34
    800089ba:	6807b923          	sd	zero,1682(a5) # 8003d048 <excpt+0x38>
    800089be:	0ff0000f          	fence
AMO_INSTRUCTION(amoadd_d, "amoadd.d", uint64_t);
    800089c2:	400197b7          	lui	a5,0x40019
    800089c6:	078a                	sll	a5,a5,0x2
    800089c8:	0097b4af          	amoadd.d	s1,s1,(a5)
    value = amoadd_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    800089cc:	00016617          	auipc	a2,0x16
    800089d0:	4b460613          	add	a2,a2,1204 # 8001ee80 <__func__.1+0x21d8>
    800089d4:	08200593          	li	a1,130
    800089d8:	00014517          	auipc	a0,0x14
    800089dc:	5d050513          	add	a0,a0,1488 # 8001cfa8 <__func__.1+0x300>
    800089e0:	207120ef          	jal	8001b3e6 <printf>
    800089e4:	00144783          	lbu	a5,1(s0)
    800089e8:	e399                	bnez	a5,800089ee <tinst_tests+0x11a6>
    800089ea:	25e0106f          	j	80009c48 <tinst_tests+0x2400>
    800089ee:	6418                	ld	a4,8(s0)
    800089f0:	47bd                	li	a5,15
    800089f2:	00014597          	auipc	a1,0x14
    800089f6:	58e58593          	add	a1,a1,1422 # 8001cf80 <__func__.1+0x2d8>
    800089fa:	00f71463          	bne	a4,a5,80008a02 <tinst_tests+0x11ba>
    800089fe:	2740206f          	j	8000ac72 <tinst_tests+0x342a>
    80008a02:	00014517          	auipc	a0,0x14
    80008a06:	5be50513          	add	a0,a0,1470 # 8001cfc0 <__func__.1+0x318>
    80008a0a:	1dd120ef          	jal	8001b3e6 <printf>
    80008a0e:	00144783          	lbu	a5,1(s0)
    80008a12:	c799                	beqz	a5,80008a20 <tinst_tests+0x11d8>
    80008a14:	6418                	ld	a4,8(s0)
    80008a16:	47bd                	li	a5,15
    80008a18:	00f71463          	bne	a4,a5,80008a20 <tinst_tests+0x11d8>
    80008a1c:	7d00106f          	j	8000a1ec <tinst_tests+0x29a4>
    80008a20:	00014517          	auipc	a0,0x14
    80008a24:	5a850513          	add	a0,a0,1448 # 8001cfc8 <__func__.1+0x320>
    80008a28:	1bf120ef          	jal	8001b3e6 <printf>
    80008a2c:	02900513          	li	a0,41
    80008a30:	089110ef          	jal	8001a2b8 <putchar>
    80008a34:	4529                	li	a0,10
    80008a36:	083110ef          	jal	8001a2b8 <putchar>
    80008a3a:	00090c63          	beqz	s2,80008a52 <tinst_tests+0x120a>
    80008a3e:	00144783          	lbu	a5,1(s0)
    80008a42:	c799                	beqz	a5,80008a50 <tinst_tests+0x1208>
    80008a44:	6418                	ld	a4,8(s0)
    80008a46:	47bd                	li	a5,15
    80008a48:	00f71463          	bne	a4,a5,80008a50 <tinst_tests+0x1208>
    80008a4c:	6a90106f          	j	8000a8f4 <tinst_tests+0x30ac>
    80008a50:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008a52:	0ff0000f          	fence
    80008a56:	4785                	li	a5,1
    80008a58:	00f41023          	sh	a5,0(s0)
    80008a5c:	00034797          	auipc	a5,0x34
    80008a60:	5e07b623          	sd	zero,1516(a5) # 8003d048 <excpt+0x38>
    80008a64:	0ff0000f          	fence
AMO_INSTRUCTION(amoxor_d, "amoxor.d", uint64_t);
    80008a68:	400197b7          	lui	a5,0x40019
    80008a6c:	078a                	sll	a5,a5,0x2
    80008a6e:	2097b4af          	amoxor.d	s1,s1,(a5)
    value = amoxor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    80008a72:	00016617          	auipc	a2,0x16
    80008a76:	44e60613          	add	a2,a2,1102 # 8001eec0 <__func__.1+0x2218>
    80008a7a:	08200593          	li	a1,130
    80008a7e:	00014517          	auipc	a0,0x14
    80008a82:	52a50513          	add	a0,a0,1322 # 8001cfa8 <__func__.1+0x300>
    80008a86:	161120ef          	jal	8001b3e6 <printf>
    80008a8a:	00144783          	lbu	a5,1(s0)
    80008a8e:	e399                	bnez	a5,80008a94 <tinst_tests+0x124c>
    80008a90:	2540106f          	j	80009ce4 <tinst_tests+0x249c>
    80008a94:	6418                	ld	a4,8(s0)
    80008a96:	47bd                	li	a5,15
    80008a98:	00014597          	auipc	a1,0x14
    80008a9c:	4e858593          	add	a1,a1,1256 # 8001cf80 <__func__.1+0x2d8>
    80008aa0:	00f71463          	bne	a4,a5,80008aa8 <tinst_tests+0x1260>
    80008aa4:	2760206f          	j	8000ad1a <tinst_tests+0x34d2>
    80008aa8:	00014517          	auipc	a0,0x14
    80008aac:	51850513          	add	a0,a0,1304 # 8001cfc0 <__func__.1+0x318>
    80008ab0:	137120ef          	jal	8001b3e6 <printf>
    80008ab4:	00144783          	lbu	a5,1(s0)
    80008ab8:	c799                	beqz	a5,80008ac6 <tinst_tests+0x127e>
    80008aba:	6418                	ld	a4,8(s0)
    80008abc:	47bd                	li	a5,15
    80008abe:	00f71463          	bne	a4,a5,80008ac6 <tinst_tests+0x127e>
    80008ac2:	7ce0106f          	j	8000a290 <tinst_tests+0x2a48>
    80008ac6:	00014517          	auipc	a0,0x14
    80008aca:	50250513          	add	a0,a0,1282 # 8001cfc8 <__func__.1+0x320>
    80008ace:	119120ef          	jal	8001b3e6 <printf>
    80008ad2:	02900513          	li	a0,41
    80008ad6:	7e2110ef          	jal	8001a2b8 <putchar>
    80008ada:	4529                	li	a0,10
    80008adc:	7dc110ef          	jal	8001a2b8 <putchar>
    80008ae0:	00090c63          	beqz	s2,80008af8 <tinst_tests+0x12b0>
    80008ae4:	00144783          	lbu	a5,1(s0)
    80008ae8:	c799                	beqz	a5,80008af6 <tinst_tests+0x12ae>
    80008aea:	6418                	ld	a4,8(s0)
    80008aec:	47bd                	li	a5,15
    80008aee:	00f71463          	bne	a4,a5,80008af6 <tinst_tests+0x12ae>
    80008af2:	64d0106f          	j	8000a93e <tinst_tests+0x30f6>
    80008af6:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008af8:	0ff0000f          	fence
    80008afc:	4785                	li	a5,1
    80008afe:	00f41023          	sh	a5,0(s0)
    80008b02:	00034797          	auipc	a5,0x34
    80008b06:	5407b323          	sd	zero,1350(a5) # 8003d048 <excpt+0x38>
    80008b0a:	0ff0000f          	fence
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    80008b0e:	400197b7          	lui	a5,0x40019
    80008b12:	078a                	sll	a5,a5,0x2
    80008b14:	6097b4af          	amoand.d	s1,s1,(a5)
    value = amoand_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    80008b18:	00016617          	auipc	a2,0x16
    80008b1c:	3e860613          	add	a2,a2,1000 # 8001ef00 <__func__.1+0x2258>
    80008b20:	08200593          	li	a1,130
    80008b24:	00014517          	auipc	a0,0x14
    80008b28:	48450513          	add	a0,a0,1156 # 8001cfa8 <__func__.1+0x300>
    80008b2c:	0bb120ef          	jal	8001b3e6 <printf>
    80008b30:	00144783          	lbu	a5,1(s0)
    80008b34:	e399                	bnez	a5,80008b3a <tinst_tests+0x12f2>
    80008b36:	24e0106f          	j	80009d84 <tinst_tests+0x253c>
    80008b3a:	6418                	ld	a4,8(s0)
    80008b3c:	47bd                	li	a5,15
    80008b3e:	00014597          	auipc	a1,0x14
    80008b42:	44258593          	add	a1,a1,1090 # 8001cf80 <__func__.1+0x2d8>
    80008b46:	00f71463          	bne	a4,a5,80008b4e <tinst_tests+0x1306>
    80008b4a:	2780206f          	j	8000adc2 <tinst_tests+0x357a>
    80008b4e:	00014517          	auipc	a0,0x14
    80008b52:	47250513          	add	a0,a0,1138 # 8001cfc0 <__func__.1+0x318>
    80008b56:	091120ef          	jal	8001b3e6 <printf>
    80008b5a:	00144783          	lbu	a5,1(s0)
    80008b5e:	c799                	beqz	a5,80008b6c <tinst_tests+0x1324>
    80008b60:	6418                	ld	a4,8(s0)
    80008b62:	47bd                	li	a5,15
    80008b64:	00f71463          	bne	a4,a5,80008b6c <tinst_tests+0x1324>
    80008b68:	6cb0106f          	j	8000aa32 <tinst_tests+0x31ea>
    80008b6c:	00014517          	auipc	a0,0x14
    80008b70:	45c50513          	add	a0,a0,1116 # 8001cfc8 <__func__.1+0x320>
    80008b74:	073120ef          	jal	8001b3e6 <printf>
    80008b78:	02900513          	li	a0,41
    80008b7c:	73c110ef          	jal	8001a2b8 <putchar>
    80008b80:	4529                	li	a0,10
    80008b82:	736110ef          	jal	8001a2b8 <putchar>
    80008b86:	00090c63          	beqz	s2,80008b9e <tinst_tests+0x1356>
    80008b8a:	00144783          	lbu	a5,1(s0)
    80008b8e:	c799                	beqz	a5,80008b9c <tinst_tests+0x1354>
    80008b90:	6418                	ld	a4,8(s0)
    80008b92:	47bd                	li	a5,15
    80008b94:	00f71463          	bne	a4,a5,80008b9c <tinst_tests+0x1354>
    80008b98:	5f10106f          	j	8000a988 <tinst_tests+0x3140>
    80008b9c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008b9e:	0ff0000f          	fence
    80008ba2:	4785                	li	a5,1
    80008ba4:	00f41023          	sh	a5,0(s0)
    80008ba8:	00034797          	auipc	a5,0x34
    80008bac:	4a07b023          	sd	zero,1184(a5) # 8003d048 <excpt+0x38>
    80008bb0:	0ff0000f          	fence
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    80008bb4:	400197b7          	lui	a5,0x40019
    80008bb8:	078a                	sll	a5,a5,0x2
    80008bba:	4097b4af          	amoor.d	s1,s1,(a5)
    value = amoor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    80008bbe:	00016617          	auipc	a2,0x16
    80008bc2:	38260613          	add	a2,a2,898 # 8001ef40 <__func__.1+0x2298>
    80008bc6:	08200593          	li	a1,130
    80008bca:	00014517          	auipc	a0,0x14
    80008bce:	3de50513          	add	a0,a0,990 # 8001cfa8 <__func__.1+0x300>
    80008bd2:	015120ef          	jal	8001b3e6 <printf>
    80008bd6:	00144783          	lbu	a5,1(s0)
    80008bda:	e399                	bnez	a5,80008be0 <tinst_tests+0x1398>
    80008bdc:	2440106f          	j	80009e20 <tinst_tests+0x25d8>
    80008be0:	6418                	ld	a4,8(s0)
    80008be2:	47bd                	li	a5,15
    80008be4:	00014597          	auipc	a1,0x14
    80008be8:	39c58593          	add	a1,a1,924 # 8001cf80 <__func__.1+0x2d8>
    80008bec:	00f71463          	bne	a4,a5,80008bf4 <tinst_tests+0x13ac>
    80008bf0:	2320206f          	j	8000ae22 <tinst_tests+0x35da>
    80008bf4:	00014517          	auipc	a0,0x14
    80008bf8:	3cc50513          	add	a0,a0,972 # 8001cfc0 <__func__.1+0x318>
    80008bfc:	7ea120ef          	jal	8001b3e6 <printf>
    80008c00:	00144783          	lbu	a5,1(s0)
    80008c04:	c799                	beqz	a5,80008c12 <tinst_tests+0x13ca>
    80008c06:	6418                	ld	a4,8(s0)
    80008c08:	47bd                	li	a5,15
    80008c0a:	00f71463          	bne	a4,a5,80008c12 <tinst_tests+0x13ca>
    80008c0e:	6cd0106f          	j	8000aada <tinst_tests+0x3292>
    80008c12:	00014517          	auipc	a0,0x14
    80008c16:	3b650513          	add	a0,a0,950 # 8001cfc8 <__func__.1+0x320>
    80008c1a:	7cc120ef          	jal	8001b3e6 <printf>
    80008c1e:	02900513          	li	a0,41
    80008c22:	696110ef          	jal	8001a2b8 <putchar>
    80008c26:	4529                	li	a0,10
    80008c28:	690110ef          	jal	8001a2b8 <putchar>
    80008c2c:	00090863          	beqz	s2,80008c3c <tinst_tests+0x13f4>
    80008c30:	00144783          	lbu	a5,1(s0)
    80008c34:	c399                	beqz	a5,80008c3a <tinst_tests+0x13f2>
    80008c36:	6a00106f          	j	8000a2d6 <tinst_tests+0x2a8e>
    80008c3a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008c3c:	0ff0000f          	fence
    80008c40:	4785                	li	a5,1
    80008c42:	00f41023          	sh	a5,0(s0)
    80008c46:	00034797          	auipc	a5,0x34
    80008c4a:	4007b123          	sd	zero,1026(a5) # 8003d048 <excpt+0x38>
    80008c4e:	0ff0000f          	fence
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    80008c52:	400197b7          	lui	a5,0x40019
    80008c56:	078a                	sll	a5,a5,0x2
    80008c58:	8097b4af          	amomin.d	s1,s1,(a5)
    value = amomin_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    80008c5c:	00016617          	auipc	a2,0x16
    80008c60:	32460613          	add	a2,a2,804 # 8001ef80 <__func__.1+0x22d8>
    80008c64:	08200593          	li	a1,130
    80008c68:	00014517          	auipc	a0,0x14
    80008c6c:	34050513          	add	a0,a0,832 # 8001cfa8 <__func__.1+0x300>
    80008c70:	776120ef          	jal	8001b3e6 <printf>
    80008c74:	00144783          	lbu	a5,1(s0)
    80008c78:	e399                	bnez	a5,80008c7e <tinst_tests+0x1436>
    80008c7a:	1b20106f          	j	80009e2c <tinst_tests+0x25e4>
    80008c7e:	6418                	ld	a4,8(s0)
    80008c80:	47bd                	li	a5,15
    80008c82:	00014597          	auipc	a1,0x14
    80008c86:	2fe58593          	add	a1,a1,766 # 8001cf80 <__func__.1+0x2d8>
    80008c8a:	00f71463          	bne	a4,a5,80008c92 <tinst_tests+0x144a>
    80008c8e:	1f40206f          	j	8000ae82 <tinst_tests+0x363a>
    80008c92:	00014517          	auipc	a0,0x14
    80008c96:	32e50513          	add	a0,a0,814 # 8001cfc0 <__func__.1+0x318>
    80008c9a:	74c120ef          	jal	8001b3e6 <printf>
    80008c9e:	00144783          	lbu	a5,1(s0)
    80008ca2:	c799                	beqz	a5,80008cb0 <tinst_tests+0x1468>
    80008ca4:	6418                	ld	a4,8(s0)
    80008ca6:	47bd                	li	a5,15
    80008ca8:	00f71463          	bne	a4,a5,80008cb0 <tinst_tests+0x1468>
    80008cac:	6d70106f          	j	8000ab82 <tinst_tests+0x333a>
    80008cb0:	00014517          	auipc	a0,0x14
    80008cb4:	31850513          	add	a0,a0,792 # 8001cfc8 <__func__.1+0x320>
    80008cb8:	72e120ef          	jal	8001b3e6 <printf>
    80008cbc:	02900513          	li	a0,41
    80008cc0:	5f8110ef          	jal	8001a2b8 <putchar>
    80008cc4:	4529                	li	a0,10
    80008cc6:	5f2110ef          	jal	8001a2b8 <putchar>
    80008cca:	00090863          	beqz	s2,80008cda <tinst_tests+0x1492>
    80008cce:	00144783          	lbu	a5,1(s0)
    80008cd2:	c399                	beqz	a5,80008cd8 <tinst_tests+0x1490>
    80008cd4:	6560106f          	j	8000a32a <tinst_tests+0x2ae2>
    80008cd8:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008cda:	0ff0000f          	fence
    80008cde:	4785                	li	a5,1
    80008ce0:	00f41023          	sh	a5,0(s0)
    80008ce4:	00034797          	auipc	a5,0x34
    80008ce8:	3607b223          	sd	zero,868(a5) # 8003d048 <excpt+0x38>
    80008cec:	0ff0000f          	fence
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    80008cf0:	400197b7          	lui	a5,0x40019
    80008cf4:	078a                	sll	a5,a5,0x2
    80008cf6:	a097b4af          	amomax.d	s1,s1,(a5)
    value = amomax_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    80008cfa:	00016617          	auipc	a2,0x16
    80008cfe:	2c660613          	add	a2,a2,710 # 8001efc0 <__func__.1+0x2318>
    80008d02:	08200593          	li	a1,130
    80008d06:	00014517          	auipc	a0,0x14
    80008d0a:	2a250513          	add	a0,a0,674 # 8001cfa8 <__func__.1+0x300>
    80008d0e:	6d8120ef          	jal	8001b3e6 <printf>
    80008d12:	00144783          	lbu	a5,1(s0)
    80008d16:	e399                	bnez	a5,80008d1c <tinst_tests+0x14d4>
    80008d18:	1200106f          	j	80009e38 <tinst_tests+0x25f0>
    80008d1c:	6418                	ld	a4,8(s0)
    80008d1e:	47bd                	li	a5,15
    80008d20:	00014597          	auipc	a1,0x14
    80008d24:	26058593          	add	a1,a1,608 # 8001cf80 <__func__.1+0x2d8>
    80008d28:	00f71463          	bne	a4,a5,80008d30 <tinst_tests+0x14e8>
    80008d2c:	1b60206f          	j	8000aee2 <tinst_tests+0x369a>
    80008d30:	00014517          	auipc	a0,0x14
    80008d34:	29050513          	add	a0,a0,656 # 8001cfc0 <__func__.1+0x318>
    80008d38:	6ae120ef          	jal	8001b3e6 <printf>
    80008d3c:	00144783          	lbu	a5,1(s0)
    80008d40:	c799                	beqz	a5,80008d4e <tinst_tests+0x1506>
    80008d42:	6418                	ld	a4,8(s0)
    80008d44:	47bd                	li	a5,15
    80008d46:	00f71463          	bne	a4,a5,80008d4e <tinst_tests+0x1506>
    80008d4a:	6e10106f          	j	8000ac2a <tinst_tests+0x33e2>
    80008d4e:	00014517          	auipc	a0,0x14
    80008d52:	27a50513          	add	a0,a0,634 # 8001cfc8 <__func__.1+0x320>
    80008d56:	690120ef          	jal	8001b3e6 <printf>
    80008d5a:	02900513          	li	a0,41
    80008d5e:	55a110ef          	jal	8001a2b8 <putchar>
    80008d62:	4529                	li	a0,10
    80008d64:	554110ef          	jal	8001a2b8 <putchar>
    80008d68:	00090863          	beqz	s2,80008d78 <tinst_tests+0x1530>
    80008d6c:	00144783          	lbu	a5,1(s0)
    80008d70:	c399                	beqz	a5,80008d76 <tinst_tests+0x152e>
    80008d72:	6380106f          	j	8000a3aa <tinst_tests+0x2b62>
    80008d76:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008d78:	0ff0000f          	fence
    80008d7c:	4785                	li	a5,1
    80008d7e:	00f41023          	sh	a5,0(s0)
    80008d82:	00034797          	auipc	a5,0x34
    80008d86:	2c07b323          	sd	zero,710(a5) # 8003d048 <excpt+0x38>
    80008d8a:	0ff0000f          	fence
AMO_INSTRUCTION(amominu_d, "amominu.d", uint64_t);
    80008d8e:	400197b7          	lui	a5,0x40019
    80008d92:	078a                	sll	a5,a5,0x2
    80008d94:	c097b4af          	amominu.d	s1,s1,(a5)
    value = amominu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    80008d98:	00016617          	auipc	a2,0x16
    80008d9c:	26860613          	add	a2,a2,616 # 8001f000 <__func__.1+0x2358>
    80008da0:	08200593          	li	a1,130
    80008da4:	00014517          	auipc	a0,0x14
    80008da8:	20450513          	add	a0,a0,516 # 8001cfa8 <__func__.1+0x300>
    80008dac:	63a120ef          	jal	8001b3e6 <printf>
    80008db0:	00144783          	lbu	a5,1(s0)
    80008db4:	e399                	bnez	a5,80008dba <tinst_tests+0x1572>
    80008db6:	08e0106f          	j	80009e44 <tinst_tests+0x25fc>
    80008dba:	6418                	ld	a4,8(s0)
    80008dbc:	47bd                	li	a5,15
    80008dbe:	00014597          	auipc	a1,0x14
    80008dc2:	1c258593          	add	a1,a1,450 # 8001cf80 <__func__.1+0x2d8>
    80008dc6:	00f71463          	bne	a4,a5,80008dce <tinst_tests+0x1586>
    80008dca:	1780206f          	j	8000af42 <tinst_tests+0x36fa>
    80008dce:	00014517          	auipc	a0,0x14
    80008dd2:	1f250513          	add	a0,a0,498 # 8001cfc0 <__func__.1+0x318>
    80008dd6:	610120ef          	jal	8001b3e6 <printf>
    80008dda:	00144783          	lbu	a5,1(s0)
    80008dde:	c799                	beqz	a5,80008dec <tinst_tests+0x15a4>
    80008de0:	6418                	ld	a4,8(s0)
    80008de2:	47bd                	li	a5,15
    80008de4:	00f71463          	bne	a4,a5,80008dec <tinst_tests+0x15a4>
    80008de8:	6eb0106f          	j	8000acd2 <tinst_tests+0x348a>
    80008dec:	00014517          	auipc	a0,0x14
    80008df0:	1dc50513          	add	a0,a0,476 # 8001cfc8 <__func__.1+0x320>
    80008df4:	5f2120ef          	jal	8001b3e6 <printf>
    80008df8:	02900513          	li	a0,41
    80008dfc:	4bc110ef          	jal	8001a2b8 <putchar>
    80008e00:	4529                	li	a0,10
    80008e02:	4b6110ef          	jal	8001a2b8 <putchar>
    80008e06:	00090863          	beqz	s2,80008e16 <tinst_tests+0x15ce>
    80008e0a:	00144783          	lbu	a5,1(s0)
    80008e0e:	c399                	beqz	a5,80008e14 <tinst_tests+0x15cc>
    80008e10:	5ee0106f          	j	8000a3fe <tinst_tests+0x2bb6>
    80008e14:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008e16:	0ff0000f          	fence
    80008e1a:	4785                	li	a5,1
    80008e1c:	00f41023          	sh	a5,0(s0)
    80008e20:	00034797          	auipc	a5,0x34
    80008e24:	2207b423          	sd	zero,552(a5) # 8003d048 <excpt+0x38>
    80008e28:	0ff0000f          	fence
AMO_INSTRUCTION(amomaxu_d, "amomaxu.d", uint64_t);
    80008e2c:	400197b7          	lui	a5,0x40019
    80008e30:	078a                	sll	a5,a5,0x2
    80008e32:	e097b4af          	amomaxu.d	s1,s1,(a5)
    value = amomaxu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    80008e36:	00016617          	auipc	a2,0x16
    80008e3a:	20a60613          	add	a2,a2,522 # 8001f040 <__func__.1+0x2398>
    80008e3e:	08200593          	li	a1,130
    80008e42:	00014517          	auipc	a0,0x14
    80008e46:	16650513          	add	a0,a0,358 # 8001cfa8 <__func__.1+0x300>
    80008e4a:	59c120ef          	jal	8001b3e6 <printf>
    80008e4e:	00144783          	lbu	a5,1(s0)
    80008e52:	e399                	bnez	a5,80008e58 <tinst_tests+0x1610>
    80008e54:	0420106f          	j	80009e96 <tinst_tests+0x264e>
    80008e58:	6418                	ld	a4,8(s0)
    80008e5a:	47bd                	li	a5,15
    80008e5c:	00014597          	auipc	a1,0x14
    80008e60:	12458593          	add	a1,a1,292 # 8001cf80 <__func__.1+0x2d8>
    80008e64:	00f71463          	bne	a4,a5,80008e6c <tinst_tests+0x1624>
    80008e68:	13a0206f          	j	8000afa2 <tinst_tests+0x375a>
    80008e6c:	00014517          	auipc	a0,0x14
    80008e70:	15450513          	add	a0,a0,340 # 8001cfc0 <__func__.1+0x318>
    80008e74:	572120ef          	jal	8001b3e6 <printf>
    80008e78:	00144783          	lbu	a5,1(s0)
    80008e7c:	c799                	beqz	a5,80008e8a <tinst_tests+0x1642>
    80008e7e:	6418                	ld	a4,8(s0)
    80008e80:	47bd                	li	a5,15
    80008e82:	00f71463          	bne	a4,a5,80008e8a <tinst_tests+0x1642>
    80008e86:	6f50106f          	j	8000ad7a <tinst_tests+0x3532>
    80008e8a:	00014517          	auipc	a0,0x14
    80008e8e:	13e50513          	add	a0,a0,318 # 8001cfc8 <__func__.1+0x320>
    80008e92:	554120ef          	jal	8001b3e6 <printf>
    80008e96:	02900513          	li	a0,41
    80008e9a:	41e110ef          	jal	8001a2b8 <putchar>
    80008e9e:	4529                	li	a0,10
    80008ea0:	418110ef          	jal	8001a2b8 <putchar>
    80008ea4:	04090e63          	beqz	s2,80008f00 <tinst_tests+0x16b8>
    80008ea8:	00144483          	lbu	s1,1(s0)
    80008eac:	c8b9                	beqz	s1,80008f02 <tinst_tests+0x16ba>
    80008eae:	6418                	ld	a4,8(s0)
    80008eb0:	47bd                	li	a5,15
    80008eb2:	04f71763          	bne	a4,a5,80008f00 <tinst_tests+0x16b8>
    80008eb6:	701c                	ld	a5,32(s0)
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_END();
    80008eb8:	00014597          	auipc	a1,0x14
    80008ebc:	0b858593          	add	a1,a1,184 # 8001cf70 <__func__.1+0x2c8>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    80008ec0:	c7a9                	beqz	a5,80008f0a <tinst_tests+0x16c2>
    80008ec2:	6814                	ld	a3,16(s0)

static inline uint32_t read_instruction(uintptr_t addr) {

    uint32_t instruction = 0;

    if((addr & 0b1) != 0) {
    80008ec4:	0016f713          	and	a4,a3,1
    80008ec8:	0a071ae3          	bnez	a4,8000977c <tinst_tests+0x1f34>
        ERROR("trying to read unaligned instruction (%s, %d)", __func__, __LINE__);
    }

    instruction = *((uint16_t*)addr);
    80008ecc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80008ed0:	460d                	li	a2,3
    80008ed2:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    80008ed6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80008ed8:	00c59863          	bne	a1,a2,80008ee8 <tinst_tests+0x16a0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80008edc:	0026d683          	lhu	a3,2(a3)
    80008ee0:	0106969b          	sllw	a3,a3,0x10
    80008ee4:	8f55                	or	a4,a4,a3
    80008ee6:	2701                	sext.w	a4,a4
    80008ee8:	1702                	sll	a4,a4,0x20
    80008eea:	fff086b7          	lui	a3,0xfff08
    80008eee:	9301                	srl	a4,a4,0x20
    80008ef0:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80008ef2:	8f75                	and	a4,a4,a3
    TEST_END();
    80008ef4:	00014597          	auipc	a1,0x14
    80008ef8:	07c58593          	add	a1,a1,124 # 8001cf70 <__func__.1+0x2c8>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    80008efc:	00e78763          	beq	a5,a4,80008f0a <tinst_tests+0x16c2>
    80008f00:	4481                	li	s1,0
    TEST_END();
    80008f02:	00014597          	auipc	a1,0x14
    80008f06:	07e58593          	add	a1,a1,126 # 8001cf80 <__func__.1+0x2d8>
    80008f0a:	00014517          	auipc	a0,0x14
    80008f0e:	11e50513          	add	a0,a0,286 # 8001d028 <__func__.1+0x380>
    80008f12:	4d4120ef          	jal	8001b3e6 <printf>
    80008f16:	4511                	li	a0,4
    80008f18:	bc7f70ef          	jal	80000ade <goto_priv>
    80008f1c:	c0af80ef          	jal	80001326 <reset_state>
}
    80008f20:	70a2                	ld	ra,40(sp)
    80008f22:	7402                	ld	s0,32(sp)
    80008f24:	6942                	ld	s2,16(sp)
    80008f26:	69a2                	ld	s3,8(sp)
    80008f28:	8526                	mv	a0,s1
    80008f2a:	64e2                	ld	s1,24(sp)
    80008f2c:	6145                	add	sp,sp,48
    80008f2e:	8082                	ret
    TEST_ASSERT("correct tinst when executing a lb which results in a lpf",         
    80008f30:	00014597          	auipc	a1,0x14
    80008f34:	05058593          	add	a1,a1,80 # 8001cf80 <__func__.1+0x2d8>
    80008f38:	99ffe06f          	j	800078d6 <tinst_tests+0x8e>
    80008f3c:	6418                	ld	a4,8(s0)
    80008f3e:	47b5                	li	a5,13
    80008f40:	4901                	li	s2,0
    80008f42:	00f70463          	beq	a4,a5,80008f4a <tinst_tests+0x1702>
    80008f46:	9d5fe06f          	j	8000791a <tinst_tests+0xd2>
    80008f4a:	7018                	ld	a4,32(s0)
    80008f4c:	4905                	li	s2,1
    80008f4e:	e319                	bnez	a4,80008f54 <tinst_tests+0x170c>
    80008f50:	9cbfe06f          	j	8000791a <tinst_tests+0xd2>
    80008f54:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80008f56:	0016f793          	and	a5,a3,1
    80008f5a:	020791e3          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80008f5e:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80008f62:	460d                	li	a2,3
    80008f64:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80008f68:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80008f6a:	00c59863          	bne	a1,a2,80008f7a <tinst_tests+0x1732>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80008f6e:	0026d683          	lhu	a3,2(a3)
    80008f72:	0106969b          	sllw	a3,a3,0x10
    80008f76:	8fd5                	or	a5,a5,a3
    80008f78:	2781                	sext.w	a5,a5
    80008f7a:	03179913          	sll	s2,a5,0x31
    80008f7e:	03195913          	srl	s2,s2,0x31
    80008f82:	40e90933          	sub	s2,s2,a4
    80008f86:	00193913          	seqz	s2,s2
    80008f8a:	991fe06f          	j	8000791a <tinst_tests+0xd2>
    80008f8e:	7018                	ld	a4,32(s0)
    80008f90:	e319                	bnez	a4,80008f96 <tinst_tests+0x174e>
    80008f92:	977fe06f          	j	80007908 <tinst_tests+0xc0>
    80008f96:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80008f98:	0016f793          	and	a5,a3,1
    80008f9c:	7e079063          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80008fa0:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80008fa4:	460d                	li	a2,3
    80008fa6:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80008faa:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80008fac:	00c59863          	bne	a1,a2,80008fbc <tinst_tests+0x1774>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80008fb0:	0026d683          	lhu	a3,2(a3)
    80008fb4:	0106969b          	sllw	a3,a3,0x10
    80008fb8:	8fd5                	or	a5,a5,a3
    80008fba:	2781                	sext.w	a5,a5
    80008fbc:	17c6                	sll	a5,a5,0x31
    80008fbe:	93c5                	srl	a5,a5,0x31
    80008fc0:	00f70463          	beq	a4,a5,80008fc8 <tinst_tests+0x1780>
    80008fc4:	931fe06f          	j	800078f4 <tinst_tests+0xac>
    80008fc8:	941fe06f          	j	80007908 <tinst_tests+0xc0>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    80008fcc:	00014597          	auipc	a1,0x14
    80008fd0:	fb458593          	add	a1,a1,-76 # 8001cf80 <__func__.1+0x2d8>
    80008fd4:	99dfe06f          	j	80007970 <tinst_tests+0x128>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    80008fd8:	00014597          	auipc	a1,0x14
    80008fdc:	fa858593          	add	a1,a1,-88 # 8001cf80 <__func__.1+0x2d8>
    80008fe0:	a37fe06f          	j	80007a16 <tinst_tests+0x1ce>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    80008fe4:	00014597          	auipc	a1,0x14
    80008fe8:	f9c58593          	add	a1,a1,-100 # 8001cf80 <__func__.1+0x2d8>
    80008fec:	ad1fe06f          	j	80007abc <tinst_tests+0x274>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    80008ff0:	00014597          	auipc	a1,0x14
    80008ff4:	f9058593          	add	a1,a1,-112 # 8001cf80 <__func__.1+0x2d8>
    80008ff8:	b6bfe06f          	j	80007b62 <tinst_tests+0x31a>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    80008ffc:	00014597          	auipc	a1,0x14
    80009000:	f8458593          	add	a1,a1,-124 # 8001cf80 <__func__.1+0x2d8>
    80009004:	bfdfe06f          	j	80007c00 <tinst_tests+0x3b8>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    80009008:	00014597          	auipc	a1,0x14
    8000900c:	f7858593          	add	a1,a1,-136 # 8001cf80 <__func__.1+0x2d8>
    80009010:	c8ffe06f          	j	80007c9e <tinst_tests+0x456>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    80009014:	00014597          	auipc	a1,0x14
    80009018:	f6c58593          	add	a1,a1,-148 # 8001cf80 <__func__.1+0x2d8>
    8000901c:	d23fe06f          	j	80007d3e <tinst_tests+0x4f6>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    80009020:	00014597          	auipc	a1,0x14
    80009024:	f6058593          	add	a1,a1,-160 # 8001cf80 <__func__.1+0x2d8>
    80009028:	dbbfe06f          	j	80007de2 <tinst_tests+0x59a>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    8000902c:	00014597          	auipc	a1,0x14
    80009030:	f5458593          	add	a1,a1,-172 # 8001cf80 <__func__.1+0x2d8>
    80009034:	e55fe06f          	j	80007e88 <tinst_tests+0x640>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    80009038:	00014597          	auipc	a1,0x14
    8000903c:	f4858593          	add	a1,a1,-184 # 8001cf80 <__func__.1+0x2d8>
    80009040:	ef1fe06f          	j	80007f30 <tinst_tests+0x6e8>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    80009044:	00014597          	auipc	a1,0x14
    80009048:	f3c58593          	add	a1,a1,-196 # 8001cf80 <__func__.1+0x2d8>
    8000904c:	9faff06f          	j	80008246 <tinst_tests+0x9fe>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    80009050:	00014597          	auipc	a1,0x14
    80009054:	f3058593          	add	a1,a1,-208 # 8001cf80 <__func__.1+0x2d8>
    80009058:	a94ff06f          	j	800082ec <tinst_tests+0xaa4>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    8000905c:	7018                	ld	a4,32(s0)
    8000905e:	e319                	bnez	a4,80009064 <tinst_tests+0x181c>
    80009060:	943fe06f          	j	800079a2 <tinst_tests+0x15a>
    80009064:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009066:	0016f793          	and	a5,a3,1
    8000906a:	70079963          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000906e:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009072:	460d                	li	a2,3
    80009074:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009078:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000907a:	00c59863          	bne	a1,a2,8000908a <tinst_tests+0x1842>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000907e:	0026d683          	lhu	a3,2(a3)
    80009082:	0106969b          	sllw	a3,a3,0x10
    80009086:	8fd5                	or	a5,a5,a3
    80009088:	2781                	sext.w	a5,a5
    8000908a:	17c6                	sll	a5,a5,0x31
    8000908c:	93c5                	srl	a5,a5,0x31
    8000908e:	00f70463          	beq	a4,a5,80009096 <tinst_tests+0x184e>
    80009092:	8fdfe06f          	j	8000798e <tinst_tests+0x146>
    80009096:	90dfe06f          	j	800079a2 <tinst_tests+0x15a>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    8000909a:	00014597          	auipc	a1,0x14
    8000909e:	ee658593          	add	a1,a1,-282 # 8001cf80 <__func__.1+0x2d8>
    800090a2:	aeeff06f          	j	80008390 <tinst_tests+0xb48>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    800090a6:	6418                	ld	a4,8(s0)
    800090a8:	47b5                	li	a5,13
    800090aa:	00f70463          	beq	a4,a5,800090b2 <tinst_tests+0x186a>
    800090ae:	afbfe06f          	j	80007ba8 <tinst_tests+0x360>
    800090b2:	7018                	ld	a4,32(s0)
    800090b4:	e319                	bnez	a4,800090ba <tinst_tests+0x1872>
    800090b6:	af5fe06f          	j	80007baa <tinst_tests+0x362>
    800090ba:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800090bc:	0016f793          	and	a5,a3,1
    800090c0:	6a079e63          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    800090c4:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800090c8:	460d                	li	a2,3
    800090ca:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    800090ce:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    800090d0:	00c59863          	bne	a1,a2,800090e0 <tinst_tests+0x1898>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800090d4:	0026d683          	lhu	a3,2(a3)
    800090d8:	0106969b          	sllw	a3,a3,0x10
    800090dc:	8fd5                	or	a5,a5,a3
    800090de:	2781                	sext.w	a5,a5
    800090e0:	17c6                	sll	a5,a5,0x31
    800090e2:	0317d913          	srl	s2,a5,0x31
    800090e6:	40e90933          	sub	s2,s2,a4
    800090ea:	00193913          	seqz	s2,s2
    800090ee:	abdfe06f          	j	80007baa <tinst_tests+0x362>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    800090f2:	6418                	ld	a4,8(s0)
    800090f4:	47bd                	li	a5,15
    800090f6:	00014597          	auipc	a1,0x14
    800090fa:	e8a58593          	add	a1,a1,-374 # 8001cf80 <__func__.1+0x2d8>
    800090fe:	b2f71563          	bne	a4,a5,80008428 <tinst_tests+0xbe0>
    80009102:	7018                	ld	a4,32(s0)
    80009104:	00014597          	auipc	a1,0x14
    80009108:	e6c58593          	add	a1,a1,-404 # 8001cf70 <__func__.1+0x2c8>
    8000910c:	b0070e63          	beqz	a4,80008428 <tinst_tests+0xbe0>
    80009110:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009112:	0016f793          	and	a5,a3,1
    80009116:	66079363          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000911a:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000911e:	460d                	li	a2,3
    80009120:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009124:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009126:	00c59863          	bne	a1,a2,80009136 <tinst_tests+0x18ee>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000912a:	0026d683          	lhu	a3,2(a3)
    8000912e:	0106969b          	sllw	a3,a3,0x10
    80009132:	8fd5                	or	a5,a5,a3
    80009134:	2781                	sext.w	a5,a5
    80009136:	1782                	sll	a5,a5,0x20
    80009138:	fff086b7          	lui	a3,0xfff08
    8000913c:	9381                	srl	a5,a5,0x20
    8000913e:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009140:	8ff5                	and	a5,a5,a3
    80009142:	00014597          	auipc	a1,0x14
    80009146:	e3e58593          	add	a1,a1,-450 # 8001cf80 <__func__.1+0x2d8>
    8000914a:	acf71f63          	bne	a4,a5,80008428 <tinst_tests+0xbe0>
    8000914e:	00014597          	auipc	a1,0x14
    80009152:	e2258593          	add	a1,a1,-478 # 8001cf70 <__func__.1+0x2c8>
    80009156:	ad2ff06f          	j	80008428 <tinst_tests+0xbe0>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    8000915a:	6418                	ld	a4,8(s0)
    8000915c:	47b5                	li	a5,13
    8000915e:	00f70463          	beq	a4,a5,80009166 <tinst_tests+0x191e>
    80009162:	ae5fe06f          	j	80007c46 <tinst_tests+0x3fe>
    80009166:	7018                	ld	a4,32(s0)
    80009168:	e319                	bnez	a4,8000916e <tinst_tests+0x1926>
    8000916a:	adffe06f          	j	80007c48 <tinst_tests+0x400>
    8000916e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009170:	0016f793          	and	a5,a3,1
    80009174:	60079463          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009178:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000917c:	460d                	li	a2,3
    8000917e:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009182:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009184:	00c59863          	bne	a1,a2,80009194 <tinst_tests+0x194c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009188:	0026d683          	lhu	a3,2(a3)
    8000918c:	0106969b          	sllw	a3,a3,0x10
    80009190:	8fd5                	or	a5,a5,a3
    80009192:	2781                	sext.w	a5,a5
    80009194:	17c6                	sll	a5,a5,0x31
    80009196:	0317d913          	srl	s2,a5,0x31
    8000919a:	40e90933          	sub	s2,s2,a4
    8000919e:	00193913          	seqz	s2,s2
    800091a2:	aa7fe06f          	j	80007c48 <tinst_tests+0x400>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    800091a6:	6418                	ld	a4,8(s0)
    800091a8:	47b5                	li	a5,13
    800091aa:	00f70463          	beq	a4,a5,800091b2 <tinst_tests+0x196a>
    800091ae:	b37fe06f          	j	80007ce4 <tinst_tests+0x49c>
    800091b2:	7018                	ld	a4,32(s0)
    800091b4:	e319                	bnez	a4,800091ba <tinst_tests+0x1972>
    800091b6:	b31fe06f          	j	80007ce6 <tinst_tests+0x49e>
    800091ba:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800091bc:	0016f793          	and	a5,a3,1
    800091c0:	5a079e63          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    800091c4:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800091c8:	460d                	li	a2,3
    800091ca:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    800091ce:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    800091d0:	00c59863          	bne	a1,a2,800091e0 <tinst_tests+0x1998>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800091d4:	0026d683          	lhu	a3,2(a3)
    800091d8:	0106969b          	sllw	a3,a3,0x10
    800091dc:	8fd5                	or	a5,a5,a3
    800091de:	2781                	sext.w	a5,a5
    800091e0:	17c6                	sll	a5,a5,0x31
    800091e2:	0317d913          	srl	s2,a5,0x31
    800091e6:	40e90933          	sub	s2,s2,a4
    800091ea:	00193913          	seqz	s2,s2
    800091ee:	af9fe06f          	j	80007ce6 <tinst_tests+0x49e>
    TEST_ASSERT("correct tinst when executing a lb which results in a lpf",         
    800091f2:	7018                	ld	a4,32(s0)
    800091f4:	00014597          	auipc	a1,0x14
    800091f8:	d7c58593          	add	a1,a1,-644 # 8001cf70 <__func__.1+0x2c8>
    800091fc:	e319                	bnez	a4,80009202 <tinst_tests+0x19ba>
    800091fe:	ed8fe06f          	j	800078d6 <tinst_tests+0x8e>
    80009202:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009204:	0016f793          	and	a5,a3,1
    80009208:	56079a63          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000920c:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009210:	460d                	li	a2,3
    80009212:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009216:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009218:	00c59863          	bne	a1,a2,80009228 <tinst_tests+0x19e0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000921c:	0026d683          	lhu	a3,2(a3)
    80009220:	0106969b          	sllw	a3,a3,0x10
    80009224:	8fd5                	or	a5,a5,a3
    80009226:	2781                	sext.w	a5,a5
    80009228:	17c6                	sll	a5,a5,0x31
    8000922a:	93c5                	srl	a5,a5,0x31
    8000922c:	00014597          	auipc	a1,0x14
    80009230:	d5458593          	add	a1,a1,-684 # 8001cf80 <__func__.1+0x2d8>
    80009234:	00f70463          	beq	a4,a5,8000923c <tinst_tests+0x19f4>
    80009238:	e9efe06f          	j	800078d6 <tinst_tests+0x8e>
    8000923c:	00014597          	auipc	a1,0x14
    80009240:	d3458593          	add	a1,a1,-716 # 8001cf70 <__func__.1+0x2c8>
    80009244:	e92fe06f          	j	800078d6 <tinst_tests+0x8e>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    80009248:	6418                	ld	a4,8(s0)
    8000924a:	47bd                	li	a5,15
    8000924c:	00f70463          	beq	a4,a5,80009254 <tinst_tests+0x1a0c>
    80009250:	b35fe06f          	j	80007d84 <tinst_tests+0x53c>
    80009254:	7018                	ld	a4,32(s0)
    80009256:	e319                	bnez	a4,8000925c <tinst_tests+0x1a14>
    80009258:	b2ffe06f          	j	80007d86 <tinst_tests+0x53e>
    8000925c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000925e:	0016f793          	and	a5,a3,1
    80009262:	50079d63          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009266:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000926a:	460d                	li	a2,3
    8000926c:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009270:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009272:	00c59863          	bne	a1,a2,80009282 <tinst_tests+0x1a3a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009276:	0026d683          	lhu	a3,2(a3)
    8000927a:	0106969b          	sllw	a3,a3,0x10
    8000927e:	8fd5                	or	a5,a5,a3
    80009280:	2781                	sext.w	a5,a5
    80009282:	01f076b7          	lui	a3,0x1f07
    80009286:	07f68693          	add	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000928a:	8ff5                	and	a5,a5,a3
    8000928c:	40e78933          	sub	s2,a5,a4
    80009290:	00193913          	seqz	s2,s2
    80009294:	af3fe06f          	j	80007d86 <tinst_tests+0x53e>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    80009298:	6418                	ld	a4,8(s0)
    8000929a:	47bd                	li	a5,15
    8000929c:	00f70463          	beq	a4,a5,800092a4 <tinst_tests+0x1a5c>
    800092a0:	b89fe06f          	j	80007e28 <tinst_tests+0x5e0>
    800092a4:	7018                	ld	a4,32(s0)
    800092a6:	e319                	bnez	a4,800092ac <tinst_tests+0x1a64>
    800092a8:	b83fe06f          	j	80007e2a <tinst_tests+0x5e2>
    800092ac:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800092ae:	0016f793          	and	a5,a3,1
    800092b2:	4c079563          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    800092b6:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800092ba:	460d                	li	a2,3
    800092bc:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    800092c0:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    800092c2:	00c59863          	bne	a1,a2,800092d2 <tinst_tests+0x1a8a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800092c6:	0026d683          	lhu	a3,2(a3)
    800092ca:	0106969b          	sllw	a3,a3,0x10
    800092ce:	8fd5                	or	a5,a5,a3
    800092d0:	2781                	sext.w	a5,a5
    800092d2:	01f076b7          	lui	a3,0x1f07
    800092d6:	07f68693          	add	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    800092da:	8ff5                	and	a5,a5,a3
    800092dc:	40e78933          	sub	s2,a5,a4
    800092e0:	00193913          	seqz	s2,s2
    800092e4:	b47fe06f          	j	80007e2a <tinst_tests+0x5e2>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    800092e8:	6418                	ld	a4,8(s0)
    800092ea:	47bd                	li	a5,15
    800092ec:	00f70463          	beq	a4,a5,800092f4 <tinst_tests+0x1aac>
    800092f0:	bdffe06f          	j	80007ece <tinst_tests+0x686>
    800092f4:	7018                	ld	a4,32(s0)
    800092f6:	e319                	bnez	a4,800092fc <tinst_tests+0x1ab4>
    800092f8:	bd9fe06f          	j	80007ed0 <tinst_tests+0x688>
    800092fc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800092fe:	0016f793          	and	a5,a3,1
    80009302:	46079d63          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009306:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000930a:	460d                	li	a2,3
    8000930c:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009310:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009312:	00c59863          	bne	a1,a2,80009322 <tinst_tests+0x1ada>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009316:	0026d683          	lhu	a3,2(a3)
    8000931a:	0106969b          	sllw	a3,a3,0x10
    8000931e:	8fd5                	or	a5,a5,a3
    80009320:	2781                	sext.w	a5,a5
    80009322:	01f076b7          	lui	a3,0x1f07
    80009326:	07f68693          	add	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000932a:	8ff5                	and	a5,a5,a3
    8000932c:	40e78933          	sub	s2,a5,a4
    80009330:	00193913          	seqz	s2,s2
    80009334:	b9dfe06f          	j	80007ed0 <tinst_tests+0x688>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    80009338:	6418                	ld	a4,8(s0)
    8000933a:	47bd                	li	a5,15
    8000933c:	00f70463          	beq	a4,a5,80009344 <tinst_tests+0x1afc>
    80009340:	c37fe06f          	j	80007f76 <tinst_tests+0x72e>
    80009344:	701c                	ld	a5,32(s0)
    80009346:	e399                	bnez	a5,8000934c <tinst_tests+0x1b04>
    80009348:	c31fe06f          	j	80007f78 <tinst_tests+0x730>
    8000934c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000934e:	0016f713          	and	a4,a3,1
    80009352:	42071563          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009356:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000935a:	460d                	li	a2,3
    8000935c:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    80009360:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009362:	00c59863          	bne	a1,a2,80009372 <tinst_tests+0x1b2a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009366:	0026d683          	lhu	a3,2(a3)
    8000936a:	0106969b          	sllw	a3,a3,0x10
    8000936e:	8f55                	or	a4,a4,a3
    80009370:	2701                	sext.w	a4,a4
    80009372:	01f076b7          	lui	a3,0x1f07
    80009376:	07f68693          	add	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000937a:	8f75                	and	a4,a4,a3
    8000937c:	40f70933          	sub	s2,a4,a5
    80009380:	00193913          	seqz	s2,s2
    80009384:	bf5fe06f          	j	80007f78 <tinst_tests+0x730>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80009388:	6418                	ld	a4,8(s0)
    8000938a:	47b5                	li	a5,13
    8000938c:	00f70463          	beq	a4,a5,80009394 <tinst_tests+0x1b4c>
    80009390:	c7ffe06f          	j	8000800e <tinst_tests+0x7c6>
    80009394:	7004                	ld	s1,32(s0)
    80009396:	e099                	bnez	s1,8000939c <tinst_tests+0x1b54>
    80009398:	c79fe06f          	j	80008010 <tinst_tests+0x7c8>
    8000939c:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000939e:	0017f713          	and	a4,a5,1
    800093a2:	3c071d63          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    800093a6:	0007d503          	lhu	a0,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    800093aa:	e9ff70ef          	jal	80001248 <expand_compressed_instruction>
    800093ae:	67a1                	lui	a5,0x8
    800093b0:	17f5                	add	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    800093b2:	00f57933          	and	s2,a0,a5
    800093b6:	1902                	sll	s2,s2,0x20
    800093b8:	02095913          	srl	s2,s2,0x20
    800093bc:	40990933          	sub	s2,s2,s1
    800093c0:	00193913          	seqz	s2,s2
    800093c4:	c4dfe06f          	j	80008010 <tinst_tests+0x7c8>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    800093c8:	6418                	ld	a4,8(s0)
    800093ca:	47b5                	li	a5,13
    800093cc:	00f70463          	beq	a4,a5,800093d4 <tinst_tests+0x1b8c>
    800093d0:	cd9fe06f          	j	800080a8 <tinst_tests+0x860>
    800093d4:	02043983          	ld	s3,32(s0)
    800093d8:	00099463          	bnez	s3,800093e0 <tinst_tests+0x1b98>
    800093dc:	ccffe06f          	j	800080aa <tinst_tests+0x862>
    800093e0:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    800093e2:	0017f713          	and	a4,a5,1
    800093e6:	38071b63          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    800093ea:	0007d503          	lhu	a0,0(a5)
    800093ee:	e5bf70ef          	jal	80001248 <expand_compressed_instruction>
    800093f2:	67a1                	lui	a5,0x8
    800093f4:	17f5                	add	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    800093f6:	00f57933          	and	s2,a0,a5
    800093fa:	1902                	sll	s2,s2,0x20
    800093fc:	02095913          	srl	s2,s2,0x20
    80009400:	41390933          	sub	s2,s2,s3
    80009404:	00193913          	seqz	s2,s2
    80009408:	ca3fe06f          	j	800080aa <tinst_tests+0x862>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    8000940c:	7018                	ld	a4,32(s0)
    8000940e:	e319                	bnez	a4,80009414 <tinst_tests+0x1bcc>
    80009410:	e69fe06f          	j	80008278 <tinst_tests+0xa30>
    80009414:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009416:	0016f793          	and	a5,a3,1
    8000941a:	36079163          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000941e:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009422:	460d                	li	a2,3
    80009424:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009428:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000942a:	00c59863          	bne	a1,a2,8000943a <tinst_tests+0x1bf2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000942e:	0026d683          	lhu	a3,2(a3)
    80009432:	0106969b          	sllw	a3,a3,0x10
    80009436:	8fd5                	or	a5,a5,a3
    80009438:	2781                	sext.w	a5,a5
    8000943a:	1782                	sll	a5,a5,0x20
    8000943c:	fff086b7          	lui	a3,0xfff08
    80009440:	9381                	srl	a5,a5,0x20
    80009442:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009444:	8ff5                	and	a5,a5,a3
    80009446:	00f70463          	beq	a4,a5,8000944e <tinst_tests+0x1c06>
    8000944a:	e1bfe06f          	j	80008264 <tinst_tests+0xa1c>
    8000944e:	e2bfe06f          	j	80008278 <tinst_tests+0xa30>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    80009452:	701c                	ld	a5,32(s0)
    80009454:	00014597          	auipc	a1,0x14
    80009458:	b1c58593          	add	a1,a1,-1252 # 8001cf70 <__func__.1+0x2c8>
    8000945c:	e399                	bnez	a5,80009462 <tinst_tests+0x1c1a>
    8000945e:	ad3fe06f          	j	80007f30 <tinst_tests+0x6e8>
    80009462:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009464:	0016f713          	and	a4,a3,1
    80009468:	30071a63          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000946c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009470:	460d                	li	a2,3
    80009472:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    80009476:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009478:	00c59863          	bne	a1,a2,80009488 <tinst_tests+0x1c40>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000947c:	0026d683          	lhu	a3,2(a3)
    80009480:	0106969b          	sllw	a3,a3,0x10
    80009484:	8f55                	or	a4,a4,a3
    80009486:	2701                	sext.w	a4,a4
    80009488:	01f076b7          	lui	a3,0x1f07
    8000948c:	07f68693          	add	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009490:	8f75                	and	a4,a4,a3
    80009492:	00014597          	auipc	a1,0x14
    80009496:	aee58593          	add	a1,a1,-1298 # 8001cf80 <__func__.1+0x2d8>
    8000949a:	00e78463          	beq	a5,a4,800094a2 <tinst_tests+0x1c5a>
    8000949e:	a93fe06f          	j	80007f30 <tinst_tests+0x6e8>
    800094a2:	00014597          	auipc	a1,0x14
    800094a6:	ace58593          	add	a1,a1,-1330 # 8001cf70 <__func__.1+0x2c8>
    800094aa:	a87fe06f          	j	80007f30 <tinst_tests+0x6e8>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    800094ae:	7018                	ld	a4,32(s0)
    800094b0:	e319                	bnez	a4,800094b6 <tinst_tests+0x1c6e>
    800094b2:	e6dfe06f          	j	8000831e <tinst_tests+0xad6>
    800094b6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800094b8:	0016f793          	and	a5,a3,1
    800094bc:	2c079063          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    800094c0:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800094c4:	460d                	li	a2,3
    800094c6:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    800094ca:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    800094cc:	00c59863          	bne	a1,a2,800094dc <tinst_tests+0x1c94>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800094d0:	0026d683          	lhu	a3,2(a3)
    800094d4:	0106969b          	sllw	a3,a3,0x10
    800094d8:	8fd5                	or	a5,a5,a3
    800094da:	2781                	sext.w	a5,a5
    800094dc:	1782                	sll	a5,a5,0x20
    800094de:	fff086b7          	lui	a3,0xfff08
    800094e2:	9381                	srl	a5,a5,0x20
    800094e4:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    800094e6:	8ff5                	and	a5,a5,a3
    800094e8:	00f70463          	beq	a4,a5,800094f0 <tinst_tests+0x1ca8>
    800094ec:	e1ffe06f          	j	8000830a <tinst_tests+0xac2>
    800094f0:	e2ffe06f          	j	8000831e <tinst_tests+0xad6>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    800094f4:	7004                	ld	s1,32(s0)
    800094f6:	c099                	beqz	s1,800094fc <tinst_tests+0x1cb4>
    800094f8:	0ea0106f          	j	8000a5e2 <tinst_tests+0x2d9a>
    800094fc:	00014597          	auipc	a1,0x14
    80009500:	a7458593          	add	a1,a1,-1420 # 8001cf70 <__func__.1+0x2c8>
    80009504:	ac5fe06f          	j	80007fc8 <tinst_tests+0x780>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    80009508:	701c                	ld	a5,32(s0)
    8000950a:	e399                	bnez	a5,80009510 <tinst_tests+0x1cc8>
    8000950c:	eb7fe06f          	j	800083c2 <tinst_tests+0xb7a>
    80009510:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009512:	0016f713          	and	a4,a3,1
    80009516:	26071363          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000951a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000951e:	460d                	li	a2,3
    80009520:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    80009524:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009526:	00c59863          	bne	a1,a2,80009536 <tinst_tests+0x1cee>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000952a:	0026d683          	lhu	a3,2(a3)
    8000952e:	0106969b          	sllw	a3,a3,0x10
    80009532:	8f55                	or	a4,a4,a3
    80009534:	2701                	sext.w	a4,a4
    80009536:	1702                	sll	a4,a4,0x20
    80009538:	fff086b7          	lui	a3,0xfff08
    8000953c:	9301                	srl	a4,a4,0x20
    8000953e:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009540:	8f75                	and	a4,a4,a3
    80009542:	00e78463          	beq	a5,a4,8000954a <tinst_tests+0x1d02>
    80009546:	e69fe06f          	j	800083ae <tinst_tests+0xb66>
    8000954a:	e79fe06f          	j	800083c2 <tinst_tests+0xb7a>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    8000954e:	02043983          	ld	s3,32(s0)
    80009552:	00098463          	beqz	s3,8000955a <tinst_tests+0x1d12>
    80009556:	0bc0106f          	j	8000a612 <tinst_tests+0x2dca>
    8000955a:	00014597          	auipc	a1,0x14
    8000955e:	a1658593          	add	a1,a1,-1514 # 8001cf70 <__func__.1+0x2c8>
    80009562:	b01fe06f          	j	80008062 <tinst_tests+0x81a>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80009566:	02043983          	ld	s3,32(s0)
    8000956a:	00098463          	beqz	s3,80009572 <tinst_tests+0x1d2a>
    8000956e:	11c0106f          	j	8000a68a <tinst_tests+0x2e42>
    80009572:	00014597          	auipc	a1,0x14
    80009576:	9fe58593          	add	a1,a1,-1538 # 8001cf70 <__func__.1+0x2c8>
    8000957a:	b83fe06f          	j	800080fc <tinst_tests+0x8b4>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000957e:	7004                	ld	s1,32(s0)
    80009580:	c099                	beqz	s1,80009586 <tinst_tests+0x1d3e>
    80009582:	1840106f          	j	8000a706 <tinst_tests+0x2ebe>
    80009586:	00014597          	auipc	a1,0x14
    8000958a:	9ea58593          	add	a1,a1,-1558 # 8001cf70 <__func__.1+0x2c8>
    8000958e:	c11fe06f          	j	8000819e <tinst_tests+0x956>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    80009592:	7018                	ld	a4,32(s0)
    80009594:	e319                	bnez	a4,8000959a <tinst_tests+0x1d52>
    80009596:	c2afe06f          	j	800079c0 <tinst_tests+0x178>
    8000959a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000959c:	0016f793          	and	a5,a3,1
    800095a0:	1c079e63          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    800095a4:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800095a8:	460d                	li	a2,3
    800095aa:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    800095ae:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    800095b0:	00c59863          	bne	a1,a2,800095c0 <tinst_tests+0x1d78>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800095b4:	0026d683          	lhu	a3,2(a3)
    800095b8:	0106969b          	sllw	a3,a3,0x10
    800095bc:	8fd5                	or	a5,a5,a3
    800095be:	2781                	sext.w	a5,a5
    800095c0:	03179913          	sll	s2,a5,0x31
    800095c4:	03195913          	srl	s2,s2,0x31
    800095c8:	40e90933          	sub	s2,s2,a4
    800095cc:	00193913          	seqz	s2,s2
    800095d0:	bf0fe06f          	j	800079c0 <tinst_tests+0x178>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    800095d4:	701c                	ld	a5,32(s0)
    800095d6:	00014597          	auipc	a1,0x14
    800095da:	99a58593          	add	a1,a1,-1638 # 8001cf70 <__func__.1+0x2c8>
    800095de:	e399                	bnez	a5,800095e4 <tinst_tests+0x1d9c>
    800095e0:	c67fe06f          	j	80008246 <tinst_tests+0x9fe>
    800095e4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800095e6:	0016f713          	and	a4,a3,1
    800095ea:	18071963          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    800095ee:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800095f2:	460d                	li	a2,3
    800095f4:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    800095f8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800095fa:	00c59863          	bne	a1,a2,8000960a <tinst_tests+0x1dc2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800095fe:	0026d683          	lhu	a3,2(a3)
    80009602:	0106969b          	sllw	a3,a3,0x10
    80009606:	8f55                	or	a4,a4,a3
    80009608:	2701                	sext.w	a4,a4
    8000960a:	1702                	sll	a4,a4,0x20
    8000960c:	fff086b7          	lui	a3,0xfff08
    80009610:	9301                	srl	a4,a4,0x20
    80009612:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009614:	8f75                	and	a4,a4,a3
    80009616:	00014597          	auipc	a1,0x14
    8000961a:	96a58593          	add	a1,a1,-1686 # 8001cf80 <__func__.1+0x2d8>
    8000961e:	00e78463          	beq	a5,a4,80009626 <tinst_tests+0x1dde>
    80009622:	c25fe06f          	j	80008246 <tinst_tests+0x9fe>
    80009626:	00014597          	auipc	a1,0x14
    8000962a:	94a58593          	add	a1,a1,-1718 # 8001cf70 <__func__.1+0x2c8>
    8000962e:	c19fe06f          	j	80008246 <tinst_tests+0x9fe>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    80009632:	7018                	ld	a4,32(s0)
    80009634:	e319                	bnez	a4,8000963a <tinst_tests+0x1df2>
    80009636:	c30fe06f          	j	80007a66 <tinst_tests+0x21e>
    8000963a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000963c:	0016f793          	and	a5,a3,1
    80009640:	12079e63          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009644:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009648:	460d                	li	a2,3
    8000964a:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000964e:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009650:	00c59863          	bne	a1,a2,80009660 <tinst_tests+0x1e18>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009654:	0026d683          	lhu	a3,2(a3)
    80009658:	0106969b          	sllw	a3,a3,0x10
    8000965c:	8fd5                	or	a5,a5,a3
    8000965e:	2781                	sext.w	a5,a5
    80009660:	03179913          	sll	s2,a5,0x31
    80009664:	03195913          	srl	s2,s2,0x31
    80009668:	40e90933          	sub	s2,s2,a4
    8000966c:	00193913          	seqz	s2,s2
    80009670:	bf6fe06f          	j	80007a66 <tinst_tests+0x21e>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    80009674:	701c                	ld	a5,32(s0)
    80009676:	00014597          	auipc	a1,0x14
    8000967a:	8fa58593          	add	a1,a1,-1798 # 8001cf70 <__func__.1+0x2c8>
    8000967e:	e399                	bnez	a5,80009684 <tinst_tests+0x1e3c>
    80009680:	c6dfe06f          	j	800082ec <tinst_tests+0xaa4>
    80009684:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009686:	0016f713          	and	a4,a3,1
    8000968a:	eb6d                	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000968c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009690:	460d                	li	a2,3
    80009692:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    80009696:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009698:	00c59863          	bne	a1,a2,800096a8 <tinst_tests+0x1e60>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000969c:	0026d683          	lhu	a3,2(a3)
    800096a0:	0106969b          	sllw	a3,a3,0x10
    800096a4:	8f55                	or	a4,a4,a3
    800096a6:	2701                	sext.w	a4,a4
    800096a8:	1702                	sll	a4,a4,0x20
    800096aa:	fff086b7          	lui	a3,0xfff08
    800096ae:	9301                	srl	a4,a4,0x20
    800096b0:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    800096b2:	8f75                	and	a4,a4,a3
    800096b4:	00014597          	auipc	a1,0x14
    800096b8:	8cc58593          	add	a1,a1,-1844 # 8001cf80 <__func__.1+0x2d8>
    800096bc:	00e78463          	beq	a5,a4,800096c4 <tinst_tests+0x1e7c>
    800096c0:	c2dfe06f          	j	800082ec <tinst_tests+0xaa4>
    800096c4:	00014597          	auipc	a1,0x14
    800096c8:	8ac58593          	add	a1,a1,-1876 # 8001cf70 <__func__.1+0x2c8>
    800096cc:	c21fe06f          	j	800082ec <tinst_tests+0xaa4>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    800096d0:	7018                	ld	a4,32(s0)
    800096d2:	e319                	bnez	a4,800096d8 <tinst_tests+0x1e90>
    800096d4:	c38fe06f          	j	80007b0c <tinst_tests+0x2c4>
    800096d8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800096da:	0016f793          	and	a5,a3,1
    800096de:	efd9                	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    800096e0:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800096e4:	460d                	li	a2,3
    800096e6:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    800096ea:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    800096ec:	00c59863          	bne	a1,a2,800096fc <tinst_tests+0x1eb4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800096f0:	0026d683          	lhu	a3,2(a3)
    800096f4:	0106969b          	sllw	a3,a3,0x10
    800096f8:	8fd5                	or	a5,a5,a3
    800096fa:	2781                	sext.w	a5,a5
    800096fc:	17c6                	sll	a5,a5,0x31
    800096fe:	0317d913          	srl	s2,a5,0x31
    80009702:	40e90933          	sub	s2,s2,a4
    80009706:	00193913          	seqz	s2,s2
    8000970a:	c02fe06f          	j	80007b0c <tinst_tests+0x2c4>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    8000970e:	7018                	ld	a4,32(s0)
    80009710:	00014597          	auipc	a1,0x14
    80009714:	86058593          	add	a1,a1,-1952 # 8001cf70 <__func__.1+0x2c8>
    80009718:	e319                	bnez	a4,8000971e <tinst_tests+0x1ed6>
    8000971a:	c77fe06f          	j	80008390 <tinst_tests+0xb48>
    8000971e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009720:	0016f793          	and	a5,a3,1
    80009724:	efa1                	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009726:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000972a:	460d                	li	a2,3
    8000972c:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009730:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009732:	00c59863          	bne	a1,a2,80009742 <tinst_tests+0x1efa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009736:	0026d683          	lhu	a3,2(a3)
    8000973a:	0106969b          	sllw	a3,a3,0x10
    8000973e:	8fd5                	or	a5,a5,a3
    80009740:	2781                	sext.w	a5,a5
    80009742:	1782                	sll	a5,a5,0x20
    80009744:	fff086b7          	lui	a3,0xfff08
    80009748:	9381                	srl	a5,a5,0x20
    8000974a:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000974c:	8ff5                	and	a5,a5,a3
    8000974e:	00014597          	auipc	a1,0x14
    80009752:	83258593          	add	a1,a1,-1998 # 8001cf80 <__func__.1+0x2d8>
    80009756:	00f70463          	beq	a4,a5,8000975e <tinst_tests+0x1f16>
    8000975a:	c37fe06f          	j	80008390 <tinst_tests+0xb48>
    8000975e:	00014597          	auipc	a1,0x14
    80009762:	81258593          	add	a1,a1,-2030 # 8001cf70 <__func__.1+0x2c8>
    80009766:	c2bfe06f          	j	80008390 <tinst_tests+0xb48>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    8000976a:	7018                	ld	a4,32(s0)
    8000976c:	e319                	bnez	a4,80009772 <tinst_tests+0x1f2a>
    8000976e:	adafe06f          	j	80007a48 <tinst_tests+0x200>
    80009772:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009774:	0016f793          	and	a5,a3,1
    80009778:	400783e3          	beqz	a5,8000a37e <tinst_tests+0x2b36>
        ERROR("trying to read unaligned instruction (%s, %d)", __func__, __LINE__);
    8000977c:	11400613          	li	a2,276
    80009780:	00012597          	auipc	a1,0x12
    80009784:	70858593          	add	a1,a1,1800 # 8001be88 <__func__.0>
    80009788:	00015517          	auipc	a0,0x15
    8000978c:	07850513          	add	a0,a0,120 # 8001e800 <__func__.1+0x1b58>
    80009790:	457110ef          	jal	8001b3e6 <printf>
    80009794:	11400613          	li	a2,276
    80009798:	00012597          	auipc	a1,0x12
    8000979c:	6f058593          	add	a1,a1,1776 # 8001be88 <__func__.0>
    800097a0:	00014517          	auipc	a0,0x14
    800097a4:	97850513          	add	a0,a0,-1672 # 8001d118 <__func__.1+0x470>
    800097a8:	43f110ef          	jal	8001b3e6 <printf>
    800097ac:	4501                	li	a0,0
    800097ae:	0d7110ef          	jal	8001b084 <exit>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    800097b2:	7018                	ld	a4,32(s0)
    800097b4:	e319                	bnez	a4,800097ba <tinst_tests+0x1f72>
    800097b6:	b38fe06f          	j	80007aee <tinst_tests+0x2a6>
    800097ba:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800097bc:	0016f793          	and	a5,a3,1
    800097c0:	ffd5                	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    800097c2:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800097c6:	460d                	li	a2,3
    800097c8:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    800097cc:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    800097ce:	00c59863          	bne	a1,a2,800097de <tinst_tests+0x1f96>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800097d2:	0026d683          	lhu	a3,2(a3)
    800097d6:	0106969b          	sllw	a3,a3,0x10
    800097da:	8fd5                	or	a5,a5,a3
    800097dc:	2781                	sext.w	a5,a5
    800097de:	17c6                	sll	a5,a5,0x31
    800097e0:	93c5                	srl	a5,a5,0x31
    800097e2:	00f70463          	beq	a4,a5,800097ea <tinst_tests+0x1fa2>
    800097e6:	af4fe06f          	j	80007ada <tinst_tests+0x292>
    800097ea:	b04fe06f          	j	80007aee <tinst_tests+0x2a6>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    800097ee:	00013597          	auipc	a1,0x13
    800097f2:	79258593          	add	a1,a1,1938 # 8001cf80 <__func__.1+0x2d8>
    800097f6:	cd9fe06f          	j	800084ce <tinst_tests+0xc86>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    800097fa:	7018                	ld	a4,32(s0)
    800097fc:	e319                	bnez	a4,80009802 <tinst_tests+0x1fba>
    800097fe:	b96fe06f          	j	80007b94 <tinst_tests+0x34c>
    80009802:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009804:	0016f793          	and	a5,a3,1
    80009808:	fbb5                	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000980a:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000980e:	460d                	li	a2,3
    80009810:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009814:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009816:	00c59863          	bne	a1,a2,80009826 <tinst_tests+0x1fde>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000981a:	0026d683          	lhu	a3,2(a3)
    8000981e:	0106969b          	sllw	a3,a3,0x10
    80009822:	8fd5                	or	a5,a5,a3
    80009824:	2781                	sext.w	a5,a5
    80009826:	17c6                	sll	a5,a5,0x31
    80009828:	93c5                	srl	a5,a5,0x31
    8000982a:	00f70463          	beq	a4,a5,80009832 <tinst_tests+0x1fea>
    8000982e:	b52fe06f          	j	80007b80 <tinst_tests+0x338>
    80009832:	b62fe06f          	j	80007b94 <tinst_tests+0x34c>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    80009836:	00013597          	auipc	a1,0x13
    8000983a:	74a58593          	add	a1,a1,1866 # 8001cf80 <__func__.1+0x2d8>
    8000983e:	d37fe06f          	j	80008574 <tinst_tests+0xd2c>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    80009842:	7018                	ld	a4,32(s0)
    80009844:	e319                	bnez	a4,8000984a <tinst_tests+0x2002>
    80009846:	becfe06f          	j	80007c32 <tinst_tests+0x3ea>
    8000984a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000984c:	0016f793          	and	a5,a3,1
    80009850:	f795                	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009852:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009856:	460d                	li	a2,3
    80009858:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000985c:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000985e:	00c59863          	bne	a1,a2,8000986e <tinst_tests+0x2026>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009862:	0026d683          	lhu	a3,2(a3)
    80009866:	0106969b          	sllw	a3,a3,0x10
    8000986a:	8fd5                	or	a5,a5,a3
    8000986c:	2781                	sext.w	a5,a5
    8000986e:	17c6                	sll	a5,a5,0x31
    80009870:	93c5                	srl	a5,a5,0x31
    80009872:	00f70463          	beq	a4,a5,8000987a <tinst_tests+0x2032>
    80009876:	ba8fe06f          	j	80007c1e <tinst_tests+0x3d6>
    8000987a:	bb8fe06f          	j	80007c32 <tinst_tests+0x3ea>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    8000987e:	00013597          	auipc	a1,0x13
    80009882:	70258593          	add	a1,a1,1794 # 8001cf80 <__func__.1+0x2d8>
    80009886:	d95fe06f          	j	8000861a <tinst_tests+0xdd2>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    8000988a:	7018                	ld	a4,32(s0)
    8000988c:	e319                	bnez	a4,80009892 <tinst_tests+0x204a>
    8000988e:	c42fe06f          	j	80007cd0 <tinst_tests+0x488>
    80009892:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009894:	0016f793          	and	a5,a3,1
    80009898:	ee0792e3          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000989c:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800098a0:	460d                	li	a2,3
    800098a2:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    800098a6:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    800098a8:	00c59863          	bne	a1,a2,800098b8 <tinst_tests+0x2070>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800098ac:	0026d683          	lhu	a3,2(a3)
    800098b0:	0106969b          	sllw	a3,a3,0x10
    800098b4:	8fd5                	or	a5,a5,a3
    800098b6:	2781                	sext.w	a5,a5
    800098b8:	17c6                	sll	a5,a5,0x31
    800098ba:	93c5                	srl	a5,a5,0x31
    800098bc:	00f70463          	beq	a4,a5,800098c4 <tinst_tests+0x207c>
    800098c0:	bfcfe06f          	j	80007cbc <tinst_tests+0x474>
    800098c4:	c0cfe06f          	j	80007cd0 <tinst_tests+0x488>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    800098c8:	7018                	ld	a4,32(s0)
    800098ca:	00013597          	auipc	a1,0x13
    800098ce:	6a658593          	add	a1,a1,1702 # 8001cf70 <__func__.1+0x2c8>
    800098d2:	e319                	bnez	a4,800098d8 <tinst_tests+0x2090>
    800098d4:	89cfe06f          	j	80007970 <tinst_tests+0x128>
    800098d8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800098da:	0016f793          	and	a5,a3,1
    800098de:	e8079fe3          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    800098e2:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800098e6:	460d                	li	a2,3
    800098e8:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    800098ec:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    800098ee:	00c59863          	bne	a1,a2,800098fe <tinst_tests+0x20b6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800098f2:	0026d683          	lhu	a3,2(a3)
    800098f6:	0106969b          	sllw	a3,a3,0x10
    800098fa:	8fd5                	or	a5,a5,a3
    800098fc:	2781                	sext.w	a5,a5
    800098fe:	17c6                	sll	a5,a5,0x31
    80009900:	93c5                	srl	a5,a5,0x31
    80009902:	00013597          	auipc	a1,0x13
    80009906:	67e58593          	add	a1,a1,1662 # 8001cf80 <__func__.1+0x2d8>
    8000990a:	00f70463          	beq	a4,a5,80009912 <tinst_tests+0x20ca>
    8000990e:	862fe06f          	j	80007970 <tinst_tests+0x128>
    80009912:	00013597          	auipc	a1,0x13
    80009916:	65e58593          	add	a1,a1,1630 # 8001cf70 <__func__.1+0x2c8>
    8000991a:	856fe06f          	j	80007970 <tinst_tests+0x128>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    8000991e:	00013597          	auipc	a1,0x13
    80009922:	66258593          	add	a1,a1,1634 # 8001cf80 <__func__.1+0x2d8>
    80009926:	d9bfe06f          	j	800086c0 <tinst_tests+0xe78>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    8000992a:	701c                	ld	a5,32(s0)
    8000992c:	e399                	bnez	a5,80009932 <tinst_tests+0x20ea>
    8000992e:	c42fe06f          	j	80007d70 <tinst_tests+0x528>
    80009932:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009934:	0016f713          	and	a4,a3,1
    80009938:	e40712e3          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000993c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009940:	460d                	li	a2,3
    80009942:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    80009946:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009948:	00c59863          	bne	a1,a2,80009958 <tinst_tests+0x2110>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000994c:	0026d683          	lhu	a3,2(a3)
    80009950:	0106969b          	sllw	a3,a3,0x10
    80009954:	8f55                	or	a4,a4,a3
    80009956:	2701                	sext.w	a4,a4
    80009958:	01f076b7          	lui	a3,0x1f07
    8000995c:	07f68693          	add	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009960:	8f75                	and	a4,a4,a3
    80009962:	00e78463          	beq	a5,a4,8000996a <tinst_tests+0x2122>
    80009966:	bf6fe06f          	j	80007d5c <tinst_tests+0x514>
    8000996a:	c06fe06f          	j	80007d70 <tinst_tests+0x528>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    8000996e:	7018                	ld	a4,32(s0)
    80009970:	00013597          	auipc	a1,0x13
    80009974:	60058593          	add	a1,a1,1536 # 8001cf70 <__func__.1+0x2c8>
    80009978:	e319                	bnez	a4,8000997e <tinst_tests+0x2136>
    8000997a:	89cfe06f          	j	80007a16 <tinst_tests+0x1ce>
    8000997e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009980:	0016f793          	and	a5,a3,1
    80009984:	de079ce3          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009988:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000998c:	460d                	li	a2,3
    8000998e:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009992:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009994:	00c59863          	bne	a1,a2,800099a4 <tinst_tests+0x215c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009998:	0026d683          	lhu	a3,2(a3)
    8000999c:	0106969b          	sllw	a3,a3,0x10
    800099a0:	8fd5                	or	a5,a5,a3
    800099a2:	2781                	sext.w	a5,a5
    800099a4:	17c6                	sll	a5,a5,0x31
    800099a6:	93c5                	srl	a5,a5,0x31
    800099a8:	00013597          	auipc	a1,0x13
    800099ac:	5d858593          	add	a1,a1,1496 # 8001cf80 <__func__.1+0x2d8>
    800099b0:	00f70463          	beq	a4,a5,800099b8 <tinst_tests+0x2170>
    800099b4:	862fe06f          	j	80007a16 <tinst_tests+0x1ce>
    800099b8:	00013597          	auipc	a1,0x13
    800099bc:	5b858593          	add	a1,a1,1464 # 8001cf70 <__func__.1+0x2c8>
    800099c0:	856fe06f          	j	80007a16 <tinst_tests+0x1ce>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    800099c4:	00013597          	auipc	a1,0x13
    800099c8:	5bc58593          	add	a1,a1,1468 # 8001cf80 <__func__.1+0x2d8>
    800099cc:	d9bfe06f          	j	80008766 <tinst_tests+0xf1e>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    800099d0:	701c                	ld	a5,32(s0)
    800099d2:	e399                	bnez	a5,800099d8 <tinst_tests+0x2190>
    800099d4:	c40fe06f          	j	80007e14 <tinst_tests+0x5cc>
    800099d8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800099da:	0016f713          	and	a4,a3,1
    800099de:	d8071fe3          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    800099e2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800099e6:	460d                	li	a2,3
    800099e8:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    800099ec:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800099ee:	00c59863          	bne	a1,a2,800099fe <tinst_tests+0x21b6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800099f2:	0026d683          	lhu	a3,2(a3)
    800099f6:	0106969b          	sllw	a3,a3,0x10
    800099fa:	8f55                	or	a4,a4,a3
    800099fc:	2701                	sext.w	a4,a4
    800099fe:	01f076b7          	lui	a3,0x1f07
    80009a02:	07f68693          	add	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009a06:	8f75                	and	a4,a4,a3
    80009a08:	00e78463          	beq	a5,a4,80009a10 <tinst_tests+0x21c8>
    80009a0c:	bf4fe06f          	j	80007e00 <tinst_tests+0x5b8>
    80009a10:	c04fe06f          	j	80007e14 <tinst_tests+0x5cc>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    80009a14:	7018                	ld	a4,32(s0)
    80009a16:	00013597          	auipc	a1,0x13
    80009a1a:	55a58593          	add	a1,a1,1370 # 8001cf70 <__func__.1+0x2c8>
    80009a1e:	e319                	bnez	a4,80009a24 <tinst_tests+0x21dc>
    80009a20:	89cfe06f          	j	80007abc <tinst_tests+0x274>
    80009a24:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009a26:	0016f793          	and	a5,a3,1
    80009a2a:	d40799e3          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009a2e:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009a32:	460d                	li	a2,3
    80009a34:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009a38:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009a3a:	00c59863          	bne	a1,a2,80009a4a <tinst_tests+0x2202>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009a3e:	0026d683          	lhu	a3,2(a3)
    80009a42:	0106969b          	sllw	a3,a3,0x10
    80009a46:	8fd5                	or	a5,a5,a3
    80009a48:	2781                	sext.w	a5,a5
    80009a4a:	17c6                	sll	a5,a5,0x31
    80009a4c:	93c5                	srl	a5,a5,0x31
    80009a4e:	00013597          	auipc	a1,0x13
    80009a52:	53258593          	add	a1,a1,1330 # 8001cf80 <__func__.1+0x2d8>
    80009a56:	00f70463          	beq	a4,a5,80009a5e <tinst_tests+0x2216>
    80009a5a:	862fe06f          	j	80007abc <tinst_tests+0x274>
    80009a5e:	00013597          	auipc	a1,0x13
    80009a62:	51258593          	add	a1,a1,1298 # 8001cf70 <__func__.1+0x2c8>
    80009a66:	856fe06f          	j	80007abc <tinst_tests+0x274>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    80009a6a:	00013597          	auipc	a1,0x13
    80009a6e:	51658593          	add	a1,a1,1302 # 8001cf80 <__func__.1+0x2d8>
    80009a72:	d9bfe06f          	j	8000880c <tinst_tests+0xfc4>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    80009a76:	701c                	ld	a5,32(s0)
    80009a78:	e399                	bnez	a5,80009a7e <tinst_tests+0x2236>
    80009a7a:	c40fe06f          	j	80007eba <tinst_tests+0x672>
    80009a7e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009a80:	0016f713          	and	a4,a3,1
    80009a84:	ce071ce3          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009a88:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009a8c:	460d                	li	a2,3
    80009a8e:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    80009a92:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009a94:	00c59863          	bne	a1,a2,80009aa4 <tinst_tests+0x225c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009a98:	0026d683          	lhu	a3,2(a3)
    80009a9c:	0106969b          	sllw	a3,a3,0x10
    80009aa0:	8f55                	or	a4,a4,a3
    80009aa2:	2701                	sext.w	a4,a4
    80009aa4:	01f076b7          	lui	a3,0x1f07
    80009aa8:	07f68693          	add	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009aac:	8f75                	and	a4,a4,a3
    80009aae:	00e78463          	beq	a5,a4,80009ab6 <tinst_tests+0x226e>
    80009ab2:	bf4fe06f          	j	80007ea6 <tinst_tests+0x65e>
    80009ab6:	c04fe06f          	j	80007eba <tinst_tests+0x672>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    80009aba:	7018                	ld	a4,32(s0)
    80009abc:	00013597          	auipc	a1,0x13
    80009ac0:	4b458593          	add	a1,a1,1204 # 8001cf70 <__func__.1+0x2c8>
    80009ac4:	e319                	bnez	a4,80009aca <tinst_tests+0x2282>
    80009ac6:	89cfe06f          	j	80007b62 <tinst_tests+0x31a>
    80009aca:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009acc:	0016f793          	and	a5,a3,1
    80009ad0:	ca0796e3          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009ad4:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009ad8:	460d                	li	a2,3
    80009ada:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009ade:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009ae0:	00c59863          	bne	a1,a2,80009af0 <tinst_tests+0x22a8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009ae4:	0026d683          	lhu	a3,2(a3)
    80009ae8:	0106969b          	sllw	a3,a3,0x10
    80009aec:	8fd5                	or	a5,a5,a3
    80009aee:	2781                	sext.w	a5,a5
    80009af0:	17c6                	sll	a5,a5,0x31
    80009af2:	93c5                	srl	a5,a5,0x31
    80009af4:	00013597          	auipc	a1,0x13
    80009af8:	48c58593          	add	a1,a1,1164 # 8001cf80 <__func__.1+0x2d8>
    80009afc:	00f70463          	beq	a4,a5,80009b04 <tinst_tests+0x22bc>
    80009b00:	862fe06f          	j	80007b62 <tinst_tests+0x31a>
    80009b04:	00013597          	auipc	a1,0x13
    80009b08:	46c58593          	add	a1,a1,1132 # 8001cf70 <__func__.1+0x2c8>
    80009b0c:	856fe06f          	j	80007b62 <tinst_tests+0x31a>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    80009b10:	00013597          	auipc	a1,0x13
    80009b14:	47058593          	add	a1,a1,1136 # 8001cf80 <__func__.1+0x2d8>
    80009b18:	d9ffe06f          	j	800088b6 <tinst_tests+0x106e>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    80009b1c:	701c                	ld	a5,32(s0)
    80009b1e:	e399                	bnez	a5,80009b24 <tinst_tests+0x22dc>
    80009b20:	c42fe06f          	j	80007f62 <tinst_tests+0x71a>
    80009b24:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009b26:	0016f713          	and	a4,a3,1
    80009b2a:	c40719e3          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009b2e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009b32:	460d                	li	a2,3
    80009b34:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    80009b38:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009b3a:	00c59863          	bne	a1,a2,80009b4a <tinst_tests+0x2302>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009b3e:	0026d683          	lhu	a3,2(a3)
    80009b42:	0106969b          	sllw	a3,a3,0x10
    80009b46:	8f55                	or	a4,a4,a3
    80009b48:	2701                	sext.w	a4,a4
    80009b4a:	01f076b7          	lui	a3,0x1f07
    80009b4e:	07f68693          	add	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009b52:	8f75                	and	a4,a4,a3
    80009b54:	00e78463          	beq	a5,a4,80009b5c <tinst_tests+0x2314>
    80009b58:	bf6fe06f          	j	80007f4e <tinst_tests+0x706>
    80009b5c:	c06fe06f          	j	80007f62 <tinst_tests+0x71a>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    80009b60:	7018                	ld	a4,32(s0)
    80009b62:	00013597          	auipc	a1,0x13
    80009b66:	40e58593          	add	a1,a1,1038 # 8001cf70 <__func__.1+0x2c8>
    80009b6a:	e319                	bnez	a4,80009b70 <tinst_tests+0x2328>
    80009b6c:	894fe06f          	j	80007c00 <tinst_tests+0x3b8>
    80009b70:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009b72:	0016f793          	and	a5,a3,1
    80009b76:	c00793e3          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009b7a:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009b7e:	460d                	li	a2,3
    80009b80:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009b84:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009b86:	00c59863          	bne	a1,a2,80009b96 <tinst_tests+0x234e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009b8a:	0026d683          	lhu	a3,2(a3)
    80009b8e:	0106969b          	sllw	a3,a3,0x10
    80009b92:	8fd5                	or	a5,a5,a3
    80009b94:	2781                	sext.w	a5,a5
    80009b96:	17c6                	sll	a5,a5,0x31
    80009b98:	93c5                	srl	a5,a5,0x31
    80009b9a:	00013597          	auipc	a1,0x13
    80009b9e:	3e658593          	add	a1,a1,998 # 8001cf80 <__func__.1+0x2d8>
    80009ba2:	00f70463          	beq	a4,a5,80009baa <tinst_tests+0x2362>
    80009ba6:	85afe06f          	j	80007c00 <tinst_tests+0x3b8>
    80009baa:	00013597          	auipc	a1,0x13
    80009bae:	3c658593          	add	a1,a1,966 # 8001cf70 <__func__.1+0x2c8>
    80009bb2:	84efe06f          	j	80007c00 <tinst_tests+0x3b8>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    80009bb6:	00013597          	auipc	a1,0x13
    80009bba:	3ca58593          	add	a1,a1,970 # 8001cf80 <__func__.1+0x2d8>
    80009bbe:	d9ffe06f          	j	8000895c <tinst_tests+0x1114>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80009bc2:	7004                	ld	s1,32(s0)
    80009bc4:	e099                	bnez	s1,80009bca <tinst_tests+0x2382>
    80009bc6:	c34fe06f          	j	80007ffa <tinst_tests+0x7b2>
    80009bca:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    80009bcc:	0017f713          	and	a4,a5,1
    80009bd0:	ba0716e3          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009bd4:	0007d503          	lhu	a0,0(a5)
    80009bd8:	e70f70ef          	jal	80001248 <expand_compressed_instruction>
    80009bdc:	67a1                	lui	a5,0x8
    80009bde:	17f5                	add	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    80009be0:	8fe9                	and	a5,a5,a0
    80009be2:	1782                	sll	a5,a5,0x20
    80009be4:	9381                	srl	a5,a5,0x20
    80009be6:	00f48463          	beq	s1,a5,80009bee <tinst_tests+0x23a6>
    80009bea:	bfcfe06f          	j	80007fe6 <tinst_tests+0x79e>
    80009bee:	c0cfe06f          	j	80007ffa <tinst_tests+0x7b2>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    80009bf2:	7018                	ld	a4,32(s0)
    80009bf4:	00013597          	auipc	a1,0x13
    80009bf8:	37c58593          	add	a1,a1,892 # 8001cf70 <__func__.1+0x2c8>
    80009bfc:	e319                	bnez	a4,80009c02 <tinst_tests+0x23ba>
    80009bfe:	8a0fe06f          	j	80007c9e <tinst_tests+0x456>
    80009c02:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009c04:	0016f793          	and	a5,a3,1
    80009c08:	b6079ae3          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009c0c:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009c10:	460d                	li	a2,3
    80009c12:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009c16:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009c18:	00c59863          	bne	a1,a2,80009c28 <tinst_tests+0x23e0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009c1c:	0026d683          	lhu	a3,2(a3)
    80009c20:	0106969b          	sllw	a3,a3,0x10
    80009c24:	8fd5                	or	a5,a5,a3
    80009c26:	2781                	sext.w	a5,a5
    80009c28:	17c6                	sll	a5,a5,0x31
    80009c2a:	93c5                	srl	a5,a5,0x31
    80009c2c:	00013597          	auipc	a1,0x13
    80009c30:	35458593          	add	a1,a1,852 # 8001cf80 <__func__.1+0x2d8>
    80009c34:	00f70463          	beq	a4,a5,80009c3c <tinst_tests+0x23f4>
    80009c38:	866fe06f          	j	80007c9e <tinst_tests+0x456>
    80009c3c:	00013597          	auipc	a1,0x13
    80009c40:	33458593          	add	a1,a1,820 # 8001cf70 <__func__.1+0x2c8>
    80009c44:	85afe06f          	j	80007c9e <tinst_tests+0x456>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    80009c48:	00013597          	auipc	a1,0x13
    80009c4c:	33858593          	add	a1,a1,824 # 8001cf80 <__func__.1+0x2d8>
    80009c50:	db3fe06f          	j	80008a02 <tinst_tests+0x11ba>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    80009c54:	02043983          	ld	s3,32(s0)
    80009c58:	00099463          	bnez	s3,80009c60 <tinst_tests+0x2418>
    80009c5c:	c38fe06f          	j	80008094 <tinst_tests+0x84c>
    80009c60:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    80009c62:	0017f713          	and	a4,a5,1
    80009c66:	b0071be3          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009c6a:	0007d503          	lhu	a0,0(a5)
    80009c6e:	ddaf70ef          	jal	80001248 <expand_compressed_instruction>
    80009c72:	67a1                	lui	a5,0x8
    80009c74:	17f5                	add	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    80009c76:	8fe9                	and	a5,a5,a0
    80009c78:	1782                	sll	a5,a5,0x20
    80009c7a:	9381                	srl	a5,a5,0x20
    80009c7c:	00f98463          	beq	s3,a5,80009c84 <tinst_tests+0x243c>
    80009c80:	c00fe06f          	j	80008080 <tinst_tests+0x838>
    80009c84:	c10fe06f          	j	80008094 <tinst_tests+0x84c>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    80009c88:	701c                	ld	a5,32(s0)
    80009c8a:	00013597          	auipc	a1,0x13
    80009c8e:	2e658593          	add	a1,a1,742 # 8001cf70 <__func__.1+0x2c8>
    80009c92:	e399                	bnez	a5,80009c98 <tinst_tests+0x2450>
    80009c94:	8aafe06f          	j	80007d3e <tinst_tests+0x4f6>
    80009c98:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009c9a:	0016f713          	and	a4,a3,1
    80009c9e:	ac071fe3          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009ca2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009ca6:	460d                	li	a2,3
    80009ca8:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    80009cac:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009cae:	00c59863          	bne	a1,a2,80009cbe <tinst_tests+0x2476>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009cb2:	0026d683          	lhu	a3,2(a3)
    80009cb6:	0106969b          	sllw	a3,a3,0x10
    80009cba:	8f55                	or	a4,a4,a3
    80009cbc:	2701                	sext.w	a4,a4
    80009cbe:	01f076b7          	lui	a3,0x1f07
    80009cc2:	07f68693          	add	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009cc6:	8f75                	and	a4,a4,a3
    80009cc8:	00013597          	auipc	a1,0x13
    80009ccc:	2b858593          	add	a1,a1,696 # 8001cf80 <__func__.1+0x2d8>
    80009cd0:	00e78463          	beq	a5,a4,80009cd8 <tinst_tests+0x2490>
    80009cd4:	86afe06f          	j	80007d3e <tinst_tests+0x4f6>
    80009cd8:	00013597          	auipc	a1,0x13
    80009cdc:	29858593          	add	a1,a1,664 # 8001cf70 <__func__.1+0x2c8>
    80009ce0:	85efe06f          	j	80007d3e <tinst_tests+0x4f6>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    80009ce4:	00013597          	auipc	a1,0x13
    80009ce8:	29c58593          	add	a1,a1,668 # 8001cf80 <__func__.1+0x2d8>
    80009cec:	dbdfe06f          	j	80008aa8 <tinst_tests+0x1260>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80009cf0:	02043983          	ld	s3,32(s0)
    80009cf4:	00099463          	bnez	s3,80009cfc <tinst_tests+0x24b4>
    80009cf8:	c36fe06f          	j	8000812e <tinst_tests+0x8e6>
    80009cfc:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    80009cfe:	0017f713          	and	a4,a5,1
    80009d02:	a6071de3          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009d06:	0007d503          	lhu	a0,0(a5)
    80009d0a:	d3ef70ef          	jal	80001248 <expand_compressed_instruction>
    80009d0e:	01f07737          	lui	a4,0x1f07
    80009d12:	0005079b          	sext.w	a5,a0
    80009d16:	07d70713          	add	a4,a4,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    80009d1a:	8ff9                	and	a5,a5,a4
    80009d1c:	00f98463          	beq	s3,a5,80009d24 <tinst_tests+0x24dc>
    80009d20:	bfafe06f          	j	8000811a <tinst_tests+0x8d2>
    80009d24:	c0afe06f          	j	8000812e <tinst_tests+0x8e6>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    80009d28:	701c                	ld	a5,32(s0)
    80009d2a:	00013597          	auipc	a1,0x13
    80009d2e:	24658593          	add	a1,a1,582 # 8001cf70 <__func__.1+0x2c8>
    80009d32:	e399                	bnez	a5,80009d38 <tinst_tests+0x24f0>
    80009d34:	8aefe06f          	j	80007de2 <tinst_tests+0x59a>
    80009d38:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009d3a:	0016f713          	and	a4,a3,1
    80009d3e:	a2071fe3          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009d42:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009d46:	460d                	li	a2,3
    80009d48:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    80009d4c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009d4e:	00c59863          	bne	a1,a2,80009d5e <tinst_tests+0x2516>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009d52:	0026d683          	lhu	a3,2(a3)
    80009d56:	0106969b          	sllw	a3,a3,0x10
    80009d5a:	8f55                	or	a4,a4,a3
    80009d5c:	2701                	sext.w	a4,a4
    80009d5e:	01f076b7          	lui	a3,0x1f07
    80009d62:	07f68693          	add	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009d66:	8f75                	and	a4,a4,a3
    80009d68:	00013597          	auipc	a1,0x13
    80009d6c:	21858593          	add	a1,a1,536 # 8001cf80 <__func__.1+0x2d8>
    80009d70:	00e78463          	beq	a5,a4,80009d78 <tinst_tests+0x2530>
    80009d74:	86efe06f          	j	80007de2 <tinst_tests+0x59a>
    80009d78:	00013597          	auipc	a1,0x13
    80009d7c:	1f858593          	add	a1,a1,504 # 8001cf70 <__func__.1+0x2c8>
    80009d80:	862fe06f          	j	80007de2 <tinst_tests+0x59a>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    80009d84:	00013597          	auipc	a1,0x13
    80009d88:	1fc58593          	add	a1,a1,508 # 8001cf80 <__func__.1+0x2d8>
    80009d8c:	dc3fe06f          	j	80008b4e <tinst_tests+0x1306>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    80009d90:	7004                	ld	s1,32(s0)
    80009d92:	e099                	bnez	s1,80009d98 <tinst_tests+0x2550>
    80009d94:	c3cfe06f          	j	800081d0 <tinst_tests+0x988>
    80009d98:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    80009d9a:	0017f713          	and	a4,a5,1
    80009d9e:	9c071fe3          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009da2:	0007d503          	lhu	a0,0(a5)
    80009da6:	ca2f70ef          	jal	80001248 <expand_compressed_instruction>
    80009daa:	01f07737          	lui	a4,0x1f07
    80009dae:	0005079b          	sext.w	a5,a0
    80009db2:	07d70713          	add	a4,a4,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    80009db6:	8ff9                	and	a5,a5,a4
    80009db8:	00f48463          	beq	s1,a5,80009dc0 <tinst_tests+0x2578>
    80009dbc:	c00fe06f          	j	800081bc <tinst_tests+0x974>
    80009dc0:	c10fe06f          	j	800081d0 <tinst_tests+0x988>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    80009dc4:	701c                	ld	a5,32(s0)
    80009dc6:	00013597          	auipc	a1,0x13
    80009dca:	1aa58593          	add	a1,a1,426 # 8001cf70 <__func__.1+0x2c8>
    80009dce:	e399                	bnez	a5,80009dd4 <tinst_tests+0x258c>
    80009dd0:	8b8fe06f          	j	80007e88 <tinst_tests+0x640>
    80009dd4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009dd6:	0016f713          	and	a4,a3,1
    80009dda:	9a0711e3          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009dde:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009de2:	460d                	li	a2,3
    80009de4:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    80009de8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009dea:	00c59863          	bne	a1,a2,80009dfa <tinst_tests+0x25b2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009dee:	0026d683          	lhu	a3,2(a3)
    80009df2:	0106969b          	sllw	a3,a3,0x10
    80009df6:	8f55                	or	a4,a4,a3
    80009df8:	2701                	sext.w	a4,a4
    80009dfa:	01f076b7          	lui	a3,0x1f07
    80009dfe:	07f68693          	add	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009e02:	8f75                	and	a4,a4,a3
    80009e04:	00013597          	auipc	a1,0x13
    80009e08:	17c58593          	add	a1,a1,380 # 8001cf80 <__func__.1+0x2d8>
    80009e0c:	00e78463          	beq	a5,a4,80009e14 <tinst_tests+0x25cc>
    80009e10:	878fe06f          	j	80007e88 <tinst_tests+0x640>
    80009e14:	00013597          	auipc	a1,0x13
    80009e18:	15c58593          	add	a1,a1,348 # 8001cf70 <__func__.1+0x2c8>
    80009e1c:	86cfe06f          	j	80007e88 <tinst_tests+0x640>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    80009e20:	00013597          	auipc	a1,0x13
    80009e24:	16058593          	add	a1,a1,352 # 8001cf80 <__func__.1+0x2d8>
    80009e28:	dcdfe06f          	j	80008bf4 <tinst_tests+0x13ac>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    80009e2c:	00013597          	auipc	a1,0x13
    80009e30:	15458593          	add	a1,a1,340 # 8001cf80 <__func__.1+0x2d8>
    80009e34:	e5ffe06f          	j	80008c92 <tinst_tests+0x144a>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    80009e38:	00013597          	auipc	a1,0x13
    80009e3c:	14858593          	add	a1,a1,328 # 8001cf80 <__func__.1+0x2d8>
    80009e40:	ef1fe06f          	j	80008d30 <tinst_tests+0x14e8>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    80009e44:	00013597          	auipc	a1,0x13
    80009e48:	13c58593          	add	a1,a1,316 # 8001cf80 <__func__.1+0x2d8>
    80009e4c:	f83fe06f          	j	80008dce <tinst_tests+0x1586>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    80009e50:	701c                	ld	a5,32(s0)
    80009e52:	e399                	bnez	a5,80009e58 <tinst_tests+0x2610>
    80009e54:	e06fe06f          	j	8000845a <tinst_tests+0xc12>
    80009e58:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009e5a:	0016f713          	and	a4,a3,1
    80009e5e:	90071fe3          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009e62:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009e66:	460d                	li	a2,3
    80009e68:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    80009e6c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009e6e:	00c59863          	bne	a1,a2,80009e7e <tinst_tests+0x2636>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009e72:	0026d683          	lhu	a3,2(a3)
    80009e76:	0106969b          	sllw	a3,a3,0x10
    80009e7a:	8f55                	or	a4,a4,a3
    80009e7c:	2701                	sext.w	a4,a4
    80009e7e:	1702                	sll	a4,a4,0x20
    80009e80:	fff086b7          	lui	a3,0xfff08
    80009e84:	9301                	srl	a4,a4,0x20
    80009e86:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009e88:	8f75                	and	a4,a4,a3
    80009e8a:	00e78463          	beq	a5,a4,80009e92 <tinst_tests+0x264a>
    80009e8e:	db8fe06f          	j	80008446 <tinst_tests+0xbfe>
    80009e92:	dc8fe06f          	j	8000845a <tinst_tests+0xc12>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    80009e96:	00013597          	auipc	a1,0x13
    80009e9a:	0ea58593          	add	a1,a1,234 # 8001cf80 <__func__.1+0x2d8>
    80009e9e:	fcffe06f          	j	80008e6c <tinst_tests+0x1624>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    80009ea2:	7018                	ld	a4,32(s0)
    80009ea4:	e319                	bnez	a4,80009eaa <tinst_tests+0x2662>
    80009ea6:	e5afe06f          	j	80008500 <tinst_tests+0xcb8>
    80009eaa:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009eac:	0016f793          	and	a5,a3,1
    80009eb0:	8c0796e3          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009eb4:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009eb8:	460d                	li	a2,3
    80009eba:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009ebe:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009ec0:	00c59863          	bne	a1,a2,80009ed0 <tinst_tests+0x2688>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009ec4:	0026d683          	lhu	a3,2(a3)
    80009ec8:	0106969b          	sllw	a3,a3,0x10
    80009ecc:	8fd5                	or	a5,a5,a3
    80009ece:	2781                	sext.w	a5,a5
    80009ed0:	1782                	sll	a5,a5,0x20
    80009ed2:	fff086b7          	lui	a3,0xfff08
    80009ed6:	9381                	srl	a5,a5,0x20
    80009ed8:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009eda:	8ff5                	and	a5,a5,a3
    80009edc:	00f70463          	beq	a4,a5,80009ee4 <tinst_tests+0x269c>
    80009ee0:	e0cfe06f          	j	800084ec <tinst_tests+0xca4>
    80009ee4:	e1cfe06f          	j	80008500 <tinst_tests+0xcb8>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    80009ee8:	701c                	ld	a5,32(s0)
    80009eea:	e399                	bnez	a5,80009ef0 <tinst_tests+0x26a8>
    80009eec:	ebafe06f          	j	800085a6 <tinst_tests+0xd5e>
    80009ef0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009ef2:	0016f713          	and	a4,a3,1
    80009ef6:	880713e3          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009efa:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009efe:	460d                	li	a2,3
    80009f00:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    80009f04:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009f06:	00c59863          	bne	a1,a2,80009f16 <tinst_tests+0x26ce>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009f0a:	0026d683          	lhu	a3,2(a3)
    80009f0e:	0106969b          	sllw	a3,a3,0x10
    80009f12:	8f55                	or	a4,a4,a3
    80009f14:	2701                	sext.w	a4,a4
    80009f16:	1702                	sll	a4,a4,0x20
    80009f18:	fff086b7          	lui	a3,0xfff08
    80009f1c:	9301                	srl	a4,a4,0x20
    80009f1e:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009f20:	8f75                	and	a4,a4,a3
    80009f22:	00e78463          	beq	a5,a4,80009f2a <tinst_tests+0x26e2>
    80009f26:	e6cfe06f          	j	80008592 <tinst_tests+0xd4a>
    80009f2a:	e7cfe06f          	j	800085a6 <tinst_tests+0xd5e>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    80009f2e:	7018                	ld	a4,32(s0)
    80009f30:	e319                	bnez	a4,80009f36 <tinst_tests+0x26ee>
    80009f32:	f1afe06f          	j	8000864c <tinst_tests+0xe04>
    80009f36:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009f38:	0016f793          	and	a5,a3,1
    80009f3c:	840790e3          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009f40:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009f44:	460d                	li	a2,3
    80009f46:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009f4a:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009f4c:	00c59863          	bne	a1,a2,80009f5c <tinst_tests+0x2714>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009f50:	0026d683          	lhu	a3,2(a3)
    80009f54:	0106969b          	sllw	a3,a3,0x10
    80009f58:	8fd5                	or	a5,a5,a3
    80009f5a:	2781                	sext.w	a5,a5
    80009f5c:	1782                	sll	a5,a5,0x20
    80009f5e:	fff086b7          	lui	a3,0xfff08
    80009f62:	9381                	srl	a5,a5,0x20
    80009f64:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009f66:	8ff5                	and	a5,a5,a3
    80009f68:	00f70463          	beq	a4,a5,80009f70 <tinst_tests+0x2728>
    80009f6c:	eccfe06f          	j	80008638 <tinst_tests+0xdf0>
    80009f70:	edcfe06f          	j	8000864c <tinst_tests+0xe04>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    80009f74:	7018                	ld	a4,32(s0)
    80009f76:	e319                	bnez	a4,80009f7c <tinst_tests+0x2734>
    80009f78:	f7afe06f          	j	800086f2 <tinst_tests+0xeaa>
    80009f7c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009f7e:	0016f793          	and	a5,a3,1
    80009f82:	fe079d63          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009f86:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009f8a:	460d                	li	a2,3
    80009f8c:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    80009f90:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009f92:	00c59863          	bne	a1,a2,80009fa2 <tinst_tests+0x275a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009f96:	0026d683          	lhu	a3,2(a3)
    80009f9a:	0106969b          	sllw	a3,a3,0x10
    80009f9e:	8fd5                	or	a5,a5,a3
    80009fa0:	2781                	sext.w	a5,a5
    80009fa2:	1782                	sll	a5,a5,0x20
    80009fa4:	fff086b7          	lui	a3,0xfff08
    80009fa8:	9381                	srl	a5,a5,0x20
    80009faa:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009fac:	8ff5                	and	a5,a5,a3
    80009fae:	00f70463          	beq	a4,a5,80009fb6 <tinst_tests+0x276e>
    80009fb2:	f2cfe06f          	j	800086de <tinst_tests+0xe96>
    80009fb6:	f3cfe06f          	j	800086f2 <tinst_tests+0xeaa>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    80009fba:	701c                	ld	a5,32(s0)
    80009fbc:	e399                	bnez	a5,80009fc2 <tinst_tests+0x277a>
    80009fbe:	fdafe06f          	j	80008798 <tinst_tests+0xf50>
    80009fc2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009fc4:	0016f713          	and	a4,a3,1
    80009fc8:	fa071a63          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    80009fcc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009fd0:	460d                	li	a2,3
    80009fd2:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    80009fd6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009fd8:	00c59863          	bne	a1,a2,80009fe8 <tinst_tests+0x27a0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009fdc:	0026d683          	lhu	a3,2(a3)
    80009fe0:	0106969b          	sllw	a3,a3,0x10
    80009fe4:	8f55                	or	a4,a4,a3
    80009fe6:	2701                	sext.w	a4,a4
    80009fe8:	1702                	sll	a4,a4,0x20
    80009fea:	fff086b7          	lui	a3,0xfff08
    80009fee:	9301                	srl	a4,a4,0x20
    80009ff0:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    80009ff2:	8f75                	and	a4,a4,a3
    80009ff4:	00e78463          	beq	a5,a4,80009ffc <tinst_tests+0x27b4>
    80009ff8:	f8cfe06f          	j	80008784 <tinst_tests+0xf3c>
    80009ffc:	f9cfe06f          	j	80008798 <tinst_tests+0xf50>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    8000a000:	701c                	ld	a5,32(s0)
    8000a002:	e399                	bnez	a5,8000a008 <tinst_tests+0x27c0>
    8000a004:	83bfe06f          	j	8000883e <tinst_tests+0xff6>
    8000a008:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a00a:	0016f713          	and	a4,a3,1
    8000a00e:	f6071763          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a012:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a016:	460d                	li	a2,3
    8000a018:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    8000a01c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a01e:	00c59863          	bne	a1,a2,8000a02e <tinst_tests+0x27e6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a022:	0026d683          	lhu	a3,2(a3)
    8000a026:	0106969b          	sllw	a3,a3,0x10
    8000a02a:	8f55                	or	a4,a4,a3
    8000a02c:	2701                	sext.w	a4,a4
    8000a02e:	1702                	sll	a4,a4,0x20
    8000a030:	fff086b7          	lui	a3,0xfff08
    8000a034:	9301                	srl	a4,a4,0x20
    8000a036:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a038:	8f75                	and	a4,a4,a3
    8000a03a:	00e78463          	beq	a5,a4,8000a042 <tinst_tests+0x27fa>
    8000a03e:	fecfe06f          	j	8000882a <tinst_tests+0xfe2>
    8000a042:	ffcfe06f          	j	8000883e <tinst_tests+0xff6>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    8000a046:	701c                	ld	a5,32(s0)
    8000a048:	00013597          	auipc	a1,0x13
    8000a04c:	f2858593          	add	a1,a1,-216 # 8001cf70 <__func__.1+0x2c8>
    8000a050:	e399                	bnez	a5,8000a056 <tinst_tests+0x280e>
    8000a052:	c7cfe06f          	j	800084ce <tinst_tests+0xc86>
    8000a056:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a058:	0016f713          	and	a4,a3,1
    8000a05c:	f2071063          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a060:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a064:	460d                	li	a2,3
    8000a066:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    8000a06a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a06c:	00c59863          	bne	a1,a2,8000a07c <tinst_tests+0x2834>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a070:	0026d683          	lhu	a3,2(a3)
    8000a074:	0106969b          	sllw	a3,a3,0x10
    8000a078:	8f55                	or	a4,a4,a3
    8000a07a:	2701                	sext.w	a4,a4
    8000a07c:	1702                	sll	a4,a4,0x20
    8000a07e:	fff086b7          	lui	a3,0xfff08
    8000a082:	9301                	srl	a4,a4,0x20
    8000a084:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a086:	8f75                	and	a4,a4,a3
    8000a088:	00013597          	auipc	a1,0x13
    8000a08c:	ef858593          	add	a1,a1,-264 # 8001cf80 <__func__.1+0x2d8>
    8000a090:	00e78463          	beq	a5,a4,8000a098 <tinst_tests+0x2850>
    8000a094:	c3afe06f          	j	800084ce <tinst_tests+0xc86>
    8000a098:	00013597          	auipc	a1,0x13
    8000a09c:	ed858593          	add	a1,a1,-296 # 8001cf70 <__func__.1+0x2c8>
    8000a0a0:	c2efe06f          	j	800084ce <tinst_tests+0xc86>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000a0a4:	7018                	ld	a4,32(s0)
    8000a0a6:	e319                	bnez	a4,8000a0ac <tinst_tests+0x2864>
    8000a0a8:	841fe06f          	j	800088e8 <tinst_tests+0x10a0>
    8000a0ac:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a0ae:	0016f793          	and	a5,a3,1
    8000a0b2:	ec079563          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a0b6:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a0ba:	460d                	li	a2,3
    8000a0bc:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a0c0:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a0c2:	00c59863          	bne	a1,a2,8000a0d2 <tinst_tests+0x288a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a0c6:	0026d683          	lhu	a3,2(a3)
    8000a0ca:	0106969b          	sllw	a3,a3,0x10
    8000a0ce:	8fd5                	or	a5,a5,a3
    8000a0d0:	2781                	sext.w	a5,a5
    8000a0d2:	1782                	sll	a5,a5,0x20
    8000a0d4:	fff086b7          	lui	a3,0xfff08
    8000a0d8:	9381                	srl	a5,a5,0x20
    8000a0da:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a0dc:	8ff5                	and	a5,a5,a3
    8000a0de:	00f70463          	beq	a4,a5,8000a0e6 <tinst_tests+0x289e>
    8000a0e2:	ff2fe06f          	j	800088d4 <tinst_tests+0x108c>
    8000a0e6:	803fe06f          	j	800088e8 <tinst_tests+0x10a0>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    8000a0ea:	701c                	ld	a5,32(s0)
    8000a0ec:	00013597          	auipc	a1,0x13
    8000a0f0:	e8458593          	add	a1,a1,-380 # 8001cf70 <__func__.1+0x2c8>
    8000a0f4:	e399                	bnez	a5,8000a0fa <tinst_tests+0x28b2>
    8000a0f6:	c7efe06f          	j	80008574 <tinst_tests+0xd2c>
    8000a0fa:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a0fc:	0016f713          	and	a4,a3,1
    8000a100:	e6071e63          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a104:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a108:	460d                	li	a2,3
    8000a10a:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    8000a10e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a110:	00c59863          	bne	a1,a2,8000a120 <tinst_tests+0x28d8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a114:	0026d683          	lhu	a3,2(a3)
    8000a118:	0106969b          	sllw	a3,a3,0x10
    8000a11c:	8f55                	or	a4,a4,a3
    8000a11e:	2701                	sext.w	a4,a4
    8000a120:	1702                	sll	a4,a4,0x20
    8000a122:	fff086b7          	lui	a3,0xfff08
    8000a126:	9301                	srl	a4,a4,0x20
    8000a128:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a12a:	8f75                	and	a4,a4,a3
    8000a12c:	00013597          	auipc	a1,0x13
    8000a130:	e5458593          	add	a1,a1,-428 # 8001cf80 <__func__.1+0x2d8>
    8000a134:	00e78463          	beq	a5,a4,8000a13c <tinst_tests+0x28f4>
    8000a138:	c3cfe06f          	j	80008574 <tinst_tests+0xd2c>
    8000a13c:	00013597          	auipc	a1,0x13
    8000a140:	e3458593          	add	a1,a1,-460 # 8001cf70 <__func__.1+0x2c8>
    8000a144:	c30fe06f          	j	80008574 <tinst_tests+0xd2c>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000a148:	7018                	ld	a4,32(s0)
    8000a14a:	e319                	bnez	a4,8000a150 <tinst_tests+0x2908>
    8000a14c:	843fe06f          	j	8000898e <tinst_tests+0x1146>
    8000a150:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a152:	0016f793          	and	a5,a3,1
    8000a156:	e2079363          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a15a:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a15e:	460d                	li	a2,3
    8000a160:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a164:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a166:	00c59863          	bne	a1,a2,8000a176 <tinst_tests+0x292e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a16a:	0026d683          	lhu	a3,2(a3)
    8000a16e:	0106969b          	sllw	a3,a3,0x10
    8000a172:	8fd5                	or	a5,a5,a3
    8000a174:	2781                	sext.w	a5,a5
    8000a176:	1782                	sll	a5,a5,0x20
    8000a178:	fff086b7          	lui	a3,0xfff08
    8000a17c:	9381                	srl	a5,a5,0x20
    8000a17e:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a180:	8ff5                	and	a5,a5,a3
    8000a182:	00f70463          	beq	a4,a5,8000a18a <tinst_tests+0x2942>
    8000a186:	ff4fe06f          	j	8000897a <tinst_tests+0x1132>
    8000a18a:	805fe06f          	j	8000898e <tinst_tests+0x1146>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    8000a18e:	7018                	ld	a4,32(s0)
    8000a190:	00013597          	auipc	a1,0x13
    8000a194:	de058593          	add	a1,a1,-544 # 8001cf70 <__func__.1+0x2c8>
    8000a198:	e319                	bnez	a4,8000a19e <tinst_tests+0x2956>
    8000a19a:	c80fe06f          	j	8000861a <tinst_tests+0xdd2>
    8000a19e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a1a0:	0016f793          	and	a5,a3,1
    8000a1a4:	dc079c63          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a1a8:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a1ac:	460d                	li	a2,3
    8000a1ae:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a1b2:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a1b4:	00c59863          	bne	a1,a2,8000a1c4 <tinst_tests+0x297c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a1b8:	0026d683          	lhu	a3,2(a3)
    8000a1bc:	0106969b          	sllw	a3,a3,0x10
    8000a1c0:	8fd5                	or	a5,a5,a3
    8000a1c2:	2781                	sext.w	a5,a5
    8000a1c4:	1782                	sll	a5,a5,0x20
    8000a1c6:	fff086b7          	lui	a3,0xfff08
    8000a1ca:	9381                	srl	a5,a5,0x20
    8000a1cc:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a1ce:	8ff5                	and	a5,a5,a3
    8000a1d0:	00013597          	auipc	a1,0x13
    8000a1d4:	db058593          	add	a1,a1,-592 # 8001cf80 <__func__.1+0x2d8>
    8000a1d8:	00f70463          	beq	a4,a5,8000a1e0 <tinst_tests+0x2998>
    8000a1dc:	c3efe06f          	j	8000861a <tinst_tests+0xdd2>
    8000a1e0:	00013597          	auipc	a1,0x13
    8000a1e4:	d9058593          	add	a1,a1,-624 # 8001cf70 <__func__.1+0x2c8>
    8000a1e8:	c32fe06f          	j	8000861a <tinst_tests+0xdd2>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000a1ec:	7018                	ld	a4,32(s0)
    8000a1ee:	e319                	bnez	a4,8000a1f4 <tinst_tests+0x29ac>
    8000a1f0:	845fe06f          	j	80008a34 <tinst_tests+0x11ec>
    8000a1f4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a1f6:	0016f793          	and	a5,a3,1
    8000a1fa:	d8079163          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a1fe:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a202:	460d                	li	a2,3
    8000a204:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a208:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a20a:	00c59863          	bne	a1,a2,8000a21a <tinst_tests+0x29d2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a20e:	0026d683          	lhu	a3,2(a3)
    8000a212:	0106969b          	sllw	a3,a3,0x10
    8000a216:	8fd5                	or	a5,a5,a3
    8000a218:	2781                	sext.w	a5,a5
    8000a21a:	1782                	sll	a5,a5,0x20
    8000a21c:	fff086b7          	lui	a3,0xfff08
    8000a220:	9381                	srl	a5,a5,0x20
    8000a222:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a224:	8ff5                	and	a5,a5,a3
    8000a226:	00f70463          	beq	a4,a5,8000a22e <tinst_tests+0x29e6>
    8000a22a:	ff6fe06f          	j	80008a20 <tinst_tests+0x11d8>
    8000a22e:	807fe06f          	j	80008a34 <tinst_tests+0x11ec>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    8000a232:	701c                	ld	a5,32(s0)
    8000a234:	00013597          	auipc	a1,0x13
    8000a238:	d3c58593          	add	a1,a1,-708 # 8001cf70 <__func__.1+0x2c8>
    8000a23c:	e399                	bnez	a5,8000a242 <tinst_tests+0x29fa>
    8000a23e:	c82fe06f          	j	800086c0 <tinst_tests+0xe78>
    8000a242:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a244:	0016f713          	and	a4,a3,1
    8000a248:	d2071a63          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a24c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a250:	460d                	li	a2,3
    8000a252:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    8000a256:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a258:	00c59863          	bne	a1,a2,8000a268 <tinst_tests+0x2a20>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a25c:	0026d683          	lhu	a3,2(a3)
    8000a260:	0106969b          	sllw	a3,a3,0x10
    8000a264:	8f55                	or	a4,a4,a3
    8000a266:	2701                	sext.w	a4,a4
    8000a268:	1702                	sll	a4,a4,0x20
    8000a26a:	fff086b7          	lui	a3,0xfff08
    8000a26e:	9301                	srl	a4,a4,0x20
    8000a270:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a272:	8f75                	and	a4,a4,a3
    8000a274:	00013597          	auipc	a1,0x13
    8000a278:	d0c58593          	add	a1,a1,-756 # 8001cf80 <__func__.1+0x2d8>
    8000a27c:	00e78463          	beq	a5,a4,8000a284 <tinst_tests+0x2a3c>
    8000a280:	c40fe06f          	j	800086c0 <tinst_tests+0xe78>
    8000a284:	00013597          	auipc	a1,0x13
    8000a288:	cec58593          	add	a1,a1,-788 # 8001cf70 <__func__.1+0x2c8>
    8000a28c:	c34fe06f          	j	800086c0 <tinst_tests+0xe78>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000a290:	7018                	ld	a4,32(s0)
    8000a292:	e319                	bnez	a4,8000a298 <tinst_tests+0x2a50>
    8000a294:	847fe06f          	j	80008ada <tinst_tests+0x1292>
    8000a298:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a29a:	0016f793          	and	a5,a3,1
    8000a29e:	cc079f63          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a2a2:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a2a6:	460d                	li	a2,3
    8000a2a8:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a2ac:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a2ae:	00c59863          	bne	a1,a2,8000a2be <tinst_tests+0x2a76>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a2b2:	0026d683          	lhu	a3,2(a3)
    8000a2b6:	0106969b          	sllw	a3,a3,0x10
    8000a2ba:	8fd5                	or	a5,a5,a3
    8000a2bc:	2781                	sext.w	a5,a5
    8000a2be:	1782                	sll	a5,a5,0x20
    8000a2c0:	fff086b7          	lui	a3,0xfff08
    8000a2c4:	9381                	srl	a5,a5,0x20
    8000a2c6:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a2c8:	8ff5                	and	a5,a5,a3
    8000a2ca:	00f70463          	beq	a4,a5,8000a2d2 <tinst_tests+0x2a8a>
    8000a2ce:	ff8fe06f          	j	80008ac6 <tinst_tests+0x127e>
    8000a2d2:	809fe06f          	j	80008ada <tinst_tests+0x1292>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000a2d6:	6418                	ld	a4,8(s0)
    8000a2d8:	47bd                	li	a5,15
    8000a2da:	00f70463          	beq	a4,a5,8000a2e2 <tinst_tests+0x2a9a>
    8000a2de:	95dfe06f          	j	80008c3a <tinst_tests+0x13f2>
    8000a2e2:	7018                	ld	a4,32(s0)
    8000a2e4:	e319                	bnez	a4,8000a2ea <tinst_tests+0x2aa2>
    8000a2e6:	957fe06f          	j	80008c3c <tinst_tests+0x13f4>
    8000a2ea:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a2ec:	0016f793          	and	a5,a3,1
    8000a2f0:	c8079663          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a2f4:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a2f8:	460d                	li	a2,3
    8000a2fa:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a2fe:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a300:	00c59863          	bne	a1,a2,8000a310 <tinst_tests+0x2ac8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a304:	0026d683          	lhu	a3,2(a3)
    8000a308:	0106969b          	sllw	a3,a3,0x10
    8000a30c:	8fd5                	or	a5,a5,a3
    8000a30e:	2781                	sext.w	a5,a5
    8000a310:	1782                	sll	a5,a5,0x20
    8000a312:	fff086b7          	lui	a3,0xfff08
    8000a316:	9381                	srl	a5,a5,0x20
    8000a318:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a31a:	00d7f933          	and	s2,a5,a3
    8000a31e:	40e90933          	sub	s2,s2,a4
    8000a322:	00193913          	seqz	s2,s2
    8000a326:	917fe06f          	j	80008c3c <tinst_tests+0x13f4>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000a32a:	6418                	ld	a4,8(s0)
    8000a32c:	47bd                	li	a5,15
    8000a32e:	00f70463          	beq	a4,a5,8000a336 <tinst_tests+0x2aee>
    8000a332:	9a7fe06f          	j	80008cd8 <tinst_tests+0x1490>
    8000a336:	7018                	ld	a4,32(s0)
    8000a338:	e319                	bnez	a4,8000a33e <tinst_tests+0x2af6>
    8000a33a:	9a1fe06f          	j	80008cda <tinst_tests+0x1492>
    8000a33e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a340:	0016f793          	and	a5,a3,1
    8000a344:	c2079c63          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a348:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a34c:	460d                	li	a2,3
    8000a34e:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a352:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a354:	00c59863          	bne	a1,a2,8000a364 <tinst_tests+0x2b1c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a358:	0026d683          	lhu	a3,2(a3)
    8000a35c:	0106969b          	sllw	a3,a3,0x10
    8000a360:	8fd5                	or	a5,a5,a3
    8000a362:	2781                	sext.w	a5,a5
    8000a364:	1782                	sll	a5,a5,0x20
    8000a366:	fff086b7          	lui	a3,0xfff08
    8000a36a:	9381                	srl	a5,a5,0x20
    8000a36c:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a36e:	00d7f933          	and	s2,a5,a3
    8000a372:	40e90933          	sub	s2,s2,a4
    8000a376:	00193913          	seqz	s2,s2
    8000a37a:	961fe06f          	j	80008cda <tinst_tests+0x1492>
    instruction = *((uint16_t*)addr);
    8000a37e:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a382:	460d                	li	a2,3
    8000a384:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a388:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a38a:	00c59863          	bne	a1,a2,8000a39a <tinst_tests+0x2b52>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a38e:	0026d683          	lhu	a3,2(a3)
    8000a392:	0106969b          	sllw	a3,a3,0x10
    8000a396:	8fd5                	or	a5,a5,a3
    8000a398:	2781                	sext.w	a5,a5
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    8000a39a:	17c6                	sll	a5,a5,0x31
    8000a39c:	93c5                	srl	a5,a5,0x31
    8000a39e:	00f70463          	beq	a4,a5,8000a3a6 <tinst_tests+0x2b5e>
    8000a3a2:	e92fd06f          	j	80007a34 <tinst_tests+0x1ec>
    8000a3a6:	ea2fd06f          	j	80007a48 <tinst_tests+0x200>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000a3aa:	6418                	ld	a4,8(s0)
    8000a3ac:	47bd                	li	a5,15
    8000a3ae:	00f70463          	beq	a4,a5,8000a3b6 <tinst_tests+0x2b6e>
    8000a3b2:	9c5fe06f          	j	80008d76 <tinst_tests+0x152e>
    8000a3b6:	7018                	ld	a4,32(s0)
    8000a3b8:	e319                	bnez	a4,8000a3be <tinst_tests+0x2b76>
    8000a3ba:	9bffe06f          	j	80008d78 <tinst_tests+0x1530>
    8000a3be:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a3c0:	0016f793          	and	a5,a3,1
    8000a3c4:	ba079c63          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a3c8:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a3cc:	460d                	li	a2,3
    8000a3ce:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a3d2:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a3d4:	00c59863          	bne	a1,a2,8000a3e4 <tinst_tests+0x2b9c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a3d8:	0026d683          	lhu	a3,2(a3)
    8000a3dc:	0106969b          	sllw	a3,a3,0x10
    8000a3e0:	8fd5                	or	a5,a5,a3
    8000a3e2:	2781                	sext.w	a5,a5
    8000a3e4:	1782                	sll	a5,a5,0x20
    8000a3e6:	fff086b7          	lui	a3,0xfff08
    8000a3ea:	9381                	srl	a5,a5,0x20
    8000a3ec:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a3ee:	00d7f933          	and	s2,a5,a3
    8000a3f2:	40e90933          	sub	s2,s2,a4
    8000a3f6:	00193913          	seqz	s2,s2
    8000a3fa:	97ffe06f          	j	80008d78 <tinst_tests+0x1530>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000a3fe:	6418                	ld	a4,8(s0)
    8000a400:	47bd                	li	a5,15
    8000a402:	00f70463          	beq	a4,a5,8000a40a <tinst_tests+0x2bc2>
    8000a406:	a0ffe06f          	j	80008e14 <tinst_tests+0x15cc>
    8000a40a:	7018                	ld	a4,32(s0)
    8000a40c:	e319                	bnez	a4,8000a412 <tinst_tests+0x2bca>
    8000a40e:	a09fe06f          	j	80008e16 <tinst_tests+0x15ce>
    8000a412:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a414:	0016f793          	and	a5,a3,1
    8000a418:	b6079263          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a41c:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a420:	460d                	li	a2,3
    8000a422:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a426:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a428:	00c59863          	bne	a1,a2,8000a438 <tinst_tests+0x2bf0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a42c:	0026d683          	lhu	a3,2(a3)
    8000a430:	0106969b          	sllw	a3,a3,0x10
    8000a434:	8fd5                	or	a5,a5,a3
    8000a436:	2781                	sext.w	a5,a5
    8000a438:	1782                	sll	a5,a5,0x20
    8000a43a:	fff086b7          	lui	a3,0xfff08
    8000a43e:	9381                	srl	a5,a5,0x20
    8000a440:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a442:	00d7f933          	and	s2,a5,a3
    8000a446:	40e90933          	sub	s2,s2,a4
    8000a44a:	00193913          	seqz	s2,s2
    8000a44e:	9c9fe06f          	j	80008e16 <tinst_tests+0x15ce>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000a452:	02043983          	ld	s3,32(s0)
    8000a456:	00099463          	bnez	s3,8000a45e <tinst_tests+0x2c16>
    8000a45a:	cf3fd06f          	j	8000814c <tinst_tests+0x904>
    8000a45e:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a460:	0017f713          	and	a4,a5,1
    8000a464:	b0071c63          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a468:	0007d503          	lhu	a0,0(a5)
    8000a46c:	dddf60ef          	jal	80001248 <expand_compressed_instruction>
    8000a470:	01f077b7          	lui	a5,0x1f07
    8000a474:	0005091b          	sext.w	s2,a0
    8000a478:	07d78793          	add	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000a47c:	00f97933          	and	s2,s2,a5
    8000a480:	41390933          	sub	s2,s2,s3
    8000a484:	00193913          	seqz	s2,s2
    8000a488:	cc5fd06f          	j	8000814c <tinst_tests+0x904>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000a48c:	7004                	ld	s1,32(s0)
    8000a48e:	e099                	bnez	s1,8000a494 <tinst_tests+0x2c4c>
    8000a490:	d5ffd06f          	j	800081ee <tinst_tests+0x9a6>
    8000a494:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a496:	0017f713          	and	a4,a5,1
    8000a49a:	ae071163          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a49e:	0007d503          	lhu	a0,0(a5)
    8000a4a2:	da7f60ef          	jal	80001248 <expand_compressed_instruction>
    8000a4a6:	01f077b7          	lui	a5,0x1f07
    8000a4aa:	0005091b          	sext.w	s2,a0
    8000a4ae:	07d78793          	add	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000a4b2:	00f97933          	and	s2,s2,a5
    8000a4b6:	40990933          	sub	s2,s2,s1
    8000a4ba:	00193913          	seqz	s2,s2
    8000a4be:	d31fd06f          	j	800081ee <tinst_tests+0x9a6>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    8000a4c2:	7018                	ld	a4,32(s0)
    8000a4c4:	e319                	bnez	a4,8000a4ca <tinst_tests+0x2c82>
    8000a4c6:	dd1fd06f          	j	80008296 <tinst_tests+0xa4e>
    8000a4ca:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a4cc:	0016f793          	and	a5,a3,1
    8000a4d0:	aa079663          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a4d4:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a4d8:	460d                	li	a2,3
    8000a4da:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a4de:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a4e0:	00c59863          	bne	a1,a2,8000a4f0 <tinst_tests+0x2ca8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a4e4:	0026d683          	lhu	a3,2(a3)
    8000a4e8:	0106969b          	sllw	a3,a3,0x10
    8000a4ec:	8fd5                	or	a5,a5,a3
    8000a4ee:	2781                	sext.w	a5,a5
    8000a4f0:	1782                	sll	a5,a5,0x20
    8000a4f2:	fff086b7          	lui	a3,0xfff08
    8000a4f6:	9381                	srl	a5,a5,0x20
    8000a4f8:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a4fa:	00d7f933          	and	s2,a5,a3
    8000a4fe:	40e90933          	sub	s2,s2,a4
    8000a502:	00193913          	seqz	s2,s2
    8000a506:	d91fd06f          	j	80008296 <tinst_tests+0xa4e>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    8000a50a:	7018                	ld	a4,32(s0)
    8000a50c:	e319                	bnez	a4,8000a512 <tinst_tests+0x2cca>
    8000a50e:	e2ffd06f          	j	8000833c <tinst_tests+0xaf4>
    8000a512:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a514:	0016f793          	and	a5,a3,1
    8000a518:	a6079263          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a51c:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a520:	460d                	li	a2,3
    8000a522:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a526:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a528:	00c59863          	bne	a1,a2,8000a538 <tinst_tests+0x2cf0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a52c:	0026d683          	lhu	a3,2(a3)
    8000a530:	0106969b          	sllw	a3,a3,0x10
    8000a534:	8fd5                	or	a5,a5,a3
    8000a536:	2781                	sext.w	a5,a5
    8000a538:	1782                	sll	a5,a5,0x20
    8000a53a:	fff086b7          	lui	a3,0xfff08
    8000a53e:	9381                	srl	a5,a5,0x20
    8000a540:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a542:	00d7f933          	and	s2,a5,a3
    8000a546:	40e90933          	sub	s2,s2,a4
    8000a54a:	00193913          	seqz	s2,s2
    8000a54e:	deffd06f          	j	8000833c <tinst_tests+0xaf4>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    8000a552:	7018                	ld	a4,32(s0)
    8000a554:	e319                	bnez	a4,8000a55a <tinst_tests+0x2d12>
    8000a556:	e8bfd06f          	j	800083e0 <tinst_tests+0xb98>
    8000a55a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a55c:	0016f793          	and	a5,a3,1
    8000a560:	a0079e63          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a564:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a568:	460d                	li	a2,3
    8000a56a:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a56e:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a570:	00c59863          	bne	a1,a2,8000a580 <tinst_tests+0x2d38>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a574:	0026d683          	lhu	a3,2(a3)
    8000a578:	0106969b          	sllw	a3,a3,0x10
    8000a57c:	8fd5                	or	a5,a5,a3
    8000a57e:	2781                	sext.w	a5,a5
    8000a580:	1782                	sll	a5,a5,0x20
    8000a582:	fff086b7          	lui	a3,0xfff08
    8000a586:	9381                	srl	a5,a5,0x20
    8000a588:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a58a:	00d7f933          	and	s2,a5,a3
    8000a58e:	40e90933          	sub	s2,s2,a4
    8000a592:	00193913          	seqz	s2,s2
    8000a596:	e4bfd06f          	j	800083e0 <tinst_tests+0xb98>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    8000a59a:	7018                	ld	a4,32(s0)
    8000a59c:	e319                	bnez	a4,8000a5a2 <tinst_tests+0x2d5a>
    8000a59e:	edbfd06f          	j	80008478 <tinst_tests+0xc30>
    8000a5a2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a5a4:	0016f793          	and	a5,a3,1
    8000a5a8:	9c079a63          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a5ac:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a5b0:	460d                	li	a2,3
    8000a5b2:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a5b6:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a5b8:	00c59863          	bne	a1,a2,8000a5c8 <tinst_tests+0x2d80>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a5bc:	0026d683          	lhu	a3,2(a3)
    8000a5c0:	0106969b          	sllw	a3,a3,0x10
    8000a5c4:	8fd5                	or	a5,a5,a3
    8000a5c6:	2781                	sext.w	a5,a5
    8000a5c8:	1782                	sll	a5,a5,0x20
    8000a5ca:	fff086b7          	lui	a3,0xfff08
    8000a5ce:	9381                	srl	a5,a5,0x20
    8000a5d0:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a5d2:	00d7f933          	and	s2,a5,a3
    8000a5d6:	40e90933          	sub	s2,s2,a4
    8000a5da:	00193913          	seqz	s2,s2
    8000a5de:	e9bfd06f          	j	80008478 <tinst_tests+0xc30>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000a5e2:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a5e4:	0017f713          	and	a4,a5,1
    8000a5e8:	98071a63          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a5ec:	0007d503          	lhu	a0,0(a5)
    8000a5f0:	c59f60ef          	jal	80001248 <expand_compressed_instruction>
    8000a5f4:	67a1                	lui	a5,0x8
    8000a5f6:	17f5                	add	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000a5f8:	8fe9                	and	a5,a5,a0
    8000a5fa:	1782                	sll	a5,a5,0x20
    8000a5fc:	9381                	srl	a5,a5,0x20
    8000a5fe:	00f48463          	beq	s1,a5,8000a606 <tinst_tests+0x2dbe>
    8000a602:	9bffd06f          	j	80007fc0 <tinst_tests+0x778>
    8000a606:	00013597          	auipc	a1,0x13
    8000a60a:	96a58593          	add	a1,a1,-1686 # 8001cf70 <__func__.1+0x2c8>
    8000a60e:	9bbfd06f          	j	80007fc8 <tinst_tests+0x780>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    8000a612:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a614:	0017f713          	and	a4,a5,1
    8000a618:	96071263          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a61c:	0007d503          	lhu	a0,0(a5)
    8000a620:	c29f60ef          	jal	80001248 <expand_compressed_instruction>
    8000a624:	67a1                	lui	a5,0x8
    8000a626:	17f5                	add	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000a628:	8fe9                	and	a5,a5,a0
    8000a62a:	1782                	sll	a5,a5,0x20
    8000a62c:	9381                	srl	a5,a5,0x20
    8000a62e:	00f98463          	beq	s3,a5,8000a636 <tinst_tests+0x2dee>
    8000a632:	a29fd06f          	j	8000805a <tinst_tests+0x812>
    8000a636:	00013597          	auipc	a1,0x13
    8000a63a:	93a58593          	add	a1,a1,-1734 # 8001cf70 <__func__.1+0x2c8>
    8000a63e:	a25fd06f          	j	80008062 <tinst_tests+0x81a>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    8000a642:	7018                	ld	a4,32(s0)
    8000a644:	e319                	bnez	a4,8000a64a <tinst_tests+0x2e02>
    8000a646:	ed9fd06f          	j	8000851e <tinst_tests+0xcd6>
    8000a64a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a64c:	0016f793          	and	a5,a3,1
    8000a650:	92079663          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a654:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a658:	460d                	li	a2,3
    8000a65a:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a65e:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a660:	00c59863          	bne	a1,a2,8000a670 <tinst_tests+0x2e28>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a664:	0026d683          	lhu	a3,2(a3)
    8000a668:	0106969b          	sllw	a3,a3,0x10
    8000a66c:	8fd5                	or	a5,a5,a3
    8000a66e:	2781                	sext.w	a5,a5
    8000a670:	1782                	sll	a5,a5,0x20
    8000a672:	fff086b7          	lui	a3,0xfff08
    8000a676:	9381                	srl	a5,a5,0x20
    8000a678:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a67a:	00d7f933          	and	s2,a5,a3
    8000a67e:	40e90933          	sub	s2,s2,a4
    8000a682:	00193913          	seqz	s2,s2
    8000a686:	e99fd06f          	j	8000851e <tinst_tests+0xcd6>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000a68a:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a68c:	0017f713          	and	a4,a5,1
    8000a690:	8e071663          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a694:	0007d503          	lhu	a0,0(a5)
    8000a698:	bb1f60ef          	jal	80001248 <expand_compressed_instruction>
    8000a69c:	01f07737          	lui	a4,0x1f07
    8000a6a0:	0005079b          	sext.w	a5,a0
    8000a6a4:	07d70713          	add	a4,a4,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000a6a8:	8ff9                	and	a5,a5,a4
    8000a6aa:	00f98463          	beq	s3,a5,8000a6b2 <tinst_tests+0x2e6a>
    8000a6ae:	a47fd06f          	j	800080f4 <tinst_tests+0x8ac>
    8000a6b2:	00013597          	auipc	a1,0x13
    8000a6b6:	8be58593          	add	a1,a1,-1858 # 8001cf70 <__func__.1+0x2c8>
    8000a6ba:	a43fd06f          	j	800080fc <tinst_tests+0x8b4>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    8000a6be:	7018                	ld	a4,32(s0)
    8000a6c0:	e319                	bnez	a4,8000a6c6 <tinst_tests+0x2e7e>
    8000a6c2:	f03fd06f          	j	800085c4 <tinst_tests+0xd7c>
    8000a6c6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a6c8:	0016f793          	and	a5,a3,1
    8000a6cc:	8a079863          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a6d0:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a6d4:	460d                	li	a2,3
    8000a6d6:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a6da:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a6dc:	00c59863          	bne	a1,a2,8000a6ec <tinst_tests+0x2ea4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a6e0:	0026d683          	lhu	a3,2(a3)
    8000a6e4:	0106969b          	sllw	a3,a3,0x10
    8000a6e8:	8fd5                	or	a5,a5,a3
    8000a6ea:	2781                	sext.w	a5,a5
    8000a6ec:	1782                	sll	a5,a5,0x20
    8000a6ee:	fff086b7          	lui	a3,0xfff08
    8000a6f2:	9381                	srl	a5,a5,0x20
    8000a6f4:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a6f6:	00d7f933          	and	s2,a5,a3
    8000a6fa:	40e90933          	sub	s2,s2,a4
    8000a6fe:	00193913          	seqz	s2,s2
    8000a702:	ec3fd06f          	j	800085c4 <tinst_tests+0xd7c>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000a706:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a708:	0017f713          	and	a4,a5,1
    8000a70c:	86071863          	bnez	a4,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a710:	0007d503          	lhu	a0,0(a5)
    8000a714:	b35f60ef          	jal	80001248 <expand_compressed_instruction>
    8000a718:	01f07737          	lui	a4,0x1f07
    8000a71c:	0005079b          	sext.w	a5,a0
    8000a720:	07d70713          	add	a4,a4,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000a724:	8ff9                	and	a5,a5,a4
    8000a726:	00f48463          	beq	s1,a5,8000a72e <tinst_tests+0x2ee6>
    8000a72a:	a6dfd06f          	j	80008196 <tinst_tests+0x94e>
    8000a72e:	00013597          	auipc	a1,0x13
    8000a732:	84258593          	add	a1,a1,-1982 # 8001cf70 <__func__.1+0x2c8>
    8000a736:	a69fd06f          	j	8000819e <tinst_tests+0x956>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    8000a73a:	7018                	ld	a4,32(s0)
    8000a73c:	e319                	bnez	a4,8000a742 <tinst_tests+0x2efa>
    8000a73e:	f2dfd06f          	j	8000866a <tinst_tests+0xe22>
    8000a742:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a744:	0016f793          	and	a5,a3,1
    8000a748:	82079a63          	bnez	a5,8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a74c:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a750:	460d                	li	a2,3
    8000a752:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a756:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a758:	00c59863          	bne	a1,a2,8000a768 <tinst_tests+0x2f20>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a75c:	0026d683          	lhu	a3,2(a3)
    8000a760:	0106969b          	sllw	a3,a3,0x10
    8000a764:	8fd5                	or	a5,a5,a3
    8000a766:	2781                	sext.w	a5,a5
    8000a768:	1782                	sll	a5,a5,0x20
    8000a76a:	fff086b7          	lui	a3,0xfff08
    8000a76e:	9381                	srl	a5,a5,0x20
    8000a770:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a772:	00d7f933          	and	s2,a5,a3
    8000a776:	40e90933          	sub	s2,s2,a4
    8000a77a:	00193913          	seqz	s2,s2
    8000a77e:	eedfd06f          	j	8000866a <tinst_tests+0xe22>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    8000a782:	7018                	ld	a4,32(s0)
    8000a784:	e319                	bnez	a4,8000a78a <tinst_tests+0x2f42>
    8000a786:	f8bfd06f          	j	80008710 <tinst_tests+0xec8>
    8000a78a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a78c:	0016f793          	and	a5,a3,1
    8000a790:	c399                	beqz	a5,8000a796 <tinst_tests+0x2f4e>
    8000a792:	febfe06f          	j	8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a796:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a79a:	460d                	li	a2,3
    8000a79c:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a7a0:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a7a2:	00c59863          	bne	a1,a2,8000a7b2 <tinst_tests+0x2f6a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a7a6:	0026d683          	lhu	a3,2(a3)
    8000a7aa:	0106969b          	sllw	a3,a3,0x10
    8000a7ae:	8fd5                	or	a5,a5,a3
    8000a7b0:	2781                	sext.w	a5,a5
    8000a7b2:	1782                	sll	a5,a5,0x20
    8000a7b4:	fff086b7          	lui	a3,0xfff08
    8000a7b8:	9381                	srl	a5,a5,0x20
    8000a7ba:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a7bc:	00d7f933          	and	s2,a5,a3
    8000a7c0:	40e90933          	sub	s2,s2,a4
    8000a7c4:	00193913          	seqz	s2,s2
    8000a7c8:	f49fd06f          	j	80008710 <tinst_tests+0xec8>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    8000a7cc:	7018                	ld	a4,32(s0)
    8000a7ce:	e319                	bnez	a4,8000a7d4 <tinst_tests+0x2f8c>
    8000a7d0:	fe7fd06f          	j	800087b6 <tinst_tests+0xf6e>
    8000a7d4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a7d6:	0016f793          	and	a5,a3,1
    8000a7da:	c399                	beqz	a5,8000a7e0 <tinst_tests+0x2f98>
    8000a7dc:	fa1fe06f          	j	8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a7e0:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a7e4:	460d                	li	a2,3
    8000a7e6:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a7ea:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a7ec:	00c59863          	bne	a1,a2,8000a7fc <tinst_tests+0x2fb4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a7f0:	0026d683          	lhu	a3,2(a3)
    8000a7f4:	0106969b          	sllw	a3,a3,0x10
    8000a7f8:	8fd5                	or	a5,a5,a3
    8000a7fa:	2781                	sext.w	a5,a5
    8000a7fc:	1782                	sll	a5,a5,0x20
    8000a7fe:	fff086b7          	lui	a3,0xfff08
    8000a802:	9381                	srl	a5,a5,0x20
    8000a804:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a806:	00d7f933          	and	s2,a5,a3
    8000a80a:	40e90933          	sub	s2,s2,a4
    8000a80e:	00193913          	seqz	s2,s2
    8000a812:	fa5fd06f          	j	800087b6 <tinst_tests+0xf6e>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    8000a816:	7018                	ld	a4,32(s0)
    8000a818:	e319                	bnez	a4,8000a81e <tinst_tests+0x2fd6>
    8000a81a:	842fe06f          	j	8000885c <tinst_tests+0x1014>
    8000a81e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a820:	0016f793          	and	a5,a3,1
    8000a824:	c399                	beqz	a5,8000a82a <tinst_tests+0x2fe2>
    8000a826:	f57fe06f          	j	8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a82a:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a82e:	460d                	li	a2,3
    8000a830:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a834:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a836:	00c59863          	bne	a1,a2,8000a846 <tinst_tests+0x2ffe>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a83a:	0026d683          	lhu	a3,2(a3)
    8000a83e:	0106969b          	sllw	a3,a3,0x10
    8000a842:	8fd5                	or	a5,a5,a3
    8000a844:	2781                	sext.w	a5,a5
    8000a846:	1782                	sll	a5,a5,0x20
    8000a848:	fff086b7          	lui	a3,0xfff08
    8000a84c:	9381                	srl	a5,a5,0x20
    8000a84e:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a850:	00d7f933          	and	s2,a5,a3
    8000a854:	40e90933          	sub	s2,s2,a4
    8000a858:	00193913          	seqz	s2,s2
    8000a85c:	800fe06f          	j	8000885c <tinst_tests+0x1014>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000a860:	7018                	ld	a4,32(s0)
    8000a862:	e319                	bnez	a4,8000a868 <tinst_tests+0x3020>
    8000a864:	8a2fe06f          	j	80008906 <tinst_tests+0x10be>
    8000a868:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a86a:	0016f793          	and	a5,a3,1
    8000a86e:	c399                	beqz	a5,8000a874 <tinst_tests+0x302c>
    8000a870:	f0dfe06f          	j	8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a874:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a878:	460d                	li	a2,3
    8000a87a:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a87e:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a880:	00c59863          	bne	a1,a2,8000a890 <tinst_tests+0x3048>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a884:	0026d683          	lhu	a3,2(a3)
    8000a888:	0106969b          	sllw	a3,a3,0x10
    8000a88c:	8fd5                	or	a5,a5,a3
    8000a88e:	2781                	sext.w	a5,a5
    8000a890:	1782                	sll	a5,a5,0x20
    8000a892:	fff086b7          	lui	a3,0xfff08
    8000a896:	9381                	srl	a5,a5,0x20
    8000a898:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a89a:	00d7f933          	and	s2,a5,a3
    8000a89e:	40e90933          	sub	s2,s2,a4
    8000a8a2:	00193913          	seqz	s2,s2
    8000a8a6:	860fe06f          	j	80008906 <tinst_tests+0x10be>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000a8aa:	7018                	ld	a4,32(s0)
    8000a8ac:	e319                	bnez	a4,8000a8b2 <tinst_tests+0x306a>
    8000a8ae:	8fefe06f          	j	800089ac <tinst_tests+0x1164>
    8000a8b2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a8b4:	0016f793          	and	a5,a3,1
    8000a8b8:	c399                	beqz	a5,8000a8be <tinst_tests+0x3076>
    8000a8ba:	ec3fe06f          	j	8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a8be:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a8c2:	460d                	li	a2,3
    8000a8c4:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a8c8:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a8ca:	00c59863          	bne	a1,a2,8000a8da <tinst_tests+0x3092>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a8ce:	0026d683          	lhu	a3,2(a3)
    8000a8d2:	0106969b          	sllw	a3,a3,0x10
    8000a8d6:	8fd5                	or	a5,a5,a3
    8000a8d8:	2781                	sext.w	a5,a5
    8000a8da:	1782                	sll	a5,a5,0x20
    8000a8dc:	fff086b7          	lui	a3,0xfff08
    8000a8e0:	9381                	srl	a5,a5,0x20
    8000a8e2:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a8e4:	00d7f933          	and	s2,a5,a3
    8000a8e8:	40e90933          	sub	s2,s2,a4
    8000a8ec:	00193913          	seqz	s2,s2
    8000a8f0:	8bcfe06f          	j	800089ac <tinst_tests+0x1164>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000a8f4:	7018                	ld	a4,32(s0)
    8000a8f6:	e319                	bnez	a4,8000a8fc <tinst_tests+0x30b4>
    8000a8f8:	95afe06f          	j	80008a52 <tinst_tests+0x120a>
    8000a8fc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a8fe:	0016f793          	and	a5,a3,1
    8000a902:	c399                	beqz	a5,8000a908 <tinst_tests+0x30c0>
    8000a904:	e79fe06f          	j	8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a908:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a90c:	460d                	li	a2,3
    8000a90e:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a912:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a914:	00c59863          	bne	a1,a2,8000a924 <tinst_tests+0x30dc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a918:	0026d683          	lhu	a3,2(a3)
    8000a91c:	0106969b          	sllw	a3,a3,0x10
    8000a920:	8fd5                	or	a5,a5,a3
    8000a922:	2781                	sext.w	a5,a5
    8000a924:	1782                	sll	a5,a5,0x20
    8000a926:	fff086b7          	lui	a3,0xfff08
    8000a92a:	9381                	srl	a5,a5,0x20
    8000a92c:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a92e:	00d7f933          	and	s2,a5,a3
    8000a932:	40e90933          	sub	s2,s2,a4
    8000a936:	00193913          	seqz	s2,s2
    8000a93a:	918fe06f          	j	80008a52 <tinst_tests+0x120a>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000a93e:	7018                	ld	a4,32(s0)
    8000a940:	e319                	bnez	a4,8000a946 <tinst_tests+0x30fe>
    8000a942:	9b6fe06f          	j	80008af8 <tinst_tests+0x12b0>
    8000a946:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a948:	0016f793          	and	a5,a3,1
    8000a94c:	c399                	beqz	a5,8000a952 <tinst_tests+0x310a>
    8000a94e:	e2ffe06f          	j	8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a952:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a956:	460d                	li	a2,3
    8000a958:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a95c:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a95e:	00c59863          	bne	a1,a2,8000a96e <tinst_tests+0x3126>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a962:	0026d683          	lhu	a3,2(a3)
    8000a966:	0106969b          	sllw	a3,a3,0x10
    8000a96a:	8fd5                	or	a5,a5,a3
    8000a96c:	2781                	sext.w	a5,a5
    8000a96e:	1782                	sll	a5,a5,0x20
    8000a970:	fff086b7          	lui	a3,0xfff08
    8000a974:	9381                	srl	a5,a5,0x20
    8000a976:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a978:	00d7f933          	and	s2,a5,a3
    8000a97c:	40e90933          	sub	s2,s2,a4
    8000a980:	00193913          	seqz	s2,s2
    8000a984:	974fe06f          	j	80008af8 <tinst_tests+0x12b0>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    8000a988:	7018                	ld	a4,32(s0)
    8000a98a:	e319                	bnez	a4,8000a990 <tinst_tests+0x3148>
    8000a98c:	a12fe06f          	j	80008b9e <tinst_tests+0x1356>
    8000a990:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a992:	0016f793          	and	a5,a3,1
    8000a996:	c399                	beqz	a5,8000a99c <tinst_tests+0x3154>
    8000a998:	de5fe06f          	j	8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a99c:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a9a0:	460d                	li	a2,3
    8000a9a2:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a9a6:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a9a8:	00c59863          	bne	a1,a2,8000a9b8 <tinst_tests+0x3170>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a9ac:	0026d683          	lhu	a3,2(a3)
    8000a9b0:	0106969b          	sllw	a3,a3,0x10
    8000a9b4:	8fd5                	or	a5,a5,a3
    8000a9b6:	2781                	sext.w	a5,a5
    8000a9b8:	1782                	sll	a5,a5,0x20
    8000a9ba:	fff086b7          	lui	a3,0xfff08
    8000a9be:	9381                	srl	a5,a5,0x20
    8000a9c0:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000a9c2:	00d7f933          	and	s2,a5,a3
    8000a9c6:	40e90933          	sub	s2,s2,a4
    8000a9ca:	00193913          	seqz	s2,s2
    8000a9ce:	9d0fe06f          	j	80008b9e <tinst_tests+0x1356>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    8000a9d2:	7018                	ld	a4,32(s0)
    8000a9d4:	00012597          	auipc	a1,0x12
    8000a9d8:	59c58593          	add	a1,a1,1436 # 8001cf70 <__func__.1+0x2c8>
    8000a9dc:	e319                	bnez	a4,8000a9e2 <tinst_tests+0x319a>
    8000a9de:	d89fd06f          	j	80008766 <tinst_tests+0xf1e>
    8000a9e2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a9e4:	0016f793          	and	a5,a3,1
    8000a9e8:	c399                	beqz	a5,8000a9ee <tinst_tests+0x31a6>
    8000a9ea:	d93fe06f          	j	8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000a9ee:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a9f2:	460d                	li	a2,3
    8000a9f4:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000a9f8:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a9fa:	00c59863          	bne	a1,a2,8000aa0a <tinst_tests+0x31c2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a9fe:	0026d683          	lhu	a3,2(a3)
    8000aa02:	0106969b          	sllw	a3,a3,0x10
    8000aa06:	8fd5                	or	a5,a5,a3
    8000aa08:	2781                	sext.w	a5,a5
    8000aa0a:	1782                	sll	a5,a5,0x20
    8000aa0c:	fff086b7          	lui	a3,0xfff08
    8000aa10:	9381                	srl	a5,a5,0x20
    8000aa12:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000aa14:	8ff5                	and	a5,a5,a3
    8000aa16:	00012597          	auipc	a1,0x12
    8000aa1a:	56a58593          	add	a1,a1,1386 # 8001cf80 <__func__.1+0x2d8>
    8000aa1e:	00f70463          	beq	a4,a5,8000aa26 <tinst_tests+0x31de>
    8000aa22:	d45fd06f          	j	80008766 <tinst_tests+0xf1e>
    8000aa26:	00012597          	auipc	a1,0x12
    8000aa2a:	54a58593          	add	a1,a1,1354 # 8001cf70 <__func__.1+0x2c8>
    8000aa2e:	d39fd06f          	j	80008766 <tinst_tests+0xf1e>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    8000aa32:	701c                	ld	a5,32(s0)
    8000aa34:	e399                	bnez	a5,8000aa3a <tinst_tests+0x31f2>
    8000aa36:	94afe06f          	j	80008b80 <tinst_tests+0x1338>
    8000aa3a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aa3c:	0016f713          	and	a4,a3,1
    8000aa40:	c319                	beqz	a4,8000aa46 <tinst_tests+0x31fe>
    8000aa42:	d3bfe06f          	j	8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000aa46:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aa4a:	460d                	li	a2,3
    8000aa4c:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    8000aa50:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aa52:	00c59863          	bne	a1,a2,8000aa62 <tinst_tests+0x321a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aa56:	0026d683          	lhu	a3,2(a3)
    8000aa5a:	0106969b          	sllw	a3,a3,0x10
    8000aa5e:	8f55                	or	a4,a4,a3
    8000aa60:	2701                	sext.w	a4,a4
    8000aa62:	1702                	sll	a4,a4,0x20
    8000aa64:	fff086b7          	lui	a3,0xfff08
    8000aa68:	9301                	srl	a4,a4,0x20
    8000aa6a:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000aa6c:	8f75                	and	a4,a4,a3
    8000aa6e:	00e78463          	beq	a5,a4,8000aa76 <tinst_tests+0x322e>
    8000aa72:	8fafe06f          	j	80008b6c <tinst_tests+0x1324>
    8000aa76:	90afe06f          	j	80008b80 <tinst_tests+0x1338>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    8000aa7a:	701c                	ld	a5,32(s0)
    8000aa7c:	00012597          	auipc	a1,0x12
    8000aa80:	4f458593          	add	a1,a1,1268 # 8001cf70 <__func__.1+0x2c8>
    8000aa84:	e399                	bnez	a5,8000aa8a <tinst_tests+0x3242>
    8000aa86:	d87fd06f          	j	8000880c <tinst_tests+0xfc4>
    8000aa8a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aa8c:	0016f713          	and	a4,a3,1
    8000aa90:	c319                	beqz	a4,8000aa96 <tinst_tests+0x324e>
    8000aa92:	cebfe06f          	j	8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000aa96:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aa9a:	460d                	li	a2,3
    8000aa9c:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    8000aaa0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aaa2:	00c59863          	bne	a1,a2,8000aab2 <tinst_tests+0x326a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aaa6:	0026d683          	lhu	a3,2(a3)
    8000aaaa:	0106969b          	sllw	a3,a3,0x10
    8000aaae:	8f55                	or	a4,a4,a3
    8000aab0:	2701                	sext.w	a4,a4
    8000aab2:	1702                	sll	a4,a4,0x20
    8000aab4:	fff086b7          	lui	a3,0xfff08
    8000aab8:	9301                	srl	a4,a4,0x20
    8000aaba:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000aabc:	8f75                	and	a4,a4,a3
    8000aabe:	00012597          	auipc	a1,0x12
    8000aac2:	4c258593          	add	a1,a1,1218 # 8001cf80 <__func__.1+0x2d8>
    8000aac6:	00e78463          	beq	a5,a4,8000aace <tinst_tests+0x3286>
    8000aaca:	d43fd06f          	j	8000880c <tinst_tests+0xfc4>
    8000aace:	00012597          	auipc	a1,0x12
    8000aad2:	4a258593          	add	a1,a1,1186 # 8001cf70 <__func__.1+0x2c8>
    8000aad6:	d37fd06f          	j	8000880c <tinst_tests+0xfc4>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000aada:	7018                	ld	a4,32(s0)
    8000aadc:	e319                	bnez	a4,8000aae2 <tinst_tests+0x329a>
    8000aade:	948fe06f          	j	80008c26 <tinst_tests+0x13de>
    8000aae2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aae4:	0016f793          	and	a5,a3,1
    8000aae8:	c399                	beqz	a5,8000aaee <tinst_tests+0x32a6>
    8000aaea:	c93fe06f          	j	8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000aaee:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aaf2:	460d                	li	a2,3
    8000aaf4:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000aaf8:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000aafa:	00c59863          	bne	a1,a2,8000ab0a <tinst_tests+0x32c2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aafe:	0026d683          	lhu	a3,2(a3)
    8000ab02:	0106969b          	sllw	a3,a3,0x10
    8000ab06:	8fd5                	or	a5,a5,a3
    8000ab08:	2781                	sext.w	a5,a5
    8000ab0a:	1782                	sll	a5,a5,0x20
    8000ab0c:	fff086b7          	lui	a3,0xfff08
    8000ab10:	9381                	srl	a5,a5,0x20
    8000ab12:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000ab14:	8ff5                	and	a5,a5,a3
    8000ab16:	00f70463          	beq	a4,a5,8000ab1e <tinst_tests+0x32d6>
    8000ab1a:	8f8fe06f          	j	80008c12 <tinst_tests+0x13ca>
    8000ab1e:	908fe06f          	j	80008c26 <tinst_tests+0x13de>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000ab22:	701c                	ld	a5,32(s0)
    8000ab24:	00012597          	auipc	a1,0x12
    8000ab28:	44c58593          	add	a1,a1,1100 # 8001cf70 <__func__.1+0x2c8>
    8000ab2c:	e399                	bnez	a5,8000ab32 <tinst_tests+0x32ea>
    8000ab2e:	d89fd06f          	j	800088b6 <tinst_tests+0x106e>
    8000ab32:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ab34:	0016f713          	and	a4,a3,1
    8000ab38:	c319                	beqz	a4,8000ab3e <tinst_tests+0x32f6>
    8000ab3a:	c43fe06f          	j	8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000ab3e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ab42:	460d                	li	a2,3
    8000ab44:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    8000ab48:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ab4a:	00c59863          	bne	a1,a2,8000ab5a <tinst_tests+0x3312>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ab4e:	0026d683          	lhu	a3,2(a3)
    8000ab52:	0106969b          	sllw	a3,a3,0x10
    8000ab56:	8f55                	or	a4,a4,a3
    8000ab58:	2701                	sext.w	a4,a4
    8000ab5a:	1702                	sll	a4,a4,0x20
    8000ab5c:	fff086b7          	lui	a3,0xfff08
    8000ab60:	9301                	srl	a4,a4,0x20
    8000ab62:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000ab64:	8f75                	and	a4,a4,a3
    8000ab66:	00012597          	auipc	a1,0x12
    8000ab6a:	41a58593          	add	a1,a1,1050 # 8001cf80 <__func__.1+0x2d8>
    8000ab6e:	00e78463          	beq	a5,a4,8000ab76 <tinst_tests+0x332e>
    8000ab72:	d45fd06f          	j	800088b6 <tinst_tests+0x106e>
    8000ab76:	00012597          	auipc	a1,0x12
    8000ab7a:	3fa58593          	add	a1,a1,1018 # 8001cf70 <__func__.1+0x2c8>
    8000ab7e:	d39fd06f          	j	800088b6 <tinst_tests+0x106e>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000ab82:	7018                	ld	a4,32(s0)
    8000ab84:	e319                	bnez	a4,8000ab8a <tinst_tests+0x3342>
    8000ab86:	93efe06f          	j	80008cc4 <tinst_tests+0x147c>
    8000ab8a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ab8c:	0016f793          	and	a5,a3,1
    8000ab90:	c399                	beqz	a5,8000ab96 <tinst_tests+0x334e>
    8000ab92:	bebfe06f          	j	8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000ab96:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ab9a:	460d                	li	a2,3
    8000ab9c:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000aba0:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000aba2:	00c59863          	bne	a1,a2,8000abb2 <tinst_tests+0x336a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aba6:	0026d683          	lhu	a3,2(a3)
    8000abaa:	0106969b          	sllw	a3,a3,0x10
    8000abae:	8fd5                	or	a5,a5,a3
    8000abb0:	2781                	sext.w	a5,a5
    8000abb2:	1782                	sll	a5,a5,0x20
    8000abb4:	fff086b7          	lui	a3,0xfff08
    8000abb8:	9381                	srl	a5,a5,0x20
    8000abba:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000abbc:	8ff5                	and	a5,a5,a3
    8000abbe:	00f70463          	beq	a4,a5,8000abc6 <tinst_tests+0x337e>
    8000abc2:	8eefe06f          	j	80008cb0 <tinst_tests+0x1468>
    8000abc6:	8fefe06f          	j	80008cc4 <tinst_tests+0x147c>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000abca:	7018                	ld	a4,32(s0)
    8000abcc:	00012597          	auipc	a1,0x12
    8000abd0:	3a458593          	add	a1,a1,932 # 8001cf70 <__func__.1+0x2c8>
    8000abd4:	e319                	bnez	a4,8000abda <tinst_tests+0x3392>
    8000abd6:	d87fd06f          	j	8000895c <tinst_tests+0x1114>
    8000abda:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000abdc:	0016f793          	and	a5,a3,1
    8000abe0:	c399                	beqz	a5,8000abe6 <tinst_tests+0x339e>
    8000abe2:	b9bfe06f          	j	8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000abe6:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000abea:	460d                	li	a2,3
    8000abec:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000abf0:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000abf2:	00c59863          	bne	a1,a2,8000ac02 <tinst_tests+0x33ba>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000abf6:	0026d683          	lhu	a3,2(a3)
    8000abfa:	0106969b          	sllw	a3,a3,0x10
    8000abfe:	8fd5                	or	a5,a5,a3
    8000ac00:	2781                	sext.w	a5,a5
    8000ac02:	1782                	sll	a5,a5,0x20
    8000ac04:	fff086b7          	lui	a3,0xfff08
    8000ac08:	9381                	srl	a5,a5,0x20
    8000ac0a:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000ac0c:	8ff5                	and	a5,a5,a3
    8000ac0e:	00012597          	auipc	a1,0x12
    8000ac12:	37258593          	add	a1,a1,882 # 8001cf80 <__func__.1+0x2d8>
    8000ac16:	00f70463          	beq	a4,a5,8000ac1e <tinst_tests+0x33d6>
    8000ac1a:	d43fd06f          	j	8000895c <tinst_tests+0x1114>
    8000ac1e:	00012597          	auipc	a1,0x12
    8000ac22:	35258593          	add	a1,a1,850 # 8001cf70 <__func__.1+0x2c8>
    8000ac26:	d37fd06f          	j	8000895c <tinst_tests+0x1114>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000ac2a:	7018                	ld	a4,32(s0)
    8000ac2c:	e319                	bnez	a4,8000ac32 <tinst_tests+0x33ea>
    8000ac2e:	934fe06f          	j	80008d62 <tinst_tests+0x151a>
    8000ac32:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ac34:	0016f793          	and	a5,a3,1
    8000ac38:	c399                	beqz	a5,8000ac3e <tinst_tests+0x33f6>
    8000ac3a:	b43fe06f          	j	8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000ac3e:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ac42:	460d                	li	a2,3
    8000ac44:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000ac48:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000ac4a:	00c59863          	bne	a1,a2,8000ac5a <tinst_tests+0x3412>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ac4e:	0026d683          	lhu	a3,2(a3)
    8000ac52:	0106969b          	sllw	a3,a3,0x10
    8000ac56:	8fd5                	or	a5,a5,a3
    8000ac58:	2781                	sext.w	a5,a5
    8000ac5a:	1782                	sll	a5,a5,0x20
    8000ac5c:	fff086b7          	lui	a3,0xfff08
    8000ac60:	9381                	srl	a5,a5,0x20
    8000ac62:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000ac64:	8ff5                	and	a5,a5,a3
    8000ac66:	00f70463          	beq	a4,a5,8000ac6e <tinst_tests+0x3426>
    8000ac6a:	8e4fe06f          	j	80008d4e <tinst_tests+0x1506>
    8000ac6e:	8f4fe06f          	j	80008d62 <tinst_tests+0x151a>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000ac72:	701c                	ld	a5,32(s0)
    8000ac74:	00012597          	auipc	a1,0x12
    8000ac78:	2fc58593          	add	a1,a1,764 # 8001cf70 <__func__.1+0x2c8>
    8000ac7c:	e399                	bnez	a5,8000ac82 <tinst_tests+0x343a>
    8000ac7e:	d85fd06f          	j	80008a02 <tinst_tests+0x11ba>
    8000ac82:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ac84:	0016f713          	and	a4,a3,1
    8000ac88:	c319                	beqz	a4,8000ac8e <tinst_tests+0x3446>
    8000ac8a:	af3fe06f          	j	8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000ac8e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ac92:	460d                	li	a2,3
    8000ac94:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    8000ac98:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ac9a:	00c59863          	bne	a1,a2,8000acaa <tinst_tests+0x3462>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ac9e:	0026d683          	lhu	a3,2(a3)
    8000aca2:	0106969b          	sllw	a3,a3,0x10
    8000aca6:	8f55                	or	a4,a4,a3
    8000aca8:	2701                	sext.w	a4,a4
    8000acaa:	1702                	sll	a4,a4,0x20
    8000acac:	fff086b7          	lui	a3,0xfff08
    8000acb0:	9301                	srl	a4,a4,0x20
    8000acb2:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000acb4:	8f75                	and	a4,a4,a3
    8000acb6:	00012597          	auipc	a1,0x12
    8000acba:	2ca58593          	add	a1,a1,714 # 8001cf80 <__func__.1+0x2d8>
    8000acbe:	00e78463          	beq	a5,a4,8000acc6 <tinst_tests+0x347e>
    8000acc2:	d41fd06f          	j	80008a02 <tinst_tests+0x11ba>
    8000acc6:	00012597          	auipc	a1,0x12
    8000acca:	2aa58593          	add	a1,a1,682 # 8001cf70 <__func__.1+0x2c8>
    8000acce:	d35fd06f          	j	80008a02 <tinst_tests+0x11ba>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000acd2:	701c                	ld	a5,32(s0)
    8000acd4:	e399                	bnez	a5,8000acda <tinst_tests+0x3492>
    8000acd6:	92afe06f          	j	80008e00 <tinst_tests+0x15b8>
    8000acda:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000acdc:	0016f713          	and	a4,a3,1
    8000ace0:	c319                	beqz	a4,8000ace6 <tinst_tests+0x349e>
    8000ace2:	a9bfe06f          	j	8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000ace6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000acea:	460d                	li	a2,3
    8000acec:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    8000acf0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000acf2:	00c59863          	bne	a1,a2,8000ad02 <tinst_tests+0x34ba>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000acf6:	0026d683          	lhu	a3,2(a3)
    8000acfa:	0106969b          	sllw	a3,a3,0x10
    8000acfe:	8f55                	or	a4,a4,a3
    8000ad00:	2701                	sext.w	a4,a4
    8000ad02:	1702                	sll	a4,a4,0x20
    8000ad04:	fff086b7          	lui	a3,0xfff08
    8000ad08:	9301                	srl	a4,a4,0x20
    8000ad0a:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000ad0c:	8f75                	and	a4,a4,a3
    8000ad0e:	00e78463          	beq	a5,a4,8000ad16 <tinst_tests+0x34ce>
    8000ad12:	8dafe06f          	j	80008dec <tinst_tests+0x15a4>
    8000ad16:	8eafe06f          	j	80008e00 <tinst_tests+0x15b8>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000ad1a:	701c                	ld	a5,32(s0)
    8000ad1c:	00012597          	auipc	a1,0x12
    8000ad20:	25458593          	add	a1,a1,596 # 8001cf70 <__func__.1+0x2c8>
    8000ad24:	e399                	bnez	a5,8000ad2a <tinst_tests+0x34e2>
    8000ad26:	d83fd06f          	j	80008aa8 <tinst_tests+0x1260>
    8000ad2a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ad2c:	0016f713          	and	a4,a3,1
    8000ad30:	c319                	beqz	a4,8000ad36 <tinst_tests+0x34ee>
    8000ad32:	a4bfe06f          	j	8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000ad36:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ad3a:	460d                	li	a2,3
    8000ad3c:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    8000ad40:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ad42:	00c59863          	bne	a1,a2,8000ad52 <tinst_tests+0x350a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ad46:	0026d683          	lhu	a3,2(a3)
    8000ad4a:	0106969b          	sllw	a3,a3,0x10
    8000ad4e:	8f55                	or	a4,a4,a3
    8000ad50:	2701                	sext.w	a4,a4
    8000ad52:	1702                	sll	a4,a4,0x20
    8000ad54:	fff086b7          	lui	a3,0xfff08
    8000ad58:	9301                	srl	a4,a4,0x20
    8000ad5a:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000ad5c:	8f75                	and	a4,a4,a3
    8000ad5e:	00012597          	auipc	a1,0x12
    8000ad62:	22258593          	add	a1,a1,546 # 8001cf80 <__func__.1+0x2d8>
    8000ad66:	00e78463          	beq	a5,a4,8000ad6e <tinst_tests+0x3526>
    8000ad6a:	d3ffd06f          	j	80008aa8 <tinst_tests+0x1260>
    8000ad6e:	00012597          	auipc	a1,0x12
    8000ad72:	20258593          	add	a1,a1,514 # 8001cf70 <__func__.1+0x2c8>
    8000ad76:	d33fd06f          	j	80008aa8 <tinst_tests+0x1260>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    8000ad7a:	7018                	ld	a4,32(s0)
    8000ad7c:	e319                	bnez	a4,8000ad82 <tinst_tests+0x353a>
    8000ad7e:	920fe06f          	j	80008e9e <tinst_tests+0x1656>
    8000ad82:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ad84:	0016f793          	and	a5,a3,1
    8000ad88:	c399                	beqz	a5,8000ad8e <tinst_tests+0x3546>
    8000ad8a:	9f3fe06f          	j	8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000ad8e:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ad92:	460d                	li	a2,3
    8000ad94:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000ad98:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000ad9a:	00c59863          	bne	a1,a2,8000adaa <tinst_tests+0x3562>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ad9e:	0026d683          	lhu	a3,2(a3)
    8000ada2:	0106969b          	sllw	a3,a3,0x10
    8000ada6:	8fd5                	or	a5,a5,a3
    8000ada8:	2781                	sext.w	a5,a5
    8000adaa:	1782                	sll	a5,a5,0x20
    8000adac:	fff086b7          	lui	a3,0xfff08
    8000adb0:	9381                	srl	a5,a5,0x20
    8000adb2:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000adb4:	8ff5                	and	a5,a5,a3
    8000adb6:	00f70463          	beq	a4,a5,8000adbe <tinst_tests+0x3576>
    8000adba:	8d0fe06f          	j	80008e8a <tinst_tests+0x1642>
    8000adbe:	8e0fe06f          	j	80008e9e <tinst_tests+0x1656>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    8000adc2:	7018                	ld	a4,32(s0)
    8000adc4:	00012597          	auipc	a1,0x12
    8000adc8:	1ac58593          	add	a1,a1,428 # 8001cf70 <__func__.1+0x2c8>
    8000adcc:	e319                	bnez	a4,8000add2 <tinst_tests+0x358a>
    8000adce:	d81fd06f          	j	80008b4e <tinst_tests+0x1306>
    8000add2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000add4:	0016f793          	and	a5,a3,1
    8000add8:	c399                	beqz	a5,8000adde <tinst_tests+0x3596>
    8000adda:	9a3fe06f          	j	8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000adde:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ade2:	460d                	li	a2,3
    8000ade4:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000ade8:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000adea:	00c59863          	bne	a1,a2,8000adfa <tinst_tests+0x35b2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000adee:	0026d683          	lhu	a3,2(a3)
    8000adf2:	0106969b          	sllw	a3,a3,0x10
    8000adf6:	8fd5                	or	a5,a5,a3
    8000adf8:	2781                	sext.w	a5,a5
    8000adfa:	1782                	sll	a5,a5,0x20
    8000adfc:	fff086b7          	lui	a3,0xfff08
    8000ae00:	9381                	srl	a5,a5,0x20
    8000ae02:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000ae04:	8ff5                	and	a5,a5,a3
    8000ae06:	00012597          	auipc	a1,0x12
    8000ae0a:	17a58593          	add	a1,a1,378 # 8001cf80 <__func__.1+0x2d8>
    8000ae0e:	00f70463          	beq	a4,a5,8000ae16 <tinst_tests+0x35ce>
    8000ae12:	d3dfd06f          	j	80008b4e <tinst_tests+0x1306>
    8000ae16:	00012597          	auipc	a1,0x12
    8000ae1a:	15a58593          	add	a1,a1,346 # 8001cf70 <__func__.1+0x2c8>
    8000ae1e:	d31fd06f          	j	80008b4e <tinst_tests+0x1306>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000ae22:	701c                	ld	a5,32(s0)
    8000ae24:	00012597          	auipc	a1,0x12
    8000ae28:	14c58593          	add	a1,a1,332 # 8001cf70 <__func__.1+0x2c8>
    8000ae2c:	e399                	bnez	a5,8000ae32 <tinst_tests+0x35ea>
    8000ae2e:	dc7fd06f          	j	80008bf4 <tinst_tests+0x13ac>
    8000ae32:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ae34:	0016f713          	and	a4,a3,1
    8000ae38:	c319                	beqz	a4,8000ae3e <tinst_tests+0x35f6>
    8000ae3a:	943fe06f          	j	8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000ae3e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ae42:	460d                	li	a2,3
    8000ae44:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    8000ae48:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ae4a:	00c59863          	bne	a1,a2,8000ae5a <tinst_tests+0x3612>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ae4e:	0026d683          	lhu	a3,2(a3)
    8000ae52:	0106969b          	sllw	a3,a3,0x10
    8000ae56:	8f55                	or	a4,a4,a3
    8000ae58:	2701                	sext.w	a4,a4
    8000ae5a:	1702                	sll	a4,a4,0x20
    8000ae5c:	fff086b7          	lui	a3,0xfff08
    8000ae60:	9301                	srl	a4,a4,0x20
    8000ae62:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000ae64:	8f75                	and	a4,a4,a3
    8000ae66:	00012597          	auipc	a1,0x12
    8000ae6a:	11a58593          	add	a1,a1,282 # 8001cf80 <__func__.1+0x2d8>
    8000ae6e:	00e78463          	beq	a5,a4,8000ae76 <tinst_tests+0x362e>
    8000ae72:	d83fd06f          	j	80008bf4 <tinst_tests+0x13ac>
    8000ae76:	00012597          	auipc	a1,0x12
    8000ae7a:	0fa58593          	add	a1,a1,250 # 8001cf70 <__func__.1+0x2c8>
    8000ae7e:	d77fd06f          	j	80008bf4 <tinst_tests+0x13ac>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000ae82:	7018                	ld	a4,32(s0)
    8000ae84:	00012597          	auipc	a1,0x12
    8000ae88:	0ec58593          	add	a1,a1,236 # 8001cf70 <__func__.1+0x2c8>
    8000ae8c:	e319                	bnez	a4,8000ae92 <tinst_tests+0x364a>
    8000ae8e:	e05fd06f          	j	80008c92 <tinst_tests+0x144a>
    8000ae92:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ae94:	0016f793          	and	a5,a3,1
    8000ae98:	c399                	beqz	a5,8000ae9e <tinst_tests+0x3656>
    8000ae9a:	8e3fe06f          	j	8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000ae9e:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aea2:	460d                	li	a2,3
    8000aea4:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000aea8:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000aeaa:	00c59863          	bne	a1,a2,8000aeba <tinst_tests+0x3672>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aeae:	0026d683          	lhu	a3,2(a3)
    8000aeb2:	0106969b          	sllw	a3,a3,0x10
    8000aeb6:	8fd5                	or	a5,a5,a3
    8000aeb8:	2781                	sext.w	a5,a5
    8000aeba:	1782                	sll	a5,a5,0x20
    8000aebc:	fff086b7          	lui	a3,0xfff08
    8000aec0:	9381                	srl	a5,a5,0x20
    8000aec2:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000aec4:	8ff5                	and	a5,a5,a3
    8000aec6:	00012597          	auipc	a1,0x12
    8000aeca:	0ba58593          	add	a1,a1,186 # 8001cf80 <__func__.1+0x2d8>
    8000aece:	00f70463          	beq	a4,a5,8000aed6 <tinst_tests+0x368e>
    8000aed2:	dc1fd06f          	j	80008c92 <tinst_tests+0x144a>
    8000aed6:	00012597          	auipc	a1,0x12
    8000aeda:	09a58593          	add	a1,a1,154 # 8001cf70 <__func__.1+0x2c8>
    8000aede:	db5fd06f          	j	80008c92 <tinst_tests+0x144a>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000aee2:	701c                	ld	a5,32(s0)
    8000aee4:	00012597          	auipc	a1,0x12
    8000aee8:	08c58593          	add	a1,a1,140 # 8001cf70 <__func__.1+0x2c8>
    8000aeec:	e399                	bnez	a5,8000aef2 <tinst_tests+0x36aa>
    8000aeee:	e43fd06f          	j	80008d30 <tinst_tests+0x14e8>
    8000aef2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aef4:	0016f713          	and	a4,a3,1
    8000aef8:	c319                	beqz	a4,8000aefe <tinst_tests+0x36b6>
    8000aefa:	883fe06f          	j	8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000aefe:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000af02:	460d                	li	a2,3
    8000af04:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    8000af08:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000af0a:	00c59863          	bne	a1,a2,8000af1a <tinst_tests+0x36d2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000af0e:	0026d683          	lhu	a3,2(a3)
    8000af12:	0106969b          	sllw	a3,a3,0x10
    8000af16:	8f55                	or	a4,a4,a3
    8000af18:	2701                	sext.w	a4,a4
    8000af1a:	1702                	sll	a4,a4,0x20
    8000af1c:	fff086b7          	lui	a3,0xfff08
    8000af20:	9301                	srl	a4,a4,0x20
    8000af22:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000af24:	8f75                	and	a4,a4,a3
    8000af26:	00012597          	auipc	a1,0x12
    8000af2a:	05a58593          	add	a1,a1,90 # 8001cf80 <__func__.1+0x2d8>
    8000af2e:	00e78463          	beq	a5,a4,8000af36 <tinst_tests+0x36ee>
    8000af32:	dfffd06f          	j	80008d30 <tinst_tests+0x14e8>
    8000af36:	00012597          	auipc	a1,0x12
    8000af3a:	03a58593          	add	a1,a1,58 # 8001cf70 <__func__.1+0x2c8>
    8000af3e:	df3fd06f          	j	80008d30 <tinst_tests+0x14e8>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000af42:	701c                	ld	a5,32(s0)
    8000af44:	00012597          	auipc	a1,0x12
    8000af48:	02c58593          	add	a1,a1,44 # 8001cf70 <__func__.1+0x2c8>
    8000af4c:	e399                	bnez	a5,8000af52 <tinst_tests+0x370a>
    8000af4e:	e81fd06f          	j	80008dce <tinst_tests+0x1586>
    8000af52:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000af54:	0016f713          	and	a4,a3,1
    8000af58:	c319                	beqz	a4,8000af5e <tinst_tests+0x3716>
    8000af5a:	823fe06f          	j	8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000af5e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000af62:	460d                	li	a2,3
    8000af64:	00377593          	and	a1,a4,3
    instruction = *((uint16_t*)addr);
    8000af68:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000af6a:	00c59863          	bne	a1,a2,8000af7a <tinst_tests+0x3732>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000af6e:	0026d683          	lhu	a3,2(a3)
    8000af72:	0106969b          	sllw	a3,a3,0x10
    8000af76:	8f55                	or	a4,a4,a3
    8000af78:	2701                	sext.w	a4,a4
    8000af7a:	1702                	sll	a4,a4,0x20
    8000af7c:	fff086b7          	lui	a3,0xfff08
    8000af80:	9301                	srl	a4,a4,0x20
    8000af82:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000af84:	8f75                	and	a4,a4,a3
    8000af86:	00012597          	auipc	a1,0x12
    8000af8a:	ffa58593          	add	a1,a1,-6 # 8001cf80 <__func__.1+0x2d8>
    8000af8e:	00e78463          	beq	a5,a4,8000af96 <tinst_tests+0x374e>
    8000af92:	e3dfd06f          	j	80008dce <tinst_tests+0x1586>
    8000af96:	00012597          	auipc	a1,0x12
    8000af9a:	fda58593          	add	a1,a1,-38 # 8001cf70 <__func__.1+0x2c8>
    8000af9e:	e31fd06f          	j	80008dce <tinst_tests+0x1586>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    8000afa2:	7018                	ld	a4,32(s0)
    8000afa4:	00012597          	auipc	a1,0x12
    8000afa8:	fcc58593          	add	a1,a1,-52 # 8001cf70 <__func__.1+0x2c8>
    8000afac:	e319                	bnez	a4,8000afb2 <tinst_tests+0x376a>
    8000afae:	ebffd06f          	j	80008e6c <tinst_tests+0x1624>
    8000afb2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000afb4:	0016f793          	and	a5,a3,1
    8000afb8:	c399                	beqz	a5,8000afbe <tinst_tests+0x3776>
    8000afba:	fc2fe06f          	j	8000977c <tinst_tests+0x1f34>
    instruction = *((uint16_t*)addr);
    8000afbe:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000afc2:	460d                	li	a2,3
    8000afc4:	0037f593          	and	a1,a5,3
    instruction = *((uint16_t*)addr);
    8000afc8:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000afca:	00c59863          	bne	a1,a2,8000afda <tinst_tests+0x3792>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000afce:	0026d683          	lhu	a3,2(a3)
    8000afd2:	0106969b          	sllw	a3,a3,0x10
    8000afd6:	8fd5                	or	a5,a5,a3
    8000afd8:	2781                	sext.w	a5,a5
    8000afda:	1782                	sll	a5,a5,0x20
    8000afdc:	fff086b7          	lui	a3,0xfff08
    8000afe0:	9381                	srl	a5,a5,0x20
    8000afe2:	16fd                	add	a3,a3,-1 # fffffffffff07fff <__stack_top+0xffffffff7fc08fff>
    8000afe4:	8ff5                	and	a5,a5,a3
    8000afe6:	00012597          	auipc	a1,0x12
    8000afea:	f9a58593          	add	a1,a1,-102 # 8001cf80 <__func__.1+0x2d8>
    8000afee:	00f70463          	beq	a4,a5,8000aff6 <tinst_tests+0x37ae>
    8000aff2:	e7bfd06f          	j	80008e6c <tinst_tests+0x1624>
    8000aff6:	00012597          	auipc	a1,0x12
    8000affa:	f7a58593          	add	a1,a1,-134 # 8001cf70 <__func__.1+0x2c8>
    8000affe:	e6ffd06f          	j	80008e6c <tinst_tests+0x1624>

000000008000b002 <priv_change_1>:
#include <rvh_test.h>
#include <csrs.h> 
#include <page_tables.h> 
bool priv_change_1(){
    8000b002:	1101                	add	sp,sp,-32
    
    TEST_START();
    8000b004:	00011597          	auipc	a1,0x11
    8000b008:	e9c58593          	add	a1,a1,-356 # 8001bea0 <__func__.15>
    8000b00c:	00012517          	auipc	a0,0x12
    8000b010:	f8450513          	add	a0,a0,-124 # 8001cf90 <__func__.1+0x2e8>
bool priv_change_1(){
    8000b014:	ec06                	sd	ra,24(sp)
    8000b016:	e822                	sd	s0,16(sp)
    8000b018:	e426                	sd	s1,8(sp)
    TEST_START();
    8000b01a:	3cc100ef          	jal	8001b3e6 <printf>
    8000b01e:	4529                	li	a0,10
    8000b020:	2980f0ef          	jal	8001a2b8 <putchar>


    goto_priv(PRIV_HS);
    8000b024:	450d                	li	a0,3
    8000b026:	ab9f50ef          	jal	80000ade <goto_priv>
    hspt_init();
    8000b02a:	db6f50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000b02e:	ff8f50ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    8000b032:	4509                	li	a0,2
    8000b034:	aabf50ef          	jal	80000ade <goto_priv>
    vspt_init(); 
    8000b038:	e7cf50ef          	jal	800006b4 <vspt_init>

    //V=1，VS模式下发生异常，关闭代理，切换到M态处理异常，异常结束恢复到VS态
    goto_priv(PRIV_M);
    8000b03c:	4511                	li	a0,4
    8000b03e:	aa1f50ef          	jal	80000ade <goto_priv>
    CSRW(medeleg,0);
    8000b042:	30205073          	csrw	medeleg,0
    CSRW(mideleg,0);     
    8000b046:	30305073          	csrw	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000b04a:	60305073          	csrw	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000b04e:	60205073          	csrw	hedeleg,0

    goto_priv(PRIV_VS);     
    8000b052:	4509                	li	a0,2
    8000b054:	a8bf50ef          	jal	80000ade <goto_priv>
    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000b058:	0ff0000f          	fence
    8000b05c:	4785                	li	a5,1
    8000b05e:	00032417          	auipc	s0,0x32
    8000b062:	fb240413          	add	s0,s0,-78 # 8003d010 <excpt>
    8000b066:	00f41023          	sh	a5,0(s0)
    8000b06a:	00032797          	auipc	a5,0x32
    8000b06e:	fc07bf23          	sd	zero,-34(a5) # 8003d048 <excpt+0x38>
    8000b072:	0ff0000f          	fence
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8000b076:	400197b7          	lui	a5,0x40019
    8000b07a:	078a                	sll	a5,a5,0x2
    8000b07c:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000b080:	08200593          	li	a1,130
    8000b084:	00014617          	auipc	a2,0x14
    8000b088:	ffc60613          	add	a2,a2,-4 # 8001f080 <__func__.1+0x23d8>
    8000b08c:	00012517          	auipc	a0,0x12
    8000b090:	f1c50513          	add	a0,a0,-228 # 8001cfa8 <__func__.1+0x300>
    8000b094:	352100ef          	jal	8001b3e6 <printf>
    8000b098:	00144783          	lbu	a5,1(s0)
    8000b09c:	00012597          	auipc	a1,0x12
    8000b0a0:	ee458593          	add	a1,a1,-284 # 8001cf80 <__func__.1+0x2d8>
    8000b0a4:	c789                	beqz	a5,8000b0ae <priv_change_1+0xac>
    8000b0a6:	6418                	ld	a4,8(s0)
    8000b0a8:	47b5                	li	a5,13
    8000b0aa:	0af70563          	beq	a4,a5,8000b154 <priv_change_1+0x152>
    8000b0ae:	00012517          	auipc	a0,0x12
    8000b0b2:	f1250513          	add	a0,a0,-238 # 8001cfc0 <__func__.1+0x318>
    8000b0b6:	330100ef          	jal	8001b3e6 <printf>
    8000b0ba:	00144783          	lbu	a5,1(s0)
    8000b0be:	c789                	beqz	a5,8000b0c8 <priv_change_1+0xc6>
    8000b0c0:	6418                	ld	a4,8(s0)
    8000b0c2:	47b5                	li	a5,13
    8000b0c4:	04f70c63          	beq	a4,a5,8000b11c <priv_change_1+0x11a>
    8000b0c8:	00012517          	auipc	a0,0x12
    8000b0cc:	f0050513          	add	a0,a0,-256 # 8001cfc8 <__func__.1+0x320>
    8000b0d0:	316100ef          	jal	8001b3e6 <printf>
    8000b0d4:	02900513          	li	a0,41
    8000b0d8:	1e00f0ef          	jal	8001a2b8 <putchar>
    8000b0dc:	4529                	li	a0,10
    8000b0de:	1da0f0ef          	jal	8001a2b8 <putchar>
    8000b0e2:	00144483          	lbu	s1,1(s0)
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_M &&
        curr_priv == PRIV_VS
    );

    TEST_END();
    8000b0e6:	00012597          	auipc	a1,0x12
    8000b0ea:	e9a58593          	add	a1,a1,-358 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000b0ee:	c491                	beqz	s1,8000b0fa <priv_change_1+0xf8>
    8000b0f0:	6418                	ld	a4,8(s0)
    8000b0f2:	47b5                	li	a5,13
    8000b0f4:	04f70063          	beq	a4,a5,8000b134 <priv_change_1+0x132>
    8000b0f8:	4481                	li	s1,0
    TEST_END();
    8000b0fa:	00012517          	auipc	a0,0x12
    8000b0fe:	f2e50513          	add	a0,a0,-210 # 8001d028 <__func__.1+0x380>
    8000b102:	2e4100ef          	jal	8001b3e6 <printf>
    8000b106:	4511                	li	a0,4
    8000b108:	9d7f50ef          	jal	80000ade <goto_priv>
    8000b10c:	a1af60ef          	jal	80001326 <reset_state>
}
    8000b110:	60e2                	ld	ra,24(sp)
    8000b112:	6442                	ld	s0,16(sp)
    8000b114:	8526                	mv	a0,s1
    8000b116:	64a2                	ld	s1,8(sp)
    8000b118:	6105                	add	sp,sp,32
    8000b11a:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000b11c:	4058                	lw	a4,4(s0)
    8000b11e:	4791                	li	a5,4
    8000b120:	faf714e3          	bne	a4,a5,8000b0c8 <priv_change_1+0xc6>
    8000b124:	0001a717          	auipc	a4,0x1a
    8000b128:	4d872703          	lw	a4,1240(a4) # 800255fc <curr_priv>
    8000b12c:	4789                	li	a5,2
    8000b12e:	f8f71de3          	bne	a4,a5,8000b0c8 <priv_change_1+0xc6>
    8000b132:	b76d                	j	8000b0dc <priv_change_1+0xda>
    8000b134:	4058                	lw	a4,4(s0)
    8000b136:	4791                	li	a5,4
    8000b138:	fcf710e3          	bne	a4,a5,8000b0f8 <priv_change_1+0xf6>
    8000b13c:	0001a717          	auipc	a4,0x1a
    8000b140:	4c072703          	lw	a4,1216(a4) # 800255fc <curr_priv>
    8000b144:	4789                	li	a5,2
    8000b146:	faf719e3          	bne	a4,a5,8000b0f8 <priv_change_1+0xf6>
    TEST_END();
    8000b14a:	00012597          	auipc	a1,0x12
    8000b14e:	e2658593          	add	a1,a1,-474 # 8001cf70 <__func__.1+0x2c8>
    8000b152:	b765                	j	8000b0fa <priv_change_1+0xf8>
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000b154:	4058                	lw	a4,4(s0)
    8000b156:	4791                	li	a5,4
    8000b158:	f4f71be3          	bne	a4,a5,8000b0ae <priv_change_1+0xac>
    8000b15c:	0001a717          	auipc	a4,0x1a
    8000b160:	4a072703          	lw	a4,1184(a4) # 800255fc <curr_priv>
    8000b164:	4789                	li	a5,2
    8000b166:	f4f714e3          	bne	a4,a5,8000b0ae <priv_change_1+0xac>
    8000b16a:	00012597          	auipc	a1,0x12
    8000b16e:	e0658593          	add	a1,a1,-506 # 8001cf70 <__func__.1+0x2c8>
    8000b172:	bf35                	j	8000b0ae <priv_change_1+0xac>

000000008000b174 <priv_change_2>:

bool priv_change_2(){
    8000b174:	1101                	add	sp,sp,-32
    
    TEST_START();
    8000b176:	00011597          	auipc	a1,0x11
    8000b17a:	d3a58593          	add	a1,a1,-710 # 8001beb0 <__func__.13>
    8000b17e:	00012517          	auipc	a0,0x12
    8000b182:	e1250513          	add	a0,a0,-494 # 8001cf90 <__func__.1+0x2e8>
bool priv_change_2(){
    8000b186:	ec06                	sd	ra,24(sp)
    8000b188:	e822                	sd	s0,16(sp)
    8000b18a:	e426                	sd	s1,8(sp)
    TEST_START();
    8000b18c:	25a100ef          	jal	8001b3e6 <printf>
    8000b190:	4529                	li	a0,10
    8000b192:	1260f0ef          	jal	8001a2b8 <putchar>


    goto_priv(PRIV_HS);
    8000b196:	450d                	li	a0,3
    8000b198:	947f50ef          	jal	80000ade <goto_priv>
    hspt_init();
    8000b19c:	c44f50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000b1a0:	e86f50ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    8000b1a4:	4509                	li	a0,2
    8000b1a6:	939f50ef          	jal	80000ade <goto_priv>
    vspt_init(); 
    8000b1aa:	d0af50ef          	jal	800006b4 <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;
    //V=1，VS模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000b1ae:	4511                	li	a0,4
    8000b1b0:	92ff50ef          	jal	80000ade <goto_priv>
    CSRC(medeleg, 1 << CAUSE_LPF);         
    8000b1b4:	6789                	lui	a5,0x2
    8000b1b6:	3027b073          	csrc	medeleg,a5
    goto_priv(PRIV_VS);     
    8000b1ba:	4509                	li	a0,2
    8000b1bc:	923f50ef          	jal	80000ade <goto_priv>

    vaddr_f = vs_page_base(VSI_GI);      
    value = 0xdeadbeef;
    
    TEST_SETUP_EXCEPT();        
    8000b1c0:	0ff0000f          	fence
    8000b1c4:	4785                	li	a5,1
    8000b1c6:	00032417          	auipc	s0,0x32
    8000b1ca:	e4a40413          	add	s0,s0,-438 # 8003d010 <excpt>
    8000b1ce:	00f41023          	sh	a5,0(s0)
    8000b1d2:	00032797          	auipc	a5,0x32
    8000b1d6:	e607bb23          	sd	zero,-394(a5) # 8003d048 <excpt+0x38>
    8000b1da:	0ff0000f          	fence
    8000b1de:	400197b7          	lui	a5,0x40019
    8000b1e2:	078a                	sll	a5,a5,0x2
    8000b1e4:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000b1e8:	08200593          	li	a1,130
    8000b1ec:	00014617          	auipc	a2,0x14
    8000b1f0:	f0460613          	add	a2,a2,-252 # 8001f0f0 <__func__.1+0x2448>
    8000b1f4:	00012517          	auipc	a0,0x12
    8000b1f8:	db450513          	add	a0,a0,-588 # 8001cfa8 <__func__.1+0x300>
    8000b1fc:	1ea100ef          	jal	8001b3e6 <printf>
    8000b200:	00144783          	lbu	a5,1(s0)
    8000b204:	00012597          	auipc	a1,0x12
    8000b208:	d7c58593          	add	a1,a1,-644 # 8001cf80 <__func__.1+0x2d8>
    8000b20c:	c789                	beqz	a5,8000b216 <priv_change_2+0xa2>
    8000b20e:	6418                	ld	a4,8(s0)
    8000b210:	47b5                	li	a5,13
    8000b212:	0af70563          	beq	a4,a5,8000b2bc <priv_change_2+0x148>
    8000b216:	00012517          	auipc	a0,0x12
    8000b21a:	daa50513          	add	a0,a0,-598 # 8001cfc0 <__func__.1+0x318>
    8000b21e:	1c8100ef          	jal	8001b3e6 <printf>
    8000b222:	00144783          	lbu	a5,1(s0)
    8000b226:	c789                	beqz	a5,8000b230 <priv_change_2+0xbc>
    8000b228:	6418                	ld	a4,8(s0)
    8000b22a:	47b5                	li	a5,13
    8000b22c:	04f70c63          	beq	a4,a5,8000b284 <priv_change_2+0x110>
    8000b230:	00012517          	auipc	a0,0x12
    8000b234:	d9850513          	add	a0,a0,-616 # 8001cfc8 <__func__.1+0x320>
    8000b238:	1ae100ef          	jal	8001b3e6 <printf>
    8000b23c:	02900513          	li	a0,41
    8000b240:	0780f0ef          	jal	8001a2b8 <putchar>
    8000b244:	4529                	li	a0,10
    8000b246:	0720f0ef          	jal	8001a2b8 <putchar>
    8000b24a:	00144483          	lbu	s1,1(s0)
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_M &&
        curr_priv == PRIV_VS
    );    

    TEST_END();
    8000b24e:	00012597          	auipc	a1,0x12
    8000b252:	d3258593          	add	a1,a1,-718 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000b256:	c491                	beqz	s1,8000b262 <priv_change_2+0xee>
    8000b258:	6418                	ld	a4,8(s0)
    8000b25a:	47b5                	li	a5,13
    8000b25c:	04f70063          	beq	a4,a5,8000b29c <priv_change_2+0x128>
    8000b260:	4481                	li	s1,0
    TEST_END();
    8000b262:	00012517          	auipc	a0,0x12
    8000b266:	dc650513          	add	a0,a0,-570 # 8001d028 <__func__.1+0x380>
    8000b26a:	17c100ef          	jal	8001b3e6 <printf>
    8000b26e:	4511                	li	a0,4
    8000b270:	86ff50ef          	jal	80000ade <goto_priv>
    8000b274:	8b2f60ef          	jal	80001326 <reset_state>
}
    8000b278:	60e2                	ld	ra,24(sp)
    8000b27a:	6442                	ld	s0,16(sp)
    8000b27c:	8526                	mv	a0,s1
    8000b27e:	64a2                	ld	s1,8(sp)
    8000b280:	6105                	add	sp,sp,32
    8000b282:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000b284:	4058                	lw	a4,4(s0)
    8000b286:	4791                	li	a5,4
    8000b288:	faf714e3          	bne	a4,a5,8000b230 <priv_change_2+0xbc>
    8000b28c:	0001a717          	auipc	a4,0x1a
    8000b290:	37072703          	lw	a4,880(a4) # 800255fc <curr_priv>
    8000b294:	4789                	li	a5,2
    8000b296:	f8f71de3          	bne	a4,a5,8000b230 <priv_change_2+0xbc>
    8000b29a:	b76d                	j	8000b244 <priv_change_2+0xd0>
    8000b29c:	4058                	lw	a4,4(s0)
    8000b29e:	4791                	li	a5,4
    8000b2a0:	fcf710e3          	bne	a4,a5,8000b260 <priv_change_2+0xec>
    8000b2a4:	0001a717          	auipc	a4,0x1a
    8000b2a8:	35872703          	lw	a4,856(a4) # 800255fc <curr_priv>
    8000b2ac:	4789                	li	a5,2
    8000b2ae:	faf719e3          	bne	a4,a5,8000b260 <priv_change_2+0xec>
    TEST_END();
    8000b2b2:	00012597          	auipc	a1,0x12
    8000b2b6:	cbe58593          	add	a1,a1,-834 # 8001cf70 <__func__.1+0x2c8>
    8000b2ba:	b765                	j	8000b262 <priv_change_2+0xee>
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000b2bc:	4058                	lw	a4,4(s0)
    8000b2be:	4791                	li	a5,4
    8000b2c0:	f4f71be3          	bne	a4,a5,8000b216 <priv_change_2+0xa2>
    8000b2c4:	0001a717          	auipc	a4,0x1a
    8000b2c8:	33872703          	lw	a4,824(a4) # 800255fc <curr_priv>
    8000b2cc:	4789                	li	a5,2
    8000b2ce:	f4f714e3          	bne	a4,a5,8000b216 <priv_change_2+0xa2>
    8000b2d2:	00012597          	auipc	a1,0x12
    8000b2d6:	c9e58593          	add	a1,a1,-866 # 8001cf70 <__func__.1+0x2c8>
    8000b2da:	bf35                	j	8000b216 <priv_change_2+0xa2>

000000008000b2dc <priv_change_3>:


bool priv_change_3(){
    8000b2dc:	1101                	add	sp,sp,-32
    
    TEST_START();
    8000b2de:	00011597          	auipc	a1,0x11
    8000b2e2:	be258593          	add	a1,a1,-1054 # 8001bec0 <__func__.12>
    8000b2e6:	00012517          	auipc	a0,0x12
    8000b2ea:	caa50513          	add	a0,a0,-854 # 8001cf90 <__func__.1+0x2e8>
bool priv_change_3(){
    8000b2ee:	ec06                	sd	ra,24(sp)
    8000b2f0:	e822                	sd	s0,16(sp)
    8000b2f2:	e426                	sd	s1,8(sp)
    TEST_START();
    8000b2f4:	0f2100ef          	jal	8001b3e6 <printf>
    8000b2f8:	4529                	li	a0,10
    8000b2fa:	7bf0e0ef          	jal	8001a2b8 <putchar>


    goto_priv(PRIV_HS);
    8000b2fe:	450d                	li	a0,3
    8000b300:	fdef50ef          	jal	80000ade <goto_priv>
    hspt_init();
    8000b304:	adcf50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000b308:	d1ef50ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    8000b30c:	4509                	li	a0,2
    8000b30e:	fd0f50ef          	jal	80000ade <goto_priv>
    vspt_init(); 
    8000b312:	ba2f50ef          	jal	800006b4 <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    //V=0，HS模式下发生异常，关闭代理，切换到M态处理异常，处理结束执行mret返回HS态
    TEST_SETUP_EXCEPT();  
    8000b316:	0ff0000f          	fence
    8000b31a:	00032417          	auipc	s0,0x32
    8000b31e:	cf640413          	add	s0,s0,-778 # 8003d010 <excpt>
    8000b322:	4485                	li	s1,1
    8000b324:	00941023          	sh	s1,0(s0)
    8000b328:	00032797          	auipc	a5,0x32
    8000b32c:	d207b023          	sd	zero,-736(a5) # 8003d048 <excpt+0x38>
    8000b330:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000b334:	4511                	li	a0,4
    8000b336:	fa8f50ef          	jal	80000ade <goto_priv>
    CSRW(medeleg,0);
    8000b33a:	30205073          	csrw	medeleg,0
    CSRW(mideleg,0);
    8000b33e:	30305073          	csrw	mideleg,0
    goto_priv(PRIV_HS);     
    8000b342:	450d                	li	a0,3
    8000b344:	f9af50ef          	jal	80000ade <goto_priv>
    vaddr_f = hs_page_base(VSI_GI);      
    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000b348:	0ff0000f          	fence
    8000b34c:	00032797          	auipc	a5,0x32
    8000b350:	ce07be23          	sd	zero,-772(a5) # 8003d048 <excpt+0x38>
    8000b354:	00941023          	sh	s1,0(s0)
    8000b358:	0ff0000f          	fence
    8000b35c:	400197b7          	lui	a5,0x40019
    8000b360:	078a                	sll	a5,a5,0x2
    8000b362:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    //mret();
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000b366:	08200593          	li	a1,130
    8000b36a:	00014617          	auipc	a2,0x14
    8000b36e:	dc660613          	add	a2,a2,-570 # 8001f130 <__func__.1+0x2488>
    8000b372:	00012517          	auipc	a0,0x12
    8000b376:	c3650513          	add	a0,a0,-970 # 8001cfa8 <__func__.1+0x300>
    8000b37a:	06c100ef          	jal	8001b3e6 <printf>
    8000b37e:	00144783          	lbu	a5,1(s0)
    8000b382:	00012597          	auipc	a1,0x12
    8000b386:	bfe58593          	add	a1,a1,-1026 # 8001cf80 <__func__.1+0x2d8>
    8000b38a:	cb81                	beqz	a5,8000b39a <priv_change_3+0xbe>
    8000b38c:	0001a717          	auipc	a4,0x1a
    8000b390:	27072703          	lw	a4,624(a4) # 800255fc <curr_priv>
    8000b394:	478d                	li	a5,3
    8000b396:	08f70d63          	beq	a4,a5,8000b430 <priv_change_3+0x154>
    8000b39a:	00012517          	auipc	a0,0x12
    8000b39e:	c2650513          	add	a0,a0,-986 # 8001cfc0 <__func__.1+0x318>
    8000b3a2:	044100ef          	jal	8001b3e6 <printf>
    8000b3a6:	00144783          	lbu	a5,1(s0)
    8000b3aa:	cb81                	beqz	a5,8000b3ba <priv_change_3+0xde>
    8000b3ac:	0001a717          	auipc	a4,0x1a
    8000b3b0:	25072703          	lw	a4,592(a4) # 800255fc <curr_priv>
    8000b3b4:	478d                	li	a5,3
    8000b3b6:	04f70f63          	beq	a4,a5,8000b414 <priv_change_3+0x138>
    8000b3ba:	00012517          	auipc	a0,0x12
    8000b3be:	c0e50513          	add	a0,a0,-1010 # 8001cfc8 <__func__.1+0x320>
    8000b3c2:	024100ef          	jal	8001b3e6 <printf>
    8000b3c6:	02900513          	li	a0,41
    8000b3ca:	6ef0e0ef          	jal	8001a2b8 <putchar>
    8000b3ce:	4529                	li	a0,10
    8000b3d0:	6e90e0ef          	jal	8001a2b8 <putchar>
    8000b3d4:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        curr_priv == PRIV_HS &&
        excpt.priv == PRIV_M
    ); 

    TEST_END();
    8000b3d8:	00012597          	auipc	a1,0x12
    8000b3dc:	ba858593          	add	a1,a1,-1112 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000b3e0:	c889                	beqz	s1,8000b3f2 <priv_change_3+0x116>
    8000b3e2:	0001a717          	auipc	a4,0x1a
    8000b3e6:	21a72703          	lw	a4,538(a4) # 800255fc <curr_priv>
    8000b3ea:	478d                	li	a5,3
    8000b3ec:	02f70963          	beq	a4,a5,8000b41e <priv_change_3+0x142>
    8000b3f0:	4481                	li	s1,0
    TEST_END();
    8000b3f2:	00012517          	auipc	a0,0x12
    8000b3f6:	c3650513          	add	a0,a0,-970 # 8001d028 <__func__.1+0x380>
    8000b3fa:	7ed0f0ef          	jal	8001b3e6 <printf>
    8000b3fe:	4511                	li	a0,4
    8000b400:	edef50ef          	jal	80000ade <goto_priv>
    8000b404:	f23f50ef          	jal	80001326 <reset_state>
}
    8000b408:	60e2                	ld	ra,24(sp)
    8000b40a:	6442                	ld	s0,16(sp)
    8000b40c:	8526                	mv	a0,s1
    8000b40e:	64a2                	ld	s1,8(sp)
    8000b410:	6105                	add	sp,sp,32
    8000b412:	8082                	ret
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000b414:	4058                	lw	a4,4(s0)
    8000b416:	4791                	li	a5,4
    8000b418:	faf711e3          	bne	a4,a5,8000b3ba <priv_change_3+0xde>
    8000b41c:	bf4d                	j	8000b3ce <priv_change_3+0xf2>
    8000b41e:	4058                	lw	a4,4(s0)
    8000b420:	4791                	li	a5,4
    8000b422:	fcf717e3          	bne	a4,a5,8000b3f0 <priv_change_3+0x114>
    TEST_END();
    8000b426:	00012597          	auipc	a1,0x12
    8000b42a:	b4a58593          	add	a1,a1,-1206 # 8001cf70 <__func__.1+0x2c8>
    8000b42e:	b7d1                	j	8000b3f2 <priv_change_3+0x116>
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000b430:	4058                	lw	a4,4(s0)
    8000b432:	4791                	li	a5,4
    8000b434:	f6f713e3          	bne	a4,a5,8000b39a <priv_change_3+0xbe>
    8000b438:	00012597          	auipc	a1,0x12
    8000b43c:	b3858593          	add	a1,a1,-1224 # 8001cf70 <__func__.1+0x2c8>
    8000b440:	bfa9                	j	8000b39a <priv_change_3+0xbe>

000000008000b442 <priv_change_4>:

bool priv_change_4(){
    8000b442:	1101                	add	sp,sp,-32
    
    TEST_START();
    8000b444:	00011597          	auipc	a1,0x11
    8000b448:	a8c58593          	add	a1,a1,-1396 # 8001bed0 <__func__.11>
    8000b44c:	00012517          	auipc	a0,0x12
    8000b450:	b4450513          	add	a0,a0,-1212 # 8001cf90 <__func__.1+0x2e8>
bool priv_change_4(){
    8000b454:	ec06                	sd	ra,24(sp)
    8000b456:	e822                	sd	s0,16(sp)
    8000b458:	e426                	sd	s1,8(sp)
    TEST_START();
    8000b45a:	78d0f0ef          	jal	8001b3e6 <printf>
    8000b45e:	4529                	li	a0,10
    8000b460:	6590e0ef          	jal	8001a2b8 <putchar>


    goto_priv(PRIV_HS);
    8000b464:	450d                	li	a0,3
    8000b466:	e78f50ef          	jal	80000ade <goto_priv>
    hspt_init();
    8000b46a:	976f50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000b46e:	bb8f50ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    8000b472:	4509                	li	a0,2
    8000b474:	e6af50ef          	jal	80000ade <goto_priv>
    vspt_init(); 
    8000b478:	a3cf50ef          	jal	800006b4 <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    //V=0，HS模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000b47c:	4511                	li	a0,4
    8000b47e:	e60f50ef          	jal	80000ade <goto_priv>
    CSRC(medeleg, 1 << CAUSE_LPF);         
    8000b482:	6789                	lui	a5,0x2
    8000b484:	3027b073          	csrc	medeleg,a5
    goto_priv(PRIV_HS);     
    8000b488:	450d                	li	a0,3
    8000b48a:	e54f50ef          	jal	80000ade <goto_priv>
    vaddr_f = hs_page_base(VSI_GI);      
    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000b48e:	0ff0000f          	fence
    8000b492:	4785                	li	a5,1
    8000b494:	00032417          	auipc	s0,0x32
    8000b498:	b7c40413          	add	s0,s0,-1156 # 8003d010 <excpt>
    8000b49c:	00f41023          	sh	a5,0(s0)
    8000b4a0:	00032797          	auipc	a5,0x32
    8000b4a4:	ba07b423          	sd	zero,-1112(a5) # 8003d048 <excpt+0x38>
    8000b4a8:	0ff0000f          	fence
    8000b4ac:	400197b7          	lui	a5,0x40019
    8000b4b0:	078a                	sll	a5,a5,0x2
    8000b4b2:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000b4b6:	08200593          	li	a1,130
    8000b4ba:	00014617          	auipc	a2,0x14
    8000b4be:	ce660613          	add	a2,a2,-794 # 8001f1a0 <__func__.1+0x24f8>
    8000b4c2:	00012517          	auipc	a0,0x12
    8000b4c6:	ae650513          	add	a0,a0,-1306 # 8001cfa8 <__func__.1+0x300>
    8000b4ca:	71d0f0ef          	jal	8001b3e6 <printf>
    8000b4ce:	00144783          	lbu	a5,1(s0)
    8000b4d2:	00012597          	auipc	a1,0x12
    8000b4d6:	aae58593          	add	a1,a1,-1362 # 8001cf80 <__func__.1+0x2d8>
    8000b4da:	c789                	beqz	a5,8000b4e4 <priv_change_4+0xa2>
    8000b4dc:	6418                	ld	a4,8(s0)
    8000b4de:	47b5                	li	a5,13
    8000b4e0:	08f70763          	beq	a4,a5,8000b56e <priv_change_4+0x12c>
    8000b4e4:	00012517          	auipc	a0,0x12
    8000b4e8:	adc50513          	add	a0,a0,-1316 # 8001cfc0 <__func__.1+0x318>
    8000b4ec:	6fb0f0ef          	jal	8001b3e6 <printf>
    8000b4f0:	00144783          	lbu	a5,1(s0)
    8000b4f4:	c789                	beqz	a5,8000b4fe <priv_change_4+0xbc>
    8000b4f6:	6418                	ld	a4,8(s0)
    8000b4f8:	47b5                	li	a5,13
    8000b4fa:	04f70c63          	beq	a4,a5,8000b552 <priv_change_4+0x110>
    8000b4fe:	00012517          	auipc	a0,0x12
    8000b502:	aca50513          	add	a0,a0,-1334 # 8001cfc8 <__func__.1+0x320>
    8000b506:	6e10f0ef          	jal	8001b3e6 <printf>
    8000b50a:	02900513          	li	a0,41
    8000b50e:	5ab0e0ef          	jal	8001a2b8 <putchar>
    8000b512:	4529                	li	a0,10
    8000b514:	5a50e0ef          	jal	8001a2b8 <putchar>
    8000b518:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        excpt.priv==PRIV_M
    );  
    
    TEST_END();
    8000b51c:	00012597          	auipc	a1,0x12
    8000b520:	a6458593          	add	a1,a1,-1436 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000b524:	c491                	beqz	s1,8000b530 <priv_change_4+0xee>
    8000b526:	6418                	ld	a4,8(s0)
    8000b528:	47b5                	li	a5,13
    8000b52a:	02f70963          	beq	a4,a5,8000b55c <priv_change_4+0x11a>
    8000b52e:	4481                	li	s1,0
    TEST_END();
    8000b530:	00012517          	auipc	a0,0x12
    8000b534:	af850513          	add	a0,a0,-1288 # 8001d028 <__func__.1+0x380>
    8000b538:	6af0f0ef          	jal	8001b3e6 <printf>
    8000b53c:	4511                	li	a0,4
    8000b53e:	da0f50ef          	jal	80000ade <goto_priv>
    8000b542:	de5f50ef          	jal	80001326 <reset_state>
}
    8000b546:	60e2                	ld	ra,24(sp)
    8000b548:	6442                	ld	s0,16(sp)
    8000b54a:	8526                	mv	a0,s1
    8000b54c:	64a2                	ld	s1,8(sp)
    8000b54e:	6105                	add	sp,sp,32
    8000b550:	8082                	ret
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000b552:	4058                	lw	a4,4(s0)
    8000b554:	4791                	li	a5,4
    8000b556:	faf714e3          	bne	a4,a5,8000b4fe <priv_change_4+0xbc>
    8000b55a:	bf65                	j	8000b512 <priv_change_4+0xd0>
    8000b55c:	4058                	lw	a4,4(s0)
    8000b55e:	4791                	li	a5,4
    8000b560:	fcf717e3          	bne	a4,a5,8000b52e <priv_change_4+0xec>
    TEST_END();
    8000b564:	00012597          	auipc	a1,0x12
    8000b568:	a0c58593          	add	a1,a1,-1524 # 8001cf70 <__func__.1+0x2c8>
    8000b56c:	b7d1                	j	8000b530 <priv_change_4+0xee>
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000b56e:	4058                	lw	a4,4(s0)
    8000b570:	4791                	li	a5,4
    8000b572:	f6f719e3          	bne	a4,a5,8000b4e4 <priv_change_4+0xa2>
    8000b576:	00012597          	auipc	a1,0x12
    8000b57a:	9fa58593          	add	a1,a1,-1542 # 8001cf70 <__func__.1+0x2c8>
    8000b57e:	b79d                	j	8000b4e4 <priv_change_4+0xa2>

000000008000b580 <priv_change_5>:

bool priv_change_5(){
    8000b580:	1101                	add	sp,sp,-32
    
    TEST_START();
    8000b582:	00011597          	auipc	a1,0x11
    8000b586:	95e58593          	add	a1,a1,-1698 # 8001bee0 <__func__.10>
    8000b58a:	00012517          	auipc	a0,0x12
    8000b58e:	a0650513          	add	a0,a0,-1530 # 8001cf90 <__func__.1+0x2e8>
bool priv_change_5(){
    8000b592:	ec06                	sd	ra,24(sp)
    8000b594:	e822                	sd	s0,16(sp)
    8000b596:	e426                	sd	s1,8(sp)
    TEST_START();
    8000b598:	64f0f0ef          	jal	8001b3e6 <printf>
    8000b59c:	4529                	li	a0,10
    8000b59e:	51b0e0ef          	jal	8001a2b8 <putchar>


    //V=0，M模式下发生异常，M态处理异常
    goto_priv(PRIV_M);
    8000b5a2:	4511                	li	a0,4
    8000b5a4:	d3af50ef          	jal	80000ade <goto_priv>
    reset_state();
    8000b5a8:	d7ff50ef          	jal	80001326 <reset_state>
    CSRW(medeleg, 0); 
    8000b5ac:	30205073          	csrw	medeleg,0

    TEST_SETUP_EXCEPT();       
    8000b5b0:	0ff0000f          	fence
    8000b5b4:	00032497          	auipc	s1,0x32
    8000b5b8:	a5c48493          	add	s1,s1,-1444 # 8003d010 <excpt>
    8000b5bc:	4405                	li	s0,1
    8000b5be:	00849023          	sh	s0,0(s1)
    8000b5c2:	00032797          	auipc	a5,0x32
    8000b5c6:	a807b323          	sd	zero,-1402(a5) # 8003d048 <excpt+0x38>
    8000b5ca:	0ff0000f          	fence
    ecall(); 
    8000b5ce:	c20f50ef          	jal	800009ee <ecall>
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000b5d2:	08200593          	li	a1,130
    8000b5d6:	00014617          	auipc	a2,0x14
    8000b5da:	c0a60613          	add	a2,a2,-1014 # 8001f1e0 <__func__.1+0x2538>
    8000b5de:	00012517          	auipc	a0,0x12
    8000b5e2:	9ca50513          	add	a0,a0,-1590 # 8001cfa8 <__func__.1+0x300>
    8000b5e6:	6010f0ef          	jal	8001b3e6 <printf>
    8000b5ea:	6098                	ld	a4,0(s1)
    8000b5ec:	f00017b7          	lui	a5,0xf0001
    8000b5f0:	0792                	sll	a5,a5,0x4
    8000b5f2:	140a                	sll	s0,s0,0x22
    8000b5f4:	f0078793          	add	a5,a5,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000b5f8:	8ff9                	and	a5,a5,a4
    8000b5fa:	10040413          	add	s0,s0,256
    8000b5fe:	00012597          	auipc	a1,0x12
    8000b602:	97258593          	add	a1,a1,-1678 # 8001cf70 <__func__.1+0x2c8>
    8000b606:	00878663          	beq	a5,s0,8000b612 <priv_change_5+0x92>
    8000b60a:	00012597          	auipc	a1,0x12
    8000b60e:	97658593          	add	a1,a1,-1674 # 8001cf80 <__func__.1+0x2d8>
    8000b612:	00012517          	auipc	a0,0x12
    8000b616:	9ae50513          	add	a0,a0,-1618 # 8001cfc0 <__func__.1+0x318>
    8000b61a:	5cd0f0ef          	jal	8001b3e6 <printf>
    8000b61e:	0014c783          	lbu	a5,1(s1)
    8000b622:	c789                	beqz	a5,8000b62c <priv_change_5+0xac>
    8000b624:	40d8                	lw	a4,4(s1)
    8000b626:	4791                	li	a5,4
    8000b628:	00f70c63          	beq	a4,a5,8000b640 <priv_change_5+0xc0>
    8000b62c:	00012517          	auipc	a0,0x12
    8000b630:	99c50513          	add	a0,a0,-1636 # 8001cfc8 <__func__.1+0x320>
    8000b634:	5b30f0ef          	jal	8001b3e6 <printf>
    8000b638:	02900513          	li	a0,41
    8000b63c:	47d0e0ef          	jal	8001a2b8 <putchar>
    8000b640:	4529                	li	a0,10
    8000b642:	4770e0ef          	jal	8001a2b8 <putchar>
    8000b646:	6094                	ld	a3,0(s1)
    8000b648:	f0001737          	lui	a4,0xf0001
    8000b64c:	4785                	li	a5,1
    8000b64e:	0712                	sll	a4,a4,0x4
    8000b650:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000b654:	178a                	sll	a5,a5,0x22
    8000b656:	8f75                	and	a4,a4,a3
    8000b658:	10078793          	add	a5,a5,256
    8000b65c:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    ); 

    TEST_END();
    8000b65e:	00012597          	auipc	a1,0x12
    8000b662:	92258593          	add	a1,a1,-1758 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000b666:	00f71763          	bne	a4,a5,8000b674 <priv_change_5+0xf4>
    8000b66a:	4405                	li	s0,1
    TEST_END();
    8000b66c:	00012597          	auipc	a1,0x12
    8000b670:	90458593          	add	a1,a1,-1788 # 8001cf70 <__func__.1+0x2c8>
    8000b674:	00012517          	auipc	a0,0x12
    8000b678:	9b450513          	add	a0,a0,-1612 # 8001d028 <__func__.1+0x380>
    8000b67c:	56b0f0ef          	jal	8001b3e6 <printf>
    8000b680:	4511                	li	a0,4
    8000b682:	c5cf50ef          	jal	80000ade <goto_priv>
    8000b686:	ca1f50ef          	jal	80001326 <reset_state>
}
    8000b68a:	60e2                	ld	ra,24(sp)
    8000b68c:	8522                	mv	a0,s0
    8000b68e:	6442                	ld	s0,16(sp)
    8000b690:	64a2                	ld	s1,8(sp)
    8000b692:	6105                	add	sp,sp,32
    8000b694:	8082                	ret

000000008000b696 <priv_change_6>:

bool priv_change_6(){
    8000b696:	1101                	add	sp,sp,-32
    
    TEST_START();
    8000b698:	00011597          	auipc	a1,0x11
    8000b69c:	85858593          	add	a1,a1,-1960 # 8001bef0 <__func__.9>
    8000b6a0:	00012517          	auipc	a0,0x12
    8000b6a4:	8f050513          	add	a0,a0,-1808 # 8001cf90 <__func__.1+0x2e8>
bool priv_change_6(){
    8000b6a8:	ec06                	sd	ra,24(sp)
    8000b6aa:	e822                	sd	s0,16(sp)
    8000b6ac:	e426                	sd	s1,8(sp)
    TEST_START();
    8000b6ae:	5390f0ef          	jal	8001b3e6 <printf>
    8000b6b2:	4529                	li	a0,10
    8000b6b4:	4050e0ef          	jal	8001a2b8 <putchar>


    //V=0，U模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000b6b8:	4511                	li	a0,4
    8000b6ba:	c24f50ef          	jal	80000ade <goto_priv>
    CSRW(medeleg,0);         
    8000b6be:	30205073          	csrw	medeleg,0

    goto_priv(PRIV_HU); 
    8000b6c2:	4505                	li	a0,1
    8000b6c4:	c1af50ef          	jal	80000ade <goto_priv>
    
    TEST_SETUP_EXCEPT();      
    8000b6c8:	0ff0000f          	fence
    8000b6cc:	00032497          	auipc	s1,0x32
    8000b6d0:	94448493          	add	s1,s1,-1724 # 8003d010 <excpt>
    8000b6d4:	4405                	li	s0,1
    8000b6d6:	00849023          	sh	s0,0(s1)
    8000b6da:	00032797          	auipc	a5,0x32
    8000b6de:	9607b723          	sd	zero,-1682(a5) # 8003d048 <excpt+0x38>
    8000b6e2:	0ff0000f          	fence
    CSRR(CSR_MSTATUS);
    8000b6e6:	300027f3          	csrr	a5,mstatus
    TEST_ASSERT("hu trigger except that priv change to m mode when medeleg=0",         
    8000b6ea:	08200593          	li	a1,130
    8000b6ee:	00014617          	auipc	a2,0x14
    8000b6f2:	b2a60613          	add	a2,a2,-1238 # 8001f218 <__func__.1+0x2570>
    8000b6f6:	00012517          	auipc	a0,0x12
    8000b6fa:	8b250513          	add	a0,a0,-1870 # 8001cfa8 <__func__.1+0x300>
    8000b6fe:	4e90f0ef          	jal	8001b3e6 <printf>
    8000b702:	6098                	ld	a4,0(s1)
    8000b704:	f00017b7          	lui	a5,0xf0001
    8000b708:	0792                	sll	a5,a5,0x4
    8000b70a:	140a                	sll	s0,s0,0x22
    8000b70c:	f0078793          	add	a5,a5,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000b710:	8ff9                	and	a5,a5,a4
    8000b712:	10040413          	add	s0,s0,256
    8000b716:	00012597          	auipc	a1,0x12
    8000b71a:	85a58593          	add	a1,a1,-1958 # 8001cf70 <__func__.1+0x2c8>
    8000b71e:	00878663          	beq	a5,s0,8000b72a <priv_change_6+0x94>
    8000b722:	00012597          	auipc	a1,0x12
    8000b726:	85e58593          	add	a1,a1,-1954 # 8001cf80 <__func__.1+0x2d8>
    8000b72a:	00012517          	auipc	a0,0x12
    8000b72e:	89650513          	add	a0,a0,-1898 # 8001cfc0 <__func__.1+0x318>
    8000b732:	4b50f0ef          	jal	8001b3e6 <printf>
    8000b736:	0014c783          	lbu	a5,1(s1)
    8000b73a:	c789                	beqz	a5,8000b744 <priv_change_6+0xae>
    8000b73c:	40d8                	lw	a4,4(s1)
    8000b73e:	4791                	li	a5,4
    8000b740:	00f70c63          	beq	a4,a5,8000b758 <priv_change_6+0xc2>
    8000b744:	00012517          	auipc	a0,0x12
    8000b748:	88450513          	add	a0,a0,-1916 # 8001cfc8 <__func__.1+0x320>
    8000b74c:	49b0f0ef          	jal	8001b3e6 <printf>
    8000b750:	02900513          	li	a0,41
    8000b754:	3650e0ef          	jal	8001a2b8 <putchar>
    8000b758:	4529                	li	a0,10
    8000b75a:	35f0e0ef          	jal	8001a2b8 <putchar>
    8000b75e:	6094                	ld	a3,0(s1)
    8000b760:	f0001737          	lui	a4,0xf0001
    8000b764:	4785                	li	a5,1
    8000b766:	0712                	sll	a4,a4,0x4
    8000b768:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000b76c:	178a                	sll	a5,a5,0x22
    8000b76e:	8f75                	and	a4,a4,a3
    8000b770:	10078793          	add	a5,a5,256
    8000b774:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    );

    TEST_END();
    8000b776:	00012597          	auipc	a1,0x12
    8000b77a:	80a58593          	add	a1,a1,-2038 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hu trigger except that priv change to m mode when medeleg=0",         
    8000b77e:	00f71763          	bne	a4,a5,8000b78c <priv_change_6+0xf6>
    8000b782:	4405                	li	s0,1
    TEST_END();
    8000b784:	00011597          	auipc	a1,0x11
    8000b788:	7ec58593          	add	a1,a1,2028 # 8001cf70 <__func__.1+0x2c8>
    8000b78c:	00012517          	auipc	a0,0x12
    8000b790:	89c50513          	add	a0,a0,-1892 # 8001d028 <__func__.1+0x380>
    8000b794:	4530f0ef          	jal	8001b3e6 <printf>
    8000b798:	4511                	li	a0,4
    8000b79a:	b44f50ef          	jal	80000ade <goto_priv>
    8000b79e:	b89f50ef          	jal	80001326 <reset_state>
}
    8000b7a2:	60e2                	ld	ra,24(sp)
    8000b7a4:	8522                	mv	a0,s0
    8000b7a6:	6442                	ld	s0,16(sp)
    8000b7a8:	64a2                	ld	s1,8(sp)
    8000b7aa:	6105                	add	sp,sp,32
    8000b7ac:	8082                	ret

000000008000b7ae <priv_change_7>:

bool priv_change_7(){
    8000b7ae:	1101                	add	sp,sp,-32
    
    TEST_START();
    8000b7b0:	00010597          	auipc	a1,0x10
    8000b7b4:	75058593          	add	a1,a1,1872 # 8001bf00 <__func__.8>
    8000b7b8:	00011517          	auipc	a0,0x11
    8000b7bc:	7d850513          	add	a0,a0,2008 # 8001cf90 <__func__.1+0x2e8>
bool priv_change_7(){
    8000b7c0:	ec06                	sd	ra,24(sp)
    8000b7c2:	e822                	sd	s0,16(sp)
    8000b7c4:	e426                	sd	s1,8(sp)
    TEST_START();
    8000b7c6:	4210f0ef          	jal	8001b3e6 <printf>
    8000b7ca:	4529                	li	a0,10
    8000b7cc:	2ed0e0ef          	jal	8001a2b8 <putchar>


    //V=1，VU模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000b7d0:	4511                	li	a0,4
    8000b7d2:	b0cf50ef          	jal	80000ade <goto_priv>
    CSRW(medeleg,0);      
    8000b7d6:	30205073          	csrw	medeleg,0

    goto_priv(PRIV_VU);     
    8000b7da:	4501                	li	a0,0
    8000b7dc:	b02f50ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();        
    8000b7e0:	0ff0000f          	fence
    8000b7e4:	00032497          	auipc	s1,0x32
    8000b7e8:	82c48493          	add	s1,s1,-2004 # 8003d010 <excpt>
    8000b7ec:	4405                	li	s0,1
    8000b7ee:	00849023          	sh	s0,0(s1)
    8000b7f2:	00032797          	auipc	a5,0x32
    8000b7f6:	8407bb23          	sd	zero,-1962(a5) # 8003d048 <excpt+0x38>
    8000b7fa:	0ff0000f          	fence
    CSRR(CSR_MSTATUS);
    8000b7fe:	300027f3          	csrr	a5,mstatus

    TEST_ASSERT("vu trigger except that priv change to m mode when medeleg=0",         
    8000b802:	08200593          	li	a1,130
    8000b806:	00014617          	auipc	a2,0x14
    8000b80a:	a5260613          	add	a2,a2,-1454 # 8001f258 <__func__.1+0x25b0>
    8000b80e:	00011517          	auipc	a0,0x11
    8000b812:	79a50513          	add	a0,a0,1946 # 8001cfa8 <__func__.1+0x300>
    8000b816:	3d10f0ef          	jal	8001b3e6 <printf>
    8000b81a:	6098                	ld	a4,0(s1)
    8000b81c:	f00017b7          	lui	a5,0xf0001
    8000b820:	0792                	sll	a5,a5,0x4
    8000b822:	140a                	sll	s0,s0,0x22
    8000b824:	f0078793          	add	a5,a5,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000b828:	8ff9                	and	a5,a5,a4
    8000b82a:	10040413          	add	s0,s0,256
    8000b82e:	00011597          	auipc	a1,0x11
    8000b832:	74258593          	add	a1,a1,1858 # 8001cf70 <__func__.1+0x2c8>
    8000b836:	00878663          	beq	a5,s0,8000b842 <priv_change_7+0x94>
    8000b83a:	00011597          	auipc	a1,0x11
    8000b83e:	74658593          	add	a1,a1,1862 # 8001cf80 <__func__.1+0x2d8>
    8000b842:	00011517          	auipc	a0,0x11
    8000b846:	77e50513          	add	a0,a0,1918 # 8001cfc0 <__func__.1+0x318>
    8000b84a:	39d0f0ef          	jal	8001b3e6 <printf>
    8000b84e:	0014c783          	lbu	a5,1(s1)
    8000b852:	c789                	beqz	a5,8000b85c <priv_change_7+0xae>
    8000b854:	40d8                	lw	a4,4(s1)
    8000b856:	4791                	li	a5,4
    8000b858:	00f70c63          	beq	a4,a5,8000b870 <priv_change_7+0xc2>
    8000b85c:	00011517          	auipc	a0,0x11
    8000b860:	76c50513          	add	a0,a0,1900 # 8001cfc8 <__func__.1+0x320>
    8000b864:	3830f0ef          	jal	8001b3e6 <printf>
    8000b868:	02900513          	li	a0,41
    8000b86c:	24d0e0ef          	jal	8001a2b8 <putchar>
    8000b870:	4529                	li	a0,10
    8000b872:	2470e0ef          	jal	8001a2b8 <putchar>
    8000b876:	6094                	ld	a3,0(s1)
    8000b878:	f0001737          	lui	a4,0xf0001
    8000b87c:	4785                	li	a5,1
    8000b87e:	0712                	sll	a4,a4,0x4
    8000b880:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000b884:	178a                	sll	a5,a5,0x22
    8000b886:	8f75                	and	a4,a4,a3
    8000b888:	10078793          	add	a5,a5,256
    8000b88c:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    );   


    TEST_END();
    8000b88e:	00011597          	auipc	a1,0x11
    8000b892:	6f258593          	add	a1,a1,1778 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vu trigger except that priv change to m mode when medeleg=0",         
    8000b896:	00f71763          	bne	a4,a5,8000b8a4 <priv_change_7+0xf6>
    8000b89a:	4405                	li	s0,1
    TEST_END();
    8000b89c:	00011597          	auipc	a1,0x11
    8000b8a0:	6d458593          	add	a1,a1,1748 # 8001cf70 <__func__.1+0x2c8>
    8000b8a4:	00011517          	auipc	a0,0x11
    8000b8a8:	78450513          	add	a0,a0,1924 # 8001d028 <__func__.1+0x380>
    8000b8ac:	33b0f0ef          	jal	8001b3e6 <printf>
    8000b8b0:	4511                	li	a0,4
    8000b8b2:	a2cf50ef          	jal	80000ade <goto_priv>
    8000b8b6:	a71f50ef          	jal	80001326 <reset_state>
}
    8000b8ba:	60e2                	ld	ra,24(sp)
    8000b8bc:	8522                	mv	a0,s0
    8000b8be:	6442                	ld	s0,16(sp)
    8000b8c0:	64a2                	ld	s1,8(sp)
    8000b8c2:	6105                	add	sp,sp,32
    8000b8c4:	8082                	ret

000000008000b8c6 <priv_change_8>:

bool priv_change_8(){
    8000b8c6:	1101                	add	sp,sp,-32
    
    TEST_START();
    8000b8c8:	00010597          	auipc	a1,0x10
    8000b8cc:	64858593          	add	a1,a1,1608 # 8001bf10 <__func__.7>
    8000b8d0:	00011517          	auipc	a0,0x11
    8000b8d4:	6c050513          	add	a0,a0,1728 # 8001cf90 <__func__.1+0x2e8>
bool priv_change_8(){
    8000b8d8:	ec06                	sd	ra,24(sp)
    8000b8da:	e822                	sd	s0,16(sp)
    8000b8dc:	e426                	sd	s1,8(sp)
    TEST_START();
    8000b8de:	3090f0ef          	jal	8001b3e6 <printf>
    8000b8e2:	4529                	li	a0,10
    8000b8e4:	1d50e0ef          	jal	8001a2b8 <putchar>


    //V=1，VU模式下发生异常，关闭代理，切换到M态处理异常，异常结束执行mret恢复到VU态
    goto_priv(PRIV_M);
    8000b8e8:	4511                	li	a0,4
    8000b8ea:	9f4f50ef          	jal	80000ade <goto_priv>
    reset_state();
    8000b8ee:	a39f50ef          	jal	80001326 <reset_state>
    CSRW(medeleg,0);
    8000b8f2:	30205073          	csrw	medeleg,0
    CSRW(mideleg,0);     
    8000b8f6:	30305073          	csrw	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000b8fa:	60305073          	csrw	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000b8fe:	60205073          	csrw	hedeleg,0

    goto_priv(PRIV_VU);     
    8000b902:	4501                	li	a0,0
    8000b904:	9daf50ef          	jal	80000ade <goto_priv>
    
    TEST_SETUP_EXCEPT();        
    8000b908:	0ff0000f          	fence
    8000b90c:	00031497          	auipc	s1,0x31
    8000b910:	70448493          	add	s1,s1,1796 # 8003d010 <excpt>
    8000b914:	4405                	li	s0,1
    8000b916:	00849023          	sh	s0,0(s1)
    8000b91a:	00031797          	auipc	a5,0x31
    8000b91e:	7207b723          	sd	zero,1838(a5) # 8003d048 <excpt+0x38>
    8000b922:	0ff0000f          	fence
    CSRW(medeleg, 0); 
    8000b926:	30205073          	csrw	medeleg,0
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000b92a:	08200593          	li	a1,130
    8000b92e:	00014617          	auipc	a2,0x14
    8000b932:	96a60613          	add	a2,a2,-1686 # 8001f298 <__func__.1+0x25f0>
    8000b936:	00011517          	auipc	a0,0x11
    8000b93a:	67250513          	add	a0,a0,1650 # 8001cfa8 <__func__.1+0x300>
    8000b93e:	2a90f0ef          	jal	8001b3e6 <printf>
    8000b942:	6098                	ld	a4,0(s1)
    8000b944:	f00017b7          	lui	a5,0xf0001
    8000b948:	0792                	sll	a5,a5,0x4
    8000b94a:	140a                	sll	s0,s0,0x22
    8000b94c:	f0078793          	add	a5,a5,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000b950:	8ff9                	and	a5,a5,a4
    8000b952:	10040413          	add	s0,s0,256
    8000b956:	00011597          	auipc	a1,0x11
    8000b95a:	62a58593          	add	a1,a1,1578 # 8001cf80 <__func__.1+0x2d8>
    8000b95e:	08878563          	beq	a5,s0,8000b9e8 <priv_change_8+0x122>
    8000b962:	00011517          	auipc	a0,0x11
    8000b966:	65e50513          	add	a0,a0,1630 # 8001cfc0 <__func__.1+0x318>
    8000b96a:	27d0f0ef          	jal	8001b3e6 <printf>
    8000b96e:	0014c783          	lbu	a5,1(s1)
    8000b972:	c789                	beqz	a5,8000b97c <priv_change_8+0xb6>
    8000b974:	40d8                	lw	a4,4(s1)
    8000b976:	4791                	li	a5,4
    8000b978:	06f70263          	beq	a4,a5,8000b9dc <priv_change_8+0x116>
    8000b97c:	00011517          	auipc	a0,0x11
    8000b980:	64c50513          	add	a0,a0,1612 # 8001cfc8 <__func__.1+0x320>
    8000b984:	2630f0ef          	jal	8001b3e6 <printf>
    8000b988:	02900513          	li	a0,41
    8000b98c:	12d0e0ef          	jal	8001a2b8 <putchar>
    8000b990:	4529                	li	a0,10
    8000b992:	1270e0ef          	jal	8001a2b8 <putchar>
    8000b996:	6094                	ld	a3,0(s1)
    8000b998:	f0001737          	lui	a4,0xf0001
    8000b99c:	4785                	li	a5,1
    8000b99e:	0712                	sll	a4,a4,0x4
    8000b9a0:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000b9a4:	178a                	sll	a5,a5,0x22
    8000b9a6:	8f75                	and	a4,a4,a3
    8000b9a8:	10078793          	add	a5,a5,256
    8000b9ac:	4401                	li	s0,0
        curr_priv == PRIV_VU
    );



    TEST_END();
    8000b9ae:	00011597          	auipc	a1,0x11
    8000b9b2:	5d258593          	add	a1,a1,1490 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000b9b6:	04f70363          	beq	a4,a5,8000b9fc <priv_change_8+0x136>
    TEST_END();
    8000b9ba:	00011517          	auipc	a0,0x11
    8000b9be:	66e50513          	add	a0,a0,1646 # 8001d028 <__func__.1+0x380>
    8000b9c2:	2250f0ef          	jal	8001b3e6 <printf>
    8000b9c6:	4511                	li	a0,4
    8000b9c8:	916f50ef          	jal	80000ade <goto_priv>
    8000b9cc:	95bf50ef          	jal	80001326 <reset_state>
}
    8000b9d0:	60e2                	ld	ra,24(sp)
    8000b9d2:	8522                	mv	a0,s0
    8000b9d4:	6442                	ld	s0,16(sp)
    8000b9d6:	64a2                	ld	s1,8(sp)
    8000b9d8:	6105                	add	sp,sp,32
    8000b9da:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000b9dc:	0001a797          	auipc	a5,0x1a
    8000b9e0:	c207a783          	lw	a5,-992(a5) # 800255fc <curr_priv>
    8000b9e4:	d7d5                	beqz	a5,8000b990 <priv_change_8+0xca>
    8000b9e6:	bf59                	j	8000b97c <priv_change_8+0xb6>
    8000b9e8:	0001a797          	auipc	a5,0x1a
    8000b9ec:	c147a783          	lw	a5,-1004(a5) # 800255fc <curr_priv>
    8000b9f0:	fbad                	bnez	a5,8000b962 <priv_change_8+0x9c>
    8000b9f2:	00011597          	auipc	a1,0x11
    8000b9f6:	57e58593          	add	a1,a1,1406 # 8001cf70 <__func__.1+0x2c8>
    8000b9fa:	b7a5                	j	8000b962 <priv_change_8+0x9c>
    8000b9fc:	0001a797          	auipc	a5,0x1a
    8000ba00:	c007a783          	lw	a5,-1024(a5) # 800255fc <curr_priv>
    8000ba04:	fbdd                	bnez	a5,8000b9ba <priv_change_8+0xf4>
    8000ba06:	4405                	li	s0,1
    TEST_END();
    8000ba08:	00011597          	auipc	a1,0x11
    8000ba0c:	56858593          	add	a1,a1,1384 # 8001cf70 <__func__.1+0x2c8>
    8000ba10:	b76d                	j	8000b9ba <priv_change_8+0xf4>

000000008000ba12 <priv_change_9>:



bool priv_change_9(){
    8000ba12:	1101                	add	sp,sp,-32
    TEST_START();
    8000ba14:	00010597          	auipc	a1,0x10
    8000ba18:	50c58593          	add	a1,a1,1292 # 8001bf20 <__func__.6>
    8000ba1c:	00011517          	auipc	a0,0x11
    8000ba20:	57450513          	add	a0,a0,1396 # 8001cf90 <__func__.1+0x2e8>
bool priv_change_9(){
    8000ba24:	ec06                	sd	ra,24(sp)
    8000ba26:	e822                	sd	s0,16(sp)
    8000ba28:	e426                	sd	s1,8(sp)
    TEST_START();
    8000ba2a:	1bd0f0ef          	jal	8001b3e6 <printf>
    8000ba2e:	4529                	li	a0,10
    8000ba30:	0890e0ef          	jal	8001a2b8 <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，打开代理hedeleg/hideleg，切换到VS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000ba34:	4511                	li	a0,4
    8000ba36:	8a8f50ef          	jal	80000ade <goto_priv>
    CSRW(medeleg,(uint64_t)-1);
    8000ba3a:	57fd                	li	a5,-1
    8000ba3c:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000ba40:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000ba44:	60305073          	csrw	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000ba48:	60205073          	csrw	hedeleg,0

    goto_priv(PRIV_VU);     
    8000ba4c:	4501                	li	a0,0
    8000ba4e:	890f50ef          	jal	80000ade <goto_priv>
    

    TEST_SETUP_EXCEPT();        
    8000ba52:	0ff0000f          	fence
    8000ba56:	00031497          	auipc	s1,0x31
    8000ba5a:	5ba48493          	add	s1,s1,1466 # 8003d010 <excpt>
    8000ba5e:	4405                	li	s0,1
    8000ba60:	00849023          	sh	s0,0(s1)
    8000ba64:	00031797          	auipc	a5,0x31
    8000ba68:	5e07b223          	sd	zero,1508(a5) # 8003d048 <excpt+0x38>
    8000ba6c:	0ff0000f          	fence
    CSRR(CSR_MSTATUS);
    8000ba70:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000ba74:	08200593          	li	a1,130
    8000ba78:	00014617          	auipc	a2,0x14
    8000ba7c:	89060613          	add	a2,a2,-1904 # 8001f308 <__func__.1+0x2660>
    8000ba80:	00011517          	auipc	a0,0x11
    8000ba84:	52850513          	add	a0,a0,1320 # 8001cfa8 <__func__.1+0x300>
    8000ba88:	15f0f0ef          	jal	8001b3e6 <printf>
    8000ba8c:	6098                	ld	a4,0(s1)
    8000ba8e:	f00017b7          	lui	a5,0xf0001
    8000ba92:	0792                	sll	a5,a5,0x4
    8000ba94:	1406                	sll	s0,s0,0x21
    8000ba96:	f0078793          	add	a5,a5,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ba9a:	8ff9                	and	a5,a5,a4
    8000ba9c:	10040413          	add	s0,s0,256
    8000baa0:	00011597          	auipc	a1,0x11
    8000baa4:	4e058593          	add	a1,a1,1248 # 8001cf80 <__func__.1+0x2d8>
    8000baa8:	08878563          	beq	a5,s0,8000bb32 <priv_change_9+0x120>
    8000baac:	00011517          	auipc	a0,0x11
    8000bab0:	51450513          	add	a0,a0,1300 # 8001cfc0 <__func__.1+0x318>
    8000bab4:	1330f0ef          	jal	8001b3e6 <printf>
    8000bab8:	0014c783          	lbu	a5,1(s1)
    8000babc:	c789                	beqz	a5,8000bac6 <priv_change_9+0xb4>
    8000babe:	40d8                	lw	a4,4(s1)
    8000bac0:	4789                	li	a5,2
    8000bac2:	06f70263          	beq	a4,a5,8000bb26 <priv_change_9+0x114>
    8000bac6:	00011517          	auipc	a0,0x11
    8000baca:	50250513          	add	a0,a0,1282 # 8001cfc8 <__func__.1+0x320>
    8000bace:	1190f0ef          	jal	8001b3e6 <printf>
    8000bad2:	02900513          	li	a0,41
    8000bad6:	7e20e0ef          	jal	8001a2b8 <putchar>
    8000bada:	4529                	li	a0,10
    8000badc:	7dc0e0ef          	jal	8001a2b8 <putchar>
    8000bae0:	6094                	ld	a3,0(s1)
    8000bae2:	f0001737          	lui	a4,0xf0001
    8000bae6:	4785                	li	a5,1
    8000bae8:	0712                	sll	a4,a4,0x4
    8000baea:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000baee:	1786                	sll	a5,a5,0x21
    8000baf0:	8f75                	and	a4,a4,a3
    8000baf2:	10078793          	add	a5,a5,256
    8000baf6:	4401                	li	s0,0
        excpt.priv == PRIV_VS &&
        curr_priv == PRIV_VU
    );


    TEST_END();
    8000baf8:	00011597          	auipc	a1,0x11
    8000bafc:	48858593          	add	a1,a1,1160 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000bb00:	04f70363          	beq	a4,a5,8000bb46 <priv_change_9+0x134>
    TEST_END();
    8000bb04:	00011517          	auipc	a0,0x11
    8000bb08:	52450513          	add	a0,a0,1316 # 8001d028 <__func__.1+0x380>
    8000bb0c:	0db0f0ef          	jal	8001b3e6 <printf>
    8000bb10:	4511                	li	a0,4
    8000bb12:	fcdf40ef          	jal	80000ade <goto_priv>
    8000bb16:	811f50ef          	jal	80001326 <reset_state>
}
    8000bb1a:	60e2                	ld	ra,24(sp)
    8000bb1c:	8522                	mv	a0,s0
    8000bb1e:	6442                	ld	s0,16(sp)
    8000bb20:	64a2                	ld	s1,8(sp)
    8000bb22:	6105                	add	sp,sp,32
    8000bb24:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000bb26:	0001a797          	auipc	a5,0x1a
    8000bb2a:	ad67a783          	lw	a5,-1322(a5) # 800255fc <curr_priv>
    8000bb2e:	d7d5                	beqz	a5,8000bada <priv_change_9+0xc8>
    8000bb30:	bf59                	j	8000bac6 <priv_change_9+0xb4>
    8000bb32:	0001a797          	auipc	a5,0x1a
    8000bb36:	aca7a783          	lw	a5,-1334(a5) # 800255fc <curr_priv>
    8000bb3a:	fbad                	bnez	a5,8000baac <priv_change_9+0x9a>
    8000bb3c:	00011597          	auipc	a1,0x11
    8000bb40:	43458593          	add	a1,a1,1076 # 8001cf70 <__func__.1+0x2c8>
    8000bb44:	b7a5                	j	8000baac <priv_change_9+0x9a>
    8000bb46:	0001a797          	auipc	a5,0x1a
    8000bb4a:	ab67a783          	lw	a5,-1354(a5) # 800255fc <curr_priv>
    8000bb4e:	fbdd                	bnez	a5,8000bb04 <priv_change_9+0xf2>
    8000bb50:	4405                	li	s0,1
    TEST_END();
    8000bb52:	00011597          	auipc	a1,0x11
    8000bb56:	41e58593          	add	a1,a1,1054 # 8001cf70 <__func__.1+0x2c8>
    8000bb5a:	b76d                	j	8000bb04 <priv_change_9+0xf2>

000000008000bb5c <priv_change_10>:


bool priv_change_10(){
    8000bb5c:	1101                	add	sp,sp,-32
    TEST_START();
    8000bb5e:	00010597          	auipc	a1,0x10
    8000bb62:	3d258593          	add	a1,a1,978 # 8001bf30 <__func__.5>
    8000bb66:	00011517          	auipc	a0,0x11
    8000bb6a:	42a50513          	add	a0,a0,1066 # 8001cf90 <__func__.1+0x2e8>
bool priv_change_10(){
    8000bb6e:	ec06                	sd	ra,24(sp)
    8000bb70:	e822                	sd	s0,16(sp)
    8000bb72:	e426                	sd	s1,8(sp)
    TEST_START();
    8000bb74:	0730f0ef          	jal	8001b3e6 <printf>
    8000bb78:	4529                	li	a0,10
    8000bb7a:	73e0e0ef          	jal	8001a2b8 <putchar>


    //V=0，U模式下发生异常，打开代理medeleg/mideleg，切换到HS态处理异常，异常处理结束执行sret恢复到U态
    goto_priv(PRIV_M);
    8000bb7e:	4511                	li	a0,4
    8000bb80:	f5ff40ef          	jal	80000ade <goto_priv>
    reset_state();
    8000bb84:	fa2f50ef          	jal	80001326 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000bb88:	57fd                	li	a5,-1
    8000bb8a:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000bb8e:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000bb92:	60305073          	csrw	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000bb96:	60205073          	csrw	hedeleg,0

    goto_priv(PRIV_HU);     
    8000bb9a:	4505                	li	a0,1
    8000bb9c:	f43f40ef          	jal	80000ade <goto_priv>
    
    TEST_SETUP_EXCEPT();        
    8000bba0:	0ff0000f          	fence
    8000bba4:	00031417          	auipc	s0,0x31
    8000bba8:	46c40413          	add	s0,s0,1132 # 8003d010 <excpt>
    8000bbac:	4485                	li	s1,1
    8000bbae:	00941023          	sh	s1,0(s0)
    8000bbb2:	00031797          	auipc	a5,0x31
    8000bbb6:	4807bb23          	sd	zero,1174(a5) # 8003d048 <excpt+0x38>
    8000bbba:	0ff0000f          	fence
    CSRR(CSR_MSTATUS);
    8000bbbe:	300027f3          	csrr	a5,mstatus

    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000bbc2:	08200593          	li	a1,130
    8000bbc6:	00013617          	auipc	a2,0x13
    8000bbca:	7b260613          	add	a2,a2,1970 # 8001f378 <__func__.1+0x26d0>
    8000bbce:	00011517          	auipc	a0,0x11
    8000bbd2:	3da50513          	add	a0,a0,986 # 8001cfa8 <__func__.1+0x300>
    8000bbd6:	0110f0ef          	jal	8001b3e6 <printf>
    8000bbda:	6014                	ld	a3,0(s0)
    8000bbdc:	f0001737          	lui	a4,0xf0001
    8000bbe0:	478d                	li	a5,3
    8000bbe2:	0712                	sll	a4,a4,0x4
    8000bbe4:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000bbe8:	1782                	sll	a5,a5,0x20
    8000bbea:	8f75                	and	a4,a4,a3
    8000bbec:	10078793          	add	a5,a5,256
    8000bbf0:	00011597          	auipc	a1,0x11
    8000bbf4:	39058593          	add	a1,a1,912 # 8001cf80 <__func__.1+0x2d8>
    8000bbf8:	08f70763          	beq	a4,a5,8000bc86 <priv_change_10+0x12a>
    8000bbfc:	00011517          	auipc	a0,0x11
    8000bc00:	3c450513          	add	a0,a0,964 # 8001cfc0 <__func__.1+0x318>
    8000bc04:	7e20f0ef          	jal	8001b3e6 <printf>
    8000bc08:	00144783          	lbu	a5,1(s0)
    8000bc0c:	c789                	beqz	a5,8000bc16 <priv_change_10+0xba>
    8000bc0e:	4058                	lw	a4,4(s0)
    8000bc10:	478d                	li	a5,3
    8000bc12:	06f70263          	beq	a4,a5,8000bc76 <priv_change_10+0x11a>
    8000bc16:	00011517          	auipc	a0,0x11
    8000bc1a:	3b250513          	add	a0,a0,946 # 8001cfc8 <__func__.1+0x320>
    8000bc1e:	7c80f0ef          	jal	8001b3e6 <printf>
    8000bc22:	02900513          	li	a0,41
    8000bc26:	6920e0ef          	jal	8001a2b8 <putchar>
    8000bc2a:	4529                	li	a0,10
    8000bc2c:	68c0e0ef          	jal	8001a2b8 <putchar>
    8000bc30:	6014                	ld	a3,0(s0)
    8000bc32:	f0001737          	lui	a4,0xf0001
    8000bc36:	478d                	li	a5,3
    8000bc38:	0712                	sll	a4,a4,0x4
    8000bc3a:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000bc3e:	1782                	sll	a5,a5,0x20
    8000bc40:	8f75                	and	a4,a4,a3
    8000bc42:	10078793          	add	a5,a5,256
    8000bc46:	4401                	li	s0,0
        excpt.triggered == true &&
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_HU
    );

    TEST_END();
    8000bc48:	00011597          	auipc	a1,0x11
    8000bc4c:	33858593          	add	a1,a1,824 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000bc50:	04f70663          	beq	a4,a5,8000bc9c <priv_change_10+0x140>
    TEST_END();
    8000bc54:	00011517          	auipc	a0,0x11
    8000bc58:	3d450513          	add	a0,a0,980 # 8001d028 <__func__.1+0x380>
    8000bc5c:	78a0f0ef          	jal	8001b3e6 <printf>
    8000bc60:	4511                	li	a0,4
    8000bc62:	e7df40ef          	jal	80000ade <goto_priv>
    8000bc66:	ec0f50ef          	jal	80001326 <reset_state>
}
    8000bc6a:	60e2                	ld	ra,24(sp)
    8000bc6c:	8522                	mv	a0,s0
    8000bc6e:	6442                	ld	s0,16(sp)
    8000bc70:	64a2                	ld	s1,8(sp)
    8000bc72:	6105                	add	sp,sp,32
    8000bc74:	8082                	ret
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000bc76:	0001a717          	auipc	a4,0x1a
    8000bc7a:	98672703          	lw	a4,-1658(a4) # 800255fc <curr_priv>
    8000bc7e:	4785                	li	a5,1
    8000bc80:	f8f71be3          	bne	a4,a5,8000bc16 <priv_change_10+0xba>
    8000bc84:	b75d                	j	8000bc2a <priv_change_10+0xce>
    8000bc86:	0001a797          	auipc	a5,0x1a
    8000bc8a:	9767a783          	lw	a5,-1674(a5) # 800255fc <curr_priv>
    8000bc8e:	f69797e3          	bne	a5,s1,8000bbfc <priv_change_10+0xa0>
    8000bc92:	00011597          	auipc	a1,0x11
    8000bc96:	2de58593          	add	a1,a1,734 # 8001cf70 <__func__.1+0x2c8>
    8000bc9a:	b78d                	j	8000bbfc <priv_change_10+0xa0>
    8000bc9c:	0001a717          	auipc	a4,0x1a
    8000bca0:	96072703          	lw	a4,-1696(a4) # 800255fc <curr_priv>
    8000bca4:	4785                	li	a5,1
    8000bca6:	faf717e3          	bne	a4,a5,8000bc54 <priv_change_10+0xf8>
    8000bcaa:	4405                	li	s0,1
    TEST_END();
    8000bcac:	00011597          	auipc	a1,0x11
    8000bcb0:	2c458593          	add	a1,a1,708 # 8001cf70 <__func__.1+0x2c8>
    8000bcb4:	b745                	j	8000bc54 <priv_change_10+0xf8>

000000008000bcb6 <priv_change_11>:


bool priv_change_11(){
    8000bcb6:	1101                	add	sp,sp,-32
    TEST_START();
    8000bcb8:	00010597          	auipc	a1,0x10
    8000bcbc:	28858593          	add	a1,a1,648 # 8001bf40 <__func__.4>
    8000bcc0:	00011517          	auipc	a0,0x11
    8000bcc4:	2d050513          	add	a0,a0,720 # 8001cf90 <__func__.1+0x2e8>
bool priv_change_11(){
    8000bcc8:	ec06                	sd	ra,24(sp)
    8000bcca:	e822                	sd	s0,16(sp)
    8000bccc:	e426                	sd	s1,8(sp)
    TEST_START();
    8000bcce:	7180f0ef          	jal	8001b3e6 <printf>
    8000bcd2:	4529                	li	a0,10
    8000bcd4:	5e40e0ef          	jal	8001a2b8 <putchar>

    //V=1，VS模式下发生异常，打开代理medeleg/mideleg，打开代理hedeleg/hideleg，切换到VS态处理异常
    goto_priv(PRIV_M);
    8000bcd8:	4511                	li	a0,4
    8000bcda:	e05f40ef          	jal	80000ade <goto_priv>
    reset_state();
    8000bcde:	e48f50ef          	jal	80001326 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000bce2:	57fd                	li	a5,-1
    8000bce4:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000bce8:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000bcec:	60379073          	csrw	hideleg,a5
    CSRW(CSR_HEDELEG,(uint64_t)-1);   
    8000bcf0:	60279073          	csrw	hedeleg,a5

    goto_priv(PRIV_VS);    
    8000bcf4:	4509                	li	a0,2
    8000bcf6:	de9f40ef          	jal	80000ade <goto_priv>
    

    TEST_SETUP_EXCEPT();        
    8000bcfa:	0ff0000f          	fence
    8000bcfe:	00031497          	auipc	s1,0x31
    8000bd02:	31248493          	add	s1,s1,786 # 8003d010 <excpt>
    8000bd06:	4405                	li	s0,1
    8000bd08:	00849023          	sh	s0,0(s1)
    8000bd0c:	00031797          	auipc	a5,0x31
    8000bd10:	3207be23          	sd	zero,828(a5) # 8003d048 <excpt+0x38>
    8000bd14:	0ff0000f          	fence
    CSRW(medeleg, 0); 
    8000bd18:	30205073          	csrw	medeleg,0
    TEST_ASSERT("vs trigger except that priv no change  when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000bd1c:	08200593          	li	a1,130
    8000bd20:	00013617          	auipc	a2,0x13
    8000bd24:	6c860613          	add	a2,a2,1736 # 8001f3e8 <__func__.1+0x2740>
    8000bd28:	00011517          	auipc	a0,0x11
    8000bd2c:	28050513          	add	a0,a0,640 # 8001cfa8 <__func__.1+0x300>
    8000bd30:	6b60f0ef          	jal	8001b3e6 <printf>
    8000bd34:	6098                	ld	a4,0(s1)
    8000bd36:	f00017b7          	lui	a5,0xf0001
    8000bd3a:	0792                	sll	a5,a5,0x4
    8000bd3c:	1406                	sll	s0,s0,0x21
    8000bd3e:	f0078793          	add	a5,a5,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000bd42:	8ff9                	and	a5,a5,a4
    8000bd44:	10040413          	add	s0,s0,256
    8000bd48:	00011597          	auipc	a1,0x11
    8000bd4c:	22858593          	add	a1,a1,552 # 8001cf70 <__func__.1+0x2c8>
    8000bd50:	00878663          	beq	a5,s0,8000bd5c <priv_change_11+0xa6>
    8000bd54:	00011597          	auipc	a1,0x11
    8000bd58:	22c58593          	add	a1,a1,556 # 8001cf80 <__func__.1+0x2d8>
    8000bd5c:	00011517          	auipc	a0,0x11
    8000bd60:	26450513          	add	a0,a0,612 # 8001cfc0 <__func__.1+0x318>
    8000bd64:	6820f0ef          	jal	8001b3e6 <printf>
    8000bd68:	0014c783          	lbu	a5,1(s1)
    8000bd6c:	c789                	beqz	a5,8000bd76 <priv_change_11+0xc0>
    8000bd6e:	40d8                	lw	a4,4(s1)
    8000bd70:	4789                	li	a5,2
    8000bd72:	00f70c63          	beq	a4,a5,8000bd8a <priv_change_11+0xd4>
    8000bd76:	00011517          	auipc	a0,0x11
    8000bd7a:	25250513          	add	a0,a0,594 # 8001cfc8 <__func__.1+0x320>
    8000bd7e:	6680f0ef          	jal	8001b3e6 <printf>
    8000bd82:	02900513          	li	a0,41
    8000bd86:	5320e0ef          	jal	8001a2b8 <putchar>
    8000bd8a:	4529                	li	a0,10
    8000bd8c:	52c0e0ef          	jal	8001a2b8 <putchar>
    8000bd90:	6094                	ld	a3,0(s1)
    8000bd92:	f0001737          	lui	a4,0xf0001
    8000bd96:	4785                	li	a5,1
    8000bd98:	0712                	sll	a4,a4,0x4
    8000bd9a:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000bd9e:	1786                	sll	a5,a5,0x21
    8000bda0:	8f75                	and	a4,a4,a3
    8000bda2:	10078793          	add	a5,a5,256
    8000bda6:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv==PRIV_VS
    ); 


    TEST_END();
    8000bda8:	00011597          	auipc	a1,0x11
    8000bdac:	1d858593          	add	a1,a1,472 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vs trigger except that priv no change  when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000bdb0:	00f71763          	bne	a4,a5,8000bdbe <priv_change_11+0x108>
    8000bdb4:	4405                	li	s0,1
    TEST_END();
    8000bdb6:	00011597          	auipc	a1,0x11
    8000bdba:	1ba58593          	add	a1,a1,442 # 8001cf70 <__func__.1+0x2c8>
    8000bdbe:	00011517          	auipc	a0,0x11
    8000bdc2:	26a50513          	add	a0,a0,618 # 8001d028 <__func__.1+0x380>
    8000bdc6:	6200f0ef          	jal	8001b3e6 <printf>
    8000bdca:	4511                	li	a0,4
    8000bdcc:	d13f40ef          	jal	80000ade <goto_priv>
    8000bdd0:	d56f50ef          	jal	80001326 <reset_state>
}
    8000bdd4:	60e2                	ld	ra,24(sp)
    8000bdd6:	8522                	mv	a0,s0
    8000bdd8:	6442                	ld	s0,16(sp)
    8000bdda:	64a2                	ld	s1,8(sp)
    8000bddc:	6105                	add	sp,sp,32
    8000bdde:	8082                	ret

000000008000bde0 <priv_change_12>:



bool priv_change_12(){
    8000bde0:	1141                	add	sp,sp,-16
    TEST_START();
    8000bde2:	00010597          	auipc	a1,0x10
    8000bde6:	16e58593          	add	a1,a1,366 # 8001bf50 <__func__.3>
    8000bdea:	00011517          	auipc	a0,0x11
    8000bdee:	1a650513          	add	a0,a0,422 # 8001cf90 <__func__.1+0x2e8>
bool priv_change_12(){
    8000bdf2:	e406                	sd	ra,8(sp)
    8000bdf4:	e022                	sd	s0,0(sp)
    TEST_START();
    8000bdf6:	5f00f0ef          	jal	8001b3e6 <printf>
    8000bdfa:	4529                	li	a0,10
    8000bdfc:	4bc0e0ef          	jal	8001a2b8 <putchar>



    //V=0，HS模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常

    goto_priv(PRIV_M);     
    8000be00:	4511                	li	a0,4
    8000be02:	cddf40ef          	jal	80000ade <goto_priv>
    CSRW(medeleg,(uint64_t)-1);
    8000be06:	57fd                	li	a5,-1
    8000be08:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000be0c:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000be10:	60305073          	csrw	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000be14:	60205073          	csrw	hedeleg,0

    goto_priv(PRIV_HS);
    8000be18:	450d                	li	a0,3
    8000be1a:	cc5f40ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();        
    8000be1e:	0ff0000f          	fence
    8000be22:	4785                	li	a5,1
    8000be24:	00031417          	auipc	s0,0x31
    8000be28:	1ec40413          	add	s0,s0,492 # 8003d010 <excpt>
    8000be2c:	00f41023          	sh	a5,0(s0)
    8000be30:	00031797          	auipc	a5,0x31
    8000be34:	2007bc23          	sd	zero,536(a5) # 8003d048 <excpt+0x38>
    8000be38:	0ff0000f          	fence
    CSRR(CSR_MSTATUS);
    8000be3c:	300027f3          	csrr	a5,mstatus
    TEST_ASSERT("hs trigger except that priv no change when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000be40:	08200593          	li	a1,130
    8000be44:	00013617          	auipc	a2,0x13
    8000be48:	5fc60613          	add	a2,a2,1532 # 8001f440 <__func__.1+0x2798>
    8000be4c:	00011517          	auipc	a0,0x11
    8000be50:	15c50513          	add	a0,a0,348 # 8001cfa8 <__func__.1+0x300>
    8000be54:	5920f0ef          	jal	8001b3e6 <printf>
    8000be58:	6014                	ld	a3,0(s0)
    8000be5a:	f0001737          	lui	a4,0xf0001
    8000be5e:	478d                	li	a5,3
    8000be60:	0712                	sll	a4,a4,0x4
    8000be62:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000be66:	1782                	sll	a5,a5,0x20
    8000be68:	8f75                	and	a4,a4,a3
    8000be6a:	10078793          	add	a5,a5,256
    8000be6e:	00011597          	auipc	a1,0x11
    8000be72:	10258593          	add	a1,a1,258 # 8001cf70 <__func__.1+0x2c8>
    8000be76:	00f70663          	beq	a4,a5,8000be82 <priv_change_12+0xa2>
    8000be7a:	00011597          	auipc	a1,0x11
    8000be7e:	10658593          	add	a1,a1,262 # 8001cf80 <__func__.1+0x2d8>
    8000be82:	00011517          	auipc	a0,0x11
    8000be86:	13e50513          	add	a0,a0,318 # 8001cfc0 <__func__.1+0x318>
    8000be8a:	55c0f0ef          	jal	8001b3e6 <printf>
    8000be8e:	00144783          	lbu	a5,1(s0)
    8000be92:	c789                	beqz	a5,8000be9c <priv_change_12+0xbc>
    8000be94:	4058                	lw	a4,4(s0)
    8000be96:	478d                	li	a5,3
    8000be98:	00f70c63          	beq	a4,a5,8000beb0 <priv_change_12+0xd0>
    8000be9c:	00011517          	auipc	a0,0x11
    8000bea0:	12c50513          	add	a0,a0,300 # 8001cfc8 <__func__.1+0x320>
    8000bea4:	5420f0ef          	jal	8001b3e6 <printf>
    8000bea8:	02900513          	li	a0,41
    8000beac:	40c0e0ef          	jal	8001a2b8 <putchar>
    8000beb0:	4529                	li	a0,10
    8000beb2:	4060e0ef          	jal	8001a2b8 <putchar>
    8000beb6:	6014                	ld	a3,0(s0)
    8000beb8:	f0001737          	lui	a4,0xf0001
    8000bebc:	478d                	li	a5,3
    8000bebe:	0712                	sll	a4,a4,0x4
    8000bec0:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000bec4:	1782                	sll	a5,a5,0x20
    8000bec6:	8f75                	and	a4,a4,a3
    8000bec8:	10078793          	add	a5,a5,256
    8000becc:	4401                	li	s0,0
        excpt.triggered == true &&
        excpt.priv == PRIV_HS
    ); 


    TEST_END();
    8000bece:	00011597          	auipc	a1,0x11
    8000bed2:	0b258593          	add	a1,a1,178 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs trigger except that priv no change when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000bed6:	00f71763          	bne	a4,a5,8000bee4 <priv_change_12+0x104>
    8000beda:	4405                	li	s0,1
    TEST_END();
    8000bedc:	00011597          	auipc	a1,0x11
    8000bee0:	09458593          	add	a1,a1,148 # 8001cf70 <__func__.1+0x2c8>
    8000bee4:	00011517          	auipc	a0,0x11
    8000bee8:	14450513          	add	a0,a0,324 # 8001d028 <__func__.1+0x380>
    8000beec:	4fa0f0ef          	jal	8001b3e6 <printf>
    8000bef0:	4511                	li	a0,4
    8000bef2:	bedf40ef          	jal	80000ade <goto_priv>
    8000bef6:	c30f50ef          	jal	80001326 <reset_state>

}
    8000befa:	60a2                	ld	ra,8(sp)
    8000befc:	8522                	mv	a0,s0
    8000befe:	6402                	ld	s0,0(sp)
    8000bf00:	0141                	add	sp,sp,16
    8000bf02:	8082                	ret

000000008000bf04 <priv_change_13>:

bool priv_change_13(){
    8000bf04:	1141                	add	sp,sp,-16
    TEST_START();
    8000bf06:	00010597          	auipc	a1,0x10
    8000bf0a:	05a58593          	add	a1,a1,90 # 8001bf60 <__func__.2>
    8000bf0e:	00011517          	auipc	a0,0x11
    8000bf12:	08250513          	add	a0,a0,130 # 8001cf90 <__func__.1+0x2e8>
bool priv_change_13(){
    8000bf16:	e406                	sd	ra,8(sp)
    8000bf18:	e022                	sd	s0,0(sp)
    TEST_START();
    8000bf1a:	4cc0f0ef          	jal	8001b3e6 <printf>
    8000bf1e:	4529                	li	a0,10
    8000bf20:	3980e0ef          	jal	8001a2b8 <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000bf24:	4511                	li	a0,4
    8000bf26:	bb9f40ef          	jal	80000ade <goto_priv>
    reset_state();
    8000bf2a:	bfcf50ef          	jal	80001326 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000bf2e:	57fd                	li	a5,-1
    8000bf30:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000bf34:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000bf38:	60305073          	csrw	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000bf3c:	60205073          	csrw	hedeleg,0

    TEST_SETUP_EXCEPT();  
    8000bf40:	0ff0000f          	fence
    8000bf44:	4785                	li	a5,1
    8000bf46:	00031417          	auipc	s0,0x31
    8000bf4a:	0ca40413          	add	s0,s0,202 # 8003d010 <excpt>
    8000bf4e:	00f41023          	sh	a5,0(s0)
    8000bf52:	00031797          	auipc	a5,0x31
    8000bf56:	0e07bb23          	sd	zero,246(a5) # 8003d048 <excpt+0x38>
    8000bf5a:	0ff0000f          	fence
    goto_priv(PRIV_VU);      
    8000bf5e:	4501                	li	a0,0
    8000bf60:	b7ff40ef          	jal	80000ade <goto_priv>
    CSRR(CSR_MSTATUS);
    8000bf64:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000bf68:	08200593          	li	a1,130
    8000bf6c:	00013617          	auipc	a2,0x13
    8000bf70:	52c60613          	add	a2,a2,1324 # 8001f498 <__func__.1+0x27f0>
    8000bf74:	00011517          	auipc	a0,0x11
    8000bf78:	03450513          	add	a0,a0,52 # 8001cfa8 <__func__.1+0x300>
    8000bf7c:	46a0f0ef          	jal	8001b3e6 <printf>
    8000bf80:	6014                	ld	a3,0(s0)
    8000bf82:	f0001737          	lui	a4,0xf0001
    8000bf86:	478d                	li	a5,3
    8000bf88:	0712                	sll	a4,a4,0x4
    8000bf8a:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000bf8e:	1782                	sll	a5,a5,0x20
    8000bf90:	8f75                	and	a4,a4,a3
    8000bf92:	10078793          	add	a5,a5,256
    8000bf96:	00011597          	auipc	a1,0x11
    8000bf9a:	fea58593          	add	a1,a1,-22 # 8001cf80 <__func__.1+0x2d8>
    8000bf9e:	08f70463          	beq	a4,a5,8000c026 <priv_change_13+0x122>
    8000bfa2:	00011517          	auipc	a0,0x11
    8000bfa6:	01e50513          	add	a0,a0,30 # 8001cfc0 <__func__.1+0x318>
    8000bfaa:	43c0f0ef          	jal	8001b3e6 <printf>
    8000bfae:	00144783          	lbu	a5,1(s0)
    8000bfb2:	c789                	beqz	a5,8000bfbc <priv_change_13+0xb8>
    8000bfb4:	4058                	lw	a4,4(s0)
    8000bfb6:	478d                	li	a5,3
    8000bfb8:	06f70163          	beq	a4,a5,8000c01a <priv_change_13+0x116>
    8000bfbc:	00011517          	auipc	a0,0x11
    8000bfc0:	00c50513          	add	a0,a0,12 # 8001cfc8 <__func__.1+0x320>
    8000bfc4:	4220f0ef          	jal	8001b3e6 <printf>
    8000bfc8:	02900513          	li	a0,41
    8000bfcc:	2ec0e0ef          	jal	8001a2b8 <putchar>
    8000bfd0:	4529                	li	a0,10
    8000bfd2:	2e60e0ef          	jal	8001a2b8 <putchar>
    8000bfd6:	6014                	ld	a3,0(s0)
    8000bfd8:	f0001737          	lui	a4,0xf0001
    8000bfdc:	478d                	li	a5,3
    8000bfde:	0712                	sll	a4,a4,0x4
    8000bfe0:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000bfe4:	1782                	sll	a5,a5,0x20
    8000bfe6:	8f75                	and	a4,a4,a3
    8000bfe8:	10078793          	add	a5,a5,256
    8000bfec:	4401                	li	s0,0
        excpt.triggered == true &&
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VU
    );

    TEST_END();
    8000bfee:	00011597          	auipc	a1,0x11
    8000bff2:	f9258593          	add	a1,a1,-110 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000bff6:	04f70263          	beq	a4,a5,8000c03a <priv_change_13+0x136>
    TEST_END();
    8000bffa:	00011517          	auipc	a0,0x11
    8000bffe:	02e50513          	add	a0,a0,46 # 8001d028 <__func__.1+0x380>
    8000c002:	3e40f0ef          	jal	8001b3e6 <printf>
    8000c006:	4511                	li	a0,4
    8000c008:	ad7f40ef          	jal	80000ade <goto_priv>
    8000c00c:	b1af50ef          	jal	80001326 <reset_state>
}
    8000c010:	60a2                	ld	ra,8(sp)
    8000c012:	8522                	mv	a0,s0
    8000c014:	6402                	ld	s0,0(sp)
    8000c016:	0141                	add	sp,sp,16
    8000c018:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000c01a:	00019797          	auipc	a5,0x19
    8000c01e:	5e27a783          	lw	a5,1506(a5) # 800255fc <curr_priv>
    8000c022:	d7dd                	beqz	a5,8000bfd0 <priv_change_13+0xcc>
    8000c024:	bf61                	j	8000bfbc <priv_change_13+0xb8>
    8000c026:	00019797          	auipc	a5,0x19
    8000c02a:	5d67a783          	lw	a5,1494(a5) # 800255fc <curr_priv>
    8000c02e:	fbb5                	bnez	a5,8000bfa2 <priv_change_13+0x9e>
    8000c030:	00011597          	auipc	a1,0x11
    8000c034:	f4058593          	add	a1,a1,-192 # 8001cf70 <__func__.1+0x2c8>
    8000c038:	b7ad                	j	8000bfa2 <priv_change_13+0x9e>
    8000c03a:	00019797          	auipc	a5,0x19
    8000c03e:	5c27a783          	lw	a5,1474(a5) # 800255fc <curr_priv>
    8000c042:	ffc5                	bnez	a5,8000bffa <priv_change_13+0xf6>
    8000c044:	4405                	li	s0,1
    TEST_END();
    8000c046:	00011597          	auipc	a1,0x11
    8000c04a:	f2a58593          	add	a1,a1,-214 # 8001cf70 <__func__.1+0x2c8>
    8000c04e:	b775                	j	8000bffa <priv_change_13+0xf6>

000000008000c050 <priv_change_14>:

bool priv_change_14(){
    8000c050:	1141                	add	sp,sp,-16
    TEST_START();
    8000c052:	00010597          	auipc	a1,0x10
    8000c056:	f1e58593          	add	a1,a1,-226 # 8001bf70 <__func__.1>
    8000c05a:	00011517          	auipc	a0,0x11
    8000c05e:	f3650513          	add	a0,a0,-202 # 8001cf90 <__func__.1+0x2e8>
bool priv_change_14(){
    8000c062:	e406                	sd	ra,8(sp)
    8000c064:	e022                	sd	s0,0(sp)
    TEST_START();
    8000c066:	3800f0ef          	jal	8001b3e6 <printf>
    8000c06a:	4529                	li	a0,10
    8000c06c:	24c0e0ef          	jal	8001a2b8 <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，关闭理hedeleg/hideleg，切换到HS态处理异常，异常处理结束恢复执行sret到VU态
    goto_priv(PRIV_M);
    8000c070:	4511                	li	a0,4
    8000c072:	a6df40ef          	jal	80000ade <goto_priv>
    reset_state();
    8000c076:	ab0f50ef          	jal	80001326 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000c07a:	57fd                	li	a5,-1
    8000c07c:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000c080:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000c084:	60305073          	csrw	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000c088:	60205073          	csrw	hedeleg,0
    
    goto_priv(PRIV_VU);     
    8000c08c:	4501                	li	a0,0
    8000c08e:	a51f40ef          	jal	80000ade <goto_priv>

    TEST_SETUP_EXCEPT();        
    8000c092:	0ff0000f          	fence
    8000c096:	4785                	li	a5,1
    8000c098:	00031417          	auipc	s0,0x31
    8000c09c:	f7840413          	add	s0,s0,-136 # 8003d010 <excpt>
    8000c0a0:	00f41023          	sh	a5,0(s0)
    8000c0a4:	00031797          	auipc	a5,0x31
    8000c0a8:	fa07b223          	sd	zero,-92(a5) # 8003d048 <excpt+0x38>
    8000c0ac:	0ff0000f          	fence
    CSRW(medeleg, 0); 
    8000c0b0:	30205073          	csrw	medeleg,0

    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000c0b4:	08200593          	li	a1,130
    8000c0b8:	00013617          	auipc	a2,0x13
    8000c0bc:	45060613          	add	a2,a2,1104 # 8001f508 <__func__.1+0x2860>
    8000c0c0:	00011517          	auipc	a0,0x11
    8000c0c4:	ee850513          	add	a0,a0,-280 # 8001cfa8 <__func__.1+0x300>
    8000c0c8:	31e0f0ef          	jal	8001b3e6 <printf>
    8000c0cc:	6014                	ld	a3,0(s0)
    8000c0ce:	f0001737          	lui	a4,0xf0001
    8000c0d2:	478d                	li	a5,3
    8000c0d4:	0712                	sll	a4,a4,0x4
    8000c0d6:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000c0da:	1782                	sll	a5,a5,0x20
    8000c0dc:	8f75                	and	a4,a4,a3
    8000c0de:	10078793          	add	a5,a5,256
    8000c0e2:	00011597          	auipc	a1,0x11
    8000c0e6:	e9e58593          	add	a1,a1,-354 # 8001cf80 <__func__.1+0x2d8>
    8000c0ea:	08f70463          	beq	a4,a5,8000c172 <priv_change_14+0x122>
    8000c0ee:	00011517          	auipc	a0,0x11
    8000c0f2:	ed250513          	add	a0,a0,-302 # 8001cfc0 <__func__.1+0x318>
    8000c0f6:	2f00f0ef          	jal	8001b3e6 <printf>
    8000c0fa:	00144783          	lbu	a5,1(s0)
    8000c0fe:	c789                	beqz	a5,8000c108 <priv_change_14+0xb8>
    8000c100:	4058                	lw	a4,4(s0)
    8000c102:	478d                	li	a5,3
    8000c104:	06f70163          	beq	a4,a5,8000c166 <priv_change_14+0x116>
    8000c108:	00011517          	auipc	a0,0x11
    8000c10c:	ec050513          	add	a0,a0,-320 # 8001cfc8 <__func__.1+0x320>
    8000c110:	2d60f0ef          	jal	8001b3e6 <printf>
    8000c114:	02900513          	li	a0,41
    8000c118:	1a00e0ef          	jal	8001a2b8 <putchar>
    8000c11c:	4529                	li	a0,10
    8000c11e:	19a0e0ef          	jal	8001a2b8 <putchar>
    8000c122:	6014                	ld	a3,0(s0)
    8000c124:	f0001737          	lui	a4,0xf0001
    8000c128:	478d                	li	a5,3
    8000c12a:	0712                	sll	a4,a4,0x4
    8000c12c:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000c130:	1782                	sll	a5,a5,0x20
    8000c132:	8f75                	and	a4,a4,a3
    8000c134:	10078793          	add	a5,a5,256
    8000c138:	4401                	li	s0,0
        excpt.triggered == true &&
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VU
    );

    TEST_END();
    8000c13a:	00011597          	auipc	a1,0x11
    8000c13e:	e4658593          	add	a1,a1,-442 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000c142:	04f70263          	beq	a4,a5,8000c186 <priv_change_14+0x136>
    TEST_END();
    8000c146:	00011517          	auipc	a0,0x11
    8000c14a:	ee250513          	add	a0,a0,-286 # 8001d028 <__func__.1+0x380>
    8000c14e:	2980f0ef          	jal	8001b3e6 <printf>
    8000c152:	4511                	li	a0,4
    8000c154:	98bf40ef          	jal	80000ade <goto_priv>
    8000c158:	9cef50ef          	jal	80001326 <reset_state>

}
    8000c15c:	60a2                	ld	ra,8(sp)
    8000c15e:	8522                	mv	a0,s0
    8000c160:	6402                	ld	s0,0(sp)
    8000c162:	0141                	add	sp,sp,16
    8000c164:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000c166:	00019797          	auipc	a5,0x19
    8000c16a:	4967a783          	lw	a5,1174(a5) # 800255fc <curr_priv>
    8000c16e:	d7dd                	beqz	a5,8000c11c <priv_change_14+0xcc>
    8000c170:	bf61                	j	8000c108 <priv_change_14+0xb8>
    8000c172:	00019797          	auipc	a5,0x19
    8000c176:	48a7a783          	lw	a5,1162(a5) # 800255fc <curr_priv>
    8000c17a:	fbb5                	bnez	a5,8000c0ee <priv_change_14+0x9e>
    8000c17c:	00011597          	auipc	a1,0x11
    8000c180:	df458593          	add	a1,a1,-524 # 8001cf70 <__func__.1+0x2c8>
    8000c184:	b7ad                	j	8000c0ee <priv_change_14+0x9e>
    8000c186:	00019797          	auipc	a5,0x19
    8000c18a:	4767a783          	lw	a5,1142(a5) # 800255fc <curr_priv>
    8000c18e:	ffc5                	bnez	a5,8000c146 <priv_change_14+0xf6>
    8000c190:	4405                	li	s0,1
    TEST_END();
    8000c192:	00011597          	auipc	a1,0x11
    8000c196:	dde58593          	add	a1,a1,-546 # 8001cf70 <__func__.1+0x2c8>
    8000c19a:	b775                	j	8000c146 <priv_change_14+0xf6>

000000008000c19c <priv_change_15>:

bool priv_change_15(){
    8000c19c:	1141                	add	sp,sp,-16
    TEST_START();
    8000c19e:	00010597          	auipc	a1,0x10
    8000c1a2:	de258593          	add	a1,a1,-542 # 8001bf80 <__func__.0>
    8000c1a6:	00011517          	auipc	a0,0x11
    8000c1aa:	dea50513          	add	a0,a0,-534 # 8001cf90 <__func__.1+0x2e8>
bool priv_change_15(){
    8000c1ae:	e406                	sd	ra,8(sp)
    8000c1b0:	e022                	sd	s0,0(sp)
    TEST_START();
    8000c1b2:	2340f0ef          	jal	8001b3e6 <printf>
    8000c1b6:	4529                	li	a0,10
    8000c1b8:	1000e0ef          	jal	8001a2b8 <putchar>

    //V=1，VS模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000c1bc:	4511                	li	a0,4
    8000c1be:	921f40ef          	jal	80000ade <goto_priv>
    reset_state();
    8000c1c2:	964f50ef          	jal	80001326 <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000c1c6:	57fd                	li	a5,-1
    8000c1c8:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000c1cc:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000c1d0:	60305073          	csrw	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000c1d4:	60205073          	csrw	hedeleg,0

    TEST_SETUP_EXCEPT();    
    8000c1d8:	0ff0000f          	fence
    8000c1dc:	4785                	li	a5,1
    8000c1de:	00031417          	auipc	s0,0x31
    8000c1e2:	e3240413          	add	s0,s0,-462 # 8003d010 <excpt>
    8000c1e6:	00f41023          	sh	a5,0(s0)
    8000c1ea:	00031797          	auipc	a5,0x31
    8000c1ee:	e407bf23          	sd	zero,-418(a5) # 8003d048 <excpt+0x38>
    8000c1f2:	0ff0000f          	fence
    goto_priv(PRIV_VS);     
    8000c1f6:	4509                	li	a0,2
    8000c1f8:	8e7f40ef          	jal	80000ade <goto_priv>
    CSRR(CSR_MSTATUS);
    8000c1fc:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000c200:	08200593          	li	a1,130
    8000c204:	00013617          	auipc	a2,0x13
    8000c208:	37460613          	add	a2,a2,884 # 8001f578 <__func__.1+0x28d0>
    8000c20c:	00011517          	auipc	a0,0x11
    8000c210:	d9c50513          	add	a0,a0,-612 # 8001cfa8 <__func__.1+0x300>
    8000c214:	1d20f0ef          	jal	8001b3e6 <printf>
    8000c218:	6014                	ld	a3,0(s0)
    8000c21a:	f0001737          	lui	a4,0xf0001
    8000c21e:	478d                	li	a5,3
    8000c220:	0712                	sll	a4,a4,0x4
    8000c222:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000c226:	1782                	sll	a5,a5,0x20
    8000c228:	8f75                	and	a4,a4,a3
    8000c22a:	10078793          	add	a5,a5,256
    8000c22e:	00011597          	auipc	a1,0x11
    8000c232:	d5258593          	add	a1,a1,-686 # 8001cf80 <__func__.1+0x2d8>
    8000c236:	08f70663          	beq	a4,a5,8000c2c2 <priv_change_15+0x126>
    8000c23a:	00011517          	auipc	a0,0x11
    8000c23e:	d8650513          	add	a0,a0,-634 # 8001cfc0 <__func__.1+0x318>
    8000c242:	1a40f0ef          	jal	8001b3e6 <printf>
    8000c246:	00144783          	lbu	a5,1(s0)
    8000c24a:	c789                	beqz	a5,8000c254 <priv_change_15+0xb8>
    8000c24c:	4058                	lw	a4,4(s0)
    8000c24e:	478d                	li	a5,3
    8000c250:	06f70163          	beq	a4,a5,8000c2b2 <priv_change_15+0x116>
    8000c254:	00011517          	auipc	a0,0x11
    8000c258:	d7450513          	add	a0,a0,-652 # 8001cfc8 <__func__.1+0x320>
    8000c25c:	18a0f0ef          	jal	8001b3e6 <printf>
    8000c260:	02900513          	li	a0,41
    8000c264:	0540e0ef          	jal	8001a2b8 <putchar>
    8000c268:	4529                	li	a0,10
    8000c26a:	04e0e0ef          	jal	8001a2b8 <putchar>
    8000c26e:	6014                	ld	a3,0(s0)
    8000c270:	f0001737          	lui	a4,0xf0001
    8000c274:	478d                	li	a5,3
    8000c276:	0712                	sll	a4,a4,0x4
    8000c278:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000c27c:	1782                	sll	a5,a5,0x20
    8000c27e:	8f75                	and	a4,a4,a3
    8000c280:	10078793          	add	a5,a5,256
    8000c284:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VS
    );

    TEST_END();
    8000c286:	00011597          	auipc	a1,0x11
    8000c28a:	cfa58593          	add	a1,a1,-774 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000c28e:	04f70663          	beq	a4,a5,8000c2da <priv_change_15+0x13e>
    TEST_END();
    8000c292:	00011517          	auipc	a0,0x11
    8000c296:	d9650513          	add	a0,a0,-618 # 8001d028 <__func__.1+0x380>
    8000c29a:	14c0f0ef          	jal	8001b3e6 <printf>
    8000c29e:	4511                	li	a0,4
    8000c2a0:	83ff40ef          	jal	80000ade <goto_priv>
    8000c2a4:	882f50ef          	jal	80001326 <reset_state>

}
    8000c2a8:	60a2                	ld	ra,8(sp)
    8000c2aa:	8522                	mv	a0,s0
    8000c2ac:	6402                	ld	s0,0(sp)
    8000c2ae:	0141                	add	sp,sp,16
    8000c2b0:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000c2b2:	00019717          	auipc	a4,0x19
    8000c2b6:	34a72703          	lw	a4,842(a4) # 800255fc <curr_priv>
    8000c2ba:	4789                	li	a5,2
    8000c2bc:	f8f71ce3          	bne	a4,a5,8000c254 <priv_change_15+0xb8>
    8000c2c0:	b765                	j	8000c268 <priv_change_15+0xcc>
    8000c2c2:	00019717          	auipc	a4,0x19
    8000c2c6:	33a72703          	lw	a4,826(a4) # 800255fc <curr_priv>
    8000c2ca:	4789                	li	a5,2
    8000c2cc:	f6f717e3          	bne	a4,a5,8000c23a <priv_change_15+0x9e>
    8000c2d0:	00011597          	auipc	a1,0x11
    8000c2d4:	ca058593          	add	a1,a1,-864 # 8001cf70 <__func__.1+0x2c8>
    8000c2d8:	b78d                	j	8000c23a <priv_change_15+0x9e>
    8000c2da:	00019717          	auipc	a4,0x19
    8000c2de:	32272703          	lw	a4,802(a4) # 800255fc <curr_priv>
    8000c2e2:	4789                	li	a5,2
    8000c2e4:	faf717e3          	bne	a4,a5,8000c292 <priv_change_15+0xf6>
    8000c2e8:	4405                	li	s0,1
    TEST_END();
    8000c2ea:	00011597          	auipc	a1,0x11
    8000c2ee:	c8658593          	add	a1,a1,-890 # 8001cf70 <__func__.1+0x2c8>
    8000c2f2:	b745                	j	8000c292 <priv_change_15+0xf6>

000000008000c2f4 <priv_instruction>:
#include <rvh_test.h>
#include <page_tables.h> 
bool priv_instruction(){
    8000c2f4:	1141                	add	sp,sp,-16
    
    TEST_START();
    8000c2f6:	00010597          	auipc	a1,0x10
    8000c2fa:	c9a58593          	add	a1,a1,-870 # 8001bf90 <__func__.0>
    8000c2fe:	00011517          	auipc	a0,0x11
    8000c302:	c9250513          	add	a0,a0,-878 # 8001cf90 <__func__.1+0x2e8>
bool priv_instruction(){
    8000c306:	e406                	sd	ra,8(sp)
    TEST_START();
    8000c308:	0de0f0ef          	jal	8001b3e6 <printf>
    8000c30c:	4529                	li	a0,10
    8000c30e:	7ab0d0ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    8000c312:	450d                	li	a0,3
    8000c314:	fcaf40ef          	jal	80000ade <goto_priv>
    hspt_init();
    8000c318:	ac8f40ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000c31c:	d0af40ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    8000c320:	4509                	li	a0,2
    8000c322:	fbcf40ef          	jal	80000ade <goto_priv>
    vspt_init();
    8000c326:	b8ef40ef          	jal	800006b4 <vspt_init>

    //在VS_mode下执行sret，可以正确的返回相应的模式，且相关寄存器配置正确



    TEST_END();
    8000c32a:	00011597          	auipc	a1,0x11
    8000c32e:	c4658593          	add	a1,a1,-954 # 8001cf70 <__func__.1+0x2c8>
    8000c332:	00011517          	auipc	a0,0x11
    8000c336:	cf650513          	add	a0,a0,-778 # 8001d028 <__func__.1+0x380>
    8000c33a:	0ac0f0ef          	jal	8001b3e6 <printf>
    8000c33e:	4511                	li	a0,4
    8000c340:	f9ef40ef          	jal	80000ade <goto_priv>
    8000c344:	fe3f40ef          	jal	80001326 <reset_state>
    8000c348:	60a2                	ld	ra,8(sp)
    8000c34a:	4505                	li	a0,1
    8000c34c:	0141                	add	sp,sp,16
    8000c34e:	8082                	ret

000000008000c350 <addr_unaligned>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool addr_unaligned() {
    8000c350:	7179                	add	sp,sp,-48

    TEST_START();
    8000c352:	00010597          	auipc	a1,0x10
    8000c356:	c5658593          	add	a1,a1,-938 # 8001bfa8 <__func__.1>
    8000c35a:	00011517          	auipc	a0,0x11
    8000c35e:	c3650513          	add	a0,a0,-970 # 8001cf90 <__func__.1+0x2e8>
bool addr_unaligned() {
    8000c362:	f406                	sd	ra,40(sp)
    8000c364:	f022                	sd	s0,32(sp)
    8000c366:	ec26                	sd	s1,24(sp)
    8000c368:	e84a                	sd	s2,16(sp)
    8000c36a:	e44e                	sd	s3,8(sp)
    TEST_START();
    8000c36c:	07a0f0ef          	jal	8001b3e6 <printf>
    8000c370:	4529                	li	a0,10
    8000c372:	7470d0ef          	jal	8001a2b8 <putchar>

    TEST_SETUP_EXCEPT();
    8000c376:	0ff0000f          	fence
    8000c37a:	00031417          	auipc	s0,0x31
    8000c37e:	c9640413          	add	s0,s0,-874 # 8003d010 <excpt>
    8000c382:	4485                	li	s1,1
    8000c384:	00941023          	sh	s1,0(s0)
    8000c388:	00031797          	auipc	a5,0x31
    8000c38c:	cc07b023          	sd	zero,-832(a5) # 8003d048 <excpt+0x38>
    8000c390:	0ff0000f          	fence
    
    
    hspt_init();        
    8000c394:	a4cf40ef          	jal	800005e0 <hspt_init>
    goto_priv(PRIV_HS);     
    8000c398:	450d                	li	a0,3
    8000c39a:	f44f40ef          	jal	80000ade <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSRWX_GRWX) + 1;      
    uint64_t value = 0xdeadbeef;

    //load byte地址不会发生未对齐
    TEST_SETUP_EXCEPT();        
    8000c39e:	0ff0000f          	fence
    8000c3a2:	00031797          	auipc	a5,0x31
    8000c3a6:	ca07b323          	sd	zero,-858(a5) # 8003d048 <excpt+0x38>
    8000c3aa:	00941023          	sh	s1,0(s0)
    8000c3ae:	0ff0000f          	fence
    8000c3b2:	00017917          	auipc	s2,0x17
    8000c3b6:	22693903          	ld	s2,550(s2) # 800235d8 <__func__.1+0x6930>
    8000c3ba:	00090783          	lb	a5,0(s2)
    value = lb(vaddr_f);
    TEST_ASSERT("load byte address is not aligned successful",         
    8000c3be:	08200593          	li	a1,130
    8000c3c2:	00013617          	auipc	a2,0x13
    8000c3c6:	22660613          	add	a2,a2,550 # 8001f5e8 <__func__.1+0x2940>
    8000c3ca:	00011517          	auipc	a0,0x11
    8000c3ce:	bde50513          	add	a0,a0,-1058 # 8001cfa8 <__func__.1+0x300>
    8000c3d2:	0140f0ef          	jal	8001b3e6 <printf>
    8000c3d6:	00144783          	lbu	a5,1(s0)
    8000c3da:	00011597          	auipc	a1,0x11
    8000c3de:	b9658593          	add	a1,a1,-1130 # 8001cf70 <__func__.1+0x2c8>
    8000c3e2:	c789                	beqz	a5,8000c3ec <addr_unaligned+0x9c>
    8000c3e4:	00011597          	auipc	a1,0x11
    8000c3e8:	b9c58593          	add	a1,a1,-1124 # 8001cf80 <__func__.1+0x2d8>
    8000c3ec:	00011517          	auipc	a0,0x11
    8000c3f0:	bd450513          	add	a0,a0,-1068 # 8001cfc0 <__func__.1+0x318>
    8000c3f4:	7f30e0ef          	jal	8001b3e6 <printf>
    8000c3f8:	00144783          	lbu	a5,1(s0)
    8000c3fc:	40079e63          	bnez	a5,8000c818 <addr_unaligned+0x4c8>
    8000c400:	4529                	li	a0,10
    8000c402:	6b70d0ef          	jal	8001a2b8 <putchar>
    8000c406:	00144983          	lbu	s3,1(s0)
        excpt.triggered == false
    );

    //load half地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    8000c40a:	0ff0000f          	fence
    8000c40e:	4785                	li	a5,1
    8000c410:	00f41023          	sh	a5,0(s0)
    8000c414:	00031797          	auipc	a5,0x31
    8000c418:	c207ba23          	sd	zero,-972(a5) # 8003d048 <excpt+0x38>
    8000c41c:	0ff0000f          	fence
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    8000c420:	00091783          	lh	a5,0(s2)
    value = lh(vaddr_f);
    TEST_ASSERT(" load half address is not aligned result in a lam",         
    8000c424:	08200593          	li	a1,130
    8000c428:	00013617          	auipc	a2,0x13
    8000c42c:	1f060613          	add	a2,a2,496 # 8001f618 <__func__.1+0x2970>
    8000c430:	00011517          	auipc	a0,0x11
    8000c434:	b7850513          	add	a0,a0,-1160 # 8001cfa8 <__func__.1+0x300>
    8000c438:	7af0e0ef          	jal	8001b3e6 <printf>
    8000c43c:	00144783          	lbu	a5,1(s0)
    8000c440:	00011597          	auipc	a1,0x11
    8000c444:	b4058593          	add	a1,a1,-1216 # 8001cf80 <__func__.1+0x2d8>
    8000c448:	c789                	beqz	a5,8000c452 <addr_unaligned+0x102>
    8000c44a:	6418                	ld	a4,8(s0)
    8000c44c:	4791                	li	a5,4
    8000c44e:	40f70f63          	beq	a4,a5,8000c86c <addr_unaligned+0x51c>
    8000c452:	00011517          	auipc	a0,0x11
    8000c456:	b6e50513          	add	a0,a0,-1170 # 8001cfc0 <__func__.1+0x318>
    8000c45a:	78d0e0ef          	jal	8001b3e6 <printf>
    8000c45e:	00144783          	lbu	a5,1(s0)
    8000c462:	c789                	beqz	a5,8000c46c <addr_unaligned+0x11c>
    8000c464:	6418                	ld	a4,8(s0)
    8000c466:	4791                	li	a5,4
    8000c468:	00f70c63          	beq	a4,a5,8000c480 <addr_unaligned+0x130>
    8000c46c:	00011517          	auipc	a0,0x11
    8000c470:	b5c50513          	add	a0,a0,-1188 # 8001cfc8 <__func__.1+0x320>
    8000c474:	7730e0ef          	jal	8001b3e6 <printf>
    8000c478:	02900513          	li	a0,41
    8000c47c:	63d0d0ef          	jal	8001a2b8 <putchar>
    8000c480:	4529                	li	a0,10
    8000c482:	6370d0ef          	jal	8001a2b8 <putchar>
    8000c486:	4481                	li	s1,0
    8000c488:	00099663          	bnez	s3,8000c494 <addr_unaligned+0x144>
    8000c48c:	00144783          	lbu	a5,1(s0)
    8000c490:	36079f63          	bnez	a5,8000c80e <addr_unaligned+0x4be>
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );
    
    //load word地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    8000c494:	0ff0000f          	fence
    8000c498:	4785                	li	a5,1
    8000c49a:	00f41023          	sh	a5,0(s0)
    8000c49e:	00031797          	auipc	a5,0x31
    8000c4a2:	ba07b523          	sd	zero,-1110(a5) # 8003d048 <excpt+0x38>
    8000c4a6:	0ff0000f          	fence
LOAD_INSTRUCTION(lw, "lw", uint32_t); 
    8000c4aa:	00092783          	lw	a5,0(s2)
    value = lw(vaddr_f);
    TEST_ASSERT("load word address is not aligned result in a lam",         
    8000c4ae:	08200593          	li	a1,130
    8000c4b2:	00013617          	auipc	a2,0x13
    8000c4b6:	19e60613          	add	a2,a2,414 # 8001f650 <__func__.1+0x29a8>
    8000c4ba:	00011517          	auipc	a0,0x11
    8000c4be:	aee50513          	add	a0,a0,-1298 # 8001cfa8 <__func__.1+0x300>
    8000c4c2:	7250e0ef          	jal	8001b3e6 <printf>
    8000c4c6:	00144783          	lbu	a5,1(s0)
    8000c4ca:	00011597          	auipc	a1,0x11
    8000c4ce:	ab658593          	add	a1,a1,-1354 # 8001cf80 <__func__.1+0x2d8>
    8000c4d2:	c789                	beqz	a5,8000c4dc <addr_unaligned+0x18c>
    8000c4d4:	6418                	ld	a4,8(s0)
    8000c4d6:	4791                	li	a5,4
    8000c4d8:	38f70f63          	beq	a4,a5,8000c876 <addr_unaligned+0x526>
    8000c4dc:	00011517          	auipc	a0,0x11
    8000c4e0:	ae450513          	add	a0,a0,-1308 # 8001cfc0 <__func__.1+0x318>
    8000c4e4:	7030e0ef          	jal	8001b3e6 <printf>
    8000c4e8:	00144783          	lbu	a5,1(s0)
    8000c4ec:	c789                	beqz	a5,8000c4f6 <addr_unaligned+0x1a6>
    8000c4ee:	6418                	ld	a4,8(s0)
    8000c4f0:	4791                	li	a5,4
    8000c4f2:	00f70c63          	beq	a4,a5,8000c50a <addr_unaligned+0x1ba>
    8000c4f6:	00011517          	auipc	a0,0x11
    8000c4fa:	ad250513          	add	a0,a0,-1326 # 8001cfc8 <__func__.1+0x320>
    8000c4fe:	6e90e0ef          	jal	8001b3e6 <printf>
    8000c502:	02900513          	li	a0,41
    8000c506:	5b30d0ef          	jal	8001a2b8 <putchar>
    8000c50a:	4529                	li	a0,10
    8000c50c:	5ad0d0ef          	jal	8001a2b8 <putchar>
    8000c510:	c491                	beqz	s1,8000c51c <addr_unaligned+0x1cc>
    8000c512:	00144783          	lbu	a5,1(s0)
    8000c516:	4481                	li	s1,0
    8000c518:	2e079663          	bnez	a5,8000c804 <addr_unaligned+0x4b4>
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );

    //load double word地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    8000c51c:	0ff0000f          	fence
    8000c520:	4785                	li	a5,1
    8000c522:	00f41023          	sh	a5,0(s0)
    8000c526:	00031797          	auipc	a5,0x31
    8000c52a:	b207b123          	sd	zero,-1246(a5) # 8003d048 <excpt+0x38>
    8000c52e:	0ff0000f          	fence
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8000c532:	00093983          	ld	s3,0(s2)
    value = ld(vaddr_f);
    TEST_ASSERT("load double word address is not aligned result in a lam",         
    8000c536:	08200593          	li	a1,130
    8000c53a:	00013617          	auipc	a2,0x13
    8000c53e:	14e60613          	add	a2,a2,334 # 8001f688 <__func__.1+0x29e0>
    8000c542:	00011517          	auipc	a0,0x11
    8000c546:	a6650513          	add	a0,a0,-1434 # 8001cfa8 <__func__.1+0x300>
    8000c54a:	69d0e0ef          	jal	8001b3e6 <printf>
    8000c54e:	00144783          	lbu	a5,1(s0)
    8000c552:	00011597          	auipc	a1,0x11
    8000c556:	a2e58593          	add	a1,a1,-1490 # 8001cf80 <__func__.1+0x2d8>
    8000c55a:	c789                	beqz	a5,8000c564 <addr_unaligned+0x214>
    8000c55c:	6418                	ld	a4,8(s0)
    8000c55e:	4791                	li	a5,4
    8000c560:	2ef70263          	beq	a4,a5,8000c844 <addr_unaligned+0x4f4>
    8000c564:	00011517          	auipc	a0,0x11
    8000c568:	a5c50513          	add	a0,a0,-1444 # 8001cfc0 <__func__.1+0x318>
    8000c56c:	67b0e0ef          	jal	8001b3e6 <printf>
    8000c570:	00144783          	lbu	a5,1(s0)
    8000c574:	c789                	beqz	a5,8000c57e <addr_unaligned+0x22e>
    8000c576:	6418                	ld	a4,8(s0)
    8000c578:	4791                	li	a5,4
    8000c57a:	00f70c63          	beq	a4,a5,8000c592 <addr_unaligned+0x242>
    8000c57e:	00011517          	auipc	a0,0x11
    8000c582:	a4a50513          	add	a0,a0,-1462 # 8001cfc8 <__func__.1+0x320>
    8000c586:	6610e0ef          	jal	8001b3e6 <printf>
    8000c58a:	02900513          	li	a0,41
    8000c58e:	52b0d0ef          	jal	8001a2b8 <putchar>
    8000c592:	4529                	li	a0,10
    8000c594:	5250d0ef          	jal	8001a2b8 <putchar>
    8000c598:	c491                	beqz	s1,8000c5a4 <addr_unaligned+0x254>
    8000c59a:	00144783          	lbu	a5,1(s0)
    8000c59e:	4481                	li	s1,0
    8000c5a0:	24079d63          	bnez	a5,8000c7fa <addr_unaligned+0x4aa>
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );

    //store byte地址不会发生未对齐
    TEST_SETUP_EXCEPT();        
    8000c5a4:	0ff0000f          	fence
    8000c5a8:	4785                	li	a5,1
    8000c5aa:	00f41023          	sh	a5,0(s0)
    8000c5ae:	00031797          	auipc	a5,0x31
    8000c5b2:	a807bd23          	sd	zero,-1382(a5) # 8003d048 <excpt+0x38>
    8000c5b6:	0ff0000f          	fence
STORE_INSTRUCTION(sb, "sb", uint8_t);
    8000c5ba:	01390023          	sb	s3,0(s2)
    sb(vaddr_f,value);
    TEST_ASSERT("store byte address is not aligned successful",         
    8000c5be:	08200593          	li	a1,130
    8000c5c2:	00013617          	auipc	a2,0x13
    8000c5c6:	0fe60613          	add	a2,a2,254 # 8001f6c0 <__func__.1+0x2a18>
    8000c5ca:	00011517          	auipc	a0,0x11
    8000c5ce:	9de50513          	add	a0,a0,-1570 # 8001cfa8 <__func__.1+0x300>
    8000c5d2:	6150e0ef          	jal	8001b3e6 <printf>
    8000c5d6:	00144783          	lbu	a5,1(s0)
    8000c5da:	00011597          	auipc	a1,0x11
    8000c5de:	9a658593          	add	a1,a1,-1626 # 8001cf80 <__func__.1+0x2d8>
    8000c5e2:	e789                	bnez	a5,8000c5ec <addr_unaligned+0x29c>
    8000c5e4:	00011597          	auipc	a1,0x11
    8000c5e8:	98c58593          	add	a1,a1,-1652 # 8001cf70 <__func__.1+0x2c8>
    8000c5ec:	00011517          	auipc	a0,0x11
    8000c5f0:	9d450513          	add	a0,a0,-1580 # 8001cfc0 <__func__.1+0x318>
    8000c5f4:	5f30e0ef          	jal	8001b3e6 <printf>
    8000c5f8:	00144783          	lbu	a5,1(s0)
    8000c5fc:	22079963          	bnez	a5,8000c82e <addr_unaligned+0x4de>
    8000c600:	4529                	li	a0,10
    8000c602:	4b70d0ef          	jal	8001a2b8 <putchar>
    8000c606:	c489                	beqz	s1,8000c610 <addr_unaligned+0x2c0>
    8000c608:	00144483          	lbu	s1,1(s0)
    8000c60c:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    );

    //store half地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    8000c610:	0ff0000f          	fence
    8000c614:	4785                	li	a5,1
    8000c616:	00f41023          	sh	a5,0(s0)
    8000c61a:	00031797          	auipc	a5,0x31
    8000c61e:	a207b723          	sd	zero,-1490(a5) # 8003d048 <excpt+0x38>
    8000c622:	0ff0000f          	fence
STORE_INSTRUCTION(sh, "sh", uint16_t);
    8000c626:	01391023          	sh	s3,0(s2)
    sh(vaddr_f,value);
    TEST_ASSERT("store half address is not aligned result in a sam",         
    8000c62a:	08200593          	li	a1,130
    8000c62e:	00013617          	auipc	a2,0x13
    8000c632:	0c260613          	add	a2,a2,194 # 8001f6f0 <__func__.1+0x2a48>
    8000c636:	00011517          	auipc	a0,0x11
    8000c63a:	97250513          	add	a0,a0,-1678 # 8001cfa8 <__func__.1+0x300>
    8000c63e:	5a90e0ef          	jal	8001b3e6 <printf>
    8000c642:	00144783          	lbu	a5,1(s0)
    8000c646:	00011597          	auipc	a1,0x11
    8000c64a:	93a58593          	add	a1,a1,-1734 # 8001cf80 <__func__.1+0x2d8>
    8000c64e:	c789                	beqz	a5,8000c658 <addr_unaligned+0x308>
    8000c650:	6418                	ld	a4,8(s0)
    8000c652:	4799                	li	a5,6
    8000c654:	1ef70d63          	beq	a4,a5,8000c84e <addr_unaligned+0x4fe>
    8000c658:	00011517          	auipc	a0,0x11
    8000c65c:	96850513          	add	a0,a0,-1688 # 8001cfc0 <__func__.1+0x318>
    8000c660:	5870e0ef          	jal	8001b3e6 <printf>
    8000c664:	00144783          	lbu	a5,1(s0)
    8000c668:	c789                	beqz	a5,8000c672 <addr_unaligned+0x322>
    8000c66a:	6418                	ld	a4,8(s0)
    8000c66c:	4799                	li	a5,6
    8000c66e:	00f70c63          	beq	a4,a5,8000c686 <addr_unaligned+0x336>
    8000c672:	00011517          	auipc	a0,0x11
    8000c676:	95650513          	add	a0,a0,-1706 # 8001cfc8 <__func__.1+0x320>
    8000c67a:	56d0e0ef          	jal	8001b3e6 <printf>
    8000c67e:	02900513          	li	a0,41
    8000c682:	4370d0ef          	jal	8001a2b8 <putchar>
    8000c686:	4529                	li	a0,10
    8000c688:	4310d0ef          	jal	8001a2b8 <putchar>
    8000c68c:	c491                	beqz	s1,8000c698 <addr_unaligned+0x348>
    8000c68e:	00144783          	lbu	a5,1(s0)
    8000c692:	4481                	li	s1,0
    8000c694:	14079e63          	bnez	a5,8000c7f0 <addr_unaligned+0x4a0>
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );
    
    //store word地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    8000c698:	0ff0000f          	fence
    8000c69c:	4785                	li	a5,1
    8000c69e:	00f41023          	sh	a5,0(s0)
    8000c6a2:	00031797          	auipc	a5,0x31
    8000c6a6:	9a07b323          	sd	zero,-1626(a5) # 8003d048 <excpt+0x38>
    8000c6aa:	0ff0000f          	fence
STORE_INSTRUCTION(sw, "sw", uint32_t);
    8000c6ae:	01392023          	sw	s3,0(s2)
    sw(vaddr_f,value);
    TEST_ASSERT("store word address is not aligned result in a sam",         
    8000c6b2:	08200593          	li	a1,130
    8000c6b6:	00013617          	auipc	a2,0x13
    8000c6ba:	07260613          	add	a2,a2,114 # 8001f728 <__func__.1+0x2a80>
    8000c6be:	00011517          	auipc	a0,0x11
    8000c6c2:	8ea50513          	add	a0,a0,-1814 # 8001cfa8 <__func__.1+0x300>
    8000c6c6:	5210e0ef          	jal	8001b3e6 <printf>
    8000c6ca:	00144783          	lbu	a5,1(s0)
    8000c6ce:	00011597          	auipc	a1,0x11
    8000c6d2:	8b258593          	add	a1,a1,-1870 # 8001cf80 <__func__.1+0x2d8>
    8000c6d6:	c789                	beqz	a5,8000c6e0 <addr_unaligned+0x390>
    8000c6d8:	6418                	ld	a4,8(s0)
    8000c6da:	4799                	li	a5,6
    8000c6dc:	16f70e63          	beq	a4,a5,8000c858 <addr_unaligned+0x508>
    8000c6e0:	00011517          	auipc	a0,0x11
    8000c6e4:	8e050513          	add	a0,a0,-1824 # 8001cfc0 <__func__.1+0x318>
    8000c6e8:	4ff0e0ef          	jal	8001b3e6 <printf>
    8000c6ec:	00144783          	lbu	a5,1(s0)
    8000c6f0:	c789                	beqz	a5,8000c6fa <addr_unaligned+0x3aa>
    8000c6f2:	6418                	ld	a4,8(s0)
    8000c6f4:	4799                	li	a5,6
    8000c6f6:	00f70c63          	beq	a4,a5,8000c70e <addr_unaligned+0x3be>
    8000c6fa:	00011517          	auipc	a0,0x11
    8000c6fe:	8ce50513          	add	a0,a0,-1842 # 8001cfc8 <__func__.1+0x320>
    8000c702:	4e50e0ef          	jal	8001b3e6 <printf>
    8000c706:	02900513          	li	a0,41
    8000c70a:	3af0d0ef          	jal	8001a2b8 <putchar>
    8000c70e:	4529                	li	a0,10
    8000c710:	3a90d0ef          	jal	8001a2b8 <putchar>
    8000c714:	c489                	beqz	s1,8000c71e <addr_unaligned+0x3ce>
    8000c716:	00144783          	lbu	a5,1(s0)
    8000c71a:	4481                	li	s1,0
    8000c71c:	e7e9                	bnez	a5,8000c7e6 <addr_unaligned+0x496>
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );

    //store double word地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    8000c71e:	0ff0000f          	fence
    8000c722:	4785                	li	a5,1
    8000c724:	00f41023          	sh	a5,0(s0)
    8000c728:	00031797          	auipc	a5,0x31
    8000c72c:	9207b023          	sd	zero,-1760(a5) # 8003d048 <excpt+0x38>
    8000c730:	0ff0000f          	fence
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8000c734:	01393023          	sd	s3,0(s2)
    sd(vaddr_f,value);
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    8000c738:	08200593          	li	a1,130
    8000c73c:	00013617          	auipc	a2,0x13
    8000c740:	02460613          	add	a2,a2,36 # 8001f760 <__func__.1+0x2ab8>
    8000c744:	00011517          	auipc	a0,0x11
    8000c748:	86450513          	add	a0,a0,-1948 # 8001cfa8 <__func__.1+0x300>
    8000c74c:	49b0e0ef          	jal	8001b3e6 <printf>
    8000c750:	00144783          	lbu	a5,1(s0)
    8000c754:	00011597          	auipc	a1,0x11
    8000c758:	82c58593          	add	a1,a1,-2004 # 8001cf80 <__func__.1+0x2d8>
    8000c75c:	c789                	beqz	a5,8000c766 <addr_unaligned+0x416>
    8000c75e:	6418                	ld	a4,8(s0)
    8000c760:	4799                	li	a5,6
    8000c762:	10f70063          	beq	a4,a5,8000c862 <addr_unaligned+0x512>
    8000c766:	00011517          	auipc	a0,0x11
    8000c76a:	85a50513          	add	a0,a0,-1958 # 8001cfc0 <__func__.1+0x318>
    8000c76e:	4790e0ef          	jal	8001b3e6 <printf>
    8000c772:	00144783          	lbu	a5,1(s0)
    8000c776:	c789                	beqz	a5,8000c780 <addr_unaligned+0x430>
    8000c778:	6418                	ld	a4,8(s0)
    8000c77a:	4799                	li	a5,6
    8000c77c:	00f70c63          	beq	a4,a5,8000c794 <addr_unaligned+0x444>
    8000c780:	00011517          	auipc	a0,0x11
    8000c784:	84850513          	add	a0,a0,-1976 # 8001cfc8 <__func__.1+0x320>
    8000c788:	45f0e0ef          	jal	8001b3e6 <printf>
    8000c78c:	02900513          	li	a0,41
    8000c790:	3290d0ef          	jal	8001a2b8 <putchar>
    8000c794:	4529                	li	a0,10
    8000c796:	3230d0ef          	jal	8001a2b8 <putchar>
    8000c79a:	c0a1                	beqz	s1,8000c7da <addr_unaligned+0x48a>
    8000c79c:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );

    TEST_END();
    8000c7a0:	00010597          	auipc	a1,0x10
    8000c7a4:	7e058593          	add	a1,a1,2016 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    8000c7a8:	c491                	beqz	s1,8000c7b4 <addr_unaligned+0x464>
    8000c7aa:	6418                	ld	a4,8(s0)
    8000c7ac:	4799                	li	a5,6
    8000c7ae:	0cf70963          	beq	a4,a5,8000c880 <addr_unaligned+0x530>
    8000c7b2:	4481                	li	s1,0
    TEST_END();
    8000c7b4:	00011517          	auipc	a0,0x11
    8000c7b8:	87450513          	add	a0,a0,-1932 # 8001d028 <__func__.1+0x380>
    8000c7bc:	42b0e0ef          	jal	8001b3e6 <printf>
    8000c7c0:	4511                	li	a0,4
    8000c7c2:	b1cf40ef          	jal	80000ade <goto_priv>
    8000c7c6:	b61f40ef          	jal	80001326 <reset_state>

    8000c7ca:	70a2                	ld	ra,40(sp)
    8000c7cc:	7402                	ld	s0,32(sp)
    8000c7ce:	6942                	ld	s2,16(sp)
    8000c7d0:	69a2                	ld	s3,8(sp)
    8000c7d2:	8526                	mv	a0,s1
    8000c7d4:	64e2                	ld	s1,24(sp)
    8000c7d6:	6145                	add	sp,sp,48
    8000c7d8:	8082                	ret
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    8000c7da:	4481                	li	s1,0
    TEST_END();
    8000c7dc:	00010597          	auipc	a1,0x10
    8000c7e0:	7a458593          	add	a1,a1,1956 # 8001cf80 <__func__.1+0x2d8>
    8000c7e4:	bfc1                	j	8000c7b4 <addr_unaligned+0x464>
    TEST_ASSERT("store word address is not aligned result in a sam",         
    8000c7e6:	6404                	ld	s1,8(s0)
    8000c7e8:	14e9                	add	s1,s1,-6
    8000c7ea:	0014b493          	seqz	s1,s1
    8000c7ee:	bf05                	j	8000c71e <addr_unaligned+0x3ce>
    TEST_ASSERT("store half address is not aligned result in a sam",         
    8000c7f0:	6404                	ld	s1,8(s0)
    8000c7f2:	14e9                	add	s1,s1,-6
    8000c7f4:	0014b493          	seqz	s1,s1
    8000c7f8:	b545                	j	8000c698 <addr_unaligned+0x348>
    TEST_ASSERT("load double word address is not aligned result in a lam",         
    8000c7fa:	6404                	ld	s1,8(s0)
    8000c7fc:	14f1                	add	s1,s1,-4
    8000c7fe:	0014b493          	seqz	s1,s1
    8000c802:	b34d                	j	8000c5a4 <addr_unaligned+0x254>
    TEST_ASSERT("load word address is not aligned result in a lam",         
    8000c804:	6404                	ld	s1,8(s0)
    8000c806:	14f1                	add	s1,s1,-4
    8000c808:	0014b493          	seqz	s1,s1
    8000c80c:	bb01                	j	8000c51c <addr_unaligned+0x1cc>
    TEST_ASSERT(" load half address is not aligned result in a lam",         
    8000c80e:	6404                	ld	s1,8(s0)
    8000c810:	14f1                	add	s1,s1,-4
    8000c812:	0014b493          	seqz	s1,s1
    8000c816:	b9bd                	j	8000c494 <addr_unaligned+0x144>
    TEST_ASSERT("load byte address is not aligned successful",         
    8000c818:	00010517          	auipc	a0,0x10
    8000c81c:	7b050513          	add	a0,a0,1968 # 8001cfc8 <__func__.1+0x320>
    8000c820:	3c70e0ef          	jal	8001b3e6 <printf>
    8000c824:	02900513          	li	a0,41
    8000c828:	2910d0ef          	jal	8001a2b8 <putchar>
    8000c82c:	bed1                	j	8000c400 <addr_unaligned+0xb0>
    TEST_ASSERT("store byte address is not aligned successful",         
    8000c82e:	00010517          	auipc	a0,0x10
    8000c832:	79a50513          	add	a0,a0,1946 # 8001cfc8 <__func__.1+0x320>
    8000c836:	3b10e0ef          	jal	8001b3e6 <printf>
    8000c83a:	02900513          	li	a0,41
    8000c83e:	27b0d0ef          	jal	8001a2b8 <putchar>
    8000c842:	bb7d                	j	8000c600 <addr_unaligned+0x2b0>
    TEST_ASSERT("load double word address is not aligned result in a lam",         
    8000c844:	00010597          	auipc	a1,0x10
    8000c848:	72c58593          	add	a1,a1,1836 # 8001cf70 <__func__.1+0x2c8>
    8000c84c:	bb21                	j	8000c564 <addr_unaligned+0x214>
    TEST_ASSERT("store half address is not aligned result in a sam",         
    8000c84e:	00010597          	auipc	a1,0x10
    8000c852:	72258593          	add	a1,a1,1826 # 8001cf70 <__func__.1+0x2c8>
    8000c856:	b509                	j	8000c658 <addr_unaligned+0x308>
    TEST_ASSERT("store word address is not aligned result in a sam",         
    8000c858:	00010597          	auipc	a1,0x10
    8000c85c:	71858593          	add	a1,a1,1816 # 8001cf70 <__func__.1+0x2c8>
    8000c860:	b541                	j	8000c6e0 <addr_unaligned+0x390>
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    8000c862:	00010597          	auipc	a1,0x10
    8000c866:	70e58593          	add	a1,a1,1806 # 8001cf70 <__func__.1+0x2c8>
    8000c86a:	bdf5                	j	8000c766 <addr_unaligned+0x416>
    TEST_ASSERT(" load half address is not aligned result in a lam",         
    8000c86c:	00010597          	auipc	a1,0x10
    8000c870:	70458593          	add	a1,a1,1796 # 8001cf70 <__func__.1+0x2c8>
    8000c874:	bef9                	j	8000c452 <addr_unaligned+0x102>
    TEST_ASSERT("load word address is not aligned result in a lam",         
    8000c876:	00010597          	auipc	a1,0x10
    8000c87a:	6fa58593          	add	a1,a1,1786 # 8001cf70 <__func__.1+0x2c8>
    8000c87e:	b9b9                	j	8000c4dc <addr_unaligned+0x18c>
    TEST_END();
    8000c880:	00010597          	auipc	a1,0x10
    8000c884:	6f058593          	add	a1,a1,1776 # 8001cf70 <__func__.1+0x2c8>
    8000c888:	b735                	j	8000c7b4 <addr_unaligned+0x464>

000000008000c88a <illegal_except_1>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool illegal_except_1() {
    8000c88a:	1101                	add	sp,sp,-32

    TEST_START();
    8000c88c:	0000f597          	auipc	a1,0xf
    8000c890:	72c58593          	add	a1,a1,1836 # 8001bfb8 <__func__.13>
    8000c894:	00010517          	auipc	a0,0x10
    8000c898:	6fc50513          	add	a0,a0,1788 # 8001cf90 <__func__.1+0x2e8>
bool illegal_except_1() {
    8000c89c:	ec06                	sd	ra,24(sp)
    8000c89e:	e822                	sd	s0,16(sp)
    8000c8a0:	e426                	sd	s1,8(sp)
    TEST_START();
    8000c8a2:	3450e0ef          	jal	8001b3e6 <printf>
    8000c8a6:	4529                	li	a0,10
    8000c8a8:	2110d0ef          	jal	8001a2b8 <putchar>

    TEST_SETUP_EXCEPT();
    8000c8ac:	0ff0000f          	fence
    8000c8b0:	4785                	li	a5,1
    8000c8b2:	00030417          	auipc	s0,0x30
    8000c8b6:	75e40413          	add	s0,s0,1886 # 8003d010 <excpt>
    8000c8ba:	00f41023          	sh	a5,0(s0)
    8000c8be:	00030797          	auipc	a5,0x30
    8000c8c2:	7807b523          	sd	zero,1930(a5) # 8003d048 <excpt+0x38>
    8000c8c6:	0ff0000f          	fence
    //     excpt.triggered == true &&
    //     excpt.cause == CAUSE_ILI
    // ); 

    //当前权限满足最低CSR访问权限，CSR写行为，但访问的CSR只读
    goto_priv(PRIV_M);
    8000c8ca:	4511                	li	a0,4
    8000c8cc:	a12f40ef          	jal	80000ade <goto_priv>
    CSRW(CSR_MCONFIGPTR,0xfff);
    8000c8d0:	6785                	lui	a5,0x1
    8000c8d2:	37fd                	addw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8000c8d4:	f1579073          	csrw	0xf15,a5
    TEST_ASSERT("write csr which is read-only leads to illegal instruction interrupt",
    8000c8d8:	08200593          	li	a1,130
    8000c8dc:	00013617          	auipc	a2,0x13
    8000c8e0:	ec460613          	add	a2,a2,-316 # 8001f7a0 <__func__.1+0x2af8>
    8000c8e4:	00010517          	auipc	a0,0x10
    8000c8e8:	6c450513          	add	a0,a0,1732 # 8001cfa8 <__func__.1+0x300>
    8000c8ec:	2fb0e0ef          	jal	8001b3e6 <printf>
    8000c8f0:	00144783          	lbu	a5,1(s0)
    8000c8f4:	00010597          	auipc	a1,0x10
    8000c8f8:	68c58593          	add	a1,a1,1676 # 8001cf80 <__func__.1+0x2d8>
    8000c8fc:	c789                	beqz	a5,8000c906 <illegal_except_1+0x7c>
    8000c8fe:	6418                	ld	a4,8(s0)
    8000c900:	4789                	li	a5,2
    8000c902:	10f70e63          	beq	a4,a5,8000ca1e <illegal_except_1+0x194>
    8000c906:	00010517          	auipc	a0,0x10
    8000c90a:	6ba50513          	add	a0,a0,1722 # 8001cfc0 <__func__.1+0x318>
    8000c90e:	2d90e0ef          	jal	8001b3e6 <printf>
    8000c912:	00144783          	lbu	a5,1(s0)
    8000c916:	c789                	beqz	a5,8000c920 <illegal_except_1+0x96>
    8000c918:	6418                	ld	a4,8(s0)
    8000c91a:	4789                	li	a5,2
    8000c91c:	00f70c63          	beq	a4,a5,8000c934 <illegal_except_1+0xaa>
    8000c920:	00010517          	auipc	a0,0x10
    8000c924:	6a850513          	add	a0,a0,1704 # 8001cfc8 <__func__.1+0x320>
    8000c928:	2bf0e0ef          	jal	8001b3e6 <printf>
    8000c92c:	02900513          	li	a0,41
    8000c930:	1890d0ef          	jal	8001a2b8 <putchar>
    8000c934:	4529                	li	a0,10
    8000c936:	1830d0ef          	jal	8001a2b8 <putchar>
    8000c93a:	00144783          	lbu	a5,1(s0)
    8000c93e:	4481                	li	s1,0
    8000c940:	c789                	beqz	a5,8000c94a <illegal_except_1+0xc0>
    8000c942:	6404                	ld	s1,8(s0)
    8000c944:	14f9                	add	s1,s1,-2
    8000c946:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_ILI 
    ); 


    //当前权限不满足最低CSR访问权限
    goto_priv(PRIV_HS);
    8000c94a:	450d                	li	a0,3
    8000c94c:	992f40ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000c950:	0ff0000f          	fence
    8000c954:	4785                	li	a5,1
    8000c956:	00f41023          	sh	a5,0(s0)
    8000c95a:	00030797          	auipc	a5,0x30
    8000c95e:	6e07b723          	sd	zero,1774(a5) # 8003d048 <excpt+0x38>
    8000c962:	0ff0000f          	fence
    CSRR(CSR_MIE);
    8000c966:	304027f3          	csrr	a5,mie
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    8000c96a:	08200593          	li	a1,130
    8000c96e:	00013617          	auipc	a2,0x13
    8000c972:	e7a60613          	add	a2,a2,-390 # 8001f7e8 <__func__.1+0x2b40>
    8000c976:	00010517          	auipc	a0,0x10
    8000c97a:	63250513          	add	a0,a0,1586 # 8001cfa8 <__func__.1+0x300>
    8000c97e:	2690e0ef          	jal	8001b3e6 <printf>
    8000c982:	00144783          	lbu	a5,1(s0)
    8000c986:	00010597          	auipc	a1,0x10
    8000c98a:	5fa58593          	add	a1,a1,1530 # 8001cf80 <__func__.1+0x2d8>
    8000c98e:	c789                	beqz	a5,8000c998 <illegal_except_1+0x10e>
    8000c990:	6418                	ld	a4,8(s0)
    8000c992:	4789                	li	a5,2
    8000c994:	08f70063          	beq	a4,a5,8000ca14 <illegal_except_1+0x18a>
    8000c998:	00010517          	auipc	a0,0x10
    8000c99c:	62850513          	add	a0,a0,1576 # 8001cfc0 <__func__.1+0x318>
    8000c9a0:	2470e0ef          	jal	8001b3e6 <printf>
    8000c9a4:	00144783          	lbu	a5,1(s0)
    8000c9a8:	c789                	beqz	a5,8000c9b2 <illegal_except_1+0x128>
    8000c9aa:	6418                	ld	a4,8(s0)
    8000c9ac:	4789                	li	a5,2
    8000c9ae:	00f70c63          	beq	a4,a5,8000c9c6 <illegal_except_1+0x13c>
    8000c9b2:	00010517          	auipc	a0,0x10
    8000c9b6:	61650513          	add	a0,a0,1558 # 8001cfc8 <__func__.1+0x320>
    8000c9ba:	22d0e0ef          	jal	8001b3e6 <printf>
    8000c9be:	02900513          	li	a0,41
    8000c9c2:	0f70d0ef          	jal	8001a2b8 <putchar>
    8000c9c6:	4529                	li	a0,10
    8000c9c8:	0f10d0ef          	jal	8001a2b8 <putchar>
    8000c9cc:	cc95                	beqz	s1,8000ca08 <illegal_except_1+0x17e>
    8000c9ce:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000c9d2:	00010597          	auipc	a1,0x10
    8000c9d6:	5ae58593          	add	a1,a1,1454 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    8000c9da:	c491                	beqz	s1,8000c9e6 <illegal_except_1+0x15c>
    8000c9dc:	6418                	ld	a4,8(s0)
    8000c9de:	4789                	li	a5,2
    8000c9e0:	04f70463          	beq	a4,a5,8000ca28 <illegal_except_1+0x19e>
    8000c9e4:	4481                	li	s1,0
    TEST_END();
    8000c9e6:	00010517          	auipc	a0,0x10
    8000c9ea:	64250513          	add	a0,a0,1602 # 8001d028 <__func__.1+0x380>
    8000c9ee:	1f90e0ef          	jal	8001b3e6 <printf>
    8000c9f2:	4511                	li	a0,4
    8000c9f4:	8eaf40ef          	jal	80000ade <goto_priv>
    8000c9f8:	92ff40ef          	jal	80001326 <reset_state>

}
    8000c9fc:	60e2                	ld	ra,24(sp)
    8000c9fe:	6442                	ld	s0,16(sp)
    8000ca00:	8526                	mv	a0,s1
    8000ca02:	64a2                	ld	s1,8(sp)
    8000ca04:	6105                	add	sp,sp,32
    8000ca06:	8082                	ret
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    8000ca08:	4481                	li	s1,0
    TEST_END();
    8000ca0a:	00010597          	auipc	a1,0x10
    8000ca0e:	57658593          	add	a1,a1,1398 # 8001cf80 <__func__.1+0x2d8>
    8000ca12:	bfd1                	j	8000c9e6 <illegal_except_1+0x15c>
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    8000ca14:	00010597          	auipc	a1,0x10
    8000ca18:	55c58593          	add	a1,a1,1372 # 8001cf70 <__func__.1+0x2c8>
    8000ca1c:	bfb5                	j	8000c998 <illegal_except_1+0x10e>
    TEST_ASSERT("write csr which is read-only leads to illegal instruction interrupt",
    8000ca1e:	00010597          	auipc	a1,0x10
    8000ca22:	55258593          	add	a1,a1,1362 # 8001cf70 <__func__.1+0x2c8>
    8000ca26:	b5c5                	j	8000c906 <illegal_except_1+0x7c>
    TEST_END();
    8000ca28:	00010597          	auipc	a1,0x10
    8000ca2c:	54858593          	add	a1,a1,1352 # 8001cf70 <__func__.1+0x2c8>
    8000ca30:	bf5d                	j	8000c9e6 <illegal_except_1+0x15c>

000000008000ca32 <illegal_except_2>:

bool illegal_except_2() {
    8000ca32:	1101                	add	sp,sp,-32

    TEST_START();
    8000ca34:	0000f597          	auipc	a1,0xf
    8000ca38:	59c58593          	add	a1,a1,1436 # 8001bfd0 <__func__.12>
    8000ca3c:	00010517          	auipc	a0,0x10
    8000ca40:	55450513          	add	a0,a0,1364 # 8001cf90 <__func__.1+0x2e8>
bool illegal_except_2() {
    8000ca44:	ec06                	sd	ra,24(sp)
    8000ca46:	e822                	sd	s0,16(sp)
    8000ca48:	e426                	sd	s1,8(sp)
    TEST_START();
    8000ca4a:	19d0e0ef          	jal	8001b3e6 <printf>
    8000ca4e:	4529                	li	a0,10
    8000ca50:	0690d0ef          	jal	8001a2b8 <putchar>


    //特殊情况，没有开启虚存，在S模式下访问Satp寄存器，但被sstatus.TVM拦截
    goto_priv(PRIV_M);
    8000ca54:	4511                	li	a0,4
    8000ca56:	888f40ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    8000ca5a:	001007b7          	lui	a5,0x100
    8000ca5e:	3007a073          	csrs	mstatus,a5
    CSRW(satp, 0x0);    //关闭虚存
    8000ca62:	18005073          	csrw	satp,0
    goto_priv(PRIV_HS);
    8000ca66:	450d                	li	a0,3
    8000ca68:	876f40ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000ca6c:	0ff0000f          	fence
    8000ca70:	4785                	li	a5,1
    8000ca72:	00030417          	auipc	s0,0x30
    8000ca76:	59e40413          	add	s0,s0,1438 # 8003d010 <excpt>
    8000ca7a:	00f41023          	sh	a5,0(s0)
    8000ca7e:	00030797          	auipc	a5,0x30
    8000ca82:	5c07b523          	sd	zero,1482(a5) # 8003d048 <excpt+0x38>
    8000ca86:	0ff0000f          	fence
    CSRR(satp);
    8000ca8a:	180027f3          	csrr	a5,satp
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    8000ca8e:	08200593          	li	a1,130
    8000ca92:	00013617          	auipc	a2,0x13
    8000ca96:	dae60613          	add	a2,a2,-594 # 8001f840 <__func__.1+0x2b98>
    8000ca9a:	00010517          	auipc	a0,0x10
    8000ca9e:	50e50513          	add	a0,a0,1294 # 8001cfa8 <__func__.1+0x300>
    8000caa2:	1450e0ef          	jal	8001b3e6 <printf>
    8000caa6:	00144783          	lbu	a5,1(s0)
    8000caaa:	00010597          	auipc	a1,0x10
    8000caae:	4d658593          	add	a1,a1,1238 # 8001cf80 <__func__.1+0x2d8>
    8000cab2:	c789                	beqz	a5,8000cabc <illegal_except_2+0x8a>
    8000cab4:	6418                	ld	a4,8(s0)
    8000cab6:	4789                	li	a5,2
    8000cab8:	06f70e63          	beq	a4,a5,8000cb34 <illegal_except_2+0x102>
    8000cabc:	00010517          	auipc	a0,0x10
    8000cac0:	50450513          	add	a0,a0,1284 # 8001cfc0 <__func__.1+0x318>
    8000cac4:	1230e0ef          	jal	8001b3e6 <printf>
    8000cac8:	00144783          	lbu	a5,1(s0)
    8000cacc:	c789                	beqz	a5,8000cad6 <illegal_except_2+0xa4>
    8000cace:	6418                	ld	a4,8(s0)
    8000cad0:	4789                	li	a5,2
    8000cad2:	00f70c63          	beq	a4,a5,8000caea <illegal_except_2+0xb8>
    8000cad6:	00010517          	auipc	a0,0x10
    8000cada:	4f250513          	add	a0,a0,1266 # 8001cfc8 <__func__.1+0x320>
    8000cade:	1090e0ef          	jal	8001b3e6 <printf>
    8000cae2:	02900513          	li	a0,41
    8000cae6:	7d20d0ef          	jal	8001a2b8 <putchar>
    8000caea:	4529                	li	a0,10
    8000caec:	7cc0d0ef          	jal	8001a2b8 <putchar>
    8000caf0:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000caf4:	00010597          	auipc	a1,0x10
    8000caf8:	48c58593          	add	a1,a1,1164 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    8000cafc:	c491                	beqz	s1,8000cb08 <illegal_except_2+0xd6>
    8000cafe:	6418                	ld	a4,8(s0)
    8000cb00:	4789                	li	a5,2
    8000cb02:	02f70463          	beq	a4,a5,8000cb2a <illegal_except_2+0xf8>
    8000cb06:	4481                	li	s1,0
    TEST_END();
    8000cb08:	00010517          	auipc	a0,0x10
    8000cb0c:	52050513          	add	a0,a0,1312 # 8001d028 <__func__.1+0x380>
    8000cb10:	0d70e0ef          	jal	8001b3e6 <printf>
    8000cb14:	4511                	li	a0,4
    8000cb16:	fc9f30ef          	jal	80000ade <goto_priv>
    8000cb1a:	80df40ef          	jal	80001326 <reset_state>

}
    8000cb1e:	60e2                	ld	ra,24(sp)
    8000cb20:	6442                	ld	s0,16(sp)
    8000cb22:	8526                	mv	a0,s1
    8000cb24:	64a2                	ld	s1,8(sp)
    8000cb26:	6105                	add	sp,sp,32
    8000cb28:	8082                	ret
    TEST_END();
    8000cb2a:	00010597          	auipc	a1,0x10
    8000cb2e:	44658593          	add	a1,a1,1094 # 8001cf70 <__func__.1+0x2c8>
    8000cb32:	bfd9                	j	8000cb08 <illegal_except_2+0xd6>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    8000cb34:	00010597          	auipc	a1,0x10
    8000cb38:	43c58593          	add	a1,a1,1084 # 8001cf70 <__func__.1+0x2c8>
    8000cb3c:	b741                	j	8000cabc <illegal_except_2+0x8a>

000000008000cb3e <illegal_except_3>:

bool illegal_except_3() {
    8000cb3e:	1101                	add	sp,sp,-32

    TEST_START();
    8000cb40:	0000f597          	auipc	a1,0xf
    8000cb44:	4a858593          	add	a1,a1,1192 # 8001bfe8 <__func__.11>
    8000cb48:	00010517          	auipc	a0,0x10
    8000cb4c:	44850513          	add	a0,a0,1096 # 8001cf90 <__func__.1+0x2e8>
bool illegal_except_3() {
    8000cb50:	ec06                	sd	ra,24(sp)
    8000cb52:	e822                	sd	s0,16(sp)
    8000cb54:	e426                	sd	s1,8(sp)
    TEST_START();
    8000cb56:	0910e0ef          	jal	8001b3e6 <printf>
    8000cb5a:	4529                	li	a0,10
    8000cb5c:	75c0d0ef          	jal	8001a2b8 <putchar>

    TEST_SETUP_EXCEPT();
    8000cb60:	0ff0000f          	fence
    8000cb64:	4785                	li	a5,1
    8000cb66:	00030417          	auipc	s0,0x30
    8000cb6a:	4aa40413          	add	s0,s0,1194 # 8003d010 <excpt>
    8000cb6e:	00f41023          	sh	a5,0(s0)
    8000cb72:	00030797          	auipc	a5,0x30
    8000cb76:	4c07bb23          	sd	zero,1238(a5) # 8003d048 <excpt+0x38>
    8000cb7a:	0ff0000f          	fence

    //执行CSR写指令尝试将非支持值写入WLRL字段时
    printf("%llx\n",CSRR(CSR_MCAUSE));
    8000cb7e:	342025f3          	csrr	a1,mcause
    8000cb82:	00016517          	auipc	a0,0x16
    8000cb86:	e0e50513          	add	a0,a0,-498 # 80022990 <__func__.1+0x5ce8>
    8000cb8a:	05d0e0ef          	jal	8001b3e6 <printf>
    CSRW(CSR_MCAUSE,0xfffffffff);     //不支持的值写入将不会写入，没报错
    8000cb8e:	57fd                	li	a5,-1
    8000cb90:	83f1                	srl	a5,a5,0x1c
    8000cb92:	34279073          	csrw	mcause,a5
    printf("%llx\n",CSRR(CSR_MCAUSE));
    8000cb96:	342025f3          	csrr	a1,mcause
    8000cb9a:	00016517          	auipc	a0,0x16
    8000cb9e:	df650513          	add	a0,a0,-522 # 80022990 <__func__.1+0x5ce8>
    8000cba2:	0450e0ef          	jal	8001b3e6 <printf>
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    8000cba6:	08200593          	li	a1,130
    8000cbaa:	00013617          	auipc	a2,0x13
    8000cbae:	cf660613          	add	a2,a2,-778 # 8001f8a0 <__func__.1+0x2bf8>
    8000cbb2:	00010517          	auipc	a0,0x10
    8000cbb6:	3f650513          	add	a0,a0,1014 # 8001cfa8 <__func__.1+0x300>
    8000cbba:	02d0e0ef          	jal	8001b3e6 <printf>
    8000cbbe:	00144783          	lbu	a5,1(s0)
    8000cbc2:	00010597          	auipc	a1,0x10
    8000cbc6:	3be58593          	add	a1,a1,958 # 8001cf80 <__func__.1+0x2d8>
    8000cbca:	c789                	beqz	a5,8000cbd4 <illegal_except_3+0x96>
    8000cbcc:	6418                	ld	a4,8(s0)
    8000cbce:	4789                	li	a5,2
    8000cbd0:	06f70e63          	beq	a4,a5,8000cc4c <illegal_except_3+0x10e>
    8000cbd4:	00010517          	auipc	a0,0x10
    8000cbd8:	3ec50513          	add	a0,a0,1004 # 8001cfc0 <__func__.1+0x318>
    8000cbdc:	00b0e0ef          	jal	8001b3e6 <printf>
    8000cbe0:	00144783          	lbu	a5,1(s0)
    8000cbe4:	c789                	beqz	a5,8000cbee <illegal_except_3+0xb0>
    8000cbe6:	6418                	ld	a4,8(s0)
    8000cbe8:	4789                	li	a5,2
    8000cbea:	00f70c63          	beq	a4,a5,8000cc02 <illegal_except_3+0xc4>
    8000cbee:	00010517          	auipc	a0,0x10
    8000cbf2:	3da50513          	add	a0,a0,986 # 8001cfc8 <__func__.1+0x320>
    8000cbf6:	7f00e0ef          	jal	8001b3e6 <printf>
    8000cbfa:	02900513          	li	a0,41
    8000cbfe:	6ba0d0ef          	jal	8001a2b8 <putchar>
    8000cc02:	4529                	li	a0,10
    8000cc04:	6b40d0ef          	jal	8001a2b8 <putchar>
    8000cc08:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 


    TEST_END();
    8000cc0c:	00010597          	auipc	a1,0x10
    8000cc10:	37458593          	add	a1,a1,884 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    8000cc14:	c491                	beqz	s1,8000cc20 <illegal_except_3+0xe2>
    8000cc16:	6418                	ld	a4,8(s0)
    8000cc18:	4789                	li	a5,2
    8000cc1a:	02f70463          	beq	a4,a5,8000cc42 <illegal_except_3+0x104>
    8000cc1e:	4481                	li	s1,0
    TEST_END();
    8000cc20:	00010517          	auipc	a0,0x10
    8000cc24:	40850513          	add	a0,a0,1032 # 8001d028 <__func__.1+0x380>
    8000cc28:	7be0e0ef          	jal	8001b3e6 <printf>
    8000cc2c:	4511                	li	a0,4
    8000cc2e:	eb1f30ef          	jal	80000ade <goto_priv>
    8000cc32:	ef4f40ef          	jal	80001326 <reset_state>
}
    8000cc36:	60e2                	ld	ra,24(sp)
    8000cc38:	6442                	ld	s0,16(sp)
    8000cc3a:	8526                	mv	a0,s1
    8000cc3c:	64a2                	ld	s1,8(sp)
    8000cc3e:	6105                	add	sp,sp,32
    8000cc40:	8082                	ret
    TEST_END();
    8000cc42:	00010597          	auipc	a1,0x10
    8000cc46:	32e58593          	add	a1,a1,814 # 8001cf70 <__func__.1+0x2c8>
    8000cc4a:	bfd9                	j	8000cc20 <illegal_except_3+0xe2>
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    8000cc4c:	00010597          	auipc	a1,0x10
    8000cc50:	32458593          	add	a1,a1,804 # 8001cf70 <__func__.1+0x2c8>
    8000cc54:	b741                	j	8000cbd4 <illegal_except_3+0x96>

000000008000cc56 <illegal_except_4>:



bool illegal_except_4() {
    8000cc56:	1101                	add	sp,sp,-32

    TEST_START();
    8000cc58:	0000f597          	auipc	a1,0xf
    8000cc5c:	3a858593          	add	a1,a1,936 # 8001c000 <__func__.10>
    8000cc60:	00010517          	auipc	a0,0x10
    8000cc64:	33050513          	add	a0,a0,816 # 8001cf90 <__func__.1+0x2e8>
bool illegal_except_4() {
    8000cc68:	ec06                	sd	ra,24(sp)
    8000cc6a:	e822                	sd	s0,16(sp)
    8000cc6c:	e426                	sd	s1,8(sp)
    8000cc6e:	e04a                	sd	s2,0(sp)
    TEST_START();
    8000cc70:	7760e0ef          	jal	8001b3e6 <printf>
    8000cc74:	4529                	li	a0,10
    8000cc76:	6420d0ef          	jal	8001a2b8 <putchar>

    //M模式下可以访问任何CSR
    goto_priv(PRIV_M);
    8000cc7a:	4511                	li	a0,4
    8000cc7c:	e63f30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000cc80:	0ff0000f          	fence
    8000cc84:	4785                	li	a5,1
    8000cc86:	00030417          	auipc	s0,0x30
    8000cc8a:	38a40413          	add	s0,s0,906 # 8003d010 <excpt>
    8000cc8e:	00f41023          	sh	a5,0(s0)
    8000cc92:	00030797          	auipc	a5,0x30
    8000cc96:	3a07bb23          	sd	zero,950(a5) # 8003d048 <excpt+0x38>
    8000cc9a:	0ff0000f          	fence
    CSRR(CSR_MCAUSE);
    8000cc9e:	342027f3          	csrr	a5,mcause
    CSRR(CSR_SCAUSE);
    8000cca2:	142027f3          	csrr	a5,scause
    CSRR(CSR_VSCAUSE);
    8000cca6:	242027f3          	csrr	a5,vscause
    TEST_ASSERT("m mode access any csr successful",
    8000ccaa:	08200593          	li	a1,130
    8000ccae:	00013617          	auipc	a2,0x13
    8000ccb2:	c3260613          	add	a2,a2,-974 # 8001f8e0 <__func__.1+0x2c38>
    8000ccb6:	00010517          	auipc	a0,0x10
    8000ccba:	2f250513          	add	a0,a0,754 # 8001cfa8 <__func__.1+0x300>
    8000ccbe:	7280e0ef          	jal	8001b3e6 <printf>
    8000ccc2:	00144783          	lbu	a5,1(s0)
    8000ccc6:	00010597          	auipc	a1,0x10
    8000ccca:	2aa58593          	add	a1,a1,682 # 8001cf70 <__func__.1+0x2c8>
    8000ccce:	c789                	beqz	a5,8000ccd8 <illegal_except_4+0x82>
    8000ccd0:	00010597          	auipc	a1,0x10
    8000ccd4:	2b058593          	add	a1,a1,688 # 8001cf80 <__func__.1+0x2d8>
    8000ccd8:	00010517          	auipc	a0,0x10
    8000ccdc:	2e850513          	add	a0,a0,744 # 8001cfc0 <__func__.1+0x318>
    8000cce0:	7060e0ef          	jal	8001b3e6 <printf>
    8000cce4:	00144783          	lbu	a5,1(s0)
    8000cce8:	16079b63          	bnez	a5,8000ce5e <illegal_except_4+0x208>
    8000ccec:	4529                	li	a0,10
    8000ccee:	5ca0d0ef          	jal	8001a2b8 <putchar>
    8000ccf2:	00144903          	lbu	s2,1(s0)
        excpt.triggered == false
    ); 

    reset_state();
    8000ccf6:	e30f40ef          	jal	80001326 <reset_state>

    //尝试访问高特权级别的任何CSR
    goto_priv(PRIV_HS);
    8000ccfa:	450d                	li	a0,3
    8000ccfc:	de3f30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000cd00:	0ff0000f          	fence
    8000cd04:	4785                	li	a5,1
    8000cd06:	00f41023          	sh	a5,0(s0)
    8000cd0a:	00030797          	auipc	a5,0x30
    8000cd0e:	3207bf23          	sd	zero,830(a5) # 8003d048 <excpt+0x38>
    8000cd12:	0ff0000f          	fence
    CSRR(CSR_MCAUSE);
    8000cd16:	342027f3          	csrr	a5,mcause
    TEST_ASSERT("hs mode access higher privilege csr leads to ili",
    8000cd1a:	08200593          	li	a1,130
    8000cd1e:	00013617          	auipc	a2,0x13
    8000cd22:	bea60613          	add	a2,a2,-1046 # 8001f908 <__func__.1+0x2c60>
    8000cd26:	00010517          	auipc	a0,0x10
    8000cd2a:	28250513          	add	a0,a0,642 # 8001cfa8 <__func__.1+0x300>
    8000cd2e:	6b80e0ef          	jal	8001b3e6 <printf>
    8000cd32:	00144783          	lbu	a5,1(s0)
    8000cd36:	00010597          	auipc	a1,0x10
    8000cd3a:	24a58593          	add	a1,a1,586 # 8001cf80 <__func__.1+0x2d8>
    8000cd3e:	c789                	beqz	a5,8000cd48 <illegal_except_4+0xf2>
    8000cd40:	6418                	ld	a4,8(s0)
    8000cd42:	4789                	li	a5,2
    8000cd44:	12f70d63          	beq	a4,a5,8000ce7e <illegal_except_4+0x228>
    8000cd48:	00010517          	auipc	a0,0x10
    8000cd4c:	27850513          	add	a0,a0,632 # 8001cfc0 <__func__.1+0x318>
    8000cd50:	6960e0ef          	jal	8001b3e6 <printf>
    8000cd54:	00144783          	lbu	a5,1(s0)
    8000cd58:	c789                	beqz	a5,8000cd62 <illegal_except_4+0x10c>
    8000cd5a:	6418                	ld	a4,8(s0)
    8000cd5c:	4789                	li	a5,2
    8000cd5e:	00f70c63          	beq	a4,a5,8000cd76 <illegal_except_4+0x120>
    8000cd62:	00010517          	auipc	a0,0x10
    8000cd66:	26650513          	add	a0,a0,614 # 8001cfc8 <__func__.1+0x320>
    8000cd6a:	67c0e0ef          	jal	8001b3e6 <printf>
    8000cd6e:	02900513          	li	a0,41
    8000cd72:	5460d0ef          	jal	8001a2b8 <putchar>
    8000cd76:	4529                	li	a0,10
    8000cd78:	5400d0ef          	jal	8001a2b8 <putchar>
    8000cd7c:	4481                	li	s1,0
    8000cd7e:	00091563          	bnez	s2,8000cd88 <illegal_except_4+0x132>
    8000cd82:	00144783          	lbu	a5,1(s0)
    8000cd86:	e7f9                	bnez	a5,8000ce54 <illegal_except_4+0x1fe>
        excpt.triggered == true &&
        excpt.cause==CAUSE_ILI
    ); 

    goto_priv(PRIV_VS);
    8000cd88:	4509                	li	a0,2
    8000cd8a:	d55f30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000cd8e:	0ff0000f          	fence
    8000cd92:	4785                	li	a5,1
    8000cd94:	00f41023          	sh	a5,0(s0)
    8000cd98:	00030797          	auipc	a5,0x30
    8000cd9c:	2a07b823          	sd	zero,688(a5) # 8003d048 <excpt+0x38>
    8000cda0:	0ff0000f          	fence
    CSRR(CSR_MIDELEG);
    8000cda4:	303027f3          	csrr	a5,mideleg
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    8000cda8:	08200593          	li	a1,130
    8000cdac:	00013617          	auipc	a2,0x13
    8000cdb0:	b9460613          	add	a2,a2,-1132 # 8001f940 <__func__.1+0x2c98>
    8000cdb4:	00010517          	auipc	a0,0x10
    8000cdb8:	1f450513          	add	a0,a0,500 # 8001cfa8 <__func__.1+0x300>
    8000cdbc:	62a0e0ef          	jal	8001b3e6 <printf>
    8000cdc0:	00144783          	lbu	a5,1(s0)
    8000cdc4:	00010597          	auipc	a1,0x10
    8000cdc8:	1bc58593          	add	a1,a1,444 # 8001cf80 <__func__.1+0x2d8>
    8000cdcc:	c789                	beqz	a5,8000cdd6 <illegal_except_4+0x180>
    8000cdce:	6418                	ld	a4,8(s0)
    8000cdd0:	4789                	li	a5,2
    8000cdd2:	0af70163          	beq	a4,a5,8000ce74 <illegal_except_4+0x21e>
    8000cdd6:	00010517          	auipc	a0,0x10
    8000cdda:	1ea50513          	add	a0,a0,490 # 8001cfc0 <__func__.1+0x318>
    8000cdde:	6080e0ef          	jal	8001b3e6 <printf>
    8000cde2:	00144783          	lbu	a5,1(s0)
    8000cde6:	c789                	beqz	a5,8000cdf0 <illegal_except_4+0x19a>
    8000cde8:	6418                	ld	a4,8(s0)
    8000cdea:	4789                	li	a5,2
    8000cdec:	00f70c63          	beq	a4,a5,8000ce04 <illegal_except_4+0x1ae>
    8000cdf0:	00010517          	auipc	a0,0x10
    8000cdf4:	1d850513          	add	a0,a0,472 # 8001cfc8 <__func__.1+0x320>
    8000cdf8:	5ee0e0ef          	jal	8001b3e6 <printf>
    8000cdfc:	02900513          	li	a0,41
    8000ce00:	4b80d0ef          	jal	8001a2b8 <putchar>
    8000ce04:	4529                	li	a0,10
    8000ce06:	4b20d0ef          	jal	8001a2b8 <putchar>
    8000ce0a:	cc9d                	beqz	s1,8000ce48 <illegal_except_4+0x1f2>
    8000ce0c:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause==CAUSE_ILI
    );

    TEST_END();
    8000ce10:	00010597          	auipc	a1,0x10
    8000ce14:	17058593          	add	a1,a1,368 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    8000ce18:	c491                	beqz	s1,8000ce24 <illegal_except_4+0x1ce>
    8000ce1a:	6418                	ld	a4,8(s0)
    8000ce1c:	4789                	li	a5,2
    8000ce1e:	06f70563          	beq	a4,a5,8000ce88 <illegal_except_4+0x232>
    8000ce22:	4481                	li	s1,0
    TEST_END();
    8000ce24:	00010517          	auipc	a0,0x10
    8000ce28:	20450513          	add	a0,a0,516 # 8001d028 <__func__.1+0x380>
    8000ce2c:	5ba0e0ef          	jal	8001b3e6 <printf>
    8000ce30:	4511                	li	a0,4
    8000ce32:	cadf30ef          	jal	80000ade <goto_priv>
    8000ce36:	cf0f40ef          	jal	80001326 <reset_state>
}
    8000ce3a:	60e2                	ld	ra,24(sp)
    8000ce3c:	6442                	ld	s0,16(sp)
    8000ce3e:	6902                	ld	s2,0(sp)
    8000ce40:	8526                	mv	a0,s1
    8000ce42:	64a2                	ld	s1,8(sp)
    8000ce44:	6105                	add	sp,sp,32
    8000ce46:	8082                	ret
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    8000ce48:	4481                	li	s1,0
    TEST_END();
    8000ce4a:	00010597          	auipc	a1,0x10
    8000ce4e:	13658593          	add	a1,a1,310 # 8001cf80 <__func__.1+0x2d8>
    8000ce52:	bfc9                	j	8000ce24 <illegal_except_4+0x1ce>
    TEST_ASSERT("hs mode access higher privilege csr leads to ili",
    8000ce54:	6404                	ld	s1,8(s0)
    8000ce56:	14f9                	add	s1,s1,-2
    8000ce58:	0014b493          	seqz	s1,s1
    8000ce5c:	b735                	j	8000cd88 <illegal_except_4+0x132>
    TEST_ASSERT("m mode access any csr successful",
    8000ce5e:	00010517          	auipc	a0,0x10
    8000ce62:	16a50513          	add	a0,a0,362 # 8001cfc8 <__func__.1+0x320>
    8000ce66:	5800e0ef          	jal	8001b3e6 <printf>
    8000ce6a:	02900513          	li	a0,41
    8000ce6e:	44a0d0ef          	jal	8001a2b8 <putchar>
    8000ce72:	bdad                	j	8000ccec <illegal_except_4+0x96>
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    8000ce74:	00010597          	auipc	a1,0x10
    8000ce78:	0fc58593          	add	a1,a1,252 # 8001cf70 <__func__.1+0x2c8>
    8000ce7c:	bfa9                	j	8000cdd6 <illegal_except_4+0x180>
    TEST_ASSERT("hs mode access higher privilege csr leads to ili",
    8000ce7e:	00010597          	auipc	a1,0x10
    8000ce82:	0f258593          	add	a1,a1,242 # 8001cf70 <__func__.1+0x2c8>
    8000ce86:	b5c9                	j	8000cd48 <illegal_except_4+0xf2>
    TEST_END();
    8000ce88:	00010597          	auipc	a1,0x10
    8000ce8c:	0e858593          	add	a1,a1,232 # 8001cf70 <__func__.1+0x2c8>
    8000ce90:	bf51                	j	8000ce24 <illegal_except_4+0x1ce>

000000008000ce92 <illegal_except_5>:
        excpt.cause==CAUSE_ILI
    );
*/


bool illegal_except_5() {
    8000ce92:	1101                	add	sp,sp,-32

    TEST_START();
    8000ce94:	0000f597          	auipc	a1,0xf
    8000ce98:	18458593          	add	a1,a1,388 # 8001c018 <__func__.9>
    8000ce9c:	00010517          	auipc	a0,0x10
    8000cea0:	0f450513          	add	a0,a0,244 # 8001cf90 <__func__.1+0x2e8>
bool illegal_except_5() {
    8000cea4:	ec06                	sd	ra,24(sp)
    8000cea6:	e822                	sd	s0,16(sp)
    8000cea8:	e426                	sd	s1,8(sp)
    TEST_START();
    8000ceaa:	53c0e0ef          	jal	8001b3e6 <printf>
    8000ceae:	4529                	li	a0,10
    8000ceb0:	4080d0ef          	jal	8001a2b8 <putchar>
    //TVM=1，在S模式下，读写satp 寄存器
    goto_priv(PRIV_M);
    8000ceb4:	4511                	li	a0,4
    8000ceb6:	c29f30ef          	jal	80000ade <goto_priv>
    CSRW(satp, 0x0);
    8000ceba:	18005073          	csrw	satp,0
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    8000cebe:	001007b7          	lui	a5,0x100
    8000cec2:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    8000cec6:	450d                	li	a0,3
    8000cec8:	c17f30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000cecc:	0ff0000f          	fence
    8000ced0:	4785                	li	a5,1
    8000ced2:	00030417          	auipc	s0,0x30
    8000ced6:	13e40413          	add	s0,s0,318 # 8003d010 <excpt>
    8000ceda:	00f41023          	sh	a5,0(s0)
    8000cede:	00030797          	auipc	a5,0x30
    8000cee2:	1607b523          	sd	zero,362(a5) # 8003d048 <excpt+0x38>
    8000cee6:	0ff0000f          	fence
    CSRR(satp);
    8000ceea:	180027f3          	csrr	a5,satp
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    8000ceee:	08200593          	li	a1,130
    8000cef2:	00013617          	auipc	a2,0x13
    8000cef6:	94e60613          	add	a2,a2,-1714 # 8001f840 <__func__.1+0x2b98>
    8000cefa:	00010517          	auipc	a0,0x10
    8000cefe:	0ae50513          	add	a0,a0,174 # 8001cfa8 <__func__.1+0x300>
    8000cf02:	4e40e0ef          	jal	8001b3e6 <printf>
    8000cf06:	00144783          	lbu	a5,1(s0)
    8000cf0a:	00010597          	auipc	a1,0x10
    8000cf0e:	07658593          	add	a1,a1,118 # 8001cf80 <__func__.1+0x2d8>
    8000cf12:	c789                	beqz	a5,8000cf1c <illegal_except_5+0x8a>
    8000cf14:	6418                	ld	a4,8(s0)
    8000cf16:	4789                	li	a5,2
    8000cf18:	06f70e63          	beq	a4,a5,8000cf94 <illegal_except_5+0x102>
    8000cf1c:	00010517          	auipc	a0,0x10
    8000cf20:	0a450513          	add	a0,a0,164 # 8001cfc0 <__func__.1+0x318>
    8000cf24:	4c20e0ef          	jal	8001b3e6 <printf>
    8000cf28:	00144783          	lbu	a5,1(s0)
    8000cf2c:	c789                	beqz	a5,8000cf36 <illegal_except_5+0xa4>
    8000cf2e:	6418                	ld	a4,8(s0)
    8000cf30:	4789                	li	a5,2
    8000cf32:	00f70c63          	beq	a4,a5,8000cf4a <illegal_except_5+0xb8>
    8000cf36:	00010517          	auipc	a0,0x10
    8000cf3a:	09250513          	add	a0,a0,146 # 8001cfc8 <__func__.1+0x320>
    8000cf3e:	4a80e0ef          	jal	8001b3e6 <printf>
    8000cf42:	02900513          	li	a0,41
    8000cf46:	3720d0ef          	jal	8001a2b8 <putchar>
    8000cf4a:	4529                	li	a0,10
    8000cf4c:	36c0d0ef          	jal	8001a2b8 <putchar>
    8000cf50:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000cf54:	00010597          	auipc	a1,0x10
    8000cf58:	02c58593          	add	a1,a1,44 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    8000cf5c:	c491                	beqz	s1,8000cf68 <illegal_except_5+0xd6>
    8000cf5e:	6418                	ld	a4,8(s0)
    8000cf60:	4789                	li	a5,2
    8000cf62:	02f70463          	beq	a4,a5,8000cf8a <illegal_except_5+0xf8>
    8000cf66:	4481                	li	s1,0
    TEST_END();
    8000cf68:	00010517          	auipc	a0,0x10
    8000cf6c:	0c050513          	add	a0,a0,192 # 8001d028 <__func__.1+0x380>
    8000cf70:	4760e0ef          	jal	8001b3e6 <printf>
    8000cf74:	4511                	li	a0,4
    8000cf76:	b69f30ef          	jal	80000ade <goto_priv>
    8000cf7a:	bacf40ef          	jal	80001326 <reset_state>
}
    8000cf7e:	60e2                	ld	ra,24(sp)
    8000cf80:	6442                	ld	s0,16(sp)
    8000cf82:	8526                	mv	a0,s1
    8000cf84:	64a2                	ld	s1,8(sp)
    8000cf86:	6105                	add	sp,sp,32
    8000cf88:	8082                	ret
    TEST_END();
    8000cf8a:	00010597          	auipc	a1,0x10
    8000cf8e:	fe658593          	add	a1,a1,-26 # 8001cf70 <__func__.1+0x2c8>
    8000cf92:	bfd9                	j	8000cf68 <illegal_except_5+0xd6>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    8000cf94:	00010597          	auipc	a1,0x10
    8000cf98:	fdc58593          	add	a1,a1,-36 # 8001cf70 <__func__.1+0x2c8>
    8000cf9c:	b741                	j	8000cf1c <illegal_except_5+0x8a>

000000008000cf9e <illegal_except_6>:

bool illegal_except_6() {
    8000cf9e:	1101                	add	sp,sp,-32

    TEST_START();
    8000cfa0:	0000f597          	auipc	a1,0xf
    8000cfa4:	09058593          	add	a1,a1,144 # 8001c030 <__func__.8>
    8000cfa8:	00010517          	auipc	a0,0x10
    8000cfac:	fe850513          	add	a0,a0,-24 # 8001cf90 <__func__.1+0x2e8>
bool illegal_except_6() {
    8000cfb0:	ec06                	sd	ra,24(sp)
    8000cfb2:	e822                	sd	s0,16(sp)
    8000cfb4:	e426                	sd	s1,8(sp)
    TEST_START();
    8000cfb6:	4300e0ef          	jal	8001b3e6 <printf>
    8000cfba:	4529                	li	a0,10
    8000cfbc:	2fc0d0ef          	jal	8001a2b8 <putchar>
    //当mstatus.TVM=1时，在HS模式下执行时尝试读取或写入hgatp
    goto_priv(PRIV_M);
    8000cfc0:	4511                	li	a0,4
    8000cfc2:	b1df30ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    8000cfc6:	001007b7          	lui	a5,0x100
    8000cfca:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    8000cfce:	450d                	li	a0,3
    8000cfd0:	b0ff30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000cfd4:	0ff0000f          	fence
    8000cfd8:	4785                	li	a5,1
    8000cfda:	00030417          	auipc	s0,0x30
    8000cfde:	03640413          	add	s0,s0,54 # 8003d010 <excpt>
    8000cfe2:	00f41023          	sh	a5,0(s0)
    8000cfe6:	00030797          	auipc	a5,0x30
    8000cfea:	0607b123          	sd	zero,98(a5) # 8003d048 <excpt+0x38>
    8000cfee:	0ff0000f          	fence
    CSRW(CSR_HGATP,(uint64_t)-1);         //没报错
    8000cff2:	57fd                	li	a5,-1
    8000cff4:	68079073          	csrw	hgatp,a5
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    8000cff8:	08200593          	li	a1,130
    8000cffc:	00013617          	auipc	a2,0x13
    8000d000:	97c60613          	add	a2,a2,-1668 # 8001f978 <__func__.1+0x2cd0>
    8000d004:	00010517          	auipc	a0,0x10
    8000d008:	fa450513          	add	a0,a0,-92 # 8001cfa8 <__func__.1+0x300>
    8000d00c:	3da0e0ef          	jal	8001b3e6 <printf>
    8000d010:	00144783          	lbu	a5,1(s0)
    8000d014:	00010597          	auipc	a1,0x10
    8000d018:	f6c58593          	add	a1,a1,-148 # 8001cf80 <__func__.1+0x2d8>
    8000d01c:	c789                	beqz	a5,8000d026 <illegal_except_6+0x88>
    8000d01e:	6418                	ld	a4,8(s0)
    8000d020:	4789                	li	a5,2
    8000d022:	06f70e63          	beq	a4,a5,8000d09e <illegal_except_6+0x100>
    8000d026:	00010517          	auipc	a0,0x10
    8000d02a:	f9a50513          	add	a0,a0,-102 # 8001cfc0 <__func__.1+0x318>
    8000d02e:	3b80e0ef          	jal	8001b3e6 <printf>
    8000d032:	00144783          	lbu	a5,1(s0)
    8000d036:	c789                	beqz	a5,8000d040 <illegal_except_6+0xa2>
    8000d038:	6418                	ld	a4,8(s0)
    8000d03a:	4789                	li	a5,2
    8000d03c:	00f70c63          	beq	a4,a5,8000d054 <illegal_except_6+0xb6>
    8000d040:	00010517          	auipc	a0,0x10
    8000d044:	f8850513          	add	a0,a0,-120 # 8001cfc8 <__func__.1+0x320>
    8000d048:	39e0e0ef          	jal	8001b3e6 <printf>
    8000d04c:	02900513          	li	a0,41
    8000d050:	2680d0ef          	jal	8001a2b8 <putchar>
    8000d054:	4529                	li	a0,10
    8000d056:	2620d0ef          	jal	8001a2b8 <putchar>
    8000d05a:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000d05e:	00010597          	auipc	a1,0x10
    8000d062:	f2258593          	add	a1,a1,-222 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    8000d066:	c491                	beqz	s1,8000d072 <illegal_except_6+0xd4>
    8000d068:	6418                	ld	a4,8(s0)
    8000d06a:	4789                	li	a5,2
    8000d06c:	02f70463          	beq	a4,a5,8000d094 <illegal_except_6+0xf6>
    8000d070:	4481                	li	s1,0
    TEST_END();
    8000d072:	00010517          	auipc	a0,0x10
    8000d076:	fb650513          	add	a0,a0,-74 # 8001d028 <__func__.1+0x380>
    8000d07a:	36c0e0ef          	jal	8001b3e6 <printf>
    8000d07e:	4511                	li	a0,4
    8000d080:	a5ff30ef          	jal	80000ade <goto_priv>
    8000d084:	aa2f40ef          	jal	80001326 <reset_state>
}
    8000d088:	60e2                	ld	ra,24(sp)
    8000d08a:	6442                	ld	s0,16(sp)
    8000d08c:	8526                	mv	a0,s1
    8000d08e:	64a2                	ld	s1,8(sp)
    8000d090:	6105                	add	sp,sp,32
    8000d092:	8082                	ret
    TEST_END();
    8000d094:	00010597          	auipc	a1,0x10
    8000d098:	edc58593          	add	a1,a1,-292 # 8001cf70 <__func__.1+0x2c8>
    8000d09c:	bfd9                	j	8000d072 <illegal_except_6+0xd4>
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    8000d09e:	00010597          	auipc	a1,0x10
    8000d0a2:	ed258593          	add	a1,a1,-302 # 8001cf70 <__func__.1+0x2c8>
    8000d0a6:	b741                	j	8000d026 <illegal_except_6+0x88>

000000008000d0a8 <illegal_except_7>:

bool illegal_except_7() {
    8000d0a8:	1101                	add	sp,sp,-32

    TEST_START();
    8000d0aa:	0000f597          	auipc	a1,0xf
    8000d0ae:	f9e58593          	add	a1,a1,-98 # 8001c048 <__func__.7>
    8000d0b2:	00010517          	auipc	a0,0x10
    8000d0b6:	ede50513          	add	a0,a0,-290 # 8001cf90 <__func__.1+0x2e8>
bool illegal_except_7() {
    8000d0ba:	ec06                	sd	ra,24(sp)
    8000d0bc:	e822                	sd	s0,16(sp)
    8000d0be:	e426                	sd	s1,8(sp)
    TEST_START();
    8000d0c0:	3260e0ef          	jal	8001b3e6 <printf>
    8000d0c4:	4529                	li	a0,10
    8000d0c6:	1f20d0ef          	jal	8001a2b8 <putchar>

    //TVM=1，在S模式下，执行SFENCE.VMA或SINVAL.VMA指令
    goto_priv(PRIV_M);
    8000d0ca:	4511                	li	a0,4
    8000d0cc:	a13f30ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    8000d0d0:	001007b7          	lui	a5,0x100
    8000d0d4:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_HSTATUS,HSTATUS_VTVM);
    8000d0d8:	6007a073          	csrs	hstatus,a5

    goto_priv(PRIV_HS); 
    8000d0dc:	450d                	li	a0,3
    8000d0de:	a01f30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000d0e2:	0ff0000f          	fence
    8000d0e6:	4785                	li	a5,1
    8000d0e8:	00030417          	auipc	s0,0x30
    8000d0ec:	f2840413          	add	s0,s0,-216 # 8003d010 <excpt>
    8000d0f0:	00f41023          	sh	a5,0(s0)
    8000d0f4:	00030797          	auipc	a5,0x30
    8000d0f8:	f407ba23          	sd	zero,-172(a5) # 8003d048 <excpt+0x38>
    8000d0fc:	0ff0000f          	fence
    asm volatile(
    8000d100:	12000073          	sfence.vma
    sfence_vma();
    TEST_ASSERT("s mode sfence.vma leads to ili when tvm=1",
    8000d104:	08200593          	li	a1,130
    8000d108:	00013617          	auipc	a2,0x13
    8000d10c:	8d860613          	add	a2,a2,-1832 # 8001f9e0 <__func__.1+0x2d38>
    8000d110:	00010517          	auipc	a0,0x10
    8000d114:	e9850513          	add	a0,a0,-360 # 8001cfa8 <__func__.1+0x300>
    8000d118:	2ce0e0ef          	jal	8001b3e6 <printf>
    8000d11c:	00144783          	lbu	a5,1(s0)
    8000d120:	00010597          	auipc	a1,0x10
    8000d124:	e6058593          	add	a1,a1,-416 # 8001cf80 <__func__.1+0x2d8>
    8000d128:	c789                	beqz	a5,8000d132 <illegal_except_7+0x8a>
    8000d12a:	6418                	ld	a4,8(s0)
    8000d12c:	4789                	li	a5,2
    8000d12e:	10f70e63          	beq	a4,a5,8000d24a <illegal_except_7+0x1a2>
    8000d132:	00010517          	auipc	a0,0x10
    8000d136:	e8e50513          	add	a0,a0,-370 # 8001cfc0 <__func__.1+0x318>
    8000d13a:	2ac0e0ef          	jal	8001b3e6 <printf>
    8000d13e:	00144783          	lbu	a5,1(s0)
    8000d142:	c789                	beqz	a5,8000d14c <illegal_except_7+0xa4>
    8000d144:	6418                	ld	a4,8(s0)
    8000d146:	4789                	li	a5,2
    8000d148:	00f70c63          	beq	a4,a5,8000d160 <illegal_except_7+0xb8>
    8000d14c:	00010517          	auipc	a0,0x10
    8000d150:	e7c50513          	add	a0,a0,-388 # 8001cfc8 <__func__.1+0x320>
    8000d154:	2920e0ef          	jal	8001b3e6 <printf>
    8000d158:	02900513          	li	a0,41
    8000d15c:	15c0d0ef          	jal	8001a2b8 <putchar>
    8000d160:	4529                	li	a0,10
    8000d162:	1560d0ef          	jal	8001a2b8 <putchar>
    8000d166:	00144783          	lbu	a5,1(s0)
    8000d16a:	4481                	li	s1,0
    8000d16c:	c789                	beqz	a5,8000d176 <illegal_except_7+0xce>
    8000d16e:	6404                	ld	s1,8(s0)
    8000d170:	14f9                	add	s1,s1,-2
    8000d172:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    8000d176:	450d                	li	a0,3
    8000d178:	967f30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000d17c:	0ff0000f          	fence
    8000d180:	4785                	li	a5,1
    8000d182:	00f41023          	sh	a5,0(s0)
    8000d186:	00030797          	auipc	a5,0x30
    8000d18a:	ec07b123          	sd	zero,-318(a5) # 8003d048 <excpt+0x38>
    8000d18e:	0ff0000f          	fence
    asm volatile(
    8000d192:	16000073          	.4byte	0x16000073
    Sinval_vma();
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    8000d196:	08200593          	li	a1,130
    8000d19a:	00013617          	auipc	a2,0x13
    8000d19e:	87660613          	add	a2,a2,-1930 # 8001fa10 <__func__.1+0x2d68>
    8000d1a2:	00010517          	auipc	a0,0x10
    8000d1a6:	e0650513          	add	a0,a0,-506 # 8001cfa8 <__func__.1+0x300>
    8000d1aa:	23c0e0ef          	jal	8001b3e6 <printf>
    8000d1ae:	00144783          	lbu	a5,1(s0)
    8000d1b2:	00010597          	auipc	a1,0x10
    8000d1b6:	dce58593          	add	a1,a1,-562 # 8001cf80 <__func__.1+0x2d8>
    8000d1ba:	c789                	beqz	a5,8000d1c4 <illegal_except_7+0x11c>
    8000d1bc:	6418                	ld	a4,8(s0)
    8000d1be:	4789                	li	a5,2
    8000d1c0:	08f70063          	beq	a4,a5,8000d240 <illegal_except_7+0x198>
    8000d1c4:	00010517          	auipc	a0,0x10
    8000d1c8:	dfc50513          	add	a0,a0,-516 # 8001cfc0 <__func__.1+0x318>
    8000d1cc:	21a0e0ef          	jal	8001b3e6 <printf>
    8000d1d0:	00144783          	lbu	a5,1(s0)
    8000d1d4:	c789                	beqz	a5,8000d1de <illegal_except_7+0x136>
    8000d1d6:	6418                	ld	a4,8(s0)
    8000d1d8:	4789                	li	a5,2
    8000d1da:	00f70c63          	beq	a4,a5,8000d1f2 <illegal_except_7+0x14a>
    8000d1de:	00010517          	auipc	a0,0x10
    8000d1e2:	dea50513          	add	a0,a0,-534 # 8001cfc8 <__func__.1+0x320>
    8000d1e6:	2000e0ef          	jal	8001b3e6 <printf>
    8000d1ea:	02900513          	li	a0,41
    8000d1ee:	0ca0d0ef          	jal	8001a2b8 <putchar>
    8000d1f2:	4529                	li	a0,10
    8000d1f4:	0c40d0ef          	jal	8001a2b8 <putchar>
    8000d1f8:	cc95                	beqz	s1,8000d234 <illegal_except_7+0x18c>
    8000d1fa:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000d1fe:	00010597          	auipc	a1,0x10
    8000d202:	d8258593          	add	a1,a1,-638 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    8000d206:	c491                	beqz	s1,8000d212 <illegal_except_7+0x16a>
    8000d208:	6418                	ld	a4,8(s0)
    8000d20a:	4789                	li	a5,2
    8000d20c:	04f70463          	beq	a4,a5,8000d254 <illegal_except_7+0x1ac>
    8000d210:	4481                	li	s1,0
    TEST_END();
    8000d212:	00010517          	auipc	a0,0x10
    8000d216:	e1650513          	add	a0,a0,-490 # 8001d028 <__func__.1+0x380>
    8000d21a:	1cc0e0ef          	jal	8001b3e6 <printf>
    8000d21e:	4511                	li	a0,4
    8000d220:	8bff30ef          	jal	80000ade <goto_priv>
    8000d224:	902f40ef          	jal	80001326 <reset_state>
}
    8000d228:	60e2                	ld	ra,24(sp)
    8000d22a:	6442                	ld	s0,16(sp)
    8000d22c:	8526                	mv	a0,s1
    8000d22e:	64a2                	ld	s1,8(sp)
    8000d230:	6105                	add	sp,sp,32
    8000d232:	8082                	ret
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    8000d234:	4481                	li	s1,0
    TEST_END();
    8000d236:	00010597          	auipc	a1,0x10
    8000d23a:	d4a58593          	add	a1,a1,-694 # 8001cf80 <__func__.1+0x2d8>
    8000d23e:	bfd1                	j	8000d212 <illegal_except_7+0x16a>
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    8000d240:	00010597          	auipc	a1,0x10
    8000d244:	d3058593          	add	a1,a1,-720 # 8001cf70 <__func__.1+0x2c8>
    8000d248:	bfb5                	j	8000d1c4 <illegal_except_7+0x11c>
    TEST_ASSERT("s mode sfence.vma leads to ili when tvm=1",
    8000d24a:	00010597          	auipc	a1,0x10
    8000d24e:	d2658593          	add	a1,a1,-730 # 8001cf70 <__func__.1+0x2c8>
    8000d252:	b5c5                	j	8000d132 <illegal_except_7+0x8a>
    TEST_END();
    8000d254:	00010597          	auipc	a1,0x10
    8000d258:	d1c58593          	add	a1,a1,-740 # 8001cf70 <__func__.1+0x2c8>
    8000d25c:	bf5d                	j	8000d212 <illegal_except_7+0x16a>

000000008000d25e <illegal_except_8>:


bool illegal_except_8() {
    8000d25e:	1141                	add	sp,sp,-16

    TEST_START();
    8000d260:	0000f597          	auipc	a1,0xf
    8000d264:	e0058593          	add	a1,a1,-512 # 8001c060 <__func__.6>
    8000d268:	00010517          	auipc	a0,0x10
    8000d26c:	d2850513          	add	a0,a0,-728 # 8001cf90 <__func__.1+0x2e8>
bool illegal_except_8() {
    8000d270:	e406                	sd	ra,8(sp)
    8000d272:	e022                	sd	s0,0(sp)
    TEST_START();
    8000d274:	1720e0ef          	jal	8001b3e6 <printf>
    8000d278:	4529                	li	a0,10
    8000d27a:	03e0d0ef          	jal	8001a2b8 <putchar>
    //M模式下（无论mstatus.TVM的值如何）执行HFENCE.GVMA
    goto_priv(PRIV_M);
    8000d27e:	4511                	li	a0,4
    8000d280:	85ff30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000d284:	0ff0000f          	fence
    8000d288:	4785                	li	a5,1
    8000d28a:	00030417          	auipc	s0,0x30
    8000d28e:	d8640413          	add	s0,s0,-634 # 8003d010 <excpt>
    8000d292:	00f41023          	sh	a5,0(s0)
    8000d296:	00030797          	auipc	a5,0x30
    8000d29a:	da07b923          	sd	zero,-590(a5) # 8003d048 <excpt+0x38>
    8000d29e:	0ff0000f          	fence
    asm volatile(
    8000d2a2:	62000073          	.4byte	0x62000073
    hfence_gvma();
    TEST_ASSERT("m mode hfence.gvma successful",
    8000d2a6:	08200593          	li	a1,130
    8000d2aa:	00012617          	auipc	a2,0x12
    8000d2ae:	79660613          	add	a2,a2,1942 # 8001fa40 <__func__.1+0x2d98>
    8000d2b2:	00010517          	auipc	a0,0x10
    8000d2b6:	cf650513          	add	a0,a0,-778 # 8001cfa8 <__func__.1+0x300>
    8000d2ba:	12c0e0ef          	jal	8001b3e6 <printf>
    8000d2be:	00144783          	lbu	a5,1(s0)
    8000d2c2:	00010597          	auipc	a1,0x10
    8000d2c6:	cae58593          	add	a1,a1,-850 # 8001cf70 <__func__.1+0x2c8>
    8000d2ca:	c789                	beqz	a5,8000d2d4 <illegal_except_8+0x76>
    8000d2cc:	00010597          	auipc	a1,0x10
    8000d2d0:	cb458593          	add	a1,a1,-844 # 8001cf80 <__func__.1+0x2d8>
    8000d2d4:	00010517          	auipc	a0,0x10
    8000d2d8:	cec50513          	add	a0,a0,-788 # 8001cfc0 <__func__.1+0x318>
    8000d2dc:	10a0e0ef          	jal	8001b3e6 <printf>
    8000d2e0:	00144783          	lbu	a5,1(s0)
    8000d2e4:	e3b1                	bnez	a5,8000d328 <illegal_except_8+0xca>
    8000d2e6:	4529                	li	a0,10
    8000d2e8:	7d10c0ef          	jal	8001a2b8 <putchar>
    8000d2ec:	00144783          	lbu	a5,1(s0)
    8000d2f0:	e795                	bnez	a5,8000d31c <illegal_except_8+0xbe>
    8000d2f2:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    8000d2f4:	00010597          	auipc	a1,0x10
    8000d2f8:	c7c58593          	add	a1,a1,-900 # 8001cf70 <__func__.1+0x2c8>
    8000d2fc:	00010517          	auipc	a0,0x10
    8000d300:	d2c50513          	add	a0,a0,-724 # 8001d028 <__func__.1+0x380>
    8000d304:	0e20e0ef          	jal	8001b3e6 <printf>
    8000d308:	4511                	li	a0,4
    8000d30a:	fd4f30ef          	jal	80000ade <goto_priv>
    8000d30e:	818f40ef          	jal	80001326 <reset_state>
}
    8000d312:	60a2                	ld	ra,8(sp)
    8000d314:	8522                	mv	a0,s0
    8000d316:	6402                	ld	s0,0(sp)
    8000d318:	0141                	add	sp,sp,16
    8000d31a:	8082                	ret
    TEST_ASSERT("m mode hfence.gvma successful",
    8000d31c:	4401                	li	s0,0
    TEST_END();
    8000d31e:	00010597          	auipc	a1,0x10
    8000d322:	c6258593          	add	a1,a1,-926 # 8001cf80 <__func__.1+0x2d8>
    8000d326:	bfd9                	j	8000d2fc <illegal_except_8+0x9e>
    TEST_ASSERT("m mode hfence.gvma successful",
    8000d328:	00010517          	auipc	a0,0x10
    8000d32c:	ca050513          	add	a0,a0,-864 # 8001cfc8 <__func__.1+0x320>
    8000d330:	0b60e0ef          	jal	8001b3e6 <printf>
    8000d334:	02900513          	li	a0,41
    8000d338:	7810c0ef          	jal	8001a2b8 <putchar>
    8000d33c:	b76d                	j	8000d2e6 <illegal_except_8+0x88>

000000008000d33e <illegal_except_9>:

bool illegal_except_9() {
    8000d33e:	1101                	add	sp,sp,-32

    TEST_START();
    8000d340:	0000f597          	auipc	a1,0xf
    8000d344:	d3858593          	add	a1,a1,-712 # 8001c078 <__func__.5>
    8000d348:	00010517          	auipc	a0,0x10
    8000d34c:	c4850513          	add	a0,a0,-952 # 8001cf90 <__func__.1+0x2e8>
bool illegal_except_9() {
    8000d350:	ec06                	sd	ra,24(sp)
    8000d352:	e822                	sd	s0,16(sp)
    8000d354:	e426                	sd	s1,8(sp)
    TEST_START();
    8000d356:	0900e0ef          	jal	8001b3e6 <printf>
    8000d35a:	4529                	li	a0,10
    8000d35c:	75d0c0ef          	jal	8001a2b8 <putchar>
    //HS模式下mstatus.TVM=0时执行HFENCE.GVMA
    goto_priv(PRIV_M);
    8000d360:	4511                	li	a0,4
    8000d362:	f7cf30ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TVM);
    8000d366:	001007b7          	lui	a5,0x100
    8000d36a:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_HS);
    8000d36e:	450d                	li	a0,3
    8000d370:	f6ef30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000d374:	0ff0000f          	fence
    8000d378:	4785                	li	a5,1
    8000d37a:	00030417          	auipc	s0,0x30
    8000d37e:	c9640413          	add	s0,s0,-874 # 8003d010 <excpt>
    8000d382:	00f41023          	sh	a5,0(s0)
    8000d386:	00030797          	auipc	a5,0x30
    8000d38a:	cc07b123          	sd	zero,-830(a5) # 8003d048 <excpt+0x38>
    8000d38e:	0ff0000f          	fence
    8000d392:	62000073          	.4byte	0x62000073
    hfence_gvma();
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    8000d396:	08200593          	li	a1,130
    8000d39a:	00012617          	auipc	a2,0x12
    8000d39e:	6c660613          	add	a2,a2,1734 # 8001fa60 <__func__.1+0x2db8>
    8000d3a2:	00010517          	auipc	a0,0x10
    8000d3a6:	c0650513          	add	a0,a0,-1018 # 8001cfa8 <__func__.1+0x300>
    8000d3aa:	03c0e0ef          	jal	8001b3e6 <printf>
    8000d3ae:	00144783          	lbu	a5,1(s0)
    8000d3b2:	00010597          	auipc	a1,0x10
    8000d3b6:	bbe58593          	add	a1,a1,-1090 # 8001cf70 <__func__.1+0x2c8>
    8000d3ba:	c789                	beqz	a5,8000d3c4 <illegal_except_9+0x86>
    8000d3bc:	00010597          	auipc	a1,0x10
    8000d3c0:	bc458593          	add	a1,a1,-1084 # 8001cf80 <__func__.1+0x2d8>
    8000d3c4:	00010517          	auipc	a0,0x10
    8000d3c8:	bfc50513          	add	a0,a0,-1028 # 8001cfc0 <__func__.1+0x318>
    8000d3cc:	01a0e0ef          	jal	8001b3e6 <printf>
    8000d3d0:	00144783          	lbu	a5,1(s0)
    8000d3d4:	0e079363          	bnez	a5,8000d4ba <illegal_except_9+0x17c>
    8000d3d8:	4529                	li	a0,10
    8000d3da:	6df0c0ef          	jal	8001a2b8 <putchar>
        excpt.triggered == false
    ); 

    //mstatus.TVM=1时，在HS模式下执行HFENCE.GVMA
    goto_priv(PRIV_M);
    8000d3de:	4511                	li	a0,4
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    8000d3e0:	00144483          	lbu	s1,1(s0)
    goto_priv(PRIV_M);
    8000d3e4:	efaf30ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    8000d3e8:	001007b7          	lui	a5,0x100
    8000d3ec:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    8000d3f0:	450d                	li	a0,3
    8000d3f2:	eecf30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000d3f6:	0ff0000f          	fence
    8000d3fa:	4785                	li	a5,1
    8000d3fc:	00f41023          	sh	a5,0(s0)
    8000d400:	00030797          	auipc	a5,0x30
    8000d404:	c407b423          	sd	zero,-952(a5) # 8003d048 <excpt+0x38>
    8000d408:	0ff0000f          	fence
    8000d40c:	62000073          	.4byte	0x62000073
    hfence_gvma();
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    8000d410:	08200593          	li	a1,130
    8000d414:	00012617          	auipc	a2,0x12
    8000d418:	68460613          	add	a2,a2,1668 # 8001fa98 <__func__.1+0x2df0>
    8000d41c:	00010517          	auipc	a0,0x10
    8000d420:	b8c50513          	add	a0,a0,-1140 # 8001cfa8 <__func__.1+0x300>
    8000d424:	7c30d0ef          	jal	8001b3e6 <printf>
    8000d428:	00144783          	lbu	a5,1(s0)
    8000d42c:	00010597          	auipc	a1,0x10
    8000d430:	b5458593          	add	a1,a1,-1196 # 8001cf80 <__func__.1+0x2d8>
    8000d434:	c789                	beqz	a5,8000d43e <illegal_except_9+0x100>
    8000d436:	6418                	ld	a4,8(s0)
    8000d438:	4789                	li	a5,2
    8000d43a:	08f70b63          	beq	a4,a5,8000d4d0 <illegal_except_9+0x192>
    8000d43e:	00010517          	auipc	a0,0x10
    8000d442:	b8250513          	add	a0,a0,-1150 # 8001cfc0 <__func__.1+0x318>
    8000d446:	7a10d0ef          	jal	8001b3e6 <printf>
    8000d44a:	00144783          	lbu	a5,1(s0)
    8000d44e:	c789                	beqz	a5,8000d458 <illegal_except_9+0x11a>
    8000d450:	6418                	ld	a4,8(s0)
    8000d452:	4789                	li	a5,2
    8000d454:	00f70c63          	beq	a4,a5,8000d46c <illegal_except_9+0x12e>
    8000d458:	00010517          	auipc	a0,0x10
    8000d45c:	b7050513          	add	a0,a0,-1168 # 8001cfc8 <__func__.1+0x320>
    8000d460:	7870d0ef          	jal	8001b3e6 <printf>
    8000d464:	02900513          	li	a0,41
    8000d468:	6510c0ef          	jal	8001a2b8 <putchar>
    8000d46c:	4529                	li	a0,10
    8000d46e:	64b0c0ef          	jal	8001a2b8 <putchar>
    8000d472:	ec95                	bnez	s1,8000d4ae <illegal_except_9+0x170>
    8000d474:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000d478:	00010597          	auipc	a1,0x10
    8000d47c:	b0858593          	add	a1,a1,-1272 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    8000d480:	c491                	beqz	s1,8000d48c <illegal_except_9+0x14e>
    8000d482:	6418                	ld	a4,8(s0)
    8000d484:	4789                	li	a5,2
    8000d486:	04f70a63          	beq	a4,a5,8000d4da <illegal_except_9+0x19c>
    8000d48a:	4481                	li	s1,0
    TEST_END();
    8000d48c:	00010517          	auipc	a0,0x10
    8000d490:	b9c50513          	add	a0,a0,-1124 # 8001d028 <__func__.1+0x380>
    8000d494:	7530d0ef          	jal	8001b3e6 <printf>
    8000d498:	4511                	li	a0,4
    8000d49a:	e44f30ef          	jal	80000ade <goto_priv>
    8000d49e:	e89f30ef          	jal	80001326 <reset_state>
}
    8000d4a2:	60e2                	ld	ra,24(sp)
    8000d4a4:	6442                	ld	s0,16(sp)
    8000d4a6:	8526                	mv	a0,s1
    8000d4a8:	64a2                	ld	s1,8(sp)
    8000d4aa:	6105                	add	sp,sp,32
    8000d4ac:	8082                	ret
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    8000d4ae:	4481                	li	s1,0
    TEST_END();
    8000d4b0:	00010597          	auipc	a1,0x10
    8000d4b4:	ad058593          	add	a1,a1,-1328 # 8001cf80 <__func__.1+0x2d8>
    8000d4b8:	bfd1                	j	8000d48c <illegal_except_9+0x14e>
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    8000d4ba:	00010517          	auipc	a0,0x10
    8000d4be:	b0e50513          	add	a0,a0,-1266 # 8001cfc8 <__func__.1+0x320>
    8000d4c2:	7250d0ef          	jal	8001b3e6 <printf>
    8000d4c6:	02900513          	li	a0,41
    8000d4ca:	5ef0c0ef          	jal	8001a2b8 <putchar>
    8000d4ce:	b729                	j	8000d3d8 <illegal_except_9+0x9a>
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    8000d4d0:	00010597          	auipc	a1,0x10
    8000d4d4:	aa058593          	add	a1,a1,-1376 # 8001cf70 <__func__.1+0x2c8>
    8000d4d8:	b79d                	j	8000d43e <illegal_except_9+0x100>
    TEST_END();
    8000d4da:	00010597          	auipc	a1,0x10
    8000d4de:	a9658593          	add	a1,a1,-1386 # 8001cf70 <__func__.1+0x2c8>
    8000d4e2:	b76d                	j	8000d48c <illegal_except_9+0x14e>

000000008000d4e4 <illegal_except_10>:

bool illegal_except_10() {
    8000d4e4:	1101                	add	sp,sp,-32

    TEST_START();
    8000d4e6:	0000f597          	auipc	a1,0xf
    8000d4ea:	baa58593          	add	a1,a1,-1110 # 8001c090 <__func__.4>
    8000d4ee:	00010517          	auipc	a0,0x10
    8000d4f2:	aa250513          	add	a0,a0,-1374 # 8001cf90 <__func__.1+0x2e8>
bool illegal_except_10() {
    8000d4f6:	ec06                	sd	ra,24(sp)
    8000d4f8:	e822                	sd	s0,16(sp)
    8000d4fa:	e426                	sd	s1,8(sp)
    TEST_START();
    8000d4fc:	6eb0d0ef          	jal	8001b3e6 <printf>
    8000d500:	4529                	li	a0,10
    8000d502:	5b70c0ef          	jal	8001a2b8 <putchar>
    
    //mstatus.TVM=1，尝试在S模式或HS模式下执行SINVAL.VMA或HINVAL.GVMA
    goto_priv(PRIV_M);
    8000d506:	4511                	li	a0,4
    8000d508:	dd6f30ef          	jal	80000ade <goto_priv>
    reset_state();
    8000d50c:	e1bf30ef          	jal	80001326 <reset_state>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    8000d510:	001007b7          	lui	a5,0x100
    8000d514:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    8000d518:	450d                	li	a0,3
    8000d51a:	dc4f30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000d51e:	0ff0000f          	fence
    8000d522:	4785                	li	a5,1
    8000d524:	00030417          	auipc	s0,0x30
    8000d528:	aec40413          	add	s0,s0,-1300 # 8003d010 <excpt>
    8000d52c:	00f41023          	sh	a5,0(s0)
    8000d530:	00030797          	auipc	a5,0x30
    8000d534:	b007bc23          	sd	zero,-1256(a5) # 8003d048 <excpt+0x38>
    8000d538:	0ff0000f          	fence
    asm volatile(
    8000d53c:	16000073          	.4byte	0x16000073
    Sinval_vma();
    TEST_ASSERT("hs mode sinval.vma successful when mstatus.tvm=1",
    8000d540:	08200593          	li	a1,130
    8000d544:	00012617          	auipc	a2,0x12
    8000d548:	58c60613          	add	a2,a2,1420 # 8001fad0 <__func__.1+0x2e28>
    8000d54c:	00010517          	auipc	a0,0x10
    8000d550:	a5c50513          	add	a0,a0,-1444 # 8001cfa8 <__func__.1+0x300>
    8000d554:	6930d0ef          	jal	8001b3e6 <printf>
    8000d558:	00144783          	lbu	a5,1(s0)
    8000d55c:	00010597          	auipc	a1,0x10
    8000d560:	a2458593          	add	a1,a1,-1500 # 8001cf80 <__func__.1+0x2d8>
    8000d564:	c789                	beqz	a5,8000d56e <illegal_except_10+0x8a>
    8000d566:	6418                	ld	a4,8(s0)
    8000d568:	4789                	li	a5,2
    8000d56a:	12f70563          	beq	a4,a5,8000d694 <illegal_except_10+0x1b0>
    8000d56e:	00010517          	auipc	a0,0x10
    8000d572:	a5250513          	add	a0,a0,-1454 # 8001cfc0 <__func__.1+0x318>
    8000d576:	6710d0ef          	jal	8001b3e6 <printf>
    8000d57a:	00144783          	lbu	a5,1(s0)
    8000d57e:	c789                	beqz	a5,8000d588 <illegal_except_10+0xa4>
    8000d580:	6418                	ld	a4,8(s0)
    8000d582:	4789                	li	a5,2
    8000d584:	00f70c63          	beq	a4,a5,8000d59c <illegal_except_10+0xb8>
    8000d588:	00010517          	auipc	a0,0x10
    8000d58c:	a4050513          	add	a0,a0,-1472 # 8001cfc8 <__func__.1+0x320>
    8000d590:	6570d0ef          	jal	8001b3e6 <printf>
    8000d594:	02900513          	li	a0,41
    8000d598:	5210c0ef          	jal	8001a2b8 <putchar>
    8000d59c:	4529                	li	a0,10
    8000d59e:	51b0c0ef          	jal	8001a2b8 <putchar>
    8000d5a2:	00144783          	lbu	a5,1(s0)
    8000d5a6:	4481                	li	s1,0
    8000d5a8:	c789                	beqz	a5,8000d5b2 <illegal_except_10+0xce>
    8000d5aa:	6404                	ld	s1,8(s0)
    8000d5ac:	14f9                	add	s1,s1,-2
    8000d5ae:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_M);
    8000d5b2:	4511                	li	a0,4
    8000d5b4:	d2af30ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    8000d5b8:	001007b7          	lui	a5,0x100
    8000d5bc:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    8000d5c0:	450d                	li	a0,3
    8000d5c2:	d1cf30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000d5c6:	0ff0000f          	fence
    8000d5ca:	4785                	li	a5,1
    8000d5cc:	00f41023          	sh	a5,0(s0)
    8000d5d0:	00030797          	auipc	a5,0x30
    8000d5d4:	a607bc23          	sd	zero,-1416(a5) # 8003d048 <excpt+0x38>
    8000d5d8:	0ff0000f          	fence
    asm volatile(
    8000d5dc:	66000073          	.4byte	0x66000073
    hinval_gvma();
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    8000d5e0:	08200593          	li	a1,130
    8000d5e4:	00012617          	auipc	a2,0x12
    8000d5e8:	52460613          	add	a2,a2,1316 # 8001fb08 <__func__.1+0x2e60>
    8000d5ec:	00010517          	auipc	a0,0x10
    8000d5f0:	9bc50513          	add	a0,a0,-1604 # 8001cfa8 <__func__.1+0x300>
    8000d5f4:	5f30d0ef          	jal	8001b3e6 <printf>
    8000d5f8:	00144783          	lbu	a5,1(s0)
    8000d5fc:	00010597          	auipc	a1,0x10
    8000d600:	98458593          	add	a1,a1,-1660 # 8001cf80 <__func__.1+0x2d8>
    8000d604:	c789                	beqz	a5,8000d60e <illegal_except_10+0x12a>
    8000d606:	6418                	ld	a4,8(s0)
    8000d608:	4789                	li	a5,2
    8000d60a:	08f70063          	beq	a4,a5,8000d68a <illegal_except_10+0x1a6>
    8000d60e:	00010517          	auipc	a0,0x10
    8000d612:	9b250513          	add	a0,a0,-1614 # 8001cfc0 <__func__.1+0x318>
    8000d616:	5d10d0ef          	jal	8001b3e6 <printf>
    8000d61a:	00144783          	lbu	a5,1(s0)
    8000d61e:	c789                	beqz	a5,8000d628 <illegal_except_10+0x144>
    8000d620:	6418                	ld	a4,8(s0)
    8000d622:	4789                	li	a5,2
    8000d624:	00f70c63          	beq	a4,a5,8000d63c <illegal_except_10+0x158>
    8000d628:	00010517          	auipc	a0,0x10
    8000d62c:	9a050513          	add	a0,a0,-1632 # 8001cfc8 <__func__.1+0x320>
    8000d630:	5b70d0ef          	jal	8001b3e6 <printf>
    8000d634:	02900513          	li	a0,41
    8000d638:	4810c0ef          	jal	8001a2b8 <putchar>
    8000d63c:	4529                	li	a0,10
    8000d63e:	47b0c0ef          	jal	8001a2b8 <putchar>
    8000d642:	cc95                	beqz	s1,8000d67e <illegal_except_10+0x19a>
    8000d644:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000d648:	00010597          	auipc	a1,0x10
    8000d64c:	93858593          	add	a1,a1,-1736 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    8000d650:	c491                	beqz	s1,8000d65c <illegal_except_10+0x178>
    8000d652:	6418                	ld	a4,8(s0)
    8000d654:	4789                	li	a5,2
    8000d656:	04f70463          	beq	a4,a5,8000d69e <illegal_except_10+0x1ba>
    8000d65a:	4481                	li	s1,0
    TEST_END();
    8000d65c:	00010517          	auipc	a0,0x10
    8000d660:	9cc50513          	add	a0,a0,-1588 # 8001d028 <__func__.1+0x380>
    8000d664:	5830d0ef          	jal	8001b3e6 <printf>
    8000d668:	4511                	li	a0,4
    8000d66a:	c74f30ef          	jal	80000ade <goto_priv>
    8000d66e:	cb9f30ef          	jal	80001326 <reset_state>
}
    8000d672:	60e2                	ld	ra,24(sp)
    8000d674:	6442                	ld	s0,16(sp)
    8000d676:	8526                	mv	a0,s1
    8000d678:	64a2                	ld	s1,8(sp)
    8000d67a:	6105                	add	sp,sp,32
    8000d67c:	8082                	ret
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    8000d67e:	4481                	li	s1,0
    TEST_END();
    8000d680:	00010597          	auipc	a1,0x10
    8000d684:	90058593          	add	a1,a1,-1792 # 8001cf80 <__func__.1+0x2d8>
    8000d688:	bfd1                	j	8000d65c <illegal_except_10+0x178>
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    8000d68a:	00010597          	auipc	a1,0x10
    8000d68e:	8e658593          	add	a1,a1,-1818 # 8001cf70 <__func__.1+0x2c8>
    8000d692:	bfb5                	j	8000d60e <illegal_except_10+0x12a>
    TEST_ASSERT("hs mode sinval.vma successful when mstatus.tvm=1",
    8000d694:	00010597          	auipc	a1,0x10
    8000d698:	8dc58593          	add	a1,a1,-1828 # 8001cf70 <__func__.1+0x2c8>
    8000d69c:	bdc9                	j	8000d56e <illegal_except_10+0x8a>
    TEST_END();
    8000d69e:	00010597          	auipc	a1,0x10
    8000d6a2:	8d258593          	add	a1,a1,-1838 # 8001cf70 <__func__.1+0x2c8>
    8000d6a6:	bf5d                	j	8000d65c <illegal_except_10+0x178>

000000008000d6a8 <illegal_except_11>:

bool illegal_except_11() {
    8000d6a8:	1101                	add	sp,sp,-32

    TEST_START();
    8000d6aa:	0000f597          	auipc	a1,0xf
    8000d6ae:	9fe58593          	add	a1,a1,-1538 # 8001c0a8 <__func__.3>
    8000d6b2:	00010517          	auipc	a0,0x10
    8000d6b6:	8de50513          	add	a0,a0,-1826 # 8001cf90 <__func__.1+0x2e8>
bool illegal_except_11() {
    8000d6ba:	ec06                	sd	ra,24(sp)
    8000d6bc:	e822                	sd	s0,16(sp)
    8000d6be:	e426                	sd	s1,8(sp)
    8000d6c0:	e04a                	sd	s2,0(sp)
    TEST_START();
    8000d6c2:	5250d0ef          	jal	8001b3e6 <printf>
    8000d6c6:	4529                	li	a0,10
    8000d6c8:	3f10c0ef          	jal	8001a2b8 <putchar>

    //U模式下，执行HFENCE.VVMA或HFENCE.GVMA
    TEST_SETUP_EXCEPT();
    8000d6cc:	0ff0000f          	fence
    8000d6d0:	00030417          	auipc	s0,0x30
    8000d6d4:	94040413          	add	s0,s0,-1728 # 8003d010 <excpt>
    8000d6d8:	4485                	li	s1,1
    8000d6da:	00941023          	sh	s1,0(s0)
    8000d6de:	00030797          	auipc	a5,0x30
    8000d6e2:	9607b523          	sd	zero,-1686(a5) # 8003d048 <excpt+0x38>
    8000d6e6:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000d6ea:	4511                	li	a0,4
    8000d6ec:	bf2f30ef          	jal	80000ade <goto_priv>
    reset_state();
    8000d6f0:	c37f30ef          	jal	80001326 <reset_state>
    goto_priv(PRIV_HU);
    8000d6f4:	4505                	li	a0,1
    8000d6f6:	be8f30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000d6fa:	0ff0000f          	fence
    8000d6fe:	00030797          	auipc	a5,0x30
    8000d702:	9407b523          	sd	zero,-1718(a5) # 8003d048 <excpt+0x38>
    8000d706:	00941023          	sh	s1,0(s0)
    8000d70a:	0ff0000f          	fence
    asm volatile(
    8000d70e:	22000073          	.4byte	0x22000073
    hfence_vvma();
    TEST_ASSERT("hu mode hfence.vvma cause to illegal instruction interrupt",
    8000d712:	08200593          	li	a1,130
    8000d716:	00012617          	auipc	a2,0x12
    8000d71a:	42a60613          	add	a2,a2,1066 # 8001fb40 <__func__.1+0x2e98>
    8000d71e:	00010517          	auipc	a0,0x10
    8000d722:	88a50513          	add	a0,a0,-1910 # 8001cfa8 <__func__.1+0x300>
    8000d726:	4c10d0ef          	jal	8001b3e6 <printf>
    8000d72a:	00144783          	lbu	a5,1(s0)
    8000d72e:	00010597          	auipc	a1,0x10
    8000d732:	85258593          	add	a1,a1,-1966 # 8001cf80 <__func__.1+0x2d8>
    8000d736:	c789                	beqz	a5,8000d740 <illegal_except_11+0x98>
    8000d738:	6418                	ld	a4,8(s0)
    8000d73a:	4789                	li	a5,2
    8000d73c:	12f70e63          	beq	a4,a5,8000d878 <illegal_except_11+0x1d0>
    8000d740:	00010517          	auipc	a0,0x10
    8000d744:	88050513          	add	a0,a0,-1920 # 8001cfc0 <__func__.1+0x318>
    8000d748:	49f0d0ef          	jal	8001b3e6 <printf>
    8000d74c:	00144783          	lbu	a5,1(s0)
    8000d750:	c789                	beqz	a5,8000d75a <illegal_except_11+0xb2>
    8000d752:	6418                	ld	a4,8(s0)
    8000d754:	4789                	li	a5,2
    8000d756:	00f70c63          	beq	a4,a5,8000d76e <illegal_except_11+0xc6>
    8000d75a:	00010517          	auipc	a0,0x10
    8000d75e:	86e50513          	add	a0,a0,-1938 # 8001cfc8 <__func__.1+0x320>
    8000d762:	4850d0ef          	jal	8001b3e6 <printf>
    8000d766:	02900513          	li	a0,41
    8000d76a:	34f0c0ef          	jal	8001a2b8 <putchar>
    8000d76e:	4529                	li	a0,10
    8000d770:	3490c0ef          	jal	8001a2b8 <putchar>
    8000d774:	00144783          	lbu	a5,1(s0)
    8000d778:	4481                	li	s1,0
    8000d77a:	c789                	beqz	a5,8000d784 <illegal_except_11+0xdc>
    8000d77c:	6404                	ld	s1,8(s0)
    8000d77e:	14f9                	add	s1,s1,-2
    8000d780:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    8000d784:	0ff0000f          	fence
    8000d788:	4905                	li	s2,1
    8000d78a:	01241023          	sh	s2,0(s0)
    8000d78e:	00030797          	auipc	a5,0x30
    8000d792:	8a07bd23          	sd	zero,-1862(a5) # 8003d048 <excpt+0x38>
    8000d796:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000d79a:	4511                	li	a0,4
    8000d79c:	b42f30ef          	jal	80000ade <goto_priv>
    reset_state();
    8000d7a0:	b87f30ef          	jal	80001326 <reset_state>
    goto_priv(PRIV_HU);
    8000d7a4:	4505                	li	a0,1
    8000d7a6:	b38f30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000d7aa:	0ff0000f          	fence
    8000d7ae:	00030797          	auipc	a5,0x30
    8000d7b2:	8807bd23          	sd	zero,-1894(a5) # 8003d048 <excpt+0x38>
    8000d7b6:	01241023          	sh	s2,0(s0)
    8000d7ba:	0ff0000f          	fence
    asm volatile(
    8000d7be:	62000073          	.4byte	0x62000073
    hfence_gvma();
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    8000d7c2:	08200593          	li	a1,130
    8000d7c6:	00012617          	auipc	a2,0x12
    8000d7ca:	3ba60613          	add	a2,a2,954 # 8001fb80 <__func__.1+0x2ed8>
    8000d7ce:	0000f517          	auipc	a0,0xf
    8000d7d2:	7da50513          	add	a0,a0,2010 # 8001cfa8 <__func__.1+0x300>
    8000d7d6:	4110d0ef          	jal	8001b3e6 <printf>
    8000d7da:	00144783          	lbu	a5,1(s0)
    8000d7de:	0000f597          	auipc	a1,0xf
    8000d7e2:	7a258593          	add	a1,a1,1954 # 8001cf80 <__func__.1+0x2d8>
    8000d7e6:	c789                	beqz	a5,8000d7f0 <illegal_except_11+0x148>
    8000d7e8:	6418                	ld	a4,8(s0)
    8000d7ea:	4789                	li	a5,2
    8000d7ec:	08f70163          	beq	a4,a5,8000d86e <illegal_except_11+0x1c6>
    8000d7f0:	0000f517          	auipc	a0,0xf
    8000d7f4:	7d050513          	add	a0,a0,2000 # 8001cfc0 <__func__.1+0x318>
    8000d7f8:	3ef0d0ef          	jal	8001b3e6 <printf>
    8000d7fc:	00144783          	lbu	a5,1(s0)
    8000d800:	c789                	beqz	a5,8000d80a <illegal_except_11+0x162>
    8000d802:	6418                	ld	a4,8(s0)
    8000d804:	4789                	li	a5,2
    8000d806:	00f70c63          	beq	a4,a5,8000d81e <illegal_except_11+0x176>
    8000d80a:	0000f517          	auipc	a0,0xf
    8000d80e:	7be50513          	add	a0,a0,1982 # 8001cfc8 <__func__.1+0x320>
    8000d812:	3d50d0ef          	jal	8001b3e6 <printf>
    8000d816:	02900513          	li	a0,41
    8000d81a:	29f0c0ef          	jal	8001a2b8 <putchar>
    8000d81e:	4529                	li	a0,10
    8000d820:	2990c0ef          	jal	8001a2b8 <putchar>
    8000d824:	cc9d                	beqz	s1,8000d862 <illegal_except_11+0x1ba>
    8000d826:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000d82a:	0000f597          	auipc	a1,0xf
    8000d82e:	75658593          	add	a1,a1,1878 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    8000d832:	c491                	beqz	s1,8000d83e <illegal_except_11+0x196>
    8000d834:	6418                	ld	a4,8(s0)
    8000d836:	4789                	li	a5,2
    8000d838:	04f70563          	beq	a4,a5,8000d882 <illegal_except_11+0x1da>
    8000d83c:	4481                	li	s1,0
    TEST_END();
    8000d83e:	0000f517          	auipc	a0,0xf
    8000d842:	7ea50513          	add	a0,a0,2026 # 8001d028 <__func__.1+0x380>
    8000d846:	3a10d0ef          	jal	8001b3e6 <printf>
    8000d84a:	4511                	li	a0,4
    8000d84c:	a92f30ef          	jal	80000ade <goto_priv>
    8000d850:	ad7f30ef          	jal	80001326 <reset_state>
}
    8000d854:	60e2                	ld	ra,24(sp)
    8000d856:	6442                	ld	s0,16(sp)
    8000d858:	6902                	ld	s2,0(sp)
    8000d85a:	8526                	mv	a0,s1
    8000d85c:	64a2                	ld	s1,8(sp)
    8000d85e:	6105                	add	sp,sp,32
    8000d860:	8082                	ret
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    8000d862:	4481                	li	s1,0
    TEST_END();
    8000d864:	0000f597          	auipc	a1,0xf
    8000d868:	71c58593          	add	a1,a1,1820 # 8001cf80 <__func__.1+0x2d8>
    8000d86c:	bfc9                	j	8000d83e <illegal_except_11+0x196>
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    8000d86e:	0000f597          	auipc	a1,0xf
    8000d872:	70258593          	add	a1,a1,1794 # 8001cf70 <__func__.1+0x2c8>
    8000d876:	bfad                	j	8000d7f0 <illegal_except_11+0x148>
    TEST_ASSERT("hu mode hfence.vvma cause to illegal instruction interrupt",
    8000d878:	0000f597          	auipc	a1,0xf
    8000d87c:	6f858593          	add	a1,a1,1784 # 8001cf70 <__func__.1+0x2c8>
    8000d880:	b5c1                	j	8000d740 <illegal_except_11+0x98>
    TEST_END();
    8000d882:	0000f597          	auipc	a1,0xf
    8000d886:	6ee58593          	add	a1,a1,1774 # 8001cf70 <__func__.1+0x2c8>
    8000d88a:	bf55                	j	8000d83e <illegal_except_11+0x196>

000000008000d88c <illegal_except_12>:

bool illegal_except_12() {
    8000d88c:	1101                	add	sp,sp,-32

    TEST_START();
    8000d88e:	0000f597          	auipc	a1,0xf
    8000d892:	83258593          	add	a1,a1,-1998 # 8001c0c0 <__func__.2>
    8000d896:	0000f517          	auipc	a0,0xf
    8000d89a:	6fa50513          	add	a0,a0,1786 # 8001cf90 <__func__.1+0x2e8>
bool illegal_except_12() {
    8000d89e:	ec06                	sd	ra,24(sp)
    8000d8a0:	e822                	sd	s0,16(sp)
    8000d8a2:	e426                	sd	s1,8(sp)
    8000d8a4:	e04a                	sd	s2,0(sp)
    TEST_START();
    8000d8a6:	3410d0ef          	jal	8001b3e6 <printf>
    8000d8aa:	4529                	li	a0,10
    8000d8ac:	20d0c0ef          	jal	8001a2b8 <putchar>

    //在U模式下执行SINVAL.VMA、HINVAL.VVMA和HINVAL.GVMA中的任何一条
    TEST_SETUP_EXCEPT();
    8000d8b0:	0ff0000f          	fence
    8000d8b4:	0002f417          	auipc	s0,0x2f
    8000d8b8:	75c40413          	add	s0,s0,1884 # 8003d010 <excpt>
    8000d8bc:	4485                	li	s1,1
    8000d8be:	00941023          	sh	s1,0(s0)
    8000d8c2:	0002f797          	auipc	a5,0x2f
    8000d8c6:	7807b323          	sd	zero,1926(a5) # 8003d048 <excpt+0x38>
    8000d8ca:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000d8ce:	4511                	li	a0,4
    8000d8d0:	a0ef30ef          	jal	80000ade <goto_priv>
    reset_state();
    8000d8d4:	a53f30ef          	jal	80001326 <reset_state>
    goto_priv(PRIV_HU);
    8000d8d8:	4505                	li	a0,1
    8000d8da:	a04f30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000d8de:	0ff0000f          	fence
    8000d8e2:	0002f797          	auipc	a5,0x2f
    8000d8e6:	7607b323          	sd	zero,1894(a5) # 8003d048 <excpt+0x38>
    8000d8ea:	00941023          	sh	s1,0(s0)
    8000d8ee:	0ff0000f          	fence
    asm volatile(
    8000d8f2:	16000073          	.4byte	0x16000073
    Sinval_vma();
    TEST_ASSERT("hu mode sinval.vma cause to illegal instruction interrupt",
    8000d8f6:	08200593          	li	a1,130
    8000d8fa:	00012617          	auipc	a2,0x12
    8000d8fe:	2c660613          	add	a2,a2,710 # 8001fbc0 <__func__.1+0x2f18>
    8000d902:	0000f517          	auipc	a0,0xf
    8000d906:	6a650513          	add	a0,a0,1702 # 8001cfa8 <__func__.1+0x300>
    8000d90a:	2dd0d0ef          	jal	8001b3e6 <printf>
    8000d90e:	00144783          	lbu	a5,1(s0)
    8000d912:	0000f597          	auipc	a1,0xf
    8000d916:	66e58593          	add	a1,a1,1646 # 8001cf80 <__func__.1+0x2d8>
    8000d91a:	c789                	beqz	a5,8000d924 <illegal_except_12+0x98>
    8000d91c:	6418                	ld	a4,8(s0)
    8000d91e:	4789                	li	a5,2
    8000d920:	1ef70963          	beq	a4,a5,8000db12 <illegal_except_12+0x286>
    8000d924:	0000f517          	auipc	a0,0xf
    8000d928:	69c50513          	add	a0,a0,1692 # 8001cfc0 <__func__.1+0x318>
    8000d92c:	2bb0d0ef          	jal	8001b3e6 <printf>
    8000d930:	00144783          	lbu	a5,1(s0)
    8000d934:	c789                	beqz	a5,8000d93e <illegal_except_12+0xb2>
    8000d936:	6418                	ld	a4,8(s0)
    8000d938:	4789                	li	a5,2
    8000d93a:	00f70c63          	beq	a4,a5,8000d952 <illegal_except_12+0xc6>
    8000d93e:	0000f517          	auipc	a0,0xf
    8000d942:	68a50513          	add	a0,a0,1674 # 8001cfc8 <__func__.1+0x320>
    8000d946:	2a10d0ef          	jal	8001b3e6 <printf>
    8000d94a:	02900513          	li	a0,41
    8000d94e:	16b0c0ef          	jal	8001a2b8 <putchar>
    8000d952:	4529                	li	a0,10
    8000d954:	1650c0ef          	jal	8001a2b8 <putchar>
    8000d958:	00144783          	lbu	a5,1(s0)
    8000d95c:	4481                	li	s1,0
    8000d95e:	c789                	beqz	a5,8000d968 <illegal_except_12+0xdc>
    8000d960:	6404                	ld	s1,8(s0)
    8000d962:	14f9                	add	s1,s1,-2
    8000d964:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    8000d968:	0ff0000f          	fence
    8000d96c:	4905                	li	s2,1
    8000d96e:	01241023          	sh	s2,0(s0)
    8000d972:	0002f797          	auipc	a5,0x2f
    8000d976:	6c07bb23          	sd	zero,1750(a5) # 8003d048 <excpt+0x38>
    8000d97a:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000d97e:	4511                	li	a0,4
    8000d980:	95ef30ef          	jal	80000ade <goto_priv>
    reset_state();
    8000d984:	9a3f30ef          	jal	80001326 <reset_state>
    goto_priv(PRIV_HU);
    8000d988:	4505                	li	a0,1
    8000d98a:	954f30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000d98e:	0ff0000f          	fence
    8000d992:	0002f797          	auipc	a5,0x2f
    8000d996:	6a07bb23          	sd	zero,1718(a5) # 8003d048 <excpt+0x38>
    8000d99a:	01241023          	sh	s2,0(s0)
    8000d99e:	0ff0000f          	fence
    asm volatile(
    8000d9a2:	66000073          	.4byte	0x66000073
    hinval_gvma();
    TEST_ASSERT("hu mode hinval.gvma cause to illegal instruction interrupt",
    8000d9a6:	08200593          	li	a1,130
    8000d9aa:	00012617          	auipc	a2,0x12
    8000d9ae:	25660613          	add	a2,a2,598 # 8001fc00 <__func__.1+0x2f58>
    8000d9b2:	0000f517          	auipc	a0,0xf
    8000d9b6:	5f650513          	add	a0,a0,1526 # 8001cfa8 <__func__.1+0x300>
    8000d9ba:	22d0d0ef          	jal	8001b3e6 <printf>
    8000d9be:	00144783          	lbu	a5,1(s0)
    8000d9c2:	0000f597          	auipc	a1,0xf
    8000d9c6:	5be58593          	add	a1,a1,1470 # 8001cf80 <__func__.1+0x2d8>
    8000d9ca:	c789                	beqz	a5,8000d9d4 <illegal_except_12+0x148>
    8000d9cc:	6418                	ld	a4,8(s0)
    8000d9ce:	4789                	li	a5,2
    8000d9d0:	14f70663          	beq	a4,a5,8000db1c <illegal_except_12+0x290>
    8000d9d4:	0000f517          	auipc	a0,0xf
    8000d9d8:	5ec50513          	add	a0,a0,1516 # 8001cfc0 <__func__.1+0x318>
    8000d9dc:	20b0d0ef          	jal	8001b3e6 <printf>
    8000d9e0:	00144783          	lbu	a5,1(s0)
    8000d9e4:	c789                	beqz	a5,8000d9ee <illegal_except_12+0x162>
    8000d9e6:	6418                	ld	a4,8(s0)
    8000d9e8:	4789                	li	a5,2
    8000d9ea:	00f70c63          	beq	a4,a5,8000da02 <illegal_except_12+0x176>
    8000d9ee:	0000f517          	auipc	a0,0xf
    8000d9f2:	5da50513          	add	a0,a0,1498 # 8001cfc8 <__func__.1+0x320>
    8000d9f6:	1f10d0ef          	jal	8001b3e6 <printf>
    8000d9fa:	02900513          	li	a0,41
    8000d9fe:	0bb0c0ef          	jal	8001a2b8 <putchar>
    8000da02:	4529                	li	a0,10
    8000da04:	0b50c0ef          	jal	8001a2b8 <putchar>
    8000da08:	c491                	beqz	s1,8000da14 <illegal_except_12+0x188>
    8000da0a:	00144783          	lbu	a5,1(s0)
    8000da0e:	4481                	li	s1,0
    8000da10:	0e079763          	bnez	a5,8000dafe <illegal_except_12+0x272>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    8000da14:	0ff0000f          	fence
    8000da18:	4905                	li	s2,1
    8000da1a:	01241023          	sh	s2,0(s0)
    8000da1e:	0002f797          	auipc	a5,0x2f
    8000da22:	6207b523          	sd	zero,1578(a5) # 8003d048 <excpt+0x38>
    8000da26:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000da2a:	4511                	li	a0,4
    8000da2c:	8b2f30ef          	jal	80000ade <goto_priv>
    reset_state();
    8000da30:	8f7f30ef          	jal	80001326 <reset_state>
    goto_priv(PRIV_HU);
    8000da34:	4505                	li	a0,1
    8000da36:	8a8f30ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    8000da3a:	0ff0000f          	fence
    8000da3e:	0002f797          	auipc	a5,0x2f
    8000da42:	6007b523          	sd	zero,1546(a5) # 8003d048 <excpt+0x38>
    8000da46:	01241023          	sh	s2,0(s0)
    8000da4a:	0ff0000f          	fence
    asm volatile(
    8000da4e:	26000073          	.4byte	0x26000073
    hinval_vvma();
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    8000da52:	08200593          	li	a1,130
    8000da56:	00012617          	auipc	a2,0x12
    8000da5a:	1ea60613          	add	a2,a2,490 # 8001fc40 <__func__.1+0x2f98>
    8000da5e:	0000f517          	auipc	a0,0xf
    8000da62:	54a50513          	add	a0,a0,1354 # 8001cfa8 <__func__.1+0x300>
    8000da66:	1810d0ef          	jal	8001b3e6 <printf>
    8000da6a:	00144783          	lbu	a5,1(s0)
    8000da6e:	0000f597          	auipc	a1,0xf
    8000da72:	51258593          	add	a1,a1,1298 # 8001cf80 <__func__.1+0x2d8>
    8000da76:	c789                	beqz	a5,8000da80 <illegal_except_12+0x1f4>
    8000da78:	6418                	ld	a4,8(s0)
    8000da7a:	4789                	li	a5,2
    8000da7c:	08f70663          	beq	a4,a5,8000db08 <illegal_except_12+0x27c>
    8000da80:	0000f517          	auipc	a0,0xf
    8000da84:	54050513          	add	a0,a0,1344 # 8001cfc0 <__func__.1+0x318>
    8000da88:	15f0d0ef          	jal	8001b3e6 <printf>
    8000da8c:	00144783          	lbu	a5,1(s0)
    8000da90:	c789                	beqz	a5,8000da9a <illegal_except_12+0x20e>
    8000da92:	6418                	ld	a4,8(s0)
    8000da94:	4789                	li	a5,2
    8000da96:	00f70c63          	beq	a4,a5,8000daae <illegal_except_12+0x222>
    8000da9a:	0000f517          	auipc	a0,0xf
    8000da9e:	52e50513          	add	a0,a0,1326 # 8001cfc8 <__func__.1+0x320>
    8000daa2:	1450d0ef          	jal	8001b3e6 <printf>
    8000daa6:	02900513          	li	a0,41
    8000daaa:	00f0c0ef          	jal	8001a2b8 <putchar>
    8000daae:	4529                	li	a0,10
    8000dab0:	0090c0ef          	jal	8001a2b8 <putchar>
    8000dab4:	cc9d                	beqz	s1,8000daf2 <illegal_except_12+0x266>
    8000dab6:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000daba:	0000f597          	auipc	a1,0xf
    8000dabe:	4c658593          	add	a1,a1,1222 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    8000dac2:	c491                	beqz	s1,8000dace <illegal_except_12+0x242>
    8000dac4:	6418                	ld	a4,8(s0)
    8000dac6:	4789                	li	a5,2
    8000dac8:	04f70f63          	beq	a4,a5,8000db26 <illegal_except_12+0x29a>
    8000dacc:	4481                	li	s1,0
    TEST_END();
    8000dace:	0000f517          	auipc	a0,0xf
    8000dad2:	55a50513          	add	a0,a0,1370 # 8001d028 <__func__.1+0x380>
    8000dad6:	1110d0ef          	jal	8001b3e6 <printf>
    8000dada:	4511                	li	a0,4
    8000dadc:	802f30ef          	jal	80000ade <goto_priv>
    8000dae0:	847f30ef          	jal	80001326 <reset_state>
}
    8000dae4:	60e2                	ld	ra,24(sp)
    8000dae6:	6442                	ld	s0,16(sp)
    8000dae8:	6902                	ld	s2,0(sp)
    8000daea:	8526                	mv	a0,s1
    8000daec:	64a2                	ld	s1,8(sp)
    8000daee:	6105                	add	sp,sp,32
    8000daf0:	8082                	ret
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    8000daf2:	4481                	li	s1,0
    TEST_END();
    8000daf4:	0000f597          	auipc	a1,0xf
    8000daf8:	48c58593          	add	a1,a1,1164 # 8001cf80 <__func__.1+0x2d8>
    8000dafc:	bfc9                	j	8000dace <illegal_except_12+0x242>
    TEST_ASSERT("hu mode hinval.gvma cause to illegal instruction interrupt",
    8000dafe:	6404                	ld	s1,8(s0)
    8000db00:	14f9                	add	s1,s1,-2
    8000db02:	0014b493          	seqz	s1,s1
    8000db06:	b739                	j	8000da14 <illegal_except_12+0x188>
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    8000db08:	0000f597          	auipc	a1,0xf
    8000db0c:	46858593          	add	a1,a1,1128 # 8001cf70 <__func__.1+0x2c8>
    8000db10:	bf85                	j	8000da80 <illegal_except_12+0x1f4>
    TEST_ASSERT("hu mode sinval.vma cause to illegal instruction interrupt",
    8000db12:	0000f597          	auipc	a1,0xf
    8000db16:	45e58593          	add	a1,a1,1118 # 8001cf70 <__func__.1+0x2c8>
    8000db1a:	b529                	j	8000d924 <illegal_except_12+0x98>
    TEST_ASSERT("hu mode hinval.gvma cause to illegal instruction interrupt",
    8000db1c:	0000f597          	auipc	a1,0xf
    8000db20:	45458593          	add	a1,a1,1108 # 8001cf70 <__func__.1+0x2c8>
    8000db24:	bd45                	j	8000d9d4 <illegal_except_12+0x148>
    TEST_END();
    8000db26:	0000f597          	auipc	a1,0xf
    8000db2a:	44a58593          	add	a1,a1,1098 # 8001cf70 <__func__.1+0x2c8>
    8000db2e:	b745                	j	8000dace <illegal_except_12+0x242>

000000008000db30 <illegal_except_13>:


bool illegal_except_13() {
    8000db30:	1101                	add	sp,sp,-32

    TEST_START();
    8000db32:	0000e597          	auipc	a1,0xe
    8000db36:	5a658593          	add	a1,a1,1446 # 8001c0d8 <__func__.1>
    8000db3a:	0000f517          	auipc	a0,0xf
    8000db3e:	45650513          	add	a0,a0,1110 # 8001cf90 <__func__.1+0x2e8>
bool illegal_except_13() {
    8000db42:	ec06                	sd	ra,24(sp)
    8000db44:	e822                	sd	s0,16(sp)
    8000db46:	e426                	sd	s1,8(sp)
    TEST_START();
    8000db48:	09f0d0ef          	jal	8001b3e6 <printf>
    8000db4c:	4529                	li	a0,10
    8000db4e:	76a0c0ef          	jal	8001a2b8 <putchar>
    //satp.MODE只读0，执行sfence.vma
    TEST_SETUP_EXCEPT();
    8000db52:	0ff0000f          	fence
    8000db56:	4785                	li	a5,1
    8000db58:	0002f417          	auipc	s0,0x2f
    8000db5c:	4b840413          	add	s0,s0,1208 # 8003d010 <excpt>
    8000db60:	00f41023          	sh	a5,0(s0)
    8000db64:	0002f797          	auipc	a5,0x2f
    8000db68:	4e07b223          	sd	zero,1252(a5) # 8003d048 <excpt+0x38>
    8000db6c:	0ff0000f          	fence

    goto_priv(PRIV_HS);
    8000db70:	450d                	li	a0,3
    8000db72:	f6df20ef          	jal	80000ade <goto_priv>
    CSRW(CSR_SATP,0ULL);
    8000db76:	18005073          	csrw	satp,0
    asm volatile(
    8000db7a:	12000073          	sfence.vma
    sfence_vma();
    printf("%d",excpt.triggered);
    8000db7e:	00144583          	lbu	a1,1(s0)
    8000db82:	00012517          	auipc	a0,0x12
    8000db86:	0fe50513          	add	a0,a0,254 # 8001fc80 <__func__.1+0x2fd8>
    8000db8a:	05d0d0ef          	jal	8001b3e6 <printf>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    8000db8e:	08200593          	li	a1,130
    8000db92:	00012617          	auipc	a2,0x12
    8000db96:	0f660613          	add	a2,a2,246 # 8001fc88 <__func__.1+0x2fe0>
    8000db9a:	0000f517          	auipc	a0,0xf
    8000db9e:	40e50513          	add	a0,a0,1038 # 8001cfa8 <__func__.1+0x300>
    8000dba2:	0450d0ef          	jal	8001b3e6 <printf>
    8000dba6:	00144783          	lbu	a5,1(s0)
    8000dbaa:	0000f597          	auipc	a1,0xf
    8000dbae:	3d658593          	add	a1,a1,982 # 8001cf80 <__func__.1+0x2d8>
    8000dbb2:	c789                	beqz	a5,8000dbbc <illegal_except_13+0x8c>
    8000dbb4:	6418                	ld	a4,8(s0)
    8000dbb6:	4789                	li	a5,2
    8000dbb8:	06f70e63          	beq	a4,a5,8000dc34 <illegal_except_13+0x104>
    8000dbbc:	0000f517          	auipc	a0,0xf
    8000dbc0:	40450513          	add	a0,a0,1028 # 8001cfc0 <__func__.1+0x318>
    8000dbc4:	0230d0ef          	jal	8001b3e6 <printf>
    8000dbc8:	00144783          	lbu	a5,1(s0)
    8000dbcc:	c789                	beqz	a5,8000dbd6 <illegal_except_13+0xa6>
    8000dbce:	6418                	ld	a4,8(s0)
    8000dbd0:	4789                	li	a5,2
    8000dbd2:	00f70c63          	beq	a4,a5,8000dbea <illegal_except_13+0xba>
    8000dbd6:	0000f517          	auipc	a0,0xf
    8000dbda:	3f250513          	add	a0,a0,1010 # 8001cfc8 <__func__.1+0x320>
    8000dbde:	0090d0ef          	jal	8001b3e6 <printf>
    8000dbe2:	02900513          	li	a0,41
    8000dbe6:	6d20c0ef          	jal	8001a2b8 <putchar>
    8000dbea:	4529                	li	a0,10
    8000dbec:	6cc0c0ef          	jal	8001a2b8 <putchar>
    8000dbf0:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000dbf4:	0000f597          	auipc	a1,0xf
    8000dbf8:	38c58593          	add	a1,a1,908 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    8000dbfc:	c491                	beqz	s1,8000dc08 <illegal_except_13+0xd8>
    8000dbfe:	6418                	ld	a4,8(s0)
    8000dc00:	4789                	li	a5,2
    8000dc02:	02f70463          	beq	a4,a5,8000dc2a <illegal_except_13+0xfa>
    8000dc06:	4481                	li	s1,0
    TEST_END();
    8000dc08:	0000f517          	auipc	a0,0xf
    8000dc0c:	42050513          	add	a0,a0,1056 # 8001d028 <__func__.1+0x380>
    8000dc10:	7d60d0ef          	jal	8001b3e6 <printf>
    8000dc14:	4511                	li	a0,4
    8000dc16:	ec9f20ef          	jal	80000ade <goto_priv>
    8000dc1a:	f0cf30ef          	jal	80001326 <reset_state>
}
    8000dc1e:	60e2                	ld	ra,24(sp)
    8000dc20:	6442                	ld	s0,16(sp)
    8000dc22:	8526                	mv	a0,s1
    8000dc24:	64a2                	ld	s1,8(sp)
    8000dc26:	6105                	add	sp,sp,32
    8000dc28:	8082                	ret
    TEST_END();
    8000dc2a:	0000f597          	auipc	a1,0xf
    8000dc2e:	34658593          	add	a1,a1,838 # 8001cf70 <__func__.1+0x2c8>
    8000dc32:	bfd9                	j	8000dc08 <illegal_except_13+0xd8>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    8000dc34:	0000f597          	auipc	a1,0xf
    8000dc38:	33c58593          	add	a1,a1,828 # 8001cf70 <__func__.1+0x2c8>
    8000dc3c:	b741                	j	8000dbbc <illegal_except_13+0x8c>

000000008000dc3e <illegal_except_14>:
    //扩展FS的状态设置为0时，尝试读取或者写入浮点对应的状态指令
    //扩展VS的状态设置为0时，尝试读取或者写入向量对应的状态指令
    //扩展XS的状态设置为0时，尝试读取或者写入其他扩展对应的状态指令
    //设置HU=0时，在U模式执行超级虚拟机指令

bool illegal_except_14() {
    8000dc3e:	1101                	add	sp,sp,-32

    TEST_START();
    8000dc40:	0000e597          	auipc	a1,0xe
    8000dc44:	4b058593          	add	a1,a1,1200 # 8001c0f0 <__func__.0>
    8000dc48:	0000f517          	auipc	a0,0xf
    8000dc4c:	34850513          	add	a0,a0,840 # 8001cf90 <__func__.1+0x2e8>
bool illegal_except_14() {
    8000dc50:	ec06                	sd	ra,24(sp)
    8000dc52:	e822                	sd	s0,16(sp)
    8000dc54:	e426                	sd	s1,8(sp)
    TEST_START();
    8000dc56:	7900d0ef          	jal	8001b3e6 <printf>
    8000dc5a:	4529                	li	a0,10
    8000dc5c:	65c0c0ef          	jal	8001a2b8 <putchar>
    //mstatus.TSR=1时，执行sret指令
    TEST_SETUP_EXCEPT();
    8000dc60:	0ff0000f          	fence
    8000dc64:	4785                	li	a5,1
    8000dc66:	0002f417          	auipc	s0,0x2f
    8000dc6a:	3aa40413          	add	s0,s0,938 # 8003d010 <excpt>
    8000dc6e:	00f41023          	sh	a5,0(s0)
    8000dc72:	0002f797          	auipc	a5,0x2f
    8000dc76:	3c07bb23          	sd	zero,982(a5) # 8003d048 <excpt+0x38>
    8000dc7a:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000dc7e:	4511                	li	a0,4
    8000dc80:	e5ff20ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 22);    //TSR位
    8000dc84:	004007b7          	lui	a5,0x400
    8000dc88:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    8000dc8c:	450d                	li	a0,3
    8000dc8e:	e51f20ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VU);
    8000dc92:	4501                	li	a0,0
    8000dc94:	d6ff20ef          	jal	80000a02 <set_prev_priv>
    asm volatile(
    8000dc98:	10200073          	sret

    //TEST_EXEC_SRET();
    sret();

    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8000dc9c:	08200593          	li	a1,130
    8000dca0:	00012617          	auipc	a2,0x12
    8000dca4:	03860613          	add	a2,a2,56 # 8001fcd8 <__func__.1+0x3030>
    8000dca8:	0000f517          	auipc	a0,0xf
    8000dcac:	30050513          	add	a0,a0,768 # 8001cfa8 <__func__.1+0x300>
    8000dcb0:	7360d0ef          	jal	8001b3e6 <printf>
    8000dcb4:	00144783          	lbu	a5,1(s0)
    8000dcb8:	0000f597          	auipc	a1,0xf
    8000dcbc:	2c858593          	add	a1,a1,712 # 8001cf80 <__func__.1+0x2d8>
    8000dcc0:	c789                	beqz	a5,8000dcca <illegal_except_14+0x8c>
    8000dcc2:	6418                	ld	a4,8(s0)
    8000dcc4:	4789                	li	a5,2
    8000dcc6:	06f70e63          	beq	a4,a5,8000dd42 <illegal_except_14+0x104>
    8000dcca:	0000f517          	auipc	a0,0xf
    8000dcce:	2f650513          	add	a0,a0,758 # 8001cfc0 <__func__.1+0x318>
    8000dcd2:	7140d0ef          	jal	8001b3e6 <printf>
    8000dcd6:	00144783          	lbu	a5,1(s0)
    8000dcda:	c789                	beqz	a5,8000dce4 <illegal_except_14+0xa6>
    8000dcdc:	6418                	ld	a4,8(s0)
    8000dcde:	4789                	li	a5,2
    8000dce0:	00f70c63          	beq	a4,a5,8000dcf8 <illegal_except_14+0xba>
    8000dce4:	0000f517          	auipc	a0,0xf
    8000dce8:	2e450513          	add	a0,a0,740 # 8001cfc8 <__func__.1+0x320>
    8000dcec:	6fa0d0ef          	jal	8001b3e6 <printf>
    8000dcf0:	02900513          	li	a0,41
    8000dcf4:	5c40c0ef          	jal	8001a2b8 <putchar>
    8000dcf8:	4529                	li	a0,10
    8000dcfa:	5be0c0ef          	jal	8001a2b8 <putchar>
    8000dcfe:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8000dd02:	0000f597          	auipc	a1,0xf
    8000dd06:	27e58593          	add	a1,a1,638 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8000dd0a:	c491                	beqz	s1,8000dd16 <illegal_except_14+0xd8>
    8000dd0c:	6418                	ld	a4,8(s0)
    8000dd0e:	4789                	li	a5,2
    8000dd10:	02f70463          	beq	a4,a5,8000dd38 <illegal_except_14+0xfa>
    8000dd14:	4481                	li	s1,0
    TEST_END();
    8000dd16:	0000f517          	auipc	a0,0xf
    8000dd1a:	31250513          	add	a0,a0,786 # 8001d028 <__func__.1+0x380>
    8000dd1e:	6c80d0ef          	jal	8001b3e6 <printf>
    8000dd22:	4511                	li	a0,4
    8000dd24:	dbbf20ef          	jal	80000ade <goto_priv>
    8000dd28:	dfef30ef          	jal	80001326 <reset_state>

}
    8000dd2c:	60e2                	ld	ra,24(sp)
    8000dd2e:	6442                	ld	s0,16(sp)
    8000dd30:	8526                	mv	a0,s1
    8000dd32:	64a2                	ld	s1,8(sp)
    8000dd34:	6105                	add	sp,sp,32
    8000dd36:	8082                	ret
    TEST_END();
    8000dd38:	0000f597          	auipc	a1,0xf
    8000dd3c:	23858593          	add	a1,a1,568 # 8001cf70 <__func__.1+0x2c8>
    8000dd40:	bfd9                	j	8000dd16 <illegal_except_14+0xd8>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8000dd42:	0000f597          	auipc	a1,0xf
    8000dd46:	22e58593          	add	a1,a1,558 # 8001cf70 <__func__.1+0x2c8>
    8000dd4a:	b741                	j	8000dcca <illegal_except_14+0x8c>

000000008000dd4c <external_interrupt_MEI>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool external_interrupt_MEI() {
    8000dd4c:	1101                	add	sp,sp,-32

    TEST_START();
    8000dd4e:	0000e597          	auipc	a1,0xe
    8000dd52:	3ba58593          	add	a1,a1,954 # 8001c108 <__func__.2>
    8000dd56:	0000f517          	auipc	a0,0xf
    8000dd5a:	23a50513          	add	a0,a0,570 # 8001cf90 <__func__.1+0x2e8>
bool external_interrupt_MEI() {
    8000dd5e:	ec06                	sd	ra,24(sp)
    8000dd60:	e822                	sd	s0,16(sp)
    8000dd62:	e426                	sd	s1,8(sp)
    8000dd64:	e04a                	sd	s2,0(sp)
    TEST_START();
    8000dd66:	6800d0ef          	jal	8001b3e6 <printf>
    8000dd6a:	4529                	li	a0,10
    8000dd6c:	54c0c0ef          	jal	8001a2b8 <putchar>

    TEST_SETUP_EXCEPT();
    8000dd70:	0ff0000f          	fence
    8000dd74:	4785                	li	a5,1
    8000dd76:	0002f417          	auipc	s0,0x2f
    8000dd7a:	29a40413          	add	s0,s0,666 # 8003d010 <excpt>
    8000dd7e:	00f41023          	sh	a5,0(s0)
    8000dd82:	0002f797          	auipc	a5,0x2f
    8000dd86:	2c07b323          	sd	zero,710(a5) # 8003d048 <excpt+0x38>
    8000dd8a:	0ff0000f          	fence

   
    //M模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    goto_priv(PRIV_M);
    8000dd8e:	4511                	li	a0,4
    8000dd90:	d4ff20ef          	jal	80000ade <goto_priv>
    CSRW(CSR_MIDELEG,0);
    8000dd94:	30305073          	csrw	mideleg,0
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    8000dd98:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);         
    8000dd9c:	6785                	lui	a5,0x1
    8000dd9e:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000dda2:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);     //p33 read-only  is set and cleared by a platform-specific interrupt controller
    8000dda6:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    8000ddaa:	4511                	li	a0,4
    8000ddac:	d33f20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    8000ddb0:	08200593          	li	a1,130
    8000ddb4:	00012617          	auipc	a2,0x12
    8000ddb8:	f5460613          	add	a2,a2,-172 # 8001fd08 <__func__.1+0x3060>
    8000ddbc:	0000f517          	auipc	a0,0xf
    8000ddc0:	1ec50513          	add	a0,a0,492 # 8001cfa8 <__func__.1+0x300>
    8000ddc4:	6220d0ef          	jal	8001b3e6 <printf>
    8000ddc8:	00144783          	lbu	a5,1(s0)
    8000ddcc:	0000f597          	auipc	a1,0xf
    8000ddd0:	1b458593          	add	a1,a1,436 # 8001cf80 <__func__.1+0x2d8>
    8000ddd4:	c799                	beqz	a5,8000dde2 <external_interrupt_MEI+0x96>
    8000ddd6:	57fd                	li	a5,-1
    8000ddd8:	6418                	ld	a4,8(s0)
    8000ddda:	17fe                	sll	a5,a5,0x3f
    8000dddc:	07ad                	add	a5,a5,11
    8000ddde:	30f70be3          	beq	a4,a5,8000e8f4 <external_interrupt_MEI+0xba8>
    8000dde2:	0000f517          	auipc	a0,0xf
    8000dde6:	1de50513          	add	a0,a0,478 # 8001cfc0 <__func__.1+0x318>
    8000ddea:	5fc0d0ef          	jal	8001b3e6 <printf>
    8000ddee:	00144783          	lbu	a5,1(s0)
    8000ddf2:	c799                	beqz	a5,8000de00 <external_interrupt_MEI+0xb4>
    8000ddf4:	57fd                	li	a5,-1
    8000ddf6:	6418                	ld	a4,8(s0)
    8000ddf8:	17fe                	sll	a5,a5,0x3f
    8000ddfa:	07ad                	add	a5,a5,11
    8000ddfc:	00f70c63          	beq	a4,a5,8000de14 <external_interrupt_MEI+0xc8>
    8000de00:	0000f517          	auipc	a0,0xf
    8000de04:	1c850513          	add	a0,a0,456 # 8001cfc8 <__func__.1+0x320>
    8000de08:	5de0d0ef          	jal	8001b3e6 <printf>
    8000de0c:	02900513          	li	a0,41
    8000de10:	4a80c0ef          	jal	8001a2b8 <putchar>
    8000de14:	4529                	li	a0,10
    8000de16:	4a20c0ef          	jal	8001a2b8 <putchar>
    8000de1a:	00144783          	lbu	a5,1(s0)
    8000de1e:	4481                	li	s1,0
    8000de20:	c799                	beqz	a5,8000de2e <external_interrupt_MEI+0xe2>
    8000de22:	6404                	ld	s1,8(s0)
    8000de24:	57ad                	li	a5,-21
    8000de26:	8385                	srl	a5,a5,0x1
    8000de28:	94be                	add	s1,s1,a5
    8000de2a:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_MEI
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0
    TEST_SETUP_EXCEPT();
    8000de2e:	0ff0000f          	fence
    8000de32:	4785                	li	a5,1
    8000de34:	00f41023          	sh	a5,0(s0)
    8000de38:	0002f797          	auipc	a5,0x2f
    8000de3c:	2007b823          	sd	zero,528(a5) # 8003d048 <excpt+0x38>
    8000de40:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000de44:	4511                	li	a0,4
    8000de46:	c99f20ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000de4a:	30046073          	csrs	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    8000de4e:	6785                	lui	a5,0x1
    8000de50:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000de54:	3047b073          	csrc	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    8000de58:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    8000de5c:	4511                	li	a0,4
    8000de5e:	c81f20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt pending when mstatus.mie=1 and mip.meip=1 and mie.meie=0",
    8000de62:	08200593          	li	a1,130
    8000de66:	00012617          	auipc	a2,0x12
    8000de6a:	f0260613          	add	a2,a2,-254 # 8001fd68 <__func__.1+0x30c0>
    8000de6e:	0000f517          	auipc	a0,0xf
    8000de72:	13a50513          	add	a0,a0,314 # 8001cfa8 <__func__.1+0x300>
    8000de76:	5700d0ef          	jal	8001b3e6 <printf>
    8000de7a:	00144783          	lbu	a5,1(s0)
    8000de7e:	0000f597          	auipc	a1,0xf
    8000de82:	10258593          	add	a1,a1,258 # 8001cf80 <__func__.1+0x2d8>
    8000de86:	e789                	bnez	a5,8000de90 <external_interrupt_MEI+0x144>
    8000de88:	0000f597          	auipc	a1,0xf
    8000de8c:	0e858593          	add	a1,a1,232 # 8001cf70 <__func__.1+0x2c8>
    8000de90:	0000f517          	auipc	a0,0xf
    8000de94:	13050513          	add	a0,a0,304 # 8001cfc0 <__func__.1+0x318>
    8000de98:	54e0d0ef          	jal	8001b3e6 <printf>
    8000de9c:	00144783          	lbu	a5,1(s0)
    8000dea0:	1a0790e3          	bnez	a5,8000e840 <external_interrupt_MEI+0xaf4>
    8000dea4:	4529                	li	a0,10
    8000dea6:	4120c0ef          	jal	8001a2b8 <putchar>
    8000deaa:	c489                	beqz	s1,8000deb4 <external_interrupt_MEI+0x168>
    8000deac:	00144483          	lbu	s1,1(s0)
    8000deb0:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1
    TEST_SETUP_EXCEPT();
    8000deb4:	0ff0000f          	fence
    8000deb8:	4785                	li	a5,1
    8000deba:	00f41023          	sh	a5,0(s0)
    8000debe:	0002f797          	auipc	a5,0x2f
    8000dec2:	1807b523          	sd	zero,394(a5) # 8003d048 <excpt+0x38>
    8000dec6:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000deca:	4511                	li	a0,4
    8000decc:	c13f20ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000ded0:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000ded4:	6785                	lui	a5,0x1
    8000ded6:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000deda:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    8000dede:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    8000dee2:	4511                	li	a0,4
    8000dee4:	bfbf20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1",
    8000dee8:	08200593          	li	a1,130
    8000deec:	00012617          	auipc	a2,0x12
    8000def0:	ed460613          	add	a2,a2,-300 # 8001fdc0 <__func__.1+0x3118>
    8000def4:	0000f517          	auipc	a0,0xf
    8000def8:	0b450513          	add	a0,a0,180 # 8001cfa8 <__func__.1+0x300>
    8000defc:	4ea0d0ef          	jal	8001b3e6 <printf>
    8000df00:	00144783          	lbu	a5,1(s0)
    8000df04:	0000f597          	auipc	a1,0xf
    8000df08:	07c58593          	add	a1,a1,124 # 8001cf80 <__func__.1+0x2d8>
    8000df0c:	c799                	beqz	a5,8000df1a <external_interrupt_MEI+0x1ce>
    8000df0e:	57fd                	li	a5,-1
    8000df10:	6418                	ld	a4,8(s0)
    8000df12:	17fe                	sll	a5,a5,0x3f
    8000df14:	07ad                	add	a5,a5,11
    8000df16:	1ef705e3          	beq	a4,a5,8000e900 <external_interrupt_MEI+0xbb4>
    8000df1a:	0000f517          	auipc	a0,0xf
    8000df1e:	0a650513          	add	a0,a0,166 # 8001cfc0 <__func__.1+0x318>
    8000df22:	4c40d0ef          	jal	8001b3e6 <printf>
    8000df26:	00144783          	lbu	a5,1(s0)
    8000df2a:	c799                	beqz	a5,8000df38 <external_interrupt_MEI+0x1ec>
    8000df2c:	57fd                	li	a5,-1
    8000df2e:	6418                	ld	a4,8(s0)
    8000df30:	17fe                	sll	a5,a5,0x3f
    8000df32:	07ad                	add	a5,a5,11
    8000df34:	00f70c63          	beq	a4,a5,8000df4c <external_interrupt_MEI+0x200>
    8000df38:	0000f517          	auipc	a0,0xf
    8000df3c:	09050513          	add	a0,a0,144 # 8001cfc8 <__func__.1+0x320>
    8000df40:	4a60d0ef          	jal	8001b3e6 <printf>
    8000df44:	02900513          	li	a0,41
    8000df48:	3700c0ef          	jal	8001a2b8 <putchar>
    8000df4c:	4529                	li	a0,10
    8000df4e:	36a0c0ef          	jal	8001a2b8 <putchar>
    8000df52:	c491                	beqz	s1,8000df5e <external_interrupt_MEI+0x212>
    8000df54:	00144783          	lbu	a5,1(s0)
    8000df58:	4481                	li	s1,0
    8000df5a:	0a0796e3          	bnez	a5,8000e806 <external_interrupt_MEI+0xaba>
        excpt.triggered == true &&
        excpt.cause == CAUSE_MEI
    ); 
    
    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=1，mie.MIE=1
    TEST_SETUP_EXCEPT();
    8000df5e:	0ff0000f          	fence
    8000df62:	4785                	li	a5,1
    8000df64:	00f41023          	sh	a5,0(s0)
    8000df68:	0002f797          	auipc	a5,0x2f
    8000df6c:	0e07b023          	sd	zero,224(a5) # 8003d048 <excpt+0x38>
    8000df70:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000df74:	4511                	li	a0,4
    8000df76:	b69f20ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    8000df7a:	30047073          	csrc	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000df7e:	6785                	lui	a5,0x1
    8000df80:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000df84:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    8000df88:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    8000df8c:	4511                	li	a0,4
    8000df8e:	b51f20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=1",
    8000df92:	08200593          	li	a1,130
    8000df96:	00012617          	auipc	a2,0x12
    8000df9a:	e8a60613          	add	a2,a2,-374 # 8001fe20 <__func__.1+0x3178>
    8000df9e:	0000f517          	auipc	a0,0xf
    8000dfa2:	00a50513          	add	a0,a0,10 # 8001cfa8 <__func__.1+0x300>
    8000dfa6:	4400d0ef          	jal	8001b3e6 <printf>
    8000dfaa:	00144783          	lbu	a5,1(s0)
    8000dfae:	0000f597          	auipc	a1,0xf
    8000dfb2:	fd258593          	add	a1,a1,-46 # 8001cf80 <__func__.1+0x2d8>
    8000dfb6:	e789                	bnez	a5,8000dfc0 <external_interrupt_MEI+0x274>
    8000dfb8:	0000f597          	auipc	a1,0xf
    8000dfbc:	fb858593          	add	a1,a1,-72 # 8001cf70 <__func__.1+0x2c8>
    8000dfc0:	0000f517          	auipc	a0,0xf
    8000dfc4:	00050513          	mv	a0,a0
    8000dfc8:	41e0d0ef          	jal	8001b3e6 <printf>
    8000dfcc:	00144783          	lbu	a5,1(s0)
    8000dfd0:	0e079de3          	bnez	a5,8000e8ca <external_interrupt_MEI+0xb7e>
    8000dfd4:	4529                	li	a0,10
    8000dfd6:	2e20c0ef          	jal	8001a2b8 <putchar>
    8000dfda:	c489                	beqz	s1,8000dfe4 <external_interrupt_MEI+0x298>
    8000dfdc:	00144483          	lbu	s1,1(s0)
    8000dfe0:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=1，mie.MIE=0
    TEST_SETUP_EXCEPT();
    8000dfe4:	0ff0000f          	fence
    8000dfe8:	4785                	li	a5,1
    8000dfea:	00f41023          	sh	a5,0(s0)
    8000dfee:	0002f797          	auipc	a5,0x2f
    8000dff2:	0407bd23          	sd	zero,90(a5) # 8003d048 <excpt+0x38>
    8000dff6:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000dffa:	4511                	li	a0,4
    8000dffc:	ae3f20ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3)     
    8000e000:	30047073          	csrc	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000e004:	6785                	lui	a5,0x1
    8000e006:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000e00a:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    8000e00e:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    8000e012:	4511                	li	a0,4
    8000e014:	acbf20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=0",
    8000e018:	08200593          	li	a1,130
    8000e01c:	00012617          	auipc	a2,0x12
    8000e020:	e5c60613          	add	a2,a2,-420 # 8001fe78 <__func__.1+0x31d0>
    8000e024:	0000f517          	auipc	a0,0xf
    8000e028:	f8450513          	add	a0,a0,-124 # 8001cfa8 <__func__.1+0x300>
    8000e02c:	3ba0d0ef          	jal	8001b3e6 <printf>
    8000e030:	00144783          	lbu	a5,1(s0)
    8000e034:	0000f597          	auipc	a1,0xf
    8000e038:	f4c58593          	add	a1,a1,-180 # 8001cf80 <__func__.1+0x2d8>
    8000e03c:	e789                	bnez	a5,8000e046 <external_interrupt_MEI+0x2fa>
    8000e03e:	0000f597          	auipc	a1,0xf
    8000e042:	f3258593          	add	a1,a1,-206 # 8001cf70 <__func__.1+0x2c8>
    8000e046:	0000f517          	auipc	a0,0xf
    8000e04a:	f7a50513          	add	a0,a0,-134 # 8001cfc0 <__func__.1+0x318>
    8000e04e:	3980d0ef          	jal	8001b3e6 <printf>
    8000e052:	00144783          	lbu	a5,1(s0)
    8000e056:	04079ee3          	bnez	a5,8000e8b2 <external_interrupt_MEI+0xb66>
    8000e05a:	4529                	li	a0,10
    8000e05c:	25c0c0ef          	jal	8001a2b8 <putchar>
    8000e060:	c489                	beqz	s1,8000e06a <external_interrupt_MEI+0x31e>
    8000e062:	00144483          	lbu	s1,1(s0)
    8000e066:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 
    
    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=0，mie.MIE=0
    TEST_SETUP_EXCEPT();
    8000e06a:	0ff0000f          	fence
    8000e06e:	4785                	li	a5,1
    8000e070:	00f41023          	sh	a5,0(s0)
    8000e074:	0002f797          	auipc	a5,0x2f
    8000e078:	fc07ba23          	sd	zero,-44(a5) # 8003d048 <excpt+0x38>
    8000e07c:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000e080:	4511                	li	a0,4
    8000e082:	a5df20ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3)     
    8000e086:	30047073          	csrc	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    8000e08a:	6785                	lui	a5,0x1
    8000e08c:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000e090:	3047b073          	csrc	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    8000e094:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    8000e098:	4511                	li	a0,4
    8000e09a:	a45f20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=0",
    8000e09e:	08200593          	li	a1,130
    8000e0a2:	00012617          	auipc	a2,0x12
    8000e0a6:	e2e60613          	add	a2,a2,-466 # 8001fed0 <__func__.1+0x3228>
    8000e0aa:	0000f517          	auipc	a0,0xf
    8000e0ae:	efe50513          	add	a0,a0,-258 # 8001cfa8 <__func__.1+0x300>
    8000e0b2:	3340d0ef          	jal	8001b3e6 <printf>
    8000e0b6:	00144783          	lbu	a5,1(s0)
    8000e0ba:	0000f597          	auipc	a1,0xf
    8000e0be:	ec658593          	add	a1,a1,-314 # 8001cf80 <__func__.1+0x2d8>
    8000e0c2:	e789                	bnez	a5,8000e0cc <external_interrupt_MEI+0x380>
    8000e0c4:	0000f597          	auipc	a1,0xf
    8000e0c8:	eac58593          	add	a1,a1,-340 # 8001cf70 <__func__.1+0x2c8>
    8000e0cc:	0000f517          	auipc	a0,0xf
    8000e0d0:	ef450513          	add	a0,a0,-268 # 8001cfc0 <__func__.1+0x318>
    8000e0d4:	3120d0ef          	jal	8001b3e6 <printf>
    8000e0d8:	00144783          	lbu	a5,1(s0)
    8000e0dc:	7a079f63          	bnez	a5,8000e89a <external_interrupt_MEI+0xb4e>
    8000e0e0:	4529                	li	a0,10
    8000e0e2:	1d60c0ef          	jal	8001a2b8 <putchar>
    8000e0e6:	c489                	beqz	s1,8000e0f0 <external_interrupt_MEI+0x3a4>
    8000e0e8:	00144483          	lbu	s1,1(s0)
    8000e0ec:	0014c493          	xor	s1,s1,1

//---------------------------------------------------------
    

    //HS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    TEST_SETUP_EXCEPT();
    8000e0f0:	0ff0000f          	fence
    8000e0f4:	4905                	li	s2,1
    8000e0f6:	01241023          	sh	s2,0(s0)
    8000e0fa:	0002f797          	auipc	a5,0x2f
    8000e0fe:	f407b723          	sd	zero,-178(a5) # 8003d048 <excpt+0x38>
    8000e102:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000e106:	4511                	li	a0,4
    8000e108:	9d7f20ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000e10c:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000e110:	6785                	lui	a5,0x1
    8000e112:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000e116:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    8000e11a:	3447a073          	csrs	mip,a5

    
    goto_priv(PRIV_HS);
    8000e11e:	450d                	li	a0,3
    8000e120:	9bff20ef          	jal	80000ade <goto_priv>

    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    8000e124:	08200593          	li	a1,130
    8000e128:	00012617          	auipc	a2,0x12
    8000e12c:	e0060613          	add	a2,a2,-512 # 8001ff28 <__func__.1+0x3280>
    8000e130:	0000f517          	auipc	a0,0xf
    8000e134:	e7850513          	add	a0,a0,-392 # 8001cfa8 <__func__.1+0x300>
    8000e138:	2ae0d0ef          	jal	8001b3e6 <printf>
    8000e13c:	6018                	ld	a4,0(s0)
    8000e13e:	f00017b7          	lui	a5,0xf0001
    8000e142:	0792                	sll	a5,a5,0x4
    8000e144:	190a                	sll	s2,s2,0x22
    8000e146:	f0078793          	add	a5,a5,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000e14a:	8ff9                	and	a5,a5,a4
    8000e14c:	10090913          	add	s2,s2,256
    8000e150:	0000f597          	auipc	a1,0xf
    8000e154:	e3058593          	add	a1,a1,-464 # 8001cf80 <__func__.1+0x2d8>
    8000e158:	01279663          	bne	a5,s2,8000e164 <external_interrupt_MEI+0x418>
    8000e15c:	0000f597          	auipc	a1,0xf
    8000e160:	e1458593          	add	a1,a1,-492 # 8001cf70 <__func__.1+0x2c8>
    8000e164:	0000f517          	auipc	a0,0xf
    8000e168:	e5c50513          	add	a0,a0,-420 # 8001cfc0 <__func__.1+0x318>
    8000e16c:	27a0d0ef          	jal	8001b3e6 <printf>
    8000e170:	00144783          	lbu	a5,1(s0)
    8000e174:	c789                	beqz	a5,8000e17e <external_interrupt_MEI+0x432>
    8000e176:	4058                	lw	a4,4(s0)
    8000e178:	4791                	li	a5,4
    8000e17a:	00f70c63          	beq	a4,a5,8000e192 <external_interrupt_MEI+0x446>
    8000e17e:	0000f517          	auipc	a0,0xf
    8000e182:	e4a50513          	add	a0,a0,-438 # 8001cfc8 <__func__.1+0x320>
    8000e186:	2600d0ef          	jal	8001b3e6 <printf>
    8000e18a:	02900513          	li	a0,41
    8000e18e:	12a0c0ef          	jal	8001a2b8 <putchar>
    8000e192:	4529                	li	a0,10
    8000e194:	1240c0ef          	jal	8001a2b8 <putchar>
    8000e198:	cc99                	beqz	s1,8000e1b6 <external_interrupt_MEI+0x46a>
    8000e19a:	6004                	ld	s1,0(s0)
    8000e19c:	f0001737          	lui	a4,0xf0001
    8000e1a0:	57fd                	li	a5,-1
    8000e1a2:	0712                	sll	a4,a4,0x4
    8000e1a4:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000e1a8:	178a                	sll	a5,a5,0x22
    8000e1aa:	8cf9                	and	s1,s1,a4
    8000e1ac:	f0078793          	add	a5,a5,-256
    8000e1b0:	94be                	add	s1,s1,a5
    8000e1b2:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高,有hideleg代理
    TEST_SETUP_EXCEPT();
    8000e1b6:	0ff0000f          	fence
    8000e1ba:	4785                	li	a5,1
    8000e1bc:	00f41023          	sh	a5,0(s0)
    8000e1c0:	0002f797          	auipc	a5,0x2f
    8000e1c4:	e807b423          	sd	zero,-376(a5) # 8003d048 <excpt+0x38>
    8000e1c8:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000e1cc:	4511                	li	a0,4
    8000e1ce:	911f20ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000e1d2:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000e1d6:	6785                	lui	a5,0x1
    8000e1d8:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000e1dc:	3047a073          	csrs	mie,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000e1e0:	577d                	li	a4,-1
    8000e1e2:	60371073          	csrw	hideleg,a4
    CSRS(CSR_MIP,MIP_MEIP);
    8000e1e6:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_HS);
    8000e1ea:	450d                	li	a0,3
    8000e1ec:	8f3f20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1 ",
    8000e1f0:	08200593          	li	a1,130
    8000e1f4:	00012617          	auipc	a2,0x12
    8000e1f8:	d8c60613          	add	a2,a2,-628 # 8001ff80 <__func__.1+0x32d8>
    8000e1fc:	0000f517          	auipc	a0,0xf
    8000e200:	dac50513          	add	a0,a0,-596 # 8001cfa8 <__func__.1+0x300>
    8000e204:	1e20d0ef          	jal	8001b3e6 <printf>
    8000e208:	6014                	ld	a3,0(s0)
    8000e20a:	f0001737          	lui	a4,0xf0001
    8000e20e:	478d                	li	a5,3
    8000e210:	0712                	sll	a4,a4,0x4
    8000e212:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000e216:	1782                	sll	a5,a5,0x20
    8000e218:	8f75                	and	a4,a4,a3
    8000e21a:	10078793          	add	a5,a5,256
    8000e21e:	0000f597          	auipc	a1,0xf
    8000e222:	d6258593          	add	a1,a1,-670 # 8001cf80 <__func__.1+0x2d8>
    8000e226:	00f71663          	bne	a4,a5,8000e232 <external_interrupt_MEI+0x4e6>
    8000e22a:	0000f597          	auipc	a1,0xf
    8000e22e:	d4658593          	add	a1,a1,-698 # 8001cf70 <__func__.1+0x2c8>
    8000e232:	0000f517          	auipc	a0,0xf
    8000e236:	d8e50513          	add	a0,a0,-626 # 8001cfc0 <__func__.1+0x318>
    8000e23a:	1ac0d0ef          	jal	8001b3e6 <printf>
    8000e23e:	00144783          	lbu	a5,1(s0)
    8000e242:	c789                	beqz	a5,8000e24c <external_interrupt_MEI+0x500>
    8000e244:	4058                	lw	a4,4(s0)
    8000e246:	478d                	li	a5,3
    8000e248:	00f70c63          	beq	a4,a5,8000e260 <external_interrupt_MEI+0x514>
    8000e24c:	0000f517          	auipc	a0,0xf
    8000e250:	d7c50513          	add	a0,a0,-644 # 8001cfc8 <__func__.1+0x320>
    8000e254:	1920d0ef          	jal	8001b3e6 <printf>
    8000e258:	02900513          	li	a0,41
    8000e25c:	05c0c0ef          	jal	8001a2b8 <putchar>
    8000e260:	4529                	li	a0,10
    8000e262:	0560c0ef          	jal	8001a2b8 <putchar>
    8000e266:	cc99                	beqz	s1,8000e284 <external_interrupt_MEI+0x538>
    8000e268:	6004                	ld	s1,0(s0)
    8000e26a:	f0001737          	lui	a4,0xf0001
    8000e26e:	57f5                	li	a5,-3
    8000e270:	0712                	sll	a4,a4,0x4
    8000e272:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000e276:	1782                	sll	a5,a5,0x20
    8000e278:	8cf9                	and	s1,s1,a4
    8000e27a:	f0078793          	add	a5,a5,-256
    8000e27e:	94be                	add	s1,s1,a5
    8000e280:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0，无代理
    TEST_SETUP_EXCEPT();
    8000e284:	0ff0000f          	fence
    8000e288:	4785                	li	a5,1
    8000e28a:	00f41023          	sh	a5,0(s0)
    8000e28e:	0002f797          	auipc	a5,0x2f
    8000e292:	da07bd23          	sd	zero,-582(a5) # 8003d048 <excpt+0x38>
    8000e296:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000e29a:	4511                	li	a0,4
    8000e29c:	843f20ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000e2a0:	30046073          	csrs	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    8000e2a4:	6785                	lui	a5,0x1
    8000e2a6:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000e2aa:	3047b073          	csrc	mie,a5
    CSRW(CSR_MIDELEG,0);
    8000e2ae:	30305073          	csrw	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000e2b2:	60305073          	csrw	hideleg,0
    CSRS(CSR_MIP,MIP_MEIP);
    8000e2b6:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_HS);
    8000e2ba:	450d                	li	a0,3
    8000e2bc:	823f20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    8000e2c0:	08200593          	li	a1,130
    8000e2c4:	00012617          	auipc	a2,0x12
    8000e2c8:	d1460613          	add	a2,a2,-748 # 8001ffd8 <__func__.1+0x3330>
    8000e2cc:	0000f517          	auipc	a0,0xf
    8000e2d0:	cdc50513          	add	a0,a0,-804 # 8001cfa8 <__func__.1+0x300>
    8000e2d4:	1120d0ef          	jal	8001b3e6 <printf>
    8000e2d8:	00144783          	lbu	a5,1(s0)
    8000e2dc:	0000f597          	auipc	a1,0xf
    8000e2e0:	ca458593          	add	a1,a1,-860 # 8001cf80 <__func__.1+0x2d8>
    8000e2e4:	e789                	bnez	a5,8000e2ee <external_interrupt_MEI+0x5a2>
    8000e2e6:	0000f597          	auipc	a1,0xf
    8000e2ea:	c8a58593          	add	a1,a1,-886 # 8001cf70 <__func__.1+0x2c8>
    8000e2ee:	0000f517          	auipc	a0,0xf
    8000e2f2:	cd250513          	add	a0,a0,-814 # 8001cfc0 <__func__.1+0x318>
    8000e2f6:	0f00d0ef          	jal	8001b3e6 <printf>
    8000e2fa:	00144783          	lbu	a5,1(s0)
    8000e2fe:	58079363          	bnez	a5,8000e884 <external_interrupt_MEI+0xb38>
    8000e302:	4529                	li	a0,10
    8000e304:	7b50b0ef          	jal	8001a2b8 <putchar>
    8000e308:	c489                	beqz	s1,8000e312 <external_interrupt_MEI+0x5c6>
    8000e30a:	00144483          	lbu	s1,1(s0)
    8000e30e:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 


    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1，无代理
    TEST_SETUP_EXCEPT();
    8000e312:	0ff0000f          	fence
    8000e316:	4785                	li	a5,1
    8000e318:	00f41023          	sh	a5,0(s0)
    8000e31c:	0002f797          	auipc	a5,0x2f
    8000e320:	d207b623          	sd	zero,-724(a5) # 8003d048 <excpt+0x38>
    8000e324:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000e328:	4511                	li	a0,4
    8000e32a:	fb4f20ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000e32e:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000e332:	6785                	lui	a5,0x1
    8000e334:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000e338:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    8000e33c:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_HS);
    8000e340:	450d                	li	a0,3
    8000e342:	f9cf20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8000e346:	08200593          	li	a1,130
    8000e34a:	00012617          	auipc	a2,0x12
    8000e34e:	ce660613          	add	a2,a2,-794 # 80020030 <__func__.1+0x3388>
    8000e352:	0000f517          	auipc	a0,0xf
    8000e356:	c5650513          	add	a0,a0,-938 # 8001cfa8 <__func__.1+0x300>
    8000e35a:	08c0d0ef          	jal	8001b3e6 <printf>
    8000e35e:	00144783          	lbu	a5,1(s0)
    8000e362:	0000f597          	auipc	a1,0xf
    8000e366:	c1e58593          	add	a1,a1,-994 # 8001cf80 <__func__.1+0x2d8>
    8000e36a:	c799                	beqz	a5,8000e378 <external_interrupt_MEI+0x62c>
    8000e36c:	57fd                	li	a5,-1
    8000e36e:	6418                	ld	a4,8(s0)
    8000e370:	17fe                	sll	a5,a5,0x3f
    8000e372:	07ad                	add	a5,a5,11
    8000e374:	56f70763          	beq	a4,a5,8000e8e2 <external_interrupt_MEI+0xb96>
    8000e378:	0000f517          	auipc	a0,0xf
    8000e37c:	c4850513          	add	a0,a0,-952 # 8001cfc0 <__func__.1+0x318>
    8000e380:	0660d0ef          	jal	8001b3e6 <printf>
    8000e384:	00144783          	lbu	a5,1(s0)
    8000e388:	c799                	beqz	a5,8000e396 <external_interrupt_MEI+0x64a>
    8000e38a:	57fd                	li	a5,-1
    8000e38c:	6418                	ld	a4,8(s0)
    8000e38e:	17fe                	sll	a5,a5,0x3f
    8000e390:	07ad                	add	a5,a5,11
    8000e392:	48f70263          	beq	a4,a5,8000e816 <external_interrupt_MEI+0xaca>
    8000e396:	0000f517          	auipc	a0,0xf
    8000e39a:	c3250513          	add	a0,a0,-974 # 8001cfc8 <__func__.1+0x320>
    8000e39e:	0480d0ef          	jal	8001b3e6 <printf>
    8000e3a2:	02900513          	li	a0,41
    8000e3a6:	7130b0ef          	jal	8001a2b8 <putchar>
    8000e3aa:	4529                	li	a0,10
    8000e3ac:	70d0b0ef          	jal	8001a2b8 <putchar>
    8000e3b0:	c491                	beqz	s1,8000e3bc <external_interrupt_MEI+0x670>
    8000e3b2:	00144783          	lbu	a5,1(s0)
    8000e3b6:	4481                	li	s1,0
    8000e3b8:	42079c63          	bnez	a5,8000e7f0 <external_interrupt_MEI+0xaa4>
        excpt.priv == PRIV_HS
    ); 


    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=0，且mip.MEIP，mie.MIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    8000e3bc:	0ff0000f          	fence
    8000e3c0:	4785                	li	a5,1
    8000e3c2:	00f41023          	sh	a5,0(s0)
    8000e3c6:	0002f797          	auipc	a5,0x2f
    8000e3ca:	c807b123          	sd	zero,-894(a5) # 8003d048 <excpt+0x38>
    8000e3ce:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000e3d2:	4511                	li	a0,4
    8000e3d4:	f0af20ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    8000e3d8:	30047073          	csrc	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000e3dc:	6785                	lui	a5,0x1
    8000e3de:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000e3e2:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    8000e3e6:	577d                	li	a4,-1
    8000e3e8:	30373073          	csrc	mideleg,a4
    CSRC(CSR_MEDELEG,(uint64_t)-1
    8000e3ec:	30273073          	csrc	medeleg,a4
    );
    CSRC(CSR_MIP,MIP_MEIP);
    8000e3f0:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_HS);
    8000e3f4:	450d                	li	a0,3
    8000e3f6:	ee8f20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("HS mode leads to no interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    8000e3fa:	08200593          	li	a1,130
    8000e3fe:	00012617          	auipc	a2,0x12
    8000e402:	c8a60613          	add	a2,a2,-886 # 80020088 <__func__.1+0x33e0>
    8000e406:	0000f517          	auipc	a0,0xf
    8000e40a:	ba250513          	add	a0,a0,-1118 # 8001cfa8 <__func__.1+0x300>
    8000e40e:	7d90c0ef          	jal	8001b3e6 <printf>
    8000e412:	00144783          	lbu	a5,1(s0)
    8000e416:	0000f597          	auipc	a1,0xf
    8000e41a:	b6a58593          	add	a1,a1,-1174 # 8001cf80 <__func__.1+0x2d8>
    8000e41e:	e789                	bnez	a5,8000e428 <external_interrupt_MEI+0x6dc>
    8000e420:	0000f597          	auipc	a1,0xf
    8000e424:	b5058593          	add	a1,a1,-1200 # 8001cf70 <__func__.1+0x2c8>
    8000e428:	0000f517          	auipc	a0,0xf
    8000e42c:	b9850513          	add	a0,a0,-1128 # 8001cfc0 <__func__.1+0x318>
    8000e430:	7b70c0ef          	jal	8001b3e6 <printf>
    8000e434:	00144783          	lbu	a5,1(s0)
    8000e438:	3e079963          	bnez	a5,8000e82a <external_interrupt_MEI+0xade>
    8000e43c:	4529                	li	a0,10
    8000e43e:	67b0b0ef          	jal	8001a2b8 <putchar>
    8000e442:	c489                	beqz	s1,8000e44c <external_interrupt_MEI+0x700>
    8000e444:	00144483          	lbu	s1,1(s0)
    8000e448:	0014c493          	xor	s1,s1,1



//vs-mode下
    //VS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    TEST_SETUP_EXCEPT();
    8000e44c:	0ff0000f          	fence
    8000e450:	4905                	li	s2,1
    8000e452:	01241023          	sh	s2,0(s0)
    8000e456:	0002f797          	auipc	a5,0x2f
    8000e45a:	be07b923          	sd	zero,-1038(a5) # 8003d048 <excpt+0x38>
    8000e45e:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000e462:	4511                	li	a0,4
    8000e464:	e7af20ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000e468:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000e46c:	6785                	lui	a5,0x1
    8000e46e:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000e472:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    8000e476:	3447a073          	csrs	mip,a5

    
    goto_priv(PRIV_VS);
    8000e47a:	4509                	li	a0,2
    8000e47c:	e62f20ef          	jal	80000ade <goto_priv>

    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    8000e480:	08200593          	li	a1,130
    8000e484:	00012617          	auipc	a2,0x12
    8000e488:	c5460613          	add	a2,a2,-940 # 800200d8 <__func__.1+0x3430>
    8000e48c:	0000f517          	auipc	a0,0xf
    8000e490:	b1c50513          	add	a0,a0,-1252 # 8001cfa8 <__func__.1+0x300>
    8000e494:	7530c0ef          	jal	8001b3e6 <printf>
    8000e498:	6018                	ld	a4,0(s0)
    8000e49a:	f00017b7          	lui	a5,0xf0001
    8000e49e:	0792                	sll	a5,a5,0x4
    8000e4a0:	190a                	sll	s2,s2,0x22
    8000e4a2:	f0078793          	add	a5,a5,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000e4a6:	8ff9                	and	a5,a5,a4
    8000e4a8:	10090913          	add	s2,s2,256
    8000e4ac:	0000f597          	auipc	a1,0xf
    8000e4b0:	ad458593          	add	a1,a1,-1324 # 8001cf80 <__func__.1+0x2d8>
    8000e4b4:	01279663          	bne	a5,s2,8000e4c0 <external_interrupt_MEI+0x774>
    8000e4b8:	0000f597          	auipc	a1,0xf
    8000e4bc:	ab858593          	add	a1,a1,-1352 # 8001cf70 <__func__.1+0x2c8>
    8000e4c0:	0000f517          	auipc	a0,0xf
    8000e4c4:	b0050513          	add	a0,a0,-1280 # 8001cfc0 <__func__.1+0x318>
    8000e4c8:	71f0c0ef          	jal	8001b3e6 <printf>
    8000e4cc:	00144783          	lbu	a5,1(s0)
    8000e4d0:	c789                	beqz	a5,8000e4da <external_interrupt_MEI+0x78e>
    8000e4d2:	4058                	lw	a4,4(s0)
    8000e4d4:	4791                	li	a5,4
    8000e4d6:	00f70c63          	beq	a4,a5,8000e4ee <external_interrupt_MEI+0x7a2>
    8000e4da:	0000f517          	auipc	a0,0xf
    8000e4de:	aee50513          	add	a0,a0,-1298 # 8001cfc8 <__func__.1+0x320>
    8000e4e2:	7050c0ef          	jal	8001b3e6 <printf>
    8000e4e6:	02900513          	li	a0,41
    8000e4ea:	5cf0b0ef          	jal	8001a2b8 <putchar>
    8000e4ee:	4529                	li	a0,10
    8000e4f0:	5c90b0ef          	jal	8001a2b8 <putchar>
    8000e4f4:	cc99                	beqz	s1,8000e512 <external_interrupt_MEI+0x7c6>
    8000e4f6:	6004                	ld	s1,0(s0)
    8000e4f8:	f0001737          	lui	a4,0xf0001
    8000e4fc:	57fd                	li	a5,-1
    8000e4fe:	0712                	sll	a4,a4,0x4
    8000e500:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000e504:	178a                	sll	a5,a5,0x22
    8000e506:	8cf9                	and	s1,s1,a4
    8000e508:	f0078793          	add	a5,a5,-256
    8000e50c:	94be                	add	s1,s1,a5
    8000e50e:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高,有hideleg代理
    TEST_SETUP_EXCEPT();
    8000e512:	0ff0000f          	fence
    8000e516:	4905                	li	s2,1
    8000e518:	01241023          	sh	s2,0(s0)
    8000e51c:	0002f797          	auipc	a5,0x2f
    8000e520:	b207b623          	sd	zero,-1236(a5) # 8003d048 <excpt+0x38>
    8000e524:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000e528:	4511                	li	a0,4
    8000e52a:	db4f20ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000e52e:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000e532:	6785                	lui	a5,0x1
    8000e534:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000e538:	3047a073          	csrs	mie,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000e53c:	577d                	li	a4,-1
    8000e53e:	60371073          	csrw	hideleg,a4
    CSRS(CSR_MIP,MIP_MEIP);
    8000e542:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_VS);
    8000e546:	4509                	li	a0,2
    8000e548:	d96f20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1 ",
    8000e54c:	08200593          	li	a1,130
    8000e550:	00012617          	auipc	a2,0x12
    8000e554:	be860613          	add	a2,a2,-1048 # 80020138 <__func__.1+0x3490>
    8000e558:	0000f517          	auipc	a0,0xf
    8000e55c:	a5050513          	add	a0,a0,-1456 # 8001cfa8 <__func__.1+0x300>
    8000e560:	6870c0ef          	jal	8001b3e6 <printf>
    8000e564:	6018                	ld	a4,0(s0)
    8000e566:	f00017b7          	lui	a5,0xf0001
    8000e56a:	0792                	sll	a5,a5,0x4
    8000e56c:	1906                	sll	s2,s2,0x21
    8000e56e:	f0078793          	add	a5,a5,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000e572:	8ff9                	and	a5,a5,a4
    8000e574:	10090913          	add	s2,s2,256
    8000e578:	0000f597          	auipc	a1,0xf
    8000e57c:	a0858593          	add	a1,a1,-1528 # 8001cf80 <__func__.1+0x2d8>
    8000e580:	01279663          	bne	a5,s2,8000e58c <external_interrupt_MEI+0x840>
    8000e584:	0000f597          	auipc	a1,0xf
    8000e588:	9ec58593          	add	a1,a1,-1556 # 8001cf70 <__func__.1+0x2c8>
    8000e58c:	0000f517          	auipc	a0,0xf
    8000e590:	a3450513          	add	a0,a0,-1484 # 8001cfc0 <__func__.1+0x318>
    8000e594:	6530c0ef          	jal	8001b3e6 <printf>
    8000e598:	00144783          	lbu	a5,1(s0)
    8000e59c:	c789                	beqz	a5,8000e5a6 <external_interrupt_MEI+0x85a>
    8000e59e:	4058                	lw	a4,4(s0)
    8000e5a0:	4789                	li	a5,2
    8000e5a2:	00f70c63          	beq	a4,a5,8000e5ba <external_interrupt_MEI+0x86e>
    8000e5a6:	0000f517          	auipc	a0,0xf
    8000e5aa:	a2250513          	add	a0,a0,-1502 # 8001cfc8 <__func__.1+0x320>
    8000e5ae:	6390c0ef          	jal	8001b3e6 <printf>
    8000e5b2:	02900513          	li	a0,41
    8000e5b6:	5030b0ef          	jal	8001a2b8 <putchar>
    8000e5ba:	4529                	li	a0,10
    8000e5bc:	4fd0b0ef          	jal	8001a2b8 <putchar>
    8000e5c0:	cc99                	beqz	s1,8000e5de <external_interrupt_MEI+0x892>
    8000e5c2:	6004                	ld	s1,0(s0)
    8000e5c4:	f0001737          	lui	a4,0xf0001
    8000e5c8:	57fd                	li	a5,-1
    8000e5ca:	0712                	sll	a4,a4,0x4
    8000e5cc:	f0070713          	add	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000e5d0:	1786                	sll	a5,a5,0x21
    8000e5d2:	8cf9                	and	s1,s1,a4
    8000e5d4:	f0078793          	add	a5,a5,-256
    8000e5d8:	94be                	add	s1,s1,a5
    8000e5da:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0，无代理
    TEST_SETUP_EXCEPT();
    8000e5de:	0ff0000f          	fence
    8000e5e2:	4785                	li	a5,1
    8000e5e4:	00f41023          	sh	a5,0(s0)
    8000e5e8:	0002f797          	auipc	a5,0x2f
    8000e5ec:	a607b023          	sd	zero,-1440(a5) # 8003d048 <excpt+0x38>
    8000e5f0:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000e5f4:	4511                	li	a0,4
    8000e5f6:	ce8f20ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000e5fa:	30046073          	csrs	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    8000e5fe:	6785                	lui	a5,0x1
    8000e600:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000e604:	3047b073          	csrc	mie,a5
    CSRW(CSR_MIDELEG,0);
    8000e608:	30305073          	csrw	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000e60c:	60305073          	csrw	hideleg,0
    CSRS(CSR_MIP,MIP_MEIP);
    8000e610:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_VS);
    8000e614:	4509                	li	a0,2
    8000e616:	cc8f20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    8000e61a:	08200593          	li	a1,130
    8000e61e:	00012617          	auipc	a2,0x12
    8000e622:	b7a60613          	add	a2,a2,-1158 # 80020198 <__func__.1+0x34f0>
    8000e626:	0000f517          	auipc	a0,0xf
    8000e62a:	98250513          	add	a0,a0,-1662 # 8001cfa8 <__func__.1+0x300>
    8000e62e:	5b90c0ef          	jal	8001b3e6 <printf>
    8000e632:	00144783          	lbu	a5,1(s0)
    8000e636:	0000f597          	auipc	a1,0xf
    8000e63a:	94a58593          	add	a1,a1,-1718 # 8001cf80 <__func__.1+0x2d8>
    8000e63e:	e789                	bnez	a5,8000e648 <external_interrupt_MEI+0x8fc>
    8000e640:	0000f597          	auipc	a1,0xf
    8000e644:	93058593          	add	a1,a1,-1744 # 8001cf70 <__func__.1+0x2c8>
    8000e648:	0000f517          	auipc	a0,0xf
    8000e64c:	97850513          	add	a0,a0,-1672 # 8001cfc0 <__func__.1+0x318>
    8000e650:	5970c0ef          	jal	8001b3e6 <printf>
    8000e654:	00144783          	lbu	a5,1(s0)
    8000e658:	20079b63          	bnez	a5,8000e86e <external_interrupt_MEI+0xb22>
    8000e65c:	4529                	li	a0,10
    8000e65e:	45b0b0ef          	jal	8001a2b8 <putchar>
    8000e662:	c489                	beqz	s1,8000e66c <external_interrupt_MEI+0x920>
    8000e664:	00144483          	lbu	s1,1(s0)
    8000e668:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 


    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1，无代理
    TEST_SETUP_EXCEPT();
    8000e66c:	0ff0000f          	fence
    8000e670:	4785                	li	a5,1
    8000e672:	00f41023          	sh	a5,0(s0)
    8000e676:	0002f797          	auipc	a5,0x2f
    8000e67a:	9c07b923          	sd	zero,-1582(a5) # 8003d048 <excpt+0x38>
    8000e67e:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000e682:	4511                	li	a0,4
    8000e684:	c5af20ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000e688:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000e68c:	6785                	lui	a5,0x1
    8000e68e:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000e692:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    8000e696:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_VS);
    8000e69a:	4509                	li	a0,2
    8000e69c:	c42f20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8000e6a0:	08200593          	li	a1,130
    8000e6a4:	00012617          	auipc	a2,0x12
    8000e6a8:	b5460613          	add	a2,a2,-1196 # 800201f8 <__func__.1+0x3550>
    8000e6ac:	0000f517          	auipc	a0,0xf
    8000e6b0:	8fc50513          	add	a0,a0,-1796 # 8001cfa8 <__func__.1+0x300>
    8000e6b4:	5330c0ef          	jal	8001b3e6 <printf>
    8000e6b8:	00144783          	lbu	a5,1(s0)
    8000e6bc:	0000f597          	auipc	a1,0xf
    8000e6c0:	8c458593          	add	a1,a1,-1852 # 8001cf80 <__func__.1+0x2d8>
    8000e6c4:	c799                	beqz	a5,8000e6d2 <external_interrupt_MEI+0x986>
    8000e6c6:	57fd                	li	a5,-1
    8000e6c8:	6418                	ld	a4,8(s0)
    8000e6ca:	17fe                	sll	a5,a5,0x3f
    8000e6cc:	07ad                	add	a5,a5,11
    8000e6ce:	22f70f63          	beq	a4,a5,8000e90c <external_interrupt_MEI+0xbc0>
    8000e6d2:	0000f517          	auipc	a0,0xf
    8000e6d6:	8ee50513          	add	a0,a0,-1810 # 8001cfc0 <__func__.1+0x318>
    8000e6da:	50d0c0ef          	jal	8001b3e6 <printf>
    8000e6de:	00144783          	lbu	a5,1(s0)
    8000e6e2:	c799                	beqz	a5,8000e6f0 <external_interrupt_MEI+0x9a4>
    8000e6e4:	57fd                	li	a5,-1
    8000e6e6:	6418                	ld	a4,8(s0)
    8000e6e8:	17fe                	sll	a5,a5,0x3f
    8000e6ea:	07ad                	add	a5,a5,11
    8000e6ec:	12f70a63          	beq	a4,a5,8000e820 <external_interrupt_MEI+0xad4>
    8000e6f0:	0000f517          	auipc	a0,0xf
    8000e6f4:	8d850513          	add	a0,a0,-1832 # 8001cfc8 <__func__.1+0x320>
    8000e6f8:	4ef0c0ef          	jal	8001b3e6 <printf>
    8000e6fc:	02900513          	li	a0,41
    8000e700:	3b90b0ef          	jal	8001a2b8 <putchar>
    8000e704:	4529                	li	a0,10
    8000e706:	3b30b0ef          	jal	8001a2b8 <putchar>
    8000e70a:	c489                	beqz	s1,8000e714 <external_interrupt_MEI+0x9c8>
    8000e70c:	00144783          	lbu	a5,1(s0)
    8000e710:	4481                	li	s1,0
    8000e712:	e7e1                	bnez	a5,8000e7da <external_interrupt_MEI+0xa8e>
        excpt.cause == CAUSE_MEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=0，且mip.MEIP，mie.MIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    8000e714:	0ff0000f          	fence
    8000e718:	4785                	li	a5,1
    8000e71a:	00f41023          	sh	a5,0(s0)
    8000e71e:	0002f797          	auipc	a5,0x2f
    8000e722:	9207b523          	sd	zero,-1750(a5) # 8003d048 <excpt+0x38>
    8000e726:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000e72a:	4511                	li	a0,4
    8000e72c:	bb2f20ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    8000e730:	30047073          	csrc	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8000e734:	6785                	lui	a5,0x1
    8000e736:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8000e73a:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    8000e73e:	577d                	li	a4,-1
    8000e740:	30373073          	csrc	mideleg,a4
    CSRC(CSR_MEDELEG,(uint64_t)-1);
    8000e744:	30273073          	csrc	medeleg,a4
    CSRC(CSR_MIP,MIP_MEIP);
    8000e748:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_VS);
    8000e74c:	4509                	li	a0,2
    8000e74e:	b90f20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    8000e752:	08200593          	li	a1,130
    8000e756:	00012617          	auipc	a2,0x12
    8000e75a:	b0260613          	add	a2,a2,-1278 # 80020258 <__func__.1+0x35b0>
    8000e75e:	0000f517          	auipc	a0,0xf
    8000e762:	84a50513          	add	a0,a0,-1974 # 8001cfa8 <__func__.1+0x300>
    8000e766:	4810c0ef          	jal	8001b3e6 <printf>
    8000e76a:	00144783          	lbu	a5,1(s0)
    8000e76e:	0000f597          	auipc	a1,0xf
    8000e772:	81258593          	add	a1,a1,-2030 # 8001cf80 <__func__.1+0x2d8>
    8000e776:	e789                	bnez	a5,8000e780 <external_interrupt_MEI+0xa34>
    8000e778:	0000e597          	auipc	a1,0xe
    8000e77c:	7f858593          	add	a1,a1,2040 # 8001cf70 <__func__.1+0x2c8>
    8000e780:	0000f517          	auipc	a0,0xf
    8000e784:	84050513          	add	a0,a0,-1984 # 8001cfc0 <__func__.1+0x318>
    8000e788:	45f0c0ef          	jal	8001b3e6 <printf>
    8000e78c:	00144783          	lbu	a5,1(s0)
    8000e790:	e7e1                	bnez	a5,8000e858 <external_interrupt_MEI+0xb0c>
    8000e792:	4529                	li	a0,10
    8000e794:	3250b0ef          	jal	8001a2b8 <putchar>
    8000e798:	c481                	beqz	s1,8000e7a0 <external_interrupt_MEI+0xa54>
    8000e79a:	00144783          	lbu	a5,1(s0)
    8000e79e:	cb85                	beqz	a5,8000e7ce <external_interrupt_MEI+0xa82>
    8000e7a0:	4401                	li	s0,0
    //     excpt.cause == CAUSE_MEI &&
    //     excpt.priv == PRIV_HS
    // ); 


    TEST_END();
    8000e7a2:	0000e597          	auipc	a1,0xe
    8000e7a6:	7de58593          	add	a1,a1,2014 # 8001cf80 <__func__.1+0x2d8>
    8000e7aa:	0000f517          	auipc	a0,0xf
    8000e7ae:	87e50513          	add	a0,a0,-1922 # 8001d028 <__func__.1+0x380>
    8000e7b2:	4350c0ef          	jal	8001b3e6 <printf>
    8000e7b6:	4511                	li	a0,4
    8000e7b8:	b26f20ef          	jal	80000ade <goto_priv>
    8000e7bc:	b6bf20ef          	jal	80001326 <reset_state>
}
    8000e7c0:	60e2                	ld	ra,24(sp)
    8000e7c2:	8522                	mv	a0,s0
    8000e7c4:	6442                	ld	s0,16(sp)
    8000e7c6:	64a2                	ld	s1,8(sp)
    8000e7c8:	6902                	ld	s2,0(sp)
    8000e7ca:	6105                	add	sp,sp,32
    8000e7cc:	8082                	ret
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    8000e7ce:	4405                	li	s0,1
    TEST_END();
    8000e7d0:	0000e597          	auipc	a1,0xe
    8000e7d4:	7a058593          	add	a1,a1,1952 # 8001cf70 <__func__.1+0x2c8>
    8000e7d8:	bfc9                	j	8000e7aa <external_interrupt_MEI+0xa5e>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8000e7da:	57fd                	li	a5,-1
    8000e7dc:	6418                	ld	a4,8(s0)
    8000e7de:	17fe                	sll	a5,a5,0x3f
    8000e7e0:	07ad                	add	a5,a5,11
    8000e7e2:	f2f719e3          	bne	a4,a5,8000e714 <external_interrupt_MEI+0x9c8>
    8000e7e6:	4044                	lw	s1,4(s0)
    8000e7e8:	14f9                	add	s1,s1,-2
    8000e7ea:	0014b493          	seqz	s1,s1
    8000e7ee:	b71d                	j	8000e714 <external_interrupt_MEI+0x9c8>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8000e7f0:	57fd                	li	a5,-1
    8000e7f2:	6418                	ld	a4,8(s0)
    8000e7f4:	17fe                	sll	a5,a5,0x3f
    8000e7f6:	07ad                	add	a5,a5,11
    8000e7f8:	bcf712e3          	bne	a4,a5,8000e3bc <external_interrupt_MEI+0x670>
    8000e7fc:	4044                	lw	s1,4(s0)
    8000e7fe:	14f5                	add	s1,s1,-3
    8000e800:	0014b493          	seqz	s1,s1
    8000e804:	be65                	j	8000e3bc <external_interrupt_MEI+0x670>
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1",
    8000e806:	6404                	ld	s1,8(s0)
    8000e808:	57ad                	li	a5,-21
    8000e80a:	8385                	srl	a5,a5,0x1
    8000e80c:	94be                	add	s1,s1,a5
    8000e80e:	0014b493          	seqz	s1,s1
    8000e812:	f4cff06f          	j	8000df5e <external_interrupt_MEI+0x212>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8000e816:	4058                	lw	a4,4(s0)
    8000e818:	478d                	li	a5,3
    8000e81a:	b6f71ee3          	bne	a4,a5,8000e396 <external_interrupt_MEI+0x64a>
    8000e81e:	b671                	j	8000e3aa <external_interrupt_MEI+0x65e>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8000e820:	4058                	lw	a4,4(s0)
    8000e822:	4789                	li	a5,2
    8000e824:	ecf716e3          	bne	a4,a5,8000e6f0 <external_interrupt_MEI+0x9a4>
    8000e828:	bdf1                	j	8000e704 <external_interrupt_MEI+0x9b8>
    TEST_ASSERT("HS mode leads to no interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    8000e82a:	0000e517          	auipc	a0,0xe
    8000e82e:	79e50513          	add	a0,a0,1950 # 8001cfc8 <__func__.1+0x320>
    8000e832:	3b50c0ef          	jal	8001b3e6 <printf>
    8000e836:	02900513          	li	a0,41
    8000e83a:	27f0b0ef          	jal	8001a2b8 <putchar>
    8000e83e:	befd                	j	8000e43c <external_interrupt_MEI+0x6f0>
    TEST_ASSERT("m mode leads to no interrupt pending when mstatus.mie=1 and mip.meip=1 and mie.meie=0",
    8000e840:	0000e517          	auipc	a0,0xe
    8000e844:	78850513          	add	a0,a0,1928 # 8001cfc8 <__func__.1+0x320>
    8000e848:	39f0c0ef          	jal	8001b3e6 <printf>
    8000e84c:	02900513          	li	a0,41
    8000e850:	2690b0ef          	jal	8001a2b8 <putchar>
    8000e854:	e50ff06f          	j	8000dea4 <external_interrupt_MEI+0x158>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    8000e858:	0000e517          	auipc	a0,0xe
    8000e85c:	77050513          	add	a0,a0,1904 # 8001cfc8 <__func__.1+0x320>
    8000e860:	3870c0ef          	jal	8001b3e6 <printf>
    8000e864:	02900513          	li	a0,41
    8000e868:	2510b0ef          	jal	8001a2b8 <putchar>
    8000e86c:	b71d                	j	8000e792 <external_interrupt_MEI+0xa46>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    8000e86e:	0000e517          	auipc	a0,0xe
    8000e872:	75a50513          	add	a0,a0,1882 # 8001cfc8 <__func__.1+0x320>
    8000e876:	3710c0ef          	jal	8001b3e6 <printf>
    8000e87a:	02900513          	li	a0,41
    8000e87e:	23b0b0ef          	jal	8001a2b8 <putchar>
    8000e882:	bbe9                	j	8000e65c <external_interrupt_MEI+0x910>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    8000e884:	0000e517          	auipc	a0,0xe
    8000e888:	74450513          	add	a0,a0,1860 # 8001cfc8 <__func__.1+0x320>
    8000e88c:	35b0c0ef          	jal	8001b3e6 <printf>
    8000e890:	02900513          	li	a0,41
    8000e894:	2250b0ef          	jal	8001a2b8 <putchar>
    8000e898:	b4ad                	j	8000e302 <external_interrupt_MEI+0x5b6>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=0",
    8000e89a:	0000e517          	auipc	a0,0xe
    8000e89e:	72e50513          	add	a0,a0,1838 # 8001cfc8 <__func__.1+0x320>
    8000e8a2:	3450c0ef          	jal	8001b3e6 <printf>
    8000e8a6:	02900513          	li	a0,41
    8000e8aa:	20f0b0ef          	jal	8001a2b8 <putchar>
    8000e8ae:	833ff06f          	j	8000e0e0 <external_interrupt_MEI+0x394>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=0",
    8000e8b2:	0000e517          	auipc	a0,0xe
    8000e8b6:	71650513          	add	a0,a0,1814 # 8001cfc8 <__func__.1+0x320>
    8000e8ba:	32d0c0ef          	jal	8001b3e6 <printf>
    8000e8be:	02900513          	li	a0,41
    8000e8c2:	1f70b0ef          	jal	8001a2b8 <putchar>
    8000e8c6:	f94ff06f          	j	8000e05a <external_interrupt_MEI+0x30e>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=1",
    8000e8ca:	0000e517          	auipc	a0,0xe
    8000e8ce:	6fe50513          	add	a0,a0,1790 # 8001cfc8 <__func__.1+0x320>
    8000e8d2:	3150c0ef          	jal	8001b3e6 <printf>
    8000e8d6:	02900513          	li	a0,41
    8000e8da:	1df0b0ef          	jal	8001a2b8 <putchar>
    8000e8de:	ef6ff06f          	j	8000dfd4 <external_interrupt_MEI+0x288>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8000e8e2:	4058                	lw	a4,4(s0)
    8000e8e4:	478d                	li	a5,3
    8000e8e6:	a8f719e3          	bne	a4,a5,8000e378 <external_interrupt_MEI+0x62c>
    8000e8ea:	0000e597          	auipc	a1,0xe
    8000e8ee:	68658593          	add	a1,a1,1670 # 8001cf70 <__func__.1+0x2c8>
    8000e8f2:	b459                	j	8000e378 <external_interrupt_MEI+0x62c>
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    8000e8f4:	0000e597          	auipc	a1,0xe
    8000e8f8:	67c58593          	add	a1,a1,1660 # 8001cf70 <__func__.1+0x2c8>
    8000e8fc:	ce6ff06f          	j	8000dde2 <external_interrupt_MEI+0x96>
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1",
    8000e900:	0000e597          	auipc	a1,0xe
    8000e904:	67058593          	add	a1,a1,1648 # 8001cf70 <__func__.1+0x2c8>
    8000e908:	e12ff06f          	j	8000df1a <external_interrupt_MEI+0x1ce>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    8000e90c:	4058                	lw	a4,4(s0)
    8000e90e:	4789                	li	a5,2
    8000e910:	dcf711e3          	bne	a4,a5,8000e6d2 <external_interrupt_MEI+0x986>
    8000e914:	0000e597          	auipc	a1,0xe
    8000e918:	65c58593          	add	a1,a1,1628 # 8001cf70 <__func__.1+0x2c8>
    8000e91c:	bb5d                	j	8000e6d2 <external_interrupt_MEI+0x986>

000000008000e91e <external_interrupt_SEI>:


bool external_interrupt_SEI() {
    8000e91e:	1101                	add	sp,sp,-32

    TEST_START();
    8000e920:	0000e597          	auipc	a1,0xe
    8000e924:	80058593          	add	a1,a1,-2048 # 8001c120 <__func__.1>
    8000e928:	0000e517          	auipc	a0,0xe
    8000e92c:	66850513          	add	a0,a0,1640 # 8001cf90 <__func__.1+0x2e8>
bool external_interrupt_SEI() {
    8000e930:	ec06                	sd	ra,24(sp)
    8000e932:	e822                	sd	s0,16(sp)
    8000e934:	e426                	sd	s1,8(sp)
    TEST_START();
    8000e936:	2b10c0ef          	jal	8001b3e6 <printf>
    8000e93a:	4529                	li	a0,10
    8000e93c:	17d0b0ef          	jal	8001a2b8 <putchar>

    TEST_SETUP_EXCEPT();
    8000e940:	0ff0000f          	fence
    8000e944:	4785                	li	a5,1
    8000e946:	0002e417          	auipc	s0,0x2e
    8000e94a:	6ca40413          	add	s0,s0,1738 # 8003d010 <excpt>
    8000e94e:	00f41023          	sh	a5,0(s0)
    8000e952:	0002e797          	auipc	a5,0x2e
    8000e956:	6e07bb23          	sd	zero,1782(a5) # 8003d048 <excpt+0x38>
    8000e95a:	0ff0000f          	fence

   
    //HS模式下产生单bit外部中断，sstatus.sie=1，且mip，sie对应的SEIP、SEIE拉高
    goto_priv(PRIV_HS);
    8000e95e:	450d                	li	a0,3
    8000e960:	97ef20ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     //sie位
    8000e964:	10016073          	csrs	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    8000e968:	20000793          	li	a5,512
    8000e96c:	1047a073          	csrs	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    8000e970:	1447a073          	csrs	sip,a5

    goto_priv(PRIV_HS);
    8000e974:	450d                	li	a0,3
    8000e976:	968f20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8000e97a:	08200593          	li	a1,130
    8000e97e:	00012617          	auipc	a2,0x12
    8000e982:	93a60613          	add	a2,a2,-1734 # 800202b8 <__func__.1+0x3610>
    8000e986:	0000e517          	auipc	a0,0xe
    8000e98a:	62250513          	add	a0,a0,1570 # 8001cfa8 <__func__.1+0x300>
    8000e98e:	2590c0ef          	jal	8001b3e6 <printf>
    8000e992:	00144783          	lbu	a5,1(s0)
    8000e996:	0000e597          	auipc	a1,0xe
    8000e99a:	5ea58593          	add	a1,a1,1514 # 8001cf80 <__func__.1+0x2d8>
    8000e99e:	c799                	beqz	a5,8000e9ac <external_interrupt_SEI+0x8e>
    8000e9a0:	57fd                	li	a5,-1
    8000e9a2:	6418                	ld	a4,8(s0)
    8000e9a4:	17fe                	sll	a5,a5,0x3f
    8000e9a6:	07a5                	add	a5,a5,9
    8000e9a8:	70f70463          	beq	a4,a5,8000f0b0 <external_interrupt_SEI+0x792>
    8000e9ac:	0000e517          	auipc	a0,0xe
    8000e9b0:	61450513          	add	a0,a0,1556 # 8001cfc0 <__func__.1+0x318>
    8000e9b4:	2330c0ef          	jal	8001b3e6 <printf>
    8000e9b8:	00144783          	lbu	a5,1(s0)
    8000e9bc:	c799                	beqz	a5,8000e9ca <external_interrupt_SEI+0xac>
    8000e9be:	57fd                	li	a5,-1
    8000e9c0:	6418                	ld	a4,8(s0)
    8000e9c2:	17fe                	sll	a5,a5,0x3f
    8000e9c4:	07a5                	add	a5,a5,9
    8000e9c6:	60f70663          	beq	a4,a5,8000efd2 <external_interrupt_SEI+0x6b4>
    8000e9ca:	0000e517          	auipc	a0,0xe
    8000e9ce:	5fe50513          	add	a0,a0,1534 # 8001cfc8 <__func__.1+0x320>
    8000e9d2:	2150c0ef          	jal	8001b3e6 <printf>
    8000e9d6:	02900513          	li	a0,41
    8000e9da:	0df0b0ef          	jal	8001a2b8 <putchar>
    8000e9de:	4529                	li	a0,10
    8000e9e0:	0d90b0ef          	jal	8001a2b8 <putchar>
    8000e9e4:	00144783          	lbu	a5,1(s0)
    8000e9e8:	4481                	li	s1,0
    8000e9ea:	c799                	beqz	a5,8000e9f8 <external_interrupt_SEI+0xda>
    8000e9ec:	57fd                	li	a5,-1
    8000e9ee:	6418                	ld	a4,8(s0)
    8000e9f0:	17fe                	sll	a5,a5,0x3f
    8000e9f2:	07a5                	add	a5,a5,9
    8000e9f4:	68f70763          	beq	a4,a5,8000f082 <external_interrupt_SEI+0x764>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //HS模式下产生单bit外部中断，sstatus.sie=1，且sip.SEIP=1，sie.SEIE=0
    TEST_SETUP_EXCEPT();
    8000e9f8:	0ff0000f          	fence
    8000e9fc:	4785                	li	a5,1
    8000e9fe:	00f41023          	sh	a5,0(s0)
    8000ea02:	0002e797          	auipc	a5,0x2e
    8000ea06:	6407b323          	sd	zero,1606(a5) # 8003d048 <excpt+0x38>
    8000ea0a:	0ff0000f          	fence
    goto_priv(PRIV_HS);
    8000ea0e:	450d                	li	a0,3
    8000ea10:	8cef20ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    8000ea14:	10016073          	csrs	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    8000ea18:	20000793          	li	a5,512
    8000ea1c:	1047b073          	csrc	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    8000ea20:	1447a073          	csrs	sip,a5

    goto_priv(PRIV_HS);
    8000ea24:	450d                	li	a0,3
    8000ea26:	8b8f20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt  when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    8000ea2a:	08200593          	li	a1,130
    8000ea2e:	00012617          	auipc	a2,0x12
    8000ea32:	8ea60613          	add	a2,a2,-1814 # 80020318 <__func__.1+0x3670>
    8000ea36:	0000e517          	auipc	a0,0xe
    8000ea3a:	57250513          	add	a0,a0,1394 # 8001cfa8 <__func__.1+0x300>
    8000ea3e:	1a90c0ef          	jal	8001b3e6 <printf>
    8000ea42:	00144783          	lbu	a5,1(s0)
    8000ea46:	0000e597          	auipc	a1,0xe
    8000ea4a:	53a58593          	add	a1,a1,1338 # 8001cf80 <__func__.1+0x2d8>
    8000ea4e:	e789                	bnez	a5,8000ea58 <external_interrupt_SEI+0x13a>
    8000ea50:	0000e597          	auipc	a1,0xe
    8000ea54:	52058593          	add	a1,a1,1312 # 8001cf70 <__func__.1+0x2c8>
    8000ea58:	0000e517          	auipc	a0,0xe
    8000ea5c:	56850513          	add	a0,a0,1384 # 8001cfc0 <__func__.1+0x318>
    8000ea60:	1870c0ef          	jal	8001b3e6 <printf>
    8000ea64:	00144783          	lbu	a5,1(s0)
    8000ea68:	5a079a63          	bnez	a5,8000f01c <external_interrupt_SEI+0x6fe>
    8000ea6c:	4529                	li	a0,10
    8000ea6e:	04b0b0ef          	jal	8001a2b8 <putchar>
    8000ea72:	c489                	beqz	s1,8000ea7c <external_interrupt_SEI+0x15e>
    8000ea74:	00144483          	lbu	s1,1(s0)
    8000ea78:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 

    //HS模式下产生单bit外部中断，sstatus.sie=1，且sip.SEIP=0，sie.SEIE=1
    TEST_SETUP_EXCEPT();
    8000ea7c:	0ff0000f          	fence
    8000ea80:	4785                	li	a5,1
    8000ea82:	00f41023          	sh	a5,0(s0)
    8000ea86:	0002e797          	auipc	a5,0x2e
    8000ea8a:	5c07b123          	sd	zero,1474(a5) # 8003d048 <excpt+0x38>
    8000ea8e:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000ea92:	4511                	li	a0,4
    8000ea94:	84af20ef          	jal	80000ade <goto_priv>
    CSRW(CSR_MIDELEG,0);
    8000ea98:	30305073          	csrw	mideleg,0
    CSRS(CSR_SSTATUS,1ULL << 1);     
    8000ea9c:	10016073          	csrs	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    8000eaa0:	20000793          	li	a5,512
    8000eaa4:	1047a073          	csrs	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    8000eaa8:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    8000eaac:	450d                	li	a0,3
    8000eaae:	830f20ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8000eab2:	08200593          	li	a1,130
    8000eab6:	00012617          	auipc	a2,0x12
    8000eaba:	8b260613          	add	a2,a2,-1870 # 80020368 <__func__.1+0x36c0>
    8000eabe:	0000e517          	auipc	a0,0xe
    8000eac2:	4ea50513          	add	a0,a0,1258 # 8001cfa8 <__func__.1+0x300>
    8000eac6:	1210c0ef          	jal	8001b3e6 <printf>
    8000eaca:	00144783          	lbu	a5,1(s0)
    8000eace:	0000e597          	auipc	a1,0xe
    8000ead2:	4b258593          	add	a1,a1,1202 # 8001cf80 <__func__.1+0x2d8>
    8000ead6:	c799                	beqz	a5,8000eae4 <external_interrupt_SEI+0x1c6>
    8000ead8:	57fd                	li	a5,-1
    8000eada:	6418                	ld	a4,8(s0)
    8000eadc:	17fe                	sll	a5,a5,0x3f
    8000eade:	07a5                	add	a5,a5,9
    8000eae0:	5af70663          	beq	a4,a5,8000f08c <external_interrupt_SEI+0x76e>
    8000eae4:	0000e517          	auipc	a0,0xe
    8000eae8:	4dc50513          	add	a0,a0,1244 # 8001cfc0 <__func__.1+0x318>
    8000eaec:	0fb0c0ef          	jal	8001b3e6 <printf>
    8000eaf0:	00144783          	lbu	a5,1(s0)
    8000eaf4:	c799                	beqz	a5,8000eb02 <external_interrupt_SEI+0x1e4>
    8000eaf6:	57fd                	li	a5,-1
    8000eaf8:	6418                	ld	a4,8(s0)
    8000eafa:	17fe                	sll	a5,a5,0x3f
    8000eafc:	07a5                	add	a5,a5,9
    8000eafe:	4cf70563          	beq	a4,a5,8000efc8 <external_interrupt_SEI+0x6aa>
    8000eb02:	0000e517          	auipc	a0,0xe
    8000eb06:	4c650513          	add	a0,a0,1222 # 8001cfc8 <__func__.1+0x320>
    8000eb0a:	0dd0c0ef          	jal	8001b3e6 <printf>
    8000eb0e:	02900513          	li	a0,41
    8000eb12:	7a60b0ef          	jal	8001a2b8 <putchar>
    8000eb16:	4529                	li	a0,10
    8000eb18:	7a00b0ef          	jal	8001a2b8 <putchar>
    8000eb1c:	c491                	beqz	s1,8000eb28 <external_interrupt_SEI+0x20a>
    8000eb1e:	00144783          	lbu	a5,1(s0)
    8000eb22:	4481                	li	s1,0
    8000eb24:	48079263          	bnez	a5,8000efa8 <external_interrupt_SEI+0x68a>
    //     excpt.priv == PRIV_HS
    // ); 
    

    //HS模式下产生单bit外部中断，sstatus.mie=1，且sip.SEIP=0，sie.SIE=0
    TEST_SETUP_EXCEPT();
    8000eb28:	0ff0000f          	fence
    8000eb2c:	4785                	li	a5,1
    8000eb2e:	00f41023          	sh	a5,0(s0)
    8000eb32:	0002e797          	auipc	a5,0x2e
    8000eb36:	5007bb23          	sd	zero,1302(a5) # 8003d048 <excpt+0x38>
    8000eb3a:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000eb3e:	4511                	li	a0,4
    8000eb40:	f9ff10ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1)     
    8000eb44:	10016073          	csrs	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    8000eb48:	20000793          	li	a5,512
    8000eb4c:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    8000eb50:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    8000eb54:	450d                	li	a0,3
    8000eb56:	f89f10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=1 and sie.seie=0",
    8000eb5a:	08200593          	li	a1,130
    8000eb5e:	00012617          	auipc	a2,0x12
    8000eb62:	86a60613          	add	a2,a2,-1942 # 800203c8 <__func__.1+0x3720>
    8000eb66:	0000e517          	auipc	a0,0xe
    8000eb6a:	44250513          	add	a0,a0,1090 # 8001cfa8 <__func__.1+0x300>
    8000eb6e:	0790c0ef          	jal	8001b3e6 <printf>
    8000eb72:	00144783          	lbu	a5,1(s0)
    8000eb76:	0000e597          	auipc	a1,0xe
    8000eb7a:	40a58593          	add	a1,a1,1034 # 8001cf80 <__func__.1+0x2d8>
    8000eb7e:	e789                	bnez	a5,8000eb88 <external_interrupt_SEI+0x26a>
    8000eb80:	0000e597          	auipc	a1,0xe
    8000eb84:	3f058593          	add	a1,a1,1008 # 8001cf70 <__func__.1+0x2c8>
    8000eb88:	0000e517          	auipc	a0,0xe
    8000eb8c:	43850513          	add	a0,a0,1080 # 8001cfc0 <__func__.1+0x318>
    8000eb90:	0570c0ef          	jal	8001b3e6 <printf>
    8000eb94:	00144783          	lbu	a5,1(s0)
    8000eb98:	46079763          	bnez	a5,8000f006 <external_interrupt_SEI+0x6e8>
    8000eb9c:	4529                	li	a0,10
    8000eb9e:	71a0b0ef          	jal	8001a2b8 <putchar>
    8000eba2:	c489                	beqz	s1,8000ebac <external_interrupt_SEI+0x28e>
    8000eba4:	00144483          	lbu	s1,1(s0)
    8000eba8:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 
    
    //HS模式下产生单bit外部中断，sstatus.sie=0，且sip.SEIP=0，sie.SIE=0
    TEST_SETUP_EXCEPT();
    8000ebac:	0ff0000f          	fence
    8000ebb0:	4785                	li	a5,1
    8000ebb2:	00f41023          	sh	a5,0(s0)
    8000ebb6:	0002e797          	auipc	a5,0x2e
    8000ebba:	4807b923          	sd	zero,1170(a5) # 8003d048 <excpt+0x38>
    8000ebbe:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000ebc2:	4511                	li	a0,4
    8000ebc4:	f1bf10ef          	jal	80000ade <goto_priv>
    CSRC(CSR_SSTATUS,1ULL << 1)     
    8000ebc8:	10017073          	csrc	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    8000ebcc:	20000793          	li	a5,512
    8000ebd0:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    8000ebd4:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    8000ebd8:	450d                	li	a0,3
    8000ebda:	f05f10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=0 and sie.seie=0",
    8000ebde:	08200593          	li	a1,130
    8000ebe2:	00012617          	auipc	a2,0x12
    8000ebe6:	83660613          	add	a2,a2,-1994 # 80020418 <__func__.1+0x3770>
    8000ebea:	0000e517          	auipc	a0,0xe
    8000ebee:	3be50513          	add	a0,a0,958 # 8001cfa8 <__func__.1+0x300>
    8000ebf2:	7f40c0ef          	jal	8001b3e6 <printf>
    8000ebf6:	00144783          	lbu	a5,1(s0)
    8000ebfa:	0000e597          	auipc	a1,0xe
    8000ebfe:	38658593          	add	a1,a1,902 # 8001cf80 <__func__.1+0x2d8>
    8000ec02:	e789                	bnez	a5,8000ec0c <external_interrupt_SEI+0x2ee>
    8000ec04:	0000e597          	auipc	a1,0xe
    8000ec08:	36c58593          	add	a1,a1,876 # 8001cf70 <__func__.1+0x2c8>
    8000ec0c:	0000e517          	auipc	a0,0xe
    8000ec10:	3b450513          	add	a0,a0,948 # 8001cfc0 <__func__.1+0x318>
    8000ec14:	7d20c0ef          	jal	8001b3e6 <printf>
    8000ec18:	00144783          	lbu	a5,1(s0)
    8000ec1c:	3c079a63          	bnez	a5,8000eff0 <external_interrupt_SEI+0x6d2>
    8000ec20:	4529                	li	a0,10
    8000ec22:	6960b0ef          	jal	8001a2b8 <putchar>
    8000ec26:	c489                	beqz	s1,8000ec30 <external_interrupt_SEI+0x312>
    8000ec28:	00144483          	lbu	s1,1(s0)
    8000ec2c:	0014c493          	xor	s1,s1,1

//---------------------------------------------------------
    

    //VS模式下产生单bit外部中断，sstatus.sie=1，且sip，sie对应的SEIP、SEIE拉高
    TEST_SETUP_EXCEPT();
    8000ec30:	0ff0000f          	fence
    8000ec34:	4785                	li	a5,1
    8000ec36:	00f41023          	sh	a5,0(s0)
    8000ec3a:	0002e797          	auipc	a5,0x2e
    8000ec3e:	4007b723          	sd	zero,1038(a5) # 8003d048 <excpt+0x38>
    8000ec42:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000ec46:	4511                	li	a0,4
    8000ec48:	e97f10ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    8000ec4c:	10016073          	csrs	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    8000ec50:	20000793          	li	a5,512
    8000ec54:	1047a073          	csrs	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    8000ec58:	1447a073          	csrs	sip,a5

    
    goto_priv(PRIV_VS);
    8000ec5c:	4509                	li	a0,2
    8000ec5e:	e81f10ef          	jal	80000ade <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8000ec62:	08200593          	li	a1,130
    8000ec66:	00012617          	auipc	a2,0x12
    8000ec6a:	80260613          	add	a2,a2,-2046 # 80020468 <__func__.1+0x37c0>
    8000ec6e:	0000e517          	auipc	a0,0xe
    8000ec72:	33a50513          	add	a0,a0,826 # 8001cfa8 <__func__.1+0x300>
    8000ec76:	7700c0ef          	jal	8001b3e6 <printf>
    8000ec7a:	00144783          	lbu	a5,1(s0)
    8000ec7e:	0000e597          	auipc	a1,0xe
    8000ec82:	30258593          	add	a1,a1,770 # 8001cf80 <__func__.1+0x2d8>
    8000ec86:	c799                	beqz	a5,8000ec94 <external_interrupt_SEI+0x376>
    8000ec88:	57fd                	li	a5,-1
    8000ec8a:	6418                	ld	a4,8(s0)
    8000ec8c:	17fe                	sll	a5,a5,0x3f
    8000ec8e:	07a5                	add	a5,a5,9
    8000ec90:	3ef70063          	beq	a4,a5,8000f070 <external_interrupt_SEI+0x752>
    8000ec94:	0000e517          	auipc	a0,0xe
    8000ec98:	32c50513          	add	a0,a0,812 # 8001cfc0 <__func__.1+0x318>
    8000ec9c:	74a0c0ef          	jal	8001b3e6 <printf>
    8000eca0:	00144783          	lbu	a5,1(s0)
    8000eca4:	c799                	beqz	a5,8000ecb2 <external_interrupt_SEI+0x394>
    8000eca6:	57fd                	li	a5,-1
    8000eca8:	6418                	ld	a4,8(s0)
    8000ecaa:	17fe                	sll	a5,a5,0x3f
    8000ecac:	07a5                	add	a5,a5,9
    8000ecae:	30f70863          	beq	a4,a5,8000efbe <external_interrupt_SEI+0x6a0>
    8000ecb2:	0000e517          	auipc	a0,0xe
    8000ecb6:	31650513          	add	a0,a0,790 # 8001cfc8 <__func__.1+0x320>
    8000ecba:	72c0c0ef          	jal	8001b3e6 <printf>
    8000ecbe:	02900513          	li	a0,41
    8000ecc2:	5f60b0ef          	jal	8001a2b8 <putchar>
    8000ecc6:	4529                	li	a0,10
    8000ecc8:	5f00b0ef          	jal	8001a2b8 <putchar>
    8000eccc:	c491                	beqz	s1,8000ecd8 <external_interrupt_SEI+0x3ba>
    8000ecce:	00144783          	lbu	a5,1(s0)
    8000ecd2:	4481                	li	s1,0
    8000ecd4:	2a079f63          	bnez	a5,8000ef92 <external_interrupt_SEI+0x674>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //vs模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=1，sie=0
    TEST_SETUP_EXCEPT();
    8000ecd8:	0ff0000f          	fence
    8000ecdc:	4785                	li	a5,1
    8000ecde:	00f41023          	sh	a5,0(s0)
    8000ece2:	0002e797          	auipc	a5,0x2e
    8000ece6:	3607b323          	sd	zero,870(a5) # 8003d048 <excpt+0x38>
    8000ecea:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000ecee:	4511                	li	a0,4
    8000ecf0:	deff10ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    8000ecf4:	10016073          	csrs	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    8000ecf8:	20000793          	li	a5,512
    8000ecfc:	1047b073          	csrc	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    8000ed00:	1447a073          	csrs	sip,a5

    
    goto_priv(PRIV_VS);
    8000ed04:	4509                	li	a0,2
    8000ed06:	dd9f10ef          	jal	80000ade <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    8000ed0a:	08200593          	li	a1,130
    8000ed0e:	00011617          	auipc	a2,0x11
    8000ed12:	7b260613          	add	a2,a2,1970 # 800204c0 <__func__.1+0x3818>
    8000ed16:	0000e517          	auipc	a0,0xe
    8000ed1a:	29250513          	add	a0,a0,658 # 8001cfa8 <__func__.1+0x300>
    8000ed1e:	6c80c0ef          	jal	8001b3e6 <printf>
    8000ed22:	00144783          	lbu	a5,1(s0)
    8000ed26:	0000e597          	auipc	a1,0xe
    8000ed2a:	25a58593          	add	a1,a1,602 # 8001cf80 <__func__.1+0x2d8>
    8000ed2e:	c799                	beqz	a5,8000ed3c <external_interrupt_SEI+0x41e>
    8000ed30:	57fd                	li	a5,-1
    8000ed32:	6418                	ld	a4,8(s0)
    8000ed34:	17fe                	sll	a5,a5,0x3f
    8000ed36:	07a5                	add	a5,a5,9
    8000ed38:	32f70363          	beq	a4,a5,8000f05e <external_interrupt_SEI+0x740>
    8000ed3c:	0000e517          	auipc	a0,0xe
    8000ed40:	28450513          	add	a0,a0,644 # 8001cfc0 <__func__.1+0x318>
    8000ed44:	6a20c0ef          	jal	8001b3e6 <printf>
    8000ed48:	00144783          	lbu	a5,1(s0)
    8000ed4c:	c799                	beqz	a5,8000ed5a <external_interrupt_SEI+0x43c>
    8000ed4e:	57fd                	li	a5,-1
    8000ed50:	6418                	ld	a4,8(s0)
    8000ed52:	17fe                	sll	a5,a5,0x3f
    8000ed54:	07a5                	add	a5,a5,9
    8000ed56:	28f70863          	beq	a4,a5,8000efe6 <external_interrupt_SEI+0x6c8>
    8000ed5a:	0000e517          	auipc	a0,0xe
    8000ed5e:	26e50513          	add	a0,a0,622 # 8001cfc8 <__func__.1+0x320>
    8000ed62:	6840c0ef          	jal	8001b3e6 <printf>
    8000ed66:	02900513          	li	a0,41
    8000ed6a:	54e0b0ef          	jal	8001a2b8 <putchar>
    8000ed6e:	4529                	li	a0,10
    8000ed70:	5480b0ef          	jal	8001a2b8 <putchar>
    8000ed74:	c491                	beqz	s1,8000ed80 <external_interrupt_SEI+0x462>
    8000ed76:	00144783          	lbu	a5,1(s0)
    8000ed7a:	4481                	li	s1,0
    8000ed7c:	20079063          	bnez	a5,8000ef7c <external_interrupt_SEI+0x65e>
        excpt.cause == CAUSE_SEI &&
        excpt.priv == PRIV_M
    ); 

    //vs模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=0，sie=1
    TEST_SETUP_EXCEPT();
    8000ed80:	0ff0000f          	fence
    8000ed84:	4785                	li	a5,1
    8000ed86:	00f41023          	sh	a5,0(s0)
    8000ed8a:	0002e797          	auipc	a5,0x2e
    8000ed8e:	2a07bf23          	sd	zero,702(a5) # 8003d048 <excpt+0x38>
    8000ed92:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000ed96:	4511                	li	a0,4
    8000ed98:	d47f10ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    8000ed9c:	10016073          	csrs	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    8000eda0:	20000793          	li	a5,512
    8000eda4:	1047a073          	csrs	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    8000eda8:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    8000edac:	4509                	li	a0,2
    8000edae:	d31f10ef          	jal	80000ade <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8000edb2:	08200593          	li	a1,130
    8000edb6:	00011617          	auipc	a2,0x11
    8000edba:	76260613          	add	a2,a2,1890 # 80020518 <__func__.1+0x3870>
    8000edbe:	0000e517          	auipc	a0,0xe
    8000edc2:	1ea50513          	add	a0,a0,490 # 8001cfa8 <__func__.1+0x300>
    8000edc6:	6200c0ef          	jal	8001b3e6 <printf>
    8000edca:	00144783          	lbu	a5,1(s0)
    8000edce:	0000e597          	auipc	a1,0xe
    8000edd2:	1b258593          	add	a1,a1,434 # 8001cf80 <__func__.1+0x2d8>
    8000edd6:	c799                	beqz	a5,8000ede4 <external_interrupt_SEI+0x4c6>
    8000edd8:	57fd                	li	a5,-1
    8000edda:	6418                	ld	a4,8(s0)
    8000eddc:	17fe                	sll	a5,a5,0x3f
    8000edde:	07a5                	add	a5,a5,9
    8000ede0:	2af70f63          	beq	a4,a5,8000f09e <external_interrupt_SEI+0x780>
    8000ede4:	0000e517          	auipc	a0,0xe
    8000ede8:	1dc50513          	add	a0,a0,476 # 8001cfc0 <__func__.1+0x318>
    8000edec:	5fa0c0ef          	jal	8001b3e6 <printf>
    8000edf0:	00144783          	lbu	a5,1(s0)
    8000edf4:	c799                	beqz	a5,8000ee02 <external_interrupt_SEI+0x4e4>
    8000edf6:	57fd                	li	a5,-1
    8000edf8:	6418                	ld	a4,8(s0)
    8000edfa:	17fe                	sll	a5,a5,0x3f
    8000edfc:	07a5                	add	a5,a5,9
    8000edfe:	1cf70f63          	beq	a4,a5,8000efdc <external_interrupt_SEI+0x6be>
    8000ee02:	0000e517          	auipc	a0,0xe
    8000ee06:	1c650513          	add	a0,a0,454 # 8001cfc8 <__func__.1+0x320>
    8000ee0a:	5dc0c0ef          	jal	8001b3e6 <printf>
    8000ee0e:	02900513          	li	a0,41
    8000ee12:	4a60b0ef          	jal	8001a2b8 <putchar>
    8000ee16:	4529                	li	a0,10
    8000ee18:	4a00b0ef          	jal	8001a2b8 <putchar>
    8000ee1c:	c491                	beqz	s1,8000ee28 <external_interrupt_SEI+0x50a>
    8000ee1e:	00144783          	lbu	a5,1(s0)
    8000ee22:	4481                	li	s1,0
    8000ee24:	14079163          	bnez	a5,8000ef66 <external_interrupt_SEI+0x648>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //低特权模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=0，sie=0
    TEST_SETUP_EXCEPT();
    8000ee28:	0ff0000f          	fence
    8000ee2c:	4785                	li	a5,1
    8000ee2e:	00f41023          	sh	a5,0(s0)
    8000ee32:	0002e797          	auipc	a5,0x2e
    8000ee36:	2007bb23          	sd	zero,534(a5) # 8003d048 <excpt+0x38>
    8000ee3a:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000ee3e:	4511                	li	a0,4
    8000ee40:	c9ff10ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    8000ee44:	10016073          	csrs	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    8000ee48:	20000793          	li	a5,512
    8000ee4c:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    8000ee50:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    8000ee54:	4509                	li	a0,2
    8000ee56:	c89f10ef          	jal	80000ade <goto_priv>

    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    8000ee5a:	08200593          	li	a1,130
    8000ee5e:	00011617          	auipc	a2,0x11
    8000ee62:	71260613          	add	a2,a2,1810 # 80020570 <__func__.1+0x38c8>
    8000ee66:	0000e517          	auipc	a0,0xe
    8000ee6a:	14250513          	add	a0,a0,322 # 8001cfa8 <__func__.1+0x300>
    8000ee6e:	5780c0ef          	jal	8001b3e6 <printf>
    8000ee72:	00144783          	lbu	a5,1(s0)
    8000ee76:	0000e597          	auipc	a1,0xe
    8000ee7a:	10a58593          	add	a1,a1,266 # 8001cf80 <__func__.1+0x2d8>
    8000ee7e:	e789                	bnez	a5,8000ee88 <external_interrupt_SEI+0x56a>
    8000ee80:	0000e597          	auipc	a1,0xe
    8000ee84:	0f058593          	add	a1,a1,240 # 8001cf70 <__func__.1+0x2c8>
    8000ee88:	0000e517          	auipc	a0,0xe
    8000ee8c:	13850513          	add	a0,a0,312 # 8001cfc0 <__func__.1+0x318>
    8000ee90:	5560c0ef          	jal	8001b3e6 <printf>
    8000ee94:	00144783          	lbu	a5,1(s0)
    8000ee98:	1a079863          	bnez	a5,8000f048 <external_interrupt_SEI+0x72a>
    8000ee9c:	4529                	li	a0,10
    8000ee9e:	41a0b0ef          	jal	8001a2b8 <putchar>
    8000eea2:	c489                	beqz	s1,8000eeac <external_interrupt_SEI+0x58e>
    8000eea4:	00144483          	lbu	s1,1(s0)
    8000eea8:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 

    //低特权模式下产生HS级单bit外部中断，sstatus.sie=0，且sip=0，sie=0
    TEST_SETUP_EXCEPT();
    8000eeac:	0ff0000f          	fence
    8000eeb0:	4785                	li	a5,1
    8000eeb2:	00f41023          	sh	a5,0(s0)
    8000eeb6:	0002e797          	auipc	a5,0x2e
    8000eeba:	1807b923          	sd	zero,402(a5) # 8003d048 <excpt+0x38>
    8000eebe:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000eec2:	4511                	li	a0,4
    8000eec4:	c1bf10ef          	jal	80000ade <goto_priv>
    CSRC(CSR_SSTATUS,1ULL << 1);     
    8000eec8:	10017073          	csrc	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    8000eecc:	20000793          	li	a5,512
    8000eed0:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    8000eed4:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    8000eed8:	4509                	li	a0,2
    8000eeda:	c05f10ef          	jal	80000ade <goto_priv>

    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    8000eede:	08200593          	li	a1,130
    8000eee2:	00011617          	auipc	a2,0x11
    8000eee6:	68e60613          	add	a2,a2,1678 # 80020570 <__func__.1+0x38c8>
    8000eeea:	0000e517          	auipc	a0,0xe
    8000eeee:	0be50513          	add	a0,a0,190 # 8001cfa8 <__func__.1+0x300>
    8000eef2:	4f40c0ef          	jal	8001b3e6 <printf>
    8000eef6:	00144783          	lbu	a5,1(s0)
    8000eefa:	0000e597          	auipc	a1,0xe
    8000eefe:	08658593          	add	a1,a1,134 # 8001cf80 <__func__.1+0x2d8>
    8000ef02:	e789                	bnez	a5,8000ef0c <external_interrupt_SEI+0x5ee>
    8000ef04:	0000e597          	auipc	a1,0xe
    8000ef08:	06c58593          	add	a1,a1,108 # 8001cf70 <__func__.1+0x2c8>
    8000ef0c:	0000e517          	auipc	a0,0xe
    8000ef10:	0b450513          	add	a0,a0,180 # 8001cfc0 <__func__.1+0x318>
    8000ef14:	4d20c0ef          	jal	8001b3e6 <printf>
    8000ef18:	00144783          	lbu	a5,1(s0)
    8000ef1c:	10079b63          	bnez	a5,8000f032 <external_interrupt_SEI+0x714>
    8000ef20:	4529                	li	a0,10
    8000ef22:	3960b0ef          	jal	8001a2b8 <putchar>
    8000ef26:	c481                	beqz	s1,8000ef2e <external_interrupt_SEI+0x610>
    8000ef28:	00144783          	lbu	a5,1(s0)
    8000ef2c:	c79d                	beqz	a5,8000ef5a <external_interrupt_SEI+0x63c>
    8000ef2e:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    8000ef30:	0000e597          	auipc	a1,0xe
    8000ef34:	05058593          	add	a1,a1,80 # 8001cf80 <__func__.1+0x2d8>
    8000ef38:	0000e517          	auipc	a0,0xe
    8000ef3c:	0f050513          	add	a0,a0,240 # 8001d028 <__func__.1+0x380>
    8000ef40:	4a60c0ef          	jal	8001b3e6 <printf>
    8000ef44:	4511                	li	a0,4
    8000ef46:	b99f10ef          	jal	80000ade <goto_priv>
    8000ef4a:	bdcf20ef          	jal	80001326 <reset_state>
}
    8000ef4e:	60e2                	ld	ra,24(sp)
    8000ef50:	8522                	mv	a0,s0
    8000ef52:	6442                	ld	s0,16(sp)
    8000ef54:	64a2                	ld	s1,8(sp)
    8000ef56:	6105                	add	sp,sp,32
    8000ef58:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    8000ef5a:	4405                	li	s0,1
    TEST_END();
    8000ef5c:	0000e597          	auipc	a1,0xe
    8000ef60:	01458593          	add	a1,a1,20 # 8001cf70 <__func__.1+0x2c8>
    8000ef64:	bfd1                	j	8000ef38 <external_interrupt_SEI+0x61a>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8000ef66:	57fd                	li	a5,-1
    8000ef68:	6418                	ld	a4,8(s0)
    8000ef6a:	17fe                	sll	a5,a5,0x3f
    8000ef6c:	07a5                	add	a5,a5,9
    8000ef6e:	eaf71de3          	bne	a4,a5,8000ee28 <external_interrupt_SEI+0x50a>
    8000ef72:	4044                	lw	s1,4(s0)
    8000ef74:	14f1                	add	s1,s1,-4
    8000ef76:	0014b493          	seqz	s1,s1
    8000ef7a:	b57d                	j	8000ee28 <external_interrupt_SEI+0x50a>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    8000ef7c:	57fd                	li	a5,-1
    8000ef7e:	6418                	ld	a4,8(s0)
    8000ef80:	17fe                	sll	a5,a5,0x3f
    8000ef82:	07a5                	add	a5,a5,9
    8000ef84:	def71ee3          	bne	a4,a5,8000ed80 <external_interrupt_SEI+0x462>
    8000ef88:	4044                	lw	s1,4(s0)
    8000ef8a:	14f1                	add	s1,s1,-4
    8000ef8c:	0014b493          	seqz	s1,s1
    8000ef90:	bbc5                	j	8000ed80 <external_interrupt_SEI+0x462>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8000ef92:	57fd                	li	a5,-1
    8000ef94:	6418                	ld	a4,8(s0)
    8000ef96:	17fe                	sll	a5,a5,0x3f
    8000ef98:	07a5                	add	a5,a5,9
    8000ef9a:	d2f71fe3          	bne	a4,a5,8000ecd8 <external_interrupt_SEI+0x3ba>
    8000ef9e:	4044                	lw	s1,4(s0)
    8000efa0:	14f1                	add	s1,s1,-4
    8000efa2:	0014b493          	seqz	s1,s1
    8000efa6:	bb0d                	j	8000ecd8 <external_interrupt_SEI+0x3ba>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8000efa8:	57fd                	li	a5,-1
    8000efaa:	6418                	ld	a4,8(s0)
    8000efac:	17fe                	sll	a5,a5,0x3f
    8000efae:	07a5                	add	a5,a5,9
    8000efb0:	b6f71ce3          	bne	a4,a5,8000eb28 <external_interrupt_SEI+0x20a>
    8000efb4:	4044                	lw	s1,4(s0)
    8000efb6:	14f1                	add	s1,s1,-4
    8000efb8:	0014b493          	seqz	s1,s1
    8000efbc:	b6b5                	j	8000eb28 <external_interrupt_SEI+0x20a>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8000efbe:	4058                	lw	a4,4(s0)
    8000efc0:	4791                	li	a5,4
    8000efc2:	cef718e3          	bne	a4,a5,8000ecb2 <external_interrupt_SEI+0x394>
    8000efc6:	b301                	j	8000ecc6 <external_interrupt_SEI+0x3a8>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8000efc8:	4058                	lw	a4,4(s0)
    8000efca:	4791                	li	a5,4
    8000efcc:	b2f71be3          	bne	a4,a5,8000eb02 <external_interrupt_SEI+0x1e4>
    8000efd0:	b699                	j	8000eb16 <external_interrupt_SEI+0x1f8>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8000efd2:	4058                	lw	a4,4(s0)
    8000efd4:	4791                	li	a5,4
    8000efd6:	9ef71ae3          	bne	a4,a5,8000e9ca <external_interrupt_SEI+0xac>
    8000efda:	b411                	j	8000e9de <external_interrupt_SEI+0xc0>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8000efdc:	4058                	lw	a4,4(s0)
    8000efde:	4791                	li	a5,4
    8000efe0:	e2f711e3          	bne	a4,a5,8000ee02 <external_interrupt_SEI+0x4e4>
    8000efe4:	bd0d                	j	8000ee16 <external_interrupt_SEI+0x4f8>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    8000efe6:	4058                	lw	a4,4(s0)
    8000efe8:	4791                	li	a5,4
    8000efea:	d6f718e3          	bne	a4,a5,8000ed5a <external_interrupt_SEI+0x43c>
    8000efee:	b341                	j	8000ed6e <external_interrupt_SEI+0x450>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=0 and sie.seie=0",
    8000eff0:	0000e517          	auipc	a0,0xe
    8000eff4:	fd850513          	add	a0,a0,-40 # 8001cfc8 <__func__.1+0x320>
    8000eff8:	3ee0c0ef          	jal	8001b3e6 <printf>
    8000effc:	02900513          	li	a0,41
    8000f000:	2b80b0ef          	jal	8001a2b8 <putchar>
    8000f004:	b931                	j	8000ec20 <external_interrupt_SEI+0x302>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=1 and sie.seie=0",
    8000f006:	0000e517          	auipc	a0,0xe
    8000f00a:	fc250513          	add	a0,a0,-62 # 8001cfc8 <__func__.1+0x320>
    8000f00e:	3d80c0ef          	jal	8001b3e6 <printf>
    8000f012:	02900513          	li	a0,41
    8000f016:	2a20b0ef          	jal	8001a2b8 <putchar>
    8000f01a:	b649                	j	8000eb9c <external_interrupt_SEI+0x27e>
    TEST_ASSERT("hs mode leads to no interrupt  when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    8000f01c:	0000e517          	auipc	a0,0xe
    8000f020:	fac50513          	add	a0,a0,-84 # 8001cfc8 <__func__.1+0x320>
    8000f024:	3c20c0ef          	jal	8001b3e6 <printf>
    8000f028:	02900513          	li	a0,41
    8000f02c:	28c0b0ef          	jal	8001a2b8 <putchar>
    8000f030:	bc35                	j	8000ea6c <external_interrupt_SEI+0x14e>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    8000f032:	0000e517          	auipc	a0,0xe
    8000f036:	f9650513          	add	a0,a0,-106 # 8001cfc8 <__func__.1+0x320>
    8000f03a:	3ac0c0ef          	jal	8001b3e6 <printf>
    8000f03e:	02900513          	li	a0,41
    8000f042:	2760b0ef          	jal	8001a2b8 <putchar>
    8000f046:	bde9                	j	8000ef20 <external_interrupt_SEI+0x602>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    8000f048:	0000e517          	auipc	a0,0xe
    8000f04c:	f8050513          	add	a0,a0,-128 # 8001cfc8 <__func__.1+0x320>
    8000f050:	3960c0ef          	jal	8001b3e6 <printf>
    8000f054:	02900513          	li	a0,41
    8000f058:	2600b0ef          	jal	8001a2b8 <putchar>
    8000f05c:	b581                	j	8000ee9c <external_interrupt_SEI+0x57e>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    8000f05e:	4058                	lw	a4,4(s0)
    8000f060:	4791                	li	a5,4
    8000f062:	ccf71de3          	bne	a4,a5,8000ed3c <external_interrupt_SEI+0x41e>
    8000f066:	0000e597          	auipc	a1,0xe
    8000f06a:	f0a58593          	add	a1,a1,-246 # 8001cf70 <__func__.1+0x2c8>
    8000f06e:	b1f9                	j	8000ed3c <external_interrupt_SEI+0x41e>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8000f070:	4058                	lw	a4,4(s0)
    8000f072:	4791                	li	a5,4
    8000f074:	c2f710e3          	bne	a4,a5,8000ec94 <external_interrupt_SEI+0x376>
    8000f078:	0000e597          	auipc	a1,0xe
    8000f07c:	ef858593          	add	a1,a1,-264 # 8001cf70 <__func__.1+0x2c8>
    8000f080:	b911                	j	8000ec94 <external_interrupt_SEI+0x376>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8000f082:	4044                	lw	s1,4(s0)
    8000f084:	14f1                	add	s1,s1,-4
    8000f086:	0014b493          	seqz	s1,s1
    8000f08a:	b2bd                	j	8000e9f8 <external_interrupt_SEI+0xda>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8000f08c:	4058                	lw	a4,4(s0)
    8000f08e:	4791                	li	a5,4
    8000f090:	a4f71ae3          	bne	a4,a5,8000eae4 <external_interrupt_SEI+0x1c6>
    8000f094:	0000e597          	auipc	a1,0xe
    8000f098:	edc58593          	add	a1,a1,-292 # 8001cf70 <__func__.1+0x2c8>
    8000f09c:	b4a1                	j	8000eae4 <external_interrupt_SEI+0x1c6>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8000f09e:	4058                	lw	a4,4(s0)
    8000f0a0:	4791                	li	a5,4
    8000f0a2:	d4f711e3          	bne	a4,a5,8000ede4 <external_interrupt_SEI+0x4c6>
    8000f0a6:	0000e597          	auipc	a1,0xe
    8000f0aa:	eca58593          	add	a1,a1,-310 # 8001cf70 <__func__.1+0x2c8>
    8000f0ae:	bb1d                	j	8000ede4 <external_interrupt_SEI+0x4c6>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8000f0b0:	4058                	lw	a4,4(s0)
    8000f0b2:	4791                	li	a5,4
    8000f0b4:	8ef71ce3          	bne	a4,a5,8000e9ac <external_interrupt_SEI+0x8e>
    8000f0b8:	0000e597          	auipc	a1,0xe
    8000f0bc:	eb858593          	add	a1,a1,-328 # 8001cf70 <__func__.1+0x2c8>
    8000f0c0:	8edff06f          	j	8000e9ac <external_interrupt_SEI+0x8e>

000000008000f0c4 <external_interrupt_VSEI>:

bool external_interrupt_VSEI() {
    8000f0c4:	1101                	add	sp,sp,-32

    TEST_START();
    8000f0c6:	0000d597          	auipc	a1,0xd
    8000f0ca:	07258593          	add	a1,a1,114 # 8001c138 <__func__.0>
    8000f0ce:	0000e517          	auipc	a0,0xe
    8000f0d2:	ec250513          	add	a0,a0,-318 # 8001cf90 <__func__.1+0x2e8>
bool external_interrupt_VSEI() {
    8000f0d6:	ec06                	sd	ra,24(sp)
    8000f0d8:	e822                	sd	s0,16(sp)
    8000f0da:	e426                	sd	s1,8(sp)
    8000f0dc:	e04a                	sd	s2,0(sp)
    TEST_START();
    8000f0de:	3080c0ef          	jal	8001b3e6 <printf>
    8000f0e2:	4529                	li	a0,10
    8000f0e4:	1d40b0ef          	jal	8001a2b8 <putchar>

    TEST_SETUP_EXCEPT();
    8000f0e8:	0ff0000f          	fence
    8000f0ec:	4785                	li	a5,1
    8000f0ee:	0002e417          	auipc	s0,0x2e
    8000f0f2:	f2240413          	add	s0,s0,-222 # 8003d010 <excpt>
    8000f0f6:	00f41023          	sh	a5,0(s0)
    8000f0fa:	0002e797          	auipc	a5,0x2e
    8000f0fe:	f407b723          	sd	zero,-178(a5) # 8003d048 <excpt+0x38>
    8000f102:	0ff0000f          	fence

   
    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高
    goto_priv(PRIV_M);
    8000f106:	4511                	li	a0,4
    8000f108:	9d7f10ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    8000f10c:	40000793          	li	a5,1024
    8000f110:	6047a073          	csrs	hie,a5
    CSRS(CSR_HIP,HIP_VSEIP);
    8000f114:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    8000f118:	4509                	li	a0,2
    8000f11a:	9c5f10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    8000f11e:	08200593          	li	a1,130
    8000f122:	00011617          	auipc	a2,0x11
    8000f126:	49e60613          	add	a2,a2,1182 # 800205c0 <__func__.1+0x3918>
    8000f12a:	0000e517          	auipc	a0,0xe
    8000f12e:	e7e50513          	add	a0,a0,-386 # 8001cfa8 <__func__.1+0x300>
    8000f132:	2b40c0ef          	jal	8001b3e6 <printf>
    8000f136:	00144783          	lbu	a5,1(s0)
    8000f13a:	0000e597          	auipc	a1,0xe
    8000f13e:	e4658593          	add	a1,a1,-442 # 8001cf80 <__func__.1+0x2d8>
    8000f142:	c799                	beqz	a5,8000f150 <external_interrupt_VSEI+0x8c>
    8000f144:	57fd                	li	a5,-1
    8000f146:	6418                	ld	a4,8(s0)
    8000f148:	17fe                	sll	a5,a5,0x3f
    8000f14a:	07a9                	add	a5,a5,10
    8000f14c:	5ef70063          	beq	a4,a5,8000f72c <external_interrupt_VSEI+0x668>
    8000f150:	0000e517          	auipc	a0,0xe
    8000f154:	e7050513          	add	a0,a0,-400 # 8001cfc0 <__func__.1+0x318>
    8000f158:	28e0c0ef          	jal	8001b3e6 <printf>
    8000f15c:	00144783          	lbu	a5,1(s0)
    8000f160:	c799                	beqz	a5,8000f16e <external_interrupt_VSEI+0xaa>
    8000f162:	57fd                	li	a5,-1
    8000f164:	6418                	ld	a4,8(s0)
    8000f166:	17fe                	sll	a5,a5,0x3f
    8000f168:	07a9                	add	a5,a5,10
    8000f16a:	54f70063          	beq	a4,a5,8000f6aa <external_interrupt_VSEI+0x5e6>
    8000f16e:	0000e517          	auipc	a0,0xe
    8000f172:	e5a50513          	add	a0,a0,-422 # 8001cfc8 <__func__.1+0x320>
    8000f176:	2700c0ef          	jal	8001b3e6 <printf>
    8000f17a:	02900513          	li	a0,41
    8000f17e:	13a0b0ef          	jal	8001a2b8 <putchar>
    8000f182:	4529                	li	a0,10
    8000f184:	1340b0ef          	jal	8001a2b8 <putchar>
    8000f188:	00144783          	lbu	a5,1(s0)
    8000f18c:	4481                	li	s1,0
    8000f18e:	c799                	beqz	a5,8000f19c <external_interrupt_VSEI+0xd8>
    8000f190:	57fd                	li	a5,-1
    8000f192:	6418                	ld	a4,8(s0)
    8000f194:	17fe                	sll	a5,a5,0x3f
    8000f196:	07a9                	add	a5,a5,10
    8000f198:	56f70c63          	beq	a4,a5,8000f710 <external_interrupt_VSEI+0x64c>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高 ,开mideleg
    TEST_SETUP_EXCEPT();
    8000f19c:	0ff0000f          	fence
    8000f1a0:	4785                	li	a5,1
    8000f1a2:	00f41023          	sh	a5,0(s0)
    8000f1a6:	0002e797          	auipc	a5,0x2e
    8000f1aa:	ea07b123          	sd	zero,-350(a5) # 8003d048 <excpt+0x38>
    8000f1ae:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000f1b2:	4511                	li	a0,4
    8000f1b4:	92bf10ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    8000f1b8:	40000793          	li	a5,1024
    8000f1bc:	6047a073          	csrs	hie,a5
    CSRS(CSR_MIDELEG,(uint64_t)-1);
    8000f1c0:	597d                	li	s2,-1
    8000f1c2:	30392073          	csrs	mideleg,s2
    CSRS(CSR_HIP,HIP_VSEIP);
    8000f1c6:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    8000f1ca:	4509                	li	a0,2
    8000f1cc:	913f10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    8000f1d0:	08200593          	li	a1,130
    8000f1d4:	00011617          	auipc	a2,0x11
    8000f1d8:	43c60613          	add	a2,a2,1084 # 80020610 <__func__.1+0x3968>
    8000f1dc:	0000e517          	auipc	a0,0xe
    8000f1e0:	dcc50513          	add	a0,a0,-564 # 8001cfa8 <__func__.1+0x300>
    8000f1e4:	2020c0ef          	jal	8001b3e6 <printf>
    8000f1e8:	00144783          	lbu	a5,1(s0)
    8000f1ec:	0000e597          	auipc	a1,0xe
    8000f1f0:	d9458593          	add	a1,a1,-620 # 8001cf80 <__func__.1+0x2d8>
    8000f1f4:	c791                	beqz	a5,8000f200 <external_interrupt_VSEI+0x13c>
    8000f1f6:	641c                	ld	a5,8(s0)
    8000f1f8:	197e                	sll	s2,s2,0x3f
    8000f1fa:	0929                	add	s2,s2,10
    8000f1fc:	51278f63          	beq	a5,s2,8000f71a <external_interrupt_VSEI+0x656>
    8000f200:	0000e517          	auipc	a0,0xe
    8000f204:	dc050513          	add	a0,a0,-576 # 8001cfc0 <__func__.1+0x318>
    8000f208:	1de0c0ef          	jal	8001b3e6 <printf>
    8000f20c:	00144783          	lbu	a5,1(s0)
    8000f210:	c799                	beqz	a5,8000f21e <external_interrupt_VSEI+0x15a>
    8000f212:	57fd                	li	a5,-1
    8000f214:	6418                	ld	a4,8(s0)
    8000f216:	17fe                	sll	a5,a5,0x3f
    8000f218:	07a9                	add	a5,a5,10
    8000f21a:	46f70e63          	beq	a4,a5,8000f696 <external_interrupt_VSEI+0x5d2>
    8000f21e:	0000e517          	auipc	a0,0xe
    8000f222:	daa50513          	add	a0,a0,-598 # 8001cfc8 <__func__.1+0x320>
    8000f226:	1c00c0ef          	jal	8001b3e6 <printf>
    8000f22a:	02900513          	li	a0,41
    8000f22e:	08a0b0ef          	jal	8001a2b8 <putchar>
    8000f232:	4529                	li	a0,10
    8000f234:	0840b0ef          	jal	8001a2b8 <putchar>
    8000f238:	c491                	beqz	s1,8000f244 <external_interrupt_VSEI+0x180>
    8000f23a:	00144783          	lbu	a5,1(s0)
    8000f23e:	4481                	li	s1,0
    8000f240:	44079063          	bnez	a5,8000f680 <external_interrupt_VSEI+0x5bc>
        excpt.priv == PRIV_HS
    ); 


    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高 ,开mideleg,hideleg
    TEST_SETUP_EXCEPT();
    8000f244:	0ff0000f          	fence
    8000f248:	4785                	li	a5,1
    8000f24a:	00f41023          	sh	a5,0(s0)
    8000f24e:	0002e797          	auipc	a5,0x2e
    8000f252:	de07bd23          	sd	zero,-518(a5) # 8003d048 <excpt+0x38>
    8000f256:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000f25a:	4511                	li	a0,4
    8000f25c:	883f10ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    8000f260:	40000793          	li	a5,1024
    8000f264:	6047a073          	csrs	hie,a5
    CSRS(CSR_MIDELEG,(uint64_t)-1);
    8000f268:	597d                	li	s2,-1
    8000f26a:	30392073          	csrs	mideleg,s2
    CSRS(CSR_HIDELEG,(uint64_t)-1);
    8000f26e:	60392073          	csrs	hideleg,s2
    CSRS(CSR_HIP,HIP_VSEIP);
    8000f272:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    8000f276:	4509                	li	a0,2
    8000f278:	867f10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    8000f27c:	08200593          	li	a1,130
    8000f280:	00011617          	auipc	a2,0x11
    8000f284:	3f060613          	add	a2,a2,1008 # 80020670 <__func__.1+0x39c8>
    8000f288:	0000e517          	auipc	a0,0xe
    8000f28c:	d2050513          	add	a0,a0,-736 # 8001cfa8 <__func__.1+0x300>
    8000f290:	1560c0ef          	jal	8001b3e6 <printf>
    8000f294:	00144783          	lbu	a5,1(s0)
    8000f298:	0000e597          	auipc	a1,0xe
    8000f29c:	ce858593          	add	a1,a1,-792 # 8001cf80 <__func__.1+0x2d8>
    8000f2a0:	c791                	beqz	a5,8000f2ac <external_interrupt_VSEI+0x1e8>
    8000f2a2:	641c                	ld	a5,8(s0)
    8000f2a4:	197e                	sll	s2,s2,0x3f
    8000f2a6:	0929                	add	s2,s2,10
    8000f2a8:	49278b63          	beq	a5,s2,8000f73e <external_interrupt_VSEI+0x67a>
    8000f2ac:	0000e517          	auipc	a0,0xe
    8000f2b0:	d1450513          	add	a0,a0,-748 # 8001cfc0 <__func__.1+0x318>
    8000f2b4:	1320c0ef          	jal	8001b3e6 <printf>
    8000f2b8:	00144783          	lbu	a5,1(s0)
    8000f2bc:	c799                	beqz	a5,8000f2ca <external_interrupt_VSEI+0x206>
    8000f2be:	57fd                	li	a5,-1
    8000f2c0:	6418                	ld	a4,8(s0)
    8000f2c2:	17fe                	sll	a5,a5,0x3f
    8000f2c4:	07a9                	add	a5,a5,10
    8000f2c6:	3cf70d63          	beq	a4,a5,8000f6a0 <external_interrupt_VSEI+0x5dc>
    8000f2ca:	0000e517          	auipc	a0,0xe
    8000f2ce:	cfe50513          	add	a0,a0,-770 # 8001cfc8 <__func__.1+0x320>
    8000f2d2:	1140c0ef          	jal	8001b3e6 <printf>
    8000f2d6:	02900513          	li	a0,41
    8000f2da:	7df0a0ef          	jal	8001a2b8 <putchar>
    8000f2de:	4529                	li	a0,10
    8000f2e0:	7d90a0ef          	jal	8001a2b8 <putchar>
    8000f2e4:	c491                	beqz	s1,8000f2f0 <external_interrupt_VSEI+0x22c>
    8000f2e6:	00144783          	lbu	a5,1(s0)
    8000f2ea:	4481                	li	s1,0
    8000f2ec:	36079f63          	bnez	a5,8000f66a <external_interrupt_VSEI+0x5a6>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=1，hie.SSEIE=0
    TEST_SETUP_EXCEPT();
    8000f2f0:	0ff0000f          	fence
    8000f2f4:	4785                	li	a5,1
    8000f2f6:	00f41023          	sh	a5,0(s0)
    8000f2fa:	0002e797          	auipc	a5,0x2e
    8000f2fe:	d407b723          	sd	zero,-690(a5) # 8003d048 <excpt+0x38>
    8000f302:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000f306:	4511                	li	a0,4
    8000f308:	fd6f10ef          	jal	80000ade <goto_priv>
    CSRC(CSR_HIE,HIE_VSEIE);
    8000f30c:	40000793          	li	a5,1024
    8000f310:	6047b073          	csrc	hie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    8000f314:	577d                	li	a4,-1
    8000f316:	30373073          	csrc	mideleg,a4
    CSRC(CSR_HIDELEG,(uint64_t)-1);
    8000f31a:	60373073          	csrc	hideleg,a4
    CSRS(CSR_HIP,HIP_VSEIP);
    8000f31e:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    8000f322:	4509                	li	a0,2
    8000f324:	fbaf10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("vs mode leads to no interrupt when hip.vseip=1 and hie.vseie=0",
    8000f328:	08200593          	li	a1,130
    8000f32c:	00011617          	auipc	a2,0x11
    8000f330:	3b460613          	add	a2,a2,948 # 800206e0 <__func__.1+0x3a38>
    8000f334:	0000e517          	auipc	a0,0xe
    8000f338:	c7450513          	add	a0,a0,-908 # 8001cfa8 <__func__.1+0x300>
    8000f33c:	0aa0c0ef          	jal	8001b3e6 <printf>
    8000f340:	00144783          	lbu	a5,1(s0)
    8000f344:	0000e597          	auipc	a1,0xe
    8000f348:	c3c58593          	add	a1,a1,-964 # 8001cf80 <__func__.1+0x2d8>
    8000f34c:	e789                	bnez	a5,8000f356 <external_interrupt_VSEI+0x292>
    8000f34e:	0000e597          	auipc	a1,0xe
    8000f352:	c2258593          	add	a1,a1,-990 # 8001cf70 <__func__.1+0x2c8>
    8000f356:	0000e517          	auipc	a0,0xe
    8000f35a:	c6a50513          	add	a0,a0,-918 # 8001cfc0 <__func__.1+0x318>
    8000f35e:	0880c0ef          	jal	8001b3e6 <printf>
    8000f362:	00144783          	lbu	a5,1(s0)
    8000f366:	38079163          	bnez	a5,8000f6e8 <external_interrupt_VSEI+0x624>
    8000f36a:	4529                	li	a0,10
    8000f36c:	74d0a0ef          	jal	8001a2b8 <putchar>
    8000f370:	c489                	beqz	s1,8000f37a <external_interrupt_VSEI+0x2b6>
    8000f372:	00144483          	lbu	s1,1(s0)
    8000f376:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1
    TEST_SETUP_EXCEPT();
    8000f37a:	0ff0000f          	fence
    8000f37e:	4785                	li	a5,1
    8000f380:	00f41023          	sh	a5,0(s0)
    8000f384:	0002e797          	auipc	a5,0x2e
    8000f388:	cc07b223          	sd	zero,-828(a5) # 8003d048 <excpt+0x38>
    8000f38c:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000f390:	4511                	li	a0,4
    8000f392:	f4cf10ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    8000f396:	40000793          	li	a5,1024
    8000f39a:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    8000f39e:	6447b073          	csrc	hip,a5

    goto_priv(PRIV_VS);
    8000f3a2:	4509                	li	a0,2
    8000f3a4:	f3af10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    8000f3a8:	08200593          	li	a1,130
    8000f3ac:	00011617          	auipc	a2,0x11
    8000f3b0:	37460613          	add	a2,a2,884 # 80020720 <__func__.1+0x3a78>
    8000f3b4:	0000e517          	auipc	a0,0xe
    8000f3b8:	bf450513          	add	a0,a0,-1036 # 8001cfa8 <__func__.1+0x300>
    8000f3bc:	02a0c0ef          	jal	8001b3e6 <printf>
    8000f3c0:	00144783          	lbu	a5,1(s0)
    8000f3c4:	0000e597          	auipc	a1,0xe
    8000f3c8:	bbc58593          	add	a1,a1,-1092 # 8001cf80 <__func__.1+0x2d8>
    8000f3cc:	e799                	bnez	a5,8000f3da <external_interrupt_VSEI+0x316>
    8000f3ce:	57fd                	li	a5,-1
    8000f3d0:	6418                	ld	a4,8(s0)
    8000f3d2:	17fe                	sll	a5,a5,0x3f
    8000f3d4:	07a9                	add	a5,a5,10
    8000f3d6:	38f70663          	beq	a4,a5,8000f762 <external_interrupt_VSEI+0x69e>
    8000f3da:	0000e517          	auipc	a0,0xe
    8000f3de:	be650513          	add	a0,a0,-1050 # 8001cfc0 <__func__.1+0x318>
    8000f3e2:	0040c0ef          	jal	8001b3e6 <printf>
    8000f3e6:	00144783          	lbu	a5,1(s0)
    8000f3ea:	e799                	bnez	a5,8000f3f8 <external_interrupt_VSEI+0x334>
    8000f3ec:	57fd                	li	a5,-1
    8000f3ee:	6418                	ld	a4,8(s0)
    8000f3f0:	17fe                	sll	a5,a5,0x3f
    8000f3f2:	07a9                	add	a5,a5,10
    8000f3f4:	2cf70063          	beq	a4,a5,8000f6b4 <external_interrupt_VSEI+0x5f0>
    8000f3f8:	0000e517          	auipc	a0,0xe
    8000f3fc:	bd050513          	add	a0,a0,-1072 # 8001cfc8 <__func__.1+0x320>
    8000f400:	7e70b0ef          	jal	8001b3e6 <printf>
    8000f404:	02900513          	li	a0,41
    8000f408:	6b10a0ef          	jal	8001a2b8 <putchar>
    8000f40c:	4529                	li	a0,10
    8000f40e:	6ab0a0ef          	jal	8001a2b8 <putchar>
    8000f412:	c491                	beqz	s1,8000f41e <external_interrupt_VSEI+0x35a>
    8000f414:	00144783          	lbu	a5,1(s0)
    8000f418:	4481                	li	s1,0
    8000f41a:	22078d63          	beqz	a5,8000f654 <external_interrupt_VSEI+0x590>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1，开mideleg
    TEST_SETUP_EXCEPT();
    8000f41e:	0ff0000f          	fence
    8000f422:	4785                	li	a5,1
    8000f424:	00f41023          	sh	a5,0(s0)
    8000f428:	0002e797          	auipc	a5,0x2e
    8000f42c:	c207b023          	sd	zero,-992(a5) # 8003d048 <excpt+0x38>
    8000f430:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000f434:	4511                	li	a0,4
    8000f436:	ea8f10ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    8000f43a:	40000793          	li	a5,1024
    8000f43e:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    8000f442:	6447b073          	csrc	hip,a5
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    8000f446:	597d                	li	s2,-1
    8000f448:	30391073          	csrw	mideleg,s2

    goto_priv(PRIV_VS);
    8000f44c:	4509                	li	a0,2
    8000f44e:	e90f10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    8000f452:	08200593          	li	a1,130
    8000f456:	00011617          	auipc	a2,0x11
    8000f45a:	31a60613          	add	a2,a2,794 # 80020770 <__func__.1+0x3ac8>
    8000f45e:	0000e517          	auipc	a0,0xe
    8000f462:	b4a50513          	add	a0,a0,-1206 # 8001cfa8 <__func__.1+0x300>
    8000f466:	7810b0ef          	jal	8001b3e6 <printf>
    8000f46a:	00144783          	lbu	a5,1(s0)
    8000f46e:	0000e597          	auipc	a1,0xe
    8000f472:	b1258593          	add	a1,a1,-1262 # 8001cf80 <__func__.1+0x2d8>
    8000f476:	e791                	bnez	a5,8000f482 <external_interrupt_VSEI+0x3be>
    8000f478:	641c                	ld	a5,8(s0)
    8000f47a:	197e                	sll	s2,s2,0x3f
    8000f47c:	0929                	add	s2,s2,10
    8000f47e:	29278063          	beq	a5,s2,8000f6fe <external_interrupt_VSEI+0x63a>
    8000f482:	0000e517          	auipc	a0,0xe
    8000f486:	b3e50513          	add	a0,a0,-1218 # 8001cfc0 <__func__.1+0x318>
    8000f48a:	75d0b0ef          	jal	8001b3e6 <printf>
    8000f48e:	00144783          	lbu	a5,1(s0)
    8000f492:	e799                	bnez	a5,8000f4a0 <external_interrupt_VSEI+0x3dc>
    8000f494:	57fd                	li	a5,-1
    8000f496:	6418                	ld	a4,8(s0)
    8000f498:	17fe                	sll	a5,a5,0x3f
    8000f49a:	07a9                	add	a5,a5,10
    8000f49c:	22f70663          	beq	a4,a5,8000f6c8 <external_interrupt_VSEI+0x604>
    8000f4a0:	0000e517          	auipc	a0,0xe
    8000f4a4:	b2850513          	add	a0,a0,-1240 # 8001cfc8 <__func__.1+0x320>
    8000f4a8:	73f0b0ef          	jal	8001b3e6 <printf>
    8000f4ac:	02900513          	li	a0,41
    8000f4b0:	6090a0ef          	jal	8001a2b8 <putchar>
    8000f4b4:	4529                	li	a0,10
    8000f4b6:	6030a0ef          	jal	8001a2b8 <putchar>
    8000f4ba:	c491                	beqz	s1,8000f4c6 <external_interrupt_VSEI+0x402>
    8000f4bc:	00144783          	lbu	a5,1(s0)
    8000f4c0:	4481                	li	s1,0
    8000f4c2:	16078e63          	beqz	a5,8000f63e <external_interrupt_VSEI+0x57a>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1，开mideleg,hideleg
    TEST_SETUP_EXCEPT();
    8000f4c6:	0ff0000f          	fence
    8000f4ca:	4785                	li	a5,1
    8000f4cc:	00f41023          	sh	a5,0(s0)
    8000f4d0:	0002e797          	auipc	a5,0x2e
    8000f4d4:	b607bc23          	sd	zero,-1160(a5) # 8003d048 <excpt+0x38>
    8000f4d8:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000f4dc:	4511                	li	a0,4
    8000f4de:	e00f10ef          	jal	80000ade <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    8000f4e2:	40000793          	li	a5,1024
    8000f4e6:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    8000f4ea:	6447b073          	csrc	hip,a5
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    8000f4ee:	597d                	li	s2,-1
    8000f4f0:	30391073          	csrw	mideleg,s2
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000f4f4:	60391073          	csrw	hideleg,s2

    goto_priv(PRIV_VS);
    8000f4f8:	4509                	li	a0,2
    8000f4fa:	de4f10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    8000f4fe:	08200593          	li	a1,130
    8000f502:	00011617          	auipc	a2,0x11
    8000f506:	2ce60613          	add	a2,a2,718 # 800207d0 <__func__.1+0x3b28>
    8000f50a:	0000e517          	auipc	a0,0xe
    8000f50e:	a9e50513          	add	a0,a0,-1378 # 8001cfa8 <__func__.1+0x300>
    8000f512:	6d50b0ef          	jal	8001b3e6 <printf>
    8000f516:	00144783          	lbu	a5,1(s0)
    8000f51a:	0000e597          	auipc	a1,0xe
    8000f51e:	a6658593          	add	a1,a1,-1434 # 8001cf80 <__func__.1+0x2d8>
    8000f522:	e791                	bnez	a5,8000f52e <external_interrupt_VSEI+0x46a>
    8000f524:	641c                	ld	a5,8(s0)
    8000f526:	197e                	sll	s2,s2,0x3f
    8000f528:	0929                	add	s2,s2,10
    8000f52a:	23278363          	beq	a5,s2,8000f750 <external_interrupt_VSEI+0x68c>
    8000f52e:	0000e517          	auipc	a0,0xe
    8000f532:	a9250513          	add	a0,a0,-1390 # 8001cfc0 <__func__.1+0x318>
    8000f536:	6b10b0ef          	jal	8001b3e6 <printf>
    8000f53a:	00144783          	lbu	a5,1(s0)
    8000f53e:	e799                	bnez	a5,8000f54c <external_interrupt_VSEI+0x488>
    8000f540:	57fd                	li	a5,-1
    8000f542:	6418                	ld	a4,8(s0)
    8000f544:	17fe                	sll	a5,a5,0x3f
    8000f546:	07a9                	add	a5,a5,10
    8000f548:	16f70b63          	beq	a4,a5,8000f6be <external_interrupt_VSEI+0x5fa>
    8000f54c:	0000e517          	auipc	a0,0xe
    8000f550:	a7c50513          	add	a0,a0,-1412 # 8001cfc8 <__func__.1+0x320>
    8000f554:	6930b0ef          	jal	8001b3e6 <printf>
    8000f558:	02900513          	li	a0,41
    8000f55c:	55d0a0ef          	jal	8001a2b8 <putchar>
    8000f560:	4529                	li	a0,10
    8000f562:	5570a0ef          	jal	8001a2b8 <putchar>
    8000f566:	c489                	beqz	s1,8000f570 <external_interrupt_VSEI+0x4ac>
    8000f568:	00144783          	lbu	a5,1(s0)
    8000f56c:	4481                	li	s1,0
    8000f56e:	cfcd                	beqz	a5,8000f628 <external_interrupt_VSEI+0x564>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=0
    TEST_SETUP_EXCEPT();
    8000f570:	0ff0000f          	fence
    8000f574:	4785                	li	a5,1
    8000f576:	00f41023          	sh	a5,0(s0)
    8000f57a:	0002e797          	auipc	a5,0x2e
    8000f57e:	ac07b723          	sd	zero,-1330(a5) # 8003d048 <excpt+0x38>
    8000f582:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000f586:	4511                	li	a0,4
    8000f588:	d56f10ef          	jal	80000ade <goto_priv>
    CSRC(CSR_HIE,HIE_VSEIE);
    8000f58c:	40000793          	li	a5,1024
    8000f590:	6047b073          	csrc	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    8000f594:	6447b073          	csrc	hip,a5

    goto_priv(PRIV_VS);
    8000f598:	4509                	li	a0,2
    8000f59a:	d44f10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    8000f59e:	08200593          	li	a1,130
    8000f5a2:	00011617          	auipc	a2,0x11
    8000f5a6:	29e60613          	add	a2,a2,670 # 80020840 <__func__.1+0x3b98>
    8000f5aa:	0000e517          	auipc	a0,0xe
    8000f5ae:	9fe50513          	add	a0,a0,-1538 # 8001cfa8 <__func__.1+0x300>
    8000f5b2:	6350b0ef          	jal	8001b3e6 <printf>
    8000f5b6:	00144783          	lbu	a5,1(s0)
    8000f5ba:	0000e597          	auipc	a1,0xe
    8000f5be:	9c658593          	add	a1,a1,-1594 # 8001cf80 <__func__.1+0x2d8>
    8000f5c2:	e789                	bnez	a5,8000f5cc <external_interrupt_VSEI+0x508>
    8000f5c4:	0000e597          	auipc	a1,0xe
    8000f5c8:	9ac58593          	add	a1,a1,-1620 # 8001cf70 <__func__.1+0x2c8>
    8000f5cc:	0000e517          	auipc	a0,0xe
    8000f5d0:	9f450513          	add	a0,a0,-1548 # 8001cfc0 <__func__.1+0x318>
    8000f5d4:	6130b0ef          	jal	8001b3e6 <printf>
    8000f5d8:	00144783          	lbu	a5,1(s0)
    8000f5dc:	0e079b63          	bnez	a5,8000f6d2 <external_interrupt_VSEI+0x60e>
    8000f5e0:	4529                	li	a0,10
    8000f5e2:	4d70a0ef          	jal	8001a2b8 <putchar>
    8000f5e6:	c481                	beqz	s1,8000f5ee <external_interrupt_VSEI+0x52a>
    8000f5e8:	00144783          	lbu	a5,1(s0)
    8000f5ec:	cb85                	beqz	a5,8000f61c <external_interrupt_VSEI+0x558>
    8000f5ee:	4401                	li	s0,0





    TEST_END();
    8000f5f0:	0000e597          	auipc	a1,0xe
    8000f5f4:	99058593          	add	a1,a1,-1648 # 8001cf80 <__func__.1+0x2d8>
    8000f5f8:	0000e517          	auipc	a0,0xe
    8000f5fc:	a3050513          	add	a0,a0,-1488 # 8001d028 <__func__.1+0x380>
    8000f600:	5e70b0ef          	jal	8001b3e6 <printf>
    8000f604:	4511                	li	a0,4
    8000f606:	cd8f10ef          	jal	80000ade <goto_priv>
    8000f60a:	d1df10ef          	jal	80001326 <reset_state>
}
    8000f60e:	60e2                	ld	ra,24(sp)
    8000f610:	8522                	mv	a0,s0
    8000f612:	6442                	ld	s0,16(sp)
    8000f614:	64a2                	ld	s1,8(sp)
    8000f616:	6902                	ld	s2,0(sp)
    8000f618:	6105                	add	sp,sp,32
    8000f61a:	8082                	ret
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    8000f61c:	4405                	li	s0,1
    TEST_END();
    8000f61e:	0000e597          	auipc	a1,0xe
    8000f622:	95258593          	add	a1,a1,-1710 # 8001cf70 <__func__.1+0x2c8>
    8000f626:	bfc9                	j	8000f5f8 <external_interrupt_VSEI+0x534>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    8000f628:	57fd                	li	a5,-1
    8000f62a:	6418                	ld	a4,8(s0)
    8000f62c:	17fe                	sll	a5,a5,0x3f
    8000f62e:	07a9                	add	a5,a5,10
    8000f630:	f4f710e3          	bne	a4,a5,8000f570 <external_interrupt_VSEI+0x4ac>
    8000f634:	4044                	lw	s1,4(s0)
    8000f636:	14f9                	add	s1,s1,-2
    8000f638:	0014b493          	seqz	s1,s1
    8000f63c:	bf15                	j	8000f570 <external_interrupt_VSEI+0x4ac>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    8000f63e:	57fd                	li	a5,-1
    8000f640:	6418                	ld	a4,8(s0)
    8000f642:	17fe                	sll	a5,a5,0x3f
    8000f644:	07a9                	add	a5,a5,10
    8000f646:	e8f710e3          	bne	a4,a5,8000f4c6 <external_interrupt_VSEI+0x402>
    8000f64a:	4044                	lw	s1,4(s0)
    8000f64c:	14f5                	add	s1,s1,-3
    8000f64e:	0014b493          	seqz	s1,s1
    8000f652:	bd95                	j	8000f4c6 <external_interrupt_VSEI+0x402>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    8000f654:	57fd                	li	a5,-1
    8000f656:	6418                	ld	a4,8(s0)
    8000f658:	17fe                	sll	a5,a5,0x3f
    8000f65a:	07a9                	add	a5,a5,10
    8000f65c:	dcf711e3          	bne	a4,a5,8000f41e <external_interrupt_VSEI+0x35a>
    8000f660:	4044                	lw	s1,4(s0)
    8000f662:	14f1                	add	s1,s1,-4
    8000f664:	0014b493          	seqz	s1,s1
    8000f668:	bb5d                	j	8000f41e <external_interrupt_VSEI+0x35a>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    8000f66a:	57fd                	li	a5,-1
    8000f66c:	6418                	ld	a4,8(s0)
    8000f66e:	17fe                	sll	a5,a5,0x3f
    8000f670:	07a9                	add	a5,a5,10
    8000f672:	c6f71fe3          	bne	a4,a5,8000f2f0 <external_interrupt_VSEI+0x22c>
    8000f676:	4044                	lw	s1,4(s0)
    8000f678:	14f9                	add	s1,s1,-2
    8000f67a:	0014b493          	seqz	s1,s1
    8000f67e:	b98d                	j	8000f2f0 <external_interrupt_VSEI+0x22c>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    8000f680:	57fd                	li	a5,-1
    8000f682:	6418                	ld	a4,8(s0)
    8000f684:	17fe                	sll	a5,a5,0x3f
    8000f686:	07a9                	add	a5,a5,10
    8000f688:	baf71ee3          	bne	a4,a5,8000f244 <external_interrupt_VSEI+0x180>
    8000f68c:	4044                	lw	s1,4(s0)
    8000f68e:	14f5                	add	s1,s1,-3
    8000f690:	0014b493          	seqz	s1,s1
    8000f694:	be45                	j	8000f244 <external_interrupt_VSEI+0x180>
    8000f696:	4058                	lw	a4,4(s0)
    8000f698:	478d                	li	a5,3
    8000f69a:	b8f712e3          	bne	a4,a5,8000f21e <external_interrupt_VSEI+0x15a>
    8000f69e:	be51                	j	8000f232 <external_interrupt_VSEI+0x16e>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    8000f6a0:	4058                	lw	a4,4(s0)
    8000f6a2:	4789                	li	a5,2
    8000f6a4:	c2f713e3          	bne	a4,a5,8000f2ca <external_interrupt_VSEI+0x206>
    8000f6a8:	b91d                	j	8000f2de <external_interrupt_VSEI+0x21a>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    8000f6aa:	4058                	lw	a4,4(s0)
    8000f6ac:	4791                	li	a5,4
    8000f6ae:	acf710e3          	bne	a4,a5,8000f16e <external_interrupt_VSEI+0xaa>
    8000f6b2:	bcc1                	j	8000f182 <external_interrupt_VSEI+0xbe>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    8000f6b4:	4058                	lw	a4,4(s0)
    8000f6b6:	4791                	li	a5,4
    8000f6b8:	d4f710e3          	bne	a4,a5,8000f3f8 <external_interrupt_VSEI+0x334>
    8000f6bc:	bb81                	j	8000f40c <external_interrupt_VSEI+0x348>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    8000f6be:	4058                	lw	a4,4(s0)
    8000f6c0:	4789                	li	a5,2
    8000f6c2:	e8f715e3          	bne	a4,a5,8000f54c <external_interrupt_VSEI+0x488>
    8000f6c6:	bd69                	j	8000f560 <external_interrupt_VSEI+0x49c>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    8000f6c8:	4058                	lw	a4,4(s0)
    8000f6ca:	478d                	li	a5,3
    8000f6cc:	dcf71ae3          	bne	a4,a5,8000f4a0 <external_interrupt_VSEI+0x3dc>
    8000f6d0:	b3d5                	j	8000f4b4 <external_interrupt_VSEI+0x3f0>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    8000f6d2:	0000e517          	auipc	a0,0xe
    8000f6d6:	8f650513          	add	a0,a0,-1802 # 8001cfc8 <__func__.1+0x320>
    8000f6da:	50d0b0ef          	jal	8001b3e6 <printf>
    8000f6de:	02900513          	li	a0,41
    8000f6e2:	3d70a0ef          	jal	8001a2b8 <putchar>
    8000f6e6:	bded                	j	8000f5e0 <external_interrupt_VSEI+0x51c>
    TEST_ASSERT("vs mode leads to no interrupt when hip.vseip=1 and hie.vseie=0",
    8000f6e8:	0000e517          	auipc	a0,0xe
    8000f6ec:	8e050513          	add	a0,a0,-1824 # 8001cfc8 <__func__.1+0x320>
    8000f6f0:	4f70b0ef          	jal	8001b3e6 <printf>
    8000f6f4:	02900513          	li	a0,41
    8000f6f8:	3c10a0ef          	jal	8001a2b8 <putchar>
    8000f6fc:	b1bd                	j	8000f36a <external_interrupt_VSEI+0x2a6>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    8000f6fe:	4058                	lw	a4,4(s0)
    8000f700:	478d                	li	a5,3
    8000f702:	d8f710e3          	bne	a4,a5,8000f482 <external_interrupt_VSEI+0x3be>
    8000f706:	0000e597          	auipc	a1,0xe
    8000f70a:	86a58593          	add	a1,a1,-1942 # 8001cf70 <__func__.1+0x2c8>
    8000f70e:	bb95                	j	8000f482 <external_interrupt_VSEI+0x3be>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    8000f710:	4044                	lw	s1,4(s0)
    8000f712:	14f1                	add	s1,s1,-4
    8000f714:	0014b493          	seqz	s1,s1
    8000f718:	b451                	j	8000f19c <external_interrupt_VSEI+0xd8>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    8000f71a:	4058                	lw	a4,4(s0)
    8000f71c:	478d                	li	a5,3
    8000f71e:	aef711e3          	bne	a4,a5,8000f200 <external_interrupt_VSEI+0x13c>
    8000f722:	0000e597          	auipc	a1,0xe
    8000f726:	84e58593          	add	a1,a1,-1970 # 8001cf70 <__func__.1+0x2c8>
    8000f72a:	bcd9                	j	8000f200 <external_interrupt_VSEI+0x13c>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    8000f72c:	4058                	lw	a4,4(s0)
    8000f72e:	4791                	li	a5,4
    8000f730:	a2f710e3          	bne	a4,a5,8000f150 <external_interrupt_VSEI+0x8c>
    8000f734:	0000e597          	auipc	a1,0xe
    8000f738:	83c58593          	add	a1,a1,-1988 # 8001cf70 <__func__.1+0x2c8>
    8000f73c:	bc11                	j	8000f150 <external_interrupt_VSEI+0x8c>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    8000f73e:	4058                	lw	a4,4(s0)
    8000f740:	4789                	li	a5,2
    8000f742:	b6f715e3          	bne	a4,a5,8000f2ac <external_interrupt_VSEI+0x1e8>
    8000f746:	0000e597          	auipc	a1,0xe
    8000f74a:	82a58593          	add	a1,a1,-2006 # 8001cf70 <__func__.1+0x2c8>
    8000f74e:	beb9                	j	8000f2ac <external_interrupt_VSEI+0x1e8>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    8000f750:	4058                	lw	a4,4(s0)
    8000f752:	4789                	li	a5,2
    8000f754:	dcf71de3          	bne	a4,a5,8000f52e <external_interrupt_VSEI+0x46a>
    8000f758:	0000e597          	auipc	a1,0xe
    8000f75c:	81858593          	add	a1,a1,-2024 # 8001cf70 <__func__.1+0x2c8>
    8000f760:	b3f9                	j	8000f52e <external_interrupt_VSEI+0x46a>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    8000f762:	4058                	lw	a4,4(s0)
    8000f764:	4791                	li	a5,4
    8000f766:	c6f71ae3          	bne	a4,a5,8000f3da <external_interrupt_VSEI+0x316>
    8000f76a:	0000e597          	auipc	a1,0xe
    8000f76e:	80658593          	add	a1,a1,-2042 # 8001cf70 <__func__.1+0x2c8>
    8000f772:	b1a5                	j	8000f3da <external_interrupt_VSEI+0x316>

000000008000f774 <software_interrupt_msi>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool software_interrupt_msi() {
    8000f774:	1101                	add	sp,sp,-32

    TEST_START();
    8000f776:	0000d597          	auipc	a1,0xd
    8000f77a:	9da58593          	add	a1,a1,-1574 # 8001c150 <__func__.2>
    8000f77e:	0000e517          	auipc	a0,0xe
    8000f782:	81250513          	add	a0,a0,-2030 # 8001cf90 <__func__.1+0x2e8>
bool software_interrupt_msi() {
    8000f786:	ec06                	sd	ra,24(sp)
    8000f788:	e822                	sd	s0,16(sp)
    8000f78a:	e426                	sd	s1,8(sp)
    8000f78c:	e04a                	sd	s2,0(sp)
    TEST_START();
    8000f78e:	4590b0ef          	jal	8001b3e6 <printf>
    8000f792:	4529                	li	a0,10
    8000f794:	3250a0ef          	jal	8001a2b8 <putchar>

    TEST_SETUP_EXCEPT();
    8000f798:	0ff0000f          	fence
    8000f79c:	4785                	li	a5,1
    8000f79e:	0002e417          	auipc	s0,0x2e
    8000f7a2:	87240413          	add	s0,s0,-1934 # 8003d010 <excpt>
    8000f7a6:	00f41023          	sh	a5,0(s0)
    8000f7aa:	0002e797          	auipc	a5,0x2e
    8000f7ae:	8807bf23          	sd	zero,-1890(a5) # 8003d048 <excpt+0x38>
    8000f7b2:	0ff0000f          	fence

   
    //M模式下产生软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高
    goto_priv(PRIV_M);
    8000f7b6:	4511                	li	a0,4
    8000f7b8:	b26f10ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    8000f7bc:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8000f7c0:	30446073          	csrs	mie,8
    CSRW(CSR_MIDELEG,0);
    8000f7c4:	30305073          	csrw	mideleg,0
    CSRS(CSR_MIP,MIP_MSIP);     //read-only
    8000f7c8:	34446073          	csrs	mip,8

    goto_priv(PRIV_M);
    8000f7cc:	4511                	li	a0,4
    8000f7ce:	b10f10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    8000f7d2:	08200593          	li	a1,130
    8000f7d6:	00011617          	auipc	a2,0x11
    8000f7da:	0ba60613          	add	a2,a2,186 # 80020890 <__func__.1+0x3be8>
    8000f7de:	0000d517          	auipc	a0,0xd
    8000f7e2:	7ca50513          	add	a0,a0,1994 # 8001cfa8 <__func__.1+0x300>
    8000f7e6:	4010b0ef          	jal	8001b3e6 <printf>
    8000f7ea:	00144783          	lbu	a5,1(s0)
    8000f7ee:	0000d597          	auipc	a1,0xd
    8000f7f2:	79258593          	add	a1,a1,1938 # 8001cf80 <__func__.1+0x2d8>
    8000f7f6:	c799                	beqz	a5,8000f804 <software_interrupt_msi+0x90>
    8000f7f8:	57fd                	li	a5,-1
    8000f7fa:	6418                	ld	a4,8(s0)
    8000f7fc:	17fe                	sll	a5,a5,0x3f
    8000f7fe:	0789                	add	a5,a5,2
    8000f800:	4ef70fe3          	beq	a4,a5,800104fe <software_interrupt_msi+0xd8a>
    8000f804:	0000d517          	auipc	a0,0xd
    8000f808:	7bc50513          	add	a0,a0,1980 # 8001cfc0 <__func__.1+0x318>
    8000f80c:	3db0b0ef          	jal	8001b3e6 <printf>
    8000f810:	00144783          	lbu	a5,1(s0)
    8000f814:	c799                	beqz	a5,8000f822 <software_interrupt_msi+0xae>
    8000f816:	57fd                	li	a5,-1
    8000f818:	6418                	ld	a4,8(s0)
    8000f81a:	17fe                	sll	a5,a5,0x3f
    8000f81c:	0789                	add	a5,a5,2
    8000f81e:	38f706e3          	beq	a4,a5,800103aa <software_interrupt_msi+0xc36>
    8000f822:	0000d517          	auipc	a0,0xd
    8000f826:	7a650513          	add	a0,a0,1958 # 8001cfc8 <__func__.1+0x320>
    8000f82a:	3bd0b0ef          	jal	8001b3e6 <printf>
    8000f82e:	02900513          	li	a0,41
    8000f832:	2870a0ef          	jal	8001a2b8 <putchar>
    8000f836:	4529                	li	a0,10
    8000f838:	2810a0ef          	jal	8001a2b8 <putchar>
    8000f83c:	00144783          	lbu	a5,1(s0)
    8000f840:	4481                	li	s1,0
    8000f842:	c799                	beqz	a5,8000f850 <software_interrupt_msi+0xdc>
    8000f844:	57fd                	li	a5,-1
    8000f846:	6418                	ld	a4,8(s0)
    8000f848:	17fe                	sll	a5,a5,0x3f
    8000f84a:	0789                	add	a5,a5,2
    8000f84c:	46f706e3          	beq	a4,a5,800104b8 <software_interrupt_msi+0xd44>
        excpt.priv == PRIV_M
    ); 


    //M模式下产生软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    8000f850:	0ff0000f          	fence
    8000f854:	4785                	li	a5,1
    8000f856:	00f41023          	sh	a5,0(s0)
    8000f85a:	0002d797          	auipc	a5,0x2d
    8000f85e:	7e07b723          	sd	zero,2030(a5) # 8003d048 <excpt+0x38>
    8000f862:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000f866:	4511                	li	a0,4
    8000f868:	a76f10ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8000f86c:	30046073          	csrs	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    8000f870:	30447073          	csrc	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8000f874:	34446073          	csrs	mip,8

    goto_priv(PRIV_M);
    8000f878:	4511                	li	a0,4
    8000f87a:	a64f10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("m mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0",
    8000f87e:	08200593          	li	a1,130
    8000f882:	00011617          	auipc	a2,0x11
    8000f886:	06e60613          	add	a2,a2,110 # 800208f0 <__func__.1+0x3c48>
    8000f88a:	0000d517          	auipc	a0,0xd
    8000f88e:	71e50513          	add	a0,a0,1822 # 8001cfa8 <__func__.1+0x300>
    8000f892:	3550b0ef          	jal	8001b3e6 <printf>
    8000f896:	00144783          	lbu	a5,1(s0)
    8000f89a:	0000d597          	auipc	a1,0xd
    8000f89e:	6e658593          	add	a1,a1,1766 # 8001cf80 <__func__.1+0x2d8>
    8000f8a2:	e789                	bnez	a5,8000f8ac <software_interrupt_msi+0x138>
    8000f8a4:	0000d597          	auipc	a1,0xd
    8000f8a8:	6cc58593          	add	a1,a1,1740 # 8001cf70 <__func__.1+0x2c8>
    8000f8ac:	0000d517          	auipc	a0,0xd
    8000f8b0:	71450513          	add	a0,a0,1812 # 8001cfc0 <__func__.1+0x318>
    8000f8b4:	3330b0ef          	jal	8001b3e6 <printf>
    8000f8b8:	00144783          	lbu	a5,1(s0)
    8000f8bc:	320793e3          	bnez	a5,800103e2 <software_interrupt_msi+0xc6e>
    8000f8c0:	4529                	li	a0,10
    8000f8c2:	1f70a0ef          	jal	8001a2b8 <putchar>
    8000f8c6:	c489                	beqz	s1,8000f8d0 <software_interrupt_msi+0x15c>
    8000f8c8:	00144483          	lbu	s1,1(s0)
    8000f8cc:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 


    //M模式下产生软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1
    TEST_SETUP_EXCEPT();
    8000f8d0:	0ff0000f          	fence
    8000f8d4:	4785                	li	a5,1
    8000f8d6:	00f41023          	sh	a5,0(s0)
    8000f8da:	0002d797          	auipc	a5,0x2d
    8000f8de:	7607b723          	sd	zero,1902(a5) # 8003d048 <excpt+0x38>
    8000f8e2:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000f8e6:	4511                	li	a0,4
    8000f8e8:	9f6f10ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    8000f8ec:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8000f8f0:	30446073          	csrs	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    8000f8f4:	34447073          	csrc	mip,8

    goto_priv(PRIV_M);
    8000f8f8:	4511                	li	a0,4
    8000f8fa:	9e4f10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1",
    8000f8fe:	08200593          	li	a1,130
    8000f902:	00011617          	auipc	a2,0x11
    8000f906:	04660613          	add	a2,a2,70 # 80020948 <__func__.1+0x3ca0>
    8000f90a:	0000d517          	auipc	a0,0xd
    8000f90e:	69e50513          	add	a0,a0,1694 # 8001cfa8 <__func__.1+0x300>
    8000f912:	2d50b0ef          	jal	8001b3e6 <printf>
    8000f916:	00144783          	lbu	a5,1(s0)
    8000f91a:	0000d597          	auipc	a1,0xd
    8000f91e:	66658593          	add	a1,a1,1638 # 8001cf80 <__func__.1+0x2d8>
    8000f922:	c799                	beqz	a5,8000f930 <software_interrupt_msi+0x1bc>
    8000f924:	57fd                	li	a5,-1
    8000f926:	6418                	ld	a4,8(s0)
    8000f928:	17fe                	sll	a5,a5,0x3f
    8000f92a:	0789                	add	a5,a5,2
    8000f92c:	36f707e3          	beq	a4,a5,8001049a <software_interrupt_msi+0xd26>
    8000f930:	0000d517          	auipc	a0,0xd
    8000f934:	69050513          	add	a0,a0,1680 # 8001cfc0 <__func__.1+0x318>
    8000f938:	2af0b0ef          	jal	8001b3e6 <printf>
    8000f93c:	00144783          	lbu	a5,1(s0)
    8000f940:	c799                	beqz	a5,8000f94e <software_interrupt_msi+0x1da>
    8000f942:	57fd                	li	a5,-1
    8000f944:	6418                	ld	a4,8(s0)
    8000f946:	17fe                	sll	a5,a5,0x3f
    8000f948:	0789                	add	a5,a5,2
    8000f94a:	00f70c63          	beq	a4,a5,8000f962 <software_interrupt_msi+0x1ee>
    8000f94e:	0000d517          	auipc	a0,0xd
    8000f952:	67a50513          	add	a0,a0,1658 # 8001cfc8 <__func__.1+0x320>
    8000f956:	2910b0ef          	jal	8001b3e6 <printf>
    8000f95a:	02900513          	li	a0,41
    8000f95e:	15b0a0ef          	jal	8001a2b8 <putchar>
    8000f962:	4529                	li	a0,10
    8000f964:	1550a0ef          	jal	8001a2b8 <putchar>
    8000f968:	c491                	beqz	s1,8000f974 <software_interrupt_msi+0x200>
    8000f96a:	00144783          	lbu	a5,1(s0)
    8000f96e:	4481                	li	s1,0
    8000f970:	1e0796e3          	bnez	a5,8001035c <software_interrupt_msi+0xbe8>
        excpt.triggered == true &&
        excpt.cause == CAUSE_MSI
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=1，mie.MSIE=1
    TEST_SETUP_EXCEPT();
    8000f974:	0ff0000f          	fence
    8000f978:	4785                	li	a5,1
    8000f97a:	00f41023          	sh	a5,0(s0)
    8000f97e:	0002d797          	auipc	a5,0x2d
    8000f982:	6c07b523          	sd	zero,1738(a5) # 8003d048 <excpt+0x38>
    8000f986:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000f98a:	4511                	li	a0,4
    8000f98c:	952f10ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    8000f990:	30047073          	csrc	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8000f994:	30446073          	csrs	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8000f998:	34446073          	csrs	mip,8

    goto_priv(PRIV_M);
    8000f99c:	4511                	li	a0,4
    8000f99e:	940f10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=1",
    8000f9a2:	08200593          	li	a1,130
    8000f9a6:	00011617          	auipc	a2,0x11
    8000f9aa:	00260613          	add	a2,a2,2 # 800209a8 <__func__.1+0x3d00>
    8000f9ae:	0000d517          	auipc	a0,0xd
    8000f9b2:	5fa50513          	add	a0,a0,1530 # 8001cfa8 <__func__.1+0x300>
    8000f9b6:	2310b0ef          	jal	8001b3e6 <printf>
    8000f9ba:	00144783          	lbu	a5,1(s0)
    8000f9be:	0000d597          	auipc	a1,0xd
    8000f9c2:	5c258593          	add	a1,a1,1474 # 8001cf80 <__func__.1+0x2d8>
    8000f9c6:	e789                	bnez	a5,8000f9d0 <software_interrupt_msi+0x25c>
    8000f9c8:	0000d597          	auipc	a1,0xd
    8000f9cc:	5a858593          	add	a1,a1,1448 # 8001cf70 <__func__.1+0x2c8>
    8000f9d0:	0000d517          	auipc	a0,0xd
    8000f9d4:	5f050513          	add	a0,a0,1520 # 8001cfc0 <__func__.1+0x318>
    8000f9d8:	20f0b0ef          	jal	8001b3e6 <printf>
    8000f9dc:	00144783          	lbu	a5,1(s0)
    8000f9e0:	220799e3          	bnez	a5,80010412 <software_interrupt_msi+0xc9e>
    8000f9e4:	4529                	li	a0,10
    8000f9e6:	0d30a0ef          	jal	8001a2b8 <putchar>
    8000f9ea:	c489                	beqz	s1,8000f9f4 <software_interrupt_msi+0x280>
    8000f9ec:	00144483          	lbu	s1,1(s0)
    8000f9f0:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=1，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    8000f9f4:	0ff0000f          	fence
    8000f9f8:	4785                	li	a5,1
    8000f9fa:	00f41023          	sh	a5,0(s0)
    8000f9fe:	0002d797          	auipc	a5,0x2d
    8000fa02:	6407b523          	sd	zero,1610(a5) # 8003d048 <excpt+0x38>
    8000fa06:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000fa0a:	4511                	li	a0,4
    8000fa0c:	8d2f10ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    8000fa10:	30047073          	csrc	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    8000fa14:	30447073          	csrc	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8000fa18:	34446073          	csrs	mip,8

    goto_priv(PRIV_M);
    8000fa1c:	4511                	li	a0,4
    8000fa1e:	8c0f10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=0",
    8000fa22:	08200593          	li	a1,130
    8000fa26:	00011617          	auipc	a2,0x11
    8000fa2a:	fd260613          	add	a2,a2,-46 # 800209f8 <__func__.1+0x3d50>
    8000fa2e:	0000d517          	auipc	a0,0xd
    8000fa32:	57a50513          	add	a0,a0,1402 # 8001cfa8 <__func__.1+0x300>
    8000fa36:	1b10b0ef          	jal	8001b3e6 <printf>
    8000fa3a:	00144783          	lbu	a5,1(s0)
    8000fa3e:	0000d597          	auipc	a1,0xd
    8000fa42:	54258593          	add	a1,a1,1346 # 8001cf80 <__func__.1+0x2d8>
    8000fa46:	e789                	bnez	a5,8000fa50 <software_interrupt_msi+0x2dc>
    8000fa48:	0000d597          	auipc	a1,0xd
    8000fa4c:	52858593          	add	a1,a1,1320 # 8001cf70 <__func__.1+0x2c8>
    8000fa50:	0000d517          	auipc	a0,0xd
    8000fa54:	57050513          	add	a0,a0,1392 # 8001cfc0 <__func__.1+0x318>
    8000fa58:	18f0b0ef          	jal	8001b3e6 <printf>
    8000fa5c:	00144783          	lbu	a5,1(s0)
    8000fa60:	18079de3          	bnez	a5,800103fa <software_interrupt_msi+0xc86>
    8000fa64:	4529                	li	a0,10
    8000fa66:	0530a0ef          	jal	8001a2b8 <putchar>
    8000fa6a:	c489                	beqz	s1,8000fa74 <software_interrupt_msi+0x300>
    8000fa6c:	00144483          	lbu	s1,1(s0)
    8000fa70:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=0，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    8000fa74:	0ff0000f          	fence
    8000fa78:	4785                	li	a5,1
    8000fa7a:	00f41023          	sh	a5,0(s0)
    8000fa7e:	0002d797          	auipc	a5,0x2d
    8000fa82:	5c07b523          	sd	zero,1482(a5) # 8003d048 <excpt+0x38>
    8000fa86:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000fa8a:	4511                	li	a0,4
    8000fa8c:	852f10ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    8000fa90:	30047073          	csrc	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    8000fa94:	30447073          	csrc	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    8000fa98:	34447073          	csrc	mip,8

    goto_priv(PRIV_M);
    8000fa9c:	4511                	li	a0,4
    8000fa9e:	840f10ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0",
    8000faa2:	08200593          	li	a1,130
    8000faa6:	00011617          	auipc	a2,0x11
    8000faaa:	fa260613          	add	a2,a2,-94 # 80020a48 <__func__.1+0x3da0>
    8000faae:	0000d517          	auipc	a0,0xd
    8000fab2:	4fa50513          	add	a0,a0,1274 # 8001cfa8 <__func__.1+0x300>
    8000fab6:	1310b0ef          	jal	8001b3e6 <printf>
    8000faba:	00144783          	lbu	a5,1(s0)
    8000fabe:	0000d597          	auipc	a1,0xd
    8000fac2:	4c258593          	add	a1,a1,1218 # 8001cf80 <__func__.1+0x2d8>
    8000fac6:	e789                	bnez	a5,8000fad0 <software_interrupt_msi+0x35c>
    8000fac8:	0000d597          	auipc	a1,0xd
    8000facc:	4a858593          	add	a1,a1,1192 # 8001cf70 <__func__.1+0x2c8>
    8000fad0:	0000d517          	auipc	a0,0xd
    8000fad4:	4f050513          	add	a0,a0,1264 # 8001cfc0 <__func__.1+0x318>
    8000fad8:	10f0b0ef          	jal	8001b3e6 <printf>
    8000fadc:	00144783          	lbu	a5,1(s0)
    8000fae0:	160790e3          	bnez	a5,80010440 <software_interrupt_msi+0xccc>
    8000fae4:	4529                	li	a0,10
    8000fae6:	7d20a0ef          	jal	8001a2b8 <putchar>
    8000faea:	c489                	beqz	s1,8000faf4 <software_interrupt_msi+0x380>
    8000faec:	00144483          	lbu	s1,1(s0)
    8000faf0:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 

//HS mode 下

    TEST_SETUP_EXCEPT();
    8000faf4:	0ff0000f          	fence
    8000faf8:	4785                	li	a5,1
    8000fafa:	00f41023          	sh	a5,0(s0)
    8000fafe:	0002d797          	auipc	a5,0x2d
    8000fb02:	5407b523          	sd	zero,1354(a5) # 8003d048 <excpt+0x38>
    8000fb06:	0ff0000f          	fence
    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，无代理
    goto_priv(PRIV_M);
    8000fb0a:	4511                	li	a0,4
    8000fb0c:	fd3f00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    8000fb10:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8000fb14:	30446073          	csrs	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8000fb18:	34446073          	csrs	mip,8
    CSRW(CSR_MIDELEG,0);
    8000fb1c:	30305073          	csrw	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000fb20:	60305073          	csrw	hideleg,0

    goto_priv(PRIV_HS);
    8000fb24:	450d                	li	a0,3
    8000fb26:	fb9f00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    8000fb2a:	08200593          	li	a1,130
    8000fb2e:	00011617          	auipc	a2,0x11
    8000fb32:	f6a60613          	add	a2,a2,-150 # 80020a98 <__func__.1+0x3df0>
    8000fb36:	0000d517          	auipc	a0,0xd
    8000fb3a:	47250513          	add	a0,a0,1138 # 8001cfa8 <__func__.1+0x300>
    8000fb3e:	0a90b0ef          	jal	8001b3e6 <printf>
    8000fb42:	00144783          	lbu	a5,1(s0)
    8000fb46:	0000d597          	auipc	a1,0xd
    8000fb4a:	43a58593          	add	a1,a1,1082 # 8001cf80 <__func__.1+0x2d8>
    8000fb4e:	c799                	beqz	a5,8000fb5c <software_interrupt_msi+0x3e8>
    8000fb50:	57fd                	li	a5,-1
    8000fb52:	6418                	ld	a4,8(s0)
    8000fb54:	17fe                	sll	a5,a5,0x3f
    8000fb56:	0789                	add	a5,a5,2
    8000fb58:	16f70fe3          	beq	a4,a5,800104d6 <software_interrupt_msi+0xd62>
    8000fb5c:	0000d517          	auipc	a0,0xd
    8000fb60:	46450513          	add	a0,a0,1124 # 8001cfc0 <__func__.1+0x318>
    8000fb64:	0830b0ef          	jal	8001b3e6 <printf>
    8000fb68:	00144783          	lbu	a5,1(s0)
    8000fb6c:	c799                	beqz	a5,8000fb7a <software_interrupt_msi+0x406>
    8000fb6e:	57fd                	li	a5,-1
    8000fb70:	6418                	ld	a4,8(s0)
    8000fb72:	17fe                	sll	a5,a5,0x3f
    8000fb74:	0789                	add	a5,a5,2
    8000fb76:	02f704e3          	beq	a4,a5,8001039e <software_interrupt_msi+0xc2a>
    8000fb7a:	0000d517          	auipc	a0,0xd
    8000fb7e:	44e50513          	add	a0,a0,1102 # 8001cfc8 <__func__.1+0x320>
    8000fb82:	0650b0ef          	jal	8001b3e6 <printf>
    8000fb86:	02900513          	li	a0,41
    8000fb8a:	72e0a0ef          	jal	8001a2b8 <putchar>
    8000fb8e:	4529                	li	a0,10
    8000fb90:	7280a0ef          	jal	8001a2b8 <putchar>
    8000fb94:	c491                	beqz	s1,8000fba0 <software_interrupt_msi+0x42c>
    8000fb96:	00144783          	lbu	a5,1(s0)
    8000fb9a:	4481                	li	s1,0
    8000fb9c:	7a079463          	bnez	a5,80010344 <software_interrupt_msi+0xbd0>
        excpt.priv == PRIV_M
    ); 

    
    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，有mideleg代理
    TEST_SETUP_EXCEPT();
    8000fba0:	0ff0000f          	fence
    8000fba4:	4785                	li	a5,1
    8000fba6:	00f41023          	sh	a5,0(s0)
    8000fbaa:	0002d797          	auipc	a5,0x2d
    8000fbae:	4807bf23          	sd	zero,1182(a5) # 8003d048 <excpt+0x38>
    8000fbb2:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000fbb6:	4511                	li	a0,4
    8000fbb8:	f27f00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    8000fbbc:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8000fbc0:	30446073          	csrs	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8000fbc4:	34446073          	csrs	mip,8
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    8000fbc8:	597d                	li	s2,-1
    8000fbca:	30391073          	csrw	mideleg,s2
    CSRW(CSR_HIDELEG,0);
    8000fbce:	60305073          	csrw	hideleg,0

    goto_priv(PRIV_HS);
    8000fbd2:	450d                	li	a0,3
    8000fbd4:	f0bf00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    8000fbd8:	08200593          	li	a1,130
    8000fbdc:	00011617          	auipc	a2,0x11
    8000fbe0:	f1c60613          	add	a2,a2,-228 # 80020af8 <__func__.1+0x3e50>
    8000fbe4:	0000d517          	auipc	a0,0xd
    8000fbe8:	3c450513          	add	a0,a0,964 # 8001cfa8 <__func__.1+0x300>
    8000fbec:	7fa0b0ef          	jal	8001b3e6 <printf>
    8000fbf0:	00144783          	lbu	a5,1(s0)
    8000fbf4:	0000d597          	auipc	a1,0xd
    8000fbf8:	38c58593          	add	a1,a1,908 # 8001cf80 <__func__.1+0x2d8>
    8000fbfc:	c791                	beqz	a5,8000fc08 <software_interrupt_msi+0x494>
    8000fbfe:	641c                	ld	a5,8(s0)
    8000fc00:	197e                	sll	s2,s2,0x3f
    8000fc02:	0909                	add	s2,s2,2
    8000fc04:	092781e3          	beq	a5,s2,80010486 <software_interrupt_msi+0xd12>
    8000fc08:	0000d517          	auipc	a0,0xd
    8000fc0c:	3b850513          	add	a0,a0,952 # 8001cfc0 <__func__.1+0x318>
    8000fc10:	7d60b0ef          	jal	8001b3e6 <printf>
    8000fc14:	00144783          	lbu	a5,1(s0)
    8000fc18:	c799                	beqz	a5,8000fc26 <software_interrupt_msi+0x4b2>
    8000fc1a:	57fd                	li	a5,-1
    8000fc1c:	6418                	ld	a4,8(s0)
    8000fc1e:	17fe                	sll	a5,a5,0x3f
    8000fc20:	0789                	add	a5,a5,2
    8000fc22:	78f70f63          	beq	a4,a5,800103c0 <software_interrupt_msi+0xc4c>
    8000fc26:	0000d517          	auipc	a0,0xd
    8000fc2a:	3a250513          	add	a0,a0,930 # 8001cfc8 <__func__.1+0x320>
    8000fc2e:	7b80b0ef          	jal	8001b3e6 <printf>
    8000fc32:	02900513          	li	a0,41
    8000fc36:	6820a0ef          	jal	8001a2b8 <putchar>
    8000fc3a:	4529                	li	a0,10
    8000fc3c:	67c0a0ef          	jal	8001a2b8 <putchar>
    8000fc40:	c491                	beqz	s1,8000fc4c <software_interrupt_msi+0x4d8>
    8000fc42:	00144783          	lbu	a5,1(s0)
    8000fc46:	4481                	li	s1,0
    8000fc48:	6e079363          	bnez	a5,8001032e <software_interrupt_msi+0xbba>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0，无代理
    TEST_SETUP_EXCEPT();
    8000fc4c:	0ff0000f          	fence
    8000fc50:	4785                	li	a5,1
    8000fc52:	00f41023          	sh	a5,0(s0)
    8000fc56:	0002d797          	auipc	a5,0x2d
    8000fc5a:	3e07b923          	sd	zero,1010(a5) # 8003d048 <excpt+0x38>
    8000fc5e:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000fc62:	4511                	li	a0,4
    8000fc64:	e7bf00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    8000fc68:	30046073          	csrs	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    8000fc6c:	30447073          	csrc	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8000fc70:	34446073          	csrs	mip,8
    CSRW(CSR_MIDELEG,0);
    8000fc74:	30305073          	csrw	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000fc78:	60305073          	csrw	hideleg,0

    goto_priv(PRIV_HS);
    8000fc7c:	450d                	li	a0,3
    8000fc7e:	e61f00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    8000fc82:	08200593          	li	a1,130
    8000fc86:	00011617          	auipc	a2,0x11
    8000fc8a:	ee260613          	add	a2,a2,-286 # 80020b68 <__func__.1+0x3ec0>
    8000fc8e:	0000d517          	auipc	a0,0xd
    8000fc92:	31a50513          	add	a0,a0,794 # 8001cfa8 <__func__.1+0x300>
    8000fc96:	7500b0ef          	jal	8001b3e6 <printf>
    8000fc9a:	00144783          	lbu	a5,1(s0)
    8000fc9e:	0000d597          	auipc	a1,0xd
    8000fca2:	2e258593          	add	a1,a1,738 # 8001cf80 <__func__.1+0x2d8>
    8000fca6:	e789                	bnez	a5,8000fcb0 <software_interrupt_msi+0x53c>
    8000fca8:	0000d597          	auipc	a1,0xd
    8000fcac:	2c858593          	add	a1,a1,712 # 8001cf70 <__func__.1+0x2c8>
    8000fcb0:	0000d517          	auipc	a0,0xd
    8000fcb4:	31050513          	add	a0,a0,784 # 8001cfc0 <__func__.1+0x318>
    8000fcb8:	72e0b0ef          	jal	8001b3e6 <printf>
    8000fcbc:	00144783          	lbu	a5,1(s0)
    8000fcc0:	78079c63          	bnez	a5,80010458 <software_interrupt_msi+0xce4>
    8000fcc4:	4529                	li	a0,10
    8000fcc6:	5f20a0ef          	jal	8001a2b8 <putchar>
    8000fcca:	c489                	beqz	s1,8000fcd4 <software_interrupt_msi+0x560>
    8000fccc:	00144483          	lbu	s1,1(s0)
    8000fcd0:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MESIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    8000fcd4:	0ff0000f          	fence
    8000fcd8:	4785                	li	a5,1
    8000fcda:	00f41023          	sh	a5,0(s0)
    8000fcde:	0002d797          	auipc	a5,0x2d
    8000fce2:	3607b523          	sd	zero,874(a5) # 8003d048 <excpt+0x38>
    8000fce6:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000fcea:	4511                	li	a0,4
    8000fcec:	df3f00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    8000fcf0:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8000fcf4:	30446073          	csrs	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    8000fcf8:	34447073          	csrc	mip,8
    CSRW(CSR_MIDELEG,0);
    8000fcfc:	30305073          	csrw	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000fd00:	60305073          	csrw	hideleg,0

    goto_priv(PRIV_HS);
    8000fd04:	450d                	li	a0,3
    8000fd06:	dd9f00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    8000fd0a:	08200593          	li	a1,130
    8000fd0e:	00011617          	auipc	a2,0x11
    8000fd12:	ec260613          	add	a2,a2,-318 # 80020bd0 <__func__.1+0x3f28>
    8000fd16:	0000d517          	auipc	a0,0xd
    8000fd1a:	29250513          	add	a0,a0,658 # 8001cfa8 <__func__.1+0x300>
    8000fd1e:	6c80b0ef          	jal	8001b3e6 <printf>
    8000fd22:	00144783          	lbu	a5,1(s0)
    8000fd26:	0000d597          	auipc	a1,0xd
    8000fd2a:	25a58593          	add	a1,a1,602 # 8001cf80 <__func__.1+0x2d8>
    8000fd2e:	c799                	beqz	a5,8000fd3c <software_interrupt_msi+0x5c8>
    8000fd30:	57fd                	li	a5,-1
    8000fd32:	6418                	ld	a4,8(s0)
    8000fd34:	17fe                	sll	a5,a5,0x3f
    8000fd36:	0789                	add	a5,a5,2
    8000fd38:	7af70963          	beq	a4,a5,800104ea <software_interrupt_msi+0xd76>
    8000fd3c:	0000d517          	auipc	a0,0xd
    8000fd40:	28450513          	add	a0,a0,644 # 8001cfc0 <__func__.1+0x318>
    8000fd44:	6a20b0ef          	jal	8001b3e6 <printf>
    8000fd48:	00144783          	lbu	a5,1(s0)
    8000fd4c:	c799                	beqz	a5,8000fd5a <software_interrupt_msi+0x5e6>
    8000fd4e:	57fd                	li	a5,-1
    8000fd50:	6418                	ld	a4,8(s0)
    8000fd52:	17fe                	sll	a5,a5,0x3f
    8000fd54:	0789                	add	a5,a5,2
    8000fd56:	66f70063          	beq	a4,a5,800103b6 <software_interrupt_msi+0xc42>
    8000fd5a:	0000d517          	auipc	a0,0xd
    8000fd5e:	26e50513          	add	a0,a0,622 # 8001cfc8 <__func__.1+0x320>
    8000fd62:	6840b0ef          	jal	8001b3e6 <printf>
    8000fd66:	02900513          	li	a0,41
    8000fd6a:	54e0a0ef          	jal	8001a2b8 <putchar>
    8000fd6e:	4529                	li	a0,10
    8000fd70:	5480a0ef          	jal	8001a2b8 <putchar>
    8000fd74:	c491                	beqz	s1,8000fd80 <software_interrupt_msi+0x60c>
    8000fd76:	00144783          	lbu	a5,1(s0)
    8000fd7a:	4481                	li	s1,0
    8000fd7c:	58079e63          	bnez	a5,80010318 <software_interrupt_msi+0xba4>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    8000fd80:	0ff0000f          	fence
    8000fd84:	4785                	li	a5,1
    8000fd86:	00f41023          	sh	a5,0(s0)
    8000fd8a:	0002d797          	auipc	a5,0x2d
    8000fd8e:	2a07bf23          	sd	zero,702(a5) # 8003d048 <excpt+0x38>
    8000fd92:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000fd96:	4511                	li	a0,4
    8000fd98:	d47f00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    8000fd9c:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8000fda0:	30446073          	csrs	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    8000fda4:	34447073          	csrc	mip,8
    CSRW(CSR_MIDELEG,1);
    8000fda8:	3030d073          	csrw	mideleg,1
    CSRW(CSR_HIDELEG,0);
    8000fdac:	60305073          	csrw	hideleg,0

    goto_priv(PRIV_HS);
    8000fdb0:	450d                	li	a0,3
    8000fdb2:	d2df00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    8000fdb6:	08200593          	li	a1,130
    8000fdba:	00011617          	auipc	a2,0x11
    8000fdbe:	e8660613          	add	a2,a2,-378 # 80020c40 <__func__.1+0x3f98>
    8000fdc2:	0000d517          	auipc	a0,0xd
    8000fdc6:	1e650513          	add	a0,a0,486 # 8001cfa8 <__func__.1+0x300>
    8000fdca:	61c0b0ef          	jal	8001b3e6 <printf>
    8000fdce:	00144783          	lbu	a5,1(s0)
    8000fdd2:	0000d597          	auipc	a1,0xd
    8000fdd6:	1ae58593          	add	a1,a1,430 # 8001cf80 <__func__.1+0x2d8>
    8000fdda:	c799                	beqz	a5,8000fde8 <software_interrupt_msi+0x674>
    8000fddc:	57fd                	li	a5,-1
    8000fdde:	6418                	ld	a4,8(s0)
    8000fde0:	17fe                	sll	a5,a5,0x3f
    8000fde2:	0789                	add	a5,a5,2
    8000fde4:	74f70963          	beq	a4,a5,80010536 <software_interrupt_msi+0xdc2>
    8000fde8:	0000d517          	auipc	a0,0xd
    8000fdec:	1d850513          	add	a0,a0,472 # 8001cfc0 <__func__.1+0x318>
    8000fdf0:	5f60b0ef          	jal	8001b3e6 <printf>
    8000fdf4:	00144783          	lbu	a5,1(s0)
    8000fdf8:	c799                	beqz	a5,8000fe06 <software_interrupt_msi+0x692>
    8000fdfa:	57fd                	li	a5,-1
    8000fdfc:	6418                	ld	a4,8(s0)
    8000fdfe:	17fe                	sll	a5,a5,0x3f
    8000fe00:	0789                	add	a5,a5,2
    8000fe02:	56f70a63          	beq	a4,a5,80010376 <software_interrupt_msi+0xc02>
    8000fe06:	0000d517          	auipc	a0,0xd
    8000fe0a:	1c250513          	add	a0,a0,450 # 8001cfc8 <__func__.1+0x320>
    8000fe0e:	5d80b0ef          	jal	8001b3e6 <printf>
    8000fe12:	02900513          	li	a0,41
    8000fe16:	4a20a0ef          	jal	8001a2b8 <putchar>
    8000fe1a:	4529                	li	a0,10
    8000fe1c:	49c0a0ef          	jal	8001a2b8 <putchar>
    8000fe20:	c491                	beqz	s1,8000fe2c <software_interrupt_msi+0x6b8>
    8000fe22:	00144783          	lbu	a5,1(s0)
    8000fe26:	4481                	li	s1,0
    8000fe28:	4c079d63          	bnez	a5,80010302 <software_interrupt_msi+0xb8e>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=0，且mip.MSIP，mie.MSIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    8000fe2c:	0ff0000f          	fence
    8000fe30:	4785                	li	a5,1
    8000fe32:	00f41023          	sh	a5,0(s0)
    8000fe36:	0002d797          	auipc	a5,0x2d
    8000fe3a:	2007b923          	sd	zero,530(a5) # 8003d048 <excpt+0x38>
    8000fe3e:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000fe42:	4511                	li	a0,4
    8000fe44:	c9bf00ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);   
    8000fe48:	30047073          	csrc	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    8000fe4c:	30447073          	csrc	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    8000fe50:	34447073          	csrc	mip,8
    CSRW(CSR_MIDELEG,0);
    8000fe54:	30305073          	csrw	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000fe58:	60305073          	csrw	hideleg,0

    goto_priv(PRIV_HS);
    8000fe5c:	450d                	li	a0,3
    8000fe5e:	c81f00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    8000fe62:	08200593          	li	a1,130
    8000fe66:	00011617          	auipc	a2,0x11
    8000fe6a:	e4a60613          	add	a2,a2,-438 # 80020cb0 <__func__.1+0x4008>
    8000fe6e:	0000d517          	auipc	a0,0xd
    8000fe72:	13a50513          	add	a0,a0,314 # 8001cfa8 <__func__.1+0x300>
    8000fe76:	5700b0ef          	jal	8001b3e6 <printf>
    8000fe7a:	00144783          	lbu	a5,1(s0)
    8000fe7e:	0000d597          	auipc	a1,0xd
    8000fe82:	10258593          	add	a1,a1,258 # 8001cf80 <__func__.1+0x2d8>
    8000fe86:	e789                	bnez	a5,8000fe90 <software_interrupt_msi+0x71c>
    8000fe88:	0000d597          	auipc	a1,0xd
    8000fe8c:	0e858593          	add	a1,a1,232 # 8001cf70 <__func__.1+0x2c8>
    8000fe90:	0000d517          	auipc	a0,0xd
    8000fe94:	13050513          	add	a0,a0,304 # 8001cfc0 <__func__.1+0x318>
    8000fe98:	54e0b0ef          	jal	8001b3e6 <printf>
    8000fe9c:	00144783          	lbu	a5,1(s0)
    8000fea0:	58079563          	bnez	a5,8001042a <software_interrupt_msi+0xcb6>
    8000fea4:	4529                	li	a0,10
    8000fea6:	4120a0ef          	jal	8001a2b8 <putchar>
    8000feaa:	c489                	beqz	s1,8000feb4 <software_interrupt_msi+0x740>
    8000feac:	00144483          	lbu	s1,1(s0)
    8000feb0:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 

//vs mode 下

    TEST_SETUP_EXCEPT();
    8000feb4:	0ff0000f          	fence
    8000feb8:	4785                	li	a5,1
    8000feba:	00f41023          	sh	a5,0(s0)
    8000febe:	0002d797          	auipc	a5,0x2d
    8000fec2:	1807b523          	sd	zero,394(a5) # 8003d048 <excpt+0x38>
    8000fec6:	0ff0000f          	fence
    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，无代理
    goto_priv(PRIV_M);
    8000feca:	4511                	li	a0,4
    8000fecc:	c13f00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    8000fed0:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8000fed4:	30446073          	csrs	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8000fed8:	34446073          	csrs	mip,8
    CSRW(CSR_MIDELEG,0);
    8000fedc:	30305073          	csrw	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000fee0:	60305073          	csrw	hideleg,0

    goto_priv(PRIV_VS);
    8000fee4:	4509                	li	a0,2
    8000fee6:	bf9f00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    8000feea:	08200593          	li	a1,130
    8000feee:	00011617          	auipc	a2,0x11
    8000fef2:	e2260613          	add	a2,a2,-478 # 80020d10 <__func__.1+0x4068>
    8000fef6:	0000d517          	auipc	a0,0xd
    8000fefa:	0b250513          	add	a0,a0,178 # 8001cfa8 <__func__.1+0x300>
    8000fefe:	4e80b0ef          	jal	8001b3e6 <printf>
    8000ff02:	00144783          	lbu	a5,1(s0)
    8000ff06:	0000d597          	auipc	a1,0xd
    8000ff0a:	07a58593          	add	a1,a1,122 # 8001cf80 <__func__.1+0x2d8>
    8000ff0e:	c799                	beqz	a5,8000ff1c <software_interrupt_msi+0x7a8>
    8000ff10:	57fd                	li	a5,-1
    8000ff12:	6418                	ld	a4,8(s0)
    8000ff14:	17fe                	sll	a5,a5,0x3f
    8000ff16:	0789                	add	a5,a5,2
    8000ff18:	5ef70d63          	beq	a4,a5,80010512 <software_interrupt_msi+0xd9e>
    8000ff1c:	0000d517          	auipc	a0,0xd
    8000ff20:	0a450513          	add	a0,a0,164 # 8001cfc0 <__func__.1+0x318>
    8000ff24:	4c20b0ef          	jal	8001b3e6 <printf>
    8000ff28:	00144783          	lbu	a5,1(s0)
    8000ff2c:	c799                	beqz	a5,8000ff3a <software_interrupt_msi+0x7c6>
    8000ff2e:	57fd                	li	a5,-1
    8000ff30:	6418                	ld	a4,8(s0)
    8000ff32:	17fe                	sll	a5,a5,0x3f
    8000ff34:	0789                	add	a5,a5,2
    8000ff36:	42f70b63          	beq	a4,a5,8001036c <software_interrupt_msi+0xbf8>
    8000ff3a:	0000d517          	auipc	a0,0xd
    8000ff3e:	08e50513          	add	a0,a0,142 # 8001cfc8 <__func__.1+0x320>
    8000ff42:	4a40b0ef          	jal	8001b3e6 <printf>
    8000ff46:	02900513          	li	a0,41
    8000ff4a:	36e0a0ef          	jal	8001a2b8 <putchar>
    8000ff4e:	4529                	li	a0,10
    8000ff50:	3680a0ef          	jal	8001a2b8 <putchar>
    8000ff54:	c491                	beqz	s1,8000ff60 <software_interrupt_msi+0x7ec>
    8000ff56:	00144783          	lbu	a5,1(s0)
    8000ff5a:	4481                	li	s1,0
    8000ff5c:	38079863          	bnez	a5,800102ec <software_interrupt_msi+0xb78>
        excpt.priv == PRIV_M
    ); 


    //vs模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，有mideleg代理
    TEST_SETUP_EXCEPT();
    8000ff60:	0ff0000f          	fence
    8000ff64:	4785                	li	a5,1
    8000ff66:	00f41023          	sh	a5,0(s0)
    8000ff6a:	0002d797          	auipc	a5,0x2d
    8000ff6e:	0c07bf23          	sd	zero,222(a5) # 8003d048 <excpt+0x38>
    8000ff72:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8000ff76:	4511                	li	a0,4
    8000ff78:	b67f00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    8000ff7c:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8000ff80:	30446073          	csrs	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8000ff84:	34446073          	csrs	mip,8
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    8000ff88:	597d                	li	s2,-1
    8000ff8a:	30391073          	csrw	mideleg,s2
    CSRW(CSR_HIDELEG,0);
    8000ff8e:	60305073          	csrw	hideleg,0

    goto_priv(PRIV_VS);
    8000ff92:	4509                	li	a0,2
    8000ff94:	b4bf00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    8000ff98:	08200593          	li	a1,130
    8000ff9c:	00011617          	auipc	a2,0x11
    8000ffa0:	dd460613          	add	a2,a2,-556 # 80020d70 <__func__.1+0x40c8>
    8000ffa4:	0000d517          	auipc	a0,0xd
    8000ffa8:	00450513          	add	a0,a0,4 # 8001cfa8 <__func__.1+0x300>
    8000ffac:	43a0b0ef          	jal	8001b3e6 <printf>
    8000ffb0:	00144783          	lbu	a5,1(s0)
    8000ffb4:	0000d597          	auipc	a1,0xd
    8000ffb8:	fcc58593          	add	a1,a1,-52 # 8001cf80 <__func__.1+0x2d8>
    8000ffbc:	c791                	beqz	a5,8000ffc8 <software_interrupt_msi+0x854>
    8000ffbe:	641c                	ld	a5,8(s0)
    8000ffc0:	197e                	sll	s2,s2,0x3f
    8000ffc2:	0909                	add	s2,s2,2
    8000ffc4:	57278063          	beq	a5,s2,80010524 <software_interrupt_msi+0xdb0>
    8000ffc8:	0000d517          	auipc	a0,0xd
    8000ffcc:	ff850513          	add	a0,a0,-8 # 8001cfc0 <__func__.1+0x318>
    8000ffd0:	4160b0ef          	jal	8001b3e6 <printf>
    8000ffd4:	00144783          	lbu	a5,1(s0)
    8000ffd8:	c799                	beqz	a5,8000ffe6 <software_interrupt_msi+0x872>
    8000ffda:	57fd                	li	a5,-1
    8000ffdc:	6418                	ld	a4,8(s0)
    8000ffde:	17fe                	sll	a5,a5,0x3f
    8000ffe0:	0789                	add	a5,a5,2
    8000ffe2:	3af70463          	beq	a4,a5,8001038a <software_interrupt_msi+0xc16>
    8000ffe6:	0000d517          	auipc	a0,0xd
    8000ffea:	fe250513          	add	a0,a0,-30 # 8001cfc8 <__func__.1+0x320>
    8000ffee:	3f80b0ef          	jal	8001b3e6 <printf>
    8000fff2:	02900513          	li	a0,41
    8000fff6:	2c20a0ef          	jal	8001a2b8 <putchar>
    8000fffa:	4529                	li	a0,10
    8000fffc:	2bc0a0ef          	jal	8001a2b8 <putchar>
    80010000:	c491                	beqz	s1,8001000c <software_interrupt_msi+0x898>
    80010002:	00144783          	lbu	a5,1(s0)
    80010006:	4481                	li	s1,0
    80010008:	2c079763          	bnez	a5,800102d6 <software_interrupt_msi+0xb62>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0，无代理
    TEST_SETUP_EXCEPT();
    8001000c:	0ff0000f          	fence
    80010010:	4785                	li	a5,1
    80010012:	00f41023          	sh	a5,0(s0)
    80010016:	0002d797          	auipc	a5,0x2d
    8001001a:	0207b923          	sd	zero,50(a5) # 8003d048 <excpt+0x38>
    8001001e:	0ff0000f          	fence
    goto_priv(PRIV_M);
    80010022:	4511                	li	a0,4
    80010024:	abbf00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80010028:	30046073          	csrs	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    8001002c:	30447073          	csrc	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80010030:	34446073          	csrs	mip,8
    CSRW(CSR_MIDELEG,0);
    80010034:	30305073          	csrw	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80010038:	60305073          	csrw	hideleg,0

    goto_priv(PRIV_VS);
    8001003c:	4509                	li	a0,2
    8001003e:	aa1f00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to  interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    80010042:	08200593          	li	a1,130
    80010046:	00011617          	auipc	a2,0x11
    8001004a:	d9a60613          	add	a2,a2,-614 # 80020de0 <__func__.1+0x4138>
    8001004e:	0000d517          	auipc	a0,0xd
    80010052:	f5a50513          	add	a0,a0,-166 # 8001cfa8 <__func__.1+0x300>
    80010056:	3900b0ef          	jal	8001b3e6 <printf>
    8001005a:	00144783          	lbu	a5,1(s0)
    8001005e:	0000d597          	auipc	a1,0xd
    80010062:	f2258593          	add	a1,a1,-222 # 8001cf80 <__func__.1+0x2d8>
    80010066:	e789                	bnez	a5,80010070 <software_interrupt_msi+0x8fc>
    80010068:	0000d597          	auipc	a1,0xd
    8001006c:	f0858593          	add	a1,a1,-248 # 8001cf70 <__func__.1+0x2c8>
    80010070:	0000d517          	auipc	a0,0xd
    80010074:	f5050513          	add	a0,a0,-176 # 8001cfc0 <__func__.1+0x318>
    80010078:	36e0b0ef          	jal	8001b3e6 <printf>
    8001007c:	00144783          	lbu	a5,1(s0)
    80010080:	34079663          	bnez	a5,800103cc <software_interrupt_msi+0xc58>
    80010084:	4529                	li	a0,10
    80010086:	2320a0ef          	jal	8001a2b8 <putchar>
    8001008a:	c489                	beqz	s1,80010094 <software_interrupt_msi+0x920>
    8001008c:	00144483          	lbu	s1,1(s0)
    80010090:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MESIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    80010094:	0ff0000f          	fence
    80010098:	4785                	li	a5,1
    8001009a:	00f41023          	sh	a5,0(s0)
    8001009e:	0002d797          	auipc	a5,0x2d
    800100a2:	fa07b523          	sd	zero,-86(a5) # 8003d048 <excpt+0x38>
    800100a6:	0ff0000f          	fence
    goto_priv(PRIV_M);
    800100aa:	4511                	li	a0,4
    800100ac:	a33f00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    800100b0:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    800100b4:	30446073          	csrs	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    800100b8:	34447073          	csrc	mip,8
    CSRW(CSR_MIDELEG,0);
    800100bc:	30305073          	csrw	mideleg,0
    CSRW(CSR_HIDELEG,0);
    800100c0:	60305073          	csrw	hideleg,0

    goto_priv(PRIV_VS);
    800100c4:	4509                	li	a0,2
    800100c6:	a19f00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    800100ca:	08200593          	li	a1,130
    800100ce:	00011617          	auipc	a2,0x11
    800100d2:	d7a60613          	add	a2,a2,-646 # 80020e48 <__func__.1+0x41a0>
    800100d6:	0000d517          	auipc	a0,0xd
    800100da:	ed250513          	add	a0,a0,-302 # 8001cfa8 <__func__.1+0x300>
    800100de:	3080b0ef          	jal	8001b3e6 <printf>
    800100e2:	00144783          	lbu	a5,1(s0)
    800100e6:	0000d597          	auipc	a1,0xd
    800100ea:	e9a58593          	add	a1,a1,-358 # 8001cf80 <__func__.1+0x2d8>
    800100ee:	c799                	beqz	a5,800100fc <software_interrupt_msi+0x988>
    800100f0:	57fd                	li	a5,-1
    800100f2:	6418                	ld	a4,8(s0)
    800100f4:	17fe                	sll	a5,a5,0x3f
    800100f6:	0789                	add	a5,a5,2
    800100f8:	3af70763          	beq	a4,a5,800104a6 <software_interrupt_msi+0xd32>
    800100fc:	0000d517          	auipc	a0,0xd
    80010100:	ec450513          	add	a0,a0,-316 # 8001cfc0 <__func__.1+0x318>
    80010104:	2e20b0ef          	jal	8001b3e6 <printf>
    80010108:	00144783          	lbu	a5,1(s0)
    8001010c:	c799                	beqz	a5,8001011a <software_interrupt_msi+0x9a6>
    8001010e:	57fd                	li	a5,-1
    80010110:	6418                	ld	a4,8(s0)
    80010112:	17fe                	sll	a5,a5,0x3f
    80010114:	0789                	add	a5,a5,2
    80010116:	26f70f63          	beq	a4,a5,80010394 <software_interrupt_msi+0xc20>
    8001011a:	0000d517          	auipc	a0,0xd
    8001011e:	eae50513          	add	a0,a0,-338 # 8001cfc8 <__func__.1+0x320>
    80010122:	2c40b0ef          	jal	8001b3e6 <printf>
    80010126:	02900513          	li	a0,41
    8001012a:	18e0a0ef          	jal	8001a2b8 <putchar>
    8001012e:	4529                	li	a0,10
    80010130:	1880a0ef          	jal	8001a2b8 <putchar>
    80010134:	c491                	beqz	s1,80010140 <software_interrupt_msi+0x9cc>
    80010136:	00144783          	lbu	a5,1(s0)
    8001013a:	4481                	li	s1,0
    8001013c:	18079263          	bnez	a5,800102c0 <software_interrupt_msi+0xb4c>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    80010140:	0ff0000f          	fence
    80010144:	4785                	li	a5,1
    80010146:	00f41023          	sh	a5,0(s0)
    8001014a:	0002d797          	auipc	a5,0x2d
    8001014e:	ee07bf23          	sd	zero,-258(a5) # 8003d048 <excpt+0x38>
    80010152:	0ff0000f          	fence
    goto_priv(PRIV_M);
    80010156:	4511                	li	a0,4
    80010158:	987f00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    8001015c:	30046073          	csrs	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80010160:	30446073          	csrs	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80010164:	34447073          	csrc	mip,8
    CSRW(CSR_MIDELEG,1);
    80010168:	3030d073          	csrw	mideleg,1
    CSRW(CSR_HIDELEG,0);
    8001016c:	60305073          	csrw	hideleg,0

    goto_priv(PRIV_VS);
    80010170:	4509                	li	a0,2
    80010172:	96df00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80010176:	08200593          	li	a1,130
    8001017a:	00011617          	auipc	a2,0x11
    8001017e:	d3e60613          	add	a2,a2,-706 # 80020eb8 <__func__.1+0x4210>
    80010182:	0000d517          	auipc	a0,0xd
    80010186:	e2650513          	add	a0,a0,-474 # 8001cfa8 <__func__.1+0x300>
    8001018a:	25c0b0ef          	jal	8001b3e6 <printf>
    8001018e:	00144783          	lbu	a5,1(s0)
    80010192:	0000d597          	auipc	a1,0xd
    80010196:	dee58593          	add	a1,a1,-530 # 8001cf80 <__func__.1+0x2d8>
    8001019a:	c799                	beqz	a5,800101a8 <software_interrupt_msi+0xa34>
    8001019c:	57fd                	li	a5,-1
    8001019e:	6418                	ld	a4,8(s0)
    800101a0:	17fe                	sll	a5,a5,0x3f
    800101a2:	0789                	add	a5,a5,2
    800101a4:	32f70063          	beq	a4,a5,800104c4 <software_interrupt_msi+0xd50>
    800101a8:	0000d517          	auipc	a0,0xd
    800101ac:	e1850513          	add	a0,a0,-488 # 8001cfc0 <__func__.1+0x318>
    800101b0:	2360b0ef          	jal	8001b3e6 <printf>
    800101b4:	00144783          	lbu	a5,1(s0)
    800101b8:	c799                	beqz	a5,800101c6 <software_interrupt_msi+0xa52>
    800101ba:	57fd                	li	a5,-1
    800101bc:	6418                	ld	a4,8(s0)
    800101be:	17fe                	sll	a5,a5,0x3f
    800101c0:	0789                	add	a5,a5,2
    800101c2:	1af70f63          	beq	a4,a5,80010380 <software_interrupt_msi+0xc0c>
    800101c6:	0000d517          	auipc	a0,0xd
    800101ca:	e0250513          	add	a0,a0,-510 # 8001cfc8 <__func__.1+0x320>
    800101ce:	2180b0ef          	jal	8001b3e6 <printf>
    800101d2:	02900513          	li	a0,41
    800101d6:	0e20a0ef          	jal	8001a2b8 <putchar>
    800101da:	4529                	li	a0,10
    800101dc:	0dc0a0ef          	jal	8001a2b8 <putchar>
    800101e0:	c489                	beqz	s1,800101ea <software_interrupt_msi+0xa76>
    800101e2:	00144783          	lbu	a5,1(s0)
    800101e6:	4481                	li	s1,0
    800101e8:	e3e9                	bnez	a5,800102aa <software_interrupt_msi+0xb36>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=0，且mip.MSIP，mie.MSIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    800101ea:	0ff0000f          	fence
    800101ee:	4785                	li	a5,1
    800101f0:	00f41023          	sh	a5,0(s0)
    800101f4:	0002d797          	auipc	a5,0x2d
    800101f8:	e407ba23          	sd	zero,-428(a5) # 8003d048 <excpt+0x38>
    800101fc:	0ff0000f          	fence
    goto_priv(PRIV_M);
    80010200:	4511                	li	a0,4
    80010202:	8ddf00ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);   
    80010206:	30047073          	csrc	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    8001020a:	30447073          	csrc	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    8001020e:	34447073          	csrc	mip,8
    CSRW(CSR_MIDELEG,0);
    80010212:	30305073          	csrw	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80010216:	60305073          	csrw	hideleg,0

    goto_priv(PRIV_VS);
    8001021a:	4509                	li	a0,2
    8001021c:	8c3f00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80010220:	08200593          	li	a1,130
    80010224:	00011617          	auipc	a2,0x11
    80010228:	d0460613          	add	a2,a2,-764 # 80020f28 <__func__.1+0x4280>
    8001022c:	0000d517          	auipc	a0,0xd
    80010230:	d7c50513          	add	a0,a0,-644 # 8001cfa8 <__func__.1+0x300>
    80010234:	1b20b0ef          	jal	8001b3e6 <printf>
    80010238:	00144783          	lbu	a5,1(s0)
    8001023c:	0000d597          	auipc	a1,0xd
    80010240:	d4458593          	add	a1,a1,-700 # 8001cf80 <__func__.1+0x2d8>
    80010244:	e789                	bnez	a5,8001024e <software_interrupt_msi+0xada>
    80010246:	0000d597          	auipc	a1,0xd
    8001024a:	d2a58593          	add	a1,a1,-726 # 8001cf70 <__func__.1+0x2c8>
    8001024e:	0000d517          	auipc	a0,0xd
    80010252:	d7250513          	add	a0,a0,-654 # 8001cfc0 <__func__.1+0x318>
    80010256:	1900b0ef          	jal	8001b3e6 <printf>
    8001025a:	00144783          	lbu	a5,1(s0)
    8001025e:	20079963          	bnez	a5,80010470 <software_interrupt_msi+0xcfc>
    80010262:	4529                	li	a0,10
    80010264:	0540a0ef          	jal	8001a2b8 <putchar>
    80010268:	c481                	beqz	s1,80010270 <software_interrupt_msi+0xafc>
    8001026a:	00144783          	lbu	a5,1(s0)
    8001026e:	cb85                	beqz	a5,8001029e <software_interrupt_msi+0xb2a>
    80010270:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80010272:	0000d597          	auipc	a1,0xd
    80010276:	d0e58593          	add	a1,a1,-754 # 8001cf80 <__func__.1+0x2d8>
    8001027a:	0000d517          	auipc	a0,0xd
    8001027e:	dae50513          	add	a0,a0,-594 # 8001d028 <__func__.1+0x380>
    80010282:	1640b0ef          	jal	8001b3e6 <printf>
    80010286:	4511                	li	a0,4
    80010288:	857f00ef          	jal	80000ade <goto_priv>
    8001028c:	89af10ef          	jal	80001326 <reset_state>
}
    80010290:	60e2                	ld	ra,24(sp)
    80010292:	8522                	mv	a0,s0
    80010294:	6442                	ld	s0,16(sp)
    80010296:	64a2                	ld	s1,8(sp)
    80010298:	6902                	ld	s2,0(sp)
    8001029a:	6105                	add	sp,sp,32
    8001029c:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    8001029e:	4405                	li	s0,1
    TEST_END();
    800102a0:	0000d597          	auipc	a1,0xd
    800102a4:	cd058593          	add	a1,a1,-816 # 8001cf70 <__func__.1+0x2c8>
    800102a8:	bfc9                	j	8001027a <software_interrupt_msi+0xb06>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    800102aa:	57fd                	li	a5,-1
    800102ac:	6418                	ld	a4,8(s0)
    800102ae:	17fe                	sll	a5,a5,0x3f
    800102b0:	0789                	add	a5,a5,2
    800102b2:	f2f71ce3          	bne	a4,a5,800101ea <software_interrupt_msi+0xa76>
    800102b6:	4044                	lw	s1,4(s0)
    800102b8:	14f5                	add	s1,s1,-3
    800102ba:	0014b493          	seqz	s1,s1
    800102be:	b735                	j	800101ea <software_interrupt_msi+0xa76>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    800102c0:	57fd                	li	a5,-1
    800102c2:	6418                	ld	a4,8(s0)
    800102c4:	17fe                	sll	a5,a5,0x3f
    800102c6:	0789                	add	a5,a5,2
    800102c8:	e6f71ce3          	bne	a4,a5,80010140 <software_interrupt_msi+0x9cc>
    800102cc:	4044                	lw	s1,4(s0)
    800102ce:	14f1                	add	s1,s1,-4
    800102d0:	0014b493          	seqz	s1,s1
    800102d4:	b5b5                	j	80010140 <software_interrupt_msi+0x9cc>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    800102d6:	57fd                	li	a5,-1
    800102d8:	6418                	ld	a4,8(s0)
    800102da:	17fe                	sll	a5,a5,0x3f
    800102dc:	0789                	add	a5,a5,2
    800102de:	d2f717e3          	bne	a4,a5,8001000c <software_interrupt_msi+0x898>
    800102e2:	4044                	lw	s1,4(s0)
    800102e4:	14f5                	add	s1,s1,-3
    800102e6:	0014b493          	seqz	s1,s1
    800102ea:	b30d                	j	8001000c <software_interrupt_msi+0x898>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    800102ec:	57fd                	li	a5,-1
    800102ee:	6418                	ld	a4,8(s0)
    800102f0:	17fe                	sll	a5,a5,0x3f
    800102f2:	0789                	add	a5,a5,2
    800102f4:	c6f716e3          	bne	a4,a5,8000ff60 <software_interrupt_msi+0x7ec>
    800102f8:	4044                	lw	s1,4(s0)
    800102fa:	14f1                	add	s1,s1,-4
    800102fc:	0014b493          	seqz	s1,s1
    80010300:	b185                	j	8000ff60 <software_interrupt_msi+0x7ec>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    80010302:	57fd                	li	a5,-1
    80010304:	6418                	ld	a4,8(s0)
    80010306:	17fe                	sll	a5,a5,0x3f
    80010308:	0789                	add	a5,a5,2
    8001030a:	b2f711e3          	bne	a4,a5,8000fe2c <software_interrupt_msi+0x6b8>
    8001030e:	4044                	lw	s1,4(s0)
    80010310:	14f5                	add	s1,s1,-3
    80010312:	0014b493          	seqz	s1,s1
    80010316:	be19                	j	8000fe2c <software_interrupt_msi+0x6b8>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80010318:	57fd                	li	a5,-1
    8001031a:	6418                	ld	a4,8(s0)
    8001031c:	17fe                	sll	a5,a5,0x3f
    8001031e:	0789                	add	a5,a5,2
    80010320:	a6f710e3          	bne	a4,a5,8000fd80 <software_interrupt_msi+0x60c>
    80010324:	4044                	lw	s1,4(s0)
    80010326:	14f1                	add	s1,s1,-4
    80010328:	0014b493          	seqz	s1,s1
    8001032c:	bc91                	j	8000fd80 <software_interrupt_msi+0x60c>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    8001032e:	57fd                	li	a5,-1
    80010330:	6418                	ld	a4,8(s0)
    80010332:	17fe                	sll	a5,a5,0x3f
    80010334:	0789                	add	a5,a5,2
    80010336:	90f71be3          	bne	a4,a5,8000fc4c <software_interrupt_msi+0x4d8>
    8001033a:	4044                	lw	s1,4(s0)
    8001033c:	14f5                	add	s1,s1,-3
    8001033e:	0014b493          	seqz	s1,s1
    80010342:	b229                	j	8000fc4c <software_interrupt_msi+0x4d8>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80010344:	57fd                	li	a5,-1
    80010346:	6418                	ld	a4,8(s0)
    80010348:	17fe                	sll	a5,a5,0x3f
    8001034a:	0789                	add	a5,a5,2
    8001034c:	84f71ae3          	bne	a4,a5,8000fba0 <software_interrupt_msi+0x42c>
    80010350:	4044                	lw	s1,4(s0)
    80010352:	14f1                	add	s1,s1,-4
    80010354:	0014b493          	seqz	s1,s1
    80010358:	849ff06f          	j	8000fba0 <software_interrupt_msi+0x42c>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1",
    8001035c:	6404                	ld	s1,8(s0)
    8001035e:	57f5                	li	a5,-3
    80010360:	8385                	srl	a5,a5,0x1
    80010362:	94be                	add	s1,s1,a5
    80010364:	0014b493          	seqz	s1,s1
    80010368:	e0cff06f          	j	8000f974 <software_interrupt_msi+0x200>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    8001036c:	4058                	lw	a4,4(s0)
    8001036e:	4791                	li	a5,4
    80010370:	bcf715e3          	bne	a4,a5,8000ff3a <software_interrupt_msi+0x7c6>
    80010374:	bee9                	j	8000ff4e <software_interrupt_msi+0x7da>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    80010376:	4058                	lw	a4,4(s0)
    80010378:	478d                	li	a5,3
    8001037a:	a8f716e3          	bne	a4,a5,8000fe06 <software_interrupt_msi+0x692>
    8001037e:	bc71                	j	8000fe1a <software_interrupt_msi+0x6a6>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80010380:	4058                	lw	a4,4(s0)
    80010382:	478d                	li	a5,3
    80010384:	e4f711e3          	bne	a4,a5,800101c6 <software_interrupt_msi+0xa52>
    80010388:	bd89                	j	800101da <software_interrupt_msi+0xa66>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    8001038a:	4058                	lw	a4,4(s0)
    8001038c:	478d                	li	a5,3
    8001038e:	c4f71ce3          	bne	a4,a5,8000ffe6 <software_interrupt_msi+0x872>
    80010392:	b1a5                	j	8000fffa <software_interrupt_msi+0x886>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80010394:	4058                	lw	a4,4(s0)
    80010396:	4791                	li	a5,4
    80010398:	d8f711e3          	bne	a4,a5,8001011a <software_interrupt_msi+0x9a6>
    8001039c:	bb49                	j	8001012e <software_interrupt_msi+0x9ba>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    8001039e:	4058                	lw	a4,4(s0)
    800103a0:	4791                	li	a5,4
    800103a2:	fcf71c63          	bne	a4,a5,8000fb7a <software_interrupt_msi+0x406>
    800103a6:	fe8ff06f          	j	8000fb8e <software_interrupt_msi+0x41a>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    800103aa:	4058                	lw	a4,4(s0)
    800103ac:	4791                	li	a5,4
    800103ae:	c6f71a63          	bne	a4,a5,8000f822 <software_interrupt_msi+0xae>
    800103b2:	c84ff06f          	j	8000f836 <software_interrupt_msi+0xc2>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    800103b6:	4058                	lw	a4,4(s0)
    800103b8:	4791                	li	a5,4
    800103ba:	9af710e3          	bne	a4,a5,8000fd5a <software_interrupt_msi+0x5e6>
    800103be:	ba45                	j	8000fd6e <software_interrupt_msi+0x5fa>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    800103c0:	4058                	lw	a4,4(s0)
    800103c2:	478d                	li	a5,3
    800103c4:	86f711e3          	bne	a4,a5,8000fc26 <software_interrupt_msi+0x4b2>
    800103c8:	873ff06f          	j	8000fc3a <software_interrupt_msi+0x4c6>
    TEST_ASSERT("VS mode leads to  interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    800103cc:	0000d517          	auipc	a0,0xd
    800103d0:	bfc50513          	add	a0,a0,-1028 # 8001cfc8 <__func__.1+0x320>
    800103d4:	0120b0ef          	jal	8001b3e6 <printf>
    800103d8:	02900513          	li	a0,41
    800103dc:	6dd090ef          	jal	8001a2b8 <putchar>
    800103e0:	b155                	j	80010084 <software_interrupt_msi+0x910>
    TEST_ASSERT("m mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0",
    800103e2:	0000d517          	auipc	a0,0xd
    800103e6:	be650513          	add	a0,a0,-1050 # 8001cfc8 <__func__.1+0x320>
    800103ea:	7fd0a0ef          	jal	8001b3e6 <printf>
    800103ee:	02900513          	li	a0,41
    800103f2:	6c7090ef          	jal	8001a2b8 <putchar>
    800103f6:	ccaff06f          	j	8000f8c0 <software_interrupt_msi+0x14c>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=0",
    800103fa:	0000d517          	auipc	a0,0xd
    800103fe:	bce50513          	add	a0,a0,-1074 # 8001cfc8 <__func__.1+0x320>
    80010402:	7e50a0ef          	jal	8001b3e6 <printf>
    80010406:	02900513          	li	a0,41
    8001040a:	6af090ef          	jal	8001a2b8 <putchar>
    8001040e:	e56ff06f          	j	8000fa64 <software_interrupt_msi+0x2f0>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=1",
    80010412:	0000d517          	auipc	a0,0xd
    80010416:	bb650513          	add	a0,a0,-1098 # 8001cfc8 <__func__.1+0x320>
    8001041a:	7cd0a0ef          	jal	8001b3e6 <printf>
    8001041e:	02900513          	li	a0,41
    80010422:	697090ef          	jal	8001a2b8 <putchar>
    80010426:	dbeff06f          	j	8000f9e4 <software_interrupt_msi+0x270>
    TEST_ASSERT("hs mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    8001042a:	0000d517          	auipc	a0,0xd
    8001042e:	b9e50513          	add	a0,a0,-1122 # 8001cfc8 <__func__.1+0x320>
    80010432:	7b50a0ef          	jal	8001b3e6 <printf>
    80010436:	02900513          	li	a0,41
    8001043a:	67f090ef          	jal	8001a2b8 <putchar>
    8001043e:	b49d                	j	8000fea4 <software_interrupt_msi+0x730>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0",
    80010440:	0000d517          	auipc	a0,0xd
    80010444:	b8850513          	add	a0,a0,-1144 # 8001cfc8 <__func__.1+0x320>
    80010448:	79f0a0ef          	jal	8001b3e6 <printf>
    8001044c:	02900513          	li	a0,41
    80010450:	669090ef          	jal	8001a2b8 <putchar>
    80010454:	e90ff06f          	j	8000fae4 <software_interrupt_msi+0x370>
    TEST_ASSERT("hs mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    80010458:	0000d517          	auipc	a0,0xd
    8001045c:	b7050513          	add	a0,a0,-1168 # 8001cfc8 <__func__.1+0x320>
    80010460:	7870a0ef          	jal	8001b3e6 <printf>
    80010464:	02900513          	li	a0,41
    80010468:	651090ef          	jal	8001a2b8 <putchar>
    8001046c:	859ff06f          	j	8000fcc4 <software_interrupt_msi+0x550>
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80010470:	0000d517          	auipc	a0,0xd
    80010474:	b5850513          	add	a0,a0,-1192 # 8001cfc8 <__func__.1+0x320>
    80010478:	76f0a0ef          	jal	8001b3e6 <printf>
    8001047c:	02900513          	li	a0,41
    80010480:	639090ef          	jal	8001a2b8 <putchar>
    80010484:	bbf9                	j	80010262 <software_interrupt_msi+0xaee>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80010486:	4058                	lw	a4,4(s0)
    80010488:	478d                	li	a5,3
    8001048a:	f6f71f63          	bne	a4,a5,8000fc08 <software_interrupt_msi+0x494>
    8001048e:	0000d597          	auipc	a1,0xd
    80010492:	ae258593          	add	a1,a1,-1310 # 8001cf70 <__func__.1+0x2c8>
    80010496:	f72ff06f          	j	8000fc08 <software_interrupt_msi+0x494>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1",
    8001049a:	0000d597          	auipc	a1,0xd
    8001049e:	ad658593          	add	a1,a1,-1322 # 8001cf70 <__func__.1+0x2c8>
    800104a2:	c8eff06f          	j	8000f930 <software_interrupt_msi+0x1bc>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    800104a6:	4058                	lw	a4,4(s0)
    800104a8:	4791                	li	a5,4
    800104aa:	c4f719e3          	bne	a4,a5,800100fc <software_interrupt_msi+0x988>
    800104ae:	0000d597          	auipc	a1,0xd
    800104b2:	ac258593          	add	a1,a1,-1342 # 8001cf70 <__func__.1+0x2c8>
    800104b6:	b199                	j	800100fc <software_interrupt_msi+0x988>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    800104b8:	4044                	lw	s1,4(s0)
    800104ba:	14f1                	add	s1,s1,-4
    800104bc:	0014b493          	seqz	s1,s1
    800104c0:	b90ff06f          	j	8000f850 <software_interrupt_msi+0xdc>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    800104c4:	4058                	lw	a4,4(s0)
    800104c6:	478d                	li	a5,3
    800104c8:	cef710e3          	bne	a4,a5,800101a8 <software_interrupt_msi+0xa34>
    800104cc:	0000d597          	auipc	a1,0xd
    800104d0:	aa458593          	add	a1,a1,-1372 # 8001cf70 <__func__.1+0x2c8>
    800104d4:	b9d1                	j	800101a8 <software_interrupt_msi+0xa34>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    800104d6:	4058                	lw	a4,4(s0)
    800104d8:	4791                	li	a5,4
    800104da:	e8f71163          	bne	a4,a5,8000fb5c <software_interrupt_msi+0x3e8>
    800104de:	0000d597          	auipc	a1,0xd
    800104e2:	a9258593          	add	a1,a1,-1390 # 8001cf70 <__func__.1+0x2c8>
    800104e6:	e76ff06f          	j	8000fb5c <software_interrupt_msi+0x3e8>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    800104ea:	4058                	lw	a4,4(s0)
    800104ec:	4791                	li	a5,4
    800104ee:	84f717e3          	bne	a4,a5,8000fd3c <software_interrupt_msi+0x5c8>
    800104f2:	0000d597          	auipc	a1,0xd
    800104f6:	a7e58593          	add	a1,a1,-1410 # 8001cf70 <__func__.1+0x2c8>
    800104fa:	843ff06f          	j	8000fd3c <software_interrupt_msi+0x5c8>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    800104fe:	4058                	lw	a4,4(s0)
    80010500:	4791                	li	a5,4
    80010502:	b0f71163          	bne	a4,a5,8000f804 <software_interrupt_msi+0x90>
    80010506:	0000d597          	auipc	a1,0xd
    8001050a:	a6a58593          	add	a1,a1,-1430 # 8001cf70 <__func__.1+0x2c8>
    8001050e:	af6ff06f          	j	8000f804 <software_interrupt_msi+0x90>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80010512:	4058                	lw	a4,4(s0)
    80010514:	4791                	li	a5,4
    80010516:	a0f713e3          	bne	a4,a5,8000ff1c <software_interrupt_msi+0x7a8>
    8001051a:	0000d597          	auipc	a1,0xd
    8001051e:	a5658593          	add	a1,a1,-1450 # 8001cf70 <__func__.1+0x2c8>
    80010522:	baed                	j	8000ff1c <software_interrupt_msi+0x7a8>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80010524:	4058                	lw	a4,4(s0)
    80010526:	478d                	li	a5,3
    80010528:	aaf710e3          	bne	a4,a5,8000ffc8 <software_interrupt_msi+0x854>
    8001052c:	0000d597          	auipc	a1,0xd
    80010530:	a4458593          	add	a1,a1,-1468 # 8001cf70 <__func__.1+0x2c8>
    80010534:	bc51                	j	8000ffc8 <software_interrupt_msi+0x854>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    80010536:	4058                	lw	a4,4(s0)
    80010538:	478d                	li	a5,3
    8001053a:	8af717e3          	bne	a4,a5,8000fde8 <software_interrupt_msi+0x674>
    8001053e:	0000d597          	auipc	a1,0xd
    80010542:	a3258593          	add	a1,a1,-1486 # 8001cf70 <__func__.1+0x2c8>
    80010546:	8a3ff06f          	j	8000fde8 <software_interrupt_msi+0x674>

000000008001054a <software_interrupt_ssi>:



bool software_interrupt_ssi() {
    8001054a:	1101                	add	sp,sp,-32

    TEST_START();
    8001054c:	0000c597          	auipc	a1,0xc
    80010550:	c1c58593          	add	a1,a1,-996 # 8001c168 <__func__.1>
    80010554:	0000d517          	auipc	a0,0xd
    80010558:	a3c50513          	add	a0,a0,-1476 # 8001cf90 <__func__.1+0x2e8>
bool software_interrupt_ssi() {
    8001055c:	ec06                	sd	ra,24(sp)
    8001055e:	e822                	sd	s0,16(sp)
    80010560:	e426                	sd	s1,8(sp)
    80010562:	e04a                	sd	s2,0(sp)
    TEST_START();
    80010564:	6830a0ef          	jal	8001b3e6 <printf>
    80010568:	4529                	li	a0,10
    8001056a:	54f090ef          	jal	8001a2b8 <putchar>

    TEST_SETUP_EXCEPT();
    8001056e:	0ff0000f          	fence
    80010572:	4785                	li	a5,1
    80010574:	0002d417          	auipc	s0,0x2d
    80010578:	a9c40413          	add	s0,s0,-1380 # 8003d010 <excpt>
    8001057c:	00f41023          	sh	a5,0(s0)
    80010580:	0002d797          	auipc	a5,0x2d
    80010584:	ac07b423          	sd	zero,-1336(a5) # 8003d048 <excpt+0x38>
    80010588:	0ff0000f          	fence

    //HS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSIE拉高
    goto_priv(PRIV_M);
    8001058c:	4511                	li	a0,4
    8001058e:	d50f00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);    
    80010592:	10016073          	csrs	sstatus,2
    CSRS(CSR_SIE,SIE_SSIE);
    80010596:	10416073          	csrs	sie,2
    CSRW(CSR_MIDELEG,0);
    8001059a:	30305073          	csrw	mideleg,0
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    8001059e:	14416073          	csrs	sip,2

    goto_priv(PRIV_HS);
    800105a2:	450d                	li	a0,3
    800105a4:	d3af00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    800105a8:	08200593          	li	a1,130
    800105ac:	00011617          	auipc	a2,0x11
    800105b0:	9dc60613          	add	a2,a2,-1572 # 80020f88 <__func__.1+0x42e0>
    800105b4:	0000d517          	auipc	a0,0xd
    800105b8:	9f450513          	add	a0,a0,-1548 # 8001cfa8 <__func__.1+0x300>
    800105bc:	62b0a0ef          	jal	8001b3e6 <printf>
    800105c0:	00144783          	lbu	a5,1(s0)
    800105c4:	0000d597          	auipc	a1,0xd
    800105c8:	9bc58593          	add	a1,a1,-1604 # 8001cf80 <__func__.1+0x2d8>
    800105cc:	c799                	beqz	a5,800105da <software_interrupt_ssi+0x90>
    800105ce:	57fd                	li	a5,-1
    800105d0:	6418                	ld	a4,8(s0)
    800105d2:	17fe                	sll	a5,a5,0x3f
    800105d4:	0785                	add	a5,a5,1
    800105d6:	20f70ae3          	beq	a4,a5,80010fea <software_interrupt_ssi+0xaa0>
    800105da:	0000d517          	auipc	a0,0xd
    800105de:	9e650513          	add	a0,a0,-1562 # 8001cfc0 <__func__.1+0x318>
    800105e2:	6050a0ef          	jal	8001b3e6 <printf>
    800105e6:	00144783          	lbu	a5,1(s0)
    800105ea:	c799                	beqz	a5,800105f8 <software_interrupt_ssi+0xae>
    800105ec:	57fd                	li	a5,-1
    800105ee:	6418                	ld	a4,8(s0)
    800105f0:	17fe                	sll	a5,a5,0x3f
    800105f2:	0785                	add	a5,a5,1
    800105f4:	0af70fe3          	beq	a4,a5,80010eb2 <software_interrupt_ssi+0x968>
    800105f8:	0000d517          	auipc	a0,0xd
    800105fc:	9d050513          	add	a0,a0,-1584 # 8001cfc8 <__func__.1+0x320>
    80010600:	5e70a0ef          	jal	8001b3e6 <printf>
    80010604:	02900513          	li	a0,41
    80010608:	4b1090ef          	jal	8001a2b8 <putchar>
    8001060c:	4529                	li	a0,10
    8001060e:	4ab090ef          	jal	8001a2b8 <putchar>
    80010612:	00144783          	lbu	a5,1(s0)
    80010616:	4481                	li	s1,0
    80010618:	c799                	beqz	a5,80010626 <software_interrupt_ssi+0xdc>
    8001061a:	57fd                	li	a5,-1
    8001061c:	6418                	ld	a4,8(s0)
    8001061e:	17fe                	sll	a5,a5,0x3f
    80010620:	0785                	add	a5,a5,1
    80010622:	16f708e3          	beq	a4,a5,80010f92 <software_interrupt_ssi+0xa48>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSE拉高，有代理
    TEST_SETUP_EXCEPT();
    80010626:	0ff0000f          	fence
    8001062a:	4785                	li	a5,1
    8001062c:	00f41023          	sh	a5,0(s0)
    80010630:	0002d797          	auipc	a5,0x2d
    80010634:	a007bc23          	sd	zero,-1512(a5) # 8003d048 <excpt+0x38>
    80010638:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8001063c:	4511                	li	a0,4
    8001063e:	ca0f00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80010642:	10016073          	csrs	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    80010646:	597d                	li	s2,-1
    80010648:	30391073          	csrw	mideleg,s2
    CSRS(CSR_SIE,SIE_SSIE);
    8001064c:	10416073          	csrs	sie,2
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    80010650:	14416073          	csrs	sip,2

    goto_priv(PRIV_HS);
    80010654:	450d                	li	a0,3
    80010656:	c88f00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    8001065a:	08200593          	li	a1,130
    8001065e:	00011617          	auipc	a2,0x11
    80010662:	99a60613          	add	a2,a2,-1638 # 80020ff8 <__func__.1+0x4350>
    80010666:	0000d517          	auipc	a0,0xd
    8001066a:	94250513          	add	a0,a0,-1726 # 8001cfa8 <__func__.1+0x300>
    8001066e:	5790a0ef          	jal	8001b3e6 <printf>
    80010672:	00144783          	lbu	a5,1(s0)
    80010676:	0000d597          	auipc	a1,0xd
    8001067a:	90a58593          	add	a1,a1,-1782 # 8001cf80 <__func__.1+0x2d8>
    8001067e:	c791                	beqz	a5,8001068a <software_interrupt_ssi+0x140>
    80010680:	641c                	ld	a5,8(s0)
    80010682:	197e                	sll	s2,s2,0x3f
    80010684:	0905                	add	s2,s2,1
    80010686:	11278ce3          	beq	a5,s2,80010f9e <software_interrupt_ssi+0xa54>
    8001068a:	0000d517          	auipc	a0,0xd
    8001068e:	93650513          	add	a0,a0,-1738 # 8001cfc0 <__func__.1+0x318>
    80010692:	5550a0ef          	jal	8001b3e6 <printf>
    80010696:	00144783          	lbu	a5,1(s0)
    8001069a:	c799                	beqz	a5,800106a8 <software_interrupt_ssi+0x15e>
    8001069c:	57fd                	li	a5,-1
    8001069e:	6418                	ld	a4,8(s0)
    800106a0:	17fe                	sll	a5,a5,0x3f
    800106a2:	0785                	add	a5,a5,1
    800106a4:	00f701e3          	beq	a4,a5,80010ea6 <software_interrupt_ssi+0x95c>
    800106a8:	0000d517          	auipc	a0,0xd
    800106ac:	92050513          	add	a0,a0,-1760 # 8001cfc8 <__func__.1+0x320>
    800106b0:	5370a0ef          	jal	8001b3e6 <printf>
    800106b4:	02900513          	li	a0,41
    800106b8:	401090ef          	jal	8001a2b8 <putchar>
    800106bc:	4529                	li	a0,10
    800106be:	3fb090ef          	jal	8001a2b8 <putchar>
    800106c2:	c491                	beqz	s1,800106ce <software_interrupt_ssi+0x184>
    800106c4:	00144783          	lbu	a5,1(s0)
    800106c8:	4481                	li	s1,0
    800106ca:	7c079263          	bnez	a5,80010e8e <software_interrupt_ssi+0x944>
        excpt.priv == PRIV_HS
    ); 


    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=1，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    800106ce:	0ff0000f          	fence
    800106d2:	4785                	li	a5,1
    800106d4:	00f41023          	sh	a5,0(s0)
    800106d8:	0002d797          	auipc	a5,0x2d
    800106dc:	9607b823          	sd	zero,-1680(a5) # 8003d048 <excpt+0x38>
    800106e0:	0ff0000f          	fence
    goto_priv(PRIV_M);
    800106e4:	4511                	li	a0,4
    800106e6:	bf8f00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800106ea:	10016073          	csrs	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    800106ee:	10417073          	csrc	sie,2
    CSRS(CSR_SIP,SIP_SSIP);    
    800106f2:	14416073          	csrs	sip,2

    goto_priv(PRIV_HS);
    800106f6:	450d                	li	a0,3
    800106f8:	be6f00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    800106fc:	08200593          	li	a1,130
    80010700:	00011617          	auipc	a2,0x11
    80010704:	96860613          	add	a2,a2,-1688 # 80021068 <__func__.1+0x43c0>
    80010708:	0000d517          	auipc	a0,0xd
    8001070c:	8a050513          	add	a0,a0,-1888 # 8001cfa8 <__func__.1+0x300>
    80010710:	4d70a0ef          	jal	8001b3e6 <printf>
    80010714:	00144783          	lbu	a5,1(s0)
    80010718:	0000d597          	auipc	a1,0xd
    8001071c:	86858593          	add	a1,a1,-1944 # 8001cf80 <__func__.1+0x2d8>
    80010720:	e789                	bnez	a5,8001072a <software_interrupt_ssi+0x1e0>
    80010722:	0000d597          	auipc	a1,0xd
    80010726:	84e58593          	add	a1,a1,-1970 # 8001cf70 <__func__.1+0x2c8>
    8001072a:	0000d517          	auipc	a0,0xd
    8001072e:	89650513          	add	a0,a0,-1898 # 8001cfc0 <__func__.1+0x318>
    80010732:	4b50a0ef          	jal	8001b3e6 <printf>
    80010736:	00144783          	lbu	a5,1(s0)
    8001073a:	7c079b63          	bnez	a5,80010f10 <software_interrupt_ssi+0x9c6>
    8001073e:	4529                	li	a0,10
    80010740:	379090ef          	jal	8001a2b8 <putchar>
    80010744:	c489                	beqz	s1,8001074e <software_interrupt_ssi+0x204>
    80010746:	00144483          	lbu	s1,1(s0)
    8001074a:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    );

    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1
    TEST_SETUP_EXCEPT();
    8001074e:	0ff0000f          	fence
    80010752:	4785                	li	a5,1
    80010754:	00f41023          	sh	a5,0(s0)
    80010758:	0002d797          	auipc	a5,0x2d
    8001075c:	8e07b823          	sd	zero,-1808(a5) # 8003d048 <excpt+0x38>
    80010760:	0ff0000f          	fence
    goto_priv(PRIV_M);
    80010764:	4511                	li	a0,4
    80010766:	b78f00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    8001076a:	10016073          	csrs	sstatus,2
    CSRW(CSR_MIDELEG,0);  
    8001076e:	30305073          	csrw	mideleg,0
    CSRS(CSR_SIE,SIE_SSIE);
    80010772:	10416073          	csrs	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80010776:	14417073          	csrc	sip,2

    goto_priv(PRIV_HS);
    8001077a:	450d                	li	a0,3
    8001077c:	b62f00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80010780:	08200593          	li	a1,130
    80010784:	00011617          	auipc	a2,0x11
    80010788:	93c60613          	add	a2,a2,-1732 # 800210c0 <__func__.1+0x4418>
    8001078c:	0000d517          	auipc	a0,0xd
    80010790:	81c50513          	add	a0,a0,-2020 # 8001cfa8 <__func__.1+0x300>
    80010794:	4530a0ef          	jal	8001b3e6 <printf>
    80010798:	00144783          	lbu	a5,1(s0)
    8001079c:	0000c597          	auipc	a1,0xc
    800107a0:	7e458593          	add	a1,a1,2020 # 8001cf80 <__func__.1+0x2d8>
    800107a4:	c799                	beqz	a5,800107b2 <software_interrupt_ssi+0x268>
    800107a6:	57fd                	li	a5,-1
    800107a8:	6418                	ld	a4,8(s0)
    800107aa:	17fe                	sll	a5,a5,0x3f
    800107ac:	0785                	add	a5,a5,1
    800107ae:	00f702e3          	beq	a4,a5,80010fb2 <software_interrupt_ssi+0xa68>
    800107b2:	0000d517          	auipc	a0,0xd
    800107b6:	80e50513          	add	a0,a0,-2034 # 8001cfc0 <__func__.1+0x318>
    800107ba:	42d0a0ef          	jal	8001b3e6 <printf>
    800107be:	00144783          	lbu	a5,1(s0)
    800107c2:	c799                	beqz	a5,800107d0 <software_interrupt_ssi+0x286>
    800107c4:	57fd                	li	a5,-1
    800107c6:	6418                	ld	a4,8(s0)
    800107c8:	17fe                	sll	a5,a5,0x3f
    800107ca:	0785                	add	a5,a5,1
    800107cc:	70f70863          	beq	a4,a5,80010edc <software_interrupt_ssi+0x992>
    800107d0:	0000c517          	auipc	a0,0xc
    800107d4:	7f850513          	add	a0,a0,2040 # 8001cfc8 <__func__.1+0x320>
    800107d8:	40f0a0ef          	jal	8001b3e6 <printf>
    800107dc:	02900513          	li	a0,41
    800107e0:	2d9090ef          	jal	8001a2b8 <putchar>
    800107e4:	4529                	li	a0,10
    800107e6:	2d3090ef          	jal	8001a2b8 <putchar>
    800107ea:	c491                	beqz	s1,800107f6 <software_interrupt_ssi+0x2ac>
    800107ec:	00144783          	lbu	a5,1(s0)
    800107f0:	4481                	li	s1,0
    800107f2:	68079363          	bnez	a5,80010e78 <software_interrupt_ssi+0x92e>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    );

    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1，有代理
    TEST_SETUP_EXCEPT();
    800107f6:	0ff0000f          	fence
    800107fa:	4785                	li	a5,1
    800107fc:	00f41023          	sh	a5,0(s0)
    80010800:	0002d797          	auipc	a5,0x2d
    80010804:	8407b423          	sd	zero,-1976(a5) # 8003d048 <excpt+0x38>
    80010808:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8001080c:	4511                	li	a0,4
    8001080e:	ad0f00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80010812:	10016073          	csrs	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    80010816:	597d                	li	s2,-1
    80010818:	30391073          	csrw	mideleg,s2
    CSRS(CSR_SIE,SIE_SSIE);
    8001081c:	10416073          	csrs	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80010820:	14417073          	csrc	sip,2

    goto_priv(PRIV_HS);
    80010824:	450d                	li	a0,3
    80010826:	ab8f00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    8001082a:	08200593          	li	a1,130
    8001082e:	00011617          	auipc	a2,0x11
    80010832:	90260613          	add	a2,a2,-1790 # 80021130 <__func__.1+0x4488>
    80010836:	0000c517          	auipc	a0,0xc
    8001083a:	77250513          	add	a0,a0,1906 # 8001cfa8 <__func__.1+0x300>
    8001083e:	3a90a0ef          	jal	8001b3e6 <printf>
    80010842:	00144783          	lbu	a5,1(s0)
    80010846:	0000c597          	auipc	a1,0xc
    8001084a:	73a58593          	add	a1,a1,1850 # 8001cf80 <__func__.1+0x2d8>
    8001084e:	c791                	beqz	a5,8001085a <software_interrupt_ssi+0x310>
    80010850:	641c                	ld	a5,8(s0)
    80010852:	197e                	sll	s2,s2,0x3f
    80010854:	0905                	add	s2,s2,1
    80010856:	7b278463          	beq	a5,s2,80010ffe <software_interrupt_ssi+0xab4>
    8001085a:	0000c517          	auipc	a0,0xc
    8001085e:	76650513          	add	a0,a0,1894 # 8001cfc0 <__func__.1+0x318>
    80010862:	3850a0ef          	jal	8001b3e6 <printf>
    80010866:	00144783          	lbu	a5,1(s0)
    8001086a:	c799                	beqz	a5,80010878 <software_interrupt_ssi+0x32e>
    8001086c:	57fd                	li	a5,-1
    8001086e:	6418                	ld	a4,8(s0)
    80010870:	17fe                	sll	a5,a5,0x3f
    80010872:	0785                	add	a5,a5,1
    80010874:	66f70963          	beq	a4,a5,80010ee6 <software_interrupt_ssi+0x99c>
    80010878:	0000c517          	auipc	a0,0xc
    8001087c:	75050513          	add	a0,a0,1872 # 8001cfc8 <__func__.1+0x320>
    80010880:	3670a0ef          	jal	8001b3e6 <printf>
    80010884:	02900513          	li	a0,41
    80010888:	231090ef          	jal	8001a2b8 <putchar>
    8001088c:	4529                	li	a0,10
    8001088e:	22b090ef          	jal	8001a2b8 <putchar>
    80010892:	c491                	beqz	s1,8001089e <software_interrupt_ssi+0x354>
    80010894:	00144783          	lbu	a5,1(s0)
    80010898:	4481                	li	s1,0
    8001089a:	5c079463          	bnez	a5,80010e62 <software_interrupt_ssi+0x918>
        excpt.priv == PRIV_HS
    );


    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    8001089e:	0ff0000f          	fence
    800108a2:	4785                	li	a5,1
    800108a4:	00f41023          	sh	a5,0(s0)
    800108a8:	0002c797          	auipc	a5,0x2c
    800108ac:	7a07b023          	sd	zero,1952(a5) # 8003d048 <excpt+0x38>
    800108b0:	0ff0000f          	fence
    goto_priv(PRIV_M);
    800108b4:	4511                	li	a0,4
    800108b6:	a28f00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800108ba:	10016073          	csrs	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    800108be:	10417073          	csrc	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    800108c2:	14417073          	csrc	sip,2

    goto_priv(PRIV_HS);
    800108c6:	450d                	li	a0,3
    800108c8:	a16f00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    800108cc:	08200593          	li	a1,130
    800108d0:	00011617          	auipc	a2,0x11
    800108d4:	8c060613          	add	a2,a2,-1856 # 80021190 <__func__.1+0x44e8>
    800108d8:	0000c517          	auipc	a0,0xc
    800108dc:	6d050513          	add	a0,a0,1744 # 8001cfa8 <__func__.1+0x300>
    800108e0:	3070a0ef          	jal	8001b3e6 <printf>
    800108e4:	00144783          	lbu	a5,1(s0)
    800108e8:	0000c597          	auipc	a1,0xc
    800108ec:	69858593          	add	a1,a1,1688 # 8001cf80 <__func__.1+0x2d8>
    800108f0:	e789                	bnez	a5,800108fa <software_interrupt_ssi+0x3b0>
    800108f2:	0000c597          	auipc	a1,0xc
    800108f6:	67e58593          	add	a1,a1,1662 # 8001cf70 <__func__.1+0x2c8>
    800108fa:	0000c517          	auipc	a0,0xc
    800108fe:	6c650513          	add	a0,a0,1734 # 8001cfc0 <__func__.1+0x318>
    80010902:	2e50a0ef          	jal	8001b3e6 <printf>
    80010906:	00144783          	lbu	a5,1(s0)
    8001090a:	62079a63          	bnez	a5,80010f3e <software_interrupt_ssi+0x9f4>
    8001090e:	4529                	li	a0,10
    80010910:	1a9090ef          	jal	8001a2b8 <putchar>
    80010914:	c489                	beqz	s1,8001091e <software_interrupt_ssi+0x3d4>
    80010916:	00144483          	lbu	s1,1(s0)
    8001091a:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    );

    //HS模式下产生软件中断，sstatus.sie=0，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    8001091e:	0ff0000f          	fence
    80010922:	4785                	li	a5,1
    80010924:	00f41023          	sh	a5,0(s0)
    80010928:	0002c797          	auipc	a5,0x2c
    8001092c:	7207b023          	sd	zero,1824(a5) # 8003d048 <excpt+0x38>
    80010930:	0ff0000f          	fence
    goto_priv(PRIV_M);
    80010934:	4511                	li	a0,4
    80010936:	9a8f00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    8001093a:	10016073          	csrs	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    8001093e:	10417073          	csrc	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80010942:	14417073          	csrc	sip,2

    goto_priv(PRIV_HS);
    80010946:	450d                	li	a0,3
    80010948:	996f00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    8001094c:	08200593          	li	a1,130
    80010950:	00011617          	auipc	a2,0x11
    80010954:	89060613          	add	a2,a2,-1904 # 800211e0 <__func__.1+0x4538>
    80010958:	0000c517          	auipc	a0,0xc
    8001095c:	65050513          	add	a0,a0,1616 # 8001cfa8 <__func__.1+0x300>
    80010960:	2870a0ef          	jal	8001b3e6 <printf>
    80010964:	00144783          	lbu	a5,1(s0)
    80010968:	0000c597          	auipc	a1,0xc
    8001096c:	61858593          	add	a1,a1,1560 # 8001cf80 <__func__.1+0x2d8>
    80010970:	e789                	bnez	a5,8001097a <software_interrupt_ssi+0x430>
    80010972:	0000c597          	auipc	a1,0xc
    80010976:	5fe58593          	add	a1,a1,1534 # 8001cf70 <__func__.1+0x2c8>
    8001097a:	0000c517          	auipc	a0,0xc
    8001097e:	64650513          	add	a0,a0,1606 # 8001cfc0 <__func__.1+0x318>
    80010982:	2650a0ef          	jal	8001b3e6 <printf>
    80010986:	00144783          	lbu	a5,1(s0)
    8001098a:	58079f63          	bnez	a5,80010f28 <software_interrupt_ssi+0x9de>
    8001098e:	4529                	li	a0,10
    80010990:	129090ef          	jal	8001a2b8 <putchar>
    80010994:	c489                	beqz	s1,8001099e <software_interrupt_ssi+0x454>
    80010996:	00144483          	lbu	s1,1(s0)
    8001099a:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    );

//VS-mode下

    TEST_SETUP_EXCEPT();
    8001099e:	0ff0000f          	fence
    800109a2:	4785                	li	a5,1
    800109a4:	00f41023          	sh	a5,0(s0)
    800109a8:	0002c717          	auipc	a4,0x2c
    800109ac:	6a073023          	sd	zero,1696(a4) # 8003d048 <excpt+0x38>
    800109b0:	0ff0000f          	fence
    //VS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSIE拉高
    TEST_SETUP_EXCEPT();
    800109b4:	0ff0000f          	fence
    800109b8:	0002c717          	auipc	a4,0x2c
    800109bc:	68073823          	sd	zero,1680(a4) # 8003d048 <excpt+0x38>
    800109c0:	00f41023          	sh	a5,0(s0)
    800109c4:	0ff0000f          	fence
    goto_priv(PRIV_M);
    800109c8:	4511                	li	a0,4
    800109ca:	914f00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);    
    800109ce:	10016073          	csrs	sstatus,2
    CSRS(CSR_SIE,SIE_SSIE);
    800109d2:	10416073          	csrs	sie,2
    CSRW(CSR_MIDELEG,0);
    800109d6:	30305073          	csrw	mideleg,0
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    800109da:	14416073          	csrs	sip,2

    goto_priv(PRIV_VS);
    800109de:	4509                	li	a0,2
    800109e0:	8fef00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    800109e4:	08200593          	li	a1,130
    800109e8:	00011617          	auipc	a2,0x11
    800109ec:	84860613          	add	a2,a2,-1976 # 80021230 <__func__.1+0x4588>
    800109f0:	0000c517          	auipc	a0,0xc
    800109f4:	5b850513          	add	a0,a0,1464 # 8001cfa8 <__func__.1+0x300>
    800109f8:	1ef0a0ef          	jal	8001b3e6 <printf>
    800109fc:	00144783          	lbu	a5,1(s0)
    80010a00:	0000c597          	auipc	a1,0xc
    80010a04:	58058593          	add	a1,a1,1408 # 8001cf80 <__func__.1+0x2d8>
    80010a08:	c799                	beqz	a5,80010a16 <software_interrupt_ssi+0x4cc>
    80010a0a:	57fd                	li	a5,-1
    80010a0c:	6418                	ld	a4,8(s0)
    80010a0e:	17fe                	sll	a5,a5,0x3f
    80010a10:	0785                	add	a5,a5,1
    80010a12:	60f70063          	beq	a4,a5,80011012 <software_interrupt_ssi+0xac8>
    80010a16:	0000c517          	auipc	a0,0xc
    80010a1a:	5aa50513          	add	a0,a0,1450 # 8001cfc0 <__func__.1+0x318>
    80010a1e:	1c90a0ef          	jal	8001b3e6 <printf>
    80010a22:	00144783          	lbu	a5,1(s0)
    80010a26:	c799                	beqz	a5,80010a34 <software_interrupt_ssi+0x4ea>
    80010a28:	57fd                	li	a5,-1
    80010a2a:	6418                	ld	a4,8(s0)
    80010a2c:	17fe                	sll	a5,a5,0x3f
    80010a2e:	0785                	add	a5,a5,1
    80010a30:	48f70763          	beq	a4,a5,80010ebe <software_interrupt_ssi+0x974>
    80010a34:	0000c517          	auipc	a0,0xc
    80010a38:	59450513          	add	a0,a0,1428 # 8001cfc8 <__func__.1+0x320>
    80010a3c:	1ab0a0ef          	jal	8001b3e6 <printf>
    80010a40:	02900513          	li	a0,41
    80010a44:	075090ef          	jal	8001a2b8 <putchar>
    80010a48:	4529                	li	a0,10
    80010a4a:	06f090ef          	jal	8001a2b8 <putchar>
    80010a4e:	c491                	beqz	s1,80010a5a <software_interrupt_ssi+0x510>
    80010a50:	00144783          	lbu	a5,1(s0)
    80010a54:	4481                	li	s1,0
    80010a56:	3e079b63          	bnez	a5,80010e4c <software_interrupt_ssi+0x902>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSE拉高，有代理
    TEST_SETUP_EXCEPT();
    80010a5a:	0ff0000f          	fence
    80010a5e:	4785                	li	a5,1
    80010a60:	00f41023          	sh	a5,0(s0)
    80010a64:	0002c797          	auipc	a5,0x2c
    80010a68:	5e07b223          	sd	zero,1508(a5) # 8003d048 <excpt+0x38>
    80010a6c:	0ff0000f          	fence
    goto_priv(PRIV_M);
    80010a70:	4511                	li	a0,4
    80010a72:	86cf00ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80010a76:	10016073          	csrs	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    80010a7a:	597d                	li	s2,-1
    80010a7c:	30391073          	csrw	mideleg,s2
    CSRS(CSR_SIE,SIE_SSIE);
    80010a80:	10416073          	csrs	sie,2
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    80010a84:	14416073          	csrs	sip,2

    goto_priv(PRIV_VS);
    80010a88:	4509                	li	a0,2
    80010a8a:	854f00ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80010a8e:	08200593          	li	a1,130
    80010a92:	00011617          	auipc	a2,0x11
    80010a96:	80e60613          	add	a2,a2,-2034 # 800212a0 <__func__.1+0x45f8>
    80010a9a:	0000c517          	auipc	a0,0xc
    80010a9e:	50e50513          	add	a0,a0,1294 # 8001cfa8 <__func__.1+0x300>
    80010aa2:	1450a0ef          	jal	8001b3e6 <printf>
    80010aa6:	00144783          	lbu	a5,1(s0)
    80010aaa:	0000c597          	auipc	a1,0xc
    80010aae:	4d658593          	add	a1,a1,1238 # 8001cf80 <__func__.1+0x2d8>
    80010ab2:	c791                	beqz	a5,80010abe <software_interrupt_ssi+0x574>
    80010ab4:	641c                	ld	a5,8(s0)
    80010ab6:	197e                	sll	s2,s2,0x3f
    80010ab8:	0905                	add	s2,s2,1
    80010aba:	51278f63          	beq	a5,s2,80010fd8 <software_interrupt_ssi+0xa8e>
    80010abe:	0000c517          	auipc	a0,0xc
    80010ac2:	50250513          	add	a0,a0,1282 # 8001cfc0 <__func__.1+0x318>
    80010ac6:	1210a0ef          	jal	8001b3e6 <printf>
    80010aca:	00144783          	lbu	a5,1(s0)
    80010ace:	c799                	beqz	a5,80010adc <software_interrupt_ssi+0x592>
    80010ad0:	57fd                	li	a5,-1
    80010ad2:	6418                	ld	a4,8(s0)
    80010ad4:	17fe                	sll	a5,a5,0x3f
    80010ad6:	0785                	add	a5,a5,1
    80010ad8:	3ef70863          	beq	a4,a5,80010ec8 <software_interrupt_ssi+0x97e>
    80010adc:	0000c517          	auipc	a0,0xc
    80010ae0:	4ec50513          	add	a0,a0,1260 # 8001cfc8 <__func__.1+0x320>
    80010ae4:	1030a0ef          	jal	8001b3e6 <printf>
    80010ae8:	02900513          	li	a0,41
    80010aec:	7cc090ef          	jal	8001a2b8 <putchar>
    80010af0:	4529                	li	a0,10
    80010af2:	7c6090ef          	jal	8001a2b8 <putchar>
    80010af6:	c491                	beqz	s1,80010b02 <software_interrupt_ssi+0x5b8>
    80010af8:	00144783          	lbu	a5,1(s0)
    80010afc:	4481                	li	s1,0
    80010afe:	32079c63          	bnez	a5,80010e36 <software_interrupt_ssi+0x8ec>
        excpt.priv == PRIV_HS
    ); 


    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=1，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    80010b02:	0ff0000f          	fence
    80010b06:	4785                	li	a5,1
    80010b08:	00f41023          	sh	a5,0(s0)
    80010b0c:	0002c797          	auipc	a5,0x2c
    80010b10:	5207be23          	sd	zero,1340(a5) # 8003d048 <excpt+0x38>
    80010b14:	0ff0000f          	fence
    goto_priv(PRIV_M);
    80010b18:	4511                	li	a0,4
    80010b1a:	fc5ef0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80010b1e:	10016073          	csrs	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    80010b22:	10417073          	csrc	sie,2
    CSRS(CSR_SIP,SIP_SSIP);    
    80010b26:	14416073          	csrs	sip,2

    goto_priv(PRIV_VS);
    80010b2a:	4509                	li	a0,2
    80010b2c:	fb3ef0ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    80010b30:	08200593          	li	a1,130
    80010b34:	00010617          	auipc	a2,0x10
    80010b38:	7dc60613          	add	a2,a2,2012 # 80021310 <__func__.1+0x4668>
    80010b3c:	0000c517          	auipc	a0,0xc
    80010b40:	46c50513          	add	a0,a0,1132 # 8001cfa8 <__func__.1+0x300>
    80010b44:	0a30a0ef          	jal	8001b3e6 <printf>
    80010b48:	00144783          	lbu	a5,1(s0)
    80010b4c:	0000c597          	auipc	a1,0xc
    80010b50:	43458593          	add	a1,a1,1076 # 8001cf80 <__func__.1+0x2d8>
    80010b54:	e789                	bnez	a5,80010b5e <software_interrupt_ssi+0x614>
    80010b56:	0000c597          	auipc	a1,0xc
    80010b5a:	41a58593          	add	a1,a1,1050 # 8001cf70 <__func__.1+0x2c8>
    80010b5e:	0000c517          	auipc	a0,0xc
    80010b62:	46250513          	add	a0,a0,1122 # 8001cfc0 <__func__.1+0x318>
    80010b66:	0810a0ef          	jal	8001b3e6 <printf>
    80010b6a:	00144783          	lbu	a5,1(s0)
    80010b6e:	38079663          	bnez	a5,80010efa <software_interrupt_ssi+0x9b0>
    80010b72:	4529                	li	a0,10
    80010b74:	744090ef          	jal	8001a2b8 <putchar>
    80010b78:	c489                	beqz	s1,80010b82 <software_interrupt_ssi+0x638>
    80010b7a:	00144483          	lbu	s1,1(s0)
    80010b7e:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    );

    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1
    TEST_SETUP_EXCEPT();
    80010b82:	0ff0000f          	fence
    80010b86:	4785                	li	a5,1
    80010b88:	00f41023          	sh	a5,0(s0)
    80010b8c:	0002c797          	auipc	a5,0x2c
    80010b90:	4a07be23          	sd	zero,1212(a5) # 8003d048 <excpt+0x38>
    80010b94:	0ff0000f          	fence
    goto_priv(PRIV_M);
    80010b98:	4511                	li	a0,4
    80010b9a:	f45ef0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80010b9e:	10016073          	csrs	sstatus,2
    CSRW(CSR_MIDELEG,0);  
    80010ba2:	30305073          	csrw	mideleg,0
    CSRS(CSR_SIE,SIE_SSIE);
    80010ba6:	10416073          	csrs	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80010baa:	14417073          	csrc	sip,2

    goto_priv(PRIV_VS);
    80010bae:	4509                	li	a0,2
    80010bb0:	f2fef0ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80010bb4:	08200593          	li	a1,130
    80010bb8:	00010617          	auipc	a2,0x10
    80010bbc:	7b060613          	add	a2,a2,1968 # 80021368 <__func__.1+0x46c0>
    80010bc0:	0000c517          	auipc	a0,0xc
    80010bc4:	3e850513          	add	a0,a0,1000 # 8001cfa8 <__func__.1+0x300>
    80010bc8:	01f0a0ef          	jal	8001b3e6 <printf>
    80010bcc:	00144783          	lbu	a5,1(s0)
    80010bd0:	0000c597          	auipc	a1,0xc
    80010bd4:	3b058593          	add	a1,a1,944 # 8001cf80 <__func__.1+0x2d8>
    80010bd8:	c799                	beqz	a5,80010be6 <software_interrupt_ssi+0x69c>
    80010bda:	57fd                	li	a5,-1
    80010bdc:	6418                	ld	a4,8(s0)
    80010bde:	17fe                	sll	a5,a5,0x3f
    80010be0:	0785                	add	a5,a5,1
    80010be2:	38f70f63          	beq	a4,a5,80010f80 <software_interrupt_ssi+0xa36>
    80010be6:	0000c517          	auipc	a0,0xc
    80010bea:	3da50513          	add	a0,a0,986 # 8001cfc0 <__func__.1+0x318>
    80010bee:	7f80a0ef          	jal	8001b3e6 <printf>
    80010bf2:	00144783          	lbu	a5,1(s0)
    80010bf6:	c799                	beqz	a5,80010c04 <software_interrupt_ssi+0x6ba>
    80010bf8:	57fd                	li	a5,-1
    80010bfa:	6418                	ld	a4,8(s0)
    80010bfc:	17fe                	sll	a5,a5,0x3f
    80010bfe:	0785                	add	a5,a5,1
    80010c00:	2ef70863          	beq	a4,a5,80010ef0 <software_interrupt_ssi+0x9a6>
    80010c04:	0000c517          	auipc	a0,0xc
    80010c08:	3c450513          	add	a0,a0,964 # 8001cfc8 <__func__.1+0x320>
    80010c0c:	7da0a0ef          	jal	8001b3e6 <printf>
    80010c10:	02900513          	li	a0,41
    80010c14:	6a4090ef          	jal	8001a2b8 <putchar>
    80010c18:	4529                	li	a0,10
    80010c1a:	69e090ef          	jal	8001a2b8 <putchar>
    80010c1e:	c491                	beqz	s1,80010c2a <software_interrupt_ssi+0x6e0>
    80010c20:	00144783          	lbu	a5,1(s0)
    80010c24:	4481                	li	s1,0
    80010c26:	1e079d63          	bnez	a5,80010e20 <software_interrupt_ssi+0x8d6>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    );

    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1，有代理
    TEST_SETUP_EXCEPT();
    80010c2a:	0ff0000f          	fence
    80010c2e:	4785                	li	a5,1
    80010c30:	00f41023          	sh	a5,0(s0)
    80010c34:	0002c797          	auipc	a5,0x2c
    80010c38:	4007ba23          	sd	zero,1044(a5) # 8003d048 <excpt+0x38>
    80010c3c:	0ff0000f          	fence
    goto_priv(PRIV_M);
    80010c40:	4511                	li	a0,4
    80010c42:	e9def0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80010c46:	10016073          	csrs	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    80010c4a:	597d                	li	s2,-1
    80010c4c:	30391073          	csrw	mideleg,s2
    CSRS(CSR_SIE,SIE_SSIE);
    80010c50:	10416073          	csrs	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80010c54:	14417073          	csrc	sip,2

    goto_priv(PRIV_VS);
    80010c58:	4509                	li	a0,2
    80010c5a:	e85ef0ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80010c5e:	08200593          	li	a1,130
    80010c62:	00010617          	auipc	a2,0x10
    80010c66:	77660613          	add	a2,a2,1910 # 800213d8 <__func__.1+0x4730>
    80010c6a:	0000c517          	auipc	a0,0xc
    80010c6e:	33e50513          	add	a0,a0,830 # 8001cfa8 <__func__.1+0x300>
    80010c72:	7740a0ef          	jal	8001b3e6 <printf>
    80010c76:	00144783          	lbu	a5,1(s0)
    80010c7a:	0000c597          	auipc	a1,0xc
    80010c7e:	30658593          	add	a1,a1,774 # 8001cf80 <__func__.1+0x2d8>
    80010c82:	c791                	beqz	a5,80010c8e <software_interrupt_ssi+0x744>
    80010c84:	641c                	ld	a5,8(s0)
    80010c86:	197e                	sll	s2,s2,0x3f
    80010c88:	0905                	add	s2,s2,1
    80010c8a:	33278e63          	beq	a5,s2,80010fc6 <software_interrupt_ssi+0xa7c>
    80010c8e:	0000c517          	auipc	a0,0xc
    80010c92:	33250513          	add	a0,a0,818 # 8001cfc0 <__func__.1+0x318>
    80010c96:	7500a0ef          	jal	8001b3e6 <printf>
    80010c9a:	00144783          	lbu	a5,1(s0)
    80010c9e:	c799                	beqz	a5,80010cac <software_interrupt_ssi+0x762>
    80010ca0:	57fd                	li	a5,-1
    80010ca2:	6418                	ld	a4,8(s0)
    80010ca4:	17fe                	sll	a5,a5,0x3f
    80010ca6:	0785                	add	a5,a5,1
    80010ca8:	22f70563          	beq	a4,a5,80010ed2 <software_interrupt_ssi+0x988>
    80010cac:	0000c517          	auipc	a0,0xc
    80010cb0:	31c50513          	add	a0,a0,796 # 8001cfc8 <__func__.1+0x320>
    80010cb4:	7320a0ef          	jal	8001b3e6 <printf>
    80010cb8:	02900513          	li	a0,41
    80010cbc:	5fc090ef          	jal	8001a2b8 <putchar>
    80010cc0:	4529                	li	a0,10
    80010cc2:	5f6090ef          	jal	8001a2b8 <putchar>
    80010cc6:	c491                	beqz	s1,80010cd2 <software_interrupt_ssi+0x788>
    80010cc8:	00144783          	lbu	a5,1(s0)
    80010ccc:	4481                	li	s1,0
    80010cce:	12079e63          	bnez	a5,80010e0a <software_interrupt_ssi+0x8c0>
        excpt.priv == PRIV_HS
    );


    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    80010cd2:	0ff0000f          	fence
    80010cd6:	4785                	li	a5,1
    80010cd8:	00f41023          	sh	a5,0(s0)
    80010cdc:	0002c797          	auipc	a5,0x2c
    80010ce0:	3607b623          	sd	zero,876(a5) # 8003d048 <excpt+0x38>
    80010ce4:	0ff0000f          	fence
    goto_priv(PRIV_M);
    80010ce8:	4511                	li	a0,4
    80010cea:	df5ef0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80010cee:	10016073          	csrs	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    80010cf2:	10417073          	csrc	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80010cf6:	14417073          	csrc	sip,2

    goto_priv(PRIV_VS);
    80010cfa:	4509                	li	a0,2
    80010cfc:	de3ef0ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    80010d00:	08200593          	li	a1,130
    80010d04:	00010617          	auipc	a2,0x10
    80010d08:	73460613          	add	a2,a2,1844 # 80021438 <__func__.1+0x4790>
    80010d0c:	0000c517          	auipc	a0,0xc
    80010d10:	29c50513          	add	a0,a0,668 # 8001cfa8 <__func__.1+0x300>
    80010d14:	6d20a0ef          	jal	8001b3e6 <printf>
    80010d18:	00144783          	lbu	a5,1(s0)
    80010d1c:	0000c597          	auipc	a1,0xc
    80010d20:	26458593          	add	a1,a1,612 # 8001cf80 <__func__.1+0x2d8>
    80010d24:	e789                	bnez	a5,80010d2e <software_interrupt_ssi+0x7e4>
    80010d26:	0000c597          	auipc	a1,0xc
    80010d2a:	24a58593          	add	a1,a1,586 # 8001cf70 <__func__.1+0x2c8>
    80010d2e:	0000c517          	auipc	a0,0xc
    80010d32:	29250513          	add	a0,a0,658 # 8001cfc0 <__func__.1+0x318>
    80010d36:	6b00a0ef          	jal	8001b3e6 <printf>
    80010d3a:	00144783          	lbu	a5,1(s0)
    80010d3e:	22079663          	bnez	a5,80010f6a <software_interrupt_ssi+0xa20>
    80010d42:	4529                	li	a0,10
    80010d44:	574090ef          	jal	8001a2b8 <putchar>
    80010d48:	c489                	beqz	s1,80010d52 <software_interrupt_ssi+0x808>
    80010d4a:	00144483          	lbu	s1,1(s0)
    80010d4e:	0014c493          	xor	s1,s1,1
        excpt.triggered == false
    );

    //VS模式下产生软件中断，sstatus.sie=0，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    80010d52:	0ff0000f          	fence
    80010d56:	4785                	li	a5,1
    80010d58:	00f41023          	sh	a5,0(s0)
    80010d5c:	0002c797          	auipc	a5,0x2c
    80010d60:	2e07b623          	sd	zero,748(a5) # 8003d048 <excpt+0x38>
    80010d64:	0ff0000f          	fence
    goto_priv(PRIV_M);
    80010d68:	4511                	li	a0,4
    80010d6a:	d75ef0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80010d6e:	10016073          	csrs	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    80010d72:	10417073          	csrc	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80010d76:	14417073          	csrc	sip,2

    goto_priv(PRIV_VS);
    80010d7a:	4509                	li	a0,2
    80010d7c:	d63ef0ef          	jal	80000ade <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    80010d80:	08200593          	li	a1,130
    80010d84:	00010617          	auipc	a2,0x10
    80010d88:	70460613          	add	a2,a2,1796 # 80021488 <__func__.1+0x47e0>
    80010d8c:	0000c517          	auipc	a0,0xc
    80010d90:	21c50513          	add	a0,a0,540 # 8001cfa8 <__func__.1+0x300>
    80010d94:	6520a0ef          	jal	8001b3e6 <printf>
    80010d98:	00144783          	lbu	a5,1(s0)
    80010d9c:	0000c597          	auipc	a1,0xc
    80010da0:	1e458593          	add	a1,a1,484 # 8001cf80 <__func__.1+0x2d8>
    80010da4:	e789                	bnez	a5,80010dae <software_interrupt_ssi+0x864>
    80010da6:	0000c597          	auipc	a1,0xc
    80010daa:	1ca58593          	add	a1,a1,458 # 8001cf70 <__func__.1+0x2c8>
    80010dae:	0000c517          	auipc	a0,0xc
    80010db2:	21250513          	add	a0,a0,530 # 8001cfc0 <__func__.1+0x318>
    80010db6:	6300a0ef          	jal	8001b3e6 <printf>
    80010dba:	00144783          	lbu	a5,1(s0)
    80010dbe:	18079b63          	bnez	a5,80010f54 <software_interrupt_ssi+0xa0a>
    80010dc2:	4529                	li	a0,10
    80010dc4:	4f4090ef          	jal	8001a2b8 <putchar>
    80010dc8:	c481                	beqz	s1,80010dd0 <software_interrupt_ssi+0x886>
    80010dca:	00144783          	lbu	a5,1(s0)
    80010dce:	cb85                	beqz	a5,80010dfe <software_interrupt_ssi+0x8b4>
    80010dd0:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80010dd2:	0000c597          	auipc	a1,0xc
    80010dd6:	1ae58593          	add	a1,a1,430 # 8001cf80 <__func__.1+0x2d8>
    80010dda:	0000c517          	auipc	a0,0xc
    80010dde:	24e50513          	add	a0,a0,590 # 8001d028 <__func__.1+0x380>
    80010de2:	6040a0ef          	jal	8001b3e6 <printf>
    80010de6:	4511                	li	a0,4
    80010de8:	cf7ef0ef          	jal	80000ade <goto_priv>
    80010dec:	d3af00ef          	jal	80001326 <reset_state>
}
    80010df0:	60e2                	ld	ra,24(sp)
    80010df2:	8522                	mv	a0,s0
    80010df4:	6442                	ld	s0,16(sp)
    80010df6:	64a2                	ld	s1,8(sp)
    80010df8:	6902                	ld	s2,0(sp)
    80010dfa:	6105                	add	sp,sp,32
    80010dfc:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    80010dfe:	4405                	li	s0,1
    TEST_END();
    80010e00:	0000c597          	auipc	a1,0xc
    80010e04:	17058593          	add	a1,a1,368 # 8001cf70 <__func__.1+0x2c8>
    80010e08:	bfc9                	j	80010dda <software_interrupt_ssi+0x890>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80010e0a:	57fd                	li	a5,-1
    80010e0c:	6418                	ld	a4,8(s0)
    80010e0e:	17fe                	sll	a5,a5,0x3f
    80010e10:	0785                	add	a5,a5,1
    80010e12:	ecf710e3          	bne	a4,a5,80010cd2 <software_interrupt_ssi+0x788>
    80010e16:	4044                	lw	s1,4(s0)
    80010e18:	14f5                	add	s1,s1,-3
    80010e1a:	0014b493          	seqz	s1,s1
    80010e1e:	bd55                	j	80010cd2 <software_interrupt_ssi+0x788>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80010e20:	57fd                	li	a5,-1
    80010e22:	6418                	ld	a4,8(s0)
    80010e24:	17fe                	sll	a5,a5,0x3f
    80010e26:	0785                	add	a5,a5,1
    80010e28:	e0f711e3          	bne	a4,a5,80010c2a <software_interrupt_ssi+0x6e0>
    80010e2c:	4044                	lw	s1,4(s0)
    80010e2e:	14f1                	add	s1,s1,-4
    80010e30:	0014b493          	seqz	s1,s1
    80010e34:	bbdd                	j	80010c2a <software_interrupt_ssi+0x6e0>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80010e36:	57fd                	li	a5,-1
    80010e38:	6418                	ld	a4,8(s0)
    80010e3a:	17fe                	sll	a5,a5,0x3f
    80010e3c:	0785                	add	a5,a5,1
    80010e3e:	ccf712e3          	bne	a4,a5,80010b02 <software_interrupt_ssi+0x5b8>
    80010e42:	4044                	lw	s1,4(s0)
    80010e44:	14f5                	add	s1,s1,-3
    80010e46:	0014b493          	seqz	s1,s1
    80010e4a:	b965                	j	80010b02 <software_interrupt_ssi+0x5b8>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80010e4c:	57fd                	li	a5,-1
    80010e4e:	6418                	ld	a4,8(s0)
    80010e50:	17fe                	sll	a5,a5,0x3f
    80010e52:	0785                	add	a5,a5,1
    80010e54:	c0f713e3          	bne	a4,a5,80010a5a <software_interrupt_ssi+0x510>
    80010e58:	4044                	lw	s1,4(s0)
    80010e5a:	14f1                	add	s1,s1,-4
    80010e5c:	0014b493          	seqz	s1,s1
    80010e60:	beed                	j	80010a5a <software_interrupt_ssi+0x510>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80010e62:	57fd                	li	a5,-1
    80010e64:	6418                	ld	a4,8(s0)
    80010e66:	17fe                	sll	a5,a5,0x3f
    80010e68:	0785                	add	a5,a5,1
    80010e6a:	a2f71ae3          	bne	a4,a5,8001089e <software_interrupt_ssi+0x354>
    80010e6e:	4044                	lw	s1,4(s0)
    80010e70:	14f5                	add	s1,s1,-3
    80010e72:	0014b493          	seqz	s1,s1
    80010e76:	b425                	j	8001089e <software_interrupt_ssi+0x354>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80010e78:	57fd                	li	a5,-1
    80010e7a:	6418                	ld	a4,8(s0)
    80010e7c:	17fe                	sll	a5,a5,0x3f
    80010e7e:	0785                	add	a5,a5,1
    80010e80:	96f71be3          	bne	a4,a5,800107f6 <software_interrupt_ssi+0x2ac>
    80010e84:	4044                	lw	s1,4(s0)
    80010e86:	14f1                	add	s1,s1,-4
    80010e88:	0014b493          	seqz	s1,s1
    80010e8c:	b2ad                	j	800107f6 <software_interrupt_ssi+0x2ac>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80010e8e:	57fd                	li	a5,-1
    80010e90:	6418                	ld	a4,8(s0)
    80010e92:	17fe                	sll	a5,a5,0x3f
    80010e94:	0785                	add	a5,a5,1
    80010e96:	82f71ce3          	bne	a4,a5,800106ce <software_interrupt_ssi+0x184>
    80010e9a:	4044                	lw	s1,4(s0)
    80010e9c:	14f5                	add	s1,s1,-3
    80010e9e:	0014b493          	seqz	s1,s1
    80010ea2:	82dff06f          	j	800106ce <software_interrupt_ssi+0x184>
    80010ea6:	4058                	lw	a4,4(s0)
    80010ea8:	478d                	li	a5,3
    80010eaa:	fef71f63          	bne	a4,a5,800106a8 <software_interrupt_ssi+0x15e>
    80010eae:	80fff06f          	j	800106bc <software_interrupt_ssi+0x172>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80010eb2:	4058                	lw	a4,4(s0)
    80010eb4:	4791                	li	a5,4
    80010eb6:	f4f71163          	bne	a4,a5,800105f8 <software_interrupt_ssi+0xae>
    80010eba:	f52ff06f          	j	8001060c <software_interrupt_ssi+0xc2>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80010ebe:	4058                	lw	a4,4(s0)
    80010ec0:	4791                	li	a5,4
    80010ec2:	b6f719e3          	bne	a4,a5,80010a34 <software_interrupt_ssi+0x4ea>
    80010ec6:	b649                	j	80010a48 <software_interrupt_ssi+0x4fe>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80010ec8:	4058                	lw	a4,4(s0)
    80010eca:	478d                	li	a5,3
    80010ecc:	c0f718e3          	bne	a4,a5,80010adc <software_interrupt_ssi+0x592>
    80010ed0:	b105                	j	80010af0 <software_interrupt_ssi+0x5a6>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80010ed2:	4058                	lw	a4,4(s0)
    80010ed4:	478d                	li	a5,3
    80010ed6:	dcf71be3          	bne	a4,a5,80010cac <software_interrupt_ssi+0x762>
    80010eda:	b3dd                	j	80010cc0 <software_interrupt_ssi+0x776>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80010edc:	4058                	lw	a4,4(s0)
    80010ede:	4791                	li	a5,4
    80010ee0:	8ef718e3          	bne	a4,a5,800107d0 <software_interrupt_ssi+0x286>
    80010ee4:	b201                	j	800107e4 <software_interrupt_ssi+0x29a>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80010ee6:	4058                	lw	a4,4(s0)
    80010ee8:	478d                	li	a5,3
    80010eea:	98f717e3          	bne	a4,a5,80010878 <software_interrupt_ssi+0x32e>
    80010eee:	ba79                	j	8001088c <software_interrupt_ssi+0x342>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80010ef0:	4058                	lw	a4,4(s0)
    80010ef2:	4791                	li	a5,4
    80010ef4:	d0f718e3          	bne	a4,a5,80010c04 <software_interrupt_ssi+0x6ba>
    80010ef8:	b305                	j	80010c18 <software_interrupt_ssi+0x6ce>
    TEST_ASSERT("VS mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    80010efa:	0000c517          	auipc	a0,0xc
    80010efe:	0ce50513          	add	a0,a0,206 # 8001cfc8 <__func__.1+0x320>
    80010f02:	4e40a0ef          	jal	8001b3e6 <printf>
    80010f06:	02900513          	li	a0,41
    80010f0a:	3ae090ef          	jal	8001a2b8 <putchar>
    80010f0e:	b195                	j	80010b72 <software_interrupt_ssi+0x628>
    TEST_ASSERT("hs mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    80010f10:	0000c517          	auipc	a0,0xc
    80010f14:	0b850513          	add	a0,a0,184 # 8001cfc8 <__func__.1+0x320>
    80010f18:	4ce0a0ef          	jal	8001b3e6 <printf>
    80010f1c:	02900513          	li	a0,41
    80010f20:	398090ef          	jal	8001a2b8 <putchar>
    80010f24:	81bff06f          	j	8001073e <software_interrupt_ssi+0x1f4>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    80010f28:	0000c517          	auipc	a0,0xc
    80010f2c:	0a050513          	add	a0,a0,160 # 8001cfc8 <__func__.1+0x320>
    80010f30:	4b60a0ef          	jal	8001b3e6 <printf>
    80010f34:	02900513          	li	a0,41
    80010f38:	380090ef          	jal	8001a2b8 <putchar>
    80010f3c:	bc89                	j	8001098e <software_interrupt_ssi+0x444>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    80010f3e:	0000c517          	auipc	a0,0xc
    80010f42:	08a50513          	add	a0,a0,138 # 8001cfc8 <__func__.1+0x320>
    80010f46:	4a00a0ef          	jal	8001b3e6 <printf>
    80010f4a:	02900513          	li	a0,41
    80010f4e:	36a090ef          	jal	8001a2b8 <putchar>
    80010f52:	ba75                	j	8001090e <software_interrupt_ssi+0x3c4>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    80010f54:	0000c517          	auipc	a0,0xc
    80010f58:	07450513          	add	a0,a0,116 # 8001cfc8 <__func__.1+0x320>
    80010f5c:	48a0a0ef          	jal	8001b3e6 <printf>
    80010f60:	02900513          	li	a0,41
    80010f64:	354090ef          	jal	8001a2b8 <putchar>
    80010f68:	bda9                	j	80010dc2 <software_interrupt_ssi+0x878>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    80010f6a:	0000c517          	auipc	a0,0xc
    80010f6e:	05e50513          	add	a0,a0,94 # 8001cfc8 <__func__.1+0x320>
    80010f72:	4740a0ef          	jal	8001b3e6 <printf>
    80010f76:	02900513          	li	a0,41
    80010f7a:	33e090ef          	jal	8001a2b8 <putchar>
    80010f7e:	b3d1                	j	80010d42 <software_interrupt_ssi+0x7f8>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80010f80:	4058                	lw	a4,4(s0)
    80010f82:	4791                	li	a5,4
    80010f84:	c6f711e3          	bne	a4,a5,80010be6 <software_interrupt_ssi+0x69c>
    80010f88:	0000c597          	auipc	a1,0xc
    80010f8c:	fe858593          	add	a1,a1,-24 # 8001cf70 <__func__.1+0x2c8>
    80010f90:	b999                	j	80010be6 <software_interrupt_ssi+0x69c>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80010f92:	4044                	lw	s1,4(s0)
    80010f94:	14f1                	add	s1,s1,-4
    80010f96:	0014b493          	seqz	s1,s1
    80010f9a:	e8cff06f          	j	80010626 <software_interrupt_ssi+0xdc>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80010f9e:	4058                	lw	a4,4(s0)
    80010fa0:	478d                	li	a5,3
    80010fa2:	eef71463          	bne	a4,a5,8001068a <software_interrupt_ssi+0x140>
    80010fa6:	0000c597          	auipc	a1,0xc
    80010faa:	fca58593          	add	a1,a1,-54 # 8001cf70 <__func__.1+0x2c8>
    80010fae:	edcff06f          	j	8001068a <software_interrupt_ssi+0x140>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80010fb2:	4058                	lw	a4,4(s0)
    80010fb4:	4791                	li	a5,4
    80010fb6:	fef71e63          	bne	a4,a5,800107b2 <software_interrupt_ssi+0x268>
    80010fba:	0000c597          	auipc	a1,0xc
    80010fbe:	fb658593          	add	a1,a1,-74 # 8001cf70 <__func__.1+0x2c8>
    80010fc2:	ff0ff06f          	j	800107b2 <software_interrupt_ssi+0x268>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80010fc6:	4058                	lw	a4,4(s0)
    80010fc8:	478d                	li	a5,3
    80010fca:	ccf712e3          	bne	a4,a5,80010c8e <software_interrupt_ssi+0x744>
    80010fce:	0000c597          	auipc	a1,0xc
    80010fd2:	fa258593          	add	a1,a1,-94 # 8001cf70 <__func__.1+0x2c8>
    80010fd6:	b965                	j	80010c8e <software_interrupt_ssi+0x744>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80010fd8:	4058                	lw	a4,4(s0)
    80010fda:	478d                	li	a5,3
    80010fdc:	aef711e3          	bne	a4,a5,80010abe <software_interrupt_ssi+0x574>
    80010fe0:	0000c597          	auipc	a1,0xc
    80010fe4:	f9058593          	add	a1,a1,-112 # 8001cf70 <__func__.1+0x2c8>
    80010fe8:	bcd9                	j	80010abe <software_interrupt_ssi+0x574>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80010fea:	4058                	lw	a4,4(s0)
    80010fec:	4791                	li	a5,4
    80010fee:	def71663          	bne	a4,a5,800105da <software_interrupt_ssi+0x90>
    80010ff2:	0000c597          	auipc	a1,0xc
    80010ff6:	f7e58593          	add	a1,a1,-130 # 8001cf70 <__func__.1+0x2c8>
    80010ffa:	de0ff06f          	j	800105da <software_interrupt_ssi+0x90>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80010ffe:	4058                	lw	a4,4(s0)
    80011000:	478d                	li	a5,3
    80011002:	84f71ce3          	bne	a4,a5,8001085a <software_interrupt_ssi+0x310>
    80011006:	0000c597          	auipc	a1,0xc
    8001100a:	f6a58593          	add	a1,a1,-150 # 8001cf70 <__func__.1+0x2c8>
    8001100e:	84dff06f          	j	8001085a <software_interrupt_ssi+0x310>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80011012:	4058                	lw	a4,4(s0)
    80011014:	4791                	li	a5,4
    80011016:	a0f710e3          	bne	a4,a5,80010a16 <software_interrupt_ssi+0x4cc>
    8001101a:	0000c597          	auipc	a1,0xc
    8001101e:	f5658593          	add	a1,a1,-170 # 8001cf70 <__func__.1+0x2c8>
    80011022:	bad5                	j	80010a16 <software_interrupt_ssi+0x4cc>

0000000080011024 <software_interrupt_vssi>:


bool software_interrupt_vssi() {
    80011024:	1141                	add	sp,sp,-16

    TEST_START();
    80011026:	0000b597          	auipc	a1,0xb
    8001102a:	15a58593          	add	a1,a1,346 # 8001c180 <__func__.0>
    8001102e:	0000c517          	auipc	a0,0xc
    80011032:	f6250513          	add	a0,a0,-158 # 8001cf90 <__func__.1+0x2e8>
bool software_interrupt_vssi() {
    80011036:	e406                	sd	ra,8(sp)
    TEST_START();
    80011038:	3ae0a0ef          	jal	8001b3e6 <printf>
    8001103c:	4529                	li	a0,10
    8001103e:	27a090ef          	jal	8001a2b8 <putchar>

    TEST_SETUP_EXCEPT();
    80011042:	0ff0000f          	fence
    80011046:	0002c797          	auipc	a5,0x2c
    8001104a:	fca78793          	add	a5,a5,-54 # 8003d010 <excpt>
    8001104e:	4705                	li	a4,1
    80011050:	00e79023          	sh	a4,0(a5)
    80011054:	0207bc23          	sd	zero,56(a5)
    80011058:	0ff0000f          	fence

    TEST_END();
    8001105c:	0000c597          	auipc	a1,0xc
    80011060:	f1458593          	add	a1,a1,-236 # 8001cf70 <__func__.1+0x2c8>
    80011064:	0000c517          	auipc	a0,0xc
    80011068:	fc450513          	add	a0,a0,-60 # 8001d028 <__func__.1+0x380>
    8001106c:	37a0a0ef          	jal	8001b3e6 <printf>
    80011070:	4511                	li	a0,4
    80011072:	a6def0ef          	jal	80000ade <goto_priv>
    80011076:	ab0f00ef          	jal	80001326 <reset_state>


    8001107a:	60a2                	ld	ra,8(sp)
    8001107c:	4505                	li	a0,1
    8001107e:	0141                	add	sp,sp,16
    80011080:	8082                	ret

0000000080011082 <instruction_page_fault_1>:
#include <rvh_test.h>
#include <page_tables.h>

bool instruction_page_fault_1(){
    80011082:	1101                	add	sp,sp,-32

    TEST_START();
    80011084:	0000b597          	auipc	a1,0xb
    80011088:	11458593          	add	a1,a1,276 # 8001c198 <__func__.26>
    8001108c:	0000c517          	auipc	a0,0xc
    80011090:	f0450513          	add	a0,a0,-252 # 8001cf90 <__func__.1+0x2e8>
bool instruction_page_fault_1(){
    80011094:	ec06                	sd	ra,24(sp)
    80011096:	e822                	sd	s0,16(sp)
    80011098:	e426                	sd	s1,8(sp)
    TEST_START();
    8001109a:	34c0a0ef          	jal	8001b3e6 <printf>
    8001109e:	4529                	li	a0,10
    800110a0:	218090ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    800110a4:	450d                	li	a0,3
    800110a6:	a39ef0ef          	jal	80000ade <goto_priv>
    hspt_init();
    800110aa:	d36ef0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800110ae:	f78ef0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    800110b2:	4509                	li	a0,2
    800110b4:	a2bef0ef          	jal	80000ade <goto_priv>
    vspt_init();
    800110b8:	dfcef0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_HS);
    800110bc:	450d                	li	a0,3
    800110be:	a21ef0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    800110c2:	4509                	li	a0,2
    800110c4:	93fef0ef          	jal	80000a02 <set_prev_priv>

    //执行取指指令时，pte.v=0
    vaddr = hs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    800110c8:	0ff0000f          	fence
    800110cc:	4785                	li	a5,1
    800110ce:	0002c417          	auipc	s0,0x2c
    800110d2:	f4240413          	add	s0,s0,-190 # 8003d010 <excpt>
    800110d6:	00f41023          	sh	a5,0(s0)
    800110da:	0002c797          	auipc	a5,0x2c
    800110de:	f607b723          	sd	zero,-146(a5) # 8003d048 <excpt+0x38>
    800110e2:	0ff0000f          	fence
    TEST_EXEC_EXCEPT(vaddr); 
    800110e6:	400197b7          	lui	a5,0x40019
    800110ea:	078a                	sll	a5,a5,0x2
    800110ec:	00000297          	auipc	t0,0x0
    800110f0:	00c28293          	add	t0,t0,12 # 800110f8 <instruction_page_fault_1+0x76>
    800110f4:	02543c23          	sd	t0,56(s0)
    800110f8:	8782                	jr	a5

    TEST_ASSERT("hs mode fetche instruction when pte.v=0 leads to IPF",
    800110fa:	08200593          	li	a1,130
    800110fe:	00010617          	auipc	a2,0x10
    80011102:	3da60613          	add	a2,a2,986 # 800214d8 <__func__.1+0x4830>
    80011106:	0000c517          	auipc	a0,0xc
    8001110a:	ea250513          	add	a0,a0,-350 # 8001cfa8 <__func__.1+0x300>
    8001110e:	2d80a0ef          	jal	8001b3e6 <printf>
    80011112:	00144783          	lbu	a5,1(s0)
    80011116:	0000c597          	auipc	a1,0xc
    8001111a:	e6a58593          	add	a1,a1,-406 # 8001cf80 <__func__.1+0x2d8>
    8001111e:	c789                	beqz	a5,80011128 <instruction_page_fault_1+0xa6>
    80011120:	6418                	ld	a4,8(s0)
    80011122:	47b1                	li	a5,12
    80011124:	12f70563          	beq	a4,a5,8001124e <instruction_page_fault_1+0x1cc>
    80011128:	0000c517          	auipc	a0,0xc
    8001112c:	e9850513          	add	a0,a0,-360 # 8001cfc0 <__func__.1+0x318>
    80011130:	2b60a0ef          	jal	8001b3e6 <printf>
    80011134:	00144783          	lbu	a5,1(s0)
    80011138:	c789                	beqz	a5,80011142 <instruction_page_fault_1+0xc0>
    8001113a:	6418                	ld	a4,8(s0)
    8001113c:	47b1                	li	a5,12
    8001113e:	00f70c63          	beq	a4,a5,80011156 <instruction_page_fault_1+0xd4>
    80011142:	0000c517          	auipc	a0,0xc
    80011146:	e8650513          	add	a0,a0,-378 # 8001cfc8 <__func__.1+0x320>
    8001114a:	29c0a0ef          	jal	8001b3e6 <printf>
    8001114e:	02900513          	li	a0,41
    80011152:	166090ef          	jal	8001a2b8 <putchar>
    80011156:	4529                	li	a0,10
    80011158:	160090ef          	jal	8001a2b8 <putchar>
    8001115c:	00144783          	lbu	a5,1(s0)
    80011160:	4481                	li	s1,0
    80011162:	c789                	beqz	a5,8001116c <instruction_page_fault_1+0xea>
    80011164:	6404                	ld	s1,8(s0)
    80011166:	14d1                	add	s1,s1,-12
    80011168:	0014b493          	seqz	s1,s1
    );


    //执行取指指令时，pte.x=0
    vaddr = vs_page_base(VSRW_GRW);
    TEST_SETUP_EXCEPT();
    8001116c:	0ff0000f          	fence
    80011170:	4785                	li	a5,1
    80011172:	00f41023          	sh	a5,0(s0)
    80011176:	0002c797          	auipc	a5,0x2c
    8001117a:	ec07b923          	sd	zero,-302(a5) # 8003d048 <excpt+0x38>
    8001117e:	0ff0000f          	fence
    TEST_EXEC_EXCEPT(vaddr); 
    80011182:	001007b7          	lui	a5,0x100
    80011186:	05178793          	add	a5,a5,81 # 100051 <STACK_SIZE+0x51>
    8001118a:	07b2                	sll	a5,a5,0xc
    8001118c:	00000297          	auipc	t0,0x0
    80011190:	00c28293          	add	t0,t0,12 # 80011198 <instruction_page_fault_1+0x116>
    80011194:	02543c23          	sd	t0,56(s0)
    80011198:	8782                	jr	a5

    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    8001119a:	08200593          	li	a1,130
    8001119e:	00010617          	auipc	a2,0x10
    800111a2:	37260613          	add	a2,a2,882 # 80021510 <__func__.1+0x4868>
    800111a6:	0000c517          	auipc	a0,0xc
    800111aa:	e0250513          	add	a0,a0,-510 # 8001cfa8 <__func__.1+0x300>
    800111ae:	2380a0ef          	jal	8001b3e6 <printf>
    800111b2:	00144783          	lbu	a5,1(s0)
    800111b6:	0000c597          	auipc	a1,0xc
    800111ba:	dca58593          	add	a1,a1,-566 # 8001cf80 <__func__.1+0x2d8>
    800111be:	c789                	beqz	a5,800111c8 <instruction_page_fault_1+0x146>
    800111c0:	6418                	ld	a4,8(s0)
    800111c2:	47b1                	li	a5,12
    800111c4:	08f70063          	beq	a4,a5,80011244 <instruction_page_fault_1+0x1c2>
    800111c8:	0000c517          	auipc	a0,0xc
    800111cc:	df850513          	add	a0,a0,-520 # 8001cfc0 <__func__.1+0x318>
    800111d0:	2160a0ef          	jal	8001b3e6 <printf>
    800111d4:	00144783          	lbu	a5,1(s0)
    800111d8:	c789                	beqz	a5,800111e2 <instruction_page_fault_1+0x160>
    800111da:	6418                	ld	a4,8(s0)
    800111dc:	47b1                	li	a5,12
    800111de:	00f70c63          	beq	a4,a5,800111f6 <instruction_page_fault_1+0x174>
    800111e2:	0000c517          	auipc	a0,0xc
    800111e6:	de650513          	add	a0,a0,-538 # 8001cfc8 <__func__.1+0x320>
    800111ea:	1fc0a0ef          	jal	8001b3e6 <printf>
    800111ee:	02900513          	li	a0,41
    800111f2:	0c6090ef          	jal	8001a2b8 <putchar>
    800111f6:	4529                	li	a0,10
    800111f8:	0c0090ef          	jal	8001a2b8 <putchar>
    800111fc:	cc95                	beqz	s1,80011238 <instruction_page_fault_1+0x1b6>
    800111fe:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80011202:	0000c597          	auipc	a1,0xc
    80011206:	d7e58593          	add	a1,a1,-642 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    8001120a:	c491                	beqz	s1,80011216 <instruction_page_fault_1+0x194>
    8001120c:	6418                	ld	a4,8(s0)
    8001120e:	47b1                	li	a5,12
    80011210:	04f70463          	beq	a4,a5,80011258 <instruction_page_fault_1+0x1d6>
    80011214:	4481                	li	s1,0
    TEST_END();
    80011216:	0000c517          	auipc	a0,0xc
    8001121a:	e1250513          	add	a0,a0,-494 # 8001d028 <__func__.1+0x380>
    8001121e:	1c80a0ef          	jal	8001b3e6 <printf>
    80011222:	4511                	li	a0,4
    80011224:	8bbef0ef          	jal	80000ade <goto_priv>
    80011228:	8fef00ef          	jal	80001326 <reset_state>
}
    8001122c:	60e2                	ld	ra,24(sp)
    8001122e:	6442                	ld	s0,16(sp)
    80011230:	8526                	mv	a0,s1
    80011232:	64a2                	ld	s1,8(sp)
    80011234:	6105                	add	sp,sp,32
    80011236:	8082                	ret
    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    80011238:	4481                	li	s1,0
    TEST_END();
    8001123a:	0000c597          	auipc	a1,0xc
    8001123e:	d4658593          	add	a1,a1,-698 # 8001cf80 <__func__.1+0x2d8>
    80011242:	bfd1                	j	80011216 <instruction_page_fault_1+0x194>
    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    80011244:	0000c597          	auipc	a1,0xc
    80011248:	d2c58593          	add	a1,a1,-724 # 8001cf70 <__func__.1+0x2c8>
    8001124c:	bfb5                	j	800111c8 <instruction_page_fault_1+0x146>
    TEST_ASSERT("hs mode fetche instruction when pte.v=0 leads to IPF",
    8001124e:	0000c597          	auipc	a1,0xc
    80011252:	d2258593          	add	a1,a1,-734 # 8001cf70 <__func__.1+0x2c8>
    80011256:	bdc9                	j	80011128 <instruction_page_fault_1+0xa6>
    TEST_END();
    80011258:	0000c597          	auipc	a1,0xc
    8001125c:	d1858593          	add	a1,a1,-744 # 8001cf70 <__func__.1+0x2c8>
    80011260:	bf5d                	j	80011216 <instruction_page_fault_1+0x194>

0000000080011262 <instruction_page_fault_2>:

bool instruction_page_fault_2(){
    80011262:	1101                	add	sp,sp,-32

    TEST_START();
    80011264:	0000b597          	auipc	a1,0xb
    80011268:	f5458593          	add	a1,a1,-172 # 8001c1b8 <__func__.24>
    8001126c:	0000c517          	auipc	a0,0xc
    80011270:	d2450513          	add	a0,a0,-732 # 8001cf90 <__func__.1+0x2e8>
bool instruction_page_fault_2(){
    80011274:	ec06                	sd	ra,24(sp)
    80011276:	e822                	sd	s0,16(sp)
    80011278:	e426                	sd	s1,8(sp)
    TEST_START();
    8001127a:	16c0a0ef          	jal	8001b3e6 <printf>
    8001127e:	4529                	li	a0,10
    80011280:	038090ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80011284:	450d                	li	a0,3
    80011286:	859ef0ef          	jal	80000ade <goto_priv>
    hspt_init();
    8001128a:	b56ef0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001128e:	d98ef0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80011292:	4509                	li	a0,2
    80011294:	84bef0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80011298:	c1cef0ef          	jal	800006b4 <vspt_init>


    goto_priv(PRIV_HS);
    8001129c:	450d                	li	a0,3
    8001129e:	841ef0ef          	jal	80000ade <goto_priv>

    //执行取指指令时，在HS模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800112a2:	0ff0000f          	fence
    800112a6:	4785                	li	a5,1
    800112a8:	0002c417          	auipc	s0,0x2c
    800112ac:	d6840413          	add	s0,s0,-664 # 8003d010 <excpt>
    800112b0:	00f41023          	sh	a5,0(s0)
    800112b4:	0002c797          	auipc	a5,0x2c
    800112b8:	d807ba23          	sd	zero,-620(a5) # 8003d048 <excpt+0x38>
    800112bc:	0ff0000f          	fence
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    TEST_EXEC_EXCEPT(vaddr); 
    800112c0:	000807b7          	lui	a5,0x80
    800112c4:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800112c6:	07b6                	sll	a5,a5,0xd
    800112c8:	00000297          	auipc	t0,0x0
    800112cc:	00c28293          	add	t0,t0,12 # 800112d4 <instruction_page_fault_2+0x72>
    800112d0:	02543c23          	sd	t0,56(s0)
    800112d4:	8782                	jr	a5
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    800112d6:	08200593          	li	a1,130
    800112da:	00010617          	auipc	a2,0x10
    800112de:	26e60613          	add	a2,a2,622 # 80021548 <__func__.1+0x48a0>
    800112e2:	0000c517          	auipc	a0,0xc
    800112e6:	cc650513          	add	a0,a0,-826 # 8001cfa8 <__func__.1+0x300>
    800112ea:	0fc0a0ef          	jal	8001b3e6 <printf>
    800112ee:	00144783          	lbu	a5,1(s0)
    800112f2:	0000c597          	auipc	a1,0xc
    800112f6:	c8e58593          	add	a1,a1,-882 # 8001cf80 <__func__.1+0x2d8>
    800112fa:	c789                	beqz	a5,80011304 <instruction_page_fault_2+0xa2>
    800112fc:	6418                	ld	a4,8(s0)
    800112fe:	47b1                	li	a5,12
    80011300:	06f70e63          	beq	a4,a5,8001137c <instruction_page_fault_2+0x11a>
    80011304:	0000c517          	auipc	a0,0xc
    80011308:	cbc50513          	add	a0,a0,-836 # 8001cfc0 <__func__.1+0x318>
    8001130c:	0da0a0ef          	jal	8001b3e6 <printf>
    80011310:	00144783          	lbu	a5,1(s0)
    80011314:	c789                	beqz	a5,8001131e <instruction_page_fault_2+0xbc>
    80011316:	6418                	ld	a4,8(s0)
    80011318:	47b1                	li	a5,12
    8001131a:	00f70c63          	beq	a4,a5,80011332 <instruction_page_fault_2+0xd0>
    8001131e:	0000c517          	auipc	a0,0xc
    80011322:	caa50513          	add	a0,a0,-854 # 8001cfc8 <__func__.1+0x320>
    80011326:	0c00a0ef          	jal	8001b3e6 <printf>
    8001132a:	02900513          	li	a0,41
    8001132e:	78b080ef          	jal	8001a2b8 <putchar>
    80011332:	4529                	li	a0,10
    80011334:	785080ef          	jal	8001a2b8 <putchar>
    80011338:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    8001133c:	0000c597          	auipc	a1,0xc
    80011340:	c4458593          	add	a1,a1,-956 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    80011344:	c491                	beqz	s1,80011350 <instruction_page_fault_2+0xee>
    80011346:	6418                	ld	a4,8(s0)
    80011348:	47b1                	li	a5,12
    8001134a:	02f70463          	beq	a4,a5,80011372 <instruction_page_fault_2+0x110>
    8001134e:	4481                	li	s1,0
    TEST_END();
    80011350:	0000c517          	auipc	a0,0xc
    80011354:	cd850513          	add	a0,a0,-808 # 8001d028 <__func__.1+0x380>
    80011358:	08e0a0ef          	jal	8001b3e6 <printf>
    8001135c:	4511                	li	a0,4
    8001135e:	f80ef0ef          	jal	80000ade <goto_priv>
    80011362:	fc5ef0ef          	jal	80001326 <reset_state>
}
    80011366:	60e2                	ld	ra,24(sp)
    80011368:	6442                	ld	s0,16(sp)
    8001136a:	8526                	mv	a0,s1
    8001136c:	64a2                	ld	s1,8(sp)
    8001136e:	6105                	add	sp,sp,32
    80011370:	8082                	ret
    TEST_END();
    80011372:	0000c597          	auipc	a1,0xc
    80011376:	bfe58593          	add	a1,a1,-1026 # 8001cf70 <__func__.1+0x2c8>
    8001137a:	bfd9                	j	80011350 <instruction_page_fault_2+0xee>
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    8001137c:	0000c597          	auipc	a1,0xc
    80011380:	bf458593          	add	a1,a1,-1036 # 8001cf70 <__func__.1+0x2c8>
    80011384:	b741                	j	80011304 <instruction_page_fault_2+0xa2>

0000000080011386 <instruction_page_fault_3>:



bool instruction_page_fault_3(){
    80011386:	1101                	add	sp,sp,-32

    TEST_START();
    80011388:	0000b597          	auipc	a1,0xb
    8001138c:	e5058593          	add	a1,a1,-432 # 8001c1d8 <__func__.23>
    80011390:	0000c517          	auipc	a0,0xc
    80011394:	c0050513          	add	a0,a0,-1024 # 8001cf90 <__func__.1+0x2e8>
bool instruction_page_fault_3(){
    80011398:	ec06                	sd	ra,24(sp)
    8001139a:	e822                	sd	s0,16(sp)
    8001139c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001139e:	0480a0ef          	jal	8001b3e6 <printf>
    800113a2:	4529                	li	a0,10
    800113a4:	715080ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    800113a8:	450d                	li	a0,3
    800113aa:	f34ef0ef          	jal	80000ade <goto_priv>
    hspt_init();
    800113ae:	a32ef0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800113b2:	c74ef0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    800113b6:	4509                	li	a0,2
    800113b8:	f26ef0ef          	jal	80000ade <goto_priv>
    vspt_init();
    800113bc:	af8ef0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    800113c0:	4509                	li	a0,2
    800113c2:	f1cef0ef          	jal	80000ade <goto_priv>


    //执行取指指令时，pte.v=0
    vaddr = hs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    800113c6:	0ff0000f          	fence
    800113ca:	4785                	li	a5,1
    800113cc:	0002c417          	auipc	s0,0x2c
    800113d0:	c4440413          	add	s0,s0,-956 # 8003d010 <excpt>
    800113d4:	00f41023          	sh	a5,0(s0)
    800113d8:	0002c797          	auipc	a5,0x2c
    800113dc:	c607b823          	sd	zero,-912(a5) # 8003d048 <excpt+0x38>
    800113e0:	0ff0000f          	fence
    TEST_EXEC_EXCEPT(vaddr); 
    800113e4:	400197b7          	lui	a5,0x40019
    800113e8:	078a                	sll	a5,a5,0x2
    800113ea:	00000297          	auipc	t0,0x0
    800113ee:	00c28293          	add	t0,t0,12 # 800113f6 <instruction_page_fault_3+0x70>
    800113f2:	02543c23          	sd	t0,56(s0)
    800113f6:	8782                	jr	a5

    TEST_ASSERT("vs mode fetch instruction when pte.v=0 leads to IPF",
    800113f8:	08200593          	li	a1,130
    800113fc:	00010617          	auipc	a2,0x10
    80011400:	18460613          	add	a2,a2,388 # 80021580 <__func__.1+0x48d8>
    80011404:	0000c517          	auipc	a0,0xc
    80011408:	ba450513          	add	a0,a0,-1116 # 8001cfa8 <__func__.1+0x300>
    8001140c:	7db090ef          	jal	8001b3e6 <printf>
    80011410:	00144783          	lbu	a5,1(s0)
    80011414:	0000c597          	auipc	a1,0xc
    80011418:	b6c58593          	add	a1,a1,-1172 # 8001cf80 <__func__.1+0x2d8>
    8001141c:	c789                	beqz	a5,80011426 <instruction_page_fault_3+0xa0>
    8001141e:	6418                	ld	a4,8(s0)
    80011420:	47b1                	li	a5,12
    80011422:	12f70563          	beq	a4,a5,8001154c <instruction_page_fault_3+0x1c6>
    80011426:	0000c517          	auipc	a0,0xc
    8001142a:	b9a50513          	add	a0,a0,-1126 # 8001cfc0 <__func__.1+0x318>
    8001142e:	7b9090ef          	jal	8001b3e6 <printf>
    80011432:	00144783          	lbu	a5,1(s0)
    80011436:	c789                	beqz	a5,80011440 <instruction_page_fault_3+0xba>
    80011438:	6418                	ld	a4,8(s0)
    8001143a:	47b1                	li	a5,12
    8001143c:	00f70c63          	beq	a4,a5,80011454 <instruction_page_fault_3+0xce>
    80011440:	0000c517          	auipc	a0,0xc
    80011444:	b8850513          	add	a0,a0,-1144 # 8001cfc8 <__func__.1+0x320>
    80011448:	79f090ef          	jal	8001b3e6 <printf>
    8001144c:	02900513          	li	a0,41
    80011450:	669080ef          	jal	8001a2b8 <putchar>
    80011454:	4529                	li	a0,10
    80011456:	663080ef          	jal	8001a2b8 <putchar>
    8001145a:	00144783          	lbu	a5,1(s0)
    8001145e:	4481                	li	s1,0
    80011460:	c789                	beqz	a5,8001146a <instruction_page_fault_3+0xe4>
    80011462:	6404                	ld	s1,8(s0)
    80011464:	14d1                	add	s1,s1,-12
    80011466:	0014b493          	seqz	s1,s1
    );


    //执行取指指令时，pte.x=0
    vaddr = vs_page_base(VSRW_GRW);
    TEST_SETUP_EXCEPT();
    8001146a:	0ff0000f          	fence
    8001146e:	4785                	li	a5,1
    80011470:	00f41023          	sh	a5,0(s0)
    80011474:	0002c797          	auipc	a5,0x2c
    80011478:	bc07ba23          	sd	zero,-1068(a5) # 8003d048 <excpt+0x38>
    8001147c:	0ff0000f          	fence
    TEST_EXEC_EXCEPT(vaddr); 
    80011480:	001007b7          	lui	a5,0x100
    80011484:	05178793          	add	a5,a5,81 # 100051 <STACK_SIZE+0x51>
    80011488:	07b2                	sll	a5,a5,0xc
    8001148a:	00000297          	auipc	t0,0x0
    8001148e:	00c28293          	add	t0,t0,12 # 80011496 <instruction_page_fault_3+0x110>
    80011492:	02543c23          	sd	t0,56(s0)
    80011496:	8782                	jr	a5

    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    80011498:	08200593          	li	a1,130
    8001149c:	00010617          	auipc	a2,0x10
    800114a0:	11c60613          	add	a2,a2,284 # 800215b8 <__func__.1+0x4910>
    800114a4:	0000c517          	auipc	a0,0xc
    800114a8:	b0450513          	add	a0,a0,-1276 # 8001cfa8 <__func__.1+0x300>
    800114ac:	73b090ef          	jal	8001b3e6 <printf>
    800114b0:	00144783          	lbu	a5,1(s0)
    800114b4:	0000c597          	auipc	a1,0xc
    800114b8:	acc58593          	add	a1,a1,-1332 # 8001cf80 <__func__.1+0x2d8>
    800114bc:	c789                	beqz	a5,800114c6 <instruction_page_fault_3+0x140>
    800114be:	6418                	ld	a4,8(s0)
    800114c0:	47b1                	li	a5,12
    800114c2:	08f70063          	beq	a4,a5,80011542 <instruction_page_fault_3+0x1bc>
    800114c6:	0000c517          	auipc	a0,0xc
    800114ca:	afa50513          	add	a0,a0,-1286 # 8001cfc0 <__func__.1+0x318>
    800114ce:	719090ef          	jal	8001b3e6 <printf>
    800114d2:	00144783          	lbu	a5,1(s0)
    800114d6:	c789                	beqz	a5,800114e0 <instruction_page_fault_3+0x15a>
    800114d8:	6418                	ld	a4,8(s0)
    800114da:	47b1                	li	a5,12
    800114dc:	00f70c63          	beq	a4,a5,800114f4 <instruction_page_fault_3+0x16e>
    800114e0:	0000c517          	auipc	a0,0xc
    800114e4:	ae850513          	add	a0,a0,-1304 # 8001cfc8 <__func__.1+0x320>
    800114e8:	6ff090ef          	jal	8001b3e6 <printf>
    800114ec:	02900513          	li	a0,41
    800114f0:	5c9080ef          	jal	8001a2b8 <putchar>
    800114f4:	4529                	li	a0,10
    800114f6:	5c3080ef          	jal	8001a2b8 <putchar>
    800114fa:	cc95                	beqz	s1,80011536 <instruction_page_fault_3+0x1b0>
    800114fc:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80011500:	0000c597          	auipc	a1,0xc
    80011504:	a8058593          	add	a1,a1,-1408 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    80011508:	c491                	beqz	s1,80011514 <instruction_page_fault_3+0x18e>
    8001150a:	6418                	ld	a4,8(s0)
    8001150c:	47b1                	li	a5,12
    8001150e:	04f70463          	beq	a4,a5,80011556 <instruction_page_fault_3+0x1d0>
    80011512:	4481                	li	s1,0
    TEST_END();
    80011514:	0000c517          	auipc	a0,0xc
    80011518:	b1450513          	add	a0,a0,-1260 # 8001d028 <__func__.1+0x380>
    8001151c:	6cb090ef          	jal	8001b3e6 <printf>
    80011520:	4511                	li	a0,4
    80011522:	dbcef0ef          	jal	80000ade <goto_priv>
    80011526:	e01ef0ef          	jal	80001326 <reset_state>
}
    8001152a:	60e2                	ld	ra,24(sp)
    8001152c:	6442                	ld	s0,16(sp)
    8001152e:	8526                	mv	a0,s1
    80011530:	64a2                	ld	s1,8(sp)
    80011532:	6105                	add	sp,sp,32
    80011534:	8082                	ret
    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    80011536:	4481                	li	s1,0
    TEST_END();
    80011538:	0000c597          	auipc	a1,0xc
    8001153c:	a4858593          	add	a1,a1,-1464 # 8001cf80 <__func__.1+0x2d8>
    80011540:	bfd1                	j	80011514 <instruction_page_fault_3+0x18e>
    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    80011542:	0000c597          	auipc	a1,0xc
    80011546:	a2e58593          	add	a1,a1,-1490 # 8001cf70 <__func__.1+0x2c8>
    8001154a:	bfb5                	j	800114c6 <instruction_page_fault_3+0x140>
    TEST_ASSERT("vs mode fetch instruction when pte.v=0 leads to IPF",
    8001154c:	0000c597          	auipc	a1,0xc
    80011550:	a2458593          	add	a1,a1,-1500 # 8001cf70 <__func__.1+0x2c8>
    80011554:	bdc9                	j	80011426 <instruction_page_fault_3+0xa0>
    TEST_END();
    80011556:	0000c597          	auipc	a1,0xc
    8001155a:	a1a58593          	add	a1,a1,-1510 # 8001cf70 <__func__.1+0x2c8>
    8001155e:	bf5d                	j	80011514 <instruction_page_fault_3+0x18e>

0000000080011560 <instruction_page_fault_4>:

bool instruction_page_fault_4(){
    80011560:	1101                	add	sp,sp,-32

    TEST_START();
    80011562:	0000b597          	auipc	a1,0xb
    80011566:	c9658593          	add	a1,a1,-874 # 8001c1f8 <__func__.22>
    8001156a:	0000c517          	auipc	a0,0xc
    8001156e:	a2650513          	add	a0,a0,-1498 # 8001cf90 <__func__.1+0x2e8>
bool instruction_page_fault_4(){
    80011572:	ec06                	sd	ra,24(sp)
    80011574:	e822                	sd	s0,16(sp)
    80011576:	e426                	sd	s1,8(sp)
    TEST_START();
    80011578:	66f090ef          	jal	8001b3e6 <printf>
    8001157c:	4529                	li	a0,10
    8001157e:	53b080ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80011582:	450d                	li	a0,3
    80011584:	d5aef0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80011588:	858ef0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001158c:	a9aef0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80011590:	4509                	li	a0,2
    80011592:	d4cef0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80011596:	91eef0ef          	jal	800006b4 <vspt_init>


    goto_priv(PRIV_VS);
    8001159a:	4509                	li	a0,2
    8001159c:	d42ef0ef          	jal	80000ade <goto_priv>

    //执行取指指令时，在VS模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800115a0:	0ff0000f          	fence
    800115a4:	4785                	li	a5,1
    800115a6:	0002c417          	auipc	s0,0x2c
    800115aa:	a6a40413          	add	s0,s0,-1430 # 8003d010 <excpt>
    800115ae:	00f41023          	sh	a5,0(s0)
    800115b2:	0002c797          	auipc	a5,0x2c
    800115b6:	a807bb23          	sd	zero,-1386(a5) # 8003d048 <excpt+0x38>
    800115ba:	0ff0000f          	fence
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    TEST_EXEC_EXCEPT(vaddr); 
    800115be:	000807b7          	lui	a5,0x80
    800115c2:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800115c4:	07b6                	sll	a5,a5,0xd
    800115c6:	00000297          	auipc	t0,0x0
    800115ca:	00c28293          	add	t0,t0,12 # 800115d2 <instruction_page_fault_4+0x72>
    800115ce:	02543c23          	sd	t0,56(s0)
    800115d2:	8782                	jr	a5
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    800115d4:	08200593          	li	a1,130
    800115d8:	00010617          	auipc	a2,0x10
    800115dc:	01860613          	add	a2,a2,24 # 800215f0 <__func__.1+0x4948>
    800115e0:	0000c517          	auipc	a0,0xc
    800115e4:	9c850513          	add	a0,a0,-1592 # 8001cfa8 <__func__.1+0x300>
    800115e8:	5ff090ef          	jal	8001b3e6 <printf>
    800115ec:	00144783          	lbu	a5,1(s0)
    800115f0:	0000c597          	auipc	a1,0xc
    800115f4:	99058593          	add	a1,a1,-1648 # 8001cf80 <__func__.1+0x2d8>
    800115f8:	c789                	beqz	a5,80011602 <instruction_page_fault_4+0xa2>
    800115fa:	6418                	ld	a4,8(s0)
    800115fc:	47b1                	li	a5,12
    800115fe:	06f70e63          	beq	a4,a5,8001167a <instruction_page_fault_4+0x11a>
    80011602:	0000c517          	auipc	a0,0xc
    80011606:	9be50513          	add	a0,a0,-1602 # 8001cfc0 <__func__.1+0x318>
    8001160a:	5dd090ef          	jal	8001b3e6 <printf>
    8001160e:	00144783          	lbu	a5,1(s0)
    80011612:	c789                	beqz	a5,8001161c <instruction_page_fault_4+0xbc>
    80011614:	6418                	ld	a4,8(s0)
    80011616:	47b1                	li	a5,12
    80011618:	00f70c63          	beq	a4,a5,80011630 <instruction_page_fault_4+0xd0>
    8001161c:	0000c517          	auipc	a0,0xc
    80011620:	9ac50513          	add	a0,a0,-1620 # 8001cfc8 <__func__.1+0x320>
    80011624:	5c3090ef          	jal	8001b3e6 <printf>
    80011628:	02900513          	li	a0,41
    8001162c:	48d080ef          	jal	8001a2b8 <putchar>
    80011630:	4529                	li	a0,10
    80011632:	487080ef          	jal	8001a2b8 <putchar>
    80011636:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    8001163a:	0000c597          	auipc	a1,0xc
    8001163e:	94658593          	add	a1,a1,-1722 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    80011642:	c491                	beqz	s1,8001164e <instruction_page_fault_4+0xee>
    80011644:	6418                	ld	a4,8(s0)
    80011646:	47b1                	li	a5,12
    80011648:	02f70463          	beq	a4,a5,80011670 <instruction_page_fault_4+0x110>
    8001164c:	4481                	li	s1,0
    TEST_END();
    8001164e:	0000c517          	auipc	a0,0xc
    80011652:	9da50513          	add	a0,a0,-1574 # 8001d028 <__func__.1+0x380>
    80011656:	591090ef          	jal	8001b3e6 <printf>
    8001165a:	4511                	li	a0,4
    8001165c:	c82ef0ef          	jal	80000ade <goto_priv>
    80011660:	cc7ef0ef          	jal	80001326 <reset_state>
}
    80011664:	60e2                	ld	ra,24(sp)
    80011666:	6442                	ld	s0,16(sp)
    80011668:	8526                	mv	a0,s1
    8001166a:	64a2                	ld	s1,8(sp)
    8001166c:	6105                	add	sp,sp,32
    8001166e:	8082                	ret
    TEST_END();
    80011670:	0000c597          	auipc	a1,0xc
    80011674:	90058593          	add	a1,a1,-1792 # 8001cf70 <__func__.1+0x2c8>
    80011678:	bfd9                	j	8001164e <instruction_page_fault_4+0xee>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    8001167a:	0000c597          	auipc	a1,0xc
    8001167e:	8f658593          	add	a1,a1,-1802 # 8001cf70 <__func__.1+0x2c8>
    80011682:	b741                	j	80011602 <instruction_page_fault_4+0xa2>

0000000080011684 <load_page_fault_1>:

bool load_page_fault_1(){
    80011684:	1101                	add	sp,sp,-32

    TEST_START();
    80011686:	0000b597          	auipc	a1,0xb
    8001168a:	b9258593          	add	a1,a1,-1134 # 8001c218 <__func__.21>
    8001168e:	0000c517          	auipc	a0,0xc
    80011692:	90250513          	add	a0,a0,-1790 # 8001cf90 <__func__.1+0x2e8>
bool load_page_fault_1(){
    80011696:	ec06                	sd	ra,24(sp)
    80011698:	e822                	sd	s0,16(sp)
    8001169a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001169c:	54b090ef          	jal	8001b3e6 <printf>
    800116a0:	4529                	li	a0,10
    800116a2:	417080ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS); 
    800116a6:	450d                	li	a0,3
    800116a8:	c36ef0ef          	jal	80000ade <goto_priv>
    hspt_init();
    800116ac:	f35ee0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800116b0:	976ef0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    800116b4:	4509                	li	a0,2
    800116b6:	c28ef0ef          	jal	80000ade <goto_priv>
    vspt_init();
    800116ba:	ffbee0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    800116be:	450d                	li	a0,3
    800116c0:	c1eef0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    800116c4:	4509                	li	a0,2
    800116c6:	b3cef0ef          	jal	80000a02 <set_prev_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    800116ca:	0ff0000f          	fence
    800116ce:	4785                	li	a5,1
    800116d0:	0002c417          	auipc	s0,0x2c
    800116d4:	94040413          	add	s0,s0,-1728 # 8003d010 <excpt>
    800116d8:	00f41023          	sh	a5,0(s0)
    800116dc:	0002c797          	auipc	a5,0x2c
    800116e0:	9607b623          	sd	zero,-1684(a5) # 8003d048 <excpt+0x38>
    800116e4:	0ff0000f          	fence
    asm volatile(
    800116e8:	400197b7          	lui	a5,0x40019
    800116ec:	078a                	sll	a5,a5,0x2
    800116ee:	6007c7f3          	.4byte	0x6007c7f3

    addr = hs_page_base(VSI_GI);
    hlvb(addr);
    TEST_ASSERT("hs mode load when pte.v=0 leads to LPF",
    800116f2:	08200593          	li	a1,130
    800116f6:	00010617          	auipc	a2,0x10
    800116fa:	f3260613          	add	a2,a2,-206 # 80021628 <__func__.1+0x4980>
    800116fe:	0000c517          	auipc	a0,0xc
    80011702:	8aa50513          	add	a0,a0,-1878 # 8001cfa8 <__func__.1+0x300>
    80011706:	4e1090ef          	jal	8001b3e6 <printf>
    8001170a:	00144783          	lbu	a5,1(s0)
    8001170e:	0000c597          	auipc	a1,0xc
    80011712:	87258593          	add	a1,a1,-1934 # 8001cf80 <__func__.1+0x2d8>
    80011716:	c789                	beqz	a5,80011720 <load_page_fault_1+0x9c>
    80011718:	6418                	ld	a4,8(s0)
    8001171a:	47b5                	li	a5,13
    8001171c:	1cf70f63          	beq	a4,a5,800118fa <load_page_fault_1+0x276>
    80011720:	0000c517          	auipc	a0,0xc
    80011724:	8a050513          	add	a0,a0,-1888 # 8001cfc0 <__func__.1+0x318>
    80011728:	4bf090ef          	jal	8001b3e6 <printf>
    8001172c:	00144783          	lbu	a5,1(s0)
    80011730:	c789                	beqz	a5,8001173a <load_page_fault_1+0xb6>
    80011732:	6418                	ld	a4,8(s0)
    80011734:	47b5                	li	a5,13
    80011736:	00f70c63          	beq	a4,a5,8001174e <load_page_fault_1+0xca>
    8001173a:	0000c517          	auipc	a0,0xc
    8001173e:	88e50513          	add	a0,a0,-1906 # 8001cfc8 <__func__.1+0x320>
    80011742:	4a5090ef          	jal	8001b3e6 <printf>
    80011746:	02900513          	li	a0,41
    8001174a:	36f080ef          	jal	8001a2b8 <putchar>
    8001174e:	4529                	li	a0,10
    80011750:	369080ef          	jal	8001a2b8 <putchar>
    80011754:	00144783          	lbu	a5,1(s0)
    80011758:	4481                	li	s1,0
    8001175a:	c789                	beqz	a5,80011764 <load_page_fault_1+0xe0>
    8001175c:	6404                	ld	s1,8(s0)
    8001175e:	14cd                	add	s1,s1,-13
    80011760:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_LPF
    );


    //执行hlvd指令时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    TEST_SETUP_EXCEPT();
    80011764:	0ff0000f          	fence
    80011768:	4785                	li	a5,1
    8001176a:	00f41023          	sh	a5,0(s0)
    8001176e:	0002c797          	auipc	a5,0x2c
    80011772:	8c07bd23          	sd	zero,-1830(a5) # 8003d048 <excpt+0x38>
    80011776:	0ff0000f          	fence
    addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001177a:	000807b7          	lui	a5,0x80
    8001177e:	1007b073          	csrc	sstatus,a5
    asm volatile(
    80011782:	001007b7          	lui	a5,0x100
    80011786:	05f78793          	add	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    8001178a:	07b2                	sll	a5,a5,0xc
    8001178c:	6c07c7f3          	.4byte	0x6c07c7f3
    hlvd(addr);   
    TEST_ASSERT("hs mode load when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80011790:	08200593          	li	a1,130
    80011794:	00010617          	auipc	a2,0x10
    80011798:	ebc60613          	add	a2,a2,-324 # 80021650 <__func__.1+0x49a8>
    8001179c:	0000c517          	auipc	a0,0xc
    800117a0:	80c50513          	add	a0,a0,-2036 # 8001cfa8 <__func__.1+0x300>
    800117a4:	443090ef          	jal	8001b3e6 <printf>
    800117a8:	00144783          	lbu	a5,1(s0)
    800117ac:	0000b597          	auipc	a1,0xb
    800117b0:	7d458593          	add	a1,a1,2004 # 8001cf80 <__func__.1+0x2d8>
    800117b4:	c789                	beqz	a5,800117be <load_page_fault_1+0x13a>
    800117b6:	6418                	ld	a4,8(s0)
    800117b8:	47b5                	li	a5,13
    800117ba:	14f70563          	beq	a4,a5,80011904 <load_page_fault_1+0x280>
    800117be:	0000c517          	auipc	a0,0xc
    800117c2:	80250513          	add	a0,a0,-2046 # 8001cfc0 <__func__.1+0x318>
    800117c6:	421090ef          	jal	8001b3e6 <printf>
    800117ca:	00144783          	lbu	a5,1(s0)
    800117ce:	c789                	beqz	a5,800117d8 <load_page_fault_1+0x154>
    800117d0:	6418                	ld	a4,8(s0)
    800117d2:	47b5                	li	a5,13
    800117d4:	00f70c63          	beq	a4,a5,800117ec <load_page_fault_1+0x168>
    800117d8:	0000b517          	auipc	a0,0xb
    800117dc:	7f050513          	add	a0,a0,2032 # 8001cfc8 <__func__.1+0x320>
    800117e0:	407090ef          	jal	8001b3e6 <printf>
    800117e4:	02900513          	li	a0,41
    800117e8:	2d1080ef          	jal	8001a2b8 <putchar>
    800117ec:	4529                	li	a0,10
    800117ee:	2cb080ef          	jal	8001a2b8 <putchar>
    800117f2:	c491                	beqz	s1,800117fe <load_page_fault_1+0x17a>
    800117f4:	00144783          	lbu	a5,1(s0)
    800117f8:	4481                	li	s1,0
    800117fa:	0e079663          	bnez	a5,800118e6 <load_page_fault_1+0x262>
        excpt.cause == CAUSE_LPF
    );

    //执行hlvd指令时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    goto_priv(PRIV_HS);
    800117fe:	450d                	li	a0,3
    80011800:	adeef0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80011804:	0ff0000f          	fence
    80011808:	4785                	li	a5,1
    8001180a:	00f41023          	sh	a5,0(s0)
    8001180e:	0002c797          	auipc	a5,0x2c
    80011812:	8207bd23          	sd	zero,-1990(a5) # 8003d048 <excpt+0x38>
    80011816:	0ff0000f          	fence
    addr = hs_page_base(VSV_GV);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    8001181a:	000807b7          	lui	a5,0x80
    8001181e:	1007a073          	csrs	sstatus,a5
    80011822:	001007b7          	lui	a5,0x100
    80011826:	07f5                	add	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    80011828:	07b2                	sll	a5,a5,0xc
    8001182a:	6c07c7f3          	.4byte	0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001182e:	08200593          	li	a1,130
    80011832:	00010617          	auipc	a2,0x10
    80011836:	e5e60613          	add	a2,a2,-418 # 80021690 <__func__.1+0x49e8>
    8001183a:	0000b517          	auipc	a0,0xb
    8001183e:	76e50513          	add	a0,a0,1902 # 8001cfa8 <__func__.1+0x300>
    80011842:	3a5090ef          	jal	8001b3e6 <printf>
    80011846:	00144783          	lbu	a5,1(s0)
    8001184a:	0000b597          	auipc	a1,0xb
    8001184e:	73658593          	add	a1,a1,1846 # 8001cf80 <__func__.1+0x2d8>
    80011852:	c789                	beqz	a5,8001185c <load_page_fault_1+0x1d8>
    80011854:	6418                	ld	a4,8(s0)
    80011856:	47b5                	li	a5,13
    80011858:	08f70c63          	beq	a4,a5,800118f0 <load_page_fault_1+0x26c>
    8001185c:	0000b517          	auipc	a0,0xb
    80011860:	76450513          	add	a0,a0,1892 # 8001cfc0 <__func__.1+0x318>
    80011864:	383090ef          	jal	8001b3e6 <printf>
    80011868:	00144783          	lbu	a5,1(s0)
    8001186c:	c789                	beqz	a5,80011876 <load_page_fault_1+0x1f2>
    8001186e:	6418                	ld	a4,8(s0)
    80011870:	47b5                	li	a5,13
    80011872:	00f70c63          	beq	a4,a5,8001188a <load_page_fault_1+0x206>
    80011876:	0000b517          	auipc	a0,0xb
    8001187a:	75250513          	add	a0,a0,1874 # 8001cfc8 <__func__.1+0x320>
    8001187e:	369090ef          	jal	8001b3e6 <printf>
    80011882:	02900513          	li	a0,41
    80011886:	233080ef          	jal	8001a2b8 <putchar>
    8001188a:	4529                	li	a0,10
    8001188c:	22d080ef          	jal	8001a2b8 <putchar>
    80011890:	c481                	beqz	s1,80011898 <load_page_fault_1+0x214>
    80011892:	00144483          	lbu	s1,1(s0)
    80011896:	e89d                	bnez	s1,800118cc <load_page_fault_1+0x248>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80011898:	000807b7          	lui	a5,0x80
    8001189c:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800118a0:	4481                	li	s1,0

    TEST_END();
    800118a2:	0000b597          	auipc	a1,0xb
    800118a6:	6de58593          	add	a1,a1,1758 # 8001cf80 <__func__.1+0x2d8>
    800118aa:	0000b517          	auipc	a0,0xb
    800118ae:	77e50513          	add	a0,a0,1918 # 8001d028 <__func__.1+0x380>
    800118b2:	335090ef          	jal	8001b3e6 <printf>
    800118b6:	4511                	li	a0,4
    800118b8:	a26ef0ef          	jal	80000ade <goto_priv>
    800118bc:	a6bef0ef          	jal	80001326 <reset_state>

}
    800118c0:	60e2                	ld	ra,24(sp)
    800118c2:	6442                	ld	s0,16(sp)
    800118c4:	8526                	mv	a0,s1
    800118c6:	64a2                	ld	s1,8(sp)
    800118c8:	6105                	add	sp,sp,32
    800118ca:	8082                	ret
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800118cc:	6418                	ld	a4,8(s0)
    800118ce:	47b5                	li	a5,13
    800118d0:	fcf714e3          	bne	a4,a5,80011898 <load_page_fault_1+0x214>
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800118d4:	000807b7          	lui	a5,0x80
    800118d8:	1007b073          	csrc	sstatus,a5
    TEST_END();
    800118dc:	0000b597          	auipc	a1,0xb
    800118e0:	69458593          	add	a1,a1,1684 # 8001cf70 <__func__.1+0x2c8>
    800118e4:	b7d9                	j	800118aa <load_page_fault_1+0x226>
    TEST_ASSERT("hs mode load when sstatus.mxr=0 and pte.r=0 leads to LPF",
    800118e6:	6404                	ld	s1,8(s0)
    800118e8:	14cd                	add	s1,s1,-13
    800118ea:	0014b493          	seqz	s1,s1
    800118ee:	bf01                	j	800117fe <load_page_fault_1+0x17a>
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800118f0:	0000b597          	auipc	a1,0xb
    800118f4:	68058593          	add	a1,a1,1664 # 8001cf70 <__func__.1+0x2c8>
    800118f8:	b795                	j	8001185c <load_page_fault_1+0x1d8>
    TEST_ASSERT("hs mode load when pte.v=0 leads to LPF",
    800118fa:	0000b597          	auipc	a1,0xb
    800118fe:	67658593          	add	a1,a1,1654 # 8001cf70 <__func__.1+0x2c8>
    80011902:	bd39                	j	80011720 <load_page_fault_1+0x9c>
    TEST_ASSERT("hs mode load when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80011904:	0000b597          	auipc	a1,0xb
    80011908:	66c58593          	add	a1,a1,1644 # 8001cf70 <__func__.1+0x2c8>
    8001190c:	bd4d                	j	800117be <load_page_fault_1+0x13a>

000000008001190e <load_page_fault_2>:

bool load_page_fault_2(){
    8001190e:	1101                	add	sp,sp,-32

    TEST_START();
    80011910:	0000b597          	auipc	a1,0xb
    80011914:	92058593          	add	a1,a1,-1760 # 8001c230 <__func__.20>
    80011918:	0000b517          	auipc	a0,0xb
    8001191c:	67850513          	add	a0,a0,1656 # 8001cf90 <__func__.1+0x2e8>
bool load_page_fault_2(){
    80011920:	ec06                	sd	ra,24(sp)
    80011922:	e822                	sd	s0,16(sp)
    80011924:	e426                	sd	s1,8(sp)
    TEST_START();
    80011926:	2c1090ef          	jal	8001b3e6 <printf>
    8001192a:	4529                	li	a0,10
    8001192c:	18d080ef          	jal	8001a2b8 <putchar>


    goto_priv(PRIV_HS);
    80011930:	450d                	li	a0,3
    80011932:	9acef0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80011936:	cabee0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001193a:	eedee0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    8001193e:	4509                	li	a0,2
    80011940:	99eef0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80011944:	d71ee0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_M);
    80011948:	4511                	li	a0,4
    8001194a:	994ef0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    8001194e:	000407b7          	lui	a5,0x40
    80011952:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    80011956:	450d                	li	a0,3
    80011958:	986ef0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    8001195c:	4509                	li	a0,2
    8001195e:	8a4ef0ef          	jal	80000a02 <set_prev_priv>

    //执行hlvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80011962:	0ff0000f          	fence
    80011966:	4785                	li	a5,1
    80011968:	0002b417          	auipc	s0,0x2b
    8001196c:	6a840413          	add	s0,s0,1704 # 8003d010 <excpt>
    80011970:	00f41023          	sh	a5,0(s0)
    80011974:	0002b797          	auipc	a5,0x2b
    80011978:	6c07ba23          	sd	zero,1748(a5) # 8003d048 <excpt+0x38>
    8001197c:	0ff0000f          	fence
    80011980:	000807b7          	lui	a5,0x80
    80011984:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80011986:	07b6                	sll	a5,a5,0xd
    80011988:	6c07c7f3          	.4byte	0x6c07c7f3
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    hlvd(addr);
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    8001198c:	08200593          	li	a1,130
    80011990:	00010617          	auipc	a2,0x10
    80011994:	d4860613          	add	a2,a2,-696 # 800216d8 <__func__.1+0x4a30>
    80011998:	0000b517          	auipc	a0,0xb
    8001199c:	61050513          	add	a0,a0,1552 # 8001cfa8 <__func__.1+0x300>
    800119a0:	247090ef          	jal	8001b3e6 <printf>
    800119a4:	00144783          	lbu	a5,1(s0)
    800119a8:	0000b597          	auipc	a1,0xb
    800119ac:	5d858593          	add	a1,a1,1496 # 8001cf80 <__func__.1+0x2d8>
    800119b0:	c789                	beqz	a5,800119ba <load_page_fault_2+0xac>
    800119b2:	6418                	ld	a4,8(s0)
    800119b4:	47b5                	li	a5,13
    800119b6:	06f70e63          	beq	a4,a5,80011a32 <load_page_fault_2+0x124>
    800119ba:	0000b517          	auipc	a0,0xb
    800119be:	60650513          	add	a0,a0,1542 # 8001cfc0 <__func__.1+0x318>
    800119c2:	225090ef          	jal	8001b3e6 <printf>
    800119c6:	00144783          	lbu	a5,1(s0)
    800119ca:	c789                	beqz	a5,800119d4 <load_page_fault_2+0xc6>
    800119cc:	6418                	ld	a4,8(s0)
    800119ce:	47b5                	li	a5,13
    800119d0:	00f70c63          	beq	a4,a5,800119e8 <load_page_fault_2+0xda>
    800119d4:	0000b517          	auipc	a0,0xb
    800119d8:	5f450513          	add	a0,a0,1524 # 8001cfc8 <__func__.1+0x320>
    800119dc:	20b090ef          	jal	8001b3e6 <printf>
    800119e0:	02900513          	li	a0,41
    800119e4:	0d5080ef          	jal	8001a2b8 <putchar>
    800119e8:	4529                	li	a0,10
    800119ea:	0cf080ef          	jal	8001a2b8 <putchar>
    800119ee:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    800119f2:	0000b597          	auipc	a1,0xb
    800119f6:	58e58593          	add	a1,a1,1422 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    800119fa:	c491                	beqz	s1,80011a06 <load_page_fault_2+0xf8>
    800119fc:	6418                	ld	a4,8(s0)
    800119fe:	47b5                	li	a5,13
    80011a00:	02f70463          	beq	a4,a5,80011a28 <load_page_fault_2+0x11a>
    80011a04:	4481                	li	s1,0
    TEST_END();
    80011a06:	0000b517          	auipc	a0,0xb
    80011a0a:	62250513          	add	a0,a0,1570 # 8001d028 <__func__.1+0x380>
    80011a0e:	1d9090ef          	jal	8001b3e6 <printf>
    80011a12:	4511                	li	a0,4
    80011a14:	8caef0ef          	jal	80000ade <goto_priv>
    80011a18:	90fef0ef          	jal	80001326 <reset_state>
}
    80011a1c:	60e2                	ld	ra,24(sp)
    80011a1e:	6442                	ld	s0,16(sp)
    80011a20:	8526                	mv	a0,s1
    80011a22:	64a2                	ld	s1,8(sp)
    80011a24:	6105                	add	sp,sp,32
    80011a26:	8082                	ret
    TEST_END();
    80011a28:	0000b597          	auipc	a1,0xb
    80011a2c:	54858593          	add	a1,a1,1352 # 8001cf70 <__func__.1+0x2c8>
    80011a30:	bfd9                	j	80011a06 <load_page_fault_2+0xf8>
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    80011a32:	0000b597          	auipc	a1,0xb
    80011a36:	53e58593          	add	a1,a1,1342 # 8001cf70 <__func__.1+0x2c8>
    80011a3a:	b741                	j	800119ba <load_page_fault_2+0xac>

0000000080011a3c <load_page_fault_3>:

bool load_page_fault_3(){
    80011a3c:	1141                	add	sp,sp,-16

    TEST_START();
    80011a3e:	0000b597          	auipc	a1,0xb
    80011a42:	80a58593          	add	a1,a1,-2038 # 8001c248 <__func__.19>
    80011a46:	0000b517          	auipc	a0,0xb
    80011a4a:	54a50513          	add	a0,a0,1354 # 8001cf90 <__func__.1+0x2e8>
bool load_page_fault_3(){
    80011a4e:	e406                	sd	ra,8(sp)
    80011a50:	e022                	sd	s0,0(sp)
    TEST_START();
    80011a52:	195090ef          	jal	8001b3e6 <printf>
    80011a56:	4529                	li	a0,10
    80011a58:	061080ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80011a5c:	450d                	li	a0,3
    80011a5e:	880ef0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80011a62:	b7fee0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80011a66:	dc1ee0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80011a6a:	4509                	li	a0,2
    80011a6c:	872ef0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80011a70:	c45ee0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_M);
    80011a74:	4511                	li	a0,4
    80011a76:	868ef0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80011a7a:	000407b7          	lui	a5,0x40
    80011a7e:	2007a073          	csrs	vsstatus,a5

    //执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_HS);
    80011a82:	450d                	li	a0,3
    80011a84:	85aef0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80011a88:	4509                	li	a0,2
    80011a8a:	f79ee0ef          	jal	80000a02 <set_prev_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    80011a8e:	0ff0000f          	fence
    80011a92:	4785                	li	a5,1
    80011a94:	0002b417          	auipc	s0,0x2b
    80011a98:	57c40413          	add	s0,s0,1404 # 8003d010 <excpt>
    80011a9c:	00f41023          	sh	a5,0(s0)
    80011aa0:	0002b797          	auipc	a5,0x2b
    80011aa4:	5a07b423          	sd	zero,1448(a5) # 8003d048 <excpt+0x38>
    80011aa8:	0ff0000f          	fence
    asm volatile(
    80011aac:	000807b7          	lui	a5,0x80
    80011ab0:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80011ab2:	07b6                	sll	a5,a5,0xd
    80011ab4:	6007c7f3          	.4byte	0x6007c7f3
    hlvb(addr);

    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80011ab8:	08200593          	li	a1,130
    80011abc:	00010617          	auipc	a2,0x10
    80011ac0:	c5c60613          	add	a2,a2,-932 # 80021718 <__func__.1+0x4a70>
    80011ac4:	0000b517          	auipc	a0,0xb
    80011ac8:	4e450513          	add	a0,a0,1252 # 8001cfa8 <__func__.1+0x300>
    80011acc:	11b090ef          	jal	8001b3e6 <printf>
    80011ad0:	00144783          	lbu	a5,1(s0)
    80011ad4:	0000b597          	auipc	a1,0xb
    80011ad8:	49c58593          	add	a1,a1,1180 # 8001cf70 <__func__.1+0x2c8>
    80011adc:	c789                	beqz	a5,80011ae6 <load_page_fault_3+0xaa>
    80011ade:	0000b597          	auipc	a1,0xb
    80011ae2:	4a258593          	add	a1,a1,1186 # 8001cf80 <__func__.1+0x2d8>
    80011ae6:	0000b517          	auipc	a0,0xb
    80011aea:	4da50513          	add	a0,a0,1242 # 8001cfc0 <__func__.1+0x318>
    80011aee:	0f9090ef          	jal	8001b3e6 <printf>
    80011af2:	00144783          	lbu	a5,1(s0)
    80011af6:	e3b1                	bnez	a5,80011b3a <load_page_fault_3+0xfe>
    80011af8:	4529                	li	a0,10
    80011afa:	7be080ef          	jal	8001a2b8 <putchar>
    80011afe:	00144783          	lbu	a5,1(s0)
    80011b02:	e795                	bnez	a5,80011b2e <load_page_fault_3+0xf2>
    80011b04:	4405                	li	s0,1



    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80011b06:	0000b597          	auipc	a1,0xb
    80011b0a:	46a58593          	add	a1,a1,1130 # 8001cf70 <__func__.1+0x2c8>
    80011b0e:	0000b517          	auipc	a0,0xb
    80011b12:	51a50513          	add	a0,a0,1306 # 8001d028 <__func__.1+0x380>
    80011b16:	0d1090ef          	jal	8001b3e6 <printf>
    80011b1a:	4511                	li	a0,4
    80011b1c:	fc3ee0ef          	jal	80000ade <goto_priv>
    80011b20:	807ef0ef          	jal	80001326 <reset_state>
}
    80011b24:	60a2                	ld	ra,8(sp)
    80011b26:	8522                	mv	a0,s0
    80011b28:	6402                	ld	s0,0(sp)
    80011b2a:	0141                	add	sp,sp,16
    80011b2c:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80011b2e:	4401                	li	s0,0
    TEST_END();
    80011b30:	0000b597          	auipc	a1,0xb
    80011b34:	45058593          	add	a1,a1,1104 # 8001cf80 <__func__.1+0x2d8>
    80011b38:	bfd9                	j	80011b0e <load_page_fault_3+0xd2>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80011b3a:	0000b517          	auipc	a0,0xb
    80011b3e:	48e50513          	add	a0,a0,1166 # 8001cfc8 <__func__.1+0x320>
    80011b42:	0a5090ef          	jal	8001b3e6 <printf>
    80011b46:	02900513          	li	a0,41
    80011b4a:	76e080ef          	jal	8001a2b8 <putchar>
    80011b4e:	b76d                	j	80011af8 <load_page_fault_3+0xbc>

0000000080011b50 <load_page_fault_4>:


bool load_page_fault_4(){
    80011b50:	1101                	add	sp,sp,-32

    TEST_START();
    80011b52:	0000a597          	auipc	a1,0xa
    80011b56:	70e58593          	add	a1,a1,1806 # 8001c260 <__func__.18>
    80011b5a:	0000b517          	auipc	a0,0xb
    80011b5e:	43650513          	add	a0,a0,1078 # 8001cf90 <__func__.1+0x2e8>
bool load_page_fault_4(){
    80011b62:	ec06                	sd	ra,24(sp)
    80011b64:	e822                	sd	s0,16(sp)
    80011b66:	e426                	sd	s1,8(sp)
    TEST_START();
    80011b68:	07f090ef          	jal	8001b3e6 <printf>
    80011b6c:	4529                	li	a0,10
    80011b6e:	74a080ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS); 
    80011b72:	450d                	li	a0,3
    80011b74:	f6bee0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80011b78:	a69ee0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80011b7c:	cabee0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80011b80:	4509                	li	a0,2
    80011b82:	f5dee0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80011b86:	b2fee0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80011b8a:	4509                	li	a0,2
    80011b8c:	f53ee0ef          	jal	80000ade <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80011b90:	0ff0000f          	fence
    80011b94:	4785                	li	a5,1
    80011b96:	0002b417          	auipc	s0,0x2b
    80011b9a:	47a40413          	add	s0,s0,1146 # 8003d010 <excpt>
    80011b9e:	00f41023          	sh	a5,0(s0)
    80011ba2:	0002b797          	auipc	a5,0x2b
    80011ba6:	4a07b323          	sd	zero,1190(a5) # 8003d048 <excpt+0x38>
    80011baa:	0ff0000f          	fence
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80011bae:	400197b7          	lui	a5,0x40019
    80011bb2:	078a                	sll	a5,a5,0x2
    80011bb4:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>

    addr = hs_page_base(VSI_GI);
    lb(addr);
    TEST_ASSERT("vs mode lb when pte.v=0 leads to LPF",
    80011bb8:	08200593          	li	a1,130
    80011bbc:	00010617          	auipc	a2,0x10
    80011bc0:	b9460613          	add	a2,a2,-1132 # 80021750 <__func__.1+0x4aa8>
    80011bc4:	0000b517          	auipc	a0,0xb
    80011bc8:	3e450513          	add	a0,a0,996 # 8001cfa8 <__func__.1+0x300>
    80011bcc:	01b090ef          	jal	8001b3e6 <printf>
    80011bd0:	00144783          	lbu	a5,1(s0)
    80011bd4:	0000b597          	auipc	a1,0xb
    80011bd8:	3ac58593          	add	a1,a1,940 # 8001cf80 <__func__.1+0x2d8>
    80011bdc:	c789                	beqz	a5,80011be6 <load_page_fault_4+0x96>
    80011bde:	6418                	ld	a4,8(s0)
    80011be0:	47b5                	li	a5,13
    80011be2:	1cf70f63          	beq	a4,a5,80011dc0 <load_page_fault_4+0x270>
    80011be6:	0000b517          	auipc	a0,0xb
    80011bea:	3da50513          	add	a0,a0,986 # 8001cfc0 <__func__.1+0x318>
    80011bee:	7f8090ef          	jal	8001b3e6 <printf>
    80011bf2:	00144783          	lbu	a5,1(s0)
    80011bf6:	c789                	beqz	a5,80011c00 <load_page_fault_4+0xb0>
    80011bf8:	6418                	ld	a4,8(s0)
    80011bfa:	47b5                	li	a5,13
    80011bfc:	00f70c63          	beq	a4,a5,80011c14 <load_page_fault_4+0xc4>
    80011c00:	0000b517          	auipc	a0,0xb
    80011c04:	3c850513          	add	a0,a0,968 # 8001cfc8 <__func__.1+0x320>
    80011c08:	7de090ef          	jal	8001b3e6 <printf>
    80011c0c:	02900513          	li	a0,41
    80011c10:	6a8080ef          	jal	8001a2b8 <putchar>
    80011c14:	4529                	li	a0,10
    80011c16:	6a2080ef          	jal	8001a2b8 <putchar>
    80011c1a:	00144783          	lbu	a5,1(s0)
    80011c1e:	4481                	li	s1,0
    80011c20:	c789                	beqz	a5,80011c2a <load_page_fault_4+0xda>
    80011c22:	6404                	ld	s1,8(s0)
    80011c24:	14cd                	add	s1,s1,-13
    80011c26:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_LPF
    );


    //执行ld令时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    TEST_SETUP_EXCEPT();
    80011c2a:	0ff0000f          	fence
    80011c2e:	4785                	li	a5,1
    80011c30:	00f41023          	sh	a5,0(s0)
    80011c34:	0002b797          	auipc	a5,0x2b
    80011c38:	4007ba23          	sd	zero,1044(a5) # 8003d048 <excpt+0x38>
    80011c3c:	0ff0000f          	fence
    addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80011c40:	000807b7          	lui	a5,0x80
    80011c44:	1007b073          	csrc	sstatus,a5
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    80011c48:	001007b7          	lui	a5,0x100
    80011c4c:	05f78793          	add	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    80011c50:	07b2                	sll	a5,a5,0xc
    80011c52:	0007b783          	ld	a5,0(a5)
    ld(addr);   
    TEST_ASSERT("vs mode ld when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80011c56:	08200593          	li	a1,130
    80011c5a:	00010617          	auipc	a2,0x10
    80011c5e:	b1e60613          	add	a2,a2,-1250 # 80021778 <__func__.1+0x4ad0>
    80011c62:	0000b517          	auipc	a0,0xb
    80011c66:	34650513          	add	a0,a0,838 # 8001cfa8 <__func__.1+0x300>
    80011c6a:	77c090ef          	jal	8001b3e6 <printf>
    80011c6e:	00144783          	lbu	a5,1(s0)
    80011c72:	0000b597          	auipc	a1,0xb
    80011c76:	30e58593          	add	a1,a1,782 # 8001cf80 <__func__.1+0x2d8>
    80011c7a:	c789                	beqz	a5,80011c84 <load_page_fault_4+0x134>
    80011c7c:	6418                	ld	a4,8(s0)
    80011c7e:	47b5                	li	a5,13
    80011c80:	14f70563          	beq	a4,a5,80011dca <load_page_fault_4+0x27a>
    80011c84:	0000b517          	auipc	a0,0xb
    80011c88:	33c50513          	add	a0,a0,828 # 8001cfc0 <__func__.1+0x318>
    80011c8c:	75a090ef          	jal	8001b3e6 <printf>
    80011c90:	00144783          	lbu	a5,1(s0)
    80011c94:	c789                	beqz	a5,80011c9e <load_page_fault_4+0x14e>
    80011c96:	6418                	ld	a4,8(s0)
    80011c98:	47b5                	li	a5,13
    80011c9a:	00f70c63          	beq	a4,a5,80011cb2 <load_page_fault_4+0x162>
    80011c9e:	0000b517          	auipc	a0,0xb
    80011ca2:	32a50513          	add	a0,a0,810 # 8001cfc8 <__func__.1+0x320>
    80011ca6:	740090ef          	jal	8001b3e6 <printf>
    80011caa:	02900513          	li	a0,41
    80011cae:	60a080ef          	jal	8001a2b8 <putchar>
    80011cb2:	4529                	li	a0,10
    80011cb4:	604080ef          	jal	8001a2b8 <putchar>
    80011cb8:	c491                	beqz	s1,80011cc4 <load_page_fault_4+0x174>
    80011cba:	00144783          	lbu	a5,1(s0)
    80011cbe:	4481                	li	s1,0
    80011cc0:	0e079663          	bnez	a5,80011dac <load_page_fault_4+0x25c>
        excpt.cause == CAUSE_LPF
    );

    //执行lh指令时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    goto_priv(PRIV_VS);
    80011cc4:	4509                	li	a0,2
    80011cc6:	e19ee0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();
    80011cca:	0ff0000f          	fence
    80011cce:	4785                	li	a5,1
    80011cd0:	00f41023          	sh	a5,0(s0)
    80011cd4:	0002b797          	auipc	a5,0x2b
    80011cd8:	3607ba23          	sd	zero,884(a5) # 8003d048 <excpt+0x38>
    80011cdc:	0ff0000f          	fence
    addr = hs_page_base(VSV_GV);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80011ce0:	000807b7          	lui	a5,0x80
    80011ce4:	1007a073          	csrs	sstatus,a5
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    80011ce8:	001007b7          	lui	a5,0x100
    80011cec:	07f5                	add	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    80011cee:	07b2                	sll	a5,a5,0xc
    80011cf0:	00079783          	lh	a5,0(a5)
    lh(addr);
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80011cf4:	08200593          	li	a1,130
    80011cf8:	00010617          	auipc	a2,0x10
    80011cfc:	ab860613          	add	a2,a2,-1352 # 800217b0 <__func__.1+0x4b08>
    80011d00:	0000b517          	auipc	a0,0xb
    80011d04:	2a850513          	add	a0,a0,680 # 8001cfa8 <__func__.1+0x300>
    80011d08:	6de090ef          	jal	8001b3e6 <printf>
    80011d0c:	00144783          	lbu	a5,1(s0)
    80011d10:	0000b597          	auipc	a1,0xb
    80011d14:	27058593          	add	a1,a1,624 # 8001cf80 <__func__.1+0x2d8>
    80011d18:	c789                	beqz	a5,80011d22 <load_page_fault_4+0x1d2>
    80011d1a:	6418                	ld	a4,8(s0)
    80011d1c:	47b5                	li	a5,13
    80011d1e:	08f70c63          	beq	a4,a5,80011db6 <load_page_fault_4+0x266>
    80011d22:	0000b517          	auipc	a0,0xb
    80011d26:	29e50513          	add	a0,a0,670 # 8001cfc0 <__func__.1+0x318>
    80011d2a:	6bc090ef          	jal	8001b3e6 <printf>
    80011d2e:	00144783          	lbu	a5,1(s0)
    80011d32:	c789                	beqz	a5,80011d3c <load_page_fault_4+0x1ec>
    80011d34:	6418                	ld	a4,8(s0)
    80011d36:	47b5                	li	a5,13
    80011d38:	00f70c63          	beq	a4,a5,80011d50 <load_page_fault_4+0x200>
    80011d3c:	0000b517          	auipc	a0,0xb
    80011d40:	28c50513          	add	a0,a0,652 # 8001cfc8 <__func__.1+0x320>
    80011d44:	6a2090ef          	jal	8001b3e6 <printf>
    80011d48:	02900513          	li	a0,41
    80011d4c:	56c080ef          	jal	8001a2b8 <putchar>
    80011d50:	4529                	li	a0,10
    80011d52:	566080ef          	jal	8001a2b8 <putchar>
    80011d56:	c481                	beqz	s1,80011d5e <load_page_fault_4+0x20e>
    80011d58:	00144483          	lbu	s1,1(s0)
    80011d5c:	e89d                	bnez	s1,80011d92 <load_page_fault_4+0x242>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80011d5e:	000807b7          	lui	a5,0x80
    80011d62:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80011d66:	4481                	li	s1,0

    TEST_END();
    80011d68:	0000b597          	auipc	a1,0xb
    80011d6c:	21858593          	add	a1,a1,536 # 8001cf80 <__func__.1+0x2d8>
    80011d70:	0000b517          	auipc	a0,0xb
    80011d74:	2b850513          	add	a0,a0,696 # 8001d028 <__func__.1+0x380>
    80011d78:	66e090ef          	jal	8001b3e6 <printf>
    80011d7c:	4511                	li	a0,4
    80011d7e:	d61ee0ef          	jal	80000ade <goto_priv>
    80011d82:	da4ef0ef          	jal	80001326 <reset_state>

}
    80011d86:	60e2                	ld	ra,24(sp)
    80011d88:	6442                	ld	s0,16(sp)
    80011d8a:	8526                	mv	a0,s1
    80011d8c:	64a2                	ld	s1,8(sp)
    80011d8e:	6105                	add	sp,sp,32
    80011d90:	8082                	ret
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80011d92:	6418                	ld	a4,8(s0)
    80011d94:	47b5                	li	a5,13
    80011d96:	fcf714e3          	bne	a4,a5,80011d5e <load_page_fault_4+0x20e>
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80011d9a:	000807b7          	lui	a5,0x80
    80011d9e:	1007b073          	csrc	sstatus,a5
    TEST_END();
    80011da2:	0000b597          	auipc	a1,0xb
    80011da6:	1ce58593          	add	a1,a1,462 # 8001cf70 <__func__.1+0x2c8>
    80011daa:	b7d9                	j	80011d70 <load_page_fault_4+0x220>
    TEST_ASSERT("vs mode ld when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80011dac:	6404                	ld	s1,8(s0)
    80011dae:	14cd                	add	s1,s1,-13
    80011db0:	0014b493          	seqz	s1,s1
    80011db4:	bf01                	j	80011cc4 <load_page_fault_4+0x174>
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80011db6:	0000b597          	auipc	a1,0xb
    80011dba:	1ba58593          	add	a1,a1,442 # 8001cf70 <__func__.1+0x2c8>
    80011dbe:	b795                	j	80011d22 <load_page_fault_4+0x1d2>
    TEST_ASSERT("vs mode lb when pte.v=0 leads to LPF",
    80011dc0:	0000b597          	auipc	a1,0xb
    80011dc4:	1b058593          	add	a1,a1,432 # 8001cf70 <__func__.1+0x2c8>
    80011dc8:	bd39                	j	80011be6 <load_page_fault_4+0x96>
    TEST_ASSERT("vs mode ld when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80011dca:	0000b597          	auipc	a1,0xb
    80011dce:	1a658593          	add	a1,a1,422 # 8001cf70 <__func__.1+0x2c8>
    80011dd2:	bd4d                	j	80011c84 <load_page_fault_4+0x134>

0000000080011dd4 <load_page_fault_5>:

bool load_page_fault_5(){
    80011dd4:	1101                	add	sp,sp,-32

    TEST_START();
    80011dd6:	0000a597          	auipc	a1,0xa
    80011dda:	4a258593          	add	a1,a1,1186 # 8001c278 <__func__.17>
    80011dde:	0000b517          	auipc	a0,0xb
    80011de2:	1b250513          	add	a0,a0,434 # 8001cf90 <__func__.1+0x2e8>
bool load_page_fault_5(){
    80011de6:	ec06                	sd	ra,24(sp)
    80011de8:	e822                	sd	s0,16(sp)
    80011dea:	e426                	sd	s1,8(sp)
    TEST_START();
    80011dec:	5fa090ef          	jal	8001b3e6 <printf>
    80011df0:	4529                	li	a0,10
    80011df2:	4c6080ef          	jal	8001a2b8 <putchar>


    goto_priv(PRIV_HS);
    80011df6:	450d                	li	a0,3
    80011df8:	ce7ee0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80011dfc:	fe4ee0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80011e00:	a27ee0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80011e04:	4509                	li	a0,2
    80011e06:	cd9ee0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80011e0a:	8abee0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_M);
    80011e0e:	4511                	li	a0,4
    80011e10:	ccfee0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80011e14:	000407b7          	lui	a5,0x40
    80011e18:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80011e1c:	4509                	li	a0,2
    80011e1e:	cc1ee0ef          	jal	80000ade <goto_priv>

    //执行lbu指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80011e22:	0ff0000f          	fence
    80011e26:	4785                	li	a5,1
    80011e28:	0002b417          	auipc	s0,0x2b
    80011e2c:	1e840413          	add	s0,s0,488 # 8003d010 <excpt>
    80011e30:	00f41023          	sh	a5,0(s0)
    80011e34:	0002b797          	auipc	a5,0x2b
    80011e38:	2007ba23          	sd	zero,532(a5) # 8003d048 <excpt+0x38>
    80011e3c:	0ff0000f          	fence
LOAD_INSTRUCTION(lbu, "lbu", uint8_t);
    80011e40:	000807b7          	lui	a5,0x80
    80011e44:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80011e46:	07b6                	sll	a5,a5,0xd
    80011e48:	0007c783          	lbu	a5,0(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    lbu(addr);
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    80011e4c:	08200593          	li	a1,130
    80011e50:	00010617          	auipc	a2,0x10
    80011e54:	9a860613          	add	a2,a2,-1624 # 800217f8 <__func__.1+0x4b50>
    80011e58:	0000b517          	auipc	a0,0xb
    80011e5c:	15050513          	add	a0,a0,336 # 8001cfa8 <__func__.1+0x300>
    80011e60:	586090ef          	jal	8001b3e6 <printf>
    80011e64:	00144783          	lbu	a5,1(s0)
    80011e68:	0000b597          	auipc	a1,0xb
    80011e6c:	11858593          	add	a1,a1,280 # 8001cf80 <__func__.1+0x2d8>
    80011e70:	c789                	beqz	a5,80011e7a <load_page_fault_5+0xa6>
    80011e72:	6418                	ld	a4,8(s0)
    80011e74:	47b5                	li	a5,13
    80011e76:	06f70e63          	beq	a4,a5,80011ef2 <load_page_fault_5+0x11e>
    80011e7a:	0000b517          	auipc	a0,0xb
    80011e7e:	14650513          	add	a0,a0,326 # 8001cfc0 <__func__.1+0x318>
    80011e82:	564090ef          	jal	8001b3e6 <printf>
    80011e86:	00144783          	lbu	a5,1(s0)
    80011e8a:	c789                	beqz	a5,80011e94 <load_page_fault_5+0xc0>
    80011e8c:	6418                	ld	a4,8(s0)
    80011e8e:	47b5                	li	a5,13
    80011e90:	00f70c63          	beq	a4,a5,80011ea8 <load_page_fault_5+0xd4>
    80011e94:	0000b517          	auipc	a0,0xb
    80011e98:	13450513          	add	a0,a0,308 # 8001cfc8 <__func__.1+0x320>
    80011e9c:	54a090ef          	jal	8001b3e6 <printf>
    80011ea0:	02900513          	li	a0,41
    80011ea4:	414080ef          	jal	8001a2b8 <putchar>
    80011ea8:	4529                	li	a0,10
    80011eaa:	40e080ef          	jal	8001a2b8 <putchar>
    80011eae:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80011eb2:	0000b597          	auipc	a1,0xb
    80011eb6:	0ce58593          	add	a1,a1,206 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    80011eba:	c491                	beqz	s1,80011ec6 <load_page_fault_5+0xf2>
    80011ebc:	6418                	ld	a4,8(s0)
    80011ebe:	47b5                	li	a5,13
    80011ec0:	02f70463          	beq	a4,a5,80011ee8 <load_page_fault_5+0x114>
    80011ec4:	4481                	li	s1,0
    TEST_END();
    80011ec6:	0000b517          	auipc	a0,0xb
    80011eca:	16250513          	add	a0,a0,354 # 8001d028 <__func__.1+0x380>
    80011ece:	518090ef          	jal	8001b3e6 <printf>
    80011ed2:	4511                	li	a0,4
    80011ed4:	c0bee0ef          	jal	80000ade <goto_priv>
    80011ed8:	c4eef0ef          	jal	80001326 <reset_state>
}
    80011edc:	60e2                	ld	ra,24(sp)
    80011ede:	6442                	ld	s0,16(sp)
    80011ee0:	8526                	mv	a0,s1
    80011ee2:	64a2                	ld	s1,8(sp)
    80011ee4:	6105                	add	sp,sp,32
    80011ee6:	8082                	ret
    TEST_END();
    80011ee8:	0000b597          	auipc	a1,0xb
    80011eec:	08858593          	add	a1,a1,136 # 8001cf70 <__func__.1+0x2c8>
    80011ef0:	bfd9                	j	80011ec6 <load_page_fault_5+0xf2>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    80011ef2:	0000b597          	auipc	a1,0xb
    80011ef6:	07e58593          	add	a1,a1,126 # 8001cf70 <__func__.1+0x2c8>
    80011efa:	b741                	j	80011e7a <load_page_fault_5+0xa6>

0000000080011efc <load_page_fault_6>:

bool load_page_fault_6(){
    80011efc:	1141                	add	sp,sp,-16

    TEST_START();
    80011efe:	0000a597          	auipc	a1,0xa
    80011f02:	39258593          	add	a1,a1,914 # 8001c290 <__func__.16>
    80011f06:	0000b517          	auipc	a0,0xb
    80011f0a:	08a50513          	add	a0,a0,138 # 8001cf90 <__func__.1+0x2e8>
bool load_page_fault_6(){
    80011f0e:	e406                	sd	ra,8(sp)
    80011f10:	e022                	sd	s0,0(sp)
    TEST_START();
    80011f12:	4d4090ef          	jal	8001b3e6 <printf>
    80011f16:	4529                	li	a0,10
    80011f18:	3a0080ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80011f1c:	450d                	li	a0,3
    80011f1e:	bc1ee0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80011f22:	ebeee0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80011f26:	901ee0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80011f2a:	4509                	li	a0,2
    80011f2c:	bb3ee0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80011f30:	f84ee0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_M);
    80011f34:	4511                	li	a0,4
    80011f36:	ba9ee0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80011f3a:	000407b7          	lui	a5,0x40
    80011f3e:	2007a073          	csrs	vsstatus,a5

    //执行lbu指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_VS);
    80011f42:	4509                	li	a0,2
    80011f44:	b9bee0ef          	jal	80000ade <goto_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    80011f48:	0ff0000f          	fence
    80011f4c:	4785                	li	a5,1
    80011f4e:	0002b417          	auipc	s0,0x2b
    80011f52:	0c240413          	add	s0,s0,194 # 8003d010 <excpt>
    80011f56:	00f41023          	sh	a5,0(s0)
    80011f5a:	0002b797          	auipc	a5,0x2b
    80011f5e:	0e07b723          	sd	zero,238(a5) # 8003d048 <excpt+0x38>
    80011f62:	0ff0000f          	fence
    80011f66:	000807b7          	lui	a5,0x80
    80011f6a:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80011f6c:	07b6                	sll	a5,a5,0xd
    80011f6e:	0007c783          	lbu	a5,0(a5)
    lbu(addr);

    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    80011f72:	08200593          	li	a1,130
    80011f76:	00010617          	auipc	a2,0x10
    80011f7a:	8c260613          	add	a2,a2,-1854 # 80021838 <__func__.1+0x4b90>
    80011f7e:	0000b517          	auipc	a0,0xb
    80011f82:	02a50513          	add	a0,a0,42 # 8001cfa8 <__func__.1+0x300>
    80011f86:	460090ef          	jal	8001b3e6 <printf>
    80011f8a:	00144783          	lbu	a5,1(s0)
    80011f8e:	0000b597          	auipc	a1,0xb
    80011f92:	fe258593          	add	a1,a1,-30 # 8001cf70 <__func__.1+0x2c8>
    80011f96:	c789                	beqz	a5,80011fa0 <load_page_fault_6+0xa4>
    80011f98:	0000b597          	auipc	a1,0xb
    80011f9c:	fe858593          	add	a1,a1,-24 # 8001cf80 <__func__.1+0x2d8>
    80011fa0:	0000b517          	auipc	a0,0xb
    80011fa4:	02050513          	add	a0,a0,32 # 8001cfc0 <__func__.1+0x318>
    80011fa8:	43e090ef          	jal	8001b3e6 <printf>
    80011fac:	00144783          	lbu	a5,1(s0)
    80011fb0:	e3b1                	bnez	a5,80011ff4 <load_page_fault_6+0xf8>
    80011fb2:	4529                	li	a0,10
    80011fb4:	304080ef          	jal	8001a2b8 <putchar>
    80011fb8:	00144783          	lbu	a5,1(s0)
    80011fbc:	e795                	bnez	a5,80011fe8 <load_page_fault_6+0xec>
    80011fbe:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    80011fc0:	0000b597          	auipc	a1,0xb
    80011fc4:	fb058593          	add	a1,a1,-80 # 8001cf70 <__func__.1+0x2c8>
    80011fc8:	0000b517          	auipc	a0,0xb
    80011fcc:	06050513          	add	a0,a0,96 # 8001d028 <__func__.1+0x380>
    80011fd0:	416090ef          	jal	8001b3e6 <printf>
    80011fd4:	4511                	li	a0,4
    80011fd6:	b09ee0ef          	jal	80000ade <goto_priv>
    80011fda:	b4cef0ef          	jal	80001326 <reset_state>
}
    80011fde:	60a2                	ld	ra,8(sp)
    80011fe0:	8522                	mv	a0,s0
    80011fe2:	6402                	ld	s0,0(sp)
    80011fe4:	0141                	add	sp,sp,16
    80011fe6:	8082                	ret
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    80011fe8:	4401                	li	s0,0
    TEST_END();
    80011fea:	0000b597          	auipc	a1,0xb
    80011fee:	f9658593          	add	a1,a1,-106 # 8001cf80 <__func__.1+0x2d8>
    80011ff2:	bfd9                	j	80011fc8 <load_page_fault_6+0xcc>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    80011ff4:	0000b517          	auipc	a0,0xb
    80011ff8:	fd450513          	add	a0,a0,-44 # 8001cfc8 <__func__.1+0x320>
    80011ffc:	3ea090ef          	jal	8001b3e6 <printf>
    80012000:	02900513          	li	a0,41
    80012004:	2b4080ef          	jal	8001a2b8 <putchar>
    80012008:	b76d                	j	80011fb2 <load_page_fault_6+0xb6>

000000008001200a <load_page_fault_7>:


bool load_page_fault_7(){
    8001200a:	1101                	add	sp,sp,-32

    TEST_START();
    8001200c:	0000a597          	auipc	a1,0xa
    80012010:	29c58593          	add	a1,a1,668 # 8001c2a8 <__func__.15>
    80012014:	0000b517          	auipc	a0,0xb
    80012018:	f7c50513          	add	a0,a0,-132 # 8001cf90 <__func__.1+0x2e8>
bool load_page_fault_7(){
    8001201c:	ec06                	sd	ra,24(sp)
    8001201e:	e822                	sd	s0,16(sp)
    80012020:	e426                	sd	s1,8(sp)
    TEST_START();
    80012022:	3c4090ef          	jal	8001b3e6 <printf>
    80012026:	4529                	li	a0,10
    80012028:	290080ef          	jal	8001a2b8 <putchar>


    goto_priv(PRIV_HS);
    8001202c:	450d                	li	a0,3
    8001202e:	ab1ee0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80012032:	daeee0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80012036:	ff0ee0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    8001203a:	4509                	li	a0,2
    8001203c:	aa3ee0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80012040:	e74ee0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_M);
    80012044:	4511                	li	a0,4
    80012046:	a99ee0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    8001204a:	000407b7          	lui	a5,0x40
    8001204e:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    80012052:	450d                	li	a0,3
    80012054:	a8bee0ef          	jal	80000ade <goto_priv>

    //执行hlvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80012058:	0ff0000f          	fence
    8001205c:	4785                	li	a5,1
    8001205e:	0002b417          	auipc	s0,0x2b
    80012062:	fb240413          	add	s0,s0,-78 # 8003d010 <excpt>
    80012066:	00f41023          	sh	a5,0(s0)
    8001206a:	0002b797          	auipc	a5,0x2b
    8001206e:	fc07bf23          	sd	zero,-34(a5) # 8003d048 <excpt+0x38>
    80012072:	0ff0000f          	fence
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    80012076:	000807b7          	lui	a5,0x80
    8001207a:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001207c:	07b6                	sll	a5,a5,0xd
    8001207e:	0007b783          	ld	a5,0(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    ld(addr);
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    80012082:	08200593          	li	a1,130
    80012086:	0000f617          	auipc	a2,0xf
    8001208a:	7ea60613          	add	a2,a2,2026 # 80021870 <__func__.1+0x4bc8>
    8001208e:	0000b517          	auipc	a0,0xb
    80012092:	f1a50513          	add	a0,a0,-230 # 8001cfa8 <__func__.1+0x300>
    80012096:	350090ef          	jal	8001b3e6 <printf>
    8001209a:	00144783          	lbu	a5,1(s0)
    8001209e:	0000b597          	auipc	a1,0xb
    800120a2:	ee258593          	add	a1,a1,-286 # 8001cf80 <__func__.1+0x2d8>
    800120a6:	c789                	beqz	a5,800120b0 <load_page_fault_7+0xa6>
    800120a8:	6418                	ld	a4,8(s0)
    800120aa:	47b5                	li	a5,13
    800120ac:	06f70e63          	beq	a4,a5,80012128 <load_page_fault_7+0x11e>
    800120b0:	0000b517          	auipc	a0,0xb
    800120b4:	f1050513          	add	a0,a0,-240 # 8001cfc0 <__func__.1+0x318>
    800120b8:	32e090ef          	jal	8001b3e6 <printf>
    800120bc:	00144783          	lbu	a5,1(s0)
    800120c0:	c789                	beqz	a5,800120ca <load_page_fault_7+0xc0>
    800120c2:	6418                	ld	a4,8(s0)
    800120c4:	47b5                	li	a5,13
    800120c6:	00f70c63          	beq	a4,a5,800120de <load_page_fault_7+0xd4>
    800120ca:	0000b517          	auipc	a0,0xb
    800120ce:	efe50513          	add	a0,a0,-258 # 8001cfc8 <__func__.1+0x320>
    800120d2:	314090ef          	jal	8001b3e6 <printf>
    800120d6:	02900513          	li	a0,41
    800120da:	1de080ef          	jal	8001a2b8 <putchar>
    800120de:	4529                	li	a0,10
    800120e0:	1d8080ef          	jal	8001a2b8 <putchar>
    800120e4:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    800120e8:	0000b597          	auipc	a1,0xb
    800120ec:	e9858593          	add	a1,a1,-360 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    800120f0:	c491                	beqz	s1,800120fc <load_page_fault_7+0xf2>
    800120f2:	6418                	ld	a4,8(s0)
    800120f4:	47b5                	li	a5,13
    800120f6:	02f70463          	beq	a4,a5,8001211e <load_page_fault_7+0x114>
    800120fa:	4481                	li	s1,0
    TEST_END();
    800120fc:	0000b517          	auipc	a0,0xb
    80012100:	f2c50513          	add	a0,a0,-212 # 8001d028 <__func__.1+0x380>
    80012104:	2e2090ef          	jal	8001b3e6 <printf>
    80012108:	4511                	li	a0,4
    8001210a:	9d5ee0ef          	jal	80000ade <goto_priv>
    8001210e:	a18ef0ef          	jal	80001326 <reset_state>
}
    80012112:	60e2                	ld	ra,24(sp)
    80012114:	6442                	ld	s0,16(sp)
    80012116:	8526                	mv	a0,s1
    80012118:	64a2                	ld	s1,8(sp)
    8001211a:	6105                	add	sp,sp,32
    8001211c:	8082                	ret
    TEST_END();
    8001211e:	0000b597          	auipc	a1,0xb
    80012122:	e5258593          	add	a1,a1,-430 # 8001cf70 <__func__.1+0x2c8>
    80012126:	bfd9                	j	800120fc <load_page_fault_7+0xf2>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    80012128:	0000b597          	auipc	a1,0xb
    8001212c:	e4858593          	add	a1,a1,-440 # 8001cf70 <__func__.1+0x2c8>
    80012130:	b741                	j	800120b0 <load_page_fault_7+0xa6>

0000000080012132 <load_page_fault_8>:

bool load_page_fault_8(){
    80012132:	1141                	add	sp,sp,-16

    TEST_START();
    80012134:	0000a597          	auipc	a1,0xa
    80012138:	18c58593          	add	a1,a1,396 # 8001c2c0 <__func__.14>
    8001213c:	0000b517          	auipc	a0,0xb
    80012140:	e5450513          	add	a0,a0,-428 # 8001cf90 <__func__.1+0x2e8>
bool load_page_fault_8(){
    80012144:	e406                	sd	ra,8(sp)
    80012146:	e022                	sd	s0,0(sp)
    TEST_START();
    80012148:	29e090ef          	jal	8001b3e6 <printf>
    8001214c:	4529                	li	a0,10
    8001214e:	16a080ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80012152:	450d                	li	a0,3
    80012154:	98bee0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80012158:	c88ee0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001215c:	ecaee0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80012160:	4509                	li	a0,2
    80012162:	97dee0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80012166:	d4eee0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_M);
    8001216a:	4511                	li	a0,4
    8001216c:	973ee0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    80012170:	000407b7          	lui	a5,0x40
    80012174:	3007a073          	csrs	mstatus,a5

    //执行ld指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_HS);
    80012178:	450d                	li	a0,3
    8001217a:	965ee0ef          	jal	80000ade <goto_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    8001217e:	0ff0000f          	fence
    80012182:	4785                	li	a5,1
    80012184:	0002b417          	auipc	s0,0x2b
    80012188:	e8c40413          	add	s0,s0,-372 # 8003d010 <excpt>
    8001218c:	00f41023          	sh	a5,0(s0)
    80012190:	0002b797          	auipc	a5,0x2b
    80012194:	ea07bc23          	sd	zero,-328(a5) # 8003d048 <excpt+0x38>
    80012198:	0ff0000f          	fence
    8001219c:	000807b7          	lui	a5,0x80
    800121a0:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800121a2:	07b6                	sll	a5,a5,0xd
    800121a4:	0007b783          	ld	a5,0(a5)
    ld(addr);

    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    800121a8:	08200593          	li	a1,130
    800121ac:	0000f617          	auipc	a2,0xf
    800121b0:	6fc60613          	add	a2,a2,1788 # 800218a8 <__func__.1+0x4c00>
    800121b4:	0000b517          	auipc	a0,0xb
    800121b8:	df450513          	add	a0,a0,-524 # 8001cfa8 <__func__.1+0x300>
    800121bc:	22a090ef          	jal	8001b3e6 <printf>
    800121c0:	00144783          	lbu	a5,1(s0)
    800121c4:	0000b597          	auipc	a1,0xb
    800121c8:	dac58593          	add	a1,a1,-596 # 8001cf70 <__func__.1+0x2c8>
    800121cc:	c789                	beqz	a5,800121d6 <load_page_fault_8+0xa4>
    800121ce:	0000b597          	auipc	a1,0xb
    800121d2:	db258593          	add	a1,a1,-590 # 8001cf80 <__func__.1+0x2d8>
    800121d6:	0000b517          	auipc	a0,0xb
    800121da:	dea50513          	add	a0,a0,-534 # 8001cfc0 <__func__.1+0x318>
    800121de:	208090ef          	jal	8001b3e6 <printf>
    800121e2:	00144783          	lbu	a5,1(s0)
    800121e6:	e3b1                	bnez	a5,8001222a <load_page_fault_8+0xf8>
    800121e8:	4529                	li	a0,10
    800121ea:	0ce080ef          	jal	8001a2b8 <putchar>
    800121ee:	00144783          	lbu	a5,1(s0)
    800121f2:	e795                	bnez	a5,8001221e <load_page_fault_8+0xec>
    800121f4:	4405                	li	s0,1



    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    800121f6:	0000b597          	auipc	a1,0xb
    800121fa:	d7a58593          	add	a1,a1,-646 # 8001cf70 <__func__.1+0x2c8>
    800121fe:	0000b517          	auipc	a0,0xb
    80012202:	e2a50513          	add	a0,a0,-470 # 8001d028 <__func__.1+0x380>
    80012206:	1e0090ef          	jal	8001b3e6 <printf>
    8001220a:	4511                	li	a0,4
    8001220c:	8d3ee0ef          	jal	80000ade <goto_priv>
    80012210:	916ef0ef          	jal	80001326 <reset_state>
}
    80012214:	60a2                	ld	ra,8(sp)
    80012216:	8522                	mv	a0,s0
    80012218:	6402                	ld	s0,0(sp)
    8001221a:	0141                	add	sp,sp,16
    8001221c:	8082                	ret
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    8001221e:	4401                	li	s0,0
    TEST_END();
    80012220:	0000b597          	auipc	a1,0xb
    80012224:	d6058593          	add	a1,a1,-672 # 8001cf80 <__func__.1+0x2d8>
    80012228:	bfd9                	j	800121fe <load_page_fault_8+0xcc>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    8001222a:	0000b517          	auipc	a0,0xb
    8001222e:	d9e50513          	add	a0,a0,-610 # 8001cfc8 <__func__.1+0x320>
    80012232:	1b4090ef          	jal	8001b3e6 <printf>
    80012236:	02900513          	li	a0,41
    8001223a:	07e080ef          	jal	8001a2b8 <putchar>
    8001223e:	b76d                	j	800121e8 <load_page_fault_8+0xb6>

0000000080012240 <store_page_fault_1>:





bool store_page_fault_1(){
    80012240:	1101                	add	sp,sp,-32

    TEST_START();
    80012242:	0000a597          	auipc	a1,0xa
    80012246:	09658593          	add	a1,a1,150 # 8001c2d8 <__func__.13>
    8001224a:	0000b517          	auipc	a0,0xb
    8001224e:	d4650513          	add	a0,a0,-698 # 8001cf90 <__func__.1+0x2e8>
bool store_page_fault_1(){
    80012252:	ec06                	sd	ra,24(sp)
    80012254:	e822                	sd	s0,16(sp)
    80012256:	e426                	sd	s1,8(sp)
    TEST_START();
    80012258:	18e090ef          	jal	8001b3e6 <printf>
    8001225c:	4529                	li	a0,10
    8001225e:	05a080ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80012262:	450d                	li	a0,3
    80012264:	87bee0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80012268:	b78ee0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001226c:	dbaee0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80012270:	4509                	li	a0,2
    80012272:	86dee0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80012276:	c3eee0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    8001227a:	450d                	li	a0,3
    8001227c:	863ee0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80012280:	4509                	li	a0,2
    80012282:	f80ee0ef          	jal	80000a02 <set_prev_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80012286:	0ff0000f          	fence
    8001228a:	4785                	li	a5,1
    8001228c:	0002b417          	auipc	s0,0x2b
    80012290:	d8440413          	add	s0,s0,-636 # 8003d010 <excpt>
    80012294:	00f41023          	sh	a5,0(s0)
    80012298:	0002b797          	auipc	a5,0x2b
    8001229c:	da07b823          	sd	zero,-592(a5) # 8003d048 <excpt+0x38>
    800122a0:	0ff0000f          	fence
    asm volatile(
    800122a4:	37ab77b7          	lui	a5,0x37ab7
    800122a8:	078a                	sll	a5,a5,0x2
    800122aa:	40019737          	lui	a4,0x40019
    800122ae:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800122b2:	070a                	sll	a4,a4,0x2
    800122b4:	6ef74073          	.4byte	0x6ef74073

    addr = hs_page_base(VSI_GI);
    hsvd(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when pte.v=0 leads to LPF",
    800122b8:	08200593          	li	a1,130
    800122bc:	0000f617          	auipc	a2,0xf
    800122c0:	62460613          	add	a2,a2,1572 # 800218e0 <__func__.1+0x4c38>
    800122c4:	0000b517          	auipc	a0,0xb
    800122c8:	ce450513          	add	a0,a0,-796 # 8001cfa8 <__func__.1+0x300>
    800122cc:	11a090ef          	jal	8001b3e6 <printf>
    800122d0:	00144783          	lbu	a5,1(s0)
    800122d4:	0000b597          	auipc	a1,0xb
    800122d8:	cac58593          	add	a1,a1,-852 # 8001cf80 <__func__.1+0x2d8>
    800122dc:	c789                	beqz	a5,800122e6 <store_page_fault_1+0xa6>
    800122de:	6418                	ld	a4,8(s0)
    800122e0:	47bd                	li	a5,15
    800122e2:	1ef70663          	beq	a4,a5,800124ce <store_page_fault_1+0x28e>
    800122e6:	0000b517          	auipc	a0,0xb
    800122ea:	cda50513          	add	a0,a0,-806 # 8001cfc0 <__func__.1+0x318>
    800122ee:	0f8090ef          	jal	8001b3e6 <printf>
    800122f2:	00144783          	lbu	a5,1(s0)
    800122f6:	c789                	beqz	a5,80012300 <store_page_fault_1+0xc0>
    800122f8:	6418                	ld	a4,8(s0)
    800122fa:	47bd                	li	a5,15
    800122fc:	00f70c63          	beq	a4,a5,80012314 <store_page_fault_1+0xd4>
    80012300:	0000b517          	auipc	a0,0xb
    80012304:	cc850513          	add	a0,a0,-824 # 8001cfc8 <__func__.1+0x320>
    80012308:	0de090ef          	jal	8001b3e6 <printf>
    8001230c:	02900513          	li	a0,41
    80012310:	7a9070ef          	jal	8001a2b8 <putchar>
    80012314:	4529                	li	a0,10
    80012316:	7a3070ef          	jal	8001a2b8 <putchar>
    8001231a:	00144783          	lbu	a5,1(s0)
    8001231e:	4481                	li	s1,0
    80012320:	c789                	beqz	a5,8001232a <store_page_fault_1+0xea>
    80012322:	6404                	ld	s1,8(s0)
    80012324:	14c5                	add	s1,s1,-15
    80012326:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SPF
    );


    //执行store指令时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    TEST_SETUP_EXCEPT();
    8001232a:	0ff0000f          	fence
    8001232e:	4785                	li	a5,1
    80012330:	00f41023          	sh	a5,0(s0)
    80012334:	0002b797          	auipc	a5,0x2b
    80012338:	d007ba23          	sd	zero,-748(a5) # 8003d048 <excpt+0x38>
    8001233c:	0ff0000f          	fence
    addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80012340:	000807b7          	lui	a5,0x80
    80012344:	1007b073          	csrc	sstatus,a5
    asm volatile(
    80012348:	37ab77b7          	lui	a5,0x37ab7
    8001234c:	00100737          	lui	a4,0x100
    80012350:	078a                	sll	a5,a5,0x2
    80012352:	05f70713          	add	a4,a4,95 # 10005f <STACK_SIZE+0x5f>
    80012356:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001235a:	0732                	sll	a4,a4,0xc
    8001235c:	62f74073          	.4byte	0x62f74073
    hsvb(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvb when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80012360:	08200593          	li	a1,130
    80012364:	0000f617          	auipc	a2,0xf
    80012368:	5a460613          	add	a2,a2,1444 # 80021908 <__func__.1+0x4c60>
    8001236c:	0000b517          	auipc	a0,0xb
    80012370:	c3c50513          	add	a0,a0,-964 # 8001cfa8 <__func__.1+0x300>
    80012374:	072090ef          	jal	8001b3e6 <printf>
    80012378:	00144783          	lbu	a5,1(s0)
    8001237c:	0000b597          	auipc	a1,0xb
    80012380:	c0458593          	add	a1,a1,-1020 # 8001cf80 <__func__.1+0x2d8>
    80012384:	c789                	beqz	a5,8001238e <store_page_fault_1+0x14e>
    80012386:	6418                	ld	a4,8(s0)
    80012388:	47bd                	li	a5,15
    8001238a:	14f70763          	beq	a4,a5,800124d8 <store_page_fault_1+0x298>
    8001238e:	0000b517          	auipc	a0,0xb
    80012392:	c3250513          	add	a0,a0,-974 # 8001cfc0 <__func__.1+0x318>
    80012396:	050090ef          	jal	8001b3e6 <printf>
    8001239a:	00144783          	lbu	a5,1(s0)
    8001239e:	c789                	beqz	a5,800123a8 <store_page_fault_1+0x168>
    800123a0:	6418                	ld	a4,8(s0)
    800123a2:	47bd                	li	a5,15
    800123a4:	00f70c63          	beq	a4,a5,800123bc <store_page_fault_1+0x17c>
    800123a8:	0000b517          	auipc	a0,0xb
    800123ac:	c2050513          	add	a0,a0,-992 # 8001cfc8 <__func__.1+0x320>
    800123b0:	036090ef          	jal	8001b3e6 <printf>
    800123b4:	02900513          	li	a0,41
    800123b8:	701070ef          	jal	8001a2b8 <putchar>
    800123bc:	4529                	li	a0,10
    800123be:	6fb070ef          	jal	8001a2b8 <putchar>
    800123c2:	c491                	beqz	s1,800123ce <store_page_fault_1+0x18e>
    800123c4:	00144783          	lbu	a5,1(s0)
    800123c8:	4481                	li	s1,0
    800123ca:	0e079863          	bnez	a5,800124ba <store_page_fault_1+0x27a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行store指令时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    800123ce:	0ff0000f          	fence
    800123d2:	4785                	li	a5,1
    800123d4:	00f41023          	sh	a5,0(s0)
    800123d8:	0002b797          	auipc	a5,0x2b
    800123dc:	c607b823          	sd	zero,-912(a5) # 8003d048 <excpt+0x38>
    800123e0:	0ff0000f          	fence
    addr = hs_page_base(VSV_GV);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    800123e4:	000807b7          	lui	a5,0x80
    800123e8:	1007a073          	csrs	sstatus,a5
    asm volatile(
    800123ec:	37ab77b7          	lui	a5,0x37ab7
    800123f0:	00100737          	lui	a4,0x100
    800123f4:	078a                	sll	a5,a5,0x2
    800123f6:	0775                	add	a4,a4,29 # 10001d <STACK_SIZE+0x1d>
    800123f8:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800123fc:	0732                	sll	a4,a4,0xc
    800123fe:	66f74073          	.4byte	0x66f74073
    hsvh(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80012402:	08200593          	li	a1,130
    80012406:	0000f617          	auipc	a2,0xf
    8001240a:	54260613          	add	a2,a2,1346 # 80021948 <__func__.1+0x4ca0>
    8001240e:	0000b517          	auipc	a0,0xb
    80012412:	b9a50513          	add	a0,a0,-1126 # 8001cfa8 <__func__.1+0x300>
    80012416:	7d1080ef          	jal	8001b3e6 <printf>
    8001241a:	00144783          	lbu	a5,1(s0)
    8001241e:	0000b597          	auipc	a1,0xb
    80012422:	b6258593          	add	a1,a1,-1182 # 8001cf80 <__func__.1+0x2d8>
    80012426:	c789                	beqz	a5,80012430 <store_page_fault_1+0x1f0>
    80012428:	6418                	ld	a4,8(s0)
    8001242a:	47bd                	li	a5,15
    8001242c:	08f70c63          	beq	a4,a5,800124c4 <store_page_fault_1+0x284>
    80012430:	0000b517          	auipc	a0,0xb
    80012434:	b9050513          	add	a0,a0,-1136 # 8001cfc0 <__func__.1+0x318>
    80012438:	7af080ef          	jal	8001b3e6 <printf>
    8001243c:	00144783          	lbu	a5,1(s0)
    80012440:	c789                	beqz	a5,8001244a <store_page_fault_1+0x20a>
    80012442:	6418                	ld	a4,8(s0)
    80012444:	47bd                	li	a5,15
    80012446:	00f70c63          	beq	a4,a5,8001245e <store_page_fault_1+0x21e>
    8001244a:	0000b517          	auipc	a0,0xb
    8001244e:	b7e50513          	add	a0,a0,-1154 # 8001cfc8 <__func__.1+0x320>
    80012452:	795080ef          	jal	8001b3e6 <printf>
    80012456:	02900513          	li	a0,41
    8001245a:	65f070ef          	jal	8001a2b8 <putchar>
    8001245e:	4529                	li	a0,10
    80012460:	659070ef          	jal	8001a2b8 <putchar>
    80012464:	c481                	beqz	s1,8001246c <store_page_fault_1+0x22c>
    80012466:	00144483          	lbu	s1,1(s0)
    8001246a:	e89d                	bnez	s1,800124a0 <store_page_fault_1+0x260>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001246c:	000807b7          	lui	a5,0x80
    80012470:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs mode hsvh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80012474:	4481                	li	s1,0

    TEST_END();
    80012476:	0000b597          	auipc	a1,0xb
    8001247a:	b0a58593          	add	a1,a1,-1270 # 8001cf80 <__func__.1+0x2d8>
    8001247e:	0000b517          	auipc	a0,0xb
    80012482:	baa50513          	add	a0,a0,-1110 # 8001d028 <__func__.1+0x380>
    80012486:	761080ef          	jal	8001b3e6 <printf>
    8001248a:	4511                	li	a0,4
    8001248c:	e52ee0ef          	jal	80000ade <goto_priv>
    80012490:	e97ee0ef          	jal	80001326 <reset_state>
}
    80012494:	60e2                	ld	ra,24(sp)
    80012496:	6442                	ld	s0,16(sp)
    80012498:	8526                	mv	a0,s1
    8001249a:	64a2                	ld	s1,8(sp)
    8001249c:	6105                	add	sp,sp,32
    8001249e:	8082                	ret
    TEST_ASSERT("hs mode hsvh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800124a0:	6418                	ld	a4,8(s0)
    800124a2:	47bd                	li	a5,15
    800124a4:	fcf714e3          	bne	a4,a5,8001246c <store_page_fault_1+0x22c>
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800124a8:	000807b7          	lui	a5,0x80
    800124ac:	1007b073          	csrc	sstatus,a5
    TEST_END();
    800124b0:	0000b597          	auipc	a1,0xb
    800124b4:	ac058593          	add	a1,a1,-1344 # 8001cf70 <__func__.1+0x2c8>
    800124b8:	b7d9                	j	8001247e <store_page_fault_1+0x23e>
    TEST_ASSERT("hs mode hsvb when sstatus.mxr=0 and pte.r=0 leads to LPF",
    800124ba:	6404                	ld	s1,8(s0)
    800124bc:	14c5                	add	s1,s1,-15
    800124be:	0014b493          	seqz	s1,s1
    800124c2:	b731                	j	800123ce <store_page_fault_1+0x18e>
    TEST_ASSERT("hs mode hsvh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800124c4:	0000b597          	auipc	a1,0xb
    800124c8:	aac58593          	add	a1,a1,-1364 # 8001cf70 <__func__.1+0x2c8>
    800124cc:	b795                	j	80012430 <store_page_fault_1+0x1f0>
    TEST_ASSERT("hs mode hsvd when pte.v=0 leads to LPF",
    800124ce:	0000b597          	auipc	a1,0xb
    800124d2:	aa258593          	add	a1,a1,-1374 # 8001cf70 <__func__.1+0x2c8>
    800124d6:	bd01                	j	800122e6 <store_page_fault_1+0xa6>
    TEST_ASSERT("hs mode hsvb when sstatus.mxr=0 and pte.r=0 leads to LPF",
    800124d8:	0000b597          	auipc	a1,0xb
    800124dc:	a9858593          	add	a1,a1,-1384 # 8001cf70 <__func__.1+0x2c8>
    800124e0:	b57d                	j	8001238e <store_page_fault_1+0x14e>

00000000800124e2 <store_page_fault_2>:

bool store_page_fault_2(){
    800124e2:	1101                	add	sp,sp,-32

    TEST_START();
    800124e4:	0000a597          	auipc	a1,0xa
    800124e8:	e0c58593          	add	a1,a1,-500 # 8001c2f0 <__func__.12>
    800124ec:	0000b517          	auipc	a0,0xb
    800124f0:	aa450513          	add	a0,a0,-1372 # 8001cf90 <__func__.1+0x2e8>
bool store_page_fault_2(){
    800124f4:	ec06                	sd	ra,24(sp)
    800124f6:	e822                	sd	s0,16(sp)
    800124f8:	e426                	sd	s1,8(sp)
    TEST_START();
    800124fa:	6ed080ef          	jal	8001b3e6 <printf>
    800124fe:	4529                	li	a0,10
    80012500:	5b9070ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80012504:	450d                	li	a0,3
    80012506:	dd8ee0ef          	jal	80000ade <goto_priv>
    hspt_init();
    8001250a:	8d6ee0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001250e:	b18ee0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80012512:	4509                	li	a0,2
    80012514:	dcaee0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80012518:	99cee0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_M);
    8001251c:	4511                	li	a0,4
    8001251e:	dc0ee0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80012522:	000407b7          	lui	a5,0x40
    80012526:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    8001252a:	450d                	li	a0,3
    8001252c:	db2ee0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80012530:	4509                	li	a0,2
    80012532:	cd0ee0ef          	jal	80000a02 <set_prev_priv>
    //执行hsvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80012536:	0ff0000f          	fence
    8001253a:	4785                	li	a5,1
    8001253c:	0002b417          	auipc	s0,0x2b
    80012540:	ad440413          	add	s0,s0,-1324 # 8003d010 <excpt>
    80012544:	00f41023          	sh	a5,0(s0)
    80012548:	0002b797          	auipc	a5,0x2b
    8001254c:	b007b023          	sd	zero,-1280(a5) # 8003d048 <excpt+0x38>
    80012550:	0ff0000f          	fence
    asm volatile(
    80012554:	37ab77b7          	lui	a5,0x37ab7
    80012558:	00080737          	lui	a4,0x80
    8001255c:	078a                	sll	a5,a5,0x2
    8001255e:	0765                	add	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80012560:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80012564:	0736                	sll	a4,a4,0xd
    80012566:	6ef74073          	.4byte	0x6ef74073
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    hsvd(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    8001256a:	08200593          	li	a1,130
    8001256e:	0000f617          	auipc	a2,0xf
    80012572:	42260613          	add	a2,a2,1058 # 80021990 <__func__.1+0x4ce8>
    80012576:	0000b517          	auipc	a0,0xb
    8001257a:	a3250513          	add	a0,a0,-1486 # 8001cfa8 <__func__.1+0x300>
    8001257e:	669080ef          	jal	8001b3e6 <printf>
    80012582:	00144783          	lbu	a5,1(s0)
    80012586:	0000b597          	auipc	a1,0xb
    8001258a:	9fa58593          	add	a1,a1,-1542 # 8001cf80 <__func__.1+0x2d8>
    8001258e:	c789                	beqz	a5,80012598 <store_page_fault_2+0xb6>
    80012590:	6418                	ld	a4,8(s0)
    80012592:	47bd                	li	a5,15
    80012594:	06f70e63          	beq	a4,a5,80012610 <store_page_fault_2+0x12e>
    80012598:	0000b517          	auipc	a0,0xb
    8001259c:	a2850513          	add	a0,a0,-1496 # 8001cfc0 <__func__.1+0x318>
    800125a0:	647080ef          	jal	8001b3e6 <printf>
    800125a4:	00144783          	lbu	a5,1(s0)
    800125a8:	c789                	beqz	a5,800125b2 <store_page_fault_2+0xd0>
    800125aa:	6418                	ld	a4,8(s0)
    800125ac:	47bd                	li	a5,15
    800125ae:	00f70c63          	beq	a4,a5,800125c6 <store_page_fault_2+0xe4>
    800125b2:	0000b517          	auipc	a0,0xb
    800125b6:	a1650513          	add	a0,a0,-1514 # 8001cfc8 <__func__.1+0x320>
    800125ba:	62d080ef          	jal	8001b3e6 <printf>
    800125be:	02900513          	li	a0,41
    800125c2:	4f7070ef          	jal	8001a2b8 <putchar>
    800125c6:	4529                	li	a0,10
    800125c8:	4f1070ef          	jal	8001a2b8 <putchar>
    800125cc:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    800125d0:	0000b597          	auipc	a1,0xb
    800125d4:	9b058593          	add	a1,a1,-1616 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    800125d8:	c491                	beqz	s1,800125e4 <store_page_fault_2+0x102>
    800125da:	6418                	ld	a4,8(s0)
    800125dc:	47bd                	li	a5,15
    800125de:	02f70463          	beq	a4,a5,80012606 <store_page_fault_2+0x124>
    800125e2:	4481                	li	s1,0
    TEST_END();
    800125e4:	0000b517          	auipc	a0,0xb
    800125e8:	a4450513          	add	a0,a0,-1468 # 8001d028 <__func__.1+0x380>
    800125ec:	5fb080ef          	jal	8001b3e6 <printf>
    800125f0:	4511                	li	a0,4
    800125f2:	cecee0ef          	jal	80000ade <goto_priv>
    800125f6:	d31ee0ef          	jal	80001326 <reset_state>
}
    800125fa:	60e2                	ld	ra,24(sp)
    800125fc:	6442                	ld	s0,16(sp)
    800125fe:	8526                	mv	a0,s1
    80012600:	64a2                	ld	s1,8(sp)
    80012602:	6105                	add	sp,sp,32
    80012604:	8082                	ret
    TEST_END();
    80012606:	0000b597          	auipc	a1,0xb
    8001260a:	96a58593          	add	a1,a1,-1686 # 8001cf70 <__func__.1+0x2c8>
    8001260e:	bfd9                	j	800125e4 <store_page_fault_2+0x102>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    80012610:	0000b597          	auipc	a1,0xb
    80012614:	96058593          	add	a1,a1,-1696 # 8001cf70 <__func__.1+0x2c8>
    80012618:	b741                	j	80012598 <store_page_fault_2+0xb6>

000000008001261a <store_page_fault_3>:

bool store_page_fault_3(){
    8001261a:	1141                	add	sp,sp,-16

    TEST_START();
    8001261c:	0000a597          	auipc	a1,0xa
    80012620:	cec58593          	add	a1,a1,-788 # 8001c308 <__func__.11>
    80012624:	0000b517          	auipc	a0,0xb
    80012628:	96c50513          	add	a0,a0,-1684 # 8001cf90 <__func__.1+0x2e8>
bool store_page_fault_3(){
    8001262c:	e406                	sd	ra,8(sp)
    8001262e:	e022                	sd	s0,0(sp)
    TEST_START();
    80012630:	5b7080ef          	jal	8001b3e6 <printf>
    80012634:	4529                	li	a0,10
    80012636:	483070ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    8001263a:	450d                	li	a0,3
    8001263c:	ca2ee0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80012640:	fa1ed0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80012644:	9e2ee0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80012648:	4509                	li	a0,2
    8001264a:	c94ee0ef          	jal	80000ade <goto_priv>
    vspt_init();
    8001264e:	866ee0ef          	jal	800006b4 <vspt_init>


    //执行hsvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80012652:	4511                	li	a0,4
    80012654:	c8aee0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80012658:	000407b7          	lui	a5,0x40
    8001265c:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    80012660:	450d                	li	a0,3
    80012662:	c7cee0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80012666:	4509                	li	a0,2
    80012668:	b9aee0ef          	jal	80000a02 <set_prev_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    8001266c:	0ff0000f          	fence
    80012670:	4785                	li	a5,1
    80012672:	0002b417          	auipc	s0,0x2b
    80012676:	99e40413          	add	s0,s0,-1634 # 8003d010 <excpt>
    8001267a:	00f41023          	sh	a5,0(s0)
    8001267e:	0002b797          	auipc	a5,0x2b
    80012682:	9c07b523          	sd	zero,-1590(a5) # 8003d048 <excpt+0x38>
    80012686:	0ff0000f          	fence
    asm volatile(
    8001268a:	37ab77b7          	lui	a5,0x37ab7
    8001268e:	00080737          	lui	a4,0x80
    80012692:	078a                	sll	a5,a5,0x2
    80012694:	0765                	add	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80012696:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001269a:	0736                	sll	a4,a4,0xd
    8001269c:	62f74073          	.4byte	0x62f74073
    hsvb(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    800126a0:	08200593          	li	a1,130
    800126a4:	0000f617          	auipc	a2,0xf
    800126a8:	32c60613          	add	a2,a2,812 # 800219d0 <__func__.1+0x4d28>
    800126ac:	0000b517          	auipc	a0,0xb
    800126b0:	8fc50513          	add	a0,a0,-1796 # 8001cfa8 <__func__.1+0x300>
    800126b4:	533080ef          	jal	8001b3e6 <printf>
    800126b8:	00144783          	lbu	a5,1(s0)
    800126bc:	0000b597          	auipc	a1,0xb
    800126c0:	8b458593          	add	a1,a1,-1868 # 8001cf70 <__func__.1+0x2c8>
    800126c4:	c789                	beqz	a5,800126ce <store_page_fault_3+0xb4>
    800126c6:	0000b597          	auipc	a1,0xb
    800126ca:	8ba58593          	add	a1,a1,-1862 # 8001cf80 <__func__.1+0x2d8>
    800126ce:	0000b517          	auipc	a0,0xb
    800126d2:	8f250513          	add	a0,a0,-1806 # 8001cfc0 <__func__.1+0x318>
    800126d6:	511080ef          	jal	8001b3e6 <printf>
    800126da:	00144783          	lbu	a5,1(s0)
    800126de:	e3b1                	bnez	a5,80012722 <store_page_fault_3+0x108>
    800126e0:	4529                	li	a0,10
    800126e2:	3d7070ef          	jal	8001a2b8 <putchar>
    800126e6:	00144783          	lbu	a5,1(s0)
    800126ea:	e795                	bnez	a5,80012716 <store_page_fault_3+0xfc>
    800126ec:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    800126ee:	0000b597          	auipc	a1,0xb
    800126f2:	88258593          	add	a1,a1,-1918 # 8001cf70 <__func__.1+0x2c8>
    800126f6:	0000b517          	auipc	a0,0xb
    800126fa:	93250513          	add	a0,a0,-1742 # 8001d028 <__func__.1+0x380>
    800126fe:	4e9080ef          	jal	8001b3e6 <printf>
    80012702:	4511                	li	a0,4
    80012704:	bdaee0ef          	jal	80000ade <goto_priv>
    80012708:	c1fee0ef          	jal	80001326 <reset_state>
}
    8001270c:	60a2                	ld	ra,8(sp)
    8001270e:	8522                	mv	a0,s0
    80012710:	6402                	ld	s0,0(sp)
    80012712:	0141                	add	sp,sp,16
    80012714:	8082                	ret
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    80012716:	4401                	li	s0,0
    TEST_END();
    80012718:	0000b597          	auipc	a1,0xb
    8001271c:	86858593          	add	a1,a1,-1944 # 8001cf80 <__func__.1+0x2d8>
    80012720:	bfd9                	j	800126f6 <store_page_fault_3+0xdc>
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    80012722:	0000b517          	auipc	a0,0xb
    80012726:	8a650513          	add	a0,a0,-1882 # 8001cfc8 <__func__.1+0x320>
    8001272a:	4bd080ef          	jal	8001b3e6 <printf>
    8001272e:	02900513          	li	a0,41
    80012732:	387070ef          	jal	8001a2b8 <putchar>
    80012736:	b76d                	j	800126e0 <store_page_fault_3+0xc6>

0000000080012738 <store_page_fault_4>:


bool store_page_fault_4(){
    80012738:	1101                	add	sp,sp,-32

    TEST_START();
    8001273a:	0000a597          	auipc	a1,0xa
    8001273e:	be658593          	add	a1,a1,-1050 # 8001c320 <__func__.10>
    80012742:	0000b517          	auipc	a0,0xb
    80012746:	84e50513          	add	a0,a0,-1970 # 8001cf90 <__func__.1+0x2e8>
bool store_page_fault_4(){
    8001274a:	ec06                	sd	ra,24(sp)
    8001274c:	e822                	sd	s0,16(sp)
    8001274e:	e426                	sd	s1,8(sp)
    TEST_START();
    80012750:	497080ef          	jal	8001b3e6 <printf>
    80012754:	4529                	li	a0,10
    80012756:	363070ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    8001275a:	450d                	li	a0,3
    8001275c:	b82ee0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80012760:	e81ed0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80012764:	8c2ee0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80012768:	4509                	li	a0,2
    8001276a:	b74ee0ef          	jal	80000ade <goto_priv>
    vspt_init();
    8001276e:	f47ed0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80012772:	4509                	li	a0,2
    80012774:	b6aee0ef          	jal	80000ade <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80012778:	0ff0000f          	fence
    8001277c:	4785                	li	a5,1
    8001277e:	0002b417          	auipc	s0,0x2b
    80012782:	89240413          	add	s0,s0,-1902 # 8003d010 <excpt>
    80012786:	00f41023          	sh	a5,0(s0)
    8001278a:	0002b797          	auipc	a5,0x2b
    8001278e:	8a07bf23          	sd	zero,-1858(a5) # 8003d048 <excpt+0x38>
    80012792:	0ff0000f          	fence
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80012796:	37ab77b7          	lui	a5,0x37ab7
    8001279a:	078a                	sll	a5,a5,0x2
    8001279c:	40019737          	lui	a4,0x40019
    800127a0:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800127a4:	070a                	sll	a4,a4,0x2
    800127a6:	00f73023          	sd	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>

    addr = hs_page_base(VSI_GI);
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd when pte.v=0 leads to LPF",
    800127aa:	08200593          	li	a1,130
    800127ae:	0000f617          	auipc	a2,0xf
    800127b2:	25a60613          	add	a2,a2,602 # 80021a08 <__func__.1+0x4d60>
    800127b6:	0000a517          	auipc	a0,0xa
    800127ba:	7f250513          	add	a0,a0,2034 # 8001cfa8 <__func__.1+0x300>
    800127be:	429080ef          	jal	8001b3e6 <printf>
    800127c2:	00144783          	lbu	a5,1(s0)
    800127c6:	0000a597          	auipc	a1,0xa
    800127ca:	7ba58593          	add	a1,a1,1978 # 8001cf80 <__func__.1+0x2d8>
    800127ce:	c789                	beqz	a5,800127d8 <store_page_fault_4+0xa0>
    800127d0:	6418                	ld	a4,8(s0)
    800127d2:	47bd                	li	a5,15
    800127d4:	1ef70663          	beq	a4,a5,800129c0 <store_page_fault_4+0x288>
    800127d8:	0000a517          	auipc	a0,0xa
    800127dc:	7e850513          	add	a0,a0,2024 # 8001cfc0 <__func__.1+0x318>
    800127e0:	407080ef          	jal	8001b3e6 <printf>
    800127e4:	00144783          	lbu	a5,1(s0)
    800127e8:	c789                	beqz	a5,800127f2 <store_page_fault_4+0xba>
    800127ea:	6418                	ld	a4,8(s0)
    800127ec:	47bd                	li	a5,15
    800127ee:	00f70c63          	beq	a4,a5,80012806 <store_page_fault_4+0xce>
    800127f2:	0000a517          	auipc	a0,0xa
    800127f6:	7d650513          	add	a0,a0,2006 # 8001cfc8 <__func__.1+0x320>
    800127fa:	3ed080ef          	jal	8001b3e6 <printf>
    800127fe:	02900513          	li	a0,41
    80012802:	2b7070ef          	jal	8001a2b8 <putchar>
    80012806:	4529                	li	a0,10
    80012808:	2b1070ef          	jal	8001a2b8 <putchar>
    8001280c:	00144783          	lbu	a5,1(s0)
    80012810:	4481                	li	s1,0
    80012812:	c789                	beqz	a5,8001281c <store_page_fault_4+0xe4>
    80012814:	6404                	ld	s1,8(s0)
    80012816:	14c5                	add	s1,s1,-15
    80012818:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SPF
    );


    //执行sd指令时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    TEST_SETUP_EXCEPT();
    8001281c:	0ff0000f          	fence
    80012820:	4785                	li	a5,1
    80012822:	00f41023          	sh	a5,0(s0)
    80012826:	0002b797          	auipc	a5,0x2b
    8001282a:	8207b123          	sd	zero,-2014(a5) # 8003d048 <excpt+0x38>
    8001282e:	0ff0000f          	fence
    addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80012832:	000807b7          	lui	a5,0x80
    80012836:	1007b073          	csrc	sstatus,a5
    8001283a:	37ab77b7          	lui	a5,0x37ab7
    8001283e:	00100737          	lui	a4,0x100
    80012842:	078a                	sll	a5,a5,0x2
    80012844:	05f70713          	add	a4,a4,95 # 10005f <STACK_SIZE+0x5f>
    80012848:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001284c:	0732                	sll	a4,a4,0xc
    8001284e:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80012852:	08200593          	li	a1,130
    80012856:	0000f617          	auipc	a2,0xf
    8001285a:	1da60613          	add	a2,a2,474 # 80021a30 <__func__.1+0x4d88>
    8001285e:	0000a517          	auipc	a0,0xa
    80012862:	74a50513          	add	a0,a0,1866 # 8001cfa8 <__func__.1+0x300>
    80012866:	381080ef          	jal	8001b3e6 <printf>
    8001286a:	00144783          	lbu	a5,1(s0)
    8001286e:	0000a597          	auipc	a1,0xa
    80012872:	71258593          	add	a1,a1,1810 # 8001cf80 <__func__.1+0x2d8>
    80012876:	c789                	beqz	a5,80012880 <store_page_fault_4+0x148>
    80012878:	6418                	ld	a4,8(s0)
    8001287a:	47bd                	li	a5,15
    8001287c:	14f70763          	beq	a4,a5,800129ca <store_page_fault_4+0x292>
    80012880:	0000a517          	auipc	a0,0xa
    80012884:	74050513          	add	a0,a0,1856 # 8001cfc0 <__func__.1+0x318>
    80012888:	35f080ef          	jal	8001b3e6 <printf>
    8001288c:	00144783          	lbu	a5,1(s0)
    80012890:	c789                	beqz	a5,8001289a <store_page_fault_4+0x162>
    80012892:	6418                	ld	a4,8(s0)
    80012894:	47bd                	li	a5,15
    80012896:	00f70c63          	beq	a4,a5,800128ae <store_page_fault_4+0x176>
    8001289a:	0000a517          	auipc	a0,0xa
    8001289e:	72e50513          	add	a0,a0,1838 # 8001cfc8 <__func__.1+0x320>
    800128a2:	345080ef          	jal	8001b3e6 <printf>
    800128a6:	02900513          	li	a0,41
    800128aa:	20f070ef          	jal	8001a2b8 <putchar>
    800128ae:	4529                	li	a0,10
    800128b0:	209070ef          	jal	8001a2b8 <putchar>
    800128b4:	c491                	beqz	s1,800128c0 <store_page_fault_4+0x188>
    800128b6:	00144783          	lbu	a5,1(s0)
    800128ba:	4481                	li	s1,0
    800128bc:	0e079863          	bnez	a5,800129ac <store_page_fault_4+0x274>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行sd指令时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    800128c0:	0ff0000f          	fence
    800128c4:	4785                	li	a5,1
    800128c6:	00f41023          	sh	a5,0(s0)
    800128ca:	0002a797          	auipc	a5,0x2a
    800128ce:	7607bf23          	sd	zero,1918(a5) # 8003d048 <excpt+0x38>
    800128d2:	0ff0000f          	fence
    addr = hs_page_base(VSV_GV);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    800128d6:	000807b7          	lui	a5,0x80
    800128da:	1007a073          	csrs	sstatus,a5
    800128de:	37ab77b7          	lui	a5,0x37ab7
    800128e2:	00100737          	lui	a4,0x100
    800128e6:	078a                	sll	a5,a5,0x2
    800128e8:	0775                	add	a4,a4,29 # 10001d <STACK_SIZE+0x1d>
    800128ea:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800128ee:	0732                	sll	a4,a4,0xc
    800128f0:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800128f4:	08200593          	li	a1,130
    800128f8:	0000f617          	auipc	a2,0xf
    800128fc:	17060613          	add	a2,a2,368 # 80021a68 <__func__.1+0x4dc0>
    80012900:	0000a517          	auipc	a0,0xa
    80012904:	6a850513          	add	a0,a0,1704 # 8001cfa8 <__func__.1+0x300>
    80012908:	2df080ef          	jal	8001b3e6 <printf>
    8001290c:	00144783          	lbu	a5,1(s0)
    80012910:	0000a597          	auipc	a1,0xa
    80012914:	67058593          	add	a1,a1,1648 # 8001cf80 <__func__.1+0x2d8>
    80012918:	c789                	beqz	a5,80012922 <store_page_fault_4+0x1ea>
    8001291a:	6418                	ld	a4,8(s0)
    8001291c:	47bd                	li	a5,15
    8001291e:	08f70c63          	beq	a4,a5,800129b6 <store_page_fault_4+0x27e>
    80012922:	0000a517          	auipc	a0,0xa
    80012926:	69e50513          	add	a0,a0,1694 # 8001cfc0 <__func__.1+0x318>
    8001292a:	2bd080ef          	jal	8001b3e6 <printf>
    8001292e:	00144783          	lbu	a5,1(s0)
    80012932:	c789                	beqz	a5,8001293c <store_page_fault_4+0x204>
    80012934:	6418                	ld	a4,8(s0)
    80012936:	47bd                	li	a5,15
    80012938:	00f70c63          	beq	a4,a5,80012950 <store_page_fault_4+0x218>
    8001293c:	0000a517          	auipc	a0,0xa
    80012940:	68c50513          	add	a0,a0,1676 # 8001cfc8 <__func__.1+0x320>
    80012944:	2a3080ef          	jal	8001b3e6 <printf>
    80012948:	02900513          	li	a0,41
    8001294c:	16d070ef          	jal	8001a2b8 <putchar>
    80012950:	4529                	li	a0,10
    80012952:	167070ef          	jal	8001a2b8 <putchar>
    80012956:	c481                	beqz	s1,8001295e <store_page_fault_4+0x226>
    80012958:	00144483          	lbu	s1,1(s0)
    8001295c:	e89d                	bnez	s1,80012992 <store_page_fault_4+0x25a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001295e:	000807b7          	lui	a5,0x80
    80012962:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("vs mode sd when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80012966:	4481                	li	s1,0

    TEST_END();
    80012968:	0000a597          	auipc	a1,0xa
    8001296c:	61858593          	add	a1,a1,1560 # 8001cf80 <__func__.1+0x2d8>
    80012970:	0000a517          	auipc	a0,0xa
    80012974:	6b850513          	add	a0,a0,1720 # 8001d028 <__func__.1+0x380>
    80012978:	26f080ef          	jal	8001b3e6 <printf>
    8001297c:	4511                	li	a0,4
    8001297e:	960ee0ef          	jal	80000ade <goto_priv>
    80012982:	9a5ee0ef          	jal	80001326 <reset_state>
}
    80012986:	60e2                	ld	ra,24(sp)
    80012988:	6442                	ld	s0,16(sp)
    8001298a:	8526                	mv	a0,s1
    8001298c:	64a2                	ld	s1,8(sp)
    8001298e:	6105                	add	sp,sp,32
    80012990:	8082                	ret
    TEST_ASSERT("vs mode sd when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80012992:	6418                	ld	a4,8(s0)
    80012994:	47bd                	li	a5,15
    80012996:	fcf714e3          	bne	a4,a5,8001295e <store_page_fault_4+0x226>
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001299a:	000807b7          	lui	a5,0x80
    8001299e:	1007b073          	csrc	sstatus,a5
    TEST_END();
    800129a2:	0000a597          	auipc	a1,0xa
    800129a6:	5ce58593          	add	a1,a1,1486 # 8001cf70 <__func__.1+0x2c8>
    800129aa:	b7d9                	j	80012970 <store_page_fault_4+0x238>
    TEST_ASSERT("vs mode sd when sstatus.mxr=0 and pte.r=0 leads to LPF",
    800129ac:	6404                	ld	s1,8(s0)
    800129ae:	14c5                	add	s1,s1,-15
    800129b0:	0014b493          	seqz	s1,s1
    800129b4:	b731                	j	800128c0 <store_page_fault_4+0x188>
    TEST_ASSERT("vs mode sd when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800129b6:	0000a597          	auipc	a1,0xa
    800129ba:	5ba58593          	add	a1,a1,1466 # 8001cf70 <__func__.1+0x2c8>
    800129be:	b795                	j	80012922 <store_page_fault_4+0x1ea>
    TEST_ASSERT("vs mode sd when pte.v=0 leads to LPF",
    800129c0:	0000a597          	auipc	a1,0xa
    800129c4:	5b058593          	add	a1,a1,1456 # 8001cf70 <__func__.1+0x2c8>
    800129c8:	bd01                	j	800127d8 <store_page_fault_4+0xa0>
    TEST_ASSERT("vs mode sd when sstatus.mxr=0 and pte.r=0 leads to LPF",
    800129ca:	0000a597          	auipc	a1,0xa
    800129ce:	5a658593          	add	a1,a1,1446 # 8001cf70 <__func__.1+0x2c8>
    800129d2:	b57d                	j	80012880 <store_page_fault_4+0x148>

00000000800129d4 <store_page_fault_5>:

bool store_page_fault_5(){
    800129d4:	1101                	add	sp,sp,-32

    TEST_START();
    800129d6:	0000a597          	auipc	a1,0xa
    800129da:	96258593          	add	a1,a1,-1694 # 8001c338 <__func__.9>
    800129de:	0000a517          	auipc	a0,0xa
    800129e2:	5b250513          	add	a0,a0,1458 # 8001cf90 <__func__.1+0x2e8>
bool store_page_fault_5(){
    800129e6:	ec06                	sd	ra,24(sp)
    800129e8:	e822                	sd	s0,16(sp)
    800129ea:	e426                	sd	s1,8(sp)
    TEST_START();
    800129ec:	1fb080ef          	jal	8001b3e6 <printf>
    800129f0:	4529                	li	a0,10
    800129f2:	0c7070ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    800129f6:	450d                	li	a0,3
    800129f8:	8e6ee0ef          	jal	80000ade <goto_priv>
    hspt_init();
    800129fc:	be5ed0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80012a00:	e27ed0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80012a04:	4509                	li	a0,2
    80012a06:	8d8ee0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80012a0a:	cabed0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_M);
    80012a0e:	4511                	li	a0,4
    80012a10:	8ceee0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80012a14:	000407b7          	lui	a5,0x40
    80012a18:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80012a1c:	4509                	li	a0,2
    80012a1e:	8c0ee0ef          	jal	80000ade <goto_priv>
    //执行sd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80012a22:	0ff0000f          	fence
    80012a26:	4785                	li	a5,1
    80012a28:	0002a417          	auipc	s0,0x2a
    80012a2c:	5e840413          	add	s0,s0,1512 # 8003d010 <excpt>
    80012a30:	00f41023          	sh	a5,0(s0)
    80012a34:	0002a797          	auipc	a5,0x2a
    80012a38:	6007ba23          	sd	zero,1556(a5) # 8003d048 <excpt+0x38>
    80012a3c:	0ff0000f          	fence
    80012a40:	37ab77b7          	lui	a5,0x37ab7
    80012a44:	00080737          	lui	a4,0x80
    80012a48:	078a                	sll	a5,a5,0x2
    80012a4a:	0765                	add	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80012a4c:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80012a50:	0736                	sll	a4,a4,0xd
    80012a52:	00f73023          	sd	a5,0(a4)
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    sd(vaddr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    80012a56:	08200593          	li	a1,130
    80012a5a:	0000f617          	auipc	a2,0xf
    80012a5e:	05660613          	add	a2,a2,86 # 80021ab0 <__func__.1+0x4e08>
    80012a62:	0000a517          	auipc	a0,0xa
    80012a66:	54650513          	add	a0,a0,1350 # 8001cfa8 <__func__.1+0x300>
    80012a6a:	17d080ef          	jal	8001b3e6 <printf>
    80012a6e:	00144783          	lbu	a5,1(s0)
    80012a72:	0000a597          	auipc	a1,0xa
    80012a76:	50e58593          	add	a1,a1,1294 # 8001cf80 <__func__.1+0x2d8>
    80012a7a:	c789                	beqz	a5,80012a84 <store_page_fault_5+0xb0>
    80012a7c:	6418                	ld	a4,8(s0)
    80012a7e:	47bd                	li	a5,15
    80012a80:	06f70e63          	beq	a4,a5,80012afc <store_page_fault_5+0x128>
    80012a84:	0000a517          	auipc	a0,0xa
    80012a88:	53c50513          	add	a0,a0,1340 # 8001cfc0 <__func__.1+0x318>
    80012a8c:	15b080ef          	jal	8001b3e6 <printf>
    80012a90:	00144783          	lbu	a5,1(s0)
    80012a94:	c789                	beqz	a5,80012a9e <store_page_fault_5+0xca>
    80012a96:	6418                	ld	a4,8(s0)
    80012a98:	47bd                	li	a5,15
    80012a9a:	00f70c63          	beq	a4,a5,80012ab2 <store_page_fault_5+0xde>
    80012a9e:	0000a517          	auipc	a0,0xa
    80012aa2:	52a50513          	add	a0,a0,1322 # 8001cfc8 <__func__.1+0x320>
    80012aa6:	141080ef          	jal	8001b3e6 <printf>
    80012aaa:	02900513          	li	a0,41
    80012aae:	00b070ef          	jal	8001a2b8 <putchar>
    80012ab2:	4529                	li	a0,10
    80012ab4:	005070ef          	jal	8001a2b8 <putchar>
    80012ab8:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    80012abc:	0000a597          	auipc	a1,0xa
    80012ac0:	4c458593          	add	a1,a1,1220 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    80012ac4:	c491                	beqz	s1,80012ad0 <store_page_fault_5+0xfc>
    80012ac6:	6418                	ld	a4,8(s0)
    80012ac8:	47bd                	li	a5,15
    80012aca:	02f70463          	beq	a4,a5,80012af2 <store_page_fault_5+0x11e>
    80012ace:	4481                	li	s1,0
    TEST_END();
    80012ad0:	0000a517          	auipc	a0,0xa
    80012ad4:	55850513          	add	a0,a0,1368 # 8001d028 <__func__.1+0x380>
    80012ad8:	10f080ef          	jal	8001b3e6 <printf>
    80012adc:	4511                	li	a0,4
    80012ade:	800ee0ef          	jal	80000ade <goto_priv>
    80012ae2:	845ee0ef          	jal	80001326 <reset_state>
}
    80012ae6:	60e2                	ld	ra,24(sp)
    80012ae8:	6442                	ld	s0,16(sp)
    80012aea:	8526                	mv	a0,s1
    80012aec:	64a2                	ld	s1,8(sp)
    80012aee:	6105                	add	sp,sp,32
    80012af0:	8082                	ret
    TEST_END();
    80012af2:	0000a597          	auipc	a1,0xa
    80012af6:	47e58593          	add	a1,a1,1150 # 8001cf70 <__func__.1+0x2c8>
    80012afa:	bfd9                	j	80012ad0 <store_page_fault_5+0xfc>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    80012afc:	0000a597          	auipc	a1,0xa
    80012b00:	47458593          	add	a1,a1,1140 # 8001cf70 <__func__.1+0x2c8>
    80012b04:	b741                	j	80012a84 <store_page_fault_5+0xb0>

0000000080012b06 <store_page_fault_6>:

bool store_page_fault_6(){
    80012b06:	1141                	add	sp,sp,-16

    TEST_START();
    80012b08:	0000a597          	auipc	a1,0xa
    80012b0c:	84858593          	add	a1,a1,-1976 # 8001c350 <__func__.8>
    80012b10:	0000a517          	auipc	a0,0xa
    80012b14:	48050513          	add	a0,a0,1152 # 8001cf90 <__func__.1+0x2e8>
bool store_page_fault_6(){
    80012b18:	e406                	sd	ra,8(sp)
    80012b1a:	e022                	sd	s0,0(sp)
    TEST_START();
    80012b1c:	0cb080ef          	jal	8001b3e6 <printf>
    80012b20:	4529                	li	a0,10
    80012b22:	796070ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80012b26:	450d                	li	a0,3
    80012b28:	fb7ed0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80012b2c:	ab5ed0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80012b30:	cf7ed0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80012b34:	4509                	li	a0,2
    80012b36:	fa9ed0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80012b3a:	b7bed0ef          	jal	800006b4 <vspt_init>


    //执行hsvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80012b3e:	4511                	li	a0,4
    80012b40:	f9fed0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80012b44:	000407b7          	lui	a5,0x40
    80012b48:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_VS);
    80012b4c:	4509                	li	a0,2
    80012b4e:	f91ed0ef          	jal	80000ade <goto_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80012b52:	0ff0000f          	fence
    80012b56:	4785                	li	a5,1
    80012b58:	0002a417          	auipc	s0,0x2a
    80012b5c:	4b840413          	add	s0,s0,1208 # 8003d010 <excpt>
    80012b60:	00f41023          	sh	a5,0(s0)
    80012b64:	0002a797          	auipc	a5,0x2a
    80012b68:	4e07b223          	sd	zero,1252(a5) # 8003d048 <excpt+0x38>
    80012b6c:	0ff0000f          	fence
    80012b70:	37ab77b7          	lui	a5,0x37ab7
    80012b74:	00080737          	lui	a4,0x80
    80012b78:	078a                	sll	a5,a5,0x2
    80012b7a:	0765                	add	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80012b7c:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80012b80:	0736                	sll	a4,a4,0xd
    80012b82:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80012b86:	08200593          	li	a1,130
    80012b8a:	0000f617          	auipc	a2,0xf
    80012b8e:	f5e60613          	add	a2,a2,-162 # 80021ae8 <__func__.1+0x4e40>
    80012b92:	0000a517          	auipc	a0,0xa
    80012b96:	41650513          	add	a0,a0,1046 # 8001cfa8 <__func__.1+0x300>
    80012b9a:	04d080ef          	jal	8001b3e6 <printf>
    80012b9e:	00144783          	lbu	a5,1(s0)
    80012ba2:	0000a597          	auipc	a1,0xa
    80012ba6:	3ce58593          	add	a1,a1,974 # 8001cf70 <__func__.1+0x2c8>
    80012baa:	c789                	beqz	a5,80012bb4 <store_page_fault_6+0xae>
    80012bac:	0000a597          	auipc	a1,0xa
    80012bb0:	3d458593          	add	a1,a1,980 # 8001cf80 <__func__.1+0x2d8>
    80012bb4:	0000a517          	auipc	a0,0xa
    80012bb8:	40c50513          	add	a0,a0,1036 # 8001cfc0 <__func__.1+0x318>
    80012bbc:	02b080ef          	jal	8001b3e6 <printf>
    80012bc0:	00144783          	lbu	a5,1(s0)
    80012bc4:	e3b1                	bnez	a5,80012c08 <store_page_fault_6+0x102>
    80012bc6:	4529                	li	a0,10
    80012bc8:	6f0070ef          	jal	8001a2b8 <putchar>
    80012bcc:	00144783          	lbu	a5,1(s0)
    80012bd0:	e795                	bnez	a5,80012bfc <store_page_fault_6+0xf6>
    80012bd2:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80012bd4:	0000a597          	auipc	a1,0xa
    80012bd8:	39c58593          	add	a1,a1,924 # 8001cf70 <__func__.1+0x2c8>
    80012bdc:	0000a517          	auipc	a0,0xa
    80012be0:	44c50513          	add	a0,a0,1100 # 8001d028 <__func__.1+0x380>
    80012be4:	003080ef          	jal	8001b3e6 <printf>
    80012be8:	4511                	li	a0,4
    80012bea:	ef5ed0ef          	jal	80000ade <goto_priv>
    80012bee:	f38ee0ef          	jal	80001326 <reset_state>
}
    80012bf2:	60a2                	ld	ra,8(sp)
    80012bf4:	8522                	mv	a0,s0
    80012bf6:	6402                	ld	s0,0(sp)
    80012bf8:	0141                	add	sp,sp,16
    80012bfa:	8082                	ret
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80012bfc:	4401                	li	s0,0
    TEST_END();
    80012bfe:	0000a597          	auipc	a1,0xa
    80012c02:	38258593          	add	a1,a1,898 # 8001cf80 <__func__.1+0x2d8>
    80012c06:	bfd9                	j	80012bdc <store_page_fault_6+0xd6>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80012c08:	0000a517          	auipc	a0,0xa
    80012c0c:	3c050513          	add	a0,a0,960 # 8001cfc8 <__func__.1+0x320>
    80012c10:	7d6080ef          	jal	8001b3e6 <printf>
    80012c14:	02900513          	li	a0,41
    80012c18:	6a0070ef          	jal	8001a2b8 <putchar>
    80012c1c:	b76d                	j	80012bc6 <store_page_fault_6+0xc0>

0000000080012c1e <store_page_fault_7>:

bool store_page_fault_7(){
    80012c1e:	1101                	add	sp,sp,-32

    TEST_START();
    80012c20:	00009597          	auipc	a1,0x9
    80012c24:	74858593          	add	a1,a1,1864 # 8001c368 <__func__.7>
    80012c28:	0000a517          	auipc	a0,0xa
    80012c2c:	36850513          	add	a0,a0,872 # 8001cf90 <__func__.1+0x2e8>
bool store_page_fault_7(){
    80012c30:	ec06                	sd	ra,24(sp)
    80012c32:	e822                	sd	s0,16(sp)
    80012c34:	e426                	sd	s1,8(sp)
    TEST_START();
    80012c36:	7b0080ef          	jal	8001b3e6 <printf>
    80012c3a:	4529                	li	a0,10
    80012c3c:	67c070ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80012c40:	450d                	li	a0,3
    80012c42:	e9ded0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80012c46:	99bed0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80012c4a:	bdded0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80012c4e:	4509                	li	a0,2
    80012c50:	e8fed0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80012c54:	a61ed0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_M);
    80012c58:	4511                	li	a0,4
    80012c5a:	e85ed0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80012c5e:	000407b7          	lui	a5,0x40
    80012c62:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    80012c66:	450d                	li	a0,3
    80012c68:	e77ed0ef          	jal	80000ade <goto_priv>
    //执行sd指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80012c6c:	0ff0000f          	fence
    80012c70:	4785                	li	a5,1
    80012c72:	0002a417          	auipc	s0,0x2a
    80012c76:	39e40413          	add	s0,s0,926 # 8003d010 <excpt>
    80012c7a:	00f41023          	sh	a5,0(s0)
    80012c7e:	0002a797          	auipc	a5,0x2a
    80012c82:	3c07b523          	sd	zero,970(a5) # 8003d048 <excpt+0x38>
    80012c86:	0ff0000f          	fence
    80012c8a:	37ab77b7          	lui	a5,0x37ab7
    80012c8e:	00080737          	lui	a4,0x80
    80012c92:	078a                	sll	a5,a5,0x2
    80012c94:	0765                	add	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80012c96:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80012c9a:	0736                	sll	a4,a4,0xd
    80012c9c:	00f73023          	sd	a5,0(a4)
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    sd(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    80012ca0:	08200593          	li	a1,130
    80012ca4:	0000f617          	auipc	a2,0xf
    80012ca8:	e7c60613          	add	a2,a2,-388 # 80021b20 <__func__.1+0x4e78>
    80012cac:	0000a517          	auipc	a0,0xa
    80012cb0:	2fc50513          	add	a0,a0,764 # 8001cfa8 <__func__.1+0x300>
    80012cb4:	732080ef          	jal	8001b3e6 <printf>
    80012cb8:	00144783          	lbu	a5,1(s0)
    80012cbc:	0000a597          	auipc	a1,0xa
    80012cc0:	2c458593          	add	a1,a1,708 # 8001cf80 <__func__.1+0x2d8>
    80012cc4:	c789                	beqz	a5,80012cce <store_page_fault_7+0xb0>
    80012cc6:	6418                	ld	a4,8(s0)
    80012cc8:	47bd                	li	a5,15
    80012cca:	06f70e63          	beq	a4,a5,80012d46 <store_page_fault_7+0x128>
    80012cce:	0000a517          	auipc	a0,0xa
    80012cd2:	2f250513          	add	a0,a0,754 # 8001cfc0 <__func__.1+0x318>
    80012cd6:	710080ef          	jal	8001b3e6 <printf>
    80012cda:	00144783          	lbu	a5,1(s0)
    80012cde:	c789                	beqz	a5,80012ce8 <store_page_fault_7+0xca>
    80012ce0:	6418                	ld	a4,8(s0)
    80012ce2:	47bd                	li	a5,15
    80012ce4:	00f70c63          	beq	a4,a5,80012cfc <store_page_fault_7+0xde>
    80012ce8:	0000a517          	auipc	a0,0xa
    80012cec:	2e050513          	add	a0,a0,736 # 8001cfc8 <__func__.1+0x320>
    80012cf0:	6f6080ef          	jal	8001b3e6 <printf>
    80012cf4:	02900513          	li	a0,41
    80012cf8:	5c0070ef          	jal	8001a2b8 <putchar>
    80012cfc:	4529                	li	a0,10
    80012cfe:	5ba070ef          	jal	8001a2b8 <putchar>
    80012d02:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    80012d06:	0000a597          	auipc	a1,0xa
    80012d0a:	27a58593          	add	a1,a1,634 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    80012d0e:	c491                	beqz	s1,80012d1a <store_page_fault_7+0xfc>
    80012d10:	6418                	ld	a4,8(s0)
    80012d12:	47bd                	li	a5,15
    80012d14:	02f70463          	beq	a4,a5,80012d3c <store_page_fault_7+0x11e>
    80012d18:	4481                	li	s1,0
    TEST_END();
    80012d1a:	0000a517          	auipc	a0,0xa
    80012d1e:	30e50513          	add	a0,a0,782 # 8001d028 <__func__.1+0x380>
    80012d22:	6c4080ef          	jal	8001b3e6 <printf>
    80012d26:	4511                	li	a0,4
    80012d28:	db7ed0ef          	jal	80000ade <goto_priv>
    80012d2c:	dfaee0ef          	jal	80001326 <reset_state>
}
    80012d30:	60e2                	ld	ra,24(sp)
    80012d32:	6442                	ld	s0,16(sp)
    80012d34:	8526                	mv	a0,s1
    80012d36:	64a2                	ld	s1,8(sp)
    80012d38:	6105                	add	sp,sp,32
    80012d3a:	8082                	ret
    TEST_END();
    80012d3c:	0000a597          	auipc	a1,0xa
    80012d40:	23458593          	add	a1,a1,564 # 8001cf70 <__func__.1+0x2c8>
    80012d44:	bfd9                	j	80012d1a <store_page_fault_7+0xfc>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    80012d46:	0000a597          	auipc	a1,0xa
    80012d4a:	22a58593          	add	a1,a1,554 # 8001cf70 <__func__.1+0x2c8>
    80012d4e:	b741                	j	80012cce <store_page_fault_7+0xb0>

0000000080012d50 <store_page_fault_8>:

bool store_page_fault_8(){
    80012d50:	1141                	add	sp,sp,-16

    TEST_START();
    80012d52:	00009597          	auipc	a1,0x9
    80012d56:	62e58593          	add	a1,a1,1582 # 8001c380 <__func__.6>
    80012d5a:	0000a517          	auipc	a0,0xa
    80012d5e:	23650513          	add	a0,a0,566 # 8001cf90 <__func__.1+0x2e8>
bool store_page_fault_8(){
    80012d62:	e406                	sd	ra,8(sp)
    80012d64:	e022                	sd	s0,0(sp)
    TEST_START();
    80012d66:	680080ef          	jal	8001b3e6 <printf>
    80012d6a:	4529                	li	a0,10
    80012d6c:	54c070ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80012d70:	450d                	li	a0,3
    80012d72:	d6ded0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80012d76:	86bed0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80012d7a:	aaded0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80012d7e:	4509                	li	a0,2
    80012d80:	d5fed0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80012d84:	931ed0ef          	jal	800006b4 <vspt_init>


    //执行sd指令时，设置了bsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80012d88:	4511                	li	a0,4
    80012d8a:	d55ed0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    80012d8e:	000407b7          	lui	a5,0x40
    80012d92:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    80012d96:	450d                	li	a0,3
    80012d98:	d47ed0ef          	jal	80000ade <goto_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80012d9c:	0ff0000f          	fence
    80012da0:	4785                	li	a5,1
    80012da2:	0002a417          	auipc	s0,0x2a
    80012da6:	26e40413          	add	s0,s0,622 # 8003d010 <excpt>
    80012daa:	00f41023          	sh	a5,0(s0)
    80012dae:	0002a797          	auipc	a5,0x2a
    80012db2:	2807bd23          	sd	zero,666(a5) # 8003d048 <excpt+0x38>
    80012db6:	0ff0000f          	fence
    80012dba:	37ab77b7          	lui	a5,0x37ab7
    80012dbe:	00080737          	lui	a4,0x80
    80012dc2:	078a                	sll	a5,a5,0x2
    80012dc4:	0765                	add	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80012dc6:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80012dca:	0736                	sll	a4,a4,0xd
    80012dcc:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    80012dd0:	08200593          	li	a1,130
    80012dd4:	0000f617          	auipc	a2,0xf
    80012dd8:	d8460613          	add	a2,a2,-636 # 80021b58 <__func__.1+0x4eb0>
    80012ddc:	0000a517          	auipc	a0,0xa
    80012de0:	1cc50513          	add	a0,a0,460 # 8001cfa8 <__func__.1+0x300>
    80012de4:	602080ef          	jal	8001b3e6 <printf>
    80012de8:	00144783          	lbu	a5,1(s0)
    80012dec:	0000a597          	auipc	a1,0xa
    80012df0:	18458593          	add	a1,a1,388 # 8001cf70 <__func__.1+0x2c8>
    80012df4:	c789                	beqz	a5,80012dfe <store_page_fault_8+0xae>
    80012df6:	0000a597          	auipc	a1,0xa
    80012dfa:	18a58593          	add	a1,a1,394 # 8001cf80 <__func__.1+0x2d8>
    80012dfe:	0000a517          	auipc	a0,0xa
    80012e02:	1c250513          	add	a0,a0,450 # 8001cfc0 <__func__.1+0x318>
    80012e06:	5e0080ef          	jal	8001b3e6 <printf>
    80012e0a:	00144783          	lbu	a5,1(s0)
    80012e0e:	e3b1                	bnez	a5,80012e52 <store_page_fault_8+0x102>
    80012e10:	4529                	li	a0,10
    80012e12:	4a6070ef          	jal	8001a2b8 <putchar>
    80012e16:	00144783          	lbu	a5,1(s0)
    80012e1a:	e795                	bnez	a5,80012e46 <store_page_fault_8+0xf6>
    80012e1c:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80012e1e:	0000a597          	auipc	a1,0xa
    80012e22:	15258593          	add	a1,a1,338 # 8001cf70 <__func__.1+0x2c8>
    80012e26:	0000a517          	auipc	a0,0xa
    80012e2a:	20250513          	add	a0,a0,514 # 8001d028 <__func__.1+0x380>
    80012e2e:	5b8080ef          	jal	8001b3e6 <printf>
    80012e32:	4511                	li	a0,4
    80012e34:	cabed0ef          	jal	80000ade <goto_priv>
    80012e38:	ceeee0ef          	jal	80001326 <reset_state>
}
    80012e3c:	60a2                	ld	ra,8(sp)
    80012e3e:	8522                	mv	a0,s0
    80012e40:	6402                	ld	s0,0(sp)
    80012e42:	0141                	add	sp,sp,16
    80012e44:	8082                	ret
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    80012e46:	4401                	li	s0,0
    TEST_END();
    80012e48:	0000a597          	auipc	a1,0xa
    80012e4c:	13858593          	add	a1,a1,312 # 8001cf80 <__func__.1+0x2d8>
    80012e50:	bfd9                	j	80012e26 <store_page_fault_8+0xd6>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    80012e52:	0000a517          	auipc	a0,0xa
    80012e56:	17650513          	add	a0,a0,374 # 8001cfc8 <__func__.1+0x320>
    80012e5a:	58c080ef          	jal	8001b3e6 <printf>
    80012e5e:	02900513          	li	a0,41
    80012e62:	456070ef          	jal	8001a2b8 <putchar>
    80012e66:	b76d                	j	80012e10 <store_page_fault_8+0xc0>

0000000080012e68 <amo_page_fault_1>:





bool amo_page_fault_1(){
    80012e68:	1101                	add	sp,sp,-32

    TEST_START();
    80012e6a:	00009597          	auipc	a1,0x9
    80012e6e:	52e58593          	add	a1,a1,1326 # 8001c398 <__func__.5>
    80012e72:	0000a517          	auipc	a0,0xa
    80012e76:	11e50513          	add	a0,a0,286 # 8001cf90 <__func__.1+0x2e8>
bool amo_page_fault_1(){
    80012e7a:	ec06                	sd	ra,24(sp)
    80012e7c:	e822                	sd	s0,16(sp)
    80012e7e:	e426                	sd	s1,8(sp)
    80012e80:	e04a                	sd	s2,0(sp)
    TEST_START();
    80012e82:	564080ef          	jal	8001b3e6 <printf>
    80012e86:	4529                	li	a0,10
    80012e88:	430070ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80012e8c:	450d                	li	a0,3
    80012e8e:	c51ed0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80012e92:	f4eed0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80012e96:	991ed0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80012e9a:	4509                	li	a0,2
    80012e9c:	c43ed0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80012ea0:	815ed0ef          	jal	800006b4 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_HS);
    80012ea4:	450d                	li	a0,3
    80012ea6:	c39ed0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80012eaa:	4509                	li	a0,2
    80012eac:	b57ed0ef          	jal	80000a02 <set_prev_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80012eb0:	0ff0000f          	fence
    80012eb4:	4785                	li	a5,1
    80012eb6:	0002a417          	auipc	s0,0x2a
    80012eba:	15a40413          	add	s0,s0,346 # 8003d010 <excpt>
    80012ebe:	00f41023          	sh	a5,0(s0)
    80012ec2:	0002a797          	auipc	a5,0x2a
    80012ec6:	1807b323          	sd	zero,390(a5) # 8003d048 <excpt+0x38>
    80012eca:	0ff0000f          	fence
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80012ece:	deadc4b7          	lui	s1,0xdeadc
    80012ed2:	400197b7          	lui	a5,0x40019
    80012ed6:	eef4849b          	addw	s1,s1,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    80012eda:	078a                	sll	a5,a5,0x2
    80012edc:	0097a4af          	amoadd.w	s1,s1,(a5)

    addr = hs_page_base(VSI_GI);
    value = amoadd_w(addr,value);
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    80012ee0:	08200593          	li	a1,130
    80012ee4:	0000f617          	auipc	a2,0xf
    80012ee8:	cac60613          	add	a2,a2,-852 # 80021b90 <__func__.1+0x4ee8>
    80012eec:	0000a517          	auipc	a0,0xa
    80012ef0:	0bc50513          	add	a0,a0,188 # 8001cfa8 <__func__.1+0x300>
    80012ef4:	4f2080ef          	jal	8001b3e6 <printf>
    80012ef8:	00144783          	lbu	a5,1(s0)
    value = amoadd_w(addr,value);
    80012efc:	1482                	sll	s1,s1,0x20
    80012efe:	9081                	srl	s1,s1,0x20
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    80012f00:	0000a597          	auipc	a1,0xa
    80012f04:	08058593          	add	a1,a1,128 # 8001cf80 <__func__.1+0x2d8>
    80012f08:	c789                	beqz	a5,80012f12 <amo_page_fault_1+0xaa>
    80012f0a:	6418                	ld	a4,8(s0)
    80012f0c:	47bd                	li	a5,15
    80012f0e:	1ef70163          	beq	a4,a5,800130f0 <amo_page_fault_1+0x288>
    80012f12:	0000a517          	auipc	a0,0xa
    80012f16:	0ae50513          	add	a0,a0,174 # 8001cfc0 <__func__.1+0x318>
    80012f1a:	4cc080ef          	jal	8001b3e6 <printf>
    80012f1e:	00144783          	lbu	a5,1(s0)
    80012f22:	c789                	beqz	a5,80012f2c <amo_page_fault_1+0xc4>
    80012f24:	6418                	ld	a4,8(s0)
    80012f26:	47bd                	li	a5,15
    80012f28:	00f70c63          	beq	a4,a5,80012f40 <amo_page_fault_1+0xd8>
    80012f2c:	0000a517          	auipc	a0,0xa
    80012f30:	09c50513          	add	a0,a0,156 # 8001cfc8 <__func__.1+0x320>
    80012f34:	4b2080ef          	jal	8001b3e6 <printf>
    80012f38:	02900513          	li	a0,41
    80012f3c:	37c070ef          	jal	8001a2b8 <putchar>
    80012f40:	4529                	li	a0,10
    80012f42:	376070ef          	jal	8001a2b8 <putchar>
    80012f46:	00144783          	lbu	a5,1(s0)
    80012f4a:	4901                	li	s2,0
    80012f4c:	c791                	beqz	a5,80012f58 <amo_page_fault_1+0xf0>
    80012f4e:	00843903          	ld	s2,8(s0)
    80012f52:	1945                	add	s2,s2,-15
    80012f54:	00193913          	seqz	s2,s2
        excpt.cause == CAUSE_SPF
    );


    //执行amoand_d指令时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    TEST_SETUP_EXCEPT();
    80012f58:	0ff0000f          	fence
    80012f5c:	4785                	li	a5,1
    80012f5e:	00f41023          	sh	a5,0(s0)
    80012f62:	0002a797          	auipc	a5,0x2a
    80012f66:	0e07b323          	sd	zero,230(a5) # 8003d048 <excpt+0x38>
    80012f6a:	0ff0000f          	fence
    addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80012f6e:	000807b7          	lui	a5,0x80
    80012f72:	1007b073          	csrc	sstatus,a5
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    80012f76:	001007b7          	lui	a5,0x100
    80012f7a:	05f78793          	add	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    80012f7e:	07b2                	sll	a5,a5,0xc
    80012f80:	6097b4af          	amoand.d	s1,s1,(a5)
    value = amoand_d(addr,value);
    TEST_ASSERT("hs mode execute amoand_d when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80012f84:	08200593          	li	a1,130
    80012f88:	0000f617          	auipc	a2,0xf
    80012f8c:	c4060613          	add	a2,a2,-960 # 80021bc8 <__func__.1+0x4f20>
    80012f90:	0000a517          	auipc	a0,0xa
    80012f94:	01850513          	add	a0,a0,24 # 8001cfa8 <__func__.1+0x300>
    80012f98:	44e080ef          	jal	8001b3e6 <printf>
    80012f9c:	00144783          	lbu	a5,1(s0)
    80012fa0:	0000a597          	auipc	a1,0xa
    80012fa4:	fe058593          	add	a1,a1,-32 # 8001cf80 <__func__.1+0x2d8>
    80012fa8:	c789                	beqz	a5,80012fb2 <amo_page_fault_1+0x14a>
    80012faa:	6418                	ld	a4,8(s0)
    80012fac:	47bd                	li	a5,15
    80012fae:	14f70663          	beq	a4,a5,800130fa <amo_page_fault_1+0x292>
    80012fb2:	0000a517          	auipc	a0,0xa
    80012fb6:	00e50513          	add	a0,a0,14 # 8001cfc0 <__func__.1+0x318>
    80012fba:	42c080ef          	jal	8001b3e6 <printf>
    80012fbe:	00144783          	lbu	a5,1(s0)
    80012fc2:	c789                	beqz	a5,80012fcc <amo_page_fault_1+0x164>
    80012fc4:	6418                	ld	a4,8(s0)
    80012fc6:	47bd                	li	a5,15
    80012fc8:	00f70c63          	beq	a4,a5,80012fe0 <amo_page_fault_1+0x178>
    80012fcc:	0000a517          	auipc	a0,0xa
    80012fd0:	ffc50513          	add	a0,a0,-4 # 8001cfc8 <__func__.1+0x320>
    80012fd4:	412080ef          	jal	8001b3e6 <printf>
    80012fd8:	02900513          	li	a0,41
    80012fdc:	2dc070ef          	jal	8001a2b8 <putchar>
    80012fe0:	4529                	li	a0,10
    80012fe2:	2d6070ef          	jal	8001a2b8 <putchar>
    80012fe6:	00090763          	beqz	s2,80012ff4 <amo_page_fault_1+0x18c>
    80012fea:	00144783          	lbu	a5,1(s0)
    80012fee:	4901                	li	s2,0
    80012ff0:	0e079563          	bnez	a5,800130da <amo_page_fault_1+0x272>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行amomax_d指令时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80012ff4:	0ff0000f          	fence
    80012ff8:	4785                	li	a5,1
    80012ffa:	00f41023          	sh	a5,0(s0)
    80012ffe:	0002a797          	auipc	a5,0x2a
    80013002:	0407b523          	sd	zero,74(a5) # 8003d048 <excpt+0x38>
    80013006:	0ff0000f          	fence
    addr = hs_page_base(VSV_GV);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    8001300a:	000807b7          	lui	a5,0x80
    8001300e:	1007a073          	csrs	sstatus,a5
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    80013012:	001007b7          	lui	a5,0x100
    80013016:	07f5                	add	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    80013018:	07b2                	sll	a5,a5,0xc
    8001301a:	a097b4af          	amomax.d	s1,s1,(a5)
    value = amomax_d(addr,value);
    TEST_ASSERT("hs mode execute amomax_d when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001301e:	08200593          	li	a1,130
    80013022:	0000f617          	auipc	a2,0xf
    80013026:	bee60613          	add	a2,a2,-1042 # 80021c10 <__func__.1+0x4f68>
    8001302a:	0000a517          	auipc	a0,0xa
    8001302e:	f7e50513          	add	a0,a0,-130 # 8001cfa8 <__func__.1+0x300>
    80013032:	3b4080ef          	jal	8001b3e6 <printf>
    80013036:	00144783          	lbu	a5,1(s0)
    8001303a:	0000a597          	auipc	a1,0xa
    8001303e:	f4658593          	add	a1,a1,-186 # 8001cf80 <__func__.1+0x2d8>
    80013042:	c789                	beqz	a5,8001304c <amo_page_fault_1+0x1e4>
    80013044:	6418                	ld	a4,8(s0)
    80013046:	47bd                	li	a5,15
    80013048:	08f70f63          	beq	a4,a5,800130e6 <amo_page_fault_1+0x27e>
    8001304c:	0000a517          	auipc	a0,0xa
    80013050:	f7450513          	add	a0,a0,-140 # 8001cfc0 <__func__.1+0x318>
    80013054:	392080ef          	jal	8001b3e6 <printf>
    80013058:	00144783          	lbu	a5,1(s0)
    8001305c:	c789                	beqz	a5,80013066 <amo_page_fault_1+0x1fe>
    8001305e:	6418                	ld	a4,8(s0)
    80013060:	47bd                	li	a5,15
    80013062:	00f70c63          	beq	a4,a5,8001307a <amo_page_fault_1+0x212>
    80013066:	0000a517          	auipc	a0,0xa
    8001306a:	f6250513          	add	a0,a0,-158 # 8001cfc8 <__func__.1+0x320>
    8001306e:	378080ef          	jal	8001b3e6 <printf>
    80013072:	02900513          	li	a0,41
    80013076:	242070ef          	jal	8001a2b8 <putchar>
    8001307a:	4529                	li	a0,10
    8001307c:	23c070ef          	jal	8001a2b8 <putchar>
    80013080:	00090563          	beqz	s2,8001308a <amo_page_fault_1+0x222>
    80013084:	00144483          	lbu	s1,1(s0)
    80013088:	ec85                	bnez	s1,800130c0 <amo_page_fault_1+0x258>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001308a:	000807b7          	lui	a5,0x80
    8001308e:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs mode execute amomax_d when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80013092:	4481                	li	s1,0

    TEST_END();
    80013094:	0000a597          	auipc	a1,0xa
    80013098:	eec58593          	add	a1,a1,-276 # 8001cf80 <__func__.1+0x2d8>
    8001309c:	0000a517          	auipc	a0,0xa
    800130a0:	f8c50513          	add	a0,a0,-116 # 8001d028 <__func__.1+0x380>
    800130a4:	342080ef          	jal	8001b3e6 <printf>
    800130a8:	4511                	li	a0,4
    800130aa:	a35ed0ef          	jal	80000ade <goto_priv>
    800130ae:	a78ee0ef          	jal	80001326 <reset_state>
}
    800130b2:	60e2                	ld	ra,24(sp)
    800130b4:	6442                	ld	s0,16(sp)
    800130b6:	6902                	ld	s2,0(sp)
    800130b8:	8526                	mv	a0,s1
    800130ba:	64a2                	ld	s1,8(sp)
    800130bc:	6105                	add	sp,sp,32
    800130be:	8082                	ret
    TEST_ASSERT("hs mode execute amomax_d when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800130c0:	6418                	ld	a4,8(s0)
    800130c2:	47bd                	li	a5,15
    800130c4:	fcf713e3          	bne	a4,a5,8001308a <amo_page_fault_1+0x222>
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800130c8:	000807b7          	lui	a5,0x80
    800130cc:	1007b073          	csrc	sstatus,a5
    TEST_END();
    800130d0:	0000a597          	auipc	a1,0xa
    800130d4:	ea058593          	add	a1,a1,-352 # 8001cf70 <__func__.1+0x2c8>
    800130d8:	b7d1                	j	8001309c <amo_page_fault_1+0x234>
    TEST_ASSERT("hs mode execute amoand_d when sstatus.mxr=0 and pte.r=0 leads to LPF",
    800130da:	00843903          	ld	s2,8(s0)
    800130de:	1945                	add	s2,s2,-15
    800130e0:	00193913          	seqz	s2,s2
    800130e4:	bf01                	j	80012ff4 <amo_page_fault_1+0x18c>
    TEST_ASSERT("hs mode execute amomax_d when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800130e6:	0000a597          	auipc	a1,0xa
    800130ea:	e8a58593          	add	a1,a1,-374 # 8001cf70 <__func__.1+0x2c8>
    800130ee:	bfb9                	j	8001304c <amo_page_fault_1+0x1e4>
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    800130f0:	0000a597          	auipc	a1,0xa
    800130f4:	e8058593          	add	a1,a1,-384 # 8001cf70 <__func__.1+0x2c8>
    800130f8:	bd29                	j	80012f12 <amo_page_fault_1+0xaa>
    TEST_ASSERT("hs mode execute amoand_d when sstatus.mxr=0 and pte.r=0 leads to LPF",
    800130fa:	0000a597          	auipc	a1,0xa
    800130fe:	e7658593          	add	a1,a1,-394 # 8001cf70 <__func__.1+0x2c8>
    80013102:	bd45                	j	80012fb2 <amo_page_fault_1+0x14a>

0000000080013104 <amo_page_fault_2>:

bool amo_page_fault_2(){
    80013104:	1101                	add	sp,sp,-32

    TEST_START();
    80013106:	00009597          	auipc	a1,0x9
    8001310a:	2aa58593          	add	a1,a1,682 # 8001c3b0 <__func__.4>
    8001310e:	0000a517          	auipc	a0,0xa
    80013112:	e8250513          	add	a0,a0,-382 # 8001cf90 <__func__.1+0x2e8>
bool amo_page_fault_2(){
    80013116:	ec06                	sd	ra,24(sp)
    80013118:	e822                	sd	s0,16(sp)
    8001311a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001311c:	2ca080ef          	jal	8001b3e6 <printf>
    80013120:	4529                	li	a0,10
    80013122:	196070ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80013126:	450d                	li	a0,3
    80013128:	9b7ed0ef          	jal	80000ade <goto_priv>
    hspt_init();
    8001312c:	cb4ed0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80013130:	ef6ed0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80013134:	4509                	li	a0,2
    80013136:	9a9ed0ef          	jal	80000ade <goto_priv>
    vspt_init();
    8001313a:	d7aed0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_M);
    8001313e:	4511                	li	a0,4
    80013140:	99fed0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80013144:	000407b7          	lui	a5,0x40
    80013148:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    8001314c:	450d                	li	a0,3
    8001314e:	991ed0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);    
    80013152:	4509                	li	a0,2
    80013154:	8afed0ef          	jal	80000a02 <set_prev_priv>
    //执行amomin_d指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项(sstatus配置不进去，需要配置mstatus)
    TEST_SETUP_EXCEPT();
    80013158:	0ff0000f          	fence
    8001315c:	4785                	li	a5,1
    8001315e:	0002a417          	auipc	s0,0x2a
    80013162:	eb240413          	add	s0,s0,-334 # 8003d010 <excpt>
    80013166:	00f41023          	sh	a5,0(s0)
    8001316a:	0002a797          	auipc	a5,0x2a
    8001316e:	ec07bf23          	sd	zero,-290(a5) # 8003d048 <excpt+0x38>
    80013172:	0ff0000f          	fence
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    80013176:	000807b7          	lui	a5,0x80
    8001317a:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001317c:	4701                	li	a4,0
    8001317e:	07b6                	sll	a5,a5,0xd
    80013180:	80e7b72f          	amomin.d	a4,a4,(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);


    uint64_t value = amomin_d(addr,value);
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    80013184:	08200593          	li	a1,130
    80013188:	0000f617          	auipc	a2,0xf
    8001318c:	ae060613          	add	a2,a2,-1312 # 80021c68 <__func__.1+0x4fc0>
    80013190:	0000a517          	auipc	a0,0xa
    80013194:	e1850513          	add	a0,a0,-488 # 8001cfa8 <__func__.1+0x300>
    80013198:	24e080ef          	jal	8001b3e6 <printf>
    8001319c:	00144783          	lbu	a5,1(s0)
    800131a0:	0000a597          	auipc	a1,0xa
    800131a4:	de058593          	add	a1,a1,-544 # 8001cf80 <__func__.1+0x2d8>
    800131a8:	c789                	beqz	a5,800131b2 <amo_page_fault_2+0xae>
    800131aa:	6418                	ld	a4,8(s0)
    800131ac:	47bd                	li	a5,15
    800131ae:	06f70e63          	beq	a4,a5,8001322a <amo_page_fault_2+0x126>
    800131b2:	0000a517          	auipc	a0,0xa
    800131b6:	e0e50513          	add	a0,a0,-498 # 8001cfc0 <__func__.1+0x318>
    800131ba:	22c080ef          	jal	8001b3e6 <printf>
    800131be:	00144783          	lbu	a5,1(s0)
    800131c2:	c789                	beqz	a5,800131cc <amo_page_fault_2+0xc8>
    800131c4:	6418                	ld	a4,8(s0)
    800131c6:	47bd                	li	a5,15
    800131c8:	00f70c63          	beq	a4,a5,800131e0 <amo_page_fault_2+0xdc>
    800131cc:	0000a517          	auipc	a0,0xa
    800131d0:	dfc50513          	add	a0,a0,-516 # 8001cfc8 <__func__.1+0x320>
    800131d4:	212080ef          	jal	8001b3e6 <printf>
    800131d8:	02900513          	li	a0,41
    800131dc:	0dc070ef          	jal	8001a2b8 <putchar>
    800131e0:	4529                	li	a0,10
    800131e2:	0d6070ef          	jal	8001a2b8 <putchar>
    800131e6:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    800131ea:	0000a597          	auipc	a1,0xa
    800131ee:	d9658593          	add	a1,a1,-618 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    800131f2:	c491                	beqz	s1,800131fe <amo_page_fault_2+0xfa>
    800131f4:	6418                	ld	a4,8(s0)
    800131f6:	47bd                	li	a5,15
    800131f8:	02f70463          	beq	a4,a5,80013220 <amo_page_fault_2+0x11c>
    800131fc:	4481                	li	s1,0
    TEST_END();
    800131fe:	0000a517          	auipc	a0,0xa
    80013202:	e2a50513          	add	a0,a0,-470 # 8001d028 <__func__.1+0x380>
    80013206:	1e0080ef          	jal	8001b3e6 <printf>
    8001320a:	4511                	li	a0,4
    8001320c:	8d3ed0ef          	jal	80000ade <goto_priv>
    80013210:	916ee0ef          	jal	80001326 <reset_state>
}
    80013214:	60e2                	ld	ra,24(sp)
    80013216:	6442                	ld	s0,16(sp)
    80013218:	8526                	mv	a0,s1
    8001321a:	64a2                	ld	s1,8(sp)
    8001321c:	6105                	add	sp,sp,32
    8001321e:	8082                	ret
    TEST_END();
    80013220:	0000a597          	auipc	a1,0xa
    80013224:	d5058593          	add	a1,a1,-688 # 8001cf70 <__func__.1+0x2c8>
    80013228:	bfd9                	j	800131fe <amo_page_fault_2+0xfa>
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    8001322a:	0000a597          	auipc	a1,0xa
    8001322e:	d4658593          	add	a1,a1,-698 # 8001cf70 <__func__.1+0x2c8>
    80013232:	b741                	j	800131b2 <amo_page_fault_2+0xae>

0000000080013234 <amo_page_fault_3>:

bool amo_page_fault_3(){
    80013234:	1141                	add	sp,sp,-16

    TEST_START();
    80013236:	00009597          	auipc	a1,0x9
    8001323a:	19258593          	add	a1,a1,402 # 8001c3c8 <__func__.3>
    8001323e:	0000a517          	auipc	a0,0xa
    80013242:	d5250513          	add	a0,a0,-686 # 8001cf90 <__func__.1+0x2e8>
bool amo_page_fault_3(){
    80013246:	e406                	sd	ra,8(sp)
    80013248:	e022                	sd	s0,0(sp)
    TEST_START();
    8001324a:	19c080ef          	jal	8001b3e6 <printf>
    8001324e:	4529                	li	a0,10
    80013250:	068070ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80013254:	450d                	li	a0,3
    80013256:	889ed0ef          	jal	80000ade <goto_priv>
    hspt_init();
    8001325a:	b86ed0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001325e:	dc8ed0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80013262:	4509                	li	a0,2
    80013264:	87bed0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80013268:	c4ced0ef          	jal	800006b4 <vspt_init>

 

    //执行amoadd_w指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    8001326c:	4511                	li	a0,4
    8001326e:	871ed0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    80013272:	000407b7          	lui	a5,0x40
    80013276:	3007a073          	csrs	mstatus,a5

    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    goto_priv(PRIV_HS);
    8001327a:	450d                	li	a0,3
    8001327c:	863ed0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);   
    80013280:	4509                	li	a0,2
    80013282:	f80ed0ef          	jal	80000a02 <set_prev_priv>
    
    TEST_SETUP_EXCEPT();
    80013286:	0ff0000f          	fence
    8001328a:	4785                	li	a5,1
    8001328c:	0002a417          	auipc	s0,0x2a
    80013290:	d8440413          	add	s0,s0,-636 # 8003d010 <excpt>
    80013294:	00f41023          	sh	a5,0(s0)
    80013298:	0002a797          	auipc	a5,0x2a
    8001329c:	da07b823          	sd	zero,-592(a5) # 8003d048 <excpt+0x38>
    800132a0:	0ff0000f          	fence
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    800132a4:	000807b7          	lui	a5,0x80
    800132a8:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800132aa:	4701                	li	a4,0
    800132ac:	07b6                	sll	a5,a5,0xd
    800132ae:	00e7a72f          	amoadd.w	a4,a4,(a5)
    uint64_t value = amoadd_w(addr,value);
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    800132b2:	08200593          	li	a1,130
    800132b6:	0000f617          	auipc	a2,0xf
    800132ba:	9fa60613          	add	a2,a2,-1542 # 80021cb0 <__func__.1+0x5008>
    800132be:	0000a517          	auipc	a0,0xa
    800132c2:	cea50513          	add	a0,a0,-790 # 8001cfa8 <__func__.1+0x300>
    800132c6:	120080ef          	jal	8001b3e6 <printf>
    800132ca:	00144783          	lbu	a5,1(s0)
    800132ce:	0000a597          	auipc	a1,0xa
    800132d2:	ca258593          	add	a1,a1,-862 # 8001cf70 <__func__.1+0x2c8>
    800132d6:	c789                	beqz	a5,800132e0 <amo_page_fault_3+0xac>
    800132d8:	0000a597          	auipc	a1,0xa
    800132dc:	ca858593          	add	a1,a1,-856 # 8001cf80 <__func__.1+0x2d8>
    800132e0:	0000a517          	auipc	a0,0xa
    800132e4:	ce050513          	add	a0,a0,-800 # 8001cfc0 <__func__.1+0x318>
    800132e8:	0fe080ef          	jal	8001b3e6 <printf>
    800132ec:	00144783          	lbu	a5,1(s0)
    800132f0:	e3b1                	bnez	a5,80013334 <amo_page_fault_3+0x100>
    800132f2:	4529                	li	a0,10
    800132f4:	7c5060ef          	jal	8001a2b8 <putchar>
    800132f8:	00144783          	lbu	a5,1(s0)
    800132fc:	e795                	bnez	a5,80013328 <amo_page_fault_3+0xf4>
    800132fe:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80013300:	0000a597          	auipc	a1,0xa
    80013304:	c7058593          	add	a1,a1,-912 # 8001cf70 <__func__.1+0x2c8>
    80013308:	0000a517          	auipc	a0,0xa
    8001330c:	d2050513          	add	a0,a0,-736 # 8001d028 <__func__.1+0x380>
    80013310:	0d6080ef          	jal	8001b3e6 <printf>
    80013314:	4511                	li	a0,4
    80013316:	fc8ed0ef          	jal	80000ade <goto_priv>
    8001331a:	80cee0ef          	jal	80001326 <reset_state>
}
    8001331e:	60a2                	ld	ra,8(sp)
    80013320:	8522                	mv	a0,s0
    80013322:	6402                	ld	s0,0(sp)
    80013324:	0141                	add	sp,sp,16
    80013326:	8082                	ret
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    80013328:	4401                	li	s0,0
    TEST_END();
    8001332a:	0000a597          	auipc	a1,0xa
    8001332e:	c5658593          	add	a1,a1,-938 # 8001cf80 <__func__.1+0x2d8>
    80013332:	bfd9                	j	80013308 <amo_page_fault_3+0xd4>
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    80013334:	0000a517          	auipc	a0,0xa
    80013338:	c9450513          	add	a0,a0,-876 # 8001cfc8 <__func__.1+0x320>
    8001333c:	0aa080ef          	jal	8001b3e6 <printf>
    80013340:	02900513          	li	a0,41
    80013344:	775060ef          	jal	8001a2b8 <putchar>
    80013348:	b76d                	j	800132f2 <amo_page_fault_3+0xbe>

000000008001334a <amo_page_fault_4>:

bool amo_page_fault_4(){
    8001334a:	1101                	add	sp,sp,-32

    TEST_START();
    8001334c:	00009597          	auipc	a1,0x9
    80013350:	09458593          	add	a1,a1,148 # 8001c3e0 <__func__.2>
    80013354:	0000a517          	auipc	a0,0xa
    80013358:	c3c50513          	add	a0,a0,-964 # 8001cf90 <__func__.1+0x2e8>
bool amo_page_fault_4(){
    8001335c:	ec06                	sd	ra,24(sp)
    8001335e:	e822                	sd	s0,16(sp)
    80013360:	e426                	sd	s1,8(sp)
    80013362:	e04a                	sd	s2,0(sp)
    TEST_START();
    80013364:	082080ef          	jal	8001b3e6 <printf>
    80013368:	4529                	li	a0,10
    8001336a:	74f060ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    8001336e:	450d                	li	a0,3
    80013370:	f6eed0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80013374:	a6ced0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80013378:	caeed0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    8001337c:	4509                	li	a0,2
    8001337e:	f60ed0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80013382:	b32ed0ef          	jal	800006b4 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    80013386:	4509                	li	a0,2
    80013388:	f56ed0ef          	jal	80000ade <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    8001338c:	0ff0000f          	fence
    80013390:	4785                	li	a5,1
    80013392:	0002a417          	auipc	s0,0x2a
    80013396:	c7e40413          	add	s0,s0,-898 # 8003d010 <excpt>
    8001339a:	00f41023          	sh	a5,0(s0)
    8001339e:	0002a797          	auipc	a5,0x2a
    800133a2:	ca07b523          	sd	zero,-854(a5) # 8003d048 <excpt+0x38>
    800133a6:	0ff0000f          	fence
    800133aa:	deadc4b7          	lui	s1,0xdeadc
    800133ae:	400197b7          	lui	a5,0x40019
    800133b2:	eef4849b          	addw	s1,s1,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    800133b6:	078a                	sll	a5,a5,0x2
    800133b8:	0097a4af          	amoadd.w	s1,s1,(a5)

    addr = hs_page_base(VSI_GI);
    value = amoadd_w(addr,value);
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    800133bc:	08200593          	li	a1,130
    800133c0:	0000f617          	auipc	a2,0xf
    800133c4:	93860613          	add	a2,a2,-1736 # 80021cf8 <__func__.1+0x5050>
    800133c8:	0000a517          	auipc	a0,0xa
    800133cc:	be050513          	add	a0,a0,-1056 # 8001cfa8 <__func__.1+0x300>
    800133d0:	016080ef          	jal	8001b3e6 <printf>
    800133d4:	00144783          	lbu	a5,1(s0)
    value = amoadd_w(addr,value);
    800133d8:	1482                	sll	s1,s1,0x20
    800133da:	9081                	srl	s1,s1,0x20
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    800133dc:	0000a597          	auipc	a1,0xa
    800133e0:	ba458593          	add	a1,a1,-1116 # 8001cf80 <__func__.1+0x2d8>
    800133e4:	c789                	beqz	a5,800133ee <amo_page_fault_4+0xa4>
    800133e6:	6418                	ld	a4,8(s0)
    800133e8:	47bd                	li	a5,15
    800133ea:	1ef70163          	beq	a4,a5,800135cc <amo_page_fault_4+0x282>
    800133ee:	0000a517          	auipc	a0,0xa
    800133f2:	bd250513          	add	a0,a0,-1070 # 8001cfc0 <__func__.1+0x318>
    800133f6:	7f1070ef          	jal	8001b3e6 <printf>
    800133fa:	00144783          	lbu	a5,1(s0)
    800133fe:	c789                	beqz	a5,80013408 <amo_page_fault_4+0xbe>
    80013400:	6418                	ld	a4,8(s0)
    80013402:	47bd                	li	a5,15
    80013404:	00f70c63          	beq	a4,a5,8001341c <amo_page_fault_4+0xd2>
    80013408:	0000a517          	auipc	a0,0xa
    8001340c:	bc050513          	add	a0,a0,-1088 # 8001cfc8 <__func__.1+0x320>
    80013410:	7d7070ef          	jal	8001b3e6 <printf>
    80013414:	02900513          	li	a0,41
    80013418:	6a1060ef          	jal	8001a2b8 <putchar>
    8001341c:	4529                	li	a0,10
    8001341e:	69b060ef          	jal	8001a2b8 <putchar>
    80013422:	00144783          	lbu	a5,1(s0)
    80013426:	4901                	li	s2,0
    80013428:	c791                	beqz	a5,80013434 <amo_page_fault_4+0xea>
    8001342a:	00843903          	ld	s2,8(s0)
    8001342e:	1945                	add	s2,s2,-15
    80013430:	00193913          	seqz	s2,s2
        excpt.cause == CAUSE_SPF
    );


    //执行amoand_d指令时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    TEST_SETUP_EXCEPT();
    80013434:	0ff0000f          	fence
    80013438:	4785                	li	a5,1
    8001343a:	00f41023          	sh	a5,0(s0)
    8001343e:	0002a797          	auipc	a5,0x2a
    80013442:	c007b523          	sd	zero,-1014(a5) # 8003d048 <excpt+0x38>
    80013446:	0ff0000f          	fence
    addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001344a:	000807b7          	lui	a5,0x80
    8001344e:	1007b073          	csrc	sstatus,a5
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    80013452:	001007b7          	lui	a5,0x100
    80013456:	05f78793          	add	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    8001345a:	07b2                	sll	a5,a5,0xc
    8001345c:	6097b4af          	amoand.d	s1,s1,(a5)
    value = amoand_d(addr,value);
    TEST_ASSERT("vs mode execute amoand_d when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80013460:	08200593          	li	a1,130
    80013464:	0000f617          	auipc	a2,0xf
    80013468:	8cc60613          	add	a2,a2,-1844 # 80021d30 <__func__.1+0x5088>
    8001346c:	0000a517          	auipc	a0,0xa
    80013470:	b3c50513          	add	a0,a0,-1220 # 8001cfa8 <__func__.1+0x300>
    80013474:	773070ef          	jal	8001b3e6 <printf>
    80013478:	00144783          	lbu	a5,1(s0)
    8001347c:	0000a597          	auipc	a1,0xa
    80013480:	b0458593          	add	a1,a1,-1276 # 8001cf80 <__func__.1+0x2d8>
    80013484:	c789                	beqz	a5,8001348e <amo_page_fault_4+0x144>
    80013486:	6418                	ld	a4,8(s0)
    80013488:	47bd                	li	a5,15
    8001348a:	14f70663          	beq	a4,a5,800135d6 <amo_page_fault_4+0x28c>
    8001348e:	0000a517          	auipc	a0,0xa
    80013492:	b3250513          	add	a0,a0,-1230 # 8001cfc0 <__func__.1+0x318>
    80013496:	751070ef          	jal	8001b3e6 <printf>
    8001349a:	00144783          	lbu	a5,1(s0)
    8001349e:	c789                	beqz	a5,800134a8 <amo_page_fault_4+0x15e>
    800134a0:	6418                	ld	a4,8(s0)
    800134a2:	47bd                	li	a5,15
    800134a4:	00f70c63          	beq	a4,a5,800134bc <amo_page_fault_4+0x172>
    800134a8:	0000a517          	auipc	a0,0xa
    800134ac:	b2050513          	add	a0,a0,-1248 # 8001cfc8 <__func__.1+0x320>
    800134b0:	737070ef          	jal	8001b3e6 <printf>
    800134b4:	02900513          	li	a0,41
    800134b8:	601060ef          	jal	8001a2b8 <putchar>
    800134bc:	4529                	li	a0,10
    800134be:	5fb060ef          	jal	8001a2b8 <putchar>
    800134c2:	00090763          	beqz	s2,800134d0 <amo_page_fault_4+0x186>
    800134c6:	00144783          	lbu	a5,1(s0)
    800134ca:	4901                	li	s2,0
    800134cc:	0e079563          	bnez	a5,800135b6 <amo_page_fault_4+0x26c>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行amomax_d指令时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    800134d0:	0ff0000f          	fence
    800134d4:	4785                	li	a5,1
    800134d6:	00f41023          	sh	a5,0(s0)
    800134da:	0002a797          	auipc	a5,0x2a
    800134de:	b607b723          	sd	zero,-1170(a5) # 8003d048 <excpt+0x38>
    800134e2:	0ff0000f          	fence
    addr = hs_page_base(VSV_GV);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    800134e6:	000807b7          	lui	a5,0x80
    800134ea:	1007a073          	csrs	sstatus,a5
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    800134ee:	001007b7          	lui	a5,0x100
    800134f2:	07f5                	add	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    800134f4:	07b2                	sll	a5,a5,0xc
    800134f6:	a097b4af          	amomax.d	s1,s1,(a5)
    value = amomax_d(addr,value);
    TEST_ASSERT("vs mode execute amomax_d when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800134fa:	08200593          	li	a1,130
    800134fe:	0000f617          	auipc	a2,0xf
    80013502:	87a60613          	add	a2,a2,-1926 # 80021d78 <__func__.1+0x50d0>
    80013506:	0000a517          	auipc	a0,0xa
    8001350a:	aa250513          	add	a0,a0,-1374 # 8001cfa8 <__func__.1+0x300>
    8001350e:	6d9070ef          	jal	8001b3e6 <printf>
    80013512:	00144783          	lbu	a5,1(s0)
    80013516:	0000a597          	auipc	a1,0xa
    8001351a:	a6a58593          	add	a1,a1,-1430 # 8001cf80 <__func__.1+0x2d8>
    8001351e:	c789                	beqz	a5,80013528 <amo_page_fault_4+0x1de>
    80013520:	6418                	ld	a4,8(s0)
    80013522:	47bd                	li	a5,15
    80013524:	08f70f63          	beq	a4,a5,800135c2 <amo_page_fault_4+0x278>
    80013528:	0000a517          	auipc	a0,0xa
    8001352c:	a9850513          	add	a0,a0,-1384 # 8001cfc0 <__func__.1+0x318>
    80013530:	6b7070ef          	jal	8001b3e6 <printf>
    80013534:	00144783          	lbu	a5,1(s0)
    80013538:	c789                	beqz	a5,80013542 <amo_page_fault_4+0x1f8>
    8001353a:	6418                	ld	a4,8(s0)
    8001353c:	47bd                	li	a5,15
    8001353e:	00f70c63          	beq	a4,a5,80013556 <amo_page_fault_4+0x20c>
    80013542:	0000a517          	auipc	a0,0xa
    80013546:	a8650513          	add	a0,a0,-1402 # 8001cfc8 <__func__.1+0x320>
    8001354a:	69d070ef          	jal	8001b3e6 <printf>
    8001354e:	02900513          	li	a0,41
    80013552:	567060ef          	jal	8001a2b8 <putchar>
    80013556:	4529                	li	a0,10
    80013558:	561060ef          	jal	8001a2b8 <putchar>
    8001355c:	00090563          	beqz	s2,80013566 <amo_page_fault_4+0x21c>
    80013560:	00144483          	lbu	s1,1(s0)
    80013564:	ec85                	bnez	s1,8001359c <amo_page_fault_4+0x252>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80013566:	000807b7          	lui	a5,0x80
    8001356a:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("vs mode execute amomax_d when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001356e:	4481                	li	s1,0

    TEST_END();
    80013570:	0000a597          	auipc	a1,0xa
    80013574:	a1058593          	add	a1,a1,-1520 # 8001cf80 <__func__.1+0x2d8>
    80013578:	0000a517          	auipc	a0,0xa
    8001357c:	ab050513          	add	a0,a0,-1360 # 8001d028 <__func__.1+0x380>
    80013580:	667070ef          	jal	8001b3e6 <printf>
    80013584:	4511                	li	a0,4
    80013586:	d58ed0ef          	jal	80000ade <goto_priv>
    8001358a:	d9ded0ef          	jal	80001326 <reset_state>
}
    8001358e:	60e2                	ld	ra,24(sp)
    80013590:	6442                	ld	s0,16(sp)
    80013592:	6902                	ld	s2,0(sp)
    80013594:	8526                	mv	a0,s1
    80013596:	64a2                	ld	s1,8(sp)
    80013598:	6105                	add	sp,sp,32
    8001359a:	8082                	ret
    TEST_ASSERT("vs mode execute amomax_d when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001359c:	6418                	ld	a4,8(s0)
    8001359e:	47bd                	li	a5,15
    800135a0:	fcf713e3          	bne	a4,a5,80013566 <amo_page_fault_4+0x21c>
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800135a4:	000807b7          	lui	a5,0x80
    800135a8:	1007b073          	csrc	sstatus,a5
    TEST_END();
    800135ac:	0000a597          	auipc	a1,0xa
    800135b0:	9c458593          	add	a1,a1,-1596 # 8001cf70 <__func__.1+0x2c8>
    800135b4:	b7d1                	j	80013578 <amo_page_fault_4+0x22e>
    TEST_ASSERT("vs mode execute amoand_d when sstatus.mxr=0 and pte.r=0 leads to LPF",
    800135b6:	00843903          	ld	s2,8(s0)
    800135ba:	1945                	add	s2,s2,-15
    800135bc:	00193913          	seqz	s2,s2
    800135c0:	bf01                	j	800134d0 <amo_page_fault_4+0x186>
    TEST_ASSERT("vs mode execute amomax_d when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800135c2:	0000a597          	auipc	a1,0xa
    800135c6:	9ae58593          	add	a1,a1,-1618 # 8001cf70 <__func__.1+0x2c8>
    800135ca:	bfb9                	j	80013528 <amo_page_fault_4+0x1de>
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    800135cc:	0000a597          	auipc	a1,0xa
    800135d0:	9a458593          	add	a1,a1,-1628 # 8001cf70 <__func__.1+0x2c8>
    800135d4:	bd29                	j	800133ee <amo_page_fault_4+0xa4>
    TEST_ASSERT("vs mode execute amoand_d when sstatus.mxr=0 and pte.r=0 leads to LPF",
    800135d6:	0000a597          	auipc	a1,0xa
    800135da:	99a58593          	add	a1,a1,-1638 # 8001cf70 <__func__.1+0x2c8>
    800135de:	bd45                	j	8001348e <amo_page_fault_4+0x144>

00000000800135e0 <amo_page_fault_5>:

bool amo_page_fault_5(){
    800135e0:	1101                	add	sp,sp,-32

    TEST_START();
    800135e2:	00009597          	auipc	a1,0x9
    800135e6:	e1658593          	add	a1,a1,-490 # 8001c3f8 <__func__.1>
    800135ea:	0000a517          	auipc	a0,0xa
    800135ee:	9a650513          	add	a0,a0,-1626 # 8001cf90 <__func__.1+0x2e8>
bool amo_page_fault_5(){
    800135f2:	ec06                	sd	ra,24(sp)
    800135f4:	e822                	sd	s0,16(sp)
    800135f6:	e426                	sd	s1,8(sp)
    TEST_START();
    800135f8:	5ef070ef          	jal	8001b3e6 <printf>
    800135fc:	4529                	li	a0,10
    800135fe:	4bb060ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80013602:	450d                	li	a0,3
    80013604:	cdaed0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80013608:	fd9ec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001360c:	a1aed0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80013610:	4509                	li	a0,2
    80013612:	ccced0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80013616:	89eed0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_M);
    8001361a:	4511                	li	a0,4
    8001361c:	cc2ed0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80013620:	000407b7          	lui	a5,0x40
    80013624:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80013628:	4509                	li	a0,2
    8001362a:	cb4ed0ef          	jal	80000ade <goto_priv>
   
    //执行amomin_d指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项(sstatus配置不进去，需要配置mstatus)
    TEST_SETUP_EXCEPT();
    8001362e:	0ff0000f          	fence
    80013632:	4785                	li	a5,1
    80013634:	0002a417          	auipc	s0,0x2a
    80013638:	9dc40413          	add	s0,s0,-1572 # 8003d010 <excpt>
    8001363c:	00f41023          	sh	a5,0(s0)
    80013640:	0002a797          	auipc	a5,0x2a
    80013644:	a007b423          	sd	zero,-1528(a5) # 8003d048 <excpt+0x38>
    80013648:	0ff0000f          	fence
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    8001364c:	000807b7          	lui	a5,0x80
    80013650:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80013652:	4701                	li	a4,0
    80013654:	07b6                	sll	a5,a5,0xd
    80013656:	80e7b72f          	amomin.d	a4,a4,(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);


    uint64_t value = amomin_d(addr,value);
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    8001365a:	08200593          	li	a1,130
    8001365e:	0000e617          	auipc	a2,0xe
    80013662:	77260613          	add	a2,a2,1906 # 80021dd0 <__func__.1+0x5128>
    80013666:	0000a517          	auipc	a0,0xa
    8001366a:	94250513          	add	a0,a0,-1726 # 8001cfa8 <__func__.1+0x300>
    8001366e:	579070ef          	jal	8001b3e6 <printf>
    80013672:	00144783          	lbu	a5,1(s0)
    80013676:	0000a597          	auipc	a1,0xa
    8001367a:	90a58593          	add	a1,a1,-1782 # 8001cf80 <__func__.1+0x2d8>
    8001367e:	c789                	beqz	a5,80013688 <amo_page_fault_5+0xa8>
    80013680:	6418                	ld	a4,8(s0)
    80013682:	47bd                	li	a5,15
    80013684:	06f70e63          	beq	a4,a5,80013700 <amo_page_fault_5+0x120>
    80013688:	0000a517          	auipc	a0,0xa
    8001368c:	93850513          	add	a0,a0,-1736 # 8001cfc0 <__func__.1+0x318>
    80013690:	557070ef          	jal	8001b3e6 <printf>
    80013694:	00144783          	lbu	a5,1(s0)
    80013698:	c789                	beqz	a5,800136a2 <amo_page_fault_5+0xc2>
    8001369a:	6418                	ld	a4,8(s0)
    8001369c:	47bd                	li	a5,15
    8001369e:	00f70c63          	beq	a4,a5,800136b6 <amo_page_fault_5+0xd6>
    800136a2:	0000a517          	auipc	a0,0xa
    800136a6:	92650513          	add	a0,a0,-1754 # 8001cfc8 <__func__.1+0x320>
    800136aa:	53d070ef          	jal	8001b3e6 <printf>
    800136ae:	02900513          	li	a0,41
    800136b2:	407060ef          	jal	8001a2b8 <putchar>
    800136b6:	4529                	li	a0,10
    800136b8:	401060ef          	jal	8001a2b8 <putchar>
    800136bc:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    800136c0:	0000a597          	auipc	a1,0xa
    800136c4:	8c058593          	add	a1,a1,-1856 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    800136c8:	c491                	beqz	s1,800136d4 <amo_page_fault_5+0xf4>
    800136ca:	6418                	ld	a4,8(s0)
    800136cc:	47bd                	li	a5,15
    800136ce:	02f70463          	beq	a4,a5,800136f6 <amo_page_fault_5+0x116>
    800136d2:	4481                	li	s1,0
    TEST_END();
    800136d4:	0000a517          	auipc	a0,0xa
    800136d8:	95450513          	add	a0,a0,-1708 # 8001d028 <__func__.1+0x380>
    800136dc:	50b070ef          	jal	8001b3e6 <printf>
    800136e0:	4511                	li	a0,4
    800136e2:	bfced0ef          	jal	80000ade <goto_priv>
    800136e6:	c41ed0ef          	jal	80001326 <reset_state>
}
    800136ea:	60e2                	ld	ra,24(sp)
    800136ec:	6442                	ld	s0,16(sp)
    800136ee:	8526                	mv	a0,s1
    800136f0:	64a2                	ld	s1,8(sp)
    800136f2:	6105                	add	sp,sp,32
    800136f4:	8082                	ret
    TEST_END();
    800136f6:	0000a597          	auipc	a1,0xa
    800136fa:	87a58593          	add	a1,a1,-1926 # 8001cf70 <__func__.1+0x2c8>
    800136fe:	bfd9                	j	800136d4 <amo_page_fault_5+0xf4>
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    80013700:	0000a597          	auipc	a1,0xa
    80013704:	87058593          	add	a1,a1,-1936 # 8001cf70 <__func__.1+0x2c8>
    80013708:	b741                	j	80013688 <amo_page_fault_5+0xa8>

000000008001370a <amo_page_fault_6>:

bool amo_page_fault_6(){
    8001370a:	1141                	add	sp,sp,-16

    TEST_START();
    8001370c:	00009597          	auipc	a1,0x9
    80013710:	d0458593          	add	a1,a1,-764 # 8001c410 <__func__.0>
    80013714:	0000a517          	auipc	a0,0xa
    80013718:	87c50513          	add	a0,a0,-1924 # 8001cf90 <__func__.1+0x2e8>
bool amo_page_fault_6(){
    8001371c:	e406                	sd	ra,8(sp)
    8001371e:	e022                	sd	s0,0(sp)
    TEST_START();
    80013720:	4c7070ef          	jal	8001b3e6 <printf>
    80013724:	4529                	li	a0,10
    80013726:	393060ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    8001372a:	450d                	li	a0,3
    8001372c:	bb2ed0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80013730:	eb1ec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80013734:	8f2ed0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80013738:	4509                	li	a0,2
    8001373a:	ba4ed0ef          	jal	80000ade <goto_priv>
    vspt_init();
    8001373e:	f77ec0ef          	jal	800006b4 <vspt_init>

 

    //执行amoadd_w指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80013742:	4511                	li	a0,4
    80013744:	b9aed0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80013748:	000407b7          	lui	a5,0x40
    8001374c:	2007a073          	csrs	vsstatus,a5

    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    goto_priv(PRIV_VS);   
    80013750:	4509                	li	a0,2
    80013752:	b8ced0ef          	jal	80000ade <goto_priv>
    
    TEST_SETUP_EXCEPT();
    80013756:	0ff0000f          	fence
    8001375a:	4785                	li	a5,1
    8001375c:	0002a417          	auipc	s0,0x2a
    80013760:	8b440413          	add	s0,s0,-1868 # 8003d010 <excpt>
    80013764:	00f41023          	sh	a5,0(s0)
    80013768:	0002a797          	auipc	a5,0x2a
    8001376c:	8e07b023          	sd	zero,-1824(a5) # 8003d048 <excpt+0x38>
    80013770:	0ff0000f          	fence
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80013774:	000807b7          	lui	a5,0x80
    80013778:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001377a:	4701                	li	a4,0
    8001377c:	07b6                	sll	a5,a5,0xd
    8001377e:	00e7a72f          	amoadd.w	a4,a4,(a5)
    uint64_t value = amoadd_w(addr,value);
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    80013782:	08200593          	li	a1,130
    80013786:	0000e617          	auipc	a2,0xe
    8001378a:	69a60613          	add	a2,a2,1690 # 80021e20 <__func__.1+0x5178>
    8001378e:	0000a517          	auipc	a0,0xa
    80013792:	81a50513          	add	a0,a0,-2022 # 8001cfa8 <__func__.1+0x300>
    80013796:	451070ef          	jal	8001b3e6 <printf>
    8001379a:	00144783          	lbu	a5,1(s0)
    8001379e:	00009597          	auipc	a1,0x9
    800137a2:	7d258593          	add	a1,a1,2002 # 8001cf70 <__func__.1+0x2c8>
    800137a6:	c789                	beqz	a5,800137b0 <amo_page_fault_6+0xa6>
    800137a8:	00009597          	auipc	a1,0x9
    800137ac:	7d858593          	add	a1,a1,2008 # 8001cf80 <__func__.1+0x2d8>
    800137b0:	0000a517          	auipc	a0,0xa
    800137b4:	81050513          	add	a0,a0,-2032 # 8001cfc0 <__func__.1+0x318>
    800137b8:	42f070ef          	jal	8001b3e6 <printf>
    800137bc:	00144783          	lbu	a5,1(s0)
    800137c0:	e3b1                	bnez	a5,80013804 <amo_page_fault_6+0xfa>
    800137c2:	4529                	li	a0,10
    800137c4:	2f5060ef          	jal	8001a2b8 <putchar>
    800137c8:	00144783          	lbu	a5,1(s0)
    800137cc:	e795                	bnez	a5,800137f8 <amo_page_fault_6+0xee>
    800137ce:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    800137d0:	00009597          	auipc	a1,0x9
    800137d4:	7a058593          	add	a1,a1,1952 # 8001cf70 <__func__.1+0x2c8>
    800137d8:	0000a517          	auipc	a0,0xa
    800137dc:	85050513          	add	a0,a0,-1968 # 8001d028 <__func__.1+0x380>
    800137e0:	407070ef          	jal	8001b3e6 <printf>
    800137e4:	4511                	li	a0,4
    800137e6:	af8ed0ef          	jal	80000ade <goto_priv>
    800137ea:	b3ded0ef          	jal	80001326 <reset_state>
}
    800137ee:	60a2                	ld	ra,8(sp)
    800137f0:	8522                	mv	a0,s0
    800137f2:	6402                	ld	s0,0(sp)
    800137f4:	0141                	add	sp,sp,16
    800137f6:	8082                	ret
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    800137f8:	4401                	li	s0,0
    TEST_END();
    800137fa:	00009597          	auipc	a1,0x9
    800137fe:	78658593          	add	a1,a1,1926 # 8001cf80 <__func__.1+0x2d8>
    80013802:	bfd9                	j	800137d8 <amo_page_fault_6+0xce>
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    80013804:	00009517          	auipc	a0,0x9
    80013808:	7c450513          	add	a0,a0,1988 # 8001cfc8 <__func__.1+0x320>
    8001380c:	3db070ef          	jal	8001b3e6 <printf>
    80013810:	02900513          	li	a0,41
    80013814:	2a5060ef          	jal	8001a2b8 <putchar>
    80013818:	b76d                	j	800137c2 <amo_page_fault_6+0xb8>

000000008001381a <load_guest_page_fault_1>:
 #include <rvh_test.h>
#include <page_tables.h>

bool load_guest_page_fault_1(){
    8001381a:	1101                	add	sp,sp,-32

    TEST_START();
    8001381c:	00009597          	auipc	a1,0x9
    80013820:	c0c58593          	add	a1,a1,-1012 # 8001c428 <__func__.36>
    80013824:	00009517          	auipc	a0,0x9
    80013828:	76c50513          	add	a0,a0,1900 # 8001cf90 <__func__.1+0x2e8>
bool load_guest_page_fault_1(){
    8001382c:	ec06                	sd	ra,24(sp)
    8001382e:	e822                	sd	s0,16(sp)
    80013830:	e426                	sd	s1,8(sp)
    TEST_START();
    80013832:	3b5070ef          	jal	8001b3e6 <printf>
    80013836:	4529                	li	a0,10
    80013838:	281060ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    8001383c:	450d                	li	a0,3
    8001383e:	aa0ed0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80013842:	d9fec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80013846:	fe1ec0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    8001384a:	4509                	li	a0,2
    8001384c:	a92ed0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80013850:	e65ec0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80013854:	450d                	li	a0,3
    80013856:	a88ed0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    8001385a:	4509                	li	a0,2
    8001385c:	9a6ed0ef          	jal	80000a02 <set_prev_priv>

    //执行取指相关指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80013860:	0ff0000f          	fence
    80013864:	4785                	li	a5,1
    80013866:	00029417          	auipc	s0,0x29
    8001386a:	7aa40413          	add	s0,s0,1962 # 8003d010 <excpt>
    8001386e:	00f41023          	sh	a5,0(s0)
    80013872:	00029797          	auipc	a5,0x29
    80013876:	7c07bb23          	sd	zero,2006(a5) # 8003d048 <excpt+0x38>
    8001387a:	0ff0000f          	fence
    asm volatile(
    8001387e:	001007b7          	lui	a5,0x100
    80013882:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80013886:	07b2                	sll	a5,a5,0xc
    80013888:	6c07c7f3          	.4byte	0x6c07c7f3

    vaddr = hs_page_base(VSRWX_GI);
    hlvd(vaddr);
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    8001388c:	08200593          	li	a1,130
    80013890:	0000e617          	auipc	a2,0xe
    80013894:	5d860613          	add	a2,a2,1496 # 80021e68 <__func__.1+0x51c0>
    80013898:	00009517          	auipc	a0,0x9
    8001389c:	71050513          	add	a0,a0,1808 # 8001cfa8 <__func__.1+0x300>
    800138a0:	347070ef          	jal	8001b3e6 <printf>
    800138a4:	00144783          	lbu	a5,1(s0)
    800138a8:	00009597          	auipc	a1,0x9
    800138ac:	6d858593          	add	a1,a1,1752 # 8001cf80 <__func__.1+0x2d8>
    800138b0:	c789                	beqz	a5,800138ba <load_guest_page_fault_1+0xa0>
    800138b2:	6418                	ld	a4,8(s0)
    800138b4:	47d5                	li	a5,21
    800138b6:	12f70063          	beq	a4,a5,800139d6 <load_guest_page_fault_1+0x1bc>
    800138ba:	00009517          	auipc	a0,0x9
    800138be:	70650513          	add	a0,a0,1798 # 8001cfc0 <__func__.1+0x318>
    800138c2:	325070ef          	jal	8001b3e6 <printf>
    800138c6:	00144783          	lbu	a5,1(s0)
    800138ca:	c789                	beqz	a5,800138d4 <load_guest_page_fault_1+0xba>
    800138cc:	6418                	ld	a4,8(s0)
    800138ce:	47d5                	li	a5,21
    800138d0:	00f70c63          	beq	a4,a5,800138e8 <load_guest_page_fault_1+0xce>
    800138d4:	00009517          	auipc	a0,0x9
    800138d8:	6f450513          	add	a0,a0,1780 # 8001cfc8 <__func__.1+0x320>
    800138dc:	30b070ef          	jal	8001b3e6 <printf>
    800138e0:	02900513          	li	a0,41
    800138e4:	1d5060ef          	jal	8001a2b8 <putchar>
    800138e8:	4529                	li	a0,10
    800138ea:	1cf060ef          	jal	8001a2b8 <putchar>
    800138ee:	00144783          	lbu	a5,1(s0)
    800138f2:	4481                	li	s1,0
    800138f4:	c789                	beqz	a5,800138fe <load_guest_page_fault_1+0xe4>
    800138f6:	6404                	ld	s1,8(s0)
    800138f8:	14ad                	add	s1,s1,-21
    800138fa:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_LGPF
    );


    //执行hlvb指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    800138fe:	0ff0000f          	fence
    80013902:	4785                	li	a5,1
    80013904:	00f41023          	sh	a5,0(s0)
    80013908:	00029797          	auipc	a5,0x29
    8001390c:	7407b023          	sd	zero,1856(a5) # 8003d048 <excpt+0x38>
    80013910:	0ff0000f          	fence
    asm volatile(
    80013914:	001007b7          	lui	a5,0x100
    80013918:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8001391c:	07b2                	sll	a5,a5,0xc
    8001391e:	6007c7f3          	.4byte	0x6007c7f3
    vaddr = hs_page_base(VSRWX_GI);

    hlvb(vaddr);   
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    80013922:	08200593          	li	a1,130
    80013926:	0000e617          	auipc	a2,0xe
    8001392a:	59260613          	add	a2,a2,1426 # 80021eb8 <__func__.1+0x5210>
    8001392e:	00009517          	auipc	a0,0x9
    80013932:	67a50513          	add	a0,a0,1658 # 8001cfa8 <__func__.1+0x300>
    80013936:	2b1070ef          	jal	8001b3e6 <printf>
    8001393a:	00144783          	lbu	a5,1(s0)
    8001393e:	00009597          	auipc	a1,0x9
    80013942:	64258593          	add	a1,a1,1602 # 8001cf80 <__func__.1+0x2d8>
    80013946:	c789                	beqz	a5,80013950 <load_guest_page_fault_1+0x136>
    80013948:	6418                	ld	a4,8(s0)
    8001394a:	47d5                	li	a5,21
    8001394c:	08f70063          	beq	a4,a5,800139cc <load_guest_page_fault_1+0x1b2>
    80013950:	00009517          	auipc	a0,0x9
    80013954:	67050513          	add	a0,a0,1648 # 8001cfc0 <__func__.1+0x318>
    80013958:	28f070ef          	jal	8001b3e6 <printf>
    8001395c:	00144783          	lbu	a5,1(s0)
    80013960:	c789                	beqz	a5,8001396a <load_guest_page_fault_1+0x150>
    80013962:	6418                	ld	a4,8(s0)
    80013964:	47d5                	li	a5,21
    80013966:	00f70c63          	beq	a4,a5,8001397e <load_guest_page_fault_1+0x164>
    8001396a:	00009517          	auipc	a0,0x9
    8001396e:	65e50513          	add	a0,a0,1630 # 8001cfc8 <__func__.1+0x320>
    80013972:	275070ef          	jal	8001b3e6 <printf>
    80013976:	02900513          	li	a0,41
    8001397a:	13f060ef          	jal	8001a2b8 <putchar>
    8001397e:	4529                	li	a0,10
    80013980:	139060ef          	jal	8001a2b8 <putchar>
    80013984:	cc95                	beqz	s1,800139c0 <load_guest_page_fault_1+0x1a6>
    80013986:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    8001398a:	00009597          	auipc	a1,0x9
    8001398e:	5f658593          	add	a1,a1,1526 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    80013992:	c491                	beqz	s1,8001399e <load_guest_page_fault_1+0x184>
    80013994:	6418                	ld	a4,8(s0)
    80013996:	47d5                	li	a5,21
    80013998:	04f70463          	beq	a4,a5,800139e0 <load_guest_page_fault_1+0x1c6>
    8001399c:	4481                	li	s1,0
    TEST_END();
    8001399e:	00009517          	auipc	a0,0x9
    800139a2:	68a50513          	add	a0,a0,1674 # 8001d028 <__func__.1+0x380>
    800139a6:	241070ef          	jal	8001b3e6 <printf>
    800139aa:	4511                	li	a0,4
    800139ac:	932ed0ef          	jal	80000ade <goto_priv>
    800139b0:	977ed0ef          	jal	80001326 <reset_state>
}
    800139b4:	60e2                	ld	ra,24(sp)
    800139b6:	6442                	ld	s0,16(sp)
    800139b8:	8526                	mv	a0,s1
    800139ba:	64a2                	ld	s1,8(sp)
    800139bc:	6105                	add	sp,sp,32
    800139be:	8082                	ret
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    800139c0:	4481                	li	s1,0
    TEST_END();
    800139c2:	00009597          	auipc	a1,0x9
    800139c6:	5be58593          	add	a1,a1,1470 # 8001cf80 <__func__.1+0x2d8>
    800139ca:	bfd1                	j	8001399e <load_guest_page_fault_1+0x184>
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    800139cc:	00009597          	auipc	a1,0x9
    800139d0:	5a458593          	add	a1,a1,1444 # 8001cf70 <__func__.1+0x2c8>
    800139d4:	bfb5                	j	80013950 <load_guest_page_fault_1+0x136>
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    800139d6:	00009597          	auipc	a1,0x9
    800139da:	59a58593          	add	a1,a1,1434 # 8001cf70 <__func__.1+0x2c8>
    800139de:	bdf1                	j	800138ba <load_guest_page_fault_1+0xa0>
    TEST_END();
    800139e0:	00009597          	auipc	a1,0x9
    800139e4:	59058593          	add	a1,a1,1424 # 8001cf70 <__func__.1+0x2c8>
    800139e8:	bf5d                	j	8001399e <load_guest_page_fault_1+0x184>

00000000800139ea <load_guest_page_fault_2>:

bool load_guest_page_fault_2(){
    800139ea:	1101                	add	sp,sp,-32

    TEST_START();
    800139ec:	00009597          	auipc	a1,0x9
    800139f0:	a5458593          	add	a1,a1,-1452 # 8001c440 <__func__.34>
    800139f4:	00009517          	auipc	a0,0x9
    800139f8:	59c50513          	add	a0,a0,1436 # 8001cf90 <__func__.1+0x2e8>
bool load_guest_page_fault_2(){
    800139fc:	ec06                	sd	ra,24(sp)
    800139fe:	e822                	sd	s0,16(sp)
    80013a00:	e426                	sd	s1,8(sp)
    TEST_START();
    80013a02:	1e5070ef          	jal	8001b3e6 <printf>
    80013a06:	4529                	li	a0,10
    80013a08:	0b1060ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80013a0c:	450d                	li	a0,3
    80013a0e:	8d0ed0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80013a12:	bcfec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80013a16:	e11ec0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80013a1a:	4509                	li	a0,2
    80013a1c:	8c2ed0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80013a20:	c95ec0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80013a24:	450d                	li	a0,3
    80013a26:	8b8ed0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80013a2a:	4509                	li	a0,2
    80013a2c:	fd7ec0ef          	jal	80000a02 <set_prev_priv>

    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    80013a30:	0ff0000f          	fence
    80013a34:	4785                	li	a5,1
    80013a36:	00029417          	auipc	s0,0x29
    80013a3a:	5da40413          	add	s0,s0,1498 # 8003d010 <excpt>
    80013a3e:	00f41023          	sh	a5,0(s0)
    80013a42:	00029797          	auipc	a5,0x29
    80013a46:	6007b323          	sd	zero,1542(a5) # 8003d048 <excpt+0x38>
    80013a4a:	0ff0000f          	fence
    vaddr = hs_page_base(VSRWX_GI);


    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80013a4e:	000807b7          	lui	a5,0x80
    80013a52:	1007b073          	csrc	sstatus,a5
    asm volatile(
    80013a56:	001007b7          	lui	a5,0x100
    80013a5a:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80013a5e:	07b2                	sll	a5,a5,0xc
    80013a60:	6407c7f3          	.4byte	0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80013a64:	08200593          	li	a1,130
    80013a68:	0000e617          	auipc	a2,0xe
    80013a6c:	4b060613          	add	a2,a2,1200 # 80021f18 <__func__.1+0x5270>
    80013a70:	00009517          	auipc	a0,0x9
    80013a74:	53850513          	add	a0,a0,1336 # 8001cfa8 <__func__.1+0x300>
    80013a78:	16f070ef          	jal	8001b3e6 <printf>
    80013a7c:	00144783          	lbu	a5,1(s0)
    80013a80:	00009597          	auipc	a1,0x9
    80013a84:	50058593          	add	a1,a1,1280 # 8001cf80 <__func__.1+0x2d8>
    80013a88:	c789                	beqz	a5,80013a92 <load_guest_page_fault_2+0xa8>
    80013a8a:	6418                	ld	a4,8(s0)
    80013a8c:	47d5                	li	a5,21
    80013a8e:	06f70e63          	beq	a4,a5,80013b0a <load_guest_page_fault_2+0x120>
    80013a92:	00009517          	auipc	a0,0x9
    80013a96:	52e50513          	add	a0,a0,1326 # 8001cfc0 <__func__.1+0x318>
    80013a9a:	14d070ef          	jal	8001b3e6 <printf>
    80013a9e:	00144783          	lbu	a5,1(s0)
    80013aa2:	c789                	beqz	a5,80013aac <load_guest_page_fault_2+0xc2>
    80013aa4:	6418                	ld	a4,8(s0)
    80013aa6:	47d5                	li	a5,21
    80013aa8:	00f70c63          	beq	a4,a5,80013ac0 <load_guest_page_fault_2+0xd6>
    80013aac:	00009517          	auipc	a0,0x9
    80013ab0:	51c50513          	add	a0,a0,1308 # 8001cfc8 <__func__.1+0x320>
    80013ab4:	133070ef          	jal	8001b3e6 <printf>
    80013ab8:	02900513          	li	a0,41
    80013abc:	7fc060ef          	jal	8001a2b8 <putchar>
    80013ac0:	4529                	li	a0,10
    80013ac2:	7f6060ef          	jal	8001a2b8 <putchar>
    80013ac6:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80013aca:	00009597          	auipc	a1,0x9
    80013ace:	4b658593          	add	a1,a1,1206 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80013ad2:	c491                	beqz	s1,80013ade <load_guest_page_fault_2+0xf4>
    80013ad4:	6418                	ld	a4,8(s0)
    80013ad6:	47d5                	li	a5,21
    80013ad8:	02f70463          	beq	a4,a5,80013b00 <load_guest_page_fault_2+0x116>
    80013adc:	4481                	li	s1,0
    TEST_END();
    80013ade:	00009517          	auipc	a0,0x9
    80013ae2:	54a50513          	add	a0,a0,1354 # 8001d028 <__func__.1+0x380>
    80013ae6:	101070ef          	jal	8001b3e6 <printf>
    80013aea:	4511                	li	a0,4
    80013aec:	ff3ec0ef          	jal	80000ade <goto_priv>
    80013af0:	837ed0ef          	jal	80001326 <reset_state>
}
    80013af4:	60e2                	ld	ra,24(sp)
    80013af6:	6442                	ld	s0,16(sp)
    80013af8:	8526                	mv	a0,s1
    80013afa:	64a2                	ld	s1,8(sp)
    80013afc:	6105                	add	sp,sp,32
    80013afe:	8082                	ret
    TEST_END();
    80013b00:	00009597          	auipc	a1,0x9
    80013b04:	47058593          	add	a1,a1,1136 # 8001cf70 <__func__.1+0x2c8>
    80013b08:	bfd9                	j	80013ade <load_guest_page_fault_2+0xf4>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80013b0a:	00009597          	auipc	a1,0x9
    80013b0e:	46658593          	add	a1,a1,1126 # 8001cf70 <__func__.1+0x2c8>
    80013b12:	b741                	j	80013a92 <load_guest_page_fault_2+0xa8>

0000000080013b14 <load_guest_page_fault_3>:

bool load_guest_page_fault_3(){
    80013b14:	1101                	add	sp,sp,-32

    TEST_START();
    80013b16:	00009597          	auipc	a1,0x9
    80013b1a:	94258593          	add	a1,a1,-1726 # 8001c458 <__func__.33>
    80013b1e:	00009517          	auipc	a0,0x9
    80013b22:	47250513          	add	a0,a0,1138 # 8001cf90 <__func__.1+0x2e8>
bool load_guest_page_fault_3(){
    80013b26:	ec06                	sd	ra,24(sp)
    80013b28:	e822                	sd	s0,16(sp)
    80013b2a:	e426                	sd	s1,8(sp)
    TEST_START();
    80013b2c:	0bb070ef          	jal	8001b3e6 <printf>
    80013b30:	4529                	li	a0,10
    80013b32:	786060ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80013b36:	450d                	li	a0,3
    80013b38:	fa7ec0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80013b3c:	aa5ec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80013b40:	ce7ec0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80013b44:	4509                	li	a0,2
    80013b46:	f99ec0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80013b4a:	b6bec0ef          	jal	800006b4 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80013b4e:	450d                	li	a0,3
    80013b50:	f8fec0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80013b54:	4509                	li	a0,2
    80013b56:	eadec0ef          	jal	80000a02 <set_prev_priv>
    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80013b5a:	0ff0000f          	fence
    80013b5e:	4785                	li	a5,1
    80013b60:	00029417          	auipc	s0,0x29
    80013b64:	4b040413          	add	s0,s0,1200 # 8003d010 <excpt>
    80013b68:	00f41023          	sh	a5,0(s0)
    80013b6c:	00029797          	auipc	a5,0x29
    80013b70:	4c07be23          	sd	zero,1244(a5) # 8003d048 <excpt+0x38>
    80013b74:	0ff0000f          	fence
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80013b78:	000807b7          	lui	a5,0x80
    80013b7c:	1007a073          	csrs	sstatus,a5
    80013b80:	001007b7          	lui	a5,0x100
    80013b84:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80013b88:	07b2                	sll	a5,a5,0xc
    80013b8a:	6407c7f3          	.4byte	0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80013b8e:	08200593          	li	a1,130
    80013b92:	0000e617          	auipc	a2,0xe
    80013b96:	3e660613          	add	a2,a2,998 # 80021f78 <__func__.1+0x52d0>
    80013b9a:	00009517          	auipc	a0,0x9
    80013b9e:	40e50513          	add	a0,a0,1038 # 8001cfa8 <__func__.1+0x300>
    80013ba2:	045070ef          	jal	8001b3e6 <printf>
    80013ba6:	00144783          	lbu	a5,1(s0)
    80013baa:	00009597          	auipc	a1,0x9
    80013bae:	3d658593          	add	a1,a1,982 # 8001cf80 <__func__.1+0x2d8>
    80013bb2:	c789                	beqz	a5,80013bbc <load_guest_page_fault_3+0xa8>
    80013bb4:	6418                	ld	a4,8(s0)
    80013bb6:	47d5                	li	a5,21
    80013bb8:	06f70e63          	beq	a4,a5,80013c34 <load_guest_page_fault_3+0x120>
    80013bbc:	00009517          	auipc	a0,0x9
    80013bc0:	40450513          	add	a0,a0,1028 # 8001cfc0 <__func__.1+0x318>
    80013bc4:	023070ef          	jal	8001b3e6 <printf>
    80013bc8:	00144783          	lbu	a5,1(s0)
    80013bcc:	c789                	beqz	a5,80013bd6 <load_guest_page_fault_3+0xc2>
    80013bce:	6418                	ld	a4,8(s0)
    80013bd0:	47d5                	li	a5,21
    80013bd2:	00f70c63          	beq	a4,a5,80013bea <load_guest_page_fault_3+0xd6>
    80013bd6:	00009517          	auipc	a0,0x9
    80013bda:	3f250513          	add	a0,a0,1010 # 8001cfc8 <__func__.1+0x320>
    80013bde:	009070ef          	jal	8001b3e6 <printf>
    80013be2:	02900513          	li	a0,41
    80013be6:	6d2060ef          	jal	8001a2b8 <putchar>
    80013bea:	4529                	li	a0,10
    80013bec:	6cc060ef          	jal	8001a2b8 <putchar>
    80013bf0:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    80013bf4:	00009597          	auipc	a1,0x9
    80013bf8:	38c58593          	add	a1,a1,908 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80013bfc:	c491                	beqz	s1,80013c08 <load_guest_page_fault_3+0xf4>
    80013bfe:	6418                	ld	a4,8(s0)
    80013c00:	47d5                	li	a5,21
    80013c02:	02f70463          	beq	a4,a5,80013c2a <load_guest_page_fault_3+0x116>
    80013c06:	4481                	li	s1,0
    TEST_END();
    80013c08:	00009517          	auipc	a0,0x9
    80013c0c:	42050513          	add	a0,a0,1056 # 8001d028 <__func__.1+0x380>
    80013c10:	7d6070ef          	jal	8001b3e6 <printf>
    80013c14:	4511                	li	a0,4
    80013c16:	ec9ec0ef          	jal	80000ade <goto_priv>
    80013c1a:	f0ced0ef          	jal	80001326 <reset_state>
}
    80013c1e:	60e2                	ld	ra,24(sp)
    80013c20:	6442                	ld	s0,16(sp)
    80013c22:	8526                	mv	a0,s1
    80013c24:	64a2                	ld	s1,8(sp)
    80013c26:	6105                	add	sp,sp,32
    80013c28:	8082                	ret
    TEST_END();
    80013c2a:	00009597          	auipc	a1,0x9
    80013c2e:	34658593          	add	a1,a1,838 # 8001cf70 <__func__.1+0x2c8>
    80013c32:	bfd9                	j	80013c08 <load_guest_page_fault_3+0xf4>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80013c34:	00009597          	auipc	a1,0x9
    80013c38:	33c58593          	add	a1,a1,828 # 8001cf70 <__func__.1+0x2c8>
    80013c3c:	b741                	j	80013bbc <load_guest_page_fault_3+0xa8>

0000000080013c3e <load_guest_page_fault_4>:

bool load_guest_page_fault_4(){
    80013c3e:	1101                	add	sp,sp,-32

    TEST_START();
    80013c40:	00009597          	auipc	a1,0x9
    80013c44:	83058593          	add	a1,a1,-2000 # 8001c470 <__func__.32>
    80013c48:	00009517          	auipc	a0,0x9
    80013c4c:	34850513          	add	a0,a0,840 # 8001cf90 <__func__.1+0x2e8>
bool load_guest_page_fault_4(){
    80013c50:	ec06                	sd	ra,24(sp)
    80013c52:	e822                	sd	s0,16(sp)
    80013c54:	e426                	sd	s1,8(sp)
    TEST_START();
    80013c56:	790070ef          	jal	8001b3e6 <printf>
    80013c5a:	4529                	li	a0,10
    80013c5c:	65c060ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80013c60:	450d                	li	a0,3
    80013c62:	e7dec0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80013c66:	97bec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80013c6a:	bbdec0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80013c6e:	4509                	li	a0,2
    80013c70:	e6fec0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80013c74:	a41ec0ef          	jal	800006b4 <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    80013c78:	4511                	li	a0,4
    80013c7a:	e65ec0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80013c7e:	000407b7          	lui	a5,0x40
    80013c82:	2007b073          	csrc	vsstatus,a5
    

    goto_priv(PRIV_HS);
    80013c86:	450d                	li	a0,3
    80013c88:	e57ec0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80013c8c:	4509                	li	a0,2
    80013c8e:	d75ec0ef          	jal	80000a02 <set_prev_priv>
    //执行hlvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80013c92:	0ff0000f          	fence
    80013c96:	4785                	li	a5,1
    80013c98:	00029417          	auipc	s0,0x29
    80013c9c:	37840413          	add	s0,s0,888 # 8003d010 <excpt>
    80013ca0:	00f41023          	sh	a5,0(s0)
    80013ca4:	00029797          	auipc	a5,0x29
    80013ca8:	3a07b223          	sd	zero,932(a5) # 8003d048 <excpt+0x38>
    80013cac:	0ff0000f          	fence
    asm volatile(
    80013cb0:	000807b7          	lui	a5,0x80
    80013cb4:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80013cb6:	07b6                	sll	a5,a5,0xd
    80013cb8:	6007c7f3          	.4byte	0x6007c7f3
    vaddr = hs_page_base(VSURWX_GURWX);


    hlvb(vaddr);
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    80013cbc:	08200593          	li	a1,130
    80013cc0:	0000e617          	auipc	a2,0xe
    80013cc4:	32860613          	add	a2,a2,808 # 80021fe8 <__func__.1+0x5340>
    80013cc8:	00009517          	auipc	a0,0x9
    80013ccc:	2e050513          	add	a0,a0,736 # 8001cfa8 <__func__.1+0x300>
    80013cd0:	716070ef          	jal	8001b3e6 <printf>
    80013cd4:	00144783          	lbu	a5,1(s0)
    80013cd8:	00009597          	auipc	a1,0x9
    80013cdc:	2a858593          	add	a1,a1,680 # 8001cf80 <__func__.1+0x2d8>
    80013ce0:	c789                	beqz	a5,80013cea <load_guest_page_fault_4+0xac>
    80013ce2:	6418                	ld	a4,8(s0)
    80013ce4:	47b5                	li	a5,13
    80013ce6:	06f70e63          	beq	a4,a5,80013d62 <load_guest_page_fault_4+0x124>
    80013cea:	00009517          	auipc	a0,0x9
    80013cee:	2d650513          	add	a0,a0,726 # 8001cfc0 <__func__.1+0x318>
    80013cf2:	6f4070ef          	jal	8001b3e6 <printf>
    80013cf6:	00144783          	lbu	a5,1(s0)
    80013cfa:	c789                	beqz	a5,80013d04 <load_guest_page_fault_4+0xc6>
    80013cfc:	6418                	ld	a4,8(s0)
    80013cfe:	47b5                	li	a5,13
    80013d00:	00f70c63          	beq	a4,a5,80013d18 <load_guest_page_fault_4+0xda>
    80013d04:	00009517          	auipc	a0,0x9
    80013d08:	2c450513          	add	a0,a0,708 # 8001cfc8 <__func__.1+0x320>
    80013d0c:	6da070ef          	jal	8001b3e6 <printf>
    80013d10:	02900513          	li	a0,41
    80013d14:	5a4060ef          	jal	8001a2b8 <putchar>
    80013d18:	4529                	li	a0,10
    80013d1a:	59e060ef          	jal	8001a2b8 <putchar>
    80013d1e:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80013d22:	00009597          	auipc	a1,0x9
    80013d26:	25e58593          	add	a1,a1,606 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    80013d2a:	c491                	beqz	s1,80013d36 <load_guest_page_fault_4+0xf8>
    80013d2c:	6418                	ld	a4,8(s0)
    80013d2e:	47b5                	li	a5,13
    80013d30:	02f70463          	beq	a4,a5,80013d58 <load_guest_page_fault_4+0x11a>
    80013d34:	4481                	li	s1,0
    TEST_END();
    80013d36:	00009517          	auipc	a0,0x9
    80013d3a:	2f250513          	add	a0,a0,754 # 8001d028 <__func__.1+0x380>
    80013d3e:	6a8070ef          	jal	8001b3e6 <printf>
    80013d42:	4511                	li	a0,4
    80013d44:	d9bec0ef          	jal	80000ade <goto_priv>
    80013d48:	ddeed0ef          	jal	80001326 <reset_state>
}
    80013d4c:	60e2                	ld	ra,24(sp)
    80013d4e:	6442                	ld	s0,16(sp)
    80013d50:	8526                	mv	a0,s1
    80013d52:	64a2                	ld	s1,8(sp)
    80013d54:	6105                	add	sp,sp,32
    80013d56:	8082                	ret
    TEST_END();
    80013d58:	00009597          	auipc	a1,0x9
    80013d5c:	21858593          	add	a1,a1,536 # 8001cf70 <__func__.1+0x2c8>
    80013d60:	bfd9                	j	80013d36 <load_guest_page_fault_4+0xf8>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    80013d62:	00009597          	auipc	a1,0x9
    80013d66:	20e58593          	add	a1,a1,526 # 8001cf70 <__func__.1+0x2c8>
    80013d6a:	b741                	j	80013cea <load_guest_page_fault_4+0xac>

0000000080013d6c <load_guest_page_fault_5>:

bool load_guest_page_fault_5(){
    80013d6c:	1141                	add	sp,sp,-16

    TEST_START();
    80013d6e:	00008597          	auipc	a1,0x8
    80013d72:	71a58593          	add	a1,a1,1818 # 8001c488 <__func__.31>
    80013d76:	00009517          	auipc	a0,0x9
    80013d7a:	21a50513          	add	a0,a0,538 # 8001cf90 <__func__.1+0x2e8>
bool load_guest_page_fault_5(){
    80013d7e:	e406                	sd	ra,8(sp)
    80013d80:	e022                	sd	s0,0(sp)
    TEST_START();
    80013d82:	664070ef          	jal	8001b3e6 <printf>
    80013d86:	4529                	li	a0,10
    80013d88:	530060ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80013d8c:	450d                	li	a0,3
    80013d8e:	d51ec0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80013d92:	84fec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80013d96:	a91ec0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80013d9a:	4509                	li	a0,2
    80013d9c:	d43ec0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80013da0:	915ec0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80013da4:	4511                	li	a0,4
    80013da6:	d39ec0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80013daa:	000407b7          	lui	a5,0x40
    80013dae:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    80013db2:	450d                	li	a0,3
    80013db4:	d2bec0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80013db8:	4509                	li	a0,2
    80013dba:	c49ec0ef          	jal	80000a02 <set_prev_priv>

    //执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80013dbe:	0ff0000f          	fence
    80013dc2:	4785                	li	a5,1
    80013dc4:	00029417          	auipc	s0,0x29
    80013dc8:	24c40413          	add	s0,s0,588 # 8003d010 <excpt>
    80013dcc:	00f41023          	sh	a5,0(s0)
    80013dd0:	00029797          	auipc	a5,0x29
    80013dd4:	2607bc23          	sd	zero,632(a5) # 8003d048 <excpt+0x38>
    80013dd8:	0ff0000f          	fence
    80013ddc:	000807b7          	lui	a5,0x80
    80013de0:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80013de2:	07b6                	sll	a5,a5,0xd
    80013de4:	6007c7f3          	.4byte	0x6007c7f3
    hlvb(vaddr);
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80013de8:	08200593          	li	a1,130
    80013dec:	0000e617          	auipc	a2,0xe
    80013df0:	92c60613          	add	a2,a2,-1748 # 80021718 <__func__.1+0x4a70>
    80013df4:	00009517          	auipc	a0,0x9
    80013df8:	1b450513          	add	a0,a0,436 # 8001cfa8 <__func__.1+0x300>
    80013dfc:	5ea070ef          	jal	8001b3e6 <printf>
    80013e00:	00144783          	lbu	a5,1(s0)
    80013e04:	00009597          	auipc	a1,0x9
    80013e08:	16c58593          	add	a1,a1,364 # 8001cf70 <__func__.1+0x2c8>
    80013e0c:	c789                	beqz	a5,80013e16 <load_guest_page_fault_5+0xaa>
    80013e0e:	00009597          	auipc	a1,0x9
    80013e12:	17258593          	add	a1,a1,370 # 8001cf80 <__func__.1+0x2d8>
    80013e16:	00009517          	auipc	a0,0x9
    80013e1a:	1aa50513          	add	a0,a0,426 # 8001cfc0 <__func__.1+0x318>
    80013e1e:	5c8070ef          	jal	8001b3e6 <printf>
    80013e22:	00144783          	lbu	a5,1(s0)
    80013e26:	e3b1                	bnez	a5,80013e6a <load_guest_page_fault_5+0xfe>
    80013e28:	4529                	li	a0,10
    80013e2a:	48e060ef          	jal	8001a2b8 <putchar>
    80013e2e:	00144783          	lbu	a5,1(s0)
    80013e32:	e795                	bnez	a5,80013e5e <load_guest_page_fault_5+0xf2>
    80013e34:	4405                	li	s0,1
    );

    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80013e36:	00009597          	auipc	a1,0x9
    80013e3a:	13a58593          	add	a1,a1,314 # 8001cf70 <__func__.1+0x2c8>
    80013e3e:	00009517          	auipc	a0,0x9
    80013e42:	1ea50513          	add	a0,a0,490 # 8001d028 <__func__.1+0x380>
    80013e46:	5a0070ef          	jal	8001b3e6 <printf>
    80013e4a:	4511                	li	a0,4
    80013e4c:	c93ec0ef          	jal	80000ade <goto_priv>
    80013e50:	cd6ed0ef          	jal	80001326 <reset_state>
}
    80013e54:	60a2                	ld	ra,8(sp)
    80013e56:	8522                	mv	a0,s0
    80013e58:	6402                	ld	s0,0(sp)
    80013e5a:	0141                	add	sp,sp,16
    80013e5c:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80013e5e:	4401                	li	s0,0
    TEST_END();
    80013e60:	00009597          	auipc	a1,0x9
    80013e64:	12058593          	add	a1,a1,288 # 8001cf80 <__func__.1+0x2d8>
    80013e68:	bfd9                	j	80013e3e <load_guest_page_fault_5+0xd2>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80013e6a:	00009517          	auipc	a0,0x9
    80013e6e:	15e50513          	add	a0,a0,350 # 8001cfc8 <__func__.1+0x320>
    80013e72:	574070ef          	jal	8001b3e6 <printf>
    80013e76:	02900513          	li	a0,41
    80013e7a:	43e060ef          	jal	8001a2b8 <putchar>
    80013e7e:	b76d                	j	80013e28 <load_guest_page_fault_5+0xbc>

0000000080013e80 <load_guest_page_fault_6>:

bool load_guest_page_fault_6(){
    80013e80:	1101                	add	sp,sp,-32

    TEST_START();
    80013e82:	00008597          	auipc	a1,0x8
    80013e86:	61e58593          	add	a1,a1,1566 # 8001c4a0 <__func__.30>
    80013e8a:	00009517          	auipc	a0,0x9
    80013e8e:	10650513          	add	a0,a0,262 # 8001cf90 <__func__.1+0x2e8>
bool load_guest_page_fault_6(){
    80013e92:	ec06                	sd	ra,24(sp)
    80013e94:	e822                	sd	s0,16(sp)
    80013e96:	e426                	sd	s1,8(sp)
    TEST_START();
    80013e98:	54e070ef          	jal	8001b3e6 <printf>
    80013e9c:	4529                	li	a0,10
    80013e9e:	41a060ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80013ea2:	450d                	li	a0,3
    80013ea4:	c3bec0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80013ea8:	f38ec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80013eac:	97bec0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80013eb0:	4509                	li	a0,2
    80013eb2:	c2dec0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80013eb6:	ffeec0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80013eba:	4509                	li	a0,2
    80013ebc:	c23ec0ef          	jal	80000ade <goto_priv>

    //执行lb指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80013ec0:	0ff0000f          	fence
    80013ec4:	4785                	li	a5,1
    80013ec6:	00029417          	auipc	s0,0x29
    80013eca:	14a40413          	add	s0,s0,330 # 8003d010 <excpt>
    80013ece:	00f41023          	sh	a5,0(s0)
    80013ed2:	00029797          	auipc	a5,0x29
    80013ed6:	1607bb23          	sd	zero,374(a5) # 8003d048 <excpt+0x38>
    80013eda:	0ff0000f          	fence
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80013ede:	001007b7          	lui	a5,0x100
    80013ee2:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80013ee6:	07b2                	sll	a5,a5,0xc
    80013ee8:	00078783          	lb	a5,0(a5)

    vaddr = hs_page_base(VSRWX_GI);
    lb(vaddr);
    TEST_ASSERT("vs mode lb when the second-stage address translation pte.v=0 leads to LGPF",
    80013eec:	08200593          	li	a1,130
    80013ef0:	0000e617          	auipc	a2,0xe
    80013ef4:	13860613          	add	a2,a2,312 # 80022028 <__func__.1+0x5380>
    80013ef8:	00009517          	auipc	a0,0x9
    80013efc:	0b050513          	add	a0,a0,176 # 8001cfa8 <__func__.1+0x300>
    80013f00:	4e6070ef          	jal	8001b3e6 <printf>
    80013f04:	00144783          	lbu	a5,1(s0)
    80013f08:	00009597          	auipc	a1,0x9
    80013f0c:	07858593          	add	a1,a1,120 # 8001cf80 <__func__.1+0x2d8>
    80013f10:	c789                	beqz	a5,80013f1a <load_guest_page_fault_6+0x9a>
    80013f12:	6418                	ld	a4,8(s0)
    80013f14:	47d5                	li	a5,21
    80013f16:	12f70063          	beq	a4,a5,80014036 <load_guest_page_fault_6+0x1b6>
    80013f1a:	00009517          	auipc	a0,0x9
    80013f1e:	0a650513          	add	a0,a0,166 # 8001cfc0 <__func__.1+0x318>
    80013f22:	4c4070ef          	jal	8001b3e6 <printf>
    80013f26:	00144783          	lbu	a5,1(s0)
    80013f2a:	c789                	beqz	a5,80013f34 <load_guest_page_fault_6+0xb4>
    80013f2c:	6418                	ld	a4,8(s0)
    80013f2e:	47d5                	li	a5,21
    80013f30:	00f70c63          	beq	a4,a5,80013f48 <load_guest_page_fault_6+0xc8>
    80013f34:	00009517          	auipc	a0,0x9
    80013f38:	09450513          	add	a0,a0,148 # 8001cfc8 <__func__.1+0x320>
    80013f3c:	4aa070ef          	jal	8001b3e6 <printf>
    80013f40:	02900513          	li	a0,41
    80013f44:	374060ef          	jal	8001a2b8 <putchar>
    80013f48:	4529                	li	a0,10
    80013f4a:	36e060ef          	jal	8001a2b8 <putchar>
    80013f4e:	00144783          	lbu	a5,1(s0)
    80013f52:	4481                	li	s1,0
    80013f54:	c789                	beqz	a5,80013f5e <load_guest_page_fault_6+0xde>
    80013f56:	6404                	ld	s1,8(s0)
    80013f58:	14ad                	add	s1,s1,-21
    80013f5a:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_LGPF
    );


    //执行ld指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    80013f5e:	0ff0000f          	fence
    80013f62:	4785                	li	a5,1
    80013f64:	00f41023          	sh	a5,0(s0)
    80013f68:	00029797          	auipc	a5,0x29
    80013f6c:	0e07b023          	sd	zero,224(a5) # 8003d048 <excpt+0x38>
    80013f70:	0ff0000f          	fence
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    80013f74:	001007b7          	lui	a5,0x100
    80013f78:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80013f7c:	07b2                	sll	a5,a5,0xc
    80013f7e:	0007b783          	ld	a5,0(a5)
    vaddr = hs_page_base(VSRWX_GI);

    ld(vaddr);   
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    80013f82:	08200593          	li	a1,130
    80013f86:	0000e617          	auipc	a2,0xe
    80013f8a:	0f260613          	add	a2,a2,242 # 80022078 <__func__.1+0x53d0>
    80013f8e:	00009517          	auipc	a0,0x9
    80013f92:	01a50513          	add	a0,a0,26 # 8001cfa8 <__func__.1+0x300>
    80013f96:	450070ef          	jal	8001b3e6 <printf>
    80013f9a:	00144783          	lbu	a5,1(s0)
    80013f9e:	00009597          	auipc	a1,0x9
    80013fa2:	fe258593          	add	a1,a1,-30 # 8001cf80 <__func__.1+0x2d8>
    80013fa6:	c789                	beqz	a5,80013fb0 <load_guest_page_fault_6+0x130>
    80013fa8:	6418                	ld	a4,8(s0)
    80013faa:	47d5                	li	a5,21
    80013fac:	08f70063          	beq	a4,a5,8001402c <load_guest_page_fault_6+0x1ac>
    80013fb0:	00009517          	auipc	a0,0x9
    80013fb4:	01050513          	add	a0,a0,16 # 8001cfc0 <__func__.1+0x318>
    80013fb8:	42e070ef          	jal	8001b3e6 <printf>
    80013fbc:	00144783          	lbu	a5,1(s0)
    80013fc0:	c789                	beqz	a5,80013fca <load_guest_page_fault_6+0x14a>
    80013fc2:	6418                	ld	a4,8(s0)
    80013fc4:	47d5                	li	a5,21
    80013fc6:	00f70c63          	beq	a4,a5,80013fde <load_guest_page_fault_6+0x15e>
    80013fca:	00009517          	auipc	a0,0x9
    80013fce:	ffe50513          	add	a0,a0,-2 # 8001cfc8 <__func__.1+0x320>
    80013fd2:	414070ef          	jal	8001b3e6 <printf>
    80013fd6:	02900513          	li	a0,41
    80013fda:	2de060ef          	jal	8001a2b8 <putchar>
    80013fde:	4529                	li	a0,10
    80013fe0:	2d8060ef          	jal	8001a2b8 <putchar>
    80013fe4:	cc95                	beqz	s1,80014020 <load_guest_page_fault_6+0x1a0>
    80013fe6:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80013fea:	00009597          	auipc	a1,0x9
    80013fee:	f9658593          	add	a1,a1,-106 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    80013ff2:	c491                	beqz	s1,80013ffe <load_guest_page_fault_6+0x17e>
    80013ff4:	6418                	ld	a4,8(s0)
    80013ff6:	47d5                	li	a5,21
    80013ff8:	04f70463          	beq	a4,a5,80014040 <load_guest_page_fault_6+0x1c0>
    80013ffc:	4481                	li	s1,0
    TEST_END();
    80013ffe:	00009517          	auipc	a0,0x9
    80014002:	02a50513          	add	a0,a0,42 # 8001d028 <__func__.1+0x380>
    80014006:	3e0070ef          	jal	8001b3e6 <printf>
    8001400a:	4511                	li	a0,4
    8001400c:	ad3ec0ef          	jal	80000ade <goto_priv>
    80014010:	b16ed0ef          	jal	80001326 <reset_state>
}
    80014014:	60e2                	ld	ra,24(sp)
    80014016:	6442                	ld	s0,16(sp)
    80014018:	8526                	mv	a0,s1
    8001401a:	64a2                	ld	s1,8(sp)
    8001401c:	6105                	add	sp,sp,32
    8001401e:	8082                	ret
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    80014020:	4481                	li	s1,0
    TEST_END();
    80014022:	00009597          	auipc	a1,0x9
    80014026:	f5e58593          	add	a1,a1,-162 # 8001cf80 <__func__.1+0x2d8>
    8001402a:	bfd1                	j	80013ffe <load_guest_page_fault_6+0x17e>
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    8001402c:	00009597          	auipc	a1,0x9
    80014030:	f4458593          	add	a1,a1,-188 # 8001cf70 <__func__.1+0x2c8>
    80014034:	bfb5                	j	80013fb0 <load_guest_page_fault_6+0x130>
    TEST_ASSERT("vs mode lb when the second-stage address translation pte.v=0 leads to LGPF",
    80014036:	00009597          	auipc	a1,0x9
    8001403a:	f3a58593          	add	a1,a1,-198 # 8001cf70 <__func__.1+0x2c8>
    8001403e:	bdf1                	j	80013f1a <load_guest_page_fault_6+0x9a>
    TEST_END();
    80014040:	00009597          	auipc	a1,0x9
    80014044:	f3058593          	add	a1,a1,-208 # 8001cf70 <__func__.1+0x2c8>
    80014048:	bf5d                	j	80013ffe <load_guest_page_fault_6+0x17e>

000000008001404a <load_guest_page_fault_7>:

bool load_guest_page_fault_7(){
    8001404a:	1101                	add	sp,sp,-32

    TEST_START();
    8001404c:	00008597          	auipc	a1,0x8
    80014050:	46c58593          	add	a1,a1,1132 # 8001c4b8 <__func__.29>
    80014054:	00009517          	auipc	a0,0x9
    80014058:	f3c50513          	add	a0,a0,-196 # 8001cf90 <__func__.1+0x2e8>
bool load_guest_page_fault_7(){
    8001405c:	ec06                	sd	ra,24(sp)
    8001405e:	e822                	sd	s0,16(sp)
    80014060:	e426                	sd	s1,8(sp)
    TEST_START();
    80014062:	384070ef          	jal	8001b3e6 <printf>
    80014066:	4529                	li	a0,10
    80014068:	250060ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    8001406c:	450d                	li	a0,3
    8001406e:	a71ec0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80014072:	d6eec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014076:	fb0ec0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    8001407a:	4509                	li	a0,2
    8001407c:	a63ec0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80014080:	e34ec0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80014084:	4509                	li	a0,2
    80014086:	a59ec0ef          	jal	80000ade <goto_priv>

    //执行lh指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    8001408a:	0ff0000f          	fence
    8001408e:	4785                	li	a5,1
    80014090:	00029417          	auipc	s0,0x29
    80014094:	f8040413          	add	s0,s0,-128 # 8003d010 <excpt>
    80014098:	00f41023          	sh	a5,0(s0)
    8001409c:	00029797          	auipc	a5,0x29
    800140a0:	fa07b623          	sd	zero,-84(a5) # 8003d048 <excpt+0x38>
    800140a4:	0ff0000f          	fence
    vaddr = hs_page_base(VSRWX_GI);


    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800140a8:	000807b7          	lui	a5,0x80
    800140ac:	1007b073          	csrc	sstatus,a5
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    800140b0:	001007b7          	lui	a5,0x100
    800140b4:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800140b8:	07b2                	sll	a5,a5,0xc
    800140ba:	00079783          	lh	a5,0(a5)
    lh(vaddr);
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    800140be:	08200593          	li	a1,130
    800140c2:	0000e617          	auipc	a2,0xe
    800140c6:	00e60613          	add	a2,a2,14 # 800220d0 <__func__.1+0x5428>
    800140ca:	00009517          	auipc	a0,0x9
    800140ce:	ede50513          	add	a0,a0,-290 # 8001cfa8 <__func__.1+0x300>
    800140d2:	314070ef          	jal	8001b3e6 <printf>
    800140d6:	00144783          	lbu	a5,1(s0)
    800140da:	00009597          	auipc	a1,0x9
    800140de:	ea658593          	add	a1,a1,-346 # 8001cf80 <__func__.1+0x2d8>
    800140e2:	c789                	beqz	a5,800140ec <load_guest_page_fault_7+0xa2>
    800140e4:	6418                	ld	a4,8(s0)
    800140e6:	47d5                	li	a5,21
    800140e8:	06f70e63          	beq	a4,a5,80014164 <load_guest_page_fault_7+0x11a>
    800140ec:	00009517          	auipc	a0,0x9
    800140f0:	ed450513          	add	a0,a0,-300 # 8001cfc0 <__func__.1+0x318>
    800140f4:	2f2070ef          	jal	8001b3e6 <printf>
    800140f8:	00144783          	lbu	a5,1(s0)
    800140fc:	c789                	beqz	a5,80014106 <load_guest_page_fault_7+0xbc>
    800140fe:	6418                	ld	a4,8(s0)
    80014100:	47d5                	li	a5,21
    80014102:	00f70c63          	beq	a4,a5,8001411a <load_guest_page_fault_7+0xd0>
    80014106:	00009517          	auipc	a0,0x9
    8001410a:	ec250513          	add	a0,a0,-318 # 8001cfc8 <__func__.1+0x320>
    8001410e:	2d8070ef          	jal	8001b3e6 <printf>
    80014112:	02900513          	li	a0,41
    80014116:	1a2060ef          	jal	8001a2b8 <putchar>
    8001411a:	4529                	li	a0,10
    8001411c:	19c060ef          	jal	8001a2b8 <putchar>
    80014120:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80014124:	00009597          	auipc	a1,0x9
    80014128:	e5c58593          	add	a1,a1,-420 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    8001412c:	c491                	beqz	s1,80014138 <load_guest_page_fault_7+0xee>
    8001412e:	6418                	ld	a4,8(s0)
    80014130:	47d5                	li	a5,21
    80014132:	02f70463          	beq	a4,a5,8001415a <load_guest_page_fault_7+0x110>
    80014136:	4481                	li	s1,0
    TEST_END();
    80014138:	00009517          	auipc	a0,0x9
    8001413c:	ef050513          	add	a0,a0,-272 # 8001d028 <__func__.1+0x380>
    80014140:	2a6070ef          	jal	8001b3e6 <printf>
    80014144:	4511                	li	a0,4
    80014146:	999ec0ef          	jal	80000ade <goto_priv>
    8001414a:	9dced0ef          	jal	80001326 <reset_state>
}
    8001414e:	60e2                	ld	ra,24(sp)
    80014150:	6442                	ld	s0,16(sp)
    80014152:	8526                	mv	a0,s1
    80014154:	64a2                	ld	s1,8(sp)
    80014156:	6105                	add	sp,sp,32
    80014158:	8082                	ret
    TEST_END();
    8001415a:	00009597          	auipc	a1,0x9
    8001415e:	e1658593          	add	a1,a1,-490 # 8001cf70 <__func__.1+0x2c8>
    80014162:	bfd9                	j	80014138 <load_guest_page_fault_7+0xee>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80014164:	00009597          	auipc	a1,0x9
    80014168:	e0c58593          	add	a1,a1,-500 # 8001cf70 <__func__.1+0x2c8>
    8001416c:	b741                	j	800140ec <load_guest_page_fault_7+0xa2>

000000008001416e <load_guest_page_fault_8>:

bool load_guest_page_fault_8(){
    8001416e:	1101                	add	sp,sp,-32

    TEST_START();
    80014170:	00008597          	auipc	a1,0x8
    80014174:	36058593          	add	a1,a1,864 # 8001c4d0 <__func__.28>
    80014178:	00009517          	auipc	a0,0x9
    8001417c:	e1850513          	add	a0,a0,-488 # 8001cf90 <__func__.1+0x2e8>
bool load_guest_page_fault_8(){
    80014180:	ec06                	sd	ra,24(sp)
    80014182:	e822                	sd	s0,16(sp)
    80014184:	e426                	sd	s1,8(sp)
    TEST_START();
    80014186:	260070ef          	jal	8001b3e6 <printf>
    8001418a:	4529                	li	a0,10
    8001418c:	12c060ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80014190:	450d                	li	a0,3
    80014192:	94dec0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80014196:	c4aec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001419a:	e8cec0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    8001419e:	4509                	li	a0,2
    800141a0:	93fec0ef          	jal	80000ade <goto_priv>
    vspt_init();
    800141a4:	d10ec0ef          	jal	800006b4 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    800141a8:	4509                	li	a0,2
    800141aa:	935ec0ef          	jal	80000ade <goto_priv>

    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    800141ae:	0ff0000f          	fence
    800141b2:	4785                	li	a5,1
    800141b4:	00029417          	auipc	s0,0x29
    800141b8:	e5c40413          	add	s0,s0,-420 # 8003d010 <excpt>
    800141bc:	00f41023          	sh	a5,0(s0)
    800141c0:	00029797          	auipc	a5,0x29
    800141c4:	e807b423          	sd	zero,-376(a5) # 8003d048 <excpt+0x38>
    800141c8:	0ff0000f          	fence
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    800141cc:	000807b7          	lui	a5,0x80
    800141d0:	1007a073          	csrs	sstatus,a5
    800141d4:	001007b7          	lui	a5,0x100
    800141d8:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800141dc:	07b2                	sll	a5,a5,0xc
    800141de:	00079783          	lh	a5,0(a5)
    lh(vaddr);
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    800141e2:	08200593          	li	a1,130
    800141e6:	0000e617          	auipc	a2,0xe
    800141ea:	f4a60613          	add	a2,a2,-182 # 80022130 <__func__.1+0x5488>
    800141ee:	00009517          	auipc	a0,0x9
    800141f2:	dba50513          	add	a0,a0,-582 # 8001cfa8 <__func__.1+0x300>
    800141f6:	1f0070ef          	jal	8001b3e6 <printf>
    800141fa:	00144783          	lbu	a5,1(s0)
    800141fe:	00009597          	auipc	a1,0x9
    80014202:	d8258593          	add	a1,a1,-638 # 8001cf80 <__func__.1+0x2d8>
    80014206:	c789                	beqz	a5,80014210 <load_guest_page_fault_8+0xa2>
    80014208:	6418                	ld	a4,8(s0)
    8001420a:	47d5                	li	a5,21
    8001420c:	06f70e63          	beq	a4,a5,80014288 <load_guest_page_fault_8+0x11a>
    80014210:	00009517          	auipc	a0,0x9
    80014214:	db050513          	add	a0,a0,-592 # 8001cfc0 <__func__.1+0x318>
    80014218:	1ce070ef          	jal	8001b3e6 <printf>
    8001421c:	00144783          	lbu	a5,1(s0)
    80014220:	c789                	beqz	a5,8001422a <load_guest_page_fault_8+0xbc>
    80014222:	6418                	ld	a4,8(s0)
    80014224:	47d5                	li	a5,21
    80014226:	00f70c63          	beq	a4,a5,8001423e <load_guest_page_fault_8+0xd0>
    8001422a:	00009517          	auipc	a0,0x9
    8001422e:	d9e50513          	add	a0,a0,-610 # 8001cfc8 <__func__.1+0x320>
    80014232:	1b4070ef          	jal	8001b3e6 <printf>
    80014236:	02900513          	li	a0,41
    8001423a:	07e060ef          	jal	8001a2b8 <putchar>
    8001423e:	4529                	li	a0,10
    80014240:	078060ef          	jal	8001a2b8 <putchar>
    80014244:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    80014248:	00009597          	auipc	a1,0x9
    8001424c:	d3858593          	add	a1,a1,-712 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80014250:	c491                	beqz	s1,8001425c <load_guest_page_fault_8+0xee>
    80014252:	6418                	ld	a4,8(s0)
    80014254:	47d5                	li	a5,21
    80014256:	02f70463          	beq	a4,a5,8001427e <load_guest_page_fault_8+0x110>
    8001425a:	4481                	li	s1,0
    TEST_END();
    8001425c:	00009517          	auipc	a0,0x9
    80014260:	dcc50513          	add	a0,a0,-564 # 8001d028 <__func__.1+0x380>
    80014264:	182070ef          	jal	8001b3e6 <printf>
    80014268:	4511                	li	a0,4
    8001426a:	875ec0ef          	jal	80000ade <goto_priv>
    8001426e:	8b8ed0ef          	jal	80001326 <reset_state>
}
    80014272:	60e2                	ld	ra,24(sp)
    80014274:	6442                	ld	s0,16(sp)
    80014276:	8526                	mv	a0,s1
    80014278:	64a2                	ld	s1,8(sp)
    8001427a:	6105                	add	sp,sp,32
    8001427c:	8082                	ret
    TEST_END();
    8001427e:	00009597          	auipc	a1,0x9
    80014282:	cf258593          	add	a1,a1,-782 # 8001cf70 <__func__.1+0x2c8>
    80014286:	bfd9                	j	8001425c <load_guest_page_fault_8+0xee>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80014288:	00009597          	auipc	a1,0x9
    8001428c:	ce858593          	add	a1,a1,-792 # 8001cf70 <__func__.1+0x2c8>
    80014290:	b741                	j	80014210 <load_guest_page_fault_8+0xa2>

0000000080014292 <load_guest_page_fault_9>:

bool load_guest_page_fault_9(){
    80014292:	1101                	add	sp,sp,-32

    TEST_START();
    80014294:	00008597          	auipc	a1,0x8
    80014298:	25458593          	add	a1,a1,596 # 8001c4e8 <__func__.27>
    8001429c:	00009517          	auipc	a0,0x9
    800142a0:	cf450513          	add	a0,a0,-780 # 8001cf90 <__func__.1+0x2e8>
bool load_guest_page_fault_9(){
    800142a4:	ec06                	sd	ra,24(sp)
    800142a6:	e822                	sd	s0,16(sp)
    800142a8:	e426                	sd	s1,8(sp)
    TEST_START();
    800142aa:	13c070ef          	jal	8001b3e6 <printf>
    800142ae:	4529                	li	a0,10
    800142b0:	008060ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    800142b4:	450d                	li	a0,3
    800142b6:	829ec0ef          	jal	80000ade <goto_priv>
    hspt_init();
    800142ba:	b26ec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800142be:	d68ec0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    800142c2:	4509                	li	a0,2
    800142c4:	81bec0ef          	jal	80000ade <goto_priv>
    vspt_init();
    800142c8:	becec0ef          	jal	800006b4 <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    800142cc:	4511                	li	a0,4
    800142ce:	811ec0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800142d2:	000407b7          	lui	a5,0x40
    800142d6:	2007b073          	csrc	vsstatus,a5
    

    goto_priv(PRIV_VS);
    800142da:	4509                	li	a0,2
    800142dc:	803ec0ef          	jal	80000ade <goto_priv>
    //执行lb指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800142e0:	0ff0000f          	fence
    800142e4:	4785                	li	a5,1
    800142e6:	00029417          	auipc	s0,0x29
    800142ea:	d2a40413          	add	s0,s0,-726 # 8003d010 <excpt>
    800142ee:	00f41023          	sh	a5,0(s0)
    800142f2:	00029797          	auipc	a5,0x29
    800142f6:	d407bb23          	sd	zero,-682(a5) # 8003d048 <excpt+0x38>
    800142fa:	0ff0000f          	fence
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    800142fe:	000807b7          	lui	a5,0x80
    80014302:	07ed                	add	a5,a5,27 # 8001b <_test_table_size+0x8001a>
    80014304:	07b6                	sll	a5,a5,0xd
    80014306:	00078783          	lb	a5,0(a5)
    vaddr = hs_page_base(VSURWX_GUX);


    lb(vaddr)  ;
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    8001430a:	08200593          	li	a1,130
    8001430e:	0000e617          	auipc	a2,0xe
    80014312:	e9260613          	add	a2,a2,-366 # 800221a0 <__func__.1+0x54f8>
    80014316:	00009517          	auipc	a0,0x9
    8001431a:	c9250513          	add	a0,a0,-878 # 8001cfa8 <__func__.1+0x300>
    8001431e:	0c8070ef          	jal	8001b3e6 <printf>
    80014322:	00144783          	lbu	a5,1(s0)
    80014326:	00009597          	auipc	a1,0x9
    8001432a:	c5a58593          	add	a1,a1,-934 # 8001cf80 <__func__.1+0x2d8>
    8001432e:	c789                	beqz	a5,80014338 <load_guest_page_fault_9+0xa6>
    80014330:	6418                	ld	a4,8(s0)
    80014332:	47b5                	li	a5,13
    80014334:	06f70e63          	beq	a4,a5,800143b0 <load_guest_page_fault_9+0x11e>
    80014338:	00009517          	auipc	a0,0x9
    8001433c:	c8850513          	add	a0,a0,-888 # 8001cfc0 <__func__.1+0x318>
    80014340:	0a6070ef          	jal	8001b3e6 <printf>
    80014344:	00144783          	lbu	a5,1(s0)
    80014348:	c789                	beqz	a5,80014352 <load_guest_page_fault_9+0xc0>
    8001434a:	6418                	ld	a4,8(s0)
    8001434c:	47b5                	li	a5,13
    8001434e:	00f70c63          	beq	a4,a5,80014366 <load_guest_page_fault_9+0xd4>
    80014352:	00009517          	auipc	a0,0x9
    80014356:	c7650513          	add	a0,a0,-906 # 8001cfc8 <__func__.1+0x320>
    8001435a:	08c070ef          	jal	8001b3e6 <printf>
    8001435e:	02900513          	li	a0,41
    80014362:	757050ef          	jal	8001a2b8 <putchar>
    80014366:	4529                	li	a0,10
    80014368:	751050ef          	jal	8001a2b8 <putchar>
    8001436c:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80014370:	00009597          	auipc	a1,0x9
    80014374:	c1058593          	add	a1,a1,-1008 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    80014378:	c491                	beqz	s1,80014384 <load_guest_page_fault_9+0xf2>
    8001437a:	6418                	ld	a4,8(s0)
    8001437c:	47b5                	li	a5,13
    8001437e:	02f70463          	beq	a4,a5,800143a6 <load_guest_page_fault_9+0x114>
    80014382:	4481                	li	s1,0
    TEST_END();
    80014384:	00009517          	auipc	a0,0x9
    80014388:	ca450513          	add	a0,a0,-860 # 8001d028 <__func__.1+0x380>
    8001438c:	05a070ef          	jal	8001b3e6 <printf>
    80014390:	4511                	li	a0,4
    80014392:	f4cec0ef          	jal	80000ade <goto_priv>
    80014396:	f91ec0ef          	jal	80001326 <reset_state>
}
    8001439a:	60e2                	ld	ra,24(sp)
    8001439c:	6442                	ld	s0,16(sp)
    8001439e:	8526                	mv	a0,s1
    800143a0:	64a2                	ld	s1,8(sp)
    800143a2:	6105                	add	sp,sp,32
    800143a4:	8082                	ret
    TEST_END();
    800143a6:	00009597          	auipc	a1,0x9
    800143aa:	bca58593          	add	a1,a1,-1078 # 8001cf70 <__func__.1+0x2c8>
    800143ae:	bfd9                	j	80014384 <load_guest_page_fault_9+0xf2>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    800143b0:	00009597          	auipc	a1,0x9
    800143b4:	bc058593          	add	a1,a1,-1088 # 8001cf70 <__func__.1+0x2c8>
    800143b8:	b741                	j	80014338 <load_guest_page_fault_9+0xa6>

00000000800143ba <load_guest_page_fault_10>:

bool load_guest_page_fault_10(){
    800143ba:	1141                	add	sp,sp,-16

    TEST_START();
    800143bc:	00008597          	auipc	a1,0x8
    800143c0:	14458593          	add	a1,a1,324 # 8001c500 <__func__.26>
    800143c4:	00009517          	auipc	a0,0x9
    800143c8:	bcc50513          	add	a0,a0,-1076 # 8001cf90 <__func__.1+0x2e8>
bool load_guest_page_fault_10(){
    800143cc:	e406                	sd	ra,8(sp)
    800143ce:	e022                	sd	s0,0(sp)
    TEST_START();
    800143d0:	016070ef          	jal	8001b3e6 <printf>
    800143d4:	4529                	li	a0,10
    800143d6:	6e3050ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    800143da:	450d                	li	a0,3
    800143dc:	f02ec0ef          	jal	80000ade <goto_priv>
    hspt_init();
    800143e0:	a00ec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800143e4:	c42ec0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    800143e8:	4509                	li	a0,2
    800143ea:	ef4ec0ef          	jal	80000ade <goto_priv>
    vspt_init();
    800143ee:	ac6ec0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    800143f2:	4511                	li	a0,4
    800143f4:	eeaec0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    800143f8:	000407b7          	lui	a5,0x40
    800143fc:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_VS);
    80014400:	4509                	li	a0,2
    80014402:	edcec0ef          	jal	80000ade <goto_priv>

    //执行lb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80014406:	0ff0000f          	fence
    8001440a:	4785                	li	a5,1
    8001440c:	00029417          	auipc	s0,0x29
    80014410:	c0440413          	add	s0,s0,-1020 # 8003d010 <excpt>
    80014414:	00f41023          	sh	a5,0(s0)
    80014418:	00029797          	auipc	a5,0x29
    8001441c:	c207b823          	sd	zero,-976(a5) # 8003d048 <excpt+0x38>
    80014420:	0ff0000f          	fence
    80014424:	000807b7          	lui	a5,0x80
    80014428:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001442a:	07b6                	sll	a5,a5,0xd
    8001442c:	00078783          	lb	a5,0(a5)
    lb(vaddr);

    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    80014430:	08200593          	li	a1,130
    80014434:	0000e617          	auipc	a2,0xe
    80014438:	da460613          	add	a2,a2,-604 # 800221d8 <__func__.1+0x5530>
    8001443c:	00009517          	auipc	a0,0x9
    80014440:	b6c50513          	add	a0,a0,-1172 # 8001cfa8 <__func__.1+0x300>
    80014444:	7a3060ef          	jal	8001b3e6 <printf>
    80014448:	00144783          	lbu	a5,1(s0)
    8001444c:	00009597          	auipc	a1,0x9
    80014450:	b2458593          	add	a1,a1,-1244 # 8001cf70 <__func__.1+0x2c8>
    80014454:	c789                	beqz	a5,8001445e <load_guest_page_fault_10+0xa4>
    80014456:	00009597          	auipc	a1,0x9
    8001445a:	b2a58593          	add	a1,a1,-1238 # 8001cf80 <__func__.1+0x2d8>
    8001445e:	00009517          	auipc	a0,0x9
    80014462:	b6250513          	add	a0,a0,-1182 # 8001cfc0 <__func__.1+0x318>
    80014466:	781060ef          	jal	8001b3e6 <printf>
    8001446a:	00144783          	lbu	a5,1(s0)
    8001446e:	e3b1                	bnez	a5,800144b2 <load_guest_page_fault_10+0xf8>
    80014470:	4529                	li	a0,10
    80014472:	647050ef          	jal	8001a2b8 <putchar>
    80014476:	00144783          	lbu	a5,1(s0)
    8001447a:	e795                	bnez	a5,800144a6 <load_guest_page_fault_10+0xec>
    8001447c:	4405                	li	s0,1
    );

    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    8001447e:	00009597          	auipc	a1,0x9
    80014482:	af258593          	add	a1,a1,-1294 # 8001cf70 <__func__.1+0x2c8>
    80014486:	00009517          	auipc	a0,0x9
    8001448a:	ba250513          	add	a0,a0,-1118 # 8001d028 <__func__.1+0x380>
    8001448e:	759060ef          	jal	8001b3e6 <printf>
    80014492:	4511                	li	a0,4
    80014494:	e4aec0ef          	jal	80000ade <goto_priv>
    80014498:	e8fec0ef          	jal	80001326 <reset_state>
}
    8001449c:	60a2                	ld	ra,8(sp)
    8001449e:	8522                	mv	a0,s0
    800144a0:	6402                	ld	s0,0(sp)
    800144a2:	0141                	add	sp,sp,16
    800144a4:	8082                	ret
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    800144a6:	4401                	li	s0,0
    TEST_END();
    800144a8:	00009597          	auipc	a1,0x9
    800144ac:	ad858593          	add	a1,a1,-1320 # 8001cf80 <__func__.1+0x2d8>
    800144b0:	bfd9                	j	80014486 <load_guest_page_fault_10+0xcc>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    800144b2:	00009517          	auipc	a0,0x9
    800144b6:	b1650513          	add	a0,a0,-1258 # 8001cfc8 <__func__.1+0x320>
    800144ba:	72d060ef          	jal	8001b3e6 <printf>
    800144be:	02900513          	li	a0,41
    800144c2:	5f7050ef          	jal	8001a2b8 <putchar>
    800144c6:	b76d                	j	80014470 <load_guest_page_fault_10+0xb6>

00000000800144c8 <load_guest_page_fault_11>:



bool load_guest_page_fault_11(){
    800144c8:	1101                	add	sp,sp,-32

    TEST_START();
    800144ca:	00008597          	auipc	a1,0x8
    800144ce:	05658593          	add	a1,a1,86 # 8001c520 <__func__.25>
    800144d2:	00009517          	auipc	a0,0x9
    800144d6:	abe50513          	add	a0,a0,-1346 # 8001cf90 <__func__.1+0x2e8>
bool load_guest_page_fault_11(){
    800144da:	ec06                	sd	ra,24(sp)
    800144dc:	e822                	sd	s0,16(sp)
    800144de:	e426                	sd	s1,8(sp)
    TEST_START();
    800144e0:	707060ef          	jal	8001b3e6 <printf>
    800144e4:	4529                	li	a0,10
    800144e6:	5d3050ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    800144ea:	450d                	li	a0,3
    800144ec:	df2ec0ef          	jal	80000ade <goto_priv>
    hspt_init();
    800144f0:	8f0ec0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800144f4:	b32ec0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    800144f8:	4509                	li	a0,2
    800144fa:	de4ec0ef          	jal	80000ade <goto_priv>
    vspt_init();
    800144fe:	9b6ec0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80014502:	4511                	li	a0,4
    80014504:	ddaec0ef          	jal	80000ade <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80014508:	28005073          	csrw	vsatp,0

    goto_priv(PRIV_HS);
    8001450c:	450d                	li	a0,3
    8001450e:	dd0ec0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80014512:	4509                	li	a0,2
    80014514:	ceeec0ef          	jal	80000a02 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80014518:	0ff0000f          	fence
    8001451c:	4785                	li	a5,1
    8001451e:	00029417          	auipc	s0,0x29
    80014522:	af240413          	add	s0,s0,-1294 # 8003d010 <excpt>
    80014526:	00f41023          	sh	a5,0(s0)
    8001452a:	00029797          	auipc	a5,0x29
    8001452e:	b007bf23          	sd	zero,-1250(a5) # 8003d048 <excpt+0x38>
    80014532:	0ff0000f          	fence
    asm volatile(
    80014536:	400197b7          	lui	a5,0x40019
    8001453a:	078a                	sll	a5,a5,0x2
    8001453c:	6c07c7f3          	.4byte	0x6c07c7f3

    vaddr = vs_page_base(VSI_GI);
    hlvd(vaddr);
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    80014540:	08200593          	li	a1,130
    80014544:	0000e617          	auipc	a2,0xe
    80014548:	92460613          	add	a2,a2,-1756 # 80021e68 <__func__.1+0x51c0>
    8001454c:	00009517          	auipc	a0,0x9
    80014550:	a5c50513          	add	a0,a0,-1444 # 8001cfa8 <__func__.1+0x300>
    80014554:	693060ef          	jal	8001b3e6 <printf>
    80014558:	00144783          	lbu	a5,1(s0)
    8001455c:	00009597          	auipc	a1,0x9
    80014560:	a2458593          	add	a1,a1,-1500 # 8001cf80 <__func__.1+0x2d8>
    80014564:	c789                	beqz	a5,8001456e <load_guest_page_fault_11+0xa6>
    80014566:	6418                	ld	a4,8(s0)
    80014568:	47d5                	li	a5,21
    8001456a:	06f70e63          	beq	a4,a5,800145e6 <load_guest_page_fault_11+0x11e>
    8001456e:	00009517          	auipc	a0,0x9
    80014572:	a5250513          	add	a0,a0,-1454 # 8001cfc0 <__func__.1+0x318>
    80014576:	671060ef          	jal	8001b3e6 <printf>
    8001457a:	00144783          	lbu	a5,1(s0)
    8001457e:	c789                	beqz	a5,80014588 <load_guest_page_fault_11+0xc0>
    80014580:	6418                	ld	a4,8(s0)
    80014582:	47d5                	li	a5,21
    80014584:	00f70c63          	beq	a4,a5,8001459c <load_guest_page_fault_11+0xd4>
    80014588:	00009517          	auipc	a0,0x9
    8001458c:	a4050513          	add	a0,a0,-1472 # 8001cfc8 <__func__.1+0x320>
    80014590:	657060ef          	jal	8001b3e6 <printf>
    80014594:	02900513          	li	a0,41
    80014598:	521050ef          	jal	8001a2b8 <putchar>
    8001459c:	4529                	li	a0,10
    8001459e:	51b050ef          	jal	8001a2b8 <putchar>
    800145a2:	00144483          	lbu	s1,1(s0)
        excpt.cause == CAUSE_LGPF
    );



    TEST_END();
    800145a6:	00009597          	auipc	a1,0x9
    800145aa:	9da58593          	add	a1,a1,-1574 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    800145ae:	c491                	beqz	s1,800145ba <load_guest_page_fault_11+0xf2>
    800145b0:	6418                	ld	a4,8(s0)
    800145b2:	47d5                	li	a5,21
    800145b4:	02f70463          	beq	a4,a5,800145dc <load_guest_page_fault_11+0x114>
    800145b8:	4481                	li	s1,0
    TEST_END();
    800145ba:	00009517          	auipc	a0,0x9
    800145be:	a6e50513          	add	a0,a0,-1426 # 8001d028 <__func__.1+0x380>
    800145c2:	625060ef          	jal	8001b3e6 <printf>
    800145c6:	4511                	li	a0,4
    800145c8:	d16ec0ef          	jal	80000ade <goto_priv>
    800145cc:	d5bec0ef          	jal	80001326 <reset_state>
}
    800145d0:	60e2                	ld	ra,24(sp)
    800145d2:	6442                	ld	s0,16(sp)
    800145d4:	8526                	mv	a0,s1
    800145d6:	64a2                	ld	s1,8(sp)
    800145d8:	6105                	add	sp,sp,32
    800145da:	8082                	ret
    TEST_END();
    800145dc:	00009597          	auipc	a1,0x9
    800145e0:	99458593          	add	a1,a1,-1644 # 8001cf70 <__func__.1+0x2c8>
    800145e4:	bfd9                	j	800145ba <load_guest_page_fault_11+0xf2>
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    800145e6:	00009597          	auipc	a1,0x9
    800145ea:	98a58593          	add	a1,a1,-1654 # 8001cf70 <__func__.1+0x2c8>
    800145ee:	b741                	j	8001456e <load_guest_page_fault_11+0xa6>

00000000800145f0 <load_guest_page_fault_12>:

bool load_guest_page_fault_12(){
    800145f0:	1101                	add	sp,sp,-32

    TEST_START();
    800145f2:	00008597          	auipc	a1,0x8
    800145f6:	f4e58593          	add	a1,a1,-178 # 8001c540 <__func__.24>
    800145fa:	00009517          	auipc	a0,0x9
    800145fe:	99650513          	add	a0,a0,-1642 # 8001cf90 <__func__.1+0x2e8>
bool load_guest_page_fault_12(){
    80014602:	ec06                	sd	ra,24(sp)
    80014604:	e822                	sd	s0,16(sp)
    80014606:	e426                	sd	s1,8(sp)
    TEST_START();
    80014608:	5df060ef          	jal	8001b3e6 <printf>
    8001460c:	4529                	li	a0,10
    8001460e:	4ab050ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80014612:	450d                	li	a0,3
    80014614:	ccaec0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80014618:	fc9eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001461c:	a0aec0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80014620:	4509                	li	a0,2
    80014622:	cbcec0ef          	jal	80000ade <goto_priv>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80014626:	4511                	li	a0,4
    80014628:	cb6ec0ef          	jal	80000ade <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    8001462c:	28005073          	csrw	vsatp,0

    goto_priv(PRIV_HS);
    80014630:	450d                	li	a0,3
    80014632:	cacec0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80014636:	4509                	li	a0,2
    80014638:	bcaec0ef          	jal	80000a02 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    8001463c:	0ff0000f          	fence
    80014640:	4785                	li	a5,1
    80014642:	00029417          	auipc	s0,0x29
    80014646:	9ce40413          	add	s0,s0,-1586 # 8003d010 <excpt>
    8001464a:	00f41023          	sh	a5,0(s0)
    8001464e:	00029797          	auipc	a5,0x29
    80014652:	9e07bd23          	sd	zero,-1542(a5) # 8003d048 <excpt+0x38>
    80014656:	0ff0000f          	fence
    vaddr = vs_page_base(VSRWX_GUX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001465a:	000807b7          	lui	a5,0x80
    8001465e:	1007b073          	csrc	sstatus,a5
    asm volatile(
    80014662:	400015b7          	lui	a1,0x40001
    80014666:	058a                	sll	a1,a1,0x2
    80014668:	6405c7f3          	.4byte	0x6405c7f3
    hlvh(vaddr);

    printf("%llx\n",vaddr);
    8001466c:	0000e517          	auipc	a0,0xe
    80014670:	32450513          	add	a0,a0,804 # 80022990 <__func__.1+0x5ce8>
    80014674:	573060ef          	jal	8001b3e6 <printf>
    printf("%d\n",excpt.cause);
    80014678:	640c                	ld	a1,8(s0)
    8001467a:	00009517          	auipc	a0,0x9
    8001467e:	37e50513          	add	a0,a0,894 # 8001d9f8 <__func__.1+0xd50>
    80014682:	565060ef          	jal	8001b3e6 <printf>
    printf("%d\n",excpt.triggered);
    80014686:	00144583          	lbu	a1,1(s0)
    8001468a:	00009517          	auipc	a0,0x9
    8001468e:	36e50513          	add	a0,a0,878 # 8001d9f8 <__func__.1+0xd50>
    80014692:	555060ef          	jal	8001b3e6 <printf>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80014696:	08200593          	li	a1,130
    8001469a:	0000e617          	auipc	a2,0xe
    8001469e:	87e60613          	add	a2,a2,-1922 # 80021f18 <__func__.1+0x5270>
    800146a2:	00009517          	auipc	a0,0x9
    800146a6:	90650513          	add	a0,a0,-1786 # 8001cfa8 <__func__.1+0x300>
    800146aa:	53d060ef          	jal	8001b3e6 <printf>
    800146ae:	00144783          	lbu	a5,1(s0)
    800146b2:	00009597          	auipc	a1,0x9
    800146b6:	8ce58593          	add	a1,a1,-1842 # 8001cf80 <__func__.1+0x2d8>
    800146ba:	c789                	beqz	a5,800146c4 <load_guest_page_fault_12+0xd4>
    800146bc:	6418                	ld	a4,8(s0)
    800146be:	47d5                	li	a5,21
    800146c0:	06f70e63          	beq	a4,a5,8001473c <load_guest_page_fault_12+0x14c>
    800146c4:	00009517          	auipc	a0,0x9
    800146c8:	8fc50513          	add	a0,a0,-1796 # 8001cfc0 <__func__.1+0x318>
    800146cc:	51b060ef          	jal	8001b3e6 <printf>
    800146d0:	00144783          	lbu	a5,1(s0)
    800146d4:	c789                	beqz	a5,800146de <load_guest_page_fault_12+0xee>
    800146d6:	6418                	ld	a4,8(s0)
    800146d8:	47d5                	li	a5,21
    800146da:	00f70c63          	beq	a4,a5,800146f2 <load_guest_page_fault_12+0x102>
    800146de:	00009517          	auipc	a0,0x9
    800146e2:	8ea50513          	add	a0,a0,-1814 # 8001cfc8 <__func__.1+0x320>
    800146e6:	501060ef          	jal	8001b3e6 <printf>
    800146ea:	02900513          	li	a0,41
    800146ee:	3cb050ef          	jal	8001a2b8 <putchar>
    800146f2:	4529                	li	a0,10
    800146f4:	3c5050ef          	jal	8001a2b8 <putchar>
    800146f8:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    800146fc:	00009597          	auipc	a1,0x9
    80014700:	88458593          	add	a1,a1,-1916 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80014704:	c491                	beqz	s1,80014710 <load_guest_page_fault_12+0x120>
    80014706:	6418                	ld	a4,8(s0)
    80014708:	47d5                	li	a5,21
    8001470a:	02f70463          	beq	a4,a5,80014732 <load_guest_page_fault_12+0x142>
    8001470e:	4481                	li	s1,0
    TEST_END();
    80014710:	00009517          	auipc	a0,0x9
    80014714:	91850513          	add	a0,a0,-1768 # 8001d028 <__func__.1+0x380>
    80014718:	4cf060ef          	jal	8001b3e6 <printf>
    8001471c:	4511                	li	a0,4
    8001471e:	bc0ec0ef          	jal	80000ade <goto_priv>
    80014722:	c05ec0ef          	jal	80001326 <reset_state>
}
    80014726:	60e2                	ld	ra,24(sp)
    80014728:	6442                	ld	s0,16(sp)
    8001472a:	8526                	mv	a0,s1
    8001472c:	64a2                	ld	s1,8(sp)
    8001472e:	6105                	add	sp,sp,32
    80014730:	8082                	ret
    TEST_END();
    80014732:	00009597          	auipc	a1,0x9
    80014736:	83e58593          	add	a1,a1,-1986 # 8001cf70 <__func__.1+0x2c8>
    8001473a:	bfd9                	j	80014710 <load_guest_page_fault_12+0x120>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    8001473c:	00009597          	auipc	a1,0x9
    80014740:	83458593          	add	a1,a1,-1996 # 8001cf70 <__func__.1+0x2c8>
    80014744:	b741                	j	800146c4 <load_guest_page_fault_12+0xd4>

0000000080014746 <load_guest_page_fault_13>:

bool load_guest_page_fault_13(){
    80014746:	1101                	add	sp,sp,-32

    TEST_START();
    80014748:	00008597          	auipc	a1,0x8
    8001474c:	e1858593          	add	a1,a1,-488 # 8001c560 <__func__.23>
    80014750:	00009517          	auipc	a0,0x9
    80014754:	84050513          	add	a0,a0,-1984 # 8001cf90 <__func__.1+0x2e8>
bool load_guest_page_fault_13(){
    80014758:	ec06                	sd	ra,24(sp)
    8001475a:	e822                	sd	s0,16(sp)
    8001475c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001475e:	489060ef          	jal	8001b3e6 <printf>
    80014762:	4529                	li	a0,10
    80014764:	355050ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80014768:	450d                	li	a0,3
    8001476a:	b74ec0ef          	jal	80000ade <goto_priv>
    hspt_init();
    8001476e:	e73eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014772:	8b4ec0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80014776:	4509                	li	a0,2
    80014778:	b66ec0ef          	jal	80000ade <goto_priv>
    vspt_init();
    8001477c:	f39eb0ef          	jal	800006b4 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80014780:	4511                	li	a0,4
    80014782:	b5cec0ef          	jal	80000ade <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80014786:	28005073          	csrw	vsatp,0

    goto_priv(PRIV_HS);
    8001478a:	450d                	li	a0,3
    8001478c:	b52ec0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80014790:	4509                	li	a0,2
    80014792:	a70ec0ef          	jal	80000a02 <set_prev_priv>
    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80014796:	0ff0000f          	fence
    8001479a:	4785                	li	a5,1
    8001479c:	00029417          	auipc	s0,0x29
    800147a0:	87440413          	add	s0,s0,-1932 # 8003d010 <excpt>
    800147a4:	00f41023          	sh	a5,0(s0)
    800147a8:	00029797          	auipc	a5,0x29
    800147ac:	8a07b023          	sd	zero,-1888(a5) # 8003d048 <excpt+0x38>
    800147b0:	0ff0000f          	fence
    vaddr = vs_page_base(VSI_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    800147b4:	000807b7          	lui	a5,0x80
    800147b8:	1007a073          	csrs	sstatus,a5
    800147bc:	400197b7          	lui	a5,0x40019
    800147c0:	078a                	sll	a5,a5,0x2
    800147c2:	6407c7f3          	.4byte	0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    800147c6:	08200593          	li	a1,130
    800147ca:	0000d617          	auipc	a2,0xd
    800147ce:	7ae60613          	add	a2,a2,1966 # 80021f78 <__func__.1+0x52d0>
    800147d2:	00008517          	auipc	a0,0x8
    800147d6:	7d650513          	add	a0,a0,2006 # 8001cfa8 <__func__.1+0x300>
    800147da:	40d060ef          	jal	8001b3e6 <printf>
    800147de:	00144783          	lbu	a5,1(s0)
    800147e2:	00008597          	auipc	a1,0x8
    800147e6:	79e58593          	add	a1,a1,1950 # 8001cf80 <__func__.1+0x2d8>
    800147ea:	c789                	beqz	a5,800147f4 <load_guest_page_fault_13+0xae>
    800147ec:	6418                	ld	a4,8(s0)
    800147ee:	47d5                	li	a5,21
    800147f0:	06f70e63          	beq	a4,a5,8001486c <load_guest_page_fault_13+0x126>
    800147f4:	00008517          	auipc	a0,0x8
    800147f8:	7cc50513          	add	a0,a0,1996 # 8001cfc0 <__func__.1+0x318>
    800147fc:	3eb060ef          	jal	8001b3e6 <printf>
    80014800:	00144783          	lbu	a5,1(s0)
    80014804:	c789                	beqz	a5,8001480e <load_guest_page_fault_13+0xc8>
    80014806:	6418                	ld	a4,8(s0)
    80014808:	47d5                	li	a5,21
    8001480a:	00f70c63          	beq	a4,a5,80014822 <load_guest_page_fault_13+0xdc>
    8001480e:	00008517          	auipc	a0,0x8
    80014812:	7ba50513          	add	a0,a0,1978 # 8001cfc8 <__func__.1+0x320>
    80014816:	3d1060ef          	jal	8001b3e6 <printf>
    8001481a:	02900513          	li	a0,41
    8001481e:	29b050ef          	jal	8001a2b8 <putchar>
    80014822:	4529                	li	a0,10
    80014824:	295050ef          	jal	8001a2b8 <putchar>
    80014828:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    8001482c:	00008597          	auipc	a1,0x8
    80014830:	75458593          	add	a1,a1,1876 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80014834:	c491                	beqz	s1,80014840 <load_guest_page_fault_13+0xfa>
    80014836:	6418                	ld	a4,8(s0)
    80014838:	47d5                	li	a5,21
    8001483a:	02f70463          	beq	a4,a5,80014862 <load_guest_page_fault_13+0x11c>
    8001483e:	4481                	li	s1,0
    TEST_END();
    80014840:	00008517          	auipc	a0,0x8
    80014844:	7e850513          	add	a0,a0,2024 # 8001d028 <__func__.1+0x380>
    80014848:	39f060ef          	jal	8001b3e6 <printf>
    8001484c:	4511                	li	a0,4
    8001484e:	a90ec0ef          	jal	80000ade <goto_priv>
    80014852:	ad5ec0ef          	jal	80001326 <reset_state>
}
    80014856:	60e2                	ld	ra,24(sp)
    80014858:	6442                	ld	s0,16(sp)
    8001485a:	8526                	mv	a0,s1
    8001485c:	64a2                	ld	s1,8(sp)
    8001485e:	6105                	add	sp,sp,32
    80014860:	8082                	ret
    TEST_END();
    80014862:	00008597          	auipc	a1,0x8
    80014866:	70e58593          	add	a1,a1,1806 # 8001cf70 <__func__.1+0x2c8>
    8001486a:	bfd9                	j	80014840 <load_guest_page_fault_13+0xfa>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    8001486c:	00008597          	auipc	a1,0x8
    80014870:	70458593          	add	a1,a1,1796 # 8001cf70 <__func__.1+0x2c8>
    80014874:	b741                	j	800147f4 <load_guest_page_fault_13+0xae>

0000000080014876 <load_guest_page_fault_14>:

bool load_guest_page_fault_14(){
    80014876:	1101                	add	sp,sp,-32

    TEST_START();
    80014878:	00008597          	auipc	a1,0x8
    8001487c:	d0858593          	add	a1,a1,-760 # 8001c580 <__func__.22>
    80014880:	00008517          	auipc	a0,0x8
    80014884:	71050513          	add	a0,a0,1808 # 8001cf90 <__func__.1+0x2e8>
bool load_guest_page_fault_14(){
    80014888:	ec06                	sd	ra,24(sp)
    8001488a:	e822                	sd	s0,16(sp)
    8001488c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001488e:	359060ef          	jal	8001b3e6 <printf>
    80014892:	4529                	li	a0,10
    80014894:	225050ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80014898:	450d                	li	a0,3
    8001489a:	a44ec0ef          	jal	80000ade <goto_priv>
    hspt_init();
    8001489e:	d43eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800148a2:	f85eb0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    800148a6:	4509                	li	a0,2
    800148a8:	a36ec0ef          	jal	80000ade <goto_priv>
    vspt_init();
    800148ac:	e09eb0ef          	jal	800006b4 <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    800148b0:	4511                	li	a0,4
    800148b2:	a2cec0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800148b6:	000407b7          	lui	a5,0x40
    800148ba:	2007b073          	csrc	vsstatus,a5
    CSRW(CSR_VSATP,(uint64_t)0);
    800148be:	28005073          	csrw	vsatp,0
    

    goto_priv(PRIV_HS);
    800148c2:	450d                	li	a0,3
    800148c4:	a1aec0ef          	jal	80000ade <goto_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，执行hlvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800148c8:	0ff0000f          	fence
    800148cc:	4785                	li	a5,1
    800148ce:	00028417          	auipc	s0,0x28
    800148d2:	74240413          	add	s0,s0,1858 # 8003d010 <excpt>
    800148d6:	00f41023          	sh	a5,0(s0)
    800148da:	00028797          	auipc	a5,0x28
    800148de:	7607b723          	sd	zero,1902(a5) # 8003d048 <excpt+0x38>
    800148e2:	0ff0000f          	fence
    asm volatile(
    800148e6:	001007b7          	lui	a5,0x100
    800148ea:	06778793          	add	a5,a5,103 # 100067 <STACK_SIZE+0x67>
    800148ee:	07b2                	sll	a5,a5,0xc
    800148f0:	6007c7f3          	.4byte	0x6007c7f3
    vaddr = vs_page_base(VSI_GURWX);


    hlvb(vaddr);
    printf("%d\n",excpt.cause);
    800148f4:	640c                	ld	a1,8(s0)
    800148f6:	00009517          	auipc	a0,0x9
    800148fa:	10250513          	add	a0,a0,258 # 8001d9f8 <__func__.1+0xd50>
    800148fe:	2e9060ef          	jal	8001b3e6 <printf>
    printf("%d\n",excpt.triggered);
    80014902:	00144583          	lbu	a1,1(s0)
    80014906:	00009517          	auipc	a0,0x9
    8001490a:	0f250513          	add	a0,a0,242 # 8001d9f8 <__func__.1+0xd50>
    8001490e:	2d9060ef          	jal	8001b3e6 <printf>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    80014912:	08200593          	li	a1,130
    80014916:	0000d617          	auipc	a2,0xd
    8001491a:	6d260613          	add	a2,a2,1746 # 80021fe8 <__func__.1+0x5340>
    8001491e:	00008517          	auipc	a0,0x8
    80014922:	68a50513          	add	a0,a0,1674 # 8001cfa8 <__func__.1+0x300>
    80014926:	2c1060ef          	jal	8001b3e6 <printf>
    8001492a:	00144783          	lbu	a5,1(s0)
    8001492e:	00008597          	auipc	a1,0x8
    80014932:	65258593          	add	a1,a1,1618 # 8001cf80 <__func__.1+0x2d8>
    80014936:	c789                	beqz	a5,80014940 <load_guest_page_fault_14+0xca>
    80014938:	6418                	ld	a4,8(s0)
    8001493a:	47d5                	li	a5,21
    8001493c:	06f70e63          	beq	a4,a5,800149b8 <load_guest_page_fault_14+0x142>
    80014940:	00008517          	auipc	a0,0x8
    80014944:	68050513          	add	a0,a0,1664 # 8001cfc0 <__func__.1+0x318>
    80014948:	29f060ef          	jal	8001b3e6 <printf>
    8001494c:	00144783          	lbu	a5,1(s0)
    80014950:	c789                	beqz	a5,8001495a <load_guest_page_fault_14+0xe4>
    80014952:	6418                	ld	a4,8(s0)
    80014954:	47d5                	li	a5,21
    80014956:	00f70c63          	beq	a4,a5,8001496e <load_guest_page_fault_14+0xf8>
    8001495a:	00008517          	auipc	a0,0x8
    8001495e:	66e50513          	add	a0,a0,1646 # 8001cfc8 <__func__.1+0x320>
    80014962:	285060ef          	jal	8001b3e6 <printf>
    80014966:	02900513          	li	a0,41
    8001496a:	14f050ef          	jal	8001a2b8 <putchar>
    8001496e:	4529                	li	a0,10
    80014970:	149050ef          	jal	8001a2b8 <putchar>
    80014974:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80014978:	00008597          	auipc	a1,0x8
    8001497c:	60858593          	add	a1,a1,1544 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    80014980:	c491                	beqz	s1,8001498c <load_guest_page_fault_14+0x116>
    80014982:	6418                	ld	a4,8(s0)
    80014984:	47d5                	li	a5,21
    80014986:	02f70463          	beq	a4,a5,800149ae <load_guest_page_fault_14+0x138>
    8001498a:	4481                	li	s1,0
    TEST_END();
    8001498c:	00008517          	auipc	a0,0x8
    80014990:	69c50513          	add	a0,a0,1692 # 8001d028 <__func__.1+0x380>
    80014994:	253060ef          	jal	8001b3e6 <printf>
    80014998:	4511                	li	a0,4
    8001499a:	944ec0ef          	jal	80000ade <goto_priv>
    8001499e:	989ec0ef          	jal	80001326 <reset_state>
}
    800149a2:	60e2                	ld	ra,24(sp)
    800149a4:	6442                	ld	s0,16(sp)
    800149a6:	8526                	mv	a0,s1
    800149a8:	64a2                	ld	s1,8(sp)
    800149aa:	6105                	add	sp,sp,32
    800149ac:	8082                	ret
    TEST_END();
    800149ae:	00008597          	auipc	a1,0x8
    800149b2:	5c258593          	add	a1,a1,1474 # 8001cf70 <__func__.1+0x2c8>
    800149b6:	bfd9                	j	8001498c <load_guest_page_fault_14+0x116>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    800149b8:	00008597          	auipc	a1,0x8
    800149bc:	5b858593          	add	a1,a1,1464 # 8001cf70 <__func__.1+0x2c8>
    800149c0:	b741                	j	80014940 <load_guest_page_fault_14+0xca>

00000000800149c2 <load_guest_page_fault_15>:

bool load_guest_page_fault_15(){
    800149c2:	1141                	add	sp,sp,-16

    TEST_START();
    800149c4:	00008597          	auipc	a1,0x8
    800149c8:	bdc58593          	add	a1,a1,-1060 # 8001c5a0 <__func__.21>
    800149cc:	00008517          	auipc	a0,0x8
    800149d0:	5c450513          	add	a0,a0,1476 # 8001cf90 <__func__.1+0x2e8>
bool load_guest_page_fault_15(){
    800149d4:	e406                	sd	ra,8(sp)
    800149d6:	e022                	sd	s0,0(sp)
    TEST_START();
    800149d8:	20f060ef          	jal	8001b3e6 <printf>
    800149dc:	4529                	li	a0,10
    800149de:	0db050ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    800149e2:	450d                	li	a0,3
    800149e4:	8faec0ef          	jal	80000ade <goto_priv>
    hspt_init();
    800149e8:	bf9eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800149ec:	e3beb0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    800149f0:	4509                	li	a0,2
    800149f2:	8ecec0ef          	jal	80000ade <goto_priv>
    vspt_init();
    800149f6:	cbfeb0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    800149fa:	4511                	li	a0,4
    800149fc:	8e2ec0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80014a00:	000407b7          	lui	a5,0x40
    80014a04:	2007a073          	csrs	vsstatus,a5
    CSRW(CSR_VSATP,(uint64_t)0);
    80014a08:	28005073          	csrw	vsatp,0

    goto_priv(PRIV_HS);
    80014a0c:	450d                	li	a0,3
    80014a0e:	8d0ec0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80014a12:	4509                	li	a0,2
    80014a14:	fefeb0ef          	jal	80000a02 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = vs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80014a18:	0ff0000f          	fence
    80014a1c:	4785                	li	a5,1
    80014a1e:	00028417          	auipc	s0,0x28
    80014a22:	5f240413          	add	s0,s0,1522 # 8003d010 <excpt>
    80014a26:	00f41023          	sh	a5,0(s0)
    80014a2a:	00028797          	auipc	a5,0x28
    80014a2e:	6007bf23          	sd	zero,1566(a5) # 8003d048 <excpt+0x38>
    80014a32:	0ff0000f          	fence
    80014a36:	000807b7          	lui	a5,0x80
    80014a3a:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80014a3c:	07b6                	sll	a5,a5,0xd
    80014a3e:	6007c7f3          	.4byte	0x6007c7f3
    hlvb(vaddr);

    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80014a42:	08200593          	li	a1,130
    80014a46:	0000d617          	auipc	a2,0xd
    80014a4a:	cd260613          	add	a2,a2,-814 # 80021718 <__func__.1+0x4a70>
    80014a4e:	00008517          	auipc	a0,0x8
    80014a52:	55a50513          	add	a0,a0,1370 # 8001cfa8 <__func__.1+0x300>
    80014a56:	191060ef          	jal	8001b3e6 <printf>
    80014a5a:	00144783          	lbu	a5,1(s0)
    80014a5e:	00008597          	auipc	a1,0x8
    80014a62:	51258593          	add	a1,a1,1298 # 8001cf70 <__func__.1+0x2c8>
    80014a66:	c789                	beqz	a5,80014a70 <load_guest_page_fault_15+0xae>
    80014a68:	00008597          	auipc	a1,0x8
    80014a6c:	51858593          	add	a1,a1,1304 # 8001cf80 <__func__.1+0x2d8>
    80014a70:	00008517          	auipc	a0,0x8
    80014a74:	55050513          	add	a0,a0,1360 # 8001cfc0 <__func__.1+0x318>
    80014a78:	16f060ef          	jal	8001b3e6 <printf>
    80014a7c:	00144783          	lbu	a5,1(s0)
    80014a80:	e3b1                	bnez	a5,80014ac4 <load_guest_page_fault_15+0x102>
    80014a82:	4529                	li	a0,10
    80014a84:	035050ef          	jal	8001a2b8 <putchar>
    80014a88:	00144783          	lbu	a5,1(s0)
    80014a8c:	e795                	bnez	a5,80014ab8 <load_guest_page_fault_15+0xf6>
    80014a8e:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    80014a90:	00008597          	auipc	a1,0x8
    80014a94:	4e058593          	add	a1,a1,1248 # 8001cf70 <__func__.1+0x2c8>
    80014a98:	00008517          	auipc	a0,0x8
    80014a9c:	59050513          	add	a0,a0,1424 # 8001d028 <__func__.1+0x380>
    80014aa0:	147060ef          	jal	8001b3e6 <printf>
    80014aa4:	4511                	li	a0,4
    80014aa6:	838ec0ef          	jal	80000ade <goto_priv>
    80014aaa:	87dec0ef          	jal	80001326 <reset_state>
}
    80014aae:	60a2                	ld	ra,8(sp)
    80014ab0:	8522                	mv	a0,s0
    80014ab2:	6402                	ld	s0,0(sp)
    80014ab4:	0141                	add	sp,sp,16
    80014ab6:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80014ab8:	4401                	li	s0,0
    TEST_END();
    80014aba:	00008597          	auipc	a1,0x8
    80014abe:	4c658593          	add	a1,a1,1222 # 8001cf80 <__func__.1+0x2d8>
    80014ac2:	bfd9                	j	80014a98 <load_guest_page_fault_15+0xd6>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80014ac4:	00008517          	auipc	a0,0x8
    80014ac8:	50450513          	add	a0,a0,1284 # 8001cfc8 <__func__.1+0x320>
    80014acc:	11b060ef          	jal	8001b3e6 <printf>
    80014ad0:	02900513          	li	a0,41
    80014ad4:	7e4050ef          	jal	8001a2b8 <putchar>
    80014ad8:	b76d                	j	80014a82 <load_guest_page_fault_15+0xc0>

0000000080014ada <store_guest_page_fault_1>:



bool store_guest_page_fault_1(){
    80014ada:	1101                	add	sp,sp,-32

    TEST_START();
    80014adc:	00008597          	auipc	a1,0x8
    80014ae0:	ae458593          	add	a1,a1,-1308 # 8001c5c0 <__func__.20>
    80014ae4:	00008517          	auipc	a0,0x8
    80014ae8:	4ac50513          	add	a0,a0,1196 # 8001cf90 <__func__.1+0x2e8>
bool store_guest_page_fault_1(){
    80014aec:	ec06                	sd	ra,24(sp)
    80014aee:	e822                	sd	s0,16(sp)
    80014af0:	e426                	sd	s1,8(sp)
    TEST_START();
    80014af2:	0f5060ef          	jal	8001b3e6 <printf>
    80014af6:	4529                	li	a0,10
    80014af8:	7c0050ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80014afc:	450d                	li	a0,3
    80014afe:	fe1eb0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80014b02:	adfeb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014b06:	d21eb0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80014b0a:	4509                	li	a0,2
    80014b0c:	fd3eb0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80014b10:	ba5eb0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80014b14:	450d                	li	a0,3
    80014b16:	fc9eb0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80014b1a:	4509                	li	a0,2
    80014b1c:	ee7eb0ef          	jal	80000a02 <set_prev_priv>

    //执行store指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80014b20:	0ff0000f          	fence
    80014b24:	4785                	li	a5,1
    80014b26:	00028417          	auipc	s0,0x28
    80014b2a:	4ea40413          	add	s0,s0,1258 # 8003d010 <excpt>
    80014b2e:	00f41023          	sh	a5,0(s0)
    80014b32:	00028797          	auipc	a5,0x28
    80014b36:	5007bb23          	sd	zero,1302(a5) # 8003d048 <excpt+0x38>
    80014b3a:	0ff0000f          	fence
    asm volatile(
    80014b3e:	37ab77b7          	lui	a5,0x37ab7
    80014b42:	00100737          	lui	a4,0x100
    80014b46:	078a                	sll	a5,a5,0x2
    80014b48:	06570713          	add	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80014b4c:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80014b50:	0732                	sll	a4,a4,0xc
    80014b52:	6ef74073          	.4byte	0x6ef74073

    vaddr = hs_page_base(VSRWX_GI);
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.v=0 leads to SGPF",
    80014b56:	08200593          	li	a1,130
    80014b5a:	0000d617          	auipc	a2,0xd
    80014b5e:	6b660613          	add	a2,a2,1718 # 80022210 <__func__.1+0x5568>
    80014b62:	00008517          	auipc	a0,0x8
    80014b66:	44650513          	add	a0,a0,1094 # 8001cfa8 <__func__.1+0x300>
    80014b6a:	07d060ef          	jal	8001b3e6 <printf>
    80014b6e:	00144783          	lbu	a5,1(s0)
    80014b72:	00008597          	auipc	a1,0x8
    80014b76:	40e58593          	add	a1,a1,1038 # 8001cf80 <__func__.1+0x2d8>
    80014b7a:	c789                	beqz	a5,80014b84 <store_guest_page_fault_1+0xaa>
    80014b7c:	6418                	ld	a4,8(s0)
    80014b7e:	47dd                	li	a5,23
    80014b80:	12f70363          	beq	a4,a5,80014ca6 <store_guest_page_fault_1+0x1cc>
    80014b84:	00008517          	auipc	a0,0x8
    80014b88:	43c50513          	add	a0,a0,1084 # 8001cfc0 <__func__.1+0x318>
    80014b8c:	05b060ef          	jal	8001b3e6 <printf>
    80014b90:	00144783          	lbu	a5,1(s0)
    80014b94:	c789                	beqz	a5,80014b9e <store_guest_page_fault_1+0xc4>
    80014b96:	6418                	ld	a4,8(s0)
    80014b98:	47dd                	li	a5,23
    80014b9a:	00f70c63          	beq	a4,a5,80014bb2 <store_guest_page_fault_1+0xd8>
    80014b9e:	00008517          	auipc	a0,0x8
    80014ba2:	42a50513          	add	a0,a0,1066 # 8001cfc8 <__func__.1+0x320>
    80014ba6:	041060ef          	jal	8001b3e6 <printf>
    80014baa:	02900513          	li	a0,41
    80014bae:	70a050ef          	jal	8001a2b8 <putchar>
    80014bb2:	4529                	li	a0,10
    80014bb4:	704050ef          	jal	8001a2b8 <putchar>
    80014bb8:	00144783          	lbu	a5,1(s0)
    80014bbc:	4481                	li	s1,0
    80014bbe:	c789                	beqz	a5,80014bc8 <store_guest_page_fault_1+0xee>
    80014bc0:	6404                	ld	s1,8(s0)
    80014bc2:	14a5                	add	s1,s1,-23
    80014bc4:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SGPF
    );


    //执行store相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    80014bc8:	0ff0000f          	fence
    80014bcc:	4785                	li	a5,1
    80014bce:	00f41023          	sh	a5,0(s0)
    80014bd2:	00028797          	auipc	a5,0x28
    80014bd6:	4607bb23          	sd	zero,1142(a5) # 8003d048 <excpt+0x38>
    80014bda:	0ff0000f          	fence
    asm volatile(
    80014bde:	001007b7          	lui	a5,0x100
    80014be2:	6731                	lui	a4,0xc
    80014be4:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80014be8:	eef70713          	add	a4,a4,-273 # beef <_test_table_size+0xbeee>
    80014bec:	07b2                	sll	a5,a5,0xc
    80014bee:	66e7c073          	.4byte	0x66e7c073
    addr = hs_page_base(VSRWX_GI);

    hsvh(addr,0xbeef);   
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80014bf2:	08200593          	li	a1,130
    80014bf6:	0000d617          	auipc	a2,0xd
    80014bfa:	66a60613          	add	a2,a2,1642 # 80022260 <__func__.1+0x55b8>
    80014bfe:	00008517          	auipc	a0,0x8
    80014c02:	3aa50513          	add	a0,a0,938 # 8001cfa8 <__func__.1+0x300>
    80014c06:	7e0060ef          	jal	8001b3e6 <printf>
    80014c0a:	00144783          	lbu	a5,1(s0)
    80014c0e:	00008597          	auipc	a1,0x8
    80014c12:	37258593          	add	a1,a1,882 # 8001cf80 <__func__.1+0x2d8>
    80014c16:	c789                	beqz	a5,80014c20 <store_guest_page_fault_1+0x146>
    80014c18:	6418                	ld	a4,8(s0)
    80014c1a:	47dd                	li	a5,23
    80014c1c:	08f70063          	beq	a4,a5,80014c9c <store_guest_page_fault_1+0x1c2>
    80014c20:	00008517          	auipc	a0,0x8
    80014c24:	3a050513          	add	a0,a0,928 # 8001cfc0 <__func__.1+0x318>
    80014c28:	7be060ef          	jal	8001b3e6 <printf>
    80014c2c:	00144783          	lbu	a5,1(s0)
    80014c30:	c789                	beqz	a5,80014c3a <store_guest_page_fault_1+0x160>
    80014c32:	6418                	ld	a4,8(s0)
    80014c34:	47dd                	li	a5,23
    80014c36:	00f70c63          	beq	a4,a5,80014c4e <store_guest_page_fault_1+0x174>
    80014c3a:	00008517          	auipc	a0,0x8
    80014c3e:	38e50513          	add	a0,a0,910 # 8001cfc8 <__func__.1+0x320>
    80014c42:	7a4060ef          	jal	8001b3e6 <printf>
    80014c46:	02900513          	li	a0,41
    80014c4a:	66e050ef          	jal	8001a2b8 <putchar>
    80014c4e:	4529                	li	a0,10
    80014c50:	668050ef          	jal	8001a2b8 <putchar>
    80014c54:	cc95                	beqz	s1,80014c90 <store_guest_page_fault_1+0x1b6>
    80014c56:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80014c5a:	00008597          	auipc	a1,0x8
    80014c5e:	32658593          	add	a1,a1,806 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80014c62:	c491                	beqz	s1,80014c6e <store_guest_page_fault_1+0x194>
    80014c64:	6418                	ld	a4,8(s0)
    80014c66:	47dd                	li	a5,23
    80014c68:	04f70463          	beq	a4,a5,80014cb0 <store_guest_page_fault_1+0x1d6>
    80014c6c:	4481                	li	s1,0
    TEST_END();
    80014c6e:	00008517          	auipc	a0,0x8
    80014c72:	3ba50513          	add	a0,a0,954 # 8001d028 <__func__.1+0x380>
    80014c76:	770060ef          	jal	8001b3e6 <printf>
    80014c7a:	4511                	li	a0,4
    80014c7c:	e63eb0ef          	jal	80000ade <goto_priv>
    80014c80:	ea6ec0ef          	jal	80001326 <reset_state>

}
    80014c84:	60e2                	ld	ra,24(sp)
    80014c86:	6442                	ld	s0,16(sp)
    80014c88:	8526                	mv	a0,s1
    80014c8a:	64a2                	ld	s1,8(sp)
    80014c8c:	6105                	add	sp,sp,32
    80014c8e:	8082                	ret
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80014c90:	4481                	li	s1,0
    TEST_END();
    80014c92:	00008597          	auipc	a1,0x8
    80014c96:	2ee58593          	add	a1,a1,750 # 8001cf80 <__func__.1+0x2d8>
    80014c9a:	bfd1                	j	80014c6e <store_guest_page_fault_1+0x194>
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80014c9c:	00008597          	auipc	a1,0x8
    80014ca0:	2d458593          	add	a1,a1,724 # 8001cf70 <__func__.1+0x2c8>
    80014ca4:	bfb5                	j	80014c20 <store_guest_page_fault_1+0x146>
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.v=0 leads to SGPF",
    80014ca6:	00008597          	auipc	a1,0x8
    80014caa:	2ca58593          	add	a1,a1,714 # 8001cf70 <__func__.1+0x2c8>
    80014cae:	bdd9                	j	80014b84 <store_guest_page_fault_1+0xaa>
    TEST_END();
    80014cb0:	00008597          	auipc	a1,0x8
    80014cb4:	2c058593          	add	a1,a1,704 # 8001cf70 <__func__.1+0x2c8>
    80014cb8:	bf5d                	j	80014c6e <store_guest_page_fault_1+0x194>

0000000080014cba <store_guest_page_fault_2>:

bool store_guest_page_fault_2(){
    80014cba:	1101                	add	sp,sp,-32

    TEST_START();
    80014cbc:	00008597          	auipc	a1,0x8
    80014cc0:	92458593          	add	a1,a1,-1756 # 8001c5e0 <__func__.19>
    80014cc4:	00008517          	auipc	a0,0x8
    80014cc8:	2cc50513          	add	a0,a0,716 # 8001cf90 <__func__.1+0x2e8>
bool store_guest_page_fault_2(){
    80014ccc:	ec06                	sd	ra,24(sp)
    80014cce:	e822                	sd	s0,16(sp)
    80014cd0:	e426                	sd	s1,8(sp)
    TEST_START();
    80014cd2:	714060ef          	jal	8001b3e6 <printf>
    80014cd6:	4529                	li	a0,10
    80014cd8:	5e0050ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80014cdc:	450d                	li	a0,3
    80014cde:	e01eb0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80014ce2:	8ffeb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014ce6:	b41eb0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80014cea:	4509                	li	a0,2
    80014cec:	df3eb0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80014cf0:	9c5eb0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80014cf4:	450d                	li	a0,3
    80014cf6:	de9eb0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80014cfa:	4509                	li	a0,2
    80014cfc:	d07eb0ef          	jal	80000a02 <set_prev_priv>

    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    80014d00:	0ff0000f          	fence
    80014d04:	4785                	li	a5,1
    80014d06:	00028417          	auipc	s0,0x28
    80014d0a:	30a40413          	add	s0,s0,778 # 8003d010 <excpt>
    80014d0e:	00f41023          	sh	a5,0(s0)
    80014d12:	00028797          	auipc	a5,0x28
    80014d16:	3207bb23          	sd	zero,822(a5) # 8003d048 <excpt+0x38>
    80014d1a:	0ff0000f          	fence
    vaddr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80014d1e:	000807b7          	lui	a5,0x80
    80014d22:	1007b073          	csrc	sstatus,a5
    asm volatile(
    80014d26:	37ab77b7          	lui	a5,0x37ab7
    80014d2a:	00100737          	lui	a4,0x100
    80014d2e:	078a                	sll	a5,a5,0x2
    80014d30:	06570713          	add	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80014d34:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80014d38:	0732                	sll	a4,a4,0xc
    80014d3a:	6ef74073          	.4byte	0x6ef74073
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80014d3e:	08200593          	li	a1,130
    80014d42:	0000d617          	auipc	a2,0xd
    80014d46:	57e60613          	add	a2,a2,1406 # 800222c0 <__func__.1+0x5618>
    80014d4a:	00008517          	auipc	a0,0x8
    80014d4e:	25e50513          	add	a0,a0,606 # 8001cfa8 <__func__.1+0x300>
    80014d52:	694060ef          	jal	8001b3e6 <printf>
    80014d56:	00144783          	lbu	a5,1(s0)
    80014d5a:	00008597          	auipc	a1,0x8
    80014d5e:	22658593          	add	a1,a1,550 # 8001cf80 <__func__.1+0x2d8>
    80014d62:	c789                	beqz	a5,80014d6c <store_guest_page_fault_2+0xb2>
    80014d64:	6418                	ld	a4,8(s0)
    80014d66:	47dd                	li	a5,23
    80014d68:	06f70e63          	beq	a4,a5,80014de4 <store_guest_page_fault_2+0x12a>
    80014d6c:	00008517          	auipc	a0,0x8
    80014d70:	25450513          	add	a0,a0,596 # 8001cfc0 <__func__.1+0x318>
    80014d74:	672060ef          	jal	8001b3e6 <printf>
    80014d78:	00144783          	lbu	a5,1(s0)
    80014d7c:	c789                	beqz	a5,80014d86 <store_guest_page_fault_2+0xcc>
    80014d7e:	6418                	ld	a4,8(s0)
    80014d80:	47dd                	li	a5,23
    80014d82:	00f70c63          	beq	a4,a5,80014d9a <store_guest_page_fault_2+0xe0>
    80014d86:	00008517          	auipc	a0,0x8
    80014d8a:	24250513          	add	a0,a0,578 # 8001cfc8 <__func__.1+0x320>
    80014d8e:	658060ef          	jal	8001b3e6 <printf>
    80014d92:	02900513          	li	a0,41
    80014d96:	522050ef          	jal	8001a2b8 <putchar>
    80014d9a:	4529                	li	a0,10
    80014d9c:	51c050ef          	jal	8001a2b8 <putchar>
    80014da0:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80014da4:	00008597          	auipc	a1,0x8
    80014da8:	1dc58593          	add	a1,a1,476 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80014dac:	c491                	beqz	s1,80014db8 <store_guest_page_fault_2+0xfe>
    80014dae:	6418                	ld	a4,8(s0)
    80014db0:	47dd                	li	a5,23
    80014db2:	02f70463          	beq	a4,a5,80014dda <store_guest_page_fault_2+0x120>
    80014db6:	4481                	li	s1,0
    TEST_END();
    80014db8:	00008517          	auipc	a0,0x8
    80014dbc:	27050513          	add	a0,a0,624 # 8001d028 <__func__.1+0x380>
    80014dc0:	626060ef          	jal	8001b3e6 <printf>
    80014dc4:	4511                	li	a0,4
    80014dc6:	d19eb0ef          	jal	80000ade <goto_priv>
    80014dca:	d5cec0ef          	jal	80001326 <reset_state>
}
    80014dce:	60e2                	ld	ra,24(sp)
    80014dd0:	6442                	ld	s0,16(sp)
    80014dd2:	8526                	mv	a0,s1
    80014dd4:	64a2                	ld	s1,8(sp)
    80014dd6:	6105                	add	sp,sp,32
    80014dd8:	8082                	ret
    TEST_END();
    80014dda:	00008597          	auipc	a1,0x8
    80014dde:	19658593          	add	a1,a1,406 # 8001cf70 <__func__.1+0x2c8>
    80014de2:	bfd9                	j	80014db8 <store_guest_page_fault_2+0xfe>
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80014de4:	00008597          	auipc	a1,0x8
    80014de8:	18c58593          	add	a1,a1,396 # 8001cf70 <__func__.1+0x2c8>
    80014dec:	b741                	j	80014d6c <store_guest_page_fault_2+0xb2>

0000000080014dee <store_guest_page_fault_3>:

bool store_guest_page_fault_3(){
    80014dee:	1101                	add	sp,sp,-32

    TEST_START();
    80014df0:	00008597          	auipc	a1,0x8
    80014df4:	81058593          	add	a1,a1,-2032 # 8001c600 <__func__.18>
    80014df8:	00008517          	auipc	a0,0x8
    80014dfc:	19850513          	add	a0,a0,408 # 8001cf90 <__func__.1+0x2e8>
bool store_guest_page_fault_3(){
    80014e00:	ec06                	sd	ra,24(sp)
    80014e02:	e822                	sd	s0,16(sp)
    80014e04:	e426                	sd	s1,8(sp)
    TEST_START();
    80014e06:	5e0060ef          	jal	8001b3e6 <printf>
    80014e0a:	4529                	li	a0,10
    80014e0c:	4ac050ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80014e10:	450d                	li	a0,3
    80014e12:	ccdeb0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80014e16:	fcaeb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014e1a:	a0deb0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80014e1e:	4509                	li	a0,2
    80014e20:	cbfeb0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80014e24:	891eb0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80014e28:	450d                	li	a0,3
    80014e2a:	cb5eb0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80014e2e:	4509                	li	a0,2
    80014e30:	bd3eb0ef          	jal	80000a02 <set_prev_priv>


    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80014e34:	0ff0000f          	fence
    80014e38:	4785                	li	a5,1
    80014e3a:	00028417          	auipc	s0,0x28
    80014e3e:	1d640413          	add	s0,s0,470 # 8003d010 <excpt>
    80014e42:	00f41023          	sh	a5,0(s0)
    80014e46:	00028797          	auipc	a5,0x28
    80014e4a:	2007b123          	sd	zero,514(a5) # 8003d048 <excpt+0x38>
    80014e4e:	0ff0000f          	fence
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80014e52:	000807b7          	lui	a5,0x80
    80014e56:	1007a073          	csrs	sstatus,a5
    80014e5a:	37ab77b7          	lui	a5,0x37ab7
    80014e5e:	00100737          	lui	a4,0x100
    80014e62:	078a                	sll	a5,a5,0x2
    80014e64:	06570713          	add	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80014e68:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80014e6c:	0732                	sll	a4,a4,0xc
    80014e6e:	6ef74073          	.4byte	0x6ef74073
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80014e72:	08200593          	li	a1,130
    80014e76:	0000d617          	auipc	a2,0xd
    80014e7a:	4aa60613          	add	a2,a2,1194 # 80022320 <__func__.1+0x5678>
    80014e7e:	00008517          	auipc	a0,0x8
    80014e82:	12a50513          	add	a0,a0,298 # 8001cfa8 <__func__.1+0x300>
    80014e86:	560060ef          	jal	8001b3e6 <printf>
    80014e8a:	00144783          	lbu	a5,1(s0)
    80014e8e:	00008597          	auipc	a1,0x8
    80014e92:	0f258593          	add	a1,a1,242 # 8001cf80 <__func__.1+0x2d8>
    80014e96:	c789                	beqz	a5,80014ea0 <store_guest_page_fault_3+0xb2>
    80014e98:	6418                	ld	a4,8(s0)
    80014e9a:	47dd                	li	a5,23
    80014e9c:	08f70663          	beq	a4,a5,80014f28 <store_guest_page_fault_3+0x13a>
    80014ea0:	00008517          	auipc	a0,0x8
    80014ea4:	12050513          	add	a0,a0,288 # 8001cfc0 <__func__.1+0x318>
    80014ea8:	53e060ef          	jal	8001b3e6 <printf>
    80014eac:	00144783          	lbu	a5,1(s0)
    80014eb0:	c789                	beqz	a5,80014eba <store_guest_page_fault_3+0xcc>
    80014eb2:	6418                	ld	a4,8(s0)
    80014eb4:	47dd                	li	a5,23
    80014eb6:	00f70c63          	beq	a4,a5,80014ece <store_guest_page_fault_3+0xe0>
    80014eba:	00008517          	auipc	a0,0x8
    80014ebe:	10e50513          	add	a0,a0,270 # 8001cfc8 <__func__.1+0x320>
    80014ec2:	524060ef          	jal	8001b3e6 <printf>
    80014ec6:	02900513          	li	a0,41
    80014eca:	3ee050ef          	jal	8001a2b8 <putchar>
    80014ece:	4529                	li	a0,10
    80014ed0:	3e8050ef          	jal	8001a2b8 <putchar>
    80014ed4:	00144483          	lbu	s1,1(s0)
    80014ed8:	c489                	beqz	s1,80014ee2 <store_guest_page_fault_3+0xf4>
    80014eda:	6418                	ld	a4,8(s0)
    80014edc:	47dd                	li	a5,23
    80014ede:	02f70c63          	beq	a4,a5,80014f16 <store_guest_page_fault_3+0x128>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80014ee2:	000807b7          	lui	a5,0x80
    80014ee6:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80014eea:	4481                	li	s1,0

    TEST_END();
    80014eec:	00008597          	auipc	a1,0x8
    80014ef0:	09458593          	add	a1,a1,148 # 8001cf80 <__func__.1+0x2d8>
    80014ef4:	00008517          	auipc	a0,0x8
    80014ef8:	13450513          	add	a0,a0,308 # 8001d028 <__func__.1+0x380>
    80014efc:	4ea060ef          	jal	8001b3e6 <printf>
    80014f00:	4511                	li	a0,4
    80014f02:	bddeb0ef          	jal	80000ade <goto_priv>
    80014f06:	c20ec0ef          	jal	80001326 <reset_state>
}
    80014f0a:	60e2                	ld	ra,24(sp)
    80014f0c:	6442                	ld	s0,16(sp)
    80014f0e:	8526                	mv	a0,s1
    80014f10:	64a2                	ld	s1,8(sp)
    80014f12:	6105                	add	sp,sp,32
    80014f14:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80014f16:	000807b7          	lui	a5,0x80
    80014f1a:	1007b073          	csrc	sstatus,a5
    TEST_END();
    80014f1e:	00008597          	auipc	a1,0x8
    80014f22:	05258593          	add	a1,a1,82 # 8001cf70 <__func__.1+0x2c8>
    80014f26:	b7f9                	j	80014ef4 <store_guest_page_fault_3+0x106>
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80014f28:	00008597          	auipc	a1,0x8
    80014f2c:	04858593          	add	a1,a1,72 # 8001cf70 <__func__.1+0x2c8>
    80014f30:	bf85                	j	80014ea0 <store_guest_page_fault_3+0xb2>

0000000080014f32 <store_guest_page_fault_4>:

bool store_guest_page_fault_4(){
    80014f32:	1101                	add	sp,sp,-32

    TEST_START();
    80014f34:	00007597          	auipc	a1,0x7
    80014f38:	6ec58593          	add	a1,a1,1772 # 8001c620 <__func__.17>
    80014f3c:	00008517          	auipc	a0,0x8
    80014f40:	05450513          	add	a0,a0,84 # 8001cf90 <__func__.1+0x2e8>
bool store_guest_page_fault_4(){
    80014f44:	ec06                	sd	ra,24(sp)
    80014f46:	e822                	sd	s0,16(sp)
    80014f48:	e426                	sd	s1,8(sp)
    TEST_START();
    80014f4a:	49c060ef          	jal	8001b3e6 <printf>
    80014f4e:	4529                	li	a0,10
    80014f50:	368050ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80014f54:	450d                	li	a0,3
    80014f56:	b89eb0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80014f5a:	e86eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014f5e:	8c9eb0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80014f62:	4509                	li	a0,2
    80014f64:	b7beb0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80014f68:	f4ceb0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80014f6c:	4511                	li	a0,4
    80014f6e:	b71eb0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80014f72:	000407b7          	lui	a5,0x40
    80014f76:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    80014f7a:	450d                	li	a0,3
    80014f7c:	b63eb0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80014f80:	4509                	li	a0,2
    80014f82:	a81eb0ef          	jal	80000a02 <set_prev_priv>

    //执行hsvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80014f86:	0ff0000f          	fence
    80014f8a:	4785                	li	a5,1
    80014f8c:	00028417          	auipc	s0,0x28
    80014f90:	08440413          	add	s0,s0,132 # 8003d010 <excpt>
    80014f94:	00f41023          	sh	a5,0(s0)
    80014f98:	00028797          	auipc	a5,0x28
    80014f9c:	0a07b823          	sd	zero,176(a5) # 8003d048 <excpt+0x38>
    80014fa0:	0ff0000f          	fence
    80014fa4:	37ab77b7          	lui	a5,0x37ab7
    80014fa8:	00080737          	lui	a4,0x80
    80014fac:	078a                	sll	a5,a5,0x2
    80014fae:	076d                	add	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    80014fb0:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80014fb4:	0736                	sll	a4,a4,0xd
    80014fb6:	6ef74073          	.4byte	0x6ef74073
    vaddr = hs_page_base(VSURWX_GUX);


    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    80014fba:	08200593          	li	a1,130
    80014fbe:	0000d617          	auipc	a2,0xd
    80014fc2:	3d260613          	add	a2,a2,978 # 80022390 <__func__.1+0x56e8>
    80014fc6:	00008517          	auipc	a0,0x8
    80014fca:	fe250513          	add	a0,a0,-30 # 8001cfa8 <__func__.1+0x300>
    80014fce:	418060ef          	jal	8001b3e6 <printf>
    80014fd2:	00144783          	lbu	a5,1(s0)
    80014fd6:	00008597          	auipc	a1,0x8
    80014fda:	faa58593          	add	a1,a1,-86 # 8001cf80 <__func__.1+0x2d8>
    80014fde:	c789                	beqz	a5,80014fe8 <store_guest_page_fault_4+0xb6>
    80014fe0:	6418                	ld	a4,8(s0)
    80014fe2:	47bd                	li	a5,15
    80014fe4:	06f70e63          	beq	a4,a5,80015060 <store_guest_page_fault_4+0x12e>
    80014fe8:	00008517          	auipc	a0,0x8
    80014fec:	fd850513          	add	a0,a0,-40 # 8001cfc0 <__func__.1+0x318>
    80014ff0:	3f6060ef          	jal	8001b3e6 <printf>
    80014ff4:	00144783          	lbu	a5,1(s0)
    80014ff8:	c789                	beqz	a5,80015002 <store_guest_page_fault_4+0xd0>
    80014ffa:	6418                	ld	a4,8(s0)
    80014ffc:	47bd                	li	a5,15
    80014ffe:	00f70c63          	beq	a4,a5,80015016 <store_guest_page_fault_4+0xe4>
    80015002:	00008517          	auipc	a0,0x8
    80015006:	fc650513          	add	a0,a0,-58 # 8001cfc8 <__func__.1+0x320>
    8001500a:	3dc060ef          	jal	8001b3e6 <printf>
    8001500e:	02900513          	li	a0,41
    80015012:	2a6050ef          	jal	8001a2b8 <putchar>
    80015016:	4529                	li	a0,10
    80015018:	2a0050ef          	jal	8001a2b8 <putchar>
    8001501c:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80015020:	00008597          	auipc	a1,0x8
    80015024:	f6058593          	add	a1,a1,-160 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    80015028:	c491                	beqz	s1,80015034 <store_guest_page_fault_4+0x102>
    8001502a:	6418                	ld	a4,8(s0)
    8001502c:	47bd                	li	a5,15
    8001502e:	02f70463          	beq	a4,a5,80015056 <store_guest_page_fault_4+0x124>
    80015032:	4481                	li	s1,0
    TEST_END();
    80015034:	00008517          	auipc	a0,0x8
    80015038:	ff450513          	add	a0,a0,-12 # 8001d028 <__func__.1+0x380>
    8001503c:	3aa060ef          	jal	8001b3e6 <printf>
    80015040:	4511                	li	a0,4
    80015042:	a9deb0ef          	jal	80000ade <goto_priv>
    80015046:	ae0ec0ef          	jal	80001326 <reset_state>
}
    8001504a:	60e2                	ld	ra,24(sp)
    8001504c:	6442                	ld	s0,16(sp)
    8001504e:	8526                	mv	a0,s1
    80015050:	64a2                	ld	s1,8(sp)
    80015052:	6105                	add	sp,sp,32
    80015054:	8082                	ret
    TEST_END();
    80015056:	00008597          	auipc	a1,0x8
    8001505a:	f1a58593          	add	a1,a1,-230 # 8001cf70 <__func__.1+0x2c8>
    8001505e:	bfd9                	j	80015034 <store_guest_page_fault_4+0x102>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    80015060:	00008597          	auipc	a1,0x8
    80015064:	f1058593          	add	a1,a1,-240 # 8001cf70 <__func__.1+0x2c8>
    80015068:	b741                	j	80014fe8 <store_guest_page_fault_4+0xb6>

000000008001506a <store_guest_page_fault_5>:

bool store_guest_page_fault_5(){
    8001506a:	1141                	add	sp,sp,-16

    TEST_START();
    8001506c:	00007597          	auipc	a1,0x7
    80015070:	5d458593          	add	a1,a1,1492 # 8001c640 <__func__.16>
    80015074:	00008517          	auipc	a0,0x8
    80015078:	f1c50513          	add	a0,a0,-228 # 8001cf90 <__func__.1+0x2e8>
bool store_guest_page_fault_5(){
    8001507c:	e406                	sd	ra,8(sp)
    8001507e:	e022                	sd	s0,0(sp)
    TEST_START();
    80015080:	366060ef          	jal	8001b3e6 <printf>
    80015084:	4529                	li	a0,10
    80015086:	232050ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    8001508a:	450d                	li	a0,3
    8001508c:	a53eb0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80015090:	d50eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015094:	f92eb0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80015098:	4509                	li	a0,2
    8001509a:	a45eb0ef          	jal	80000ade <goto_priv>
    vspt_init();
    8001509e:	e16eb0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_M);
    800150a2:	4511                	li	a0,4
    800150a4:	a3beb0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    800150a8:	000407b7          	lui	a5,0x40
    800150ac:	2007a073          	csrs	vsstatus,a5

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    800150b0:	450d                	li	a0,3
    800150b2:	a2deb0ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    800150b6:	4509                	li	a0,2
    800150b8:	94beb0ef          	jal	80000a02 <set_prev_priv>

    //执行hsvd指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    800150bc:	0ff0000f          	fence
    800150c0:	4785                	li	a5,1
    800150c2:	00028417          	auipc	s0,0x28
    800150c6:	f4e40413          	add	s0,s0,-178 # 8003d010 <excpt>
    800150ca:	00f41023          	sh	a5,0(s0)
    800150ce:	00028797          	auipc	a5,0x28
    800150d2:	f607bd23          	sd	zero,-134(a5) # 8003d048 <excpt+0x38>
    800150d6:	0ff0000f          	fence
    asm volatile(
    800150da:	37ab77b7          	lui	a5,0x37ab7
    800150de:	00080737          	lui	a4,0x80
    800150e2:	078a                	sll	a5,a5,0x2
    800150e4:	0765                	add	a4,a4,25 # 80019 <_test_table_size+0x80018>
    800150e6:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800150ea:	0736                	sll	a4,a4,0xd
    800150ec:	62f74073          	.4byte	0x62f74073
    hsvb(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    800150f0:	08200593          	li	a1,130
    800150f4:	0000d617          	auipc	a2,0xd
    800150f8:	2dc60613          	add	a2,a2,732 # 800223d0 <__func__.1+0x5728>
    800150fc:	00008517          	auipc	a0,0x8
    80015100:	eac50513          	add	a0,a0,-340 # 8001cfa8 <__func__.1+0x300>
    80015104:	2e2060ef          	jal	8001b3e6 <printf>
    80015108:	00144783          	lbu	a5,1(s0)
    8001510c:	00008597          	auipc	a1,0x8
    80015110:	e6458593          	add	a1,a1,-412 # 8001cf70 <__func__.1+0x2c8>
    80015114:	c789                	beqz	a5,8001511e <store_guest_page_fault_5+0xb4>
    80015116:	00008597          	auipc	a1,0x8
    8001511a:	e6a58593          	add	a1,a1,-406 # 8001cf80 <__func__.1+0x2d8>
    8001511e:	00008517          	auipc	a0,0x8
    80015122:	ea250513          	add	a0,a0,-350 # 8001cfc0 <__func__.1+0x318>
    80015126:	2c0060ef          	jal	8001b3e6 <printf>
    8001512a:	00144783          	lbu	a5,1(s0)
    8001512e:	e3b1                	bnez	a5,80015172 <store_guest_page_fault_5+0x108>
    80015130:	4529                	li	a0,10
    80015132:	186050ef          	jal	8001a2b8 <putchar>
    80015136:	00144783          	lbu	a5,1(s0)
    8001513a:	e795                	bnez	a5,80015166 <store_guest_page_fault_5+0xfc>
    8001513c:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    8001513e:	00008597          	auipc	a1,0x8
    80015142:	e3258593          	add	a1,a1,-462 # 8001cf70 <__func__.1+0x2c8>
    80015146:	00008517          	auipc	a0,0x8
    8001514a:	ee250513          	add	a0,a0,-286 # 8001d028 <__func__.1+0x380>
    8001514e:	298060ef          	jal	8001b3e6 <printf>
    80015152:	4511                	li	a0,4
    80015154:	98beb0ef          	jal	80000ade <goto_priv>
    80015158:	9ceec0ef          	jal	80001326 <reset_state>
}
    8001515c:	60a2                	ld	ra,8(sp)
    8001515e:	8522                	mv	a0,s0
    80015160:	6402                	ld	s0,0(sp)
    80015162:	0141                	add	sp,sp,16
    80015164:	8082                	ret
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    80015166:	4401                	li	s0,0
    TEST_END();
    80015168:	00008597          	auipc	a1,0x8
    8001516c:	e1858593          	add	a1,a1,-488 # 8001cf80 <__func__.1+0x2d8>
    80015170:	bfd9                	j	80015146 <store_guest_page_fault_5+0xdc>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    80015172:	00008517          	auipc	a0,0x8
    80015176:	e5650513          	add	a0,a0,-426 # 8001cfc8 <__func__.1+0x320>
    8001517a:	26c060ef          	jal	8001b3e6 <printf>
    8001517e:	02900513          	li	a0,41
    80015182:	136050ef          	jal	8001a2b8 <putchar>
    80015186:	b76d                	j	80015130 <store_guest_page_fault_5+0xc6>

0000000080015188 <store_guest_page_fault_6>:

bool store_guest_page_fault_6(){
    80015188:	1101                	add	sp,sp,-32

    TEST_START();
    8001518a:	00007597          	auipc	a1,0x7
    8001518e:	4d658593          	add	a1,a1,1238 # 8001c660 <__func__.15>
    80015192:	00008517          	auipc	a0,0x8
    80015196:	dfe50513          	add	a0,a0,-514 # 8001cf90 <__func__.1+0x2e8>
bool store_guest_page_fault_6(){
    8001519a:	ec06                	sd	ra,24(sp)
    8001519c:	e822                	sd	s0,16(sp)
    8001519e:	e426                	sd	s1,8(sp)
    TEST_START();
    800151a0:	246060ef          	jal	8001b3e6 <printf>
    800151a4:	4529                	li	a0,10
    800151a6:	112050ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    800151aa:	450d                	li	a0,3
    800151ac:	933eb0ef          	jal	80000ade <goto_priv>
    hspt_init();
    800151b0:	c30eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800151b4:	e72eb0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    800151b8:	4509                	li	a0,2
    800151ba:	925eb0ef          	jal	80000ade <goto_priv>
    vspt_init();
    800151be:	cf6eb0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    800151c2:	4509                	li	a0,2
    800151c4:	91beb0ef          	jal	80000ade <goto_priv>

    //执行store指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    800151c8:	0ff0000f          	fence
    800151cc:	4785                	li	a5,1
    800151ce:	00028417          	auipc	s0,0x28
    800151d2:	e4240413          	add	s0,s0,-446 # 8003d010 <excpt>
    800151d6:	00f41023          	sh	a5,0(s0)
    800151da:	00028797          	auipc	a5,0x28
    800151de:	e607b723          	sd	zero,-402(a5) # 8003d048 <excpt+0x38>
    800151e2:	0ff0000f          	fence
STORE_INSTRUCTION(sd, "sd", uint64_t);
    800151e6:	37ab77b7          	lui	a5,0x37ab7
    800151ea:	00100737          	lui	a4,0x100
    800151ee:	078a                	sll	a5,a5,0x2
    800151f0:	06570713          	add	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    800151f4:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800151f8:	0732                	sll	a4,a4,0xc
    800151fa:	00f73023          	sd	a5,0(a4)

    vaddr = hs_page_base(VSRWX_GI);
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.v=0 leads to SGPF",
    800151fe:	08200593          	li	a1,130
    80015202:	0000d617          	auipc	a2,0xd
    80015206:	20660613          	add	a2,a2,518 # 80022408 <__func__.1+0x5760>
    8001520a:	00008517          	auipc	a0,0x8
    8001520e:	d9e50513          	add	a0,a0,-610 # 8001cfa8 <__func__.1+0x300>
    80015212:	1d4060ef          	jal	8001b3e6 <printf>
    80015216:	00144783          	lbu	a5,1(s0)
    8001521a:	00008597          	auipc	a1,0x8
    8001521e:	d6658593          	add	a1,a1,-666 # 8001cf80 <__func__.1+0x2d8>
    80015222:	c789                	beqz	a5,8001522c <store_guest_page_fault_6+0xa4>
    80015224:	6418                	ld	a4,8(s0)
    80015226:	47dd                	li	a5,23
    80015228:	12f70363          	beq	a4,a5,8001534e <store_guest_page_fault_6+0x1c6>
    8001522c:	00008517          	auipc	a0,0x8
    80015230:	d9450513          	add	a0,a0,-620 # 8001cfc0 <__func__.1+0x318>
    80015234:	1b2060ef          	jal	8001b3e6 <printf>
    80015238:	00144783          	lbu	a5,1(s0)
    8001523c:	c789                	beqz	a5,80015246 <store_guest_page_fault_6+0xbe>
    8001523e:	6418                	ld	a4,8(s0)
    80015240:	47dd                	li	a5,23
    80015242:	00f70c63          	beq	a4,a5,8001525a <store_guest_page_fault_6+0xd2>
    80015246:	00008517          	auipc	a0,0x8
    8001524a:	d8250513          	add	a0,a0,-638 # 8001cfc8 <__func__.1+0x320>
    8001524e:	198060ef          	jal	8001b3e6 <printf>
    80015252:	02900513          	li	a0,41
    80015256:	062050ef          	jal	8001a2b8 <putchar>
    8001525a:	4529                	li	a0,10
    8001525c:	05c050ef          	jal	8001a2b8 <putchar>
    80015260:	00144783          	lbu	a5,1(s0)
    80015264:	4481                	li	s1,0
    80015266:	c789                	beqz	a5,80015270 <store_guest_page_fault_6+0xe8>
    80015268:	6404                	ld	s1,8(s0)
    8001526a:	14a5                	add	s1,s1,-23
    8001526c:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SGPF
    );


    //执行store相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    80015270:	0ff0000f          	fence
    80015274:	4785                	li	a5,1
    80015276:	00f41023          	sh	a5,0(s0)
    8001527a:	00028797          	auipc	a5,0x28
    8001527e:	dc07b723          	sd	zero,-562(a5) # 8003d048 <excpt+0x38>
    80015282:	0ff0000f          	fence
STORE_INSTRUCTION(sh, "sh", uint16_t);
    80015286:	001007b7          	lui	a5,0x100
    8001528a:	7771                	lui	a4,0xffffc
    8001528c:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80015290:	eef7071b          	addw	a4,a4,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    80015294:	07b2                	sll	a5,a5,0xc
    80015296:	00e79023          	sh	a4,0(a5)
    addr = hs_page_base(VSRWX_GI);

    sh(addr,0xbeef);   
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    8001529a:	08200593          	li	a1,130
    8001529e:	0000d617          	auipc	a2,0xd
    800152a2:	1ba60613          	add	a2,a2,442 # 80022458 <__func__.1+0x57b0>
    800152a6:	00008517          	auipc	a0,0x8
    800152aa:	d0250513          	add	a0,a0,-766 # 8001cfa8 <__func__.1+0x300>
    800152ae:	138060ef          	jal	8001b3e6 <printf>
    800152b2:	00144783          	lbu	a5,1(s0)
    800152b6:	00008597          	auipc	a1,0x8
    800152ba:	cca58593          	add	a1,a1,-822 # 8001cf80 <__func__.1+0x2d8>
    800152be:	c789                	beqz	a5,800152c8 <store_guest_page_fault_6+0x140>
    800152c0:	6418                	ld	a4,8(s0)
    800152c2:	47dd                	li	a5,23
    800152c4:	08f70063          	beq	a4,a5,80015344 <store_guest_page_fault_6+0x1bc>
    800152c8:	00008517          	auipc	a0,0x8
    800152cc:	cf850513          	add	a0,a0,-776 # 8001cfc0 <__func__.1+0x318>
    800152d0:	116060ef          	jal	8001b3e6 <printf>
    800152d4:	00144783          	lbu	a5,1(s0)
    800152d8:	c789                	beqz	a5,800152e2 <store_guest_page_fault_6+0x15a>
    800152da:	6418                	ld	a4,8(s0)
    800152dc:	47dd                	li	a5,23
    800152de:	00f70c63          	beq	a4,a5,800152f6 <store_guest_page_fault_6+0x16e>
    800152e2:	00008517          	auipc	a0,0x8
    800152e6:	ce650513          	add	a0,a0,-794 # 8001cfc8 <__func__.1+0x320>
    800152ea:	0fc060ef          	jal	8001b3e6 <printf>
    800152ee:	02900513          	li	a0,41
    800152f2:	7c7040ef          	jal	8001a2b8 <putchar>
    800152f6:	4529                	li	a0,10
    800152f8:	7c1040ef          	jal	8001a2b8 <putchar>
    800152fc:	cc95                	beqz	s1,80015338 <store_guest_page_fault_6+0x1b0>
    800152fe:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80015302:	00008597          	auipc	a1,0x8
    80015306:	c7e58593          	add	a1,a1,-898 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    8001530a:	c491                	beqz	s1,80015316 <store_guest_page_fault_6+0x18e>
    8001530c:	6418                	ld	a4,8(s0)
    8001530e:	47dd                	li	a5,23
    80015310:	04f70463          	beq	a4,a5,80015358 <store_guest_page_fault_6+0x1d0>
    80015314:	4481                	li	s1,0
    TEST_END();
    80015316:	00008517          	auipc	a0,0x8
    8001531a:	d1250513          	add	a0,a0,-750 # 8001d028 <__func__.1+0x380>
    8001531e:	0c8060ef          	jal	8001b3e6 <printf>
    80015322:	4511                	li	a0,4
    80015324:	fbaeb0ef          	jal	80000ade <goto_priv>
    80015328:	fffeb0ef          	jal	80001326 <reset_state>

}
    8001532c:	60e2                	ld	ra,24(sp)
    8001532e:	6442                	ld	s0,16(sp)
    80015330:	8526                	mv	a0,s1
    80015332:	64a2                	ld	s1,8(sp)
    80015334:	6105                	add	sp,sp,32
    80015336:	8082                	ret
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80015338:	4481                	li	s1,0
    TEST_END();
    8001533a:	00008597          	auipc	a1,0x8
    8001533e:	c4658593          	add	a1,a1,-954 # 8001cf80 <__func__.1+0x2d8>
    80015342:	bfd1                	j	80015316 <store_guest_page_fault_6+0x18e>
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80015344:	00008597          	auipc	a1,0x8
    80015348:	c2c58593          	add	a1,a1,-980 # 8001cf70 <__func__.1+0x2c8>
    8001534c:	bfb5                	j	800152c8 <store_guest_page_fault_6+0x140>
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.v=0 leads to SGPF",
    8001534e:	00008597          	auipc	a1,0x8
    80015352:	c2258593          	add	a1,a1,-990 # 8001cf70 <__func__.1+0x2c8>
    80015356:	bdd9                	j	8001522c <store_guest_page_fault_6+0xa4>
    TEST_END();
    80015358:	00008597          	auipc	a1,0x8
    8001535c:	c1858593          	add	a1,a1,-1000 # 8001cf70 <__func__.1+0x2c8>
    80015360:	bf5d                	j	80015316 <store_guest_page_fault_6+0x18e>

0000000080015362 <store_guest_page_fault_7>:

bool store_guest_page_fault_7(){
    80015362:	1101                	add	sp,sp,-32

    TEST_START();
    80015364:	00007597          	auipc	a1,0x7
    80015368:	31c58593          	add	a1,a1,796 # 8001c680 <__func__.14>
    8001536c:	00008517          	auipc	a0,0x8
    80015370:	c2450513          	add	a0,a0,-988 # 8001cf90 <__func__.1+0x2e8>
bool store_guest_page_fault_7(){
    80015374:	ec06                	sd	ra,24(sp)
    80015376:	e822                	sd	s0,16(sp)
    80015378:	e426                	sd	s1,8(sp)
    TEST_START();
    8001537a:	06c060ef          	jal	8001b3e6 <printf>
    8001537e:	4529                	li	a0,10
    80015380:	739040ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80015384:	450d                	li	a0,3
    80015386:	f58eb0ef          	jal	80000ade <goto_priv>
    hspt_init();
    8001538a:	a56eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001538e:	c98eb0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80015392:	4509                	li	a0,2
    80015394:	f4aeb0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80015398:	b1ceb0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    8001539c:	4509                	li	a0,2
    8001539e:	f40eb0ef          	jal	80000ade <goto_priv>

    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    800153a2:	0ff0000f          	fence
    800153a6:	4785                	li	a5,1
    800153a8:	00028417          	auipc	s0,0x28
    800153ac:	c6840413          	add	s0,s0,-920 # 8003d010 <excpt>
    800153b0:	00f41023          	sh	a5,0(s0)
    800153b4:	00028797          	auipc	a5,0x28
    800153b8:	c807ba23          	sd	zero,-876(a5) # 8003d048 <excpt+0x38>
    800153bc:	0ff0000f          	fence
    vaddr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800153c0:	000807b7          	lui	a5,0x80
    800153c4:	1007b073          	csrc	sstatus,a5
STORE_INSTRUCTION(sd, "sd", uint64_t);
    800153c8:	37ab77b7          	lui	a5,0x37ab7
    800153cc:	00100737          	lui	a4,0x100
    800153d0:	078a                	sll	a5,a5,0x2
    800153d2:	06570713          	add	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    800153d6:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800153da:	0732                	sll	a4,a4,0xc
    800153dc:	00f73023          	sd	a5,0(a4)
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    800153e0:	08200593          	li	a1,130
    800153e4:	0000d617          	auipc	a2,0xd
    800153e8:	0cc60613          	add	a2,a2,204 # 800224b0 <__func__.1+0x5808>
    800153ec:	00008517          	auipc	a0,0x8
    800153f0:	bbc50513          	add	a0,a0,-1092 # 8001cfa8 <__func__.1+0x300>
    800153f4:	7f3050ef          	jal	8001b3e6 <printf>
    800153f8:	00144783          	lbu	a5,1(s0)
    800153fc:	00008597          	auipc	a1,0x8
    80015400:	b8458593          	add	a1,a1,-1148 # 8001cf80 <__func__.1+0x2d8>
    80015404:	c789                	beqz	a5,8001540e <store_guest_page_fault_7+0xac>
    80015406:	6418                	ld	a4,8(s0)
    80015408:	47dd                	li	a5,23
    8001540a:	06f70e63          	beq	a4,a5,80015486 <store_guest_page_fault_7+0x124>
    8001540e:	00008517          	auipc	a0,0x8
    80015412:	bb250513          	add	a0,a0,-1102 # 8001cfc0 <__func__.1+0x318>
    80015416:	7d1050ef          	jal	8001b3e6 <printf>
    8001541a:	00144783          	lbu	a5,1(s0)
    8001541e:	c789                	beqz	a5,80015428 <store_guest_page_fault_7+0xc6>
    80015420:	6418                	ld	a4,8(s0)
    80015422:	47dd                	li	a5,23
    80015424:	00f70c63          	beq	a4,a5,8001543c <store_guest_page_fault_7+0xda>
    80015428:	00008517          	auipc	a0,0x8
    8001542c:	ba050513          	add	a0,a0,-1120 # 8001cfc8 <__func__.1+0x320>
    80015430:	7b7050ef          	jal	8001b3e6 <printf>
    80015434:	02900513          	li	a0,41
    80015438:	681040ef          	jal	8001a2b8 <putchar>
    8001543c:	4529                	li	a0,10
    8001543e:	67b040ef          	jal	8001a2b8 <putchar>
    80015442:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80015446:	00008597          	auipc	a1,0x8
    8001544a:	b3a58593          	add	a1,a1,-1222 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    8001544e:	c491                	beqz	s1,8001545a <store_guest_page_fault_7+0xf8>
    80015450:	6418                	ld	a4,8(s0)
    80015452:	47dd                	li	a5,23
    80015454:	02f70463          	beq	a4,a5,8001547c <store_guest_page_fault_7+0x11a>
    80015458:	4481                	li	s1,0
    TEST_END();
    8001545a:	00008517          	auipc	a0,0x8
    8001545e:	bce50513          	add	a0,a0,-1074 # 8001d028 <__func__.1+0x380>
    80015462:	785050ef          	jal	8001b3e6 <printf>
    80015466:	4511                	li	a0,4
    80015468:	e76eb0ef          	jal	80000ade <goto_priv>
    8001546c:	ebbeb0ef          	jal	80001326 <reset_state>
}
    80015470:	60e2                	ld	ra,24(sp)
    80015472:	6442                	ld	s0,16(sp)
    80015474:	8526                	mv	a0,s1
    80015476:	64a2                	ld	s1,8(sp)
    80015478:	6105                	add	sp,sp,32
    8001547a:	8082                	ret
    TEST_END();
    8001547c:	00008597          	auipc	a1,0x8
    80015480:	af458593          	add	a1,a1,-1292 # 8001cf70 <__func__.1+0x2c8>
    80015484:	bfd9                	j	8001545a <store_guest_page_fault_7+0xf8>
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80015486:	00008597          	auipc	a1,0x8
    8001548a:	aea58593          	add	a1,a1,-1302 # 8001cf70 <__func__.1+0x2c8>
    8001548e:	b741                	j	8001540e <store_guest_page_fault_7+0xac>

0000000080015490 <store_guest_page_fault_8>:

bool store_guest_page_fault_8(){
    80015490:	1101                	add	sp,sp,-32

    TEST_START();
    80015492:	00007597          	auipc	a1,0x7
    80015496:	20e58593          	add	a1,a1,526 # 8001c6a0 <__func__.13>
    8001549a:	00008517          	auipc	a0,0x8
    8001549e:	af650513          	add	a0,a0,-1290 # 8001cf90 <__func__.1+0x2e8>
bool store_guest_page_fault_8(){
    800154a2:	ec06                	sd	ra,24(sp)
    800154a4:	e822                	sd	s0,16(sp)
    800154a6:	e426                	sd	s1,8(sp)
    TEST_START();
    800154a8:	73f050ef          	jal	8001b3e6 <printf>
    800154ac:	4529                	li	a0,10
    800154ae:	60b040ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    800154b2:	450d                	li	a0,3
    800154b4:	e2aeb0ef          	jal	80000ade <goto_priv>
    hspt_init();
    800154b8:	928eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800154bc:	b6aeb0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    800154c0:	4509                	li	a0,2
    800154c2:	e1ceb0ef          	jal	80000ade <goto_priv>
    vspt_init();
    800154c6:	9eeeb0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    800154ca:	4509                	li	a0,2
    800154cc:	e12eb0ef          	jal	80000ade <goto_priv>


    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    800154d0:	0ff0000f          	fence
    800154d4:	4785                	li	a5,1
    800154d6:	00028417          	auipc	s0,0x28
    800154da:	b3a40413          	add	s0,s0,-1222 # 8003d010 <excpt>
    800154de:	00f41023          	sh	a5,0(s0)
    800154e2:	00028797          	auipc	a5,0x28
    800154e6:	b607b323          	sd	zero,-1178(a5) # 8003d048 <excpt+0x38>
    800154ea:	0ff0000f          	fence
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    800154ee:	000807b7          	lui	a5,0x80
    800154f2:	1007a073          	csrs	sstatus,a5
STORE_INSTRUCTION(sh, "sh", uint16_t);
    800154f6:	001007b7          	lui	a5,0x100
    800154fa:	7771                	lui	a4,0xffffc
    800154fc:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80015500:	eef7071b          	addw	a4,a4,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    80015504:	07b2                	sll	a5,a5,0xc
    80015506:	00e79023          	sh	a4,0(a5)
    sh(vaddr,0xbeef);
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    8001550a:	08200593          	li	a1,130
    8001550e:	0000d617          	auipc	a2,0xd
    80015512:	00260613          	add	a2,a2,2 # 80022510 <__func__.1+0x5868>
    80015516:	00008517          	auipc	a0,0x8
    8001551a:	a9250513          	add	a0,a0,-1390 # 8001cfa8 <__func__.1+0x300>
    8001551e:	6c9050ef          	jal	8001b3e6 <printf>
    80015522:	00144783          	lbu	a5,1(s0)
    80015526:	00008597          	auipc	a1,0x8
    8001552a:	a5a58593          	add	a1,a1,-1446 # 8001cf80 <__func__.1+0x2d8>
    8001552e:	c789                	beqz	a5,80015538 <store_guest_page_fault_8+0xa8>
    80015530:	6418                	ld	a4,8(s0)
    80015532:	47dd                	li	a5,23
    80015534:	08f70663          	beq	a4,a5,800155c0 <store_guest_page_fault_8+0x130>
    80015538:	00008517          	auipc	a0,0x8
    8001553c:	a8850513          	add	a0,a0,-1400 # 8001cfc0 <__func__.1+0x318>
    80015540:	6a7050ef          	jal	8001b3e6 <printf>
    80015544:	00144783          	lbu	a5,1(s0)
    80015548:	c789                	beqz	a5,80015552 <store_guest_page_fault_8+0xc2>
    8001554a:	6418                	ld	a4,8(s0)
    8001554c:	47dd                	li	a5,23
    8001554e:	00f70c63          	beq	a4,a5,80015566 <store_guest_page_fault_8+0xd6>
    80015552:	00008517          	auipc	a0,0x8
    80015556:	a7650513          	add	a0,a0,-1418 # 8001cfc8 <__func__.1+0x320>
    8001555a:	68d050ef          	jal	8001b3e6 <printf>
    8001555e:	02900513          	li	a0,41
    80015562:	557040ef          	jal	8001a2b8 <putchar>
    80015566:	4529                	li	a0,10
    80015568:	551040ef          	jal	8001a2b8 <putchar>
    8001556c:	00144483          	lbu	s1,1(s0)
    80015570:	c489                	beqz	s1,8001557a <store_guest_page_fault_8+0xea>
    80015572:	6418                	ld	a4,8(s0)
    80015574:	47dd                	li	a5,23
    80015576:	02f70c63          	beq	a4,a5,800155ae <store_guest_page_fault_8+0x11e>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001557a:	000807b7          	lui	a5,0x80
    8001557e:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80015582:	4481                	li	s1,0

    TEST_END();
    80015584:	00008597          	auipc	a1,0x8
    80015588:	9fc58593          	add	a1,a1,-1540 # 8001cf80 <__func__.1+0x2d8>
    8001558c:	00008517          	auipc	a0,0x8
    80015590:	a9c50513          	add	a0,a0,-1380 # 8001d028 <__func__.1+0x380>
    80015594:	653050ef          	jal	8001b3e6 <printf>
    80015598:	4511                	li	a0,4
    8001559a:	d44eb0ef          	jal	80000ade <goto_priv>
    8001559e:	d89eb0ef          	jal	80001326 <reset_state>
}
    800155a2:	60e2                	ld	ra,24(sp)
    800155a4:	6442                	ld	s0,16(sp)
    800155a6:	8526                	mv	a0,s1
    800155a8:	64a2                	ld	s1,8(sp)
    800155aa:	6105                	add	sp,sp,32
    800155ac:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800155ae:	000807b7          	lui	a5,0x80
    800155b2:	1007b073          	csrc	sstatus,a5
    TEST_END();
    800155b6:	00008597          	auipc	a1,0x8
    800155ba:	9ba58593          	add	a1,a1,-1606 # 8001cf70 <__func__.1+0x2c8>
    800155be:	b7f9                	j	8001558c <store_guest_page_fault_8+0xfc>
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    800155c0:	00008597          	auipc	a1,0x8
    800155c4:	9b058593          	add	a1,a1,-1616 # 8001cf70 <__func__.1+0x2c8>
    800155c8:	bf85                	j	80015538 <store_guest_page_fault_8+0xa8>

00000000800155ca <store_guest_page_fault_9>:

bool store_guest_page_fault_9(){
    800155ca:	1101                	add	sp,sp,-32

    TEST_START();
    800155cc:	00007597          	auipc	a1,0x7
    800155d0:	0f458593          	add	a1,a1,244 # 8001c6c0 <__func__.12>
    800155d4:	00008517          	auipc	a0,0x8
    800155d8:	9bc50513          	add	a0,a0,-1604 # 8001cf90 <__func__.1+0x2e8>
bool store_guest_page_fault_9(){
    800155dc:	ec06                	sd	ra,24(sp)
    800155de:	e822                	sd	s0,16(sp)
    800155e0:	e426                	sd	s1,8(sp)
    TEST_START();
    800155e2:	605050ef          	jal	8001b3e6 <printf>
    800155e6:	4529                	li	a0,10
    800155e8:	4d1040ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    800155ec:	450d                	li	a0,3
    800155ee:	cf0eb0ef          	jal	80000ade <goto_priv>
    hspt_init();
    800155f2:	fefea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800155f6:	a30eb0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    800155fa:	4509                	li	a0,2
    800155fc:	ce2eb0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80015600:	8b4eb0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80015604:	4511                	li	a0,4
    80015606:	cd8eb0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    8001560a:	000407b7          	lui	a5,0x40
    8001560e:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80015612:	4509                	li	a0,2
    80015614:	ccaeb0ef          	jal	80000ade <goto_priv>

    //执行hsvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80015618:	0ff0000f          	fence
    8001561c:	4785                	li	a5,1
    8001561e:	00028417          	auipc	s0,0x28
    80015622:	9f240413          	add	s0,s0,-1550 # 8003d010 <excpt>
    80015626:	00f41023          	sh	a5,0(s0)
    8001562a:	00028797          	auipc	a5,0x28
    8001562e:	a007bf23          	sd	zero,-1506(a5) # 8003d048 <excpt+0x38>
    80015632:	0ff0000f          	fence
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80015636:	37ab77b7          	lui	a5,0x37ab7
    8001563a:	00080737          	lui	a4,0x80
    8001563e:	078a                	sll	a5,a5,0x2
    80015640:	076d                	add	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    80015642:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015646:	0736                	sll	a4,a4,0xd
    80015648:	00f73023          	sd	a5,0(a4)
    vaddr = hs_page_base(VSURWX_GUX);


    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    8001564c:	08200593          	li	a1,130
    80015650:	0000d617          	auipc	a2,0xd
    80015654:	f3060613          	add	a2,a2,-208 # 80022580 <__func__.1+0x58d8>
    80015658:	00008517          	auipc	a0,0x8
    8001565c:	95050513          	add	a0,a0,-1712 # 8001cfa8 <__func__.1+0x300>
    80015660:	587050ef          	jal	8001b3e6 <printf>
    80015664:	00144783          	lbu	a5,1(s0)
    80015668:	00008597          	auipc	a1,0x8
    8001566c:	91858593          	add	a1,a1,-1768 # 8001cf80 <__func__.1+0x2d8>
    80015670:	c789                	beqz	a5,8001567a <store_guest_page_fault_9+0xb0>
    80015672:	6418                	ld	a4,8(s0)
    80015674:	47bd                	li	a5,15
    80015676:	06f70e63          	beq	a4,a5,800156f2 <store_guest_page_fault_9+0x128>
    8001567a:	00008517          	auipc	a0,0x8
    8001567e:	94650513          	add	a0,a0,-1722 # 8001cfc0 <__func__.1+0x318>
    80015682:	565050ef          	jal	8001b3e6 <printf>
    80015686:	00144783          	lbu	a5,1(s0)
    8001568a:	c789                	beqz	a5,80015694 <store_guest_page_fault_9+0xca>
    8001568c:	6418                	ld	a4,8(s0)
    8001568e:	47bd                	li	a5,15
    80015690:	00f70c63          	beq	a4,a5,800156a8 <store_guest_page_fault_9+0xde>
    80015694:	00008517          	auipc	a0,0x8
    80015698:	93450513          	add	a0,a0,-1740 # 8001cfc8 <__func__.1+0x320>
    8001569c:	54b050ef          	jal	8001b3e6 <printf>
    800156a0:	02900513          	li	a0,41
    800156a4:	415040ef          	jal	8001a2b8 <putchar>
    800156a8:	4529                	li	a0,10
    800156aa:	40f040ef          	jal	8001a2b8 <putchar>
    800156ae:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    800156b2:	00008597          	auipc	a1,0x8
    800156b6:	8ce58593          	add	a1,a1,-1842 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    800156ba:	c491                	beqz	s1,800156c6 <store_guest_page_fault_9+0xfc>
    800156bc:	6418                	ld	a4,8(s0)
    800156be:	47bd                	li	a5,15
    800156c0:	02f70463          	beq	a4,a5,800156e8 <store_guest_page_fault_9+0x11e>
    800156c4:	4481                	li	s1,0
    TEST_END();
    800156c6:	00008517          	auipc	a0,0x8
    800156ca:	96250513          	add	a0,a0,-1694 # 8001d028 <__func__.1+0x380>
    800156ce:	519050ef          	jal	8001b3e6 <printf>
    800156d2:	4511                	li	a0,4
    800156d4:	c0aeb0ef          	jal	80000ade <goto_priv>
    800156d8:	c4feb0ef          	jal	80001326 <reset_state>
}
    800156dc:	60e2                	ld	ra,24(sp)
    800156de:	6442                	ld	s0,16(sp)
    800156e0:	8526                	mv	a0,s1
    800156e2:	64a2                	ld	s1,8(sp)
    800156e4:	6105                	add	sp,sp,32
    800156e6:	8082                	ret
    TEST_END();
    800156e8:	00008597          	auipc	a1,0x8
    800156ec:	88858593          	add	a1,a1,-1912 # 8001cf70 <__func__.1+0x2c8>
    800156f0:	bfd9                	j	800156c6 <store_guest_page_fault_9+0xfc>
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    800156f2:	00008597          	auipc	a1,0x8
    800156f6:	87e58593          	add	a1,a1,-1922 # 8001cf70 <__func__.1+0x2c8>
    800156fa:	b741                	j	8001567a <store_guest_page_fault_9+0xb0>

00000000800156fc <store_guest_page_fault_10>:

bool store_guest_page_fault_10(){
    800156fc:	1141                	add	sp,sp,-16

    TEST_START();
    800156fe:	00007597          	auipc	a1,0x7
    80015702:	fe258593          	add	a1,a1,-30 # 8001c6e0 <__func__.11>
    80015706:	00008517          	auipc	a0,0x8
    8001570a:	88a50513          	add	a0,a0,-1910 # 8001cf90 <__func__.1+0x2e8>
bool store_guest_page_fault_10(){
    8001570e:	e406                	sd	ra,8(sp)
    80015710:	e022                	sd	s0,0(sp)
    TEST_START();
    80015712:	4d5050ef          	jal	8001b3e6 <printf>
    80015716:	4529                	li	a0,10
    80015718:	3a1040ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    8001571c:	450d                	li	a0,3
    8001571e:	bc0eb0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80015722:	ebfea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015726:	900eb0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    8001572a:	4509                	li	a0,2
    8001572c:	bb2eb0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80015730:	f85ea0ef          	jal	800006b4 <vspt_init>

    goto_priv(PRIV_M);
    80015734:	4511                	li	a0,4
    80015736:	ba8eb0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    8001573a:	000407b7          	lui	a5,0x40
    8001573e:	2007a073          	csrs	vsstatus,a5

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80015742:	4509                	li	a0,2
    80015744:	b9aeb0ef          	jal	80000ade <goto_priv>

    //执行hsvd指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80015748:	0ff0000f          	fence
    8001574c:	4785                	li	a5,1
    8001574e:	00028417          	auipc	s0,0x28
    80015752:	8c240413          	add	s0,s0,-1854 # 8003d010 <excpt>
    80015756:	00f41023          	sh	a5,0(s0)
    8001575a:	00028797          	auipc	a5,0x28
    8001575e:	8e07b723          	sd	zero,-1810(a5) # 8003d048 <excpt+0x38>
    80015762:	0ff0000f          	fence
    80015766:	37ab77b7          	lui	a5,0x37ab7
    8001576a:	00080737          	lui	a4,0x80
    8001576e:	078a                	sll	a5,a5,0x2
    80015770:	0765                	add	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80015772:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015776:	0736                	sll	a4,a4,0xd
    80015778:	00f73023          	sd	a5,0(a4)
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    8001577c:	08200593          	li	a1,130
    80015780:	0000c617          	auipc	a2,0xc
    80015784:	36860613          	add	a2,a2,872 # 80021ae8 <__func__.1+0x4e40>
    80015788:	00008517          	auipc	a0,0x8
    8001578c:	82050513          	add	a0,a0,-2016 # 8001cfa8 <__func__.1+0x300>
    80015790:	457050ef          	jal	8001b3e6 <printf>
    80015794:	00144783          	lbu	a5,1(s0)
    80015798:	00007597          	auipc	a1,0x7
    8001579c:	7d858593          	add	a1,a1,2008 # 8001cf70 <__func__.1+0x2c8>
    800157a0:	c789                	beqz	a5,800157aa <store_guest_page_fault_10+0xae>
    800157a2:	00007597          	auipc	a1,0x7
    800157a6:	7de58593          	add	a1,a1,2014 # 8001cf80 <__func__.1+0x2d8>
    800157aa:	00008517          	auipc	a0,0x8
    800157ae:	81650513          	add	a0,a0,-2026 # 8001cfc0 <__func__.1+0x318>
    800157b2:	435050ef          	jal	8001b3e6 <printf>
    800157b6:	00144783          	lbu	a5,1(s0)
    800157ba:	e3b1                	bnez	a5,800157fe <store_guest_page_fault_10+0x102>
    800157bc:	4529                	li	a0,10
    800157be:	2fb040ef          	jal	8001a2b8 <putchar>
    800157c2:	00144783          	lbu	a5,1(s0)
    800157c6:	e795                	bnez	a5,800157f2 <store_guest_page_fault_10+0xf6>
    800157c8:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    800157ca:	00007597          	auipc	a1,0x7
    800157ce:	7a658593          	add	a1,a1,1958 # 8001cf70 <__func__.1+0x2c8>
    800157d2:	00008517          	auipc	a0,0x8
    800157d6:	85650513          	add	a0,a0,-1962 # 8001d028 <__func__.1+0x380>
    800157da:	40d050ef          	jal	8001b3e6 <printf>
    800157de:	4511                	li	a0,4
    800157e0:	afeeb0ef          	jal	80000ade <goto_priv>
    800157e4:	b43eb0ef          	jal	80001326 <reset_state>
}
    800157e8:	60a2                	ld	ra,8(sp)
    800157ea:	8522                	mv	a0,s0
    800157ec:	6402                	ld	s0,0(sp)
    800157ee:	0141                	add	sp,sp,16
    800157f0:	8082                	ret
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    800157f2:	4401                	li	s0,0
    TEST_END();
    800157f4:	00007597          	auipc	a1,0x7
    800157f8:	78c58593          	add	a1,a1,1932 # 8001cf80 <__func__.1+0x2d8>
    800157fc:	bfd9                	j	800157d2 <store_guest_page_fault_10+0xd6>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    800157fe:	00007517          	auipc	a0,0x7
    80015802:	7ca50513          	add	a0,a0,1994 # 8001cfc8 <__func__.1+0x320>
    80015806:	3e1050ef          	jal	8001b3e6 <printf>
    8001580a:	02900513          	li	a0,41
    8001580e:	2ab040ef          	jal	8001a2b8 <putchar>
    80015812:	b76d                	j	800157bc <store_guest_page_fault_10+0xc0>

0000000080015814 <amo_guest_page_fault_1>:

bool amo_guest_page_fault_1(){
    80015814:	1101                	add	sp,sp,-32

    TEST_START();
    80015816:	00007597          	auipc	a1,0x7
    8001581a:	eea58593          	add	a1,a1,-278 # 8001c700 <__func__.10>
    8001581e:	00007517          	auipc	a0,0x7
    80015822:	77250513          	add	a0,a0,1906 # 8001cf90 <__func__.1+0x2e8>
bool amo_guest_page_fault_1(){
    80015826:	ec06                	sd	ra,24(sp)
    80015828:	e822                	sd	s0,16(sp)
    8001582a:	e426                	sd	s1,8(sp)
    8001582c:	e04a                	sd	s2,0(sp)
    TEST_START();
    8001582e:	3b9050ef          	jal	8001b3e6 <printf>
    80015832:	4529                	li	a0,10
    80015834:	285040ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80015838:	450d                	li	a0,3
    8001583a:	aa4eb0ef          	jal	80000ade <goto_priv>
    hspt_init();
    8001583e:	da3ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015842:	fe5ea0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80015846:	4509                	li	a0,2
    80015848:	a96eb0ef          	jal	80000ade <goto_priv>
    vspt_init();
    8001584c:	e69ea0ef          	jal	800006b4 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0x1;  
    goto_priv(PRIV_VS);
    80015850:	4509                	li	a0,2
    80015852:	a8ceb0ef          	jal	80000ade <goto_priv>


    //执行原子指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80015856:	0ff0000f          	fence
    8001585a:	4785                	li	a5,1
    8001585c:	00027417          	auipc	s0,0x27
    80015860:	7b440413          	add	s0,s0,1972 # 8003d010 <excpt>
    80015864:	00f41023          	sh	a5,0(s0)
    80015868:	00027797          	auipc	a5,0x27
    8001586c:	7e07b023          	sd	zero,2016(a5) # 8003d048 <excpt+0x38>
    80015870:	0ff0000f          	fence
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80015874:	001007b7          	lui	a5,0x100
    80015878:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8001587c:	4705                	li	a4,1
    8001587e:	07b2                	sll	a5,a5,0xc
    80015880:	00e7a72f          	amoadd.w	a4,a4,(a5)


    addr = hs_page_base(VSRWX_GI);
    value = amoadd_w(addr,value);
    
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    80015884:	08200593          	li	a1,130
    80015888:	0000d617          	auipc	a2,0xd
    8001588c:	d3060613          	add	a2,a2,-720 # 800225b8 <__func__.1+0x5910>
    80015890:	00007517          	auipc	a0,0x7
    80015894:	71850513          	add	a0,a0,1816 # 8001cfa8 <__func__.1+0x300>
    value = amoadd_w(addr,value);
    80015898:	02071493          	sll	s1,a4,0x20
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    8001589c:	34b050ef          	jal	8001b3e6 <printf>
    800158a0:	00144783          	lbu	a5,1(s0)
    value = amoadd_w(addr,value);
    800158a4:	9081                	srl	s1,s1,0x20
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    800158a6:	00007597          	auipc	a1,0x7
    800158aa:	6da58593          	add	a1,a1,1754 # 8001cf80 <__func__.1+0x2d8>
    800158ae:	c789                	beqz	a5,800158b8 <amo_guest_page_fault_1+0xa4>
    800158b0:	6418                	ld	a4,8(s0)
    800158b2:	47dd                	li	a5,23
    800158b4:	12f70463          	beq	a4,a5,800159dc <amo_guest_page_fault_1+0x1c8>
    800158b8:	00007517          	auipc	a0,0x7
    800158bc:	70850513          	add	a0,a0,1800 # 8001cfc0 <__func__.1+0x318>
    800158c0:	327050ef          	jal	8001b3e6 <printf>
    800158c4:	00144783          	lbu	a5,1(s0)
    800158c8:	c789                	beqz	a5,800158d2 <amo_guest_page_fault_1+0xbe>
    800158ca:	6418                	ld	a4,8(s0)
    800158cc:	47dd                	li	a5,23
    800158ce:	00f70c63          	beq	a4,a5,800158e6 <amo_guest_page_fault_1+0xd2>
    800158d2:	00007517          	auipc	a0,0x7
    800158d6:	6f650513          	add	a0,a0,1782 # 8001cfc8 <__func__.1+0x320>
    800158da:	30d050ef          	jal	8001b3e6 <printf>
    800158de:	02900513          	li	a0,41
    800158e2:	1d7040ef          	jal	8001a2b8 <putchar>
    800158e6:	4529                	li	a0,10
    800158e8:	1d1040ef          	jal	8001a2b8 <putchar>
    800158ec:	00144783          	lbu	a5,1(s0)
    800158f0:	4901                	li	s2,0
    800158f2:	c791                	beqz	a5,800158fe <amo_guest_page_fault_1+0xea>
    800158f4:	00843903          	ld	s2,8(s0)
    800158f8:	1925                	add	s2,s2,-23
    800158fa:	00193913          	seqz	s2,s2
        excpt.cause == CAUSE_SGPF
    );


    //执行原子相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    800158fe:	0ff0000f          	fence
    80015902:	4785                	li	a5,1
    80015904:	00f41023          	sh	a5,0(s0)
    80015908:	00027797          	auipc	a5,0x27
    8001590c:	7407b023          	sd	zero,1856(a5) # 8003d048 <excpt+0x38>
    80015910:	0ff0000f          	fence
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    80015914:	001007b7          	lui	a5,0x100
    80015918:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8001591c:	8726                	mv	a4,s1
    8001591e:	07b2                	sll	a5,a5,0xc
    80015920:	a0e7b72f          	amomax.d	a4,a4,(a5)
    vaddr = hs_page_base(VSRWX_GI);
    value = amomax_d(vaddr,value);

    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80015924:	08200593          	li	a1,130
    80015928:	0000d617          	auipc	a2,0xd
    8001592c:	ce060613          	add	a2,a2,-800 # 80022608 <__func__.1+0x5960>
    80015930:	00007517          	auipc	a0,0x7
    80015934:	67850513          	add	a0,a0,1656 # 8001cfa8 <__func__.1+0x300>
    80015938:	2af050ef          	jal	8001b3e6 <printf>
    8001593c:	00144783          	lbu	a5,1(s0)
    80015940:	00007597          	auipc	a1,0x7
    80015944:	64058593          	add	a1,a1,1600 # 8001cf80 <__func__.1+0x2d8>
    80015948:	c789                	beqz	a5,80015952 <amo_guest_page_fault_1+0x13e>
    8001594a:	6418                	ld	a4,8(s0)
    8001594c:	47dd                	li	a5,23
    8001594e:	08f70263          	beq	a4,a5,800159d2 <amo_guest_page_fault_1+0x1be>
    80015952:	00007517          	auipc	a0,0x7
    80015956:	66e50513          	add	a0,a0,1646 # 8001cfc0 <__func__.1+0x318>
    8001595a:	28d050ef          	jal	8001b3e6 <printf>
    8001595e:	00144783          	lbu	a5,1(s0)
    80015962:	c789                	beqz	a5,8001596c <amo_guest_page_fault_1+0x158>
    80015964:	6418                	ld	a4,8(s0)
    80015966:	47dd                	li	a5,23
    80015968:	00f70c63          	beq	a4,a5,80015980 <amo_guest_page_fault_1+0x16c>
    8001596c:	00007517          	auipc	a0,0x7
    80015970:	65c50513          	add	a0,a0,1628 # 8001cfc8 <__func__.1+0x320>
    80015974:	273050ef          	jal	8001b3e6 <printf>
    80015978:	02900513          	li	a0,41
    8001597c:	13d040ef          	jal	8001a2b8 <putchar>
    80015980:	4529                	li	a0,10
    80015982:	137040ef          	jal	8001a2b8 <putchar>
    80015986:	04090063          	beqz	s2,800159c6 <amo_guest_page_fault_1+0x1b2>
    8001598a:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    8001598e:	00007597          	auipc	a1,0x7
    80015992:	5f258593          	add	a1,a1,1522 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80015996:	c491                	beqz	s1,800159a2 <amo_guest_page_fault_1+0x18e>
    80015998:	6418                	ld	a4,8(s0)
    8001599a:	47dd                	li	a5,23
    8001599c:	04f70563          	beq	a4,a5,800159e6 <amo_guest_page_fault_1+0x1d2>
    800159a0:	4481                	li	s1,0
    TEST_END();
    800159a2:	00007517          	auipc	a0,0x7
    800159a6:	68650513          	add	a0,a0,1670 # 8001d028 <__func__.1+0x380>
    800159aa:	23d050ef          	jal	8001b3e6 <printf>
    800159ae:	4511                	li	a0,4
    800159b0:	92eeb0ef          	jal	80000ade <goto_priv>
    800159b4:	973eb0ef          	jal	80001326 <reset_state>
}
    800159b8:	60e2                	ld	ra,24(sp)
    800159ba:	6442                	ld	s0,16(sp)
    800159bc:	6902                	ld	s2,0(sp)
    800159be:	8526                	mv	a0,s1
    800159c0:	64a2                	ld	s1,8(sp)
    800159c2:	6105                	add	sp,sp,32
    800159c4:	8082                	ret
    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    800159c6:	4481                	li	s1,0
    TEST_END();
    800159c8:	00007597          	auipc	a1,0x7
    800159cc:	5b858593          	add	a1,a1,1464 # 8001cf80 <__func__.1+0x2d8>
    800159d0:	bfc9                	j	800159a2 <amo_guest_page_fault_1+0x18e>
    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    800159d2:	00007597          	auipc	a1,0x7
    800159d6:	59e58593          	add	a1,a1,1438 # 8001cf70 <__func__.1+0x2c8>
    800159da:	bfa5                	j	80015952 <amo_guest_page_fault_1+0x13e>
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    800159dc:	00007597          	auipc	a1,0x7
    800159e0:	59458593          	add	a1,a1,1428 # 8001cf70 <__func__.1+0x2c8>
    800159e4:	bdd1                	j	800158b8 <amo_guest_page_fault_1+0xa4>
    TEST_END();
    800159e6:	00007597          	auipc	a1,0x7
    800159ea:	58a58593          	add	a1,a1,1418 # 8001cf70 <__func__.1+0x2c8>
    800159ee:	bf55                	j	800159a2 <amo_guest_page_fault_1+0x18e>

00000000800159f0 <amo_guest_page_fault_2>:

bool amo_guest_page_fault_2(){
    800159f0:	1101                	add	sp,sp,-32

    TEST_START();
    800159f2:	00007597          	auipc	a1,0x7
    800159f6:	d2658593          	add	a1,a1,-730 # 8001c718 <__func__.9>
    800159fa:	00007517          	auipc	a0,0x7
    800159fe:	59650513          	add	a0,a0,1430 # 8001cf90 <__func__.1+0x2e8>
bool amo_guest_page_fault_2(){
    80015a02:	ec06                	sd	ra,24(sp)
    80015a04:	e822                	sd	s0,16(sp)
    80015a06:	e426                	sd	s1,8(sp)
    TEST_START();
    80015a08:	1df050ef          	jal	8001b3e6 <printf>
    80015a0c:	4529                	li	a0,10
    80015a0e:	0ab040ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80015a12:	450d                	li	a0,3
    80015a14:	8caeb0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80015a18:	bc9ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015a1c:	e0bea0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80015a20:	4509                	li	a0,2
    80015a22:	8bceb0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80015a26:	c8fea0ef          	jal	800006b4 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    80015a2a:	4509                	li	a0,2
    80015a2c:	8b2eb0ef          	jal	80000ade <goto_priv>
    //执行原子相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    80015a30:	0ff0000f          	fence
    80015a34:	4785                	li	a5,1
    80015a36:	00027417          	auipc	s0,0x27
    80015a3a:	5da40413          	add	s0,s0,1498 # 8003d010 <excpt>
    80015a3e:	00f41023          	sh	a5,0(s0)
    80015a42:	00027797          	auipc	a5,0x27
    80015a46:	6007b323          	sd	zero,1542(a5) # 8003d048 <excpt+0x38>
    80015a4a:	0ff0000f          	fence
    addr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80015a4e:	000807b7          	lui	a5,0x80
    80015a52:	1007b073          	csrc	sstatus,a5
AMO_INSTRUCTION(amoswap_d, "amoswap.d", uint64_t);
    80015a56:	37ab77b7          	lui	a5,0x37ab7
    80015a5a:	00100737          	lui	a4,0x100
    80015a5e:	078a                	sll	a5,a5,0x2
    80015a60:	06570713          	add	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80015a64:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015a68:	0732                	sll	a4,a4,0xc
    80015a6a:	08f737af          	amoswap.d	a5,a5,(a4)
    value = amoswap_d(addr,value);
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80015a6e:	08200593          	li	a1,130
    80015a72:	0000d617          	auipc	a2,0xd
    80015a76:	bf660613          	add	a2,a2,-1034 # 80022668 <__func__.1+0x59c0>
    80015a7a:	00007517          	auipc	a0,0x7
    80015a7e:	52e50513          	add	a0,a0,1326 # 8001cfa8 <__func__.1+0x300>
    80015a82:	165050ef          	jal	8001b3e6 <printf>
    80015a86:	00144783          	lbu	a5,1(s0)
    80015a8a:	00007597          	auipc	a1,0x7
    80015a8e:	4f658593          	add	a1,a1,1270 # 8001cf80 <__func__.1+0x2d8>
    80015a92:	c789                	beqz	a5,80015a9c <amo_guest_page_fault_2+0xac>
    80015a94:	6418                	ld	a4,8(s0)
    80015a96:	47dd                	li	a5,23
    80015a98:	06f70e63          	beq	a4,a5,80015b14 <amo_guest_page_fault_2+0x124>
    80015a9c:	00007517          	auipc	a0,0x7
    80015aa0:	52450513          	add	a0,a0,1316 # 8001cfc0 <__func__.1+0x318>
    80015aa4:	143050ef          	jal	8001b3e6 <printf>
    80015aa8:	00144783          	lbu	a5,1(s0)
    80015aac:	c789                	beqz	a5,80015ab6 <amo_guest_page_fault_2+0xc6>
    80015aae:	6418                	ld	a4,8(s0)
    80015ab0:	47dd                	li	a5,23
    80015ab2:	00f70c63          	beq	a4,a5,80015aca <amo_guest_page_fault_2+0xda>
    80015ab6:	00007517          	auipc	a0,0x7
    80015aba:	51250513          	add	a0,a0,1298 # 8001cfc8 <__func__.1+0x320>
    80015abe:	129050ef          	jal	8001b3e6 <printf>
    80015ac2:	02900513          	li	a0,41
    80015ac6:	7f2040ef          	jal	8001a2b8 <putchar>
    80015aca:	4529                	li	a0,10
    80015acc:	7ec040ef          	jal	8001a2b8 <putchar>
    80015ad0:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80015ad4:	00007597          	auipc	a1,0x7
    80015ad8:	4ac58593          	add	a1,a1,1196 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80015adc:	c491                	beqz	s1,80015ae8 <amo_guest_page_fault_2+0xf8>
    80015ade:	6418                	ld	a4,8(s0)
    80015ae0:	47dd                	li	a5,23
    80015ae2:	02f70463          	beq	a4,a5,80015b0a <amo_guest_page_fault_2+0x11a>
    80015ae6:	4481                	li	s1,0
    TEST_END();
    80015ae8:	00007517          	auipc	a0,0x7
    80015aec:	54050513          	add	a0,a0,1344 # 8001d028 <__func__.1+0x380>
    80015af0:	0f7050ef          	jal	8001b3e6 <printf>
    80015af4:	4511                	li	a0,4
    80015af6:	fe9ea0ef          	jal	80000ade <goto_priv>
    80015afa:	82deb0ef          	jal	80001326 <reset_state>
}
    80015afe:	60e2                	ld	ra,24(sp)
    80015b00:	6442                	ld	s0,16(sp)
    80015b02:	8526                	mv	a0,s1
    80015b04:	64a2                	ld	s1,8(sp)
    80015b06:	6105                	add	sp,sp,32
    80015b08:	8082                	ret
    TEST_END();
    80015b0a:	00007597          	auipc	a1,0x7
    80015b0e:	46658593          	add	a1,a1,1126 # 8001cf70 <__func__.1+0x2c8>
    80015b12:	bfd9                	j	80015ae8 <amo_guest_page_fault_2+0xf8>
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80015b14:	00007597          	auipc	a1,0x7
    80015b18:	45c58593          	add	a1,a1,1116 # 8001cf70 <__func__.1+0x2c8>
    80015b1c:	b741                	j	80015a9c <amo_guest_page_fault_2+0xac>

0000000080015b1e <amo_guest_page_fault_3>:

bool amo_guest_page_fault_3(){
    80015b1e:	1101                	add	sp,sp,-32

    TEST_START();
    80015b20:	00007597          	auipc	a1,0x7
    80015b24:	c1058593          	add	a1,a1,-1008 # 8001c730 <__func__.8>
    80015b28:	00007517          	auipc	a0,0x7
    80015b2c:	46850513          	add	a0,a0,1128 # 8001cf90 <__func__.1+0x2e8>
bool amo_guest_page_fault_3(){
    80015b30:	ec06                	sd	ra,24(sp)
    80015b32:	e822                	sd	s0,16(sp)
    80015b34:	e426                	sd	s1,8(sp)
    TEST_START();
    80015b36:	0b1050ef          	jal	8001b3e6 <printf>
    80015b3a:	4529                	li	a0,10
    80015b3c:	77c040ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80015b40:	450d                	li	a0,3
    80015b42:	f9dea0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80015b46:	a9bea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015b4a:	cddea0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80015b4e:	4509                	li	a0,2
    80015b50:	f8fea0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80015b54:	b61ea0ef          	jal	800006b4 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    80015b58:	4509                	li	a0,2
    80015b5a:	f85ea0ef          	jal	80000ade <goto_priv>


    //执行原子相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80015b5e:	0ff0000f          	fence
    80015b62:	4785                	li	a5,1
    80015b64:	00027417          	auipc	s0,0x27
    80015b68:	4ac40413          	add	s0,s0,1196 # 8003d010 <excpt>
    80015b6c:	00f41023          	sh	a5,0(s0)
    80015b70:	00027797          	auipc	a5,0x27
    80015b74:	4c07bc23          	sd	zero,1240(a5) # 8003d048 <excpt+0x38>
    80015b78:	0ff0000f          	fence
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80015b7c:	000807b7          	lui	a5,0x80
    80015b80:	1007a073          	csrs	sstatus,a5
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    80015b84:	37ab77b7          	lui	a5,0x37ab7
    80015b88:	00100737          	lui	a4,0x100
    80015b8c:	078a                	sll	a5,a5,0x2
    80015b8e:	06570713          	add	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80015b92:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015b96:	0732                	sll	a4,a4,0xc
    80015b98:	40f737af          	amoor.d	a5,a5,(a4)
    value = amoor_d(vaddr,value);
    TEST_ASSERT("s mode amoor_d when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80015b9c:	08200593          	li	a1,130
    80015ba0:	0000d617          	auipc	a2,0xd
    80015ba4:	b3060613          	add	a2,a2,-1232 # 800226d0 <__func__.1+0x5a28>
    80015ba8:	00007517          	auipc	a0,0x7
    80015bac:	40050513          	add	a0,a0,1024 # 8001cfa8 <__func__.1+0x300>
    80015bb0:	037050ef          	jal	8001b3e6 <printf>
    80015bb4:	00144783          	lbu	a5,1(s0)
    80015bb8:	00007597          	auipc	a1,0x7
    80015bbc:	3c858593          	add	a1,a1,968 # 8001cf80 <__func__.1+0x2d8>
    80015bc0:	c789                	beqz	a5,80015bca <amo_guest_page_fault_3+0xac>
    80015bc2:	6418                	ld	a4,8(s0)
    80015bc4:	47dd                	li	a5,23
    80015bc6:	08f70663          	beq	a4,a5,80015c52 <amo_guest_page_fault_3+0x134>
    80015bca:	00007517          	auipc	a0,0x7
    80015bce:	3f650513          	add	a0,a0,1014 # 8001cfc0 <__func__.1+0x318>
    80015bd2:	015050ef          	jal	8001b3e6 <printf>
    80015bd6:	00144783          	lbu	a5,1(s0)
    80015bda:	c789                	beqz	a5,80015be4 <amo_guest_page_fault_3+0xc6>
    80015bdc:	6418                	ld	a4,8(s0)
    80015bde:	47dd                	li	a5,23
    80015be0:	00f70c63          	beq	a4,a5,80015bf8 <amo_guest_page_fault_3+0xda>
    80015be4:	00007517          	auipc	a0,0x7
    80015be8:	3e450513          	add	a0,a0,996 # 8001cfc8 <__func__.1+0x320>
    80015bec:	7fa050ef          	jal	8001b3e6 <printf>
    80015bf0:	02900513          	li	a0,41
    80015bf4:	6c4040ef          	jal	8001a2b8 <putchar>
    80015bf8:	4529                	li	a0,10
    80015bfa:	6be040ef          	jal	8001a2b8 <putchar>
    80015bfe:	00144483          	lbu	s1,1(s0)
    80015c02:	c489                	beqz	s1,80015c0c <amo_guest_page_fault_3+0xee>
    80015c04:	6418                	ld	a4,8(s0)
    80015c06:	47dd                	li	a5,23
    80015c08:	02f70c63          	beq	a4,a5,80015c40 <amo_guest_page_fault_3+0x122>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80015c0c:	000807b7          	lui	a5,0x80
    80015c10:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("s mode amoor_d when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80015c14:	4481                	li	s1,0

    TEST_END();
    80015c16:	00007597          	auipc	a1,0x7
    80015c1a:	36a58593          	add	a1,a1,874 # 8001cf80 <__func__.1+0x2d8>
    80015c1e:	00007517          	auipc	a0,0x7
    80015c22:	40a50513          	add	a0,a0,1034 # 8001d028 <__func__.1+0x380>
    80015c26:	7c0050ef          	jal	8001b3e6 <printf>
    80015c2a:	4511                	li	a0,4
    80015c2c:	eb3ea0ef          	jal	80000ade <goto_priv>
    80015c30:	ef6eb0ef          	jal	80001326 <reset_state>
}
    80015c34:	60e2                	ld	ra,24(sp)
    80015c36:	6442                	ld	s0,16(sp)
    80015c38:	8526                	mv	a0,s1
    80015c3a:	64a2                	ld	s1,8(sp)
    80015c3c:	6105                	add	sp,sp,32
    80015c3e:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80015c40:	000807b7          	lui	a5,0x80
    80015c44:	1007b073          	csrc	sstatus,a5
    TEST_END();
    80015c48:	00007597          	auipc	a1,0x7
    80015c4c:	32858593          	add	a1,a1,808 # 8001cf70 <__func__.1+0x2c8>
    80015c50:	b7f9                	j	80015c1e <amo_guest_page_fault_3+0x100>
    TEST_ASSERT("s mode amoor_d when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80015c52:	00007597          	auipc	a1,0x7
    80015c56:	31e58593          	add	a1,a1,798 # 8001cf70 <__func__.1+0x2c8>
    80015c5a:	bf85                	j	80015bca <amo_guest_page_fault_3+0xac>

0000000080015c5c <amo_guest_page_fault_4>:

bool amo_guest_page_fault_4(){
    80015c5c:	1101                	add	sp,sp,-32

    TEST_START();
    80015c5e:	00007597          	auipc	a1,0x7
    80015c62:	aea58593          	add	a1,a1,-1302 # 8001c748 <__func__.7>
    80015c66:	00007517          	auipc	a0,0x7
    80015c6a:	32a50513          	add	a0,a0,810 # 8001cf90 <__func__.1+0x2e8>
bool amo_guest_page_fault_4(){
    80015c6e:	ec06                	sd	ra,24(sp)
    80015c70:	e822                	sd	s0,16(sp)
    80015c72:	e426                	sd	s1,8(sp)
    TEST_START();
    80015c74:	772050ef          	jal	8001b3e6 <printf>
    80015c78:	4529                	li	a0,10
    80015c7a:	63e040ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80015c7e:	450d                	li	a0,3
    80015c80:	e5fea0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80015c84:	95dea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015c88:	b9fea0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80015c8c:	4509                	li	a0,2
    80015c8e:	e51ea0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80015c92:	a23ea0ef          	jal	800006b4 <vspt_init>
    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  

    goto_priv(PRIV_M);
    80015c96:	4511                	li	a0,4
    80015c98:	e47ea0ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80015c9c:	000407b7          	lui	a5,0x40
    80015ca0:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    80015ca4:	450d                	li	a0,3
    80015ca6:	e39ea0ef          	jal	80000ade <goto_priv>


    //执行原子相关指令需要二级地址翻页时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80015caa:	0ff0000f          	fence
    80015cae:	4785                	li	a5,1
    80015cb0:	00027417          	auipc	s0,0x27
    80015cb4:	36040413          	add	s0,s0,864 # 8003d010 <excpt>
    80015cb8:	00f41023          	sh	a5,0(s0)
    80015cbc:	00027797          	auipc	a5,0x27
    80015cc0:	3807b623          	sd	zero,908(a5) # 8003d048 <excpt+0x38>
    80015cc4:	0ff0000f          	fence
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    80015cc8:	37ab77b7          	lui	a5,0x37ab7
    80015ccc:	00080737          	lui	a4,0x80
    80015cd0:	078a                	sll	a5,a5,0x2
    80015cd2:	076d                	add	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    80015cd4:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015cd8:	0736                	sll	a4,a4,0xd
    80015cda:	80f737af          	amomin.d	a5,a5,(a4)
    addr = hs_page_base(VSURWX_GUX);

    value = amomin_d(addr,value);
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    80015cde:	08200593          	li	a1,130
    80015ce2:	0000d617          	auipc	a2,0xd
    80015ce6:	a5e60613          	add	a2,a2,-1442 # 80022740 <__func__.1+0x5a98>
    80015cea:	00007517          	auipc	a0,0x7
    80015cee:	2be50513          	add	a0,a0,702 # 8001cfa8 <__func__.1+0x300>
    80015cf2:	6f4050ef          	jal	8001b3e6 <printf>
    80015cf6:	00144783          	lbu	a5,1(s0)
    80015cfa:	00007597          	auipc	a1,0x7
    80015cfe:	28658593          	add	a1,a1,646 # 8001cf80 <__func__.1+0x2d8>
    80015d02:	c789                	beqz	a5,80015d0c <amo_guest_page_fault_4+0xb0>
    80015d04:	6418                	ld	a4,8(s0)
    80015d06:	47bd                	li	a5,15
    80015d08:	06f70e63          	beq	a4,a5,80015d84 <amo_guest_page_fault_4+0x128>
    80015d0c:	00007517          	auipc	a0,0x7
    80015d10:	2b450513          	add	a0,a0,692 # 8001cfc0 <__func__.1+0x318>
    80015d14:	6d2050ef          	jal	8001b3e6 <printf>
    80015d18:	00144783          	lbu	a5,1(s0)
    80015d1c:	c789                	beqz	a5,80015d26 <amo_guest_page_fault_4+0xca>
    80015d1e:	6418                	ld	a4,8(s0)
    80015d20:	47bd                	li	a5,15
    80015d22:	00f70c63          	beq	a4,a5,80015d3a <amo_guest_page_fault_4+0xde>
    80015d26:	00007517          	auipc	a0,0x7
    80015d2a:	2a250513          	add	a0,a0,674 # 8001cfc8 <__func__.1+0x320>
    80015d2e:	6b8050ef          	jal	8001b3e6 <printf>
    80015d32:	02900513          	li	a0,41
    80015d36:	582040ef          	jal	8001a2b8 <putchar>
    80015d3a:	4529                	li	a0,10
    80015d3c:	57c040ef          	jal	8001a2b8 <putchar>
    80015d40:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80015d44:	00007597          	auipc	a1,0x7
    80015d48:	23c58593          	add	a1,a1,572 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    80015d4c:	c491                	beqz	s1,80015d58 <amo_guest_page_fault_4+0xfc>
    80015d4e:	6418                	ld	a4,8(s0)
    80015d50:	47bd                	li	a5,15
    80015d52:	02f70463          	beq	a4,a5,80015d7a <amo_guest_page_fault_4+0x11e>
    80015d56:	4481                	li	s1,0
    TEST_END();
    80015d58:	00007517          	auipc	a0,0x7
    80015d5c:	2d050513          	add	a0,a0,720 # 8001d028 <__func__.1+0x380>
    80015d60:	686050ef          	jal	8001b3e6 <printf>
    80015d64:	4511                	li	a0,4
    80015d66:	d79ea0ef          	jal	80000ade <goto_priv>
    80015d6a:	dbceb0ef          	jal	80001326 <reset_state>
}
    80015d6e:	60e2                	ld	ra,24(sp)
    80015d70:	6442                	ld	s0,16(sp)
    80015d72:	8526                	mv	a0,s1
    80015d74:	64a2                	ld	s1,8(sp)
    80015d76:	6105                	add	sp,sp,32
    80015d78:	8082                	ret
    TEST_END();
    80015d7a:	00007597          	auipc	a1,0x7
    80015d7e:	1f658593          	add	a1,a1,502 # 8001cf70 <__func__.1+0x2c8>
    80015d82:	bfd9                	j	80015d58 <amo_guest_page_fault_4+0xfc>
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    80015d84:	00007597          	auipc	a1,0x7
    80015d88:	1ec58593          	add	a1,a1,492 # 8001cf70 <__func__.1+0x2c8>
    80015d8c:	b741                	j	80015d0c <amo_guest_page_fault_4+0xb0>

0000000080015d8e <amo_guest_page_fault_5>:

bool amo_guest_page_fault_5(){
    80015d8e:	1141                	add	sp,sp,-16

    TEST_START();
    80015d90:	00007597          	auipc	a1,0x7
    80015d94:	9d058593          	add	a1,a1,-1584 # 8001c760 <__func__.6>
    80015d98:	00007517          	auipc	a0,0x7
    80015d9c:	1f850513          	add	a0,a0,504 # 8001cf90 <__func__.1+0x2e8>
bool amo_guest_page_fault_5(){
    80015da0:	e406                	sd	ra,8(sp)
    80015da2:	e022                	sd	s0,0(sp)
    TEST_START();
    80015da4:	642050ef          	jal	8001b3e6 <printf>
    80015da8:	4529                	li	a0,10
    80015daa:	50e040ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80015dae:	450d                	li	a0,3
    80015db0:	d2fea0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80015db4:	82dea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015db8:	a6fea0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80015dbc:	4509                	li	a0,2
    80015dbe:	d21ea0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80015dc2:	8f3ea0ef          	jal	800006b4 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_M);
    80015dc6:	4511                	li	a0,4
    80015dc8:	d17ea0ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    80015dcc:	000407b7          	lui	a5,0x40
    80015dd0:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    80015dd4:	450d                	li	a0,3
    80015dd6:	d09ea0ef          	jal	80000ade <goto_priv>

    //执行原子指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80015dda:	0ff0000f          	fence
    80015dde:	4785                	li	a5,1
    80015de0:	00027417          	auipc	s0,0x27
    80015de4:	23040413          	add	s0,s0,560 # 8003d010 <excpt>
    80015de8:	00f41023          	sh	a5,0(s0)
    80015dec:	00027797          	auipc	a5,0x27
    80015df0:	2407be23          	sd	zero,604(a5) # 8003d048 <excpt+0x38>
    80015df4:	0ff0000f          	fence
AMO_INSTRUCTION(amominu_d, "amominu.d", uint64_t);
    80015df8:	37ab77b7          	lui	a5,0x37ab7
    80015dfc:	00080737          	lui	a4,0x80
    80015e00:	078a                	sll	a5,a5,0x2
    80015e02:	0765                	add	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80015e04:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015e08:	0736                	sll	a4,a4,0xd
    80015e0a:	c0f737af          	amominu.d	a5,a5,(a4)
    value = amominu_d(vaddr,value);

    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    80015e0e:	08200593          	li	a1,130
    80015e12:	0000d617          	auipc	a2,0xd
    80015e16:	96e60613          	add	a2,a2,-1682 # 80022780 <__func__.1+0x5ad8>
    80015e1a:	00007517          	auipc	a0,0x7
    80015e1e:	18e50513          	add	a0,a0,398 # 8001cfa8 <__func__.1+0x300>
    80015e22:	5c4050ef          	jal	8001b3e6 <printf>
    80015e26:	00144783          	lbu	a5,1(s0)
    80015e2a:	00007597          	auipc	a1,0x7
    80015e2e:	14658593          	add	a1,a1,326 # 8001cf70 <__func__.1+0x2c8>
    80015e32:	c789                	beqz	a5,80015e3c <amo_guest_page_fault_5+0xae>
    80015e34:	00007597          	auipc	a1,0x7
    80015e38:	14c58593          	add	a1,a1,332 # 8001cf80 <__func__.1+0x2d8>
    80015e3c:	00007517          	auipc	a0,0x7
    80015e40:	18450513          	add	a0,a0,388 # 8001cfc0 <__func__.1+0x318>
    80015e44:	5a2050ef          	jal	8001b3e6 <printf>
    80015e48:	00144783          	lbu	a5,1(s0)
    80015e4c:	e3b1                	bnez	a5,80015e90 <amo_guest_page_fault_5+0x102>
    80015e4e:	4529                	li	a0,10
    80015e50:	468040ef          	jal	8001a2b8 <putchar>
    80015e54:	00144783          	lbu	a5,1(s0)
    80015e58:	e795                	bnez	a5,80015e84 <amo_guest_page_fault_5+0xf6>
    80015e5a:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80015e5c:	00007597          	auipc	a1,0x7
    80015e60:	11458593          	add	a1,a1,276 # 8001cf70 <__func__.1+0x2c8>
    80015e64:	00007517          	auipc	a0,0x7
    80015e68:	1c450513          	add	a0,a0,452 # 8001d028 <__func__.1+0x380>
    80015e6c:	57a050ef          	jal	8001b3e6 <printf>
    80015e70:	4511                	li	a0,4
    80015e72:	c6dea0ef          	jal	80000ade <goto_priv>
    80015e76:	cb0eb0ef          	jal	80001326 <reset_state>
}
    80015e7a:	60a2                	ld	ra,8(sp)
    80015e7c:	8522                	mv	a0,s0
    80015e7e:	6402                	ld	s0,0(sp)
    80015e80:	0141                	add	sp,sp,16
    80015e82:	8082                	ret
    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    80015e84:	4401                	li	s0,0
    TEST_END();
    80015e86:	00007597          	auipc	a1,0x7
    80015e8a:	0fa58593          	add	a1,a1,250 # 8001cf80 <__func__.1+0x2d8>
    80015e8e:	bfd9                	j	80015e64 <amo_guest_page_fault_5+0xd6>
    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    80015e90:	00007517          	auipc	a0,0x7
    80015e94:	13850513          	add	a0,a0,312 # 8001cfc8 <__func__.1+0x320>
    80015e98:	54e050ef          	jal	8001b3e6 <printf>
    80015e9c:	02900513          	li	a0,41
    80015ea0:	418040ef          	jal	8001a2b8 <putchar>
    80015ea4:	b76d                	j	80015e4e <amo_guest_page_fault_5+0xc0>

0000000080015ea6 <instruction_guest_page_fault_1>:


bool instruction_guest_page_fault_1(){
    80015ea6:	1101                	add	sp,sp,-32

    TEST_START();
    80015ea8:	00007597          	auipc	a1,0x7
    80015eac:	8d058593          	add	a1,a1,-1840 # 8001c778 <__func__.5>
    80015eb0:	00007517          	auipc	a0,0x7
    80015eb4:	0e050513          	add	a0,a0,224 # 8001cf90 <__func__.1+0x2e8>
bool instruction_guest_page_fault_1(){
    80015eb8:	ec06                	sd	ra,24(sp)
    80015eba:	e822                	sd	s0,16(sp)
    80015ebc:	e426                	sd	s1,8(sp)
    TEST_START();
    80015ebe:	528050ef          	jal	8001b3e6 <printf>
    80015ec2:	4529                	li	a0,10
    80015ec4:	3f4040ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80015ec8:	450d                	li	a0,3
    80015eca:	c15ea0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80015ece:	f12ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015ed2:	955ea0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80015ed6:	4509                	li	a0,2
    80015ed8:	c07ea0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80015edc:	fd8ea0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80015ee0:	4509                	li	a0,2
    80015ee2:	bfdea0ef          	jal	80000ade <goto_priv>

    //执行取指指令二级地址翻译阶段时，pte.v=0
    vaddr = hs_page_base(VSRWX_GI);
    TEST_SETUP_EXCEPT();
    80015ee6:	0ff0000f          	fence
    80015eea:	4785                	li	a5,1
    80015eec:	00027417          	auipc	s0,0x27
    80015ef0:	12440413          	add	s0,s0,292 # 8003d010 <excpt>
    80015ef4:	00f41023          	sh	a5,0(s0)
    80015ef8:	00027797          	auipc	a5,0x27
    80015efc:	1407b823          	sd	zero,336(a5) # 8003d048 <excpt+0x38>
    80015f00:	0ff0000f          	fence
    TEST_EXEC_EXCEPT(vaddr); 
    80015f04:	001007b7          	lui	a5,0x100
    80015f08:	06578793          	add	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80015f0c:	07b2                	sll	a5,a5,0xc
    80015f0e:	00000297          	auipc	t0,0x0
    80015f12:	00c28293          	add	t0,t0,12 # 80015f1a <instruction_guest_page_fault_1+0x74>
    80015f16:	02543c23          	sd	t0,56(s0)
    80015f1a:	8782                	jr	a5


    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    80015f1c:	08200593          	li	a1,130
    80015f20:	0000d617          	auipc	a2,0xd
    80015f24:	8a060613          	add	a2,a2,-1888 # 800227c0 <__func__.1+0x5b18>
    80015f28:	00007517          	auipc	a0,0x7
    80015f2c:	08050513          	add	a0,a0,128 # 8001cfa8 <__func__.1+0x300>
    80015f30:	4b6050ef          	jal	8001b3e6 <printf>
    80015f34:	00144783          	lbu	a5,1(s0)
    80015f38:	00007597          	auipc	a1,0x7
    80015f3c:	04858593          	add	a1,a1,72 # 8001cf80 <__func__.1+0x2d8>
    80015f40:	c789                	beqz	a5,80015f4a <instruction_guest_page_fault_1+0xa4>
    80015f42:	6418                	ld	a4,8(s0)
    80015f44:	47d1                	li	a5,20
    80015f46:	06f70e63          	beq	a4,a5,80015fc2 <instruction_guest_page_fault_1+0x11c>
    80015f4a:	00007517          	auipc	a0,0x7
    80015f4e:	07650513          	add	a0,a0,118 # 8001cfc0 <__func__.1+0x318>
    80015f52:	494050ef          	jal	8001b3e6 <printf>
    80015f56:	00144783          	lbu	a5,1(s0)
    80015f5a:	c789                	beqz	a5,80015f64 <instruction_guest_page_fault_1+0xbe>
    80015f5c:	6418                	ld	a4,8(s0)
    80015f5e:	47d1                	li	a5,20
    80015f60:	00f70c63          	beq	a4,a5,80015f78 <instruction_guest_page_fault_1+0xd2>
    80015f64:	00007517          	auipc	a0,0x7
    80015f68:	06450513          	add	a0,a0,100 # 8001cfc8 <__func__.1+0x320>
    80015f6c:	47a050ef          	jal	8001b3e6 <printf>
    80015f70:	02900513          	li	a0,41
    80015f74:	344040ef          	jal	8001a2b8 <putchar>
    80015f78:	4529                	li	a0,10
    80015f7a:	33e040ef          	jal	8001a2b8 <putchar>
    80015f7e:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    80015f82:	00007597          	auipc	a1,0x7
    80015f86:	ffe58593          	add	a1,a1,-2 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    80015f8a:	c491                	beqz	s1,80015f96 <instruction_guest_page_fault_1+0xf0>
    80015f8c:	6418                	ld	a4,8(s0)
    80015f8e:	47d1                	li	a5,20
    80015f90:	02f70463          	beq	a4,a5,80015fb8 <instruction_guest_page_fault_1+0x112>
    80015f94:	4481                	li	s1,0
    TEST_END();
    80015f96:	00007517          	auipc	a0,0x7
    80015f9a:	09250513          	add	a0,a0,146 # 8001d028 <__func__.1+0x380>
    80015f9e:	448050ef          	jal	8001b3e6 <printf>
    80015fa2:	4511                	li	a0,4
    80015fa4:	b3bea0ef          	jal	80000ade <goto_priv>
    80015fa8:	b7eeb0ef          	jal	80001326 <reset_state>

}
    80015fac:	60e2                	ld	ra,24(sp)
    80015fae:	6442                	ld	s0,16(sp)
    80015fb0:	8526                	mv	a0,s1
    80015fb2:	64a2                	ld	s1,8(sp)
    80015fb4:	6105                	add	sp,sp,32
    80015fb6:	8082                	ret
    TEST_END();
    80015fb8:	00007597          	auipc	a1,0x7
    80015fbc:	fb858593          	add	a1,a1,-72 # 8001cf70 <__func__.1+0x2c8>
    80015fc0:	bfd9                	j	80015f96 <instruction_guest_page_fault_1+0xf0>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    80015fc2:	00007597          	auipc	a1,0x7
    80015fc6:	fae58593          	add	a1,a1,-82 # 8001cf70 <__func__.1+0x2c8>
    80015fca:	b741                	j	80015f4a <instruction_guest_page_fault_1+0xa4>

0000000080015fcc <instruction_guest_page_fault_2>:


bool instruction_guest_page_fault_2(){
    80015fcc:	1101                	add	sp,sp,-32

    TEST_START();
    80015fce:	00006597          	auipc	a1,0x6
    80015fd2:	7ca58593          	add	a1,a1,1994 # 8001c798 <__func__.4>
    80015fd6:	00007517          	auipc	a0,0x7
    80015fda:	fba50513          	add	a0,a0,-70 # 8001cf90 <__func__.1+0x2e8>
bool instruction_guest_page_fault_2(){
    80015fde:	ec06                	sd	ra,24(sp)
    80015fe0:	e822                	sd	s0,16(sp)
    80015fe2:	e426                	sd	s1,8(sp)
    TEST_START();
    80015fe4:	402050ef          	jal	8001b3e6 <printf>
    80015fe8:	4529                	li	a0,10
    80015fea:	2ce040ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80015fee:	450d                	li	a0,3
    80015ff0:	aefea0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80015ff4:	decea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015ff8:	82fea0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80015ffc:	4509                	li	a0,2
    80015ffe:	ae1ea0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80016002:	eb2ea0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80016006:	4509                	li	a0,2
    80016008:	ad7ea0ef          	jal	80000ade <goto_priv>


    //执行取指指令二级地址翻译阶段时，pte.x=0
    vaddr = vs_page_base(VSRWX_GRW);
    TEST_SETUP_EXCEPT();
    8001600c:	0ff0000f          	fence
    80016010:	4785                	li	a5,1
    80016012:	00027417          	auipc	s0,0x27
    80016016:	ffe40413          	add	s0,s0,-2 # 8003d010 <excpt>
    8001601a:	00f41023          	sh	a5,0(s0)
    8001601e:	00027797          	auipc	a5,0x27
    80016022:	0207b523          	sd	zero,42(a5) # 8003d048 <excpt+0x38>
    80016026:	0ff0000f          	fence
    TEST_EXEC_EXCEPT(vaddr); 
    8001602a:	400137b7          	lui	a5,0x40013
    8001602e:	078a                	sll	a5,a5,0x2
    80016030:	00000297          	auipc	t0,0x0
    80016034:	00c28293          	add	t0,t0,12 # 8001603c <instruction_guest_page_fault_2+0x70>
    80016038:	02543c23          	sd	t0,56(s0)
    8001603c:	8782                	jr	a5

    // jalr_direct();

    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    8001603e:	08200593          	li	a1,130
    80016042:	0000c617          	auipc	a2,0xc
    80016046:	7de60613          	add	a2,a2,2014 # 80022820 <__func__.1+0x5b78>
    8001604a:	00007517          	auipc	a0,0x7
    8001604e:	f5e50513          	add	a0,a0,-162 # 8001cfa8 <__func__.1+0x300>
    80016052:	394050ef          	jal	8001b3e6 <printf>
    80016056:	00144783          	lbu	a5,1(s0)
    8001605a:	00007597          	auipc	a1,0x7
    8001605e:	f2658593          	add	a1,a1,-218 # 8001cf80 <__func__.1+0x2d8>
    80016062:	c789                	beqz	a5,8001606c <instruction_guest_page_fault_2+0xa0>
    80016064:	6418                	ld	a4,8(s0)
    80016066:	47d1                	li	a5,20
    80016068:	06f70e63          	beq	a4,a5,800160e4 <instruction_guest_page_fault_2+0x118>
    8001606c:	00007517          	auipc	a0,0x7
    80016070:	f5450513          	add	a0,a0,-172 # 8001cfc0 <__func__.1+0x318>
    80016074:	372050ef          	jal	8001b3e6 <printf>
    80016078:	00144783          	lbu	a5,1(s0)
    8001607c:	c789                	beqz	a5,80016086 <instruction_guest_page_fault_2+0xba>
    8001607e:	6418                	ld	a4,8(s0)
    80016080:	47d1                	li	a5,20
    80016082:	00f70c63          	beq	a4,a5,8001609a <instruction_guest_page_fault_2+0xce>
    80016086:	00007517          	auipc	a0,0x7
    8001608a:	f4250513          	add	a0,a0,-190 # 8001cfc8 <__func__.1+0x320>
    8001608e:	358050ef          	jal	8001b3e6 <printf>
    80016092:	02900513          	li	a0,41
    80016096:	222040ef          	jal	8001a2b8 <putchar>
    8001609a:	4529                	li	a0,10
    8001609c:	21c040ef          	jal	8001a2b8 <putchar>
    800160a0:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    800160a4:	00007597          	auipc	a1,0x7
    800160a8:	edc58593          	add	a1,a1,-292 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    800160ac:	c491                	beqz	s1,800160b8 <instruction_guest_page_fault_2+0xec>
    800160ae:	6418                	ld	a4,8(s0)
    800160b0:	47d1                	li	a5,20
    800160b2:	02f70463          	beq	a4,a5,800160da <instruction_guest_page_fault_2+0x10e>
    800160b6:	4481                	li	s1,0
    TEST_END();
    800160b8:	00007517          	auipc	a0,0x7
    800160bc:	f7050513          	add	a0,a0,-144 # 8001d028 <__func__.1+0x380>
    800160c0:	326050ef          	jal	8001b3e6 <printf>
    800160c4:	4511                	li	a0,4
    800160c6:	a19ea0ef          	jal	80000ade <goto_priv>
    800160ca:	a5ceb0ef          	jal	80001326 <reset_state>
}
    800160ce:	60e2                	ld	ra,24(sp)
    800160d0:	6442                	ld	s0,16(sp)
    800160d2:	8526                	mv	a0,s1
    800160d4:	64a2                	ld	s1,8(sp)
    800160d6:	6105                	add	sp,sp,32
    800160d8:	8082                	ret
    TEST_END();
    800160da:	00007597          	auipc	a1,0x7
    800160de:	e9658593          	add	a1,a1,-362 # 8001cf70 <__func__.1+0x2c8>
    800160e2:	bfd9                	j	800160b8 <instruction_guest_page_fault_2+0xec>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    800160e4:	00007597          	auipc	a1,0x7
    800160e8:	e8c58593          	add	a1,a1,-372 # 8001cf70 <__func__.1+0x2c8>
    800160ec:	b741                	j	8001606c <instruction_guest_page_fault_2+0xa0>

00000000800160ee <instruction_guest_page_fault_3>:

bool instruction_guest_page_fault_3(){
    800160ee:	1101                	add	sp,sp,-32

    TEST_START();
    800160f0:	00006597          	auipc	a1,0x6
    800160f4:	6c858593          	add	a1,a1,1736 # 8001c7b8 <__func__.3>
    800160f8:	00007517          	auipc	a0,0x7
    800160fc:	e9850513          	add	a0,a0,-360 # 8001cf90 <__func__.1+0x2e8>
bool instruction_guest_page_fault_3(){
    80016100:	ec06                	sd	ra,24(sp)
    80016102:	e822                	sd	s0,16(sp)
    80016104:	e426                	sd	s1,8(sp)
    TEST_START();
    80016106:	2e0050ef          	jal	8001b3e6 <printf>
    8001610a:	4529                	li	a0,10
    8001610c:	1ac040ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80016110:	450d                	li	a0,3
    80016112:	9cdea0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80016116:	ccaea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001611a:	f0cea0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    8001611e:	4509                	li	a0,2
    80016120:	9bfea0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80016124:	d90ea0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80016128:	4509                	li	a0,2
    8001612a:	9b5ea0ef          	jal	80000ade <goto_priv>

    //执行取指指令时，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    8001612e:	0ff0000f          	fence
    80016132:	4785                	li	a5,1
    80016134:	00027417          	auipc	s0,0x27
    80016138:	edc40413          	add	s0,s0,-292 # 8003d010 <excpt>
    8001613c:	00f41023          	sh	a5,0(s0)
    80016140:	00027797          	auipc	a5,0x27
    80016144:	f007b423          	sd	zero,-248(a5) # 8003d048 <excpt+0x38>
    80016148:	0ff0000f          	fence
    vaddr = hs_page_base(VSURWX_GURWX);


    TEST_EXEC_EXCEPT(vaddr); 
    8001614c:	000807b7          	lui	a5,0x80
    80016150:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80016152:	07b6                	sll	a5,a5,0xd
    80016154:	00000297          	auipc	t0,0x0
    80016158:	00c28293          	add	t0,t0,12 # 80016160 <instruction_guest_page_fault_3+0x72>
    8001615c:	02543c23          	sd	t0,56(s0)
    80016160:	8782                	jr	a5
    TEST_ASSERT("vs mode fetche fetche instruction of u mode leads to IPF",
    80016162:	08200593          	li	a1,130
    80016166:	0000c617          	auipc	a2,0xc
    8001616a:	71a60613          	add	a2,a2,1818 # 80022880 <__func__.1+0x5bd8>
    8001616e:	00007517          	auipc	a0,0x7
    80016172:	e3a50513          	add	a0,a0,-454 # 8001cfa8 <__func__.1+0x300>
    80016176:	270050ef          	jal	8001b3e6 <printf>
    8001617a:	00144783          	lbu	a5,1(s0)
    8001617e:	00007597          	auipc	a1,0x7
    80016182:	e0258593          	add	a1,a1,-510 # 8001cf80 <__func__.1+0x2d8>
    80016186:	c789                	beqz	a5,80016190 <instruction_guest_page_fault_3+0xa2>
    80016188:	6418                	ld	a4,8(s0)
    8001618a:	47b1                	li	a5,12
    8001618c:	06f70e63          	beq	a4,a5,80016208 <instruction_guest_page_fault_3+0x11a>
    80016190:	00007517          	auipc	a0,0x7
    80016194:	e3050513          	add	a0,a0,-464 # 8001cfc0 <__func__.1+0x318>
    80016198:	24e050ef          	jal	8001b3e6 <printf>
    8001619c:	00144783          	lbu	a5,1(s0)
    800161a0:	c789                	beqz	a5,800161aa <instruction_guest_page_fault_3+0xbc>
    800161a2:	6418                	ld	a4,8(s0)
    800161a4:	47b1                	li	a5,12
    800161a6:	00f70c63          	beq	a4,a5,800161be <instruction_guest_page_fault_3+0xd0>
    800161aa:	00007517          	auipc	a0,0x7
    800161ae:	e1e50513          	add	a0,a0,-482 # 8001cfc8 <__func__.1+0x320>
    800161b2:	234050ef          	jal	8001b3e6 <printf>
    800161b6:	02900513          	li	a0,41
    800161ba:	0fe040ef          	jal	8001a2b8 <putchar>
    800161be:	4529                	li	a0,10
    800161c0:	0f8040ef          	jal	8001a2b8 <putchar>
    800161c4:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    800161c8:	00007597          	auipc	a1,0x7
    800161cc:	db858593          	add	a1,a1,-584 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode fetche fetche instruction of u mode leads to IPF",
    800161d0:	c491                	beqz	s1,800161dc <instruction_guest_page_fault_3+0xee>
    800161d2:	6418                	ld	a4,8(s0)
    800161d4:	47b1                	li	a5,12
    800161d6:	02f70463          	beq	a4,a5,800161fe <instruction_guest_page_fault_3+0x110>
    800161da:	4481                	li	s1,0
    TEST_END();
    800161dc:	00007517          	auipc	a0,0x7
    800161e0:	e4c50513          	add	a0,a0,-436 # 8001d028 <__func__.1+0x380>
    800161e4:	202050ef          	jal	8001b3e6 <printf>
    800161e8:	4511                	li	a0,4
    800161ea:	8f5ea0ef          	jal	80000ade <goto_priv>
    800161ee:	938eb0ef          	jal	80001326 <reset_state>
}
    800161f2:	60e2                	ld	ra,24(sp)
    800161f4:	6442                	ld	s0,16(sp)
    800161f6:	8526                	mv	a0,s1
    800161f8:	64a2                	ld	s1,8(sp)
    800161fa:	6105                	add	sp,sp,32
    800161fc:	8082                	ret
    TEST_END();
    800161fe:	00007597          	auipc	a1,0x7
    80016202:	d7258593          	add	a1,a1,-654 # 8001cf70 <__func__.1+0x2c8>
    80016206:	bfd9                	j	800161dc <instruction_guest_page_fault_3+0xee>
    TEST_ASSERT("vs mode fetche fetche instruction of u mode leads to IPF",
    80016208:	00007597          	auipc	a1,0x7
    8001620c:	d6858593          	add	a1,a1,-664 # 8001cf70 <__func__.1+0x2c8>
    80016210:	b741                	j	80016190 <instruction_guest_page_fault_3+0xa2>

0000000080016212 <instruction_guest_page_fault_4>:


bool instruction_guest_page_fault_4(){
    80016212:	1101                	add	sp,sp,-32

    TEST_START();
    80016214:	00006597          	auipc	a1,0x6
    80016218:	5c458593          	add	a1,a1,1476 # 8001c7d8 <__func__.2>
    8001621c:	00007517          	auipc	a0,0x7
    80016220:	d7450513          	add	a0,a0,-652 # 8001cf90 <__func__.1+0x2e8>
bool instruction_guest_page_fault_4(){
    80016224:	ec06                	sd	ra,24(sp)
    80016226:	e822                	sd	s0,16(sp)
    80016228:	e426                	sd	s1,8(sp)
    TEST_START();
    8001622a:	1bc050ef          	jal	8001b3e6 <printf>
    8001622e:	4529                	li	a0,10
    80016230:	088040ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80016234:	450d                	li	a0,3
    80016236:	8a9ea0ef          	jal	80000ade <goto_priv>
    hspt_init();
    8001623a:	ba6ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001623e:	de8ea0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80016242:	4509                	li	a0,2
    80016244:	89bea0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80016248:	c6cea0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_M);
    8001624c:	4511                	li	a0,4
    8001624e:	891ea0ef          	jal	80000ade <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80016252:	28005073          	csrw	vsatp,0
    goto_priv(PRIV_VS);
    80016256:	4509                	li	a0,2
    80016258:	887ea0ef          	jal	80000ade <goto_priv>


    //特权模式在VS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，G阶段地址翻译一级页表项没有执行权限的页面中执行，pte.x=0
    addr = vs_page_base(VSURWX_GRW);
    TEST_SETUP_EXCEPT();
    8001625c:	0ff0000f          	fence
    80016260:	4785                	li	a5,1
    80016262:	00027417          	auipc	s0,0x27
    80016266:	dae40413          	add	s0,s0,-594 # 8003d010 <excpt>
    8001626a:	00f41023          	sh	a5,0(s0)
    8001626e:	00027797          	auipc	a5,0x27
    80016272:	dc07bd23          	sd	zero,-550(a5) # 8003d048 <excpt+0x38>
    80016276:	0ff0000f          	fence
    TEST_EXEC_EXCEPT(addr); 
    8001627a:	000807b7          	lui	a5,0x80
    8001627e:	07b5                	add	a5,a5,13 # 8000d <_test_table_size+0x8000c>
    80016280:	07b6                	sll	a5,a5,0xd
    80016282:	00000297          	auipc	t0,0x0
    80016286:	00c28293          	add	t0,t0,12 # 8001628e <instruction_guest_page_fault_4+0x7c>
    8001628a:	02543c23          	sd	t0,56(s0)
    8001628e:	8782                	jr	a5

    printf("%d\n",excpt.cause);
    80016290:	640c                	ld	a1,8(s0)
    80016292:	00007517          	auipc	a0,0x7
    80016296:	76650513          	add	a0,a0,1894 # 8001d9f8 <__func__.1+0xd50>
    8001629a:	14c050ef          	jal	8001b3e6 <printf>
    printf("%d\n",excpt.triggered);
    8001629e:	00144583          	lbu	a1,1(s0)
    800162a2:	00007517          	auipc	a0,0x7
    800162a6:	75650513          	add	a0,a0,1878 # 8001d9f8 <__func__.1+0xd50>
    800162aa:	13c050ef          	jal	8001b3e6 <printf>

    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    800162ae:	08200593          	li	a1,130
    800162b2:	0000c617          	auipc	a2,0xc
    800162b6:	60e60613          	add	a2,a2,1550 # 800228c0 <__func__.1+0x5c18>
    800162ba:	00007517          	auipc	a0,0x7
    800162be:	cee50513          	add	a0,a0,-786 # 8001cfa8 <__func__.1+0x300>
    800162c2:	124050ef          	jal	8001b3e6 <printf>
    800162c6:	00144783          	lbu	a5,1(s0)
    800162ca:	00007597          	auipc	a1,0x7
    800162ce:	cb658593          	add	a1,a1,-842 # 8001cf80 <__func__.1+0x2d8>
    800162d2:	c789                	beqz	a5,800162dc <instruction_guest_page_fault_4+0xca>
    800162d4:	6418                	ld	a4,8(s0)
    800162d6:	47d1                	li	a5,20
    800162d8:	06f70e63          	beq	a4,a5,80016354 <instruction_guest_page_fault_4+0x142>
    800162dc:	00007517          	auipc	a0,0x7
    800162e0:	ce450513          	add	a0,a0,-796 # 8001cfc0 <__func__.1+0x318>
    800162e4:	102050ef          	jal	8001b3e6 <printf>
    800162e8:	00144783          	lbu	a5,1(s0)
    800162ec:	c789                	beqz	a5,800162f6 <instruction_guest_page_fault_4+0xe4>
    800162ee:	6418                	ld	a4,8(s0)
    800162f0:	47d1                	li	a5,20
    800162f2:	00f70c63          	beq	a4,a5,8001630a <instruction_guest_page_fault_4+0xf8>
    800162f6:	00007517          	auipc	a0,0x7
    800162fa:	cd250513          	add	a0,a0,-814 # 8001cfc8 <__func__.1+0x320>
    800162fe:	0e8050ef          	jal	8001b3e6 <printf>
    80016302:	02900513          	li	a0,41
    80016306:	7b3030ef          	jal	8001a2b8 <putchar>
    8001630a:	4529                	li	a0,10
    8001630c:	7ad030ef          	jal	8001a2b8 <putchar>
    80016310:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    80016314:	00007597          	auipc	a1,0x7
    80016318:	c6c58593          	add	a1,a1,-916 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    8001631c:	c491                	beqz	s1,80016328 <instruction_guest_page_fault_4+0x116>
    8001631e:	6418                	ld	a4,8(s0)
    80016320:	47d1                	li	a5,20
    80016322:	02f70463          	beq	a4,a5,8001634a <instruction_guest_page_fault_4+0x138>
    80016326:	4481                	li	s1,0
    TEST_END();
    80016328:	00007517          	auipc	a0,0x7
    8001632c:	d0050513          	add	a0,a0,-768 # 8001d028 <__func__.1+0x380>
    80016330:	0b6050ef          	jal	8001b3e6 <printf>
    80016334:	4511                	li	a0,4
    80016336:	fa8ea0ef          	jal	80000ade <goto_priv>
    8001633a:	fedea0ef          	jal	80001326 <reset_state>
}
    8001633e:	60e2                	ld	ra,24(sp)
    80016340:	6442                	ld	s0,16(sp)
    80016342:	8526                	mv	a0,s1
    80016344:	64a2                	ld	s1,8(sp)
    80016346:	6105                	add	sp,sp,32
    80016348:	8082                	ret
    TEST_END();
    8001634a:	00007597          	auipc	a1,0x7
    8001634e:	c2658593          	add	a1,a1,-986 # 8001cf70 <__func__.1+0x2c8>
    80016352:	bfd9                	j	80016328 <instruction_guest_page_fault_4+0x116>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    80016354:	00007597          	auipc	a1,0x7
    80016358:	c1c58593          	add	a1,a1,-996 # 8001cf70 <__func__.1+0x2c8>
    8001635c:	b741                	j	800162dc <instruction_guest_page_fault_4+0xca>

000000008001635e <instruction_guest_page_fault_5>:


bool instruction_guest_page_fault_5(){
    8001635e:	1101                	add	sp,sp,-32

    TEST_START();
    80016360:	00006597          	auipc	a1,0x6
    80016364:	49858593          	add	a1,a1,1176 # 8001c7f8 <__func__.1>
    80016368:	00007517          	auipc	a0,0x7
    8001636c:	c2850513          	add	a0,a0,-984 # 8001cf90 <__func__.1+0x2e8>
bool instruction_guest_page_fault_5(){
    80016370:	ec06                	sd	ra,24(sp)
    80016372:	e822                	sd	s0,16(sp)
    80016374:	e426                	sd	s1,8(sp)
    TEST_START();
    80016376:	070050ef          	jal	8001b3e6 <printf>
    8001637a:	4529                	li	a0,10
    8001637c:	73d030ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80016380:	450d                	li	a0,3
    80016382:	f5cea0ef          	jal	80000ade <goto_priv>
    hspt_init();
    80016386:	a5aea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001638a:	c9cea0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    8001638e:	4509                	li	a0,2
    80016390:	f4eea0ef          	jal	80000ade <goto_priv>
    vspt_init();
    80016394:	b20ea0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;
    goto_priv(PRIV_M);
    80016398:	4511                	li	a0,4
    8001639a:	f44ea0ef          	jal	80000ade <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    8001639e:	28005073          	csrw	vsatp,0

    goto_priv(PRIV_VS);
    800163a2:	4509                	li	a0,2
    800163a4:	f3aea0ef          	jal	80000ade <goto_priv>

    //特权模式在VS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，G阶段地址翻译一级页表项无效，pte.v=0
    vaddr = vs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    800163a8:	0ff0000f          	fence
    800163ac:	4785                	li	a5,1
    800163ae:	00027417          	auipc	s0,0x27
    800163b2:	c6240413          	add	s0,s0,-926 # 8003d010 <excpt>
    800163b6:	00f41023          	sh	a5,0(s0)
    800163ba:	00027797          	auipc	a5,0x27
    800163be:	c807b723          	sd	zero,-882(a5) # 8003d048 <excpt+0x38>
    800163c2:	0ff0000f          	fence
    TEST_EXEC_EXCEPT(vaddr); 
    800163c6:	400197b7          	lui	a5,0x40019
    800163ca:	078a                	sll	a5,a5,0x2
    800163cc:	00000297          	auipc	t0,0x0
    800163d0:	00c28293          	add	t0,t0,12 # 800163d8 <instruction_guest_page_fault_5+0x7a>
    800163d4:	02543c23          	sd	t0,56(s0)
    800163d8:	8782                	jr	a5


    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    800163da:	08200593          	li	a1,130
    800163de:	0000c617          	auipc	a2,0xc
    800163e2:	54260613          	add	a2,a2,1346 # 80022920 <__func__.1+0x5c78>
    800163e6:	00007517          	auipc	a0,0x7
    800163ea:	bc250513          	add	a0,a0,-1086 # 8001cfa8 <__func__.1+0x300>
    800163ee:	7f9040ef          	jal	8001b3e6 <printf>
    800163f2:	00144783          	lbu	a5,1(s0)
    800163f6:	00007597          	auipc	a1,0x7
    800163fa:	b8a58593          	add	a1,a1,-1142 # 8001cf80 <__func__.1+0x2d8>
    800163fe:	c789                	beqz	a5,80016408 <instruction_guest_page_fault_5+0xaa>
    80016400:	6418                	ld	a4,8(s0)
    80016402:	47d1                	li	a5,20
    80016404:	06f70e63          	beq	a4,a5,80016480 <instruction_guest_page_fault_5+0x122>
    80016408:	00007517          	auipc	a0,0x7
    8001640c:	bb850513          	add	a0,a0,-1096 # 8001cfc0 <__func__.1+0x318>
    80016410:	7d7040ef          	jal	8001b3e6 <printf>
    80016414:	00144783          	lbu	a5,1(s0)
    80016418:	c789                	beqz	a5,80016422 <instruction_guest_page_fault_5+0xc4>
    8001641a:	6418                	ld	a4,8(s0)
    8001641c:	47d1                	li	a5,20
    8001641e:	00f70c63          	beq	a4,a5,80016436 <instruction_guest_page_fault_5+0xd8>
    80016422:	00007517          	auipc	a0,0x7
    80016426:	ba650513          	add	a0,a0,-1114 # 8001cfc8 <__func__.1+0x320>
    8001642a:	7bd040ef          	jal	8001b3e6 <printf>
    8001642e:	02900513          	li	a0,41
    80016432:	687030ef          	jal	8001a2b8 <putchar>
    80016436:	4529                	li	a0,10
    80016438:	681030ef          	jal	8001a2b8 <putchar>
    8001643c:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    80016440:	00007597          	auipc	a1,0x7
    80016444:	b4058593          	add	a1,a1,-1216 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    80016448:	c491                	beqz	s1,80016454 <instruction_guest_page_fault_5+0xf6>
    8001644a:	6418                	ld	a4,8(s0)
    8001644c:	47d1                	li	a5,20
    8001644e:	02f70463          	beq	a4,a5,80016476 <instruction_guest_page_fault_5+0x118>
    80016452:	4481                	li	s1,0
    TEST_END();
    80016454:	00007517          	auipc	a0,0x7
    80016458:	bd450513          	add	a0,a0,-1068 # 8001d028 <__func__.1+0x380>
    8001645c:	78b040ef          	jal	8001b3e6 <printf>
    80016460:	4511                	li	a0,4
    80016462:	e7cea0ef          	jal	80000ade <goto_priv>
    80016466:	ec1ea0ef          	jal	80001326 <reset_state>

}
    8001646a:	60e2                	ld	ra,24(sp)
    8001646c:	6442                	ld	s0,16(sp)
    8001646e:	8526                	mv	a0,s1
    80016470:	64a2                	ld	s1,8(sp)
    80016472:	6105                	add	sp,sp,32
    80016474:	8082                	ret
    TEST_END();
    80016476:	00007597          	auipc	a1,0x7
    8001647a:	afa58593          	add	a1,a1,-1286 # 8001cf70 <__func__.1+0x2c8>
    8001647e:	bfd9                	j	80016454 <instruction_guest_page_fault_5+0xf6>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    80016480:	00007597          	auipc	a1,0x7
    80016484:	af058593          	add	a1,a1,-1296 # 8001cf70 <__func__.1+0x2c8>
    80016488:	b741                	j	80016408 <instruction_guest_page_fault_5+0xaa>

000000008001648a <instruction_guest_page_fault_6>:


bool instruction_guest_page_fault_6(){
    8001648a:	1101                	add	sp,sp,-32

    TEST_START();
    8001648c:	00006597          	auipc	a1,0x6
    80016490:	38c58593          	add	a1,a1,908 # 8001c818 <__func__.0>
    80016494:	00007517          	auipc	a0,0x7
    80016498:	afc50513          	add	a0,a0,-1284 # 8001cf90 <__func__.1+0x2e8>
bool instruction_guest_page_fault_6(){
    8001649c:	ec06                	sd	ra,24(sp)
    8001649e:	e822                	sd	s0,16(sp)
    800164a0:	e426                	sd	s1,8(sp)
    TEST_START();
    800164a2:	745040ef          	jal	8001b3e6 <printf>
    800164a6:	4529                	li	a0,10
    800164a8:	611030ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    800164ac:	450d                	li	a0,3
    800164ae:	e30ea0ef          	jal	80000ade <goto_priv>
    hspt_init();
    800164b2:	92eea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800164b6:	b70ea0ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    800164ba:	4509                	li	a0,2
    800164bc:	e22ea0ef          	jal	80000ade <goto_priv>
    vspt_init();
    800164c0:	9f4ea0ef          	jal	800006b4 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    800164c4:	4509                	li	a0,2
    800164c6:	e18ea0ef          	jal	80000ade <goto_priv>

    //执行取指指令时，在VS模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800164ca:	0ff0000f          	fence
    800164ce:	4785                	li	a5,1
    800164d0:	00027417          	auipc	s0,0x27
    800164d4:	b4040413          	add	s0,s0,-1216 # 8003d010 <excpt>
    800164d8:	00f41023          	sh	a5,0(s0)
    800164dc:	00027797          	auipc	a5,0x27
    800164e0:	b607b623          	sd	zero,-1172(a5) # 8003d048 <excpt+0x38>
    800164e4:	0ff0000f          	fence
    vaddr = hs_page_base(VSURWX_GURWX);


    TEST_EXEC_EXCEPT(vaddr); 
    800164e8:	000807b7          	lui	a5,0x80
    800164ec:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800164ee:	07b6                	sll	a5,a5,0xd
    800164f0:	00000297          	auipc	t0,0x0
    800164f4:	00c28293          	add	t0,t0,12 # 800164fc <instruction_guest_page_fault_6+0x72>
    800164f8:	02543c23          	sd	t0,56(s0)
    800164fc:	8782                	jr	a5
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    800164fe:	08200593          	li	a1,130
    80016502:	0000b617          	auipc	a2,0xb
    80016506:	0ee60613          	add	a2,a2,238 # 800215f0 <__func__.1+0x4948>
    8001650a:	00007517          	auipc	a0,0x7
    8001650e:	a9e50513          	add	a0,a0,-1378 # 8001cfa8 <__func__.1+0x300>
    80016512:	6d5040ef          	jal	8001b3e6 <printf>
    80016516:	00144783          	lbu	a5,1(s0)
    8001651a:	00007597          	auipc	a1,0x7
    8001651e:	a6658593          	add	a1,a1,-1434 # 8001cf80 <__func__.1+0x2d8>
    80016522:	c789                	beqz	a5,8001652c <instruction_guest_page_fault_6+0xa2>
    80016524:	6418                	ld	a4,8(s0)
    80016526:	47b1                	li	a5,12
    80016528:	06f70e63          	beq	a4,a5,800165a4 <instruction_guest_page_fault_6+0x11a>
    8001652c:	00007517          	auipc	a0,0x7
    80016530:	a9450513          	add	a0,a0,-1388 # 8001cfc0 <__func__.1+0x318>
    80016534:	6b3040ef          	jal	8001b3e6 <printf>
    80016538:	00144783          	lbu	a5,1(s0)
    8001653c:	c789                	beqz	a5,80016546 <instruction_guest_page_fault_6+0xbc>
    8001653e:	6418                	ld	a4,8(s0)
    80016540:	47b1                	li	a5,12
    80016542:	00f70c63          	beq	a4,a5,8001655a <instruction_guest_page_fault_6+0xd0>
    80016546:	00007517          	auipc	a0,0x7
    8001654a:	a8250513          	add	a0,a0,-1406 # 8001cfc8 <__func__.1+0x320>
    8001654e:	699040ef          	jal	8001b3e6 <printf>
    80016552:	02900513          	li	a0,41
    80016556:	563030ef          	jal	8001a2b8 <putchar>
    8001655a:	4529                	li	a0,10
    8001655c:	55d030ef          	jal	8001a2b8 <putchar>
    80016560:	00144483          	lbu	s1,1(s0)
        excpt.cause == CAUSE_IPF
    );



    TEST_END();
    80016564:	00007597          	auipc	a1,0x7
    80016568:	a1c58593          	add	a1,a1,-1508 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    8001656c:	c491                	beqz	s1,80016578 <instruction_guest_page_fault_6+0xee>
    8001656e:	6418                	ld	a4,8(s0)
    80016570:	47b1                	li	a5,12
    80016572:	02f70463          	beq	a4,a5,8001659a <instruction_guest_page_fault_6+0x110>
    80016576:	4481                	li	s1,0
    TEST_END();
    80016578:	00007517          	auipc	a0,0x7
    8001657c:	ab050513          	add	a0,a0,-1360 # 8001d028 <__func__.1+0x380>
    80016580:	667040ef          	jal	8001b3e6 <printf>
    80016584:	4511                	li	a0,4
    80016586:	d58ea0ef          	jal	80000ade <goto_priv>
    8001658a:	d9dea0ef          	jal	80001326 <reset_state>
    8001658e:	60e2                	ld	ra,24(sp)
    80016590:	6442                	ld	s0,16(sp)
    80016592:	8526                	mv	a0,s1
    80016594:	64a2                	ld	s1,8(sp)
    80016596:	6105                	add	sp,sp,32
    80016598:	8082                	ret
    TEST_END();
    8001659a:	00007597          	auipc	a1,0x7
    8001659e:	9d658593          	add	a1,a1,-1578 # 8001cf70 <__func__.1+0x2c8>
    800165a2:	bfd9                	j	80016578 <instruction_guest_page_fault_6+0xee>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    800165a4:	00007597          	auipc	a1,0x7
    800165a8:	9cc58593          	add	a1,a1,-1588 # 8001cf70 <__func__.1+0x2c8>
    800165ac:	b741                	j	8001652c <instruction_guest_page_fault_6+0xa2>

00000000800165ae <load_access_fault_1>:
#include <page_tables.h>




bool load_access_fault_1(){
    800165ae:	1101                	add	sp,sp,-32

    TEST_START();
    800165b0:	00006597          	auipc	a1,0x6
    800165b4:	28858593          	add	a1,a1,648 # 8001c838 <__func__.39>
    800165b8:	00007517          	auipc	a0,0x7
    800165bc:	9d850513          	add	a0,a0,-1576 # 8001cf90 <__func__.1+0x2e8>
bool load_access_fault_1(){
    800165c0:	ec06                	sd	ra,24(sp)
    800165c2:	e822                	sd	s0,16(sp)
    800165c4:	e426                	sd	s1,8(sp)
    TEST_START();
    800165c6:	621040ef          	jal	8001b3e6 <printf>
    800165ca:	4529                	li	a0,10
    800165cc:	4ed030ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    800165d0:	4511                	li	a0,4
    800165d2:	d0cea0ef          	jal	80000ade <goto_priv>
    printf("pmpcfg0=%llx\n",CSRR(CSR_PMPCFG0));
    800165d6:	3a0025f3          	csrr	a1,pmpcfg0
    800165da:	0000c517          	auipc	a0,0xc
    800165de:	3ae50513          	add	a0,a0,942 # 80022988 <__func__.1+0x5ce0>
    800165e2:	605040ef          	jal	8001b3e6 <printf>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    800165e6:	3a005073          	csrw	pmpcfg0,0
    
    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    800165ea:	10000793          	li	a5,256
    800165ee:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    800165f2:	20000793          	li	a5,512
    800165f6:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    800165fa:	40000793          	li	a5,1024
    800165fe:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80016602:	6785                	lui	a5,0x1
    80016604:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80016608:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x88000000>>2);
    8001660c:	220007b7          	lui	a5,0x22000
    80016610:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x89000000>>2);
    80016614:	224007b7          	lui	a5,0x22400
    80016618:	3b179073          	csrw	pmpaddr1,a5
    asm volatile ("sfence.vma \n\t");
    8001661c:	12000073          	sfence.vma
    asm volatile(
    80016620:	22000073          	.4byte	0x22000073
    asm volatile(
    80016624:	62000073          	.4byte	0x62000073
    sfence();
    hfence();
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80016628:	67a1                	lui	a5,0x8
    8001662a:	3a07a073          	csrs	pmpcfg0,a5
    
    TEST_SETUP_EXCEPT();
    8001662e:	0ff0000f          	fence
    80016632:	4785                	li	a5,1
    80016634:	00027417          	auipc	s0,0x27
    80016638:	9dc40413          	add	s0,s0,-1572 # 8003d010 <excpt>
    8001663c:	00f41023          	sh	a5,0(s0)
    80016640:	00027797          	auipc	a5,0x27
    80016644:	a007b423          	sd	zero,-1528(a5) # 8003d048 <excpt+0x38>
    80016648:	0ff0000f          	fence
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8001664c:	008817b7          	lui	a5,0x881
    80016650:	07a2                	sll	a5,a5,0x8
    80016652:	00078783          	lb	a5,0(a5) # 881000 <STACK_SIZE+0x781000>

    lb((uintptr_t)0x88100000);

    printf("pmpcfg0=%llx\n",CSRR(CSR_PMPCFG0));
    80016656:	3a0025f3          	csrr	a1,pmpcfg0
    8001665a:	0000c517          	auipc	a0,0xc
    8001665e:	32e50513          	add	a0,a0,814 # 80022988 <__func__.1+0x5ce0>
    80016662:	585040ef          	jal	8001b3e6 <printf>

    printf("%d\n",excpt.cause);
    80016666:	640c                	ld	a1,8(s0)
    80016668:	00007517          	auipc	a0,0x7
    8001666c:	39050513          	add	a0,a0,912 # 8001d9f8 <__func__.1+0xd50>
    80016670:	577040ef          	jal	8001b3e6 <printf>
    printf("%d\n",excpt.triggered);
    80016674:	00144583          	lbu	a1,1(s0)
    80016678:	00007517          	auipc	a0,0x7
    8001667c:	38050513          	add	a0,a0,896 # 8001d9f8 <__func__.1+0xd50>
    80016680:	567040ef          	jal	8001b3e6 <printf>

    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    80016684:	08200593          	li	a1,130
    80016688:	0000c617          	auipc	a2,0xc
    8001668c:	31060613          	add	a2,a2,784 # 80022998 <__func__.1+0x5cf0>
    80016690:	00007517          	auipc	a0,0x7
    80016694:	91850513          	add	a0,a0,-1768 # 8001cfa8 <__func__.1+0x300>
    80016698:	54f040ef          	jal	8001b3e6 <printf>
    8001669c:	00144783          	lbu	a5,1(s0)
    800166a0:	00007597          	auipc	a1,0x7
    800166a4:	8e058593          	add	a1,a1,-1824 # 8001cf80 <__func__.1+0x2d8>
    800166a8:	c789                	beqz	a5,800166b2 <load_access_fault_1+0x104>
    800166aa:	6418                	ld	a4,8(s0)
    800166ac:	4795                	li	a5,5
    800166ae:	06f70e63          	beq	a4,a5,8001672a <load_access_fault_1+0x17c>
    800166b2:	00007517          	auipc	a0,0x7
    800166b6:	90e50513          	add	a0,a0,-1778 # 8001cfc0 <__func__.1+0x318>
    800166ba:	52d040ef          	jal	8001b3e6 <printf>
    800166be:	00144783          	lbu	a5,1(s0)
    800166c2:	c789                	beqz	a5,800166cc <load_access_fault_1+0x11e>
    800166c4:	6418                	ld	a4,8(s0)
    800166c6:	4795                	li	a5,5
    800166c8:	00f70c63          	beq	a4,a5,800166e0 <load_access_fault_1+0x132>
    800166cc:	00007517          	auipc	a0,0x7
    800166d0:	8fc50513          	add	a0,a0,-1796 # 8001cfc8 <__func__.1+0x320>
    800166d4:	513040ef          	jal	8001b3e6 <printf>
    800166d8:	02900513          	li	a0,41
    800166dc:	3dd030ef          	jal	8001a2b8 <putchar>
    800166e0:	4529                	li	a0,10
    800166e2:	3d7030ef          	jal	8001a2b8 <putchar>
    800166e6:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    800166ea:	00007597          	auipc	a1,0x7
    800166ee:	89658593          	add	a1,a1,-1898 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    800166f2:	c491                	beqz	s1,800166fe <load_access_fault_1+0x150>
    800166f4:	6418                	ld	a4,8(s0)
    800166f6:	4795                	li	a5,5
    800166f8:	02f70463          	beq	a4,a5,80016720 <load_access_fault_1+0x172>
    800166fc:	4481                	li	s1,0
    TEST_END();
    800166fe:	00007517          	auipc	a0,0x7
    80016702:	92a50513          	add	a0,a0,-1750 # 8001d028 <__func__.1+0x380>
    80016706:	4e1040ef          	jal	8001b3e6 <printf>
    8001670a:	4511                	li	a0,4
    8001670c:	bd2ea0ef          	jal	80000ade <goto_priv>
    80016710:	c17ea0ef          	jal	80001326 <reset_state>
}
    80016714:	60e2                	ld	ra,24(sp)
    80016716:	6442                	ld	s0,16(sp)
    80016718:	8526                	mv	a0,s1
    8001671a:	64a2                	ld	s1,8(sp)
    8001671c:	6105                	add	sp,sp,32
    8001671e:	8082                	ret
    TEST_END();
    80016720:	00007597          	auipc	a1,0x7
    80016724:	85058593          	add	a1,a1,-1968 # 8001cf70 <__func__.1+0x2c8>
    80016728:	bfd9                	j	800166fe <load_access_fault_1+0x150>
    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001672a:	00007597          	auipc	a1,0x7
    8001672e:	84658593          	add	a1,a1,-1978 # 8001cf70 <__func__.1+0x2c8>
    80016732:	b741                	j	800166b2 <load_access_fault_1+0x104>

0000000080016734 <load_access_fault_2>:

bool load_access_fault_2(){
    80016734:	1101                	add	sp,sp,-32

    TEST_START();
    80016736:	00006597          	auipc	a1,0x6
    8001673a:	11a58593          	add	a1,a1,282 # 8001c850 <__func__.38>
    8001673e:	00007517          	auipc	a0,0x7
    80016742:	85250513          	add	a0,a0,-1966 # 8001cf90 <__func__.1+0x2e8>
bool load_access_fault_2(){
    80016746:	ec06                	sd	ra,24(sp)
    80016748:	e822                	sd	s0,16(sp)
    8001674a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001674c:	49b040ef          	jal	8001b3e6 <printf>
    80016750:	4529                	li	a0,10
    80016752:	367030ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80016756:	4511                	li	a0,4
    80016758:	b86ea0ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001675c:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80016760:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80016764:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80016768:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001676c:	3a046073          	csrs	pmpcfg0,8

    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80016770:	10000793          	li	a5,256
    80016774:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80016778:	20000793          	li	a5,512
    8001677c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80016780:	40000793          	li	a5,1024
    80016784:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80016788:	6785                	lui	a5,0x1
    8001678a:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001678e:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x88000000>>2);
    80016792:	220007b7          	lui	a5,0x22000
    80016796:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x89000000>>2);
    8001679a:	224007b7          	lui	a5,0x22400
    8001679e:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );       //pmp0cfg的L位 
    800167a2:	08000793          	li	a5,128
    800167a6:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );      //pmp1cfg的L位 
    800167aa:	67a1                	lui	a5,0x8
    800167ac:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    800167b0:	450d                	li	a0,3
    800167b2:	b2cea0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    800167b6:	0ff0000f          	fence
    800167ba:	4785                	li	a5,1
    800167bc:	00027417          	auipc	s0,0x27
    800167c0:	85440413          	add	s0,s0,-1964 # 8003d010 <excpt>
    800167c4:	00f41023          	sh	a5,0(s0)
    800167c8:	00027797          	auipc	a5,0x27
    800167cc:	8807b023          	sd	zero,-1920(a5) # 8003d048 <excpt+0x38>
    800167d0:	0ff0000f          	fence
    800167d4:	008817b7          	lui	a5,0x881
    800167d8:	07a2                	sll	a5,a5,0x8
    800167da:	00078783          	lb	a5,0(a5) # 881000 <STACK_SIZE+0x781000>
    
    lb((uintptr_t)0x88100000);

    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    800167de:	08200593          	li	a1,130
    800167e2:	0000c617          	auipc	a2,0xc
    800167e6:	1ee60613          	add	a2,a2,494 # 800229d0 <__func__.1+0x5d28>
    800167ea:	00006517          	auipc	a0,0x6
    800167ee:	7be50513          	add	a0,a0,1982 # 8001cfa8 <__func__.1+0x300>
    800167f2:	3f5040ef          	jal	8001b3e6 <printf>
    800167f6:	00144783          	lbu	a5,1(s0)
    800167fa:	00006597          	auipc	a1,0x6
    800167fe:	78658593          	add	a1,a1,1926 # 8001cf80 <__func__.1+0x2d8>
    80016802:	c789                	beqz	a5,8001680c <load_access_fault_2+0xd8>
    80016804:	6418                	ld	a4,8(s0)
    80016806:	4795                	li	a5,5
    80016808:	06f70e63          	beq	a4,a5,80016884 <load_access_fault_2+0x150>
    8001680c:	00006517          	auipc	a0,0x6
    80016810:	7b450513          	add	a0,a0,1972 # 8001cfc0 <__func__.1+0x318>
    80016814:	3d3040ef          	jal	8001b3e6 <printf>
    80016818:	00144783          	lbu	a5,1(s0)
    8001681c:	c789                	beqz	a5,80016826 <load_access_fault_2+0xf2>
    8001681e:	6418                	ld	a4,8(s0)
    80016820:	4795                	li	a5,5
    80016822:	00f70c63          	beq	a4,a5,8001683a <load_access_fault_2+0x106>
    80016826:	00006517          	auipc	a0,0x6
    8001682a:	7a250513          	add	a0,a0,1954 # 8001cfc8 <__func__.1+0x320>
    8001682e:	3b9040ef          	jal	8001b3e6 <printf>
    80016832:	02900513          	li	a0,41
    80016836:	283030ef          	jal	8001a2b8 <putchar>
    8001683a:	4529                	li	a0,10
    8001683c:	27d030ef          	jal	8001a2b8 <putchar>
    80016840:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    80016844:	00006597          	auipc	a1,0x6
    80016848:	73c58593          	add	a1,a1,1852 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001684c:	c491                	beqz	s1,80016858 <load_access_fault_2+0x124>
    8001684e:	6418                	ld	a4,8(s0)
    80016850:	4795                	li	a5,5
    80016852:	02f70463          	beq	a4,a5,8001687a <load_access_fault_2+0x146>
    80016856:	4481                	li	s1,0
    TEST_END();
    80016858:	00006517          	auipc	a0,0x6
    8001685c:	7d050513          	add	a0,a0,2000 # 8001d028 <__func__.1+0x380>
    80016860:	387040ef          	jal	8001b3e6 <printf>
    80016864:	4511                	li	a0,4
    80016866:	a78ea0ef          	jal	80000ade <goto_priv>
    8001686a:	abdea0ef          	jal	80001326 <reset_state>
}
    8001686e:	60e2                	ld	ra,24(sp)
    80016870:	6442                	ld	s0,16(sp)
    80016872:	8526                	mv	a0,s1
    80016874:	64a2                	ld	s1,8(sp)
    80016876:	6105                	add	sp,sp,32
    80016878:	8082                	ret
    TEST_END();
    8001687a:	00006597          	auipc	a1,0x6
    8001687e:	6f658593          	add	a1,a1,1782 # 8001cf70 <__func__.1+0x2c8>
    80016882:	bfd9                	j	80016858 <load_access_fault_2+0x124>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    80016884:	00006597          	auipc	a1,0x6
    80016888:	6ec58593          	add	a1,a1,1772 # 8001cf70 <__func__.1+0x2c8>
    8001688c:	b741                	j	8001680c <load_access_fault_2+0xd8>

000000008001688e <load_access_fault_3>:


bool load_access_fault_3(){
    8001688e:	1101                	add	sp,sp,-32

    TEST_START();
    80016890:	00006597          	auipc	a1,0x6
    80016894:	fd858593          	add	a1,a1,-40 # 8001c868 <__func__.37>
    80016898:	00006517          	auipc	a0,0x6
    8001689c:	6f850513          	add	a0,a0,1784 # 8001cf90 <__func__.1+0x2e8>
bool load_access_fault_3(){
    800168a0:	ec06                	sd	ra,24(sp)
    800168a2:	e822                	sd	s0,16(sp)
    800168a4:	e426                	sd	s1,8(sp)
    TEST_START();
    800168a6:	341040ef          	jal	8001b3e6 <printf>
    800168aa:	4529                	li	a0,10
    800168ac:	20d030ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    800168b0:	4511                	li	a0,4
    800168b2:	a2cea0ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    800168b6:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    800168ba:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    800168be:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    800168c2:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    800168c6:	3a046073          	csrs	pmpcfg0,8

    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    800168ca:	10000793          	li	a5,256
    800168ce:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    800168d2:	20000793          	li	a5,512
    800168d6:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    800168da:	40000793          	li	a5,1024
    800168de:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    800168e2:	6785                	lui	a5,0x1
    800168e4:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800168e8:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    800168ec:	4405                	li	s0,1
    800168ee:	01f41793          	sll	a5,s0,0x1f
    800168f2:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    800168f6:	08100793          	li	a5,129
    800168fa:	07e2                	sll	a5,a5,0x18
    800168fc:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80016900:	08000793          	li	a5,128
    80016904:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80016908:	67a1                	lui	a5,0x8
    8001690a:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001690e:	4505                	li	a0,1
    80016910:	9ceea0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80016914:	0ff0000f          	fence
    80016918:	00026497          	auipc	s1,0x26
    8001691c:	6f848493          	add	s1,s1,1784 # 8003d010 <excpt>
    80016920:	00849023          	sh	s0,0(s1)
    80016924:	00026797          	auipc	a5,0x26
    80016928:	7207b223          	sd	zero,1828(a5) # 8003d048 <excpt+0x38>
    8001692c:	0ff0000f          	fence
    80016930:	1406                	sll	s0,s0,0x21
    80016932:	40040413          	add	s0,s0,1024
    80016936:	00040403          	lb	s0,0(s0)
    
    lb((uintptr_t)0x80000100 << 2);

    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001693a:	08200593          	li	a1,130
    8001693e:	0000c617          	auipc	a2,0xc
    80016942:	0ca60613          	add	a2,a2,202 # 80022a08 <__func__.1+0x5d60>
    80016946:	00006517          	auipc	a0,0x6
    8001694a:	66250513          	add	a0,a0,1634 # 8001cfa8 <__func__.1+0x300>
    8001694e:	299040ef          	jal	8001b3e6 <printf>
    80016952:	0014c783          	lbu	a5,1(s1)
    80016956:	00006597          	auipc	a1,0x6
    8001695a:	62a58593          	add	a1,a1,1578 # 8001cf80 <__func__.1+0x2d8>
    8001695e:	c789                	beqz	a5,80016968 <load_access_fault_3+0xda>
    80016960:	6498                	ld	a4,8(s1)
    80016962:	4795                	li	a5,5
    80016964:	06f70e63          	beq	a4,a5,800169e0 <load_access_fault_3+0x152>
    80016968:	00006517          	auipc	a0,0x6
    8001696c:	65850513          	add	a0,a0,1624 # 8001cfc0 <__func__.1+0x318>
    80016970:	277040ef          	jal	8001b3e6 <printf>
    80016974:	0014c783          	lbu	a5,1(s1)
    80016978:	c789                	beqz	a5,80016982 <load_access_fault_3+0xf4>
    8001697a:	6498                	ld	a4,8(s1)
    8001697c:	4795                	li	a5,5
    8001697e:	00f70c63          	beq	a4,a5,80016996 <load_access_fault_3+0x108>
    80016982:	00006517          	auipc	a0,0x6
    80016986:	64650513          	add	a0,a0,1606 # 8001cfc8 <__func__.1+0x320>
    8001698a:	25d040ef          	jal	8001b3e6 <printf>
    8001698e:	02900513          	li	a0,41
    80016992:	127030ef          	jal	8001a2b8 <putchar>
    80016996:	4529                	li	a0,10
    80016998:	121030ef          	jal	8001a2b8 <putchar>
    8001699c:	0014c403          	lbu	s0,1(s1)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    800169a0:	00006597          	auipc	a1,0x6
    800169a4:	5e058593          	add	a1,a1,1504 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    800169a8:	c411                	beqz	s0,800169b4 <load_access_fault_3+0x126>
    800169aa:	6498                	ld	a4,8(s1)
    800169ac:	4795                	li	a5,5
    800169ae:	02f70463          	beq	a4,a5,800169d6 <load_access_fault_3+0x148>
    800169b2:	4401                	li	s0,0
    TEST_END();
    800169b4:	00006517          	auipc	a0,0x6
    800169b8:	67450513          	add	a0,a0,1652 # 8001d028 <__func__.1+0x380>
    800169bc:	22b040ef          	jal	8001b3e6 <printf>
    800169c0:	4511                	li	a0,4
    800169c2:	91cea0ef          	jal	80000ade <goto_priv>
    800169c6:	961ea0ef          	jal	80001326 <reset_state>
}
    800169ca:	60e2                	ld	ra,24(sp)
    800169cc:	8522                	mv	a0,s0
    800169ce:	6442                	ld	s0,16(sp)
    800169d0:	64a2                	ld	s1,8(sp)
    800169d2:	6105                	add	sp,sp,32
    800169d4:	8082                	ret
    TEST_END();
    800169d6:	00006597          	auipc	a1,0x6
    800169da:	59a58593          	add	a1,a1,1434 # 8001cf70 <__func__.1+0x2c8>
    800169de:	bfd9                	j	800169b4 <load_access_fault_3+0x126>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    800169e0:	00006597          	auipc	a1,0x6
    800169e4:	59058593          	add	a1,a1,1424 # 8001cf70 <__func__.1+0x2c8>
    800169e8:	b741                	j	80016968 <load_access_fault_3+0xda>

00000000800169ea <load_access_fault_4>:

bool load_access_fault_4(){
    800169ea:	1101                	add	sp,sp,-32

    TEST_START();
    800169ec:	00006597          	auipc	a1,0x6
    800169f0:	e9458593          	add	a1,a1,-364 # 8001c880 <__func__.36>
    800169f4:	00006517          	auipc	a0,0x6
    800169f8:	59c50513          	add	a0,a0,1436 # 8001cf90 <__func__.1+0x2e8>
bool load_access_fault_4(){
    800169fc:	ec06                	sd	ra,24(sp)
    800169fe:	e822                	sd	s0,16(sp)
    80016a00:	e426                	sd	s1,8(sp)
    TEST_START();
    80016a02:	1e5040ef          	jal	8001b3e6 <printf>
    80016a06:	4529                	li	a0,10
    80016a08:	0b1030ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80016a0c:	4511                	li	a0,4
    80016a0e:	8d0ea0ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80016a12:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80016a16:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80016a1a:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80016a1e:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80016a22:	3a046073          	csrs	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80016a26:	10000793          	li	a5,256
    80016a2a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80016a2e:	20000793          	li	a5,512
    80016a32:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80016a36:	40000793          	li	a5,1024
    80016a3a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80016a3e:	6785                	lui	a5,0x1
    80016a40:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80016a44:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80016a48:	4405                	li	s0,1
    80016a4a:	01f41793          	sll	a5,s0,0x1f
    80016a4e:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80016a52:	08100793          	li	a5,129
    80016a56:	07e2                	sll	a5,a5,0x18
    80016a58:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80016a5c:	08000793          	li	a5,128
    80016a60:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80016a64:	67a1                	lui	a5,0x8
    80016a66:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    80016a6a:	4501                	li	a0,0
    80016a6c:	872ea0ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80016a70:	0ff0000f          	fence
    80016a74:	00026497          	auipc	s1,0x26
    80016a78:	59c48493          	add	s1,s1,1436 # 8003d010 <excpt>
    80016a7c:	00849023          	sh	s0,0(s1)
    80016a80:	00026797          	auipc	a5,0x26
    80016a84:	5c07b423          	sd	zero,1480(a5) # 8003d048 <excpt+0x38>
    80016a88:	0ff0000f          	fence
    80016a8c:	1406                	sll	s0,s0,0x21
    80016a8e:	40040413          	add	s0,s0,1024
    80016a92:	00040403          	lb	s0,0(s0)
    
    lb((uintptr_t)0x80000100 << 2);

    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    80016a96:	08200593          	li	a1,130
    80016a9a:	0000c617          	auipc	a2,0xc
    80016a9e:	fa660613          	add	a2,a2,-90 # 80022a40 <__func__.1+0x5d98>
    80016aa2:	00006517          	auipc	a0,0x6
    80016aa6:	50650513          	add	a0,a0,1286 # 8001cfa8 <__func__.1+0x300>
    80016aaa:	13d040ef          	jal	8001b3e6 <printf>
    80016aae:	0014c783          	lbu	a5,1(s1)
    80016ab2:	00006597          	auipc	a1,0x6
    80016ab6:	4ce58593          	add	a1,a1,1230 # 8001cf80 <__func__.1+0x2d8>
    80016aba:	c789                	beqz	a5,80016ac4 <load_access_fault_4+0xda>
    80016abc:	6498                	ld	a4,8(s1)
    80016abe:	4795                	li	a5,5
    80016ac0:	06f70e63          	beq	a4,a5,80016b3c <load_access_fault_4+0x152>
    80016ac4:	00006517          	auipc	a0,0x6
    80016ac8:	4fc50513          	add	a0,a0,1276 # 8001cfc0 <__func__.1+0x318>
    80016acc:	11b040ef          	jal	8001b3e6 <printf>
    80016ad0:	0014c783          	lbu	a5,1(s1)
    80016ad4:	c789                	beqz	a5,80016ade <load_access_fault_4+0xf4>
    80016ad6:	6498                	ld	a4,8(s1)
    80016ad8:	4795                	li	a5,5
    80016ada:	00f70c63          	beq	a4,a5,80016af2 <load_access_fault_4+0x108>
    80016ade:	00006517          	auipc	a0,0x6
    80016ae2:	4ea50513          	add	a0,a0,1258 # 8001cfc8 <__func__.1+0x320>
    80016ae6:	101040ef          	jal	8001b3e6 <printf>
    80016aea:	02900513          	li	a0,41
    80016aee:	7ca030ef          	jal	8001a2b8 <putchar>
    80016af2:	4529                	li	a0,10
    80016af4:	7c4030ef          	jal	8001a2b8 <putchar>
    80016af8:	0014c403          	lbu	s0,1(s1)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    80016afc:	00006597          	auipc	a1,0x6
    80016b00:	48458593          	add	a1,a1,1156 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    80016b04:	c411                	beqz	s0,80016b10 <load_access_fault_4+0x126>
    80016b06:	6498                	ld	a4,8(s1)
    80016b08:	4795                	li	a5,5
    80016b0a:	02f70463          	beq	a4,a5,80016b32 <load_access_fault_4+0x148>
    80016b0e:	4401                	li	s0,0
    TEST_END();
    80016b10:	00006517          	auipc	a0,0x6
    80016b14:	51850513          	add	a0,a0,1304 # 8001d028 <__func__.1+0x380>
    80016b18:	0cf040ef          	jal	8001b3e6 <printf>
    80016b1c:	4511                	li	a0,4
    80016b1e:	fc1e90ef          	jal	80000ade <goto_priv>
    80016b22:	805ea0ef          	jal	80001326 <reset_state>
}
    80016b26:	60e2                	ld	ra,24(sp)
    80016b28:	8522                	mv	a0,s0
    80016b2a:	6442                	ld	s0,16(sp)
    80016b2c:	64a2                	ld	s1,8(sp)
    80016b2e:	6105                	add	sp,sp,32
    80016b30:	8082                	ret
    TEST_END();
    80016b32:	00006597          	auipc	a1,0x6
    80016b36:	43e58593          	add	a1,a1,1086 # 8001cf70 <__func__.1+0x2c8>
    80016b3a:	bfd9                	j	80016b10 <load_access_fault_4+0x126>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    80016b3c:	00006597          	auipc	a1,0x6
    80016b40:	43458593          	add	a1,a1,1076 # 8001cf70 <__func__.1+0x2c8>
    80016b44:	b741                	j	80016ac4 <load_access_fault_4+0xda>

0000000080016b46 <load_access_fault_5>:

bool load_access_fault_5(){
    80016b46:	1141                	add	sp,sp,-16

    TEST_START();
    80016b48:	00006597          	auipc	a1,0x6
    80016b4c:	d5058593          	add	a1,a1,-688 # 8001c898 <__func__.35>
    80016b50:	00006517          	auipc	a0,0x6
    80016b54:	44050513          	add	a0,a0,1088 # 8001cf90 <__func__.1+0x2e8>
bool load_access_fault_5(){
    80016b58:	e406                	sd	ra,8(sp)
    80016b5a:	e022                	sd	s0,0(sp)
    TEST_START();
    80016b5c:	08b040ef          	jal	8001b3e6 <printf>
    80016b60:	4529                	li	a0,10
    80016b62:	756030ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80016b66:	4511                	li	a0,4
    80016b68:	f77e90ef          	jal	80000ade <goto_priv>
    printf("pmpcfg0=%llx\n",CSRR(CSR_PMPCFG0));
    80016b6c:	3a0025f3          	csrr	a1,pmpcfg0
    80016b70:	0000c517          	auipc	a0,0xc
    80016b74:	e1850513          	add	a0,a0,-488 # 80022988 <__func__.1+0x5ce0>
    80016b78:	06f040ef          	jal	8001b3e6 <printf>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80016b7c:	3a005073          	csrw	pmpcfg0,0
    
    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80016b80:	10000793          	li	a5,256
    80016b84:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80016b88:	20000793          	li	a5,512
    80016b8c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80016b90:	40000793          	li	a5,1024
    80016b94:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80016b98:	6785                	lui	a5,0x1
    80016b9a:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80016b9e:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80016ba2:	4785                	li	a5,1
    80016ba4:	01f79713          	sll	a4,a5,0x1f
    80016ba8:	3b071073          	csrw	pmpaddr0,a4
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80016bac:	08100713          	li	a4,129
    80016bb0:	0762                	sll	a4,a4,0x18
    80016bb2:	3b171073          	csrw	pmpaddr1,a4

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80016bb6:	6721                	lui	a4,0x8
    80016bb8:	3a073073          	csrc	pmpcfg0,a4

    TEST_SETUP_EXCEPT();
    80016bbc:	0ff0000f          	fence
    80016bc0:	00026417          	auipc	s0,0x26
    80016bc4:	45040413          	add	s0,s0,1104 # 8003d010 <excpt>
    80016bc8:	00f41023          	sh	a5,0(s0)
    80016bcc:	00026717          	auipc	a4,0x26
    80016bd0:	46073e23          	sd	zero,1148(a4) # 8003d048 <excpt+0x38>
    80016bd4:	0ff0000f          	fence
    80016bd8:	1786                	sll	a5,a5,0x21
    80016bda:	40078793          	add	a5,a5,1024
    80016bde:	00078783          	lb	a5,0(a5)
    
    lb((uintptr_t)0x80000100 << 2);

    printf("%d\n",excpt.triggered);
    80016be2:	00144583          	lbu	a1,1(s0)
    80016be6:	00007517          	auipc	a0,0x7
    80016bea:	e1250513          	add	a0,a0,-494 # 8001d9f8 <__func__.1+0xd50>
    80016bee:	7f8040ef          	jal	8001b3e6 <printf>
    printf("%d\n",excpt.cause);
    80016bf2:	640c                	ld	a1,8(s0)
    80016bf4:	00007517          	auipc	a0,0x7
    80016bf8:	e0450513          	add	a0,a0,-508 # 8001d9f8 <__func__.1+0xd50>
    80016bfc:	7ea040ef          	jal	8001b3e6 <printf>

    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    80016c00:	08200593          	li	a1,130
    80016c04:	0000c617          	auipc	a2,0xc
    80016c08:	e7460613          	add	a2,a2,-396 # 80022a78 <__func__.1+0x5dd0>
    80016c0c:	00006517          	auipc	a0,0x6
    80016c10:	39c50513          	add	a0,a0,924 # 8001cfa8 <__func__.1+0x300>
    80016c14:	7d2040ef          	jal	8001b3e6 <printf>
    80016c18:	00144783          	lbu	a5,1(s0)
    80016c1c:	00006597          	auipc	a1,0x6
    80016c20:	35458593          	add	a1,a1,852 # 8001cf70 <__func__.1+0x2c8>
    80016c24:	c789                	beqz	a5,80016c2e <load_access_fault_5+0xe8>
    80016c26:	00006597          	auipc	a1,0x6
    80016c2a:	35a58593          	add	a1,a1,858 # 8001cf80 <__func__.1+0x2d8>
    80016c2e:	00006517          	auipc	a0,0x6
    80016c32:	39250513          	add	a0,a0,914 # 8001cfc0 <__func__.1+0x318>
    80016c36:	7b0040ef          	jal	8001b3e6 <printf>
    80016c3a:	00144783          	lbu	a5,1(s0)
    80016c3e:	e3b1                	bnez	a5,80016c82 <load_access_fault_5+0x13c>
    80016c40:	4529                	li	a0,10
    80016c42:	676030ef          	jal	8001a2b8 <putchar>
    80016c46:	00144783          	lbu	a5,1(s0)
    80016c4a:	e795                	bnez	a5,80016c76 <load_access_fault_5+0x130>
    80016c4c:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END();
    80016c4e:	00006597          	auipc	a1,0x6
    80016c52:	32258593          	add	a1,a1,802 # 8001cf70 <__func__.1+0x2c8>
    80016c56:	00006517          	auipc	a0,0x6
    80016c5a:	3d250513          	add	a0,a0,978 # 8001d028 <__func__.1+0x380>
    80016c5e:	788040ef          	jal	8001b3e6 <printf>
    80016c62:	4511                	li	a0,4
    80016c64:	e7be90ef          	jal	80000ade <goto_priv>
    80016c68:	ebeea0ef          	jal	80001326 <reset_state>
}
    80016c6c:	60a2                	ld	ra,8(sp)
    80016c6e:	8522                	mv	a0,s0
    80016c70:	6402                	ld	s0,0(sp)
    80016c72:	0141                	add	sp,sp,16
    80016c74:	8082                	ret
    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    80016c76:	4401                	li	s0,0
    TEST_END();
    80016c78:	00006597          	auipc	a1,0x6
    80016c7c:	30858593          	add	a1,a1,776 # 8001cf80 <__func__.1+0x2d8>
    80016c80:	bfd9                	j	80016c56 <load_access_fault_5+0x110>
    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    80016c82:	00006517          	auipc	a0,0x6
    80016c86:	34650513          	add	a0,a0,838 # 8001cfc8 <__func__.1+0x320>
    80016c8a:	75c040ef          	jal	8001b3e6 <printf>
    80016c8e:	02900513          	li	a0,41
    80016c92:	626030ef          	jal	8001a2b8 <putchar>
    80016c96:	b76d                	j	80016c40 <load_access_fault_5+0xfa>

0000000080016c98 <load_access_fault_6>:


bool load_access_fault_6(){
    80016c98:	1101                	add	sp,sp,-32

    TEST_START();
    80016c9a:	00006597          	auipc	a1,0x6
    80016c9e:	c1658593          	add	a1,a1,-1002 # 8001c8b0 <__func__.34>
    80016ca2:	00006517          	auipc	a0,0x6
    80016ca6:	2ee50513          	add	a0,a0,750 # 8001cf90 <__func__.1+0x2e8>
bool load_access_fault_6(){
    80016caa:	ec06                	sd	ra,24(sp)
    80016cac:	e822                	sd	s0,16(sp)
    80016cae:	e426                	sd	s1,8(sp)
    TEST_START();
    80016cb0:	736040ef          	jal	8001b3e6 <printf>
    80016cb4:	4529                	li	a0,10
    80016cb6:	602030ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80016cba:	4511                	li	a0,4
    80016cbc:	e23e90ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80016cc0:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80016cc4:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80016cc8:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80016ccc:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80016cd0:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80016cd4:	08000793          	li	a5,128
    80016cd8:	3a07a073          	csrs	pmpcfg0,a5


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80016cdc:	10000793          	li	a5,256
    80016ce0:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80016ce4:	20000793          	li	a5,512
    80016ce8:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80016cec:	40000793          	li	a5,1024
    80016cf0:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80016cf4:	6785                	lui	a5,0x1
    80016cf6:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80016cfa:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80016cfe:	67a1                	lui	a5,0x8
    80016d00:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80016d04:	4405                	li	s0,1
    80016d06:	01f41793          	sll	a5,s0,0x1f
    80016d0a:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80016d0e:	08100793          	li	a5,129
    80016d12:	07e2                	sll	a5,a5,0x18
    80016d14:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HS);
    80016d18:	450d                	li	a0,3
    80016d1a:	dc5e90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80016d1e:	0ff0000f          	fence
    80016d22:	00026497          	auipc	s1,0x26
    80016d26:	2ee48493          	add	s1,s1,750 # 8003d010 <excpt>
    80016d2a:	00849023          	sh	s0,0(s1)
    80016d2e:	00026797          	auipc	a5,0x26
    80016d32:	3007bd23          	sd	zero,794(a5) # 8003d048 <excpt+0x38>
    80016d36:	0ff0000f          	fence
    80016d3a:	1406                	sll	s0,s0,0x21
    80016d3c:	40040413          	add	s0,s0,1024
    80016d40:	00040403          	lb	s0,0(s0)
    
    lb((uintptr_t)0x80000100 << 2);

    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    80016d44:	08200593          	li	a1,130
    80016d48:	0000c617          	auipc	a2,0xc
    80016d4c:	d6860613          	add	a2,a2,-664 # 80022ab0 <__func__.1+0x5e08>
    80016d50:	00006517          	auipc	a0,0x6
    80016d54:	25850513          	add	a0,a0,600 # 8001cfa8 <__func__.1+0x300>
    80016d58:	68e040ef          	jal	8001b3e6 <printf>
    80016d5c:	0014c783          	lbu	a5,1(s1)
    80016d60:	00006597          	auipc	a1,0x6
    80016d64:	22058593          	add	a1,a1,544 # 8001cf80 <__func__.1+0x2d8>
    80016d68:	c789                	beqz	a5,80016d72 <load_access_fault_6+0xda>
    80016d6a:	6498                	ld	a4,8(s1)
    80016d6c:	4795                	li	a5,5
    80016d6e:	06f70e63          	beq	a4,a5,80016dea <load_access_fault_6+0x152>
    80016d72:	00006517          	auipc	a0,0x6
    80016d76:	24e50513          	add	a0,a0,590 # 8001cfc0 <__func__.1+0x318>
    80016d7a:	66c040ef          	jal	8001b3e6 <printf>
    80016d7e:	0014c783          	lbu	a5,1(s1)
    80016d82:	c789                	beqz	a5,80016d8c <load_access_fault_6+0xf4>
    80016d84:	6498                	ld	a4,8(s1)
    80016d86:	4795                	li	a5,5
    80016d88:	00f70c63          	beq	a4,a5,80016da0 <load_access_fault_6+0x108>
    80016d8c:	00006517          	auipc	a0,0x6
    80016d90:	23c50513          	add	a0,a0,572 # 8001cfc8 <__func__.1+0x320>
    80016d94:	652040ef          	jal	8001b3e6 <printf>
    80016d98:	02900513          	li	a0,41
    80016d9c:	51c030ef          	jal	8001a2b8 <putchar>
    80016da0:	4529                	li	a0,10
    80016da2:	516030ef          	jal	8001a2b8 <putchar>
    80016da6:	0014c403          	lbu	s0,1(s1)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    80016daa:	00006597          	auipc	a1,0x6
    80016dae:	1d658593          	add	a1,a1,470 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    80016db2:	c411                	beqz	s0,80016dbe <load_access_fault_6+0x126>
    80016db4:	6498                	ld	a4,8(s1)
    80016db6:	4795                	li	a5,5
    80016db8:	02f70463          	beq	a4,a5,80016de0 <load_access_fault_6+0x148>
    80016dbc:	4401                	li	s0,0
    TEST_END();
    80016dbe:	00006517          	auipc	a0,0x6
    80016dc2:	26a50513          	add	a0,a0,618 # 8001d028 <__func__.1+0x380>
    80016dc6:	620040ef          	jal	8001b3e6 <printf>
    80016dca:	4511                	li	a0,4
    80016dcc:	d13e90ef          	jal	80000ade <goto_priv>
    80016dd0:	d56ea0ef          	jal	80001326 <reset_state>
}
    80016dd4:	60e2                	ld	ra,24(sp)
    80016dd6:	8522                	mv	a0,s0
    80016dd8:	6442                	ld	s0,16(sp)
    80016dda:	64a2                	ld	s1,8(sp)
    80016ddc:	6105                	add	sp,sp,32
    80016dde:	8082                	ret
    TEST_END();
    80016de0:	00006597          	auipc	a1,0x6
    80016de4:	19058593          	add	a1,a1,400 # 8001cf70 <__func__.1+0x2c8>
    80016de8:	bfd9                	j	80016dbe <load_access_fault_6+0x126>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    80016dea:	00006597          	auipc	a1,0x6
    80016dee:	18658593          	add	a1,a1,390 # 8001cf70 <__func__.1+0x2c8>
    80016df2:	b741                	j	80016d72 <load_access_fault_6+0xda>

0000000080016df4 <load_access_fault_7>:


bool load_access_fault_7(){
    80016df4:	1101                	add	sp,sp,-32

    TEST_START();
    80016df6:	00006597          	auipc	a1,0x6
    80016dfa:	ad258593          	add	a1,a1,-1326 # 8001c8c8 <__func__.33>
    80016dfe:	00006517          	auipc	a0,0x6
    80016e02:	19250513          	add	a0,a0,402 # 8001cf90 <__func__.1+0x2e8>
bool load_access_fault_7(){
    80016e06:	ec06                	sd	ra,24(sp)
    80016e08:	e822                	sd	s0,16(sp)
    80016e0a:	e426                	sd	s1,8(sp)
    TEST_START();
    80016e0c:	5da040ef          	jal	8001b3e6 <printf>
    80016e10:	4529                	li	a0,10
    80016e12:	4a6030ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80016e16:	4511                	li	a0,4
    80016e18:	cc7e90ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80016e1c:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80016e20:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80016e24:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80016e28:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80016e2c:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80016e30:	08000793          	li	a5,128
    80016e34:	3a07a073          	csrs	pmpcfg0,a5


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80016e38:	10000793          	li	a5,256
    80016e3c:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80016e40:	20000793          	li	a5,512
    80016e44:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80016e48:	40000793          	li	a5,1024
    80016e4c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80016e50:	6785                	lui	a5,0x1
    80016e52:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80016e56:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80016e5a:	67a1                	lui	a5,0x8
    80016e5c:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80016e60:	4405                	li	s0,1
    80016e62:	01f41793          	sll	a5,s0,0x1f
    80016e66:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80016e6a:	08100793          	li	a5,129
    80016e6e:	07e2                	sll	a5,a5,0x18
    80016e70:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HU);
    80016e74:	4505                	li	a0,1
    80016e76:	c69e90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80016e7a:	0ff0000f          	fence
    80016e7e:	00026497          	auipc	s1,0x26
    80016e82:	19248493          	add	s1,s1,402 # 8003d010 <excpt>
    80016e86:	00849023          	sh	s0,0(s1)
    80016e8a:	00026797          	auipc	a5,0x26
    80016e8e:	1a07bf23          	sd	zero,446(a5) # 8003d048 <excpt+0x38>
    80016e92:	0ff0000f          	fence
    80016e96:	1406                	sll	s0,s0,0x21
    80016e98:	40040413          	add	s0,s0,1024
    80016e9c:	00040403          	lb	s0,0(s0)
    
    lb((uintptr_t)0x80000100 << 2);

    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    80016ea0:	08200593          	li	a1,130
    80016ea4:	0000c617          	auipc	a2,0xc
    80016ea8:	c4460613          	add	a2,a2,-956 # 80022ae8 <__func__.1+0x5e40>
    80016eac:	00006517          	auipc	a0,0x6
    80016eb0:	0fc50513          	add	a0,a0,252 # 8001cfa8 <__func__.1+0x300>
    80016eb4:	532040ef          	jal	8001b3e6 <printf>
    80016eb8:	0014c783          	lbu	a5,1(s1)
    80016ebc:	00006597          	auipc	a1,0x6
    80016ec0:	0c458593          	add	a1,a1,196 # 8001cf80 <__func__.1+0x2d8>
    80016ec4:	c789                	beqz	a5,80016ece <load_access_fault_7+0xda>
    80016ec6:	6498                	ld	a4,8(s1)
    80016ec8:	4795                	li	a5,5
    80016eca:	06f70e63          	beq	a4,a5,80016f46 <load_access_fault_7+0x152>
    80016ece:	00006517          	auipc	a0,0x6
    80016ed2:	0f250513          	add	a0,a0,242 # 8001cfc0 <__func__.1+0x318>
    80016ed6:	510040ef          	jal	8001b3e6 <printf>
    80016eda:	0014c783          	lbu	a5,1(s1)
    80016ede:	c789                	beqz	a5,80016ee8 <load_access_fault_7+0xf4>
    80016ee0:	6498                	ld	a4,8(s1)
    80016ee2:	4795                	li	a5,5
    80016ee4:	00f70c63          	beq	a4,a5,80016efc <load_access_fault_7+0x108>
    80016ee8:	00006517          	auipc	a0,0x6
    80016eec:	0e050513          	add	a0,a0,224 # 8001cfc8 <__func__.1+0x320>
    80016ef0:	4f6040ef          	jal	8001b3e6 <printf>
    80016ef4:	02900513          	li	a0,41
    80016ef8:	3c0030ef          	jal	8001a2b8 <putchar>
    80016efc:	4529                	li	a0,10
    80016efe:	3ba030ef          	jal	8001a2b8 <putchar>
    80016f02:	0014c403          	lbu	s0,1(s1)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    80016f06:	00006597          	auipc	a1,0x6
    80016f0a:	07a58593          	add	a1,a1,122 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    80016f0e:	c411                	beqz	s0,80016f1a <load_access_fault_7+0x126>
    80016f10:	6498                	ld	a4,8(s1)
    80016f12:	4795                	li	a5,5
    80016f14:	02f70463          	beq	a4,a5,80016f3c <load_access_fault_7+0x148>
    80016f18:	4401                	li	s0,0
    TEST_END();
    80016f1a:	00006517          	auipc	a0,0x6
    80016f1e:	10e50513          	add	a0,a0,270 # 8001d028 <__func__.1+0x380>
    80016f22:	4c4040ef          	jal	8001b3e6 <printf>
    80016f26:	4511                	li	a0,4
    80016f28:	bb7e90ef          	jal	80000ade <goto_priv>
    80016f2c:	bfaea0ef          	jal	80001326 <reset_state>
}
    80016f30:	60e2                	ld	ra,24(sp)
    80016f32:	8522                	mv	a0,s0
    80016f34:	6442                	ld	s0,16(sp)
    80016f36:	64a2                	ld	s1,8(sp)
    80016f38:	6105                	add	sp,sp,32
    80016f3a:	8082                	ret
    TEST_END();
    80016f3c:	00006597          	auipc	a1,0x6
    80016f40:	03458593          	add	a1,a1,52 # 8001cf70 <__func__.1+0x2c8>
    80016f44:	bfd9                	j	80016f1a <load_access_fault_7+0x126>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    80016f46:	00006597          	auipc	a1,0x6
    80016f4a:	02a58593          	add	a1,a1,42 # 8001cf70 <__func__.1+0x2c8>
    80016f4e:	b741                	j	80016ece <load_access_fault_7+0xda>

0000000080016f50 <load_access_fault_8>:

bool load_access_fault_8(){
    80016f50:	1101                	add	sp,sp,-32

    TEST_START();
    80016f52:	00006597          	auipc	a1,0x6
    80016f56:	98e58593          	add	a1,a1,-1650 # 8001c8e0 <__func__.32>
    80016f5a:	00006517          	auipc	a0,0x6
    80016f5e:	03650513          	add	a0,a0,54 # 8001cf90 <__func__.1+0x2e8>
bool load_access_fault_8(){
    80016f62:	ec06                	sd	ra,24(sp)
    80016f64:	e822                	sd	s0,16(sp)
    80016f66:	e426                	sd	s1,8(sp)
    TEST_START();
    80016f68:	47e040ef          	jal	8001b3e6 <printf>
    80016f6c:	4529                	li	a0,10
    80016f6e:	34a030ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80016f72:	4511                	li	a0,4
    80016f74:	b6be90ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80016f78:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80016f7c:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80016f80:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80016f84:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80016f88:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80016f8c:	08000793          	li	a5,128
    80016f90:	3a07a073          	csrs	pmpcfg0,a5


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80016f94:	10000793          	li	a5,256
    80016f98:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80016f9c:	20000793          	li	a5,512
    80016fa0:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80016fa4:	40000793          	li	a5,1024
    80016fa8:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80016fac:	6785                	lui	a5,0x1
    80016fae:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80016fb2:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80016fb6:	67a1                	lui	a5,0x8
    80016fb8:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80016fbc:	4405                	li	s0,1
    80016fbe:	01f41793          	sll	a5,s0,0x1f
    80016fc2:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80016fc6:	08100793          	li	a5,129
    80016fca:	07e2                	sll	a5,a5,0x18
    80016fcc:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_VU);
    80016fd0:	4501                	li	a0,0
    80016fd2:	b0de90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80016fd6:	0ff0000f          	fence
    80016fda:	00026497          	auipc	s1,0x26
    80016fde:	03648493          	add	s1,s1,54 # 8003d010 <excpt>
    80016fe2:	00849023          	sh	s0,0(s1)
    80016fe6:	00026797          	auipc	a5,0x26
    80016fea:	0607b123          	sd	zero,98(a5) # 8003d048 <excpt+0x38>
    80016fee:	0ff0000f          	fence
    80016ff2:	1406                	sll	s0,s0,0x21
    80016ff4:	40040413          	add	s0,s0,1024
    80016ff8:	00040403          	lb	s0,0(s0)
    
    lb((uintptr_t)0x80000100 << 2);

    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    80016ffc:	08200593          	li	a1,130
    80017000:	0000c617          	auipc	a2,0xc
    80017004:	b2060613          	add	a2,a2,-1248 # 80022b20 <__func__.1+0x5e78>
    80017008:	00006517          	auipc	a0,0x6
    8001700c:	fa050513          	add	a0,a0,-96 # 8001cfa8 <__func__.1+0x300>
    80017010:	3d6040ef          	jal	8001b3e6 <printf>
    80017014:	0014c783          	lbu	a5,1(s1)
    80017018:	00006597          	auipc	a1,0x6
    8001701c:	f6858593          	add	a1,a1,-152 # 8001cf80 <__func__.1+0x2d8>
    80017020:	c789                	beqz	a5,8001702a <load_access_fault_8+0xda>
    80017022:	6498                	ld	a4,8(s1)
    80017024:	4795                	li	a5,5
    80017026:	06f70e63          	beq	a4,a5,800170a2 <load_access_fault_8+0x152>
    8001702a:	00006517          	auipc	a0,0x6
    8001702e:	f9650513          	add	a0,a0,-106 # 8001cfc0 <__func__.1+0x318>
    80017032:	3b4040ef          	jal	8001b3e6 <printf>
    80017036:	0014c783          	lbu	a5,1(s1)
    8001703a:	c789                	beqz	a5,80017044 <load_access_fault_8+0xf4>
    8001703c:	6498                	ld	a4,8(s1)
    8001703e:	4795                	li	a5,5
    80017040:	00f70c63          	beq	a4,a5,80017058 <load_access_fault_8+0x108>
    80017044:	00006517          	auipc	a0,0x6
    80017048:	f8450513          	add	a0,a0,-124 # 8001cfc8 <__func__.1+0x320>
    8001704c:	39a040ef          	jal	8001b3e6 <printf>
    80017050:	02900513          	li	a0,41
    80017054:	264030ef          	jal	8001a2b8 <putchar>
    80017058:	4529                	li	a0,10
    8001705a:	25e030ef          	jal	8001a2b8 <putchar>
    8001705e:	0014c403          	lbu	s0,1(s1)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    80017062:	00006597          	auipc	a1,0x6
    80017066:	f1e58593          	add	a1,a1,-226 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001706a:	c411                	beqz	s0,80017076 <load_access_fault_8+0x126>
    8001706c:	6498                	ld	a4,8(s1)
    8001706e:	4795                	li	a5,5
    80017070:	02f70463          	beq	a4,a5,80017098 <load_access_fault_8+0x148>
    80017074:	4401                	li	s0,0
    TEST_END();
    80017076:	00006517          	auipc	a0,0x6
    8001707a:	fb250513          	add	a0,a0,-78 # 8001d028 <__func__.1+0x380>
    8001707e:	368040ef          	jal	8001b3e6 <printf>
    80017082:	4511                	li	a0,4
    80017084:	a5be90ef          	jal	80000ade <goto_priv>
    80017088:	a9eea0ef          	jal	80001326 <reset_state>
}
    8001708c:	60e2                	ld	ra,24(sp)
    8001708e:	8522                	mv	a0,s0
    80017090:	6442                	ld	s0,16(sp)
    80017092:	64a2                	ld	s1,8(sp)
    80017094:	6105                	add	sp,sp,32
    80017096:	8082                	ret
    TEST_END();
    80017098:	00006597          	auipc	a1,0x6
    8001709c:	ed858593          	add	a1,a1,-296 # 8001cf70 <__func__.1+0x2c8>
    800170a0:	bfd9                	j	80017076 <load_access_fault_8+0x126>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    800170a2:	00006597          	auipc	a1,0x6
    800170a6:	ece58593          	add	a1,a1,-306 # 8001cf70 <__func__.1+0x2c8>
    800170aa:	b741                	j	8001702a <load_access_fault_8+0xda>

00000000800170ac <load_access_fault_9>:

bool load_access_fault_9(){
    800170ac:	1101                	add	sp,sp,-32

    TEST_START();
    800170ae:	00006597          	auipc	a1,0x6
    800170b2:	84a58593          	add	a1,a1,-1974 # 8001c8f8 <__func__.31>
    800170b6:	00006517          	auipc	a0,0x6
    800170ba:	eda50513          	add	a0,a0,-294 # 8001cf90 <__func__.1+0x2e8>
bool load_access_fault_9(){
    800170be:	ec06                	sd	ra,24(sp)
    800170c0:	e822                	sd	s0,16(sp)
    800170c2:	e426                	sd	s1,8(sp)
    TEST_START();
    800170c4:	322040ef          	jal	8001b3e6 <printf>
    800170c8:	4529                	li	a0,10
    800170ca:	1ee030ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    800170ce:	4511                	li	a0,4
    800170d0:	a0fe90ef          	jal	80000ade <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    800170d4:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    800170d8:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    800170dc:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    800170e0:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    800170e4:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    800170e8:	08000793          	li	a5,128
    800170ec:	3a07a073          	csrs	pmpcfg0,a5


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    800170f0:	10000793          	li	a5,256
    800170f4:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    800170f8:	20000793          	li	a5,512
    800170fc:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80017100:	40000793          	li	a5,1024
    80017104:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80017108:	6785                	lui	a5,0x1
    8001710a:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001710e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80017112:	67a1                	lui	a5,0x8
    80017114:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80017118:	4405                	li	s0,1
    8001711a:	01f41793          	sll	a5,s0,0x1f
    8001711e:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80017122:	08100793          	li	a5,129
    80017126:	07e2                	sll	a5,a5,0x18
    80017128:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_VU);
    8001712c:	4501                	li	a0,0
    8001712e:	9b1e90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80017132:	0ff0000f          	fence
    80017136:	00026497          	auipc	s1,0x26
    8001713a:	eda48493          	add	s1,s1,-294 # 8003d010 <excpt>
    8001713e:	00849023          	sh	s0,0(s1)
    80017142:	00026797          	auipc	a5,0x26
    80017146:	f007b323          	sd	zero,-250(a5) # 8003d048 <excpt+0x38>
    8001714a:	0ff0000f          	fence
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8001714e:	140e                	sll	s0,s0,0x23
    80017150:	1461                	add	s0,s0,-8
    80017152:	00043403          	ld	s0,0(s0)
    
    ld((uintptr_t)0x1fffffffe << 2);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    80017156:	08200593          	li	a1,130
    8001715a:	0000c617          	auipc	a2,0xc
    8001715e:	9fe60613          	add	a2,a2,-1538 # 80022b58 <__func__.1+0x5eb0>
    80017162:	00006517          	auipc	a0,0x6
    80017166:	e4650513          	add	a0,a0,-442 # 8001cfa8 <__func__.1+0x300>
    8001716a:	27c040ef          	jal	8001b3e6 <printf>
    8001716e:	0014c783          	lbu	a5,1(s1)
    80017172:	00006597          	auipc	a1,0x6
    80017176:	e0e58593          	add	a1,a1,-498 # 8001cf80 <__func__.1+0x2d8>
    8001717a:	c789                	beqz	a5,80017184 <load_access_fault_9+0xd8>
    8001717c:	6498                	ld	a4,8(s1)
    8001717e:	4795                	li	a5,5
    80017180:	06f70e63          	beq	a4,a5,800171fc <load_access_fault_9+0x150>
    80017184:	00006517          	auipc	a0,0x6
    80017188:	e3c50513          	add	a0,a0,-452 # 8001cfc0 <__func__.1+0x318>
    8001718c:	25a040ef          	jal	8001b3e6 <printf>
    80017190:	0014c783          	lbu	a5,1(s1)
    80017194:	c789                	beqz	a5,8001719e <load_access_fault_9+0xf2>
    80017196:	6498                	ld	a4,8(s1)
    80017198:	4795                	li	a5,5
    8001719a:	00f70c63          	beq	a4,a5,800171b2 <load_access_fault_9+0x106>
    8001719e:	00006517          	auipc	a0,0x6
    800171a2:	e2a50513          	add	a0,a0,-470 # 8001cfc8 <__func__.1+0x320>
    800171a6:	240040ef          	jal	8001b3e6 <printf>
    800171aa:	02900513          	li	a0,41
    800171ae:	10a030ef          	jal	8001a2b8 <putchar>
    800171b2:	4529                	li	a0,10
    800171b4:	104030ef          	jal	8001a2b8 <putchar>
    800171b8:	0014c403          	lbu	s0,1(s1)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    800171bc:	00006597          	auipc	a1,0x6
    800171c0:	dc458593          	add	a1,a1,-572 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    800171c4:	c411                	beqz	s0,800171d0 <load_access_fault_9+0x124>
    800171c6:	6498                	ld	a4,8(s1)
    800171c8:	4795                	li	a5,5
    800171ca:	02f70463          	beq	a4,a5,800171f2 <load_access_fault_9+0x146>
    800171ce:	4401                	li	s0,0
    TEST_END();
    800171d0:	00006517          	auipc	a0,0x6
    800171d4:	e5850513          	add	a0,a0,-424 # 8001d028 <__func__.1+0x380>
    800171d8:	20e040ef          	jal	8001b3e6 <printf>
    800171dc:	4511                	li	a0,4
    800171de:	901e90ef          	jal	80000ade <goto_priv>
    800171e2:	944ea0ef          	jal	80001326 <reset_state>
}
    800171e6:	60e2                	ld	ra,24(sp)
    800171e8:	8522                	mv	a0,s0
    800171ea:	6442                	ld	s0,16(sp)
    800171ec:	64a2                	ld	s1,8(sp)
    800171ee:	6105                	add	sp,sp,32
    800171f0:	8082                	ret
    TEST_END();
    800171f2:	00006597          	auipc	a1,0x6
    800171f6:	d7e58593          	add	a1,a1,-642 # 8001cf70 <__func__.1+0x2c8>
    800171fa:	bfd9                	j	800171d0 <load_access_fault_9+0x124>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    800171fc:	00006597          	auipc	a1,0x6
    80017200:	d7458593          	add	a1,a1,-652 # 8001cf70 <__func__.1+0x2c8>
    80017204:	b741                	j	80017184 <load_access_fault_9+0xd8>

0000000080017206 <load_access_fault_10>:

bool load_access_fault_10(){
    80017206:	1101                	add	sp,sp,-32

    TEST_START();
    80017208:	00005597          	auipc	a1,0x5
    8001720c:	70858593          	add	a1,a1,1800 # 8001c910 <__func__.30>
    80017210:	00006517          	auipc	a0,0x6
    80017214:	d8050513          	add	a0,a0,-640 # 8001cf90 <__func__.1+0x2e8>
bool load_access_fault_10(){
    80017218:	ec06                	sd	ra,24(sp)
    8001721a:	e822                	sd	s0,16(sp)
    8001721c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001721e:	1c8040ef          	jal	8001b3e6 <printf>
    80017222:	4529                	li	a0,10
    80017224:	094030ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80017228:	4511                	li	a0,4
    8001722a:	8b5e90ef          	jal	80000ade <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001722e:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80017232:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80017236:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001723a:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001723e:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80017242:	08000793          	li	a5,128
    80017246:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001724a:	4485                	li	s1,1
    8001724c:	01f49793          	sll	a5,s1,0x1f
    80017250:	3b079073          	csrw	pmpaddr0,a5

    goto_priv(PRIV_M);
    80017254:	4511                	li	a0,4
    80017256:	889e90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001725a:	0ff0000f          	fence
    8001725e:	00026417          	auipc	s0,0x26
    80017262:	db240413          	add	s0,s0,-590 # 8003d010 <excpt>
    80017266:	00941023          	sh	s1,0(s0)
    8001726a:	00026797          	auipc	a5,0x26
    8001726e:	dc07bf23          	sd	zero,-546(a5) # 8003d048 <excpt+0x38>
    80017272:	0ff0000f          	fence
    80017276:	47a5                	li	a5,9
    80017278:	07fa                	sll	a5,a5,0x1e
    8001727a:	0007b783          	ld	a5,0(a5)
    
    ld((uintptr_t)0x90000000 << 2);

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    8001727e:	08200593          	li	a1,130
    80017282:	0000c617          	auipc	a2,0xc
    80017286:	94660613          	add	a2,a2,-1722 # 80022bc8 <__func__.1+0x5f20>
    8001728a:	00006517          	auipc	a0,0x6
    8001728e:	d1e50513          	add	a0,a0,-738 # 8001cfa8 <__func__.1+0x300>
    80017292:	154040ef          	jal	8001b3e6 <printf>
    80017296:	00144783          	lbu	a5,1(s0)
    8001729a:	00006597          	auipc	a1,0x6
    8001729e:	ce658593          	add	a1,a1,-794 # 8001cf80 <__func__.1+0x2d8>
    800172a2:	c789                	beqz	a5,800172ac <load_access_fault_10+0xa6>
    800172a4:	6418                	ld	a4,8(s0)
    800172a6:	4795                	li	a5,5
    800172a8:	06f70e63          	beq	a4,a5,80017324 <load_access_fault_10+0x11e>
    800172ac:	00006517          	auipc	a0,0x6
    800172b0:	d1450513          	add	a0,a0,-748 # 8001cfc0 <__func__.1+0x318>
    800172b4:	132040ef          	jal	8001b3e6 <printf>
    800172b8:	00144783          	lbu	a5,1(s0)
    800172bc:	c789                	beqz	a5,800172c6 <load_access_fault_10+0xc0>
    800172be:	6418                	ld	a4,8(s0)
    800172c0:	4795                	li	a5,5
    800172c2:	00f70c63          	beq	a4,a5,800172da <load_access_fault_10+0xd4>
    800172c6:	00006517          	auipc	a0,0x6
    800172ca:	d0250513          	add	a0,a0,-766 # 8001cfc8 <__func__.1+0x320>
    800172ce:	118040ef          	jal	8001b3e6 <printf>
    800172d2:	02900513          	li	a0,41
    800172d6:	7e3020ef          	jal	8001a2b8 <putchar>
    800172da:	4529                	li	a0,10
    800172dc:	7dd020ef          	jal	8001a2b8 <putchar>
    800172e0:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    800172e4:	00006597          	auipc	a1,0x6
    800172e8:	c9c58593          	add	a1,a1,-868 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    800172ec:	c491                	beqz	s1,800172f8 <load_access_fault_10+0xf2>
    800172ee:	6418                	ld	a4,8(s0)
    800172f0:	4795                	li	a5,5
    800172f2:	02f70463          	beq	a4,a5,8001731a <load_access_fault_10+0x114>
    800172f6:	4481                	li	s1,0
    TEST_END();
    800172f8:	00006517          	auipc	a0,0x6
    800172fc:	d3050513          	add	a0,a0,-720 # 8001d028 <__func__.1+0x380>
    80017300:	0e6040ef          	jal	8001b3e6 <printf>
    80017304:	4511                	li	a0,4
    80017306:	fd8e90ef          	jal	80000ade <goto_priv>
    8001730a:	81cea0ef          	jal	80001326 <reset_state>
}
    8001730e:	60e2                	ld	ra,24(sp)
    80017310:	6442                	ld	s0,16(sp)
    80017312:	8526                	mv	a0,s1
    80017314:	64a2                	ld	s1,8(sp)
    80017316:	6105                	add	sp,sp,32
    80017318:	8082                	ret
    TEST_END();
    8001731a:	00006597          	auipc	a1,0x6
    8001731e:	c5658593          	add	a1,a1,-938 # 8001cf70 <__func__.1+0x2c8>
    80017322:	bfd9                	j	800172f8 <load_access_fault_10+0xf2>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    80017324:	00006597          	auipc	a1,0x6
    80017328:	c4c58593          	add	a1,a1,-948 # 8001cf70 <__func__.1+0x2c8>
    8001732c:	b741                	j	800172ac <load_access_fault_10+0xa6>

000000008001732e <store_access_fault_1>:


bool store_access_fault_1(){
    8001732e:	1101                	add	sp,sp,-32

    TEST_START();
    80017330:	00005597          	auipc	a1,0x5
    80017334:	5f858593          	add	a1,a1,1528 # 8001c928 <__func__.29>
    80017338:	00006517          	auipc	a0,0x6
    8001733c:	c5850513          	add	a0,a0,-936 # 8001cf90 <__func__.1+0x2e8>
bool store_access_fault_1(){
    80017340:	ec06                	sd	ra,24(sp)
    80017342:	e822                	sd	s0,16(sp)
    80017344:	e426                	sd	s1,8(sp)
    TEST_START();
    80017346:	0a0040ef          	jal	8001b3e6 <printf>
    8001734a:	4529                	li	a0,10
    8001734c:	76d020ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80017350:	4511                	li	a0,4
    80017352:	f8ce90ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80017356:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001735a:	10000793          	li	a5,256
    8001735e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80017362:	20000793          	li	a5,512
    80017366:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001736a:	40000793          	li	a5,1024
    8001736e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80017372:	6785                	lui	a5,0x1
    80017374:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80017378:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001737c:	4785                	li	a5,1
    8001737e:	01f79713          	sll	a4,a5,0x1f
    80017382:	3b071073          	csrw	pmpaddr0,a4
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80017386:	08100713          	li	a4,129
    8001738a:	0762                	sll	a4,a4,0x18
    8001738c:	3b171073          	csrw	pmpaddr1,a4

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80017390:	6721                	lui	a4,0x8
    80017392:	3a072073          	csrs	pmpcfg0,a4

    TEST_SETUP_EXCEPT();
    80017396:	0ff0000f          	fence
    8001739a:	00026417          	auipc	s0,0x26
    8001739e:	c7640413          	add	s0,s0,-906 # 8003d010 <excpt>
    800173a2:	00f41023          	sh	a5,0(s0)
    800173a6:	00026717          	auipc	a4,0x26
    800173aa:	ca073123          	sd	zero,-862(a4) # 8003d048 <excpt+0x38>
    800173ae:	0ff0000f          	fence
STORE_INSTRUCTION(sb, "sb", uint8_t);
    800173b2:	1786                	sll	a5,a5,0x21
    800173b4:	40078793          	add	a5,a5,1024
    800173b8:	4701                	li	a4,0
    800173ba:	00e78023          	sb	a4,0(a5)
    
    sb((uintptr_t)0x80000100 << 2 , 0x0);

    printf("%d\n",excpt.triggered);
    800173be:	00144583          	lbu	a1,1(s0)
    800173c2:	00006517          	auipc	a0,0x6
    800173c6:	63650513          	add	a0,a0,1590 # 8001d9f8 <__func__.1+0xd50>
    800173ca:	01c040ef          	jal	8001b3e6 <printf>
    printf("%d\n",excpt.cause);
    800173ce:	640c                	ld	a1,8(s0)
    800173d0:	00006517          	auipc	a0,0x6
    800173d4:	62850513          	add	a0,a0,1576 # 8001d9f8 <__func__.1+0xd50>
    800173d8:	00e040ef          	jal	8001b3e6 <printf>

    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    800173dc:	08200593          	li	a1,130
    800173e0:	0000c617          	auipc	a2,0xc
    800173e4:	84860613          	add	a2,a2,-1976 # 80022c28 <__func__.1+0x5f80>
    800173e8:	00006517          	auipc	a0,0x6
    800173ec:	bc050513          	add	a0,a0,-1088 # 8001cfa8 <__func__.1+0x300>
    800173f0:	7f7030ef          	jal	8001b3e6 <printf>
    800173f4:	00144783          	lbu	a5,1(s0)
    800173f8:	00006597          	auipc	a1,0x6
    800173fc:	b8858593          	add	a1,a1,-1144 # 8001cf80 <__func__.1+0x2d8>
    80017400:	c789                	beqz	a5,8001740a <store_access_fault_1+0xdc>
    80017402:	6418                	ld	a4,8(s0)
    80017404:	479d                	li	a5,7
    80017406:	06f70e63          	beq	a4,a5,80017482 <store_access_fault_1+0x154>
    8001740a:	00006517          	auipc	a0,0x6
    8001740e:	bb650513          	add	a0,a0,-1098 # 8001cfc0 <__func__.1+0x318>
    80017412:	7d5030ef          	jal	8001b3e6 <printf>
    80017416:	00144783          	lbu	a5,1(s0)
    8001741a:	c789                	beqz	a5,80017424 <store_access_fault_1+0xf6>
    8001741c:	6418                	ld	a4,8(s0)
    8001741e:	479d                	li	a5,7
    80017420:	00f70c63          	beq	a4,a5,80017438 <store_access_fault_1+0x10a>
    80017424:	00006517          	auipc	a0,0x6
    80017428:	ba450513          	add	a0,a0,-1116 # 8001cfc8 <__func__.1+0x320>
    8001742c:	7bb030ef          	jal	8001b3e6 <printf>
    80017430:	02900513          	li	a0,41
    80017434:	685020ef          	jal	8001a2b8 <putchar>
    80017438:	4529                	li	a0,10
    8001743a:	67f020ef          	jal	8001a2b8 <putchar>
    8001743e:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80017442:	00006597          	auipc	a1,0x6
    80017446:	b3e58593          	add	a1,a1,-1218 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001744a:	c491                	beqz	s1,80017456 <store_access_fault_1+0x128>
    8001744c:	6418                	ld	a4,8(s0)
    8001744e:	479d                	li	a5,7
    80017450:	02f70463          	beq	a4,a5,80017478 <store_access_fault_1+0x14a>
    80017454:	4481                	li	s1,0
    TEST_END();
    80017456:	00006517          	auipc	a0,0x6
    8001745a:	bd250513          	add	a0,a0,-1070 # 8001d028 <__func__.1+0x380>
    8001745e:	789030ef          	jal	8001b3e6 <printf>
    80017462:	4511                	li	a0,4
    80017464:	e7ae90ef          	jal	80000ade <goto_priv>
    80017468:	ebfe90ef          	jal	80001326 <reset_state>
}
    8001746c:	60e2                	ld	ra,24(sp)
    8001746e:	6442                	ld	s0,16(sp)
    80017470:	8526                	mv	a0,s1
    80017472:	64a2                	ld	s1,8(sp)
    80017474:	6105                	add	sp,sp,32
    80017476:	8082                	ret
    TEST_END();
    80017478:	00006597          	auipc	a1,0x6
    8001747c:	af858593          	add	a1,a1,-1288 # 8001cf70 <__func__.1+0x2c8>
    80017480:	bfd9                	j	80017456 <store_access_fault_1+0x128>
    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80017482:	00006597          	auipc	a1,0x6
    80017486:	aee58593          	add	a1,a1,-1298 # 8001cf70 <__func__.1+0x2c8>
    8001748a:	b741                	j	8001740a <store_access_fault_1+0xdc>

000000008001748c <store_access_fault_2>:

bool store_access_fault_2(){
    8001748c:	1101                	add	sp,sp,-32

    TEST_START();
    8001748e:	00005597          	auipc	a1,0x5
    80017492:	4b258593          	add	a1,a1,1202 # 8001c940 <__func__.28>
    80017496:	00006517          	auipc	a0,0x6
    8001749a:	afa50513          	add	a0,a0,-1286 # 8001cf90 <__func__.1+0x2e8>
bool store_access_fault_2(){
    8001749e:	ec06                	sd	ra,24(sp)
    800174a0:	e822                	sd	s0,16(sp)
    800174a2:	e426                	sd	s1,8(sp)
    TEST_START();
    800174a4:	743030ef          	jal	8001b3e6 <printf>
    800174a8:	4529                	li	a0,10
    800174aa:	60f020ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    800174ae:	4511                	li	a0,4
    800174b0:	e2ee90ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    800174b4:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    800174b8:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    800174bc:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    800174c0:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    800174c4:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    800174c8:	08000793          	li	a5,128
    800174cc:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    800174d0:	10000793          	li	a5,256
    800174d4:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    800174d8:	20000793          	li	a5,512
    800174dc:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    800174e0:	40000793          	li	a5,1024
    800174e4:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    800174e8:	6785                	lui	a5,0x1
    800174ea:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800174ee:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    800174f2:	67a1                	lui	a5,0x8
    800174f4:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    800174f8:	4405                	li	s0,1
    800174fa:	01f41793          	sll	a5,s0,0x1f
    800174fe:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80017502:	08100793          	li	a5,129
    80017506:	07e2                	sll	a5,a5,0x18
    80017508:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HS);
    8001750c:	450d                	li	a0,3
    8001750e:	dd0e90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80017512:	0ff0000f          	fence
    80017516:	00026497          	auipc	s1,0x26
    8001751a:	afa48493          	add	s1,s1,-1286 # 8003d010 <excpt>
    8001751e:	00849023          	sh	s0,0(s1)
    80017522:	00026797          	auipc	a5,0x26
    80017526:	b207b323          	sd	zero,-1242(a5) # 8003d048 <excpt+0x38>
    8001752a:	0ff0000f          	fence
    8001752e:	1406                	sll	s0,s0,0x21
    80017530:	40040413          	add	s0,s0,1024
    80017534:	4781                	li	a5,0
    80017536:	00f40023          	sb	a5,0(s0)
    
    sb((uintptr_t)0x80000100 << 2, 0x0);

    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001753a:	08200593          	li	a1,130
    8001753e:	0000b617          	auipc	a2,0xb
    80017542:	72260613          	add	a2,a2,1826 # 80022c60 <__func__.1+0x5fb8>
    80017546:	00006517          	auipc	a0,0x6
    8001754a:	a6250513          	add	a0,a0,-1438 # 8001cfa8 <__func__.1+0x300>
    8001754e:	699030ef          	jal	8001b3e6 <printf>
    80017552:	0014c783          	lbu	a5,1(s1)
    80017556:	00006597          	auipc	a1,0x6
    8001755a:	a2a58593          	add	a1,a1,-1494 # 8001cf80 <__func__.1+0x2d8>
    8001755e:	c789                	beqz	a5,80017568 <store_access_fault_2+0xdc>
    80017560:	6498                	ld	a4,8(s1)
    80017562:	479d                	li	a5,7
    80017564:	06f70e63          	beq	a4,a5,800175e0 <store_access_fault_2+0x154>
    80017568:	00006517          	auipc	a0,0x6
    8001756c:	a5850513          	add	a0,a0,-1448 # 8001cfc0 <__func__.1+0x318>
    80017570:	677030ef          	jal	8001b3e6 <printf>
    80017574:	0014c783          	lbu	a5,1(s1)
    80017578:	c789                	beqz	a5,80017582 <store_access_fault_2+0xf6>
    8001757a:	6498                	ld	a4,8(s1)
    8001757c:	479d                	li	a5,7
    8001757e:	00f70c63          	beq	a4,a5,80017596 <store_access_fault_2+0x10a>
    80017582:	00006517          	auipc	a0,0x6
    80017586:	a4650513          	add	a0,a0,-1466 # 8001cfc8 <__func__.1+0x320>
    8001758a:	65d030ef          	jal	8001b3e6 <printf>
    8001758e:	02900513          	li	a0,41
    80017592:	527020ef          	jal	8001a2b8 <putchar>
    80017596:	4529                	li	a0,10
    80017598:	521020ef          	jal	8001a2b8 <putchar>
    8001759c:	0014c403          	lbu	s0,1(s1)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    800175a0:	00006597          	auipc	a1,0x6
    800175a4:	9e058593          	add	a1,a1,-1568 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    800175a8:	c411                	beqz	s0,800175b4 <store_access_fault_2+0x128>
    800175aa:	6498                	ld	a4,8(s1)
    800175ac:	479d                	li	a5,7
    800175ae:	02f70463          	beq	a4,a5,800175d6 <store_access_fault_2+0x14a>
    800175b2:	4401                	li	s0,0
    TEST_END();
    800175b4:	00006517          	auipc	a0,0x6
    800175b8:	a7450513          	add	a0,a0,-1420 # 8001d028 <__func__.1+0x380>
    800175bc:	62b030ef          	jal	8001b3e6 <printf>
    800175c0:	4511                	li	a0,4
    800175c2:	d1ce90ef          	jal	80000ade <goto_priv>
    800175c6:	d61e90ef          	jal	80001326 <reset_state>
}
    800175ca:	60e2                	ld	ra,24(sp)
    800175cc:	8522                	mv	a0,s0
    800175ce:	6442                	ld	s0,16(sp)
    800175d0:	64a2                	ld	s1,8(sp)
    800175d2:	6105                	add	sp,sp,32
    800175d4:	8082                	ret
    TEST_END();
    800175d6:	00006597          	auipc	a1,0x6
    800175da:	99a58593          	add	a1,a1,-1638 # 8001cf70 <__func__.1+0x2c8>
    800175de:	bfd9                	j	800175b4 <store_access_fault_2+0x128>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    800175e0:	00006597          	auipc	a1,0x6
    800175e4:	99058593          	add	a1,a1,-1648 # 8001cf70 <__func__.1+0x2c8>
    800175e8:	b741                	j	80017568 <store_access_fault_2+0xdc>

00000000800175ea <store_access_fault_3>:


bool store_access_fault_3(){
    800175ea:	1101                	add	sp,sp,-32

    TEST_START();
    800175ec:	00005597          	auipc	a1,0x5
    800175f0:	36c58593          	add	a1,a1,876 # 8001c958 <__func__.27>
    800175f4:	00006517          	auipc	a0,0x6
    800175f8:	99c50513          	add	a0,a0,-1636 # 8001cf90 <__func__.1+0x2e8>
bool store_access_fault_3(){
    800175fc:	ec06                	sd	ra,24(sp)
    800175fe:	e822                	sd	s0,16(sp)
    80017600:	e426                	sd	s1,8(sp)
    TEST_START();
    80017602:	5e5030ef          	jal	8001b3e6 <printf>
    80017606:	4529                	li	a0,10
    80017608:	4b1020ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    8001760c:	4511                	li	a0,4
    8001760e:	cd0e90ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80017612:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80017616:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001761a:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001761e:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80017622:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80017626:	08000793          	li	a5,128
    8001762a:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001762e:	10000793          	li	a5,256
    80017632:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80017636:	20000793          	li	a5,512
    8001763a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001763e:	40000793          	li	a5,1024
    80017642:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80017646:	6785                	lui	a5,0x1
    80017648:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001764c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80017650:	67a1                	lui	a5,0x8
    80017652:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80017656:	4405                	li	s0,1
    80017658:	01f41793          	sll	a5,s0,0x1f
    8001765c:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80017660:	08100793          	li	a5,129
    80017664:	07e2                	sll	a5,a5,0x18
    80017666:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HU);
    8001766a:	4505                	li	a0,1
    8001766c:	c72e90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80017670:	0ff0000f          	fence
    80017674:	00026497          	auipc	s1,0x26
    80017678:	99c48493          	add	s1,s1,-1636 # 8003d010 <excpt>
    8001767c:	00849023          	sh	s0,0(s1)
    80017680:	00026797          	auipc	a5,0x26
    80017684:	9c07b423          	sd	zero,-1592(a5) # 8003d048 <excpt+0x38>
    80017688:	0ff0000f          	fence
    8001768c:	1406                	sll	s0,s0,0x21
    8001768e:	40040413          	add	s0,s0,1024
    80017692:	4781                	li	a5,0
    80017694:	00f40023          	sb	a5,0(s0)
    
    sb((uintptr_t)0x80000100 << 2, 0x0);

    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80017698:	08200593          	li	a1,130
    8001769c:	0000b617          	auipc	a2,0xb
    800176a0:	5fc60613          	add	a2,a2,1532 # 80022c98 <__func__.1+0x5ff0>
    800176a4:	00006517          	auipc	a0,0x6
    800176a8:	90450513          	add	a0,a0,-1788 # 8001cfa8 <__func__.1+0x300>
    800176ac:	53b030ef          	jal	8001b3e6 <printf>
    800176b0:	0014c783          	lbu	a5,1(s1)
    800176b4:	00006597          	auipc	a1,0x6
    800176b8:	8cc58593          	add	a1,a1,-1844 # 8001cf80 <__func__.1+0x2d8>
    800176bc:	c789                	beqz	a5,800176c6 <store_access_fault_3+0xdc>
    800176be:	6498                	ld	a4,8(s1)
    800176c0:	479d                	li	a5,7
    800176c2:	06f70e63          	beq	a4,a5,8001773e <store_access_fault_3+0x154>
    800176c6:	00006517          	auipc	a0,0x6
    800176ca:	8fa50513          	add	a0,a0,-1798 # 8001cfc0 <__func__.1+0x318>
    800176ce:	519030ef          	jal	8001b3e6 <printf>
    800176d2:	0014c783          	lbu	a5,1(s1)
    800176d6:	c789                	beqz	a5,800176e0 <store_access_fault_3+0xf6>
    800176d8:	6498                	ld	a4,8(s1)
    800176da:	479d                	li	a5,7
    800176dc:	00f70c63          	beq	a4,a5,800176f4 <store_access_fault_3+0x10a>
    800176e0:	00006517          	auipc	a0,0x6
    800176e4:	8e850513          	add	a0,a0,-1816 # 8001cfc8 <__func__.1+0x320>
    800176e8:	4ff030ef          	jal	8001b3e6 <printf>
    800176ec:	02900513          	li	a0,41
    800176f0:	3c9020ef          	jal	8001a2b8 <putchar>
    800176f4:	4529                	li	a0,10
    800176f6:	3c3020ef          	jal	8001a2b8 <putchar>
    800176fa:	0014c403          	lbu	s0,1(s1)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    800176fe:	00006597          	auipc	a1,0x6
    80017702:	88258593          	add	a1,a1,-1918 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80017706:	c411                	beqz	s0,80017712 <store_access_fault_3+0x128>
    80017708:	6498                	ld	a4,8(s1)
    8001770a:	479d                	li	a5,7
    8001770c:	02f70463          	beq	a4,a5,80017734 <store_access_fault_3+0x14a>
    80017710:	4401                	li	s0,0
    TEST_END();
    80017712:	00006517          	auipc	a0,0x6
    80017716:	91650513          	add	a0,a0,-1770 # 8001d028 <__func__.1+0x380>
    8001771a:	4cd030ef          	jal	8001b3e6 <printf>
    8001771e:	4511                	li	a0,4
    80017720:	bbee90ef          	jal	80000ade <goto_priv>
    80017724:	c03e90ef          	jal	80001326 <reset_state>
}
    80017728:	60e2                	ld	ra,24(sp)
    8001772a:	8522                	mv	a0,s0
    8001772c:	6442                	ld	s0,16(sp)
    8001772e:	64a2                	ld	s1,8(sp)
    80017730:	6105                	add	sp,sp,32
    80017732:	8082                	ret
    TEST_END();
    80017734:	00006597          	auipc	a1,0x6
    80017738:	83c58593          	add	a1,a1,-1988 # 8001cf70 <__func__.1+0x2c8>
    8001773c:	bfd9                	j	80017712 <store_access_fault_3+0x128>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001773e:	00006597          	auipc	a1,0x6
    80017742:	83258593          	add	a1,a1,-1998 # 8001cf70 <__func__.1+0x2c8>
    80017746:	b741                	j	800176c6 <store_access_fault_3+0xdc>

0000000080017748 <store_access_fault_4>:

bool store_access_fault_4(){
    80017748:	1101                	add	sp,sp,-32

    TEST_START();
    8001774a:	00005597          	auipc	a1,0x5
    8001774e:	22658593          	add	a1,a1,550 # 8001c970 <__func__.26>
    80017752:	00006517          	auipc	a0,0x6
    80017756:	83e50513          	add	a0,a0,-1986 # 8001cf90 <__func__.1+0x2e8>
bool store_access_fault_4(){
    8001775a:	ec06                	sd	ra,24(sp)
    8001775c:	e822                	sd	s0,16(sp)
    8001775e:	e426                	sd	s1,8(sp)
    TEST_START();
    80017760:	487030ef          	jal	8001b3e6 <printf>
    80017764:	4529                	li	a0,10
    80017766:	353020ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    8001776a:	4511                	li	a0,4
    8001776c:	b72e90ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80017770:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80017774:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80017778:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001777c:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80017780:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80017784:	08000793          	li	a5,128
    80017788:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001778c:	10000793          	li	a5,256
    80017790:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80017794:	20000793          	li	a5,512
    80017798:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001779c:	40000793          	li	a5,1024
    800177a0:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    800177a4:	6785                	lui	a5,0x1
    800177a6:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800177aa:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    800177ae:	67a1                	lui	a5,0x8
    800177b0:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    800177b4:	4405                	li	s0,1
    800177b6:	01f41793          	sll	a5,s0,0x1f
    800177ba:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    800177be:	08100793          	li	a5,129
    800177c2:	07e2                	sll	a5,a5,0x18
    800177c4:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_VU);
    800177c8:	4501                	li	a0,0
    800177ca:	b14e90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    800177ce:	0ff0000f          	fence
    800177d2:	00026497          	auipc	s1,0x26
    800177d6:	83e48493          	add	s1,s1,-1986 # 8003d010 <excpt>
    800177da:	00849023          	sh	s0,0(s1)
    800177de:	00026797          	auipc	a5,0x26
    800177e2:	8607b523          	sd	zero,-1942(a5) # 8003d048 <excpt+0x38>
    800177e6:	0ff0000f          	fence
    800177ea:	1406                	sll	s0,s0,0x21
    800177ec:	40040413          	add	s0,s0,1024
    800177f0:	4781                	li	a5,0
    800177f2:	00f40023          	sb	a5,0(s0)
    
    sb((uintptr_t)0x80000100 << 2, 0x0);

    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    800177f6:	08200593          	li	a1,130
    800177fa:	0000b617          	auipc	a2,0xb
    800177fe:	4d660613          	add	a2,a2,1238 # 80022cd0 <__func__.1+0x6028>
    80017802:	00005517          	auipc	a0,0x5
    80017806:	7a650513          	add	a0,a0,1958 # 8001cfa8 <__func__.1+0x300>
    8001780a:	3dd030ef          	jal	8001b3e6 <printf>
    8001780e:	0014c783          	lbu	a5,1(s1)
    80017812:	00005597          	auipc	a1,0x5
    80017816:	76e58593          	add	a1,a1,1902 # 8001cf80 <__func__.1+0x2d8>
    8001781a:	c789                	beqz	a5,80017824 <store_access_fault_4+0xdc>
    8001781c:	6498                	ld	a4,8(s1)
    8001781e:	479d                	li	a5,7
    80017820:	06f70e63          	beq	a4,a5,8001789c <store_access_fault_4+0x154>
    80017824:	00005517          	auipc	a0,0x5
    80017828:	79c50513          	add	a0,a0,1948 # 8001cfc0 <__func__.1+0x318>
    8001782c:	3bb030ef          	jal	8001b3e6 <printf>
    80017830:	0014c783          	lbu	a5,1(s1)
    80017834:	c789                	beqz	a5,8001783e <store_access_fault_4+0xf6>
    80017836:	6498                	ld	a4,8(s1)
    80017838:	479d                	li	a5,7
    8001783a:	00f70c63          	beq	a4,a5,80017852 <store_access_fault_4+0x10a>
    8001783e:	00005517          	auipc	a0,0x5
    80017842:	78a50513          	add	a0,a0,1930 # 8001cfc8 <__func__.1+0x320>
    80017846:	3a1030ef          	jal	8001b3e6 <printf>
    8001784a:	02900513          	li	a0,41
    8001784e:	26b020ef          	jal	8001a2b8 <putchar>
    80017852:	4529                	li	a0,10
    80017854:	265020ef          	jal	8001a2b8 <putchar>
    80017858:	0014c403          	lbu	s0,1(s1)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001785c:	00005597          	auipc	a1,0x5
    80017860:	72458593          	add	a1,a1,1828 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80017864:	c411                	beqz	s0,80017870 <store_access_fault_4+0x128>
    80017866:	6498                	ld	a4,8(s1)
    80017868:	479d                	li	a5,7
    8001786a:	02f70463          	beq	a4,a5,80017892 <store_access_fault_4+0x14a>
    8001786e:	4401                	li	s0,0
    TEST_END();
    80017870:	00005517          	auipc	a0,0x5
    80017874:	7b850513          	add	a0,a0,1976 # 8001d028 <__func__.1+0x380>
    80017878:	36f030ef          	jal	8001b3e6 <printf>
    8001787c:	4511                	li	a0,4
    8001787e:	a60e90ef          	jal	80000ade <goto_priv>
    80017882:	aa5e90ef          	jal	80001326 <reset_state>
}
    80017886:	60e2                	ld	ra,24(sp)
    80017888:	8522                	mv	a0,s0
    8001788a:	6442                	ld	s0,16(sp)
    8001788c:	64a2                	ld	s1,8(sp)
    8001788e:	6105                	add	sp,sp,32
    80017890:	8082                	ret
    TEST_END();
    80017892:	00005597          	auipc	a1,0x5
    80017896:	6de58593          	add	a1,a1,1758 # 8001cf70 <__func__.1+0x2c8>
    8001789a:	bfd9                	j	80017870 <store_access_fault_4+0x128>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001789c:	00005597          	auipc	a1,0x5
    800178a0:	6d458593          	add	a1,a1,1748 # 8001cf70 <__func__.1+0x2c8>
    800178a4:	b741                	j	80017824 <store_access_fault_4+0xdc>

00000000800178a6 <store_access_fault_5>:

bool store_access_fault_5(){
    800178a6:	1141                	add	sp,sp,-16

    TEST_START();
    800178a8:	00005597          	auipc	a1,0x5
    800178ac:	0e058593          	add	a1,a1,224 # 8001c988 <__func__.25>
    800178b0:	00005517          	auipc	a0,0x5
    800178b4:	6e050513          	add	a0,a0,1760 # 8001cf90 <__func__.1+0x2e8>
bool store_access_fault_5(){
    800178b8:	e406                	sd	ra,8(sp)
    800178ba:	e022                	sd	s0,0(sp)
    TEST_START();
    800178bc:	32b030ef          	jal	8001b3e6 <printf>
    800178c0:	4529                	li	a0,10
    800178c2:	1f7020ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    800178c6:	4511                	li	a0,4
    800178c8:	a16e90ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    800178cc:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    800178d0:	10000793          	li	a5,256
    800178d4:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    800178d8:	20000793          	li	a5,512
    800178dc:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    800178e0:	40000793          	li	a5,1024
    800178e4:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    800178e8:	6785                	lui	a5,0x1
    800178ea:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800178ee:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    800178f2:	4785                	li	a5,1
    800178f4:	01f79713          	sll	a4,a5,0x1f
    800178f8:	3b071073          	csrw	pmpaddr0,a4
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    800178fc:	08100713          	li	a4,129
    80017900:	0762                	sll	a4,a4,0x18
    80017902:	3b171073          	csrw	pmpaddr1,a4

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80017906:	6721                	lui	a4,0x8
    80017908:	3a073073          	csrc	pmpcfg0,a4

    TEST_SETUP_EXCEPT();
    8001790c:	0ff0000f          	fence
    80017910:	00025417          	auipc	s0,0x25
    80017914:	70040413          	add	s0,s0,1792 # 8003d010 <excpt>
    80017918:	00f41023          	sh	a5,0(s0)
    8001791c:	00025717          	auipc	a4,0x25
    80017920:	72073623          	sd	zero,1836(a4) # 8003d048 <excpt+0x38>
    80017924:	0ff0000f          	fence
    80017928:	1786                	sll	a5,a5,0x21
    8001792a:	40078793          	add	a5,a5,1024
    8001792e:	4701                	li	a4,0
    80017930:	00e78023          	sb	a4,0(a5)
    
    sb((uintptr_t)0x80000100 << 2, 0x0);

    printf("%d\n",excpt.triggered);
    80017934:	00144583          	lbu	a1,1(s0)
    80017938:	00006517          	auipc	a0,0x6
    8001793c:	0c050513          	add	a0,a0,192 # 8001d9f8 <__func__.1+0xd50>
    80017940:	2a7030ef          	jal	8001b3e6 <printf>
    printf("%d\n",excpt.cause);
    80017944:	640c                	ld	a1,8(s0)
    80017946:	00006517          	auipc	a0,0x6
    8001794a:	0b250513          	add	a0,a0,178 # 8001d9f8 <__func__.1+0xd50>
    8001794e:	299030ef          	jal	8001b3e6 <printf>

    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    80017952:	08200593          	li	a1,130
    80017956:	0000b617          	auipc	a2,0xb
    8001795a:	3b260613          	add	a2,a2,946 # 80022d08 <__func__.1+0x6060>
    8001795e:	00005517          	auipc	a0,0x5
    80017962:	64a50513          	add	a0,a0,1610 # 8001cfa8 <__func__.1+0x300>
    80017966:	281030ef          	jal	8001b3e6 <printf>
    8001796a:	00144783          	lbu	a5,1(s0)
    8001796e:	00005597          	auipc	a1,0x5
    80017972:	60258593          	add	a1,a1,1538 # 8001cf70 <__func__.1+0x2c8>
    80017976:	c789                	beqz	a5,80017980 <store_access_fault_5+0xda>
    80017978:	00005597          	auipc	a1,0x5
    8001797c:	60858593          	add	a1,a1,1544 # 8001cf80 <__func__.1+0x2d8>
    80017980:	00005517          	auipc	a0,0x5
    80017984:	64050513          	add	a0,a0,1600 # 8001cfc0 <__func__.1+0x318>
    80017988:	25f030ef          	jal	8001b3e6 <printf>
    8001798c:	00144783          	lbu	a5,1(s0)
    80017990:	e3b1                	bnez	a5,800179d4 <store_access_fault_5+0x12e>
    80017992:	4529                	li	a0,10
    80017994:	125020ef          	jal	8001a2b8 <putchar>
    80017998:	00144783          	lbu	a5,1(s0)
    8001799c:	e795                	bnez	a5,800179c8 <store_access_fault_5+0x122>
    8001799e:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    800179a0:	00005597          	auipc	a1,0x5
    800179a4:	5d058593          	add	a1,a1,1488 # 8001cf70 <__func__.1+0x2c8>
    800179a8:	00005517          	auipc	a0,0x5
    800179ac:	68050513          	add	a0,a0,1664 # 8001d028 <__func__.1+0x380>
    800179b0:	237030ef          	jal	8001b3e6 <printf>
    800179b4:	4511                	li	a0,4
    800179b6:	928e90ef          	jal	80000ade <goto_priv>
    800179ba:	96de90ef          	jal	80001326 <reset_state>
}
    800179be:	60a2                	ld	ra,8(sp)
    800179c0:	8522                	mv	a0,s0
    800179c2:	6402                	ld	s0,0(sp)
    800179c4:	0141                	add	sp,sp,16
    800179c6:	8082                	ret
    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    800179c8:	4401                	li	s0,0
    TEST_END();
    800179ca:	00005597          	auipc	a1,0x5
    800179ce:	5b658593          	add	a1,a1,1462 # 8001cf80 <__func__.1+0x2d8>
    800179d2:	bfd9                	j	800179a8 <store_access_fault_5+0x102>
    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    800179d4:	00005517          	auipc	a0,0x5
    800179d8:	5f450513          	add	a0,a0,1524 # 8001cfc8 <__func__.1+0x320>
    800179dc:	20b030ef          	jal	8001b3e6 <printf>
    800179e0:	02900513          	li	a0,41
    800179e4:	0d5020ef          	jal	8001a2b8 <putchar>
    800179e8:	b76d                	j	80017992 <store_access_fault_5+0xec>

00000000800179ea <store_access_fault_6>:


bool store_access_fault_6(){
    800179ea:	1101                	add	sp,sp,-32

    TEST_START();
    800179ec:	00005597          	auipc	a1,0x5
    800179f0:	fb458593          	add	a1,a1,-76 # 8001c9a0 <__func__.24>
    800179f4:	00005517          	auipc	a0,0x5
    800179f8:	59c50513          	add	a0,a0,1436 # 8001cf90 <__func__.1+0x2e8>
bool store_access_fault_6(){
    800179fc:	ec06                	sd	ra,24(sp)
    800179fe:	e822                	sd	s0,16(sp)
    80017a00:	e426                	sd	s1,8(sp)
    TEST_START();
    80017a02:	1e5030ef          	jal	8001b3e6 <printf>
    80017a06:	4529                	li	a0,10
    80017a08:	0b1020ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80017a0c:	4511                	li	a0,4
    80017a0e:	8d0e90ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80017a12:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80017a16:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80017a1a:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80017a1e:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80017a22:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80017a26:	08000793          	li	a5,128
    80017a2a:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80017a2e:	10000793          	li	a5,256
    80017a32:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80017a36:	20000793          	li	a5,512
    80017a3a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80017a3e:	40000793          	li	a5,1024
    80017a42:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80017a46:	6785                	lui	a5,0x1
    80017a48:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80017a4c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80017a50:	67a1                	lui	a5,0x8
    80017a52:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80017a56:	4405                	li	s0,1
    80017a58:	01f41793          	sll	a5,s0,0x1f
    80017a5c:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80017a60:	08100793          	li	a5,129
    80017a64:	07e2                	sll	a5,a5,0x18
    80017a66:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HS);
    80017a6a:	450d                	li	a0,3
    80017a6c:	872e90ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80017a70:	0ff0000f          	fence
    80017a74:	00025497          	auipc	s1,0x25
    80017a78:	59c48493          	add	s1,s1,1436 # 8003d010 <excpt>
    80017a7c:	00849023          	sh	s0,0(s1)
    80017a80:	00025797          	auipc	a5,0x25
    80017a84:	5c07b423          	sd	zero,1480(a5) # 8003d048 <excpt+0x38>
    80017a88:	0ff0000f          	fence
    80017a8c:	1406                	sll	s0,s0,0x21
    80017a8e:	40040413          	add	s0,s0,1024
    80017a92:	4781                	li	a5,0
    80017a94:	00f40023          	sb	a5,0(s0)
    
    sb((uintptr_t)0x80000100 << 2, 0x0);

    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    80017a98:	08200593          	li	a1,130
    80017a9c:	0000b617          	auipc	a2,0xb
    80017aa0:	2a460613          	add	a2,a2,676 # 80022d40 <__func__.1+0x6098>
    80017aa4:	00005517          	auipc	a0,0x5
    80017aa8:	50450513          	add	a0,a0,1284 # 8001cfa8 <__func__.1+0x300>
    80017aac:	13b030ef          	jal	8001b3e6 <printf>
    80017ab0:	0014c783          	lbu	a5,1(s1)
    80017ab4:	00005597          	auipc	a1,0x5
    80017ab8:	4cc58593          	add	a1,a1,1228 # 8001cf80 <__func__.1+0x2d8>
    80017abc:	c789                	beqz	a5,80017ac6 <store_access_fault_6+0xdc>
    80017abe:	6498                	ld	a4,8(s1)
    80017ac0:	479d                	li	a5,7
    80017ac2:	06f70e63          	beq	a4,a5,80017b3e <store_access_fault_6+0x154>
    80017ac6:	00005517          	auipc	a0,0x5
    80017aca:	4fa50513          	add	a0,a0,1274 # 8001cfc0 <__func__.1+0x318>
    80017ace:	119030ef          	jal	8001b3e6 <printf>
    80017ad2:	0014c783          	lbu	a5,1(s1)
    80017ad6:	c789                	beqz	a5,80017ae0 <store_access_fault_6+0xf6>
    80017ad8:	6498                	ld	a4,8(s1)
    80017ada:	479d                	li	a5,7
    80017adc:	00f70c63          	beq	a4,a5,80017af4 <store_access_fault_6+0x10a>
    80017ae0:	00005517          	auipc	a0,0x5
    80017ae4:	4e850513          	add	a0,a0,1256 # 8001cfc8 <__func__.1+0x320>
    80017ae8:	0ff030ef          	jal	8001b3e6 <printf>
    80017aec:	02900513          	li	a0,41
    80017af0:	7c8020ef          	jal	8001a2b8 <putchar>
    80017af4:	4529                	li	a0,10
    80017af6:	7c2020ef          	jal	8001a2b8 <putchar>
    80017afa:	0014c403          	lbu	s0,1(s1)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80017afe:	00005597          	auipc	a1,0x5
    80017b02:	48258593          	add	a1,a1,1154 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    80017b06:	c411                	beqz	s0,80017b12 <store_access_fault_6+0x128>
    80017b08:	6498                	ld	a4,8(s1)
    80017b0a:	479d                	li	a5,7
    80017b0c:	02f70463          	beq	a4,a5,80017b34 <store_access_fault_6+0x14a>
    80017b10:	4401                	li	s0,0
    TEST_END();
    80017b12:	00005517          	auipc	a0,0x5
    80017b16:	51650513          	add	a0,a0,1302 # 8001d028 <__func__.1+0x380>
    80017b1a:	0cd030ef          	jal	8001b3e6 <printf>
    80017b1e:	4511                	li	a0,4
    80017b20:	fbfe80ef          	jal	80000ade <goto_priv>
    80017b24:	803e90ef          	jal	80001326 <reset_state>
}
    80017b28:	60e2                	ld	ra,24(sp)
    80017b2a:	8522                	mv	a0,s0
    80017b2c:	6442                	ld	s0,16(sp)
    80017b2e:	64a2                	ld	s1,8(sp)
    80017b30:	6105                	add	sp,sp,32
    80017b32:	8082                	ret
    TEST_END();
    80017b34:	00005597          	auipc	a1,0x5
    80017b38:	43c58593          	add	a1,a1,1084 # 8001cf70 <__func__.1+0x2c8>
    80017b3c:	bfd9                	j	80017b12 <store_access_fault_6+0x128>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    80017b3e:	00005597          	auipc	a1,0x5
    80017b42:	43258593          	add	a1,a1,1074 # 8001cf70 <__func__.1+0x2c8>
    80017b46:	b741                	j	80017ac6 <store_access_fault_6+0xdc>

0000000080017b48 <store_access_fault_7>:


bool store_access_fault_7(){
    80017b48:	1101                	add	sp,sp,-32

    TEST_START();
    80017b4a:	00005597          	auipc	a1,0x5
    80017b4e:	e6e58593          	add	a1,a1,-402 # 8001c9b8 <__func__.23>
    80017b52:	00005517          	auipc	a0,0x5
    80017b56:	43e50513          	add	a0,a0,1086 # 8001cf90 <__func__.1+0x2e8>
bool store_access_fault_7(){
    80017b5a:	ec06                	sd	ra,24(sp)
    80017b5c:	e822                	sd	s0,16(sp)
    80017b5e:	e426                	sd	s1,8(sp)
    TEST_START();
    80017b60:	087030ef          	jal	8001b3e6 <printf>
    80017b64:	4529                	li	a0,10
    80017b66:	752020ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80017b6a:	4511                	li	a0,4
    80017b6c:	f73e80ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80017b70:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80017b74:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80017b78:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80017b7c:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80017b80:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80017b84:	08000793          	li	a5,128
    80017b88:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80017b8c:	10000793          	li	a5,256
    80017b90:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80017b94:	20000793          	li	a5,512
    80017b98:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80017b9c:	40000793          	li	a5,1024
    80017ba0:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80017ba4:	6785                	lui	a5,0x1
    80017ba6:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80017baa:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80017bae:	67a1                	lui	a5,0x8
    80017bb0:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80017bb4:	4405                	li	s0,1
    80017bb6:	01f41793          	sll	a5,s0,0x1f
    80017bba:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80017bbe:	08100793          	li	a5,129
    80017bc2:	07e2                	sll	a5,a5,0x18
    80017bc4:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HU);
    80017bc8:	4505                	li	a0,1
    80017bca:	f15e80ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80017bce:	0ff0000f          	fence
    80017bd2:	00025497          	auipc	s1,0x25
    80017bd6:	43e48493          	add	s1,s1,1086 # 8003d010 <excpt>
    80017bda:	00849023          	sh	s0,0(s1)
    80017bde:	00025797          	auipc	a5,0x25
    80017be2:	4607b523          	sd	zero,1130(a5) # 8003d048 <excpt+0x38>
    80017be6:	0ff0000f          	fence
    80017bea:	1406                	sll	s0,s0,0x21
    80017bec:	40040413          	add	s0,s0,1024
    80017bf0:	4781                	li	a5,0
    80017bf2:	00f40023          	sb	a5,0(s0)
    
    sb((uintptr_t)0x80000100 << 2, 0x0);

    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    80017bf6:	08200593          	li	a1,130
    80017bfa:	0000b617          	auipc	a2,0xb
    80017bfe:	17e60613          	add	a2,a2,382 # 80022d78 <__func__.1+0x60d0>
    80017c02:	00005517          	auipc	a0,0x5
    80017c06:	3a650513          	add	a0,a0,934 # 8001cfa8 <__func__.1+0x300>
    80017c0a:	7dc030ef          	jal	8001b3e6 <printf>
    80017c0e:	0014c783          	lbu	a5,1(s1)
    80017c12:	00005597          	auipc	a1,0x5
    80017c16:	36e58593          	add	a1,a1,878 # 8001cf80 <__func__.1+0x2d8>
    80017c1a:	c789                	beqz	a5,80017c24 <store_access_fault_7+0xdc>
    80017c1c:	6498                	ld	a4,8(s1)
    80017c1e:	479d                	li	a5,7
    80017c20:	06f70e63          	beq	a4,a5,80017c9c <store_access_fault_7+0x154>
    80017c24:	00005517          	auipc	a0,0x5
    80017c28:	39c50513          	add	a0,a0,924 # 8001cfc0 <__func__.1+0x318>
    80017c2c:	7ba030ef          	jal	8001b3e6 <printf>
    80017c30:	0014c783          	lbu	a5,1(s1)
    80017c34:	c789                	beqz	a5,80017c3e <store_access_fault_7+0xf6>
    80017c36:	6498                	ld	a4,8(s1)
    80017c38:	479d                	li	a5,7
    80017c3a:	00f70c63          	beq	a4,a5,80017c52 <store_access_fault_7+0x10a>
    80017c3e:	00005517          	auipc	a0,0x5
    80017c42:	38a50513          	add	a0,a0,906 # 8001cfc8 <__func__.1+0x320>
    80017c46:	7a0030ef          	jal	8001b3e6 <printf>
    80017c4a:	02900513          	li	a0,41
    80017c4e:	66a020ef          	jal	8001a2b8 <putchar>
    80017c52:	4529                	li	a0,10
    80017c54:	664020ef          	jal	8001a2b8 <putchar>
    80017c58:	0014c403          	lbu	s0,1(s1)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80017c5c:	00005597          	auipc	a1,0x5
    80017c60:	32458593          	add	a1,a1,804 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    80017c64:	c411                	beqz	s0,80017c70 <store_access_fault_7+0x128>
    80017c66:	6498                	ld	a4,8(s1)
    80017c68:	479d                	li	a5,7
    80017c6a:	02f70463          	beq	a4,a5,80017c92 <store_access_fault_7+0x14a>
    80017c6e:	4401                	li	s0,0
    TEST_END();
    80017c70:	00005517          	auipc	a0,0x5
    80017c74:	3b850513          	add	a0,a0,952 # 8001d028 <__func__.1+0x380>
    80017c78:	76e030ef          	jal	8001b3e6 <printf>
    80017c7c:	4511                	li	a0,4
    80017c7e:	e61e80ef          	jal	80000ade <goto_priv>
    80017c82:	ea4e90ef          	jal	80001326 <reset_state>
}
    80017c86:	60e2                	ld	ra,24(sp)
    80017c88:	8522                	mv	a0,s0
    80017c8a:	6442                	ld	s0,16(sp)
    80017c8c:	64a2                	ld	s1,8(sp)
    80017c8e:	6105                	add	sp,sp,32
    80017c90:	8082                	ret
    TEST_END();
    80017c92:	00005597          	auipc	a1,0x5
    80017c96:	2de58593          	add	a1,a1,734 # 8001cf70 <__func__.1+0x2c8>
    80017c9a:	bfd9                	j	80017c70 <store_access_fault_7+0x128>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    80017c9c:	00005597          	auipc	a1,0x5
    80017ca0:	2d458593          	add	a1,a1,724 # 8001cf70 <__func__.1+0x2c8>
    80017ca4:	b741                	j	80017c24 <store_access_fault_7+0xdc>

0000000080017ca6 <store_access_fault_8>:

bool store_access_fault_8(){
    80017ca6:	1101                	add	sp,sp,-32

    TEST_START();
    80017ca8:	00005597          	auipc	a1,0x5
    80017cac:	d2858593          	add	a1,a1,-728 # 8001c9d0 <__func__.22>
    80017cb0:	00005517          	auipc	a0,0x5
    80017cb4:	2e050513          	add	a0,a0,736 # 8001cf90 <__func__.1+0x2e8>
bool store_access_fault_8(){
    80017cb8:	ec06                	sd	ra,24(sp)
    80017cba:	e822                	sd	s0,16(sp)
    80017cbc:	e426                	sd	s1,8(sp)
    TEST_START();
    80017cbe:	728030ef          	jal	8001b3e6 <printf>
    80017cc2:	4529                	li	a0,10
    80017cc4:	5f4020ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80017cc8:	4511                	li	a0,4
    80017cca:	e15e80ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80017cce:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80017cd2:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80017cd6:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80017cda:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80017cde:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80017ce2:	08000793          	li	a5,128
    80017ce6:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80017cea:	10000793          	li	a5,256
    80017cee:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80017cf2:	20000793          	li	a5,512
    80017cf6:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80017cfa:	40000793          	li	a5,1024
    80017cfe:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80017d02:	6785                	lui	a5,0x1
    80017d04:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80017d08:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80017d0c:	67a1                	lui	a5,0x8
    80017d0e:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80017d12:	4405                	li	s0,1
    80017d14:	01f41793          	sll	a5,s0,0x1f
    80017d18:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80017d1c:	08100793          	li	a5,129
    80017d20:	07e2                	sll	a5,a5,0x18
    80017d22:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_VU);
    80017d26:	4501                	li	a0,0
    80017d28:	db7e80ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80017d2c:	0ff0000f          	fence
    80017d30:	00025497          	auipc	s1,0x25
    80017d34:	2e048493          	add	s1,s1,736 # 8003d010 <excpt>
    80017d38:	00849023          	sh	s0,0(s1)
    80017d3c:	00025797          	auipc	a5,0x25
    80017d40:	3007b623          	sd	zero,780(a5) # 8003d048 <excpt+0x38>
    80017d44:	0ff0000f          	fence
    80017d48:	1406                	sll	s0,s0,0x21
    80017d4a:	40040413          	add	s0,s0,1024
    80017d4e:	4781                	li	a5,0
    80017d50:	00f40023          	sb	a5,0(s0)
    
    sb((uintptr_t)0x80000100 << 2, 0x0);

    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    80017d54:	08200593          	li	a1,130
    80017d58:	0000b617          	auipc	a2,0xb
    80017d5c:	05860613          	add	a2,a2,88 # 80022db0 <__func__.1+0x6108>
    80017d60:	00005517          	auipc	a0,0x5
    80017d64:	24850513          	add	a0,a0,584 # 8001cfa8 <__func__.1+0x300>
    80017d68:	67e030ef          	jal	8001b3e6 <printf>
    80017d6c:	0014c783          	lbu	a5,1(s1)
    80017d70:	00005597          	auipc	a1,0x5
    80017d74:	21058593          	add	a1,a1,528 # 8001cf80 <__func__.1+0x2d8>
    80017d78:	c789                	beqz	a5,80017d82 <store_access_fault_8+0xdc>
    80017d7a:	6498                	ld	a4,8(s1)
    80017d7c:	479d                	li	a5,7
    80017d7e:	06f70e63          	beq	a4,a5,80017dfa <store_access_fault_8+0x154>
    80017d82:	00005517          	auipc	a0,0x5
    80017d86:	23e50513          	add	a0,a0,574 # 8001cfc0 <__func__.1+0x318>
    80017d8a:	65c030ef          	jal	8001b3e6 <printf>
    80017d8e:	0014c783          	lbu	a5,1(s1)
    80017d92:	c789                	beqz	a5,80017d9c <store_access_fault_8+0xf6>
    80017d94:	6498                	ld	a4,8(s1)
    80017d96:	479d                	li	a5,7
    80017d98:	00f70c63          	beq	a4,a5,80017db0 <store_access_fault_8+0x10a>
    80017d9c:	00005517          	auipc	a0,0x5
    80017da0:	22c50513          	add	a0,a0,556 # 8001cfc8 <__func__.1+0x320>
    80017da4:	642030ef          	jal	8001b3e6 <printf>
    80017da8:	02900513          	li	a0,41
    80017dac:	50c020ef          	jal	8001a2b8 <putchar>
    80017db0:	4529                	li	a0,10
    80017db2:	506020ef          	jal	8001a2b8 <putchar>
    80017db6:	0014c403          	lbu	s0,1(s1)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80017dba:	00005597          	auipc	a1,0x5
    80017dbe:	1c658593          	add	a1,a1,454 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    80017dc2:	c411                	beqz	s0,80017dce <store_access_fault_8+0x128>
    80017dc4:	6498                	ld	a4,8(s1)
    80017dc6:	479d                	li	a5,7
    80017dc8:	02f70463          	beq	a4,a5,80017df0 <store_access_fault_8+0x14a>
    80017dcc:	4401                	li	s0,0
    TEST_END();
    80017dce:	00005517          	auipc	a0,0x5
    80017dd2:	25a50513          	add	a0,a0,602 # 8001d028 <__func__.1+0x380>
    80017dd6:	610030ef          	jal	8001b3e6 <printf>
    80017dda:	4511                	li	a0,4
    80017ddc:	d03e80ef          	jal	80000ade <goto_priv>
    80017de0:	d46e90ef          	jal	80001326 <reset_state>
}
    80017de4:	60e2                	ld	ra,24(sp)
    80017de6:	8522                	mv	a0,s0
    80017de8:	6442                	ld	s0,16(sp)
    80017dea:	64a2                	ld	s1,8(sp)
    80017dec:	6105                	add	sp,sp,32
    80017dee:	8082                	ret
    TEST_END();
    80017df0:	00005597          	auipc	a1,0x5
    80017df4:	18058593          	add	a1,a1,384 # 8001cf70 <__func__.1+0x2c8>
    80017df8:	bfd9                	j	80017dce <store_access_fault_8+0x128>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    80017dfa:	00005597          	auipc	a1,0x5
    80017dfe:	17658593          	add	a1,a1,374 # 8001cf70 <__func__.1+0x2c8>
    80017e02:	b741                	j	80017d82 <store_access_fault_8+0xdc>

0000000080017e04 <store_access_fault_9>:

bool store_access_fault_9(){
    80017e04:	1101                	add	sp,sp,-32

    TEST_START();
    80017e06:	00005597          	auipc	a1,0x5
    80017e0a:	be258593          	add	a1,a1,-1054 # 8001c9e8 <__func__.21>
    80017e0e:	00005517          	auipc	a0,0x5
    80017e12:	18250513          	add	a0,a0,386 # 8001cf90 <__func__.1+0x2e8>
bool store_access_fault_9(){
    80017e16:	ec06                	sd	ra,24(sp)
    80017e18:	e822                	sd	s0,16(sp)
    80017e1a:	e426                	sd	s1,8(sp)
    TEST_START();
    80017e1c:	5ca030ef          	jal	8001b3e6 <printf>
    80017e20:	4529                	li	a0,10
    80017e22:	496020ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80017e26:	4511                	li	a0,4
    80017e28:	cb7e80ef          	jal	80000ade <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80017e2c:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80017e30:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80017e34:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80017e38:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80017e3c:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80017e40:	08000793          	li	a5,128
    80017e44:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80017e48:	10000793          	li	a5,256
    80017e4c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80017e50:	20000793          	li	a5,512
    80017e54:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80017e58:	40000793          	li	a5,1024
    80017e5c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80017e60:	6785                	lui	a5,0x1
    80017e62:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80017e66:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80017e6a:	67a1                	lui	a5,0x8
    80017e6c:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80017e70:	4405                	li	s0,1
    80017e72:	01f41793          	sll	a5,s0,0x1f
    80017e76:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80017e7a:	08100793          	li	a5,129
    80017e7e:	07e2                	sll	a5,a5,0x18
    80017e80:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_VU);
    80017e84:	4501                	li	a0,0
    80017e86:	c59e80ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80017e8a:	0ff0000f          	fence
    80017e8e:	00025497          	auipc	s1,0x25
    80017e92:	18248493          	add	s1,s1,386 # 8003d010 <excpt>
    80017e96:	00849023          	sh	s0,0(s1)
    80017e9a:	00025797          	auipc	a5,0x25
    80017e9e:	1a07b723          	sd	zero,430(a5) # 8003d048 <excpt+0x38>
    80017ea2:	0ff0000f          	fence
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80017ea6:	37ab77b7          	lui	a5,0x37ab7
    80017eaa:	140e                	sll	s0,s0,0x23
    80017eac:	078a                	sll	a5,a5,0x2
    80017eae:	1461                	add	s0,s0,-8
    80017eb0:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80017eb4:	00f43023          	sd	a5,0(s0)
    
    sd((uintptr_t)0x1fffffffe << 2 ,0xdeadbeef);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    80017eb8:	08200593          	li	a1,130
    80017ebc:	0000b617          	auipc	a2,0xb
    80017ec0:	f2c60613          	add	a2,a2,-212 # 80022de8 <__func__.1+0x6140>
    80017ec4:	00005517          	auipc	a0,0x5
    80017ec8:	0e450513          	add	a0,a0,228 # 8001cfa8 <__func__.1+0x300>
    80017ecc:	51a030ef          	jal	8001b3e6 <printf>
    80017ed0:	0014c783          	lbu	a5,1(s1)
    80017ed4:	00005597          	auipc	a1,0x5
    80017ed8:	0ac58593          	add	a1,a1,172 # 8001cf80 <__func__.1+0x2d8>
    80017edc:	c789                	beqz	a5,80017ee6 <store_access_fault_9+0xe2>
    80017ede:	6498                	ld	a4,8(s1)
    80017ee0:	479d                	li	a5,7
    80017ee2:	06f70e63          	beq	a4,a5,80017f5e <store_access_fault_9+0x15a>
    80017ee6:	00005517          	auipc	a0,0x5
    80017eea:	0da50513          	add	a0,a0,218 # 8001cfc0 <__func__.1+0x318>
    80017eee:	4f8030ef          	jal	8001b3e6 <printf>
    80017ef2:	0014c783          	lbu	a5,1(s1)
    80017ef6:	c789                	beqz	a5,80017f00 <store_access_fault_9+0xfc>
    80017ef8:	6498                	ld	a4,8(s1)
    80017efa:	479d                	li	a5,7
    80017efc:	00f70c63          	beq	a4,a5,80017f14 <store_access_fault_9+0x110>
    80017f00:	00005517          	auipc	a0,0x5
    80017f04:	0c850513          	add	a0,a0,200 # 8001cfc8 <__func__.1+0x320>
    80017f08:	4de030ef          	jal	8001b3e6 <printf>
    80017f0c:	02900513          	li	a0,41
    80017f10:	3a8020ef          	jal	8001a2b8 <putchar>
    80017f14:	4529                	li	a0,10
    80017f16:	3a2020ef          	jal	8001a2b8 <putchar>
    80017f1a:	0014c403          	lbu	s0,1(s1)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80017f1e:	00005597          	auipc	a1,0x5
    80017f22:	06258593          	add	a1,a1,98 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    80017f26:	c411                	beqz	s0,80017f32 <store_access_fault_9+0x12e>
    80017f28:	6498                	ld	a4,8(s1)
    80017f2a:	479d                	li	a5,7
    80017f2c:	02f70463          	beq	a4,a5,80017f54 <store_access_fault_9+0x150>
    80017f30:	4401                	li	s0,0
    TEST_END();
    80017f32:	00005517          	auipc	a0,0x5
    80017f36:	0f650513          	add	a0,a0,246 # 8001d028 <__func__.1+0x380>
    80017f3a:	4ac030ef          	jal	8001b3e6 <printf>
    80017f3e:	4511                	li	a0,4
    80017f40:	b9fe80ef          	jal	80000ade <goto_priv>
    80017f44:	be2e90ef          	jal	80001326 <reset_state>
}
    80017f48:	60e2                	ld	ra,24(sp)
    80017f4a:	8522                	mv	a0,s0
    80017f4c:	6442                	ld	s0,16(sp)
    80017f4e:	64a2                	ld	s1,8(sp)
    80017f50:	6105                	add	sp,sp,32
    80017f52:	8082                	ret
    TEST_END();
    80017f54:	00005597          	auipc	a1,0x5
    80017f58:	01c58593          	add	a1,a1,28 # 8001cf70 <__func__.1+0x2c8>
    80017f5c:	bfd9                	j	80017f32 <store_access_fault_9+0x12e>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    80017f5e:	00005597          	auipc	a1,0x5
    80017f62:	01258593          	add	a1,a1,18 # 8001cf70 <__func__.1+0x2c8>
    80017f66:	b741                	j	80017ee6 <store_access_fault_9+0xe2>

0000000080017f68 <store_access_fault_10>:


bool store_access_fault_10(){
    80017f68:	1101                	add	sp,sp,-32

    TEST_START();
    80017f6a:	00005597          	auipc	a1,0x5
    80017f6e:	a9658593          	add	a1,a1,-1386 # 8001ca00 <__func__.20>
    80017f72:	00005517          	auipc	a0,0x5
    80017f76:	01e50513          	add	a0,a0,30 # 8001cf90 <__func__.1+0x2e8>
bool store_access_fault_10(){
    80017f7a:	ec06                	sd	ra,24(sp)
    80017f7c:	e822                	sd	s0,16(sp)
    80017f7e:	e426                	sd	s1,8(sp)
    TEST_START();
    80017f80:	466030ef          	jal	8001b3e6 <printf>
    80017f84:	4529                	li	a0,10
    80017f86:	332020ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80017f8a:	4511                	li	a0,4
    80017f8c:	b53e80ef          	jal	80000ade <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80017f90:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80017f94:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80017f98:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80017f9c:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80017fa0:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80017fa4:	08000793          	li	a5,128
    80017fa8:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80017fac:	4705                	li	a4,1
    80017fae:	01f71793          	sll	a5,a4,0x1f
    80017fb2:	3b079073          	csrw	pmpaddr0,a5

    TEST_SETUP_EXCEPT();    
    80017fb6:	0ff0000f          	fence
    80017fba:	00025417          	auipc	s0,0x25
    80017fbe:	05640413          	add	s0,s0,86 # 8003d010 <excpt>
    80017fc2:	00e41023          	sh	a4,0(s0)
    80017fc6:	00025797          	auipc	a5,0x25
    80017fca:	0807b123          	sd	zero,130(a5) # 8003d048 <excpt+0x38>
    80017fce:	0ff0000f          	fence
    80017fd2:	37ab77b7          	lui	a5,0x37ab7
    80017fd6:	078a                	sll	a5,a5,0x2
    80017fd8:	1706                	sll	a4,a4,0x21
    80017fda:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80017fde:	00f73023          	sd	a5,0(a4)
    
    sd((uintptr_t)0x80000000 << 2,0xdeadbeef);

    printf("%d\n",excpt.triggered);
    80017fe2:	00144583          	lbu	a1,1(s0)
    80017fe6:	00006517          	auipc	a0,0x6
    80017fea:	a1250513          	add	a0,a0,-1518 # 8001d9f8 <__func__.1+0xd50>
    80017fee:	3f8030ef          	jal	8001b3e6 <printf>
    printf("%d\n",excpt.cause);
    80017ff2:	640c                	ld	a1,8(s0)
    80017ff4:	00006517          	auipc	a0,0x6
    80017ff8:	a0450513          	add	a0,a0,-1532 # 8001d9f8 <__func__.1+0xd50>
    80017ffc:	3ea030ef          	jal	8001b3e6 <printf>

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    80018000:	08200593          	li	a1,130
    80018004:	0000b617          	auipc	a2,0xb
    80018008:	e5460613          	add	a2,a2,-428 # 80022e58 <__func__.1+0x61b0>
    8001800c:	00005517          	auipc	a0,0x5
    80018010:	f9c50513          	add	a0,a0,-100 # 8001cfa8 <__func__.1+0x300>
    80018014:	3d2030ef          	jal	8001b3e6 <printf>
    80018018:	00144783          	lbu	a5,1(s0)
    8001801c:	00005597          	auipc	a1,0x5
    80018020:	f6458593          	add	a1,a1,-156 # 8001cf80 <__func__.1+0x2d8>
    80018024:	c789                	beqz	a5,8001802e <store_access_fault_10+0xc6>
    80018026:	6418                	ld	a4,8(s0)
    80018028:	479d                	li	a5,7
    8001802a:	06f70e63          	beq	a4,a5,800180a6 <store_access_fault_10+0x13e>
    8001802e:	00005517          	auipc	a0,0x5
    80018032:	f9250513          	add	a0,a0,-110 # 8001cfc0 <__func__.1+0x318>
    80018036:	3b0030ef          	jal	8001b3e6 <printf>
    8001803a:	00144783          	lbu	a5,1(s0)
    8001803e:	c789                	beqz	a5,80018048 <store_access_fault_10+0xe0>
    80018040:	6418                	ld	a4,8(s0)
    80018042:	479d                	li	a5,7
    80018044:	00f70c63          	beq	a4,a5,8001805c <store_access_fault_10+0xf4>
    80018048:	00005517          	auipc	a0,0x5
    8001804c:	f8050513          	add	a0,a0,-128 # 8001cfc8 <__func__.1+0x320>
    80018050:	396030ef          	jal	8001b3e6 <printf>
    80018054:	02900513          	li	a0,41
    80018058:	260020ef          	jal	8001a2b8 <putchar>
    8001805c:	4529                	li	a0,10
    8001805e:	25a020ef          	jal	8001a2b8 <putchar>
    80018062:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80018066:	00005597          	auipc	a1,0x5
    8001806a:	f1a58593          	add	a1,a1,-230 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    8001806e:	c491                	beqz	s1,8001807a <store_access_fault_10+0x112>
    80018070:	6418                	ld	a4,8(s0)
    80018072:	479d                	li	a5,7
    80018074:	02f70463          	beq	a4,a5,8001809c <store_access_fault_10+0x134>
    80018078:	4481                	li	s1,0
    TEST_END();
    8001807a:	00005517          	auipc	a0,0x5
    8001807e:	fae50513          	add	a0,a0,-82 # 8001d028 <__func__.1+0x380>
    80018082:	364030ef          	jal	8001b3e6 <printf>
    80018086:	4511                	li	a0,4
    80018088:	a57e80ef          	jal	80000ade <goto_priv>
    8001808c:	a9ae90ef          	jal	80001326 <reset_state>
}
    80018090:	60e2                	ld	ra,24(sp)
    80018092:	6442                	ld	s0,16(sp)
    80018094:	8526                	mv	a0,s1
    80018096:	64a2                	ld	s1,8(sp)
    80018098:	6105                	add	sp,sp,32
    8001809a:	8082                	ret
    TEST_END();
    8001809c:	00005597          	auipc	a1,0x5
    800180a0:	ed458593          	add	a1,a1,-300 # 8001cf70 <__func__.1+0x2c8>
    800180a4:	bfd9                	j	8001807a <store_access_fault_10+0x112>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    800180a6:	00005597          	auipc	a1,0x5
    800180aa:	eca58593          	add	a1,a1,-310 # 8001cf70 <__func__.1+0x2c8>
    800180ae:	b741                	j	8001802e <store_access_fault_10+0xc6>

00000000800180b0 <amo_access_fault_1>:




bool amo_access_fault_1(){
    800180b0:	1101                	add	sp,sp,-32

    TEST_START();
    800180b2:	00005597          	auipc	a1,0x5
    800180b6:	96658593          	add	a1,a1,-1690 # 8001ca18 <__func__.19>
    800180ba:	00005517          	auipc	a0,0x5
    800180be:	ed650513          	add	a0,a0,-298 # 8001cf90 <__func__.1+0x2e8>
bool amo_access_fault_1(){
    800180c2:	ec06                	sd	ra,24(sp)
    800180c4:	e822                	sd	s0,16(sp)
    800180c6:	e426                	sd	s1,8(sp)
    TEST_START();
    800180c8:	31e030ef          	jal	8001b3e6 <printf>
    800180cc:	4529                	li	a0,10
    800180ce:	1ea020ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    800180d2:	4511                	li	a0,4
    800180d4:	a0be80ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    800180d8:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    800180dc:	10000793          	li	a5,256
    800180e0:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    800180e4:	20000793          	li	a5,512
    800180e8:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    800180ec:	40000793          	li	a5,1024
    800180f0:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    800180f4:	6785                	lui	a5,0x1
    800180f6:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800180fa:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    800180fe:	4785                	li	a5,1
    80018100:	01f79713          	sll	a4,a5,0x1f
    80018104:	3b071073          	csrw	pmpaddr0,a4
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80018108:	08100713          	li	a4,129
    8001810c:	0762                	sll	a4,a4,0x18
    8001810e:	3b171073          	csrw	pmpaddr1,a4

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80018112:	6721                	lui	a4,0x8
    80018114:	3a072073          	csrs	pmpcfg0,a4

    TEST_SETUP_EXCEPT();
    80018118:	0ff0000f          	fence
    8001811c:	00025417          	auipc	s0,0x25
    80018120:	ef440413          	add	s0,s0,-268 # 8003d010 <excpt>
    80018124:	00f41023          	sh	a5,0(s0)
    80018128:	00025717          	auipc	a4,0x25
    8001812c:	f2073023          	sd	zero,-224(a4) # 8003d048 <excpt+0x38>
    80018130:	0ff0000f          	fence
AMO_INSTRUCTION(amoadd_d, "amoadd.d", uint64_t);
    80018134:	37ab7737          	lui	a4,0x37ab7
    80018138:	070a                	sll	a4,a4,0x2
    8001813a:	1786                	sll	a5,a5,0x21
    8001813c:	40078793          	add	a5,a5,1024
    80018140:	eef70713          	add	a4,a4,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018144:	00e7b72f          	amoadd.d	a4,a4,(a5)
    
    amoadd_d((uintptr_t)0x80000100 << 2 , 0xdeadbeef);

    printf("%d\n",excpt.triggered);
    80018148:	00144583          	lbu	a1,1(s0)
    8001814c:	00006517          	auipc	a0,0x6
    80018150:	8ac50513          	add	a0,a0,-1876 # 8001d9f8 <__func__.1+0xd50>
    80018154:	292030ef          	jal	8001b3e6 <printf>
    printf("%d\n",excpt.cause);
    80018158:	640c                	ld	a1,8(s0)
    8001815a:	00006517          	auipc	a0,0x6
    8001815e:	89e50513          	add	a0,a0,-1890 # 8001d9f8 <__func__.1+0xd50>
    80018162:	284030ef          	jal	8001b3e6 <printf>

    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80018166:	08200593          	li	a1,130
    8001816a:	0000b617          	auipc	a2,0xb
    8001816e:	d4e60613          	add	a2,a2,-690 # 80022eb8 <__func__.1+0x6210>
    80018172:	00005517          	auipc	a0,0x5
    80018176:	e3650513          	add	a0,a0,-458 # 8001cfa8 <__func__.1+0x300>
    8001817a:	26c030ef          	jal	8001b3e6 <printf>
    8001817e:	00144783          	lbu	a5,1(s0)
    80018182:	00005597          	auipc	a1,0x5
    80018186:	dfe58593          	add	a1,a1,-514 # 8001cf80 <__func__.1+0x2d8>
    8001818a:	c789                	beqz	a5,80018194 <amo_access_fault_1+0xe4>
    8001818c:	6418                	ld	a4,8(s0)
    8001818e:	479d                	li	a5,7
    80018190:	06f70e63          	beq	a4,a5,8001820c <amo_access_fault_1+0x15c>
    80018194:	00005517          	auipc	a0,0x5
    80018198:	e2c50513          	add	a0,a0,-468 # 8001cfc0 <__func__.1+0x318>
    8001819c:	24a030ef          	jal	8001b3e6 <printf>
    800181a0:	00144783          	lbu	a5,1(s0)
    800181a4:	c789                	beqz	a5,800181ae <amo_access_fault_1+0xfe>
    800181a6:	6418                	ld	a4,8(s0)
    800181a8:	479d                	li	a5,7
    800181aa:	00f70c63          	beq	a4,a5,800181c2 <amo_access_fault_1+0x112>
    800181ae:	00005517          	auipc	a0,0x5
    800181b2:	e1a50513          	add	a0,a0,-486 # 8001cfc8 <__func__.1+0x320>
    800181b6:	230030ef          	jal	8001b3e6 <printf>
    800181ba:	02900513          	li	a0,41
    800181be:	0fa020ef          	jal	8001a2b8 <putchar>
    800181c2:	4529                	li	a0,10
    800181c4:	0f4020ef          	jal	8001a2b8 <putchar>
    800181c8:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    800181cc:	00005597          	auipc	a1,0x5
    800181d0:	db458593          	add	a1,a1,-588 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    800181d4:	c491                	beqz	s1,800181e0 <amo_access_fault_1+0x130>
    800181d6:	6418                	ld	a4,8(s0)
    800181d8:	479d                	li	a5,7
    800181da:	02f70463          	beq	a4,a5,80018202 <amo_access_fault_1+0x152>
    800181de:	4481                	li	s1,0
    TEST_END();
    800181e0:	00005517          	auipc	a0,0x5
    800181e4:	e4850513          	add	a0,a0,-440 # 8001d028 <__func__.1+0x380>
    800181e8:	1fe030ef          	jal	8001b3e6 <printf>
    800181ec:	4511                	li	a0,4
    800181ee:	8f1e80ef          	jal	80000ade <goto_priv>
    800181f2:	934e90ef          	jal	80001326 <reset_state>
}
    800181f6:	60e2                	ld	ra,24(sp)
    800181f8:	6442                	ld	s0,16(sp)
    800181fa:	8526                	mv	a0,s1
    800181fc:	64a2                	ld	s1,8(sp)
    800181fe:	6105                	add	sp,sp,32
    80018200:	8082                	ret
    TEST_END();
    80018202:	00005597          	auipc	a1,0x5
    80018206:	d6e58593          	add	a1,a1,-658 # 8001cf70 <__func__.1+0x2c8>
    8001820a:	bfd9                	j	800181e0 <amo_access_fault_1+0x130>
    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001820c:	00005597          	auipc	a1,0x5
    80018210:	d6458593          	add	a1,a1,-668 # 8001cf70 <__func__.1+0x2c8>
    80018214:	b741                	j	80018194 <amo_access_fault_1+0xe4>

0000000080018216 <amo_access_fault_2>:

bool amo_access_fault_2(){
    80018216:	1101                	add	sp,sp,-32

    TEST_START();
    80018218:	00005597          	auipc	a1,0x5
    8001821c:	81858593          	add	a1,a1,-2024 # 8001ca30 <__func__.18>
    80018220:	00005517          	auipc	a0,0x5
    80018224:	d7050513          	add	a0,a0,-656 # 8001cf90 <__func__.1+0x2e8>
bool amo_access_fault_2(){
    80018228:	ec06                	sd	ra,24(sp)
    8001822a:	e822                	sd	s0,16(sp)
    8001822c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001822e:	1b8030ef          	jal	8001b3e6 <printf>
    80018232:	4529                	li	a0,10
    80018234:	084020ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80018238:	4511                	li	a0,4
    8001823a:	8a5e80ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001823e:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80018242:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80018246:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001824a:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001824e:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80018252:	08000793          	li	a5,128
    80018256:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001825a:	10000793          	li	a5,256
    8001825e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80018262:	20000793          	li	a5,512
    80018266:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001826a:	40000793          	li	a5,1024
    8001826e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80018272:	6785                	lui	a5,0x1
    80018274:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80018278:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001827c:	67a1                	lui	a5,0x8
    8001827e:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80018282:	4405                	li	s0,1
    80018284:	01f41793          	sll	a5,s0,0x1f
    80018288:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001828c:	08100793          	li	a5,129
    80018290:	07e2                	sll	a5,a5,0x18
    80018292:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HS);
    80018296:	450d                	li	a0,3
    80018298:	847e80ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001829c:	0ff0000f          	fence
    800182a0:	00025497          	auipc	s1,0x25
    800182a4:	d7048493          	add	s1,s1,-656 # 8003d010 <excpt>
    800182a8:	00849023          	sh	s0,0(s1)
    800182ac:	00025797          	auipc	a5,0x25
    800182b0:	d807be23          	sd	zero,-612(a5) # 8003d048 <excpt+0x38>
    800182b4:	0ff0000f          	fence
    800182b8:	37ab77b7          	lui	a5,0x37ab7
    800182bc:	078a                	sll	a5,a5,0x2
    800182be:	1406                	sll	s0,s0,0x21
    800182c0:	40040413          	add	s0,s0,1024
    800182c4:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800182c8:	00f437af          	amoadd.d	a5,a5,(s0)
    
    amoadd_d((uintptr_t)0x80000100 << 2 , 0xdeadbeef);

    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    800182cc:	08200593          	li	a1,130
    800182d0:	0000b617          	auipc	a2,0xb
    800182d4:	c2860613          	add	a2,a2,-984 # 80022ef8 <__func__.1+0x6250>
    800182d8:	00005517          	auipc	a0,0x5
    800182dc:	cd050513          	add	a0,a0,-816 # 8001cfa8 <__func__.1+0x300>
    800182e0:	106030ef          	jal	8001b3e6 <printf>
    800182e4:	0014c783          	lbu	a5,1(s1)
    800182e8:	00005597          	auipc	a1,0x5
    800182ec:	c9858593          	add	a1,a1,-872 # 8001cf80 <__func__.1+0x2d8>
    800182f0:	c789                	beqz	a5,800182fa <amo_access_fault_2+0xe4>
    800182f2:	6498                	ld	a4,8(s1)
    800182f4:	479d                	li	a5,7
    800182f6:	06f70e63          	beq	a4,a5,80018372 <amo_access_fault_2+0x15c>
    800182fa:	00005517          	auipc	a0,0x5
    800182fe:	cc650513          	add	a0,a0,-826 # 8001cfc0 <__func__.1+0x318>
    80018302:	0e4030ef          	jal	8001b3e6 <printf>
    80018306:	0014c783          	lbu	a5,1(s1)
    8001830a:	c789                	beqz	a5,80018314 <amo_access_fault_2+0xfe>
    8001830c:	6498                	ld	a4,8(s1)
    8001830e:	479d                	li	a5,7
    80018310:	00f70c63          	beq	a4,a5,80018328 <amo_access_fault_2+0x112>
    80018314:	00005517          	auipc	a0,0x5
    80018318:	cb450513          	add	a0,a0,-844 # 8001cfc8 <__func__.1+0x320>
    8001831c:	0ca030ef          	jal	8001b3e6 <printf>
    80018320:	02900513          	li	a0,41
    80018324:	795010ef          	jal	8001a2b8 <putchar>
    80018328:	4529                	li	a0,10
    8001832a:	78f010ef          	jal	8001a2b8 <putchar>
    8001832e:	0014c403          	lbu	s0,1(s1)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80018332:	00005597          	auipc	a1,0x5
    80018336:	c4e58593          	add	a1,a1,-946 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001833a:	c411                	beqz	s0,80018346 <amo_access_fault_2+0x130>
    8001833c:	6498                	ld	a4,8(s1)
    8001833e:	479d                	li	a5,7
    80018340:	02f70463          	beq	a4,a5,80018368 <amo_access_fault_2+0x152>
    80018344:	4401                	li	s0,0
    TEST_END();
    80018346:	00005517          	auipc	a0,0x5
    8001834a:	ce250513          	add	a0,a0,-798 # 8001d028 <__func__.1+0x380>
    8001834e:	098030ef          	jal	8001b3e6 <printf>
    80018352:	4511                	li	a0,4
    80018354:	f8ae80ef          	jal	80000ade <goto_priv>
    80018358:	fcfe80ef          	jal	80001326 <reset_state>
}
    8001835c:	60e2                	ld	ra,24(sp)
    8001835e:	8522                	mv	a0,s0
    80018360:	6442                	ld	s0,16(sp)
    80018362:	64a2                	ld	s1,8(sp)
    80018364:	6105                	add	sp,sp,32
    80018366:	8082                	ret
    TEST_END();
    80018368:	00005597          	auipc	a1,0x5
    8001836c:	c0858593          	add	a1,a1,-1016 # 8001cf70 <__func__.1+0x2c8>
    80018370:	bfd9                	j	80018346 <amo_access_fault_2+0x130>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80018372:	00005597          	auipc	a1,0x5
    80018376:	bfe58593          	add	a1,a1,-1026 # 8001cf70 <__func__.1+0x2c8>
    8001837a:	b741                	j	800182fa <amo_access_fault_2+0xe4>

000000008001837c <amo_access_fault_3>:


bool amo_access_fault_3(){
    8001837c:	1101                	add	sp,sp,-32

    TEST_START();
    8001837e:	00004597          	auipc	a1,0x4
    80018382:	6ca58593          	add	a1,a1,1738 # 8001ca48 <__func__.17>
    80018386:	00005517          	auipc	a0,0x5
    8001838a:	c0a50513          	add	a0,a0,-1014 # 8001cf90 <__func__.1+0x2e8>
bool amo_access_fault_3(){
    8001838e:	ec06                	sd	ra,24(sp)
    80018390:	e822                	sd	s0,16(sp)
    80018392:	e426                	sd	s1,8(sp)
    TEST_START();
    80018394:	052030ef          	jal	8001b3e6 <printf>
    80018398:	4529                	li	a0,10
    8001839a:	71f010ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    8001839e:	4511                	li	a0,4
    800183a0:	f3ee80ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    800183a4:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    800183a8:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    800183ac:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    800183b0:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    800183b4:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    800183b8:	08000793          	li	a5,128
    800183bc:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    800183c0:	10000793          	li	a5,256
    800183c4:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    800183c8:	20000793          	li	a5,512
    800183cc:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    800183d0:	40000793          	li	a5,1024
    800183d4:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    800183d8:	6785                	lui	a5,0x1
    800183da:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800183de:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    800183e2:	67a1                	lui	a5,0x8
    800183e4:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    800183e8:	4405                	li	s0,1
    800183ea:	01f41793          	sll	a5,s0,0x1f
    800183ee:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    800183f2:	08100793          	li	a5,129
    800183f6:	07e2                	sll	a5,a5,0x18
    800183f8:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HU);
    800183fc:	4505                	li	a0,1
    800183fe:	ee0e80ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80018402:	0ff0000f          	fence
    80018406:	00025497          	auipc	s1,0x25
    8001840a:	c0a48493          	add	s1,s1,-1014 # 8003d010 <excpt>
    8001840e:	00849023          	sh	s0,0(s1)
    80018412:	00025797          	auipc	a5,0x25
    80018416:	c207bb23          	sd	zero,-970(a5) # 8003d048 <excpt+0x38>
    8001841a:	0ff0000f          	fence
    8001841e:	37ab77b7          	lui	a5,0x37ab7
    80018422:	078a                	sll	a5,a5,0x2
    80018424:	1406                	sll	s0,s0,0x21
    80018426:	40040413          	add	s0,s0,1024
    8001842a:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001842e:	00f437af          	amoadd.d	a5,a5,(s0)
    
    amoadd_d((uintptr_t)0x80000100 << 2 , 0xdeadbeef);

    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80018432:	08200593          	li	a1,130
    80018436:	0000b617          	auipc	a2,0xb
    8001843a:	b0260613          	add	a2,a2,-1278 # 80022f38 <__func__.1+0x6290>
    8001843e:	00005517          	auipc	a0,0x5
    80018442:	b6a50513          	add	a0,a0,-1174 # 8001cfa8 <__func__.1+0x300>
    80018446:	7a1020ef          	jal	8001b3e6 <printf>
    8001844a:	0014c783          	lbu	a5,1(s1)
    8001844e:	00005597          	auipc	a1,0x5
    80018452:	b3258593          	add	a1,a1,-1230 # 8001cf80 <__func__.1+0x2d8>
    80018456:	c789                	beqz	a5,80018460 <amo_access_fault_3+0xe4>
    80018458:	6498                	ld	a4,8(s1)
    8001845a:	479d                	li	a5,7
    8001845c:	06f70e63          	beq	a4,a5,800184d8 <amo_access_fault_3+0x15c>
    80018460:	00005517          	auipc	a0,0x5
    80018464:	b6050513          	add	a0,a0,-1184 # 8001cfc0 <__func__.1+0x318>
    80018468:	77f020ef          	jal	8001b3e6 <printf>
    8001846c:	0014c783          	lbu	a5,1(s1)
    80018470:	c789                	beqz	a5,8001847a <amo_access_fault_3+0xfe>
    80018472:	6498                	ld	a4,8(s1)
    80018474:	479d                	li	a5,7
    80018476:	00f70c63          	beq	a4,a5,8001848e <amo_access_fault_3+0x112>
    8001847a:	00005517          	auipc	a0,0x5
    8001847e:	b4e50513          	add	a0,a0,-1202 # 8001cfc8 <__func__.1+0x320>
    80018482:	765020ef          	jal	8001b3e6 <printf>
    80018486:	02900513          	li	a0,41
    8001848a:	62f010ef          	jal	8001a2b8 <putchar>
    8001848e:	4529                	li	a0,10
    80018490:	629010ef          	jal	8001a2b8 <putchar>
    80018494:	0014c403          	lbu	s0,1(s1)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80018498:	00005597          	auipc	a1,0x5
    8001849c:	ae858593          	add	a1,a1,-1304 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    800184a0:	c411                	beqz	s0,800184ac <amo_access_fault_3+0x130>
    800184a2:	6498                	ld	a4,8(s1)
    800184a4:	479d                	li	a5,7
    800184a6:	02f70463          	beq	a4,a5,800184ce <amo_access_fault_3+0x152>
    800184aa:	4401                	li	s0,0
    TEST_END();
    800184ac:	00005517          	auipc	a0,0x5
    800184b0:	b7c50513          	add	a0,a0,-1156 # 8001d028 <__func__.1+0x380>
    800184b4:	733020ef          	jal	8001b3e6 <printf>
    800184b8:	4511                	li	a0,4
    800184ba:	e24e80ef          	jal	80000ade <goto_priv>
    800184be:	e69e80ef          	jal	80001326 <reset_state>
}
    800184c2:	60e2                	ld	ra,24(sp)
    800184c4:	8522                	mv	a0,s0
    800184c6:	6442                	ld	s0,16(sp)
    800184c8:	64a2                	ld	s1,8(sp)
    800184ca:	6105                	add	sp,sp,32
    800184cc:	8082                	ret
    TEST_END();
    800184ce:	00005597          	auipc	a1,0x5
    800184d2:	aa258593          	add	a1,a1,-1374 # 8001cf70 <__func__.1+0x2c8>
    800184d6:	bfd9                	j	800184ac <amo_access_fault_3+0x130>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    800184d8:	00005597          	auipc	a1,0x5
    800184dc:	a9858593          	add	a1,a1,-1384 # 8001cf70 <__func__.1+0x2c8>
    800184e0:	b741                	j	80018460 <amo_access_fault_3+0xe4>

00000000800184e2 <amo_access_fault_4>:

bool amo_access_fault_4(){
    800184e2:	1101                	add	sp,sp,-32

    TEST_START();
    800184e4:	00004597          	auipc	a1,0x4
    800184e8:	57c58593          	add	a1,a1,1404 # 8001ca60 <__func__.16>
    800184ec:	00005517          	auipc	a0,0x5
    800184f0:	aa450513          	add	a0,a0,-1372 # 8001cf90 <__func__.1+0x2e8>
bool amo_access_fault_4(){
    800184f4:	ec06                	sd	ra,24(sp)
    800184f6:	e822                	sd	s0,16(sp)
    800184f8:	e426                	sd	s1,8(sp)
    TEST_START();
    800184fa:	6ed020ef          	jal	8001b3e6 <printf>
    800184fe:	4529                	li	a0,10
    80018500:	5b9010ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80018504:	4511                	li	a0,4
    80018506:	dd8e80ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001850a:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001850e:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80018512:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80018516:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001851a:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001851e:	08000793          	li	a5,128
    80018522:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80018526:	10000793          	li	a5,256
    8001852a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001852e:	20000793          	li	a5,512
    80018532:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80018536:	40000793          	li	a5,1024
    8001853a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001853e:	6785                	lui	a5,0x1
    80018540:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80018544:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80018548:	67a1                	lui	a5,0x8
    8001854a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001854e:	4405                	li	s0,1
    80018550:	01f41793          	sll	a5,s0,0x1f
    80018554:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80018558:	08100793          	li	a5,129
    8001855c:	07e2                	sll	a5,a5,0x18
    8001855e:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_VU);
    80018562:	4501                	li	a0,0
    80018564:	d7ae80ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80018568:	0ff0000f          	fence
    8001856c:	00025497          	auipc	s1,0x25
    80018570:	aa448493          	add	s1,s1,-1372 # 8003d010 <excpt>
    80018574:	00849023          	sh	s0,0(s1)
    80018578:	00025797          	auipc	a5,0x25
    8001857c:	ac07b823          	sd	zero,-1328(a5) # 8003d048 <excpt+0x38>
    80018580:	0ff0000f          	fence
    80018584:	37ab77b7          	lui	a5,0x37ab7
    80018588:	078a                	sll	a5,a5,0x2
    8001858a:	1406                	sll	s0,s0,0x21
    8001858c:	40040413          	add	s0,s0,1024
    80018590:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018594:	00f437af          	amoadd.d	a5,a5,(s0)
    
    amoadd_d((uintptr_t)0x80000100 << 2 , 0xdeadbeef);

    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80018598:	08200593          	li	a1,130
    8001859c:	0000b617          	auipc	a2,0xb
    800185a0:	9dc60613          	add	a2,a2,-1572 # 80022f78 <__func__.1+0x62d0>
    800185a4:	00005517          	auipc	a0,0x5
    800185a8:	a0450513          	add	a0,a0,-1532 # 8001cfa8 <__func__.1+0x300>
    800185ac:	63b020ef          	jal	8001b3e6 <printf>
    800185b0:	0014c783          	lbu	a5,1(s1)
    800185b4:	00005597          	auipc	a1,0x5
    800185b8:	9cc58593          	add	a1,a1,-1588 # 8001cf80 <__func__.1+0x2d8>
    800185bc:	c789                	beqz	a5,800185c6 <amo_access_fault_4+0xe4>
    800185be:	6498                	ld	a4,8(s1)
    800185c0:	479d                	li	a5,7
    800185c2:	06f70e63          	beq	a4,a5,8001863e <amo_access_fault_4+0x15c>
    800185c6:	00005517          	auipc	a0,0x5
    800185ca:	9fa50513          	add	a0,a0,-1542 # 8001cfc0 <__func__.1+0x318>
    800185ce:	619020ef          	jal	8001b3e6 <printf>
    800185d2:	0014c783          	lbu	a5,1(s1)
    800185d6:	c789                	beqz	a5,800185e0 <amo_access_fault_4+0xfe>
    800185d8:	6498                	ld	a4,8(s1)
    800185da:	479d                	li	a5,7
    800185dc:	00f70c63          	beq	a4,a5,800185f4 <amo_access_fault_4+0x112>
    800185e0:	00005517          	auipc	a0,0x5
    800185e4:	9e850513          	add	a0,a0,-1560 # 8001cfc8 <__func__.1+0x320>
    800185e8:	5ff020ef          	jal	8001b3e6 <printf>
    800185ec:	02900513          	li	a0,41
    800185f0:	4c9010ef          	jal	8001a2b8 <putchar>
    800185f4:	4529                	li	a0,10
    800185f6:	4c3010ef          	jal	8001a2b8 <putchar>
    800185fa:	0014c403          	lbu	s0,1(s1)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    800185fe:	00005597          	auipc	a1,0x5
    80018602:	98258593          	add	a1,a1,-1662 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    80018606:	c411                	beqz	s0,80018612 <amo_access_fault_4+0x130>
    80018608:	6498                	ld	a4,8(s1)
    8001860a:	479d                	li	a5,7
    8001860c:	02f70463          	beq	a4,a5,80018634 <amo_access_fault_4+0x152>
    80018610:	4401                	li	s0,0
    TEST_END();
    80018612:	00005517          	auipc	a0,0x5
    80018616:	a1650513          	add	a0,a0,-1514 # 8001d028 <__func__.1+0x380>
    8001861a:	5cd020ef          	jal	8001b3e6 <printf>
    8001861e:	4511                	li	a0,4
    80018620:	cbee80ef          	jal	80000ade <goto_priv>
    80018624:	d03e80ef          	jal	80001326 <reset_state>
}
    80018628:	60e2                	ld	ra,24(sp)
    8001862a:	8522                	mv	a0,s0
    8001862c:	6442                	ld	s0,16(sp)
    8001862e:	64a2                	ld	s1,8(sp)
    80018630:	6105                	add	sp,sp,32
    80018632:	8082                	ret
    TEST_END();
    80018634:	00005597          	auipc	a1,0x5
    80018638:	93c58593          	add	a1,a1,-1732 # 8001cf70 <__func__.1+0x2c8>
    8001863c:	bfd9                	j	80018612 <amo_access_fault_4+0x130>
    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001863e:	00005597          	auipc	a1,0x5
    80018642:	93258593          	add	a1,a1,-1742 # 8001cf70 <__func__.1+0x2c8>
    80018646:	b741                	j	800185c6 <amo_access_fault_4+0xe4>

0000000080018648 <amo_access_fault_5>:

bool amo_access_fault_5(){
    80018648:	1141                	add	sp,sp,-16

    TEST_START();
    8001864a:	00004597          	auipc	a1,0x4
    8001864e:	42e58593          	add	a1,a1,1070 # 8001ca78 <__func__.15>
    80018652:	00005517          	auipc	a0,0x5
    80018656:	93e50513          	add	a0,a0,-1730 # 8001cf90 <__func__.1+0x2e8>
bool amo_access_fault_5(){
    8001865a:	e406                	sd	ra,8(sp)
    8001865c:	e022                	sd	s0,0(sp)
    TEST_START();
    8001865e:	589020ef          	jal	8001b3e6 <printf>
    80018662:	4529                	li	a0,10
    80018664:	455010ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80018668:	4511                	li	a0,4
    8001866a:	c74e80ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001866e:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80018672:	10000793          	li	a5,256
    80018676:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001867a:	20000793          	li	a5,512
    8001867e:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80018682:	40000793          	li	a5,1024
    80018686:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001868a:	6785                	lui	a5,0x1
    8001868c:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80018690:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80018694:	4785                	li	a5,1
    80018696:	01f79713          	sll	a4,a5,0x1f
    8001869a:	3b071073          	csrw	pmpaddr0,a4
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001869e:	08100713          	li	a4,129
    800186a2:	0762                	sll	a4,a4,0x18
    800186a4:	3b171073          	csrw	pmpaddr1,a4

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    800186a8:	6721                	lui	a4,0x8
    800186aa:	3a073073          	csrc	pmpcfg0,a4

    TEST_SETUP_EXCEPT();
    800186ae:	0ff0000f          	fence
    800186b2:	00025417          	auipc	s0,0x25
    800186b6:	95e40413          	add	s0,s0,-1698 # 8003d010 <excpt>
    800186ba:	00f41023          	sh	a5,0(s0)
    800186be:	00025717          	auipc	a4,0x25
    800186c2:	98073523          	sd	zero,-1654(a4) # 8003d048 <excpt+0x38>
    800186c6:	0ff0000f          	fence
    800186ca:	37ab7737          	lui	a4,0x37ab7
    800186ce:	070a                	sll	a4,a4,0x2
    800186d0:	1786                	sll	a5,a5,0x21
    800186d2:	40078793          	add	a5,a5,1024
    800186d6:	eef70713          	add	a4,a4,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800186da:	00e7b72f          	amoadd.d	a4,a4,(a5)
    
    amoadd_d((uintptr_t)0x80000100 << 2 , 0xdeadbeef);

    printf("%d\n",excpt.triggered);
    800186de:	00144583          	lbu	a1,1(s0)
    800186e2:	00005517          	auipc	a0,0x5
    800186e6:	31650513          	add	a0,a0,790 # 8001d9f8 <__func__.1+0xd50>
    800186ea:	4fd020ef          	jal	8001b3e6 <printf>
    printf("%d\n",excpt.cause);
    800186ee:	640c                	ld	a1,8(s0)
    800186f0:	00005517          	auipc	a0,0x5
    800186f4:	30850513          	add	a0,a0,776 # 8001d9f8 <__func__.1+0xd50>
    800186f8:	4ef020ef          	jal	8001b3e6 <printf>

    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    800186fc:	08200593          	li	a1,130
    80018700:	0000b617          	auipc	a2,0xb
    80018704:	8b860613          	add	a2,a2,-1864 # 80022fb8 <__func__.1+0x6310>
    80018708:	00005517          	auipc	a0,0x5
    8001870c:	8a050513          	add	a0,a0,-1888 # 8001cfa8 <__func__.1+0x300>
    80018710:	4d7020ef          	jal	8001b3e6 <printf>
    80018714:	00144783          	lbu	a5,1(s0)
    80018718:	00005597          	auipc	a1,0x5
    8001871c:	85858593          	add	a1,a1,-1960 # 8001cf70 <__func__.1+0x2c8>
    80018720:	c789                	beqz	a5,8001872a <amo_access_fault_5+0xe2>
    80018722:	00005597          	auipc	a1,0x5
    80018726:	85e58593          	add	a1,a1,-1954 # 8001cf80 <__func__.1+0x2d8>
    8001872a:	00005517          	auipc	a0,0x5
    8001872e:	89650513          	add	a0,a0,-1898 # 8001cfc0 <__func__.1+0x318>
    80018732:	4b5020ef          	jal	8001b3e6 <printf>
    80018736:	00144783          	lbu	a5,1(s0)
    8001873a:	e3b1                	bnez	a5,8001877e <amo_access_fault_5+0x136>
    8001873c:	4529                	li	a0,10
    8001873e:	37b010ef          	jal	8001a2b8 <putchar>
    80018742:	00144783          	lbu	a5,1(s0)
    80018746:	e795                	bnez	a5,80018772 <amo_access_fault_5+0x12a>
    80018748:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001874a:	00005597          	auipc	a1,0x5
    8001874e:	82658593          	add	a1,a1,-2010 # 8001cf70 <__func__.1+0x2c8>
    80018752:	00005517          	auipc	a0,0x5
    80018756:	8d650513          	add	a0,a0,-1834 # 8001d028 <__func__.1+0x380>
    8001875a:	48d020ef          	jal	8001b3e6 <printf>
    8001875e:	4511                	li	a0,4
    80018760:	b7ee80ef          	jal	80000ade <goto_priv>
    80018764:	bc3e80ef          	jal	80001326 <reset_state>
}
    80018768:	60a2                	ld	ra,8(sp)
    8001876a:	8522                	mv	a0,s0
    8001876c:	6402                	ld	s0,0(sp)
    8001876e:	0141                	add	sp,sp,16
    80018770:	8082                	ret
    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    80018772:	4401                	li	s0,0
    TEST_END();
    80018774:	00005597          	auipc	a1,0x5
    80018778:	80c58593          	add	a1,a1,-2036 # 8001cf80 <__func__.1+0x2d8>
    8001877c:	bfd9                	j	80018752 <amo_access_fault_5+0x10a>
    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001877e:	00005517          	auipc	a0,0x5
    80018782:	84a50513          	add	a0,a0,-1974 # 8001cfc8 <__func__.1+0x320>
    80018786:	461020ef          	jal	8001b3e6 <printf>
    8001878a:	02900513          	li	a0,41
    8001878e:	32b010ef          	jal	8001a2b8 <putchar>
    80018792:	b76d                	j	8001873c <amo_access_fault_5+0xf4>

0000000080018794 <amo_access_fault_6>:


bool amo_access_fault_6(){
    80018794:	1101                	add	sp,sp,-32

    TEST_START();
    80018796:	00004597          	auipc	a1,0x4
    8001879a:	2fa58593          	add	a1,a1,762 # 8001ca90 <__func__.14>
    8001879e:	00004517          	auipc	a0,0x4
    800187a2:	7f250513          	add	a0,a0,2034 # 8001cf90 <__func__.1+0x2e8>
bool amo_access_fault_6(){
    800187a6:	ec06                	sd	ra,24(sp)
    800187a8:	e822                	sd	s0,16(sp)
    800187aa:	e426                	sd	s1,8(sp)
    TEST_START();
    800187ac:	43b020ef          	jal	8001b3e6 <printf>
    800187b0:	4529                	li	a0,10
    800187b2:	307010ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    800187b6:	4511                	li	a0,4
    800187b8:	b26e80ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    800187bc:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    800187c0:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    800187c4:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    800187c8:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    800187cc:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    800187d0:	08000793          	li	a5,128
    800187d4:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    800187d8:	10000793          	li	a5,256
    800187dc:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    800187e0:	20000793          	li	a5,512
    800187e4:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    800187e8:	40000793          	li	a5,1024
    800187ec:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    800187f0:	6785                	lui	a5,0x1
    800187f2:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800187f6:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    800187fa:	67a1                	lui	a5,0x8
    800187fc:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80018800:	4405                	li	s0,1
    80018802:	01f41793          	sll	a5,s0,0x1f
    80018806:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001880a:	08100793          	li	a5,129
    8001880e:	07e2                	sll	a5,a5,0x18
    80018810:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HS);
    80018814:	450d                	li	a0,3
    80018816:	ac8e80ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001881a:	0ff0000f          	fence
    8001881e:	00024497          	auipc	s1,0x24
    80018822:	7f248493          	add	s1,s1,2034 # 8003d010 <excpt>
    80018826:	00849023          	sh	s0,0(s1)
    8001882a:	00025797          	auipc	a5,0x25
    8001882e:	8007bf23          	sd	zero,-2018(a5) # 8003d048 <excpt+0x38>
    80018832:	0ff0000f          	fence
    80018836:	37ab77b7          	lui	a5,0x37ab7
    8001883a:	078a                	sll	a5,a5,0x2
    8001883c:	1406                	sll	s0,s0,0x21
    8001883e:	40040413          	add	s0,s0,1024
    80018842:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018846:	00f437af          	amoadd.d	a5,a5,(s0)
    
    amoadd_d((uintptr_t)0x80000100 << 2 , 0xdeadbeef);

    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001884a:	08200593          	li	a1,130
    8001884e:	0000a617          	auipc	a2,0xa
    80018852:	7aa60613          	add	a2,a2,1962 # 80022ff8 <__func__.1+0x6350>
    80018856:	00004517          	auipc	a0,0x4
    8001885a:	75250513          	add	a0,a0,1874 # 8001cfa8 <__func__.1+0x300>
    8001885e:	389020ef          	jal	8001b3e6 <printf>
    80018862:	0014c783          	lbu	a5,1(s1)
    80018866:	00004597          	auipc	a1,0x4
    8001886a:	71a58593          	add	a1,a1,1818 # 8001cf80 <__func__.1+0x2d8>
    8001886e:	c789                	beqz	a5,80018878 <amo_access_fault_6+0xe4>
    80018870:	6498                	ld	a4,8(s1)
    80018872:	479d                	li	a5,7
    80018874:	06f70e63          	beq	a4,a5,800188f0 <amo_access_fault_6+0x15c>
    80018878:	00004517          	auipc	a0,0x4
    8001887c:	74850513          	add	a0,a0,1864 # 8001cfc0 <__func__.1+0x318>
    80018880:	367020ef          	jal	8001b3e6 <printf>
    80018884:	0014c783          	lbu	a5,1(s1)
    80018888:	c789                	beqz	a5,80018892 <amo_access_fault_6+0xfe>
    8001888a:	6498                	ld	a4,8(s1)
    8001888c:	479d                	li	a5,7
    8001888e:	00f70c63          	beq	a4,a5,800188a6 <amo_access_fault_6+0x112>
    80018892:	00004517          	auipc	a0,0x4
    80018896:	73650513          	add	a0,a0,1846 # 8001cfc8 <__func__.1+0x320>
    8001889a:	34d020ef          	jal	8001b3e6 <printf>
    8001889e:	02900513          	li	a0,41
    800188a2:	217010ef          	jal	8001a2b8 <putchar>
    800188a6:	4529                	li	a0,10
    800188a8:	211010ef          	jal	8001a2b8 <putchar>
    800188ac:	0014c403          	lbu	s0,1(s1)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    800188b0:	00004597          	auipc	a1,0x4
    800188b4:	6d058593          	add	a1,a1,1744 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    800188b8:	c411                	beqz	s0,800188c4 <amo_access_fault_6+0x130>
    800188ba:	6498                	ld	a4,8(s1)
    800188bc:	479d                	li	a5,7
    800188be:	02f70463          	beq	a4,a5,800188e6 <amo_access_fault_6+0x152>
    800188c2:	4401                	li	s0,0
    TEST_END();
    800188c4:	00004517          	auipc	a0,0x4
    800188c8:	76450513          	add	a0,a0,1892 # 8001d028 <__func__.1+0x380>
    800188cc:	31b020ef          	jal	8001b3e6 <printf>
    800188d0:	4511                	li	a0,4
    800188d2:	a0ce80ef          	jal	80000ade <goto_priv>
    800188d6:	a51e80ef          	jal	80001326 <reset_state>
}
    800188da:	60e2                	ld	ra,24(sp)
    800188dc:	8522                	mv	a0,s0
    800188de:	6442                	ld	s0,16(sp)
    800188e0:	64a2                	ld	s1,8(sp)
    800188e2:	6105                	add	sp,sp,32
    800188e4:	8082                	ret
    TEST_END();
    800188e6:	00004597          	auipc	a1,0x4
    800188ea:	68a58593          	add	a1,a1,1674 # 8001cf70 <__func__.1+0x2c8>
    800188ee:	bfd9                	j	800188c4 <amo_access_fault_6+0x130>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    800188f0:	00004597          	auipc	a1,0x4
    800188f4:	68058593          	add	a1,a1,1664 # 8001cf70 <__func__.1+0x2c8>
    800188f8:	b741                	j	80018878 <amo_access_fault_6+0xe4>

00000000800188fa <amo_access_fault_7>:


bool amo_access_fault_7(){
    800188fa:	1101                	add	sp,sp,-32

    TEST_START();
    800188fc:	00004597          	auipc	a1,0x4
    80018900:	1ac58593          	add	a1,a1,428 # 8001caa8 <__func__.13>
    80018904:	00004517          	auipc	a0,0x4
    80018908:	68c50513          	add	a0,a0,1676 # 8001cf90 <__func__.1+0x2e8>
bool amo_access_fault_7(){
    8001890c:	ec06                	sd	ra,24(sp)
    8001890e:	e822                	sd	s0,16(sp)
    80018910:	e426                	sd	s1,8(sp)
    TEST_START();
    80018912:	2d5020ef          	jal	8001b3e6 <printf>
    80018916:	4529                	li	a0,10
    80018918:	1a1010ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    8001891c:	4511                	li	a0,4
    8001891e:	9c0e80ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80018922:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80018926:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001892a:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001892e:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80018932:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80018936:	08000793          	li	a5,128
    8001893a:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001893e:	10000793          	li	a5,256
    80018942:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80018946:	20000793          	li	a5,512
    8001894a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001894e:	40000793          	li	a5,1024
    80018952:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80018956:	6785                	lui	a5,0x1
    80018958:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001895c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80018960:	67a1                	lui	a5,0x8
    80018962:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80018966:	4405                	li	s0,1
    80018968:	01f41793          	sll	a5,s0,0x1f
    8001896c:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80018970:	08100793          	li	a5,129
    80018974:	07e2                	sll	a5,a5,0x18
    80018976:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HU);
    8001897a:	4505                	li	a0,1
    8001897c:	962e80ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80018980:	0ff0000f          	fence
    80018984:	00024497          	auipc	s1,0x24
    80018988:	68c48493          	add	s1,s1,1676 # 8003d010 <excpt>
    8001898c:	00849023          	sh	s0,0(s1)
    80018990:	00024797          	auipc	a5,0x24
    80018994:	6a07bc23          	sd	zero,1720(a5) # 8003d048 <excpt+0x38>
    80018998:	0ff0000f          	fence
    8001899c:	37ab77b7          	lui	a5,0x37ab7
    800189a0:	078a                	sll	a5,a5,0x2
    800189a2:	1406                	sll	s0,s0,0x21
    800189a4:	40040413          	add	s0,s0,1024
    800189a8:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800189ac:	00f437af          	amoadd.d	a5,a5,(s0)
    
    amoadd_d((uintptr_t)0x80000100 << 2 , 0xdeadbeef);

    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    800189b0:	08200593          	li	a1,130
    800189b4:	0000a617          	auipc	a2,0xa
    800189b8:	68460613          	add	a2,a2,1668 # 80023038 <__func__.1+0x6390>
    800189bc:	00004517          	auipc	a0,0x4
    800189c0:	5ec50513          	add	a0,a0,1516 # 8001cfa8 <__func__.1+0x300>
    800189c4:	223020ef          	jal	8001b3e6 <printf>
    800189c8:	0014c783          	lbu	a5,1(s1)
    800189cc:	00004597          	auipc	a1,0x4
    800189d0:	5b458593          	add	a1,a1,1460 # 8001cf80 <__func__.1+0x2d8>
    800189d4:	c789                	beqz	a5,800189de <amo_access_fault_7+0xe4>
    800189d6:	6498                	ld	a4,8(s1)
    800189d8:	479d                	li	a5,7
    800189da:	06f70e63          	beq	a4,a5,80018a56 <amo_access_fault_7+0x15c>
    800189de:	00004517          	auipc	a0,0x4
    800189e2:	5e250513          	add	a0,a0,1506 # 8001cfc0 <__func__.1+0x318>
    800189e6:	201020ef          	jal	8001b3e6 <printf>
    800189ea:	0014c783          	lbu	a5,1(s1)
    800189ee:	c789                	beqz	a5,800189f8 <amo_access_fault_7+0xfe>
    800189f0:	6498                	ld	a4,8(s1)
    800189f2:	479d                	li	a5,7
    800189f4:	00f70c63          	beq	a4,a5,80018a0c <amo_access_fault_7+0x112>
    800189f8:	00004517          	auipc	a0,0x4
    800189fc:	5d050513          	add	a0,a0,1488 # 8001cfc8 <__func__.1+0x320>
    80018a00:	1e7020ef          	jal	8001b3e6 <printf>
    80018a04:	02900513          	li	a0,41
    80018a08:	0b1010ef          	jal	8001a2b8 <putchar>
    80018a0c:	4529                	li	a0,10
    80018a0e:	0ab010ef          	jal	8001a2b8 <putchar>
    80018a12:	0014c403          	lbu	s0,1(s1)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80018a16:	00004597          	auipc	a1,0x4
    80018a1a:	56a58593          	add	a1,a1,1386 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    80018a1e:	c411                	beqz	s0,80018a2a <amo_access_fault_7+0x130>
    80018a20:	6498                	ld	a4,8(s1)
    80018a22:	479d                	li	a5,7
    80018a24:	02f70463          	beq	a4,a5,80018a4c <amo_access_fault_7+0x152>
    80018a28:	4401                	li	s0,0
    TEST_END();
    80018a2a:	00004517          	auipc	a0,0x4
    80018a2e:	5fe50513          	add	a0,a0,1534 # 8001d028 <__func__.1+0x380>
    80018a32:	1b5020ef          	jal	8001b3e6 <printf>
    80018a36:	4511                	li	a0,4
    80018a38:	8a6e80ef          	jal	80000ade <goto_priv>
    80018a3c:	8ebe80ef          	jal	80001326 <reset_state>
}
    80018a40:	60e2                	ld	ra,24(sp)
    80018a42:	8522                	mv	a0,s0
    80018a44:	6442                	ld	s0,16(sp)
    80018a46:	64a2                	ld	s1,8(sp)
    80018a48:	6105                	add	sp,sp,32
    80018a4a:	8082                	ret
    TEST_END();
    80018a4c:	00004597          	auipc	a1,0x4
    80018a50:	52458593          	add	a1,a1,1316 # 8001cf70 <__func__.1+0x2c8>
    80018a54:	bfd9                	j	80018a2a <amo_access_fault_7+0x130>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    80018a56:	00004597          	auipc	a1,0x4
    80018a5a:	51a58593          	add	a1,a1,1306 # 8001cf70 <__func__.1+0x2c8>
    80018a5e:	b741                	j	800189de <amo_access_fault_7+0xe4>

0000000080018a60 <amo_access_fault_8>:

bool amo_access_fault_8(){
    80018a60:	1101                	add	sp,sp,-32

    TEST_START();
    80018a62:	00004597          	auipc	a1,0x4
    80018a66:	05e58593          	add	a1,a1,94 # 8001cac0 <__func__.12>
    80018a6a:	00004517          	auipc	a0,0x4
    80018a6e:	52650513          	add	a0,a0,1318 # 8001cf90 <__func__.1+0x2e8>
bool amo_access_fault_8(){
    80018a72:	ec06                	sd	ra,24(sp)
    80018a74:	e822                	sd	s0,16(sp)
    80018a76:	e426                	sd	s1,8(sp)
    TEST_START();
    80018a78:	16f020ef          	jal	8001b3e6 <printf>
    80018a7c:	4529                	li	a0,10
    80018a7e:	03b010ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80018a82:	4511                	li	a0,4
    80018a84:	85ae80ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80018a88:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80018a8c:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80018a90:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80018a94:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80018a98:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80018a9c:	08000793          	li	a5,128
    80018aa0:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80018aa4:	10000793          	li	a5,256
    80018aa8:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80018aac:	20000793          	li	a5,512
    80018ab0:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80018ab4:	40000793          	li	a5,1024
    80018ab8:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80018abc:	6785                	lui	a5,0x1
    80018abe:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80018ac2:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80018ac6:	67a1                	lui	a5,0x8
    80018ac8:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80018acc:	4405                	li	s0,1
    80018ace:	01f41793          	sll	a5,s0,0x1f
    80018ad2:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80018ad6:	08100793          	li	a5,129
    80018ada:	07e2                	sll	a5,a5,0x18
    80018adc:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_VU);
    80018ae0:	4501                	li	a0,0
    80018ae2:	ffde70ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80018ae6:	0ff0000f          	fence
    80018aea:	00024497          	auipc	s1,0x24
    80018aee:	52648493          	add	s1,s1,1318 # 8003d010 <excpt>
    80018af2:	00849023          	sh	s0,0(s1)
    80018af6:	00024797          	auipc	a5,0x24
    80018afa:	5407b923          	sd	zero,1362(a5) # 8003d048 <excpt+0x38>
    80018afe:	0ff0000f          	fence
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    80018b02:	37ab77b7          	lui	a5,0x37ab7
    80018b06:	078a                	sll	a5,a5,0x2
    80018b08:	1406                	sll	s0,s0,0x21
    80018b0a:	40040413          	add	s0,s0,1024
    80018b0e:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018b12:	40f437af          	amoor.d	a5,a5,(s0)
    
    amoor_d((uintptr_t)0x80000100 << 2 , 0xdeadbeef);

    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    80018b16:	08200593          	li	a1,130
    80018b1a:	0000a617          	auipc	a2,0xa
    80018b1e:	55e60613          	add	a2,a2,1374 # 80023078 <__func__.1+0x63d0>
    80018b22:	00004517          	auipc	a0,0x4
    80018b26:	48650513          	add	a0,a0,1158 # 8001cfa8 <__func__.1+0x300>
    80018b2a:	0bd020ef          	jal	8001b3e6 <printf>
    80018b2e:	0014c783          	lbu	a5,1(s1)
    80018b32:	00004597          	auipc	a1,0x4
    80018b36:	44e58593          	add	a1,a1,1102 # 8001cf80 <__func__.1+0x2d8>
    80018b3a:	c789                	beqz	a5,80018b44 <amo_access_fault_8+0xe4>
    80018b3c:	6498                	ld	a4,8(s1)
    80018b3e:	479d                	li	a5,7
    80018b40:	06f70e63          	beq	a4,a5,80018bbc <amo_access_fault_8+0x15c>
    80018b44:	00004517          	auipc	a0,0x4
    80018b48:	47c50513          	add	a0,a0,1148 # 8001cfc0 <__func__.1+0x318>
    80018b4c:	09b020ef          	jal	8001b3e6 <printf>
    80018b50:	0014c783          	lbu	a5,1(s1)
    80018b54:	c789                	beqz	a5,80018b5e <amo_access_fault_8+0xfe>
    80018b56:	6498                	ld	a4,8(s1)
    80018b58:	479d                	li	a5,7
    80018b5a:	00f70c63          	beq	a4,a5,80018b72 <amo_access_fault_8+0x112>
    80018b5e:	00004517          	auipc	a0,0x4
    80018b62:	46a50513          	add	a0,a0,1130 # 8001cfc8 <__func__.1+0x320>
    80018b66:	081020ef          	jal	8001b3e6 <printf>
    80018b6a:	02900513          	li	a0,41
    80018b6e:	74a010ef          	jal	8001a2b8 <putchar>
    80018b72:	4529                	li	a0,10
    80018b74:	744010ef          	jal	8001a2b8 <putchar>
    80018b78:	0014c403          	lbu	s0,1(s1)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80018b7c:	00004597          	auipc	a1,0x4
    80018b80:	40458593          	add	a1,a1,1028 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    80018b84:	c411                	beqz	s0,80018b90 <amo_access_fault_8+0x130>
    80018b86:	6498                	ld	a4,8(s1)
    80018b88:	479d                	li	a5,7
    80018b8a:	02f70463          	beq	a4,a5,80018bb2 <amo_access_fault_8+0x152>
    80018b8e:	4401                	li	s0,0
    TEST_END();
    80018b90:	00004517          	auipc	a0,0x4
    80018b94:	49850513          	add	a0,a0,1176 # 8001d028 <__func__.1+0x380>
    80018b98:	04f020ef          	jal	8001b3e6 <printf>
    80018b9c:	4511                	li	a0,4
    80018b9e:	f41e70ef          	jal	80000ade <goto_priv>
    80018ba2:	f84e80ef          	jal	80001326 <reset_state>
}
    80018ba6:	60e2                	ld	ra,24(sp)
    80018ba8:	8522                	mv	a0,s0
    80018baa:	6442                	ld	s0,16(sp)
    80018bac:	64a2                	ld	s1,8(sp)
    80018bae:	6105                	add	sp,sp,32
    80018bb0:	8082                	ret
    TEST_END();
    80018bb2:	00004597          	auipc	a1,0x4
    80018bb6:	3be58593          	add	a1,a1,958 # 8001cf70 <__func__.1+0x2c8>
    80018bba:	bfd9                	j	80018b90 <amo_access_fault_8+0x130>
    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    80018bbc:	00004597          	auipc	a1,0x4
    80018bc0:	3b458593          	add	a1,a1,948 # 8001cf70 <__func__.1+0x2c8>
    80018bc4:	b741                	j	80018b44 <amo_access_fault_8+0xe4>

0000000080018bc6 <amo_access_fault_9>:

bool amo_access_fault_9(){
    80018bc6:	1101                	add	sp,sp,-32

    TEST_START();
    80018bc8:	00004597          	auipc	a1,0x4
    80018bcc:	f1058593          	add	a1,a1,-240 # 8001cad8 <__func__.11>
    80018bd0:	00004517          	auipc	a0,0x4
    80018bd4:	3c050513          	add	a0,a0,960 # 8001cf90 <__func__.1+0x2e8>
bool amo_access_fault_9(){
    80018bd8:	ec06                	sd	ra,24(sp)
    80018bda:	e822                	sd	s0,16(sp)
    80018bdc:	e426                	sd	s1,8(sp)
    TEST_START();
    80018bde:	009020ef          	jal	8001b3e6 <printf>
    80018be2:	4529                	li	a0,10
    80018be4:	6d4010ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80018be8:	4511                	li	a0,4
    80018bea:	ef5e70ef          	jal	80000ade <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80018bee:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80018bf2:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80018bf6:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80018bfa:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80018bfe:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80018c02:	08000793          	li	a5,128
    80018c06:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80018c0a:	10000793          	li	a5,256
    80018c0e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80018c12:	20000793          	li	a5,512
    80018c16:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80018c1a:	40000793          	li	a5,1024
    80018c1e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80018c22:	6785                	lui	a5,0x1
    80018c24:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80018c28:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80018c2c:	67a1                	lui	a5,0x8
    80018c2e:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80018c32:	4405                	li	s0,1
    80018c34:	01f41793          	sll	a5,s0,0x1f
    80018c38:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80018c3c:	08100793          	li	a5,129
    80018c40:	07e2                	sll	a5,a5,0x18
    80018c42:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_VU);
    80018c46:	4501                	li	a0,0
    80018c48:	e97e70ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80018c4c:	0ff0000f          	fence
    80018c50:	00024497          	auipc	s1,0x24
    80018c54:	3c048493          	add	s1,s1,960 # 8003d010 <excpt>
    80018c58:	00849023          	sh	s0,0(s1)
    80018c5c:	00024797          	auipc	a5,0x24
    80018c60:	3e07b623          	sd	zero,1004(a5) # 8003d048 <excpt+0x38>
    80018c64:	0ff0000f          	fence
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    80018c68:	37ab77b7          	lui	a5,0x37ab7
    80018c6c:	078a                	sll	a5,a5,0x2
    80018c6e:	140e                	sll	s0,s0,0x23
    80018c70:	1461                	add	s0,s0,-8
    80018c72:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018c76:	60f437af          	amoand.d	a5,a5,(s0)
    
    amoand_d((uintptr_t)0x1fffffffe << 2 ,0xdeadbeef);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    80018c7a:	08200593          	li	a1,130
    80018c7e:	0000a617          	auipc	a2,0xa
    80018c82:	43a60613          	add	a2,a2,1082 # 800230b8 <__func__.1+0x6410>
    80018c86:	00004517          	auipc	a0,0x4
    80018c8a:	32250513          	add	a0,a0,802 # 8001cfa8 <__func__.1+0x300>
    80018c8e:	758020ef          	jal	8001b3e6 <printf>
    80018c92:	0014c783          	lbu	a5,1(s1)
    80018c96:	00004597          	auipc	a1,0x4
    80018c9a:	2ea58593          	add	a1,a1,746 # 8001cf80 <__func__.1+0x2d8>
    80018c9e:	c789                	beqz	a5,80018ca8 <amo_access_fault_9+0xe2>
    80018ca0:	6498                	ld	a4,8(s1)
    80018ca2:	479d                	li	a5,7
    80018ca4:	06f70e63          	beq	a4,a5,80018d20 <amo_access_fault_9+0x15a>
    80018ca8:	00004517          	auipc	a0,0x4
    80018cac:	31850513          	add	a0,a0,792 # 8001cfc0 <__func__.1+0x318>
    80018cb0:	736020ef          	jal	8001b3e6 <printf>
    80018cb4:	0014c783          	lbu	a5,1(s1)
    80018cb8:	c789                	beqz	a5,80018cc2 <amo_access_fault_9+0xfc>
    80018cba:	6498                	ld	a4,8(s1)
    80018cbc:	479d                	li	a5,7
    80018cbe:	00f70c63          	beq	a4,a5,80018cd6 <amo_access_fault_9+0x110>
    80018cc2:	00004517          	auipc	a0,0x4
    80018cc6:	30650513          	add	a0,a0,774 # 8001cfc8 <__func__.1+0x320>
    80018cca:	71c020ef          	jal	8001b3e6 <printf>
    80018cce:	02900513          	li	a0,41
    80018cd2:	5e6010ef          	jal	8001a2b8 <putchar>
    80018cd6:	4529                	li	a0,10
    80018cd8:	5e0010ef          	jal	8001a2b8 <putchar>
    80018cdc:	0014c403          	lbu	s0,1(s1)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80018ce0:	00004597          	auipc	a1,0x4
    80018ce4:	2a058593          	add	a1,a1,672 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    80018ce8:	c411                	beqz	s0,80018cf4 <amo_access_fault_9+0x12e>
    80018cea:	6498                	ld	a4,8(s1)
    80018cec:	479d                	li	a5,7
    80018cee:	02f70463          	beq	a4,a5,80018d16 <amo_access_fault_9+0x150>
    80018cf2:	4401                	li	s0,0
    TEST_END();
    80018cf4:	00004517          	auipc	a0,0x4
    80018cf8:	33450513          	add	a0,a0,820 # 8001d028 <__func__.1+0x380>
    80018cfc:	6ea020ef          	jal	8001b3e6 <printf>
    80018d00:	4511                	li	a0,4
    80018d02:	ddde70ef          	jal	80000ade <goto_priv>
    80018d06:	e20e80ef          	jal	80001326 <reset_state>
}
    80018d0a:	60e2                	ld	ra,24(sp)
    80018d0c:	8522                	mv	a0,s0
    80018d0e:	6442                	ld	s0,16(sp)
    80018d10:	64a2                	ld	s1,8(sp)
    80018d12:	6105                	add	sp,sp,32
    80018d14:	8082                	ret
    TEST_END();
    80018d16:	00004597          	auipc	a1,0x4
    80018d1a:	25a58593          	add	a1,a1,602 # 8001cf70 <__func__.1+0x2c8>
    80018d1e:	bfd9                	j	80018cf4 <amo_access_fault_9+0x12e>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    80018d20:	00004597          	auipc	a1,0x4
    80018d24:	25058593          	add	a1,a1,592 # 8001cf70 <__func__.1+0x2c8>
    80018d28:	b741                	j	80018ca8 <amo_access_fault_9+0xe2>

0000000080018d2a <amo_access_fault_10>:


bool amo_access_fault_10(){
    80018d2a:	1101                	add	sp,sp,-32

    TEST_START();
    80018d2c:	00004597          	auipc	a1,0x4
    80018d30:	dc458593          	add	a1,a1,-572 # 8001caf0 <__func__.10>
    80018d34:	00004517          	auipc	a0,0x4
    80018d38:	25c50513          	add	a0,a0,604 # 8001cf90 <__func__.1+0x2e8>
bool amo_access_fault_10(){
    80018d3c:	ec06                	sd	ra,24(sp)
    80018d3e:	e822                	sd	s0,16(sp)
    80018d40:	e426                	sd	s1,8(sp)
    TEST_START();
    80018d42:	6a4020ef          	jal	8001b3e6 <printf>
    80018d46:	4529                	li	a0,10
    80018d48:	570010ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80018d4c:	4511                	li	a0,4
    80018d4e:	d91e70ef          	jal	80000ade <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80018d52:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80018d56:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80018d5a:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80018d5e:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80018d62:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80018d66:	08000793          	li	a5,128
    80018d6a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80018d6e:	4485                	li	s1,1
    80018d70:	01f49793          	sll	a5,s1,0x1f
    80018d74:	3b079073          	csrw	pmpaddr0,a5

    goto_priv(PRIV_M);
    80018d78:	4511                	li	a0,4
    80018d7a:	d65e70ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80018d7e:	0ff0000f          	fence
    80018d82:	00024417          	auipc	s0,0x24
    80018d86:	28e40413          	add	s0,s0,654 # 8003d010 <excpt>
    80018d8a:	00941023          	sh	s1,0(s0)
    80018d8e:	00024797          	auipc	a5,0x24
    80018d92:	2a07bd23          	sd	zero,698(a5) # 8003d048 <excpt+0x38>
    80018d96:	0ff0000f          	fence
    80018d9a:	37ab77b7          	lui	a5,0x37ab7
    80018d9e:	078a                	sll	a5,a5,0x2
    80018da0:	eef78793          	add	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018da4:	1486                	sll	s1,s1,0x21
    80018da6:	60f4b7af          	amoand.d	a5,a5,(s1)
    
    amoand_d((uintptr_t)0x80000000 << 2 ,0xdeadbeef);

    printf("%d\n",excpt.triggered);
    80018daa:	00144583          	lbu	a1,1(s0)
    80018dae:	00005517          	auipc	a0,0x5
    80018db2:	c4a50513          	add	a0,a0,-950 # 8001d9f8 <__func__.1+0xd50>
    80018db6:	630020ef          	jal	8001b3e6 <printf>
    printf("%d\n",excpt.cause);
    80018dba:	640c                	ld	a1,8(s0)
    80018dbc:	00005517          	auipc	a0,0x5
    80018dc0:	c3c50513          	add	a0,a0,-964 # 8001d9f8 <__func__.1+0xd50>
    80018dc4:	622020ef          	jal	8001b3e6 <printf>

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    80018dc8:	08200593          	li	a1,130
    80018dcc:	0000a617          	auipc	a2,0xa
    80018dd0:	36460613          	add	a2,a2,868 # 80023130 <__func__.1+0x6488>
    80018dd4:	00004517          	auipc	a0,0x4
    80018dd8:	1d450513          	add	a0,a0,468 # 8001cfa8 <__func__.1+0x300>
    80018ddc:	60a020ef          	jal	8001b3e6 <printf>
    80018de0:	00144783          	lbu	a5,1(s0)
    80018de4:	00004597          	auipc	a1,0x4
    80018de8:	19c58593          	add	a1,a1,412 # 8001cf80 <__func__.1+0x2d8>
    80018dec:	c789                	beqz	a5,80018df6 <amo_access_fault_10+0xcc>
    80018dee:	6418                	ld	a4,8(s0)
    80018df0:	479d                	li	a5,7
    80018df2:	06f70e63          	beq	a4,a5,80018e6e <amo_access_fault_10+0x144>
    80018df6:	00004517          	auipc	a0,0x4
    80018dfa:	1ca50513          	add	a0,a0,458 # 8001cfc0 <__func__.1+0x318>
    80018dfe:	5e8020ef          	jal	8001b3e6 <printf>
    80018e02:	00144783          	lbu	a5,1(s0)
    80018e06:	c789                	beqz	a5,80018e10 <amo_access_fault_10+0xe6>
    80018e08:	6418                	ld	a4,8(s0)
    80018e0a:	479d                	li	a5,7
    80018e0c:	00f70c63          	beq	a4,a5,80018e24 <amo_access_fault_10+0xfa>
    80018e10:	00004517          	auipc	a0,0x4
    80018e14:	1b850513          	add	a0,a0,440 # 8001cfc8 <__func__.1+0x320>
    80018e18:	5ce020ef          	jal	8001b3e6 <printf>
    80018e1c:	02900513          	li	a0,41
    80018e20:	498010ef          	jal	8001a2b8 <putchar>
    80018e24:	4529                	li	a0,10
    80018e26:	492010ef          	jal	8001a2b8 <putchar>
    80018e2a:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    80018e2e:	00004597          	auipc	a1,0x4
    80018e32:	15258593          	add	a1,a1,338 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    80018e36:	c491                	beqz	s1,80018e42 <amo_access_fault_10+0x118>
    80018e38:	6418                	ld	a4,8(s0)
    80018e3a:	479d                	li	a5,7
    80018e3c:	02f70463          	beq	a4,a5,80018e64 <amo_access_fault_10+0x13a>
    80018e40:	4481                	li	s1,0
    TEST_END();
    80018e42:	00004517          	auipc	a0,0x4
    80018e46:	1e650513          	add	a0,a0,486 # 8001d028 <__func__.1+0x380>
    80018e4a:	59c020ef          	jal	8001b3e6 <printf>
    80018e4e:	4511                	li	a0,4
    80018e50:	c8fe70ef          	jal	80000ade <goto_priv>
    80018e54:	cd2e80ef          	jal	80001326 <reset_state>
}
    80018e58:	60e2                	ld	ra,24(sp)
    80018e5a:	6442                	ld	s0,16(sp)
    80018e5c:	8526                	mv	a0,s1
    80018e5e:	64a2                	ld	s1,8(sp)
    80018e60:	6105                	add	sp,sp,32
    80018e62:	8082                	ret
    TEST_END();
    80018e64:	00004597          	auipc	a1,0x4
    80018e68:	10c58593          	add	a1,a1,268 # 8001cf70 <__func__.1+0x2c8>
    80018e6c:	bfd9                	j	80018e42 <amo_access_fault_10+0x118>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    80018e6e:	00004597          	auipc	a1,0x4
    80018e72:	10258593          	add	a1,a1,258 # 8001cf70 <__func__.1+0x2c8>
    80018e76:	b741                	j	80018df6 <amo_access_fault_10+0xcc>

0000000080018e78 <instruction_access_fault_1>:


bool instruction_access_fault_1(){
    80018e78:	1101                	add	sp,sp,-32

    TEST_START();
    80018e7a:	00004597          	auipc	a1,0x4
    80018e7e:	c8e58593          	add	a1,a1,-882 # 8001cb08 <__func__.9>
    80018e82:	00004517          	auipc	a0,0x4
    80018e86:	10e50513          	add	a0,a0,270 # 8001cf90 <__func__.1+0x2e8>
bool instruction_access_fault_1(){
    80018e8a:	ec06                	sd	ra,24(sp)
    80018e8c:	e822                	sd	s0,16(sp)
    80018e8e:	e426                	sd	s1,8(sp)
    TEST_START();
    80018e90:	556020ef          	jal	8001b3e6 <printf>
    80018e94:	4529                	li	a0,10
    80018e96:	422010ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80018e9a:	4511                	li	a0,4
    80018e9c:	c43e70ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80018ea0:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80018ea4:	10000793          	li	a5,256
    80018ea8:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80018eac:	20000793          	li	a5,512
    80018eb0:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80018eb4:	40000793          	li	a5,1024
    80018eb8:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80018ebc:	6785                	lui	a5,0x1
    80018ebe:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80018ec2:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80018ec6:	4485                	li	s1,1
    80018ec8:	01f49793          	sll	a5,s1,0x1f
    80018ecc:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80018ed0:	08100793          	li	a5,129
    80018ed4:	07e2                	sll	a5,a5,0x18
    80018ed6:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80018eda:	67a1                	lui	a5,0x8
    80018edc:	3a07a073          	csrs	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    80018ee0:	0ff0000f          	fence
    80018ee4:	00024417          	auipc	s0,0x24
    80018ee8:	12c40413          	add	s0,s0,300 # 8003d010 <excpt>
    80018eec:	00941023          	sh	s1,0(s0)
    80018ef0:	00024797          	auipc	a5,0x24
    80018ef4:	1407bc23          	sd	zero,344(a5) # 8003d048 <excpt+0x38>
    80018ef8:	0ff0000f          	fence
    
    TEST_EXEC_EXCEPT((uintptr_t)0x80000100 << 2);
    80018efc:	02149793          	sll	a5,s1,0x21
    80018f00:	40078793          	add	a5,a5,1024
    80018f04:	00000297          	auipc	t0,0x0
    80018f08:	00c28293          	add	t0,t0,12 # 80018f10 <instruction_access_fault_1+0x98>
    80018f0c:	02543c23          	sd	t0,56(s0)
    80018f10:	8782                	jr	a5

    printf("%d\n",excpt.triggered);
    80018f12:	00144583          	lbu	a1,1(s0)
    80018f16:	00005517          	auipc	a0,0x5
    80018f1a:	ae250513          	add	a0,a0,-1310 # 8001d9f8 <__func__.1+0xd50>
    80018f1e:	4c8020ef          	jal	8001b3e6 <printf>
    printf("%d\n",excpt.cause);
    80018f22:	640c                	ld	a1,8(s0)
    80018f24:	00005517          	auipc	a0,0x5
    80018f28:	ad450513          	add	a0,a0,-1324 # 8001d9f8 <__func__.1+0xd50>
    80018f2c:	4ba020ef          	jal	8001b3e6 <printf>

    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    80018f30:	08200593          	li	a1,130
    80018f34:	0000a617          	auipc	a2,0xa
    80018f38:	26c60613          	add	a2,a2,620 # 800231a0 <__func__.1+0x64f8>
    80018f3c:	00004517          	auipc	a0,0x4
    80018f40:	06c50513          	add	a0,a0,108 # 8001cfa8 <__func__.1+0x300>
    80018f44:	4a2020ef          	jal	8001b3e6 <printf>
    80018f48:	00144783          	lbu	a5,1(s0)
    80018f4c:	00004597          	auipc	a1,0x4
    80018f50:	03458593          	add	a1,a1,52 # 8001cf80 <__func__.1+0x2d8>
    80018f54:	c781                	beqz	a5,80018f5c <instruction_access_fault_1+0xe4>
    80018f56:	641c                	ld	a5,8(s0)
    80018f58:	06978e63          	beq	a5,s1,80018fd4 <instruction_access_fault_1+0x15c>
    80018f5c:	00004517          	auipc	a0,0x4
    80018f60:	06450513          	add	a0,a0,100 # 8001cfc0 <__func__.1+0x318>
    80018f64:	482020ef          	jal	8001b3e6 <printf>
    80018f68:	00144783          	lbu	a5,1(s0)
    80018f6c:	c789                	beqz	a5,80018f76 <instruction_access_fault_1+0xfe>
    80018f6e:	6418                	ld	a4,8(s0)
    80018f70:	4785                	li	a5,1
    80018f72:	00f70c63          	beq	a4,a5,80018f8a <instruction_access_fault_1+0x112>
    80018f76:	00004517          	auipc	a0,0x4
    80018f7a:	05250513          	add	a0,a0,82 # 8001cfc8 <__func__.1+0x320>
    80018f7e:	468020ef          	jal	8001b3e6 <printf>
    80018f82:	02900513          	li	a0,41
    80018f86:	332010ef          	jal	8001a2b8 <putchar>
    80018f8a:	4529                	li	a0,10
    80018f8c:	32c010ef          	jal	8001a2b8 <putchar>
    80018f90:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    80018f94:	00004597          	auipc	a1,0x4
    80018f98:	fec58593          	add	a1,a1,-20 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    80018f9c:	c491                	beqz	s1,80018fa8 <instruction_access_fault_1+0x130>
    80018f9e:	6418                	ld	a4,8(s0)
    80018fa0:	4785                	li	a5,1
    80018fa2:	02f70463          	beq	a4,a5,80018fca <instruction_access_fault_1+0x152>
    80018fa6:	4481                	li	s1,0
    TEST_END();
    80018fa8:	00004517          	auipc	a0,0x4
    80018fac:	08050513          	add	a0,a0,128 # 8001d028 <__func__.1+0x380>
    80018fb0:	436020ef          	jal	8001b3e6 <printf>
    80018fb4:	4511                	li	a0,4
    80018fb6:	b29e70ef          	jal	80000ade <goto_priv>
    80018fba:	b6ce80ef          	jal	80001326 <reset_state>
}
    80018fbe:	60e2                	ld	ra,24(sp)
    80018fc0:	6442                	ld	s0,16(sp)
    80018fc2:	8526                	mv	a0,s1
    80018fc4:	64a2                	ld	s1,8(sp)
    80018fc6:	6105                	add	sp,sp,32
    80018fc8:	8082                	ret
    TEST_END();
    80018fca:	00004597          	auipc	a1,0x4
    80018fce:	fa658593          	add	a1,a1,-90 # 8001cf70 <__func__.1+0x2c8>
    80018fd2:	bfd9                	j	80018fa8 <instruction_access_fault_1+0x130>
    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    80018fd4:	00004597          	auipc	a1,0x4
    80018fd8:	f9c58593          	add	a1,a1,-100 # 8001cf70 <__func__.1+0x2c8>
    80018fdc:	b741                	j	80018f5c <instruction_access_fault_1+0xe4>

0000000080018fde <instruction_access_fault_2>:

bool instruction_access_fault_2(){
    80018fde:	1101                	add	sp,sp,-32

    TEST_START();
    80018fe0:	00004597          	auipc	a1,0x4
    80018fe4:	b4858593          	add	a1,a1,-1208 # 8001cb28 <__func__.8>
    80018fe8:	00004517          	auipc	a0,0x4
    80018fec:	fa850513          	add	a0,a0,-88 # 8001cf90 <__func__.1+0x2e8>
bool instruction_access_fault_2(){
    80018ff0:	ec06                	sd	ra,24(sp)
    80018ff2:	e822                	sd	s0,16(sp)
    80018ff4:	e426                	sd	s1,8(sp)
    TEST_START();
    80018ff6:	3f0020ef          	jal	8001b3e6 <printf>
    80018ffa:	4529                	li	a0,10
    80018ffc:	2bc010ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80019000:	4511                	li	a0,4
    80019002:	adde70ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80019006:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001900a:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001900e:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80019012:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80019016:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001901a:	08000793          	li	a5,128
    8001901e:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80019022:	10000793          	li	a5,256
    80019026:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001902a:	20000793          	li	a5,512
    8001902e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80019032:	40000793          	li	a5,1024
    80019036:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001903a:	6785                	lui	a5,0x1
    8001903c:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80019040:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80019044:	4485                	li	s1,1
    80019046:	01f49793          	sll	a5,s1,0x1f
    8001904a:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001904e:	08100793          	li	a5,129
    80019052:	07e2                	sll	a5,a5,0x18
    80019054:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HS);
    80019058:	450d                	li	a0,3
    8001905a:	a85e70ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001905e:	0ff0000f          	fence
    80019062:	00024417          	auipc	s0,0x24
    80019066:	fae40413          	add	s0,s0,-82 # 8003d010 <excpt>
    8001906a:	00941023          	sh	s1,0(s0)
    8001906e:	00024797          	auipc	a5,0x24
    80019072:	fc07bd23          	sd	zero,-38(a5) # 8003d048 <excpt+0x38>
    80019076:	0ff0000f          	fence
    
    TEST_EXEC_EXCEPT((uintptr_t)0x80000100 << 2);
    8001907a:	02149793          	sll	a5,s1,0x21
    8001907e:	40078793          	add	a5,a5,1024
    80019082:	00000297          	auipc	t0,0x0
    80019086:	00c28293          	add	t0,t0,12 # 8001908e <instruction_access_fault_2+0xb0>
    8001908a:	02543c23          	sd	t0,56(s0)
    8001908e:	8782                	jr	a5

    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    80019090:	08200593          	li	a1,130
    80019094:	0000a617          	auipc	a2,0xa
    80019098:	15460613          	add	a2,a2,340 # 800231e8 <__func__.1+0x6540>
    8001909c:	00004517          	auipc	a0,0x4
    800190a0:	f0c50513          	add	a0,a0,-244 # 8001cfa8 <__func__.1+0x300>
    800190a4:	342020ef          	jal	8001b3e6 <printf>
    800190a8:	00144783          	lbu	a5,1(s0)
    800190ac:	00004597          	auipc	a1,0x4
    800190b0:	ed458593          	add	a1,a1,-300 # 8001cf80 <__func__.1+0x2d8>
    800190b4:	c781                	beqz	a5,800190bc <instruction_access_fault_2+0xde>
    800190b6:	641c                	ld	a5,8(s0)
    800190b8:	06978e63          	beq	a5,s1,80019134 <instruction_access_fault_2+0x156>
    800190bc:	00004517          	auipc	a0,0x4
    800190c0:	f0450513          	add	a0,a0,-252 # 8001cfc0 <__func__.1+0x318>
    800190c4:	322020ef          	jal	8001b3e6 <printf>
    800190c8:	00144783          	lbu	a5,1(s0)
    800190cc:	c789                	beqz	a5,800190d6 <instruction_access_fault_2+0xf8>
    800190ce:	6418                	ld	a4,8(s0)
    800190d0:	4785                	li	a5,1
    800190d2:	00f70c63          	beq	a4,a5,800190ea <instruction_access_fault_2+0x10c>
    800190d6:	00004517          	auipc	a0,0x4
    800190da:	ef250513          	add	a0,a0,-270 # 8001cfc8 <__func__.1+0x320>
    800190de:	308020ef          	jal	8001b3e6 <printf>
    800190e2:	02900513          	li	a0,41
    800190e6:	1d2010ef          	jal	8001a2b8 <putchar>
    800190ea:	4529                	li	a0,10
    800190ec:	1cc010ef          	jal	8001a2b8 <putchar>
    800190f0:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    800190f4:	00004597          	auipc	a1,0x4
    800190f8:	e8c58593          	add	a1,a1,-372 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    800190fc:	c491                	beqz	s1,80019108 <instruction_access_fault_2+0x12a>
    800190fe:	6418                	ld	a4,8(s0)
    80019100:	4785                	li	a5,1
    80019102:	02f70463          	beq	a4,a5,8001912a <instruction_access_fault_2+0x14c>
    80019106:	4481                	li	s1,0
    TEST_END();
    80019108:	00004517          	auipc	a0,0x4
    8001910c:	f2050513          	add	a0,a0,-224 # 8001d028 <__func__.1+0x380>
    80019110:	2d6020ef          	jal	8001b3e6 <printf>
    80019114:	4511                	li	a0,4
    80019116:	9c9e70ef          	jal	80000ade <goto_priv>
    8001911a:	a0ce80ef          	jal	80001326 <reset_state>
}
    8001911e:	60e2                	ld	ra,24(sp)
    80019120:	6442                	ld	s0,16(sp)
    80019122:	8526                	mv	a0,s1
    80019124:	64a2                	ld	s1,8(sp)
    80019126:	6105                	add	sp,sp,32
    80019128:	8082                	ret
    TEST_END();
    8001912a:	00004597          	auipc	a1,0x4
    8001912e:	e4658593          	add	a1,a1,-442 # 8001cf70 <__func__.1+0x2c8>
    80019132:	bfd9                	j	80019108 <instruction_access_fault_2+0x12a>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    80019134:	00004597          	auipc	a1,0x4
    80019138:	e3c58593          	add	a1,a1,-452 # 8001cf70 <__func__.1+0x2c8>
    8001913c:	b741                	j	800190bc <instruction_access_fault_2+0xde>

000000008001913e <instruction_access_fault_3>:


bool instruction_access_fault_3(){
    8001913e:	1101                	add	sp,sp,-32

    TEST_START();
    80019140:	00004597          	auipc	a1,0x4
    80019144:	a0858593          	add	a1,a1,-1528 # 8001cb48 <__func__.7>
    80019148:	00004517          	auipc	a0,0x4
    8001914c:	e4850513          	add	a0,a0,-440 # 8001cf90 <__func__.1+0x2e8>
bool instruction_access_fault_3(){
    80019150:	ec06                	sd	ra,24(sp)
    80019152:	e822                	sd	s0,16(sp)
    80019154:	e426                	sd	s1,8(sp)
    TEST_START();
    80019156:	290020ef          	jal	8001b3e6 <printf>
    8001915a:	4529                	li	a0,10
    8001915c:	15c010ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80019160:	4511                	li	a0,4
    80019162:	97de70ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80019166:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001916a:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001916e:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80019172:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80019176:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001917a:	08000793          	li	a5,128
    8001917e:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80019182:	10000793          	li	a5,256
    80019186:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001918a:	20000793          	li	a5,512
    8001918e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80019192:	40000793          	li	a5,1024
    80019196:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001919a:	6785                	lui	a5,0x1
    8001919c:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800191a0:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    800191a4:	4485                	li	s1,1
    800191a6:	01f49793          	sll	a5,s1,0x1f
    800191aa:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    800191ae:	08100793          	li	a5,129
    800191b2:	07e2                	sll	a5,a5,0x18
    800191b4:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HU);
    800191b8:	4505                	li	a0,1
    800191ba:	925e70ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    800191be:	0ff0000f          	fence
    800191c2:	00024417          	auipc	s0,0x24
    800191c6:	e4e40413          	add	s0,s0,-434 # 8003d010 <excpt>
    800191ca:	00941023          	sh	s1,0(s0)
    800191ce:	00024797          	auipc	a5,0x24
    800191d2:	e607bd23          	sd	zero,-390(a5) # 8003d048 <excpt+0x38>
    800191d6:	0ff0000f          	fence
    
    TEST_EXEC_EXCEPT((uintptr_t)0x80000100 << 2);
    800191da:	02149793          	sll	a5,s1,0x21
    800191de:	40078793          	add	a5,a5,1024
    800191e2:	00000297          	auipc	t0,0x0
    800191e6:	00c28293          	add	t0,t0,12 # 800191ee <instruction_access_fault_3+0xb0>
    800191ea:	02543c23          	sd	t0,56(s0)
    800191ee:	8782                	jr	a5

    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    800191f0:	08200593          	li	a1,130
    800191f4:	0000a617          	auipc	a2,0xa
    800191f8:	03c60613          	add	a2,a2,60 # 80023230 <__func__.1+0x6588>
    800191fc:	00004517          	auipc	a0,0x4
    80019200:	dac50513          	add	a0,a0,-596 # 8001cfa8 <__func__.1+0x300>
    80019204:	1e2020ef          	jal	8001b3e6 <printf>
    80019208:	00144783          	lbu	a5,1(s0)
    8001920c:	00004597          	auipc	a1,0x4
    80019210:	d7458593          	add	a1,a1,-652 # 8001cf80 <__func__.1+0x2d8>
    80019214:	c781                	beqz	a5,8001921c <instruction_access_fault_3+0xde>
    80019216:	641c                	ld	a5,8(s0)
    80019218:	06978e63          	beq	a5,s1,80019294 <instruction_access_fault_3+0x156>
    8001921c:	00004517          	auipc	a0,0x4
    80019220:	da450513          	add	a0,a0,-604 # 8001cfc0 <__func__.1+0x318>
    80019224:	1c2020ef          	jal	8001b3e6 <printf>
    80019228:	00144783          	lbu	a5,1(s0)
    8001922c:	c789                	beqz	a5,80019236 <instruction_access_fault_3+0xf8>
    8001922e:	6418                	ld	a4,8(s0)
    80019230:	4785                	li	a5,1
    80019232:	00f70c63          	beq	a4,a5,8001924a <instruction_access_fault_3+0x10c>
    80019236:	00004517          	auipc	a0,0x4
    8001923a:	d9250513          	add	a0,a0,-622 # 8001cfc8 <__func__.1+0x320>
    8001923e:	1a8020ef          	jal	8001b3e6 <printf>
    80019242:	02900513          	li	a0,41
    80019246:	072010ef          	jal	8001a2b8 <putchar>
    8001924a:	4529                	li	a0,10
    8001924c:	06c010ef          	jal	8001a2b8 <putchar>
    80019250:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    80019254:	00004597          	auipc	a1,0x4
    80019258:	d2c58593          	add	a1,a1,-724 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001925c:	c491                	beqz	s1,80019268 <instruction_access_fault_3+0x12a>
    8001925e:	6418                	ld	a4,8(s0)
    80019260:	4785                	li	a5,1
    80019262:	02f70463          	beq	a4,a5,8001928a <instruction_access_fault_3+0x14c>
    80019266:	4481                	li	s1,0
    TEST_END();
    80019268:	00004517          	auipc	a0,0x4
    8001926c:	dc050513          	add	a0,a0,-576 # 8001d028 <__func__.1+0x380>
    80019270:	176020ef          	jal	8001b3e6 <printf>
    80019274:	4511                	li	a0,4
    80019276:	869e70ef          	jal	80000ade <goto_priv>
    8001927a:	8ace80ef          	jal	80001326 <reset_state>
}
    8001927e:	60e2                	ld	ra,24(sp)
    80019280:	6442                	ld	s0,16(sp)
    80019282:	8526                	mv	a0,s1
    80019284:	64a2                	ld	s1,8(sp)
    80019286:	6105                	add	sp,sp,32
    80019288:	8082                	ret
    TEST_END();
    8001928a:	00004597          	auipc	a1,0x4
    8001928e:	ce658593          	add	a1,a1,-794 # 8001cf70 <__func__.1+0x2c8>
    80019292:	bfd9                	j	80019268 <instruction_access_fault_3+0x12a>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    80019294:	00004597          	auipc	a1,0x4
    80019298:	cdc58593          	add	a1,a1,-804 # 8001cf70 <__func__.1+0x2c8>
    8001929c:	b741                	j	8001921c <instruction_access_fault_3+0xde>

000000008001929e <instruction_access_fault_4>:

bool instruction_access_fault_4(){
    8001929e:	1101                	add	sp,sp,-32

    TEST_START();
    800192a0:	00004597          	auipc	a1,0x4
    800192a4:	8c858593          	add	a1,a1,-1848 # 8001cb68 <__func__.6>
    800192a8:	00004517          	auipc	a0,0x4
    800192ac:	ce850513          	add	a0,a0,-792 # 8001cf90 <__func__.1+0x2e8>
bool instruction_access_fault_4(){
    800192b0:	ec06                	sd	ra,24(sp)
    800192b2:	e822                	sd	s0,16(sp)
    800192b4:	e426                	sd	s1,8(sp)
    TEST_START();
    800192b6:	130020ef          	jal	8001b3e6 <printf>
    800192ba:	4529                	li	a0,10
    800192bc:	7fd000ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    800192c0:	4511                	li	a0,4
    800192c2:	81de70ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    800192c6:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    800192ca:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    800192ce:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    800192d2:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    800192d6:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    800192da:	08000793          	li	a5,128
    800192de:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    800192e2:	10000793          	li	a5,256
    800192e6:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    800192ea:	20000793          	li	a5,512
    800192ee:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    800192f2:	40000793          	li	a5,1024
    800192f6:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    800192fa:	6785                	lui	a5,0x1
    800192fc:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80019300:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80019304:	4485                	li	s1,1
    80019306:	01f49793          	sll	a5,s1,0x1f
    8001930a:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001930e:	08100793          	li	a5,129
    80019312:	07e2                	sll	a5,a5,0x18
    80019314:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_VU);
    80019318:	4501                	li	a0,0
    8001931a:	fc4e70ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001931e:	0ff0000f          	fence
    80019322:	00024417          	auipc	s0,0x24
    80019326:	cee40413          	add	s0,s0,-786 # 8003d010 <excpt>
    8001932a:	00941023          	sh	s1,0(s0)
    8001932e:	00024797          	auipc	a5,0x24
    80019332:	d007bd23          	sd	zero,-742(a5) # 8003d048 <excpt+0x38>
    80019336:	0ff0000f          	fence
    
    TEST_EXEC_EXCEPT((uintptr_t)0x80000100 << 2);
    8001933a:	02149793          	sll	a5,s1,0x21
    8001933e:	40078793          	add	a5,a5,1024
    80019342:	00000297          	auipc	t0,0x0
    80019346:	00c28293          	add	t0,t0,12 # 8001934e <instruction_access_fault_4+0xb0>
    8001934a:	02543c23          	sd	t0,56(s0)
    8001934e:	8782                	jr	a5

    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    80019350:	08200593          	li	a1,130
    80019354:	0000a617          	auipc	a2,0xa
    80019358:	f2460613          	add	a2,a2,-220 # 80023278 <__func__.1+0x65d0>
    8001935c:	00004517          	auipc	a0,0x4
    80019360:	c4c50513          	add	a0,a0,-948 # 8001cfa8 <__func__.1+0x300>
    80019364:	082020ef          	jal	8001b3e6 <printf>
    80019368:	00144783          	lbu	a5,1(s0)
    8001936c:	00004597          	auipc	a1,0x4
    80019370:	c1458593          	add	a1,a1,-1004 # 8001cf80 <__func__.1+0x2d8>
    80019374:	c781                	beqz	a5,8001937c <instruction_access_fault_4+0xde>
    80019376:	641c                	ld	a5,8(s0)
    80019378:	06978e63          	beq	a5,s1,800193f4 <instruction_access_fault_4+0x156>
    8001937c:	00004517          	auipc	a0,0x4
    80019380:	c4450513          	add	a0,a0,-956 # 8001cfc0 <__func__.1+0x318>
    80019384:	062020ef          	jal	8001b3e6 <printf>
    80019388:	00144783          	lbu	a5,1(s0)
    8001938c:	c789                	beqz	a5,80019396 <instruction_access_fault_4+0xf8>
    8001938e:	6418                	ld	a4,8(s0)
    80019390:	4785                	li	a5,1
    80019392:	00f70c63          	beq	a4,a5,800193aa <instruction_access_fault_4+0x10c>
    80019396:	00004517          	auipc	a0,0x4
    8001939a:	c3250513          	add	a0,a0,-974 # 8001cfc8 <__func__.1+0x320>
    8001939e:	048020ef          	jal	8001b3e6 <printf>
    800193a2:	02900513          	li	a0,41
    800193a6:	713000ef          	jal	8001a2b8 <putchar>
    800193aa:	4529                	li	a0,10
    800193ac:	70d000ef          	jal	8001a2b8 <putchar>
    800193b0:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    800193b4:	00004597          	auipc	a1,0x4
    800193b8:	bcc58593          	add	a1,a1,-1076 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    800193bc:	c491                	beqz	s1,800193c8 <instruction_access_fault_4+0x12a>
    800193be:	6418                	ld	a4,8(s0)
    800193c0:	4785                	li	a5,1
    800193c2:	02f70463          	beq	a4,a5,800193ea <instruction_access_fault_4+0x14c>
    800193c6:	4481                	li	s1,0
    TEST_END();
    800193c8:	00004517          	auipc	a0,0x4
    800193cc:	c6050513          	add	a0,a0,-928 # 8001d028 <__func__.1+0x380>
    800193d0:	016020ef          	jal	8001b3e6 <printf>
    800193d4:	4511                	li	a0,4
    800193d6:	f08e70ef          	jal	80000ade <goto_priv>
    800193da:	f4de70ef          	jal	80001326 <reset_state>
}
    800193de:	60e2                	ld	ra,24(sp)
    800193e0:	6442                	ld	s0,16(sp)
    800193e2:	8526                	mv	a0,s1
    800193e4:	64a2                	ld	s1,8(sp)
    800193e6:	6105                	add	sp,sp,32
    800193e8:	8082                	ret
    TEST_END();
    800193ea:	00004597          	auipc	a1,0x4
    800193ee:	b8658593          	add	a1,a1,-1146 # 8001cf70 <__func__.1+0x2c8>
    800193f2:	bfd9                	j	800193c8 <instruction_access_fault_4+0x12a>
    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    800193f4:	00004597          	auipc	a1,0x4
    800193f8:	b7c58593          	add	a1,a1,-1156 # 8001cf70 <__func__.1+0x2c8>
    800193fc:	b741                	j	8001937c <instruction_access_fault_4+0xde>

00000000800193fe <instruction_access_fault_5>:

bool instruction_access_fault_5(){
    800193fe:	1141                	add	sp,sp,-16

    TEST_START();
    80019400:	00003597          	auipc	a1,0x3
    80019404:	78858593          	add	a1,a1,1928 # 8001cb88 <__func__.5>
    80019408:	00004517          	auipc	a0,0x4
    8001940c:	b8850513          	add	a0,a0,-1144 # 8001cf90 <__func__.1+0x2e8>
bool instruction_access_fault_5(){
    80019410:	e406                	sd	ra,8(sp)
    80019412:	e022                	sd	s0,0(sp)
    TEST_START();
    80019414:	7d3010ef          	jal	8001b3e6 <printf>
    80019418:	4529                	li	a0,10
    8001941a:	69f000ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    8001941e:	4511                	li	a0,4
    80019420:	ebee70ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80019424:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80019428:	10000793          	li	a5,256
    8001942c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80019430:	20000793          	li	a5,512
    80019434:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80019438:	40000793          	li	a5,1024
    8001943c:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80019440:	6785                	lui	a5,0x1
    80019442:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80019446:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001944a:	4785                	li	a5,1
    8001944c:	01f79713          	sll	a4,a5,0x1f
    80019450:	3b071073          	csrw	pmpaddr0,a4
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80019454:	08100713          	li	a4,129
    80019458:	0762                	sll	a4,a4,0x18
    8001945a:	3b171073          	csrw	pmpaddr1,a4

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001945e:	6721                	lui	a4,0x8
    80019460:	3a073073          	csrc	pmpcfg0,a4

    TEST_SETUP_EXCEPT();
    80019464:	0ff0000f          	fence
    80019468:	00024417          	auipc	s0,0x24
    8001946c:	ba840413          	add	s0,s0,-1112 # 8003d010 <excpt>
    80019470:	00f41023          	sh	a5,0(s0)
    80019474:	00024717          	auipc	a4,0x24
    80019478:	bc073a23          	sd	zero,-1068(a4) # 8003d048 <excpt+0x38>
    8001947c:	0ff0000f          	fence
    
    TEST_EXEC_EXCEPT((uintptr_t)0x80000100 << 2);
    80019480:	1786                	sll	a5,a5,0x21
    80019482:	40078793          	add	a5,a5,1024
    80019486:	00000297          	auipc	t0,0x0
    8001948a:	00c28293          	add	t0,t0,12 # 80019492 <instruction_access_fault_5+0x94>
    8001948e:	02543c23          	sd	t0,56(s0)
    80019492:	8782                	jr	a5

    printf("%d\n",excpt.triggered);
    80019494:	00144583          	lbu	a1,1(s0)
    80019498:	00004517          	auipc	a0,0x4
    8001949c:	56050513          	add	a0,a0,1376 # 8001d9f8 <__func__.1+0xd50>
    800194a0:	747010ef          	jal	8001b3e6 <printf>
    printf("%d\n",excpt.cause);
    800194a4:	640c                	ld	a1,8(s0)
    800194a6:	00004517          	auipc	a0,0x4
    800194aa:	55250513          	add	a0,a0,1362 # 8001d9f8 <__func__.1+0xd50>
    800194ae:	739010ef          	jal	8001b3e6 <printf>

    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    800194b2:	08200593          	li	a1,130
    800194b6:	0000a617          	auipc	a2,0xa
    800194ba:	e0a60613          	add	a2,a2,-502 # 800232c0 <__func__.1+0x6618>
    800194be:	00004517          	auipc	a0,0x4
    800194c2:	aea50513          	add	a0,a0,-1302 # 8001cfa8 <__func__.1+0x300>
    800194c6:	721010ef          	jal	8001b3e6 <printf>
    800194ca:	00144783          	lbu	a5,1(s0)
    800194ce:	00004597          	auipc	a1,0x4
    800194d2:	aa258593          	add	a1,a1,-1374 # 8001cf70 <__func__.1+0x2c8>
    800194d6:	c789                	beqz	a5,800194e0 <instruction_access_fault_5+0xe2>
    800194d8:	00004597          	auipc	a1,0x4
    800194dc:	aa858593          	add	a1,a1,-1368 # 8001cf80 <__func__.1+0x2d8>
    800194e0:	00004517          	auipc	a0,0x4
    800194e4:	ae050513          	add	a0,a0,-1312 # 8001cfc0 <__func__.1+0x318>
    800194e8:	6ff010ef          	jal	8001b3e6 <printf>
    800194ec:	00144783          	lbu	a5,1(s0)
    800194f0:	e3b1                	bnez	a5,80019534 <instruction_access_fault_5+0x136>
    800194f2:	4529                	li	a0,10
    800194f4:	5c5000ef          	jal	8001a2b8 <putchar>
    800194f8:	00144783          	lbu	a5,1(s0)
    800194fc:	e795                	bnez	a5,80019528 <instruction_access_fault_5+0x12a>
    800194fe:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    80019500:	00004597          	auipc	a1,0x4
    80019504:	a7058593          	add	a1,a1,-1424 # 8001cf70 <__func__.1+0x2c8>
    80019508:	00004517          	auipc	a0,0x4
    8001950c:	b2050513          	add	a0,a0,-1248 # 8001d028 <__func__.1+0x380>
    80019510:	6d7010ef          	jal	8001b3e6 <printf>
    80019514:	4511                	li	a0,4
    80019516:	dc8e70ef          	jal	80000ade <goto_priv>
    8001951a:	e0de70ef          	jal	80001326 <reset_state>
}
    8001951e:	60a2                	ld	ra,8(sp)
    80019520:	8522                	mv	a0,s0
    80019522:	6402                	ld	s0,0(sp)
    80019524:	0141                	add	sp,sp,16
    80019526:	8082                	ret
    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    80019528:	4401                	li	s0,0
    TEST_END();
    8001952a:	00004597          	auipc	a1,0x4
    8001952e:	a5658593          	add	a1,a1,-1450 # 8001cf80 <__func__.1+0x2d8>
    80019532:	bfd9                	j	80019508 <instruction_access_fault_5+0x10a>
    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    80019534:	00004517          	auipc	a0,0x4
    80019538:	a9450513          	add	a0,a0,-1388 # 8001cfc8 <__func__.1+0x320>
    8001953c:	6ab010ef          	jal	8001b3e6 <printf>
    80019540:	02900513          	li	a0,41
    80019544:	575000ef          	jal	8001a2b8 <putchar>
    80019548:	b76d                	j	800194f2 <instruction_access_fault_5+0xf4>

000000008001954a <instruction_access_fault_6>:


bool instruction_access_fault_6(){
    8001954a:	1101                	add	sp,sp,-32

    TEST_START();
    8001954c:	00003597          	auipc	a1,0x3
    80019550:	65c58593          	add	a1,a1,1628 # 8001cba8 <__func__.4>
    80019554:	00004517          	auipc	a0,0x4
    80019558:	a3c50513          	add	a0,a0,-1476 # 8001cf90 <__func__.1+0x2e8>
bool instruction_access_fault_6(){
    8001955c:	ec06                	sd	ra,24(sp)
    8001955e:	e822                	sd	s0,16(sp)
    80019560:	e426                	sd	s1,8(sp)
    TEST_START();
    80019562:	685010ef          	jal	8001b3e6 <printf>
    80019566:	4529                	li	a0,10
    80019568:	551000ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    8001956c:	4511                	li	a0,4
    8001956e:	d70e70ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80019572:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80019576:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001957a:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001957e:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80019582:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80019586:	08000793          	li	a5,128
    8001958a:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001958e:	10000793          	li	a5,256
    80019592:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80019596:	20000793          	li	a5,512
    8001959a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001959e:	40000793          	li	a5,1024
    800195a2:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    800195a6:	6785                	lui	a5,0x1
    800195a8:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800195ac:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    800195b0:	67a1                	lui	a5,0x8
    800195b2:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    800195b6:	4485                	li	s1,1
    800195b8:	01f49793          	sll	a5,s1,0x1f
    800195bc:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    800195c0:	08100793          	li	a5,129
    800195c4:	07e2                	sll	a5,a5,0x18
    800195c6:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HS);
    800195ca:	450d                	li	a0,3
    800195cc:	d12e70ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    800195d0:	0ff0000f          	fence
    800195d4:	00024417          	auipc	s0,0x24
    800195d8:	a3c40413          	add	s0,s0,-1476 # 8003d010 <excpt>
    800195dc:	00941023          	sh	s1,0(s0)
    800195e0:	00024797          	auipc	a5,0x24
    800195e4:	a607b423          	sd	zero,-1432(a5) # 8003d048 <excpt+0x38>
    800195e8:	0ff0000f          	fence
    
    TEST_EXEC_EXCEPT((uintptr_t)0x80000100 << 2);
    800195ec:	02149793          	sll	a5,s1,0x21
    800195f0:	40078793          	add	a5,a5,1024
    800195f4:	00000297          	auipc	t0,0x0
    800195f8:	00c28293          	add	t0,t0,12 # 80019600 <instruction_access_fault_6+0xb6>
    800195fc:	02543c23          	sd	t0,56(s0)
    80019600:	8782                	jr	a5

    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    80019602:	08200593          	li	a1,130
    80019606:	0000a617          	auipc	a2,0xa
    8001960a:	d0260613          	add	a2,a2,-766 # 80023308 <__func__.1+0x6660>
    8001960e:	00004517          	auipc	a0,0x4
    80019612:	99a50513          	add	a0,a0,-1638 # 8001cfa8 <__func__.1+0x300>
    80019616:	5d1010ef          	jal	8001b3e6 <printf>
    8001961a:	00144783          	lbu	a5,1(s0)
    8001961e:	00004597          	auipc	a1,0x4
    80019622:	96258593          	add	a1,a1,-1694 # 8001cf80 <__func__.1+0x2d8>
    80019626:	c781                	beqz	a5,8001962e <instruction_access_fault_6+0xe4>
    80019628:	641c                	ld	a5,8(s0)
    8001962a:	06978e63          	beq	a5,s1,800196a6 <instruction_access_fault_6+0x15c>
    8001962e:	00004517          	auipc	a0,0x4
    80019632:	99250513          	add	a0,a0,-1646 # 8001cfc0 <__func__.1+0x318>
    80019636:	5b1010ef          	jal	8001b3e6 <printf>
    8001963a:	00144783          	lbu	a5,1(s0)
    8001963e:	c789                	beqz	a5,80019648 <instruction_access_fault_6+0xfe>
    80019640:	6418                	ld	a4,8(s0)
    80019642:	4785                	li	a5,1
    80019644:	00f70c63          	beq	a4,a5,8001965c <instruction_access_fault_6+0x112>
    80019648:	00004517          	auipc	a0,0x4
    8001964c:	98050513          	add	a0,a0,-1664 # 8001cfc8 <__func__.1+0x320>
    80019650:	597010ef          	jal	8001b3e6 <printf>
    80019654:	02900513          	li	a0,41
    80019658:	461000ef          	jal	8001a2b8 <putchar>
    8001965c:	4529                	li	a0,10
    8001965e:	45b000ef          	jal	8001a2b8 <putchar>
    80019662:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    80019666:	00004597          	auipc	a1,0x4
    8001966a:	91a58593          	add	a1,a1,-1766 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001966e:	c491                	beqz	s1,8001967a <instruction_access_fault_6+0x130>
    80019670:	6418                	ld	a4,8(s0)
    80019672:	4785                	li	a5,1
    80019674:	02f70463          	beq	a4,a5,8001969c <instruction_access_fault_6+0x152>
    80019678:	4481                	li	s1,0
    TEST_END();
    8001967a:	00004517          	auipc	a0,0x4
    8001967e:	9ae50513          	add	a0,a0,-1618 # 8001d028 <__func__.1+0x380>
    80019682:	565010ef          	jal	8001b3e6 <printf>
    80019686:	4511                	li	a0,4
    80019688:	c56e70ef          	jal	80000ade <goto_priv>
    8001968c:	c9be70ef          	jal	80001326 <reset_state>
}
    80019690:	60e2                	ld	ra,24(sp)
    80019692:	6442                	ld	s0,16(sp)
    80019694:	8526                	mv	a0,s1
    80019696:	64a2                	ld	s1,8(sp)
    80019698:	6105                	add	sp,sp,32
    8001969a:	8082                	ret
    TEST_END();
    8001969c:	00004597          	auipc	a1,0x4
    800196a0:	8d458593          	add	a1,a1,-1836 # 8001cf70 <__func__.1+0x2c8>
    800196a4:	bfd9                	j	8001967a <instruction_access_fault_6+0x130>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    800196a6:	00004597          	auipc	a1,0x4
    800196aa:	8ca58593          	add	a1,a1,-1846 # 8001cf70 <__func__.1+0x2c8>
    800196ae:	b741                	j	8001962e <instruction_access_fault_6+0xe4>

00000000800196b0 <instruction_access_fault_7>:


bool instruction_access_fault_7(){
    800196b0:	1101                	add	sp,sp,-32

    TEST_START();
    800196b2:	00003597          	auipc	a1,0x3
    800196b6:	51658593          	add	a1,a1,1302 # 8001cbc8 <__func__.3>
    800196ba:	00004517          	auipc	a0,0x4
    800196be:	8d650513          	add	a0,a0,-1834 # 8001cf90 <__func__.1+0x2e8>
bool instruction_access_fault_7(){
    800196c2:	ec06                	sd	ra,24(sp)
    800196c4:	e822                	sd	s0,16(sp)
    800196c6:	e426                	sd	s1,8(sp)
    TEST_START();
    800196c8:	51f010ef          	jal	8001b3e6 <printf>
    800196cc:	4529                	li	a0,10
    800196ce:	3eb000ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    800196d2:	4511                	li	a0,4
    800196d4:	c0ae70ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    800196d8:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    800196dc:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    800196e0:	3a016073          	csrs	pmpcfg0,2
    CSRC(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    800196e4:	3a027073          	csrc	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    800196e8:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    800196ec:	08000793          	li	a5,128
    800196f0:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    800196f4:	10000793          	li	a5,256
    800196f8:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    800196fc:	20000793          	li	a5,512
    80019700:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80019704:	40000793          	li	a5,1024
    80019708:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001970c:	6785                	lui	a5,0x1
    8001970e:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80019712:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80019716:	67a1                	lui	a5,0x8
    80019718:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001971c:	4485                	li	s1,1
    8001971e:	01f49793          	sll	a5,s1,0x1f
    80019722:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80019726:	08100793          	li	a5,129
    8001972a:	07e2                	sll	a5,a5,0x18
    8001972c:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_HU);
    80019730:	4505                	li	a0,1
    80019732:	bace70ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80019736:	0ff0000f          	fence
    8001973a:	00024417          	auipc	s0,0x24
    8001973e:	8d640413          	add	s0,s0,-1834 # 8003d010 <excpt>
    80019742:	00941023          	sh	s1,0(s0)
    80019746:	00024797          	auipc	a5,0x24
    8001974a:	9007b123          	sd	zero,-1790(a5) # 8003d048 <excpt+0x38>
    8001974e:	0ff0000f          	fence
    
    TEST_EXEC_EXCEPT((uintptr_t)0x80000100 << 2);
    80019752:	02149793          	sll	a5,s1,0x21
    80019756:	40078793          	add	a5,a5,1024
    8001975a:	00000297          	auipc	t0,0x0
    8001975e:	00c28293          	add	t0,t0,12 # 80019766 <instruction_access_fault_7+0xb6>
    80019762:	02543c23          	sd	t0,56(s0)
    80019766:	8782                	jr	a5

    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    80019768:	08200593          	li	a1,130
    8001976c:	0000a617          	auipc	a2,0xa
    80019770:	be460613          	add	a2,a2,-1052 # 80023350 <__func__.1+0x66a8>
    80019774:	00004517          	auipc	a0,0x4
    80019778:	83450513          	add	a0,a0,-1996 # 8001cfa8 <__func__.1+0x300>
    8001977c:	46b010ef          	jal	8001b3e6 <printf>
    80019780:	00144783          	lbu	a5,1(s0)
    80019784:	00003597          	auipc	a1,0x3
    80019788:	7fc58593          	add	a1,a1,2044 # 8001cf80 <__func__.1+0x2d8>
    8001978c:	c781                	beqz	a5,80019794 <instruction_access_fault_7+0xe4>
    8001978e:	641c                	ld	a5,8(s0)
    80019790:	06978e63          	beq	a5,s1,8001980c <instruction_access_fault_7+0x15c>
    80019794:	00004517          	auipc	a0,0x4
    80019798:	82c50513          	add	a0,a0,-2004 # 8001cfc0 <__func__.1+0x318>
    8001979c:	44b010ef          	jal	8001b3e6 <printf>
    800197a0:	00144783          	lbu	a5,1(s0)
    800197a4:	c789                	beqz	a5,800197ae <instruction_access_fault_7+0xfe>
    800197a6:	6418                	ld	a4,8(s0)
    800197a8:	4785                	li	a5,1
    800197aa:	00f70c63          	beq	a4,a5,800197c2 <instruction_access_fault_7+0x112>
    800197ae:	00004517          	auipc	a0,0x4
    800197b2:	81a50513          	add	a0,a0,-2022 # 8001cfc8 <__func__.1+0x320>
    800197b6:	431010ef          	jal	8001b3e6 <printf>
    800197ba:	02900513          	li	a0,41
    800197be:	2fb000ef          	jal	8001a2b8 <putchar>
    800197c2:	4529                	li	a0,10
    800197c4:	2f5000ef          	jal	8001a2b8 <putchar>
    800197c8:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    800197cc:	00003597          	auipc	a1,0x3
    800197d0:	7b458593          	add	a1,a1,1972 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    800197d4:	c491                	beqz	s1,800197e0 <instruction_access_fault_7+0x130>
    800197d6:	6418                	ld	a4,8(s0)
    800197d8:	4785                	li	a5,1
    800197da:	02f70463          	beq	a4,a5,80019802 <instruction_access_fault_7+0x152>
    800197de:	4481                	li	s1,0
    TEST_END();
    800197e0:	00004517          	auipc	a0,0x4
    800197e4:	84850513          	add	a0,a0,-1976 # 8001d028 <__func__.1+0x380>
    800197e8:	3ff010ef          	jal	8001b3e6 <printf>
    800197ec:	4511                	li	a0,4
    800197ee:	af0e70ef          	jal	80000ade <goto_priv>
    800197f2:	b35e70ef          	jal	80001326 <reset_state>
}
    800197f6:	60e2                	ld	ra,24(sp)
    800197f8:	6442                	ld	s0,16(sp)
    800197fa:	8526                	mv	a0,s1
    800197fc:	64a2                	ld	s1,8(sp)
    800197fe:	6105                	add	sp,sp,32
    80019800:	8082                	ret
    TEST_END();
    80019802:	00003597          	auipc	a1,0x3
    80019806:	76e58593          	add	a1,a1,1902 # 8001cf70 <__func__.1+0x2c8>
    8001980a:	bfd9                	j	800197e0 <instruction_access_fault_7+0x130>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001980c:	00003597          	auipc	a1,0x3
    80019810:	76458593          	add	a1,a1,1892 # 8001cf70 <__func__.1+0x2c8>
    80019814:	b741                	j	80019794 <instruction_access_fault_7+0xe4>

0000000080019816 <instruction_access_fault_8>:

bool instruction_access_fault_8(){
    80019816:	1101                	add	sp,sp,-32

    TEST_START();
    80019818:	00003597          	auipc	a1,0x3
    8001981c:	3d058593          	add	a1,a1,976 # 8001cbe8 <__func__.2>
    80019820:	00003517          	auipc	a0,0x3
    80019824:	77050513          	add	a0,a0,1904 # 8001cf90 <__func__.1+0x2e8>
bool instruction_access_fault_8(){
    80019828:	ec06                	sd	ra,24(sp)
    8001982a:	e822                	sd	s0,16(sp)
    8001982c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001982e:	3b9010ef          	jal	8001b3e6 <printf>
    80019832:	4529                	li	a0,10
    80019834:	285000ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80019838:	4511                	li	a0,4
    8001983a:	aa4e70ef          	jal	80000ade <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001983e:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80019842:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80019846:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001984a:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001984e:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80019852:	08000793          	li	a5,128
    80019856:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001985a:	10000793          	li	a5,256
    8001985e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80019862:	20000793          	li	a5,512
    80019866:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001986a:	40000793          	li	a5,1024
    8001986e:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80019872:	6785                	lui	a5,0x1
    80019874:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80019878:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001987c:	67a1                	lui	a5,0x8
    8001987e:	3a07b073          	csrc	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80019882:	4485                	li	s1,1
    80019884:	01f49793          	sll	a5,s1,0x1f
    80019888:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001988c:	08100793          	li	a5,129
    80019890:	07e2                	sll	a5,a5,0x18
    80019892:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_VU);
    80019896:	4501                	li	a0,0
    80019898:	a46e70ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001989c:	0ff0000f          	fence
    800198a0:	00023417          	auipc	s0,0x23
    800198a4:	77040413          	add	s0,s0,1904 # 8003d010 <excpt>
    800198a8:	00941023          	sh	s1,0(s0)
    800198ac:	00023797          	auipc	a5,0x23
    800198b0:	7807be23          	sd	zero,1948(a5) # 8003d048 <excpt+0x38>
    800198b4:	0ff0000f          	fence
    
    TEST_EXEC_EXCEPT((uintptr_t)0x80000100 << 2);
    800198b8:	02149793          	sll	a5,s1,0x21
    800198bc:	40078793          	add	a5,a5,1024
    800198c0:	00000297          	auipc	t0,0x0
    800198c4:	00c28293          	add	t0,t0,12 # 800198cc <instruction_access_fault_8+0xb6>
    800198c8:	02543c23          	sd	t0,56(s0)
    800198cc:	8782                	jr	a5

    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    800198ce:	08200593          	li	a1,130
    800198d2:	0000a617          	auipc	a2,0xa
    800198d6:	ac660613          	add	a2,a2,-1338 # 80023398 <__func__.1+0x66f0>
    800198da:	00003517          	auipc	a0,0x3
    800198de:	6ce50513          	add	a0,a0,1742 # 8001cfa8 <__func__.1+0x300>
    800198e2:	305010ef          	jal	8001b3e6 <printf>
    800198e6:	00144783          	lbu	a5,1(s0)
    800198ea:	00003597          	auipc	a1,0x3
    800198ee:	69658593          	add	a1,a1,1686 # 8001cf80 <__func__.1+0x2d8>
    800198f2:	c781                	beqz	a5,800198fa <instruction_access_fault_8+0xe4>
    800198f4:	641c                	ld	a5,8(s0)
    800198f6:	06978e63          	beq	a5,s1,80019972 <instruction_access_fault_8+0x15c>
    800198fa:	00003517          	auipc	a0,0x3
    800198fe:	6c650513          	add	a0,a0,1734 # 8001cfc0 <__func__.1+0x318>
    80019902:	2e5010ef          	jal	8001b3e6 <printf>
    80019906:	00144783          	lbu	a5,1(s0)
    8001990a:	c789                	beqz	a5,80019914 <instruction_access_fault_8+0xfe>
    8001990c:	6418                	ld	a4,8(s0)
    8001990e:	4785                	li	a5,1
    80019910:	00f70c63          	beq	a4,a5,80019928 <instruction_access_fault_8+0x112>
    80019914:	00003517          	auipc	a0,0x3
    80019918:	6b450513          	add	a0,a0,1716 # 8001cfc8 <__func__.1+0x320>
    8001991c:	2cb010ef          	jal	8001b3e6 <printf>
    80019920:	02900513          	li	a0,41
    80019924:	195000ef          	jal	8001a2b8 <putchar>
    80019928:	4529                	li	a0,10
    8001992a:	18f000ef          	jal	8001a2b8 <putchar>
    8001992e:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    80019932:	00003597          	auipc	a1,0x3
    80019936:	64e58593          	add	a1,a1,1614 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001993a:	c491                	beqz	s1,80019946 <instruction_access_fault_8+0x130>
    8001993c:	6418                	ld	a4,8(s0)
    8001993e:	4785                	li	a5,1
    80019940:	02f70463          	beq	a4,a5,80019968 <instruction_access_fault_8+0x152>
    80019944:	4481                	li	s1,0
    TEST_END();
    80019946:	00003517          	auipc	a0,0x3
    8001994a:	6e250513          	add	a0,a0,1762 # 8001d028 <__func__.1+0x380>
    8001994e:	299010ef          	jal	8001b3e6 <printf>
    80019952:	4511                	li	a0,4
    80019954:	98ae70ef          	jal	80000ade <goto_priv>
    80019958:	9cfe70ef          	jal	80001326 <reset_state>
}
    8001995c:	60e2                	ld	ra,24(sp)
    8001995e:	6442                	ld	s0,16(sp)
    80019960:	8526                	mv	a0,s1
    80019962:	64a2                	ld	s1,8(sp)
    80019964:	6105                	add	sp,sp,32
    80019966:	8082                	ret
    TEST_END();
    80019968:	00003597          	auipc	a1,0x3
    8001996c:	60858593          	add	a1,a1,1544 # 8001cf70 <__func__.1+0x2c8>
    80019970:	bfd9                	j	80019946 <instruction_access_fault_8+0x130>
    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    80019972:	00003597          	auipc	a1,0x3
    80019976:	5fe58593          	add	a1,a1,1534 # 8001cf70 <__func__.1+0x2c8>
    8001997a:	b741                	j	800198fa <instruction_access_fault_8+0xe4>

000000008001997c <instruction_access_fault_9>:

bool instruction_access_fault_9(){
    8001997c:	1101                	add	sp,sp,-32

    TEST_START();
    8001997e:	00003597          	auipc	a1,0x3
    80019982:	28a58593          	add	a1,a1,650 # 8001cc08 <__func__.1>
    80019986:	00003517          	auipc	a0,0x3
    8001998a:	60a50513          	add	a0,a0,1546 # 8001cf90 <__func__.1+0x2e8>
bool instruction_access_fault_9(){
    8001998e:	ec06                	sd	ra,24(sp)
    80019990:	e822                	sd	s0,16(sp)
    80019992:	e426                	sd	s1,8(sp)
    TEST_START();
    80019994:	253010ef          	jal	8001b3e6 <printf>
    80019998:	4529                	li	a0,10
    8001999a:	11f000ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    8001999e:	4511                	li	a0,4
    800199a0:	93ee70ef          	jal	80000ade <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    800199a4:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    800199a8:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    800199ac:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    800199b0:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    800199b4:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    800199b8:	08000793          	li	a5,128
    800199bc:	3a07a073          	csrs	pmpcfg0,a5


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    800199c0:	10000793          	li	a5,256
    800199c4:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    800199c8:	20000793          	li	a5,512
    800199cc:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    800199d0:	40000793          	li	a5,1024
    800199d4:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    800199d8:	6785                	lui	a5,0x1
    800199da:	80078793          	add	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800199de:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    800199e2:	67a1                	lui	a5,0x8
    800199e4:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    800199e8:	4485                	li	s1,1
    800199ea:	01f49793          	sll	a5,s1,0x1f
    800199ee:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    800199f2:	08100793          	li	a5,129
    800199f6:	07e2                	sll	a5,a5,0x18
    800199f8:	3b179073          	csrw	pmpaddr1,a5

    goto_priv(PRIV_VU);
    800199fc:	4501                	li	a0,0
    800199fe:	8e0e70ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80019a02:	0ff0000f          	fence
    80019a06:	00023417          	auipc	s0,0x23
    80019a0a:	60a40413          	add	s0,s0,1546 # 8003d010 <excpt>
    80019a0e:	00941023          	sh	s1,0(s0)
    80019a12:	00023797          	auipc	a5,0x23
    80019a16:	6207bb23          	sd	zero,1590(a5) # 8003d048 <excpt+0x38>
    80019a1a:	0ff0000f          	fence
    
    TEST_EXEC_EXCEPT((uintptr_t)0x1fffffffe << 2);
    80019a1e:	02349793          	sll	a5,s1,0x23
    80019a22:	17e1                	add	a5,a5,-8
    80019a24:	00000297          	auipc	t0,0x0
    80019a28:	00c28293          	add	t0,t0,12 # 80019a30 <instruction_access_fault_9+0xb4>
    80019a2c:	02543c23          	sd	t0,56(s0)
    80019a30:	8782                	jr	a5

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    80019a32:	08200593          	li	a1,130
    80019a36:	0000a617          	auipc	a2,0xa
    80019a3a:	99a60613          	add	a2,a2,-1638 # 800233d0 <__func__.1+0x6728>
    80019a3e:	00003517          	auipc	a0,0x3
    80019a42:	56a50513          	add	a0,a0,1386 # 8001cfa8 <__func__.1+0x300>
    80019a46:	1a1010ef          	jal	8001b3e6 <printf>
    80019a4a:	00144783          	lbu	a5,1(s0)
    80019a4e:	00003597          	auipc	a1,0x3
    80019a52:	53258593          	add	a1,a1,1330 # 8001cf80 <__func__.1+0x2d8>
    80019a56:	c781                	beqz	a5,80019a5e <instruction_access_fault_9+0xe2>
    80019a58:	641c                	ld	a5,8(s0)
    80019a5a:	06978e63          	beq	a5,s1,80019ad6 <instruction_access_fault_9+0x15a>
    80019a5e:	00003517          	auipc	a0,0x3
    80019a62:	56250513          	add	a0,a0,1378 # 8001cfc0 <__func__.1+0x318>
    80019a66:	181010ef          	jal	8001b3e6 <printf>
    80019a6a:	00144783          	lbu	a5,1(s0)
    80019a6e:	c789                	beqz	a5,80019a78 <instruction_access_fault_9+0xfc>
    80019a70:	6418                	ld	a4,8(s0)
    80019a72:	4785                	li	a5,1
    80019a74:	00f70c63          	beq	a4,a5,80019a8c <instruction_access_fault_9+0x110>
    80019a78:	00003517          	auipc	a0,0x3
    80019a7c:	55050513          	add	a0,a0,1360 # 8001cfc8 <__func__.1+0x320>
    80019a80:	167010ef          	jal	8001b3e6 <printf>
    80019a84:	02900513          	li	a0,41
    80019a88:	031000ef          	jal	8001a2b8 <putchar>
    80019a8c:	4529                	li	a0,10
    80019a8e:	02b000ef          	jal	8001a2b8 <putchar>
    80019a92:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    80019a96:	00003597          	auipc	a1,0x3
    80019a9a:	4ea58593          	add	a1,a1,1258 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    80019a9e:	c491                	beqz	s1,80019aaa <instruction_access_fault_9+0x12e>
    80019aa0:	6418                	ld	a4,8(s0)
    80019aa2:	4785                	li	a5,1
    80019aa4:	02f70463          	beq	a4,a5,80019acc <instruction_access_fault_9+0x150>
    80019aa8:	4481                	li	s1,0
    TEST_END();
    80019aaa:	00003517          	auipc	a0,0x3
    80019aae:	57e50513          	add	a0,a0,1406 # 8001d028 <__func__.1+0x380>
    80019ab2:	135010ef          	jal	8001b3e6 <printf>
    80019ab6:	4511                	li	a0,4
    80019ab8:	826e70ef          	jal	80000ade <goto_priv>
    80019abc:	86be70ef          	jal	80001326 <reset_state>
}
    80019ac0:	60e2                	ld	ra,24(sp)
    80019ac2:	6442                	ld	s0,16(sp)
    80019ac4:	8526                	mv	a0,s1
    80019ac6:	64a2                	ld	s1,8(sp)
    80019ac8:	6105                	add	sp,sp,32
    80019aca:	8082                	ret
    TEST_END();
    80019acc:	00003597          	auipc	a1,0x3
    80019ad0:	4a458593          	add	a1,a1,1188 # 8001cf70 <__func__.1+0x2c8>
    80019ad4:	bfd9                	j	80019aaa <instruction_access_fault_9+0x12e>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    80019ad6:	00003597          	auipc	a1,0x3
    80019ada:	49a58593          	add	a1,a1,1178 # 8001cf70 <__func__.1+0x2c8>
    80019ade:	b741                	j	80019a5e <instruction_access_fault_9+0xe2>

0000000080019ae0 <instruction_access_fault_10>:

bool instruction_access_fault_10(){
    80019ae0:	1101                	add	sp,sp,-32

    TEST_START();
    80019ae2:	00003597          	auipc	a1,0x3
    80019ae6:	14658593          	add	a1,a1,326 # 8001cc28 <__func__.0>
    80019aea:	00003517          	auipc	a0,0x3
    80019aee:	4a650513          	add	a0,a0,1190 # 8001cf90 <__func__.1+0x2e8>
bool instruction_access_fault_10(){
    80019af2:	ec06                	sd	ra,24(sp)
    80019af4:	e822                	sd	s0,16(sp)
    80019af6:	e426                	sd	s1,8(sp)
    TEST_START();
    80019af8:	0ef010ef          	jal	8001b3e6 <printf>
    80019afc:	4529                	li	a0,10
    80019afe:	7ba000ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_M);
    80019b02:	4511                	li	a0,4
    80019b04:	fdbe60ef          	jal	80000ade <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80019b08:	3a005073          	csrw	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80019b0c:	3a00e073          	csrs	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80019b10:	3a016073          	csrs	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80019b14:	3a026073          	csrs	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80019b18:	3a046073          	csrs	pmpcfg0,8
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    80019b1c:	08000793          	li	a5,128
    80019b20:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80019b24:	4485                	li	s1,1
    80019b26:	01f49793          	sll	a5,s1,0x1f
    80019b2a:	3b079073          	csrw	pmpaddr0,a5

    goto_priv(PRIV_M);
    80019b2e:	4511                	li	a0,4
    80019b30:	fafe60ef          	jal	80000ade <goto_priv>
    TEST_SETUP_EXCEPT();    
    80019b34:	0ff0000f          	fence
    80019b38:	00023417          	auipc	s0,0x23
    80019b3c:	4d840413          	add	s0,s0,1240 # 8003d010 <excpt>
    80019b40:	00941023          	sh	s1,0(s0)
    80019b44:	00023797          	auipc	a5,0x23
    80019b48:	5007b223          	sd	zero,1284(a5) # 8003d048 <excpt+0x38>
    80019b4c:	0ff0000f          	fence
    
    TEST_EXEC_EXCEPT((uintptr_t)0x70000000 << 2);
    80019b50:	479d                	li	a5,7
    80019b52:	07fa                	sll	a5,a5,0x1e
    80019b54:	00000297          	auipc	t0,0x0
    80019b58:	00c28293          	add	t0,t0,12 # 80019b60 <instruction_access_fault_10+0x80>
    80019b5c:	02543c23          	sd	t0,56(s0)
    80019b60:	8782                	jr	a5

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    80019b62:	08200593          	li	a1,130
    80019b66:	0000a617          	auipc	a2,0xa
    80019b6a:	8da60613          	add	a2,a2,-1830 # 80023440 <__func__.1+0x6798>
    80019b6e:	00003517          	auipc	a0,0x3
    80019b72:	43a50513          	add	a0,a0,1082 # 8001cfa8 <__func__.1+0x300>
    80019b76:	071010ef          	jal	8001b3e6 <printf>
    80019b7a:	00144783          	lbu	a5,1(s0)
    80019b7e:	00003597          	auipc	a1,0x3
    80019b82:	40258593          	add	a1,a1,1026 # 8001cf80 <__func__.1+0x2d8>
    80019b86:	c781                	beqz	a5,80019b8e <instruction_access_fault_10+0xae>
    80019b88:	641c                	ld	a5,8(s0)
    80019b8a:	06978e63          	beq	a5,s1,80019c06 <instruction_access_fault_10+0x126>
    80019b8e:	00003517          	auipc	a0,0x3
    80019b92:	43250513          	add	a0,a0,1074 # 8001cfc0 <__func__.1+0x318>
    80019b96:	051010ef          	jal	8001b3e6 <printf>
    80019b9a:	00144783          	lbu	a5,1(s0)
    80019b9e:	c789                	beqz	a5,80019ba8 <instruction_access_fault_10+0xc8>
    80019ba0:	6418                	ld	a4,8(s0)
    80019ba2:	4785                	li	a5,1
    80019ba4:	00f70c63          	beq	a4,a5,80019bbc <instruction_access_fault_10+0xdc>
    80019ba8:	00003517          	auipc	a0,0x3
    80019bac:	42050513          	add	a0,a0,1056 # 8001cfc8 <__func__.1+0x320>
    80019bb0:	037010ef          	jal	8001b3e6 <printf>
    80019bb4:	02900513          	li	a0,41
    80019bb8:	700000ef          	jal	8001a2b8 <putchar>
    80019bbc:	4529                	li	a0,10
    80019bbe:	6fa000ef          	jal	8001a2b8 <putchar>
    80019bc2:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    80019bc6:	00003597          	auipc	a1,0x3
    80019bca:	3ba58593          	add	a1,a1,954 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    80019bce:	c491                	beqz	s1,80019bda <instruction_access_fault_10+0xfa>
    80019bd0:	6418                	ld	a4,8(s0)
    80019bd2:	4785                	li	a5,1
    80019bd4:	02f70463          	beq	a4,a5,80019bfc <instruction_access_fault_10+0x11c>
    80019bd8:	4481                	li	s1,0
    TEST_END();
    80019bda:	00003517          	auipc	a0,0x3
    80019bde:	44e50513          	add	a0,a0,1102 # 8001d028 <__func__.1+0x380>
    80019be2:	005010ef          	jal	8001b3e6 <printf>
    80019be6:	4511                	li	a0,4
    80019be8:	ef7e60ef          	jal	80000ade <goto_priv>
    80019bec:	f3ae70ef          	jal	80001326 <reset_state>
    80019bf0:	60e2                	ld	ra,24(sp)
    80019bf2:	6442                	ld	s0,16(sp)
    80019bf4:	8526                	mv	a0,s1
    80019bf6:	64a2                	ld	s1,8(sp)
    80019bf8:	6105                	add	sp,sp,32
    80019bfa:	8082                	ret
    TEST_END();
    80019bfc:	00003597          	auipc	a1,0x3
    80019c00:	37458593          	add	a1,a1,884 # 8001cf70 <__func__.1+0x2c8>
    80019c04:	bfd9                	j	80019bda <instruction_access_fault_10+0xfa>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    80019c06:	00003597          	auipc	a1,0x3
    80019c0a:	36a58593          	add	a1,a1,874 # 8001cf70 <__func__.1+0x2c8>
    80019c0e:	b741                	j	80019b8e <instruction_access_fault_10+0xae>

0000000080019c10 <mstatus_csr_tests_1>:
#include <rvh_test.h>
#include <page_tables.h>

bool mstatus_csr_tests_1(){
    80019c10:	1101                	add	sp,sp,-32

TEST_START();
    80019c12:	00003597          	auipc	a1,0x3
    80019c16:	03658593          	add	a1,a1,54 # 8001cc48 <__func__.6>
    80019c1a:	00003517          	auipc	a0,0x3
    80019c1e:	37650513          	add	a0,a0,886 # 8001cf90 <__func__.1+0x2e8>
bool mstatus_csr_tests_1(){
    80019c22:	ec06                	sd	ra,24(sp)
    80019c24:	e822                	sd	s0,16(sp)
    80019c26:	e426                	sd	s1,8(sp)
TEST_START();
    80019c28:	7be010ef          	jal	8001b3e6 <printf>
    80019c2c:	4529                	li	a0,10
    80019c2e:	68a000ef          	jal	8001a2b8 <putchar>
    printf("%d\n",x);
*/

//mstatus.SUM 阻止S对U访问，缺页异常
    
    goto_priv(PRIV_HS);
    80019c32:	450d                	li	a0,3
    80019c34:	eabe60ef          	jal	80000ade <goto_priv>
    hspt_init();
    80019c38:	9a9e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019c3c:	bebe60ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80019c40:	4509                	li	a0,2
    80019c42:	e9de60ef          	jal	80000ade <goto_priv>
    vspt_init();
    80019c46:	a6fe60ef          	jal	800006b4 <vspt_init>

    //执行load指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80019c4a:	4511                	li	a0,4
    80019c4c:	e93e60ef          	jal	80000ade <goto_priv>
    CSRC(CSR_MSTATUS, MSTATUS_SUM);
    80019c50:	000407b7          	lui	a5,0x40
    80019c54:	3007b073          	csrc	mstatus,a5
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    TEST_SETUP_EXCEPT();
    80019c58:	0ff0000f          	fence
    80019c5c:	4785                	li	a5,1
    80019c5e:	00023417          	auipc	s0,0x23
    80019c62:	3b240413          	add	s0,s0,946 # 8003d010 <excpt>
    80019c66:	00f41023          	sh	a5,0(s0)
    80019c6a:	00023797          	auipc	a5,0x23
    80019c6e:	3c07bf23          	sd	zero,990(a5) # 8003d048 <excpt+0x38>
    80019c72:	0ff0000f          	fence

    goto_priv(PRIV_HS);
    80019c76:	450d                	li	a0,3
    80019c78:	e67e60ef          	jal	80000ade <goto_priv>
    asm volatile(
    80019c7c:	000807b7          	lui	a5,0x80
    80019c80:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80019c82:	07b6                	sll	a5,a5,0xd
    80019c84:	6c07c7f3          	.4byte	0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    80019c88:	08200593          	li	a1,130
    80019c8c:	0000a617          	auipc	a2,0xa
    80019c90:	81460613          	add	a2,a2,-2028 # 800234a0 <__func__.1+0x67f8>
    80019c94:	00003517          	auipc	a0,0x3
    80019c98:	31450513          	add	a0,a0,788 # 8001cfa8 <__func__.1+0x300>
    80019c9c:	74a010ef          	jal	8001b3e6 <printf>
    80019ca0:	00144783          	lbu	a5,1(s0)
    80019ca4:	00003597          	auipc	a1,0x3
    80019ca8:	2dc58593          	add	a1,a1,732 # 8001cf80 <__func__.1+0x2d8>
    80019cac:	c789                	beqz	a5,80019cb6 <mstatus_csr_tests_1+0xa6>
    80019cae:	6418                	ld	a4,8(s0)
    80019cb0:	47b5                	li	a5,13
    80019cb2:	06f70e63          	beq	a4,a5,80019d2e <mstatus_csr_tests_1+0x11e>
    80019cb6:	00003517          	auipc	a0,0x3
    80019cba:	30a50513          	add	a0,a0,778 # 8001cfc0 <__func__.1+0x318>
    80019cbe:	728010ef          	jal	8001b3e6 <printf>
    80019cc2:	00144783          	lbu	a5,1(s0)
    80019cc6:	c789                	beqz	a5,80019cd0 <mstatus_csr_tests_1+0xc0>
    80019cc8:	6418                	ld	a4,8(s0)
    80019cca:	47b5                	li	a5,13
    80019ccc:	00f70c63          	beq	a4,a5,80019ce4 <mstatus_csr_tests_1+0xd4>
    80019cd0:	00003517          	auipc	a0,0x3
    80019cd4:	2f850513          	add	a0,a0,760 # 8001cfc8 <__func__.1+0x320>
    80019cd8:	70e010ef          	jal	8001b3e6 <printf>
    80019cdc:	02900513          	li	a0,41
    80019ce0:	5d8000ef          	jal	8001a2b8 <putchar>
    80019ce4:	4529                	li	a0,10
    80019ce6:	5d2000ef          	jal	8001a2b8 <putchar>
    80019cea:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80019cee:	00003597          	auipc	a1,0x3
    80019cf2:	29258593          	add	a1,a1,658 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    80019cf6:	c491                	beqz	s1,80019d02 <mstatus_csr_tests_1+0xf2>
    80019cf8:	6418                	ld	a4,8(s0)
    80019cfa:	47b5                	li	a5,13
    80019cfc:	02f70463          	beq	a4,a5,80019d24 <mstatus_csr_tests_1+0x114>
    80019d00:	4481                	li	s1,0
    TEST_END();
    80019d02:	00003517          	auipc	a0,0x3
    80019d06:	32650513          	add	a0,a0,806 # 8001d028 <__func__.1+0x380>
    80019d0a:	6dc010ef          	jal	8001b3e6 <printf>
    80019d0e:	4511                	li	a0,4
    80019d10:	dcfe60ef          	jal	80000ade <goto_priv>
    80019d14:	e12e70ef          	jal	80001326 <reset_state>
}
    80019d18:	60e2                	ld	ra,24(sp)
    80019d1a:	6442                	ld	s0,16(sp)
    80019d1c:	8526                	mv	a0,s1
    80019d1e:	64a2                	ld	s1,8(sp)
    80019d20:	6105                	add	sp,sp,32
    80019d22:	8082                	ret
    TEST_END();
    80019d24:	00003597          	auipc	a1,0x3
    80019d28:	24c58593          	add	a1,a1,588 # 8001cf70 <__func__.1+0x2c8>
    80019d2c:	bfd9                	j	80019d02 <mstatus_csr_tests_1+0xf2>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    80019d2e:	00003597          	auipc	a1,0x3
    80019d32:	24258593          	add	a1,a1,578 # 8001cf70 <__func__.1+0x2c8>
    80019d36:	b741                	j	80019cb6 <mstatus_csr_tests_1+0xa6>

0000000080019d38 <mstatus_csr_tests_2>:

bool mstatus_csr_tests_2(){
    80019d38:	1141                	add	sp,sp,-16

    TEST_START();
    80019d3a:	00003597          	auipc	a1,0x3
    80019d3e:	f2658593          	add	a1,a1,-218 # 8001cc60 <__func__.4>
    80019d42:	00003517          	auipc	a0,0x3
    80019d46:	24e50513          	add	a0,a0,590 # 8001cf90 <__func__.1+0x2e8>
bool mstatus_csr_tests_2(){
    80019d4a:	e406                	sd	ra,8(sp)
    80019d4c:	e022                	sd	s0,0(sp)
    TEST_START();
    80019d4e:	698010ef          	jal	8001b3e6 <printf>
    80019d52:	4529                	li	a0,10
    80019d54:	564000ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80019d58:	450d                	li	a0,3
    80019d5a:	d85e60ef          	jal	80000ade <goto_priv>
    hspt_init();
    80019d5e:	883e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019d62:	ac5e60ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80019d66:	4509                	li	a0,2
    80019d68:	d77e60ef          	jal	80000ade <goto_priv>
    vspt_init();
    80019d6c:	949e60ef          	jal	800006b4 <vspt_init>

    //执行load指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80019d70:	4511                	li	a0,4
    80019d72:	d6de60ef          	jal	80000ade <goto_priv>
    reset_state();
    80019d76:	db0e70ef          	jal	80001326 <reset_state>
    CSRS(CSR_MSTATUS, MSTATUS_SUM);
    80019d7a:	000407b7          	lui	a5,0x40
    80019d7e:	3007a073          	csrs	mstatus,a5
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    TEST_SETUP_EXCEPT();
    80019d82:	0ff0000f          	fence
    80019d86:	4785                	li	a5,1
    80019d88:	00023417          	auipc	s0,0x23
    80019d8c:	28840413          	add	s0,s0,648 # 8003d010 <excpt>
    80019d90:	00f41023          	sh	a5,0(s0)
    80019d94:	00023797          	auipc	a5,0x23
    80019d98:	2a07ba23          	sd	zero,692(a5) # 8003d048 <excpt+0x38>
    80019d9c:	0ff0000f          	fence

    goto_priv(PRIV_HS);
    80019da0:	450d                	li	a0,3
    80019da2:	d3de60ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80019da6:	4509                	li	a0,2
    80019da8:	c5be60ef          	jal	80000a02 <set_prev_priv>
    80019dac:	000807b7          	lui	a5,0x80
    80019db0:	07e5                	add	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80019db2:	07b6                	sll	a5,a5,0xd
    80019db4:	6c07c7f3          	.4byte	0x6c07c7f3
    hlvd(addr);
        printf("%d\n",excpt.triggered);
    80019db8:	00144583          	lbu	a1,1(s0)
    80019dbc:	00004517          	auipc	a0,0x4
    80019dc0:	c3c50513          	add	a0,a0,-964 # 8001d9f8 <__func__.1+0xd50>
    80019dc4:	622010ef          	jal	8001b3e6 <printf>
    printf("%d\n",excpt.cause);
    80019dc8:	640c                	ld	a1,8(s0)
    80019dca:	00004517          	auipc	a0,0x4
    80019dce:	c2e50513          	add	a0,a0,-978 # 8001d9f8 <__func__.1+0xd50>
    80019dd2:	614010ef          	jal	8001b3e6 <printf>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    80019dd6:	08200593          	li	a1,130
    80019dda:	00009617          	auipc	a2,0x9
    80019dde:	6fe60613          	add	a2,a2,1790 # 800234d8 <__func__.1+0x6830>
    80019de2:	00003517          	auipc	a0,0x3
    80019de6:	1c650513          	add	a0,a0,454 # 8001cfa8 <__func__.1+0x300>
    80019dea:	5fc010ef          	jal	8001b3e6 <printf>
    80019dee:	00144783          	lbu	a5,1(s0)
    80019df2:	00003597          	auipc	a1,0x3
    80019df6:	17e58593          	add	a1,a1,382 # 8001cf70 <__func__.1+0x2c8>
    80019dfa:	c789                	beqz	a5,80019e04 <mstatus_csr_tests_2+0xcc>
    80019dfc:	00003597          	auipc	a1,0x3
    80019e00:	18458593          	add	a1,a1,388 # 8001cf80 <__func__.1+0x2d8>
    80019e04:	00003517          	auipc	a0,0x3
    80019e08:	1bc50513          	add	a0,a0,444 # 8001cfc0 <__func__.1+0x318>
    80019e0c:	5da010ef          	jal	8001b3e6 <printf>
    80019e10:	00144783          	lbu	a5,1(s0)
    80019e14:	e3b1                	bnez	a5,80019e58 <mstatus_csr_tests_2+0x120>
    80019e16:	4529                	li	a0,10
    80019e18:	4a0000ef          	jal	8001a2b8 <putchar>
    80019e1c:	00144783          	lbu	a5,1(s0)
    80019e20:	e795                	bnez	a5,80019e4c <mstatus_csr_tests_2+0x114>
    80019e22:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    80019e24:	00003597          	auipc	a1,0x3
    80019e28:	14c58593          	add	a1,a1,332 # 8001cf70 <__func__.1+0x2c8>
    80019e2c:	00003517          	auipc	a0,0x3
    80019e30:	1fc50513          	add	a0,a0,508 # 8001d028 <__func__.1+0x380>
    80019e34:	5b2010ef          	jal	8001b3e6 <printf>
    80019e38:	4511                	li	a0,4
    80019e3a:	ca5e60ef          	jal	80000ade <goto_priv>
    80019e3e:	ce8e70ef          	jal	80001326 <reset_state>
}
    80019e42:	60a2                	ld	ra,8(sp)
    80019e44:	8522                	mv	a0,s0
    80019e46:	6402                	ld	s0,0(sp)
    80019e48:	0141                	add	sp,sp,16
    80019e4a:	8082                	ret
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    80019e4c:	4401                	li	s0,0
    TEST_END();
    80019e4e:	00003597          	auipc	a1,0x3
    80019e52:	13258593          	add	a1,a1,306 # 8001cf80 <__func__.1+0x2d8>
    80019e56:	bfd9                	j	80019e2c <mstatus_csr_tests_2+0xf4>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    80019e58:	00003517          	auipc	a0,0x3
    80019e5c:	17050513          	add	a0,a0,368 # 8001cfc8 <__func__.1+0x320>
    80019e60:	586010ef          	jal	8001b3e6 <printf>
    80019e64:	02900513          	li	a0,41
    80019e68:	450000ef          	jal	8001a2b8 <putchar>
    80019e6c:	b76d                	j	80019e16 <mstatus_csr_tests_2+0xde>

0000000080019e6e <mstatus_csr_tests_3>:

bool mstatus_csr_tests_3(){
    80019e6e:	1101                	add	sp,sp,-32

    TEST_START();
    80019e70:	00003597          	auipc	a1,0x3
    80019e74:	e0858593          	add	a1,a1,-504 # 8001cc78 <__func__.3>
    80019e78:	00003517          	auipc	a0,0x3
    80019e7c:	11850513          	add	a0,a0,280 # 8001cf90 <__func__.1+0x2e8>
bool mstatus_csr_tests_3(){
    80019e80:	ec06                	sd	ra,24(sp)
    80019e82:	e822                	sd	s0,16(sp)
    80019e84:	e426                	sd	s1,8(sp)
    TEST_START();
    80019e86:	560010ef          	jal	8001b3e6 <printf>
    80019e8a:	4529                	li	a0,10
    80019e8c:	42c000ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80019e90:	450d                	li	a0,3
    80019e92:	c4de60ef          	jal	80000ade <goto_priv>
    hspt_init();
    80019e96:	f4ae60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019e9a:	98de60ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80019e9e:	4509                	li	a0,2
    80019ea0:	c3fe60ef          	jal	80000ade <goto_priv>
    vspt_init();
    80019ea4:	811e60ef          	jal	800006b4 <vspt_init>
    //执行load指令时，设置了mstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    goto_priv(PRIV_M);
    80019ea8:	4511                	li	a0,4
    80019eaa:	c35e60ef          	jal	80000ade <goto_priv>
    reset_state();
    80019eae:	c78e70ef          	jal	80001326 <reset_state>

    uintptr_t addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_MSTATUS, MSTATUS_MXR);
    80019eb2:	000807b7          	lui	a5,0x80
    80019eb6:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_HS);
    80019eba:	450d                	li	a0,3
    80019ebc:	c23e60ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    80019ec0:	4509                	li	a0,2
    80019ec2:	b41e60ef          	jal	80000a02 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    80019ec6:	0ff0000f          	fence
    80019eca:	4785                	li	a5,1
    80019ecc:	00023417          	auipc	s0,0x23
    80019ed0:	14440413          	add	s0,s0,324 # 8003d010 <excpt>
    80019ed4:	00f41023          	sh	a5,0(s0)
    80019ed8:	00023797          	auipc	a5,0x23
    80019edc:	1607b823          	sd	zero,368(a5) # 8003d048 <excpt+0x38>
    80019ee0:	0ff0000f          	fence
    80019ee4:	001007b7          	lui	a5,0x100
    80019ee8:	05f78793          	add	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    80019eec:	07b2                	sll	a5,a5,0xc
    80019eee:	6c07c7f3          	.4byte	0x6c07c7f3
    hlvd(addr);   
    printf("%d\n",excpt.triggered);
    80019ef2:	00144583          	lbu	a1,1(s0)
    80019ef6:	00004517          	auipc	a0,0x4
    80019efa:	b0250513          	add	a0,a0,-1278 # 8001d9f8 <__func__.1+0xd50>
    80019efe:	4e8010ef          	jal	8001b3e6 <printf>
    printf("%d\n",excpt.cause);
    80019f02:	640c                	ld	a1,8(s0)
    80019f04:	00004517          	auipc	a0,0x4
    80019f08:	af450513          	add	a0,a0,-1292 # 8001d9f8 <__func__.1+0xd50>
    80019f0c:	4da010ef          	jal	8001b3e6 <printf>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    80019f10:	08200593          	li	a1,130
    80019f14:	00009617          	auipc	a2,0x9
    80019f18:	5fc60613          	add	a2,a2,1532 # 80023510 <__func__.1+0x6868>
    80019f1c:	00003517          	auipc	a0,0x3
    80019f20:	08c50513          	add	a0,a0,140 # 8001cfa8 <__func__.1+0x300>
    80019f24:	4c2010ef          	jal	8001b3e6 <printf>
    80019f28:	00144783          	lbu	a5,1(s0)
    80019f2c:	00003597          	auipc	a1,0x3
    80019f30:	05458593          	add	a1,a1,84 # 8001cf80 <__func__.1+0x2d8>
    80019f34:	c789                	beqz	a5,80019f3e <mstatus_csr_tests_3+0xd0>
    80019f36:	6418                	ld	a4,8(s0)
    80019f38:	47b5                	li	a5,13
    80019f3a:	06f70e63          	beq	a4,a5,80019fb6 <mstatus_csr_tests_3+0x148>
    80019f3e:	00003517          	auipc	a0,0x3
    80019f42:	08250513          	add	a0,a0,130 # 8001cfc0 <__func__.1+0x318>
    80019f46:	4a0010ef          	jal	8001b3e6 <printf>
    80019f4a:	00144783          	lbu	a5,1(s0)
    80019f4e:	c789                	beqz	a5,80019f58 <mstatus_csr_tests_3+0xea>
    80019f50:	6418                	ld	a4,8(s0)
    80019f52:	47b5                	li	a5,13
    80019f54:	00f70c63          	beq	a4,a5,80019f6c <mstatus_csr_tests_3+0xfe>
    80019f58:	00003517          	auipc	a0,0x3
    80019f5c:	07050513          	add	a0,a0,112 # 8001cfc8 <__func__.1+0x320>
    80019f60:	486010ef          	jal	8001b3e6 <printf>
    80019f64:	02900513          	li	a0,41
    80019f68:	350000ef          	jal	8001a2b8 <putchar>
    80019f6c:	4529                	li	a0,10
    80019f6e:	34a000ef          	jal	8001a2b8 <putchar>
    80019f72:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );


    TEST_END();
    80019f76:	00003597          	auipc	a1,0x3
    80019f7a:	00a58593          	add	a1,a1,10 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    80019f7e:	c491                	beqz	s1,80019f8a <mstatus_csr_tests_3+0x11c>
    80019f80:	6418                	ld	a4,8(s0)
    80019f82:	47b5                	li	a5,13
    80019f84:	02f70463          	beq	a4,a5,80019fac <mstatus_csr_tests_3+0x13e>
    80019f88:	4481                	li	s1,0
    TEST_END();
    80019f8a:	00003517          	auipc	a0,0x3
    80019f8e:	09e50513          	add	a0,a0,158 # 8001d028 <__func__.1+0x380>
    80019f92:	454010ef          	jal	8001b3e6 <printf>
    80019f96:	4511                	li	a0,4
    80019f98:	b47e60ef          	jal	80000ade <goto_priv>
    80019f9c:	b8ae70ef          	jal	80001326 <reset_state>
}
    80019fa0:	60e2                	ld	ra,24(sp)
    80019fa2:	6442                	ld	s0,16(sp)
    80019fa4:	8526                	mv	a0,s1
    80019fa6:	64a2                	ld	s1,8(sp)
    80019fa8:	6105                	add	sp,sp,32
    80019faa:	8082                	ret
    TEST_END();
    80019fac:	00003597          	auipc	a1,0x3
    80019fb0:	fc458593          	add	a1,a1,-60 # 8001cf70 <__func__.1+0x2c8>
    80019fb4:	bfd9                	j	80019f8a <mstatus_csr_tests_3+0x11c>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    80019fb6:	00003597          	auipc	a1,0x3
    80019fba:	fba58593          	add	a1,a1,-70 # 8001cf70 <__func__.1+0x2c8>
    80019fbe:	b741                	j	80019f3e <mstatus_csr_tests_3+0xd0>

0000000080019fc0 <mstatus_csr_tests_4>:

bool mstatus_csr_tests_4(){
    80019fc0:	1101                	add	sp,sp,-32

    TEST_START();
    80019fc2:	00003597          	auipc	a1,0x3
    80019fc6:	cce58593          	add	a1,a1,-818 # 8001cc90 <__func__.2>
    80019fca:	00003517          	auipc	a0,0x3
    80019fce:	fc650513          	add	a0,a0,-58 # 8001cf90 <__func__.1+0x2e8>
bool mstatus_csr_tests_4(){
    80019fd2:	ec06                	sd	ra,24(sp)
    80019fd4:	e822                	sd	s0,16(sp)
    80019fd6:	e426                	sd	s1,8(sp)
    TEST_START();
    80019fd8:	40e010ef          	jal	8001b3e6 <printf>
    80019fdc:	4529                	li	a0,10
    80019fde:	2da000ef          	jal	8001a2b8 <putchar>

    goto_priv(PRIV_HS);
    80019fe2:	450d                	li	a0,3
    80019fe4:	afbe60ef          	jal	80000ade <goto_priv>
    hspt_init();
    80019fe8:	df8e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019fec:	83be60ef          	jal	80000826 <hpt_init>
    goto_priv(PRIV_VS);
    80019ff0:	4509                	li	a0,2
    80019ff2:	aede60ef          	jal	80000ade <goto_priv>
    vspt_init();
    80019ff6:	ebee60ef          	jal	800006b4 <vspt_init>
    //执行load指令时，设置了mstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    uintptr_t addr = hs_page_base(VSV_GV);

    goto_priv(PRIV_M);
    80019ffa:	4511                	li	a0,4
    80019ffc:	ae3e60ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_MXR);
    8001a000:	000807b7          	lui	a5,0x80
    8001a004:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    8001a008:	450d                	li	a0,3
    8001a00a:	ad5e60ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VS);
    8001a00e:	4509                	li	a0,2
    8001a010:	9f3e60ef          	jal	80000a02 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    8001a014:	0ff0000f          	fence
    8001a018:	4785                	li	a5,1
    8001a01a:	00023417          	auipc	s0,0x23
    8001a01e:	ff640413          	add	s0,s0,-10 # 8003d010 <excpt>
    8001a022:	00f41023          	sh	a5,0(s0)
    8001a026:	00023797          	auipc	a5,0x23
    8001a02a:	0207b123          	sd	zero,34(a5) # 8003d048 <excpt+0x38>
    8001a02e:	0ff0000f          	fence
    8001a032:	001007b7          	lui	a5,0x100
    8001a036:	07f5                	add	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    8001a038:	07b2                	sll	a5,a5,0xc
    8001a03a:	6c07c7f3          	.4byte	0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("s mode load when mstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001a03e:	08200593          	li	a1,130
    8001a042:	00009617          	auipc	a2,0x9
    8001a046:	50660613          	add	a2,a2,1286 # 80023548 <__func__.1+0x68a0>
    8001a04a:	00003517          	auipc	a0,0x3
    8001a04e:	f5e50513          	add	a0,a0,-162 # 8001cfa8 <__func__.1+0x300>
    8001a052:	394010ef          	jal	8001b3e6 <printf>
    8001a056:	00144783          	lbu	a5,1(s0)
    8001a05a:	00003597          	auipc	a1,0x3
    8001a05e:	f2658593          	add	a1,a1,-218 # 8001cf80 <__func__.1+0x2d8>
    8001a062:	c789                	beqz	a5,8001a06c <mstatus_csr_tests_4+0xac>
    8001a064:	6418                	ld	a4,8(s0)
    8001a066:	47b5                	li	a5,13
    8001a068:	08f70663          	beq	a4,a5,8001a0f4 <mstatus_csr_tests_4+0x134>
    8001a06c:	00003517          	auipc	a0,0x3
    8001a070:	f5450513          	add	a0,a0,-172 # 8001cfc0 <__func__.1+0x318>
    8001a074:	372010ef          	jal	8001b3e6 <printf>
    8001a078:	00144783          	lbu	a5,1(s0)
    8001a07c:	c789                	beqz	a5,8001a086 <mstatus_csr_tests_4+0xc6>
    8001a07e:	6418                	ld	a4,8(s0)
    8001a080:	47b5                	li	a5,13
    8001a082:	00f70c63          	beq	a4,a5,8001a09a <mstatus_csr_tests_4+0xda>
    8001a086:	00003517          	auipc	a0,0x3
    8001a08a:	f4250513          	add	a0,a0,-190 # 8001cfc8 <__func__.1+0x320>
    8001a08e:	358010ef          	jal	8001b3e6 <printf>
    8001a092:	02900513          	li	a0,41
    8001a096:	222000ef          	jal	8001a2b8 <putchar>
    8001a09a:	4529                	li	a0,10
    8001a09c:	21c000ef          	jal	8001a2b8 <putchar>
    8001a0a0:	00144483          	lbu	s1,1(s0)
    8001a0a4:	c489                	beqz	s1,8001a0ae <mstatus_csr_tests_4+0xee>
    8001a0a6:	6418                	ld	a4,8(s0)
    8001a0a8:	47b5                	li	a5,13
    8001a0aa:	02f70c63          	beq	a4,a5,8001a0e2 <mstatus_csr_tests_4+0x122>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001a0ae:	000807b7          	lui	a5,0x80
    8001a0b2:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("s mode load when mstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001a0b6:	4481                	li	s1,0


TEST_END();
    8001a0b8:	00003597          	auipc	a1,0x3
    8001a0bc:	ec858593          	add	a1,a1,-312 # 8001cf80 <__func__.1+0x2d8>
    8001a0c0:	00003517          	auipc	a0,0x3
    8001a0c4:	f6850513          	add	a0,a0,-152 # 8001d028 <__func__.1+0x380>
    8001a0c8:	31e010ef          	jal	8001b3e6 <printf>
    8001a0cc:	4511                	li	a0,4
    8001a0ce:	a11e60ef          	jal	80000ade <goto_priv>
    8001a0d2:	a54e70ef          	jal	80001326 <reset_state>

}
    8001a0d6:	60e2                	ld	ra,24(sp)
    8001a0d8:	6442                	ld	s0,16(sp)
    8001a0da:	8526                	mv	a0,s1
    8001a0dc:	64a2                	ld	s1,8(sp)
    8001a0de:	6105                	add	sp,sp,32
    8001a0e0:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001a0e2:	000807b7          	lui	a5,0x80
    8001a0e6:	1007b073          	csrc	sstatus,a5
TEST_END();
    8001a0ea:	00003597          	auipc	a1,0x3
    8001a0ee:	e8658593          	add	a1,a1,-378 # 8001cf70 <__func__.1+0x2c8>
    8001a0f2:	b7f9                	j	8001a0c0 <mstatus_csr_tests_4+0x100>
    TEST_ASSERT("s mode load when mstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001a0f4:	00003597          	auipc	a1,0x3
    8001a0f8:	e7c58593          	add	a1,a1,-388 # 8001cf70 <__func__.1+0x2c8>
    8001a0fc:	bf85                	j	8001a06c <mstatus_csr_tests_4+0xac>

000000008001a0fe <mstatus_csr_tests_5>:

bool mstatus_csr_tests_5(){
    8001a0fe:	1101                	add	sp,sp,-32

    TEST_START();
    8001a100:	00003597          	auipc	a1,0x3
    8001a104:	ba858593          	add	a1,a1,-1112 # 8001cca8 <__func__.1>
    8001a108:	00003517          	auipc	a0,0x3
    8001a10c:	e8850513          	add	a0,a0,-376 # 8001cf90 <__func__.1+0x2e8>
bool mstatus_csr_tests_5(){
    8001a110:	ec06                	sd	ra,24(sp)
    8001a112:	e822                	sd	s0,16(sp)
    8001a114:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a116:	2d0010ef          	jal	8001b3e6 <printf>
    8001a11a:	4529                	li	a0,10
    8001a11c:	19c000ef          	jal	8001a2b8 <putchar>
    //mstatus.TSR=1时，执行sret指令
    TEST_SETUP_EXCEPT();
    8001a120:	0ff0000f          	fence
    8001a124:	4785                	li	a5,1
    8001a126:	00023417          	auipc	s0,0x23
    8001a12a:	eea40413          	add	s0,s0,-278 # 8003d010 <excpt>
    8001a12e:	00f41023          	sh	a5,0(s0)
    8001a132:	00023797          	auipc	a5,0x23
    8001a136:	f007bb23          	sd	zero,-234(a5) # 8003d048 <excpt+0x38>
    8001a13a:	0ff0000f          	fence
    goto_priv(PRIV_M);
    8001a13e:	4511                	li	a0,4
    8001a140:	99fe60ef          	jal	80000ade <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 22);    //TSR位
    8001a144:	004007b7          	lui	a5,0x400
    8001a148:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    8001a14c:	450d                	li	a0,3
    8001a14e:	991e60ef          	jal	80000ade <goto_priv>
    set_prev_priv(PRIV_VU);
    8001a152:	4501                	li	a0,0
    8001a154:	8afe60ef          	jal	80000a02 <set_prev_priv>

    TEST_EXEC_SRET();
    8001a158:	00000297          	auipc	t0,0x0
    8001a15c:	01028293          	add	t0,t0,16 # 8001a168 <mstatus_csr_tests_5+0x6a>
    8001a160:	14129073          	csrw	sepc,t0
    8001a164:	10200073          	sret

    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001a168:	08200593          	li	a1,130
    8001a16c:	00006617          	auipc	a2,0x6
    8001a170:	b6c60613          	add	a2,a2,-1172 # 8001fcd8 <__func__.1+0x3030>
    8001a174:	00003517          	auipc	a0,0x3
    8001a178:	e3450513          	add	a0,a0,-460 # 8001cfa8 <__func__.1+0x300>
    8001a17c:	26a010ef          	jal	8001b3e6 <printf>
    8001a180:	00144783          	lbu	a5,1(s0)
    8001a184:	00003597          	auipc	a1,0x3
    8001a188:	dfc58593          	add	a1,a1,-516 # 8001cf80 <__func__.1+0x2d8>
    8001a18c:	c789                	beqz	a5,8001a196 <mstatus_csr_tests_5+0x98>
    8001a18e:	6418                	ld	a4,8(s0)
    8001a190:	4789                	li	a5,2
    8001a192:	06f70e63          	beq	a4,a5,8001a20e <mstatus_csr_tests_5+0x110>
    8001a196:	00003517          	auipc	a0,0x3
    8001a19a:	e2a50513          	add	a0,a0,-470 # 8001cfc0 <__func__.1+0x318>
    8001a19e:	248010ef          	jal	8001b3e6 <printf>
    8001a1a2:	00144783          	lbu	a5,1(s0)
    8001a1a6:	c789                	beqz	a5,8001a1b0 <mstatus_csr_tests_5+0xb2>
    8001a1a8:	6418                	ld	a4,8(s0)
    8001a1aa:	4789                	li	a5,2
    8001a1ac:	00f70c63          	beq	a4,a5,8001a1c4 <mstatus_csr_tests_5+0xc6>
    8001a1b0:	00003517          	auipc	a0,0x3
    8001a1b4:	e1850513          	add	a0,a0,-488 # 8001cfc8 <__func__.1+0x320>
    8001a1b8:	22e010ef          	jal	8001b3e6 <printf>
    8001a1bc:	02900513          	li	a0,41
    8001a1c0:	0f8000ef          	jal	8001a2b8 <putchar>
    8001a1c4:	4529                	li	a0,10
    8001a1c6:	0f2000ef          	jal	8001a2b8 <putchar>
    8001a1ca:	00144483          	lbu	s1,1(s0)
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8001a1ce:	00003597          	auipc	a1,0x3
    8001a1d2:	db258593          	add	a1,a1,-590 # 8001cf80 <__func__.1+0x2d8>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001a1d6:	c491                	beqz	s1,8001a1e2 <mstatus_csr_tests_5+0xe4>
    8001a1d8:	6418                	ld	a4,8(s0)
    8001a1da:	4789                	li	a5,2
    8001a1dc:	02f70463          	beq	a4,a5,8001a204 <mstatus_csr_tests_5+0x106>
    8001a1e0:	4481                	li	s1,0
    TEST_END();
    8001a1e2:	00003517          	auipc	a0,0x3
    8001a1e6:	e4650513          	add	a0,a0,-442 # 8001d028 <__func__.1+0x380>
    8001a1ea:	1fc010ef          	jal	8001b3e6 <printf>
    8001a1ee:	4511                	li	a0,4
    8001a1f0:	8efe60ef          	jal	80000ade <goto_priv>
    8001a1f4:	932e70ef          	jal	80001326 <reset_state>

}
    8001a1f8:	60e2                	ld	ra,24(sp)
    8001a1fa:	6442                	ld	s0,16(sp)
    8001a1fc:	8526                	mv	a0,s1
    8001a1fe:	64a2                	ld	s1,8(sp)
    8001a200:	6105                	add	sp,sp,32
    8001a202:	8082                	ret
    TEST_END();
    8001a204:	00003597          	auipc	a1,0x3
    8001a208:	d6c58593          	add	a1,a1,-660 # 8001cf70 <__func__.1+0x2c8>
    8001a20c:	bfd9                	j	8001a1e2 <mstatus_csr_tests_5+0xe4>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001a20e:	00003597          	auipc	a1,0x3
    8001a212:	d6258593          	add	a1,a1,-670 # 8001cf70 <__func__.1+0x2c8>
    8001a216:	b741                	j	8001a196 <mstatus_csr_tests_5+0x98>

000000008001a218 <m_to_vs>:

bool m_to_vs(){
    8001a218:	1141                	add	sp,sp,-16

    TEST_START();
    8001a21a:	00009597          	auipc	a1,0x9
    8001a21e:	3ce58593          	add	a1,a1,974 # 800235e8 <__func__.0>
    8001a222:	00003517          	auipc	a0,0x3
    8001a226:	d6e50513          	add	a0,a0,-658 # 8001cf90 <__func__.1+0x2e8>
bool m_to_vs(){
    8001a22a:	e406                	sd	ra,8(sp)
    8001a22c:	e022                	sd	s0,0(sp)
    TEST_START();
    8001a22e:	1b8010ef          	jal	8001b3e6 <printf>
    8001a232:	4529                	li	a0,10
    8001a234:	084000ef          	jal	8001a2b8 <putchar>
    TEST_SETUP_EXCEPT();
    8001a238:	0ff0000f          	fence
    8001a23c:	00023797          	auipc	a5,0x23
    8001a240:	dd478793          	add	a5,a5,-556 # 8003d010 <excpt>
    8001a244:	4705                	li	a4,1
    8001a246:	00e79023          	sh	a4,0(a5)
    8001a24a:	0207bc23          	sd	zero,56(a5)
    8001a24e:	0ff0000f          	fence
    
    goto_priv(PRIV_M);
    8001a252:	4511                	li	a0,4
    8001a254:	88be60ef          	jal	80000ade <goto_priv>
    printf("%d\n",curr_priv);
    8001a258:	0000b417          	auipc	s0,0xb
    8001a25c:	3a440413          	add	s0,s0,932 # 800255fc <curr_priv>
    8001a260:	400c                	lw	a1,0(s0)
    8001a262:	00003517          	auipc	a0,0x3
    8001a266:	79650513          	add	a0,a0,1942 # 8001d9f8 <__func__.1+0xd50>
    8001a26a:	17c010ef          	jal	8001b3e6 <printf>
    goto_priv(PRIV_VS);
    8001a26e:	4509                	li	a0,2
    8001a270:	86fe60ef          	jal	80000ade <goto_priv>
    printf("%d\n",curr_priv);
    8001a274:	400c                	lw	a1,0(s0)
    8001a276:	00003517          	auipc	a0,0x3
    8001a27a:	78250513          	add	a0,a0,1922 # 8001d9f8 <__func__.1+0xd50>
    8001a27e:	168010ef          	jal	8001b3e6 <printf>


    TEST_END();
    8001a282:	00003597          	auipc	a1,0x3
    8001a286:	cee58593          	add	a1,a1,-786 # 8001cf70 <__func__.1+0x2c8>
    8001a28a:	00003517          	auipc	a0,0x3
    8001a28e:	d9e50513          	add	a0,a0,-610 # 8001d028 <__func__.1+0x380>
    8001a292:	154010ef          	jal	8001b3e6 <printf>
    8001a296:	4511                	li	a0,4
    8001a298:	847e60ef          	jal	80000ade <goto_priv>
    8001a29c:	88ae70ef          	jal	80001326 <reset_state>

}
    8001a2a0:	60a2                	ld	ra,8(sp)
    8001a2a2:	6402                	ld	s0,0(sp)
    8001a2a4:	4505                	li	a0,1
    8001a2a6:	0141                	add	sp,sp,16
    8001a2a8:	8082                	ret

000000008001a2aa <sprintf_putch.0>:
  va_start(ap, fmt);

  void sprintf_putch(int ch, void** data)
  {
    char** pstr = (char**)data;
    **pstr = ch;
    8001a2aa:	619c                	ld	a5,0(a1)
    8001a2ac:	00a78023          	sb	a0,0(a5)
    (*pstr)++;
    8001a2b0:	619c                	ld	a5,0(a1)
    8001a2b2:	0785                	add	a5,a5,1
    8001a2b4:	e19c                	sd	a5,0(a1)
  }
    8001a2b6:	8082                	ret

000000008001a2b8 <putchar>:
  buf[buflen++] = ch;
    8001a2b8:	00023697          	auipc	a3,0x23
    8001a2bc:	e1c68693          	add	a3,a3,-484 # 8003d0d4 <buflen.2>
    8001a2c0:	4298                	lw	a4,0(a3)
    8001a2c2:	00023617          	auipc	a2,0x23
    8001a2c6:	dbe60613          	add	a2,a2,-578 # 8003d080 <buf.1>
{
    8001a2ca:	7159                	add	sp,sp,-112
  buf[buflen++] = ch;
    8001a2cc:	0017079b          	addw	a5,a4,1
    8001a2d0:	9732                	add	a4,a4,a2
    8001a2d2:	c29c                	sw	a5,0(a3)
    8001a2d4:	00a70023          	sb	a0,0(a4)
  if (ch == '\n' || buflen == sizeof(buf))
    8001a2d8:	46a9                	li	a3,10
{
    8001a2da:	03f10713          	add	a4,sp,63
    8001a2de:	fc077713          	and	a4,a4,-64
  if (ch == '\n' || buflen == sizeof(buf))
    8001a2e2:	00d50963          	beq	a0,a3,8001a2f4 <putchar+0x3c>
    8001a2e6:	04000693          	li	a3,64
    8001a2ea:	00d78563          	beq	a5,a3,8001a2f4 <putchar+0x3c>
}
    8001a2ee:	4501                	li	a0,0
    8001a2f0:	6165                	add	sp,sp,112
    8001a2f2:	8082                	ret
  magic_mem[0] = which;
    8001a2f4:	04000693          	li	a3,64
    8001a2f8:	e314                	sd	a3,0(a4)
  magic_mem[1] = arg0;
    8001a2fa:	4685                	li	a3,1
    8001a2fc:	e714                	sd	a3,8(a4)
  magic_mem[2] = arg1;
    8001a2fe:	eb10                	sd	a2,16(a4)
  magic_mem[3] = arg2;
    8001a300:	ef1c                	sd	a5,24(a4)
  __sync_synchronize();
    8001a302:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001a306:	0000c697          	auipc	a3,0xc
    8001a30a:	d3a68693          	add	a3,a3,-710 # 80026040 <fromhost>
    8001a30e:	0000c797          	auipc	a5,0xc
    8001a312:	cee7b923          	sd	a4,-782(a5) # 80026000 <tohost>
  while (fromhost == 0)
    8001a316:	629c                	ld	a5,0(a3)
    8001a318:	dffd                	beqz	a5,8001a316 <putchar+0x5e>
  fromhost = 0;
    8001a31a:	0000c797          	auipc	a5,0xc
    8001a31e:	d207b323          	sd	zero,-730(a5) # 80026040 <fromhost>
  __sync_synchronize();
    8001a322:	0ff0000f          	fence
  return magic_mem[0];
    8001a326:	631c                	ld	a5,0(a4)
}
    8001a328:	4501                	li	a0,0
    buflen = 0;
    8001a32a:	00023797          	auipc	a5,0x23
    8001a32e:	da07a523          	sw	zero,-598(a5) # 8003d0d4 <buflen.2>
}
    8001a332:	6165                	add	sp,sp,112
    8001a334:	8082                	ret

000000008001a336 <vprintfmt.constprop.0>:
static void vprintfmt(void (*putch)(int, void**), void **putdat, const char *fmt, va_list ap)
    8001a336:	716d                	add	sp,sp,-272
    8001a338:	e622                	sd	s0,264(sp)
    while ((ch = *(unsigned char *) fmt) != '%') {
    8001a33a:	02500313          	li	t1,37
    switch (ch = *(unsigned char *) fmt++) {
    8001a33e:	05500f13          	li	t5,85
    8001a342:	00003e97          	auipc	t4,0x3
    8001a346:	97ae8e93          	add	t4,t4,-1670 # 8001ccbc <__func__.1+0x14>
    while ((ch = *(unsigned char *) fmt) != '%') {
    8001a34a:	a809                	j	8001a35c <vprintfmt.constprop.0+0x26>
      if (ch == '\0')
    8001a34c:	c729                	beqz	a4,8001a396 <vprintfmt.constprop.0+0x60>
    **pstr = ch;
    8001a34e:	6118                	ld	a4,0(a0)
      fmt++;
    8001a350:	0585                	add	a1,a1,1
    **pstr = ch;
    8001a352:	00f70023          	sb	a5,0(a4)
    (*pstr)++;
    8001a356:	611c                	ld	a5,0(a0)
    8001a358:	0785                	add	a5,a5,1
    8001a35a:	e11c                	sd	a5,0(a0)
    while ((ch = *(unsigned char *) fmt) != '%') {
    8001a35c:	0005c783          	lbu	a5,0(a1)
    8001a360:	0007871b          	sext.w	a4,a5
    8001a364:	fe6794e3          	bne	a5,t1,8001a34c <vprintfmt.constprop.0+0x16>
    switch (ch = *(unsigned char *) fmt++) {
    8001a368:	0015c683          	lbu	a3,1(a1)
    fmt++;
    8001a36c:	00158893          	add	a7,a1,1
    8001a370:	8746                	mv	a4,a7
    padc = ' ';
    8001a372:	02000293          	li	t0,32
    precision = -1;
    8001a376:	587d                	li	a6,-1
    width = -1;
    8001a378:	5ffd                	li	t6,-1
    lflag = 0;
    8001a37a:	4e01                	li	t3,0
    switch (ch = *(unsigned char *) fmt++) {
    8001a37c:	fdd6879b          	addw	a5,a3,-35
    8001a380:	0ff7f793          	zext.b	a5,a5
    8001a384:	00170593          	add	a1,a4,1
    8001a388:	02ff6663          	bltu	t5,a5,8001a3b4 <vprintfmt.constprop.0+0x7e>
    8001a38c:	078a                	sll	a5,a5,0x2
    8001a38e:	97f6                	add	a5,a5,t4
    8001a390:	439c                	lw	a5,0(a5)
    8001a392:	97f6                	add	a5,a5,t4
    8001a394:	8782                	jr	a5
}
    8001a396:	6432                	ld	s0,264(sp)
    8001a398:	6151                	add	sp,sp,272
    8001a39a:	8082                	ret
      padc = '0';
    8001a39c:	82b6                	mv	t0,a3
      goto reswitch;
    8001a39e:	00174683          	lbu	a3,1(a4)
    switch (ch = *(unsigned char *) fmt++) {
    8001a3a2:	872e                	mv	a4,a1
    8001a3a4:	00170593          	add	a1,a4,1
    8001a3a8:	fdd6879b          	addw	a5,a3,-35
    8001a3ac:	0ff7f793          	zext.b	a5,a5
    8001a3b0:	fcff7ee3          	bgeu	t5,a5,8001a38c <vprintfmt.constprop.0+0x56>
    **pstr = ch;
    8001a3b4:	611c                	ld	a5,0(a0)
      fmt = last_fmt;
    8001a3b6:	85c6                	mv	a1,a7
    **pstr = ch;
    8001a3b8:	02500713          	li	a4,37
    8001a3bc:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    8001a3c0:	611c                	ld	a5,0(a0)
    8001a3c2:	0785                	add	a5,a5,1
    8001a3c4:	e11c                	sd	a5,0(a0)
  }
    8001a3c6:	bf59                	j	8001a35c <vprintfmt.constprop.0+0x26>
        precision = precision * 10 + ch - '0';
    8001a3c8:	fd06881b          	addw	a6,a3,-48
        ch = *fmt;
    8001a3cc:	00174683          	lbu	a3,1(a4)
        if (ch < '0' || ch > '9')
    8001a3d0:	47a5                	li	a5,9
    8001a3d2:	fd06871b          	addw	a4,a3,-48
        ch = *fmt;
    8001a3d6:	0006839b          	sext.w	t2,a3
        if (ch < '0' || ch > '9')
    8001a3da:	26e7e763          	bltu	a5,a4,8001a648 <vprintfmt.constprop.0+0x312>
    switch (ch = *(unsigned char *) fmt++) {
    8001a3de:	872e                	mv	a4,a1
        if (ch < '0' || ch > '9')
    8001a3e0:	4425                	li	s0,9
        ch = *fmt;
    8001a3e2:	00174683          	lbu	a3,1(a4)
        precision = precision * 10 + ch - '0';
    8001a3e6:	0028179b          	sllw	a5,a6,0x2
    8001a3ea:	010787bb          	addw	a5,a5,a6
    8001a3ee:	0017979b          	sllw	a5,a5,0x1
    8001a3f2:	007787bb          	addw	a5,a5,t2
        if (ch < '0' || ch > '9')
    8001a3f6:	fd06859b          	addw	a1,a3,-48
      for (precision = 0; ; ++fmt) {
    8001a3fa:	0705                	add	a4,a4,1
        precision = precision * 10 + ch - '0';
    8001a3fc:	fd07881b          	addw	a6,a5,-48
        ch = *fmt;
    8001a400:	0006839b          	sext.w	t2,a3
        if (ch < '0' || ch > '9')
    8001a404:	fcb47fe3          	bgeu	s0,a1,8001a3e2 <vprintfmt.constprop.0+0xac>
      if (width < 0)
    8001a408:	f60fdae3          	bgez	t6,8001a37c <vprintfmt.constprop.0+0x46>
        width = precision, precision = -1;
    8001a40c:	8fc2                	mv	t6,a6
    8001a40e:	587d                	li	a6,-1
    8001a410:	b7b5                	j	8001a37c <vprintfmt.constprop.0+0x46>
        ch = *fmt;
    8001a412:	00174683          	lbu	a3,1(a4)
    switch (ch = *(unsigned char *) fmt++) {
    8001a416:	872e                	mv	a4,a1
      goto reswitch;
    8001a418:	b795                	j	8001a37c <vprintfmt.constprop.0+0x46>
    **pstr = ch;
    8001a41a:	611c                	ld	a5,0(a0)
    8001a41c:	bf71                	j	8001a3b8 <vprintfmt.constprop.0+0x82>
      precision = va_arg(ap, int);
    8001a41e:	00062803          	lw	a6,0(a2)
        ch = *fmt;
    8001a422:	00174683          	lbu	a3,1(a4)
      precision = va_arg(ap, int);
    8001a426:	0621                	add	a2,a2,8
    switch (ch = *(unsigned char *) fmt++) {
    8001a428:	872e                	mv	a4,a1
      goto process_precision;
    8001a42a:	bff9                	j	8001a408 <vprintfmt.constprop.0+0xd2>
    **pstr = ch;
    8001a42c:	611c                	ld	a5,0(a0)
    8001a42e:	03000713          	li	a4,48
    (*pstr)++;
    8001a432:	4841                	li	a6,16
    **pstr = ch;
    8001a434:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    8001a438:	611c                	ld	a5,0(a0)
    8001a43a:	00860693          	add	a3,a2,8
    8001a43e:	00178713          	add	a4,a5,1
    8001a442:	e118                	sd	a4,0(a0)
    **pstr = ch;
    8001a444:	07800713          	li	a4,120
    8001a448:	00e780a3          	sb	a4,1(a5)
    (*pstr)++;
    8001a44c:	611c                	ld	a5,0(a0)
    8001a44e:	0785                	add	a5,a5,1
    8001a450:	e11c                	sd	a5,0(a0)
    return va_arg(*ap, unsigned long);
    8001a452:	6218                	ld	a4,0(a2)
    8001a454:	8636                	mv	a2,a3
    digs[pos++] = num % base;
    8001a456:	03077e33          	remu	t3,a4,a6
    8001a45a:	00410893          	add	a7,sp,4
    8001a45e:	4685                	li	a3,1
    8001a460:	c072                	sw	t3,0(sp)
    if (num < base)
    8001a462:	19076f63          	bltu	a4,a6,8001a600 <vprintfmt.constprop.0+0x2ca>
    num /= base;
    8001a466:	03075733          	divu	a4,a4,a6
    if (num < base)
    8001a46a:	0891                	add	a7,a7,4 # 1004 <_test_table_size+0x1003>
    8001a46c:	83b6                	mv	t2,a3
    digs[pos++] = num % base;
    8001a46e:	2685                	addw	a3,a3,1
    8001a470:	03077e33          	remu	t3,a4,a6
    8001a474:	ffc8ae23          	sw	t3,-4(a7)
    if (num < base)
    8001a478:	ff0777e3          	bgeu	a4,a6,8001a466 <vprintfmt.constprop.0+0x130>
  while (width-- > pos)
    8001a47c:	ffff871b          	addw	a4,t6,-1
    8001a480:	fff6881b          	addw	a6,a3,-1
    8001a484:	01f6da63          	bge	a3,t6,8001a498 <vprintfmt.constprop.0+0x162>
    **pstr = ch;
    8001a488:	00578023          	sb	t0,0(a5)
    (*pstr)++;
    8001a48c:	611c                	ld	a5,0(a0)
  while (width-- > pos)
    8001a48e:	377d                	addw	a4,a4,-1
    (*pstr)++;
    8001a490:	0785                	add	a5,a5,1
    8001a492:	e11c                	sd	a5,0(a0)
  while (width-- > pos)
    8001a494:	fee81ae3          	bne	a6,a4,8001a488 <vprintfmt.constprop.0+0x152>
    8001a498:	038a                	sll	t2,t2,0x2
    8001a49a:	007106b3          	add	a3,sp,t2
    8001a49e:	ffc10893          	add	a7,sp,-4
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8001a4a2:	4825                	li	a6,9
    8001a4a4:	a819                	j	8001a4ba <vprintfmt.constprop.0+0x184>
    8001a4a6:	0307071b          	addw	a4,a4,48
    **pstr = ch;
    8001a4aa:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    8001a4ae:	611c                	ld	a5,0(a0)
  while (pos-- > 0)
    8001a4b0:	16f1                	add	a3,a3,-4
    (*pstr)++;
    8001a4b2:	0785                	add	a5,a5,1
    8001a4b4:	e11c                	sd	a5,0(a0)
  while (pos-- > 0)
    8001a4b6:	ead883e3          	beq	a7,a3,8001a35c <vprintfmt.constprop.0+0x26>
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8001a4ba:	4298                	lw	a4,0(a3)
    8001a4bc:	fee875e3          	bgeu	a6,a4,8001a4a6 <vprintfmt.constprop.0+0x170>
    8001a4c0:	0577071b          	addw	a4,a4,87
    8001a4c4:	b7dd                	j	8001a4aa <vprintfmt.constprop.0+0x174>
  if (lflag >= 2)
    8001a4c6:	4785                	li	a5,1
      precision = va_arg(ap, int);
    8001a4c8:	00860693          	add	a3,a2,8
  if (lflag >= 2)
    8001a4cc:	01c7c463          	blt	a5,t3,8001a4d4 <vprintfmt.constprop.0+0x19e>
  else if (lflag)
    8001a4d0:	120e0a63          	beqz	t3,8001a604 <vprintfmt.constprop.0+0x2ce>
    return va_arg(*ap, long);
    8001a4d4:	6218                	ld	a4,0(a2)
    **pstr = ch;
    8001a4d6:	611c                	ld	a5,0(a0)
      if ((long long) num < 0) {
    8001a4d8:	12074c63          	bltz	a4,8001a610 <vprintfmt.constprop.0+0x2da>
      num = getint(&ap, lflag);
    8001a4dc:	8636                	mv	a2,a3
    8001a4de:	4829                	li	a6,10
    8001a4e0:	bf9d                	j	8001a456 <vprintfmt.constprop.0+0x120>
        ch = *fmt;
    8001a4e2:	00174683          	lbu	a3,1(a4)
      lflag++;
    8001a4e6:	2e05                	addw	t3,t3,1
    switch (ch = *(unsigned char *) fmt++) {
    8001a4e8:	872e                	mv	a4,a1
      goto reswitch;
    8001a4ea:	bd49                	j	8001a37c <vprintfmt.constprop.0+0x46>
    switch (ch = *(unsigned char *) fmt++) {
    8001a4ec:	4841                	li	a6,16
  if (lflag >= 2)
    8001a4ee:	4705                	li	a4,1
    **pstr = ch;
    8001a4f0:	611c                	ld	a5,0(a0)
      precision = va_arg(ap, int);
    8001a4f2:	00860693          	add	a3,a2,8
  if (lflag >= 2)
    8001a4f6:	f5c74ee3          	blt	a4,t3,8001a452 <vprintfmt.constprop.0+0x11c>
  else if (lflag)
    8001a4fa:	f40e1ce3          	bnez	t3,8001a452 <vprintfmt.constprop.0+0x11c>
    return va_arg(*ap, unsigned int);
    8001a4fe:	00066703          	lwu	a4,0(a2)
    8001a502:	8636                	mv	a2,a3
    8001a504:	bf89                	j	8001a456 <vprintfmt.constprop.0+0x120>
      if ((p = va_arg(ap, char *)) == NULL)
    8001a506:	6218                	ld	a4,0(a2)
    8001a508:	0621                	add	a2,a2,8
    8001a50a:	c72d                	beqz	a4,8001a574 <vprintfmt.constprop.0+0x23e>
      if (width > 0 && padc != '-')
    8001a50c:	0df05263          	blez	t6,8001a5d0 <vprintfmt.constprop.0+0x29a>
    8001a510:	02d00793          	li	a5,45
    8001a514:	08f29263          	bne	t0,a5,8001a598 <vprintfmt.constprop.0+0x262>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001a518:	00074783          	lbu	a5,0(a4)
    8001a51c:	c3a1                	beqz	a5,8001a55c <vprintfmt.constprop.0+0x226>
    8001a51e:	10085563          	bgez	a6,8001a628 <vprintfmt.constprop.0+0x2f2>
    **pstr = ch;
    8001a522:	6114                	ld	a3,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001a524:	3ffd                	addw	t6,t6,-1
    8001a526:	88fe                	mv	a7,t6
    **pstr = ch;
    8001a528:	00f68023          	sb	a5,0(a3)
    (*pstr)++;
    8001a52c:	611c                	ld	a5,0(a0)
        p++;
    8001a52e:	00170813          	add	a6,a4,1
    (*pstr)++;
    8001a532:	0785                	add	a5,a5,1
    8001a534:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001a536:	00174683          	lbu	a3,1(a4)
    8001a53a:	ce99                	beqz	a3,8001a558 <vprintfmt.constprop.0+0x222>
        p++;
    8001a53c:	8742                	mv	a4,a6
    **pstr = ch;
    8001a53e:	00d78023          	sb	a3,0(a5)
    (*pstr)++;
    8001a542:	611c                	ld	a5,0(a0)
        p++;
    8001a544:	0705                	add	a4,a4,1
    (*pstr)++;
    8001a546:	0785                	add	a5,a5,1
    8001a548:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001a54a:	00074683          	lbu	a3,0(a4)
    8001a54e:	fae5                	bnez	a3,8001a53e <vprintfmt.constprop.0+0x208>
    8001a550:	40e807bb          	subw	a5,a6,a4
    8001a554:	01178fbb          	addw	t6,a5,a7
      for (; width > 0; width--)
    8001a558:	e1f052e3          	blez	t6,8001a35c <vprintfmt.constprop.0+0x26>
    **pstr = ch;
    8001a55c:	611c                	ld	a5,0(a0)
    8001a55e:	02000713          	li	a4,32
    8001a562:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    8001a566:	611c                	ld	a5,0(a0)
      for (; width > 0; width--)
    8001a568:	3ffd                	addw	t6,t6,-1
    (*pstr)++;
    8001a56a:	0785                	add	a5,a5,1
    8001a56c:	e11c                	sd	a5,0(a0)
      for (; width > 0; width--)
    8001a56e:	fe0f9ae3          	bnez	t6,8001a562 <vprintfmt.constprop.0+0x22c>
    8001a572:	b3ed                	j	8001a35c <vprintfmt.constprop.0+0x26>
        p = "(null)";
    8001a574:	00009717          	auipc	a4,0x9
    8001a578:	01c70713          	add	a4,a4,28 # 80023590 <__func__.1+0x68e8>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001a57c:	02800793          	li	a5,40
      if (width > 0 && padc != '-')
    8001a580:	f9f05fe3          	blez	t6,8001a51e <vprintfmt.constprop.0+0x1e8>
    8001a584:	02d00693          	li	a3,45
        p = "(null)";
    8001a588:	00009717          	auipc	a4,0x9
    8001a58c:	00870713          	add	a4,a4,8 # 80023590 <__func__.1+0x68e8>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001a590:	02800793          	li	a5,40
      if (width > 0 && padc != '-')
    8001a594:	f8d285e3          	beq	t0,a3,8001a51e <vprintfmt.constprop.0+0x1e8>
        for (width -= strnlen(p, precision); width > 0; width--)
    8001a598:	000f8e1b          	sext.w	t3,t6
        p = "(null)";
    8001a59c:	87ba                	mv	a5,a4
  while (n-- && *p)
    8001a59e:	010708b3          	add	a7,a4,a6
    8001a5a2:	00081663          	bnez	a6,8001a5ae <vprintfmt.constprop.0+0x278>
    8001a5a6:	a821                	j	8001a5be <vprintfmt.constprop.0+0x288>
    p++;
    8001a5a8:	0785                	add	a5,a5,1
  while (n-- && *p)
    8001a5aa:	01178563          	beq	a5,a7,8001a5b4 <vprintfmt.constprop.0+0x27e>
    8001a5ae:	0007c683          	lbu	a3,0(a5)
    8001a5b2:	fafd                	bnez	a3,8001a5a8 <vprintfmt.constprop.0+0x272>
  return p - s;
    8001a5b4:	8f99                	sub	a5,a5,a4
        for (width -= strnlen(p, precision); width > 0; width--)
    8001a5b6:	40fe0fbb          	subw	t6,t3,a5
    8001a5ba:	01f05b63          	blez	t6,8001a5d0 <vprintfmt.constprop.0+0x29a>
    **pstr = ch;
    8001a5be:	611c                	ld	a5,0(a0)
    8001a5c0:	00578023          	sb	t0,0(a5)
    (*pstr)++;
    8001a5c4:	611c                	ld	a5,0(a0)
        for (width -= strnlen(p, precision); width > 0; width--)
    8001a5c6:	3ffd                	addw	t6,t6,-1
    (*pstr)++;
    8001a5c8:	0785                	add	a5,a5,1
    8001a5ca:	e11c                	sd	a5,0(a0)
        for (width -= strnlen(p, precision); width > 0; width--)
    8001a5cc:	fe0f9ae3          	bnez	t6,8001a5c0 <vprintfmt.constprop.0+0x28a>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001a5d0:	00074783          	lbu	a5,0(a4)
    8001a5d4:	f7a9                	bnez	a5,8001a51e <vprintfmt.constprop.0+0x1e8>
    8001a5d6:	b359                	j	8001a35c <vprintfmt.constprop.0+0x26>
      if (width < 0)
    8001a5d8:	ffffc793          	not	a5,t6
    8001a5dc:	97fd                	sra	a5,a5,0x3f
    8001a5de:	00fff7b3          	and	a5,t6,a5
        ch = *fmt;
    8001a5e2:	00174683          	lbu	a3,1(a4)
      if (width < 0)
    8001a5e6:	00078f9b          	sext.w	t6,a5
    switch (ch = *(unsigned char *) fmt++) {
    8001a5ea:	872e                	mv	a4,a1
      goto reswitch;
    8001a5ec:	bb41                	j	8001a37c <vprintfmt.constprop.0+0x46>
    **pstr = ch;
    8001a5ee:	4218                	lw	a4,0(a2)
    8001a5f0:	611c                	ld	a5,0(a0)
      putch(va_arg(ap, int), putdat);
    8001a5f2:	0621                	add	a2,a2,8
    **pstr = ch;
    8001a5f4:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    8001a5f8:	611c                	ld	a5,0(a0)
    8001a5fa:	0785                	add	a5,a5,1
    8001a5fc:	e11c                	sd	a5,0(a0)
  }
    8001a5fe:	bbb9                	j	8001a35c <vprintfmt.constprop.0+0x26>
    if (num < base)
    8001a600:	4381                	li	t2,0
    8001a602:	bdad                	j	8001a47c <vprintfmt.constprop.0+0x146>
    return va_arg(*ap, int);
    8001a604:	4218                	lw	a4,0(a2)
    8001a606:	bdc1                	j	8001a4d6 <vprintfmt.constprop.0+0x1a0>
    switch (ch = *(unsigned char *) fmt++) {
    8001a608:	4829                	li	a6,10
    8001a60a:	b5d5                	j	8001a4ee <vprintfmt.constprop.0+0x1b8>
    8001a60c:	4821                	li	a6,8
    8001a60e:	b5c5                	j	8001a4ee <vprintfmt.constprop.0+0x1b8>
    **pstr = ch;
    8001a610:	02d00613          	li	a2,45
    8001a614:	00c78023          	sb	a2,0(a5)
    (*pstr)++;
    8001a618:	611c                	ld	a5,0(a0)
        num = -(long long) num;
    8001a61a:	40e00733          	neg	a4,a4
    8001a61e:	8636                	mv	a2,a3
    (*pstr)++;
    8001a620:	0785                	add	a5,a5,1
    8001a622:	e11c                	sd	a5,0(a0)
        num = -(long long) num;
    8001a624:	4829                	li	a6,10
    8001a626:	bd05                	j	8001a456 <vprintfmt.constprop.0+0x120>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001a628:	58fd                	li	a7,-1
    8001a62a:	387d                	addw	a6,a6,-1 # fff <_test_table_size+0xffe>
    8001a62c:	f31806e3          	beq	a6,a7,8001a558 <vprintfmt.constprop.0+0x222>
    **pstr = ch;
    8001a630:	6114                	ld	a3,0(a0)
        p++;
    8001a632:	0705                	add	a4,a4,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001a634:	3ffd                	addw	t6,t6,-1
    **pstr = ch;
    8001a636:	00f68023          	sb	a5,0(a3)
    (*pstr)++;
    8001a63a:	611c                	ld	a5,0(a0)
    8001a63c:	0785                	add	a5,a5,1
    8001a63e:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001a640:	00074783          	lbu	a5,0(a4)
    8001a644:	f3fd                	bnez	a5,8001a62a <vprintfmt.constprop.0+0x2f4>
    8001a646:	bf09                	j	8001a558 <vprintfmt.constprop.0+0x222>
    switch (ch = *(unsigned char *) fmt++) {
    8001a648:	872e                	mv	a4,a1
    8001a64a:	bb7d                	j	8001a408 <vprintfmt.constprop.0+0xd2>

000000008001a64c <vprintfmt.constprop.1>:
static void vprintfmt(void (*putch)(int, void**), void **putdat, const char *fmt, va_list ap)
    8001a64c:	b6010113          	add	sp,sp,-1184
    8001a650:	14f10713          	add	a4,sp,335
    8001a654:	fc077713          	and	a4,a4,-64
    8001a658:	48913823          	sd	s1,1168(sp)
    8001a65c:	45b13023          	sd	s11,1088(sp)
    8001a660:	48813c23          	sd	s0,1176(sp)
    8001a664:	49213423          	sd	s2,1160(sp)
    8001a668:	49313023          	sd	s3,1152(sp)
    8001a66c:	47413c23          	sd	s4,1144(sp)
    8001a670:	47513823          	sd	s5,1136(sp)
    8001a674:	47613423          	sd	s6,1128(sp)
    8001a678:	47713023          	sd	s7,1120(sp)
    8001a67c:	45813c23          	sd	s8,1112(sp)
    8001a680:	45913823          	sd	s9,1104(sp)
    8001a684:	45a13423          	sd	s10,1096(sp)
    while ((ch = *(unsigned char *) fmt) != '%') {
    8001a688:	02500893          	li	a7,37
  buf[buflen++] = ch;
    8001a68c:	00023697          	auipc	a3,0x23
    8001a690:	a4868693          	add	a3,a3,-1464 # 8003d0d4 <buflen.2>
    8001a694:	00023617          	auipc	a2,0x23
    8001a698:	9ec60613          	add	a2,a2,-1556 # 8003d080 <buf.1>
  if (ch == '\n' || buflen == sizeof(buf))
    8001a69c:	4329                	li	t1,10
  magic_mem[0] = which;
    8001a69e:	04000813          	li	a6,64
  magic_mem[1] = arg0;
    8001a6a2:	4f05                	li	t5,1
  tohost = (uintptr_t)magic_mem;
    8001a6a4:	2c070493          	add	s1,a4,704
    8001a6a8:	0000cd97          	auipc	s11,0xc
    8001a6ac:	958d8d93          	add	s11,s11,-1704 # 80026000 <tohost>
    8001a6b0:	0000c797          	auipc	a5,0xc
    8001a6b4:	99078793          	add	a5,a5,-1648 # 80026040 <fromhost>
    while ((ch = *(unsigned char *) fmt) != '%') {
    8001a6b8:	00054f83          	lbu	t6,0(a0)
    8001a6bc:	000f829b          	sext.w	t0,t6
    8001a6c0:	071f8463          	beq	t6,a7,8001a728 <vprintfmt.constprop.1+0xdc>
      if (ch == '\0')
    8001a6c4:	0a028063          	beqz	t0,8001a764 <vprintfmt.constprop.1+0x118>
  buf[buflen++] = ch;
    8001a6c8:	0006ae83          	lw	t4,0(a3)
      fmt++;
    8001a6cc:	0505                	add	a0,a0,1
  buf[buflen++] = ch;
    8001a6ce:	001e8e1b          	addw	t3,t4,1
    8001a6d2:	9eb2                	add	t4,t4,a2
    8001a6d4:	01c6a023          	sw	t3,0(a3)
    8001a6d8:	01fe8023          	sb	t6,0(t4)
  if (ch == '\n' || buflen == sizeof(buf))
    8001a6dc:	00628463          	beq	t0,t1,8001a6e4 <vprintfmt.constprop.1+0x98>
    8001a6e0:	fd0e1ce3          	bne	t3,a6,8001a6b8 <vprintfmt.constprop.1+0x6c>
  magic_mem[0] = which;
    8001a6e4:	2d073023          	sd	a6,704(a4)
  magic_mem[1] = arg0;
    8001a6e8:	2de73423          	sd	t5,712(a4)
  magic_mem[2] = arg1;
    8001a6ec:	2cc73823          	sd	a2,720(a4)
  magic_mem[3] = arg2;
    8001a6f0:	2dc73c23          	sd	t3,728(a4)
  __sync_synchronize();
    8001a6f4:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001a6f8:	009db023          	sd	s1,0(s11)
  while (fromhost == 0)
    8001a6fc:	0007be03          	ld	t3,0(a5)
    8001a700:	fe0e0ee3          	beqz	t3,8001a6fc <vprintfmt.constprop.1+0xb0>
  fromhost = 0;
    8001a704:	0000ce17          	auipc	t3,0xc
    8001a708:	920e3e23          	sd	zero,-1732(t3) # 80026040 <fromhost>
  __sync_synchronize();
    8001a70c:	0ff0000f          	fence
  return magic_mem[0];
    8001a710:	2c073e03          	ld	t3,704(a4)
    buflen = 0;
    8001a714:	00023e17          	auipc	t3,0x23
    8001a718:	9c0e2023          	sw	zero,-1600(t3) # 8003d0d4 <buflen.2>
    while ((ch = *(unsigned char *) fmt) != '%') {
    8001a71c:	00054f83          	lbu	t6,0(a0)
    8001a720:	000f829b          	sext.w	t0,t6
    8001a724:	fb1f90e3          	bne	t6,a7,8001a6c4 <vprintfmt.constprop.1+0x78>
    switch (ch = *(unsigned char *) fmt++) {
    8001a728:	00154903          	lbu	s2,1(a0)
    fmt++;
    8001a72c:	00150413          	add	s0,a0,1
    8001a730:	82a2                	mv	t0,s0
    padc = ' ';
    8001a732:	02000a13          	li	s4,32
    precision = -1;
    8001a736:	5e7d                	li	t3,-1
    width = -1;
    8001a738:	5efd                	li	t4,-1
    lflag = 0;
    8001a73a:	4381                	li	t2,0
    switch (ch = *(unsigned char *) fmt++) {
    8001a73c:	fdd90f9b          	addw	t6,s2,-35
    8001a740:	0fffff93          	zext.b	t6,t6
    8001a744:	05500993          	li	s3,85
    8001a748:	00128513          	add	a0,t0,1
    8001a74c:	07f9e563          	bltu	s3,t6,8001a7b6 <vprintfmt.constprop.1+0x16a>
    8001a750:	00002997          	auipc	s3,0x2
    8001a754:	6c498993          	add	s3,s3,1732 # 8001ce14 <__func__.1+0x16c>
    8001a758:	0f8a                	sll	t6,t6,0x2
    8001a75a:	9fce                	add	t6,t6,s3
    8001a75c:	000faf83          	lw	t6,0(t6)
    8001a760:	9fce                	add	t6,t6,s3
    8001a762:	8f82                	jr	t6
}
    8001a764:	49813403          	ld	s0,1176(sp)
    8001a768:	49013483          	ld	s1,1168(sp)
    8001a76c:	48813903          	ld	s2,1160(sp)
    8001a770:	48013983          	ld	s3,1152(sp)
    8001a774:	47813a03          	ld	s4,1144(sp)
    8001a778:	47013a83          	ld	s5,1136(sp)
    8001a77c:	46813b03          	ld	s6,1128(sp)
    8001a780:	46013b83          	ld	s7,1120(sp)
    8001a784:	45813c03          	ld	s8,1112(sp)
    8001a788:	45013c83          	ld	s9,1104(sp)
    8001a78c:	44813d03          	ld	s10,1096(sp)
    8001a790:	44013d83          	ld	s11,1088(sp)
    8001a794:	4a010113          	add	sp,sp,1184
    8001a798:	8082                	ret
      padc = '0';
    8001a79a:	8a4a                	mv	s4,s2
      goto reswitch;
    8001a79c:	0012c903          	lbu	s2,1(t0)
    switch (ch = *(unsigned char *) fmt++) {
    8001a7a0:	05500993          	li	s3,85
    8001a7a4:	82aa                	mv	t0,a0
    8001a7a6:	fdd90f9b          	addw	t6,s2,-35
    8001a7aa:	0fffff93          	zext.b	t6,t6
    8001a7ae:	00128513          	add	a0,t0,1
    8001a7b2:	f9f9ffe3          	bgeu	s3,t6,8001a750 <vprintfmt.constprop.1+0x104>
  buf[buflen++] = ch;
    8001a7b6:	00023e97          	auipc	t4,0x23
    8001a7ba:	91ee8e93          	add	t4,t4,-1762 # 8003d0d4 <buflen.2>
    8001a7be:	000ea503          	lw	a0,0(t4)
    8001a7c2:	00023397          	auipc	t2,0x23
    8001a7c6:	8be38393          	add	t2,t2,-1858 # 8003d080 <buf.1>
    8001a7ca:	00150e1b          	addw	t3,a0,1
    8001a7ce:	01cea023          	sw	t3,0(t4)
    8001a7d2:	951e                	add	a0,a0,t2
    8001a7d4:	02500e93          	li	t4,37
    8001a7d8:	01d50023          	sb	t4,0(a0)
  if (ch == '\n' || buflen == sizeof(buf))
    8001a7dc:	04000513          	li	a0,64
    8001a7e0:	5eae0963          	beq	t3,a0,8001add2 <vprintfmt.constprop.1+0x786>
      fmt = last_fmt;
    8001a7e4:	8522                	mv	a0,s0
    8001a7e6:	bdc9                	j	8001a6b8 <vprintfmt.constprop.1+0x6c>
        precision = precision * 10 + ch - '0';
    8001a7e8:	fd090e1b          	addw	t3,s2,-48
        ch = *fmt;
    8001a7ec:	0012c903          	lbu	s2,1(t0)
        if (ch < '0' || ch > '9')
    8001a7f0:	42a5                	li	t0,9
    8001a7f2:	fd09099b          	addw	s3,s2,-48
        ch = *fmt;
    8001a7f6:	00090f9b          	sext.w	t6,s2
        if (ch < '0' || ch > '9')
    8001a7fa:	7932e963          	bltu	t0,s3,8001af8c <vprintfmt.constprop.1+0x940>
    switch (ch = *(unsigned char *) fmt++) {
    8001a7fe:	82aa                	mv	t0,a0
        if (ch < '0' || ch > '9')
    8001a800:	4aa5                	li	s5,9
        ch = *fmt;
    8001a802:	0012c903          	lbu	s2,1(t0)
        precision = precision * 10 + ch - '0';
    8001a806:	002e151b          	sllw	a0,t3,0x2
    8001a80a:	01c5053b          	addw	a0,a0,t3
    8001a80e:	0015151b          	sllw	a0,a0,0x1
    8001a812:	01f5053b          	addw	a0,a0,t6
        if (ch < '0' || ch > '9')
    8001a816:	fd09099b          	addw	s3,s2,-48
      for (precision = 0; ; ++fmt) {
    8001a81a:	0285                	add	t0,t0,1
        precision = precision * 10 + ch - '0';
    8001a81c:	fd050e1b          	addw	t3,a0,-48
        ch = *fmt;
    8001a820:	00090f9b          	sext.w	t6,s2
        if (ch < '0' || ch > '9')
    8001a824:	fd3affe3          	bgeu	s5,s3,8001a802 <vprintfmt.constprop.1+0x1b6>
      if (width < 0)
    8001a828:	f00edae3          	bgez	t4,8001a73c <vprintfmt.constprop.1+0xf0>
        width = precision, precision = -1;
    8001a82c:	8ef2                	mv	t4,t3
    8001a82e:	5e7d                	li	t3,-1
    8001a830:	b731                	j	8001a73c <vprintfmt.constprop.1+0xf0>
        ch = *fmt;
    8001a832:	0012c903          	lbu	s2,1(t0)
    switch (ch = *(unsigned char *) fmt++) {
    8001a836:	82aa                	mv	t0,a0
      goto reswitch;
    8001a838:	b711                	j	8001a73c <vprintfmt.constprop.1+0xf0>
  buf[buflen++] = ch;
    8001a83a:	00023f97          	auipc	t6,0x23
    8001a83e:	89af8f93          	add	t6,t6,-1894 # 8003d0d4 <buflen.2>
    8001a842:	000fae03          	lw	t3,0(t6)
    8001a846:	00023397          	auipc	t2,0x23
    8001a84a:	83a38393          	add	t2,t2,-1990 # 8003d080 <buf.1>
    8001a84e:	001e0e9b          	addw	t4,t3,1
    8001a852:	01dfa023          	sw	t4,0(t6)
    8001a856:	9e1e                	add	t3,t3,t2
    8001a858:	02500f93          	li	t6,37
    8001a85c:	01fe0023          	sb	t6,0(t3)
  if (ch == '\n' || buflen == sizeof(buf))
    8001a860:	04000e13          	li	t3,64
    8001a864:	e5ce9ae3          	bne	t4,t3,8001a6b8 <vprintfmt.constprop.1+0x6c>
  magic_mem[0] = which;
    8001a868:	05d73023          	sd	t4,64(a4)
  magic_mem[1] = arg0;
    8001a86c:	4e05                	li	t3,1
    8001a86e:	05c73423          	sd	t3,72(a4)
  magic_mem[2] = arg1;
    8001a872:	04773823          	sd	t2,80(a4)
  magic_mem[3] = arg2;
    8001a876:	05d73c23          	sd	t4,88(a4)
  __sync_synchronize();
    8001a87a:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001a87e:	04070e13          	add	t3,a4,64
    8001a882:	0000be97          	auipc	t4,0xb
    8001a886:	77cebf23          	sd	t3,1918(t4) # 80026000 <tohost>
  while (fromhost == 0)
    8001a88a:	0000be17          	auipc	t3,0xb
    8001a88e:	7b6e0e13          	add	t3,t3,1974 # 80026040 <fromhost>
    8001a892:	000e3e83          	ld	t4,0(t3)
    8001a896:	fe0e8ee3          	beqz	t4,8001a892 <vprintfmt.constprop.1+0x246>
  fromhost = 0;
    8001a89a:	0000be17          	auipc	t3,0xb
    8001a89e:	7a0e3323          	sd	zero,1958(t3) # 80026040 <fromhost>
  __sync_synchronize();
    8001a8a2:	0ff0000f          	fence
    buflen = 0;
    8001a8a6:	00023e17          	auipc	t3,0x23
    8001a8aa:	820e2723          	sw	zero,-2002(t3) # 8003d0d4 <buflen.2>
  return magic_mem[0];
    8001a8ae:	04073e03          	ld	t3,64(a4)
    buflen = 0;
    8001a8b2:	b519                	j	8001a6b8 <vprintfmt.constprop.1+0x6c>
      precision = va_arg(ap, int);
    8001a8b4:	0005ae03          	lw	t3,0(a1)
        ch = *fmt;
    8001a8b8:	0012c903          	lbu	s2,1(t0)
      precision = va_arg(ap, int);
    8001a8bc:	05a1                	add	a1,a1,8
    switch (ch = *(unsigned char *) fmt++) {
    8001a8be:	82aa                	mv	t0,a0
      goto process_precision;
    8001a8c0:	b7a5                	j	8001a828 <vprintfmt.constprop.1+0x1dc>
  buf[buflen++] = ch;
    8001a8c2:	00023997          	auipc	s3,0x23
    8001a8c6:	81298993          	add	s3,s3,-2030 # 8003d0d4 <buflen.2>
    8001a8ca:	0009af83          	lw	t6,0(s3)
    8001a8ce:	00022397          	auipc	t2,0x22
    8001a8d2:	7b238393          	add	t2,t2,1970 # 8003d080 <buf.1>
    8001a8d6:	03000293          	li	t0,48
    8001a8da:	01f38433          	add	s0,t2,t6
    8001a8de:	001f8e1b          	addw	t3,t6,1
    8001a8e2:	00540023          	sb	t0,0(s0)
    8001a8e6:	01c9a023          	sw	t3,0(s3)
  if (ch == '\n' || buflen == sizeof(buf))
    8001a8ea:	04000413          	li	s0,64
    8001a8ee:	568e0b63          	beq	t3,s0,8001ae64 <vprintfmt.constprop.1+0x818>
  buf[buflen++] = ch;
    8001a8f2:	002f829b          	addw	t0,t6,2
    8001a8f6:	0059a023          	sw	t0,0(s3)
    8001a8fa:	01c38fb3          	add	t6,t2,t3
    8001a8fe:	00028e1b          	sext.w	t3,t0
    8001a902:	07800293          	li	t0,120
    8001a906:	005f8023          	sb	t0,0(t6)
  if (ch == '\n' || buflen == sizeof(buf))
    8001a90a:	508e1963          	bne	t3,s0,8001ae1c <vprintfmt.constprop.1+0x7d0>
  magic_mem[0] = which;
    8001a90e:	11c73023          	sd	t3,256(a4)
  magic_mem[1] = arg0;
    8001a912:	4f85                	li	t6,1
    8001a914:	11f73423          	sd	t6,264(a4)
  magic_mem[2] = arg1;
    8001a918:	10773823          	sd	t2,272(a4)
  magic_mem[3] = arg2;
    8001a91c:	11c73c23          	sd	t3,280(a4)
  __sync_synchronize();
    8001a920:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001a924:	10070e13          	add	t3,a4,256
    8001a928:	0000bf97          	auipc	t6,0xb
    8001a92c:	6dcfbc23          	sd	t3,1752(t6) # 80026000 <tohost>
  while (fromhost == 0)
    8001a930:	0000be17          	auipc	t3,0xb
    8001a934:	710e0e13          	add	t3,t3,1808 # 80026040 <fromhost>
    8001a938:	000e3f83          	ld	t6,0(t3)
    8001a93c:	fe0f8ee3          	beqz	t6,8001a938 <vprintfmt.constprop.1+0x2ec>
  fromhost = 0;
    8001a940:	0000be17          	auipc	t3,0xb
    8001a944:	700e3023          	sd	zero,1792(t3) # 80026040 <fromhost>
  __sync_synchronize();
    8001a948:	0ff0000f          	fence
    buflen = 0;
    8001a94c:	00022e17          	auipc	t3,0x22
    8001a950:	780e2423          	sw	zero,1928(t3) # 8003d0d4 <buflen.2>
  return magic_mem[0];
    8001a954:	10073e03          	ld	t3,256(a4)
    buflen = 0;
    8001a958:	42c1                	li	t0,16
    8001a95a:	4e01                	li	t3,0
    8001a95c:	00858413          	add	s0,a1,8
    8001a960:	a1c9                	j	8001ae22 <vprintfmt.constprop.1+0x7d6>
  if (lflag >= 2)
    8001a962:	4e05                	li	t3,1
      precision = va_arg(ap, int);
    8001a964:	00858293          	add	t0,a1,8
  if (lflag >= 2)
    8001a968:	007e4463          	blt	t3,t2,8001a970 <vprintfmt.constprop.1+0x324>
  else if (lflag)
    8001a96c:	4a038563          	beqz	t2,8001ae16 <vprintfmt.constprop.1+0x7ca>
    return va_arg(*ap, long);
    8001a970:	0005bf83          	ld	t6,0(a1)
  buf[buflen++] = ch;
    8001a974:	00022997          	auipc	s3,0x22
    8001a978:	76098993          	add	s3,s3,1888 # 8003d0d4 <buflen.2>
    8001a97c:	0009ae03          	lw	t3,0(s3)
      if ((long long) num < 0) {
    8001a980:	4a0fc963          	bltz	t6,8001ae32 <vprintfmt.constprop.1+0x7e6>
      num = getint(&ap, lflag);
    8001a984:	8596                	mv	a1,t0
    8001a986:	00022397          	auipc	t2,0x22
    8001a98a:	6fa38393          	add	t2,t2,1786 # 8003d080 <buf.1>
    8001a98e:	42a9                	li	t0,10
    digs[pos++] = num % base;
    8001a990:	025ffab3          	remu	s5,t6,t0
    8001a994:	01410913          	add	s2,sp,20
    8001a998:	4405                	li	s0,1
    8001a99a:	c856                	sw	s5,16(sp)
    if (num < base)
    8001a99c:	425fe963          	bltu	t6,t0,8001adce <vprintfmt.constprop.1+0x782>
    num /= base;
    8001a9a0:	025fdfb3          	divu	t6,t6,t0
    if (num < base)
    8001a9a4:	0911                	add	s2,s2,4
    8001a9a6:	8aa2                	mv	s5,s0
    digs[pos++] = num % base;
    8001a9a8:	2405                	addw	s0,s0,1
    8001a9aa:	025ffb33          	remu	s6,t6,t0
    8001a9ae:	ff692e23          	sw	s6,-4(s2)
    if (num < base)
    8001a9b2:	fe5ff7e3          	bgeu	t6,t0,8001a9a0 <vprintfmt.constprop.1+0x354>
  while (width-- > pos)
    8001a9b6:	fffe8f9b          	addw	t6,t4,-1
    8001a9ba:	fff4091b          	addw	s2,s0,-1
    8001a9be:	07d45c63          	bge	s0,t4,8001aa36 <vprintfmt.constprop.1+0x3ea>
  if (ch == '\n' || buflen == sizeof(buf))
    8001a9c2:	04000413          	li	s0,64
  magic_mem[1] = arg0;
    8001a9c6:	4c05                	li	s8,1
  tohost = (uintptr_t)magic_mem;
    8001a9c8:	0c070b93          	add	s7,a4,192
    8001a9cc:	0000bb17          	auipc	s6,0xb
    8001a9d0:	634b0b13          	add	s6,s6,1588 # 80026000 <tohost>
    8001a9d4:	0000be97          	auipc	t4,0xb
    8001a9d8:	66ce8e93          	add	t4,t4,1644 # 80026040 <fromhost>
    8001a9dc:	a021                	j	8001a9e4 <vprintfmt.constprop.1+0x398>
  while (width-- > pos)
    8001a9de:	3ffd                	addw	t6,t6,-1
    8001a9e0:	05f90b63          	beq	s2,t6,8001aa36 <vprintfmt.constprop.1+0x3ea>
  buf[buflen++] = ch;
    8001a9e4:	001e029b          	addw	t0,t3,1
    8001a9e8:	9e1e                	add	t3,t3,t2
    8001a9ea:	014e0023          	sb	s4,0(t3)
    8001a9ee:	0059a023          	sw	t0,0(s3)
    8001a9f2:	00028e1b          	sext.w	t3,t0
  if (ch == '\n' || buflen == sizeof(buf))
    8001a9f6:	fe8e14e3          	bne	t3,s0,8001a9de <vprintfmt.constprop.1+0x392>
  magic_mem[0] = which;
    8001a9fa:	e360                	sd	s0,192(a4)
  magic_mem[1] = arg0;
    8001a9fc:	0d873423          	sd	s8,200(a4)
  magic_mem[2] = arg1;
    8001aa00:	0c773823          	sd	t2,208(a4)
  magic_mem[3] = arg2;
    8001aa04:	ef60                	sd	s0,216(a4)
  __sync_synchronize();
    8001aa06:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001aa0a:	017b3023          	sd	s7,0(s6)
  while (fromhost == 0)
    8001aa0e:	000ebe03          	ld	t3,0(t4)
    8001aa12:	fe0e0ee3          	beqz	t3,8001aa0e <vprintfmt.constprop.1+0x3c2>
  fromhost = 0;
    8001aa16:	0000be17          	auipc	t3,0xb
    8001aa1a:	620e3523          	sd	zero,1578(t3) # 80026040 <fromhost>
  __sync_synchronize();
    8001aa1e:	0ff0000f          	fence
  return magic_mem[0];
    8001aa22:	0c073e03          	ld	t3,192(a4)
  while (width-- > pos)
    8001aa26:	3ffd                	addw	t6,t6,-1
    buflen = 0;
    8001aa28:	00022e17          	auipc	t3,0x22
    8001aa2c:	6a0e2623          	sw	zero,1708(t3) # 8003d0d4 <buflen.2>
    8001aa30:	4e01                	li	t3,0
  while (width-- > pos)
    8001aa32:	fbf919e3          	bne	s2,t6,8001a9e4 <vprintfmt.constprop.1+0x398>
    8001aa36:	0a8a                	sll	s5,s5,0x2
    8001aa38:	010a8413          	add	s0,s5,16 # 20010 <_test_table_size+0x2000f>
    8001aa3c:	002402b3          	add	t0,s0,sp
    8001aa40:	00c10a93          	add	s5,sp,12
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8001aa44:	4a25                	li	s4,9
  magic_mem[0] = which;
    8001aa46:	04000913          	li	s2,64
  magic_mem[1] = arg0;
    8001aa4a:	4c85                	li	s9,1
  tohost = (uintptr_t)magic_mem;
    8001aa4c:	08070c13          	add	s8,a4,128
    8001aa50:	0000bb97          	auipc	s7,0xb
    8001aa54:	5b0b8b93          	add	s7,s7,1456 # 80026000 <tohost>
    8001aa58:	0000bf97          	auipc	t6,0xb
    8001aa5c:	5e8f8f93          	add	t6,t6,1512 # 80026040 <fromhost>
  if (ch == '\n' || buflen == sizeof(buf))
    8001aa60:	4b29                	li	s6,10
    8001aa62:	a831                	j	8001aa7e <vprintfmt.constprop.1+0x432>
  buf[buflen++] = ch;
    8001aa64:	9e1e                	add	t3,t3,t2
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8001aa66:	030e8e9b          	addw	t4,t4,48
  buf[buflen++] = ch;
    8001aa6a:	0089a023          	sw	s0,0(s3)
    8001aa6e:	01de0023          	sb	t4,0(t3)
  if (ch == '\n' || buflen == sizeof(buf))
    8001aa72:	8e22                	mv	t3,s0
    8001aa74:	23240663          	beq	s0,s2,8001aca0 <vprintfmt.constprop.1+0x654>
  while (pos-- > 0)
    8001aa78:	12f1                	add	t0,t0,-4
    8001aa7a:	c25a8fe3          	beq	s5,t0,8001a6b8 <vprintfmt.constprop.1+0x6c>
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8001aa7e:	0002ae83          	lw	t4,0(t0)
  buf[buflen++] = ch;
    8001aa82:	001e041b          	addw	s0,t3,1
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8001aa86:	fdda7fe3          	bgeu	s4,t4,8001aa64 <vprintfmt.constprop.1+0x418>
    8001aa8a:	057e8e9b          	addw	t4,t4,87
  buf[buflen++] = ch;
    8001aa8e:	9e1e                	add	t3,t3,t2
    8001aa90:	0089a023          	sw	s0,0(s3)
    8001aa94:	01de0023          	sb	t4,0(t3)
  if (ch == '\n' || buflen == sizeof(buf))
    8001aa98:	fd6e9de3          	bne	t4,s6,8001aa72 <vprintfmt.constprop.1+0x426>
  magic_mem[0] = which;
    8001aa9c:	09273023          	sd	s2,128(a4)
  magic_mem[1] = arg0;
    8001aaa0:	09973423          	sd	s9,136(a4)
  magic_mem[2] = arg1;
    8001aaa4:	08773823          	sd	t2,144(a4)
  magic_mem[3] = arg2;
    8001aaa8:	ef40                	sd	s0,152(a4)
  __sync_synchronize();
    8001aaaa:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001aaae:	018bb023          	sd	s8,0(s7)
  while (fromhost == 0)
    8001aab2:	000fbe03          	ld	t3,0(t6)
    8001aab6:	fe0e0ee3          	beqz	t3,8001aab2 <vprintfmt.constprop.1+0x466>
  fromhost = 0;
    8001aaba:	0000be17          	auipc	t3,0xb
    8001aabe:	580e3323          	sd	zero,1414(t3) # 80026040 <fromhost>
  __sync_synchronize();
    8001aac2:	0ff0000f          	fence
  return magic_mem[0];
    8001aac6:	08073e03          	ld	t3,128(a4)
    buflen = 0;
    8001aaca:	00022e17          	auipc	t3,0x22
    8001aace:	600e2523          	sw	zero,1546(t3) # 8003d0d4 <buflen.2>
    8001aad2:	4e01                	li	t3,0
    8001aad4:	b755                	j	8001aa78 <vprintfmt.constprop.1+0x42c>
        ch = *fmt;
    8001aad6:	0012c903          	lbu	s2,1(t0)
      lflag++;
    8001aada:	2385                	addw	t2,t2,1
    switch (ch = *(unsigned char *) fmt++) {
    8001aadc:	82aa                	mv	t0,a0
      goto reswitch;
    8001aade:	b9b9                	j	8001a73c <vprintfmt.constprop.1+0xf0>
    switch (ch = *(unsigned char *) fmt++) {
    8001aae0:	42c1                	li	t0,16
  buf[buflen++] = ch;
    8001aae2:	00022997          	auipc	s3,0x22
    8001aae6:	5f298993          	add	s3,s3,1522 # 8003d0d4 <buflen.2>
  if (lflag >= 2)
    8001aaea:	4f85                	li	t6,1
  buf[buflen++] = ch;
    8001aaec:	0009ae03          	lw	t3,0(s3)
      precision = va_arg(ap, int);
    8001aaf0:	00858413          	add	s0,a1,8
  if (lflag >= 2)
    8001aaf4:	227fc863          	blt	t6,t2,8001ad24 <vprintfmt.constprop.1+0x6d8>
  else if (lflag)
    8001aaf8:	4e039b63          	bnez	t2,8001afee <vprintfmt.constprop.1+0x9a2>
    return va_arg(*ap, unsigned int);
    8001aafc:	0005ef83          	lwu	t6,0(a1)
    8001ab00:	00022397          	auipc	t2,0x22
    8001ab04:	58038393          	add	t2,t2,1408 # 8003d080 <buf.1>
    8001ab08:	85a2                	mv	a1,s0
    8001ab0a:	b559                	j	8001a990 <vprintfmt.constprop.1+0x344>
      if ((p = va_arg(ap, char *)) == NULL)
    8001ab0c:	0005b903          	ld	s2,0(a1)
    8001ab10:	00858413          	add	s0,a1,8
    8001ab14:	3a090563          	beqz	s2,8001aebe <vprintfmt.constprop.1+0x872>
      if (width > 0 && padc != '-')
    8001ab18:	01d05c63          	blez	t4,8001ab30 <vprintfmt.constprop.1+0x4e4>
    8001ab1c:	02d00593          	li	a1,45
    8001ab20:	3aba1e63          	bne	s4,a1,8001aedc <vprintfmt.constprop.1+0x890>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001ab24:	00094583          	lbu	a1,0(s2)
    8001ab28:	00058f9b          	sext.w	t6,a1
    8001ab2c:	e981                	bnez	a1,8001ab3c <vprintfmt.constprop.1+0x4f0>
    8001ab2e:	ac19                	j	8001ad44 <vprintfmt.constprop.1+0x6f8>
    8001ab30:	00094583          	lbu	a1,0(s2)
    8001ab34:	00058f9b          	sext.w	t6,a1
    8001ab38:	1e058e63          	beqz	a1,8001ad34 <vprintfmt.constprop.1+0x6e8>
  tohost = (uintptr_t)magic_mem;
    8001ab3c:	20070c93          	add	s9,a4,512
    8001ab40:	e466                	sd	s9,8(sp)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001ab42:	5c7d                	li	s8,-1
  buf[buflen++] = ch;
    8001ab44:	00022297          	auipc	t0,0x22
    8001ab48:	59028293          	add	t0,t0,1424 # 8003d0d4 <buflen.2>
    8001ab4c:	00022a17          	auipc	s4,0x22
    8001ab50:	534a0a13          	add	s4,s4,1332 # 8003d080 <buf.1>
  if (ch == '\n' || buflen == sizeof(buf))
    8001ab54:	4ba9                	li	s7,10
  magic_mem[0] = which;
    8001ab56:	04000b13          	li	s6,64
  magic_mem[1] = arg0;
    8001ab5a:	4d05                	li	s10,1
    8001ab5c:	0000b997          	auipc	s3,0xb
    8001ab60:	4e498993          	add	s3,s3,1252 # 80026040 <fromhost>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001ab64:	040e4163          	bltz	t3,8001aba6 <vprintfmt.constprop.1+0x55a>
    8001ab68:	fffe0c9b          	addw	s9,t3,-1
    8001ab6c:	1d8c8a63          	beq	s9,s8,8001ad40 <vprintfmt.constprop.1+0x6f4>
  buf[buflen++] = ch;
    8001ab70:	0002aa83          	lw	s5,0(t0)
    8001ab74:	001a839b          	addw	t2,s5,1
    8001ab78:	9ad2                	add	s5,s5,s4
    8001ab7a:	0072a023          	sw	t2,0(t0)
    8001ab7e:	00ba8023          	sb	a1,0(s5)
  if (ch == '\n' || buflen == sizeof(buf))
    8001ab82:	037f8e63          	beq	t6,s7,8001abbe <vprintfmt.constprop.1+0x572>
    8001ab86:	03638c63          	beq	t2,s6,8001abbe <vprintfmt.constprop.1+0x572>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001ab8a:	00194583          	lbu	a1,1(s2)
    8001ab8e:	3efd                	addw	t4,t4,-1
    8001ab90:	83f6                	mv	t2,t4
        p++;
    8001ab92:	0905                	add	s2,s2,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001ab94:	00058f9b          	sext.w	t6,a1
    8001ab98:	1a058463          	beqz	a1,8001ad40 <vprintfmt.constprop.1+0x6f4>
    8001ab9c:	100e4563          	bltz	t3,8001aca6 <vprintfmt.constprop.1+0x65a>
    8001aba0:	8e66                	mv	t3,s9
    8001aba2:	fc0e53e3          	bgez	t3,8001ab68 <vprintfmt.constprop.1+0x51c>
  buf[buflen++] = ch;
    8001aba6:	0002aa83          	lw	s5,0(t0)
    8001abaa:	8cf2                	mv	s9,t3
    8001abac:	001a839b          	addw	t2,s5,1
    8001abb0:	9ad2                	add	s5,s5,s4
    8001abb2:	0072a023          	sw	t2,0(t0)
    8001abb6:	00ba8023          	sb	a1,0(s5)
  if (ch == '\n' || buflen == sizeof(buf))
    8001abba:	fd7f96e3          	bne	t6,s7,8001ab86 <vprintfmt.constprop.1+0x53a>
  magic_mem[0] = which;
    8001abbe:	21673023          	sd	s6,512(a4)
  magic_mem[1] = arg0;
    8001abc2:	21a73423          	sd	s10,520(a4)
  magic_mem[2] = arg1;
    8001abc6:	21473823          	sd	s4,528(a4)
  magic_mem[3] = arg2;
    8001abca:	20773c23          	sd	t2,536(a4)
  __sync_synchronize();
    8001abce:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001abd2:	6fa2                	ld	t6,8(sp)
    8001abd4:	0000b597          	auipc	a1,0xb
    8001abd8:	42c58593          	add	a1,a1,1068 # 80026000 <tohost>
    8001abdc:	01f5b023          	sd	t6,0(a1)
  while (fromhost == 0)
    8001abe0:	0009b583          	ld	a1,0(s3)
    8001abe4:	ddf5                	beqz	a1,8001abe0 <vprintfmt.constprop.1+0x594>
  fromhost = 0;
    8001abe6:	0000b597          	auipc	a1,0xb
    8001abea:	4405bd23          	sd	zero,1114(a1) # 80026040 <fromhost>
  __sync_synchronize();
    8001abee:	0ff0000f          	fence
  return magic_mem[0];
    8001abf2:	20073583          	ld	a1,512(a4)
    buflen = 0;
    8001abf6:	00022597          	auipc	a1,0x22
    8001abfa:	4c05af23          	sw	zero,1246(a1) # 8003d0d4 <buflen.2>
    8001abfe:	b771                	j	8001ab8a <vprintfmt.constprop.1+0x53e>
      if (width < 0)
    8001ac00:	fffecf93          	not	t6,t4
    8001ac04:	43ffdf93          	sra	t6,t6,0x3f
    8001ac08:	01fefeb3          	and	t4,t4,t6
        ch = *fmt;
    8001ac0c:	0012c903          	lbu	s2,1(t0)
      if (width < 0)
    8001ac10:	2e81                	sext.w	t4,t4
    switch (ch = *(unsigned char *) fmt++) {
    8001ac12:	82aa                	mv	t0,a0
      goto reswitch;
    8001ac14:	b625                	j	8001a73c <vprintfmt.constprop.1+0xf0>
  buf[buflen++] = ch;
    8001ac16:	00022297          	auipc	t0,0x22
    8001ac1a:	4be28293          	add	t0,t0,1214 # 8003d0d4 <buflen.2>
    8001ac1e:	0002ae83          	lw	t4,0(t0)
      putch(va_arg(ap, int), putdat);
    8001ac22:	0005af83          	lw	t6,0(a1)
  buf[buflen++] = ch;
    8001ac26:	00022397          	auipc	t2,0x22
    8001ac2a:	45a38393          	add	t2,t2,1114 # 8003d080 <buf.1>
    8001ac2e:	001e8e1b          	addw	t3,t4,1
    8001ac32:	9e9e                	add	t4,t4,t2
    8001ac34:	01fe8023          	sb	t6,0(t4)
    8001ac38:	01c2a023          	sw	t3,0(t0)
  if (ch == '\n' || buflen == sizeof(buf))
    8001ac3c:	4ea9                	li	t4,10
    8001ac3e:	01df8863          	beq	t6,t4,8001ac4e <vprintfmt.constprop.1+0x602>
    8001ac42:	04000e93          	li	t4,64
    8001ac46:	01de0463          	beq	t3,t4,8001ac4e <vprintfmt.constprop.1+0x602>
      putch(va_arg(ap, int), putdat);
    8001ac4a:	05a1                	add	a1,a1,8
    8001ac4c:	b4b5                	j	8001a6b8 <vprintfmt.constprop.1+0x6c>
  magic_mem[0] = which;
    8001ac4e:	04000e93          	li	t4,64
    8001ac52:	29d73023          	sd	t4,640(a4)
  magic_mem[1] = arg0;
    8001ac56:	4e85                	li	t4,1
    8001ac58:	29d73423          	sd	t4,648(a4)
  magic_mem[2] = arg1;
    8001ac5c:	28773823          	sd	t2,656(a4)
  magic_mem[3] = arg2;
    8001ac60:	29c73c23          	sd	t3,664(a4)
  __sync_synchronize();
    8001ac64:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001ac68:	28070e13          	add	t3,a4,640
    8001ac6c:	0000be97          	auipc	t4,0xb
    8001ac70:	39ceba23          	sd	t3,916(t4) # 80026000 <tohost>
  while (fromhost == 0)
    8001ac74:	0000be17          	auipc	t3,0xb
    8001ac78:	3cce0e13          	add	t3,t3,972 # 80026040 <fromhost>
    8001ac7c:	000e3e83          	ld	t4,0(t3)
    8001ac80:	fe0e8ee3          	beqz	t4,8001ac7c <vprintfmt.constprop.1+0x630>
  fromhost = 0;
    8001ac84:	0000be17          	auipc	t3,0xb
    8001ac88:	3a0e3e23          	sd	zero,956(t3) # 80026040 <fromhost>
  __sync_synchronize();
    8001ac8c:	0ff0000f          	fence
    buflen = 0;
    8001ac90:	00022e17          	auipc	t3,0x22
    8001ac94:	440e2223          	sw	zero,1092(t3) # 8003d0d4 <buflen.2>
  return magic_mem[0];
    8001ac98:	28073e03          	ld	t3,640(a4)
      putch(va_arg(ap, int), putdat);
    8001ac9c:	05a1                	add	a1,a1,8
    8001ac9e:	bc29                	j	8001a6b8 <vprintfmt.constprop.1+0x6c>
    8001aca0:	04000413          	li	s0,64
    8001aca4:	bbe5                	j	8001aa9c <vprintfmt.constprop.1+0x450>
        p++;
    8001aca6:	89ca                	mv	s3,s2
  if (ch == '\n' || buflen == sizeof(buf))
    8001aca8:	4b29                	li	s6,10
  magic_mem[0] = which;
    8001acaa:	04000a93          	li	s5,64
  magic_mem[1] = arg0;
    8001acae:	4c85                	li	s9,1
  tohost = (uintptr_t)magic_mem;
    8001acb0:	20070c13          	add	s8,a4,512
    8001acb4:	0000bb97          	auipc	s7,0xb
    8001acb8:	34cb8b93          	add	s7,s7,844 # 80026000 <tohost>
    8001acbc:	0000be97          	auipc	t4,0xb
    8001acc0:	384e8e93          	add	t4,t4,900 # 80026040 <fromhost>
    8001acc4:	a039                	j	8001acd2 <vprintfmt.constprop.1+0x686>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001acc6:	0019c583          	lbu	a1,1(s3)
        p++;
    8001acca:	0985                	add	s3,s3,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001accc:	00058f9b          	sext.w	t6,a1
    8001acd0:	c5a5                	beqz	a1,8001ad38 <vprintfmt.constprop.1+0x6ec>
  buf[buflen++] = ch;
    8001acd2:	0002ad03          	lw	s10,0(t0)
    8001acd6:	001d0e1b          	addw	t3,s10,1
    8001acda:	9d52                	add	s10,s10,s4
    8001acdc:	01c2a023          	sw	t3,0(t0)
    8001ace0:	00bd0023          	sb	a1,0(s10)
  if (ch == '\n' || buflen == sizeof(buf))
    8001ace4:	016f8463          	beq	t6,s6,8001acec <vprintfmt.constprop.1+0x6a0>
    8001ace8:	fd5e1fe3          	bne	t3,s5,8001acc6 <vprintfmt.constprop.1+0x67a>
  magic_mem[0] = which;
    8001acec:	21573023          	sd	s5,512(a4)
  magic_mem[1] = arg0;
    8001acf0:	21973423          	sd	s9,520(a4)
  magic_mem[2] = arg1;
    8001acf4:	21473823          	sd	s4,528(a4)
  magic_mem[3] = arg2;
    8001acf8:	21c73c23          	sd	t3,536(a4)
  __sync_synchronize();
    8001acfc:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001ad00:	018bb023          	sd	s8,0(s7)
  while (fromhost == 0)
    8001ad04:	000eb583          	ld	a1,0(t4)
    8001ad08:	ddf5                	beqz	a1,8001ad04 <vprintfmt.constprop.1+0x6b8>
  fromhost = 0;
    8001ad0a:	0000b597          	auipc	a1,0xb
    8001ad0e:	3205bb23          	sd	zero,822(a1) # 80026040 <fromhost>
  __sync_synchronize();
    8001ad12:	0ff0000f          	fence
  return magic_mem[0];
    8001ad16:	20073583          	ld	a1,512(a4)
    buflen = 0;
    8001ad1a:	00022597          	auipc	a1,0x22
    8001ad1e:	3a05ad23          	sw	zero,954(a1) # 8003d0d4 <buflen.2>
    8001ad22:	b755                	j	8001acc6 <vprintfmt.constprop.1+0x67a>
    return va_arg(*ap, unsigned long long);
    8001ad24:	0005bf83          	ld	t6,0(a1)
    8001ad28:	00022397          	auipc	t2,0x22
    8001ad2c:	35838393          	add	t2,t2,856 # 8003d080 <buf.1>
    8001ad30:	85a2                	mv	a1,s0
    8001ad32:	b9b9                	j	8001a990 <vprintfmt.constprop.1+0x344>
      if ((p = va_arg(ap, char *)) == NULL)
    8001ad34:	85a2                	mv	a1,s0
    8001ad36:	b249                	j	8001a6b8 <vprintfmt.constprop.1+0x6c>
    8001ad38:	01238ebb          	addw	t4,t2,s2
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001ad3c:	413e8ebb          	subw	t4,t4,s3
      for (; width > 0; width--)
    8001ad40:	ffd05ae3          	blez	t4,8001ad34 <vprintfmt.constprop.1+0x6e8>
  buf[buflen++] = ch;
    8001ad44:	00022997          	auipc	s3,0x22
    8001ad48:	39098993          	add	s3,s3,912 # 8003d0d4 <buflen.2>
    8001ad4c:	0009a583          	lw	a1,0(s3)
    8001ad50:	00022397          	auipc	t2,0x22
    8001ad54:	33038393          	add	t2,t2,816 # 8003d080 <buf.1>
    8001ad58:	02000913          	li	s2,32
  if (ch == '\n' || buflen == sizeof(buf))
    8001ad5c:	04000293          	li	t0,64
  magic_mem[1] = arg0;
    8001ad60:	4b05                	li	s6,1
  tohost = (uintptr_t)magic_mem;
    8001ad62:	1c070a93          	add	s5,a4,448
    8001ad66:	0000ba17          	auipc	s4,0xb
    8001ad6a:	29aa0a13          	add	s4,s4,666 # 80026000 <tohost>
    8001ad6e:	0000bf97          	auipc	t6,0xb
    8001ad72:	2d2f8f93          	add	t6,t6,722 # 80026040 <fromhost>
    8001ad76:	a021                	j	8001ad7e <vprintfmt.constprop.1+0x732>
      for (; width > 0; width--)
    8001ad78:	3efd                	addw	t4,t4,-1
    8001ad7a:	fa0e8de3          	beqz	t4,8001ad34 <vprintfmt.constprop.1+0x6e8>
  buf[buflen++] = ch;
    8001ad7e:	00158e1b          	addw	t3,a1,1
    8001ad82:	959e                	add	a1,a1,t2
    8001ad84:	01258023          	sb	s2,0(a1)
    8001ad88:	01c9a023          	sw	t3,0(s3)
    8001ad8c:	000e059b          	sext.w	a1,t3
  if (ch == '\n' || buflen == sizeof(buf))
    8001ad90:	fe5594e3          	bne	a1,t0,8001ad78 <vprintfmt.constprop.1+0x72c>
  magic_mem[0] = which;
    8001ad94:	1c573023          	sd	t0,448(a4)
  magic_mem[1] = arg0;
    8001ad98:	1d673423          	sd	s6,456(a4)
  magic_mem[2] = arg1;
    8001ad9c:	1c773823          	sd	t2,464(a4)
  magic_mem[3] = arg2;
    8001ada0:	1c573c23          	sd	t0,472(a4)
  __sync_synchronize();
    8001ada4:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001ada8:	015a3023          	sd	s5,0(s4)
  while (fromhost == 0)
    8001adac:	000fb583          	ld	a1,0(t6)
    8001adb0:	ddf5                	beqz	a1,8001adac <vprintfmt.constprop.1+0x760>
  fromhost = 0;
    8001adb2:	0000b597          	auipc	a1,0xb
    8001adb6:	2805b723          	sd	zero,654(a1) # 80026040 <fromhost>
  __sync_synchronize();
    8001adba:	0ff0000f          	fence
  return magic_mem[0];
    8001adbe:	1c073583          	ld	a1,448(a4)
    buflen = 0;
    8001adc2:	00022597          	auipc	a1,0x22
    8001adc6:	3005a923          	sw	zero,786(a1) # 8003d0d4 <buflen.2>
    8001adca:	4581                	li	a1,0
    8001adcc:	b775                	j	8001ad78 <vprintfmt.constprop.1+0x72c>
    if (num < base)
    8001adce:	4a81                	li	s5,0
    8001add0:	b6dd                	j	8001a9b6 <vprintfmt.constprop.1+0x36a>
  magic_mem[0] = which;
    8001add2:	01c73023          	sd	t3,0(a4)
  magic_mem[1] = arg0;
    8001add6:	4505                	li	a0,1
    8001add8:	e708                	sd	a0,8(a4)
  magic_mem[2] = arg1;
    8001adda:	00773823          	sd	t2,16(a4)
  magic_mem[3] = arg2;
    8001adde:	01c73c23          	sd	t3,24(a4)
  __sync_synchronize();
    8001ade2:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001ade6:	0000be17          	auipc	t3,0xb
    8001adea:	25ae0e13          	add	t3,t3,602 # 80026040 <fromhost>
    8001adee:	0000b517          	auipc	a0,0xb
    8001adf2:	20e53923          	sd	a4,530(a0) # 80026000 <tohost>
  while (fromhost == 0)
    8001adf6:	000e3503          	ld	a0,0(t3)
    8001adfa:	dd75                	beqz	a0,8001adf6 <vprintfmt.constprop.1+0x7aa>
  fromhost = 0;
    8001adfc:	0000b517          	auipc	a0,0xb
    8001ae00:	24053223          	sd	zero,580(a0) # 80026040 <fromhost>
  __sync_synchronize();
    8001ae04:	0ff0000f          	fence
  return magic_mem[0];
    8001ae08:	6308                	ld	a0,0(a4)
    buflen = 0;
    8001ae0a:	00022517          	auipc	a0,0x22
    8001ae0e:	2c052523          	sw	zero,714(a0) # 8003d0d4 <buflen.2>
      fmt = last_fmt;
    8001ae12:	8522                	mv	a0,s0
    8001ae14:	b055                	j	8001a6b8 <vprintfmt.constprop.1+0x6c>
    return va_arg(*ap, int);
    8001ae16:	0005af83          	lw	t6,0(a1)
    8001ae1a:	bea9                	j	8001a974 <vprintfmt.constprop.1+0x328>
    8001ae1c:	42c1                	li	t0,16
    8001ae1e:	00858413          	add	s0,a1,8
    return va_arg(*ap, unsigned long);
    8001ae22:	0005bf83          	ld	t6,0(a1)
    8001ae26:	85a2                	mv	a1,s0
    8001ae28:	b6a5                	j	8001a990 <vprintfmt.constprop.1+0x344>
    switch (ch = *(unsigned char *) fmt++) {
    8001ae2a:	42a9                	li	t0,10
    8001ae2c:	b95d                	j	8001aae2 <vprintfmt.constprop.1+0x496>
    8001ae2e:	42a1                	li	t0,8
    8001ae30:	b94d                	j	8001aae2 <vprintfmt.constprop.1+0x496>
  buf[buflen++] = ch;
    8001ae32:	001e059b          	addw	a1,t3,1
    8001ae36:	00022397          	auipc	t2,0x22
    8001ae3a:	24a38393          	add	t2,t2,586 # 8003d080 <buf.1>
    8001ae3e:	01c38433          	add	s0,t2,t3
    8001ae42:	00b9a023          	sw	a1,0(s3)
    8001ae46:	00058e1b          	sext.w	t3,a1
    8001ae4a:	02d00593          	li	a1,45
    8001ae4e:	00b40023          	sb	a1,0(s0)
  if (ch == '\n' || buflen == sizeof(buf))
    8001ae52:	04000593          	li	a1,64
    8001ae56:	12be0d63          	beq	t3,a1,8001af90 <vprintfmt.constprop.1+0x944>
        num = -(long long) num;
    8001ae5a:	8596                	mv	a1,t0
    8001ae5c:	41f00fb3          	neg	t6,t6
    8001ae60:	42a9                	li	t0,10
    8001ae62:	b63d                	j	8001a990 <vprintfmt.constprop.1+0x344>
  magic_mem[0] = which;
    8001ae64:	15c73023          	sd	t3,320(a4)
  magic_mem[1] = arg0;
    8001ae68:	4f85                	li	t6,1
    8001ae6a:	15f73423          	sd	t6,328(a4)
  magic_mem[2] = arg1;
    8001ae6e:	14773823          	sd	t2,336(a4)
  magic_mem[3] = arg2;
    8001ae72:	15c73c23          	sd	t3,344(a4)
  __sync_synchronize();
    8001ae76:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001ae7a:	14070e13          	add	t3,a4,320
    8001ae7e:	0000bf97          	auipc	t6,0xb
    8001ae82:	19cfb123          	sd	t3,386(t6) # 80026000 <tohost>
  while (fromhost == 0)
    8001ae86:	0000be17          	auipc	t3,0xb
    8001ae8a:	1bae0e13          	add	t3,t3,442 # 80026040 <fromhost>
    8001ae8e:	000e3f83          	ld	t6,0(t3)
    8001ae92:	fe0f8ee3          	beqz	t6,8001ae8e <vprintfmt.constprop.1+0x842>
  fromhost = 0;
    8001ae96:	0000be17          	auipc	t3,0xb
    8001ae9a:	1a0e3523          	sd	zero,426(t3) # 80026040 <fromhost>
  __sync_synchronize();
    8001ae9e:	0ff0000f          	fence
  return magic_mem[0];
    8001aea2:	14073e03          	ld	t3,320(a4)
  buf[buflen++] = ch;
    8001aea6:	42c1                	li	t0,16
    8001aea8:	4e05                	li	t3,1
    8001aeaa:	01c9a023          	sw	t3,0(s3)
    8001aeae:	07800e13          	li	t3,120
    8001aeb2:	01c38023          	sb	t3,0(t2)
  if (ch == '\n' || buflen == sizeof(buf))
    8001aeb6:	00858413          	add	s0,a1,8
  buf[buflen++] = ch;
    8001aeba:	4e05                	li	t3,1
    8001aebc:	b79d                	j	8001ae22 <vprintfmt.constprop.1+0x7d6>
      if (width > 0 && padc != '-')
    8001aebe:	01d05663          	blez	t4,8001aeca <vprintfmt.constprop.1+0x87e>
    8001aec2:	02d00593          	li	a1,45
    8001aec6:	10ba1b63          	bne	s4,a1,8001afdc <vprintfmt.constprop.1+0x990>
        p = "(null)";
    8001aeca:	00008917          	auipc	s2,0x8
    8001aece:	6c690913          	add	s2,s2,1734 # 80023590 <__func__.1+0x68e8>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8001aed2:	02800593          	li	a1,40
    8001aed6:	02800f93          	li	t6,40
    8001aeda:	b18d                	j	8001ab3c <vprintfmt.constprop.1+0x4f0>
        for (width -= strnlen(p, precision); width > 0; width--)
    8001aedc:	000e8f9b          	sext.w	t6,t4
  while (n-- && *p)
    8001aee0:	020e0363          	beqz	t3,8001af06 <vprintfmt.constprop.1+0x8ba>
        p = "(null)";
    8001aee4:	85ca                	mv	a1,s2
  while (n-- && *p)
    8001aee6:	01c902b3          	add	t0,s2,t3
    8001aeea:	a021                	j	8001aef2 <vprintfmt.constprop.1+0x8a6>
    p++;
    8001aeec:	0585                	add	a1,a1,1
  while (n-- && *p)
    8001aeee:	00558663          	beq	a1,t0,8001aefa <vprintfmt.constprop.1+0x8ae>
    8001aef2:	0005ce83          	lbu	t4,0(a1)
    8001aef6:	fe0e9be3          	bnez	t4,8001aeec <vprintfmt.constprop.1+0x8a0>
  return p - s;
    8001aefa:	412585b3          	sub	a1,a1,s2
        for (width -= strnlen(p, precision); width > 0; width--)
    8001aefe:	40bf8ebb          	subw	t4,t6,a1
    8001af02:	c3d057e3          	blez	t4,8001ab30 <vprintfmt.constprop.1+0x4e4>
  buf[buflen++] = ch;
    8001af06:	00022997          	auipc	s3,0x22
    8001af0a:	1ce98993          	add	s3,s3,462 # 8003d0d4 <buflen.2>
    8001af0e:	0009a583          	lw	a1,0(s3)
    8001af12:	00022397          	auipc	t2,0x22
    8001af16:	16e38393          	add	t2,t2,366 # 8003d080 <buf.1>
  if (ch == '\n' || buflen == sizeof(buf))
    8001af1a:	04000a93          	li	s5,64
  magic_mem[1] = arg0;
    8001af1e:	4c05                	li	s8,1
  tohost = (uintptr_t)magic_mem;
    8001af20:	24070b93          	add	s7,a4,576
    8001af24:	0000bb17          	auipc	s6,0xb
    8001af28:	0dcb0b13          	add	s6,s6,220 # 80026000 <tohost>
    8001af2c:	0000bf97          	auipc	t6,0xb
    8001af30:	114f8f93          	add	t6,t6,276 # 80026040 <fromhost>
    8001af34:	a021                	j	8001af3c <vprintfmt.constprop.1+0x8f0>
        for (width -= strnlen(p, precision); width > 0; width--)
    8001af36:	3efd                	addw	t4,t4,-1
    8001af38:	be0e8ce3          	beqz	t4,8001ab30 <vprintfmt.constprop.1+0x4e4>
  buf[buflen++] = ch;
    8001af3c:	0015829b          	addw	t0,a1,1
    8001af40:	959e                	add	a1,a1,t2
    8001af42:	01458023          	sb	s4,0(a1)
    8001af46:	0059a023          	sw	t0,0(s3)
    8001af4a:	0002859b          	sext.w	a1,t0
  if (ch == '\n' || buflen == sizeof(buf))
    8001af4e:	ff5594e3          	bne	a1,s5,8001af36 <vprintfmt.constprop.1+0x8ea>
  magic_mem[0] = which;
    8001af52:	25573023          	sd	s5,576(a4)
  magic_mem[1] = arg0;
    8001af56:	25873423          	sd	s8,584(a4)
  magic_mem[2] = arg1;
    8001af5a:	24773823          	sd	t2,592(a4)
  magic_mem[3] = arg2;
    8001af5e:	25573c23          	sd	s5,600(a4)
  __sync_synchronize();
    8001af62:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001af66:	017b3023          	sd	s7,0(s6)
  while (fromhost == 0)
    8001af6a:	000fb583          	ld	a1,0(t6)
    8001af6e:	ddf5                	beqz	a1,8001af6a <vprintfmt.constprop.1+0x91e>
  fromhost = 0;
    8001af70:	0000b597          	auipc	a1,0xb
    8001af74:	0c05b823          	sd	zero,208(a1) # 80026040 <fromhost>
  __sync_synchronize();
    8001af78:	0ff0000f          	fence
  return magic_mem[0];
    8001af7c:	24073583          	ld	a1,576(a4)
    buflen = 0;
    8001af80:	00022597          	auipc	a1,0x22
    8001af84:	1405aa23          	sw	zero,340(a1) # 8003d0d4 <buflen.2>
    8001af88:	4581                	li	a1,0
    8001af8a:	b775                	j	8001af36 <vprintfmt.constprop.1+0x8ea>
    switch (ch = *(unsigned char *) fmt++) {
    8001af8c:	82aa                	mv	t0,a0
    8001af8e:	b869                	j	8001a828 <vprintfmt.constprop.1+0x1dc>
  magic_mem[0] = which;
    8001af90:	19c73023          	sd	t3,384(a4)
  magic_mem[1] = arg0;
    8001af94:	4585                	li	a1,1
    8001af96:	18b73423          	sd	a1,392(a4)
  magic_mem[2] = arg1;
    8001af9a:	18773823          	sd	t2,400(a4)
  magic_mem[3] = arg2;
    8001af9e:	19c73c23          	sd	t3,408(a4)
  __sync_synchronize();
    8001afa2:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001afa6:	18070593          	add	a1,a4,384
    8001afaa:	0000be17          	auipc	t3,0xb
    8001afae:	04be3b23          	sd	a1,86(t3) # 80026000 <tohost>
  while (fromhost == 0)
    8001afb2:	0000be17          	auipc	t3,0xb
    8001afb6:	08ee0e13          	add	t3,t3,142 # 80026040 <fromhost>
    8001afba:	000e3583          	ld	a1,0(t3)
    8001afbe:	ddf5                	beqz	a1,8001afba <vprintfmt.constprop.1+0x96e>
  fromhost = 0;
    8001afc0:	0000b597          	auipc	a1,0xb
    8001afc4:	0805b023          	sd	zero,128(a1) # 80026040 <fromhost>
  __sync_synchronize();
    8001afc8:	0ff0000f          	fence
  return magic_mem[0];
    8001afcc:	18073583          	ld	a1,384(a4)
    buflen = 0;
    8001afd0:	4e01                	li	t3,0
    8001afd2:	00022597          	auipc	a1,0x22
    8001afd6:	1005a123          	sw	zero,258(a1) # 8003d0d4 <buflen.2>
    8001afda:	b541                	j	8001ae5a <vprintfmt.constprop.1+0x80e>
        for (width -= strnlen(p, precision); width > 0; width--)
    8001afdc:	000e8f9b          	sext.w	t6,t4
        p = "(null)";
    8001afe0:	00008917          	auipc	s2,0x8
    8001afe4:	5b090913          	add	s2,s2,1456 # 80023590 <__func__.1+0x68e8>
  while (n-- && *p)
    8001afe8:	ee0e1ee3          	bnez	t3,8001aee4 <vprintfmt.constprop.1+0x898>
    8001afec:	bf29                	j	8001af06 <vprintfmt.constprop.1+0x8ba>
    8001afee:	00022397          	auipc	t2,0x22
    8001aff2:	09238393          	add	t2,t2,146 # 8003d080 <buf.1>
    8001aff6:	b535                	j	8001ae22 <vprintfmt.constprop.1+0x7d6>

000000008001aff8 <strlen>:
  while (*p)
    8001aff8:	00054783          	lbu	a5,0(a0)
    8001affc:	cb89                	beqz	a5,8001b00e <strlen+0x16>
  const char *p = s;
    8001affe:	87aa                	mv	a5,a0
  while (*p)
    8001b000:	0017c703          	lbu	a4,1(a5)
    p++;
    8001b004:	0785                	add	a5,a5,1
  while (*p)
    8001b006:	ff6d                	bnez	a4,8001b000 <strlen+0x8>
  return p - s;
    8001b008:	40a78533          	sub	a0,a5,a0
    8001b00c:	8082                	ret
  while (*p)
    8001b00e:	4501                	li	a0,0
}
    8001b010:	8082                	ret

000000008001b012 <strnlen>:
  while (n-- && *p)
    8001b012:	00b506b3          	add	a3,a0,a1
  const char *p = s;
    8001b016:	87aa                	mv	a5,a0
  while (n-- && *p)
    8001b018:	e589                	bnez	a1,8001b022 <strnlen+0x10>
    8001b01a:	a829                	j	8001b034 <strnlen+0x22>
    p++;
    8001b01c:	0785                	add	a5,a5,1
  while (n-- && *p)
    8001b01e:	00f68863          	beq	a3,a5,8001b02e <strnlen+0x1c>
    8001b022:	0007c703          	lbu	a4,0(a5)
    8001b026:	fb7d                	bnez	a4,8001b01c <strnlen+0xa>
  return p - s;
    8001b028:	40a78533          	sub	a0,a5,a0
}
    8001b02c:	8082                	ret
  return p - s;
    8001b02e:	40a68533          	sub	a0,a3,a0
    8001b032:	8082                	ret
  while (n-- && *p)
    8001b034:	4501                	li	a0,0
    8001b036:	8082                	ret

000000008001b038 <setStats>:
  READ_CTR(mcycle);
    8001b038:	b0002773          	csrr	a4,mcycle
    8001b03c:	00022797          	auipc	a5,0x22
    8001b040:	04478793          	add	a5,a5,68 # 8003d080 <buf.1>
    8001b044:	c511                	beqz	a0,8001b050 <setStats+0x18>
    8001b046:	e3b8                	sd	a4,64(a5)
  READ_CTR(minstret);
    8001b048:	b0202773          	csrr	a4,minstret
    8001b04c:	e7b8                	sd	a4,72(a5)
}
    8001b04e:	8082                	ret
  READ_CTR(mcycle);
    8001b050:	63b4                	ld	a3,64(a5)
    8001b052:	8f15                	sub	a4,a4,a3
    8001b054:	e3b8                	sd	a4,64(a5)
  READ_CTR(minstret);
    8001b056:	b0202773          	csrr	a4,minstret
    8001b05a:	67b4                	ld	a3,72(a5)
    8001b05c:	8f15                	sub	a4,a4,a3
    8001b05e:	e7b8                	sd	a4,72(a5)
}
    8001b060:	8082                	ret

000000008001b062 <tohost_exit>:
  tohost = (code << 1) | 1;
    8001b062:	00151793          	sll	a5,a0,0x1
    8001b066:	0017e793          	or	a5,a5,1
    8001b06a:	0000b717          	auipc	a4,0xb
    8001b06e:	f8f73b23          	sd	a5,-106(a4) # 80026000 <tohost>
  while (1);
    8001b072:	a001                	j	8001b072 <tohost_exit+0x10>

000000008001b074 <handle_trap>:
  tohost = (code << 1) | 1;
    8001b074:	6785                	lui	a5,0x1
    8001b076:	a7378793          	add	a5,a5,-1421 # a73 <_test_table_size+0xa72>
    8001b07a:	0000b717          	auipc	a4,0xb
    8001b07e:	f8f73323          	sd	a5,-122(a4) # 80026000 <tohost>
  while (1);
    8001b082:	a001                	j	8001b082 <handle_trap+0xe>

000000008001b084 <exit>:
{
    8001b084:	1141                	add	sp,sp,-16
    8001b086:	e406                	sd	ra,8(sp)
  tohost_exit(code);
    8001b088:	fdbff0ef          	jal	8001b062 <tohost_exit>

000000008001b08c <abort>:
  tohost = (code << 1) | 1;
    8001b08c:	10d00793          	li	a5,269
    8001b090:	0000b717          	auipc	a4,0xb
    8001b094:	f6f73823          	sd	a5,-144(a4) # 80026000 <tohost>
  while (1);
    8001b098:	a001                	j	8001b098 <abort+0xc>

000000008001b09a <printstr>:
  while (*p)
    8001b09a:	00054783          	lbu	a5,0(a0)
{
    8001b09e:	7159                	add	sp,sp,-112
    8001b0a0:	03f10693          	add	a3,sp,63
    8001b0a4:	fc06f693          	and	a3,a3,-64
  while (*p)
    8001b0a8:	c3b9                	beqz	a5,8001b0ee <printstr+0x54>
  const char *p = s;
    8001b0aa:	87aa                	mv	a5,a0
  while (*p)
    8001b0ac:	0017c703          	lbu	a4,1(a5)
    p++;
    8001b0b0:	0785                	add	a5,a5,1
  while (*p)
    8001b0b2:	ff6d                	bnez	a4,8001b0ac <printstr+0x12>
  return p - s;
    8001b0b4:	8f89                	sub	a5,a5,a0
  magic_mem[0] = which;
    8001b0b6:	04000713          	li	a4,64
    8001b0ba:	e298                	sd	a4,0(a3)
  magic_mem[1] = arg0;
    8001b0bc:	4705                	li	a4,1
    8001b0be:	e698                	sd	a4,8(a3)
  magic_mem[2] = arg1;
    8001b0c0:	ea88                	sd	a0,16(a3)
  magic_mem[3] = arg2;
    8001b0c2:	ee9c                	sd	a5,24(a3)
  __sync_synchronize();
    8001b0c4:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001b0c8:	0000b717          	auipc	a4,0xb
    8001b0cc:	f7870713          	add	a4,a4,-136 # 80026040 <fromhost>
    8001b0d0:	0000b797          	auipc	a5,0xb
    8001b0d4:	f2d7b823          	sd	a3,-208(a5) # 80026000 <tohost>
  while (fromhost == 0)
    8001b0d8:	631c                	ld	a5,0(a4)
    8001b0da:	dffd                	beqz	a5,8001b0d8 <printstr+0x3e>
  fromhost = 0;
    8001b0dc:	0000b797          	auipc	a5,0xb
    8001b0e0:	f607b223          	sd	zero,-156(a5) # 80026040 <fromhost>
  __sync_synchronize();
    8001b0e4:	0ff0000f          	fence
  return magic_mem[0];
    8001b0e8:	629c                	ld	a5,0(a3)
}
    8001b0ea:	6165                	add	sp,sp,112
    8001b0ec:	8082                	ret
  while (*p)
    8001b0ee:	4781                	li	a5,0
    8001b0f0:	b7d9                	j	8001b0b6 <printstr+0x1c>

000000008001b0f2 <puts>:
    8001b0f2:	00054783          	lbu	a5,0(a0)
{
    8001b0f6:	7171                	add	sp,sp,-176
    8001b0f8:	03f10693          	add	a3,sp,63
    8001b0fc:	fc06f693          	and	a3,a3,-64
  while (*p)
    8001b100:	c7d9                	beqz	a5,8001b18e <puts+0x9c>
  const char *p = s;
    8001b102:	87aa                	mv	a5,a0
  while (*p)
    8001b104:	0017c703          	lbu	a4,1(a5)
    p++;
    8001b108:	0785                	add	a5,a5,1
  while (*p)
    8001b10a:	ff6d                	bnez	a4,8001b104 <puts+0x12>
  return p - s;
    8001b10c:	8f89                	sub	a5,a5,a0
  magic_mem[0] = which;
    8001b10e:	04000713          	li	a4,64
    8001b112:	e2b8                	sd	a4,64(a3)
  magic_mem[1] = arg0;
    8001b114:	4705                	li	a4,1
    8001b116:	e6b8                	sd	a4,72(a3)
  magic_mem[2] = arg1;
    8001b118:	eaa8                	sd	a0,80(a3)
  magic_mem[3] = arg2;
    8001b11a:	eebc                	sd	a5,88(a3)
  __sync_synchronize();
    8001b11c:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001b120:	0000b617          	auipc	a2,0xb
    8001b124:	ee060613          	add	a2,a2,-288 # 80026000 <tohost>
    8001b128:	04068793          	add	a5,a3,64
    8001b12c:	e21c                	sd	a5,0(a2)
  while (fromhost == 0)
    8001b12e:	0000b797          	auipc	a5,0xb
    8001b132:	f1278793          	add	a5,a5,-238 # 80026040 <fromhost>
    8001b136:	6398                	ld	a4,0(a5)
    8001b138:	df7d                	beqz	a4,8001b136 <puts+0x44>
  fromhost = 0;
    8001b13a:	0000b717          	auipc	a4,0xb
    8001b13e:	f0073323          	sd	zero,-250(a4) # 80026040 <fromhost>
  __sync_synchronize();
    8001b142:	0ff0000f          	fence
  return magic_mem[0];
    8001b146:	62b8                	ld	a4,64(a3)
  magic_mem[0] = which;
    8001b148:	04000593          	li	a1,64
    8001b14c:	e28c                	sd	a1,0(a3)
  magic_mem[1] = arg0;
    8001b14e:	4705                	li	a4,1
    8001b150:	e698                	sd	a4,8(a3)
  syscall(SYS_write, 1, (uintptr_t)s, strlen(s));
    8001b152:	00002597          	auipc	a1,0x2
    8001b156:	12658593          	add	a1,a1,294 # 8001d278 <__func__.1+0x5d0>
  magic_mem[2] = arg1;
    8001b15a:	ea8c                	sd	a1,16(a3)
  magic_mem[3] = arg2;
    8001b15c:	ee98                	sd	a4,24(a3)
  __sync_synchronize();
    8001b15e:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001b162:	e214                	sd	a3,0(a2)
  while (fromhost == 0)
    8001b164:	6398                	ld	a4,0(a5)
    8001b166:	df7d                	beqz	a4,8001b164 <puts+0x72>
  fromhost = 0;
    8001b168:	0000b797          	auipc	a5,0xb
    8001b16c:	ec07bc23          	sd	zero,-296(a5) # 80026040 <fromhost>
  __sync_synchronize();
    8001b170:	0ff0000f          	fence
  while (*p)
    8001b174:	00054783          	lbu	a5,0(a0)
  return magic_mem[0];
    8001b178:	6298                	ld	a4,0(a3)
  while (*p)
    8001b17a:	cf81                	beqz	a5,8001b192 <puts+0xa0>
  const char *p = s;
    8001b17c:	87aa                	mv	a5,a0
  while (*p)
    8001b17e:	0017c703          	lbu	a4,1(a5)
    p++;
    8001b182:	0785                	add	a5,a5,1
  while (*p)
    8001b184:	ff6d                	bnez	a4,8001b17e <puts+0x8c>
  return strlen(s);
    8001b186:	40a7853b          	subw	a0,a5,a0
}
    8001b18a:	614d                	add	sp,sp,176
    8001b18c:	8082                	ret
  while (*p)
    8001b18e:	4781                	li	a5,0
    8001b190:	bfbd                	j	8001b10e <puts+0x1c>
    8001b192:	4501                	li	a0,0
}
    8001b194:	614d                	add	sp,sp,176
    8001b196:	8082                	ret

000000008001b198 <thread_entry>:
  while (cid != 0);
    8001b198:	c111                	beqz	a0,8001b19c <thread_entry+0x4>
    8001b19a:	a001                	j	8001b19a <thread_entry+0x2>
}
    8001b19c:	8082                	ret

000000008001b19e <printhex>:
{
    8001b19e:	7131                	add	sp,sp,-192
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001b1a0:	00f57713          	and	a4,a0,15
{
    8001b1a4:	05f10693          	add	a3,sp,95
    8001b1a8:	fd22                	sd	s0,184(sp)
    8001b1aa:	f926                	sd	s1,176(sp)
    8001b1ac:	f54a                	sd	s2,168(sp)
    8001b1ae:	f14e                	sd	s3,160(sp)
    8001b1b0:	ed52                	sd	s4,152(sp)
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001b1b2:	47a5                	li	a5,9
{
    8001b1b4:	fc06f693          	and	a3,a3,-64
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001b1b8:	85ba                	mv	a1,a4
    8001b1ba:	03000393          	li	t2,48
    8001b1be:	00e7f463          	bgeu	a5,a4,8001b1c6 <printhex+0x28>
    8001b1c2:	05700393          	li	t2,87
    x >>= 4;
    8001b1c6:	00455793          	srl	a5,a0,0x4
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001b1ca:	00f7f613          	and	a2,a5,15
    8001b1ce:	4725                	li	a4,9
    8001b1d0:	93ae                	add	t2,t2,a1
    8001b1d2:	87b2                	mv	a5,a2
    8001b1d4:	05700293          	li	t0,87
    8001b1d8:	00c76463          	bltu	a4,a2,8001b1e0 <printhex+0x42>
    8001b1dc:	03000293          	li	t0,48
    x >>= 4;
    8001b1e0:	00855f93          	srl	t6,a0,0x8
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001b1e4:	00fff613          	and	a2,t6,15
    8001b1e8:	4725                	li	a4,9
    8001b1ea:	92be                	add	t0,t0,a5
    8001b1ec:	8fb2                	mv	t6,a2
    8001b1ee:	05700793          	li	a5,87
    8001b1f2:	00c76463          	bltu	a4,a2,8001b1fa <printhex+0x5c>
    8001b1f6:	03000793          	li	a5,48
    x >>= 4;
    8001b1fa:	00c55f13          	srl	t5,a0,0xc
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001b1fe:	00ff7613          	and	a2,t5,15
    8001b202:	4725                	li	a4,9
    8001b204:	9fbe                	add	t6,t6,a5
    8001b206:	8f32                	mv	t5,a2
    8001b208:	05700793          	li	a5,87
    8001b20c:	00c76463          	bltu	a4,a2,8001b214 <printhex+0x76>
    8001b210:	03000793          	li	a5,48
    x >>= 4;
    8001b214:	01055e93          	srl	t4,a0,0x10
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001b218:	00fef613          	and	a2,t4,15
    8001b21c:	4725                	li	a4,9
    8001b21e:	9f3e                	add	t5,t5,a5
    8001b220:	8eb2                	mv	t4,a2
    8001b222:	05700793          	li	a5,87
    8001b226:	00c76463          	bltu	a4,a2,8001b22e <printhex+0x90>
    8001b22a:	03000793          	li	a5,48
    x >>= 4;
    8001b22e:	01455e13          	srl	t3,a0,0x14
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001b232:	00fe7613          	and	a2,t3,15
    8001b236:	4725                	li	a4,9
    8001b238:	9ebe                	add	t4,t4,a5
    8001b23a:	8e32                	mv	t3,a2
    8001b23c:	05700793          	li	a5,87
    8001b240:	00c76463          	bltu	a4,a2,8001b248 <printhex+0xaa>
    8001b244:	03000793          	li	a5,48
    x >>= 4;
    8001b248:	01855313          	srl	t1,a0,0x18
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001b24c:	00f37593          	and	a1,t1,15
    8001b250:	4625                	li	a2,9
    8001b252:	9e3e                	add	t3,t3,a5
    8001b254:	832e                	mv	t1,a1
    8001b256:	05700713          	li	a4,87
    8001b25a:	00b66463          	bltu	a2,a1,8001b262 <printhex+0xc4>
    8001b25e:	03000713          	li	a4,48
    8001b262:	01c5579b          	srlw	a5,a0,0x1c
    8001b266:	4625                	li	a2,9
    8001b268:	933a                	add	t1,t1,a4
    8001b26a:	843e                	mv	s0,a5
    8001b26c:	05700713          	li	a4,87
    8001b270:	00f66463          	bltu	a2,a5,8001b278 <printhex+0xda>
    8001b274:	03000713          	li	a4,48
    x >>= 4;
    8001b278:	02055893          	srl	a7,a0,0x20
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001b27c:	00f8f593          	and	a1,a7,15
    8001b280:	4625                	li	a2,9
    8001b282:	943a                	add	s0,s0,a4
    8001b284:	88ae                	mv	a7,a1
    8001b286:	05700793          	li	a5,87
    8001b28a:	00b66463          	bltu	a2,a1,8001b292 <printhex+0xf4>
    8001b28e:	03000793          	li	a5,48
    x >>= 4;
    8001b292:	02455813          	srl	a6,a0,0x24
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001b296:	00f87593          	and	a1,a6,15
    8001b29a:	4625                	li	a2,9
    8001b29c:	98be                	add	a7,a7,a5
    8001b29e:	882e                	mv	a6,a1
    8001b2a0:	05700713          	li	a4,87
    8001b2a4:	00b66463          	bltu	a2,a1,8001b2ac <printhex+0x10e>
    8001b2a8:	03000713          	li	a4,48
    x >>= 4;
    8001b2ac:	02855793          	srl	a5,a0,0x28
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001b2b0:	00f7f493          	and	s1,a5,15
    8001b2b4:	45a5                	li	a1,9
    8001b2b6:	983a                	add	a6,a6,a4
    8001b2b8:	05700613          	li	a2,87
    8001b2bc:	8726                	mv	a4,s1
    8001b2be:	0095e463          	bltu	a1,s1,8001b2c6 <printhex+0x128>
    8001b2c2:	03000613          	li	a2,48
    x >>= 4;
    8001b2c6:	02c55793          	srl	a5,a0,0x2c
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001b2ca:	00f7f913          	and	s2,a5,15
    8001b2ce:	45a5                	li	a1,9
    8001b2d0:	00c704b3          	add	s1,a4,a2
    8001b2d4:	874a                	mv	a4,s2
    8001b2d6:	05700613          	li	a2,87
    8001b2da:	0125e463          	bltu	a1,s2,8001b2e2 <printhex+0x144>
    8001b2de:	03000613          	li	a2,48
    x >>= 4;
    8001b2e2:	03055793          	srl	a5,a0,0x30
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001b2e6:	00f7f993          	and	s3,a5,15
    8001b2ea:	4925                	li	s2,9
    8001b2ec:	00c705b3          	add	a1,a4,a2
    8001b2f0:	874e                	mv	a4,s3
    8001b2f2:	05700613          	li	a2,87
    8001b2f6:	01396463          	bltu	s2,s3,8001b2fe <printhex+0x160>
    8001b2fa:	03000613          	li	a2,48
    x >>= 4;
    8001b2fe:	03455793          	srl	a5,a0,0x34
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001b302:	00f7fa13          	and	s4,a5,15
    8001b306:	49a5                	li	s3,9
    8001b308:	963a                	add	a2,a2,a4
    8001b30a:	05700913          	li	s2,87
    8001b30e:	8752                	mv	a4,s4
    8001b310:	0149e463          	bltu	s3,s4,8001b318 <printhex+0x17a>
    8001b314:	03000913          	li	s2,48
    x >>= 4;
    8001b318:	03855793          	srl	a5,a0,0x38
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001b31c:	00f7fa13          	and	s4,a5,15
    8001b320:	49a5                	li	s3,9
    8001b322:	974a                	add	a4,a4,s2
    8001b324:	87d2                	mv	a5,s4
    8001b326:	05700913          	li	s2,87
    8001b32a:	0149e463          	bltu	s3,s4,8001b332 <printhex+0x194>
    8001b32e:	03000913          	li	s2,48
    x >>= 4;
    8001b332:	03c55a13          	srl	s4,a0,0x3c
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001b336:	49a5                	li	s3,9
    8001b338:	97ca                	add	a5,a5,s2
    8001b33a:	0b49f163          	bgeu	s3,s4,8001b3dc <printhex+0x23e>
    8001b33e:	057a0513          	add	a0,s4,87
  syscall(SYS_write, 1, (uintptr_t)s, strlen(s));
    8001b342:	00810913          	add	s2,sp,8
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001b346:	00f104a3          	sb	a5,9(sp)
    8001b34a:	00710ba3          	sb	t2,23(sp)
    8001b34e:	00510b23          	sb	t0,22(sp)
    8001b352:	01f10aa3          	sb	t6,21(sp)
    8001b356:	01e10a23          	sb	t5,20(sp)
    8001b35a:	01d109a3          	sb	t4,19(sp)
    8001b35e:	01c10923          	sb	t3,18(sp)
    8001b362:	006108a3          	sb	t1,17(sp)
    8001b366:	00810823          	sb	s0,16(sp)
    8001b36a:	011107a3          	sb	a7,15(sp)
    8001b36e:	01010723          	sb	a6,14(sp)
    8001b372:	009106a3          	sb	s1,13(sp)
    8001b376:	00b10623          	sb	a1,12(sp)
    8001b37a:	00c105a3          	sb	a2,11(sp)
    8001b37e:	00e10523          	sb	a4,10(sp)
    8001b382:	00a10423          	sb	a0,8(sp)
  str[16] = 0;
    8001b386:	00010c23          	sb	zero,24(sp)
  const char *p = s;
    8001b38a:	87ca                	mv	a5,s2
  while (*p)
    8001b38c:	0017c703          	lbu	a4,1(a5)
    p++;
    8001b390:	0785                	add	a5,a5,1
  while (*p)
    8001b392:	ff6d                	bnez	a4,8001b38c <printhex+0x1ee>
  magic_mem[0] = which;
    8001b394:	04000713          	li	a4,64
    8001b398:	e298                	sd	a4,0(a3)
  magic_mem[1] = arg0;
    8001b39a:	4705                	li	a4,1
    8001b39c:	e698                	sd	a4,8(a3)
  magic_mem[2] = arg1;
    8001b39e:	0126b823          	sd	s2,16(a3)
  return p - s;
    8001b3a2:	412787b3          	sub	a5,a5,s2
  magic_mem[3] = arg2;
    8001b3a6:	ee9c                	sd	a5,24(a3)
  __sync_synchronize();
    8001b3a8:	0ff0000f          	fence
  tohost = (uintptr_t)magic_mem;
    8001b3ac:	0000b717          	auipc	a4,0xb
    8001b3b0:	c9470713          	add	a4,a4,-876 # 80026040 <fromhost>
    8001b3b4:	0000b797          	auipc	a5,0xb
    8001b3b8:	c4d7b623          	sd	a3,-948(a5) # 80026000 <tohost>
  while (fromhost == 0)
    8001b3bc:	631c                	ld	a5,0(a4)
    8001b3be:	dffd                	beqz	a5,8001b3bc <printhex+0x21e>
  fromhost = 0;
    8001b3c0:	0000b797          	auipc	a5,0xb
    8001b3c4:	c807b023          	sd	zero,-896(a5) # 80026040 <fromhost>
  __sync_synchronize();
    8001b3c8:	0ff0000f          	fence
}
    8001b3cc:	746a                	ld	s0,184(sp)
    8001b3ce:	74ca                	ld	s1,176(sp)
    8001b3d0:	792a                	ld	s2,168(sp)
    8001b3d2:	798a                	ld	s3,160(sp)
    8001b3d4:	6a6a                	ld	s4,152(sp)
  return magic_mem[0];
    8001b3d6:	629c                	ld	a5,0(a3)
}
    8001b3d8:	6129                	add	sp,sp,192
    8001b3da:	8082                	ret
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8001b3dc:	030a0513          	add	a0,s4,48
  syscall(SYS_write, 1, (uintptr_t)s, strlen(s));
    8001b3e0:	00810913          	add	s2,sp,8
  while (*p)
    8001b3e4:	b78d                	j	8001b346 <printhex+0x1a8>

000000008001b3e6 <printf>:
{
    8001b3e6:	711d                	add	sp,sp,-96
  va_start(ap, fmt);
    8001b3e8:	02810313          	add	t1,sp,40
{
    8001b3ec:	f42e                	sd	a1,40(sp)
  vprintfmt((void*)putchar, 0, fmt, ap);
    8001b3ee:	859a                	mv	a1,t1
{
    8001b3f0:	ec06                	sd	ra,24(sp)
    8001b3f2:	f832                	sd	a2,48(sp)
    8001b3f4:	fc36                	sd	a3,56(sp)
    8001b3f6:	e0ba                	sd	a4,64(sp)
    8001b3f8:	e4be                	sd	a5,72(sp)
    8001b3fa:	e8c2                	sd	a6,80(sp)
    8001b3fc:	ecc6                	sd	a7,88(sp)
  va_start(ap, fmt);
    8001b3fe:	e41a                	sd	t1,8(sp)
  vprintfmt((void*)putchar, 0, fmt, ap);
    8001b400:	a4cff0ef          	jal	8001a64c <vprintfmt.constprop.1>
}
    8001b404:	60e2                	ld	ra,24(sp)
    8001b406:	4501                	li	a0,0
    8001b408:	6125                	add	sp,sp,96
    8001b40a:	8082                	ret

000000008001b40c <sprintf>:
{
    8001b40c:	711d                	add	sp,sp,-96
  va_start(ap, fmt);
    8001b40e:	03010313          	add	t1,sp,48
{
    8001b412:	f022                	sd	s0,32(sp)
    8001b414:	e42a                	sd	a0,8(sp)
    8001b416:	f832                	sd	a2,48(sp)
  char* str0 = str;
    8001b418:	842a                	mv	s0,a0

  vprintfmt(sprintf_putch, (void**)&str, fmt, ap);
    8001b41a:	861a                	mv	a2,t1
    8001b41c:	0028                	add	a0,sp,8
{
    8001b41e:	f406                	sd	ra,40(sp)
    8001b420:	fc36                	sd	a3,56(sp)
    8001b422:	e0ba                	sd	a4,64(sp)
    8001b424:	e4be                	sd	a5,72(sp)
    8001b426:	e8c2                	sd	a6,80(sp)
    8001b428:	ecc6                	sd	a7,88(sp)
  va_start(ap, fmt);
    8001b42a:	ec1a                	sd	t1,24(sp)
  vprintfmt(sprintf_putch, (void**)&str, fmt, ap);
    8001b42c:	f0bfe0ef          	jal	8001a336 <vprintfmt.constprop.0>
  *str = 0;
    8001b430:	6522                	ld	a0,8(sp)
    8001b432:	00050023          	sb	zero,0(a0)

  va_end(ap);
  return str - str0;
}
    8001b436:	70a2                	ld	ra,40(sp)
    8001b438:	9d01                	subw	a0,a0,s0
    8001b43a:	7402                	ld	s0,32(sp)
    8001b43c:	6125                	add	sp,sp,96
    8001b43e:	8082                	ret

000000008001b440 <memcpy>:

void* memcpy(void* dest, const void* src, size_t len)
{
  if ((((uintptr_t)dest | (uintptr_t)src | len) & (sizeof(uintptr_t)-1)) == 0) {
    8001b440:	00b56733          	or	a4,a0,a1
    8001b444:	00c767b3          	or	a5,a4,a2
    8001b448:	8b9d                	and	a5,a5,7
    while (d < (uintptr_t*)(dest + len))
      *d++ = *s++;
  } else {
    const char* s = src;
    char *d = dest;
    while (d < (char*)(dest + len))
    8001b44a:	00c506b3          	add	a3,a0,a2
  if ((((uintptr_t)dest | (uintptr_t)src | len) & (sizeof(uintptr_t)-1)) == 0) {
    8001b44e:	cfcd                	beqz	a5,8001b508 <memcpy+0xc8>
    while (d < (char*)(dest + len))
    8001b450:	0ed57563          	bgeu	a0,a3,8001b53a <memcpy+0xfa>
    8001b454:	fff60793          	add	a5,a2,-1
    8001b458:	481d                	li	a6,7
    8001b45a:	0cf87263          	bgeu	a6,a5,8001b51e <memcpy+0xde>
    8001b45e:	8b1d                	and	a4,a4,7
    8001b460:	00158793          	add	a5,a1,1
    8001b464:	ef5d                	bnez	a4,8001b522 <memcpy+0xe2>
    8001b466:	40f50733          	sub	a4,a0,a5
    8001b46a:	00773713          	sltiu	a4,a4,7
    8001b46e:	00174713          	xor	a4,a4,1
    8001b472:	0ff77713          	zext.b	a4,a4
    8001b476:	c755                	beqz	a4,8001b522 <memcpy+0xe2>
    8001b478:	ff867893          	and	a7,a2,-8
    8001b47c:	87ae                	mv	a5,a1
    8001b47e:	872a                	mv	a4,a0
    8001b480:	98ae                	add	a7,a7,a1
      *d++ = *s++;
    8001b482:	0007b803          	ld	a6,0(a5)
    8001b486:	07a1                	add	a5,a5,8
    8001b488:	0721                	add	a4,a4,8
    8001b48a:	ff073c23          	sd	a6,-8(a4)
    while (d < (char*)(dest + len))
    8001b48e:	ff179ae3          	bne	a5,a7,8001b482 <memcpy+0x42>
    8001b492:	ff867793          	and	a5,a2,-8
    8001b496:	8a1d                	and	a2,a2,7
    8001b498:	95be                	add	a1,a1,a5
    8001b49a:	97aa                	add	a5,a5,a0
    8001b49c:	ce51                	beqz	a2,8001b538 <memcpy+0xf8>
      *d++ = *s++;
    8001b49e:	0005c603          	lbu	a2,0(a1)
    8001b4a2:	00178713          	add	a4,a5,1
    8001b4a6:	00c78023          	sb	a2,0(a5)
    while (d < (char*)(dest + len))
    8001b4aa:	08d77763          	bgeu	a4,a3,8001b538 <memcpy+0xf8>
      *d++ = *s++;
    8001b4ae:	0015c603          	lbu	a2,1(a1)
    8001b4b2:	00278713          	add	a4,a5,2
    8001b4b6:	00c780a3          	sb	a2,1(a5)
    while (d < (char*)(dest + len))
    8001b4ba:	06d77f63          	bgeu	a4,a3,8001b538 <memcpy+0xf8>
      *d++ = *s++;
    8001b4be:	0025c603          	lbu	a2,2(a1)
    8001b4c2:	00378713          	add	a4,a5,3
    8001b4c6:	00c78123          	sb	a2,2(a5)
    while (d < (char*)(dest + len))
    8001b4ca:	06d77763          	bgeu	a4,a3,8001b538 <memcpy+0xf8>
      *d++ = *s++;
    8001b4ce:	0035c603          	lbu	a2,3(a1)
    8001b4d2:	00478713          	add	a4,a5,4
    8001b4d6:	00c781a3          	sb	a2,3(a5)
    while (d < (char*)(dest + len))
    8001b4da:	04d77f63          	bgeu	a4,a3,8001b538 <memcpy+0xf8>
      *d++ = *s++;
    8001b4de:	0045c603          	lbu	a2,4(a1)
    8001b4e2:	00578713          	add	a4,a5,5
    8001b4e6:	00c78223          	sb	a2,4(a5)
    while (d < (char*)(dest + len))
    8001b4ea:	04d77763          	bgeu	a4,a3,8001b538 <memcpy+0xf8>
      *d++ = *s++;
    8001b4ee:	0055c603          	lbu	a2,5(a1)
    8001b4f2:	00678713          	add	a4,a5,6
    8001b4f6:	00c782a3          	sb	a2,5(a5)
    while (d < (char*)(dest + len))
    8001b4fa:	02d77f63          	bgeu	a4,a3,8001b538 <memcpy+0xf8>
      *d++ = *s++;
    8001b4fe:	0065c703          	lbu	a4,6(a1)
    8001b502:	00e78323          	sb	a4,6(a5)
    while (d < (char*)(dest + len))
    8001b506:	8082                	ret
    while (d < (uintptr_t*)(dest + len))
    8001b508:	02d57863          	bgeu	a0,a3,8001b538 <memcpy+0xf8>
    uintptr_t *d = dest;
    8001b50c:	87aa                	mv	a5,a0
      *d++ = *s++;
    8001b50e:	6198                	ld	a4,0(a1)
    8001b510:	07a1                	add	a5,a5,8
    8001b512:	05a1                	add	a1,a1,8
    8001b514:	fee7bc23          	sd	a4,-8(a5)
    while (d < (uintptr_t*)(dest + len))
    8001b518:	fed7ebe3          	bltu	a5,a3,8001b50e <memcpy+0xce>
    8001b51c:	8082                	ret
    8001b51e:	00158793          	add	a5,a1,1
    8001b522:	95b2                	add	a1,a1,a2
    char *d = dest;
    8001b524:	872a                	mv	a4,a0
    8001b526:	a011                	j	8001b52a <memcpy+0xea>
    8001b528:	0785                	add	a5,a5,1
      *d++ = *s++;
    8001b52a:	fff7c683          	lbu	a3,-1(a5)
    8001b52e:	0705                	add	a4,a4,1
    8001b530:	fed70fa3          	sb	a3,-1(a4)
    while (d < (char*)(dest + len))
    8001b534:	feb79ae3          	bne	a5,a1,8001b528 <memcpy+0xe8>
  }
  return dest;
}
    8001b538:	8082                	ret
    8001b53a:	8082                	ret

000000008001b53c <memset>:

void* memset(void* dest, int byte, size_t len)
{
    8001b53c:	1141                	add	sp,sp,-16
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    8001b53e:	00c567b3          	or	a5,a0,a2
{
    8001b542:	e022                	sd	s0,0(sp)
    8001b544:	e406                	sd	ra,8(sp)
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    8001b546:	8b9d                	and	a5,a5,7
{
    8001b548:	842a                	mv	s0,a0
    uintptr_t *d = dest;
    while (d < (uintptr_t*)(dest + len))
      *d++ = word;
  } else {
    char *d = dest;
    while (d < (char*)(dest + len))
    8001b54a:	00c50733          	add	a4,a0,a2
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    8001b54e:	cf81                	beqz	a5,8001b566 <memset+0x2a>
    while (d < (char*)(dest + len))
    8001b550:	00e57663          	bgeu	a0,a4,8001b55c <memset+0x20>
      *d++ = byte;
    8001b554:	0ff5f593          	zext.b	a1,a1
    8001b558:	fe5ff0ef          	jal	8001b53c <memset>
  }
  return dest;
}
    8001b55c:	60a2                	ld	ra,8(sp)
    8001b55e:	8522                	mv	a0,s0
    8001b560:	6402                	ld	s0,0(sp)
    8001b562:	0141                	add	sp,sp,16
    8001b564:	8082                	ret
    uintptr_t word = byte & 0xFF;
    8001b566:	0ff5f593          	zext.b	a1,a1
    8001b56a:	00008797          	auipc	a5,0x8
    8001b56e:	0767b783          	ld	a5,118(a5) # 800235e0 <__func__.1+0x6938>
    8001b572:	02f585b3          	mul	a1,a1,a5
    while (d < (uintptr_t*)(dest + len))
    8001b576:	fee573e3          	bgeu	a0,a4,8001b55c <memset+0x20>
    uintptr_t *d = dest;
    8001b57a:	87aa                	mv	a5,a0
      *d++ = word;
    8001b57c:	07a1                	add	a5,a5,8
    8001b57e:	feb7bc23          	sd	a1,-8(a5)
    while (d < (uintptr_t*)(dest + len))
    8001b582:	fee7ede3          	bltu	a5,a4,8001b57c <memset+0x40>
}
    8001b586:	60a2                	ld	ra,8(sp)
    8001b588:	8522                	mv	a0,s0
    8001b58a:	6402                	ld	s0,0(sp)
    8001b58c:	0141                	add	sp,sp,16
    8001b58e:	8082                	ret

000000008001b590 <strcmp>:
int strcmp(const char* s1, const char* s2)
{
  unsigned char c1, c2;

  do {
    c1 = *s1++;
    8001b590:	00054783          	lbu	a5,0(a0)
    c2 = *s2++;
    8001b594:	0585                	add	a1,a1,1
    c1 = *s1++;
    8001b596:	0505                	add	a0,a0,1
    c2 = *s2++;
    8001b598:	fff5c703          	lbu	a4,-1(a1)
  } while (c1 != 0 && c1 == c2);
    8001b59c:	c799                	beqz	a5,8001b5aa <strcmp+0x1a>
    8001b59e:	fee789e3          	beq	a5,a4,8001b590 <strcmp>

  return c1 - c2;
    8001b5a2:	0007851b          	sext.w	a0,a5
}
    8001b5a6:	9d19                	subw	a0,a0,a4
    8001b5a8:	8082                	ret
    8001b5aa:	4501                	li	a0,0
    8001b5ac:	bfed                	j	8001b5a6 <strcmp+0x16>

000000008001b5ae <strcpy>:

char* strcpy(char* dest, const char* src)
{
  char* d = dest;
    8001b5ae:	87aa                	mv	a5,a0
  while ((*d++ = *src++))
    8001b5b0:	0005c703          	lbu	a4,0(a1)
    8001b5b4:	0785                	add	a5,a5,1
    8001b5b6:	0585                	add	a1,a1,1
    8001b5b8:	fee78fa3          	sb	a4,-1(a5)
    8001b5bc:	fb75                	bnez	a4,8001b5b0 <strcpy+0x2>
    ;
  return dest;
}
    8001b5be:	8082                	ret

000000008001b5c0 <atol>:
long atol(const char* str)
{
  long res = 0;
  int sign = 0;

  while (*str == ' ')
    8001b5c0:	00054683          	lbu	a3,0(a0)
    8001b5c4:	02000713          	li	a4,32
{
    8001b5c8:	87aa                	mv	a5,a0
  while (*str == ' ')
    8001b5ca:	00e69763          	bne	a3,a4,8001b5d8 <atol+0x18>
    8001b5ce:	0017c683          	lbu	a3,1(a5)
    str++;
    8001b5d2:	0785                	add	a5,a5,1
  while (*str == ' ')
    8001b5d4:	fee68de3          	beq	a3,a4,8001b5ce <atol+0xe>

  if (*str == '-' || *str == '+') {
    8001b5d8:	02d00713          	li	a4,45
    8001b5dc:	04e68063          	beq	a3,a4,8001b61c <atol+0x5c>
    8001b5e0:	02b00713          	li	a4,43
    8001b5e4:	02e68563          	beq	a3,a4,8001b60e <atol+0x4e>
  int sign = 0;
    8001b5e8:	4581                	li	a1,0
    sign = *str == '-';
    str++;
  }

  while (*str) {
    8001b5ea:	c69d                	beqz	a3,8001b618 <atol+0x58>
    sign = *str == '-';
    8001b5ec:	4501                	li	a0,0
    res *= 10;
    res += *str++ - '0';
    8001b5ee:	0785                	add	a5,a5,1
    res *= 10;
    8001b5f0:	00251713          	sll	a4,a0,0x2
    res += *str++ - '0';
    8001b5f4:	fd06861b          	addw	a2,a3,-48
  while (*str) {
    8001b5f8:	0007c683          	lbu	a3,0(a5)
    res *= 10;
    8001b5fc:	972a                	add	a4,a4,a0
    8001b5fe:	0706                	sll	a4,a4,0x1
    res += *str++ - '0';
    8001b600:	00e60533          	add	a0,a2,a4
  while (*str) {
    8001b604:	f6ed                	bnez	a3,8001b5ee <atol+0x2e>
  }

  return sign ? -res : res;
    8001b606:	c991                	beqz	a1,8001b61a <atol+0x5a>
    8001b608:	40a00533          	neg	a0,a0
    8001b60c:	8082                	ret
  while (*str) {
    8001b60e:	0017c683          	lbu	a3,1(a5)
    sign = *str == '-';
    8001b612:	4581                	li	a1,0
    str++;
    8001b614:	0785                	add	a5,a5,1
  while (*str) {
    8001b616:	faf9                	bnez	a3,8001b5ec <atol+0x2c>
    8001b618:	4501                	li	a0,0
}
    8001b61a:	8082                	ret
  while (*str) {
    8001b61c:	0017c683          	lbu	a3,1(a5)
    sign = *str == '-';
    8001b620:	4585                	li	a1,1
    str++;
    8001b622:	0785                	add	a5,a5,1
  while (*str) {
    8001b624:	f6e1                	bnez	a3,8001b5ec <atol+0x2c>
    8001b626:	4501                	li	a0,0
    8001b628:	bfcd                	j	8001b61a <atol+0x5a>

000000008001b62a <_init>:

void _init(){

    8001b62a:	8082                	ret

000000008001b62c <mhandler_entry>:
.endm

.balign 0x4
.global mhandler_entry
mhandler_entry:
    SAVE_CONTEXT
    8001b62c:	f0810113          	add	sp,sp,-248
    8001b630:	e006                	sd	ra,0(sp)
    8001b632:	e80e                	sd	gp,16(sp)
    8001b634:	ec12                	sd	tp,24(sp)
    8001b636:	f016                	sd	t0,32(sp)
    8001b638:	f41a                	sd	t1,40(sp)
    8001b63a:	f81e                	sd	t2,48(sp)
    8001b63c:	fc22                	sd	s0,56(sp)
    8001b63e:	e0a6                	sd	s1,64(sp)
    8001b640:	e4aa                	sd	a0,72(sp)
    8001b642:	e8ae                	sd	a1,80(sp)
    8001b644:	ecb2                	sd	a2,88(sp)
    8001b646:	f0b6                	sd	a3,96(sp)
    8001b648:	f4ba                	sd	a4,104(sp)
    8001b64a:	f8be                	sd	a5,112(sp)
    8001b64c:	fcc2                	sd	a6,120(sp)
    8001b64e:	e146                	sd	a7,128(sp)
    8001b650:	e54a                	sd	s2,136(sp)
    8001b652:	e94e                	sd	s3,144(sp)
    8001b654:	ed52                	sd	s4,152(sp)
    8001b656:	f156                	sd	s5,160(sp)
    8001b658:	f55a                	sd	s6,168(sp)
    8001b65a:	f95e                	sd	s7,176(sp)
    8001b65c:	fd62                	sd	s8,184(sp)
    8001b65e:	e1e6                	sd	s9,192(sp)
    8001b660:	e5ea                	sd	s10,200(sp)
    8001b662:	e9ee                	sd	s11,208(sp)
    8001b664:	edf2                	sd	t3,216(sp)
    8001b666:	f1f6                	sd	t4,224(sp)
    8001b668:	f5fa                	sd	t5,232(sp)
    8001b66a:	f5fe                	sd	t6,232(sp)
    jal mhandler
    8001b66c:	daee50ef          	jal	80000c1a <mhandler>
    j _return
    8001b670:	a849                	j	8001b702 <_return>
    8001b672:	0001                	nop

000000008001b674 <hshandler_entry>:

.balign 0x4
.global hshandler_entry
hshandler_entry:
    SAVE_CONTEXT
    8001b674:	f0810113          	add	sp,sp,-248
    8001b678:	e006                	sd	ra,0(sp)
    8001b67a:	e80e                	sd	gp,16(sp)
    8001b67c:	ec12                	sd	tp,24(sp)
    8001b67e:	f016                	sd	t0,32(sp)
    8001b680:	f41a                	sd	t1,40(sp)
    8001b682:	f81e                	sd	t2,48(sp)
    8001b684:	fc22                	sd	s0,56(sp)
    8001b686:	e0a6                	sd	s1,64(sp)
    8001b688:	e4aa                	sd	a0,72(sp)
    8001b68a:	e8ae                	sd	a1,80(sp)
    8001b68c:	ecb2                	sd	a2,88(sp)
    8001b68e:	f0b6                	sd	a3,96(sp)
    8001b690:	f4ba                	sd	a4,104(sp)
    8001b692:	f8be                	sd	a5,112(sp)
    8001b694:	fcc2                	sd	a6,120(sp)
    8001b696:	e146                	sd	a7,128(sp)
    8001b698:	e54a                	sd	s2,136(sp)
    8001b69a:	e94e                	sd	s3,144(sp)
    8001b69c:	ed52                	sd	s4,152(sp)
    8001b69e:	f156                	sd	s5,160(sp)
    8001b6a0:	f55a                	sd	s6,168(sp)
    8001b6a2:	f95e                	sd	s7,176(sp)
    8001b6a4:	fd62                	sd	s8,184(sp)
    8001b6a6:	e1e6                	sd	s9,192(sp)
    8001b6a8:	e5ea                	sd	s10,200(sp)
    8001b6aa:	e9ee                	sd	s11,208(sp)
    8001b6ac:	edf2                	sd	t3,216(sp)
    8001b6ae:	f1f6                	sd	t4,224(sp)
    8001b6b0:	f5fa                	sd	t5,232(sp)
    8001b6b2:	f5fe                	sd	t6,232(sp)
    jal hshandler
    8001b6b4:	f72e50ef          	jal	80000e26 <hshandler>
    j _return
    8001b6b8:	a0a9                	j	8001b702 <_return>
    8001b6ba:	0001                	nop

000000008001b6bc <vshandler_entry>:

.balign 0x4
.global vshandler_entry
vshandler_entry:
    SAVE_CONTEXT
    8001b6bc:	f0810113          	add	sp,sp,-248
    8001b6c0:	e006                	sd	ra,0(sp)
    8001b6c2:	e80e                	sd	gp,16(sp)
    8001b6c4:	ec12                	sd	tp,24(sp)
    8001b6c6:	f016                	sd	t0,32(sp)
    8001b6c8:	f41a                	sd	t1,40(sp)
    8001b6ca:	f81e                	sd	t2,48(sp)
    8001b6cc:	fc22                	sd	s0,56(sp)
    8001b6ce:	e0a6                	sd	s1,64(sp)
    8001b6d0:	e4aa                	sd	a0,72(sp)
    8001b6d2:	e8ae                	sd	a1,80(sp)
    8001b6d4:	ecb2                	sd	a2,88(sp)
    8001b6d6:	f0b6                	sd	a3,96(sp)
    8001b6d8:	f4ba                	sd	a4,104(sp)
    8001b6da:	f8be                	sd	a5,112(sp)
    8001b6dc:	fcc2                	sd	a6,120(sp)
    8001b6de:	e146                	sd	a7,128(sp)
    8001b6e0:	e54a                	sd	s2,136(sp)
    8001b6e2:	e94e                	sd	s3,144(sp)
    8001b6e4:	ed52                	sd	s4,152(sp)
    8001b6e6:	f156                	sd	s5,160(sp)
    8001b6e8:	f55a                	sd	s6,168(sp)
    8001b6ea:	f95e                	sd	s7,176(sp)
    8001b6ec:	fd62                	sd	s8,184(sp)
    8001b6ee:	e1e6                	sd	s9,192(sp)
    8001b6f0:	e5ea                	sd	s10,200(sp)
    8001b6f2:	e9ee                	sd	s11,208(sp)
    8001b6f4:	edf2                	sd	t3,216(sp)
    8001b6f6:	f1f6                	sd	t4,224(sp)
    8001b6f8:	f5fa                	sd	t5,232(sp)
    8001b6fa:	f5fe                	sd	t6,232(sp)
    jal vshandler
    8001b6fc:	945e50ef          	jal	80001040 <vshandler>
    j _return
    8001b700:	a009                	j	8001b702 <_return>

000000008001b702 <_return>:
    
_return:
    li t0, 4 //make sure PRIV_M is 4
    8001b702:	4291                	li	t0,4
    beq a0, t0, _return_from_m 
    8001b704:	04550563          	beq	a0,t0,8001b74e <_return_from_m>

000000008001b708 <_return_from_s>:
_return_from_s:
    RESTORE_CONTEXT
    8001b708:	6082                	ld	ra,0(sp)
    8001b70a:	61c2                	ld	gp,16(sp)
    8001b70c:	6262                	ld	tp,24(sp)
    8001b70e:	7282                	ld	t0,32(sp)
    8001b710:	7322                	ld	t1,40(sp)
    8001b712:	73c2                	ld	t2,48(sp)
    8001b714:	7462                	ld	s0,56(sp)
    8001b716:	6486                	ld	s1,64(sp)
    8001b718:	6526                	ld	a0,72(sp)
    8001b71a:	65c6                	ld	a1,80(sp)
    8001b71c:	6666                	ld	a2,88(sp)
    8001b71e:	7686                	ld	a3,96(sp)
    8001b720:	7726                	ld	a4,104(sp)
    8001b722:	77c6                	ld	a5,112(sp)
    8001b724:	7866                	ld	a6,120(sp)
    8001b726:	688a                	ld	a7,128(sp)
    8001b728:	692a                	ld	s2,136(sp)
    8001b72a:	69ca                	ld	s3,144(sp)
    8001b72c:	6a6a                	ld	s4,152(sp)
    8001b72e:	7a8a                	ld	s5,160(sp)
    8001b730:	7b2a                	ld	s6,168(sp)
    8001b732:	7bca                	ld	s7,176(sp)
    8001b734:	7c6a                	ld	s8,184(sp)
    8001b736:	6c8e                	ld	s9,192(sp)
    8001b738:	6d2e                	ld	s10,200(sp)
    8001b73a:	6dce                	ld	s11,208(sp)
    8001b73c:	6e6e                	ld	t3,216(sp)
    8001b73e:	7e8e                	ld	t4,224(sp)
    8001b740:	7f2e                	ld	t5,232(sp)
    8001b742:	7fce                	ld	t6,240(sp)
    8001b744:	0f810113          	add	sp,sp,248
    sret
    8001b748:	10200073          	sret
    j   .
    8001b74c:	a001                	j	8001b74c <_return_from_s+0x44>

000000008001b74e <_return_from_m>:
_return_from_m:
    RESTORE_CONTEXT
    8001b74e:	6082                	ld	ra,0(sp)
    8001b750:	61c2                	ld	gp,16(sp)
    8001b752:	6262                	ld	tp,24(sp)
    8001b754:	7282                	ld	t0,32(sp)
    8001b756:	7322                	ld	t1,40(sp)
    8001b758:	73c2                	ld	t2,48(sp)
    8001b75a:	7462                	ld	s0,56(sp)
    8001b75c:	6486                	ld	s1,64(sp)
    8001b75e:	6526                	ld	a0,72(sp)
    8001b760:	65c6                	ld	a1,80(sp)
    8001b762:	6666                	ld	a2,88(sp)
    8001b764:	7686                	ld	a3,96(sp)
    8001b766:	7726                	ld	a4,104(sp)
    8001b768:	77c6                	ld	a5,112(sp)
    8001b76a:	7866                	ld	a6,120(sp)
    8001b76c:	688a                	ld	a7,128(sp)
    8001b76e:	692a                	ld	s2,136(sp)
    8001b770:	69ca                	ld	s3,144(sp)
    8001b772:	6a6a                	ld	s4,152(sp)
    8001b774:	7a8a                	ld	s5,160(sp)
    8001b776:	7b2a                	ld	s6,168(sp)
    8001b778:	7bca                	ld	s7,176(sp)
    8001b77a:	7c6a                	ld	s8,184(sp)
    8001b77c:	6c8e                	ld	s9,192(sp)
    8001b77e:	6d2e                	ld	s10,200(sp)
    8001b780:	6dce                	ld	s11,208(sp)
    8001b782:	6e6e                	ld	t3,216(sp)
    8001b784:	7e8e                	ld	t4,224(sp)
    8001b786:	7f2e                	ld	t5,232(sp)
    8001b788:	7fce                	ld	t6,240(sp)
    8001b78a:	0f810113          	add	sp,sp,248
    mret
    8001b78e:	30200073          	mret

Disassembly of section .text.startup:

000000008001b792 <main>:

void main(){
    8001b792:	1101                	add	sp,sp,-32

    INFO("risc-v hypervisor extension tests");
    8001b794:	00002517          	auipc	a0,0x2
    8001b798:	8e450513          	add	a0,a0,-1820 # 8001d078 <__func__.1+0x3d0>
void main(){
    8001b79c:	ec06                	sd	ra,24(sp)
    8001b79e:	e822                	sd	s0,16(sp)
    8001b7a0:	e426                	sd	s1,8(sp)
    8001b7a2:	e04a                	sd	s2,0(sp)
    INFO("risc-v hypervisor extension tests");
    8001b7a4:	c43ff0ef          	jal	8001b3e6 <printf>
    8001b7a8:	4529                	li	a0,10
    8001b7aa:	b0ffe0ef          	jal	8001a2b8 <putchar>
    // printf("%f\n",CSRR(CSR_SSCRATCH));
    if(check_misa_h()){
    8001b7ae:	d5fe40ef          	jal	8000050c <check_misa_h>
    8001b7b2:	c539                	beqz	a0,8001b800 <main+0x6e>
        
        reset_state();
        for(int i = 0; i < test_table_size; i++){
    8001b7b4:	0000a497          	auipc	s1,0xa
    8001b7b8:	e4c48493          	add	s1,s1,-436 # 80025600 <test_table_size>
        reset_state();
    8001b7bc:	b6be50ef          	jal	80001326 <reset_state>
        for(int i = 0; i < test_table_size; i++){
    8001b7c0:	609c                	ld	a5,0(s1)
    8001b7c2:	4401                	li	s0,0
    8001b7c4:	0000a917          	auipc	s2,0xa
    8001b7c8:	e4490913          	add	s2,s2,-444 # 80025608 <test_table>
    8001b7cc:	cf91                	beqz	a5,8001b7e8 <main+0x56>
            reset_state();
    8001b7ce:	b59e50ef          	jal	80001326 <reset_state>
            test_table[i]();
    8001b7d2:	00093783          	ld	a5,0(s2)
    8001b7d6:	00341713          	sll	a4,s0,0x3
        for(int i = 0; i < test_table_size; i++){
    8001b7da:	0405                	add	s0,s0,1
            test_table[i]();
    8001b7dc:	97ba                	add	a5,a5,a4
    8001b7de:	639c                	ld	a5,0(a5)
    8001b7e0:	9782                	jalr	a5
        for(int i = 0; i < test_table_size; i++){
    8001b7e2:	609c                	ld	a5,0(s1)
    8001b7e4:	fef465e3          	bltu	s0,a5,8001b7ce <main+0x3c>
            
    }else{
        printf("hypervisor extension is not supported!\n");
    }

    INFO("end");
    8001b7e8:	00002517          	auipc	a0,0x2
    8001b7ec:	8e050513          	add	a0,a0,-1824 # 8001d0c8 <__func__.1+0x420>
    8001b7f0:	bf7ff0ef          	jal	8001b3e6 <printf>
    8001b7f4:	4529                	li	a0,10
    8001b7f6:	ac3fe0ef          	jal	8001a2b8 <putchar>
    exit(0);
    8001b7fa:	4501                	li	a0,0
    8001b7fc:	889ff0ef          	jal	8001b084 <exit>
        printf("hypervisor extension is not supported!\n");
    8001b800:	00002517          	auipc	a0,0x2
    8001b804:	8a050513          	add	a0,a0,-1888 # 8001d0a0 <__func__.1+0x3f8>
    8001b808:	8ebff0ef          	jal	8001b0f2 <puts>
    8001b80c:	bff1                	j	8001b7e8 <main+0x56>
{
    8001b80e:	1141                	add	sp,sp,-16
  printstr("Implement main(), foo!\n");
    8001b810:	00008517          	auipc	a0,0x8
    8001b814:	d8850513          	add	a0,a0,-632 # 80023598 <__func__.1+0x68f0>
{
    8001b818:	e406                	sd	ra,8(sp)
  printstr("Implement main(), foo!\n");
    8001b81a:	881ff0ef          	jal	8001b09a <printstr>
}
    8001b81e:	60a2                	ld	ra,8(sp)
    8001b820:	557d                	li	a0,-1
    8001b822:	0141                	add	sp,sp,16
    8001b824:	8082                	ret
